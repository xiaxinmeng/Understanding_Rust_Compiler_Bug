{"sha": "b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4", "node_id": "C_kwDOANBUbNoAKGI1ZTM4OTI0MWRkN2I2ZTRjZTMyYzYxZjNlYTExYzNkYmMyY2IzZTQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-15T14:50:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-15T14:50:15Z"}, "message": "Merge #740\n\n740: Add boiler plate for TyTy::ClosureType r=philberty a=philberty\n\nThis simply adds in the boilerplate for closure types for type-checking.\r\nThe closure branch is blocked until we get lang-item support in next.\r\n\r\nAddresses #195\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "2acd9a18c260fc5314a465951cab38157056829b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2acd9a18c260fc5314a465951cab38157056829b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhaZUnCRBK7hj4Ov3rIwAA8cEIAIH4dnbdQPDCQUL48ivwBlk1\nJtKWWRN2IR/MG/twKinwoGJQKwf5d6v/I3EBWBQkozOeJtN0CDX0ftWDlkTb7bcP\nQzCDUjQs4ajXaZvRdcosbZY59KwLjUMZrv7WmdYlUEO5JTMcvgn8RXH5CDgWnHWz\nYn3Dkz1WxYR+grP8RTMPLc98jKon6DG1r3aezi4OxYSBKbXH+QBNgyS93MaL5n6K\nAYZpyeT1m+DXJlFN96w8DJK1lgilqClQhPPtU9J8ZFH7C4+NEEQQnBxF3WAxwoYG\niIW8vMaUlaoO0m5QLdY7RDXHPV3wm9LVkGmvw067ZuYDH7mad89Bi0B09Q3bLBA=\n=TSBP\n-----END PGP SIGNATURE-----\n", "payload": "tree 2acd9a18c260fc5314a465951cab38157056829b\nparent eb29257b21954544919defc15afba5cd5bfdfaa7\nparent b7bb6a9832958abb076dcd9207c7457a7bec6201\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634309415 +0000\ncommitter GitHub <noreply@github.com> 1634309415 +0000\n\nMerge #740\n\n740: Add boiler plate for TyTy::ClosureType r=philberty a=philberty\n\nThis simply adds in the boilerplate for closure types for type-checking.\r\nThe closure branch is blocked until we get lang-item support in next.\r\n\r\nAddresses #195\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb29257b21954544919defc15afba5cd5bfdfaa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb29257b21954544919defc15afba5cd5bfdfaa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb29257b21954544919defc15afba5cd5bfdfaa7"}, {"sha": "b7bb6a9832958abb076dcd9207c7457a7bec6201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7bb6a9832958abb076dcd9207c7457a7bec6201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7bb6a9832958abb076dcd9207c7457a7bec6201"}], "stats": {"total": 329, "additions": 329, "deletions": 0}, "files": [{"sha": "0da21989c477c4e8c7ccff0b061b6f7a834681e3", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4", "patch": "@@ -661,6 +661,8 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     ctx->insert_compiled_type (type.get_ty_ref (), named_struct, &type);\n   }\n \n+  void visit (TyTy::ClosureType &type) override { gcc_unreachable (); }\n+\n private:\n   TyTyResolveCompile (Context *ctx, bool trait_object_mode)\n     : ctx (ctx), trait_object_mode (trait_object_mode), translated (nullptr)"}, {"sha": "c544a45e9296f79742c35b470e6b69a741a93f81", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4", "patch": "@@ -239,6 +239,8 @@ class TyTyCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::DynamicObjectType &) override { gcc_unreachable (); }\n \n+  void visit (TyTy::ClosureType &) override { gcc_unreachable (); }\n+\n private:\n   TyTyCompile (::Backend *backend)\n     : backend (backend), translated (nullptr),"}, {"sha": "d8fbd8d4a9312b5788a7147c6fff055644e219e0", "filename": "gcc/rust/typecheck/rust-hir-const-fold.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h?ref=b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4", "patch": "@@ -193,6 +193,8 @@ class ConstFoldType : public TyTy::TyVisitor\n \n   void visit (TyTy::DynamicObjectType &) override { gcc_unreachable (); }\n \n+  void visit (TyTy::ClosureType &) override { gcc_unreachable (); }\n+\n private:\n   ConstFoldType (::Backend *backend)\n     : backend (backend), translated (backend->error_type ())"}, {"sha": "a6e7e8080c26e8fe091e90a6d7e08ee59a3c7794", "filename": "gcc/rust/typecheck/rust-substitution-mapper.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h?ref=b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4", "patch": "@@ -138,6 +138,7 @@ class SubstMapper : public TyTy::TyVisitor\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n   void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n   void visit (TyTy::DynamicObjectType &) override { gcc_unreachable (); }\n+  void visit (TyTy::ClosureType &) override { gcc_unreachable (); }\n \n private:\n   SubstMapper (HirId ref, HIR::GenericArgs *generics, Location locus)\n@@ -217,6 +218,11 @@ class SubstMapperInternal : public TyTy::TyVisitor\n     resolved = type.handle_substitions (mappings);\n   }\n \n+  void visit (TyTy::ClosureType &type) override\n+  {\n+    resolved = type.handle_substitions (mappings);\n+  }\n+\n   // nothing to do for these\n   void visit (TyTy::InferType &) override { gcc_unreachable (); }\n   void visit (TyTy::FnPtr &) override { gcc_unreachable (); }\n@@ -271,6 +277,14 @@ class SubstMapperFromExisting : public TyTy::TyVisitor\n     resolved = to_sub->handle_substitions (type.get_substitution_arguments ());\n   }\n \n+  void visit (TyTy::ClosureType &type) override\n+  {\n+    rust_assert (type.was_substituted ());\n+\n+    TyTy::ClosureType *to_sub = static_cast<TyTy::ClosureType *> (receiver);\n+    resolved = to_sub->handle_substitions (type.get_substitution_arguments ());\n+  }\n+\n   void visit (TyTy::InferType &) override { gcc_unreachable (); }\n   void visit (TyTy::TupleType &) override { gcc_unreachable (); }\n   void visit (TyTy::FnPtr &) override { gcc_unreachable (); }\n@@ -323,6 +337,11 @@ class GetUsedSubstArgs : public TyTy::TyVisitor\n     args = type.get_substitution_arguments ();\n   }\n \n+  void visit (TyTy::ClosureType &type) override\n+  {\n+    args = type.get_substitution_arguments ();\n+  }\n+\n   void visit (TyTy::InferType &) override {}\n   void visit (TyTy::TupleType &) override {}\n   void visit (TyTy::FnPtr &) override {}"}, {"sha": "2eeebd0a30111612a6addc1cabbe969e40b6a195", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4", "patch": "@@ -65,6 +65,7 @@ class TypeCheckCallExpr : private TyVisitor\n   // call fns\n   void visit (FnType &type) override;\n   void visit (FnPtr &type) override;\n+  void visit (ClosureType &type) override { gcc_unreachable (); }\n \n private:\n   TypeCheckCallExpr (HIR::CallExpr &c, Resolver::TypeCheckContext *context)\n@@ -116,6 +117,7 @@ class TypeCheckMethodCallExpr : private TyVisitor\n \n   // call fns\n   void visit (FnType &type) override;\n+  void visit (ClosureType &type) override { gcc_unreachable (); }\n \n private:\n   TypeCheckMethodCallExpr (HIR::MethodCallExpr &c,"}, {"sha": "8165bbd8ffa8c232d218f8e54b4493ecb6cb8bf6", "filename": "gcc/rust/typecheck/rust-tyty-cast.h", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h?ref=b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4", "patch": "@@ -329,6 +329,17 @@ class BaseCastRules : public TyVisitor\n \t\t   type.as_string ().c_str ());\n   }\n \n+  virtual void visit (ClosureType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"invalid cast [%s] to [%s]\",\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n protected:\n   BaseCastRules (BaseType *base)\n     : mappings (Analysis::Mappings::get ()),\n@@ -590,6 +601,19 @@ class InferCastRules : public BaseCastRules\n     BaseCastRules::visit (type);\n   }\n \n+  void visit (ClosureType &type) override\n+  {\n+    bool is_valid\n+      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+    if (is_valid)\n+      {\n+\tresolved = type.clone ();\n+\treturn;\n+      }\n+\n+    BaseCastRules::visit (type);\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -749,6 +773,21 @@ class FnptrCastRules : public BaseCastRules\n   FnPtr *base;\n };\n \n+class ClosureCastRules : public BaseCastRules\n+{\n+  using Rust::TyTy::BaseCastRules::visit;\n+\n+public:\n+  ClosureCastRules (ClosureType *base) : BaseCastRules (base), base (base) {}\n+\n+  // TODO\n+\n+private:\n+  BaseType *get_base () override { return base; }\n+\n+  ClosureType *base;\n+};\n+\n class ArrayCastRules : public BaseCastRules\n {\n   using Rust::TyTy::BaseCastRules::visit;"}, {"sha": "519501fa02ca30639a61e4c0d1d446b386489039", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4", "patch": "@@ -391,6 +391,22 @@ class BaseCmp : public TyConstVisitor\n       }\n   }\n \n+  virtual void visit (const ClosureType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n+\n protected:\n   BaseCmp (const BaseType *base, bool emit_errors)\n     : mappings (Analysis::Mappings::get ()),\n@@ -651,6 +667,19 @@ class InferCmp : public BaseCmp\n     BaseCmp::visit (type);\n   }\n \n+  void visit (const ClosureType &type) override\n+  {\n+    bool is_valid\n+      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+    if (is_valid)\n+      {\n+\tok = true;\n+\treturn;\n+      }\n+\n+    BaseCmp::visit (type);\n+  }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const InferType *base;\n@@ -792,6 +821,20 @@ class FnptrCmp : public BaseCmp\n   const FnPtr *base;\n };\n \n+class ClosureCmp : public BaseCmp\n+{\n+  using Rust::TyTy::BaseCmp::visit;\n+\n+public:\n+  ClosureCmp (const ClosureType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n+\n+private:\n+  const BaseType *get_base () const override { return base; }\n+  const ClosureType *base;\n+};\n+\n class ArrayCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;"}, {"sha": "f4592f47e2c6e9442156a1c1215bfd5c0326fbba", "filename": "gcc/rust/typecheck/rust-tyty-coercion.h", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h?ref=b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4", "patch": "@@ -343,6 +343,17 @@ class BaseCoercionRules : public TyVisitor\n \t\t   type.as_string ().c_str ());\n   }\n \n+  virtual void visit (ClosureType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n protected:\n   BaseCoercionRules (BaseType *base)\n     : mappings (Analysis::Mappings::get ()),\n@@ -605,6 +616,19 @@ class InferCoercionRules : public BaseCoercionRules\n     BaseCoercionRules::visit (type);\n   }\n \n+  void visit (ClosureType &type) override\n+  {\n+    bool is_valid\n+      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+    if (is_valid)\n+      {\n+\tresolved = type.clone ();\n+\treturn;\n+      }\n+\n+    BaseCoercionRules::visit (type);\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -764,6 +788,23 @@ class FnptrCoercionRules : public BaseCoercionRules\n   FnPtr *base;\n };\n \n+class ClosureCoercionRules : public BaseCoercionRules\n+{\n+  using Rust::TyTy::BaseCoercionRules::visit;\n+\n+public:\n+  ClosureCoercionRules (ClosureType *base)\n+    : BaseCoercionRules (base), base (base)\n+  {}\n+\n+  // TODO\n+\n+private:\n+  BaseType *get_base () override { return base; }\n+\n+  ClosureType *base;\n+};\n+\n class ArrayCoercionRules : public BaseCoercionRules\n {\n   using Rust::TyTy::BaseCoercionRules::visit;"}, {"sha": "67ab7d4c8bd701661142b47add6a21cac66aaf8d", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4", "patch": "@@ -364,6 +364,17 @@ class BaseRules : public TyVisitor\n \t\t   type.as_string ().c_str ());\n   }\n \n+  virtual void visit (ClosureType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n protected:\n   BaseRules (BaseType *base)\n     : mappings (Analysis::Mappings::get ()),\n@@ -625,6 +636,19 @@ class InferRules : public BaseRules\n     BaseRules::visit (type);\n   }\n \n+  void visit (ClosureType &type) override\n+  {\n+    bool is_valid\n+      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+    if (is_valid)\n+      {\n+\tresolved = type.clone ();\n+\treturn;\n+      }\n+\n+    BaseRules::visit (type);\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -784,6 +808,21 @@ class FnptrRules : public BaseRules\n   FnPtr *base;\n };\n \n+class ClosureRules : public BaseRules\n+{\n+  using Rust::TyTy::BaseRules::visit;\n+\n+public:\n+  ClosureRules (ClosureType *base) : BaseRules (base), base (base) {}\n+\n+  // TODO\n+\n+private:\n+  BaseType *get_base () override { return base; }\n+\n+  ClosureType *base;\n+};\n+\n class ArrayRules : public BaseRules\n {\n   using Rust::TyTy::BaseRules::visit;"}, {"sha": "fb91f2d28cc295a623ac98013b69d01f2827f9f2", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4", "patch": "@@ -49,6 +49,7 @@ class TyVisitor\n   virtual void visit (PlaceholderType &type) = 0;\n   virtual void visit (ProjectionType &type) = 0;\n   virtual void visit (DynamicObjectType &type) = 0;\n+  virtual void visit (ClosureType &type) = 0;\n };\n \n class TyConstVisitor\n@@ -76,6 +77,7 @@ class TyConstVisitor\n   virtual void visit (const PlaceholderType &type) = 0;\n   virtual void visit (const ProjectionType &type) = 0;\n   virtual void visit (const DynamicObjectType &type) = 0;\n+  virtual void visit (const ClosureType &type) = 0;\n };\n \n } // namespace TyTy"}, {"sha": "f08d8cb200d271b3b7177353ea4bce4b53286ccd", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4", "patch": "@@ -1111,6 +1111,73 @@ FnPtr::clone () const\n \t\t    result_type, get_combined_refs ());\n }\n \n+void\n+ClosureType::accept_vis (TyVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ClosureType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n+std::string\n+ClosureType::as_string () const\n+{\n+  return \"TODO\";\n+}\n+\n+BaseType *\n+ClosureType::unify (BaseType *other)\n+{\n+  ClosureRules r (this);\n+  return r.unify (other);\n+}\n+\n+bool\n+ClosureType::can_eq (const BaseType *other, bool emit_errors) const\n+{\n+  ClosureCmp r (this, emit_errors);\n+  return r.can_eq (other);\n+}\n+\n+BaseType *\n+ClosureType::coerce (BaseType *other)\n+{\n+  ClosureCoercionRules r (this);\n+  return r.coerce (other);\n+}\n+\n+BaseType *\n+ClosureType::cast (BaseType *other)\n+{\n+  ClosureCoercionRules r (this);\n+  return r.coerce (other);\n+}\n+\n+bool\n+ClosureType::is_equal (const BaseType &other) const\n+{\n+  gcc_unreachable ();\n+  return false;\n+}\n+\n+BaseType *\n+ClosureType::clone () const\n+{\n+  return new ClosureType (get_ref (), get_ty_ref (), id, parameter_types,\n+\t\t\t  result_type, clone_substs (), get_combined_refs ());\n+}\n+\n+ClosureType *\n+ClosureType::handle_substitions (SubstitutionArgumentMappings mappings)\n+{\n+  gcc_unreachable ();\n+  return nullptr;\n+}\n+\n void\n ArrayType::accept_vis (TyVisitor &vis)\n {"}, {"sha": "8ab120e7dabd7c347a4f0a5aa3f91469dda8738d", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=b5e389241dd7b6e4ce32c61f3ea11c3dbc2cb3e4", "patch": "@@ -61,6 +61,7 @@ enum TypeKind\n   PLACEHOLDER,\n   PROJECTION,\n   DYNAMIC,\n+  CLOSURE,\n   // there are more to add...\n   ERROR\n };\n@@ -135,6 +136,9 @@ class TypeKindFormat\n       case TypeKind::DYNAMIC:\n \treturn \"Dynamic\";\n \n+      case TypeKind::CLOSURE:\n+\treturn \"Closure\";\n+\n       case TypeKind::ERROR:\n \treturn \"ERROR\";\n       }\n@@ -1273,6 +1277,73 @@ class FnPtr : public BaseType\n   TyVar result_type;\n };\n \n+class ClosureType : public BaseType, public SubstitutionRef\n+{\n+public:\n+  ClosureType (HirId ref, DefId id, std::vector<TyVar> parameter_types,\n+\t       TyVar result_type,\n+\t       std::vector<SubstitutionParamMapping> subst_refs,\n+\t       std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ref, TypeKind::CLOSURE, refs),\n+      SubstitutionRef (std::move (subst_refs),\n+\t\t       SubstitutionArgumentMappings::error ()),\n+      parameter_types (std::move (parameter_types)),\n+      result_type (std::move (result_type)), id (id)\n+  {\n+    LocalDefId local_def_id = id & DEF_ID_LOCAL_DEF_MASK;\n+    rust_assert (local_def_id != UNKNOWN_LOCAL_DEFID);\n+  }\n+\n+  ClosureType (HirId ref, HirId ty_ref, DefId id,\n+\t       std::vector<TyVar> parameter_types, TyVar result_type,\n+\t       std::vector<SubstitutionParamMapping> subst_refs,\n+\t       std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ty_ref, TypeKind::CLOSURE, refs),\n+      SubstitutionRef (std::move (subst_refs),\n+\t\t       SubstitutionArgumentMappings::error ()),\n+      parameter_types (std::move (parameter_types)),\n+      result_type (std::move (result_type)), id (id)\n+  {\n+    LocalDefId local_def_id = id & DEF_ID_LOCAL_DEF_MASK;\n+    rust_assert (local_def_id != UNKNOWN_LOCAL_DEFID);\n+  }\n+\n+  void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n+\n+  std::string as_string () const override;\n+  std::string get_name () const override final { return as_string (); }\n+\n+  BaseType *unify (BaseType *other) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  BaseType *coerce (BaseType *other) override;\n+  BaseType *cast (BaseType *other) override;\n+\n+  bool is_equal (const BaseType &other) const override;\n+\n+  BaseType *clone () const final override;\n+\n+  bool needs_generic_substitutions () const override final\n+  {\n+    return needs_substitution ();\n+  }\n+\n+  bool supports_substitutions () const override final { return true; }\n+\n+  bool has_subsititions_defined () const override final\n+  {\n+    return has_substitutions ();\n+  }\n+\n+  ClosureType *\n+  handle_substitions (SubstitutionArgumentMappings mappings) override final;\n+\n+private:\n+  std::vector<TyVar> parameter_types;\n+  TyVar result_type;\n+  DefId id;\n+};\n+\n class ArrayType : public BaseType\n {\n public:"}]}