{"sha": "baf4b88182bcc44247e664640fc01f6aabcd8ed8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFmNGI4ODE4MmJjYzQ0MjQ3ZTY2NDY0MGZjMDFmNmFhYmNkOGVkOA==", "commit": {"author": {"name": "Konrad Trifunovic", "email": "konrad.trifunovic@gmail.com", "date": "2009-08-28T20:33:10Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-08-28T20:33:10Z"}, "message": "graphite-blocking.c (pbb_strip_mine_loop_depth): Renamed pbb_strip_mine_time_depth.\n\n2009-08-28  Konrad Trifunovic  <konrad.trifunovic@gmail.com>\n\t    Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-blocking.c (pbb_strip_mine_loop_depth): Renamed\n\tpbb_strip_mine_time_depth.  Changed the implementation so that\n\ttransformation is expressed as a transformation on\n\ttime (scatttering) dimensions.  Also, ensures that the 2d+1\n\tscheduling format is preserved.\n\t(pbb_strip_mine_profitable_p): Profitability is based on the\n\titeration number of a given time (scattering) dimension,\n\tand not on a original loop depth dimension.\n\t(pbb_strip_mine): Call pbb_number_of_iterations_at_time.\n\t(pbb_do_strip_mine): Call psct_dynamic_dim.\n\t* graphite-poly.c (pbb_number_of_iterations_at_time): New.\n\t* graphite-poly.h (pbb_number_of_iterations_at_time): Declared.\n\t(pbb_nb_dynamic_scattering_transform): New.\n\t(psct_dynamic_dim): New.\n\n\n\nCo-Authored-By: Sebastian Pop <sebastian.pop@amd.com>\n\nFrom-SVN: r151186", "tree": {"sha": "69ac627cca7315fe48e0749b297818c7abab1f12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69ac627cca7315fe48e0749b297818c7abab1f12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/baf4b88182bcc44247e664640fc01f6aabcd8ed8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baf4b88182bcc44247e664640fc01f6aabcd8ed8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baf4b88182bcc44247e664640fc01f6aabcd8ed8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baf4b88182bcc44247e664640fc01f6aabcd8ed8/comments", "author": {"login": "ktrifuno", "id": 76754948, "node_id": "MDQ6VXNlcjc2NzU0OTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/76754948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktrifuno", "html_url": "https://github.com/ktrifuno", "followers_url": "https://api.github.com/users/ktrifuno/followers", "following_url": "https://api.github.com/users/ktrifuno/following{/other_user}", "gists_url": "https://api.github.com/users/ktrifuno/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktrifuno/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktrifuno/subscriptions", "organizations_url": "https://api.github.com/users/ktrifuno/orgs", "repos_url": "https://api.github.com/users/ktrifuno/repos", "events_url": "https://api.github.com/users/ktrifuno/events{/privacy}", "received_events_url": "https://api.github.com/users/ktrifuno/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6a83a8e9e211f45d862a81d22deb2aed8e66453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6a83a8e9e211f45d862a81d22deb2aed8e66453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6a83a8e9e211f45d862a81d22deb2aed8e66453"}], "stats": {"total": 156, "additions": 142, "deletions": 14}, "files": [{"sha": "d9dfa5c4ec97be48041fba0da694d8ad140b80e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baf4b88182bcc44247e664640fc01f6aabcd8ed8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baf4b88182bcc44247e664640fc01f6aabcd8ed8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=baf4b88182bcc44247e664640fc01f6aabcd8ed8", "patch": "@@ -1,3 +1,21 @@\n+2009-08-28  Konrad Trifunovic  <konrad.trifunovic@gmail.com>\n+\t    Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-blocking.c (pbb_strip_mine_loop_depth): Renamed\n+\tpbb_strip_mine_time_depth.  Changed the implementation so that\n+\ttransformation is expressed as a transformation on\n+\ttime (scatttering) dimensions.  Also, ensures that the 2d+1\n+\tscheduling format is preserved.\n+\t(pbb_strip_mine_profitable_p): Profitability is based on the\n+\titeration number of a given time (scattering) dimension,\n+\tand not on a original loop depth dimension.\n+\t(pbb_strip_mine): Call pbb_number_of_iterations_at_time.\n+\t(pbb_do_strip_mine): Call psct_dynamic_dim.\n+\t* graphite-poly.c (pbb_number_of_iterations_at_time): New.\n+\t* graphite-poly.h (pbb_number_of_iterations_at_time): Declared.\n+\t(pbb_nb_dynamic_scattering_transform): New.\n+\t(psct_dynamic_dim): New.\n+\n 2009-08-28  Konrad Trifunovic  <konrad.trifunovic@gmail.com>\n \n \t* graphite-ppl.c (ppl_max_for_le): Renamed ppl_max_for_le_pointset."}, {"sha": "a83c0ed8b35e7b77aa0b084154258b530eabf214", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baf4b88182bcc44247e664640fc01f6aabcd8ed8/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baf4b88182bcc44247e664640fc01f6aabcd8ed8/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=baf4b88182bcc44247e664640fc01f6aabcd8ed8", "patch": "@@ -1,3 +1,21 @@\n+2009-08-25  Konrad Trifunovic  <konrad.trifunovic@gmail.com>\n+\t    Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-blocking.c (pbb_strip_mine_loop_depth): Renamed\n+\tpbb_strip_mine_time_depth.  Changed the implementation so that\n+\ttransformation is expressed as a transformation on\n+\ttime (scatttering) dimensions.  Also, ensures that the 2d+1\n+\tscheduling format is preserved.\n+\t(pbb_strip_mine_profitable_p): Profitability is based on the\n+\titeration number of a given time (scattering) dimension,\n+\tand not on a original loop depth dimension.\n+\t(pbb_strip_mine): Call pbb_number_of_iterations_at_time.\n+\t(pbb_do_strip_mine): Call psct_dynamic_dim.\n+\t* graphite-poly.c (pbb_number_of_iterations_at_time): New.\n+\t* graphite-poly.h (pbb_number_of_iterations_at_time): Declared.\n+\t(pbb_nb_dynamic_scattering_transform): New.\n+\t(psct_dynamic_dim): New.\n+\n 2009-08-25  Konrad Trifunovic  <konrad.trifunovic@gmail.com>\n \n \t* graphite-ppl.c (ppl_max_for_le): Renamed ppl_max_for_le_pointset."}, {"sha": "80a991c615422a33c56e337775bd60a1b22a71b2", "filename": "gcc/graphite-blocking.c", "status": "modified", "additions": 40, "deletions": 14, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baf4b88182bcc44247e664640fc01f6aabcd8ed8/gcc%2Fgraphite-blocking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baf4b88182bcc44247e664640fc01f6aabcd8ed8/gcc%2Fgraphite-blocking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-blocking.c?ref=baf4b88182bcc44247e664640fc01f6aabcd8ed8", "patch": "@@ -54,8 +54,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"graphite-poly.h\"\n \n \n-/* Strip mines with a factor STRIDE the loop around PBB at depth\n-   LOOP_DEPTH.  The following example comes from the wiki page:\n+/* Strip mines with a factor STRIDE the scattering (time) dimension\n+   around PBB at depth TIME_DEPTH.\n+\n+   The following example comes from the wiki page:\n    http://gcc.gnu.org/wiki/Graphite/Strip_mine\n \n    The strip mine of a loop with a tile of 64 can be obtained with a\n@@ -106,16 +108,19 @@ along with GCC; see the file COPYING3.  If not see\n */\n \n static bool\n-pbb_strip_mine_loop_depth (poly_bb_p pbb, int loop_depth, int stride)\n+pbb_strip_mine_time_depth (poly_bb_p pbb, int time_depth, int stride)\n {\n-  ppl_dimension_type iter, dim;\n+  ppl_dimension_type iter, dim, strip;\n   ppl_Polyhedron_t res = PBB_TRANSFORMED_SCATTERING (pbb);\n-  ppl_dimension_type strip = psct_scattering_dim_for_loop_depth (pbb,\n-\t\t\t\t\t\t\t\t loop_depth);\n+  /* STRIP is the dimension that iterates with stride STRIDE.  */\n+  /* ITER is the dimension that enumerates single iterations inside\n+     one strip that has at most STRIDE iterations.  */\n+  strip = time_depth;\n+  iter = strip + 2;\n \n   psct_add_scattering_dimension (pbb, strip);\n+  psct_add_scattering_dimension (pbb, strip + 1);\n \n-  iter = psct_iterator_dim (pbb, loop_depth);\n   ppl_Polyhedron_space_dimension (res, &dim);\n \n   /* Lower bound of the striped loop.  */\n@@ -149,15 +154,31 @@ pbb_strip_mine_loop_depth (poly_bb_p pbb, int loop_depth, int stride)\n     ppl_delete_Constraint (new_cstr);\n   }\n \n+  /* Static scheduling for ITER level.\n+     This is mandatory to keep the 2d + 1 canonical scheduling format.  */\n+  {\n+    ppl_Constraint_t new_cstr;\n+    ppl_Linear_Expression_t expr;\n+\n+    ppl_new_Linear_Expression_with_dimension (&expr, dim);\n+    ppl_set_coef (expr, strip + 1, 1);\n+    ppl_set_inhomogeneous (expr, 0);\n+\n+    ppl_new_Constraint (&new_cstr, expr, PPL_CONSTRAINT_TYPE_EQUAL);\n+    ppl_delete_Linear_Expression (expr);\n+    ppl_Polyhedron_add_constraint (res, new_cstr);\n+    ppl_delete_Constraint (new_cstr);\n+  }\n+\n   return true;\n }\n \n /* Returns true when strip mining with STRIDE of the loop around PBB\n-   at depth LOOP_DEPTH is profitable.  */\n+   at scattering time TIME_DEPTH is profitable.  */\n \n static bool\n pbb_strip_mine_profitable_p (poly_bb_p pbb,\n-\t\t\t     graphite_dim_t loop_depth,\n+\t\t\t     graphite_dim_t time_depth,\n \t\t\t     int stride)\n {\n   Value niter, strip_stride;\n@@ -166,7 +187,7 @@ pbb_strip_mine_profitable_p (poly_bb_p pbb,\n   value_init (strip_stride);\n   value_init (niter);\n   value_set_si (strip_stride, stride);\n-  pbb_number_of_iterations (pbb, loop_depth, niter);\n+  pbb_number_of_iterations_at_time (pbb, time_depth, niter);\n   res = value_gt (niter, strip_stride);\n   value_clear (strip_stride);\n   value_clear (niter);\n@@ -180,13 +201,18 @@ pbb_strip_mine_profitable_p (poly_bb_p pbb,\n static bool\n pbb_do_strip_mine (poly_bb_p pbb)\n {\n-  graphite_dim_t loop_depth;\n+  graphite_dim_t s_dim;\n   int stride = 64;\n   bool transform_done = false;\n \n-  for (loop_depth = 0; loop_depth < pbb_dim_iter_domain (pbb); loop_depth++)\n-    if (pbb_strip_mine_profitable_p (pbb, loop_depth, stride))\n-      transform_done |= pbb_strip_mine_loop_depth (pbb, loop_depth, stride);\n+  for (s_dim = 0; s_dim < pbb_nb_dynamic_scattering_transform (pbb); s_dim++)\n+    if (pbb_strip_mine_profitable_p (pbb, psct_dynamic_dim (pbb, s_dim),\n+                                     stride))\n+      {\n+\tppl_dimension_type d = psct_dynamic_dim (pbb, s_dim);\n+\ttransform_done |= pbb_strip_mine_time_depth (pbb, d, stride);\n+\ts_dim++;\n+      }\n \n   return transform_done;\n }"}, {"sha": "4576a289693b07ebfc262e7329edaa92520ece1a", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baf4b88182bcc44247e664640fc01f6aabcd8ed8/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baf4b88182bcc44247e664640fc01f6aabcd8ed8/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=baf4b88182bcc44247e664640fc01f6aabcd8ed8", "patch": "@@ -724,5 +724,46 @@ pbb_number_of_iterations (poly_bb_p pbb,\n   ppl_delete_Linear_Expression (le);\n }\n \n+/* Returns the number of iterations NITER of the loop around PBB at\n+   time(scattering) dimension TIME_DEPTH.  */\n+\n+void\n+pbb_number_of_iterations_at_time (poly_bb_p pbb,\n+\t\t\t\t  graphite_dim_t time_depth,\n+\t\t\t\t  Value niter)\n+{\n+  ppl_Pointset_Powerset_C_Polyhedron_t ext_domain, sctr;\n+  ppl_Linear_Expression_t le;\n+  ppl_dimension_type dim;\n+\n+  value_set_si (niter, -1);\n+\n+  /* Takes together domain and scattering polyhedrons, and composes\n+     them into the bigger polyhedron that has the following format:\n+     t0..t_{n-1} | l0..l_{nlcl-1} | i0..i_{niter-1} | g0..g_{nparm-1}.\n+     t0..t_{n-1} are time dimensions (scattering dimensions)\n+     l0..l_{nclc-1} are local variables in scatterin function\n+     i0..i_{niter-1} are original iteration variables\n+     g0..g_{nparam-1} are global parameters.  */\n+\n+  ppl_new_Pointset_Powerset_C_Polyhedron_from_Pointset_Powerset_C_Polyhedron\n+    (&ext_domain, PBB_DOMAIN (pbb));\n+  ppl_insert_dimensions_pointset (ext_domain, 0,\n+                                  pbb_nb_scattering_transform (pbb)\n+                                  + pbb_nb_local_vars (pbb));\n+  ppl_new_Pointset_Powerset_C_Polyhedron_from_C_Polyhedron (&sctr,\n+      PBB_TRANSFORMED_SCATTERING (pbb));\n+  ppl_Pointset_Powerset_C_Polyhedron_intersection_assign (sctr, ext_domain);\n+\n+  ppl_Pointset_Powerset_C_Polyhedron_space_dimension (sctr, &dim);\n+  ppl_new_Linear_Expression_with_dimension (&le, dim);\n+  ppl_set_coef (le, time_depth, 1);\n+  ppl_max_for_le_pointset (sctr, le, niter);\n+\n+  ppl_delete_Linear_Expression (le);\n+  ppl_delete_Pointset_Powerset_C_Polyhedron (sctr);\n+  ppl_delete_Pointset_Powerset_C_Polyhedron (ext_domain);\n+}\n+\n #endif\n "}, {"sha": "081e1861bddc05467f269c3a93f6eb65f34244cd", "filename": "gcc/graphite-poly.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baf4b88182bcc44247e664640fc01f6aabcd8ed8/gcc%2Fgraphite-poly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baf4b88182bcc44247e664640fc01f6aabcd8ed8/gcc%2Fgraphite-poly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.h?ref=baf4b88182bcc44247e664640fc01f6aabcd8ed8", "patch": "@@ -307,6 +307,7 @@ extern void debug_iteration_domains (scop_p);\n extern bool scop_do_interchange (scop_p);\n extern bool scop_do_strip_mine (scop_p);\n extern void pbb_number_of_iterations (poly_bb_p, graphite_dim_t, Value);\n+extern void pbb_number_of_iterations_at_time (poly_bb_p, graphite_dim_t, Value);\n \n /* The index of the PBB.  */\n \n@@ -372,6 +373,17 @@ pbb_nb_scattering_transform (const struct poly_bb *pbb)\n   return PBB_NB_SCATTERING_TRANSFORM (pbb);\n }\n \n+/* The number of dynamic scattering dimensions in PBB.  */\n+\n+static inline graphite_dim_t\n+pbb_nb_dynamic_scattering_transform (const struct poly_bb *pbb)\n+{\n+  /* This function requires the 2d + 1 scattering format to be\n+     invariant during all transformations.  */\n+  gcc_assert (PBB_NB_SCATTERING_TRANSFORM (pbb) % 2);\n+  return PBB_NB_SCATTERING_TRANSFORM (pbb) / 2;\n+}\n+\n /* Returns the number of local variables used in the transformed\n    scattering polyhedron of PBB.  */\n \n@@ -480,6 +492,19 @@ psct_parameter_dim (poly_bb_p pbb, graphite_dim_t param)\n     + pbb_dim_iter_domain (pbb);\n }\n \n+/* The scattering dimension of PBB corresponding to the dynamic level\n+   LEVEL.  */\n+\n+static inline ppl_dimension_type\n+psct_dynamic_dim (poly_bb_p pbb, graphite_dim_t level)\n+{\n+  graphite_dim_t result;\n+  result = 1 + 2 * level;\n+\n+  gcc_assert (result < pbb_nb_scattering_transform (pbb));\n+  return result;\n+}\n+\n /* Adds to the transformed scattering polyhedron of PBB a new local\n    variable and returns its index.  */\n "}]}