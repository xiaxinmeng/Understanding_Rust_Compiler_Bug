{"sha": "cb7ac91b12cc424680e47a65c05cecb6bb21ac7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I3YWM5MWIxMmNjNDI0NjgwZTQ3YTY1YzA1Y2VjYjZiYjIxYWM3Yg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-05-21T06:55:56Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-05-21T06:55:56Z"}, "message": "fix diagnostic quoting/spelling in rs6000\n\n2019-05-21  Martin Liska  <mliska@suse.cz>\n\n\t* config/rs6000/driver-rs6000.c (elf_platform): Do not use\n\tan extra newline.\n\t* config/rs6000/rs6000-c.c (rs6000_pragma_longcal): Wrap pragma in %<%>.\n\t(altivec_resolve_overloaded_builtin): Likewise for vec_lvsl and\n\tvec_lvsr.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n\tQuote a C type.\n\t(rs6000_function_arg): Likewise.\n\t(rs6000_expand_set_fpscr_drn_builtin): Remove trailing dot.\n\t(rs6000_expand_ternop_builtin): Use interval syntax.\n\t(get_element_number): Likewise.\n\t(altivec_expand_builtin): Likewise.\n\t(rs6000_get_function_versions_dispatcher): Quote target_clones.\n\nFix test-suite.\n2019-05-21  Martin Liska  <mliska@suse.cz>\n\n\t* gcc.target/powerpc/ppc64-abi-warn-1.c: Wrap a type.\n\t* gcc.target/powerpc/pr80315-1.c: Use new interval format.\n\t* gcc.target/powerpc/pr80315-2.c: Likewise.\n\t* gcc.target/powerpc/pr80315-3.c: Likewise.\n\t* gcc.target/powerpc/pr80315-4.c: Likewise.\n\t* gcc.target/powerpc/warn-lvsl-lvsr.c: Wrap builtin names.\n\nFrom-SVN: r271455", "tree": {"sha": "fe8347bbf456cb7948cdbda4f9011870adeb2011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe8347bbf456cb7948cdbda4f9011870adeb2011"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "601071c8bdca8274474efd83494e1fc1f54412a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/601071c8bdca8274474efd83494e1fc1f54412a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/601071c8bdca8274474efd83494e1fc1f54412a0"}], "stats": {"total": 91, "additions": 60, "deletions": 31}, "files": [{"sha": "17b4b10aa824e8b8fc46d4812957751aa41c5266", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb7ac91b12cc424680e47a65c05cecb6bb21ac7b", "patch": "@@ -1,3 +1,21 @@\n+2019-05-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/rs6000/driver-rs6000.c (elf_platform): Do not use\n+\tan extra newline.\n+\t* config/rs6000/rs6000-c.c (rs6000_pragma_longcal): Wrap pragma in %<%>.\n+\t(altivec_resolve_overloaded_builtin): Likewise for vec_lvsl and\n+\tvec_lvsr.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n+\tQuote a C type.\n+\t(rs6000_function_arg): Likewise.\n+\t(rs6000_expand_set_fpscr_drn_builtin): Remove trailing dot.\n+\t(rs6000_expand_ternop_builtin): Use interval syntax.\n+\t(get_element_number): Likewise.\n+\t(altivec_expand_builtin): Likewise.\n+\t(rs6000_get_function_versions_dispatcher): Quote target_clones.\n+\n+Fix test-suite.\n+\n 2019-05-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/59813"}, {"sha": "fde2a127ef1cf32162bf3cd0205b145a3d8d659a", "filename": "gcc/config/rs6000/driver-rs6000.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c?ref=cb7ac91b12cc424680e47a65c05cecb6bb21ac7b", "patch": "@@ -263,12 +263,10 @@ elf_platform (void)\n \t  for (i = 0; i < ARRAY_SIZE (rs6000_supported_cpu_names); i++)\n \t    candidates.safe_push (rs6000_supported_cpu_names[i]);\n \t  candidates_list_and_hint (cpu, s, candidates);\n-\t  fatal_error (\n-\t    input_location,\n-\t    \"Unsupported cpu name returned from kernel for \"\n-\t    \"%<-mcpu=native%>: %s\\n\"\n-\t    \"Please use an explicit cpu name.  Valid cpu names are: %s\",\n-\t    cpu, s);\n+\t  error (\"unsupported cpu name returned from kernel \"\n+\t\t \"for %<-mcpu=native%>: %s\", cpu);\n+\t  fatal_error (input_location, \"please use an explicit cpu name; \"\n+\t\t       \"valid cpu names are: %s\", s);\n \t}\n     }\n   return NULL;"}, {"sha": "bd1e97e34dd9f64276fa499888b6b287e589d037", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=cb7ac91b12cc424680e47a65c05cecb6bb21ac7b", "patch": "@@ -47,15 +47,17 @@\n    whether or not new function declarations receive a longcall\n    attribute by default.  */\n \n+void\n+rs6000_pragma_longcall (cpp_reader *pfile ATTRIBUTE_UNUSED)\n+{\n #define SYNTAX_ERROR(gmsgid) do {\t\t\t\t\t\\\n   warning (OPT_Wpragmas, gmsgid);\t\t\t\t\t\\\n-  warning (OPT_Wpragmas, \"ignoring malformed #pragma longcall\");\t\\\n+  warning (OPT_Wpragmas, \"ignoring malformed %<#pragma longcall%>\");\t\\\n   return;\t\t\t\t\t\t\t\t\\\n } while (0)\n \n-void\n-rs6000_pragma_longcall (cpp_reader *pfile ATTRIBUTE_UNUSED)\n-{\n+\n+\n   tree x, n;\n \n   /* If we get here, generic code has already scanned the directive\n@@ -72,7 +74,7 @@ rs6000_pragma_longcall (cpp_reader *pfile ATTRIBUTE_UNUSED)\n     SYNTAX_ERROR (\"number must be 0 or 1\");\n \n   if (pragma_lex (&x) != CPP_EOF)\n-    warning (OPT_Wpragmas, \"junk at end of #pragma longcall\");\n+    warning (OPT_Wpragmas, \"junk at end of %<#pragma longcall%>\");\n \n   rs6000_default_long_calls = (n == integer_one_node);\n }\n@@ -6140,11 +6142,11 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n   /* vec_lvsl and vec_lvsr are deprecated for use with LE element order.  */\n   if (fcode == ALTIVEC_BUILTIN_VEC_LVSL && !BYTES_BIG_ENDIAN)\n     warning (OPT_Wdeprecated,\n-\t     \"vec_lvsl is deprecated for little endian; use \"\n+\t     \"%<vec_lvsl%> is deprecated for little endian; use \"\n \t     \"assignment for unaligned loads and stores\");\n   else if (fcode == ALTIVEC_BUILTIN_VEC_LVSR && !BYTES_BIG_ENDIAN)\n     warning (OPT_Wdeprecated,\n-\t     \"vec_lvsr is deprecated for little endian; use \"\n+\t     \"%<vec_lvsr%> is deprecated for little endian; use \"\n \t     \"assignment for unaligned loads and stores\");\n \n   if (fcode == ALTIVEC_BUILTIN_VEC_MUL)\n@@ -6846,7 +6848,7 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t{\n           if (TYPE_READONLY (TREE_TYPE (type))\n \t      && !TYPE_READONLY (TREE_TYPE (decl_type)))\n-\t    warning (0, \"passing arg %d of %qE discards qualifiers from \"\n+\t    warning (0, \"passing argument %d of %qE discards qualifiers from \"\n \t\t        \"pointer target type\", n + 1, fndecl);\n \t  type = build_pointer_type (build_qualified_type (TREE_TYPE (type),\n \t\t\t\t\t\t\t   0));"}, {"sha": "984298175393ac269254d830571bb9d5e6603b89", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=cb7ac91b12cc424680e47a65c05cecb6bb21ac7b", "patch": "@@ -4228,7 +4228,7 @@ rs6000_option_override_internal (bool global_init_p)\n       if (main_target_opt != NULL\n \t  && (main_target_opt->x_rs6000_long_double_type_size\n \t      != default_long_double_size))\n-\terror (\"target attribute or pragma changes long double size\");\n+\terror (\"target attribute or pragma changes %<long double%> size\");\n       else\n \trs6000_long_double_type_size = default_long_double_size;\n     }\n@@ -4263,9 +4263,11 @@ rs6000_option_override_internal (bool global_init_p)\n \t    {\n \t      warned_change_long_double = true;\n \t      if (TARGET_IEEEQUAD)\n-\t\twarning (OPT_Wpsabi, \"Using IEEE extended precision long double\");\n+\t\twarning (OPT_Wpsabi, \"Using IEEE extended precision \"\n+\t\t\t \"%<long double%>\");\n \t      else\n-\t\twarning (OPT_Wpsabi, \"Using IBM extended precision long double\");\n+\t\twarning (OPT_Wpsabi, \"Using IBM extended precision \"\n+\t\t\t \"%<long double%>\");\n \t    }\n \t}\n     }\n@@ -11744,7 +11746,7 @@ rs6000_function_arg (cumulative_args_t cum_v, machine_mode mode,\n \t\t{\n \t\t  warned = true;\n \t\t  inform (input_location,\n-\t\t\t  \"the ABI of passing homogeneous float aggregates\"\n+\t\t\t  \"the ABI of passing homogeneous %<float%> aggregates\"\n \t\t\t  \" has changed in GCC 5\");\n \t\t}\n \t    }\n@@ -13180,7 +13182,7 @@ rs6000_expand_set_fpscr_drn_builtin (enum insn_code icode, tree exp)\n     /* Builtin not supported in 32-bit mode.  */\n     fatal_error (input_location,\n \t\t \"%<__builtin_set_fpscr_drn%> is not supported \"\n-\t\t \"in 32-bit mode.\");\n+\t\t \"in 32-bit mode\");\n \n   if (rs6000_isa_flags & OPTION_MASK_SOFT_FLOAT)\n     {\n@@ -14203,7 +14205,7 @@ rs6000_expand_ternop_builtin (enum insn_code icode, tree exp, rtx target)\n       if (TREE_CODE (arg2) != INTEGER_CST\n \t  || wi::geu_p (wi::to_wide (arg2), 16))\n \t{\n-\t  error (\"argument 3 must be in the range 0..15\");\n+\t  error (\"argument 3 must be in the range [0, 15]\");\n \t  return CONST0_RTX (tmode);\n \t}\n     }\n@@ -14336,7 +14338,7 @@ get_element_number (tree vec_type, tree arg)\n   if (!tree_fits_uhwi_p (arg)\n       || (elt = tree_to_uhwi (arg), elt > max))\n     {\n-      error (\"selector must be an integer constant in the range 0..%wi\", max);\n+      error (\"selector must be an integer constant in the range [0, %wi]\", max);\n       return 0;\n     }\n \n@@ -14656,7 +14658,7 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n \n       if (TREE_CODE (arg1) != INTEGER_CST || TREE_INT_CST_LOW (arg1) > 12)\n \t{\n-\t  error (\"second argument to %qs must be 0..12\", \"vec_vextract4b\");\n+\t  error (\"second argument to %qs must be [0, 12]\", \"vec_vextract4b\");\n \t  return expand_call (exp, target, false);\n \t}\n       break;\n@@ -14671,7 +14673,7 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n \n       if (TREE_CODE (arg2) != INTEGER_CST || TREE_INT_CST_LOW (arg2) > 12)\n \t{\n-\t  error (\"third argument to %qs must be 0..12\", \"vec_vinsert4b\");\n+\t  error (\"third argument to %qs must be [0, 12]\", \"vec_vinsert4b\");\n \t  return expand_call (exp, target, false);\n \t}\n       break;\n@@ -37203,7 +37205,7 @@ rs6000_get_function_versions_dispatcher (void *decl)\n \n #ifndef TARGET_LIBC_PROVIDES_HWCAP_IN_TCB\n   error_at (DECL_SOURCE_LOCATION (default_node->decl),\n-\t    \"target_clones attribute needs GLIBC (2.23 and newer) that \"\n+\t    \"%<target_clones%> attribute needs GLIBC (2.23 and newer) that \"\n \t    \"exports hardware capability bits\");\n #else\n "}, {"sha": "4b8d6734a315993b216401c9af24c6b407bb5fa1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb7ac91b12cc424680e47a65c05cecb6bb21ac7b", "patch": "@@ -1,3 +1,12 @@\n+2019-05-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.target/powerpc/ppc64-abi-warn-1.c: Wrap a type.\n+\t* gcc.target/powerpc/pr80315-1.c: Use new interval format.\n+\t* gcc.target/powerpc/pr80315-2.c: Likewise.\n+\t* gcc.target/powerpc/pr80315-3.c: Likewise.\n+\t* gcc.target/powerpc/pr80315-4.c: Likewise.\n+\t* gcc.target/powerpc/warn-lvsl-lvsr.c: Wrap builtin names.\n+\n 2019-05-21  Martin Liska  <mliska@suse.cz>\n \n \tPR testsuite/90551"}, {"sha": "ae7d5746b0d3ca0764bed277a6e5cbc28f66a679", "filename": "gcc/testsuite/gcc.target/powerpc/ppc64-abi-warn-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-warn-1.c?ref=cb7ac91b12cc424680e47a65c05cecb6bb21ac7b", "patch": "@@ -6,7 +6,7 @@ struct f8\n     float x[8];\n   };\n \n-void test (struct f8 a, struct f8 b) /* { dg-message \"note: the ABI of passing homogeneous float aggregates has changed\" } */\n+void test (struct f8 a, struct f8 b) /* { dg-message \"note: the ABI of passing homogeneous 'float' aggregates has changed\" } */\n {\n }\n "}, {"sha": "2f670a0c6c7c78753431f93cd2b487b20e8740cb", "filename": "gcc/testsuite/gcc.target/powerpc/pr80315-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-1.c?ref=cb7ac91b12cc424680e47a65c05cecb6bb21ac7b", "patch": "@@ -10,6 +10,6 @@ main()\n   int mask;\n \n   /* Argument 2 must be 0 or 1.  Argument 3 must be in range 0..15.  */\n-  res = __builtin_crypto_vshasigmaw (test, 1, 0xff); /* { dg-error \"argument 3 must be in the range 0..15\" } */\n+  res = __builtin_crypto_vshasigmaw (test, 1, 0xff); /* { dg-error \"argument 3 must be in the range \\\\[0, 15\\\\]\" } */\n   return 0;\n }"}, {"sha": "e95187e21796dca7c6ac0f116e0f28ba713cfa0f", "filename": "gcc/testsuite/gcc.target/powerpc/pr80315-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-2.c?ref=cb7ac91b12cc424680e47a65c05cecb6bb21ac7b", "patch": "@@ -10,6 +10,6 @@ main ()\n   int mask;\n \n   /* Argument 2 must be 0 or 1.  Argument 3 must be in range 0..15.  */\n-  res = __builtin_crypto_vshasigmad (test, 1, 0xff); /* { dg-error \"argument 3 must be in the range 0..15\" } */\n+  res = __builtin_crypto_vshasigmad (test, 1, 0xff); /* { dg-error \"argument 3 must be in the range \\\\[0, 15\\\\]\" } */\n   return 0;\n }"}, {"sha": "f1a782663a11131daa416c8c8f547d3b550410c9", "filename": "gcc/testsuite/gcc.target/powerpc/pr80315-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-3.c?ref=cb7ac91b12cc424680e47a65c05cecb6bb21ac7b", "patch": "@@ -12,6 +12,6 @@ main ()\n   int mask;\n \n   /* Argument 2 must be 0 or 1.  Argument 3 must be in range 0..15.  */\n-  res = vec_shasigma_be (test, 1, 0xff); /* { dg-error \"argument 3 must be in the range 0..15\" } */\n+  res = vec_shasigma_be (test, 1, 0xff); /* { dg-error \"argument 3 must be in the range \\\\[0, 15\\\\]\" } */\n   return res;\n }"}, {"sha": "66a3efce9c520461a8f9e4e2dbd1628aa57f10bc", "filename": "gcc/testsuite/gcc.target/powerpc/pr80315-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-4.c?ref=cb7ac91b12cc424680e47a65c05cecb6bb21ac7b", "patch": "@@ -12,6 +12,6 @@ main ()\n   int mask;\n \n   /* Argument 2 must be 0 or 1.  Argument 3 must be in range 0..15.  */\n-  res = vec_shasigma_be (test, 1, 0xff); /* { dg-error \"argument 3 must be in the range 0..15\" } */\n+  res = vec_shasigma_be (test, 1, 0xff); /* { dg-error \"argument 3 must be in the range \\\\[0, 15\\\\]\" } */\n   return res;\n }"}, {"sha": "62b37a9c3358f9f99c7c8d5d07034e988e0f054f", "filename": "gcc/testsuite/gcc.target/powerpc/warn-lvsl-lvsr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fwarn-lvsl-lvsr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7ac91b12cc424680e47a65c05cecb6bb21ac7b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fwarn-lvsl-lvsr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fwarn-lvsl-lvsr.c?ref=cb7ac91b12cc424680e47a65c05cecb6bb21ac7b", "patch": "@@ -9,6 +9,6 @@ float f[20];\n \n void foo ()\n {\n-  vector unsigned char a = vec_lvsl (4, f); /* { dg-warning \"vec_lvsl is deprecated for little endian; use assignment for unaligned loads and stores\" } */\n-  vector unsigned char b = vec_lvsr (8, f); /* { dg-warning \"vec_lvsr is deprecated for little endian; use assignment for unaligned loads and stores\" } */\n+  vector unsigned char a = vec_lvsl (4, f); /* { dg-warning \"'vec_lvsl' is deprecated for little endian; use assignment for unaligned loads and stores\" } */\n+  vector unsigned char b = vec_lvsr (8, f); /* { dg-warning \"'vec_lvsr' is deprecated for little endian; use assignment for unaligned loads and stores\" } */\n }"}]}