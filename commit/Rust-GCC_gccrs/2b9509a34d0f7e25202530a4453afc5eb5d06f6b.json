{"sha": "2b9509a34d0f7e25202530a4453afc5eb5d06f6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI5NTA5YTM0ZDBmN2UyNTIwMjUzMGE0NDUzYWZjNWViNWQwNmY2Yg==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2016-07-13T10:54:01Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2016-07-13T10:54:01Z"}, "message": "arm.h (TARGET_HAVE_MOVT): Include ARMv8-M as having MOVT.\n\n2016-07-13  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    * config/arm/arm.h (TARGET_HAVE_MOVT): Include ARMv8-M as having MOVT.\n    * config/arm/arm.c (arm_arch_name): (const_ok_for_op): Check MOVT/MOVW\n    availability with TARGET_HAVE_MOVT.\n    (thumb_legitimate_constant_p): Strip the high part of a label_ref.\n    (thumb1_rtx_costs): Also return 0 if setting a half word constant and\n    MOVW is available and replace (unsigned HOST_WIDE_INT) INTVAL by\n    UINTVAL.\n    (thumb1_size_rtx_costs): Make set of half word constant also cost 1\n    extra instruction if MOVW is available.  Use a cost variable\n    incremented by COSTS_N_INSNS (1) when the condition match rather than\n    returning an arithmetic expression based on COSTS_N_INSNS.  Make\n    constant with bottom half word zero cost 2 instruction if MOVW is\n    available.\n    * config/arm/arm.md (define_attr \"arch\"): Add v8mb.\n    (define_attr \"arch_enabled\"): Set to yes if arch value is v8mb and\n    target is ARMv8-M Baseline.\n    (arm_movt): New unpredicable alternative for ARMv8-M Baseline.\n    (arm_movtas_ze): Likewise.\n    * config/arm/thumb1.md (thumb1_movdi_insn): Add ARMv8-M Baseline only\n    alternative for constants satisfying j constraint.\n    (thumb1_movsi_insn): Likewise.\n    (movsi splitter for K alternative): Tighten condition to not trigger\n    if movt is available and j constraint is satisfied.\n    (Pe immediate splitter): Likewise.\n    (thumb1_movhi_insn): Add ARMv8-M Baseline only alternative for\n    constant fitting in an halfword to use MOVW.\n    * doc/sourcebuild.texi (arm_thumb1_movt_ok): Document new ARM\n    effective target.\n\n    gcc/testsuite/\n    * lib/target-supports.exp (check_effective_target_arm_thumb1_movt_ok):\n    Define effective target.\n    * gcc.target/arm/pr42574.c: Require arm_thumb1_ok and\n    !arm_thumb1_movt_ok to exclude ARMv8-M Baseline.\n    * gcc.target/arm/movhi_movw.c: New test.\n    * gcc.target/arm/movsi_movw.c: Likewise.\n    * gcc.target/arm/movdi_movw.c: Likewise.\n\nFrom-SVN: r238288", "tree": {"sha": "86e547979f660cedd32b2e1b5d3363a3017fdb8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86e547979f660cedd32b2e1b5d3363a3017fdb8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b9509a34d0f7e25202530a4453afc5eb5d06f6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b9509a34d0f7e25202530a4453afc5eb5d06f6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b9509a34d0f7e25202530a4453afc5eb5d06f6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f15b177ba2b5907242dec45da10da635df3e16e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f15b177ba2b5907242dec45da10da635df3e16e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f15b177ba2b5907242dec45da10da635df3e16e"}], "stats": {"total": 218, "additions": 174, "deletions": 44}, "files": [{"sha": "3f7e7f10bd08df80e5e885c859c36251eb5230cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b9509a34d0f7e25202530a4453afc5eb5d06f6b", "patch": "@@ -1,3 +1,34 @@\n+2016-07-13  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/arm.h (TARGET_HAVE_MOVT): Include ARMv8-M as having MOVT.\n+\t* config/arm/arm.c (arm_arch_name): (const_ok_for_op): Check MOVT/MOVW\n+\tavailability with TARGET_HAVE_MOVT.\n+\t(thumb_legitimate_constant_p): Strip the high part of a label_ref.\n+\t(thumb1_rtx_costs): Also return 0 if setting a half word constant and\n+\tMOVW is available and replace (unsigned HOST_WIDE_INT) INTVAL by\n+\tUINTVAL.\n+\t(thumb1_size_rtx_costs): Make set of half word constant also cost 1\n+\textra instruction if MOVW is available.  Use a cost variable\n+\tincremented by COSTS_N_INSNS (1) when the condition match rather than\n+\treturning an arithmetic expression based on COSTS_N_INSNS.  Make\n+\tconstant with bottom half word zero cost 2 instruction if MOVW is\n+\tavailable.\n+\t* config/arm/arm.md (define_attr \"arch\"): Add v8mb.\n+\t(define_attr \"arch_enabled\"): Set to yes if arch value is v8mb and\n+\ttarget is ARMv8-M Baseline.\n+\t(arm_movt): New unpredicable alternative for ARMv8-M Baseline.\n+\t(arm_movtas_ze): Likewise.\n+\t* config/arm/thumb1.md (thumb1_movdi_insn): Add ARMv8-M Baseline only\n+\talternative for constants satisfying j constraint.\n+\t(thumb1_movsi_insn): Likewise.\n+\t(movsi splitter for K alternative): Tighten condition to not trigger\n+\tif movt is available and j constraint is satisfied.\n+\t(Pe immediate splitter): Likewise.\n+\t(thumb1_movhi_insn): Add ARMv8-M Baseline only alternative for\n+\tconstant fitting in an halfword to use MOVW.\n+\t* doc/sourcebuild.texi (arm_thumb1_movt_ok): Document new ARM\n+\teffective target.\n+\n 2016-07-13  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/71104"}, {"sha": "195de4822c8f26acbd67e08604719365b3d68534", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=2b9509a34d0f7e25202530a4453afc5eb5d06f6b", "patch": "@@ -8280,6 +8280,12 @@ arm_legitimate_constant_p_1 (machine_mode, rtx x)\n static bool\n thumb_legitimate_constant_p (machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n {\n+  /* Splitters for TARGET_USE_MOVT call arm_emit_movpair which creates high\n+     RTX.  These RTX must therefore be allowed for Thumb-1 so that when run\n+     for ARMv8-M Baseline or later the result is valid.  */\n+  if (TARGET_HAVE_MOVT && GET_CODE (x) == HIGH)\n+    x = XEXP (x, 0);\n+\n   return (CONST_INT_P (x)\n \t  || CONST_DOUBLE_P (x)\n \t  || CONSTANT_ADDRESS_P (x)\n@@ -8366,7 +8372,9 @@ thumb1_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer)\n     case CONST_INT:\n       if (outer == SET)\n \t{\n-\t  if ((unsigned HOST_WIDE_INT) INTVAL (x) < 256)\n+\t  if (UINTVAL (x) < 256\n+\t      /* 16-bit constant.  */\n+\t      || (TARGET_HAVE_MOVT && !(INTVAL (x) & 0xffff0000)))\n \t    return 0;\n \t  if (thumb_shiftable_const (INTVAL (x)))\n \t    return COSTS_N_INSNS (2);\n@@ -9069,7 +9077,7 @@ static inline int\n thumb1_size_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer)\n {\n   machine_mode mode = GET_MODE (x);\n-  int words;\n+  int words, cost;\n \n   switch (code)\n     {\n@@ -9115,17 +9123,26 @@ thumb1_size_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer)\n       /* A SET doesn't have a mode, so let's look at the SET_DEST to get\n \t the mode.  */\n       words = ARM_NUM_INTS (GET_MODE_SIZE (GET_MODE (SET_DEST (x))));\n-      return COSTS_N_INSNS (words)\n-\t     + COSTS_N_INSNS (1) * (satisfies_constraint_J (SET_SRC (x))\n-\t\t\t\t    || satisfies_constraint_K (SET_SRC (x))\n-\t\t\t\t       /* thumb1_movdi_insn.  */\n-\t\t\t\t    || ((words > 1) && MEM_P (SET_SRC (x))));\n+      cost = COSTS_N_INSNS (words);\n+      if (satisfies_constraint_J (SET_SRC (x))\n+\t  || satisfies_constraint_K (SET_SRC (x))\n+\t     /* Too big an immediate for a 2-byte mov, using MOVT.  */\n+\t  || (UINTVAL (SET_SRC (x)) >= 256\n+\t      && TARGET_HAVE_MOVT\n+\t      && satisfies_constraint_j (SET_SRC (x)))\n+\t     /* thumb1_movdi_insn.  */\n+\t  || ((words > 1) && MEM_P (SET_SRC (x))))\n+\tcost += COSTS_N_INSNS (1);\n+      return cost;\n \n     case CONST_INT:\n       if (outer == SET)\n         {\n           if (UINTVAL (x) < 256)\n             return COSTS_N_INSNS (1);\n+\t  /* movw is 4byte long.  */\n+\t  if (TARGET_HAVE_MOVT && !(INTVAL (x) & 0xffff0000))\n+\t    return COSTS_N_INSNS (2);\n \t  /* See split \"TARGET_THUMB1 && satisfies_constraint_J\".  */\n \t  if (INTVAL (x) >= -255 && INTVAL (x) <= -1)\n             return COSTS_N_INSNS (2);"}, {"sha": "6a0f64537f8e5d0d913d082cb919ae6cbd2100ec", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=2b9509a34d0f7e25202530a4453afc5eb5d06f6b", "patch": "@@ -263,8 +263,8 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n /* Nonzero if this chip supports load-acquire and store-release.  */\n #define TARGET_HAVE_LDACQ\t(TARGET_ARM_ARCH >= 8 && arm_arch_notm)\n \n-/* Nonzero if this chip provides the MOVW and MOVW instructions.  */\n-#define TARGET_HAVE_MOVT\t(arm_arch_thumb2)\n+/* Nonzero if this chip provides the MOVW and MOVT instructions.  */\n+#define TARGET_HAVE_MOVT\t(arm_arch_thumb2 || arm_arch8)\n \n /* Nonzero if integer division instructions supported.  */\n #define TARGET_IDIV\t((TARGET_ARM && arm_arch_arm_hwdiv)\t\\"}, {"sha": "8727c6df16ea95007dfcdb3249a8467ede3d72ac", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=2b9509a34d0f7e25202530a4453afc5eb5d06f6b", "patch": "@@ -118,10 +118,10 @@\n ; This can be \"a\" for ARM, \"t\" for either of the Thumbs, \"32\" for\n ; TARGET_32BIT, \"t1\" or \"t2\" to specify a specific Thumb mode.  \"v6\"\n ; for ARM or Thumb-2 with arm_arch6, and nov6 for ARM without\n-; arm_arch6.  \"v6t2\" for Thumb-2 with arm_arch6.  This attribute is\n-; used to compute attribute \"enabled\", use type \"any\" to enable an\n-; alternative in all cases.\n-(define_attr \"arch\" \"any,a,t,32,t1,t2,v6,nov6,v6t2,neon_for_64bits,avoid_neon_for_64bits,iwmmxt,iwmmxt2,armv6_or_vfpv3,neon\"\n+; arm_arch6.  \"v6t2\" for Thumb-2 with arm_arch6 and \"v8mb\" for ARMv8-M\n+; Baseline.  This attribute is used to compute attribute \"enabled\",\n+; use type \"any\" to enable an alternative in all cases.\n+(define_attr \"arch\" \"any,a,t,32,t1,t2,v6,nov6,v6t2,v8mb,neon_for_64bits,avoid_neon_for_64bits,iwmmxt,iwmmxt2,armv6_or_vfpv3,neon\"\n   (const_string \"any\"))\n \n (define_attr \"arch_enabled\" \"no,yes\"\n@@ -160,6 +160,10 @@\n \t      (match_test \"TARGET_32BIT && arm_arch6 && arm_arch_thumb2\"))\n \t (const_string \"yes\")\n \n+\t (and (eq_attr \"arch\" \"v8mb\")\n+\t      (match_test \"TARGET_THUMB1 && arm_arch8\"))\n+\t (const_string \"yes\")\n+\n \t (and (eq_attr \"arch\" \"avoid_neon_for_64bits\")\n \t      (match_test \"TARGET_NEON\")\n \t      (not (match_test \"TARGET_PREFER_NEON_64BITS\")))\n@@ -5699,12 +5703,15 @@\n ;; LO_SUM adds in the high bits.  Fortunately these are opaque operations\n ;; so this does not matter.\n (define_insn \"*arm_movt\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r\")\n-\t(lo_sum:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"general_operand\"      \"i\")))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r\")\n+\t(lo_sum:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n+\t\t   (match_operand:SI 2 \"general_operand\"      \"i,i\")))]\n   \"TARGET_HAVE_MOVT && arm_valid_symbolic_address_p (operands[2])\"\n-  \"movt%?\\t%0, #:upper16:%c2\"\n-  [(set_attr \"predicable\" \"yes\")\n+  \"@\n+   movt%?\\t%0, #:upper16:%c2\n+   movt\\t%0, #:upper16:%c2\"\n+  [(set_attr \"arch\"  \"32,v8mb\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"length\" \"4\")\n    (set_attr \"type\" \"alu_sreg\")]\n@@ -10971,13 +10978,16 @@\n ;; We only care about the lower 16 bits of the constant \n ;; being inserted into the upper 16 bits of the register.\n (define_insn \"*arm_movtas_ze\" \n-  [(set (zero_extract:SI (match_operand:SI 0 \"s_register_operand\" \"+r\")\n+  [(set (zero_extract:SI (match_operand:SI 0 \"s_register_operand\" \"+r,r\")\n                    (const_int 16)\n                    (const_int 16))\n         (match_operand:SI 1 \"const_int_operand\" \"\"))]\n   \"TARGET_HAVE_MOVT\"\n-  \"movt%?\\t%0, %L1\"\n- [(set_attr \"predicable\" \"yes\")\n+  \"@\n+   movt%?\\t%0, %L1\n+   movt\\t%0, %L1\"\n+ [(set_attr \"arch\" \"32,v8mb\")\n+  (set_attr \"predicable\" \"yes\")\n   (set_attr \"predicable_short_it\" \"no\")\n   (set_attr \"length\" \"4\")\n   (set_attr \"type\" \"alu_sreg\")]"}, {"sha": "b317f1b0637e02f105f10efb18270f4a35801c7c", "filename": "gcc/config/arm/thumb1.md", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Fconfig%2Farm%2Fthumb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Fconfig%2Farm%2Fthumb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb1.md?ref=2b9509a34d0f7e25202530a4453afc5eb5d06f6b", "patch": "@@ -590,8 +590,8 @@\n ;;; ??? The 'i' constraint looks funny, but it should always be replaced by\n ;;; thumb_reorg with a memory reference.\n (define_insn \"*thumb1_movdi_insn\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=l,l,l,l,>,l, m,*r\")\n-\t(match_operand:DI 1 \"general_operand\"      \"l, I,J,>,l,mi,l,*r\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=l,l,l,r,l,>,l, m,*r\")\n+\t(match_operand:DI 1 \"general_operand\"      \"l, I,J,j,>,l,mi,l,*r\"))]\n   \"TARGET_THUMB1\n    && (   register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode))\"\n@@ -610,47 +610,53 @@\n       operands[1] = GEN_INT (- INTVAL (operands[1]));\n       return \\\"movs\\\\t%Q0, %1\\;rsbs\\\\t%Q0, %Q0, #0\\;asrs\\\\t%R0, %Q0, #31\\\";\n     case 3:\n-      return \\\"ldmia\\\\t%1, {%0, %H0}\\\";\n+      gcc_assert (TARGET_HAVE_MOVT);\n+      return \\\"movw\\\\t%Q0, %L1\\;movs\\\\tR0, #0\\\";\n     case 4:\n-      return \\\"stmia\\\\t%0, {%1, %H1}\\\";\n+      return \\\"ldmia\\\\t%1, {%0, %H0}\\\";\n     case 5:\n-      return thumb_load_double_from_address (operands);\n+      return \\\"stmia\\\\t%0, {%1, %H1}\\\";\n     case 6:\n+      return thumb_load_double_from_address (operands);\n+    case 7:\n       operands[2] = gen_rtx_MEM (SImode,\n \t\t\t     plus_constant (Pmode, XEXP (operands[0], 0), 4));\n       output_asm_insn (\\\"str\\\\t%1, %0\\;str\\\\t%H1, %2\\\", operands);\n       return \\\"\\\";\n-    case 7:\n+    case 8:\n       if (REGNO (operands[1]) == REGNO (operands[0]) + 1)\n \treturn \\\"mov\\\\t%0, %1\\;mov\\\\t%H0, %H1\\\";\n       return \\\"mov\\\\t%H0, %H1\\;mov\\\\t%0, %1\\\";\n     }\n   }\"\n-  [(set_attr \"length\" \"4,4,6,2,2,6,4,4\")\n-   (set_attr \"type\" \"multiple,multiple,multiple,load2,store2,load2,store2,multiple\")\n-   (set_attr \"pool_range\" \"*,*,*,*,*,1018,*,*\")]\n+  [(set_attr \"length\" \"4,4,6,6,2,2,6,4,4\")\n+   (set_attr \"type\" \"multiple,multiple,multiple,multiple,load2,store2,load2,store2,multiple\")\n+   (set_attr \"arch\" \"t1,t1,t1,v8mb,t1,t1,t1,t1,t1\")\n+   (set_attr \"pool_range\" \"*,*,*,*,*,*,1018,*,*\")]\n )\n \n (define_insn \"*thumb1_movsi_insn\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=l,l,l,l,l,>,l, m,*l*h*k\")\n-\t(match_operand:SI 1 \"general_operand\"      \"l, I,J,K,>,l,mi,l,*l*h*k\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=l,l,r,l,l,l,>,l, m,*l*h*k\")\n+\t(match_operand:SI 1 \"general_operand\"      \"l, I,j,J,K,>,l,mi,l,*l*h*k\"))]\n   \"TARGET_THUMB1\n    && (   register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n   \"@\n    movs\t%0, %1\n    movs\t%0, %1\n+   movw\t%0, %1\n    #\n    #\n    ldmia\\\\t%1, {%0}\n    stmia\\\\t%0, {%1}\n    ldr\\\\t%0, %1\n    str\\\\t%1, %0\n    mov\\\\t%0, %1\"\n-  [(set_attr \"length\" \"2,2,4,4,2,2,2,2,2\")\n-   (set_attr \"type\" \"mov_reg,mov_imm,multiple,multiple,load1,store1,load1,store1,mov_reg\")\n-   (set_attr \"pool_range\" \"*,*,*,*,*,*,1018,*,*\")\n-   (set_attr \"conds\" \"set,clob,*,*,nocond,nocond,nocond,nocond,nocond\")])\n+  [(set_attr \"length\" \"2,2,4,4,4,2,2,2,2,2\")\n+   (set_attr \"type\" \"mov_reg,mov_imm,mov_imm,multiple,multiple,load1,store1,load1,store1,mov_reg\")\n+   (set_attr \"pool_range\" \"*,*,*,*,*,*,*,1018,*,*\")\n+   (set_attr \"arch\" \"t1,t1,v8mb,t1,t1,t1,t1,t1,t1,t1\")\n+   (set_attr \"conds\" \"set,clob,nocond,*,*,nocond,nocond,nocond,nocond,nocond\")])\n \n ; Split the load of 64-bit constant into two loads for high and low 32-bit parts respectively\n ; to see if we can load them in fewer instructions or fewer cycles.\n@@ -687,7 +693,8 @@\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_operand:SI 1 \"const_int_operand\" \"\"))]\n-  \"TARGET_THUMB1 && satisfies_constraint_K (operands[1])\"\n+  \"TARGET_THUMB1 && satisfies_constraint_K (operands[1])\n+   && !(TARGET_HAVE_MOVT && satisfies_constraint_j (operands[1]))\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (ashift:SI (match_dup 2) (match_dup 3)))]\n   \"\n@@ -714,7 +721,8 @@\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_operand:SI 1 \"const_int_operand\" \"\"))]\n-  \"TARGET_THUMB1 && satisfies_constraint_Pe (operands[1])\"\n+  \"TARGET_THUMB1 && satisfies_constraint_Pe (operands[1])\n+   && !(TARGET_HAVE_MOVT && satisfies_constraint_j (operands[1]))\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (plus:SI (match_dup 2) (match_dup 3)))]\n   \"\n@@ -726,8 +734,8 @@\n )\n \n (define_insn \"*thumb1_movhi_insn\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=l,l,m,l*r,*h,l\")\n-\t(match_operand:HI 1 \"general_operand\"       \"l,m,l,k*h,*r,I\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=l,l,m,l*r,*h,l,r\")\n+\t(match_operand:HI 1 \"general_operand\"       \"l,m,l,k*h,*r,I,n\"))]\n   \"TARGET_THUMB1\n    && (   register_operand (operands[0], HImode)\n        || register_operand (operands[1], HImode))\"\n@@ -739,6 +747,8 @@\n     case 3: return \\\"mov\t%0, %1\\\";\n     case 4: return \\\"mov\t%0, %1\\\";\n     case 5: return \\\"movs\t%0, %1\\\";\n+    case 6: gcc_assert (TARGET_HAVE_MOVT);\n+\t    return \\\"movw\t%0, %L1\\\";\n     default: gcc_unreachable ();\n     case 1:\n       /* The stack pointer can end up being taken as an index register.\n@@ -758,9 +768,10 @@\n \t}\n       return \\\"ldrh\t%0, %1\\\";\n     }\"\n-  [(set_attr \"length\" \"2,4,2,2,2,2\")\n-   (set_attr \"type\" \"alus_imm,load1,store1,mov_reg,mov_reg,mov_imm\")\n-   (set_attr \"conds\" \"clob,nocond,nocond,nocond,nocond,clob\")])\n+  [(set_attr \"length\" \"2,4,2,2,2,2,4\")\n+   (set_attr \"type\" \"alus_imm,load1,store1,mov_reg,mov_reg,mov_imm,mov_imm\")\n+   (set_attr \"arch\" \"t1,t1,t1,t1,t1,t1,v8mb\")\n+   (set_attr \"conds\" \"clob,nocond,nocond,nocond,nocond,clob,nocond\")])\n \n (define_expand \"thumb_movhi_clobber\"\n   [(set (match_operand:HI     0 \"memory_operand\"   \"\")"}, {"sha": "b437c1711321194467dc4d6867f18655cc8b3272", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=2b9509a34d0f7e25202530a4453afc5eb5d06f6b", "patch": "@@ -1614,6 +1614,10 @@ ARM target supports acquire-release instructions.\n ARM target prefers @code{LDRD} and @code{STRD} instructions over\n @code{LDM} and @code{STM} instructions.\n \n+@item arm_thumb1_movt_ok\n+ARM target generates Thumb-1 code for @code{-mthumb} with @code{MOVW}\n+and @code{MOVT} instructions available.\n+\n @end table\n \n @subsubsection AArch64-specific attributes"}, {"sha": "d1204e73e8df4a944727cf950059ade5dab0d0d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b9509a34d0f7e25202530a4453afc5eb5d06f6b", "patch": "@@ -1,3 +1,13 @@\n+2016-07-13  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_arm_thumb1_movt_ok):\n+\tDefine effective target.\n+\t* gcc.target/arm/pr42574.c: Require arm_thumb1_ok and\n+\t!arm_thumb1_movt_ok to exclude ARMv8-M Baseline.\n+\t* gcc.target/arm/movhi_movw.c: New test.\n+\t* gcc.target/arm/movsi_movw.c: Likewise.\n+\t* gcc.target/arm/movdi_movw.c: Likewise.\n+\n 2016-07-13  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/71104"}, {"sha": "0f6b839da614c56766e92e3da125551df47890fc", "filename": "gcc/testsuite/gcc.target/arm/movdi_movw.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmovdi_movw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmovdi_movw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmovdi_movw.c?ref=2b9509a34d0f7e25202530a4453afc5eb5d06f6b", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target { arm_thumb2 || arm_thumb1_movt_ok } } } */\n+/* { dg-options \"-O2\" } */\n+\n+long long\n+movdi (int a)\n+{\n+  return 0xF0F0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movw\\tr0, #61680\" 1 } } */"}, {"sha": "b097a8a019c74507f0c182af6ba5cf526369564b", "filename": "gcc/testsuite/gcc.target/arm/movhi_movw.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmovhi_movw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmovhi_movw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmovhi_movw.c?ref=2b9509a34d0f7e25202530a4453afc5eb5d06f6b", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target { arm_thumb2 || arm_thumb1_movt_ok } } } */\n+/* { dg-options \"-O2\" } */\n+\n+short\n+movsi (void)\n+{\n+  return (short) 0x7070;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movw\\tr0, #28784\" 1 } } */"}, {"sha": "d50906e76ab412ead71ff576d2f28d520234f58d", "filename": "gcc/testsuite/gcc.target/arm/movsi_movw.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmovsi_movw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmovsi_movw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmovsi_movw.c?ref=2b9509a34d0f7e25202530a4453afc5eb5d06f6b", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target { arm_thumb2 || arm_thumb1_movt_ok } } } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+movsi (void)\n+{\n+  return 0xF0F0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movw\\tr0, #61680\" 1 } } */"}, {"sha": "e3476f37788a2b3144454aef04a9b45c0b4ac398", "filename": "gcc/testsuite/gcc.target/arm/pr42574.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr42574.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr42574.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr42574.c?ref=2b9509a34d0f7e25202530a4453afc5eb5d06f6b", "patch": "@@ -1,5 +1,5 @@\n+/* { dg-do compile { arm_thumb1_ok && { ! arm_thumb1_movt_ok } } } */\n /* { dg-options \"-mthumb -Os -fpic\" }  */\n-/* { dg-require-effective-target arm_thumb1_ok } */\n /* { dg-require-effective-target fpic } */\n /* Make sure the address of glob.c is calculated only once and using\n    a logical shift for the offset (200<<1).  */"}, {"sha": "e6a117022f8f16e61fabfd40dbf5dd7eb0da2bbc", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9509a34d0f7e25202530a4453afc5eb5d06f6b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=2b9509a34d0f7e25202530a4453afc5eb5d06f6b", "patch": "@@ -3485,6 +3485,23 @@ proc check_effective_target_arm_cortex_m { } {\n     } \"-mthumb\"]\n }\n \n+# Return 1 if this is an ARM target where -mthumb causes Thumb-1 to be\n+# used and MOVT/MOVW instructions to be available.\n+\n+proc check_effective_target_arm_thumb1_movt_ok {} {\n+    if [check_effective_target_arm_thumb1_ok] {\n+\treturn [check_no_compiler_messages arm_movt object {\n+\t    int\n+\t    foo (void)\n+\t    {\n+\t      asm (\"movt r0, #42\");\n+\t    }\n+\t} \"-mthumb\"]\n+    } else {\n+\treturn 0\n+    }\n+}\n+\n # Return 1 if this compilation turns on string_ops_prefer_neon on.\n \n proc check_effective_target_arm_tune_string_ops_prefer_neon { } {"}]}