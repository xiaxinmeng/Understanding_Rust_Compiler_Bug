{"sha": "fe3f3340416fc6f2a197f2c057de4094f5974d9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUzZjMzNDA0MTZmYzZmMmExOTdmMmMwNTdkZTQwOTRmNTk3NGQ5Yw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-05-23T23:42:52Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-05-23T23:42:52Z"}, "message": "re PR target/71201 (PowerPC XXPERM instruction fails on ISA 3.0 system.)\n\n[gcc]\n2016-05-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/71201\n\t* config/rs6000/altivec.md (altivec_vperm_<mode>_internal): Drop\n\tISA 3.0 xxperm fusion alternative.\n\t(altivec_vperm_v8hiv16qi): Likewise.\n\t(altivec_vperm_<mode>_uns_internal): Likewise.\n\t(vperm_v8hiv4si): Likewise.\n\t(vperm_v16qiv8hi): Likewise.\n\n[gcc/testsuite]\n2016-05-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\t    Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/p9-permute.c: Run test on big endian as well\n\tas little endian.\n\n\n[gcc]\n2016-05-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\t    Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/rs6000.c (rs6000_expand_vector_set): Generate\n\tvpermr/xxpermr on ISA 3.0.\n\t(altivec_expand_vec_perm_le): Likewise.\n\t* config/rs6000/altivec.md (UNSPEC_VPERMR): New unspec.\n\t(altivec_vpermr_<mode>_internal): Add VPERMR/XXPERMR support for\n\tISA 3.0.\n\n\nCo-Authored-By: Kelvin Nilsen <kelvin@gcc.gnu.org>\n\nFrom-SVN: r236617", "tree": {"sha": "a3ec62ae71b9a4978798fa14aaae85b3534d729c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3ec62ae71b9a4978798fa14aaae85b3534d729c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe3f3340416fc6f2a197f2c057de4094f5974d9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe3f3340416fc6f2a197f2c057de4094f5974d9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe3f3340416fc6f2a197f2c057de4094f5974d9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe3f3340416fc6f2a197f2c057de4094f5974d9c/comments", "author": null, "committer": null, "parents": [{"sha": "290279c4380abb665ae8c0c798225e6efcecdf01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/290279c4380abb665ae8c0c798225e6efcecdf01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/290279c4380abb665ae8c0c798225e6efcecdf01"}], "stats": {"total": 170, "additions": 111, "deletions": 59}, "files": [{"sha": "4fd5899ddc5ddb7216510e4dddae0fae8b4f5fef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe3f3340416fc6f2a197f2c057de4094f5974d9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe3f3340416fc6f2a197f2c057de4094f5974d9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe3f3340416fc6f2a197f2c057de4094f5974d9c", "patch": "@@ -1,3 +1,23 @@\n+2016-05-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/71201\n+\t* config/rs6000/altivec.md (altivec_vperm_<mode>_internal): Drop\n+\tISA 3.0 xxperm fusion alternative.\n+\t(altivec_vperm_v8hiv16qi): Likewise.\n+\t(altivec_vperm_<mode>_uns_internal): Likewise.\n+\t(vperm_v8hiv4si): Likewise.\n+\t(vperm_v16qiv8hi): Likewise.\n+\n+2016-05-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\t    Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_set): Generate\n+\tvpermr/xxpermr on ISA 3.0.\n+\t(altivec_expand_vec_perm_le): Likewise.\n+\t* config/rs6000/altivec.md (UNSPEC_VPERMR): New unspec.\n+\t(altivec_vpermr_<mode>_internal): Add VPERMR/XXPERMR support for\n+\tISA 3.0.\n+\n 2016-05-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.h (IS_STACK_MODE): Enable for"}, {"sha": "14fed06f024a248310342ce15aa06ba3a0c47d83", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 44, "deletions": 35, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe3f3340416fc6f2a197f2c057de4094f5974d9c/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe3f3340416fc6f2a197f2c057de4094f5974d9c/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=fe3f3340416fc6f2a197f2c057de4094f5974d9c", "patch": "@@ -58,6 +58,7 @@\n    UNSPEC_VSUM2SWS\n    UNSPEC_VSUMSWS\n    UNSPEC_VPERM\n+   UNSPEC_VPERMR\n    UNSPEC_VPERM_UNS\n    UNSPEC_VRFIN\n    UNSPEC_VCFUX\n@@ -1952,32 +1953,30 @@\n \n ;; Slightly prefer vperm, since the target does not overlap the source\n (define_insn \"*altivec_vperm_<mode>_internal\"\n-  [(set (match_operand:VM 0 \"register_operand\" \"=v,?wo,?&wo\")\n-\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,0,wo\")\n-\t\t    (match_operand:VM 2 \"register_operand\" \"v,wo,wo\")\n-\t\t    (match_operand:V16QI 3 \"register_operand\" \"v,wo,wo\")]\n+  [(set (match_operand:VM 0 \"register_operand\" \"=v,?wo\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,0\")\n+\t\t    (match_operand:VM 2 \"register_operand\" \"v,wo\")\n+\t\t    (match_operand:V16QI 3 \"register_operand\" \"v,wo\")]\n \t\t   UNSPEC_VPERM))]\n   \"TARGET_ALTIVEC\"\n   \"@\n    vperm %0,%1,%2,%3\n-   xxperm %x0,%x2,%x3\n-   xxlor %x0,%x1,%x1\\t\\t# xxperm fusion\\;xxperm %x0,%x2,%x3\"\n+   xxperm %x0,%x2,%x3\"\n   [(set_attr \"type\" \"vecperm\")\n-   (set_attr \"length\" \"4,4,8\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"altivec_vperm_v8hiv16qi\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=v,?wo,?&wo\")\n-\t(unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v,0,wo\")\n-   \t               (match_operand:V8HI 2 \"register_operand\" \"v,wo,wo\")\n-\t\t       (match_operand:V16QI 3 \"register_operand\" \"v,wo,wo\")]\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v,?wo\")\n+\t(unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v,0\")\n+   \t               (match_operand:V8HI 2 \"register_operand\" \"v,wo\")\n+\t\t       (match_operand:V16QI 3 \"register_operand\" \"v,wo\")]\n \t\t   UNSPEC_VPERM))]\n   \"TARGET_ALTIVEC\"\n   \"@\n    vperm %0,%1,%2,%3\n-   xxperm %x0,%x2,%x3\n-   xxlor %x0,%x1,%x1\\t\\t# xxperm fusion\\;xxperm %x0,%x2,%x3\"\n+   xxperm %x0,%x2,%x3\"\n   [(set_attr \"type\" \"vecperm\")\n-   (set_attr \"length\" \"4,4,8\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_expand \"altivec_vperm_<mode>_uns\"\n   [(set (match_operand:VM 0 \"register_operand\" \"\")\n@@ -1995,18 +1994,17 @@\n })\n \n (define_insn \"*altivec_vperm_<mode>_uns_internal\"\n-  [(set (match_operand:VM 0 \"register_operand\" \"=v,?wo,?&wo\")\n-\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,0,wo\")\n-\t\t    (match_operand:VM 2 \"register_operand\" \"v,wo,wo\")\n-\t\t    (match_operand:V16QI 3 \"register_operand\" \"v,wo,wo\")]\n+  [(set (match_operand:VM 0 \"register_operand\" \"=v,?wo\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,0\")\n+\t\t    (match_operand:VM 2 \"register_operand\" \"v,wo\")\n+\t\t    (match_operand:V16QI 3 \"register_operand\" \"v,wo\")]\n \t\t   UNSPEC_VPERM_UNS))]\n   \"TARGET_ALTIVEC\"\n   \"@\n    vperm %0,%1,%2,%3\n-   xxperm %x0,%x2,%x3\n-   xxlor %x0,%x1,%x1\\t\\t# xxperm fusion\\;xxperm %x0,%x2,%x3\"\n+   xxperm %x0,%x2,%x3\"\n   [(set_attr \"type\" \"vecperm\")\n-   (set_attr \"length\" \"4,4,8\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_expand \"vec_permv16qi\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n@@ -2035,6 +2033,19 @@\n     FAIL;\n })\n \n+(define_insn \"*altivec_vpermr_<mode>_internal\"\n+  [(set (match_operand:VM 0 \"register_operand\" \"=v,?wo\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,0\")\n+\t\t    (match_operand:VM 2 \"register_operand\" \"v,wo\")\n+\t\t    (match_operand:V16QI 3 \"register_operand\" \"v,wo\")]\n+\t\t   UNSPEC_VPERMR))]\n+  \"TARGET_P9_VECTOR\"\n+  \"@\n+   vpermr %0,%1,%2,%3\n+   xxpermr %x0,%x2,%x3\"\n+  [(set_attr \"type\" \"vecperm\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"altivec_vrfip\"\t\t; ceil\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n         (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"v\")]\n@@ -2844,32 +2855,30 @@\n   \"\")\n \n (define_insn \"vperm_v8hiv4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v,?wo,?&wo\")\n-        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v,0,wo\")\n-\t\t      (match_operand:V4SI 2 \"register_operand\" \"v,wo,wo\")\n-\t\t      (match_operand:V16QI 3 \"register_operand\" \"v,wo,wo\")]\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v,?wo\")\n+        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v,0\")\n+\t\t      (match_operand:V4SI 2 \"register_operand\" \"v,wo\")\n+\t\t      (match_operand:V16QI 3 \"register_operand\" \"v,wo\")]\n                   UNSPEC_VPERMSI))]\n   \"TARGET_ALTIVEC\"\n   \"@\n    vperm %0,%1,%2,%3\n-   xxperm %x0,%x2,%x3\n-   xxlor %x0,%x1,%x1\\t\\t# xxperm fusion\\;xxperm %x0,%x2,%x3\"\n+   xxperm %x0,%x2,%x3\"\n   [(set_attr \"type\" \"vecperm\")\n-   (set_attr \"length\" \"4,4,8\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"vperm_v16qiv8hi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=v,?wo,?&wo\")\n-        (unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v,0,wo\")\n-\t\t      (match_operand:V8HI 2 \"register_operand\" \"v,wo,wo\")\n-\t\t      (match_operand:V16QI 3 \"register_operand\" \"v,wo,wo\")]\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v,?wo\")\n+        (unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v,0\")\n+\t\t      (match_operand:V8HI 2 \"register_operand\" \"v,wo\")\n+\t\t      (match_operand:V16QI 3 \"register_operand\" \"v,wo\")]\n                   UNSPEC_VPERMHI))]\n   \"TARGET_ALTIVEC\"\n   \"@\n    vperm %0,%1,%2,%3\n-   xxperm %x0,%x2,%x3\n-   xxlor %x0,%x1,%x1\\t\\t# xxperm fusion\\;xxperm %x0,%x2,%x3\"\n+   xxperm %x0,%x2,%x3\"\n   [(set_attr \"type\" \"vecperm\")\n-   (set_attr \"length\" \"4,4,8\")])\n+   (set_attr \"length\" \"4\")])\n \n \n (define_expand \"vec_unpacku_hi_v16qi\""}, {"sha": "ff281302483d91936f4d93ae77d7bf26e8074008", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 39, "deletions": 23, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe3f3340416fc6f2a197f2c057de4094f5974d9c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe3f3340416fc6f2a197f2c057de4094f5974d9c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fe3f3340416fc6f2a197f2c057de4094f5974d9c", "patch": "@@ -6863,21 +6863,29 @@ rs6000_expand_vector_set (rtx target, rtx val, int elt)\n \t\t\tgen_rtvec (3, target, reg,\n \t\t\t\t   force_reg (V16QImode, x)),\n \t\t\tUNSPEC_VPERM);\n-  else \n+  else\n     {\n-      /* Invert selector.  We prefer to generate VNAND on P8 so\n-         that future fusion opportunities can kick in, but must\n-         generate VNOR elsewhere.  */\n-      rtx notx = gen_rtx_NOT (V16QImode, force_reg (V16QImode, x));\n-      rtx iorx = (TARGET_P8_VECTOR\n-\t\t  ? gen_rtx_IOR (V16QImode, notx, notx)\n-\t\t  : gen_rtx_AND (V16QImode, notx, notx));\n-      rtx tmp = gen_reg_rtx (V16QImode);\n-      emit_insn (gen_rtx_SET (tmp, iorx));\n+      if (TARGET_P9_VECTOR)\n+\tx = gen_rtx_UNSPEC (mode,\n+\t\t\t    gen_rtvec (3, target, reg,\n+\t\t\t\t       force_reg (V16QImode, x)),\n+\t\t\t    UNSPEC_VPERMR);\n+      else\n+\t{\n+\t  /* Invert selector.  We prefer to generate VNAND on P8 so\n+\t     that future fusion opportunities can kick in, but must\n+\t     generate VNOR elsewhere.  */\n+\t  rtx notx = gen_rtx_NOT (V16QImode, force_reg (V16QImode, x));\n+\t  rtx iorx = (TARGET_P8_VECTOR\n+\t\t      ? gen_rtx_IOR (V16QImode, notx, notx)\n+\t\t      : gen_rtx_AND (V16QImode, notx, notx));\n+\t  rtx tmp = gen_reg_rtx (V16QImode);\n+\t  emit_insn (gen_rtx_SET (tmp, iorx));\n \n-      /* Permute with operands reversed and adjusted selector.  */\n-      x = gen_rtx_UNSPEC (mode, gen_rtvec (3, reg, target, tmp),\n-\t\t\t  UNSPEC_VPERM);\n+\t  /* Permute with operands reversed and adjusted selector.  */\n+\t  x = gen_rtx_UNSPEC (mode, gen_rtvec (3, reg, target, tmp),\n+\t\t\t      UNSPEC_VPERM);\n+\t}\n     }\n \n   emit_insn (gen_rtx_SET (target, x));\n@@ -34365,17 +34373,25 @@ altivec_expand_vec_perm_le (rtx operands[4])\n   if (!REG_P (target))\n     tmp = gen_reg_rtx (mode);\n \n-  /* Invert the selector with a VNAND if available, else a VNOR.\n-     The VNAND is preferred for future fusion opportunities.  */\n-  notx = gen_rtx_NOT (V16QImode, sel);\n-  iorx = (TARGET_P8_VECTOR\n-\t  ? gen_rtx_IOR (V16QImode, notx, notx)\n-\t  : gen_rtx_AND (V16QImode, notx, notx));\n-  emit_insn (gen_rtx_SET (norreg, iorx));\n+  if (TARGET_P9_VECTOR)\n+    {\n+      unspec = gen_rtx_UNSPEC (mode, gen_rtvec (3, op0, op1, sel),\n+\t\t\t       UNSPEC_VPERMR);\n+    }\n+  else\n+    {\n+      /* Invert the selector with a VNAND if available, else a VNOR.\n+\t The VNAND is preferred for future fusion opportunities.  */\n+      notx = gen_rtx_NOT (V16QImode, sel);\n+      iorx = (TARGET_P8_VECTOR\n+\t      ? gen_rtx_IOR (V16QImode, notx, notx)\n+\t      : gen_rtx_AND (V16QImode, notx, notx));\n+      emit_insn (gen_rtx_SET (norreg, iorx));\n \n-  /* Permute with operands reversed and adjusted selector.  */\n-  unspec = gen_rtx_UNSPEC (mode, gen_rtvec (3, op1, op0, norreg),\n-\t\t\t   UNSPEC_VPERM);\n+      /* Permute with operands reversed and adjusted selector.  */\n+      unspec = gen_rtx_UNSPEC (mode, gen_rtvec (3, op1, op0, norreg),\n+\t\t\t       UNSPEC_VPERM);\n+    }\n \n   /* Copy into target, possibly by way of a register.  */\n   if (!REG_P (target))"}, {"sha": "ed80db55d443c811dce7600ef7f749cc2aeab7b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe3f3340416fc6f2a197f2c057de4094f5974d9c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe3f3340416fc6f2a197f2c057de4094f5974d9c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe3f3340416fc6f2a197f2c057de4094f5974d9c", "patch": "@@ -1,3 +1,9 @@\n+2016-05-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\t    Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/p9-permute.c: Run test on big endian as well\n+\tas little endian.\n+\n 2016-05-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/70972"}, {"sha": "c29c85ba1e8839d30a0d4b06b43bdc4f5c76af21", "filename": "gcc/testsuite/gcc.target/powerpc/p9-permute.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe3f3340416fc6f2a197f2c057de4094f5974d9c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-permute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe3f3340416fc6f2a197f2c057de4094f5974d9c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-permute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-permute.c?ref=fe3f3340416fc6f2a197f2c057de4094f5974d9c", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-do compile { target { powerpc64*-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-options \"-mcpu=power9 -O2\" } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n@@ -17,5 +17,6 @@ permute (vector long long *p, vector long long *q, vector unsigned char mask)\n   return vec_perm (a, b, mask);\n }\n \n+/* expect xxpermr on little-endian, xxperm on big-endian */\n /* { dg-final { scan-assembler\t   \"xxperm\" } } */\n /* { dg-final { scan-assembler-not \"vperm\"  } } */"}]}