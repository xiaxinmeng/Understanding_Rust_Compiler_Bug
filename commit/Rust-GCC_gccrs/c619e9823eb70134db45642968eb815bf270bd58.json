{"sha": "c619e9823eb70134db45642968eb815bf270bd58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYxOWU5ODIzZWI3MDEzNGRiNDU2NDI5NjhlYjgxNWJmMjcwYmQ1OA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2009-03-27T22:25:36Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-03-27T22:25:36Z"}, "message": "jump.c (rtx_renumbered_equal_p): Use subreg_get_info.\n\n2009-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* jump.c (rtx_renumbered_equal_p): Use subreg_get_info.\n\t(true_regnum): Likewise.\n\n\t* rtlanal.c (subreg_info): Moved to ...\n\t* rtl.h (subreg_info): Here.  New.\n\t(subreg_get_info): New.\n\n\t* rtlanal.c (subreg_get_info): Make it extern.\n\nFrom-SVN: r145134", "tree": {"sha": "d0ee34c1b25d930f18a8d86229603462b5336bcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0ee34c1b25d930f18a8d86229603462b5336bcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c619e9823eb70134db45642968eb815bf270bd58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c619e9823eb70134db45642968eb815bf270bd58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c619e9823eb70134db45642968eb815bf270bd58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c619e9823eb70134db45642968eb815bf270bd58/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51212b321b1c143c36e54d68e9a29d1a1125f954", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51212b321b1c143c36e54d68e9a29d1a1125f954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51212b321b1c143c36e54d68e9a29d1a1125f954"}], "stats": {"total": 89, "additions": 50, "deletions": 39}, "files": [{"sha": "f4da0b99375debaca60292e16c8190e3077124eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c619e9823eb70134db45642968eb815bf270bd58/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c619e9823eb70134db45642968eb815bf270bd58/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c619e9823eb70134db45642968eb815bf270bd58", "patch": "@@ -1,3 +1,14 @@\n+2009-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* jump.c (rtx_renumbered_equal_p): Use subreg_get_info.\n+\t(true_regnum): Likewise.\n+\n+\t* rtlanal.c (subreg_info): Moved to ...\n+\t* rtl.h (subreg_info): Here.  New.\n+\t(subreg_get_info): New.\n+\n+\t* rtlanal.c (subreg_get_info): Make it extern.\n+\n 2009-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/39472"}, {"sha": "1189f812fefbb140784f6c71127a979039a8b222", "filename": "gcc/jump.c", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c619e9823eb70134db45642968eb815bf270bd58/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c619e9823eb70134db45642968eb815bf270bd58/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=c619e9823eb70134db45642968eb815bf270bd58", "patch": "@@ -1536,6 +1536,7 @@ rtx_renumbered_equal_p (const_rtx x, const_rtx y)\n     {\n       int reg_x = -1, reg_y = -1;\n       int byte_x = 0, byte_y = 0;\n+      struct subreg_info info;\n \n       if (GET_MODE (x) != GET_MODE (y))\n \treturn 0;\n@@ -1552,15 +1553,12 @@ rtx_renumbered_equal_p (const_rtx x, const_rtx y)\n \n \t  if (reg_renumber[reg_x] >= 0)\n \t    {\n-\t      if (!subreg_offset_representable_p (reg_renumber[reg_x],\n-\t\t\t\t\t\t  GET_MODE (SUBREG_REG (x)),\n-\t\t\t\t\t\t  byte_x,\n-\t\t\t\t\t\t  GET_MODE (x)))\n+\t      subreg_get_info (reg_renumber[reg_x],\n+\t\t\t       GET_MODE (SUBREG_REG (x)), byte_x,\n+\t\t\t       GET_MODE (x), &info);\n+\t      if (!info.representable_p)\n \t\treturn 0;\n-\t      reg_x = subreg_regno_offset (reg_renumber[reg_x],\n-\t\t\t\t\t   GET_MODE (SUBREG_REG (x)),\n-\t\t\t\t\t   byte_x,\n-\t\t\t\t\t   GET_MODE (x));\n+\t      reg_x = info.offset;\n \t      byte_x = 0;\n \t    }\n \t}\n@@ -1578,15 +1576,12 @@ rtx_renumbered_equal_p (const_rtx x, const_rtx y)\n \n \t  if (reg_renumber[reg_y] >= 0)\n \t    {\n-\t      if (!subreg_offset_representable_p (reg_renumber[reg_y],\n-\t\t\t\t\t\t  GET_MODE (SUBREG_REG (y)),\n-\t\t\t\t\t\t  byte_y,\n-\t\t\t\t\t\t  GET_MODE (y)))\n+\t      subreg_get_info (reg_renumber[reg_y],\n+\t\t\t       GET_MODE (SUBREG_REG (y)), byte_y,\n+\t\t\t       GET_MODE (y), &info);\n+\t      if (!info.representable_p)\n \t\treturn 0;\n-\t      reg_y = subreg_regno_offset (reg_renumber[reg_y],\n-\t\t\t\t\t   GET_MODE (SUBREG_REG (y)),\n-\t\t\t\t\t   byte_y,\n-\t\t\t\t\t   GET_MODE (y));\n+\t      reg_y = info.offset;\n \t      byte_y = 0;\n \t    }\n \t}\n@@ -1728,13 +1723,17 @@ true_regnum (const_rtx x)\n     {\n       int base = true_regnum (SUBREG_REG (x));\n       if (base >= 0\n-\t  && base < FIRST_PSEUDO_REGISTER\n-\t  && subreg_offset_representable_p (REGNO (SUBREG_REG (x)),\n-\t\t\t\t\t    GET_MODE (SUBREG_REG (x)),\n-\t\t\t\t\t    SUBREG_BYTE (x), GET_MODE (x)))\n-\treturn base + subreg_regno_offset (REGNO (SUBREG_REG (x)),\n-\t\t\t\t\t   GET_MODE (SUBREG_REG (x)),\n-\t\t\t\t\t   SUBREG_BYTE (x), GET_MODE (x));\n+\t  && base < FIRST_PSEUDO_REGISTER)\n+\t{\n+\t  struct subreg_info info;\n+\n+\t  subreg_get_info (REGNO (SUBREG_REG (x)),\n+\t\t\t   GET_MODE (SUBREG_REG (x)),\n+\t\t\t   SUBREG_BYTE (x), GET_MODE (x), &info);\n+\n+\t  if (info.representable_p)\n+\t    return base + info.offset;\n+\t}\n     }\n   return -1;\n }"}, {"sha": "bdb41d62b5569f77fb30b43caeefd43e9b9bde54", "filename": "gcc/rtl.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c619e9823eb70134db45642968eb815bf270bd58/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c619e9823eb70134db45642968eb815bf270bd58/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=c619e9823eb70134db45642968eb815bf270bd58", "patch": "@@ -1806,6 +1806,22 @@ extern rtx canonicalize_condition (rtx, rtx, int, rtx *, rtx, int, int);\n    being made.  */\n extern rtx get_condition (rtx, rtx *, int, int);\n \n+/* Information about a subreg of a hard register.  */\n+struct subreg_info\n+{\n+  /* Offset of first hard register involved in the subreg.  */\n+  int offset;\n+  /* Number of hard registers involved in the subreg.  */\n+  int nregs;\n+  /* Whether this subreg can be represented as a hard reg with the new\n+     mode.  */\n+  bool representable_p;\n+};\n+\n+extern void subreg_get_info (unsigned int, enum machine_mode,\n+\t\t\t     unsigned int, enum machine_mode,\n+\t\t\t     struct subreg_info *);\n+\n /* lists.c */\n \n extern void free_EXPR_LIST_list\t\t(rtx *);"}, {"sha": "73d3b08d940869d46c691ab8991df24875e39bb2", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c619e9823eb70134db45642968eb815bf270bd58/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c619e9823eb70134db45642968eb815bf270bd58/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=c619e9823eb70134db45642968eb815bf270bd58", "patch": "@@ -39,28 +39,13 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"tree.h\"\n \n-/* Information about a subreg of a hard register.  */\n-struct subreg_info\n-{\n-  /* Offset of first hard register involved in the subreg.  */\n-  int offset;\n-  /* Number of hard registers involved in the subreg.  */\n-  int nregs;\n-  /* Whether this subreg can be represented as a hard reg with the new\n-     mode.  */\n-  bool representable_p;\n-};\n-\n /* Forward declarations */\n static void set_of_1 (rtx, const_rtx, void *);\n static bool covers_regno_p (const_rtx, unsigned int);\n static bool covers_regno_no_parallel_p (const_rtx, unsigned int);\n static int rtx_referenced_p_1 (rtx *, void *);\n static int computed_jump_p_1 (const_rtx);\n static void parms_set (rtx, const_rtx, void *);\n-static void subreg_get_info (unsigned int, enum machine_mode,\n-\t\t\t     unsigned int, enum machine_mode,\n-\t\t\t     struct subreg_info *);\n \n static unsigned HOST_WIDE_INT cached_nonzero_bits (const_rtx, enum machine_mode,\n                                                    const_rtx, enum machine_mode,\n@@ -3090,7 +3075,7 @@ subreg_lsb (const_rtx x)\n    offset - The byte offset.\n    ymode  - The mode of a top level SUBREG (or what may become one).\n    info   - Pointer to structure to fill in.  */\n-static void\n+void\n subreg_get_info (unsigned int xregno, enum machine_mode xmode,\n \t\t unsigned int offset, enum machine_mode ymode,\n \t\t struct subreg_info *info)"}]}