{"sha": "651a20b54b07324c321f79f98251fa2ea2d0ec54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUxYTIwYjU0YjA3MzI0YzMyMWY3OWY5ODI1MWZhMmVhMmQwZWM1NA==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2010-11-16T19:50:17Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2010-11-16T19:50:17Z"}, "message": "re PR preprocessor/17349 (// comments cause weird behaviour with options -E -C)\n\n2010-11-16  Kai Tietz  <kai.tietz@onevision.com>\n\n        PR preprocessor/17349\n        * lex.c (save_comment): Handle in argument passing c++\n        comments special.\n\n2010-11-16  Kai Tietz  <kai.tietz@onevision.com>\n\n        PR preprocessor/17349\n        * gcc.dg/cpp/cmdlne-C3.c: New.\n\nFrom-SVN: r166817", "tree": {"sha": "ebbcc53e1ea71b17a6fce551096e1ece0b1a930e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebbcc53e1ea71b17a6fce551096e1ece0b1a930e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/651a20b54b07324c321f79f98251fa2ea2d0ec54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/651a20b54b07324c321f79f98251fa2ea2d0ec54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/651a20b54b07324c321f79f98251fa2ea2d0ec54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/651a20b54b07324c321f79f98251fa2ea2d0ec54/comments", "author": null, "committer": null, "parents": [{"sha": "92cf7399963ad4a80e4b70fe568e000155ad1f76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92cf7399963ad4a80e4b70fe568e000155ad1f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92cf7399963ad4a80e4b70fe568e000155ad1f76"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "fd40483a532866ef69a4dc6986c539370462074b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651a20b54b07324c321f79f98251fa2ea2d0ec54/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651a20b54b07324c321f79f98251fa2ea2d0ec54/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=651a20b54b07324c321f79f98251fa2ea2d0ec54", "patch": "@@ -1,3 +1,8 @@\n+2010-11-16  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\tPR preprocessor/17349\n+\t* gcc.dg/cpp/cmdlne-C3.c: New.\n+\n 2010-11-16  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/44545"}, {"sha": "86a942216438b149a8ddade3cc011f9276800704", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-C3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651a20b54b07324c321f79f98251fa2ea2d0ec54/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-C3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651a20b54b07324c321f79f98251fa2ea2d0ec54/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-C3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-C3.c?ref=651a20b54b07324c321f79f98251fa2ea2d0ec54", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-C -P\" } */\n+\n+#define macro(X) X\n+\n+macro(\n+// Comment1\n+x\n+// Comment2\n+);\n+\n+/* { dg-final { scan-file cmdlne-C3.i \"\\\\\\*\\\\\\/ x \\\\\\/\\\\\\*\" } } */\n+"}, {"sha": "ec0602a0d1d8c420f0cb0f0415ea1bc2aae12298", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651a20b54b07324c321f79f98251fa2ea2d0ec54/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651a20b54b07324c321f79f98251fa2ea2d0ec54/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=651a20b54b07324c321f79f98251fa2ea2d0ec54", "patch": "@@ -1,3 +1,9 @@\n+2010-11-16  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\tPR preprocessor/17349\n+\t* lex.c (save_comment): Handle in argument passing c++\n+\tcomments special.\n+\n 2010-11-02  Ian Lance Taylor  <iant@google.com>\n \n \t* configure.ac: Use AC_SYS_LARGEFILE."}, {"sha": "5cd56868c3aeddbcbec1c87aada85612a05d7d1d", "filename": "libcpp/lex.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651a20b54b07324c321f79f98251fa2ea2d0ec54/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651a20b54b07324c321f79f98251fa2ea2d0ec54/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=651a20b54b07324c321f79f98251fa2ea2d0ec54", "patch": "@@ -1641,7 +1641,7 @@ save_comment (cpp_reader *pfile, cpp_token *token, const unsigned char *from,\n \t      cppchar_t type)\n {\n   unsigned char *buffer;\n-  unsigned int len, clen;\n+  unsigned int len, clen, i;\n \n   len = pfile->buffer->cur - from + 1; /* + 1 for the initial '/'.  */\n \n@@ -1650,13 +1650,14 @@ save_comment (cpp_reader *pfile, cpp_token *token, const unsigned char *from,\n   if (is_vspace (pfile->buffer->cur[-1]))\n     len--;\n \n-  /* If we are currently in a directive, then we need to store all\n-     C++ comments as C comments internally, and so we need to\n-     allocate a little extra space in that case.\n+  /* If we are currently in a directive or in argument parsing, then\n+     we need to store all C++ comments as C comments internally, and\n+     so we need to allocate a little extra space in that case.\n \n      Note that the only time we encounter a directive here is\n      when we are saving comments in a \"#define\".  */\n-  clen = (pfile->state.in_directive && type == '/') ? len + 2 : len;\n+  clen = ((pfile->state.in_directive || pfile->state.parsing_args)\n+\t  && type == '/') ? len + 2 : len;\n \n   buffer = _cpp_unaligned_alloc (pfile, clen);\n \n@@ -1668,11 +1669,16 @@ save_comment (cpp_reader *pfile, cpp_token *token, const unsigned char *from,\n   memcpy (buffer + 1, from, len - 1);\n \n   /* Finish conversion to a C comment, if necessary.  */\n-  if (pfile->state.in_directive && type == '/')\n+  if ((pfile->state.in_directive || pfile->state.parsing_args) && type == '/')\n     {\n       buffer[1] = '*';\n       buffer[clen - 2] = '*';\n       buffer[clen - 1] = '/';\n+      /* As there can be in a C++ comments illegal sequences for C comments\n+         we need to filter them out.  */\n+      for (i = 2; i < (clen - 2); i++)\n+        if (buffer[i] == '/' && (buffer[i - 1] == '*' || buffer[i + 1] == '*'))\n+          buffer[i] = '|';\n     }\n \n   /* Finally store this comment for use by clients of libcpp. */"}]}