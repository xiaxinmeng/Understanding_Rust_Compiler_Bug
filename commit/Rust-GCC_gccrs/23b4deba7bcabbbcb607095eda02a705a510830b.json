{"sha": "23b4deba7bcabbbcb607095eda02a705a510830b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNiNGRlYmE3YmNhYmJiY2I2MDcwOTVlZGEwMmE3MDVhNTEwODMwYg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2002-05-19T05:15:12Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2002-05-19T05:15:12Z"}, "message": "cp-tree.h (complete_type_or_diagnostic): Changed prototype, renamed from...\n\n* cp-tree.h (complete_type_or_diagnostic): Changed prototype,\nrenamed from...\n(complete_type_or_else): ... this.  Redefined as macro.\n(cxx_incomplete_type_diagnostic): Declare.\n(cxx_incomplete_type_error): Define as macro.\n* init.c (build_delete): Warn about incomplete types other than\nvoid, and use the built-in operator delete for them.\n* typeck.c (complete_type_or_diagnostic): Renamed from\ncomplete_type_or_else.  Added warn_only argument, passed to...\n* typeck2.c (cxx_incomplete_type_diagnostic): ... this.  Print\nwarnings or errors depending on new warn_only argument.  Renamed\nfrom...\n(cxx_incomplete_type_error): ... this.  New implementation in\nterms of cxx_incomplete_type_diagnostic.\n\nFrom-SVN: r53605", "tree": {"sha": "ffcdb6c8e505f82dab06162c541fef073b362b79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffcdb6c8e505f82dab06162c541fef073b362b79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23b4deba7bcabbbcb607095eda02a705a510830b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23b4deba7bcabbbcb607095eda02a705a510830b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23b4deba7bcabbbcb607095eda02a705a510830b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23b4deba7bcabbbcb607095eda02a705a510830b/comments", "author": null, "committer": null, "parents": [{"sha": "410b770f6366152c34efd7629258cb7f5598a20b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410b770f6366152c34efd7629258cb7f5598a20b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410b770f6366152c34efd7629258cb7f5598a20b"}], "stats": {"total": 95, "additions": 76, "deletions": 19}, "files": [{"sha": "56f76633e999688711142d9c3ba96574228a9726", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b4deba7bcabbbcb607095eda02a705a510830b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b4deba7bcabbbcb607095eda02a705a510830b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=23b4deba7bcabbbcb607095eda02a705a510830b", "patch": "@@ -1,3 +1,20 @@\n+2002-05-19  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* cp-tree.h (complete_type_or_diagnostic): Changed prototype,\n+\trenamed from...\n+\t(complete_type_or_else): ... this.  Redefined as macro.\n+\t(cxx_incomplete_type_diagnostic): Declare.\n+\t(cxx_incomplete_type_error): Define as macro.\n+\t* init.c (build_delete): Warn about incomplete types other than\n+\tvoid, and use the built-in operator delete for them.\n+\t* typeck.c (complete_type_or_diagnostic): Renamed from\n+\tcomplete_type_or_else.  Added warn_only argument, passed to...\n+\t* typeck2.c (cxx_incomplete_type_diagnostic): ... this.  Print\n+\twarnings or errors depending on new warn_only argument.  Renamed\n+\tfrom...\n+\t(cxx_incomplete_type_error): ... this.  New implementation in\n+\tterms of cxx_incomplete_type_diagnostic.\n+\n 2002-05-18  Jason Merrill  <jason@redhat.com>\n \n \t* decl2.c (import_export_decl): If we clear"}, {"sha": "02763095024dc7711314151a257c66a9b9e5c819", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b4deba7bcabbbcb607095eda02a705a510830b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b4deba7bcabbbcb607095eda02a705a510830b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=23b4deba7bcabbbcb607095eda02a705a510830b", "patch": "@@ -4317,7 +4317,8 @@ extern tree condition_conversion\t\tPARAMS ((tree));\n extern tree target_type\t\t\t\tPARAMS ((tree));\n extern tree require_complete_type\t\tPARAMS ((tree));\n extern tree complete_type\t\t\tPARAMS ((tree));\n-extern tree complete_type_or_else               PARAMS ((tree, tree));\n+extern tree complete_type_or_diagnostic         PARAMS ((tree, tree, int));\n+#define complete_type_or_else(T,V) (complete_type_or_diagnostic ((T), (V), 0))\n extern int type_unknown_p\t\t\tPARAMS ((tree));\n extern tree commonparms\t\t\t\tPARAMS ((tree, tree));\n extern tree original_type\t\t\tPARAMS ((tree));\n@@ -4376,7 +4377,11 @@ extern tree check_return_expr                   PARAMS ((tree));\n   build_binary_op(code, arg1, arg2, 1)\n \n /* in typeck2.c */\n+extern void cxx_incomplete_type_diagnostic\tPARAMS ((tree, tree, int));\n+#undef cxx_incomplete_type_error\n extern void cxx_incomplete_type_error\t\tPARAMS ((tree, tree));\n+#define cxx_incomplete_type_error(V,T) \\\n+  (cxx_incomplete_type_diagnostic ((V), (T), 0))\n extern tree error_not_base_type\t\t\tPARAMS ((tree, tree));\n extern tree binfo_or_else\t\t\tPARAMS ((tree, tree));\n extern void readonly_error\t\t\tPARAMS ((tree, const char *, int));"}, {"sha": "3ac91da9fe7e146d5f5028e212c70253dbfb6d6e", "filename": "gcc/cp/init.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b4deba7bcabbbcb607095eda02a705a510830b/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b4deba7bcabbbcb607095eda02a705a510830b/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=23b4deba7bcabbbcb607095eda02a705a510830b", "patch": "@@ -3112,11 +3112,18 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n   if (TREE_CODE (type) == POINTER_TYPE)\n     {\n       type = TYPE_MAIN_VARIANT (TREE_TYPE (type));\n-      if (!VOID_TYPE_P (type) && !complete_type_or_else (type, addr))\n-\treturn error_mark_node;\n       if (TREE_CODE (type) == ARRAY_TYPE)\n \tgoto handle_array;\n-      if (! IS_AGGR_TYPE (type))\n+\n+      if (VOID_TYPE_P (type)\n+\t  /* We don't want to warn about delete of void*, only other\n+\t     incomplete types.  Deleting other incomplete types\n+\t     invokes undefined behavior, but it is not ill-formed, so\n+\t     compile to something that would even do The Right Thing\n+\t     (TM) should the type have a trivial dtor and no delete\n+\t     operator.  */\n+\t  || !complete_type_or_diagnostic (type, addr, 1)\n+\t  || !IS_AGGR_TYPE (type))\n \t{\n \t  /* Call the builtin operator delete.  */\n \t  return build_builtin_delete_call (addr);"}, {"sha": "5ea8bdb4f28b42413e3dad0cd0578a26dd71c0b3", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b4deba7bcabbbcb607095eda02a705a510830b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b4deba7bcabbbcb607095eda02a705a510830b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=23b4deba7bcabbbcb607095eda02a705a510830b", "patch": "@@ -157,21 +157,23 @@ complete_type (type)\n }\n \n /* Like complete_type, but issue an error if the TYPE cannot be\n-   completed.  VALUE is used for informative diagnostics.\n+   completed.  VALUE is used for informative diagnostics.  WARN_ONLY\n+   will cause a warning message to be printed, instead of an error.\n    Returns NULL_TREE if the type cannot be made complete.  */\n \n tree\n-complete_type_or_else (type, value)\n+complete_type_or_diagnostic (type, value, warn_only)\n      tree type;\n      tree value;\n+     int warn_only;\n {\n   type = complete_type (type);\n   if (type == error_mark_node)\n     /* We already issued an error.  */\n     return NULL_TREE;\n   else if (!COMPLETE_TYPE_P (type))\n     {\n-      cxx_incomplete_type_error (value, type);\n+      cxx_incomplete_type_diagnostic (value, type, warn_only);\n       return NULL_TREE;\n     }\n   else"}, {"sha": "e034d50c09679c4d8b23287390bab387f4ffd4ab", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b4deba7bcabbbcb607095eda02a705a510830b/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b4deba7bcabbbcb607095eda02a705a510830b/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=23b4deba7bcabbbcb607095eda02a705a510830b", "patch": "@@ -182,14 +182,29 @@ abstract_virtuals_error (decl, type)\n \n /* Print an error message for invalid use of an incomplete type.\n    VALUE is the expression that was used (or 0 if that isn't known)\n-   and TYPE is the type that was invalid.  */\n+   and TYPE is the type that was invalid.  If WARN_ONLY is nonzero, a\n+   warning is printed, otherwise an error is printed.  */\n \n void\n-cxx_incomplete_type_error (value, type)\n+cxx_incomplete_type_diagnostic (value, type, warn_only)\n      tree value;\n      tree type;\n+     int warn_only;\n {\n   int decl = 0;\n+  void (*p_msg) PARAMS ((const char *, ...));\n+  void (*p_msg_at) PARAMS ((const char *, ...));\n+\n+  if (warn_only)\n+    {\n+      p_msg = warning;\n+      p_msg_at = cp_warning_at;\n+    }\n+  else\n+    {\n+      p_msg = error;\n+      p_msg_at = cp_error_at;\n+    }\n   \n   /* Avoid duplicate error message.  */\n   if (TREE_CODE (type) == ERROR_MARK)\n@@ -198,7 +213,7 @@ cxx_incomplete_type_error (value, type)\n   if (value != 0 && (TREE_CODE (value) == VAR_DECL\n \t\t     || TREE_CODE (value) == PARM_DECL))\n     {\n-      cp_error_at (\"`%D' has incomplete type\", value);\n+      (*p_msg_at) (\"`%D' has incomplete type\", value);\n       decl = 1;\n     }\n retry:\n@@ -210,12 +225,12 @@ cxx_incomplete_type_error (value, type)\n     case UNION_TYPE:\n     case ENUMERAL_TYPE:\n       if (!decl)\n-        error (\"invalid use of undefined type `%#T'\", type);\n-      cp_error_at (\"forward declaration of `%#T'\", type);\n+        (*p_msg) (\"invalid use of undefined type `%#T'\", type);\n+      (*p_msg_at)  (\"forward declaration of `%#T'\", type);\n       break;\n \n     case VOID_TYPE:\n-      error (\"invalid use of `%T'\", type);\n+      (*p_msg) (\"invalid use of `%T'\", type);\n       break;\n \n     case ARRAY_TYPE:\n@@ -224,34 +239,45 @@ cxx_incomplete_type_error (value, type)\n           type = TREE_TYPE (type);\n           goto retry;\n         }\n-      error (\"invalid use of array with unspecified bounds\");\n+      (*p_msg) (\"invalid use of array with unspecified bounds\");\n       break;\n \n     case OFFSET_TYPE:\n     bad_member:\n-      error (\"invalid use of member (did you forget the `&' ?)\");\n+      (*p_msg) (\"invalid use of member (did you forget the `&' ?)\");\n       break;\n \n     case TEMPLATE_TYPE_PARM:\n-      error (\"invalid use of template type parameter\");\n+      (*p_msg) (\"invalid use of template type parameter\");\n       break;\n \n     case UNKNOWN_TYPE:\n       if (value && TREE_CODE (value) == COMPONENT_REF)\n         goto bad_member;\n       else if (value && TREE_CODE (value) == ADDR_EXPR)\n-        error (\"address of overloaded function with no contextual type information\");\n+        (*p_msg) (\"address of overloaded function with no contextual type information\");\n       else if (value && TREE_CODE (value) == OVERLOAD)\n-        error (\"overloaded function with no contextual type information\");\n+        (*p_msg) (\"overloaded function with no contextual type information\");\n       else\n-        error (\"insufficient contextual information to determine type\");\n+        (*p_msg) (\"insufficient contextual information to determine type\");\n       break;\n     \n     default:\n       abort ();\n     }\n }\n \n+/* Backward-compatibility interface to incomplete_type_diagnostic;\n+   required by ../tree.c.  */\n+#undef cxx_incomplete_type_error\n+void\n+cxx_incomplete_type_error (value, type)\n+     tree value;\n+     tree type;\n+{\n+  cxx_incomplete_type_diagnostic (value, type, 0);\n+}\n+\n \f\n /* Perform appropriate conversions on the initial value of a variable,\n    store it in the declaration DECL,"}]}