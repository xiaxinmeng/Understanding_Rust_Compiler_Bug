{"sha": "59d8fe27225bbdeb958692a320caf77eb8fc9f17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlkOGZlMjcyMjViYmRlYjk1ODY5MmEzMjBjYWY3N2ViOGZjOWYxNw==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2005-01-05T18:39:43Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2005-01-05T18:39:43Z"}, "message": "unwind-dw2-fde-darwin.c (examine_objects): Use 64-bit Mach-O getters if ppc64.\n\n        * unwind-dw2-fde-darwin.c (examine_objects): Use 64-bit\n        Mach-O getters if ppc64.\n        * config/darwin.c (darwin_asm_output_dwarf_delta): Obey\n        size argument.\n        * config/darwin.h (ASM_PREFERRED_EH_DATA_FORMAT): Use\n        signed four-byte field for global code case.\n        (STARTFILE_SPEC): Avoid crt2.o for 64-bit compilation.\n\nFrom-SVN: r92962", "tree": {"sha": "92090e557808239acca7de92b369dca94e57a36b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92090e557808239acca7de92b369dca94e57a36b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59d8fe27225bbdeb958692a320caf77eb8fc9f17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d8fe27225bbdeb958692a320caf77eb8fc9f17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d8fe27225bbdeb958692a320caf77eb8fc9f17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d8fe27225bbdeb958692a320caf77eb8fc9f17/comments", "author": null, "committer": null, "parents": [{"sha": "a6cc7e85debd2f43dd64c7ecdff9f5907270b381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6cc7e85debd2f43dd64c7ecdff9f5907270b381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6cc7e85debd2f43dd64c7ecdff9f5907270b381"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "442e06d543e77c5cfb463eafab60284adc10b0b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d8fe27225bbdeb958692a320caf77eb8fc9f17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d8fe27225bbdeb958692a320caf77eb8fc9f17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59d8fe27225bbdeb958692a320caf77eb8fc9f17", "patch": "@@ -1,3 +1,13 @@\n+2005-01-05  Stan Shebs  <shebs@apple.com>\n+\n+\t* unwind-dw2-fde-darwin.c (examine_objects): Use 64-bit\n+\tMach-O getters if ppc64.\n+\t* config/darwin.c (darwin_asm_output_dwarf_delta): Obey\n+\tsize argument.\n+\t* config/darwin.h (ASM_PREFERRED_EH_DATA_FORMAT): Use\n+\tsigned four-byte field for global code case.\n+\t(STARTFILE_SPEC): Avoid crt2.o for 64-bit compilation.\n+\n 2005-01-05  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/19100"}, {"sha": "cb3ba0a42e475d16c553762f9df4414686a72423", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d8fe27225bbdeb958692a320caf77eb8fc9f17/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d8fe27225bbdeb958692a320caf77eb8fc9f17/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=59d8fe27225bbdeb958692a320caf77eb8fc9f17", "patch": "@@ -1358,21 +1358,22 @@ darwin_assemble_visibility (tree decl, int vis)\n static int darwin_dwarf_label_counter;\n \n void\n-darwin_asm_output_dwarf_delta (FILE *file, int size ATTRIBUTE_UNUSED,\n+darwin_asm_output_dwarf_delta (FILE *file, int size,\n \t\t\t       const char *lab1, const char *lab2)\n {\n   int islocaldiff = (lab1[0] == '*' && lab1[1] == 'L'\n \t\t     && lab2[0] == '*' && lab2[1] == 'L');\n+  char *directive = (size == 8 ? \".quad\" : \".long\");\n \n   if (islocaldiff)\n     fprintf (file, \"\\t.set L$set$%d,\", darwin_dwarf_label_counter);\n   else\n-    fprintf (file, \"\\t%s\\t\", \".long\");\n+    fprintf (file, \"\\t%s\\t\", directive);\n   assemble_name_raw (file, lab1);\n   fprintf (file, \"-\");\n   assemble_name_raw (file, lab2);\n   if (islocaldiff)\n-    fprintf (file, \"\\n\\t.long L$set$%d\", darwin_dwarf_label_counter++);\n+    fprintf (file, \"\\n\\t%s L$set$%d\", directive, darwin_dwarf_label_counter++);\n }\n \n void"}, {"sha": "37a5e7c6da8cad7e0725d8b6bb99bbe058bb0f7b", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d8fe27225bbdeb958692a320caf77eb8fc9f17/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d8fe27225bbdeb958692a320caf77eb8fc9f17/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=59d8fe27225bbdeb958692a320caf77eb8fc9f17", "patch": "@@ -322,18 +322,22 @@ extern const char *darwin_fix_and_continue_switch;\n       %{shared-libgcc:-lgcc_s -lgcc}} %{Zdynamiclib:-lgcc_s -lgcc}}}\"\n \n /* We specify crt0.o as -lcrt0.o so that ld will search the library path.  */\n+/* We don't want anything to do with crt2.o in the 64-bit case;\n+   testing the PowerPC-specific -m64 flag here is a little irregular,\n+   but it's overkill to make copies of this spec for each target\n+   arch.  */\n \n #undef  STARTFILE_SPEC\n #define STARTFILE_SPEC  \\\n   \"%{!Zdynamiclib:%{Zbundle:%{!static:-lbundle1.o}} \\\n      %{!Zbundle:%{pg:%{static:-lgcrt0.o} \\\n                      %{!static:%{object:-lgcrt0.o} \\\n                                %{!object:%{preload:-lgcrt0.o} \\\n-                                 %{!preload:-lgcrt1.o crt2.o%s}}}} \\\n+                                 %{!preload:-lgcrt1.o %{!m64: crt2.o%s}}}}} \\\n                 %{!pg:%{static:-lcrt0.o} \\\n                       %{!static:%{object:-lcrt0.o} \\\n                                 %{!object:%{preload:-lcrt0.o} \\\n-                                  %{!preload:-lcrt1.o crt2.o%s}}}}}}\"\n+                                  %{!preload:-lcrt1.o %{!m64: crt2.o%s}}}}}}}\"\n \n /* The native Darwin linker doesn't necessarily place files in the order\n    that they're specified on the link line.  Thus, it is pointless\n@@ -989,7 +993,7 @@ enum machopic_addr_class {\n #undef ASM_PREFERRED_EH_DATA_FORMAT\n #define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)  \\\n   (((CODE) == 2 && (GLOBAL) == 1) \\\n-   ? (DW_EH_PE_pcrel | DW_EH_PE_indirect) : \\\n+   ? (DW_EH_PE_pcrel | DW_EH_PE_indirect | DW_EH_PE_sdata4) : \\\n      ((CODE) == 1 || (GLOBAL) == 0) ? DW_EH_PE_pcrel : DW_EH_PE_absptr)\n \n #define ASM_OUTPUT_DWARF_DELTA(FILE,SIZE,LABEL1,LABEL2)  \\"}, {"sha": "12c9ed377f0e5dad2623a7ef54cfda23ce0c2b8e", "filename": "gcc/unwind-dw2-fde-darwin.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d8fe27225bbdeb958692a320caf77eb8fc9f17/gcc%2Funwind-dw2-fde-darwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d8fe27225bbdeb958692a320caf77eb8fc9f17/gcc%2Funwind-dw2-fde-darwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde-darwin.c?ref=59d8fe27225bbdeb958692a320caf77eb8fc9f17", "patch": "@@ -57,8 +57,11 @@ extern void _keymgr_set_and_unlock_processwide_ptr (int, void *);\n extern void _keymgr_unlock_processwide_ptr (int);\n \n struct mach_header;\n+struct mach_header_64;\n extern char *getsectdatafromheader (struct mach_header*, const char*,\n \t\t\tconst char *, unsigned long *);\n+extern char *getsectdatafromheader_64 (struct mach_header*, const char*,\n+\t\t\tconst char *, unsigned long *);\n \n /* This is referenced from KEYMGR_GCC3_DW2_OBJ_LIST.  */\n struct km_object_info {\n@@ -151,11 +154,21 @@ examine_objects (void *pc, struct dwarf_eh_bases *bases, int dont_alloc)\n \tchar *fde;\n \tunsigned long sz;\n \n+#ifdef __ppc64__\n+\tfde = getsectdatafromheader_64 ((struct mach_header_64 *) image->mh,\n+\t\t\t\t     \"__DATA\", \"__eh_frame\", &sz);\n+#else\n \tfde = getsectdatafromheader (image->mh, \"__DATA\", \"__eh_frame\", &sz);\n+#endif\n \tif (fde == NULL)\n \t  {\n+#ifdef __ppc64__\n+\t    fde = getsectdatafromheader_64 ((struct mach_header_64 *) image->mh,\n+\t\t\t\t\t \"__TEXT\", \"__eh_frame\", &sz);\n+#else\n \t    fde = getsectdatafromheader (image->mh, \"__TEXT\",\n \t\t\t\t\t \"__eh_frame\", &sz);\n+#endif\n \t    if (fde != NULL)\n \t      image->examined_p |= IMAGE_IS_TEXT_MASK;\n \t  }"}]}