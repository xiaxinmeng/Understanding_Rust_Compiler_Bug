{"sha": "39d04363053e586b594f31a5e02ea6c4a5b6e7f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlkMDQzNjMwNTNlNTg2YjU5NGYzMWE1ZTAyZWE2YzRhNWI2ZTdmNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-04-09T11:18:39Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-04-09T11:18:39Z"}, "message": "i386.c (call, call_value): Make sure that resulting call_insn does have proper second operand.\n\n\t* i386.c (call, call_value): Make sure that resulting call_insn\n\tdoes have proper second operand.\n\nFrom-SVN: r41201", "tree": {"sha": "634c7e0b3be2bc2c554d8bc00b3d5f7082b014e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/634c7e0b3be2bc2c554d8bc00b3d5f7082b014e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39d04363053e586b594f31a5e02ea6c4a5b6e7f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39d04363053e586b594f31a5e02ea6c4a5b6e7f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39d04363053e586b594f31a5e02ea6c4a5b6e7f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39d04363053e586b594f31a5e02ea6c4a5b6e7f7/comments", "author": null, "committer": null, "parents": [{"sha": "a6b9fb7a348173fe5592c40e947c2b714f5963f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6b9fb7a348173fe5592c40e947c2b714f5963f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6b9fb7a348173fe5592c40e947c2b714f5963f8"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "235e319fe90d61f54b6d8f46e5497c39673796a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d04363053e586b594f31a5e02ea6c4a5b6e7f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d04363053e586b594f31a5e02ea6c4a5b6e7f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39d04363053e586b594f31a5e02ea6c4a5b6e7f7", "patch": "@@ -1,3 +1,8 @@\n+Sun Apr  8 00:43:27 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (call, call_value): Make sure that resulting call_insn\n+\tdoes have proper second operand.\n+\n Sun Apr  8 22:50:49 2001  Christopher Faylor <cgf@cygnus.com>\n \n \t* config/i386/xm-cygwin.h (GET_ENV_PATH_LIST): Eliminate obsolete"}, {"sha": "f5e937182982480ceb2ff185f9a558fd09ede415", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d04363053e586b594f31a5e02ea6c4a5b6e7f7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d04363053e586b594f31a5e02ea6c4a5b6e7f7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=39d04363053e586b594f31a5e02ea6c4a5b6e7f7", "patch": "@@ -118,6 +118,7 @@ extern void ix86_expand_branch PARAMS ((enum rtx_code, rtx));\n extern int ix86_expand_setcc PARAMS ((enum rtx_code, rtx));\n extern int ix86_expand_int_movcc PARAMS ((rtx[]));\n extern int ix86_expand_fp_movcc PARAMS ((rtx[]));\n+extern void x86_initialize_trampoline PARAMS ((rtx, rtx, rtx));\n extern void ix86_split_long_move PARAMS ((rtx[]));\n extern void ix86_split_ashldi PARAMS ((rtx *, rtx));\n extern void ix86_split_ashrdi PARAMS ((rtx *, rtx));"}, {"sha": "c44882781bc32a8784b648ab5088824353fc8118", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d04363053e586b594f31a5e02ea6c4a5b6e7f7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d04363053e586b594f31a5e02ea6c4a5b6e7f7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=39d04363053e586b594f31a5e02ea6c4a5b6e7f7", "patch": "@@ -1704,23 +1704,14 @@ pop{l} %0\"\t\t\t\t\t\t\t\\\n \n /* Length in units of the trampoline for entering a nested function.  */\n \n-#define TRAMPOLINE_SIZE 10\n+#define TRAMPOLINE_SIZE (TARGET_64BIT ? 23 : 10)\n \n /* Emit RTL insns to initialize the variable parts of a trampoline.\n    FNADDR is an RTX for the address of the function's pure code.\n    CXT is an RTX for the static chain value for the function.  */\n \n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  /* Compute offset from the end of the jmp to the target function.  */\t\\\n-  rtx disp = expand_binop (SImode, sub_optab, FNADDR,\t\t\t\\\n-\t\t\t   plus_constant (TRAMP, 10),\t\t\t\\\n-\t\t\t   NULL_RTX, 1, OPTAB_DIRECT);\t\t\t\\\n-  emit_move_insn (gen_rtx_MEM (QImode, TRAMP), GEN_INT (0xb9));\t\t\\\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 1)), CXT); \\\n-  emit_move_insn (gen_rtx_MEM (QImode, plus_constant (TRAMP, 5)), GEN_INT (0xe9));\\\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 6)), disp); \\\n-}\n+   x86_initialize_trampoline (TRAMP, FNADDR, CXT)\n \f\n /* Definitions for register eliminations.\n "}, {"sha": "dd104230d5c77daa09033eb0a539b310dcfd9ef5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d04363053e586b594f31a5e02ea6c4a5b6e7f7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d04363053e586b594f31a5e02ea6c4a5b6e7f7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=39d04363053e586b594f31a5e02ea6c4a5b6e7f7", "patch": "@@ -12882,11 +12882,13 @@\n \n (define_expand \"call\"\n   [(call (match_operand:QI 0 \"\" \"\")\n-\t (match_operand 2 \"\" \"\"))]\n+\t (match_operand 1 \"\" \"\"))\n+   (use (match_operand 2 \"\" \"\"))]\n   ;; Operand 1 not used on the i386.\n   \"\"\n   \"\n {\n+  rtx insn;\n   /* Static functions and indirect calls don't need\n      current_function_uses_pic_offset_table.  */\n   if (flag_pic\n@@ -12898,13 +12900,14 @@\n     XEXP (operands[0], 0) = copy_to_mode_reg (Pmode, XEXP (operands[0], 0));\n   if (TARGET_64BIT && INTVAL (operands[2]) >= 0)\n     {\n-      rtx insn;\n       rtx reg = gen_rtx_REG (QImode, 0);\n       emit_move_insn (reg, operands[2]);\n-      insn = emit_call_insn (gen_call_exp (operands[0], operands[2]));\n+      insn = emit_call_insn (gen_call_exp (operands[0], operands[1]));\n       use_reg (&CALL_INSN_FUNCTION_USAGE (insn), reg);\n       DONE;\n     }\n+   insn = emit_call_insn (gen_call_exp (operands[0], operands[1]));\n+   DONE;\n }\")\n \n (define_expand \"call_exp\"\n@@ -12998,11 +13001,13 @@\n (define_expand \"call_value\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call (match_operand:QI 1 \"\" \"\")\n-\t      (match_operand:SI 3 \"\" \"\")))]\n+\t      (match_operand:SI 2 \"\" \"\")))\n+   (use (match_operand:SI 3 \"\" \"\"))]\n   ;; Operand 2 not used on the i386.\n   \"\"\n   \"\n {\n+  rtx insn;\n   /* Static functions and indirect calls don't need\n      current_function_uses_pic_offset_table.  */\n   if (flag_pic\n@@ -13013,14 +13018,16 @@\n     XEXP (operands[1], 0) = copy_to_mode_reg (Pmode, XEXP (operands[1], 0));\n   if (TARGET_64BIT && INTVAL (operands[3]) >= 0)\n     {\n-      rtx insn;\n       rtx reg = gen_rtx_REG (QImode, 0);\n       emit_move_insn (reg, operands[3]);\n       insn = emit_call_insn (gen_call_value_exp (operands[0], operands[1],\n-\t\t\t\t\t\t operands[3]));\n+\t\t\t\t\t\t operands[2]));\n       use_reg (&CALL_INSN_FUNCTION_USAGE (insn), reg);\n       DONE;\n     }\n+  insn = emit_call_insn (gen_call_value_exp (operands[0], operands[1],\n+\t\t\t\t\t     operands[2]));\n+  DONE;\n }\")\n \n (define_expand \"call_value_exp\""}]}