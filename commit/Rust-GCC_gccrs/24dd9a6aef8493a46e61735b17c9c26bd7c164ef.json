{"sha": "24dd9a6aef8493a46e61735b17c9c26bd7c164ef", "node_id": "C_kwDOANBUbNoAKDI0ZGQ5YTZhZWY4NDkzYTQ2ZTYxNzM1YjE3YzljMjZiZDdjMTY0ZWY", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-12-15T20:33:33Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-12-15T22:28:12Z"}, "message": "BugFix bad range in typechecking of enum ADTTypes\n\nThe type checking over the fields of each variant was using the wrong\niterator causing the type checker to go out of bound in the case where\nthere were more variants than fields within the variant.\n\n```\nterminate called after throwing an instance of 'std::out_of_range'\n  what():  vector::_M_range_check: __n (which is 2) >= this->size() (which is 1)\n\nProgram received signal SIGABRT, Aborted.\n__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50\n50      ../sysdeps/unix/sysv/linux/raise.c: No such file or directory.\n(gdb) bt\n...\n-7  0x000000000119dcfc in std::vector<Rust::TyTy::StructFieldType*, std::allocator<Rust::TyTy::StructFieldType*> >::_M_range_check (this=0x426fb90, __n=2) at /usr/include/c++/9/bits/stl_vector.h:1070\n-8  0x000000000119a2e5 in std::vector<Rust::TyTy::StructFieldType*, std::allocator<Rust::TyTy::StructFieldType*> >::at (this=0x426fb90, __n=2) at /usr/include/c++/9/bits/stl_vector.h:1091\n-9  0x000000000117ead7 in Rust::TyTy::VariantDef::get_field_at_index (this=0x426fb60, index=2) at ../../gccrs/gcc/rust/typecheck/rust-tyty.h:1080\n-10 0x00000000011c7523 in Rust::TyTy::ADTRules::visit (this=0x7fffffffce90, type=...) at ../../gccrs/gcc/rust/typecheck/rust-tyty-rules.h:1050\n-11 0x00000000011b52a4 in Rust::TyTy::ADTType::accept_vis (this=0x4271120, vis=...) at ../../gccrs/gcc/rust/typecheck/rust-tyty.cc:642\n-12 0x00000000011c2d80 in Rust::TyTy::BaseRules::unify (this=0x7fffffffce90, other=0x4271120) at ../../gccrs/gcc/rust/typecheck/rust-tyty-rules.h:85\n-13 0x00000000011b552e in Rust::TyTy::ADTType::unify (this=0x426fe30, other=0x4271120) at ../../gccrs/gcc/rust/typecheck/rust-tyty.cc:670\n-14 0x000000000118e49f in Rust::Resolver::TypeCheckExpr::visit (this=0x7fffffffd070, expr=...) at ../../gccrs/gcc/rust/typecheck/rust-hir-type-check-expr.h:1302\n```", "tree": {"sha": "d14617885960c60ecb777993479bbe967302ec02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d14617885960c60ecb777993479bbe967302ec02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24dd9a6aef8493a46e61735b17c9c26bd7c164ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24dd9a6aef8493a46e61735b17c9c26bd7c164ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24dd9a6aef8493a46e61735b17c9c26bd7c164ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24dd9a6aef8493a46e61735b17c9c26bd7c164ef/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "310968874db1902084012cf767ad0b6e93f028c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/310968874db1902084012cf767ad0b6e93f028c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/310968874db1902084012cf767ad0b6e93f028c2"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "291e59039482ebf310c3b22f9e20fdd54a139166", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24dd9a6aef8493a46e61735b17c9c26bd7c164ef/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24dd9a6aef8493a46e61735b17c9c26bd7c164ef/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=24dd9a6aef8493a46e61735b17c9c26bd7c164ef", "patch": "@@ -1021,8 +1021,8 @@ class ADTCmp : public BaseCmp\n \n \tfor (size_t j = 0; j < a->num_fields (); j++)\n \t  {\n-\t    TyTy::StructFieldType *base_field = a->get_field_at_index (i);\n-\t    TyTy::StructFieldType *other_field = b->get_field_at_index (i);\n+\t    TyTy::StructFieldType *base_field = a->get_field_at_index (j);\n+\t    TyTy::StructFieldType *other_field = b->get_field_at_index (j);\n \n \t    TyTy::BaseType *this_field_ty = base_field->get_field_type ();\n \t    TyTy::BaseType *other_field_ty = other_field->get_field_type ();"}, {"sha": "b483130eb5338c15c5c7ef066fa33dd63b168c73", "filename": "gcc/rust/typecheck/rust-tyty-coercion.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24dd9a6aef8493a46e61735b17c9c26bd7c164ef/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24dd9a6aef8493a46e61735b17c9c26bd7c164ef/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h?ref=24dd9a6aef8493a46e61735b17c9c26bd7c164ef", "patch": "@@ -1031,8 +1031,8 @@ class ADTCoercionRules : public BaseCoercionRules\n \n \tfor (size_t j = 0; j < a->num_fields (); j++)\n \t  {\n-\t    TyTy::StructFieldType *base_field = a->get_field_at_index (i);\n-\t    TyTy::StructFieldType *other_field = b->get_field_at_index (i);\n+\t    TyTy::StructFieldType *base_field = a->get_field_at_index (j);\n+\t    TyTy::StructFieldType *other_field = b->get_field_at_index (j);\n \n \t    TyTy::BaseType *this_field_ty = base_field->get_field_type ();\n \t    TyTy::BaseType *other_field_ty = other_field->get_field_type ();"}, {"sha": "5dc2d2ffda4523dc0b4a34e89e7b3edff6d8fbc1", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24dd9a6aef8493a46e61735b17c9c26bd7c164ef/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24dd9a6aef8493a46e61735b17c9c26bd7c164ef/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=24dd9a6aef8493a46e61735b17c9c26bd7c164ef", "patch": "@@ -1047,8 +1047,8 @@ class ADTRules : public BaseRules\n \n \tfor (size_t j = 0; j < a->num_fields (); j++)\n \t  {\n-\t    TyTy::StructFieldType *base_field = a->get_field_at_index (i);\n-\t    TyTy::StructFieldType *other_field = b->get_field_at_index (i);\n+\t    TyTy::StructFieldType *base_field = a->get_field_at_index (j);\n+\t    TyTy::StructFieldType *other_field = b->get_field_at_index (j);\n \n \t    TyTy::BaseType *this_field_ty = base_field->get_field_type ();\n \t    TyTy::BaseType *other_field_ty = other_field->get_field_type ();"}]}