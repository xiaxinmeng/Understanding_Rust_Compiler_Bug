{"sha": "bce43c0493f65d2589776f0dafa396d5477a84c7", "node_id": "C_kwDOANBUbNoAKGJjZTQzYzA0OTNmNjVkMjU4OTc3NmYwZGFmYTM5NmQ1NDc3YTg0Yzc", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-02-09T16:57:06Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-02-09T16:57:06Z"}, "message": "aarch64: Remove move_lo/hi_quad expanders\n\nThis patch is the second of two to remove the old\nmove_lo/hi_quad expanders and move_hi_quad insns.\n\ngcc/\n\t* config/aarch64/aarch64-simd.md (@aarch64_split_simd_mov<mode>):\n\tUse aarch64_combine instead of move_lo/hi_quad.  Tabify.\n\t(move_lo_quad_<mode>, aarch64_simd_move_hi_quad_<mode>): Delete.\n\t(aarch64_simd_move_hi_quad_be_<mode>, move_hi_quad_<mode>): Delete.\n\t(vec_pack_trunc_<mode>): Take general_operand elements and use\n\taarch64_combine rather than move_lo/hi_quad to combine them.\n\t(vec_pack_trunc_df): Likewise.", "tree": {"sha": "80792e5ba752ed95c4744d0ae6c3b7c01a8b5c61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80792e5ba752ed95c4744d0ae6c3b7c01a8b5c61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bce43c0493f65d2589776f0dafa396d5477a84c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce43c0493f65d2589776f0dafa396d5477a84c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bce43c0493f65d2589776f0dafa396d5477a84c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce43c0493f65d2589776f0dafa396d5477a84c7/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4057266ce5afc1fccd5d4e4971103afaa4be63d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4057266ce5afc1fccd5d4e4971103afaa4be63d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4057266ce5afc1fccd5d4e4971103afaa4be63d4"}], "stats": {"total": 111, "additions": 18, "deletions": 93}, "files": [{"sha": "ef6e772503d5f20ba2d969844d0b96dfc16ad88b", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 18, "deletions": 93, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce43c0493f65d2589776f0dafa396d5477a84c7/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce43c0493f65d2589776f0dafa396d5477a84c7/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=bce43c0493f65d2589776f0dafa396d5477a84c7", "patch": "@@ -272,31 +272,30 @@\n \n (define_expand \"@aarch64_split_simd_mov<mode>\"\n   [(set (match_operand:VQMOV 0)\n-        (match_operand:VQMOV 1))]\n+\t(match_operand:VQMOV 1))]\n   \"TARGET_SIMD\"\n   {\n     rtx dst = operands[0];\n     rtx src = operands[1];\n \n     if (GP_REGNUM_P (REGNO (src)))\n       {\n-        rtx src_low_part = gen_lowpart (<VHALF>mode, src);\n-        rtx src_high_part = gen_highpart (<VHALF>mode, src);\n+\trtx src_low_part = gen_lowpart (<VHALF>mode, src);\n+\trtx src_high_part = gen_highpart (<VHALF>mode, src);\n+\trtx dst_low_part = gen_lowpart (<VHALF>mode, dst);\n \n-        emit_insn\n-          (gen_move_lo_quad_<mode> (dst, src_low_part));\n-        emit_insn\n-          (gen_move_hi_quad_<mode> (dst, src_high_part));\n+\temit_move_insn (dst_low_part, src_low_part);\n+\temit_insn (gen_aarch64_combine<Vhalf> (dst, dst_low_part,\n+\t\t\t\t\t       src_high_part));\n       }\n-\n     else\n       {\n-        rtx dst_low_part = gen_lowpart (<VHALF>mode, dst);\n-        rtx dst_high_part = gen_highpart (<VHALF>mode, dst);\n+\trtx dst_low_part = gen_lowpart (<VHALF>mode, dst);\n+\trtx dst_high_part = gen_highpart (<VHALF>mode, dst);\n \trtx lo = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n \trtx hi = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n-        emit_insn (gen_aarch64_get_half<mode> (dst_low_part, src, lo));\n-        emit_insn (gen_aarch64_get_half<mode> (dst_high_part, src, hi));\n+\temit_insn (gen_aarch64_get_half<mode> (dst_low_part, src, lo));\n+\temit_insn (gen_aarch64_get_half<mode> (dst_high_part, src, hi));\n       }\n     DONE;\n   }\n@@ -1580,69 +1579,6 @@\n ;; What that means, is that the RTL descriptions of the below patterns\n ;; need to change depending on endianness.\n \n-;; Move to the low architectural bits of the register.\n-;; On little-endian this is { operand, zeroes }\n-;; On big-endian this is { zeroes, operand }\n-\n-(define_expand \"move_lo_quad_<mode>\"\n-  [(match_operand:VQMOV 0 \"register_operand\")\n-   (match_operand:<VHALF> 1 \"register_operand\")]\n-  \"TARGET_SIMD\"\n-{\n-  emit_insn (gen_aarch64_combine<Vhalf> (operands[0], operands[1],\n-\t\t\t\t\t CONST0_RTX (<VHALF>mode)));\n-  DONE;\n-}\n-)\n-\n-;; Move operand1 to the high architectural bits of the register, keeping\n-;; the low architectural bits of operand2.\n-;; For little-endian this is { operand2, operand1 }\n-;; For big-endian this is { operand1, operand2 }\n-\n-(define_insn \"aarch64_simd_move_hi_quad_<mode>\"\n-  [(set (match_operand:VQMOV 0 \"register_operand\" \"+w,w\")\n-        (vec_concat:VQMOV\n-          (vec_select:<VHALF>\n-                (match_dup 0)\n-                (match_operand:VQMOV 2 \"vect_par_cnst_lo_half\" \"\"))\n-\t  (match_operand:<VHALF> 1 \"register_operand\" \"w,r\")))]\n-  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n-  \"@\n-   ins\\\\t%0.d[1], %1.d[0]\n-   ins\\\\t%0.d[1], %1\"\n-  [(set_attr \"type\" \"neon_ins\")]\n-)\n-\n-(define_insn \"aarch64_simd_move_hi_quad_be_<mode>\"\n-  [(set (match_operand:VQMOV 0 \"register_operand\" \"+w,w\")\n-        (vec_concat:VQMOV\n-\t  (match_operand:<VHALF> 1 \"register_operand\" \"w,r\")\n-          (vec_select:<VHALF>\n-                (match_dup 0)\n-                (match_operand:VQMOV 2 \"vect_par_cnst_lo_half\" \"\"))))]\n-  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n-  \"@\n-   ins\\\\t%0.d[1], %1.d[0]\n-   ins\\\\t%0.d[1], %1\"\n-  [(set_attr \"type\" \"neon_ins\")]\n-)\n-\n-(define_expand \"move_hi_quad_<mode>\"\n- [(match_operand:VQMOV 0 \"register_operand\")\n-  (match_operand:<VHALF> 1 \"register_operand\")]\n- \"TARGET_SIMD\"\n-{\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n-  if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_aarch64_simd_move_hi_quad_be_<mode> (operands[0],\n-\t\t    operands[1], p));\n-  else\n-    emit_insn (gen_aarch64_simd_move_hi_quad_<mode> (operands[0],\n-\t\t    operands[1], p));\n-  DONE;\n-})\n-\n ;; Narrowing operations.\n \n (define_insn \"aarch64_xtn<mode>_insn_le\"\n@@ -1743,16 +1679,12 @@\n \n (define_expand \"vec_pack_trunc_<mode>\"\n  [(match_operand:<VNARROWD> 0 \"register_operand\")\n-  (match_operand:VDN 1 \"register_operand\")\n-  (match_operand:VDN 2 \"register_operand\")]\n+  (match_operand:VDN 1 \"general_operand\")\n+  (match_operand:VDN 2 \"general_operand\")]\n  \"TARGET_SIMD\"\n {\n   rtx tempreg = gen_reg_rtx (<VDBL>mode);\n-  int lo = BYTES_BIG_ENDIAN ? 2 : 1;\n-  int hi = BYTES_BIG_ENDIAN ? 1 : 2;\n-\n-  emit_insn (gen_move_lo_quad_<Vdbl> (tempreg, operands[lo]));\n-  emit_insn (gen_move_hi_quad_<Vdbl> (tempreg, operands[hi]));\n+  emit_insn (gen_aarch64_vec_concat<mode> (tempreg, operands[1], operands[2]));\n   emit_insn (gen_trunc<Vdbl><Vnarrowd>2 (operands[0], tempreg));\n   DONE;\n })\n@@ -3402,20 +3334,13 @@\n \n (define_expand \"vec_pack_trunc_df\"\n   [(set (match_operand:V2SF 0 \"register_operand\")\n-      (vec_concat:V2SF\n-\t(float_truncate:SF\n-\t    (match_operand:DF 1 \"register_operand\"))\n-\t(float_truncate:SF\n-\t    (match_operand:DF 2 \"register_operand\"))\n-\t  ))]\n+\t(vec_concat:V2SF\n+\t  (float_truncate:SF (match_operand:DF 1 \"general_operand\"))\n+\t  (float_truncate:SF (match_operand:DF 2 \"general_operand\"))))]\n   \"TARGET_SIMD\"\n   {\n     rtx tmp = gen_reg_rtx (V2SFmode);\n-    int lo = BYTES_BIG_ENDIAN ? 2 : 1;\n-    int hi = BYTES_BIG_ENDIAN ? 1 : 2;\n-\n-    emit_insn (gen_move_lo_quad_v2df (tmp, operands[lo]));\n-    emit_insn (gen_move_hi_quad_v2df (tmp, operands[hi]));\n+    emit_insn (gen_aarch64_vec_concatdf (tmp, operands[1], operands[2]));\n     emit_insn (gen_aarch64_float_truncate_lo_v2sf (operands[0], tmp));\n     DONE;\n   }"}]}