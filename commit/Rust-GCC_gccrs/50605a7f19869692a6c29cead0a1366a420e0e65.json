{"sha": "50605a7f19869692a6c29cead0a1366a420e0e65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA2MDVhN2YxOTg2OTY5MmE2YzI5Y2VhZDBhMTM2NmE0MjBlMGU2NQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2012-11-16T18:17:25Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2012-11-16T18:17:25Z"}, "message": "whatis.cc: New file.\n\n\t* testsuite/libstdc++-prettyprinters/whatis.cc: New file.\n\t* testsuite/lib/gdb-test.exp (whatis-test): New proc.\n\t(gdb-test): Handle 'whatis' tests.\n\t(gdb_batch_check): New proc.\n\t(gdb_version_check): Rewrite to use gdb_batch_check.\n\t* python/libstdcxx/v6/printers.py: Import gdb.types.\n\t(FilteringTypePrinter): New class.\n\t(add_one_type_printer, register_type_printers): New functions.\n\t(register_libstdcxx_printers): Call register_type_printers.\n\nFrom-SVN: r193573", "tree": {"sha": "c77f1eede46fec5a355a7b3f04cf72736bb46a4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c77f1eede46fec5a355a7b3f04cf72736bb46a4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50605a7f19869692a6c29cead0a1366a420e0e65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50605a7f19869692a6c29cead0a1366a420e0e65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50605a7f19869692a6c29cead0a1366a420e0e65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50605a7f19869692a6c29cead0a1366a420e0e65/comments", "author": null, "committer": null, "parents": [{"sha": "9bec80b04e250e219245bacb466d71057c0ef829", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bec80b04e250e219245bacb466d71057c0ef829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bec80b04e250e219245bacb466d71057c0ef829"}], "stats": {"total": 443, "additions": 419, "deletions": 24}, "files": [{"sha": "3744f944ebba750adbbb1a7ca7d9e4725d959679", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50605a7f19869692a6c29cead0a1366a420e0e65/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50605a7f19869692a6c29cead0a1366a420e0e65/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=50605a7f19869692a6c29cead0a1366a420e0e65", "patch": "@@ -1,3 +1,15 @@\n+2012-11-16  Tom Tromey  <tromey@redhat.com>\n+\n+\t* testsuite/libstdc++-prettyprinters/whatis.cc: New file.\n+\t* testsuite/lib/gdb-test.exp (whatis-test): New proc.\n+\t(gdb-test): Handle 'whatis' tests.\n+\t(gdb_batch_check): New proc.\n+\t(gdb_version_check): Rewrite to use gdb_batch_check.\n+\t* python/libstdcxx/v6/printers.py: Import gdb.types.\n+\t(FilteringTypePrinter): New class.\n+\t(add_one_type_printer, register_type_printers): New functions.\n+\t(register_libstdcxx_printers): Call register_type_printers.\n+\n 2012-11-15  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/53841"}, {"sha": "294ec4cf3c9187c5dd511a03974691186781a1a4", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50605a7f19869692a6c29cead0a1366a420e0e65/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50605a7f19869692a6c29cead0a1366a420e0e65/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=50605a7f19869692a6c29cead0a1366a420e0e65", "patch": "@@ -26,6 +26,15 @@\n except ImportError:\n     _use_gdb_pp = False\n \n+# Try to install type-printers.\n+_use_type_printing = False\n+try:\n+    import gdb.types\n+    if hasattr(gdb.types, 'TypePrinter'):\n+        _use_type_printing = True\n+except ImportError:\n+    pass\n+\n # Starting with the type ORIG, search for the member type NAME.  This\n # handles searching upward through superclasses.  This is needed to\n # work around http://sourceware.org/bugzilla/show_bug.cgi?id=13615.\n@@ -801,6 +810,97 @@ def __call__(self, val):\n \n libstdcxx_printer = None\n \n+class FilteringTypePrinter(object):\n+    def __init__(self, match, name):\n+        self.match = match\n+        self.name = name\n+        self.enabled = True\n+\n+    class _recognizer(object):\n+        def __init__(self, match, name):\n+            self.match = match\n+            self.name = name\n+            self.type_obj = None\n+\n+        def recognize(self, type_obj):\n+            if type_obj.tag is None:\n+                return None\n+\n+            if self.type_obj is None:\n+                if not self.match in type_obj.tag:\n+                    # Filter didn't match.\n+                    return None\n+                try:\n+                    self.type_obj = gdb.lookup_type(self.name).strip_typedefs()\n+                except:\n+                    pass\n+            if self.type_obj == type_obj:\n+                return self.name\n+            return None\n+\n+    def instantiate(self):\n+        return self._recognizer(self.match, self.name)\n+\n+def add_one_type_printer(obj, match, name):\n+    printer = FilteringTypePrinter(match, 'std::' + name)\n+    gdb.types.register_type_printer(obj, printer)\n+\n+def register_type_printers(obj):\n+    global _use_type_printing\n+\n+    if not _use_type_printing:\n+        return\n+\n+    for pfx in ('', 'w'):\n+        add_one_type_printer(obj, 'basic_string', pfx + 'string')\n+        add_one_type_printer(obj, 'basic_ios', pfx + 'ios')\n+        add_one_type_printer(obj, 'basic_streambuf', pfx + 'streambuf')\n+        add_one_type_printer(obj, 'basic_istream', pfx + 'istream')\n+        add_one_type_printer(obj, 'basic_ostream', pfx + 'ostream')\n+        add_one_type_printer(obj, 'basic_iostream', pfx + 'iostream')\n+        add_one_type_printer(obj, 'basic_stringbuf', pfx + 'stringbuf')\n+        add_one_type_printer(obj, 'basic_istringstream',\n+                                 pfx + 'istringstream')\n+        add_one_type_printer(obj, 'basic_ostringstream',\n+                                 pfx + 'ostringstream')\n+        add_one_type_printer(obj, 'basic_stringstream',\n+                                 pfx + 'stringstream')\n+        add_one_type_printer(obj, 'basic_filebuf', pfx + 'filebuf')\n+        add_one_type_printer(obj, 'basic_ifstream', pfx + 'ifstream')\n+        add_one_type_printer(obj, 'basic_ofstream', pfx + 'ofstream')\n+        add_one_type_printer(obj, 'basic_fstream', pfx + 'fstream')\n+        add_one_type_printer(obj, 'basic_regex', pfx + 'regex')\n+        add_one_type_printer(obj, 'sub_match', pfx + 'csub_match')\n+        add_one_type_printer(obj, 'sub_match', pfx + 'ssub_match')\n+        add_one_type_printer(obj, 'match_results', pfx + 'cmatch')\n+        add_one_type_printer(obj, 'match_results', pfx + 'smatch')\n+        add_one_type_printer(obj, 'regex_iterator', pfx + 'cregex_iterator')\n+        add_one_type_printer(obj, 'regex_iterator', pfx + 'sregex_iterator')\n+        add_one_type_printer(obj, 'regex_token_iterator',\n+                                 pfx + 'cregex_token_iterator')\n+        add_one_type_printer(obj, 'regex_token_iterator',\n+                                 pfx + 'sregex_token_iterator')\n+\n+    # Note that we can't have a printer for std::wstreampos, because\n+    # it shares the same underlying type as std::streampos.\n+    add_one_type_printer(obj, 'fpos', 'streampos')\n+    add_one_type_printer(obj, 'basic_string', 'u16string')\n+    add_one_type_printer(obj, 'basic_string', 'u32string')\n+\n+    for dur in ('nanoseconds', 'microseconds', 'milliseconds',\n+                'seconds', 'minutes', 'hours'):\n+        add_one_type_printer(obj, 'duration', dur)\n+\n+    add_one_type_printer(obj, 'linear_congruential_engine', 'minstd_rand0')\n+    add_one_type_printer(obj, 'linear_congruential_engine', 'minstd_rand')\n+    add_one_type_printer(obj, 'mersenne_twister_engine', 'mt19937')\n+    add_one_type_printer(obj, 'mersenne_twister_engine', 'mt19937_64')\n+    add_one_type_printer(obj, 'subtract_with_carry_engine', 'ranlux24_base')\n+    add_one_type_printer(obj, 'subtract_with_carry_engine', 'ranlux48_base')\n+    add_one_type_printer(obj, 'discard_block_engine', 'ranlux24')\n+    add_one_type_printer(obj, 'discard_block_engine', 'ranlux48')\n+    add_one_type_printer(obj, 'shuffle_order_engine', 'knuth_b')\n+\n def register_libstdcxx_printers (obj):\n     \"Register libstdc++ pretty-printers with objfile Obj.\"\n \n@@ -814,6 +914,8 @@ def register_libstdcxx_printers (obj):\n             obj = gdb\n         obj.pretty_printers.append(libstdcxx_printer)\n \n+    register_type_printers(obj)\n+\n def build_libstdcxx_dictionary ():\n     global libstdcxx_printer\n "}, {"sha": "3434ef2a7ac57d67d60955f84f3accf94b8c55c6", "filename": "libstdc++-v3/testsuite/lib/gdb-test.exp", "status": "modified", "additions": 62, "deletions": 24, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50605a7f19869692a6c29cead0a1366a420e0e65/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50605a7f19869692a6c29cead0a1366a420e0e65/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp?ref=50605a7f19869692a6c29cead0a1366a420e0e65", "patch": "@@ -67,6 +67,13 @@ proc regexp-test {var result} {\n     lappend gdb_tests $var $result 1\n }\n \n+# A test of 'whatis'.  This tests a type rather than a variable.\n+proc whatis-test {var result} {\n+    global gdb_tests\n+\n+    lappend gdb_tests $var $result whatis\n+}\n+\n # Utility for testing variable values using gdb, invoked via dg-final.\n # Tests all tests indicated by note-test and regexp-test.\n #\n@@ -84,6 +91,12 @@ proc gdb-test { marker {selector {}} } {\n \t}\n     }\n \n+    set do_whatis_tests [gdb_batch_check \"python print gdb.type_printers\" \\\n+\t\t\t   \"\\\\\\[\\\\\\]\"]\n+    if {!$do_whatis_tests} {\n+\tsend_log \"skipping 'whatis' tests - gdb too old\"\n+    }\n+\n     # This assumes that we are three frames down from dg-test, and that\n     # it still stores the filename of the testcase in a local variable \"name\".\n     # A cleaner solution would require a new DejaGnu release.\n@@ -109,12 +122,25 @@ proc gdb-test { marker {selector {}} } {\n     puts $fd \"run\"\n \n     set count 0\n-    foreach {var result is_regexp} $gdb_tests {\n-\tputs $fd \"print $var\"\n+    foreach {var result kind} $gdb_tests {\n \tincr count\n \tset gdb_var($count) $var\n \tset gdb_expected($count) $result\n-\tset gdb_is_regexp($count) $is_regexp\n+\tif {$kind == \"whatis\"} {\n+\t    if {$do_whatis_tests} {\n+\t\tset gdb_is_type($count) 1\n+\t\tset gdb_command($count) \"whatis $var\"\n+\t    } else {\n+\t        unsupported \"$testname\"\n+\t        close $fd\n+\t        return\n+\t    }\n+\t} else {\n+\t    set gdb_is_type($count) 0\n+\t    set gdb_is_regexp($count) $kind\n+\t    set gdb_command($count) \"print $var\"\n+\t}\n+\tputs $fd $gdb_command($count)\n     }\n     set gdb_tests {}\n \n@@ -128,28 +154,36 @@ proc gdb-test { marker {selector {}} } {\n \treturn\n     }\n \n+    set test_counter 0\n     remote_expect target [timeout_value] {\n-\t-re {^\\$([0-9]+) = ([^\\n\\r]*)[\\n\\r]+} {\n+\t-re {^(type|\\$([0-9]+)) = ([^\\n\\r]*)[\\n\\r]+} {\n \t    send_log \"got: $expect_out(buffer)\"\n \n-\t    set num $expect_out(1,string)\n-\t    set first $expect_out(2,string)\n-\n-\t    if {$gdb_is_regexp($num)} {\n-\t\tset match [regexp -- $gdb_expected($num) $first]\n+\t    incr test_counter\n+\t    set first $expect_out(3,string)\n+\n+\t    if {$gdb_is_type($test_counter)} {\n+\t\tif {$expect_out(1,string) != \"type\"} {\n+\t\t    error \"gdb failure\"\n+\t\t}\n+\t\tset match [expr {![string compare $first \\\n+\t\t\t\t     $gdb_expected($test_counter)]}]\n+\t    } elseif {$gdb_is_regexp($test_counter)} {\n+\t\tset match [regexp -- $gdb_expected($test_counter) $first]\n \t    } else {\n-\t\tset match [expr {![string compare $first $gdb_expected($num)]}]\n+\t\tset match [expr {![string compare $first \\\n+\t\t\t\t     $gdb_expected($test_counter)]}]\n \t    }\n \n \t    if {$match} {\n-\t\tpass \"$testname print $gdb_var($num)\"\n+\t\tpass \"$testname $gdb_command($test_counter)\"\n \t    } else {\n-\t\tfail \"$testname print $gdb_var($num)\"\n+\t\tfail \"$testname $gdb_command($test_counter)\"\n \t\tverbose \"     got =>$first<=\"\n-\t\tverbose \"expected =>$gdb_expected($num)<=\"\n+\t\tverbose \"expected =>$gdb_expected($test_counter)<=\"\n \t    }\n \n-\t    if {$num == $count} {\n+\t    if {$test_counter == $count} {\n \t\tremote_close target\n \t\treturn\n \t    } else {\n@@ -180,24 +214,18 @@ proc gdb-test { marker {selector {}} } {\n     return\n }\n \n-# Check for a new-enough version of gdb.  The pretty-printer tests\n-# require gdb 7.3, but we don't want to test versions, so instead we\n-# check for the python \"lookup_global_symbol\" method, which is in 7.3\n-# but not earlier versions.\n-# Return 1 if the version is ok, 0 otherwise.\n-proc gdb_version_check {} {\n-    global gdb_version\n-\n+# Invoke gdb with a command and pattern-match the output.\n+proc gdb_batch_check {command pattern} {\n     set gdb_name $::env(GUALITY_GDB_NAME)\n-    set cmd \"$gdb_name -nw -nx -quiet -batch -ex \\\"python print gdb.lookup_global_symbol\\\"\"\n+    set cmd \"$gdb_name -nw -nx -quiet -batch -ex \\\"$command\\\"\"\n     send_log \"Spawning: $cmd\\n\"\n     set res [remote_spawn target \"$cmd\"]\n     if { $res < 0 || $res == \"\" } {\n \treturn 0\n     }\n \n     remote_expect target [timeout_value] {\n-\t-re \"<built-in function lookup_global_symbol>\" {\n+\t-re $pattern {\n \t    return 1\n \t}\n \n@@ -215,3 +243,13 @@ proc gdb_version_check {} {\n     remote_close target\n     return 0\n }\n+\n+# Check for a new-enough version of gdb.  The pretty-printer tests\n+# require gdb 7.3, but we don't want to test versions, so instead we\n+# check for the python \"lookup_global_symbol\" method, which is in 7.3\n+# but not earlier versions.\n+# Return 1 if the version is ok, 0 otherwise.\n+proc gdb_version_check {} {\n+    return [gdb_batch_check \"python print gdb.lookup_global_symbol\" \\\n+\t      \"<built-in function lookup_global_symbol>\"]\n+}"}, {"sha": "c22246c978d46fce2a63a5ac2a4bdb8c4ca6b288", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/whatis.cc", "status": "added", "additions": 243, "deletions": 0, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50605a7f19869692a6c29cead0a1366a420e0e65/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50605a7f19869692a6c29cead0a1366a420e0e65/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis.cc?ref=50605a7f19869692a6c29cead0a1366a420e0e65", "patch": "@@ -0,0 +1,243 @@\n+// { dg-do run }\n+// { dg-options \"-g -O0 -std=gnu++11\" }\n+\n+// Copyright (C) 2011, 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+#include <iostream>\n+#include <regex>\n+\n+template<class T>\n+void\n+placeholder(const T *s)\n+{\n+  std::cout << (void *) s;\n+}\n+\n+template<class T>\n+struct holder\n+{\n+  T *f;\n+};\n+\n+typedef std::basic_string<unsigned char> ustring;\n+\n+// This test is written in a somewhat funny way.\n+// Each type under test is used twice: first, to form a pointer type,\n+// and second, as a template parameter.  This is done to work around\n+// apparent GCC oddities.  The pointer type is needed to ensure that\n+// the typedef in question ends up in the debuginfo; while the\n+// template type is used to ensure that a typedef-less variant is\n+// presented to gdb.\n+\n+std::string *string_ptr;\n+holder<std::string> string_holder;\n+// { dg-final { whatis-test string_holder \"holder<std::string>\" } }\n+std::ios *ios_ptr;\n+holder<std::ios> ios_holder;\n+// { dg-final { whatis-test ios_holder \"holder<std::ios>\" } }\n+std::streambuf *streambuf_ptr;\n+holder<std::streambuf> streambuf_holder;\n+// { dg-final { whatis-test streambuf_holder \"holder<std::streambuf>\" } }\n+std::istream *istream_ptr;\n+holder<std::istream> istream_holder;\n+// { dg-final { whatis-test istream_holder \"holder<std::istream>\" } }\n+std::ostream *ostream_ptr;\n+holder<std::ostream> ostream_holder;\n+// { dg-final { whatis-test ostream_holder \"holder<std::ostream>\" } }\n+std::iostream *iostream_ptr;\n+holder<std::iostream> iostream_holder;\n+// { dg-final { whatis-test iostream_holder \"holder<std::iostream>\" } }\n+std::stringbuf *stringbuf_ptr;\n+holder<std::stringbuf> stringbuf_holder;\n+// { dg-final { whatis-test stringbuf_holder \"holder<std::stringbuf>\" } }\n+std::istringstream *istringstream_ptr;\n+holder<std::istringstream> istringstream_holder;\n+// { dg-final { whatis-test istringstream_holder \"holder<std::istringstream>\" } }\n+std::ostringstream *ostringstream_ptr;\n+holder<std::ostringstream> ostringstream_holder;\n+// { dg-final { whatis-test ostringstream_holder \"holder<std::ostringstream>\" } }\n+std::stringstream *stringstream_ptr;\n+holder<std::stringstream> stringstream_holder;\n+// { dg-final { whatis-test stringstream_holder \"holder<std::stringstream>\" } }\n+std::filebuf *filebuf_ptr;\n+holder<std::filebuf> filebuf_holder;\n+// { dg-final { whatis-test filebuf_holder \"holder<std::filebuf>\" } }\n+std::ifstream *ifstream_ptr;\n+holder<std::ifstream> ifstream_holder;\n+// { dg-final { whatis-test ifstream_holder \"holder<std::ifstream>\" } }\n+std::ofstream *ofstream_ptr;\n+holder<std::ofstream> ofstream_holder;\n+// { dg-final { whatis-test ofstream_holder \"holder<std::ofstream>\" } }\n+std::fstream *fstream_ptr;\n+holder<std::fstream> fstream_holder;\n+// { dg-final { whatis-test fstream_holder \"holder<std::fstream>\" } }\n+std::streampos *streampos_ptr;\n+holder<std::streampos> streampos_holder;\n+// { dg-final { whatis-test streampos_holder \"holder<std::streampos>\" } }\n+std::regex *regex_ptr;\n+holder<std::regex> regex_holder;\n+// { dg-final { whatis-test regex_holder \"holder<std::regex>\" } }\n+std::csub_match *csub_match_ptr;\n+holder<std::csub_match> csub_match_holder;\n+// { dg-final { whatis-test csub_match_holder \"holder<std::csub_match>\" } }\n+std::ssub_match *ssub_match_ptr;\n+holder<std::ssub_match> ssub_match_holder;\n+// { dg-final { whatis-test ssub_match_holder \"holder<std::ssub_match>\" } }\n+std::cmatch *cmatch_ptr;\n+holder<std::cmatch> cmatch_holder;\n+// { dg-final { whatis-test cmatch_holder \"holder<std::cmatch>\" } }\n+std::smatch *smatch_ptr;\n+holder<std::smatch> smatch_holder;\n+// { dg-final { whatis-test smatch_holder \"holder<std::smatch>\" } }\n+std::cregex_iterator *cregex_iterator_ptr;\n+holder<std::cregex_iterator> cregex_iterator_holder;\n+// { dg-final { whatis-test cregex_iterator_holder \"holder<std::cregex_iterator>\" } }\n+std::sregex_iterator *sregex_iterator_ptr;\n+holder<std::sregex_iterator> sregex_iterator_holder;\n+// { dg-final { whatis-test sregex_iterator_holder \"holder<std::sregex_iterator>\" } }\n+std::cregex_token_iterator *cregex_token_iterator_ptr;\n+holder<std::cregex_token_iterator> cregex_token_iterator_holder;\n+// { dg-final { whatis-test cregex_token_iterator_holder \"holder<std::cregex_token_iterator>\" } }\n+std::sregex_token_iterator *sregex_token_iterator_ptr;\n+holder<std::sregex_token_iterator> sregex_token_iterator_holder;\n+// { dg-final { whatis-test sregex_token_iterator_holder \"holder<std::sregex_token_iterator>\" } }\n+std::u16string *u16string_ptr;\n+holder<std::u16string> u16string_holder;\n+// { dg-final { whatis-test u16string_holder \"holder<std::u16string>\" } }\n+std::u32string *u32string_ptr;\n+holder<std::u32string> u32string_holder;\n+// { dg-final { whatis-test u32string_holder \"holder<std::u32string>\" } }\n+std::minstd_rand0 *minstd_rand0_ptr;\n+holder<std::minstd_rand0> minstd_rand0_holder;\n+// { dg-final { whatis-test minstd_rand0_holder \"holder<std::minstd_rand0>\" } }\n+std::minstd_rand *minstd_rand_ptr;\n+holder<std::minstd_rand> minstd_rand_holder;\n+// { dg-final { whatis-test minstd_rand_holder \"holder<std::minstd_rand>\" } }\n+std::mt19937 *mt19937_ptr;\n+holder<std::mt19937> mt19937_holder;\n+// { dg-final { whatis-test mt19937_holder \"holder<std::mt19937>\" } }\n+std::mt19937_64 *mt19937_64_ptr;\n+holder<std::mt19937_64> mt19937_64_holder;\n+// { dg-final { whatis-test mt19937_64_holder \"holder<std::mt19937_64>\" } }\n+std::ranlux24_base *ranlux24_base_ptr;\n+holder<std::ranlux24_base> ranlux24_base_holder;\n+// { dg-final { whatis-test ranlux24_base_holder \"holder<std::ranlux24_base>\" } }\n+std::ranlux48_base *ranlux48_base_ptr;\n+holder<std::ranlux48_base> ranlux48_base_holder;\n+// { dg-final { whatis-test ranlux48_base_holder \"holder<std::ranlux48_base>\" } }\n+std::ranlux24 *ranlux24_ptr;\n+holder<std::ranlux24> ranlux24_holder;\n+// { dg-final { whatis-test ranlux24_holder \"holder<std::ranlux24>\" } }\n+std::ranlux48 *ranlux48_ptr;\n+holder<std::ranlux48> ranlux48_holder;\n+// { dg-final { whatis-test ranlux48_holder \"holder<std::ranlux48>\" } }\n+std::knuth_b *knuth_b_ptr;\n+holder<std::knuth_b> knuth_b_holder;\n+// { dg-final { whatis-test knuth_b_holder \"holder<std::knuth_b>\" } }\n+\n+ustring *ustring_ptr;\n+holder<ustring> ustring_holder;\n+// { dg-final { whatis-test ustring_holder \"holder<std::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >\" } }\n+\n+std::basic_string<signed char> *sstring_ptr;\n+holder< std::basic_string<signed char> > sstring_holder;\n+// { dg-final { whatis-test sstring_holder \"holder<std::basic_string<signed char, std::char_traits<signed char>, std::allocator<signed char> > >\" } }\n+\n+int\n+main()\n+{\n+  placeholder(&ios_ptr);\t\t// Mark SPOT\n+  placeholder(&ios_holder);\n+  placeholder(&string_ptr);\n+  placeholder(&string_holder);\n+  placeholder(&streambuf_ptr);\n+  placeholder(&streambuf_holder);\n+  placeholder(&istream_ptr);\n+  placeholder(&istream_holder);\n+  placeholder(&ostream_ptr);\n+  placeholder(&ostream_holder);\n+  placeholder(&iostream_ptr);\n+  placeholder(&iostream_holder);\n+  placeholder(&stringbuf_ptr);\n+  placeholder(&stringbuf_holder);\n+  placeholder(&istringstream_ptr);\n+  placeholder(&istringstream_holder);\n+  placeholder(&ostringstream_ptr);\n+  placeholder(&ostringstream_holder);\n+  placeholder(&stringstream_ptr);\n+  placeholder(&stringstream_holder);\n+  placeholder(&filebuf_ptr);\n+  placeholder(&filebuf_holder);\n+  placeholder(&ifstream_ptr);\n+  placeholder(&ifstream_holder);\n+  placeholder(&ofstream_ptr);\n+  placeholder(&ofstream_holder);\n+  placeholder(&fstream_ptr);\n+  placeholder(&fstream_holder);\n+  placeholder(&streampos_ptr);\n+  placeholder(&streampos_holder);\n+  placeholder(&regex_ptr);\n+  placeholder(&regex_holder);\n+  placeholder(&csub_match_ptr);\n+  placeholder(&csub_match_holder);\n+  placeholder(&ssub_match_ptr);\n+  placeholder(&ssub_match_holder);\n+  placeholder(&cmatch_ptr);\n+  placeholder(&cmatch_holder);\n+  placeholder(&smatch_ptr);\n+  placeholder(&smatch_holder);\n+  placeholder(&cregex_iterator_ptr);\n+  placeholder(&cregex_iterator_holder);\n+  placeholder(&sregex_iterator_ptr);\n+  placeholder(&sregex_iterator_holder);\n+  placeholder(&cregex_token_iterator_ptr);\n+  placeholder(&cregex_token_iterator_holder);\n+  placeholder(&sregex_token_iterator_ptr);\n+  placeholder(&sregex_token_iterator_holder);\n+  placeholder(&u16string_ptr);\n+  placeholder(&u16string_holder);\n+  placeholder(&u32string_ptr);\n+  placeholder(&u32string_holder);\n+  placeholder(&minstd_rand0_ptr);\n+  placeholder(&minstd_rand0_holder);\n+  placeholder(&minstd_rand_ptr);\n+  placeholder(&minstd_rand_holder);\n+  placeholder(&mt19937_ptr);\n+  placeholder(&mt19937_holder);\n+  placeholder(&mt19937_64_ptr);\n+  placeholder(&mt19937_64_holder);\n+  placeholder(&ranlux24_base_ptr);\n+  placeholder(&ranlux24_base_holder);\n+  placeholder(&ranlux48_base_ptr);\n+  placeholder(&ranlux48_base_holder);\n+  placeholder(&ranlux24_ptr);\n+  placeholder(&ranlux24_holder);\n+  placeholder(&ranlux48_ptr);\n+  placeholder(&ranlux48_holder);\n+  placeholder(&knuth_b_ptr);\n+  placeholder(&knuth_b_holder);\n+  placeholder(&ustring_ptr);\n+  placeholder(&ustring_holder);\n+  placeholder(&sstring_ptr);\n+  placeholder(&sstring_holder);\n+\n+  return 0;\n+}\n+\n+// { dg-final { gdb-test SPOT } }"}]}