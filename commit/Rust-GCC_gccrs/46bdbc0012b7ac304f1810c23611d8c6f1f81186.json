{"sha": "46bdbc0012b7ac304f1810c23611d8c6f1f81186", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZiZGJjMDAxMmI3YWMzMDRmMTgxMGMyMzYxMWQ4YzZmMWY4MTE4Ng==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2006-04-04T00:28:33Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-04-04T00:28:33Z"}, "message": "extend.texi (Function Attributes): Rewrite visibility attribute documentation.\n\n\t* doc/extend.texi (Function Attributes): Rewrite visibility \n\tattribute documentation.\n\t* doc/invoke.texi (C++ Dialect Options): Rewrite\n\t-fvisibility-inlines-hidden documentation to describe something\n\tentirely different, although in practise compatible.\n\t(Code Gen Options): Warn about system headers in -fvisibiltity=\n\tdocumentation.\n\nFrom-SVN: r112653", "tree": {"sha": "984efb9d0ddb3b8465b12df9b092c16d8870c60b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/984efb9d0ddb3b8465b12df9b092c16d8870c60b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46bdbc0012b7ac304f1810c23611d8c6f1f81186", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46bdbc0012b7ac304f1810c23611d8c6f1f81186", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46bdbc0012b7ac304f1810c23611d8c6f1f81186", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46bdbc0012b7ac304f1810c23611d8c6f1f81186/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "493ae9af1b8065a54427cd35cea89cb592dd1e00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493ae9af1b8065a54427cd35cea89cb592dd1e00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/493ae9af1b8065a54427cd35cea89cb592dd1e00"}], "stats": {"total": 116, "additions": 88, "deletions": 28}, "files": [{"sha": "79b0ee52b817c3e199465fbbe87e5cbc99c934cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46bdbc0012b7ac304f1810c23611d8c6f1f81186/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46bdbc0012b7ac304f1810c23611d8c6f1f81186/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46bdbc0012b7ac304f1810c23611d8c6f1f81186", "patch": "@@ -4,6 +4,14 @@\n \n 2006-04-03  Geoffrey Keating  <geoffk@apple.com>\n \n+\t* doc/extend.texi (Function Attributes): Rewrite visibility \n+\tattribute documentation.\n+\t* doc/invoke.texi (C++ Dialect Options): Rewrite\n+\t-fvisibility-inlines-hidden documentation to describe something\n+\tentirely different, although in practise compatible.\n+\t(Code Gen Options): Warn about system headers in -fvisibiltity=\n+\tdocumentation.\n+\n \t* doc/extend.texi (Other Builtins): Document that\n \t__builtin_nan is a compile-time constant only when its argument\n \tis valid."}, {"sha": "a72fb7fb8a158fddbb5efd7200dbb12c58e32893", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 57, "deletions": 21, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46bdbc0012b7ac304f1810c23611d8c6f1f81186/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46bdbc0012b7ac304f1810c23611d8c6f1f81186/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=46bdbc0012b7ac304f1810c23611d8c6f1f81186", "patch": "@@ -2329,49 +2329,85 @@ inline assembly.\n \n @item visibility (\"@var{visibility_type}\")\n @cindex @code{visibility} attribute\n-The @code{visibility} attribute on ELF targets causes the declaration\n-to be emitted with default, hidden, protected or internal visibility.\n+This attribute affects the linkage of the declaration to which it is attached.\n+There are four supported @var{visibility_type} values: default,\n+hidden, protected or internal visibility.\n \n @smallexample\n void __attribute__ ((visibility (\"protected\")))\n f () @{ /* @r{Do something.} */; @}\n int i __attribute__ ((visibility (\"hidden\")));\n @end smallexample\n \n-See the ELF gABI for complete details, but the short story is:\n+The possible values of @var{visibility_type} correspond to the\n+visibility settings in the ELF gABI.\n \n @table @dfn\n @c keep this list of visibilities in alphabetical order.\n \n @item default\n-Default visibility is the normal case for ELF@.  This value is\n-available for the visibility attribute to override other options\n-that may change the assumed visibility of symbols.\n+Default visibility is the normal case for the object file format.\n+This value is available for the visibility attribute to override other\n+options that may change the assumed visibility of entities.\n+\n+On ELF, default visibility means that the declaration is visible to other\n+modules and, in shared libraries, means that the declared entity may be\n+overridden.\n+\n+On Darwin, default visibility means that the declaration is visible to\n+other modules.\n+\n+Default visibility corresponds to ``external linkage'' in the language.\n \n @item hidden\n-Hidden visibility indicates that the symbol will not be placed into\n-the dynamic symbol table, so no other @dfn{module} (executable or\n-shared library) can reference it directly.\n+Hidden visibility indicates that the entity declared will have a new\n+form of linkage, which we'll call ``hidden linkage''.  Two\n+declarations of an object with hidden linkage refer to the same object\n+if they are in the same shared object.\n \n @item internal\n Internal visibility is like hidden visibility, but with additional\n-processor specific semantics.  Unless otherwise specified by the psABI,\n-GCC defines internal visibility to mean that the function is @emph{never}\n-called from another module.  Note that hidden symbols, while they cannot\n-be referenced directly by other modules, can be referenced indirectly via\n-function pointers.  By indicating that a symbol cannot be called from\n-outside the module, GCC may for instance omit the load of a PIC register\n-since it is known that the calling function loaded the correct value.\n+processor specific semantics.  Unless otherwise specified by the\n+psABI, GCC defines internal visibility to mean that a function is\n+@emph{never} called from another module.  Compare this with hidden\n+functions which, while they cannot be referenced directly by other\n+modules, can be referenced indirectly via function pointers.  By\n+indicating that a function cannot be called from outside the module,\n+GCC may for instance omit the load of a PIC register since it is known\n+that the calling function loaded the correct value.\n \n @item protected\n-Protected visibility indicates that the symbol will be placed in the\n-dynamic symbol table, but that references within the defining module\n-will bind to the local symbol.  That is, the symbol cannot be overridden\n-by another module.\n+Protected visibility is like default visibility except that it\n+indicates that references within the defining module will bind to the\n+definition in that module.  That is, the declared entity cannot be\n+overridden by another module.\n \n @end table\n \n-Not all ELF targets support this attribute.\n+All visibilities are supported on many, but not all, ELF targets\n+(supported when the assembler supports the @samp{.visibility}\n+pseudo-op).  Default visibility is supported everywhere.  Hidden\n+visibility is supported on Darwin targets.\n+\n+The visibility attribute should be applied only to declarations which\n+would otherwise have external linkage.  The attribute should be applied\n+consistently, so that the same entity should not be declared with\n+different settings of the attribute.\n+\n+In C++, the visibility attribute applies to types as well as functions\n+and objects, because in C++ types have linkage.  There are some bugs\n+in the C++ support for this flag, for example a template which has a\n+hidden type as a parameter is not properly hidden.\n+@c bugzilla 26612\n+\n+In C++, you can mark member functions and static member variables of a\n+class with the visibility attribute.  This is useful if if you know a\n+particular method or static member variable should only be used from\n+one shared object; then you can mark it hidden while the rest of the\n+class has default visibility.  Care must be taken to avoid breaking\n+the One Definition Rule; for example, it is not useful to mark a\n+method which is defined inside a class definition as hidden without\n+marking the whole class as hidden.\n \n @item warn_unused_result\n @cindex @code{warn_unused_result} attribute"}, {"sha": "ede037bd1b4715e2533e76a2d448f8c09b167c26", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46bdbc0012b7ac304f1810c23611d8c6f1f81186/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46bdbc0012b7ac304f1810c23611d8c6f1f81186/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=46bdbc0012b7ac304f1810c23611d8c6f1f81186", "patch": "@@ -1598,17 +1598,27 @@ if the runtime routine is not available.\n \n @item -fvisibility-inlines-hidden\n @opindex fvisibility-inlines-hidden\n-Causes all inlined methods to be marked with\n+This switch declares that the user does not attempt to compare\n+pointers to inline methods where the addresses of the two functions\n+were taken in different shared objects.\n+\n+The effect of this is that GCC may, effectively, mark inline methods with\n @code{__attribute__ ((visibility (\"hidden\")))} so that they do not\n appear in the export table of a DSO and do not require a PLT indirection\n when used within the DSO@.  Enabling this option can have a dramatic effect\n on load and link times of a DSO as it massively reduces the size of the\n-dynamic export table when the library makes heavy use of templates.  While\n-it can cause bloating through duplication of code within each DSO where\n-it is used, often the wastage is less than the considerable space occupied\n-by a long symbol name in the export table which is typical when using\n-templates and namespaces.  For even more savings, combine with the\n-@option{-fvisibility=hidden} switch.\n+dynamic export table when the library makes heavy use of templates.\n+\n+The behaviour of this switch is not quite the same as marking the\n+methods as hidden directly.  Normally if there is a class with default\n+visibility which has a hidden method, the effect of this is that the\n+method must be defined in only one shared object.  This switch does\n+not have this restriction.\n+\n+You may mark a method as having a visibility explicitly to negate the\n+effect of the switch for that method.  For example, if you do want to\n+compare pointers to a particular inline method, you might mark it as\n+having default visibility.\n \n @item -fno-weak\n @opindex fno-weak\n@@ -13448,6 +13458,12 @@ abundantly clear also aids readability and self-documentation of the code.\n Note that due to ISO C++ specification requirements, operator new and\n operator delete must always be of default visibility.\n \n+Be aware that headers from outside your project, in particular system\n+headers and headers from any other library you use, may not be\n+expecting to be compiled with visibility other than the default.  You\n+may need to explicitly say @samp{#pragma GCC visibility push(default)}\n+before including any such headers.\n+\n An overview of these techniques, their benefits and how to use them\n is at @w{@uref{http://gcc.gnu.org/wiki/Visibility}}.\n "}]}