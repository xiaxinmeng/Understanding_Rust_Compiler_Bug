{"sha": "2dd76960886e196bbc8efd5c3d3a01a22fa0da0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRkNzY5NjA4ODZlMTk2YmJjOGVmZDVjM2QzYTAxYTIyZmEwZGEwYw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-03-14T22:29:38Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-03-14T22:29:38Z"}, "message": "contrib.texi, [...]: Capitalize \"gcc\", \"g++\" and \"g77\" or mark up with appropriate markup.\n\n\t* doc/contrib.texi, doc/extend.texi, doc/gcov.texi,\n\tdoc/install.texi, doc/invoke.texi, doc/makefile.texi,\n\tdoc/sourcebuild.texi, doc/tm.texi, doc/trouble.texi: Capitalize\n\t\"gcc\", \"g++\" and \"g77\" or mark up with appropriate markup.  Adjust\n\twording and grammar.\n\nFrom-SVN: r79482", "tree": {"sha": "27a0ce3bcefdf8b6512c2f5a5a795569bc3cf82d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27a0ce3bcefdf8b6512c2f5a5a795569bc3cf82d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae2bcd98fa6d0e389638e2c3cf4cf8a6c79809b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae2bcd98fa6d0e389638e2c3cf4cf8a6c79809b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae2bcd98fa6d0e389638e2c3cf4cf8a6c79809b4"}], "stats": {"total": 110, "additions": 59, "deletions": 51}, "files": [{"sha": "980e73092e2eb3da56722ddde55acd64582c3acb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2dd76960886e196bbc8efd5c3d3a01a22fa0da0c", "patch": "@@ -1,3 +1,11 @@\n+2004-03-14  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* doc/contrib.texi, doc/extend.texi, doc/gcov.texi,\n+\tdoc/install.texi, doc/invoke.texi, doc/makefile.texi,\n+\tdoc/sourcebuild.texi, doc/tm.texi, doc/trouble.texi: Capitalize\n+\t\"gcc\", \"g++\" and \"g77\" or mark up with appropriate markup.  Adjust\n+\twording and grammar.\n+\n 2004-03-14  Roger Sayle  <roger@eyesopen.com>\n \n \t* alias.c (get_alias_set): Replace calls via (*lang_hooks.foo) ()"}, {"sha": "c07f26587062b7dc1f1bbda24a7e974ab76d4a13", "filename": "gcc/doc/contrib.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2Fdoc%2Fcontrib.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2Fdoc%2Fcontrib.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcontrib.texi?ref=2dd76960886e196bbc8efd5c3d3a01a22fa0da0c", "patch": "@@ -197,7 +197,7 @@ DJ Delorie for the DJGPP port, build and libiberty maintenance, and\n various bug fixes.\n \n @item\n-Gabriel Dos Reis for contributions to g++, contributions and\n+Gabriel Dos Reis for contributions to G++, contributions and\n maintenance of GCC diagnostics infrastructure, libstdc++-v3,\n including valarray<>, complex<>, maintaining the numerics library\n (including that pesky <limits> :-) and keeping up-to-date anything\n@@ -319,7 +319,7 @@ fixes.\n Dara Hazeghi for wading through myriads of target-specific bug reports.\n \n @item\n-Kate Hedstrom for staking the g77 folks with an initial testsuite.\n+Kate Hedstrom for staking the G77 folks with an initial testsuite.\n \n @item\n Richard Henderson for his ongoing SPARC, alpha, ia32, and ia64 work, loop\n@@ -401,7 +401,7 @@ Geoffrey Keating for his ongoing work to make the PPC work for GNU/Linux\n and his automatic regression tester.\n \n @item\n-Brendan Kehoe for his ongoing work with g++ and for a lot of early work\n+Brendan Kehoe for his ongoing work with G++ and for a lot of early work\n in just about every part of libstdc++.\n \n @item\n@@ -437,7 +437,7 @@ Thomas Koenig for various bug fixes.\n Bruce Korb for the new and improved fixincludes code.\n \n @item\n-Benjamin Kosnik for his g++ work and for leading the libstdc++-v3 effort.\n+Benjamin Kosnik for his G++ work and for leading the libstdc++-v3 effort.\n \n @item\n Charles LaBrec contributed the support for the Integrated Solutions\n@@ -527,7 +527,7 @@ powerpc, haifa, ECOFF debug support, and other assorted hacking.\n \n @item\n Jason Merrill for his direction via the steering committee and leading\n-the g++ effort.\n+the G++ effort.\n \n @item\n David Miller for his direction via the steering committee, lots of\n@@ -778,7 +778,7 @@ testsuite entries.\n Brad Spencer for contributions to the GLIBCPP_FORCE_NEW technique.\n \n @item\n-Richard Stallman, for writing the original gcc and launching the GNU project.\n+Richard Stallman, for writing the original GCC and launching the GNU project.\n \n @item\n Jan Stein of the Chalmers Computer Society provided support for\n@@ -797,7 +797,7 @@ Graham Stott for various infrastructure improvements.\n John Stracke for his Java HTTP protocol fixes.\n \n @item\n-Mike Stump for his Elxsi port, g++ contributions over the years and more\n+Mike Stump for his Elxsi port, G++ contributions over the years and more\n recently his vxworks contributions\n \n @item"}, {"sha": "79b0a880a2227db8fe2d2174dbd3ac996e4f7f33", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2dd76960886e196bbc8efd5c3d3a01a22fa0da0c", "patch": "@@ -1769,7 +1769,7 @@ struct point ptarray[10] = @{ [2].y = yv2, [2].x = xv2, [0].x = xv0 @};\n If the same field is initialized multiple times, it will have value from\n the last initialization.  If any such overridden initialization has\n side-effect, it is unspecified whether the side-effect happens or not.\n-Currently, gcc will discard them and issue a warning.\n+Currently, GCC will discard them and issue a warning.\n \n @node Case Ranges\n @section Case Ranges\n@@ -2323,11 +2323,11 @@ by another module.\n @item internal\n Internal visibility is like hidden visibility, but with additional\n processor specific semantics.  Unless otherwise specified by the psABI,\n-gcc defines internal visibility to mean that the function is @emph{never}\n+GCC defines internal visibility to mean that the function is @emph{never}\n called from another module.  Note that hidden symbols, while they cannot\n be referenced directly by other modules, can be referenced indirectly via\n function pointers.  By indicating that a symbol cannot be called from\n-outside the module, gcc may for instance omit the load of a PIC register\n+outside the module, GCC may for instance omit the load of a PIC register\n since it is known that the calling function loaded the correct value.\n @end table\n \n@@ -4657,13 +4657,13 @@ A floating point value, as wide as a DI mode integer, usually 64 bits.\n @end table\n \n Specifying a combination that is not valid for the current architecture\n-will cause gcc to synthesize the instructions using a narrower mode.\n+will cause GCC to synthesize the instructions using a narrower mode.\n For example, if you specify a variable of type @code{V4SI} and your\n-architecture does not allow for this specific SIMD type, gcc will\n+architecture does not allow for this specific SIMD type, GCC will\n produce code that uses 4 @code{SIs}.\n \n The types defined in this manner can be used with a subset of normal C\n-operations.  Currently, gcc will allow using the following operators\n+operations.  Currently, GCC will allow using the following operators\n on these types: @code{+, -, *, /, unary minus, ^, |, &, ~}@.\n \n The operations behave like C++ @code{valarrays}.  Addition is defined as\n@@ -7734,7 +7734,7 @@ an rvalue.\n @cindex restricted references\n @cindex restricted this pointer\n \n-As with gcc, g++ understands the C99 feature of restricted pointers,\n+As with the C front end, G++ understands the C99 feature of restricted pointers,\n specified with the @code{__restrict__}, or @code{__restrict} type\n qualifier.  Because you cannot compile C++ by specifying the @option{-std=c99}\n language flag, @code{restrict} is not a keyword in C++.\n@@ -8014,11 +8014,11 @@ compiled separately.\n @end table\n \n When used with GNU ld version 2.8 or later on an ELF system such as\n-GNU/Linux or Solaris 2, or on Microsoft Windows, g++ supports the\n-Borland model.  On other systems, g++ implements neither automatic\n+GNU/Linux or Solaris 2, or on Microsoft Windows, G++ supports the\n+Borland model.  On other systems, G++ implements neither automatic\n model.\n \n-A future version of g++ will support a hybrid model whereby the compiler\n+A future version of G++ will support a hybrid model whereby the compiler\n will emit any instantiations for which the template definition is\n included in the compile, and store template definitions and\n instantiation context information into the object file for the rest.\n@@ -8089,7 +8089,7 @@ compile it without @option{-fno-implicit-templates} so you get all of the\n instances required by your explicit instantiations (but not by any\n other files) without having to specify them as well.\n \n-g++ has extended the template instantiation syntax given in the ISO\n+G++ has extended the template instantiation syntax given in the ISO\n standard to allow forward declaration of explicit instantiations\n (with @code{extern}), instantiation of the compiler support data for a\n template class (i.e.@: the vtable) without instantiating any of its\n@@ -8104,7 +8104,7 @@ static template class Foo<int>;\n @end smallexample\n \n @item\n-Do nothing.  Pretend g++ does implement automatic instantiation\n+Do nothing.  Pretend G++ does implement automatic instantiation\n management.  Code written for the Borland model will work fine, but\n each translation unit will contain instances of each of the templates it\n uses.  In a large program, this can lead to an unacceptable amount of code\n@@ -8306,10 +8306,10 @@ that are now deprecated:\n @table @code\n @item -fexternal-templates\n @itemx -falt-external-templates\n-These are two of the many ways for g++ to implement template\n+These are two of the many ways for G++ to implement template\n instantiation.  @xref{Template Instantiation}.  The C++ standard clearly\n defines how template definitions have to be organized across\n-implementation units.  g++ has an implicit instantiation mechanism that\n+implementation units.  G++ has an implicit instantiation mechanism that\n should work just fine for standard-conforming code.\n \n @item -fstrict-prototype\n@@ -8321,20 +8321,20 @@ it is required for backwards compatibility @xref{Backwards Compatibility}.\n @end table\n \n The named return value extension has been deprecated, and is now\n-removed from g++.\n+removed from G++.\n \n The use of initializer lists with new expressions has been deprecated,\n-and is now removed from g++.\n+and is now removed from G++.\n \n Floating and complex non-type template parameters have been deprecated,\n-and are now removed from g++.\n+and are now removed from G++.\n \n The implicit typename extension has been deprecated and is now\n-removed from g++.\n+removed from G++.\n \n The use of default arguments in function pointers, function typedefs and\n and other places where they are not permitted by the standard is\n-deprecated and will be removed from a future version of g++.\n+deprecated and will be removed from a future version of G++.\n \n @node Backwards Compatibility\n @section Backwards Compatibility"}, {"sha": "cd47f68fadca890997357eceaa1d31a6f20db127", "filename": "gcc/doc/gcov.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2Fdoc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2Fdoc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.texi?ref=2dd76960886e196bbc8efd5c3d3a01a22fa0da0c", "patch": "@@ -339,7 +339,7 @@ the execution counts for individual blocks that end on that line. After each\n block, the branch and call counts of the block will be shown, if the\n @option{-b} option is given.\n \n-Because of the way gcc instruments calls, a call count can be shown\n+Because of the way GCC instruments calls, a call count can be shown\n after a line with no individual blocks.\n As you can see, line 13 contains a basic block that was not executed.\n "}, {"sha": "48e233b2b929af9d6c51e3e550fc0766da1b588e", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=2dd76960886e196bbc8efd5c3d3a01a22fa0da0c", "patch": "@@ -884,7 +884,7 @@ On some systems, this is the default.\n \n In general, the best (and, in many cases, the only known) threading\n model available will be configured for use.  Beware that on some\n-systems, gcc has not been taught what threading models are generally\n+systems, GCC has not been taught what threading models are generally\n available for the system.  In this case, @option{--enable-threads} is an\n alias for @option{--enable-threads=single}.\n \n@@ -1172,7 +1172,7 @@ will be run on these files to make them compatible with GCC.\n \n @item --without-headers\n Tells GCC not use any target headers from a libc when building a cross\n-compiler.  When crossing to GNU/Linux, you need the headers so gcc\n+compiler.  When crossing to GNU/Linux, you need the headers so GCC\n can build the exception handling for libgcc.\n See @uref{http://www.objsw.com/CrossGCC/,,CrossGCC} for more information\n on this option.\n@@ -1908,7 +1908,7 @@ Output from running @file{@var{srcdir}/config.guess}.  Do not send us\n that file itself, just the one-line output from running it.\n \n @item\n-The output of @samp{gcc -v} for your newly installed gcc.\n+The output of @samp{gcc -v} for your newly installed @command{gcc}.\n This tells us which version of GCC you built and the options you passed to\n configure.\n "}, {"sha": "910dfc27aeeda2d12c64f4a87e36ab73fec947e9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2dd76960886e196bbc8efd5c3d3a01a22fa0da0c", "patch": "@@ -2655,7 +2655,7 @@ constant suffixes.  (Traditional C does support the @samp{L} suffix on integer\n constants.)  Note, these suffixes appear in macros defined in the system\n headers of most modern systems, e.g.@: the @samp{_MIN}/@samp{_MAX} macros in @code{<limits.h>}.\n Use of these macros in user code might normally lead to spurious\n-warnings, however gcc's integrated preprocessor has enough context to\n+warnings, however GCC's integrated preprocessor has enough context to\n avoid warning in these cases.\n \n @item\n@@ -2704,7 +2704,7 @@ Use of ISO C style function definitions.  This warning intentionally is\n because these ISO C features will appear in your code when using\n libiberty's traditional C compatibility macros, @code{PARAMS} and\n @code{VPARAMS}.  This warning is also bypassed for nested functions\n-because that feature is already a gcc extension and thus not relevant to\n+because that feature is already a GCC extension and thus not relevant to\n traditional C compatibility.\n @end itemize\n \n@@ -3522,12 +3522,12 @@ gcc -nostdlib @var{files}@dots{} `gcc -print-libgcc-file-name`\n @item -print-search-dirs\n @opindex print-search-dirs\n Print the name of the configured installation directory and a list of\n-program and library directories gcc will search---and don't do anything else.\n+program and library directories @command{gcc} will search---and don't do anything else.\n \n-This is useful when gcc prints the error message\n+This is useful when @command{gcc} prints the error message\n @samp{installation problem, cannot exec cpp0: No such file or directory}.\n To resolve this you either need to put @file{cpp0} and the other compiler\n-components where gcc expects to find them, or you can set the environment\n+components where @command{gcc} expects to find them, or you can set the environment\n variable @env{GCC_EXEC_PREFIX} to the directory where you installed them.\n Don't forget the trailing '/'.\n @xref{Environment Variables}.\n@@ -3762,7 +3762,7 @@ Enabled at level @option{-O3}.\n \n @item -finline-limit=@var{n}\n @opindex finline-limit\n-By default, gcc limits the size of functions that can be inlined.  This flag\n+By default, GCC limits the size of functions that can be inlined.  This flag\n allows the control of this limit for functions that are explicitly marked as\n inline (i.e., marked with the inline keyword or defined within the class\n definition in c++).  @var{n} is the size of functions that can be inlined in\n@@ -4171,7 +4171,7 @@ other, a few use both.\n @opindex fno-guess-branch-probability\n Do not guess branch probabilities using a randomized model.\n \n-Sometimes gcc will opt to use a randomized model to guess branch\n+Sometimes GCC will opt to use a randomized model to guess branch\n probabilities, when none are available from either profiling feedback\n (@option{-fprofile-arcs}) or @samp{__builtin_expect}.  This means that\n different runs of the compiler on the same program may produce different\n@@ -4470,7 +4470,7 @@ The default is @option{-fno-rounding-math}.\n \n This option is experimental and does not currently guarantee to\n disable all GCC optimizations that are affected by rounding mode.\n-Future versions of gcc may provide finer control of this setting\n+Future versions of GCC may provide finer control of this setting\n using C99's @code{FENV_ACCESS} pragma.  This command line option\n will be used to specify the default state for @code{FENV_ACCESS}.\n \n@@ -4714,7 +4714,7 @@ needlessly consume memory and resources.\n \n @item max-inline-insns-single\n Several parameters control the tree inliner used in gcc.\n-This number sets the maximum number of instructions (counted in gcc's\n+This number sets the maximum number of instructions (counted in GCC's\n internal representation) in a single function that the tree inliner\n will consider for inlining.  This only affects functions declared\n inline and methods implemented in a class declaration (C++).\n@@ -8084,7 +8084,7 @@ call any such function.  If called, the function must take the same\n arguments as the common @code{_flush_func()}, that is, the address of the\n memory range for which the cache is being flushed, the size of the\n memory range, and the number 3 (to flush both caches).  The default\n-depends on the target gcc was configured for, but commonly is either\n+depends on the target GCC was configured for, but commonly is either\n @samp{_flush_func} or @samp{__cpu_flush}.\n \n @item -mbranch-likely\n@@ -8235,7 +8235,7 @@ This is the default choice for the x86-64 compiler.\n Attempt to utilize both instruction sets at once.  This effectively double the\n amount of available registers and on chips with separate execution units for\n 387 and SSE the execution resources too.  Use this option with care, as it is\n-still experimental, because the gcc register allocator does not model separate\n+still experimental, because the GCC register allocator does not model separate\n functional units well resulting in instable performance.\n @end table\n \n@@ -8461,7 +8461,7 @@ on thread-safe exception handling must compile and link all code with the\n @opindex mno-align-stringops\n Do not align destination of inlined string operations.  This switch reduces\n code size and improves performance in case the destination is already aligned,\n-but gcc don't know about it.\n+but GCC doesn't know about it.\n \n @item -minline-all-stringops\n @opindex minline-all-stringops\n@@ -8666,7 +8666,7 @@ building a shared library.  It is the default when GCC is configured,\n explicitly or implicitly, with the GNU linker.  This option does not\n have any affect on which ld is called, it only changes what parameters\n are passed to that ld.  The ld that is called is determined by the\n-@option{--with-ld} configure option, gcc's program search path, and\n+@option{--with-ld} configure option, GCC's program search path, and\n finally by the user's @env{PATH}.  The linker used by GCC can be printed\n using @samp{which `gcc -print-prog-name=ld`}.\n \n@@ -8678,7 +8678,7 @@ links.  It is the default when GCC is configured, explicitly or\n implicitly, with the HP linker.  This option does not have any affect on\n which ld is called, it only changes what parameters are passed to that\n ld.  The ld that is called is determined by the @option{--with-ld}\n-configure option, gcc's program search path, and finally by the user's\n+configure option, GCC's program search path, and finally by the user's\n @env{PATH}.  The linker used by GCC can be printed using @samp{which\n `gcc -print-prog-name=ld`}.\n "}, {"sha": "4e9121455d7a214616ba943d44c6ada4b952026a", "filename": "gcc/doc/makefile.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2Fdoc%2Fmakefile.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2Fdoc%2Fmakefile.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmakefile.texi?ref=2dd76960886e196bbc8efd5c3d3a01a22fa0da0c", "patch": "@@ -71,7 +71,7 @@ Note that running the testsuite may require additional tools be\n installed, such as TCL or dejagnu.\n \n @item bootstrap\n-Builds gcc three times---once with the native compiler, once with the\n+Builds GCC three times---once with the native compiler, once with the\n native-built compiler it just built, and once with the compiler it built\n the second time.  In theory, the last two should produce the same\n results, which @samp{make compare} can check.  Each step of this process"}, {"sha": "12f40502d77d66806efcd22295949350425c5170", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=2dd76960886e196bbc8efd5c3d3a01a22fa0da0c", "patch": "@@ -1133,7 +1133,7 @@ about a specific optimization:\n \n @table @code\n @item tool\n-tool being tested, e.g., gcc\n+tool being tested, e.g., @command{gcc}\n \n @item profile_option\n options used to generate profile data"}, {"sha": "f78b9621c1fae02df607166f08c2ab550a514e1a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=2dd76960886e196bbc8efd5c3d3a01a22fa0da0c", "patch": "@@ -3299,7 +3299,7 @@ See the PowerPC's SPE target for an example.\n \n Define this macro if the target's representation for dwarf registers\n used in .eh_frame or .debug_frame is different from that used in other\n-debug info sections.  Given a gcc hard register number, this macro\n+debug info sections.  Given a GCC hard register number, this macro\n should return the .eh_frame register number.  The default is\n @code{DBX_REGISTER_NUMBER (@var{regno})}.\n \n@@ -3308,7 +3308,7 @@ should return the .eh_frame register number.  The default is\n @defmac DWARF2_FRAME_REG_OUT (@var{regno}, @var{for_eh})\n \n Define this macro to map register numbers held in the call frame info\n-that gcc has collected using @code{DWARF_FRAME_REGNUM} to those that\n+that GCC has collected using @code{DWARF_FRAME_REGNUM} to those that\n should be output in .debug_frame (@code{@var{for_eh}} is zero) and\n .eh_frame (@code{@var{for_eh}} is nonzero).  The default is to \n return @code{@var{regno}}.\n@@ -4659,7 +4659,7 @@ Here is an explanation of implicit calls to library routines.\n @defmac DECLARE_LIBRARY_RENAMES\n This macro, if defined, should expand to a piece of C code that will get\n expanded when compiling functions for libgcc.a.  It can be used to\n-provide alternate names for gcc's internal library functions if there\n+provide alternate names for GCC's internal library functions if there\n are ABI-mandated names that the compiler should provide.\n @end defmac\n \n@@ -8331,7 +8331,7 @@ target specific attribute attached to it, it will not be inlined.\n @cindex MIPS coprocessor-definition macros\n \n The MIPS specification allows MIPS implementations to have as many as 4\n-coprocessors, each with as many as 32 private registers.  gcc supports\n+coprocessors, each with as many as 32 private registers.  GCC supports\n accessing these registers and transferring values between the registers\n and memory using asm-ized variables.  For example:\n "}, {"sha": "b5785360fefea31f8b0e3ac71bed884374e8225c", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd76960886e196bbc8efd5c3d3a01a22fa0da0c/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=2dd76960886e196bbc8efd5c3d3a01a22fa0da0c", "patch": "@@ -1113,7 +1113,7 @@ unspecified whether @samp{Base::operator=} is called more than once when\n the implicit copy-assignment for Derived objects is invoked (as it is\n inside @samp{func} in the example).\n \n-g++ implements the ``intuitive'' algorithm for copy-assignment: assign all\n+G++ implements the ``intuitive'' algorithm for copy-assignment: assign all\n direct bases, then assign all members.  In that algorithm, the virtual\n base subobject can be encountered more than once.  In the example, copying\n proceeds in the following order: @samp{val}, @samp{name} (via"}]}