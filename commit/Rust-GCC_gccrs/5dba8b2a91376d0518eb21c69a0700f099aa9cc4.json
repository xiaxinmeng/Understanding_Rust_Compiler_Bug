{"sha": "5dba8b2a91376d0518eb21c69a0700f099aa9cc4", "node_id": "C_kwDOANBUbNoAKDVkYmE4YjJhOTEzNzZkMDUxOGViMjFjNjlhMDcwMGYwOTlhYTljYzQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-17T06:50:22Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-18T07:03:52Z"}, "message": "[PR106831] Avoid propagating long doubles that may have multiple representations.\n\nLong doubles are tricky when it comes to considering singletons\nbecause small numbers and +-INF can have multiple representations for\nthe same number.  So we need to be very careful not to treat those as\nsingletons, lest they be incorrectly propagated by VRP.  This is\nsimilar to the -0.0 and +0.0 duality.\n\nIn long doubles +INF can be represented with +INF in the MSB and\neither -0.0 or +0.0 in the LSB.  Similarly for numbers that are exactly\nrepresentable in DF.  For example, 1.0 can be represented as either\n(1.0, +0.0) or (1.0, -0.0).\n\nThis patch avoids treating these numbers as singletons.\n\nNote that NANs in long double format have a LSB of don't care, but\nthis is irrelevant for singleton_p, because NANs are never considered\nsingletons.  Also, internally in the frange we store NANs as a pair of\nboolean flags indicating whether they are +NAN or -NAN, so we don't need\nany special treatment here for comparing range equality etc.  We never\nsee anything but the boolean flags.\n\n\tPR middle-end/106831\n\ngcc/ChangeLog:\n\n\t* value-range.cc (frange::singleton_p): Avoid propagating long\n\tdoubles that may have multiple representations.", "tree": {"sha": "783d84e60870c1357afa544bbec6eb2401a0767a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/783d84e60870c1357afa544bbec6eb2401a0767a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dba8b2a91376d0518eb21c69a0700f099aa9cc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dba8b2a91376d0518eb21c69a0700f099aa9cc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dba8b2a91376d0518eb21c69a0700f099aa9cc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dba8b2a91376d0518eb21c69a0700f099aa9cc4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "917461478d3bb733a64bc21876811d017c555b3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917461478d3bb733a64bc21876811d017c555b3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/917461478d3bb733a64bc21876811d017c555b3c"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "67d5d7fa90fa818d9b7a29f8d09f1aed4fe128fb", "filename": "gcc/value-range.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dba8b2a91376d0518eb21c69a0700f099aa9cc4/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dba8b2a91376d0518eb21c69a0700f099aa9cc4/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=5dba8b2a91376d0518eb21c69a0700f099aa9cc4", "patch": "@@ -639,6 +639,21 @@ frange::singleton_p (tree *result) const\n       if (HONOR_NANS (m_type) && maybe_isnan ())\n \treturn false;\n \n+      if (MODE_COMPOSITE_P (TYPE_MODE (m_type)))\n+\t{\n+\t  // For IBM long doubles, if the value is +-Inf or is exactly\n+\t  // representable in double, the other double could be +0.0\n+\t  // or -0.0.  Since this means there is more than one way to\n+\t  // represent a value, return false to avoid propagating it.\n+\t  // See libgcc/config/rs6000/ibm-ldouble-format for details.\n+\t  if (real_isinf (&m_min))\n+\t    return false;\n+\t  REAL_VALUE_TYPE r;\n+\t  real_convert (&r, DFmode, &m_min);\n+\t  if (real_identical (&r, &m_min))\n+\t    return false;\n+\t}\n+\n       if (result)\n \t*result = build_real (m_type, m_min);\n       return true;"}]}