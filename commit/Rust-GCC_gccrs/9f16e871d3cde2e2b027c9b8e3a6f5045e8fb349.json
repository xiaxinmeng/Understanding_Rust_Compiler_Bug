{"sha": "9f16e871d3cde2e2b027c9b8e3a6f5045e8fb349", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYxNmU4NzFkM2NkZTJlMmIwMjdjOWI4ZTNhNmY1MDQ1ZThmYjM0OQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-01-05T00:36:26Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-01-05T00:36:26Z"}, "message": "cfgcleanup.c: Include tm_p.h\n\n\t* cfgcleanup.c: Include tm_p.h\n\t(mark_effect): Fix handling of hard register; fix handling of SET\n\nFrom-SVN: r48553", "tree": {"sha": "074f5987c3c005954ed0b46a1711c9014750dac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/074f5987c3c005954ed0b46a1711c9014750dac9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f16e871d3cde2e2b027c9b8e3a6f5045e8fb349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f16e871d3cde2e2b027c9b8e3a6f5045e8fb349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f16e871d3cde2e2b027c9b8e3a6f5045e8fb349", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f16e871d3cde2e2b027c9b8e3a6f5045e8fb349/comments", "author": null, "committer": null, "parents": [{"sha": "302d2f14391b84764e1338d9c4aa51b7a1e4637a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302d2f14391b84764e1338d9c4aa51b7a1e4637a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/302d2f14391b84764e1338d9c4aa51b7a1e4637a"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "5d0a8f93c74008e856d48692dafe1378a2b74144", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f16e871d3cde2e2b027c9b8e3a6f5045e8fb349/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f16e871d3cde2e2b027c9b8e3a6f5045e8fb349/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f16e871d3cde2e2b027c9b8e3a6f5045e8fb349", "patch": "@@ -1,3 +1,8 @@\n+Sat Jan  5 01:35:29 CET 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cfgcleanup.c: Include tm_p.h\n+\t(mark_effect): Fix handling of hard register; fix handling of SET\n+\n 2002-01-04  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.md (anonymous patterns): Check that"}, {"sha": "ce5307de7901e7ba33027b00028afb2481b5f245", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f16e871d3cde2e2b027c9b8e3a6f5045e8fb349/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f16e871d3cde2e2b027c9b8e3a6f5045e8fb349/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9f16e871d3cde2e2b027c9b8e3a6f5045e8fb349", "patch": "@@ -1477,7 +1477,7 @@ cfgbuild.o : cfgbuild.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h insn-config.h \\\n    function.h except.h $(GGC_H) \n cfgcleanup.o : cfgcleanup.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TIMEVAR_H)\\\n    $(BASIC_BLOCK_H) hard-reg-set.h output.h flags.h $(RECOG_H) toplev.h \\\n-   $(GGC_H) insn-config.h cselib.h\n+   $(GGC_H) insn-config.h cselib.h $(TM_P_H)\n cfgloop.o : cfgloop.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h\n dominance.o : dominance.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) hard-reg-set.h \\"}, {"sha": "0a111a513b98e1e7a013faab19fd2ec767346aae", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f16e871d3cde2e2b027c9b8e3a6f5045e8fb349/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f16e871d3cde2e2b027c9b8e3a6f5045e8fb349/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=9f16e871d3cde2e2b027c9b8e3a6f5045e8fb349", "patch": "@@ -43,6 +43,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"recog.h\"\n #include \"toplev.h\"\n #include \"cselib.h\"\n+#include \"tm_p.h\"\n \n #include \"obstack.h\"\n \n@@ -192,21 +193,43 @@ mark_effect (exp, nonequal)\n   rtx exp;\n   regset nonequal;\n {\n+  int regno;\n+  rtx dest;\n   switch (GET_CODE (exp))\n     {\n       /* In case we do clobber the register, mark it as equal, as we know the\n          value is dead so it don't have to match.  */\n       case CLOBBER:\n \tif (REG_P (XEXP (exp, 0)))\n-\t  CLEAR_REGNO_REG_SET (nonequal, REGNO (XEXP (exp, 0)));\n+\t  {\n+\t    dest = XEXP (exp, 0);\n+\t    regno = REGNO (dest);\n+\t    CLEAR_REGNO_REG_SET (nonequal, regno);\n+\t    if (regno < FIRST_PSEUDO_REGISTER)\n+\t      {\n+\t\tint n = HARD_REGNO_NREGS (regno, GET_MODE (dest));\n+\t\twhile (--n > 0)\n+\t\t  CLEAR_REGNO_REG_SET (nonequal, regno + n);\n+\t      }\n+\t  }\n \treturn false;\n \n       case SET:\n \tif (rtx_equal_for_cselib_p (SET_DEST (exp), SET_SRC (exp)))\n \t  return false;\n-\tif (GET_CODE (SET_SRC (exp)) != REG)\n+\tdest = SET_DEST (exp);\n+\tif (dest == pc_rtx)\n+\t  return false;\n+\tif (!REG_P (dest))\n \t  return true;\n-\tSET_REGNO_REG_SET (nonequal, REGNO (SET_SRC (exp)));\n+\tregno = REGNO (dest);\n+\tSET_REGNO_REG_SET (nonequal, regno);\n+\tif (regno < FIRST_PSEUDO_REGISTER)\n+\t  {\n+\t    int n = HARD_REGNO_NREGS (regno, GET_MODE (dest));\n+\t    while (--n > 0)\n+\t      SET_REGNO_REG_SET (nonequal, regno + n);\n+\t  }\n \treturn false;\n \n       default:\n@@ -292,7 +315,7 @@ thread_jump (mode, e, b)\n      processing as if it were same basic block.\n      Our goal is to prove that whole block is an NOOP.  */\n \n-  for (insn = NEXT_INSN (b->head); insn != b->end && !failed;\n+  for (insn = NEXT_INSN (b->head); insn != NEXT_INSN (b->end) && !failed;\n        insn = NEXT_INSN (insn))\n   {\n     if (INSN_P (insn))"}]}