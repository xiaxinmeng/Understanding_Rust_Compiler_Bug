{"sha": "6b99d47087fb99be38053525546ea3be51b6fe8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI5OWQ0NzA4N2ZiOTliZTM4MDUzNTI1NTQ2ZWEzYmU1MWI2ZmU4ZQ==", "commit": {"author": {"name": "Ovidiu Predescu", "email": "ovidiu@cup.hp.com", "date": "1999-02-16T15:39:00Z"}, "committer": {"name": "Ovidiu Predescu", "email": "ovidiu@gcc.gnu.org", "date": "1999-02-16T15:39:00Z"}, "message": "Applied Richard Frith-Macdonald's patch to objc/objc-act.c for encoding the type.\n\nFrom-SVN: r25249", "tree": {"sha": "762fbcf73766bc75259f6fb035f47cc06f775f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/762fbcf73766bc75259f6fb035f47cc06f775f74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b99d47087fb99be38053525546ea3be51b6fe8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b99d47087fb99be38053525546ea3be51b6fe8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b99d47087fb99be38053525546ea3be51b6fe8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b99d47087fb99be38053525546ea3be51b6fe8e/comments", "author": null, "committer": null, "parents": [{"sha": "ebf84769665f182660c762a68e909a249d00625a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebf84769665f182660c762a68e909a249d00625a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebf84769665f182660c762a68e909a249d00625a"}], "stats": {"total": 88, "additions": 46, "deletions": 42}, "files": [{"sha": "d7008dfe00df9f4ecb12130e489949c281983b42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b99d47087fb99be38053525546ea3be51b6fe8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b99d47087fb99be38053525546ea3be51b6fe8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b99d47087fb99be38053525546ea3be51b6fe8e", "patch": "@@ -1,3 +1,9 @@\n+Tue Feb 16 15:31:39 1999  Ovidiu Predescu  <ovidiu@cup.hp.com>\n+\n+\t* objc/objc-act.c (encode_type): Encode the type instead of\n+ \tencoding the mode of the type (patch from Richard Frith-Macdonald\n+ \t<richard@brainstorm.co.uk>).\n+\n Tue Feb 16 10:53:51 1999  Richard Earnshaw (rearnsha@arm.com)\n \n \t* config/arm/arm.md (*zeroextractqi_compare0_scratch): Re-add load"}, {"sha": "7f53d178eb0901e6b0923f18c59d53d56f303395", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 40, "deletions": 42, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b99d47087fb99be38053525546ea3be51b6fe8e/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b99d47087fb99be38053525546ea3be51b6fe8e/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=6b99d47087fb99be38053525546ea3be51b6fe8e", "patch": "@@ -6782,38 +6782,37 @@ encode_type (type, curtype, format)\n \t{\n \t  /* Unsigned integer types.  */\n \n-\t  if (TYPE_MODE (type) == QImode)\n+\t  type = TYPE_MAIN_VARIANT (type);\n+\t  if (type == unsigned_type_node)\n+\t    obstack_1grow (&util_obstack, 'I');\n+\t  else if (type == long_unsigned_type_node)\n+\t    obstack_1grow (&util_obstack, 'L');\n+\t  else if (type == unsigned_char_type_node)\n \t    obstack_1grow (&util_obstack, 'C');\n-\t  else if (TYPE_MODE (type) == HImode)\n+\t  else if (type == short_unsigned_type_node)\n \t    obstack_1grow (&util_obstack, 'S');\n-\t  else if (TYPE_MODE (type) == SImode)\n-\t    {\n-\t      if (type == long_unsigned_type_node)\n-\t\tobstack_1grow (&util_obstack, 'L');\n-\t      else\n-\t\tobstack_1grow (&util_obstack, 'I');\n-\t    }\n-\t  else if (TYPE_MODE (type) == DImode)\n+\t  else if (type == long_long_unsigned_type_node)\n \t    obstack_1grow (&util_obstack, 'Q');\n+\t  else\n+\t    fatal (\"attempt to encode unsigned int of unknown type\");\n \t}\n \n       else\n \t/* Signed integer types.  */\n \t{\n-\t  if (TYPE_MODE (type) == QImode)\n+\t  type = TYPE_MAIN_VARIANT (type);\n+\t  if (type == integer_type_node)\n+\t    obstack_1grow (&util_obstack, 'i');\n+\t  else if (type == long_integer_type_node)\n+\t    obstack_1grow (&util_obstack, 'l');\n+\t  else if (type == char_type_node || type == signed_char_type_node)\n \t    obstack_1grow (&util_obstack, 'c');\n-\t  else if (TYPE_MODE (type) == HImode)\n+\t  else if (type == short_integer_type_node)\n \t    obstack_1grow (&util_obstack, 's');\n-\t  else if (TYPE_MODE (type) == SImode)\n-\t    {\n-\t      if (type == long_integer_type_node)\n-\t\tobstack_1grow (&util_obstack, 'l');\n-\t      else\n-\t\tobstack_1grow (&util_obstack, 'i');\n-\t    }\n-\n-\t  else if (TYPE_MODE (type) == DImode)\n+\t  else if (type == long_long_integer_type_node)\n \t    obstack_1grow (&util_obstack, 'q');\n+\t  else\n+\t    fatal (\"attempt to encode signed int of unknown type\");\n \t}\n     }\n \n@@ -6858,38 +6857,37 @@ encode_complete_bitfield (int position, tree type, int size)\n \t{\n \t  /* Unsigned integer types.  */\n \n-\t  if (TYPE_MODE (type) == QImode)\n+\t  type = TYPE_MAIN_VARIANT (type);\n+\t  if (type == unsigned_type_node)\n+\t    charType = 'I';\n+\t  else if (type == long_unsigned_type_node)\n+\t    charType = 'L';\n+\t  else if (type == unsigned_char_type_node)\n \t    charType = 'C';\n-\t  else if (TYPE_MODE (type) == HImode)\n+\t  else if (type == short_unsigned_type_node)\n \t    charType = 'S';\n-\t  else if (TYPE_MODE (type) == SImode)\n-\t    {\n-\t      if (type == long_unsigned_type_node)\n-\t\tcharType = 'L';\n-\t      else\n-\t\tcharType = 'I';\n-\t    }\n-\t  else if (TYPE_MODE (type) == DImode)\n+\t  else if (type == long_long_unsigned_type_node)\n \t    charType = 'Q';\n+\t  else\n+\t    fatal (\"attempt to encode unsigned int of unknown type\");\n \t}\n \n       else\n \t/* Signed integer types.  */\n \t{\n-\t  if (TYPE_MODE (type) == QImode)\n+\t  type = TYPE_MAIN_VARIANT (type);\n+\t  if (type == unsigned_type_node)\n+\t    charType = 'i';\n+\t  else if (type == long_unsigned_type_node)\n+\t    charType = 'l';\n+\t  else if (type == char_type_node || type == signed_char_type_node)\n \t    charType = 'c';\n-\t  else if (TYPE_MODE (type) == HImode)\n+\t  else if (type == short_unsigned_type_node)\n \t    charType = 's';\n-\t  else if (TYPE_MODE (type) == SImode)\n-\t    {\n-\t      if (type == long_integer_type_node)\n-\t\tcharType = 'l';\n-\t      else\n-\t\tcharType = 'i';\n-\t    }\n-\n-\t  else if (TYPE_MODE (type) == DImode)\n+\t  else if (type == long_long_unsigned_type_node)\n \t    charType = 'q';\n+\t  else\n+\t    fatal (\"attempt to encode signed int of unknown type\");\n \t}\n     }\n "}]}