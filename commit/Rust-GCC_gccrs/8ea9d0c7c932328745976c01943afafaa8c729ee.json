{"sha": "8ea9d0c7c932328745976c01943afafaa8c729ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVhOWQwYzdjOTMyMzI4NzQ1OTc2YzAxOTQzYWZhZmFhOGM3MjllZQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-01-04T14:37:23Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-01-04T14:37:23Z"}, "message": "re PR tree-optimization/18308 (ICE in do_jump, at dojump.c:274)\n\ngcc:\n2005-01-04  Paolo Bonzini  <bonzini@gnu.org>\n\t    Devang Patel  <dpatel@apple.com>\n\n\tPR tree-optimization/18308\n\n\t* tree-if-conv.c (add_to_dst_predicate_list): Gimplify\n\tthe operands before creating a new expression.\n\t* dojump.c (do_jump): Make drop_through_label available\n\tfor all cases.  Add expansion of COND_EXPR.\n\ngcc/testsuite:\n2005-01-04  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* gcc.dg/vect/pr18308.c: New testcase.\n\nCo-Authored-By: Devang Patel <dpatel@apple.com>\n\nFrom-SVN: r92895", "tree": {"sha": "a919dee0dec5ee35dd918a7ace0394d63a37c89c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a919dee0dec5ee35dd918a7ace0394d63a37c89c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ea9d0c7c932328745976c01943afafaa8c729ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ea9d0c7c932328745976c01943afafaa8c729ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ea9d0c7c932328745976c01943afafaa8c729ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ea9d0c7c932328745976c01943afafaa8c729ee/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c427b58d167a17c88895d8cd6ed2999d493165f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c427b58d167a17c88895d8cd6ed2999d493165f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c427b58d167a17c88895d8cd6ed2999d493165f"}], "stats": {"total": 86, "additions": 73, "deletions": 13}, "files": [{"sha": "5d83e223b04b43776c22fc18fa25e5cdd07365f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea9d0c7c932328745976c01943afafaa8c729ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea9d0c7c932328745976c01943afafaa8c729ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ea9d0c7c932328745976c01943afafaa8c729ee", "patch": "@@ -1,3 +1,13 @@\n+2005-01-04  Paolo Bonzini  <bonzini@gnu.org>\n+\t    Devang Patel  <dpatel@apple.com>\n+\n+\tPR tree-optimization/18308\n+\n+\t* tree-if-conv.c (add_to_dst_predicate_list): Gimplify\n+\tthe operands before creating a new expression.\n+\t* dojump.c (do_jump): Make drop_through_label available\n+\tfor all cases.  Add expansion of COND_EXPR.\n+\n 2005-01-04  Ira Rosen  <irar@il.ibm.com>\n \n \t* tree-vectorizer.c (vect_analyze_offset_expr): Test for"}, {"sha": "650e51aeb1408fc6477ff1dcd6550b475750b5b4", "filename": "gcc/dojump.c", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea9d0c7c932328745976c01943afafaa8c729ee/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea9d0c7c932328745976c01943afafaa8c729ee/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=8ea9d0c7c932328745976c01943afafaa8c729ee", "patch": "@@ -1,6 +1,6 @@\n /* Convert tree expression to rtl instructions, for GNU compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+   2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -164,6 +164,7 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n   int i;\n   tree type;\n   enum machine_mode mode;\n+  rtx drop_through_label = 0;\n \n   switch (code)\n     {\n@@ -293,10 +294,29 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n       do_jump (TREE_OPERAND (exp, 0), if_true_label, if_false_label);\n       break;\n \n+    case COND_EXPR:\n+      {\n+\trtx label1 = gen_label_rtx ();\n+\tif (!if_true_label || !if_false_label)\n+\t  {\n+\t    drop_through_label = gen_label_rtx ();\n+\t    if (!if_true_label)\n+\t      if_true_label = drop_through_label;\n+\t    if (!if_false_label)\n+\t      if_false_label = drop_through_label;\n+\t  }\n+\n+        do_pending_stack_adjust ();\n+        do_jump (TREE_OPERAND (exp, 0), label1, NULL_RTX);\n+        do_jump (TREE_OPERAND (exp, 1), if_false_label, if_true_label);\n+        emit_label (label1);\n+        do_jump (TREE_OPERAND (exp, 2), if_false_label, if_true_label);\n+\tbreak;\n+      }\n+\n     case TRUTH_ANDIF_EXPR:\n     case TRUTH_ORIF_EXPR:\n     case COMPOUND_EXPR:\n-    case COND_EXPR:\n       /* Lowered by gimplify.c.  */\n       gcc_unreachable ();\n \n@@ -478,7 +498,6 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n             tree op0 = save_expr (TREE_OPERAND (exp, 0));\n             tree op1 = save_expr (TREE_OPERAND (exp, 1));\n             tree cmp0, cmp1;\n-\t    rtx drop_through_label = 0;\n \n             /* If the target doesn't support combined unordered\n                compares, decompose into two comparisons.  */\n@@ -489,12 +508,6 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n             cmp1 = fold (build2 (tcode2, TREE_TYPE (exp), op0, op1));\n \t    do_jump (cmp0, 0, if_true_label);\n \t    do_jump (cmp1, if_false_label, if_true_label);\n-\n-\t    if (drop_through_label)\n-\t      {\n-\t\tdo_pending_stack_adjust ();\n-\t\temit_label (drop_through_label);\n-\t      }\n           }\n       }\n       break;\n@@ -568,6 +581,12 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n \t\t\t\t   if_false_label, if_true_label);\n \t}\n     }\n+\n+  if (drop_through_label)\n+    {\n+      do_pending_stack_adjust ();\n+      emit_label (drop_through_label);\n+    }\n }\n \f\n /* Given a comparison expression EXP for values too wide to be compared"}, {"sha": "c376fce25a9ede18f0fe7c62026c405c021f6336", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea9d0c7c932328745976c01943afafaa8c729ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea9d0c7c932328745976c01943afafaa8c729ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ea9d0c7c932328745976c01943afafaa8c729ee", "patch": "@@ -1,3 +1,8 @@\n+2005-01-04  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR tree-optimization/18308\n+\t* gcc.dg/vect/pr18308.c: New testcase.\n+\n 2005-01-04  Andreas Jaeger  <aj@suse.de>\n \n \t* gcc.target/i386/amd64-abi-1.c: Only run as 64-bit tests."}, {"sha": "b71f08ede2cb04017f881acda9ffcaff4f655f05", "filename": "gcc/testsuite/gcc.dg/vect/pr18308.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea9d0c7c932328745976c01943afafaa8c729ee/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr18308.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea9d0c7c932328745976c01943afafaa8c729ee/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr18308.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr18308.c?ref=8ea9d0c7c932328745976c01943afafaa8c729ee", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ftree-vectorize -funroll-loops\" } */\n+void foo();\n+\n+void bar(int j)\n+{\n+  int i, k=0;\n+  for (i = 0; i < 2; ++i)\n+    if (j) k = 2;\n+\n+  if (k) foo();\n+}\n+"}, {"sha": "4085922678499f595be0bc4248a0087b4f6b21af", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea9d0c7c932328745976c01943afafaa8c729ee/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea9d0c7c932328745976c01943afafaa8c729ee/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=8ea9d0c7c932328745976c01943afafaa8c729ee", "patch": "@@ -1,5 +1,5 @@\n /* If-conversion for vectorizer.\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n    Contributed by Devang Patel <dpatel@apple.com>\n \n This file is part of GCC.\n@@ -639,10 +639,23 @@ add_to_dst_predicate_list (struct loop * loop, basic_block bb,\n     new_cond = unshare_expr (cond);\n   else\n     {\n-      tree tmp_stmt;\n+      tree tmp;\n+      tree tmp_stmt = NULL_TREE;\n+      tree tmp_stmts1 = NULL_TREE;\n+      tree tmp_stmts2 = NULL_TREE;\n+      prev_cond = force_gimple_operand (unshare_expr (prev_cond),\n+\t\t\t\t\t&tmp_stmts1, true, NULL);\n+      if (tmp_stmts1)\n+        bsi_insert_before (bsi, tmp_stmts1, BSI_SAME_STMT);\n+\n+      cond = force_gimple_operand (unshare_expr (cond),\n+\t\t\t\t   &tmp_stmts2, true, NULL);\n+      if (tmp_stmts2)\n+        bsi_insert_before (bsi, tmp_stmts2, BSI_SAME_STMT);\n+\n       /* new_cond == prev_cond AND cond */\n-      tree tmp = build (TRUTH_AND_EXPR, boolean_type_node,\n-\t\t\tunshare_expr (prev_cond), cond);\n+      tmp = build (TRUTH_AND_EXPR, boolean_type_node,\n+\t\t   unshare_expr (prev_cond), cond);\n       tmp_stmt = ifc_temp_var (boolean_type_node, tmp);\n       bsi_insert_before (bsi, tmp_stmt, BSI_SAME_STMT);\n       new_cond = TREE_OPERAND (tmp_stmt, 0);"}]}