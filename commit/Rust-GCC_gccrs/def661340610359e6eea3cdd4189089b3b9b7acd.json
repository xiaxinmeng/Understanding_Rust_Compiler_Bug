{"sha": "def661340610359e6eea3cdd4189089b3b9b7acd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVmNjYxMzQwNjEwMzU5ZTZlZWEzY2RkNDE4OTA4OWIzYjliN2FjZA==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2006-02-10T19:01:05Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2006-02-10T19:01:05Z"}, "message": "re PR fortran/20858 (NULL doesn't get its argument type (kind))\n\n2006-02-05  Steven G. Kargl  <kargls@comcast.net>\n\nPR fortran/20858\n*decl.c (variable_decl): Improve error message.  Remove initialization\n typespec.  Wrap long line.\n*expr.c (gfc_check_pointer_assign): Permit checking of type, kind type,\n and rank.\n*simplify.c (gfc_simplify_null): Ensure type, kind type, and rank are set.\n\ngfortran.dg/null_1.f90: New test.\n\nFrom-SVN: r110845", "tree": {"sha": "47904c72572a1f413c0df6b9172a66991423a611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47904c72572a1f413c0df6b9172a66991423a611"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/def661340610359e6eea3cdd4189089b3b9b7acd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def661340610359e6eea3cdd4189089b3b9b7acd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/def661340610359e6eea3cdd4189089b3b9b7acd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def661340610359e6eea3cdd4189089b3b9b7acd/comments", "author": null, "committer": null, "parents": [{"sha": "6f4d3d86564db6a42ffb8ffa8960cc32129ab581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4d3d86564db6a42ffb8ffa8960cc32129ab581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f4d3d86564db6a42ffb8ffa8960cc32129ab581"}], "stats": {"total": 73, "additions": 54, "deletions": 19}, "files": [{"sha": "ca341442f689a73056d54eee676e84b8d87a5295", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def661340610359e6eea3cdd4189089b3b9b7acd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def661340610359e6eea3cdd4189089b3b9b7acd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=def661340610359e6eea3cdd4189089b3b9b7acd", "patch": "@@ -1,3 +1,14 @@\n+2006-02-10  Steven G. Kargl  <kargls@comcast.net>\n+\n+\tPR fortran/20858\n+\t*decl.c (variable_decl): Improve error message.  Remove initialization\n+\ttypespec.  Wrap long line.\n+\t*expr.c (gfc_check_pointer_assign): Permit checking of type, kind type,\n+\tand rank.\n+\t*simplify.c (gfc_simplify_null): Ensure type, kind type, and rank\n+\tare set.\n+\n+\n 2006-02-10  Tobias Schl\ufffd\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/14771"}, {"sha": "0f2436a3e1839e3824bf4f0f5d8e2fcca4e1e349", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def661340610359e6eea3cdd4189089b3b9b7acd/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def661340610359e6eea3cdd4189089b3b9b7acd/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=def661340610359e6eea3cdd4189089b3b9b7acd", "patch": "@@ -1203,7 +1203,7 @@ variable_decl (int elem)\n \t  m = gfc_match_null (&initializer);\n \t  if (m == MATCH_NO)\n \t    {\n-\t      gfc_error (\"Pointer initialization requires a NULL at %C\");\n+\t      gfc_error (\"Pointer initialization requires a NULL() at %C\");\n \t      m = MATCH_ERROR;\n \t    }\n \n@@ -1218,8 +1218,6 @@ variable_decl (int elem)\n \t  if (m != MATCH_YES)\n \t    goto cleanup;\n \n-\t  initializer->ts = current_ts;\n-\n \t}\n       else if (gfc_match_char ('=') == MATCH_YES)\n \t{\n@@ -1282,7 +1280,8 @@ variable_decl (int elem)\n     t = add_init_expr_to_sym (name, &initializer, &var_locus);\n   else\n     {\n-      if (current_ts.type == BT_DERIVED && !current_attr.pointer && !initializer)\n+      if (current_ts.type == BT_DERIVED && !current_attr.pointer\n+\t  && !initializer)\n \tinitializer = gfc_default_initializer (&current_ts);\n       t = build_struct (name, cl, &initializer, &as);\n     }"}, {"sha": "6db1c6bad7cca672fac0a0dcacd457e052009041", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def661340610359e6eea3cdd4189089b3b9b7acd/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def661340610359e6eea3cdd4189089b3b9b7acd/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=def661340610359e6eea3cdd4189089b3b9b7acd", "patch": "@@ -1984,7 +1984,7 @@ gfc_check_pointer_assign (gfc_expr * lvalue, gfc_expr * rvalue)\n   /* If rvalue is a NULL() or NULLIFY, we're done. Otherwise the type,\n      kind, etc for lvalue and rvalue must match, and rvalue must be a\n      pure variable if we're in a pure function.  */\n-  if (rvalue->expr_type == EXPR_NULL)\n+  if (rvalue->expr_type == EXPR_NULL && rvalue->ts.type == BT_UNKNOWN)\n     return SUCCESS;\n \n   if (!gfc_compare_types (&lvalue->ts, &rvalue->ts))\n@@ -2001,6 +2001,17 @@ gfc_check_pointer_assign (gfc_expr * lvalue, gfc_expr * rvalue)\n       return FAILURE;\n     }\n \n+  if (lvalue->rank != rvalue->rank)\n+    {\n+      gfc_error (\"Different ranks in pointer assignment at %L\",\n+\t\t  &lvalue->where);\n+      return FAILURE;\n+    }\n+\n+  /* Now punt if we are dealing with a NULLIFY(X) or X = NULL(X).  */\n+  if (rvalue->expr_type == EXPR_NULL)\n+    return SUCCESS;\n+\n   if (lvalue->ts.type == BT_CHARACTER\n \t&& lvalue->ts.cl->length && rvalue->ts.cl->length\n \t&& abs (gfc_dep_compare_expr (lvalue->ts.cl->length,\n@@ -2025,13 +2036,6 @@ gfc_check_pointer_assign (gfc_expr * lvalue, gfc_expr * rvalue)\n \t\t \"procedure at %L\", &rvalue->where);\n     }\n \n-  if (lvalue->rank != rvalue->rank)\n-    {\n-      gfc_error (\"Unequal ranks %d and %d in pointer assignment at %L\", \n-\t\t lvalue->rank, rvalue->rank, &rvalue->where);\n-      return FAILURE;\n-    }\n-\n   if (gfc_has_vector_index (rvalue))\n     {\n       gfc_error (\"Pointer assignment with vector subscript \""}, {"sha": "b47707896aeb13cd7561343422b891c47788cf89", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def661340610359e6eea3cdd4189089b3b9b7acd/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def661340610359e6eea3cdd4189089b3b9b7acd/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=def661340610359e6eea3cdd4189089b3b9b7acd", "patch": "@@ -2528,16 +2528,14 @@ gfc_simplify_null (gfc_expr * mold)\n {\n   gfc_expr *result;\n \n-  result = gfc_get_expr ();\n-  result->expr_type = EXPR_NULL;\n-\n   if (mold == NULL)\n-    result->ts.type = BT_UNKNOWN;\n-  else\n     {\n-      result->ts = mold->ts;\n-      result->where = mold->where;\n+      result = gfc_get_expr ();\n+      result->ts.type = BT_UNKNOWN;\n     }\n+  else\n+    result = gfc_copy_expr (mold);\n+  result->expr_type = EXPR_NULL;\n \n   return result;\n }"}, {"sha": "28b84e4382904a5fc02b25f24ce47d2568fdff74", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def661340610359e6eea3cdd4189089b3b9b7acd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def661340610359e6eea3cdd4189089b3b9b7acd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=def661340610359e6eea3cdd4189089b3b9b7acd", "patch": "@@ -1,3 +1,7 @@\n+2006-02-10  Steven G. Kargl  <kargls@comcast.net>\n+\n+\tgfortran.dg/null_1.f90: New test.\n+\n 2006-02-10  Tobias Schl\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/14771"}, {"sha": "d367bb3de61b741c1bb7b726da147ea55c63c285", "filename": "gcc/testsuite/gfortran.dg/null_1.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def661340610359e6eea3cdd4189089b3b9b7acd/gcc%2Ftestsuite%2Fgfortran.dg%2Fnull_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def661340610359e6eea3cdd4189089b3b9b7acd/gcc%2Ftestsuite%2Fgfortran.dg%2Fnull_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnull_1.f90?ref=def661340610359e6eea3cdd4189089b3b9b7acd", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! PR fortran/20858\n+! If we have \"x = null(i)\", then \"null()\" acquires the type, kind type,\n+! and rank of i and these need to match those of x.\n+program null_1\n+   integer, parameter :: sp = kind(1.e0), dp = kind(1.d0)\n+   integer,  pointer :: i => null()\n+   real(sp), pointer :: x => null()\n+   real(dp), pointer :: y => null()\n+   real(sp), pointer :: z(:) => null()\n+   x => null(i)     ! { dg-error \"types in pointer assignment\" }\n+   x => null(y)     ! { dg-error \"types in pointer assignment\" }\n+   z => null(i)     ! { dg-error \"types in pointer assignment\" }\n+   z => null(y)     ! { dg-error \"types in pointer assignment\" }\n+   x => null(z)     ! { dg-error \"ranks in pointer assignment\" }\n+   z => null(x)     ! { dg-error \"ranks in pointer assignment\" }\n+   z => null(z)\n+   nullify(i, x, y, z)\n+end program null_1"}]}