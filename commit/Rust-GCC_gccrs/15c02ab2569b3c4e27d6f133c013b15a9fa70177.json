{"sha": "15c02ab2569b3c4e27d6f133c013b15a9fa70177", "node_id": "C_kwDOANBUbNoAKDE1YzAyYWIyNTY5YjNjNGUyN2Q2ZjEzM2MwMTNiMTVhOWZhNzAxNzc", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-12-14T20:50:41Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-12-14T21:00:00Z"}, "message": "rs6000: Do not allow combining of multiple assemble quads [PR103548]\n\nThe compiler will gladly CSE the result of two __builtin_mma_build_acc\ncalls with the same four vector arguments, leading to illegal MMA\ncode being generated.  The fix here is to make the mma_assemble_acc\npattern use a unspec_volatile to stop the CSE from happening.\n\n2021-12-14  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\tPR target/103548\n\t* config/rs6000/mma.md (UNSPEC_MMA_ASSEMBLE): Rename unspec from this...\n\t(UNSPEC_VSX_ASSEMBLE): ...to this.\n\t(UNSPECV_MMA_ASSEMBLE): New unspecv.\n\t(vsx_assemble_pair): Use UNSPEC_VSX_ASSEMBLE.\n\t(*vsx_assemble_pair): Likewise.\n\t(mma_assemble_acc): Use UNSPECV_MMA_ASSEMBLE.\n\t(*mma_assemble_acc): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_split_multireg_move): Handle\n\tUNSPEC_VOLATILE.  Use UNSPEC_VSX_ASSEMBLE and UNSPECV_MMA_ASSEMBLE.\n\ngcc/testsuite/\n\tPR target/103548\n\t* gcc.target/powerpc/mma-builtin-10-pair.c: New test.\n\t* gcc.target/powerpc/mma-builtin-10-quad.c: New test.", "tree": {"sha": "a9b858798df601d4bb12573763514d01f2861fb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9b858798df601d4bb12573763514d01f2861fb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15c02ab2569b3c4e27d6f133c013b15a9fa70177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c02ab2569b3c4e27d6f133c013b15a9fa70177", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15c02ab2569b3c4e27d6f133c013b15a9fa70177", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c02ab2569b3c4e27d6f133c013b15a9fa70177/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca39102e10643a6b3f07d06934cc0907ba83d9ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca39102e10643a6b3f07d06934cc0907ba83d9ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca39102e10643a6b3f07d06934cc0907ba83d9ee"}], "stats": {"total": 88, "additions": 68, "deletions": 20}, "files": [{"sha": "8a262054d5f2c288929925d5c52cf1691b4e227a", "filename": "gcc/config/rs6000/mma.md", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c02ab2569b3c4e27d6f133c013b15a9fa70177/gcc%2Fconfig%2Frs6000%2Fmma.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c02ab2569b3c4e27d6f133c013b15a9fa70177/gcc%2Fconfig%2Frs6000%2Fmma.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fmma.md?ref=15c02ab2569b3c4e27d6f133c013b15a9fa70177", "patch": "@@ -29,7 +29,7 @@\n ;; Constants for creating unspecs\n \n (define_c_enum \"unspec\"\n-  [UNSPEC_MMA_ASSEMBLE\n+  [UNSPEC_VSX_ASSEMBLE\n    UNSPEC_MMA_EXTRACT\n    UNSPEC_MMA_PMXVBF16GER2\n    UNSPEC_MMA_PMXVBF16GER2NN\n@@ -94,7 +94,8 @@\n   ])\n \n (define_c_enum \"unspecv\"\n-  [UNSPECV_MMA_XXSETACCZ\n+  [UNSPECV_MMA_ASSEMBLE\n+   UNSPECV_MMA_XXSETACCZ\n   ])\n \n ;; MMA instructions with 1 accumulator argument\n@@ -333,7 +334,7 @@\n {\n   rtx src = gen_rtx_UNSPEC (OOmode,\n \t\t\t    gen_rtvec (2, operands[1], operands[2]),\n-\t\t\t    UNSPEC_MMA_ASSEMBLE);\n+\t\t\t    UNSPEC_VSX_ASSEMBLE);\n   emit_move_insn (operands[0], src);\n   DONE;\n })\n@@ -345,15 +346,15 @@\n   [(set (match_operand:OO 0 \"vsx_register_operand\" \"=&wa\")\n \t(unspec:OO [(match_operand:V16QI 1 \"mma_assemble_input_operand\" \"mwa\")\n \t\t    (match_operand:V16QI 2 \"mma_assemble_input_operand\" \"mwa\")]\n-\t\t    UNSPEC_MMA_ASSEMBLE))]\n+\t\t   UNSPEC_VSX_ASSEMBLE))]\n   \"TARGET_MMA\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n {\n   rtx src = gen_rtx_UNSPEC (OOmode,\n \t\t\t    gen_rtvec (2, operands[1], operands[2]),\n-\t\t\t    UNSPEC_MMA_ASSEMBLE);\n+\t\t\t    UNSPEC_VSX_ASSEMBLE);\n   rs6000_split_multireg_move (operands[0], src);\n   DONE;\n })\n@@ -399,10 +400,10 @@\n    (match_operand:V16QI 4 \"mma_assemble_input_operand\")]\n   \"TARGET_MMA\"\n {\n-  rtx src = gen_rtx_UNSPEC (XOmode,\n-\t\t\t    gen_rtvec (4, operands[1], operands[2],\n-\t\t\t\t       operands[3], operands[4]),\n-\t\t\t    UNSPEC_MMA_ASSEMBLE);\n+  rtx src = gen_rtx_UNSPEC_VOLATILE (XOmode,\n+\t\t\t    \t     gen_rtvec (4, operands[1], operands[2],\n+\t\t\t\t       \t\toperands[3], operands[4]),\n+\t\t\t    \t     UNSPECV_MMA_ASSEMBLE);\n   emit_move_insn (operands[0], src);\n   DONE;\n })\n@@ -412,21 +413,22 @@\n \n (define_insn_and_split \"*mma_assemble_acc\"\n   [(set (match_operand:XO 0 \"fpr_reg_operand\" \"=&d\")\n-\t(unspec:XO [(match_operand:V16QI 1 \"mma_assemble_input_operand\" \"mwa\")\n-\t\t    (match_operand:V16QI 2 \"mma_assemble_input_operand\" \"mwa\")\n-\t\t    (match_operand:V16QI 3 \"mma_assemble_input_operand\" \"mwa\")\n-\t\t    (match_operand:V16QI 4 \"mma_assemble_input_operand\" \"mwa\")]\n-\t\t    UNSPEC_MMA_ASSEMBLE))]\n+\t(unspec_volatile:XO\n+\t  [(match_operand:V16QI 1 \"mma_assemble_input_operand\" \"mwa\")\n+\t   (match_operand:V16QI 2 \"mma_assemble_input_operand\" \"mwa\")\n+\t   (match_operand:V16QI 3 \"mma_assemble_input_operand\" \"mwa\")\n+\t   (match_operand:V16QI 4 \"mma_assemble_input_operand\" \"mwa\")]\n+\t  UNSPECV_MMA_ASSEMBLE))]\n   \"TARGET_MMA\n    && fpr_reg_operand (operands[0], XOmode)\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n {\n-  rtx src = gen_rtx_UNSPEC (XOmode,\n-\t\t\t    gen_rtvec (4, operands[1], operands[2],\n-\t\t\t\t       operands[3], operands[4]),\n-\t\t\t    UNSPEC_MMA_ASSEMBLE);\n+  rtx src = gen_rtx_UNSPEC_VOLATILE (XOmode,\n+\t\t\t    \t     gen_rtvec (4, operands[1], operands[2],\n+\t\t\t\t       \t\toperands[3], operands[4]),\n+\t\t\t    \t     UNSPECV_MMA_ASSEMBLE);\n   rs6000_split_multireg_move (operands[0], src);\n   DONE;\n })"}, {"sha": "9fc1577be40262b8972990637f47bc7693c59201", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c02ab2569b3c4e27d6f133c013b15a9fa70177/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c02ab2569b3c4e27d6f133c013b15a9fa70177/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=15c02ab2569b3c4e27d6f133c013b15a9fa70177", "patch": "@@ -27071,9 +27071,11 @@ rs6000_split_multireg_move (rtx dst, rtx src)\n \t  return;\n \t}\n \n-      if (GET_CODE (src) == UNSPEC)\n+      if (GET_CODE (src) == UNSPEC\n+\t  || GET_CODE (src) == UNSPEC_VOLATILE)\n \t{\n-\t  gcc_assert (XINT (src, 1) == UNSPEC_MMA_ASSEMBLE);\n+\t  gcc_assert (XINT (src, 1) == UNSPEC_VSX_ASSEMBLE\n+\t\t      || XINT (src, 1) == UNSPECV_MMA_ASSEMBLE);\n \t  gcc_assert (REG_P (dst));\n \t  if (GET_MODE (src) == XOmode)\n \t    gcc_assert (FP_REGNO_P (REGNO (dst)));"}, {"sha": "d8748d8e7d0a6a94283c9df5b5894521e3a2af04", "filename": "gcc/testsuite/gcc.target/powerpc/mma-builtin-10-pair.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c02ab2569b3c4e27d6f133c013b15a9fa70177/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-10-pair.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c02ab2569b3c4e27d6f133c013b15a9fa70177/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-10-pair.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-10-pair.c?ref=15c02ab2569b3c4e27d6f133c013b15a9fa70177", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2\" } */\n+\n+typedef unsigned char  vec_t __attribute__((vector_size(16)));\n+\n+void\n+foo (__vector_pair *dst, vec_t *src)\n+{\n+  __vector_pair pair0, pair1;\n+  /* Adjacent loads should be combined into one lxvp instruction\n+     and identical build pairs should be combined.  */\n+  __builtin_vsx_build_pair (&pair0, src[0], src[1]);\n+  __builtin_vsx_build_pair (&pair1, src[0], src[1]);\n+  dst[0] = pair0;\n+  dst[2] = pair1;\n+}\n+\n+/* { dg-final { scan-assembler-not {\\mlxv\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mstxv\\M} } } */\n+/* { dg-final { scan-assembler-times {\\mlxvp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvp\\M} 2 } } */"}, {"sha": "02342c76f5f508338240f9882b9d0b40dd92b48a", "filename": "gcc/testsuite/gcc.target/powerpc/mma-builtin-10-quad.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c02ab2569b3c4e27d6f133c013b15a9fa70177/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-10-quad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c02ab2569b3c4e27d6f133c013b15a9fa70177/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-10-quad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-10-quad.c?ref=15c02ab2569b3c4e27d6f133c013b15a9fa70177", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2\" } */\n+\n+typedef unsigned char  vec_t __attribute__((vector_size(16)));\n+\n+void\n+foo (__vector_quad *dst, vec_t *src)\n+{\n+  __vector_quad quad0, quad1;\n+  /* Adjacent loads should be combined into two lxvp instructions.\n+     and identical build accs should not be combined.  */\n+  __builtin_mma_build_acc (&quad0, src[0], src[1], src[2], src[3]);\n+  __builtin_mma_build_acc (&quad1, src[0], src[1], src[2], src[3]);\n+  dst[0] = quad0;\n+  dst[2] = quad1;\n+}\n+\n+/* { dg-final { scan-assembler-not {\\mlxv\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mstxv\\M} } } */\n+/* { dg-final { scan-assembler-times {\\mlxvp\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mxxmtacc\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mxxmfacc\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvp\\M} 4 } } */"}]}