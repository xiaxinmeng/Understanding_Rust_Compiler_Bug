{"sha": "bfc1eae300993c406f0a0cb67c10b22c06a7c993", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZjMWVhZTMwMDk5M2M0MDZmMGEwY2I2N2MxMGIyMmMwNmE3Yzk5Mw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2002-10-03T15:58:29Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2002-10-03T15:58:29Z"}, "message": "re PR libstdc++/3584 (arm-specific atomic operations not atomic)\n\nPR libstdc++/3584\n* config/cpu/arm/atomicity.h (__exchange_and_add): Don't try to use\nASM sequences that don't give us atomic addition operations.  Instead\njust add a comment explaining why it doesn't work.\n(__atomic_add): Just use __exchange_and_add.\n(__test_and_set, __always_swap): Delete.\n\nFrom-SVN: r57778", "tree": {"sha": "cd6d4747719755fcab36953d08c54f45a67c4706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd6d4747719755fcab36953d08c54f45a67c4706"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfc1eae300993c406f0a0cb67c10b22c06a7c993", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfc1eae300993c406f0a0cb67c10b22c06a7c993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfc1eae300993c406f0a0cb67c10b22c06a7c993", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfc1eae300993c406f0a0cb67c10b22c06a7c993/comments", "author": null, "committer": null, "parents": [{"sha": "e37383993dd7fdd71cbb33b84898bdde368c35af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37383993dd7fdd71cbb33b84898bdde368c35af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e37383993dd7fdd71cbb33b84898bdde368c35af"}], "stats": {"total": 196, "additions": 23, "deletions": 173}, "files": [{"sha": "d3bb12a21350e7bf3d966fbfda8fbcf14d3472a4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc1eae300993c406f0a0cb67c10b22c06a7c993/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc1eae300993c406f0a0cb67c10b22c06a7c993/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bfc1eae300993c406f0a0cb67c10b22c06a7c993", "patch": "@@ -1,3 +1,12 @@\n+2002-10-03  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR libstdc++/3584\n+\t* config/cpu/arm/atomicity.h (__exchange_and_add): Don't try to use\n+\tASM sequences that don't give us atomic addition operations.  Instead\n+\tjust add a comment explaining why it doesn't work.\n+\t(__atomic_add): Just use __exchange_and_add.\n+\t(__test_and_set, __always_swap): Delete.\n+\n 2002-10-02  Andreas Jaeger  <aj@suse.de>\n \n \t* config/abi/x86_64-unknown-linux-gnu/baseline_symbols.txt:"}, {"sha": "7b952aac365dd8b618a5c2c72a122dd764ace047", "filename": "libstdc++-v3/config/cpu/arm/atomicity.h", "status": "modified", "additions": 14, "deletions": 173, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc1eae300993c406f0a0cb67c10b22c06a7c993/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc1eae300993c406f0a0cb67c10b22c06a7c993/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fatomicity.h?ref=bfc1eae300993c406f0a0cb67c10b22c06a7c993", "patch": "@@ -32,190 +32,31 @@\n \n typedef int _Atomic_word;\n \n+/* It isn't possible to write an atomic add instruction using the ARM\n+   SWP instruction without using either a global guard variable or a\n+   guard bit somewhere in the Atomic word.  However, even with a guard\n+   bit we need to understand the thread model (if any) in order to\n+   make co-operatively threaded applications work correctly.\n+\n+   The previous Thumb-based implementations were also completely\n+   broken, since they failed to switch back into Thumb mode (Gas bug,\n+   I think).  */\n+\n static inline _Atomic_word\n __attribute__ ((__unused__))\n __exchange_and_add (volatile _Atomic_word* __mem, int __val)\n {\n-  _Atomic_word __tmp, __tmp2, __result;\n-#ifdef __thumb__\n-  /* Since this function is inlined, we can't be sure of the alignment.  */\n-  __asm__ __volatile__ (\n-\t\"ldr     %0, 4f \\n\\t\"\n-\t\"bx      %0 \\n\\t\"\n-\t\".align 0 \\n\"\n-\t\"4:\\t\"\n-\t\".word   0f \\n\\t\"\n-\t\".code 32 \\n\"\n-\t\"0:\\t\"\n-\t\"ldr     %0, [%3] \\n\\t\"\n-\t\"add     %1, %0, %4 \\n\\t\"\n-\t\"swp     %2, %1, [%3] \\n\\t\"\n-        \"cmp     %0, %2 \\n\\t\"\n-        \"swpne   %1, %2, [%3] \\n\\t\"\n-        \"bne     0b \\n\\t\"\n-\t\"ldr     %1, 1f \\n\\t\"\n-\t\"bx      %1 \\n\"\n-\t\"1:\\t\"\n-\t\".word   2f \\n\\t\"\n-\t\".code 16 \\n\"\n-\t\"2:\\n\"\n-\t: \"=&l\"(__result), \"=&r\"(__tmp), \"=&r\"(__tmp2) \n-\t: \"r\" (__mem), \"r\"(__val) \n-\t: \"cc\", \"memory\");\n-#else\n-  __asm__ __volatile__ (\n-\t\"\\n\"\n-\t\"0:\\t\"\n-\t\"ldr     %0, [%3] \\n\\t\"\n-\t\"add     %1, %0, %4 \\n\\t\"\n-\t\"swp     %2, %1, [%3] \\n\\t\"\n-\t\"cmp     %0, %2 \\n\\t\"\n-\t\"swpne   %1, %2, [%3] \\n\\t\"\n-\t\"bne     0b \\n\\t\"\n-\t\"\"\n-\t: \"=&r\"(__result), \"=&r\"(__tmp), \"=&r\"(__tmp2) \n-\t: \"r\" (__mem), \"r\"(__val) \n-\t: \"cc\", \"memory\");\n-#endif\n+  _Atomic_word __result = *__mem;\n+\n+  *__mem = __result + __val;\n   return __result;\n }\n \n static inline void\n __attribute__ ((__unused__))\n __atomic_add (volatile _Atomic_word *__mem, int __val)\n {\n-  _Atomic_word __tmp, __tmp2, __tmp3;\n-#ifdef __thumb__\n-  /* Since this function is inlined, we can't be sure of the alignment.  */\n-  __asm__ __volatile__ (\n-\t\"ldr     %0, 4f \\n\\t\"\n-\t\"bx      %0 \\n\\t\"\n-\t\".align 0\\n\"\n-\t\"4:\\t\"\n-\t\".word   0f \\n\\t\"\n-\t\".code 32 \\n\"\n-\t\"0:\\t\"\n-\t\"ldr     %0, [%3] \\n\\t\"\n-\t\"add     %1, %0, %4 \\n\\t\"\n-        \"swp     %2, %1, [%3] \\n\\t\"\n-        \"cmp     %0, %2 \\n\\t\"\n-        \"swpne   %1, %2,[%3] \\n\\t\"\n-        \"bne     0b \\n\\t\"\n-\t\"ldr     %1, 1f \\n\\t\"\n-\t\"bx      %1 \\n\"\n-\t\"1:\\t\"\n-\t\".word   2f \\n\\t\"\n-\t\".code 16 \\n\"\n-\t\"2:\\n\"\n-\t: \"=&l\"(__tmp), \"=&r\"(__tmp2), \"=&r\"(__tmp3) \n-\t: \"r\" (__mem), \"r\"(__val) \n-\t: \"cc\", \"memory\");\n-#else\n-  __asm__ __volatile__ (\n-\t\"\\n\"\n-\t\"0:\\t\"\n-\t\"ldr     %0, [%3] \\n\\t\"\n-\t\"add     %1, %0, %4 \\n\\t\"\n-\t\"swp     %2, %1, [%3] \\n\\t\"\n-\t\"cmp     %0, %2 \\n\\t\"\n-\t\"swpne   %1, %2, [%3] \\n\\t\"\n-\t\"bne     0b \\n\\t\"\n-\t\"\"\n-\t: \"=&r\"(__tmp), \"=&r\"(__tmp2), \"=&r\"(__tmp3) \n-\t: \"r\" (__mem), \"r\"(__val) \n-\t: \"cc\", \"memory\");\n-#endif\n-}\n-\n-static inline long\n-__attribute__ ((__unused__))\n-__always_swap (volatile long *__p, long __newval)\n-{\n-  long __result;\n-#ifdef __thumb__\n-  long __tmp;\n-  /* Since this function is inlined, we can't be sure of the alignment.  */\n-  __asm__ __volatile__ (\n-\t\"ldr     %0, 4f \\n\\t\"\n-\t\"bx      %0 \\n\\t\"\n-\t\".align 0 \\n\"\n-\t\"4:\\t\"\n-\t\".word   0f \\n\\t\"\n-\t\".code 32\\n\"\n-\t\"0:\\t\"\n-\t\"swp     %0, %3, [%2] \\n\\t\"\n-\t\"ldr     %1, 1f \\n\\t\"\n-\t\"bx      %1 \\n\"\n-\t\"1:\\t\"\n-\t\".word   2f \\n\\t\"\n-\t\".code 16 \\n\"\n-\t\"2:\\n\"\n-\t: \"=&l\"(__result), \"=&r\"(__tmp)\n-\t: \"r\"(__p), \"r\"(__newval)\n-\t: \"memory\");\n-#else\n-  __asm__ __volatile__ (\n-\t\"\\n\\t\"\n-\t\"swp     %0, %2, [%1] \\n\\t\"\n-\t\"\"\n-\t: \"=&r\"(__result)\n-\t: \"r\"(__p), \"r\"(__newval)\n-\t: \"memory\");\n-#endif\n-  return __result;\n-}\n-\n-static inline int\n-__attribute__ ((__unused__))\n-__test_and_set (volatile long *__p, long __newval)\n-{\n-  int __result;\n-  long __tmp;\n-#ifdef __thumb__\n-  /* Since this function is inlined, we can't be sure of the alignment.  */\n-  __asm__ __volatile__ (\n-\t\"ldr     %0, 4f \\n\\t\"\n-\t\"bx      %0 \\n\\t\"\n-\t\".align 0 \\n\"\n-\t\"4:\\t\"\n-\t\".word   0f \\n\\t\"\n-\t\".code 32 \\n\"\n-\t\"0:\\t\"\n-\t\"ldr     %0, [%2] \\n\\t\"\n-        \"cmp     %0, #0 \\n\\t\"\n-        \"bne     1f \\n\\t\"\n-        \"swp     %1, %3, [%2] \\n\\t\"\n-        \"cmp     %0, %1 \\n\\t\"\n-        \"swpne   %0, %1, [%2]\\n\\t\"\n-        \"bne     0b \\n\"\n-\t\"1:\\t\"\n-\t\"ldr     %1, 2f \\n\\t\"\n-\t\"bx      %1 \\n\"\n-\t\"2:\\t\"\n-\t\".word   3f \\n\\t\"\n-\t\".code 16 \\n\"\n-\t\"3:\"\n-\t: \"=&l\"(__result), \"=r\" (__tmp) \n-\t: \"r\"(__p), \"r\"(__newval) \n-\t: \"cc\", \"memory\");\n-#else\n-  __asm__ __volatile__ (\n-\t\"\\n\"\n-\t\"0:\\t\"\n-\t\"ldr     %0, [%2] \\n\\t\"\n-\t\"cmp     %0, #0 \\n\\t\"\n-\t\"bne     1f \\n\\t\"\n-\t\"swp     %1, %3, [%2] \\n\\t\"\n-\t\"cmp     %0, %1 \\n\\t\"\n-\t\"swpne   %0, %1, [%2] \\n\\t\"\n-\t\"bne     0b \\n\"\n-\t\"1:\\n\\t\"\n-\t\"\"\n-\t: \"=&r\"(__result), \"=r\" (__tmp) \n-\t: \"r\"(__p), \"r\"(__newval) \n-\t: \"cc\", \"memory\");\n-#endif\n-  return __result;\n+  __exchange_and_add (__mem, __val);\n }\n \n #endif /* atomicity.h */"}]}