{"sha": "b003c4b14b3f889e6707db68d2c6545eda7a203b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAwM2M0YjE0YjNmODg5ZTY3MDdkYjY4ZDJjNjU0NWVkYTdhMjAzYg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-17T10:21:11Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-19T19:22:37Z"}, "message": "coroutines: Emit error for invalid promise return types [PR97438].\n\nAt one stage, use cases were proposed for allowing the promise\ntype to contain both return_value and return_void.  That was\nnot accepted into C++20, so we should reject it as per the PR.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97438\n\t* coroutines.cc (struct coroutine_info): Add a field to\n\trecord that we emitted a promise type error.\n\t(coro_promise_type_found_p): Check for the case that the\n\tpromise type contains both return_void and return_value.\n\tEmit an error if so, with information about the wrong\n\ttype methods.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97438\n\t* g++.dg/coroutines/pr97438.C: New test.", "tree": {"sha": "225cf2cb2538ac0e3bdfd2913e18966553e99e03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/225cf2cb2538ac0e3bdfd2913e18966553e99e03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b003c4b14b3f889e6707db68d2c6545eda7a203b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b003c4b14b3f889e6707db68d2c6545eda7a203b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b003c4b14b3f889e6707db68d2c6545eda7a203b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b003c4b14b3f889e6707db68d2c6545eda7a203b/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "619f91eaa8c8a50f1f9d3e7b96ee837037f0e806", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/619f91eaa8c8a50f1f9d3e7b96ee837037f0e806", "html_url": "https://github.com/Rust-GCC/gccrs/commit/619f91eaa8c8a50f1f9d3e7b96ee837037f0e806"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "9b9141e51fd59c33caa6e61d4871edbe9e3d5636", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b003c4b14b3f889e6707db68d2c6545eda7a203b/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b003c4b14b3f889e6707db68d2c6545eda7a203b/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=b003c4b14b3f889e6707db68d2c6545eda7a203b", "patch": "@@ -94,6 +94,7 @@ struct GTY((for_user)) coroutine_info\n   /* Flags to avoid repeated errors for per-function issues.  */\n   bool coro_ret_type_error_emitted;\n   bool coro_promise_error_emitted;\n+  bool coro_co_return_error_emitted;\n };\n \n struct coroutine_info_hasher : ggc_ptr_hash<coroutine_info>\n@@ -470,6 +471,30 @@ coro_promise_type_found_p (tree fndecl, location_t loc)\n \t  return false;\n \t}\n \n+      /* Test for errors in the promise type that can be determined now.  */\n+      tree has_ret_void = lookup_member (coro_info->promise_type,\n+\t\t\t\t\t coro_return_void_identifier,\n+\t\t\t\t\t /*protect=*/1, /*want_type=*/0,\n+\t\t\t\t\t tf_none);\n+      tree has_ret_val = lookup_member (coro_info->promise_type,\n+\t\t\t\t\tcoro_return_value_identifier,\n+\t\t\t\t\t/*protect=*/1, /*want_type=*/0,\n+\t\t\t\t\ttf_none);\n+      if (has_ret_void && has_ret_val)\n+\t{\n+\t  location_t ploc = DECL_SOURCE_LOCATION (fndecl);\n+\t  if (!coro_info->coro_co_return_error_emitted)\n+\t    error_at (ploc, \"the coroutine promise type %qT declares both\"\n+\t\t      \" %<return_value%> and %<return_void%>\",\n+\t\t      coro_info->promise_type);\n+\t  inform (DECL_SOURCE_LOCATION (BASELINK_FUNCTIONS (has_ret_void)),\n+\t\t  \"%<return_void%> declared here\");\n+\t  inform (DECL_SOURCE_LOCATION (BASELINK_FUNCTIONS (has_ret_val)),\n+\t\t  \"%<return_value%> declared here\");\n+\t  coro_info->coro_co_return_error_emitted = true;\n+\t  return false;\n+\t}\n+\n       /* Try to find the handle type for the promise.  */\n       tree handle_type =\n \tinstantiate_coro_handle_for_promise_type (loc, coro_info->promise_type);"}, {"sha": "95376648ed7075480e56d2d17264ffffe2cbd96c", "filename": "gcc/testsuite/g++.dg/coroutines/pr97438.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b003c4b14b3f889e6707db68d2c6545eda7a203b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr97438.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b003c4b14b3f889e6707db68d2c6545eda7a203b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr97438.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr97438.C?ref=b003c4b14b3f889e6707db68d2c6545eda7a203b", "patch": "@@ -0,0 +1,30 @@\n+#if __has_include(<coroutine>)\n+#include <coroutine>\n+#else\n+#include <experimental/coroutine>\n+namespace std { using namespace experimental; }\n+#endif\n+\n+struct dummy_coroutine {};\n+\n+namespace std {\n+\n+template<>\n+class coroutine_traits<::dummy_coroutine> {\n+public:\n+    struct promise_type {\n+        void return_value(int x) {  }\n+        void return_void() {}\n+        std::suspend_never initial_suspend() noexcept { return {}; }\n+        std::suspend_never final_suspend() noexcept { return {}; }\n+        dummy_coroutine get_return_object() { return {}; }\n+        void unhandled_exception() {}\n+    };\n+};\n+\n+}\n+\n+dummy_coroutine\n+foo() { // { dg-error {the coroutine promise type 'std::__n4861::coroutine_traits<dummy_coroutine>::promise_type' declares both 'return_value' and 'return_void'} }\n+    co_return 17;\n+}"}]}