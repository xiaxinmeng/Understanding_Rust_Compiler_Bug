{"sha": "cdce4d18f9688b22580930b155206b1ff19ce497", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RjZTRkMThmOTY4OGIyMjU4MDkzMGIxNTUyMDZiMWZmMTljZTQ5Nw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2018-08-16T19:40:07Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-08-16T19:40:07Z"}, "message": "rs6000: Change the length attribute default\n\nThis moves what is currently the default of the length attribute to\nthe only branch instruction patterns where it applies, namely, the\nB-form instructions.  It was used for the \"jump\" instruction as well\nbefore, but that is an I-form instruction and always has length 4.\n\n\n\t* config/rs6000/rs6000.md (length): Always define as const_int 4.\n\t(unnamed conditional branch define_insn): Set length to 4 or 8\n\tdepending on offset.\n\t(<bd>_<mode>): Similar, for alternative 0.\n\t(<bd>tf_<mode>): Ditto.\n\nFrom-SVN: r263601", "tree": {"sha": "0271cf031118408d52e3a3902419fafea8aaeca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0271cf031118408d52e3a3902419fafea8aaeca2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdce4d18f9688b22580930b155206b1ff19ce497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdce4d18f9688b22580930b155206b1ff19ce497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdce4d18f9688b22580930b155206b1ff19ce497", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdce4d18f9688b22580930b155206b1ff19ce497/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "729a01f72ca6c1bd106cb2285187191c3568201b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729a01f72ca6c1bd106cb2285187191c3568201b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/729a01f72ca6c1bd106cb2285187191c3568201b"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "02a20b5b7c8ae0d162452b4d544b7454bf6ffbd8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdce4d18f9688b22580930b155206b1ff19ce497/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdce4d18f9688b22580930b155206b1ff19ce497/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdce4d18f9688b22580930b155206b1ff19ce497", "patch": "@@ -1,3 +1,11 @@\n+2018-08-16  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.md (length): Always define as const_int 4.\n+\t(unnamed conditional branch define_insn): Set length to 4 or 8\n+\tdepending on offset.\n+\t(<bd>_<mode>): Similar, for alternative 0.\n+\t(<bd>tf_<mode>): Ditto.\n+\n 2018-08-16  Tamar Christina  <tamar.christina@arm.com>\n \n \t* expr.c (copy_blkmode_to_reg): Perform larger copies when safe."}, {"sha": "45e42ffade11204cf2da8aeb490b0cef223149ca", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdce4d18f9688b22580930b155206b1ff19ce497/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdce4d18f9688b22580930b155206b1ff19ce497/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=cdce4d18f9688b22580930b155206b1ff19ce497", "patch": "@@ -243,18 +243,8 @@\n ;; Is copying of this instruction disallowed?\n (define_attr \"cannot_copy\" \"no,yes\" (const_string \"no\"))\n \n-;; Length (in bytes).\n-; '(pc)' in the following doesn't include the instruction itself; it is\n-; calculated as if the instruction had zero size.\n-(define_attr \"length\" \"\"\n-  (if_then_else (eq_attr \"type\" \"branch\")\n-\t\t(if_then_else (and (ge (minus (match_dup 0) (pc))\n-\t\t\t\t       (const_int -32768))\n-\t\t\t\t   (lt (minus (match_dup 0) (pc))\n-\t\t\t\t       (const_int 32764)))\n-\t\t\t      (const_int 4)\n-\t\t\t      (const_int 8))\n-\t\t(const_int 4)))\n+;; Length of the instruction (in bytes).\n+(define_attr \"length\" \"\" (const_int 4))\n \n ;; Processor type -- this attribute must exactly match the processor_type\n ;; enumeration in rs6000-opts.h.\n@@ -12346,7 +12336,14 @@\n {\n   return output_cbranch (operands[1], \"%l0\", 0, insn);\n }\n-  [(set_attr \"type\" \"branch\")])\n+  [(set_attr \"type\" \"branch\")\n+   (set (attr \"length\")\n+\t(if_then_else (and (ge (minus (match_dup 0) (pc))\n+\t\t\t       (const_int -32768))\n+\t\t\t   (lt (minus (match_dup 0) (pc))\n+\t\t\t       (const_int 32764)))\n+\t\t      (const_int 4)\n+\t\t      (const_int 8)))])\n \n (define_insn \"\"\n   [(set (pc)\n@@ -12716,7 +12713,17 @@\n     return \"<bd_neg> $+8\\;b %l0\";\n }\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"*,16,20,20\")])\n+   (set (attr \"length\")\n+\t(cond [(eq (symbol_ref \"which_alternative\") (const_int 0))\n+\t\t  (if_then_else (and (ge (minus (match_dup 0) (pc))\n+\t\t\t\t\t (const_int -32768))\n+\t\t\t\t     (lt (minus (match_dup 0) (pc))\n+\t\t\t\t\t (const_int 32764)))\n+\t\t\t\t(const_int 4)\n+\t\t\t\t(const_int 8))\n+\t       (eq (symbol_ref \"which_alternative\") (const_int 1))\n+\t\t  (const_int 16)]\n+\t   (const_int 20)))])\n \n ;; Now the splitter if we could not allocate the CTR register\n (define_split\n@@ -12795,7 +12802,17 @@\n     }\n }\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"*,16,20,20\")])\n+   (set (attr \"length\")\n+\t(cond [(eq (symbol_ref \"which_alternative\") (const_int 0))\n+\t\t  (if_then_else (and (ge (minus (match_dup 0) (pc))\n+\t\t\t\t\t (const_int -32768))\n+\t\t\t\t     (lt (minus (match_dup 0) (pc))\n+\t\t\t\t\t (const_int 32764)))\n+\t\t\t\t(const_int 4)\n+\t\t\t\t(const_int 8))\n+\t       (eq (symbol_ref \"which_alternative\") (const_int 1))\n+\t\t  (const_int 16)]\n+\t     (const_int 20)))])\n \n ;; Now the splitter if we could not allocate the CTR register\n (define_split"}]}