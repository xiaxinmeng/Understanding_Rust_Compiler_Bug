{"sha": "6aadc94289c763ea858dc511908279ab3af0f43e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFhZGM5NDI4OWM3NjNlYTg1OGRjNTExOTA4Mjc5YWIzYWYwZjQzZQ==", "commit": {"author": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2014-01-22T16:10:07Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2014-01-22T16:10:07Z"}, "message": "insert-vsx-be-order.c: New.\n\n2014-01-22  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.dg/vmx/insert-vsx-be-order.c: New.\n\t* gcc.dg/vmx/extract-vsx.c: New.\n\t* gcc.dg/vmx/extract-vsx-be-order.c: New.\n\t* gcc.dg/vmx/insert-vsx.c: New.\n\nFrom-SVN: r206926", "tree": {"sha": "a903729305472827625811be309845e2d152c638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a903729305472827625811be309845e2d152c638"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aadc94289c763ea858dc511908279ab3af0f43e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aadc94289c763ea858dc511908279ab3af0f43e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aadc94289c763ea858dc511908279ab3af0f43e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aadc94289c763ea858dc511908279ab3af0f43e/comments", "author": null, "committer": null, "parents": [{"sha": "0466b16a45f0be032f0aa4ee8c2c00a15a3762f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0466b16a45f0be032f0aa4ee8c2c00a15a3762f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0466b16a45f0be032f0aa4ee8c2c00a15a3762f2"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "fbeda7b5a622627a42f23ef9ae77ac1ba82ab87c", "filename": "gcc/testsuite/gcc.dg/vmx/extract-vsx-be-order.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aadc94289c763ea858dc511908279ab3af0f43e/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fextract-vsx-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aadc94289c763ea858dc511908279ab3af0f43e/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fextract-vsx-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fextract-vsx-be-order.c?ref=6aadc94289c763ea858dc511908279ab3af0f43e", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mvsx\" } */\n+\n+#include \"harness.h\"\n+\n+static void test()\n+{\n+  vector long vl = {0, 1};\n+  vector double vd = {0.0, 1.0};\n+\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  check (vec_extract (vl, 0) == 1, \"vl, 0\");\n+  check (vec_extract (vd, 1) == 0.0, \"vd, 1\");\n+#else\n+  check (vec_extract (vl, 0) == 0, \"vl, 0\");\n+  check (vec_extract (vd, 1) == 1.0, \"vd, 1\");\n+#endif\n+}"}, {"sha": "68f0909c1551b6a4a618a49a1fed0f1659862f78", "filename": "gcc/testsuite/gcc.dg/vmx/extract-vsx.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aadc94289c763ea858dc511908279ab3af0f43e/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fextract-vsx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aadc94289c763ea858dc511908279ab3af0f43e/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fextract-vsx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fextract-vsx.c?ref=6aadc94289c763ea858dc511908279ab3af0f43e", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec -mabi=altivec -std=gnu99 -mvsx\" } */\n+\n+#include \"harness.h\"\n+\n+static void test()\n+{\n+  vector long vl = {0, 1};\n+  vector double vd = {0.0, 1.0};\n+\n+  check (vec_extract (vl, 0) == 0, \"vec_extract, vl, 0\");\n+  check (vec_extract (vd, 1) == 1.0, \"vec_extract, vd, 1\");\n+  check (vl[0] == 0, \"[], vl, 0\");\n+  check (vd[1] == 1.0, \"[], vd, 0\");\n+}"}, {"sha": "375c8ff18f201fafec13f9b84c5209d93dd0f341", "filename": "gcc/testsuite/gcc.dg/vmx/insert-vsx-be-order.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aadc94289c763ea858dc511908279ab3af0f43e/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Finsert-vsx-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aadc94289c763ea858dc511908279ab3af0f43e/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Finsert-vsx-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Finsert-vsx-be-order.c?ref=6aadc94289c763ea858dc511908279ab3af0f43e", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mvsx\" } */\n+\n+#include \"harness.h\"\n+\n+static int vec_long_eq (vector long x, vector long y)\n+{\n+  return (x[0] == y[0] && x[1] == y[1]);\n+}\n+\n+static int vec_dbl_eq (vector double x, vector double y)\n+{\n+  return (x[0] == y[0] && x[1] == y[1]);\n+}\n+\n+static void test()\n+{\n+  vector long vl = {0, 1};\n+  vector double vd = {0.0, 1.0};\n+  vector long vlr = vec_insert (2, vl, 0);\n+  vector double vdr = vec_insert (2.0, vd, 1);\n+\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  vector long vler = {0, 2};\n+  vector double vder = {2.0, 1.0};\n+#else\n+  vector long vler = {2, 1};\n+  vector double vder = {0.0, 2.0};\n+#endif\n+\n+  check (vec_long_eq (vlr, vler), \"vl\");\n+  check (vec_dbl_eq (vdr, vder), \"vd\");\n+}"}, {"sha": "bda6b6ccdae79bc5c3895375cc9394cfcc4441e9", "filename": "gcc/testsuite/gcc.dg/vmx/insert-vsx.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aadc94289c763ea858dc511908279ab3af0f43e/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Finsert-vsx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aadc94289c763ea858dc511908279ab3af0f43e/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Finsert-vsx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Finsert-vsx.c?ref=6aadc94289c763ea858dc511908279ab3af0f43e", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec -mabi=altivec -std=gnu99 -mvsx\" } */\n+\n+#include \"harness.h\"\n+\n+static int vec_long_eq (vector long x, vector long y)\n+{\n+  return (x[0] == y[0] && x[1] == y[1]);\n+}\n+\n+static int vec_dbl_eq (vector double x, vector double y)\n+{\n+  return (x[0] == y[0] && x[1] == y[1]);\n+}\n+\n+static void test()\n+{\n+  vector long vl = {0, 1};\n+  vector double vd = {0.0, 1.0};\n+  vector long vlr = vec_insert (2, vl, 0);\n+  vector double vdr = vec_insert (2.0, vd, 1);\n+  vector long vler = {2, 1};\n+  vector double vder = {0.0, 2.0};\n+\n+  check (vec_long_eq (vlr, vler), \"vl\");\n+  check (vec_dbl_eq (vdr, vder), \"vd\");\n+}"}]}