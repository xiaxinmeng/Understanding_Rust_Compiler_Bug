{"sha": "d067e05f0e9a765e9ce60938aac1a1c99701cc33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA2N2UwNWYwZTlhNzY1ZTljZTYwOTM4YWFjMWExYzk5NzAxY2MzMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-04-25T17:21:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-04-25T17:21:49Z"}, "message": "Implement C++17 [[maybe_unused]] attribute.\n\ngcc/\n\t* attribs.c (register_scoped_attributes): Fix logic.\n\t* attribs.h: Declare register_scoped_attributes.\nc-family/\n\t* c-common.c (handle_unused_attribute): Accept CONST_DECL.\n\tNo longer static.\n\t* c-common.h: Declare it.\n\t* c-lex.c (c_common_has_attribute): Add maybe_unused.\ncp/\n\t* tree.c (std_attribute_table): New.\n\t(init_tree): Register it.\n\nFrom-SVN: r235414", "tree": {"sha": "264530e0fbdd09de1ee921078acbe9204f96ca60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/264530e0fbdd09de1ee921078acbe9204f96ca60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d067e05f0e9a765e9ce60938aac1a1c99701cc33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d067e05f0e9a765e9ce60938aac1a1c99701cc33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d067e05f0e9a765e9ce60938aac1a1c99701cc33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d067e05f0e9a765e9ce60938aac1a1c99701cc33/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4dfaa9631958d036d4de44ebfa5a1bcfa92462c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dfaa9631958d036d4de44ebfa5a1bcfa92462c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dfaa9631958d036d4de44ebfa5a1bcfa92462c4"}], "stats": {"total": 98, "additions": 80, "deletions": 18}, "files": [{"sha": "954238cd80aa9764636526fa4d4c0118e2a968b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d067e05f0e9a765e9ce60938aac1a1c99701cc33", "patch": "@@ -1,3 +1,8 @@\n+2016-04-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* attribs.c (register_scoped_attributes): Fix logic.\n+\t* attribs.h: Declare register_scoped_attributes.\n+\n 2016-04-25  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000-builtin.def: Correct pasto error for"}, {"sha": "9a886214ec40696f85328f29bfe8db32f82694d5", "filename": "gcc/attribs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=d067e05f0e9a765e9ce60938aac1a1c99701cc33", "patch": "@@ -130,7 +130,7 @@ register_scoped_attributes (const struct attribute_spec * attributes,\n       /* We don't have any namespace NS yet.  Create one.  */\n       scoped_attributes sa;\n \n-      if (!attributes_table.is_empty ())\n+      if (attributes_table.is_empty ())\n \tattributes_table.create (64);\n \n       memset (&sa, 0, sizeof (sa));"}, {"sha": "23d30435d1d2721d0abc92d21b6e1692b34e683a", "filename": "gcc/attribs.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Fattribs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Fattribs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.h?ref=d067e05f0e9a765e9ce60938aac1a1c99701cc33", "patch": "@@ -38,4 +38,7 @@ extern tree get_attribute_name (const_tree);\n extern void apply_tm_attr (tree, tree);\n extern tree make_attribute (const char *, const char *, tree);\n \n+extern struct scoped_attributes* register_scoped_attributes (const struct attribute_spec *,\n+\t\t\t\t\t\t\t     const char *);\n+\n #endif // GCC_ATTRIBS_H"}, {"sha": "af601678982940c94eec5bdbc9a3782eb9d16819", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=d067e05f0e9a765e9ce60938aac1a1c99701cc33", "patch": "@@ -1,3 +1,10 @@\n+2016-04-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-common.c (handle_unused_attribute): Accept CONST_DECL.\n+\tNo longer static.\n+\t* c-common.h: Declare it.\n+\t* c-lex.c (c_common_has_attribute): Add maybe_unused.\n+\n 2016-04-22  Jason Merrill  <jason@redhat.com>\n \n \t* c-cppbuiltin.c (c_cpp_builtins): Fix __cpp_range_based_for."}, {"sha": "1edc0bc65bbfeb2cdc807b99511cab245032fb3b", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=d067e05f0e9a765e9ce60938aac1a1c99701cc33", "patch": "@@ -327,7 +327,6 @@ static tree handle_artificial_attribute (tree *, tree, tree, int, bool *);\n static tree handle_flatten_attribute (tree *, tree, tree, int, bool *);\n static tree handle_error_attribute (tree *, tree, tree, int, bool *);\n static tree handle_used_attribute (tree *, tree, tree, int, bool *);\n-static tree handle_unused_attribute (tree *, tree, tree, int, bool *);\n static tree handle_externally_visible_attribute (tree *, tree, tree, int,\n \t\t\t\t\t\t bool *);\n static tree handle_no_reorder_attribute (tree *, tree, tree, int,\n@@ -7033,7 +7032,7 @@ handle_used_attribute (tree *pnode, tree name, tree ARG_UNUSED (args),\n /* Handle a \"unused\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n \n-static tree\n+tree\n handle_unused_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t\t\t int flags, bool *no_add_attrs)\n {\n@@ -7044,6 +7043,7 @@ handle_unused_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n       if (TREE_CODE (decl) == PARM_DECL\n \t  || VAR_OR_FUNCTION_DECL_P (decl)\n \t  || TREE_CODE (decl) == LABEL_DECL\n+\t  || TREE_CODE (decl) == CONST_DECL\n \t  || TREE_CODE (decl) == TYPE_DECL)\n \t{\n \t  TREE_USED (decl) = 1;"}, {"sha": "4c43a354fefa1b71c3bc3fcf96818c2fc5be21ff", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=d067e05f0e9a765e9ce60938aac1a1c99701cc33", "patch": "@@ -790,6 +790,7 @@ extern void check_function_arguments_recurse (void (*)\n \t\t\t\t\t      unsigned HOST_WIDE_INT);\n extern bool check_builtin_function_arguments (tree, int, tree *);\n extern void check_function_format (tree, int, tree *);\n+extern tree handle_unused_attribute (tree *, tree, tree, int, bool *);\n extern tree handle_format_attribute (tree *, tree, tree, int, bool *);\n extern tree handle_format_arg_attribute (tree *, tree, tree, int, bool *);\n extern bool attribute_takes_identifier_p (const_tree);"}, {"sha": "6b020a41e599936bdec6ae11f3d10a84903e4217", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=d067e05f0e9a765e9ce60938aac1a1c99701cc33", "patch": "@@ -340,23 +340,26 @@ c_common_has_attribute (cpp_reader *pfile)\n \t\t  attr_name = NULL_TREE;\n \t\t}\n \t    }\n-\t}\n-      if (attr_name)\n-\t{\n-\t  init_attributes ();\n-\t  const struct attribute_spec *attr = lookup_attribute_spec (attr_name);\n-\t  if (attr)\n+\t  else\n \t    {\n-\t      if (TREE_CODE (attr_name) == TREE_LIST)\n-\t\tattr_name = TREE_VALUE (attr_name);\n+\t      /* Some standard attributes need special handling.  */\n \t      if (is_attribute_p (\"noreturn\", attr_name))\n \t\tresult = 200809;\n \t      else if (is_attribute_p (\"deprecated\", attr_name))\n \t\tresult = 201309;\n-\t      else\n-\t\tresult = 1;\n+\t      else if (is_attribute_p (\"maybe_unused\", attr_name))\n+\t\tresult = 201603;\n+\t      if (result)\n+\t\tattr_name = NULL_TREE;\n \t    }\n \t}\n+      if (attr_name)\n+\t{\n+\t  init_attributes ();\n+\t  const struct attribute_spec *attr = lookup_attribute_spec (attr_name);\n+\t  if (attr)\n+\t    result = 1;\n+\t}\n     }\n   else\n     {"}, {"sha": "e9c50d663fed528e824f008bd16c8c226065201f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d067e05f0e9a765e9ce60938aac1a1c99701cc33", "patch": "@@ -1,3 +1,8 @@\n+2016-04-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.c (std_attribute_table): New.\n+\t(init_tree): Register it.\n+\n 2016-04-22  Jason Merrill  <jason@redhat.com>\n \n \t* parser.c (cp_parser_perform_range_for_lookup): Decay the array."}, {"sha": "381c24faa3d2915da30af362c174b3555dfef1e2", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=d067e05f0e9a765e9ce60938aac1a1c99701cc33", "patch": "@@ -3548,6 +3548,16 @@ const struct attribute_spec cxx_attribute_table[] =\n   { NULL,\t      0, 0, false, false, false, NULL, false }\n };\n \n+/* Table of C++ standard attributes.  */\n+const struct attribute_spec std_attribute_table[] =\n+{\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n+  { \"maybe_unused\", 0, 0, false, false, false,\n+    handle_unused_attribute, false },\n+  { NULL,\t      0, 0, false, false, false, NULL, false }\n+};\n+\n /* Handle a \"java_interface\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n static tree\n@@ -4026,6 +4036,7 @@ void\n init_tree (void)\n {\n   list_hash_table = hash_table<list_hasher>::create_ggc (61);\n+  register_scoped_attributes (std_attribute_table, NULL);\n }\n \n /* Returns the kind of special function that DECL (a FUNCTION_DECL)"}, {"sha": "131dd549f36afb23cd952e358b296ea0bdceb01d", "filename": "gcc/testsuite/c-c++-common/attributes-enum-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-enum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-enum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-enum-2.c?ref=d067e05f0e9a765e9ce60938aac1a1c99701cc33", "patch": "@@ -6,7 +6,7 @@ enum E {\n   A __attribute__((foo)),\t/* { dg-warning \"ignored\" } */\n   B __attribute__((cold)),\t/* { dg-warning \"ignored\" } */\n   C __attribute__((const)),\t/* { dg-warning \"ignored\" } */\n-  D __attribute__((unused)),\t/* { dg-warning \"ignored\" } */\n+  D __attribute__((unused)),\n   E __attribute__((flatten)),\t/* { dg-warning \"ignored\" } */\n   F __attribute__((tm)),\t/* { dg-warning \"ignored\" } */\n   G __attribute__((common)),\t/* { dg-warning \"ignored\" } */"}, {"sha": "c7cad0489fa1ec895a5997e9dd444491778c2658", "filename": "gcc/testsuite/c-c++-common/cpp/pr63831-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr63831-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr63831-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr63831-1.c?ref=d067e05f0e9a765e9ce60938aac1a1c99701cc33", "patch": "@@ -17,10 +17,10 @@ T3 t3;\n T4 t4;\n T5 t5;\n #ifdef __cplusplus\n-typedef char T6[__has_attribute (gnu::__noreturn__) == 200809 ? 1 : -1];\n+typedef char T6[__has_attribute (gnu::__noreturn__) ? 1 : -1];\n typedef char T7[__has_attribute (gnu::alloc_size) == 1 ? 1 : -1];\n typedef char T8[__has_attribute (gnu::non_existent_attribuuuute) == 0 ? 1 : -1];\n-#if __has_attribute (gnu::noreturn) == 200809\n+#if __has_attribute (gnu::noreturn)\n typedef char T9;\n #endif\n #define d2 gnu::deprecated\n@@ -47,10 +47,10 @@ T13 t13;\n T14 t14;\n T15 t15;\n #ifdef __cplusplus\n-typedef char T16[__has_cpp_attribute (gnu::__noreturn__) == 200809 ? 1 : -1];\n+typedef char T16[__has_cpp_attribute (gnu::__noreturn__) ? 1 : -1];\n typedef char T17[__has_cpp_attribute (gnu::alloc_size) == 1 ? 1 : -1];\n typedef char T18[__has_cpp_attribute (gnu::non_existent_attribuuuute) == 0 ? 1 : -1];\n-#if __has_cpp_attribute (gnu::noreturn) == 200809\n+#if __has_cpp_attribute (gnu::noreturn)\n typedef char T19;\n #endif\n #define d2 gnu::deprecated"}, {"sha": "fe7a4c23290ab89e0df6d996bd12788b6dca1953", "filename": "gcc/testsuite/g++.dg/cpp1z/feat-cxx1z.C", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C?ref=d067e05f0e9a765e9ce60938aac1a1c99701cc33", "patch": "@@ -343,3 +343,13 @@\n #elif __cpp_hex_float != 201603\n #  error \"__cpp_hex_float != 201603\"\n #endif\n+\n+#ifdef __has_cpp_attribute\n+#  if ! __has_cpp_attribute(maybe_unused)\n+#    error \"__has_cpp_attribute(maybe_unused)\"\n+#  elif __has_cpp_attribute(maybe_unused) != 201603\n+#    error \"__has_cpp_attribute(maybe_unused) != 201603\"\n+#  endif\n+#else\n+#  error \"__has_cpp_attribute\"\n+#endif"}, {"sha": "eb8b51e8c04790cc4b8ed6b19de52970c3d61163", "filename": "gcc/testsuite/g++.dg/cpp1z/maybe_unused1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fmaybe_unused1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d067e05f0e9a765e9ce60938aac1a1c99701cc33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fmaybe_unused1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fmaybe_unused1.C?ref=d067e05f0e9a765e9ce60938aac1a1c99701cc33", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wunused -Wextra\" }\n+\n+[[maybe_unused]] static void f() { }\n+\n+enum [[maybe_unused]] E {\n+  e [[maybe_unused]]\n+};\n+\n+struct [[maybe_unused]] A {\n+  [[maybe_unused]] static int i;\n+};\n+\n+void g([[maybe_unused]] int i) {\n+  [[maybe_unused]] typedef int T;\n+  [[maybe_unused]] int j;\n+}"}]}