{"sha": "0ad6de3883a1641f7ec0bd9cf56d41fa5b313dae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFkNmRlMzg4M2ExNjQxZjdlYzBiZDljZjU2ZDQxZmE1YjMxM2RhZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-04T18:38:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-04T18:38:08Z"}, "message": "expand: Fix ICE in store_bit_field_using_insv [PR93235]\n\nThe following testcase ICEs on aarch64.  The problem is that\nop0 is (subreg:HI (reg:HF ...) 0) and because we can't create a SUBREG of a\nSUBREG and aarch64 doesn't have HImode insv, only SImode insv,\nstore_bit_field_using_insv tries to create (subreg:SI (reg:HF ...) 0)\nwhich is not valid for the target and so gen_rtx_SUBREG ICEs.\n\nThe following patch fixes it by punting if the to be created SUBREG\ndoesn't validate, callers of store_bit_field_using_insv can handle\nthe fallback.\n\n2021-03-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/93235\n\t* expmed.c (store_bit_field_using_insv): Return false of xop0 is a\n\tSUBREG and a SUBREG to op_mode can't be created.\n\n\t* gcc.target/aarch64/pr93235.c: New test.", "tree": {"sha": "f536bfcc765ed079b35d0dae668bda3d48e56176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f536bfcc765ed079b35d0dae668bda3d48e56176"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ad6de3883a1641f7ec0bd9cf56d41fa5b313dae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad6de3883a1641f7ec0bd9cf56d41fa5b313dae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ad6de3883a1641f7ec0bd9cf56d41fa5b313dae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad6de3883a1641f7ec0bd9cf56d41fa5b313dae/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87dc3d0d36a8ac55122da72cf5b1dcf06e694018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87dc3d0d36a8ac55122da72cf5b1dcf06e694018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87dc3d0d36a8ac55122da72cf5b1dcf06e694018"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "1fb63170be95641159205d79a7759d0441e793f4", "filename": "gcc/expmed.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad6de3883a1641f7ec0bd9cf56d41fa5b313dae/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad6de3883a1641f7ec0bd9cf56d41fa5b313dae/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=0ad6de3883a1641f7ec0bd9cf56d41fa5b313dae", "patch": "@@ -629,9 +629,16 @@ store_bit_field_using_insv (const extraction_insn *insv, rtx op0,\n       /* If xop0 is a register, we need it in OP_MODE\n \t to make it acceptable to the format of insv.  */\n       if (GET_CODE (xop0) == SUBREG)\n-\t/* We can't just change the mode, because this might clobber op0,\n-\t   and we will need the original value of op0 if insv fails.  */\n-\txop0 = gen_rtx_SUBREG (op_mode, SUBREG_REG (xop0), SUBREG_BYTE (xop0));\n+\t{\n+\t  /* If such a SUBREG can't be created, give up.  */\n+\t  if (!validate_subreg (op_mode, GET_MODE (SUBREG_REG (xop0)),\n+\t\t\t\tSUBREG_REG (xop0), SUBREG_BYTE (xop0)))\n+\t    return false;\n+\t  /* We can't just change the mode, because this might clobber op0,\n+\t     and we will need the original value of op0 if insv fails.  */\n+\t  xop0 = gen_rtx_SUBREG (op_mode, SUBREG_REG (xop0),\n+\t\t\t\t SUBREG_BYTE (xop0));\n+\t}\n       if (REG_P (xop0) && GET_MODE (xop0) != op_mode)\n \txop0 = gen_lowpart_SUBREG (op_mode, xop0);\n     }"}, {"sha": "829ae13f199fc7ef2eeeb9ab4903743e83dff642", "filename": "gcc/testsuite/gcc.target/aarch64/pr93235.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad6de3883a1641f7ec0bd9cf56d41fa5b313dae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr93235.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad6de3883a1641f7ec0bd9cf56d41fa5b313dae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr93235.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr93235.c?ref=0ad6de3883a1641f7ec0bd9cf56d41fa5b313dae", "patch": "@@ -0,0 +1,12 @@\n+/* PR middle-end/93235 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-strict-aliasing\" } */\n+\n+struct sfp16 { __fp16 f; };\n+struct sfp16\n+foo (short x)\n+{\n+  struct sfp16 a;\n+  *(short*)&a.f = x;\n+  return a;\n+}"}]}