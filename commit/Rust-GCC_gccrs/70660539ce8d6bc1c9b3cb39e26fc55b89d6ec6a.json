{"sha": "70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA2NjA1MzljZThkNmJjMWM5YjNjYjM5ZTI2ZmM1NWI4OWQ2ZWM2YQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2015-05-27T14:09:58Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2015-05-27T14:09:58Z"}, "message": "dwarf2out.c: Remove block_map.\n\n\t* dwarf2out.c: Remove block_map.\n\t(gen_call_site_die): Replace block_map use with BLOCK_DIE.\n\t(gen_lexical_block_die): Same.\n\t(dwarf2out_function_decl): Remove block_map use.\n\t(dwarf2out_c_finalize): Same.\n\t* tree-core.h (struct tree_block): Add die field.\n\t* tree.h (BLOCK_DIE): New.\n\nFrom-SVN: r223758", "tree": {"sha": "40009057b3ede54dbd324e837ffe01bee4c74d42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40009057b3ede54dbd324e837ffe01bee4c74d42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d586cedd4c86b8a57827e10fd3ec532fe6fa15ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d586cedd4c86b8a57827e10fd3ec532fe6fa15ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d586cedd4c86b8a57827e10fd3ec532fe6fa15ae"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "13422ed8ae90f323364695521f1fb2081b6f9247", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a", "patch": "@@ -1,3 +1,13 @@\n+2015-05-27  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* dwarf2out.c: Remove block_map.\n+\t(gen_call_site_die): Replace block_map use with BLOCK_DIE.\n+\t(gen_lexical_block_die): Same.\n+\t(dwarf2out_function_decl): Remove block_map use.\n+\t(dwarf2out_c_finalize): Same.\n+\t* tree-core.h (struct tree_block): Add die field.\n+\t* tree.h (BLOCK_DIE): New.\n+\n 2015-05-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/65358"}, {"sha": "15c545e8e7416d6cd370b4668a34a5d5b2f5f833", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a", "patch": "@@ -2908,10 +2908,6 @@ static int call_site_count = -1;\n /* Number of tail call sites in the current function.  */\n static int tail_call_site_count = -1;\n \n-/* Vector mapping block numbers to DW_TAG_{lexical_block,inlined_subroutine}\n-   DIEs.  */\n-static vec<dw_die_ref> block_map;\n-\n /* A cached location list.  */\n struct GTY ((for_user)) cached_dw_loc_list_def {\n   /* The DECL_UID of the decl that this entry describes.  */\n@@ -18368,8 +18364,7 @@ gen_call_site_die (tree decl, dw_die_ref subr_die,\n \t && block != DECL_INITIAL (decl)\n \t && TREE_CODE (block) == BLOCK)\n     {\n-      if (block_map.length () > BLOCK_NUMBER (block))\n-\tstmt_die = block_map[BLOCK_NUMBER (block)];\n+      stmt_die = BLOCK_DIE (block);\n       if (stmt_die)\n \tbreak;\n       block = BLOCK_SUPERCONTEXT (block);\n@@ -19469,11 +19464,7 @@ gen_lexical_block_die (tree stmt, dw_die_ref context_die)\n   dw_die_ref stmt_die = new_die (DW_TAG_lexical_block, context_die, stmt);\n \n   if (call_arg_locations)\n-    {\n-      if (block_map.length () <= BLOCK_NUMBER (stmt))\n-\tblock_map.safe_grow_cleared (BLOCK_NUMBER (stmt) + 1);\n-      block_map[BLOCK_NUMBER (stmt)] = stmt_die;\n-    }\n+    BLOCK_DIE (stmt) = stmt_die;\n \n   if (! BLOCK_ABSTRACT (stmt) && TREE_ASM_WRITTEN (stmt))\n     add_high_low_attributes (stmt, stmt_die);\n@@ -19506,11 +19497,7 @@ gen_inlined_subroutine_die (tree stmt, dw_die_ref context_die)\n \t= new_die (DW_TAG_inlined_subroutine, context_die, stmt);\n \n       if (call_arg_locations)\n-\t{\n-\t  if (block_map.length () <= BLOCK_NUMBER (stmt))\n-\t    block_map.safe_grow_cleared (BLOCK_NUMBER (stmt) + 1);\n-\t  block_map[BLOCK_NUMBER (stmt)] = subr_die;\n-\t}\n+\tBLOCK_DIE (stmt) = subr_die;\n       add_abstract_origin_attribute (subr_die, decl);\n       if (TREE_ASM_WRITTEN (stmt))\n         add_high_low_attributes (stmt, subr_die);\n@@ -21407,7 +21394,6 @@ dwarf2out_function_decl (tree decl)\n   call_arg_loc_last = NULL;\n   call_site_count = -1;\n   tail_call_site_count = -1;\n-  block_map.release ();\n   decl_loc_table->empty ();\n   cached_dw_loc_list_table->empty ();\n }\n@@ -25008,7 +24994,6 @@ dwarf2out_c_finalize (void)\n   call_arg_loc_last = NULL;\n   call_site_count = -1;\n   tail_call_site_count = -1;\n-  //block_map = NULL;\n   cached_dw_loc_list_table = NULL;\n   abbrev_die_table = NULL;\n   abbrev_die_table_allocated = 0;"}, {"sha": "2a9f417bfb3eb5451521f3fcb857f64da05bfde1", "filename": "gcc/tree-core.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a", "patch": "@@ -1334,6 +1334,9 @@ struct GTY(()) tree_block {\n   tree abstract_origin;\n   tree fragment_origin;\n   tree fragment_chain;\n+\n+  /* Pointer to the DWARF lexical block.  */\n+  struct die_struct *die;\n };\n \n struct GTY(()) tree_type_common {"}, {"sha": "58d2e9b8858fb836b3a9f80158176c0fb68d4356", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a", "patch": "@@ -1589,6 +1589,7 @@ extern void protected_set_expr_location (tree, location_t);\n #define BLOCK_CHAIN(NODE) (BLOCK_CHECK (NODE)->block.chain)\n #define BLOCK_ABSTRACT_ORIGIN(NODE) (BLOCK_CHECK (NODE)->block.abstract_origin)\n #define BLOCK_ABSTRACT(NODE) (BLOCK_CHECK (NODE)->block.abstract_flag)\n+#define BLOCK_DIE(NODE) (BLOCK_CHECK (NODE)->block.die)\n \n /* True if BLOCK has the same ranges as its BLOCK_SUPERCONTEXT.  */\n #define BLOCK_SAME_RANGE(NODE) (BLOCK_CHECK (NODE)->base.u.bits.nameless_flag)"}]}