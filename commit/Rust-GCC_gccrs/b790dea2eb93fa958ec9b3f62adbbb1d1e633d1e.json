{"sha": "b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc5MGRlYTJlYjkzZmE5NThlYzliM2Y2MmFkYmJiMWQxZTYzM2QxZQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-10-08T20:45:56Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-10-08T20:45:56Z"}, "message": "re PR middle-end/54400 (recognize vector reductions)\n\n2012-10-08  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\tPR target/54400\n\t* config/i386/i386.md (type attribute): Add sseadd1.\n\t(unit attribute): Add support for sseadd1.\n\t(memory attribute): Likewise.\n\t* config/i386/athlon.md: Likewise.\n\t* config/i386/core2.md: Likewise.\n\t* config/i386/atom.md: Likewise.\n\t* config/i386/ppro.md: Likewise.\n\t* config/i386/bdver1.md: Likewise.\n\t* config/i386/sse.md (sse3_h<plusminus_insn>v2df3): split into...\n\t(sse3_haddv2df3): ... expander.\n\t(*sse3_haddv2df3): ... define_insn. Accept permuted operands.\n\t(sse3_hsubv2df3): ... define_insn.\n\t(*sse3_haddv2df3_low): New define_insn.\n\t(*sse3_hsubv2df3_low): New define_insn.\n\ngcc/testsuite/\n\tPR target/54400\n\t* gcc.target/i386/pr54400.c: New testcase.\n\nFrom-SVN: r192223", "tree": {"sha": "ec8cd77b0fd2b7468d9a7a4fe327fae6147c4c15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec8cd77b0fd2b7468d9a7a4fe327fae6147c4c15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b2770f22cfddf5a0ab54659ce696071b0857444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2770f22cfddf5a0ab54659ce696071b0857444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b2770f22cfddf5a0ab54659ce696071b0857444"}], "stats": {"total": 220, "additions": 188, "deletions": 32}, "files": [{"sha": "afa36d19c8f28bd94e08c140ea6b1212270154e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e", "patch": "@@ -1,3 +1,21 @@\n+2012-10-08  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR target/54400\n+\t* config/i386/i386.md (type attribute): Add sseadd1.\n+\t(unit attribute): Add support for sseadd1.\n+\t(memory attribute): Likewise.\n+\t* config/i386/athlon.md: Likewise.\n+\t* config/i386/core2.md: Likewise.\n+\t* config/i386/atom.md: Likewise.\n+\t* config/i386/ppro.md: Likewise.\n+\t* config/i386/bdver1.md: Likewise.\n+\t* config/i386/sse.md (sse3_h<plusminus_insn>v2df3): split into...\n+\t(sse3_haddv2df3): ... expander.\n+\t(*sse3_haddv2df3): ... define_insn. Accept permuted operands.\n+\t(sse3_hsubv2df3): ... define_insn.\n+\t(*sse3_haddv2df3_low): New define_insn.\n+\t(*sse3_hsubv2df3_low): New define_insn.\n+\n 2012-10-08  Jan Hubicka  <jh@suse.cz>\n \n \t* loop-unswitch.c (unswitch_single_loop): Use"}, {"sha": "1a2d607150bef0510ac4eca371228df5d84b180a", "filename": "gcc/config/i386/athlon.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2Fconfig%2Fi386%2Fathlon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2Fconfig%2Fi386%2Fathlon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fathlon.md?ref=b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e", "patch": "@@ -807,47 +807,47 @@\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fadd\")\n (define_insn_reservation \"athlon_sseadd_load\" 4\n \t\t\t (and (eq_attr \"cpu\" \"athlon\")\n-\t\t\t      (and (eq_attr \"type\" \"sseadd\")\n+\t\t\t      (and (eq_attr \"type\" \"sseadd,sseadd1\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF,DF,DI\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fadd\")\n (define_insn_reservation \"athlon_sseadd_load_k8\" 6\n \t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n-\t\t\t      (and (eq_attr \"type\" \"sseadd\")\n+\t\t\t      (and (eq_attr \"type\" \"sseadd,sseadd1\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF,DF,DI\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fadd\")\n (define_insn_reservation \"athlon_sseadd\" 4\n \t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n-\t\t\t      (and (eq_attr \"type\" \"sseadd\")\n+\t\t\t      (and (eq_attr \"type\" \"sseadd,sseadd1\")\n \t\t\t\t   (eq_attr \"mode\" \"SF,DF,DI\")))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fadd\")\n (define_insn_reservation \"athlon_sseaddvector_load\" 5\n \t\t\t (and (eq_attr \"cpu\" \"athlon\")\n-\t\t\t      (and (eq_attr \"type\" \"sseadd\")\n+\t\t\t      (and (eq_attr \"type\" \"sseadd,sseadd1\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fpload2,(athlon-fadd*2)\")\n (define_insn_reservation \"athlon_sseaddvector_load_k8\" 7\n \t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n-\t\t\t      (and (eq_attr \"type\" \"sseadd\")\n+\t\t\t      (and (eq_attr \"type\" \"sseadd,sseadd1\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-double,athlon-fpload2k8,(athlon-fadd*2)\")\n (define_insn_reservation \"athlon_sseaddvector_load_amdfam10\" 6\n \t\t\t (and (eq_attr \"cpu\" \"amdfam10\")\n-\t\t\t      (and (eq_attr \"type\" \"sseadd\")\n+\t\t\t      (and (eq_attr \"type\" \"sseadd,sseadd1\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fadd\")\n (define_insn_reservation \"athlon_sseaddvector\" 5\n \t\t\t (and (eq_attr \"cpu\" \"athlon\")\n-\t\t\t      (eq_attr \"type\" \"sseadd\"))\n+\t\t\t      (eq_attr \"type\" \"sseadd,sseadd1\"))\n \t\t\t \"athlon-vector,athlon-fpsched,(athlon-fadd*2)\")\n (define_insn_reservation \"athlon_sseaddvector_k8\" 5\n \t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n-\t\t\t      (eq_attr \"type\" \"sseadd\"))\n+\t\t\t      (eq_attr \"type\" \"sseadd,sseadd1\"))\n \t\t\t \"athlon-double,athlon-fpsched,(athlon-fadd*2)\")\n (define_insn_reservation \"athlon_sseaddvector_amdfam10\" 4\n \t\t\t (and (eq_attr \"cpu\" \"amdfam10\")\n-\t\t\t      (eq_attr \"type\" \"sseadd\"))\n+\t\t\t      (eq_attr \"type\" \"sseadd,sseadd1\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fadd\")\n \n ;; Conversions behaves very irregularly and the scheduling is critical here."}, {"sha": "f24fd5ca824957d0d0aaa63bbc079d9d857bdb6c", "filename": "gcc/config/i386/atom.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2Fconfig%2Fi386%2Fatom.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2Fconfig%2Fi386%2Fatom.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fatom.md?ref=b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e", "patch": "@@ -596,7 +596,7 @@\n ;; no memory simple\n (define_insn_reservation  \"atom_sseadd\" 5\n   (and (eq_attr \"cpu\" \"atom\")\n-       (and (eq_attr \"type\" \"sseadd\")\n+       (and (eq_attr \"type\" \"sseadd,sseadd1\")\n             (and (eq_attr \"memory\" \"none\")\n                  (and (eq_attr \"mode\" \"!V2DF\")\n                       (eq_attr \"atom_unit\" \"!complex\")))))\n@@ -605,7 +605,7 @@\n ;; memory simple\n (define_insn_reservation  \"atom_sseadd_mem\" 5\n   (and (eq_attr \"cpu\" \"atom\")\n-       (and (eq_attr \"type\" \"sseadd\")\n+       (and (eq_attr \"type\" \"sseadd,sseadd1\")\n             (and (eq_attr \"memory\" \"!none\")\n                  (and (eq_attr \"mode\" \"!V2DF\")\n                       (eq_attr \"atom_unit\" \"!complex\")))))\n@@ -614,7 +614,7 @@\n ;; maxps, minps, *pd, hadd, hsub\n (define_insn_reservation  \"atom_sseadd_3\" 8\n   (and (eq_attr \"cpu\" \"atom\")\n-       (and (eq_attr \"type\" \"sseadd\")\n+       (and (eq_attr \"type\" \"sseadd,sseadd1\")\n             (ior (eq_attr \"mode\" \"V2DF\") (eq_attr \"atom_unit\" \"complex\"))))\n   \"atom-complex, atom-all-eu*7\")\n "}, {"sha": "2367785ff735f634c1d1e0c4e750d6051ee2a372", "filename": "gcc/config/i386/bdver1.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2Fconfig%2Fi386%2Fbdver1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2Fconfig%2Fi386%2Fbdver1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbdver1.md?ref=b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e", "patch": "@@ -697,24 +697,24 @@\n ;; SSE MUL, ADD, and MULADD.\n (define_insn_reservation \"bdver1_ssemuladd_load_256\" 11\n \t\t\t (and (eq_attr \"cpu\" \"bdver1,bdver2\")\n-\t\t\t      (and (eq_attr \"type\" \"ssemul,sseadd,ssemuladd\")\n+\t\t\t      (and (eq_attr \"type\" \"ssemul,sseadd,sseadd1,ssemuladd\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V8SF,V4DF\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"bdver1-double,bdver1-fpload,bdver1-ffma\")\n (define_insn_reservation \"bdver1_ssemuladd_256\" 7\n \t\t\t (and (eq_attr \"cpu\" \"bdver1,bdver2\")\n-\t\t\t      (and (eq_attr \"type\" \"ssemul,sseadd,ssemuladd\")\n+\t\t\t      (and (eq_attr \"type\" \"ssemul,sseadd,sseadd1,ssemuladd\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V8SF,V4DF\")\n \t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n \t\t\t \"bdver1-double,bdver1-fpsched,bdver1-ffma\")\n (define_insn_reservation \"bdver1_ssemuladd_load\" 10\n \t\t\t (and (eq_attr \"cpu\" \"bdver1,bdver2\")\n-\t\t\t      (and (eq_attr \"type\" \"ssemul,sseadd,ssemuladd\")\n+\t\t\t      (and (eq_attr \"type\" \"ssemul,sseadd,sseadd1,ssemuladd\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"bdver1-direct,bdver1-fpload,bdver1-ffma\")\n (define_insn_reservation \"bdver1_ssemuladd\" 6\n \t\t\t (and (eq_attr \"cpu\" \"bdver1,bdver2\")\n-\t\t\t      (and (eq_attr \"type\" \"ssemul,sseadd,ssemuladd\")\n+\t\t\t      (and (eq_attr \"type\" \"ssemul,sseadd,sseadd1,ssemuladd\")\n \t\t\t\t   (eq_attr \"memory\" \"none\")))\n \t\t\t \"bdver1-direct,bdver1-fpsched,bdver1-ffma\")\n (define_insn_reservation \"bdver1_sseimul_load\" 8"}, {"sha": "5abc77b62a1fc23be8efb456843ec0a0781f44ec", "filename": "gcc/config/i386/core2.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2Fconfig%2Fi386%2Fcore2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2Fconfig%2Fi386%2Fcore2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcore2.md?ref=b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e", "patch": "@@ -36,7 +36,7 @@\n   (cond [(eq_attr \"type\" \"fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp,fisttp,frndint\")\n \t   (const_string \"float\")\n \t (eq_attr \"type\" \"sselog,sselog1,sseiadd,sseiadd1,sseishft,sseishft1,sseimul,\n-\t\t\t  sse,ssemov,sseadd,ssemul,ssecmp,ssecomi,ssecvt,\n+\t\t\t  sse,ssemov,sseadd,sseadd1,ssemul,ssecmp,ssecomi,ssecvt,\n \t\t\t  ssecvt1,sseicvt,ssediv,sseins,ssemuladd,sse4arg\")\n \t   (cond [(eq_attr \"mode\" \"V4DF,V8SF,V2DF,V4SF,SF,DF\")\n \t\t    (const_string \"float\")\n@@ -528,13 +528,13 @@\n (define_insn_reservation \"c2_sse_addcmp\" 3\n \t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n-\t\t\t\t   (eq_attr \"type\" \"sseadd,ssecmp,ssecomi\")))\n+\t\t\t\t   (eq_attr \"type\" \"sseadd,sseadd1,ssecmp,ssecomi\")))\n \t\t\t \"c2_decodern,c2_p1\")\n \n (define_insn_reservation \"c2_sse_addcmp_load\" 3\n \t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n-\t\t\t\t   (eq_attr \"type\" \"sseadd,ssecmp,ssecomi\")))\n+\t\t\t\t   (eq_attr \"type\" \"sseadd,sseadd1,ssecmp,ssecomi\")))\n \t\t\t \"c2_decodern,c2_p2+c2_p1\")\n \n (define_insn_reservation \"c2_sse_mul_SF\" 4"}, {"sha": "fa10cb4a42760e7257448cb743f1512180e6fee2", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e", "patch": "@@ -327,8 +327,8 @@\n    str,bitmanip,\n    fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp,fisttp,frndint,\n    sselog,sselog1,sseiadd,sseiadd1,sseishft,sseishft1,sseimul,\n-   sse,ssemov,sseadd,ssemul,ssecmp,ssecomi,ssecvt,ssecvt1,sseicvt,ssediv,sseins,\n-   ssemuladd,sse4arg,lwp,\n+   sse,ssemov,sseadd,sseadd1,ssemul,ssecmp,ssecomi,ssecvt,ssecvt1,sseicvt,\n+   ssediv,sseins,ssemuladd,sse4arg,lwp,\n    mmx,mmxmov,mmxadd,mmxmul,mmxcmp,mmxcvt,mmxshft\"\n   (const_string \"other\"))\n \n@@ -342,7 +342,7 @@\n   (cond [(eq_attr \"type\" \"fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp,fisttp,frndint\")\n \t   (const_string \"i387\")\n \t (eq_attr \"type\" \"sselog,sselog1,sseiadd,sseiadd1,sseishft,sseishft1,sseimul,\n-\t\t\t  sse,ssemov,sseadd,ssemul,ssecmp,ssecomi,ssecvt,\n+\t\t\t  sse,ssemov,sseadd,sseadd1,ssemul,ssecmp,ssecomi,ssecvt,\n \t\t\t  ssecvt1,sseicvt,ssediv,sseins,ssemuladd,sse4arg\")\n \t   (const_string \"sse\")\n \t (eq_attr \"type\" \"mmx,mmxmov,mmxadd,mmxmul,mmxcmp,mmxcvt,mmxshft\")\n@@ -599,7 +599,7 @@\n \t\t   imov,imovx,icmp,test,bitmanip,\n \t\t   fmov,fcmp,fsgn,\n \t\t   sse,ssemov,ssecmp,ssecomi,ssecvt,ssecvt1,sseicvt,sselog1,\n-\t\t   sseiadd1,mmx,mmxmov,mmxcmp,mmxcvt\")\n+\t\t   sseadd1,sseiadd1,mmx,mmxmov,mmxcmp,mmxcvt\")\n \t      (match_operand 2 \"memory_operand\"))\n \t   (const_string \"load\")\n \t (and (eq_attr \"type\" \"icmov,ssemuladd,sse4arg\")"}, {"sha": "f82b694beaddf60fdcda9d59528f3bc40eb399ec", "filename": "gcc/config/i386/ppro.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2Fconfig%2Fi386%2Fppro.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2Fconfig%2Fi386%2Fppro.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fppro.md?ref=b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e", "patch": "@@ -509,14 +509,14 @@\n \t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n-\t\t\t\t\t(eq_attr \"type\" \"sseadd\"))))\n+\t\t\t\t\t(eq_attr \"type\" \"sseadd,sseadd1\"))))\n \t\t\t \"decodern,p1\")\n \n (define_insn_reservation \"ppro_sse_add_SF_load\" 3\n \t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n-\t\t\t\t\t(eq_attr \"type\" \"sseadd\"))))\n+\t\t\t\t\t(eq_attr \"type\" \"sseadd,sseadd1\"))))\n \t\t\t \"decoder0,p2+p1\")\n \n (define_insn_reservation \"ppro_sse_cmp_SF\" 3\n@@ -619,14 +619,14 @@\n \t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n-\t\t\t\t\t(eq_attr \"type\" \"sseadd\"))))\n+\t\t\t\t\t(eq_attr \"type\" \"sseadd,sseadd1\"))))\n \t\t\t \"decoder0,p1*2\")\n \n (define_insn_reservation \"ppro_sse_add_V4SF_load\" 3\n \t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n-\t\t\t\t\t(eq_attr \"type\" \"sseadd\"))))\n+\t\t\t\t\t(eq_attr \"type\" \"sseadd,sseadd1\"))))\n \t\t\t \"decoder0,(p2+p1)*2\")\n \n (define_insn_reservation \"ppro_sse_cmp_V4SF\" 3"}, {"sha": "a73c815eb56964093d66c510a57a028d9f2628e2", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 85, "deletions": 5, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e", "patch": "@@ -1216,28 +1216,108 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V4DF\")])\n \n-(define_insn \"sse3_h<plusminus_insn>v2df3\"\n+(define_expand \"sse3_haddv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\")\n+\t(vec_concat:V2DF\n+\t  (plus:DF\n+\t    (vec_select:DF\n+\t      (match_operand:V2DF 1 \"register_operand\")\n+\t      (parallel [(const_int 0)]))\n+\t    (vec_select:DF (match_dup 1) (parallel [(const_int 1)])))\n+\t  (plus:DF\n+\t    (vec_select:DF\n+\t      (match_operand:V2DF 2 \"nonimmediate_operand\")\n+\t      (parallel [(const_int 0)]))\n+\t    (vec_select:DF (match_dup 2) (parallel [(const_int 1)])))))]\n+  \"TARGET_SSE3\")\n+\n+(define_insn \"*sse3_haddv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x\")\n+\t(vec_concat:V2DF\n+\t  (plus:DF\n+\t    (vec_select:DF\n+\t      (match_operand:V2DF 1 \"register_operand\" \"0,x\")\n+\t      (parallel [(match_operand:SI 3 \"const_0_to_1_operand\")]))\n+\t    (vec_select:DF\n+\t      (match_dup 1)\n+\t      (parallel [(match_operand:SI 4 \"const_0_to_1_operand\")])))\n+\t  (plus:DF\n+\t    (vec_select:DF\n+\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm,xm\")\n+\t      (parallel [(match_operand:SI 5 \"const_0_to_1_operand\")]))\n+\t    (vec_select:DF\n+\t      (match_dup 2)\n+\t      (parallel [(match_operand:SI 6 \"const_0_to_1_operand\")])))))]\n+  \"TARGET_SSE3\n+   && INTVAL (operands[3]) != INTVAL (operands[4])\n+   && INTVAL (operands[5]) != INTVAL (operands[6])\"\n+  \"@\n+   haddpd\\t{%2, %0|%0, %2}\n+   vhaddpd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseadd\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"V2DF\")])\n+\n+(define_insn \"sse3_hsubv2df3\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x\")\n \t(vec_concat:V2DF\n-\t  (plusminus:DF\n+\t  (minus:DF\n \t    (vec_select:DF\n \t      (match_operand:V2DF 1 \"register_operand\" \"0,x\")\n \t      (parallel [(const_int 0)]))\n \t    (vec_select:DF (match_dup 1) (parallel [(const_int 1)])))\n-\t  (plusminus:DF\n+\t  (minus:DF\n \t    (vec_select:DF\n \t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm,xm\")\n \t      (parallel [(const_int 0)]))\n \t    (vec_select:DF (match_dup 2) (parallel [(const_int 1)])))))]\n   \"TARGET_SSE3\"\n   \"@\n-   h<plusminus_mnemonic>pd\\t{%2, %0|%0, %2}\n-   vh<plusminus_mnemonic>pd\\t{%2, %1, %0|%0, %1, %2}\"\n+   hsubpd\\t{%2, %0|%0, %2}\n+   vhsubpd\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseadd\")\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"V2DF\")])\n \n+(define_insn \"*sse3_haddv2df3_low\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=x,x\")\n+\t(plus:DF\n+\t  (vec_select:DF\n+\t    (match_operand:V2DF 1 \"register_operand\" \"0,x\")\n+\t    (parallel [(match_operand:SI 2 \"const_0_to_1_operand\")]))\n+\t  (vec_select:DF\n+\t    (match_dup 1)\n+\t    (parallel [(match_operand:SI 3 \"const_0_to_1_operand\")]))))]\n+  \"TARGET_SSE3\n+   && INTVAL (operands[2]) != INTVAL (operands[3])\"\n+  \"@\n+   haddpd\\t{%0, %0|%0, %0}\n+   vhaddpd\\t{%1, %1, %0|%0, %1, %1}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseadd1\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"V2DF\")])\n+\n+(define_insn \"*sse3_hsubv2df3_low\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=x,x\")\n+\t(minus:DF\n+\t  (vec_select:DF\n+\t    (match_operand:V2DF 1 \"register_operand\" \"0,x\")\n+\t    (parallel [(const_int 0)]))\n+\t  (vec_select:DF\n+\t    (match_dup 1)\n+\t    (parallel [(const_int 1)]))))]\n+  \"TARGET_SSE3\"\n+  \"@\n+   hsubpd\\t{%0, %0|%0, %0}\n+   vhsubpd\\t{%1, %1, %0|%0, %1, %1}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseadd1\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"V2DF\")])\n+\n (define_insn \"avx_h<plusminus_insn>v8sf3\"\n   [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n \t(vec_concat:V8SF"}, {"sha": "08e0a6902834b03f1bb1cdc024312f5a8958567c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e", "patch": "@@ -1,3 +1,8 @@\n+2012-10-08  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR target/54400\n+\t* gcc.target/i386/pr54400.c: New testcase.\n+\n 2012-10-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/54858"}, {"sha": "5ed5ba066444475bcafa04d5354d3f50b125ca6b", "filename": "gcc/testsuite/gcc.target/i386/pr54400.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54400.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54400.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54400.c?ref=b790dea2eb93fa958ec9b3f62adbbb1d1e633d1e", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse3 -mfpmath=sse\" } */\n+\n+#include <x86intrin.h>\n+\n+double f (__m128d p)\n+{\n+  return p[0] - p[1];\n+}\n+\n+double g1 (__m128d p)\n+{\n+  return p[0] + p[1];\n+}\n+\n+double g2 (__m128d p)\n+{\n+  return p[1] + p[0];\n+}\n+\n+__m128d h (__m128d p, __m128d q)\n+{\n+  __m128d r = { p[0] - p[1], q[0] - q[1] };\n+  return r;\n+}\n+\n+__m128d i1 (__m128d p, __m128d q)\n+{\n+  __m128d r = { p[0] + p[1], q[0] + q[1] };\n+  return r;\n+}\n+\n+__m128d i2 (__m128d p, __m128d q)\n+{\n+  __m128d r = { p[0] + p[1], q[1] + q[0] };\n+  return r;\n+}\n+\n+__m128d i3 (__m128d p, __m128d q)\n+{\n+  __m128d r = { p[1] + p[0], q[0] + q[1] };\n+  return r;\n+}\n+\n+__m128d i4 (__m128d p, __m128d q)\n+{\n+  __m128d r = { p[1] + p[0], q[1] + q[0] };\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler-times \"hsubpd\" 2 } } */\n+/* { dg-final { scan-assembler-times \"haddpd\" 6 } } */\n+/* { dg-final { scan-assembler-not \"unpck\" } } */"}]}