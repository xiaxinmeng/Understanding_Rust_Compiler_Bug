{"sha": "5d5885c99c8b6948c3786860038a5674e3ba85e9", "node_id": "C_kwDOANBUbNoAKDVkNTg4NWM5OWM4YjY5NDhjMzc4Njg2MDAzOGE1Njc0ZTNiYTg1ZTk", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-15T00:17:02Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-15T00:17:02Z"}, "message": "Daily bump.", "tree": {"sha": "ceab8ce206875bae022ec54c7b39395ea2c5e32f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceab8ce206875bae022ec54c7b39395ea2c5e32f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d5885c99c8b6948c3786860038a5674e3ba85e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5885c99c8b6948c3786860038a5674e3ba85e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d5885c99c8b6948c3786860038a5674e3ba85e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5885c99c8b6948c3786860038a5674e3ba85e9/comments", "author": null, "committer": null, "parents": [{"sha": "401aaa5983a7d31849b3b7a88f13eb6c7f74f11a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/401aaa5983a7d31849b3b7a88f13eb6c7f74f11a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/401aaa5983a7d31849b3b7a88f13eb6c7f74f11a"}], "stats": {"total": 440, "additions": 439, "deletions": 1}, "files": [{"sha": "c2526c7184186821e6ccffd0e803e4bd5c6f8b8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5885c99c8b6948c3786860038a5674e3ba85e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5885c99c8b6948c3786860038a5674e3ba85e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d5885c99c8b6948c3786860038a5674e3ba85e9", "patch": "@@ -1,3 +1,203 @@\n+2021-10-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (class back_threader): Add m_resolve.\n+\t(back_threader::back_threader): Same.\n+\t(back_threader::resolve_phi): Try to solve without looking back if\n+\tpossible.\n+\t(back_threader::find_paths_to_names): Same.\n+\t(try_thread_blocks): Pass resolve argument to back threader.\n+\t(pass_early_thread_jumps::execute): Same.\n+\n+2021-10-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* doc/invoke.texi: Remove max-fsm-thread-length,\n+\tmax-fsm-thread-paths, and fsm-maximum-phi-arguments.\n+\t* params.opt: Same.\n+\t* tree-ssa-threadbackward.c (back_threader::back_threader): Remove\n+\targument.\n+\t(back_threader_registry::back_threader_registry): Same.\n+\t(back_threader_profitability::profitable_path_p): Remove\n+\tparam_max_fsm_thread-length.\n+\t(back_threader_registry::register_path): Remove\n+\tm_max_allowable_paths.\n+\n+2021-10-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (class back_threader): Make m_imports\n+\tan auto_bitmap.\n+\t(back_threader::~back_threader): Do not release m_path.\n+\n+2021-10-14  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/102738\n+\t* vr-values.c (simplify_using_ranges::simplify): Handle RSHIFT_EXPR.\n+\n+2021-10-14  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* omp-general.c (omp_check_context_selector):  Move from c-omp.c.\n+\t(omp_mark_declare_variant): Move from c-omp.c.\n+\t(omp_context_name_list_prop): Update for Fortran strings.\n+\t* omp-general.h (omp_check_context_selector): New prototype.\n+\t(omp_mark_declare_variant): New prototype.\n+\n+2021-10-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_density_test): Move early\n+\texit test further up the function.\n+\n+2021-10-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/arm/arm.c (arm_add_stmt_cost): Delete.\n+\t(TARGET_VECTORIZE_ADD_STMT_COST): Delete.\n+\n+2021-10-14  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* doc/invoke.texi (Optimize Options): Add entry for\n+\tipa-cp-recursive-freq-factor.\n+\n+2021-10-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* match.pd: New rule.\n+\n+2021-10-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/102557\n+\t* ipa-modref-tree.h (modref_access_node::update2):\n+\tAlso check that parm_offset is unchanged.\n+\t(modref_ref_node::insert_access): Fix updating of\n+\tparameter.\n+\n+2021-10-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (back_threader::resolve_phi): Add\n+\tFIXME note.\n+\n+2021-10-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102659\n+\t* tree-if-conv.c (if_convertible_gimple_assign_stmt_p): Also\n+\trewrite pointer typed undefined overflow operations.\n+\t(predicate_statements): Likewise.  Make sure to emit invariant\n+\tconversions in the preheader.\n+\t* tree-vectorizer.c (vect_loop_vectorized_call): Look through\n+\tnon-empty preheaders.\n+\t* tree-data-ref.c (dr_analyze_indices): Strip useless\n+\tconversions to the MEM_REF base type.\n+\n+2021-10-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* common.opt: Stop using AUTODETECT_VALUE\n+\tand use EnabledBy where possible.\n+\t* opts.c: Enable OPT_fvar_tracking with optimize >= 1.\n+\t* toplev.c (AUTODETECT_VALUE): Remove macro.\n+\t(process_options): Simplify by using EnabledBy and\n+\tOPT_fvar_tracking.  Use OPTION_SET_P macro instead of\n+\tAUTODETECT_VALUE.\n+\n+2021-10-14  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vld1_s8_x3): Use signed type for\n+\tpointer parameter.\n+\t(vld1_s32_x3): Likewise.\n+\n+2021-10-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/102736\n+\tPR tree-optimization/102736\n+\t* gimple-range-path.cc (path_range_query::range_on_path_entry):\n+\tAssert that the requested range is defined outside the path.\n+\t(path_range_query::ssa_range_in_phi): Do not call\n+\trange_on_path_entry for SSA names that are defined within the\n+\tpath.\n+\n+2021-10-14  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin-driver.c (darwin_find_version_from_kernel):\n+\tQuote internal identifiers and avoid contractions in\n+\twarnings.\n+\t(darwin_default_min_version): Likewise.\n+\t(darwin_driver_init): Likewise.\n+\n+2021-10-14  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* params.opt (ipa-cp-recursive-freq-factor): New.\n+\t* ipa-cp.c (ipcp_value): Switch to inline initialization.  New members\n+\tscc_no, self_recursion_generated_level, same_scc and\n+\tself_recursion_generated_p.\n+\t(ipcp_lattice::add_value): Replaced parameter unlimited with\n+\tsame_lat_gen_level, usit it determine limit of values and store it to\n+\tthe value.\n+\t(ipcp_lattice<valtype>::print): Dump the new fileds.\n+\t(allocate_and_init_ipcp_value): Take same_lat_gen_level as a new\n+\tparameter and store it to the new value.\n+\t(self_recursively_generated_p): Removed.\n+\t(propagate_vals_across_arith_jfunc): Use self_recursion_generated_p\n+\tinstead of self_recursively_generated_p, store self generation level\n+\tto such values.\n+\t(value_topo_info<valtype>::add_val): Set scc_no.\n+\t(value_topo_info<valtype>::propagate_effects): Multiply frequencies of\n+\trecursively feeding values and self generated values by appropriate\n+\tnew factors.\n+\n+2021-10-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_add_stmt_cost): Remove\n+\tredundant test for flag_vect_cost_model.\n+\n+2021-10-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* bitmap.c (debug): New overloaded function for auto_bitmaps.\n+\t* bitmap.h (debug): Same.\n+\n+2021-10-14  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm512_mask_fcmadd_pch):\n+\tAdjust builtin call.\n+\t(_mm512_mask3_fcmadd_pch): Likewise.\n+\t(_mm512_mask_fmadd_pch): Likewise\n+\t(_mm512_mask3_fmadd_pch): Likewise\n+\t(_mm512_mask_fcmadd_round_pch): Likewise\n+\t(_mm512_mask3_fcmadd_round_pch): Likewise\n+\t(_mm512_mask_fmadd_round_pch): Likewise\n+\t(_mm512_mask3_fmadd_round_pch): Likewise\n+\t(_mm_mask_fcmadd_sch): Likewise\n+\t(_mm_mask3_fcmadd_sch): Likewise\n+\t(_mm_mask_fmadd_sch): Likewise\n+\t(_mm_mask3_fmadd_sch): Likewise\n+\t(_mm_mask_fcmadd_round_sch): Likewise\n+\t(_mm_mask3_fcmadd_round_sch): Likewise\n+\t(_mm_mask_fmadd_round_sch): Likewise\n+\t(_mm_mask3_fmadd_round_sch): Likewise\n+\t(_mm_fcmadd_round_sch): Likewise\n+\t* config/i386/avx512fp16vlintrin.h (_mm_mask_fmadd_pch):\n+\tAdjust builtin call.\n+\t(_mm_mask3_fmadd_pch): Likewise\n+\t(_mm256_mask_fmadd_pch): Likewise\n+\t(_mm256_mask3_fmadd_pch): Likewise\n+\t(_mm_mask_fcmadd_pch): Likewise\n+\t(_mm_mask3_fcmadd_pch): Likewise\n+\t(_mm256_mask_fcmadd_pch): Likewise\n+\t(_mm256_mask3_fcmadd_pch): Likewise\n+\t* config/i386/i386-builtin.def: Add mask3 builtin for complex\n+\tfma, and adjust mask_builtin to corresponding expander.\n+\t* config/i386/i386-expand.c (ix86_expand_round_builtin):\n+\tSkip eraseing embedded rounding for expanders that emits\n+\tmultiple insns.\n+\t* config/i386/sse.md (complexmove): New mode_attr.\n+\t(<avx512>_fmaddc_<mode>_mask1<round_expand_name>): New expander.\n+\t(<avx512>_fcmaddc_<mode>_mask1<round_expand_name>): Likewise.\n+\t(avx512fp16_fmaddcsh_v8hf_mask1<round_expand_name>): Likewise.\n+\t(avx512fp16_fcmaddcsh_v8hf_mask1<round_expand_name>): Likewise.\n+\t(avx512fp16_fcmaddcsh_v8hf_mask3<round_expand_name>): Likewise.\n+\t(avx512fp16_fmaddcsh_v8hf_mask3<round_expand_name>): Likewise.\n+\t* config/i386/subst.md (round_embedded_complex): New subst.\n+\n+2021-10-14  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/pa.md (cbranchsf4): Disable if TARGET_SOFT_FLOAT.\n+\t(cbranchdf4): Likewise.\n+\tAdd missing move patterns for TARGET_SOFT_FLOAT.\n+\n 2021-10-13  Roger Sayle  <roger@nextmovesoftware.com>\n \n \t* config/i386/i386-expand.c (ix86_expand_vector_move):  Use a"}, {"sha": "86db4aa173894f24ff8d1b2e0ebb1fb72d22a077", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5885c99c8b6948c3786860038a5674e3ba85e9/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5885c99c8b6948c3786860038a5674e3ba85e9/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=5d5885c99c8b6948c3786860038a5674e3ba85e9", "patch": "@@ -1 +1 @@\n-20211014\n+20211015"}, {"sha": "5c96c746aa4e8e54b90e915ae93affe8a198d58a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5885c99c8b6948c3786860038a5674e3ba85e9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5885c99c8b6948c3786860038a5674e3ba85e9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5d5885c99c8b6948c3786860038a5674e3ba85e9", "patch": "@@ -1,3 +1,8 @@\n+2021-10-14  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* par-ch10.adb (P_Compilation_Unit): Reenable ada83 library\n+\tunit renaming test and error.\n+\n 2021-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (resolve_atomic_size): Declare."}, {"sha": "c5f59152ee295872db28208c1b8af528aecbf835", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5885c99c8b6948c3786860038a5674e3ba85e9/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5885c99c8b6948c3786860038a5674e3ba85e9/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5d5885c99c8b6948c3786860038a5674e3ba85e9", "patch": "@@ -1,3 +1,17 @@\n+2021-10-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-format.c (printf_length_specs, scanf_length_specs)\n+\t(print_char_table, scan_char_table): Support DFP formats for C2X.\n+\t* c-format.h (TEX_D32, TEX_D64, TEX_D128): Remove.\n+\t(T2X_D32, T2X_D64, T2X_D128): New macros.\n+\n+2021-10-14  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* c-omp.c (c_omp_check_context_selector): Rename to\n+\tomp_check_context_selector and move to omp-general.c.\n+\t(c_omp_mark_declare_variant): Rename to omp_mark_declare_variant and\n+\tmove to omp-general.c.\n+\n 2021-10-12  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-format.c (print_char_table): Add %b and %B formats."}, {"sha": "e75a6994b149eee1be4f60143e2bad141ce5ec6f", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5885c99c8b6948c3786860038a5674e3ba85e9/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5885c99c8b6948c3786860038a5674e3ba85e9/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=5d5885c99c8b6948c3786860038a5674e3ba85e9", "patch": "@@ -1,3 +1,9 @@\n+2021-10-14  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* c-parser.c (c_finish_omp_declare_variant): Change call from\n+\tc_omp_check_context_selector to omp_check_context_selector. Change\n+\tcall from c_omp_mark_declare_variant to omp_mark_declare_variant.\n+\n 2021-10-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_omp_structured_block_sequence): New function."}, {"sha": "6535141a60ea448fc0fd1477f84588544ac962b4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5885c99c8b6948c3786860038a5674e3ba85e9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5885c99c8b6948c3786860038a5674e3ba85e9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5d5885c99c8b6948c3786860038a5674e3ba85e9", "patch": "@@ -1,3 +1,10 @@\n+2021-10-14  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* decl.c (omp_declare_variant_finalize_one): Change call from\n+\tc_omp_mark_declare_variant to omp_mark_declare_variant.\n+\t* parser.c (cp_finish_omp_declare_variant): Change call from\n+\tc_omp_check_context_selector to omp_check_context_selector.\n+\n 2021-10-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.c (cp_parser_omp_structured_block): Remove disallow_omp_attrs"}, {"sha": "458c43944454054ad227451243030dee417202be", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5885c99c8b6948c3786860038a5674e3ba85e9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5885c99c8b6948c3786860038a5674e3ba85e9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5d5885c99c8b6948c3786860038a5674e3ba85e9", "patch": "@@ -1,3 +1,54 @@\n+2021-10-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102717\n+\t* simplify.c (gfc_simplify_reshape): Replace assert by error\n+\tmessage for negative elements in SHAPE array.\n+\n+2021-10-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102716\n+\t* check.c (gfc_check_shape): Reorder checks so that invalid KIND\n+\targuments can be detected.\n+\n+2021-10-14  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* gfortran.h (enum gfc_statement): Add ST_OMP_DECLARE_VARIANT.\n+\t(enum gfc_omp_trait_property_kind): New.\n+\t(struct gfc_omp_trait_property): New.\n+\t(gfc_get_omp_trait_property): New macro.\n+\t(struct gfc_omp_selector): New.\n+\t(gfc_get_omp_selector): New macro.\n+\t(struct gfc_omp_set_selector): New.\n+\t(gfc_get_omp_set_selector): New macro.\n+\t(struct gfc_omp_declare_variant): New.\n+\t(gfc_get_omp_declare_variant): New macro.\n+\t(struct gfc_namespace): Add omp_declare_variant field.\n+\t(gfc_free_omp_declare_variant_list): New prototype.\n+\t* match.h (gfc_match_omp_declare_variant): New prototype.\n+\t* openmp.c (gfc_free_omp_trait_property_list): New.\n+\t(gfc_free_omp_selector_list): New.\n+\t(gfc_free_omp_set_selector_list): New.\n+\t(gfc_free_omp_declare_variant_list): New.\n+\t(gfc_match_omp_clauses): Add extra optional argument.  Handle end of\n+\tclauses for context selectors.\n+\t(omp_construct_selectors, omp_device_selectors,\n+\tomp_implementation_selectors, omp_user_selectors): New.\n+\t(gfc_match_omp_context_selector): New.\n+\t(gfc_match_omp_context_selector_specification): New.\n+\t(gfc_match_omp_declare_variant): New.\n+\t* parse.c: Include tree-core.h and omp-general.h.\n+\t(decode_omp_directive): Handle 'declare variant'.\n+\t(case_omp_decl): Include ST_OMP_DECLARE_VARIANT.\n+\t(gfc_ascii_statement): Handle ST_OMP_DECLARE_VARIANT.\n+\t(gfc_parse_file): Initialize omp_requires_mask.\n+\t* symbol.c (gfc_free_namespace): Call\n+\tgfc_free_omp_declare_variant_list.\n+\t* trans-decl.c (gfc_get_extern_function_decl): Call\n+\tgfc_trans_omp_declare_variant.\n+\t(gfc_create_function_decl): Call gfc_trans_omp_declare_variant.\n+\t* trans-openmp.c (gfc_trans_omp_declare_variant): New.\n+\t* trans-stmt.h (gfc_trans_omp_declare_variant): New prototype.\n+\n 2021-10-13  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* dump-parse-tree.c (show_omp_clauses): Handle ancestor modifier,"}, {"sha": "0d9e3be991bf9b62a6215fe272888c2d2be60c99", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5885c99c8b6948c3786860038a5674e3ba85e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5885c99c8b6948c3786860038a5674e3ba85e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d5885c99c8b6948c3786860038a5674e3ba85e9", "patch": "@@ -1,3 +1,84 @@\n+2021-10-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/format/c11-dfp-printf-1.c,\n+\tgcc.dg/format/c11-dfp-scanf-1.c, gcc.dg/format/c2x-dfp-printf-1.c,\n+\tgcc.dg/format/c2x-dfp-scanf-1.c: New tests.\n+\n+2021-10-14  Raphael Moreira Zinsly  <rzinsly@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/unwind-backchain.c: New test.\n+\n+2021-10-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102717\n+\t* gfortran.dg/reshape_shape_2.f90: New test.\n+\n+2021-10-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102716\n+\t* gfortran.dg/shape_10.f90: New test.\n+\n+2021-10-14  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/102738\n+\t* gcc.dg/pr102738.c: New.\n+\n+2021-10-14  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/declare-variant-1.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-10.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-11.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-12.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-13.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-14.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-15.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-16.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-17.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-18.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-19.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-2.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-2a.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-3.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-4.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-5.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-6.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-7.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-8.f90: New test.\n+\t* gfortran.dg/gomp/declare-variant-9.f90: New test.\n+\n+2021-10-14  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* gcc.target/mips/msa-insert-split.c: Turn off vectorizer.\n+\n+2021-10-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/sve/pred-cond-reduc.c: New test.\n+\n+2021-10-14  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* gcc.dg/tree-ssa/predcom-3.c: Disable vectorizer.\n+\n+2021-10-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/102736\n+\t* gcc.dg/tree-ssa/pr102736.c: New test.\n+\n+2021-10-14  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add new mask3 builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfcmaddcsh-1a.c: Add scanning for\n+\tmask/mask3 intrinsic.\n+\t* gcc.target/i386/avx512fp16-vfmaddcsh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfcmaddcsh-1c.c: New test for\n+\t-mavx512vl.\n+\t* gcc.target/i386/avx512fp16-vfmaddcsh-1c.c: Ditto.\n+\n+2021-10-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* g++.dg/warn/Wuninitialized-13.C: Add -fno-tree-vectorize.\n+\n 2021-10-13  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/102630"}, {"sha": "8dfb0d61469979a9afa58bf0d707e4b3702425c0", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5885c99c8b6948c3786860038a5674e3ba85e9/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5885c99c8b6948c3786860038a5674e3ba85e9/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=5d5885c99c8b6948c3786860038a5674e3ba85e9", "patch": "@@ -1,3 +1,14 @@\n+2021-10-14  Raphael Moreira Zinsly  <rzinsly@linux.ibm.com>\n+\n+\t* config/rs6000/linux-unwind.h (struct rt_sigframe): Move it to\n+\toutside of get_regs() in order to use it in another function, this\n+\tis done twice: for __powerpc64__ and for !__powerpc64__.\n+\t(struct trace_arg): New struct.\n+\t(struct layout): New struct.\n+\t(ppc_backchain_fallback): New function.\n+\t* unwind.inc (_Unwind_Backtrace): Look for _URC_NORMAL_STOP code\n+\tstate and call MD_BACKCHAIN_FALLBACK.\n+\n 2021-10-13  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/90364"}, {"sha": "41ef255a2908131a6303d5348796d1c4124a9e29", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5885c99c8b6948c3786860038a5674e3ba85e9/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5885c99c8b6948c3786860038a5674e3ba85e9/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=5d5885c99c8b6948c3786860038a5674e3ba85e9", "patch": "@@ -1,3 +1,12 @@\n+2021-10-14  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* libgomp.texi (OpenMP 5.0): Update entry for declare variant\n+\tdirective.\n+\n+2021-10-14  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/declare-variant-1.f90: New test.\n+\n 2021-10-12  Julian Brown  <julian@codesourcery.com>\n \n \t* target.c (gomp_copy_host2dev): Release device lock on cbuf"}, {"sha": "fa0036b361e87103bb60fc0d54a35eaaeb81b2a3", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5885c99c8b6948c3786860038a5674e3ba85e9/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5885c99c8b6948c3786860038a5674e3ba85e9/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=5d5885c99c8b6948c3786860038a5674e3ba85e9", "patch": "@@ -1,3 +1,12 @@\n+2021-10-14  Lu\u00eds Ferreira  <contact@lsferreira.net>\n+\n+\t* testsuite/d-demangle-expected: Add test case for function literals.\n+\n+2021-10-14  Lu\u00eds Ferreira  <contact@lsferreira.net>\n+\n+\t* testsuite/d-demangle-expected: Add test cases for simple special\n+\tmangles.\n+\n 2021-10-12  Lu\u00eds Ferreira  <contact@lsferreira.net>\n \n \t* d-demangle.c (dlang_parse_qualified): Remove redudant parenthesis"}, {"sha": "385291428456b488366bd02afa3f1438de9de548", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5885c99c8b6948c3786860038a5674e3ba85e9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5885c99c8b6948c3786860038a5674e3ba85e9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5d5885c99c8b6948c3786860038a5674e3ba85e9", "patch": "@@ -1,3 +1,48 @@\n+2021-10-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/variant (__variant::__get(in_place_index_t<N>, U&&)):\n+\tRename to __get_n and remove first argument. Replace pair of\n+\toverloads with a single function using 'if constexpr'.\n+\t(__variant::__get(Variant&&)): Adjust to use __get_n.\n+\n+2021-10-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_path.h (path(path&&)): Make unconditionally\n+\tnoexcept.\n+\t(path::_S_convert(T)): Add condtional noexcept.\n+\n+2021-10-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/102743\n+\t* include/bits/fs_path.h (path::_S_convert(T)): Fix condition\n+\tfor returning the same string unchanged.\n+\n+2021-10-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex.h: Check __cpp_inline_variables instead of\n+\t__cplusplus.\n+\n+2021-10-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/is_layout_compatible/version.cc: Check\n+\tcorrect macro.\n+\n+2021-10-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_construct.h (_Construct): Use\n+\tstd::construct_at when constant evaluated.\n+\t* include/std/optional (_Storage, _Optional_payload, optional):\n+\tAdd constexpr as specified by P2231R1.\n+\t* include/std/version (__cpp_lib_optional): Update value for\n+\tC++20.\n+\t* testsuite/20_util/optional/requirements.cc: Check feature test\n+\tmacro.\n+\t* testsuite/20_util/optional/constexpr/assign.cc: New test.\n+\t* testsuite/20_util/optional/constexpr/cons/conv.cc: New test.\n+\t* testsuite/20_util/optional/constexpr/modifiers.cc: New test.\n+\t* testsuite/20_util/optional/constexpr/swap.cc: New test.\n+\t* testsuite/20_util/optional/version.cc: New test.\n+\n 2021-10-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/fs_path.h (__detail::__is_contiguous): Add"}]}