{"sha": "40449a90d7701eb70b5ccecb0f05290d442983e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA0NDlhOTBkNzcwMWViNzBiNWNjZWNiMGYwNTI5MGQ0NDI5ODNlOQ==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2009-05-21T03:06:12Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2009-05-21T03:06:12Z"}, "message": "tm.texi (Misc): Document TARGET_INVALID_PARAMETER_TYPE...\n\n2009-05-20  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/tm.texi (Misc): Document TARGET_INVALID_PARAMETER_TYPE,\n\tTARGET_INVALID_RETURN_TYPE, TARGET_PROMOTED_TYPE, and\n\tTARGET_CONVERT_TO_TYPE.\n\t* hooks.c (hook_tree_const_tree_null): Define.\n\t* hooks.h (hook_tree_const_tree_null): Declare.\n\t* target.h (struct gcc_target):  Add invalid_parameter_type,\n\tinvalid_return_type, promoted_type, and convert_to_type fields.\n\t* target-def.h: (TARGET_INVALID_PARAMETER_TYPE): Define.\n\t(TARGET_INVALID_RETURN_TYPE): Define.\n\t(TARGET_PROMOTED_TYPE): Define.\n\t(TARGET_CONVERT_TO_TYPE): Define.\n\t(TARGET_INITIALIZER): Update for new fields.\n\t* c-decl.c (grokdeclarator): Check targetm.invalid_return_type.\n\t(grokparms): Check targetm.invalid_parameter_type.\n\t* c-typeck.c (default_conversion): Check targetm.promoted_type.\n\t* c-convert.c (convert): Check targetm.convert_to_type.\n\n\tgcc/cp/\n\t* typeck.c (default_conversion): Check targetm.promoted_type.\n\t* decl.c (grokdeclarator): Check targetm.invalid_return_type.\n\t(grokparms): Check targetm.invalid_parameter_type.\n\t* cvt.c (ocp_convert): Check targetm.convert_to_type.\n\t(build_expr_type_conversion): Check targetm.promoted_type.\n\nFrom-SVN: r147758", "tree": {"sha": "09231bb5a5f48721cdd7033ca7c944b29771f3cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09231bb5a5f48721cdd7033ca7c944b29771f3cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40449a90d7701eb70b5ccecb0f05290d442983e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40449a90d7701eb70b5ccecb0f05290d442983e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40449a90d7701eb70b5ccecb0f05290d442983e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40449a90d7701eb70b5ccecb0f05290d442983e9/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d29d4507b20843bca8000bb9ebeeff3637dd31ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29d4507b20843bca8000bb9ebeeff3637dd31ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d29d4507b20843bca8000bb9ebeeff3637dd31ba"}], "stats": {"total": 152, "additions": 151, "deletions": 1}, "files": [{"sha": "b5afced95de68ff133df73e045524583548e2002", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40449a90d7701eb70b5ccecb0f05290d442983e9", "patch": "@@ -1,3 +1,22 @@\n+2009-05-20  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/tm.texi (Misc): Document TARGET_INVALID_PARAMETER_TYPE,\n+\tTARGET_INVALID_RETURN_TYPE, TARGET_PROMOTED_TYPE, and\n+\tTARGET_CONVERT_TO_TYPE.\n+\t* hooks.c (hook_tree_const_tree_null): Define.\n+\t* hooks.h (hook_tree_const_tree_null): Declare.\n+\t* target.h (struct gcc_target):  Add invalid_parameter_type,\n+\tinvalid_return_type, promoted_type, and convert_to_type fields.\n+\t* target-def.h: (TARGET_INVALID_PARAMETER_TYPE): Define.\n+\t(TARGET_INVALID_RETURN_TYPE): Define.\n+\t(TARGET_PROMOTED_TYPE): Define.\n+\t(TARGET_CONVERT_TO_TYPE): Define.\n+\t(TARGET_INITIALIZER): Update for new fields.\n+\t* c-decl.c (grokdeclarator): Check targetm.invalid_return_type.\n+\t(grokparms): Check targetm.invalid_parameter_type.\n+\t* c-typeck.c (default_conversion): Check targetm.promoted_type.\n+\t* c-convert.c (convert): Check targetm.convert_to_type.\n+\n 2009-05-20  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* config/mips/mips.md (*extenddi_truncate<mode>,"}, {"sha": "5349d7a77e87bf62078f98e435c0fc0e0b4bb82a", "filename": "gcc/c-convert.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-convert.c?ref=40449a90d7701eb70b5ccecb0f05290d442983e9", "patch": "@@ -86,6 +86,9 @@ convert (tree type, tree expr)\n \n   if (type == TREE_TYPE (expr))\n     return expr;\n+  ret = targetm.convert_to_type (type, expr);\n+  if (ret)\n+      return ret;\n \n   STRIP_TYPE_NOPS (e);\n "}, {"sha": "2aa018faf5802d2fda2e67108b97a314da5f1209", "filename": "gcc/c-decl.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=40449a90d7701eb70b5ccecb0f05290d442983e9", "patch": "@@ -4202,6 +4202,7 @@ grokdeclarator (const struct c_declarator *declarator,\n   bool bitfield = width != NULL;\n   tree element_type;\n   struct c_arg_info *arg_info = 0;\n+  const char *errmsg;\n   tree expr_dummy;\n   bool expr_const_operands_dummy;\n \n@@ -4835,6 +4836,12 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t  error (\"type name declared as function returning an array\");\n \t\ttype = integer_type_node;\n \t      }\n+\t    errmsg = targetm.invalid_return_type (type);\n+\t    if (errmsg)\n+\t      {\n+\t\terror (errmsg);\n+\t\ttype = integer_type_node;\n+\t      }\n \n \t    /* Construct the function type and go to the next\n \t       inner layer of declarator.  */\n@@ -5381,6 +5388,7 @@ grokparms (struct c_arg_info *arg_info, bool funcdef_flag)\n     {\n       tree parm, type, typelt;\n       unsigned int parmno;\n+      const char *errmsg;\n \n       /* If there is a parameter of incomplete type in a definition,\n \t this is an error.  In a declaration this is valid, and a\n@@ -5424,6 +5432,14 @@ grokparms (struct c_arg_info *arg_info, bool funcdef_flag)\n \t\t}\n \t    }\n \n+\t  errmsg = targetm.invalid_parameter_type (type);\n+\t  if (errmsg)\n+\t    {\n+\t      error (errmsg);\n+\t      TREE_VALUE (typelt) = error_mark_node;\n+\t      TREE_TYPE (parm) = error_mark_node;\n+\t    }\n+\n \t  if (DECL_NAME (parm) && TREE_USED (parm))\n \t    warn_if_shadowing (parm);\n \t}"}, {"sha": "1a1b009398cff6555e37d42bf5885f50e907d246", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=40449a90d7701eb70b5ccecb0f05290d442983e9", "patch": "@@ -1766,6 +1766,7 @@ default_conversion (tree exp)\n   tree orig_exp;\n   tree type = TREE_TYPE (exp);\n   enum tree_code code = TREE_CODE (type);\n+  tree promoted_type;\n \n   /* Functions and arrays have been converted during parsing.  */\n   gcc_assert (code != FUNCTION_TYPE);\n@@ -1793,6 +1794,10 @@ default_conversion (tree exp)\n   if (exp == error_mark_node)\n     return error_mark_node;\n \n+  promoted_type = targetm.promoted_type (type);\n+  if (promoted_type)\n+    return convert (promoted_type, exp);\n+\n   if (INTEGRAL_TYPE_P (type))\n     return perform_integral_promotions (exp);\n "}, {"sha": "626df30bbccadfe8f017ff06e8ee4c59ff883758", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=40449a90d7701eb70b5ccecb0f05290d442983e9", "patch": "@@ -1,3 +1,11 @@\n+2009-05-20  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* typeck.c (default_conversion): Check targetm.promoted_type.\n+\t* decl.c (grokdeclarator): Check targetm.invalid_return_type.\n+\t(grokparms): Check targetm.invalid_parameter_type.\n+\t* cvt.c (ocp_convert): Check targetm.convert_to_type.\n+\t(build_expr_type_conversion): Check targetm.promoted_type.\n+\n 2009-05-19  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \t* typeck.c (build_binary_op): Allow % on integal vectors."}, {"sha": "daf145f90ad467bff9ed99468588674ddc3874f7", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=40449a90d7701eb70b5ccecb0f05290d442983e9", "patch": "@@ -581,6 +581,7 @@ ocp_convert (tree type, tree expr, int convtype, int flags)\n   tree e = expr;\n   enum tree_code code = TREE_CODE (type);\n   const char *invalid_conv_diag;\n+  tree e1;\n \n   if (error_operand_p (e) || type == error_mark_node)\n     return error_mark_node;\n@@ -629,6 +630,10 @@ ocp_convert (tree type, tree expr, int convtype, int flags)\n \t}\n     }\n \n+  e1 = targetm.convert_to_type (type, e);\n+  if (e1)\n+    return e1;\n+\n   if (code == VOID_TYPE && (convtype & CONV_STATIC))\n     {\n       e = convert_to_void (e, /*implicit=*/NULL, tf_warning_or_error);\n@@ -1251,11 +1256,18 @@ build_expr_type_conversion (int desires, tree expr, bool complain)\n tree\n type_promotes_to (tree type)\n {\n+  tree promoted_type;\n+\n   if (type == error_mark_node)\n     return error_mark_node;\n \n   type = TYPE_MAIN_VARIANT (type);\n \n+  /* Check for promotions of target-defined types first.  */\n+  promoted_type = targetm.promoted_type (type);\n+  if (promoted_type)\n+    return promoted_type;\n+\n   /* bool always promotes to int (not unsigned), even if it's the same\n      size.  */\n   if (type == boolean_type_node)"}, {"sha": "433d08905fb9a1e8cf273151ca1332480ef6a35c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=40449a90d7701eb70b5ccecb0f05290d442983e9", "patch": "@@ -7606,6 +7606,7 @@ grokdeclarator (const cp_declarator *declarator,\n   bool parameter_pack_p = declarator? declarator->parameter_pack_p : false;\n   bool set_no_warning = false;\n   bool template_type_arg = false;\n+  const char *errmsg;\n \n   signed_p = declspecs->specs[(int)ds_signed];\n   unsigned_p = declspecs->specs[(int)ds_unsigned];\n@@ -8285,6 +8286,12 @@ grokdeclarator (const cp_declarator *declarator,\n \t\ttype_quals = TYPE_UNQUALIFIED;\n \t\tset_no_warning = true;\n \t      }\n+\t    errmsg = targetm.invalid_return_type (type);\n+\t    if (errmsg)\n+\t      {\n+\t\terror (errmsg);\n+\t\ttype = integer_type_node;\n+\t      }\n \n \t    /* Error about some types functions can't return.  */\n \n@@ -9677,6 +9684,7 @@ grokparms (tree parmlist, tree *parms)\n       tree type = NULL_TREE;\n       tree init = TREE_PURPOSE (parm);\n       tree decl = TREE_VALUE (parm);\n+      const char *errmsg;\n \n       if (parm == void_list_node)\n \tbreak;\n@@ -9710,6 +9718,14 @@ grokparms (tree parmlist, tree *parms)\n \t  init = NULL_TREE;\n \t}\n \n+      if (type != error_mark_node\n+\t  && (errmsg = targetm.invalid_parameter_type (type)))\n+\t{\n+\t  error (errmsg);\n+\t  type = error_mark_node;\n+\t  TREE_TYPE (decl) = error_mark_node;\n+\t}\n+\n       if (type != error_mark_node)\n \t{\n \t  if (deprecated_state != DEPRECATED_SUPPRESS)"}, {"sha": "87138bda95cdb6c54fdb9561502d4e5fb2ff72c1", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=40449a90d7701eb70b5ccecb0f05290d442983e9", "patch": "@@ -1699,10 +1699,14 @@ decay_conversion (tree exp)\n tree\n default_conversion (tree exp)\n {\n+  /* Check for target-specific promotions.  */\n+  tree promoted_type = targetm.promoted_type (TREE_TYPE (exp));\n+  if (promoted_type)\n+    exp = cp_convert (promoted_type, exp);\n   /* Perform the integral promotions first so that bitfield\n      expressions (which may promote to \"int\", even if the bitfield is\n      declared \"unsigned\") are promoted correctly.  */\n-  if (INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P (TREE_TYPE (exp)))\n+  else if (INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P (TREE_TYPE (exp)))\n     exp = perform_integral_promotions (exp);\n   /* Perform the other conversions.  */\n   exp = decay_conversion (exp);"}, {"sha": "67e1ca6d85799d3b43abba77ed7fd29e0566e83f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=40449a90d7701eb70b5ccecb0f05290d442983e9", "patch": "@@ -10781,6 +10781,38 @@ and @var{type2}, or @code{NULL} if validity should be determined by\n the front end.\n @end deftypefn\n \n+@deftypefn {Target Hook} {const char *} TARGET_INVALID_PARAMETER_TYPE (tree @var{type})\n+If defined, this macro returns the diagnostic message when it is\n+invalid for functions to include parameters of type @var{type}, \n+or @code{NULL} if validity should be determined by\n+the front end.  This is currently used only by the C and C++ front ends.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} {const char *} TARGET_INVALID_RETURN_TYPE (tree @var{type})\n+If defined, this macro returns the diagnostic message when it is\n+invalid for functions to have return type @var{type}, \n+or @code{NULL} if validity should be determined by\n+the front end.  This is currently used only by the C and C++ front ends.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} {tree} TARGET_PROMOTED_TYPE (tree @var{type})\n+If defined, this target hook returns the type to which values of \n+@var{type} should be promoted when they appear in expressions, \n+analogous to the integer promotions, or @code{NULL_TREE} to use the\n+front end's normal promotion rules.  This hook is useful when there are\n+target-specific types with special promotion rules.\n+This is currently used only by the C and C++ front ends.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} {tree} TARGET_CONVERT_TO_TYPE (tree @var{type}, tree @var{expr})\n+If defined, this hook returns the result of converting @var{expr} to \n+@var{type}.  It should return the converted expression, \n+or @code{NULL_TREE} to apply the front end's normal conversion rules.\n+This hook is useful when there are target-specific types with special \n+conversion rules.\n+This is currently used only by the C and C++ front ends.\n+@end deftypefn\n+\n @defmac TARGET_USE_JCR_SECTION\n This macro determines whether to use the JCR section to register Java\n classes. By default, TARGET_USE_JCR_SECTION is defined to 1 if both"}, {"sha": "5af3cd1c411630e510447848795f930a6d04f954", "filename": "gcc/hooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=40449a90d7701eb70b5ccecb0f05290d442983e9", "patch": "@@ -328,3 +328,10 @@ hook_constcharptr_int_const_tree_const_tree_null (int i ATTRIBUTE_UNUSED,\n {\n   return NULL;\n }\n+\n+/* Generic hook that takes a const_tree and returns NULL_TREE.  */\n+tree\n+hook_tree_const_tree_null (const_tree t ATTRIBUTE_UNUSED)\n+{\n+  return NULL;\n+}"}, {"sha": "b057d5d61180fec1b6800979d7c9848fbb6c6b38", "filename": "gcc/hooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=40449a90d7701eb70b5ccecb0f05290d442983e9", "patch": "@@ -63,6 +63,8 @@ extern int hook_int_rtx_0 (rtx);\n extern int hook_int_rtx_bool_0 (rtx, bool);\n extern int hook_int_size_t_constcharptr_int_0 (size_t, const char *, int);\n \n+extern tree hook_tree_const_tree_null (const_tree);\n+\n extern tree hook_tree_tree_tree_null (tree, tree);\n extern tree hook_tree_tree_tree_tree_null (tree, tree, tree);\n extern tree hook_tree_tree_tree_tree_3rd_identity (tree, tree, tree);"}, {"sha": "2de89a001d3535d60f6aa39b3a650806fb5a3384", "filename": "gcc/target-def.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=40449a90d7701eb70b5ccecb0f05290d442983e9", "patch": "@@ -536,6 +536,10 @@\n #define TARGET_INVALID_CONVERSION hook_constcharptr_const_tree_const_tree_null\n #define TARGET_INVALID_UNARY_OP hook_constcharptr_int_const_tree_null\n #define TARGET_INVALID_BINARY_OP hook_constcharptr_int_const_tree_const_tree_null\n+#define TARGET_INVALID_PARAMETER_TYPE hook_constcharptr_const_tree_null\n+#define TARGET_INVALID_RETURN_TYPE hook_constcharptr_const_tree_null\n+#define TARGET_PROMOTED_TYPE hook_tree_const_tree_null\n+#define TARGET_CONVERT_TO_TYPE hook_tree_tree_tree_null\n \n #define TARGET_FIXED_CONDITION_CODE_REGS hook_bool_uintp_uintp_false\n \n@@ -922,6 +926,10 @@\n   TARGET_INVALID_CONVERSION,\t\t\t\\\n   TARGET_INVALID_UNARY_OP,\t\t\t\\\n   TARGET_INVALID_BINARY_OP,\t\t\t\\\n+  TARGET_INVALID_PARAMETER_TYPE,\t\t\\\n+  TARGET_INVALID_RETURN_TYPE,\t\t\t\\\n+  TARGET_PROMOTED_TYPE,\t\t\t\t\\\n+  TARGET_CONVERT_TO_TYPE,\t\t\t\\\n   TARGET_IRA_COVER_CLASSES,\t\t\t\\\n   TARGET_SECONDARY_RELOAD,\t\t\t\\\n   TARGET_EXPAND_TO_RTL_HOOK,\t\t\t\\"}, {"sha": "d851425a6a7bc59312e20997d2fade4edd77af74", "filename": "gcc/target.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40449a90d7701eb70b5ccecb0f05290d442983e9/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=40449a90d7701eb70b5ccecb0f05290d442983e9", "patch": "@@ -913,6 +913,24 @@ struct gcc_target\n      is not permitted on TYPE1 and TYPE2, NULL otherwise.  */\n   const char *(*invalid_binary_op) (int op, const_tree type1, const_tree type2);\n \n+  /* Return the diagnostic message string if TYPE is not valid as a\n+     function parameter type, NULL otherwise.  */\n+  const char *(*invalid_parameter_type) (const_tree type);\n+\n+  /* Return the diagnostic message string if TYPE is not valid as a\n+     function return type, NULL otherwise.  */\n+  const char *(*invalid_return_type) (const_tree type);\n+\n+  /* If values of TYPE are promoted to some other type when used in\n+     expressions (analogous to the integer promotions), return that type,\n+     or NULL_TREE otherwise.  */\n+  tree (*promoted_type) (const_tree type);\n+\n+  /* Convert EXPR to TYPE, if target-specific types with special conversion\n+     rules are involved.  Return the converted expression, or NULL to apply\n+     the standard conversion rules.  */\n+  tree (*convert_to_type) (tree type, tree expr);\n+\n   /* Return the array of IRA cover classes for the current target.  */\n   const enum reg_class *(*ira_cover_classes) (void);\n "}]}