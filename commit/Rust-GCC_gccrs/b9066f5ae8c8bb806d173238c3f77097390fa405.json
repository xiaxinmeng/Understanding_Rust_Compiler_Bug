{"sha": "b9066f5ae8c8bb806d173238c3f77097390fa405", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkwNjZmNWFlOGM4YmI4MDZkMTczMjM4YzNmNzcwOTczOTBmYTQwNQ==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-05-05T14:01:28Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-05-05T14:01:28Z"}, "message": "[AArch64] Add branch-cost to cpu tuning information.\n\n\t* gcc/config/aarch64-protos.h (struct cpu_branch_cost): New.\n        (tune_params): Add field branch_costs.\n\t(aarch64_branch_cost): Declare.\n\t* gcc/config/aarch64.c (generic_branch_cost): New.\n\t(generic_tunings): Set field cpu_branch_cost to generic_branch_cost.\n\t(cortexa53_tunings): Likewise.\n\t(cortexa57_tunings): Likewise.\n\t(thunderx_tunings): Likewise.\n\t(xgene1_tunings): Likewise.\n\t(aarch64_branch_cost): Define.\n\t* gcc/config/aarch64/aarch64.h (BRANCH_COST): Redefine.\n\nFrom-SVN: r222805", "tree": {"sha": "9e2822677808e8a55bdc8c6a0cef2699dda9067b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e2822677808e8a55bdc8c6a0cef2699dda9067b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9066f5ae8c8bb806d173238c3f77097390fa405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9066f5ae8c8bb806d173238c3f77097390fa405", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9066f5ae8c8bb806d173238c3f77097390fa405", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9066f5ae8c8bb806d173238c3f77097390fa405/comments", "author": null, "committer": null, "parents": [{"sha": "6987c38487443ef2055c40d2859682ec2a0cd4de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6987c38487443ef2055c40d2859682ec2a0cd4de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6987c38487443ef2055c40d2859682ec2a0cd4de"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "5f3c8b642052b1bb5b7c0332194d20c79e4ed0f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9066f5ae8c8bb806d173238c3f77097390fa405/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9066f5ae8c8bb806d173238c3f77097390fa405/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9066f5ae8c8bb806d173238c3f77097390fa405", "patch": "@@ -1,3 +1,17 @@\n+2015-05-05  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* gcc/config/aarch64-protos.h (struct cpu_branch_cost): New.\n+        (tune_params): Add field branch_costs.\n+\t(aarch64_branch_cost): Declare.\n+\t* gcc/config/aarch64.c (generic_branch_cost): New.\n+\t(generic_tunings): Set field cpu_branch_cost to generic_branch_cost.\n+\t(cortexa53_tunings): Likewise.\n+\t(cortexa57_tunings): Likewise.\n+\t(thunderx_tunings): Likewise.\n+\t(xgene1_tunings): Likewise.\n+\t(aarch64_branch_cost): Define.\n+\t* gcc/config/aarch64/aarch64.h (BRANCH_COST): Redefine.\n+\n 2015-05-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c: Use HOST_WIDE_INT_1 instead of (HOST_WIDE_INT) 1"}, {"sha": "931c8b81cc0c5719073b176403ddceeb7e012c60", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9066f5ae8c8bb806d173238c3f77097390fa405/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9066f5ae8c8bb806d173238c3f77097390fa405/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=b9066f5ae8c8bb806d173238c3f77097390fa405", "patch": "@@ -162,12 +162,20 @@ struct cpu_vector_cost\n   const int cond_not_taken_branch_cost;  /* Cost of not taken branch.  */\n };\n \n+/* Branch costs.  */\n+struct cpu_branch_cost\n+{\n+  const int predictable;    /* Predictable branch or optimizing for size.  */\n+  const int unpredictable;  /* Unpredictable branch or optimizing for speed.  */\n+};\n+\n struct tune_params\n {\n   const struct cpu_cost_table *const insn_extra_cost;\n   const struct cpu_addrcost_table *const addr_cost;\n   const struct cpu_regmove_cost *const regmove_cost;\n   const struct cpu_vector_cost *const vec_costs;\n+  const struct cpu_branch_cost *const branch_costs;\n   const int memmov_cost;\n   const int issue_rate;\n   const unsigned int fuseable_ops;\n@@ -184,6 +192,7 @@ struct tune_params\n HOST_WIDE_INT aarch64_initial_elimination_offset (unsigned, unsigned);\n int aarch64_get_condition_code (rtx);\n bool aarch64_bitmask_imm (HOST_WIDE_INT val, machine_mode);\n+int aarch64_branch_cost (bool, bool);\n enum aarch64_symbol_type\n aarch64_classify_symbolic_expression (rtx, enum aarch64_symbol_context);\n bool aarch64_const_vec_all_same_int_p (rtx, HOST_WIDE_INT);"}, {"sha": "7bc28ae7cf2f8d6f5ef136158c6c43d39e540435", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9066f5ae8c8bb806d173238c3f77097390fa405/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9066f5ae8c8bb806d173238c3f77097390fa405/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b9066f5ae8c8bb806d173238c3f77097390fa405", "patch": "@@ -340,12 +340,20 @@ static const struct cpu_vector_cost xgene1_vector_cost =\n #define AARCH64_FUSE_ADRP_LDR\t(1 << 3)\n #define AARCH64_FUSE_CMP_BRANCH\t(1 << 4)\n \n+/* Generic costs for branch instructions.  */\n+static const struct cpu_branch_cost generic_branch_cost =\n+{\n+  2,  /* Predictable.  */\n+  2   /* Unpredictable.  */\n+};\n+\n static const struct tune_params generic_tunings =\n {\n   &cortexa57_extra_costs,\n   &generic_addrcost_table,\n   &generic_regmove_cost,\n   &generic_vector_cost,\n+  &generic_branch_cost,\n   4, /* memmov_cost  */\n   2, /* issue_rate  */\n   AARCH64_FUSE_NOTHING, /* fuseable_ops  */\n@@ -365,6 +373,7 @@ static const struct tune_params cortexa53_tunings =\n   &generic_addrcost_table,\n   &cortexa53_regmove_cost,\n   &generic_vector_cost,\n+  &generic_branch_cost,\n   4, /* memmov_cost  */\n   2, /* issue_rate  */\n   (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n@@ -385,6 +394,7 @@ static const struct tune_params cortexa57_tunings =\n   &cortexa57_addrcost_table,\n   &cortexa57_regmove_cost,\n   &cortexa57_vector_cost,\n+  &generic_branch_cost,\n   4, /* memmov_cost  */\n   3, /* issue_rate  */\n   (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n@@ -405,6 +415,7 @@ static const struct tune_params thunderx_tunings =\n   &generic_addrcost_table,\n   &thunderx_regmove_cost,\n   &generic_vector_cost,\n+  &generic_branch_cost,\n   6, /* memmov_cost  */\n   2, /* issue_rate  */\n   AARCH64_FUSE_CMP_BRANCH, /* fuseable_ops  */\n@@ -424,6 +435,7 @@ static const struct tune_params xgene1_tunings =\n   &xgene1_addrcost_table,\n   &xgene1_regmove_cost,\n   &xgene1_vector_cost,\n+  &generic_branch_cost,\n   6, /* memmov_cost  */\n   4, /* issue_rate  */\n   AARCH64_FUSE_NOTHING, /* fuseable_ops  */\n@@ -5409,6 +5421,23 @@ aarch64_address_cost (rtx x,\n   return cost;\n }\n \n+/* Return the cost of a branch.  If SPEED_P is true then the compiler is\n+   optimizing for speed.  If PREDICTABLE_P is true then the branch is predicted\n+   to be taken.  */\n+\n+int\n+aarch64_branch_cost (bool speed_p, bool predictable_p)\n+{\n+  /* When optimizing for speed, use the cost of unpredictable branches.  */\n+  const struct cpu_branch_cost *branch_costs =\n+    aarch64_tune_params->branch_costs;\n+\n+  if (!speed_p || predictable_p)\n+    return branch_costs->predictable;\n+  else\n+    return branch_costs->unpredictable;\n+}\n+\n /* Return true if the RTX X in mode MODE is a zero or sign extract\n    usable in an ADD or SUB (extended register) instruction.  */\n static bool"}, {"sha": "c85d27968511706fb3f08b6ad69b89c75e4fbc71", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9066f5ae8c8bb806d173238c3f77097390fa405/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9066f5ae8c8bb806d173238c3f77097390fa405/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=b9066f5ae8c8bb806d173238c3f77097390fa405", "patch": "@@ -827,7 +827,8 @@ do {\t\t\t\t\t\t\t\t\t     \\\n #define TRAMPOLINE_SECTION text_section\n \n /* To start with.  */\n-#define BRANCH_COST(SPEED_P, PREDICTABLE_P) 2\n+#define BRANCH_COST(SPEED_P, PREDICTABLE_P) \\\n+  (aarch64_branch_cost (SPEED_P, PREDICTABLE_P))\n \f\n \n /* Assembly output.  */"}]}