{"sha": "ea7339d1fb89c9744b481ae314b451e90c7dcc63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE3MzM5ZDFmYjg5Yzk3NDRiNDgxYWUzMTRiNDUxZTkwYzdkY2M2Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T18:20:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T18:20:42Z"}, "message": "Add new Ada test cases.\n\nFrom-SVN: r118332", "tree": {"sha": "d761b541ac4e898876b36c14e2f2b0aeef0750e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d761b541ac4e898876b36c14e2f2b0aeef0750e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea7339d1fb89c9744b481ae314b451e90c7dcc63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea7339d1fb89c9744b481ae314b451e90c7dcc63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea7339d1fb89c9744b481ae314b451e90c7dcc63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea7339d1fb89c9744b481ae314b451e90c7dcc63/comments", "author": null, "committer": null, "parents": [{"sha": "c8945d5632cc44d3f05178c67b73b666cc64c8a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8945d5632cc44d3f05178c67b73b666cc64c8a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8945d5632cc44d3f05178c67b73b666cc64c8a4"}], "stats": {"total": 1282, "additions": 1282, "deletions": 0}, "files": [{"sha": "af0f43e649331713bd46ad905970142a14762b00", "filename": "gcc/testsuite/gnat.dg/abstract_with_anonymous_result.adb", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fabstract_with_anonymous_result.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fabstract_with_anonymous_result.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fabstract_with_anonymous_result.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,37 @@\n+-- { dg-do run }\n+\n+procedure Abstract_With_Anonymous_Result is\n+\n+   package Pkg is\n+      type I is abstract tagged null record;\n+      type Acc_I_Class is access all I'Class;\n+      function Func (V : I) return access I'Class is abstract;\n+      procedure Proc (V : access I'Class);\n+      type New_I is new I with null record;\n+      function Func (V : New_I) return access I'Class;\n+   end Pkg;\n+\n+   package body Pkg is\n+      X : aliased New_I;\n+\n+      procedure Proc (V : access I'Class) is begin null; end Proc;\n+\n+      function Func (V : New_I) return access I'Class is\n+      begin\n+         X := V;\n+         return X'Access;\n+      end Func;\n+   end Pkg;\n+\n+   use Pkg;\n+\n+   New_I_Obj : aliased New_I;\n+\n+   procedure Proc2 (V : access I'Class) is\n+   begin\n+      Proc (Func (V.all));  -- Call to Func causes gigi abort 122\n+   end Proc2;\n+\n+begin\n+   Proc2 (New_I_Obj'Access);\n+end Abstract_With_Anonymous_Result;"}, {"sha": "4e61c2be66130d6212927dc9af680cac3ebed2c6", "filename": "gcc/testsuite/gnat.dg/access_discr.adb", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Faccess_discr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Faccess_discr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faccess_discr.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,22 @@\n+-- { dg-do compile }\n+\n+procedure access_discr is\n+   \n+   type One;\n+   \n+   type Iface is limited interface;\n+   type Base  is tagged limited null record;\n+   \n+   type Two_Alone (Parent : access One) is limited null record;\n+   type Two_Iface (Parent : access One) is limited new Iface with null record;\n+   type Two_Base (Parent : access One) is new Base with null record;\n+   \n+   type One is record\n+      TA : Two_Alone (One'Access);\n+      TI : Two_Iface (One'Access); --  OFFENDING LINE\n+      TB : Two_Base (One'Access);\n+   end record;\n+\n+begin\n+   null;\n+end;"}, {"sha": "8354e7453552b9915c305055d0402c01476c3454", "filename": "gcc/testsuite/gnat.dg/access_func.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Faccess_func.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Faccess_func.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faccess_func.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,10 @@\n+-- { dg-do compile }\n+\n+procedure access_func is\n+    type Abomination is access\n+       function (X : Integer) return access\n+       function (Y : Float) return access\n+       function return Integer;\n+begin\n+    null;\n+end;"}, {"sha": "b8490f40c3d7649f79c863673473dac1b66726ab", "filename": "gcc/testsuite/gnat.dg/align_check.adb", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Falign_check.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Falign_check.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Falign_check.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,21 @@\n+-- { dg-do run }\n+\n+with System; \n+procedure align_check is\n+   N_Allocated_Buffers : Natural := 0;\n+--      \n+   function New_Buffer (N_Bytes : Natural) return System.Address is\n+   begin   \n+      N_Allocated_Buffers := N_Allocated_Buffers + 1;\n+      return System.Null_Address;\n+   end;    \n+--      \n+   Buffer_Address : constant System.Address := New_Buffer (N_Bytes => 8);\n+   N : Natural;\n+   for N'Address use Buffer_Address;\n+--      \n+begin   \n+   if N_Allocated_Buffers /= 1 then\n+      raise Program_Error;\n+   end if; \n+end;    "}, {"sha": "169e11c41492d859ba20b72a51a8a90b472f27fd", "filename": "gcc/testsuite/gnat.dg/alignment1.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Falignment1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Falignment1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Falignment1.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,16 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnatws\" }\n+\n+procedure alignment1 is\n+\n+  type My_Integer is record\n+    Element : Integer;\n+  end record;\n+\n+  F : My_Integer;\n+\n+begin\n+  if F'Alignment /= F.Element'Alignment then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "d881e11570e378e2e3a3683312ea9fcbf7763392", "filename": "gcc/testsuite/gnat.dg/biased_uc.adb", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fbiased_uc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fbiased_uc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fbiased_uc.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,54 @@\n+-- { do-do run }\n+-- { do-options \"-gnatws\" }\n+\n+with Unchecked_Conversion;\n+procedure biased_uc is\n+begin\n+    --  Case (f) target type is biased, source is unbiased\n+\n+    declare \n+       type a is new integer range 0 .. 255; \n+       for a'size use 8;\n+\n+       type b is new integer range 200 .. 455; \n+       for b'size use 8;\n+\n+       av : a; \n+       bv : b; \n+\n+       for av'size use 8;\n+       for bv'size use 8;\n+\n+       function a2b is new Unchecked_Conversion (a,b);\n+\n+    begin   \n+       bv := a2b (200);\n+       if bv = 200 then\n+          raise Program_Error;\n+       end if; \n+    end;    \n+\n+    --  Case (g) target type is biased, source object is biased\n+\n+    declare \n+       type a is new integer range 1 .. 256; \n+       for a'size use 16; \n+\n+       type b is new integer range 1 .. 65536;\n+       for b'size use 16;\n+\n+       av : a;\n+       bv : b;\n+\n+       for av'size use 8;\n+       for bv'size use 16;\n+\n+       function a2b is new Unchecked_Conversion (a,b);\n+\n+    begin\n+       bv := a2b (1);\n+       if bv /= 2 then\n+          raise Program_Error;\n+       end if;\n+    end;\n+end;"}, {"sha": "10272a49ae14e9b24343221608887bd0c9973c92", "filename": "gcc/testsuite/gnat.dg/capture_value.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fcapture_value.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fcapture_value.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcapture_value.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,16 @@\n+-- { dg-do run }\n+\n+procedure capture_value is\n+   x : integer := 0;\n+begin\n+   declare\n+      z : integer renames x;\n+   begin\n+      z := 3;\n+      x := 5;\n+      z := z + 1;\n+      if z /= 6 then\n+         raise Program_Error;\n+      end if;\n+   end;\n+end;"}, {"sha": "eba89dc5f13c1ad941bf264cb01eae90d3e3ea0a", "filename": "gcc/testsuite/gnat.dg/case_null.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fcase_null.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fcase_null.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcase_null.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,16 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws\" }\n+\n+package body Case_Null is\n+   procedure P1 (X : T) is\n+   begin\n+      case X is\n+         when S1 =>\n+           null;\n+         when e =>\n+           null;\n+         when others =>\n+           null;\n+      end case;\n+   end P1;\n+end Case_Null;"}, {"sha": "0e47d4200ba0f32772078f96c3bf6701b6a9ca91", "filename": "gcc/testsuite/gnat.dg/case_null.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fcase_null.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fcase_null.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcase_null.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,11 @@\n+package Case_Null is\n+   type T is (a, b, c, d, e);\n+\n+   subtype S is T range b .. d;\n+\n+   subtype S1 is S range a .. d;\n+   --  Low bound out of range of base subtype.\n+\n+   procedure P1 (X : T);\n+\n+end Case_Null;"}, {"sha": "5f345590945952f28a79628d53ecb577e591cbe1", "filename": "gcc/testsuite/gnat.dg/class_wide.adb", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fclass_wide.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fclass_wide.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fclass_wide.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,26 @@\n+-- { dg-do compile }\n+\n+procedure class_wide is\n+    package P is\n+       type T is tagged null record;\n+       procedure P1 (x : T'Class);\n+       procedure P2 (x : access T'Class);\n+    end P;\n+    package body P is\n+        procedure P1 (x : T'Class) is \n+       begin \n+          null;\n+       end;\n+       procedure P2 (x : access T'Class) is\n+       begin\n+          null;\n+       end;\n+    end P;\n+    use P;\n+    a : T;\n+    type Ptr is access T;\n+    b : Ptr := new T;\n+begin\n+    A.P1;\n+    B.P2;\n+end;"}, {"sha": "99808e7adbd2790bfad17d6a181b97707d4f0b9a", "filename": "gcc/testsuite/gnat.dg/conv_real.adb", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fconv_real.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fconv_real.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fconv_real.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,18 @@\n+-- { dg-do run }\n+\n+with Interfaces; use Interfaces;\n+procedure Conv_Real is\n+   Small : constant := 10.0**(-9);\n+   type Time_Type is delta Small range -2**63 * Small .. (2**63-1) * Small;\n+   for Time_Type'Small use Small;\n+   for Time_Type'Size use 64; \n+   procedure Cache (Seconds_Per_GDS_Cycle : in Time_Type) is\n+      Cycles_Per_Second : constant Time_Type  := (1.0 / Seconds_Per_GDS_Cycle);\n+   begin   \n+      if Integer_32 (Seconds_Per_GDS_Cycle * Cycles_Per_Second) /= 1 then\n+         raise Program_Error;\n+      end if; \n+   end Cache;\n+begin   \n+   Cache (0.035);\n+end;"}, {"sha": "628be1759daa0253acfb104236cf7eb388a607d4", "filename": "gcc/testsuite/gnat.dg/curr_task.adb", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fcurr_task.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fcurr_task.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcurr_task.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,134 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnatws\" }\n+\n+with Ada.Exceptions;\n+with Ada.Text_IO;\n+with Ada.Task_Identification;\n+\n+procedure Curr_Task is\n+\n+   use Ada.Task_Identification;\n+\n+   --  Simple semaphore\n+\n+   protected Semaphore is\n+      entry Lock;\n+      procedure Unlock;\n+   private\n+      TID        : Task_Id := Null_Task_Id;\n+      Lock_Count : Natural := 0;\n+   end Semaphore;\n+\n+   ----------\n+   -- Lock --\n+   ----------\n+\n+   procedure Lock is\n+   begin\n+      Semaphore.Lock;\n+   end Lock;\n+\n+   ---------------\n+   -- Semaphore --\n+   ---------------\n+\n+   protected body Semaphore is\n+\n+      ----------\n+      -- Lock --\n+      ----------\n+\n+      entry Lock when Lock_Count = 0\n+        or else TID = Current_Task\n+      is\n+      begin\n+         if not\n+           (Lock_Count = 0\n+            or else TID = Lock'Caller)\n+         then\n+            Ada.Text_IO.Put_Line\n+              (\"Barrier leaks \" & Lock_Count'Img\n+                 & ' ' & Image (TID)\n+                 & ' ' & Image (Lock'Caller));\n+         end if;\n+\n+         Lock_Count := Lock_Count + 1;\n+         TID := Lock'Caller;\n+      end Lock;\n+\n+      ------------\n+      -- Unlock --\n+      ------------\n+\n+      procedure Unlock is\n+      begin\n+         if TID = Current_Task then\n+            Lock_Count := Lock_Count - 1;\n+         else\n+            raise Tasking_Error;\n+         end if;\n+      end Unlock;\n+\n+   end Semaphore;\n+\n+   ------------\n+   -- Unlock --\n+   ------------\n+\n+   procedure Unlock is\n+   begin\n+      Semaphore.Unlock;\n+   end Unlock;\n+\n+   task type Secondary is\n+      entry Start;\n+   end Secondary;\n+\n+   procedure Parse (P1 : Positive);\n+\n+   -----------\n+   -- Parse --\n+   -----------\n+\n+   procedure Parse (P1 : Positive) is\n+   begin\n+      Lock;\n+      delay 0.01;\n+\n+      if P1 mod 2 = 0 then\n+         Lock;\n+         delay 0.01;\n+         Unlock;\n+      end if;\n+\n+      Unlock;\n+   end Parse;\n+\n+   ---------------\n+   -- Secondary --\n+   ---------------\n+\n+   task body Secondary is\n+   begin\n+      accept Start;\n+\n+      for K in 1 .. 20 loop\n+         Parse (K);\n+      end loop;\n+\n+      raise Constraint_Error;\n+\n+   exception\n+      when Program_Error =>\n+         null;\n+   end Secondary;\n+\n+   TS : array (1 .. 2) of Secondary;\n+\n+begin\n+   Parse (1);\n+\n+   for J in TS'Range loop\n+      TS (J).Start;\n+   end loop;\n+end Curr_Task;"}, {"sha": "4a4ae6886139de7562645e09d182280223262212", "filename": "gcc/testsuite/gnat.dg/discr_range_check.adb", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr_range_check.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr_range_check.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr_range_check.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,18 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws\" }\n+\n+procedure discr_range_check is\n+   Default_First_Entry : constant := 1;\n+\n+   task type Server_T (First_Entry : Positive := Default_First_Entry) is\n+      entry E (First_Entry .. First_Entry);\n+   end Server_T;\n+\n+   task body Server_T is begin null; end;\n+\n+   type Server_Access is access Server_T;\n+   Server : Server_Access;\n+\n+begin   \n+   Server := new Server_T;\n+end;    "}, {"sha": "28e97e6e7e70aa13f2bd48ecbab0eaf80c13c1de", "filename": "gcc/testsuite/gnat.dg/dispatch1.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fdispatch1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fdispatch1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdispatch1.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,9 @@\n+-- { dg-do run }\n+\n+with dispatch1_p; use dispatch1_p;\n+procedure dispatch1 is\n+   O   : DT_I1;\n+   Ptr : access I1'Class;\n+begin\n+   Ptr := new I1'Class'(I1'Class (O));\n+end;"}, {"sha": "73de627516ab205601cd02485a5bf46936d18ae4", "filename": "gcc/testsuite/gnat.dg/dispatch1_p.ads", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fdispatch1_p.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fdispatch1_p.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdispatch1_p.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,4 @@\n+package dispatch1_p is\n+   type I1 is interface;\n+   type DT_I1 is new I1 with null record;\n+end;"}, {"sha": "e3ebcc83ce2238ffa174d75529c3b8958d51014d", "filename": "gcc/testsuite/gnat.dg/env_compile_capacity.adb", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fenv_compile_capacity.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fenv_compile_capacity.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fenv_compile_capacity.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,24 @@\n+-- { do-do compile }\n+\n+with My_Env_Versioned_Value_Set_G;\n+package body Env_Compile_Capacity is\n+  generic \n+    with package Env_Obj_Set_Instance is\n+       new My_Env_Versioned_Value_Set_G(<>);\n+    with function Updated_Entity (Value : Env_Obj_Set_Instance.Value_T)\n+        return Boolean is <>;\n+    with package Entity_Upd_Iteration is\n+       new Env_Obj_Set_Instance.Update_G (Updated_Entity);\n+  procedure Compile_G;\n+  procedure Compile_G is begin null; end;\n+  package My_Env_Aerodrome is\n+     new My_Env_Versioned_Value_Set_G (Value_T => String);\n+  function Updated_Entity (Id : in String) return Boolean is\n+    begin return True; end;\n+  package Iteration_Aerodrome_Arrival is\n+     new My_Env_Aerodrome.Update_G (Updated_Entity);\n+  procedure Aerodrome_Arrival is new Compile_G\n+    (Env_Obj_Set_Instance  => My_Env_Aerodrome,\n+     Updated_Entity        => Updated_Entity,\n+     Entity_Upd_Iteration  => Iteration_Aerodrome_Arrival);\n+end Env_Compile_Capacity;"}, {"sha": "da61034263c31e4666118cb651e2847918380134", "filename": "gcc/testsuite/gnat.dg/env_compile_capacity.ads", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fenv_compile_capacity.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fenv_compile_capacity.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fenv_compile_capacity.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1 @@\n+package Env_Compile_Capacity is pragma Elaborate_Body; end;"}, {"sha": "a22e495f4511b46895963853c1692f3c276be7e1", "filename": "gcc/testsuite/gnat.dg/generic_dispatch.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_dispatch.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_dispatch.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_dispatch.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,9 @@\n+--  { dg-do run }\n+\n+with generic_dispatch_p; use generic_dispatch_p;\n+procedure generic_dispatch is\n+   I : aliased Integer := 0;\n+   D : Iface'Class := Dispatching_Constructor (DT'Tag, I'access);\n+begin   \n+   null;   \n+end generic_dispatch;"}, {"sha": "7a4bbbd8a2b110a381c08a15d72f7371058785d7", "filename": "gcc/testsuite/gnat.dg/generic_dispatch_p.adb", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_dispatch_p.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_dispatch_p.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_dispatch_p.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,7 @@\n+package body generic_dispatch_p is\n+   function Constructor (I : not null access Integer) return DT is\n+      R : DT; \n+  begin\n+      return R;\n+   end Constructor;\n+end;"}, {"sha": "fe6115dd9c7bdfcccaafc834cbfeedd828ed04a2", "filename": "gcc/testsuite/gnat.dg/generic_dispatch_p.ads", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_dispatch_p.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_dispatch_p.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_dispatch_p.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,13 @@\n+with Ada.Tags.Generic_Dispatching_Constructor;\n+package generic_dispatch_p is\n+   type Iface is interface;\n+   function Constructor (I : not null access Integer) return Iface is abstract;\n+   function Dispatching_Constructor\n+      is new Ada.Tags.Generic_Dispatching_Constructor\n+               (T           => Iface,\n+                Parameters  => Integer,\n+                Constructor => Constructor);\n+   type DT is new Iface with null record; \n+   overriding\n+   function Constructor (I : not null access Integer) return DT;\n+end;"}, {"sha": "7e8d6140b19538cfc0b6a267ef712e898b651cd0", "filename": "gcc/testsuite/gnat.dg/gnat_malloc.adb", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fgnat_malloc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fgnat_malloc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgnat_malloc.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,25 @@\n+-- { dg-do run }\n+-- { dg-options \"-O2\" }\n+\n+with Unchecked_Conversion;\n+\n+procedure gnat_malloc is\n+\n+   type int1 is new integer;\n+   type int2 is new integer;\n+   type a1 is access int1;\n+   type a2 is access int2;\n+\n+   function to_a2 is new Unchecked_Conversion (a1, a2);\n+\n+   v1 : a1 := new int1;\n+   v2 : a2 := to_a2 (v1);\n+\n+begin\n+   v1.all := 1;\n+   v2.all := 0;\n+\n+   if v1.all /= 0 then\n+      raise Program_Error;\n+   end if;\n+end;"}, {"sha": "4f09cb654935fe8a1ebe76bee4c2de323658f46b", "filename": "gcc/testsuite/gnat.dg/gnatg.adb", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fgnatg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fgnatg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgnatg.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,13 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatD\" }\n+\n+with System; \n+with Ada.Unchecked_Conversion;\n+procedure gnatg is\n+   subtype Address is System.Address;\n+   type T is access procedure;\n+   function Cvt is new Ada.Unchecked_Conversion (Address, T);\n+   X : T;  \n+begin   \n+   X := Cvt (Gnatg'Address);\n+end gnatg;"}, {"sha": "cac09fc30681fba7bdc4a57e951ab9a63e393fc9", "filename": "gcc/testsuite/gnat.dg/ice_type.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fice_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fice_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fice_type.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,9 @@\n+-- { dg-do compile }\n+\n+with ICE_Types; use ICE_Types;\n+procedure ICE_Type is\n+   type Local_Float_T is new Float_View_T;\n+   LF : Local_Float_T;\n+begin\n+   Initialize (Float_View_T (LF));\n+end;"}, {"sha": "522bd55a281cd989b640def97f9ba129cf70ce9e", "filename": "gcc/testsuite/gnat.dg/ice_types.ads", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fice_types.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fice_types.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fice_types.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,6 @@\n+package ICE_Types is\n+   type Float_View_T is private;\n+   procedure Initialize (X : out Float_View_T);\n+private\n+   type Float_View_T is new Float;\n+end;"}, {"sha": "e240c0ed235205ab8a08946f13df6e75560f5357", "filename": "gcc/testsuite/gnat.dg/in_mod_conv.adb", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fin_mod_conv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fin_mod_conv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fin_mod_conv.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,24 @@\n+-- { do-do compile }\n+\n+procedure in_mod_conv is\n+   package Test is \n+     type T  is new Natural range 1..6;\n+     subtype T_SubType is T range 3..5;\n+     type A1 is array (T range <>) of boolean;\n+     type A2 is new A1 (T_SubType);\n+     PRAGMA pack (A2);\n+     type New_A2 is new A2; \n+  end Test;\n+  package body Test is \n+     procedure P1 (Obj : in New_A2) is\n+     begin   \n+        null;   \n+     end P1; \n+     procedure P2 (Data : in out A2) is\n+     begin   \n+        P1 (New_A2 (Data (T_SubType)));  -- test \n+     end P2; \n+  end Test;\n+begin   \n+   null;   \n+end;"}, {"sha": "58cc2f531b46c1d9c74835bb987c9296145f61d9", "filename": "gcc/testsuite/gnat.dg/inline_scope.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Finline_scope.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Finline_scope.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline_scope.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,15 @@\n+-- { do-do compile }\n+-- { do-options \"-gnatN\" }\n+\n+with inline_scope_p;\n+procedure inline_scope (X : Integer) is\n+   type A is array (Integer range 1 .. 2) of Boolean;\n+   S : A;  \n+   pragma Warnings (Off, S);\n+   procedure Report_List  is\n+   begin   \n+      inline_scope_p.Assert (S (1), Natural'Image (Natural (1)));\n+   end Report_List;\n+begin   \n+   null;   \n+end;    "}, {"sha": "bbe47249cd7fbc5960493633e0998a72f8ce5530", "filename": "gcc/testsuite/gnat.dg/inline_scope_p.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Finline_scope_p.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Finline_scope_p.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline_scope_p.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,8 @@\n+package body inline_scope_p is\n+   procedure Assert (Expr : Boolean; Str : String) is\n+   begin   \n+      if Expr then\n+         null;   \n+      end if; \n+   end Assert; \n+end;    "}, {"sha": "d05e3434ebb3edeaf16758a64d0a18a2bcb3b1fc", "filename": "gcc/testsuite/gnat.dg/inline_scope_p.ads", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Finline_scope_p.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Finline_scope_p.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline_scope_p.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,4 @@\n+package inline_scope_p is\n+    procedure Assert (Expr : Boolean; Str : String);\n+    pragma Inline (Assert);\n+end;    "}, {"sha": "e0692884f6b2ff95dc4f7475ccff77556ad63867", "filename": "gcc/testsuite/gnat.dg/inline_tagged.adb", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Finline_tagged.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Finline_tagged.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline_tagged.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,35 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnatN\" }\n+\n+with Text_IO; use Text_IO;\n+with system; use system; \n+procedure inline_tagged is\n+   package Pkg is\n+      type T_Inner is tagged record\n+         Value : Integer;\n+      end record; \n+      type T_Inner_access is access all T_Inner;\n+      procedure P2 (This : in T_Inner; Ptr : address);\n+      pragma inline (P2);\n+      type T_Outer is record\n+           Inner : T_Inner_Access;\n+      end record; \n+      procedure P1 (This : access T_Outer);\n+   end Pkg;\n+   package body Pkg is\n+      procedure P2 (This : in T_Inner; Ptr : address) is\n+      begin   \n+         if this'address /= Ptr then\n+            raise Program_Error;\n+         end if;\n+      end;    \n+      procedure P1 (This : access T_Outer) is\n+      begin\n+         P2 (This.Inner.all, This.Inner.all'Address);\n+      end P1; \n+   end Pkg;\n+   use Pkg;\n+   Thing : aliased T_Outer := (inner => new T_Inner);\n+begin   \n+   P1 (Thing'access);\n+end;    "}, {"sha": "503fb7eaa3d0469f5e4ab13bc000693e6840f28d", "filename": "gcc/testsuite/gnat.dg/interface_conv.adb", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Finterface_conv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Finterface_conv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finterface_conv.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,17 @@\n+-- { dg-do run }\n+\n+procedure Interface_Conv is\n+   package Pkg is\n+      type I1 is interface;\n+      procedure Prim (X : I1) is null;\n+      type I2 is interface;\n+      procedure Prim (X : I2) is null;\n+      type DT is new I1 and I2 with null record;\n+   end Pkg;\n+   use Pkg;\n+   Obj  : DT;\n+   CW_3 : I2'Class := Obj;\n+   CW_5 : I1'Class := I1'Class (CW_3);  --  test\n+begin\n+   null;\n+end;"}, {"sha": "d83842166e995fac1dc9b22c0023cbbee5da2a31", "filename": "gcc/testsuite/gnat.dg/kill_value.adb", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fkill_value.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fkill_value.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fkill_value.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,20 @@\n+-- { dg-do run }\n+\n+procedure kill_value is\n+   type Struct;\n+   type Pstruct is access all Struct;\n+   \n+   type Struct is record Next : Pstruct; end record;\n+   \n+   Vap : Pstruct := new Struct;\n+\n+begin\n+   for J in 1 .. 10 loop\n+      if Vap /= null then\n+         while Vap /= null\n+         loop\n+            Vap := Vap.Next;\n+         end loop;\n+      end if;\n+   end loop;\n+end;"}, {"sha": "9fe5fc1393308f362f3971221320d055b2fd50c9", "filename": "gcc/testsuite/gnat.dg/late_overriding.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Flate_overriding.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Flate_overriding.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flate_overriding.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,15 @@\n+-- { dg-do compile }\n+\n+procedure late_overriding is\n+   package Pkg is\n+      type I is interface;\n+      procedure Meth (O : in I) is abstract;\n+      type Root is abstract tagged null record; \n+      type DT1 is abstract new Root and I with null record; \n+   end Pkg;\n+   use Pkg;\n+   type DT2 is new DT1 with null record; \n+   procedure Meth (X : DT2) is begin null; end;  --  Test\n+begin   \n+   null;   \n+end;"}, {"sha": "bdb9552e1aa234b444dd720919542814761d578b", "filename": "gcc/testsuite/gnat.dg/layered_abstraction.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Flayered_abstraction.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Flayered_abstraction.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flayered_abstraction.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,9 @@\n+package body  Layered_Abstraction is\n+    Z : P1.T := P2.Obj;  -- Both P1.T and P2.Obj are visible because \n+                         -- they were not specified in the formal package.\n+                         -- Note that P2.T is not visible since it\n+                         -- is required to match P1.T\n+\n+    use P1;              --  to make equality immediately visible \n+    Yes_Again : Boolean := P1.Obj2 = P2.Obj2;\n+end Layered_Abstraction;"}, {"sha": "219fbebc3fa141d1a815e6d18a45e16d1c8eae53", "filename": "gcc/testsuite/gnat.dg/layered_abstraction.ads", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Flayered_abstraction.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Flayered_abstraction.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flayered_abstraction.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,13 @@\n+with Layered_Abstraction_P;\n+generic \n+    with package P1 is new Layered_Abstraction_P(<>);\n+    with package P2 is new Layered_Abstraction_P(T => P1.T, Obj => <>); \n+package Layered_Abstraction is\n+    pragma Elaborate_Body;\n+    X : P1.T := P2.Obj;  -- Both P1.T and P2.Obj are visible because \n+                         -- they were not specified in the formal package.                               -- Note that P2.T is not visible since it\n+                         -- is required to match P1.T\n+\n+    use P1;              --  to make equality immediately visible \n+    Yes : Boolean := P1.Obj2 = P2.Obj2;\n+end Layered_Abstraction;"}, {"sha": "d06f60d96257aef6d10db63276d4c04d9836f91e", "filename": "gcc/testsuite/gnat.dg/layered_abstraction_p.ads", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Flayered_abstraction_p.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Flayered_abstraction_p.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flayered_abstraction_p.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,6 @@\n+generic \n+    type T is private;\n+    Obj : T;\n+package Layered_Abstraction_P is\n+   Obj2 : T := Obj; \n+end;    "}, {"sha": "54f8d25d2b92ee3329d1cd740c1bf24294f2c2a6", "filename": "gcc/testsuite/gnat.dg/layered_instance.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Flayered_instance.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Flayered_instance.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flayered_instance.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,11 @@\n+-- { do-do compile }\n+\n+with Layered_Abstraction_P;\n+with layered_abstraction;\n+procedure layered_instance is\n+   package s1 is new Layered_Abstraction_P (Integer, 15);\n+   package S2 is new Layered_Abstraction_P (Integer, 20);\n+   package Inst is new layered_abstraction (S1, S2);\n+begin   \n+   null;   \n+end;    "}, {"sha": "f2211f19381a6ed3e70fcc82c23391de9b67b059", "filename": "gcc/testsuite/gnat.dg/limited_with.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,9 @@\n+-- { dg-do compile }\n+\n+with Pack1;\n+package body limited_with is\n+   procedure Print_2 (Obj : access Pack1.Nested.Rec_Typ) is\n+   begin\n+      null;\n+   end;\n+end limited_with;"}, {"sha": "add7b9e28fd7480b6653370ed0b8100b69f1b199", "filename": "gcc/testsuite/gnat.dg/limited_with.ads", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,4 @@\n+limited with Pack1;\n+package limited_with is\n+   procedure Print_2 (Obj : access Pack1.Nested.Rec_Typ);\n+end limited_with;"}, {"sha": "c08a2158530b3c94e1ac7ab404ced261fd747970", "filename": "gcc/testsuite/gnat.dg/loop_bound.adb", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Floop_bound.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Floop_bound.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_bound.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,26 @@\n+-- { dg-do compile }\n+\n+procedure loop_bound is\n+   package P is\n+      type Base is new Integer;\n+      Limit : constant Base := 10;\n+      type Index is private;\n+      generic package Gen is end;\n+   private \n+      type Index is new Base range 0 .. Limit;\n+   end P;  \n+   package body P is\n+      package body Gen is\n+         type Table is array (Index) of Integer;\n+         procedure Init (X : in out Table) is\n+         begin   \n+            for I in 1..Index'last -1 loop \n+               X (I) := -1;\n+            end loop;\n+         end Init;\n+      end Gen;\n+   end P;  \n+   package Inst is new P.Gen;\n+begin   \n+   null;   \n+end;    "}, {"sha": "2e03a91890e2658fa605449c7293ef3a73b11bb4", "filename": "gcc/testsuite/gnat.dg/machine_code1.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fmachine_code1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fmachine_code1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fmachine_code1.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,11 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws\" }\n+\n+with System.Machine_Code; use System.Machine_Code;\n+procedure machine_code1 is\n+   A_Float        : Float;\n+   An_Other_Float : Float := -99999.0;\n+begin\n+   An_Other_Float := An_Other_Float - A_Float;\n+   Asm(\"\", Inputs => (Float'Asm_Input (\"m\", A_Float)));\n+end;"}, {"sha": "11e47b3ff21b5717f406e6138869e857e5a13be2", "filename": "gcc/testsuite/gnat.dg/my_env_versioned_value_set_g.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fmy_env_versioned_value_set_g.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fmy_env_versioned_value_set_g.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fmy_env_versioned_value_set_g.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,7 @@\n+generic \n+  type Value_T(<>) is private;\n+package My_Env_Versioned_Value_Set_G is\n+  generic \n+    with function Updated_Entity (Value : Value_T) return Boolean is <>;\n+  package Update_G is end; \n+end;    "}, {"sha": "963ba76be9718d72f50d69667d87b36008df69f4", "filename": "gcc/testsuite/gnat.dg/nested_controlled_alloc.adb", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fnested_controlled_alloc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fnested_controlled_alloc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fnested_controlled_alloc.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,49 @@\n+-- { dg-do run }\n+\n+with Text_IO; use Text_IO;\n+with Ada.Finalization; use Ada.Finalization;\n+\n+procedure Nested_Controlled_Alloc is\n+   \n+   package Controlled_Alloc is\n+\n+      type Fin is new Limited_Controlled with null record;\n+      procedure Finalize (X : in out Fin);\n+\n+      F : Fin;\n+      \n+      type T is limited private;\n+      type Ref is access all T;\n+   \n+   private\n+      \n+      type T is new Limited_Controlled with null record;\n+      procedure Finalize (X : in out T);\n+   \n+   end Controlled_Alloc;\n+   \n+   package body Controlled_Alloc is\n+\n+       procedure Finalize (X : in out T) is\n+       begin\n+          Put_Line (\"Finalize (T)\");\n+       end Finalize;\n+\n+       procedure Finalize (X : in out Fin) is\n+          R : Ref;\n+       begin\n+          begin\n+             R := new T;\n+             raise Constraint_Error;\n+          \n+          exception\n+             when Program_Error =>\n+                null;  -- OK\n+          end;\n+       end Finalize;\n+   \n+   end Controlled_Alloc;\n+\n+begin\n+   null;\n+end Nested_Controlled_Alloc;"}, {"sha": "bc9f043cfe1ca7403011d2382c3497116a22be49", "filename": "gcc/testsuite/gnat.dg/nested_return_test.adb", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fnested_return_test.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fnested_return_test.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fnested_return_test.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,33 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnata\" }\n+\n+procedure Nested_Return_Test is\n+   function H (X: integer) return access integer is\n+      Local : aliased integer := (X+1);\n+   begin \n+      case X is\n+         when 3 =>\n+            begin\n+              return Result : access integer do\n+                  Result := new integer '(27);\n+                  begin\n+                     for I in 1 .. 10 loop\n+                       result.all := result.all + 10;\n+                     end loop;\n+                     return;\n+                  end;\n+              end return;\n+            end;\n+         when 5 =>\n+            return Result: Access integer do\n+               Result := New Integer'(X*X*X);\n+            end return;\n+         when others =>\n+            return null;\n+      end case;\n+   end;\n+begin\n+   pragma Assert (H (3).all = 127);\n+   pragma Assert (H (5).all = 125);\n+   null;\n+end Nested_Return_Test;"}, {"sha": "5ffa8a9ae1b254b0636e94e7e7016202b5982457", "filename": "gcc/testsuite/gnat.dg/overriding_ops.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Foverriding_ops.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Foverriding_ops.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Foverriding_ops.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,15 @@\n+-- { dg-do compile }\n+\n+package body overriding_ops is\n+   task body Light_Programmer is\n+   begin\n+      accept Set_Name (Name : Name_Type);\n+   end Light_Programmer;\n+\n+   protected body Light is\n+      procedure Set_Name (Name : Name_Type) is\n+      begin\n+         L_Name := Name;\n+      end Set_Name;\n+   end Light;\n+end overriding_ops;"}, {"sha": "5b228821b9e98c9df557403a4bf6fe3cbe851479", "filename": "gcc/testsuite/gnat.dg/overriding_ops.ads", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Foverriding_ops.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Foverriding_ops.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Foverriding_ops.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,12 @@\n+with overriding_ops_p; use overriding_ops_p;\n+package overriding_ops is\n+   task type Light_Programmer is new Device with\n+      overriding entry Set_Name (Name : Name_Type);\n+   end Light_Programmer;\n+   --  Object that represents a light \n+   protected type Light is new Device with\n+      overriding procedure Set_Name (Name : Name_Type);\n+   private \n+      L_Name : Name_Type;\n+   end Light;\n+end overriding_ops;"}, {"sha": "cd6e32fe0895870e152f01fd61a3e6c57162eb79", "filename": "gcc/testsuite/gnat.dg/overriding_ops_p.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Foverriding_ops_p.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Foverriding_ops_p.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Foverriding_ops_p.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,8 @@\n+package overriding_ops_p is\n+   subtype Name_Type is String (1 .. 30); \n+   type Device is synchronized interface;\n+   --  Base type of devices \n+   procedure Set_Name (Object : in out Device; Name : Name_Type)\n+     is abstract;\n+   --  Set the name of the Device\n+end overriding_ops_p;"}, {"sha": "de42d4c7874c61ddf7f46430d758dc2f6cea4075", "filename": "gcc/testsuite/gnat.dg/pack1.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fpack1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fpack1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack1.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,7 @@\n+package Pack1 is\n+   package Nested is\n+      type Rec_Typ is record\n+         null;\n+      end record;\n+   end Nested;\n+end Pack1;"}, {"sha": "070dbef94067691e5fb39ef5eb2fddd7b0f03af6", "filename": "gcc/testsuite/gnat.dg/pointer_protected.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fpointer_protected.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fpointer_protected.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpointer_protected.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,10 @@\n+-- { dg-do compile }\n+\n+with pointer_protected_p;\n+\n+procedure pointer_protected is\n+   Pointer : pointer_protected_p.Ptr := null;\n+   Data    : pointer_protected_p.T;\n+begin\n+   Pointer.all (Data);\n+end pointer_protected;"}, {"sha": "65e4e72ab55845166008230f8d99fde0ac14e6f0", "filename": "gcc/testsuite/gnat.dg/pointer_protected_p.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fpointer_protected_p.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fpointer_protected_p.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpointer_protected_p.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,9 @@\n+package pointer_protected_p is\n+   type T;\n+   \n+   type Ptr is access protected procedure (Data : T);\n+   \n+   type T is record\n+      Data : Ptr;\n+   end record;\n+end pointer_protected_p;"}, {"sha": "7a98f9dcc285f588a1979b39314dfdafe78fab19", "filename": "gcc/testsuite/gnat.dg/prot1.adb", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fprot1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fprot1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fprot1.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,22 @@\n+-- { dg-do compile }\n+\n+procedure Prot1 is\n+   protected type Prot is\n+      procedure Change (x : integer);\n+   private\n+      Flag : Boolean;\n+   end Prot;\n+   type Handle is access protected procedure (X : Integer);\n+   procedure Manage (Ptr : Handle) is\n+   begin\n+      null;\n+   end;\n+\n+   protected body prot is\n+      procedure Change (x : integer) is begin null; end;\n+   end;\n+\n+   Sema : Prot;\n+begin\n+   Manage (Sema.Change'Unrestricted_Access);\n+end;"}, {"sha": "c95c3ef2b07016ef41edd28875a84b711ef10fbc", "filename": "gcc/testsuite/gnat.dg/self.adb", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fself.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fself.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fself.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,18 @@\n+package body Self is \n+   function G (X : Integer) return Lim is\n+   begin   \n+      return R : Lim := (Comp => X, others => <>); \n+   end G;  \n+\n+   procedure Change (X : in out Lim; Incr : Integer) is\n+   begin   \n+      X.Comp := X.Comp + Incr; \n+      X.Self_Default.Comp := X.Comp + Incr; \n+      X.Self_Anon_Default.Comp := X.Comp + Incr; \n+   end Change; \n+\n+   function Get (X : Lim) return Integer is\n+   begin   \n+      return X.Comp; \n+   end;    \n+end Self;"}, {"sha": "1837188ab9526f03490055b2a634ab277a902fb0", "filename": "gcc/testsuite/gnat.dg/self.ads", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fself.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fself.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fself.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,17 @@\n+with System; \n+package Self is \n+  type Lim is limited private;\n+  type Lim_Ref is access all Lim;\n+  function G (X : Integer) return lim;\n+\n+  procedure Change (X : in out Lim; Incr : Integer);\n+  function Get (X : Lim) return Integer;\n+private \n+  type Lim is limited record\n+     Comp : Integer;\n+     Self_Default : Lim_Ref := Lim'Unchecked_Access;\n+     Self_Unrestricted_Default : Lim_Ref := Lim'Unrestricted_Access;\n+     Self_Anon_Default : access Lim := Lim'Unchecked_Access;\n+     Self_Anon_Unrestricted_Default : access Lim := Lim'Unrestricted_Access;\n+  end record; \n+end Self;"}, {"sha": "adcd35249afc6e7eb981f87e7d7ef0cd4bc96a5a", "filename": "gcc/testsuite/gnat.dg/specs/abstract_limited.ads", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fabstract_limited.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fabstract_limited.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fabstract_limited.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,6 @@\n+-- { dg-do compile }\n+\n+package abstract_limited is\n+   type I is limited interface;\n+   type T is abstract limited new I with null record;\n+end;"}, {"sha": "eff9e05361ee105f4a3d34e8ac0a1e674430b5a3", "filename": "gcc/testsuite/gnat.dg/specs/controller.ads", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fcontroller.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fcontroller.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fcontroller.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,15 @@\n+-- { dg-do compile } \n+\n+with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n+package Controller is\n+   type Iface is interface;\n+   type Thing is tagged record\n+      Name : Unbounded_String;\n+   end record;\n+   type Object is abstract new Thing and Iface with private;\n+private\n+   type Object is abstract new Thing  and Iface\n+   with record\n+      Surname : Unbounded_String;\n+   end record;\n+end Controller;"}, {"sha": "c1c436f3ec77803b22f0a857e8589283b5f0a7c1", "filename": "gcc/testsuite/gnat.dg/specs/double_record_extension1.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdouble_record_extension1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdouble_record_extension1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdouble_record_extension1.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -1,3 +1,5 @@\n+-- { dg-do compile } \n+\n package double_record_extension1 is\n \n    type T1(n: natural) is tagged record"}, {"sha": "8fa83dbce6ea7a6103297ca8edf1f4458d82a82d", "filename": "gcc/testsuite/gnat.dg/specs/double_record_extension2.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdouble_record_extension2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdouble_record_extension2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdouble_record_extension2.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -1,3 +1,5 @@\n+-- { dg-do compile } \n+\n package double_record_extension2 is\n \n   type Base_Message_Type (Num_Bytes : Positive) is tagged record"}, {"sha": "4f12b82d3f5a59479ee717ccadadcae6e0329f8e", "filename": "gcc/testsuite/gnat.dg/specs/formal_type.ads", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fformal_type.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fformal_type.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fformal_type.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,15 @@\n+-- { dg-do compile }\n+\n+with Ada.Strings.Bounded;\n+package formal_type is\n+   generic \n+      with package BI is\n+         new Ada.Strings.Bounded.Generic_Bounded_Length (<>);\n+      type NB is new BI.Bounded_String;\n+   package G is end; \n+   package BI is new Ada.Strings.Bounded.Generic_Bounded_Length (30);\n+   type NB is new BI.Bounded_String;\n+    Thing : NB;\n+      Size : Integer := THing.Max_Length;\n+   package GI is new G (BI, NB);\n+end;    "}, {"sha": "9ec902d42f624032984fa562ed75c9160a575b6c", "filename": "gcc/testsuite/gnat.dg/specs/gen_interface.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fgen_interface.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fgen_interface.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fgen_interface.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,8 @@\n+-- { dg-do compile }\n+\n+with gen_interface_p;\n+package gen_interface is\n+   type T is interface;\n+   procedure P (Thing: T) is abstract;\n+   package NG is new gen_interface_p (T, P);\n+end;    "}, {"sha": "5ebceb253d76b74bd6fe0e5f0b8fb66a6a2d483f", "filename": "gcc/testsuite/gnat.dg/specs/gen_interface_p.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fgen_interface_p.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fgen_interface_p.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fgen_interface_p.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,5 @@\n+generic \n+   type I is interface;\n+   with procedure P (X : I) is abstract;\n+package gen_interface_p is\n+end;    "}, {"sha": "cdf7db58ea9117a5fc8b41a16083cb92d03c90ba", "filename": "gcc/testsuite/gnat.dg/specs/static_initializer.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fstatic_initializer.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fstatic_initializer.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fstatic_initializer.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -1,4 +1,5 @@\n -- { dg-do compile }\n+-- { dg-options \"-cargs -S -margs\" }\n \n package static_initializer is\n "}, {"sha": "e54ce278c94360369299d0820772626e1df79473", "filename": "gcc/testsuite/gnat.dg/specs/universal_fixed.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Funiversal_fixed.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Funiversal_fixed.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Funiversal_fixed.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,8 @@\n+-- { dg-do compile }\n+\n+package Universal_Fixed is\n+    Nm2Metres : constant := 1852.0;\n+    type Metres is delta 1.0 range 0.0 .. 1_000_000.0;\n+    type Nautical_Miles is\n+      delta 0.001 range 0.0 .. (Metres'Last + (Nm2Metres / 2)) / Nm2Metres;\n+end Universal_Fixed;"}, {"sha": "b68dc2e10fac477c3c274f1505df647975975fb0", "filename": "gcc/testsuite/gnat.dg/spipaterr.adb", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspipaterr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fspipaterr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspipaterr.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,14 @@\n+-- { dg-do run }\n+\n+with Text_IO; use Text_IO;\n+with GNAT.SPITBOL.Patterns; use GNAT.SPITBOL.Patterns;\n+procedure Spipaterr is\n+    X : String := \"ABCDE\";\n+    Y : Pattern := Len (1) & X (2 .. 2);\n+begin\n+    if Match (\"XB\", Y) then\n+       null;\n+    else\n+       raise Program_Error;\n+    end if;\n+end;"}, {"sha": "86c9c7d818f41186d5bd023cc07cf89342965999", "filename": "gcc/testsuite/gnat.dg/task_name.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftask_name.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftask_name.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftask_name.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,8 @@\n+-- { dg-do compile }\n+\n+package body task_name is\n+   task body Task_Object is\n+   begin\n+      null;\n+   end Task_Object;\n+end;"}, {"sha": "2d9d3ab15044ed4fa2f458d6372673347bf0599b", "filename": "gcc/testsuite/gnat.dg/task_name.ads", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftask_name.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftask_name.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftask_name.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,22 @@\n+with Ada.Finalization;\n+package task_name is\n+   type Base_Controller is\n+     abstract new Ada.Finalization.Limited_Controlled with null record;\n+\n+   type Extended_Controller is\n+     abstract new Base_Controller with private;\n+\n+   type Task_Object (Controller : access Extended_Controller'Class) is\n+     limited private;\n+private\n+   type String_Access is access string;\n+\n+   type Extended_Controller is\n+     abstract new Base_Controller with record\n+        Thread : aliased Task_Object (Extended_Controller'Access);\n+        Name   : String_Access := new string'(\"the_name_of_the_task\");\n+     end record;\n+\n+   task type Task_Object (Controller : access Extended_Controller'Class) is           pragma Task_Name (Controller.Name.all);\n+   end Task_Object;\n+end;"}, {"sha": "29d94f48e34f63cfb3a2b6e2e5848b397da6bdca", "filename": "gcc/testsuite/gnat.dg/test_bounded.adb", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_bounded.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_bounded.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_bounded.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,13 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnatws\" }\n+\n+procedure Test_Bounded is\n+   type Bounded (Length : Natural := 0) is\n+      record\n+         S : String (1..Length);\n+      end record;\n+   type Ref is access all Bounded;\n+   X : Ref := new Bounded;\n+begin\n+   null;\n+end Test_Bounded;"}, {"sha": "8f94301434e81986a029352a0e26df1139dc2351", "filename": "gcc/testsuite/gnat.dg/test_image.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_image.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_image.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_image.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,8 @@\n+-- { dg-do run }\n+\n+with test_image_p;\n+procedure test_image is\n+  my_at5c : test_image_p.a_type5_class;\n+begin\n+  my_at5c := new test_image_p.type5;\n+end;"}, {"sha": "499a113ad1d786a6b711d6de1628fd34dc248c0f", "filename": "gcc/testsuite/gnat.dg/test_image_p.adb", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_image_p.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_image_p.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_image_p.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,24 @@\n+with ada.task_identification;\n+with ada.text_io; use ada.text_io;\n+package body test_image_p is\n+    function to_type1 (arg1 : in Integer) return type1 is\n+    begin\n+        return  (f2 => (others => Standard.False));\n+    end to_type1;\n+    task body task_t is\n+       Name : String :=\n+             ada.task_identification.image (arg.the_task'identity);\n+    begin\n+        arg.the_array := (others => to_type1 (-1));\n+        if Name (1 .. 19) /= \"my_at5c.f3.the_task\" then\n+           Put_Line (\"error\");\n+           raise Program_Error;\n+        end if;\n+        \n+        select\n+           accept entry1;\n+        or \n+           terminate;\n+        end select;\n+    end task_t;\n+end;"}, {"sha": "5a7882364095ebb7ddab7104c0ea14f1f94cf7b8", "filename": "gcc/testsuite/gnat.dg/test_image_p.ads", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_image_p.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_image_p.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_image_p.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,23 @@\n+package test_image_p is\n+    type type1 is tagged private;\n+    type type3 is limited private;\n+    type type5 is tagged limited private;\n+    type a_type5_class is access all type5'Class;\n+    task type task_t (arg : access type3) is\n+        entry entry1;\n+    end task_t;\n+    function to_type1 (arg1 : in Integer) return type1;\n+private\n+  type array_t is array (Positive range <>) of type1;\n+  type array_t2 is array (1 .. 3) of Boolean;\n+  type type1 is tagged record\n+     f2 : array_t2;\n+  end record;\n+    type type3 is record\n+        the_task : aliased task_t (type3'Access);\n+        the_array : array_t (1 .. 10) := (others => to_type1 (-1));\n+    end record;\n+    type type5 is tagged limited record\n+        f3 : type3;\n+    end record;\n+end;"}, {"sha": "85e5cdde06ee072124207695066769f2312055c2", "filename": "gcc/testsuite/gnat.dg/test_prio.adb", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_prio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_prio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_prio.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,20 @@\n+-- { do-do run }\n+-- { dg-options \"-gnatws\" }\n+pragma Locking_Policy (Ceiling_Locking);\n+with test_prio_p;use test_prio_p;\n+with text_io; use text_io;\n+procedure Test_Prio is\n+   task Tsk is\n+      pragma Priority (10);\n+   end Tsk;\n+   task body Tsk is\n+   begin   \n+      Sema2.Seize;\n+      Sema1.Seize;\n+      Put_Line (\"error\");\n+   exception\n+      when Program_Error => null;  -- OK\n+   end;    \n+begin   \n+   null;   \n+end;    "}, {"sha": "dd0d99adccbe96a74bee0bd7fe326ba84edbbe01", "filename": "gcc/testsuite/gnat.dg/test_prio_p.adb", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_prio_p.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_prio_p.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_prio_p.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,5 @@\n+package body test_prio_p is\n+   protected body Protected_Queue_T is\n+      entry Seize when True is begin null; end;\n+   end Protected_Queue_T;\n+end test_prio_p;"}, {"sha": "f6dcaa8ebc385f226bf7fe0ca13ddfb44c951cec", "filename": "gcc/testsuite/gnat.dg/test_prio_p.ads", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_prio_p.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_prio_p.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_prio_p.ads?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,12 @@\n+with System; with Unchecked_Conversion;\n+package test_prio_p is\n+   type Task_Priority_T is new Natural;\n+   function Convert_To_System_Priority is\n+   new Unchecked_Conversion (Task_Priority_T, System.Priority);\n+   protected type Protected_Queue_T( PO_Priority : Task_Priority_T ) is\n+      pragma Priority (Convert_To_System_Priority (PO_Priority ));\n+      entry Seize;\n+   end Protected_Queue_T;\n+   Sema1 : protected_Queue_T (5);\n+   Sema2 : protected_Queue_T (10);\n+end test_prio_p;"}, {"sha": "6348c02a075f32aabb5707c78a5e445851ecb8dc", "filename": "gcc/testsuite/gnat.dg/test_self.adb", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_self.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_self.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_self.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,12 @@\n+-- { dg-do run }\n+\n+with Text_IO; use Text_IO;\n+with Self; use Self;\n+procedure Test_Self is\n+   It : Lim := G (5);\n+begin   \n+   Change (It, 10);\n+   if Get (It) /= 35 then \n+      Put_Line (\"self-referential aggregate incorrectly built\");\n+   end if; \n+end Test_Self;"}, {"sha": "0fe6302122ca162e99beb4ef9cdfc60909729110", "filename": "gcc/testsuite/gnat.dg/test_self_ref.adb", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_self_ref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_self_ref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_self_ref.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,36 @@\n+-- { dg-do run }\n+\n+procedure Test_Self_Ref is\n+   type T2;\n+   type T2_Ref is access all T2; \n+\n+   function F (X: T2_Ref) return Integer;\n+\n+   type T2 is limited record\n+      Int1 : Integer := F (T2'Unchecked_Access);\n+      Int2 : Integer := F (T2'Unrestricted_Access);\n+   end record; \n+\n+   Counter : Integer := 2;\n+\n+   function F (X: T2_Ref) return Integer is\n+   begin   \n+      Counter := Counter * 5;\n+      return Counter;\n+   end F;  \n+\n+   Obj1 : T2_Ref := new T2'(10,20);\n+   Obj2 : T2_Ref := new T2; \n+   Obj3 : T2_Ref := new T2'(others => <>); \n+\n+begin   \n+  if Obj1.Int1 /= 10 or else Obj1.Int2 /= 20 then    \n+     raise Program_Error;\n+  end if; \n+  if Obj2.Int1 /= 10 or else Obj2.Int2 /= 50 then    \n+     raise Program_Error;\n+  end if; \n+  if Obj3.Int1 /= 250 or else Obj3.Int2 /= 1250 then    \n+     raise Program_Error;\n+  end if; \n+end Test_Self_Ref;"}, {"sha": "589c14209aeac1d0c61ec54c25a011c5aa3ec308", "filename": "gcc/testsuite/gnat.dg/timing_events.adb", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftiming_events.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftiming_events.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftiming_events.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,29 @@\n+-- { dg-do run }\n+\n+procedure Timing_Events is\n+   type Timing_Event_Handler is access protected procedure;\n+   \n+   protected PO is\n+      entry     Test;\n+      procedure Proc;\n+   private\n+      Data : Integer := 99;\n+   end PO;\n+   \n+   protected body PO is\n+      entry Test when True is\n+         Handler : Timing_Event_Handler := Proc'Access;\n+      begin\n+         Handler.all;\n+      end Test;\n+      \n+      procedure Proc is\n+      begin\n+         if Data /= 99 then\n+            raise Program_Error;\n+         end if;\n+      end Proc;\n+   end PO;\n+begin\n+   PO.Test;\n+end;"}, {"sha": "82a01495e12fa35eb6d13544cbe55d17eb0e3b3e", "filename": "gcc/testsuite/gnat.dg/type_conv.adb", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftype_conv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Ftype_conv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftype_conv.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,14 @@\n+-- { dg-do compile }\n+\n+procedure type_conv is\n+   type Str is new String;\n+   generic\n+   package G is private end;\n+   package body G is\n+      Name : constant String := \"it\";\n+      Full_Name : Str := Str (Name & \" works\");\n+   end G;\n+   package Inst is new G;\n+begin\n+   null;\n+end;"}, {"sha": "dcb5a65ad0576a327420972951e6c417805de7a0", "filename": "gcc/testsuite/gnat.dg/wide_pi.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fwide_pi.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fwide_pi.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fwide_pi.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,9 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatW8\" }\n+\n+with Ada.Numerics;\n+\n+procedure wide_pi is\n+begin   \n+   null;   \n+end;"}, {"sha": "f5d990b084d69be252c7f67bfd9331342774c5aa", "filename": "gcc/testsuite/gnat.dg/wide_test.adb", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fwide_test.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7339d1fb89c9744b481ae314b451e90c7dcc63/gcc%2Ftestsuite%2Fgnat.dg%2Fwide_test.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fwide_test.adb?ref=ea7339d1fb89c9744b481ae314b451e90c7dcc63", "patch": "@@ -0,0 +1,18 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnatW8\" }\n+\n+procedure wide_test is\n+   X  : constant Wide_Character := '\u042f';\n+\n+begin\n+   declare\n+      S3 : constant Wide_String := (''', X, ''');\n+      X3 :           Wide_Character;\n+   begin\n+      X3 := Wide_Character'Wide_Value (S3);\n+\n+      if X /= X3 then\n+         raise Program_Error;\n+      end if;\n+   end;\n+end;"}]}