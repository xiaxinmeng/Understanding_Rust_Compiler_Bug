{"sha": "46325c16324b06fa1b3ea7f8cb05f2109ed66cf6", "node_id": "C_kwDOANBUbNoAKDQ2MzI1YzE2MzI0YjA2ZmExYjNlYTdmOGNiMDVmMjEwOWVkNjZjZjY", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2022-02-18T22:44:53Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2022-10-11T07:28:15Z"}, "message": "Tigthen the addition of -lgcc_eh to vxworks_libgcc_spec\n\nThis change refines VXWORKS_LIBGCC_SPEC wrt the inclusion\nof -lgcc_eh.\n\nUnless the compiler features support for dual sjlj and\ntable based eh, libgcc_eh.a is available only with multilib\nvariants for which we build a shared lib (mrtp on VxWorks).\n\nRework logic to handle absence of libgcc_s\nfor -mrtp -mcmodel=large, using a conditional expr kind of\nspec.\n\nThe gthread support in libgcc_eh might resort to libgcc\nfunctions on some targets, e.g. cas synchronisation routines\non aarch64. Arrange to append -lgcc also after -lgcc_eh\nin VXWORKS_LIBGCC_SPEC.\n\n2022-10-09  Olivier Hainque  <hainque@adacore.com>\n\ngcc/\n\t* config/vxworks.h (VX_LGCC_EH_SO0, VX_LGCC_EH_SO1): New\n\tinternal macros.\n\t(VXWORKS_LIBGCC_SPEC): Use them and document.", "tree": {"sha": "dca09252b17eb4b1bdc0c1b55a7fbef4b764a751", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dca09252b17eb4b1bdc0c1b55a7fbef4b764a751"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46325c16324b06fa1b3ea7f8cb05f2109ed66cf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46325c16324b06fa1b3ea7f8cb05f2109ed66cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46325c16324b06fa1b3ea7f8cb05f2109ed66cf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46325c16324b06fa1b3ea7f8cb05f2109ed66cf6/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70d81e3a782ca8451c1c6b2c57ed154d20906aa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70d81e3a782ca8451c1c6b2c57ed154d20906aa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70d81e3a782ca8451c1c6b2c57ed154d20906aa3"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "e7e5ffe99994ce4aeb316f9dc2a0cf5d1bf39490", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46325c16324b06fa1b3ea7f8cb05f2109ed66cf6/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46325c16324b06fa1b3ea7f8cb05f2109ed66cf6/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=46325c16324b06fa1b3ea7f8cb05f2109ed66cf6", "patch": "@@ -224,14 +224,54 @@ extern void vxworks_driver_init (unsigned int *, struct cl_decoded_option **);\n #undef VXWORKS_LINK_SPEC\n #define VXWORKS_LINK_SPEC VXWORKS_BASE_LINK_SPEC \" \" VXWORKS_EXTRA_LINK_SPEC\n \n+/* Control how to include libgcc in the link closure, handling both \"shared\"\n+   and \"non-static\" in addition to \"static-libgcc\" when shared lib support is\n+   enabled.  */\n+\n #undef VXWORKS_LIBGCC_SPEC\n+\n+/* libgcc_eh control; libgcc_eh.a is available either together with libgcc_s\n+   (mrtp and mcmodel!=large when configured with --enable-shared) or when the\n+   compiler is specially setup to support dual sjlj/table-based eh.  */\n+\n+/* VX_LGCC_EH_SO1: The \"-lgcc_eh\" part we need in situations where we know a\n+   shared libgcc is available (ENABLE_SHARED_LIBGCC + mrtp multilib).  */\n+\n+#define VX_LGCC_EH_SO1 \" -lgcc_eh -lgcc\"\n+/* Extra -lgcc to handle functions from libgcc_eh that refer to symbols\n+   exposed by libgcc and not guaranteed to be dragged in before -lgcc_eh\n+   appears.  */\n+\n+/* VX_LGCC_EH_SO0: The \"-lgcc_eh\" part we need in situations where we know a\n+   shared libgcc is not available (!ENABLE_SHARED_LIBGCC or !mrtp multlib).  */\n+\n+#if !defined(CONFIG_DUAL_EXCEPTIONS)\n+\n+/* No shared lib && !DUAL_EH -> no libgcc_eh available at all.  */\n+#define VX_LGCC_EH_SO0\n+\n+#else /* CONFIG_DUAL_EXCEPTIONS  */\n+\n+/* No shared lib but DUAL_EH -> libgcc_eh around and spec handled by the driver\n+   depending on ENABLE_SHARED_LIBGCC.  If defined, the driver expects a regular\n+   sequence.  Otherwise, the driver is expected to turn -lgcc into -lgcc_eh on\n+   its own and just add an instance to address possible cross refs.  */\n+\n+#if defined(ENABLE_SHARED_LIBGCC)\n+#define VX_LGCC_EH_SO0 \" -lgcc_eh -lgcc\"\n+#else\n+#define VX_LGCC_EH_SO0 \" -lgcc\"\n+#endif\n+\n+#endif /* CONFIG_DUAL_EXCEPTIONS  */\n+\n #if defined(ENABLE_SHARED_LIBGCC)\n #define VXWORKS_LIBGCC_SPEC                                             \\\n-\"%{!mrtp:-lgcc -lgcc_eh}                                                \\\n- %{mrtp:%{!static-libgcc:%{shared|non-static:-lgcc_s;:-lgcc -lgcc_eh}}  \\\n-         %{static-libgcc:-lgcc -lgcc_eh}}\"\n+  \"%{!mrtp|mcmodel=large:-lgcc\" VX_LGCC_EH_SO0 \";\"\t\t\t\\\n+  \" :%{!static-libgcc:%{shared|non-static:-lgcc_s;:-lgcc\" VX_LGCC_EH_SO1 \"}} \\\n+     %{static-libgcc:-lgcc\" VX_LGCC_EH_SO1 \"}}\"\n #else\n-#define VXWORKS_LIBGCC_SPEC \"-lgcc\"\n+#define VXWORKS_LIBGCC_SPEC \"-lgcc\" VX_LGCC_EH_SO0\n #endif\n \n /* Setup the crtstuff begin/end we might need for dwarf EH registration"}]}