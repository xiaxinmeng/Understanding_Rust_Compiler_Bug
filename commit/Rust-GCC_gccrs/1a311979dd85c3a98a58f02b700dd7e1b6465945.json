{"sha": "1a311979dd85c3a98a58f02b700dd7e1b6465945", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEzMTE5NzlkZDg1YzNhOThhNThmMDJiNzAwZGQ3ZTFiNjQ2NTk0NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-11-22T09:54:25Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-11-22T09:54:25Z"}, "message": "re PR libstdc++/12593 (Resolution of DR 91 (WP) still unimplemented)\n\n2003-11-22  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/12593\n\t* include/bits/istream.tcc (operator>>(basic_string<>&),\n\tgetline(basic_string<>&)): Implement resolution of DR 91 [WP];\n\tfix some minor issues with the exit conditions.\n\t* docs/html/ext/howto.html: Add an entry for DR 91.\n\nFrom-SVN: r73835", "tree": {"sha": "8e79787849bb704bf36b58897c382cf4b682c6e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e79787849bb704bf36b58897c382cf4b682c6e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a311979dd85c3a98a58f02b700dd7e1b6465945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a311979dd85c3a98a58f02b700dd7e1b6465945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a311979dd85c3a98a58f02b700dd7e1b6465945", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a311979dd85c3a98a58f02b700dd7e1b6465945/comments", "author": null, "committer": null, "parents": [{"sha": "13418b400379006a6536465c774aa33a4871f398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13418b400379006a6536465c774aa33a4871f398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13418b400379006a6536465c774aa33a4871f398"}], "stats": {"total": 118, "additions": 81, "deletions": 37}, "files": [{"sha": "22c9b0cca77f6519d448a2539af3d74b8bab5d07", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a311979dd85c3a98a58f02b700dd7e1b6465945/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a311979dd85c3a98a58f02b700dd7e1b6465945/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1a311979dd85c3a98a58f02b700dd7e1b6465945", "patch": "@@ -1,3 +1,11 @@\n+2003-11-22  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/12593\n+\t* include/bits/istream.tcc (operator>>(basic_string<>&),\n+\tgetline(basic_string<>&)): Implement resolution of DR 91 [WP];\n+\tfix some minor issues with the exit conditions.\n+\t* docs/html/ext/howto.html: Add an entry for DR 91.\n+\n 2003-11-21  Paolo Carlini  <pcarlini@suse.de>\n \n \t* config/locale/gnu/monetary_members.cc"}, {"sha": "82930a80e9fe7d67c3b17e778dab001998a92f2e", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a311979dd85c3a98a58f02b700dd7e1b6465945/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a311979dd85c3a98a58f02b700dd7e1b6465945/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=1a311979dd85c3a98a58f02b700dd7e1b6465945", "patch": "@@ -526,6 +526,15 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n         replaced by <code>isspace(c,is.getloc())</code>.\n     </dd>\n \n+    <dt><a href=\"lwg-defects.html#91\">91</a>:\n+        <em>Description of operator&gt;&gt; and getline() for string&lt;&gt;\n+\t    might cause endless loop</em>\n+    </dt>\n+    <dd>They behave as a formatted input function and as an unformatted\n+        input function, respectively (except that <code>getline</code> is\n+\tnot required to set <code>gcount</code>).\n+    </dd>\n+\n     <dt><a href=\"lwg-defects.html#109\">109</a>:\n         <em>Missing binders for non-const sequence elements</em>\n     </dt>"}, {"sha": "40acf116a3bd2e309054a8dce20b6c1ac27f0285", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 64, "deletions": 37, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a311979dd85c3a98a58f02b700dd7e1b6465945/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a311979dd85c3a98a58f02b700dd7e1b6465945/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=1a311979dd85c3a98a58f02b700dd7e1b6465945", "patch": "@@ -1102,32 +1102,46 @@ namespace std\n       typedef typename __istream_type::__ctype_type \t__ctype_type;\n       typedef basic_string<_CharT, _Traits, _Alloc> \t__string_type;\n       typedef typename __string_type::size_type\t\t__size_type;\n-      __size_type __extracted = 0;\n \n+      __size_type __extracted = 0;\n       typename __istream_type::sentry __cerb(__in, false);\n       if (__cerb) \n \t{\n-\t  __str.erase();\n-\t  streamsize __w = __in.width();\n-\t  __size_type __n;\n-\t  __n = __w > 0 ? static_cast<__size_type>(__w) : __str.max_size();\n-\n-\t  const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n-\t  const __int_type __eof = _Traits::eof();\n-\t  __streambuf_type* __sb = __in.rdbuf();\n-\t  __int_type __c = __sb->sgetc();\n-\t  \n-\t  while (__extracted < __n \n-\t\t && !_Traits::eq_int_type(__c, __eof)\n-\t\t && !__ct.is(ctype_base::space, _Traits::to_char_type(__c)))\n+\t  try\n \t    {\n-\t      __str += _Traits::to_char_type(__c);\n-\t      ++__extracted;\n-\t      __c = __sb->snextc();\n+\t      __str.erase();\n+\t      streamsize __w = __in.width();\n+\t      __size_type __n;\n+\t      __n = __w > 0 ? static_cast<__size_type>(__w) : __str.max_size();\n+\t      \n+\t      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n+\t      const __int_type __eof = _Traits::eof();\n+\t      __streambuf_type* __sb = __in.rdbuf();\n+\t      __int_type __c = __sb->sgetc();\n+\t      \n+\t      while (__extracted < __n \n+\t\t     && !_Traits::eq_int_type(__c, __eof)\n+\t\t     && !__ct.is(ctype_base::space, _Traits::to_char_type(__c)))\n+\t\t{\n+\t\t  __str += _Traits::to_char_type(__c);\n+\t\t  ++__extracted;\n+\t\t  __c = __sb->snextc();\n+\t\t}\n+\t      if (_Traits::eq_int_type(__c, __eof))\n+\t\t__in.setstate(ios_base::eofbit);\n+\t      __in.width(0);\n+\t    }\n+\t  catch(...)\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 91. Description of operator>> and getline() for string<>\n+\t      // might cause endless loop\n+\t      // 27.6.1.2.1 Common requirements.\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      __in.setstate(ios_base::badbit);\n+\t      if ((__in.exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n \t    }\n-\t  if (_Traits::eq_int_type(__c, __eof))\n-\t    __in.setstate(ios_base::eofbit);\n-\t  __in.width(0);\n \t}\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 211.  operator>>(istream&, string&) doesn't set failbit\n@@ -1149,31 +1163,44 @@ namespace std\n       typedef typename __string_type::size_type\t\t__size_type;\n \n       __size_type __extracted = 0;\n+      const __size_type __n = __str.max_size();\n       bool __testdelim = false;\n       typename __istream_type::sentry __cerb(__in, true);\n       if (__cerb) \n \t{\n-\t  __str.erase();\n-\t  __size_type __n = __str.max_size();\n-\n-\t  __int_type __idelim = _Traits::to_int_type(__delim);\n-\t  __streambuf_type* __sb = __in.rdbuf();\n-\t  __int_type __c = __sb->sbumpc();\n-\t  const __int_type __eof = _Traits::eof();\n-\t  __testdelim = _Traits::eq_int_type(__c, __idelim);\n-\n-\t  while (__extracted <= __n && !_Traits::eq_int_type(__c, __eof)\n-\t\t && !__testdelim)\n+\t  try\n \t    {\n-\t      __str += _Traits::to_char_type(__c);\n-\t      ++__extracted;\n-\t      __c = __sb->sbumpc();\n+\t      __str.erase();\n+\t      __int_type __idelim = _Traits::to_int_type(__delim);\n+\t      __streambuf_type* __sb = __in.rdbuf();\n+\t      __int_type __c = __sb->sbumpc();\n+\t      const __int_type __eof = _Traits::eof();\n \t      __testdelim = _Traits::eq_int_type(__c, __idelim);\n+\t      \n+\t      while (!_Traits::eq_int_type(__c, __eof) && !__testdelim\n+\t\t     && __extracted < __n)\n+\t\t{\n+\t\t  __str += _Traits::to_char_type(__c);\n+\t\t  ++__extracted;\n+\t\t  __c = __sb->sbumpc();\n+\t\t  __testdelim = _Traits::eq_int_type(__c, __idelim);\n+\t\t}\n+\t      if (_Traits::eq_int_type(__c, __eof))\n+\t\t__in.setstate(ios_base::eofbit);\n+\t    }\n+\t  catch(...)\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 91. Description of operator>> and getline() for string<>\n+\t      // might cause endless loop\n+\t      // 27.6.1.2.1 Common requirements.\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      __in.setstate(ios_base::badbit);\n+\t      if ((__in.exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n \t    }\n-\t  if (_Traits::eq_int_type(__c, __eof))\n-\t    __in.setstate(ios_base::eofbit);\n \t}\n-      if (!__extracted && !__testdelim)\n+      if ((!__extracted && !__testdelim) || __extracted == __n)\n \t__in.setstate(ios_base::failbit);\n       return __in;\n     }"}]}