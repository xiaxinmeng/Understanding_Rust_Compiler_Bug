{"sha": "e508a0190bcea40145bd040532cdcce39cd22fcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUwOGEwMTkwYmNlYTQwMTQ1YmQwNDA1MzJjZGNjZTM5Y2QyMmZjYg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-07-22T00:00:47Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-07-22T00:00:47Z"}, "message": "re PR c/15052 (gcc frontend accepts mismatched function declaration/defintion)\n\n\tPR c/15052\n\t* c-decl.c (grokdeclarator): Only pedwarn for qualified void\n\treturn type on function definitions.  Move other warnings for\n\tqualified return type to -Wreturn-type.  Do not condition any such\n\twarnings on -pedantic.  Update comments.\n\t(start_function): Only copy function type from previous prototype\n\tdeclaration if return types are compatible.\n\t* c-typeck.c (function_types_compatible_p): Don't condition\n\twarning for incompatibility of volatile qualifiers on the return\n\ttype on -pedantic.  Update comment.\n\t* doc/invoke.texi (-Wreturn-type, -Wextra): Update.\n\ntestsuite:\n\t* gcc.dg/noreturn-5.c: Test qualifiers on function type instead of\n\ton return type.\n\t* gcc.dg/qual-return-1.c: Use -Wreturn-type.  Update expected\n\tmessages.\n\t* gcc.dg/qual-return-2.c: Update expected messages.\n\t* gcc.dg/qual-return-3.c, gcc.dg/qual-return-4.c: New tests.\n\nFrom-SVN: r85024", "tree": {"sha": "1ac4fa272ceee88b2f67fe94a86bf5a4e1fb5d60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ac4fa272ceee88b2f67fe94a86bf5a4e1fb5d60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e508a0190bcea40145bd040532cdcce39cd22fcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e508a0190bcea40145bd040532cdcce39cd22fcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e508a0190bcea40145bd040532cdcce39cd22fcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e508a0190bcea40145bd040532cdcce39cd22fcb/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ea8cd06555c64a073fcc4a1aed9e2083b8e2262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ea8cd06555c64a073fcc4a1aed9e2083b8e2262", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ea8cd06555c64a073fcc4a1aed9e2083b8e2262"}], "stats": {"total": 123, "additions": 82, "deletions": 41}, "files": [{"sha": "41622fb420b3dfe65eac0fe57cf1521b3f8b7a89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e508a0190bcea40145bd040532cdcce39cd22fcb", "patch": "@@ -1,3 +1,17 @@\n+2004-07-22  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/15052\n+\t* c-decl.c (grokdeclarator): Only pedwarn for qualified void\n+\treturn type on function definitions.  Move other warnings for\n+\tqualified return type to -Wreturn-type.  Do not condition any such\n+\twarnings on -pedantic.  Update comments.\n+\t(start_function): Only copy function type from previous prototype\n+\tdeclaration if return types are compatible.\n+\t* c-typeck.c (function_types_compatible_p): Don't condition\n+\twarning for incompatibility of volatile qualifiers on the return\n+\ttype on -pedantic.  Update comment.\n+\t* doc/invoke.texi (-Wreturn-type, -Wextra): Update.\n+\n 2004-07-22  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* c-typeck.c (set_init_index): Require designator to be of integer"}, {"sha": "ac812e3dea7d80428071183f8171149f2e56e8ff", "filename": "gcc/c-decl.c", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=e508a0190bcea40145bd040532cdcce39cd22fcb", "patch": "@@ -4165,21 +4165,15 @@ grokdeclarator (tree declarator, tree declspecs,\n \t     qualify the return type, not the function type.  */\n \t  if (type_quals)\n \t    {\n-\t      /* Type qualifiers on a function return type are normally\n-\t\t permitted by the standard but have no effect, so give a\n-\t\t warning at -Wextra.  Qualifiers on a void return type have\n-\t\t meaning as a GNU extension, and are banned on function\n-\t\t definitions in ISO C.  FIXME: strictly we shouldn't\n-\t\t pedwarn for qualified void return types except on function\n-\t\t definitions, but not doing so could lead to the undesirable\n-\t\t state of a \"volatile void\" function return type not being\n-\t\t warned about, and a use of the function being compiled\n-\t\t with GNU semantics, with no diagnostics under -pedantic.  */\n-\t      if (VOID_TYPE_P (type) && pedantic && !in_system_header)\n-\t\tpedwarn (\"ISO C forbids qualified void function return type\");\n-\t      else if (extra_warnings\n-\t\t       && !(VOID_TYPE_P (type)\n-\t\t\t    && type_quals == TYPE_QUAL_VOLATILE))\n+\t      /* Type qualifiers on a function return type are\n+\t\t normally permitted by the standard but have no\n+\t\t effect, so give a warning at -Wreturn-type.\n+\t\t Qualifiers on a void return type are banned on\n+\t\t function definitions in ISO C; GCC used to used them\n+\t\t for noreturn functions.  */\n+\t      if (VOID_TYPE_P (type) && really_funcdef)\n+\t\tpedwarn (\"function definition has qualified void return type\");\n+\t      else if (warn_return_type)\n \t\twarning (\"type qualifiers ignored on function return type\");\n \n \t      type = c_build_qualified_type (type, type_quals);\n@@ -4499,7 +4493,7 @@ grokdeclarator (tree declarator, tree declspecs,\n \tif (pedantic && type_quals && ! DECL_IN_SYSTEM_HEADER (decl))\n \t  pedwarn (\"ISO C forbids qualified function types\");\n \n-\t/* GNU C interprets a `volatile void' return type to indicate\n+\t/* GNU C interprets a volatile-qualified function type to indicate\n \t   that the function does not return.  */\n \tif ((type_quals & TYPE_QUAL_VOLATILE)\n \t    && !VOID_TYPE_P (TREE_TYPE (TREE_TYPE (decl))))\n@@ -5714,8 +5708,8 @@ start_function (tree declspecs, tree declarator, tree attributes)\n   old_decl = lookup_name_in_scope (DECL_NAME (decl1), current_scope);\n   if (old_decl != 0 && TREE_CODE (TREE_TYPE (old_decl)) == FUNCTION_TYPE\n       && !DECL_BUILT_IN (old_decl)\n-      && (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (decl1)))\n-\t  == TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (old_decl))))\n+      && comptypes (TREE_TYPE (TREE_TYPE (decl1)),\n+\t\t    TREE_TYPE (TREE_TYPE (old_decl)))\n       && TYPE_ARG_TYPES (TREE_TYPE (decl1)) == 0)\n     {\n       TREE_TYPE (decl1) = TREE_TYPE (old_decl);"}, {"sha": "8d201cdbda5ceb7852de1ac49b94096f202df7dc", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=e508a0190bcea40145bd040532cdcce39cd22fcb", "patch": "@@ -958,9 +958,9 @@ function_types_compatible_p (tree f1, tree f2)\n   ret1 = TREE_TYPE (f1);\n   ret2 = TREE_TYPE (f2);\n \n-  /* 'volatile' qualifiers on a function's return type mean the function\n-     is noreturn.  */\n-  if (pedantic && TYPE_VOLATILE (ret1) != TYPE_VOLATILE (ret2))\n+  /* 'volatile' qualifiers on a function's return type used to mean\n+     the function is noreturn.  */\n+  if (TYPE_VOLATILE (ret1) != TYPE_VOLATILE (ret2))\n     pedwarn (\"function return types not compatible due to `volatile'\");\n   if (TYPE_VOLATILE (ret1))\n     ret1 = build_qualified_type (TYPE_MAIN_VARIANT (ret1),"}, {"sha": "efd20a97eed6ff0c2315da8423d1214fc284dde1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e508a0190bcea40145bd040532cdcce39cd22fcb", "patch": "@@ -2349,6 +2349,12 @@ Warn whenever a function is defined with a return-type that defaults to\n @code{int}.  Also warn about any @code{return} statement with no\n return-value in a function whose return-type is not @code{void}.\n \n+For C, also warn if the return type of a function has a type qualifier\n+such as @code{const}.  Such a type qualifier has no effect, since the\n+value returned by a function is not an lvalue.  ISO C prohibits\n+qualified @code{void} return types on function definitions, so such\n+return types always receive a warning even without this option.\n+\n For C++, a function without return type always produces a diagnostic\n message, even when @option{-Wno-return-type} is specified.  The only\n exceptions are @samp{main} and functions defined in system headers.\n@@ -2578,13 +2584,6 @@ An unsigned value is compared against zero with @samp{<} or @samp{>=}.\n Storage-class specifiers like @code{static} are not the first things in\n a declaration.  According to the C Standard, this usage is obsolescent.\n \n-@item\n-The return type of a function has a type qualifier such as @code{const}.\n-Such a type qualifier has no effect, since the value returned by a\n-function is not an lvalue.  (But don't warn about the GNU extension of\n-@code{volatile void} return types.  That extension will be warned about\n-if @option{-pedantic} is specified.)\n-\n @item\n If @option{-Wall} or @option{-Wunused} is also specified, warn about unused\n arguments."}, {"sha": "501da15db6f1850f68ec431a163743aa23f38849", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e508a0190bcea40145bd040532cdcce39cd22fcb", "patch": "@@ -1,3 +1,13 @@\n+2004-07-22  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/15052\n+\t* gcc.dg/noreturn-5.c: Test qualifiers on function type instead of\n+\ton return type.\n+\t* gcc.dg/qual-return-1.c: Use -Wreturn-type.  Update expected\n+\tmessages.\n+\t* gcc.dg/qual-return-2.c: Update expected messages.\n+\t* gcc.dg/qual-return-3.c, gcc.dg/qual-return-4.c: New tests.\n+\n 2004-07-22  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcc.dg/c99-init-3.c, gcc.dg/gnu99-init-2.c: New tests."}, {"sha": "e69087a4d74fb4a2c2d04c4ca4e2e1d53d59c4b6", "filename": "gcc/testsuite/gcc.dg/noreturn-5.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-5.c?ref=e508a0190bcea40145bd040532cdcce39cd22fcb", "patch": "@@ -4,4 +4,5 @@\n    The testsuite uses -ansi -pedantic-errors by default, so this has\n    to override.  */\n extern void xxx (int) __attribute__((noreturn));\n-__volatile extern void xxx (int);\n+typedef void voidfn (int);\n+__volatile extern voidfn xxx;"}, {"sha": "ac94df6d2bb0787479a504ea0a21bf60eeb81d49", "filename": "gcc/testsuite/gcc.dg/qual-return-1.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-1.c?ref=e508a0190bcea40145bd040532cdcce39cd22fcb", "patch": "@@ -1,7 +1,7 @@\n /* Test for warnings for qualified function return types.  */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -W\" } */\n+/* { dg-options \"-std=gnu99 -Wreturn-type\" } */\n \n /* Qualifying a function return type makes no sense.  */\n \n@@ -11,13 +11,11 @@ const int int_fn2 (void) { return 0; } /* { dg-warning \"qualifiers\" \"int defn\" }\n \n const void void_fn (void); /* { dg-warning \"qualifiers\" \"void decl\" } */\n const void (*void_ptr) (void); /* { dg-warning \"qualifiers\" \"void ptr\" } */\n-const void void_fn2 (void) { } /* { dg-warning \"qualifiers\" \"void defn\" } */\n+const void void_fn2 (void) { } /* { dg-warning \"qualified\" \"void defn\" } */\n \n-/* \"volatile void\" is a GNU extension, so only warn at -pedantic.  */\n-\n-volatile void vvoid_fn (void);\n-volatile void (*vvoid_ptr) (void);\n-volatile void vvoid_fn2 (void) { }\n+volatile void vvoid_fn (void); /* { dg-warning \"qualifiers\" \"void decl\" } */\n+volatile void (*vvoid_ptr) (void); /* { dg-warning \"qualifiers\" \"void ptr\" } */\n+volatile void vvoid_fn2 (void) { } /* { dg-warning \"qualified\" \"void defn\" } */\n \n int *restrict ip_fn (void); /* { dg-warning \"qualifiers\" \"restrict decl\" } */\n int *restrict (*ip_ptr) (void); /* { dg-warning \"qualifiers\" \"restrict ptr\" } */"}, {"sha": "22a1946b03fe477e67ed6e409f48a735cb974c92", "filename": "gcc/testsuite/gcc.dg/qual-return-2.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-2.c?ref=e508a0190bcea40145bd040532cdcce39cd22fcb", "patch": "@@ -5,10 +5,9 @@\n \n /* Qualifying a function return type makes no sense.  */\n \n-/* \"volatile void\" is a GNU extension, so only warn at -pedantic.\n-   Strictly, the first two of these should warn only if the function is\n-   somewhere used or defined.  */\n+/* The first two of these shouldn't warn (with just -pedantic) as long\n+   as the function is not defined.  */\n \n-volatile void vvoid_fn (void); /* { dg-warning \"qualified\" \"volatile decl\" } */\n-volatile void (*vvoid_ptr) (void); /* { dg-warning \"qualified\" \"volatile ptr\" } */\n+volatile void vvoid_fn (void);\n+volatile void (*vvoid_ptr) (void);\n volatile void vvoid_fn2 (void) { } /* { dg-warning \"qualified\" \"volatile defn\" } */"}, {"sha": "7a92046da815c78427a83db998cf5e244d297db5", "filename": "gcc/testsuite/gcc.dg/qual-return-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-3.c?ref=e508a0190bcea40145bd040532cdcce39cd22fcb", "patch": "@@ -0,0 +1,16 @@\n+/* Test for warnings for qualified function return types.  Bug 15052\n+   from Olatunji Ruwase (tjruwase at stanfordalumni.org): qualifiers\n+   should not be lost when merging declarations.  */\n+\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+int foo (); /* { dg-error \"previous declaration\" \"different qualifiers\" } */\n+const int foo () { return 0; } /* { dg-error \"conflicting types\" \"different qualifiers\" } */\n+\n+void bar (void);\n+volatile void bar () { } /* { dg-warning \"qualified|volatile\" \"different qualifiers\" } */\n+\n+volatile void baz (void);\n+void baz () { } /* { dg-warning \"not compatible\" \"different qualifiers\" } */"}, {"sha": "9b61cfebf126f4532a2516f25bd4727753361e65", "filename": "gcc/testsuite/gcc.dg/qual-return-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e508a0190bcea40145bd040532cdcce39cd22fcb/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-4.c?ref=e508a0190bcea40145bd040532cdcce39cd22fcb", "patch": "@@ -0,0 +1,10 @@\n+/* Test for warnings for qualified function return types.  -pedantic\n+   test.  Only the definition gets a warning for qualified void return\n+   types, not other such types within the definition.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic\" } */\n+\n+volatile void (*y)(int);\n+\n+volatile void (*vvf(int x))(int) { return y; }"}]}