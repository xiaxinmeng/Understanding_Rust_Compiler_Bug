{"sha": "ce84ada3584899887a0ba49f9184f3978d13e8e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U4NGFkYTM1ODQ4OTk4ODdhMGJhNDlmOTE4NGYzOTc4ZDEzZThlMw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-07-28T08:31:36Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-07-28T08:31:36Z"}, "message": "Add mark_spam.py script\n\n\t* mark_spam.py: New file.\n\nFrom-SVN: r238809", "tree": {"sha": "7323f256c1722c83cf3e8970204997a3ebc99b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7323f256c1722c83cf3e8970204997a3ebc99b62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce84ada3584899887a0ba49f9184f3978d13e8e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce84ada3584899887a0ba49f9184f3978d13e8e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce84ada3584899887a0ba49f9184f3978d13e8e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce84ada3584899887a0ba49f9184f3978d13e8e3/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e5f5bf35d760274a0564e25da3931ec31d29d336", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5f5bf35d760274a0564e25da3931ec31d29d336", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5f5bf35d760274a0564e25da3931ec31d29d336"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "10f13f34824983e98f5128ec173e2b4dc073f67c", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce84ada3584899887a0ba49f9184f3978d13e8e3/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce84ada3584899887a0ba49f9184f3978d13e8e3/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=ce84ada3584899887a0ba49f9184f3978d13e8e3", "patch": "@@ -1,3 +1,7 @@\n+2016-07-28  Martin Liska  <mliska@suse.cz>\n+\n+\t* mark_spam.py: New file.\n+\n 2016-07-21  Martin Liska  <mliska@suse.cz>\n \n \t* analyze_brprob.py: If there's no loop, do not calculate"}, {"sha": "cc394dcb7428e8f9365506831404c258151b014d", "filename": "contrib/mark_spam.py", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce84ada3584899887a0ba49f9184f3978d13e8e3/contrib%2Fmark_spam.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce84ada3584899887a0ba49f9184f3978d13e8e3/contrib%2Fmark_spam.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fmark_spam.py?ref=ce84ada3584899887a0ba49f9184f3978d13e8e3", "patch": "@@ -0,0 +1,86 @@\n+#!/usr/bin/env python3\n+#\n+# Script to mark bunch of PRs as spam \n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU General Public License as published by the Free\n+# Software Foundation; either version 3, or (at your option) any later\n+# version.\n+#\n+# GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+# WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.  */\n+#\n+#\n+#\n+\n+import requests\n+import json\n+import argparse\n+\n+base_url = 'https://gcc.gnu.org/bugzilla/rest.cgi/'\n+\n+def mark_as_spam(id, api_key, verbose):\n+    print('Marking as spam: PR%d' % id)\n+    # 1) get bug info to find 'cc'\n+    u = base_url + 'bug/' + str(id)\n+    r = requests.get(u)\n+    response = json.loads(r.text)\n+\n+    # 2) mark the bug as spam\n+    cc_list = response['bugs'][0]['cc']\n+    data = {\n+        'status': 'RESOLVED',\n+        'resolution': 'INVALID',\n+        'summary': 'spam',\n+        'ids': [id],\n+        'api_key': api_key,\n+        'comment': { 'comment': 'spam'},\n+        'product': 'gcc',\n+        'component': 'spam',\n+        'version': 'unknown',\n+        'cc': {'remove': cc_list},\n+        'priority': 'P5',\n+        'severity': 'trivial',\n+        'assigned_to': 'unassigned@gcc.gnu.org' }\n+\n+    r = requests.put(u, json = data)\n+    if verbose:\n+        print(r)\n+        print(r.text)\n+\n+    # 3) mark the first comment as spam\n+    r = requests.get(u + '/comment')\n+    response = json.loads(r.text)\n+    comment_id = response['bugs'][str(id)]['comments'][0]['id']\n+\n+    u2 = '%sbug/comment/%d/tags' % (base_url, comment_id)\n+    r = requests.put(u2, json = {'comment_id': comment_id, 'add': ['spam'], 'api_key': api_key})\n+    if verbose:\n+        print(r)\n+        print(r.text)\n+\n+parser = argparse.ArgumentParser(description='Mark Bugzilla issues as spam.')\n+parser.add_argument('api_key', help = 'API key')\n+parser.add_argument('range', help = 'Range of IDs, e.g. 10-23,24,25,27')\n+parser.add_argument('--verbose', action = 'store_true', help = 'Verbose logging')\n+\n+args = parser.parse_args()\n+\n+chunks = args.range.split(',')\n+for c in chunks:\n+    parts = list(map(lambda x: int(x), c.split('-')))\n+    if len(parts) == 1:\n+        r = [parts[0]]\n+    else:\n+        r = range(parts[0], parts[1] + 1)\n+\n+    for id in r:\n+        mark_as_spam(id, args.api_key, args.verbose)"}]}