{"sha": "75bda2e8134c013bc3d02b78e5b8b34022961985", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzViZGEyZTgxMzRjMDEzYmMzZDAyYjc4ZTViOGIzNDAyMjk2MTk4NQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2014-11-20T21:51:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-11-20T21:51:04Z"}, "message": "re PR c++/63959 (G++ misreports volatile int as trivially copyable)\n\n\tPR c++/63959\n\t* tree.c (trivially_copyable_p): Check for CP_TYPE_VOLATILE_P.\n\nFrom-SVN: r217893", "tree": {"sha": "4e7d542af9cda00c6e273ffaa2b981bb7e54cf57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e7d542af9cda00c6e273ffaa2b981bb7e54cf57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75bda2e8134c013bc3d02b78e5b8b34022961985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75bda2e8134c013bc3d02b78e5b8b34022961985", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75bda2e8134c013bc3d02b78e5b8b34022961985", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75bda2e8134c013bc3d02b78e5b8b34022961985/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e7ea147586ce851b8cc09e36d90a37550b8129bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ea147586ce851b8cc09e36d90a37550b8129bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7ea147586ce851b8cc09e36d90a37550b8129bc"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "2c98a7103d1292f936572386577f077bc0b16890", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75bda2e8134c013bc3d02b78e5b8b34022961985/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75bda2e8134c013bc3d02b78e5b8b34022961985/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=75bda2e8134c013bc3d02b78e5b8b34022961985", "patch": "@@ -1,3 +1,8 @@\n+2014-11-20  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tPR c++/63959\n+\t* tree.c (trivially_copyable_p): Check for CP_TYPE_VOLATILE_P.\n+\n 2014-11-20  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* cp-objcp-common.c: Use hash_table instead of htab."}, {"sha": "f8506f512bcf538ce62342129c61613a28d67ab8", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75bda2e8134c013bc3d02b78e5b8b34022961985/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75bda2e8134c013bc3d02b78e5b8b34022961985/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=75bda2e8134c013bc3d02b78e5b8b34022961985", "patch": "@@ -3206,7 +3206,7 @@ trivially_copyable_p (const_tree t)\n \t    && !TYPE_HAS_COMPLEX_MOVE_ASSIGN (t)\n \t    && TYPE_HAS_TRIVIAL_DESTRUCTOR (t));\n   else\n-    return scalarish_type_p (t);\n+    return !CP_TYPE_VOLATILE_P (t) && scalarish_type_p (t);\n }\n \n /* Returns 1 iff type T is a trivial type, as defined in [basic.types] and"}, {"sha": "c8663739e7dbe56d66fc891c08ac234757997c7f", "filename": "gcc/testsuite/g++.dg/ext/is_trivially_constructible1.C", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75bda2e8134c013bc3d02b78e5b8b34022961985/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_trivially_constructible1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75bda2e8134c013bc3d02b78e5b8b34022961985/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_trivially_constructible1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_trivially_constructible1.C?ref=75bda2e8134c013bc3d02b78e5b8b34022961985", "patch": "@@ -33,3 +33,6 @@ SA(__is_trivially_constructible(int,double));\n SA(!__is_trivially_constructible(int,B));\n \n SA(!__is_trivially_constructible(D));\n+\n+SA(__is_trivially_copyable(int));\n+SA(!__is_trivially_copyable(volatile int));"}, {"sha": "c8613550ce61ef78c6a8188226088009cfa12318", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_copyable/value.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75bda2e8134c013bc3d02b78e5b8b34022961985/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copyable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75bda2e8134c013bc3d02b78e5b8b34022961985/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copyable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copyable%2Fvalue.cc?ref=75bda2e8134c013bc3d02b78e5b8b34022961985", "patch": "@@ -47,6 +47,8 @@ void test01()\n \n   static_assert(test_property<is_trivially_copyable, \n \t\tint>(true), \"\");\n+  static_assert(test_property<is_trivially_copyable,\n+\t\tvolatile int>(false), \"\");\n   static_assert(test_property<is_trivially_copyable, \n \t\tTType>(true), \"\");\n   static_assert(test_property<is_trivially_copyable, "}]}