{"sha": "37679e060354a880f3c7cdd8deb852aa67c1206d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc2NzllMDYwMzU0YTg4MGYzYzdjZGQ4ZGViODUyYWE2N2MxMjA2ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-04-20T16:44:09Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-04-20T16:44:09Z"}, "message": "alpha.md (nt_lda): New pattern.\n\n        * alpha.md (nt_lda): New pattern.\n        * alpha.c (alpha_expand_prologue): Use it for large frames\n        under windows nt.\n\nFrom-SVN: r26565", "tree": {"sha": "1e6f7fd951b7d370a663e0ace5ecf5a8b9609290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e6f7fd951b7d370a663e0ace5ecf5a8b9609290"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37679e060354a880f3c7cdd8deb852aa67c1206d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37679e060354a880f3c7cdd8deb852aa67c1206d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37679e060354a880f3c7cdd8deb852aa67c1206d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37679e060354a880f3c7cdd8deb852aa67c1206d/comments", "author": null, "committer": null, "parents": [{"sha": "0f834f0a3e618d5af3dfdeb1dba4ffe085fd4484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f834f0a3e618d5af3dfdeb1dba4ffe085fd4484", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f834f0a3e618d5af3dfdeb1dba4ffe085fd4484"}], "stats": {"total": 54, "additions": 38, "deletions": 16}, "files": [{"sha": "52e50a8ce8486df4f0be0b944fd7a485dd98153b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37679e060354a880f3c7cdd8deb852aa67c1206d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37679e060354a880f3c7cdd8deb852aa67c1206d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37679e060354a880f3c7cdd8deb852aa67c1206d", "patch": "@@ -1,3 +1,9 @@\n+Tue Apr 20 16:38:11 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.md (nt_lda): New pattern. \n+\t* alpha.c (alpha_expand_prologue): Use it for large frames \n+\tunder windows nt.\n+\n Tue Apr 20 17:57:14 1999  Catherine Moore  <clm@cygnus.com>\n \n         * config/arm/arm.md (movhi):  Add check for odd offset."}, {"sha": "ca282786aca0bb2aafb2225b29773193fff25207", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37679e060354a880f3c7cdd8deb852aa67c1206d/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37679e060354a880f3c7cdd8deb852aa67c1206d/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=37679e060354a880f3c7cdd8deb852aa67c1206d", "patch": "@@ -3421,6 +3421,7 @@ alpha_expand_prologue ()\n       HOST_WIDE_INT leftover = frame_size + 4096 - blocks * 8192;\n       rtx ptr = gen_rtx_REG (DImode, 22);\n       rtx count = gen_rtx_REG (DImode, 23);\n+      rtx seq;\n \n       emit_move_insn (count, GEN_INT (blocks));\n       emit_insn (gen_adddi3 (ptr, stack_pointer_rtx, GEN_INT (4096)));\n@@ -3441,33 +3442,37 @@ alpha_expand_prologue ()\n \t  /* For NT stack unwind (done by 'reverse execution'), it's\n \t     not OK to take the result of a loop, even though the value\n \t     is already in ptr, so we reload it via a single operation\n-\t     and add it to sp.  */\n+\t     and subtract it to sp. \n+\n+\t     Yes, that's correct -- we have to reload the whole constant\n+\t     into a temporary via ldah+lda then subtract from sp.  To\n+\t     ensure we get ldah+lda, we use a special pattern.  */\n \n \t  HOST_WIDE_INT lo, hi;\n \t  lo = ((-frame_size & 0xffff) ^ 0x8000) - 0x8000;\n \t  hi = -frame_size - lo;\n \n-\t  FRP (emit_insn (gen_adddi3 (ptr, stack_pointer_rtx, GEN_INT (hi))));\n-\t  FRP (emit_insn (gen_adddi3 (stack_pointer_rtx, ptr, GEN_INT (lo))));\n+\t  emit_move_insn (ptr, GEN_INT (hi));\n+\t  emit_insn (gen_nt_lda (ptr, GEN_INT (lo)));\n+\t  seq = emit_insn (gen_subdi3 (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t\t       ptr));\n \t}\n       else\n \t{\n-\t  rtx seq;\n-\n \t  seq = emit_insn (gen_adddi3 (stack_pointer_rtx, ptr,\n \t\t\t\t       GEN_INT (-leftover)));\n-\n-\t  /* This alternative is special, because the DWARF code cannot\n-\t     possibly intuit through the loop above.  So we invent this\n-\t     note it looks at instead.  */\n-\t  RTX_FRAME_RELATED_P (seq) = 1;\n-\t  REG_NOTES (seq)\n-\t    = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n-\t\t\t\t gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n-\t\t\t\t   gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\t\t\t GEN_INT (-frame_size))),\n-\t\t\t\t REG_NOTES (seq));\n \t}\n+\n+      /* This alternative is special, because the DWARF code cannot\n+         possibly intuit through the loop above.  So we invent this\n+         note it looks at instead.  */\n+      RTX_FRAME_RELATED_P (seq) = 1;\n+      REG_NOTES (seq)\n+        = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n+\t\t\t     gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t\t       gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t     GEN_INT (-frame_size))),\n+\t\t\t     REG_NOTES (seq));\n     }\n \n   /* Cope with very large offsets to the register save area.  */"}, {"sha": "dbc8b33d18e79ca8745f55a2e0513f80ded1e382", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37679e060354a880f3c7cdd8deb852aa67c1206d/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37679e060354a880f3c7cdd8deb852aa67c1206d/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=37679e060354a880f3c7cdd8deb852aa67c1206d", "patch": "@@ -29,6 +29,7 @@\n ;;\t3\tmskxh\n ;;\t4\tcvtlq\n ;;\t5\tcvtql\n+;;\t6\tnt_lda\n ;;\t\n ;; UNSPEC_VOLATILE:\n ;;\n@@ -5161,6 +5162,16 @@\n     }\n }\")\n \n+;; In creating a large stack frame, NT _must_ use ldah+lda to load\n+;; the frame size into a register.  We use this pattern to ensure\n+;; we get lda instead of addq.\n+(define_insn \"nt_lda\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"r\")\n+\t(unspec:DI [(match_dup 0)\n+\t\t    (match_operand:DI 1 \"const_int_operand\" \"n\")] 6))]\n+  \"\"\n+  \"lda %0,%1(%0)\")\n+\n (define_expand \"builtin_longjmp\"\n   [(unspec_volatile [(match_operand 0 \"register_operand\" \"r\")] 3)]\n   \"! TARGET_OPEN_VMS && ! TARGET_WINDOWS_NT\""}]}