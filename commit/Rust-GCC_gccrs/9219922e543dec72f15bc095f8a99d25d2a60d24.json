{"sha": "9219922e543dec72f15bc095f8a99d25d2a60d24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIxOTkyMmU1NDNkZWM3MmYxNWJjMDk1ZjhhOTlkMjVkMmE2MGQyNA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2014-04-23T18:04:46Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2014-04-23T18:04:46Z"}, "message": "re PR tree-optimization/60902 (ffmpeg built with gcc 4.9 RC produces incorrect flac playback code)\n\n\tPR tree-optimization/60902\n\t* tree-ssa-threadedge.c\n\t(record_temporary_equivalences_from_stmts_at_dest): Make sure to\n\tinvalidate outputs from statements that do not produce useful\n\toutputs for threading.\n\n\tPR tree-optimization/60902\n\t* gcc.target/i386/pr60902.c: New test.\n\nFrom-SVN: r209716", "tree": {"sha": "f8adaeb72edcd87f9048cb8d2adcbfeeeeeba83f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8adaeb72edcd87f9048cb8d2adcbfeeeeeba83f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9219922e543dec72f15bc095f8a99d25d2a60d24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9219922e543dec72f15bc095f8a99d25d2a60d24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9219922e543dec72f15bc095f8a99d25d2a60d24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9219922e543dec72f15bc095f8a99d25d2a60d24/comments", "author": null, "committer": null, "parents": [{"sha": "0e4d63c5eef5c0565ac1d42ae1ac43a12c9fd071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e4d63c5eef5c0565ac1d42ae1ac43a12c9fd071", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e4d63c5eef5c0565ac1d42ae1ac43a12c9fd071"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "ddebba79f84ec13fca97d556081c694ef528c0f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9219922e543dec72f15bc095f8a99d25d2a60d24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9219922e543dec72f15bc095f8a99d25d2a60d24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9219922e543dec72f15bc095f8a99d25d2a60d24", "patch": "@@ -1,3 +1,11 @@\n+2014-04-23  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/60902\n+\t* tree-ssa-threadedge.c\n+\t(record_temporary_equivalences_from_stmts_at_dest): Make sure to\n+\tinvalidate outputs from statements that do not produce useful\n+\toutputs for threading.\n+\n 2014-04-23 Venkataramanan Kumar  <venkataramanan.kumar@linaro.org>\n \n \t* config/aarch64/aarch64.md (stack_protect_set, stack_protect_test)"}, {"sha": "62b07f4bc0dada72092267e97fa464dac5decf56", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9219922e543dec72f15bc095f8a99d25d2a60d24/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9219922e543dec72f15bc095f8a99d25d2a60d24/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9219922e543dec72f15bc095f8a99d25d2a60d24", "patch": "@@ -1,3 +1,8 @@\n+2014-04-23  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/60902\n+\t* gcc.target/i386/pr60902.c: New test.\n+\n 2014-04-23  Alex Velenko  <Alex.Velenko@arm.com>\n \n \t* gcc.target/aarch64/vdup_lane_1.c: New testcase."}, {"sha": "b81dcd76f37aa82586c7bbfbb17d1c750a6bbc7c", "filename": "gcc/testsuite/gcc.target/i386/pr60902.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9219922e543dec72f15bc095f8a99d25d2a60d24/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60902.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9219922e543dec72f15bc095f8a99d25d2a60d24/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60902.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60902.c?ref=9219922e543dec72f15bc095f8a99d25d2a60d24", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+extern void abort ();\n+extern void exit (int);\n+\n+int x;\n+\n+foo()\n+{\n+  static int count;\n+  count++;\n+  if (count > 1)\n+    abort ();\n+}\n+\n+static inline int\n+frob ()\n+{\n+  int a;\n+  __asm__ (\"mov %1, %0\\n\\t\" : \"=r\" (a) : \"m\" (x));\n+  x++;\n+  return a;\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  for (i = 0; i < 10 && frob () == 0; i++)\n+    foo();\n+  exit (0);\n+}"}, {"sha": "8a0103b1637fae9bced979223972426e0c08bc8e", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9219922e543dec72f15bc095f8a99d25d2a60d24/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9219922e543dec72f15bc095f8a99d25d2a60d24/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=9219922e543dec72f15bc095f8a99d25d2a60d24", "patch": "@@ -387,7 +387,34 @@ record_temporary_equivalences_from_stmts_at_dest (edge e,\n           && (gimple_code (stmt) != GIMPLE_CALL\n               || gimple_call_lhs (stmt) == NULL_TREE\n               || TREE_CODE (gimple_call_lhs (stmt)) != SSA_NAME))\n-\tcontinue;\n+\t{\n+\t  /* STMT might still have DEFS and we need to invalidate any known\n+\t     equivalences for them.\n+\n+\t     Consider if STMT is a GIMPLE_ASM with one or more outputs that\n+\t     feeds a conditional inside a loop.  We might derive an equivalence\n+\t     due to the conditional.  */\n+\t  tree op;\n+\t  ssa_op_iter iter;\n+\n+\t  if (backedge_seen)\n+\t    FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_ALL_DEFS)\n+\t      {\n+\t\t/* This call only invalidates equivalences created by\n+\t\t   PHI nodes.  This is by design to keep the cost of\n+\t\t   of invalidation reasonable.  */\n+\t\tinvalidate_equivalences (op, stack, src_map, dst_map);\n+\n+\t\t/* However, conditionals can imply values for real\n+\t\t   operands as well.  And those won't be recorded in the\n+\t\t   maps.  In fact, those equivalences may be recorded totally\n+\t\t   outside the threading code.  We can just create a new\n+\t\t   temporary NULL equivalence here.  */\n+\t        record_temporary_equivalence (op, NULL_TREE, stack);\n+\t      }\n+\n+\t  continue;\n+\t}\n \n       /* The result of __builtin_object_size depends on all the arguments\n \t of a phi node. Temporarily using only one edge produces invalid"}]}