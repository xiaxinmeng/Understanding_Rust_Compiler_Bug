{"sha": "fca04441218b5e306e0480170550ff6ac6a00b36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNhMDQ0NDEyMThiNWUzMDZlMDQ4MDE3MDU1MGZmNmFjNmEwMGIzNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-21T19:24:02Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-21T19:24:02Z"}, "message": "Add prototypes to declarations of functions in real.c.\n\n(immed_real_const_1): Move declaration from rtl.h.\n\nFrom-SVN: r7108", "tree": {"sha": "2da9c6e5c965a7e980c7b1173379f7c6173f532e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2da9c6e5c965a7e980c7b1173379f7c6173f532e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fca04441218b5e306e0480170550ff6ac6a00b36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca04441218b5e306e0480170550ff6ac6a00b36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fca04441218b5e306e0480170550ff6ac6a00b36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca04441218b5e306e0480170550ff6ac6a00b36/comments", "author": null, "committer": null, "parents": [{"sha": "d6b12657988868c64a21f96fdb1b3ef12cd8f066", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b12657988868c64a21f96fdb1b3ef12cd8f066", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6b12657988868c64a21f96fdb1b3ef12cd8f066"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "28dce267931e0b2bb1cc99761f42e11d2021e6a5", "filename": "gcc/real.h", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca04441218b5e306e0480170550ff6ac6a00b36/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca04441218b5e306e0480170550ff6ac6a00b36/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=fca04441218b5e306e0480170550ff6ac6a00b36", "patch": "@@ -1,5 +1,5 @@\n /* Front-end tree definitions for GNU compiler.\n-   Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1991, 1994 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -123,17 +123,33 @@ typedef struct {\n #define REAL_ARITHMETIC(value, code, d1, d2) \\\n   earith (&(value), (code), &(d1), &(d2))\n \n-/* Declare functions in real.c that are referenced here. */\n-void earith (), ereal_from_uint (), ereal_from_int (), ereal_to_int ();\n-void etarldouble (), etartdouble (), etardouble ();\n-long etarsingle ();\n-HOST_WIDE_INT efixi ();\n-unsigned HOST_WIDE_INT efixui ();\n-int ereal_cmp (), ereal_isneg ();\n-unsigned int eroundui ();\n-REAL_VALUE_TYPE etrunci (), etruncui (), ereal_ldexp (), ereal_atof ();\n-REAL_VALUE_TYPE ereal_negate (), ereal_truncate ();\n-REAL_VALUE_TYPE ereal_from_float (), ereal_from_double ();\n+/* Declare functions in real.c. */\n+extern void earith\t\tPROTO((REAL_VALUE_TYPE *, int,\n+\t\t\t\t       REAL_VALUE_TYPE *, REAL_VALUE_TYPE *));\n+extern REAL_VALUE_TYPE etrunci\tPROTO((REAL_VALUE_TYPE));\n+extern REAL_VALUE_TYPE etruncui\tPROTO((REAL_VALUE_TYPE));\n+extern REAL_VALUE_TYPE ereal_atof PROTO((char *, enum machine_mode));\n+extern REAL_VALUE_TYPE ereal_negate PROTO((REAL_VALUE_TYPE));\n+extern HOST_WIDE_INT efixi\tPROTO((REAL_VALUE_TYPE));\n+extern unsigned HOST_WIDE_INT efixui PROTO((REAL_VALUE_TYPE));\n+extern void ereal_from_int\tPROTO((REAL_VALUE_TYPE *,\n+\t\t\t\t       HOST_WIDE_INT, HOST_WIDE_INT));\n+extern void ereal_from_uint\tPROTO((REAL_VALUE_TYPE *,\n+\t\t\t\t       unsigned HOST_WIDE_INT,\n+\t\t\t\t       unsigned HOST_WIDE_INT));\n+extern void ereal_to_int\tPROTO((HOST_WIDE_INT *, HOST_WIDE_INT *,\n+\t\t\t\t       REAL_VALUE_TYPE));\n+extern REAL_VALUE_TYPE ereal_ldexp PROTO((REAL_VALUE_TYPE, int));\n+\n+extern void etartdouble\t\tPROTO((REAL_VALUE_TYPE, long *));\n+extern void etarldouble\t\tPROTO((REAL_VALUE_TYPE, long *));\n+extern void etardouble\t\tPROTO((REAL_VALUE_TYPE, long *));\n+extern long etarsingle\t\tPROTO((REAL_VALUE_TYPE));\n+extern void ereal_to_decimal\tPROTO((REAL_VALUE_TYPE, char *));\n+extern int ereal_cmp\t\tPROTO((REAL_VALUE_TYPE, REAL_VALUE_TYPE));\n+extern int ereal_isneg\t\tPROTO((REAL_VALUE_TYPE));\n+extern REAL_VALUE_TYPE ereal_from_float PROTO((unsigned long));\n+extern REAL_VALUE_TYPE ereal_from_double PROTO((unsigned long *));\n \n #define REAL_VALUES_EQUAL(x, y) (ereal_cmp ((x), (y)) == 0)\n /* true if x < y : */\n@@ -404,6 +420,9 @@ do { union real_extract u;\t\t\t\t\\\n /* Return a CONST_DOUBLE with value R and mode M.  */\n \n #define CONST_DOUBLE_FROM_REAL_VALUE(r, m) immed_real_const_1 (r,  m)\n+extern struct rtx_def *immed_real_const_1\tPROTO((REAL_VALUE_TYPE,\n+\t\t\t\t\t\t       enum machine_mode));\n+\n \n /* Convert a floating point value `r', that can be interpreted\n    as a host machine float or double, to a decimal ASCII string `s'"}]}