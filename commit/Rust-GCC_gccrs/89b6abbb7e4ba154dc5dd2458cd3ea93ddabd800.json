{"sha": "89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODliNmFiYmI3ZTRiYTE1NGRjNWRkMjQ1OGNkM2VhOTNkZGFiZDgwMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-10-17T19:41:01Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-10-17T19:41:01Z"}, "message": "Simplify format_warning_at_substring API\n\nThe format_warning_at_substring API has a rather clunk way of indicating\nthe location of the pertinent param (if any): a source_range * is passed\nin, which can be NULL.  Doing so requires extracting a range from the\nlocation_t and passing around a pointer to it, or NULL, as needed.\n\nThis patch simplifies things by eliminating the source_range * in\nfavor of a location_t, with UNKNOWN_LOCATION used to signify that\nno param location is available.\n\ngcc/c-family/ChangeLog:\n\t* c-format.c (format_warning_at_char): Pass UNKNOWN_LOCATION\n\trather than NULL to format_warning_va.\n\t(check_format_types): Likewise when calling format_type_warning.\n\tRemove code to extract source_ranges and source_range * in favor\n\tof just a location_t.\n\t(format_type_warning): Convert source_range * param to a\n\tlocation_t.\n\ngcc/ChangeLog:\n\t* gimple-ssa-sprintf.c (fmtwarn): Update for changed signature of\n\tformat_warning_at_substring.\n\t(maybe_warn): Convert source_range * param to a location_t.  Pass\n\tUNKNOWN_LOCATION rather than NULL to fmtwarn.\n\t(format_directive): Remove code to extract source_ranges and\n\tsource_range * in favor of just a location_t.\n\t(parse_directive): Pass UNKNOWN_LOCATION rather than NULL to\n\tfmtwarn.\n\t* substring-locations.c (format_warning_va): Convert\n\tsource_range * param to a location_t.\n\t(format_warning_at_substring): Likewise.\n\t* substring-locations.h (format_warning_va): Likewise.\n\t(format_warning_at_substring): Likewise.\n\nFrom-SVN: r253827", "tree": {"sha": "6ce19e9d8c4044bd590ad1020c56f9554ed8559c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ce19e9d8c4044bd590ad1020c56f9554ed8559c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9efb55ac054852c4ea4f082504363c2a66f41dfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9efb55ac054852c4ea4f082504363c2a66f41dfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9efb55ac054852c4ea4f082504363c2a66f41dfe"}], "stats": {"total": 152, "additions": 81, "deletions": 71}, "files": [{"sha": "fed7c36845a3952c4291720f9c823a4a5cb13c99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800", "patch": "@@ -1,3 +1,19 @@\n+2017-10-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gimple-ssa-sprintf.c (fmtwarn): Update for changed signature of\n+\tformat_warning_at_substring.\n+\t(maybe_warn): Convert source_range * param to a location_t.  Pass\n+\tUNKNOWN_LOCATION rather than NULL to fmtwarn.\n+\t(format_directive): Remove code to extract source_ranges and\n+\tsource_range * in favor of just a location_t.\n+\t(parse_directive): Pass UNKNOWN_LOCATION rather than NULL to\n+\tfmtwarn.\n+\t* substring-locations.c (format_warning_va): Convert\n+\tsource_range * param to a location_t.\n+\t(format_warning_at_substring): Likewise.\n+\t* substring-locations.h (format_warning_va): Likewise.\n+\t(format_warning_at_substring): Likewise.\n+\n 2017-10-17  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* target.h (enum vect_cost_for_stmt): Add vec_gather_load and"}, {"sha": "ef1211523a471e724b33d02e1c35a09acd56738c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800", "patch": "@@ -1,3 +1,13 @@\n+2017-10-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-format.c (format_warning_at_char): Pass UNKNOWN_LOCATION\n+\trather than NULL to format_warning_va.\n+\t(check_format_types): Likewise when calling format_type_warning.\n+\tRemove code to extract source_ranges and source_range * in favor\n+\tof just a location_t.\n+\t(format_type_warning): Convert source_range * param to a\n+\tlocation_t.\n+\n 2017-10-13  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-gimplify.c (c_gimplify_expr): Handle [LR]ROTATE_EXPR like"}, {"sha": "164d035396742e8c87df155a4f25ab864f9638cb", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800", "patch": "@@ -97,7 +97,8 @@ format_warning_at_char (location_t fmt_string_loc, tree format_string_cst,\n \n   substring_loc fmt_loc (fmt_string_loc, string_type, char_idx, char_idx,\n \t\t\t char_idx);\n-  bool warned = format_warning_va (fmt_loc, NULL, NULL, opt, gmsgid, &ap);\n+  bool warned = format_warning_va (fmt_loc, UNKNOWN_LOCATION, NULL, opt,\n+\t\t\t\t   gmsgid, &ap);\n   va_end (ap);\n \n   return warned;\n@@ -1039,7 +1040,7 @@ static void check_format_types (const substring_loc &fmt_loc,\n \t\t\t\tchar conversion_char,\n \t\t\t\tvec<location_t> *arglocs);\n static void format_type_warning (const substring_loc &fmt_loc,\n-\t\t\t\t source_range *param_range,\n+\t\t\t\t location_t param_loc,\n \t\t\t\t format_wanted_type *, tree,\n \t\t\t\t tree,\n \t\t\t\t const format_kind_info *fki,\n@@ -3073,8 +3074,9 @@ check_format_types (const substring_loc &fmt_loc,\n       cur_param = types->param;\n       if (!cur_param)\n         {\n-\t  format_type_warning (fmt_loc, NULL, types, wanted_type, NULL, fki,\n-\t\t\t       offset_to_type_start, conversion_char);\n+\t  format_type_warning (fmt_loc, UNKNOWN_LOCATION, types, wanted_type,\n+\t\t\t       NULL, fki, offset_to_type_start,\n+\t\t\t       conversion_char);\n           continue;\n         }\n \n@@ -3084,23 +3086,15 @@ check_format_types (const substring_loc &fmt_loc,\n       orig_cur_type = cur_type;\n       char_type_flag = 0;\n \n-      source_range param_range;\n-      source_range *param_range_ptr;\n+      location_t param_loc = UNKNOWN_LOCATION;\n       if (EXPR_HAS_LOCATION (cur_param))\n-\t{\n-\t  param_range = EXPR_LOCATION_RANGE (cur_param);\n-\t  param_range_ptr = &param_range;\n-\t}\n+\tparam_loc = EXPR_LOCATION (cur_param);\n       else if (arglocs)\n \t{\n \t  /* arg_num is 1-based.  */\n \t  gcc_assert (types->arg_num > 0);\n-\t  location_t param_loc = (*arglocs)[types->arg_num - 1];\n-\t  param_range = get_range_from_loc (line_table, param_loc);\n-\t  param_range_ptr = &param_range;\n+\t  param_loc = (*arglocs)[types->arg_num - 1];\n \t}\n-      else\n-\tparam_range_ptr = NULL;\n \n       STRIP_NOPS (cur_param);\n \n@@ -3166,7 +3160,7 @@ check_format_types (const substring_loc &fmt_loc,\n \t    }\n \t  else\n \t    {\n-\t      format_type_warning (fmt_loc, param_range_ptr,\n+\t      format_type_warning (fmt_loc, param_loc,\n \t\t\t\t   types, wanted_type, orig_cur_type, fki,\n \t\t\t\t   offset_to_type_start, conversion_char);\n \t      break;\n@@ -3236,7 +3230,7 @@ check_format_types (const substring_loc &fmt_loc,\n \t  && TYPE_PRECISION (cur_type) == TYPE_PRECISION (wanted_type))\n \tcontinue;\n       /* Now we have a type mismatch.  */\n-      format_type_warning (fmt_loc, param_range_ptr, types,\n+      format_type_warning (fmt_loc, param_loc, types,\n \t\t\t   wanted_type, orig_cur_type, fki,\n \t\t\t   offset_to_type_start, conversion_char);\n     }\n@@ -3544,8 +3538,9 @@ get_corrected_substring (const substring_loc &fmt_loc,\n /* Give a warning about a format argument of different type from that expected.\n    The range of the diagnostic is taken from WHOLE_FMT_LOC; the caret location\n    is based on the location of the char at TYPE->offset_loc.\n-   If non-NULL, PARAM_RANGE is the source range of the\n-   relevant argument.  WANTED_TYPE is the type the argument should have,\n+   PARAM_LOC is the location of the relevant argument, or UNKNOWN_LOCATION\n+   if this is unavailable.\n+   WANTED_TYPE is the type the argument should have,\n    possibly stripped of pointer dereferences.  The description (such as \"field\n    precision\"), the placement in the format string, a possibly more\n    friendly name of WANTED_TYPE, and the number of pointer dereferences\n@@ -3566,15 +3561,15 @@ get_corrected_substring (const substring_loc &fmt_loc,\n                           V~~~~~~~~ : range of WHOLE_FMT_LOC, from cols 23-31\n       sprintf (d, \"before %-+*.*lld after\", int_expr, int_expr, long_expr);\n                                 ^ ^                             ^~~~~~~~~\n-                                | ` CONVERSION_CHAR: 'd'        *PARAM_RANGE\n+                                | ` CONVERSION_CHAR: 'd'        PARAM_LOC\n                                 type starts here\n \n    OFFSET_TO_TYPE_START is 13, the offset to the \"lld\" within the\n    STRING_CST.  */\n \n static void\n format_type_warning (const substring_loc &whole_fmt_loc,\n-\t\t     source_range *param_range,\n+\t\t     location_t param_loc,\n \t\t     format_wanted_type *type,\n \t\t     tree wanted_type, tree arg_type,\n \t\t     const format_kind_info *fki,\n@@ -3636,7 +3631,7 @@ format_type_warning (const substring_loc &whole_fmt_loc,\n     {\n       if (arg_type)\n \tformat_warning_at_substring\n-\t  (fmt_loc, param_range,\n+\t  (fmt_loc, param_loc,\n \t   corrected_substring, OPT_Wformat_,\n \t   \"%s %<%s%.*s%> expects argument of type %<%s%s%>, \"\n \t   \"but argument %d has type %qT\",\n@@ -3646,7 +3641,7 @@ format_type_warning (const substring_loc &whole_fmt_loc,\n \t   wanted_type_name, p, arg_num, arg_type);\n       else\n \tformat_warning_at_substring\n-\t  (fmt_loc, param_range,\n+\t  (fmt_loc, param_loc,\n \t   corrected_substring, OPT_Wformat_,\n \t   \"%s %<%s%.*s%> expects a matching %<%s%s%> argument\",\n \t   gettext (kind_descriptions[kind]),\n@@ -3657,7 +3652,7 @@ format_type_warning (const substring_loc &whole_fmt_loc,\n     {\n       if (arg_type)\n \tformat_warning_at_substring\n-\t  (fmt_loc, param_range,\n+\t  (fmt_loc, param_loc,\n \t   corrected_substring, OPT_Wformat_,\n \t   \"%s %<%s%.*s%> expects argument of type %<%T%s%>, \"\n \t   \"but argument %d has type %qT\",\n@@ -3667,7 +3662,7 @@ format_type_warning (const substring_loc &whole_fmt_loc,\n \t   wanted_type, p, arg_num, arg_type);\n       else\n \tformat_warning_at_substring\n-\t  (fmt_loc, param_range,\n+\t  (fmt_loc, param_loc,\n \t   corrected_substring, OPT_Wformat_,\n \t   \"%s %<%s%.*s%> expects a matching %<%T%s%> argument\",\n \t   gettext (kind_descriptions[kind]),"}, {"sha": "9770df72898a710a90114a854e6c32d0890a0a8a", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800", "patch": "@@ -583,7 +583,7 @@ get_format_string (tree format, location_t *ploc)\n /* For convenience and brevity.  */\n \n static bool\n-  (* const fmtwarn) (const substring_loc &, const source_range *,\n+  (* const fmtwarn) (const substring_loc &, location_t,\n \t\t     const char *, int, const char *, ...)\n   = format_warning_at_substring;\n \n@@ -2418,7 +2418,7 @@ should_warn_p (const pass_sprintf_length::call_info &info,\n    Return true if a warning has been issued.  */\n \n static bool\n-maybe_warn (substring_loc &dirloc, source_range *pargrange,\n+maybe_warn (substring_loc &dirloc, location_t argloc,\n \t    const pass_sprintf_length::call_info &info,\n \t    const result_range &avail_range, const result_range &res,\n \t    const directive &dir)\n@@ -2476,8 +2476,8 @@ maybe_warn (substring_loc &dirloc, source_range *pargrange,\n \t\t  : G_(\"%qE writing a terminating nul past the end \"\n \t\t       \"of the destination\")));\n \n-\t  return fmtwarn (dirloc, NULL, NULL, info.warnopt (), fmtstr,\n-\t\t\t  info.func);\n+\t  return fmtwarn (dirloc, UNKNOWN_LOCATION, NULL, info.warnopt (),\n+\t\t\t  fmtstr, info.func);\n \t}\n \n       if (res.min == res.max)\n@@ -2500,7 +2500,7 @@ maybe_warn (substring_loc &dirloc, source_range *pargrange,\n \t\t\t  \"%wu bytes into a region of size %wu\"))\n \t\t  : G_(\"%<%.*s%> directive writing %wu bytes \"\n \t\t       \"into a region of size %wu\")));\n-\t  return fmtwarn (dirloc, pargrange, NULL,\n+\t  return fmtwarn (dirloc, argloc, NULL,\n \t\t\t  info.warnopt (), fmtstr, dir.len,\n \t\t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t\t  res.min, navail);\n@@ -2517,7 +2517,7 @@ maybe_warn (substring_loc &dirloc, source_range *pargrange,\n \t\t       \"up to %wu bytes into a region of size %wu\"))\n \t       : G_(\"%<%.*s%> directive writing up to %wu bytes \"\n \t\t    \"into a region of size %wu\"));\n-\t  return fmtwarn (dirloc, pargrange, NULL,\n+\t  return fmtwarn (dirloc, argloc, NULL,\n \t\t\t  info.warnopt (), fmtstr, dir.len,\n \t\t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t\t  res.max, navail);\n@@ -2537,7 +2537,7 @@ maybe_warn (substring_loc &dirloc, source_range *pargrange,\n \t\t       \"likely %wu or more bytes into a region of size %wu\"))\n \t       : G_(\"%<%.*s%> directive writing likely %wu or more bytes \"\n \t\t    \"into a region of size %wu\"));\n-\t  return fmtwarn (dirloc, pargrange, NULL,\n+\t  return fmtwarn (dirloc, argloc, NULL,\n \t\t\t  info.warnopt (), fmtstr, dir.len,\n \t\t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t\t  res.likely, navail);\n@@ -2554,7 +2554,7 @@ maybe_warn (substring_loc &dirloc, source_range *pargrange,\n \t\t       \"between %wu and %wu bytes into a region of size %wu\"))\n \t       : G_(\"%<%.*s%> directive writing between %wu and \"\n \t\t    \"%wu bytes into a region of size %wu\"));\n-\t  return fmtwarn (dirloc, pargrange, NULL,\n+\t  return fmtwarn (dirloc, argloc, NULL,\n \t\t\t  info.warnopt (), fmtstr, dir.len,\n \t\t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t\t  res.min, res.max, navail);\n@@ -2569,7 +2569,7 @@ maybe_warn (substring_loc &dirloc, source_range *pargrange,\n \t\t   \"%wu or more bytes into a region of size %wu\"))\n \t   : G_(\"%<%.*s%> directive writing %wu or more bytes \"\n \t\t\"into a region of size %wu\"));\n-      return fmtwarn (dirloc, pargrange, NULL,\n+      return fmtwarn (dirloc, argloc, NULL,\n \t\t      info.warnopt (), fmtstr, dir.len,\n \t\t      target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t      res.min, navail);\n@@ -2603,7 +2603,7 @@ maybe_warn (substring_loc &dirloc, source_range *pargrange,\n \t      : G_(\"%qE writing a terminating nul past the end \"\n \t\t   \"of the destination\")));\n \n-      return fmtwarn (dirloc, NULL, NULL, info.warnopt (), fmtstr,\n+      return fmtwarn (dirloc, UNKNOWN_LOCATION, NULL, info.warnopt (), fmtstr,\n \t\t      info.func);\n     }\n \n@@ -2628,7 +2628,7 @@ maybe_warn (substring_loc &dirloc, source_range *pargrange,\n \t      : G_(\"%<%.*s%> directive writing %wu bytes \"\n \t\t   \"into a region of size between %wu and %wu\")));\n \n-      return fmtwarn (dirloc, pargrange, NULL,\n+      return fmtwarn (dirloc, argloc, NULL,\n \t\t      info.warnopt (), fmtstr, dir.len,\n \t\t      target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t      res.min, avail_range.min, avail_range.max);\n@@ -2647,7 +2647,7 @@ maybe_warn (substring_loc &dirloc, source_range *pargrange,\n \t\t   \"%wu and %wu\"))\n \t   : G_(\"%<%.*s%> directive writing up to %wu bytes \"\n \t\t\"into a region of size between %wu and %wu\"));\n-      return fmtwarn (dirloc, pargrange, NULL,\n+      return fmtwarn (dirloc, argloc, NULL,\n \t\t      info.warnopt (), fmtstr, dir.len,\n \t\t      target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t      res.max, avail_range.min, avail_range.max);\n@@ -2669,7 +2669,7 @@ maybe_warn (substring_loc &dirloc, source_range *pargrange,\n \t\t   \"%wu and %wu\"))\n \t   : G_(\"%<%.*s%> directive writing likely %wu or more bytes \"\n \t\t\"into a region of size between %wu and %wu\"));\n-      return fmtwarn (dirloc, pargrange, NULL,\n+      return fmtwarn (dirloc, argloc, NULL,\n \t\t      info.warnopt (), fmtstr, dir.len,\n \t\t      target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t      res.likely, avail_range.min, avail_range.max);\n@@ -2688,7 +2688,7 @@ maybe_warn (substring_loc &dirloc, source_range *pargrange,\n \t\t   \"between %wu and %wu\"))\n \t   : G_(\"%<%.*s%> directive writing between %wu and \"\n \t\t\"%wu bytes into a region of size between %wu and %wu\"));\n-      return fmtwarn (dirloc, pargrange, NULL,\n+      return fmtwarn (dirloc, argloc, NULL,\n \t\t      info.warnopt (), fmtstr, dir.len,\n \t\t      target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t      res.min, res.max, avail_range.min, avail_range.max);\n@@ -2705,7 +2705,7 @@ maybe_warn (substring_loc &dirloc, source_range *pargrange,\n \t       \"%wu and %wu\"))\n        : G_(\"%<%.*s%> directive writing %wu or more bytes \"\n \t    \"into a region of size between %wu and %wu\"));\n-  return fmtwarn (dirloc, pargrange, NULL,\n+  return fmtwarn (dirloc, argloc, NULL,\n \t\t  info.warnopt (), fmtstr, dir.len,\n \t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t  res.min, avail_range.min, avail_range.max);\n@@ -2730,17 +2730,11 @@ format_directive (const pass_sprintf_length::call_info &info,\n   substring_loc dirloc (info.fmtloc, TREE_TYPE (info.format),\n \t\t\toffset, start, length);\n \n-  /* Also create a location range for the argument if possible.\n+  /* Also get the location of the argument if possible.\n      This doesn't work for integer literals or function calls.  */\n-  source_range argrange;\n-  source_range *pargrange;\n-  if (dir.arg && CAN_HAVE_LOCATION_P (dir.arg))\n-    {\n-      argrange = EXPR_LOCATION_RANGE (dir.arg);\n-      pargrange = &argrange;\n-    }\n-  else\n-    pargrange = NULL;\n+  location_t argloc = UNKNOWN_LOCATION;\n+  if (dir.arg)\n+    argloc = EXPR_LOCATION (dir.arg);\n \n   /* Bail when there is no function to compute the output length,\n      or when minimum length checking has been disabled.   */\n@@ -2797,7 +2791,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n \n   if (fmtres.nullp)\n     {\n-      fmtwarn (dirloc, pargrange, NULL, info.warnopt (),\n+      fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n \t       \"%<%.*s%> directive argument is null\",\n \t       dirlen, target_to_host (hostdir, sizeof hostdir, dir.beg));\n \n@@ -2816,7 +2810,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n   bool warned = res->warned;\n \n   if (!warned)\n-    warned = maybe_warn (dirloc, pargrange, info, avail_range,\n+    warned = maybe_warn (dirloc, argloc, info, avail_range,\n \t\t\t fmtres.range, dir);\n \n   /* Bump up the total maximum if it isn't too big.  */\n@@ -2862,7 +2856,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n \t (like Glibc does under some conditions).  */\n \n       if (fmtres.range.min == fmtres.range.max)\n-\twarned = fmtwarn (dirloc, pargrange, NULL,\n+\twarned = fmtwarn (dirloc, argloc, NULL,\n \t\t\t  info.warnopt (),\n \t\t\t  \"%<%.*s%> directive output of %wu bytes exceeds \"\n \t\t\t  \"minimum required size of 4095\",\n@@ -2878,7 +2872,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n \t       : G_(\"%<%.*s%> directive output between %wu and %wu \"\n \t\t    \"bytes exceeds minimum required size of 4095\"));\n \n-\t  warned = fmtwarn (dirloc, pargrange, NULL,\n+\t  warned = fmtwarn (dirloc, argloc, NULL,\n \t\t\t    info.warnopt (), fmtstr, dirlen,\n \t\t\t    target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t\t    fmtres.range.min, fmtres.range.max);\n@@ -2906,7 +2900,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n \t to exceed INT_MAX bytes.  */\n \n       if (fmtres.range.min == fmtres.range.max)\n-\twarned = fmtwarn (dirloc, pargrange, NULL, info.warnopt (),\n+\twarned = fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n \t\t\t  \"%<%.*s%> directive output of %wu bytes causes \"\n \t\t\t  \"result to exceed %<INT_MAX%>\",\n \t\t\t  dirlen,\n@@ -2920,7 +2914,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n \t\t     \"bytes causes result to exceed %<INT_MAX%>\")\n \t       : G_ (\"%<%.*s%> directive output between %wu and %wu \"\n \t\t     \"bytes may cause result to exceed %<INT_MAX%>\"));\n-\t  warned = fmtwarn (dirloc, pargrange, NULL,\n+\t  warned = fmtwarn (dirloc, argloc, NULL,\n \t\t\t    info.warnopt (), fmtstr, dirlen,\n \t\t\t    target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t\t    fmtres.range.min, fmtres.range.max);\n@@ -3351,7 +3345,7 @@ parse_directive (pass_sprintf_length::call_info &info,\n \t  substring_loc dirloc (info.fmtloc, TREE_TYPE (info.format),\n \t\t\t\tcaret, begin, end);\n \n-\t  fmtwarn (dirloc, NULL, NULL,\n+\t  fmtwarn (dirloc, UNKNOWN_LOCATION, NULL,\n \t\t   info.warnopt (), \"%<%.*s%> directive width out of range\",\n \t\t   dir.len, target_to_host (hostdir, sizeof hostdir, dir.beg));\n \t}\n@@ -3385,7 +3379,7 @@ parse_directive (pass_sprintf_length::call_info &info,\n \t  substring_loc dirloc (info.fmtloc, TREE_TYPE (info.format),\n \t\t\t\tcaret, begin, end);\n \n-\t  fmtwarn (dirloc, NULL, NULL,\n+\t  fmtwarn (dirloc, UNKNOWN_LOCATION, NULL,\n \t\t   info.warnopt (), \"%<%.*s%> directive precision out of range\",\n \t\t   dir.len, target_to_host (hostdir, sizeof hostdir, dir.beg));\n \t}"}, {"sha": "095e5d073a7176248cbdd5a13166367f6fc578ca", "filename": "gcc/substring-locations.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800/gcc%2Fsubstring-locations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800/gcc%2Fsubstring-locations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsubstring-locations.c?ref=89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800", "patch": "@@ -63,7 +63,7 @@ along with GCC; see the file COPYING3.  If not see\n      printf(fmt, msg);\n             ^~~\n \n-   For each of cases 1-3, if param_range is non-NULL, then it is used\n+   For each of cases 1-3, if param_loc is not UNKNOWN_LOCATION, then it is used\n    as a secondary range within the warning.  For example, here it\n    is used with case 1:\n \n@@ -100,7 +100,7 @@ along with GCC; see the file COPYING3.  If not see\n ATTRIBUTE_GCC_DIAG (5,0)\n bool\n format_warning_va (const substring_loc &fmt_loc,\n-\t\t   const source_range *param_range,\n+\t\t   location_t param_loc,\n \t\t   const char *corrected_substring,\n \t\t   int opt, const char *gmsgid, va_list *ap)\n {\n@@ -136,13 +136,8 @@ format_warning_va (const substring_loc &fmt_loc,\n \n   rich_location richloc (line_table, primary_loc);\n \n-  if (param_range)\n-    {\n-      location_t param_loc = make_location (param_range->m_start,\n-\t\t\t\t\t    param_range->m_start,\n-\t\t\t\t\t    param_range->m_finish);\n-      richloc.add_range (param_loc, false);\n-    }\n+  if (param_loc != UNKNOWN_LOCATION)\n+    richloc.add_range (param_loc, false);\n \n   if (!err && corrected_substring && substring_within_range)\n     richloc.add_fixit_replace (fmt_substring_range, corrected_substring);\n@@ -171,13 +166,13 @@ format_warning_va (const substring_loc &fmt_loc,\n \n bool\n format_warning_at_substring (const substring_loc &fmt_loc,\n-\t\t\t     const source_range *param_range,\n+\t\t\t     location_t param_loc,\n \t\t\t     const char *corrected_substring,\n \t\t\t     int opt, const char *gmsgid, ...)\n {\n   va_list ap;\n   va_start (ap, gmsgid);\n-  bool warned = format_warning_va (fmt_loc, param_range, corrected_substring,\n+  bool warned = format_warning_va (fmt_loc, param_loc, corrected_substring,\n \t\t\t\t   opt, gmsgid, &ap);\n   va_end (ap);\n "}, {"sha": "3d7796db3e6c60cfce65c5432214f13436ba3931", "filename": "gcc/substring-locations.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800/gcc%2Fsubstring-locations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800/gcc%2Fsubstring-locations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsubstring-locations.h?ref=89b6abbb7e4ba154dc5dd2458cd3ea93ddabd800", "patch": "@@ -77,13 +77,13 @@ class substring_loc\n /* Functions for emitting a warning about a format string.  */\n \n extern bool format_warning_va (const substring_loc &fmt_loc,\n-\t\t\t       const source_range *param_range,\n+\t\t\t       location_t param_loc,\n \t\t\t       const char *corrected_substring,\n \t\t\t       int opt, const char *gmsgid, va_list *ap)\n   ATTRIBUTE_GCC_DIAG (5,0);\n \n extern bool format_warning_at_substring (const substring_loc &fmt_loc,\n-\t\t\t\t\t const source_range *param_range,\n+\t\t\t\t\t location_t param_loc,\n \t\t\t\t\t const char *corrected_substring,\n \t\t\t\t\t int opt, const char *gmsgid, ...)\n   ATTRIBUTE_GCC_DIAG (5,0);"}]}