{"sha": "4e5929e4575922015ff4634af4dea59c59a44f10", "node_id": "C_kwDOANBUbNoAKDRlNTkyOWU0NTc1OTIyMDE1ZmY0NjM0YWY0ZGVhNTljNTlhNDRmMTA", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-10-11T22:02:16Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-04T14:51:09Z"}, "message": "gcc/expmed.c: Ensure vector modes are tieable before extraction\n\nExtracting a bitfield from a vector can be achieved by casting the\nvector to a new type whose elements are the same size as the desired\nbitfield, before generating a subreg. However, this is only an\noptimization if the original vector can be accessed in the new\nmachine mode without first being copied - a condition denoted by the\nTARGET_MODES_TIEABLE_P hook.\n\nThis patch adds a check to make sure that the vector modes are\ntieable before attempting to generate a subreg. This is a necessary\nprerequisite for a subsequent patch that will introduce new machine\nmodes for Arm Neon vector-tuple types.\n\ngcc/ChangeLog:\n\n2021-10-11  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* expmed.c (extract_bit_field_1): Ensure modes are tieable.", "tree": {"sha": "d8e3a95b4faed8b7c545c7f3f4e0869b6ef085ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8e3a95b4faed8b7c545c7f3f4e0869b6ef085ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e5929e4575922015ff4634af4dea59c59a44f10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e5929e4575922015ff4634af4dea59c59a44f10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e5929e4575922015ff4634af4dea59c59a44f10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e5929e4575922015ff4634af4dea59c59a44f10/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fc20260619b9f68044b7a3eb042726a382b5002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fc20260619b9f68044b7a3eb042726a382b5002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fc20260619b9f68044b7a3eb042726a382b5002"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "4abce11b647331989cdd7bdf547d7beb5697c160", "filename": "gcc/expmed.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5929e4575922015ff4634af4dea59c59a44f10/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5929e4575922015ff4634af4dea59c59a44f10/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=4e5929e4575922015ff4634af4dea59c59a44f10", "patch": "@@ -1735,7 +1735,8 @@ extract_bit_field_1 (rtx str_rtx, poly_uint64 bitsize, poly_uint64 bitnum,\n       FOR_EACH_MODE_FROM (new_mode, new_mode)\n \tif (known_eq (GET_MODE_SIZE (new_mode), GET_MODE_SIZE (GET_MODE (op0)))\n \t    && known_eq (GET_MODE_UNIT_SIZE (new_mode), GET_MODE_SIZE (tmode))\n-\t    && targetm.vector_mode_supported_p (new_mode))\n+\t    && targetm.vector_mode_supported_p (new_mode)\n+\t    && targetm.modes_tieable_p (GET_MODE (op0), new_mode))\n \t  break;\n       if (new_mode != VOIDmode)\n \top0 = gen_lowpart (new_mode, op0);"}]}