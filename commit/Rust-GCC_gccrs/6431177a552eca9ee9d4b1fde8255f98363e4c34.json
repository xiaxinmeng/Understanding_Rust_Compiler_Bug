{"sha": "6431177a552eca9ee9d4b1fde8255f98363e4c34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQzMTE3N2E1NTJlY2E5ZWU5ZDRiMWZkZTgyNTVmOTgzNjNlNGMzNA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-10-02T07:12:25Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-10-02T07:12:25Z"}, "message": "attribs.c (decl_attributes): Possibly call insert_default_attributes to insert default attributes on...\n\n\t* attribs.c (decl_attributes): Possibly call\n\tinsert_default_attributes to insert default attributes on\n\tfunctions in a lazy manner.\n\t* builtin-attrs.def: New file; define the default format and\n\tformat_arg attributes.\n\t* c-common.c (c_format_attribute_table): Move to earlier in the\n\tfile.\n\t(c_common_nodes_and_builtins): Initialize format_attribute_table.\n\t(enum built_in_attribute, built_in_attributes,\n\tc_attrs_initialized, c_init_attributes,\n\tc_common_insert_default_attributes): New.\n\t(c_common_lang_init): Don't initialize format_attribute_table.  Do\n\tcall c_init_attributes.\n\t* Makefile.in (c-common.o): Depend on builtin-attrs.def.\n\t* c-common.h (init_function_format_info): Don't declare.\n\t(c_common_insert_default_attributes): Declare.\n\t* c-decl.c (implicitly_declare, builtin_function): Call\n\tdecl_attributes.\n\t(init_decl_processing): Don't call init_function_format_info.\n\t(insert_default_attributes): New.\n\t* c-format.c (handle_format_attribute,\n\thandle_format_arg_attribute): Be quiet about inappropriate\n\tdeclaration when applying default attributes.\n\t(init_function_format_info): Remove.\n\t* tree.h (enum attribute_flags): Add ATTR_FLAG_BUILT_IN.\n\t(insert_default_attributes): Declare.\n\ncp:\n\t* decl.c (init_decl_processing): Don't call\n\tinit_function_format_info.  Initialize lang_attribute_table\n\tearlier.\n\t(builtin_function): Call decl_attributes.\n\t(insert_default_attributes): New.\n\ntestsuite:\n\t* gcc.dg/format/attr-5.c, gcc.dg/format/attr-6.c: New tests.\n\nFrom-SVN: r45942", "tree": {"sha": "4648d58efabadc87677da26b0f516d5bfc64f45c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4648d58efabadc87677da26b0f516d5bfc64f45c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6431177a552eca9ee9d4b1fde8255f98363e4c34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6431177a552eca9ee9d4b1fde8255f98363e4c34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6431177a552eca9ee9d4b1fde8255f98363e4c34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6431177a552eca9ee9d4b1fde8255f98363e4c34/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed0ea5602b8f9b125eb77a59521ce8a636584704", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed0ea5602b8f9b125eb77a59521ce8a636584704", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed0ea5602b8f9b125eb77a59521ce8a636584704"}], "stats": {"total": 526, "additions": 421, "deletions": 105}, "files": [{"sha": "7a10bfa342c0addf89e3108b5230cf752194a9d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6431177a552eca9ee9d4b1fde8255f98363e4c34", "patch": "@@ -1,3 +1,32 @@\n+2001-10-02  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* attribs.c (decl_attributes): Possibly call\n+\tinsert_default_attributes to insert default attributes on\n+\tfunctions in a lazy manner.\n+\t* builtin-attrs.def: New file; define the default format and\n+\tformat_arg attributes.\n+\t* c-common.c (c_format_attribute_table): Move to earlier in the\n+\tfile.\n+\t(c_common_nodes_and_builtins): Initialize format_attribute_table.\n+\t(enum built_in_attribute, built_in_attributes,\n+\tc_attrs_initialized, c_init_attributes,\n+\tc_common_insert_default_attributes): New.\n+\t(c_common_lang_init): Don't initialize format_attribute_table.  Do\n+\tcall c_init_attributes.\n+\t* Makefile.in (c-common.o): Depend on builtin-attrs.def.\n+\t* c-common.h (init_function_format_info): Don't declare.\n+\t(c_common_insert_default_attributes): Declare.\n+\t* c-decl.c (implicitly_declare, builtin_function): Call\n+\tdecl_attributes.\n+\t(init_decl_processing): Don't call init_function_format_info.\n+\t(insert_default_attributes): New.\n+\t* c-format.c (handle_format_attribute,\n+\thandle_format_arg_attribute): Be quiet about inappropriate\n+\tdeclaration when applying default attributes.\n+\t(init_function_format_info): Remove.\n+\t* tree.h (enum attribute_flags): Add ATTR_FLAG_BUILT_IN.\n+\t(insert_default_attributes): Declare.\n+\n 2001-10-02  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-format.c (CPLUSPLUS_STD_VER): Define to STD_C94."}, {"sha": "5cd0610d804f7f5952c65113b56143a3ea9fed96", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6431177a552eca9ee9d4b1fde8255f98363e4c34", "patch": "@@ -1249,7 +1249,7 @@ s-under: $(GCC_PASSES)\n \n c-common.o : c-common.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(OBSTACK_H) \\\n \t$(C_COMMON_H) flags.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n-\t$(EXPR_H) $(TM_P_H) builtin-types.def $(TARGET_H)\n+\t$(EXPR_H) $(TM_P_H) builtin-types.def builtin-attrs.def $(TARGET_H)\n \n # A file used by all variants of C and some other languages.\n "}, {"sha": "29982dec52972c7ab76ff2598203b7b4cb2272d1", "filename": "gcc/attribs.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=6431177a552eca9ee9d4b1fde8255f98363e4c34", "patch": "@@ -241,7 +241,11 @@ init_attributes ()\n    information, in the form of a bitwise OR of flags in enum attribute_flags\n    from tree.h.  Depending on these flags, some attributes may be\n    returned to be applied at a later stage (for example, to apply\n-   a decl attribute to the declaration rather than to its type).  */\n+   a decl attribute to the declaration rather than to its type).  If\n+   ATTR_FLAG_BUILT_IN is not set and *NODE is a DECL, then also consider\n+   whether there might be some default attributes to apply to this DECL;\n+   if so, decl_attributes will be called recusrively with those attributes\n+   and ATTR_FLAG_BUILT_IN set.  */\n \n tree\n decl_attributes (node, attributes, flags)\n@@ -256,6 +260,10 @@ decl_attributes (node, attributes, flags)\n \n   (*targetm.insert_attributes) (*node, &attributes);\n \n+  if (DECL_P (*node) && TREE_CODE (*node) == FUNCTION_DECL\n+      && !(flags & (int) ATTR_FLAG_BUILT_IN))\n+    insert_default_attributes (*node);\n+\n   for (a = attributes; a; a = TREE_CHAIN (a))\n     {\n       tree name = TREE_PURPOSE (a);"}, {"sha": "de98501cf36aca3516249335c32d11b028a130fb", "filename": "gcc/builtin-attrs.def", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Fbuiltin-attrs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Fbuiltin-attrs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-attrs.def?ref=6431177a552eca9ee9d4b1fde8255f98363e4c34", "patch": "@@ -0,0 +1,166 @@\n+/* Copyright (C) 2001 Free Software Foundation, Inc.\n+   Contributed by Joseph Myers <jsm28@cam.ac.uk>.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+/* This header provides a declarative way of describing the attributes\n+   that are applied to some functions by default.\n+\n+   Before including this header, you must define the following macros.\n+   In each case where there is an ENUM, it is an identifier used to\n+   reference the tree in subsequent definitions.\n+\n+   DEF_ATTR_NULL_TREE (ENUM)\n+\n+     Constructs a NULL_TREE.\n+\n+   DEF_ATTR_INT (ENUM, VALUE)\n+\n+     Constructs an INTEGER_CST with value VALUE (an integer representable\n+     in HOST_WIDE_INT).\n+\n+   DEF_ATTR_IDENT (ENUM, STRING)\n+\n+     Constructs an IDENTIFIER_NODE for STRING.\n+\n+   DEF_ATTR_TREE_LIST (ENUM, PURPOSE, VALUE, CHAIN)\n+\n+     Constructs a TREE_LIST with given PURPOSE, VALUE and CHAIN (given\n+     as previous ENUM names).\n+\n+   DEF_FN_ATTR (NAME, ATTRS, PREDICATE)\n+\n+     Specifies that the function with name NAME (a previous ENUM for an\n+     IDENTIFIER_NODE) has attributes ATTRS (a previous ENUM) if\n+     PREDICATE is true.  */\n+\n+DEF_ATTR_NULL_TREE (ATTR_NULL)\n+\n+/* Note that below we must avoid whitespace in arguments of CONCAT*.  */\n+\n+/* Construct a tree for a given integer and a list containing it.  */\n+#define DEF_ATTR_FOR_INT(VALUE)\t\t\t\t\t\\\n+  DEF_ATTR_INT (CONCAT2 (ATTR_,VALUE), VALUE)\t\t\t\\\n+  DEF_ATTR_TREE_LIST (CONCAT2 (ATTR_LIST_,VALUE), ATTR_NULL,\t\\\n+\t\t      CONCAT2 (ATTR_,VALUE), ATTR_NULL)\n+DEF_ATTR_FOR_INT (0)\n+DEF_ATTR_FOR_INT (1)\n+DEF_ATTR_FOR_INT (2)\n+DEF_ATTR_FOR_INT (3)\n+DEF_ATTR_FOR_INT (4)\n+#undef DEF_ATTR_FOR_INT\n+\n+/* Construct a tree for a list of two integers.  */\n+#define DEF_LIST_INT_INT(VALUE1, VALUE2)\t\t\t\t \\\n+  DEF_ATTR_TREE_LIST (CONCAT4 (ATTR_LIST_,VALUE1,_,VALUE2), ATTR_NULL,\t \\\n+\t\t    CONCAT2 (ATTR_,VALUE1), CONCAT2 (ATTR_LIST_,VALUE2))\n+DEF_LIST_INT_INT (1,0)\n+DEF_LIST_INT_INT (1,2)\n+DEF_LIST_INT_INT (2,0)\n+DEF_LIST_INT_INT (2,3)\n+DEF_LIST_INT_INT (3,0)\n+DEF_LIST_INT_INT (3,4)\n+#undef DEF_LIST_INT_INT\n+\n+DEF_ATTR_IDENT (ATTR_PRINTF, \"printf\")\n+DEF_ATTR_IDENT (ATTR_SCANF, \"scanf\")\n+DEF_ATTR_IDENT (ATTR_STRFTIME, \"strftime\")\n+DEF_ATTR_IDENT (ATTR_STRFMON, \"strfmon\")\n+\n+DEF_ATTR_IDENT (ATTR_FORMAT, \"format\")\n+DEF_ATTR_IDENT (ATTR_FORMAT_ARG, \"format_arg\")\n+\n+/* Construct a tree for a format attribute.  */\n+#define DEF_FORMAT_ATTRIBUTE(TYPE, VALUES)\t\t\t\t \\\n+  DEF_ATTR_TREE_LIST (CONCAT4 (ATTR_,TYPE,_,VALUES), ATTR_NULL,\t\t \\\n+\t\t      CONCAT2 (ATTR_,TYPE), CONCAT2 (ATTR_LIST_,VALUES)) \\\n+  DEF_ATTR_TREE_LIST (CONCAT4 (ATTR_FORMAT_,TYPE,_,VALUES), ATTR_FORMAT, \\\n+\t\t      CONCAT4 (ATTR_,TYPE,_,VALUES), ATTR_NULL)\n+DEF_FORMAT_ATTRIBUTE(PRINTF,1_0)\n+DEF_FORMAT_ATTRIBUTE(PRINTF,1_2)\n+DEF_FORMAT_ATTRIBUTE(PRINTF,2_0)\n+DEF_FORMAT_ATTRIBUTE(PRINTF,2_3)\n+DEF_FORMAT_ATTRIBUTE(PRINTF,3_0)\n+DEF_FORMAT_ATTRIBUTE(PRINTF,3_4)\n+DEF_FORMAT_ATTRIBUTE(SCANF,1_0)\n+DEF_FORMAT_ATTRIBUTE(SCANF,1_2)\n+DEF_FORMAT_ATTRIBUTE(SCANF,2_0)\n+DEF_FORMAT_ATTRIBUTE(SCANF,2_3)\n+DEF_FORMAT_ATTRIBUTE(STRFTIME,3_0)\n+DEF_FORMAT_ATTRIBUTE(STRFMON,3_4)\n+#undef DEF_FORMAT_ATTRIBUTE\n+\n+DEF_ATTR_TREE_LIST (ATTR_FORMAT_ARG_1, ATTR_FORMAT_ARG, ATTR_LIST_1, ATTR_NULL)\n+DEF_ATTR_TREE_LIST (ATTR_FORMAT_ARG_2, ATTR_FORMAT_ARG, ATTR_LIST_2, ATTR_NULL)\n+\n+/* Define an attribute for a function, along with the IDENTIFIER_NODE.  */\n+#define DEF_FN_ATTR_IDENT(NAME, ATTRS, PREDICATE)\t\\\n+  DEF_ATTR_IDENT (CONCAT2(ATTR_,NAME), STRINGX(NAME))\t\\\n+  DEF_FN_ATTR (CONCAT2(ATTR_,NAME), ATTRS, PREDICATE)\n+\n+/* The ISO C functions are always checked (whether <stdio.h> is\n+   included or not), since it is common to call printf without\n+   including <stdio.h>.  There shouldn't be a problem with this,\n+   since ISO C reserves these function names whether you include the\n+   header file or not.  In any case, the checking is harmless.  With\n+   -ffreestanding, these default attributes are disabled, and must be\n+   specified manually if desired.  */\n+\n+/* __builtin functions should be checked unconditionally, even with\n+   -ffreestanding.  */\n+DEF_FN_ATTR_IDENT (__builtin_printf, ATTR_FORMAT_PRINTF_1_2, true)\n+DEF_FN_ATTR_IDENT (__builtin_fprintf, ATTR_FORMAT_PRINTF_2_3, true)\n+\n+/* Functions from ISO/IEC 9899:1990.  */\n+#define DEF_C89_ATTR(NAME, ATTRS) DEF_FN_ATTR_IDENT (NAME, ATTRS, flag_hosted)\n+DEF_C89_ATTR (printf, ATTR_FORMAT_PRINTF_1_2)\n+DEF_C89_ATTR (fprintf, ATTR_FORMAT_PRINTF_2_3)\n+DEF_C89_ATTR (sprintf, ATTR_FORMAT_PRINTF_2_3)\n+DEF_C89_ATTR (scanf, ATTR_FORMAT_SCANF_1_2)\n+DEF_C89_ATTR (fscanf, ATTR_FORMAT_SCANF_2_3)\n+DEF_C89_ATTR (sscanf, ATTR_FORMAT_SCANF_2_3)\n+DEF_C89_ATTR (vprintf, ATTR_FORMAT_PRINTF_1_0)\n+DEF_C89_ATTR (vfprintf, ATTR_FORMAT_PRINTF_2_0)\n+DEF_C89_ATTR (vsprintf, ATTR_FORMAT_PRINTF_2_0)\n+DEF_C89_ATTR (strftime, ATTR_FORMAT_STRFTIME_3_0)\n+#undef DEF_C89_ATTR\n+\n+/* ISO C99 adds the snprintf and vscanf family functions.  */\n+#define DEF_C99_ATTR(NAME, ATTRS)\t\t\t\t\t    \\\n+  DEF_FN_ATTR_IDENT (NAME, ATTRS,\t\t\t\t\t    \\\n+\t       (flag_hosted\t\t\t\t\t\t    \\\n+\t\t&& (flag_isoc99 || flag_noniso_default_format_attributes)))\n+DEF_C99_ATTR (snprintf, ATTR_FORMAT_PRINTF_3_4)\n+DEF_C99_ATTR (vsnprintf, ATTR_FORMAT_PRINTF_3_0)\n+DEF_C99_ATTR (vscanf, ATTR_FORMAT_SCANF_1_0)\n+DEF_C99_ATTR (vfscanf, ATTR_FORMAT_SCANF_2_0)\n+DEF_C99_ATTR (vsscanf, ATTR_FORMAT_SCANF_2_0)\n+#undef DEF_C99_ATTR\n+\n+/* Functions not in any version of ISO C.  */\n+#define DEF_EXT_ATTR(NAME, ATTRS)\t\t\t\t\t\\\n+  DEF_FN_ATTR_IDENT (NAME, ATTRS,\t\t\t\t\t\\\n+\t       flag_hosted && flag_noniso_default_format_attributes)\n+/* Uniforum/GNU gettext functions.  */\n+DEF_EXT_ATTR (gettext, ATTR_FORMAT_ARG_1)\n+DEF_EXT_ATTR (dgettext, ATTR_FORMAT_ARG_2)\n+DEF_EXT_ATTR (dcgettext, ATTR_FORMAT_ARG_2)\n+/* X/Open strfmon function.  */\n+DEF_EXT_ATTR (strfmon, ATTR_FORMAT_STRFMON_3_4)\n+#undef DEF_EXT_ATTR\n+#undef DEF_FN_ATTR_IDENT"}, {"sha": "a3314ff1fac7faa8c7b400edc9825e7966fa4dfd", "filename": "gcc/c-common.c", "status": "modified", "additions": 94, "deletions": 12, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=6431177a552eca9ee9d4b1fde8255f98363e4c34", "patch": "@@ -2324,6 +2324,18 @@ c_alignof_expr (expr)\n   return fold (build1 (NOP_EXPR, c_size_type_node, t));\n }\n \f\n+/* Give the specifications for the format attributes, used by C and all\n+   descendents.  */\n+\n+static const struct attribute_spec c_format_attribute_table[] =\n+{\n+  { \"format\",                 3, 3, true,  false, false,\n+\t\t\t      handle_format_attribute },\n+  { \"format_arg\",             1, 1, true,  false, false,\n+\t\t\t      handle_format_arg_attribute },\n+  { NULL,                     0, 0, false, false, false, NULL }\n+};\n+\n /* Build tree nodes and builtin functions common to both C and C++ language\n    frontends.  */\n \n@@ -2369,6 +2381,10 @@ c_common_nodes_and_builtins ()\n   tree va_list_ref_type_node;\n   tree va_list_arg_type_node;\n \n+  /* We must initialize this before any builtin functions (which might have\n+     attributes) are declared.  (c_common_lang_init is too late.)  */\n+  format_attribute_table = c_format_attribute_table;\n+\n   /* Define `int' and `char' first so that dbx will output them first.  */\n   record_builtin_type (RID_INT, NULL, integer_type_node);\n   record_builtin_type (RID_CHAR, \"char\", char_type_node);\n@@ -3774,24 +3790,34 @@ boolean_increment (code, arg)\n   return val;\n }\n \f\n-/* Give the specifications for the format attributes, used by C and all\n-   descendents.  */\n-\n-static const struct attribute_spec c_format_attribute_table[] =\n-{\n-  { \"format\",                 3, 3, true,  false, false,\n-\t\t\t      handle_format_attribute },\n-  { \"format_arg\",             1, 1, true,  false, false,\n-\t\t\t      handle_format_arg_attribute },\n-  { NULL,                     0, 0, false, false, false, NULL }\n+/* Handle C and C++ default attributes.  */\n+\n+enum built_in_attribute\n+{\n+#define DEF_ATTR_NULL_TREE(ENUM) ENUM,\n+#define DEF_ATTR_INT(ENUM, VALUE) ENUM,\n+#define DEF_ATTR_IDENT(ENUM, STRING) ENUM,\n+#define DEF_ATTR_TREE_LIST(ENUM, PURPOSE, VALUE, CHAIN) ENUM,\n+#define DEF_FN_ATTR(NAME, ATTRS, PREDICATE) /* No entry needed in enum.  */\n+#include \"builtin-attrs.def\"\n+#undef DEF_ATTR_NULL_TREE\n+#undef DEF_ATTR_INT\n+#undef DEF_ATTR_IDENT\n+#undef DEF_ATTR_TREE_LIST\n+#undef DEF_FN_ATTR\n+  ATTR_LAST\n };\n \n+static tree built_in_attributes[(int) ATTR_LAST];\n+\n+static bool c_attrs_initialized = false;\n+\n+static void c_init_attributes PARAMS ((void));\n+\n /* Do the parts of lang_init common to C and C++.  */\n void\n c_common_lang_init ()\n {\n-  format_attribute_table = c_format_attribute_table;\n-\n   /* If still \"unspecified\", make it match -fbounded-pointers.  */\n   if (flag_bounds_check < 0)\n     flag_bounds_check = flag_bounded_pointers;\n@@ -3808,4 +3834,60 @@ c_common_lang_init ()\n     warning (\"-Wformat-security ignored without -Wformat\");\n   if (warn_missing_format_attribute && !warn_format)\n     warning (\"-Wmissing-format-attribute ignored without -Wformat\");\n+\n+  if (!c_attrs_initialized)\n+    c_init_attributes ();\n+}\n+\n+static void\n+c_init_attributes ()\n+{\n+  /* Fill in the built_in_attributes array.  */\n+#define DEF_ATTR_NULL_TREE(ENUM)\t\t\\\n+  built_in_attributes[(int) ENUM] = NULL_TREE;\n+#define DEF_ATTR_INT(ENUM, VALUE)\t\t\t\t\t     \\\n+  built_in_attributes[(int) ENUM] = build_int_2 (VALUE, VALUE < 0 ? -1 : 0);\n+#define DEF_ATTR_IDENT(ENUM, STRING)\t\t\t\t\\\n+  built_in_attributes[(int) ENUM] = get_identifier (STRING);\n+#define DEF_ATTR_TREE_LIST(ENUM, PURPOSE, VALUE, CHAIN)\t\\\n+  built_in_attributes[(int) ENUM]\t\t\t\\\n+    = tree_cons (built_in_attributes[(int) PURPOSE],\t\\\n+\t\t built_in_attributes[(int) VALUE],\t\\\n+\t\t built_in_attributes[(int) CHAIN]);\n+#define DEF_FN_ATTR(NAME, ATTRS, PREDICATE) /* No initialization needed.  */\n+#include \"builtin-attrs.def\"\n+#undef DEF_ATTR_NULL_TREE\n+#undef DEF_ATTR_INT\n+#undef DEF_ATTR_IDENT\n+#undef DEF_ATTR_TREE_LIST\n+#undef DEF_FN_ATTR\n+  ggc_add_tree_root (built_in_attributes, (int) ATTR_LAST);\n+  c_attrs_initialized = true;\n+}\n+\n+/* Depending on the name of DECL, apply default attributes to it.  */\n+\n+void\n+c_common_insert_default_attributes (decl)\n+     tree decl;\n+{\n+  tree name = DECL_NAME (decl);\n+\n+  if (!c_attrs_initialized)\n+    c_init_attributes ();\n+\n+#define DEF_ATTR_NULL_TREE(ENUM) /* Nothing needed after initialization.  */\n+#define DEF_ATTR_INT(ENUM, VALUE)\n+#define DEF_ATTR_IDENT(ENUM, STRING)\n+#define DEF_ATTR_TREE_LIST(ENUM, PURPOSE, VALUE, CHAIN)\n+#define DEF_FN_ATTR(NAME, ATTRS, PREDICATE)\t\t\t\\\n+  if ((PREDICATE) && name == built_in_attributes[(int) NAME])\t\\\n+    decl_attributes (&decl, built_in_attributes[(int) ATTRS],\t\\\n+\t\t     ATTR_FLAG_BUILT_IN);\n+#include \"builtin-attrs.def\"\n+#undef DEF_ATTR_NULL_TREE\n+#undef DEF_ATTR_INT\n+#undef DEF_ATTR_IDENT\n+#undef DEF_ATTR_TREE_LIST\n+#undef DEF_FN_ATTR\n }"}, {"sha": "66df266a1e03344d68284bbbfb4c2b09c73e3a39", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=6431177a552eca9ee9d4b1fde8255f98363e4c34", "patch": "@@ -503,13 +503,13 @@ extern const char *fname_as_string\t\tPARAMS ((int));\n extern tree fname_decl\t\t\t\tPARAMS ((unsigned, tree));\n extern const char *fname_string\t\t\tPARAMS ((unsigned));\n \n-extern void init_function_format_info\t\tPARAMS ((void));\n extern void check_function_format\t\tPARAMS ((int *, tree, tree, tree));\n extern void set_Wformat\t\t\t\tPARAMS ((int));\n extern tree handle_format_attribute\t\tPARAMS ((tree *, tree, tree,\n \t\t\t\t\t\t\t int, bool *));\n extern tree handle_format_arg_attribute\t\tPARAMS ((tree *, tree, tree,\n \t\t\t\t\t\t\t int, bool *));\n+extern void c_common_insert_default_attributes\tPARAMS ((tree));\n extern void c_apply_type_quals_to_decl\t\tPARAMS ((int, tree));\n extern tree c_sizeof\t\t\t\tPARAMS ((tree));\n extern tree c_alignof\t\t\t\tPARAMS ((tree));"}, {"sha": "f3ad82ea79c94bd21f53d390f86b1d82a8708f9f", "filename": "gcc/c-decl.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6431177a552eca9ee9d4b1fde8255f98363e4c34", "patch": "@@ -2505,7 +2505,7 @@ tree\n implicitly_declare (functionid)\n      tree functionid;\n {\n-  register tree decl;\n+  tree decl;\n   int traditional_warning = 0;\n   /* Only one \"implicit declaration\" warning per identifier.  */\n   int implicit_warning;\n@@ -2555,6 +2555,9 @@ implicitly_declare (functionid)\n \n   gen_aux_info_record (decl, 0, 1, 0);\n \n+  /* Possibly apply some default attributes to this implicit declaration.  */\n+  decl_attributes (&decl, NULL_TREE, 0);\n+\n   return decl;\n }\n \n@@ -3056,9 +3059,6 @@ init_decl_processing ()\n   make_fname_decl = c_make_fname_decl;\n   start_fname_decls ();\n \n-  /* Prepare to check format strings against argument lists.  */\n-  init_function_format_info ();\n-\n   incomplete_decl_finalize_hook = finish_incomplete_decl;\n \n   /* Record our roots.  */\n@@ -3152,8 +3152,23 @@ builtin_function (name, type, function_code, class, library_name)\n   if (name[0] != '_' || name[1] != '_')\n     C_DECL_ANTICIPATED (decl) = 1;\n \n+  /* Possibly apply some default attributes to this built-in function.  */\n+  decl_attributes (&decl, NULL_TREE, 0);\n+\n   return decl;\n }\n+\n+/* Apply default attributes to a function, if a system function with default\n+   attributes.  */\n+\n+void\n+insert_default_attributes (decl)\n+     tree decl;\n+{\n+  if (!TREE_PUBLIC (decl))\n+    return;\n+  c_common_insert_default_attributes (decl);\n+}\n \f\n /* Called when a declaration is seen that contains no names to declare.\n    If its type is a reference to a structure, union or enum inherited"}, {"sha": "4ee3b3d44a28f6e45b39a5a320267a88a4fb5494", "filename": "gcc/c-format.c", "status": "modified", "additions": 10, "deletions": 80, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=6431177a552eca9ee9d4b1fde8255f98363e4c34", "patch": "@@ -89,7 +89,7 @@ handle_format_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n      tree name ATTRIBUTE_UNUSED;\n      tree args;\n-     int flags ATTRIBUTE_UNUSED;\n+     int flags;\n      bool *no_add_attrs;\n {\n   tree decl = *node;\n@@ -177,7 +177,8 @@ handle_format_attribute (node, name, args, flags, no_add_attrs)\n \t  || (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_VALUE (argument)))\n \t      != char_type_node))\n \t{\n-\t  error (\"format string arg not a string type\");\n+\t  if (!(flags & (int) ATTR_FLAG_BUILT_IN))\n+\t    error (\"format string arg not a string type\");\n \t  *no_add_attrs = true;\n \t  return NULL_TREE;\n \t}\n@@ -191,7 +192,8 @@ handle_format_attribute (node, name, args, flags, no_add_attrs)\n \n \t  if (arg_num != first_arg_num)\n \t    {\n-\t      error (\"args to be formatted is not '...'\");\n+\t      if (!(flags & (int) ATTR_FLAG_BUILT_IN))\n+\t\terror (\"args to be formatted is not '...'\");\n \t      *no_add_attrs = true;\n \t      return NULL_TREE;\n \t    }\n@@ -218,7 +220,7 @@ handle_format_arg_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n      tree name ATTRIBUTE_UNUSED;\n      tree args;\n-     int flags ATTRIBUTE_UNUSED;\n+     int flags;\n      bool *no_add_attrs;\n {\n   tree decl = *node;\n@@ -268,7 +270,8 @@ handle_format_arg_attribute (node, name, args, flags, no_add_attrs)\n \t  || (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_VALUE (argument)))\n \t      != char_type_node))\n \t{\n-\t  error (\"format string arg not a string type\");\n+\t  if (!(flags & (int) ATTR_FLAG_BUILT_IN))\n+\t    error (\"format string arg not a string type\");\n \t  *no_add_attrs = true;\n \t  return NULL_TREE;\n \t}\n@@ -278,7 +281,8 @@ handle_format_arg_attribute (node, name, args, flags, no_add_attrs)\n       || (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (TREE_TYPE (decl))))\n \t  != char_type_node))\n     {\n-      error (\"function does not return string type\");\n+      if (!(flags & (int) ATTR_FLAG_BUILT_IN))\n+\terror (\"function does not return string type\");\n       *no_add_attrs = true;\n       return NULL_TREE;\n     }\n@@ -310,80 +314,6 @@ typedef struct international_format_info\n \n static international_format_info *international_format_list = NULL;\n \n-/* Initialize the table of functions to perform format checking on.\n-   The ISO C functions are always checked (whether <stdio.h> is\n-   included or not), since it is common to call printf without\n-   including <stdio.h>.  There shouldn't be a problem with this,\n-   since ISO C reserves these function names whether you include the\n-   header file or not.  In any case, the checking is harmless.  With\n-   -ffreestanding, these default attributes are disabled, and must be\n-   specified manually if desired.\n-\n-   Also initialize the name of function that modify the format string for\n-   internationalization purposes.  */\n-\n-void\n-init_function_format_info ()\n-{\n-  /* __builtin functions should be checked unconditionally, even with\n-     -ffreestanding.  */\n-  record_function_format (get_identifier (\"__builtin_printf\"), NULL_TREE,\n-\t\t\t  printf_format_type, 1, 2);\n-  record_function_format (get_identifier (\"__builtin_fprintf\"), NULL_TREE,\n-\t\t\t  printf_format_type, 2, 3);\n-\n-  if (flag_hosted)\n-    {\n-      /* Functions from ISO/IEC 9899:1990.  */\n-      record_function_format (get_identifier (\"printf\"), NULL_TREE,\n-\t\t\t      printf_format_type, 1, 2);\n-      record_function_format (get_identifier (\"fprintf\"), NULL_TREE,\n-\t\t\t      printf_format_type, 2, 3);\n-      record_function_format (get_identifier (\"sprintf\"), NULL_TREE,\n-\t\t\t      printf_format_type, 2, 3);\n-      record_function_format (get_identifier (\"scanf\"), NULL_TREE,\n-\t\t\t      scanf_format_type, 1, 2);\n-      record_function_format (get_identifier (\"fscanf\"), NULL_TREE,\n-\t\t\t      scanf_format_type, 2, 3);\n-      record_function_format (get_identifier (\"sscanf\"), NULL_TREE,\n-\t\t\t      scanf_format_type, 2, 3);\n-      record_function_format (get_identifier (\"vprintf\"), NULL_TREE,\n-\t\t\t      printf_format_type, 1, 0);\n-      record_function_format (get_identifier (\"vfprintf\"), NULL_TREE,\n-\t\t\t      printf_format_type, 2, 0);\n-      record_function_format (get_identifier (\"vsprintf\"), NULL_TREE,\n-\t\t\t      printf_format_type, 2, 0);\n-      record_function_format (get_identifier (\"strftime\"), NULL_TREE,\n-\t\t\t      strftime_format_type, 3, 0);\n-    }\n-\n-  if (flag_hosted && (flag_isoc99 || flag_noniso_default_format_attributes))\n-    {\n-      /* ISO C99 adds the snprintf and vscanf family functions.  */\n-      record_function_format (get_identifier (\"snprintf\"), NULL_TREE,\n-\t\t\t      printf_format_type, 3, 4);\n-      record_function_format (get_identifier (\"vsnprintf\"), NULL_TREE,\n-\t\t\t      printf_format_type, 3, 0);\n-      record_function_format (get_identifier (\"vscanf\"), NULL_TREE,\n-\t\t\t      scanf_format_type, 1, 0);\n-      record_function_format (get_identifier (\"vfscanf\"), NULL_TREE,\n-\t\t\t      scanf_format_type, 2, 0);\n-      record_function_format (get_identifier (\"vsscanf\"), NULL_TREE,\n-\t\t\t      scanf_format_type, 2, 0);\n-    }\n-\n-  if (flag_hosted && flag_noniso_default_format_attributes)\n-    {\n-      /* Uniforum/GNU gettext functions, not in ISO C.  */\n-      record_international_format (get_identifier (\"gettext\"), NULL_TREE, 1);\n-      record_international_format (get_identifier (\"dgettext\"), NULL_TREE, 2);\n-      record_international_format (get_identifier (\"dcgettext\"), NULL_TREE, 2);\n-      /* X/Open strfmon function.  */\n-      record_function_format (get_identifier (\"strfmon\"), NULL_TREE,\n-\t\t\t      strfmon_format_type, 3, 4);\n-    }\n-}\n-\n /* Record information for argument format checking.  FUNCTION_IDENT is\n    the identifier node for the name of the function to check (its decl\n    need not exist yet)."}, {"sha": "6e3ebaf2a0838ada19f96721a3e87bd06fbba5b1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6431177a552eca9ee9d4b1fde8255f98363e4c34", "patch": "@@ -1,3 +1,11 @@\n+2001-10-02  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* decl.c (init_decl_processing): Don't call\n+\tinit_function_format_info.  Initialize lang_attribute_table\n+\tearlier.\n+\t(builtin_function): Call decl_attributes.\n+\t(insert_default_attributes): New.\n+\n 2001-10-01  Jason Merrill  <jason_merrill@redhat.com>\n \n \t* decl.c (grokdeclarator): Copy array typedef handling from C"}, {"sha": "905784e59fec75253da6af4d9b441a9b25399d88", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6431177a552eca9ee9d4b1fde8255f98363e4c34", "patch": "@@ -6350,6 +6350,8 @@ init_decl_processing ()\n   std_node = current_namespace;\n   pop_namespace ();\n \n+  lang_attribute_table = cp_attribute_table;\n+\n   c_common_nodes_and_builtins ();\n \n   java_byte_type_node = record_builtin_java_type (\"__java_byte\", 8);\n@@ -6487,14 +6489,9 @@ init_decl_processing ()\n   make_fname_decl = cp_make_fname_decl;\n   start_fname_decls ();\n \n-  /* Prepare to check format strings against argument lists.  */\n-  init_function_format_info ();\n-\n   /* Show we use EH for cleanups.  */\n   using_eh_for_cleanups ();\n \n-  lang_attribute_table = cp_attribute_table;\n-\n   /* Maintain consistency.  Perhaps we should just complain if they\n      say -fwritable-strings?  */\n   if (flag_writable_strings)\n@@ -6643,6 +6640,9 @@ builtin_function (name, type, code, class, libname)\n   if (name[0] != '_' || name[1] != '_')\n     DECL_ANTICIPATED (decl) = 1;\n \n+  /* Possibly apply some default attributes to this built-in function.  */\n+  decl_attributes (&decl, NULL_TREE, 0);\n+\n   return decl;\n }\n \n@@ -6765,6 +6765,20 @@ push_throw_library_fn (name, type)\n   TREE_NOTHROW (fn) = 0;\n   return fn;\n }\n+\n+/* Apply default attributes to a function, if a system function with default\n+   attributes.  */\n+\n+void\n+insert_default_attributes (decl)\n+     tree decl;\n+{\n+  if (!DECL_EXTERN_C_FUNCTION_P (decl))\n+    return;\n+  if (!TREE_PUBLIC (decl))\n+    return;\n+  c_common_insert_default_attributes (decl);\n+}\n \f\n /* When we call finish_struct for an anonymous union, we create\n    default copy constructors and such.  But, an anonymous union"}, {"sha": "3c027b7319b1b6e4d9921d130cc2b002caed70cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6431177a552eca9ee9d4b1fde8255f98363e4c34", "patch": "@@ -1,3 +1,7 @@\n+2001-10-02  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/format/attr-5.c, gcc.dg/format/attr-6.c: New tests.\n+\n 2001-10-02  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* g++.dg/warn/format1.C: New test."}, {"sha": "a4e96344b6109db64a538e3e4475f1c21f49d374", "filename": "gcc/testsuite/gcc.dg/format/attr-5.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-5.c?ref=6431177a552eca9ee9d4b1fde8255f98363e4c34", "patch": "@@ -0,0 +1,28 @@\n+/* Test for format attributes: test default attributes are silently ignored\n+   when a function is redeclared in an inappropriate manner.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+/* We can't #include \"format.h\" here.  */\n+\n+/* This scanf declaration is static, so can't be the system function.  */\n+static int scanf(const char *restrict, ...);\n+\n+/* This sscanf declaration doesn't have variable arguments, so isn't\n+   compatible with a format attribute.  */\n+extern int sscanf(const char *restrict, const char *restrict, int *);\n+\n+void\n+foo (const char *s, int *p)\n+{\n+  scanf(\"%ld\", p); /* { dg-bogus \"format\" \"static\" } */\n+  sscanf(s, \"%ld\", p); /* { dg-bogus \"format\" \"wrong type\" } */\n+}\n+\n+/* Dummy definition of scanf.  */\n+static int\n+scanf (const char *restrict fmt, ...)\n+{\n+  return 0;\n+}"}, {"sha": "4e95cfb00f6ed8319166960a203c1abca04ff6f7", "filename": "gcc/testsuite/gcc.dg/format/attr-6.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-6.c?ref=6431177a552eca9ee9d4b1fde8255f98363e4c34", "patch": "@@ -0,0 +1,21 @@\n+/* Test for format attributes: test default attributes are applied\n+   to implicit declarations.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89 -Wformat\" } */\n+\n+/* We can't #include \"format.h\" here.  */\n+\n+/* Technically, none of the format functions should be implicitly declared;\n+   either the implicit type is wrong, the function has variable arguments\n+   or it requires a type declared in a header.  However, some bad programming\n+   practice uses implicit declarations of some of these functions.\n+\n+   Note that printf is not used in this test because of the declaration\n+   of it as a built-in function.  */\n+\n+void\n+foo (const char *s, int *p)\n+{\n+  scanf(\"%ld\", p); /* { dg-warning \"format\" \"implicit scanf\" } */\n+}"}, {"sha": "efa0b83c684e664b356557b6548e82ad38cde782", "filename": "gcc/tree.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6431177a552eca9ee9d4b1fde8255f98363e4c34/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6431177a552eca9ee9d4b1fde8255f98363e4c34", "patch": "@@ -2140,7 +2140,11 @@ enum attribute_flags\n   ATTR_FLAG_ARRAY_NEXT = 4,\n   /* The type passed in is a structure, union or enumeration type being\n      created, and should be modified in place.  */\n-  ATTR_FLAG_TYPE_IN_PLACE = 8\n+  ATTR_FLAG_TYPE_IN_PLACE = 8,\n+  /* The attributes are being applied by default to a library function whose\n+     name indicates known behavior, and should be silently ignored if they\n+     are not in fact compatible with the function type.  */\n+  ATTR_FLAG_BUILT_IN = 16\n };\n \n /* Default versions of target-overridable functions.  */\n@@ -2920,6 +2924,13 @@ extern int setjmp_call_p\t\tPARAMS ((tree));\n    a decl attribute to the declaration rather than to its type).  */\n extern tree decl_attributes\t\tPARAMS ((tree *, tree, int));\n \n+/* The following function must be provided by front ends\n+   using attribs.c.  */\n+\n+/* Possibly apply default attributes to a function (represented by\n+   a FUNCTION_DECL).  */\n+extern void insert_default_attributes PARAMS ((tree));\n+\n /* Table of machine-independent attributes for checking formats, if used.  */\n extern const struct attribute_spec *format_attribute_table;\n "}]}