{"sha": "a4941eecd0c07405fa7f5ee91d74aa6ef302df99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ5NDFlZWNkMGMwNzQwNWZhN2Y1ZWU5MWQ3NGFhNmVmMzAyZGY5OQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2009-07-09T10:14:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-09T10:14:30Z"}, "message": "einfo.ads, einfo.adb: New attribute Related_Expression...\n\n2009-07-09  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.ads, einfo.adb: New attribute Related_Expression, used to link\n\ta temporary to the source expression whose value it captures.\n\n\t* exp_util.adb (Remove_Side_Effects): Set Related_Expression as needed.\n\nFrom-SVN: r149406", "tree": {"sha": "396efd1d13bdcc770e333a2771c59a233f989424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/396efd1d13bdcc770e333a2771c59a233f989424"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4941eecd0c07405fa7f5ee91d74aa6ef302df99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4941eecd0c07405fa7f5ee91d74aa6ef302df99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4941eecd0c07405fa7f5ee91d74aa6ef302df99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4941eecd0c07405fa7f5ee91d74aa6ef302df99/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b41f35ea34d6bfc751564d41d509b2c1b0a353d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b41f35ea34d6bfc751564d41d509b2c1b0a353d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b41f35ea34d6bfc751564d41d509b2c1b0a353d"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "78006e575b2244cb2f348d81236749bc093e30eb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4941eecd0c07405fa7f5ee91d74aa6ef302df99/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4941eecd0c07405fa7f5ee91d74aa6ef302df99/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a4941eecd0c07405fa7f5ee91d74aa6ef302df99", "patch": "@@ -1,3 +1,10 @@\n+2009-07-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads, einfo.adb: New attribute Related_Expression, used to link\n+\ta temporary to the source expression whose value it captures.\n+\n+\t* exp_util.adb (Remove_Side_Effects): Set Related_Expression as needed.\n+\n 2009-07-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* gcc-interface/trans.c (gnat_gimplify_expr): Replace EXPR_LOCUS by"}, {"sha": "b28293a29467a4f3cd0fa433bd083eee78fc65a8", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4941eecd0c07405fa7f5ee91d74aa6ef302df99/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4941eecd0c07405fa7f5ee91d74aa6ef302df99/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=a4941eecd0c07405fa7f5ee91d74aa6ef302df99", "patch": "@@ -205,6 +205,7 @@ package body Einfo is\n    --    Protection_Object               Node23\n    --    Stored_Constraint               Elist23\n \n+   --    Related_Expression              Node24\n    --    Spec_PPC_List                   Node24\n    --    Underlying_Record_View          Node24\n \n@@ -2463,6 +2464,12 @@ package body Einfo is\n       return Node19 (Id);\n    end Related_Array_Object;\n \n+   function Related_Expression (Id : E) return N is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Constant or else Ekind (Id) = E_Variable);\n+      return Node24 (Id);\n+   end Related_Expression;\n+\n    function Related_Instance (Id : E) return E is\n    begin\n       pragma Assert\n@@ -4955,6 +4962,11 @@ package body Einfo is\n       Set_Node19 (Id, V);\n    end Set_Related_Array_Object;\n \n+   procedure Set_Related_Expression (Id : E; V : N) is\n+   begin\n+      Set_Node24 (Id, V);\n+   end Set_Related_Expression;\n+\n    procedure Set_Related_Instance (Id : E; V : E) is\n    begin\n       pragma Assert\n@@ -7948,6 +7960,9 @@ package body Einfo is\n          when E_Record_Type                                =>\n             Write_Str (\"Underlying record view\");\n \n+         when E_Variable | E_Constant                      =>\n+            Write_Str (\"Related expression\");\n+\n          when others                                       =>\n             Write_Str (\"???\");\n       end case;"}, {"sha": "6c28ed8a4954be113af8c4d11d67d504d921eca8", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4941eecd0c07405fa7f5ee91d74aa6ef302df99/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4941eecd0c07405fa7f5ee91d74aa6ef302df99/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=a4941eecd0c07405fa7f5ee91d74aa6ef302df99", "patch": "@@ -3226,6 +3226,11 @@ package Einfo is\n --       to the entity of the corresponding array object. Currently used\n --       only for type-related error messages.\n \n+--    Related_Expression (Node24)\n+--       Present in variables generated internally. Denotes the source\n+--       expression whose elaboration created the variable declaration.\n+--       Used for clearer messages from CodePeer.\n+\n --    Related_Instance (Node15)\n --       Present in the wrapper packages created for subprogram instances.\n --       The internal subprogram that implements the instance is inside the\n@@ -5396,6 +5401,7 @@ package Einfo is\n    --    Interface_Name                      (Node21)\n    --    Shared_Var_Procs_Instance           (Node22)\n    --    Extra_Constrained                   (Node23)\n+   --    Related_Expression                  (Node24)\n    --    Debug_Renaming_Link                 (Node25)\n    --    Last_Assignment                     (Node26)\n    --    Has_Alignment_Clause                (Flag46)\n@@ -5970,6 +5976,7 @@ package Einfo is\n    function Referenced_Object                   (Id : E) return N;\n    function Register_Exception_Call             (Id : E) return N;\n    function Related_Array_Object                (Id : E) return E;\n+   function Related_Expression                  (Id : E) return N;\n    function Related_Instance                    (Id : E) return E;\n    function Related_Type                        (Id : E) return E;\n    function Relative_Deadline_Variable          (Id : E) return E;\n@@ -6524,6 +6531,7 @@ package Einfo is\n    procedure Set_Referenced_Object               (Id : E; V : N);\n    procedure Set_Register_Exception_Call         (Id : E; V : N);\n    procedure Set_Related_Array_Object            (Id : E; V : E);\n+   procedure Set_Related_Expression              (Id : E; V : N);\n    procedure Set_Related_Instance                (Id : E; V : E);\n    procedure Set_Related_Type                    (Id : E; V : E);\n    procedure Set_Relative_Deadline_Variable      (Id : E; V : E);\n@@ -7219,6 +7227,7 @@ package Einfo is\n    pragma Inline (Referenced_Object);\n    pragma Inline (Register_Exception_Call);\n    pragma Inline (Related_Array_Object);\n+   pragma Inline (Related_Expression);\n    pragma Inline (Related_Instance);\n    pragma Inline (Related_Type);\n    pragma Inline (Relative_Deadline_Variable);\n@@ -7607,6 +7616,7 @@ package Einfo is\n    pragma Inline (Set_Referenced_Object);\n    pragma Inline (Set_Register_Exception_Call);\n    pragma Inline (Set_Related_Array_Object);\n+   pragma Inline (Set_Related_Expression);\n    pragma Inline (Set_Related_Instance);\n    pragma Inline (Set_Related_Type);\n    pragma Inline (Set_Renamed_Entity);"}, {"sha": "af7d0aa0d2d3f98f190cecde4db5423330f60d84", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4941eecd0c07405fa7f5ee91d74aa6ef302df99/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4941eecd0c07405fa7f5ee91d74aa6ef302df99/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=a4941eecd0c07405fa7f5ee91d74aa6ef302df99", "patch": "@@ -4595,6 +4595,7 @@ package body Exp_Util is\n \n          Set_Assignment_OK (E);\n          Insert_Action (Exp, E);\n+         Set_Related_Expression (Def_Id, Exp);\n \n       --  If the expression has the form v.all then we can just capture\n       --  the pointer, and then do an explicit dereference on the result.\n@@ -4612,6 +4613,7 @@ package body Exp_Util is\n                New_Reference_To (Etype (Prefix (Exp)), Loc),\n              Constant_Present    => True,\n              Expression          => Relocate_Node (Prefix (Exp))));\n+         Set_Related_Expression (Def_Id, Exp);\n \n       --  Similar processing for an unchecked conversion of an expression\n       --  of the form v.all, where we want the same kind of treatment.\n@@ -4653,6 +4655,7 @@ package body Exp_Util is\n                 Defining_Identifier => Def_Id,\n                 Subtype_Mark        => New_Reference_To (Exp_Type, Loc),\n                 Name                => Relocate_Node (Exp)));\n+            Set_Related_Expression (Def_Id, Exp);\n \n          else\n             Def_Id := Make_Defining_Identifier (Loc, New_Internal_Name ('R'));\n@@ -4668,6 +4671,7 @@ package body Exp_Util is\n \n             Set_Assignment_OK (E);\n             Insert_Action (Exp, E);\n+            Set_Related_Expression (Def_Id, Exp);\n          end if;\n \n       --  For expressions that denote objects, we can use a renaming scheme.\n@@ -4709,9 +4713,10 @@ package body Exp_Util is\n                 Defining_Identifier => Def_Id,\n                 Subtype_Mark        => New_Reference_To (Exp_Type, Loc),\n                 Name                => Relocate_Node (Exp)));\n-\n          end if;\n \n+         Set_Related_Expression (Def_Id, Exp);\n+\n          --  If this is a packed reference, or a selected component with a\n          --  non-standard representation, a reference to the temporary will\n          --  be replaced by a copy of the original expression (see\n@@ -4757,6 +4762,7 @@ package body Exp_Util is\n                    Expression          => Relocate_Node (Exp));\n                Insert_Action (Exp, Decl);\n                Set_Etype (Obj, Exp_Type);\n+               Set_Related_Expression (Obj, Exp);\n                Rewrite (Exp, New_Occurrence_Of (Obj, Loc));\n                return;\n             end;\n@@ -4814,6 +4820,7 @@ package body Exp_Util is\n              Defining_Identifier => Def_Id,\n              Object_Definition   => New_Reference_To (Ref_Type, Loc),\n              Expression          => New_Exp));\n+         Set_Related_Expression (Def_Id, Exp);\n       end if;\n \n       --  Preserve the Assignment_OK flag in all copies, since at least"}]}