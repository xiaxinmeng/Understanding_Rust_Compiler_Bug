{"sha": "626b63d63a2596da1327b5528778a429fa7e25e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI2YjYzZDYzYTI1OTZkYTEzMjdiNTUyODc3OGE0MjlmYTdlMjVlMA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-21T14:30:14Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-21T14:30:59Z"}, "message": "libcody: Add ranlib\n\nAdd RANLIB.\n\n\tlibcody/\n\t* Makefile.in (RANLIB): New var.\n\t* Makesub.in (libcody.a): Apply RANLIB.\n\t* configure.ac: Call AC_PROG_RANLIB.\n\t* configure: Rebuilt.", "tree": {"sha": "d93d5dc98fc09c5aec0f1129eeec3ac1fb8c009a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d93d5dc98fc09c5aec0f1129eeec3ac1fb8c009a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/626b63d63a2596da1327b5528778a429fa7e25e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/626b63d63a2596da1327b5528778a429fa7e25e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/626b63d63a2596da1327b5528778a429fa7e25e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/626b63d63a2596da1327b5528778a429fa7e25e0/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "119d7478d1a7d59a0fa5a02690b2555ac2c3ed89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/119d7478d1a7d59a0fa5a02690b2555ac2c3ed89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/119d7478d1a7d59a0fa5a02690b2555ac2c3ed89"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "a0722f9a385624cf5891da23a29cdc06415251fd", "filename": "libcody/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/626b63d63a2596da1327b5528778a429fa7e25e0/libcody%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/626b63d63a2596da1327b5528778a429fa7e25e0/libcody%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2FMakefile.in?ref=626b63d63a2596da1327b5528778a429fa7e25e0", "patch": "@@ -48,6 +48,7 @@ SHELL := $(shell which zsh 2>/dev/null >/dev/null && echo zsh \\\n # We have to place the -I paths last, so that building will see -I paths to us\n CXX := $(filter-out -I%,@CXX@)\n AR := @AR@\n+RANLIB := @RANLIB@\n INSTALL := $(srcdir)/build-aux/install-sh\n \n # C++ compiler options"}, {"sha": "6ae49d6c793d179b684f9f01d44d6306cfc211ea", "filename": "libcody/Makesub.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/626b63d63a2596da1327b5528778a429fa7e25e0/libcody%2FMakesub.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/626b63d63a2596da1327b5528778a429fa7e25e0/libcody%2FMakesub.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2FMakesub.in?ref=626b63d63a2596da1327b5528778a429fa7e25e0", "patch": "@@ -19,6 +19,7 @@ all:: libcody.a\n \n libcody.a: $(LIBCODY.O)\n \t$(AR) -cr $@ $^\n+\t$(RANLIB) $@\n \n clean::\n \trm -f $(LIBCODY.O) $(LIBCODY.O:.o=.d)"}, {"sha": "af3a3074a35574e959a8d4a218c0c10f42223fe1", "filename": "libcody/configure", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/626b63d63a2596da1327b5528778a429fa7e25e0/libcody%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/626b63d63a2596da1327b5528778a429fa7e25e0/libcody%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2Fconfigure?ref=626b63d63a2596da1327b5528778a429fa7e25e0", "patch": "@@ -590,6 +590,7 @@ LIBOBJS\n ALOY\n DOXYGEN\n AR\n+RANLIB\n EXCEPTIONS\n PICFLAG\n CONFIG_FILES\n@@ -2791,6 +2792,98 @@ fi\n \n ac_config_headers=\"$ac_config_headers config.h\"\n \n+if test -n \"$ac_tool_prefix\"; then\n+  # Extract the first word of \"${ac_tool_prefix}ranlib\", so it can be a program name with args.\n+set dummy ${ac_tool_prefix}ranlib; ac_word=$2\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n+$as_echo_n \"checking for $ac_word... \" >&6; }\n+if ${ac_cv_prog_RANLIB+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if test -n \"$RANLIB\"; then\n+  ac_cv_prog_RANLIB=\"$RANLIB\" # Let the user override the test.\n+else\n+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\n+for as_dir in $PATH\n+do\n+  IFS=$as_save_IFS\n+  test -z \"$as_dir\" && as_dir=.\n+    for ac_exec_ext in '' $ac_executable_extensions; do\n+  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n+    ac_cv_prog_RANLIB=\"${ac_tool_prefix}ranlib\"\n+    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n+    break 2\n+  fi\n+done\n+  done\n+IFS=$as_save_IFS\n+\n+fi\n+fi\n+RANLIB=$ac_cv_prog_RANLIB\n+if test -n \"$RANLIB\"; then\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $RANLIB\" >&5\n+$as_echo \"$RANLIB\" >&6; }\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+$as_echo \"no\" >&6; }\n+fi\n+\n+\n+fi\n+if test -z \"$ac_cv_prog_RANLIB\"; then\n+  ac_ct_RANLIB=$RANLIB\n+  # Extract the first word of \"ranlib\", so it can be a program name with args.\n+set dummy ranlib; ac_word=$2\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n+$as_echo_n \"checking for $ac_word... \" >&6; }\n+if ${ac_cv_prog_ac_ct_RANLIB+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if test -n \"$ac_ct_RANLIB\"; then\n+  ac_cv_prog_ac_ct_RANLIB=\"$ac_ct_RANLIB\" # Let the user override the test.\n+else\n+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\n+for as_dir in $PATH\n+do\n+  IFS=$as_save_IFS\n+  test -z \"$as_dir\" && as_dir=.\n+    for ac_exec_ext in '' $ac_executable_extensions; do\n+  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n+    ac_cv_prog_ac_ct_RANLIB=\"ranlib\"\n+    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n+    break 2\n+  fi\n+done\n+  done\n+IFS=$as_save_IFS\n+\n+fi\n+fi\n+ac_ct_RANLIB=$ac_cv_prog_ac_ct_RANLIB\n+if test -n \"$ac_ct_RANLIB\"; then\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_ct_RANLIB\" >&5\n+$as_echo \"$ac_ct_RANLIB\" >&6; }\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+$as_echo \"no\" >&6; }\n+fi\n+\n+  if test \"x$ac_ct_RANLIB\" = x; then\n+    RANLIB=\":\"\n+  else\n+    case $cross_compiling:$ac_tool_warned in\n+yes:)\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet\" >&5\n+$as_echo \"$as_me: WARNING: using cross tools not prefixed with host triplet\" >&2;}\n+ac_tool_warned=yes ;;\n+esac\n+    RANLIB=$ac_ct_RANLIB\n+  fi\n+else\n+  RANLIB=\"$ac_cv_prog_RANLIB\"\n+fi\n+\n if test -n \"$ac_tool_prefix\"; then\n   # Extract the first word of \"${ac_tool_prefix}ar\", so it can be a program name with args.\n set dummy ${ac_tool_prefix}ar; ac_word=$2"}, {"sha": "598e585a91bcd12d818a7a94c4d9188a2e0ad36c", "filename": "libcody/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/626b63d63a2596da1327b5528778a429fa7e25e0/libcody%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/626b63d63a2596da1327b5528778a429fa7e25e0/libcody%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2Fconfigure.ac?ref=626b63d63a2596da1327b5528778a429fa7e25e0", "patch": "@@ -76,6 +76,7 @@ AC_SUBST(PICFLAG)\n NMS_ENABLE_EXCEPTIONS\n \n AC_CONFIG_HEADERS([config.h])\n+AC_PROG_RANLIB\n AC_CHECK_TOOL([AR],[ar])\n AC_CHECK_PROG([DOXYGEN],[doxygen],[doxygen],[: NOTdoxygen])\n AC_CHECK_PROG([ALOY],[aloy],[aloy],[: Joust testsuite missing])"}]}