{"sha": "46b57af175e889126f65a6ca667c2c4606f93f84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZiNTdhZjE3NWU4ODkxMjZmNjVhNmNhNjY3YzJjNDYwNmY5M2Y4NA==", "commit": {"author": {"name": "Tejas Belagod", "email": "tejas.belagod@arm.com", "date": "2010-08-25T07:23:26Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2010-08-25T07:23:26Z"}, "message": "vmull / vmovl support for Neon.\n\n\nFor Tejas Belagod\n\n2010-08-25  Tejas Belagod  <tejas.belagod@arm.com>\n\n\t* lib/target-supports.exp (check_effective_target_vect_unpack):\n\tSet vect_unpack supported flag to true for neon.\n\n\t* config/arm/iterators.md (VU, SE, V_widen_l): New.\n\t(V_unpack, US): New.\n\t* config/arm/neon.md (vec_unpack<US>_hi_<mode>): Expansion for\n\tvmovl.\n\t(vec_unpack<US>_lo_<mode>): Likewise.\n\t(neon_vec_unpack<US>_hi_<mode>): Instruction pattern for vmovl.\n\t(neon_vec_unpack<US>_lo_<mode>): Likewise.\n\t(vec_widen_<US>mult_lo_<mode>): Expansion for vmull.\n\t(vec_widen_<US>mult_hi_<mode>): Likewise.\n\t(neon_vec_<US>mult_lo_<mode>\"): Instruction pattern for vmull.\n\t(neon_vec_<US>mult_hi_<mode>\"): Likewise.\n\t(neon_unpack<US>_<mode>): Widening move intermediate step for\n\tvectorizing without -mvectorize-with-neon-quad.\n\t(neon_vec_<US>mult_<mode>): Widening multiply intermediate step\n\tfor vectorizing without -mvectorize-with-neon-quad.\n\t* config/arm/predicates.md (vect_par_constant_high): Check for\n\thigh-half lanes of a vector.\n\t(vect_par_constant_low): Check for low-half lanes of a vector.\n\nFrom-SVN: r163538", "tree": {"sha": "ece038bdb45a512974b020f1864bb6948370b6b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ece038bdb45a512974b020f1864bb6948370b6b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46b57af175e889126f65a6ca667c2c4606f93f84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46b57af175e889126f65a6ca667c2c4606f93f84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46b57af175e889126f65a6ca667c2c4606f93f84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46b57af175e889126f65a6ca667c2c4606f93f84/comments", "author": {"login": "tejas-belagod-arm", "id": 92718852, "node_id": "U_kgDOBYbHBA", "avatar_url": "https://avatars.githubusercontent.com/u/92718852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tejas-belagod-arm", "html_url": "https://github.com/tejas-belagod-arm", "followers_url": "https://api.github.com/users/tejas-belagod-arm/followers", "following_url": "https://api.github.com/users/tejas-belagod-arm/following{/other_user}", "gists_url": "https://api.github.com/users/tejas-belagod-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/tejas-belagod-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tejas-belagod-arm/subscriptions", "organizations_url": "https://api.github.com/users/tejas-belagod-arm/orgs", "repos_url": "https://api.github.com/users/tejas-belagod-arm/repos", "events_url": "https://api.github.com/users/tejas-belagod-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/tejas-belagod-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "34f41f7c1ada644dca11e1bcb1a5e13e0eb6eecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f41f7c1ada644dca11e1bcb1a5e13e0eb6eecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34f41f7c1ada644dca11e1bcb1a5e13e0eb6eecb"}], "stats": {"total": 303, "additions": 301, "deletions": 2}, "files": [{"sha": "29c5aecd4b24ff2ab05d5aaa5649b1ab97a671d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b57af175e889126f65a6ca667c2c4606f93f84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b57af175e889126f65a6ca667c2c4606f93f84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46b57af175e889126f65a6ca667c2c4606f93f84", "patch": "@@ -1,3 +1,24 @@\n+2010-08-25  Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* config/arm/iterators.md (VU, SE, V_widen_l): New.\n+\t(V_unpack, US): New.\n+\t* config/arm/neon.md (vec_unpack<US>_hi_<mode>): Expansion for\n+\tvmovl.\n+\t(vec_unpack<US>_lo_<mode>): Likewise.\n+\t(neon_vec_unpack<US>_hi_<mode>): Instruction pattern for vmovl.\n+\t(neon_vec_unpack<US>_lo_<mode>): Likewise.\n+\t(vec_widen_<US>mult_lo_<mode>): Expansion for vmull.\n+\t(vec_widen_<US>mult_hi_<mode>): Likewise.\n+\t(neon_vec_<US>mult_lo_<mode>\"): Instruction pattern for vmull.\n+\t(neon_vec_<US>mult_hi_<mode>\"): Likewise.\n+\t(neon_unpack<US>_<mode>): Widening move intermediate step for\n+\tvectorizing without -mvectorize-with-neon-quad.\n+\t(neon_vec_<US>mult_<mode>): Widening multiply intermediate step\n+\tfor vectorizing without -mvectorize-with-neon-quad.\n+\t* config/arm/predicates.md (vect_par_constant_high): Check for\n+\thigh-half lanes of a vector.\n+\t(vect_par_constant_low): Check for low-half lanes of a vector.\n+\n 2010-08-24  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* tree-if-conv.c (struct ifc_dr): New."}, {"sha": "d9b5621ef76eac377b883d317722479f4e860ceb", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b57af175e889126f65a6ca667c2c4606f93f84/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b57af175e889126f65a6ca667c2c4606f93f84/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=46b57af175e889126f65a6ca667c2c4606f93f84", "patch": "@@ -136,7 +136,9 @@\n ;; Modes with 32-bit elements only.\n (define_mode_iterator V32 [V2SI V2SF V4SI V4SF])\n \n-\n+;; Modes with 8-bit, 16-bit and 32-bit elements.\n+(define_mode_iterator VU [V16QI V8HI V4SI])\n+ \n ;;----------------------------------------------------------------------------\n ;; Code iterators\n ;;----------------------------------------------------------------------------\n@@ -156,6 +158,8 @@\n ;; without unsigned variants (for use with *SFmode pattern).\n (define_code_iterator vqhs_ops [plus smin smax])\n \n+;; A list of widening operators\n+(define_code_iterator SE [sign_extend zero_extend])\n \n ;;----------------------------------------------------------------------------\n ;; Mode attributes\n@@ -360,6 +364,11 @@\n                                  (V2SF \"2\") (V4SF \"4\")\n                                  (DI \"1\")   (V2DI \"2\")])\n \n+;; Same as V_widen, but lower-case.\n+(define_mode_attr V_widen_l [(V8QI \"v8hi\") (V4HI \"v4si\") ( V2SI \"v2di\")])\n+\n+;; Widen. Result is half the number of elements, but widened to double-width.\n+(define_mode_attr V_unpack   [(V16QI \"V8HI\") (V8HI \"V4SI\") (V4SI \"V2DI\")])\n \n ;;----------------------------------------------------------------------------\n ;; Code attributes\n@@ -375,3 +384,6 @@\n \n (define_code_attr cnb [(ltu \"CC_C\") (geu \"CC\")])\n (define_code_attr optab [(ltu \"ltu\") (geu \"geu\")])\n+\n+;; Assembler mnemonics for signedness of widening operations.\n+(define_code_attr US [(sign_extend \"s\") (zero_extend \"u\")])"}, {"sha": "96241b9c17f8d2947b9efdc76a5dbd3b51d8a87b", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b57af175e889126f65a6ca667c2c4606f93f84/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b57af175e889126f65a6ca667c2c4606f93f84/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=46b57af175e889126f65a6ca667c2c4606f93f84", "patch": "@@ -4977,3 +4977,205 @@\n   emit_insn (gen_orn<mode>3_neon (operands[0], operands[1], operands[2]));\n   DONE;\n })\n+\n+(define_insn \"neon_vec_unpack<US>_lo_<mode>\"\n+  [(set (match_operand:<V_unpack> 0 \"register_operand\" \"=w\")\n+        (SE:<V_unpack> (vec_select:<V_HALF>\n+\t\t\t  (match_operand:VU 1 \"register_operand\" \"w\")\n+\t\t\t  (match_operand:VU 2 \"vect_par_constant_low\" \"\"))))]\n+  \"TARGET_NEON\"\n+  \"vmovl.<US><V_sz_elem> %q0, %e1\"\n+  [(set_attr \"neon_type\" \"neon_shift_1\")]\n+)\n+\n+(define_insn \"neon_vec_unpack<US>_hi_<mode>\"\n+  [(set (match_operand:<V_unpack> 0 \"register_operand\" \"=w\")\n+        (SE:<V_unpack> (vec_select:<V_HALF>\n+\t\t\t  (match_operand:VU 1 \"register_operand\" \"w\")\n+\t\t\t  (match_operand:VU 2 \"vect_par_constant_high\" \"\"))))]\n+  \"TARGET_NEON\"\n+  \"vmovl.<US><V_sz_elem> %q0, %f1\"\n+  [(set_attr \"neon_type\" \"neon_shift_1\")]\n+)\n+\n+(define_expand \"vec_unpack<US>_hi_<mode>\"\n+  [(match_operand:<V_unpack> 0 \"register_operand\" \"\")\n+   (SE:<V_unpack> (match_operand:VU 1 \"register_operand\"))]\n+ \"TARGET_NEON\"\n+  {\n+   rtvec v = rtvec_alloc (<V_mode_nunits>/2)  ;\n+   rtx t1;\n+   int i;\n+   for (i = 0; i < (<V_mode_nunits>/2); i++)\n+     RTVEC_ELT (v, i) = GEN_INT ((<V_mode_nunits>/2) + i);\n+  \n+   t1 = gen_rtx_PARALLEL (<MODE>mode, v);\n+   emit_insn (gen_neon_vec_unpack<US>_hi_<mode> (operands[0], \n+                                                 operands[1], \n+\t\t\t\t\t         t1));\n+   DONE;\n+  }\n+)\n+\n+(define_expand \"vec_unpack<US>_lo_<mode>\"\n+  [(match_operand:<V_unpack> 0 \"register_operand\" \"\")\n+   (SE:<V_unpack> (match_operand:VU 1 \"register_operand\" \"\"))]\n+ \"TARGET_NEON\"\n+  {\n+   rtvec v = rtvec_alloc (<V_mode_nunits>/2)  ;\n+   rtx t1;\n+   int i;\n+   for (i = 0; i < (<V_mode_nunits>/2) ; i++)\n+     RTVEC_ELT (v, i) = GEN_INT (i);\n+   t1 = gen_rtx_PARALLEL (<MODE>mode, v);\n+   emit_insn (gen_neon_vec_unpack<US>_lo_<mode> (operands[0], \n+                                                 operands[1], \n+\t\t\t\t   \t         t1));\n+   DONE;\n+  }\n+)\n+\n+(define_insn \"neon_vec_<US>mult_lo_<mode>\"\n+ [(set (match_operand:<V_unpack> 0 \"register_operand\" \"=w\")\n+       (mult:<V_unpack> (SE:<V_unpack> (vec_select:<V_HALF>\n+\t\t\t   (match_operand:VU 1 \"register_operand\" \"w\") \n+                           (match_operand:VU 2 \"vect_par_constant_low\" \"\")))\n+ \t\t        (SE:<V_unpack> (vec_select:<V_HALF>\n+                           (match_operand:VU 3 \"register_operand\" \"w\") \n+                           (match_dup 2)))))]\n+  \"TARGET_NEON\"\n+  \"vmull.<US><V_sz_elem> %q0, %e1, %e3\"\n+  [(set_attr \"neon_type\" \"neon_shift_1\")]\n+)\n+\n+(define_expand \"vec_widen_<US>mult_lo_<mode>\"\n+  [(match_operand:<V_unpack> 0 \"register_operand\" \"\")\n+   (SE:<V_unpack> (match_operand:VU 1 \"register_operand\" \"\"))\n+   (SE:<V_unpack> (match_operand:VU 2 \"register_operand\" \"\"))]\n+ \"TARGET_NEON\"\n+ {\n+   rtvec v = rtvec_alloc (<V_mode_nunits>/2)  ;\n+   rtx t1;\n+   int i;\n+   for (i = 0; i < (<V_mode_nunits>/2) ; i++)\n+     RTVEC_ELT (v, i) = GEN_INT (i);\n+   t1 = gen_rtx_PARALLEL (<MODE>mode, v);\n+\n+   emit_insn (gen_neon_vec_<US>mult_lo_<mode> (operands[0],\n+ \t\t\t\t\t       operands[1],\n+\t\t\t\t\t       t1,\n+\t\t\t\t\t       operands[2]));\n+   DONE;\n+ }\n+)\n+\n+(define_insn \"neon_vec_<US>mult_hi_<mode>\"\n+ [(set (match_operand:<V_unpack> 0 \"register_operand\" \"=w\")\n+      (mult:<V_unpack> (SE:<V_unpack> (vec_select:<V_HALF>\n+\t\t\t    (match_operand:VU 1 \"register_operand\" \"w\") \n+\t\t\t    (match_operand:VU 2 \"vect_par_constant_high\" \"\")))\n+\t\t       (SE:<V_unpack> (vec_select:<V_HALF>\n+\t\t\t    (match_operand:VU 3 \"register_operand\" \"w\") \n+\t\t\t    (match_dup 2)))))]\n+  \"TARGET_NEON\"\n+  \"vmull.<US><V_sz_elem> %q0, %f1, %f3\"\n+  [(set_attr \"neon_type\" \"neon_shift_1\")]\n+)\n+\n+(define_expand \"vec_widen_<US>mult_hi_<mode>\"\n+  [(match_operand:<V_unpack> 0 \"register_operand\" \"\")\n+   (SE:<V_unpack> (match_operand:VU 1 \"register_operand\" \"\"))\n+   (SE:<V_unpack> (match_operand:VU 2 \"register_operand\" \"\"))]\n+ \"TARGET_NEON\"\n+ {\n+   rtvec v = rtvec_alloc (<V_mode_nunits>/2)  ;\n+   rtx t1;\n+   int i;\n+   for (i = 0; i < (<V_mode_nunits>/2) ; i++)\n+     RTVEC_ELT (v, i) = GEN_INT (<V_mode_nunits>/2 + i);\n+   t1 = gen_rtx_PARALLEL (<MODE>mode, v);\n+\n+   emit_insn (gen_neon_vec_<US>mult_hi_<mode> (operands[0],\n+ \t\t\t\t\t       operands[1],\n+\t\t\t\t\t       t1,\n+\t\t\t\t\t       operands[2]));\n+   DONE;\n+\n+ }\n+)\n+\n+;; Vectorize for non-neon-quad case\n+(define_insn \"neon_unpack<US>_<mode>\"\n+ [(set (match_operand:<V_widen> 0 \"register_operand\" \"=w\")\n+       (SE:<V_widen> (match_operand:VDI 1 \"register_operand\" \"\")))]\n+ \"TARGET_NEON\"\n+ \"vmovl.<US><V_sz_elem> %q0, %1\"\n+  [(set_attr \"neon_type\" \"neon_shift_1\")]\n+)\n+\n+(define_expand \"vec_unpack<US>_lo_<mode>\"\n+ [(match_operand:<V_double_width> 0 \"register_operand\" \"\")\n+  (SE:<V_double_width>(match_operand:VDI 1 \"register_operand\"))]\n+ \"TARGET_NEON\"\n+{\n+  rtx tmpreg = gen_reg_rtx (<V_widen>mode);\n+  emit_insn (gen_neon_unpack<US>_<mode> (tmpreg, operands[1]));\n+  emit_insn (gen_neon_vget_low<V_widen_l> (operands[0], tmpreg));\n+\n+  DONE;\n+}\n+)\n+\n+(define_expand \"vec_unpack<US>_hi_<mode>\"\n+ [(match_operand:<V_double_width> 0 \"register_operand\" \"\")\n+  (SE:<V_double_width>(match_operand:VDI 1 \"register_operand\"))]\n+ \"TARGET_NEON\"\n+{\n+  rtx tmpreg = gen_reg_rtx (<V_widen>mode);\n+  emit_insn (gen_neon_unpack<US>_<mode> (tmpreg, operands[1]));\n+  emit_insn (gen_neon_vget_high<V_widen_l> (operands[0], tmpreg));\n+\n+  DONE;\n+}\n+)\n+\n+(define_insn \"neon_vec_<US>mult_<mode>\"\n+ [(set (match_operand:<V_widen> 0 \"register_operand\" \"=w\")\n+       (mult:<V_widen> (SE:<V_widen> \n+\t\t \t   (match_operand:VDI 1 \"register_operand\" \"w\"))\n+ \t\t       (SE:<V_widen> \n+\t\t\t   (match_operand:VDI 2 \"register_operand\" \"w\"))))]\n+  \"TARGET_NEON\"\n+  \"vmull.<US><V_sz_elem> %q0, %1, %2\"\n+  [(set_attr \"neon_type\" \"neon_shift_1\")]\n+)\n+\n+(define_expand \"vec_widen_<US>mult_hi_<mode>\"\n+  [(match_operand:<V_double_width> 0 \"register_operand\" \"\")\n+   (SE:<V_double_width> (match_operand:VDI 1 \"register_operand\" \"\"))\n+   (SE:<V_double_width> (match_operand:VDI 2 \"register_operand\" \"\"))]\n+ \"TARGET_NEON\"\n+ {\n+   rtx tmpreg = gen_reg_rtx (<V_widen>mode);\n+   emit_insn (gen_neon_vec_<US>mult_<mode> (tmpreg, operands[1], operands[2]));\n+   emit_insn (gen_neon_vget_high<V_widen_l> (operands[0], tmpreg));\n+ \t\t\t\t\t    \n+   DONE;\n+\n+ }\n+)\n+\n+(define_expand \"vec_widen_<US>mult_lo_<mode>\"\n+  [(match_operand:<V_double_width> 0 \"register_operand\" \"\")\n+   (SE:<V_double_width> (match_operand:VDI 1 \"register_operand\" \"\"))\n+   (SE:<V_double_width> (match_operand:VDI 2 \"register_operand\" \"\"))]\n+ \"TARGET_NEON\"\n+ {\n+   rtx tmpreg = gen_reg_rtx (<V_widen>mode);\n+   emit_insn (gen_neon_vec_<US>mult_<mode> (tmpreg, operands[1], operands[2]));\n+   emit_insn (gen_neon_vget_low<V_widen_l> (operands[0], tmpreg));\n+ \t\t\t\t\t    \n+   DONE;\n+\n+ }\n+)"}, {"sha": "032b2ecaaf3f4e0f001c942b1580567b605e1cc3", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b57af175e889126f65a6ca667c2c4606f93f84/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b57af175e889126f65a6ca667c2c4606f93f84/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=46b57af175e889126f65a6ca667c2c4606f93f84", "patch": "@@ -619,3 +619,61 @@\n \t\t(and (match_test \"TARGET_32BIT\")\n \t\t     (match_operand 0 \"arm_di_operand\"))))\n \n+;; Predicates for parallel expanders based on mode.\n+(define_special_predicate \"vect_par_constant_high\" \n+  (match_code \"parallel\")\n+{\n+  HOST_WIDE_INT count = XVECLEN (op, 0);\n+  int i;\n+  int base = GET_MODE_NUNITS (mode);\n+\n+  if ((count < 1)\n+      || (count != base/2))\n+    return false;\n+    \n+  if (!VECTOR_MODE_P (mode))\n+    return false;\n+\n+  for (i = 0; i < count; i++)\n+   {\n+     rtx elt = XVECEXP (op, 0, i);\n+     int val;\n+\n+     if (GET_CODE (elt) != CONST_INT)\n+       return false;\n+\n+     val = INTVAL (elt);\n+     if (val != (base/2) + i)\n+       return false;\n+   }\n+  return true; \n+})\n+\n+(define_special_predicate \"vect_par_constant_low\"\n+  (match_code \"parallel\")\n+{\n+  HOST_WIDE_INT count = XVECLEN (op, 0);\n+  int i;\n+  int base = GET_MODE_NUNITS (mode);\n+\n+  if ((count < 1)\n+      || (count != base/2))\n+    return false;\n+    \n+  if (!VECTOR_MODE_P (mode))\n+    return false;\n+\n+  for (i = 0; i < count; i++)\n+   {\n+     rtx elt = XVECEXP (op, 0, i);\n+     int val;\n+\n+     if (GET_CODE (elt) != CONST_INT)\n+       return false;\n+\n+     val = INTVAL (elt);\n+     if (val != i)\n+       return false;\n+   } \n+  return true; \n+})"}, {"sha": "7a92568cb70e68f60f9dfa7f2c835c6acdf99abd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b57af175e889126f65a6ca667c2c4606f93f84/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b57af175e889126f65a6ca667c2c4606f93f84/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46b57af175e889126f65a6ca667c2c4606f93f84", "patch": "@@ -1,3 +1,8 @@\n+2010-08-25  Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_vect_unpack):\n+\tSet vect_unpack supported flag to true for neon.\n+\t\n 2010-08-24  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* gcc.dg/tree-ssa/ifc-5.c: New."}, {"sha": "4b95323c96cc6986049145cad901b51fc3e78bdd", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b57af175e889126f65a6ca667c2c4606f93f84/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b57af175e889126f65a6ca667c2c4606f93f84/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=46b57af175e889126f65a6ca667c2c4606f93f84", "patch": "@@ -2640,7 +2640,8 @@ proc check_effective_target_vect_unpack { } {\n         if { ([istarget powerpc*-*-*] && ![istarget powerpc-*paired*])\n              || [istarget i?86-*-*]\n              || [istarget x86_64-*-*] \n-             || [istarget spu-*-*] } {\n+             || [istarget spu-*-*]\n+             || ([istarget arm*-*-*] && [check_effective_target_arm_neon]) } {\n             set et_vect_unpack_saved 1\n         }\n     }"}]}