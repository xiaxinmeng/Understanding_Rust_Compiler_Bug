{"sha": "5505a9eab9bc3b170fc9f22e8a7292464efe88f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUwNWE5ZWFiOWJjM2IxNzBmYzlmMjJlOGE3MjkyNDY0ZWZlODhmNg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-07T08:12:36Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-11T14:55:02Z"}, "message": "testsuite, Objective-C : Fix two plugin diagnostics tests for Darwin.\n\nThe @selector and @protocol keywords produce a var decl without\nuseful location information. The current diagnostics plugin does not\nlook at VAR_DECLs (and it would not be helpful if it did in this\ncase, since a single decl is shared across all the users).\n\nHowever, ee can, in this case, make expressions that produce useful\ninformation.\n\ngcc/testsuite/ChangeLog:\n\n\t* objc.dg/plugin/diagnostic-test-expressions-1.m: Use assignment\n\texpressions for @selector and @protocol to obtain a useful\n\tdiagnostic range.", "tree": {"sha": "7a107103ad8cf23fe3eff7246432d5a98503db5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a107103ad8cf23fe3eff7246432d5a98503db5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5505a9eab9bc3b170fc9f22e8a7292464efe88f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5505a9eab9bc3b170fc9f22e8a7292464efe88f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5505a9eab9bc3b170fc9f22e8a7292464efe88f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5505a9eab9bc3b170fc9f22e8a7292464efe88f6/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b292746ff7cfe708d3311ea41242c44ccbbe2693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b292746ff7cfe708d3311ea41242c44ccbbe2693", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b292746ff7cfe708d3311ea41242c44ccbbe2693"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "23a93021e839a7a2f119c193ea79d0ff8f874daa", "filename": "gcc/testsuite/objc.dg/plugin/diagnostic-test-expressions-1.m", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5505a9eab9bc3b170fc9f22e8a7292464efe88f6/gcc%2Ftestsuite%2Fobjc.dg%2Fplugin%2Fdiagnostic-test-expressions-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5505a9eab9bc3b170fc9f22e8a7292464efe88f6/gcc%2Ftestsuite%2Fobjc.dg%2Fplugin%2Fdiagnostic-test-expressions-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fplugin%2Fdiagnostic-test-expressions-1.m?ref=5505a9eab9bc3b170fc9f22e8a7292464efe88f6", "patch": "@@ -5,6 +5,8 @@\n    (see the notes in that file); this file adds test\n    coverage for various Objective C constructs. */\n \n+#include <objc/runtime.h> /* for SEL, Protocol */\n+\n extern void __emit_expression_range (int dummy, ...);\n \n @protocol prot\n@@ -55,22 +57,33 @@ + (void) test_class_dot_name\n                                 ~~~~~~~~~~~\n    { dg-end-multiline-output \"\" } */\n }\n+\n - (void) test_at_selector\n {\n-  __emit_expression_range ( 0, @selector(func0) ); /* { dg-warning \"range\" } */\n+  /* For the NeXT runtime, @selector() generates a a var decl which (a) isn't\n+     handled by the plugin, and (b) if it was would not necessarily have the\n+     right location (there is only one var decl uniqued to each selector \n+     spelling, so the location would be that of the first occurrence).  Use an\n+     assignment expression to test the operation.   */\n+  SEL aSel;\n+  __emit_expression_range ( 0, aSel = @selector(foo) ); /* { dg-warning \"range\" } */\n /* { dg-begin-multiline-output \"\" }\n-   __emit_expression_range ( 0, @selector(func0) );\n-                                ^~~~~~~~~~~~~~~~\n+   __emit_expression_range ( 0, aSel = @selector(foo) );\n+                                ~~~~~^~~~~~~~~~~~~~~~\n    { dg-end-multiline-output \"\" } */\n }\n - (void) test_at_protocol\n {\n-  __emit_expression_range ( 0, @protocol(prot) ); /* { dg-warning \"range\" } */\n+  /* As for @selector(), the NeXT runtime generates a a var decl for\n+     @protocol() handle this in a similar way.  */\n+  Protocol *aProt;\n+  __emit_expression_range ( 0, aProt = @protocol(prot) ); /* { dg-warning \"range\" \"\" } */\n /* { dg-begin-multiline-output \"\" }\n-   __emit_expression_range ( 0, @protocol(prot) );\n-                                ~~~~~~~~~~~~~~~\n+   __emit_expression_range ( 0, aProt = @protocol(prot) );\n+                                ~~~~~~^~~~~~~~~~~~~~~~~\n    { dg-end-multiline-output \"\" } */\n }\n+\n - (void) test_at_encode:(int)i\n {\n   /* @encode() generates a STRING_CST which doesn't retain a location"}]}