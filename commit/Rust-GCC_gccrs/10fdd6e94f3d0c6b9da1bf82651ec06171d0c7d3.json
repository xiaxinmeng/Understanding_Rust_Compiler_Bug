{"sha": "10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBmZGQ2ZTk0ZjNkMGM2YjlkYTFiZjgyNjUxZWMwNjE3MWQwYzdkMw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-11-19T19:23:06Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-11-19T19:23:06Z"}, "message": "PR jit/63854: Fix memory leaks within context/pass_manager/dump_manager\n\ngcc/ChangeLog:\n\tPR jit/63854\n\t* config/alpha/alpha.c (alpha_option_override): Remove static from\n\t\"handle_trap_shadows_info\" and \"align_insns_info\".\n\t* config/i386/i386.c (ix86_option_override): Likewise for\n\t\"insert_vzeroupper_info\".\n\t* config/rl78/rl78.c (rl78_asm_file_start): Likewise for\n\t\"rl78_devirt_info\" and \"rl78_move_elim_info\".\n\t* config/rs6000/rs6000.c (rs6000_option_override): Likewise for\n\t\"analyze_swaps_info\".\n\t* context.c (gcc::context::~context): New.\n\t* context.h (gcc::context::~context): New.\n\t* dumpfile.c (dump_files): Add \"false\" initializers for new field\n\t\"owns_strings\".\n\t(gcc::dump_manager::~dump_manager): New.\n\t(gcc::dump_manager::dump_register): Add param \"take_ownership\".\n\t* dumpfile.h (struct dump_file_info): Add field \"owns_strings\".\n\t(gcc::dump_manager::~dump_manager): New.\n\t(gcc::dump_manager::dump_register): Add param \"take_ownership\".\n\t* pass_manager.h (gcc::pass_manager::operator delete): New.\n\t(gcc::pass_manager::~pass_manager): New.\n\t* passes.c (pass_manager::register_one_dump_file): Pass \"true\" to\n\tnew \"owns_strings\" argument to dump_register.\n\t(pass_manager::operator delete): New.\n\t(delete_pass_tree): New function.\n\t(pass_manager::~pass_manager): New.\n\t* statistics.c (statistics_early_init): Pass \"false\" to\n\tnew \"owns_strings\" argument to dump_register.\n\t* toplev.c (toplev::finalize): Clean up the context and thus the\n\tthings it owns.\n\nFrom-SVN: r217793", "tree": {"sha": "b461473cf577eda9fadf4e1190832b520ea2460e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b461473cf577eda9fadf4e1190832b520ea2460e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4fe9e9923db7931411e3bbf86892245f3bfb4e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4fe9e9923db7931411e3bbf86892245f3bfb4e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4fe9e9923db7931411e3bbf86892245f3bfb4e2"}], "stats": {"total": 157, "additions": 136, "deletions": 21}, "files": [{"sha": "8328c07446ab2e83e7f58ea110a0762ead9e113e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3", "patch": "@@ -1,3 +1,35 @@\n+2014-11-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/63854\n+\t* config/alpha/alpha.c (alpha_option_override): Remove static from\n+\t\"handle_trap_shadows_info\" and \"align_insns_info\".\n+\t* config/i386/i386.c (ix86_option_override): Likewise for\n+\t\"insert_vzeroupper_info\".\n+\t* config/rl78/rl78.c (rl78_asm_file_start): Likewise for\n+\t\"rl78_devirt_info\" and \"rl78_move_elim_info\".\n+\t* config/rs6000/rs6000.c (rs6000_option_override): Likewise for\n+\t\"analyze_swaps_info\".\n+\t* context.c (gcc::context::~context): New.\n+\t* context.h (gcc::context::~context): New.\n+\t* dumpfile.c (dump_files): Add \"false\" initializers for new field\n+\t\"owns_strings\".\n+\t(gcc::dump_manager::~dump_manager): New.\n+\t(gcc::dump_manager::dump_register): Add param \"take_ownership\".\n+\t* dumpfile.h (struct dump_file_info): Add field \"owns_strings\".\n+\t(gcc::dump_manager::~dump_manager): New.\n+\t(gcc::dump_manager::dump_register): Add param \"take_ownership\".\n+\t* pass_manager.h (gcc::pass_manager::operator delete): New.\n+\t(gcc::pass_manager::~pass_manager): New.\n+\t* passes.c (pass_manager::register_one_dump_file): Pass \"true\" to\n+\tnew \"owns_strings\" argument to dump_register.\n+\t(pass_manager::operator delete): New.\n+\t(delete_pass_tree): New function.\n+\t(pass_manager::~pass_manager): New.\n+\t* statistics.c (statistics_early_init): Pass \"false\" to\n+\tnew \"owns_strings\" argument to dump_register.\n+\t* toplev.c (toplev::finalize): Clean up the context and thus the\n+\tthings it owns.\n+\n 2014-11-19  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/63854"}, {"sha": "1c892882f858e427d3a764c3aa93d89972c60f77", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3", "patch": "@@ -399,13 +399,13 @@ alpha_option_override (void)\n   };\n \n   opt_pass *pass_handle_trap_shadows = make_pass_handle_trap_shadows (g);\n-  static struct register_pass_info handle_trap_shadows_info\n+  struct register_pass_info handle_trap_shadows_info\n     = { pass_handle_trap_shadows, \"eh_ranges\",\n \t1, PASS_POS_INSERT_AFTER\n       };\n \n   opt_pass *pass_align_insns = make_pass_align_insns (g);\n-  static struct register_pass_info align_insns_info\n+  struct register_pass_info align_insns_info\n     = { pass_align_insns, \"shorten\",\n \t1, PASS_POS_INSERT_BEFORE\n       };"}, {"sha": "7f4e2cc0697ce305f56fe5717135f8a076db14d6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3", "patch": "@@ -4323,7 +4323,7 @@ static void\n ix86_option_override (void)\n {\n   opt_pass *pass_insert_vzeroupper = make_pass_insert_vzeroupper (g);\n-  static struct register_pass_info insert_vzeroupper_info\n+  struct register_pass_info insert_vzeroupper_info\n     = { pass_insert_vzeroupper, \"reload\",\n \t1, PASS_POS_INSERT_AFTER\n       };"}, {"sha": "86d2992c38e5c88c13ee573db77d82b106b73f23", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3", "patch": "@@ -284,7 +284,7 @@ rl78_asm_file_start (void)\n     }\n \n   opt_pass *rl78_devirt_pass = make_pass_rl78_devirt (g);\n-  static struct register_pass_info rl78_devirt_info =\n+  struct register_pass_info rl78_devirt_info =\n     {\n       rl78_devirt_pass,\n       \"pro_and_epilogue\",\n@@ -293,7 +293,7 @@ rl78_asm_file_start (void)\n     };\n \n   opt_pass *rl78_move_elim_pass = make_pass_rl78_move_elim (g);\n-  static struct register_pass_info rl78_move_elim_info =\n+  struct register_pass_info rl78_move_elim_info =\n     {\n       rl78_move_elim_pass,\n       \"bbro\","}, {"sha": "506daa1d31e7a03701f76a27faaaa857739c06ea", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3", "patch": "@@ -4202,7 +4202,7 @@ rs6000_option_override (void)\n      It's convenient to do it here (like i386 does).  */\n   opt_pass *pass_analyze_swaps = make_pass_analyze_swaps (g);\n \n-  static struct register_pass_info analyze_swaps_info\n+  struct register_pass_info analyze_swaps_info\n     = { pass_analyze_swaps, \"cse1\", 1, PASS_POS_INSERT_BEFORE };\n \n   register_pass (&analyze_swaps_info);"}, {"sha": "d132946eebf3b66112b5c818f6f16af0b0e8cb51", "filename": "gcc/context.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fcontext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fcontext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcontext.c?ref=10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3", "patch": "@@ -38,3 +38,9 @@ gcc::context::context ()\n   m_dumps = new gcc::dump_manager ();\n   m_passes = new gcc::pass_manager (this);\n }\n+\n+gcc::context::~context ()\n+{\n+  delete m_passes;\n+  delete m_dumps;\n+}"}, {"sha": "2bf28a75dadc74195546029ebaae94b5bfdc4da6", "filename": "gcc/context.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fcontext.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fcontext.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcontext.h?ref=10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3", "patch": "@@ -32,6 +32,7 @@ class context\n {\n public:\n   context ();\n+  ~context ();\n \n   /* The flag shows if there are symbols to be streamed for offloading.  */\n   bool have_offload;"}, {"sha": "c2cd89b59aaf6fdaddad5db7fba036add1af0e02", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3", "patch": "@@ -49,29 +49,29 @@ int dump_flags;\n    TREE_DUMP_INDEX enumeration in dumpfile.h.  */\n static struct dump_file_info dump_files[TDI_end] =\n {\n-  {NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0, 0},\n+  {NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0, 0, false},\n   {\".cgraph\", \"ipa-cgraph\", NULL, NULL, NULL, NULL, NULL, TDF_IPA,\n-   0, 0, 0, 0, 0},\n+   0, 0, 0, 0, 0, false},\n   {\".type-inheritance\", \"ipa-type-inheritance\", NULL, NULL, NULL, NULL, NULL, TDF_IPA,\n-   0, 0, 0, 0, 0},\n+   0, 0, 0, 0, 0, false},\n   {\".tu\", \"translation-unit\", NULL, NULL, NULL, NULL, NULL, TDF_TREE,\n-   0, 0, 0, 0, 1},\n+   0, 0, 0, 0, 1, false},\n   {\".class\", \"class-hierarchy\", NULL, NULL, NULL, NULL, NULL, TDF_TREE,\n-   0, 0, 0, 0, 2},\n+   0, 0, 0, 0, 2, false},\n   {\".original\", \"tree-original\", NULL, NULL, NULL, NULL, NULL, TDF_TREE,\n-   0, 0, 0, 0, 3},\n+   0, 0, 0, 0, 3, false},\n   {\".gimple\", \"tree-gimple\", NULL, NULL, NULL, NULL, NULL, TDF_TREE,\n-   0, 0, 0, 0, 4},\n+   0, 0, 0, 0, 4, false},\n   {\".nested\", \"tree-nested\", NULL, NULL, NULL, NULL, NULL, TDF_TREE,\n-   0, 0, 0, 0, 5},\n+   0, 0, 0, 0, 5, false},\n #define FIRST_AUTO_NUMBERED_DUMP 6\n \n   {NULL, \"tree-all\", NULL, NULL, NULL, NULL, NULL, TDF_TREE,\n-   0, 0, 0, 0, 0},\n+   0, 0, 0, 0, 0, false},\n   {NULL, \"rtl-all\", NULL, NULL, NULL, NULL, NULL, TDF_RTL,\n-   0, 0, 0, 0, 0},\n+   0, 0, 0, 0, 0, false},\n   {NULL, \"ipa-all\", NULL, NULL, NULL, NULL, NULL, TDF_IPA,\n-   0, 0, 0, 0, 0},\n+   0, 0, 0, 0, 0, false},\n };\n \n /* Define a name->number mapping for a dump flag value.  */\n@@ -148,10 +148,32 @@ gcc::dump_manager::dump_manager ():\n {\n }\n \n+gcc::dump_manager::~dump_manager ()\n+{\n+  for (size_t i = 0; i < m_extra_dump_files_in_use; i++)\n+    {\n+      dump_file_info *dfi = &m_extra_dump_files[i];\n+      /* suffix, swtch, glob are statically allocated for the entries\n+\t in dump_files, and for statistics, but are dynamically allocated\n+\t for those for passes.  */\n+      if (dfi->owns_strings)\n+\t{\n+\t  XDELETEVEC (const_cast <char *> (dfi->suffix));\n+\t  XDELETEVEC (const_cast <char *> (dfi->swtch));\n+\t  XDELETEVEC (const_cast <char *> (dfi->glob));\n+\t}\n+      /* These, if non-NULL, are always dynamically allocated.  */\n+      XDELETEVEC (const_cast <char *> (dfi->pfilename));\n+      XDELETEVEC (const_cast <char *> (dfi->alt_filename));\n+    }\n+  XDELETEVEC (m_extra_dump_files);\n+}\n+\n unsigned int\n gcc::dump_manager::\n dump_register (const char *suffix, const char *swtch, const char *glob,\n-\t       int flags, int optgroup_flags)\n+\t       int flags, int optgroup_flags,\n+\t       bool take_ownership)\n {\n   int num = m_next_dump++;\n \n@@ -175,6 +197,7 @@ dump_register (const char *suffix, const char *swtch, const char *glob,\n   m_extra_dump_files[count].pflags = flags;\n   m_extra_dump_files[count].optgroup_flags = optgroup_flags;\n   m_extra_dump_files[count].num = num;\n+  m_extra_dump_files[count].owns_strings = take_ownership;\n \n   return count + TDI_end;\n }"}, {"sha": "d650174c431184cfd70b2ce58fc0af74fced03f6", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3", "patch": "@@ -118,6 +118,9 @@ struct dump_file_info\n   int pstate;                   /* state of pass-specific stream */\n   int alt_state;                /* state of the -fopt-info stream */\n   int num;                      /* dump file number */\n+  bool owns_strings;            /* fields \"suffix\", \"swtch\", \"glob\" can be\n+\t\t\t\t   const strings, or can be dynamically\n+\t\t\t\t   allocated, needing free.  */\n };\n \n /* In dumpfile.c */\n@@ -164,10 +167,16 @@ class dump_manager\n public:\n \n   dump_manager ();\n+  ~dump_manager ();\n \n+  /* Register a dumpfile.\n+\n+     TAKE_OWNERSHIP determines whether callee takes ownership of strings\n+     SUFFIX, SWTCH, and GLOB. */\n   unsigned int\n   dump_register (const char *suffix, const char *swtch, const char *glob,\n-\t\t int flags, int optgroup_flags);\n+\t\t int flags, int optgroup_flags,\n+\t\t bool take_ownership);\n \n   /* Return the dump_file_info for the given phase.  */\n   struct dump_file_info *"}, {"sha": "82857a9b4e35a8be902667fb5703503e2f29a01b", "filename": "gcc/pass_manager.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fpass_manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fpass_manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpass_manager.h?ref=10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3", "patch": "@@ -47,8 +47,10 @@ class pass_manager\n {\n public:\n   void *operator new (size_t sz);\n+  void operator delete (void *ptr);\n \n   pass_manager (context *ctxt);\n+  ~pass_manager ();\n \n   void register_pass (struct register_pass_info *pass_info);\n   void register_one_dump_file (opt_pass *pass);"}, {"sha": "a3be0bbdcf90020b0e4bc74944db05f095b6c745", "filename": "gcc/passes.c", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3", "patch": "@@ -776,7 +776,8 @@ pass_manager::register_one_dump_file (opt_pass *pass)\n   if (optgroup_flags == OPTGROUP_NONE)\n     optgroup_flags = OPTGROUP_OTHER;\n   id = dumps->dump_register (dot_name, flag_name, glob_name, flags,\n-\t\t\t     optgroup_flags);\n+\t\t\t     optgroup_flags,\n+\t\t\t     true);\n   set_pass_for_id (id, pass);\n   full_name = concat (prefix, pass->name, num, NULL);\n   register_pass_name (pass, full_name);\n@@ -1527,6 +1528,12 @@ pass_manager::operator new (size_t sz)\n   return xcalloc (1, sz);\n }\n \n+void\n+pass_manager::operator delete (void *ptr)\n+{\n+  free (ptr);\n+}\n+\n pass_manager::pass_manager (context *ctxt)\n : all_passes (NULL), all_small_ipa_passes (NULL), all_lowering_passes (NULL),\n   all_regular_ipa_passes (NULL),\n@@ -1584,6 +1591,36 @@ pass_manager::pass_manager (context *ctxt)\n   register_dump_files (all_passes);\n }\n \n+static void\n+delete_pass_tree (opt_pass *pass)\n+{\n+  while (pass)\n+    {\n+      /* Recurse into child passes.  */\n+      delete_pass_tree (pass->sub);\n+\n+      opt_pass *next = pass->next;\n+\n+      /* Delete this pass.  */\n+      delete pass;\n+\n+      /* Iterate onto sibling passes.  */\n+      pass = next;\n+    }\n+}\n+\n+pass_manager::~pass_manager ()\n+{\n+  XDELETEVEC (passes_by_id);\n+\n+  /* Call delete_pass_tree on each of the pass_lists.  */\n+#define DEF_PASS_LIST(LIST) \\\n+    delete_pass_tree (*pass_lists[PASS_LIST_NO_##LIST]);\n+  GCC_PASS_LISTS\n+#undef DEF_PASS_LIST\n+\n+}\n+\n /* If we are in IPA mode (i.e., current_function_decl is NULL), call\n    function CALLBACK for every function in the call graph.  Otherwise,\n    call CALLBACK on the current function.  */"}, {"sha": "0ceb2e9649a684bd48bd2ebc3c170c7a59e3ae6c", "filename": "gcc/statistics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fstatistics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Fstatistics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstatistics.c?ref=10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3", "patch": "@@ -270,7 +270,8 @@ statistics_early_init (void)\n   gcc::dump_manager *dumps = g->get_dumps ();\n   statistics_dump_nr = dumps->dump_register (\".statistics\", \"statistics\",\n \t\t\t\t\t     \"statistics\", TDF_TREE,\n-\t\t\t\t\t     OPTGROUP_NONE);\n+\t\t\t\t\t     OPTGROUP_NONE,\n+\t\t\t\t\t     false);\n }\n \n /* Init the statistics.  */"}, {"sha": "b1f224d406218066c0abf00990bc667d77971068", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=10fdd6e94f3d0c6b9da1bf82651ec06171d0c7d3", "patch": "@@ -2173,4 +2173,8 @@ toplev::finalize (void)\n \n   finalize_options_struct (&global_options);\n   finalize_options_struct (&global_options_set);\n+\n+  /* Clean up the context (and pass_manager etc). */\n+  delete g;\n+  g = NULL;\n }"}]}