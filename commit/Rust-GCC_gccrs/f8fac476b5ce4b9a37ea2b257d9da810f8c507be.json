{"sha": "f8fac476b5ce4b9a37ea2b257d9da810f8c507be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhmYWM0NzZiNWNlNGI5YTM3ZWEyYjI1N2Q5ZGE4MTBmOGM1MDdiZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-10T13:29:39Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-10T13:34:42Z"}, "message": "c++: generic lambdas and local-externs from outer scopes [PR 99030]\n\nLambdas can refer to local externs from their enclosing scope.  When\nthe lambda's generic but the containing function is not a temploid,\nwe'll never have tsubsted the declaring decl so won't have a local\nspecialization.  But in that case we can just use the decl we\ntsubsting directly -- it's not dependent.\n\n\tPR c++/99030\n\tgcc/cp\n\t* pt.c (tsubst_copy) [VAR_DECL]: For a DECL_LOCAL_DECL_P T is the\n\tanswer if there's no local specialization.\n\tgcc/testsuite/\n\t* g++.dg/lookup/pr99030.C: New.", "tree": {"sha": "c61987740ec5c1df419f50268d687c2c500b0abc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c61987740ec5c1df419f50268d687c2c500b0abc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8fac476b5ce4b9a37ea2b257d9da810f8c507be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8fac476b5ce4b9a37ea2b257d9da810f8c507be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8fac476b5ce4b9a37ea2b257d9da810f8c507be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8fac476b5ce4b9a37ea2b257d9da810f8c507be/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57d1b68d6582efec5a7ca63ea56a1cedbfe6e874", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d1b68d6582efec5a7ca63ea56a1cedbfe6e874", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57d1b68d6582efec5a7ca63ea56a1cedbfe6e874"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "d8574f649b28f83bb9c5a7740dcc24199a3f6c15", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8fac476b5ce4b9a37ea2b257d9da810f8c507be/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8fac476b5ce4b9a37ea2b257d9da810f8c507be/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f8fac476b5ce4b9a37ea2b257d9da810f8c507be", "patch": "@@ -16650,11 +16650,16 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \tr = tsubst (t, args, complain, in_decl);\n       else if (DECL_LOCAL_DECL_P (t))\n \t{\n-\t  /* Local specialization will have been created when we\n-\t     instantiated the DECL_EXPR_DECL. */\n+\t  /* Local specialization will usually have been created when\n+\t     we instantiated the DECL_EXPR_DECL. */\n \t  r = retrieve_local_specialization (t);\n \t  if (!r)\n-\t    r = error_mark_node;\n+\t    {\n+\t      /* We're in a generic lambda referencing a local extern\n+\t\t from an outer block-scope of a non-template.  */\n+\t      gcc_checking_assert (LAMBDA_FUNCTION_P (current_function_decl));\n+\t      r = t;\n+\t    }\n \t}\n       else if (local_variable_p (t)\n \t       && uses_template_parms (DECL_CONTEXT (t)))"}, {"sha": "080847ca11ce33f362b9669e1831d95112d91294", "filename": "gcc/testsuite/g++.dg/lookup/pr99030.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8fac476b5ce4b9a37ea2b257d9da810f8c507be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr99030.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8fac476b5ce4b9a37ea2b257d9da810f8c507be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr99030.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr99030.C?ref=f8fac476b5ce4b9a37ea2b257d9da810f8c507be", "patch": "@@ -0,0 +1,16 @@\n+// PR 99030 ICE with generic lambda accessing local extern\n+// { dg-do compile { target c++14 } }\n+\n+void foo ()\n+{\n+  extern int a;\n+  [] (auto b) { a; } (1);\n+}\n+\n+template<typename T> void bar ()\n+{\n+  extern T a;\n+  [] (auto b) { a; } (1);\n+}\n+\n+template void bar<int> ();"}]}