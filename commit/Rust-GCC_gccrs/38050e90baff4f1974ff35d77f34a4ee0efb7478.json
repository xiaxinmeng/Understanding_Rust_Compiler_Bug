{"sha": "38050e90baff4f1974ff35d77f34a4ee0efb7478", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgwNTBlOTBiYWZmNGYxOTc0ZmYzNWQ3N2YzNGE0ZWUwZWZiNzQ3OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-05-17T12:35:44Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-05-17T12:35:44Z"}, "message": "re PR c++/18126 (sizeof compound-literal not parsed correctly)\n\n/cp\n2013-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/18126\n\t* parser.c (cp_parser_sizeof_operand): As a GNU Extension, parse\n\tcorrectly sizeof compound-literal; update comments.\n\n/testsuite\n2013-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/18126\n\t* g++.dg/ext/sizeof-complit.C: New.\n\nFrom-SVN: r199012", "tree": {"sha": "a4684e1a59c643c1372ca2efb593e4910cae5cc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4684e1a59c643c1372ca2efb593e4910cae5cc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38050e90baff4f1974ff35d77f34a4ee0efb7478", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38050e90baff4f1974ff35d77f34a4ee0efb7478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38050e90baff4f1974ff35d77f34a4ee0efb7478", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38050e90baff4f1974ff35d77f34a4ee0efb7478/comments", "author": null, "committer": null, "parents": [{"sha": "17042d2b387c22ee6cd5b3ab5fa8772511493c44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17042d2b387c22ee6cd5b3ab5fa8772511493c44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17042d2b387c22ee6cd5b3ab5fa8772511493c44"}], "stats": {"total": 61, "additions": 52, "deletions": 9}, "files": [{"sha": "14093eb935f7efb97bcdb4af29555cfafb1ffa1e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38050e90baff4f1974ff35d77f34a4ee0efb7478/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38050e90baff4f1974ff35d77f34a4ee0efb7478/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=38050e90baff4f1974ff35d77f34a4ee0efb7478", "patch": "@@ -1,3 +1,9 @@\n+2013-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/18126\n+\t* parser.c (cp_parser_sizeof_operand): As a GNU Extension, parse\n+\tcorrectly sizeof compound-literal; update comments.\n+\n 2013-05-16  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* call.c (build_conditional_expr_1): Use cp_build_binary_op"}, {"sha": "022886e37b6f2b2100068949cb4bbc32881b29e6", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38050e90baff4f1974ff35d77f34a4ee0efb7478/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38050e90baff4f1974ff35d77f34a4ee0efb7478/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=38050e90baff4f1974ff35d77f34a4ee0efb7478", "patch": "@@ -6591,6 +6591,9 @@ cp_parser_pseudo_destructor_name (cp_parser* parser,\n      __real__ cast-expression\n      __imag__ cast-expression\n      && identifier\n+     sizeof ( type-id ) { initializer-list , [opt] }\n+     alignof ( type-id ) { initializer-list , [opt] } [C++0x]\n+     __alignof__ ( type-id ) { initializer-list , [opt] }\n \n    ADDRESS_P is true iff the unary-expression is appearing as the\n    operand of the `&' operator.   CAST_P is true if this expression is\n@@ -13968,6 +13971,7 @@ cp_parser_type_specifier (cp_parser* parser,\n      __int128\n      __typeof__ unary-expression\n      __typeof__ ( type-id )\n+     __typeof__ ( type-id ) { initializer-list , [opt] }\n \n    Returns the indicated TYPE_DECL.  If DECL_SPECS is not NULL, it is\n    appropriately updated.  */\n@@ -22988,21 +22992,44 @@ cp_parser_sizeof_operand (cp_parser* parser, enum rid keyword)\n      construction.  */\n   if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))\n     {\n-      tree type;\n-      bool saved_in_type_id_in_expr_p;\n+      tree type = NULL_TREE;\n+      bool compound_literal_p;\n \n       /* We can't be sure yet whether we're looking at a type-id or an\n \t expression.  */\n       cp_parser_parse_tentatively (parser);\n       /* Consume the `('.  */\n       cp_lexer_consume_token (parser->lexer);\n-      /* Parse the type-id.  */\n-      saved_in_type_id_in_expr_p = parser->in_type_id_in_expr_p;\n-      parser->in_type_id_in_expr_p = true;\n-      type = cp_parser_type_id (parser);\n-      parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;\n-      /* Now, look for the trailing `)'.  */\n-      cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n+      /* Note: as a GNU Extension, compound literals are considered\n+\t postfix-expressions as they are in C99, so they are valid\n+\t arguments to sizeof.  See comment in cp_parser_cast_expression\n+\t for details.  */\n+      cp_lexer_save_tokens (parser->lexer);\n+      /* Skip tokens until the next token is a closing parenthesis.\n+\t If we find the closing `)', and the next token is a `{', then\n+\t we are looking at a compound-literal.  */\n+      compound_literal_p\n+\t= (cp_parser_skip_to_closing_parenthesis (parser, false, false,\n+\t\t\t\t\t\t  /*consume_paren=*/true)\n+\t   && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE));\n+      /* Roll back the tokens we skipped.  */\n+      cp_lexer_rollback_tokens (parser->lexer);\n+      /* If we were looking at a compound-literal, simulate an error\n+\t so that the call to cp_parser_parse_definitely below will\n+\t fail.  */\n+      if (compound_literal_p)\n+\tcp_parser_simulate_error (parser);\n+      else\n+\t{\n+\t  bool saved_in_type_id_in_expr_p = parser->in_type_id_in_expr_p;\n+\t  parser->in_type_id_in_expr_p = true;\n+\t  /* Look for the type-id.  */\n+\t  type = cp_parser_type_id (parser);\n+\t  /* Look for the closing `)'.  */\n+\t  cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n+\t  parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;\n+\t}\n+\n       /* If all went well, then we're done.  */\n       if (cp_parser_parse_definitely (parser))\n \t{"}, {"sha": "b2ec2636c7a5c0e3fb042f88175adbf815820564", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38050e90baff4f1974ff35d77f34a4ee0efb7478/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38050e90baff4f1974ff35d77f34a4ee0efb7478/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=38050e90baff4f1974ff35d77f34a4ee0efb7478", "patch": "@@ -1,3 +1,8 @@\n+2013-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/18126\n+\t* g++.dg/ext/sizeof-complit.C: New.\n+\n 2013-05-17  Marek Polacek  <polacek@redhat.com>\n \n \t* gcc.dg/strlenopt-25.c: New test."}, {"sha": "6cf6d4e1fadb19e118a036e480a3fbbc1b822f41", "filename": "gcc/testsuite/g++.dg/ext/sizeof-complit.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38050e90baff4f1974ff35d77f34a4ee0efb7478/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fsizeof-complit.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38050e90baff4f1974ff35d77f34a4ee0efb7478/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fsizeof-complit.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fsizeof-complit.C?ref=38050e90baff4f1974ff35d77f34a4ee0efb7478", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/18126\n+// { dg-options \"\" }\n+\n+struct s { int a; int b; };\n+char x[((sizeof (struct s){ 1, 2 }) == sizeof (struct s)) ? 1 : -1];"}]}