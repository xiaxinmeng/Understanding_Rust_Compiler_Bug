{"sha": "cd1661d6b1e0bebe318540aefa0d07981f5b236b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QxNjYxZDZiMWUwYmViZTMxODU0MGFlZmEwZDA3OTgxZjViMjM2Yg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-06-22T06:30:39Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-06-22T06:30:39Z"}, "message": "Warning fixes:\n\n        * mips-tfile.c (add_local_symbol): Cast width format specifier to int.\n        (add_ext_symbol): Likewise.\n        (add_file): Likewise.\n        (parse_def): Likewise.\n        (write_varray): Use HOST_PTR_PRINTF to print a pointer.  Fix\n        remaining format specifiers and arguments.\n        (write_object): Likewise, several times.\n        (read_seek): Likewise.\n        (out_of_bounds): Likewise.\n        (allocate_cluster): Likewise.\n        (xmalloc): Likewise.\n        (xcalloc): Likewise.\n        (xrealloc): Likewise.\n        (xfree): Likewise.\n        * mips-tdump.c (print_symbol): Likewise.\n\nFrom-SVN: r20654", "tree": {"sha": "2a4943864456d3e6d94ac9b89832572655a0878c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a4943864456d3e6d94ac9b89832572655a0878c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd1661d6b1e0bebe318540aefa0d07981f5b236b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd1661d6b1e0bebe318540aefa0d07981f5b236b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd1661d6b1e0bebe318540aefa0d07981f5b236b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd1661d6b1e0bebe318540aefa0d07981f5b236b/comments", "author": null, "committer": null, "parents": [{"sha": "63d088b75438a51ee0c5b63a801195453ce33cad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d088b75438a51ee0c5b63a801195453ce33cad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d088b75438a51ee0c5b63a801195453ce33cad"}], "stats": {"total": 139, "additions": 103, "deletions": 36}, "files": [{"sha": "239c172a32ceba90340bd575bb42906595f3e472", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1661d6b1e0bebe318540aefa0d07981f5b236b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1661d6b1e0bebe318540aefa0d07981f5b236b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd1661d6b1e0bebe318540aefa0d07981f5b236b", "patch": "@@ -55,6 +55,23 @@ Mon Jun 22 08:18:46 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \t\n \t* regmove.c (copy_src_to_dest): Likewise for `i'.\n \n+\t* mips-tfile.c (add_local_symbol): Cast width format specifier to int.\n+\t(add_ext_symbol): Likewise.\n+\t(add_file): Likewise.\n+\t(parse_def): Likewise.\n+\t(write_varray): Use HOST_PTR_PRINTF to print a pointer.  Fix\n+\tremaining format specifiers and arguments.\n+\t(write_object): Likewise, several times.\n+\t(read_seek): Likewise.\n+\t(out_of_bounds): Likewise.\n+\t(allocate_cluster): Likewise.\n+\t(xmalloc): Likewise.\n+\t(xcalloc): Likewise.\n+\t(xrealloc): Likewise.\n+\t(xfree): Likewise.\n+\n+\t* mips-tdump.c (print_symbol): Likewise.\n+\t\n Sun Jun 21 17:05:34 1998  Dave Love  <d.love@dl.ac.uk>\n \n \t* Makefile.in (install-info): Use install-info program if"}, {"sha": "558e090a64d27c8937473cf7e72e90399ac7217b", "filename": "gcc/mips-tdump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1661d6b1e0bebe318540aefa0d07981f5b236b/gcc%2Fmips-tdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1661d6b1e0bebe318540aefa0d07981f5b236b/gcc%2Fmips-tdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tdump.c?ref=cd1661d6b1e0bebe318540aefa0d07981f5b236b", "patch": "@@ -937,7 +937,7 @@ print_symbol (sym_ptr, number, strbase, aux_base, ifd, fdp)\n \telse\n \t  {\n \t    used_ptr[index] = 1;\n-\t    printf (\"      First symbol: %ld\\n\", aux_base[index].isym);\n+\t    printf (\"      First symbol: %ld\\n\", (long) aux_base[index].isym);\n \t  }\n \n \tif (want_scope)\n@@ -962,7 +962,7 @@ print_symbol (sym_ptr, number, strbase, aux_base, ifd, fdp)\n \t  {\n \t    used_ptr[index] = used_ptr[index+1] = 1;\n \t    printf (\"      End+1 symbol: %-7ld   Type:  %s\\n\",\n-\t\t    aux_base[index].isym,\n+\t\t    (long) aux_base[index].isym,\n \t\t    type_to_string (aux_base, index+1, fdp));\n \t  }\n \telse\t\t\t/* global symbol */"}, {"sha": "04b361891210a42d1d87d50a500398c5f83d0d01", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 84, "deletions": 34, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1661d6b1e0bebe318540aefa0d07981f5b236b/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1661d6b1e0bebe318540aefa0d07981f5b236b/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=cd1661d6b1e0bebe318540aefa0d07981f5b236b", "patch": "@@ -2054,11 +2054,12 @@ add_local_symbol (str_start, str_end_p1, type, storage, value, indx)\n \t       value, depth, sc_str);\n \n       if (str_start && str_end_p1 - str_start > 0)\n-\tfprintf (stderr, \" st= %-11s name= %.*s\\n\", st_str, str_end_p1 - str_start, str_start);\n+\tfprintf (stderr, \" st= %-11s name= %.*s\\n\",\n+\t\t st_str, (int) (str_end_p1 - str_start), str_start);\n       else\n \t{\n \t  Size_t len = strlen (st_str);\n-\t  fprintf (stderr, \" st= %.*s\\n\", len-1, st_str);\n+\t  fprintf (stderr, \" st= %.*s\\n\", (int) (len-1), st_str);\n \t}\n     }\n \n@@ -2092,7 +2093,8 @@ add_ext_symbol (str_start, str_end_p1, type, storage, value, indx, ifd)\n \t       value, ifd, sc_str);\n \n       if (str_start && str_end_p1 - str_start > 0)\n-\tfprintf (stderr, \" st= %-11s name= %.*s\\n\", st_str, str_end_p1 - str_start, str_start);\n+\tfprintf (stderr, \" st= %-11s name= %.*s\\n\",\n+\t\t st_str, (int) (str_end_p1 - str_start), str_start);\n       else\n \tfprintf (stderr, \" st= %s\\n\", st_str);\n     }\n@@ -2401,8 +2403,8 @@ add_unknown_tag (ptag)\n \tdefault:\t\t\t\tbreak;\n \t}\n \n-      fprintf (stderr, \"unknown %s %.*s found\\n\", agg_type,\n-\t       hash_ptr->len, name_start);\n+      fprintf (stderr, \"unknown %s %.*s found\\n\",\n+\t       agg_type, (int) hash_ptr->len, name_start);\n     }\n \n   sym_index = add_local_symbol (name_start,\n@@ -2515,7 +2517,7 @@ add_file (file_start, file_end_p1)\n   register efdr_t *file_ptr;\n \n   if (debug)\n-    fprintf (stderr, \"\\tfile\\t%.*s\\n\", len, file_start);\n+    fprintf (stderr, \"\\tfile\\t%.*s\\n\", (int) len, file_start);\n \n   /* See if the file has already been created.  */\n   for (file_ptr = first_file;\n@@ -3224,7 +3226,7 @@ parse_def (name_start)\n \t\t      && eptr == (EXTR *) 0)\n \t\t    {\n \t\t      fprintf (stderr, \"warning, %.*s not found in original or external symbol tables, value defaults to 0\\n\",\n-\t\t\t       arg_end_p1 - arg_start,\n+\t\t\t       (int) (arg_end_p1 - arg_start),\n \t\t\t       arg_start);\n \t\t      value = 0;\n \t\t    }\n@@ -4117,9 +4119,13 @@ write_varray (vp, offset, str)\n     return;\n \n   if (debug)\n-    fprintf (stderr, \"\\twarray\\tvp = 0x%.8x, offset = %7u, size = %7u, %s\\n\",\n-\t     vp, offset, vp->num_allocated * vp->object_size, str);\n-\n+    {\n+      fputs (\"\\twarray\\tvp = \", stderr);\n+      fprintf (stderr, HOST_PTR_PRINTF, vp);\n+      fprintf (stderr, \", offset = %7lu, size = %7lu, %s\\n\",\n+\t       (unsigned long) offset, vp->num_allocated * vp->object_size, str);\n+    }\n+  \n   if (file_offset != offset\n       && fseek (object_stream, (long)offset, SEEK_SET) < 0)\n     pfatal_with_name (object_name);\n@@ -4155,9 +4161,12 @@ write_object __proto((void))\n   off_t offset;\n \n   if (debug)\n-    fprintf (stderr, \"\\n\\twrite\\tvp = 0x%.8x, offset = %7u, size = %7u, %s\\n\",\n-\t     (PTR_T *) &symbolic_header, 0, sizeof (symbolic_header),\n-\t     \"symbolic header\");\n+    {\n+      fputs (\"\\n\\twrite\\tvp = \", stderr);\n+      fprintf (stderr, HOST_PTR_PRINTF, (PTR_T *) &symbolic_header);\n+      fprintf (stderr, \", offset = %7u, size = %7lu, %s\\n\",\n+\t       0, (unsigned long) sizeof (symbolic_header), \"symbolic header\");\n+    }\n \n   sys_write = fwrite ((PTR_T) &symbolic_header,\n \t\t      1,\n@@ -4185,9 +4194,13 @@ write_object __proto((void))\n \tpfatal_with_name (object_name);\n \n       if (debug)\n-\tfprintf (stderr, \"\\twrite\\tvp = 0x%.8x, offset = %7u, size = %7u, %s\\n\",\n-\t\t (PTR_T *) &orig_linenum, symbolic_header.cbLineOffset,\n-\t\t symbolic_header.cbLine, \"Line numbers\");\n+\t{\n+\t  fputs (\"\\twrite\\tvp = \", stderr);\n+\t  fprintf (stderr, HOST_PTR_PRINTF, (PTR_T *) &orig_linenum);\n+\t  fprintf (stderr, \", offset = %7lu, size = %7lu, %s\\n\",\n+\t\t   (long) symbolic_header.cbLineOffset,\n+\t\t   (long) symbolic_header.cbLine, \"Line numbers\");\n+\t}\n \n       sys_write = fwrite ((PTR_T) orig_linenum,\n \t\t\t  1,\n@@ -4216,9 +4229,13 @@ write_object __proto((void))\n \tpfatal_with_name (object_name);\n \n       if (debug)\n-\tfprintf (stderr, \"\\twrite\\tvp = 0x%.8x, offset = %7u, size = %7u, %s\\n\",\n-\t\t (PTR_T *) &orig_opt_syms, symbolic_header.cbOptOffset,\n-\t\t num_write, \"Optimizer symbols\");\n+\t{\n+\t  fputs (\"\\twrite\\tvp = \", stderr);\n+\t  fprintf (stderr, HOST_PTR_PRINTF, (PTR_T *) &orig_opt_syms);\n+\t  fprintf (stderr, \", offset = %7lu, size = %7lu, %s\\n\",\n+\t\t   (long) symbolic_header.cbOptOffset,\n+\t\t   num_write, \"Optimizer symbols\");\n+\t}\n \n       sys_write = fwrite ((PTR_T) orig_opt_syms,\n \t\t\t  1,\n@@ -4304,8 +4321,13 @@ write_object __proto((void))\n \t   file_ptr = file_ptr->next_file)\n \t{\n \t  if (debug)\n-\t    fprintf (stderr, \"\\twrite\\tvp = 0x%.8x, offset = %7u, size = %7u, %s\\n\",\n-\t\t     (PTR_T *) &file_ptr->fdr, file_offset, sizeof (FDR), \"File header\");\n+\t    {\n+\t      fputs (\"\\twrite\\tvp = \", stderr);\n+\t      fprintf (stderr, HOST_PTR_PRINTF, (PTR_T *) &file_ptr->fdr);\n+\t      fprintf (stderr, \", offset = %7lu, size = %7lu, %s\\n\",\n+\t\t       file_offset, (unsigned long) sizeof (FDR),\n+\t\t       \"File header\");\n+\t    }\n \n \t  sys_write = fwrite (&file_ptr->fdr,\n \t\t\t      1,\n@@ -4335,9 +4357,13 @@ write_object __proto((void))\n \tpfatal_with_name (object_name);\n \n       if (debug)\n-\tfprintf (stderr, \"\\twrite\\tvp = 0x%.8x, offset = %7u, size = %7u, %s\\n\",\n-\t\t (PTR_T *) &orig_rfds, symbolic_header.cbRfdOffset,\n-\t\t num_write, \"Relative file descriptors\");\n+\t{\n+\t  fputs (\"\\twrite\\tvp = \", stderr);\n+\t  fprintf (stderr, HOST_PTR_PRINTF, (PTR_T *) &orig_rfds);\n+\t  fprintf (stderr, \", offset = %7lu, size = %7lu, %s\\n\",\n+\t\t   (long) symbolic_header.cbRfdOffset,\n+\t\t   num_write, \"Relative file descriptors\");\n+\t}\n \n       sys_write = fwrite (orig_rfds,\n \t\t\t  1,\n@@ -4379,8 +4405,9 @@ read_seek (size, offset, str)\n     return (page_t *) 0;\n \n   if (debug)\n-    fprintf (stderr, \"\\trseek\\tsize = %7u, offset = %7u, currently at %7u, %s\\n\",\n-\t     size, offset, file_offset, str);\n+    fprintf (stderr,\n+\t     \"\\trseek\\tsize = %7lu, offset = %7lu, currently at %7lu, %s\\n\",\n+\t     (unsigned long) size, (unsigned long) offset, file_offset, str);\n \n #ifndef MALLOC_CHECK\n   ptr = allocate_multiple_pages ((size + PAGE_USIZE - 1) / PAGE_USIZE);\n@@ -5077,7 +5104,7 @@ out_of_bounds (indx, max, str, prog_line)\n   if (indx < max)\t\t/* just in case */\n     return 0;\n \n-  fprintf (stderr, \"%s, %s:%ld index %u is out of bounds for %s, max is %u, mips-tfile.c line# %d\\n\",\n+  fprintf (stderr, \"%s, %s:%ld index %lu is out of bounds for %s, max is %lu, mips-tfile.c line# %d\\n\",\n \t   progname, input_name, line_number, indx, str, max, prog_line);\n \n   exit (1);\n@@ -5128,7 +5155,12 @@ allocate_cluster (npages)\n     pfatal_with_name (\"allocate_cluster\");\n \n   if (debug > 3)\n-    fprintf (stderr, \"\\talloc\\tnpages = %d, value = 0x%.8x\\n\", npages, ptr);\n+    {\n+      fprintf (stderr, \"\\talloc\\tnpages = %lu, value = \",\n+\t       (unsigned long) npages);\n+      fprintf (stderr, HOST_PTR_PRINTF, ptr);\n+      fputs (\"\\n\", stderr);\n+    }\n \n   return ptr;\n }\n@@ -5652,7 +5684,11 @@ xmalloc (size)\n     fatal (\"Virtual memory exhausted.\");\n \n   if (debug > 3)\n-    fprintf (stderr, \"\\tmalloc\\tptr = 0x%.8x, size = %10u\\n\", value, size);\n+    {\n+      fputs (\"\\tmalloc\\tptr = \", stderr);\n+      fprintf (stderr, HOST_PTR_PRINTF, value);\n+      fprintf (stderr, \", size = %10lu\\n\", (unsigned long) size);\n+    }\n \n   return value;\n }\n@@ -5668,8 +5704,13 @@ xcalloc (size1, size2)\n     fatal (\"Virtual memory exhausted.\");\n \n   if (debug > 3)\n-    fprintf (stderr, \"\\tcalloc\\tptr = 0x%.8x, size1 = %10u, size2 = %10u [%u]\\n\",\n-\t     value, size1, size2, size1+size2);\n+    {\n+      fputs (\"\\tcalloc\\tptr = \", stderr);\n+      fprintf (stderr, HOST_PTR_PRINTF, value);\n+      fprintf (stderr, \", size1 = %10lu, size2 = %10lu [%lu]\\n\",\n+\t       (unsigned long) size1, (unsigned long) size2,\n+\t       (unsigned long) size1*size2);\n+    }\n \n   return value;\n }\n@@ -5686,8 +5727,13 @@ xrealloc (ptr, size)\n     fatal (\"Virtual memory exhausted.\");\n \n   if (debug > 3)\n-    fprintf (stderr, \"\\trealloc\\tptr = 0x%.8x, size = %10u, orig = 0x%.8x\\n\",\n-\t     result, size, ptr);\n+    {\n+      fputs (\"\\trealloc\\tptr = \", stderr);\n+      fprintf (stderr, HOST_PTR_PRINTF, result);\n+      fprintf (stderr, \", size = %10lu, orig = \", size);\n+      fprintf (stderr, HOST_PTR_PRINTF, ptr);\n+      fputs (\"\\n\", stderr);\n+    }\n \n   return result;\n }\n@@ -5697,7 +5743,11 @@ xfree (ptr)\n      PTR_T ptr;\n {\n   if (debug > 3)\n-    fprintf (stderr, \"\\tfree\\tptr = 0x%.8x\\n\", ptr);\n+    {\n+      fputs (\"\\tfree\\tptr = \", stderr);\n+      fprintf (stderr, HOST_PTR_PRINTF, ptr);\n+      fputs (\"\\n\", stderr);\n+    }\n \n   free (ptr);\n }"}]}