{"sha": "88f32f0f924ccac7635c4491292327cbe30939e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhmMzJmMGY5MjRjY2FjNzYzNWM0NDkxMjkyMzI3Y2JlMzA5MzllMg==", "commit": {"author": {"name": "Zhenqiang Chen", "email": "zhenqiang.chen@linaro.org", "date": "2014-05-26T06:11:33Z"}, "committer": {"name": "Zhenqiang Chen", "email": "zqchen@gcc.gnu.org", "date": "2014-05-26T06:11:33Z"}, "message": "re PR rtl-optimization/61220 (ICE on valid code at -O2 on x86_64-linux-gnu in maybe_record_trace_start, at dwarf2cfi.c:2239)\n\nChangeLog:\n2014-05-26  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n\n\tPR rtl-optimization/61220\n\tPart of PR rtl-optimization/61225\n\t* shrink-wrap.c (move_insn_for_shrink_wrap): Skip SP and FP adjustment\n\tinsn; skip split_edge for a block with only one successor.\n\ntestsuite/ChangeLog:\n2014-05-26  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n\n\t* gcc.dg/pr61220.c: New test.\n\t* gcc.dg/shrink-wrap-loop.c: Disable for x86_64 -m32 mode.\n\nFrom-SVN: r210921", "tree": {"sha": "f3d69779fbdc0c50143895e374af8c05446ae798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3d69779fbdc0c50143895e374af8c05446ae798"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88f32f0f924ccac7635c4491292327cbe30939e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f32f0f924ccac7635c4491292327cbe30939e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f32f0f924ccac7635c4491292327cbe30939e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f32f0f924ccac7635c4491292327cbe30939e2/comments", "author": null, "committer": null, "parents": [{"sha": "97ae6b6443470560d8ab692501dcec00b20dc02b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ae6b6443470560d8ab692501dcec00b20dc02b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97ae6b6443470560d8ab692501dcec00b20dc02b"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "b878cb63db3960d10bf172656677748fc389ad53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f32f0f924ccac7635c4491292327cbe30939e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f32f0f924ccac7635c4491292327cbe30939e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88f32f0f924ccac7635c4491292327cbe30939e2", "patch": "@@ -1,3 +1,11 @@\n+ChangeLog:\n+2014-05-26  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n+\n+\tPR rtl-optimization/61220\n+\tPart of PR rtl-optimization/61225\n+\t* shrink-wrap.c (move_insn_for_shrink_wrap): Skip SP and FP adjustment\n+\tinsn; skip split_edge for a block with only one successor.\n+\n 2014-05-23  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* symtab.c (symtab_nonoverwritable_alias): Copy READONLY flag for variables."}, {"sha": "68635025a33623fb6c054e786787ef8652105536", "filename": "gcc/shrink-wrap.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f32f0f924ccac7635c4491292327cbe30939e2/gcc%2Fshrink-wrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f32f0f924ccac7635c4491292327cbe30939e2/gcc%2Fshrink-wrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fshrink-wrap.c?ref=88f32f0f924ccac7635c4491292327cbe30939e2", "patch": "@@ -179,7 +179,12 @@ move_insn_for_shrink_wrap (basic_block bb, rtx insn,\n     return false;\n   src = SET_SRC (set);\n   dest = SET_DEST (set);\n-  if (!REG_P (dest) || !REG_P (src))\n+  if (!REG_P (dest) || !REG_P (src)\n+      /* STACK or FRAME related adjustment might be part of prologue.\n+\t So keep them in the entry block.  */\n+      || dest == stack_pointer_rtx\n+      || dest == frame_pointer_rtx\n+      || dest == hard_frame_pointer_rtx)\n     return false;\n \n   /* Make sure that the source register isn't defined later in BB.  */\n@@ -204,6 +209,10 @@ move_insn_for_shrink_wrap (basic_block bb, rtx insn,\n   /* Create a new basic block on the edge.  */\n   if (EDGE_COUNT (next_block->preds) == 2)\n     {\n+      /* split_edge for a block with only one successor is meaningless.  */\n+      if (EDGE_COUNT (bb->succs) == 1)\n+\treturn false;\n+\n       next_block = split_edge (live_edge);\n \n       bitmap_copy (df_get_live_in (next_block), df_get_live_out (bb));"}, {"sha": "5157ad86f6a57b7172c64d4f72d5f6446ea1fcf7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f32f0f924ccac7635c4491292327cbe30939e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f32f0f924ccac7635c4491292327cbe30939e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88f32f0f924ccac7635c4491292327cbe30939e2", "patch": "@@ -1,3 +1,8 @@\n+2014-05-26  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n+\n+\t* gcc.dg/pr61220.c: New test.\n+\t* gcc.dg/shrink-wrap-loop.c: Disable for x86_64 -m32 mode.\n+\n 2014-05-25  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/coarray_10.f90: Update dg-warning."}, {"sha": "d45d1c3c9f138135a9c007e02597a936b8782736", "filename": "gcc/testsuite/gcc.dg/pr61220.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f32f0f924ccac7635c4491292327cbe30939e2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61220.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f32f0f924ccac7635c4491292327cbe30939e2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61220.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61220.c?ref=88f32f0f924ccac7635c4491292327cbe30939e2", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g\" } */\n+\n+int a, c, d, e, f, g, h, i, j, k;\n+\n+struct S0\n+{\n+  int f0;\n+  int f1;\n+  int f2;\n+};\n+\n+struct S1\n+{\n+  int f0;\n+  int f1;\n+  struct S0 f2;\n+} b;\n+\n+void\n+fn1 (struct S1 p)\n+{\n+  for (; k; k++)\n+    h = j ? a : a - 1;\n+  d &= i;\n+}\n+\n+int\n+main ()\n+{\n+  int l[5] = { 0 };\n+  fn1 (b);\n+  for (c = 0; c < 3; c++)\n+    for (g = 0; g < 3; g++)\n+      l[c * 2] = e = l[c];\n+  if (f)\n+    fn1 (b);\n+  return 0;\n+}"}, {"sha": "e72edfa6c4449293232ef8899beedb3c0179be6c", "filename": "gcc/testsuite/gcc.dg/shrink-wrap-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f32f0f924ccac7635c4491292327cbe30939e2/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f32f0f924ccac7635c4491292327cbe30939e2/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-loop.c?ref=88f32f0f924ccac7635c4491292327cbe30939e2", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { { x86_64-*-* } || { arm_thumb2 } } } } */\n+/* { dg-do compile { target { { x86_64-*-* && lp64 } || { arm_thumb2 } } } } */\n /* { dg-options \"-O2 -fdump-rtl-pro_and_epilogue\"  } */\n \n int foo (int *p1, int *p2);"}]}