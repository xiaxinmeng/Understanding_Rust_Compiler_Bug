{"sha": "0e1c7a5f3674c95c8fd27a557b24cebaee841faa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUxYzdhNWYzNjc0Yzk1YzhmZDI3YTU1N2IyNGNlYmFlZTg0MWZhYQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-01-16T05:32:51Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-01-16T05:32:51Z"}, "message": "LayoutManager2.java: Merged with Classpath.\n\n\t* java/awt/LayoutManager2.java: Merged with Classpath.\n\t* java/awt/LayoutManager.java: Merged with Classpath.\n\t* java/awt/GridLayout.java: Updated copyright and javadoc.\n\t(getSize): Use `parent.ncomponents'.  Handle insets.\n\t(layoutContainer): Use `parent.ncomponents'.  Handle case where\n\tthere are fewer children than columns.  Correctly compute size of\n\teach cell in the grid.  Handle case where there isn't enough\n\tspace.\n\t* java/awt/CardLayout.java (tab): Renamed from `map'.  Updated\n\tall users.\n\t(gotoComponent): Use parent.ncomponents.  Ensure child exists\n\tbefore calling setVisible() on it.  Last item is `num - 1', not\n\t`num'.\n\t(layoutContainer): Hoist invariants out of loop.\n\nFrom-SVN: r48898", "tree": {"sha": "3f880ffdb55e010a39ff34786a87a89210e0379e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f880ffdb55e010a39ff34786a87a89210e0379e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e1c7a5f3674c95c8fd27a557b24cebaee841faa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1c7a5f3674c95c8fd27a557b24cebaee841faa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e1c7a5f3674c95c8fd27a557b24cebaee841faa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1c7a5f3674c95c8fd27a557b24cebaee841faa/comments", "author": null, "committer": null, "parents": [{"sha": "3bd483f2a189ed92cefd9ad0cfa5f15fabdf1592", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd483f2a189ed92cefd9ad0cfa5f15fabdf1592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bd483f2a189ed92cefd9ad0cfa5f15fabdf1592"}], "stats": {"total": 449, "additions": 359, "deletions": 90}, "files": [{"sha": "a09892cfdcfbf520be3b500bbc0a2ed61a3906cf", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1c7a5f3674c95c8fd27a557b24cebaee841faa/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1c7a5f3674c95c8fd27a557b24cebaee841faa/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0e1c7a5f3674c95c8fd27a557b24cebaee841faa", "patch": "@@ -1,5 +1,20 @@\n 2002-01-15  Tom Tromey  <tromey@redhat.com>\n \n+\t* java/awt/LayoutManager2.java: Merged with Classpath.\n+\t* java/awt/LayoutManager.java: Merged with Classpath.\n+\t* java/awt/GridLayout.java: Updated copyright and javadoc.\n+\t(getSize): Use `parent.ncomponents'.  Handle insets.\n+\t(layoutContainer): Use `parent.ncomponents'.  Handle case where\n+\tthere are fewer children than columns.  Correctly compute size of\n+\teach cell in the grid.  Handle case where there isn't enough\n+\tspace.\n+\t* java/awt/CardLayout.java (tab): Renamed from `map'.  Updated\n+\tall users.\n+\t(gotoComponent): Use parent.ncomponents.  Ensure child exists\n+\tbefore calling setVisible() on it.  Last item is `num - 1', not\n+\t`num'.\n+\t(layoutContainer): Hoist invariants out of loop.\n+\n \tStart of AWT merge with Classpath:\n \t* Makefile.in: Rebuilt.\n \t* Makefile.am (awt_java_source_files): Reference files in"}, {"sha": "29e8341512fea663d8039286cb84598a789f0ff0", "filename": "libjava/java/awt/CardLayout.java", "status": "modified", "additions": 80, "deletions": 37, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1c7a5f3674c95c8fd27a557b24cebaee841faa/libjava%2Fjava%2Fawt%2FCardLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1c7a5f3674c95c8fd27a557b24cebaee841faa/libjava%2Fjava%2Fawt%2FCardLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCardLayout.java?ref=0e1c7a5f3674c95c8fd27a557b24cebaee841faa", "patch": "@@ -1,12 +1,30 @@\n // CardLayout.java - Card-based layout engine\n \n-/* Copyright (C) 2000, 2002  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2002  Free Software Foundation\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n \n@@ -19,50 +37,55 @@\n  * time.  This class includes methods for changing which card is\n  * shown.\n  *\n- * @version 0.0\n  * @author Tom Tromey <tromey@redhat.com>\n- * @date December 2, 2000\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n public class CardLayout implements LayoutManager2, Serializable\n {\n-  /** Create a new CardLayout object with both gaps zero.  */\n+  /**\n+   * Initializes a new instance of <code>CardLayout</code> with horizontal\n+   * and vertical gaps of 0.\n+   */\n   public CardLayout ()\n   {\n     this (0, 0);\n   }\n \n-  /** Create a new CardLayout object with the specified horizontal and\n-   * vertical gaps.\n+  /**\n+   * Create a new <code>CardLayout</code> object with the specified\n+   * horizontal and vertical gaps.\n    * @param hgap The horizontal gap\n    * @param vgap The vertical gap\n    */\n   public CardLayout (int hgap, int vgap)\n   {\n     this.hgap = hgap;\n     this.vgap = vgap;\n-    this.map = new Hashtable ();\n+    this.tab = new Hashtable ();\n   }\n \n   /** Add a new component to the layout.  The constraint must be a\n    * string which is used to name the component.  This string can\n    * later be used to refer to the particular component.\n    * @param comp The component to add\n    * @param constraints The name by which the component can later be called\n-   * @exception IllegalArgumentException If `constraints' is not a string\n+   * @exception IllegalArgumentException If `constraints' is not a\n+   * <code>String</code>\n    */\n   public void addLayoutComponent (Component comp, Object constraints)\n   {\n     if (! (constraints instanceof String))\n       throw new IllegalArgumentException (\"Object \" + constraints\n \t\t\t\t\t  + \" is not a string\");\n-    map.put (constraints, comp);\n+    tab.put (constraints, comp);\n   }\n \n   /** Add a new component to the layout.  The name can be used later\n    * to refer to the component.\n    * @param name The name by which the component can later be called\n    * @param comp The component to add\n-   * @deprecated\n+   * @deprecated This method is deprecated in favor of\n+   * <code>addLayoutComponent(Component, Object)</code>.\n    */\n   public void addLayoutComponent (String name, Component comp)\n   {\n@@ -121,10 +144,12 @@ public void last (Container parent)\n     gotoComponent (parent, LAST, null);\n   }\n \n-  /** Lay out the container's components based on the current\n-   * settings.\n-   * @param parent The parent container\n-   */\n+  /**\n+   * Lays out the container.  This is done by resizing the child components\n+   * to be the same size as the parent, less insets and gaps.\n+   *\n+   * @param parent The parent container.\n+   */ \n   public void layoutContainer (Container parent)\n   {\n     int width = parent.width;\n@@ -135,12 +160,13 @@ public void layoutContainer (Container parent)\n     int num = parent.ncomponents;\n     Component[] comps = parent.component;\n \n+    int x = ins.left + hgap;\n+    int y = ins.top + vgap;\n+    width = width - 2 * hgap - ins.left - ins.right;\n+    height = height - 2 * vgap - ins.top - ins.bottom;\n+\n     for (int i = 0; i < num; ++i)\n-      {\n-\tcomps[i].setBounds (hgap + ins.left, vgap + ins.top,\n-\t\t\t    width - 2 * hgap - ins.left - ins.right,\n-\t\t\t    height - 2 * vgap - ins.top - ins.bottom);\n-      }\n+      comps[i].setBounds (x, y, width, height);\n   }\n \n   /** Get the maximum layout size of the container.\n@@ -161,7 +187,9 @@ public Dimension minimumLayoutSize (Container target)\n     return getSize (target, MIN);\n   }\n \n-  /** Cause the next component in the container to be displayed.\n+  /** Cause the next component in the container to be displayed.  If\n+   * this current card is the  last one in the deck, the first\n+   * component is displayed.\n    * @param parent The parent container\n    */\n   public void next (Container parent)\n@@ -178,6 +206,8 @@ public Dimension preferredLayoutSize (Container parent)\n   }\n \n   /** Cause the previous component in the container to be displayed.\n+   * If this current card is the first one in the deck, the last\n+   * component is displayed.\n    * @param parent The parent container\n    */\n   public void previous (Container parent)\n@@ -190,13 +220,13 @@ public void previous (Container parent)\n    */\n   public void removeLayoutComponent (Component comp)\n   {\n-    Enumeration e = map.keys ();\n+    Enumeration e = tab.keys ();\n     while (e.hasMoreElements ())\n       {\n \tObject key = e.nextElement ();\n-\tif (map.get (key) == comp)\n+\tif (tab.get (key) == comp)\n \t  {\n-\t    map.remove (key);\n+\t    tab.remove (key);\n \t    break;\n \t  }\n       }\n@@ -225,11 +255,16 @@ public void setVgap (int vgap)\n    */\n   public void show (Container parent, String name)\n   {\n-    Object target = map.get (name);\n+    Object target = tab.get (name);\n     if (target != null)\n       gotoComponent (parent, NONE, (Component) target);\n   }\n \n+  /**\n+   * Returns a string representation of this layout manager.\n+   *\n+   * @return A string representation of this object.\n+   */\n   public String toString ()\n   {\n     return getClass ().getName () + \"[\" + hgap + \",\" + vgap + \"]\";\n@@ -239,15 +274,15 @@ public String toString ()\n   private void gotoComponent (Container parent, int what,\n \t\t\t      Component target)\n   {\n-    int num = parent.getComponentCount ();\n+    int num = parent.ncomponents;\n     // This is more efficient than calling getComponents().\n     Component[] comps = parent.component;\n     int choice = -1;\n \n     if (what == FIRST)\n       choice = 0;\n     else if (what == LAST)\n-      choice = num;\n+      choice = num - 1;\n     else if (what >= 0)\n       choice = what;\n \n@@ -275,12 +310,11 @@ else if (what == PREV)\n \t\tif (choice < 0)\n \t\t  choice = num - 1;\n \t      }\n-\t    else\n+\t    else if (choice == i)\n \t      {\n \t\t// Do nothing if we're already looking at the right\n \t\t// component.\n-\t\tif (choice == i)\n-\t\t  return;\n+\t\treturn;\n \t      }\n \t    comps[i].setVisible (false);\n \n@@ -289,7 +323,8 @@ else if (what == PREV)\n \t  }\n       }\n \n-    comps[choice].setVisible (true);\n+    if (choice >= 0 && choice < num)\n+      comps[choice].setVisible (true);\n   }\n \n   // Compute the size according to WHAT.\n@@ -326,12 +361,20 @@ else if (what == MAX)\n     return new Dimension (w, h);\n   }\n \n-  // The gaps.\n+  /**\n+   * @serial Horizontal gap value.\n+   */\n   private int hgap;\n+\n+  /**\n+   * @serial Vertical gap value.\n+   */\n   private int vgap;\n \n-  // This hashtable maps a name to a component.\n-  private Hashtable map;\n+  /**\n+   * @serial Table of named components.\n+   */\n+  private Hashtable tab;\n \n   // These constants are used by the private gotoComponent method.\n   private int FIRST = 0;"}, {"sha": "24a8ec84fd10c79ec3e6a1f936dc10fa5774c453", "filename": "libjava/java/awt/GridLayout.java", "status": "modified", "additions": 86, "deletions": 27, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1c7a5f3674c95c8fd27a557b24cebaee841faa/libjava%2Fjava%2Fawt%2FGridLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1c7a5f3674c95c8fd27a557b24cebaee841faa/libjava%2Fjava%2Fawt%2FGridLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FGridLayout.java?ref=0e1c7a5f3674c95c8fd27a557b24cebaee841faa", "patch": "@@ -1,12 +1,30 @@\n // GridLayout.java - Grid-based layout engine\n \n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2002  Free Software Foundation\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n \n@@ -15,16 +33,24 @@\n /** This class implements a grid-based layout scheme.  Components are\n  * all given the same size and are laid out from left to right and top\n  * to bottom.  A GridLayout is configured with a number of rows and a\n- * number of columns.  If either is zero then that dimension is\n- * computed based on the actual size of the container.  An exception\n- * is thrown if an attempt is made to set both the number of rows and\n- * the number of columns to 0.  This class also support horizontal and\n- * vertical gaps; these are used as spacing between cells.\n+ * number of columns.  If both are specified, then the number of\n+ * columns is ignored and is derived from the number of rows and the\n+ * total number of components.  If either is zero then that dimension\n+ * is computed based on the actual size of the container.  An\n+ * exception is thrown if an attempt is made to set both the number of\n+ * rows and the number of columns to 0.  This class also supports\n+ * horizontal and vertical gaps; these are used as spacing between\n+ * cells.\n+ *\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n public class GridLayout implements LayoutManager, Serializable\n {\n   /** Add a new component to the layout.  This particular implementation\n    * does nothing.\n+   * @param name The name of the component to add.\n+   * @param component The component to add.\n    */\n   public void addLayoutComponent (String name, Component comp)\n   {\n@@ -55,16 +81,18 @@ public int getVgap ()\n     return vgap;\n   }\n \n-  /** Create a new GridLayout with one row and any number of columns.\n-   * Both gaps are set to 0.\n+  /** Create a new <code>GridLayout</code> with one row and any number\n+   * of columns.  Both gaps are set to 0.\n    */\n   public GridLayout ()\n   {\n     this (1, 0, 0, 0);\n   }\n \n-  /** Create a new GridLayout with the specified number of rows and\n-   * columns.  Both gaps are set to 0.\n+  /** Create a new <code>GridLayout</code> with the specified number\n+   * of rows and columns.  Both gaps are set to 0.  Note that the row\n+   * and column settings cannot both be zero.  If both the row and\n+   * column values are non-zero, the rows value takes precedence.\n    * @param rows Number of rows\n    * @param cols Number of columns\n    * @exception IllegalArgumentException If rows and columns are both\n@@ -77,6 +105,9 @@ public GridLayout (int rows, int cols)\n \n   /** Create a new GridLayout with the specified number of rows and\n    * columns and the specified gaps.\n+   * Note that the row and column settings cannot both be\n+   * zero.  If both the row and column values are non-zero, the rows value\n+   * takes precedence.\n    * @param rows Number of rows\n    * @param cols Number of columns\n    * @param hgap The horizontal gap\n@@ -103,11 +134,13 @@ public GridLayout (int rows, int cols, int hgap, int vgap)\n   }\n \n   /** Lay out the container's components based on current settings.\n-   * @param parent The parent container\n+   * The free space in the container is divided evenly into the specified\n+   * number of rows and columns in this object.\n+   * @param parent The container to lay out\n    */\n   public void layoutContainer (Container parent)\n   {\n-    int num = parent.getComponentCount ();\n+    int num = parent.ncomponents;\n     // This is more efficient than calling getComponents().\n     Component[] comps = parent.component;\n \n@@ -118,14 +151,25 @@ public void layoutContainer (Container parent)\n     else\n       real_cols = (num + real_rows - 1) / real_rows;\n \n+    // We might have less than a single row.  In this case we expand\n+    // to fill.\n+    if (num < real_cols)\n+      real_cols = num;\n+\n     Dimension d = parent.getSize ();\n     Insets ins = parent.getInsets ();\n \n+    // Compute width and height of each cell in the grid.\n     int tw = d.width - ins.left - ins.right;\n+    tw = (tw - (real_rows - 1) * hgap) / real_rows;\n     int th = d.height - ins.top - ins.bottom;\n+    th = (th - (real_cols - 1) * vgap) / real_cols;\n \n-    int w = (tw - (real_rows - 1) * hgap) / real_rows;\n-    int h = (th - (real_cols - 1) * vgap) / real_cols;\n+    // If the cells are too small, still try to do something.\n+    if (tw < 0)\n+      tw = 1;\n+    if (th < 0)\n+      th = 1;\n \n     int x = ins.left;\n     int y = ins.top;\n@@ -191,6 +235,7 @@ public void setColumns (int newCols)\n \n   /** Set the horizontal gap\n    * @param hgap The horizontal gap\n+   * @exception IllegalArgumentException If the hgap value is less than zero.\n    */\n   public void setHgap (int hgap)\n   {\n@@ -216,6 +261,7 @@ public void setRows (int newRows)\n \n   /** Set the vertical gap.\n    * @param vgap The vertical gap\n+   * @exception IllegalArgumentException If the vgap value is less than zero.\n    */\n   public void setVgap (int vgap)\n   {\n@@ -236,14 +282,12 @@ public String toString ()\n   // This method is used to compute the various sizes.\n   private Dimension getSize (Container parent, boolean is_min)\n   {\n-    int w = 0, h = 0, num = parent.getComponentCount ();\n+    int w = 0, h = 0, num = parent.ncomponents;\n     // This is more efficient than calling getComponents().\n     Component[] comps = parent.component;\n \n     for (int i = 0; i < num; ++i)\n       {\n-\t// FIXME: can we just directly read the fields in Component?\n-\t// Or will that not work with subclassing?\n \tDimension d;\n \n \tif (is_min)\n@@ -262,16 +306,31 @@ private Dimension getSize (Container parent, boolean is_min)\n     else\n       real_cols = (num + real_rows - 1) / real_rows;\n \n+    Insets ins = parent.getInsets ();\n     // We subtract out an extra gap here because the gaps are only\n     // between cells.\n-    return new Dimension (real_rows * (w + hgap) - hgap,\n-\t\t\t  real_cols * (h + vgap) - vgap);\n+    w = ins.left + ins.right + real_rows * (w + hgap) - hgap;\n+    h = ins.top + ins.bottom + real_cols * (h + vgap) - vgap;\n+    return new Dimension (w, h);\n   }\n \n-  // The gaps.\n+  /**\n+   * @serial The number of columns in the grid.\n+   */\n+  private int cols;\n+\n+  /**\n+   * @serial The number of rows in the grid.\n+   */\n+  private int rows;\n+\n+  /**\n+   * @serial The horizontal gap between columns\n+   */\n   private int hgap;\n+\n+  /**\n+   * @serial The vertical gap between rows\n+   */\n   private int vgap;\n-  // Number of rows and columns.\n-  private int rows;\n-  private int cols;\n }"}, {"sha": "55f2bfde5cbe4054a72426dcd0d1db0ddfddb8c3", "filename": "libjava/java/awt/LayoutManager.java", "status": "modified", "additions": 88, "deletions": 13, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1c7a5f3674c95c8fd27a557b24cebaee841faa/libjava%2Fjava%2Fawt%2FLayoutManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1c7a5f3674c95c8fd27a557b24cebaee841faa/libjava%2Fjava%2Fawt%2FLayoutManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FLayoutManager.java?ref=0e1c7a5f3674c95c8fd27a557b24cebaee841faa", "patch": "@@ -1,20 +1,95 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* LayoutManager.java -- Layout containers in a Window\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libjava.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-package java.awt;\n \n-/* Status:  Believed complete and correct. */\n+package java.awt;\n \n+/**\n+  * This interface is for laying out containers.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n public interface LayoutManager\n {\n-  public void addLayoutComponent (String name, Component comp);\n-  public void layoutContainer (Container parent);\n-  public Dimension minimumLayoutSize (Container parent);\n-  public Dimension preferredLayoutSize (Container parent);\n-  public void removeLayoutComponent (Component comp);\n-}\n+\n+/**\n+  * Adds the specified component to the layout group.\n+  *\n+  * @param name The name of the component to add.\n+  * @param component The component to add.\n+  */\n+public abstract void\n+addLayoutComponent(String name, Component component);\n+\n+/*************************************************************************/\n+\n+/**\n+  * Removes the specified component from the layout group.\n+  *\n+  * @param component The component to remove.\n+  */\n+public abstract void\n+removeLayoutComponent(Component component);\n+\n+/*************************************************************************/\n+\n+/**\n+  * Calculates the preferred size for this container, taking into account\n+  * the components in the specified parent container.\n+  *\n+  * @param parent The parent container.\n+  *\n+  * @return The preferred dimensions of this container.\n+  */\n+public abstract Dimension\n+preferredLayoutSize(Container parent);\n+\n+/*************************************************************************/\n+\n+/**\n+  * Calculates the minimum size for this container, taking into account\n+  * the components in the specified parent container.\n+  *\n+  * @param parent The parent container.\n+  *\n+  * @return The minimum dimensions of this container.\n+  */\n+public abstract Dimension\n+minimumLayoutSize(Container parent);\n+\n+/*************************************************************************/\n+\n+/**\n+  * Lays out the components in this container on the specified parent\n+  * container.\n+  *\n+  * @param parent The parent container.\n+  */\n+public abstract void\n+layoutContainer(Container parent);\n+\n+} // interface LayoutManager\n+"}, {"sha": "3600ca3ccec48509853120a5840221669396e6e0", "filename": "libjava/java/awt/LayoutManager2.java", "status": "modified", "additions": 90, "deletions": 13, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1c7a5f3674c95c8fd27a557b24cebaee841faa/libjava%2Fjava%2Fawt%2FLayoutManager2.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1c7a5f3674c95c8fd27a557b24cebaee841faa/libjava%2Fjava%2Fawt%2FLayoutManager2.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FLayoutManager2.java?ref=0e1c7a5f3674c95c8fd27a557b24cebaee841faa", "patch": "@@ -1,20 +1,97 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* LayoutManager2.java -- Enhanced layout manager.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libjava.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-package java.awt;\n \n-/* Status:  Believed complete and correct. */\n+package java.awt;\n \n+/**\n+  * Layout manager for laying out containers based on contraints.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n public interface LayoutManager2 extends LayoutManager\n {\n-  public void addLayoutComponent (Component comp, Object constraints);\n-  public float getLayoutAlignmentX (Container target);\n-  public float getLayoutAlignmentY (Container target);\n-  public void invalidateLayout (Container target);\n-  public Dimension maximumLayoutSize (Container target);\n-}\n+\n+/**\n+  * Adds the specified component to the layout, with the specified\n+  * constraint object.\n+  *\n+  * @param component The component to add.\n+  * @param constraint The constraint object.\n+  */\n+public abstract void\n+addLayoutComponent(Component component, Object contraint);\n+\n+/*************************************************************************/\n+\n+/**\n+  * Determines the minimum size of the specified target container.\n+  *\n+  * @param target The target container.\n+  */\n+public abstract Dimension\n+maximumLayoutSize(Container target);\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the preferred X axis alignment for the specified target\n+  * container.  This value will range from 0 to 1 where 0 is alignment \n+  * closest to the origin, 0.5 is centered, and 1 is aligned furthest \n+  * from the origin.\n+  *\n+  * @param target The target container.\n+  */\n+public abstract float\n+getLayoutAlignmentX(Container target);\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the preferred Y axis alignment for the specified target\n+  * container.  This value will range from 0 to 1 where 0 is alignment \n+  * closest to the origin, 0.5 is centered, and 1 is aligned furthest \n+  * from the origin.\n+  *\n+  * @param target The target container.\n+  */\n+public abstract float\n+getLayoutAlignmentY(Container target);\n+\n+/*************************************************************************/\n+\n+/**\n+  * Forces the layout manager to purge any cached information about\n+  * the layout of the target container.  This will force it to be\n+  * recalculated.\n+  *\n+  * @param target The target container.\n+  */\n+public abstract void\n+invalidateLayout(Container target);\n+\n+} // interface LayoutManager2 \n+"}]}