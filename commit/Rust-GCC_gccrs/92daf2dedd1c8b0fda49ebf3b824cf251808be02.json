{"sha": "92daf2dedd1c8b0fda49ebf3b824cf251808be02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJkYWYyZGVkZDFjOGIwZmRhNDllYmYzYjgyNGNmMjUxODA4YmUwMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-01-13T15:53:07Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-01-13T15:53:07Z"}, "message": "Add string_view support to COW std::string\n\n\tPR libstdc++/79075\n\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI] (basic_string):\n\tMake _If_sv private.\n\t[!_GLIBCXX_USE_CXX11_ABI] (basic_string): Add member functions taking\n\tbasic_string_view arguments.\n\nFrom-SVN: r244445", "tree": {"sha": "dc889949022bb073a172eaf2cb02b87f52e84083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc889949022bb073a172eaf2cb02b87f52e84083"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92daf2dedd1c8b0fda49ebf3b824cf251808be02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92daf2dedd1c8b0fda49ebf3b824cf251808be02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92daf2dedd1c8b0fda49ebf3b824cf251808be02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92daf2dedd1c8b0fda49ebf3b824cf251808be02/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c9560a578a06125cb30458a26605f91feb29b0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c9560a578a06125cb30458a26605f91feb29b0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c9560a578a06125cb30458a26605f91feb29b0d"}], "stats": {"total": 336, "additions": 330, "deletions": 6}, "files": [{"sha": "969e6e9c6c96b3475e527b762c59d75d94a8d96f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92daf2dedd1c8b0fda49ebf3b824cf251808be02/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92daf2dedd1c8b0fda49ebf3b824cf251808be02/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=92daf2dedd1c8b0fda49ebf3b824cf251808be02", "patch": "@@ -1,5 +1,11 @@\n 2017-01-13  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/79075\n+\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI] (basic_string):\n+\tMake _If_sv private.\n+\t[!_GLIBCXX_USE_CXX11_ABI] (basic_string): Add member functions taking\n+\tbasic_string_view arguments.\n+\n \tPR libstdc++/79075\n \t* testsuite/lib/libstdc++.exp (check_v3_target_filesystem_ts): Remove\n \tredundant option from cxxflags."}, {"sha": "9dffcf946945471de210e541d55a00dfbf6c38a0", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 324, "deletions": 6, "changes": 330, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92daf2dedd1c8b0fda49ebf3b824cf251808be02/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92daf2dedd1c8b0fda49ebf3b824cf251808be02/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=92daf2dedd1c8b0fda49ebf3b824cf251808be02", "patch": "@@ -111,6 +111,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       // A helper type for avoiding boiler-plate.\n       typedef basic_string_view<_CharT, _Traits> __sv_type;\n+\n+      template<typename _Tp, typename _Res>\n+\tusing _If_sv = enable_if_t<\n+\t  __and_<is_convertible<const _Tp&, __sv_type>,\n+\t\t __not_<is_convertible<const _Tp&, const _CharT*>>>::value,\n+\t  _Res>;\n #endif\n \n       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html\n@@ -585,12 +591,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t{ _M_construct(__beg, __end); }\n \n #if __cplusplus > 201402L\n-      template<typename _Tp, typename _Res>\n-\tusing _If_sv = enable_if_t<\n-\t  __and_<is_convertible<const _Tp&, __sv_type>,\n-\t\t __not_<is_convertible<const _Tp&, const _CharT*>>>::value,\n-\t  _Res>;\n-\n       /**\n        *  @brief  Construct string from a substring of a string_view.\n        *  @param  __t   Source string view.\n@@ -3320,6 +3320,17 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       _S_empty_rep() _GLIBCXX_NOEXCEPT\n       { return _Rep::_S_empty_rep(); }\n \n+#if __cplusplus > 201402L\n+      // A helper type for avoiding boiler-plate.\n+      typedef basic_string_view<_CharT, _Traits> __sv_type;\n+\n+      template<typename _Tp, typename _Res>\n+\tusing _If_sv = enable_if_t<\n+\t  __and_<is_convertible<const _Tp&, __sv_type>,\n+\t\t __not_<is_convertible<const _Tp&, const _CharT*>>>::value,\n+\t  _Res>;\n+#endif\n+\n     public:\n       // Construct/copy/destroy:\n       // NB: We overload ctors in some cases instead of using default\n@@ -3441,6 +3452,29 @@ _GLIBCXX_END_NAMESPACE_CXX11\n         basic_string(_InputIterator __beg, _InputIterator __end,\n \t\t     const _Alloc& __a = _Alloc());\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Construct string from a substring of a string_view.\n+       *  @param  __t   Source string view.\n+       *  @param  __pos The index of the first character to copy from __t.\n+       *  @param  __n   The number of characters to copy from __t.\n+       *  @param  __a   Allocator to use.\n+       */\n+      template<typename _Tp, typename = _If_sv<_Tp, void>>\n+\tbasic_string(const _Tp& __t, size_type __pos, size_type __n,\n+\t\t     const _Alloc& __a = _Alloc())\n+\t: basic_string(__sv_type(__t).substr(__pos, __n), __a) { }\n+\n+      /**\n+       *  @brief  Construct string from a string_view.\n+       *  @param  __sv  Source string view.\n+       *  @param  __a  Allocator to use (default is default allocator).\n+       */\n+      explicit\n+      basic_string(__sv_type __sv, const _Alloc& __a = _Alloc())\n+      : basic_string(__sv.data(), __sv.size(), __a) { }\n+#endif // C++17\n+\n       /**\n        *  @brief  Destroy the string instance.\n        */\n@@ -3506,6 +3540,23 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       }\n #endif // C++11\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Set value to string constructed from a string_view.\n+       *  @param  __sv  A string_view.\n+       */\n+      basic_string&\n+      operator=(__sv_type __sv)\n+      { return this->assign(__sv); }\n+\n+      /**\n+       *  @brief  Convert to a string_view.\n+       *  @return A string_view.\n+       */\n+      operator __sv_type() const noexcept\n+      { return __sv_type(data(), size()); }\n+#endif // C++17\n+\n       // Iterators:\n       /**\n        *  Returns a read/write iterator that points to the first character in\n@@ -3910,6 +3961,17 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       { return this->append(__l.begin(), __l.size()); }\n #endif // C++11\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Append a string_view.\n+       *  @param __sv  The string_view to be appended.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string&\n+      operator+=(__sv_type __sv)\n+      { return this->append(__sv); }\n+#endif // C++17\n+\n       /**\n        *  @brief  Append a string to this string.\n        *  @param __str  The string to append.\n@@ -3990,6 +4052,34 @@ _GLIBCXX_END_NAMESPACE_CXX11\n         append(_InputIterator __first, _InputIterator __last)\n         { return this->replace(_M_iend(), _M_iend(), __first, __last); }\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Append a string_view.\n+       *  @param __sv  The string_view to be appended.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string&\n+      append(__sv_type __sv)\n+      { return this->append(__sv.data(), __sv.size()); }\n+\n+      /**\n+       *  @brief  Append a range of characters from a string_view.\n+       *  @param __sv  The string_view to be appended from.\n+       *  @param __pos The position in the string_view to append from.\n+       *  @param __n   The number of characters to append from the string_view.\n+       *  @return  Reference to this string.\n+       */\n+      template <typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\tappend(const _Tp& __svt, size_type __pos, size_type __n = npos)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return append(__sv.data()\n+\t\t\t+ __sv._M_check(__pos, \"basic_string::append\"),\n+\t\t\t__sv._M_limit(__pos, __n));\n+\t}\n+#endif // C++17\n+\n       /**\n        *  @brief  Append a single character.\n        *  @param __c  Character to append.\n@@ -4115,6 +4205,34 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       { return this->assign(__l.begin(), __l.size()); }\n #endif // C++11\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Set value from a string_view.\n+       *  @param __sv  The source string_view.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string&\n+      assign(__sv_type __sv)\n+      { return this->assign(__sv.data(), __sv.size()); }\n+\n+      /**\n+       *  @brief  Set value from a range of characters in a string_view.\n+       *  @param __sv  The source string_view.\n+       *  @param __pos  The position in the string_view to assign from.\n+       *  @param __n  The number of characters to assign.\n+       *  @return  Reference to this string.\n+       */\n+      template <typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\tassign(const _Tp& __svt, size_type __pos, size_type __n = npos)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return assign(__sv.data()\n+\t\t\t+ __sv._M_check(__pos, \"basic_string::assign\"),\n+\t\t\t__sv._M_limit(__pos, __n));\n+\t}\n+#endif // C++17\n+\n       /**\n        *  @brief  Insert multiple characters.\n        *  @param __p  Iterator referencing location in string to insert at.\n@@ -4290,6 +4408,38 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \treturn iterator(_M_data() + __pos);\n       }\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Insert a string_view.\n+       *  @param __pos  Iterator referencing position in string to insert at.\n+       *  @param __sv   The string_view to insert.\n+       *  @return  Reference to this string.\n+      */\n+      basic_string&\n+      insert(size_type __pos, __sv_type __sv)\n+      { return this->insert(__pos, __sv.data(), __sv.size()); }\n+\n+      /**\n+       *  @brief  Insert a string_view.\n+       *  @param __pos  Iterator referencing position in string to insert at.\n+       *  @param __sv   The string_view to insert from.\n+       *  @param __pos  Iterator referencing position in string_view to insert\n+       *  from.\n+       *  @param __n    The number of characters to insert.\n+       *  @return  Reference to this string.\n+      */\n+      template <typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\tinsert(size_type __pos1, const _Tp& __svt,\n+\t       size_type __pos2, size_type __n = npos)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->replace(__pos1, size_type(0), __sv.data()\n+\t\t\t       + __sv._M_check(__pos2, \"basic_string::insert\"),\n+\t\t\t       __sv._M_limit(__pos2, __n));\n+\t}\n+#endif // C++17\n+\n       /**\n        *  @brief  Remove characters.\n        *  @param __pos  Index of first character to remove (default 0).\n@@ -4644,6 +4794,52 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }\n #endif // C++11\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Replace range of characters with string_view.\n+       *  @param __pos  The position to replace at.\n+       *  @param __n    The number of characters to replace.\n+       *  @param __sv  The string_view to insert.\n+       *  @return  Reference to this string.\n+      */\n+      basic_string&\n+      replace(size_type __pos, size_type __n, __sv_type __sv)\n+      { return this->replace(__pos, __n, __sv.data(), __sv.size()); }\n+\n+      /**\n+       *  @brief  Replace range of characters with string_view.\n+       *  @param __pos1  The position to replace at.\n+       *  @param __n1    The number of characters to replace.\n+       *  @param __sv    The string_view to insert from.\n+       *  @param __pos2  The position in the string_view to insert from.\n+       *  @param __n2    The number of characters to insert.\n+       *  @return  Reference to this string.\n+      */\n+      template <typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\treplace(size_type __pos1, size_type __n1, const _Tp& __svt,\n+\t\tsize_type __pos2, size_type __n2 = npos)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->replace(__pos1, __n1, __sv.data()\n+\t\t\t       + __sv._M_check(__pos2, \"basic_string::replace\"),\n+\t\t\t       __sv._M_limit(__pos2, __n2));\n+\t}\n+\n+      /**\n+       *  @brief  Replace range of characters with string_view.\n+       *  @param __i1    An iterator referencing the start position\n+          to replace at.\n+       *  @param __i2    An iterator referencing the end position\n+          for the replace.\n+       *  @param __sv    The string_view to insert from.\n+       *  @return  Reference to this string.\n+      */\n+      basic_string&\n+      replace(const_iterator __i1, const_iterator __i2, __sv_type __sv)\n+      { return this->replace(__i1 - begin(), __i2 - __i1, __sv); }\n+#endif // C++17\n+\n     private:\n       template<class _Integer>\n \tbasic_string&\n@@ -4843,6 +5039,18 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       size_type\n       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Find position of a string_view.\n+       *  @param __sv  The string_view to locate.\n+       *  @param __pos  Index of character to search from (default 0).\n+       *  @return  Index of start of first occurrence.\n+      */\n+      size_type\n+      find(__sv_type __sv, size_type __pos = 0) const noexcept\n+      { return this->find(__sv.data(), __pos, __sv.size()); }\n+#endif // C++17\n+\n       /**\n        *  @brief  Find last position of a string.\n        *  @param __str  String to locate.\n@@ -4904,6 +5112,18 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       size_type\n       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Find last position of a string_view.\n+       *  @param __sv   The string_view to locate.\n+       *  @param __pos  Index of character to search back from (default end).\n+       *  @return  Index of start of last occurrence.\n+      */\n+      size_type\n+      rfind(__sv_type __sv, size_type __pos = npos) const noexcept\n+      { return this->rfind(__sv.data(), __pos, __sv.size()); }\n+#endif // C++17\n+\n       /**\n        *  @brief  Find position of a character of string.\n        *  @param __str  String containing characters to locate.\n@@ -4970,6 +5190,18 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n       { return this->find(__c, __pos); }\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Find position of a character of a string_view.\n+       *  @param __sv   A string_view containing characters to locate.\n+       *  @param __pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+      */\n+      size_type\n+      find_first_of(__sv_type __sv, size_type __pos = 0) const noexcept\n+      { return this->find_first_of(__sv.data(), __pos, __sv.size()); }\n+#endif // C++17\n+\n       /**\n        *  @brief  Find last position of a character of string.\n        *  @param __str  String containing characters to locate.\n@@ -5036,6 +5268,18 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT\n       { return this->rfind(__c, __pos); }\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Find last position of a character of string.\n+       *  @param __sv   A string_view containing characters to locate.\n+       *  @param __pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n+      */\n+      size_type\n+      find_last_of(__sv_type __sv, size_type __pos = npos) const noexcept\n+      { return this->find_last_of(__sv.data(), __pos, __sv.size()); }\n+#endif // C++17\n+\n       /**\n        *  @brief  Find position of a character not in string.\n        *  @param __str  String containing characters to avoid.\n@@ -5099,6 +5343,18 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       find_first_not_of(_CharT __c, size_type __pos = 0) const\n       _GLIBCXX_NOEXCEPT;\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Find position of a character not in a string_view.\n+       *  @param __sv   A string_view containing characters to avoid.\n+       *  @param __pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       */\n+      size_type\n+      find_first_not_of(__sv_type __sv, size_type __pos = 0) const noexcept\n+      { return this->find_first_not_of(__sv.data(), __pos, __sv.size()); }\n+#endif // C++17\n+\n       /**\n        *  @brief  Find last position of a character not in string.\n        *  @param __str  String containing characters to avoid.\n@@ -5163,6 +5419,18 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       find_last_not_of(_CharT __c, size_type __pos = npos) const\n       _GLIBCXX_NOEXCEPT;\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Find last position of a character not in a string_view.\n+       *  @param __sv   A string_view containing characters to avoid.\n+       *  @param __pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n+       */\n+      size_type\n+      find_last_not_of(__sv_type __sv, size_type __pos = npos) const noexcept\n+      { return this->find_last_not_of(__sv.data(), __pos, __sv.size()); }\n+#endif // C++17\n+\n       /**\n        *  @brief  Get a substring.\n        *  @param __pos  Index of first character (default 0).\n@@ -5207,6 +5475,56 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \treturn __r;\n       }\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Compare to a string_view.\n+       *  @param __sv  A string_view to compare against.\n+       *  @return  Integer < 0, 0, or > 0.\n+       */\n+      int\n+      compare(__sv_type __sv) const\n+      {\n+\tconst size_type __size = this->size();\n+\tconst size_type __osize = __sv.size();\n+\tconst size_type __len = std::min(__size, __osize);\n+\n+\tint __r = traits_type::compare(_M_data(), __sv.data(), __len);\n+\tif (!__r)\n+\t  __r = _S_compare(__size, __osize);\n+\treturn __r;\n+      }\n+\n+      /**\n+       *  @brief  Compare to a string_view.\n+       *  @param __pos  A position in the string to start comparing from.\n+       *  @param __n  The number of characters to compare.\n+       *  @param __sv   A string_view to compare against.\n+       *  @return  Integer < 0, 0, or > 0.\n+       */\n+      int\n+      compare(size_type __pos, size_type __n, __sv_type __sv) const\n+      { return __sv_type(*this).substr(__pos, __n).compare(__sv); }\n+\n+      /**\n+       *  @brief  Compare to a string_view.\n+       *  @param __pos1  A position in the string to start comparing from.\n+       *  @param __n1  The number of characters to compare.\n+       *  @param __sv   A string_view to compare against.\n+       *  @param __pos2  A position in the string_view to start comparing from.\n+       *  @param __n2  The number of characters to compare.\n+       *  @return  Integer < 0, 0, or > 0.\n+       */\n+      template <typename _Tp>\n+\t_If_sv<_Tp, int>\n+\tcompare(size_type __pos1, size_type __n1, const _Tp& __svt,\n+\t\tsize_type __pos2, size_type __n2 = npos) const\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return __sv_type(*this)\n+\t    .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));\n+\t}\n+#endif // C++17\n+\n       /**\n        *  @brief  Compare substring to a string.\n        *  @param __pos  Index of first character of substring."}]}