{"sha": "82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJjMmUzZDQ0YWU3YjQ1NzE3ZTBkZDUzOWJkMDk3ZmY4Y2Q0YWI3OQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-10-21T14:22:43Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-10-21T14:22:43Z"}, "message": "re PR libstdc++/9858 (Extra virtual functions in ctype<char>)\n\n\n2003-10-21  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/9858\n\t* include/bits/locale_facets.h (ctype<char>): Remove\n\t__ctype_abstract_base.\n\t(ctype<char>::do_is): Remove.\n\t(ctype<char>::do_scan_is): Remove.\n\t* src/ctype.cc: Same. Inline the rest.\n\t* testsuite/22_locale/ctype/is/char/9858.cc: New.\n\t* config/os/aix/ctype_noninline.h: Adjust ctor.\n\t* config/os/bsd/freebsd/ctype_noninline.h: Same.\n\t* config/os/bsd/netbsd/ctype_noninline.h: Same.\n\t* config/os/djgpp/ctype_noninline.h: Same.\n\t* config/os/generic/ctype_noninline.h: Same.\n\t* config/os/gnu-linux/ctype_noninline.h: Same.\n\t* config/os/hpux/ctype_noninline.h: Same.\n\t* config/os/irix/irix5.2/ctype_noninline.h: Same.\n\t* config/os/irix/irix6.5/ctype_noninline.h: Same.\n\t* config/os/mingw32/ctype_noninline.h: Same.\n\t* config/os/newlib/ctype_noninline.h: Same.\n\t* config/os/qnx/qnx6.1/ctype_noninline.h: Same.\n\t* config/os/solaris/solaris2.5/ctype_noninline.h: Same.\n\t* config/os/solaris/solaris2.6/ctype_noninline.h: Same.\n\t* config/os/solaris/solaris2.7/ctype_noninline.h: Same.\n\t* config/os/windiss/ctype_noninline.h: Same.\n\nFrom-SVN: r72753", "tree": {"sha": "8ff4a374d842eb745d82065e48a40dca0a3db714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ff4a374d842eb745d82065e48a40dca0a3db714"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/comments", "author": null, "committer": null, "parents": [{"sha": "54b98a47dd95dfdc4f2ee8d66542baf044434599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54b98a47dd95dfdc4f2ee8d66542baf044434599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54b98a47dd95dfdc4f2ee8d66542baf044434599"}], "stats": {"total": 340, "additions": 229, "deletions": 111}, "files": [{"sha": "14522c8149ca94af75941b5c311230e0c7d7d7de", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -1,3 +1,29 @@\n+2003-10-21  Benjamin Kosnik  <bkoz@redhat.com>\n+ \n+\tPR libstdc++/9858\n+\t* include/bits/locale_facets.h (ctype<char>): Remove\n+\t__ctype_abstract_base.\n+\t(ctype<char>::do_is): Remove.\n+\t(ctype<char>::do_scan_is): Remove.\n+\t* src/ctype.cc: Same. Inline the rest.\n+\t* testsuite/22_locale/ctype/is/char/9858.cc: New.\n+\t* config/os/aix/ctype_noninline.h: Adjust ctor.\n+\t* config/os/bsd/freebsd/ctype_noninline.h: Same.\n+\t* config/os/bsd/netbsd/ctype_noninline.h: Same.\n+\t* config/os/djgpp/ctype_noninline.h: Same.\n+\t* config/os/generic/ctype_noninline.h: Same.\n+\t* config/os/gnu-linux/ctype_noninline.h: Same.\n+\t* config/os/hpux/ctype_noninline.h: Same.\n+\t* config/os/irix/irix5.2/ctype_noninline.h: Same.\n+\t* config/os/irix/irix6.5/ctype_noninline.h: Same.\n+\t* config/os/mingw32/ctype_noninline.h: Same.\n+\t* config/os/newlib/ctype_noninline.h: Same.\n+\t* config/os/qnx/qnx6.1/ctype_noninline.h: Same.\n+\t* config/os/solaris/solaris2.5/ctype_noninline.h: Same.\n+\t* config/os/solaris/solaris2.6/ctype_noninline.h: Same.\n+\t* config/os/solaris/solaris2.7/ctype_noninline.h: Same.\n+\t* config/os/windiss/ctype_noninline.h: Same.\n+\n 2003-10-21  Paolo Carlini  <pcarlini@suse.de>\n \n \t* src/locale.cc: Tweak a comment."}, {"sha": "78fce2ef176a17b7f715698c005efe43c4477b60", "filename": "libstdc++-v3/config/os/aix/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_noninline.h?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -39,13 +39,13 @@\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n \t\t     size_t __refs)\n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del),\n+  : facet(__refs), _M_del(__table != 0 && __del),\n   _M_toupper(NULL), _M_tolower(NULL),\n   _M_table(__table ? __table : classic_table())\n   { }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del),\n+  : facet(__refs), _M_del(__table != 0 && __del),\n   _M_toupper(NULL), _M_tolower(NULL),\n   _M_table(__table ? __table : classic_table())\n   { }"}, {"sha": "27cd28c082eb41bc20b66f91a2af881a36a64b83", "filename": "libstdc++-v3/config/os/bsd/freebsd/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_noninline.h?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -39,13 +39,13 @@\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table()) \n   { }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table()) \n   { }"}, {"sha": "0cc08aef248de497e6ac2fc9b4b4f09d9eaa4e91", "filename": "libstdc++-v3/config/os/bsd/netbsd/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_noninline.h?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -41,13 +41,13 @@\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table())\n   { }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table())\n   { }"}, {"sha": "848f5e2bde7806f88c4a6bf71224ad73ad48d212", "filename": "libstdc++-v3/config/os/djgpp/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_noninline.h?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -39,13 +39,13 @@\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__dj_ctype_toupper), _M_tolower(__dj_ctype_tolower),\n   _M_table(__table ? __table : __dj_ctype_flags)  \n   { }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__dj_ctype_toupper), _M_tolower(__dj_ctype_tolower),\n   _M_table(__table ? __table : __dj_ctype_flags)  \n   { }"}, {"sha": "92e1173ed6721baae4f74fc1e75344412176d2c7", "filename": "libstdc++-v3/config/os/generic/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_noninline.h?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -40,13 +40,13 @@\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table()) \n   { }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table())\n   { }"}, {"sha": "8d38627f7bdf4e17b64c2b3ba3c85ab44c735226", "filename": "libstdc++-v3/config/os/gnu-linux/ctype_noninline.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -59,7 +59,7 @@\n #if _GLIBCXX_C_LOCALE_GNU\n   ctype<char>::ctype(__c_locale __cloc, const mask* __table, bool __del, \n \t\t     size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del)\n+  : facet(__refs), _M_del(__table != 0 && __del)\n   {\n     _M_c_locale_ctype = _S_clone_c_locale(__cloc);\n     _M_toupper = _M_c_locale_ctype->__ctype_toupper;\n@@ -69,7 +69,7 @@\n #else\n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del)\n+  : facet(__refs), _M_del(__table != 0 && __del)\n   {\n     char* __old=strdup(setlocale(LC_CTYPE, NULL));\n     setlocale(LC_CTYPE, \"C\");\n@@ -89,17 +89,17 @@\n #endif\n \n #if _GLIBCXX_C_LOCALE_GNU\n-  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) : \n-  __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del)\n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n+  : facet(__refs), _M_del(__table != 0 && __del)\n   {\n     _M_c_locale_ctype = _S_get_c_locale(); \n     _M_toupper = _M_c_locale_ctype->__ctype_toupper;\n     _M_tolower = _M_c_locale_ctype->__ctype_tolower;\n     _M_table = __table ? __table : _M_c_locale_ctype->__ctype_b;\n   }\n #else\n-  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) : \n-  __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del)\n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del)\n   {\n     char* __old=strdup(setlocale(LC_CTYPE, NULL));\n     setlocale(LC_CTYPE, \"C\");"}, {"sha": "c42fd8a49eeece27876b832c70de58dc221bc141", "filename": "libstdc++-v3/config/os/hpux/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_noninline.h?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -40,13 +40,13 @@\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : (const mask *) __SB_masks) \n   { }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : (const mask *) __SB_masks) \n   { }"}, {"sha": "2268a9b9e2c2bc108f970416724aab95ef255113", "filename": "libstdc++-v3/config/os/irix/irix5.2/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fctype_noninline.h?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -40,13 +40,13 @@\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs)\n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(!__table ? classic_table() : __table)\n   { }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(!__table ? classic_table() : __table)\n   { }"}, {"sha": "c0e6e56d51529b5f37a5f2dd049dfd8b25a05ed5", "filename": "libstdc++-v3/config/os/irix/irix6.5/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_noninline.h?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -39,14 +39,14 @@\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs)\n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(!__table ? \n \t   (const mask*) (__libc_attr._ctype_tbl->_class + 1) : __table) \n   { }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(!__table ? \n \t   (const mask*) (__libc_attr._ctype_tbl->_class + 1) : __table) "}, {"sha": "4ea7b892cca774aebbc02cc6648813060f77a951", "filename": "libstdc++-v3/config/os/mingw32/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_noninline.h?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -43,13 +43,13 @@\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL),\n   _M_table(__table ? __table : classic_table())  \n   { }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL),\n   _M_table(__table ? __table : classic_table()) \n   { }"}, {"sha": "7c5f053528a1db45cfd5b44e8106aaa98417375d", "filename": "libstdc++-v3/config/os/newlib/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_noninline.h?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -39,13 +39,13 @@\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table()) \n   { }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table()) \n   { }"}, {"sha": "f4e2ca5f6c686e19082338169824d7482b882b5b", "filename": "libstdc++-v3/config/os/qnx/qnx6.1/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_noninline.h?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -39,12 +39,12 @@\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), _M_table(__table ? __table : _Ctype)\n   { }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), _M_table(__table ? __table : _Ctype)\n   { }\n "}, {"sha": "25eec3418b0ccf7d42b168c12b0c01ba04da4a7a", "filename": "libstdc++-v3/config/os/solaris/solaris2.5/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fctype_noninline.h?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -39,13 +39,13 @@\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table()) \n   { }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table()) \n   { }"}, {"sha": "659c81a3ffe4b71f3a64002691f4824c3f7dce31", "filename": "libstdc++-v3/config/os/solaris/solaris2.6/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fctype_noninline.h?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -39,13 +39,13 @@\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__trans_upper), _M_tolower(__trans_lower), \n   _M_table(__table ? __table : classic_table()) \n   { }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__trans_upper), _M_tolower(__trans_lower), \n   _M_table(__table ? __table : classic_table()) \n   { }"}, {"sha": "81536b5fc8777d0ba2ccad439fd15ab77908f005", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_noninline.h?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -40,13 +40,13 @@\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs)\n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n   _M_table(__table ? __table : classic_table()) \n   { }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n   _M_table(__table ? __table : classic_table()) \n   { }"}, {"sha": "a22b65d46d0bc42784bcb64c83a70408a9d01049", "filename": "libstdc++-v3/config/os/windiss/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fctype_noninline.h?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -40,13 +40,13 @@\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table == 0 ? classic_table() : __table) \n   { }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table == 0 ? classic_table() : __table) \n   { }"}, {"sha": "13383d8d36f4af805e4e3f16a8fd4b483a7b9161", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 48, "deletions": 19, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -334,7 +334,7 @@ namespace std\n \n   // 22.2.1.3  ctype<char> specialization.\n   template<>\n-    class ctype<char> : public __ctype_abstract_base<char>\n+    class ctype<char> : public locale::facet, public ctype_base\n     {\n     public:\n       // Types:\n@@ -371,6 +371,39 @@ namespace std\n       inline const char*\n       scan_not(mask __m, const char* __lo, const char* __hi) const;\n      \n+      char_type \n+      toupper(char_type __c) const\n+      { return this->do_toupper(__c); }\n+\n+      const char_type*\n+      toupper(char_type *__lo, const char_type* __hi) const\n+      { return this->do_toupper(__lo, __hi); }\n+\n+      char_type \n+      tolower(char_type __c) const\n+      { return this->do_tolower(__c); }\n+\n+      const char_type*\n+      tolower(char_type* __lo, const char_type* __hi) const\n+      { return this->do_tolower(__lo, __hi); }\n+\n+      char_type \n+      widen(char __c) const\n+      { return this->do_widen(__c); }\n+\n+      const char*\n+      widen(const char* __lo, const char* __hi, char_type* __to) const\n+      { return this->do_widen(__lo, __hi, __to); }\n+\n+      char \n+      narrow(char_type __c, char __dfault) const\n+      { return this->do_narrow(__c, __dfault); }\n+\n+      const char_type*\n+      narrow(const char_type* __lo, const char_type* __hi,\n+\t      char __dfault, char *__to) const\n+      { return this->do_narrow(__lo, __hi, __dfault, __to); }\n+\n     protected:\n       const mask* \n       table() const throw()\n@@ -382,19 +415,6 @@ namespace std\n       virtual \n       ~ctype();\n \n-      virtual bool \n-      do_is(mask __m, char_type __c) const;\n-\n-      virtual const char_type*\n-      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;\n-\n-      virtual const char_type*\n-      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;\n-\n-      virtual const char_type*\n-      do_scan_not(mask __m, const char_type* __lo, \n-\t\t  const char_type* __hi) const;\n-\n       virtual char_type \n       do_toupper(char_type) const;\n \n@@ -408,17 +428,27 @@ namespace std\n       do_tolower(char_type* __lo, const char_type* __hi) const;\n       \n       virtual char_type \n-      do_widen(char) const;\n+      do_widen(char __c) const\n+      { return __c; }\n \n       virtual const char*\n-      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;\n+      do_widen(const char* __lo, const char* __hi, char_type* __dest) const\n+      {\n+\tmemcpy(__dest, __lo, __hi - __lo);\n+\treturn __hi;\n+      }\n \n       virtual char \n-      do_narrow(char_type, char __dfault) const;\n+      do_narrow(char_type __c, char) const\n+      { return __c; }\n \n       virtual const char_type*\n       do_narrow(const char_type* __lo, const char_type* __hi,\n-\t\tchar __dfault, char* __dest) const;\n+\t\tchar, char* __dest) const\n+      {\n+\tmemcpy(__dest, __lo, __hi - __lo);\n+\treturn __hi;\n+      }\n     };\n  \n   template<>\n@@ -492,7 +522,6 @@ namespace std\n       virtual const char_type*\n       do_narrow(const char_type* __lo, const char_type* __hi,\n \t\tchar __dfault, char* __dest) const;\n-\n     };\n \n   template<>"}, {"sha": "e97d39dfe1cbaac44df5fb2f771866a5b2dc926a", "filename": "libstdc++-v3/src/ctype.cc", "status": "modified", "additions": 16, "deletions": 56, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -30,10 +30,18 @@\n \n namespace std \n {\n-  // XXX At some point, just rename this file to ctype_members_char.cc\n-  // and compile it as a separate file instead of including it here.\n-  // Platform-specific initialization code for ctype tables.\n-  #include <bits/ctype_noninline.h>\n+  // Definitions for static const data members of ctype_base.\n+  const ctype_base::mask ctype_base::space;\n+  const ctype_base::mask ctype_base::print;\n+  const ctype_base::mask ctype_base::cntrl;\n+  const ctype_base::mask ctype_base::upper;\n+  const ctype_base::mask ctype_base::lower;\n+  const ctype_base::mask ctype_base::alpha;\n+  const ctype_base::mask ctype_base::digit;\n+  const ctype_base::mask ctype_base::punct;\n+  const ctype_base::mask ctype_base::xdigit;\n+  const ctype_base::mask ctype_base::alnum;\n+  const ctype_base::mask ctype_base::graph;\n \n   // Definitions for locale::id of standard facets that are specialized.\n   locale::id ctype<char>::id;\n@@ -62,18 +70,10 @@ namespace std\n     }\n #endif\n \n-  // Definitions for static const data members of ctype_base.\n-  const ctype_base::mask ctype_base::space;\n-  const ctype_base::mask ctype_base::print;\n-  const ctype_base::mask ctype_base::cntrl;\n-  const ctype_base::mask ctype_base::upper;\n-  const ctype_base::mask ctype_base::lower;\n-  const ctype_base::mask ctype_base::alpha;\n-  const ctype_base::mask ctype_base::digit;\n-  const ctype_base::mask ctype_base::punct;\n-  const ctype_base::mask ctype_base::xdigit;\n-  const ctype_base::mask ctype_base::alnum;\n-  const ctype_base::mask ctype_base::graph;\n+  // XXX At some point, just rename this file to ctype_configure_char.cc\n+  // and compile it as a separate file instead of including it here.\n+  // Platform-specific initialization code for ctype tables.\n+  #include <bits/ctype_noninline.h>\n \n   const size_t ctype<char>::table_size;\n \n@@ -84,46 +84,6 @@ namespace std\n       delete[] this->table(); \n   }\n \n-  // These are dummy placeholders as these virtual functions are never called.\n-  bool \n-  ctype<char>::do_is(mask, char_type) const \n-  { return false; }\n-  \n-  const char*\n-  ctype<char>::do_is(const char_type* __c, const char_type*, mask*) const \n-  { return __c; }\n-  \n-  const char*\n-  ctype<char>::do_scan_is(mask, const char_type* __c, const char_type*) const \n-  { return __c; }\n-\n-  const char* \n-  ctype<char>::do_scan_not(mask, const char_type* __c, const char_type*) const\n-  { return __c; }\n-\n-  char\n-  ctype<char>::do_widen(char __c) const\n-  { return __c; }\n-  \n-  const char* \n-  ctype<char>::do_widen(const char* __lo, const char* __hi, char* __dest) const\n-  {\n-    memcpy(__dest, __lo, __hi - __lo);\n-    return __hi;\n-  }\n-  \n-  char\n-  ctype<char>::do_narrow(char __c, char /*__dfault*/) const\n-  { return __c; }\n-  \n-  const char* \n-  ctype<char>::do_narrow(const char* __lo, const char* __hi, \n-\t\t\t char /*__dfault*/, char* __dest) const\n-  {\n-    memcpy(__dest, __lo, __hi - __lo);\n-    return __hi;\n-  }\n-\n #ifdef _GLIBCXX_USE_WCHAR_T\n   ctype<wchar_t>::ctype(size_t __refs) \n   : __ctype_abstract_base<wchar_t>(__refs)"}, {"sha": "e7482255d48516edf2ce8363f097e5b9abc73337", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/char/9858.cc", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F9858.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F9858.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F9858.cc?ref=82c2e3d44ae7b45717e0dd539bd097ff8cd4ab79", "patch": "@@ -0,0 +1,103 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 22.2.1.3 - ctype specializations [lib.facet.ctype.special]\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+int called;\n+\n+class Derived : public std::ctype<char>\n+{\n+public:\n+  bool \n+  do_is(mask, char_type) const { return true; }\n+\n+  const char_type* \n+  do_is(const char_type* lo, const char_type* hi, mask* vec) const \n+  { return hi; }\n+\n+  const char_type* \n+  do_scan_is(mask m, const char_type* lo, const char_type* hi) const \n+  { return hi; }\n+\n+  const char_type* \n+  do_scan_not(mask m, const char_type* lo, const char_type* hi) const \n+  { return hi; }\n+};\n+\n+class Derived2 : public Derived\n+{\n+public:\n+  bool \n+  do_is(mask, char_type) const { called = 1; return true; }\n+\n+  const char_type* \n+  do_is(const char_type* lo, const char_type* hi, mask* vec) const \n+  { called = 5; return hi; }\n+\n+  const char_type* \n+  do_scan_is(mask m, const char_type* lo, const char_type* hi) const \n+  { called = 10; return hi; }\n+\n+  const char_type* \n+  do_scan_not(mask m, const char_type* lo, const char_type* hi) const \n+  { called = 15; return hi; }\n+};\n+\n+int main()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+  Derived2 d2;\n+  const Derived& dr = d2;\n+\n+  const char* lit = \"jaylib champion sound\";\n+  ctype_base::mask m00 = static_cast<std::ctype_base::mask>(0);\n+  ctype_base::mask vec[5];\n+  for (std::size_t i = 0; i < 5; ++i)\n+    vec[i] = m00;\n+ \n+  called = 0;\n+  dr.do_is(ctype_base::space, 'a');\n+  VERIFY( called !=  1);\n+\n+  called = 0;\n+  dr.do_is(lit, lit + 5, vec);\n+  VERIFY( called !=  5);\n+\n+  called = 0;\n+  dr.do_scan_is(ctype_base::space, lit, lit + 5);\n+  VERIFY( called !=  10);\n+\n+  called = 0;\n+  dr.do_scan_not(ctype_base::space, lit, lit + 5);\n+  VERIFY( called !=  15);\n+  \n+  return 0;\n+}"}]}