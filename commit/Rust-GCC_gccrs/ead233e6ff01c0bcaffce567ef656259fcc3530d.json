{"sha": "ead233e6ff01c0bcaffce567ef656259fcc3530d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFkMjMzZTZmZjAxYzBiY2FmZmNlNTY3ZWY2NTYyNTlmY2MzNTMwZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-10T15:41:01Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-10T21:05:29Z"}, "message": "Remove call to gcc_unreachable in range-op.cc\n\nThe Ada testcase happens to stumble on the call to gcc_unreachable in\noperator_bitwise_xor::op1_range, but there is nothing wrong going on\nand it's safe to let it go through.\n\ngcc/\n\t* range-op.cc (get_bool_state): Adjust head comment.\n\t(operator_not_equal::op1_range): Fix comment.\n\t(operator_bitwise_xor::op1_range): Remove call to gcc_unreachable.\ngcc/testsuite/\n\t* gnat.dg/specs/opt5.ads: New test.\n\t* gnat.dg/specs/opt5_pkg.ads: New helper.", "tree": {"sha": "a1a8df8c0f1bec9084baa4540a33b07d2b3cbfdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1a8df8c0f1bec9084baa4540a33b07d2b3cbfdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ead233e6ff01c0bcaffce567ef656259fcc3530d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ead233e6ff01c0bcaffce567ef656259fcc3530d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ead233e6ff01c0bcaffce567ef656259fcc3530d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ead233e6ff01c0bcaffce567ef656259fcc3530d/comments", "author": null, "committer": null, "parents": [{"sha": "151154a21da8b0784894b2463a117f4e283d5525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/151154a21da8b0784894b2463a117f4e283d5525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/151154a21da8b0784894b2463a117f4e283d5525"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "742e54686b4820d3923058d9c5c070df40cdfc35", "filename": "gcc/range-op.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead233e6ff01c0bcaffce567ef656259fcc3530d/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead233e6ff01c0bcaffce567ef656259fcc3530d/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=ead233e6ff01c0bcaffce567ef656259fcc3530d", "patch": "@@ -358,10 +358,8 @@ range_true_and_false (tree type)\n \n enum bool_range_state { BRS_FALSE, BRS_TRUE, BRS_EMPTY, BRS_FULL };\n \n-// Return the summary information about boolean range LHS.  Return an\n-// \"interesting\" range in R.  For EMPTY or FULL, return the equivalent\n-// range for TYPE, for BRS_TRUE and BRS false, return the negation of\n-// the bool range.\n+// Return the summary information about boolean range LHS.  If EMPTY/FULL,\n+// return the equivalent range for TYPE in R; if FALSE/TRUE, do nothing.\n \n static bool_range_state\n get_bool_state (irange &r, const irange &lhs, tree val_type)\n@@ -383,6 +381,7 @@ get_bool_state (irange &r, const irange &lhs, tree val_type)\n       r.set_varying (val_type);\n       return BRS_FULL;\n     }\n+\n   return BRS_TRUE;\n }\n \n@@ -538,7 +537,7 @@ operator_not_equal::op1_range (irange &r, tree type,\n       break;\n \n     case BRS_FALSE:\n-      // If its true, the result is the same as OP2.\n+      // If it's false, the result is the same as OP2.\n       r = op2;\n       break;\n \n@@ -2643,7 +2642,7 @@ operator_bitwise_xor::op1_range (irange &r, tree type,\n \t  r = op2;\n \t  break;\n \tdefault:\n-\t  gcc_unreachable ();\n+\t  break;\n \t}\n       return true;\n     }"}, {"sha": "09b8db54c56586033fbeadfa78fc1a0bb116bb28", "filename": "gcc/testsuite/gnat.dg/specs/opt5.ads", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead233e6ff01c0bcaffce567ef656259fcc3530d/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fopt5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead233e6ff01c0bcaffce567ef656259fcc3530d/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fopt5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fopt5.ads?ref=ead233e6ff01c0bcaffce567ef656259fcc3530d", "patch": "@@ -0,0 +1,25 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2 -gnata -gnatVa\" }\n+\n+with Opt5_Pkg;\n+\n+package Opt5 is\n+\n+  type Object is new Opt5_Pkg.Object with private;\n+\n+  Undefined : constant Object;\n+\n+  overriding function Is_Defined (Self : Object) return Boolean;\n+\n+  function Create (Sloc : Opt5_Pkg.Object) return Integer is (0)\n+    with Pre  => Sloc.Is_Defined;\n+\n+private\n+\n+  type Object is new Opt5_Pkg.Object with null record;\n+\n+  Undefined : constant Object := (Opt5_Pkg.Undefined with others => <>);\n+\n+  overriding function Is_Defined (Self : Object) return Boolean is (Self /= Undefined);\n+\n+end Opt5;"}, {"sha": "a549f08a72302e84301f41af96224e2b9acf49de", "filename": "gcc/testsuite/gnat.dg/specs/opt5_pkg.ads", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead233e6ff01c0bcaffce567ef656259fcc3530d/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fopt5_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead233e6ff01c0bcaffce567ef656259fcc3530d/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fopt5_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fopt5_pkg.ads?ref=ead233e6ff01c0bcaffce567ef656259fcc3530d", "patch": "@@ -0,0 +1,17 @@\n+package Opt5_Pkg is\n+\n+  type Object is tagged private;\n+\n+  Undefined : constant Object;\n+\n+  function Is_Defined (Self : Object) return Boolean;\n+\n+private\n+\n+  type Object is tagged null record;\n+\n+  Undefined : constant Object := (others => <>);\n+\n+  function Is_Defined (Self : Object) return Boolean is (Self /= Undefined);\n+\n+end Opt5_Pkg;"}]}