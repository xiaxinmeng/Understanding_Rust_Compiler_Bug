{"sha": "65791f426fc950b0af4e6e2ef675c213e623b16f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU3OTFmNDI2ZmM5NTBiMGFmNGU2ZTJlZjY3NWMyMTNlNjIzYjE2Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-12-01T08:17:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-12-01T08:17:06Z"}, "message": "re PR c/79153 (-Wimplicit-fallthrough missed warning)\n\n\tPR c/79153\n\t* tree.h (SWITCH_BREAK_LABEL_P): Define.\n\t* gimplify.c (collect_fallthrough_labels): Handle GIMPLE_BIND\n\tstarting with a GIMPLE_SWITCH and ending with GIMPLE_LABEL with\n\tSWITCH_BREAK_LABEL_P set on the label.\n\t(gimplify_switch_expr): Set SWITCH_BREAK_LABEL_P on the label\n\tadded for default case if it was missing and not all cases covered.\n\tWrap GIMPLE_SWITCH and the switch_body_seq into a GIMPLE_BIND if\n\tswitch_body_seq ends with a GIMPLE_LABEL with SWITCH_BREAK_LABEL_P\n\tset on the label.\n\t* tree-chrec.c (evolution_function_is_univariate_p): Add return true;\n\tto avoid -Wimplicit-fallthrough warning.\n\t* config/i386/i386.c (ix86_expand_special_args_builtin): Add\n\tFALLTHRU comment to avoid -Wimplicit-fallthrough warning.\nc/\n\t* c-parser.c: Include tree-iterator.h.\n\t(c_parser_switch_statement): Emit LABEL_EXPR for the break label\n\tinto SWITCH_BODY instead of after it and set SWITCH_BREAK_LABEL_P\n\ton it.\ncp/\n\t* cp-gimplify.c (genericize_switch_stmt): Emit LABEL_EXPR for the\n\tbreak label into SWITCH_BODY instead of after it and set\n\tSWITCH_BREAK_LABEL_P on it.\n\t* parser.c (cp_parser_objc_expression): Add FALLTHRU comment to avoid\n\t-Wimplicit-fallthrough warning.\nfortran/\n\t* match.c (gfc_match): Add FALLTHRU comment to avoid\n\t-Wimplicit-fallthrough warning.\ntestsuite/\n\t* c-c++-common/Wimplicit-fallthrough-7.c: Adjust expected warning\n\tline.\n\t* c-c++-common/Wimplicit-fallthrough-36.c: New test.\n\nFrom-SVN: r255298", "tree": {"sha": "ac4410022984e739592923e1b337810b9569c9aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac4410022984e739592923e1b337810b9569c9aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65791f426fc950b0af4e6e2ef675c213e623b16f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65791f426fc950b0af4e6e2ef675c213e623b16f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65791f426fc950b0af4e6e2ef675c213e623b16f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65791f426fc950b0af4e6e2ef675c213e623b16f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ac4b05631a3e93ab8630f82cf7e4763a46b8e69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac4b05631a3e93ab8630f82cf7e4763a46b8e69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ac4b05631a3e93ab8630f82cf7e4763a46b8e69"}], "stats": {"total": 196, "additions": 188, "deletions": 8}, "files": [{"sha": "bd2626e0213d970691014cbbfd1e6eeffea260bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65791f426fc950b0af4e6e2ef675c213e623b16f", "patch": "@@ -1,5 +1,20 @@\n 2017-12-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/79153\n+\t* tree.h (SWITCH_BREAK_LABEL_P): Define.\n+\t* gimplify.c (collect_fallthrough_labels): Handle GIMPLE_BIND\n+\tstarting with a GIMPLE_SWITCH and ending with GIMPLE_LABEL with\n+\tSWITCH_BREAK_LABEL_P set on the label.\n+\t(gimplify_switch_expr): Set SWITCH_BREAK_LABEL_P on the label\n+\tadded for default case if it was missing and not all cases covered.\n+\tWrap GIMPLE_SWITCH and the switch_body_seq into a GIMPLE_BIND if\n+\tswitch_body_seq ends with a GIMPLE_LABEL with SWITCH_BREAK_LABEL_P\n+\tset on the label.\n+\t* tree-chrec.c (evolution_function_is_univariate_p): Add return true;\n+\tto avoid -Wimplicit-fallthrough warning.\n+\t* config/i386/i386.c (ix86_expand_special_args_builtin): Add\n+\tFALLTHRU comment to avoid -Wimplicit-fallthrough warning.\n+\n \tPR tree-optimization/83221\n \t* tree-ssa-reassoc.c (sort_by_operand_rank): Shift bb_rank\n \tdown by 16."}, {"sha": "1fb0c3d0b7ff96baecfbc303604b895c4f8a02eb", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=65791f426fc950b0af4e6e2ef675c213e623b16f", "patch": "@@ -1,5 +1,11 @@\n 2017-12-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/79153\n+\t* c-parser.c: Include tree-iterator.h.\n+\t(c_parser_switch_statement): Emit LABEL_EXPR for the break label\n+\tinto SWITCH_BODY instead of after it and set SWITCH_BREAK_LABEL_P\n+\ton it.\n+\n \tPR c/83222\n \t* c-tree.h (decl_constant_value_1): Declare.\n \t* c-typeck.c (decl_constant_value_1): New function."}, {"sha": "e9267fe9cc107e84990235ed16a004cd022f0997", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=65791f426fc950b0af4e6e2ef675c213e623b16f", "patch": "@@ -67,6 +67,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"run-rtl-passes.h\"\n #include \"intl.h\"\n #include \"c-family/name-hint.h\"\n+#include \"tree-iterator.h\"\n \n /* We need to walk over decls with incomplete struct/union/enum types\n    after parsing the whole translation unit.\n@@ -5846,14 +5847,15 @@ c_parser_switch_statement (c_parser *parser, bool *if_p)\n   if (!open_brace_p && c_parser_peek_token (parser)->type != CPP_SEMICOLON)\n     warn_for_multistatement_macros (loc_after_labels, next_loc, switch_loc,\n \t\t\t\t    RID_SWITCH);\n-  c_finish_case (body, ce.original_type);\n   if (c_break_label)\n     {\n       location_t here = c_parser_peek_token (parser)->location;\n       tree t = build1 (LABEL_EXPR, void_type_node, c_break_label);\n       SET_EXPR_LOCATION (t, here);\n-      add_stmt (t);\n+      SWITCH_BREAK_LABEL_P (c_break_label) = 1;\n+      append_to_statement_list_force (t, &body);\n     }\n+  c_finish_case (body, ce.original_type);\n   c_break_label = save_break;\n   add_stmt (c_end_compound_stmt (switch_loc, block, flag_isoc99));\n   c_parser_maybe_reclassify_token (parser);"}, {"sha": "9f9db38c4b8f76b0a14ebd901bef578a7c88db62", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=65791f426fc950b0af4e6e2ef675c213e623b16f", "patch": "@@ -34987,6 +34987,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n \tdefault:\n \t  break;\n \t}\n+      /* FALLTHRU */\n     case V64QI_FTYPE_PCCHAR_V64QI_UDI:\n     case V32QI_FTYPE_PCCHAR_V32QI_USI:\n     case V16QI_FTYPE_PCCHAR_V16QI_UHI:"}, {"sha": "31b69bf725531e62bae070804c7015c620e37f9b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=65791f426fc950b0af4e6e2ef675c213e623b16f", "patch": "@@ -1,3 +1,12 @@\n+2017-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/79153\n+\t* cp-gimplify.c (genericize_switch_stmt): Emit LABEL_EXPR for the\n+\tbreak label into SWITCH_BODY instead of after it and set\n+\tSWITCH_BREAK_LABEL_P on it.\n+\t* parser.c (cp_parser_objc_expression): Add FALLTHRU comment to avoid\n+\t-Wimplicit-fallthrough warning.\n+\n 2017-11-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/82219 - bogus -Wignored-qualifiers with template"}, {"sha": "68a253a02db73f06ea98fac43c6c6d3aa2f43b08", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=65791f426fc950b0af4e6e2ef675c213e623b16f", "patch": "@@ -330,11 +330,13 @@ genericize_switch_stmt (tree *stmt_p, int *walk_subtrees, void *data)\n   cp_walk_tree (&type, cp_genericize_r, data, NULL);\n   *walk_subtrees = 0;\n \n+  if (TREE_USED (break_block))\n+    SWITCH_BREAK_LABEL_P (break_block) = 1;\n+  finish_bc_block (&body, bc_break, break_block);\n   *stmt_p = build2_loc (stmt_locus, SWITCH_EXPR, type, cond, body);\n   SWITCH_ALL_CASES_P (*stmt_p) = SWITCH_STMT_ALL_CASES_P (stmt);\n   gcc_checking_assert (!SWITCH_STMT_NO_BREAK_P (stmt)\n \t\t       || !TREE_USED (break_block));\n-  finish_bc_block (stmt_p, bc_break, break_block);\n }\n \n /* Genericize a CONTINUE_STMT node *STMT_P.  */"}, {"sha": "707c6f55605c065490c174252421142e528b8643", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=65791f426fc950b0af4e6e2ef675c213e623b16f", "patch": "@@ -29003,6 +29003,7 @@ cp_parser_objc_expression (cp_parser* parser)\n \tdefault:\n \t  break;\n \t}\n+      /* FALLTHRU */\n     default:\n       error_at (kwd->location,\n \t\t\"misplaced %<@%D%> Objective-C++ construct\","}, {"sha": "7154ac3c1efeb94f9cbdae251c77693f0b2c796e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=65791f426fc950b0af4e6e2ef675c213e623b16f", "patch": "@@ -1,3 +1,9 @@\n+2017-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/79153\n+\t* match.c (gfc_match): Add FALLTHRU comment to avoid\n+\t-Wimplicit-fallthrough warning.\n+\n 2017-12-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/83224"}, {"sha": "c437c853f71ba58633577d9ab1e730bd7507a15e", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=65791f426fc950b0af4e6e2ef675c213e623b16f", "patch": "@@ -1240,6 +1240,7 @@ gfc_match (const char *target, ...)\n \tdefault:\n \t  gfc_internal_error (\"gfc_match(): Bad match code %c\", c);\n \t}\n+      /* FALLTHRU */\n \n     default:\n "}, {"sha": "16a86ce70f04e2cb56787e91db045c613b6ebc46", "filename": "gcc/gimplify.c", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=65791f426fc950b0af4e6e2ef675c213e623b16f", "patch": "@@ -1897,6 +1897,27 @@ collect_fallthrough_labels (gimple_stmt_iterator *gsi_p,\n \n   do\n     {\n+      if (gimple_code (gsi_stmt (*gsi_p)) == GIMPLE_BIND)\n+\t{\n+\t  /* Recognize the special GIMPLE_BIND added by gimplify_switch_expr,\n+\t     which starts on a GIMPLE_SWITCH and ends with a break label.\n+\t     Handle that as a single statement that can fall through.  */\n+\t  gbind *bind = as_a <gbind *> (gsi_stmt (*gsi_p));\n+\t  gimple *first = gimple_seq_first_stmt (gimple_bind_body (bind));\n+\t  gimple *last = gimple_seq_last_stmt (gimple_bind_body (bind));\n+\t  if (last\n+\t      && gimple_code (first) == GIMPLE_SWITCH\n+\t      && gimple_code (last) == GIMPLE_LABEL)\n+\t    {\n+\t      tree label = gimple_label_label (as_a <glabel *> (last));\n+\t      if (SWITCH_BREAK_LABEL_P (label))\n+\t\t{\n+\t\t  prev = bind;\n+\t\t  gsi_next (gsi_p);\n+\t\t  continue;\n+\t\t}\n+\t    }\n+\t}\n       if (gimple_code (gsi_stmt (*gsi_p)) == GIMPLE_BIND\n \t  || gimple_code (gsi_stmt (*gsi_p)) == GIMPLE_TRY)\n \t{\n@@ -2315,21 +2336,54 @@ gimplify_switch_expr (tree *expr_p, gimple_seq *pre_p)\n       preprocess_case_label_vec_for_gimple (labels, index_type,\n \t\t\t\t\t    &default_case);\n \n+      bool add_bind = false;\n       if (!default_case)\n \t{\n \t  glabel *new_default;\n \n \t  default_case\n \t    = build_case_label (NULL_TREE, NULL_TREE,\n \t\t\t\tcreate_artificial_label (UNKNOWN_LOCATION));\n+\t  if (old_in_switch_expr)\n+\t    {\n+\t      SWITCH_BREAK_LABEL_P (CASE_LABEL (default_case)) = 1;\n+\t      add_bind = true;\n+\t    }\n \t  new_default = gimple_build_label (CASE_LABEL (default_case));\n \t  gimplify_seq_add_stmt (&switch_body_seq, new_default);\n \t}\n+      else if (old_in_switch_expr)\n+\t{\n+\t  gimple *last = gimple_seq_last_stmt (switch_body_seq);\n+\t  if (last && gimple_code (last) == GIMPLE_LABEL)\n+\t    {\n+\t      tree label = gimple_label_label (as_a <glabel *> (last));\n+\t      if (SWITCH_BREAK_LABEL_P (label))\n+\t\tadd_bind = true;\n+\t    }\n+\t}\n \n       switch_stmt = gimple_build_switch (SWITCH_COND (switch_expr),\n-\t\t\t\t\t   default_case, labels);\n-      gimplify_seq_add_stmt (pre_p, switch_stmt);\n-      gimplify_seq_add_seq (pre_p, switch_body_seq);\n+\t\t\t\t\t default_case, labels);\n+      /* For the benefit of -Wimplicit-fallthrough, if switch_body_seq\n+\t ends with a GIMPLE_LABEL holding SWITCH_BREAK_LABEL_P LABEL_DECL,\n+\t wrap the GIMPLE_SWITCH up to that GIMPLE_LABEL into a GIMPLE_BIND,\n+\t so that we can easily find the start and end of the switch\n+\t statement.  */\n+      if (add_bind)\n+\t{\n+\t  gimple_seq bind_body = NULL;\n+\t  gimplify_seq_add_stmt (&bind_body, switch_stmt);\n+\t  gimple_seq_add_seq (&bind_body, switch_body_seq);\n+\t  gbind *bind = gimple_build_bind (NULL_TREE, bind_body, NULL_TREE);\n+\t  gimple_set_location (bind, EXPR_LOCATION (switch_expr));\n+\t  gimplify_seq_add_stmt (pre_p, bind);\n+\t}\n+      else\n+\t{\n+\t  gimplify_seq_add_stmt (pre_p, switch_stmt);\n+\t  gimplify_seq_add_seq (pre_p, switch_body_seq);\n+\t}\n       labels.release ();\n     }\n   else"}, {"sha": "ea2f2c7764b60b2f31d93b6301cc2080118ade2d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65791f426fc950b0af4e6e2ef675c213e623b16f", "patch": "@@ -1,5 +1,10 @@\n 2017-12-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/79153\n+\t* c-c++-common/Wimplicit-fallthrough-7.c: Adjust expected warning\n+\tline.\n+\t* c-c++-common/Wimplicit-fallthrough-36.c: New test.\n+\n \tPR sanitizer/81275\n \t* c-c++-common/tsan/pr81275.c: Remove dg-skip-if.\n "}, {"sha": "1821e48b92869df50267f003f8e51d5938246029", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-36.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-36.c?ref=65791f426fc950b0af4e6e2ef675c213e623b16f", "patch": "@@ -0,0 +1,72 @@\n+/* PR c/79153 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wimplicit-fallthrough\" } */\n+\n+int\n+test (int v1, int v2)\n+{\n+  switch (v1)\n+    {\n+    case 3:\n+      switch (v2)\t/* { dg-warning \"this statement may fall through\" } */\n+\t{\n+\tcase 1:\n+\t  return 28;\n+\tcase 2:\n+\t  return 38;\n+\tcase 3:\n+\t  return 88;\n+\tdefault:\n+\t  break;\n+\t}\n+    case 4:\t\t/* { dg-message \"here\" } */\n+      return 168;\n+    case 5:\n+      switch (v2)\t/* { dg-warning \"this statement may fall through\" } */\n+\t{\n+\tcase 4:\n+\t  break;\n+\tcase 5:\n+\t  return 38;\n+\tcase 6:\n+\t  return 88;\n+\t}\n+    case 6:\t\t/* { dg-message \"here\" } */\n+      return 169;\n+    case 7:\n+      switch (v2)\t/* { dg-warning \"this statement may fall through\" } */\n+\t{\n+\tcase 7:\n+\t  return 38;\n+\tcase 8:\n+\t  return 88;\n+\t}\n+    case 8:\t\t/* { dg-message \"here\" } */\n+      return 170;\n+    case 9:\n+      switch (v2)\t/* { dg-bogus \"this statement may fall through\" } */\n+\t{\n+\tcase 9:\n+\t  return 38;\n+\tcase 10:\n+\t  return 88;\n+\tdefault:\n+\t  return 89;\n+\t}\n+    case 10:\n+      return 171;\n+    case 11:\n+      switch (v2)\t/* { dg-bogus \"this statement may fall through\" } */\n+\t{\n+\tcase -__INT_MAX__ - 1 ... 31:\n+\t  return 38;\n+\tcase 32:\n+\t  return 88;\n+\tcase 33 ... __INT_MAX__:\n+\t  return 89;\n+\t}\n+    case 12:\n+      return 172;\n+    }\n+  return -1;\n+}"}, {"sha": "a602216fa730f977edcfd9ef36000a9812d614ba", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-7.c?ref=65791f426fc950b0af4e6e2ef675c213e623b16f", "patch": "@@ -51,9 +51,9 @@ f (int i)\n     {\n     case 1:\n       {\n-\tswitch (i + 2)\n+\tswitch (i + 2) /* { dg-warning \"statement may fall through\" } */\n \t  case 4:\n-\t    bar (1); /* { dg-warning \"statement may fall through\" } */\n+\t    bar (1);\n \t  case 5:\n \t    bar (5);\n \t    return;"}, {"sha": "9c14374e93a98def48178b31ec7fe75ab7f7c55b", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=65791f426fc950b0af4e6e2ef675c213e623b16f", "patch": "@@ -1161,6 +1161,7 @@ evolution_function_is_univariate_p (const_tree chrec)\n \t    return false;\n \t  break;\n \t}\n+      return true;\n \n     default:\n       return true;"}, {"sha": "e5a37afcce84a6d524243c22f1d2343c64484f42", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65791f426fc950b0af4e6e2ef675c213e623b16f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=65791f426fc950b0af4e6e2ef675c213e623b16f", "patch": "@@ -766,6 +766,11 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define FALLTHROUGH_LABEL_P(NODE) \\\n   (LABEL_DECL_CHECK (NODE)->base.private_flag)\n \n+/* Set on the artificial label created for break; stmt from a switch.\n+   This is used to implement -Wimplicit-fallthrough.  */\n+#define SWITCH_BREAK_LABEL_P(NODE) \\\n+  (LABEL_DECL_CHECK (NODE)->base.protected_flag)\n+\n /* Nonzero means this expression is volatile in the C sense:\n    its address should be of type `volatile WHATEVER *'.\n    In other words, the declared item is volatile qualified."}]}