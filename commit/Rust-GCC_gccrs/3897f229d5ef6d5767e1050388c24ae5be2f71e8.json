{"sha": "3897f229d5ef6d5767e1050388c24ae5be2f71e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg5N2YyMjlkNWVmNmQ1NzY3ZTEwNTAzODhjMjRhZTViZTJmNzFlOA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-01-09T20:03:58Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-01-09T20:03:58Z"}, "message": "re PR c/11234 (-pedantic accepts function pointer <-> void*)\n\n\tPR c/11234\n\t* c-typeck.c (build_c_cast): If pedantic, warn for conversions\n\tbetween function and object pointers.\n\t(digest_init): When comparing a pointer to function type to the\n\ttarget type, only apply TREE_TYPE once to the pointer to function\n\ttype.\n\t* except.c (for_each_eh_label_1): Treat data as a pointer to a\n\tfunction pointer rather than casting it to a function pointer.\n\t(for_each_eh_label): Update caller.\n\t* recog.h (struct insn_data): Use a struct or union for output.\n\t* genoutput.c (output_insn_data): Update.\n\t* final.c (get_insn_template): Update.\n\ntestsuite:\n\t* gcc.dg/func-ptr-conv-1.c: New test.\n\t* gcc.dg/weak/weak-6.c, gcc.dg/weak/weak-7.c: Update.\n\nFrom-SVN: r75595", "tree": {"sha": "48c28794b46861cbc9594568abc9b07c1a04b91e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48c28794b46861cbc9594568abc9b07c1a04b91e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3897f229d5ef6d5767e1050388c24ae5be2f71e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3897f229d5ef6d5767e1050388c24ae5be2f71e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3897f229d5ef6d5767e1050388c24ae5be2f71e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3897f229d5ef6d5767e1050388c24ae5be2f71e8/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fab64a344486770d0acc827ab6b670543d58a15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fab64a344486770d0acc827ab6b670543d58a15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fab64a344486770d0acc827ab6b670543d58a15"}], "stats": {"total": 169, "additions": 152, "deletions": 17}, "files": [{"sha": "89e7a2230e5855d344aa2c4f360844b2fedf6c4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3897f229d5ef6d5767e1050388c24ae5be2f71e8", "patch": "@@ -1,3 +1,18 @@\n+2004-01-09  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/11234\n+\t* c-typeck.c (build_c_cast): If pedantic, warn for conversions\n+\tbetween function and object pointers.\n+\t(digest_init): When comparing a pointer to function type to the\n+\ttarget type, only apply TREE_TYPE once to the pointer to function\n+\ttype.\n+\t* except.c (for_each_eh_label_1): Treat data as a pointer to a\n+\tfunction pointer rather than casting it to a function pointer.\n+\t(for_each_eh_label): Update caller.\n+\t* recog.h (struct insn_data): Use a struct or union for output.\n+\t* genoutput.c (output_insn_data): Update.\n+\t* final.c (get_insn_template): Update.\n+\n 2004-01-09  Mark Mitchell  <mark@codesourcery.com>\n \n \t* expr.h (expand_expr): Make it a macro, not a function."}, {"sha": "ec00801a824df32ca17210e8d75a4b3f24ea2771", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=3897f229d5ef6d5767e1050388c24ae5be2f71e8", "patch": "@@ -3125,6 +3125,25 @@ build_c_cast (tree type, tree expr)\n \t    warning (\"dereferencing type-punned pointer will break strict-aliasing rules\");\n \t}\n \n+      /* If pedantic, warn for conversions between function and object\n+\t pointer types, except for converting a null pointer constant\n+\t to function pointer type.  */\n+      if (pedantic\n+\t  && TREE_CODE (type) == POINTER_TYPE\n+\t  && TREE_CODE (otype) == POINTER_TYPE\n+\t  && TREE_CODE (TREE_TYPE (otype)) == FUNCTION_TYPE\n+\t  && TREE_CODE (TREE_TYPE (type)) != FUNCTION_TYPE)\n+\tpedwarn (\"ISO C forbids conversion of function pointer to object pointer type\");\n+\n+      if (pedantic\n+\t  && TREE_CODE (type) == POINTER_TYPE\n+\t  && TREE_CODE (otype) == POINTER_TYPE\n+\t  && TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE\n+\t  && TREE_CODE (TREE_TYPE (otype)) != FUNCTION_TYPE\n+\t  && !(integer_zerop (value) && TREE_TYPE (otype) == void_type_node\n+\t       && TREE_CODE (expr) != NOP_EXPR))\n+\tpedwarn (\"ISO C forbids conversion of object pointer to function pointer type\");\n+\n       ovalue = value;\n       /* Replace a nonvolatile const static variable with its value.  */\n       if (optimize && TREE_CODE (value) == VAR_DECL)\n@@ -4088,9 +4107,12 @@ digest_init (tree type, tree init, int require_constant)\n \t  || (code == VECTOR_TYPE\n \t      && comptypes (TREE_TYPE (inside_init), type, COMPARE_STRICT))\n \t  || (code == POINTER_TYPE\n-\t      && (TREE_CODE (TREE_TYPE (inside_init)) == ARRAY_TYPE\n-\t\t  || TREE_CODE (TREE_TYPE (inside_init)) == FUNCTION_TYPE)\n+\t      && TREE_CODE (TREE_TYPE (inside_init)) == ARRAY_TYPE\n \t      && comptypes (TREE_TYPE (TREE_TYPE (inside_init)),\n+\t\t\t    TREE_TYPE (type), COMPARE_STRICT))\n+\t  || (code == POINTER_TYPE\n+\t      && TREE_CODE (TREE_TYPE (inside_init)) == FUNCTION_TYPE\n+\t      && comptypes (TREE_TYPE (inside_init),\n \t\t\t    TREE_TYPE (type), COMPARE_STRICT))))\n     {\n       if (code == POINTER_TYPE)"}, {"sha": "1468d3b909f7dfa879e3a4b0ec9fa54481219f0f", "filename": "gcc/except.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=3897f229d5ef6d5767e1050388c24ae5be2f71e8", "patch": "@@ -1,6 +1,6 @@\n /* Implements exception handling.\n    Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Mike Stump <mrs@cygnus.com>.\n \n This file is part of GCC.\n@@ -2430,14 +2430,14 @@ void\n for_each_eh_label (void (*callback) (rtx))\n {\n   htab_traverse (cfun->eh->exception_handler_label_map, for_each_eh_label_1,\n-\t\t (void *)callback);\n+\t\t (void *) &callback);\n }\n \n static int\n for_each_eh_label_1 (void **pentry, void *data)\n {\n   struct ehl_map_entry *entry = *(struct ehl_map_entry **)pentry;\n-  void (*callback) (rtx) = (void (*) (rtx)) data;\n+  void (*callback) (rtx) = *(void (**) (rtx)) data;\n \n   (*callback) (entry->label);\n   return 1;"}, {"sha": "fbbff317d5e51d4187de4f06f2fa02ce0db54168", "filename": "gcc/final.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=3897f229d5ef6d5767e1050388c24ae5be2f71e8", "patch": "@@ -1,6 +1,6 @@\n /* Convert RTL to assembler code and output it, for GNU compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,\n-   1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   1998, 1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1591,17 +1591,16 @@ final (rtx first, FILE *file, int optimize, int prescan)\n const char *\n get_insn_template (int code, rtx insn)\n {\n-  const void *output = insn_data[code].output;\n   switch (insn_data[code].output_format)\n     {\n     case INSN_OUTPUT_FORMAT_SINGLE:\n-      return (const char *) output;\n+      return insn_data[code].output.single;\n     case INSN_OUTPUT_FORMAT_MULTI:\n-      return ((const char *const *) output)[which_alternative];\n+      return insn_data[code].output.multi[which_alternative];\n     case INSN_OUTPUT_FORMAT_FUNCTION:\n       if (insn == NULL)\n \tabort ();\n-      return (*(insn_output_fn) output) (recog_data.operand, insn);\n+      return (*insn_data[code].output.function) (recog_data.operand, insn);\n \n     default:\n       abort ();"}, {"sha": "9e27b276d0cc9376461f1dd8fefd33a3e297ec86", "filename": "gcc/genoutput.c", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=3897f229d5ef6d5767e1050388c24ae5be2f71e8", "patch": "@@ -1,6 +1,6 @@\n /* Generate code from to output assembler insns as recognized from rtl.\n    Copyright (C) 1987, 1988, 1992, 1994, 1995, 1997, 1998, 1999, 2000, 2002,\n-   2003 Free Software Foundation, Inc.\n+   2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -286,6 +286,7 @@ output_insn_data (void)\n \tbreak;\n       }\n \n+  printf (\"#if GCC_VERSION >= 2007\\n__extension__\\n#endif\\n\");\n   printf (\"\\nconst struct insn_data insn_data[] = \\n{\\n\");\n \n   for (d = idata; d; d = d->next)\n@@ -322,13 +323,22 @@ output_insn_data (void)\n       switch (d->output_format)\n \t{\n \tcase INSN_OUTPUT_FORMAT_NONE:\n-\t  printf (\"    0,\\n\");\n+\t  printf (\"#if HAVE_DESIGNATED_INITIALIZERS\\n\");\n+\t  printf (\"    { 0 },\\n\");\n+\t  printf (\"#else\\n\");\n+\t  printf (\"    { 0, 0, 0 },\\n\");\n+\t  printf (\"#endif\\n\");\n \t  break;\n \tcase INSN_OUTPUT_FORMAT_SINGLE:\n \t  {\n \t    const char *p = d->template;\n \t    char prev = 0;\n \n+\t    printf (\"#if HAVE_DESIGNATED_INITIALIZERS\\n\");\n+\t    printf (\"    { .single =\\n\");\n+\t    printf (\"#else\\n\");\n+\t    printf (\"    {\\n\");\n+\t    printf (\"#endif\\n\");\n \t    printf (\"    \\\"\");\n \t    while (*p)\n \t      {\n@@ -345,11 +355,26 @@ output_insn_data (void)\n \t\t++p;\n \t      }\n \t    printf (\"\\\",\\n\");\n+\t    printf (\"#if HAVE_DESIGNATED_INITIALIZERS\\n\");\n+\t    printf (\"    },\\n\");\n+\t    printf (\"#else\\n\");\n+\t    printf (\"    0, 0 },\\n\");\n+\t    printf (\"#endif\\n\");\n \t  }\n \t  break;\n \tcase INSN_OUTPUT_FORMAT_MULTI:\n+\t  printf (\"#if HAVE_DESIGNATED_INITIALIZERS\\n\");\n+\t  printf (\"    { .multi = output_%d },\\n\", d->code_number);\n+\t  printf (\"#else\\n\");\n+\t  printf (\"    { 0, output_%d, 0 },\\n\", d->code_number);\n+\t  printf (\"#endif\\n\");\n+\t  break;\n \tcase INSN_OUTPUT_FORMAT_FUNCTION:\n-\t  printf (\"    (const void *) output_%d,\\n\", d->code_number);\n+\t  printf (\"#if HAVE_DESIGNATED_INITIALIZERS\\n\");\n+\t  printf (\"    { .function = output_%d },\\n\", d->code_number);\n+\t  printf (\"#else\\n\");\n+\t  printf (\"    { 0, 0, output_%d },\\n\", d->code_number);\n+\t  printf (\"#endif\\n\");\n \t  break;\n \tdefault:\n \t  abort ();"}, {"sha": "a36c89655e611726134c47a1802e576cec3e402f", "filename": "gcc/recog.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=3897f229d5ef6d5767e1050388c24ae5be2f71e8", "patch": "@@ -1,5 +1,5 @@\n /* Declarations for interface to insn recognizer and insn-output.c.\n-   Copyright (C) 1987, 1996, 1997, 1998, 1999, 2000, 2001, 2003\n+   Copyright (C) 1987, 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -238,7 +238,19 @@ struct insn_operand_data\n struct insn_data\n {\n   const char *const name;\n-  const void *output;\n+#if HAVE_DESIGNATED_INITIALIZERS\n+  union {\n+    const char *single;\n+    const char *const *multi;\n+    insn_output_fn function;\n+  } output;\n+#else\n+  struct {\n+    const char *single;\n+    const char *const *multi;\n+    insn_output_fn function;\n+  } output;\n+#endif\n   const insn_gen_fn genfun;\n   const struct insn_operand_data *const operand;\n "}, {"sha": "fa4e007f374c62888b590a5198763f53ad3a6620", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3897f229d5ef6d5767e1050388c24ae5be2f71e8", "patch": "@@ -1,3 +1,9 @@\n+2004-01-09  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/11234\n+\t* gcc.dg/func-ptr-conv-1.c: New test.\n+\t* gcc.dg/weak/weak-6.c, gcc.dg/weak/weak-7.c: Update.\n+\n 2004-01-09  Kazu Hirata  <kazu@cs.umass.edu>\n \n \tPR target/13380."}, {"sha": "4e42e5fe11734e98fab9e94d9aaed52882561eca", "filename": "gcc/testsuite/gcc.dg/func-ptr-conv-1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-ptr-conv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-ptr-conv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-ptr-conv-1.c?ref=3897f229d5ef6d5767e1050388c24ae5be2f71e8", "patch": "@@ -0,0 +1,56 @@\n+/* Conversions between function and object pointers are not permitted\n+   in any version of ISO C, even with casts, except for the special\n+   case of converting a null pointer constant to function pointer\n+   type.  Likewise, comparisons between function and object pointers\n+   are not permitted.  PR c/11234.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic\" } */\n+\n+void f(void);\n+\n+void *v1 = f; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+void *v2 = &f; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+void *v3 = (void *)f; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+void *v4 = (void *)&f; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+void *v5;\n+char *c1 = f; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+char *c2 = &f; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+char *c3 = (char *)f; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+char *c4 = (char *)&f; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+char *c5;\n+void (*fp)(void);\n+int a;\n+\n+void\n+g(void)\n+{\n+  v5 = f; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+  v5 = &f; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+  v5 = (void *)f; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+  v5 = (void *)&f; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+  c5 = f; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+  c5 = &f; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+  c5 = (char *)f; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+  c5 = (char *)&f; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+  fp = v5; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+  fp = c5; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+  fp = (void (*)(void))v5; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+  fp = (void (*)(void))c5; /* { dg-warning \"pointer\" \"bad conversion\" } */\n+  (a ? f : v3); /* { dg-warning \"pointer\" \"bad conversion\" } */\n+  (a ? v2 : fp); /* { dg-warning \"pointer\" \"bad conversion\" } */\n+  /* The following are OK.  */\n+  fp = 0;\n+  fp = (void *)0;\n+  fp = 0L;\n+  fp = (void (*)(void))0;\n+  fp = (void (*)(void))(void *)0;\n+  (a ? f : 0);\n+  (a ? f : (void *)0);\n+  (a ? (void *)0 : fp);\n+  (a ? 0 : fp);\n+}\n+\n+/* The following are OK.  */\n+void (*fp2)(void) = 0;\n+void (*fp3)(void) = (void *)0;"}, {"sha": "711003ccd03756064ebcba6130ea8d639494fdc5", "filename": "gcc/testsuite/gcc.dg/weak/weak-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-6.c?ref=3897f229d5ef6d5767e1050388c24ae5be2f71e8", "patch": "@@ -3,5 +3,5 @@\n \n extern void * foo (void);\n void * foo (void) { return (void *)foo; } /* { dg-error \"precede\" } */\n-\n+/* { dg-error \"function pointer\" \"pointer conversion\" { target *-*-* } 5 } */\n #pragma weak foo"}, {"sha": "7c4a4dc7c2583739dc2437acc1503fb4e1123532", "filename": "gcc/testsuite/gcc.dg/weak/weak-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3897f229d5ef6d5767e1050388c24ae5be2f71e8/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-7.c?ref=3897f229d5ef6d5767e1050388c24ae5be2f71e8", "patch": "@@ -3,5 +3,5 @@\n \n extern void * foo (void);\n void * foo (void) { return (void *)foo; } /* { dg-error \"precede\" } */\n-\n+/* { dg-error \"function pointer\" \"pointer conversion\" { target *-*-* } 5 } */\n extern void * foo (void) __attribute__((weak));"}]}