{"sha": "35f1e9f475d9be3da62e99c2891e0abdbfd444a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVmMWU5ZjQ3NWQ5YmUzZGE2MmU5OWMyODkxZTBhYmRiZmQ0NDRhNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-10-16T14:23:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-10-16T14:23:22Z"}, "message": "re PR lto/41715 (VIEW_CONVERT_EXPR use for mismatched prevailing decl replacement doesn't work)\n\n2009-10-16  Richard Guenther  <rguenther@suse.de>\n\n\tPR lto/41715\n\t* lto-streamer-in.c (lto_input_tree_ref): Revert last change.\n\t(maybe_fixup_handled_component): New function.\n\t(input_gimple_stmt): Fixup mismatched decl replacements.\n\n\tlto/\n\t* lto.c (lto_fixup_tree): Revert last change.\n\n\t* gfortran.dg/lto/20091015-1_0.f: New testcase.\n\t* gfortran.dg/lto/20091015-1_1.f: Likewise.\n\t* gfortran.dg/lto/20091015-1_2.f: Likewise.\n\nFrom-SVN: r152903", "tree": {"sha": "b59fd862e5f5467dd7d8678ebbe405ecdd5ffe82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b59fd862e5f5467dd7d8678ebbe405ecdd5ffe82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35f1e9f475d9be3da62e99c2891e0abdbfd444a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35f1e9f475d9be3da62e99c2891e0abdbfd444a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35f1e9f475d9be3da62e99c2891e0abdbfd444a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35f1e9f475d9be3da62e99c2891e0abdbfd444a4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "775dc6700b6711e1c4ba07194d3464388ee06db3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/775dc6700b6711e1c4ba07194d3464388ee06db3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/775dc6700b6711e1c4ba07194d3464388ee06db3"}], "stats": {"total": 183, "additions": 164, "deletions": 19}, "files": [{"sha": "3377560960aab186292858ff031f3263d6d6199d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f1e9f475d9be3da62e99c2891e0abdbfd444a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f1e9f475d9be3da62e99c2891e0abdbfd444a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35f1e9f475d9be3da62e99c2891e0abdbfd444a4", "patch": "@@ -1,3 +1,10 @@\n+2009-10-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/41715\n+\t* lto-streamer-in.c (lto_input_tree_ref): Revert last change.\n+\t(maybe_fixup_handled_component): New function.\n+\t(input_gimple_stmt): Fixup mismatched decl replacements.\n+\n 2009-10-16  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/41713"}, {"sha": "71faf0f39f65e4314dfb35d12c74854edb530f70", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 127, "deletions": 10, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f1e9f475d9be3da62e99c2891e0abdbfd444a4/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f1e9f475d9be3da62e99c2891e0abdbfd444a4/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=35f1e9f475d9be3da62e99c2891e0abdbfd444a4", "patch": "@@ -353,16 +353,7 @@ lto_input_tree_ref (struct lto_input_block *ib, struct data_in *data_in,\n       ix_u = lto_input_uleb128 (ib);\n       result = lto_file_decl_data_get_var_decl (data_in->file_data, ix_u);\n       if (tag == LTO_global_decl_ref)\n-\t{\n-\t  if (TREE_CODE (result) == VIEW_CONVERT_EXPR)\n-\t    {\n-\t      tree decl = TREE_OPERAND (result, 0);\n-\t      varpool_mark_needed_node (varpool_node (decl));\n-\t      result = build1 (VIEW_CONVERT_EXPR, TREE_TYPE (result), decl);\n-\t    }\n-\t  else\n-\t    varpool_mark_needed_node (varpool_node (result));\n-\t}\n+\tvarpool_mark_needed_node (varpool_node (result));\n       break;\n \n     default:\n@@ -877,6 +868,128 @@ input_ssa_names (struct lto_input_block *ib, struct data_in *data_in,\n }\n \n \n+/* Fixup the reference tree OP for replaced VAR_DECLs with mismatched\n+   types.  */\n+\n+static void\n+maybe_fixup_handled_component (tree op)\n+{\n+  tree decl_type;\n+  tree wanted_type;\n+\n+  while (handled_component_p (TREE_OPERAND (op, 0)))\n+    op = TREE_OPERAND (op, 0);\n+  if (TREE_CODE (TREE_OPERAND (op, 0)) != VAR_DECL)\n+    return;\n+\n+  decl_type = TREE_TYPE (TREE_OPERAND (op, 0));\n+\n+  switch (TREE_CODE (op))\n+    {\n+    case COMPONENT_REF:\n+      /* The DECL_CONTEXT of the field-decl is the record type we look for.  */\n+      wanted_type = DECL_CONTEXT (TREE_OPERAND (op, 1));\n+      break;\n+\n+    case ARRAY_REF:\n+      if (TREE_CODE (decl_type) == ARRAY_TYPE\n+\t  && (TREE_TYPE (decl_type) == TREE_TYPE (op)\n+\t      || useless_type_conversion_p (TREE_TYPE (op),\n+\t\t\t\t\t    TREE_TYPE (decl_type))))\n+\treturn;\n+      /* An unknown size array type should be ok.  But we do not\n+         lower the lower bound in all cases - ugh.  */\n+      wanted_type = build_array_type (TREE_TYPE (op), NULL_TREE);\n+      break;\n+\n+    case ARRAY_RANGE_REF:\n+      if (TREE_CODE (decl_type) == ARRAY_TYPE\n+\t  && (TREE_TYPE (decl_type) == TREE_TYPE (TREE_TYPE (op))\n+\t      || useless_type_conversion_p (TREE_TYPE (TREE_TYPE (op)),\n+\t\t\t\t\t    TREE_TYPE (decl_type))))\n+\treturn;\n+      /* An unknown size array type should be ok.  But we do not\n+         lower the lower bound in all cases - ugh.  */\n+      wanted_type = build_array_type (TREE_TYPE (TREE_TYPE (op)), NULL_TREE);\n+      break;\n+\n+    case BIT_FIELD_REF:\n+    case VIEW_CONVERT_EXPR:\n+      /* Very nice - nothing to do.  */\n+      return;\n+\n+    case REALPART_EXPR:\n+    case IMAGPART_EXPR:\n+      if (TREE_CODE (decl_type) == COMPLEX_TYPE\n+\t  && (TREE_TYPE (decl_type) == TREE_TYPE (op)\n+\t      || useless_type_conversion_p (TREE_TYPE (op),\n+\t\t\t\t\t    TREE_TYPE (decl_type))))\n+\treturn;\n+      wanted_type = build_complex_type (TREE_TYPE (op));\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  if (!useless_type_conversion_p (wanted_type, decl_type))\n+    TREE_OPERAND (op, 0) = build1 (VIEW_CONVERT_EXPR, wanted_type,\n+\t\t\t\t   TREE_OPERAND (op, 0));\n+}\n+\n+/* Fixup reference tree operands for substituted prevailing decls\n+   with mismatched types in STMT.  */\n+\n+static void\n+maybe_fixup_decls (gimple stmt)\n+{\n+  /* We have to fixup replaced decls here in case there were\n+     inter-TU type mismatches.  Catch the most common cases\n+     for now - this way we'll get testcases for the rest as\n+     the type verifier will complain.  */\n+  if (gimple_assign_single_p (stmt))\n+    {\n+      tree lhs = gimple_assign_lhs (stmt);\n+      tree rhs = gimple_assign_rhs1 (stmt);\n+\n+      /* First catch loads and aggregate copies by adjusting the rhs.  */\n+      if (TREE_CODE (rhs) == VAR_DECL)\n+\t{\n+\t  if (!useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (rhs)))\n+\t    gimple_assign_set_rhs1 (stmt, build1 (VIEW_CONVERT_EXPR,\n+\t\t\t\t\t\t  TREE_TYPE (lhs), rhs));\n+\t}\n+      else if (handled_component_p (rhs))\n+\tmaybe_fixup_handled_component (rhs);\n+      /* Then catch scalar stores.  */\n+      else if (TREE_CODE (lhs) == VAR_DECL)\n+\t{\n+\t  if (!useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (rhs)))\n+\t    gimple_assign_set_lhs (stmt, build1 (VIEW_CONVERT_EXPR,\n+\t\t\t\t\t\t TREE_TYPE (rhs), lhs));\n+\t}\n+      else if (handled_component_p (lhs))\n+\tmaybe_fixup_handled_component (lhs);\n+    }\n+  else if (is_gimple_call (stmt))\n+    {\n+      tree lhs = gimple_call_lhs (stmt);\n+\n+      if (lhs && TREE_CODE (lhs) == VAR_DECL)\n+\t{\n+\t  if (!useless_type_conversion_p (TREE_TYPE (lhs),\n+\t\t\t\t\t  gimple_call_return_type (stmt)))\n+\t    gimple_call_set_lhs (stmt, build1 (VIEW_CONVERT_EXPR,\n+\t\t\t\t\t       gimple_call_return_type (stmt),\n+\t\t\t\t\t       lhs));\n+\t}\n+      else if (lhs && handled_component_p (lhs))\n+\tmaybe_fixup_handled_component (lhs);\n+\n+      /* Arguments, especially for varargs functions will be funny...  */\n+    }\n+}\n+\n /* Read a statement with tag TAG in function FN from block IB using\n    descriptors in DATA_IN.  */\n \n@@ -983,6 +1096,10 @@ input_gimple_stmt (struct lto_input_block *ib, struct data_in *data_in,\n \t}\n     }\n \n+  /* Fixup reference tree operands for substituted prevailing decls\n+     with mismatched types.  */\n+  maybe_fixup_decls (stmt);\n+\n   /* Mark the statement modified so its operand vectors can be filled in.  */\n   gimple_set_modified (stmt, true);\n "}, {"sha": "938d32cb2ef56edb98007c9125854d25c34acded", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f1e9f475d9be3da62e99c2891e0abdbfd444a4/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f1e9f475d9be3da62e99c2891e0abdbfd444a4/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=35f1e9f475d9be3da62e99c2891e0abdbfd444a4", "patch": "@@ -1,3 +1,8 @@\n+2009-10-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/41715\n+\t* lto.c (lto_fixup_tree): Revert last change.\n+\n 2009-10-14  Richard Guenther  <rguenther@suse.de>\n \n \t* lto.c (lto_fixup_tree): In case the prevailing decl is not"}, {"sha": "2b674c176aca6151381e8415e7e2da62c3b1516f", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f1e9f475d9be3da62e99c2891e0abdbfd444a4/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f1e9f475d9be3da62e99c2891e0abdbfd444a4/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=35f1e9f475d9be3da62e99c2891e0abdbfd444a4", "patch": "@@ -1530,18 +1530,10 @@ lto_fixup_tree (tree *tp, int *walk_subtrees, void *data)\n \n \t  pointer_set_insert (fixup_data->free_list, t);\n \n-\t  /* Replace the decl.  If it is a not compatible VAR_DECL wrap\n-\t     it inside a VIEW_CONVERT_EXPR.  */\n-\t  if (TREE_CODE (*tp) == VAR_DECL\n-\t      && !useless_type_conversion_p (TREE_TYPE (*tp),\n-\t\t\t\t\t     TREE_TYPE (prevailing)))\n-\t    *tp = build1 (VIEW_CONVERT_EXPR, TREE_TYPE (*tp), prevailing);\n-\t  else\n-\t    *tp = prevailing;\n-\n \t   /* Also replace t with prevailing defintion.  We don't want to\n \t      insert the other defintion in the seen set as we want to\n \t      replace all instances of it.  */\n+\t  *tp = prevailing;\n \t  t = prevailing;\n \t}\n     }"}, {"sha": "e21a4e217727aa5421e5b9095ac73d91bceca394", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f1e9f475d9be3da62e99c2891e0abdbfd444a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f1e9f475d9be3da62e99c2891e0abdbfd444a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=35f1e9f475d9be3da62e99c2891e0abdbfd444a4", "patch": "@@ -1,3 +1,10 @@\n+2009-10-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/41715\n+\t* gfortran.dg/lto/20091015-1_0.f: New testcase.\n+\t* gfortran.dg/lto/20091015-1_1.f: Likewise.\n+\t* gfortran.dg/lto/20091015-1_2.f: Likewise.\n+\n 2009-10-16  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/41713"}, {"sha": "f47e1a4ac6ccd8069cbb39f32b1121599f56c0b6", "filename": "gcc/testsuite/gfortran.dg/lto/20091015-1_0.f", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f1e9f475d9be3da62e99c2891e0abdbfd444a4/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091015-1_0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f1e9f475d9be3da62e99c2891e0abdbfd444a4/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091015-1_0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091015-1_0.f?ref=35f1e9f475d9be3da62e99c2891e0abdbfd444a4", "patch": "@@ -0,0 +1,8 @@\n+! { dg-lto-do link }\n+! We expect some warnings about mismatched symbol types\n+! { dg-extra-ld-options \"-w\" }\n+\n+      subroutine dalie6s(iqmod6,nz,wx,cor6d)\n+      common/dascr/iscrda(100),rscrri(100),iscrri(100),idao\n+      call daall(iscrda,100,'$$IS      ',no,nv)\n+      end"}, {"sha": "7a64ffa6786879d7cc8313f7022954e853c2b14b", "filename": "gcc/testsuite/gfortran.dg/lto/20091015-1_1.f", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f1e9f475d9be3da62e99c2891e0abdbfd444a4/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091015-1_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f1e9f475d9be3da62e99c2891e0abdbfd444a4/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091015-1_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091015-1_1.f?ref=35f1e9f475d9be3da62e99c2891e0abdbfd444a4", "patch": "@@ -0,0 +1,4 @@\n+      SUBROUTINE DAALL(IC,L,CCC,NO,NV)\n+      COMMON /main1/ eps\n+      END\n+"}, {"sha": "5bfd02227fa26dc12ce75bfd398fdbdd7cafa6af", "filename": "gcc/testsuite/gfortran.dg/lto/20091015-1_2.f", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f1e9f475d9be3da62e99c2891e0abdbfd444a4/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091015-1_2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f1e9f475d9be3da62e99c2891e0abdbfd444a4/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091015-1_2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091015-1_2.f?ref=35f1e9f475d9be3da62e99c2891e0abdbfd444a4", "patch": "@@ -0,0 +1,5 @@\n+      program test\n+      common/main1/ eps(2)\n+      dimension cor6d(2,2)\n+      call dalie6s(iqmod6,1,wx,cor6d)\n+      end"}]}