{"sha": "1baf2906ef9aa2870b7162b51f9e5b15c7251031", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJhZjI5MDZlZjlhYTI4NzBiNzE2MmI1MWY5ZTViMTVjNzI1MTAzMQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@inria.fr", "date": "2007-04-11T17:10:23Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2007-04-11T17:10:23Z"}, "message": "tree-data-ref.c (affine_function_zero_p, [...]): New.\n\n\t* tree-data-ref.c (affine_function_zero_p, constant_access_functions,\n\tinsert_innermost_unit_dist_vector, add_distance_for_zero_overlaps): New.\n\t(build_classic_dist_vector): Call add_distance_for_zero_overlaps.\n\nFrom-SVN: r123721", "tree": {"sha": "85a371146cf2a6159779a494d5716d2ee436bd82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85a371146cf2a6159779a494d5716d2ee436bd82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1baf2906ef9aa2870b7162b51f9e5b15c7251031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1baf2906ef9aa2870b7162b51f9e5b15c7251031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1baf2906ef9aa2870b7162b51f9e5b15c7251031", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1baf2906ef9aa2870b7162b51f9e5b15c7251031/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ca2faee4f6194686a8121f76ffb7036614e259d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ca2faee4f6194686a8121f76ffb7036614e259d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ca2faee4f6194686a8121f76ffb7036614e259d"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "6f757215f29ee981ae7cd73d00168801fc542c69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1baf2906ef9aa2870b7162b51f9e5b15c7251031/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1baf2906ef9aa2870b7162b51f9e5b15c7251031/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1baf2906ef9aa2870b7162b51f9e5b15c7251031", "patch": "@@ -1,3 +1,9 @@\n+2007-04-11  Sebastian Pop  <sebastian.pop@inria.fr>\n+\n+\t* tree-data-ref.c (affine_function_zero_p, constant_access_functions,\n+\tinsert_innermost_unit_dist_vector, add_distance_for_zero_overlaps): New.\n+\t(build_classic_dist_vector): Call add_distance_for_zero_overlaps.\n+\n 2007-04-10  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* tree-data-ref.c (add_multivariate_self_dist): Force the distance"}, {"sha": "0340b9e8b00574489d78bd8ea4248c6311d43475", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1baf2906ef9aa2870b7162b51f9e5b15c7251031/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1baf2906ef9aa2870b7162b51f9e5b15c7251031/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=1baf2906ef9aa2870b7162b51f9e5b15c7251031", "patch": "@@ -2124,6 +2124,15 @@ affine_function_constant_p (affine_fn fn)\n   return true;\n }\n \n+/* Returns true if FN is the zero constant function.  */\n+\n+static bool\n+affine_function_zero_p (affine_fn fn)\n+{\n+  return (integer_zerop (affine_function_base (fn))\n+\t  && affine_function_constant_p (fn));\n+}\n+\n /* Applies operation OP on affine functions FNA and FNB, and returns the\n    result.  */\n \n@@ -3847,6 +3856,22 @@ same_access_functions (struct data_dependence_relation *ddr)\n   return true;\n }\n \n+/* Return true when the DDR contains only constant access functions.  */\n+\n+static bool\n+constant_access_functions (struct data_dependence_relation *ddr)\n+{\n+  unsigned i;\n+\n+  for (i = 0; i < DDR_NUM_SUBSCRIPTS (ddr); i++)\n+    if (!evolution_function_is_constant_p (DR_ACCESS_FN (DDR_A (ddr), i))\n+\t|| !evolution_function_is_constant_p (DR_ACCESS_FN (DDR_B (ddr), i)))\n+      return false;\n+\n+  return true;\n+}\n+\n+\n /* Helper function for the case where DDR_A and DDR_B are the same\n    multivariate access function.  */\n \n@@ -3928,6 +3953,53 @@ add_other_self_distances (struct data_dependence_relation *ddr)\n   add_outer_distances (ddr, dist_v, index_carry);\n }\n \n+static void\n+insert_innermost_unit_dist_vector (struct data_dependence_relation *ddr)\n+{\n+  lambda_vector dist_v = lambda_vector_new (DDR_NB_LOOPS (ddr));\n+\n+  dist_v[DDR_INNER_LOOP (ddr)] = 1;\n+  save_dist_v (ddr, dist_v);\n+}\n+\n+/* Adds a unit distance vector to DDR when there is a 0 overlap.  This\n+   is the case for example when access functions are the same and\n+   equal to a constant, as in:\n+\n+   | loop_1\n+   |   A[3] = ...\n+   |   ... = A[3]\n+   | endloop_1\n+\n+   in which case the distance vectors are (0) and (1).  */\n+\n+static void\n+add_distance_for_zero_overlaps (struct data_dependence_relation *ddr)\n+{\n+  unsigned i, j;\n+\n+  for (i = 0; i < DDR_NUM_SUBSCRIPTS (ddr); i++)\n+    {\n+      subscript_p sub = DDR_SUBSCRIPT (ddr, i);\n+      conflict_function *ca = SUB_CONFLICTS_IN_A (sub);\n+      conflict_function *cb = SUB_CONFLICTS_IN_B (sub);\n+\n+      for (j = 0; j < ca->n; j++)\n+\tif (affine_function_zero_p (ca->fns[j]))\n+\t  {\n+\t    insert_innermost_unit_dist_vector (ddr);\n+\t    return;\n+\t  }\n+\n+      for (j = 0; j < cb->n; j++)\n+\tif (affine_function_zero_p (cb->fns[j]))\n+\t  {\n+\t    insert_innermost_unit_dist_vector (ddr);\n+\t    return;\n+\t  }\n+    }\n+}\n+\n /* Compute the classic per loop distance vector.  DDR is the data\n    dependence relation to build a vector from.  Return false when fail\n    to represent the data dependence as a distance vector.  */\n@@ -3948,6 +4020,9 @@ build_classic_dist_vector (struct data_dependence_relation *ddr)\n       dist_v = lambda_vector_new (DDR_NB_LOOPS (ddr));\n       save_dist_v (ddr, dist_v);\n \n+      if (constant_access_functions (ddr))\n+\tadd_distance_for_zero_overlaps (ddr);\n+\n       if (DDR_NB_LOOPS (ddr) > 1)\n \tadd_other_self_distances (ddr);\n "}]}