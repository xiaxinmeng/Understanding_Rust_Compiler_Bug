{"sha": "b31ede6e376302047830691fe6249be3ade0a2c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMxZWRlNmUzNzYzMDIwNDc4MzA2OTFmZTYyNDliZTNhZGUwYTJjMA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-04-30T15:59:00Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-04-30T15:59:00Z"}, "message": "ipa: Cgraph verification fix (PR 94856)\n\nPR 94856 is a call graph verifier error.  We have a method which (in\nthe course of IPA-CP) loses its this pointer because it is unused and\nthe pass then does not clone all the this adjusting thunks and just\nmakes the calls go straight to the new clone - and then the verifier\ncomplains that the edge does not seem to point to a clone of what it\nused to.  This looked weird because the verifier actually has logic\ndetecting this case but it turns out that it is confused by inliner\nbody-saving mechanism which invents a new decl for the base function.\n\nMaking the inlining body-saving mechanism to correctly set\nformer_clone_of allows us to detect this case too.  Then we pass this\nparticular round of verification but the subsequent one fails because\nwe have inlined the function into its former thunk - which\nsubsequently does not have any callees, but the verifier still access\nthem and segfaults.  Therefore the patch also adds a test whether the\na former hunk even has any call.\n\n2020-04-30  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/94856\n\t* cgraph.c (clone_of_p): Also consider thunks whih had their bodies\n\tsaved by the inliner and thunks which had their call inlined.\n\t* ipa-inline-transform.c (save_inline_function_body): Fill in\n\tformer_clone_of of new body holders.\n\n\tPR ipa/94856\n\t* g++.dg/ipa/pr94856.C: New test.", "tree": {"sha": "b3ea9ae9cabea1c720cac33f517eb7de06ddd9ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3ea9ae9cabea1c720cac33f517eb7de06ddd9ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b31ede6e376302047830691fe6249be3ade0a2c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b31ede6e376302047830691fe6249be3ade0a2c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b31ede6e376302047830691fe6249be3ade0a2c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b31ede6e376302047830691fe6249be3ade0a2c0/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46eed414a332f7684a9d8f07c0f7e94b8cc2659e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46eed414a332f7684a9d8f07c0f7e94b8cc2659e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46eed414a332f7684a9d8f07c0f7e94b8cc2659e"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "69ecd225eceffd6499547473ec2da35c7277636a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b31ede6e376302047830691fe6249be3ade0a2c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b31ede6e376302047830691fe6249be3ade0a2c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b31ede6e376302047830691fe6249be3ade0a2c0", "patch": "@@ -1,3 +1,11 @@\n+2020-04-30  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/94856\n+\t* cgraph.c (clone_of_p): Also consider thunks whih had their bodies\n+\tsaved by the inliner and thunks which had their call inlined.\n+\t* ipa-inline-transform.c (save_inline_function_body): Fill in\n+\tformer_clone_of of new body holders.\n+\n 2020-04-30  Jakub Jelinek  <jakub@redhat.com>\n \n \t* BASE-VER: Set to 11.0.0."}, {"sha": "2a9813df2d91c6f6d617539a2f40aecf0f64ea95", "filename": "gcc/cgraph.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b31ede6e376302047830691fe6249be3ade0a2c0/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b31ede6e376302047830691fe6249be3ade0a2c0/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=b31ede6e376302047830691fe6249be3ade0a2c0", "patch": "@@ -3104,15 +3104,17 @@ clone_of_p (cgraph_node *node, cgraph_node *node2)\n \treturn false;\n       /* In case of instrumented expanded thunks, which can have multiple calls\n \t in them, we do not know how to continue and just have to be\n-\t optimistic.  */\n-      if (node->callees->next_callee)\n+\t optimistic.  The same applies if all calls have already been inlined\n+\t into the thunk.  */\n+      if (!node->callees || node->callees->next_callee)\n \treturn true;\n       node = node->callees->callee->ultimate_alias_target ();\n \n       if (!node2->clone.param_adjustments\n \t  || node2->clone.param_adjustments->first_param_intact_p ())\n \treturn false;\n-      if (node2->former_clone_of == node->decl)\n+      if (node2->former_clone_of == node->decl\n+\t  || node2->former_clone_of == node->former_clone_of)\n \treturn true;\n \n       cgraph_node *n2 = node2;"}, {"sha": "e9e21cc029669ef6df504873b901dbdc47647f61", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b31ede6e376302047830691fe6249be3ade0a2c0/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b31ede6e376302047830691fe6249be3ade0a2c0/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=b31ede6e376302047830691fe6249be3ade0a2c0", "patch": "@@ -607,6 +607,8 @@ save_inline_function_body (struct cgraph_node *node)\n \t}\n     }\n   *ipa_saved_clone_sources->get_create (first_clone) = prev_body_holder;\n+  first_clone->former_clone_of\n+    = node->former_clone_of ? node->former_clone_of : node->decl;\n   first_clone->clone_of = NULL;\n \n   /* Now node in question has no clones.  */"}, {"sha": "c60256477344f3663cddf8a92d6f3ac6c87d46e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b31ede6e376302047830691fe6249be3ade0a2c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b31ede6e376302047830691fe6249be3ade0a2c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b31ede6e376302047830691fe6249be3ade0a2c0", "patch": "@@ -1,3 +1,8 @@\n+2020-04-30  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/94856\n+\t* g++.dg/ipa/pr94856.C: New test.\n+\n 2020-04-30  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/94886"}, {"sha": "5315c52d80edad619e450bce05e3017a44360cfe", "filename": "gcc/testsuite/g++.dg/ipa/pr94856.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b31ede6e376302047830691fe6249be3ade0a2c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr94856.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b31ede6e376302047830691fe6249be3ade0a2c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr94856.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr94856.C?ref=b31ede6e376302047830691fe6249be3ade0a2c0", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-dse --param uninlined-function-insns=0 --param early-inlining-insns=3 -fgnu-tm \" } */\n+\n+class a {\n+public:\n+  virtual ~a() {}\n+};\n+class b {\n+public:\n+  virtual void c();\n+};\n+class C : a, public b {};\n+class d : C {\n+  ~d();\n+  void c();\n+};\n+d::~d() { ((b *)this)->c(); }\n+void d::c() {}"}]}