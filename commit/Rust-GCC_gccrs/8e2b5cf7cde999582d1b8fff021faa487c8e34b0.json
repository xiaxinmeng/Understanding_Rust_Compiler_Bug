{"sha": "8e2b5cf7cde999582d1b8fff021faa487c8e34b0", "node_id": "C_kwDOANBUbNoAKDhlMmI1Y2Y3Y2RlOTk5NTgyZDFiOGZmZjAyMWZhYTQ4N2M4ZTM0YjA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-10-19T12:12:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-10-20T09:29:28Z"}, "message": "c/107305 - avoid ICEing with invalid GIMPLE input to the GIMPLE FE\n\nThe GIMPLE FE was designed to defer semantic error checking to the\nGIMPLE IL verifier.  But that can end up causing spurious ICEs\nearlier and in fact it will report an internal error.  The following\ntries to improve the situation by explicitely calling into the\nverifier from the parser and intructing it to not ICE but instead\nzap the parsed body after an error is discovered.\n\n\tPR c/107305\n\tPR c/107306\ngcc/c/\n\t* gimple-parser.cc (c_parser_parse_gimple_body): Verify\n\tthe parsed IL and zap the body on error.\n\ngcc/\n\t* tree-cfg.h (verify_gimple_in_seq): Add parameter to\n\tindicate whether to emit an ICE.  Add return value.\n\t(verify_gimple_in_cfg): Likewise.\n\t* tree-cfg.cc (verify_gimple_in_seq): Likewise.\n\t(verify_gimple_in_cfg): Likewise.\n\ngcc/testsuite/\n\t* gcc.dg/gimplefe-error-15.c: New testcase.", "tree": {"sha": "a7c5356d886096ce0bba651011198f1e34f7f0ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7c5356d886096ce0bba651011198f1e34f7f0ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e2b5cf7cde999582d1b8fff021faa487c8e34b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e2b5cf7cde999582d1b8fff021faa487c8e34b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e2b5cf7cde999582d1b8fff021faa487c8e34b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e2b5cf7cde999582d1b8fff021faa487c8e34b0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d6e834ecf212e7fc6f585b154af224d2e38c749", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d6e834ecf212e7fc6f585b154af224d2e38c749", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d6e834ecf212e7fc6f585b154af224d2e38c749"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "18ed4d4236d77a7824f3aca321d166a47e247585", "filename": "gcc/c/gimple-parser.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e2b5cf7cde999582d1b8fff021faa487c8e34b0/gcc%2Fc%2Fgimple-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e2b5cf7cde999582d1b8fff021faa487c8e34b0/gcc%2Fc%2Fgimple-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.cc?ref=8e2b5cf7cde999582d1b8fff021faa487c8e34b0", "patch": "@@ -364,6 +364,16 @@ c_parser_parse_gimple_body (c_parser *cparser, char *gimple_pass,\n       cgraph_node::get_create (cfun->decl);\n       cgraph_edge::rebuild_edges ();\n     }\n+\n+  /* Perform IL validation and if any error is found abort compilation\n+     of this function by zapping its body.  */\n+  if ((cfun->curr_properties & PROP_cfg)\n+      && verify_gimple_in_cfg (cfun, false, false))\n+    init_empty_tree_cfg ();\n+  else if (!(cfun->curr_properties & PROP_cfg)\n+\t   && verify_gimple_in_seq (gimple_body (current_function_decl), false))\n+    gimple_set_body (current_function_decl, NULL);\n+\n   dump_function (TDI_gimple, current_function_decl);\n }\n "}, {"sha": "066cd845d31e134ddcb485e4f07d78996807e695", "filename": "gcc/testsuite/gcc.dg/gimplefe-error-15.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e2b5cf7cde999582d1b8fff021faa487c8e34b0/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-error-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e2b5cf7cde999582d1b8fff021faa487c8e34b0/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-error-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-error-15.c?ref=8e2b5cf7cde999582d1b8fff021faa487c8e34b0", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgimple\" } */\n+\n+unsigned a;\n+static double *d;\n+static _Bool b;\n+__GIMPLE int\n+foo (int n)\n+{\n+  b = __builtin_add_overflow (n, *d, &a);\n+} /* { dg-error \"invalid argument\" } */\n+\n+/* { dg-message \"\" \"\" { target *-*-* } 0 } */"}, {"sha": "d982988048f24eb318c01ec84298282a1b8b1ba8", "filename": "gcc/tree-cfg.cc", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e2b5cf7cde999582d1b8fff021faa487c8e34b0/gcc%2Ftree-cfg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e2b5cf7cde999582d1b8fff021faa487c8e34b0/gcc%2Ftree-cfg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.cc?ref=8e2b5cf7cde999582d1b8fff021faa487c8e34b0", "patch": "@@ -5300,13 +5300,15 @@ verify_gimple_transaction (gtransaction *stmt)\n \n /* Verify the GIMPLE statements inside the statement list STMTS.  */\n \n-DEBUG_FUNCTION void\n-verify_gimple_in_seq (gimple_seq stmts)\n+DEBUG_FUNCTION bool\n+verify_gimple_in_seq (gimple_seq stmts, bool ice)\n {\n   timevar_push (TV_TREE_STMT_VERIFY);\n-  if (verify_gimple_in_seq_2 (stmts))\n+  bool res = verify_gimple_in_seq_2 (stmts);\n+  if (res && ice)\n     internal_error (\"%<verify_gimple%> failed\");\n   timevar_pop (TV_TREE_STMT_VERIFY);\n+  return res;\n }\n \n /* Return true when the T can be shared.  */\n@@ -5496,8 +5498,8 @@ collect_subblocks (hash_set<tree> *blocks, tree block)\n \n /* Verify the GIMPLE statements in the CFG of FN.  */\n \n-DEBUG_FUNCTION void\n-verify_gimple_in_cfg (struct function *fn, bool verify_nothrow)\n+DEBUG_FUNCTION bool\n+verify_gimple_in_cfg (struct function *fn, bool verify_nothrow, bool ice)\n {\n   basic_block bb;\n   bool err = false;\n@@ -5652,11 +5654,13 @@ verify_gimple_in_cfg (struct function *fn, bool verify_nothrow)\n     eh_table->traverse<hash_set<gimple *> *, verify_eh_throw_stmt_node>\n       (&visited_throwing_stmts);\n \n-  if (err || eh_error_found)\n+  if (ice && (err || eh_error_found))\n     internal_error (\"verify_gimple failed\");\n \n   verify_histograms ();\n   timevar_pop (TV_TREE_STMT_VERIFY);\n+\n+  return (err || eh_error_found);\n }\n \n "}, {"sha": "8c22c3dbbe36325cfe15a326fe6cb0db3ef89a84", "filename": "gcc/tree-cfg.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e2b5cf7cde999582d1b8fff021faa487c8e34b0/gcc%2Ftree-cfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e2b5cf7cde999582d1b8fff021faa487c8e34b0/gcc%2Ftree-cfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.h?ref=8e2b5cf7cde999582d1b8fff021faa487c8e34b0", "patch": "@@ -63,8 +63,8 @@ extern gphi *get_virtual_phi (basic_block);\n extern gimple *first_stmt (basic_block);\n extern gimple *last_stmt (basic_block);\n extern gimple *last_and_only_stmt (basic_block);\n-extern void verify_gimple_in_seq (gimple_seq);\n-extern void verify_gimple_in_cfg (struct function *, bool);\n+extern bool verify_gimple_in_seq (gimple_seq, bool = true);\n+extern bool verify_gimple_in_cfg (struct function *, bool, bool = true);\n extern tree gimple_block_label (basic_block);\n extern void add_phi_args_after_copy_bb (basic_block);\n extern void add_phi_args_after_copy (basic_block *, unsigned, edge);"}]}