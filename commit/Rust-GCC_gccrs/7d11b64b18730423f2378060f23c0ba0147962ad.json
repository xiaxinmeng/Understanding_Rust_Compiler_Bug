{"sha": "7d11b64b18730423f2378060f23c0ba0147962ad", "node_id": "C_kwDOANBUbNoAKDdkMTFiNjRiMTg3MzA0MjNmMjM3ODA2MGYyM2MwYmEwMTQ3OTYyYWQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-05T00:16:52Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-05T00:16:52Z"}, "message": "Daily bump.", "tree": {"sha": "9ca9dca2cb3003f2ff44970226d020099e9a849c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ca9dca2cb3003f2ff44970226d020099e9a849c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d11b64b18730423f2378060f23c0ba0147962ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d11b64b18730423f2378060f23c0ba0147962ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d11b64b18730423f2378060f23c0ba0147962ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d11b64b18730423f2378060f23c0ba0147962ad/comments", "author": null, "committer": null, "parents": [{"sha": "5a431b60d1f221992e5e9f7a5c032df3b5fa35a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a431b60d1f221992e5e9f7a5c032df3b5fa35a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a431b60d1f221992e5e9f7a5c032df3b5fa35a5"}], "stats": {"total": 180, "additions": 179, "deletions": 1}, "files": [{"sha": "a9356f0540f0c182994fdbf552841beb223b8eac", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d11b64b18730423f2378060f23c0ba0147962ad/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d11b64b18730423f2378060f23c0ba0147962ad/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=7d11b64b18730423f2378060f23c0ba0147962ad", "patch": "@@ -1,3 +1,8 @@\n+2022-01-04  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* MAINTAINERS: Change of email address in both DCO and\n+\tWrite After Approval list.\n+\n 2021-12-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* configure: Regenerate."}, {"sha": "016e29a457af7d6ffc6a598ae082ce70e66d725b", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d11b64b18730423f2378060f23c0ba0147962ad/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d11b64b18730423f2378060f23c0ba0147962ad/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=7d11b64b18730423f2378060f23c0ba0147962ad", "patch": "@@ -1,3 +1,10 @@\n+2022-01-04  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* inclhack.def (vxworks_posix_mkdir): Refine to expose a\n+\tvarargs interface.\n+\t* tests/base/sys/stat.h: Update expected results.\n+\t* fixincl.x: Regenerate.\n+\n 2022-01-01  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* inclhack.def: Add new fix on darwin."}, {"sha": "b5d96b7719db4a11b1f27ea8c0afd6e6a17d814a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d11b64b18730423f2378060f23c0ba0147962ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d11b64b18730423f2378060f23c0ba0147962ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d11b64b18730423f2378060f23c0ba0147962ad", "patch": "@@ -1,3 +1,105 @@\n+2022-01-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/99612\n+\t* builtins.c (get_memmodel): Move warning code to\n+\tgimple-ssa-warn-access.cc.\n+\t(expand_builtin_atomic_compare_exchange): Same.\n+\t(expand_ifn_atomic_compare_exchange): Same.\n+\t(expand_builtin_atomic_load): Same.\n+\t(expand_builtin_atomic_store): Same.\n+\t(expand_builtin_atomic_clear): Same.\n+\t* doc/extend.texi (__atomic_exchange_n): Update valid memory\n+\tmodels.\n+\t* gimple-ssa-warn-access.cc (memmodel_to_uhwi): New function.\n+\t(struct memmodel_pair): New struct.\n+\t(memmodel_name): New function.\n+\t(pass_waccess::maybe_warn_memmodel): New function.\n+\t(pass_waccess::check_atomic_memmodel): New function.\n+\t(pass_waccess::check_atomic_builtin): Handle memory model.\n+\t* input.c (expansion_point_location_if_in_system_header): Return\n+\toriginal location if expansion location is in a system header.\n+\n+2022-01-04  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/103861\n+\t* config/i386/mmx.md (one_cmplv2qi3): New insn pattern.\n+\t(one_cmplv2qi3 splitters): New post-reload splitters.\n+\t(*andnotv2qi3): New insn pattern.\n+\t(andnotv2qi3 splitters): New post-reload splitters.\n+\t(<any_logic:code>v2qi3): New insn pattern.\n+\t(<any_logic:insn>v2qi3 splitters): New post-reload splitters.\n+\n+2022-01-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103800\n+\t* tree-vect-loop.c (vectorizable_phi): Remove assert and\n+\texpand comment.\n+\n+2022-01-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103690\n+\t* tree-pass.h (tail_merge_optimize): Adjust.\n+\t* tree-ssa-tail-merge.c (tail_merge_optimize): Pass in whether\n+\tto re-split critical edges, move CFG cleanup ...\n+\t* tree-ssa-pre.c (pass_pre::execute): ... here, before\n+\tsimple_dce_from_worklist and delay freeing inserted_exprs from\n+\t...\n+\t(fini_pre): .. here.\n+\n+2022-01-04  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/nvptx/nvptx.h (STORE_FLAG_VALUE): Change to 1.\n+\t* config/nvptx/nvptx.md (movbi): Use P1 constraint for true.\n+\t(setcc_from_bi): Remove SImode specific pattern.\n+\t(setcc<mode>_from_bi): Provide more general HSDIM pattern.\n+\t(extendbi<mode>2, zeroextendbi<mode>2): Provide instructions\n+\tfor sign- and zero-extending BImode predicates to integers.\n+\t(setcc_int<mode>): Remove previous (-1-based) instructions.\n+\t(cstorebi4): Remove BImode to SImode specific expander.\n+\t(cstore<mode>4): Fix indentation.  Expand using setccsi_from_bi.\n+\t(cstore<mode>4): For both integer and floating point modes.\n+\n+2022-01-04  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc.c (driver_handle_option): do_save --sysroot.\n+\n+2022-01-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103864\n+\tPR tree-optimization/103544\n+\t* tree-vect-slp.c (vect_analyze_slp_instance): Exclude\n+\treductions wrapped in conversions from SLP handling.\n+\t(vect_analyze_slp): Revert PR103544 change.\n+\n+2022-01-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/103860\n+\t* shrink-wrap.c (try_shrink_wrapping): Don't call can_get_prologue\n+\tuselessly for blocks for which it has been called already.\n+\n+2022-01-04  Cui,Lili  <lili.cui@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_intel_cpu): Add new model values\n+\tto Alderlake and Rocketlake.\n+\n+2022-01-04  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR middle-end/103643\n+\t* gimplify.c (gimplify_omp_affinity): Adjust gimplify_expr of entire\n+\tOMP_CLAUSE_DECL to use 'is_gimple_lvalue, fb_lvalue'\n+\n+2022-01-04  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/103895\n+\t* config/i386/sse.md (*bit_and_float_vector_all_ones):\n+\tForce_reg operand 1 to avoid ICE.\n+\n+2022-01-04  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree-pretty-print.c (do_niy): Add spc parameter.\n+\t(NIY): Pass it.\n+\t(print_call_name): Add spc local variable.\n+\n 2022-01-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/103894"}, {"sha": "430a7046c31aeeed015f17355e175ef40fcdc47f", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d11b64b18730423f2378060f23c0ba0147962ad/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d11b64b18730423f2378060f23c0ba0147962ad/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=7d11b64b18730423f2378060f23c0ba0147962ad", "patch": "@@ -1 +1 @@\n-20220104\n+20220105"}, {"sha": "3fbbf6093e958abbc98dc79af985406407b66ae6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d11b64b18730423f2378060f23c0ba0147962ad/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d11b64b18730423f2378060f23c0ba0147962ad/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7d11b64b18730423f2378060f23c0ba0147962ad", "patch": "@@ -1,3 +1,11 @@\n+2022-01-04  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (class releasing_vec): Add begin/end fns.\n+\n+2022-01-04  Jason Merrill  <jason@redhat.com>\n+\n+\t* init.c: Include -*- C++ -*- on first line.\n+\n 2022-01-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/103758"}, {"sha": "6cc7978cbf702ef69cee12303aff36488400f18f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d11b64b18730423f2378060f23c0ba0147962ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d11b64b18730423f2378060f23c0ba0147962ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d11b64b18730423f2378060f23c0ba0147962ad", "patch": "@@ -1,3 +1,43 @@\n+2022-01-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/99612\n+\t* c-c++-common/pr83059.c: Adjust text of expected diagnostics.\n+\t* gcc.dg/atomic-invalid-2.c: Same.\n+\t* gcc.dg/atomic-invalid.c: Same.\n+\t* c-c++-common/Winvalid-memory-model.c: New test.\n+\t* g++.dg/warn/Winvalid-memory-model-2.C: New test.\n+\t* g++.dg/warn/Winvalid-memory-model.C: New test.\n+\n+2022-01-04  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/103861\n+\t* gcc.target/i386/warn-vect-op-2.c: Adjust warnings.\n+\t* gcc.target/i386/pr103900.c: New test.\n+\n+2022-01-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103800\n+\t* gcc.dg/vect/bb-slp-pr103800.c: New testcase.\n+\n+2022-01-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103864\n+\tPR tree-optimization/103544\n+\t* gcc.dg/vect/pr103864.c: New testcase.\n+\n+2022-01-04  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/pr103643.f90: New test.\n+\n+2022-01-04  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr103895.c: New test.\n+\n+2022-01-04  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR c++/90782\n+\t* g++.dg/cpp1z/class-deduction100.C: New test.\n+\n 2022-01-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/103758"}, {"sha": "7ba515c61072a6c14c394b35835c9e0433446f17", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d11b64b18730423f2378060f23c0ba0147962ad/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d11b64b18730423f2378060f23c0ba0147962ad/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=7d11b64b18730423f2378060f23c0ba0147962ad", "patch": "@@ -1,3 +1,8 @@\n+2022-01-04  Florian Weimer  <fweimer@redhat.com>\n+\n+\t* unwind-dw2-fde-dip.c (_Unwind_Find_FDE): Call _dl_find_object\n+\tif available.\n+\n 2022-01-02  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/linux-atomic.c (_ASM_EFAULT): Define."}, {"sha": "c546dec1965b6606907556ef42707b1544d6e5bf", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d11b64b18730423f2378060f23c0ba0147962ad/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d11b64b18730423f2378060f23c0ba0147962ad/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=7d11b64b18730423f2378060f23c0ba0147962ad", "patch": "@@ -1,3 +1,14 @@\n+2022-01-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.c-c++-common/target-45.c: Iterate over all devices.\n+\t* testsuite/libgomp.fortran/target10.f90: Likewise.\n+\n+2022-01-04  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* plugin/plugin-gcn.c (GOMP_OFFLOAD_load_image): Change uses of STRINGX\n+\tinto XSTRING when looking for GOMP_DEVICE_NUM_VAR in offload image.\n+\t* plugin/plugin-nvptx.c (GOMP_OFFLOAD_load_image): Likewise.\n+\n 2022-01-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* libgomp.texi: Bump @copying's copyright year."}]}