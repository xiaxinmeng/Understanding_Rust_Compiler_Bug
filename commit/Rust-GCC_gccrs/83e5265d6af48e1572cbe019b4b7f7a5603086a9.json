{"sha": "83e5265d6af48e1572cbe019b4b7f7a5603086a9", "node_id": "C_kwDOANBUbNoAKDgzZTUyNjVkNmFmNDhlMTU3MmNiZTAxOWI0YjdmN2E1NjAzMDg2YTk", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-10-25T08:48:43Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-10-25T09:10:19Z"}, "message": "intrinsics: Add `sorry_handler` intrinsic handler\n\nThis allows us to define intrinsics without implementing their body.\nThis will be useful for atomic intrinsics for example, as there are a\nlot of them and we should work on implementing them one by one properly\nand slowly", "tree": {"sha": "b3b93587d69dbe3f47d5537d7ee9482f0a74fc94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3b93587d69dbe3f47d5537d7ee9482f0a74fc94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83e5265d6af48e1572cbe019b4b7f7a5603086a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83e5265d6af48e1572cbe019b4b7f7a5603086a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83e5265d6af48e1572cbe019b4b7f7a5603086a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83e5265d6af48e1572cbe019b4b7f7a5603086a9/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "490aa25d5564313c1957bf28533fe902a0aaa1f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/490aa25d5564313c1957bf28533fe902a0aaa1f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/490aa25d5564313c1957bf28533fe902a0aaa1f2"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "2a2091ccc257c450d07368ce02df674fcc4393fd", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e5265d6af48e1572cbe019b4b7f7a5603086a9/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e5265d6af48e1572cbe019b4b7f7a5603086a9/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=83e5265d6af48e1572cbe019b4b7f7a5603086a9", "patch": "@@ -93,6 +93,15 @@ prefetch_write_data (Context *ctx, TyTy::FnType *fntype)\n   return prefetch_data_handler (ctx, fntype, Prefetch::Write);\n }\n \n+static inline tree\n+sorry_handler (Context *ctx, TyTy::FnType *fntype)\n+{\n+  rust_sorry_at (fntype->get_locus (), \"intrinsic %qs is not yet implemented\",\n+\t\t fntype->get_identifier ().c_str ());\n+\n+  return error_mark_node;\n+}\n+\n static const std::map<std::string,\n \t\t      std::function<tree (Context *, TyTy::FnType *)>>\n   generic_intrinsics = {\n@@ -107,6 +116,7 @@ static const std::map<std::string,\n     {\"copy_nonoverlapping\", &copy_nonoverlapping_handler},\n     {\"prefetch_read_data\", &prefetch_read_data},\n     {\"prefetch_write_data\", &prefetch_write_data},\n+    {\"atomic_load\", &sorry_handler},\n };\n \n Intrinsics::Intrinsics (Context *ctx) : ctx (ctx) {}"}, {"sha": "1acb3533c0894db17e25859d6c5b820bdcc836ff", "filename": "gcc/testsuite/rust/compile/torture/intrinsics-3.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e5265d6af48e1572cbe019b4b7f7a5603086a9/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e5265d6af48e1572cbe019b4b7f7a5603086a9/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-3.rs?ref=83e5265d6af48e1572cbe019b4b7f7a5603086a9", "patch": "@@ -0,0 +1,9 @@\n+extern \"rust-intrinsic\" {\n+    fn not_an_intrinsic();\n+    fn atomic_load(); // { dg-message \"sorry, unimplemented: intrinsic .atomic_load. is not yet implemented\" }\n+}\n+\n+fn main() {\n+    unsafe { not_an_intrinsic() }; // { dg-error \"unknown builtin intrinsic: not_an_intrinsic\" }\n+    unsafe { atomic_load() };\n+}"}]}