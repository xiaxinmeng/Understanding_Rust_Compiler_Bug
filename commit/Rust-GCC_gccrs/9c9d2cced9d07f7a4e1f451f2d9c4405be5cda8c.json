{"sha": "9c9d2cced9d07f7a4e1f451f2d9c4405be5cda8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM5ZDJjY2VkOWQwN2Y3YTRlMWY0NTFmMmQ5YzQ0MDViZTVjZGE4Yw==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2003-09-10T18:11:05Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-09-10T18:11:05Z"}, "message": "Arrays.java (equals(all variants)): Quit using NullPointerException catching to detect null valued parameters.\n\n2003-09-10  David Daney <ddaney@avtrex.com>\n\n\t* java/util/Arrays.java (equals(all variants)): Quit using\n\tNullPointerException catching to detect null valued parameters.\n\nFrom-SVN: r71275", "tree": {"sha": "5e3a934fe36adde388d8d3de78abdfaae5fec9aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e3a934fe36adde388d8d3de78abdfaae5fec9aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c9d2cced9d07f7a4e1f451f2d9c4405be5cda8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c9d2cced9d07f7a4e1f451f2d9c4405be5cda8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c9d2cced9d07f7a4e1f451f2d9c4405be5cda8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c9d2cced9d07f7a4e1f451f2d9c4405be5cda8c/comments", "author": null, "committer": null, "parents": [{"sha": "4a503716e04b1d4b51c25d183daa727863621364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a503716e04b1d4b51c25d183daa727863621364", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a503716e04b1d4b51c25d183daa727863621364"}], "stats": {"total": 224, "additions": 96, "deletions": 128}, "files": [{"sha": "11e054583b39ece278bc1487b77f4c190b9c2cc0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9d2cced9d07f7a4e1f451f2d9c4405be5cda8c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9d2cced9d07f7a4e1f451f2d9c4405be5cda8c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9c9d2cced9d07f7a4e1f451f2d9c4405be5cda8c", "patch": "@@ -1,3 +1,8 @@\n+2003-09-10  David Daney <ddaney@avtrex.com>\n+\n+\t* java/util/Arrays.java (equals(all variants)): Quit using\n+\tNullPointerException catching to detect null valued parameters.\n+\n 2003-09-10  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/DatagramSocket.java,"}, {"sha": "080b4b9cbf95004af5dec0123cf7186fd972dd9f", "filename": "libjava/java/util/Arrays.java", "status": "modified", "additions": 91, "deletions": 128, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9d2cced9d07f7a4e1f451f2d9c4405be5cda8c/libjava%2Fjava%2Futil%2FArrays.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9d2cced9d07f7a4e1f451f2d9c4405be5cda8c/libjava%2Fjava%2Futil%2FArrays.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FArrays.java?ref=9c9d2cced9d07f7a4e1f451f2d9c4405be5cda8c", "patch": "@@ -1,5 +1,5 @@\n /* Arrays.java -- Utility class with methods to operate on arrays\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -398,23 +398,18 @@ public static boolean equals(boolean[] a1, boolean[] a2)\n     if (a1 == a2)\n       return true;\n \n-    try\n+    if (null == a1 || null == a2)\n+      return false;\n+    \n+    // If they're the same length, test each element\n+    if (a1.length == a2.length)\n       {\n-        // If they're the same length, test each element\n-        if (a1.length == a2.length)\n-          {\n-            int i = a1.length;\n-            while (--i >= 0)\n-              if (a1[i] != a2[i])\n-                return false;\n-            return true;\n-          }\n-      }\n-    catch (NullPointerException e)\n-      {\n-        // If one is null, we get a harmless NullPointerException\n+\tint i = a1.length;\n+\twhile (--i >= 0)\n+\t  if (a1[i] != a2[i])\n+\t    return false;\n+\treturn true;\n       }\n-\n     return false;\n   }\n \n@@ -433,21 +428,17 @@ public static boolean equals(byte[] a1, byte[] a2)\n     if (a1 == a2)\n       return true;\n \n-    try\n-      {\n-        // If they're the same length, test each element\n-        if (a1.length == a2.length)\n-          {\n-            int i = a1.length;\n-            while (--i >= 0)\n-              if (a1[i] != a2[i])\n-                return false;\n-            return true;\n-          }\n-      }\n-    catch (NullPointerException e)\n+    if (null == a1 || null == a2)\n+      return false;\n+\n+    // If they're the same length, test each element\n+    if (a1.length == a2.length)\n       {\n-        // If one is null, we get a harmless NullPointerException\n+\tint i = a1.length;\n+\twhile (--i >= 0)\n+\t  if (a1[i] != a2[i])\n+\t    return false;\n+\treturn true;\n       }\n     return false;\n   }\n@@ -467,21 +458,17 @@ public static boolean equals(char[] a1, char[] a2)\n     if (a1 == a2)\n       return true;\n \n-    try\n+    if (null == a1 || null == a2)\n+      return false;\n+    \n+    // If they're the same length, test each element\n+    if (a1.length == a2.length)\n       {\n-        // If they're the same length, test each element\n-        if (a1.length == a2.length)\n-          {\n-            int i = a1.length;\n-            while (--i >= 0)\n-              if (a1[i] != a2[i])\n-                return false;\n-            return true;\n-          }\n-      }\n-    catch (NullPointerException e)\n-      {\n-        // If one is null, we get a harmless NullPointerException\n+\tint i = a1.length;\n+\twhile (--i >= 0)\n+\t  if (a1[i] != a2[i])\n+\t    return false;\n+\treturn true;\n       }\n     return false;\n   }\n@@ -501,21 +488,17 @@ public static boolean equals(short[] a1, short[] a2)\n     if (a1 == a2)\n       return true;\n \n-    try\n-      {\n-        // If they're the same length, test each element\n-        if (a1.length == a2.length)\n-          {\n-            int i = a1.length;\n-            while (--i >= 0)\n-              if (a1[i] != a2[i])\n-                return false;\n-            return true;\n-          }\n-      }\n-    catch (NullPointerException e)\n+    if (null == a1 || null == a2)\n+      return false;\n+\n+    // If they're the same length, test each element\n+    if (a1.length == a2.length)\n       {\n-        // If one is null, we get a harmless NullPointerException\n+\tint i = a1.length;\n+\twhile (--i >= 0)\n+\t  if (a1[i] != a2[i])\n+\t    return false;\n+\treturn true;\n       }\n     return false;\n   }\n@@ -535,21 +518,17 @@ public static boolean equals(int[] a1, int[] a2)\n     if (a1 == a2)\n       return true;\n \n-    try\n-      {\n-        // If they're the same length, test each element\n-        if (a1.length == a2.length)\n-          {\n-            int i = a1.length;\n-            while (--i >= 0)\n-              if (a1[i] != a2[i])\n-                return false;\n-            return true;\n-          }\n-      }\n-    catch (NullPointerException e)\n+    if (null == a1 || null == a2)\n+      return false;\n+\n+    // If they're the same length, test each element\n+    if (a1.length == a2.length)\n       {\n-        // If one is null, we get a harmless NullPointerException\n+\tint i = a1.length;\n+\twhile (--i >= 0)\n+\t  if (a1[i] != a2[i])\n+\t    return false;\n+\treturn true;\n       }\n     return false;\n   }\n@@ -569,21 +548,17 @@ public static boolean equals(long[] a1, long[] a2)\n     if (a1 == a2)\n       return true;\n \n-    try\n-      {\n-        // If they're the same length, test each element\n-        if (a1.length == a2.length)\n-          {\n-            int i = a1.length;\n-            while (--i >= 0)\n-              if (a1[i] != a2[i])\n-                return false;\n-            return true;\n-          }\n-      }\n-    catch (NullPointerException e)\n+    if (null == a1 || null == a2)\n+      return false;\n+\n+    // If they're the same length, test each element\n+    if (a1.length == a2.length)\n       {\n-        // If one is null, we get a harmless NullPointerException\n+\tint i = a1.length;\n+\twhile (--i >= 0)\n+\t  if (a1[i] != a2[i])\n+\t    return false;\n+\treturn true;\n       }\n     return false;\n   }\n@@ -603,22 +578,18 @@ public static boolean equals(float[] a1, float[] a2)\n     if (a1 == a2)\n       return true;\n \n+    if (null == a1 || null == a2)\n+      return false;\n+\n     // Must use Float.compare to take into account NaN, +-0.\n-    try\n+    // If they're the same length, test each element\n+    if (a1.length == a2.length)\n       {\n-        // If they're the same length, test each element\n-        if (a1.length == a2.length)\n-          {\n-            int i = a1.length;\n-            while (--i >= 0)\n-              if (Float.compare(a1[i], a2[i]) != 0)\n-                return false;\n-            return true;\n-          }\n-      }\n-    catch (NullPointerException e)\n-      {\n-        // If one is null, we get a harmless NullPointerException\n+\tint i = a1.length;\n+\twhile (--i >= 0)\n+\t  if (Float.compare(a1[i], a2[i]) != 0)\n+\t    return false;\n+\treturn true;\n       }\n     return false;\n   }\n@@ -638,22 +609,18 @@ public static boolean equals(double[] a1, double[] a2)\n     if (a1 == a2)\n       return true;\n \n+    if (null == a1 || null == a2)\n+      return false;\n+    \n     // Must use Double.compare to take into account NaN, +-0.\n-    try\n-      {\n-        // If they're the same length, test each element\n-        if (a1.length == a2.length)\n-          {\n-            int i = a1.length;\n-            while (--i >= 0)\n-              if (Double.compare(a1[i], a2[i]) != 0)\n-                return false;\n-            return true;\n-          }\n-      }\n-    catch (NullPointerException e)\n+    // If they're the same length, test each element\n+    if (a1.length == a2.length)\n       {\n-        // If one is null, we get a harmless NullPointerException\n+\tint i = a1.length;\n+\twhile (--i >= 0)\n+\t  if (Double.compare(a1[i], a2[i]) != 0)\n+\t    return false;\n+\treturn true;\n       }\n     return false;\n   }\n@@ -674,21 +641,17 @@ public static boolean equals(Object[] a1, Object[] a2)\n     if (a1 == a2)\n       return true;\n \n-    try\n-      {\n-        // If they're the same length, test each element\n-        if (a1.length == a2.length)\n-          {\n-            int i = a1.length;\n-            while (--i >= 0)\n-              if (! AbstractCollection.equals(a1[i], a2[i]))\n-                return false;\n-            return true;\n-          }\n-      }\n-    catch (NullPointerException e)\n+    if (null == a1 || null == a2)\n+      return false;\n+    \n+    // If they're the same length, test each element\n+    if (a1.length == a2.length)\n       {\n-        // If one is null, we get a harmless NullPointerException\n+\tint i = a1.length;\n+\twhile (--i >= 0)\n+\t  if (! AbstractCollection.equals(a1[i], a2[i]))\n+\t    return false;\n+\treturn true;\n       }\n     return false;\n   }"}]}