{"sha": "d2c192ad64b8a1685abe92cd60bc4c496c315cea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJjMTkyYWQ2NGI4YTE2ODVhYmU5MmNkNjBiYzRjNDk2YzMxNWNlYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-08-12T06:52:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-08-12T06:52:30Z"}, "message": "lang-options.h: Add -fms-extensions.\n\n\t* lang-options.h: Add -fms-extensions.\n\t* cp-tree.h: Declare flag_ms_extensions.\n\t* decl2.c: Define it.\n\t* class.c (instantiate_type): Don't complain about taking the address\n\tof a bound member function if -fms-extensions.\n\t* typeck.c (build_unary_op): Likewise.\n\t* decl.c (grokdeclarator): Or about implicit int.\n\t* init.c (resolve_offset_ref): Or about implicit '&'.\n\nFrom-SVN: r28684", "tree": {"sha": "fe1d0b302af8614440b99979fc35a50e7fcad57b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe1d0b302af8614440b99979fc35a50e7fcad57b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2c192ad64b8a1685abe92cd60bc4c496c315cea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2c192ad64b8a1685abe92cd60bc4c496c315cea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2c192ad64b8a1685abe92cd60bc4c496c315cea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2c192ad64b8a1685abe92cd60bc4c496c315cea/comments", "author": null, "committer": null, "parents": [{"sha": "631cf95d8e7cf756b209e2474483eac652d53203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/631cf95d8e7cf756b209e2474483eac652d53203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/631cf95d8e7cf756b209e2474483eac652d53203"}], "stats": {"total": 102, "additions": 64, "deletions": 38}, "files": [{"sha": "d3cee0da0a8900806a41709c2853cae5b4b76b21", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c192ad64b8a1685abe92cd60bc4c496c315cea/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c192ad64b8a1685abe92cd60bc4c496c315cea/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d2c192ad64b8a1685abe92cd60bc4c496c315cea", "patch": "@@ -1,3 +1,14 @@\n+1999-08-11  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* lang-options.h: Add -fms-extensions.\n+\t* cp-tree.h: Declare flag_ms_extensions.\n+\t* decl2.c: Define it.\n+\t* class.c (instantiate_type): Don't complain about taking the address\n+\tof a bound member function if -fms-extensions.\n+\t* typeck.c (build_unary_op): Likewise.\n+\t* decl.c (grokdeclarator): Or about implicit int.\n+\t* init.c (resolve_offset_ref): Or about implicit '&'.\n+\n 1999-08-11  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (minimal_parse_mode): Remove."}, {"sha": "47f22a34b9b0a6addd61939a9e9f878b51cd1af1", "filename": "gcc/cp/class.c", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c192ad64b8a1685abe92cd60bc4c496c315cea/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c192ad64b8a1685abe92cd60bc4c496c315cea/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=d2c192ad64b8a1685abe92cd60bc4c496c315cea", "patch": "@@ -5123,32 +5123,27 @@ instantiate_type (lhstype, rhs, flags)\n \n     case COMPONENT_REF:\n       {\n-\ttree field = TREE_OPERAND (rhs, 1);\n-\ttree r;\n+\ttree r = instantiate_type (lhstype, TREE_OPERAND (rhs, 1), flags);\n \n-\tr = instantiate_type (lhstype, field, flags);\n-\n-\tif (r != error_mark_node && TYPE_PTRMEMFUNC_P (lhstype))\n+\tif (r != error_mark_node && TYPE_PTRMEMFUNC_P (lhstype)\n+\t    && complain && !flag_ms_extensions)\n \t  {\n-\t    if (complain)\n-\t      {\n-\t        tree t = TYPE_PTRMEMFUNC_OBJECT_TYPE (lhstype);\n-\n-\t        if (TREE_CODE (field) == OVERLOAD)\n-\t          field = OVL_FUNCTION (field);\n-\t        if (TREE_CODE (field) == FUNCTION_DECL)\n-\t          {\n-\t\t    cp_pedwarn (\"object-dependent reference `%E' can only be used in a call\",\n-\t\t    \t      DECL_NAME (field));\n-  \t    \t    cp_pedwarn (\"  to form a pointer to member function, say `&%T::%E'\",\n-\t\t    \t      t, DECL_NAME (field));\n-    \t          }\n-\t        else\n-\t          cp_pedwarn (\"object-dependent reference can only be used in a call\");\n-\t      }\n-\t    return r;\n+\t    /* Note: we check this after the recursive call to avoid\n+\t       complaining about cases where overload resolution fails.  */\n+\n+\t    tree t = TREE_TYPE (TREE_OPERAND (rhs, 0));\n+\t    tree fn = PTRMEM_CST_MEMBER (r);\n+\n+\t    my_friendly_assert (TREE_CODE (r) == PTRMEM_CST, 990811);\n+\n+\t    cp_pedwarn\n+\t      (\"object-dependent reference to `%E' can only be used in a call\",\n+\t       DECL_NAME (fn));\n+\t    cp_pedwarn\n+\t      (\"  to form a pointer to member function, say `&%T::%E'\",\n+\t       t, DECL_NAME (fn));\n \t  }\n-\t\n+\n \treturn r;\n       }\n "}, {"sha": "e752fdceced96eb30078f499f680facf46b20bae", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c192ad64b8a1685abe92cd60bc4c496c315cea/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c192ad64b8a1685abe92cd60bc4c496c315cea/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d2c192ad64b8a1685abe92cd60bc4c496c315cea", "patch": "@@ -2149,6 +2149,9 @@ extern int strict_prototypes_lang_c, strict_prototypes_lang_cplusplus;\n    applies, use the value of the label.  */\n extern int flag_labels_ok;\n \n+/* Nonzero means allow Microsoft extensions without a pedwarn.  */\n+extern int flag_ms_extensions;\n+\n /* Non-zero means to collect statistics which might be expensive\n    and to print them when we are done.  */\n extern int flag_detailed_statistics;"}, {"sha": "b6e66a954ec4156fe37be21b103694883a608cea", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c192ad64b8a1685abe92cd60bc4c496c315cea/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c192ad64b8a1685abe92cd60bc4c496c315cea/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d2c192ad64b8a1685abe92cd60bc4c496c315cea", "patch": "@@ -9426,7 +9426,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t\t && in_namespace == NULL_TREE\n \t\t\t && current_namespace == global_namespace);\n \n-\t  if (in_system_header)\n+\t  if (in_system_header || flag_ms_extensions)\n \t    /* Allow it, sigh.  */;\n \t  else if (pedantic || ! is_main)\n \t    cp_pedwarn (\"ANSI C++ forbids declaration `%D' with no type\","}, {"sha": "217b7831d86b9efb910c963af70640378d7bf1b0", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c192ad64b8a1685abe92cd60bc4c496c315cea/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c192ad64b8a1685abe92cd60bc4c496c315cea/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=d2c192ad64b8a1685abe92cd60bc4c496c315cea", "patch": "@@ -369,6 +369,10 @@ int strict_prototypes_lang_c, strict_prototypes_lang_cplusplus = 1;\n \n int flag_labels_ok;\n \n+/* Nonzero means allow Microsoft extensions without a pedwarn.  */\n+\n+int flag_ms_extensions;\n+\n /* Non-zero means to collect statistics which might be expensive\n    and to print them when we are done.  */\n int flag_detailed_statistics;\n@@ -510,6 +514,7 @@ lang_f_options[] =\n   {\"implicit-inline-templates\", &flag_implicit_inline_templates, 1},\n   {\"implicit-templates\", &flag_implicit_templates, 1},\n   {\"labels-ok\", &flag_labels_ok, 1},\n+  {\"ms-extensions\", &flag_ms_extensions, 1},\n   {\"nonansi-builtins\", &flag_no_nonansi_builtin, 0},\n   {\"operator-names\", &flag_operator_names, 1},\n   {\"optional-diags\", &flag_optional_diags, 1},"}, {"sha": "98b67eecf5e6b4655c6a3696cdf1e002b5a906ad", "filename": "gcc/cp/init.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c192ad64b8a1685abe92cd60bc4c496c315cea/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c192ad64b8a1685abe92cd60bc4c496c315cea/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=d2c192ad64b8a1685abe92cd60bc4c496c315cea", "patch": "@@ -1755,13 +1755,15 @@ resolve_offset_ref (exp)\n \n   if (BASELINK_P (member))\n     {\n-      cp_pedwarn (\"assuming & on overloaded member function\");\n+      if (! flag_ms_extensions)\n+\tcp_pedwarn (\"assuming & on overloaded member function\");\n       return build_unary_op (ADDR_EXPR, exp, 0);\n     }\n \n   if (TREE_CODE (TREE_TYPE (member)) == METHOD_TYPE)\n     {\n-      cp_pedwarn (\"assuming & on `%E'\", member);\n+      if (! flag_ms_extensions)\n+\tcp_pedwarn (\"assuming & on `%E'\", member);\n       return build_unary_op (ADDR_EXPR, exp, 0);\n     }\n "}, {"sha": "ca7e436dd757638d506e77abc9016d2855315a4d", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c192ad64b8a1685abe92cd60bc4c496c315cea/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c192ad64b8a1685abe92cd60bc4c496c315cea/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=d2c192ad64b8a1685abe92cd60bc4c496c315cea", "patch": "@@ -72,6 +72,8 @@ DEFINE_LANG_NAME (\"C++\")\n   { \"-fno-labels-ok\", \"\" },\n   { \"-fmemoize-lookups\", \"\" },\n   { \"-fno-memoize-lookups\", \"\" },\n+  { \"-fms-extensions\", \"Don't pedwarn about uses of Microsoft extensions\" },\n+  { \"-fno-ms-extensions\", \"\" },\n   { \"-fname-mangling-version-\", \"\" },\n   { \"-fnew-abi\", \"Enable experimental ABI changes\" },\n   { \"-fno-new-abi\", \"\" },"}, {"sha": "37239365a8cb4806deeba3b30e889b3d679d76a3", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c192ad64b8a1685abe92cd60bc4c496c315cea/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c192ad64b8a1685abe92cd60bc4c496c315cea/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d2c192ad64b8a1685abe92cd60bc4c496c315cea", "patch": "@@ -4795,21 +4795,29 @@ build_unary_op (code, xarg, noconvert)\n \t  && OVL_NEXT (TREE_OPERAND (arg, 1)) == NULL_TREE)\n \t{\n \t  /* They're trying to take the address of a unique non-static\n-\t     member function.  This is ill-formed, but let's try to DTRT.  */\n-\t  tree base, name;\n+\t     member function.  This is ill-formed, but let's try to DTRT.\n+\t     Note: We only handle unique functions here because we don't\n+\t     want to complain if there's a static overload; non-unique\n+\t     cases will be handled by instantiate_type.  But we need to\n+\t     handle this case here to allow casts on the resulting PMF.  */\n \n-\t  if (current_class_type\n-\t      && TREE_OPERAND (arg, 0) == current_class_ref)\n-\t    /* An expression like &memfn.  */\n-\t    pedwarn (\"taking the address of a non-static member function\");\n-\t  else\n-\t    pedwarn (\"taking the address of a bound member function\");\n+\t  tree base = TREE_TYPE (TREE_OPERAND (arg, 0));\n+\t  tree name = DECL_NAME (OVL_CURRENT (TREE_OPERAND (arg, 1)));\n \n-\t  base = TREE_TYPE (TREE_OPERAND (arg, 0));\n-\t  name = DECL_NAME (OVL_CURRENT (TREE_OPERAND (arg, 1)));\n+\t  if (! flag_ms_extensions)\n+\t    {\n+\t      if (current_class_type\n+\t\t  && TREE_OPERAND (arg, 0) == current_class_ref)\n+\t\t/* An expression like &memfn.  */\n+\t\tpedwarn (\"taking the address of a non-static member function\");\n+\t      else\n+\t\tpedwarn (\"taking the address of a bound member function\");\n+\n+\t      cp_pedwarn\n+\t\t(\"  to form a pointer to member function, say `&%T::%D'\",\n+\t\t base, name);\n+\t    }\n \n-\t  cp_pedwarn (\"  to form a pointer to member function, say `&%T::%D'\",\n-\t\t      base, name);\n \t  arg = build_offset_ref (base, name);\n \t}\n "}]}