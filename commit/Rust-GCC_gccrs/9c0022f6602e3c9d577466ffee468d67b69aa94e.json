{"sha": "9c0022f6602e3c9d577466ffee468d67b69aa94e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMwMDIyZjY2MDJlM2M5ZDU3NzQ2NmZmZWU0NjhkNjdiNjlhYTk0ZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-25T01:32:47Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-25T01:32:47Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r830", "tree": {"sha": "5fac6234763974fa36744632c6a6a21e0dd8b00c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fac6234763974fa36744632c6a6a21e0dd8b00c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c0022f6602e3c9d577466ffee468d67b69aa94e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0022f6602e3c9d577466ffee468d67b69aa94e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0022f6602e3c9d577466ffee468d67b69aa94e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0022f6602e3c9d577466ffee468d67b69aa94e/comments", "author": null, "committer": null, "parents": [{"sha": "4bc06dcd05eea25bcf8d1bedc923911e61fb54d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc06dcd05eea25bcf8d1bedc923911e61fb54d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bc06dcd05eea25bcf8d1bedc923911e61fb54d3"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "571c4aee2b7c6bb09145546b7ae059f3b7db1281", "filename": "gcc/Makefile.in", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0022f6602e3c9d577466ffee468d67b69aa94e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0022f6602e3c9d577466ffee468d67b69aa94e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9c0022f6602e3c9d577466ffee468d67b69aa94e", "patch": "@@ -356,7 +356,7 @@ STAGESTUFF = *.o insn-flags.h insn-config.h insn-codes.h \\\n  genemit genoutput genrecog genextract genflags gencodes genconfig genpeep \\\n  genattrtab genattr \\\n  $(GCC_PASSES) $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross cccp \\\n- cc1plus cc1obj enquire protoize unprotoize specs collect2\n+ cc1plus cc1obj enquire protoize unprotoize specs collect2 $(USE_COLLECT2)\n \n # Members of libgcc1.a.\n LIB1FUNCS = _mulsi3 _udivsi3 _divsi3 _umodsi3 _modsi3 \\\n@@ -466,6 +466,7 @@ float.h: enquire\n enquire: enquire.o $(GCC_PARTS)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ENQUIRE_LDFLAGS) enquire.o -o $@\n enquire.o: $(srcdir)/enquire.c $(GCC_PASSES)\n+\tif [ \"$(srcdir)\" != \".\" ]; then rm -f enquire.c; else false; fi\n \t-cp $(srcdir)/enquire.c . > /dev/null 2>&1\n # Breaking this line caused a problem with one version of GNU make.\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(ENQUIRE_CFLAGS) -I. -c enquire.c\n@@ -650,7 +651,7 @@ cp-parse.o : $(srcdir)/cp-parse.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n   `echo $(srcdir)/cp-parse.c | sed 's,^\\./,,'`\n \n $(srcdir)/cp-parse.c $(srcdir)/cp-parse.h : $(srcdir)/cp-parse.y\n-\t@echo expect 30 shift/reduce conflicts and 14 reduce/reduce conflicts\n+\t@echo expect 30 shift/reduce conflicts and 15 reduce/reduce conflicts\n \tcd $(srcdir); $(BISON) $(BISONFLAGS) -d -o cp-parse.c cp-parse.y\n \n cp-spew.o : cp-spew.c $(CONFIG_H) $(CPLUS_TREE_H) \\\n@@ -1083,6 +1084,7 @@ unprotoize: unprotoize.o getopt.o getopt1.o getpwd.o version.o $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) \\\n \t  unprotoize.o getopt.o getopt1.o getpwd.o version.o $(LIBS) -o $@\n unprotoize.o:\t$(srcdir)/protoize.c getopt.h $(CONFIG_H)\n+\t-rm -f unprotoize.c\n \tcp $(srcdir)/protoize.c unprotoize.c\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n           -DGCC_INCLUDE_DIR=\\\"$(libsubdir)/include\\\" \\\n@@ -1091,7 +1093,6 @@ unprotoize.o:\t$(srcdir)/protoize.c getopt.h $(CONFIG_H)\n \t  -DLOCAL_INCLUDE_DIR=\\\"$(prefix)/include\\\" \\\n \t  -DSTD_PROTO_DIR=\\\"$(libsubdir)\\\" \\\n \t  -DUNPROTOIZE unprotoize.c\n-\trm -f unprotoize.c\n \n getopt.o: $(srcdir)/getopt.c getopt.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/getopt.c\n@@ -1117,6 +1118,28 @@ SYSCALLS.c.X: $(srcdir)/sys-types.h $(srcdir)/sys-protos.h $(GCC_PASSES)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  -aux-info $@ -S -o /dev/null SYSCALLS.c\n \t-rm -f SYSCALLS.c\n+\n+test-protoize-simple: ./protoize ./unprotoize $(GCC_PASSES)\n+\t-rm -f tmp-protoize.*\n+\tcp $(srcdir)/protoize.c tmp-protoize.c\n+\tchmod u+w tmp-protoize.c\n+\t./protoize -N -B ./ -c \"-B./ -Wall -Wwrite-strings $(CFLAGS) \\\n+\t  $(INCLUDES) \\\n+\t  -DGCC_INCLUDE_DIR=0 \\\n+\t  -DGPLUSPLUS_INCLUDE_DIR=0 \\\n+\t  -DCROSS_INCLUDE_DIR=0 \\\n+\t  -DSTD_PROTO_DIR=0\" tmp-protoize.c\n+\t@echo Expect 324 lines of differences.\n+\tdiff $(srcdir)/protoize.c tmp-protoize.c | wc -l\n+\t./unprotoize -N -c \"-B./ -Wall -Wwrite-strings $(CFLAGS) \\\n+\t  $(INCLUDES) \\\n+\t  -DGCC_INCLUDE_DIR=0 \\\n+\t  -DGPLUSPLUS_INCLUDE_DIR=0 \\\n+\t  -DCROSS_INCLUDE_DIR=0 \\\n+\t  -DSTD_PROTO_DIR=0\" tmp-protoize.c\n+\t@echo Expect zero differences.\n+\tdiff $(srcdir)/protoize.c tmp-protoize.c | cat\n+\t-rm -f tmp-protoize.*\n \f\n # Remake the info files.\n \n@@ -1407,6 +1430,8 @@ install-common-headers: install-dir $(USER_H) gvarargs.h gstdarg.h gstddef.h\n # Copy byteorder.h into the object file directory \n # so that fixinc.svr4 can get at it if necessary.\n # If the dirs are the same, this won't do anything.\n+# Delete file first in case it is read-only\n+\tif [ \"$(srcdir)\" != \".\" ]; then rm -f byteorder.h; else false; fi\n \t-cp $(srcdir)/byteorder.h .\n \n # $(libsubdir)/include:"}]}