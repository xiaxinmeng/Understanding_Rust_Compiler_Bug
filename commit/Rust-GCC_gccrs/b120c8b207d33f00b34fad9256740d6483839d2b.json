{"sha": "b120c8b207d33f00b34fad9256740d6483839d2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEyMGM4YjIwN2QzM2YwMGIzNGZhZDkyNTY3NDBkNjQ4MzgzOWQyYg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-03-01T08:56:31Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-03-01T08:56:31Z"}, "message": "re PR fortran/84538 (Array of derived type elements incorrectly accessed in function)\n\n2018-03-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/84538\n\t* class.c (class_array_ref_detected): Remove the condition that\n\tthere be no reference after the array reference.\n\t(find_intrinsic_vtab): Remove excess whitespace.\n\t* trans-array.c (gfc_conv_scalarized_array_ref): Rename 'tmp'\n\tas 'base and call build_class_array_ref earlier.\n\n2018-03-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/84538\n\t* gfortran.dg/class_array_23.f03: New test.\n\nFrom-SVN: r258097", "tree": {"sha": "db01cf2ce08c07b6688a46595701b58ab7d140b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db01cf2ce08c07b6688a46595701b58ab7d140b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b120c8b207d33f00b34fad9256740d6483839d2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b120c8b207d33f00b34fad9256740d6483839d2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b120c8b207d33f00b34fad9256740d6483839d2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b120c8b207d33f00b34fad9256740d6483839d2b/comments", "author": null, "committer": null, "parents": [{"sha": "2514222436ea242510fd6457c0d42e60af4d3535", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2514222436ea242510fd6457c0d42e60af4d3535", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2514222436ea242510fd6457c0d42e60af4d3535"}], "stats": {"total": 71, "additions": 60, "deletions": 11}, "files": [{"sha": "fd522b657417a6c8cff639ec25f27e82cee5d7f5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b120c8b207d33f00b34fad9256740d6483839d2b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b120c8b207d33f00b34fad9256740d6483839d2b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b120c8b207d33f00b34fad9256740d6483839d2b", "patch": "@@ -1,3 +1,12 @@\n+2018-03-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/84538\n+\t* class.c (class_array_ref_detected): Remove the condition that\n+\tthere be no reference after the array reference.\n+\t(find_intrinsic_vtab): Remove excess whitespace.\n+\t* trans-array.c (gfc_conv_scalarized_array_ref): Rename 'tmp'\n+\tas 'base and call build_class_array_ref earlier.\n+\n 2018-02-28  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/83901"}, {"sha": "2eae7f0f3515f8af237627625a9a038c966f9e07", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b120c8b207d33f00b34fad9256740d6483839d2b/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b120c8b207d33f00b34fad9256740d6483839d2b/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=b120c8b207d33f00b34fad9256740d6483839d2b", "patch": "@@ -308,7 +308,6 @@ class_array_ref_detected (gfc_ref *ref, bool *full_array)\n \t    *full_array = true;\n \t}\n       else if (ref->next && ref->next->type == REF_ARRAY\n-\t    && !ref->next->next\n \t    && ref->type == REF_COMPONENT\n \t    && ref->next->u.ar.type != AR_ELEMENT)\n \t{\n@@ -2630,7 +2629,7 @@ find_intrinsic_vtab (gfc_typespec *ts)\n     {\n       char tname[GFC_MAX_SYMBOL_LEN+1];\n       char *name;\n-      \n+\n       /* Encode all types as TYPENAME_KIND_ including especially character\n \t arrays, whose length is now consistently stored in the _len component\n \t of the class-variable.  */"}, {"sha": "171cebdfd68f5f1aae5e6851ef57413bc31a5375", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b120c8b207d33f00b34fad9256740d6483839d2b/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b120c8b207d33f00b34fad9256740d6483839d2b/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=b120c8b207d33f00b34fad9256740d6483839d2b", "patch": "@@ -3376,7 +3376,7 @@ gfc_conv_scalarized_array_ref (gfc_se * se, gfc_array_ref * ar)\n   gfc_array_info *info;\n   tree decl = NULL_TREE;\n   tree index;\n-  tree tmp;\n+  tree base;\n   gfc_ss *ss;\n   gfc_expr *expr;\n   int n;\n@@ -3396,6 +3396,12 @@ gfc_conv_scalarized_array_ref (gfc_se * se, gfc_array_ref * ar)\n     index = fold_build2_loc (input_location, PLUS_EXPR, gfc_array_index_type,\n \t\t\t     index, info->offset);\n \n+  base = build_fold_indirect_ref_loc (input_location, info->data);\n+\n+  /* Use the vptr 'size' field to access the element of a class array.  */\n+  if (build_class_array_ref (se, base, index))\n+    return;\n+\n   if (expr && ((is_subref_array (expr)\n \t\t&& GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (info->descriptor)))\n \t       || (expr->ts.deferred && (expr->expr_type == EXPR_VARIABLE\n@@ -3420,14 +3426,7 @@ gfc_conv_scalarized_array_ref (gfc_se * se, gfc_array_ref * ar)\n \tdecl = info->descriptor;\n     }\n \n-  tmp = build_fold_indirect_ref_loc (input_location, info->data);\n-\n-  /* Use the vptr 'size' field to access a class the element of a class\n-     array.  */\n-  if (build_class_array_ref (se, tmp, index))\n-    return;\n-\n-  se->expr = gfc_build_array_ref (tmp, index, decl);\n+  se->expr = gfc_build_array_ref (base, index, decl);\n }\n \n "}, {"sha": "5347544041592de750ee467a2ab820f30c0732aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b120c8b207d33f00b34fad9256740d6483839d2b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b120c8b207d33f00b34fad9256740d6483839d2b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b120c8b207d33f00b34fad9256740d6483839d2b", "patch": "@@ -1,3 +1,8 @@\n+2018-03-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/84538\n+\t* gfortran.dg/class_array_23.f03: New test.\n+\n 2018-03-01  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR rtl-optimization/84528"}, {"sha": "f4afe911be6cc9fb9b393def9f53669ab9bfa724", "filename": "gcc/testsuite/gfortran.dg/class_array_23.f03", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b120c8b207d33f00b34fad9256740d6483839d2b/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_23.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b120c8b207d33f00b34fad9256740d6483839d2b/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_23.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_23.f03?ref=b120c8b207d33f00b34fad9256740d6483839d2b", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR84538 in which the scalarizer was taking the size\n+! of 't', rather than 'te', to generate array references.\n+!\n+! Contributed by Andrew Benson  <abensonca@gmail.com>\n+!\n+module bugMod\n+  public\n+  type :: t\n+     integer :: i\n+  end type t\n+  type, extends(t) :: te\n+     integer :: j\n+  end type te\n+contains\n+  subroutine check(n)\n+    implicit none\n+    class(t), intent(inout), dimension(:) :: n\n+    integer :: i(2)\n+    i = n%i ! Original testcase had this in a write statement. However,\n+            ! it is the scalarizer that is getting the span wrong and so\n+            ! this assignment failed too.\n+    if (any (i .ne. [8,3])) stop 1\n+    return\n+  end subroutine check\n+end module bugMod\n+\n+program bug\n+  use bugMod\n+  class(t), allocatable, dimension(:) :: n\n+  allocate(te :: n(2))\n+  n(1:2)%i=[8,3]\n+  if (any (n%i .ne. [8,3])) stop 2\n+  call check(n)\n+  deallocate (n)\n+end program bug"}]}