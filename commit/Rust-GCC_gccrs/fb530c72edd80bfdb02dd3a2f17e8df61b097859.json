{"sha": "fb530c72edd80bfdb02dd3a2f17e8df61b097859", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI1MzBjNzJlZGQ4MGJmZGIwMmRkM2EyZjE3ZThkZjYxYjA5Nzg1OQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-11-02T23:21:22Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-11-02T23:21:22Z"}, "message": "re PR target/23303 (4.1 generates sall + addl instead of leal)\n\n\tPR target/23303\n\t* i386.md: Add peep2 for simplyfing array accesses.\n\t* gcc.dg/i386-lea.c: New test\n\nFrom-SVN: r106406", "tree": {"sha": "7f731b36993fc10c20e0e13a28c632c571fde33b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f731b36993fc10c20e0e13a28c632c571fde33b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb530c72edd80bfdb02dd3a2f17e8df61b097859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb530c72edd80bfdb02dd3a2f17e8df61b097859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb530c72edd80bfdb02dd3a2f17e8df61b097859", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb530c72edd80bfdb02dd3a2f17e8df61b097859/comments", "author": null, "committer": null, "parents": [{"sha": "d98ad4101fa724d2d7f7364405f31fd3e8090371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d98ad4101fa724d2d7f7364405f31fd3e8090371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d98ad4101fa724d2d7f7364405f31fd3e8090371"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "afca62bfa1ae325279eba422e30cb9ec4a35e5b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb530c72edd80bfdb02dd3a2f17e8df61b097859/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb530c72edd80bfdb02dd3a2f17e8df61b097859/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb530c72edd80bfdb02dd3a2f17e8df61b097859", "patch": "@@ -1,3 +1,8 @@\n+2005-11-02  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR target/23303\n+\t* i386.md: Add peep2 for simplyfing array accesses.\n+\n 2005-11-02  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \tPR target/24615"}, {"sha": "19d874bce845726ab0eca3097404d653b422bd64", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb530c72edd80bfdb02dd3a2f17e8df61b097859/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb530c72edd80bfdb02dd3a2f17e8df61b097859/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=fb530c72edd80bfdb02dd3a2f17e8df61b097859", "patch": "@@ -19785,6 +19785,64 @@\n   if (!rtx_equal_p (operands[0], operands[1]))\n     emit_move_insn (operands[0], operands[1]);\n })\n+\n+;; After splitting up read-modify operations, array accesses with memory\n+;; operands might end up in form:\n+;;  sall    $2, %eax\n+;;  movl    4(%esp), %edx\n+;;  addl    %edx, %eax\n+;; instead of pre-splitting:\n+;;  sall    $2, %eax\n+;;  addl    4(%esp), %eax\n+;; Turn it into:\n+;;  movl    4(%esp), %edx\n+;;  leal    (%edx,%eax,4), %eax\n+\n+(define_peephole2\n+  [(parallel [(set (match_operand 0 \"register_operand\" \"\")\n+\t\t   (ashift (match_operand 1 \"register_operand\" \"\")\n+\t\t\t   (match_operand 2 \"const_int_operand\" \"\")))\n+\t       (clobber (reg:CC FLAGS_REG))])\n+   (set (match_operand 3 \"register_operand\")\n+        (match_operand 4 \"x86_64_general_operand\" \"\"))\n+   (parallel [(set (match_operand 5 \"register_operand\" \"\")\n+\t\t   (plus (match_operand 6 \"register_operand\" \"\")\n+\t\t\t (match_operand 7 \"register_operand\" \"\")))\n+\t\t   (clobber (reg:CC FLAGS_REG))])]\n+  \"INTVAL (operands[2]) >= 0 && INTVAL (operands[2]) <= 3\n+   /* Validate MODE for lea.  */\n+   && ((!TARGET_PARTIAL_REG_STALL\n+\t&& (GET_MODE (operands[0]) == QImode\n+\t    || GET_MODE (operands[0]) == HImode))\n+       || GET_MODE (operands[0]) == SImode \n+       || (TARGET_64BIT && GET_MODE (operands[0]) == DImode))\n+   /* We reorder load and the shift.  */\n+   && !rtx_equal_p (operands[1], operands[3])\n+   && !reg_overlap_mentioned_p (operands[0], operands[4])\n+   /* Last PLUS must consist of operand 0 and 3.  */\n+   && !rtx_equal_p (operands[0], operands[3])\n+   && (rtx_equal_p (operands[3], operands[6])\n+       || rtx_equal_p (operands[3], operands[7]))\n+   && (rtx_equal_p (operands[0], operands[6])\n+       || rtx_equal_p (operands[0], operands[7]))\n+   /* The intermediate operand 0 must die or be same as output.  */\n+   && (rtx_equal_p (operands[0], operands[5])\n+       || peep2_reg_dead_p (3, operands[0]))\"\n+  [(set (match_dup 3) (match_dup 4))\n+   (set (match_dup 0) (match_dup 1))]\n+{\n+  enum machine_mode mode = GET_MODE (operands[5]) == DImode ? DImode : SImode;\n+  int scale = 1 << INTVAL (operands[2]);\n+  rtx index = gen_lowpart (Pmode, operands[1]);\n+  rtx base = gen_lowpart (Pmode, operands[3]);\n+  rtx dest = gen_lowpart (mode, operands[5]);\n+\n+  operands[1] = gen_rtx_PLUS (Pmode, base,\n+  \t\t\t      gen_rtx_MULT (Pmode, index, GEN_INT (scale)));\n+  if (mode != Pmode)\n+    operands[1] = gen_rtx_SUBREG (mode, operands[1], 0);\n+  operands[0] = dest;\n+})\n \f\n ;; Call-value patterns last so that the wildcard operand does not\n ;; disrupt insn-recog's switch tables."}, {"sha": "058fcb30e3e8dba569058ed48f9f6616b110e372", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb530c72edd80bfdb02dd3a2f17e8df61b097859/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb530c72edd80bfdb02dd3a2f17e8df61b097859/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb530c72edd80bfdb02dd3a2f17e8df61b097859", "patch": "@@ -1,3 +1,8 @@\n+2005-11-02  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR target/23303\n+\t* gcc.dg/i386-lea.c: New test\n+\n 2005-11-02  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \tPR target/24615"}, {"sha": "61d9955f3e2f50ade49a94356be9c4ba2475bef7", "filename": "gcc/testsuite/gcc.dg/i386-lea.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb530c72edd80bfdb02dd3a2f17e8df61b097859/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-lea.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb530c72edd80bfdb02dd3a2f17e8df61b097859/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-lea.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-lea.c?ref=fb530c72edd80bfdb02dd3a2f17e8df61b097859", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -march=i686\" } */\n+/* { dg-final { scan-assembler \"leal\" } } */\n+typedef struct {\n+  char **visbuf;\n+  char **allbuf;\n+} TScreen;\n+\n+void\n+VTallocbuf(TScreen *screen, unsigned long savelines)\n+{\n+  screen->visbuf = &screen->allbuf[savelines];\n+}"}]}