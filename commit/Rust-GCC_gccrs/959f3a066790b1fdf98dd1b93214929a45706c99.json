{"sha": "959f3a066790b1fdf98dd1b93214929a45706c99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU5ZjNhMDY2NzkwYjFmZGY5OGRkMWI5MzIxNDkyOWE0NTcwNmM5OQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-03-08T21:57:56Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-03-08T21:57:56Z"}, "message": "calls.c (initialize_argument_info): Accept a pointer to CUMULATIVE_ARGS.\n\n        * calls.c (initialize_argument_info): Accept a pointer to\n        CUMULATIVE_ARGS.\n        (expand_call): Pass the address of CUMULATIVE_ARGS.\n\nFrom-SVN: r25646", "tree": {"sha": "36d98c674f67e8f27b6e7e4c11db170e4ef81c85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36d98c674f67e8f27b6e7e4c11db170e4ef81c85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/959f3a066790b1fdf98dd1b93214929a45706c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/959f3a066790b1fdf98dd1b93214929a45706c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/959f3a066790b1fdf98dd1b93214929a45706c99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/959f3a066790b1fdf98dd1b93214929a45706c99/comments", "author": null, "committer": null, "parents": [{"sha": "e4cbe00203c04fa60bc10398b9f310c3818a9947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4cbe00203c04fa60bc10398b9f310c3818a9947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4cbe00203c04fa60bc10398b9f310c3818a9947"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "d70c60fe80dbb4644f435541fe5b96a9de2d00dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/959f3a066790b1fdf98dd1b93214929a45706c99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/959f3a066790b1fdf98dd1b93214929a45706c99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=959f3a066790b1fdf98dd1b93214929a45706c99", "patch": "@@ -12,6 +12,10 @@ Mon Mar  8 16:04:44 1999  Jim Wilson  <wilson@cygnus.com>\n \n Mon Mar  8 15:27:42 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* calls.c (initialize_argument_info): Accept a pointer to \n+\tCUMULATIVE_ARGS.\n+\t(expand_call): Pass the address of CUMULATIVE_ARGS.\n+\n \t* rs6000/xm-sysv4.h (HOST_BITS_PER_LONGLONG): Remove #if 0.\n \n \t* mn10300.h (CASE_DROPS_THROUGH): Delete."}, {"sha": "8ed310d31b6d35e78c3aee3febacd730177e4d15", "filename": "gcc/calls.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/959f3a066790b1fdf98dd1b93214929a45706c99/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/959f3a066790b1fdf98dd1b93214929a45706c99/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=959f3a066790b1fdf98dd1b93214929a45706c99", "patch": "@@ -149,7 +149,7 @@ static void initialize_argument_information\tPROTO ((int,\n \t\t\t\t\t\t\tstruct arg_data *,\n \t\t\t\t\t\t\tstruct args_size *,\n \t\t\t\t\t\t\tint, tree, tree,\n-\t\t\t\t\t\t\tCUMULATIVE_ARGS,\n+\t\t\t\t\t\t\tCUMULATIVE_ARGS *,\n \t\t\t\t\t\t\tint, rtx *, int *,\n \t\t\t\t\t\t\tint *, int *));\n \n@@ -869,7 +869,7 @@ initialize_argument_information (num_actuals, args, args_size, n_named_args,\n      int n_named_args;\n      tree actparms;\n      tree fndecl;\n-     CUMULATIVE_ARGS args_so_far;\n+     CUMULATIVE_ARGS *args_so_far;\n      int reg_parm_stack_space;\n      rtx *old_stack_level;\n      int *old_pending_adj;\n@@ -938,7 +938,7 @@ initialize_argument_information (num_actuals, args, args_size, n_named_args,\n \t   && contains_placeholder_p (TYPE_SIZE (type)))\n \t  || TREE_ADDRESSABLE (type)\n #ifdef FUNCTION_ARG_PASS_BY_REFERENCE\n-\t  || FUNCTION_ARG_PASS_BY_REFERENCE (args_so_far, TYPE_MODE (type),\n+\t  || FUNCTION_ARG_PASS_BY_REFERENCE (*args_so_far, TYPE_MODE (type),\n \t\t\t\t\t     type, argpos < n_named_args)\n #endif\n \t  )\n@@ -947,7 +947,7 @@ initialize_argument_information (num_actuals, args, args_size, n_named_args,\n              references instead of making a copy.  */\n \t  if (current_function_is_thunk\n #ifdef FUNCTION_ARG_CALLEE_COPIES\n-\t      || (FUNCTION_ARG_CALLEE_COPIES (args_so_far, TYPE_MODE (type),\n+\t      || (FUNCTION_ARG_CALLEE_COPIES (*args_so_far, TYPE_MODE (type),\n \t\t\t\t\t     type, argpos < n_named_args)\n \t\t  /* If it's in a register, we must make a copy of it too.  */\n \t\t  /* ??? Is this a sufficient test?  Is there a better one? */\n@@ -1034,12 +1034,12 @@ initialize_argument_information (num_actuals, args, args_size, n_named_args,\n \n       args[i].unsignedp = unsignedp;\n       args[i].mode = mode;\n-      args[i].reg = FUNCTION_ARG (args_so_far, mode, type,\n+      args[i].reg = FUNCTION_ARG (*args_so_far, mode, type,\n \t\t\t\t  argpos < n_named_args);\n #ifdef FUNCTION_ARG_PARTIAL_NREGS\n       if (args[i].reg)\n \targs[i].partial\n-\t  = FUNCTION_ARG_PARTIAL_NREGS (args_so_far, mode, type,\n+\t  = FUNCTION_ARG_PARTIAL_NREGS (*args_so_far, mode, type,\n \t\t\t\t\targpos < n_named_args);\n #endif\n \n@@ -1113,7 +1113,7 @@ initialize_argument_information (num_actuals, args, args_size, n_named_args,\n       /* Increment ARGS_SO_FAR, which has info about which arg-registers\n \t have been used, etc.  */\n \n-      FUNCTION_ARG_ADVANCE (args_so_far, TYPE_MODE (type), type,\n+      FUNCTION_ARG_ADVANCE (*args_so_far, TYPE_MODE (type), type,\n \t\t\t    argpos < n_named_args);\n     }\n }\n@@ -1761,7 +1761,7 @@ expand_call (exp, target, ignore)\n   /* Build up entries inthe ARGS array, compute the size of the arguments\n      into ARGS_SIZE, etc.  */\n   initialize_argument_information (num_actuals, args, &args_size, n_named_args,\n-\t\t\t\t   actparms, fndecl, args_so_far,\n+\t\t\t\t   actparms, fndecl, &args_so_far,\n \t\t\t\t   reg_parm_stack_space, &old_stack_level,\n \t\t\t\t   &old_pending_adj, &must_preallocate,\n \t\t\t\t   &is_const);"}]}