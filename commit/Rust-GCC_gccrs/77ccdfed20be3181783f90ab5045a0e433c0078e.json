{"sha": "77ccdfed20be3181783f90ab5045a0e433c0078e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdjY2RmZWQyMGJlMzE4MTc4M2Y5MGFiNTA0NWEwZTQzM2MwMDc4ZQ==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@apple.com", "date": "2006-04-05T02:46:02Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-04-05T02:46:02Z"}, "message": "rs6000.c (TARGET_MS_BITFIELD_LAYOUT_P): Define.\n\n2006-04-04  Eric Christopher  <echristo@apple.com>\n\n        * config/rs6000/rs6000.c (TARGET_MS_BITFIELD_LAYOUT_P): Define.\n        (TARGET_USE_MS_BITFIELD_LAYOUT): Ditto.\n        (rs6000_handle_struct_attribute): New.\n        (rs6000_ms_bitfield_layout_p): Ditto.\n\nFrom-SVN: r112693", "tree": {"sha": "9cbed5afb27c4d297627b51948fda590b6a52689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cbed5afb27c4d297627b51948fda590b6a52689"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77ccdfed20be3181783f90ab5045a0e433c0078e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ccdfed20be3181783f90ab5045a0e433c0078e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77ccdfed20be3181783f90ab5045a0e433c0078e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ccdfed20be3181783f90ab5045a0e433c0078e/comments", "author": {"login": "echristo", "id": 327308, "node_id": "MDQ6VXNlcjMyNzMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/327308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echristo", "html_url": "https://github.com/echristo", "followers_url": "https://api.github.com/users/echristo/followers", "following_url": "https://api.github.com/users/echristo/following{/other_user}", "gists_url": "https://api.github.com/users/echristo/gists{/gist_id}", "starred_url": "https://api.github.com/users/echristo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echristo/subscriptions", "organizations_url": "https://api.github.com/users/echristo/orgs", "repos_url": "https://api.github.com/users/echristo/repos", "events_url": "https://api.github.com/users/echristo/events{/privacy}", "received_events_url": "https://api.github.com/users/echristo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3c2c547989a7070295df1fc2dbe4cca62f40c61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3c2c547989a7070295df1fc2dbe4cca62f40c61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3c2c547989a7070295df1fc2dbe4cca62f40c61"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "e9c21adc6bb49041dbd62b39de26e60179c1e1a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ccdfed20be3181783f90ab5045a0e433c0078e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ccdfed20be3181783f90ab5045a0e433c0078e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77ccdfed20be3181783f90ab5045a0e433c0078e", "patch": "@@ -1,3 +1,10 @@\n+2006-04-04  Eric Christopher  <echristo@apple.com>\n+\n+\t* config/rs6000/rs6000.c (TARGET_MS_BITFIELD_LAYOUT_P): Define.\n+\t(TARGET_USE_MS_BITFIELD_LAYOUT): Ditto.\n+\t(rs6000_handle_struct_attribute): New.\n+\t(rs6000_ms_bitfield_layout_p): Ditto.\n+\n 2006-04-04  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/darwin-crt3.c (atexit): Pass &__dso_handle rather than"}, {"sha": "085fa724850fa4e8edd3b2b1a43e81057dc17057", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ccdfed20be3181783f90ab5045a0e433c0078e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ccdfed20be3181783f90ab5045a0e433c0078e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=77ccdfed20be3181783f90ab5045a0e433c0078e", "patch": "@@ -602,6 +602,8 @@ static void rs6000_assemble_visibility (tree, int);\n static int rs6000_ra_ever_killed (void);\n static tree rs6000_handle_longcall_attribute (tree *, tree, tree, int, bool *);\n static tree rs6000_handle_altivec_attribute (tree *, tree, tree, int, bool *);\n+static bool rs6000_ms_bitfield_layout_p (tree);\n+static tree rs6000_handle_struct_attribute (tree *, tree, tree, int, bool *);\n static void rs6000_eliminate_indexed_memrefs (rtx operands[2]);\n static const char *rs6000_mangle_fundamental_type (tree);\n extern const struct attribute_spec rs6000_attribute_table[];\n@@ -932,6 +934,9 @@ static const char alt_reg_names[][8] =\n #define TARGET_BINDS_LOCAL_P darwin_binds_local_p\n #endif\n \n+#undef TARGET_MS_BITFIELD_LAYOUT_P\n+#define TARGET_MS_BITFIELD_LAYOUT_P rs6000_ms_bitfield_layout_p\n+\n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK rs6000_output_mi_thunk\n \n@@ -2104,7 +2109,7 @@ num_insns_constant (rtx op, enum machine_mode mode)\n }\n \n \n-/* Return true if OP can be synthesized with a particular vspltisb, vspltish \n+/* Return true if OP can be synthesized with a particular vspltisb, vspltish\n    or vspltisw instruction.  OP is a CONST_VECTOR.  Which instruction is used\n    depends on STEP and COPIES, one of which will be 1.  If COPIES > 1,\n    all items are set to the same value and contain COPIES replicas of the\n@@ -2171,7 +2176,7 @@ vspltis_constant (rtx op, unsigned step, unsigned copies)\n }\n \n \n-/* Return true if OP is of the given MODE and can be synthesized \n+/* Return true if OP is of the given MODE and can be synthesized\n    with a vspltisb, vspltish or vspltisw.  */\n \n bool\n@@ -17349,6 +17354,8 @@ const struct attribute_spec rs6000_attribute_table[] =\n   { \"altivec\",   1, 1, false, true,  false, rs6000_handle_altivec_attribute },\n   { \"longcall\",  0, 0, false, true,  true,  rs6000_handle_longcall_attribute },\n   { \"shortcall\", 0, 0, false, true,  true,  rs6000_handle_longcall_attribute },\n+  { \"ms_struct\", 0, 0, false, false, false, rs6000_handle_struct_attribute },\n+  { \"gcc_struct\", 0, 0, false, false, false, rs6000_handle_struct_attribute },\n #ifdef SUBTARGET_ATTRIBUTE_TABLE\n   SUBTARGET_ATTRIBUTE_TABLE,\n #endif\n@@ -17547,6 +17554,54 @@ rs6000_longcall_ref (rtx call_ref)\n   return force_reg (Pmode, call_ref);\n }\n \f\n+#ifndef TARGET_USE_MS_BITFIELD_LAYOUT\n+#define TARGET_USE_MS_BITFIELD_LAYOUT 0\n+#endif\n+\n+/* Handle a \"ms_struct\" or \"gcc_struct\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+static tree\n+rs6000_handle_struct_attribute (tree *node, tree name,\n+\t\t\t\ttree args ATTRIBUTE_UNUSED,\n+\t\t\t\tint flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+{\n+  tree *type = NULL;\n+  if (DECL_P (*node))\n+    {\n+      if (TREE_CODE (*node) == TYPE_DECL)\n+        type = &TREE_TYPE (*node);\n+    }\n+  else\n+    type = node;\n+\n+  if (!(type && (TREE_CODE (*type) == RECORD_TYPE\n+                 || TREE_CODE (*type) == UNION_TYPE)))\n+    {\n+      warning (OPT_Wattributes, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+\n+  else if ((is_attribute_p (\"ms_struct\", name)\n+            && lookup_attribute (\"gcc_struct\", TYPE_ATTRIBUTES (*type)))\n+           || ((is_attribute_p (\"gcc_struct\", name)\n+                && lookup_attribute (\"ms_struct\", TYPE_ATTRIBUTES (*type)))))\n+    {\n+      warning (OPT_Wattributes, \"%qs incompatible attribute ignored\",\n+               IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+static bool\n+rs6000_ms_bitfield_layout_p (tree record_type)\n+{\n+  return (TARGET_USE_MS_BITFIELD_LAYOUT &&\n+          !lookup_attribute (\"gcc_struct\", TYPE_ATTRIBUTES (record_type)))\n+    || lookup_attribute (\"ms_struct\", TYPE_ATTRIBUTES (record_type));\n+}\n+\f\n #ifdef USING_ELFOS_H\n \n /* A get_unnamed_section callback, used for switching to toc_section.  */"}]}