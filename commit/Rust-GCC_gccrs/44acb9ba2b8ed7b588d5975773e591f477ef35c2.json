{"sha": "44acb9ba2b8ed7b588d5975773e591f477ef35c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRhY2I5YmEyYjhlZDdiNTg4ZDU5NzU3NzNlNTkxZjQ3N2VmMzVjMg==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2017-09-01T14:08:42Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2017-09-01T14:08:42Z"}, "message": "retire mem_signal_fence pattern\n\n\t* config/s390/s390.md (mem_signal_fence): Remove.\n\t* doc/md.texi (mem_signal_fence): Remove.\n\t* optabs.c (expand_mem_signal_fence): Remove uses of mem_signal_fence.\n\tUpdate comments.\n\t* target-insns.def (mem_signal_fence): Remove.\n\nFrom-SVN: r251597", "tree": {"sha": "ba9e68e17af56e94b88d6f133936068ba9a8577e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba9e68e17af56e94b88d6f133936068ba9a8577e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44acb9ba2b8ed7b588d5975773e591f477ef35c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44acb9ba2b8ed7b588d5975773e591f477ef35c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44acb9ba2b8ed7b588d5975773e591f477ef35c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44acb9ba2b8ed7b588d5975773e591f477ef35c2/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ca3c6ef7110fb842cf8175a58d91d239c418bbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ca3c6ef7110fb842cf8175a58d91d239c418bbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ca3c6ef7110fb842cf8175a58d91d239c418bbe"}], "stats": {"total": 48, "additions": 13, "deletions": 35}, "files": [{"sha": "60824ea8a2e0832fd72af8337cf63d5c950f2669", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44acb9ba2b8ed7b588d5975773e591f477ef35c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44acb9ba2b8ed7b588d5975773e591f477ef35c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44acb9ba2b8ed7b588d5975773e591f477ef35c2", "patch": "@@ -1,3 +1,11 @@\n+2017-09-01  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* config/s390/s390.md (mem_signal_fence): Remove.\n+\t* doc/md.texi (mem_signal_fence): Remove.\n+\t* optabs.c (expand_mem_signal_fence): Remove uses of mem_signal_fence.\n+\tUpdate comments.\n+\t* target-insns.def (mem_signal_fence): Remove.\n+\n 2017-09-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/81902"}, {"sha": "1d63523d3b0d2c014aafb2e56e487b533d1559e0", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44acb9ba2b8ed7b588d5975773e591f477ef35c2/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44acb9ba2b8ed7b588d5975773e591f477ef35c2/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=44acb9ba2b8ed7b588d5975773e591f477ef35c2", "patch": "@@ -10084,15 +10084,6 @@\n ; memory barrier patterns.\n ;\n \n-(define_expand \"mem_signal_fence\"\n-  [(match_operand:SI 0 \"const_int_operand\")]\t\t;; model\n-  \"\"\n-{\n-  /* The s390 memory model is strong enough not to require any\n-     barrier in order to synchronize a thread with itself.  */\n-  DONE;\n-})\n-\n (define_expand \"mem_thread_fence\"\n   [(match_operand:SI 0 \"const_int_operand\")]\t\t;; model\n   \"\""}, {"sha": "ed78df818b2bbc4f83557ba93591a54b452c7142", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44acb9ba2b8ed7b588d5975773e591f477ef35c2/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44acb9ba2b8ed7b588d5975773e591f477ef35c2/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=44acb9ba2b8ed7b588d5975773e591f477ef35c2", "patch": "@@ -7059,19 +7059,6 @@ If this pattern is not defined, the compiler falls back to expanding the\n @code{memory_barrier} pattern, then to emitting @code{__sync_synchronize}\n library call, and finally to just placing a compiler memory barrier.\n \n-@cindex @code{mem_signal_fence@var{mode}} instruction pattern\n-@item @samp{mem_signal_fence@var{mode}}\n-This pattern emits code required to implement a signal fence with\n-memory model semantics.  Operand 0 is the memory model to be used.\n-\n-This pattern should impact the compiler optimizers the same way that\n-mem_signal_fence does, but it does not need to issue any barrier\n-instructions.\n-\n-If this pattern is not specified, all memory models except\n-@code{__ATOMIC_RELAXED} will result in issuing a @code{sync_synchronize}\n-barrier pattern.\n-\n @cindex @code{get_thread_pointer@var{mode}} instruction pattern\n @cindex @code{set_thread_pointer@var{mode}} instruction pattern\n @item @samp{get_thread_pointer@var{mode}}"}, {"sha": "2c4de749bb3471c7a669042650d1b7b06efc9b21", "filename": "gcc/optabs.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44acb9ba2b8ed7b588d5975773e591f477ef35c2/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44acb9ba2b8ed7b588d5975773e591f477ef35c2/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=44acb9ba2b8ed7b588d5975773e591f477ef35c2", "patch": "@@ -6318,22 +6318,15 @@ expand_mem_thread_fence (enum memmodel model)\n     expand_asm_memory_barrier ();\n }\n \n-/* This routine will either emit the mem_signal_fence pattern or issue a \n-   sync_synchronize to generate a fence for memory model MEMMODEL.  */\n+/* Emit a signal fence with given memory model.  */\n \n void\n expand_mem_signal_fence (enum memmodel model)\n {\n-  if (targetm.have_mem_signal_fence ())\n-    emit_insn (targetm.gen_mem_signal_fence (GEN_INT (model)));\n-  else if (!is_mm_relaxed (model))\n-    {\n-      /* By default targets are coherent between a thread and the signal\n-\t handler running on the same thread.  Thus this really becomes a\n-\t compiler barrier, in that stores must not be sunk past\n-\t (or raised above) a given point.  */\n-      expand_asm_memory_barrier ();\n-    }\n+  /* No machine barrier is required to implement a signal fence, but\n+     a compiler memory barrier must be issued, except for relaxed MM.  */\n+  if (!is_mm_relaxed (model))\n+    expand_asm_memory_barrier ();\n }\n \n /* This function expands the atomic load operation:"}, {"sha": "4669439c7e1d32b184dcdad67bb15ade1e447f6d", "filename": "gcc/target-insns.def", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44acb9ba2b8ed7b588d5975773e591f477ef35c2/gcc%2Ftarget-insns.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44acb9ba2b8ed7b588d5975773e591f477ef35c2/gcc%2Ftarget-insns.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-insns.def?ref=44acb9ba2b8ed7b588d5975773e591f477ef35c2", "patch": "@@ -58,7 +58,6 @@ DEF_TARGET_INSN (indirect_jump, (rtx x0))\n DEF_TARGET_INSN (insv, (rtx x0, rtx x1, rtx x2, rtx x3))\n DEF_TARGET_INSN (jump, (rtx x0))\n DEF_TARGET_INSN (load_multiple, (rtx x0, rtx x1, rtx x2))\n-DEF_TARGET_INSN (mem_signal_fence, (rtx x0))\n DEF_TARGET_INSN (mem_thread_fence, (rtx x0))\n DEF_TARGET_INSN (memory_barrier, (void))\n DEF_TARGET_INSN (movstr, (rtx x0, rtx x1, rtx x2))"}]}