{"sha": "d88e80e622609f3c4be7b852222d5daa7afca7c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg4ZTgwZTYyMjYwOWYzYzRiZTdiODUyMjIyZDVkYWE3YWZjYTdjOQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@sebabeach.org", "date": "2003-06-13T16:57:26Z"}, "committer": {"name": "Doug Evans", "email": "devans@gcc.gnu.org", "date": "2003-06-13T16:57:26Z"}, "message": "m32r-protos.h (m32r_pass_by_reference): Declare.\n\n\t* config/m32r/m32r-protos.h (m32r_pass_by_reference): Declare.\n\t* config/m32r/m32r.c (m32r_pass_by_reference): New fn.\n\t(m32r_va_arg): Use it.\n\t* config/m32r/m32r.h (FUNCTION_ARG_PASS_BY_REFERENCE): Ditto.\n\t(RETURN_IN_MEMORY): Ditto.\n\nCo-Authored-By: Kazuhiro Inaoka <inaoka.kazuhiro@renesas.com>\n\nFrom-SVN: r67906", "tree": {"sha": "c79e5bf367177461afc3a2d513f54bd112425c0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c79e5bf367177461afc3a2d513f54bd112425c0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d88e80e622609f3c4be7b852222d5daa7afca7c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88e80e622609f3c4be7b852222d5daa7afca7c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d88e80e622609f3c4be7b852222d5daa7afca7c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88e80e622609f3c4be7b852222d5daa7afca7c9/comments", "author": null, "committer": null, "parents": [{"sha": "4581c6785660dd5d9fef416d15c9ad39051951d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4581c6785660dd5d9fef416d15c9ad39051951d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4581c6785660dd5d9fef416d15c9ad39051951d9"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "484152d6ce2e841803a7e9c2d09f217eec659155", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88e80e622609f3c4be7b852222d5daa7afca7c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88e80e622609f3c4be7b852222d5daa7afca7c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d88e80e622609f3c4be7b852222d5daa7afca7c9", "patch": "@@ -1,3 +1,12 @@\n+2003-06-13  Doug Evans  <dje@sebabeach.org>\n+\t    Kazuhiro Inaoka <inaoka.kazuhiro@renesas.com>\n+\n+\t* config/m32r/m32r-protos.h (m32r_pass_by_reference): Declare.\n+\t* config/m32r/m32r.c (m32r_pass_by_reference): New fn.\n+\t(m32r_va_arg): Use it.\n+\t* config/m32r/m32r.h (FUNCTION_ARG_PASS_BY_REFERENCE): Ditto.\n+\t(RETURN_IN_MEMORY): Ditto.\n+\n 2003-06-13  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* c-typeck.c: Remove #if 0 clauses."}, {"sha": "103bff790bff104976c44a1e3acfdc1e0ee93e8b", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88e80e622609f3c4be7b852222d5daa7afca7c9/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88e80e622609f3c4be7b852222d5daa7afca7c9/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=d88e80e622609f3c4be7b852222d5daa7afca7c9", "patch": "@@ -93,6 +93,7 @@ extern int    reg_or_zero_operand               PARAMS ((rtx, Mmode));\n \n #ifdef TREE_CODE\n extern struct rtx_def * m32r_va_arg\t\tPARAMS ((tree, tree));\n+extern int m32r_pass_by_reference\t\tPARAMS ((tree));\n #endif /* TREE_CODE */\n #endif /* RTX_CODE */\n "}, {"sha": "8d42306b1f8cdbad16784825aeee9875ebb790ff", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88e80e622609f3c4be7b852222d5daa7afca7c9/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88e80e622609f3c4be7b852222d5daa7afca7c9/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=d88e80e622609f3c4be7b852222d5daa7afca7c9", "patch": "@@ -1002,6 +1002,21 @@ large_insn_p (op, mode)\n   return get_attr_length (op) != 2;\n }\n \n+/* Return non-zero if TYPE must be passed or returned in memory.\n+   The m32r treats both directions the same so we handle both directions\n+   in this function.  */\n+\n+int\n+m32r_pass_by_reference (type)\n+     tree type;\n+{\n+  int size = int_size_in_bytes (type);\n+\n+  if (size < 0 || size > 8)\n+    return 1;\n+\n+  return 0;\n+}\n \f\n /* Comparisons.  */\n \n@@ -1425,7 +1440,7 @@ m32r_va_arg (valist, type)\n   size = int_size_in_bytes (type);\n   rsize = (size + UNITS_PER_WORD - 1) & -UNITS_PER_WORD;\n \n-  if (size > 8)\n+  if (m32r_pass_by_reference (type))\n     {\n       tree type_ptr, type_ptr_ptr;\n "}, {"sha": "13205ae84b39d0f29078d255e72a9aaebdc797b2", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88e80e622609f3c4be7b852222d5daa7afca7c9/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88e80e622609f3c4be7b852222d5daa7afca7c9/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=d88e80e622609f3c4be7b852222d5daa7afca7c9", "patch": "@@ -1134,7 +1134,7 @@ M32R_STACK_ALIGN (current_function_outgoing_args_size)\n    appropriate for passing a pointer to that type.  */\n /* All arguments greater than 8 bytes are passed this way.  */\n #define FUNCTION_ARG_PASS_BY_REFERENCE(CUM, MODE, TYPE, NAMED) \\\n-  ((TYPE) && int_size_in_bytes (TYPE) > 8)\n+  ((TYPE) && m32r_pass_by_reference (TYPE))\n \n /* Update the data in CUM to advance over an argument\n    of mode MODE and data type TYPE.\n@@ -1210,8 +1210,7 @@ M32R_STACK_ALIGN (current_function_outgoing_args_size)\n    to return the function value in memory, just as large structures are\n    always returned.  Here TYPE will be a C expression of type `tree',\n    representing the data type of the value.  */\n-#define RETURN_IN_MEMORY(TYPE) \\\n-(int_size_in_bytes (TYPE) > 8)\n+#define RETURN_IN_MEMORY(TYPE) m32r_pass_by_reference (TYPE)\n \n /* Tell GCC to use RETURN_IN_MEMORY.  */\n #define DEFAULT_PCC_STRUCT_RETURN 0"}]}