{"sha": "89bb01e7cbd82cdf318202d8185d765dcc338915", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODliYjAxZTdjYmQ4MmNkZjMxODIwMmQ4MTg1ZDc2NWRjYzMzODkxNQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-28T00:16:38Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-28T00:16:38Z"}, "message": "Daily bump.", "tree": {"sha": "661ad214cb641592b6d5fd1e2c0e91fbebb88c7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/661ad214cb641592b6d5fd1e2c0e91fbebb88c7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89bb01e7cbd82cdf318202d8185d765dcc338915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89bb01e7cbd82cdf318202d8185d765dcc338915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89bb01e7cbd82cdf318202d8185d765dcc338915", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89bb01e7cbd82cdf318202d8185d765dcc338915/comments", "author": null, "committer": null, "parents": [{"sha": "75ce04fba49eb30b6a8fe23bc3605cf0ef9a8e28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ce04fba49eb30b6a8fe23bc3605cf0ef9a8e28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75ce04fba49eb30b6a8fe23bc3605cf0ef9a8e28"}], "stats": {"total": 647, "additions": 646, "deletions": 1}, "files": [{"sha": "17ab27a57351a0f5c2ede32f1999aae294b31377", "filename": "gcc/ChangeLog", "status": "modified", "additions": 213, "deletions": 0, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89bb01e7cbd82cdf318202d8185d765dcc338915/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89bb01e7cbd82cdf318202d8185d765dcc338915/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89bb01e7cbd82cdf318202d8185d765dcc338915", "patch": "@@ -1,3 +1,216 @@\n+2020-10-27  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR rtl-optimization/97497\n+\t* config/s390/s390.c (s390_hard_regno_call_part_clobbered): Do not\n+\treturn true for r12 when -fpic is used.\n+\n+2020-10-27  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/97535\n+\t* config/aarch64/aarch64.c (aarch64_expand_cpymem): Use unsigned\n+\tarithmetic in check.\n+\n+2020-10-27  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vcopy_lane_bf16, vcopyq_lane_bf16)\n+\t(vcopyq_laneq_bf16, vcopy_laneq_bf16): New intrinsics.\n+\n+2020-10-27  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vxworks.h (VX_CPU_PREFIX): #define here.\n+\t* config/rs6000/vxworks.h: Remove #definition.\n+\n+2020-10-27  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/rs6000/vxworks.h (CPP_SPEC): Fix macro definition\n+\tfor -mcpu=e6500.\n+\n+2020-10-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_build_slp_instance): Use ceil_log2\n+\tto compute maximum group-size.\n+\n+2020-10-27  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR ipa/97586\n+\t* ipa-modref-tree.h (modref_tree::remap_params): New member function.\n+\t* ipa-modref.c (modref_summaries_lto::duplicate): Check that\n+\toptimization summaries are not duplicated.\n+\t(remap_arguments): Remove.\n+\t(modref_transform): Rename to ...\n+\t(update_signature): ... this one; handle also lto summary.\n+\t(pass_ipa_modref::execute): Update signatures here rather\n+\tthan in transform hook.\n+\n+2020-10-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_slp_bbs): Remove no-op\n+\tslp-max-insns-in-bb check.\n+\t(vect_slp_function): Dump when splitting the function.\n+\tAdjust the split condition for control altering stmts.\n+\t* params.opt (-param=slp-max-insns-in-bb): Remove.\n+\t* doc/invoke.texi (-param=slp-max-insns-in-bb): Likewise.\n+\n+2020-10-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple.h (gimple_expr_type): For PHIs return the type\n+\tof the result.\n+\t* tree-vect-loop-manip.c (slpeel_tree_duplicate_loop_to_edge_cfg):\n+\tMake sure edge order into copied loop headers line up with the\n+\toriginals.\n+\t* tree-vect-loop.c (vect_transform_cycle_phi): Handle nested\n+\tloops with SLP.\n+\t(vectorizable_phi): New function.\n+\t(vectorizable_live_operation): For BB vectorization compute insert\n+\tlocation here.\n+\t* tree-vect-slp.c (vect_free_slp_tree): Deal with NULL\n+\tSLP_TREE_CHILDREN entries.\n+\t(vect_create_new_slp_node): Add overloads with pre-existing node\n+\targument.\n+\t(vect_print_slp_graph): Likewise.\n+\t(vect_mark_slp_stmts): Likewise.\n+\t(vect_mark_slp_stmts_relevant): Likewise.\n+\t(vect_gather_slp_loads): Likewise.\n+\t(vect_optimize_slp): Likewise.\n+\t(vect_slp_analyze_node_operations): Likewise.\n+\t(vect_bb_slp_scalar_cost): Likewise.\n+\t(vect_remove_slp_scalar_calls): Likewise.\n+\t(vect_get_and_check_slp_defs): Handle PHIs.\n+\t(vect_build_slp_tree_1): Handle PHIs.\n+\t(vect_build_slp_tree_2): Continue SLP build, following PHI\n+\targuments.  Fix memory leak.\n+\t(vect_build_slp_tree): Put stub node into the hash-map so\n+\twe can discover cycles directly.\n+\t(vect_build_slp_instance): Set the backedge SLP def for\n+\treduction chains.\n+\t(vect_analyze_slp_backedges): Remove.\n+\t(vect_analyze_slp): Do not call it.\n+\t(vect_slp_convert_to_external): Release SLP_TREE_LOAD_PERMUTATION.\n+\t(vect_slp_analyze_node_operations): Handle stray failed\n+\tbackedge defs by failing.\n+\t(vect_slp_build_vertices): Adjust leaf condition.\n+\t(vect_bb_slp_mark_live_stmts): Handle PHIs, use visited\n+\thash-set to handle cycles.\n+\t(vect_slp_analyze_operations): Adjust.\n+\t(vect_bb_partition_graph_r): Likewise.\n+\t(vect_slp_function): Adjust split condition to allow CFG\n+\tmerges.\n+\t(vect_schedule_slp_instance): Rename to ...\n+\t(vect_schedule_slp_node): ... this.  Move DFS walk to ...\n+\t(vect_schedule_scc): ... this new function.\n+\t(vect_schedule_slp): Call it.  Remove ad-hoc vectorized\n+\tbackedge fill code.\n+\t* tree-vect-stmts.c (vect_analyze_stmt): Call\n+\tvectorizable_phi.\n+\t(vect_transform_stmt): Likewise.\n+\t(vect_is_simple_use): Handle vect_backedge_def.\n+\t* tree-vectorizer.c (vec_info::new_stmt_vec_info): Only\n+\tset loop header PHIs to vect_unknown_def_type for loop\n+\tvectorization.\n+\t* tree-vectorizer.h (enum vect_def_type): Add vect_backedge_def.\n+\t(enum stmt_vec_info_type): Add phi_info_type.\n+\t(vectorizable_phi): Declare.\n+\n+2020-10-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_build_slp_tree_2): When vectorizing\n+\tBBs splat uniform operands and stop SLP discovery.\n+\n+2020-10-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* config/aarch64/aarch64-linux.h (GNU_USER_TARGET_D_CRITSEC_SIZE):\n+\tRemove.\n+\t* config/glibc-d.c (glibc_d_critsec_size): Likewise.\n+\t(TARGET_D_CRITSEC_SIZE): Likewise.\n+\t* config/i386/linux-common.h (GNU_USER_TARGET_D_CRITSEC_SIZE):\n+\tLikewise.\n+\t* config/sol2-d.c (solaris_d_critsec_size): Likewise.\n+\t(TARGET_D_CRITSEC_SIZE):  Likewise.\n+\t* doc/tm.texi.in (TARGET_D_CRITSEC_SIZE): Likewise.\n+\t* doc/tm.texi: Regenerate.\n+\n+2020-10-27  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/97461\n+\t* gcov-io.h (GCOV_PREALLOCATED_KVP): Pre-allocate 64\n+\tstatic counters.\n+\n+2020-10-27  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-ssa-alias.c (attr_fnspec::verify): Re-enabl checking.\n+\n+2020-10-27  Jan Hubicka  <jh@suse.cz>\n+\n+\t* builtin-attrs.def (STRERRNOC): New macro.\n+\t(STRERRNOP): New macro.\n+\t(ATTR_ERRNOCONST_NOTHROW_LEAF_LIST): New attr list.\n+\t(ATTR_ERRNOPURE_NOTHROW_LEAF_LIST): New attr list.\n+\t* builtins.def (ATTR_MATHFN_ERRNO): Use\n+\tATTR_ERRNOCONST_NOTHROW_LEAF_LIST.\n+\t(ATTR_MATHFN_FPROUNDING_ERRNO): Use ATTR_ERRNOCONST_NOTHROW_LEAF_LIST\n+\tor ATTR_ERRNOPURE_NOTHROW_LEAF_LIST.\n+\n+2020-10-27  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.c (opt_var_ref_t): New.\n+\t(riscv_ext_flag_table_t): New.\n+\t(riscv_ext_flag_table): New.\n+\t(riscv_parse_arch_string): Pass gcc_options* instead of\n+\t&opts->x_target_flags only, and using riscv_arch_option_table to\n+\tsetup flags.\n+\t(riscv_handle_option): Update argument for riscv_parse_arch_string.\n+\t(riscv_expand_arch): Ditto.\n+\t(riscv_expand_arch_from_cpu): Ditto.\n+\n+2020-10-27  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-ssa-ccp.c (evaluate_stmt): Use EAF_RETURN_ARG; do not handle\n+\tstring buitings specially.\n+\n+2020-10-27  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree.c (set_call_expr_flags): Fix string for ECF_RET1.\n+\t(build_common_builtin_nodes): Do not set ECF_RET1 for memcpy, memmove,\n+\tand memset. They are handled by builtin_fnspec.\n+\n+2020-10-27  Jan Hubicka  <jh@suse.cz>\n+\n+\t* builtins.c (builtin_fnspec): Add bzero, memcmp, memcmp_eq, bcmp,\n+\tstrncmp, strncmp_eq, strncasecmp, rindex, strlen, strlnen, strcasecmp,\n+\tstrcspn, strspn, strcmp, strcmp_eq.\n+\n+2020-10-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (slp_tree_pool): Declare.\n+\t(_slp_tree::operator new): Likewise.\n+\t(_slp_tree::operator delete): Likewise.\n+\t* tree-vectorizer.c (vectorize_loops): Allocate and free the\n+\tslp_tree_pool.\n+\t(pass_slp_vectorize::execute): Likewise.\n+\t* tree-vect-slp.c (slp_tree_pool): Define.\n+\t(_slp_tree::operator new): Likewise.\n+\t(_slp_tree::operator delete): Likewise.\n+\n+2020-10-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-wrapper.c (run_gcc): Do not use sub-make when jobserver is\n+\tnot detected properly.\n+\n+2020-10-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* symbol-summary.h (call_summary_base): Pass symtab hooks to\n+\tbase and register (or unregister) hooks directly.\n+\n+2020-10-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* symbol-summary.h (function_summary_base::unregister_hooks):\n+\tCall disable_insertion_hook and disable_duplication_hook.\n+\t(function_summary_base::symtab_insertion): New field.\n+\t(function_summary_base::symtab_removal): Likewise.\n+\t(function_summary_base::symtab_duplication): Likewise.\n+\tRegister hooks in function_summary_base and directly register\n+\t(or unregister) hooks.\n+\n 2020-10-26  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/97567"}, {"sha": "52d576a34f9377a083f136166792f54030d1d9c9", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89bb01e7cbd82cdf318202d8185d765dcc338915/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89bb01e7cbd82cdf318202d8185d765dcc338915/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=89bb01e7cbd82cdf318202d8185d765dcc338915", "patch": "@@ -1 +1 @@\n-20201027\n+20201028"}, {"sha": "b881f2fe3b9c9238a4387283ed6531bcfbac05c7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89bb01e7cbd82cdf318202d8185d765dcc338915/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89bb01e7cbd82cdf318202d8185d765dcc338915/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=89bb01e7cbd82cdf318202d8185d765dcc338915", "patch": "@@ -1,3 +1,69 @@\n+2020-10-27  Doug Rupp  <rupp@adacore.com>\n+\n+\t* Makefile.rtl: Add vx7r2cert spec file to ARM, PowerPC and x86\n+\ttargets.\n+\t* vxworks7-cert-rtp-link.spec: New spec file.\n+\n+2020-10-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): Add g-spogwa object.\n+\t* libgnat/g-spogwa.adb: Fix style errors.\n+\n+2020-10-27  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_Array_Aggregate): Dedicated\n+\troutine for array aggregates; mostly reuses existing code, but\n+\tcalls itself recursively for multi-dimensional array aggregates.\n+\t(Expand_SPARK_N_Aggregate): Call Expand_SPARK_Array_Aggregate to\n+\tdo the actual expansion, starting from the first index of the\n+\tarray type.\n+\n+2020-10-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Iterated_Component_Association): new\n+\tinternal subprogram Remove_References, to reset semantic\n+\tinformation on each reference to the index variable of the\n+\tassociation, so that Collect_Aggregate_Bounds can work properly\n+\ton multidimensional arrays with nested associations, and\n+\tsubsequent expansion into loops can verify that dimensions of\n+\teach subaggregate are compatible.\n+\n+2020-10-27  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* exp_prag.adb (Append_Copies): Handle N_Parameter_Associations.\n+\n+2020-10-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* ada_get_targ.adb (Digits_From_Size): Delete.\n+\t(Width_From_Size): Likewise.\n+\t* get_targ.adb (Digits_From_Size): Likewise.\n+\t(Width_From_Size): Likewise.\n+\t* get_targ.ads (Digits_From_Size): Likewise.\n+\t(Width_From_Size): Likewise.\n+\t* ttypes.ads: Remove with clause for Get_Targ.\n+\t(Standard_Short_Short_Integer_Width): Delete.\n+\t(Standard_Short_Integer_Width): Likewise.\n+\t(Standard_Integer_Width): Likewise.\n+\t(Standard_Long_Integer_Width): Likewise.\n+\t(Standard_Long_Long_Integer_Width): Likewise.\n+\t(Standard_Long_Long_Long_Integer_Width): Likewise.\n+\t(Standard_Short_Float_Digits): Likewise.\n+\t(Standard_Float_Digits): Likewise.\n+\t(Standard_Long_Float_Digits): Likewise.\n+\t(Standard_Long_Long_Float_Digits): Likewise.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Adjust.\n+\n+2020-10-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch6.adb, freeze.adb, gnat1drv.adb, opt.ads, sem_ch6.adb\n+\t(Transform_Function_Array): New flag, split from Modify_Tree_For_C.\n+\t* exp_unst.adb: Minor reformatting.\n+\n+2020-10-27  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* libgnat/g-socpol.adb (Wait): Do not exit from loop on EINTR\n+\terror and timeout is over.\n+\n 2020-10-26  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_aggr.adb (Build_Array_Aggr_Code): If the aggregate"}, {"sha": "d79a2ac9017e1a478e1d388c552c97310af21642", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89bb01e7cbd82cdf318202d8185d765dcc338915/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89bb01e7cbd82cdf318202d8185d765dcc338915/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=89bb01e7cbd82cdf318202d8185d765dcc338915", "patch": "@@ -1,3 +1,101 @@\n+2020-10-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97568\n+\t* region-model.cc (region_model::get_initial_value_for_global):\n+\tMove check that !DECL_EXTERNAL from here to...\n+\t* region.cc (decl_region::get_svalue_for_initializer): ...here,\n+\tusing it to reject zero initialization.\n+\n+2020-10-27  Markus B\u00f6ck  <markus.boeck02@gmail.com>\n+\n+\tPR analyzer/96608\n+\t* store.h (hash): Cast to intptr_t instead of long\n+\n+2020-10-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* constraint-manager.cc (svalue_cmp_by_ptr): Delete.\n+\t(equiv_class::canonicalize): Use svalue::cmp_ptr_ptr instead.\n+\t(equiv_class_cmp): Eliminate pointer comparison.\n+\t* diagnostic-manager.cc (dedupe_key::comparator): If they are at\n+\tthe same location, also compare epath ength and pending_diagnostic\n+\tkind.\n+\t* engine.cc (readability_comparator): If two path_vars have the\n+\tsame readability, then impose an arbitrary ordering on them.\n+\t(worklist::key_t::cmp): If two points have the same plan ordering,\n+\tcontinue the comparison.  Call sm_state_map::cmp rather than\n+\tcomparing hash values.\n+\t* program-state.cc (sm_state_map::entry_t::cmp): New.\n+\t(sm_state_map::cmp): New.\n+\t* program-state.h (sm_state_map::entry_t::cmp): New decl.\n+\t(sm_state_map::elements): New.\n+\t(sm_state_map::cmp): New.\n+\n+2020-10-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc (setjmp_record::cmp): New.\n+\t(supernode_cluster::dump_dot): Avoid embedding pointer in cluster\n+\tname.\n+\t(supernode_cluster::cmp_ptr_ptr): New.\n+\t(function_call_string_cluster::dump_dot): Avoid embedding pointer\n+\tin cluster name.  Sort m_map when dumping child clusters.\n+\t(function_call_string_cluster::cmp_ptr_ptr): New.\n+\t(root_cluster::dump_dot): Sort m_map when dumping child clusters.\n+\t* program-point.cc (function_point::cmp): New.\n+\t(function_point::cmp_ptr): New.\n+\t* program-point.h (function_point::cmp): New decl.\n+\t(function_point::cmp_ptr): New decl.\n+\t* program-state.cc (sm_state_map::print): Sort the values.  Guard\n+\tthe printing of pointers with !flag_dump_noaddr.\n+\t(program_state::prune_for_point): Sort the regions.\n+\t(log_set_of_svalues): Sort the values.  Guard the printing of\n+\tpointers with !flag_dump_noaddr.\n+\t* region-model-manager.cc (log_uniq_map): Sort the values.\n+\t* region-model-reachability.cc (dump_set): New function template.\n+\t(reachable_regions::dump_to_pp): Use it.\n+\t* region-model.h (svalue::cmp_ptr): New decl.\n+\t(svalue::cmp_ptr_ptr): New decl.\n+\t(setjmp_record::cmp): New decl.\n+\t(placeholder_svalue::get_name): New accessor.\n+\t(widening_svalue::get_point): New accessor.\n+\t(compound_svalue::get_map): New accessor.\n+\t(conjured_svalue::get_stmt): New accessor.\n+\t(conjured_svalue::get_id_region): New accessor.\n+\t(region::cmp_ptrs): Rename to...\n+\t(region::cmp_ptr_ptr): ...this.\n+\t* region.cc (region::cmp_ptrs): Rename to...\n+\t(region::cmp_ptr_ptr): ...this.\n+\t* state-purge.cc\n+\t(state_purge_per_ssa_name::state_purge_per_ssa_name): Sort\n+\tm_points_needing_name when dumping.\n+\t* store.cc (concrete_binding::cmp_ptr_ptr): New.\n+\t(symbolic_binding::cmp_ptr_ptr): New.\n+\t(binding_map::cmp): New.\n+\t(get_sorted_parent_regions): Update for renaming of\n+\tregion::cmp_ptrs to region::cmp_ptr_ptr.\n+\t(store::dump_to_pp): Likewise.\n+\t(store::to_json): Likewise.\n+\t(store::can_merge_p): Sort the base regions before considering\n+\tthem.\n+\t* store.h (concrete_binding::cmp_ptr_ptr): New decl.\n+\t(symbolic_binding::cmp_ptr_ptr): New decl.\n+\t(binding_map::cmp): New decl.\n+\t* supergraph.cc (supergraph::supergraph): Assign UIDs to the\n+\tgimple stmts.\n+\t* svalue.cc (cmp_cst): New.\n+\t(svalue::cmp_ptr): New.\n+\t(svalue::cmp_ptr_ptr): New.\n+\n+2020-10-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc (exploded_graph::get_or_create_node): Fix off-by-one\n+\twhen imposing param_analyzer_max_enodes_per_program_point limit.\n+\n+2020-10-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model.cc (region_model::get_representative_path_var):\n+\tImplement case RK_LABEL.\n+\t* region-model.h (label_region::get_label): New accessor.\n+\n 2020-10-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/97514"}, {"sha": "727762b5ef158c515b1d84cf063980201d1032e4", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89bb01e7cbd82cdf318202d8185d765dcc338915/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89bb01e7cbd82cdf318202d8185d765dcc338915/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=89bb01e7cbd82cdf318202d8185d765dcc338915", "patch": "@@ -1,3 +1,8 @@\n+2020-10-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_std_attribute_specifier): Allow duplicate\n+\tstandard attributes.\n+\n 2020-10-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91741"}, {"sha": "6cf5d409fccb7c44f1575c50980467c18263eb90", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89bb01e7cbd82cdf318202d8185d765dcc338915/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89bb01e7cbd82cdf318202d8185d765dcc338915/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=89bb01e7cbd82cdf318202d8185d765dcc338915", "patch": "@@ -1,3 +1,43 @@\n+2020-10-27  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (struct lang_type): Delete nested_udts field.\n+\t(CLASSTYPE_NESTED_UTDS): Delete.\n+\t* name-lookup.h (binding_table, binding_entry): Delete typedefs.\n+\t(bt_foreach_proc): Likewise.\n+\t(struct binding_entry_s): Delete.\n+\t(SCOPE_DEFAULT_HT_SIZE, CLASS_SCOPE_HT_SIZE)\n+\t(NAMESPACE_ORDINARY_HT_SIZE, NAMESPACE_STD_HT_SIZE)\n+\t(GLOBAL_SCOPE_HT_SIZE): Delete.\n+\t(binding_table_foreach, binding_table_find): Delete declarations.\n+\t* name-lookup.c (ENTRY_INDEX): Delete.\n+\t(free_binding_entry): Delete.\n+\t(binding_entry_make, binding_entry_free): Delete.\n+\t(struct binding_table_s): Delete.\n+\t(binding_table_construct, binding_table_free): Delete.\n+\t(binding_table_new, binding_table_expand): Delete.\n+\t(binding_table_insert, binding_table_find): Delete.\n+\t(binding_table_foreach): Delete.\n+\t(maybe_process_template_type_declaration): Delete\n+\tCLASSTYPE_NESTED_UTDS insertion.\n+\t(do_pushtag): Likewise.\n+\t* decl2.c (bt_reset_linkage_1): Fold into reset_type_linkage_1.\n+\t(reset_type_linkage_2, bt_reset_linkage_2): Fold into\n+\treset_type_linkage.\n+\t* pt.c (instantiate_class_template_1): Delete NESTED_UTDs comment.\n+\t(bt_instantiate_type_proc): Delete.\n+\t(do_type_instantiation): Instantiate implicit typedef fields.\n+\tDelete NESTED_UTD walk.\n+\t* search.c (lookup_field_r): Delete unreachable NESTED_UTD\n+\tsearch.\n+\n+2020-10-27  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* parser.c (cp_parser_explicit_instantiation): Refactor some RAII.\n+\t* pt.c (bt_instantiate_type_proc): DATA is the tree, pass type to\n+\tdo_type_instantiation.\n+\t(do_type_instantiation): Require T to be a type.  Refactor for\n+\tsome RAII.\n+\n 2020-10-26  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \t* cp-tree.h (CPTK_IS_NOTHROW_ASSIGNABLE): New."}, {"sha": "adab9a93747aa51ca01976565fd0d36f04a314ce", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89bb01e7cbd82cdf318202d8185d765dcc338915/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89bb01e7cbd82cdf318202d8185d765dcc338915/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=89bb01e7cbd82cdf318202d8185d765dcc338915", "patch": "@@ -1,3 +1,13 @@\n+2020-10-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd bec5973b0.\n+\t* d-target.cc (Target::critsecsize): Remove.\n+\t* d-target.def: Remove d_critsec_size.\n+\n+2020-10-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 0fcdaab32\n+\n 2020-10-23  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* decl.cc (finish_thunk): Update for new thunk api."}, {"sha": "6f03af9fd58174c589d2f9fc56d7b8c38eab313d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89bb01e7cbd82cdf318202d8185d765dcc338915/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89bb01e7cbd82cdf318202d8185d765dcc338915/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=89bb01e7cbd82cdf318202d8185d765dcc338915", "patch": "@@ -1,3 +1,25 @@\n+2020-10-27  Harald Anlauf  <anlauf@gmx.de>\n+\n+\t* resolve.c (gfc_impure_variable): A dummy argument with the VALUE\n+\tattribute may be redefined without making a procedure impure.\n+\n+2020-10-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* trans-array.c (gfc_get_descriptor_field): New helper.\n+\t(gfc_conv_descriptor_data_get): Use it - drop strange\n+\tREFERENCE_TYPE handling and make sure we don't trigger it.\n+\t(gfc_conv_descriptor_data_addr): Use gfc_get_descriptor_field.\n+\t(gfc_conv_descriptor_data_set): Likewise.\n+\t(gfc_conv_descriptor_offset): Likewise.\n+\t(gfc_conv_descriptor_dtype): Likewise.\n+\t(gfc_conv_descriptor_span): Likewise.\n+\t(gfc_get_descriptor_dimension): Likewise.\n+\t(gfc_conv_descriptor_token): Likewise.\n+\t(gfc_conv_descriptor_subfield): New helper.\n+\t(gfc_conv_descriptor_stride): Use it.\n+\t(gfc_conv_descriptor_lbound): Likewise.\n+\t(gfc_conv_descriptor_ubound): Likewise.\n+\n 2020-10-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/97454"}, {"sha": "3ebf5e7b46d29844c37f53af7f4725871d18bcd7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89bb01e7cbd82cdf318202d8185d765dcc338915/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89bb01e7cbd82cdf318202d8185d765dcc338915/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=89bb01e7cbd82cdf318202d8185d765dcc338915", "patch": "@@ -1,3 +1,134 @@\n+2020-10-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c2x-attr-deprecated-4.c, gcc.dg/c2x-attr-fallthrough-4.c,\n+\tgcc.dg/c2x-attr-maybe_unused-4.c: Allow duplicate attributes.\n+\n+2020-10-27  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/pr97497.c: New test.\n+\n+2020-10-27  Harald Anlauf  <anlauf@gmx.de>\n+\n+\t* gfortran.dg/value_8.f90: New test.\n+\n+2020-10-27  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-blend-runnable.c: Change #ifdef\n+\tDEBUG to #if DEBUG.\n+\tFix printf line so it is less then 80 characters long.\n+\t* gcc.target/powerpc/vec-insert-word-runnable.c: Change\n+\t#ifdef DEBUG to #if DEBUG.\n+\t* gcc.target/powerpc/vec-permute-ext-runnable.c: Change\n+\t#ifdef DEBUG to #if DEBUG.\n+\t* gcc.target/powerpc/vec-replace-word-runnable.c: Change\n+\t#ifdef DEBUG to #if DEBUG.\n+\tFix printf lines so they are less then 80 characters long.\n+\t* gcc.target/powerpc/vec-shift-double-runnable.c: Change\n+\t#ifdef DEBUG to #if DEBUG.\n+\n+2020-10-27  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/97535\n+\t* gcc.target/aarch64/pr97535.c: New test.\n+\n+2020-10-27  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/bf16_vect_copy_lane_1.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcopy_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcopy_lane_bf16_indices_2.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcopy_laneq_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcopy_laneq_bf16_indices_2.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcopyq_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcopyq_lane_bf16_indices_2.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcopyq_laneq_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcopyq_laneq_bf16_indices_2.c:\n+\tLikewise.\n+\n+2020-10-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-67.c: New testcase.\n+\n+2020-10-27  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/92942\n+\t* gcc.dg/Wstringop-overflow-56.c: New test.\n+\t* gcc.dg/Wstringop-overflow-57.c: Same.\n+\n+2020-10-27  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/Wstringop-overflow-44.s: Remove.\n+\n+2020-10-27  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr97567.c: Update to work with 32 bit targets.\n+\n+2020-10-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97568\n+\t* gcc.dg/analyzer/pr97568.c: New test.\n+\n+2020-10-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97560\n+\tPR testsuite/97590\n+\t* g++.dg/pr97560.C: Require c++11 effective target and add comment\n+\twith PR number.\n+\n+2020-10-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-54.c: New test.\n+\t* gcc.dg/vect/bb-slp-55.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-56.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-57.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-58.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-59.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-60.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-61.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-62.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-63.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-64.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-65.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-66.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-slp-1.c: Likewise.\n+\t* gfortran.dg/vect/O3-bb-slp-1.f: Likewise.\n+\t* gfortran.dg/vect/O3-bb-slp-2.f: Likewise.\n+\t* g++.dg/vect/simd-11.cc: Likewise.\n+\n+2020-10-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/pr95866-1.c: Adjust.\n+\n+2020-10-27  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/swaps-p8-22.c: Enable only for aix and\n+\t-m64 linux.\n+\n+2020-10-27  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/97461\n+\t* gcc.dg/tree-prof/pr97461.c: New test.\n+\n+2020-10-27  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/97560\n+\t* g++.dg/pr97560.C: New test.\n+\n+2020-10-27  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/vsx_mask-count-runnable.c: Separate options\n+\tpassed to dg-require-effective-target.\n+\t* gcc.target/powerpc/vsx_mask-expand-runnable.c: Likewise.\n+\t* gcc.target/powerpc/vsx_mask-extract-runnable.c: Likewise.\n+\t* gcc.target/powerpc/vsx_mask-move-runnable.c: Likewise.\n+\n 2020-10-26  Alan Modra  <amodra@gmail.com>\n \n \t* gcc.target/powerpc/localentry-1.c: Remove -mpcrel from options."}, {"sha": "e65233022a23caab5f80a95698b7e2cf76e500f8", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89bb01e7cbd82cdf318202d8185d765dcc338915/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89bb01e7cbd82cdf318202d8185d765dcc338915/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=89bb01e7cbd82cdf318202d8185d765dcc338915", "patch": "@@ -1,3 +1,9 @@\n+2020-10-27  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/97461\n+\t* libgcov.h (gcov_counter_add): Use first static counters\n+\tas it should help to have malloc wrappers set up.\n+\n 2020-10-23  Rasmus Villemoes  <rv@rasmusvillemoes.dk>\n \n \t* config/gthr-vxworks-thread.c: #include gthr.h before"}, {"sha": "56a796b80c6d6c189c393e34bdee08e418719d6f", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89bb01e7cbd82cdf318202d8185d765dcc338915/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89bb01e7cbd82cdf318202d8185d765dcc338915/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=89bb01e7cbd82cdf318202d8185d765dcc338915", "patch": "@@ -1,3 +1,7 @@\n+2020-10-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/MERGE: Merge upstream druntime 58560d51.\n+\n 2020-10-12  Maciej W. Rozycki  <macro@linux-mips.org>\n \n \t* libdruntime/config/mips/switchcontext.S [__mips_hard_float]:"}, {"sha": "723541cfe290b84178c37f61edf0d6edea879a7c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89bb01e7cbd82cdf318202d8185d765dcc338915/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89bb01e7cbd82cdf318202d8185d765dcc338915/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=89bb01e7cbd82cdf318202d8185d765dcc338915", "patch": "@@ -1,3 +1,53 @@\n+2020-10-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/functional (std::_Placeholder): Define for C++98\n+\tas well as later standards.\n+\t* include/tr1/functional (std::placeholders::_1 etc): Declare\n+\tfor C++98.\n+\t(tr1::_Placeholder): Replace with using-declaration for\n+\tstd::_Placeholder.\n+\t(tr1::placeholders::_1 etc.): Replace with using-directive for\n+\tstd::placeholders.\n+\n+2020-10-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/tr1/ell_integral.tcc (__ellint_rf, __ellint_rd)\n+\t(__ellint_rc, __ellint_rj): Remove unused variables.\n+\t* include/tr1/modified_bessel_func.tcc (__airy): Likewise.\n+\n+2020-10-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/locale_conv.h (__str_codecvt_out_all):\n+\tAdd cast to compare operands of the same signedness.\n+\t* include/bits/locale_facets_nonio.tcc\n+\t(time_get::_M_extract_wday_or_month): Likewise.\n+\t* include/bits/sstream.tcc (basic_stringbuf::overflow):\n+\tLikewise.\n+\t* include/tr1/legendre_function.tcc (__sph_legendre): Use\n+\tunsigned for loop variable.\n+\n+2020-10-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/charconv (from_chars): Add noexcept to match\n+\tdefinitions in src/c++17/floating_from_chars.cc\n+\n+2020-10-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++17/fs_dir.cc (fs::directory_iterator::operator*):\n+\tAdd noexcept. Do not throw on precondition violation.\n+\n+2020-10-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_path.h (path::_List::begin, path::_List::end):\n+\tAdd noexcept to match definitions in src/c++17/fs_path.cc.\n+\n+2020-10-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/experimental/memory_resource/new_delete_resource.cc:\n+\tAdd missing <cstdint> header.\n+\t* testsuite/experimental/memory_resource/resource_adaptor.cc:\n+\tLikewise.\n+\n 2020-10-26  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/experimental/executor (strand::_State): Fix thinko."}]}