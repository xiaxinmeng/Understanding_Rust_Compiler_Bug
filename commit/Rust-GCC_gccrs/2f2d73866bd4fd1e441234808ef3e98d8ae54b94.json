{"sha": "2f2d73866bd4fd1e441234808ef3e98d8ae54b94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYyZDczODY2YmQ0ZmQxZTQ0MTIzNDgwOGVmM2U5OGQ4YWU1NGI5NA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2009-12-04T22:24:05Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2009-12-04T22:24:05Z"}, "message": "aix_closure.S: Reorganize 64-bit code to match linux64_closure.S.\n\n        * src/powerpc/aix_closure.S: Reorganize 64-bit code to match\n        linux64_closure.S.\n\nFrom-SVN: r155001", "tree": {"sha": "43fd5e5e80d1b06ff2b5fd272620877dd7d80a88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43fd5e5e80d1b06ff2b5fd272620877dd7d80a88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f2d73866bd4fd1e441234808ef3e98d8ae54b94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2d73866bd4fd1e441234808ef3e98d8ae54b94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f2d73866bd4fd1e441234808ef3e98d8ae54b94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2d73866bd4fd1e441234808ef3e98d8ae54b94/comments", "author": null, "committer": null, "parents": [{"sha": "b75caae6985dc89a3ef9e75b8fac8feeab757df8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75caae6985dc89a3ef9e75b8fac8feeab757df8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b75caae6985dc89a3ef9e75b8fac8feeab757df8"}], "stats": {"total": 196, "additions": 110, "deletions": 86}, "files": [{"sha": "6ea5043aa2979ca12b801f5cdcf3e8093ffcf8ae", "filename": "libffi/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2d73866bd4fd1e441234808ef3e98d8ae54b94/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2d73866bd4fd1e441234808ef3e98d8ae54b94/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=2f2d73866bd4fd1e441234808ef3e98d8ae54b94", "patch": "@@ -1,3 +1,8 @@\n+2009-12-04  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* src/powerpc/aix_closure.S: Reorganize 64-bit code to match\n+        linux64_closure.S.\n+\t\n 2009-12-04  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR libffi/41908"}, {"sha": "3ba7aae74461fb5820be581e442939562587b389", "filename": "libffi/src/powerpc/aix_closure.S", "status": "modified", "additions": 105, "deletions": 86, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2d73866bd4fd1e441234808ef3e98d8ae54b94/libffi%2Fsrc%2Fpowerpc%2Faix_closure.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2d73866bd4fd1e441234808ef3e98d8ae54b94/libffi%2Fsrc%2Fpowerpc%2Faix_closure.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpowerpc%2Faix_closure.S?ref=2f2d73866bd4fd1e441234808ef3e98d8ae54b94", "patch": "@@ -99,9 +99,23 @@ ffi_closure_ASM:\n \t.llong .ffi_closure_ASM, TOC[tc0], 0\n \t.csect .text[PR]\n .ffi_closure_ASM:\n+/* we want to build up an area for the parameters passed */\n+/* in registers (both floating point and integer) */\n+\n+\t/* we store gpr 3 to gpr 10 (aligned to 4)\n+\tin the parents outgoing area  */\n+\tstd   r3, 48+(0*8)(r1)\n+\tstd   r4, 48+(1*8)(r1)\n+\tstd   r5, 48+(2*8)(r1)\n+\tstd   r6, 48+(3*8)(r1)\n+\tmflr  r0\n+\n+\tstd   r7, 48+(4*8)(r1)\n+\tstd   r8, 48+(5*8)(r1)\n+\tstd   r9, 48+(6*8)(r1)\n+\tstd   r10, 48+(7*8)(r1)\n+\tstd   r0, 16(r1)\t/* save the return address */\n \n-\tmflr r0\t\t\t/* extract return address */\n-\tstd r0,16(r1)\t\t/* save the return address */\n \n \t/* 48  Bytes (Linkage Area) */\n \t/* 64  Bytes (params) */\n@@ -110,23 +124,9 @@ ffi_closure_ASM:\n \t/* 8   Bytes (alignment) */\n \t/* 240 Bytes */\n \n-\tstdu r1,-240(r1)\t/* skip over caller save area\n+\tstdu  r1, -240(r1)\t/* skip over caller save area\n \t\t\t\t   keep stack aligned to 16  */\n \n-/* we want to build up an area for the parameters passed */\n-/* in registers (both floating point and integer) */\n-\n-\t/* we store gpr 3 to gpr 10 (aligned to 4)\n-\tin the parents outgoing area  */\n-\tstd   r3, 288+(0*8)(r1)\n-\tstd   r4, 288+(1*8)(r1)\n-\tstd   r5, 288+(2*8)(r1)\n-\tstd   r6, 288+(3*8)(r1)\n-\tstd   r7, 288+(4*8)(r1)\n-\tstd   r8, 288+(5*8)(r1)\n-\tstd   r9, 288+(6*8)(r1)\n-\tstd   r10, 288+(7*8)(r1)\n-\n \t/* next save fpr 1 to fpr 13 (aligned to 8) */\n \tstfd  f1, 128+(0*8)(r1)\n \tstfd  f2, 128+(1*8)(r1)\n@@ -144,16 +144,16 @@ ffi_closure_ASM:\n \n \t/* set up registers for the routine that actually does the work */\n \t/* get the context pointer from the trampoline */\n-\tmr r3,r11\n+\tmr r3, r11\n \n \t/* now load up the pointer to the result storage */\n-\taddi r4,r1,112\n+\taddi r4, r1, 112\n \n \t/* now load up the pointer to the saved gpr registers */\n-\taddi r5,r1,288\n+\taddi r5, r1, 288\n \n \t/* now load up the pointer to the saved fpr registers */\n-\taddi r6,r1,128\n+\taddi r6, r1, 128\n \n \t/* make the call */\n \tbl .ffi_closure_helper_DARWIN\n@@ -165,88 +165,107 @@ ffi_closure_ASM:\n \n \t/* look up the proper starting point in table  */\n \t/* by using return type as offset */\n-\taddi r5,r1,112\t\t/* get pointer to results area */\n-\tld r4,LC..60(2)\t\t/* get address of jump table */\n-\tsldi r3,r3,2\t\t/* now multiply return type by 4 */\n-\tlwzx r3,r4,r3\t\t/* get the contents of that table value */\n+\tld r4, LC..60(2)\t\t/* get address of jump table */\n+\tsldi r3, r3, 4\t\t/* now multiply return type by 16 */\n+\tld r0, 240+16(r1)\t/* load return address */\n \tadd r3,r3,r4\t\t/* add contents of table to table address */\n \tmtctr r3\n \tbctr\t\t\t/* jump to it */\n \n+/* Each fragment must be exactly 16 bytes long (4 instructions).\n+   Align to 16 byte boundary for cache and dispatch efficiency.  */\n+\t.align 4\n+\n L..60:\n-\t.long L..44-L..60    /* FFI_TYPE_VOID */\n-\t.long L..51-L..60    /* FFI_TYPE_INT */\n-\t.long L..47-L..60    /* FFI_TYPE_FLOAT */\n-\t.long L..46-L..60    /* FFI_TYPE_DOUBLE */\n-\t.long L..45-L..60    /* FFI_TYPE_LONGDOUBLE */\n-\t.long L..56-L..60    /* FFI_TYPE_UINT8 */\n-\t.long L..55-L..60    /* FFI_TYPE_SINT8 */\n-\t.long L..58-L..60    /* FFI_TYPE_UINT16 */\n-\t.long L..57-L..60    /* FFI_TYPE_SINT16 */\n-\t.long L..50-L..60    /* FFI_TYPE_UINT32 */\n-\t.long L..51-L..60    /* FFI_TYPE_SINT32 */\n-\t.long L..48-L..60    /* FFI_TYPE_UINT64 */\n-\t.long L..48-L..60    /* FFI_TYPE_SINT64 */\n-\t.long L..44-L..60    /* FFI_TYPE_STRUCT */\n-\t.long L..48-L..60    /* FFI_TYPE_POINTER */\n+/* case FFI_TYPE_VOID */\n+\tmtlr r0\n+\taddi r1, r1, 240\n+\tblr\n+\tnop\n \n+/* case FFI_TYPE_INT */\n+\tlwa r3, 112+4(r1)\n+\tmtlr r0\n+\taddi r1, r1, 240\n+\tblr\n \n-/* case long double */\n-L..45:\n-\tlfd f1,0(r5)\n-\tlfd f2,8(r5)\n-\tb L..44\n+/* case FFI_TYPE_FLOAT */\n+\tlfs f1, 112+0(r1)\n+\tmtlr r0\n+\taddi r1, r1, 240\n+\tblr\n \n-/* case double */\n-L..46:\n-\tlfd f1,0(r5)\n-\tb L..44\n+/* case FFI_TYPE_DOUBLE */\n+\tlfd f1, 112+0(r1)\n+\tmtlr r0\n+\taddi r1, r1, 240\n+\tblr\n \n-/* case float */\n-L..47:\n-\tlfs f1,0(r5)\n-\tb L..44\n+/* case FFI_TYPE_LONGDOUBLE */\n+\tlfd f1, 112+0(r1)\n+\tmtlr r0\n+\tlfd f2, 112+8(r1)\n+\tb L..finish\n \n-/* case long long / pointer */\n-L..48:\n-\tld r3,0(r5)\n-\tb L..44\n+/* case FFI_TYPE_UINT8 */\n+\tlbz r3, 112+7(r1)\n+\tmtlr r0\n+\taddi r1, r1, 240\n+\tblr\n \n-/* case uint32 */\n-L..50:\n-\tlwz r3,4(r5)\n-\tb L..44\n+/* case FFI_TYPE_SINT8 */\n+\tlbz r3, 112+7(r1)\n+\tmtlr r0\n+\textsb r3, r3\n+\tb L..finish\n+\n+/* case FFI_TYPE_UINT16 */\n+\tlhz r3, 112+6(r1)\n+\tmtlr r0\n+L..finish:\n+\taddi r1, r1, 240\n+\tblr\n \n-/* case int / sint32 */\n-L..51:\n-\tlwa r3,4(r5)\n-\tb L..44\n+/* case FFI_TYPE_SINT16 */\n+\tlha r3, 112+6(r1)\n+\tmtlr r0\n+\taddi r1, r1, 240\n+\tblr\n \n-/* case signed int8 */\n-L..55:\n-\tlbz r3,7(r5)\n-\textsb r3,r3\n-\tb L..44\n+/* case FFI_TYPE_UINT32 */\n+\tlwz r3, 112+4(r1)\n+\tmtlr r0\n+\taddi r1, r1, 240\n+\tblr\n \n-/* case unsigned int8 */\n-L..56:\n-\tlbz r3,7(r5)\n-\tb L..44\n+/* case FFI_TYPE_SINT32 */\n+\tlwa r3, 112+4(r1)\n+\tmtlr r0\n+\taddi r1, r1, 240\n+\tblr\n \n-/* case signed int16 */\n-L..57:\n-\tlha r3,6(r5)\n-\tb L..44\n+/* case FFI_TYPE_UINT64 */\n+\tld r3, 112+0(r1)\n+\tmtlr r0\n+\taddi r1, r1, 240\n+\tblr\n \n-/* case unsigned int16 */\n-L..58:\n-\tlhz r3,6(r5)\n+/* case FFI_TYPE_SINT64 */\n+\tld r3, 112+0(r1)\n+\tmtlr r0\n+\taddi r1, r1, 240\n+\tblr\n \n-/* case void / done\t */\n-L..44:\n-\taddi r1,r1,240\t\t/* restore stack pointer */\n-\tld r0,16(r1)\t\t/* get return address */\n-\tmtlr r0\t\t\t/* reset link register */\n+/* case FFI_TYPE_STRUCT */\n+\tmtlr r0\n+\taddi r1, r1, 240\n+\tblr\n+\tnop\n+\n+/* case FFI_TYPE_POINTER */\n+\tld r3, 112+0(r1)\n+\tmtlr r0\n+\taddi r1, r1, 240\n \tblr\n \n #else /* ! __64BIT__ */"}]}