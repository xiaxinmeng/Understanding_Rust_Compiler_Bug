{"sha": "9d4d5d58b20c47a8e4ff40cc2c0120aec4689c5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ0ZDVkNThiMjBjNDdhOGU0ZmY0MGNjMmMwMTIwYWVjNDY4OWM1Yw==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-05-22T18:14:31Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-05-22T18:14:31Z"}, "message": "collect2.c (main): Only generate import or export file and add to link arguments if non-empty.\n\n        * collect2.c (main): Only generate import or export file and add\n        to link arguments if non-empty.  Use xmalloc not alloca.\n        (write_{export,import}_file): Delete.\n        (write_aix_file): New function.\n        (locatelib): Use xmalloc not malloc.\n        (GCC_OK_SYMBOL): Do not check type if aix64.\n\nFrom-SVN: r27106", "tree": {"sha": "669d7bf654cc7206632c3db3b386beae1a3aa553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/669d7bf654cc7206632c3db3b386beae1a3aa553"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d4d5d58b20c47a8e4ff40cc2c0120aec4689c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4d5d58b20c47a8e4ff40cc2c0120aec4689c5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d4d5d58b20c47a8e4ff40cc2c0120aec4689c5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4d5d58b20c47a8e4ff40cc2c0120aec4689c5c/comments", "author": null, "committer": null, "parents": [{"sha": "93d627acaaea8f139ddeead526be0ece47691a6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d627acaaea8f139ddeead526be0ece47691a6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93d627acaaea8f139ddeead526be0ece47691a6e"}], "stats": {"total": 125, "additions": 76, "deletions": 49}, "files": [{"sha": "cbad49b308efe72eda641e270673e778f8299a58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4d5d58b20c47a8e4ff40cc2c0120aec4689c5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4d5d58b20c47a8e4ff40cc2c0120aec4689c5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d4d5d58b20c47a8e4ff40cc2c0120aec4689c5c", "patch": "@@ -1,4 +1,13 @@\n-Thu May 13 09:35:51 1999  Philip Blundell  <pb@nexus.co.uk>\n+Sat May 22 21:02:06 1999  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* collect2.c (main): Only generate import or export file and add\n+\tto link arguments if non-empty.  Use xmalloc not alloca.\n+\t(write_{export,import}_file): Delete.\n+\t(write_aix_file): New function.\n+\t(locatelib): Use xmalloc not malloc.\n+\t(GCC_OK_SYMBOL): Do not check type if aix64.\n+\n+Sat May 22 09:35:51 1999  Philip Blundell  <pb@nexus.co.uk>\n \n \tBased on patch by Scott Bambrough and Pat Beirne:\n \t* config/arm/arm.c (making_const_table): New variable.\n@@ -8,7 +17,7 @@ Thu May 13 09:35:51 1999  Philip Blundell  <pb@nexus.co.uk>\n \t* config/arm/arm.md (consttable_4, consttable_8, consttable_end):\n \tKeep track of when we are building the constant table.\t\n \n-Tue May 18 17:44:22 1999  Philip Blundell  <pb@nexus.co.uk>\n+Sat May 22 09:34:22 1999  Philip Blundell  <pb@nexus.co.uk>\n \n \t* config/arm/arm.c (arm_override_options): Fix erroneous warning\n \tmessage."}, {"sha": "89151c03f9a5289e23f2a12d63c9e894aedfd9db", "filename": "gcc/collect2.c", "status": "modified", "additions": 65, "deletions": 47, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4d5d58b20c47a8e4ff40cc2c0120aec4689c5c/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4d5d58b20c47a8e4ff40cc2c0120aec4689c5c/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=9d4d5d58b20c47a8e4ff40cc2c0120aec4689c5c", "patch": "@@ -297,8 +297,7 @@ static void scan_libraries\tPROTO((char *));\n #endif\n #ifdef COLLECT_EXPORT_LIST\n static int is_in_list\t\tPROTO((char *, struct id *));\n-static void write_export_file\tPROTO((FILE *));\n-static void write_import_file\tPROTO((FILE *));\n+static void write_aix_file\tPROTO((FILE *, struct id *));\n static char *resolve_lib_name\tPROTO((char *));\n static int use_import_list\tPROTO((char *));\n static int ignore_library\tPROTO((char *));\n@@ -1427,36 +1426,49 @@ main (argc, argv)\n      nothing else in the file is referenced, so look at them first.  */\n   {\n       char **export_object_lst = object_lst;\n+\n       while (export_object_lst < object)\n \tscan_prog_file (*export_object_lst++, PASS_OBJ);\n   }\n   {\n     struct id *list = libs.first;\n+\n     for (; list; list = list->next)\n       scan_prog_file (list->name, PASS_FIRST);\n   }\n-  {\n-    char *buf1 = alloca (strlen (export_file) + 5);\n-    char *buf2 = alloca (strlen (import_file) + 5);\n-    sprintf (buf1, \"-bE:%s\", export_file);\n-    sprintf (buf2, \"-bI:%s\", import_file);\n-    *ld1++ = buf1;\n-    *ld2++ = buf1;\n-    *ld1++ = buf2;\n-    *ld2++ = buf2;\n-    exportf = fopen (export_file, \"w\");\n-    if (exportf == (FILE *) 0)\n-      fatal_perror (\"fopen %s\", export_file);\n-    write_export_file (exportf);\n-    if (fclose (exportf))\n-      fatal_perror (\"fclose %s\", export_file);\n-    importf = fopen (import_file, \"w\");\n-    if (importf == (FILE *) 0)\n-      fatal_perror (\"%s\", import_file);\n-    write_import_file (importf);\n-    if (fclose (importf))\n-      fatal_perror (\"fclose %s\", import_file);\n-  }\n+\n+  if (exports.first)\n+    {\n+      char *buf = xmalloc (strlen (export_file) + 5);\n+\n+      sprintf (buf, \"-bE:%s\", export_file);\n+      *ld1++ = buf;\n+      *ld2++ = buf;\n+\n+      exportf = fopen (export_file, \"w\");\n+      if (exportf == (FILE *) 0)\n+\tfatal_perror (\"fopen %s\", export_file);\n+      write_aix_file (exportf, exports.first);\n+      if (fclose (exportf))\n+\tfatal_perror (\"fclose %s\", export_file);\n+    }\n+\n+  if (imports.first)\n+    {\n+      char *buf = xmalloc (strlen (import_file) + 5);\n+\n+      sprintf (buf, \"-bI:%s\", import_file);\n+      *ld1++ = buf;\n+      *ld2++ = buf;\n+\n+      importf = fopen (import_file, \"w\");\n+      if (importf == (FILE *) 0)\n+\tfatal_perror (\"%s\", import_file);\n+      fputs (\"#! .\\n\", importf);\n+      write_aix_file (importf, imports.first);\n+      if (fclose (importf))\n+\tfatal_perror (\"fclose %s\", import_file);\n+    }\n #endif\n \n   *c_ptr++ = c_file;\n@@ -1542,7 +1554,7 @@ main (argc, argv)\n      and destructors to call.\n      Write the constructor and destructor tables to a .s file and reload.  */\n \n-  /* On AIX we already done scanning for global constructors/destructors.  */\n+  /* On AIX we already scanned for global constructors/destructors.  */\n #ifndef COLLECT_EXPORT_LIST\n   scan_prog_file (output_file, PASS_FIRST);\n #endif\n@@ -1568,7 +1580,7 @@ main (argc, argv)\n       )\n     {\n #ifdef COLLECT_EXPORT_LIST\n-      /* Doing tlink without additional code generation */\n+      /* Do tlink without additional code generation */\n       do_tlink (ld1_argv, object_lst);\n #endif\n       /* Strip now if it was requested on the command line.  */\n@@ -1611,24 +1623,36 @@ main (argc, argv)\n   *ld2++ = LD_FINI_SWITCH;\n   *ld2++ = fininame;\n #endif\n-  *ld2 = (char*) 0;\n \n #ifdef COLLECT_EXPORT_LIST\n   if (shared_obj)\n     {\n+      /* If we did not add export flag to link arguments before, add it to\n+\t second link phase now.  No new exports should have been added.  */\n+      if (! exports.first)\n+\t{\n+\t  char *buf = xmalloc (strlen (export_file) + 5);\n+\n+\t  sprintf (buf, \"-bE:%s\", export_file);\n+\t  *ld2++ = buf;\n+\t}\n+\n       add_to_list (&exports, initname);\n       add_to_list (&exports, fininame);\n       add_to_list (&exports, \"_GLOBAL__DI\");\n       add_to_list (&exports, \"_GLOBAL__DD\");\n       exportf = fopen (export_file, \"w\");\n       if (exportf == (FILE *) 0)\n \tfatal_perror (\"fopen %s\", export_file);\n-      write_export_file (exportf);\n+      write_aix_file (exportf, exports.first);\n       if (fclose (exportf))\n \tfatal_perror (\"fclose %s\", export_file);\n     }\n #endif\n \n+  /* End of arguments to second link phase.  */\n+  *ld2 = (char*) 0;\n+\n   if (debug)\n     {\n       fprintf (stderr, \"\\n========== output_file = %s, c_file = %s\\n\",\n@@ -1637,7 +1661,7 @@ main (argc, argv)\n       fprintf (stderr, \"========== end of c_file\\n\\n\");\n #ifdef COLLECT_EXPORT_LIST\n       fprintf (stderr, \"\\n========== export_file = %s\\n\", export_file);\n-      write_export_file (stderr);\n+      write_aix_file (stderr, exports.first);\n       fprintf (stderr, \"========== end of export_file\\n\\n\");\n #endif\n     }\n@@ -2203,22 +2227,15 @@ write_c_file (stream, name)\n \n #ifdef COLLECT_EXPORT_LIST\n static void\n-write_export_file (stream)\n-     FILE *stream;\n-{\n-  struct id *list = exports.first;\n-  for (; list; list = list->next)\n-    fprintf (stream, \"%s\\n\", list->name);\n-}\n-\n-static void\n-write_import_file (stream)\n+write_aix_file (stream, list)\n      FILE *stream;\n+     struct id *list;\n {\n-  struct id *list = imports.first;\n-  fprintf (stream, \"%s\\n\", \"#! .\");\n   for (; list; list = list->next)\n-    fprintf (stream, \"%s\\n\", list->name);\n+    {\n+      fputs (list->name, stream);\n+      putc ('\\n', stream);\n+    }\n }\n #endif\n \f\n@@ -2528,7 +2545,7 @@ locatelib (name)\n \t    if (*ld_rules == ':')\n \t      cnt++;\n \t  ld_rules = (char *) (ld_2->ld_rules + code);\n-\t  ldr = (char *) malloc (strlen (ld_rules) + 1);\n+\t  ldr = (char *) xmalloc (strlen (ld_rules) + 1);\n \t  strcpy (ldr, ld_rules);\n \t}\n       p = getenv (\"LD_LIBRARY_PATH\");\n@@ -2539,10 +2556,10 @@ locatelib (name)\n \t  for (q = p ; *q != 0; q++)\n \t    if (*q == ':')\n \t      cnt++;\n-\t  q = (char *) malloc (strlen (p) + 1);\n+\t  q = (char *) xmalloc (strlen (p) + 1);\n \t  strcpy (q, p);\n \t}\n-      l = (char **) malloc ((cnt + 3) * sizeof (char *));\n+      l = (char **) xmalloc ((cnt + 3) * sizeof (char *));\n       pp = l;\n       if (ldr)\n \t{\n@@ -2826,8 +2843,9 @@ scan_libraries (prog_name)\n #   define GCC_OK_SYMBOL(X) \\\n      (((X).n_sclass == C_EXT) && \\\n       ((X).n_scnum > N_UNDEF) && \\\n-      (((X).n_type & N_TMASK) == (DT_NON << N_BTSHFT) || \\\n-       ((X).n_type & N_TMASK) == (DT_FCN << N_BTSHFT)))\n+      (aix64_flag \\\n+       || (((X).n_type & N_TMASK) == (DT_NON << N_BTSHFT) \\\n+           || ((X).n_type & N_TMASK) == (DT_FCN << N_BTSHFT))))\n #   define GCC_UNDEF_SYMBOL(X) \\\n      (((X).n_sclass == C_EXT) && ((X).n_scnum == N_UNDEF))\n #   define GCC_SYMINC(X)\t((X).n_numaux+1)"}]}