{"sha": "0cded43df4e04799722b0595b4d31cd85bd29920", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNkZWQ0M2RmNGUwNDc5OTcyMmIwNTk1YjRkMzFjZDg1YmQyOTkyMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-04-18T18:03:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-04-18T18:03:50Z"}, "message": "PR libstdc++/41759 reword static assertions in <random>\n\n\tPR libstdc++/41759\n\t* include/bits/random.h: Reword static assertion messages to state\n\tpositive conditions.\n\t* include/bits/random.tcc: Likewise.\n\t* include/bits/uniform_int_dist.h: Likewise.\n\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error\n\tpatterns.\n\nFrom-SVN: r235160", "tree": {"sha": "c36644a3efd2fb288c7d9f6d39f3fd2c56b395a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c36644a3efd2fb288c7d9f6d39f3fd2c56b395a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cded43df4e04799722b0595b4d31cd85bd29920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cded43df4e04799722b0595b4d31cd85bd29920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cded43df4e04799722b0595b4d31cd85bd29920", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cded43df4e04799722b0595b4d31cd85bd29920/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa519ca610f7208b44995aee441e6780f40d7c66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa519ca610f7208b44995aee441e6780f40d7c66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa519ca610f7208b44995aee441e6780f40d7c66"}], "stats": {"total": 76, "additions": 42, "deletions": 34}, "files": [{"sha": "4dfe22bd932f51f03015a24a6e6363d6d8c5cf6a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cded43df4e04799722b0595b4d31cd85bd29920/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cded43df4e04799722b0595b4d31cd85bd29920/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0cded43df4e04799722b0595b4d31cd85bd29920", "patch": "@@ -1,5 +1,13 @@\n 2016-04-18  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/41759\n+\t* include/bits/random.h: Reword static assertion messages to state\n+\tpositive conditions.\n+\t* include/bits/random.tcc: Likewise.\n+\t* include/bits/uniform_int_dist.h: Likewise.\n+\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error\n+\tpatterns.\n+\n \t* include/std/function (_Bind, _Bind_result): Remove unused typedefs.\n \n \t* config/cpu/sh/atomicity.h: Fix typo in comment."}, {"sha": "d5182dcede383a4444658219e3beb17f85ec4e0d", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cded43df4e04799722b0595b4d31cd85bd29920/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cded43df4e04799722b0595b4d31cd85bd29920/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=0cded43df4e04799722b0595b4d31cd85bd29920", "patch": "@@ -158,7 +158,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n       struct _Adaptor\n       {\n \tstatic_assert(std::is_floating_point<_DInputType>::value,\n-\t\t      \"template argument not a floating point type\");\n+\t\t      \"template argument must be a floating point type\");\n \n       public:\n \t_Adaptor(_Engine& __g)\n@@ -235,8 +235,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n     class linear_congruential_engine\n     {\n-      static_assert(std::is_unsigned<_UIntType>::value, \"template argument \"\n-\t\t    \"substituting _UIntType not an unsigned integral type\");\n+      static_assert(std::is_unsigned<_UIntType>::value,\n+\t\t    \"result_type must be an unsigned integral type\");\n       static_assert(__m == 0u || (__a < __m && __c < __m),\n \t\t    \"template argument substituting __m out of bounds\");\n \n@@ -443,8 +443,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   _UIntType __c, size_t __l, _UIntType __f>\n     class mersenne_twister_engine\n     {\n-      static_assert(std::is_unsigned<_UIntType>::value, \"template argument \"\n-\t\t    \"substituting _UIntType not an unsigned integral type\");\n+      static_assert(std::is_unsigned<_UIntType>::value,\n+\t\t    \"result_type must be an unsigned integral type\");\n       static_assert(1u <= __m && __m <= __n,\n \t\t    \"template argument substituting __m out of bounds\");\n       static_assert(__r <= __w, \"template argument substituting \"\n@@ -658,10 +658,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _UIntType, size_t __w, size_t __s, size_t __r>\n     class subtract_with_carry_engine\n     {\n-      static_assert(std::is_unsigned<_UIntType>::value, \"template argument \"\n-\t\t    \"substituting _UIntType not an unsigned integral type\");\n+      static_assert(std::is_unsigned<_UIntType>::value,\n+\t\t    \"result_type must be an unsigned integral type\");\n       static_assert(0u < __s && __s < __r,\n-\t\t    \"template argument substituting __s out of bounds\");\n+\t\t    \"0 < s < r\");\n       static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,\n \t\t    \"template argument substituting __w out of bounds\");\n \n@@ -1065,8 +1065,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _RandomNumberEngine, size_t __w, typename _UIntType>\n     class independent_bits_engine\n     {\n-      static_assert(std::is_unsigned<_UIntType>::value, \"template argument \"\n-\t\t    \"substituting _UIntType not an unsigned integral type\");\n+      static_assert(std::is_unsigned<_UIntType>::value,\n+\t\t    \"result_type must be an unsigned integral type\");\n       static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,\n \t\t    \"template argument substituting __w out of bounds\");\n \n@@ -1278,7 +1278,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /**\n    * @brief Produces random numbers by combining random numbers from some\n    * base engine to produce random numbers with a specifies number of bits\n-   * @p __w.\n+   * @p __k.\n    */\n   template<typename _RandomNumberEngine, size_t __k>\n     class shuffle_order_engine\n@@ -1649,7 +1649,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n-  // std::uniform_int_distribution is defined in <bits/random_uid.h>\n+  // std::uniform_int_distribution is defined in <bits/uniform_int_dist.h>\n \n   /**\n    * @brief Return true if two uniform integer distributions have\n@@ -1702,7 +1702,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class uniform_real_distribution\n     {\n       static_assert(std::is_floating_point<_RealType>::value,\n-\t\t    \"template argument not a floating point type\");\n+\t\t    \"result_type must be a floating point type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -1920,7 +1920,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class normal_distribution\n     {\n       static_assert(std::is_floating_point<_RealType>::value,\n-\t\t    \"template argument not a floating point type\");\n+\t\t    \"result_type must be a floating point type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -2133,7 +2133,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class lognormal_distribution\n     {\n       static_assert(std::is_floating_point<_RealType>::value,\n-\t\t    \"template argument not a floating point type\");\n+\t\t    \"result_type must be a floating point type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -2337,7 +2337,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class gamma_distribution\n     {\n       static_assert(std::is_floating_point<_RealType>::value,\n-\t\t    \"template argument not a floating point type\");\n+\t\t    \"result_type must be a floating point type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -2554,7 +2554,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class chi_squared_distribution\n     {\n       static_assert(std::is_floating_point<_RealType>::value,\n-\t\t    \"template argument not a floating point type\");\n+\t\t    \"result_type must be a floating point type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -2764,7 +2764,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class cauchy_distribution\n     {\n       static_assert(std::is_floating_point<_RealType>::value,\n-\t\t    \"template argument not a floating point type\");\n+\t\t    \"result_type must be a floating point type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -2965,7 +2965,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class fisher_f_distribution\n     {\n       static_assert(std::is_floating_point<_RealType>::value,\n-\t\t    \"template argument not a floating point type\");\n+\t\t    \"result_type must be a floating point type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -3189,7 +3189,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class student_t_distribution\n     {\n       static_assert(std::is_floating_point<_RealType>::value,\n-\t\t    \"template argument not a floating point type\");\n+\t\t    \"result_type must be a floating point type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -3612,7 +3612,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class binomial_distribution\n     {\n       static_assert(std::is_integral<_IntType>::value,\n-\t\t    \"template argument not an integral type\");\n+\t\t    \"result_type must be an integral type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -3843,7 +3843,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class geometric_distribution\n     {\n       static_assert(std::is_integral<_IntType>::value,\n-\t\t    \"template argument not an integral type\");\n+\t\t    \"result_type must be an integral type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -4043,7 +4043,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class negative_binomial_distribution\n     {\n       static_assert(std::is_integral<_IntType>::value,\n-\t\t    \"template argument not an integral type\");\n+\t\t    \"result_type must be an integral type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -4265,7 +4265,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class poisson_distribution\n     {\n       static_assert(std::is_integral<_IntType>::value,\n-\t\t    \"template argument not an integral type\");\n+\t\t    \"result_type must be an integral type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -4481,7 +4481,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class exponential_distribution\n     {\n       static_assert(std::is_floating_point<_RealType>::value,\n-\t\t    \"template argument not a floating point type\");\n+\t\t    \"result_type must be a floating point type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -4683,7 +4683,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class weibull_distribution\n     {\n       static_assert(std::is_floating_point<_RealType>::value,\n-\t\t    \"template argument not a floating point type\");\n+\t\t    \"result_type must be a floating point type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -4886,7 +4886,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class extreme_value_distribution\n     {\n       static_assert(std::is_floating_point<_RealType>::value,\n-\t\t    \"template argument not a floating point type\");\n+\t\t    \"result_type must be a floating point type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -5086,7 +5086,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class discrete_distribution\n     {\n       static_assert(std::is_integral<_IntType>::value,\n-\t\t    \"template argument not an integral type\");\n+\t\t    \"result_type must be an integral type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -5316,7 +5316,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class piecewise_constant_distribution\n     {\n       static_assert(std::is_floating_point<_RealType>::value,\n-\t\t    \"template argument not a floating point type\");\n+\t\t    \"result_type must be a floating point type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -5583,7 +5583,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class piecewise_linear_distribution\n     {\n       static_assert(std::is_floating_point<_RealType>::value,\n-\t\t    \"template argument not a floating point type\");\n+\t\t    \"result_type must be a floating point type\");\n \n     public:\n       /** The type of the range of the distribution. */"}, {"sha": "079cb1fc787164b9c675876f2609019a2a1a8f1c", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cded43df4e04799722b0595b4d31cd85bd29920/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cded43df4e04799722b0595b4d31cd85bd29920/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=0cded43df4e04799722b0595b4d31cd85bd29920", "patch": "@@ -3312,7 +3312,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     generate_canonical(_UniformRandomNumberGenerator& __urng)\n     {\n       static_assert(std::is_floating_point<_RealType>::value,\n-\t\t    \"template argument not a floating point type\");\n+\t\t    \"template argument must be a floating point type\");\n \n       const size_t __b\n \t= std::min(static_cast<size_t>(std::numeric_limits<_RealType>::digits),"}, {"sha": "06bc36e48862cb737dca5977000adec1afcf7f8c", "filename": "libstdc++-v3/include/bits/uniform_int_dist.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cded43df4e04799722b0595b4d31cd85bd29920/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cded43df4e04799722b0595b4d31cd85bd29920/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h?ref=0cded43df4e04799722b0595b4d31cd85bd29920", "patch": "@@ -58,7 +58,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class uniform_int_distribution\n     {\n       static_assert(std::is_integral<_IntType>::value,\n-\t\t    \"template argument not an integral type\");\n+\t\t    \"template argument must be an integral type\");\n \n     public:\n       /** The type of the range of the distribution. */"}, {"sha": "f0efa4ce5c473abc9eed44b6a6c87f881676d4b7", "filename": "libstdc++-v3/testsuite/26_numerics/random/pr60037-neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cded43df4e04799722b0595b4d31cd85bd29920/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cded43df4e04799722b0595b4d31cd85bd29920/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc?ref=0cded43df4e04799722b0595b4d31cd85bd29920", "patch": "@@ -10,6 +10,6 @@ std::__detail::_Adaptor<std::mt19937, unsigned long> aurng(urng);\n auto x = std::generate_canonical<std::size_t,\n \t\t\tstd::numeric_limits<std::size_t>::digits>(urng);\n \n-// { dg-error \"static assertion failed: template argument not a floating point type\" \"\" { target *-*-* } 160 }\n+// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 160 }\n \n-// { dg-error \"static assertion failed: template argument not a floating point type\" \"\" { target *-*-* } 3314 }\n+// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 3314 }"}]}