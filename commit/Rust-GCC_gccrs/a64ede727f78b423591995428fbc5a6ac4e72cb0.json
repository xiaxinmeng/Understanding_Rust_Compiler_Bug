{"sha": "a64ede727f78b423591995428fbc5a6ac4e72cb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY0ZWRlNzI3Zjc4YjQyMzU5MTk5NTQyOGZiYzVhNmFjNGU3MmNiMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-30T17:13:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-30T17:13:05Z"}, "message": "PR libstdc++/86734 make reverse_iterator::operator-> more robust\n\nImplement the proposed resolution from LWG 1052, which also resolves\nDR 2118 by avoiding taking the address in the first place.\n\n\tPR libstdc++/86734\n\t* include/bits/stl_iterator.h (reverse_iterator::operator->): Call\n\t_S_to_pointer (LWG 1052, LWG 2118).\n\t(reverse_iterator::_S_to_pointer): Define overloaded helper functions.\n\t* testsuite/24_iterators/reverse_iterator/dr1052.cc: New test.\n\t* testsuite/24_iterators/reverse_iterator/dr2188.cc: New test.\n\nFrom-SVN: r263074", "tree": {"sha": "37ba923ab733fac9f1644f112a52cf31d03788e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37ba923ab733fac9f1644f112a52cf31d03788e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a64ede727f78b423591995428fbc5a6ac4e72cb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64ede727f78b423591995428fbc5a6ac4e72cb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a64ede727f78b423591995428fbc5a6ac4e72cb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64ede727f78b423591995428fbc5a6ac4e72cb0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b3b888d117da2f0e03d84db1e42749b304ba3b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3b888d117da2f0e03d84db1e42749b304ba3b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b3b888d117da2f0e03d84db1e42749b304ba3b5"}], "stats": {"total": 156, "additions": 155, "deletions": 1}, "files": [{"sha": "6298f7eab23cf4164503d6670940a6c860c22a41", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64ede727f78b423591995428fbc5a6ac4e72cb0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64ede727f78b423591995428fbc5a6ac4e72cb0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a64ede727f78b423591995428fbc5a6ac4e72cb0", "patch": "@@ -1,5 +1,12 @@\n 2018-07-30  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/86734\n+\t* include/bits/stl_iterator.h (reverse_iterator::operator->): Call\n+\t_S_to_pointer (LWG 1052, LWG 2118).\n+\t(reverse_iterator::_S_to_pointer): Define overloaded helper functions.\n+\t* testsuite/24_iterators/reverse_iterator/dr1052.cc: New test.\n+\t* testsuite/24_iterators/reverse_iterator/dr2188.cc: New test.\n+\n \t* libsupc++/new_opa.cc (operator new(size_t, align_val_t)): Add\n \tworkaround for aligned_alloc bug on AIX.\n \t* testsuite/18_support/new_aligned.cc: New test."}, {"sha": "8562f879c1614850aa75fb68fed2b2eba782eb24", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64ede727f78b423591995428fbc5a6ac4e72cb0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64ede727f78b423591995428fbc5a6ac4e72cb0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=a64ede727f78b423591995428fbc5a6ac4e72cb0", "patch": "@@ -122,6 +122,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 235 No specification of default ctor for reverse_iterator\n+      // 1012. reverse_iterator default ctor should value initialize\n       _GLIBCXX17_CONSTEXPR\n       reverse_iterator() : current() { }\n \n@@ -182,7 +183,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       _GLIBCXX17_CONSTEXPR pointer\n       operator->() const\n-      { return &(operator*()); }\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 1052. operator-> should also support smart pointers\n+\t_Iterator __tmp = current;\n+\t--__tmp;\n+\treturn _S_to_pointer(__tmp);\n+      }\n \n       /**\n        *  @return  @c *this\n@@ -286,6 +293,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX17_CONSTEXPR reference\n       operator[](difference_type __n) const\n       { return *(*this + __n); }\n+\n+    private:\n+      template<typename _Tp>\n+\tstatic _GLIBCXX17_CONSTEXPR _Tp*\n+\t_S_to_pointer(_Tp* __p)\n+        { return __p; }\n+\n+      template<typename _Tp>\n+\tstatic _GLIBCXX17_CONSTEXPR pointer\n+\t_S_to_pointer(_Tp __t)\n+        { return __t.operator->(); }\n     };\n \n   //@{"}, {"sha": "2704010a083a2ab65c7e1696c46f5f077fc3e419", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/dr1052.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64ede727f78b423591995428fbc5a6ac4e72cb0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fdr1052.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64ede727f78b423591995428fbc5a6ac4e72cb0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fdr1052.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fdr1052.cc?ref=a64ede727f78b423591995428fbc5a6ac4e72cb0", "patch": "@@ -0,0 +1,82 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+// PR libstdc++/86734\n+// LWG 1052. reverse_iterator::operator-> should also support smart pointers\n+// LWG 2775. reverse_iterator is does not compile for fancy pointers\n+\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  // Example 1 from LWG 1052\n+\n+  struct X { int m; };\n+\n+  static X x;\n+\n+  struct IterX {\n+    typedef std::bidirectional_iterator_tag iterator_category;\n+    typedef X& reference;\n+    struct pointer\n+    {\n+      pointer(X& v) : value(v) {}\n+      X& value;\n+      X* operator->() const {return &value;}\n+    };\n+    typedef std::ptrdiff_t difference_type;\n+    typedef X value_type;\n+    // additional iterator requirements not important for this issue\n+\n+    reference operator*() const { return x; }\n+    pointer operator->() const { return pointer(x); }\n+    IterX& operator--() {return *this;}\n+\n+  };\n+\n+  std::reverse_iterator<IterX> ix;\n+  VERIFY( &ix->m == &(*ix).m );\n+}\n+\n+void\n+test02()\n+{\n+  // Example 2 from LWG 1052\n+\n+  struct P {\n+    P() : first(10), second(20.0) { }\n+    int first;\n+    double second;\n+  };\n+  P op;\n+  std::reverse_iterator<P*> ri(&op + 1);\n+  VERIFY( ri->first == 10 );\n+}\n+\n+// N.B. Example 3 from LWG 1052 isn't expected to work,\n+// because a caching iterator like IterX is not a forward iterator.\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "047334ddf24cdc4e46a40c732c0842f0f165f05e", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/dr2188.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64ede727f78b423591995428fbc5a6ac4e72cb0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fdr2188.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64ede727f78b423591995428fbc5a6ac4e72cb0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fdr2188.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fdr2188.cc?ref=a64ede727f78b423591995428fbc5a6ac4e72cb0", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+// PR libstdc++/86734\n+\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  // LWG DR 2188\n+  // Reverse iterator does not fully support targets that overload operator&\n+  struct X {\n+    int val;\n+    int* operator&() { return &val; }\n+    const int* operator&() const { return &val; }\n+  };\n+\n+  X x[2] = { {1}, {2} };\n+  std::reverse_iterator<X*> rev(x+2);\n+  VERIFY( rev->val == 2 );\n+  ++rev;\n+  VERIFY( rev->val == 1 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}