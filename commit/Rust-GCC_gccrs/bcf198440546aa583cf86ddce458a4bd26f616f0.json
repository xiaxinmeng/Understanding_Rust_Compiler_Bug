{"sha": "bcf198440546aa583cf86ddce458a4bd26f616f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNmMTk4NDQwNTQ2YWE1ODNjZjg2ZGRjZTQ1OGE0YmQyNmY2MTZmMA==", "commit": {"author": {"name": "Jackson Woodruff", "email": "jackson.woodruff@arm.com", "date": "2017-07-14T09:18:09Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2017-07-14T09:18:09Z"}, "message": "[Patch][Aarch64] Refactor comments in aarch64_print_operand\n\nThis patch refactors comments in config/aarch64/aarch64.c aarch64_print_operand\nto provide a table of aarch64 specific formating options.\n\n---\ngcc/\n\n2017-07-14  Jackson Woodruff  <jackson.woodruff@arm.com>\n\n\t* config/aarch64/aarch64.c (aarch64_print_operand): Move comments\n\tto top of function.\n\nFrom-SVN: r250202", "tree": {"sha": "1cf614fbafacba3da5b5ae16ac74885c80827946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cf614fbafacba3da5b5ae16ac74885c80827946"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcf198440546aa583cf86ddce458a4bd26f616f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcf198440546aa583cf86ddce458a4bd26f616f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcf198440546aa583cf86ddce458a4bd26f616f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcf198440546aa583cf86ddce458a4bd26f616f0/comments", "author": null, "committer": null, "parents": [{"sha": "a848c710910d783a7c3b3c29dd481df596b016c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a848c710910d783a7c3b3c29dd481df596b016c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a848c710910d783a7c3b3c29dd481df596b016c2"}], "stats": {"total": 54, "additions": 37, "deletions": 17}, "files": [{"sha": "c2f3eebe8fa6a4d93dd981f160ab674b1be32bb8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf198440546aa583cf86ddce458a4bd26f616f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf198440546aa583cf86ddce458a4bd26f616f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcf198440546aa583cf86ddce458a4bd26f616f0", "patch": "@@ -1,3 +1,8 @@\n+2017-07-14  Jackson Woodruff  <jackson.woodruff@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_print_operand): Move comments\n+\tto top of function.\n+\n 2017-07-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gimple-ssa-store-merging.c (clear_bit_region): Replace reference to"}, {"sha": "134d37ba693df9a81b4f9d96af139fdb869106fe", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf198440546aa583cf86ddce458a4bd26f616f0/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf198440546aa583cf86ddce458a4bd26f616f0/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=bcf198440546aa583cf86ddce458a4bd26f616f0", "patch": "@@ -5053,12 +5053,43 @@ static const int aarch64_nzcv_codes[] =\n   0\t\t/* NV, Any.  */\n };\n \n+/* Print operand X to file F in a target specific manner according to CODE.\n+   The acceptable formatting commands given by CODE are:\n+     'c':\t\tAn integer or symbol address without a preceding #\n+\t\t\tsign.\n+     'e':\t\tPrint the sign/zero-extend size as a character 8->b,\n+\t\t\t16->h, 32->w.\n+     'p':\t\tPrints N such that 2^N == X (X must be power of 2 and\n+\t\t\tconst int).\n+     'P':\t\tPrint the number of non-zero bits in X (a const_int).\n+     'H':\t\tPrint the higher numbered register of a pair (TImode)\n+\t\t\tof regs.\n+     'm':\t\tPrint a condition (eq, ne, etc).\n+     'M':\t\tSame as 'm', but invert condition.\n+     'b/h/s/d/q':\tPrint a scalar FP/SIMD register name.\n+     'S/T/U/V':\t\tPrint a FP/SIMD register name for a register list.\n+\t\t\tThe register printed is the FP/SIMD register name\n+\t\t\tof X + 0/1/2/3 for S/T/U/V.\n+     'R':\t\tPrint a scalar FP/SIMD register name + 1.\n+     'X':\t\tPrint bottom 16 bits of integer constant in hex.\n+     'w/x':\t\tPrint a general register name or the zero register\n+\t\t\t(32-bit or 64-bit).\n+     '0':\t\tPrint a normal operand, if it's a general register,\n+\t\t\tthen we assume DImode.\n+     'k':\t\tPrint NZCV for conditional compare instructions.\n+     'A':\t\tOutput address constant representing the first\n+\t\t\targument of X, specifying a relocation offset\n+\t\t\tif appropriate.\n+     'L':\t\tOutput constant address specified by X\n+\t\t\twith a relocation offset if appropriate.\n+     'G':\t\tPrints address of X, specifying a PC relative\n+\t\t\trelocation mode if appropriate.  */\n+\n static void\n aarch64_print_operand (FILE *f, rtx x, int code)\n {\n   switch (code)\n     {\n-    /* An integer or symbol address without a preceding # sign.  */\n     case 'c':\n       switch (GET_CODE (x))\n \t{\n@@ -5085,7 +5116,6 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n       break;\n \n     case 'e':\n-      /* Print the sign/zero-extend size as a character 8->b, 16->h, 32->w.  */\n       {\n \tint n;\n \n@@ -5118,7 +5148,6 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n       {\n \tint n;\n \n-\t/* Print N such that 2^N == X.  */\n \tif (!CONST_INT_P (x) || (n = exact_log2 (INTVAL (x))) < 0)\n \t  {\n \t    output_operand_lossage (\"invalid operand for '%%%c'\", code);\n@@ -5130,7 +5159,6 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n       break;\n \n     case 'P':\n-      /* Print the number of non-zero bits in X (a const_int).  */\n       if (!CONST_INT_P (x))\n \t{\n \t  output_operand_lossage (\"invalid operand for '%%%c'\", code);\n@@ -5141,7 +5169,6 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n       break;\n \n     case 'H':\n-      /* Print the higher numbered register of a pair (TImode) of regs.  */\n       if (!REG_P (x) || !GP_REGNUM_P (REGNO (x) + 1))\n \t{\n \t  output_operand_lossage (\"invalid operand for '%%%c'\", code);\n@@ -5155,8 +5182,6 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n     case 'm':\n       {\n         int cond_code;\n-\t/* Print a condition (eq, ne, etc) or its inverse.  */\n-\n \t/* CONST_TRUE_RTX means al/nv (al is the default, don't print it).  */\n \tif (x == const_true_rtx)\n \t  {\n@@ -5184,7 +5209,6 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n     case 's':\n     case 'd':\n     case 'q':\n-      /* Print a scalar FP/SIMD register name.  */\n       if (!REG_P (x) || !FP_REGNUM_P (REGNO (x)))\n \t{\n \t  output_operand_lossage (\"incompatible floating point / vector register operand for '%%%c'\", code);\n@@ -5197,7 +5221,6 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n     case 'T':\n     case 'U':\n     case 'V':\n-      /* Print the first FP/SIMD register name in a list.  */\n       if (!REG_P (x) || !FP_REGNUM_P (REGNO (x)))\n \t{\n \t  output_operand_lossage (\"incompatible floating point / vector register operand for '%%%c'\", code);\n@@ -5207,7 +5230,6 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n       break;\n \n     case 'R':\n-      /* Print a scalar FP/SIMD register name + 1.  */\n       if (!REG_P (x) || !FP_REGNUM_P (REGNO (x)))\n \t{\n \t  output_operand_lossage (\"incompatible floating point / vector register operand for '%%%c'\", code);\n@@ -5217,7 +5239,6 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n       break;\n \n     case 'X':\n-      /* Print bottom 16 bits of integer constant in hex.  */\n       if (!CONST_INT_P (x))\n \t{\n \t  output_operand_lossage (\"invalid operand for '%%%c'\", code);\n@@ -5228,8 +5249,6 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n \n     case 'w':\n     case 'x':\n-      /* Print a general register name or the zero register (32-bit or\n-         64-bit).  */\n       if (x == const0_rtx\n \t  || (CONST_DOUBLE_P (x) && aarch64_float_const_zero_rtx_p (x)))\n \t{\n@@ -5252,8 +5271,6 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n       /* Fall through */\n \n     case 0:\n-      /* Print a normal operand, if it's a general register, then we\n-\t assume DImode.  */\n       if (x == NULL)\n \t{\n \t  output_operand_lossage (\"missing operand\");\n@@ -5406,7 +5423,6 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n       break;\n \n     case 'G':\n-\n       switch (aarch64_classify_symbolic_expression (x))\n \t{\n \tcase SYMBOL_TLSLE24:\n@@ -5421,7 +5437,6 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n     case 'k':\n       {\n \tHOST_WIDE_INT cond_code;\n-\t/* Print nzcv.  */\n \n \tif (!CONST_INT_P (x))\n \t  {"}]}