{"sha": "43435c7eb0ff60f02838674efd99df93852a92cc", "node_id": "C_kwDOANBUbNoAKDQzNDM1YzdlYjBmZjYwZjAyODM4Njc0ZWZkOTlkZjkzODUyYTkyY2M", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-09-22T23:37:14Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-11-13T15:47:20Z"}, "message": "RISC-V: optimize '(a >= 0) ? b : 0' to srai + andn, if compiling for Zbb\n\nIf-conversion is turning '(a >= 0) ? b : 0' into a branchless sequence\n\tnot\ta5,a0\n\tsrai\ta5,a5,63\n\tand\ta0,a1,a5\nmissing the opportunity to combine the NOT and AND into an ANDN.\n\nThis adds a define_split to help the combiner reassociate the NOT with\nthe AND.\n\ngcc/ChangeLog:\n\n\t* config/riscv/bitmanip.md: New define_split.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zbb-srai-andn.c: New test.", "tree": {"sha": "e2d0410750a24131f53df90d45047a871a7e1216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2d0410750a24131f53df90d45047a871a7e1216"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43435c7eb0ff60f02838674efd99df93852a92cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43435c7eb0ff60f02838674efd99df93852a92cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43435c7eb0ff60f02838674efd99df93852a92cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43435c7eb0ff60f02838674efd99df93852a92cc/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bf46ea7bce58918ae8da1c936fe4c55456d2b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bf46ea7bce58918ae8da1c936fe4c55456d2b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bf46ea7bce58918ae8da1c936fe4c55456d2b6b"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "d26f3567182d5a8ff360794ff0a13e2dfb0e5adf", "filename": "gcc/config/riscv/bitmanip.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43435c7eb0ff60f02838674efd99df93852a92cc/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43435c7eb0ff60f02838674efd99df93852a92cc/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=43435c7eb0ff60f02838674efd99df93852a92cc", "patch": "@@ -128,6 +128,19 @@\n   [(set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"<X:MODE>\")])\n \n+;; '(a >= 0) ? b : 0' is emitted branchless (from if-conversion).  Without a\n+;; bit of extra help for combine (i.e., the below split), we end up emitting\n+;; not/srai/and instead of combining the not into an andn.\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(and:DI (neg:DI (ge:DI (match_operand:DI 1 \"register_operand\")\n+\t\t\t       (const_int 0)))\n+\t\t(match_operand:DI 2 \"register_operand\")))\n+   (clobber (match_operand:DI 3 \"register_operand\"))]\n+  \"TARGET_ZBB\"\n+  [(set (match_dup 3) (ashiftrt:DI (match_dup 1) (const_int 63)))\n+   (set (match_dup 0) (and:DI (not:DI (match_dup 3)) (match_dup 2)))])\n+\n (define_insn \"*xor_not<mode>\"\n   [(set (match_operand:X 0 \"register_operand\" \"=r\")\n         (not:X (xor:X (match_operand:X 1 \"register_operand\" \"r\")"}, {"sha": "afe9fba5f0502e486db50a2bdc164c2a63f67d31", "filename": "gcc/testsuite/gcc.target/riscv/zbb-srai-andn.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43435c7eb0ff60f02838674efd99df93852a92cc/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-srai-andn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43435c7eb0ff60f02838674efd99df93852a92cc/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-srai-andn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-srai-andn.c?ref=43435c7eb0ff60f02838674efd99df93852a92cc", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbb -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-Og\" \"-Os\" \"-Oz\" } } */\n+\n+long long foo0(long long a, long long b)\n+{\n+  if (a >= 0)\n+    return b;\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"srai\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"andn\\t\" 1 } } */\n+"}]}