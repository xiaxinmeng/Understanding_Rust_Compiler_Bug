{"sha": "e596622890e8bfbbf407b27bd79d5ba7918d6961", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU5NjYyMjg5MGU4YmZiYmY0MDdiMjdiZDc5ZDViYTc5MThkNjk2MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-18T03:03:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-18T03:03:44Z"}, "message": "* class.c (instantiate_type): Don't abort on TREE_NONLOCAL_FLAG.\n\nFrom-SVN: r19831", "tree": {"sha": "90b6f69b529c5e3f2bc69b325432e3b5bad52433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90b6f69b529c5e3f2bc69b325432e3b5bad52433"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e596622890e8bfbbf407b27bd79d5ba7918d6961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e596622890e8bfbbf407b27bd79d5ba7918d6961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e596622890e8bfbbf407b27bd79d5ba7918d6961", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e596622890e8bfbbf407b27bd79d5ba7918d6961/comments", "author": null, "committer": null, "parents": [{"sha": "0d7e147bb3be3e686f2df91104cff82bdf5029df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d7e147bb3be3e686f2df91104cff82bdf5029df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d7e147bb3be3e686f2df91104cff82bdf5029df"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "eec4cd8f9e436a9e5bef177139f8831d2756e879", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e596622890e8bfbbf407b27bd79d5ba7918d6961/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e596622890e8bfbbf407b27bd79d5ba7918d6961/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e596622890e8bfbbf407b27bd79d5ba7918d6961", "patch": "@@ -1,5 +1,12 @@\n+Mon May 18 03:00:57 1998  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* class.c (instantiate_type): Don't abort on TREE_NONLOCAL_FLAG.\n+\n Mon May 18 01:43:01 1998  Martin v. Loewis  <loewis@informatik.hu-berlin.de>\n \n+\t* decl.c (lookup_name_real): Don't look at IDENTIFIER_LOCAL_VALUE \n+\tfor a type unless it is one.\n+\n \t* class.c (finish_struct_1): Use OVL_CURRENT in error message.\n \n Mon May 18 01:24:08 1998  Jeffrey A Law  (law@cygnus.com)"}, {"sha": "b6ca77e7c32252358fd25f4e57ff80d5e5d197a4", "filename": "gcc/cp/class.c", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e596622890e8bfbbf407b27bd79d5ba7918d6961/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e596622890e8bfbbf407b27bd79d5ba7918d6961/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=e596622890e8bfbbf407b27bd79d5ba7918d6961", "patch": "@@ -5229,16 +5229,18 @@ instantiate_type (lhstype, rhs, complain)\n \ttree elem, baselink, name = NULL_TREE;\n \n \tif (TREE_PURPOSE (rhs) == error_mark_node)\n-\t{\n-\t  /* Make sure we don't drop the non-local flag, as the old code\n-\t     would rely on it. */\n-\t  int nl = TREE_NONLOCAL_FLAG (rhs);\n-\t  /* We don't need the type of this node. */\n-\t  rhs = TREE_VALUE (rhs);\n-\t  my_friendly_assert (TREE_NONLOCAL_FLAG (rhs) == nl, 980331);\n-\t}\n+\t  {\n+\t    /* Make sure we don't drop the non-local flag, as the old code\n+\t       would rely on it. */\n+\t    int nl = TREE_NONLOCAL_FLAG (rhs);\n+\t    /* We don't need the type of this node. */\n+\t    rhs = TREE_VALUE (rhs);\n+\t    my_friendly_assert (TREE_NONLOCAL_FLAG (rhs) == nl, 980331);\n+\t  }\n+\n \t/* Now we should have a baselink. */\n-\tmy_friendly_assert (TREE_CODE (TREE_PURPOSE (rhs)) == TREE_VEC, 980331);\n+\tmy_friendly_assert (TREE_CODE (TREE_PURPOSE (rhs)) == TREE_VEC,\n+\t\t\t    980331);\n \t/* First look for an exact match.  Search member functions.\n \t   May have to undo what `default_conversion' might do to\n \t   lhstype.  */\n@@ -5247,20 +5249,10 @@ instantiate_type (lhstype, rhs, complain)\n \tif (lhstype == error_mark_node)\n \t  return lhstype;\n \n-\tif (TREE_NONLOCAL_FLAG (rhs))\n-\t  {\n-\t    my_friendly_abort (980401);\n-\t    /* Got to get it as a baselink.  */\n-\t    rhs = lookup_fnfields (TYPE_BINFO (current_class_type),\n-\t\t\t\t   DECL_NAME (OVL_FUNCTION (rhs)), 0);\n-\t  }\n-\telse\n-\t  {\n-\t    my_friendly_assert (TREE_CHAIN (rhs) == NULL_TREE, 181);\n-\t    my_friendly_assert (TREE_CODE (TREE_VALUE (rhs)) == FUNCTION_DECL\n-\t\t\t\t|| TREE_CODE (TREE_VALUE (rhs)) == OVERLOAD,\n-\t\t\t\t182);\n-\t  }\n+\tmy_friendly_assert (TREE_CHAIN (rhs) == NULL_TREE, 181);\n+\tmy_friendly_assert (TREE_CODE (TREE_VALUE (rhs)) == FUNCTION_DECL\n+\t\t\t    || TREE_CODE (TREE_VALUE (rhs)) == OVERLOAD,\n+\t\t\t    182);\n \n \tfor (baselink = rhs; baselink;\n \t     baselink = next_baselink (baselink))"}]}