{"sha": "4b766285b089ba1bce91a7644b9d97836e80cda3", "node_id": "C_kwDOANBUbNoAKDRiNzY2Mjg1YjA4OWJhMWJjZTkxYTc2NDRiOWQ5NzgzNmU4MGNkYTM", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-05-26T14:27:42Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-04T07:45:57Z"}, "message": "[Ada] Assertions in Einfo.Utils\n\nAdd predicates on subtypes E and N.\n\ngcc/ada/\n\n\t* einfo-utils.ads, einfo-utils.adb: Add predicates on subtypes E\n\tand N.  Change some parameters to use the unpredicated subtypes,\n\tbecause they sometimes return e.g. Empty.  Note that N_Entity_Id\n\thas a predicate; Entity_Id does not.\n\t* exp_tss.adb (Base_Init_Proc): Use Entity_Id instead of E,\n\tbecause otherwise we fail the predicate. We shouldn't be\n\treferring to single-letter names from far away anyway.\n\t* sem_aux.adb (Is_Derived_Type): Likewise.\n\t* sem_res.adb (Is_Definite_Access_Type): Use N_Entity_Id for\n\tpredicate.\n\t* types.ads (Entity_Id): Add comment explaining the difference\n\tbetween Entity_Id and N_Entity_Id.", "tree": {"sha": "1d9f62e39d22a645449d7b48e490e3a2b6fbb8ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d9f62e39d22a645449d7b48e490e3a2b6fbb8ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b766285b089ba1bce91a7644b9d97836e80cda3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b766285b089ba1bce91a7644b9d97836e80cda3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b766285b089ba1bce91a7644b9d97836e80cda3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b766285b089ba1bce91a7644b9d97836e80cda3/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78f13b008ab58794057847a74903ee4569829d80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78f13b008ab58794057847a74903ee4569829d80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78f13b008ab58794057847a74903ee4569829d80"}], "stats": {"total": 137, "additions": 71, "deletions": 66}, "files": [{"sha": "27531f49cd35582c18a3826af3b1c6966db031f3", "filename": "gcc/ada/einfo-utils.adb", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b766285b089ba1bce91a7644b9d97836e80cda3/gcc%2Fada%2Feinfo-utils.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b766285b089ba1bce91a7644b9d97836e80cda3/gcc%2Fada%2Feinfo-utils.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo-utils.adb?ref=4b766285b089ba1bce91a7644b9d97836e80cda3", "patch": "@@ -28,7 +28,6 @@ with Elists;         use Elists;\n with Nlists;         use Nlists;\n with Output;         use Output;\n with Sinfo;          use Sinfo;\n-with Sinfo.Nodes;    use Sinfo.Nodes;\n with Sinfo.Utils;    use Sinfo.Utils;\n \n package body Einfo.Utils is\n@@ -307,7 +306,7 @@ package body Einfo.Utils is\n       return Ekind (Id) in Generic_Unit_Kind;\n    end Is_Generic_Unit;\n \n-   function Is_Ghost_Entity (Id : Entity_Id) return Boolean is\n+   function Is_Ghost_Entity                     (Id : E) return Boolean is\n    begin\n       return Is_Checked_Ghost_Entity (Id) or else Is_Ignored_Ghost_Entity (Id);\n    end Is_Ghost_Entity;\n@@ -593,7 +592,7 @@ package body Einfo.Utils is\n    -- Address_Clause --\n    --------------------\n \n-   function Address_Clause (Id : E) return N is\n+   function Address_Clause (Id : E) return Node_Id is\n    begin\n       return Get_Attribute_Definition_Clause (Id, Attribute_Address);\n    end Address_Clause;\n@@ -618,7 +617,7 @@ package body Einfo.Utils is\n    -- Alignment_Clause --\n    ----------------------\n \n-   function Alignment_Clause (Id : E) return N is\n+   function Alignment_Clause (Id : E) return Node_Id is\n    begin\n       return Get_Attribute_Definition_Clause (Id, Attribute_Alignment);\n    end Alignment_Clause;\n@@ -672,7 +671,7 @@ package body Einfo.Utils is\n    -- Declaration_Node --\n    ----------------------\n \n-   function Declaration_Node (Id : E) return N is\n+   function Declaration_Node (Id : E) return Node_Id is\n       P : Node_Id;\n \n    begin\n@@ -771,7 +770,7 @@ package body Einfo.Utils is\n    -- First_Component --\n    ---------------------\n \n-   function First_Component (Id : E) return E is\n+   function First_Component (Id : E) return Entity_Id is\n       Comp_Id : Entity_Id;\n \n    begin\n@@ -793,7 +792,7 @@ package body Einfo.Utils is\n    -- First_Component_Or_Discriminant --\n    -------------------------------------\n \n-   function First_Component_Or_Discriminant (Id : E) return E is\n+   function First_Component_Or_Discriminant (Id : E) return Entity_Id is\n       Comp_Id : Entity_Id;\n \n    begin\n@@ -816,7 +815,7 @@ package body Einfo.Utils is\n    -- First_Formal --\n    ------------------\n \n-   function First_Formal (Id : E) return E is\n+   function First_Formal (Id : E) return Entity_Id is\n       Formal : Entity_Id;\n \n    begin\n@@ -857,7 +856,7 @@ package body Einfo.Utils is\n    -- First_Formal_With_Extras --\n    ------------------------------\n \n-   function First_Formal_With_Extras (Id : E) return E is\n+   function First_Formal_With_Extras (Id : E) return Entity_Id is\n       Formal : Entity_Id;\n \n    begin\n@@ -1383,7 +1382,7 @@ package body Einfo.Utils is\n    -- Invariant_Procedure --\n    -------------------------\n \n-   function Invariant_Procedure (Id : E) return E is\n+   function Invariant_Procedure (Id : E) return Entity_Id is\n       Subp_Elmt : Elmt_Id;\n       Subp_Id   : Entity_Id;\n       Subps     : Elist_Id;\n@@ -1525,7 +1524,7 @@ package body Einfo.Utils is\n    -- Is_Elaboration_Target --\n    ---------------------------\n \n-   function Is_Elaboration_Target (Id : Entity_Id) return Boolean is\n+   function Is_Elaboration_Target (Id : E) return Boolean is\n    begin\n       return\n         Ekind (Id) in E_Constant | E_Package | E_Variable\n@@ -1768,7 +1767,7 @@ package body Einfo.Utils is\n    -- Last_Formal --\n    -----------------\n \n-   function Last_Formal (Id : E) return E is\n+   function Last_Formal (Id : E) return Entity_Id is\n       Formal : Entity_Id;\n \n    begin\n@@ -1911,7 +1910,7 @@ package body Einfo.Utils is\n    -- Next_Component --\n    --------------------\n \n-   function Next_Component (Id : E) return E is\n+   function Next_Component (Id : E) return Entity_Id is\n       Comp_Id : Entity_Id;\n \n    begin\n@@ -1928,7 +1927,7 @@ package body Einfo.Utils is\n    -- Next_Component_Or_Discriminant --\n    ------------------------------------\n \n-   function Next_Component_Or_Discriminant (Id : E) return E is\n+   function Next_Component_Or_Discriminant (Id : E) return Entity_Id is\n       Comp_Id : Entity_Id;\n \n    begin\n@@ -1949,7 +1948,7 @@ package body Einfo.Utils is\n    --  Next_Stored_Discriminant by making sure that the Discriminant\n    --  returned is of the same variety as Id.\n \n-   function Next_Discriminant (Id : E) return E is\n+   function Next_Discriminant (Id : E) return Entity_Id is\n \n       --  Derived Tagged types with private extensions look like this...\n \n@@ -1962,7 +1961,7 @@ package body Einfo.Utils is\n \n       --  so it is critical not to go past the leading discriminants\n \n-      D : E := Id;\n+      D : Entity_Id := Id;\n \n    begin\n       pragma Assert (Ekind (Id) = E_Discriminant);\n@@ -1987,7 +1986,7 @@ package body Einfo.Utils is\n    -- Next_Formal --\n    -----------------\n \n-   function Next_Formal (Id : E) return E is\n+   function Next_Formal (Id : E) return Entity_Id is\n       P : Entity_Id;\n \n    begin\n@@ -2012,7 +2011,7 @@ package body Einfo.Utils is\n    -- Next_Formal_With_Extras --\n    -----------------------------\n \n-   function Next_Formal_With_Extras (Id : E) return E is\n+   function Next_Formal_With_Extras (Id : E) return Entity_Id is\n    begin\n       if Present (Extra_Formal (Id)) then\n          return Extra_Formal (Id);\n@@ -2025,7 +2024,7 @@ package body Einfo.Utils is\n    -- Next_Index --\n    ----------------\n \n-   function Next_Index (Id : Node_Id) return Node_Id is\n+   function Next_Index (Id : N) return Node_Id is\n    begin\n       pragma Assert (Nkind (Id) in N_Is_Index);\n       pragma Assert (No (Next (Id)) or else Nkind (Next (Id)) in N_Is_Index);\n@@ -2036,7 +2035,7 @@ package body Einfo.Utils is\n    -- Next_Literal --\n    ------------------\n \n-   function Next_Literal (Id : E) return E is\n+   function Next_Literal (Id : E) return Entity_Id is\n    begin\n       pragma Assert (Nkind (Id) in N_Entity);\n       return Next (Id);\n@@ -2046,7 +2045,7 @@ package body Einfo.Utils is\n    -- Next_Stored_Discriminant --\n    ------------------------------\n \n-   function Next_Stored_Discriminant (Id : E) return E is\n+   function Next_Stored_Discriminant (Id : E) return Entity_Id is\n    begin\n       --  See comment in Next_Discriminant\n \n@@ -2124,7 +2123,7 @@ package body Einfo.Utils is\n    -- Object_Size_Clause --\n    ------------------------\n \n-   function Object_Size_Clause (Id : E) return N is\n+   function Object_Size_Clause (Id : E) return Node_Id is\n    begin\n       return Get_Attribute_Definition_Clause (Id, Attribute_Object_Size);\n    end Object_Size_Clause;\n@@ -2142,7 +2141,7 @@ package body Einfo.Utils is\n    -- DIC_Procedure --\n    -------------------\n \n-   function DIC_Procedure (Id : E) return E is\n+   function DIC_Procedure (Id : E) return Entity_Id is\n       Subp_Elmt : Elmt_Id;\n       Subp_Id   : Entity_Id;\n       Subps     : Elist_Id;\n@@ -2174,7 +2173,7 @@ package body Einfo.Utils is\n       return Empty;\n    end DIC_Procedure;\n \n-   function Partial_DIC_Procedure (Id : E) return E is\n+   function Partial_DIC_Procedure (Id : E) return Entity_Id is\n       Subp_Elmt : Elmt_Id;\n       Subp_Id   : Entity_Id;\n       Subps     : Elist_Id;\n@@ -2227,7 +2226,7 @@ package body Einfo.Utils is\n    -- Partial_Invariant_Procedure --\n    ---------------------------------\n \n-   function Partial_Invariant_Procedure (Id : E) return E is\n+   function Partial_Invariant_Procedure (Id : E) return Entity_Id is\n       Subp_Elmt : Elmt_Id;\n       Subp_Id   : Entity_Id;\n       Subps     : Elist_Id;\n@@ -2340,7 +2339,7 @@ package body Einfo.Utils is\n    -- Predicate_Function --\n    ------------------------\n \n-   function Predicate_Function (Id : E) return E is\n+   function Predicate_Function (Id : E) return Entity_Id is\n       Subp_Elmt : Elmt_Id;\n       Subp_Id   : Entity_Id;\n       Subps     : Elist_Id;\n@@ -2835,8 +2834,8 @@ package body Einfo.Utils is\n    -- Size_Clause --\n    -----------------\n \n-   function Size_Clause (Id : E) return N is\n-      Result : N := Get_Attribute_Definition_Clause (Id, Attribute_Size);\n+   function Size_Clause (Id : E) return Node_Id is\n+      Result : Node_Id := Get_Attribute_Definition_Clause (Id, Attribute_Size);\n    begin\n       if No (Result) then\n          Result := Get_Attribute_Definition_Clause (Id, Attribute_Value_Size);\n@@ -2938,7 +2937,7 @@ package body Einfo.Utils is\n    -- Type_High_Bound --\n    ---------------------\n \n-   function Type_High_Bound (Id : E) return Node_Id is\n+   function Type_High_Bound (Id : E) return N is\n       Rng : constant Node_Id := Scalar_Range (Id);\n    begin\n       if Nkind (Rng) = N_Subtype_Indication then\n@@ -2952,7 +2951,7 @@ package body Einfo.Utils is\n    -- Type_Low_Bound --\n    --------------------\n \n-   function Type_Low_Bound (Id : E) return Node_Id is\n+   function Type_Low_Bound (Id : E) return N is\n       Rng : constant Node_Id := Scalar_Range (Id);\n    begin\n       if Nkind (Rng) = N_Subtype_Indication then\n@@ -2966,7 +2965,7 @@ package body Einfo.Utils is\n    -- Underlying_Type --\n    ---------------------\n \n-   function Underlying_Type (Id : E) return E is\n+   function Underlying_Type (Id : E) return Entity_Id is\n    begin\n       --  For record_with_private the underlying type is always the direct full\n       --  view. Never try to take the full view of the parent it does not make"}, {"sha": "beaf1bfcb960c44f199e3cb5d2d0f81ed0280455", "filename": "gcc/ada/einfo-utils.ads", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b766285b089ba1bce91a7644b9d97836e80cda3/gcc%2Fada%2Feinfo-utils.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b766285b089ba1bce91a7644b9d97836e80cda3/gcc%2Fada%2Feinfo-utils.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo-utils.ads?ref=4b766285b089ba1bce91a7644b9d97836e80cda3", "patch": "@@ -24,6 +24,7 @@\n ------------------------------------------------------------------------------\n \n with Einfo.Entities; use Einfo.Entities;\n+with Sinfo.Nodes;    use Sinfo.Nodes;\n \n package Einfo.Utils is\n \n@@ -73,14 +74,16 @@ package Einfo.Utils is\n    -------------------\n \n    --  The following type synonyms are used to tidy up the function and\n-   --  procedure declarations that follow.\n+   --  procedure declarations that follow. Note that E and N have predicates\n+   --  ensuring the correct kind; we use Entity_Id or Node_Id when the\n+   --  predicates can't be satisfied.\n \n    subtype B is Boolean;\n    subtype C is Component_Alignment_Kind;\n-   subtype E is Entity_Id;\n+   subtype E is N_Entity_Id;\n    subtype F is Float_Rep_Kind;\n    subtype M is Mechanism_Type;\n-   subtype N is Node_Id;\n+   subtype N is Node_Id with Predicate => N /= Empty and then N not in E;\n    subtype U is Uint;\n    subtype R is Ureal;\n    subtype L is Elist_Id;\n@@ -199,17 +202,17 @@ package Einfo.Utils is\n    --  The functions in this section synthesize attributes from the tree,\n    --  so they do not correspond to defined fields in the entity itself.\n \n-   function Address_Clause                      (Id : E) return N;\n+   function Address_Clause                      (Id : E) return Node_Id;\n    function Aft_Value                           (Id : E) return U;\n-   function Alignment_Clause                    (Id : E) return N;\n+   function Alignment_Clause                    (Id : E) return Node_Id;\n    function Base_Type                           (Id : E) return E;\n-   function Declaration_Node                    (Id : E) return N;\n+   function Declaration_Node                    (Id : E) return Node_Id;\n    function Designated_Type                     (Id : E) return E;\n    function Entry_Index_Type                    (Id : E) return E;\n-   function First_Component                     (Id : E) return E;\n-   function First_Component_Or_Discriminant     (Id : E) return E;\n-   function First_Formal                        (Id : E) return E;\n-   function First_Formal_With_Extras            (Id : E) return E;\n+   function First_Component                     (Id : E) return Entity_Id;\n+   function First_Component_Or_Discriminant     (Id : E) return Entity_Id;\n+   function First_Formal                        (Id : E) return Entity_Id;\n+   function First_Formal_With_Extras            (Id : E) return Entity_Id;\n \n    function Float_Rep\n      (N : Entity_Id) return F with Inline, Pre =>\n@@ -260,7 +263,7 @@ package Einfo.Utils is\n    function Is_Task_Interface                   (Id : E) return B;\n    function Is_Task_Record_Type                 (Id : E) return B;\n    function Is_Wrapper_Package                  (Id : E) return B;\n-   function Last_Formal                         (Id : E) return E;\n+   function Last_Formal                         (Id : E) return Entity_Id;\n    function Machine_Emax_Value                  (Id : E) return U;\n    function Machine_Emin_Value                  (Id : E) return U;\n    function Machine_Mantissa_Value              (Id : E) return U;\n@@ -269,30 +272,30 @@ package Einfo.Utils is\n    function Model_Epsilon_Value                 (Id : E) return R;\n    function Model_Mantissa_Value                (Id : E) return U;\n    function Model_Small_Value                   (Id : E) return R;\n-   function Next_Component                      (Id : E) return E;\n-   function Next_Component_Or_Discriminant      (Id : E) return E;\n-   function Next_Discriminant                   (Id : E) return E;\n-   function Next_Formal                         (Id : E) return E;\n-   function Next_Formal_With_Extras             (Id : E) return E;\n-   function Next_Index                          (Id : N) return N;\n-   function Next_Literal                        (Id : E) return E;\n-   function Next_Stored_Discriminant            (Id : E) return E;\n+   function Next_Component                      (Id : E) return Entity_Id;\n+   function Next_Component_Or_Discriminant      (Id : E) return Entity_Id;\n+   function Next_Discriminant                   (Id : E) return Entity_Id;\n+   function Next_Formal                         (Id : E) return Entity_Id;\n+   function Next_Formal_With_Extras             (Id : E) return Entity_Id;\n+   function Next_Index                          (Id : N) return Node_Id;\n+   function Next_Literal                        (Id : E) return Entity_Id;\n+   function Next_Stored_Discriminant            (Id : E) return Entity_Id;\n    function Number_Dimensions                   (Id : E) return Pos;\n    function Number_Entries                      (Id : E) return Nat;\n    function Number_Formals                      (Id : E) return Pos;\n-   function Object_Size_Clause                  (Id : E) return N;\n+   function Object_Size_Clause                  (Id : E) return Node_Id;\n    function Parameter_Mode                      (Id : E) return Formal_Kind;\n    function Partial_Refinement_Constituents     (Id : E) return L;\n    function Primitive_Operations                (Id : E) return L;\n    function Root_Type                           (Id : E) return E;\n    function Safe_Emax_Value                     (Id : E) return U;\n    function Safe_First_Value                    (Id : E) return R;\n    function Safe_Last_Value                     (Id : E) return R;\n-   function Size_Clause                         (Id : E) return N;\n+   function Size_Clause                         (Id : E) return Node_Id;\n    function Stream_Size_Clause                  (Id : E) return N;\n    function Type_High_Bound                     (Id : E) return N;\n    function Type_Low_Bound                      (Id : E) return N;\n-   function Underlying_Type                     (Id : E) return E;\n+   function Underlying_Type                     (Id : E) return Entity_Id;\n \n    function Scope_Depth                         (Id : E) return U;\n    function Scope_Depth_Set                     (Id : E) return B;\n@@ -432,11 +435,11 @@ package Einfo.Utils is\n \n    function Is_Partial_DIC_Procedure             (Id : E) return B;\n \n-   function DIC_Procedure                        (Id : E) return E;\n-   function Partial_DIC_Procedure                (Id : E) return E;\n-   function Invariant_Procedure                  (Id : E) return E;\n-   function Partial_Invariant_Procedure          (Id : E) return E;\n-   function Predicate_Function                   (Id : E) return E;\n+   function DIC_Procedure                        (Id : E) return Entity_Id;\n+   function Partial_DIC_Procedure                (Id : E) return Entity_Id;\n+   function Invariant_Procedure                  (Id : E) return Entity_Id;\n+   function Partial_Invariant_Procedure          (Id : E) return Entity_Id;\n+   function Predicate_Function                   (Id : E) return Entity_Id;\n \n    procedure Set_DIC_Procedure                   (Id : E; V : E);\n    procedure Set_Partial_DIC_Procedure           (Id : E; V : E);"}, {"sha": "09bb133a41f8a8bb023d921a071a331847d08d76", "filename": "gcc/ada/exp_tss.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b766285b089ba1bce91a7644b9d97836e80cda3/gcc%2Fada%2Fexp_tss.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b766285b089ba1bce91a7644b9d97836e80cda3/gcc%2Fada%2Fexp_tss.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_tss.adb?ref=4b766285b089ba1bce91a7644b9d97836e80cda3", "patch": "@@ -49,7 +49,7 @@ package body Exp_Tss is\n      (Typ : Entity_Id;\n       Ref : Entity_Id := Empty) return Entity_Id\n    is\n-      Full_Type : E;\n+      Full_Type : Entity_Id;\n       Proc      : Entity_Id;\n \n    begin"}, {"sha": "ca74d743b4060f5cb00fc3da892c2691cd801321", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b766285b089ba1bce91a7644b9d97836e80cda3/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b766285b089ba1bce91a7644b9d97836e80cda3/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=4b766285b089ba1bce91a7644b9d97836e80cda3", "patch": "@@ -964,7 +964,7 @@ package body Sem_Aux is\n    -- Is_Derived_Type --\n    ---------------------\n \n-   function Is_Derived_Type (Ent : E) return B is\n+   function Is_Derived_Type (Ent : Entity_Id) return B is\n       Par : Node_Id;\n \n    begin\n@@ -1130,10 +1130,8 @@ package body Sem_Aux is\n \n          else\n             declare\n-               C : E;\n-\n+               C : Entity_Id := First_Component (Btype);\n             begin\n-               C := First_Component (Btype);\n                while Present (C) loop\n                   if Is_Limited_Type (Etype (C)) then\n                      return True;"}, {"sha": "650b7d502c3f065dae38552a575c5959ff692943", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b766285b089ba1bce91a7644b9d97836e80cda3/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b766285b089ba1bce91a7644b9d97836e80cda3/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=4b766285b089ba1bce91a7644b9d97836e80cda3", "patch": "@@ -144,7 +144,7 @@ package body Sem_Res is\n    --  returns true if the prefix denotes an atomic object that has an address\n    --  clause (the case in which we may want to issue a warning).\n \n-   function Is_Definite_Access_Type (E : Entity_Id) return Boolean;\n+   function Is_Definite_Access_Type (E : N_Entity_Id) return Boolean;\n    --  Determine whether E is an access type declared by an access declaration,\n    --  and not an (anonymous) allocator type.\n \n@@ -1510,7 +1510,7 @@ package body Sem_Res is\n    -- Is_Definite_Access_Type --\n    -----------------------------\n \n-   function Is_Definite_Access_Type (E : Entity_Id) return Boolean is\n+   function Is_Definite_Access_Type (E : N_Entity_Id) return Boolean is\n       Btyp : constant Entity_Id := Base_Type (E);\n    begin\n       return Ekind (Btyp) = E_Access_Type\n@@ -1561,7 +1561,7 @@ package body Sem_Res is\n       Orig_Type : Entity_Id := Empty;\n       Pack      : Entity_Id;\n \n-      type Kind_Test is access function (E : Entity_Id) return Boolean;\n+      type Kind_Test is access function (E : N_Entity_Id) return Boolean;\n \n       function Operand_Type_In_Scope (S : Entity_Id) return Boolean;\n       --  If the operand is not universal, and the operator is given by an"}, {"sha": "9ae17974a4dc9e46f86e9c229ae9af2182e9699e", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b766285b089ba1bce91a7644b9d97836e80cda3/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b766285b089ba1bce91a7644b9d97836e80cda3/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=4b766285b089ba1bce91a7644b9d97836e80cda3", "patch": "@@ -404,6 +404,11 @@ package Types is\n    --  that are entities (i.e. nodes with an Nkind of N_Defining_xxx). All such\n    --  nodes are extended nodes and these are the only extended nodes, so that\n    --  in practice entity and extended nodes are synonymous.\n+   --\n+   --  Note that Sinfo.Nodes.N_Entity_Id is the same as Entity_Id, except it\n+   --  has a predicate requiring the correct Nkind. Opt_N_Entity_Id is the same\n+   --  as N_Entity_Id, except it allows Empty. (Sinfo.Nodes is generated by the\n+   --  Gen_IL program.)\n \n    subtype Node_Or_Entity_Id is Node_Id;\n    --  A synonym for node types, used in cases where a given value may be used"}]}