{"sha": "fa3ca6151ccac0e215727641eee36abf6e437b26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEzY2E2MTUxY2NhYzBlMjE1NzI3NjQxZWVlMzZhYmY2ZTQzN2IyNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-08-03T12:00:43Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-08-03T12:00:43Z"}, "message": "aarch64: Turn sve_width tuning field into a bitmask\n\nThe tuning structures have an sve_width field that specifies the\nnumber of bits in an SVE vector (or SVE_NOT_IMPLEMENTED if not\napplicable).  This patch turns the field into a bitmask so that\nit can specify multiple widths at the same time.  For now we\nalways treat the mininum width as the likely width.\n\nAn alternative would have been to add extra fields, which would\nhave coped correctly with non-power-of-2 widths.  However,\nwe're very far from supporting constant non-power-of-2 vectors\nin GCC, so I think the non-power-of-2 case will in reality always\nhave to be hidden behind VLA.\n\ngcc/\n\t* config/aarch64/aarch64-protos.h (tune_params::sve_width): Turn\n\tinto a bitmask.\n\t* config/aarch64/aarch64.c (aarch64_cmp_autovec_modes): Update\n\taccordingly.\n\t(aarch64_estimated_poly_value): Likewise.  Use the least significant\n\tset bit for the minimum and likely values.  Use the most significant\n\tset bit for the maximum value.", "tree": {"sha": "7e96fb523000964e55a9df863e7061ad1755242d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e96fb523000964e55a9df863e7061ad1755242d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa3ca6151ccac0e215727641eee36abf6e437b26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa3ca6151ccac0e215727641eee36abf6e437b26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa3ca6151ccac0e215727641eee36abf6e437b26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa3ca6151ccac0e215727641eee36abf6e437b26/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0b952edd3f5753332ea234ef261711a81e87229", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b952edd3f5753332ea234ef261711a81e87229", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b952edd3f5753332ea234ef261711a81e87229"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "fb4ce8e9f848d36cade5678d7692cb3ffe18c50b", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa3ca6151ccac0e215727641eee36abf6e437b26/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa3ca6151ccac0e215727641eee36abf6e437b26/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=fa3ca6151ccac0e215727641eee36abf6e437b26", "patch": "@@ -506,10 +506,10 @@ struct tune_params\n   const struct cpu_vector_cost *vec_costs;\n   const struct cpu_branch_cost *branch_costs;\n   const struct cpu_approx_modes *approx_modes;\n-  /* Width of the SVE registers or SVE_NOT_IMPLEMENTED if not applicable.\n-     Only used for tuning decisions, does not disable VLA\n-     vectorization.  */\n-  enum aarch64_sve_vector_bits_enum sve_width;\n+  /* A bitmask of the possible SVE register widths in bits,\n+     or SVE_NOT_IMPLEMENTED if not applicable.  Only used for tuning\n+     decisions, does not disable VLA vectorization.  */\n+  unsigned int sve_width;\n   int memmov_cost;\n   int issue_rate;\n   unsigned int fusible_ops;"}, {"sha": "1a8cd131ca25adfece9cd0a3b792b9542d02bb5c", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa3ca6151ccac0e215727641eee36abf6e437b26/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa3ca6151ccac0e215727641eee36abf6e437b26/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=fa3ca6151ccac0e215727641eee36abf6e437b26", "patch": "@@ -19144,14 +19144,12 @@ aarch64_cmp_autovec_modes (machine_mode sve_m, machine_mode asimd_m)\n   bool prefer_asimd = aarch64_autovec_preference == 3;\n   bool prefer_sve = aarch64_autovec_preference == 4;\n \n-  aarch64_sve_vector_bits_enum tune_width = aarch64_tune_params.sve_width;\n-\n   poly_int64 nunits_sve = GET_MODE_NUNITS (sve_m);\n   poly_int64 nunits_asimd = GET_MODE_NUNITS (asimd_m);\n   /* If the CPU information does not have an SVE width registered use the\n      generic poly_int comparison that prefers SVE.  If a preference is\n      explicitly requested avoid this path.  */\n-  if (tune_width == SVE_SCALABLE\n+  if (aarch64_tune_params.sve_width == SVE_SCALABLE\n       && !prefer_asimd\n       && !prefer_sve)\n     return maybe_gt (nunits_sve, nunits_asimd);\n@@ -24980,8 +24978,7 @@ aarch64_estimated_poly_value (poly_int64 val,\n \t\t\t      poly_value_estimate_kind kind\n \t\t\t\t= POLY_VALUE_LIKELY)\n {\n-  enum aarch64_sve_vector_bits_enum width_source\n-    = aarch64_tune_params.sve_width;\n+  unsigned int width_source = aarch64_tune_params.sve_width;\n \n   /* If there is no core-specific information then the minimum and likely\n      values are based on 128-bit vectors and the maximum is based on\n@@ -24996,6 +24993,14 @@ aarch64_estimated_poly_value (poly_int64 val,\n \t  return val.coeffs[0] + val.coeffs[1] * 15;\n       }\n \n+  /* Allow sve_width to be a bitmask of different VL, treating the lowest\n+     as likely.  This could be made more general if future -mtune options\n+     need it to be.  */\n+  if (kind == POLY_VALUE_MAX)\n+    width_source = 1 << floor_log2 (width_source);\n+  else\n+    width_source = least_bit_hwi (width_source);\n+\n   /* If the core provides width information, use that.  */\n   HOST_WIDE_INT over_128 = width_source - 128;\n   return val.coeffs[0] + val.coeffs[1] * over_128 / 128;"}]}