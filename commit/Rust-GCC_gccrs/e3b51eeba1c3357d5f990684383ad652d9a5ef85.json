{"sha": "e3b51eeba1c3357d5f990684383ad652d9a5ef85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNiNTFlZWJhMWMzMzU3ZDVmOTkwNjg0MzgzYWQ2NTJkOWE1ZWY4NQ==", "commit": {"author": {"name": "Walter Lee", "email": "walt@tilera.com", "date": "2013-03-27T06:08:01Z"}, "committer": {"name": "Walter Lee", "email": "walt@gcc.gnu.org", "date": "2013-03-27T06:08:01Z"}, "message": "tilegx.md (insn_mnz_<mode>): Replaced by ...\n\n\t* config/tilegx/tilegx.md (insn_mnz_<mode>): Replaced by ...\n\t(insn_mnz_v8qi): ... this ...\n\t(insn_mnz_v4hi): ... and this.  Replace (const_int 0) with the\n\tvector equivalent.\n\t(insn_v<n>mnz): Replaced by ...\n\t(insn_v1mnz): ... this ...\n\t(insn_v2mnz): ... and this.  Replace (const_int 0) with the vector\n\tequivalent.\n\t(insn_mz_<mode>): Replaced by ...\n\t(insn_mz_v8qi): ... this ...\n\t(insn_mz_v4hi): ... and this.  Replace (const_int 0) with the\n\tvector equivalent.\n\t(insn_v<n>mz): Replaced by ...\n\t(insn_v1mz): ... this ...\n\t(insn_v2mz): ... and this.  Replace (const_int 0) with the vector\n\tequivalent.\n\nFrom-SVN: r197135", "tree": {"sha": "866a0405d049478a66ea5b92f1ca6d230e6fe7bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/866a0405d049478a66ea5b92f1ca6d230e6fe7bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3b51eeba1c3357d5f990684383ad652d9a5ef85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b51eeba1c3357d5f990684383ad652d9a5ef85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b51eeba1c3357d5f990684383ad652d9a5ef85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b51eeba1c3357d5f990684383ad652d9a5ef85/comments", "author": {"login": "walt-tilera", "id": 6602917, "node_id": "MDQ6VXNlcjY2MDI5MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6602917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/walt-tilera", "html_url": "https://github.com/walt-tilera", "followers_url": "https://api.github.com/users/walt-tilera/followers", "following_url": "https://api.github.com/users/walt-tilera/following{/other_user}", "gists_url": "https://api.github.com/users/walt-tilera/gists{/gist_id}", "starred_url": "https://api.github.com/users/walt-tilera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/walt-tilera/subscriptions", "organizations_url": "https://api.github.com/users/walt-tilera/orgs", "repos_url": "https://api.github.com/users/walt-tilera/repos", "events_url": "https://api.github.com/users/walt-tilera/events{/privacy}", "received_events_url": "https://api.github.com/users/walt-tilera/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "591cb3cfede314495011b5e0a27b8739f0bca777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591cb3cfede314495011b5e0a27b8739f0bca777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/591cb3cfede314495011b5e0a27b8739f0bca777"}], "stats": {"total": 175, "additions": 142, "deletions": 33}, "files": [{"sha": "cd6534f4a8e5d0e96aceb3a44845ca6bff4de427", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b51eeba1c3357d5f990684383ad652d9a5ef85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b51eeba1c3357d5f990684383ad652d9a5ef85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3b51eeba1c3357d5f990684383ad652d9a5ef85", "patch": "@@ -1,3 +1,22 @@\n+2013-03-27  Walter Lee  <walt@tilera.com>\n+\n+\t* config/tilegx/tilegx.md (insn_mnz_<mode>): Replaced by ...\n+\t(insn_mnz_v8qi): ... this ...\n+\t(insn_mnz_v4hi): ... and this.  Replace (const_int 0) with the\n+\tvector equivalent.\n+\t(insn_v<n>mnz): Replaced by ...\n+\t(insn_v1mnz): ... this ...\n+\t(insn_v2mnz): ... and this.  Replace (const_int 0) with the vector\n+\tequivalent.\n+\t(insn_mz_<mode>): Replaced by ...\n+\t(insn_mz_v8qi): ... this ...\n+\t(insn_mz_v4hi): ... and this.  Replace (const_int 0) with the\n+\tvector equivalent.\n+\t(insn_v<n>mz): Replaced by ...\n+\t(insn_v1mz): ... this ...\n+\t(insn_v2mz): ... and this.  Replace (const_int 0) with the vector\n+\tequivalent.\n+\n 2013-03-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* doc/invoke.texi (SPARC options): Remove -mlittle-endian."}, {"sha": "f3eb09c80f0551a84b24fff486b263f45f6e9a1a", "filename": "gcc/config/tilegx/tilegx.md", "status": "modified", "additions": 123, "deletions": 33, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b51eeba1c3357d5f990684383ad652d9a5ef85/gcc%2Fconfig%2Ftilegx%2Ftilegx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b51eeba1c3357d5f990684383ad652d9a5ef85/gcc%2Fconfig%2Ftilegx%2Ftilegx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.md?ref=e3b51eeba1c3357d5f990684383ad652d9a5ef85", "patch": "@@ -4597,57 +4597,147 @@\n ;; insn_v1mz\n ;; insn_v2mnz\n ;; insn_v2mz\n-(define_insn \"insn_mnz_<mode>\"\n-  [(set (match_operand:VEC48MODE 0 \"register_operand\" \"=r\")\n-\t(if_then_else:VEC48MODE\n-         (ne:VEC48MODE\n-\t  (match_operand:VEC48MODE 1 \"reg_or_0_operand\" \"rO\")\n-\t  (const_int 0))\n-         (match_operand:VEC48MODE 2 \"reg_or_0_operand\" \"rO\")\n-         (const_int 0)))]\n-  \"\"\n-  \"v<n>mnz\\t%0, %r1, %r2\"\n+(define_insn \"insn_mnz_v8qi\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=r\")\n+\t(if_then_else:V8QI\n+         (ne:V8QI\n+\t  (match_operand:V8QI 1 \"reg_or_0_operand\" \"rO\")\n+\t  (const_vector:V8QI [(const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)]))\n+         (match_operand:V8QI 2 \"reg_or_0_operand\" \"rO\")\n+\t (const_vector:V8QI [(const_int 0) (const_int 0)\n+\t\t\t     (const_int 0) (const_int 0)\n+\t\t\t     (const_int 0) (const_int 0)\n+\t\t\t     (const_int 0) (const_int 0)])))]\n+  \"\"\n+  \"v1mnz\\t%0, %r1, %r2\"\n   [(set_attr \"type\" \"X01\")])\n \n-(define_expand \"insn_v<n>mnz\"\n+(define_expand \"insn_v1mnz\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(if_then_else:VEC48MODE\n-         (ne:VEC48MODE\n+\t(if_then_else:V8QI\n+         (ne:V8QI\n \t  (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-\t  (const_int 0))\n+\t  (const_vector:V8QI [(const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)])\n+\t  )\n          (match_operand:DI 2 \"reg_or_0_operand\" \"\")\n-         (const_int 0)))]\n+\t (const_vector:V8QI [(const_int 0) (const_int 0)\n+\t\t\t     (const_int 0) (const_int 0)\n+\t\t\t     (const_int 0) (const_int 0)\n+\t\t\t     (const_int 0) (const_int 0)])))]\n   \"\"\n {\n-  tilegx_expand_builtin_vector_binop (gen_insn_mnz_<mode>, <MODE>mode,\n-                                      operands[0], <MODE>mode, operands[1],\n+  tilegx_expand_builtin_vector_binop (gen_insn_mnz_v8qi, V8QImode,\n+                                      operands[0], V8QImode, operands[1],\n+\t\t\t\t      operands[2], true);\n+  DONE;\n+})\n+\n+(define_insn \"insn_mz_v8qi\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=r\")\n+\t(if_then_else:V8QI\n+         (ne:V8QI\n+\t  (match_operand:V8QI 1 \"reg_or_0_operand\" \"rO\")\n+\t  (const_vector:V8QI [(const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)]))\n+\t (const_vector:V8QI [(const_int 0) (const_int 0)\n+\t\t\t     (const_int 0) (const_int 0)\n+\t\t\t     (const_int 0) (const_int 0)\n+\t\t\t     (const_int 0) (const_int 0)])\n+         (match_operand:V8QI 2 \"reg_or_0_operand\" \"rO\")))]\n+  \"\"\n+  \"v1mz\\t%0, %r1, %r2\"\n+  [(set_attr \"type\" \"X01\")])\n+\n+(define_expand \"insn_v1mz\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(if_then_else:V8QI\n+         (ne:V8QI\n+\t  (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+\t  (const_vector:V8QI [(const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)]))\n+\t (const_vector:V8QI [(const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)])\n+         (match_operand:DI 2 \"reg_or_0_operand\" \"\")))]\n+  \"\"\n+{\n+  tilegx_expand_builtin_vector_binop (gen_insn_mz_v8qi, V8QImode,\n+                                      operands[0], V8QImode, operands[1],\n \t\t\t\t      operands[2], true);\n   DONE;\n })\n \n-(define_insn \"insn_mz_<mode>\"\n-  [(set (match_operand:VEC48MODE 0 \"register_operand\" \"=r\")\n-\t(if_then_else:VEC48MODE\n-         (ne:VEC48MODE\n-\t  (match_operand:VEC48MODE 1 \"reg_or_0_operand\" \"rO\")\n-\t  (const_int 0))\n-         (const_int 0)\n-         (match_operand:VEC48MODE 2 \"reg_or_0_operand\" \"rO\")))]\n+(define_insn \"insn_mnz_v4hi\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=r\")\n+\t(if_then_else:V4HI\n+         (ne:V4HI\n+\t  (match_operand:V4HI 1 \"reg_or_0_operand\" \"rO\")\n+\t  (const_vector:V4HI [(const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)]))\n+         (match_operand:V4HI 2 \"reg_or_0_operand\" \"rO\")\n+\t (const_vector:V4HI [(const_int 0) (const_int 0)\n+\t\t\t     (const_int 0) (const_int 0)])))]\n+  \"\"\n+  \"v2mnz\\t%0, %r1, %r2\"\n+  [(set_attr \"type\" \"X01\")])\n+\n+(define_expand \"insn_v2mnz\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(if_then_else:V4HI\n+         (ne:V4HI\n+\t  (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+\t  (const_vector:V4HI [(const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)]))\n+         (match_operand:DI 2 \"reg_or_0_operand\" \"\")\n+\t (const_vector:V4HI [(const_int 0) (const_int 0)\n+\t\t\t     (const_int 0) (const_int 0)])))]\n   \"\"\n-  \"v<n>mz\\t%0, %r1, %r2\"\n+{\n+  tilegx_expand_builtin_vector_binop (gen_insn_mnz_v4hi, V4HImode,\n+                                      operands[0], V4HImode, operands[1],\n+\t\t\t\t      operands[2], true);\n+  DONE;\n+})\n+\n+(define_insn \"insn_mz_v4hi\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=r\")\n+\t(if_then_else:V4HI\n+         (ne:V4HI\n+\t  (match_operand:V4HI 1 \"reg_or_0_operand\" \"rO\")\n+\t  (const_vector:V4HI [(const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)]))\n+\t (const_vector:V4HI [(const_int 0) (const_int 0)\n+\t\t\t     (const_int 0) (const_int 0)])\n+         (match_operand:V4HI 2 \"reg_or_0_operand\" \"rO\")))]\n+  \"\"\n+  \"v2mz\\t%0, %r1, %r2\"\n   [(set_attr \"type\" \"X01\")])\n-(define_expand \"insn_v<n>mz\"\n+\n+(define_expand \"insn_v2mz\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(if_then_else:VEC48MODE\n-         (ne:VEC48MODE\n+\t(if_then_else:V4HI\n+         (ne:V4HI\n \t  (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-\t  (const_int 0))\n-         (const_int 0)\n+\t  (const_vector:V4HI [(const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)]))\n+\t (const_vector:V4HI [(const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)])\n          (match_operand:DI 2 \"reg_or_0_operand\" \"\")))]\n   \"\"\n {\n-  tilegx_expand_builtin_vector_binop (gen_insn_mz_<mode>, <MODE>mode,\n-                                      operands[0], <MODE>mode, operands[1],\n+  tilegx_expand_builtin_vector_binop (gen_insn_mz_v4hi, V4HImode,\n+                                      operands[0], V4HImode, operands[1],\n \t\t\t\t      operands[2], true);\n   DONE;\n })"}]}