{"sha": "d87105d697ced10e1f7af3f1f80ef6c9890c8585", "node_id": "C_kwDOANBUbNoAKGQ4NzEwNWQ2OTdjZWQxMGUxZjdhZjNmMWY4MGVmNmM5ODkwYzg1ODU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-08T12:41:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-08T23:57:47Z"}, "message": "libstdc++: Access std::pair members without tuple-like helpers\n\nThis avoids the tuple-like API for std::pair in the unordered\ncontainers, removing some overly generic code.\n\nThe _Select1st projection can figure out the member types of a std::pair\nwithout using decltype(std::get<0>(...)).\n\nWe don't need _Select2nd because it's only needed in\n_NodeBuilder::_S_build, and that can just access the .second member of\nthe pair directly. The return type of that function doesn't need to be\ndeduced by decltype, we can just expose the __node_type typedef of the\nnode generator.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/hashtable_policy.h (_Select1st): Replace use of\n\tstd::get.\n\t(_Select2nd): Remove.\n\t(_NodeBuilder::_S_build): Use _NodeGenerator::__node_type\n\ttypedef instead of deducing it. Remove unnecessary piecewise\n\tconstruction.\n\t(_ReuseOrAllocNode): Make __node_type public.\n\t(_Map_base): Adjust partial specialization to be able to extract\n\tthe mapped_type without using tuple_element.\n\t(_Map_base::at): Define inline\n\t* testsuite/23_containers/unordered_map/requirements/53339.cc:\n\tRemove XFAIL.\n\t* testsuite/23_containers/unordered_multimap/requirements/53339.cc:\n\tLikewise.", "tree": {"sha": "90db83e14b835e7f1fdb571c052700404e0eb9e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90db83e14b835e7f1fdb571c052700404e0eb9e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d87105d697ced10e1f7af3f1f80ef6c9890c8585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d87105d697ced10e1f7af3f1f80ef6c9890c8585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d87105d697ced10e1f7af3f1f80ef6c9890c8585", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d87105d697ced10e1f7af3f1f80ef6c9890c8585/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64acc43de1e33616e43b239887a260eb4a51fcc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64acc43de1e33616e43b239887a260eb4a51fcc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64acc43de1e33616e43b239887a260eb4a51fcc7"}], "stats": {"total": 132, "additions": 56, "deletions": 76}, "files": [{"sha": "994c7b610465f93b70d7ba2d08fbb5c83375d4d8", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 56, "deletions": 74, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d87105d697ced10e1f7af3f1f80ef6c9890c8585/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d87105d697ced10e1f7af3f1f80ef6c9890c8585/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=d87105d697ced10e1f7af3f1f80ef6c9890c8585", "patch": "@@ -87,20 +87,25 @@ namespace __detail\n \n   struct _Select1st\n   {\n-    template<typename _Tp>\n-      auto\n-      operator()(_Tp&& __x) const noexcept\n-      -> decltype(std::get<0>(std::forward<_Tp>(__x)))\n-      { return std::get<0>(std::forward<_Tp>(__x)); }\n-  };\n+    template<typename _Pair>\n+      struct __1st_type;\n+\n+    template<typename _Tp, typename _Up>\n+      struct __1st_type<pair<_Tp, _Up>>\n+      { using type = _Tp; };\n+\n+    template<typename _Tp, typename _Up>\n+      struct __1st_type<const pair<_Tp, _Up>>\n+      { using type = const _Tp; };\n+\n+    template<typename _Pair>\n+      struct __1st_type<_Pair&>\n+      { using type = typename __1st_type<_Pair>::type&; };\n \n-  struct _Select2nd\n-  {\n     template<typename _Tp>\n-      auto\n+      typename __1st_type<_Tp>::type&&\n       operator()(_Tp&& __x) const noexcept\n-      -> decltype(std::get<1>(std::forward<_Tp>(__x)))\n-      { return std::get<1>(std::forward<_Tp>(__x)); }\n+      { return std::forward<_Tp>(__x).first; }\n   };\n \n   template<typename _ExKey>\n@@ -112,14 +117,10 @@ namespace __detail\n       template<typename _Kt, typename _Arg, typename _NodeGenerator>\n \tstatic auto\n \t_S_build(_Kt&& __k, _Arg&& __arg, const _NodeGenerator& __node_gen)\n-\t-> decltype(__node_gen(std::piecewise_construct,\n-\t\t\t       std::forward_as_tuple(std::forward<_Kt>(__k)),\n-\t\t\t       std::forward_as_tuple(_Select2nd{}(\n-\t\t\t\t\t\tstd::forward<_Arg>(__arg)))))\n+\t-> typename _NodeGenerator::__node_type*\n \t{\n-\t  return __node_gen(std::piecewise_construct,\n-\t    std::forward_as_tuple(std::forward<_Kt>(__k)),\n-\t    std::forward_as_tuple(_Select2nd{}(std::forward<_Arg>(__arg))));\n+\t  return __node_gen(std::forward<_Kt>(__k),\n+\t\t\t    std::forward<_Arg>(__arg).second);\n \t}\n     };\n \n@@ -129,7 +130,7 @@ namespace __detail\n       template<typename _Kt, typename _Arg, typename _NodeGenerator>\n \tstatic auto\n \t_S_build(_Kt&& __k, _Arg&&, const _NodeGenerator& __node_gen)\n-\t-> decltype(__node_gen(std::forward<_Kt>(__k)))\n+\t-> typename _NodeGenerator::__node_type*\n \t{ return __node_gen(std::forward<_Kt>(__k)); }\n     };\n \n@@ -146,9 +147,10 @@ namespace __detail\n       using __hashtable_alloc = _Hashtable_alloc<__node_alloc_type>;\n       using __node_alloc_traits =\n \ttypename __hashtable_alloc::__node_alloc_traits;\n-      using __node_type = typename __hashtable_alloc::__node_type;\n \n     public:\n+      using __node_type = typename __hashtable_alloc::__node_type;\n+\n       _ReuseOrAllocNode(__node_type* __nodes, __hashtable_alloc& __h)\n       : _M_nodes(__nodes), _M_h(__h) { }\n       _ReuseOrAllocNode(const _ReuseOrAllocNode&) = delete;\n@@ -194,9 +196,10 @@ namespace __detail\n     {\n     private:\n       using __hashtable_alloc = _Hashtable_alloc<_NodeAlloc>;\n-      using __node_type = typename __hashtable_alloc::__node_type;\n \n     public:\n+      using __node_type = typename __hashtable_alloc::__node_type;\n+\n       _AllocNode(__hashtable_alloc& __h)\n       : _M_h(__h) { }\n \n@@ -667,8 +670,8 @@ namespace __detail\n   /**\n    *  Primary class template _Map_base.\n    *\n-   *  If the hashtable has a value type of the form pair<T1, T2> and a\n-   *  key extraction policy (_ExtractKey) that returns the first part\n+   *  If the hashtable has a value type of the form pair<const T1, T2> and\n+   *  a key extraction policy (_ExtractKey) that returns the first part\n    *  of the pair, the hashtable gets a mapped_type typedef.  If it\n    *  satisfies those criteria and also has unique keys, then it also\n    *  gets an operator[].\n@@ -680,37 +683,38 @@ namespace __detail\n \t   bool _Unique_keys = _Traits::__unique_keys::value>\n     struct _Map_base { };\n \n-  /// Partial specialization, __unique_keys set to false.\n-  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,\n+  /// Partial specialization, __unique_keys set to false, std::pair value type.\n+  template<typename _Key, typename _Val, typename _Alloc, typename _Equal,\n \t   typename _Hash, typename _RangeHash, typename _Unused,\n \t   typename _RehashPolicy, typename _Traits>\n-    struct _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,\n+    struct _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,\n \t\t     _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, false>\n     {\n-      using mapped_type = typename std::tuple_element<1, _Pair>::type;\n+      using mapped_type = _Val;\n     };\n \n   /// Partial specialization, __unique_keys set to true.\n-  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,\n+  template<typename _Key, typename _Val, typename _Alloc, typename _Equal,\n \t   typename _Hash, typename _RangeHash, typename _Unused,\n \t   typename _RehashPolicy, typename _Traits>\n-    struct _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,\n+    struct _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,\n \t\t     _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>\n     {\n     private:\n-      using __hashtable_base = _Hashtable_base<_Key, _Pair, _Select1st, _Equal,\n-\t\t\t\t\t       _Hash, _RangeHash, _Unused,\n+      using __hashtable_base = _Hashtable_base<_Key, pair<const _Key, _Val>,\n+\t\t\t\t\t       _Select1st, _Equal, _Hash,\n+\t\t\t\t\t       _RangeHash, _Unused,\n \t\t\t\t\t       _Traits>;\n \n-      using __hashtable = _Hashtable<_Key, _Pair, _Alloc, _Select1st, _Equal,\n-\t\t\t\t     _Hash, _RangeHash,\n+      using __hashtable = _Hashtable<_Key, pair<const _Key, _Val>, _Alloc,\n+\t\t\t\t     _Select1st, _Equal, _Hash, _RangeHash,\n \t\t\t\t     _Unused, _RehashPolicy, _Traits>;\n \n       using __hash_code = typename __hashtable_base::__hash_code;\n \n     public:\n       using key_type = typename __hashtable_base::key_type;\n-      using mapped_type = typename std::tuple_element<1, _Pair>::type;\n+      using mapped_type = _Val;\n \n       mapped_type&\n       operator[](const key_type& __k);\n@@ -721,17 +725,29 @@ namespace __detail\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 761. unordered_map needs an at() member function.\n       mapped_type&\n-      at(const key_type& __k);\n+      at(const key_type& __k)\n+      {\n+\tauto __ite = static_cast<__hashtable*>(this)->find(__k);\n+\tif (!__ite._M_cur)\n+\t  __throw_out_of_range(__N(\"unordered_map::at\"));\n+\treturn __ite->second;\n+      }\n \n       const mapped_type&\n-      at(const key_type& __k) const;\n+      at(const key_type& __k) const\n+      {\n+\tauto __ite = static_cast<const __hashtable*>(this)->find(__k);\n+\tif (!__ite._M_cur)\n+\t  __throw_out_of_range(__N(\"unordered_map::at\"));\n+\treturn __ite->second;\n+      }\n     };\n \n-  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,\n+  template<typename _Key, typename _Val, typename _Alloc, typename _Equal,\n \t   typename _Hash, typename _RangeHash, typename _Unused,\n \t   typename _RehashPolicy, typename _Traits>\n     auto\n-    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,\n+    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,\n \t      _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::\n     operator[](const key_type& __k)\n     -> mapped_type&\n@@ -754,11 +770,11 @@ namespace __detail\n       return __pos->second;\n     }\n \n-  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,\n+  template<typename _Key, typename _Val, typename _Alloc, typename _Equal,\n \t   typename _Hash, typename _RangeHash, typename _Unused,\n \t   typename _RehashPolicy, typename _Traits>\n     auto\n-    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,\n+    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,\n \t      _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::\n     operator[](key_type&& __k)\n     -> mapped_type&\n@@ -781,40 +797,6 @@ namespace __detail\n       return __pos->second;\n     }\n \n-  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,\n-\t   typename _Hash, typename _RangeHash, typename _Unused,\n-\t   typename _RehashPolicy, typename _Traits>\n-    auto\n-    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,\n-\t      _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::\n-    at(const key_type& __k)\n-    -> mapped_type&\n-    {\n-      __hashtable* __h = static_cast<__hashtable*>(this);\n-      auto __ite = __h->find(__k);\n-\n-      if (!__ite._M_cur)\n-\t__throw_out_of_range(__N(\"_Map_base::at\"));\n-      return __ite->second;\n-    }\n-\n-  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,\n-\t   typename _Hash, typename _RangeHash, typename _Unused,\n-\t   typename _RehashPolicy, typename _Traits>\n-    auto\n-    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,\n-\t      _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::\n-    at(const key_type& __k) const\n-    -> const mapped_type&\n-    {\n-      const __hashtable* __h = static_cast<const __hashtable*>(this);\n-      auto __ite = __h->find(__k);\n-\n-      if (!__ite._M_cur)\n-\t__throw_out_of_range(__N(\"_Map_base::at\"));\n-      return __ite->second;\n-    }\n-\n   /**\n    *  Primary class template _Insert_base.\n    *"}, {"sha": "c4fe5ad8ed77f284540bd32ddd603abf6b1c9802", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/53339.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d87105d697ced10e1f7af3f1f80ef6c9890c8585/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2F53339.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d87105d697ced10e1f7af3f1f80ef6c9890c8585/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2F53339.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2F53339.cc?ref=d87105d697ced10e1f7af3f1f80ef6c9890c8585", "patch": "@@ -1,5 +1,4 @@\n // { dg-do compile { target c++11 } }\n-// { dg-excess-errors \"XFAIL because of PR libstdc++/55043 fix\" }\n \n // Copyright (C) 2012-2021 Free Software Foundation, Inc.\n //"}, {"sha": "de012647953f98122a5c591a9e16ff6b561290b8", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/53339.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d87105d697ced10e1f7af3f1f80ef6c9890c8585/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2F53339.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d87105d697ced10e1f7af3f1f80ef6c9890c8585/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2F53339.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2F53339.cc?ref=d87105d697ced10e1f7af3f1f80ef6c9890c8585", "patch": "@@ -1,5 +1,4 @@\n // { dg-do compile { target c++11 } }\n-// { dg-excess-errors \"XFAIL because of PR libstdc++/55043 fix\" }\n \n // Copyright (C) 2012-2021 Free Software Foundation, Inc.\n //"}]}