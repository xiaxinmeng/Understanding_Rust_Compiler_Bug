{"sha": "4f0c9c8a876450531bcfa8989d327efdbd0cd93c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYwYzljOGE4NzY0NTA1MzFiY2ZhODk4OWQzMjdlZmRiZDBjZDkzYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-12-31T08:28:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-12-31T08:28:10Z"}, "message": "locale_facets.tcc (num_get::_M_extract_int, [...]): According to 22.2.2.1.2...\n\n2003-12-31  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (num_get::_M_extract_int,\n\tnum_get::_M_extract_float): According to 22.2.2.1.2, p8-9,\n\t_first_ look for thousands_sep, then for decimal_point and\n\tfinally for digits.\n\t(num_get::_M_extract_float): After the decimal_point or\n\t'e'/'E', decimal_point and thousands_sep just break out the\n\tparsing loop.\n\t* testsuite/22_locale/num_get/get/char/11.cc: Add tests.\n\t* testsuite/22_locale/num_get/get/wchar_t/11.cc: Likewise.\n\nFrom-SVN: r75259", "tree": {"sha": "dc615e287c0bd2140978df6b1f24cda3d7812fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc615e287c0bd2140978df6b1f24cda3d7812fb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f0c9c8a876450531bcfa8989d327efdbd0cd93c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0c9c8a876450531bcfa8989d327efdbd0cd93c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0c9c8a876450531bcfa8989d327efdbd0cd93c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0c9c8a876450531bcfa8989d327efdbd0cd93c/comments", "author": null, "committer": null, "parents": [{"sha": "f5cb6ca2675b946792989030a5b840e25d631616", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5cb6ca2675b946792989030a5b840e25d631616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5cb6ca2675b946792989030a5b840e25d631616"}], "stats": {"total": 220, "additions": 159, "deletions": 61}, "files": [{"sha": "4a976be6ccb83231090e630b2cc00b955fa0a73c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0c9c8a876450531bcfa8989d327efdbd0cd93c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0c9c8a876450531bcfa8989d327efdbd0cd93c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4f0c9c8a876450531bcfa8989d327efdbd0cd93c", "patch": "@@ -1,3 +1,15 @@\n+2003-12-31  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (num_get::_M_extract_int,\n+\tnum_get::_M_extract_float): According to 22.2.2.1.2, p8-9,\n+\t_first_ look for thousands_sep, then for decimal_point and\n+\tfinally for digits.\n+\t(num_get::_M_extract_float): After the decimal_point or\n+\t'e'/'E', decimal_point and thousands_sep just break out the\n+\tparsing loop.\n+\t* testsuite/22_locale/num_get/get/char/11.cc: Add tests.\n+\t* testsuite/22_locale/num_get/get/wchar_t/11.cc: Likewise.\n+\n 2003-12-30  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/13369"}, {"sha": "0840ba17ccdb0e0014a0096d2f914eb8e81e821c", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 49, "deletions": 41, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0c9c8a876450531bcfa8989d327efdbd0cd93c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0c9c8a876450531bcfa8989d327efdbd0cd93c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=4f0c9c8a876450531bcfa8989d327efdbd0cd93c", "patch": "@@ -212,39 +212,47 @@ namespace std\n       const char_type* __p;\n       while (__beg != __end)\n         {\n-\t  // According to 22.2.2.1.2, p8-9, first look for decimal_point\n-\t  // and thousands_sep.\n+\t  // According to 22.2.2.1.2, p8-9, first look for thousands_sep\n+\t  // and decimal_point.\n \t  const char_type __c = *__beg;\n-\t  if (__traits_type::eq(__c, __lc->_M_decimal_point) \n-\t      && !__found_dec && !__found_sci)\n+          if (__lc->_M_use_grouping\n+\t      && __traits_type::eq(__c, __lc->_M_thousands_sep))\n \t    {\n-\t      // According to the standard, if no grouping chars are seen,\n-\t      // no grouping check is applied. Therefore __found_grouping\n-\t      // must be adjusted only if __dec comes after some __sep.\n-\t      if (__found_grouping.size())\n-\t\t__found_grouping += static_cast<char>(__sep_pos);\n-\t      __xtrc += '.';\n-\t      __found_dec = true;\n-\t      ++__beg;\n-\t    }\n-          else if (__lc->_M_use_grouping\n-\t\t   && __traits_type::eq(__c, __lc->_M_thousands_sep)\n-\t\t   && !__found_dec && !__found_sci)\n-\t    {\n-              // NB: Thousands separator at the beginning of a string\n-              // is a no-no, as is two consecutive thousands separators.\n-              if (__sep_pos)\n-                {\n-                  __found_grouping += static_cast<char>(__sep_pos);\n-                  __sep_pos = 0;\n-\t\t  ++__beg;\n-                }\n-              else\n+\t      if (!__found_dec && !__found_sci)\n \t\t{\n-\t\t  __err |= ios_base::failbit;\n-\t\t  break;\n+\t\t  // NB: Thousands separator at the beginning of a string\n+\t\t  // is a no-no, as is two consecutive thousands separators.\n+\t\t  if (__sep_pos)\n+\t\t    {\n+\t\t      __found_grouping += static_cast<char>(__sep_pos);\n+\t\t      __sep_pos = 0;\n+\t\t      ++__beg;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      __err |= ios_base::failbit;\n+\t\t      break;\n+\t\t    }\n \t\t}\n+\t      else\n+\t\tbreak;\n             }\n+\t  else if (__traits_type::eq(__c, __lc->_M_decimal_point))\n+\t    {\n+\t      if (!__found_dec && !__found_sci)\n+\t\t{\n+\t\t  // If no grouping chars are seen, no grouping check\n+\t\t  // is applied. Therefore __found_grouping is adjusted\n+\t\t  // only if decimal_point comes after some thousands_sep.\n+\t\t  if (__found_grouping.size())\n+\t\t    __found_grouping += static_cast<char>(__sep_pos);\n+\t\t  __xtrc += '.';\n+\t\t  __found_dec = true;\n+\t\t  ++__beg;\n+\t\t}\n+\t      else\n+\t\tbreak;\n+\t    }\n           else if (__p = __traits_type::find(__lit + _S_izero, 10, __c))\n \t    {\n \t      __xtrc += _S_atoms_in[__p - __lit];\n@@ -385,13 +393,11 @@ namespace std\n \t    const _ValueT __min = numeric_limits<_ValueT>::min() / __base;\n \t    for (; __beg != __end; ++__beg)\n \t      {\n-\t\t// According to 22.2.2.1.2, p8-9, first look for decimal_point\n-\t\t// and thousands_sep.\n-\t\tconst char_type __c = *__beg;\t\t\n-\t\tif (__traits_type::eq(__c, __lc->_M_decimal_point))\n-\t\t  break;\n-\t\telse if (__lc->_M_use_grouping\n-\t\t\t && __traits_type::eq(__c, __lc->_M_thousands_sep))\n+\t\t// According to 22.2.2.1.2, p8-9, first look for thousands_sep\n+\t\t// and decimal_point.\n+\t\tconst char_type __c = *__beg;\n+\t\tif (__lc->_M_use_grouping\n+\t\t    && __traits_type::eq(__c, __lc->_M_thousands_sep))\n \t\t  {\n \t\t    // NB: Thousands separator at the beginning of a string\n \t\t    // is a no-no, as is two consecutive thousands separators.\n@@ -406,6 +412,8 @@ namespace std\n \t\t\tbreak;\n \t\t      }\n \t\t  }\n+\t\telse if (__traits_type::eq(__c, __lc->_M_decimal_point))\n+\t\t  break;\n \t\telse if (__p = __traits_type::find(__lit_zero, __len, __c))\n \t\t  {\n \t\t    int __digit = __p - __lit_zero;\n@@ -432,11 +440,9 @@ namespace std\n \t    const _ValueT __max = numeric_limits<_ValueT>::max() / __base;\n \t    for (; __beg != __end; ++__beg)\n \t      {\n-\t\tconst char_type __c = *__beg;\t\t\n-\t\tif (__traits_type::eq(__c, __lc->_M_decimal_point))\n-\t\t  break;\n-\t\telse if (__lc->_M_use_grouping\n-\t\t\t && __traits_type::eq(__c, __lc->_M_thousands_sep))\n+\t\tconst char_type __c = *__beg;\n+\t\tif (__lc->_M_use_grouping\n+\t\t    && __traits_type::eq(__c, __lc->_M_thousands_sep))\n \t\t  {\n \t\t    if (__sep_pos)\n \t\t      {\n@@ -448,7 +454,9 @@ namespace std\n \t\t\t__err |= ios_base::failbit;\n \t\t\tbreak;\n \t\t      }\n-\t\t  }\n+\t\t  }\t\n+\t\telse if (__traits_type::eq(__c, __lc->_M_decimal_point))\n+\t\t  break;\n \t\telse if (__p = __traits_type::find(__lit_zero, __len, __c))\n \t\t  {\n \t\t    int __digit = __p - __lit_zero;"}, {"sha": "f9bd933180982bfd79d6e6be2adf1b4bae66f808", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/11.cc", "status": "modified", "additions": 49, "deletions": 10, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0c9c8a876450531bcfa8989d327efdbd0cd93c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0c9c8a876450531bcfa8989d327efdbd0cd93c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F11.cc?ref=4f0c9c8a876450531bcfa8989d327efdbd0cd93c", "patch": "@@ -22,13 +22,20 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n \n-struct Punct: std::numpunct<char>\n+struct Punct1: std::numpunct<char>\n {\n   std::string do_grouping() const { return \"\\1\"; }\n   char do_thousands_sep() const { return '2'; }\n   char do_decimal_point() const { return '4'; }\n };\n \n+struct Punct2: std::numpunct<char>\n+{\n+  std::string do_grouping() const { return \"\\1\"; }\n+  char do_thousands_sep() const { return '2'; }\n+  char do_decimal_point() const { return '2'; }\n+};\n+\n // http://gcc.gnu.org/ml/libstdc++/2003-12/msg00201.html\n void test01()\n {\n@@ -37,30 +44,62 @@ void test01()\n   \n   bool test __attribute__((unused)) = true;\n \n-  istringstream iss;\n-  iss.imbue(locale(iss.getloc(), static_cast<numpunct<char>*>(new Punct)));\n-  const num_get<char>& ng = use_facet<num_get<char> >(iss.getloc()); \n+  istringstream iss1, iss2;\n+  iss1.imbue(locale(iss1.getloc(), static_cast<numpunct<char>*>(new Punct1)));\n+  iss2.imbue(locale(iss2.getloc(), static_cast<numpunct<char>*>(new Punct2)));\n+  const num_get<char>& ng1 = use_facet<num_get<char> >(iss1.getloc()); \n+  const num_get<char>& ng2 = use_facet<num_get<char> >(iss2.getloc()); \n+\n   ios_base::iostate err = ios_base::goodbit;\n   iterator_type end;\n   double d = 0.0;\n   double d1 = 13.0;\n+  double d2 = 1.0;\n+  double d3 = 30.0;\n   long l = 0l;\n   long l1 = 13l;\n+  long l2 = 10l;\n   \n-  iss.str(\"1234\");\n+  iss1.str(\"1234\");\n   err = ios_base::goodbit;\n-  end = ng.get(iss.rdbuf(), 0, iss, err, d);\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, d);\n   VERIFY( err == ios_base::eofbit );\n   VERIFY( d == d1 );\n \n-  iss.str(\"1234\");\n-  iss.clear();\n+  iss1.str(\"142\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, d);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( d == d2 );\n+\n+  iss1.str(\"3e14\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, d);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( d == d3 );\n+\n+  iss1.str(\"1234\");\n+  iss1.clear();\n   err = ios_base::goodbit;\n-  end = ng.get(iss.rdbuf(), 0, iss, err, l);\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n   VERIFY( err == ios_base::goodbit );\n   VERIFY( l == l1 );\n-}\n \n+  iss2.str(\"123\");\n+  err = ios_base::goodbit;\n+  end = ng2.get(iss2.rdbuf(), 0, iss2, err, d);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( d == d1 );\n+\n+  iss2.str(\"120\");\n+  iss2.clear();\n+  err = ios_base::goodbit;\n+  end = ng2.get(iss2.rdbuf(), 0, iss2, err, l);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( l == l2 );\n+}\n \n int main()\n {"}, {"sha": "d056892856eb692ef56e79027a2df69d96025b6f", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/11.cc", "status": "modified", "additions": 49, "deletions": 10, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0c9c8a876450531bcfa8989d327efdbd0cd93c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0c9c8a876450531bcfa8989d327efdbd0cd93c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F11.cc?ref=4f0c9c8a876450531bcfa8989d327efdbd0cd93c", "patch": "@@ -22,13 +22,20 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n \n-struct Punct: std::numpunct<wchar_t>\n+struct Punct1: std::numpunct<wchar_t>\n {\n   std::string do_grouping() const { return \"\\1\"; }\n   wchar_t do_thousands_sep() const { return L'2'; }\n   wchar_t do_decimal_point() const { return L'4'; }\n };\n \n+struct Punct2: std::numpunct<wchar_t>\n+{\n+  std::string do_grouping() const { return \"\\1\"; }\n+  wchar_t do_thousands_sep() const { return L'2'; }\n+  wchar_t do_decimal_point() const { return L'2'; }\n+};\n+\n // http://gcc.gnu.org/ml/libstdc++/2003-12/msg00201.html\n void test01()\n {\n@@ -37,30 +44,62 @@ void test01()\n   \n   bool test __attribute__((unused)) = true;\n \n-  wistringstream iss;\n-  iss.imbue(locale(iss.getloc(), static_cast<numpunct<wchar_t>*>(new Punct)));\n-  const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(iss.getloc()); \n+  wistringstream iss1, iss2;\n+  iss1.imbue(locale(iss1.getloc(), static_cast<numpunct<wchar_t>*>(new Punct1)));\n+  iss2.imbue(locale(iss2.getloc(), static_cast<numpunct<wchar_t>*>(new Punct2)));\n+  const num_get<wchar_t>& ng1 = use_facet<num_get<wchar_t> >(iss1.getloc()); \n+  const num_get<wchar_t>& ng2 = use_facet<num_get<wchar_t> >(iss2.getloc()); \n+\n   ios_base::iostate err = ios_base::goodbit;\n   iterator_type end;\n   double d = 0.0;\n   double d1 = 13.0;\n+  double d2 = 1.0;\n+  double d3 = 30.0;\n   long l = 0l;\n   long l1 = 13l;\n+  long l2 = 10l;\n   \n-  iss.str(L\"1234\");\n+  iss1.str(L\"1234\");\n   err = ios_base::goodbit;\n-  end = ng.get(iss.rdbuf(), 0, iss, err, d);\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, d);\n   VERIFY( err == ios_base::eofbit );\n   VERIFY( d == d1 );\n \n-  iss.str(L\"1234\");\n-  iss.clear();\n+  iss1.str(L\"142\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, d);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( d == d2 );\n+\n+  iss1.str(L\"3e14\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, d);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( d == d3 );\n+\n+  iss1.str(L\"1234\");\n+  iss1.clear();\n   err = ios_base::goodbit;\n-  end = ng.get(iss.rdbuf(), 0, iss, err, l);\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n   VERIFY( err == ios_base::goodbit );\n   VERIFY( l == l1 );\n-}\n \n+  iss2.str(L\"123\");\n+  err = ios_base::goodbit;\n+  end = ng2.get(iss2.rdbuf(), 0, iss2, err, d);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( d == d1 );\n+\n+  iss2.str(L\"120\");\n+  iss2.clear();\n+  err = ios_base::goodbit;\n+  end = ng2.get(iss2.rdbuf(), 0, iss2, err, l);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( l == l2 );\n+}\n \n int main()\n {"}]}