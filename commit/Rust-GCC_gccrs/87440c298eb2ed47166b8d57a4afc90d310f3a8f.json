{"sha": "87440c298eb2ed47166b8d57a4afc90d310f3a8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc0NDBjMjk4ZWIyZWQ0NzE2NmI4ZDU3YTRhZmM5MGQzMTBmM2E4Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-02-16T15:00:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-02-16T15:00:45Z"}, "message": "re PR tree-optimization/69776 (Wrong optimization with aliasing)\n\n2016-02-16  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/69776\n\t* tree-ssa-alias.c (indirect_ref_may_alias_decl_p): Get alias\n\tsets from caller.\n\t(indirect_refs_may_alias_p): Likewise.\n\t(refs_may_alias_p_1): Pass alias sets as from ao_ref.\n\t* tree-ssa-sccvn.c (vn_reference_lookup): Also adjust vr alias-set\n\taccording to tbaa_p.\n\t* tree-ssa-dom.c (lookup_avail_expr): Add tbaa_p flag.\n\t(optimize_stmt): For redundant store discovery do not allow tbaa.\n\n\t* gcc.dg/torture/pr69776-2.c: New testcase.\n\nFrom-SVN: r233453", "tree": {"sha": "8d0e66b862f18cc6aaa9eaf860c087a6377e9e42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d0e66b862f18cc6aaa9eaf860c087a6377e9e42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87440c298eb2ed47166b8d57a4afc90d310f3a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87440c298eb2ed47166b8d57a4afc90d310f3a8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87440c298eb2ed47166b8d57a4afc90d310f3a8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87440c298eb2ed47166b8d57a4afc90d310f3a8f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d87c306c6a44f8db81a9a9f2f5de4d943d5e57f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d87c306c6a44f8db81a9a9f2f5de4d943d5e57f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d87c306c6a44f8db81a9a9f2f5de4d943d5e57f"}], "stats": {"total": 77, "additions": 58, "deletions": 19}, "files": [{"sha": "7fd48ec3ab0e0015932ddec99c34554941f661d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87440c298eb2ed47166b8d57a4afc90d310f3a8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87440c298eb2ed47166b8d57a4afc90d310f3a8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87440c298eb2ed47166b8d57a4afc90d310f3a8f", "patch": "@@ -1,3 +1,15 @@\n+2016-02-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69776\n+\t* tree-ssa-alias.c (indirect_ref_may_alias_decl_p): Get alias\n+\tsets from caller.\n+\t(indirect_refs_may_alias_p): Likewise.\n+\t(refs_may_alias_p_1): Pass alias sets as from ao_ref.\n+\t* tree-ssa-sccvn.c (vn_reference_lookup): Also adjust vr alias-set\n+\taccording to tbaa_p.\n+\t* tree-ssa-dom.c (lookup_avail_expr): Add tbaa_p flag.\n+\t(optimize_stmt): For redundant store discovery do not allow tbaa.\n+\n 2016-02-16  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR tree-optimization/69714"}, {"sha": "d05cdd11059edc9823e67232fde08caa16157a6e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87440c298eb2ed47166b8d57a4afc90d310f3a8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87440c298eb2ed47166b8d57a4afc90d310f3a8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87440c298eb2ed47166b8d57a4afc90d310f3a8f", "patch": "@@ -1,3 +1,8 @@\n+2016-02-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69776\n+\t* gcc.dg/torture/pr69776-2.c: New testcase.\n+\n 2016-02-16  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR tree-optimization/69714"}, {"sha": "e5bb28d7fb4875464230edff38dbcd9c49b83769", "filename": "gcc/testsuite/gcc.dg/torture/pr69776-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87440c298eb2ed47166b8d57a4afc90d310f3a8f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69776-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87440c298eb2ed47166b8d57a4afc90d310f3a8f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69776-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69776-2.c?ref=87440c298eb2ed47166b8d57a4afc90d310f3a8f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fstrict-aliasing\" } */\n+\n+extern void *malloc (__SIZE_TYPE__);\n+extern void abort (void);\n+\n+__attribute__((noinline,noclone))\n+void f(int *qi, double *qd)\n+{\n+  int i = *qi;\n+  *qd = 0;\n+  *qi = i;\n+}\n+\n+int main()\n+{\n+  int *p = malloc(sizeof(double));\n+\n+  *p = 1;\n+  f(p, (double *)p);\n+  if (*p != 1)\n+    abort();\n+  return 0;\n+}\n+"}, {"sha": "08f10e5248b568f7252d4b54868bd22ab7767d12", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87440c298eb2ed47166b8d57a4afc90d310f3a8f/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87440c298eb2ed47166b8d57a4afc90d310f3a8f/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=87440c298eb2ed47166b8d57a4afc90d310f3a8f", "patch": "@@ -1067,12 +1067,8 @@ indirect_ref_may_alias_decl_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n   ptrtype1 = TREE_TYPE (TREE_OPERAND (base1, 1));\n \n   /* If the alias set for a pointer access is zero all bets are off.  */\n-  if (base1_alias_set == -1)\n-    base1_alias_set = get_deref_alias_set (ptrtype1);\n   if (base1_alias_set == 0)\n     return true;\n-  if (base2_alias_set == -1)\n-    base2_alias_set = get_alias_set (base2);\n \n   /* When we are trying to disambiguate an access with a pointer dereference\n      as base versus one with a decl as base we can use both the size\n@@ -1239,13 +1235,8 @@ indirect_refs_may_alias_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n   ptrtype2 = TREE_TYPE (TREE_OPERAND (base2, 1));\n \n   /* If the alias set for a pointer access is zero all bets are off.  */\n-  if (base1_alias_set == -1)\n-    base1_alias_set = get_deref_alias_set (ptrtype1);\n-  if (base1_alias_set == 0)\n-    return true;\n-  if (base2_alias_set == -1)\n-    base2_alias_set = get_deref_alias_set (ptrtype2);\n-  if (base2_alias_set == 0)\n+  if (base1_alias_set == 0\n+      || base2_alias_set == 0)\n     return true;\n \n   /* If both references are through the same type, they do not alias\n@@ -1417,7 +1408,8 @@ refs_may_alias_p_1 (ao_ref *ref1, ao_ref *ref2, bool tbaa_p)\n   if (var1_p && ind2_p)\n     return indirect_ref_may_alias_decl_p (ref2->ref, base2,\n \t\t\t\t\t  offset2, max_size2,\n-\t\t\t\t\t  ao_ref_alias_set (ref2), -1,\n+\t\t\t\t\t  ao_ref_alias_set (ref2),\n+\t\t\t\t\t  ao_ref_base_alias_set (ref2),\n \t\t\t\t\t  ref1->ref, base1,\n \t\t\t\t\t  offset1, max_size1,\n \t\t\t\t\t  ao_ref_alias_set (ref1),\n@@ -1426,10 +1418,12 @@ refs_may_alias_p_1 (ao_ref *ref1, ao_ref *ref2, bool tbaa_p)\n   else if (ind1_p && ind2_p)\n     return indirect_refs_may_alias_p (ref1->ref, base1,\n \t\t\t\t      offset1, max_size1,\n-\t\t\t\t      ao_ref_alias_set (ref1), -1,\n+\t\t\t\t      ao_ref_alias_set (ref1),\n+\t\t\t\t      ao_ref_base_alias_set (ref1),\n \t\t\t\t      ref2->ref, base2,\n \t\t\t\t      offset2, max_size2,\n-\t\t\t\t      ao_ref_alias_set (ref2), -1,\n+\t\t\t\t      ao_ref_alias_set (ref2),\n+\t\t\t\t      ao_ref_base_alias_set (ref2),\n \t\t\t\t      tbaa_p);\n \n   gcc_unreachable ();"}, {"sha": "9aaa3724ab91832a95927a1df67677b4a2d54c5c", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87440c298eb2ed47166b8d57a4afc90d310f3a8f/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87440c298eb2ed47166b8d57a4afc90d310f3a8f/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=87440c298eb2ed47166b8d57a4afc90d310f3a8f", "patch": "@@ -103,7 +103,8 @@ static struct opt_stats_d opt_stats;\n static edge optimize_stmt (basic_block, gimple_stmt_iterator,\n \t\t\t   class const_and_copies *,\n \t\t\t   class avail_exprs_stack *);\n-static tree lookup_avail_expr (gimple *, bool, class avail_exprs_stack *);\n+static tree lookup_avail_expr (gimple *, bool, class avail_exprs_stack *,\n+\t\t\t       bool = true);\n static void record_cond (cond_equivalence *, class avail_exprs_stack *);\n static void record_equality (tree, tree, class const_and_copies *);\n static void record_equivalences_from_phis (basic_block);\n@@ -1893,7 +1894,8 @@ optimize_stmt (basic_block bb, gimple_stmt_iterator si,\n \t  else\n \t    new_stmt = gimple_build_assign (rhs, lhs);\n \t  gimple_set_vuse (new_stmt, gimple_vuse (stmt));\n-\t  cached_lhs = lookup_avail_expr (new_stmt, false, avail_exprs_stack);\n+\t  cached_lhs = lookup_avail_expr (new_stmt, false, avail_exprs_stack,\n+\t\t\t\t\t  false);\n \t  if (cached_lhs\n \t      && rhs == cached_lhs)\n \t    {\n@@ -1997,7 +1999,7 @@ vuse_eq (ao_ref *, tree vuse1, unsigned int cnt, void *data)\n \n static tree\n lookup_avail_expr (gimple *stmt, bool insert,\n-\t\t   class avail_exprs_stack *avail_exprs_stack)\n+\t\t   class avail_exprs_stack *avail_exprs_stack, bool tbaa_p)\n {\n   expr_hash_elt **slot;\n   tree lhs;\n@@ -2054,7 +2056,8 @@ lookup_avail_expr (gimple *stmt, bool insert,\n       if (!(vuse1 && vuse2\n \t    && gimple_assign_single_p (stmt)\n \t    && TREE_CODE (gimple_assign_lhs (stmt)) == SSA_NAME\n-\t    && (ao_ref_init (&ref, gimple_assign_rhs1 (stmt)), true)\n+\t    && (ao_ref_init (&ref, gimple_assign_rhs1 (stmt)),\n+\t\tref.base_alias_set = ref.ref_alias_set = tbaa_p ? -1 : 0, true)\n \t    && walk_non_aliased_vuses (&ref, vuse2,\n \t\t\t\t       vuse_eq, NULL, NULL, vuse1) != NULL))\n \t{"}, {"sha": "1c237a4ec4bae92dac30345b4abc9847d80934d5", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87440c298eb2ed47166b8d57a4afc90d310f3a8f/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87440c298eb2ed47166b8d57a4afc90d310f3a8f/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=87440c298eb2ed47166b8d57a4afc90d310f3a8f", "patch": "@@ -2249,7 +2249,7 @@ vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n   vr1.operands = operands\n     = valueize_shared_reference_ops_from_ref (op, &valuezied_anything);\n   vr1.type = TREE_TYPE (op);\n-  vr1.set = get_alias_set (op);\n+  vr1.set = tbaa_p ? get_alias_set (op) : 0;\n   vr1.hashcode = vn_reference_compute_hash (&vr1);\n   if ((cst = fully_constant_vn_reference_p (&vr1)))\n     return cst;"}]}