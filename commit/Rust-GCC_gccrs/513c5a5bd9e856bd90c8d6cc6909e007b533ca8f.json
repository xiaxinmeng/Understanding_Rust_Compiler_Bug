{"sha": "513c5a5bd9e856bd90c8d6cc6909e007b533ca8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEzYzVhNWJkOWU4NTZiZDkwYzhkNmNjNjkwOWUwMDdiNTMzY2E4Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-07-21T14:48:47Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-07-21T14:48:47Z"}, "message": "chrono (duration<>::operator%=, operator%): Add, per DR 934.\n\n2009-07-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/chrono (duration<>::operator%=,  operator%):\n\tAdd, per DR 934.\n\t* testsuite/20_util/duration/arithmetic/dr934-1.cc: New.\n\t* testsuite/20_util/duration/arithmetic/dr934-2.cc: Likewise.\n\n\t* include/std/chrono (operator/): Simplify implementation.\n\nFrom-SVN: r149856", "tree": {"sha": "91f3841f0eaf58dd0cbf3086bd3fba2668cce630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91f3841f0eaf58dd0cbf3086bd3fba2668cce630"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/513c5a5bd9e856bd90c8d6cc6909e007b533ca8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/513c5a5bd9e856bd90c8d6cc6909e007b533ca8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/513c5a5bd9e856bd90c8d6cc6909e007b533ca8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/513c5a5bd9e856bd90c8d6cc6909e007b533ca8f/comments", "author": null, "committer": null, "parents": [{"sha": "a1516d083635329af0ad21c5f2e3daf3bd92219d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1516d083635329af0ad21c5f2e3daf3bd92219d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1516d083635329af0ad21c5f2e3daf3bd92219d"}], "stats": {"total": 217, "additions": 175, "deletions": 42}, "files": [{"sha": "84e1edc57a88cd425f93480c7a12b7f9f3ea10aa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513c5a5bd9e856bd90c8d6cc6909e007b533ca8f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513c5a5bd9e856bd90c8d6cc6909e007b533ca8f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=513c5a5bd9e856bd90c8d6cc6909e007b533ca8f", "patch": "@@ -1,3 +1,12 @@\n+2009-07-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/chrono (duration<>::operator%=,  operator%):\n+\tAdd, per DR 934.\n+\t* testsuite/20_util/duration/arithmetic/dr934-1.cc: New.\n+\t* testsuite/20_util/duration/arithmetic/dr934-2.cc: Likewise.\n+\n+\t* include/std/chrono (operator/): Simplify implementation.\n+\n 2009-07-20  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/xml/manual/intro.xml: Escape '&', validate."}, {"sha": "aa4888d9a9daeee3a5bbd7fa811a57537042170b", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 64, "deletions": 42, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513c5a5bd9e856bd90c8d6cc6909e007b533ca8f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513c5a5bd9e856bd90c8d6cc6909e007b533ca8f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=513c5a5bd9e856bd90c8d6cc6909e007b533ca8f", "patch": "@@ -154,7 +154,7 @@ namespace std\n \n     /// treat_as_floating_point\n     template<typename _Rep>\n-      struct treat_as_floating_point \n+      struct treat_as_floating_point\n       : is_floating_point<_Rep>\n       { };\n \n@@ -211,7 +211,7 @@ namespace std\n \tduration() = default;\n \n         template<typename _Rep2>\n-          explicit duration(_Rep2 const& __rep)\n+          explicit duration(const _Rep2& __rep)\n           : __r(static_cast<rep>(__rep))\n           {\n             static_assert(is_convertible<_Rep2,rep>::value \n@@ -244,29 +244,29 @@ namespace std\n         { return *this; }\n \n         duration\n-        operator-() const \n+        operator-() const\n         { return duration(-__r); }\n \n         duration&\n-        operator++() \n+        operator++()\n         {\n           ++__r;\n           return *this;\n         }\n \n         duration\n-        operator++(int) \n+        operator++(int)\n         { return duration(__r++); }\n \n         duration&\n-        operator--() \n-        { \n+        operator--()\n+        {\n           --__r;\n           return *this;\n         }\n \n         duration\n-        operator--(int) \n+        operator--(int)\n         { return duration(__r--); }\n         \n         duration&\n@@ -292,11 +292,30 @@ namespace std\n \n         duration&\n         operator/=(const rep& __rhs)\n-        { \n+        {\n           __r /= __rhs;\n           return *this;\n         }\n \n+\t// DR 934.\n+\ttemplate<typename _Rep2 = rep>\n+\t  typename enable_if<!treat_as_floating_point<_Rep2>::value,\n+\t\t\t     duration&>::type\n+\t  operator%=(const rep& __rhs)\n+\t  {\n+\t    __r %= __rhs;\n+\t    return *this;\n+\t  }\n+\n+\ttemplate<typename _Rep2 = rep>\n+\t  typename enable_if<!treat_as_floating_point<_Rep2>::value,\n+\t\t\t     duration&>::type\n+\t  operator%=(const duration& __d)\n+\t  {\n+\t    __r %= __d.count();\n+\t    return *this;\n+\t  }\n+\n         // 20.8.3.4 special values\n         // TODO: These should be constexprs.\n         static const duration\n@@ -310,8 +329,8 @@ namespace std\n         static const duration\n         max()\n         { return duration(duration_values<rep>::max()); }\n-   \n-      private:    \n+\n+      private:\n         rep __r;\n       };\n \n@@ -351,46 +370,49 @@ namespace std\n       inline duration<typename common_type<_Rep1, _Rep2>::type, _Period>\n       operator*(const _Rep2& __s, const duration<_Rep1, _Period>& __d)\n       { return __d * __s; }\n-\n-    template<typename _Tp, typename _Up, typename _Ep = void>\n-      struct __division_impl;\n-  \n+ \n     template<typename _Rep1, typename _Period, typename _Rep2>\n-      struct __division_impl<duration<_Rep1, _Period>, _Rep2, \n-        typename enable_if<!__is_duration<_Rep2>::value>::type>\n+      inline duration<typename common_type<_Rep1, typename\n+\tenable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>\n+      operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n       {\n-        typedef typename common_type<_Rep1, _Rep2>::type __cr;\n-        typedef \n-          duration<typename common_type<_Rep1, _Rep2>::type, _Period> __rt;\n-\n-        static __rt\n-        __divide(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n-        { return duration<__cr, _Period>(__d) /= __s; }\n-      };\n+\ttypedef typename common_type<_Rep1, _Rep2>::type __cr;\n+\treturn duration<__cr, _Period>(__d) /= __s;\n+      }\n \n-    template<typename _Rep1, typename _Period1, \n-             typename _Rep2, typename _Period2>\n-      struct __division_impl<duration<_Rep1, _Period1>, \n-                             duration<_Rep2, _Period2>>\n+     template<typename _Rep1, typename _Period1,\n+\t      typename _Rep2, typename _Period2>\n+      inline typename common_type<_Rep1, _Rep2>::type\n+      operator/(const duration<_Rep1, _Period1>& __lhs, \n+                const duration<_Rep2, _Period2>& __rhs)\n       {\n         typedef typename common_type<duration<_Rep1, _Period1>, \n                                      duration<_Rep2, _Period2>>::type __ct;\n-        typedef typename common_type<_Rep1, _Rep2>::type __rt;\n+        return __ct(__lhs).count() / __ct(__rhs).count();\n+      }\n \n-        static __rt\n-        __divide(const duration<_Rep1, _Period1>& __lhs, \n-                 const duration<_Rep2, _Period2>& __rhs)\n-        { return __ct(__lhs).count() / __ct(__rhs).count(); }\n-      };\n-  \n-    template<typename _Rep, typename _Period, typename _Up>\n-      inline typename __division_impl<duration<_Rep, _Period>, _Up>::__rt\n-      operator/(const duration<_Rep, _Period>& __d, const _Up& __u)\n+    // DR 934.\n+    template<typename _Rep1, typename _Period, typename _Rep2>\n+      inline duration<typename common_type<_Rep1, typename\n+\tenable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>\n+      operator%(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n       {\n-        return \n-          __division_impl<duration<_Rep, _Period>, _Up>::__divide(__d, __u);\n+\ttypedef typename common_type<_Rep1, _Rep2>::type __cr;\n+\treturn duration<__cr, _Period>(__d) %= __s;\n       }\n- \n+\n+     template<typename _Rep1, typename _Period1,\n+\t      typename _Rep2, typename _Period2>\n+      inline typename common_type<duration<_Rep1, _Period1>, \n+                                  duration<_Rep2, _Period2>>::type\n+      operator%(const duration<_Rep1, _Period1>& __lhs, \n+                const duration<_Rep2, _Period2>& __rhs)\n+      {\n+        typedef typename common_type<duration<_Rep1, _Period1>, \n+                                     duration<_Rep2, _Period2>>::type __ct;\n+        return __ct(__lhs) %= __rhs;\n+      }\n+\n     // comparisons\n     template<typename _Rep1, typename _Period1,\n              typename _Rep2, typename _Period2>"}, {"sha": "decf94c884ccf61b8ee56e756860f844c72ed087", "filename": "libstdc++-v3/testsuite/20_util/duration/arithmetic/dr934-1.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513c5a5bd9e856bd90c8d6cc6909e007b533ca8f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Farithmetic%2Fdr934-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513c5a5bd9e856bd90c8d6cc6909e007b533ca8f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Farithmetic%2Fdr934-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Farithmetic%2Fdr934-1.cc?ref=513c5a5bd9e856bd90c8d6cc6909e007b533ca8f", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <chrono>\n+\n+class ClockTime\n+{\n+  typedef std::chrono::hours hours;\n+  typedef std::chrono::minutes minutes;\n+  typedef std::chrono::seconds seconds;\n+\n+public:\n+  hours hours_;\n+  minutes minutes_;\n+  seconds seconds_;\n+\n+  template<typename Rep, typename Period>\n+    explicit\n+    ClockTime(const std::chrono::duration<Rep, Period>& d)\n+    : hours_  (std::chrono::duration_cast<hours>  (d)),\n+      minutes_(std::chrono::duration_cast<minutes>(d % hours(1))),\n+      seconds_(std::chrono::duration_cast<seconds>(d % minutes(1))) { }\n+};\n+\n+// DR 934.\n+void test01()\n+{\n+  std::chrono::duration<int> d;\n+  ClockTime ct(d);\n+}"}, {"sha": "ada8ba573e22e25947e9f6e98428d7cbbdcf1cf7", "filename": "libstdc++-v3/testsuite/20_util/duration/arithmetic/dr934-2.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513c5a5bd9e856bd90c8d6cc6909e007b533ca8f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Farithmetic%2Fdr934-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513c5a5bd9e856bd90c8d6cc6909e007b533ca8f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Farithmetic%2Fdr934-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Farithmetic%2Fdr934-2.cc?ref=513c5a5bd9e856bd90c8d6cc6909e007b533ca8f", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+// DR 934.\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::chrono;\n+\n+  const duration<int> d0(17);\n+  duration<int> d3(d0);\n+  d3 %= 5;\n+  VERIFY( d3.count() == 2 );\n+\n+  const duration<int> d4(7);\n+  duration<int> d5(d0);\n+  d5 %= d4;\n+  VERIFY( d5.count() == 3 );\n+\n+  const duration<int> d6 = d0 % 6;\n+  VERIFY( d6.count() == 5 );\n+\n+  const duration<int> d7(11);\n+  const duration<int> d8 = d0 % d7;\n+  VERIFY( d8.count() == 6 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}