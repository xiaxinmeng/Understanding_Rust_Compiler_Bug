{"sha": "6cabe79eabc995c20a16ce121cb42d3409b7364c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNhYmU3OWVhYmM5OTVjMjBhMTZjZTEyMWNiNDJkMzQwOWI3MzY0Yw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-09-26T18:21:10Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-09-26T18:21:10Z"}, "message": "reload.c (dup_replacements): New function.\n\n\t* reload.c (dup_replacements): New function.\n\t(find_reloads): Use it to duplicate replacements at the top level\n\tof match_dup operands.\n\nFrom-SVN: r57542", "tree": {"sha": "28ef776ce2bd8bfee4bf8e535b34d00c7fd7d71f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28ef776ce2bd8bfee4bf8e535b34d00c7fd7d71f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cabe79eabc995c20a16ce121cb42d3409b7364c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cabe79eabc995c20a16ce121cb42d3409b7364c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cabe79eabc995c20a16ce121cb42d3409b7364c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cabe79eabc995c20a16ce121cb42d3409b7364c/comments", "author": null, "committer": null, "parents": [{"sha": "0855247a1c2c7feb135bedccff3e17103598169d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0855247a1c2c7feb135bedccff3e17103598169d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0855247a1c2c7feb135bedccff3e17103598169d"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "bad6e8905ecca5b5d50d4aa900cd86e61da42b7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cabe79eabc995c20a16ce121cb42d3409b7364c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cabe79eabc995c20a16ce121cb42d3409b7364c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6cabe79eabc995c20a16ce121cb42d3409b7364c", "patch": "@@ -1,3 +1,9 @@\n+2002-09-26  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* reload.c (dup_replacements): New function.\n+\t(find_reloads): Use it to duplicate replacements at the top level\n+\tof match_dup operands.\n+\n 2002-09-26  Miles Bader  <miles@gnu.org>\n \n \t* v850.md (\"length\"): Change default value to 4."}, {"sha": "39cf4e0d2ebc4abc552a074c352b1f6a452c2199", "filename": "gcc/reload.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cabe79eabc995c20a16ce121cb42d3409b7364c/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cabe79eabc995c20a16ce121cb42d3409b7364c/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=6cabe79eabc995c20a16ce121cb42d3409b7364c", "patch": "@@ -244,6 +244,7 @@ static enum reg_class find_valid_class PARAMS ((enum machine_mode, int,\n \t\t\t\t\t\tunsigned int));\n static int reload_inner_reg_of_subreg PARAMS ((rtx, enum machine_mode));\n static void push_replacement\tPARAMS ((rtx *, int, enum machine_mode));\n+static void dup_replacements\tPARAMS ((rtx *, rtx *));\n static void combine_reloads\tPARAMS ((void));\n static int find_reusable_reload\tPARAMS ((rtx *, rtx, enum reg_class,\n \t\t\t\t       enum reload_type, int, int));\n@@ -1563,6 +1564,25 @@ push_replacement (loc, reloadnum, mode)\n       r->mode = mode;\n     }\n }\n+\n+/* Duplicate any replacement we have recorded to apply at\n+   location ORIG_LOC to also be performed at DUP_LOC.\n+   This is used in insn patterns that use match_dup.  */\n+\n+static void\n+dup_replacements (dup_loc, orig_loc)\n+     rtx *dup_loc;\n+     rtx *orig_loc;\n+{\n+  int i, n = n_replacements;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      struct replacement *r = &replacements[i];\n+      if (r->where == orig_loc)\n+\tpush_replacement (dup_loc, r->what, r->mode);\n+    }\n+}\n \f\n /* Transfer all replacements that used to be in reload FROM to be in\n    reload TO.  */\n@@ -3979,9 +3999,7 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n       {\n \tint opno = recog_data.dup_num[i];\n \t*recog_data.dup_loc[i] = *recog_data.operand_loc[opno];\n-\tif (operand_reloadnum[opno] >= 0)\n-\t  push_replacement (recog_data.dup_loc[i], operand_reloadnum[opno],\n-\t\t\t    insn_data[insn_code_number].operand[opno].mode);\n+\tdup_replacements (recog_data.dup_loc[i], recog_data.operand_loc[opno]);\n       }\n \n #if 0"}]}