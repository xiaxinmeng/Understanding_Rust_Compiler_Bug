{"sha": "b6eaf90c64f91553c8002f6ee401785a8bc6f94c", "node_id": "C_kwDOANBUbNoAKGI2ZWFmOTBjNjRmOTE1NTNjODAwMmY2ZWU0MDE3ODVhOGJjNmY5NGM", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-03-10T14:04:03Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-03-10T14:04:03Z"}, "message": "analyzer: check for writes to consts via access attr [PR104793]\n\nThis patch extends:\n  -Wanalyzer-write-to-const\n  -Wanalyzer-write-to-string-literal\nso that they will check for __attribute__ ((access, ....) on calls to\nexternally-defined functions, and complain about read-only regions\npointed to by arguments marked with a \"write_only\" or \"read_write\"\nattribute.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/104793\n\t* region-model.cc\n\t(region_model::check_external_function_for_access_attr): New.\n\t(region_model::handle_unrecognized_call): Call it.\n\t* region-model.h\n\t(region_model::check_external_function_for_access_attr): New decl.\n\t(region_model::handle_unrecognized_call): New decl.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/104793\n\t* gcc.dg/analyzer/write-to-const-2.c: New test.\n\t* gcc.dg/analyzer/write-to-function-1.c: New test.\n\t* gcc.dg/analyzer/write-to-string-literal-2.c: New test.\n\t* gcc.dg/analyzer/write-to-string-literal-3.c: New test.\n\t* gcc.dg/analyzer/write-to-string-literal-4.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "62ead60a21c9cc25db4ba9f9b11a5433657ffeef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62ead60a21c9cc25db4ba9f9b11a5433657ffeef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6eaf90c64f91553c8002f6ee401785a8bc6f94c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6eaf90c64f91553c8002f6ee401785a8bc6f94c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6eaf90c64f91553c8002f6ee401785a8bc6f94c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6eaf90c64f91553c8002f6ee401785a8bc6f94c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "708646de75cba2e3855bde09d21816ca66239a67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/708646de75cba2e3855bde09d21816ca66239a67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/708646de75cba2e3855bde09d21816ca66239a67"}], "stats": {"total": 244, "additions": 244, "deletions": 0}, "files": [{"sha": "5760ff709386dc465a779e8af720a3656daa7824", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6eaf90c64f91553c8002f6ee401785a8bc6f94c/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6eaf90c64f91553c8002f6ee401785a8bc6f94c/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=b6eaf90c64f91553c8002f6ee401785a8bc6f94c", "patch": "@@ -1583,6 +1583,61 @@ region_model::purge_state_involving (const svalue *sval,\n     ctxt->purge_state_involving (sval);\n }\n \n+/* Check CALL a call to external function CALLEE_FNDECL based on\n+   any __attribute__ ((access, ....) on the latter, complaining to\n+   CTXT about any issues.\n+\n+   Currently we merely call check_region_for_write on any regions\n+   pointed to by arguments marked with a \"write_only\" or \"read_write\"\n+   attribute.  */\n+\n+void\n+region_model::\n+check_external_function_for_access_attr (const gcall *call,\n+\t\t\t\t\t tree callee_fndecl,\n+\t\t\t\t\t region_model_context *ctxt) const\n+{\n+  gcc_assert (call);\n+  gcc_assert (callee_fndecl);\n+  gcc_assert (ctxt);\n+\n+  tree fntype = TREE_TYPE (callee_fndecl);\n+  if (!fntype)\n+    return;\n+\n+  if (!TYPE_ATTRIBUTES (fntype))\n+    return;\n+\n+  /* Initialize a map of attribute access specifications for arguments\n+     to the function call.  */\n+  rdwr_map rdwr_idx;\n+  init_attr_rdwr_indices (&rdwr_idx, TYPE_ATTRIBUTES (fntype));\n+\n+  unsigned argno = 0;\n+\n+  for (tree iter = TYPE_ARG_TYPES (fntype); iter;\n+       iter = TREE_CHAIN (iter), ++argno)\n+    {\n+      const attr_access* access = rdwr_idx.get (argno);\n+      if (!access)\n+\tcontinue;\n+\n+      /* Ignore any duplicate entry in the map for the size argument.  */\n+      if (access->ptrarg != argno)\n+\tcontinue;\n+\n+      if (access->mode == access_write_only\n+\t  || access->mode == access_read_write)\n+\t{\n+\t  tree ptr_tree = gimple_call_arg (call, access->ptrarg);\n+\t  const svalue *ptr_sval = get_rvalue (ptr_tree, ctxt);\n+\t  const region *reg = deref_rvalue (ptr_sval, ptr_tree, ctxt);\n+\t  check_region_for_write (reg, ctxt);\n+\t  /* We don't use the size arg for now.  */\n+\t}\n+    }\n+}\n+\n /* Handle a call CALL to a function with unknown behavior.\n \n    Traverse the regions in this model, determining what regions are\n@@ -1598,6 +1653,9 @@ region_model::handle_unrecognized_call (const gcall *call,\n {\n   tree fndecl = get_fndecl_for_call (call, ctxt);\n \n+  if (fndecl && ctxt)\n+    check_external_function_for_access_attr (call, fndecl, ctxt);\n+\n   reachable_regions reachable_regs (this);\n \n   /* Determine the reachable regions and their mutability.  */"}, {"sha": "788d0c22bca144848497a4b7daefe39a83a0d9ca", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6eaf90c64f91553c8002f6ee401785a8bc6f94c/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6eaf90c64f91553c8002f6ee401785a8bc6f94c/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=b6eaf90c64f91553c8002f6ee401785a8bc6f94c", "patch": "@@ -846,6 +846,9 @@ class region_model\n \t\t\t      region_model_context *ctxt) const;\n \n   void check_call_args (const call_details &cd) const;\n+  void check_external_function_for_access_attr (const gcall *call,\n+\t\t\t\t\t\ttree callee_fndecl,\n+\t\t\t\t\t\tregion_model_context *ctxt) const;\n \n   /* Storing this here to avoid passing it around everywhere.  */\n   region_model_manager *const m_mgr;"}, {"sha": "d0f2f29e985b219bcce27982cc58d2cb74ff86fc", "filename": "gcc/testsuite/gcc.dg/analyzer/write-to-const-2.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6eaf90c64f91553c8002f6ee401785a8bc6f94c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-const-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6eaf90c64f91553c8002f6ee401785a8bc6f94c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-const-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-const-2.c?ref=b6eaf90c64f91553c8002f6ee401785a8bc6f94c", "patch": "@@ -0,0 +1,60 @@\n+typedef __SIZE_TYPE__ size_t;\n+\n+void read_only (void *)\n+  __attribute__ ((access (read_only, 1)));\n+void write_only (void *)\n+  __attribute__ ((access (write_only, 1)));\n+void read_write (void *)\n+  __attribute__ ((access (read_write, 1)));\n+void none (void *)\n+  __attribute__ ((access (none, 1)));\n+void read_only_with_size (void *, size_t)\n+  __attribute__ ((access (read_only, 1, 2)));\n+void write_only_with_size (void *, size_t)\n+  __attribute__ ((access (write_only, 1, 2)));\n+void read_write_with_size (void *, size_t)\n+  __attribute__ ((access (read_write, 1, 2)));\n+void none_with_size (void *, size_t)\n+  __attribute__ ((access (none, 1, 2)));\n+\n+const char buf[5] = { 0 }; /* { dg-message \"declared here\" } */\n+\n+void test_read_only (void)\n+{\n+  read_only ((char *)buf);\n+}\n+\n+void test_write_only (void)\n+{\n+  write_only ((char *)buf); /* { dg-warning \"write to 'const' object 'buf'\" } */\n+}\n+\n+void test_read_write (void)\n+{\n+  read_write ((char *)buf); /* { dg-warning \"write to 'const' object 'buf'\" } */\n+}\n+\n+void test_none (void)\n+{\n+  none ((char *)buf);\n+}\n+\n+void test_read_only_with_size (void)\n+{\n+  read_only_with_size ((char *)buf, sizeof (buf));\n+}\n+\n+void test_write_only_with_size (void)\n+{\n+  write_only_with_size ((char *)buf, sizeof (buf)); /* { dg-warning \"write to 'const' object 'buf'\" } */\n+}\n+\n+void test_read_write_with_size (void)\n+{\n+  read_write_with_size ((char *)buf, sizeof (buf)); /* { dg-warning \"write to 'const' object 'buf'\" } */\n+}\n+\n+void test_none_with_size (void)\n+{\n+  none_with_size ((char *)buf, sizeof (buf));\n+}"}, {"sha": "38374ddf9e47ff256bf5d57b7880ab5373b3bd4b", "filename": "gcc/testsuite/gcc.dg/analyzer/write-to-function-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6eaf90c64f91553c8002f6ee401785a8bc6f94c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-function-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6eaf90c64f91553c8002f6ee401785a8bc6f94c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-function-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-function-1.c?ref=b6eaf90c64f91553c8002f6ee401785a8bc6f94c", "patch": "@@ -0,0 +1,15 @@\n+typedef __SIZE_TYPE__ size_t;\n+\n+int getrandom (void *__buffer, size_t __length,\n+\t       unsigned int __flags)\n+  __attribute__ ((access (__write_only__, 1, 2)));\n+\n+#define GRND_RANDOM 0x02\n+\n+void test (void)\n+{\n+  char buf[16];\n+\n+  if (getrandom(test, 16, GRND_RANDOM)) /* { dg-warning \"write to function 'test'\" } */\n+    __builtin_printf(\"%s\\n\", buf);\n+}"}, {"sha": "e5906cd5546104f1192e04641b87654062a57d5d", "filename": "gcc/testsuite/gcc.dg/analyzer/write-to-string-literal-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6eaf90c64f91553c8002f6ee401785a8bc6f94c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6eaf90c64f91553c8002f6ee401785a8bc6f94c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-2.c?ref=b6eaf90c64f91553c8002f6ee401785a8bc6f94c", "patch": "@@ -0,0 +1,19 @@\n+typedef __SIZE_TYPE__ size_t;\n+\n+int getrandom (void *__buffer, size_t __length,\n+\t       unsigned int __flags)\n+  __attribute__ ((access (__write_only__, 1, 2)));\n+\n+#define GRND_RANDOM 0x02\n+\n+const char *test = \"test\";\n+\n+int main(void)\n+{\n+\tconst char buf[5] = { 0 };\n+\n+\tif (getrandom((char *)test, sizeof(buf), GRND_RANDOM)) /* { dg-warning \"write to string literal\" } */\n+\t\t__builtin_printf(\"%s\\n\", buf);\n+\n+\treturn 0;\n+}"}, {"sha": "7f4fb4f3aa0eef732c6772053ea767ba4ca4e754", "filename": "gcc/testsuite/gcc.dg/analyzer/write-to-string-literal-3.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6eaf90c64f91553c8002f6ee401785a8bc6f94c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6eaf90c64f91553c8002f6ee401785a8bc6f94c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-3.c?ref=b6eaf90c64f91553c8002f6ee401785a8bc6f94c", "patch": "@@ -0,0 +1,66 @@\n+typedef __SIZE_TYPE__ size_t;\n+\n+void read_only (void *)\n+  __attribute__ ((access (read_only, 1)));\n+void write_only (void *)\n+  __attribute__ ((access (write_only, 1)));\n+void read_write (void *)\n+  __attribute__ ((access (read_write, 1)));\n+void none (void *)\n+  __attribute__ ((access (none, 1)));\n+void read_only_with_size (void *, size_t)\n+  __attribute__ ((access (read_only, 1, 2)));\n+void write_only_with_size (void *, size_t)\n+  __attribute__ ((access (write_only, 1, 2)));\n+void read_write_with_size (void *, size_t)\n+  __attribute__ ((access (read_write, 1, 2)));\n+void none_with_size (void *, size_t)\n+  __attribute__ ((access (none, 1, 2)));\n+\n+void test_read_only (void)\n+{\n+  const char *str = \"hello world\";\n+  read_only ((char *)str);\n+}\n+\n+void test_write_only (void)\n+{\n+  const char *str = \"hello world\";\n+  write_only ((char *)str); /* { dg-warning \"write to string literal\" } */\n+}\n+\n+void test_read_write (void)\n+{\n+  const char *str = \"hello world\";\n+  read_write ((char *)str); /* { dg-warning \"write to string literal\" } */\n+}\n+\n+void test_none (void)\n+{\n+  const char *str = \"hello world\";\n+  none ((char *)str);\n+}\n+\n+void test_read_only_with_size (void)\n+{\n+  const char *str = \"hello world\";\n+  read_only_with_size ((char *)str, sizeof (str));\n+}\n+\n+void test_write_only_with_size (void)\n+{\n+  const char *str = \"hello world\";\n+  write_only_with_size ((char *)str, sizeof (str)); /* { dg-warning \"write to string literal\" } */\n+}\n+\n+void test_read_write_with_size (void)\n+{\n+  const char *str = \"hello world\";\n+  read_write_with_size ((char *)str, sizeof (str)); /* { dg-warning \"write to string literal\" } */\n+}\n+\n+void test_none_with_size (void)\n+{\n+  const char *str = \"hello world\";\n+  none_with_size ((char *)str, sizeof (str));\n+}"}, {"sha": "3d3270ffdbba1f80f9f2ce8b187b9875f578481e", "filename": "gcc/testsuite/gcc.dg/analyzer/write-to-string-literal-4.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6eaf90c64f91553c8002f6ee401785a8bc6f94c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6eaf90c64f91553c8002f6ee401785a8bc6f94c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-4.c?ref=b6eaf90c64f91553c8002f6ee401785a8bc6f94c", "patch": "@@ -0,0 +1,23 @@\n+typedef __SIZE_TYPE__ size_t;\n+\n+int getrandom (void *__buffer, size_t __length,\n+\t       unsigned int __flags)\n+  __attribute__ ((access (__write_only__, 1, 2)));\n+\n+#define GRND_RANDOM 0x02\n+\n+void test (int flag)\n+{\n+  char *buf;\n+\n+  if (flag)\n+    buf = __builtin_malloc (1024);\n+  else\n+    buf = (char *)\"\"; /* { dg-message \"here\" } */\n+\n+  if (getrandom(buf, 16, GRND_RANDOM)) /* { dg-warning \"write to string literal\" } */\n+    __builtin_printf(\"%s\\n\", buf);\n+\n+  if (flag)\n+    __builtin_free (buf);\n+}"}]}