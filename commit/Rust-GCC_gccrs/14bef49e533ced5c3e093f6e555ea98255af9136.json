{"sha": "14bef49e533ced5c3e093f6e555ea98255af9136", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRiZWY0OWU1MzNjZWQ1YzNlMDkzZjZlNTU1ZWE5ODI1NWFmOTEzNg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2011-03-19T12:09:27Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2011-03-19T12:09:27Z"}, "message": "re PR libfortran/47439 (Fun with scratch files on Windows  MKTEMP only allows for 26 files)\n\n\tPR libfortran/47439\n\n\t* io/unix.c (tempfile): Work around poor mktemp() implementations.\n\n\t* gfortran.dg/scratch_1.f90: New test.\n\nFrom-SVN: r171178", "tree": {"sha": "8daf711d7f6d8b47bf84824ba1beb10f9e16069d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8daf711d7f6d8b47bf84824ba1beb10f9e16069d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14bef49e533ced5c3e093f6e555ea98255af9136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14bef49e533ced5c3e093f6e555ea98255af9136", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14bef49e533ced5c3e093f6e555ea98255af9136", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14bef49e533ced5c3e093f6e555ea98255af9136/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bd4cd72af4b48da82c1bb4d38a5a5532cde1033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bd4cd72af4b48da82c1bb4d38a5a5532cde1033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bd4cd72af4b48da82c1bb4d38a5a5532cde1033"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "7ac4d78a77d6251e1e2d3d4981d8174c412b7c41", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14bef49e533ced5c3e093f6e555ea98255af9136/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14bef49e533ced5c3e093f6e555ea98255af9136/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14bef49e533ced5c3e093f6e555ea98255af9136", "patch": "@@ -1,3 +1,8 @@\n+2011-03-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR libfortran/47439\n+\t* gfortran.dg/scratch_1.f90: New test.\n+\n 2011-03-18  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/c1x-typedef-1.c: Expect errors for redefinitions of"}, {"sha": "32bf0c45a1dd0bdaf57bb546b47052d9c22dd582", "filename": "gcc/testsuite/gfortran.dg/scratch_1.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14bef49e533ced5c3e093f6e555ea98255af9136/gcc%2Ftestsuite%2Fgfortran.dg%2Fscratch_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14bef49e533ced5c3e093f6e555ea98255af9136/gcc%2Ftestsuite%2Fgfortran.dg%2Fscratch_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fscratch_1.f90?ref=14bef49e533ced5c3e093f6e555ea98255af9136", "patch": "@@ -0,0 +1,8 @@\n+! { dg-do run }\n+! Check that we can open more than 26 scratch files concurrently\n+  integer :: i\n+  do i = 1, 3000\n+    print *, i\n+    open(100+i,status=\"scratch\")\n+  end do\n+end"}, {"sha": "70cf85b42a6371f9a09fc2e741da5c2dfdc45d02", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14bef49e533ced5c3e093f6e555ea98255af9136/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14bef49e533ced5c3e093f6e555ea98255af9136/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=14bef49e533ced5c3e093f6e555ea98255af9136", "patch": "@@ -1,3 +1,8 @@\n+2011-03-19  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR libfortran/47439\n+\t* io/unix.c (tempfile): Work around poor mktemp() implementations.\n+\n 2011-03-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR libfortran/47883"}, {"sha": "edccdd6397a3f002e26c6b06891dc0d0989a1874", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14bef49e533ced5c3e093f6e555ea98255af9136/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14bef49e533ced5c3e093f6e555ea98255af9136/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=14bef49e533ced5c3e093f6e555ea98255af9136", "patch": "@@ -1022,6 +1022,12 @@ tempfile (st_parameter_open *opp)\n   char *template;\n   const char *slash = \"/\";\n   int fd;\n+  size_t tempdirlen;\n+\n+#ifndef HAVE_MKSTEMP\n+  int count;\n+  size_t slashlen;\n+#endif\n \n   tempdir = getenv (\"GFORTRAN_TMPDIR\");\n #ifdef __MINGW32__\n@@ -1046,16 +1052,19 @@ tempfile (st_parameter_open *opp)\n   if (tempdir == NULL)\n     tempdir = DEFAULT_TEMPDIR;\n #endif\n+\n   /* Check for special case that tempdir contains slash\n      or backslash at end.  */\n-  if (*tempdir == 0 || tempdir[strlen (tempdir) - 1] == '/'\n+  tempdirlen = strlen (tempdir);\n+  if (*tempdir == 0 || tempdir[tempdirlen - 1] == '/'\n #ifdef __MINGW32__\n-      || tempdir[strlen (tempdir) - 1] == '\\\\'\n+      || tempdir[tempdirlen - 1] == '\\\\'\n #endif\n      )\n     slash = \"\";\n \n-  template = get_mem (strlen (tempdir) + 20);\n+  // Take care that the template is longer in the mktemp() branch.\n+  template = get_mem (tempdirlen + 23);\n \n #ifdef HAVE_MKSTEMP\n   sprintf (template, \"%s%sgfortrantmpXXXXXX\", tempdir, slash);\n@@ -1064,11 +1073,30 @@ tempfile (st_parameter_open *opp)\n \n #else /* HAVE_MKSTEMP */\n   fd = -1;\n+  count = 0;\n+  slashlen = strlen (slash);\n   do\n     {\n-      sprintf (template, \"%s%sgfortrantmpXXXXXX\", tempdir, slash);\n+      sprintf (template, \"%s%sgfortrantmpaaaXXXXXX\", tempdir, slash);\n+      if (count > 0)\n+\t{\n+\t  int c = count;\n+\t  template[tempdirlen + slashlen + 13] = 'a' + (c% 26);\n+\t  c /= 26;\n+\t  template[tempdirlen + slashlen + 12] = 'a' + (c % 26);\n+\t  c /= 26;\n+\t  template[tempdirlen + slashlen + 11] = 'a' + (c % 26);\n+\t  if (c >= 26)\n+\t    break;\n+\t}\n+\n       if (!mktemp (template))\n-\tbreak;\n+      {\n+\terrno = EEXIST;\n+\tcount++;\n+\tcontinue;\n+      }\n+\n #if defined(HAVE_CRLF) && defined(O_BINARY)\n       fd = open (template, O_RDWR | O_CREAT | O_EXCL | O_BINARY,\n \t\t S_IREAD | S_IWRITE);"}]}