{"sha": "dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM3MDNkNzBlYzdiYzMwMzk3NDFjMzgwZWExZGQwYTdjMTRmN2VlMg==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2017-01-10T20:37:00Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2017-01-10T20:37:00Z"}, "message": "extend.texi: Tweak formatting to fix overfull hbox warnings.\n\n2017-01-10  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/extend.texi: Tweak formatting to fix overfull hbox warnings.\n\t* doc/invoke.texi: Likewise.\n\t* doc/md.texi: Likewise.\n\t* doc/objc.texi: Likewise.\n\nFrom-SVN: r244286", "tree": {"sha": "817b94e6f5601f92f8e3d959c1a849632cf920f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/817b94e6f5601f92f8e3d959c1a849632cf920f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e363df3fd372a6423258cd9138e85a44a1ab224b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e363df3fd372a6423258cd9138e85a44a1ab224b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e363df3fd372a6423258cd9138e85a44a1ab224b"}], "stats": {"total": 91, "additions": 57, "deletions": 34}, "files": [{"sha": "270d169e62ac4481119430fb9757c48a689a0941", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2", "patch": "@@ -1,3 +1,10 @@\n+2017-01-10  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/extend.texi: Tweak formatting to fix overfull hbox warnings.\n+\t* doc/invoke.texi: Likewise.\n+\t* doc/md.texi: Likewise.\n+\t* doc/objc.texi: Likewise.\n+\n 2017-01-10  Joshua Conner  <joshconner@google.com>\n \n \t* config/arm/fuchsia-elf.h: New file."}, {"sha": "6be113cb9c133c72dba5bb97b5a5fe61fc802604", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2", "patch": "@@ -5943,10 +5943,10 @@ at all.  Just use an appropriate linker description file like outlined below.\n   @{ ...\n   @} > text\n   /* Leave .rodata in flash and add an offset of 0x4000 to all\n-     addresses so that respective objects can be accessed by LD\n-     instructions and open coded C/C++.  This means there is no\n-     need for progmem in the source and no overhead by read-only\n-     data in RAM.  */\n+     addresses so that respective objects can be accessed by\n+     LD instructions and open coded C/C++.  This means there\n+     is no need for progmem in the source and no overhead by\n+     read-only data in RAM.  */\n   .rodata ADDR(.text) + SIZEOF (.text) + 0x4000 :\n   @{\n     *(.rodata)\n@@ -8687,8 +8687,8 @@ top:\n With no modifiers, this is what the output from the operands would be for the \n @samp{att} and @samp{intel} dialects of assembler:\n \n-@multitable {Operand} {masm=att} {OFFSET FLAT:.L2}\n-@headitem Operand @tab masm=att @tab masm=intel\n+@multitable {Operand} {$.L2} {OFFSET FLAT:.L2}\n+@headitem Operand @tab @samp{att} @tab @samp{intel}\n @item @code{%0}\n @tab @code{%eax}\n @tab @code{eax}\n@@ -8702,8 +8702,8 @@ With no modifiers, this is what the output from the operands would be for the\n \n The table below shows the list of supported modifiers and their effects.\n \n-@multitable {Modifier} {Print the opcode suffix for the size of th} {Operand} {masm=att} {masm=intel}\n-@headitem Modifier @tab Description @tab Operand @tab @option{masm=att} @tab @option{masm=intel}\n+@multitable {Modifier} {Print the opcode suffix for the size of th} {Operand} {@samp{att}} {@samp{intel}}\n+@headitem Modifier @tab Description @tab Operand @tab @samp{att} @tab @samp{intel}\n @item @code{z}\n @tab Print the opcode suffix for the size of the current integer operand (one of @code{b}/@code{w}/@code{l}/@code{q}).\n @tab @code{%z0}\n@@ -12727,7 +12727,9 @@ points to.  Counting starts at @code{0}.\n If the address does not point to flash memory, return @code{-1}.\n \n @smallexample\n-unsigned char __builtin_avr_insert_bits (unsigned long map, unsigned char bits, unsigned char val)\n+unsigned char __builtin_avr_insert_bits (unsigned long map,\n+                                         unsigned char bits,\n+                                         unsigned char val)\n @end smallexample\n \n @noindent\n@@ -18128,13 +18130,16 @@ __vector long long int\n vec_extract_sig (__vector double source);\n \n __vector float\n-vec_insert_exp (__vector unsigned int significands,  __vector unsigned int exponents);\n+vec_insert_exp (__vector unsigned int significands,\n+                __vector unsigned int exponents);\n __vector double\n vec_insert_exp (__vector unsigned long long int significands,\n                 __vector unsigned long long int exponents);\n \n-__vector int vec_test_data_class (__vector float source, unsigned int condition);\n-__vector long long int vec_test_data_class (__vector double source, unsigned int condition);\n+__vector int vec_test_data_class (__vector float source,\n+                                  unsigned int condition);\n+__vector long long int vec_test_data_class (__vector double source,\n+                                            unsigned int condition);\n @end smallexample\n \n The @code{vec_extract_sig} and @code{vec_extract_exp} built-in\n@@ -18229,9 +18234,9 @@ vector unsigned int __builtin_crypto_vshasigmaw (vector unsigned int,\n                                                  int, int);\n @end smallexample\n \n-The second argument to the @var{__builtin_crypto_vshasigmad} and\n-@var{__builtin_crypto_vshasigmaw} builtin functions must be a constant\n-integer that is 0 or 1.  The third argument to these builtin functions\n+The second argument to @var{__builtin_crypto_vshasigmad} and\n+@var{__builtin_crypto_vshasigmaw} must be a constant\n+integer that is 0 or 1.  The third argument to these built-in functions\n must be a constant integer in the range of 0 to 15.\n \n If the ISA 3.0 instruction set additions \n@@ -20454,8 +20459,10 @@ void __builtin_ia32_xsaveopt64 (void *, long long)\n The following built-in functions are available when @option{-mtbm} is used.\n Both of them generate the immediate form of the bextr machine instruction.\n @smallexample\n-unsigned int __builtin_ia32_bextri_u32 (unsigned int, const unsigned int);\n-unsigned long long __builtin_ia32_bextri_u64 (unsigned long long, const unsigned long long);\n+unsigned int __builtin_ia32_bextri_u32 (unsigned int,\n+                                        const unsigned int);\n+unsigned long long __builtin_ia32_bextri_u64 (unsigned long long,\n+                                              const unsigned long long);\n @end smallexample\n \n "}, {"sha": "9c77db25e77634f76f2410a731dea70fd95b4279", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2", "patch": "@@ -3420,8 +3420,8 @@ for 88-color and 256-color modes background colors.\n \n The default @env{GCC_COLORS} is\n @smallexample\n-error=01;31:warning=01;35:note=01;36:range1=32:range2=34:locus=01:quote=01:\\\n-fixit-insert=32:fixit-delete=31:\\\n+error=01;31:warning=01;35:note=01;36:range1=32:range2=34:locus=01:\\\n+quote=01:fixit-insert=32:fixit-delete=31:\\\n diff-filename=01:diff-hunk=32:diff-delete=31:diff-insert=32\n @end smallexample\n @noindent\n@@ -3740,7 +3740,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wimplicit-int @r{(C and Objective-C only)} @gol\n -Wimplicit-function-declaration @r{(C and Objective-C only)} @gol\n -Winit-self @r{(only for C++)} @gol\n--Wlogical-not-parentheses\n+-Wlogical-not-parentheses @gol\n -Wmain @r{(only for C/ObjC and unless} @option{-ffreestanding}@r{)}  @gol\n -Wmaybe-uninitialized @gol\n -Wmemset-elt-size @gol\n@@ -10917,14 +10917,11 @@ ThreadSanitizer and UndefinedBehaviorSanitizer, while default value for\n AddressSanitizer is @code{halt_on_error=1}. This can be overridden through\n setting the @code{halt_on_error} flag in the corresponding environment variable.\n \n-Syntax without explicit @var{opts} parameter is deprecated.  It is equivalent to\n-@smallexample\n--fsanitize-recover=undefined,float-cast-overflow,float-divide-by-zero,bounds-strict\n-@end smallexample\n-@noindent\n-Similarly @option{-fno-sanitize-recover} is equivalent to\n+Syntax without an explicit @var{opts} parameter is deprecated.  It is\n+equivalent to specifying an @var{opts} list of:\n+\n @smallexample\n--fno-sanitize-recover=undefined,float-cast-overflow,float-divide-by-zero,bounds-strict\n+undefined,float-cast-overflow,float-divide-by-zero,bounds-strict\n @end smallexample\n \n @item -fsanitize-address-use-after-scope"}, {"sha": "11266d7dd3f67501ec8ad3525c666c21ccccdb06", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2", "patch": "@@ -2997,7 +2997,7 @@ Floating point register (containing 32-bit value)\n Altivec vector register\n \n @item wa\n-Any VSX register if the -mvsx option was used or NO_REGS.\n+Any VSX register if the @option{-mvsx} option was used or NO_REGS.\n \n When using any of the register constraints (@code{wa}, @code{wd},\n @code{wf}, @code{wg}, @code{wh}, @code{wi}, @code{wj}, @code{wk},\n@@ -3010,31 +3010,43 @@ is an operand of a VSX instruction that expects VSX register\n numbering.\n \n @smallexample\n-asm (\"xvadddp %x0,%x1,%x2\" : \"=wa\" (v1) : \"wa\" (v2), \"wa\" (v3));\n+asm (\"xvadddp %x0,%x1,%x2\"\n+     : \"=wa\" (v1)\n+     : \"wa\" (v2), \"wa\" (v3));\n @end smallexample\n \n+@noindent\n is correct, but:\n \n @smallexample\n-asm (\"xvadddp %0,%1,%2\" : \"=wa\" (v1) : \"wa\" (v2), \"wa\" (v3));\n+asm (\"xvadddp %0,%1,%2\" \n+     : \"=wa\" (v1) \n+     : \"wa\" (v2), \"wa\" (v3));\n @end smallexample\n \n+@noindent\n is not correct.\n \n If an instruction only takes Altivec registers, you do not want to use\n @code{%x<n>}.\n \n @smallexample\n-asm (\"xsaddqp %0,%1,%2\" : \"=v\" (v1) : \"v\" (v2), \"v\" (v3));\n+asm (\"xsaddqp %0,%1,%2\"\n+     : \"=v\" (v1)\n+     : \"v\" (v2), \"v\" (v3));\n @end smallexample\n \n+@noindent\n is correct because the @code{xsaddqp} instruction only takes Altivec\n registers, while:\n \n @smallexample\n-asm (\"xsaddqp %x0,%x1,%x2\" : \"=v\" (v1) : \"v\" (v2), \"v\" (v3));\n+asm (\"xsaddqp %x0,%x1,%x2\" \n+     : \"=v\" (v1) \n+     : \"v\" (v2), \"v\" (v3));\n @end smallexample\n \n+@noindent\n is incorrect.\n \n @item wb"}, {"sha": "87eaf1b9bdbb1bd563624eae171d137dea0499a8", "filename": "gcc/doc/objc.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2/gcc%2Fdoc%2Fobjc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2/gcc%2Fdoc%2Fobjc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fobjc.texi?ref=dc703d70ec7bc3039741c380ea1dd0a7c14f7ee2", "patch": "@@ -381,7 +381,7 @@ compiler on an i386 machine:\n \n @sp 1\n \n-@multitable @columnfractions .25 .75\n+@multitable @columnfractions .60 .40\n @item Objective-C type\n @tab Compiler encoding\n @item\n@@ -404,7 +404,7 @@ struct @{\n @smallexample\n int a __attribute__ ((vector_size (16)));\n @end smallexample\n-@tab @code{![16,16i]} (alignment would depend on the machine)\n+@tab @code{![16,16i]} (alignment depends on the machine)\n @end multitable\n \n @sp 1"}]}