{"sha": "d617bce48cdc251c0b8c07713c03065d9c122aa2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYxN2JjZTQ4Y2RjMjUxYzBiOGMwNzcxM2MwMzA2NWQ5YzEyMmFhMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-02-06T22:40:18Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-02-06T22:40:18Z"}, "message": "re PR go/56172 (net FAILs on Solaris)\n\n\tPR go/56172\nnet: Fixes for select based pollster.\n\nMake Close work properly, mainly for testing.  Restart the\nselect if a descriptor is closed.\n\nFrom-SVN: r195823", "tree": {"sha": "c583f9846d43da4bd06b379bb1f0296b4b5a43f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c583f9846d43da4bd06b379bb1f0296b4b5a43f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d617bce48cdc251c0b8c07713c03065d9c122aa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d617bce48cdc251c0b8c07713c03065d9c122aa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d617bce48cdc251c0b8c07713c03065d9c122aa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d617bce48cdc251c0b8c07713c03065d9c122aa2/comments", "author": null, "committer": null, "parents": [{"sha": "b96299a1353eae165dc0693b4917b4d757675b9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b96299a1353eae165dc0693b4917b4d757675b9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b96299a1353eae165dc0693b4917b4d757675b9d"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "f5a55bb44a73e51df52fe712fb3b274b20ee634a", "filename": "libgo/go/net/fd_bsd.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d617bce48cdc251c0b8c07713c03065d9c122aa2/libgo%2Fgo%2Fnet%2Ffd_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d617bce48cdc251c0b8c07713c03065d9c122aa2/libgo%2Fgo%2Fnet%2Ffd_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ffd_bsd.go?ref=d617bce48cdc251c0b8c07713c03065d9c122aa2", "patch": "@@ -64,7 +64,7 @@ func (p *pollster) AddFD(fd int, mode int, repeat bool) (bool, error) {\n \treturn false, nil\n }\n \n-func (p *pollster) DelFD(fd int, mode int) {\n+func (p *pollster) DelFD(fd int, mode int) bool {\n \t// pollServer is locked.\n \n \tvar kmode int\n@@ -77,6 +77,7 @@ func (p *pollster) DelFD(fd int, mode int) {\n \t// EV_DELETE - delete event from kqueue list\n \tsyscall.SetKevent(ev, fd, kmode, syscall.EV_DELETE)\n \tsyscall.Kevent(p.kq, p.kbuf[:], nil, nil)\n+\treturn false\n }\n \n func (p *pollster) WaitFD(s *pollServer, nsec int64) (fd int, mode int, err error) {"}, {"sha": "8ecbff8bdf056fba9eb9087e3ea0ccf51d7697b7", "filename": "libgo/go/net/fd_linux.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d617bce48cdc251c0b8c07713c03065d9c122aa2/libgo%2Fgo%2Fnet%2Ffd_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d617bce48cdc251c0b8c07713c03065d9c122aa2/libgo%2Fgo%2Fnet%2Ffd_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ffd_linux.go?ref=d617bce48cdc251c0b8c07713c03065d9c122aa2", "patch": "@@ -114,7 +114,7 @@ func (p *pollster) StopWaiting(fd int, bits uint) {\n \t}\n }\n \n-func (p *pollster) DelFD(fd int, mode int) {\n+func (p *pollster) DelFD(fd int, mode int) bool {\n \t// pollServer is locked.\n \n \tif mode == 'r' {\n@@ -133,6 +133,7 @@ func (p *pollster) DelFD(fd int, mode int) {\n \t\t\ti++\n \t\t}\n \t}\n+\treturn false\n }\n \n func (p *pollster) WaitFD(s *pollServer, nsec int64) (fd int, mode int, err error) {"}, {"sha": "4103c57e2cbacfe22c73364ed0a069e2a4b1ea8e", "filename": "libgo/go/net/fd_select.go", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d617bce48cdc251c0b8c07713c03065d9c122aa2/libgo%2Fgo%2Fnet%2Ffd_select.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d617bce48cdc251c0b8c07713c03065d9c122aa2/libgo%2Fgo%2Fnet%2Ffd_select.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ffd_select.go?ref=d617bce48cdc251c0b8c07713c03065d9c122aa2", "patch": "@@ -7,6 +7,7 @@\n package net\n \n import (\n+\t\"errors\"\n \t\"os\"\n \t\"syscall\"\n )\n@@ -17,6 +18,7 @@ type pollster struct {\n \treadyReadFds, readyWriteFds  *syscall.FdSet\n \tnReady                       int\n \tlastFd                       int\n+\tclosed                       bool\n }\n \n func newpollster() (p *pollster, err error) {\n@@ -35,6 +37,10 @@ func newpollster() (p *pollster, err error) {\n func (p *pollster) AddFD(fd int, mode int, repeat bool) (bool, error) {\n \t// pollServer is locked.\n \n+\tif p.closed {\n+\t\treturn false, errors.New(\"pollster closed\")\n+\t}\n+\n \tif mode == 'r' {\n \t\tsyscall.FDSet(fd, p.readFds)\n \t} else {\n@@ -52,19 +58,23 @@ func (p *pollster) AddFD(fd int, mode int, repeat bool) (bool, error) {\n \treturn true, nil\n }\n \n-func (p *pollster) DelFD(fd int, mode int) {\n+func (p *pollster) DelFD(fd int, mode int) bool {\n \t// pollServer is locked.\n \n+\tif p.closed {\n+\t\treturn false\n+\t}\n+\n \tif mode == 'r' {\n \t\tif !syscall.FDIsSet(fd, p.readFds) {\n \t\t\tprint(\"Select unexpected fd=\", fd, \" for read\\n\")\n-\t\t\treturn\n+\t\t\treturn false\n \t\t}\n \t\tsyscall.FDClr(fd, p.readFds)\n \t} else {\n \t\tif !syscall.FDIsSet(fd, p.writeFds) {\n \t\t\tprint(\"Select unexpected fd=\", fd, \" for write\\n\")\n-\t\t\treturn\n+\t\t\treturn false\n \t\t}\n \t\tsyscall.FDClr(fd, p.writeFds)\n \t}\n@@ -73,6 +83,8 @@ func (p *pollster) DelFD(fd int, mode int) {\n \tsyscall.FDClr(fd, p.repeatFds)\n \n \t// We don't worry about maxFd here.\n+\n+\treturn true\n }\n \n func (p *pollster) WaitFD(s *pollServer, nsec int64) (fd int, mode int, err error) {\n@@ -89,6 +101,10 @@ func (p *pollster) WaitFD(s *pollServer, nsec int64) (fd int, mode int, err erro\n \t\tvar e error\n \t\tvar tmpReadFds, tmpWriteFds syscall.FdSet\n \t\tfor {\n+\t\t\tif p.closed {\n+\t\t\t\treturn -1, 0, errors.New(\"pollster closed\")\n+\t\t\t}\n+\n \t\t\t// Temporary syscall.FdSet's into which the values are copied\n \t\t\t// because select mutates the values.\n \t\t\ttmpReadFds = *p.readFds\n@@ -161,5 +177,6 @@ func (p *pollster) WaitFD(s *pollServer, nsec int64) (fd int, mode int, err erro\n }\n \n func (p *pollster) Close() error {\n+\tp.closed = true\n \treturn nil\n }"}, {"sha": "42b0c74f2184722c9eda5cf0f3a6158bd18b41b5", "filename": "libgo/go/net/fd_unix.go", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d617bce48cdc251c0b8c07713c03065d9c122aa2/libgo%2Fgo%2Fnet%2Ffd_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d617bce48cdc251c0b8c07713c03065d9c122aa2/libgo%2Fgo%2Fnet%2Ffd_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ffd_unix.go?ref=d617bce48cdc251c0b8c07713c03065d9c122aa2", "patch": "@@ -110,16 +110,24 @@ func (s *pollServer) AddFD(fd *netFD, mode int) error {\n // any I/O running on fd.  The caller must have locked\n // pollserver.\n func (s *pollServer) Evict(fd *netFD) {\n+\tdoWakeup := false\n \tif s.pending[fd.sysfd<<1] == fd {\n \t\ts.WakeFD(fd, 'r', errClosing)\n-\t\ts.poll.DelFD(fd.sysfd, 'r')\n+\t\tif s.poll.DelFD(fd.sysfd, 'r') {\n+\t\t\tdoWakeup = true\n+\t\t}\n \t\tdelete(s.pending, fd.sysfd<<1)\n \t}\n \tif s.pending[fd.sysfd<<1|1] == fd {\n \t\ts.WakeFD(fd, 'w', errClosing)\n-\t\ts.poll.DelFD(fd.sysfd, 'w')\n+\t\tif s.poll.DelFD(fd.sysfd, 'w') {\n+\t\t\tdoWakeup = true\n+\t\t}\n \t\tdelete(s.pending, fd.sysfd<<1|1)\n \t}\n+\tif doWakeup {\n+\t\ts.Wakeup()\n+\t}\n }\n \n var wakeupbuf [1]byte"}]}