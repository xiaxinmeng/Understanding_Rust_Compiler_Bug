{"sha": "5f6d38233069d3e17607cbde28bf413d73ea11ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY2ZDM4MjMzMDY5ZDNlMTc2MDdjYmRlMjhiZjQxM2Q3M2VhMTFjYQ==", "commit": {"author": {"name": "Dave Pitts", "email": "dpitts@cozx.com", "date": "2000-04-17T00:54:25Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-17T00:54:25Z"}, "message": "Makefile.in ($(srcdir)/c-parse.y: c-parse.in): Enclose the whole message in quotes.\n\n        * Makefile.in ($(srcdir)/c-parse.y: c-parse.in): Enclose the whole\n        message in quotes. Otherwise, IBM's make program treats the '#' as the\n        start of a comment and ignores the remainder of the line.\n\n        * c-lex.c (yylex): Change for EBCDIC, lower case characters preceed\n        upper case.\n        * cccp.c (initialize_char_syntax): Allow for holes in EBCDIC.\n        * cexp.y (initialize_random_junk): Likewise.\n        * cppfiles.c (find_include_file): Cast alloca return value.\n        * cppinit.c (initialize_standard_includes): Likewise.\n        * cpplib.c (cpp_define, cpp_undef): Likewise.\n        * defaults.h (ASM_OUTPUT_ASCII): Use ISPRINT.\n        * final.c (output_asm_insn): Allow for holes in EBCDIC.\n        * fold-const.c (CHARMASK): New.\n        (real_hex_to_f): Use it.\n        * real.c (CHARMASK): New.\n        (etoasc, asctoeg): Use it.\n        (asctoeg): EBCDIC lower case characters preceed upper case.\n\nFrom-SVN: r33192", "tree": {"sha": "3c8bb9a066d5c956f9d8bb26a8f15c3f4286bd4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c8bb9a066d5c956f9d8bb26a8f15c3f4286bd4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f6d38233069d3e17607cbde28bf413d73ea11ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f6d38233069d3e17607cbde28bf413d73ea11ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f6d38233069d3e17607cbde28bf413d73ea11ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f6d38233069d3e17607cbde28bf413d73ea11ca/comments", "author": {"login": "pittsdave", "id": 36642981, "node_id": "MDQ6VXNlcjM2NjQyOTgx", "avatar_url": "https://avatars.githubusercontent.com/u/36642981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pittsdave", "html_url": "https://github.com/pittsdave", "followers_url": "https://api.github.com/users/pittsdave/followers", "following_url": "https://api.github.com/users/pittsdave/following{/other_user}", "gists_url": "https://api.github.com/users/pittsdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/pittsdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pittsdave/subscriptions", "organizations_url": "https://api.github.com/users/pittsdave/orgs", "repos_url": "https://api.github.com/users/pittsdave/repos", "events_url": "https://api.github.com/users/pittsdave/events{/privacy}", "received_events_url": "https://api.github.com/users/pittsdave/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e13f6154aff4ee020e9e14b12d6a11b5e7353746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e13f6154aff4ee020e9e14b12d6a11b5e7353746", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e13f6154aff4ee020e9e14b12d6a11b5e7353746"}], "stats": {"total": 165, "additions": 110, "deletions": 55}, "files": [{"sha": "c629f81dcfe5c64a3859bd0888e00874f117d144", "filename": "gcc/ChangeLog", "status": "modified", "additions": 66, "deletions": 31, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f6d38233069d3e17607cbde28bf413d73ea11ca", "patch": "@@ -1,3 +1,38 @@\n+2000-04-12  Dave Pitts  <dpitts@cozx.com>\n+\n+\t* Makefile.in ($(srcdir)/c-parse.y: c-parse.in): Enclose the whole\n+\tmessage in quotes. Otherwise, IBM's make program treats the '#' as the\n+\tstart of a comment and ignores the remainder of the line.\n+\n+\t* c-lex.c (yylex): Change for EBCDIC, lower case characters preceed\n+\tupper case.\n+\t* cccp.c (initialize_char_syntax): Allow for holes in EBCDIC.\n+\t* cexp.y (initialize_random_junk): Likewise.\n+\t* cppfiles.c (find_include_file): Cast alloca return value.\n+\t* cppinit.c (initialize_standard_includes): Likewise.\n+\t* cpplib.c (cpp_define, cpp_undef): Likewise.\n+\t* defaults.h (ASM_OUTPUT_ASCII): Use ISPRINT.\n+\t* final.c (output_asm_insn): Allow for holes in EBCDIC.\n+\t* fold-const.c (CHARMASK): New.\n+\t(real_hex_to_f): Use it.\n+\t* real.c (CHARMASK): New.\n+\t(etoasc, asctoeg): Use it.\n+\t(asctoeg): EBCDIC lower case characters preceed upper case.\n+\n+\t* i370.c (mvs_add_label): Change spacing for coding conventions.\n+\t* i370.h (ASM_OUTPUT_CASE_LABEL): Change to the data CSECT for the\n+\toutputing case vectors.\n+\t(ASM_OUTPUT_CASE_END): New, put assembler back into code CSECT.\n+\t(ASM_OUTPUT_ADDR_VEC_ELT, ASM_OUTPUT_ADDR_DIFF_ELT): Remove page check,\n+\tsince vector in in the data CSECT.\n+\t(ASM_OUTPUT_REG_POP, ASM_OUTPUT_REG_PUSH): Restore to correct operation.        * i370.md (Many patterns): Put the length in the XL directives.\n+\t(movdi): Put back STM and MVC in definition.\n+\t(floatsidf2): Correct TARGET_ELF_ABI pattern and add back the LE370\n+\tpattern using the TCA.\n+\t* oe.h (CPP_SPEC): Added to allow trigraphs.\n+\t* xm-oe.h (HOST_BITS_PER_LONGLONG): Change to 32. IBM's compiler does\n+\tnot support the \"long long\" type.\n+\n 2000-04-16  Mark Mitchell  <mark@codesourcery.com>\n \n \t* config/mips/mips-protos.h (mips_legitimate_address_p): New\n@@ -39,9 +74,9 @@\n \n 2004-04-16  Neil Booth  <NeilB@earthling.net>\n \n-        * cpphash.h (SYNTAX_INCLUDE, SYNTAX_ASSERT, directive_handler): new.\n-        * cpplib.c: Add new syntax flags to directive table, and\n-        supporting macros.\n+\t* cpphash.h (SYNTAX_INCLUDE, SYNTAX_ASSERT, directive_handler): new.\n+\t* cpplib.c: Add new syntax flags to directive table, and\n+\tsupporting macros.\n \n 2000-04-15  Ulrich Drepper  <drepper@redhat.com>\n \n@@ -225,8 +260,8 @@ Fri Apr 14 10:54:22 2000  Jim Wilson  <wilson@cygnus.com>\n \n 2000-04-14  Richard Henderson  <rth@cygnus.com>\n \n-        * fold-const.c (extract_muldiv): Don't distribute and widen\n-        multiply across plus for non-sizetype unsigned types.\n+\t* fold-const.c (extract_muldiv): Don't distribute and widen\n+\tmultiply across plus for non-sizetype unsigned types.\n \n 2000-04-14  Richard Henderson  <rth@cygnus.com>\n \n@@ -254,7 +289,7 @@ Thu Apr 13 19:39:56 2000  Clinton Popetz  <cpopetz@cygnus.com>\n 2000-04-13  Andreas Jaeger  <aj@suse.de>\n \n \t* config/mips/mips.c (expand_block_move): Pass alignment\n-        argument to move_by_pieces in bits, not bytes.\n+\targument to move_by_pieces in bits, not bytes.\n \n \t* config/mips/linux.h (CPP_PREDEFINES): Also define __PIC__ and\n \t__pic__ for little endian.\n@@ -357,8 +392,8 @@ Wed Apr 12 15:54:11 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n Wed Apr 12 07:51:54 2000  Catherine Moore  <clm@cygnus.com>\n  \n-        * calls.c (emit_library_call_value_1): Change 3rd arg to\n-        locate_and_pad_parm to disregard the setting of partial.\n+\t* calls.c (emit_library_call_value_1): Change 3rd arg to\n+\tlocate_and_pad_parm to disregard the setting of partial.\n \n Wed Apr 12 08:47:38 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n@@ -3889,11 +3924,11 @@ Thu Mar 16 02:14:16 2000  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t2000-01-27  Clinton Popetz  <cpopetz@cygnus.com>\n \n-        * rs6000.c (rs6000_emit_load_toc_table): Use \"LCG\" and\n-        reload_toc_labelno for non-prologue TOC reloads.  Also, don't\n-        increment rs6000_pic_labelno here.\n-        (rs6000_emit_prologue): Pass TRUE to rs6000_emit_load_toc_table,\n-        and increment rs6000_pic_labelno here.\n+\t* rs6000.c (rs6000_emit_load_toc_table): Use \"LCG\" and\n+\treload_toc_labelno for non-prologue TOC reloads.  Also, don't\n+\tincrement rs6000_pic_labelno here.\n+\t(rs6000_emit_prologue): Pass TRUE to rs6000_emit_load_toc_table,\n+\tand increment rs6000_pic_labelno here.\n \n \t2000-01-24  Geoffrey Keating  <geoffk@cygnus.com>\n \n@@ -4072,29 +4107,29 @@ Thu Mar 16 02:14:16 2000  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t2000-01-07  David Edelsohn  <edelsohn@gnu.org>\n \n-        * rs6000.c (processor_target_table): Add power3 as alias for 630.\n-        * aix43.h: Revert Aug 2 change.\n-        (HAS_INIT_SECTION): Define, not visible yet.\n-        (LD_INIT_SWITCH): Define, not visible yet.\n-        * t-aix43 (MULTILIB_OPTIONS): Revert Aug 2 change.\n+\t* rs6000.c (processor_target_table): Add power3 as alias for 630.\n+\t* aix43.h: Revert Aug 2 change.\n+\t(HAS_INIT_SECTION): Define, not visible yet.\n+\t(LD_INIT_SWITCH): Define, not visible yet.\n+\t* t-aix43 (MULTILIB_OPTIONS): Revert Aug 2 change.\n \n \t2000-01-04  Joel Sherrill (joel@OARcorp.com>\n \n-        * config/rs6000/rtems.h: Include config/rtems.h.\n+\t* config/rs6000/rtems.h: Include config/rtems.h.\n \n \t2000-01-04  David Edelsohn  <edelsohn@gnu.org>\n \n-        * rs6000.h (HANDLE_PRAGMA_PACK): Define.\n-        (SLOW_UNALIGNED_ACCESS): Define.\n-        (CASE_VECTOR_MODE): Always use 32-bit offsets.\n-        (ASM_FILE_END): Generate 64-bit symbol in 64-bit mode.\n-        (EXTRA_SECTOIN_FUNCTIONS): Indent .csect pseudo-op.\n-        (toc_section): Likewise and .toc pseudo-op.\n-        (ASM_DECLARE_FUNCTION): Likewise.  Align text more strictly in\n-        64-bit mode.\n-        (TEXT_SECTION_ASM_OP): Likewise.\n-        (ASM_OUTPUT_ADD_VEC_ELT, ASM_OUTPUT_ADDR_DIFF_ELT): Always use\n-        32-bit offsets.\n+\t* rs6000.h (HANDLE_PRAGMA_PACK): Define.\n+\t(SLOW_UNALIGNED_ACCESS): Define.\n+\t(CASE_VECTOR_MODE): Always use 32-bit offsets.\n+\t(ASM_FILE_END): Generate 64-bit symbol in 64-bit mode.\n+\t(EXTRA_SECTOIN_FUNCTIONS): Indent .csect pseudo-op.\n+\t(toc_section): Likewise and .toc pseudo-op.\n+\t(ASM_DECLARE_FUNCTION): Likewise.  Align text more strictly in\n+\t64-bit mode.\n+\t(TEXT_SECTION_ASM_OP): Likewise.\n+\t(ASM_OUTPUT_ADD_VEC_ELT, ASM_OUTPUT_ADDR_DIFF_ELT): Always use\n+\t32-bit offsets.\n \n \t1999-12-17  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -4111,7 +4146,7 @@ Thu Mar 16 02:14:16 2000  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t2000-01-05  Franz Sirl <Franz.Sirl-kernel@lauterbach.com>\n \n-        * rs6000.h: Continue cleanup.\n+\t* rs6000.h: Continue cleanup.\n \t* aix.h: Likewise.\n \t* lynx.h: Likewise.\n \t* netware.h: Likewise."}, {"sha": "493d080581001ae3cd53b6462b1efb76a457e475", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=5f6d38233069d3e17607cbde28bf413d73ea11ca", "patch": "@@ -1360,7 +1360,7 @@ $(srcdir)/c-parse.y: c-parse.in\n $(srcdir)/c-gperf.h: c-parse.gperf\n \tgperf -L C -F ', 0, 0' -p -j1 -i 1 -g -o -t -G -N is_reserved_word \\\n \t   -k1,3,$$ $(srcdir)/c-parse.gperf >tmp-gperf.h || ( \\\n-\techo \"See \" $(website)/cvs.html#generated_files >&2 ; \\\n+\techo \"See $(website)/cvs.html#generated_files\" >&2 ; \\\n \texit 1 )\n \t $(SHELL) $(srcdir)/move-if-change tmp-gperf.h $(srcdir)/c-gperf.h\n "}, {"sha": "d7697067ac792414a606f9eebfe81f632248cbae", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=5f6d38233069d3e17607cbde28bf413d73ea11ca", "patch": "@@ -1625,7 +1625,7 @@ yylex ()\n \t\t    floatflag = AFTER_EXPON;\n \t\t    break;   /* start of exponent */\n \t\t  }\n-\t\telse if (c >= 'a')\n+\t\telse if (c >= 'a' && c <= 'f')\n \t\t  {\n \t\t    c = c - 'a' + 10;\n \t\t  }"}, {"sha": "9a023334409947eed8cdf5035ac67b7f8ba25ca0", "filename": "gcc/cccp.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=5f6d38233069d3e17607cbde28bf413d73ea11ca", "patch": "@@ -10249,10 +10249,13 @@ initialize_char_syntax ()\n    * refer to them.\n    */\n   for (i = 'a'; i <= 'z'; i++) {\n-    is_idchar[TOUPPER(i)] = 1;\n-    is_idchar[i] = 1;\n-    is_idstart[TOUPPER(i)] = 1;\n-    is_idstart[i] = 1;\n+    /* SKIP EBCIDIC holes, char must be a valid low case char */\n+    if (ISLOWER(i)) {\n+      is_idchar[TOUPPER(i)] = 1;\n+      is_idchar[i] = 1;\n+      is_idstart[TOUPPER(i)] = 1;\n+      is_idstart[i] = 1;\n+    }\n   }\n   for (i = '0'; i <= '9'; i++)\n     is_idchar[i] = 1;"}, {"sha": "83f4cede637595e2144f461eda718782eaf5d52e", "filename": "gcc/cexp.y", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Fcexp.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Fcexp.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcexp.y?ref=5f6d38233069d3e17607cbde28bf413d73ea11ca", "patch": "@@ -1114,10 +1114,13 @@ initialize_random_junk ()\n    * refer to them.\n    */\n   for (i = 'a'; i <= 'z'; i++) {\n-    ++is_idchar[TOUPPER(i)];\n-    ++is_idchar[i];\n-    ++is_idstart[TOUPPER(i)];\n-    ++is_idstart[i];\n+    /* SKIP EBCIDIC holes, char must be a valid low case char */\n+    if (ISLOWER(i)) {\n+      ++is_idchar[TOUPPER(i)];\n+      ++is_idchar[i];\n+      ++is_idstart[TOUPPER(i)];\n+      ++is_idstart[i];\n+    }\n   }\n   for (i = '0'; i <= '9'; i++)\n     ++is_idchar[i];"}, {"sha": "cc891d457298457dbf8e1625bdc91c2be598dca9", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=5f6d38233069d3e17607cbde28bf413d73ea11ca", "patch": "@@ -284,7 +284,7 @@ find_include_file (pfile, fname, search_start, ihash, before)\n   else\n     {\n       /* Search directory path, trying to open the file.  */\n-      name = alloca (strlen (fname) + pfile->max_include_len\n+      name = (char *) alloca (strlen (fname) + pfile->max_include_len\n \t\t     + 2 + INCLUDE_LEN_FUDGE);\n       do\n \t{"}, {"sha": "7d20b2c95c54dee0a2d68e617b88504b884365f9", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=5f6d38233069d3e17607cbde28bf413d73ea11ca", "patch": "@@ -795,7 +795,7 @@ initialize_standard_includes (pfile)\n      These have /usr/local/lib/gcc... replaced by specd_prefix.  */\n   if (specd_prefix != 0)\n     {\n-      char *default_prefix = alloca (sizeof GCC_INCLUDE_DIR - 7);\n+      char *default_prefix = (char *) alloca (sizeof GCC_INCLUDE_DIR - 7);\n       /* Remove the `include' from /usr/local/lib/gcc.../include.\n \t GCC_INCLUDE_DIR will always end in /include. */\n       int default_len = sizeof GCC_INCLUDE_DIR - 8;"}, {"sha": "98bd9335c90f798dae9d841cbd3f2a74fa26ca27", "filename": "gcc/cpplib.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=5f6d38233069d3e17607cbde28bf413d73ea11ca", "patch": "@@ -1705,7 +1705,7 @@ cpp_define (pfile, str)\n   if (p)\n     {\n       count = strlen (str) + 2;\n-      buf = alloca (count);\n+      buf = (char *) alloca (count);\n       memcpy (buf, str, count - 2);\n       buf[p - str] = ' ';\n       buf[count - 2] = '\\n';\n@@ -1714,7 +1714,7 @@ cpp_define (pfile, str)\n   else\n     {\n       count = strlen (str) + 4;\n-      buf = alloca (count);\n+      buf = (char *) alloca (count);\n       memcpy (buf, str, count - 4);\n       strcpy (&buf[count-4], \" 1\\n\");\n     }\n@@ -1734,7 +1734,7 @@ cpp_undef (pfile, macro)\n {\n   /* Copy the string so we can append a newline.  */\n   size_t len = strlen (macro);\n-  char *buf = alloca (len + 2);\n+  char *buf = (char *) alloca (len + 2);\n   memcpy (buf, macro, len);\n   buf[len]     = '\\n';\n   buf[len + 1] = '\\0';"}, {"sha": "b551fea125f10896d74b9d0c8923fbd9cddf40fc", "filename": "gcc/defaults.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=5f6d38233069d3e17607cbde28bf413d73ea11ca", "patch": "@@ -80,7 +80,7 @@ do { ASM_OUTPUT_LABEL(FILE,LABEL_ALTERNATE_NAME (INSN)); } while (0)\n \t  register int c = p[i];\t\t\t\t\t      \\\n \t  if (c == '\\\"' || c == '\\\\')\t\t\t\t\t      \\\n \t    putc ('\\\\', asm_out_file);\t\t\t\t\t      \\\n-\t  if (c >= ' ' && c < 0177)\t\t\t\t\t      \\\n+\t  if (ISPRINT(c))\t\t\t\t\t\t      \\\n \t    putc (c, asm_out_file);\t\t\t\t\t      \\\n \t  else\t\t\t\t\t\t\t\t      \\\n \t    {\t\t\t\t\t\t\t\t      \\"}, {"sha": "1d4666ed764040dc701eea657f93c7dc72bb9691", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=5f6d38233069d3e17607cbde28bf413d73ea11ca", "patch": "@@ -3457,8 +3457,7 @@ output_asm_insn (template, operands)\n \t   Letters `acln' are implemented directly.\n \t   Other letters are passed to `output_operand' so that\n \t   the PRINT_OPERAND macro can define them.  */\n-\telse if ((*p >= 'a' && *p <= 'z')\n-\t\t || (*p >= 'A' && *p <= 'Z'))\n+\telse if (ISLOWER(*p) || ISUPPER(*p))\n \t  {\n \t    int letter = *p++;\n \t    c = atoi (p);"}, {"sha": "e0d0f00cb4e347cabf9e724c739d7b4851a3ba4b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5f6d38233069d3e17607cbde28bf413d73ea11ca", "patch": "@@ -106,6 +106,14 @@ static int count_cond\t\tPARAMS ((tree, int));\n #define BRANCH_COST 1\n #endif\n \n+#if defined(HOST_EBCDIC)\n+/* bit 8 is significant in EBCDIC */\n+#define CHARMASK 0xff\n+#else\n+#define CHARMASK 0x7f\n+#endif\n+\n+\n /* We know that A1 + B1 = SUM1, using 2's complement arithmetic and ignoring\n    overflow.  Suppose A, B and SUM have the same respective signs as A1, B1,\n    and SUM1.  Then this yields nonzero if overflow occurred during the\n@@ -1091,8 +1099,8 @@ real_hex_to_f (s, mode)\n        if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F')\n \t   || (c >= 'a' && c <= 'f'))\n \t {\n-\t   k = c & 0x7f;\n-\t   if (k >= 'a')\n+\t   k = c & CHARMASK;\n+\t   if (k >= 'a' && k <= 'f')\n \t     k = k - 'a' + 10;\n \t   else if (k >= 'A')\n \t     k = k - 'A' + 10;\n@@ -1137,7 +1145,7 @@ real_hex_to_f (s, mode)\n \t      The exponent field is a decimal integer.  */\n \t   while (ISDIGIT(*p))\n \t     {\n-\t       k = (*p++ & 0x7f) - '0';\n+\t       k = (*p++ & CHARMASK) - '0';\n \t       expon = 10 * expon + k;\n \t     }\n "}, {"sha": "2022aacbeb9436d4c00bd551bb1e530365812c25", "filename": "gcc/real.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6d38233069d3e17607cbde28bf413d73ea11ca/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=5f6d38233069d3e17607cbde28bf413d73ea11ca", "patch": "@@ -337,6 +337,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* The exponent of 1.0 */\n #define EXONE (0x3fff)\n \n+#if defined(HOST_EBCDIC)\n+/* bit 8 is significant in EBCDIC */\n+#define CHARMASK 0xff\n+#else\n+#define CHARMASK 0x7f\n+#endif\n+\n extern int extra_warnings;\n extern unsigned EMUSHORT ezero[], ehalf[], eone[], etwo[];\n extern unsigned EMUSHORT elog2[], esqrt2[];\n@@ -4981,7 +4988,7 @@ etoasc (x, string, ndigs)\n       /* Round up and propagate carry-outs */\n     roun:\n       --s;\n-      k = *s & 0x7f;\n+      k = *s & CHARMASK;\n       /* Carry out to most significant digit? */\n       if (k == '.')\n \t{\n@@ -5142,7 +5149,7 @@ asctoeg (ss, y, oprec)\n  nxtcom:\n   if (*s >= '0' && *s <= '9')\n     k = *s - '0';\n-  else if (*s >= 'a')\n+  else if (*s >= 'a' && *s <= 'f')\n     k = 10 + *s - 'a';\n   else\n     k = 10 + *s - 'A';\n@@ -5160,7 +5167,7 @@ asctoeg (ss, y, oprec)\n \t\t\t\t    || (*sp >= 'A' && *sp <= 'F'))))\n \t    ++sp;\n \t  /* Check for syntax error */\n-\t  c = *sp & 0x7f;\n+\t  c = *sp & CHARMASK;\n \t  if ((base != 10 || ((c != 'e') && (c != 'E')))\n \t      && (base != 16 || ((c != 'p') && (c != 'P')))\n \t      && (c != '\\0')"}]}