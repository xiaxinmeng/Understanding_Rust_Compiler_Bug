{"sha": "0e290c54ec1dcc5ca0c5091b8ccc85cc696d7336", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUyOTBjNTRlYzFkY2M1Y2EwYzUwOTFiOGNjYzg1Y2M2OTZkNzMzNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T15:41:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T15:41:27Z"}, "message": "[multiple changes]\n\n2014-11-20  Vasiliy Fofanov  <fofanov@adacore.com>\n\n\t* gnat_ugn.texi: New section on gnattest stubbing. Minor\n\treformatting.\n\n2014-11-20  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* s-taprop-vxworks.adb (Create_Task): Fix thread comparison.\n\tMinor reformatting.\n\nFrom-SVN: r217875", "tree": {"sha": "099b35d494916f36dd24cd03643e3c42cb113b22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/099b35d494916f36dd24cd03643e3c42cb113b22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e290c54ec1dcc5ca0c5091b8ccc85cc696d7336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e290c54ec1dcc5ca0c5091b8ccc85cc696d7336", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e290c54ec1dcc5ca0c5091b8ccc85cc696d7336", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e290c54ec1dcc5ca0c5091b8ccc85cc696d7336/comments", "author": null, "committer": null, "parents": [{"sha": "596f71394dcedd06ce87e4e7499168aba92d4c7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/596f71394dcedd06ce87e4e7499168aba92d4c7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/596f71394dcedd06ce87e4e7499168aba92d4c7c"}], "stats": {"total": 345, "additions": 253, "deletions": 92}, "files": [{"sha": "ecab635b0d132e98e2c25c7383473f9415ee122d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e290c54ec1dcc5ca0c5091b8ccc85cc696d7336/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e290c54ec1dcc5ca0c5091b8ccc85cc696d7336/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0e290c54ec1dcc5ca0c5091b8ccc85cc696d7336", "patch": "@@ -1,3 +1,13 @@\n+2014-11-20  Vasiliy Fofanov  <fofanov@adacore.com>\n+\n+\t* gnat_ugn.texi: New section on gnattest stubbing. Minor\n+\treformatting.\n+\n+2014-11-20  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* s-taprop-vxworks.adb (Create_Task): Fix thread comparison.\n+\tMinor reformatting.\n+\n 2014-11-20  Robert Dewar  <dewar@adacore.com>\n \n \t* s-tassta.adb, exp_aggr.adb, s-taskin.adb, exp_strm.adb: Minor"}, {"sha": "39f92612c959316d9d734b0f9750d40adfa9edfe", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 223, "deletions": 73, "changes": 296, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e290c54ec1dcc5ca0c5091b8ccc85cc696d7336/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e290c54ec1dcc5ca0c5091b8ccc85cc696d7336/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=0e290c54ec1dcc5ca0c5091b8ccc85cc696d7336", "patch": "@@ -4810,21 +4810,21 @@ individually controlled.  The warnings that are not turned on by this\n switch are:\n \n @itemize\n-@option{-gnatwd} (implicit dereferencing)\n-@option{-gnatw.d} (tag warnings with -gnatw switch)\n-@option{-gnatwh} (hiding)\n-@option{-gnatw.h} (holes in record layouts)\n-@option{-gnatw.k} (redefinition of names in standard)\n-@option{-gnatwl} (elaboration warnings)\n-@option{-gnatw.l} (inherited aspects)\n-@option{-gnatw.n} (atomic synchronization)\n-@option{-gnatwo} (address clause overlay)\n-@option{-gnatw.o} (values set by out parameters ignored)\n-@option{-gnatw.s} (overridden size clause)\n-@option{-gnatwt} (tracking of deleted conditional code)\n-@option{-gnatw.u} (unordered enumeration)\n-@option{-gnatw.w} (use of Warnings Off)\n-@option{-gnatw.y} (reasons for package needing body)\n+@item @option{-gnatwd} (implicit dereferencing)\n+@item @option{-gnatw.d} (tag warnings with -gnatw switch)\n+@item @option{-gnatwh} (hiding)\n+@item @option{-gnatw.h} (holes in record layouts)\n+@item @option{-gnatw.k} (redefinition of names in standard)\n+@item @option{-gnatwl} (elaboration warnings)\n+@item @option{-gnatw.l} (inherited aspects)\n+@item @option{-gnatw.n} (atomic synchronization)\n+@item @option{-gnatwo} (address clause overlay)\n+@item @option{-gnatw.o} (values set by out parameters ignored)\n+@item @option{-gnatw.s} (overridden size clause)\n+@item @option{-gnatwt} (tracking of deleted conditional code)\n+@item @option{-gnatw.u} (unordered enumeration)\n+@item @option{-gnatw.w} (use of Warnings Off)\n+@item @option{-gnatw.y} (reasons for package needing body)\n @end itemize\n \n All other optional warnings are turned on.\n@@ -6461,7 +6461,6 @@ A unary plus or minus may not be followed by a space.\n A vertical bar must be surrounded by spaces.\n @end itemize\n \n-@item\n Exactly one blank (and no other white space) must appear between\n a @code{not} token and a following @code{in} token.\n \n@@ -18971,6 +18970,18 @@ as well as a test driver infrastructure (harness). @command{gnattest} creates\n a skeleton for each visible subprogram in the packages under consideration when\n they do not exist already.\n \n+The user can choose to generate a single test driver\n+that will run all individual tests, or separate test drivers for each test. The\n+second option allows much greater flexibility in test execution environment,\n+allows to benefit from parallel tests execution to increase performance, and\n+provides stubbing support.\n+\n+@command{gnattest} also has a mode of operation where it acts as the test\n+aggregator when multiple test executables must be run, in particular when\n+the separate test drivers were generated. In this mode it handles individual\n+tests execution and upon completion reports the summary results of the test\n+run.\n+\n In order to process source files from a project, @command{gnattest} has to\n semantically analyze the sources. Therefore, test skeletons can only be\n generated for legal Ada units. If a unit is dependent on other units,\n@@ -18984,9 +18995,11 @@ the AUnit manual, deep knowledge of AUnit is not necessary for using gnattest.\n For correct operation of @command{gnattest}, AUnit should be installed and\n aunit.gpr must be on the project path. This happens automatically when Aunit\n is installed at its default location.\n+\n @menu\n * Running gnattest::\n-* Switches for gnattest::\n+* Switches for gnattest in framework generation mode::\n+* Switches for gnattest in tests execution mode::\n * Project Attributes for gnattest::\n * Simple Example::\n * Setting Up and Tearing Down the Testing Environment::\n@@ -18997,6 +19010,8 @@ is installed at its default location.\n * Tagged Types Substitutability Testing::\n * Testing with Contracts::\n * Additional Tests::\n+* Individual Test Drivers::\n+* Stubbing::\n * Putting Tests under Version Control::\n * Support for other platforms/run-times::\n * Current Limitations::\n@@ -19006,7 +19021,8 @@ is installed at its default location.\n @section Running @command{gnattest}\n \n @noindent\n-@command{gnattest} has a command-line interface of the form\n+@b{In the framework generation mode}, @command{gnattest} has a command-line\n+interface of the form\n \n @smallexample\n @c $ gnattest @var{-Pprojname} @ovar{switches} @ovar{filename} @ovar{directory}\n@@ -19076,25 +19092,52 @@ Note that if the project already has both my_unit.ads and my_unit-test_data.ads,\n this will cause a name conflict with the generated test package.\n @end itemize\n \n-@node Switches for gnattest\n-@section Switches for @command{gnattest}\n+\n+@noindent\n+@b{In the tests execution mode mode}, @command{gnattest} has a command-line\n+interface of the form\n+\n+@smallexample\n+@c $ gnattest @var{-Pprojname} @ovar{switches} @ovar{filename} @ovar{directory}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+$ gnattest @var{test_drivers.list} @r{[}@var{switches}@r{]}\n+@end smallexample\n+\n+@noindent\n+where\n+@table @var\n+\n+@item test_drivers.list\n+is the name of the text file containing the list of executables to treat as\n+test drivers. This file is automatically generated by gnattest, but can be\n+hand-edited to add or remove tests. This switch is required.\n+\n+@item switches\n+is an optional sequence of switches as described below.\n+\n+@end table\n+\n+\n+@node Switches for gnattest in framework generation mode\n+@section Switches for @command{gnattest} in framework generation mode\n \n @table @option\n @c !sort!\n \n-@item --harness-only\n-@cindex @option{--harness-only} (@command{gnattest})\n-When this option is given, @command{gnattest} creates a harness for all\n-sources, treating them as test packages.\n+@item -q\n+@cindex @option{-q} (@command{gnattest})\n+Quiet mode: suppresses noncritical output messages.\n \n-@item --additional-tests=@var{projname}\n-@cindex @option{--additional-tests} (@command{gnattest})\n-Sources described in @var{projname} are considered potential additional\n-manual tests to be added to the test suite.\n+@item -v\n+@cindex @option{-v} (@command{gnattest})\n+Verbose mode: generates version information if specified by itself on the\n+command line.  If specified via GNATtest_Switches, produces output\n+about the execution of the tool.\n \n @item -r\n @cindex @option{-r} (@command{gnattest})\n-Recursively consider all sources from all projects.\n+Recursively considers all sources from all projects.\n+\n \n @item -X@var{name=value}\n @cindex @option{-X} (@command{gnattest})\n@@ -19105,20 +19148,76 @@ Indicate that external variable @var{name} has the value @var{value}.\n Specifies the default location of the runtime library. Same meaning as the\n equivalent @command{gnatmake} flag (@pxref{Switches for gnatmake}).\n \n-@item -q\n-@cindex @option{-q} (@command{gnattest})\n-Suppresses noncritical output messages.\n \n-@item -v\n-@cindex @option{-v} (@command{gnattest})\n-Verbose mode: generates version information if specified by itself on the\n-command line.  If specified via GNATtest_Switches, produces output\n-about the execution of the tool.\n+@item --additional-tests=@var{projname}\n+@cindex @option{--additional-tests} (@command{gnattest})\n+Sources described in @var{projname} are considered potential additional\n+manual tests to be added to the test suite.\n+\n+@item --harness-only\n+@cindex @option{--harness-only} (@command{gnattest})\n+When this option is given, @command{gnattest} creates a harness for all\n+sources, treating them as test packages.\n+\n+@item --separate-drivers\n+@cindex @option{--separate-drivers} (@command{gnattest})\n+Generates a separate test driver for each test, rather than a single\n+executable incorporating all tests.\n+\n+@item --stub\n+@cindex @option{--stub} (@command{gnattest})\n+Generates the testing framework that uses subsystem stubbing to isolate the\n+code under test.\n+\n+\n+@item --harness-dir=@var{dirname}\n+@cindex @option{--harness-dir} (@command{gnattest})\n+Specifies the directory that will hold the harness packages and project file\n+for the test driver. If the @var{dirname} is a relative path, it is considered\n+relative to the object directory of the project file.\n+\n+@item --tests-dir=@var{dirname}\n+@cindex @option{--tests-dir} (@command{gnattest})\n+All test packages are placed in the @var{dirname} directory.\n+If the @var{dirname} is a relative path, it is considered relative to the object\n+directory of the project file. When all sources from all projects are taken\n+recursively from all projects, @var{dirname} directories are created for each\n+project in their object directories and test packages are placed accordingly.\n+\n+@item --subdir=@var{dirname}\n+@cindex @option{--subdir} (@command{gnattest})\n+Test packages are placed in a subdirectory of the corresponding source\n+directory, with the name @var{dirname}. Thus, each set of unit tests is located\n+in a subdirectory of the code under test.  If the sources are in separate\n+directories, each source directory has a test subdirectory named @var{dirname}.\n+\n+@item --tests-root=@var{dirname}\n+@cindex @option{--tests-root} (@command{gnattest})\n+The hierarchy of source directories, if any, is recreated in the @var{dirname}\n+directory, with test packages placed in directories corresponding to those\n+of the sources.\n+If the @var{dirname} is a relative path, it is considered relative to the object\n+directory of the project file. When projects are considered recursively,\n+directory hierarchies of tested sources are\n+recreated for each project in their object directories and test packages are\n+placed accordingly.\n+\n+@item --stubs-dir=@var{dirname}\n+@cindex @option{--stubs-dir} (@command{gnattest})\n+The hierarchy of directories containing stubbed units is recreated in\n+the @var{dirname} directory, with stubs placed in directories corresponding to\n+projects they are derived from.\n+If the @var{dirname} is a relative path, it is considered relative to the object\n+directory of the project file. When projects are considered recursively,\n+directory hierarchies of stubs are\n+recreated for each project in their object directories and test packages are\n+placed accordingly.\n+\n \n @item --validate-type-extensions\n @cindex @option{--validate-type-extensions} (@command{gnattest})\n Enables substitution check: run all tests from all parents in order\n-to check substitutability.\n+to check substitutability in accordance with LSP.\n \n @item --skeleton-default=@var{val}\n @cindex @option{--skeleton-default} (@command{gnattest})\n@@ -19136,37 +19235,11 @@ Specifies whether or not generated test driver should return failure exit\n status if at least one test fails or crashes. @var{val} can be either\n \"on\" or \"off\", \"off\" being the default.\n \n+@item --omit-sloc\n+@cindex @option{--omit-sloc} (@command{gnattest})\n+Suppresses comment line containing file name and line number of corresponding\n+subprograms in test skeletons.\n \n-@item --tests-root=@var{dirname}\n-@cindex @option{--tests-root} (@command{gnattest})\n-The hierarchy of source directories, if any, is recreated in the @var{dirname}\n-directory, with test packages placed in directories corresponding to those of the sources.\n-If the @var{dirname} is a relative path, it is considered relative to the object\n-directory of the project file. When all sources from all projects are taken\n-recursively from all projects, directory hierarchies of tested sources are\n-recreated for each project in their object directories and test packages are\n-placed accordingly.\n-\n-@item --subdir=@var{dirname}\n-@cindex @option{--subdir} (@command{gnattest})\n-Test packages are placed in a subdirectory of the corresponding source directory,\n-with the name @var{dirname}. Thus, each set of unit tests is located in a subdirectory of the\n-code under test.  If the sources are in separate directories, each source directory\n-has a test subdirectory named @var{dirname}.\n-\n-@item --tests-dir=@var{dirname}\n-@cindex @option{--tests-dir} (@command{gnattest})\n-All test packages are placed in the @var{dirname} directory.\n-If the @var{dirname} is a relative path, it is considered relative to the object\n-directory of the project file. When all sources from all projects are taken\n-recursively from all projects, @var{dirname} directories are created for each\n-project in their object directories and test packages are placed accordingly.\n-\n-@item --harness-dir=@var{dirname}\n-@cindex @option{--harness-dir} (@command{gnattest})\n-specifies the directory that will hold the harness packages and project file\n-for the test driver. If the @var{dirname} is a relative path, it is considered\n-relative to the object directory of the project file.\n \n @item --separates\n @cindex @option{--separates} (@command{gnattest})\n@@ -19186,11 +19259,6 @@ separates. Note that if separate test routines had any manually added with\n clauses they will be moved to the test package body as is and have to be moved\n by hand.\n \n-@item --omit-sloc\n-@cindex @option{--omit-sloc} (@command{gnattest})\n-Suppresses comment line containing file name and line number of corresponding\n-subprograms in test skeletons.\n-\n @item --test-duration\n @cindex @option{--test-duration} (@command{gnattest})\n Adds time measurements for each test in generated test driver.\n@@ -19200,6 +19268,26 @@ Adds time measurements for each test in generated test driver.\n @option{--tests_root}, @option{--subdir} and @option{--tests-dir} switches are\n mutually exclusive.\n \n+\n+@node Switches for gnattest in tests execution mode\n+@section Switches for @command{gnattest} in tests execution mode\n+\n+@table @option\n+@c !sort!\n+\n+@item --passed-tests=@var{val}\n+@cindex @option{--passed-tests} (@command{gnattest})\n+Specifies whether or not passed tests should be shown. @var{val} can be either\n+\"show\" or \"hide\", \"show\" being the default.\n+\n+@item --queues=@var{n}, -j@var{n}\n+@cindex @option{--queues} (@command{gnattest})\n+@cindex @option{-j} (@command{gnattest})\n+Runs @var{n} tests in parallel (default is 1).\n+\n+@end table\n+\n+\n @node Project Attributes for gnattest\n @section Project Attributes for @command{gnattest}\n \n@@ -19565,6 +19653,68 @@ gnatmake -Pmixing/test_driver.gpr\n mixing/test_runner\n @end smallexample\n \n+\n+@node Individual Test Drivers\n+@section Individual Test Drivers\n+\n+@noindent\n+By default, @command{gnattest} generates a monolithic test driver that\n+aggregates the individual tests into a single executable. It is also possible\n+to generate separate executables for each test, by passing the switch\n+@option{--separate-drivers}. This approach scales better for large testing\n+campaigns, especially involving target architectures with limited resources\n+typical for embedded development. It can also provide a major performance\n+benefit on multi-core systems by allowing simultaneous execution of multiple\n+tests.\n+\n+@command{gnattest} can take charge of executing the individual tests; for this,\n+instead of passing a project file, a text file containing the list of\n+executables can be passed. Such a file is automatically generated by gnattest\n+under the name @option{test_drivers.list}, but it can be\n+hand-edited to add or remove tests, or replaced. The individual tests can\n+also be executed standalone, or from any user-defined scripted framework.\n+\n+\n+@node Stubbing\n+@section Stubbing\n+\n+@noindent\n+Depending on the testing campaign, it is sometimes necessary to isolate the\n+part of the algorithm under test from its dependencies. This is accomplished\n+via @emph{stubbing}, i.e. replacing the subprograms that are called from the\n+subprogram under test by stand-in subprograms that match the profiles of the\n+original ones, but simply return predetermined values required by the test\n+scenario.\n+\n+This mode of test harness generation is activated by the switch @option{--stub}.\n+\n+The implementation approach chosen by @command{gnattest} is as follows.\n+For each package under consideration all the packages it is directly depending\n+on are stubbed, excluding the generic packages and package instantiations.\n+The stubs are shared for each package under test. The specs of packages to stub\n+remain intact, while their bodies are replaced, and hide the original bodies by\n+means of extending projects. Also, for each stubbed\n+package, a child package with setter routines for each subprogram declaration\n+is created. These setters are meant to be used to set the behaviour of\n+stubbed subprograms from within test cases.\n+\n+Note that subprograms belonging to the same package as the subprogram under\n+test are not stubbed. This guarantees that the sources being tested are\n+exactly the sources used for production, which is an important property for\n+establishing the traceability between the testing campaign and production code.\n+\n+Due to the nature of stubbing process, this mode implies the switch\n+@option{--separate-drivers}, i.e. an individual test driver (with the\n+corresponding hierarchy of extending projects) is generated for each test.\n+\n+@quotation Note\n+Developing a stubs-based testing campaign requires\n+good understanding of the infrastructure created by @command{gnattest} for\n+this purpose. We recommend following the stubbing tutorials provided\n+under @file{<install_prefix>/share/examples/gnattest/stubbing*} before\n+attempting to use this powerful feature.\n+@end quotation\n+\n @node Putting Tests under Version Control\n @section Putting Tests under Version Control\n "}, {"sha": "7b5871ae479d9750acb0c7f0aa565a8893932c34", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e290c54ec1dcc5ca0c5091b8ccc85cc696d7336/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e290c54ec1dcc5ca0c5091b8ccc85cc696d7336/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=0e290c54ec1dcc5ca0c5091b8ccc85cc696d7336", "patch": "@@ -166,16 +166,16 @@ package body System.Task_Primitives.Operations is\n    --  Install the default signal handlers for the current task\n \n    function Is_Task_Context return Boolean;\n-   --  This function returns True if the current execution is in the context\n-   --  of a task, and False if it is an interrupt context.\n+   --  This function returns True if the current execution is in the context of\n+   --  a task, and False if it is an interrupt context.\n \n    type Set_Stack_Limit_Proc_Acc is access procedure;\n    pragma Convention (C, Set_Stack_Limit_Proc_Acc);\n \n    Set_Stack_Limit_Hook : Set_Stack_Limit_Proc_Acc;\n    pragma Import (C, Set_Stack_Limit_Hook, \"__gnat_set_stack_limit_hook\");\n-   --  Procedure to be called when a task is created to set stack\n-   --  limit. Used only for VxWorks 5 and VxWorks MILS guest OS.\n+   --  Procedure to be called when a task is created to set stack limit. Used\n+   --  only for VxWorks 5 and VxWorks MILS guest OS.\n \n    function To_Address is\n      new Ada.Unchecked_Conversion (Task_Id, System.Address);\n@@ -670,9 +670,8 @@ package body System.Task_Primitives.Operations is\n \n             if Result /= 0 then\n \n-               --  If Ticks = int'last, it was most probably truncated\n-               --  so let's make another round after recomputing Ticks\n-               --  from the absolute time.\n+               --  If Ticks = int'last, it was most probably truncated, so make\n+               --  another round after recomputing Ticks from absolute time.\n \n                if errno = S_objLib_OBJ_TIMEOUT and then Ticks /= int'Last then\n                   Timedout := True;\n@@ -889,8 +888,8 @@ package body System.Task_Primitives.Operations is\n       use type System.Multiprocessors.CPU_Range;\n \n    begin\n-      --  Check whether both Dispatching_Domain and CPU are specified for the\n-      --  task, and the CPU value is not contained within the range of\n+      --  Check whether both Dispatching_Domain and CPU are specified for\n+      --  the task, and the CPU value is not contained within the range of\n       --  processors for the domain.\n \n       if T.Common.Domain /= null\n@@ -968,7 +967,9 @@ package body System.Task_Primitives.Operations is\n \n       Set_Task_Affinity (T);\n \n-      if T.Common.LL.Thread <= Null_Thread_Id then\n+      --  Only case of failure is if taskSpawn returned 0 (aka Null_Thread_Id)\n+\n+      if T.Common.LL.Thread = Null_Thread_Id then\n          Succeeded := False;\n       else\n          Succeeded := True;\n@@ -1038,9 +1039,9 @@ package body System.Task_Primitives.Operations is\n \n       --  Initialize internal mutex\n \n-      --  Use simpler binary semaphore instead of VxWorks\n-      --  mutual exclusion semaphore, because we don't need\n-      --  the fancier semantics and their overhead.\n+      --  Use simpler binary semaphore instead of VxWorks mutual exclusion\n+      --  semaphore, because we don't need the fancier semantics and their\n+      --  overhead.\n \n       S.L := semBCreate (SEM_Q_FIFO, SEM_FULL);\n \n@@ -1122,10 +1123,10 @@ package body System.Task_Primitives.Operations is\n       Result := semTake (S.L, WAIT_FOREVER);\n       pragma Assert (Result = OK);\n \n-      --  If there is already a task waiting on this suspension object then\n-      --  we resume it, leaving the state of the suspension object to False,\n-      --  as it is specified in ARM D.10 par. 9. Otherwise, it just leaves\n-      --  the state to True.\n+      --  If there is already a task waiting on this suspension object then we\n+      --  resume it, leaving the state of the suspension object to False, as it\n+      --  is specified in (RM D.10 (9)). Otherwise, it just leaves the state to\n+      --  True.\n \n       if S.Waiting then\n          S.Waiting := False;\n@@ -1165,7 +1166,7 @@ package body System.Task_Primitives.Operations is\n \n          --  Program_Error must be raised upon calling Suspend_Until_True\n          --  if another task is already waiting on that suspension object\n-         --  (ARM D.10 par. 10).\n+         --  (RM D.10(10)).\n \n          Result := semGive (S.L);\n          pragma Assert (Result = OK);\n@@ -1177,7 +1178,7 @@ package body System.Task_Primitives.Operations is\n       else\n          --  Suspend the task if the state is False. Otherwise, the task\n          --  continues its execution, and the state of the suspension object\n-         --  is set to False (ARM D.10 par. 9).\n+         --  is set to False (RM D.10 (9)).\n \n          if S.State then\n             S.State := False;"}]}