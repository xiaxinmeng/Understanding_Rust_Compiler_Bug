{"sha": "e600165c51f4af94c173bd5448c75005ce84ba6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYwMDE2NWM1MWY0YWY5NGMxNzNiZDU0NDhjNzUwMDVjZTg0YmE2Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-09-02T23:18:55Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-09-02T23:18:55Z"}, "message": "Improve generated code for C400 Clipper.\n\n(TARGET_SWITCHES): New options `c300' `c400'.\n(TARGET_C300, TARGET_C400): New defines.\n(TARGET_DEFAULT): Define as TARGET_C300.\n(CONDITIONAL_REGISTER_USAGE): New define.\n\nFrom-SVN: r5254", "tree": {"sha": "581a94a2d595a0043789859a8e70cdf53aa4b061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/581a94a2d595a0043789859a8e70cdf53aa4b061"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e600165c51f4af94c173bd5448c75005ce84ba6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e600165c51f4af94c173bd5448c75005ce84ba6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e600165c51f4af94c173bd5448c75005ce84ba6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e600165c51f4af94c173bd5448c75005ce84ba6f/comments", "author": null, "committer": null, "parents": [{"sha": "729105f4a5d9fb24ccb587ec4d3d091c9c9d23e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729105f4a5d9fb24ccb587ec4d3d091c9c9d23e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/729105f4a5d9fb24ccb587ec4d3d091c9c9d23e6"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "9aa7cc7af518ac85956ae05cea51ecf40e1f2692", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e600165c51f4af94c173bd5448c75005ce84ba6f/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e600165c51f4af94c173bd5448c75005ce84ba6f/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=e600165c51f4af94c173bd5448c75005ce84ba6f", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Clipper version.\n-   Copyright (C) 1987, 1988, 1991 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1991, 1993 Free Software Foundation, Inc.\n \n    Contributed by Holger Teutsch (holger@hotbso.rhein-main.de)\n \n@@ -38,13 +38,18 @@ extern int target_flags;\n    where VALUE is the bits to set or minus the bits to clear.\n    An empty string NAME is used to identify the default VALUE.  */\n \n-#define TARGET_SWITCHES  \\\n-  { { \"\", TARGET_DEFAULT} }\n+#define TARGET_SWITCHES\t\t\\\n+  { { \"c400\", 1 },\t\t\\\n+    { \"c300\", -1 },\t\t\\\n+    { \"\", TARGET_DEFAULT} }\n+\n+#define TARGET_C400 1\n+#define TARGET_C300 0\n \n /* Default target_flags if no switches specified.  */\n \n #ifndef TARGET_DEFAULT\n-#define TARGET_DEFAULT 0\n+#define TARGET_DEFAULT TARGET_C300\n #endif\n \n /* Omit frame pointer at -O2.  Inline functions at -O3.  */\n@@ -175,7 +180,7 @@ extern int target_flags;\n    On the clipper, these are the FP and SP .  */\n #define FIXED_REGISTERS \\\n {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,\\\n- 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1} /* FIXME: C300 only */\n+ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1} /* Default: C300 */\n \n /* 1 for registers not available across function calls.\n    These must include the FIXED_REGISTERS and also any\n@@ -185,7 +190,16 @@ extern int target_flags;\n    Aside from that, you can include as many other registers as you like.  */\n #define CALL_USED_REGISTERS \\\n {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,\\\n- 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1} /* FIXME: C300 only */\n+ 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1} /* default: C300 */\n+\n+/* Zero or more C statements that may conditionally modify two\n+   variables `fixed_regs' and `call_used_regs' (both of type `char\n+   []') after they have been initialized from the two preceding\n+   macros. A C400 has additional floating registers f8 -> f15 */\n+#define CONDITIONAL_REGISTER_USAGE\t\\\n+   if (target_flags & TARGET_C400)\t\\\n+     { int i;\t\t\t\t\\\n+       for (i = 24; i < 32; i++) fixed_regs[i] = call_used_regs[i] = 0; }\n \n /* Return number of consecutive hard regs needed starting at reg REGNO\n    to hold something of mode MODE."}]}