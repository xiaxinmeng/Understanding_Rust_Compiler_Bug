{"sha": "16a3246f05465d048eaa3c70bfdb517325a517d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZhMzI0NmYwNTQ2NWQwNDhlYWEzYzcwYmZkYjUxNzMyNWE1MTdkNg==", "commit": {"author": {"name": "Renlin Li", "email": "renlin.li@arm.com", "date": "2014-04-22T11:02:20Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-04-22T11:02:20Z"}, "message": "[AArch64] Add a space to memory asm code between base register and offset.\n\nFrom-SVN: r209618", "tree": {"sha": "c88bb6bb44afb8983fec3d3139bfbb114c6519c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c88bb6bb44afb8983fec3d3139bfbb114c6519c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16a3246f05465d048eaa3c70bfdb517325a517d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16a3246f05465d048eaa3c70bfdb517325a517d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16a3246f05465d048eaa3c70bfdb517325a517d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16a3246f05465d048eaa3c70bfdb517325a517d6/comments", "author": null, "committer": null, "parents": [{"sha": "110e1ccc08a859c62b672e3a8b697caff350de38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/110e1ccc08a859c62b672e3a8b697caff350de38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/110e1ccc08a859c62b672e3a8b697caff350de38"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "79e74fa1e3183e622cb5198f6ccf9b364ca6de7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a3246f05465d048eaa3c70bfdb517325a517d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a3246f05465d048eaa3c70bfdb517325a517d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16a3246f05465d048eaa3c70bfdb517325a517d6", "patch": "@@ -1,3 +1,8 @@\n+2014-04-22  Renlin Li  <Renlin.Li@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_print_operand_address): Adjust\n+\tthe output asm format.\n+\n 2014-04-22  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-simd.md"}, {"sha": "10793ddbed6313b97fc704ae6ab0287d42df06c5", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a3246f05465d048eaa3c70bfdb517325a517d6/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a3246f05465d048eaa3c70bfdb517325a517d6/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=16a3246f05465d048eaa3c70bfdb517325a517d6", "patch": "@@ -3836,62 +3836,62 @@ aarch64_print_operand_address (FILE *f, rtx x)\n \tif (addr.offset == const0_rtx)\n \t  asm_fprintf (f, \"[%s]\", reg_names [REGNO (addr.base)]);\n \telse\n-\t  asm_fprintf (f, \"[%s,%wd]\", reg_names [REGNO (addr.base)],\n+\t  asm_fprintf (f, \"[%s, %wd]\", reg_names [REGNO (addr.base)],\n \t\t       INTVAL (addr.offset));\n \treturn;\n \n       case ADDRESS_REG_REG:\n \tif (addr.shift == 0)\n-\t  asm_fprintf (f, \"[%s,%s]\", reg_names [REGNO (addr.base)],\n+\t  asm_fprintf (f, \"[%s, %s]\", reg_names [REGNO (addr.base)],\n \t\t       reg_names [REGNO (addr.offset)]);\n \telse\n-\t  asm_fprintf (f, \"[%s,%s,lsl %u]\", reg_names [REGNO (addr.base)],\n+\t  asm_fprintf (f, \"[%s, %s, lsl %u]\", reg_names [REGNO (addr.base)],\n \t\t       reg_names [REGNO (addr.offset)], addr.shift);\n \treturn;\n \n       case ADDRESS_REG_UXTW:\n \tif (addr.shift == 0)\n-\t  asm_fprintf (f, \"[%s,w%d,uxtw]\", reg_names [REGNO (addr.base)],\n+\t  asm_fprintf (f, \"[%s, w%d, uxtw]\", reg_names [REGNO (addr.base)],\n \t\t       REGNO (addr.offset) - R0_REGNUM);\n \telse\n-\t  asm_fprintf (f, \"[%s,w%d,uxtw %u]\", reg_names [REGNO (addr.base)],\n+\t  asm_fprintf (f, \"[%s, w%d, uxtw %u]\", reg_names [REGNO (addr.base)],\n \t\t       REGNO (addr.offset) - R0_REGNUM, addr.shift);\n \treturn;\n \n       case ADDRESS_REG_SXTW:\n \tif (addr.shift == 0)\n-\t  asm_fprintf (f, \"[%s,w%d,sxtw]\", reg_names [REGNO (addr.base)],\n+\t  asm_fprintf (f, \"[%s, w%d, sxtw]\", reg_names [REGNO (addr.base)],\n \t\t       REGNO (addr.offset) - R0_REGNUM);\n \telse\n-\t  asm_fprintf (f, \"[%s,w%d,sxtw %u]\", reg_names [REGNO (addr.base)],\n+\t  asm_fprintf (f, \"[%s, w%d, sxtw %u]\", reg_names [REGNO (addr.base)],\n \t\t       REGNO (addr.offset) - R0_REGNUM, addr.shift);\n \treturn;\n \n       case ADDRESS_REG_WB:\n \tswitch (GET_CODE (x))\n \t  {\n \t  case PRE_INC:\n-\t    asm_fprintf (f, \"[%s,%d]!\", reg_names [REGNO (addr.base)], \n+\t    asm_fprintf (f, \"[%s, %d]!\", reg_names [REGNO (addr.base)],\n \t\t\t GET_MODE_SIZE (aarch64_memory_reference_mode));\n \t    return;\n \t  case POST_INC:\n-\t    asm_fprintf (f, \"[%s],%d\", reg_names [REGNO (addr.base)],\n+\t    asm_fprintf (f, \"[%s], %d\", reg_names [REGNO (addr.base)],\n \t\t\t GET_MODE_SIZE (aarch64_memory_reference_mode));\n \t    return;\n \t  case PRE_DEC:\n-\t    asm_fprintf (f, \"[%s,-%d]!\", reg_names [REGNO (addr.base)],\n+\t    asm_fprintf (f, \"[%s, -%d]!\", reg_names [REGNO (addr.base)],\n \t\t\t GET_MODE_SIZE (aarch64_memory_reference_mode));\n \t    return;\n \t  case POST_DEC:\n-\t    asm_fprintf (f, \"[%s],-%d\", reg_names [REGNO (addr.base)],\n+\t    asm_fprintf (f, \"[%s], -%d\", reg_names [REGNO (addr.base)],\n \t\t\t GET_MODE_SIZE (aarch64_memory_reference_mode));\n \t    return;\n \t  case PRE_MODIFY:\n-\t    asm_fprintf (f, \"[%s,%wd]!\", reg_names [REGNO (addr.base)],\n+\t    asm_fprintf (f, \"[%s, %wd]!\", reg_names [REGNO (addr.base)],\n \t\t\t INTVAL (addr.offset));\n \t    return;\n \t  case POST_MODIFY:\n-\t    asm_fprintf (f, \"[%s],%wd\", reg_names [REGNO (addr.base)],\n+\t    asm_fprintf (f, \"[%s], %wd\", reg_names [REGNO (addr.base)],\n \t\t\t INTVAL (addr.offset));\n \t    return;\n \t  default:\n@@ -3900,7 +3900,7 @@ aarch64_print_operand_address (FILE *f, rtx x)\n \tbreak;\n \n       case ADDRESS_LO_SUM:\n-\tasm_fprintf (f, \"[%s,#:lo12:\", reg_names [REGNO (addr.base)]);\n+\tasm_fprintf (f, \"[%s, #:lo12:\", reg_names [REGNO (addr.base)]);\n \toutput_addr_const (f, addr.offset);\n \tasm_fprintf (f, \"]\");\n \treturn;"}]}