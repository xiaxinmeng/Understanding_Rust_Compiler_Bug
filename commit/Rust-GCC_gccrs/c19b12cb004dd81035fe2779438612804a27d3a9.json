{"sha": "c19b12cb004dd81035fe2779438612804a27d3a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE5YjEyY2IwMDRkZDgxMDM1ZmUyNzc5NDM4NjEyODA0YTI3ZDNhOQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-03-12T21:31:51Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-03-12T21:31:51Z"}, "message": "cppfiles.c (cpp_rename_file, [...]): New.\n\n\t* cppfiles.c (cpp_rename_file, cpp_push_include): New.\n\t* cppinit.c (push_include): Move with changes to cppfiles.c.\n\t(cpp_read_main_file): Mark named operators here...\n\t(cpp_finish_options): ...not here.  Update.\n\t(_cpp_maybe_push_include_file): Update.\n\t* cpplib.h (cpp_push_include, cpp_rename_file): New.\n\nFrom-SVN: r64266", "tree": {"sha": "590fd1847cab73a5ef4b75fd3561a468bf056eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/590fd1847cab73a5ef4b75fd3561a468bf056eab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c19b12cb004dd81035fe2779438612804a27d3a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19b12cb004dd81035fe2779438612804a27d3a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c19b12cb004dd81035fe2779438612804a27d3a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19b12cb004dd81035fe2779438612804a27d3a9/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad9c4d9f7b601d599c3119e21d28c4a75cc94298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9c4d9f7b601d599c3119e21d28c4a75cc94298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad9c4d9f7b601d599c3119e21d28c4a75cc94298"}], "stats": {"total": 73, "additions": 45, "deletions": 28}, "files": [{"sha": "f970d7b997c41bedacf34f2cec4603a055485b78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19b12cb004dd81035fe2779438612804a27d3a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19b12cb004dd81035fe2779438612804a27d3a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c19b12cb004dd81035fe2779438612804a27d3a9", "patch": "@@ -1,3 +1,12 @@\n+2003-03-12  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cppfiles.c (cpp_rename_file, cpp_push_include): New.\n+\t* cppinit.c (push_include): Move with changes to cppfiles.c.\n+\t(cpp_read_main_file): Mark named operators here...\n+\t(cpp_finish_options): ...not here.  Update.\n+\t(_cpp_maybe_push_include_file): Update.\n+\t* cpplib.h (cpp_push_include, cpp_rename_file): New.\n+\n 2003-03-12  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n         * aclocal.m4: Introduce gcc_GAS_VERSION_GTE_IFELSE,"}, {"sha": "9bcdb9edb5d799a5298ffcebf56e216084b5e18a", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19b12cb004dd81035fe2779438612804a27d3a9/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19b12cb004dd81035fe2779438612804a27d3a9/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=c19b12cb004dd81035fe2779438612804a27d3a9", "patch": "@@ -756,6 +756,16 @@ cpp_make_system_header (pfile, syshdr, externc)\n \t\t       SOURCE_LINE (pfile->map, pfile->line), flags);\n }\n \n+/* Allow the client to rename the current file.  Used by the front end\n+   to achieve pseudo-file names like <built-in>.  */\n+void\n+cpp_rename_file (pfile, new_name)\n+     cpp_reader *pfile;\n+     const char *new_name;\n+{\n+  _cpp_do_file_change (pfile, LC_RENAME, new_name, 1, 0);\n+}\n+\n /* Report on all files that might benefit from a multiple include guard.\n    Triggered by -H.  */\n void\n@@ -884,6 +894,24 @@ _cpp_read_file (pfile, fname)\n   return stack_include_file (pfile, f);\n }\n \n+/* Pushes the given file onto the buffer stack.  Returns nonzero if\n+   successful.  */\n+bool\n+cpp_push_include (pfile, filename)\n+     cpp_reader *pfile;\n+     const char *filename;\n+{\n+  cpp_token header;\n+\n+  header.type = CPP_STRING;\n+  header.val.str.text = (const unsigned char *) filename;\n+  header.val.str.len = strlen (filename);\n+  /* Make the command line directive take up a line.  */\n+  pfile->line++;\n+\n+  return _cpp_execute_include (pfile, &header, IT_CMDLINE);\n+}\n+\n /* Do appropriate cleanup when a file INC's buffer is popped off the\n    input stack.  */\n void"}, {"sha": "8982474d26e5975c09e0e97cb6258ed6721c6151", "filename": "gcc/cppinit.c", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19b12cb004dd81035fe2779438612804a27d3a9/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19b12cb004dd81035fe2779438612804a27d3a9/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=c19b12cb004dd81035fe2779438612804a27d3a9", "patch": "@@ -68,8 +68,6 @@ struct cpp_pending\n static void init_library\t\tPARAMS ((void));\n static void init_builtins\t\tPARAMS ((cpp_reader *));\n static void mark_named_operators\tPARAMS ((cpp_reader *));\n-static bool push_include\t\tPARAMS ((cpp_reader *,\n-\t\t\t\t\t\t struct pending_option *));\n static void free_chain\t\t\tPARAMS ((struct pending_option *));\n static void read_original_filename\tPARAMS ((cpp_reader *));\n static void new_pending_directive\tPARAMS ((struct cpp_pending *,\n@@ -432,26 +430,6 @@ init_builtins (pfile)\n     (*pfile->cb.register_builtins) (pfile);\n }\n \n-/* Pushes a command line -imacro and -include file indicated by P onto\n-   the buffer stack.  Returns nonzero if successful.  */\n-static bool\n-push_include (pfile, p)\n-     cpp_reader *pfile;\n-     struct pending_option *p;\n-{\n-  cpp_token header;\n-\n-  /* Later: maybe update this to use the #include \"\" search path\n-     if cpp_read_file fails.  */\n-  header.type = CPP_STRING;\n-  header.val.str.text = (const unsigned char *) p->arg;\n-  header.val.str.len = strlen (p->arg);\n-  /* Make the command line directive take up a line.  */\n-  pfile->line++;\n-\n-  return _cpp_execute_include (pfile, &header, IT_CMDLINE);\n-}\n-\n /* Frees a pending_option chain.  */\n static void\n free_chain (head)\n@@ -552,6 +530,10 @@ cpp_read_main_file (pfile, fname, table)\n      hashtable is deferred until now.  */\n   _cpp_init_hashtable (pfile, table);\n \n+  /* Mark named operators before handling command line macros.  */\n+  if (CPP_OPTION (pfile, cplusplus) && CPP_OPTION (pfile, operator_names))\n+    mark_named_operators (pfile);\n+\n   if (CPP_OPTION (pfile, deps.style) != DEPS_NONE)\n     {\n       if (!pfile->deps)\n@@ -615,10 +597,6 @@ void\n cpp_finish_options (pfile)\n      cpp_reader *pfile;\n {\n-  /* Mark named operators before handling command line macros.  */\n-  if (CPP_OPTION (pfile, cplusplus) && CPP_OPTION (pfile, operator_names))\n-    mark_named_operators (pfile);\n-\n   /* Install builtins and process command line macros etc. in the order\n      they appeared, but only if not already preprocessed.  */\n   if (! CPP_OPTION (pfile, preprocessed))\n@@ -637,7 +615,7 @@ cpp_finish_options (pfile)\n \t pfile->next_include_file is NULL, so _cpp_pop_buffer does not\n \t push -include files.  */\n       for (p = CPP_OPTION (pfile, pending)->imacros_head; p; p = p->next)\n-\tif (push_include (pfile, p))\n+\tif (cpp_push_include (pfile, p->arg))\n \t  cpp_scan_nooutput (pfile);\n \n       pfile->next_include_file = &CPP_OPTION (pfile, pending)->include_head;\n@@ -659,7 +637,7 @@ _cpp_maybe_push_include_file (pfile)\n     {\n       struct pending_option *head = *pfile->next_include_file;\n \n-      while (head && !push_include (pfile, head))\n+      while (head && !cpp_push_include (pfile, head->arg))\n \thead = head->next;\n \n       if (head)"}, {"sha": "06a219c99e9536c5aa99bebccd5d3de305026197", "filename": "gcc/cpplib.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19b12cb004dd81035fe2779438612804a27d3a9/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19b12cb004dd81035fe2779438612804a27d3a9/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=c19b12cb004dd81035fe2779438612804a27d3a9", "patch": "@@ -719,6 +719,8 @@ extern unsigned char *cpp_quote_string\tPARAMS ((unsigned char *,\n extern int cpp_included\tPARAMS ((cpp_reader *, const char *));\n extern void cpp_make_system_header PARAMS ((cpp_reader *, int, int));\n extern void cpp_simplify_path PARAMS ((char *));\n+extern bool cpp_push_include PARAMS ((cpp_reader *, const char *));\n+extern void cpp_rename_file PARAMS ((cpp_reader *, const char *));\n \n /* In cpppch.c */\n struct save_macro_data;"}]}