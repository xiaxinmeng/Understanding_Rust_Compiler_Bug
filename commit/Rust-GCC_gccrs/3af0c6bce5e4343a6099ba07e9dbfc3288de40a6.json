{"sha": "3af0c6bce5e4343a6099ba07e9dbfc3288de40a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FmMGM2YmNlNWU0MzQzYTYwOTliYTA3ZTlkYmZjMzI4OGRlNDBhNg==", "commit": {"author": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2018-11-01T20:41:08Z"}, "committer": {"name": "Aaron Sawdey", "email": "acsawdey@gcc.gnu.org", "date": "2018-11-01T20:41:08Z"}, "message": "rs6000-protos.h (rs6000_address_for_fpconvert): Remove prototype.\n\n2018-11-01  Aaron Sawdey  <acsawdey@linux.ibm.com>\n\n\t* config/rs6000/rs6000-protos.h (rs6000_address_for_fpconvert): Remove\n\tprototype.\n\t* config/rs6000/rs6000.c (rs6000_force_indexed_or_indirect_mem):\n\tCombine with rs6000_address_for_fpconvert.\n\t(rs6000_address_for_fpconvert): Combine with\n\trs6000_force_indexed_or_indirect_mem.\n\t(rs6000_expand_vector_init): Change function call from\n\trs6000_address_for_fpconvert to rs6000_force_indexed_or_indirect_mem.\n\t* config/rs6000/rs6000.md (floatsi<mode>2_lfiwax): Change call from\n\trs6000_address_for_fpconvert to rs6000_force_indexed_or_indirect_mem.\n\t(floatsi<mode>2_lfiwax_mem): Ditto.\n\t(floatunssi<mode>2_lfiwzx): Ditto.\n\t(floatunssi<mode>2_lfiwzx_mem): Ditto.\n\t(float<QHI:mode><FP_ISA3:mode>2): Ditto.\n\t(floatuns<QHI:mode><FP_ISA3:mode>2): Ditto.\n\t(fix_trunc<mode>si2_stfiwx): Ditto.\n\t(fixuns_trunc<mode>si2_stfiwx): Ditto.\n\t(float_<mode>si2_hw): Ditto.\n\t(floatuns_<mode>si2_hw): Ditto.\n\t* config/rs6000/vsx.md (*vsx_extract_si): Ditto.\n\t(vsx_splat_<mode>): Ditto.\n\nFrom-SVN: r265733", "tree": {"sha": "8ebc721f818417e49556a1aa75a4635f4ea9c258", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ebc721f818417e49556a1aa75a4635f4ea9c258"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3af0c6bce5e4343a6099ba07e9dbfc3288de40a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af0c6bce5e4343a6099ba07e9dbfc3288de40a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af0c6bce5e4343a6099ba07e9dbfc3288de40a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af0c6bce5e4343a6099ba07e9dbfc3288de40a6/comments", "author": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b53b3475fc6c1641362d9b591a3e91c20d6a22d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b53b3475fc6c1641362d9b591a3e91c20d6a22d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b53b3475fc6c1641362d9b591a3e91c20d6a22d"}], "stats": {"total": 88, "additions": 46, "deletions": 42}, "files": [{"sha": "f3c59496eadbde082682210c733da88469b9a3b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af0c6bce5e4343a6099ba07e9dbfc3288de40a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af0c6bce5e4343a6099ba07e9dbfc3288de40a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3af0c6bce5e4343a6099ba07e9dbfc3288de40a6", "patch": "@@ -1,3 +1,27 @@\n+2018-11-01  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-protos.h (rs6000_address_for_fpconvert): Remove\n+\tprototype.\n+\t* config/rs6000/rs6000.c (rs6000_force_indexed_or_indirect_mem):\n+\tCombine with rs6000_address_for_fpconvert.\n+\t(rs6000_address_for_fpconvert): Combine with\n+\trs6000_force_indexed_or_indirect_mem.\n+\t(rs6000_expand_vector_init): Change function call from\n+\trs6000_address_for_fpconvert to rs6000_force_indexed_or_indirect_mem.\n+\t* config/rs6000/rs6000.md (floatsi<mode>2_lfiwax): Change call from\n+\trs6000_address_for_fpconvert to rs6000_force_indexed_or_indirect_mem.\n+\t(floatsi<mode>2_lfiwax_mem): Ditto.\n+\t(floatunssi<mode>2_lfiwzx): Ditto.\n+\t(floatunssi<mode>2_lfiwzx_mem): Ditto.\n+\t(float<QHI:mode><FP_ISA3:mode>2): Ditto.\n+\t(floatuns<QHI:mode><FP_ISA3:mode>2): Ditto.\n+\t(fix_trunc<mode>si2_stfiwx): Ditto.\n+\t(fixuns_trunc<mode>si2_stfiwx): Ditto.\n+\t(float_<mode>si2_hw): Ditto.\n+\t(floatuns_<mode>si2_hw): Ditto.\n+\t* config/rs6000/vsx.md (*vsx_extract_si): Ditto.\n+\t(vsx_splat_<mode>): Ditto.\n+\n 2018-11-01  Joseph Myers  <joseph@codesourcery.com>\n \n \t* configure.ac (gcc_cv_as_ia64_ltoffx_ldxmov_relocs): Add newline"}, {"sha": "fb69019c47ce00515f9fd572edba6cadccb00506", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af0c6bce5e4343a6099ba07e9dbfc3288de40a6/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af0c6bce5e4343a6099ba07e9dbfc3288de40a6/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=3af0c6bce5e4343a6099ba07e9dbfc3288de40a6", "patch": "@@ -153,7 +153,6 @@ extern void rs6000_emit_parity (rtx, rtx);\n \n extern rtx rs6000_machopic_legitimize_pic_address (rtx, machine_mode,\n \t\t\t\t\t\t   rtx);\n-extern rtx rs6000_address_for_fpconvert (rtx);\n extern rtx rs6000_allocate_stack_temp (machine_mode, bool, bool);\n extern align_flags rs6000_loop_align (rtx);\n extern void rs6000_split_logical (rtx [], enum rtx_code, bool, bool, bool);"}, {"sha": "75b197f458c882d0fb7285356e7de4fd3dfa18f6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 29, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af0c6bce5e4343a6099ba07e9dbfc3288de40a6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af0c6bce5e4343a6099ba07e9dbfc3288de40a6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3af0c6bce5e4343a6099ba07e9dbfc3288de40a6", "patch": "@@ -6560,7 +6560,7 @@ rs6000_expand_vector_init (rtx target, rtx vals)\n \t{\n \t  rtx element0 = XVECEXP (vals, 0, 0);\n \t  if (MEM_P (element0))\n-\t    element0 = rs6000_address_for_fpconvert (element0);\n+\t    element0 = rs6000_force_indexed_or_indirect_mem (element0);\n \t  else\n \t    element0 = force_reg (SImode, element0);\n \n@@ -6601,7 +6601,7 @@ rs6000_expand_vector_init (rtx target, rtx vals)\n \t  if (TARGET_P9_VECTOR)\n \t    {\n \t      if (MEM_P (element0))\n-\t\telement0 = rs6000_address_for_fpconvert (element0);\n+\t\telement0 = rs6000_force_indexed_or_indirect_mem (element0);\n \n \t      emit_insn (gen_vsx_splat_v4sf (target, element0));\n \t    }\n@@ -8423,23 +8423,6 @@ rs6000_const_not_ok_for_debug_p (rtx x)\n   return false;\n }\n \n-/* Helper function for making sure we will make full\n-   use of indexed addressing.  */\n-\n-rtx\n-rs6000_force_indexed_or_indirect_mem (rtx x)\n-{\n-  machine_mode m = GET_MODE (x);\n-  if (!indexed_or_indirect_operand (x, m))\n-    {\n-      rtx addr = XEXP (x, 0);\n-      addr = force_reg (Pmode, addr);\n-      x = replace_equiv_address_nv (x, addr);\n-    }\n-  return x;\n-}\n-\n-\n /* Implement the TARGET_LEGITIMATE_COMBINED_INSN hook.  */\n \n static bool\n@@ -37312,21 +37295,19 @@ rs6000_allocate_stack_temp (machine_mode mode,\n   return stack;\n }\n \n-/* Given a memory reference, if it is not a reg or reg+reg addressing, convert\n-   to such a form to deal with memory reference instructions like STFIWX that\n-   only take reg+reg addressing.  */\n+/* Given a memory reference, if it is not a reg or reg+reg addressing,\n+   convert to such a form to deal with memory reference instructions\n+   like STFIWX and LDBRX that only take reg+reg addressing.  */\n \n rtx\n-rs6000_address_for_fpconvert (rtx x)\n+rs6000_force_indexed_or_indirect_mem (rtx x)\n {\n-  rtx addr;\n+  machine_mode mode = GET_MODE (x);\n \n   gcc_assert (MEM_P (x));\n-  addr = XEXP (x, 0);\n-  if (can_create_pseudo_p ()\n-      && ! legitimate_indirect_address_p (addr, reload_completed)\n-      && ! legitimate_indexed_address_p (addr, reload_completed))\n+  if (can_create_pseudo_p () && !indexed_or_indirect_operand (x, mode))\n     {\n+      rtx addr = XEXP (x, 0);\n       if (GET_CODE (addr) == PRE_INC || GET_CODE (addr) == PRE_DEC)\n \t{\n \t  rtx reg = XEXP (addr, 0);\n@@ -37346,7 +37327,7 @@ rs6000_address_for_fpconvert (rtx x)\n \t  addr = reg;\n \t}\n \n-      x = replace_equiv_address (x, copy_addr_to_reg (addr));\n+      x = replace_equiv_address (x, force_reg (Pmode, addr));\n     }\n \n   return x;"}, {"sha": "2b0538c1247dde2fa7b4ea921744c9c07109cdf2", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af0c6bce5e4343a6099ba07e9dbfc3288de40a6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af0c6bce5e4343a6099ba07e9dbfc3288de40a6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=3af0c6bce5e4343a6099ba07e9dbfc3288de40a6", "patch": "@@ -5225,7 +5225,7 @@\n \ttmp = gen_reg_rtx (DImode);\n       if (MEM_P (src))\n \t{\n-\t  src = rs6000_address_for_fpconvert (src);\n+\t  src = rs6000_force_indexed_or_indirect_mem (src);\n \t  emit_insn (gen_lfiwax (tmp, src));\n \t}\n       else\n@@ -5252,7 +5252,7 @@\n   \"\"\n   [(pc)]\n {\n-  operands[1] = rs6000_address_for_fpconvert (operands[1]);\n+  operands[1] = rs6000_force_indexed_or_indirect_mem (operands[1]);\n   if (GET_CODE (operands[2]) == SCRATCH)\n     operands[2] = gen_reg_rtx (DImode);\n   if (TARGET_P8_VECTOR)\n@@ -5300,7 +5300,7 @@\n \ttmp = gen_reg_rtx (DImode);\n       if (MEM_P (src))\n \t{\n-\t  src = rs6000_address_for_fpconvert (src);\n+\t  src = rs6000_force_indexed_or_indirect_mem (src);\n \t  emit_insn (gen_lfiwzx (tmp, src));\n \t}\n       else\n@@ -5327,7 +5327,7 @@\n   \"\"\n   [(pc)]\n {\n-  operands[1] = rs6000_address_for_fpconvert (operands[1]);\n+  operands[1] = rs6000_force_indexed_or_indirect_mem (operands[1]);\n   if (GET_CODE (operands[2]) == SCRATCH)\n     operands[2] = gen_reg_rtx (DImode);\n   if (TARGET_P8_VECTOR)\n@@ -5513,7 +5513,7 @@\n   \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\"\n {\n   if (MEM_P (operands[1]))\n-    operands[1] = rs6000_address_for_fpconvert (operands[1]);\n+    operands[1] = rs6000_force_indexed_or_indirect_mem (operands[1]);\n })\n \n (define_insn_and_split \"*float<QHI:mode><FP_ISA3:mode>2_internal\"\n@@ -5565,7 +5565,7 @@\n   \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\"\n {\n   if (MEM_P (operands[1]))\n-    operands[1] = rs6000_address_for_fpconvert (operands[1]);\n+    operands[1] = rs6000_force_indexed_or_indirect_mem (operands[1]);\n })\n \n (define_insn_and_split \"*floatuns<QHI:mode><FP_ISA3:mode>2_internal\"\n@@ -5646,7 +5646,7 @@\n   emit_insn (gen_fctiwz_<mode> (tmp, src));\n   if (MEM_P (dest))\n     {\n-      dest = rs6000_address_for_fpconvert (dest);\n+      dest = rs6000_force_indexed_or_indirect_mem (dest);\n       emit_insn (gen_stfiwx (dest, tmp));\n       DONE;\n     }\n@@ -5793,7 +5793,7 @@\n   emit_insn (gen_fctiwuz_<mode> (tmp, src));\n   if (MEM_P (dest))\n     {\n-      dest = rs6000_address_for_fpconvert (dest);\n+      dest = rs6000_force_indexed_or_indirect_mem (dest);\n       emit_insn (gen_stfiwx (dest, tmp));\n       DONE;\n     }\n@@ -14387,7 +14387,7 @@\n     operands[2] = gen_reg_rtx (DImode);\n \n   if (MEM_P (operands[1]))\n-    operands[1] = rs6000_address_for_fpconvert (operands[1]);\n+    operands[1] = rs6000_force_indexed_or_indirect_mem (operands[1]);\n })\n \n (define_insn_and_split \"float<QHI:mode><IEEE128:mode>2\"\n@@ -14453,7 +14453,7 @@\n     operands[2] = gen_reg_rtx (DImode);\n \n   if (MEM_P (operands[1]))\n-    operands[1] = rs6000_address_for_fpconvert (operands[1]);\n+    operands[1] = rs6000_force_indexed_or_indirect_mem (operands[1]);\n })\n \n (define_insn_and_split \"floatuns<QHI:mode><IEEE128:mode>2\""}, {"sha": "52dee7d9f080fcb1567a2f8cff207e9717dde5a0", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af0c6bce5e4343a6099ba07e9dbfc3288de40a6/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af0c6bce5e4343a6099ba07e9dbfc3288de40a6/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=3af0c6bce5e4343a6099ba07e9dbfc3288de40a6", "patch": "@@ -3624,7 +3624,7 @@\n   if (MEM_P (operands[0]))\n     {\n       if (can_create_pseudo_p ())\n-\tdest = rs6000_address_for_fpconvert (dest);\n+\tdest = rs6000_force_indexed_or_indirect_mem (dest);\n \n       if (TARGET_P8_VECTOR)\n \temit_move_insn (dest, gen_rtx_REG (SImode, REGNO (vec_tmp)));\n@@ -4088,7 +4088,7 @@\n {\n   rtx op1 = operands[1];\n   if (MEM_P (op1))\n-    operands[1] = rs6000_address_for_fpconvert (op1);\n+    operands[1] = rs6000_force_indexed_or_indirect_mem (op1);\n   else if (!REG_P (op1))\n     op1 = force_reg (<VSX_D:VS_scalar>mode, op1);\n })"}]}