{"sha": "9f5059b275af403da9f7dc4cc1af1f28d1ed53a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY1MDU5YjI3NWFmNDAzZGE5ZjdkYzRjYzFhZjFmMjhkMWVkNTNhOQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-03-31T17:54:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-03-31T17:54:07Z"}, "message": "go/cmd/go: always link external test packages first\n\nWhen linking complex packages that use both internal and external tests as well as many dependencies it is critical that the link order be external test package, internal test package, everything else.\n\nThis change is a back (forward?) port of the same change that canonical have been maintaining on their fork of the go tool for gccgo. Now that gccgo uses the go tool from upstream, this patch should be applied both to the gofrontend and golang/go repos.\n\nFrom-SVN: r221800", "tree": {"sha": "b792a0058ace05d8001459428e3226493a28fea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b792a0058ace05d8001459428e3226493a28fea5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f5059b275af403da9f7dc4cc1af1f28d1ed53a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f5059b275af403da9f7dc4cc1af1f28d1ed53a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f5059b275af403da9f7dc4cc1af1f28d1ed53a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f5059b275af403da9f7dc4cc1af1f28d1ed53a9/comments", "author": null, "committer": null, "parents": [{"sha": "397ad54db15fb4c8c6efdabefa76fa5865ff6c0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/397ad54db15fb4c8c6efdabefa76fa5865ff6c0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/397ad54db15fb4c8c6efdabefa76fa5865ff6c0c"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "781a43b5d995c4f43597e1351d16a32df5ed6f03", "filename": "libgo/go/cmd/go/build.go", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5059b275af403da9f7dc4cc1af1f28d1ed53a9/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5059b275af403da9f7dc4cc1af1f28d1ed53a9/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go?ref=9f5059b275af403da9f7dc4cc1af1f28d1ed53a9", "patch": "@@ -1921,6 +1921,7 @@ func (tools gccgoToolchain) ld(b *builder, p *Package, out string, allactions []\n \t// and all LDFLAGS from cgo dependencies.\n \tapackagesSeen := make(map[*Package]bool)\n \tafiles := []string{}\n+\txfiles := []string{}\n \tldflags := b.gccArchArgs()\n \tcgoldflags := []string{}\n \tusesCgo := false\n@@ -1936,7 +1937,12 @@ func (tools gccgoToolchain) ld(b *builder, p *Package, out string, allactions []\n \t\tif !a.p.Standard {\n \t\t\tif a.p != nil && !apackagesSeen[a.p] {\n \t\t\t\tapackagesSeen[a.p] = true\n-\t\t\t\tif a.p.fake {\n+\t\t\t\tif a.p.fake && a.p.external {\n+\t\t\t\t\t// external _tests, if present must come before\n+\t\t\t\t\t// internal _tests. Store these on a seperate list\n+\t\t\t\t\t// and place them at the head after this loop.\n+\t\t\t\t\txfiles = append(xfiles, a.target)\n+\t\t\t\t} else if a.p.fake {\n \t\t\t\t\t// move _test files to the top of the link order\n \t\t\t\t\tafiles = append([]string{a.target}, afiles...)\n \t\t\t\t} else {\n@@ -1945,6 +1951,7 @@ func (tools gccgoToolchain) ld(b *builder, p *Package, out string, allactions []\n \t\t\t}\n \t\t}\n \t}\n+\tafiles = append(xfiles, afiles...)\n \n \tfor _, a := range allactions {\n \t\tif a.p != nil {"}, {"sha": "ef440dd3b743a09d9d33805d7cee5a8dfc91a9a6", "filename": "libgo/go/cmd/go/pkg.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5059b275af403da9f7dc4cc1af1f28d1ed53a9/libgo%2Fgo%2Fcmd%2Fgo%2Fpkg.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5059b275af403da9f7dc4cc1af1f28d1ed53a9/libgo%2Fgo%2Fcmd%2Fgo%2Fpkg.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Fpkg.go?ref=9f5059b275af403da9f7dc4cc1af1f28d1ed53a9", "patch": "@@ -83,6 +83,7 @@ type Package struct {\n \tallgofiles   []string             // gofiles + IgnoredGoFiles, absolute paths\n \ttarget       string               // installed file for this package (may be executable)\n \tfake         bool                 // synthesized package\n+\texternal     bool                 // synthesized external test package\n \tforceBuild   bool                 // this package must be rebuilt\n \tforceLibrary bool                 // this package is a library (even if named \"main\")\n \tcmdline      bool                 // defined by files listed on command line"}, {"sha": "5cf7aaf0716c2cc727330706a1a94cc8065a0e47", "filename": "libgo/go/cmd/go/test.go", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5059b275af403da9f7dc4cc1af1f28d1ed53a9/libgo%2Fgo%2Fcmd%2Fgo%2Ftest.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5059b275af403da9f7dc4cc1af1f28d1ed53a9/libgo%2Fgo%2Fcmd%2Fgo%2Ftest.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Ftest.go?ref=9f5059b275af403da9f7dc4cc1af1f28d1ed53a9", "patch": "@@ -692,10 +692,11 @@ func (b *builder) test(p *Package) (buildAction, runAction, printAction *action,\n \t\t\tbuild: &build.Package{\n \t\t\t\tImportPos: p.build.XTestImportPos,\n \t\t\t},\n-\t\t\timports: ximports,\n-\t\t\tpkgdir:  testDir,\n-\t\t\tfake:    true,\n-\t\t\tStale:   true,\n+\t\t\timports:  ximports,\n+\t\t\tpkgdir:   testDir,\n+\t\t\tfake:     true,\n+\t\t\texternal: true,\n+\t\t\tStale:    true,\n \t\t}\n \t\tif pxtestNeedsPtest {\n \t\t\tpxtest.imports = append(pxtest.imports, ptest)"}]}