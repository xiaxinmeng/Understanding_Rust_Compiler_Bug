{"sha": "871fda0ab0dcf2732eaeb89f4db0bb3c64eaf8f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcxZmRhMGFiMGRjZjI3MzJlYWViODlmNGRiMGJiM2M2NGVhZjhmNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-05-16T09:11:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-05-16T09:11:39Z"}, "message": "gigi.h (enum standard_datatypes): Add new value ADT_exception_data_name_id.\n\n\t* gcc-interface/gigi.h (enum standard_datatypes): Add new value\n\tADT_exception_data_name_id.\n\t(exception_data_name_id): New define.\n\t* gcc-interface/trans.c (gigi): Initialize it.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Use the standard\n\texception type for standard exception definitions.  Do not make them\n\tvolatile.\n\t<E_Record_Type>: Equate fields of types associated with an exception\n\tdefinition to those of the standard exception type.\n\nFrom-SVN: r159452", "tree": {"sha": "902ad77b5c5de1e8d3786003564c4495f2968739", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/902ad77b5c5de1e8d3786003564c4495f2968739"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/871fda0ab0dcf2732eaeb89f4db0bb3c64eaf8f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/871fda0ab0dcf2732eaeb89f4db0bb3c64eaf8f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/871fda0ab0dcf2732eaeb89f4db0bb3c64eaf8f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/871fda0ab0dcf2732eaeb89f4db0bb3c64eaf8f7/comments", "author": null, "committer": null, "parents": [{"sha": "1d4c5fe99b7f0551b3cafe72c63f465f5b59f215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4c5fe99b7f0551b3cafe72c63f465f5b59f215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d4c5fe99b7f0551b3cafe72c63f465f5b59f215"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "b70056b77a84a0bf36e0af946ae92ec01939df40", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871fda0ab0dcf2732eaeb89f4db0bb3c64eaf8f7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871fda0ab0dcf2732eaeb89f4db0bb3c64eaf8f7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=871fda0ab0dcf2732eaeb89f4db0bb3c64eaf8f7", "patch": "@@ -1,3 +1,15 @@\n+2010-05-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (enum standard_datatypes): Add new value\n+\tADT_exception_data_name_id.\n+\t(exception_data_name_id): New define.\n+\t* gcc-interface/trans.c (gigi): Initialize it.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Use the standard\n+\texception type for standard exception definitions.  Do not make them\n+\tvolatile.\n+\t<E_Record_Type>: Equate fields of types associated with an exception\n+\tdefinition to those of the standard exception type.\n+\n 2010-05-13  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* tracebak.c (__gnat_backtrace): Mark top_stack with ATTRIBUTE_UNUSED."}, {"sha": "137d523ddbfa09fd23d2dcb432c955605ea8eb4d", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871fda0ab0dcf2732eaeb89f4db0bb3c64eaf8f7/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871fda0ab0dcf2732eaeb89f4db0bb3c64eaf8f7/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=871fda0ab0dcf2732eaeb89f4db0bb3c64eaf8f7", "patch": "@@ -582,6 +582,13 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t/* Get the type after elaborating the renamed object.  */\n \tgnu_type = gnat_to_gnu_type (Etype (gnat_entity));\n \n+\t/* If this is a standard exception definition, then use the standard\n+\t   exception type.  This is necessary to make sure that imported and\n+\t   exported views of exceptions are properly merged in LTO mode.  */\n+\tif (TREE_CODE (TYPE_NAME (gnu_type)) == TYPE_DECL\n+\t    && DECL_NAME (TYPE_NAME (gnu_type)) == exception_data_name_id)\n+\t  gnu_type = except_type_node;\n+\n \t/* For a debug renaming declaration, build a pure debug entity.  */\n \tif (Present (Debug_Renaming_Link (gnat_entity)))\n \t  {\n@@ -1000,6 +1007,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t   and disallow any optimizations for such a non-constant object.  */\n \tif ((Treat_As_Volatile (gnat_entity)\n \t     || (!const_flag\n+\t\t && gnu_type != except_type_node\n \t\t && (Is_Exported (gnat_entity)\n \t\t     || imported_p\n \t\t     || Present (Address_Clause (gnat_entity)))))\n@@ -2922,6 +2930,21 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t      && Is_Itype (Etype (gnat_temp))\n \t      && !present_gnu_tree (gnat_temp))\n \t    gnat_to_gnu_entity (Etype (gnat_temp), NULL_TREE, 0);\n+\n+\t/* If this is a record type associated with an exception definition,\n+\t   equate its fields to those of the standard exception type.  This\n+\t   will make it possible to convert between them.  */\n+\tif (gnu_entity_name == exception_data_name_id)\n+\t  {\n+\t    tree gnu_std_field;\n+\t    for (gnu_field = TYPE_FIELDS (gnu_type),\n+\t\t gnu_std_field = TYPE_FIELDS (except_type_node);\n+\t\t gnu_field;\n+\t\t gnu_field = TREE_CHAIN (gnu_field),\n+\t\t gnu_std_field = TREE_CHAIN (gnu_std_field))\n+\t      SET_DECL_ORIGINAL_FIELD_TO_FIELD (gnu_field, gnu_std_field);\n+\t    gcc_assert (!gnu_std_field);\n+\t  }\n       }\n       break;\n "}, {"sha": "ce8fc8a7a7fb7ae8bf8677818b39180639c1d591", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871fda0ab0dcf2732eaeb89f4db0bb3c64eaf8f7/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871fda0ab0dcf2732eaeb89f4db0bb3c64eaf8f7/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=871fda0ab0dcf2732eaeb89f4db0bb3c64eaf8f7", "patch": "@@ -342,6 +342,9 @@ enum standard_datatypes\n   /* Identifier for the name of the _Parent field in tagged record types.  */\n   ADT_parent_name_id,\n \n+  /* Identifier for the name of the Exception_Data type.  */\n+  ADT_exception_data_name_id,\n+\n   /* Types and decls used by our temporary exception mechanism.  See\n      init_gigi_decls for details.  */\n   ADT_jmpbuf_type,\n@@ -376,6 +379,7 @@ extern GTY(()) tree gnat_raise_decls[(int) LAST_REASON_CODE + 1];\n #define free_decl gnat_std_decls[(int) ADT_free_decl]\n #define mulv64_decl gnat_std_decls[(int) ADT_mulv64_decl]\n #define parent_name_id gnat_std_decls[(int) ADT_parent_name_id]\n+#define exception_data_name_id gnat_std_decls[(int) ADT_exception_data_name_id]\n #define jmpbuf_type gnat_std_decls[(int) ADT_jmpbuf_type]\n #define jmpbuf_ptr_type gnat_std_decls[(int) ADT_jmpbuf_ptr_type]\n #define get_jmpbuf_decl gnat_std_decls[(int) ADT_get_jmpbuf_decl]"}, {"sha": "68b496ea69005ebc245ae624522c8e2aab8e029d", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871fda0ab0dcf2732eaeb89f4db0bb3c64eaf8f7/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871fda0ab0dcf2732eaeb89f4db0bb3c64eaf8f7/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=871fda0ab0dcf2732eaeb89f4db0bb3c64eaf8f7", "patch": "@@ -401,6 +401,10 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n   /* Name of the _Parent field in tagged record types.  */\n   parent_name_id = get_identifier (Get_Name_String (Name_uParent));\n \n+  /* Name of the Exception_Data type defined in System.Standard_Library.  */\n+  exception_data_name_id\n+    = get_identifier (\"system__standard_library__exception_data\");\n+\n   /* Make the types and functions used for exception processing.  */\n   jmpbuf_type\n     = build_array_type (gnat_type_for_mode (Pmode, 0),"}]}