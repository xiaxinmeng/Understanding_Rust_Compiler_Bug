{"sha": "a51fb17f48428e7cfc96a72a9f9f87901363bb6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUxZmIxN2Y0ODQyOGU3Y2ZjOTZhNzJhOWY5Zjg3OTAxMzYzYmI2Yg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2012-11-21T03:44:21Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2012-11-21T03:44:21Z"}, "message": "* config/arm/arm-cores.def (cortex-m1, cortex-m0)\n\t(cortex-m0plus): Use v6m.\n\t* config/arm/arm-protos.h (tune_params): Add\n\tlogical_op_non_short_circuit.\n\t* config/arm/arm.c (arm_slowmul_tune, arm_fastmul_tune)\n\t(arm_strongarm_tune, arm_xscale_tune, arm_9e_tune, arm_v6t2_tune)\n\t(arm_cortex_tune, arm_cortex_a15_tune, arm_cortex_a5_tune)\n\t(arm_cortex_a9_tune, arm_fa726te_tune): Set\n\tlogical_op_non_short_circuit field.\n\t(arm_v6m_tune): New tune_params struct.\n\t* config/arm/arm.h (LOGICAL_OP_NON_SHORT_CIRCUIT): Define.\n\n\t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Skip on ARM Cortex-M0.\n\t* gcc.dg/tree-ssa/vrp47.c: Ditto.\n\nFrom-SVN: r193687", "tree": {"sha": "f6de57936990343840067b0d61aad1152fe7dde1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6de57936990343840067b0d61aad1152fe7dde1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a51fb17f48428e7cfc96a72a9f9f87901363bb6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51fb17f48428e7cfc96a72a9f9f87901363bb6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a51fb17f48428e7cfc96a72a9f9f87901363bb6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51fb17f48428e7cfc96a72a9f9f87901363bb6b/comments", "author": null, "committer": null, "parents": [{"sha": "d757eae968da4dee24c728784a65fee9a3bb7d58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d757eae968da4dee24c728784a65fee9a3bb7d58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d757eae968da4dee24c728784a65fee9a3bb7d58"}], "stats": {"total": 93, "additions": 77, "deletions": 16}, "files": [{"sha": "1e76e8a53cae0f595ee776ac62db355bd3d529a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fb17f48428e7cfc96a72a9f9f87901363bb6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fb17f48428e7cfc96a72a9f9f87901363bb6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a51fb17f48428e7cfc96a72a9f9f87901363bb6b", "patch": "@@ -1,3 +1,17 @@\n+2012-11-21  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* config/arm/arm-cores.def (cortex-m1, cortex-m0)\n+\t(cortex-m0plus): Use v6m.\n+\t* config/arm/arm-protos.h (tune_params): Add\n+\tlogical_op_non_short_circuit.\n+\t* config/arm/arm.c (arm_slowmul_tune, arm_fastmul_tune)\n+\t(arm_strongarm_tune, arm_xscale_tune, arm_9e_tune, arm_v6t2_tune)\n+\t(arm_cortex_tune, arm_cortex_a15_tune, arm_cortex_a5_tune)\n+\t(arm_cortex_a9_tune, arm_fa726te_tune): Set\n+\tlogical_op_non_short_circuit field.\n+\t(arm_v6m_tune): New tune_params struct.\n+\t* config/arm/arm.h (LOGICAL_OP_NON_SHORT_CIRCUIT): Define.\n+\n 2012-11-20  Matthias Klose  <doko@ubuntu.com>\n \n \t* configure.ac: Substitute `with_cpu'."}, {"sha": "ac6612bb91aa8e7352d3923d6e51e1d86de18983", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fb17f48428e7cfc96a72a9f9f87901363bb6b/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fb17f48428e7cfc96a72a9f9f87901363bb6b/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=a51fb17f48428e7cfc96a72a9f9f87901363bb6b", "patch": "@@ -135,6 +135,6 @@ ARM_CORE(\"cortex-r4f\",\t  cortexr4f,\t7R,\t\t\t\t FL_LDSCHED, cortex)\n ARM_CORE(\"cortex-r5\",\t  cortexr5,\t7R,\t\t\t\t FL_LDSCHED | FL_ARM_DIV, cortex)\n ARM_CORE(\"cortex-m4\",\t  cortexm4,\t7EM,\t\t\t\t FL_LDSCHED, cortex)\n ARM_CORE(\"cortex-m3\",\t  cortexm3,\t7M,\t\t\t\t FL_LDSCHED, cortex)\n-ARM_CORE(\"cortex-m1\",\t  cortexm1,\t6M,\t\t\t\t FL_LDSCHED, cortex)\n-ARM_CORE(\"cortex-m0\",\t  cortexm0,\t6M,\t\t\t\t FL_LDSCHED, cortex)\n-ARM_CORE(\"cortex-m0plus\", cortexm0plus,\t6M,\t\t\t\t FL_LDSCHED, cortex)\n+ARM_CORE(\"cortex-m1\",\t  cortexm1,\t6M,\t\t\t\t FL_LDSCHED, v6m)\n+ARM_CORE(\"cortex-m0\",\t  cortexm0,\t6M,\t\t\t\t FL_LDSCHED, v6m)\n+ARM_CORE(\"cortex-m0plus\", cortexm0plus,\t6M,\t\t\t\t FL_LDSCHED, v6m)"}, {"sha": "d942c5b07a166b31c5383cb306945489e4d892a4", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fb17f48428e7cfc96a72a9f9f87901363bb6b/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fb17f48428e7cfc96a72a9f9f87901363bb6b/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=a51fb17f48428e7cfc96a72a9f9f87901363bb6b", "patch": "@@ -243,6 +243,10 @@ struct tune_params\n   int (*branch_cost) (bool, bool);\n   /* Prefer STRD/LDRD instructions over PUSH/POP/LDM/STM.  */\n   bool prefer_ldrd_strd;\n+  /* The preference for non short cirtcuit operation when optimizing for\n+     performance. The first element covers Thumb state and the second one\n+     is for ARM state.  */\n+  bool logical_op_non_short_circuit[2];\n };\n \n extern const struct tune_params *current_tune;"}, {"sha": "50dcff5ea401759a56907e08438ddd9f79a58063", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fb17f48428e7cfc96a72a9f9f87901363bb6b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fb17f48428e7cfc96a72a9f9f87901363bb6b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=a51fb17f48428e7cfc96a72a9f9f87901363bb6b", "patch": "@@ -893,7 +893,8 @@ const struct tune_params arm_slowmul_tune =\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   true,\t\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost,\n-  false                                         /* Prefer LDRD/STRD.  */\n+  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n+  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n };\n \n const struct tune_params arm_fastmul_tune =\n@@ -905,7 +906,8 @@ const struct tune_params arm_fastmul_tune =\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   true,\t\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost,\n-  false                                         /* Prefer LDRD/STRD.  */\n+  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n+  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n };\n \n /* StrongARM has early execution of branches, so a sequence that is worth\n@@ -920,7 +922,8 @@ const struct tune_params arm_strongarm_tune =\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   true,\t\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost,\n-  false                                         /* Prefer LDRD/STRD.  */\n+  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n+  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n };\n \n const struct tune_params arm_xscale_tune =\n@@ -932,7 +935,8 @@ const struct tune_params arm_xscale_tune =\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   true,\t\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost,\n-  false                                         /* Prefer LDRD/STRD.  */\n+  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n+  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n };\n \n const struct tune_params arm_9e_tune =\n@@ -944,7 +948,8 @@ const struct tune_params arm_9e_tune =\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   true,\t\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost,\n-  false                                         /* Prefer LDRD/STRD.  */\n+  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n+  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n };\n \n const struct tune_params arm_v6t2_tune =\n@@ -956,7 +961,8 @@ const struct tune_params arm_v6t2_tune =\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   false,\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost,\n-  false                                         /* Prefer LDRD/STRD.  */\n+  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n+  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n };\n \n /* Generic Cortex tuning.  Use more specific tunings if appropriate.  */\n@@ -969,7 +975,8 @@ const struct tune_params arm_cortex_tune =\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   false,\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost,\n-  false                                         /* Prefer LDRD/STRD.  */\n+  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n+  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n };\n \n const struct tune_params arm_cortex_a15_tune =\n@@ -981,7 +988,8 @@ const struct tune_params arm_cortex_a15_tune =\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   false,\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost,\n-  true                                          /* Prefer LDRD/STRD.  */\n+  true,\t\t\t\t\t\t/* Prefer LDRD/STRD.  */\n+  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n };\n \n /* Branches can be dual-issued on Cortex-A5, so conditional execution is\n@@ -996,7 +1004,8 @@ const struct tune_params arm_cortex_a5_tune =\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   false,\t\t\t\t\t/* Prefer constant pool.  */\n   arm_cortex_a5_branch_cost,\n-  false                                         /* Prefer LDRD/STRD.  */\n+  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n+  {false, false},\t\t\t\t/* Prefer non short circuit.  */\n };\n \n const struct tune_params arm_cortex_a9_tune =\n@@ -1008,7 +1017,23 @@ const struct tune_params arm_cortex_a9_tune =\n   ARM_PREFETCH_BENEFICIAL(4,32,32),\n   false,\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost,\n-  false                                         /* Prefer LDRD/STRD.  */\n+  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n+  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n+};\n+\n+/* The arm_v6m_tune is duplicated from arm_cortex_tune, rather than\n+   arm_v6t2_tune. It is used for cortex-m0, cortex-m1 and cortex-m0plus.  */\n+const struct tune_params arm_v6m_tune =\n+{\n+  arm_9e_rtx_costs,\n+  NULL,\n+  1,\t\t\t\t\t\t/* Constant limit.  */\n+  5,\t\t\t\t\t\t/* Max cond insns.  */\n+  ARM_PREFETCH_NOT_BENEFICIAL,\n+  false,\t\t\t\t\t/* Prefer constant pool.  */\n+  arm_default_branch_cost,\n+  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n+  {false, false},\t\t\t\t/* Prefer non short circuit.  */\n };\n \n const struct tune_params arm_fa726te_tune =\n@@ -1020,7 +1045,8 @@ const struct tune_params arm_fa726te_tune =\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   true,\t\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost,\n-  false                                         /* Prefer LDRD/STRD.  */\n+  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n+  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n };\n \n "}, {"sha": "2df36cbdcb930c07846cbed59c6da4c5ed923e7a", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fb17f48428e7cfc96a72a9f9f87901363bb6b/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fb17f48428e7cfc96a72a9f9f87901363bb6b/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=a51fb17f48428e7cfc96a72a9f9f87901363bb6b", "patch": "@@ -2012,10 +2012,16 @@ enum arm_auto_incmodes\n    || (X) == arg_pointer_rtx)\n \n /* Try to generate sequences that don't involve branches, we can then use\n-   conditional instructions */\n+   conditional instructions.  */\n #define BRANCH_COST(speed_p, predictable_p) \\\n   (current_tune->branch_cost (speed_p, predictable_p))\n \n+/* False if short circuit operation is preferred.  */\n+#define LOGICAL_OP_NON_SHORT_CIRCUIT\t\t\t\t\\\n+  ((optimize_size)\t\t\t\t\t\t\\\n+   ? (TARGET_THUMB ? false : true)\t\t\t\t\\\n+   : (current_tune->logical_op_non_short_circuit[TARGET_ARM]))\n+\n \f\n /* Position Independent Code.  */\n /* We decide which register to use based on the compilation options and"}, {"sha": "8cbad25a5e387ddd54046d5bc9a7297d864301eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fb17f48428e7cfc96a72a9f9f87901363bb6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fb17f48428e7cfc96a72a9f9f87901363bb6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a51fb17f48428e7cfc96a72a9f9f87901363bb6b", "patch": "@@ -1,3 +1,8 @@\n+2012-11-21  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Skip on ARM Cortex-M0.\n+\t* gcc.dg/tree-ssa/vrp47.c: Ditto.\n+\n 2012-11-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/19398"}, {"sha": "1cf3f0bf5714d523f7fc40ded1d289f7ca8463ba", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-4.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fb17f48428e7cfc96a72a9f9f87901363bb6b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fb17f48428e7cfc96a72a9f9f87901363bb6b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c?ref=a51fb17f48428e7cfc96a72a9f9f87901363bb6b", "patch": "@@ -59,7 +59,9 @@ bitmap_ior_and_compl (bitmap dst, const_bitmap a, const_bitmap b,\n    code we missed the edge when the first conditional is false\n    (b_elt is zero, which means the second conditional is always\n    zero.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 3 \"dom1\" { target { ! mips*-*-* } } } } */\n+/* ARM Cortex-M0 defined LOGICAL_OP_NON_SHORT_CIRCUIT to false,\n+   so skip below test.  */\n+/* { dg-final { scan-tree-dump-times \"Threaded\" 3 \"dom1\" { target { ! { mips*-*-* || { arm_cortex_m && arm_thumb1 } } } } } } */\n /* MIPS defines LOGICAL_OP_NON_SHORT_CIRCUIT to 0, so we split var1 || var2\n    into two conditions, rather than use (var1 != 0) | (var2 != 0).  */\n /* { dg-final { scan-tree-dump-times \"Threaded\" 4 \"dom1\" { target mips*-*-* } } } */"}, {"sha": "bf4f0f39e1e19049650c56aa68894a48709c7b0e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp47.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fb17f48428e7cfc96a72a9f9f87901363bb6b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fb17f48428e7cfc96a72a9f9f87901363bb6b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp47.c?ref=a51fb17f48428e7cfc96a72a9f9f87901363bb6b", "patch": "@@ -6,6 +6,10 @@\n /* { dg-do compile { target { ! \"mips*-*-* s390*-*-*  avr-*-* mn10300-*-*\" } } } */\n /* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-dom1 -fdump-tree-dom2\" } */\n /* { dg-additional-options \"-march=i586\" { target { { i?86-*-* x86_64-*-* } && ia32 } } } */\n+/* Skip on ARM Cortex-M0, where LOGICAL_OP_NON_SHORT_CIRCUIT is set to false,\n+   leading to two conditional jumps when evaluating an && condition.  VRP is\n+   not able to optimize this.  */\n+/* { dg-skip-if \"\" { arm_cortex_m && arm_thumb1} } */\n \n int h(int x, int y)\n {"}]}