{"sha": "db02b6b9b03846caee837a44941a38149a2e12d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIwMmI2YjliMDM4NDZjYWVlODM3YTQ0OTQxYTM4MTQ5YTJlMTJkMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-06-17T21:52:30Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-06-17T21:52:30Z"}, "message": "pt.c (convert_nontype_argument): Issue an error when presented with an integer (real) constant that cannot be...\n\n\t* pt.c (convert_nontype_argument): Issue an error when presented\n\twith an integer (real) constant that cannot be simplified to an\n\tINT_CST (REAL_CST).\n\nFrom-SVN: r20550", "tree": {"sha": "20fbd7173e8a047ea6ba6cfa19b237f5340e0dbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20fbd7173e8a047ea6ba6cfa19b237f5340e0dbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db02b6b9b03846caee837a44941a38149a2e12d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db02b6b9b03846caee837a44941a38149a2e12d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db02b6b9b03846caee837a44941a38149a2e12d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db02b6b9b03846caee837a44941a38149a2e12d2/comments", "author": null, "committer": null, "parents": [{"sha": "8fa8d8c5c7ce5d6c95bafee8314319a94775904f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa8d8c5c7ce5d6c95bafee8314319a94775904f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fa8d8c5c7ce5d6c95bafee8314319a94775904f"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "5af8932281ee04b4916b7b5ba35c8aeaf79177cb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db02b6b9b03846caee837a44941a38149a2e12d2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db02b6b9b03846caee837a44941a38149a2e12d2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=db02b6b9b03846caee837a44941a38149a2e12d2", "patch": "@@ -1,5 +1,9 @@\n 1998-06-17  Mark Mitchell  <mark@markmitchell.com>\n \n+\t* pt.c (convert_nontype_argument): Issue an error when presented\n+\twith an integer (real) constant that cannot be simplified to an\n+\tINT_CST (REAL_CST).\n+\n \t* cp-tree.h (c_get_alias_set): Remove declaration added in\n \t1998-06-13 change that should never have been checked in.\n "}, {"sha": "3b883b8c06b1cc2f1027590a6f36bdb1d3e65ffd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db02b6b9b03846caee837a44941a38149a2e12d2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db02b6b9b03846caee837a44941a38149a2e12d2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=db02b6b9b03846caee837a44941a38149a2e12d2", "patch": "@@ -2056,6 +2056,7 @@ convert_nontype_argument (type, expr)\n     {\n       if (! TREE_CONSTANT (expr))\n \t{\n+\tnon_constant:\n \t  cp_error (\"non-constant `%E' cannot be used as template argument\",\n \t\t    expr);\n \t  return NULL_TREE;\n@@ -2128,15 +2129,28 @@ convert_nontype_argument (type, expr)\n       \n       /* It's safe to call digest_init in this case; we know we're\n \t just converting one integral constant expression to another.  */\n-      return digest_init (type, expr, (tree*) 0);\n+      expr = digest_init (type, expr, (tree*) 0);\n \n+      if (TREE_CODE (expr) != INTEGER_CST)\n+\t/* Curiously, some TREE_CONSTNAT integral expressions do not\n+\t   simplify to integer constants.  For example, `3 % 0',\n+\t   remains a TRUNC_MOD_EXPR.  */\n+\tgoto non_constant;\n+      \n+      return expr;\n+\t\n     case REAL_TYPE:\n     case COMPLEX_TYPE:\n       /* These are g++ extensions.  */\n       if (TREE_CODE (expr_type) != TREE_CODE (type))\n \treturn error_mark_node;\n \n-      return digest_init (type, expr, (tree*) 0);\n+      expr = digest_init (type, expr, (tree*) 0);\n+      \n+      if (TREE_CODE (expr) != REAL_CST)\n+\tgoto non_constant;\n+\n+      return expr;\n \n     case POINTER_TYPE:\n       {"}, {"sha": "974cafc87310579287e9311b201fda6cd0022015", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash10.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db02b6b9b03846caee837a44941a38149a2e12d2/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db02b6b9b03846caee837a44941a38149a2e12d2/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash10.C?ref=db02b6b9b03846caee837a44941a38149a2e12d2", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link:\n+\n+template<int M, int N>\n+class GCD {\n+public:\n+  enum { val = (N == 0) ? M : GCD<N, M % N>::val }; \n+};\n+\n+main() {\n+  GCD< 1, 0 >::val; // ERROR - division\n+}"}]}