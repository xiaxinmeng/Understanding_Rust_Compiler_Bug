{"sha": "93ca4ba7663487de66e5aff1dc46722079f84e4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNjYTRiYTc2NjM0ODdkZTY2ZTVhZmYxZGM0NjcyMjA3OWY4NGU0ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "2000-03-13T19:23:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-13T19:23:34Z"}, "message": "decl.c (grokfndecl): Set TREE_NOTHROW if TYPE_NOTHROW_P.\n\n        * decl.c (grokfndecl): Set TREE_NOTHROW if TYPE_NOTHROW_P.\n\n        * except.c (dtor_nothrow): New fn.\n        (do_pop_exception): Use it.  Take type parm.\n        (push_eh_cleanup): Take type parm.\n        (expand_start_catch_block): Pass it.\n        (build_eh_type_type_ref): Accept null type.\n\nFrom-SVN: r32510", "tree": {"sha": "8a8088c2b10142e90d063bf19ffd09e1e3f915ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a8088c2b10142e90d063bf19ffd09e1e3f915ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93ca4ba7663487de66e5aff1dc46722079f84e4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93ca4ba7663487de66e5aff1dc46722079f84e4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93ca4ba7663487de66e5aff1dc46722079f84e4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93ca4ba7663487de66e5aff1dc46722079f84e4d/comments", "author": null, "committer": null, "parents": [{"sha": "a8c73de3a431495e9dcf281cd5f04f69add09bcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c73de3a431495e9dcf281cd5f04f69add09bcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8c73de3a431495e9dcf281cd5f04f69add09bcb"}], "stats": {"total": 63, "additions": 48, "deletions": 15}, "files": [{"sha": "84282a8fcd52fead4a77bde12eaaccfdac22a2fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93ca4ba7663487de66e5aff1dc46722079f84e4d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93ca4ba7663487de66e5aff1dc46722079f84e4d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=93ca4ba7663487de66e5aff1dc46722079f84e4d", "patch": "@@ -1,3 +1,13 @@\n+2000-03-13  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* decl.c (grokfndecl): Set TREE_NOTHROW if TYPE_NOTHROW_P.\n+\n+\t* except.c (dtor_nothrow): New fn.\n+\t(do_pop_exception): Use it.  Take type parm.\n+\t(push_eh_cleanup): Take type parm.\n+\t(expand_start_catch_block): Pass it.\n+\t(build_eh_type_type_ref): Accept null type.\n+\n 2000-03-12  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (revert_static_member_fn): Change prototype."}, {"sha": "7bdcca91f8de070f564ae8a3e2fa419e35e6e9b6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93ca4ba7663487de66e5aff1dc46722079f84e4d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93ca4ba7663487de66e5aff1dc46722079f84e4d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=93ca4ba7663487de66e5aff1dc46722079f84e4d", "patch": "@@ -8771,7 +8771,7 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n        tentative.  error_mark_node is replaced later with the BLOCK.  */\n     DECL_INITIAL (decl) = error_mark_node;\n \n-  if (nothrow_libfn_p (decl))\n+  if (TYPE_NOTHROW_P (type) || nothrow_libfn_p (decl))\n     TREE_NOTHROW (decl) = 1;\n \n   /* Caller will do the rest of this.  */"}, {"sha": "7900e076253a1fab5f20938a2e578d61885df7cc", "filename": "gcc/cp/except.c", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93ca4ba7663487de66e5aff1dc46722079f84e4d/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93ca4ba7663487de66e5aff1dc46722079f84e4d/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=93ca4ba7663487de66e5aff1dc46722079f84e4d", "patch": "@@ -37,7 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"eh-common.h\"\n \n-static void push_eh_cleanup PARAMS ((void));\n+static void push_eh_cleanup PARAMS ((tree));\n static tree build_eh_type_type PARAMS ((tree));\n static tree call_eh_info PARAMS ((void));\n static void push_eh_info PARAMS ((void));\n@@ -48,7 +48,8 @@ static tree get_eh_type PARAMS ((void));\n static tree get_eh_caught PARAMS ((void));\n static tree get_eh_handlers PARAMS ((void));\n #endif\n-static tree do_pop_exception PARAMS ((void));\n+static int dtor_nothrow PARAMS ((tree));\n+static tree do_pop_exception PARAMS ((tree));\n static tree build_eh_type_type_ref PARAMS ((tree));\n static tree build_terminate_handler PARAMS ((void));\n static tree alloc_eh_object PARAMS ((tree));\n@@ -356,8 +357,8 @@ build_eh_type_type_ref (type)\n {\n   tree exp;\n \n-  if (type == error_mark_node)\n-    return error_mark_node;\n+  if (type == NULL_TREE || type == error_mark_node)\n+    return type;\n \n   /* peel back references, so they match.  */\n   if (TREE_CODE (type) == REFERENCE_TYPE)\n@@ -376,6 +377,7 @@ build_eh_type_type_ref (type)\n /* This routine is called to mark all the symbols representing runtime\n    type functions in the exception table as having been referenced.\n    This will make sure code is emitted for them. Called from finish_file. */\n+\n void \n mark_all_runtime_matches () \n {\n@@ -401,13 +403,32 @@ mark_all_runtime_matches ()\n   free (ptr);\n }\n \n+/* Returns nonzero if cleaning up an exception of type TYPE (which can be\n+   NULL_TREE for a ... handler) will not throw an exception.  */\n+\n+static int\n+dtor_nothrow (type)\n+     tree type;\n+{\n+  tree fn;\n+\n+  if (type == NULL_TREE)\n+    return 0;\n+\n+  if (! TYPE_HAS_DESTRUCTOR (type))\n+    return 1;\n+\n+  fn = lookup_member (type, dtor_identifier, 0, 0);\n+  fn = TREE_VALUE (fn);\n+  return TREE_NOTHROW (fn);\n+}\n+\n /* Build up a call to __cp_pop_exception, to destroy the exception object\n-   for the current catch block.  HANDLER is either true or false, telling\n-   the library whether or not it is being called from an exception handler;\n-   if it is, it avoids destroying the object on rethrow.  */\n+   for the current catch block if no others are currently using it.  */\n \n static tree\n-do_pop_exception ()\n+do_pop_exception (type)\n+     tree type;\n {\n   tree fn, cleanup;\n   fn = get_identifier (\"__cp_pop_exception\");\n@@ -427,15 +448,17 @@ do_pop_exception ()\n   cleanup = lookup_name (get_identifier (\"__exception_info\"), 0);\n   cleanup = build_function_call (fn, tree_cons\n \t\t\t\t (NULL_TREE, cleanup, NULL_TREE));\n+  TREE_NOTHROW (cleanup) = dtor_nothrow (type);\n   return cleanup;\n }\n \n /* This routine creates the cleanup for the current exception.  */\n \n static void\n-push_eh_cleanup ()\n+push_eh_cleanup (type)\n+     tree type;\n {\n-  finish_decl_cleanup (NULL_TREE, do_pop_exception ());\n+  finish_decl_cleanup (NULL_TREE, do_pop_exception (type));\n }\n \n /* Build up a call to terminate on the function obstack, for use as an\n@@ -587,7 +610,6 @@ expand_start_catch_block (decl)\n {\n   tree compound_stmt_1;\n   tree compound_stmt_2;\n-  tree type;\n \n   if (! doing_eh (1))\n     return NULL_TREE;\n@@ -603,15 +625,16 @@ expand_start_catch_block (decl)\n   if (! decl || ! decl_is_java_type (TREE_TYPE (decl), 1))\n     {\n       /* The ordinary C++ case.  */\n+      tree type;\n \n       if (decl)\n-\ttype = build_eh_type_type_ref (TREE_TYPE (decl));\n+\ttype = TREE_TYPE (decl);\n       else\n \ttype = NULL_TREE;\n-      begin_catch_block (type);\n+      begin_catch_block (build_eh_type_type_ref (type));\n \n       push_eh_info ();\n-      push_eh_cleanup ();\n+      push_eh_cleanup (type);\n     }\n   else\n     {"}]}