{"sha": "fb98cff689605cc03070b54c3a234f94dec93fde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI5OGNmZjY4OTYwNWNjMDMwNzBiNTRjM2EyMzRmOTRkZWM5M2ZkZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-11-27T20:55:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-11-27T20:55:44Z"}, "message": "except.c: Lose Unexpected, SetTerminate, SetUnexpected, TerminateFunctionCall.\n\n\t* except.c: Lose Unexpected, SetTerminate, SetUnexpected,\n \tTerminateFunctionCall.\n\t(init_exception_processing): Likewise.  Terminate et al are now\n \tthe fns, not ADDR_EXPRs.\n\t(various): Lose redundant assemble_external calls.\n\t(do_unwind): s/BuiltinReturnAddress/builtin_return_address_fndecl/.\n\nFrom-SVN: r16805", "tree": {"sha": "5cab9a9064e09927ec2ba722197db5e694141ebf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cab9a9064e09927ec2ba722197db5e694141ebf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb98cff689605cc03070b54c3a234f94dec93fde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb98cff689605cc03070b54c3a234f94dec93fde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb98cff689605cc03070b54c3a234f94dec93fde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb98cff689605cc03070b54c3a234f94dec93fde/comments", "author": null, "committer": null, "parents": [{"sha": "77be6f82096e0dea19e96225f5c24740ec6090fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77be6f82096e0dea19e96225f5c24740ec6090fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77be6f82096e0dea19e96225f5c24740ec6090fb"}], "stats": {"total": 84, "additions": 21, "deletions": 63}, "files": [{"sha": "7ab1e62143b04865de8f6d8fae14f8a48645dcf3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb98cff689605cc03070b54c3a234f94dec93fde/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb98cff689605cc03070b54c3a234f94dec93fde/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fb98cff689605cc03070b54c3a234f94dec93fde", "patch": "@@ -1,5 +1,12 @@\n Thu Nov 27 00:59:46 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* except.c: Lose Unexpected, SetTerminate, SetUnexpected,\n+ \tTerminateFunctionCall.\n+\t(init_exception_processing): Likewise.  Terminate et al are now\n+ \tthe fns, not ADDR_EXPRs.\n+\t(various): Lose redundant assemble_external calls.\n+\t(do_unwind): s/BuiltinReturnAddress/builtin_return_address_fndecl/.\n+\n \t* cp-tree.h (struct lang_decl_flags): Add comdat.\n \t(DECL_COMDAT): New macro.\n \t* decl.c (duplicate_decls): Propagate it."}, {"sha": "d72c04a7e00606613b0c6ac68aace78e38da9ec5", "filename": "gcc/cp/except.c", "status": "modified", "additions": 14, "deletions": 63, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb98cff689605cc03070b54c3a234f94dec93fde/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb98cff689605cc03070b54c3a234f94dec93fde/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=fb98cff689605cc03070b54c3a234f94dec93fde", "patch": "@@ -42,9 +42,6 @@ tree builtin_return_address_fndecl;\n \n /* A couple of backend routines from m88k.c */\n \n-/* Used to cache a call to __builtin_return_address.  */\n-static tree BuiltinReturnAddress;\n-     \n static void easy_expand_asm PROTO((char *));\n static void push_eh_cleanup PROTO((void));\n static void do_unwind PROTO((rtx));\n@@ -167,19 +164,15 @@ asm (TEXT_SECTION_ASM_OP);\n /* local globals for function calls\n    ====================================================================== */\n \n-/* Used to cache \"terminate\", \"unexpected\", \"set_terminate\", and\n-   \"set_unexpected\" after default_conversion. (lib-except.c)  */\n-static tree Terminate, Unexpected, SetTerminate, SetUnexpected, CatchMatch;\n+/* Used to cache \"terminate\" and \"__throw_type_match*\".  */\n+static tree Terminate, CatchMatch;\n \n /* Used to cache __find_first_exception_table_match for throw.  */\n static tree FirstExceptionMatch;\n \n /* Used to cache a call to __unwind_function.  */\n static tree Unwind;\n \n-/* Holds a ready to emit call to \"terminate\".  */\n-static tree TerminateFunctionCall;\n-\n /* ====================================================================== */\n \n \n@@ -226,40 +219,18 @@ do_function_call (func, params, return_type)\n void\n init_exception_processing ()\n {\n-  tree unexpected_fndecl, terminate_fndecl;\n-  tree set_unexpected_fndecl, set_terminate_fndecl;\n-  tree catch_match_fndecl;\n-  tree find_first_exception_match_fndecl;\n-  tree unwind_fndecl;\n-  tree declspecs;\n   tree d;\n \n   /* void vtype () */\n   tree vtype = build_function_type (void_type_node, void_list_node);\n   \n-  /* void (*)() */\n-  tree PFV = build_pointer_type (vtype);\n-\n-  /* Arg list for the build_function_type call for set_terminate and\n-     set_unexpected.  */\n-  tree pfvlist = tree_cons (NULL_TREE, PFV, void_list_node);\n-\n-  /* void (*pfvtype (void (*) ()))() */\n-  tree pfvtype = build_function_type (PFV, pfvlist);\n-\n-  set_terminate_fndecl = auto_function (get_identifier (\"set_terminate\"),\n-\t\t\t\t\tpfvtype, NOT_BUILT_IN);\n-  set_unexpected_fndecl = auto_function (get_identifier (\"set_unexpected\"),\n-\t\t\t\t\t pfvtype, NOT_BUILT_IN);\n-  unexpected_fndecl = auto_function (get_identifier (\"unexpected\"),\n-\t\t\t\t     vtype, NOT_BUILT_IN);\n-  terminate_fndecl = auto_function (get_identifier (\"terminate\"),\n-\t\t\t\t    vtype, NOT_BUILT_IN);\n-  TREE_THIS_VOLATILE (terminate_fndecl) = 1;\n+  Terminate = auto_function (get_identifier (\"terminate\"),\n+\t\t\t     vtype, NOT_BUILT_IN);\n+  TREE_THIS_VOLATILE (Terminate) = 1;\n \n   push_lang_context (lang_name_c);\n \n-  catch_match_fndecl\n+  CatchMatch\n     = builtin_function (flag_rtti\n \t\t\t? \"__throw_type_match_rtti\"\n \t\t\t: \"__throw_type_match\",\n@@ -269,30 +240,19 @@ init_exception_processing ()\n \t\t\t\t\t\t\t\t   tree_cons (NULL_TREE, ptr_type_node,\n \t\t\t\t\t\t\t\t\t      void_list_node)))),\n \t\t\tNOT_BUILT_IN, NULL_PTR);\n-  find_first_exception_match_fndecl\n+  FirstExceptionMatch\n     = builtin_function (\"__find_first_exception_table_match\",\n \t\t\tbuild_function_type (ptr_type_node,\n \t\t\t\t\t     tree_cons (NULL_TREE, ptr_type_node,\n \t\t\t\t\t\t\tvoid_list_node)),\n \t\t\tNOT_BUILT_IN, NULL_PTR);\n-  unwind_fndecl\n+  Unwind\n     = builtin_function (\"__unwind_function\",\n \t\t\tbuild_function_type (void_type_node,\n \t\t\t\t\t     tree_cons (NULL_TREE, ptr_type_node,\n \t\t\t\t\t\t\tvoid_list_node)),\n \t\t\tNOT_BUILT_IN, NULL_PTR);\n \n-  Unexpected = default_conversion (unexpected_fndecl);\n-  Terminate = default_conversion (terminate_fndecl);\n-  SetTerminate = default_conversion (set_terminate_fndecl);\n-  SetUnexpected = default_conversion (set_unexpected_fndecl);\n-  CatchMatch = default_conversion (catch_match_fndecl);\n-  FirstExceptionMatch = default_conversion (find_first_exception_match_fndecl);\n-  Unwind = default_conversion (unwind_fndecl);\n-  BuiltinReturnAddress = default_conversion (builtin_return_address_fndecl);\n-\n-  TerminateFunctionCall = build_function_call (Terminate, NULL_TREE);\n-\n   pop_lang_context ();\n \n   d = build_decl (VAR_DECL, get_identifier (\"__eh_pc\"), ptr_type_node);\n@@ -628,7 +588,6 @@ expand_start_catch_block (declspecs, declarator)\n \t\t\t\t  expr_tree_cons (NULL_TREE, exp, NULL_TREE)));\n       exp = build_function_call (CatchMatch, exp);\n       call_rtx = expand_call (exp, NULL_RTX, 0);\n-      assemble_external (TREE_OPERAND (CatchMatch, 0));\n \n       return_value_rtx = hard_function_value (ptr_type_node, exp);\n \n@@ -656,7 +615,7 @@ expand_start_catch_block (declspecs, declarator)\n \t  init = ocp_convert (TREE_TYPE (decl), init,\n \t\t\t      CONV_IMPLICIT|CONV_FORCE_TEMP, 0);\n \t  init = build (TRY_CATCH_EXPR, TREE_TYPE (init), init,\n-\t\t\tTerminateFunctionCall);\n+\t\t\tbuild_function_call (Terminate, NULL_TREE));\n \t}\n \n       /* Let `cp_finish_decl' know that this initializer is ok.  */\n@@ -756,7 +715,7 @@ do_unwind (inner_throw_label)\n \n   /* Call to  __builtin_return_address. */\n   params = expr_tree_cons (NULL_TREE, integer_zero_node, NULL_TREE);\n-  fcall = build_function_call (BuiltinReturnAddress, params);\n+  fcall = build_function_call (builtin_return_address_fndecl, params);\n   next_pc = expand_expr (fcall, NULL_RTX, Pmode, 0);\n   /* In the return, the new pc is pc+8, as the value coming in is\n      really the address of the call insn, not the next insn.  */\n@@ -809,7 +768,7 @@ do_unwind (inner_throw_label)\n   /* I would like to do this here, but the move below doesn't seem to work.  */\n   /* Call to  __builtin_return_address.  */\n   params = expr_tree_cons (NULL_TREE, integer_zero_node, NULL_TREE);\n-  fcall = build_function_call (BuiltinReturnAddress, params);\n+  fcall = build_function_call (builtin_return_address_fndecl, params);\n   next_pc = expand_expr (fcall, NULL_RTX, Pmode, 0);\n \n   emit_move_insn (next_pc, inner_throw_label);\n@@ -819,7 +778,6 @@ do_unwind (inner_throw_label)\n \t\t\t\t\t    inner_throw_label), NULL_TREE);\n   \n   do_function_call (Unwind, params, NULL_TREE);\n-  assemble_external (TREE_OPERAND (Unwind, 0));\n   emit_barrier ();\n #endif\n }\n@@ -894,7 +852,6 @@ expand_builtin_throw ()\n \t\t\t      expr_tree_cons (NULL_TREE, saved_pc,\n \t\t\t\t\t NULL_TREE),\n \t\t\t      ptr_type_node);\n-  assemble_external (TREE_OPERAND (FirstExceptionMatch, 0));\n \n   /* did we find one? */\n   emit_cmp_insn (handler, const0_rtx, EQ, NULL_RTX,\n@@ -940,7 +897,7 @@ expand_builtin_throw ()\n \t\t  gen_rtx (MEM, Pmode, plus_constant (hard_frame_pointer_rtx, -4)));\n #else\n   params = expr_tree_cons (NULL_TREE, integer_zero_node, NULL_TREE);\n-  fcall = build_function_call (BuiltinReturnAddress, params);\n+  fcall = build_function_call (builtin_return_address_fndecl, params);\n   next_pc = expand_expr (fcall, NULL_RTX, Pmode, 0);\n #endif\n \n@@ -996,7 +953,6 @@ expand_builtin_throw ()\n   /* no it didn't --> therefore we need to call terminate */\n   emit_label (gotta_call_terminate);\n   do_function_call (Terminate, NULL_TREE, NULL_TREE);\n-  assemble_external (TREE_OPERAND (Terminate, 0));\n \n   {\n     rtx ret_val, x;\n@@ -1161,18 +1117,13 @@ expand_exception_blocks ()\n \t EH region through the top of the region, as we have to with\n \t the setjmp/longjmp approach.  */\n       if (exceptions_via_longjmp == 0)\n-\t{\n-\t  /* Is this necessary?  */\n-\t  assemble_external (TREE_OPERAND (Terminate, 0));\n-\n-\t  expand_eh_region_start ();\n-\t}\n+\texpand_eh_region_start ();\n \n       emit_insns (catch_clauses);\n       catch_clauses = NULL_RTX;\n \n       if (exceptions_via_longjmp == 0)\n-\texpand_eh_region_end (TerminateFunctionCall);\n+\texpand_eh_region_end (build_function_call (Terminate, NULL_TREE));\n \n       expand_leftover_cleanups ();\n "}]}