{"sha": "6026b73e8644bcb9bf594ec48081da1df7e2fc68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAyNmI3M2U4NjQ0YmNiOWJmNTk0ZWM0ODA4MWRhMWRmN2UyZmM2OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-10-15T17:16:36Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-10-15T17:16:36Z"}, "message": "Cosmetic tweak to previous checkin.\n\nFrom-SVN: r117751", "tree": {"sha": "70b44c9793e251ce33b1ab0e1d8094a2552453dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70b44c9793e251ce33b1ab0e1d8094a2552453dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6026b73e8644bcb9bf594ec48081da1df7e2fc68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6026b73e8644bcb9bf594ec48081da1df7e2fc68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6026b73e8644bcb9bf594ec48081da1df7e2fc68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6026b73e8644bcb9bf594ec48081da1df7e2fc68/comments", "author": null, "committer": null, "parents": [{"sha": "af4a46a96391d2e999fc402be05842cf8cee2368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4a46a96391d2e999fc402be05842cf8cee2368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af4a46a96391d2e999fc402be05842cf8cee2368"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "0d28992d2c212d781ac2cf556057761b6d890783", "filename": "gcc/builtins.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6026b73e8644bcb9bf594ec48081da1df7e2fc68/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6026b73e8644bcb9bf594ec48081da1df7e2fc68/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6026b73e8644bcb9bf594ec48081da1df7e2fc68", "patch": "@@ -232,13 +232,13 @@ get_pointer_alignment (tree exp, unsigned int max_align)\n {\n   unsigned int align, inner;\n \n-  if (! POINTER_TYPE_P (TREE_TYPE (exp)))\n-    return 0;\n-\n   /* We rely on TER to compute accurate alignment information.  */\n   if (!(optimize && flag_tree_ter))\n     return 0;\n \n+  if (!POINTER_TYPE_P (TREE_TYPE (exp)))\n+    return 0;\n+\n   align = TYPE_ALIGN (TREE_TYPE (TREE_TYPE (exp)));\n   align = MIN (align, max_align);\n "}]}