{"sha": "21bf1558203226d4191d93a0b110b46611782f72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFiZjE1NTgyMDMyMjZkNDE5MWQ5M2EwYjExMGI0NjYxMTc4MmY3Mg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-11-19T13:25:39Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-11-19T13:25:39Z"}, "message": "options.texi (Var): Document effects of Defer.\n\n\t* doc/options.texi (Var): Document effects of Defer.\n\t(Defer): Document.\n\t* opt-functions.awk (var_type, var_set): Handle deferred options.\n\t* opts-common.c (set_option): Handle CLVC_DEFER.\n\t* common.opt (fcall-saved-, fcall-used-, fdump-, ffixed-,\n\tfplugin=, fplugin-arg-, fstack-limit, fstack-limit-register=,\n\tfstack-limit-symbol=): Mark as deferred.\n\t* opts.c: Don't include rtl.h, ggc.h, output.h, tree-pass.h or\n\tplugin.h.\n\t(print_filtered_help): Don't report state of CLVC_DEFER options.\n\t(common_handle_option): Move code for OPT_fcall_used_,\n\tOPT_fcall_saved_, OPT_fdump_, OPT_ffixed_, OPT_fplugin_,\n\tOPT_fplugin_arg_, OPT_fstack_limit, OPT_fstack_limit_register_ and\n\tOPT_fstack_limit_symbol_ to opts-global.c.\n\t(option_enabled, get_option_state): Handle CLVC_DEFER.\n\t* opts.h: Include vec.h.\n\t(enum cl_var_type): Add CLVC_DEFER.\n\t(cl_deferred_option): Define type and vectors.\n\t(handle_common_deferred_options): Declare.\n\t* opts-global.c: New.\n\t* toplev.c (toplev_main): Call handle_common_deferred_options\n\t* Makefile.in (OPTS_H): Include $(VEC_H).\n\t(OBJS-common): Include opts-global.o.\n\t(opts.o): Update dependencies.\n\t(opts-global.o): Add dependencies.\n\nFrom-SVN: r166942", "tree": {"sha": "f12b65b217fce54841d0387e6cafc7b704994c38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f12b65b217fce54841d0387e6cafc7b704994c38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21bf1558203226d4191d93a0b110b46611782f72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21bf1558203226d4191d93a0b110b46611782f72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21bf1558203226d4191d93a0b110b46611782f72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21bf1558203226d4191d93a0b110b46611782f72/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3be0ac864a1e360076605c24c39387f0b97bdf0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3be0ac864a1e360076605c24c39387f0b97bdf0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3be0ac864a1e360076605c24c39387f0b97bdf0c"}], "stats": {"total": 269, "additions": 217, "deletions": 52}, "files": [{"sha": "9ffa3c450fc912b68329f91ca218b712ecfc22f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21bf1558203226d4191d93a0b110b46611782f72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21bf1558203226d4191d93a0b110b46611782f72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21bf1558203226d4191d93a0b110b46611782f72", "patch": "@@ -1,3 +1,31 @@\n+2010-11-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/options.texi (Var): Document effects of Defer.\n+\t(Defer): Document.\n+\t* opt-functions.awk (var_type, var_set): Handle deferred options.\n+\t* opts-common.c (set_option): Handle CLVC_DEFER.\n+\t* common.opt (fcall-saved-, fcall-used-, fdump-, ffixed-,\n+\tfplugin=, fplugin-arg-, fstack-limit, fstack-limit-register=,\n+\tfstack-limit-symbol=): Mark as deferred.\n+\t* opts.c: Don't include rtl.h, ggc.h, output.h, tree-pass.h or\n+\tplugin.h.\n+\t(print_filtered_help): Don't report state of CLVC_DEFER options.\n+\t(common_handle_option): Move code for OPT_fcall_used_,\n+\tOPT_fcall_saved_, OPT_fdump_, OPT_ffixed_, OPT_fplugin_,\n+\tOPT_fplugin_arg_, OPT_fstack_limit, OPT_fstack_limit_register_ and\n+\tOPT_fstack_limit_symbol_ to opts-global.c.\n+\t(option_enabled, get_option_state): Handle CLVC_DEFER.\n+\t* opts.h: Include vec.h.\n+\t(enum cl_var_type): Add CLVC_DEFER.\n+\t(cl_deferred_option): Define type and vectors.\n+\t(handle_common_deferred_options): Declare.\n+\t* opts-global.c: New.\n+\t* toplev.c (toplev_main): Call handle_common_deferred_options\n+\t* Makefile.in (OPTS_H): Include $(VEC_H).\n+\t(OBJS-common): Include opts-global.o.\n+\t(opts.o): Update dependencies.\n+\t(opts-global.o): Add dependencies.\n+\n 2010-11-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* c-parser.c (c_parser_objc_protocol_definition): Pass attributes"}, {"sha": "2904da37bacfdec25603f46cda7a2a9e2c94b9b5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21bf1558203226d4191d93a0b110b46611782f72/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21bf1558203226d4191d93a0b110b46611782f72/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=21bf1558203226d4191d93a0b110b46611782f72", "patch": "@@ -932,7 +932,7 @@ PREDICT_H = predict.h predict.def\n CPPLIB_H = $(srcdir)/../libcpp/include/line-map.h \\\n \t$(srcdir)/../libcpp/include/cpplib.h\n INPUT_H = $(srcdir)/../libcpp/include/line-map.h input.h\n-OPTS_H = $(INPUT_H) opts.h\n+OPTS_H = $(INPUT_H) $(VEC_H) opts.h\n DECNUM_H = $(DECNUM)/decContext.h $(DECNUM)/decDPD.h $(DECNUM)/decNumber.h \\\n \t$(DECNUMFMT)/decimal32.h $(DECNUMFMT)/decimal64.h \\\n \t$(DECNUMFMT)/decimal128.h $(DECNUMFMT)/decimal128Local.h\n@@ -1295,6 +1295,7 @@ OBJS-common = \\\n \toptabs.o \\\n \toptions.o \\\n \topts-common.o \\\n+\topts-global.o \\\n \topts.o \\\n \tparams.o \\\n \tpasses.o \\\n@@ -2809,10 +2810,13 @@ fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    version.h $(INPUT_H) intl.h $(DIAGNOSTIC_H) diagnostic.def\n opts.o : opts.c $(OPTS_H) $(OPTIONS_H) $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h $(TREE_H) $(TM_H) langhooks.h $(GGC_H) $(EXPR_H) $(RTL_H) \\\n-   output.h $(DIAGNOSTIC_H) $(TM_P_H) $(INSN_ATTR_H) intl.h $(TARGET_H) \\\n-   $(FLAGS_H) $(PARAMS_H) $(TREE_PASS_H) $(DBGCNT_H) debug.h \\\n-   $(PLUGIN_H) $(EXCEPT_H) $(LTO_STREAMER_H) opts-diagnostic.h\n+   coretypes.h $(TREE_H) $(TM_H) langhooks.h $(EXPR_H) \\\n+   $(DIAGNOSTIC_H) $(TM_P_H) $(INSN_ATTR_H) intl.h $(TARGET_H) \\\n+   $(FLAGS_H) $(PARAMS_H) $(DBGCNT_H) debug.h \\\n+   $(EXCEPT_H) $(LTO_STREAMER_H) opts-diagnostic.h\n+opts-global.o : opts-global.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+   $(DIAGNOSTIC_CORE_H) $(OPTS_H) $(FLAGS_H) $(GGC_H) $(TM_H) $(RTL_H) \\\n+   output.h $(PLUGIN_H) $(TREE_PASS_H)\n opts-common.o : opts-common.c $(OPTS_H) $(FLAGS_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h intl.h $(DIAGNOSTIC_H) $(TM_H)\n targhooks.o : targhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\"}, {"sha": "a3dd291d095986f496a6d1937d87c2c089a44fe9", "filename": "gcc/common.opt", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21bf1558203226d4191d93a0b110b46611782f72/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21bf1558203226d4191d93a0b110b46611782f72/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=21bf1558203226d4191d93a0b110b46611782f72", "patch": "@@ -710,11 +710,11 @@ Common Report Var(flag_btr_bb_exclusive) Optimization\n Restrict target load migration not to re-use registers in any basic block\n \n fcall-saved-\n-Common Joined RejectNegative\n+Common Joined RejectNegative Var(common_deferred_options) Defer\n -fcall-saved-<register>\tMark <register> as being preserved across functions\n \n fcall-used-\n-Common Joined RejectNegative\n+Common Joined RejectNegative Var(common_deferred_options) Defer\n -fcall-used-<register>\tMark <register> as being corrupted by function calls\n \n ; Nonzero for -fcaller-saves: allocate values in regs that need to\n@@ -815,7 +815,7 @@ Common Var(flag_diagnostics_show_option) Init(1)\n Amend appropriate diagnostic messages with the command line option that controls them\n \n fdump-\n-Common Joined RejectNegative\n+Common Joined RejectNegative Var(common_deferred_options) Defer\n -fdump-<type>\tDump various compiler internals to a file\n \n fdump-final-insns\n@@ -893,7 +893,7 @@ Common Report Var(flag_finite_math_only) Optimization\n Assume no NaNs or infinities are generated\n \n ffixed-\n-Common Joined RejectNegative\n+Common Joined RejectNegative Var(common_deferred_options) Defer\n -ffixed-<register>\tMark <register> as being unavailable to the compiler\n \n ffloat-store\n@@ -1306,11 +1306,11 @@ Common Report Var(flag_pie,1)\n Generate position-independent code for executables if possible (small mode)\n \n fplugin=\n-Common Joined RejectNegative\n+Common Joined RejectNegative Var(common_deferred_options) Defer\n Specify a plugin to load\n \n fplugin-arg-\n-Common Joined RejectNegative\n+Common Joined RejectNegative Var(common_deferred_options) Defer\n -fplugin-arg-<name>-<key>[=<value>]\tSpecify argument <key>=<value> for plugin <name>\n \n fpredictive-commoning\n@@ -1573,14 +1573,14 @@ Common Alias(fstack-check=, specific, no)\n Insert stack checking code into the program.  Same as -fstack-check=specific\n \n fstack-limit\n-Common\n+Common Var(common_deferred_options) Defer\n \n fstack-limit-register=\n-Common RejectNegative Joined\n+Common RejectNegative Joined Var(common_deferred_options) Defer\n -fstack-limit-register=<register>\tTrap if the stack goes past <register>\n \n fstack-limit-symbol=\n-Common RejectNegative Joined\n+Common RejectNegative Joined Var(common_deferred_options) Defer\n -fstack-limit-symbol=<name>\tTrap if the stack goes past symbol <name>\n \n fstack-protector"}, {"sha": "0538393d2e7d5a7d584c5e9b73f73f61a8159b7e", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21bf1558203226d4191d93a0b110b46611782f72/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21bf1558203226d4191d93a0b110b46611782f72/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=21bf1558203226d4191d93a0b110b46611782f72", "patch": "@@ -200,6 +200,12 @@ option is used and 0 when the ``no-'' form is used.\n If the option takes an argument and has the @code{UInteger} property,\n @var{var} is an integer variable that stores the value of the argument.\n \n+@item\n+If the option has the @code{Defer} property, @var{var} is a pointer to\n+a @code{VEC(cl_deferred_option,heap)} that stores the option for later\n+processing.  (@var{var} is declared with type @code{void *} and needs\n+to be cast to @code{VEC(cl_deferred_option,heap)} before use.)\n+\n @item\n Otherwise, if the option takes an argument, @var{var} is a pointer to\n the argument string.  The pointer will be null if the argument is optional\n@@ -255,6 +261,10 @@ The main purpose of this property is to support synonymous options.\n The first option should use @samp{Mask(@var{name})} and the others\n should use @samp{Mask(@var{name}) MaskExists}.\n \n+@item Defer\n+The option should be stored in a vector, specified with @code{Var},\n+for later processing.\n+\n @item Alias(@var{opt})\n @itemx Alias(@var{opt}, @var{arg})\n @itemx Alias(@var{opt}, @var{posarg}, @var{negarg})"}, {"sha": "99bbb3144756fca797af0ba1b51b7ec554673e73", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21bf1558203226d4191d93a0b110b46611782f72/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21bf1558203226d4191d93a0b110b46611782f72/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=21bf1558203226d4191d93a0b110b46611782f72", "patch": "@@ -148,7 +148,9 @@ function static_var(name, flags)\n # Return the type of variable that should be associated with the given flags.\n function var_type(flags)\n {\n-\tif (!flag_set_p(\"Joined.*\", flags) && !flag_set_p(\"Separate\", flags))\n+\tif (flag_set_p(\"Defer\", flags))\n+\t\treturn \"void *\"\n+\telse if (!flag_set_p(\"Joined.*\", flags) && !flag_set_p(\"Separate\", flags))\n \t\treturn \"int \"\n \telse if (flag_set_p(\"UInteger\", flags))\n \t\treturn \"int \"\n@@ -177,6 +179,8 @@ function var_type_struct(flags)\n # \"var_cond\" and \"var_value\" fields of its cl_options[] entry.\n function var_set(flags)\n {\n+\tif (flag_set_p(\"Defer\", flags))\n+\t\treturn \"CLVC_DEFER, 0\"\n \ts = nth_arg(1, opt_args(\"Var\", flags))\n \tif (s != \"\")\n \t\treturn \"CLVC_EQUAL, \" s"}, {"sha": "79d3f052bac86804bdae836bfcc42ff8d2ef30a2", "filename": "gcc/opts-common.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21bf1558203226d4191d93a0b110b46611782f72/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21bf1558203226d4191d93a0b110b46611782f72/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=21bf1558203226d4191d93a0b110b46611782f72", "patch": "@@ -958,6 +958,22 @@ set_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \tif (set_flag_var)\n \t  *(const char **) set_flag_var = \"\";\n \tbreak;\n+\n+    case CLVC_DEFER:\n+\t{\n+\t  VEC(cl_deferred_option,heap) *vec\n+\t    = (VEC(cl_deferred_option,heap) *) *(void **) flag_var;\n+\t  cl_deferred_option *p;\n+\n+\t  p = VEC_safe_push (cl_deferred_option, heap, vec, NULL);\n+\t  p->opt_index = opt_index;\n+\t  p->arg = arg;\n+\t  p->value = value;\n+\t  *(void **) flag_var = vec;\n+\t  if (set_flag_var)\n+\t    *(void **) set_flag_var = vec;\n+\t}\n+\tbreak;\n     }\n \n   if ((diagnostic_t) kind != DK_UNSPECIFIED"}, {"sha": "e4e62dbc36fcd3e85b58501761f04a2c37cbacd4", "filename": "gcc/opts-global.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21bf1558203226d4191d93a0b110b46611782f72/gcc%2Fopts-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21bf1558203226d4191d93a0b110b46611782f72/gcc%2Fopts-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-global.c?ref=21bf1558203226d4191d93a0b110b46611782f72", "patch": "@@ -0,0 +1,105 @@\n+/* Command line option handling.  Code involving global state that\n+   should not be shared with the driver.\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic-core.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+#include \"ggc.h\"\n+#include \"tm.h\" /* Required by rtl.h.  */\n+#include \"rtl.h\"\n+#include \"output.h\"\n+#include \"plugin.h\"\n+#include \"tree-pass.h\"\n+\n+void\n+handle_common_deferred_options (void)\n+{\n+  unsigned int i;\n+  cl_deferred_option *opt;\n+  VEC(cl_deferred_option,heap) *vec\n+    = (VEC(cl_deferred_option,heap) *) common_deferred_options;\n+\n+  FOR_EACH_VEC_ELT (cl_deferred_option, vec, i, opt)\n+    {\n+      switch (opt->opt_index)\n+\t{\n+\tcase OPT_fcall_used_:\n+\t  fix_register (opt->arg, 0, 1);\n+\t  break;\n+\n+\tcase OPT_fcall_saved_:\n+\t  fix_register (opt->arg, 0, 0);\n+\t  break;\n+\n+\tcase OPT_fdump_:\n+\t  if (!dump_switch_p (opt->arg))\n+\t    error (\"unrecognized command line option %<-fdump-%s%>\", opt->arg);\n+\t  break;\n+\n+\tcase OPT_ffixed_:\n+\t  /* Deferred.  */\n+\t  fix_register (opt->arg, 1, 1);\n+\t  break;\n+\n+\tcase OPT_fplugin_:\n+#ifdef ENABLE_PLUGIN\n+\t  add_new_plugin (opt->arg);\n+#else\n+\t  error (\"plugin support is disabled; configure with --enable-plugin\");\n+#endif\n+\t  break;\n+\n+\tcase OPT_fplugin_arg_:\n+#ifdef ENABLE_PLUGIN\n+\t  parse_plugin_arg_opt (opt->arg);\n+#else\n+\t  error (\"plugin support is disabled; configure with --enable-plugin\");\n+#endif\n+\t  break;\n+\n+\tcase OPT_fstack_limit:\n+\t  /* The real switch is -fno-stack-limit.  */\n+\t  gcc_assert (!opt->value);\n+\t  stack_limit_rtx = NULL_RTX;\n+\t  break;\n+\n+\tcase OPT_fstack_limit_register_:\n+\t  {\n+\t    int reg = decode_reg_name (opt->arg);\n+\t    if (reg < 0)\n+\t      error (\"unrecognized register name %qs\", opt->arg);\n+\t    else\n+\t      stack_limit_rtx = gen_rtx_REG (Pmode, reg);\n+\t  }\n+\t  break;\n+\n+\tcase OPT_fstack_limit_symbol_:\n+\t  stack_limit_rtx = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (opt->arg));\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n+}"}, {"sha": "ad3d6fcc1c6a0c9d3c806cd5c22a06c3c9818c9f", "filename": "gcc/opts.c", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21bf1558203226d4191d93a0b110b46611782f72/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21bf1558203226d4191d93a0b110b46611782f72/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=21bf1558203226d4191d93a0b110b46611782f72", "patch": "@@ -25,10 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n-#include \"rtl.h\"\n #include \"expr.h\"\n-#include \"ggc.h\"\n-#include \"output.h\"\n #include \"langhooks.h\"\n #include \"opts.h\"\n #include \"options.h\"\n@@ -39,10 +36,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts-diagnostic.h\"\n #include \"insn-attr.h\"\t\t/* For INSN_SCHEDULING.  */\n #include \"target.h\"\n-#include \"tree-pass.h\"\n #include \"dbgcnt.h\"\n #include \"debug.h\"\n-#include \"plugin.h\"\n #include \"except.h\"\n #include \"lto-streamer.h\"\n \n@@ -1443,7 +1438,8 @@ print_filtered_help (unsigned int include_flags,\n \t  else\n \t    strcpy (new_help, \"\\t\");\n \n-\t  if (flag_var != NULL)\n+\t  if (flag_var != NULL\n+\t      && option->var_type != CLVC_DEFER)\n \t    {\n \t      if (option->flags & CL_JOINED)\n \t\t{\n@@ -1842,11 +1838,8 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_fcall_used_:\n-      fix_register (arg, 0, 1);\n-      break;\n-\n     case OPT_fcall_saved_:\n-      fix_register (arg, 0, 0);\n+      /* Deferred.  */\n       break;\n \n     case OPT_fcompare_debug_second:\n@@ -1880,8 +1873,7 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_fdump_:\n-      if (!dump_switch_p (arg))\n-\treturn false;\n+      /* Deferred.  */\n       break;\n \n     case OPT_ffp_contract_:\n@@ -1914,7 +1906,7 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_ffixed_:\n-      fix_register (arg, 1, 1);\n+      /* Deferred.  */\n       break;\n \n     case OPT_finline_limit_:\n@@ -1949,19 +1941,8 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_fplugin_:\n-#ifdef ENABLE_PLUGIN\n-      add_new_plugin (arg);\n-#else\n-      error (\"plugin support is disabled; configure with --enable-plugin\");\n-#endif\n-      break;\n-\n     case OPT_fplugin_arg_:\n-#ifdef ENABLE_PLUGIN\n-      parse_plugin_arg_opt (arg);\n-#else\n-      error (\"plugin support is disabled; configure with --enable-plugin\");\n-#endif\n+      /* Deferred.  */\n       break;\n \n     case OPT_fprofile_dir_:\n@@ -2087,21 +2068,12 @@ common_handle_option (struct gcc_options *opts,\n       /* The real switch is -fno-stack-limit.  */\n       if (value)\n \treturn false;\n-      stack_limit_rtx = NULL_RTX;\n+      /* Deferred.  */\n       break;\n \n     case OPT_fstack_limit_register_:\n-      {\n-\tint reg = decode_reg_name (arg);\n-\tif (reg < 0)\n-\t  error (\"unrecognized register name \\\"%s\\\"\", arg);\n-\telse\n-\t  stack_limit_rtx = gen_rtx_REG (Pmode, reg);\n-      }\n-      break;\n-\n     case OPT_fstack_limit_symbol_:\n-      stack_limit_rtx = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (arg));\n+      /* Deferred.  */\n       break;\n \n     case OPT_ftree_vectorizer_verbose_:\n@@ -2383,6 +2355,7 @@ option_enabled (int opt_idx, void *opts)\n \treturn (*(int *) flag_var & option->var_value) != 0;\n \n       case CLVC_STRING:\n+      case CLVC_DEFER:\n \tbreak;\n       }\n   return -1;\n@@ -2421,6 +2394,9 @@ get_option_state (struct gcc_options *opts, int option,\n \tstate->data = \"\";\n       state->size = strlen ((const char *) state->data) + 1;\n       break;\n+\n+    case CLVC_DEFER:\n+      return false;\n     }\n   return true;\n }"}, {"sha": "9bbbced721af139ddf81025fdb82c35d6fe363a7", "filename": "gcc/opts.h", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21bf1558203226d4191d93a0b110b46611782f72/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21bf1558203226d4191d93a0b110b46611782f72/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=21bf1558203226d4191d93a0b110b46611782f72", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_OPTS_H\n \n #include \"input.h\"\n+#include \"vec.h\"\n \n /* Specifies how a switch's VAR_VALUE relates to its FLAG_VAR.  */\n enum cl_var_type {\n@@ -39,7 +40,11 @@ enum cl_var_type {\n \n   /* The switch takes a string argument and FLAG_VAR points to that\n      argument.  */\n-  CLVC_STRING\n+  CLVC_STRING,\n+\n+  /* The switch should be stored in the VEC pointed to by FLAG_VAR for\n+     later processing.  */\n+  CLVC_DEFER\n };\n \n struct cl_option\n@@ -158,6 +163,20 @@ struct cl_decoded_option\n   int errors;\n };\n \n+/* Structure describing an option deferred for handling after the main\n+   option handlers.  */\n+\n+typedef struct\n+{\n+  /* Elements from struct cl_decoded_option used for deferred\n+     options.  */\n+  size_t opt_index;\n+  const char *arg;\n+  int value;\n+} cl_deferred_option;\n+DEF_VEC_O(cl_deferred_option);\n+DEF_VEC_ALLOC_O(cl_deferred_option,heap);\n+\n /* Structure describing a single option-handling callback.  */\n \n struct cl_option_handler_func\n@@ -264,4 +283,5 @@ extern void control_warning_option (unsigned int opt_index, int kind,\n \t\t\t\t    struct gcc_options *opts_set,\n \t\t\t\t    diagnostic_context *dc);\n extern void print_ignored_options (void);\n+extern void handle_common_deferred_options (void);\n #endif"}, {"sha": "c77db524789f1aa49c7a06475dcb9552e21fffbe", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21bf1558203226d4191d93a0b110b46611782f72/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21bf1558203226d4191d93a0b110b46611782f72/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=21bf1558203226d4191d93a0b110b46611782f72", "patch": "@@ -2359,6 +2359,8 @@ toplev_main (int argc, char **argv)\n \t\t  save_decoded_options, save_decoded_options_count,\n \t\t  UNKNOWN_LOCATION, global_dc);\n \n+  handle_common_deferred_options ();\n+\n   init_local_tick ();\n \n   initialize_plugins ();"}]}