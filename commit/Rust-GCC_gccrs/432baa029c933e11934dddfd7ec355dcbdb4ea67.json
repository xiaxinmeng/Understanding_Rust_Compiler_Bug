{"sha": "432baa029c933e11934dddfd7ec355dcbdb4ea67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMyYmFhMDI5YzkzM2UxMTkzNGRkZGZkN2VjMzU1ZGNiZGI0ZWE2Nw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-08-15T18:46:53Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-08-15T18:46:53Z"}, "message": "re PR target/72867 (SSE/AVX/AVX512: incorrect optimization of VMINPS/VMAXPS at compile time)\n\n\tPR target/72867\n\t* config/i386/sse.md (<code><mode>3<mask_name><round_saeonly_name>):\n\tEmit ieee_<ieee_maxmin><mode>3<mask_name><round_saeonly_name>\n\tfor !flag_finite_math_only or flag_signed_zeros.\n\t(*<code><mode>3<mask_name><round_saeonly_name>): Rename from\n\t*<code><mode>3_finite<mask_name><round_saeonly_name>.  Do not\n\tdepend on flag_finite_math_only.\n\t(ieee_<ieee_maxmin><mode>3<mask_name><round_saeonly_name>):\n\tNew insn pattern.\n\t(*<code><mode>3<mask_name><round_saeonly_name>): Remove.\n\t(*ieee_smin<mode>3): Ditto.\n\t(*ieee_smax<mode>3): Ditto.\n\t* config/i386/mmx.md (mmx_<code>v2sf3): Emit\n\tmmx_ieee_<ieee_maxmin>v2sf3 for !flag_finite_math_only or\n\tflag_signed_zeros.\n\t(*mmx_<code>v2sf3): Rename from *mmx_<code>v2sf3_finite.  Do not\n\tdepend on flag_finite_math_only.\n\t(mmx_ieee_<ieee_maxmin>v2sf3): New insn pattern.\n\t(*mmx_<code>v2sf3): Remove.\n\t* config/i386/subst.md (round_saeonly_mask_arg3): New subst attribute.\n\t* config/i386/i386.c (ix86_expand_sse_fp_mimnax): Check\n\tflag_signed_zeros instead of !flag_unsafe_math_optimizations.\n\ntestsuite/ChangeLog:\n\n\tPR target/72867\n\t* gcc.target/i386/pr72867.c: New test.\n\nFrom-SVN: r239487", "tree": {"sha": "3d80b7ede24baff6d342431517b6fd266918e311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d80b7ede24baff6d342431517b6fd266918e311"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/432baa029c933e11934dddfd7ec355dcbdb4ea67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432baa029c933e11934dddfd7ec355dcbdb4ea67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/432baa029c933e11934dddfd7ec355dcbdb4ea67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432baa029c933e11934dddfd7ec355dcbdb4ea67/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87155d4f6c847cd072321424831fd0ffb405265d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87155d4f6c847cd072321424831fd0ffb405265d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87155d4f6c847cd072321424831fd0ffb405265d"}], "stats": {"total": 200, "additions": 123, "deletions": 77}, "files": [{"sha": "c380045cafef2dc6c1b1df85540d9911dd438737", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432baa029c933e11934dddfd7ec355dcbdb4ea67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432baa029c933e11934dddfd7ec355dcbdb4ea67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=432baa029c933e11934dddfd7ec355dcbdb4ea67", "patch": "@@ -1,3 +1,28 @@\n+2016-08-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/72867\n+\t* config/i386/sse.md (<code><mode>3<mask_name><round_saeonly_name>):\n+\tEmit ieee_<ieee_maxmin><mode>3<mask_name><round_saeonly_name>\n+\tfor !flag_finite_math_only or flag_signed_zeros.\n+\t(*<code><mode>3<mask_name><round_saeonly_name>): Rename from\n+\t*<code><mode>3_finite<mask_name><round_saeonly_name>.  Do not\n+\tdepend on flag_finite_math_only.\n+\t(ieee_<ieee_maxmin><mode>3<mask_name><round_saeonly_name>):\n+\tNew insn pattern.\n+\t(*<code><mode>3<mask_name><round_saeonly_name>): Remove.\n+\t(*ieee_smin<mode>3): Ditto.\n+\t(*ieee_smax<mode>3): Ditto.\n+\t* config/i386/mmx.md (mmx_<code>v2sf3): Emit\n+\tmmx_ieee_<ieee_maxmin>v2sf3 for !flag_finite_math_only or\n+\tflag_signed_zeros.\n+\t(*mmx_<code>v2sf3): Rename from *mmx_<code>v2sf3_finite.  Do not\n+\tdepend on flag_finite_math_only.\n+\t(mmx_ieee_<ieee_maxmin>v2sf3): New insn pattern.\n+\t(*mmx_<code>v2sf3): Remove.\n+\t* config/i386/subst.md (round_saeonly_mask_arg3): New subst attribute.\n+\t* config/i386/i386.c (ix86_expand_sse_fp_mimnax): Check\n+\tflag_signed_zeros instead of !flag_unsafe_math_optimizations.\n+\n 2016-08-15  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/73650"}, {"sha": "02bfcbf49b23ddfe303715386aa8f99e8c7243f3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432baa029c933e11934dddfd7ec355dcbdb4ea67/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432baa029c933e11934dddfd7ec355dcbdb4ea67/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=432baa029c933e11934dddfd7ec355dcbdb4ea67", "patch": "@@ -23404,7 +23404,7 @@ ix86_expand_sse_fp_minmax (rtx dest, enum rtx_code code, rtx cmp_op0,\n \n   /* We want to check HONOR_NANS and HONOR_SIGNED_ZEROS here,\n      but MODE may be a vector mode and thus not appropriate.  */\n-  if (!flag_finite_math_only || !flag_unsafe_math_optimizations)\n+  if (!flag_finite_math_only || flag_signed_zeros)\n     {\n       int u = is_min ? UNSPEC_IEEE_MIN : UNSPEC_IEEE_MAX;\n       rtvec v;"}, {"sha": "e5d2fd01146da90263b81c2a3b8c5de8092da23c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432baa029c933e11934dddfd7ec355dcbdb4ea67/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432baa029c933e11934dddfd7ec355dcbdb4ea67/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=432baa029c933e11934dddfd7ec355dcbdb4ea67", "patch": "@@ -885,6 +885,14 @@\n \t\t\t      (umax \"maxu\") (umin \"minu\")])\n (define_code_attr maxmin_float [(smax \"max\") (smin \"min\")])\n \n+(define_int_iterator IEEE_MAXMIN\n+\t[UNSPEC_IEEE_MAX\n+\t UNSPEC_IEEE_MIN])\n+\n+(define_int_attr ieee_maxmin\n+\t[(UNSPEC_IEEE_MAX \"max\")\n+\t (UNSPEC_IEEE_MIN \"min\")])\n+\n ;; Mapping of logic operators\n (define_code_iterator any_logic [and ior xor])\n (define_code_iterator any_or [ior xor])\n@@ -17401,14 +17409,6 @@\n ;; Their operands are not commutative, and thus they may be used in the\n ;; presence of -0.0 and NaN.\n \n-(define_int_iterator IEEE_MAXMIN\n-\t[UNSPEC_IEEE_MAX\n-\t UNSPEC_IEEE_MIN])\n-\n-(define_int_attr ieee_maxmin\n-\t[(UNSPEC_IEEE_MAX \"max\")\n-\t (UNSPEC_IEEE_MIN \"min\")])\n-\n (define_insn \"*ieee_s<ieee_maxmin><mode>3\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=x,v\")\n \t(unspec:MODEF"}, {"sha": "99922332e8730a626abc0d647520a77d769d4daf", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432baa029c933e11934dddfd7ec355dcbdb4ea67/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432baa029c933e11934dddfd7ec355dcbdb4ea67/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=432baa029c933e11934dddfd7ec355dcbdb4ea67", "patch": "@@ -296,41 +296,54 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n-;; ??? For !flag_finite_math_only, the representation with SMIN/SMAX\n-;; isn't really correct, as those rtl operators aren't defined when\n-;; applied to NaNs.  Hopefully the optimizers won't get too smart on us.\n-\n (define_expand \"mmx_<code>v2sf3\"\n   [(set (match_operand:V2SF 0 \"register_operand\")\n         (smaxmin:V2SF\n \t  (match_operand:V2SF 1 \"nonimmediate_operand\")\n \t  (match_operand:V2SF 2 \"nonimmediate_operand\")))]\n   \"TARGET_3DNOW\"\n {\n-  if (!flag_finite_math_only)\n-    operands[1] = force_reg (V2SFmode, operands[1]);\n-  ix86_fixup_binary_operands_no_copy (<CODE>, V2SFmode, operands);\n+  if (!flag_finite_math_only || flag_signed_zeros)\n+    {\n+      operands[1] = force_reg (V2SFmode, operands[1]);\n+      emit_insn (gen_mmx_ieee_<maxmin_float>v2sf3\n+\t\t (operands[0], operands[1], operands[2]));\n+      DONE;\n+    }\n+  else\n+    ix86_fixup_binary_operands_no_copy (<CODE>, V2SFmode, operands);\n })\n \n-(define_insn \"*mmx_<code>v2sf3_finite\"\n+;; These versions of the min/max patterns are intentionally ignorant of\n+;; their behavior wrt -0.0 and NaN (via the commutative operand mark).\n+;; Since both the tree-level MAX_EXPR and the rtl-level SMAX operator\n+;; are undefined in this condition, we're certain this is correct.\n+\n+(define_insn \"*mmx_<code>v2sf3\"\n   [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n         (smaxmin:V2SF\n \t  (match_operand:V2SF 1 \"nonimmediate_operand\" \"%0\")\n \t  (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_3DNOW && flag_finite_math_only\n-   && ix86_binary_operator_ok (<CODE>, V2SFmode, operands)\"\n+  \"TARGET_3DNOW && ix86_binary_operator_ok (<CODE>, V2SFmode, operands)\"\n   \"pf<maxmin_float>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxadd\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n-(define_insn \"*mmx_<code>v2sf3\"\n+;; These versions of the min/max patterns implement exactly the operations\n+;;   min = (op1 < op2 ? op1 : op2)\n+;;   max = (!(op1 < op2) ? op1 : op2)\n+;; Their operands are not commutative, and thus they may be used in the\n+;; presence of -0.0 and NaN.\n+\n+(define_insn \"mmx_ieee_<ieee_maxmin>v2sf3\"\n   [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-        (smaxmin:V2SF\n-\t  (match_operand:V2SF 1 \"register_operand\" \"0\")\n-\t  (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n+        (unspec:V2SF\n+\t  [(match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t   (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")]\n+\t  IEEE_MAXMIN))]\n   \"TARGET_3DNOW\"\n-  \"pf<maxmin_float>\\t{%2, %0|%0, %2}\"\n+  \"pf<ieee_maxmin>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxadd\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])"}, {"sha": "9a39c74752d4005cc97158eaaacd11b275bee8de", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 32, "deletions": 53, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432baa029c933e11934dddfd7ec355dcbdb4ea67/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432baa029c933e11934dddfd7ec355dcbdb4ea67/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=432baa029c933e11934dddfd7ec355dcbdb4ea67", "patch": "@@ -1633,29 +1633,37 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"SF\")])\n \n-;; ??? For !flag_finite_math_only, the representation with SMIN/SMAX\n-;; isn't really correct, as those rtl operators aren't defined when\n-;; applied to NaNs.  Hopefully the optimizers won't get too smart on us.\n-\n (define_expand \"<code><mode>3<mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF 0 \"register_operand\")\n \t(smaxmin:VF\n \t  (match_operand:VF 1 \"<round_saeonly_nimm_predicate>\")\n \t  (match_operand:VF 2 \"<round_saeonly_nimm_predicate>\")))]\n   \"TARGET_SSE && <mask_mode512bit_condition> && <round_saeonly_mode512bit_condition>\"\n {\n-  if (!flag_finite_math_only)\n-    operands[1] = force_reg (<MODE>mode, operands[1]);\n-  ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\n+  if (!flag_finite_math_only || flag_signed_zeros)\n+    {\n+      operands[1] = force_reg (<MODE>mode, operands[1]);\n+      emit_insn (gen_ieee_<maxmin_float><mode>3<mask_name><round_saeonly_name>\n+\t\t (operands[0], operands[1], operands[2]\n+\t\t  <mask_operand_arg34>\n+\t\t  <round_saeonly_mask_arg3>));\n+      DONE;\n+    }\n+  else\n+    ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\n })\n \n-(define_insn \"*<code><mode>3_finite<mask_name><round_saeonly_name>\"\n+;; These versions of the min/max patterns are intentionally ignorant of\n+;; their behavior wrt -0.0 and NaN (via the commutative operand mark).\n+;; Since both the tree-level MAX_EXPR and the rtl-level SMAX operator\n+;; are undefined in this condition, we're certain this is correct.\n+\n+(define_insn \"*<code><mode>3<mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n \t(smaxmin:VF\n \t  (match_operand:VF 1 \"<round_saeonly_nimm_predicate>\" \"%0,v\")\n \t  (match_operand:VF 2 \"<round_saeonly_nimm_predicate>\" \"xBm,<round_saeonly_constraint>\")))]\n-  \"TARGET_SSE && flag_finite_math_only\n-   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n+  \"TARGET_SSE && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n    && <mask_mode512bit_condition> && <round_saeonly_mode512bit_condition>\"\n   \"@\n    <maxmin_float><ssemodesuffix>\\t{%2, %0|%0, %2}\n@@ -1666,16 +1674,23 @@\n    (set_attr \"prefix\" \"<mask_prefix3>\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<code><mode>3<mask_name><round_saeonly_name>\"\n+;; These versions of the min/max patterns implement exactly the operations\n+;;   min = (op1 < op2 ? op1 : op2)\n+;;   max = (!(op1 < op2) ? op1 : op2)\n+;; Their operands are not commutative, and thus they may be used in the\n+;; presence of -0.0 and NaN.\n+\n+(define_insn \"ieee_<ieee_maxmin><mode>3<mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n-\t(smaxmin:VF\n-\t  (match_operand:VF 1 \"register_operand\" \"0,v\")\n-\t  (match_operand:VF 2 \"<round_saeonly_nimm_predicate>\" \"xBm,<round_saeonly_constraint>\")))]\n-  \"TARGET_SSE && !flag_finite_math_only\n+\t(unspec:VF\n+\t  [(match_operand:VF 1 \"register_operand\" \"0,v\")\n+\t   (match_operand:VF 2 \"<round_saeonly_nimm_predicate>\" \"xBm,<round_saeonly_constraint>\")]\n+\t  IEEE_MAXMIN))]\n+  \"TARGET_SSE\n    && <mask_mode512bit_condition> && <round_saeonly_mode512bit_condition>\"\n   \"@\n-   <maxmin_float><ssemodesuffix>\\t{%2, %0|%0, %2}\n-   v<maxmin_float><ssemodesuffix>\\t{<round_saeonly_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_saeonly_mask_op3>}\"\n+   <ieee_maxmin><ssemodesuffix>\\t{%2, %0|%0, %2}\n+   v<ieee_maxmin><ssemodesuffix>\\t{<round_saeonly_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_saeonly_mask_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseadd\")\n    (set_attr \"btver2_sse_attr\" \"maxmin\")\n@@ -1700,42 +1715,6 @@\n    (set_attr \"prefix\" \"<round_saeonly_prefix>\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n-;; These versions of the min/max patterns implement exactly the operations\n-;;   min = (op1 < op2 ? op1 : op2)\n-;;   max = (!(op1 < op2) ? op1 : op2)\n-;; Their operands are not commutative, and thus they may be used in the\n-;; presence of -0.0 and NaN.\n-\n-(define_insn \"*ieee_smin<mode>3\"\n-  [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n-\t(unspec:VF\n-\t  [(match_operand:VF 1 \"register_operand\" \"0,v\")\n-\t   (match_operand:VF 2 \"vector_operand\" \"xBm,vm\")]\n-\t UNSPEC_IEEE_MIN))]\n-  \"TARGET_SSE\"\n-  \"@\n-   min<ssemodesuffix>\\t{%2, %0|%0, %2}\n-   vmin<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"type\" \"sseadd\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*ieee_smax<mode>3\"\n-  [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n-\t(unspec:VF\n-\t  [(match_operand:VF 1 \"register_operand\" \"0,v\")\n-\t   (match_operand:VF 2 \"vector_operand\" \"xBm,vm\")]\n-\t UNSPEC_IEEE_MAX))]\n-  \"TARGET_SSE\"\n-  \"@\n-   max<ssemodesuffix>\\t{%2, %0|%0, %2}\n-   vmax<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"type\" \"sseadd\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n (define_insn \"avx_addsubv4df3\"\n   [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n \t(vec_merge:V4DF"}, {"sha": "f0b8cf411bcdc1b5e819881ca887cd269beac45f", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432baa029c933e11934dddfd7ec355dcbdb4ea67/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432baa029c933e11934dddfd7ec355dcbdb4ea67/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=432baa029c933e11934dddfd7ec355dcbdb4ea67", "patch": "@@ -161,6 +161,7 @@\n (define_subst_attr \"round_saeonly_mask_op4\" \"round_saeonly\" \"\" \"<round_saeonly_mask_operand4>\")\n (define_subst_attr \"round_saeonly_mask_scalar_merge_op4\" \"round_saeonly\" \"\" \"<round_saeonly_mask_scalar_merge_operand4>\")\n (define_subst_attr \"round_saeonly_sd_mask_op5\" \"round_saeonly\" \"\" \"<round_saeonly_sd_mask_operand5>\")\n+(define_subst_attr \"round_saeonly_mask_arg3\" \"round_saeonly\" \"\" \", operands[<mask_expand_op3>]\")\n (define_subst_attr \"round_saeonly_constraint\" \"round_saeonly\" \"vm\" \"v\")\n (define_subst_attr \"round_saeonly_constraint2\" \"round_saeonly\" \"m\" \"v\")\n (define_subst_attr \"round_saeonly_nimm_predicate\" \"round_saeonly\" \"vector_operand\" \"register_operand\")"}, {"sha": "4b4c9ca2a1c0c8c31d1da7454b375670bb281878", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432baa029c933e11934dddfd7ec355dcbdb4ea67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432baa029c933e11934dddfd7ec355dcbdb4ea67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=432baa029c933e11934dddfd7ec355dcbdb4ea67", "patch": "@@ -1,3 +1,8 @@\n+2016-08-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/72867\n+\t* gcc.target/i386/pr72867.c: New test.\n+\n 2016-08-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-c++-common/dump-ada-spec-5.c: New test."}, {"sha": "b8614be74499c5a8e40468b6bb5c42f0552bf64a", "filename": "gcc/testsuite/gcc.target/i386/pr72867.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432baa029c933e11934dddfd7ec355dcbdb4ea67/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr72867.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432baa029c933e11934dddfd7ec355dcbdb4ea67/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr72867.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr72867.c?ref=432baa029c933e11934dddfd7ec355dcbdb4ea67", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/72867 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target sse } */\n+\n+#include \"sse-check.h\"\n+#include <xmmintrin.h>\n+\n+static void\n+sse_test (void)\n+{\n+  float nan = __builtin_nanf (\"\");\n+  \n+  __m128 x = _mm_min_ps(_mm_set1_ps(nan), _mm_set1_ps(1.0f));\n+\n+  if (x[0] != 1.0f)\n+    abort ();\n+\n+  x = _mm_min_ps(_mm_set1_ps(1.f), _mm_set1_ps(nan));\n+\n+  if (!__builtin_isnan (x[0]))\n+    abort ();\n+}"}]}