{"sha": "bbd399cf9190106e0f71566741f907bc33e00bb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJkMzk5Y2Y5MTkwMTA2ZTBmNzE1NjY3NDFmOTA3YmMzM2UwMGJiNA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-03-22T22:30:46Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-03-22T22:30:46Z"}, "message": "bfin-opts.h: New.\n\n\t* config/bfin/bfin-opts.h: New.\n\t* config/bfin/bfin.c (bfin_lib_id_given, bfin_cpu_type,\n\tbfin_si_revision, bfin_workarounds): Remove.\n\t(bfin_cpus): Make static const.\n\t(bfin_load_pic_reg): Check global_options_set.x_bfin_library_id\n\tnot bfin_lib_id_given.\n\t(bfin_handle_option): Don't set bfin_lib_id_given.  Access\n\tbfin_cpu_type, bfin_si_revision and bfin_workarounds via opts\n\tpointer. Use error_at.  Don't assert that global structures are in\n\tuse.\n\t* config/bfin/bfin.h: Include bfin-opts.h.\n\t(enum bfin_cpu_type, bfin_cpu_t): Move to bfin-opts.h.\n\t(bfin_cpu_type, bfin_si_revision, bfin_workarounds): Remove.\n\t* bfin.opt (config/bfin/bfin-opts.h): New HeaderInclude entry.\n\t(bfin_cpu_type, bfin_si_revision, bfin_workarounds): New Variable\n\tentries.\n\nFrom-SVN: r171314", "tree": {"sha": "9890456b6691f31d9c0a5005b4950c789dbcc476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9890456b6691f31d9c0a5005b4950c789dbcc476"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbd399cf9190106e0f71566741f907bc33e00bb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbd399cf9190106e0f71566741f907bc33e00bb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbd399cf9190106e0f71566741f907bc33e00bb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbd399cf9190106e0f71566741f907bc33e00bb4/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e1b4d5a046cbe6626f9142db5fb2aa169045213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1b4d5a046cbe6626f9142db5fb2aa169045213", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e1b4d5a046cbe6626f9142db5fb2aa169045213"}], "stats": {"total": 205, "additions": 122, "deletions": 83}, "files": [{"sha": "77c48c380ff677539865ed9392d9c4380731ca54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd399cf9190106e0f71566741f907bc33e00bb4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd399cf9190106e0f71566741f907bc33e00bb4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbd399cf9190106e0f71566741f907bc33e00bb4", "patch": "@@ -1,3 +1,22 @@\n+2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/bfin/bfin-opts.h: New.\n+\t* config/bfin/bfin.c (bfin_lib_id_given, bfin_cpu_type,\n+\tbfin_si_revision, bfin_workarounds): Remove.\n+\t(bfin_cpus): Make static const.\n+\t(bfin_load_pic_reg): Check global_options_set.x_bfin_library_id\n+\tnot bfin_lib_id_given.\n+\t(bfin_handle_option): Don't set bfin_lib_id_given.  Access\n+\tbfin_cpu_type, bfin_si_revision and bfin_workarounds via opts\n+\tpointer. Use error_at.  Don't assert that global structures are in\n+\tuse.\n+\t* config/bfin/bfin.h: Include bfin-opts.h.\n+\t(enum bfin_cpu_type, bfin_cpu_t): Move to bfin-opts.h.\n+\t(bfin_cpu_type, bfin_si_revision, bfin_workarounds): Remove.\n+\t* bfin.opt (config/bfin/bfin-opts.h): New HeaderInclude entry.\n+\t(bfin_cpu_type, bfin_si_revision, bfin_workarounds): New Variable\n+\tentries.\n+\n 2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/arm/arm.opt (mhard-float, msoft-float): Use Alias."}, {"sha": "d0780a6b52c605ab8a13af45bc7467b368b37aa9", "filename": "gcc/config/bfin/bfin-opts.h", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd399cf9190106e0f71566741f907bc33e00bb4/gcc%2Fconfig%2Fbfin%2Fbfin-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd399cf9190106e0f71566741f907bc33e00bb4/gcc%2Fconfig%2Fbfin%2Fbfin-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-opts.h?ref=bbd399cf9190106e0f71566741f907bc33e00bb4", "patch": "@@ -0,0 +1,59 @@\n+/* Definitions for the Blackfin port needed for option handling.\n+   Copyright (C) 2005, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef BFIN_OPTS_H\n+#define BFIN_OPTS_H\n+\n+/* CPU type.  */\n+typedef enum bfin_cpu_type\n+{\n+  BFIN_CPU_UNKNOWN,\n+  BFIN_CPU_BF512,\n+  BFIN_CPU_BF514,\n+  BFIN_CPU_BF516,\n+  BFIN_CPU_BF518,\n+  BFIN_CPU_BF522,\n+  BFIN_CPU_BF523,\n+  BFIN_CPU_BF524,\n+  BFIN_CPU_BF525,\n+  BFIN_CPU_BF526,\n+  BFIN_CPU_BF527,\n+  BFIN_CPU_BF531,\n+  BFIN_CPU_BF532,\n+  BFIN_CPU_BF533,\n+  BFIN_CPU_BF534,\n+  BFIN_CPU_BF536,\n+  BFIN_CPU_BF537,\n+  BFIN_CPU_BF538,\n+  BFIN_CPU_BF539,\n+  BFIN_CPU_BF542,\n+  BFIN_CPU_BF542M,\n+  BFIN_CPU_BF544,\n+  BFIN_CPU_BF544M,\n+  BFIN_CPU_BF547,\n+  BFIN_CPU_BF547M,\n+  BFIN_CPU_BF548,\n+  BFIN_CPU_BF548M,\n+  BFIN_CPU_BF549,\n+  BFIN_CPU_BF549M,\n+  BFIN_CPU_BF561\n+} bfin_cpu_t;\n+\n+#endif"}, {"sha": "5d0843748a84274186332c0f51c625763258d0e8", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 22, "deletions": 39, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd399cf9190106e0f71566741f907bc33e00bb4/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd399cf9190106e0f71566741f907bc33e00bb4/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=bbd399cf9190106e0f71566741f907bc33e00bb4", "patch": "@@ -86,9 +86,6 @@ const char *byte_reg_names[]   =  BYTE_REGISTER_NAMES;\n static int arg_regs[] = FUNCTION_ARG_REGISTERS;\n static int ret_regs[] = FUNCTION_RETURN_REGISTERS;\n \n-/* Nonzero if -mshared-library-id was given.  */\n-static int bfin_lib_id_given;\n-\n /* Nonzero if -fschedule-insns2 was given.  We override it and\n    call the scheduler ourselves during reorg.  */\n static int bfin_flag_schedule_insns2;\n@@ -97,17 +94,6 @@ static int bfin_flag_schedule_insns2;\n    reorganization.  */\n static int bfin_flag_var_tracking;\n \n-/* -mcpu support */\n-bfin_cpu_t bfin_cpu_type = BFIN_CPU_UNKNOWN;\n-\n-/* -msi-revision support. There are three special values:\n-   -1      -msi-revision=none.\n-   0xffff  -msi-revision=any.  */\n-int bfin_si_revision;\n-\n-/* The workarounds enabled */\n-unsigned int bfin_workarounds = 0;\n-\n struct bfin_cpu\n {\n   const char *name;\n@@ -116,7 +102,7 @@ struct bfin_cpu\n   unsigned int workarounds;\n };\n \n-struct bfin_cpu bfin_cpus[] =\n+static const struct bfin_cpu bfin_cpus[] =\n {\n   {\"bf512\", BFIN_CPU_BF512, 0x0000,\n    WA_SPECULATIVE_LOADS | WA_05000074},\n@@ -1309,7 +1295,7 @@ bfin_load_pic_reg (rtx dest)\n   if (i && i->local)\n     return pic_offset_table_rtx;\n       \n-  if (bfin_lib_id_given)\n+  if (global_options_set.x_bfin_library_id)\n     addr = plus_constant (pic_offset_table_rtx, -4 - bfin_library_id * 4);\n   else\n     addr = gen_rtx_PLUS (Pmode, pic_offset_table_rtx,\n@@ -2559,24 +2545,21 @@ bfin_class_likely_spilled_p (reg_class_t rclass)\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-bfin_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+bfin_handle_option (struct gcc_options *opts,\n+\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n \t\t    const struct cl_decoded_option *decoded,\n-\t\t    location_t loc ATTRIBUTE_UNUSED)\n+\t\t    location_t loc)\n {\n   size_t code = decoded->opt_index;\n   const char *arg = decoded->arg;\n   int value = decoded->value;\n \n-  gcc_assert (opts == &global_options);\n-  gcc_assert (opts_set == &global_options_set);\n-\n   switch (code)\n     {\n     case OPT_mshared_library_id_:\n       if (value > MAX_LIBRARY_ID)\n-\terror (\"-mshared-library-id=%s is not between 0 and %d\",\n-\t       arg, MAX_LIBRARY_ID);\n-      bfin_lib_id_given = 1;\n+\terror_at (loc, \"-mshared-library-id=%s is not between 0 and %d\",\n+\t\t  arg, MAX_LIBRARY_ID);\n       return true;\n \n     case OPT_mcpu_:\n@@ -2594,27 +2577,27 @@ bfin_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \n \tif (p == NULL)\n \t  {\n-\t    error (\"-mcpu=%s is not valid\", arg);\n+\t    error_at (loc, \"-mcpu=%s is not valid\", arg);\n \t    return false;\n \t  }\n \n-\tbfin_cpu_type = bfin_cpus[i].type;\n+\topts->x_bfin_cpu_type = bfin_cpus[i].type;\n \n \tq = arg + strlen (p);\n \n \tif (*q == '\\0')\n \t  {\n-\t    bfin_si_revision = bfin_cpus[i].si_revision;\n-\t    bfin_workarounds |= bfin_cpus[i].workarounds;\n+\t    opts->x_bfin_si_revision = bfin_cpus[i].si_revision;\n+\t    opts->x_bfin_workarounds |= bfin_cpus[i].workarounds;\n \t  }\n \telse if (strcmp (q, \"-none\") == 0)\n-\t  bfin_si_revision = -1;\n+\t  opts->x_bfin_si_revision = -1;\n       \telse if (strcmp (q, \"-any\") == 0)\n \t  {\n-\t    bfin_si_revision = 0xffff;\n-\t    while (bfin_cpus[i].type == bfin_cpu_type)\n+\t    opts->x_bfin_si_revision = 0xffff;\n+\t    while (bfin_cpus[i].type == opts->x_bfin_cpu_type)\n \t      {\n-\t\tbfin_workarounds |= bfin_cpus[i].workarounds;\n+\t\topts->x_bfin_workarounds |= bfin_cpus[i].workarounds;\n \t\ti++;\n \t      }\n \t  }\n@@ -2630,20 +2613,20 @@ bfin_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \t\t|| si_major > 0xff || si_minor > 0xff)\n \t      {\n \t      invalid_silicon_revision:\n-\t\terror (\"-mcpu=%s has invalid silicon revision\", arg);\n+\t\terror_at (loc, \"-mcpu=%s has invalid silicon revision\", arg);\n \t\treturn false;\n \t      }\n \n-\t    bfin_si_revision = (si_major << 8) | si_minor;\n+\t    opts->x_bfin_si_revision = (si_major << 8) | si_minor;\n \n-\t    while (bfin_cpus[i].type == bfin_cpu_type\n-\t\t   && bfin_cpus[i].si_revision != bfin_si_revision)\n+\t    while (bfin_cpus[i].type == opts->x_bfin_cpu_type\n+\t\t   && bfin_cpus[i].si_revision != opts->x_bfin_si_revision)\n \t      i++;\n \n-\t    if (bfin_cpus[i].type != bfin_cpu_type)\n+\t    if (bfin_cpus[i].type != opts->x_bfin_cpu_type)\n \t      goto invalid_silicon_revision;\n \n-\t    bfin_workarounds |= bfin_cpus[i].workarounds;\n+\t    opts->x_bfin_workarounds |= bfin_cpus[i].workarounds;\n \t  }\n \n \treturn true;\n@@ -2690,7 +2673,7 @@ bfin_option_override (void)\n     flag_omit_frame_pointer = 1;\n \n   /* Library identification */\n-  if (bfin_lib_id_given && ! TARGET_ID_SHARED_LIBRARY)\n+  if (global_options_set.x_bfin_library_id && ! TARGET_ID_SHARED_LIBRARY)\n     error (\"-mshared-library-id= specified without -mid-shared-library\");\n \n   if (stack_limit_rtx && TARGET_STACK_CHECK_L1)"}, {"sha": "441e202fc5b008bed19659f0fd65e6156ba978a7", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 4, "deletions": 43, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd399cf9190106e0f71566741f907bc33e00bb4/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd399cf9190106e0f71566741f907bc33e00bb4/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=bbd399cf9190106e0f71566741f907bc33e00bb4", "patch": "@@ -22,54 +22,15 @@\n #ifndef _BFIN_CONFIG\n #define _BFIN_CONFIG\n \n+#ifndef BFIN_OPTS_H\n+#include \"config/bfin/bfin-opts.h\"\n+#endif\n+\n #define OBJECT_FORMAT_ELF\n \n #define BRT 1\n #define BRF 0\n \n-/* CPU type.  */\n-typedef enum bfin_cpu_type\n-{\n-  BFIN_CPU_UNKNOWN,\n-  BFIN_CPU_BF512,\n-  BFIN_CPU_BF514,\n-  BFIN_CPU_BF516,\n-  BFIN_CPU_BF518,\n-  BFIN_CPU_BF522,\n-  BFIN_CPU_BF523,\n-  BFIN_CPU_BF524,\n-  BFIN_CPU_BF525,\n-  BFIN_CPU_BF526,\n-  BFIN_CPU_BF527,\n-  BFIN_CPU_BF531,\n-  BFIN_CPU_BF532,\n-  BFIN_CPU_BF533,\n-  BFIN_CPU_BF534,\n-  BFIN_CPU_BF536,\n-  BFIN_CPU_BF537,\n-  BFIN_CPU_BF538,\n-  BFIN_CPU_BF539,\n-  BFIN_CPU_BF542,\n-  BFIN_CPU_BF542M,\n-  BFIN_CPU_BF544,\n-  BFIN_CPU_BF544M,\n-  BFIN_CPU_BF547,\n-  BFIN_CPU_BF547M,\n-  BFIN_CPU_BF548,\n-  BFIN_CPU_BF548M,\n-  BFIN_CPU_BF549,\n-  BFIN_CPU_BF549M,\n-  BFIN_CPU_BF561\n-} bfin_cpu_t;\n-\n-/* Value of -mcpu= */\n-extern bfin_cpu_t bfin_cpu_type;\n-\n-/* Value of -msi-revision= */\n-extern int bfin_si_revision;\n-\n-extern unsigned int bfin_workarounds;\n-\n /* Print subsidiary information on the compiler version in use.  */\n #define TARGET_VERSION fprintf (stderr, \" (BlackFin bfin)\")\n "}, {"sha": "15aebf3fa2e2a9c0ccfc445ad6fb2c7e5a9f2c62", "filename": "gcc/config/bfin/bfin.opt", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd399cf9190106e0f71566741f907bc33e00bb4/gcc%2Fconfig%2Fbfin%2Fbfin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd399cf9190106e0f71566741f907bc33e00bb4/gcc%2Fconfig%2Fbfin%2Fbfin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.opt?ref=bbd399cf9190106e0f71566741f907bc33e00bb4", "patch": "@@ -1,6 +1,6 @@\n ; Options for the Blackfin port of the compiler\n ;\n-; Copyright (C) 2005, 2007, 2008 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2007, 2008, 2011 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -18,6 +18,23 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+HeaderInclude\n+config/bfin/bfin-opts.h\n+\n+; Value of -mcpu=.\n+Variable\n+bfin_cpu_t bfin_cpu_type = BFIN_CPU_UNKNOWN\n+\n+; -msi-revision support. There are three special values:\n+; -1      -msi-revision=none.\n+; 0xffff  -msi-revision=any.\n+Variable\n+int bfin_si_revision\n+\n+; The workarounds enabled.\n+Variable\n+unsigned int bfin_workarounds = 0\n+\n msim\n Target RejectNegative\n Use simulator runtime"}]}