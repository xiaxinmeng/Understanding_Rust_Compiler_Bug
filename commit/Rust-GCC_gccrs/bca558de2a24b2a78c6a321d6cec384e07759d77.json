{"sha": "bca558de2a24b2a78c6a321d6cec384e07759d77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNhNTU4ZGUyYTI0YjJhNzhjNmEzMjFkNmNlYzM4NGUwNzc1OWQ3Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-23T19:11:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-23T19:11:36Z"}, "message": "tree: Fix up get_narrower [PR94724]\n\nIn the recent get_narrower change, I wanted it to be efficient and avoid\nrecursion if there are many nested COMPOUND_EXPRs.  That builds the\nCOMPOUND_EXPR nest with the right arguments, but as build2_loc computes some\nflags like TREE_SIDE_EFFECTS, TREE_CONSTANT and TREE_READONLY, when it\nis called with something that will not be the argument in the end, those\nflags are computed incorrectly.\nSo, this patch instead uses an auto_vec and builds them in the reverse order\nso when they are built, they are built with the correct operands.\n\n2020-04-23  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/94724\n\t* tree.c (get_narrower): Instead of creating COMPOUND_EXPRs\n\ttemporarily with non-final second operand and updating it later,\n\tpush COMPOUND_EXPRs into a vector and process it in reverse,\n\tcreating COMPOUND_EXPRs with the final operands.\n\n\t* gcc.c-torture/execute/pr94724.c: New test.", "tree": {"sha": "001650ca80858285d7089a14cb14d6787412a3fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/001650ca80858285d7089a14cb14d6787412a3fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bca558de2a24b2a78c6a321d6cec384e07759d77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca558de2a24b2a78c6a321d6cec384e07759d77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bca558de2a24b2a78c6a321d6cec384e07759d77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca558de2a24b2a78c6a321d6cec384e07759d77/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06eca1acafa27e19e82dc73927394a7a4d0bdbc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06eca1acafa27e19e82dc73927394a7a4d0bdbc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06eca1acafa27e19e82dc73927394a7a4d0bdbc5"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "5ddb4332047ee27b28b94910044b92677c7cbb1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca558de2a24b2a78c6a321d6cec384e07759d77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca558de2a24b2a78c6a321d6cec384e07759d77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bca558de2a24b2a78c6a321d6cec384e07759d77", "patch": "@@ -1,3 +1,11 @@\n+2020-04-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/94724\n+\t* tree.c (get_narrower): Instead of creating COMPOUND_EXPRs\n+\ttemporarily with non-final second operand and updating it later,\n+\tpush COMPOUND_EXPRs into a vector and process it in reverse,\n+\tcreating COMPOUND_EXPRs with the final operands.\n+\n 2020-04-23  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \tPR target/94697"}, {"sha": "c6ae489c43dcd694803833b42245c3e71356cc4f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca558de2a24b2a78c6a321d6cec384e07759d77/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca558de2a24b2a78c6a321d6cec384e07759d77/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bca558de2a24b2a78c6a321d6cec384e07759d77", "patch": "@@ -1,9 +1,14 @@\n+2020-04-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/94724\n+\t* gcc.c-torture/execute/pr94724.c: New test.\n+\n 2020-04-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/93956\n \t* gfortran.dg/pointer_assign_13.f90: New test.\n \n-\t2020-04-23 Iain Sandoe <iain@sandoe.co.uk>\n+2020-04-23 Iain Sandoe <iain@sandoe.co.uk>\n \n \t* g++.dg/coroutines/coro-bad-alloc-00-bad-op-new.C: Adjust for\n \tchanged inline namespace."}, {"sha": "7c260f1ed07f7fc906a5c0e09c22b0347b54a9b2", "filename": "gcc/testsuite/gcc.c-torture/execute/pr94724.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca558de2a24b2a78c6a321d6cec384e07759d77/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr94724.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca558de2a24b2a78c6a321d6cec384e07759d77/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr94724.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr94724.c?ref=bca558de2a24b2a78c6a321d6cec384e07759d77", "patch": "@@ -0,0 +1,12 @@\n+/* PR middle-end/94724 */\n+\n+short a, b;\n+\n+int\n+main ()\n+{\n+  (0, (0, (a = 0 >= 0, b))) != 53601;\n+  if (a != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "da6b8e20edab7915da3456b7a0c629dddc63e8b0", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca558de2a24b2a78c6a321d6cec384e07759d77/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca558de2a24b2a78c6a321d6cec384e07759d77/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=bca558de2a24b2a78c6a321d6cec384e07759d77", "patch": "@@ -8881,18 +8881,22 @@ get_narrower (tree op, int *unsignedp_ptr)\n \n   if (TREE_CODE (op) == COMPOUND_EXPR)\n     {\n-      while (TREE_CODE (op) == COMPOUND_EXPR)\n+      do\n \top = TREE_OPERAND (op, 1);\n+      while (TREE_CODE (op) == COMPOUND_EXPR);\n       tree ret = get_narrower (op, unsignedp_ptr);\n       if (ret == op)\n \treturn win;\n-      op = win;\n-      for (tree *p = &win; TREE_CODE (op) == COMPOUND_EXPR;\n-\t   op = TREE_OPERAND (op, 1), p = &TREE_OPERAND (*p, 1))\n-\t*p = build2_loc (EXPR_LOCATION (op), COMPOUND_EXPR,\n-\t\t\t TREE_TYPE (ret), TREE_OPERAND (op, 0),\n-\t\t\t ret);\n-      return win;\n+      auto_vec <tree, 16> v;\n+      unsigned int i;\n+      for (tree op = win; TREE_CODE (op) == COMPOUND_EXPR;\n+\t   op = TREE_OPERAND (op, 1))\n+\tv.safe_push (op);\n+      FOR_EACH_VEC_ELT_REVERSE (v, i, op)\n+\tret = build2_loc (EXPR_LOCATION (op), COMPOUND_EXPR,\n+\t\t\t  TREE_TYPE (win), TREE_OPERAND (op, 0),\n+\t\t\t  ret);\n+      return ret;\n     }\n   while (TREE_CODE (op) == NOP_EXPR)\n     {"}]}