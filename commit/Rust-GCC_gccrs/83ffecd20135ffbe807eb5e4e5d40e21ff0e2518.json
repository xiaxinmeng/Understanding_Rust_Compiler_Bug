{"sha": "83ffecd20135ffbe807eb5e4e5d40e21ff0e2518", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNmZmVjZDIwMTM1ZmZiZTgwN2ViNWU0ZTVkNDBlMjFmZjBlMjUxOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1997-10-22T18:38:47Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1997-10-22T18:38:47Z"}, "message": "com.c (ffecom_expr_): Take an new arg TREE_TYPE that if non-null specifies the type in which to do...\n\n        * com.c (ffecom_expr_): Take an new arg TREE_TYPE that if non-null\n        specifies the type in which to do the calculation.  Change all callers.\n        [FFEBLD_opARRAYREF]: Force the index expr to use sizetype.\n\nFrom-SVN: r16148", "tree": {"sha": "8b8571f9ad856ea300bc501190706635a5fd02b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b8571f9ad856ea300bc501190706635a5fd02b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83ffecd20135ffbe807eb5e4e5d40e21ff0e2518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83ffecd20135ffbe807eb5e4e5d40e21ff0e2518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83ffecd20135ffbe807eb5e4e5d40e21ff0e2518", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83ffecd20135ffbe807eb5e4e5d40e21ff0e2518/comments", "author": null, "committer": null, "parents": [{"sha": "0bd83abd44afe09f841905c2b77e726eecfe016b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd83abd44afe09f841905c2b77e726eecfe016b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd83abd44afe09f841905c2b77e726eecfe016b"}], "stats": {"total": 63, "additions": 26, "deletions": 37}, "files": [{"sha": "eb3f9b5099c305794b4be798e13873e56de831f8", "filename": "gcc/f/ChangeLog.egcs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ffecd20135ffbe807eb5e4e5d40e21ff0e2518/gcc%2Ff%2FChangeLog.egcs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ffecd20135ffbe807eb5e4e5d40e21ff0e2518/gcc%2Ff%2FChangeLog.egcs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog.egcs?ref=83ffecd20135ffbe807eb5e4e5d40e21ff0e2518", "patch": "@@ -1,3 +1,9 @@\n+Wed Oct 22 11:37:41 1997  Richard Henderson  <rth@cygnus.com>\n+\n+\t* com.c (ffecom_expr_): Take an new arg TREE_TYPE that if non-null\n+\tspecifies the type in which to do the calculation.  Change all callers.\n+\t[FFEBLD_opARRAYREF]: Force the index expr to use sizetype.\n+\n Thu Oct 16 02:04:08 1997  Paul Koning <pkoning@xedia.com>\n \n \t* Make-lang.in (stmp-f2c.h): Don't configure the runtime"}, {"sha": "ba197f9829fb362055ddeb21f701654b483b0c53", "filename": "gcc/f/com.c", "status": "modified", "additions": 20, "deletions": 37, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ffecd20135ffbe807eb5e4e5d40e21ff0e2518/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ffecd20135ffbe807eb5e4e5d40e21ff0e2518/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=83ffecd20135ffbe807eb5e4e5d40e21ff0e2518", "patch": "@@ -433,7 +433,7 @@ static ffecomConcatList_ ffecom_concat_list_new_ (ffebld expr,\n static void ffecom_debug_kludge_ (tree aggr, char *aggr_type, ffesymbol member,\n \t\t\t\t  tree member_type, ffetargetOffset offset);\n static void ffecom_do_entry_ (ffesymbol fn, int entrynum);\n-static tree ffecom_expr_ (ffebld expr, tree dest_tree,\n+static tree ffecom_expr_ (ffebld expr, tree type_tree, tree dest_tree,\n \t\t\t  ffebld dest, bool *dest_used,\n \t\t\t  bool assignp);\n static tree ffecom_expr_intrinsic_ (ffebld expr, tree dest_tree,\n@@ -2666,11 +2666,15 @@ ffecom_do_entry_ (ffesymbol fn, int entrynum)\n    Recursive descent on expr while making corresponding tree nodes and\n    attaching type info and such.  If destination supplied and compatible\n    with temporary that would be made in certain cases, temporary isn't\n-   made, destination used instead, and dest_used flag set TRUE.  */\n+   made, destination used instead, and dest_used flag set TRUE.\n+\n+   If TREE_TYPE is non-null, it overrides the type that the expression\n+   would normally be computed in.  This is most useful for array indices\n+   which should be done in sizetype for efficiency.  */\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n static tree\n-ffecom_expr_ (ffebld expr, tree dest_tree,\n+ffecom_expr_ (ffebld expr, tree tree_type, tree dest_tree,\n \t      ffebld dest, bool *dest_used,\n \t      bool assignp)\n {\n@@ -2680,7 +2684,6 @@ ffecom_expr_ (ffebld expr, tree dest_tree,\n   ffeinfoBasictype bt;\n   ffeinfoKindtype kt;\n   tree t;\n-  tree tree_type;\n   tree dt;\t\t\t/* decl_tree for an ffesymbol. */\n   ffesymbol s;\n   enum tree_code code;\n@@ -2692,11 +2695,12 @@ ffecom_expr_ (ffebld expr, tree dest_tree,\n \n   bt = ffeinfo_basictype (ffebld_info (expr));\n   kt = ffeinfo_kindtype (ffebld_info (expr));\n+  if (!tree_type)\n+    tree_type = ffecom_tree_type[bt][kt];\n \n   switch (ffebld_op (expr))\n     {\n     case FFEBLD_opACCTER:\n-      tree_type = ffecom_tree_type[bt][kt];\n       {\n \tffebitCount i;\n \tffebit bits = ffebld_accter_bits (expr);\n@@ -2760,7 +2764,6 @@ ffecom_expr_ (ffebld expr, tree dest_tree,\n       return list;\n \n     case FFEBLD_opARRTER:\n-      tree_type = ffecom_tree_type[bt][kt];\n       {\n \tffetargetOffset i;\n \n@@ -2796,7 +2799,6 @@ ffecom_expr_ (ffebld expr, tree dest_tree,\n       return list;\n \n     case FFEBLD_opCONTER:\n-      tree_type = ffecom_tree_type[bt][kt];\n       item\n \t= ffecom_constantunion (&ffebld_constant_union (ffebld_conter (expr)),\n \t\t\t\tbt, kt, tree_type);\n@@ -2930,54 +2932,46 @@ ffecom_expr_ (ffebld expr, tree dest_tree,\n \t  t = ffecom_2 (ARRAY_REF,\n \t\t\tTYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (t))),\n \t\t\tt,\n-\t\t\tffecom_expr (dims[--i]));\n+\t\t\tffecom_expr_ (dims[--i], sizetype, NULL, NULL,\n+\t\t\t\t      NULL, FALSE));\n #endif\n \n \treturn t;\n       }\n \n     case FFEBLD_opUPLUS:\n-      tree_type = ffecom_tree_type[bt][kt];\n       return ffecom_1 (NOP_EXPR, tree_type, ffecom_expr (ffebld_left (expr)));\n \n     case FFEBLD_opPAREN:\t/* ~~~Make sure Fortran rules respected here */\n-      tree_type = ffecom_tree_type[bt][kt];\n       return ffecom_1 (NOP_EXPR, tree_type, ffecom_expr (ffebld_left (expr)));\n \n     case FFEBLD_opUMINUS:\n-      tree_type = ffecom_tree_type[bt][kt];\n       return ffecom_1 (NEGATE_EXPR, tree_type,\n \t\t       ffecom_expr (ffebld_left (expr)));\n \n     case FFEBLD_opADD:\n-      tree_type = ffecom_tree_type[bt][kt];\n       return ffecom_2 (PLUS_EXPR, tree_type,\n \t\t       ffecom_expr (ffebld_left (expr)),\n \t\t       ffecom_expr (ffebld_right (expr)));\n       break;\n \n     case FFEBLD_opSUBTRACT:\n-      tree_type = ffecom_tree_type[bt][kt];\n       return ffecom_2 (MINUS_EXPR, tree_type,\n \t\t       ffecom_expr (ffebld_left (expr)),\n \t\t       ffecom_expr (ffebld_right (expr)));\n \n     case FFEBLD_opMULTIPLY:\n-      tree_type = ffecom_tree_type[bt][kt];\n       return ffecom_2 (MULT_EXPR, tree_type,\n \t\t       ffecom_expr (ffebld_left (expr)),\n \t\t       ffecom_expr (ffebld_right (expr)));\n \n     case FFEBLD_opDIVIDE:\n-      tree_type = ffecom_tree_type[bt][kt];\n-      return\n-\tffecom_tree_divide_ (tree_type,\n-\t\t\t     ffecom_expr (ffebld_left (expr)),\n-\t\t\t     ffecom_expr (ffebld_right (expr)),\n-\t\t\t     dest_tree, dest, dest_used);\n+      return ffecom_tree_divide_ (tree_type,\n+\t\t\t          ffecom_expr (ffebld_left (expr)),\n+\t\t\t          ffecom_expr (ffebld_right (expr)),\n+\t\t\t          dest_tree, dest, dest_used);\n \n     case FFEBLD_opPOWER:\n-      tree_type = ffecom_tree_type[bt][kt];\n       {\n \tffebld left = ffebld_left (expr);\n \tffebld right = ffebld_right (expr);\n@@ -3093,12 +3087,10 @@ ffecom_expr_ (ffebld expr, tree dest_tree,\n       }\n \n     case FFEBLD_opNOT:\n-      tree_type = ffecom_tree_type[bt][kt];\n       switch (bt)\n \t{\n \tcase FFEINFO_basictypeLOGICAL:\n-\t  item\n-\t    = ffecom_truth_value_invert (ffecom_expr (ffebld_left (expr)));\n+\t  item = ffecom_truth_value_invert (ffecom_expr (ffebld_left (expr)));\n \t  return convert (tree_type, item);\n \n \tcase FFEINFO_basictypeINTEGER:\n@@ -3118,7 +3110,6 @@ ffecom_expr_ (ffebld expr, tree dest_tree,\n \t      != FFEINFO_basictypeCHARACTER);\n       /* Fall through.\t */\n     case FFEBLD_opSUBRREF:\n-      tree_type = ffecom_tree_type[bt][kt];\n       if (ffeinfo_where (ffebld_info (ffebld_left (expr)))\n \t  == FFEINFO_whereINTRINSIC)\n \t{\t\t\t/* Invocation of an intrinsic. */\n@@ -3161,7 +3152,6 @@ ffecom_expr_ (ffebld expr, tree dest_tree,\n       return item;\n \n     case FFEBLD_opAND:\n-      tree_type = ffecom_tree_type[bt][kt];\n       switch (bt)\n \t{\n \tcase FFEINFO_basictypeLOGICAL:\n@@ -3185,7 +3175,6 @@ ffecom_expr_ (ffebld expr, tree dest_tree,\n       break;\n \n     case FFEBLD_opOR:\n-      tree_type = ffecom_tree_type[bt][kt];\n       switch (bt)\n \t{\n \tcase FFEINFO_basictypeLOGICAL:\n@@ -3210,7 +3199,6 @@ ffecom_expr_ (ffebld expr, tree dest_tree,\n \n     case FFEBLD_opXOR:\n     case FFEBLD_opNEQV:\n-      tree_type = ffecom_tree_type[bt][kt];\n       switch (bt)\n \t{\n \tcase FFEINFO_basictypeLOGICAL:\n@@ -3234,7 +3222,6 @@ ffecom_expr_ (ffebld expr, tree dest_tree,\n       break;\n \n     case FFEBLD_opEQV:\n-      tree_type = ffecom_tree_type[bt][kt];\n       switch (bt)\n \t{\n \tcase FFEINFO_basictypeLOGICAL:\n@@ -3263,7 +3250,6 @@ ffecom_expr_ (ffebld expr, tree dest_tree,\n       if (ffebld_op (ffebld_left (expr)) == FFEBLD_opANY)\n \treturn error_mark_node;\n \n-      tree_type = ffecom_tree_type[bt][kt];\n       switch (bt)\n \t{\n \tcase FFEINFO_basictypeLOGICAL:\n@@ -3328,8 +3314,6 @@ ffecom_expr_ (ffebld expr, tree dest_tree,\n       code = GE_EXPR;\n \n     relational:\t\t/* :::::::::::::::::::: */\n-\n-      tree_type = ffecom_tree_type[bt][kt];\n       switch (ffeinfo_basictype (ffebld_info (ffebld_left (expr))))\n \t{\n \tcase FFEINFO_basictypeLOGICAL:\n@@ -3471,7 +3455,6 @@ ffecom_expr_ (ffebld expr, tree dest_tree,\n       break;\n \n     case FFEBLD_opPERCENT_LOC:\n-      tree_type = ffecom_tree_type[bt][kt];\n       item = ffecom_arg_ptr_to_expr (ffebld_left (expr), &list);\n       return convert (tree_type, item);\n \n@@ -11436,7 +11419,7 @@ ffecom_expand_let_stmt (ffebld dest, ffebld source)\n \n       if ((TREE_CODE (dest_tree) != VAR_DECL)\n \t  || TREE_ADDRESSABLE (dest_tree))\n-\tsource_tree = ffecom_expr_ (source, dest_tree, dest,\n+\tsource_tree = ffecom_expr_ (source, NULL_TREE, dest_tree, dest,\n \t\t\t\t    &dest_used, FALSE);\n       else\n \t{\n@@ -11478,7 +11461,7 @@ ffecom_expand_let_stmt (ffebld dest, ffebld source)\n tree\n ffecom_expr (ffebld expr)\n {\n-  return ffecom_expr_ (expr, NULL_TREE, NULL, NULL,\n+  return ffecom_expr_ (expr, NULL_TREE, NULL_TREE, NULL, NULL,\n \t\t       FALSE);\n }\n \n@@ -11489,7 +11472,7 @@ ffecom_expr (ffebld expr)\n tree\n ffecom_expr_assign (ffebld expr)\n {\n-  return ffecom_expr_ (expr, NULL_TREE, NULL, NULL,\n+  return ffecom_expr_ (expr, NULL_TREE, NULL_TREE, NULL, NULL,\n \t\t       TRUE);\n }\n \n@@ -11500,7 +11483,7 @@ ffecom_expr_assign (ffebld expr)\n tree\n ffecom_expr_assign_w (ffebld expr)\n {\n-  return ffecom_expr_ (expr, NULL_TREE, NULL, NULL,\n+  return ffecom_expr_ (expr, NULL_TREE, NULL_TREE, NULL, NULL,\n \t\t       TRUE);\n }\n "}]}