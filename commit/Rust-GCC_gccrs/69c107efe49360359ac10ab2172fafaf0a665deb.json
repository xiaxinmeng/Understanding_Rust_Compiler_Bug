{"sha": "69c107efe49360359ac10ab2172fafaf0a665deb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjljMTA3ZWZlNDkzNjAzNTlhYzEwYWIyMTcyZmFmYWYwYTY2NWRlYg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-02-18T07:26:20Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-02-18T07:26:20Z"}, "message": "2003-02-18  Michael Koch  <konqueror@gmx.de>\n\n\t* java/nio/channels/FileChannel.java\n\t(toString): New implementation, added documentation.\n\t(map): Added exception documentation.\n\t(size): Added exception documentation.\n\t(write): New methods, documentation work.\n\t(read): New methods, documentation work.\n\t(implCloseChannel): Rewrote exception documentation.\n\t(force): Throws IOException, added documentation.\n\t(lock): New methods.\n\t(tryLock): New methods.\n\t(position): New methods.\n\t(transferTo): New method.\n\t(transferFrom): New method.\n\t(truncate): New method.\n\t* java/nio/channels/spi/SelectorProvider.java\n\t(provider): Implemented.\n\t* Makefile.am\n\t(ordinary_java_source_files): Added the following files:\n\tgnu/java/nio/DatagramChannelImpl.java\n\tgnu/java/nio/FileChannelImpl.java\n\tgnu/java/nio/PipeImpl.java\n\tgnu/java/nio/SelectionKeyImpl.java\n\tgnu/java/nio/SelectorImpl.java\n\tgnu/java/nio/SelectorProviderImpl.java\n\tgnu/java/nio/ServerSocketChannelImpl.java\n\tgnu/java/nio/SocketChannelImpl.java\n\tjava/nio/channels/FileLock.java\n\t(nat_java_source_files): Added the following files:\n\tgnu/java/nio/natFileChannelImpl.cc\n\tgnu/java/nio/natSelectorImpl.cc\n\tgnu/java/nio/natSocketChannelImpl.cc\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r63028", "tree": {"sha": "9d984f276c26345880ee577e8d68261a6c8ee2d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d984f276c26345880ee577e8d68261a6c8ee2d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69c107efe49360359ac10ab2172fafaf0a665deb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69c107efe49360359ac10ab2172fafaf0a665deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69c107efe49360359ac10ab2172fafaf0a665deb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69c107efe49360359ac10ab2172fafaf0a665deb/comments", "author": null, "committer": null, "parents": [{"sha": "c7adfa01929ceb5978fa6cfe768eec7a9b75a24b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7adfa01929ceb5978fa6cfe768eec7a9b75a24b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7adfa01929ceb5978fa6cfe768eec7a9b75a24b"}], "stats": {"total": 326, "additions": 316, "deletions": 10}, "files": [{"sha": "db934865344d06b0202ae7141bd5d880c847beb5", "filename": "libjava/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69c107efe49360359ac10ab2172fafaf0a665deb/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69c107efe49360359ac10ab2172fafaf0a665deb/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=69c107efe49360359ac10ab2172fafaf0a665deb", "patch": "@@ -1,3 +1,38 @@\n+2003-02-18  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/nio/channels/FileChannel.java\n+\t(toString): New implementation, added documentation.\n+\t(map): Added exception documentation.\n+\t(size): Added exception documentation.\n+\t(write): New methods, documentation work.\n+\t(read): New methods, documentation work.\n+\t(implCloseChannel): Rewrote exception documentation.\n+\t(force): Throws IOException, added documentation.\n+\t(lock): New methods.\n+\t(tryLock): New methods.\n+\t(position): New methods.\n+\t(transferTo): New method.\n+\t(transferFrom): New method.\n+\t(truncate): New method.\n+\t* java/nio/channels/spi/SelectorProvider.java\n+\t(provider): Implemented.\n+\t* Makefile.am\n+\t(ordinary_java_source_files): Added the following files:\n+\tgnu/java/nio/DatagramChannelImpl.java\n+\tgnu/java/nio/FileChannelImpl.java\n+\tgnu/java/nio/PipeImpl.java\n+\tgnu/java/nio/SelectionKeyImpl.java\n+\tgnu/java/nio/SelectorImpl.java\n+\tgnu/java/nio/SelectorProviderImpl.java\n+\tgnu/java/nio/ServerSocketChannelImpl.java\n+\tgnu/java/nio/SocketChannelImpl.java\n+\tjava/nio/channels/FileLock.java\n+\t(nat_java_source_files): Added the following files:\n+\tgnu/java/nio/natFileChannelImpl.cc\n+\tgnu/java/nio/natSelectorImpl.cc\n+\tgnu/java/nio/natSocketChannelImpl.cc\n+\t* Makefile.in: Regenerated.\n+\n 2003-02-17  Tom Tromey  <tromey@redhat.com>\n \n \t* java/awt/image/ColorModel.java: Re-merged with Classpath."}, {"sha": "c68042b8d606e74eeeb9220158db283dd7121fc6", "filename": "libjava/Makefile.am", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69c107efe49360359ac10ab2172fafaf0a665deb/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69c107efe49360359ac10ab2172fafaf0a665deb/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=69c107efe49360359ac10ab2172fafaf0a665deb", "patch": "@@ -2064,11 +2064,19 @@ gnu/java/locale/LocaleInformation_zh_TW.java \\\n gnu/java/math/MPN.java \\\n gnu/java/nio/ByteBufferImpl.java \\\n gnu/java/nio/CharBufferImpl.java \\\n+gnu/java/nio/DatagramChannelImpl.java \\\n gnu/java/nio/DoubleBufferImpl.java \\\n+gnu/java/nio/FileChannelImpl.java \\\n gnu/java/nio/FloatBufferImpl.java \\\n gnu/java/nio/IntBufferImpl.java \\\n gnu/java/nio/LongBufferImpl.java \\\n+gnu/java/nio/PipeImpl.java \\\n+gnu/java/nio/SelectionKeyImpl.java \\\n+gnu/java/nio/SelectorImpl.java \\\n+gnu/java/nio/SelectorProviderImpl.java \\\n+gnu/java/nio/ServerSocketChannelImpl.java \\\n gnu/java/nio/ShortBufferImpl.java \\\n+gnu/java/nio/SocketChannelImpl.java \\\n gnu/java/nio/charset/ISO_8859_1.java \\\n gnu/java/nio/charset/Provider.java \\\n gnu/java/nio/charset/US_ASCII.java \\\n@@ -2196,6 +2204,7 @@ java/nio/channels/ClosedSelectorException.java \\\n java/nio/channels/ConnectionPendingException.java \\\n java/nio/channels/DatagramChannel.java \\\n java/nio/channels/FileChannel.java \\\n+java/nio/channels/FileLock.java \\\n java/nio/channels/FileLockInterruptionException.java \\\n java/nio/channels/GatheringByteChannel.java \\\n java/nio/channels/IllegalBlockingModeException.java \\\n@@ -2477,10 +2486,13 @@ gnu/gcj/runtime/natVMClassLoader.cc \\\n gnu/java/nio/natByteBufferImpl.cc \\\n gnu/java/nio/natCharBufferImpl.cc \\\n gnu/java/nio/natDoubleBufferImpl.cc \\\n+gnu/java/nio/natFileChannelImpl.cc \\\n gnu/java/nio/natFloatBufferImpl.cc \\\n gnu/java/nio/natIntBufferImpl.cc \\\n gnu/java/nio/natLongBufferImpl.cc \\\n+gnu/java/nio/natSelectorImpl.cc \\\n gnu/java/nio/natShortBufferImpl.cc \\\n+gnu/java/nio/natSocketChannelImpl.cc \\\n java/io/natFile.cc \\\n java/io/natFileDescriptor.cc \\\n java/io/natObjectInputStream.cc \\"}, {"sha": "7b7b1b8cd87613ad6508c2f60cc809dce5e96518", "filename": "libjava/Makefile.in", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69c107efe49360359ac10ab2172fafaf0a665deb/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69c107efe49360359ac10ab2172fafaf0a665deb/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=69c107efe49360359ac10ab2172fafaf0a665deb", "patch": "@@ -1824,11 +1824,19 @@ gnu/java/locale/LocaleInformation_zh_TW.java \\\n gnu/java/math/MPN.java \\\n gnu/java/nio/ByteBufferImpl.java \\\n gnu/java/nio/CharBufferImpl.java \\\n+gnu/java/nio/DatagramChannelImpl.java \\\n gnu/java/nio/DoubleBufferImpl.java \\\n+gnu/java/nio/FileChannelImpl.java \\\n gnu/java/nio/FloatBufferImpl.java \\\n gnu/java/nio/IntBufferImpl.java \\\n gnu/java/nio/LongBufferImpl.java \\\n+gnu/java/nio/PipeImpl.java \\\n+gnu/java/nio/SelectionKeyImpl.java \\\n+gnu/java/nio/SelectorImpl.java \\\n+gnu/java/nio/SelectorProviderImpl.java \\\n+gnu/java/nio/ServerSocketChannelImpl.java \\\n gnu/java/nio/ShortBufferImpl.java \\\n+gnu/java/nio/SocketChannelImpl.java \\\n gnu/java/nio/charset/ISO_8859_1.java \\\n gnu/java/nio/charset/Provider.java \\\n gnu/java/nio/charset/US_ASCII.java \\\n@@ -1956,6 +1964,7 @@ java/nio/channels/ClosedSelectorException.java \\\n java/nio/channels/ConnectionPendingException.java \\\n java/nio/channels/DatagramChannel.java \\\n java/nio/channels/FileChannel.java \\\n+java/nio/channels/FileLock.java \\\n java/nio/channels/FileLockInterruptionException.java \\\n java/nio/channels/GatheringByteChannel.java \\\n java/nio/channels/IllegalBlockingModeException.java \\\n@@ -2236,10 +2245,13 @@ gnu/gcj/runtime/natVMClassLoader.cc \\\n gnu/java/nio/natByteBufferImpl.cc \\\n gnu/java/nio/natCharBufferImpl.cc \\\n gnu/java/nio/natDoubleBufferImpl.cc \\\n+gnu/java/nio/natFileChannelImpl.cc \\\n gnu/java/nio/natFloatBufferImpl.cc \\\n gnu/java/nio/natIntBufferImpl.cc \\\n gnu/java/nio/natLongBufferImpl.cc \\\n+gnu/java/nio/natSelectorImpl.cc \\\n gnu/java/nio/natShortBufferImpl.cc \\\n+gnu/java/nio/natSocketChannelImpl.cc \\\n java/io/natFile.cc \\\n java/io/natFileDescriptor.cc \\\n java/io/natObjectInputStream.cc \\\n@@ -2413,9 +2425,11 @@ gnu/gcj/runtime/natNameFinder.lo gnu/gcj/runtime/natSharedLibLoader.lo \\\n gnu/gcj/runtime/natStackTrace.lo gnu/gcj/runtime/natStringBuffer.lo \\\n gnu/gcj/runtime/natVMClassLoader.lo gnu/java/nio/natByteBufferImpl.lo \\\n gnu/java/nio/natCharBufferImpl.lo gnu/java/nio/natDoubleBufferImpl.lo \\\n+gnu/java/nio/natFileChannelImpl.lo \\\n gnu/java/nio/natFloatBufferImpl.lo gnu/java/nio/natIntBufferImpl.lo \\\n gnu/java/nio/natLongBufferImpl.lo \\\n-gnu/java/nio/natShortBufferImpl.lo \\\n+gnu/java/nio/natSelectorImpl.lo \\\n+gnu/java/nio/natShortBufferImpl.lo gnu/java/nio/natSocketChannelImpl.lo \\\n java/io/natFile.lo java/io/natFileDescriptor.lo \\\n java/io/natObjectInputStream.lo \\\n java/io/natObjectOutputStream.lo java/io/natVMObjectStreamClass.lo \\\n@@ -2877,10 +2891,16 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/locale/LocaleInformation_zh_TW.P \\\n .deps/gnu/java/math/MPN.P .deps/gnu/java/nio/ByteBufferImpl.P \\\n .deps/gnu/java/nio/CharBufferImpl.P \\\n+.deps/gnu/java/nio/DatagramChannelImpl.P \\\n .deps/gnu/java/nio/DoubleBufferImpl.P \\\n+.deps/gnu/java/nio/FileChannelImpl.P \\\n .deps/gnu/java/nio/FloatBufferImpl.P .deps/gnu/java/nio/IntBufferImpl.P \\\n-.deps/gnu/java/nio/LongBufferImpl.P \\\n+.deps/gnu/java/nio/LongBufferImpl.P .deps/gnu/java/nio/PipeImpl.P \\\n+.deps/gnu/java/nio/SelectionKeyImpl.P .deps/gnu/java/nio/SelectorImpl.P \\\n+.deps/gnu/java/nio/SelectorProviderImpl.P \\\n+.deps/gnu/java/nio/ServerSocketChannelImpl.P \\\n .deps/gnu/java/nio/ShortBufferImpl.P \\\n+.deps/gnu/java/nio/SocketChannelImpl.P \\\n .deps/gnu/java/nio/charset/ISO_8859_1.P \\\n .deps/gnu/java/nio/charset/Provider.P \\\n .deps/gnu/java/nio/charset/US_ASCII.P \\\n@@ -2893,10 +2913,13 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/nio/natByteBufferImpl.P \\\n .deps/gnu/java/nio/natCharBufferImpl.P \\\n .deps/gnu/java/nio/natDoubleBufferImpl.P \\\n+.deps/gnu/java/nio/natFileChannelImpl.P \\\n .deps/gnu/java/nio/natFloatBufferImpl.P \\\n .deps/gnu/java/nio/natIntBufferImpl.P \\\n .deps/gnu/java/nio/natLongBufferImpl.P \\\n+.deps/gnu/java/nio/natSelectorImpl.P \\\n .deps/gnu/java/nio/natShortBufferImpl.P \\\n+.deps/gnu/java/nio/natSocketChannelImpl.P \\\n .deps/gnu/java/rmi/RMIMarshalledObjectInputStream.P \\\n .deps/gnu/java/rmi/RMIMarshalledObjectOutputStream.P \\\n .deps/gnu/java/rmi/dgc/DGCImpl.P .deps/gnu/java/rmi/dgc/DGCImpl_Skel.P \\\n@@ -3397,6 +3420,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/nio/channels/ConnectionPendingException.P \\\n .deps/java/nio/channels/DatagramChannel.P \\\n .deps/java/nio/channels/FileChannel.P \\\n+.deps/java/nio/channels/FileLock.P \\\n .deps/java/nio/channels/FileLockInterruptionException.P \\\n .deps/java/nio/channels/GatheringByteChannel.P \\\n .deps/java/nio/channels/IllegalBlockingModeException.P \\"}, {"sha": "3fa0f35843ee213498d6a253141c5272c03c8a7f", "filename": "libjava/java/nio/channels/FileChannel.java", "status": "modified", "additions": 238, "deletions": 5, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69c107efe49360359ac10ab2172fafaf0a665deb/libjava%2Fjava%2Fnio%2Fchannels%2FFileChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69c107efe49360359ac10ab2172fafaf0a665deb/libjava%2Fjava%2Fnio%2Fchannels%2FFileChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FFileChannel.java?ref=69c107efe49360359ac10ab2172fafaf0a665deb", "patch": "@@ -65,9 +65,17 @@ public abstract class FileChannel extends AbstractInterruptibleChannel\n       m = a;\n     }\n \n+    /**\n+     * Returns a string representation of the <code>MapMode</code> object.\n+     */\n     public String toString() \n     {\n-      return \"\" + m;\n+      if (this == READ_ONLY)\n+        return \"READ_ONLY\";\n+      else if (this == READ_WRITE)\n+        return \"READ_WRITE\";\n+\n+      return \"PRIVATE\";\n     }\n   }\n \n@@ -81,20 +89,28 @@ protected FileChannel ()\n   /**\n    * Maps the file into the memory.\n    *\n-   * @exception IOException If an error occurs.\n+   * @exception IllegalArgumentException If the preconditions on the parameters\n+   * do not hold.\n+   * @exception IOException If an I/O error occurs.\n+   * @exception NonReadableChannelException If mode is READ_ONLY but this channel was\n+   * not opened for reading.\n+   * @exception NonWritableChannelException If mode is READ_WRITE or PRIVATE but this\n+   * channel was not opened for writing.\n    */\n   public abstract MappedByteBuffer map(MapMode mode, long position, long size)\n     throws IOException;\n \n   /**\n    * Return the size of the file thus far\n+   * \n+   * @exception ClosedChannelException If this channel is closed.\n    */\n   public abstract long size() throws IOException;\n   \n   /**\n    * Writes data to the channel.\n    *\n-   * @exception IOException If an error occurs.\n+   * @exception IOException If an I/O error occurs.\n    */\n   public long write (ByteBuffer[] srcs) throws IOException\n   {\n@@ -110,26 +126,243 @@ public long write (ByteBuffer[] srcs) throws IOException\n   \n   /**\n    * Writes data to the channel.\n+   *\n+   * @exception IOException If an I/O error occurs.\n+   */\n+  public abstract int write (ByteBuffer src) throws IOException;\n+\n+  /**\n+   * Writes data to the channel.\n+   *\n+   * @exception AsynchronousCloseException If another thread closes this channel\n+   * while the transfer is in progress.\n+   * @exception ClosedByInterruptException If another thread interrupts the\n+   * current thread while the transfer is in progress, thereby closing both\n+   * channels and setting the current thread's interrupt status.\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception IllegalArgumentException If position is negative.\n+   * @exception IOException If an I/O error occurs.\n+   * @exception NonWritableChannelException If this channel was not opened for\n+   * writing.\n+   */\n+  public abstract int write (ByteBuffer srcs, long position) throws IOException;\n+\n+  /**\n+   * Writes data to the channel.\n+   *\n+   * @exception IOException If an I/O error occurs.\n    */\n   public abstract long write(ByteBuffer[] srcs, int offset, int length)\n     throws IOException;\n   \n   /**\n    * Reads data from the channel.\n+   *\n+   * @exception IOException If an I/O error occurs.\n+   */\n+  public abstract long read (ByteBuffer[] dsts, int offset, int length)\n+    throws IOException;\n+\n+  /**\n+   * Reads data from the channel.\n+   *\n+   * @exception IOException If an I/O error occurs.\n+   */\n+  public final long read (ByteBuffer[] dsts) throws IOException\n+  {\n+    long result = 0;\n+    \n+    for (int i = 0; i < dsts.length; i++)\n+      {\n+        read (dsts [i]);\n+      }\n+\n+    return result;\n+  }\n+\n+  /**\n+   * Reads data from the channel.\n+   *\n+   * @exception IOException If an I/O error occurs.\n    */\n   public abstract int read(ByteBuffer dst) throws IOException;\n   \n+  /**\n+   * Reads data from the channel.\n+   *\n+   * @exception AsynchronousCloseException If another thread closes this channel\n+   * while the transfer is in progress.\n+   * @exception ClosedByInterruptException If another thread interrupts the\n+   * current thread while the transfer is in progress, thereby closing both\n+   * channels and setting the current thread's interrupt status.\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception IllegalArgumentException If position is negative.\n+   * @exception IOException If an I/O error occurs.\n+   * @exception NonReadableChannelException If this channel was not opened for\n+   * reading.\n+   */\n+  public abstract int read(ByteBuffer dst, long position) throws IOException;\n+  \n   /**\n    * Closes the channel.\n    *\n    * This is called from @see close.\n    *\n-   * @exception IOException If an error occurs.\n+   * @exception IOException If an I/O error occurs.\n    */\n   protected abstract void implCloseChannel() throws IOException;\n \n   /**\n    * msync with the disk\n+   *\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception IOException If an I/O error occurs.\n+   */\n+  public abstract void force(boolean metaData) throws IOException;\n+\n+  /**\n+   * Creates a file lock for the whole assoziated file.\n+   *\n+   * @exception AsynchronousCloseException If another thread closes this channel\n+   * while the transfer is in progress.\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception FileLockInterruptionException If the invoking thread is\n+   * interrupted while blocked in this method.\n+   * @exception IOException If an I/O error occurs.\n+   * @exception NonReadableChannelException If shared is true and this channel\n+   * was not opened for reading.\n+   * @exception NonWritableChannelException If shared is false and this channel\n+   * was not opened for writing.\n+   * @exception OverlappingFileLockException If a lock that overlaps the\n+   * requested region is already held by this Java virtual machine, or if\n+   * another thread is already blocked in this method and is attempting to lock\n+   * an overlapping region.\n+   */\n+  public final FileLock lock () throws IOException\n+  {\n+    return lock (0, Long.MAX_VALUE, false);\n+  }\n+\n+  /**\n+   * Creates a file lock for a region of the assoziated file.\n+   *\n+   * @exception AsynchronousCloseException If another thread closes this channel\n+   * while the transfer is in progress.\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception FileLockInterruptionException If the invoking thread is\n+   * interrupted while blocked in this method.\n+   * @exception IllegalArgumentException If the preconditions on the parameters\n+   * do not hold.\n+   * @exception IOException If an I/O error occurs.\n+   * @exception OverlappingFileLockException If a lock that overlaps the\n+   * requested region is already held by this Java virtual machine, or if\n+   * another thread is already blocked in this method and is attempting to lock\n+   * an overlapping region.\n+   * @exception NonReadableChannelException If shared is true and this channel\n+   * was not opened for reading.\n+   * @exception NonWritableChannelException If shared is false and this channel\n+   * was not opened for writing.\n+   */\n+  public abstract FileLock lock (long position, long size, boolean shared)\n+    throws IOException;\n+\n+  /**\n+   * Tries to aqquire alock on the whole assoziated file.\n+   *\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception IOException If an I/O error occurs.\n+   * @exception OverlappingFileLockException If a lock that overlaps the\n+   * requested region is already held by this Java virtual machine, or if\n+   * another thread is already blocked in this method and is attempting to lock\n+   * an overlapping region.\n+   */\n+  public final FileLock tryLock () throws IOException\n+  {\n+    return tryLock (0, Long.MAX_VALUE, false);\n+  }\n+\n+  /**\n+   * Tries to aqquire a lock on a region of the assoziated file.\n+   *\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception IllegalArgumentException If the preconditions on the parameters\n+   * do not hold.\n+   * @exception IOException If an I/O error occurs.\n+   * @exception OverlappingFileLockException If a lock that overlaps the\n+   * requested region is already held by this Java virtual machine, or if\n+   * another thread is already blocked in this method and is attempting to lock\n+   * an overlapping region.\n+   */\n+  public abstract FileLock tryLock (long position, long size, boolean shared)\n+    throws IOException;\n+\n+  /**\n+   * Returns the current position on the file.\n+   *\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception IOException If an I/O error occurs.\n+   */\n+  public abstract long position () throws IOException;\n+\n+  /**\n+   * Sets the position of the channel on the assoziated file.\n+   *\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception IllegalArgumentException If newPosition is negative.\n+   * @exception IOException If an I/O error occurs.\n+   */\n+  public abstract FileChannel position (long newPosition) throws IOException;\n+\n+  /**\n+   * Transfers bytes from this channel's file to the given writable byte\n+   * channel.\n+   *\n+   * @exception AsynchronousCloseException If another thread closes this channel\n+   * while the transfer is in progress.\n+   * @exception ClosedByInterruptException If another thread interrupts the\n+   * current thread while the transfer is in progress, thereby closing both\n+   * channels and setting the current thread's interrupt status.\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception IllegalArgumentException If the preconditions on the parameters\n+   * do not hold.\n+   * @exception IOException If an I/O error occurs.\n+   * @exception NonReadableChannelException If this channel was not opened for\n+   * reading.\n+   * @exception NonWritableChannelException If the target channel was not\n+   * opened for writing.\n+   */\n+  public abstract long transferTo (long position, long count,\n+                                   WritableByteChannel target)\n+    throws IOException;\n+\n+  /**\n+   * Transfers bytes from the given readable channel into this channel.\n+   *\n+   * @exception AsynchronousCloseException If another thread closes this channel\n+   * while the transfer is in progress.\n+   * @exception ClosedByInterruptException If another thread interrupts the\n+   * current thread while the transfer is in progress, thereby closing both\n+   * channels and setting the current thread's interrupt status.\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception IllegalArgumentException If the preconditions on the parameters\n+   * do not hold.\n+   * @exception IOException If an I/O error occurs.\n+   * @exception NonReadableChannelException If the source channel was not\n+   * opened for reading.\n+   * @exception NonWritableChannelException If this channel was not opened for\n+   * writing.\n+   */\n+  public abstract long transferFrom (ReadableByteChannel src, long position,\n+                                     long count) throws IOException;\n+\n+  /**\n+   * Truncates the channel's file at <code>size</code>.\n+   *\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception IllegalArgumentException If size is negative.\n+   * @exception IOException If an I/O error occurs.\n+   * @exception NonWritableChannelException If this channel was not opened for\n+   * writing.\n    */\n-  public abstract void force(boolean metaData);    \n+  public abstract FileChannel truncate (long size) throws IOException;\n }"}, {"sha": "1d4ccfa5339bf49c7c4c93c6235ac6f66235aecf", "filename": "libjava/java/nio/channels/spi/SelectorProvider.java", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69c107efe49360359ac10ab2172fafaf0a665deb/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FSelectorProvider.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69c107efe49360359ac10ab2172fafaf0a665deb/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FSelectorProvider.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FSelectorProvider.java?ref=69c107efe49360359ac10ab2172fafaf0a665deb", "patch": "@@ -37,7 +37,7 @@\n \n package java.nio.channels.spi;\n \n-/* import gnu.java.nio.channels.SelectorProviderImpl; */\n+import gnu.java.nio.SelectorProviderImpl;\n import java.io.IOException;\n import java.nio.channels.DatagramChannel;\n import java.nio.channels.Pipe;\n@@ -97,8 +97,10 @@ public abstract ServerSocketChannel openServerSocketChannel ()\n    */\n   public static SelectorProvider provider ()\n   {\n-/*    if (pr == null) */\n-/*      pr = new SelectorProviderImpl (); */\n+    if (pr == null)\n+      {\n+        pr = new SelectorProviderImpl ();\n+      }\n     \n     return pr;\n   }"}]}