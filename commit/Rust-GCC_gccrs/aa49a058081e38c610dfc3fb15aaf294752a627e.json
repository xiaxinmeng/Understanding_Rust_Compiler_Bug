{"sha": "aa49a058081e38c610dfc3fb15aaf294752a627e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE0OWEwNTgwODFlMzhjNjEwZGZjM2ZiMTVhYWYyOTQ3NTJhNjI3ZQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2021-08-28T03:40:14Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2021-08-28T03:40:14Z"}, "message": "fix latent bootstrap-debug issue\n\nI've hit a bootstrap-debug error involving large subprograms in\ngcc/ada/sem_ch12.adb.  I'm afraid I couldn't narrow it down to a\nreasonable testcase.\n\nthread1 made different decisions about a block containing a\nbuiltin_eh_filter call because in one compilation, estimate_num_insns\nfound a cgraph_node for the builtin and could thus get to the\nis_simple_builtin test, but in the other it didn't.  With different\ninsn counts, one stage jump-threaded and the other didn't, and the\nresulting code diverged quite a bit.\n\nThe reason the builtin had a cgraph_node in one case but not the other\nwas that modref got a chance to analyze the builtin call when it was\nthe first stmt in the block, and that created the cgraph_node.\nHowever, when it was preceded by debug stmts, the loop in\nanalyze_function was cut short after the first debug stmt, because the\nsummary so far was not useful.\n\nThis patch fixes both issues: skip debug stmts in the analyze_function\nloop, so as to prevent them from affecting any decisions in the loop,\nand enable the insn count estimator to get to the is_simple_builtin\ntest when a cgraph_node has not been created for the builtin.\n\n\nfor  gcc/ChangeLog\n\n\t* ipa-modref.c (analyze_function): Skip debug stmts.\n\t* tree-inline.c (estimate_num_insn): Consider builtins even\n\twithout a cgraph_node.", "tree": {"sha": "f4a46c043da374dda9338454e0b43da6c01e19a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4a46c043da374dda9338454e0b43da6c01e19a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa49a058081e38c610dfc3fb15aaf294752a627e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa49a058081e38c610dfc3fb15aaf294752a627e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa49a058081e38c610dfc3fb15aaf294752a627e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa49a058081e38c610dfc3fb15aaf294752a627e/comments", "author": null, "committer": null, "parents": [{"sha": "1e52538d2b430a26032d736079518ecad3bcca44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e52538d2b430a26032d736079518ecad3bcca44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e52538d2b430a26032d736079518ecad3bcca44"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "6d49cc1410e87cbab854a848c1db2ee3fe4058c3", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa49a058081e38c610dfc3fb15aaf294752a627e/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa49a058081e38c610dfc3fb15aaf294752a627e/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=aa49a058081e38c610dfc3fb15aaf294752a627e", "patch": "@@ -2125,7 +2125,8 @@ analyze_function (function *f, bool ipa)\n   FOR_EACH_BB_FN (bb, f)\n     {\n       gimple_stmt_iterator si;\n-      for (si = gsi_after_labels (bb); !gsi_end_p (si); gsi_next (&si))\n+      for (si = gsi_start_nondebug_after_labels_bb (bb);\n+\t   !gsi_end_p (si); gsi_next_nondebug (&si))\n \t{\n \t  if (!analyze_stmt (summary, summary_lto,\n \t\t\t     gsi_stmt (si), ipa, &recursive_calls)"}, {"sha": "5e50e8013e2af3b1ab6f9b45f6421a8933f23dc2", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa49a058081e38c610dfc3fb15aaf294752a627e/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa49a058081e38c610dfc3fb15aaf294752a627e/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=aa49a058081e38c610dfc3fb15aaf294752a627e", "patch": "@@ -4436,8 +4436,8 @@ estimate_num_insns (gimple *stmt, eni_weights *weights)\n \t    /* Do not special case builtins where we see the body.\n \t       This just confuse inliner.  */\n \t    struct cgraph_node *node;\n-\t    if (!(node = cgraph_node::get (decl))\n-\t\t|| node->definition)\n+\t    if ((node = cgraph_node::get (decl))\n+\t\t&& node->definition)\n \t      ;\n \t    /* For buitins that are likely expanded to nothing or\n \t       inlined do not account operand costs.  */"}]}