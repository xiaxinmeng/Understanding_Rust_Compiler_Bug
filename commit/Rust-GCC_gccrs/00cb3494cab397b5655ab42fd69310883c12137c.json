{"sha": "00cb3494cab397b5655ab42fd69310883c12137c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBjYjM0OTRjYWIzOTdiNTY1NWFiNDJmZDY5MzEwODgzYzEyMTM3Yw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2019-09-03T21:41:02Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-08-21T04:48:27Z"}, "message": "x86: Add cost model for operation of mask registers.\n\ngcc/\n\n\tPR target/71453\n\t* config/i386/i386.h (struct processor_costs): Add member\n\tmask_to_integer, integer_to_mask, mask_load[3], mask_store[3],\n\tmask_move.\n\t* config/i386/x86-tune-costs.h (ix86_size_cost, i386_cost,\n\ti386_cost, pentium_cost, lakemont_cost, pentiumpro_cost,\n\tgeode_cost, k6_cost, athlon_cost, k8_cost, amdfam10_cost,\n\tbdver_cost, znver1_cost, znver2_cost, skylake_cost,\n\tbtver1_cost, btver2_cost, pentium4_cost, nocona_cost,\n\tatom_cost, slm_cost, intel_cost, generic_cost, core_cost):\n\tInitialize mask_load[3], mask_store[3], mask_move,\n\tinteger_to_mask, mask_to_integer for all target costs.\n\t* config/i386/i386.c (ix86_register_move_cost): Using cost\n\tmodel of mask registers.\n\t(inline_memory_move_cost): Ditto.\n\t(ix86_register_move_cost): Ditto.", "tree": {"sha": "1a4f9be91ab17d5187f9f9e4a3433e73bb51cc2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a4f9be91ab17d5187f9f9e4a3433e73bb51cc2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00cb3494cab397b5655ab42fd69310883c12137c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00cb3494cab397b5655ab42fd69310883c12137c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00cb3494cab397b5655ab42fd69310883c12137c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00cb3494cab397b5655ab42fd69310883c12137c/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b31b6b52612a6d4a7a84e71f6331464d68400d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b31b6b52612a6d4a7a84e71f6331464d68400d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b31b6b52612a6d4a7a84e71f6331464d68400d4"}], "stats": {"total": 185, "additions": 185, "deletions": 0}, "files": [{"sha": "548df57d5b3a82eccac2c718deca9d8e5230f196", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cb3494cab397b5655ab42fd69310883c12137c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cb3494cab397b5655ab42fd69310883c12137c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=00cb3494cab397b5655ab42fd69310883c12137c", "patch": "@@ -18740,6 +18740,29 @@ inline_memory_move_cost (machine_mode mode, enum reg_class regclass, int in)\n       return in ? ix86_cost->hard_register.sse_load [index]\n \t\t: ix86_cost->hard_register.sse_store [index];\n     }\n+  if (MASK_CLASS_P (regclass))\n+    {\n+      int index;\n+      switch (GET_MODE_SIZE (mode))\n+\t{\n+\tcase 1:\n+\t  index = 0;\n+\t  break;\n+\tcase 2:\n+\t  index = 1;\n+\t  break;\n+\t/* DImode loads and stores assumed to cost the same as SImode.  */\n+\tdefault:\n+\t  index = 2;\n+\t  break;\n+\t}\n+\n+      if (in == 2)\n+\treturn MAX (ix86_cost->hard_register.mask_load[index],\n+\t\t    ix86_cost->hard_register.mask_store[index]);\n+      return in ? ix86_cost->hard_register.mask_load[2]\n+\t\t: ix86_cost->hard_register.mask_store[2];\n+    }\n   if (MMX_CLASS_P (regclass))\n     {\n       int index;\n@@ -18865,6 +18888,17 @@ ix86_register_move_cost (machine_mode mode, reg_class_t class1_i,\n \t    ? ix86_cost->hard_register.sse_to_integer\n \t    : ix86_cost->hard_register.integer_to_sse);\n \n+  /* Moves between mask register and GPR.  */\n+  if (MASK_CLASS_P (class1) != MASK_CLASS_P (class2))\n+    {\n+      return (MASK_CLASS_P (class1)\n+\t      ? ix86_cost->hard_register.mask_to_integer\n+\t      : ix86_cost->hard_register.integer_to_mask);\n+    }\n+  /* Moving between mask registers.  */\n+  if (MASK_CLASS_P (class1) && MASK_CLASS_P (class2))\n+    return ix86_cost->hard_register.mask_move;\n+\n   if (MAYBE_FLOAT_CLASS_P (class1))\n     return ix86_cost->hard_register.fp_move;\n   if (MAYBE_SSE_CLASS_P (class1))"}, {"sha": "e0af87450b8e6e0278f4274687e4b91aa63c0e8b", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cb3494cab397b5655ab42fd69310883c12137c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cb3494cab397b5655ab42fd69310883c12137c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=00cb3494cab397b5655ab42fd69310883c12137c", "patch": "@@ -279,6 +279,13 @@ struct processor_costs {\n \t\t\t\t   in SImode, DImode and TImode.  */\n       const int sse_to_integer;\t/* cost of moving SSE register to integer.  */\n       const int integer_to_sse;\t/* cost of moving integer register to SSE. */\n+      const int mask_to_integer; /* cost of moving mask register to integer.  */\n+      const int integer_to_mask; /* cost of moving integer register to mask.  */\n+      const int mask_load[3]; /* cost of loading mask registers\n+\t\t\t\t in QImode, HImode and SImode.  */\n+      const int mask_store[3]; /* cost of storing mask register\n+\t\t\t\t  in QImode, HImode and SImode.  */\n+      const int mask_move; /* cost of moving mask register.  */\n     } hard_register;\n \n   const int add;\t\t/* cost of an add instruction */"}, {"sha": "256c84e364edb14a7bfcb1f19f05b5f9bfd2cad6", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cb3494cab397b5655ab42fd69310883c12137c/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cb3494cab397b5655ab42fd69310883c12137c/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=00cb3494cab397b5655ab42fd69310883c12137c", "patch": "@@ -59,6 +59,12 @@ struct processor_costs ix86_size_cost = {/* costs for tuning for size */\n   {3, 3, 3, 3, 3},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {2, 2, 2},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {2, 2, 2},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -164,6 +170,12 @@ struct processor_costs i386_cost = {\t/* 386 specific costs */\n   {4, 8, 16, 32, 64},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {2, 4, 2},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {2, 4, 2},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -266,6 +278,12 @@ struct processor_costs i486_cost = {\t/* 486 specific costs */\n   {4, 8, 16, 32, 64},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {2, 4, 2},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {2, 4, 2},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -370,6 +388,12 @@ struct processor_costs pentium_cost = {\n   {4, 8, 16, 32, 64},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {2, 4, 2},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {2, 4, 2},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -465,6 +489,12 @@ struct processor_costs lakemont_cost = {\n   {4, 8, 16, 32, 64},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {2, 4, 2},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {2, 4, 2},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -575,6 +605,12 @@ struct processor_costs pentiumpro_cost = {\n   {4, 8, 16, 32, 64},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {4, 4, 4},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {2, 2, 2},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -676,6 +712,12 @@ struct processor_costs geode_cost = {\n   {2, 2, 8, 16, 32},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {2, 2, 2},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {2, 2, 2},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -777,6 +819,12 @@ struct processor_costs k6_cost = {\n   {2, 2, 8, 16, 32},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {4, 5, 4},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {2, 3, 2},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -884,6 +932,12 @@ struct processor_costs athlon_cost = {\n   {4, 4, 10, 10, 20},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   5, 5,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {3, 4, 3},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {3, 4, 3},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -993,6 +1047,12 @@ struct processor_costs k8_cost = {\n   {4, 4, 10, 10, 20},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   5, 5,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {3, 4, 3},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {3, 4, 3},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -1106,6 +1166,12 @@ struct processor_costs amdfam10_cost = {\n   {4, 4, 5, 10, 20},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {3, 4, 3},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {3, 4, 3},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n \n   \t\t\t\t\t/* On K8:\n   \t\t\t\t\t    MOVD reg64, xmmreg Double FSTORE 4\n@@ -1229,6 +1295,12 @@ const struct processor_costs bdver_cost = {\n   {10, 10, 10, 40, 60},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   16, 20,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {8, 8, 8},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {8, 8, 8},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -1360,6 +1432,12 @@ struct processor_costs znver1_cost = {\n   {8, 8, 8, 16, 32},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit.  */\n   6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves.  */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {6, 6, 6},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {8, 8, 8},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -1509,6 +1587,12 @@ struct processor_costs znver2_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit.  */\n   6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE\n \t\t\t\t\t   moves.  */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {6, 6, 6},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {8, 8, 8},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -1643,6 +1727,12 @@ struct processor_costs skylake_cost = {\n   {8, 8, 8, 12, 24},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {4, 4, 4},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {6, 6, 6},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -1751,6 +1841,12 @@ const struct processor_costs btver1_cost = {\n   {10, 10, 12, 48, 96},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   14, 14,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {6, 8, 6},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {6, 8, 6},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -1855,6 +1951,12 @@ const struct processor_costs btver2_cost = {\n   {10, 10, 12, 48, 96},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   14, 14,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {8, 8, 6},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {8, 8, 6},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -1958,6 +2060,12 @@ struct processor_costs pentium4_cost = {\n   {16, 16, 16, 32, 64},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   20, 12,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {4, 5, 4},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {2, 3, 2},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -2064,6 +2172,12 @@ struct processor_costs nocona_cost = {\n   {12, 12, 12, 24, 48},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   20, 12,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {4, 4, 4},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {4, 4, 4},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -2168,6 +2282,12 @@ struct processor_costs atom_cost = {\n   {8, 8, 8, 16, 32},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   8, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {6, 6, 6},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {6, 6, 6},\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -2272,6 +2392,12 @@ struct processor_costs slm_cost = {\n   {8, 8, 8, 16, 32},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   8, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {8, 8, 8},\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {6, 6, 6},\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -2376,6 +2502,12 @@ struct processor_costs intel_cost = {\n   {6, 6, 6, 6, 6},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   4, 4,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {4, 4, 4},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {6, 6, 6},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -2484,6 +2616,12 @@ struct processor_costs generic_cost = {\n   {6, 6, 6, 10, 15},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {6, 6, 6},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {6, 6, 6},\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n \n@@ -2597,6 +2735,12 @@ struct processor_costs core_cost = {\n   {6, 6, 6, 6, 12},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {4, 4, 4},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {6, 6, 6},\t\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n   },\n "}]}