{"sha": "1f03b43fc7552fe105d33612b3b89b4f0b222798", "node_id": "C_kwDOANBUbNoAKDFmMDNiNDNmYzc1NTJmZTEwNWQzMzYxMmIzYjg5YjRmMGIyMjI3OTg", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-06-01T22:45:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-04T07:46:00Z"}, "message": "[Ada] Fix dispatching call to primitive function with controlling tagged result\n\nWhen a dispatching call is made to a primitive function with a controlling\ntagged result, the call is dispatching on result and thus must return the\nclass-wide type of the tagged type to accommodate all possible results.\n\nThis was ensured by Expand_Dispatching_Call only in the common case where\nthe result type is the type of the controlling argument, which does not\ncover the case of a primitive function inherited from an ancestor type.\n\ngcc/ada/\n\n\t* exp_disp.adb (Expand_Dispatching_Call): Fix detection of calls\n\tthat are dispatching on tagged result.", "tree": {"sha": "f57e2570922b954aae109ca384b43db44a06eba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f57e2570922b954aae109ca384b43db44a06eba4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f03b43fc7552fe105d33612b3b89b4f0b222798", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f03b43fc7552fe105d33612b3b89b4f0b222798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f03b43fc7552fe105d33612b3b89b4f0b222798", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f03b43fc7552fe105d33612b3b89b4f0b222798/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dab9bed7bd173e55fa44b9d8f4a01dfd8566553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dab9bed7bd173e55fa44b9d8f4a01dfd8566553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dab9bed7bd173e55fa44b9d8f4a01dfd8566553"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "3ac4b3b4398176afb6d04c9f83ed64d14716296c", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f03b43fc7552fe105d33612b3b89b4f0b222798/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f03b43fc7552fe105d33612b3b89b4f0b222798/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=1f03b43fc7552fe105d33612b3b89b4f0b222798", "patch": "@@ -896,8 +896,14 @@ package body Exp_Disp is\n       Copy_Strub_Mode (Subp_Typ, Subp);\n       Set_Convention  (Subp_Typ, Convention (Subp));\n \n-      if Etype (Subp) = Typ then\n-         Set_Etype          (Subp_Typ, CW_Typ);\n+      --  If this is a function and it has a controlling tagged result, then\n+      --  the call is dispatching on result and returns the class-wide type.\n+\n+      if Ekind (Subp) = E_Function\n+        and then Has_Controlling_Result (Subp)\n+        and then Is_Tagged_Type (Etype (Subp))\n+      then\n+         Set_Etype          (Subp_Typ, Class_Wide_Type (Etype (Subp)));\n          Set_Returns_By_Ref (Subp_Typ, True);\n       else\n          Set_Etype          (Subp_Typ, Etype (Subp));"}]}