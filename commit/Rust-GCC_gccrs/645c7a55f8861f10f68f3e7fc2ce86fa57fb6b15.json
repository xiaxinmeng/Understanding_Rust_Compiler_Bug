{"sha": "645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ1YzdhNTVmODg2MWYxMGY2OGYzZTdmYzJjZTg2ZmE1N2ZiNmIxNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-01-16T18:40:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-01-16T18:40:26Z"}, "message": "re PR c++/51868 (Crash when generating the move constructor for a class with a bit field)\n\n\tPR c++/51868\n\t* typeck.c (build_static_cast_1): Handle bit-fields properly.\n\nFrom-SVN: r183218", "tree": {"sha": "be90f943f42680f1ae78dea27e6f3952bac5125d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be90f943f42680f1ae78dea27e6f3952bac5125d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f434733449a2d46c3e003fd839bf94f47023c055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f434733449a2d46c3e003fd839bf94f47023c055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f434733449a2d46c3e003fd839bf94f47023c055"}], "stats": {"total": 76, "additions": 62, "deletions": 14}, "files": [{"sha": "a5a07e47db8357f22166b7202c312706feb461c7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15", "patch": "@@ -1,3 +1,8 @@\n+2012-01-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51868\n+\t* typeck.c (build_static_cast_1): Handle bit-fields properly.\n+\n 2012-01-13  Ian Lance Taylor  <iant@google.com>\n \n \tPR c++/50012"}, {"sha": "91e7a0a09ca7e9de904fdd2b20a1b1a5feaff56a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15", "patch": "@@ -5812,11 +5812,12 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n {\n   tree intype;\n   tree result;\n+  cp_lvalue_kind clk;\n \n   /* Assume the cast is valid.  */\n   *valid_p = true;\n \n-  intype = TREE_TYPE (expr);\n+  intype = unlowered_expr_type (expr);\n \n   /* Save casted types in the function's used types hash table.  */\n   used_types_insert (type);\n@@ -5882,22 +5883,29 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n      cv2 T2 if cv2 T2 is reference-compatible with cv1 T1 (8.5.3).\"  */\n   if (TREE_CODE (type) == REFERENCE_TYPE\n       && TYPE_REF_IS_RVALUE (type)\n-      && real_lvalue_p (expr)\n+      && (clk = real_lvalue_p (expr))\n       && reference_related_p (TREE_TYPE (type), intype)\n       && (c_cast_p || at_least_as_qualified_p (TREE_TYPE (type), intype)))\n     {\n-      /* Handle the lvalue case here by casting to lvalue reference and\n-\t then changing it to an rvalue reference.  Casting an xvalue to\n-\t rvalue reference will be handled by the main code path.  */\n-      tree lref = cp_build_reference_type (TREE_TYPE (type), false);\n-      result = (perform_direct_initialization_if_possible\n-\t\t(lref, expr, c_cast_p, complain));\n-      result = cp_fold_convert (type, result);\n-      /* Make sure we don't fold back down to a named rvalue reference,\n-\t because that would be an lvalue.  */\n-      if (DECL_P (result))\n-\tresult = build1 (NON_LVALUE_EXPR, type, result);\n-      return convert_from_reference (result);\n+      if (clk == clk_ordinary)\n+\t{\n+\t  /* Handle the (non-bit-field) lvalue case here by casting to\n+\t     lvalue reference and then changing it to an rvalue reference.\n+\t     Casting an xvalue to rvalue reference will be handled by the\n+\t     main code path.  */\n+\t  tree lref = cp_build_reference_type (TREE_TYPE (type), false);\n+\t  result = (perform_direct_initialization_if_possible\n+\t\t    (lref, expr, c_cast_p, complain));\n+\t  result = cp_fold_convert (type, result);\n+\t  /* Make sure we don't fold back down to a named rvalue reference,\n+\t     because that would be an lvalue.  */\n+\t  if (DECL_P (result))\n+\t    result = build1 (NON_LVALUE_EXPR, type, result);\n+\t  return convert_from_reference (result);\n+\t}\n+      else\n+\t/* For a bit-field or packed field, bind to a temporary.  */\n+\texpr = rvalue (expr);\n     }\n \n   /* Resolve overloaded address here rather than once in"}, {"sha": "0bdffcc3761b7e7c6f0c945a1afc1d717f8f3c17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15", "patch": "@@ -1,3 +1,9 @@\n+2012-01-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51868\n+\t* g++.dg/cpp0x/rv-bitfield.C: New.\n+\t* g++.dg/cpp0x/rv-bitfield2.C: New.\n+\n 2012-01-16  Paul Thomas  <pault@gcc.gnu.org>\n \n \t* gfortran.dg/class_array_3.f03: Remove the explicit loop in"}, {"sha": "ed866f9e1f37f595cdb7beb15dc86153c8ee0947", "filename": "gcc/testsuite/g++.dg/cpp0x/rv-bitfield.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-bitfield.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-bitfield.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-bitfield.C?ref=645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options -std=c++0x }\n+\n+struct A\n+{\n+  int i : 1;\n+};\n+\n+int main()\n+{\n+  A a;\n+  static_cast<int&&>(a.i);\n+}"}, {"sha": "e054151b056bd96c12d7d05be48f2e153ede048f", "filename": "gcc/testsuite/g++.dg/cpp0x/rv-bitfield2.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-bitfield2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-bitfield2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-bitfield2.C?ref=645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/51868\n+// { dg-options -std=c++0x }\n+\n+struct A {\n+  A() {}\n+  A(const A&) {}\n+  A(A&&) {}\n+};\n+\n+struct B {\n+  A a;\n+  int f : 1;\n+};\n+\n+B func() {\n+  return B();\n+}"}]}