{"sha": "8e6befc1df7d85f31b7d5ecf1fddb4183b707719", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU2YmVmYzFkZjdkODVmMzFiN2Q1ZWNmMWZkZGI0MTgzYjcwNzcxOQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-03-31T07:51:10Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-03-31T07:51:10Z"}, "message": "Makefile.in (hash.h): Generate using gperf language 'C'...\n\n        * Makefile.in (hash.h): Generate using gperf language 'C', not\n        'KR-C', so gperf uses the `const' keyword on strings.\n        * gxx.gperf (resword): Const-ify a char*.\n\nFrom-SVN: r26081", "tree": {"sha": "d0940e743393756f9506c468ec12116f403c9dee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0940e743393756f9506c468ec12116f403c9dee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e6befc1df7d85f31b7d5ecf1fddb4183b707719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6befc1df7d85f31b7d5ecf1fddb4183b707719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e6befc1df7d85f31b7d5ecf1fddb4183b707719", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6befc1df7d85f31b7d5ecf1fddb4183b707719/comments", "author": null, "committer": null, "parents": [{"sha": "63e5baa6c94c623a07cf32c8dd67ab9c08a71b73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63e5baa6c94c623a07cf32c8dd67ab9c08a71b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63e5baa6c94c623a07cf32c8dd67ab9c08a71b73"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "06bb240f29cf51ee63b7184ab5ca2e4b6e66ed01", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6befc1df7d85f31b7d5ecf1fddb4183b707719/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6befc1df7d85f31b7d5ecf1fddb4183b707719/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8e6befc1df7d85f31b7d5ecf1fddb4183b707719", "patch": "@@ -1,3 +1,10 @@\n+Wed Mar 31 10:48:29 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+        * Makefile.in (hash.h): Generate using gperf language 'C', not\n+        'KR-C', so gperf uses the `const' keyword on strings.\n+\t \n+        * gxx.gperf (resword): Const-ify a char*.\n+\n 1999-03-30  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* cp-tree.h (IDENTIFIER_AS_DESC, IDENTIFIER_AS_LIST, "}, {"sha": "ae156e66690496dfd47b4e0da8ac9a93622a3105", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6befc1df7d85f31b7d5ecf1fddb4183b707719/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6befc1df7d85f31b7d5ecf1fddb4183b707719/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=8e6befc1df7d85f31b7d5ecf1fddb4183b707719", "patch": "@@ -245,7 +245,7 @@ $(PARSE_C) : $(srcdir)/parse.y\n # the C front-end already requires this if c-parse.gperf is changed,\n # so we should be consistent.\n $(srcdir)/hash.h: $(srcdir)/gxx.gperf\n-\tgperf -L KR-C -F ', 0, 0' -p -j1 -g -o -t -N is_reserved_word \\\n+\tgperf -L C -F ', 0, 0' -p -j1 -g -o -t -N is_reserved_word \\\n \t\t'-k1,4,7,$$' $(srcdir)/gxx.gperf >$(srcdir)/hash.h\n \n spew.o : spew.c $(CONFIG_H) $(CXX_TREE_H) $(PARSE_H) $(srcdir)/../flags.h \\"}, {"sha": "42762e6099854f19eff25d7d034c2c8d3d6c7936", "filename": "gcc/cp/gxx.gperf", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6befc1df7d85f31b7d5ecf1fddb4183b707719/gcc%2Fcp%2Fgxx.gperf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6befc1df7d85f31b7d5ecf1fddb4183b707719/gcc%2Fcp%2Fgxx.gperf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fgxx.gperf?ref=8e6befc1df7d85f31b7d5ecf1fddb4183b707719", "patch": "@@ -1,7 +1,7 @@\n %{\n /* Command-line: gperf -L KR-C -F ', 0, 0' -p -j1 -g -o -t -N is_reserved_word -k1,4,$,7 gplus.gperf  */\n %}\n-struct resword { char *name; short token; enum rid rid;};\n+struct resword { const char *name; short token; enum rid rid;};\n %%\n __alignof, ALIGNOF, NORID\n __alignof__, ALIGNOF, NORID"}, {"sha": "4cc867946b12501eb5a898e7d56d245716bad1c3", "filename": "gcc/cp/hash.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6befc1df7d85f31b7d5ecf1fddb4183b707719/gcc%2Fcp%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6befc1df7d85f31b7d5ecf1fddb4183b707719/gcc%2Fcp%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fhash.h?ref=8e6befc1df7d85f31b7d5ecf1fddb4183b707719", "patch": "@@ -1,7 +1,7 @@\n-/* KR-C code produced by gperf version 2.7.1 (19981006 egcs) */\n-/* Command-line: gperf -L KR-C -F , 0, 0 -p -j1 -g -o -t -N is_reserved_word -k1,4,7,$ ../../../gcc/cp/gxx.gperf  */\n+/* C code produced by gperf version 2.7.1 (19981006 egcs) */\n+/* Command-line: gperf -L C -F , 0, 0 -p -j1 -g -o -t -N is_reserved_word -k1,4,7,$ ./gxx.gperf  */\n /* Command-line: gperf -L KR-C -F ', 0, 0' -p -j1 -g -o -t -N is_reserved_word -k1,4,$,7 gplus.gperf  */\n-struct resword { char *name; short token; enum rid rid;};\n+struct resword { const char *name; short token; enum rid rid;};\n \n #define TOTAL_KEYWORDS 106\n #define MIN_WORD_LENGTH 2\n@@ -15,7 +15,7 @@ __inline\n #endif\n static unsigned int\n hash (str, len)\n-     register char *str;\n+     register const char *str;\n      register unsigned int len;\n {\n   static unsigned char asso_values[] =\n@@ -72,7 +72,7 @@ __inline\n #endif\n struct resword *\n is_reserved_word (str, len)\n-     register char *str;\n+     register const char *str;\n      register unsigned int len;\n {\n   static struct resword wordlist[] =\n@@ -227,7 +227,7 @@ is_reserved_word (str, len)\n \n       if (key <= MAX_HASH_VALUE && key >= 0)\n         {\n-          register char *s = wordlist[key].name;\n+          register const char *s = wordlist[key].name;\n \n           if (*str == *s && !strcmp (str + 1, s + 1))\n             return &wordlist[key];"}]}