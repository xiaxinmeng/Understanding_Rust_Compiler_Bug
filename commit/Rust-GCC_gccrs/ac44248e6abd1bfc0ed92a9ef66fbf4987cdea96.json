{"sha": "ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM0NDI0OGU2YWJkMWJmYzBlZDkyYTllZjY2ZmJmNDk4N2NkZWE5Ng==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-27T19:34:13Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-27T19:34:13Z"}, "message": "Use rtx_insn for various target.def hooks\n\ngcc/\n2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n\n\t* target.def (unwind_emit): Strengthen param \"insn\" from rtx to\n\trtx_insn *.\n\t(final_postscan_insn): Likewise.\n\t(adjust_cost): Likewise.\n\t(adjust_priority): Likewise.\n\t(variable_issue): Likewise.\n\t(macro_fusion_pair_p): Likewise.\n\t(dfa_post_cycle_insn): Likewise.\n\t(first_cycle_multipass_dfa_lookahead_guard): Likewise.\n\t(first_cycle_multipass_issue): Likewise.\n\t(dfa_new_cycle): Likewise.\n\t(adjust_cost_2): Likewise for params \"insn\" and \"dep_insn\".\n\t(speculate_insn): Likewise for param \"insn\".\n\t(gen_spec_check): Likewise for params \"insn\" and \"label\".\n\t(get_insn_spec_ds): Likewise for param \"insn\".\n\t(get_insn_checked_ds): Likewise.\n\t(dispatch_do): Likewise.\n\t(dispatch): Likewise.\n\t(cannot_copy_insn_p): Likewise.\n\t(invalid_within_doloop): Likewise.\n\t(legitimate_combined_insn): Likewise.\n\t(needed): Likewise.\n\t(after): Likewise.\n\n\t* doc/tm.texi: Automatically updated to reflect changes to\n\ttarget.def.\n\n\t* haifa-sched.c (choose_ready): Convert NULL_RTX to NULL when\n\tworking with insn.\n\t(schedule_block): Likewise.\n\t(sched_init): Likewise.\n\t(sched_speculate_insn): Strengthen param \"insn\" from rtx to\n\trtx_insn *.\n\t(ready_remove_first_dispatch): Convert NULL_RTX to NULL when\n\tworking with insn.\n\t* hooks.c (hook_bool_rtx_true): Rename to...\n\thook_bool_rtx_insn_true): ...this, and strengthen first param from\n\trtx to rtx_insn *.\n\t(hook_constcharptr_const_rtx_null): Rename to...\n\t(hook_constcharptr_const_rtx_insn_null): ...this, and strengthen\n\tfirst param from const_rtx to const rtx_insn *.\n\t(hook_bool_rtx_int_false): Rename to...\n\t(hook_bool_rtx_insn_int_false): ...this, and strengthen first\n\tparam from rtx to rtx_insn *.\n\t(hook_void_rtx_int): Rename to...\n\t(hook_void_rtx_insn_int): ...this, and strengthen first param from\n\trtx to rtx_insn *.\n\n\t* hooks.h (hook_bool_rtx_true): Rename to...\n\t(hook_bool_rtx_insn_true): ...this, and strengthen first param from\n\trtx to rtx_insn *.\n\t(hook_bool_rtx_int_false): Rename to...\n\t(hook_bool_rtx_insn_int_false): ...this, and strengthen first\n\tparam from rtx to rtx_insn *.\n\t(hook_void_rtx_int): Rename to...\n\t(hook_void_rtx_insn_int): ...this, and strengthen first param from\n\trtx to rtx_insn *.\n\t(hook_constcharptr_const_rtx_null): Rename to...\n\t(hook_constcharptr_const_rtx_insn_null): ...this, and strengthen\n\tfirst param from const_rtx to const rtx_insn *.\n\n\t* sched-deps.c (sched_macro_fuse_insns): Strengthen param \"insn\"\n\tand local \"prev\" from rtx to rtx_insn *.\n\n\t* sched-int.h (sched_speculate_insn): Strengthen first param from\n\trtx to rtx_insn *.\n\n\t* sel-sched.c (create_speculation_check): Likewise for local \"label\".\n\t* targhooks.c (default_invalid_within_doloop): Strengthen param\n\t\"insn\" from const_rtx to const rtx_insn *.\n\t* targhooks.h (default_invalid_within_doloop): Strengthen param\n\tfrom const_rtx to const rtx_insn *.\n\n\t* config/alpha/alpha.c (alpha_cannot_copy_insn_p): Likewise.\n\t(alpha_adjust_cost): Likewise for params \"insn\", \"dep_insn\".\n\n\t* config/arc/arc.c (arc_sched_adjust_priority): Likewise for param\n\t\"insn\".\n\t(arc_invalid_within_doloop): Likewise, with const.\n\n\t* config/arm/arm.c (arm_adjust_cost): Likewise for params \"insn\", \"dep\".\n\t(arm_cannot_copy_insn_p): Likewise for param \"insn\".\n\t(arm_unwind_emit): Likewise.\n\n\t* config/bfin/bfin.c (bfin_adjust_cost): Likewise for params \"insn\",\n\t\"dep_insn\".\n\n\t* config/c6x/c6x.c (c6x_dfa_new_cycle): Likewise for param \"insn\".\n\t(c6x_variable_issue): Likewise.  Removed now-redundant checked\n\tcast.\n\t(c6x_adjust_cost): Likewise for params \"insn\", \"dep_insn\".\n\n\t* config/epiphany/epiphany-protos.h (epiphany_mode_needed):\n\tLikewise for param \"insn\".\n\t(epiphany_mode_after): Likewise.\n\t* config/epiphany/epiphany.c (epiphany_adjust_cost): Likewise for\n\tparams \"insn\", \"dep_insn\".\n\t(epiphany_mode_needed): Likewise for param \"insn\".\n\t(epiphany_mode_after): Likewise.\n\n\t* config/i386/i386-protos.h (i386_pe_seh_unwind_emit): Likewise.\n\t* config/i386/i386.c (ix86_legitimate_combined_insn): Likewise.\n\t(ix86_avx_u128_mode_needed): Likewise.\n\t(ix86_i387_mode_needed): Likewise.\n\t(ix86_mode_needed): Likewise.\n\t(ix86_avx_u128_mode_after): Likewise.\n\t(ix86_mode_after): Likewise.\n\t(ix86_adjust_cost): Likewise for params \"insn\", \"dep_insn\".\n\t(ix86_macro_fusion_pair_p): Likewise for params \"condgen\", \"condjmp\".\n\t(ix86_adjust_priority): Likewise for param \"insn\".\n\t(core2i7_first_cycle_multipass_issue): Likewise for param \"insn\".\n\t(do_dispatch): Likewise.\n\t(has_dispatch): Likewise.\n\t* config/i386/winnt.c (i386_pe_seh_unwind_emit): Likewise.\n\n\t* config/ia64/ia64.c (TARGET_INVALID_WITHIN_DOLOOP): Update to\n\treflect renaming of default hook implementation from\n\thook_constcharptr_const_rtx_null to\n\thook_constcharptr_const_rtx_insn_null.\n\t(ia64_adjust_cost_2): Strengthen params \"insn\", \"dep_insn\" from\n\trtx to rtx_insn *.\n\t(ia64_variable_issue): Likewise for param \"insn\".\n\t(ia64_first_cycle_multipass_dfa_lookahead_guard): Likewise.\n\t(ia64_dfa_new_cycle): Likewise.\n\t(ia64_get_insn_spec_ds): Likewise.\n\t(ia64_get_insn_checked_ds): Likewise.\n\t(ia64_speculate_insn): Likewise.\n\t(ia64_gen_spec_check): Likewise for params \"insn\", \"label\".\n\t(ia64_asm_unwind_emit): Likewise for param \"insn\".\n\n\t* config/m32r/m32r.c (m32r_adjust_priority): Likewise.\n\n\t* config/m68k/m68k.c (m68k_sched_adjust_cost): Likewise for params\n\t\"insn\", \"def_insn\".\n\t(m68k_sched_variable_issue): Likewise for param \"insn\".\n\n\t* config/mep/mep.c (mep_adjust_cost): Likewise for params \"insn\",\n\t\"def_insn\".\n\n\t* config/microblaze/microblaze.c (microblaze_adjust_cost):\n\tLikewise for params \"insn\", \"dep\".\n\n\t* config/mips/mips.c (mips_adjust_cost): Likewise.\n\t(mips_variable_issue): Likewise for param \"insn\".\n\t(mips_final_postscan_insn): Likewise.\n\n\t* config/mn10300/mn10300.c (mn10300_adjust_sched_cost): Likewise\n\tfor params \"insn\", \"dep\".\n\n\t* config/pa/pa.c (pa_adjust_cost): Likewise for params \"insn\",\n\t\"dep_insn\".\n\t(pa_adjust_priority): Likewise for param \"insn\".\n\n\t* config/picochip/picochip.c (picochip_sched_adjust_cost):\n\tLikewise for params \"insn\", \"dep_insn\".\n\n\t* config/rs6000/rs6000.c (rs6000_variable_issue_1): Likewise for\n\tparam \"insn\".\n\t(rs6000_variable_issue): Likewise.\n\t(rs6000_adjust_cost): Likewise for params \"insn\", \"dep_insn\".\n\t(rs6000_debug_adjust_cost): Likewise.\n\t(rs6000_adjust_priority): Likewise for param \"insn\".\n\t(rs6000_use_sched_lookahead_guard): Likewise.\n\t(get_next_active_insn): Likewise for return type and both params.\n\t(redefine_groups): Likewise for params \"prev_head_insn\", \"tail\"\n\tand locals \"insn\", \"next_insn\".\n\t(pad_groups): Likewise.\n\n\t* config/s390/s390.c (s390_adjust_priority): Likewise for param\n\t\"insn\".\n\t(s390_cannot_copy_insn_p): Likewise.\n\t(s390_sched_variable_issue): Likewise for third param, eliminating\n\tchecked cast.\n\t(TARGET_INVALID_WITHIN_DOLOOP): Update to reflect renaming of\n\tdefault hook implementation from hook_constcharptr_const_rtx_null\n\tto hook_constcharptr_const_rtx_insn_null.\n\n\t* config/sh/sh.c (sh_cannot_copy_insn_p): Strengthen param \"insn\"\n\tfrom rtx to rtx_insn *.\n\t(sh_adjust_cost): Likewise for params \"insn\", \"dep_insn\".\n\t(sh_variable_issue): Likewise for param \"insn\".\n\t(sh_dfa_new_cycle): Likewise.\n\t(sh_mode_needed): Likewise.\n\t(sh_mode_after): Likewise.\n\n\t* config/sparc/sparc.c (supersparc_adjust_cost): Likewise for\n\tparams \"insn\", \"dep_insn\".\n\t(hypersparc_adjust_cost): Likewise.\n\t(sparc_adjust_cost): Likewise.\n\n\t* config/spu/spu.c (spu_sched_variable_issue): Likewise for third\n\tparam, eliminated checked cast.\n\t(spu_sched_adjust_cost): Likewise for first and third params.\n\n\t* config/tilegx/tilegx.c (tilegx_sched_adjust_cost): Strengthen\n\tparams \"insn\" and \"dep_insn\" from rtx to rtx_insn *.\n\n\t* config/tilepro/tilepro.c (tilepro_sched_adjust_cost): Likewise.\n\nFrom-SVN: r214584", "tree": {"sha": "d5aca9a61ea42adcfa888f33107d59b9b198ce9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5aca9a61ea42adcfa888f33107d59b9b198ce9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af48075062e32c2fd7816af4096d97459c5e5fc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af48075062e32c2fd7816af4096d97459c5e5fc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af48075062e32c2fd7816af4096d97459c5e5fc2"}], "stats": {"total": 588, "additions": 399, "deletions": 189}, "files": [{"sha": "adb4c196b165e07b8869fe817e20d051ed0d5def", "filename": "gcc/ChangeLog", "status": "modified", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -1,3 +1,204 @@\n+2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* target.def (unwind_emit): Strengthen param \"insn\" from rtx to\n+\trtx_insn *.\n+\t(final_postscan_insn): Likewise.\n+\t(adjust_cost): Likewise.\n+\t(adjust_priority): Likewise.\n+\t(variable_issue): Likewise.\n+\t(macro_fusion_pair_p): Likewise.\n+\t(dfa_post_cycle_insn): Likewise.\n+\t(first_cycle_multipass_dfa_lookahead_guard): Likewise.\n+\t(first_cycle_multipass_issue): Likewise.\n+\t(dfa_new_cycle): Likewise.\n+\t(adjust_cost_2): Likewise for params \"insn\" and \"dep_insn\".\n+\t(speculate_insn): Likewise for param \"insn\".\n+\t(gen_spec_check): Likewise for params \"insn\" and \"label\".\n+\t(get_insn_spec_ds): Likewise for param \"insn\".\n+\t(get_insn_checked_ds): Likewise.\n+\t(dispatch_do): Likewise.\n+\t(dispatch): Likewise.\n+\t(cannot_copy_insn_p): Likewise.\n+\t(invalid_within_doloop): Likewise.\n+\t(legitimate_combined_insn): Likewise.\n+\t(needed): Likewise.\n+\t(after): Likewise.\n+\n+\t* doc/tm.texi: Automatically updated to reflect changes to\n+\ttarget.def.\n+\n+\t* haifa-sched.c (choose_ready): Convert NULL_RTX to NULL when\n+\tworking with insn.\n+\t(schedule_block): Likewise.\n+\t(sched_init): Likewise.\n+\t(sched_speculate_insn): Strengthen param \"insn\" from rtx to\n+\trtx_insn *.\n+\t(ready_remove_first_dispatch): Convert NULL_RTX to NULL when\n+\tworking with insn.\n+\t* hooks.c (hook_bool_rtx_true): Rename to...\n+\thook_bool_rtx_insn_true): ...this, and strengthen first param from\n+\trtx to rtx_insn *.\n+\t(hook_constcharptr_const_rtx_null): Rename to...\n+\t(hook_constcharptr_const_rtx_insn_null): ...this, and strengthen\n+\tfirst param from const_rtx to const rtx_insn *.\n+\t(hook_bool_rtx_int_false): Rename to...\n+\t(hook_bool_rtx_insn_int_false): ...this, and strengthen first\n+\tparam from rtx to rtx_insn *.\n+\t(hook_void_rtx_int): Rename to...\n+\t(hook_void_rtx_insn_int): ...this, and strengthen first param from\n+\trtx to rtx_insn *.\n+\n+\t* hooks.h (hook_bool_rtx_true): Rename to...\n+\t(hook_bool_rtx_insn_true): ...this, and strengthen first param from\n+\trtx to rtx_insn *.\n+\t(hook_bool_rtx_int_false): Rename to...\n+\t(hook_bool_rtx_insn_int_false): ...this, and strengthen first\n+\tparam from rtx to rtx_insn *.\n+\t(hook_void_rtx_int): Rename to...\n+\t(hook_void_rtx_insn_int): ...this, and strengthen first param from\n+\trtx to rtx_insn *.\n+\t(hook_constcharptr_const_rtx_null): Rename to...\n+\t(hook_constcharptr_const_rtx_insn_null): ...this, and strengthen\n+\tfirst param from const_rtx to const rtx_insn *.\n+\n+\t* sched-deps.c (sched_macro_fuse_insns): Strengthen param \"insn\"\n+\tand local \"prev\" from rtx to rtx_insn *.\n+\n+\t* sched-int.h (sched_speculate_insn): Strengthen first param from\n+\trtx to rtx_insn *.\n+\n+\t* sel-sched.c (create_speculation_check): Likewise for local \"label\".\n+\t* targhooks.c (default_invalid_within_doloop): Strengthen param\n+\t\"insn\" from const_rtx to const rtx_insn *.\n+\t* targhooks.h (default_invalid_within_doloop): Strengthen param\n+\tfrom const_rtx to const rtx_insn *.\n+\n+\t* config/alpha/alpha.c (alpha_cannot_copy_insn_p): Likewise.\n+\t(alpha_adjust_cost): Likewise for params \"insn\", \"dep_insn\".\n+\n+\t* config/arc/arc.c (arc_sched_adjust_priority): Likewise for param\n+\t\"insn\".\n+\t(arc_invalid_within_doloop): Likewise, with const.\n+\n+\t* config/arm/arm.c (arm_adjust_cost): Likewise for params \"insn\", \"dep\".\n+\t(arm_cannot_copy_insn_p): Likewise for param \"insn\".\n+\t(arm_unwind_emit): Likewise.\n+\n+\t* config/bfin/bfin.c (bfin_adjust_cost): Likewise for params \"insn\",\n+\t\"dep_insn\".\n+\n+\t* config/c6x/c6x.c (c6x_dfa_new_cycle): Likewise for param \"insn\".\n+\t(c6x_variable_issue): Likewise.  Removed now-redundant checked\n+\tcast.\n+\t(c6x_adjust_cost): Likewise for params \"insn\", \"dep_insn\".\n+\n+\t* config/epiphany/epiphany-protos.h (epiphany_mode_needed):\n+\tLikewise for param \"insn\".\n+\t(epiphany_mode_after): Likewise.\n+\t* config/epiphany/epiphany.c (epiphany_adjust_cost): Likewise for\n+\tparams \"insn\", \"dep_insn\".\n+\t(epiphany_mode_needed): Likewise for param \"insn\".\n+\t(epiphany_mode_after): Likewise.\n+\n+\t* config/i386/i386-protos.h (i386_pe_seh_unwind_emit): Likewise.\n+\t* config/i386/i386.c (ix86_legitimate_combined_insn): Likewise.\n+\t(ix86_avx_u128_mode_needed): Likewise.\n+\t(ix86_i387_mode_needed): Likewise.\n+\t(ix86_mode_needed): Likewise.\n+\t(ix86_avx_u128_mode_after): Likewise.\n+\t(ix86_mode_after): Likewise.\n+\t(ix86_adjust_cost): Likewise for params \"insn\", \"dep_insn\".\n+\t(ix86_macro_fusion_pair_p): Likewise for params \"condgen\", \"condjmp\".\n+\t(ix86_adjust_priority): Likewise for param \"insn\".\n+\t(core2i7_first_cycle_multipass_issue): Likewise for param \"insn\".\n+\t(do_dispatch): Likewise.\n+\t(has_dispatch): Likewise.\n+\t* config/i386/winnt.c (i386_pe_seh_unwind_emit): Likewise.\n+\n+\t* config/ia64/ia64.c (TARGET_INVALID_WITHIN_DOLOOP): Update to\n+\treflect renaming of default hook implementation from\n+\thook_constcharptr_const_rtx_null to\n+\thook_constcharptr_const_rtx_insn_null.\n+\t(ia64_adjust_cost_2): Strengthen params \"insn\", \"dep_insn\" from\n+\trtx to rtx_insn *.\n+\t(ia64_variable_issue): Likewise for param \"insn\".\n+\t(ia64_first_cycle_multipass_dfa_lookahead_guard): Likewise.\n+\t(ia64_dfa_new_cycle): Likewise.\n+\t(ia64_get_insn_spec_ds): Likewise.\n+\t(ia64_get_insn_checked_ds): Likewise.\n+\t(ia64_speculate_insn): Likewise.\n+\t(ia64_gen_spec_check): Likewise for params \"insn\", \"label\".\n+\t(ia64_asm_unwind_emit): Likewise for param \"insn\".\n+\n+\t* config/m32r/m32r.c (m32r_adjust_priority): Likewise.\n+\n+\t* config/m68k/m68k.c (m68k_sched_adjust_cost): Likewise for params\n+\t\"insn\", \"def_insn\".\n+\t(m68k_sched_variable_issue): Likewise for param \"insn\".\n+\n+\t* config/mep/mep.c (mep_adjust_cost): Likewise for params \"insn\",\n+\t\"def_insn\".\n+\n+\t* config/microblaze/microblaze.c (microblaze_adjust_cost):\n+\tLikewise for params \"insn\", \"dep\".\n+\n+\t* config/mips/mips.c (mips_adjust_cost): Likewise.\n+\t(mips_variable_issue): Likewise for param \"insn\".\n+\t(mips_final_postscan_insn): Likewise.\n+\n+\t* config/mn10300/mn10300.c (mn10300_adjust_sched_cost): Likewise\n+\tfor params \"insn\", \"dep\".\n+\n+\t* config/pa/pa.c (pa_adjust_cost): Likewise for params \"insn\",\n+\t\"dep_insn\".\n+\t(pa_adjust_priority): Likewise for param \"insn\".\n+\n+\t* config/picochip/picochip.c (picochip_sched_adjust_cost):\n+\tLikewise for params \"insn\", \"dep_insn\".\n+\n+\t* config/rs6000/rs6000.c (rs6000_variable_issue_1): Likewise for\n+\tparam \"insn\".\n+\t(rs6000_variable_issue): Likewise.\n+\t(rs6000_adjust_cost): Likewise for params \"insn\", \"dep_insn\".\n+\t(rs6000_debug_adjust_cost): Likewise.\n+\t(rs6000_adjust_priority): Likewise for param \"insn\".\n+\t(rs6000_use_sched_lookahead_guard): Likewise.\n+\t(get_next_active_insn): Likewise for return type and both params.\n+\t(redefine_groups): Likewise for params \"prev_head_insn\", \"tail\"\n+\tand locals \"insn\", \"next_insn\".\n+\t(pad_groups): Likewise.\n+\n+\t* config/s390/s390.c (s390_adjust_priority): Likewise for param\n+\t\"insn\".\n+\t(s390_cannot_copy_insn_p): Likewise.\n+\t(s390_sched_variable_issue): Likewise for third param, eliminating\n+\tchecked cast.\n+\t(TARGET_INVALID_WITHIN_DOLOOP): Update to reflect renaming of\n+\tdefault hook implementation from hook_constcharptr_const_rtx_null\n+\tto hook_constcharptr_const_rtx_insn_null.\n+\n+\t* config/sh/sh.c (sh_cannot_copy_insn_p): Strengthen param \"insn\"\n+\tfrom rtx to rtx_insn *.\n+\t(sh_adjust_cost): Likewise for params \"insn\", \"dep_insn\".\n+\t(sh_variable_issue): Likewise for param \"insn\".\n+\t(sh_dfa_new_cycle): Likewise.\n+\t(sh_mode_needed): Likewise.\n+\t(sh_mode_after): Likewise.\n+\n+\t* config/sparc/sparc.c (supersparc_adjust_cost): Likewise for\n+\tparams \"insn\", \"dep_insn\".\n+\t(hypersparc_adjust_cost): Likewise.\n+\t(sparc_adjust_cost): Likewise.\n+\n+\t* config/spu/spu.c (spu_sched_variable_issue): Likewise for third\n+\tparam, eliminated checked cast.\n+\t(spu_sched_adjust_cost): Likewise for first and third params.\n+\n+\t* config/tilegx/tilegx.c (tilegx_sched_adjust_cost): Strengthen\n+\tparams \"insn\" and \"dep_insn\" from rtx to rtx_insn *.\n+\n+\t* config/tilepro/tilepro.c (tilepro_sched_adjust_cost): Likewise.\n+\n 2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc/config/mn10300/mn10300.c (is_load_insn): Rename to..."}, {"sha": "52eb37a941a7b97db1400e49c6a8a34a9082756c", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -1274,7 +1274,7 @@ split_small_symbolic_operand (rtx x)\n    containing the call and branch to the block containing the ldgp.  */\n \n static bool\n-alpha_cannot_copy_insn_p (rtx insn)\n+alpha_cannot_copy_insn_p (rtx_insn *insn)\n {\n   if (!reload_completed || !TARGET_EXPLICIT_RELOCS)\n     return false;\n@@ -4803,7 +4803,7 @@ alpha_split_atomic_exchange_12 (rtx operands[])\n    a dependency LINK or INSN on DEP_INSN.  COST is the current cost.  */\n \n static int\n-alpha_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n+alpha_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n {\n   enum attr_type dep_insn_type;\n "}, {"sha": "3c482f7526e2c54b72505f54a80c124a8f9dcb5a", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -395,7 +395,7 @@ static bool arc_vector_mode_supported_p (enum machine_mode);\n \n static bool arc_can_use_doloop_p (const widest_int &, const widest_int &,\n \t\t\t\t  unsigned int, bool);\n-static const char *arc_invalid_within_doloop (const_rtx);\n+static const char *arc_invalid_within_doloop (const rtx_insn *);\n \n static void output_short_suffix (FILE *file);\n \n@@ -572,7 +572,7 @@ static void arc_finalize_pic (void);\n    use the peephole2 pattern.  */\n \n static int\n-arc_sched_adjust_priority (rtx insn, int priority)\n+arc_sched_adjust_priority (rtx_insn *insn, int priority)\n {\n   rtx set = single_set (insn);\n   if (set\n@@ -5720,7 +5720,7 @@ arc_can_use_doloop_p (const widest_int &iterations, const widest_int &,\n    Otherwise return why doloop cannot be applied.  */\n \n static const char *\n-arc_invalid_within_doloop (const_rtx insn)\n+arc_invalid_within_doloop (const rtx_insn *insn)\n {\n   if (CALL_P (insn))\n     return \"Function call in the loop.\";"}, {"sha": "165d7367a64ad86cde02da17ac8ece7a07863f47", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -137,7 +137,7 @@ static void arm_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void arm_output_function_prologue (FILE *, HOST_WIDE_INT);\n static int arm_comp_type_attributes (const_tree, const_tree);\n static void arm_set_default_type_attributes (tree);\n-static int arm_adjust_cost (rtx, rtx, rtx, int);\n+static int arm_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n static int arm_sched_reorder (FILE *, int, rtx_insn **, int *, int);\n static int optimal_immediate_sequence (enum rtx_code code,\n \t\t\t\t       unsigned HOST_WIDE_INT val,\n@@ -216,7 +216,7 @@ static bool arm_return_in_msb (const_tree);\n static bool arm_must_pass_in_stack (enum machine_mode, const_tree);\n static bool arm_return_in_memory (const_tree, const_tree);\n #if ARM_UNWIND_INFO\n-static void arm_unwind_emit (FILE *, rtx);\n+static void arm_unwind_emit (FILE *, rtx_insn *);\n static bool arm_output_ttype (rtx);\n static void arm_asm_emit_except_personality (rtx);\n static void arm_asm_init_sections (void);\n@@ -238,7 +238,7 @@ static void arm_expand_builtin_va_start (tree, rtx);\n static tree arm_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n static void arm_option_override (void);\n static unsigned HOST_WIDE_INT arm_shift_truncation_mask (enum machine_mode);\n-static bool arm_cannot_copy_insn_p (rtx);\n+static bool arm_cannot_copy_insn_p (rtx_insn *);\n static int arm_issue_rate (void);\n static void arm_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n static bool arm_output_addr_const_extra (FILE *, rtx);\n@@ -11886,7 +11886,7 @@ arm_sched_reorder (FILE *file, int verbose, rtx_insn **ready, int *n_readyp,\n    adjust_cost function. Only put bits of code into arm_adjust_cost that\n    are common across all cores.  */\n static int\n-arm_adjust_cost (rtx insn, rtx link, rtx dep, int cost)\n+arm_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep, int cost)\n {\n   rtx i_pat, d_pat;\n \n@@ -13115,7 +13115,7 @@ arm_note_pic_base (rtx *x, void *date ATTRIBUTE_UNUSED)\n }\n \n static bool\n-arm_cannot_copy_insn_p (rtx insn)\n+arm_cannot_copy_insn_p (rtx_insn *insn)\n {\n   /* The tls call insn cannot be copied, as it is paired with a data\n      word.  */\n@@ -29353,7 +29353,7 @@ arm_unwind_emit_set (FILE * asm_out_file, rtx p)\n /* Emit unwind directives for the given insn.  */\n \n static void\n-arm_unwind_emit (FILE * asm_out_file, rtx insn)\n+arm_unwind_emit (FILE * asm_out_file, rtx_insn *insn)\n {\n   rtx note, pat;\n   bool handled_one = false;"}, {"sha": "8fb50dadf5491045f62447b22f165c2ac282c264", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -3310,7 +3310,7 @@ bfin_issue_rate (void)\n }\n \n static int\n-bfin_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n+bfin_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n {\n   enum attr_type dep_insn_type;\n   int dep_insn_code_number;"}, {"sha": "8422756137b0c5174c9c3864c5c0f6cc962d008b", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -3982,7 +3982,8 @@ c6x_sched_init (FILE *dump ATTRIBUTE_UNUSED,\n \n static int\n c6x_dfa_new_cycle (FILE *dump ATTRIBUTE_UNUSED, int verbose ATTRIBUTE_UNUSED,\n-\t\t   rtx insn ATTRIBUTE_UNUSED, int last_clock ATTRIBUTE_UNUSED,\n+\t\t   rtx_insn *insn ATTRIBUTE_UNUSED,\n+\t\t   int last_clock ATTRIBUTE_UNUSED,\n \t\t   int clock ATTRIBUTE_UNUSED, int *sort_p ATTRIBUTE_UNUSED)\n {\n   if (clock != last_clock)\n@@ -4358,11 +4359,11 @@ maybe_clobber_cond (rtx insn, int clock_var)\n static int\n c6x_variable_issue (FILE *dump ATTRIBUTE_UNUSED,\n \t\t    int sched_verbose ATTRIBUTE_UNUSED,\n-\t\t    rtx insn, int can_issue_more ATTRIBUTE_UNUSED)\n+\t\t    rtx_insn *insn, int can_issue_more ATTRIBUTE_UNUSED)\n {\n   ss.last_scheduled_insn = insn;\n   if (INSN_UID (insn) < sploop_max_uid_iter0 && !JUMP_P (insn))\n-    ss.last_scheduled_iter0 = as_a <rtx_insn *> (insn);\n+    ss.last_scheduled_iter0 = insn;\n   if (GET_CODE (PATTERN (insn)) != USE && GET_CODE (PATTERN (insn)) != CLOBBER)\n     ss.issued_this_cycle++;\n   if (insn_info.exists ())\n@@ -4465,7 +4466,7 @@ c6x_variable_issue (FILE *dump ATTRIBUTE_UNUSED,\n    anti- and output dependencies.  */\n \n static int\n-c6x_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n+c6x_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n {\n   enum attr_type insn_type = TYPE_UNKNOWN, dep_insn_type = TYPE_UNKNOWN;\n   int dep_insn_code_number, insn_code_number;"}, {"sha": "8340c2aad84a3ff770527e07ed54b7b34fe13c01", "filename": "gcc/config/epiphany/epiphany-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fepiphany%2Fepiphany-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fepiphany%2Fepiphany-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany-protos.h?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -45,8 +45,8 @@ extern void emit_set_fp_mode (int entity, int mode, int prev_mode,\n #endif\n extern void epiphany_insert_mode_switch_use (rtx insn, int, int);\n extern void epiphany_expand_set_fp_mode (rtx *operands);\n-extern int epiphany_mode_needed (int entity, rtx insn);\n-extern int epiphany_mode_after (int entity, int last_mode, rtx insn);\n+extern int epiphany_mode_needed (int entity, rtx_insn *insn);\n+extern int epiphany_mode_after (int entity, int last_mode, rtx_insn *insn);\n extern bool epiphany_epilogue_uses (int regno);\n extern bool epiphany_optimize_mode_switching (int entity);\n extern bool epiphany_is_interrupt_p (tree);"}, {"sha": "93030e5dc469444262ce47779c21c5bbb1c1be46", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -1986,7 +1986,7 @@ epiphany_issue_rate (void)\n    the same cost as a data-dependence.  The return value should be\n    the new value for COST.  */\n static int\n-epiphany_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n+epiphany_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n {\n   if (REG_NOTE_KIND (link) == 0)\n     {\n@@ -2385,7 +2385,7 @@ epiphany_mode_priority (int entity, int priority)\n }\n \n int\n-epiphany_mode_needed (int entity, rtx insn)\n+epiphany_mode_needed (int entity, rtx_insn *insn)\n {\n   enum attr_fp_mode mode;\n \n@@ -2483,7 +2483,7 @@ epiphany_mode_entry_exit (int entity, bool exit)\n }\n \n int\n-epiphany_mode_after (int entity, int last_mode, rtx insn)\n+epiphany_mode_after (int entity, int last_mode, rtx_insn *insn)\n {\n   /* We have too few call-saved registers to hope to keep the masks across\n      calls.  */"}, {"sha": "bc089853e0f90bd3f9375a73412eb20614d525bc", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -260,7 +260,7 @@ extern void i386_pe_record_stub (const char *);\n \n extern void i386_pe_seh_init (FILE *);\n extern void i386_pe_seh_end_prologue (FILE *);\n-extern void i386_pe_seh_unwind_emit (FILE *, rtx);\n+extern void i386_pe_seh_unwind_emit (FILE *, rtx_insn *);\n extern void i386_pe_seh_emit_except_personality (rtx);\n extern void i386_pe_seh_init_sections (void);\n "}, {"sha": "61b337827258d99caf7735da3e405058daa5df5b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -5833,7 +5833,7 @@ ix86_return_pops_args (tree fundecl, tree funtype, int size)\n /* Implement the TARGET_LEGITIMATE_COMBINED_INSN hook.  */\n \n static bool\n-ix86_legitimate_combined_insn (rtx insn)\n+ix86_legitimate_combined_insn (rtx_insn *insn)\n {\n   /* Check operand constraints in case hard registers were propagated\n      into insn pattern.  This check prevents combine pass from\n@@ -16104,7 +16104,7 @@ ix86_check_avx256_register (rtx *pexp, void *)\n /* Return needed mode for entity in optimize_mode_switching pass.  */\n \n static int\n-ix86_avx_u128_mode_needed (rtx insn)\n+ix86_avx_u128_mode_needed (rtx_insn *insn)\n {\n   if (CALL_P (insn))\n     {\n@@ -16142,7 +16142,7 @@ ix86_avx_u128_mode_needed (rtx insn)\n    prior to the execution of insn.  */\n \n static int\n-ix86_i387_mode_needed (int entity, rtx insn)\n+ix86_i387_mode_needed (int entity, rtx_insn *insn)\n {\n   enum attr_i387_cw mode;\n \n@@ -16195,7 +16195,7 @@ ix86_i387_mode_needed (int entity, rtx insn)\n    prior to the execution of insn.  */\n \n static int\n-ix86_mode_needed (int entity, rtx insn)\n+ix86_mode_needed (int entity, rtx_insn *insn)\n {\n   switch (entity)\n     {\n@@ -16227,7 +16227,7 @@ ix86_check_avx256_stores (rtx dest, const_rtx, void *data)\n /* Calculate mode of upper 128bit AVX registers after the insn.  */\n \n static int\n-ix86_avx_u128_mode_after (int mode, rtx insn)\n+ix86_avx_u128_mode_after (int mode, rtx_insn *insn)\n {\n   rtx pat = PATTERN (insn);\n \n@@ -16254,7 +16254,7 @@ ix86_avx_u128_mode_after (int mode, rtx insn)\n /* Return the mode that an insn results in.  */\n \n int\n-ix86_mode_after (int entity, int mode, rtx insn)\n+ix86_mode_after (int entity, int mode, rtx_insn *insn)\n {\n   switch (entity)\n     {\n@@ -25556,7 +25556,7 @@ exact_store_load_dependency (rtx store, rtx load)\n }\n \n static int\n-ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n+ix86_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n {\n   enum attr_type insn_type, dep_insn_type;\n   enum attr_memory memory;\n@@ -25834,7 +25834,7 @@ ix86_macro_fusion_p ()\n    \"Intel Architectures Optimization Reference Manual\". */\n \n static bool\n-ix86_macro_fusion_pair_p (rtx condgen, rtx condjmp)\n+ix86_macro_fusion_pair_p (rtx_insn *condgen, rtx_insn *condjmp)\n {\n   rtx src, dest;\n   rtx single_set = single_set (condgen);\n@@ -26333,7 +26333,7 @@ ix86_dependencies_evaluation_hook (rtx_insn *head, rtx_insn *tail)\n    moves from function argument registers at the top of the function entry\n    and moves from function return value registers after call.  */\n static int\n-ix86_adjust_priority (rtx insn, int priority)\n+ix86_adjust_priority (rtx_insn *insn, int priority)\n {\n   rtx set;\n \n@@ -26472,7 +26472,7 @@ core2i7_first_cycle_multipass_begin (void *_data,\n static void\n core2i7_first_cycle_multipass_issue (void *_data,\n \t\t\t\t     signed char *ready_try, int n_ready,\n-\t\t\t\t     rtx insn, const void *_prev_data)\n+\t\t\t\t     rtx_insn *insn, const void *_prev_data)\n {\n   ix86_first_cycle_multipass_data_t data\n     = (ix86_first_cycle_multipass_data_t) _data;\n@@ -46451,7 +46451,7 @@ debug_ready_dispatch (void)\n /* This routine is the driver of the dispatch scheduler.  */\n \n static void\n-do_dispatch (rtx insn, int mode)\n+do_dispatch (rtx_insn *insn, int mode)\n {\n   if (mode == DISPATCH_INIT)\n     init_dispatch_sched ();\n@@ -46462,7 +46462,7 @@ do_dispatch (rtx insn, int mode)\n /* Return TRUE if Dispatch Scheduling is supported.  */\n \n static bool\n-has_dispatch (rtx insn, int action)\n+has_dispatch (rtx_insn *insn, int action)\n {\n   if ((TARGET_BDVER1 || TARGET_BDVER2 || TARGET_BDVER3 || TARGET_BDVER4)\n       && flag_dispatch_scheduler)"}, {"sha": "f1153d10102413311cd374f88ea36c6ee460ce7a", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -1149,7 +1149,7 @@ seh_frame_related_expr (FILE *f, struct seh_frame_state *seh, rtx pat)\n    required for unwind of this insn.  */\n \n void\n-i386_pe_seh_unwind_emit (FILE *asm_out_file, rtx insn)\n+i386_pe_seh_unwind_emit (FILE *asm_out_file, rtx_insn *insn)\n {\n   rtx note, pat;\n   bool handled_one = false;"}, {"sha": "39cf17c9cef73c2e3caf643773249544f748127b", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -169,8 +169,8 @@ static int ia64_first_cycle_multipass_dfa_lookahead (void);\n static void ia64_dependencies_evaluation_hook (rtx_insn *, rtx_insn *);\n static void ia64_init_dfa_pre_cycle_insn (void);\n static rtx ia64_dfa_pre_cycle_insn (void);\n-static int ia64_first_cycle_multipass_dfa_lookahead_guard (rtx, int);\n-static int ia64_dfa_new_cycle (FILE *, int, rtx, int, int, int *);\n+static int ia64_first_cycle_multipass_dfa_lookahead_guard (rtx_insn *, int);\n+static int ia64_dfa_new_cycle (FILE *, int, rtx_insn *, int, int, int *);\n static void ia64_h_i_d_extended (void);\n static void * ia64_alloc_sched_context (void);\n static void ia64_init_sched_context (void *, bool);\n@@ -179,12 +179,12 @@ static void ia64_clear_sched_context (void *);\n static void ia64_free_sched_context (void *);\n static int ia64_mode_to_int (enum machine_mode);\n static void ia64_set_sched_flags (spec_info_t);\n-static ds_t ia64_get_insn_spec_ds (rtx);\n-static ds_t ia64_get_insn_checked_ds (rtx);\n+static ds_t ia64_get_insn_spec_ds (rtx_insn *);\n+static ds_t ia64_get_insn_checked_ds (rtx_insn *);\n static bool ia64_skip_rtx_p (const_rtx);\n-static int ia64_speculate_insn (rtx, ds_t, rtx *);\n+static int ia64_speculate_insn (rtx_insn *, ds_t, rtx *);\n static bool ia64_needs_block_p (ds_t);\n-static rtx ia64_gen_spec_check (rtx, rtx, ds_t);\n+static rtx ia64_gen_spec_check (rtx_insn *, rtx_insn *, ds_t);\n static int ia64_spec_check_p (rtx);\n static int ia64_spec_check_src_p (rtx);\n static rtx gen_tls_get_addr (void);\n@@ -250,17 +250,17 @@ static void ia64_print_operand_address (FILE *, rtx);\n static bool ia64_print_operand_punct_valid_p (unsigned char code);\n \n static int ia64_issue_rate (void);\n-static int ia64_adjust_cost_2 (rtx, int, rtx, int, dw_t);\n+static int ia64_adjust_cost_2 (rtx_insn *, int, rtx_insn *, int, dw_t);\n static void ia64_sched_init (FILE *, int, int);\n static void ia64_sched_init_global (FILE *, int, int);\n static void ia64_sched_finish_global (FILE *, int);\n static void ia64_sched_finish (FILE *, int);\n static int ia64_dfa_sched_reorder (FILE *, int, rtx_insn **, int *, int, int);\n static int ia64_sched_reorder (FILE *, int, rtx_insn **, int *, int);\n static int ia64_sched_reorder2 (FILE *, int, rtx_insn **, int *, int);\n-static int ia64_variable_issue (FILE *, int, rtx, int);\n+static int ia64_variable_issue (FILE *, int, rtx_insn *, int);\n \n-static void ia64_asm_unwind_emit (FILE *, rtx);\n+static void ia64_asm_unwind_emit (FILE *, rtx_insn *);\n static void ia64_asm_emit_except_personality (rtx);\n static void ia64_asm_init_sections (void);\n \n@@ -632,7 +632,7 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_CAN_USE_DOLOOP_P\n #define TARGET_CAN_USE_DOLOOP_P can_use_doloop_if_innermost\n #undef TARGET_INVALID_WITHIN_DOLOOP\n-#define TARGET_INVALID_WITHIN_DOLOOP hook_constcharptr_const_rtx_null\n+#define TARGET_INVALID_WITHIN_DOLOOP hook_constcharptr_const_rtx_insn_null\n \n #undef TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE\n #define TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE ia64_override_options_after_change\n@@ -7177,7 +7177,8 @@ ia64_single_set (rtx insn)\n    Return the new cost of a dependency of type DEP_TYPE or INSN on DEP_INSN.\n    COST is the current cost, DW is dependency weakness.  */\n static int\n-ia64_adjust_cost_2 (rtx insn, int dep_type1, rtx dep_insn, int cost, dw_t dw)\n+ia64_adjust_cost_2 (rtx_insn *insn, int dep_type1, rtx_insn *dep_insn,\n+\t\t    int cost, dw_t dw)\n {\n   enum reg_note dep_type = (enum reg_note) dep_type1;\n   enum attr_itanium_class dep_class;\n@@ -7498,7 +7499,7 @@ ia64_sched_reorder2 (FILE *dump ATTRIBUTE_UNUSED,\n static int\n ia64_variable_issue (FILE *dump ATTRIBUTE_UNUSED,\n \t\t     int sched_verbose ATTRIBUTE_UNUSED,\n-\t\t     rtx insn ATTRIBUTE_UNUSED,\n+\t\t     rtx_insn *insn,\n \t\t     int can_issue_more ATTRIBUTE_UNUSED)\n {\n   if (sched_deps_info->generate_spec_deps && !sel_sched_p ())\n@@ -7535,7 +7536,7 @@ ia64_variable_issue (FILE *dump ATTRIBUTE_UNUSED,\n    can be chosen.  */\n \n static int\n-ia64_first_cycle_multipass_dfa_lookahead_guard (rtx insn, int ready_index)\n+ia64_first_cycle_multipass_dfa_lookahead_guard (rtx_insn *insn, int ready_index)\n {\n   gcc_assert (insn && INSN_P (insn));\n \n@@ -7588,7 +7589,7 @@ scheduled_good_insn (rtx last)\n    the ready queue on the next clock start.  */\n \n static int\n-ia64_dfa_new_cycle (FILE *dump, int verbose, rtx insn, int last_clock,\n+ia64_dfa_new_cycle (FILE *dump, int verbose, rtx_insn *insn, int last_clock,\n \t\t    int clock, int *sort_p)\n {\n   gcc_assert (insn && INSN_P (insn));\n@@ -8112,7 +8113,7 @@ get_insn_spec_code (const_rtx insn)\n /* If INSN is a speculative load, return a ds with the speculation types.\n    Otherwise [if INSN is a normal instruction] return 0.  */\n static ds_t\n-ia64_get_insn_spec_ds (rtx insn)\n+ia64_get_insn_spec_ds (rtx_insn *insn)\n {\n   int code = get_insn_spec_code (insn);\n \n@@ -8137,7 +8138,7 @@ ia64_get_insn_spec_ds (rtx insn)\n    will be checked.\n    Otherwise [if INSN is a normal instruction] return 0.  */\n static ds_t\n-ia64_get_insn_checked_ds (rtx insn)\n+ia64_get_insn_checked_ds (rtx_insn *insn)\n {\n   int code = get_insn_spec_code (insn);\n \n@@ -8195,7 +8196,7 @@ insn_can_be_in_speculative_p (rtx insn ATTRIBUTE_UNUSED,\n    If current pattern of the INSN already provides TS speculation,\n    return 0.  */\n static int\n-ia64_speculate_insn (rtx insn, ds_t ts, rtx *new_pat)\n+ia64_speculate_insn (rtx_insn *insn, ds_t ts, rtx *new_pat)\n {  \n   int mode_no;\n   int res;\n@@ -8370,7 +8371,7 @@ ia64_needs_block_p (ds_t ts)\n \n /* Generate (or regenerate) a recovery check for INSN.  */\n static rtx\n-ia64_gen_spec_check (rtx insn, rtx label, ds_t ds)\n+ia64_gen_spec_check (rtx_insn *insn, rtx_insn *label, ds_t ds)\n {\n   rtx op1, pat, check_pat;\n   gen_func_t gen_check;\n@@ -10178,7 +10179,7 @@ process_cfa_offset (FILE *asm_out_file, rtx pat, bool unwind)\n    required to unwind this insn.  */\n \n static void\n-ia64_asm_unwind_emit (FILE *asm_out_file, rtx insn)\n+ia64_asm_unwind_emit (FILE *asm_out_file, rtx_insn *insn)\n {\n   bool unwind = ia64_except_unwind_info (&global_options) == UI_TARGET;\n   bool frame = dwarf2out_do_frame ();"}, {"sha": "aadbce19a2063e084191fef313b28e2dcbcce5f9", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -76,7 +76,7 @@ static void  m32r_output_function_epilogue (FILE *, HOST_WIDE_INT);\n \n static void  m32r_file_start (void);\n \n-static int    m32r_adjust_priority (rtx, int);\n+static int    m32r_adjust_priority (rtx_insn *, int);\n static int    m32r_issue_rate (void);\n \n static void m32r_encode_section_info (tree, rtx, int);\n@@ -1322,7 +1322,7 @@ m32r_is_insn (rtx insn)\n    short instructions are scheduled ahead of the long ones.  */\n \n static int\n-m32r_adjust_priority (rtx insn, int priority)\n+m32r_adjust_priority (rtx_insn *insn, int priority)\n {\n   if (m32r_is_insn (insn)\n       && get_attr_insn_size (insn) != INSN_SIZE_SHORT)"}, {"sha": "779908d1c0ee352403c2736c0241ea4ec7bc2c71", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -125,9 +125,9 @@ struct m68k_address {\n   int scale;\n };\n \n-static int m68k_sched_adjust_cost (rtx, rtx, rtx, int);\n+static int m68k_sched_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n static int m68k_sched_issue_rate (void);\n-static int m68k_sched_variable_issue (FILE *, int, rtx, int);\n+static int m68k_sched_variable_issue (FILE *, int, rtx_insn *, int);\n static void m68k_sched_md_init_global (FILE *, int, int);\n static void m68k_sched_md_finish_global (FILE *, int);\n static void m68k_sched_md_init (FILE *, int, int);\n@@ -5921,8 +5921,8 @@ static state_t sched_adjust_cost_state;\n /* Implement adjust_cost scheduler hook.\n    Return adjusted COST of dependency LINK between DEF_INSN and INSN.  */\n static int\n-m68k_sched_adjust_cost (rtx insn, rtx link ATTRIBUTE_UNUSED, rtx def_insn,\n-\t\t\tint cost)\n+m68k_sched_adjust_cost (rtx_insn *insn, rtx link ATTRIBUTE_UNUSED,\n+\t\t\trtx_insn *def_insn, int cost)\n {\n   int delay;\n \n@@ -6032,7 +6032,7 @@ static int sched_mem_unit_code;\n static int\n m68k_sched_variable_issue (FILE *sched_dump ATTRIBUTE_UNUSED,\n \t\t\t   int sched_verbose ATTRIBUTE_UNUSED,\n-\t\t\t   rtx insn, int can_issue_more)\n+\t\t\t   rtx_insn *insn, int can_issue_more)\n {\n   int insn_size;\n "}, {"sha": "3c71b9574a97f1722df4f5c61d2d883a5eecf707", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -218,7 +218,7 @@ static rtx mep_convert_regnum (const struct cgen_regnum_operand *, rtx);\n static rtx mep_legitimize_arg (const struct insn_operand_data *, rtx, int);\n static void mep_incompatible_arg (const struct insn_operand_data *, rtx, int, tree);\n static rtx mep_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n-static int mep_adjust_cost (rtx, rtx, rtx, int);\n+static int mep_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n static int mep_issue_rate (void);\n static rtx_insn *mep_find_ready_insn (rtx_insn **, int, enum attr_slot, int);\n static void mep_move_ready_insn (rtx_insn **, int, rtx_insn *);\n@@ -6477,7 +6477,7 @@ global_reg_mentioned_p (rtx x)\n    insns.  Not implemented.  */\n \n static int\n-mep_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n+mep_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n {\n   int cost_specified;\n "}, {"sha": "b08a6d503f631b80bc0eff9aff7245d3fe8507ae", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -3529,8 +3529,8 @@ microblaze_function_value (const_tree valtype,\n \n /* Implement TARGET_SCHED_ADJUST_COST.  */\n static int\n-microblaze_adjust_cost (rtx insn ATTRIBUTE_UNUSED, rtx link,\n-\t\t\trtx dep ATTRIBUTE_UNUSED, int cost)\n+microblaze_adjust_cost (rtx_insn *insn ATTRIBUTE_UNUSED, rtx link,\n+\t\t\trtx_insn *dep ATTRIBUTE_UNUSED, int cost)\n {\n   if (REG_NOTE_KIND (link) == REG_DEP_OUTPUT)\n     return cost;"}, {"sha": "9d5b996ecfccfe70689dddd13bdddc25f4688d4d", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -13133,8 +13133,8 @@ static struct\n    is treated like input-dependence.  */\n \n static int\n-mips_adjust_cost (rtx insn ATTRIBUTE_UNUSED, rtx link,\n-\t\t  rtx dep ATTRIBUTE_UNUSED, int cost)\n+mips_adjust_cost (rtx_insn *insn ATTRIBUTE_UNUSED, rtx link,\n+\t\t  rtx_insn *dep ATTRIBUTE_UNUSED, int cost)\n {\n   if (REG_NOTE_KIND (link) == REG_DEP_OUTPUT\n       && TUNE_20KC)\n@@ -13670,7 +13670,7 @@ mips_ls2_variable_issue (rtx insn)\n \n static int\n mips_variable_issue (FILE *file ATTRIBUTE_UNUSED, int verbose ATTRIBUTE_UNUSED,\n-\t\t     rtx insn, int more)\n+\t\t     rtx_insn *insn, int more)\n {\n   /* Ignore USEs and CLOBBERs; don't count them against the issue rate.  */\n   if (USEFUL_INSN_P (insn))\n@@ -17590,7 +17590,7 @@ mips_final_prescan_insn (rtx_insn *insn, rtx *opvec, int noperands)\n /* Implement TARGET_ASM_FINAL_POSTSCAN_INSN.  */\n \n static void\n-mips_final_postscan_insn (FILE *file ATTRIBUTE_UNUSED, rtx insn,\n+mips_final_postscan_insn (FILE *file ATTRIBUTE_UNUSED, rtx_insn *insn,\n \t\t\t  rtx *opvec, int noperands)\n {\n   if (mips_need_noat_wrapper_p (insn, opvec, noperands))"}, {"sha": "8ecd26be1be16d0edf25193a26b43b5c3c5cda44", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -2760,7 +2760,7 @@ set_is_store_p (rtx set)\n    COST is the current cycle cost for DEP.  */\n \n static int\n-mn10300_adjust_sched_cost (rtx insn, rtx link, rtx dep, int cost)\n+mn10300_adjust_sched_cost (rtx_insn *insn, rtx link, rtx_insn *dep, int cost)\n {\n   rtx insn_set;\n   rtx dep_set;"}, {"sha": "40986908352460f70769c9a327713549e852d29f", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -117,8 +117,8 @@ static bool pa_function_value_regno_p (const unsigned int);\n static void pa_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void update_total_code_bytes (unsigned int);\n static void pa_output_function_epilogue (FILE *, HOST_WIDE_INT);\n-static int pa_adjust_cost (rtx, rtx, rtx, int);\n-static int pa_adjust_priority (rtx, int);\n+static int pa_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n+static int pa_adjust_priority (rtx_insn *, int);\n static int pa_issue_rate (void);\n static void pa_som_asm_init_sections (void) ATTRIBUTE_UNUSED;\n static section *pa_som_tm_clone_table_section (void) ATTRIBUTE_UNUSED;\n@@ -4647,7 +4647,7 @@ pa_emit_bcond_fp (rtx operands[])\n    a dependency LINK or INSN on DEP_INSN.  COST is the current cost.  */\n \n static int\n-pa_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n+pa_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n {\n   enum attr_type attr_type;\n \n@@ -4836,7 +4836,7 @@ pa_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n /* Adjust scheduling priorities.  We use this to try and keep addil\n    and the next use of %r1 close together.  */\n static int\n-pa_adjust_priority (rtx insn, int priority)\n+pa_adjust_priority (rtx_insn *insn, int priority)\n {\n   rtx set = single_set (insn);\n   rtx src, dest;"}, {"sha": "7d603d022854e185f644c73eaa9eab9a30aafe9d", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -98,8 +98,8 @@ unsigned int picochip_function_arg_boundary (enum machine_mode mode,\n \n int picochip_sched_lookahead (void);\n int picochip_sched_issue_rate (void);\n-int picochip_sched_adjust_cost (rtx insn, rtx link,\n-\t\t\t\t       rtx dep_insn, int cost);\n+int picochip_sched_adjust_cost (rtx_insn *insn, rtx link,\n+\t\t\t\trtx_insn *dep_insn, int cost);\n int picochip_sched_reorder (FILE * file, int verbose, rtx_insn ** ready,\n \t\t\t\t   int *n_readyp, int clock);\n \n@@ -3535,7 +3535,8 @@ picochip_sched_issue_rate (void)\n /* Adjust the scheduling cost between the two given instructions,\n    which have the given dependency. */\n int\n-picochip_sched_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n+picochip_sched_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn,\n+\t\t\t    int cost)\n {\n \n   if (TARGET_DEBUG)"}, {"sha": "5199bee6d8927392a503d846711c22184e181084", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -1076,7 +1076,7 @@ static int rs6000_memory_move_cost (enum machine_mode, reg_class_t, bool);\n static bool rs6000_debug_rtx_costs (rtx, int, int, int, int *, bool);\n static int rs6000_debug_address_cost (rtx, enum machine_mode, addr_space_t,\n \t\t\t\t      bool);\n-static int rs6000_debug_adjust_cost (rtx, rtx, rtx, int);\n+static int rs6000_debug_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n static bool is_microcoded_insn (rtx);\n static bool is_nonpipeline_insn (rtx);\n static bool is_cracked_insn (rtx);\n@@ -26328,7 +26328,7 @@ static int load_store_pendulum;\n    instructions to issue in this cycle.  */\n \n static int\n-rs6000_variable_issue_1 (rtx insn, int more)\n+rs6000_variable_issue_1 (rtx_insn *insn, int more)\n {\n   last_scheduled_insn = insn;\n   if (GET_CODE (PATTERN (insn)) == USE\n@@ -26368,7 +26368,7 @@ rs6000_variable_issue_1 (rtx insn, int more)\n }\n \n static int\n-rs6000_variable_issue (FILE *stream, int verbose, rtx insn, int more)\n+rs6000_variable_issue (FILE *stream, int verbose, rtx_insn *insn, int more)\n {\n   int r = rs6000_variable_issue_1 (insn, more);\n   if (verbose)\n@@ -26380,7 +26380,7 @@ rs6000_variable_issue (FILE *stream, int verbose, rtx insn, int more)\n    a dependency LINK or INSN on DEP_INSN.  COST is the current cost.  */\n \n static int\n-rs6000_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n+rs6000_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n {\n   enum attr_type attr_type;\n \n@@ -26649,7 +26649,8 @@ rs6000_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n /* Debug version of rs6000_adjust_cost.  */\n \n static int\n-rs6000_debug_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n+rs6000_debug_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn,\n+\t\t\t  int cost)\n {\n   int ret = rs6000_adjust_cost (insn, link, dep_insn, cost);\n \n@@ -26874,7 +26875,7 @@ mem_locations_overlap (rtx mem1, rtx mem2)\n    priorities of insns.  */\n \n static int\n-rs6000_adjust_priority (rtx insn ATTRIBUTE_UNUSED, int priority)\n+rs6000_adjust_priority (rtx_insn *insn ATTRIBUTE_UNUSED, int priority)\n {\n   rtx load_mem, str_mem;\n   /* On machines (like the 750) which have asymmetric integer units,\n@@ -27037,7 +27038,7 @@ rs6000_use_sched_lookahead (void)\n /* We are choosing insn from the ready queue.  Return zero if INSN can be\n    chosen.  */\n static int\n-rs6000_use_sched_lookahead_guard (rtx insn, int ready_index)\n+rs6000_use_sched_lookahead_guard (rtx_insn *insn, int ready_index)\n {\n   if (ready_index == 0)\n     return 0;\n@@ -27219,17 +27220,17 @@ rs6000_is_costly_dependence (dep_t dep, int cost, int distance)\n    skipping any \"non-active\" insns - insns that will not actually occupy\n    an issue slot.  Return NULL_RTX if such an insn is not found.  */\n \n-static rtx\n-get_next_active_insn (rtx insn, rtx tail)\n+static rtx_insn *\n+get_next_active_insn (rtx_insn *insn, rtx_insn *tail)\n {\n   if (insn == NULL_RTX || insn == tail)\n-    return NULL_RTX;\n+    return NULL;\n \n   while (1)\n     {\n       insn = NEXT_INSN (insn);\n       if (insn == NULL_RTX || insn == tail)\n-\treturn NULL_RTX;\n+\treturn NULL;\n \n       if (CALL_P (insn)\n \t  || JUMP_P (insn) || JUMP_TABLE_DATA_P (insn)\n@@ -28002,9 +28003,10 @@ force_new_group (int sched_verbose, FILE *dump, rtx *group_insns,\n      start a new group.  */\n \n static int\n-redefine_groups (FILE *dump, int sched_verbose, rtx prev_head_insn, rtx tail)\n+redefine_groups (FILE *dump, int sched_verbose, rtx_insn *prev_head_insn,\n+\t\t rtx_insn *tail)\n {\n-  rtx insn, next_insn;\n+  rtx_insn *insn, *next_insn;\n   int issue_rate;\n   int can_issue_more;\n   int slot, i;\n@@ -28079,9 +28081,10 @@ redefine_groups (FILE *dump, int sched_verbose, rtx prev_head_insn, rtx tail)\n    returns the number of dispatch groups found.  */\n \n static int\n-pad_groups (FILE *dump, int sched_verbose, rtx prev_head_insn, rtx tail)\n+pad_groups (FILE *dump, int sched_verbose, rtx_insn *prev_head_insn,\n+\t    rtx_insn *tail)\n {\n-  rtx insn, next_insn;\n+  rtx_insn *insn, *next_insn;\n   rtx nop;\n   int issue_rate;\n   int can_issue_more;"}, {"sha": "097ed6ae573bdbd41d65b1caa5e7b2c4edfddbc1", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -5864,7 +5864,7 @@ s390_agen_dep_p (rtx dep_insn, rtx insn)\n    A STD instruction should be scheduled earlier,\n    in order to use the bypass.  */\n static int\n-s390_adjust_priority (rtx insn ATTRIBUTE_UNUSED, int priority)\n+s390_adjust_priority (rtx_insn *insn, int priority)\n {\n   if (! INSN_P (insn))\n     return priority;\n@@ -6540,7 +6540,7 @@ s390_execute_target (rtx insn)\n    execute insns that carry a unique label.  */\n \n static bool\n-s390_cannot_copy_insn_p (rtx insn)\n+s390_cannot_copy_insn_p (rtx_insn *insn)\n {\n   rtx label = s390_execute_label (insn);\n   return label && label != const0_rtx;\n@@ -11712,9 +11712,8 @@ s390_sched_reorder (FILE *file, int verbose,\n    last_scheduled_insn in order to make it available for\n    s390_sched_reorder.  */\n static int\n-s390_sched_variable_issue (FILE *file, int verbose, rtx uncast_insn, int more)\n+s390_sched_variable_issue (FILE *file, int verbose, rtx_insn *insn, int more)\n {\n-  rtx_insn *insn = as_a <rtx_insn *> (uncast_insn);\n   last_scheduled_insn = insn;\n \n   if (s390_tune == PROCESSOR_2827_ZEC12\n@@ -12184,7 +12183,7 @@ s390_option_override (void)\n #define TARGET_CC_MODES_COMPATIBLE s390_cc_modes_compatible\n \n #undef TARGET_INVALID_WITHIN_DOLOOP\n-#define TARGET_INVALID_WITHIN_DOLOOP hook_constcharptr_const_rtx_null\n+#define TARGET_INVALID_WITHIN_DOLOOP hook_constcharptr_const_rtx_insn_null\n \n #ifdef HAVE_AS_TLS\n #undef TARGET_ASM_OUTPUT_DWARF_DTPREL"}, {"sha": "ec3b200f3647801435688b91bb65fb3d788cb2f4", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -203,8 +203,8 @@ static int calc_live_regs (HARD_REG_SET *);\n static HOST_WIDE_INT rounded_frame_size (int);\n static bool sh_frame_pointer_required (void);\n static void sh_emit_mode_set (int, int, int, HARD_REG_SET);\n-static int sh_mode_needed (int, rtx);\n-static int sh_mode_after (int, int, rtx);\n+static int sh_mode_needed (int, rtx_insn *);\n+static int sh_mode_after (int, int, rtx_insn *);\n static int sh_mode_entry (int);\n static int sh_mode_exit (int);\n static int sh_mode_priority (int entity, int n);\n@@ -227,9 +227,9 @@ static void sh_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void sh_insert_attributes (tree, tree *);\n static const char *sh_check_pch_target_flags (int);\n static int sh_register_move_cost (enum machine_mode, reg_class_t, reg_class_t);\n-static int sh_adjust_cost (rtx, rtx, rtx, int);\n+static int sh_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n static int sh_issue_rate (void);\n-static int sh_dfa_new_cycle (FILE *, int, rtx, int, int, int *sort_p);\n+static int sh_dfa_new_cycle (FILE *, int, rtx_insn *, int, int, int *sort_p);\n static short find_set_regmode_weight (rtx, enum machine_mode);\n static short find_insn_regmode_weight (rtx, enum machine_mode);\n static void find_regmode_weight (basic_block, enum machine_mode);\n@@ -243,7 +243,7 @@ static bool high_pressure (enum machine_mode);\n static int sh_reorder (FILE *, int, rtx_insn **, int *, int);\n static int sh_reorder2 (FILE *, int, rtx_insn **, int *, int);\n static void sh_md_init (FILE *, int, int);\n-static int sh_variable_issue (FILE *, int, rtx, int);\n+static int sh_variable_issue (FILE *, int, rtx_insn *, int);\n \n static bool sh_function_ok_for_sibcall (tree, tree);\n \n@@ -265,7 +265,7 @@ static int and_xor_ior_costs (rtx, int);\n static int addsubcosts (rtx);\n static int multcosts (rtx);\n static bool unspec_caller_rtx_p (rtx);\n-static bool sh_cannot_copy_insn_p (rtx);\n+static bool sh_cannot_copy_insn_p (rtx_insn *);\n static bool sh_rtx_costs (rtx, int, int, int, int *, bool);\n static int sh_address_cost (rtx, enum machine_mode, addr_space_t, bool);\n static int sh_pr_n_sets (void);\n@@ -2948,7 +2948,7 @@ unspec_caller_rtx_p (rtx pat)\n /* Indicate that INSN cannot be duplicated.  This is true for insn\n    that generates a unique label.  */\n static bool\n-sh_cannot_copy_insn_p (rtx insn)\n+sh_cannot_copy_insn_p (rtx_insn *insn)\n {\n   rtx pat;\n \n@@ -10784,7 +10784,8 @@ sh_hard_regno_rename_ok (unsigned int old_reg ATTRIBUTE_UNUSED,\n    the same cost as a data-dependence.  The return value should be\n    the new value for COST.  */\n static int\n-sh_adjust_cost (rtx insn, rtx link ATTRIBUTE_UNUSED, rtx dep_insn, int cost)\n+sh_adjust_cost (rtx_insn *insn, rtx link ATTRIBUTE_UNUSED,\n+\t\trtx_insn *dep_insn, int cost)\n {\n   rtx reg, use_pat;\n \n@@ -11272,7 +11273,7 @@ sh_scalar_mode_supported_p (enum machine_mode mode)\n static int\n sh_variable_issue (FILE *dump ATTRIBUTE_UNUSED,\n \t\t   int sched_verbose ATTRIBUTE_UNUSED,\n-\t\t   rtx insn,\n+\t\t   rtx_insn *insn,\n \t\t   int can_issue_more)\n {\n   if (GET_CODE (PATTERN (insn)) != USE\n@@ -11369,7 +11370,7 @@ sh_reorder2 (FILE *dump ATTRIBUTE_UNUSED,\n static int\n sh_dfa_new_cycle (FILE *sched_dump ATTRIBUTE_UNUSED,\n \t\t  int sched_verbose ATTRIBUTE_UNUSED,\n-\t\t  rtx insn ATTRIBUTE_UNUSED,\n+\t\t  rtx_insn *insn ATTRIBUTE_UNUSED,\n \t\t  int last_clock_var,\n \t\t  int clock_var,\n \t\t  int *sort_p)\n@@ -13630,13 +13631,13 @@ sh_emit_mode_set (int entity ATTRIBUTE_UNUSED, int mode,\n }\n \n static int\n-sh_mode_needed (int entity ATTRIBUTE_UNUSED, rtx insn)\n+sh_mode_needed (int entity ATTRIBUTE_UNUSED, rtx_insn *insn)\n {\n   return recog_memoized (insn) >= 0  ? get_attr_fp_mode (insn) : FP_MODE_NONE;\n }\n \n static int\n-sh_mode_after (int entity ATTRIBUTE_UNUSED, int mode, rtx insn)\n+sh_mode_after (int entity ATTRIBUTE_UNUSED, int mode, rtx_insn *insn)\n {\n   if (TARGET_HITACHI && recog_memoized (insn) >= 0 &&\n       get_attr_fp_set (insn) != FP_SET_NONE)"}, {"sha": "6d2d160b167b83f47221362fc3da97dc0cfb1040", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -537,8 +537,8 @@ static void scan_record_type (const_tree, int *, int *, int *);\n static int function_arg_slotno (const CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\tconst_tree, bool, bool, int *, int *);\n \n-static int supersparc_adjust_cost (rtx, rtx, rtx, int);\n-static int hypersparc_adjust_cost (rtx, rtx, rtx, int);\n+static int supersparc_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n+static int hypersparc_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n \n static void sparc_emit_set_const32 (rtx, rtx);\n static void sparc_emit_set_const64 (rtx, rtx);\n@@ -557,7 +557,7 @@ static void sparc_asm_function_epilogue (FILE *, HOST_WIDE_INT);\n static void sparc_solaris_elf_asm_named_section (const char *, unsigned int,\n \t\t\t\t\t\t tree) ATTRIBUTE_UNUSED;\n #endif\n-static int sparc_adjust_cost (rtx, rtx, rtx, int);\n+static int sparc_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n static int sparc_issue_rate (void);\n static void sparc_sched_init (FILE *, int, int);\n static int sparc_use_sched_lookahead (void);\n@@ -9407,7 +9407,7 @@ sparc_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n    a dependency LINK or INSN on DEP_INSN.  COST is the current cost.  */\n \n static int\n-supersparc_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n+supersparc_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n {\n   enum attr_type insn_type;\n \n@@ -9468,7 +9468,7 @@ supersparc_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n }\n \n static int\n-hypersparc_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n+hypersparc_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n {\n   enum attr_type insn_type, dep_type;\n   rtx pat = PATTERN(insn);\n@@ -9545,7 +9545,7 @@ hypersparc_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n }\n \n static int\n-sparc_adjust_cost(rtx insn, rtx link, rtx dep, int cost)\n+sparc_adjust_cost(rtx_insn *insn, rtx link, rtx_insn *dep, int cost)\n {\n   switch (sparc_cpu)\n     {"}, {"sha": "393bf4d6602236b2dff1b5dc9ab9f09b3483aa1d", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -2802,11 +2802,10 @@ spu_sched_init (FILE *file ATTRIBUTE_UNUSED, int verbose ATTRIBUTE_UNUSED,\n static int\n spu_sched_variable_issue (FILE *file ATTRIBUTE_UNUSED,\n \t\t\t  int verbose ATTRIBUTE_UNUSED,\n-\t\t\t  rtx uncast_insn, int more)\n+\t\t\t  rtx_insn *insn, int more)\n {\n   int len;\n   int p;\n-  rtx_insn *insn = as_a <rtx_insn *> (uncast_insn);\n   if (GET_CODE (PATTERN (insn)) == USE\n       || GET_CODE (PATTERN (insn)) == CLOBBER\n       || (len = get_attr_length (insn)) == 0)\n@@ -3000,11 +2999,9 @@ spu_sched_reorder (FILE *file ATTRIBUTE_UNUSED, int verbose ATTRIBUTE_UNUSED,\n \n /* INSN is dependent on DEP_INSN. */\n static int\n-spu_sched_adjust_cost (rtx uncast_insn, rtx link, rtx uncast_dep_insn, int cost)\n+spu_sched_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n {\n   rtx set;\n-  rtx_insn *insn = as_a <rtx_insn *> (uncast_insn);\n-  rtx_insn *dep_insn = as_a <rtx_insn *> (uncast_dep_insn);\n \n   /* The blockage pattern is used to prevent instructions from being\n      moved across it and has no cost. */"}, {"sha": "78025acc90ce9abcc3b5a0bf4a10bb96be09f669", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -4429,7 +4429,8 @@ get_jump_target (rtx branch)\n \n /* Implement TARGET_SCHED_ADJUST_COST.  */\n static int\n-tilegx_sched_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n+tilegx_sched_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn,\n+\t\t\t  int cost)\n {\n   /* If we have a true dependence, INSN is a call, and DEP_INSN\n      defines a register that is needed by the call (argument or stack"}, {"sha": "2fc588b79fa48f4005eca3a246254a725c7bc6cd", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -3955,7 +3955,8 @@ get_jump_target (rtx branch)\n \n /* Implement TARGET_SCHED_ADJUST_COST.  */\n static int\n-tilepro_sched_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n+tilepro_sched_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn,\n+\t\t\t   int cost)\n {\n   /* If we have a true dependence, INSN is a call, and DEP_INSN\n      defines a register that is needed by the call (argument or stack"}, {"sha": "0c44d518fa0cec11c6514529061f85b0c11774f2", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -6378,7 +6378,7 @@ it to vary depending on what the instructions are, you must use\n @samp{TARGET_SCHED_VARIABLE_ISSUE}.\n @end deftypefn\n \n-@deftypefn {Target Hook} int TARGET_SCHED_VARIABLE_ISSUE (FILE *@var{file}, int @var{verbose}, rtx @var{insn}, int @var{more})\n+@deftypefn {Target Hook} int TARGET_SCHED_VARIABLE_ISSUE (FILE *@var{file}, int @var{verbose}, rtx_insn *@var{insn}, int @var{more})\n This hook is executed by the scheduler after it has scheduled an insn\n from the ready list.  It should return the number of insns which can\n still be issued in the current cycle.  The default is\n@@ -6392,7 +6392,7 @@ debug output to.  @var{verbose} is the verbose level provided by\n was scheduled.\n @end deftypefn\n \n-@deftypefn {Target Hook} int TARGET_SCHED_ADJUST_COST (rtx @var{insn}, rtx @var{link}, rtx @var{dep_insn}, int @var{cost})\n+@deftypefn {Target Hook} int TARGET_SCHED_ADJUST_COST (rtx_insn *@var{insn}, rtx @var{link}, rtx_insn *@var{dep_insn}, int @var{cost})\n This function corrects the value of @var{cost} based on the\n relationship between @var{insn} and @var{dep_insn} through the\n dependence @var{link}.  It should return the new value.  The default\n@@ -6407,7 +6407,7 @@ acceptable, you could use the hook to modify them too.  See also\n @pxref{Processor pipeline description}.\n @end deftypefn\n \n-@deftypefn {Target Hook} int TARGET_SCHED_ADJUST_PRIORITY (rtx @var{insn}, int @var{priority})\n+@deftypefn {Target Hook} int TARGET_SCHED_ADJUST_PRIORITY (rtx_insn *@var{insn}, int @var{priority})\n This hook adjusts the integer scheduling priority @var{priority} of\n @var{insn}.  It should return the new priority.  Increase the priority to\n execute @var{insn} earlier, reduce the priority to execute @var{insn}\n@@ -6447,7 +6447,7 @@ cycle.  These other insns can then be taken into account properly.\n This hook is used to check whether target platform supports macro fusion.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_SCHED_MACRO_FUSION_PAIR_P (rtx @var{condgen}, rtx @var{condjmp})\n+@deftypefn {Target Hook} bool TARGET_SCHED_MACRO_FUSION_PAIR_P (rtx_insn *@var{condgen}, rtx_insn *@var{condjmp})\n This hook is used to check whether two insns could be macro fused for\n target microarchitecture. If this hook returns true for the given insn pair\n (@var{condgen} and @var{condjmp}), scheduler will put them into a sched\n@@ -6510,7 +6510,7 @@ when the new simulated processor cycle starts.\n The hook can be used to initialize data used by the previous hook.\n @end deftypefn\n \n-@deftypefn {Target Hook} rtx TARGET_SCHED_DFA_POST_CYCLE_INSN (void)\n+@deftypefn {Target Hook} {rtx_insn *} TARGET_SCHED_DFA_POST_CYCLE_INSN (void)\n The hook is analogous to @samp{TARGET_SCHED_DFA_PRE_CYCLE_INSN} but used\n to changed the state as if the insn were scheduled when the new\n simulated processor cycle finishes.\n@@ -6564,7 +6564,7 @@ schedules to choose the best one.\n The default is no multipass scheduling.\n @end deftypefn\n \n-@deftypefn {Target Hook} int TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD (rtx @var{insn}, int @var{ready_index})\n+@deftypefn {Target Hook} int TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD (rtx_insn *@var{insn}, int @var{ready_index})\n \n This hook controls what insns from the ready insn queue will be\n considered for the multipass insn scheduling.  If the hook returns\n@@ -6585,7 +6585,7 @@ This hook prepares the target backend for a new round of multipass\n scheduling.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_SCHED_FIRST_CYCLE_MULTIPASS_ISSUE (void *@var{data}, signed char *@var{ready_try}, int @var{n_ready}, rtx @var{insn}, const void *@var{prev_data})\n+@deftypefn {Target Hook} void TARGET_SCHED_FIRST_CYCLE_MULTIPASS_ISSUE (void *@var{data}, signed char *@var{ready_try}, int @var{n_ready}, rtx_insn *@var{insn}, const void *@var{prev_data})\n This hook is called when multipass scheduling evaluates instruction INSN.\n @end deftypefn\n \n@@ -6607,7 +6607,7 @@ This hook initializes target-specific data used in multipass scheduling.\n This hook finalizes target-specific data used in multipass scheduling.\n @end deftypefn\n \n-@deftypefn {Target Hook} int TARGET_SCHED_DFA_NEW_CYCLE (FILE *@var{dump}, int @var{verbose}, rtx @var{insn}, int @var{last_clock}, int @var{clock}, int *@var{sort_p})\n+@deftypefn {Target Hook} int TARGET_SCHED_DFA_NEW_CYCLE (FILE *@var{dump}, int @var{verbose}, rtx_insn *@var{insn}, int @var{last_clock}, int @var{clock}, int *@var{sort_p})\n This hook is called by the insn scheduler before issuing @var{insn}\n on cycle @var{clock}.  If the hook returns nonzero,\n @var{insn} is not issued on this processor cycle.  Instead,\n@@ -6669,7 +6669,7 @@ Deallocate internal data in target scheduling context pointed to by @var{tc}.\n Deallocate a store for target scheduling context pointed to by @var{tc}.\n @end deftypefn\n \n-@deftypefn {Target Hook} int TARGET_SCHED_SPECULATE_INSN (rtx @var{insn}, unsigned int @var{dep_status}, rtx *@var{new_pat})\n+@deftypefn {Target Hook} int TARGET_SCHED_SPECULATE_INSN (rtx_insn *@var{insn}, unsigned int @var{dep_status}, rtx *@var{new_pat})\n This hook is called by the insn scheduler when @var{insn} has only\n speculative dependencies and therefore can be scheduled speculatively.\n The hook is used to check if the pattern of @var{insn} has a speculative\n@@ -6686,7 +6686,7 @@ for @var{insn}.  It should return @code{true}, if the corresponding check\n instruction should branch to recovery code, or @code{false} otherwise.\n @end deftypefn\n \n-@deftypefn {Target Hook} rtx TARGET_SCHED_GEN_SPEC_CHECK (rtx @var{insn}, rtx @var{label}, unsigned int @var{ds})\n+@deftypefn {Target Hook} rtx TARGET_SCHED_GEN_SPEC_CHECK (rtx_insn *@var{insn}, rtx_insn *@var{label}, unsigned int @var{ds})\n This hook is called by the insn scheduler to generate a pattern for recovery\n check instruction.  If @var{mutate_p} is zero, then @var{insn} is a\n speculative instruction for which the check should be generated.\n@@ -6713,12 +6713,12 @@ bound will be used in case this hook is not implemented: the total number\n of instructions divided by the issue rate.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_SCHED_DISPATCH (rtx @var{insn}, int @var{x})\n+@deftypefn {Target Hook} bool TARGET_SCHED_DISPATCH (rtx_insn *@var{insn}, int @var{x})\n This hook is called by Haifa Scheduler.  It returns true if dispatch scheduling\n is supported in hardware and the condition specified in the parameter is true.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_SCHED_DISPATCH_DO (rtx @var{insn}, int @var{x})\n+@deftypefn {Target Hook} void TARGET_SCHED_DISPATCH_DO (rtx_insn *@var{insn}, int @var{x})\n This hook is called by Haifa Scheduler.  It performs the operation specified\n in its second parameter.\n @end deftypefn\n@@ -8498,7 +8498,7 @@ writing conditional output routines in those patterns.\n If this macro is not defined, it is equivalent to a null statement.\n @end defmac\n \n-@deftypefn {Target Hook} void TARGET_ASM_FINAL_POSTSCAN_INSN (FILE *@var{file}, rtx @var{insn}, rtx *@var{opvec}, int @var{noperands})\n+@deftypefn {Target Hook} void TARGET_ASM_FINAL_POSTSCAN_INSN (FILE *@var{file}, rtx_insn *@var{insn}, rtx *@var{opvec}, int @var{noperands})\n If defined, this target hook is a function which is executed just after the\n output of assembler code for @var{insn}, to change the mode of the assembler\n if necessary.\n@@ -8742,7 +8742,7 @@ The default is that no label is emitted.\n If the target implements @code{TARGET_ASM_UNWIND_EMIT}, this hook may be used to emit a directive to install a personality hook into the unwind info.  This hook should not be used if dwarf2 unwind info is used.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_ASM_UNWIND_EMIT (FILE *@var{stream}, rtx @var{insn})\n+@deftypefn {Target Hook} void TARGET_ASM_UNWIND_EMIT (FILE *@var{stream}, rtx_insn *@var{insn})\n This target hook emits assembly directives required to unwind the\n given instruction.  This is only used when @code{TARGET_EXCEPT_UNWIND_INFO}\n returns @code{UI_TARGET}.\n@@ -9589,11 +9589,11 @@ switch is needed / supplied.\n Generate one or more insns to set @var{entity} to @var{mode}. @var{hard_reg_live} is the set of hard registers live at the point where the insn(s) are to be inserted. @var{prev_moxde} indicates the mode to switch from. Sets of a lower numbered entity will be emitted before sets of a higher numbered entity to a mode of the same or lower priority.\n @end deftypefn\n \n-@deftypefn {Target Hook} int TARGET_MODE_NEEDED (int @var{entity}, rtx @var{insn})\n+@deftypefn {Target Hook} int TARGET_MODE_NEEDED (int @var{entity}, rtx_insn *@var{insn})\n @var{entity} is an integer specifying a mode-switched entity.  If @code{OPTIMIZE_MODE_SWITCHING} is defined, you must define this macro to return an integer value not larger than the corresponding element in @code{NUM_MODES_FOR_MODE_SWITCHING}, to denote the mode that @var{entity} must be switched into prior to the execution of @var{insn}.\n @end deftypefn\n \n-@deftypefn {Target Hook} int TARGET_MODE_AFTER (int @var{entity}, int @var{mode}, rtx @var{insn})\n+@deftypefn {Target Hook} int TARGET_MODE_AFTER (int @var{entity}, int @var{mode}, rtx_insn *@var{insn})\n @var{entity} is an integer specifying a mode-switched entity.  If this macro is defined, it is evaluated for every @var{insn} during mode switching.  It determines the mode that an insn results in (if different from the incoming mode).\n @end deftypefn\n \n@@ -10842,7 +10842,7 @@ implementation returns true.  You can use @code{can_use_doloop_if_innermost}\n if the loop must be the innermost, and if there are no other restrictions.\n @end deftypefn\n \n-@deftypefn {Target Hook} {const char *} TARGET_INVALID_WITHIN_DOLOOP (const_rtx @var{insn})\n+@deftypefn {Target Hook} {const char *} TARGET_INVALID_WITHIN_DOLOOP (const rtx_insn *@var{insn})\n \n Take an instruction in @var{insn} and return NULL if it is valid within a\n low-overhead loop, otherwise return a string explaining why doloop\n@@ -10855,7 +10855,7 @@ By default, the RTL loop optimizer does not use a present doloop pattern for\n loops containing function calls or branch on table instructions.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_LEGITIMATE_COMBINED_INSN (rtx @var{insn})\n+@deftypefn {Target Hook} bool TARGET_LEGITIMATE_COMBINED_INSN (rtx_insn *@var{insn})\n Take an instruction in @var{insn} and return @code{false} if the instruction is not appropriate as a combination of two or more instructions.  The default is to accept all instructions.\n @end deftypefn\n "}, {"sha": "80a4dc81d2cef02176e9b6c2705a99878b3b09fa", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -5612,7 +5612,7 @@ choose_ready (struct ready_list *ready, bool first_cycle_insn_p,\n   if (lookahead <= 0 || SCHED_GROUP_P (ready_element (ready, 0))\n       || DEBUG_INSN_P (ready_element (ready, 0)))\n     {\n-      if (targetm.sched.dispatch (NULL_RTX, IS_DISPATCH_ON))\n+      if (targetm.sched.dispatch (NULL, IS_DISPATCH_ON))\n \t*insn_ptr = ready_remove_first_dispatch (ready);\n       else\n \t*insn_ptr = ready_remove_first (ready);\n@@ -6362,7 +6362,7 @@ schedule_block (basic_block *target_bb, state_t init_state)\n           if (TODO_SPEC (insn) & SPECULATIVE)\n             generate_recovery_code (insn);\n \n-\t  if (targetm.sched.dispatch (NULL_RTX, IS_DISPATCH_ON))\n+\t  if (targetm.sched.dispatch (NULL, IS_DISPATCH_ON))\n \t    targetm.sched.dispatch_do (insn, ADD_TO_DISPATCH_WINDOW);\n \n \t  /* Update counters, etc in the scheduler's front end.  */\n@@ -6730,8 +6730,8 @@ sched_init (void)\n   flag_schedule_speculative_load = 0;\n #endif\n \n-  if (targetm.sched.dispatch (NULL_RTX, IS_DISPATCH_ON))\n-    targetm.sched.dispatch_do (NULL_RTX, DISPATCH_INIT);\n+  if (targetm.sched.dispatch (NULL, IS_DISPATCH_ON))\n+    targetm.sched.dispatch_do (NULL, DISPATCH_INIT);\n \n   if (live_range_shrinkage_p)\n     sched_pressure = SCHED_PRESSURE_WEIGHTED;\n@@ -8146,7 +8146,7 @@ haifa_change_pattern (rtx_insn *insn, rtx new_pat)\n    current instruction pattern,\n    1 - need to change pattern for *NEW_PAT to be speculative.  */\n int\n-sched_speculate_insn (rtx insn, ds_t request, rtx *new_pat)\n+sched_speculate_insn (rtx_insn *insn, ds_t request, rtx *new_pat)\n {\n   gcc_assert (current_sched_info->flags & DO_SPECULATION\n               && (request & SPECULATIVE)\n@@ -8699,7 +8699,7 @@ ready_remove_first_dispatch (struct ready_list *ready)\n \t}\n     }\n \n-  if (targetm.sched.dispatch (NULL_RTX, DISPATCH_VIOLATION))\n+  if (targetm.sched.dispatch (NULL, DISPATCH_VIOLATION))\n     return ready_remove_first (ready);\n \n   for (i = 1; i < ready->n_ready; i++)"}, {"sha": "3f1135472e36b13cf407231a4fcaec19469a462d", "filename": "gcc/hooks.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -302,7 +302,7 @@ hook_bool_tree_bool_false (tree a ATTRIBUTE_UNUSED, bool b ATTRIBUTE_UNUSED)\n }\n \n bool\n-hook_bool_rtx_true (rtx a ATTRIBUTE_UNUSED)\n+hook_bool_rtx_insn_true (rtx_insn *insn ATTRIBUTE_UNUSED)\n {\n   return true;\n }\n@@ -411,9 +411,9 @@ hook_tree_tree_tree_tree_null (tree t0 ATTRIBUTE_UNUSED,\n   return NULL;\n }\n \n-/* Generic hook that takes a rtx and returns a NULL string.  */\n+/* Generic hook that takes an rtx_insn *and returns a NULL string.  */\n const char *\n-hook_constcharptr_const_rtx_null (const_rtx r ATTRIBUTE_UNUSED)\n+hook_constcharptr_const_rtx_insn_null (const rtx_insn *insn ATTRIBUTE_UNUSED)\n {\n   return NULL;\n }\n@@ -447,18 +447,20 @@ hook_tree_const_tree_null (const_tree t ATTRIBUTE_UNUSED)\n   return NULL;\n }\n \n-/* Generic hook that takes a rtx and an int and returns a bool.  */\n+/* Generic hook that takes a rtx_insn * and an int and returns a bool.  */\n \n bool\n-hook_bool_rtx_int_false (rtx insn ATTRIBUTE_UNUSED, int mode ATTRIBUTE_UNUSED)\n+hook_bool_rtx_insn_int_false (rtx_insn *insn ATTRIBUTE_UNUSED,\n+\t\t\t      int mode ATTRIBUTE_UNUSED)\n {\n   return false;\n }\n \n-/* Generic hook that takes a rtx and an int and returns void.  */\n+/* Generic hook that takes a rtx_insn * and an int and returns void.  */\n \n void\n-hook_void_rtx_int (rtx insn ATTRIBUTE_UNUSED, int mode ATTRIBUTE_UNUSED)\n+hook_void_rtx_insn_int (rtx_insn *insn ATTRIBUTE_UNUSED,\n+\t\t\tint mode ATTRIBUTE_UNUSED)\n {\n }\n "}, {"sha": "27ad09dd227eaf9d91a9a807c6cb1f3f71114b3d", "filename": "gcc/hooks.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -52,9 +52,9 @@ extern bool hook_bool_const_tree_hwi_hwi_const_tree_true (const_tree,\n \t\t\t\t\t\t\t  HOST_WIDE_INT,\n \t\t\t\t\t\t\t  HOST_WIDE_INT,\n \t\t\t\t\t\t\t  const_tree);\n-extern bool hook_bool_rtx_true (rtx);\n+extern bool hook_bool_rtx_insn_true (rtx_insn *);\n extern bool hook_bool_rtx_false (rtx);\n-extern bool hook_bool_rtx_int_false (rtx, int);\n+extern bool hook_bool_rtx_insn_int_false (rtx_insn *, int);\n extern bool hook_bool_uintp_uintp_false (unsigned int *, unsigned int *);\n extern bool hook_bool_rtx_int_int_int_intp_bool_false (rtx, int, int, int,\n \t\t\t\t\t\t       int *, bool);\n@@ -67,7 +67,7 @@ extern bool hook_bool_wint_wint_uint_bool_true (const widest_int &,\n \n extern void hook_void_void (void);\n extern void hook_void_constcharptr (const char *);\n-extern void hook_void_rtx_int (rtx, int);\n+extern void hook_void_rtx_insn_int (rtx_insn *, int);\n extern void hook_void_FILEptr_constcharptr (FILE *, const char *);\n extern bool hook_bool_FILEptr_rtx_false (FILE *, rtx);\n extern void hook_void_tree (tree);\n@@ -104,7 +104,7 @@ extern rtx hook_rtx_tree_int_null (tree, int);\n \n extern const char *hook_constcharptr_void_null (void);\n extern const char *hook_constcharptr_const_tree_null (const_tree);\n-extern const char *hook_constcharptr_const_rtx_null (const_rtx);\n+extern const char *hook_constcharptr_const_rtx_insn_null (const rtx_insn *);\n extern const char *hook_constcharptr_const_tree_const_tree_null (const_tree, const_tree);\n extern const char *hook_constcharptr_int_const_tree_null (int, const_tree);\n extern const char *hook_constcharptr_int_const_tree_const_tree_null (int, const_tree, const_tree);"}, {"sha": "31272f66652de7a6e0f9c7d00d85922bd2eb2804", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -2830,9 +2830,9 @@ sched_analyze_2 (struct deps_desc *deps, rtx x, rtx_insn *insn)\n    from scheduling them apart.  */\n \n static void\n-sched_macro_fuse_insns (rtx insn)\n+sched_macro_fuse_insns (rtx_insn *insn)\n {\n-  rtx prev;\n+  rtx_insn *prev;\n \n   if (any_condjump_p (insn))\n     {"}, {"sha": "0332751c606417e208ded8d695fd6029e2fe05d7", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -1364,7 +1364,7 @@ extern int try_ready (rtx_insn *);\n extern void sched_extend_ready_list (int);\n extern void sched_finish_ready_list (void);\n extern void sched_change_pattern (rtx, rtx);\n-extern int sched_speculate_insn (rtx, ds_t, rtx *);\n+extern int sched_speculate_insn (rtx_insn *, ds_t, rtx *);\n extern void unlink_bb_notes (basic_block, basic_block);\n extern void add_block (basic_block, basic_block);\n extern rtx_note *bb_note (basic_block);"}, {"sha": "d9fe7c7553bd3f7bf1985d887e96778be51ad252", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -1805,7 +1805,7 @@ create_speculation_check (expr_t c_expr, ds_t check_ds, insn_t orig_insn)\n   rtx_insn *insn_rtx;\n   insn_t insn;\n   basic_block recovery_block;\n-  rtx label;\n+  rtx_insn *label;\n \n   /* Create a recovery block if target is going to emit branchy check, or if\n      ORIG_INSN was speculative already.  */\n@@ -1818,7 +1818,7 @@ create_speculation_check (expr_t c_expr, ds_t check_ds, insn_t orig_insn)\n   else\n     {\n       recovery_block = NULL;\n-      label = NULL_RTX;\n+      label = NULL;\n     }\n \n   /* Get pattern of the check.  */"}, {"sha": "e7212ea875dc9344ebff95fe3b27a666a1d56c40", "filename": "gcc/target.def", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -194,7 +194,7 @@ DEFHOOK\n  \"This target hook emits assembly directives required to unwind the\\n\\\n given instruction.  This is only used when @code{TARGET_EXCEPT_UNWIND_INFO}\\n\\\n returns @code{UI_TARGET}.\",\n- void, (FILE *stream, rtx insn),\n+ void, (FILE *stream, rtx_insn *insn),\n  NULL)\n \n DEFHOOKPOD\n@@ -810,7 +810,7 @@ elements of the vector which contain meaningful data for this insn.\\n\\\n The contents of this vector are what was used to convert the insn\\n\\\n template into assembler code, so you can change the assembler mode\\n\\\n by checking the contents of the vector.\",\n- void, (FILE *file, rtx insn, rtx *opvec, int noperands),\n+ void, (FILE *file, rtx_insn *insn, rtx *opvec, int noperands),\n  NULL)\n \n /* Emit the trampoline template.  This hook may be NULL.  */\n@@ -924,7 +924,7 @@ output-dependence is maximum of one and the difference of latency\\n\\\n times of the first and the second insns.  If these values are not\\n\\\n acceptable, you could use the hook to modify them too.  See also\\n\\\n @pxref{Processor pipeline description}.\",\n- int, (rtx insn, rtx link, rtx dep_insn, int cost), NULL)\n+ int, (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost), NULL)\n \n /* Adjust the priority of an insn as you see fit.  Returns the new priority.  */\n DEFHOOK\n@@ -934,7 +934,7 @@ DEFHOOK\n execute @var{insn} earlier, reduce the priority to execute @var{insn}\\n\\\n later.  Do not define this hook if you do not need to adjust the\\n\\\n scheduling priorities of insns.\",\n- int, (rtx insn, int priority), NULL)\n+ int, (rtx_insn *insn, int priority), NULL)\n \n /* Function which returns the maximum number of insns that can be\n    scheduled in the same machine cycle.  This must be constant\n@@ -967,7 +967,7 @@ than others, so that fewer insns can follow them in the same cycle.\\n\\\n debug output to.  @var{verbose} is the verbose level provided by\\n\\\n @option{-fsched-verbose-@var{n}}.  @var{insn} is the instruction that\\n\\\n was scheduled.\",\n- int, (FILE *file, int verbose, rtx insn, int more), NULL)\n+ int, (FILE *file, int verbose, rtx_insn *insn, int more), NULL)\n \n /* Initialize machine-dependent scheduling code.  */\n DEFHOOK\n@@ -1052,7 +1052,7 @@ DEFHOOK\n target microarchitecture. If this hook returns true for the given insn pair\\n\\\n (@var{condgen} and @var{condjmp}), scheduler will put them into a sched\\n\\\n group, and they will not be scheduled apart.\",\n- bool, (rtx condgen, rtx condjmp), NULL)\n+ bool, (rtx_insn *condgen, rtx_insn *condjmp), NULL)\n \n /* The following member value is a pointer to a function called\n    after evaluation forward dependencies of insns in chain given\n@@ -1105,7 +1105,7 @@ DEFHOOK\n  \"The hook is analogous to @samp{TARGET_SCHED_DFA_PRE_CYCLE_INSN} but used\\n\\\n to changed the state as if the insn were scheduled when the new\\n\\\n simulated processor cycle finishes.\",\n- rtx, (void), NULL)\n+ rtx_insn *, (void), NULL)\n \n /* The values of the following two members are pointers to\n    functions used to simplify the automaton descriptions.\n@@ -1184,7 +1184,7 @@ instruction at position 0 in the ready list.  @var{ready_index} is passed\\n\\\n to allow backends make correct judgements.\\n\\\n \\n\\\n The default is that any ready insns can be chosen to be issued.\",\n- int, (rtx insn, int ready_index), NULL)\n+ int, (rtx_insn *insn, int ready_index), NULL)\n \n /* This hook prepares the target for a new round of multipass\n    scheduling.\n@@ -1215,7 +1215,7 @@ scheduling.\",\n DEFHOOK\n (first_cycle_multipass_issue,\n  \"This hook is called when multipass scheduling evaluates instruction INSN.\",\n- void, (void *data, signed char *ready_try, int n_ready, rtx insn,\n+ void, (void *data, signed char *ready_try, int n_ready, rtx_insn *insn,\n \tconst void *prev_data), NULL)\n \n /* This hook is called when multipass scheduling backtracks from evaluation of\n@@ -1290,7 +1290,7 @@ verbosity level to use for debugging output.\\n\\\n @var{last_clock} and @var{clock} are, respectively, the\\n\\\n processor cycle on which the previous insn has been issued,\\n\\\n and the current processor cycle.\",\n- int, (FILE *dump, int verbose, rtx insn, int last_clock,\n+ int, (FILE *dump, int verbose, rtx_insn *insn, int last_clock,\n        int clock, int *sort_p),\n  NULL)\n \n@@ -1330,7 +1330,9 @@ DEFHOOK_UNDOC\n  \"Given the current cost, @var{cost}, of an insn, @var{insn}, calculate and\\\n  return a new cost based on its relationship to @var{dep_insn} through the\\\n  dependence of weakness @var{dw}.  The default is to make no adjustment.\",\n- int, (rtx insn, int dep_type1, rtx dep_insn, int cost, unsigned int dw), NULL)\n+ int, (rtx_insn *insn, int dep_type1, rtx_insn *dep_insn, int cost,\n+       unsigned int dw),\n+ NULL)\n \n /* The following member value is a pointer to a function called\n    by the insn scheduler. This hook is called to notify the backend\n@@ -1396,7 +1398,7 @@ pattern.  The hook should return 1, if the instruction has a speculative form,\\n\n or @minus{}1, if it doesn't.  @var{request} describes the type of requested\\n\\\n speculation.  If the return value equals 1 then @var{new_pat} is assigned\\n\\\n the generated speculative pattern.\",\n- int, (rtx insn, unsigned int dep_status, rtx *new_pat), NULL)\n+ int, (rtx_insn *insn, unsigned int dep_status, rtx *new_pat), NULL)\n \n /* The following member value is a pointer to a function called\n    by the insn scheduler.  It should return true if the check instruction\n@@ -1425,7 +1427,7 @@ be emitted, or a null pointer, when requested check doesn't branch to\\n\\\n recovery code (a simple check).  If @var{mutate_p} is nonzero, then\\n\\\n a pattern for a branchy check corresponding to a simple check denoted by\\n\\\n @var{insn} should be generated.  In this case @var{label} can't be null.\",\n- rtx, (rtx insn, rtx label, unsigned int ds), NULL)\n+ rtx, (rtx_insn *insn, rtx_insn *label, unsigned int ds), NULL)\n \n /* The following member value is a pointer to a function that provides\n    information about the speculation capabilities of the target.\n@@ -1441,12 +1443,12 @@ The structure describes speculation types that can be used in the scheduler.\",\n DEFHOOK_UNDOC\n (get_insn_spec_ds,\n  \"Return speculation types of instruction @var{insn}.\",\n- unsigned int, (rtx insn), NULL)\n+ unsigned int, (rtx_insn *insn), NULL)\n \n DEFHOOK_UNDOC\n (get_insn_checked_ds,\n  \"Return speculation types that are checked for instruction @var{insn}\",\n- unsigned int, (rtx insn), NULL)\n+ unsigned int, (rtx_insn *insn), NULL)\n \n DEFHOOK_UNDOC\n (skip_rtx_p,\n@@ -1475,8 +1477,8 @@ DEFHOOK\n (dispatch_do,\n \"This hook is called by Haifa Scheduler.  It performs the operation specified\\n\\\n in its second parameter.\",\n-void, (rtx insn, int x),\n-hook_void_rtx_int)\n+void, (rtx_insn *insn, int x),\n+hook_void_rtx_insn_int)\n \n /* The following member value is a a function that returns true is\n    dispatch schedling is supported in hardware and condition passed\n@@ -1485,8 +1487,8 @@ DEFHOOK\n (dispatch,\n \"This hook is called by Haifa Scheduler.  It returns true if dispatch scheduling\\n\\\n is supported in hardware and the condition specified in the parameter is true.\",\n-bool, (rtx insn, int x),\n-hook_bool_rtx_int_false)\n+bool, (rtx_insn *insn, int x),\n+hook_bool_rtx_insn_int_false)\n \n DEFHOOKPOD\n (exposed_pipeline,\n@@ -2363,7 +2365,7 @@ of TLS symbols for various targets.\",\n DEFHOOK_UNDOC\n (cannot_copy_insn_p,\n  \"True if the insn @var{x} cannot be duplicated.\",\n- bool, (rtx), NULL)\n+ bool, (rtx_insn *), NULL)\n \n /* True if X is considered to be commutative.  */\n DEFHOOK\n@@ -3549,7 +3551,7 @@ instruction that clobbers these this function should return a string indicating\\\n the reason why the doloop could not be applied.\\n\\\n By default, the RTL loop optimizer does not use a present doloop pattern for\\n\\\n loops containing function calls or branch on table instructions.\",\n- const char *, (const_rtx insn),\n+ const char *, (const rtx_insn *insn),\n  default_invalid_within_doloop)\n \n /* Returns true for a legitimate combined insn.  */\n@@ -3558,8 +3560,8 @@ DEFHOOK\n \"Take an instruction in @var{insn} and return @code{false} if the instruction\\\n  is not appropriate as a combination of two or more instructions.  The\\\n  default is to accept all instructions.\",\n- bool, (rtx insn),\n- hook_bool_rtx_true)\n+ bool, (rtx_insn *insn),\n+ hook_bool_rtx_insn_true)\n \n DEFHOOK\n (valid_dllimport_attribute_p,\n@@ -5371,12 +5373,12 @@ DEFHOOK\n DEFHOOK\n (needed,\n  \"@var{entity} is an integer specifying a mode-switched entity.  If @code{OPTIMIZE_MODE_SWITCHING} is defined, you must define this macro to return an integer value not larger than the corresponding element in @code{NUM_MODES_FOR_MODE_SWITCHING}, to denote the mode that @var{entity} must be switched into prior to the execution of @var{insn}.\",\n- int, (int entity, rtx insn), NULL)\n+ int, (int entity, rtx_insn *insn), NULL)\n \n DEFHOOK\n (after,\n  \"@var{entity} is an integer specifying a mode-switched entity.  If this macro is defined, it is evaluated for every @var{insn} during mode switching.  It determines the mode that an insn results in (if different from the incoming mode).\",\n- int, (int entity, int mode, rtx insn), NULL)\n+ int, (int entity, int mode, rtx_insn *insn), NULL)\n \n DEFHOOK\n (entry,"}, {"sha": "59ba9a7f7f62fb2f28ab62f5725b2c1111b0a373", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -485,7 +485,7 @@ default_has_ifunc_p (void)\n    these cases.  */\n \n const char *\n-default_invalid_within_doloop (const_rtx insn)\n+default_invalid_within_doloop (const rtx_insn *insn)\n {\n   if (CALL_P (insn))\n     return \"Function call in loop.\";"}, {"sha": "bbc9a82e1476b732a7ac210bc5c8ac37f053ab0b", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=ac44248e6abd1bfc0ed92a9ef66fbf4987cdea96", "patch": "@@ -75,7 +75,7 @@ extern bool default_fixed_point_supported_p (void);\n \n extern bool default_has_ifunc_p (void);\n \n-extern const char * default_invalid_within_doloop (const_rtx);\n+extern const char * default_invalid_within_doloop (const rtx_insn *);\n \n extern tree default_builtin_vectorized_function (tree, tree, tree);\n "}]}