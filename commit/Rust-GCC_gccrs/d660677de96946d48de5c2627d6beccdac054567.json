{"sha": "d660677de96946d48de5c2627d6beccdac054567", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY2MDY3N2RlOTY5NDZkNDhkZTVjMjYyN2Q2YmVjY2RhYzA1NDU2Nw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-06-21T22:47:29Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-06-21T22:47:29Z"}, "message": "mips.c (symbolic_expression_p): New function.\n\n\t* config/mips/mips.c (symbolic_expression_p): New function.\n\t(mips_select_rtx_section): Put symbolic expressions in the\n\tdata section, not the read-only data section.\n\nFrom-SVN: r27688", "tree": {"sha": "ac8e7756d4a0b9ea3436c05c6406cbef089f6cb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac8e7756d4a0b9ea3436c05c6406cbef089f6cb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d660677de96946d48de5c2627d6beccdac054567", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d660677de96946d48de5c2627d6beccdac054567", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d660677de96946d48de5c2627d6beccdac054567", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d660677de96946d48de5c2627d6beccdac054567/comments", "author": null, "committer": null, "parents": [{"sha": "c3bef29f4874b91fa1a053d77244637230b3a9c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3bef29f4874b91fa1a053d77244637230b3a9c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3bef29f4874b91fa1a053d77244637230b3a9c6"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "d4089ba23fe527b05525f94655404ad7dfb914d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d660677de96946d48de5c2627d6beccdac054567/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d660677de96946d48de5c2627d6beccdac054567/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d660677de96946d48de5c2627d6beccdac054567", "patch": "@@ -1,3 +1,9 @@\n+Mon Jun 21 12:47:39 1999  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* config/mips/mips.c (symbolic_expression_p): New function.\n+\t(mips_select_rtx_section): Put symbolic expressions in the\n+\tdata section, not the read-only data section.\n+\n Mon Jun 21 22:13:06 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* rs6000.md (find_addr_reg): Handle LO_SUM addresses."}, {"sha": "ba5a564b5c6e8d011047b49d4384074ec50718ae", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d660677de96946d48de5c2627d6beccdac054567/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d660677de96946d48de5c2627d6beccdac054567/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d660677de96946d48de5c2627d6beccdac054567", "patch": "@@ -108,7 +108,7 @@ static void dump_constants\t\t\tPROTO ((struct constant *,\n static rtx mips_find_symbol\t\t\tPROTO ((rtx));\n static void abort_with_insn\t\t\tPROTO ((rtx, const char *))\n   ATTRIBUTE_NORETURN;\n-\n+static int symbolic_expression_p                PROTO ((rtx));\n \n /* Global variables for machine-dependent things.  */\n \n@@ -6894,6 +6894,29 @@ mips_can_use_return_insn ()\n   return compute_frame_size (get_frame_size ()) == 0;\n }\n \f\n+/* Returns non-zero if X contains a SYMBOL_REF.  */\n+\n+static int\n+symbolic_expression_p (x)\n+     rtx x;\n+{\n+  if (GET_CODE (x) == SYMBOL_REF)\n+    return 1;\n+\n+  if (GET_CODE (x) == CONST)\n+    return symbolic_expression_p (XEXP (x, 0));\n+  \n+  if (GET_RTX_CLASS (GET_CODE (x)) == '1')\n+    return symbolic_expression_p (XEXP (x, 0));\n+\n+  if (GET_RTX_CLASS (GET_CODE (x)) == 'c'\n+      || GET_RTX_CLASS (GET_CODE (x)) == '2')\n+    return (symbolic_expression_p (XEXP (x, 0))\n+\t    || symbolic_expression_p (XEXP (x, 1)));\n+\n+  return 0;\n+}\n+\n /* Choose the section to use for the constant rtx expression X that has\n    mode MODE.  */\n \n@@ -6923,6 +6946,14 @@ mips_select_rtx_section (mode, x)\n       if (GET_MODE_SIZE (mode) <= mips_section_threshold\n \t  && mips_section_threshold > 0)\n \tSMALL_DATA_SECTION ();\n+      else if (flag_pic && symbolic_expression_p (x))\n+\t/* Any expression involving a SYMBOL_REF might need a run-time\n+\t   relocation.  (The symbol might be defined in a shared\n+\t   library loaded at an unexpected base address.)  So, we must\n+\t   put such expressions in the data segment (which is\n+\t   writable), rather than the text segment (which is\n+\t   read-only).  */\n+\tdata_section ();\n       else\n \tREADONLY_DATA_SECTION ();\n     }"}]}