{"sha": "e340018d59ced3ea94209a8c28ba6330865eb18d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM0MDAxOGQ1OWNlZDNlYTk0MjA5YThjMjhiYTYzMzA4NjVlYjE4ZA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-04-17T20:55:26Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-04-17T20:55:26Z"}, "message": "(get_last_value): Ignore BARRIER when scanning backwards.\n\n(move_deaths): New variables before_dead and after_dead.  Set them\nto instructions that have valid INSN_CUID values and use in test.\n\nFrom-SVN: r9397", "tree": {"sha": "0f5e8793673b921863a00a9620d3e72741e95b30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f5e8793673b921863a00a9620d3e72741e95b30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e340018d59ced3ea94209a8c28ba6330865eb18d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e340018d59ced3ea94209a8c28ba6330865eb18d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e340018d59ced3ea94209a8c28ba6330865eb18d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e340018d59ced3ea94209a8c28ba6330865eb18d/comments", "author": null, "committer": null, "parents": [{"sha": "0d9641d106bb9d99a32f98ed5be56f2aef3ff8b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d9641d106bb9d99a32f98ed5be56f2aef3ff8b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d9641d106bb9d99a32f98ed5be56f2aef3ff8b1"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "f71db787f17b59adb18973f4cd4a2d625c592ce0", "filename": "gcc/combine.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e340018d59ced3ea94209a8c28ba6330865eb18d/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e340018d59ced3ea94209a8c28ba6330865eb18d/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e340018d59ced3ea94209a8c28ba6330865eb18d", "patch": "@@ -9961,10 +9961,13 @@ get_last_value (x)\n       /* Skip over USE insns.  They are not useful here, and they may have\n \t been made by combine, in which case they do not have a INSN_CUID\n \t value.  We can't use prev_real_insn, because that would incorrectly\n-\t take us backwards across labels.  */\n+\t take us backwards across labels.  Skip over BARRIERs also, since\n+\t they could have been made by combine.  If we see one, we must be\n+\t optimizing dead code, so it doesn't matter what we do.  */\n       for (insn = prev_nonnote_insn (subst_insn);\n \t   insn && ((GET_CODE (insn) == INSN\n \t\t     && GET_CODE (PATTERN (insn)) == USE)\n+\t\t    || GET_CODE (insn) == BARRIER\n \t\t    || INSN_CUID (insn) >= subst_low_cuid);\n \t   insn = prev_nonnote_insn (insn))\n \t;\n@@ -10294,9 +10297,22 @@ move_deaths (x, from_cuid, to_insn, pnotes)\n     {\n       register int regno = REGNO (x);\n       register rtx where_dead = reg_last_death[regno];\n-\n-      if (where_dead && INSN_CUID (where_dead) >= from_cuid\n-\t  && INSN_CUID (where_dead) < INSN_CUID (to_insn))\n+      register rtx before_dead, after_dead;\n+\n+      /* WHERE_DEAD could be a USE insn made by combine, so first we\n+\t make sure that we have insns with valid INSN_CUID values.  */\n+      before_dead = where_dead;\n+      while (before_dead && INSN_UID (before_dead) > max_uid_cuid)\n+\tbefore_dead = PREV_INSN (before_dead);\n+      after_dead = where_dead;\n+      while (after_dead && INSN_UID (after_dead) > max_uid_cuid)\n+\tafter_dead = NEXT_INSN (after_dead);\n+\n+      if (before_dead && after_dead\n+\t  && INSN_CUID (before_dead) >= from_cuid\n+\t  && (INSN_CUID (after_dead) < INSN_CUID (to_insn)\n+\t      || (where_dead != after_dead\n+\t\t  && INSN_CUID (after_dead) == INSN_CUID (to_insn))))\n \t{\n \t  rtx note = remove_death (regno, where_dead);\n "}]}