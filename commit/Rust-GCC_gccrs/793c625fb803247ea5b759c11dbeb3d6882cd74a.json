{"sha": "793c625fb803247ea5b759c11dbeb3d6882cd74a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkzYzYyNWZiODAzMjQ3ZWE1Yjc1OWMxMWRiZWIzZDY4ODJjZDc0YQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2014-04-22T16:44:46Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2014-04-22T16:44:46Z"}, "message": "re PR libstdc++/43622 (Incomplete C++ library support for __float128)\n\n2014-04-22  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR libstdc++/43622\ngcc/c-family/\n\t* c-common.c (registered_builtin_types): Make non-static.\n\t* c-common.h (registered_builtin_types): Declare.\ngcc/cp/\n\t* rtti.c (emit_support_tinfo_1): New function, extracted from\n\temit_support_tinfos.\n\t(emit_support_tinfos): Call it and iterate on registered_builtin_types.\nlibstdc++-v3/\n\t* config/abi/pre/gnu.ver (CXXABI_1.3.9): New version, new symbols.\n\t* config/abi/pre/gnu-versioned-namespace.ver: New symbols.\n\t* config/abi/post/x86_64-linux-gnu/baseline_symbols.txt: Likewise.\n\nFrom-SVN: r209652", "tree": {"sha": "44bd0f6e4b48f83095c786032dba2ce89733a04f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44bd0f6e4b48f83095c786032dba2ce89733a04f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/793c625fb803247ea5b759c11dbeb3d6882cd74a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793c625fb803247ea5b759c11dbeb3d6882cd74a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/793c625fb803247ea5b759c11dbeb3d6882cd74a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793c625fb803247ea5b759c11dbeb3d6882cd74a/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6d43074d81f1d46a061689d66a68d775aa4250a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d43074d81f1d46a061689d66a68d775aa4250a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6d43074d81f1d46a061689d66a68d775aa4250a"}], "stats": {"total": 138, "additions": 97, "deletions": 41}, "files": [{"sha": "66158caa6a95be31836fc78c608dd51a7b45007a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c625fb803247ea5b759c11dbeb3d6882cd74a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c625fb803247ea5b759c11dbeb3d6882cd74a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=793c625fb803247ea5b759c11dbeb3d6882cd74a", "patch": "@@ -1,3 +1,9 @@\n+2014-04-22  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR libstdc++/43622\n+\t* c-common.c (registered_builtin_types): Make non-static.\n+\t* c-common.h (registered_builtin_types): Declare.\n+\n 2014-04-14  Richard Biener  <rguenther@suse.de>\n \tMarc Glisse  <marc.glisse@inria.fr>\n "}, {"sha": "0b5ded8f6f990cdc2457e9c72f54c1884b71bb41", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c625fb803247ea5b759c11dbeb3d6882cd74a/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c625fb803247ea5b759c11dbeb3d6882cd74a/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=793c625fb803247ea5b759c11dbeb3d6882cd74a", "patch": "@@ -3469,7 +3469,7 @@ c_common_fixed_point_type_for_size (unsigned int ibit, unsigned int fbit,\n \n /* Used for communication between c_common_type_for_mode and\n    c_register_builtin_type.  */\n-static GTY(()) tree registered_builtin_types;\n+tree registered_builtin_types;\n \n /* Return a data type that has machine mode MODE.\n    If the mode is an integer,"}, {"sha": "57b7dceefdc18d6ff1aea25c7dc3c1e0c3f4fac2", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c625fb803247ea5b759c11dbeb3d6882cd74a/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c625fb803247ea5b759c11dbeb3d6882cd74a/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=793c625fb803247ea5b759c11dbeb3d6882cd74a", "patch": "@@ -1013,6 +1013,10 @@ extern vec<tree, va_gc> *make_tree_vector_single (tree);\n extern vec<tree, va_gc> *make_tree_vector_from_list (tree);\n extern vec<tree, va_gc> *make_tree_vector_copy (const vec<tree, va_gc> *);\n \n+/* Used for communication between c_common_type_for_mode and\n+   c_register_builtin_type.  */\n+extern GTY(()) tree registered_builtin_types;\n+\n /* In c-gimplify.c  */\n extern void c_genericize (tree);\n extern int c_gimplify_expr (tree *, gimple_seq *, gimple_seq *);"}, {"sha": "854cc4b21a4c273dd2745b3bd809fe22d97c9005", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c625fb803247ea5b759c11dbeb3d6882cd74a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c625fb803247ea5b759c11dbeb3d6882cd74a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=793c625fb803247ea5b759c11dbeb3d6882cd74a", "patch": "@@ -1,3 +1,10 @@\n+2014-04-22  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR libstdc++/43622\n+\t* rtti.c (emit_support_tinfo_1): New function, extracted from\n+\temit_support_tinfos.\n+\t(emit_support_tinfos): Call it and iterate on registered_builtin_types.\n+\n 2014-04-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/59073"}, {"sha": "a35036d64ac8fe87f51d39187c2594eaa7a56e75", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 41, "deletions": 36, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c625fb803247ea5b759c11dbeb3d6882cd74a/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c625fb803247ea5b759c11dbeb3d6882cd74a/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=793c625fb803247ea5b759c11dbeb3d6882cd74a", "patch": "@@ -1465,6 +1465,44 @@ create_tinfo_types (void)\n   pop_abi_namespace ();\n }\n \n+/* Helper for emit_support_tinfos. Emits the type_info descriptor of\n+   a single type.  */\n+\n+void\n+emit_support_tinfo_1 (tree bltn)\n+{\n+  tree types[3];\n+\n+  if (bltn == NULL_TREE)\n+    return;\n+  types[0] = bltn;\n+  types[1] = build_pointer_type (bltn);\n+  types[2] = build_pointer_type (cp_build_qualified_type (bltn,\n+\t\t\t\t\t\t\t  TYPE_QUAL_CONST));\n+\n+  for (int i = 0; i < 3; ++i)\n+    {\n+      tree tinfo = get_tinfo_decl (types[i]);\n+      TREE_USED (tinfo) = 1;\n+      mark_needed (tinfo);\n+      /* The C++ ABI requires that these objects be COMDAT.  But,\n+\t On systems without weak symbols, initialized COMDAT\n+\t objects are emitted with internal linkage.  (See\n+\t comdat_linkage for details.)  Since we want these objects\n+\t to have external linkage so that copies do not have to be\n+\t emitted in code outside the runtime library, we make them\n+\t non-COMDAT here.  \n+\n+\t It might also not be necessary to follow this detail of the\n+\t ABI.  */\n+      if (!flag_weak || ! targetm.cxx.library_rtti_comdat ())\n+\t{\n+\t  gcc_assert (TREE_PUBLIC (tinfo) && !DECL_COMDAT (tinfo));\n+\t  DECL_INTERFACE_KNOWN (tinfo) = 1;\n+\t}\n+    }\n+}\n+\n /* Emit the type_info descriptors which are guaranteed to be in the runtime\n    support.  Generating them here guarantees consistency with the other\n    structures.  We use the following heuristic to determine when the runtime\n@@ -1507,42 +1545,9 @@ emit_support_tinfos (void)\n     return;\n   doing_runtime = 1;\n   for (ix = 0; fundamentals[ix]; ix++)\n-    {\n-      tree bltn = *fundamentals[ix];\n-      tree types[3];\n-      int i;\n-\n-      if (bltn == NULL_TREE)\n-\tcontinue;\n-      types[0] = bltn;\n-      types[1] = build_pointer_type (bltn);\n-      types[2] = build_pointer_type (cp_build_qualified_type (bltn,\n-\t\t\t\t\t\t\t      TYPE_QUAL_CONST));\n-\n-      for (i = 0; i < 3; ++i)\n-\t{\n-\t  tree tinfo;\n-\n-\t  tinfo = get_tinfo_decl (types[i]);\n-\t  TREE_USED (tinfo) = 1;\n-\t  mark_needed (tinfo);\n-\t  /* The C++ ABI requires that these objects be COMDAT.  But,\n-\t     On systems without weak symbols, initialized COMDAT\n-\t     objects are emitted with internal linkage.  (See\n-\t     comdat_linkage for details.)  Since we want these objects\n-\t     to have external linkage so that copies do not have to be\n-\t     emitted in code outside the runtime library, we make them\n-\t     non-COMDAT here.  \n-\n-\t     It might also not be necessary to follow this detail of the\n-\t     ABI.  */\n-\t  if (!flag_weak || ! targetm.cxx.library_rtti_comdat ())\n-\t    {\n-\t      gcc_assert (TREE_PUBLIC (tinfo) && !DECL_COMDAT (tinfo));\n-\t      DECL_INTERFACE_KNOWN (tinfo) = 1;\n-\t    }\n-\t}\n-    }\n+    emit_support_tinfo_1 (*fundamentals[ix]);\n+  for (tree t = registered_builtin_types; t; t = TREE_CHAIN (t))\n+    emit_support_tinfo_1 (TREE_VALUE (t));\n }\n \n /* Finish a type info decl. DECL_PTR is a pointer to an unemitted"}, {"sha": "4a0a5cb73f08a9b39d5af5e797a3b04bac7db8fb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c625fb803247ea5b759c11dbeb3d6882cd74a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c625fb803247ea5b759c11dbeb3d6882cd74a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=793c625fb803247ea5b759c11dbeb3d6882cd74a", "patch": "@@ -1,3 +1,10 @@\n+2014-04-22  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR libstdc++/43622\n+\t* config/abi/pre/gnu.ver (CXXABI_1.3.9): New version, new symbols.\n+\t* config/abi/pre/gnu-versioned-namespace.ver: New symbols.\n+\t* config/abi/post/x86_64-linux-gnu/baseline_symbols.txt: Likewise.\n+\n 2014-04-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.host: Remove solaris2.9 handling."}, {"sha": "30d29b2063ffe89492fd2d337ecf42af34cababc", "filename": "libstdc++-v3/config/abi/post/x86_64-linux-gnu/baseline_symbols.txt", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c625fb803247ea5b759c11dbeb3d6882cd74a/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpost%2Fx86_64-linux-gnu%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c625fb803247ea5b759c11dbeb3d6882cd74a/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpost%2Fx86_64-linux-gnu%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpost%2Fx86_64-linux-gnu%2Fbaseline_symbols.txt?ref=793c625fb803247ea5b759c11dbeb3d6882cd74a", "patch": "@@ -2520,6 +2520,7 @@ OBJECT:0:CXXABI_1.3.5\n OBJECT:0:CXXABI_1.3.6\n OBJECT:0:CXXABI_1.3.7\n OBJECT:0:CXXABI_1.3.8\n+OBJECT:0:CXXABI_1.3.9\n OBJECT:0:CXXABI_TM_1\n OBJECT:0:GLIBCXX_3.4\n OBJECT:0:GLIBCXX_3.4.1\n@@ -2624,6 +2625,7 @@ OBJECT:16:_ZTIc@@CXXABI_1.3\n OBJECT:16:_ZTId@@CXXABI_1.3\n OBJECT:16:_ZTIe@@CXXABI_1.3\n OBJECT:16:_ZTIf@@CXXABI_1.3\n+OBJECT:16:_ZTIg@@CXXABI_1.3.9\n OBJECT:16:_ZTIh@@CXXABI_1.3\n OBJECT:16:_ZTIi@@CXXABI_1.3\n OBJECT:16:_ZTIj@@CXXABI_1.3\n@@ -3124,11 +3126,14 @@ OBJECT:2:_ZTSc@@CXXABI_1.3\n OBJECT:2:_ZTSd@@CXXABI_1.3\n OBJECT:2:_ZTSe@@CXXABI_1.3\n OBJECT:2:_ZTSf@@CXXABI_1.3\n+OBJECT:2:_ZTSg@@CXXABI_1.3.9\n OBJECT:2:_ZTSh@@CXXABI_1.3\n OBJECT:2:_ZTSi@@CXXABI_1.3\n OBJECT:2:_ZTSj@@CXXABI_1.3\n OBJECT:2:_ZTSl@@CXXABI_1.3\n OBJECT:2:_ZTSm@@CXXABI_1.3\n+OBJECT:2:_ZTSn@@CXXABI_1.3.9\n+OBJECT:2:_ZTSo@@CXXABI_1.3.9\n OBJECT:2:_ZTSs@@CXXABI_1.3\n OBJECT:2:_ZTSt@@CXXABI_1.3\n OBJECT:2:_ZTSv@@CXXABI_1.3\n@@ -3155,6 +3160,7 @@ OBJECT:32:_ZTIPKc@@CXXABI_1.3\n OBJECT:32:_ZTIPKd@@CXXABI_1.3\n OBJECT:32:_ZTIPKe@@CXXABI_1.3\n OBJECT:32:_ZTIPKf@@CXXABI_1.3\n+OBJECT:32:_ZTIPKg@@CXXABI_1.3.9\n OBJECT:32:_ZTIPKh@@CXXABI_1.3\n OBJECT:32:_ZTIPKi@@CXXABI_1.3\n OBJECT:32:_ZTIPKj@@CXXABI_1.3\n@@ -3174,6 +3180,7 @@ OBJECT:32:_ZTIPc@@CXXABI_1.3\n OBJECT:32:_ZTIPd@@CXXABI_1.3\n OBJECT:32:_ZTIPe@@CXXABI_1.3\n OBJECT:32:_ZTIPf@@CXXABI_1.3\n+OBJECT:32:_ZTIPg@@CXXABI_1.3.9\n OBJECT:32:_ZTIPh@@CXXABI_1.3\n OBJECT:32:_ZTIPi@@CXXABI_1.3\n OBJECT:32:_ZTIPj@@CXXABI_1.3\n@@ -3228,11 +3235,14 @@ OBJECT:3:_ZTSPc@@CXXABI_1.3\n OBJECT:3:_ZTSPd@@CXXABI_1.3\n OBJECT:3:_ZTSPe@@CXXABI_1.3\n OBJECT:3:_ZTSPf@@CXXABI_1.3\n+OBJECT:3:_ZTSPg@@CXXABI_1.3.9\n OBJECT:3:_ZTSPh@@CXXABI_1.3\n OBJECT:3:_ZTSPi@@CXXABI_1.3\n OBJECT:3:_ZTSPj@@CXXABI_1.3\n OBJECT:3:_ZTSPl@@CXXABI_1.3\n OBJECT:3:_ZTSPm@@CXXABI_1.3\n+OBJECT:3:_ZTSPn@@CXXABI_1.3.9\n+OBJECT:3:_ZTSPo@@CXXABI_1.3.9\n OBJECT:3:_ZTSPs@@CXXABI_1.3\n OBJECT:3:_ZTSPt@@CXXABI_1.3\n OBJECT:3:_ZTSPv@@CXXABI_1.3\n@@ -3555,11 +3565,14 @@ OBJECT:4:_ZTSPKc@@CXXABI_1.3\n OBJECT:4:_ZTSPKd@@CXXABI_1.3\n OBJECT:4:_ZTSPKe@@CXXABI_1.3\n OBJECT:4:_ZTSPKf@@CXXABI_1.3\n+OBJECT:4:_ZTSPKg@@CXXABI_1.3.9\n OBJECT:4:_ZTSPKh@@CXXABI_1.3\n OBJECT:4:_ZTSPKi@@CXXABI_1.3\n OBJECT:4:_ZTSPKj@@CXXABI_1.3\n OBJECT:4:_ZTSPKl@@CXXABI_1.3\n OBJECT:4:_ZTSPKm@@CXXABI_1.3\n+OBJECT:4:_ZTSPKn@@CXXABI_1.3.9\n+OBJECT:4:_ZTSPKo@@CXXABI_1.3.9\n OBJECT:4:_ZTSPKs@@CXXABI_1.3\n OBJECT:4:_ZTSPKt@@CXXABI_1.3\n OBJECT:4:_ZTSPKv@@CXXABI_1.3"}, {"sha": "34360638c11dfa61df6b96b5d60ddc15dbc8de6c", "filename": "libstdc++-v3/config/abi/pre/gnu-versioned-namespace.ver", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c625fb803247ea5b759c11dbeb3d6882cd74a/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c625fb803247ea5b759c11dbeb3d6882cd74a/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver?ref=793c625fb803247ea5b759c11dbeb3d6882cd74a", "patch": "@@ -321,10 +321,10 @@ CXXABI_2.0 {\n     _ZTIPDn;\n     _ZTIPKDn;\n \n-    # typeinfo for __int128 and unsigned __int128\n-    _ZTI[no];\n-    _ZTIP[no];\n-    _ZTIPK[no];\n+    # typeinfo for __int128, unsigned __int128 and __float128\n+    _ZTI[gno];\n+    _ZTIP[gno];\n+    _ZTIPK[gno];\n \n     # virtual table\n     _ZTVN10__cxxabiv117__array_type_infoE;"}, {"sha": "f0ce4f09a1f98fde319b332f494d5f0c4bfe8452", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c625fb803247ea5b759c11dbeb3d6882cd74a/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c625fb803247ea5b759c11dbeb3d6882cd74a/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=793c625fb803247ea5b759c11dbeb3d6882cd74a", "patch": "@@ -1584,6 +1584,20 @@ CXXABI_1.3.8 {\n \n } CXXABI_1.3.7;\n \n+CXXABI_1.3.9 {\n+\n+    # typeinfo name for __int128, unsigned __int128 and __float128\n+    _ZTS[gno];\n+    _ZTSP[gno];\n+    _ZTSPK[gno];\n+\n+    # typeinfo for __float128\n+    _ZTIg;\n+    _ZTIPg;\n+    _ZTIPKg;\n+\n+} CXXABI_1.3.8;\n+\n # Symbols in the support library (libsupc++) supporting transactional memory.\n CXXABI_TM_1 {\n "}]}