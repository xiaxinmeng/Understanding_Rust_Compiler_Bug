{"sha": "cd17b213b03e996a12f51d06dca7f2e206bb76b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QxN2IyMTNiMDNlOTk2YTEyZjUxZDA2ZGNhN2YyZTIwNmJiNzZiMA==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2009-09-29T22:21:27Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2009-09-29T22:21:27Z"}, "message": "re PR target/41365 (gcc.dg/vect/vect-cond-[123].c abort due to bad code generation at -O1 and above)\n\n2009-09-29  Steve Ellcey  <sje@cup.hp.com>\n\t    Alexander Monakov  <amonakov@ispras.ru>\n\n\tPR target/41365 \n\t* config/ia64/predicates.md (not_postinc_destination_operand): New.\n\t(not_postinc_memory_operand): New.\n\t(not_postinc_move_operand): New.\n\t* config/ia64/ia64.md (*cmovdi_internal): Disallow autoincrement.\n\t(*cmovsi_internal): Ditto.\n\nCo-Authored-By: Alexander Monakov <amonakov@ispras.ru>\n\nFrom-SVN: r152306", "tree": {"sha": "dd2aeee209e1e15eaa776d22e870148aed2fc0db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd2aeee209e1e15eaa776d22e870148aed2fc0db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd17b213b03e996a12f51d06dca7f2e206bb76b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd17b213b03e996a12f51d06dca7f2e206bb76b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd17b213b03e996a12f51d06dca7f2e206bb76b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd17b213b03e996a12f51d06dca7f2e206bb76b0/comments", "author": null, "committer": null, "parents": [{"sha": "e7ada00d3383d76e31b43ce59b246afd4eda811a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ada00d3383d76e31b43ce59b246afd4eda811a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7ada00d3383d76e31b43ce59b246afd4eda811a"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "7439cef52f2f79e4d313d0244cbb42ca93be2ca7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd17b213b03e996a12f51d06dca7f2e206bb76b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd17b213b03e996a12f51d06dca7f2e206bb76b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd17b213b03e996a12f51d06dca7f2e206bb76b0", "patch": "@@ -1,3 +1,13 @@\n+2009-09-29  Steve Ellcey  <sje@cup.hp.com>\n+\t    Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR target/41365 \n+\t* config/ia64/predicates.md (not_postinc_destination_operand): New.\n+\t(not_postinc_memory_operand): New.\n+\t(not_postinc_move_operand): New.\n+\t* config/ia64/ia64.md (*cmovdi_internal): Disallow autoincrement.\n+\t(*cmovsi_internal): Ditto.\n+\n 2009-09-29  Pat Haugen  <pthaugen@us.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_issue_rate): Don't artificially"}, {"sha": "4ed427fcd3b2743b6f0cf5fa865e464629894e09", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd17b213b03e996a12f51d06dca7f2e206bb76b0/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd17b213b03e996a12f51d06dca7f2e206bb76b0/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=cd17b213b03e996a12f51d06dca7f2e206bb76b0", "patch": "@@ -4083,30 +4083,30 @@\n ;;\n \n (define_insn \"*cmovdi_internal\"\n-  [(set (match_operand:DI 0 \"destination_operand\"\n+  [(set (match_operand:DI 0 \"not_postinc_destination_operand\"\n \t   \"= r,  r,  r,   r,  r,  r,   r, r, r,   r, m, Q, *f,*b,*d*e\")\n \t(if_then_else:DI\n \t  (match_operator 4 \"predicate_operator\"\n \t    [(match_operand:BI 1 \"register_operand\"\n \t\t\"c,c,c,c,c,c,c,c,c,c,c,c,c,c,c\")\n \t     (const_int 0)])\n-\t  (match_operand:DI 2 \"move_operand\"\n+\t  (match_operand:DI 2 \"not_postinc_move_operand\"\n \t   \"rim, *f, *b,*d*e,rim,rim, rim,*f,*b,*d*e,rO,*f,rOQ,rO,  rK\")\n-\t  (match_operand:DI 3 \"move_operand\"\n+\t  (match_operand:DI 3 \"not_postinc_move_operand\"\n \t   \"rim,rim,rim, rim, *f, *b,*d*e,*f,*b,*d*e,rO,*f,rOQ,rO,  rK\")))]\n   \"ia64_move_ok (operands[0], operands[2])\n    && ia64_move_ok (operands[0], operands[3])\"\n   { gcc_unreachable (); }\n   [(set_attr \"predicable\" \"no\")])\n \n (define_split\n-  [(set (match_operand 0 \"destination_operand\" \"\")\n+  [(set (match_operand 0 \"not_postinc_destination_operand\" \"\")\n \t(if_then_else\n \t  (match_operator 4 \"predicate_operator\"\n \t    [(match_operand:BI 1 \"register_operand\" \"\")\n \t     (const_int 0)])\n-\t  (match_operand 2 \"move_operand\" \"\")\n-\t  (match_operand 3 \"move_operand\" \"\")))]\n+\t  (match_operand 2 \"not_postinc_move_operand\" \"\")\n+\t  (match_operand 3 \"not_postinc_move_operand\" \"\")))]\n   \"reload_completed\"\n   [(const_int 0)]\n {\n@@ -4188,14 +4188,15 @@\n ;;\n \n (define_insn \"*cmovsi_internal\"\n-  [(set (match_operand:SI 0 \"destination_operand\" \"=r,m,*f,r,m,*f,r,m,*f\")\n+  [(set (match_operand:SI 0 \"not_postinc_destination_operand\"\n+\t\t\"=r,m,*f,r,m,*f,r,m,*f\")\n \t(if_then_else:SI\n \t  (match_operator 4 \"predicate_operator\"\n \t    [(match_operand:BI 1 \"register_operand\" \"c,c,c,c,c,c,c,c,c\")\n \t     (const_int 0)])\n-\t  (match_operand:SI 2 \"move_operand\"\n+\t  (match_operand:SI 2 \"not_postinc_move_operand\"\n \t\t    \"0,0,0,rim*f,rO,rO,rim*f,rO,rO\")\n-\t  (match_operand:SI 3 \"move_operand\"\n+\t  (match_operand:SI 3 \"not_postinc_move_operand\"\n \t\t    \"rim*f,rO,rO,0,0,0,rim*f,rO,rO\")))]\n   \"ia64_move_ok (operands[0], operands[2])\n    && ia64_move_ok (operands[0], operands[3])\""}, {"sha": "2d0af6fa04343d3700c376d6f9530f5b8f8d5b13", "filename": "gcc/config/ia64/predicates.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd17b213b03e996a12f51d06dca7f2e206bb76b0/gcc%2Fconfig%2Fia64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd17b213b03e996a12f51d06dca7f2e206bb76b0/gcc%2Fconfig%2Fia64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fpredicates.md?ref=cd17b213b03e996a12f51d06dca7f2e206bb76b0", "patch": "@@ -281,6 +281,12 @@\n \t\t    || GET_CODE (XEXP (op, 0)) != POST_MODIFY\n \t\t    || GET_CODE (XEXP (XEXP (XEXP (op, 0), 1), 1)) != REG\")))\n \n+;; Like destination_operand, but don't allow any post-increments.\n+(define_predicate \"not_postinc_destination_operand\"\n+  (and (match_operand 0 \"nonimmediate_operand\")\n+       (match_test \"GET_CODE (op) != MEM\n+        || GET_RTX_CLASS (GET_CODE (XEXP (op, 0))) != RTX_AUTOINC\")))\n+\n ;; Like memory_operand, but don't allow post-increments.\n (define_predicate \"not_postinc_memory_operand\"\n   (and (match_operand 0 \"memory_operand\")\n@@ -332,6 +338,12 @@\n     }\n })\n \n+;; Like move_operand but don't allow post-increments.\n+(define_predicate \"not_postinc_move_operand\"\n+  (and (match_operand 0 \"move_operand\")\n+       (match_test \"GET_CODE (op) != MEM\n+        || GET_RTX_CLASS (GET_CODE (XEXP (op, 0))) != RTX_AUTOINC\")))\n+\n ;; True if OP is a register operand that is (or could be) a GR reg.\n (define_predicate \"gr_register_operand\"\n   (match_operand 0 \"register_operand\")"}]}