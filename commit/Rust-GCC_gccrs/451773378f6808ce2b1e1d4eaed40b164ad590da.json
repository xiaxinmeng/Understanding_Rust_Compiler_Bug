{"sha": "451773378f6808ce2b1e1d4eaed40b164ad590da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUxNzczMzc4ZjY4MDhjZTJiMWUxZDRlYWVkNDBiMTY0YWQ1OTBkYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-01-08T16:01:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-01-08T16:01:12Z"}, "message": "PR c++/68983 (BE)\n\n\tPR c++/67557\ngcc/\n\t* function.c (assign_temp): Guard against TREE_ADDRESSABLE types here.\n\t* expr.c (store_field): Not here.\n\t* tree-cfgcleanup.c (fixup_noreturn_call): Don't clear LHS of a\n\tcall with TREE_ADDRESSABLE type.\n\t* tree-cfg.c (verify_gimple_call): Adjust.\ngcc/cp/\n\t* cvt.c (convert_to_void): Don't strip a TARGET_EXPR of\n\tTREE_ADDRESSABLE type.\n\nFrom-SVN: r232167", "tree": {"sha": "a6a87fb093cb967de90353ff866ccad75a8602eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6a87fb093cb967de90353ff866ccad75a8602eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/451773378f6808ce2b1e1d4eaed40b164ad590da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/451773378f6808ce2b1e1d4eaed40b164ad590da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/451773378f6808ce2b1e1d4eaed40b164ad590da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/451773378f6808ce2b1e1d4eaed40b164ad590da/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0795b6f262e37218e80ee03d9c4c2f63541b149b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0795b6f262e37218e80ee03d9c4c2f63541b149b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0795b6f262e37218e80ee03d9c4c2f63541b149b"}], "stats": {"total": 50, "additions": 42, "deletions": 8}, "files": [{"sha": "4ffc776839fcbad47337a70270f247167da1b352", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451773378f6808ce2b1e1d4eaed40b164ad590da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451773378f6808ce2b1e1d4eaed40b164ad590da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=451773378f6808ce2b1e1d4eaed40b164ad590da", "patch": "@@ -1,3 +1,13 @@\n+2016-01-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/68983\n+\tPR c++/67557\n+\t* function.c (assign_temp): Guard against TREE_ADDRESSABLE types here.\n+\t* expr.c (store_field): Not here.\n+\t* tree-cfgcleanup.c (fixup_noreturn_call): Don't clear LHS of a\n+\tcall with TREE_ADDRESSABLE type.\n+\t* tree-cfg.c (verify_gimple_call): Adjust.\n+\n 2016-01-08  Olivier Hainque  <hainque@adacore.com>\n \n \t* config/vxworks.h (VXWORKS_LIBGCC_SPEC): Don't link shared RTPs with"}, {"sha": "4e32d0dcd21ac3d12d4312cec6f54334bddc3658", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451773378f6808ce2b1e1d4eaed40b164ad590da/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451773378f6808ce2b1e1d4eaed40b164ad590da/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=451773378f6808ce2b1e1d4eaed40b164ad590da", "patch": "@@ -1,5 +1,10 @@\n 2016-01-08  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/68983\n+\tPR c++/67557\n+\t* cvt.c (convert_to_void): Don't strip a TARGET_EXPR of\n+\tTREE_ADDRESSABLE type.\n+\n \tPR c++/68983\n \tPR c++/67557\n \t* call.c (unsafe_copy_elision_p): Look through COMPOUND_EXPR."}, {"sha": "f381f9b380063b274cb80e1a9fe9cc68130e406d", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451773378f6808ce2b1e1d4eaed40b164ad590da/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451773378f6808ce2b1e1d4eaed40b164ad590da/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=451773378f6808ce2b1e1d4eaed40b164ad590da", "patch": "@@ -1229,11 +1229,12 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n \n     case TARGET_EXPR:\n       /* Don't bother with the temporary object returned from a function if\n-\t we don't use it and don't need to destroy it.  We'll still\n+\t we don't use it, don't need to destroy it, and won't abort in\n+\t assign_temp.  We'll still\n \t allocate space for it in expand_call or declare_return_variable,\n \t but we don't need to track it through all the tree phases.  */\n       if (TARGET_EXPR_IMPLICIT_P (expr)\n-\t  && TYPE_HAS_TRIVIAL_DESTRUCTOR (TREE_TYPE (expr)))\n+\t  && !TREE_ADDRESSABLE (TREE_TYPE (expr)))\n \t{\n \t  tree init = TARGET_EXPR_INITIAL (expr);\n \t  if (TREE_CODE (init) == AGGR_INIT_EXPR"}, {"sha": "0c5dff8be97a67d7724616d615e1aa9b34d4922a", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451773378f6808ce2b1e1d4eaed40b164ad590da/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451773378f6808ce2b1e1d4eaed40b164ad590da/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=451773378f6808ce2b1e1d4eaed40b164ad590da", "patch": "@@ -6655,9 +6655,6 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n       rtx temp;\n       gimple *nop_def;\n \n-      /* Using bitwise copy is not safe for TREE_ADDRESSABLE types.  */\n-      gcc_assert (!TREE_ADDRESSABLE (TREE_TYPE (exp)));\n-\n       /* If EXP is a NOP_EXPR of precision less than its mode, then that\n \t implies a mask operation.  If the precision is the same size as\n \t the field we're storing into, that mask is redundant.  This is"}, {"sha": "1ac8e26daabe4720efeb70f9260841f9c6340a4f", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451773378f6808ce2b1e1d4eaed40b164ad590da/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451773378f6808ce2b1e1d4eaed40b164ad590da/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=451773378f6808ce2b1e1d4eaed40b164ad590da", "patch": "@@ -956,6 +956,10 @@ assign_temp (tree type_or_decl, int memory_required,\n   unsignedp = TYPE_UNSIGNED (type);\n #endif\n \n+  /* Allocating temporaries of TREE_ADDRESSABLE type must be done in the front\n+     end.  See also create_tmp_var for the gimplification-time check.  */\n+  gcc_assert (!TREE_ADDRESSABLE (type) && COMPLETE_TYPE_P (type));\n+\n   if (mode == BLKmode || memory_required)\n     {\n       HOST_WIDE_INT size = int_size_in_bytes (type);"}, {"sha": "bce2f17e79f78d588b656636dcbed3e7a282a12c", "filename": "gcc/testsuite/g++.dg/init/base1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451773378f6808ce2b1e1d4eaed40b164ad590da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbase1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451773378f6808ce2b1e1d4eaed40b164ad590da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbase1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbase1.C?ref=451773378f6808ce2b1e1d4eaed40b164ad590da", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/68983\n+\n+class SvxOptionsGrid {\n+  int nFldDrawX;\n+  bool bEqualGrid;\n+public:\n+  ~SvxOptionsGrid();\n+};\n+class A : SvxOptionsGrid {\n+public:\n+  A(SvxOptionsGrid p1) : SvxOptionsGrid(p1) {}\n+};\n+SvxOptionsGrid a;\n+void fn1() { A b(a); }"}, {"sha": "dbfa506c5d8b53d20aa90a3dcfa724a0d44daa3e", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451773378f6808ce2b1e1d4eaed40b164ad590da/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451773378f6808ce2b1e1d4eaed40b164ad590da/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=451773378f6808ce2b1e1d4eaed40b164ad590da", "patch": "@@ -3371,7 +3371,8 @@ verify_gimple_call (gcall *stmt)\n   if (lhs\n       && gimple_call_ctrl_altering_p (stmt)\n       && gimple_call_noreturn_p (stmt)\n-      && TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (lhs))) == INTEGER_CST)\n+      && TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (lhs))) == INTEGER_CST\n+      && !TREE_ADDRESSABLE (TREE_TYPE (lhs)))\n     {\n       error (\"LHS in noreturn call\");\n       return true;"}, {"sha": "46d0fa3ee0dd8f52f0185e98e8c0df2392a125bf", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451773378f6808ce2b1e1d4eaed40b164ad590da/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451773378f6808ce2b1e1d4eaed40b164ad590da/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=451773378f6808ce2b1e1d4eaed40b164ad590da", "patch": "@@ -601,9 +601,11 @@ fixup_noreturn_call (gimple *stmt)\n \n   /* If there is an LHS, remove it, but only if its type has fixed size.\n      The LHS will need to be recreated during RTL expansion and creating\n-     temporaries of variable-sized types is not supported.  */\n+     temporaries of variable-sized types is not supported.  Also don't\n+     do this with TREE_ADDRESSABLE types, as assign_temp will abort.  */\n   tree lhs = gimple_call_lhs (stmt);\n-  if (lhs && TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (lhs))) == INTEGER_CST)\n+  if (lhs && TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (lhs))) == INTEGER_CST\n+      && !TREE_ADDRESSABLE (TREE_TYPE (lhs)))\n     {\n       gimple_call_set_lhs (stmt, NULL_TREE);\n "}]}