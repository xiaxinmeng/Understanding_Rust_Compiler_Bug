{"sha": "f89dcf93348b44b8ea2b57f940fcdaeae0f764f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg5ZGNmOTMzNDhiNDRiOGVhMmI1N2Y5NDBmY2RhZWFlMGY3NjRmNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-11-03T10:56:05Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-11-03T10:56:05Z"}, "message": "Avoid recursion in tree-inline\n\ngcc/ChangeLog:\n\n2020-11-03  Jan Hubicka  <hubicka@ucw.cz>\n\n\tPR ipa/97578\n\t* ipa-inline-transform.c (maybe_materialize_called_clones): New\n\tfunction.\n\t(inline_transform): Use it.\n\ngcc/testsuite/ChangeLog:\n\n2020-11-03  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* gcc.c-torture/compile/pr97578.c: New test.", "tree": {"sha": "3b00309feae7c4adb59085605a0c9bb6289ded97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b00309feae7c4adb59085605a0c9bb6289ded97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f89dcf93348b44b8ea2b57f940fcdaeae0f764f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f89dcf93348b44b8ea2b57f940fcdaeae0f764f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f89dcf93348b44b8ea2b57f940fcdaeae0f764f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f89dcf93348b44b8ea2b57f940fcdaeae0f764f6/comments", "author": null, "committer": null, "parents": [{"sha": "8414529156e0bca37647c440c71beeca1d04ac86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8414529156e0bca37647c440c71beeca1d04ac86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8414529156e0bca37647c440c71beeca1d04ac86"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "907a95cac5aa365b564be4aece5896d0eac322bb", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f89dcf93348b44b8ea2b57f940fcdaeae0f764f6/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f89dcf93348b44b8ea2b57f940fcdaeae0f764f6/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=f89dcf93348b44b8ea2b57f940fcdaeae0f764f6", "patch": "@@ -51,6 +51,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-modref-tree.h\"\n #include \"ipa-modref.h\"\n #include \"symtab-thunks.h\"\n+#include \"symtab-clones.h\"\n \n int ncalls_inlined;\n int nfunctions_inlined;\n@@ -695,6 +696,31 @@ preserve_function_body_p (struct cgraph_node *node)\n   return false;\n }\n \n+/* tree-inline can not recurse; materialize all function bodie we will need\n+   during inlining.  This includes inlined functions, but also called functions\n+   with param manipulation because IPA param manipulation attaches debug\n+   statements to PARM_DECLs of called clone.  Materialize them if needed.\n+\n+   FIXME: This is somehwat broken by design because it does not play well\n+   with partitioning.  */\n+\n+static void\n+maybe_materialize_called_clones (cgraph_node *node)\n+{\n+  for (cgraph_edge *e = node->callees; e; e = e->next_callee)\n+    {\n+      clone_info *info;\n+\n+      if (!e->inline_failed)\n+\tmaybe_materialize_called_clones (e->callee);\n+\n+      cgraph_node *callee = cgraph_node::get (e->callee->decl);\n+      if (callee->clone_of\n+\t  && (info = clone_info::get (callee)) && info->param_adjustments)\n+\tcallee->get_untransformed_body ();\n+    }\n+}\n+\n /* Apply inline plan to function.  */\n \n unsigned int\n@@ -748,6 +774,7 @@ inline_transform (struct cgraph_node *node)\n       ENTRY_BLOCK_PTR_FOR_FN (cfun)->count = node->count;\n     }\n \n+  maybe_materialize_called_clones (node);\n   for (e = node->callees; e; e = next)\n     {\n       if (!e->inline_failed)"}, {"sha": "e007724fdaeadf38a90116f58c017cf6df99bfcf", "filename": "gcc/testsuite/gcc.c-torture/compile/pr97578.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f89dcf93348b44b8ea2b57f940fcdaeae0f764f6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr97578.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f89dcf93348b44b8ea2b57f940fcdaeae0f764f6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr97578.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr97578.c?ref=f89dcf93348b44b8ea2b57f940fcdaeae0f764f6", "patch": "@@ -0,0 +1,11 @@\n+int printf (const char *, ...);\n+\n+int a;\n+static void b(int c) {\n+  if (c)\n+    printf(\"%d\", a);\n+}\n+void e() {\n+  int d = 0;\n+  b(d);\n+}"}]}