{"sha": "031936bc50832e0159efbac1157790d07a7bafae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMxOTM2YmM1MDgzMmUwMTU5ZWZiYWMxMTU3NzkwZDA3YTdiYWZhZQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2018-05-21T14:51:19Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-21T14:51:19Z"}, "message": "[Ada] Use type conversion when inlining may trigger a run-time check\n\nIn the frontend inlining used in GNATprove, inlining of a return statement\nwas using an unchecked type conversion, which could cause a necessary\nrun-time check on the conversion to be skipped. Now fixed.\n\nThere is no impact on compilation.\n\n2018-05-21  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* inline.adb (Expand_Inlined_Call.Process_Formals): Use a type\n\tconversion instead of an unchecked type conversion when inlining a\n\treturn statement, unless type qualification is required (for character\n\tand string literal) or no check can result from the conversion (for\n\taccess types).\n\t* opt.ads: Update comment.\n\nFrom-SVN: r260458", "tree": {"sha": "d4f5043214101efece2071ae78b996acf7a25966", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4f5043214101efece2071ae78b996acf7a25966"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/031936bc50832e0159efbac1157790d07a7bafae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/031936bc50832e0159efbac1157790d07a7bafae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/031936bc50832e0159efbac1157790d07a7bafae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/031936bc50832e0159efbac1157790d07a7bafae/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7255f3c31130b87e515afec8bf315206b1fb0fa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7255f3c31130b87e515afec8bf315206b1fb0fa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7255f3c31130b87e515afec8bf315206b1fb0fa1"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "19b1278b9b31bdd1f738947ec76213ebb0d60147", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/031936bc50832e0159efbac1157790d07a7bafae/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/031936bc50832e0159efbac1157790d07a7bafae/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=031936bc50832e0159efbac1157790d07a7bafae", "patch": "@@ -1,3 +1,12 @@\n+2018-04-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* inline.adb (Expand_Inlined_Call.Process_Formals): Use a type\n+\tconversion instead of an unchecked type conversion when inlining a\n+\treturn statement, unless type qualification is required (for character\n+\tand string literal) or no check can result from the conversion (for\n+\taccess types).\n+\t* opt.ads: Update comment.\n+\n 2018-04-04  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Install the elaboration"}, {"sha": "e1c603f653e7f7f4f7efe0178b0004094a22f558", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/031936bc50832e0159efbac1157790d07a7bafae/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/031936bc50832e0159efbac1157790d07a7bafae/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=031936bc50832e0159efbac1157790d07a7bafae", "patch": "@@ -2482,26 +2482,42 @@ package body Inline is\n                end if;\n \n                --  Because of the presence of private types, the views of the\n-               --  expression and the context may be different, so place an\n-               --  unchecked conversion to the context type to avoid spurious\n+               --  expression and the context may be different, so place\n+               --  a type conversion to the context type to avoid spurious\n                --  errors, e.g. when the expression is a numeric literal and\n                --  the context is private. If the expression is an aggregate,\n                --  use a qualified expression, because an aggregate is not a\n-               --  legal argument of a conversion. Ditto for numeric literals\n-               --  and attributes that yield a universal type, because those\n-               --  must be resolved to a specific type.\n-\n-               if Nkind_In (Expression (N), N_Aggregate, N_Null)\n+               --  legal argument of a conversion. Ditto for numeric, character\n+               --  and string literals, and attributes that yield a universal\n+               --  type, because those must be resolved to a specific type.\n+\n+               if Nkind_In (Expression (N), N_Aggregate,\n+                                            N_Null,\n+                                            N_Character_Literal,\n+                                            N_String_Literal)\n                  or else Yields_Universal_Type (Expression (N))\n                then\n                   Ret :=\n                     Make_Qualified_Expression (Sloc (N),\n                       Subtype_Mark => New_Occurrence_Of (Ret_Type, Sloc (N)),\n                       Expression   => Relocate_Node (Expression (N)));\n-               else\n+\n+               --  Use an unchecked type conversion between access types, for\n+               --  which a type conversion would not always be valid, as no\n+               --  check may result from the conversion.\n+\n+               elsif Is_Access_Type (Ret_Type) then\n                   Ret :=\n                     Unchecked_Convert_To\n                       (Ret_Type, Relocate_Node (Expression (N)));\n+\n+               --  Otherwise use a type conversion, which may trigger a check\n+\n+               else\n+                  Ret :=\n+                    Make_Type_Conversion (Sloc (N),\n+                      Subtype_Mark => New_Occurrence_Of (Ret_Type, Sloc (N)),\n+                      Expression   => Relocate_Node (Expression (N)));\n                end if;\n \n                if Nkind (Targ) = N_Defining_Identifier then"}, {"sha": "e98f885b179fcb3ff06602b35250e66c5d1b8de8", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/031936bc50832e0159efbac1157790d07a7bafae/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/031936bc50832e0159efbac1157790d07a7bafae/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=031936bc50832e0159efbac1157790d07a7bafae", "patch": "@@ -727,7 +727,7 @@ package Opt is\n    --  Set True to activate inlining by front-end expansion (even on GCC\n    --  targets, where inlining is normally handled by the back end). Set by\n    --  the flag -gnatN (which is now considered obsolescent, since the GCC\n-   --  back end can do a better job of inlining than the front end these days.\n+   --  back end can do a better job of inlining than the front end these days).\n \n    Full_Path_Name_For_Brief_Errors : Boolean := False;\n    --  PROJECT MANAGER"}]}