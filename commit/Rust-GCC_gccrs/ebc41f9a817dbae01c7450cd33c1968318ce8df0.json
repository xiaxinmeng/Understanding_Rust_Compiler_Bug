{"sha": "ebc41f9a817dbae01c7450cd33c1968318ce8df0", "node_id": "C_kwDOANBUbNoAKGViYzQxZjlhODE3ZGJhZTAxYzc0NTBjZDMzYzE5NjgzMThjZThkZjA", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2022-12-15T10:43:37Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-12-31T15:49:04Z"}, "message": "modula-2: Fix building the plugin for Darwin [PR107612].\n\n * Makes the configured value for INCINTL available as a variable so that\nit can be used in language makefile fragements.  It is then used in the m2\nfragment to make the include path available to the plugin compile.\n\n * Updates the DSO suffix  to use .dylib for Darwin.\n\n * Adds '-Wl,-undefined,dynamic_lookup' to the link flags so that symbols can\n   be resolved at runtime.\n\n * Removes the extraneous $(exeext) from the DSO names.\n\nSince the linking is driven by CXX, we also need to supress the addition of\ndefault libraries otherwise:\n (1) we will get a reference to an uninstalled libstdc++\n (2) the process opening the plugin would have two instances 0f libstdc++ -\n     one statically linked into gm2 and one dynamically linked into the plugin.\n\n\tPR modula2/107612\n\ngcc/ChangeLog:\n\n\t* Makefile.in: Make the configured libintl includes avaiable in INCINTL.\n\t(BUILD_CPPFLAGS): Use INCINTL.\n\ngcc/m2/ChangeLog:\n\n\t* Make-lang.in (soext): Use .dylib for Darwin.\n\t(PLUGINLDFLAGS): Use dynmic lookup, set the plugin name, and append\n\t-nodefaultlibs to suppress the linking of libstdc++.\n\tUse INCINTL in compile lines for the plugin.\n\nCo-Authored-By: Iain Sandoe <iain@sandoe.co.uk>", "tree": {"sha": "8f68b88f815128f24f9a12aebafb6de2448bf9f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f68b88f815128f24f9a12aebafb6de2448bf9f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebc41f9a817dbae01c7450cd33c1968318ce8df0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebc41f9a817dbae01c7450cd33c1968318ce8df0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebc41f9a817dbae01c7450cd33c1968318ce8df0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebc41f9a817dbae01c7450cd33c1968318ce8df0/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e8c946508f4515ef9d92a3b9156283d1295b760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e8c946508f4515ef9d92a3b9156283d1295b760", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e8c946508f4515ef9d92a3b9156283d1295b760"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "4e5fb677cfe32e193a9bc21a328686d58459bbbd", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebc41f9a817dbae01c7450cd33c1968318ce8df0/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebc41f9a817dbae01c7450cd33c1968318ce8df0/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ebc41f9a817dbae01c7450cd33c1968318ce8df0", "patch": "@@ -729,6 +729,7 @@ htmldir = @htmldir@\n USE_NLS = @USE_NLS@\n \n # Internationalization library.\n+INCINTL = @INCINTL@\n LIBINTL = @LIBINTL@\n LIBINTL_DEP = @LIBINTL_DEP@\n \n@@ -820,7 +821,7 @@ BUILD_LINKERFLAGS = $(BUILD_CXXFLAGS)\n # Native linker and preprocessor flags.  For x-fragment overrides.\n BUILD_LDFLAGS=@BUILD_LDFLAGS@\n BUILD_CPPFLAGS= -I. -I$(@D) -I$(srcdir) -I$(srcdir)/$(@D) \\\n-\t\t-I$(srcdir)/../include @INCINTL@ $(CPPINC) $(CPPFLAGS)\n+\t\t-I$(srcdir)/../include $(INCINTL) $(CPPINC) $(CPPFLAGS)\n \n # Actual name to use when installing a native compiler.\n GCC_INSTALL_NAME := $(shell echo gcc|sed '$(program_transform_name)')\n@@ -1125,7 +1126,7 @@ BUILD_ERRORS = build/errors.o\n # currently being compiled, in both source trees, to be examined as well.\n # libintl.h will be found in ../intl if we are using the included libintl.\n INCLUDES = -I. -I$(@D) -I$(srcdir) -I$(srcdir)/$(@D) \\\n-\t   -I$(srcdir)/../include @INCINTL@ \\\n+\t   -I$(srcdir)/../include $(INCINTL) \\\n \t   $(CPPINC) $(CODYINC) $(GMPINC) $(DECNUMINC) $(BACKTRACEINC) \\\n \t   $(ISLINC)\n "}, {"sha": "3050f5a581c85b5ac49ab4b80d640d279b13c7ff", "filename": "gcc/m2/Make-lang.in", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebc41f9a817dbae01c7450cd33c1968318ce8df0/gcc%2Fm2%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebc41f9a817dbae01c7450cd33c1968318ce8df0/gcc%2Fm2%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2FMake-lang.in?ref=ebc41f9a817dbae01c7450cd33c1968318ce8df0", "patch": "@@ -31,6 +31,16 @@ GM2_1 = ./gm2 -B./stage1/m2 -g -fm2-g\n \n GM2_FOR_TARGET = $(STAGE_CC_WRAPPER) ./gm2 -B./ -B$(build_tooldir)/bin/ -L$(objdir)/../ld $(TFLAGS)\n \n+# FIXME: Get from gcc-plugin.m4 instead of hardcoding.\n+ifeq (,$(findstring darwin,$(host)))\n+  soext=.so\n+else\n+  soext=.dylib\n+  PLUGINLDFLAGS = -Wl,-undefined,dynamic_lookup\n+  PLUGINLDFLAGS += -Wl,-install_name,m2rte$(soext)\n+  PLUGINLDFLAGS += -nodefaultlibs\n+endif\n+\n TEXISRC = $(objdir)/m2/images/gnu.eps \\\n           $(srcdir)/doc/gm2.texi \\\n           m2/gm2-libs.texi \\\n@@ -114,9 +124,9 @@ po-generated:\n \n # Build hooks:\n \n-m2.all.cross: gm2-cross$(exeext) plugin/m2rte$(exeext).so\n+m2.all.cross: gm2-cross$(exeext) plugin/m2rte$(soext)\n \n-m2.start.encap: gm2$(exeext) plugin/m2rte$(exeext).so\n+m2.start.encap: gm2$(exeext) plugin/m2rte$(soext)\n m2.rest.encap:\n \n \n@@ -403,14 +413,16 @@ m2.uninstall:\n \n m2.install-plugin: installdirs\n \t$(mkinstalldirs) $(DESTDIR)$(plugin_resourcesdir)\n-\t$(INSTALL_PROGRAM) plugin/m2rte$(exeext).so $(DESTDIR)$(plugin_resourcesdir)/m2rte$(exeext).so\n-\tchmod a+x $(DESTDIR)$(plugin_resourcesdir)/m2rte$(exeext).so\n+\t$(INSTALL_PROGRAM) plugin/m2rte$(soext) $(DESTDIR)$(plugin_resourcesdir)/m2rte$(soext)\n+\tchmod a+x $(DESTDIR)$(plugin_resourcesdir)/m2rte$(soext)\n+\n+override PLUGINCFLAGS := $(filter-out -mdynamic-no-pic,$(PLUGINCFLAGS))\n \n-plugin/m2rte$(exeext).so: $(srcdir)/m2/plugin/m2rte.cc $(GCC_HEADER_DEPENDENCIES_FOR_M2) \\\n+plugin/m2rte$(soext): $(srcdir)/m2/plugin/m2rte.cc $(GCC_HEADER_DEPENDENCIES_FOR_M2) \\\n         insn-attr-common.h insn-flags.h $(generated_files)\n \ttest -d plugin || mkdir plugin\n-\t$(PLUGINCC) $(PLUGINCFLAGS) -fno-rtti -I. -I$(srcdir) -I$(srcdir)/m2 -I$(srcdir)/m2/gm2-gcc -I$(srcdir)/../include -I$(srcdir)/../libcpp/include -Wall $(GMPINC) -Wno-literal-suffix -fPIC -c -o plugin/m2rte.o $(srcdir)/m2/plugin/m2rte.cc\n-\t$(PLUGINCC) $(PLUGINCFLAGS) $(PLUGINLIBS) -fno-rtti plugin/m2rte.o -shared -o $@\n+\t$(PLUGINCC) $(PLUGINCFLAGS) -fno-rtti -I. -I$(srcdir) $(INCINTL) -I$(srcdir)/m2 -I$(srcdir)/m2/gm2-gcc -I$(srcdir)/../include -I$(srcdir)/../libcpp/include -Wall $(GMPINC) -Wno-literal-suffix -fPIC -c -o plugin/m2rte.o $(srcdir)/m2/plugin/m2rte.cc\n+\t$(PLUGINCC) $(PLUGINCFLAGS) $(PLUGINLDFLAGS) $(PLUGINLIBS) $(LIBINTL) -fno-rtti plugin/m2rte.o -shared -o $@\n \n \n # Clean hooks:\n@@ -526,7 +538,7 @@ cc1gm2$(exeext): stage1/m2/cc1gm2$(exeext) $(m2.prev)\n \n stage2/m2/cc1gm2$(exeext): stage1/m2/cc1gm2$(exeext) m2/gm2-compiler/m2flex.o $(P) \\\n                             $(GM2_C_OBJS) $(BACKEND) $(LIBDEPS) $(GM2_LIBS) \\\n-                            m2/gm2-gcc/rtegraph.o plugin/m2rte$(exeext).so m2/gm2-libs-boot/M2LINK.o\n+                            m2/gm2-gcc/rtegraph.o plugin/m2rte$(soext) m2/gm2-libs-boot/M2LINK.o\n \t@$(call LINK_PROGRESS,$(INDEX.m2),start)\n \t+$(LLINKER) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(GM2_C_OBJS) m2/gm2-compiler/m2flex.o \\\n                             attribs.o \\\n@@ -538,7 +550,7 @@ stage2/m2/cc1gm2$(exeext): stage1/m2/cc1gm2$(exeext) m2/gm2-compiler/m2flex.o $(\n stage1/m2/cc1gm2$(exeext): gm2$(exeext) m2/gm2-compiler-boot/m2flex.o \\\n                             $(P) $(GM2_C_OBJS) $(BACKEND) $(LIBDEPS) \\\n                             $(GM2_LIBS_BOOT) $(MC_LIBS) \\\n-                            m2/gm2-gcc/rtegraph.o plugin/m2rte$(exeext).so \\\n+                            m2/gm2-gcc/rtegraph.o plugin/m2rte$(soext) \\\n                             m2/gm2-libs-boot/M2LINK.o \\\n                             $(m2.prev)\n \t@$(call LINK_PROGRESS,$(INDEX.m2),start)\n@@ -572,7 +584,7 @@ m2/gm2-gcc/m2configure.o: $(srcdir)/m2/gm2-gcc/m2configure.cc \\\n                 -c $(srcdir)/m2/gm2-gcc/m2configure.cc $(OUTPUT_OPTION)\n \n m2/gm2-lang.o: $(srcdir)/m2/gm2-lang.cc gt-m2-gm2-lang.h $(GCC_HEADER_DEPENDENCIES_FOR_M2)\n-\t$(COMPILER) -c -g -I$(GM2GCC) $(ALL_COMPILERFLAGS) \\\n+\t$(COMPILER) -c -g $(GM2GCC) $(ALL_COMPILERFLAGS) \\\n             $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n m2/stor-layout.o: $(srcdir)/stor-layout.cc $(GCC_HEADER_DEPENDENCIES_FOR_M2)\n@@ -585,7 +597,7 @@ m2/m2pp.o : $(srcdir)/m2/m2pp.cc $(GCC_HEADER_DEPENDENCIES_FOR_M2)\n \n m2/gm2-gcc/rtegraph.o: $(srcdir)/m2/gm2-gcc/rtegraph.cc $(GCC_HEADER_DEPENDENCIES_FOR_M2) \\\n                        gt-m2-rtegraph.h\n-\t$(COMPILER) -c -g -I$(GM2GCC) $(ALL_COMPILERFLAGS) \\\n+\t$(COMPILER) -c -g $(GM2GCC) $(ALL_COMPILERFLAGS) \\\n             $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n c-family/m2pp.o : $(srcdir)/m2/m2pp.cc $(GCC_HEADER_DEPENDENCIES_FOR_M2)"}]}