{"sha": "9ed9eda6736c84c03229e92b3a0c0d23792b5728", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVkOWVkYTY3MzZjODRjMDMyMjllOTJiM2EwYzBkMjM3OTJiNTcyOA==", "commit": {"author": {"name": "Scott Gilbertson", "email": "scottg@mantatest.com", "date": "2005-03-07T16:49:37Z"}, "committer": {"name": "Scott Gilbertson", "email": "sgilbertson@gcc.gnu.org", "date": "2005-03-07T16:49:37Z"}, "message": "natXAnyEvent.cc (loadNext): Added timeout.\n\n2005-04-07  Scott Gilbertson  <scottg@mantatest.com>\n\n\t* gnu/gcj/xlib/natXAnyEvent.cc (loadNext): Added timeout.\n\t* gnu/awt/xlib/XCanvasPeer.java (setBackground): Removed\n    throw UnsupportedOperationException, fixed comments.\n    (setFont, setForeground): Fixed comments.\n\t* gnu/awt/xlib/XEventLoop.java (postNextEvent): Changed\n    return type to boolean.\n    (getNextEvent): Fixed javadocs.\n\t* gnu/awt/xlib/XToolkit.java (interrupted): Removed field.\n    (nativeQueueEmpty): Removed unused code.\n    (iterateNativeQueue): Removed outer loop.\n\nFrom-SVN: r96029", "tree": {"sha": "441eea7f802c2d97678acc092a8a87d337d789ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/441eea7f802c2d97678acc092a8a87d337d789ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ed9eda6736c84c03229e92b3a0c0d23792b5728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed9eda6736c84c03229e92b3a0c0d23792b5728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ed9eda6736c84c03229e92b3a0c0d23792b5728", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed9eda6736c84c03229e92b3a0c0d23792b5728/comments", "author": null, "committer": null, "parents": [{"sha": "3eb54e5f63e6d9a4e8fb168c97eccf534bdad844", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eb54e5f63e6d9a4e8fb168c97eccf534bdad844", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eb54e5f63e6d9a4e8fb168c97eccf534bdad844"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "9645824ba1a34a8d8b21973e7a88504921d304e3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed9eda6736c84c03229e92b3a0c0d23792b5728/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed9eda6736c84c03229e92b3a0c0d23792b5728/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9ed9eda6736c84c03229e92b3a0c0d23792b5728", "patch": "@@ -1,3 +1,15 @@\n+2005-04-07  Scott Gilbertson  <scottg@mantatest.com>\n+\t* gnu/gcj/xlib/natXAnyEvent.cc (loadNext): Added timeout.\n+\t* gnu/awt/xlib/XCanvasPeer.java (setBackground): Removed\n+\tthrow UnsupportedOperationException, fixed comments.\n+\t(setFont, setForeground): Fixed comments.\n+\t* gnu/awt/xlib/XEventLoop.java (postNextEvent): Changed\n+\treturn type to boolean.\n+\t(getNextEvent): Fixed javadocs.\n+\t* gnu/awt/xlib/XToolkit.java (interrupted): Removed field.\n+\t(nativeQueueEmpty): Removed unused code.\n+\t(iterateNativeQueue): Removed outer loop.\n+\n 2005-03-06  Roger Sayle  <roger@eyesopen.com>\n \n \tPR libgcj/20155"}, {"sha": "83646b1f3385d58ce0a1336ff3faf2e77d7e4065", "filename": "libjava/gnu/awt/xlib/XCanvasPeer.java", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed9eda6736c84c03229e92b3a0c0d23792b5728/libjava%2Fgnu%2Fawt%2Fxlib%2FXCanvasPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed9eda6736c84c03229e92b3a0c0d23792b5728/libjava%2Fgnu%2Fawt%2Fxlib%2FXCanvasPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fxlib%2FXCanvasPeer.java?ref=9ed9eda6736c84c03229e92b3a0c0d23792b5728", "patch": "@@ -349,7 +349,8 @@ public void requestFocus()\n \n   public void setBackground(Color color)\n   {\n-    throw new UnsupportedOperationException(\"not implemented\");\n+    /* default canvas peer does not keep track of background, since it won't\n+     * paint anything. */\n   }\n \n   public void setBounds(int x, int y, int width, int height)\n@@ -405,13 +406,13 @@ public void setEventMask(long eventMask)\n \n   public void setFont(Font font)\n   {\n-    /* default canvas peer does keep track of font, since it won't\n-       write anything. */\n+    /* default canvas peer does not keep track of font, since it won't\n+       paint anything. */\n   }\n \n   public void setForeground(Color color)\n   {\n-    /* default canvas peer does keep track of foreground, since it won't\n+    /* default canvas peer does not keep track of foreground, since it won't\n        paint anything. */\n   }\n \t"}, {"sha": "149ee736d7c1918f9afc663f1f327475630fa440", "filename": "libjava/gnu/awt/xlib/XEventLoop.java", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed9eda6736c84c03229e92b3a0c0d23792b5728/libjava%2Fgnu%2Fawt%2Fxlib%2FXEventLoop.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed9eda6736c84c03229e92b3a0c0d23792b5728/libjava%2Fgnu%2Fawt%2Fxlib%2FXEventLoop.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fxlib%2FXEventLoop.java?ref=9ed9eda6736c84c03229e92b3a0c0d23792b5728", "patch": "@@ -42,15 +42,20 @@ void interrupt()\n     anyEvent.interrupt();\n   }\n \n-  void postNextEvent(boolean block)\n+  /** If there's an event available, post it.\n+   * @return true if an event was posted\n+   */\n+  boolean postNextEvent(boolean block)\n   {\n     AWTEvent evt = getNextEvent(block);\n     if (evt != null)\n       queue.postEvent(evt);\n+    return evt != null;\n   }\n     \n-  /** get next event. Will block until events become available. */\n- \n+  /** Get the next event.\n+   * @param block If true, block until an event becomes available\n+   */\n   public AWTEvent getNextEvent(boolean block)\n   {\n     // ASSERT:\n@@ -62,7 +67,7 @@ public AWTEvent getNextEvent(boolean block)\n       {\n         event = createEvent();        \n         event = lightweightRedirector.redirect(event);\n-      }    \n+      }\n     return event;\n   }\n \n@@ -169,7 +174,7 @@ AWTEvent createEvent ()\n         return null;\n         \n       default:\n-        String msg = \"Do no know how to handle event (\" + anyEvent + \")\";\n+        String msg = \"Do not know how to handle event (\" + anyEvent + \")\";\n         throw new RuntimeException (msg);\n     }\n   }"}, {"sha": "c6e140eb3e1619f99b1f8d2168165d6af7343feb", "filename": "libjava/gnu/awt/xlib/XToolkit.java", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed9eda6736c84c03229e92b3a0c0d23792b5728/libjava%2Fgnu%2Fawt%2Fxlib%2FXToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed9eda6736c84c03229e92b3a0c0d23792b5728/libjava%2Fgnu%2Fawt%2Fxlib%2FXToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fxlib%2FXToolkit.java?ref=9ed9eda6736c84c03229e92b3a0c0d23792b5728", "patch": "@@ -444,23 +444,26 @@ public RobotPeer createRobot (GraphicsDevice screen) throws AWTException\n     throw new java.lang.UnsupportedOperationException ();\n   }\n \n-  boolean interrupted;\n-\n   public boolean nativeQueueEmpty() \n   { \n     return eventLoop.isIdle(); \n   }\n \n   public void wakeNativeQueue() \n   {\n-    interrupted = true;\n     eventLoop.interrupt();\n   }\n \n+  /** Checks the native event queue for events.  If blocking, waits until an\n+   * event is available before returning, unless interrupted by\n+   * wakeNativeQueue.  If non-blocking, returns immediately even if no\n+   * event is available.\n+   *\n+   * @param locked The calling EventQueue\n+   * @param block If true, waits for a native event before returning\n+   */\n   public void iterateNativeQueue(java.awt.EventQueue locked, boolean block) \n   {\n-    interrupted = false;\n-    while (!interrupted)\n-      eventLoop.postNextEvent(block);\n-  }; \n+    eventLoop.postNextEvent(block);\n+  }\n }"}, {"sha": "26d3b604b04fdc8338316c068e524fcb21b216a3", "filename": "libjava/gnu/gcj/xlib/natXAnyEvent.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed9eda6736c84c03229e92b3a0c0d23792b5728/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatXAnyEvent.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed9eda6736c84c03229e92b3a0c0d23792b5728/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatXAnyEvent.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatXAnyEvent.cc?ref=9ed9eda6736c84c03229e92b3a0c0d23792b5728", "patch": "@@ -69,11 +69,14 @@ jboolean gnu::gcj::xlib::XAnyEvent::loadNext(jboolean block)\n   int xfd = XConnectionNumber(dpy);\n   int pipefd = pipe[0];\n   int n = (xfd > pipefd ? xfd : pipefd) + 1;\n+  struct timeval timeout;\n+  timeout.tv_usec = 100000;  // 100ms timeout\n+  timeout.tv_sec = 0;\n   fd_set rfds;\n   FD_ZERO(&rfds);\n   FD_SET(xfd, &rfds);\n   FD_SET(pipefd, &rfds);  \n-  int sel = _Jv_select (n, &rfds, NULL, NULL, NULL);\n+  int sel = _Jv_select (n, &rfds, NULL, NULL, &timeout);\n   if (sel > 0)\n     {\n       if (FD_ISSET(xfd, &rfds))"}]}