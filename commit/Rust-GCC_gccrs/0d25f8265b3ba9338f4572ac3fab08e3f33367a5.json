{"sha": "0d25f8265b3ba9338f4572ac3fab08e3f33367a5", "node_id": "C_kwDOANBUbNoAKDBkMjVmODI2NWIzYmE5MzM4ZjQ1NzJhYzNmYWIwOGUzZjMzMzY3YTU", "commit": {"author": {"name": "Jeff Law", "email": "jlaw@ventanamicro", "date": "2023-03-08T05:00:39Z"}, "committer": {"name": "Jeff Law", "email": "jlaw@ventanamicro", "date": "2023-03-08T05:02:39Z"}, "message": "Fix MIPS testsuite over-eager matching\n\nThe mips msa-ds.c test is trying to ensure that MSA branches can have their\ndelay slots filled.  The regexp it used looked for the function name, a nop,\nthen the function name again.  If found that sequence, then the test failed.\n\nThe problem is with Vlad's recent IRA work there's simply less code in the\ntest (good) and as a result one of the *other* branches in the test had an\nunfilled delay slot -- the delay slot for the MSA branch was still being\nfilled.\n\nThis patch tightens up the regexp.  In particular it looks for the MSA branch\nand a nop on the next line (avoiding the over-eager .* construct).  That\nindicates that the MSA branch did not have its delay slot filled.  When that\nsequence is found, then the test fails.\n\nThis fixes the recent regressions for mips64 and mips64el in the tester.\n\nInstalling on the trunk,\n\ngcc/testsuite:\n\t* gcc.target/mips/msa-ds.c: Fix over eager pattern matching.", "tree": {"sha": "8a36b357bcca0a1190cdcfbf842f8b776eb53d17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a36b357bcca0a1190cdcfbf842f8b776eb53d17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d25f8265b3ba9338f4572ac3fab08e3f33367a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d25f8265b3ba9338f4572ac3fab08e3f33367a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d25f8265b3ba9338f4572ac3fab08e3f33367a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d25f8265b3ba9338f4572ac3fab08e3f33367a5/comments", "author": null, "committer": null, "parents": [{"sha": "dcce01af47b727749585e1f303e48af1f336a499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcce01af47b727749585e1f303e48af1f336a499", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcce01af47b727749585e1f303e48af1f336a499"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "37957a02bd87e25585bfb7327bae418ec207919c", "filename": "gcc/testsuite/gcc.target/mips/msa-ds.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d25f8265b3ba9338f4572ac3fab08e3f33367a5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsa-ds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d25f8265b3ba9338f4572ac3fab08e3f33367a5/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsa-ds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsa-ds.c?ref=0d25f8265b3ba9338f4572ac3fab08e3f33367a5", "patch": "@@ -27,5 +27,9 @@ int __attribute__ ((cold)) bar (v4si v , int a, int b)\n    return b + c;\n }\n \n-/* { dg-final { scan-assembler-not \"foo:.*nop.*jr.*foo,\" } } */\n-/* { dg-final { scan-assembler-not \"bar:.*nop.*jr.*bar,\" } } */\n+/* We need to avoid over matching here as we could have other\n+   branches with unfilled slots.  So we verify that we do not have\n+   an MSA branch with a NOP in its delay slot.  We need to match\n+   both forms of the MSA branch that can occur in this test.  */\n+/* { dg-final { scan-assembler-not \"foo:.*bn\\?z.w\\[^\\\\n\\\\r\\]*\\\\n\\\\tnop\" } } */\n+/* { dg-final { scan-assembler-not \"bar:.*bn\\?z.w\\[^\\\\n\\\\r\\]*\\\\n\\\\tnop\" } } */"}]}