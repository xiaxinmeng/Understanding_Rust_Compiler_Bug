{"sha": "0a9416fc0446b1da80cb39d2534bf030ae7739bd", "node_id": "C_kwDOANBUbNoAKDBhOTQxNmZjMDQ0NmIxZGE4MGNiMzlkMjUzNGJmMDMwYWU3NzM5YmQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-07-15T11:02:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-15T11:02:55Z"}, "message": "Merge #1385 #1386 #1387 #1388\n\n1385: Add missing include for intellisense r=philberty a=philberty\n\n\n\n1386: Fix undefined behaviour using .get on unique_ptr r=philberty a=philberty\n\nAs the move semantics for AST and HIR crates are unsafe on older compilers\r\nwe are working around this by storing the pointer into the mappings class\r\nthis was using the get method to store the pointer. The issue for loading\r\nextern crates the unique_ptr goes out of scope and this the deletion code\r\nresulting in undefined behaviour. This changes it to call release to take\r\nfull ownership of the pointer as we expect.\r\n\n\n1387: External Items with Rust ABI need to mangle the full path r=philberty a=philberty\n\nWhen compiling external rust abi item requires the fully qualified\r\ncanonical path to be mangled in order to link correctly.\r\n\n\n1388: Add new interfaces to mappings class r=philberty a=philberty\n\nIn order to load and resolve extern crates we need to support detection\r\nof node_id is a crate in order to support paths outside of the current\r\ncrate.\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "e742d5e608e54debbf4428ee5b0e5277216565bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e742d5e608e54debbf4428ee5b0e5277216565bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a9416fc0446b1da80cb39d2534bf030ae7739bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi0UlfCRBK7hj4Ov3rIwAAwr8IAG27qeXJkApjdWYWJLhmRXGS\nz/N4WYyxYzIMMx/7NR3EJ6uEpmFJbEEtf08XaNKIHfVKq1Be5bl9EQJr0ImOpaRF\n5KnP68vqWIJZ1wbojbRCNcV7z5IVatsc0/KrIQcaUA3YeV9EUhI+Si9RQYimNrcM\nWO9ynw90gD8YfaFcf7VIJCA0Q7WjUcKRHs7xkA6oeSaI2FGw2QjFroYAkU9CAb5Y\nCqijgDbFIqy62asowUc6FU8RtbSFI8ewTDWr0/aQnJ1TAdtfQtAa5K+HkOmscvk9\nOPcGKnuo7UCCE6u0/o1SjBVSJL8jpiVZG4CG4p0IOG9dktpToaiIRn2Qe3H5Q/4=\n=l16u\n-----END PGP SIGNATURE-----\n", "payload": "tree e742d5e608e54debbf4428ee5b0e5277216565bd\nparent f51284b598863eb0cbeb2984fd1499a672f2191d\nparent 8775525b042679bdd9c2b8dad68e65cec4b3dd79\nparent 81c4b6989f044a45455717b752cafb96f04b768e\nparent 6bf6241f29e73678b8c7d3508cdb39b55ae9d1ab\nparent e3f135ef0beb51b77cae7c6af40c5a1c4dfe7722\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1657882975 +0000\ncommitter GitHub <noreply@github.com> 1657882975 +0000\n\nMerge #1385 #1386 #1387 #1388\n\n1385: Add missing include for intellisense r=philberty a=philberty\n\n\n\n1386: Fix undefined behaviour using .get on unique_ptr r=philberty a=philberty\n\nAs the move semantics for AST and HIR crates are unsafe on older compilers\r\nwe are working around this by storing the pointer into the mappings class\r\nthis was using the get method to store the pointer. The issue for loading\r\nextern crates the unique_ptr goes out of scope and this the deletion code\r\nresulting in undefined behaviour. This changes it to call release to take\r\nfull ownership of the pointer as we expect.\r\n\n\n1387: External Items with Rust ABI need to mangle the full path r=philberty a=philberty\n\nWhen compiling external rust abi item requires the fully qualified\r\ncanonical path to be mangled in order to link correctly.\r\n\n\n1388: Add new interfaces to mappings class r=philberty a=philberty\n\nIn order to load and resolve extern crates we need to support detection\r\nof node_id is a crate in order to support paths outside of the current\r\ncrate.\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9416fc0446b1da80cb39d2534bf030ae7739bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a9416fc0446b1da80cb39d2534bf030ae7739bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9416fc0446b1da80cb39d2534bf030ae7739bd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f51284b598863eb0cbeb2984fd1499a672f2191d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51284b598863eb0cbeb2984fd1499a672f2191d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f51284b598863eb0cbeb2984fd1499a672f2191d"}, {"sha": "8775525b042679bdd9c2b8dad68e65cec4b3dd79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8775525b042679bdd9c2b8dad68e65cec4b3dd79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8775525b042679bdd9c2b8dad68e65cec4b3dd79"}, {"sha": "81c4b6989f044a45455717b752cafb96f04b768e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81c4b6989f044a45455717b752cafb96f04b768e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81c4b6989f044a45455717b752cafb96f04b768e"}, {"sha": "6bf6241f29e73678b8c7d3508cdb39b55ae9d1ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf6241f29e73678b8c7d3508cdb39b55ae9d1ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bf6241f29e73678b8c7d3508cdb39b55ae9d1ab"}, {"sha": "e3f135ef0beb51b77cae7c6af40c5a1c4dfe7722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f135ef0beb51b77cae7c6af40c5a1c4dfe7722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3f135ef0beb51b77cae7c6af40c5a1c4dfe7722"}], "stats": {"total": 124, "additions": 96, "deletions": 28}, "files": [{"sha": "ddad350eaa95bbdee348a50240393ad7d01a01c7", "filename": "gcc/rust/backend/rust-compile-extern.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9416fc0446b1da80cb39d2534bf030ae7739bd/gcc%2Frust%2Fbackend%2Frust-compile-extern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9416fc0446b1da80cb39d2534bf030ae7739bd/gcc%2Frust%2Fbackend%2Frust-compile-extern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-extern.h?ref=0a9416fc0446b1da80cb39d2534bf030ae7739bd", "patch": "@@ -130,6 +130,17 @@ class CompileExternItem : public HIRCompileBase,\n     tree compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n     std::string ir_symbol_name = function.get_item_name ();\n     std::string asm_name = function.get_item_name ();\n+    if (fntype->get_abi () == ABI::RUST)\n+      {\n+\t// then we need to get the canonical path of it and mangle it\n+\tconst Resolver::CanonicalPath *canonical_path = nullptr;\n+\tbool ok = ctx->get_mappings ()->lookup_canonical_path (\n+\t  function.get_mappings ().get_nodeid (), &canonical_path);\n+\trust_assert (ok);\n+\n+\tir_symbol_name = canonical_path->get () + fntype->subst_as_string ();\n+\tasm_name = ctx->mangle_item (fntype, *canonical_path);\n+      }\n \n     const unsigned int flags = Backend::function_is_declaration;\n     tree fndecl"}, {"sha": "75bd2e10b1c2cfb39247659946f1cfefc115b903", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9416fc0446b1da80cb39d2534bf030ae7739bd/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9416fc0446b1da80cb39d2534bf030ae7739bd/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=0a9416fc0446b1da80cb39d2534bf030ae7739bd", "patch": "@@ -1027,6 +1027,12 @@ void\n ResolveExternItem::visit (AST::ExternalFunctionItem &function)\n {\n   NodeId scope_node_id = function.get_node_id ();\n+  auto decl = CanonicalPath::new_seg (function.get_node_id (),\n+\t\t\t\t      function.get_identifier ());\n+  auto path = prefix.append (decl);\n+  auto cpath = canonical_prefix.append (decl);\n+\n+  mappings->insert_canonical_path (function.get_node_id (), cpath);\n \n   resolve_visibility (function.get_visibility ());\n "}, {"sha": "27f32aa37ffbe4ee119442c78fe744ea025415e5", "filename": "gcc/rust/resolve/rust-ast-resolve-path.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9416fc0446b1da80cb39d2534bf030ae7739bd/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9416fc0446b1da80cb39d2534bf030ae7739bd/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc?ref=0a9416fc0446b1da80cb39d2534bf030ae7739bd", "patch": "@@ -199,7 +199,8 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n       bool did_resolve_segment = resolved_node_id != UNKNOWN_NODEID;\n       if (did_resolve_segment)\n \t{\n-\t  if (mappings->node_is_module (resolved_node_id))\n+\t  if (mappings->node_is_module (resolved_node_id)\n+\t      || mappings->node_is_crate (resolved_node_id))\n \t    {\n \t      module_scope_id = resolved_node_id;\n \t    }"}, {"sha": "04183a4bc61fcd8f30f15be5c3ba679ab298d89b", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9416fc0446b1da80cb39d2534bf030ae7739bd/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9416fc0446b1da80cb39d2534bf030ae7739bd/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=0a9416fc0446b1da80cb39d2534bf030ae7739bd", "patch": "@@ -220,7 +220,8 @@ ResolveRelativeTypePath::go (AST::TypePath &path, NodeId &resolved_node_id)\n       bool did_resolve_segment = resolved_node_id != UNKNOWN_NODEID;\n       if (did_resolve_segment)\n \t{\n-\t  if (mappings->node_is_module (resolved_node_id))\n+\t  if (mappings->node_is_module (resolved_node_id)\n+\t      || mappings->node_is_crate (resolved_node_id))\n \t    {\n \t      module_scope_id = resolved_node_id;\n \t    }"}, {"sha": "fcede54ae5992bf2d7f18ed4c50f7a3fd56f78ef", "filename": "gcc/rust/rust-object-export.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9416fc0446b1da80cb39d2534bf030ae7739bd/gcc%2Frust%2Frust-object-export.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9416fc0446b1da80cb39d2534bf030ae7739bd/gcc%2Frust%2Frust-object-export.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-object-export.h?ref=0a9416fc0446b1da80cb39d2534bf030ae7739bd", "patch": "@@ -19,6 +19,8 @@\n #ifndef RUST_OBJECT_EXPORT_H\n #define RUST_OBJECT_EXPORT_H\n \n+#include \"rust-system.h\"\n+\n extern unsigned int\n rust_field_alignment (tree t);\n "}, {"sha": "c7bf1824a733ec89298d24059b1e693e5387d2bc", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9416fc0446b1da80cb39d2534bf030ae7739bd/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9416fc0446b1da80cb39d2534bf030ae7739bd/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=0a9416fc0446b1da80cb39d2534bf030ae7739bd", "patch": "@@ -130,6 +130,70 @@ Mappings::get_current_crate () const\n   return currentCrateNum;\n }\n \n+bool\n+Mappings::get_crate_name (CrateNum crate_num, std::string &name) const\n+{\n+  auto it = crate_names.find (crate_num);\n+  if (it == crate_names.end ())\n+    return false;\n+\n+  name.assign (it->second);\n+  return true;\n+}\n+\n+void\n+Mappings::set_crate_name (CrateNum crate_num, const std::string &name)\n+{\n+  crate_names[crate_num] = name;\n+}\n+\n+std::string\n+Mappings::get_current_crate_name () const\n+{\n+  std::string name;\n+  bool ok = get_crate_name (get_current_crate (), name);\n+  rust_assert (ok);\n+  return name;\n+}\n+\n+bool\n+Mappings::lookup_crate_name (const std::string &crate_name,\n+\t\t\t     CrateNum &resolved_crate_num) const\n+{\n+  for (const auto &it : crate_names)\n+    {\n+      if (it.second.compare (crate_name) == 0)\n+\t{\n+\t  resolved_crate_num = it.first;\n+\t  return true;\n+\t}\n+    }\n+  return false;\n+}\n+\n+bool\n+Mappings::crate_num_to_nodeid (const CrateNum &crate_num, NodeId &node_id) const\n+{\n+  auto it = ast_crate_mappings.find (crate_num);\n+  if (it == ast_crate_mappings.end ())\n+    return false;\n+\n+  node_id = it->second->get_node_id ();\n+  return true;\n+}\n+\n+bool\n+Mappings::node_is_crate (NodeId node_id) const\n+{\n+  for (const auto &it : ast_crate_mappings)\n+    {\n+      NodeId crate_node_id = it.second->get_node_id ();\n+      if (crate_node_id == node_id)\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n NodeId\n Mappings::get_next_node_id ()\n {\n@@ -199,7 +263,7 @@ Mappings::insert_ast_crate (std::unique_ptr<AST::Crate> &&crate,\n   rust_assert (it == ast_crate_mappings.end ());\n \n   // store it\n-  ast_crate_mappings.insert ({crate_num, crate.get ()});\n+  ast_crate_mappings.insert ({crate_num, crate.release ()});\n \n   // return the reference to it\n   it = ast_crate_mappings.find (crate_num);\n@@ -236,7 +300,7 @@ Mappings::insert_hir_crate (std::unique_ptr<HIR::Crate> &&crate)\n \n   insert_node_to_hir (crate->get_mappings ().get_nodeid (),\n \t\t      crate->get_mappings ().get_hirid ());\n-  hir_crate_mappings.insert ({crateNum, crate.get ()});\n+  hir_crate_mappings.insert ({crateNum, crate.release ()});\n \n   it = hir_crate_mappings.find (crateNum);\n   rust_assert (it != hir_crate_mappings.end ());"}, {"sha": "c8cebefcd040c44929e376a3ed81c73224cf768d", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9416fc0446b1da80cb39d2534bf030ae7739bd/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9416fc0446b1da80cb39d2534bf030ae7739bd/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=0a9416fc0446b1da80cb39d2534bf030ae7739bd", "patch": "@@ -77,30 +77,13 @@ class Mappings\n   CrateNum get_next_crate_num (const std::string &name);\n   void set_current_crate (CrateNum crateNum);\n   CrateNum get_current_crate () const;\n-\n-  bool get_crate_name (CrateNum crate_num, std::string &name) const\n-  {\n-    auto it = crate_names.find (crate_num);\n-    if (it == crate_names.end ())\n-      return false;\n-\n-    name.assign (it->second);\n-    return true;\n-  }\n-\n-  // set crate name mid-compilation\n-  void set_crate_name (CrateNum crate_num, const std::string &name)\n-  {\n-    crate_names[crate_num] = name;\n-  }\n-\n-  std::string get_current_crate_name () const\n-  {\n-    std::string name;\n-    bool ok = get_crate_name (get_current_crate (), name);\n-    rust_assert (ok);\n-    return name;\n-  }\n+  bool get_crate_name (CrateNum crate_num, std::string &name) const;\n+  void set_crate_name (CrateNum crate_num, const std::string &name);\n+  std::string get_current_crate_name () const;\n+  bool lookup_crate_name (const std::string &crate_name,\n+\t\t\t  CrateNum &resolved_crate_num) const;\n+  bool crate_num_to_nodeid (const CrateNum &crate_num, NodeId &node_id) const;\n+  bool node_is_crate (NodeId node_id) const;\n \n   NodeId get_next_node_id ();\n   HirId get_next_hir_id () { return get_next_hir_id (get_current_crate ()); }"}]}