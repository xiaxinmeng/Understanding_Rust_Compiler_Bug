{"sha": "0955cf616c9da0fbd6721dec1e39048559483a45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk1NWNmNjE2YzlkYTBmYmQ2NzIxZGVjMWUzOTA0ODU1OTQ4M2E0NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-19T21:09:25Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-19T21:09:25Z"}, "message": "i386.c (option_override_internal): Enable TARGET_CMOVE when TARGET_RDRND is active.\n\n\t* config/i386/i386.c (option_override_internal): Enable TARGET_CMOVE\n\twhen TARGET_RDRND is active.\n\t(ix86_expand_builtin) <case IX86_BUILTIN_RDRAND{16,32,64}_STEP>:\n\tGenerate dummy SImode target register when target is NULL.\n\nFrom-SVN: r173921", "tree": {"sha": "a29fb8b35e98c988f9c6abaf8cef0c3bd30e949b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a29fb8b35e98c988f9c6abaf8cef0c3bd30e949b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0955cf616c9da0fbd6721dec1e39048559483a45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0955cf616c9da0fbd6721dec1e39048559483a45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0955cf616c9da0fbd6721dec1e39048559483a45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0955cf616c9da0fbd6721dec1e39048559483a45/comments", "author": null, "committer": null, "parents": [{"sha": "4409de247c778276c0445f3d9f8817562f152b78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4409de247c778276c0445f3d9f8817562f152b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4409de247c778276c0445f3d9f8817562f152b78"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "f2c4b2b7152914a8c35a23d85990c8bd65bbf55d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0955cf616c9da0fbd6721dec1e39048559483a45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0955cf616c9da0fbd6721dec1e39048559483a45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0955cf616c9da0fbd6721dec1e39048559483a45", "patch": "@@ -1,3 +1,10 @@\n+2011-05-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (option_override_internal): Enable TARGET_CMOVE\n+\twhen TARGET_RDRND is active.\n+\t(ix86_expand_builtin) <case IX86_BUILTIN_RDRAND{16,32,64}_STEP>:\n+\tGenerate dummy SImode target register when target is NULL.\n+\n 2011-05-19  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/arm/arm-fpus.def: New.\n@@ -59,8 +66,7 @@\n \tRemove ATTRIBUTE_UNUSED.\n \t[!USE_GAS]: Call solaris_elf_asm_comdat_section for\n \tSECTION_LINKONCE sections if HAVE_COMDAT_GROUP.\n-\t* config/sparc/sparc.c (sparc_solaris_elf_asm_named_section):\n-\tLikewise.\n+\t* config/sparc/sparc.c (sparc_solaris_elf_asm_named_section): Likewise.\n \t* config/i386/sol2-10.h (TARGET_ASM_NAMED_SECTION): Moved ...\n \t* config/i386/sol2.h (TARGET_ASM_NAMED_SECTION): ... here.\n \t* config/sparc/sol2.h (TARGET_ASM_CODE_END): Redefine."}, {"sha": "0709be819fd7db034b260b3671e721dbcd6dba11", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0955cf616c9da0fbd6721dec1e39048559483a45/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0955cf616c9da0fbd6721dec1e39048559483a45/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0955cf616c9da0fbd6721dec1e39048559483a45", "patch": "@@ -4091,8 +4091,9 @@ ix86_option_override_internal (bool main_args_p)\n     }\n \n   /* For sane SSE instruction set generation we need fcomi instruction.\n-     It is safe to enable all CMOVE instructions.  */\n-  if (TARGET_SSE)\n+     It is safe to enable all CMOVE instructions.  Also, RDRAND intrinsic\n+     expands to a sequence that includes conditional move. */\n+  if (TARGET_SSE || TARGET_RDRND)\n     TARGET_CMOVE = 1;\n \n   /* Figure out what ASM_GENERATE_INTERNAL_LABEL builds as a prefix.  */\n@@ -27613,6 +27614,12 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       op0 = gen_reg_rtx (mode0);\n       emit_insn (GEN_FCN (icode) (op0));\n \n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      op1 = expand_normal (arg0);\n+      if (!address_operand (op1, VOIDmode))\n+\top1 = copy_addr_to_reg (op1);\n+      emit_move_insn (gen_rtx_MEM (mode0, op1), op0);\n+\n       op1 = gen_reg_rtx (SImode);\n       emit_move_insn (op1, CONST1_RTX (SImode));\n \n@@ -27627,17 +27634,13 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       else\n \top2 = gen_rtx_SUBREG (SImode, op0, 0);\n \n+      if (target == 0)\n+\ttarget = gen_reg_rtx (SImode);\n+\n       pat = gen_rtx_GEU (VOIDmode, gen_rtx_REG (CCCmode, FLAGS_REG),\n \t\t\t const0_rtx);\n-      emit_insn (gen_rtx_SET (VOIDmode, op1,\n+      emit_insn (gen_rtx_SET (VOIDmode, target,\n \t\t\t      gen_rtx_IF_THEN_ELSE (SImode, pat, op2, op1)));\n-      emit_move_insn (target, op1);\n-\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      op1 = expand_normal (arg0);\n-      if (!address_operand (op1, VOIDmode))\n-\top1 = copy_addr_to_reg (op1);\n-      emit_move_insn (gen_rtx_MEM (mode0, op1), op0);\n       return target;\n \n     default:"}]}