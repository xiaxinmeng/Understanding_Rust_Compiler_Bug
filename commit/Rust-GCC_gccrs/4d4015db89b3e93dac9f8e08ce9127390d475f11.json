{"sha": "4d4015db89b3e93dac9f8e08ce9127390d475f11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ0MDE1ZGI4OWIzZTkzZGFjOWY4ZTA4Y2U5MTI3MzkwZDQ3NWYxMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-05-08T12:16:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-05-08T12:16:19Z"}, "message": "re PR target/85572 (faster code for absolute value of __v2di)\n\n\tPR target/85572\n\t* config/i386/i386.c (ix86_expand_sse2_abs): Handle E_V2DImode and\n\tE_V4DImode.\n\t* config/i386/sse.md (abs<mode>2): Use VI_AVX2 iterator instead of\n\tVI1248_AVX512VL_AVX512BW.  Handle V2DImode and V4DImode if not\n\tTARGET_AVX512VL using ix86_expand_sse2_abs.  Formatting fixes.\n\n\t* g++.dg/other/sse2-pr85572-1.C: New test.\n\t* g++.dg/other/sse2-pr85572-2.C: New test.\n\t* g++.dg/other/sse4-pr85572-1.C: New test.\n\t* g++.dg/other/avx2-pr85572-1.C: New test.\n\nFrom-SVN: r260041", "tree": {"sha": "58dcf1ac378e7ad6c3ef1d21a7f0fbb33c62e820", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58dcf1ac378e7ad6c3ef1d21a7f0fbb33c62e820"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d4015db89b3e93dac9f8e08ce9127390d475f11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4015db89b3e93dac9f8e08ce9127390d475f11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d4015db89b3e93dac9f8e08ce9127390d475f11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4015db89b3e93dac9f8e08ce9127390d475f11/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac6818591810af25dc9f91d28230f30494e22a71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6818591810af25dc9f91d28230f30494e22a71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac6818591810af25dc9f91d28230f30494e22a71"}], "stats": {"total": 190, "additions": 165, "deletions": 25}, "files": [{"sha": "8ab847b8f21bacb393e9c6d85fd8ef972e543031", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4015db89b3e93dac9f8e08ce9127390d475f11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4015db89b3e93dac9f8e08ce9127390d475f11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d4015db89b3e93dac9f8e08ce9127390d475f11", "patch": "@@ -1,5 +1,12 @@\n 2018-05-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/85572\n+\t* config/i386/i386.c (ix86_expand_sse2_abs): Handle E_V2DImode and\n+\tE_V4DImode.\n+\t* config/i386/sse.md (abs<mode>2): Use VI_AVX2 iterator instead of\n+\tVI1248_AVX512VL_AVX512BW.  Handle V2DImode and V4DImode if not\n+\tTARGET_AVX512VL using ix86_expand_sse2_abs.  Formatting fixes.\n+\n \tPR target/85317\n \t* config/i386/i386.c (ix86_fold_builtin): Handle\n \tIX86_BUILTIN_{,P}MOVMSK{PS,PD,B}{,128,256}."}, {"sha": "ab15ac39ae61bf506cd7240e4fb2fb96e685cd6b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 52, "deletions": 21, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4015db89b3e93dac9f8e08ce9127390d475f11/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4015db89b3e93dac9f8e08ce9127390d475f11/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4d4015db89b3e93dac9f8e08ce9127390d475f11", "patch": "@@ -49837,39 +49837,70 @@ ix86_expand_sse2_abs (rtx target, rtx input)\n \n   switch (mode)\n     {\n+    case E_V2DImode:\n+    case E_V4DImode:\n+      /* For 64-bit signed integer X, with SSE4.2 use\n+\t pxor t0, t0; pcmpgtq X, t0; pxor t0, X; psubq t0, X.\n+\t Otherwise handle it similarly to V4SImode, except use 64 as W instead of\n+\t 32 and use logical instead of arithmetic right shift (which is\n+\t unimplemented) and subtract.  */\n+      if (TARGET_SSE4_2)\n+\t{\n+\t  tmp0 = gen_reg_rtx (mode);\n+\t  tmp1 = gen_reg_rtx (mode);\n+\t  emit_move_insn (tmp1, CONST0_RTX (mode));\n+\t  if (mode == E_V2DImode)\n+\t    emit_insn (gen_sse4_2_gtv2di3 (tmp0, tmp1, input));\n+\t  else\n+\t    emit_insn (gen_avx2_gtv4di3 (tmp0, tmp1, input));\n+\t}\n+      else\n+\t{\n+\t  tmp0 = expand_simple_binop (mode, LSHIFTRT, input,\n+\t\t\t\t      GEN_INT (GET_MODE_UNIT_BITSIZE (mode)\n+\t\t\t\t\t       - 1), NULL, 0, OPTAB_DIRECT);\n+\t  tmp0 = expand_simple_unop (mode, NEG, tmp0, NULL, false);\n+\t}\n+\n+      tmp1 = expand_simple_binop (mode, XOR, tmp0, input,\n+\t\t\t\t  NULL, 0, OPTAB_DIRECT);\n+      x = expand_simple_binop (mode, MINUS, tmp1, tmp0,\n+\t\t\t       target, 0, OPTAB_DIRECT);\n+      break;\n+\n+    case E_V4SImode:\n       /* For 32-bit signed integer X, the best way to calculate the absolute\n \t value of X is (((signed) X >> (W-1)) ^ X) - ((signed) X >> (W-1)).  */\n-      case E_V4SImode:\n-\ttmp0 = expand_simple_binop (mode, ASHIFTRT, input,\n-\t\t\t\t    GEN_INT (GET_MODE_UNIT_BITSIZE (mode) - 1),\n-\t\t\t\t    NULL, 0, OPTAB_DIRECT);\n-\ttmp1 = expand_simple_binop (mode, XOR, tmp0, input,\n-\t\t\t\t    NULL, 0, OPTAB_DIRECT);\n-\tx = expand_simple_binop (mode, MINUS, tmp1, tmp0,\n-\t\t\t\t target, 0, OPTAB_DIRECT);\n-\tbreak;\n+      tmp0 = expand_simple_binop (mode, ASHIFTRT, input,\n+\t\t\t\t  GEN_INT (GET_MODE_UNIT_BITSIZE (mode) - 1),\n+\t\t\t\t  NULL, 0, OPTAB_DIRECT);\n+      tmp1 = expand_simple_binop (mode, XOR, tmp0, input,\n+\t\t\t\t  NULL, 0, OPTAB_DIRECT);\n+      x = expand_simple_binop (mode, MINUS, tmp1, tmp0,\n+\t\t\t       target, 0, OPTAB_DIRECT);\n+      break;\n \n+    case E_V8HImode:\n       /* For 16-bit signed integer X, the best way to calculate the absolute\n \t value of X is max (X, -X), as SSE2 provides the PMAXSW insn.  */\n-      case E_V8HImode:\n-\ttmp0 = expand_unop (mode, neg_optab, input, NULL_RTX, 0);\n+      tmp0 = expand_unop (mode, neg_optab, input, NULL_RTX, 0);\n \n-\tx = expand_simple_binop (mode, SMAX, tmp0, input,\n-\t\t\t\t target, 0, OPTAB_DIRECT);\n-\tbreak;\n+      x = expand_simple_binop (mode, SMAX, tmp0, input,\n+\t\t\t       target, 0, OPTAB_DIRECT);\n+      break;\n \n+    case E_V16QImode:\n       /* For 8-bit signed integer X, the best way to calculate the absolute\n \t value of X is min ((unsigned char) X, (unsigned char) (-X)),\n \t as SSE2 provides the PMINUB insn.  */\n-      case E_V16QImode:\n-\ttmp0 = expand_unop (mode, neg_optab, input, NULL_RTX, 0);\n+      tmp0 = expand_unop (mode, neg_optab, input, NULL_RTX, 0);\n \n-\tx = expand_simple_binop (V16QImode, UMIN, tmp0, input,\n-\t\t\t\t target, 0, OPTAB_DIRECT);\n-\tbreak;\n+      x = expand_simple_binop (V16QImode, UMIN, tmp0, input,\n+\t\t\t       target, 0, OPTAB_DIRECT);\n+      break;\n \n-      default:\n-\tgcc_unreachable ();\n+    default:\n+      gcc_unreachable ();\n     }\n \n   if (x != target)"}, {"sha": "ae6294e559cbb65b1e970975c2b0248a4f5a5f8d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4015db89b3e93dac9f8e08ce9127390d475f11/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4015db89b3e93dac9f8e08ce9127390d475f11/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=4d4015db89b3e93dac9f8e08ce9127390d475f11", "patch": "@@ -15211,12 +15211,14 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_expand \"abs<mode>2\"\n-  [(set (match_operand:VI1248_AVX512VL_AVX512BW 0 \"register_operand\")\n-\t(abs:VI1248_AVX512VL_AVX512BW\n-\t  (match_operand:VI1248_AVX512VL_AVX512BW 1 \"vector_operand\")))]\n+  [(set (match_operand:VI_AVX2 0 \"register_operand\")\n+\t(abs:VI_AVX2\n+\t  (match_operand:VI_AVX2 1 \"vector_operand\")))]\n   \"TARGET_SSE2\"\n {\n-  if (!TARGET_SSSE3)\n+  if (!TARGET_SSSE3\n+      || ((<MODE>mode == V2DImode || <MODE>mode == V4DImode)\n+\t  && !TARGET_AVX512VL))\n     {\n       ix86_expand_sse2_abs (operands[0], operands[1]);\n       DONE;"}, {"sha": "96a373ca9435b8b104110fca5decca8d1ef9a070", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4015db89b3e93dac9f8e08ce9127390d475f11/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4015db89b3e93dac9f8e08ce9127390d475f11/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d4015db89b3e93dac9f8e08ce9127390d475f11", "patch": "@@ -1,5 +1,11 @@\n 2018-05-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/85572\n+\t* g++.dg/other/sse2-pr85572-1.C: New test.\n+\t* g++.dg/other/sse2-pr85572-2.C: New test.\n+\t* g++.dg/other/sse4-pr85572-1.C: New test.\n+\t* g++.dg/other/avx2-pr85572-1.C: New test.\n+\n \tPR target/85317\n \t* gcc.target/i386/pr85317.c: New test.\n \t* gcc.target/i386/avx2-vpmovmskb-2.c (avx2_test): Add asm volatile"}, {"sha": "adde2eaaddac55e1eb884684d41b4b9836f184a3", "filename": "gcc/testsuite/g++.dg/other/avx2-pr85572-1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4015db89b3e93dac9f8e08ce9127390d475f11/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Favx2-pr85572-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4015db89b3e93dac9f8e08ce9127390d475f11/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Favx2-pr85572-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Favx2-pr85572-1.C?ref=4d4015db89b3e93dac9f8e08ce9127390d475f11", "patch": "@@ -0,0 +1,21 @@\n+// PR target/85572\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-options \"-O2 -mavx2 -mno-avx512f\" }\n+// { dg-final { scan-assembler-times {\\mvpxor\\M} 4 } }\n+// { dg-final { scan-assembler-times {\\mvpcmpgtq\\M} 2 } }\n+// { dg-final { scan-assembler-times {\\mvpsubq\\M} 2 } }\n+\n+typedef long long V __attribute__((vector_size (16)));\n+typedef long long W __attribute__((vector_size (32)));\n+\n+V\n+foo (V x)\n+{\n+  return x < 0 ? -x : x;\n+}\n+\n+W\n+bar (W x)\n+{\n+  return x < 0 ? -x : x;\n+}"}, {"sha": "e4c442394243bc89a9c604ddca2a3b220f820a52", "filename": "gcc/testsuite/g++.dg/other/sse2-pr85572-1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4015db89b3e93dac9f8e08ce9127390d475f11/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fsse2-pr85572-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4015db89b3e93dac9f8e08ce9127390d475f11/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fsse2-pr85572-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fsse2-pr85572-1.C?ref=4d4015db89b3e93dac9f8e08ce9127390d475f11", "patch": "@@ -0,0 +1,14 @@\n+// PR target/85572\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-options \"-O2 -msse2 -mno-sse3\" }\n+// { dg-final { scan-assembler-times {\\mpxor\\M} 2 } }\n+// { dg-final { scan-assembler-times {\\mpsubq\\M} 2 } }\n+// { dg-final { scan-assembler-times {\\mpsrlq\\M} 1 } }\n+\n+typedef long long V __attribute__((vector_size (16)));\n+\n+V\n+foo (V x)\n+{\n+  return x < 0 ? -x : x;\n+}"}, {"sha": "8eb399b36b4c286dce9a24686cbace9cb36b2afe", "filename": "gcc/testsuite/g++.dg/other/sse2-pr85572-2.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4015db89b3e93dac9f8e08ce9127390d475f11/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fsse2-pr85572-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4015db89b3e93dac9f8e08ce9127390d475f11/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fsse2-pr85572-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fsse2-pr85572-2.C?ref=4d4015db89b3e93dac9f8e08ce9127390d475f11", "patch": "@@ -0,0 +1,45 @@\n+// PR target/85572\n+// { dg-do run { target i?86-*-* x86_64-*-* } }\n+// { dg-options \"-O2 -msse2\" }\n+// { dg-require-effective-target sse2_runtime }\n+\n+typedef long long V __attribute__((vector_size (16)));\n+typedef long long W __attribute__((vector_size (32)));\n+\n+__attribute__((noipa)) V\n+foo (V x)\n+{\n+  return x < 0 ? -x : x;\n+}\n+\n+__attribute__((noipa)) void\n+bar (W *x, W *y)\n+{\n+  *y = *x < 0 ? -*x : *x;\n+}\n+\n+int\n+main ()\n+{\n+  V a = { 11LL, -15LL };\n+  V b = foo (a);\n+  if (b[0] != 11LL || b[1] != 15LL)\n+    __builtin_abort ();\n+  V c = { -123456789123456LL, 654321654321654LL };\n+  V d = foo (c);\n+  if (d[0] != 123456789123456LL || d[1] != 654321654321654LL)\n+    __builtin_abort ();\n+  V e = { 0, 1 };\n+  V f = foo (e);\n+  if (f[0] != 0 || f[1] != 1)\n+    __builtin_abort ();\n+  W g = { 17LL, -32LL, -123456789123456LL, 654321654321654LL }, h;\n+  bar (&g, &h);\n+  if (h[0] != 17LL || h[1] != 32LL\n+      || h[2] != 123456789123456LL || h[3] != 654321654321654LL)\n+    __builtin_abort ();\n+  W i = { 0, 1, -1, 0 }, j;\n+  bar (&i, &j);\n+  if (j[0] != 0 || j[1] != 1 || j[2] != 1 || j[3] != 0)\n+    __builtin_abort ();\n+}"}, {"sha": "fe0adaeae29a98449eecde414dabad52accd828c", "filename": "gcc/testsuite/g++.dg/other/sse4-pr85572-1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4015db89b3e93dac9f8e08ce9127390d475f11/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fsse4-pr85572-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4015db89b3e93dac9f8e08ce9127390d475f11/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fsse4-pr85572-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fsse4-pr85572-1.C?ref=4d4015db89b3e93dac9f8e08ce9127390d475f11", "patch": "@@ -0,0 +1,14 @@\n+// PR target/85572\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-options \"-O2 -msse4 -mno-avx\" }\n+// { dg-final { scan-assembler-times {\\mpxor\\M} 2 } }\n+// { dg-final { scan-assembler-times {\\mpcmpgtq\\M} 1 } }\n+// { dg-final { scan-assembler-times {\\mpsubq\\M} 1 } }\n+\n+typedef long long V __attribute__((vector_size (16)));\n+\n+V\n+foo (V x)\n+{\n+  return x < 0 ? -x : x;\n+}"}]}