{"sha": "b1f6cb2cc3aad0521ad3181d5107e52be155fd18", "node_id": "C_kwDOANBUbNoAKGIxZjZjYjJjYzNhYWQwNTIxYWQzMTgxZDUxMDdlNTJiZTE1NWZkMTg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-04-01T06:55:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-04-01T06:55:55Z"}, "message": "aarch64, builtins: Include PR registers in FUNCTION_ARG_REGNO_P etc. [PR109254]\n\nThe following testcase is miscompiled on aarch64-linux in the regname pass,\nbecause while the function takes arguments in the p0 register,\nFUNCTION_ARG_REGNO_P doesn't reflect that, so DF doesn't know the register is\nused in register passing. It sees 2 chains with p1 register and wants to\nreplace the second one and as DF doesn't know p0 is live at the start of the\nfunction, it will happily use p0 register even when it is used in subsequent\ninstructions.\n\nThe following patch fixes that.  FUNCTION_ARG_REGNO_P returns non-zero\nfor p0-p3 (unconditionally, seems for the floating/vector registers it\ndoesn't conditionalize them on TARGET_FLOAT either, but if you want,\nI can conditionalize p0-p3 on TARGET_SVE), similarly\ntargetm.calls.function_value_regno_p returns true for p0-p3 registers\nif TARGET_SVE (again for consistency, that function conditionalizes\nthe float/vector on TARGET_FLOAT).\n\nNow, that change broke bootstrap in libobjc and some\n__builtin_apply_args/__builtin_apply/__builtin_return tests.  The\naarch64_get_reg_raw_mode hook already documents that SVE scalable arg/return\npassing is fundamentally incompatible with those builtins, but unlike\nthe floating/vector regs where it forces a fixed vector mode, I think\nthere is no fixed mode which could be used for p0-p3.  So, I have tweaked\nthe generic code so that it uses VOIDmode return from that hook to signal\nthat a register shouldn't be touched by\n__builtin_apply_args/__builtin_apply/__builtin_return\ndespite being mentioned in FUNCTION_ARG_REGNO_P or\ntargetm.calls.function_value_regno_p.\n\ngcc/\n2023-04-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/109254\n\t* builtins.cc (apply_args_size): If targetm.calls.get_raw_arg_mode\n\treturns VOIDmode, handle it like if the register isn't used for\n\tpassing arguments at all.\n\t(apply_result_size): If targetm.calls.get_raw_result_mode returns\n\tVOIDmode, handle it like if the register isn't used for returning\n\tresults at all.\n\t* target.def (get_raw_result_mode, get_raw_arg_mode): Document what it\n\tmeans to return VOIDmode.\n\t* doc/tm.texi: Regenerated.\n\t* config/aarch64/aarch64.cc (aarch64_function_value_regno_p): Return\n\tTARGET_SVE for P0_REGNUM.\n\t(aarch64_function_arg_regno_p): Also return true for p0-p3.\n\t(aarch64_get_reg_raw_mode): Return VOIDmode for PR_REGNUM_P regs.\n\ngcc/testsuite/\n2023-04-01  Jakub Jelinek  <jakub@redhat.com>\n\t    Richard Sandiford  <richard.sandiford@arm.com>\n\n\tPR target/109254\n\t* gcc.target/aarch64/sve/pr109254.c: New test.", "tree": {"sha": "8685e8eb0e2633073de945b9ae7319ec9ca63d50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8685e8eb0e2633073de945b9ae7319ec9ca63d50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1f6cb2cc3aad0521ad3181d5107e52be155fd18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1f6cb2cc3aad0521ad3181d5107e52be155fd18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1f6cb2cc3aad0521ad3181d5107e52be155fd18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1f6cb2cc3aad0521ad3181d5107e52be155fd18/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc4cde2e6aa4d6ebdf7f70b7b4359fb59a1915ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc4cde2e6aa4d6ebdf7f70b7b4359fb59a1915ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc4cde2e6aa4d6ebdf7f70b7b4359fb59a1915ae"}], "stats": {"total": 87, "additions": 65, "deletions": 22}, "files": [{"sha": "1bfdc598eec530179879a479b54655bae8a88eef", "filename": "gcc/builtins.cc", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f6cb2cc3aad0521ad3181d5107e52be155fd18/gcc%2Fbuiltins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f6cb2cc3aad0521ad3181d5107e52be155fd18/gcc%2Fbuiltins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.cc?ref=b1f6cb2cc3aad0521ad3181d5107e52be155fd18", "patch": "@@ -1446,18 +1446,19 @@ apply_args_size (void)\n \t  {\n \t    fixed_size_mode mode = targetm.calls.get_raw_arg_mode (regno);\n \n-\t    gcc_assert (mode != VOIDmode);\n-\n-\t    align = GET_MODE_ALIGNMENT (mode) / BITS_PER_UNIT;\n-\t    if (size % align != 0)\n-\t      size = CEIL (size, align) * align;\n-\t    size += GET_MODE_SIZE (mode);\n-\t    apply_args_mode[regno] = mode;\n+\t    if (mode != VOIDmode)\n+\t      {\n+\t\talign = GET_MODE_ALIGNMENT (mode) / BITS_PER_UNIT;\n+\t\tif (size % align != 0)\n+\t\t  size = CEIL (size, align) * align;\n+\t\tsize += GET_MODE_SIZE (mode);\n+\t\tapply_args_mode[regno] = mode;\n+\t      }\n+\t    else\n+\t      apply_args_mode[regno] = as_a <fixed_size_mode> (VOIDmode);\n \t  }\n \telse\n-\t  {\n-\t    apply_args_mode[regno] = as_a <fixed_size_mode> (VOIDmode);\n-\t  }\n+\t  apply_args_mode[regno] = as_a <fixed_size_mode> (VOIDmode);\n     }\n   return size;\n }\n@@ -1481,13 +1482,16 @@ apply_result_size (void)\n \t  {\n \t    fixed_size_mode mode = targetm.calls.get_raw_result_mode (regno);\n \n-\t    gcc_assert (mode != VOIDmode);\n-\n-\t    align = GET_MODE_ALIGNMENT (mode) / BITS_PER_UNIT;\n-\t    if (size % align != 0)\n-\t      size = CEIL (size, align) * align;\n-\t    size += GET_MODE_SIZE (mode);\n-\t    apply_result_mode[regno] = mode;\n+\t    if (mode != VOIDmode)\n+\t      {\n+\t\talign = GET_MODE_ALIGNMENT (mode) / BITS_PER_UNIT;\n+\t\tif (size % align != 0)\n+\t\t  size = CEIL (size, align) * align;\n+\t\tsize += GET_MODE_SIZE (mode);\n+\t\tapply_result_mode[regno] = mode;\n+\t      }\n+\t    else\n+\t      apply_result_mode[regno] = as_a <fixed_size_mode> (VOIDmode);\n \t  }\n \telse\n \t  apply_result_mode[regno] = as_a <fixed_size_mode> (VOIDmode);"}, {"sha": "42617ced73a4ef087ac6b5d13ebdfaf058f0b7ac", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f6cb2cc3aad0521ad3181d5107e52be155fd18/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f6cb2cc3aad0521ad3181d5107e52be155fd18/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=b1f6cb2cc3aad0521ad3181d5107e52be155fd18", "patch": "@@ -7388,6 +7388,9 @@ aarch64_function_value_regno_p (const unsigned int regno)\n   if (regno >= V0_REGNUM && regno < V0_REGNUM + HA_MAX_NUM_FLDS)\n     return TARGET_FLOAT;\n \n+  if (regno >= P0_REGNUM && regno < P0_REGNUM + HA_MAX_NUM_FLDS)\n+    return TARGET_SVE;\n+\n   return false;\n }\n \n@@ -7959,7 +7962,8 @@ bool\n aarch64_function_arg_regno_p (unsigned regno)\n {\n   return ((GP_REGNUM_P (regno) && regno < R0_REGNUM + NUM_ARG_REGS)\n-\t  || (FP_REGNUM_P (regno) && regno < V0_REGNUM + NUM_FP_ARG_REGS));\n+\t  || (FP_REGNUM_P (regno) && regno < V0_REGNUM + NUM_FP_ARG_REGS)\n+\t  || (PR_REGNUM_P (regno) && regno < P0_REGNUM + NUM_PR_ARG_REGS));\n }\n \n /* Implement FUNCTION_ARG_BOUNDARY.  Every parameter gets at least\n@@ -7995,6 +7999,10 @@ aarch64_get_reg_raw_mode (int regno)\n        for SVE types are fundamentally incompatible with the\n        __builtin_return/__builtin_apply interface.  */\n     return as_a <fixed_size_mode> (V16QImode);\n+  if (PR_REGNUM_P (regno))\n+    /* For SVE PR regs, indicate that they should be ignored for\n+       __builtin_apply/__builtin_return.  */\n+    return as_a <fixed_size_mode> (VOIDmode);\n   return default_get_reg_raw_mode (regno);\n }\n "}, {"sha": "a660e33739bd4def3fafe7b02c2060f4e2c54f4a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f6cb2cc3aad0521ad3181d5107e52be155fd18/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f6cb2cc3aad0521ad3181d5107e52be155fd18/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b1f6cb2cc3aad0521ad3181d5107e52be155fd18", "patch": "@@ -4820,13 +4820,15 @@ nothing when you use @option{-freg-struct-return} mode.\n @deftypefn {Target Hook} fixed_size_mode TARGET_GET_RAW_RESULT_MODE (int @var{regno})\n This target hook returns the mode to be used when accessing raw return\n registers in @code{__builtin_return}.  Define this macro if the value\n-in @var{reg_raw_mode} is not correct.\n+in @var{reg_raw_mode} is not correct.  Use @code{VOIDmode} if a register\n+should be ignored for @code{__builtin_return} purposes.\n @end deftypefn\n \n @deftypefn {Target Hook} fixed_size_mode TARGET_GET_RAW_ARG_MODE (int @var{regno})\n This target hook returns the mode to be used when accessing raw argument\n registers in @code{__builtin_apply_args}.  Define this macro if the value\n-in @var{reg_raw_mode} is not correct.\n+in @var{reg_raw_mode} is not correct.  Use @code{VOIDmode} if a register\n+should be ignored for @code{__builtin_apply_args} purposes.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_EMPTY_RECORD_P (const_tree @var{type})"}, {"sha": "171bbd1caf15c7e51c789bf22a1a36ca4b3fff9f", "filename": "gcc/target.def", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f6cb2cc3aad0521ad3181d5107e52be155fd18/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f6cb2cc3aad0521ad3181d5107e52be155fd18/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=b1f6cb2cc3aad0521ad3181d5107e52be155fd18", "patch": "@@ -5324,7 +5324,8 @@ DEFHOOK\n (get_raw_result_mode,\n  \"This target hook returns the mode to be used when accessing raw return\\n\\\n registers in @code{__builtin_return}.  Define this macro if the value\\n\\\n-in @var{reg_raw_mode} is not correct.\",\n+in @var{reg_raw_mode} is not correct.  Use @code{VOIDmode} if a register\\n\\\n+should be ignored for @code{__builtin_return} purposes.\",\n  fixed_size_mode, (int regno),\n  default_get_reg_raw_mode)\n \n@@ -5334,7 +5335,8 @@ DEFHOOK\n (get_raw_arg_mode,\n  \"This target hook returns the mode to be used when accessing raw argument\\n\\\n registers in @code{__builtin_apply_args}.  Define this macro if the value\\n\\\n-in @var{reg_raw_mode} is not correct.\",\n+in @var{reg_raw_mode} is not correct.  Use @code{VOIDmode} if a register\\n\\\n+should be ignored for @code{__builtin_apply_args} purposes.\",\n  fixed_size_mode, (int regno),\n  default_get_reg_raw_mode)\n "}, {"sha": "2df28e52b249dbe9b8a49ff4a55298660568f4b2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr109254.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f6cb2cc3aad0521ad3181d5107e52be155fd18/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr109254.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f6cb2cc3aad0521ad3181d5107e52be155fd18/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr109254.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr109254.c?ref=b1f6cb2cc3aad0521ad3181d5107e52be155fd18", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -funroll-loops\" } */\n+\n+#include <arm_sve.h>\n+\n+svfloat32_t __attribute__((noipa))\n+func_demo (svfloat32_t x, svfloat32_t y, svbool_t pg)\n+{\n+  svfloat32_t z = svadd_f32_x (pg, x, svdup_f32 (0x1.800fep19f));\n+  svbool_t cmp = svcmplt_f32 (pg, z, svdup_f32 (0.0f));\n+  svfloat32_t zM1 = svsub_f32_x (pg, z, svdup_n_f32 (1.0f));\n+  z = svsel_f32 (cmp, zM1, z);\n+  svfloat32_t sum = svadd_f32_x (pg, z, y);\n+  return sum;\n+}\n+\n+int\n+main ()\n+{\n+  float arr[2];\n+  svfloat32_t x = svinsr_n_f32 (svdup_f32 (-0x1.880fep19f), 2.0f);\n+  svfloat32_t res = func_demo (x, svdup_f32 (0.5f), svptrue_b32 ());\n+  svst1_f32 (svptrue_pat_b32 (SV_VL2), arr, res);\n+  if (arr[0] != 786561.5f || arr[1] != -16384.5f)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}