{"sha": "0b11da67078007050cfa665c741ea11b1d7d20b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIxMWRhNjcwNzgwMDcwNTBjZmE2NjVjNzQxZWExMWIxZDdkMjBiMA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2007-07-16T17:31:51Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2007-07-16T17:31:51Z"}, "message": "rs6000.c (struct processor cost): Add cache_line_size, l1_cache_lines, and simultaneous_prefetches fields.\n\n\t* config/rs6000/rs6000.c (struct processor cost): Add\n\tcache_line_size, l1_cache_lines, and simultaneous_prefetches\n\tfields.\n\t(*_cost): Add cache information.\n\t(rs6000_override_options): Set cache parameters.\n\nFrom-SVN: r126686", "tree": {"sha": "9d2e48572695e825098fc3cf86acbf0f5ccbdff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d2e48572695e825098fc3cf86acbf0f5ccbdff2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b11da67078007050cfa665c741ea11b1d7d20b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b11da67078007050cfa665c741ea11b1d7d20b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b11da67078007050cfa665c741ea11b1d7d20b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b11da67078007050cfa665c741ea11b1d7d20b0/comments", "author": null, "committer": null, "parents": [{"sha": "40f5cc95ab0d9ab7510b1fd7b5d1bcd472735a25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f5cc95ab0d9ab7510b1fd7b5d1bcd472735a25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f5cc95ab0d9ab7510b1fd7b5d1bcd472735a25"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "58a30ed75f03fcf9d27a753c051f3501c2dd300e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b11da67078007050cfa665c741ea11b1d7d20b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b11da67078007050cfa665c741ea11b1d7d20b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b11da67078007050cfa665c741ea11b1d7d20b0", "patch": "@@ -1,3 +1,11 @@\n+2007-07-16  David Edelsohn  <edelsohn@gnu.og>\n+\n+\t* config/rs6000/rs6000.c (struct processor_cost): Add\n+\tcache_line_size, l1_cache_lines, and simultaneous_prefetches\n+\tfields.\n+\t(*_cost): Add cache information.\n+\t(rs6000_override_options): Set cache parameters.\n+\n 2007-07-16  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \tPR bootstrap/3456"}, {"sha": "93a742a0418c4c2ba8117d9ab0997d887b9e9f7b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b11da67078007050cfa665c741ea11b1d7d20b0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b11da67078007050cfa665c741ea11b1d7d20b0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0b11da67078007050cfa665c741ea11b1d7d20b0", "patch": "@@ -290,6 +290,10 @@ struct processor_costs {\n   const int dmul;\t  /* cost of DFmode multiplication (and fmadd).  */\n   const int sdiv;\t  /* cost of SFmode division (fdivs).  */\n   const int ddiv;\t  /* cost of DFmode division (fdiv).  */\n+  const int cache_line_size;    /* cache block in bytes. */\n+  const int l1_cache_lines;\t/* number of lines in L1 cache.  */\n+  const int simultaneous_prefetches; /* number of parallel prefetch\n+\t\t\t\t\toperations.  */\n };\n \n const struct processor_costs *rs6000_cost;\n@@ -309,6 +313,9 @@ struct processor_costs size32_cost = {\n   COSTS_N_INSNS (1),    /* dmul */\n   COSTS_N_INSNS (1),    /* sdiv */\n   COSTS_N_INSNS (1),    /* ddiv */\n+  32,\n+  0,\n+  0,\n };\n \n /* Instruction size costs on 64bit processors.  */\n@@ -324,6 +331,9 @@ struct processor_costs size64_cost = {\n   COSTS_N_INSNS (1),    /* dmul */\n   COSTS_N_INSNS (1),    /* sdiv */\n   COSTS_N_INSNS (1),    /* ddiv */\n+  128,\n+  0,\n+  0,\n };\n \n /* Instruction costs on RIOS1 processors.  */\n@@ -339,6 +349,9 @@ struct processor_costs rios1_cost = {\n   COSTS_N_INSNS (2),    /* dmul */\n   COSTS_N_INSNS (19),   /* sdiv */\n   COSTS_N_INSNS (19),   /* ddiv */\n+  32,\n+  1024,\t\t\t/* cache lines */\n+  0,\t\t\t/* streams */\n };\n \n /* Instruction costs on RIOS2 processors.  */\n@@ -354,6 +367,9 @@ struct processor_costs rios2_cost = {\n   COSTS_N_INSNS (2),    /* dmul */\n   COSTS_N_INSNS (17),   /* sdiv */\n   COSTS_N_INSNS (17),   /* ddiv */\n+  32,\n+  1024,\t\t\t/* cache lines */\n+  0,\t\t\t/* streams */\n };\n \n /* Instruction costs on RS64A processors.  */\n@@ -369,6 +385,9 @@ struct processor_costs rs64a_cost = {\n   COSTS_N_INSNS (4),    /* dmul */\n   COSTS_N_INSNS (31),   /* sdiv */\n   COSTS_N_INSNS (31),   /* ddiv */\n+  128,\n+  1024,\t\t\t/* cache lines */\n+  1,\t\t\t/* streams */\n };\n \n /* Instruction costs on MPCCORE processors.  */\n@@ -384,6 +403,9 @@ struct processor_costs mpccore_cost = {\n   COSTS_N_INSNS (5),    /* dmul */\n   COSTS_N_INSNS (10),   /* sdiv */\n   COSTS_N_INSNS (17),   /* ddiv */\n+  128,\n+  512,\t\t\t/* cache lines */\n+  1,\t\t\t/* streams */\n };\n \n /* Instruction costs on PPC403 processors.  */\n@@ -399,6 +421,9 @@ struct processor_costs ppc403_cost = {\n   COSTS_N_INSNS (11),   /* dmul */\n   COSTS_N_INSNS (11),   /* sdiv */\n   COSTS_N_INSNS (11),   /* ddiv */\n+  32,\n+  128,\t\t\t/* cache lines */\n+  1,\t\t\t/* streams */\n };\n \n /* Instruction costs on PPC405 processors.  */\n@@ -414,6 +439,9 @@ struct processor_costs ppc405_cost = {\n   COSTS_N_INSNS (11),   /* dmul */\n   COSTS_N_INSNS (11),   /* sdiv */\n   COSTS_N_INSNS (11),   /* ddiv */\n+  32,\n+  512,\t\t\t/* cache lines */\n+  1,\t\t\t/* streams */\n };\n \n /* Instruction costs on PPC440 processors.  */\n@@ -429,6 +457,9 @@ struct processor_costs ppc440_cost = {\n   COSTS_N_INSNS (5),    /* dmul */\n   COSTS_N_INSNS (19),   /* sdiv */\n   COSTS_N_INSNS (33),   /* ddiv */\n+  32,\n+  1024,\t\t\t/* cache lines */\n+  1,\t\t\t/* streams */\n };\n \n /* Instruction costs on PPC601 processors.  */\n@@ -444,6 +475,9 @@ struct processor_costs ppc601_cost = {\n   COSTS_N_INSNS (5),    /* dmul */\n   COSTS_N_INSNS (17),   /* sdiv */\n   COSTS_N_INSNS (31),   /* ddiv */\n+  32,\n+  1024,\t\t\t/* cache lines */\n+  1,\t\t\t/* streams */\n };\n \n /* Instruction costs on PPC603 processors.  */\n@@ -459,6 +493,9 @@ struct processor_costs ppc603_cost = {\n   COSTS_N_INSNS (4),    /* dmul */\n   COSTS_N_INSNS (18),   /* sdiv */\n   COSTS_N_INSNS (33),   /* ddiv */\n+  32,\n+  256,\t\t\t/* cache lines */\n+  1,\t\t\t/* streams */\n };\n \n /* Instruction costs on PPC604 processors.  */\n@@ -474,6 +511,9 @@ struct processor_costs ppc604_cost = {\n   COSTS_N_INSNS (3),    /* dmul */\n   COSTS_N_INSNS (18),   /* sdiv */\n   COSTS_N_INSNS (32),   /* ddiv */\n+  32,\n+  512,\t\t\t/* cache lines */\n+  1,\t\t\t/* streams */\n };\n \n /* Instruction costs on PPC604e processors.  */\n@@ -489,6 +529,9 @@ struct processor_costs ppc604e_cost = {\n   COSTS_N_INSNS (3),    /* dmul */\n   COSTS_N_INSNS (18),   /* sdiv */\n   COSTS_N_INSNS (32),   /* ddiv */\n+  32,\n+  1024,\t\t\t/* cache lines */\n+  1,\t\t\t/* streams */\n };\n \n /* Instruction costs on PPC620 processors.  */\n@@ -504,6 +547,9 @@ struct processor_costs ppc620_cost = {\n   COSTS_N_INSNS (3),    /* dmul */\n   COSTS_N_INSNS (18),   /* sdiv */\n   COSTS_N_INSNS (32),   /* ddiv */\n+  128,\n+  512,\t\t\t/* cache lines */\n+  1,\t\t\t/* streams */\n };\n \n /* Instruction costs on PPC630 processors.  */\n@@ -519,6 +565,9 @@ struct processor_costs ppc630_cost = {\n   COSTS_N_INSNS (3),    /* dmul */\n   COSTS_N_INSNS (17),   /* sdiv */\n   COSTS_N_INSNS (21),   /* ddiv */\n+  128,\n+  512,\t\t\t/* cache lines */\n+  1,\t\t\t/* streams */\n };\n \n /* Instruction costs on Cell processor.  */\n@@ -535,6 +584,9 @@ struct processor_costs ppccell_cost = {\n   COSTS_N_INSNS (10/2),   /* dmul */\n   COSTS_N_INSNS (74/2),   /* sdiv */\n   COSTS_N_INSNS (74/2),   /* ddiv */\n+  128,\n+  256,\t\t\t  /* cache lines */\n+  6,\t\t\t  /* streams */\n };\n \n /* Instruction costs on PPC750 and PPC7400 processors.  */\n@@ -550,6 +602,9 @@ struct processor_costs ppc750_cost = {\n   COSTS_N_INSNS (3),    /* dmul */\n   COSTS_N_INSNS (17),   /* sdiv */\n   COSTS_N_INSNS (31),   /* ddiv */\n+  32,\n+  1024,\t\t\t/* cache lines */\n+  1,\t\t\t/* streams */\n };\n \n /* Instruction costs on PPC7450 processors.  */\n@@ -565,6 +620,9 @@ struct processor_costs ppc7450_cost = {\n   COSTS_N_INSNS (5),    /* dmul */\n   COSTS_N_INSNS (21),   /* sdiv */\n   COSTS_N_INSNS (35),   /* ddiv */\n+  32,\n+  1024,\t\t\t/* cache lines */\n+  1,\t\t\t/* streams */\n };\n \n /* Instruction costs on PPC8540 processors.  */\n@@ -580,6 +638,9 @@ struct processor_costs ppc8540_cost = {\n   COSTS_N_INSNS (4),    /* dmul */\n   COSTS_N_INSNS (29),   /* sdiv */\n   COSTS_N_INSNS (29),   /* ddiv */\n+  32,\n+  1024,\t\t\t/* cache lines */\n+  1,\t\t\t/* prefetch streams /*/\n };\n \n /* Instruction costs on POWER4 and POWER5 processors.  */\n@@ -595,6 +656,9 @@ struct processor_costs power4_cost = {\n   COSTS_N_INSNS (3),    /* dmul */\n   COSTS_N_INSNS (17),   /* sdiv */\n   COSTS_N_INSNS (17),   /* ddiv */\n+  128,\n+  256,\t\t\t/* cache lines */\n+  8,\t\t\t/* prefetch streams /*/\n };\n \n /* Instruction costs on POWER6 processors.  */\n@@ -610,6 +674,9 @@ struct processor_costs power6_cost = {\n   COSTS_N_INSNS (3),    /* dmul */\n   COSTS_N_INSNS (13),   /* sdiv */\n   COSTS_N_INSNS (16),   /* ddiv */\n+  128,\n+  512,\t\t\t/* cache lines */\n+  16,\t\t\t/* prefetch streams */\n };\n \n \f\n@@ -1728,6 +1795,14 @@ rs6000_override_options (const char *default_cpu)\n       default:\n \tgcc_unreachable ();\n       }\n+\n+  if (!PARAM_SET_P (PARAM_SIMULTANEOUS_PREFETCHES))\n+    set_param_value (\"simultaneous-prefetches\",\n+\t\t     rs6000_cost->simultaneous_prefetches);\n+  if (!PARAM_SET_P (PARAM_L1_CACHE_SIZE))\n+    set_param_value (\"l1-cache-size\", rs6000_cost->l1_cache_lines);\n+  if (!PARAM_SET_P (PARAM_L1_CACHE_LINE_SIZE))\n+    set_param_value (\"l1-cache-line-size\", rs6000_cost->cache_line_size);\n }\n \n /* Implement targetm.vectorize.builtin_mask_for_load.  */"}]}