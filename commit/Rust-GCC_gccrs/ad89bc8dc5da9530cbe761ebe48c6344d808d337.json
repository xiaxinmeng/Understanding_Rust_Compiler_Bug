{"sha": "ad89bc8dc5da9530cbe761ebe48c6344d808d337", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ4OWJjOGRjNWRhOTUzMGNiZTc2MWViZTQ4YzYzNDRkODA4ZDMzNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-26T13:43:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-26T13:43:57Z"}, "message": "Resync.\n\nFrom-SVN: r135925", "tree": {"sha": "35aa62061965048cb5711ee99841ba6a1f3a6d90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35aa62061965048cb5711ee99841ba6a1f3a6d90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad89bc8dc5da9530cbe761ebe48c6344d808d337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad89bc8dc5da9530cbe761ebe48c6344d808d337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad89bc8dc5da9530cbe761ebe48c6344d808d337", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad89bc8dc5da9530cbe761ebe48c6344d808d337/comments", "author": null, "committer": null, "parents": [{"sha": "4babc15de396a477996d32652c18f759b8cc6572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4babc15de396a477996d32652c18f759b8cc6572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4babc15de396a477996d32652c18f759b8cc6572"}], "stats": {"total": 124, "additions": 124, "deletions": 0}, "files": [{"sha": "32d47aaaa871f27367e84ab487547eb0d602e2c1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad89bc8dc5da9530cbe761ebe48c6344d808d337/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad89bc8dc5da9530cbe761ebe48c6344d808d337/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ad89bc8dc5da9530cbe761ebe48c6344d808d337", "patch": "@@ -1,3 +1,127 @@\n+2008-05-26  Javier Miranda  <miranda@adacore.com>\n+\n+\t* einfo.ads (Abstract_Interface_Alias): Renamed as Interface_Alias.\n+\t(Set_Abstract_Interface_Alias): Renamed as Set_Interface_Alias.\n+\t(Is_Internal): Adding documentation on internal entities that have\n+ \tattribute Interface_Alias (old attribute Abstract_Interface_Alias)\n+\n+\t* einfo.adb (Abstract_Interface_Alias): Renamed as Interface_Alias.\n+\t(Set_Abstract_Interface_Alias): Renamed as Set_Interface_Alias.\n+ \tAdded assertion to force entities with this attribute to have\n+ \tattribute Is_Internal set to True.\n+\t(Next_Tag_Component): Simplify assertion using attribute Is_Tag.\n+\n+\t* sem_ch3.adb (Derive_Interface_Subprograms): This subprogram has been\n+ \trenamed as Derive_Progenitor_Subprograms. In addition, its code is\n+ \ta new implementation.\n+\t(Add_Interface_Tag_Components): Remove special management of\n+\tsynchronized interfaces.\n+\t(Analyze_Interface_Declaration): Minor reformating\n+\t(Build_Derived_Record_Type): Minor reformating\n+\t(Check_Abstract_Overriding): Avoid reporting error in case of abstract\n+ \tpredefined primitive inherited from interface type because the body of\n+ \tinternally generated predefined primitives of tagged types are generated\n+ \tlater by Freeze_Type\n+\t(Derive_Subprogram): Avoid generating an internal name if the parent\n+ \tsubprogram overrides an interface primitive.\n+\t(Derive_Subprograms): New implementation that keeps separate the\n+ \tmanagement of tagged types not implementing interfaces, from tagged\n+ \ttypes that implement interfaces.\n+\t(Is_Progenitor): New implementation.\n+\t(Process_Full_View): Add documentation\n+\t(Record_Type_Declaration): Replace call to Derive_Interface_Subprograms\n+ \tby call to Derive_Progenitor_Subprograms.\n+\n+\t* sem_ch6.ads (Is_Interface_Conformant): New subprogram.\n+\t(Check_Subtype_Conformant, Subtype_Conformant): Adding new argument\n+ \tSkip_Controlling_Formals.\n+\n+\t* sem_ch6.adb (Is_Interface_Conformant): New subprogram.\n+\t(Check_Conventions): New implementation. Remove local subprogram\n+ \tSkip_Check. Remove formal Search_From of routine Check_Convention.\n+\t(Check_Subtype_Conformant, Subtype_Conformant): Adding new argument\n+ \tSkip_Controlling_Formals.\n+\t(New_Overloaded_Entity): Enable addition of predefined dispatching\n+ \toperations.\n+\n+\t* sem_disp.ads\n+\t(Find_Primitive_Covering_Interface): New subprogram.\n+\n+\t* sem_disp.adb (Check_Dispatching_Operation): Disable registering\n+ \tthe task body procedure as a primitive of the corresponding tagged\n+ \ttype.\n+\t(Check_Operation_From_Private_Type): Avoid adding twice an entity\n+ \tto the list of primitives.\n+\t(Find_Primitive_Covering_Interface): New subprogram.\n+\t(Override_Dispatching_Operation): Add documentation.\n+\n+\t* sem_type.adb (Covers): Minor reformatings\n+\n+\t* sem_util.ads (Collect_Abstract_Interfaces): Renamed as\n+\tCollect_Interfaces.\n+ \tRename formal.\n+\t(Has_Abstract_Interfaces): Renamed as Has_Interfaces.\n+\t(Implements_Interface): New subprogram.\n+\t(Is_Parent): Removed.\n+\t(Primitive_Names_Match): New subprogram.\n+\t(Remove_Homonym): Moved here from Derive_Interface_Subprograms.\n+\t(Ultimate_Alias): New subprogram.\n+\n+\t* sem_util.adb (Collect_Abstract_Interfaces): Renamed as\n+\tCollect_Interfaces.\n+ \tRemove special management for synchronized types. Rename formal. Remove\n+ \tinternal subprograms Interface_Present_In_Parent and Add_Interface.\n+\t(Has_Abstract_Interfaces): Renamed as Has_Interfaces. Replace assertion\n+ \ton non-record types by code to return false in such case.\n+\t(Implements_Interface): New subprogram.\n+\t(Is_Parent): Removed. No special management is now required for\n+ \tsynchronized types covering interfaces.\n+\t(Primitive_Names_Match): New subprogram.\n+\t(Remove_Homonym): Moved here from Derive_Interface_Subprograms.\n+\t(Ultimate_Alias): New subprogram.\n+\n+\t* exp_ch3.adb (Add_Internal_Interface_Entities): New subprogram.\n+ \tAdd internal entities associated with secondary dispatch tables to\n+ \tthe list of tagged type primitives that are not interfaces.\n+\t(Freeze_Record_Type): Add new call to Add_Internal_Interface_Entities\n+\t(Make_Predefined_Primitive_Specs): Code reorganization to improve\n+ \tthe management of predefined equality operator. In addition, if\n+ \tthe type has an equality function corresponding with a primitive\n+ \tdefined in an interface type, the inherited equality is abstract\n+ \tas well, and no body can be created for it.\n+\n+\t* exp_disp.ads (Is_Predefined_Dispatching_Operation): Moved from\n+ \texp_util to exp_disp.\n+\t(Is_Predefined_Interface_Primitive): New subprogram. Returns True if\n+ \tan entity corresponds with one of the predefined primitives required\n+ \tto implement interfaces.\n+\tUpdate copyright notice.\n+\n+\t* exp_disp.adb (Set_All_DT_Position): Add assertion. Exclude from the\n+ \tfinal check on abstract subprograms all the primitives associated with\n+ \tinterface primitives because they must be visible in the public and\n+ \tprivate part.\n+\t(Write_DT): Use Find_Dispatching_Type to locate the name of the\n+\tinterface type. This allows the use of this routine, for debugging\n+\tpurposes, when the tagged type is not fully decorated.\n+\t(Is_Predefined_Dispatching_Operation): Moved from exp_util to exp_disp.\n+ \tFactorize code calling new subprogram Is_Predefined_Interface_Primitive.\n+\t(Is_Predefined_Interface_Primitive): New subprogram. Returns True if an\n+ \tentity corresponds with one of the predefined primitives required to\n+ \timplement interfaces.\n+\n+\t* exp_util.adb (Find_Interface_ADT): New implementation\n+\t(Find_Interface): Removed.\n+\n+\t* sprint.adb (Sprint_Node_Actual): Generate missing output for the\n+ \tlist of interfaces associated with nodes\n+\tN_Formal_Derived_Type_Definition and N_Private_Extension_Declaration.\n+\n+2008-05-26  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch5.adb (Make_Tag_Ctrl_Assignment): Add missing guard on\n+\tcondition for assignment to temporary.\n+\n 2008-05-26  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch4.adb (Expand_Concatenate_Other): Add explicit constraint"}]}