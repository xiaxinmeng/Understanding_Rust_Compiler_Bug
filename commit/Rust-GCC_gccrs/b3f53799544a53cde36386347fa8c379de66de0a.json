{"sha": "b3f53799544a53cde36386347fa8c379de66de0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNmNTM3OTk1NDRhNTNjZGUzNjM4NjM0N2ZhOGMzNzlkZTY2ZGUwYQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2014-10-24T11:49:59Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2014-10-24T11:49:59Z"}, "message": "vaddhn.c: New file.\n\n2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vaddhn.c: New file.\n\nFrom-SVN: r216651", "tree": {"sha": "ae26ad68594d422cf3dd1f5cb41c6dadd1a47fde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae26ad68594d422cf3dd1f5cb41c6dadd1a47fde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3f53799544a53cde36386347fa8c379de66de0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f53799544a53cde36386347fa8c379de66de0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3f53799544a53cde36386347fa8c379de66de0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f53799544a53cde36386347fa8c379de66de0a/comments", "author": null, "committer": null, "parents": [{"sha": "b46684ac1b706031ff141d69d9ac0df3e3522320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b46684ac1b706031ff141d69d9ac0df3e3522320", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b46684ac1b706031ff141d69d9ac0df3e3522320"}], "stats": {"total": 113, "additions": 113, "deletions": 0}, "files": [{"sha": "7941dd0719f911b7c5397e31201f53d1cc03138b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f53799544a53cde36386347fa8c379de66de0a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f53799544a53cde36386347fa8c379de66de0a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3f53799544a53cde36386347fa8c379de66de0a", "patch": "@@ -1,3 +1,7 @@\n+2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vaddhn.c: New file.\n+\n 2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vabdl.c: New file."}, {"sha": "74b4b4d2312775a02d29134e145acd1ab9f4f0e1", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vaddhn.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f53799544a53cde36386347fa8c379de66de0a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvaddhn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f53799544a53cde36386347fa8c379de66de0a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvaddhn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvaddhn.c?ref=b3f53799544a53cde36386347fa8c379de66de0a", "patch": "@@ -0,0 +1,109 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#if defined(__cplusplus)\n+#include <cstdint>\n+#else\n+#include <stdint.h>\n+#endif\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x32, 0x32, 0x32, 0x32,\n+\t\t\t\t       0x32, 0x32, 0x32, 0x32 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x32, 0x32, 0x32, 0x32 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x18, 0x18 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x3, 0x3, 0x3, 0x3,\n+\t\t\t\t\t0x3, 0x3, 0x3, 0x3 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x37, 0x37, 0x37, 0x37 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x3, 0x3 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,16,8) [] = {  0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+#ifndef INSN_NAME\n+#define INSN_NAME vaddhn\n+#define TEST_MSG \"VADDHN\"\n+#endif\n+\n+#define FNNAME1(NAME) void exec_ ## NAME (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN_NAME)\n+{\n+  /* Basic test: vec64=vaddhn(vec128_a, vec128_b), then store the result.  */\n+#define TEST_VADDHN1(INSN, T1, T2, W, W2, N)\t\t\t\t\\\n+  VECT_VAR(vector64, T1, W2, N) = INSN##_##T2##W(VECT_VAR(vector1, T1, W, N), \\\n+\t\t\t\t\t\t VECT_VAR(vector2, T1, W, N)); \\\n+  vst1_##T2##W2(VECT_VAR(result, T1, W2, N), VECT_VAR(vector64, T1, W2, N))\n+\n+#define TEST_VADDHN(INSN, T1, T2, W, W2, N)\t\\\n+  TEST_VADDHN1(INSN, T1, T2, W, W2, N)\n+\n+  DECL_VARIABLE_64BITS_VARIANTS(vector64);\n+  DECL_VARIABLE_128BITS_VARIANTS(vector1);\n+  DECL_VARIABLE_128BITS_VARIANTS(vector2);\n+\n+  clean_results ();\n+\n+  /* Fill input vector1 and vector2 with arbitrary values */\n+  VDUP(vector1, q, int, s, 16, 8, 50*(UINT8_MAX+1));\n+  VDUP(vector1, q, int, s, 32, 4, 50*(UINT16_MAX+1));\n+  VDUP(vector1, q, int, s, 64, 2, 24*((uint64_t)UINT32_MAX+1));\n+  VDUP(vector1, q, uint, u, 16, 8, 3*(UINT8_MAX+1));\n+  VDUP(vector1, q, uint, u, 32, 4, 55*(UINT16_MAX+1));\n+  VDUP(vector1, q, uint, u, 64, 2, 3*((uint64_t)UINT32_MAX+1));\n+\n+  VDUP(vector2, q, int, s, 16, 8, (uint16_t)UINT8_MAX);\n+  VDUP(vector2, q, int, s, 32, 4, (uint32_t)UINT16_MAX);\n+  VDUP(vector2, q, int, s, 64, 2, (uint64_t)UINT32_MAX);\n+  VDUP(vector2, q, uint, u, 16, 8, (uint16_t)UINT8_MAX);\n+  VDUP(vector2, q, uint, u, 32, 4, (uint32_t)UINT16_MAX);\n+  VDUP(vector2, q, uint, u, 64, 2, (uint64_t)UINT32_MAX);\n+\n+  TEST_VADDHN(INSN_NAME, int, s, 16, 8, 8);\n+  TEST_VADDHN(INSN_NAME, int, s, 32, 16, 4);\n+  TEST_VADDHN(INSN_NAME, int, s, 64, 32, 2);\n+  TEST_VADDHN(INSN_NAME, uint, u, 16, 8, 8);\n+  TEST_VADDHN(INSN_NAME, uint, u, 32, 16, 4);\n+  TEST_VADDHN(INSN_NAME, uint, u, 64, 32, 2);\n+\n+  CHECK_RESULTS (TEST_MSG, \"\");\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME);\n+  return 0;\n+}"}]}