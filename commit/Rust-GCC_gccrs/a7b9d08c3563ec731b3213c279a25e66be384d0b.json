{"sha": "a7b9d08c3563ec731b3213c279a25e66be384d0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdiOWQwOGMzNTYzZWM3MzFiMzIxM2MyNzlhMjVlNjZiZTM4NGQwYg==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2006-09-08T22:56:44Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2006-09-08T22:56:44Z"}, "message": "re PR c++/28858 (Algorithm to find the end of a template parameter list is flawed)\n\n\tPR c++/28858\n\t* parser.c (cp_parser_skip_until_found): Rename to\n\tcp_parser_skip_to_end_of_template_parameter_list.  Remove last two\n\tparameters.  Track levels of '< ... >'.  Stop at '{', '}', or ';'.\n\tReorganize.  Adjust comment.\n\t(cp_parser_template_declaration_after_export): Adjust call.\n\t(cp_parser_enclosed_template_argument_list): Likewise.\n\n\t* g++.dg/parse/template20.C: New test.\n\t* g++.dg/template/operator8.C: Remove obsolete part.\n\t* g++.dg/parse/def-tmpl-arg1.C: Adjust error-markers.\n\t* g++.old-deja/g++.pt/crash65.C: Likewise.\n\nFrom-SVN: r116788", "tree": {"sha": "7f8c829898d90a21a450edc8b19bfc0094314329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f8c829898d90a21a450edc8b19bfc0094314329"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7b9d08c3563ec731b3213c279a25e66be384d0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7b9d08c3563ec731b3213c279a25e66be384d0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7b9d08c3563ec731b3213c279a25e66be384d0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7b9d08c3563ec731b3213c279a25e66be384d0b/comments", "author": null, "committer": null, "parents": [{"sha": "38371be9886507f8bf82fe2fb0a56803efd4ea79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38371be9886507f8bf82fe2fb0a56803efd4ea79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38371be9886507f8bf82fe2fb0a56803efd4ea79"}], "stats": {"total": 98, "additions": 62, "deletions": 36}, "files": [{"sha": "6e20eb17fd2a5e6998753ceb61fc0af50c22617a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7b9d08c3563ec731b3213c279a25e66be384d0b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7b9d08c3563ec731b3213c279a25e66be384d0b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a7b9d08c3563ec731b3213c279a25e66be384d0b", "patch": "@@ -1,3 +1,13 @@\n+2006-09-08  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/28858\n+\t* parser.c (cp_parser_skip_until_found): Rename to\n+\tcp_parser_skip_to_end_of_template_parameter_list.  Remove last two\n+\tparameters.  Track levels of '< ... >'.  Stop at '{', '}', or ';'.\n+\tReorganize.  Adjust comment.\n+\t(cp_parser_template_declaration_after_export): Adjust call.\n+\t(cp_parser_enclosed_template_argument_list): Likewise.\n+\n 2006-09-07  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR C++/28906"}, {"sha": "af4f312a036d4bfb458dfc27155b7160dff9e594", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 34, "deletions": 27, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7b9d08c3563ec731b3213c279a25e66be384d0b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7b9d08c3563ec731b3213c279a25e66be384d0b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a7b9d08c3563ec731b3213c279a25e66be384d0b", "patch": "@@ -1819,8 +1819,8 @@ static void cp_parser_skip_to_end_of_block_or_statement\n   (cp_parser *);\n static void cp_parser_skip_to_closing_brace\n   (cp_parser *);\n-static void cp_parser_skip_until_found\n-  (cp_parser *, enum cpp_ttype, const char *);\n+static void cp_parser_skip_to_end_of_template_parameter_list\n+  (cp_parser *);\n static void cp_parser_skip_to_pragma_eol\n   (cp_parser*, cp_token *);\n static bool cp_parser_error_occurred\n@@ -15495,7 +15495,7 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n   checks = get_deferred_access_checks ();\n \n   /* Look for the `>'.  */\n-  cp_parser_skip_until_found (parser, CPP_GREATER, \"`>'\");\n+  cp_parser_skip_to_end_of_template_parameter_list (parser);\n   /* We just processed one more parameter list.  */\n   ++parser->num_template_parameter_lists;\n   /* If the next token is `template', there are more template\n@@ -15838,7 +15838,7 @@ cp_parser_enclosed_template_argument_list (cp_parser* parser)\n \t}\n     }\n   else\n-    cp_parser_skip_until_found (parser, CPP_GREATER, \"`>'\");\n+    cp_parser_skip_to_end_of_template_parameter_list (parser);\n   /* The `>' token might be a greater-than operator again now.  */\n   parser->greater_than_is_operator_p\n     = saved_greater_than_is_operator_p;\n@@ -16266,54 +16266,61 @@ cp_parser_require (cp_parser* parser,\n     }\n }\n \n-/* Like cp_parser_require, except that tokens will be skipped until\n-   the desired token is found.  An error message is still produced if\n-   the next token is not as expected.  */\n+/* An error message is produced if the next token is not '>'.\n+   All further tokens are skipped until the desired token is\n+   found or '{', '}', ';' or an unbalanced ')' or ']'.  */\n \n static void\n-cp_parser_skip_until_found (cp_parser* parser,\n-\t\t\t    enum cpp_ttype type,\n-\t\t\t    const char* token_desc)\n+cp_parser_skip_to_end_of_template_parameter_list (cp_parser* parser)\n {\n-  cp_token *token;\n+  /* Current level of '< ... >'.  */\n+  unsigned level = 0;\n+  /* Ignore '<' and '>' nested inside '( ... )' or '[ ... ]'.  */\n   unsigned nesting_depth = 0;\n \n-  if (cp_parser_require (parser, type, token_desc))\n+  /* Are we ready, yet?  If not, issue error message.  */\n+  if (cp_parser_require (parser, CPP_GREATER, \"%<>%>\"))\n     return;\n \n   /* Skip tokens until the desired token is found.  */\n   while (true)\n     {\n       /* Peek at the next token.  */\n-      token = cp_lexer_peek_token (parser->lexer);\n-\n-      /* If we've reached the token we want, consume it and stop.  */\n-      if (token->type == type && !nesting_depth)\n+      switch (cp_lexer_peek_token (parser->lexer)->type)\n \t{\n-\t  cp_lexer_consume_token (parser->lexer);\n-\t  return;\n-\t}\n+\tcase CPP_LESS:\n+\t  if (!nesting_depth)\n+\t    ++level;\n+\t  break;\n \n-      switch (token->type)\n-\t{\n-\tcase CPP_EOF:\n-\tcase CPP_PRAGMA_EOL:\n-\t  /* If we've run out of tokens, stop.  */\n-\t  return;\n+\tcase CPP_GREATER:\n+\t  if (!nesting_depth && level-- == 0)\n+\t    {\n+\t      /* We've reached the token we want, consume it and stop.  */\n+\t      cp_lexer_consume_token (parser->lexer);\n+\t      return;\n+\t    }\n+\t  break;\n \n-\tcase CPP_OPEN_BRACE:\n \tcase CPP_OPEN_PAREN:\n \tcase CPP_OPEN_SQUARE:\n \t  ++nesting_depth;\n \t  break;\n \n-\tcase CPP_CLOSE_BRACE:\n \tcase CPP_CLOSE_PAREN:\n \tcase CPP_CLOSE_SQUARE:\n \t  if (nesting_depth-- == 0)\n \t    return;\n \t  break;\n \n+\tcase CPP_EOF:\n+\tcase CPP_PRAGMA_EOL:\n+\tcase CPP_SEMICOLON:\n+\tcase CPP_OPEN_BRACE:\n+\tcase CPP_CLOSE_BRACE:\n+\t  /* The '>' was probably forgotten, don't look further.  */\n+\t  return;\n+\n \tdefault:\n \t  break;\n \t}"}, {"sha": "eb350af57410cb89677aed6bc9a1fdd89d50097e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7b9d08c3563ec731b3213c279a25e66be384d0b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7b9d08c3563ec731b3213c279a25e66be384d0b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a7b9d08c3563ec731b3213c279a25e66be384d0b", "patch": "@@ -1,3 +1,11 @@\n+2006-09-08  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/28858\n+\t* g++.dg/parse/template20.C: New test.\n+\t* g++.dg/template/operator8.C: Remove obsolete part.\n+\t* g++.dg/parse/def-tmpl-arg1.C: Adjust error-markers.\n+\t* g++.old-deja/g++.pt/crash65.C: Likewise.\n+\n 2006-09-07  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR C++/28906"}, {"sha": "6c3659f750266b5830d7e1bca392798474fa7859", "filename": "gcc/testsuite/g++.dg/parse/def-tmpl-arg1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7b9d08c3563ec731b3213c279a25e66be384d0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdef-tmpl-arg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7b9d08c3563ec731b3213c279a25e66be384d0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdef-tmpl-arg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdef-tmpl-arg1.C?ref=a7b9d08c3563ec731b3213c279a25e66be384d0b", "patch": "@@ -6,4 +6,4 @@ template <typename X, typename Y = B<X> > struct A // { dg-error \"\" }\n {\n     A();\n     A(const A&);\n-}; // { dg-error \"\" }\n+};"}, {"sha": "2705f462981033ebc8abf62dea628046e20f19d2", "filename": "gcc/testsuite/g++.dg/parse/template20.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7b9d08c3563ec731b3213c279a25e66be384d0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7b9d08c3563ec731b3213c279a25e66be384d0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate20.C?ref=a7b9d08c3563ec731b3213c279a25e66be384d0b", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/28858\n+// { dg-do compile }\n+\n+template<int N struct A;  // { dg-error \"before\" }\n+\n+bool i = 1 > 0;           // { dg-bogus \"\" }\n+int j = i;                // { dg-bogus \"\" }"}, {"sha": "29d17b84b89b897c577e2570f97b1508a66255bf", "filename": "gcc/testsuite/g++.dg/template/operator8.C", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7b9d08c3563ec731b3213c279a25e66be384d0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7b9d08c3563ec731b3213c279a25e66be384d0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator8.C?ref=a7b9d08c3563ec731b3213c279a25e66be384d0b", "patch": "@@ -4,9 +4,3 @@ struct A\n {\n     template<operator+> void foo() {}   // { dg-error \"identifier|non-function|template arguments\" }\n };\n- \n-struct B\n-{\n-    template<operator> void foo() {}    // { dg-error \"identifier|non-function|'void'\" }\n-    template<int> void bar() {}         // { dg-error \"template arguments\" }\n-};"}, {"sha": "a7df70cec6c0b597384e1ebf7df734578b4953c3", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash65.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7b9d08c3563ec731b3213c279a25e66be384d0b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash65.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7b9d08c3563ec731b3213c279a25e66be384d0b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash65.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash65.C?ref=a7b9d08c3563ec731b3213c279a25e66be384d0b", "patch": "@@ -8,5 +8,5 @@\n \n \n template<class T =\n-struct W {};    // { dg-error \"\" } inside template parms\n-> struct S{};\n+struct W {};    // { dg-error \"inside template parameter list|before\" }\n+> struct S{};   // { dg-error \"before\" }"}]}