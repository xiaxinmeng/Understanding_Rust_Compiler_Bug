{"sha": "9cfa1155757fdd5bf3d8107879fe1462b2889600", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNmYTExNTU3NTdmZGQ1YmYzZDgxMDc4NzlmZTE0NjJiMjg4OTYwMA==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2002-10-13T06:35:15Z"}, "committer": {"name": "Danny Smith", "email": "dannysmith@gcc.gnu.org", "date": "2002-10-13T06:35:15Z"}, "message": "stl_threads.h (_GLIBCPP_mutex, [...]): Declare in namespace __gnu_cxx.\n\n\t* include/bits/stl_threads.h (_GLIBCPP_mutex,\n\t_GLIBCPP_mutex_init,_GLIBCPP_mutex_address,\n\t_GLIBCPP_mutex_address_init, _GLIBCPP_once):\n\tDeclare in namespace __gnu_cxx.\n\t(_STL_mutex_lock::_M_initialize): Qualify __gnu_cxx\n\tnames.\n\tAdjust copyright.\n\nFrom-SVN: r58092", "tree": {"sha": "546f24b65fe577909770090c623c2ffaafce4ad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/546f24b65fe577909770090c623c2ffaafce4ad8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cfa1155757fdd5bf3d8107879fe1462b2889600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cfa1155757fdd5bf3d8107879fe1462b2889600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cfa1155757fdd5bf3d8107879fe1462b2889600", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cfa1155757fdd5bf3d8107879fe1462b2889600/comments", "author": null, "committer": null, "parents": [{"sha": "b0b128027b0d4edd4fd5205da03bf964714e54cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b128027b0d4edd4fd5205da03bf964714e54cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0b128027b0d4edd4fd5205da03bf964714e54cd"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "6c2bfcde9dac86e71d19f87d434c21fe8e4ea8a8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfa1155757fdd5bf3d8107879fe1462b2889600/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfa1155757fdd5bf3d8107879fe1462b2889600/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9cfa1155757fdd5bf3d8107879fe1462b2889600", "patch": "@@ -1,3 +1,13 @@\n+2002-10-13  Danny Smith  <dannysmith@users.sourceforge.net> \n+\n+\t* include/bits/stl_threads.h (_GLIBCPP_mutex,\n+\t_GLIBCPP_mutex_init,_GLIBCPP_mutex_address,\n+\t_GLIBCPP_mutex_address_init, _GLIBCPP_once):\n+\tDeclare in namespace __gnu_cxx.\n+\t(_STL_mutex_lock::_M_initialize): Qualify __gnu_cxx\n+\tnames.\n+\tAdjust copyright.\n+\n 2002-10-12  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/abi_check.cc (hash<string>): Specialize."}, {"sha": "b21ebdd36d6444ff05aa8c7c7bb9ff14eea46179", "filename": "libstdc++-v3/include/bits/stl_threads.h", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfa1155757fdd5bf3d8107879fe1462b2889600/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfa1155757fdd5bf3d8107879fe1462b2889600/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h?ref=9cfa1155757fdd5bf3d8107879fe1462b2889600", "patch": "@@ -1,6 +1,6 @@\n // Threading support -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -126,6 +126,7 @@ namespace std\n     return __result;\n   }\n #endif\n+} //namespace std\n \n   // Locking class.  Note that this class *does not have a\n   // constructor*.  It must be initialized either statically, with\n@@ -141,13 +142,18 @@ namespace std\n   // functions, and no private or protected members.\n \n #if !defined(__GTHREAD_MUTEX_INIT) && defined(__GTHREAD_MUTEX_INIT_FUNCTION)\n+namespace __gnu_cxx\n+{\n   extern __gthread_mutex_t _GLIBCPP_mutex;\n   extern __gthread_mutex_t *_GLIBCPP_mutex_address;\n   extern __gthread_once_t _GLIBCPP_once;\n   extern void _GLIBCPP_mutex_init (void);\n   extern void _GLIBCPP_mutex_address_init (void);\n+}\n #endif\n \n+namespace std\n+{\n   struct _STL_mutex_lock\n   {\n     // The class must be statically initialized with __STL_MUTEX_INITIALIZER.\n@@ -164,22 +170,24 @@ namespace std\n       // There should be no code in this path given the usage rules above.\n #elif defined(__GTHREAD_MUTEX_INIT_FUNCTION)\n       if (_M_init_flag) return;\n-      if (__gthread_once (&_GLIBCPP_once, _GLIBCPP_mutex_init) != 0\n+      if (__gthread_once (&__gnu_cxx::_GLIBCPP_once,\n+\t\t\t  __gnu_cxx::_GLIBCPP_mutex_init) != 0\n \t  && __gthread_active_p ())\n \tabort ();\n-      __gthread_mutex_lock (&_GLIBCPP_mutex);\n+      __gthread_mutex_lock (&__gnu_cxx::_GLIBCPP_mutex);\n       if (!_M_init_flag) \n \t{\n \t  // Even though we have a global lock, we use __gthread_once to be\n \t  // absolutely certain the _M_lock mutex is only initialized once on\n \t  // multiprocessor systems.\n-\t  _GLIBCPP_mutex_address = &_M_lock;\n-\t  if (__gthread_once (&_M_once, _GLIBCPP_mutex_address_init) != 0\n+\t  __gnu_cxx::_GLIBCPP_mutex_address = &_M_lock;\n+\t  if (__gthread_once (&_M_once,\n+\t\t\t      __gnu_cxx::_GLIBCPP_mutex_address_init) != 0\n \t    && __gthread_active_p ())\n \t    abort ();\n \t  _M_init_flag = 1;\n \t}\n-      __gthread_mutex_unlock (&_GLIBCPP_mutex);\n+      __gthread_mutex_unlock (&__gnu_cxx::_GLIBCPP_mutex);\n #endif\n     }\n "}]}