{"sha": "5ffe63ed992f32c1fbec33f2efa96a6b11dba7fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZmZTYzZWQ5OTJmMzJjMWZiZWMzM2YyZWZhOTZhNmIxMWRiYTdmYg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-09T19:51:59Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-09T19:51:59Z"}, "message": "(convert_modes): New function.\n\n(convert_to_mode): Use that.\n\nFrom-SVN: r5297", "tree": {"sha": "519807eadf24835f62b4dc602a64f1e274dbcc56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/519807eadf24835f62b4dc602a64f1e274dbcc56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ffe63ed992f32c1fbec33f2efa96a6b11dba7fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ffe63ed992f32c1fbec33f2efa96a6b11dba7fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ffe63ed992f32c1fbec33f2efa96a6b11dba7fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ffe63ed992f32c1fbec33f2efa96a6b11dba7fb/comments", "author": null, "committer": null, "parents": [{"sha": "0661a3dea182de953da615fad2f366a456635c69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0661a3dea182de953da615fad2f366a456635c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0661a3dea182de953da615fad2f366a456635c69"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "6ef58b031328c5e89712f5a6f109358cbe62b1e2", "filename": "gcc/expr.c", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffe63ed992f32c1fbec33f2efa96a6b11dba7fb/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffe63ed992f32c1fbec33f2efa96a6b11dba7fb/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=5ffe63ed992f32c1fbec33f2efa96a6b11dba7fb", "patch": "@@ -1083,8 +1083,37 @@ convert_to_mode (mode, x, unsignedp)\n      enum machine_mode mode;\n      rtx x;\n      int unsignedp;\n+{\n+  return convert_modes (mode, VOIDmode, x, unsignedp);\n+}\n+\n+/* Return an rtx for a value that would result\n+   from converting X from mode OLDMODE to mode MODE.\n+   Both modes may be floating, or both integer.\n+   UNSIGNEDP is nonzero if X is an unsigned value.\n+\n+   This can be done by referring to a part of X in place\n+   or by copying to a new temporary with conversion.\n+\n+   You can give VOIDmode for OLDMODE, if you are sure X has a nonvoid mode.\n+\n+   This function *must not* call protect_from_queue\n+   except when putting X into an insn (in which case convert_move does it).  */\n+\n+rtx\n+convert_modes (mode, oldmode, x, unsignedp)\n+     enum machine_mode mode, oldmode;\n+     rtx x;\n+     int unsignedp;\n {\n   register rtx temp;\n+\n+  if (GET_MODE (x) != mode)\n+    oldmode = GET_MODE (x);\n+  /* If X doesnt have a mode, and we didn't specify one, \n+     we have a potential bug, so crash now and get it fixed.  */\n+  if (oldmode == VOIDmode)\n+    abort ();\n  \n   /* If FROM is a SUBREG that indicates that we have already done at least\n      the required extension, strip it.  */\n@@ -1094,7 +1123,7 @@ convert_to_mode (mode, x, unsignedp)\n       && SUBREG_PROMOTED_UNSIGNED_P (x) == unsignedp)\n     x = gen_lowpart (mode, x);\n \n-  if (mode == GET_MODE (x))\n+  if (mode == oldmode)\n     return x;\n \n   /* There is one case that we must handle specially: If we are converting\n@@ -1115,9 +1144,9 @@ convert_to_mode (mode, x, unsignedp)\n \n   if (GET_CODE (x) == CONST_INT\n       || (GET_MODE_CLASS (mode) == MODE_INT\n-\t  && GET_MODE_CLASS (GET_MODE (x)) == MODE_INT\n+\t  && GET_MODE_CLASS (oldmode) == MODE_INT\n \t  && (GET_CODE (x) == CONST_DOUBLE\n-\t      || (GET_MODE_SIZE (mode) <= GET_MODE_SIZE (GET_MODE (x))\n+\t      || (GET_MODE_SIZE (mode) <= GET_MODE_SIZE (oldmode)\n \t\t  && ((GET_CODE (x) == MEM && ! MEM_VOLATILE_P (x)\n \t\t       && direct_load[(int) mode])\n \t\t      || GET_CODE (x) == REG)))))\n@@ -2246,8 +2275,10 @@ expand_assignment (to, from, want_value, suggest_reg)\n \n       /* If the value is meaningful, convert RESULT to the proper mode.\n \t Otherwise, return nothing.  */\n-      return (want_value ? convert_to_mode (TYPE_MODE (TREE_TYPE (to)), result,\n-\t\t\t\t\t    TREE_UNSIGNED (TREE_TYPE (to)))\n+      return (want_value ? convert_modes (TYPE_MODE (TREE_TYPE (to)),\n+\t\t\t\t\t  TYPE_MODE (TREE_TYPE (from)),\n+\t\t\t\t\t  result,\n+\t\t\t\t\t  TREE_UNSIGNED (TREE_TYPE (to)))\n \t      : NULL_RTX);\n     }\n "}]}