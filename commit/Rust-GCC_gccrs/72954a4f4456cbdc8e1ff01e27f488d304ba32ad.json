{"sha": "72954a4f4456cbdc8e1ff01e27f488d304ba32ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI5NTRhNGY0NDU2Y2JkYzhlMWZmMDFlMjdmNDg4ZDMwNGJhMzJhZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-09-16T07:58:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2003-09-16T07:58:27Z"}, "message": "c-common.c (handle_warn_unused_result_attribute): New function.\n\n\t* c-common.c (handle_warn_unused_result_attribute): New function.\n\t(c_common_attribute_table): Add warn_unused_result.\n\t(c_expand_expr): Issue warning when result of inlined function\n\twith warn_unused_result attribute is ignored.\n\t* calls.c (expand_call): Issue warning when result of function\n\twith warn_unused_result attribute is ignored.\n\t* c-common.h (STMT_EXPR_WARN_UNUSED_RESULT): Define.\n\t* expr.c (expr_wfl_stack): Define.\n\t(expand_expr) <case EXPR_WITH_FILE_LOCATION>: If ignore,\n\tpass const0_rtx as target.  Chain locations into expr_wfl_stack.\n\t* tree-inline.c (expand_call_inline): Set STMT_EXPR_WARN_UNUSED_RESULT\n\tbit if inlined function has warn_unused_result attribute.\n\t* input.h (expr_wfl_stack): Declare.\n\t* doc/extend.texi: Document warn_unused_result attribute.\n\n\t* gcc.dg/attr-warn-unused-result.c: New test.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r71424", "tree": {"sha": "a6e02ea18c49961a7fc38f54f53192e537f6e3af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6e02ea18c49961a7fc38f54f53192e537f6e3af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72954a4f4456cbdc8e1ff01e27f488d304ba32ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72954a4f4456cbdc8e1ff01e27f488d304ba32ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72954a4f4456cbdc8e1ff01e27f488d304ba32ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9fbef12bee8504ff48a45e3c67099af6772857d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9fbef12bee8504ff48a45e3c67099af6772857d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9fbef12bee8504ff48a45e3c67099af6772857d"}], "stats": {"total": 323, "additions": 316, "deletions": 7}, "files": [{"sha": "04c27b0a9b1fc91e3ca8a4b71d691c0a4019a92f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72954a4f4456cbdc8e1ff01e27f488d304ba32ad", "patch": "@@ -1,3 +1,21 @@\n+2003-09-16  Jason Merrill  <jason@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-common.c (handle_warn_unused_result_attribute): New function.\n+\t(c_common_attribute_table): Add warn_unused_result.\n+\t(c_expand_expr): Issue warning when result of inlined function\n+\twith warn_unused_result attribute is ignored.\n+\t* calls.c (expand_call): Issue warning when result of function\n+\twith warn_unused_result attribute is ignored.\n+\t* c-common.h (STMT_EXPR_WARN_UNUSED_RESULT): Define.\n+\t* expr.c (expr_wfl_stack): Define.\n+\t(expand_expr) <case EXPR_WITH_FILE_LOCATION>: If ignore,\n+\tpass const0_rtx as target.  Chain locations into expr_wfl_stack.\n+\t* tree-inline.c (expand_call_inline): Set STMT_EXPR_WARN_UNUSED_RESULT\n+\tbit if inlined function has warn_unused_result attribute.\n+\t* input.h (expr_wfl_stack): Declare.\n+\t* doc/extend.texi: Document warn_unused_result attribute.\n+\n 2003-09-15  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* cpplib.c (do_pragma): Remove unnecessary cb_line_change."}, {"sha": "49c6acab0133ad10ae4dcf687bd5cd82b5b17e0e", "filename": "gcc/c-common.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=72954a4f4456cbdc8e1ff01e27f488d304ba32ad", "patch": "@@ -773,6 +773,8 @@ static tree handle_vector_size_attribute (tree *, tree, tree, int,\n static tree handle_nonnull_attribute (tree *, tree, tree, int, bool *);\n static tree handle_nothrow_attribute (tree *, tree, tree, int, bool *);\n static tree handle_cleanup_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_warn_unused_result_attribute (tree *, tree, tree, int,\n+\t\t\t\t\t\t bool *);\n static tree vector_size_helper (tree, tree);\n \n static void check_function_nonnull (tree, tree);\n@@ -850,6 +852,8 @@ const struct attribute_spec c_common_attribute_table[] =\n   { \"may_alias\",\t      0, 0, false, true, false, NULL },\n   { \"cleanup\",\t\t      1, 1, true, false, false,\n \t\t\t      handle_cleanup_attribute },\n+  { \"warn_unused_result\",     0, 0, false, true, true,\n+\t\t\t      handle_warn_unused_result_attribute },\n   { NULL,                     0, 0, false, false, false, NULL }\n };\n \n@@ -4007,6 +4011,26 @@ c_expand_expr (tree exp, rtx target, enum machine_mode tmode, int modifier)\n \tbool preserve_result = false;\n \tbool return_target = false;\n \n+\tif (STMT_EXPR_WARN_UNUSED_RESULT (exp) && target == const0_rtx)\n+\t  {\n+\t    tree stmt = STMT_EXPR_STMT (exp);\n+\t    tree scope;\n+\n+\t    for (scope = COMPOUND_BODY (stmt);\n+\t\t scope && TREE_CODE (scope) != SCOPE_STMT;\n+\t\t scope = TREE_CHAIN (scope));\n+\n+\t    if (scope && SCOPE_STMT_BLOCK (scope))\n+\t      warning (\"%Hignoring return value of `%D', \"\n+\t\t       \"declared with attribute warn_unused_result\",\n+\t\t       &expr_wfl_stack->location,\n+\t\t       BLOCK_ABSTRACT_ORIGIN (SCOPE_STMT_BLOCK (scope)));\n+\t    else\n+\t      warning (\"%Hignoring return value of function \"\n+\t\t       \"declared with attribute warn_unused_result\",\n+\t\t       &expr_wfl_stack->location);\n+\t  }\n+\n \t/* Since expand_expr_stmt calls free_temp_slots after every\n \t   expression statement, we must call push_temp_slots here.\n \t   Otherwise, any temporaries in use now would be considered\n@@ -5496,6 +5520,23 @@ handle_cleanup_attribute (tree *node, tree name, tree args,\n \n   return NULL_TREE;\n }\n+\n+/* Handle a \"warn_unused_result\" attribute.  No special handling.  */\n+\n+static tree\n+handle_warn_unused_result_attribute (tree *node, tree name,\n+\t\t\t       tree args ATTRIBUTE_UNUSED,\n+\t\t\t       int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+{\n+  /* Ignore the attribute for functions not returning any value.  */\n+  if (VOID_TYPE_P (TREE_TYPE (*node)))\n+    {\n+      warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n \f\n /* Check for valid arguments being passed to a function.  */\n void"}, {"sha": "0bbc955bcaad0e011933efa6384019c3ac0c1934", "filename": "gcc/c-common.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=72954a4f4456cbdc8e1ff01e27f488d304ba32ad", "patch": "@@ -40,6 +40,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    2: STMT_LINENO_FOR_FN_P (in _STMT)\n    3: SCOPE_NO_CLEANUPS_P (in SCOPE_STMT)\n       COMPOUND_STMT_BODY_BLOCK (in COMPOUND_STMT)\n+      STMT_EXPR_WARN_UNUSED_RESULT (in STMT_EXPR)\n    4: SCOPE_PARTIAL_P (in SCOPE_STMT)\n */\n \n@@ -1054,6 +1055,11 @@ extern void finish_file\t(void);\n #define STMT_EXPR_NO_SCOPE(NODE) \\\n    TREE_LANG_FLAG_0 (STMT_EXPR_CHECK (NODE))\n \n+/* Nonzero if this statement-expression should cause warning if its result\n+   is not used.  */\n+#define STMT_EXPR_WARN_UNUSED_RESULT(NODE) \\\n+   TREE_LANG_FLAG_3 (STMT_EXPR_CHECK (NODE))\n+\n /* LABEL_STMT accessor. This gives access to the label associated with\n    the given label statement.  */\n #define LABEL_STMT_LABEL(NODE)  TREE_OPERAND (LABEL_STMT_CHECK (NODE), 0)"}, {"sha": "f8e7ea06d00858e707a4622029f026470e0f6de4", "filename": "gcc/calls.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=72954a4f4456cbdc8e1ff01e27f488d304ba32ad", "patch": "@@ -2167,13 +2167,26 @@ expand_call (tree exp, rtx target, int ignore)\n \t  (*lang_hooks.mark_addressable) (fndecl);\n \t}\n \n+      if (ignore\n+\t  && lookup_attribute (\"warn_unused_result\",\n+\t\t\t       TYPE_ATTRIBUTES (TREE_TYPE (fndecl))))\n+\twarning (\"ignoring return value of `%D', \"\n+\t\t \"declared with attribute warn_unused_result\", fndecl);\n+\n       flags |= flags_from_decl_or_type (fndecl);\n     }\n \n   /* If we don't have specific function to call, see if we have a\n      attributes set in the type.  */\n   else\n-    flags |= flags_from_decl_or_type (TREE_TYPE (TREE_TYPE (p)));\n+    {\n+      if (ignore\n+\t  && lookup_attribute (\"warn_unused_result\",\n+\t\t\t       TYPE_ATTRIBUTES (TREE_TYPE (TREE_TYPE (p)))))\n+\twarning (\"ignoring return value of function \"\n+\t\t \"declared with attribute warn_unused_result\");\n+      flags |= flags_from_decl_or_type (TREE_TYPE (TREE_TYPE (p)));\n+    }\n \n   struct_value = targetm.calls.struct_value_rtx (fndecl ? TREE_TYPE (fndecl) : 0, 0);\n "}, {"sha": "ce3171388b4b152153d80d8ffdacfaf93fd9e7a6", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=72954a4f4456cbdc8e1ff01e27f488d304ba32ad", "patch": "@@ -1980,9 +1980,9 @@ attributes are currently defined for functions on all targets:\n @code{format}, @code{format_arg}, @code{no_instrument_function},\n @code{section}, @code{constructor}, @code{destructor}, @code{used},\n @code{unused}, @code{deprecated}, @code{weak}, @code{malloc},\n-@code{alias}, and @code{nonnull}.  Several other attributes are defined\n-for functions on particular target systems.  Other attributes, including\n-@code{section} are supported for variables declarations\n+@code{alias}, @code{warn_unused_result} and @code{nonnull}.  Several other\n+attributes are defined for functions on particular target systems.  Other\n+attributes, including @code{section} are supported for variables declarations\n (@pxref{Variable Attributes}) and for types (@pxref{Type Attributes}).\n \n You may also specify attributes with @samp{__} preceding and following\n@@ -2312,6 +2312,26 @@ results in a warning on line 3 but not line 2.\n The @code{deprecated} attribute can also be used for variables and\n types (@pxref{Variable Attributes}, @pxref{Type Attributes}.)\n \n+@item warn_unused_result\n+@cindex @code{warn_unused_result} attribute\n+The @code{warn_unused_result} attribute causes a warning to be emitted\n+if a caller of the function with this attribute does not use its\n+return value.  This is useful for functions where not checking\n+the result is either a security problem or always a bug, such as\n+@code{realloc}.\n+\n+@smallexample\n+int fn () __attribute__ ((warn_unused_result));\n+int foo ()\n+@{\n+  if (fn () < 0) return -1;\n+  fn ();\n+  return 0;\n+@}\n+@end smallexample\n+\n+results in warning on line 5.\n+\n @item weak\n @cindex @code{weak} attribute\n The @code{weak} attribute causes the declaration to be emitted as a weak"}, {"sha": "584250bdd315a9b90bee66b81ede7b74ef1948fe", "filename": "gcc/expr.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=72954a4f4456cbdc8e1ff01e27f488d304ba32ad", "patch": "@@ -235,6 +235,9 @@ enum insn_code movstr_optab[NUM_MACHINE_MODES];\n /* This array records the insn_code of insns to perform block clears.  */\n enum insn_code clrstr_optab[NUM_MACHINE_MODES];\n \n+/* Stack of EXPR_WITH_FILE_LOCATION nested expressions.  */\n+struct file_stack *expr_wfl_stack;\n+\n /* SLOW_UNALIGNED_ACCESS is nonzero if unaligned accesses are very slow.  */\n \n #ifndef SLOW_UNALIGNED_ACCESS\n@@ -6959,14 +6962,23 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode,\n     case EXPR_WITH_FILE_LOCATION:\n       {\n \trtx to_return;\n-\tlocation_t saved_loc = input_location;\n+\tstruct file_stack fs;\n+\n+\tfs.location = input_location;\n+\tfs.next = expr_wfl_stack;\n \tinput_filename = EXPR_WFL_FILENAME (exp);\n \tinput_line = EXPR_WFL_LINENO (exp);\n+\texpr_wfl_stack = &fs;\n \tif (EXPR_WFL_EMIT_LINE_NOTE (exp))\n \t  emit_line_note (input_location);\n \t/* Possibly avoid switching back and forth here.  */\n-\tto_return = expand_expr (EXPR_WFL_NODE (exp), target, tmode, modifier);\n-\tinput_location = saved_loc;\n+\tto_return = expand_expr (EXPR_WFL_NODE (exp),\n+\t\t\t\t (ignore ? const0_rtx : target),\n+\t\t\t\t tmode, modifier);\n+\tif (expr_wfl_stack != &fs)\n+\t  abort ();\n+\tinput_location = fs.location;\n+\texpr_wfl_stack = fs.next;\n \treturn to_return;\n       }\n "}, {"sha": "ff014f6d664f58ed8002d761ed65319aef9a79bd", "filename": "gcc/input.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=72954a4f4456cbdc8e1ff01e27f488d304ba32ad", "patch": "@@ -51,6 +51,9 @@ extern location_t input_location;\n    The line member is not accurate for the innermost file on the stack.  */\n extern struct file_stack *input_file_stack;\n \n+/* Stack of EXPR_WITH_FILE_LOCATION nested expressions.  */\n+extern struct file_stack *expr_wfl_stack;\n+\n /* Incremented on each change to input_file_stack.  */\n extern int input_file_stack_tick;\n "}, {"sha": "9af03e7619c91dfd4f77fdd7d56225775d4c2904", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72954a4f4456cbdc8e1ff01e27f488d304ba32ad", "patch": "@@ -1,3 +1,8 @@\n+2003-09-16  Jason Merrill  <jason@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/attr-warn-unused-result.c: New test.\n+\n 2003-09-15  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/12184"}, {"sha": "0404ceceb609151d728a56f5410e68b78c66c883", "filename": "gcc/testsuite/gcc.dg/attr-warn-unused-result.c", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-warn-unused-result.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-warn-unused-result.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-warn-unused-result.c?ref=72954a4f4456cbdc8e1ff01e27f488d304ba32ad", "patch": "@@ -0,0 +1,188 @@\n+/* warn_unused_result attribute tests.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+#define WUR __attribute__((warn_unused_result))\n+#define WURAI __attribute__((warn_unused_result, always_inline)) inline\n+typedef WUR int (*fnt) (void);\n+\n+typedef struct { long i; } A;\n+typedef struct { long i; long j; } B;\n+typedef struct { char big[1024]; fnt fn; } C;\n+\n+WUR int check1 (void);\n+WUR void check2 (void); /* { dg-warning \"attribute ignored\" } */\n+int foo WUR;\t  /* { dg-warning \"only applies\" } */\n+int bar (void);\n+extern WURAI int check3 (void) { return bar (); }\n+WUR A check4 (void);\n+WUR B check5 (void);\n+WUR C check6 (void);\n+A bar7 (void);\n+B bar8 (void);\n+C bar9 (void);\n+extern WURAI A check7 (void) { return bar7 (); }\n+extern WURAI B check8 (void) { return bar8 (); }\n+extern WURAI C check9 (void) { return bar9 (); }\n+/* This is useful for checking whether return value of statement\n+   expressions (returning int in this case) is used.  */\n+extern WURAI int check_int_result (int res) { return res; }\n+#define GU(v) ({ int e = 0; (v) = bar (); if ((v) < 23) e = 14; e; })\n+fnt fnptr;\n+WUR int check10 (void);\n+int baz (void);\n+extern WURAI int check11 (void) { return baz (); }\n+int k;\n+\n+void\n+test (void)\n+{\n+  int i = 0, j;\n+  const fnt pcheck1 = check1;\n+  const fnt pcheck3 = check3;\n+  A a;\n+  B b;\n+  C c;\n+  if (check1 ())\n+    return;\n+  i += check1 ();\n+  i += ({ check1 (); });\n+  check1 ();\t\t/* { dg-warning \"ignoring return value of\" } */\n+  (void) check1 ();\t/* { dg-warning \"ignoring return value of\" } */\n+  check1 (), bar ();\t/* { dg-warning \"ignoring return value of\" } */\n+  check2 ();\n+  (void) check2 ();\n+  check2 (), bar ();\n+  if (check3 ())\n+    return;\n+  i += check3 ();\n+  i += ({ check3 (); });\n+  check3 ();\t\t/* { dg-warning \"ignoring return value of\" } */\n+  (void) check3 ();\t/* { dg-warning \"ignoring return value of\" } */\n+  check3 (), bar ();\t/* { dg-warning \"ignoring return value of\" } */\n+  a = check4 ();\n+  if (a.i)\n+    return;\n+  if (check4 ().i)\n+    return;\n+  if (({ check4 (); }).i)\n+    return;\n+  check4 ();\t\t/* { dg-warning \"ignoring return value of\" } */\n+  (void) check4 ();\t/* { dg-warning \"ignoring return value of\" } */\n+  check4 (), bar ();\t/* { dg-warning \"ignoring return value of\" } */\n+  b = check5 ();\n+  if (b.i + b.j)\n+    return;\n+  if (check5 ().j)\n+    return;\n+  if (({ check5 (); }).j)\n+    return;\n+  check5 ();\t\t/* { dg-warning \"ignoring return value of\" } */\n+  (void) check5 ();\t/* { dg-warning \"ignoring return value of\" } */\n+  check5 (), bar ();\t/* { dg-warning \"ignoring return value of\" } */\n+  c = check6 ();\n+  if (c.big[12] + c.big[29])\n+    return;\n+  if (check6 ().big[27])\n+    return;\n+  if (({ check6 (); }).big[0])\n+    return;\n+  check6 ();\t\t/* { dg-warning \"ignoring return value of\" } */\n+  (void) check6 ();\t/* { dg-warning \"ignoring return value of\" } */\n+  check6 (), bar ();\t/* { dg-warning \"ignoring return value of\" } */\n+  a = check7 ();\n+  if (a.i)\n+    return;\n+  if (check7 ().i)\n+    return;\n+  if (({ check7 (); }).i)\n+    return;\n+  check7 ();\t\t/* { dg-warning \"ignoring return value of\" } */\n+  (void) check7 ();\t/* { dg-warning \"ignoring return value of\" } */\n+  check7 (), bar ();\t/* { dg-warning \"ignoring return value of\" } */\n+  b = check8 ();\n+  if (b.i + b.j)\n+    return;\n+  if (check8 ().j)\n+    return;\n+  if (({ check8 (); }).j)\n+    return;\n+  check8 ();\t\t/* { dg-warning \"ignoring return value of\" } */\n+  (void) check8 ();\t/* { dg-warning \"ignoring return value of\" } */\n+  check8 (), bar ();\t/* { dg-warning \"ignoring return value of\" } */\n+  c = check9 ();\n+  if (c.big[12] + c.big[29])\n+    return;\n+  if (check9 ().big[27])\n+    return;\n+  if (({ check9 (); }).big[0])\n+    return;\n+  check9 ();\t\t/* { dg-warning \"ignoring return value of\" } */\n+  (void) check9 ();\t/* { dg-warning \"ignoring return value of\" } */\n+  check9 (), bar ();\t/* { dg-warning \"ignoring return value of\" } */\n+  if (check_int_result (GU (j)))\n+    return;\n+  i += check_int_result (GU (j));\n+  i += ({ check_int_result (GU (j)); });\n+  check_int_result (GU (j)); /* { dg-warning \"ignoring return value of\" } */\n+  (void) check_int_result (GU (j)); /* { dg-warning \"ignoring return value of\" } */\n+  check_int_result (GU (j)), bar (); /* { dg-warning \"ignoring return value of\" } */\n+  if (fnptr ())\n+    return;\n+  i += fnptr ();\n+  i += ({ fnptr (); });\n+  fnptr ();\t\t/* { dg-warning \"ignoring return value of\" } */\n+  (void) fnptr ();\t/* { dg-warning \"ignoring return value of\" } */\n+  fnptr (), bar ();\t/* { dg-warning \"ignoring return value of\" } */\n+  fnptr = check1;\n+  if (fnptr ())\n+    return;\n+  i += fnptr ();\n+  i += ({ fnptr (); });\n+  fnptr ();\t\t/* { dg-warning \"ignoring return value of\" } */\n+  (void) fnptr ();\t/* { dg-warning \"ignoring return value of\" } */\n+  fnptr (), bar ();\t/* { dg-warning \"ignoring return value of\" } */\n+  fnptr = check3;\n+  if (fnptr ())\n+    return;\n+  i += fnptr ();\n+  i += ({ fnptr (); });\n+  fnptr ();\t\t/* { dg-warning \"ignoring return value of\" } */\n+  (void) fnptr ();\t/* { dg-warning \"ignoring return value of\" } */\n+  fnptr (), bar ();\t/* { dg-warning \"ignoring return value of\" } */\n+  if (bar9 ().fn ())\n+    return;\n+  i += bar9 ().fn ();\n+  i += ({ bar9 ().fn (); });\n+  bar9 ().fn ();\t/* { dg-warning \"ignoring return value of\" } */\n+  (void) bar9 ().fn ();\t/* { dg-warning \"ignoring return value of\" } */\n+  bar9 ().fn (), bar (); /* { dg-warning \"ignoring return value of\" } */\n+  if ((k ? check1 : check10) ())\n+    return;\n+  i += (k ? check1 : check10) ();\n+  i += ({ (k ? check1 : check10) (); });\n+  (k ? check1 : check10) (); /* { dg-warning \"ignoring return value of\" } */\n+  (void) (k ? check1 : check10) (); /* { dg-warning \"ignoring return value of\" } */\n+  (k ? check1 : check10) (), bar (); /* { dg-warning \"ignoring return value of\" } */\n+  if ((k ? check3 : check11) ())\n+    return;\n+  i += (k ? check3 : check11) ();\n+  i += ({ (k ? check3 : check11) (); });\n+  (k ? check3 : check11) (); /* { dg-warning \"ignoring return value of\" } */\n+  (void) (k ? check3 : check11) (); /* { dg-warning \"ignoring return value of\" } */\n+  (k ? check3 : check11) (), bar (); /* { dg-warning \"ignoring return value of\" } */\n+  if (pcheck1 ())\n+    return;\n+  i += pcheck1 ();\n+  i += ({ pcheck1 (); });\n+  pcheck1 ();\t\t/* { dg-warning \"ignoring return value of\" } */\n+  (void) pcheck1 ();\t/* { dg-warning \"ignoring return value of\" } */\n+  pcheck1 (), bar ();\t/* { dg-warning \"ignoring return value of\" } */\n+  if (pcheck3 ())\n+    return;\n+  i += pcheck3 ();\n+  i += ({ pcheck3 (); });\n+  pcheck3 ();\t\t/* { dg-warning \"ignoring return value of\" } */\n+  (void) pcheck3 ();\t/* { dg-warning \"ignoring return value of\" } */\n+  pcheck3 (), bar ();\t/* { dg-warning \"ignoring return value of\" } */\n+}"}, {"sha": "8a435a62de1df749e0a69e50802db12774ad34ba", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72954a4f4456cbdc8e1ff01e27f488d304ba32ad/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=72954a4f4456cbdc8e1ff01e27f488d304ba32ad", "patch": "@@ -1328,6 +1328,9 @@ expand_call_inline (tree *tp, int *walk_subtrees, void *data)\n   expr = build1 (STMT_EXPR, TREE_TYPE (TREE_TYPE (fn)), make_node (COMPOUND_STMT));\n   /* There is no scope associated with the statement-expression.  */\n   STMT_EXPR_NO_SCOPE (expr) = 1;\n+  if (lookup_attribute (\"warn_unused_result\",\n+\t\t\tTYPE_ATTRIBUTES (TREE_TYPE (fn))))\n+    STMT_EXPR_WARN_UNUSED_RESULT (expr) = 1;\n   stmt = STMT_EXPR_STMT (expr);\n #else /* INLINER_FOR_JAVA */\n   /* Build a block containing code to initialize the arguments, the"}]}