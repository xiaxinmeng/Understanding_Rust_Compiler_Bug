{"sha": "fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM1NTUzNzA1Mjg2ZDI0NGQ5Y2I2YjY0NDdkZGI5M2QwZWQ2ZTVmYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-01-16T15:13:33Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-01-16T15:13:33Z"}, "message": "arm.h (CONDITIONAL_REGISTER_USAGE): Avoid signed/unsigned warning.\n\n\t* arm.h (CONDITIONAL_REGISTER_USAGE): Avoid signed/unsigned\n\twarning.\n\t* emit-rtl.c (gen_rtx_REG, set_mem_attributes_minus_bitpos,\n\tinit_emit_once): Likewise.\n\t* flow.c (mark_regs_live_at_end, calculate_global_regs_live):\n\tLikewise.\n\t* function.c (assign_stack_temp_for_type): Likewise.\n\t* loop.c (loop_invariant_p): Likewise.\n\t* recog.c (push_operand): Likewise.\n\t* regclass.c (init_reg_sets_1): Likewise.\n\t* reload.c (update_auto_inc_notes): Likewise.\n\t* reload1.c (reload_as_needed, emit_input_reload_insns): Likewise.\n\t* stmt.c (expand_asm_operands): Likewise.\n\t* stor-layout.c (start_record_layout): Likewise.\n\ncp:\n\t* class.c (layout_virtual_bases): Avoid signed/unsigned warning.\n\njava:\n\t* jcf-write.c (generate_bytecode_insns): Avoid signed/unsigned\n\twarning.\n\nFrom-SVN: r61389", "tree": {"sha": "b6bfa10c09235d9c777bc65f4eb59e74ae0e4eec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6bfa10c09235d9c777bc65f4eb59e74ae0e4eec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/comments", "author": null, "committer": null, "parents": [{"sha": "faca036b47943d855a9cba0a319680fcbcbf4988", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faca036b47943d855a9cba0a319680fcbcbf4988", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faca036b47943d855a9cba0a319680fcbcbf4988"}], "stats": {"total": 62, "additions": 44, "deletions": 18}, "files": [{"sha": "c31014becfc8d89af9280a4ba3959d81bb0d9ad2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "patch": "@@ -1,3 +1,20 @@\n+2003-01-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* arm.h (CONDITIONAL_REGISTER_USAGE): Avoid signed/unsigned\n+\twarning.\n+\t* emit-rtl.c (gen_rtx_REG, set_mem_attributes_minus_bitpos,\n+\tinit_emit_once): Likewise.\n+\t* flow.c (mark_regs_live_at_end, calculate_global_regs_live):\n+\tLikewise.\n+\t* function.c (assign_stack_temp_for_type): Likewise.\n+\t* loop.c (loop_invariant_p): Likewise.\n+\t* recog.c (push_operand): Likewise.\n+\t* regclass.c (init_reg_sets_1): Likewise.\n+\t* reload.c (update_auto_inc_notes): Likewise.\n+\t* reload1.c (reload_as_needed, emit_input_reload_insns): Likewise.\n+\t* stmt.c (expand_asm_operands): Likewise.\n+\t* stor-layout.c (start_record_layout): Likewise.\n+\n 2003-01-16  Herman A.J. ten Brugge <hermantenbrugge@home.nl>\n \n         * config/c4x/c4x.md (epilogue): Correct last patch."}, {"sha": "7349449ff35e30a031b578d54b05dd6b4307bdd8", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "patch": "@@ -818,7 +818,7 @@ extern const char * structure_size_string;\n \t   regno <= LAST_ARM_FP_REGNUM; ++regno)\t\t\\\n \tfixed_regs[regno] = call_used_regs[regno] = 1;\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n-  if (PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM)\t\t\\\n+  if ((unsigned) PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM)\t\\\n     {\t\t\t\t\t\t\t\t\\\n       fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\t\\\n       call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\\"}, {"sha": "826d7366593253c860a97d35d81de04f69a29f74", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "patch": "@@ -1,3 +1,7 @@\n+2003-01-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* class.c (layout_virtual_bases): Avoid signed/unsigned warning.\n+\n 2003-01-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* decl2.c (check_classfn): Fix uninitialized warning."}, {"sha": "40dad12a05a46f8ff7e2d4c99ecf2a4b15b8e0b3", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "patch": "@@ -4841,7 +4841,7 @@ layout_virtual_bases (record_layout_info rli, splay_tree offsets)\n #ifdef STRUCTURE_SIZE_BOUNDARY\n       /* Packed structures don't need to have minimum size.  */\n       if (! TYPE_PACKED (t))\n-\tTYPE_ALIGN (t) = MAX (TYPE_ALIGN (t), STRUCTURE_SIZE_BOUNDARY);\n+\tTYPE_ALIGN (t) = MAX (TYPE_ALIGN (t), (unsigned) STRUCTURE_SIZE_BOUNDARY);\n #endif\n       rli->offset = TYPE_SIZE_UNIT (t);\n       rli->bitpos = bitsize_zero_node;"}, {"sha": "bacbf03eec7557d1c072f6fa42a3b35e4f70d0ab", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "patch": "@@ -533,7 +533,7 @@ gen_rtx_REG (mode, regno)\n       if (regno == RETURN_ADDRESS_POINTER_REGNUM)\n \treturn return_address_pointer_rtx;\n #endif\n-      if (regno == PIC_OFFSET_TABLE_REGNUM\n+      if (regno == (unsigned) PIC_OFFSET_TABLE_REGNUM\n \t  && fixed_regs[PIC_OFFSET_TABLE_REGNUM])\n \treturn pic_offset_table_rtx;\n       if (regno == STACK_POINTER_REGNUM)\n@@ -1849,7 +1849,7 @@ set_mem_attributes_minus_bitpos (ref, t, objectp, bitpos)\n \t\t  HOST_WIDE_INT ioff = tree_low_cst (off_tree, 1);\n \t\t  HOST_WIDE_INT aoff = (ioff & -ioff) * BITS_PER_UNIT;\n \t\t  align = DECL_ALIGN (t);\n-\t\t  if (aoff && aoff < align)\n+\t\t  if (aoff && (unsigned HOST_WIDE_INT) aoff < align)\n \t            align = aoff;\n \t\t  offset = GEN_INT (ioff);\n \t\t  apply_bitpos = bitpos;\n@@ -5493,7 +5493,7 @@ init_emit_once (line_numbers)\n #endif\n #endif\n \n-  if (PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM)\n+  if ((unsigned) PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM)\n     pic_offset_table_rtx = gen_raw_REG (Pmode, PIC_OFFSET_TABLE_REGNUM);\n }\n \f"}, {"sha": "7046290bdefdd60d32097a7c8559c1eadffcf87d", "filename": "gcc/flow.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "patch": "@@ -1005,7 +1005,7 @@ mark_regs_live_at_end (set)\n   /* Many architectures have a GP register even without flag_pic.\n      Assume the pic register is not in use, or will be handled by\n      other means, if it is not fixed.  */\n-  if (PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM\n+  if ((unsigned) PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM\n       && fixed_regs[PIC_OFFSET_TABLE_REGNUM])\n     SET_REGNO_REG_SET (set, PIC_OFFSET_TABLE_REGNUM);\n #endif\n@@ -1234,7 +1234,7 @@ calculate_global_regs_live (blocks_in, blocks_out, flags)\n \n \t  /* Any constant, or pseudo with constant equivalences, may\n \t     require reloading from memory using the pic register.  */\n-\t  if (PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM\n+\t  if ((unsigned) PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM\n \t      && fixed_regs[PIC_OFFSET_TABLE_REGNUM])\n \t    SET_REGNO_REG_SET (new_live_at_end, PIC_OFFSET_TABLE_REGNUM);\n \t}"}, {"sha": "d40801c40782f12cfafc3fec31d2c2e10a139e99", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "patch": "@@ -733,7 +733,7 @@ assign_stack_temp_for_type (mode, size, keep, type)\n \tabort ();\n       p->slot = assign_stack_local (mode,\n \t\t\t\t    (mode == BLKmode\n-\t\t\t\t     ? CEIL_ROUND (size, align / BITS_PER_UNIT)\n+\t\t\t\t     ? CEIL_ROUND (size, (int) align / BITS_PER_UNIT)\n \t\t\t\t     : size),\n \t\t\t\t    align);\n "}, {"sha": "649a172ae198bb1aa553fc2d69a7fa9bb6182c99", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "patch": "@@ -1,3 +1,8 @@\n+2003-01-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* jcf-write.c (generate_bytecode_insns): Avoid signed/unsigned\n+\twarning.\n+\n 2003-01-14  Tom Tromey  <tromey@redhat.com>\n \n \t* class.c (make_class_data): Check that super is compiled before"}, {"sha": "ebd842e223a566e4858cc1f6bcdbc196ed7fa002", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "patch": "@@ -1692,7 +1692,7 @@ generate_bytecode_insns (tree exp, int target, struct jcf_partial *state)\n \t       something like Integer.MIN_VALUE.  That is why delta is\n \t       unsigned.  */\n \t    delta = sw_state.max_case - sw_state.min_case;\n-\t    if (2 * sw_state.num_cases >= delta)\n+\t    if (2 * (unsigned) sw_state.num_cases >= delta)\n \t      { /* Use tableswitch. */\n \t\tint index = 0;\n \t\tRESERVE (13 + 4 * (sw_state.max_case - sw_state.min_case + 1));"}, {"sha": "8c3ddc751dac6c7328db48b5196678443c4e285e", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "patch": "@@ -3269,7 +3269,7 @@ loop_invariant_p (loop, x)\n \t These have always been created by the unroller and are set in\n \t the loop, hence are never invariant. */\n \n-      if (REGNO (x) >= regs->num)\n+      if (REGNO (x) >= (unsigned) regs->num)\n \treturn 0;\n \n       if (regs->array[REGNO (x)].set_in_loop < 0)"}, {"sha": "d7618b90305d87d9880f8c235202a80f21c4ee75", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "patch": "@@ -1316,7 +1316,7 @@ push_operand (op, mode)\n #ifdef STACK_GROWS_DOWNWARD\n \t  || INTVAL (XEXP (XEXP (op, 1), 1)) != - (int) rounded_size\n #else\n-\t  || INTVAL (XEXP (XEXP (op, 1), 1)) != rounded_size\n+\t  || INTVAL (XEXP (XEXP (op, 1), 1)) != (int) rounded_size\n #endif\n \t  )\n \treturn 0;"}, {"sha": "4612f713bf422b70852fb2d175269eb1550a15d6", "filename": "gcc/regclass.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "patch": "@@ -459,7 +459,7 @@ init_reg_sets_1 ()\n \t;\n #endif\n #ifndef PIC_OFFSET_TABLE_REG_CALL_CLOBBERED\n-      else if (i == PIC_OFFSET_TABLE_REGNUM && fixed_regs[i])\n+      else if (i == (unsigned) PIC_OFFSET_TABLE_REGNUM && fixed_regs[i])\n \t;\n #endif\n       else if (0"}, {"sha": "866cd25038889ecdf8c2ae8283424af18e6f7885", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "patch": "@@ -5176,7 +5176,7 @@ update_auto_inc_notes (insn, regno, reloadnum)\n \n   for (link = REG_NOTES (insn); link; link = XEXP (link, 1))\n     if (REG_NOTE_KIND (link) == REG_INC\n-        && REGNO (XEXP (link, 0)) == regno)\n+        && (int) REGNO (XEXP (link, 0)) == regno)\n       push_replacement (&XEXP (link, 0), reloadnum, VOIDmode);\n #endif\n }"}, {"sha": "d4d13aad63cb1b38281f6cb7dc9b14e14413fb38", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "patch": "@@ -3984,7 +3984,7 @@ reload_as_needed (live_known)\n \t\t\t\t\t    REGNO (rld[i].reg_rtx))\n \t\t      /* Make sure it is the inc/dec pseudo, and not\n \t\t\t some other (e.g. output operand) pseudo.  */\n-\t\t      && (reg_reloaded_contents[REGNO (rld[i].reg_rtx)]\n+\t\t      && ((unsigned) reg_reloaded_contents[REGNO (rld[i].reg_rtx)]\n \t\t\t  == REGNO (XEXP (in_reg, 0))))\n \n \t\t    {\n@@ -4051,7 +4051,7 @@ reload_as_needed (live_known)\n \t\t\t\t\t\t REGNO (rld[i].reg_rtx))\n \t\t\t   /* Make sure it is the inc/dec pseudo, and not\n \t\t\t      some other (e.g. output operand) pseudo.  */\n-\t\t\t   && (reg_reloaded_contents[REGNO (rld[i].reg_rtx)]\n+\t\t\t   && ((unsigned) reg_reloaded_contents[REGNO (rld[i].reg_rtx)]\n \t\t\t       == REGNO (XEXP (in_reg, 0))))\n \t\t    {\n \t\t      SET_HARD_REG_BIT (reg_is_output_reload,\n@@ -6260,7 +6260,7 @@ emit_input_reload_insns (chain, rl, old, j)\n \t or memory.  */\n \n       if (oldequiv != 0\n-\t  && ((REGNO_REG_CLASS (regno) != rl->class\n+\t  && (((enum reg_class) REGNO_REG_CLASS (regno) != rl->class\n \t       && (REGISTER_MOVE_COST (mode, REGNO_REG_CLASS (regno),\n \t\t\t\t       rl->class)\n \t\t   >= MEMORY_MOVE_COST (mode, rl->class, 1)))"}, {"sha": "6f122c4d31b74271e309d440d3c7d0d319372bb8", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "patch": "@@ -1526,7 +1526,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n       if (i >= 0)\n         {\n \t  /* Clobbering the PIC register is an error */\n-\t  if ((unsigned) i == PIC_OFFSET_TABLE_REGNUM)\n+\t  if (i == (int) PIC_OFFSET_TABLE_REGNUM)\n \t    {\n \t      error (\"PIC register `%s' clobbered in `asm'\", regname);\n \t      return;"}, {"sha": "f3f9b5404f599bfc0b80e4c407fc90c9c58b4990", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5553705286d244d9cb6b6447ddb93d0ed6e5fa/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=fc5553705286d244d9cb6b6447ddb93d0ed6e5fa", "patch": "@@ -509,7 +509,7 @@ start_record_layout (t)\n #ifdef STRUCTURE_SIZE_BOUNDARY\n   /* Packed structures don't need to have minimum size.  */\n   if (! TYPE_PACKED (t))\n-    rli->record_align = MAX (rli->record_align, STRUCTURE_SIZE_BOUNDARY);\n+    rli->record_align = MAX (rli->record_align, (unsigned) STRUCTURE_SIZE_BOUNDARY);\n #endif\n \n   rli->offset = size_zero_node;"}]}