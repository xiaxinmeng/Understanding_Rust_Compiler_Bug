{"sha": "4636b850f65b40e23bb6f6c7db00adfdab2602da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYzNmI4NTBmNjViNDBlMjNiYjZmNmM3ZGIwMGFkZmRhYjI2MDJkYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-05-02T17:49:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-05-02T17:49:32Z"}, "message": "re PR regression/40001 (r146817 broke libgloss build for SPU)\n\n2009-05-02  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/40001\n\t* tree-ssa.c (execute_update_addresses_taken): Properly check\n\tif we can mark a variable DECL_GIMPLE_REG_P.\n\t* gimple.c (is_gimple_reg): Re-order check for DECL_GIMPLE_REG_P\n\tback to the end of the function.\n\t(is_gimple_reg_type): Remove complex type special casing.\n\t* gimplify.c (gimplify_bind_expr): Do not set DECL_GIMPLE_REG_P\n\tif not optimizing.\n\n\t* gcc.target/spu/pr40001.c: New testcase.\n\nFrom-SVN: r147064", "tree": {"sha": "63b674cab8c718bf17708549a9c54440fbe71c18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63b674cab8c718bf17708549a9c54440fbe71c18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4636b850f65b40e23bb6f6c7db00adfdab2602da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4636b850f65b40e23bb6f6c7db00adfdab2602da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4636b850f65b40e23bb6f6c7db00adfdab2602da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4636b850f65b40e23bb6f6c7db00adfdab2602da/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25195e82643714f6f73737cd51c217692acbe836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25195e82643714f6f73737cd51c217692acbe836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25195e82643714f6f73737cd51c217692acbe836"}], "stats": {"total": 68, "additions": 51, "deletions": 17}, "files": [{"sha": "d05e7cbda9765a42a0634f4fa890034c8dd59dda", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4636b850f65b40e23bb6f6c7db00adfdab2602da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4636b850f65b40e23bb6f6c7db00adfdab2602da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4636b850f65b40e23bb6f6c7db00adfdab2602da", "patch": "@@ -1,3 +1,14 @@\n+2009-05-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/40001\n+\t* tree-ssa.c (execute_update_addresses_taken): Properly check\n+\tif we can mark a variable DECL_GIMPLE_REG_P.\n+\t* gimple.c (is_gimple_reg): Re-order check for DECL_GIMPLE_REG_P\n+\tback to the end of the function.\n+\t(is_gimple_reg_type): Remove complex type special casing.\n+\t* gimplify.c (gimplify_bind_expr): Do not set DECL_GIMPLE_REG_P\n+\tif not optimizing.\n+\n 2009-05-02  Ben Elliston  <bje@au.ibm.com>\n \n \t* doc/collect2.texi (Collect2): Document search path behaviour"}, {"sha": "6ea1470df57881f64f5cc804b091321df46435cc", "filename": "gcc/gimple.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4636b850f65b40e23bb6f6c7db00adfdab2602da/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4636b850f65b40e23bb6f6c7db00adfdab2602da/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=4636b850f65b40e23bb6f6c7db00adfdab2602da", "patch": "@@ -2805,13 +2805,7 @@ is_gimple_id (tree t)\n bool\n is_gimple_reg_type (tree type)\n {\n-  /* In addition to aggregate types, we also exclude complex types if not\n-     optimizing because they can be subject to partial stores in GNU C by\n-     means of the __real__ and __imag__ operators and we cannot promote\n-     them to total stores (see gimplify_modify_expr_complex_part).  */\n-  return !(AGGREGATE_TYPE_P (type)\n-\t   || (TREE_CODE (type) == COMPLEX_TYPE && !optimize));\n-\n+  return !AGGREGATE_TYPE_P (type);\n }\n \n /* Return true if T is a non-aggregate register variable.  */\n@@ -2825,12 +2819,6 @@ is_gimple_reg (tree t)\n   if (!is_gimple_variable (t))\n     return false;\n \n-  /* Complex and vector values must have been put into SSA-like form.\n-     That is, no assignments to the individual components.  */\n-  if (TREE_CODE (TREE_TYPE (t)) == COMPLEX_TYPE\n-      || TREE_CODE (TREE_TYPE (t)) == VECTOR_TYPE)\n-    return DECL_GIMPLE_REG_P (t);\n-\n   if (!is_gimple_reg_type (TREE_TYPE (t)))\n     return false;\n \n@@ -2857,6 +2845,12 @@ is_gimple_reg (tree t)\n   if (TREE_CODE (t) == VAR_DECL && DECL_HARD_REGISTER (t))\n     return false;\n \n+  /* Complex and vector values must have been put into SSA-like form.\n+     That is, no assignments to the individual components.  */\n+  if (TREE_CODE (TREE_TYPE (t)) == COMPLEX_TYPE\n+      || TREE_CODE (TREE_TYPE (t)) == VECTOR_TYPE)\n+    return DECL_GIMPLE_REG_P (t);\n+\n   return true;\n }\n "}, {"sha": "24481d15c435a541e7afcd5f7ce8d084430e2b1b", "filename": "gcc/gimplify.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4636b850f65b40e23bb6f6c7db00adfdab2602da/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4636b850f65b40e23bb6f6c7db00adfdab2602da/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=4636b850f65b40e23bb6f6c7db00adfdab2602da", "patch": "@@ -1218,9 +1218,14 @@ gimplify_bind_expr (tree *expr_p, gimple_seq *pre_p)\n \n       /* Preliminarily mark non-addressed complex variables as eligible\n \t for promotion to gimple registers.  We'll transform their uses\n-\t as we find them.  */\n-      if ((TREE_CODE (TREE_TYPE (t)) == COMPLEX_TYPE\n-\t   || TREE_CODE (TREE_TYPE (t)) == VECTOR_TYPE)\n+\t as we find them.\n+\t We exclude complex types if not optimizing because they can be\n+\t subject to partial stores in GNU C by means of the __real__ and\n+\t __imag__ operators and we cannot promote them to total stores\n+\t (see gimplify_modify_expr_complex_part).  */\n+      if (optimize\n+\t  && (TREE_CODE (TREE_TYPE (t)) == COMPLEX_TYPE\n+\t      || TREE_CODE (TREE_TYPE (t)) == VECTOR_TYPE)\n \t  && !TREE_THIS_VOLATILE (t)\n \t  && (TREE_CODE (t) == VAR_DECL && !DECL_HARD_REGISTER (t))\n \t  && !needs_to_live_in_memory (t))"}, {"sha": "5fce794638f7b6ae3b88851b7e0cb4b076c0fb3a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4636b850f65b40e23bb6f6c7db00adfdab2602da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4636b850f65b40e23bb6f6c7db00adfdab2602da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4636b850f65b40e23bb6f6c7db00adfdab2602da", "patch": "@@ -1,3 +1,8 @@\n+2009-05-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/40001\n+\t* gcc.target/spu/pr40001.c: New testcase.\n+\n 2009-04-30  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* gcc.dg/ssp-1.c (__stack_chk_fail): Remove static."}, {"sha": "442f72d4fa85b0af41abae12019dd63205ff7ab3", "filename": "gcc/testsuite/gcc.target/spu/pr40001.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4636b850f65b40e23bb6f6c7db00adfdab2602da/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fpr40001.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4636b850f65b40e23bb6f6c7db00adfdab2602da/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fpr40001.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fpr40001.c?ref=4636b850f65b40e23bb6f6c7db00adfdab2602da", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+void *\n+sbrk (unsigned int increment)\n+{\n+  volatile register\n+      __attribute__ ((__spu_vector__)) unsigned int sp_r1 __asm__ (\"1\");\n+  unsigned int sps;\n+\n+  sps = __builtin_spu_extract (sp_r1, 0);\n+  if (sps - 4096 >= increment)\n+    return 0;\n+  else\n+    return ((void *) -1);\n+}\n+"}, {"sha": "edbae39cd0ec62b3189b160eaeb5e52c8d072b00", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4636b850f65b40e23bb6f6c7db00adfdab2602da/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4636b850f65b40e23bb6f6c7db00adfdab2602da/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=4636b850f65b40e23bb6f6c7db00adfdab2602da", "patch": "@@ -1573,7 +1573,9 @@ execute_update_addresses_taken (bool do_optimize)\n \tif (!DECL_GIMPLE_REG_P (var)\n \t    && !bitmap_bit_p (not_reg_needs, DECL_UID (var))\n \t    && (TREE_CODE (TREE_TYPE (var)) == COMPLEX_TYPE\n-\t\t|| TREE_CODE (TREE_TYPE (var)) == VECTOR_TYPE))\n+\t\t|| TREE_CODE (TREE_TYPE (var)) == VECTOR_TYPE)\n+\t    && !TREE_THIS_VOLATILE (var)\n+\t    && (TREE_CODE (var) != VAR_DECL || !DECL_HARD_REGISTER (var)))\n \t  {\n \t    DECL_GIMPLE_REG_P (var) = 1;\n \t    mark_sym_for_renaming (var);"}]}