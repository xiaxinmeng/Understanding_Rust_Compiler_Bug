{"sha": "914653a2a71c580d57010e189205a7deb6422125", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE0NjUzYTJhNzFjNTgwZDU3MDEwZTE4OTIwNWE3ZGViNjQyMjEyNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-24T01:29:29Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-24T01:29:29Z"}, "message": "cp-tree.h (language_function): Add cannot_inline.\n\n\t* cp-tree.h (language_function): Add cannot_inline.\n\t* decl.c (start_function): Restore current_function_cannot_inline\n\tfrom the saved value.\n\t(save_function_data): Save current_function_cannot_inline.\n\t* decl2.c (start_objects): Change prototype.  Build the function\n\tin function-at-a-time mode.\n\t(finish_objects): Likewise.\n\t(generate_ctor_or_dtor_function): Adjust accordingly.\n\nFrom-SVN: r29646", "tree": {"sha": "20f6c3851fcc0e5a0de931ee83b0f29278299cf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20f6c3851fcc0e5a0de931ee83b0f29278299cf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/914653a2a71c580d57010e189205a7deb6422125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/914653a2a71c580d57010e189205a7deb6422125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/914653a2a71c580d57010e189205a7deb6422125", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/914653a2a71c580d57010e189205a7deb6422125/comments", "author": null, "committer": null, "parents": [{"sha": "0fa5e05c2f36dda5b06b259779afc7867b0da9f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa5e05c2f36dda5b06b259779afc7867b0da9f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fa5e05c2f36dda5b06b259779afc7867b0da9f7"}], "stats": {"total": 61, "additions": 42, "deletions": 19}, "files": [{"sha": "29aaa444e0f5a9537f2bd251b56c6f0226ba0997", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/914653a2a71c580d57010e189205a7deb6422125/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/914653a2a71c580d57010e189205a7deb6422125/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=914653a2a71c580d57010e189205a7deb6422125", "patch": "@@ -1,5 +1,14 @@\n 1999-09-23  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.h (language_function): Add cannot_inline.\n+\t* decl.c (start_function): Restore current_function_cannot_inline\n+\tfrom the saved value.\n+\t(save_function_data): Save current_function_cannot_inline.\n+\t* decl2.c (start_objects): Change prototype.  Build the function\n+\tin function-at-a-time mode.\n+\t(finish_objects): Likewise.\n+\t(generate_ctor_or_dtor_function): Adjust accordingly.\n+\t\n \t* cp-tree.h (DECL_ANON_UNION_ELEMS): New macro.\n \t* decl2.c (finish_anon_union): Set DECL_ANON_UNION_ELEMS.\n \tDon't call expand_anon_union_decl here"}, {"sha": "cb46071ee4be68be2838fb0d43a2a1a0aa93f11b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/914653a2a71c580d57010e189205a7deb6422125/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/914653a2a71c580d57010e189205a7deb6422125/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=914653a2a71c580d57010e189205a7deb6422125", "patch": "@@ -678,6 +678,8 @@ struct language_function\n \n   struct named_label_list *x_named_label_uses;\n   struct binding_level *bindings;\n+\n+  const char *cannot_inline;\n };\n \n /* The current C++-specific per-function global variables.  */"}, {"sha": "70b8e1156392e5f4313631774110efd6fa2ad551", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/914653a2a71c580d57010e189205a7deb6422125/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/914653a2a71c580d57010e189205a7deb6422125/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=914653a2a71c580d57010e189205a7deb6422125", "patch": "@@ -12944,6 +12944,11 @@ start_function (declspecs, declarator, attrs, flags)\n \t already did semantic analysis.  */\n       current_function->x_whole_function_mode_p = 1;\n \n+      /* If we decided that we didn't want to inline this function,\n+\t make sure the back-end knows that.  */\n+      if (!current_function_cannot_inline)\n+\tcurrent_function_cannot_inline = cp_function_chain->cannot_inline;\n+\n       /* We don't need the saved data anymore.  */\n       free (DECL_SAVED_FUNCTION_DATA (decl1));\n       DECL_SAVED_FUNCTION_DATA (decl1) = NULL;\n@@ -13305,6 +13310,11 @@ save_function_data (decl)\n \n   /* When we get back here again, we will be expanding.  */\n   f->x_expanding_p = 1;\n+\n+  /* If we've already decided that we cannot inline this function, we\n+     must remember that fact when we actually go to expand the\n+     function.  */\n+  f->cannot_inline = current_function_cannot_inline;\n }\n \n /* At the end of every destructor we generate code to restore virtual"}, {"sha": "aed43747a2db412fddf5fdbc9a69a3a7a2a2dfde", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/914653a2a71c580d57010e189205a7deb6422125/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/914653a2a71c580d57010e189205a7deb6422125/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=914653a2a71c580d57010e189205a7deb6422125", "patch": "@@ -78,8 +78,8 @@ static tree ambiguous_decl PROTO((tree, tree, tree,int));\n static tree build_anon_union_vars PROTO((tree, tree*, int, int));\n static int acceptable_java_type PROTO((tree));\n static void output_vtable_inherit PROTO((tree));\n-static void start_objects PROTO((int, int));\n-static void finish_objects PROTO((int, int));\n+static tree start_objects PROTO((int, int));\n+static void finish_objects PROTO((int, int, tree));\n static tree merge_functions PROTO((tree, tree));\n static tree decl_namespace PROTO((tree));\n static tree validate_nonmember_using_decl PROTO((tree, tree *, tree *));\n@@ -2758,11 +2758,12 @@ get_sentry (base)\n /* Start the process of running a particular set of global constructors\n    or destructors.  Subroutine of do_[cd]tors.  */\n \n-static void\n+static tree\n start_objects (method_type, initp)\n      int method_type, initp;\n {\n   tree fnname;\n+  tree body;\n   char type[10];\n \n   /* Make ctor or dtor function.  METHOD_TYPE may be 'I' or 'D'.  */\n@@ -2787,7 +2788,7 @@ start_objects (method_type, initp)\n   start_function (void_list_node,\n \t\t  make_call_declarator (fnname, void_list_node, NULL_TREE,\n \t\t\t\t\tNULL_TREE),\n-\t\t  NULL_TREE, SF_DEFAULT | SF_EXPAND);\n+\t\t  NULL_TREE, SF_DEFAULT);\n \n #if defined(ASM_OUTPUT_CONSTRUCTOR) && defined(ASM_OUTPUT_DESTRUCTOR)\n   /* It can be a static function as long as collect2 does not have\n@@ -2798,35 +2799,35 @@ start_objects (method_type, initp)\n   /* Mark this declaration as used to avoid spurious warnings.  */\n   TREE_USED (current_function_decl) = 1;\n \n-  store_parm_decls ();\n-  pushlevel (0);\n-  clear_last_expr ();\n-  push_momentary ();\n-  expand_start_bindings (0);\n+  body = begin_compound_stmt (/*has_no_scope=*/0);\n \n   /* We cannot allow these functions to be elided, even if they do not\n      have external linkage.  And, there's no point in deferring\n      copmilation of thes functions; they're all going to have to be\n      out anyhow.  */\n   current_function_cannot_inline\n     = \"static constructors and destructors cannot be inlined\";\n+\n+  return body;\n }\n \n /* Finish the process of running a particular set of global constructors\n    or destructors.  Subroutine of do_[cd]tors.  */\n \n static void\n-finish_objects (method_type, initp)\n+finish_objects (method_type, initp, body)\n      int method_type, initp;\n+     tree body;\n {\n-  char *fnname = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n+  char *fnname;\n+  tree fn;\n \n   /* Finish up. */\n-  expand_end_bindings (getdecls (), 1, 0);\n-  poplevel (1, 0, 0);\n-  pop_momentary ();\n-  finish_function (lineno, 0);\n+  finish_compound_stmt(/*has_no_scope=*/0, body);\n+  fn = finish_function (lineno, 0);\n+  expand_body (fn);\n \n+  fnname = XSTR (XEXP (DECL_RTL (fn), 0), 0);\n   if (initp == DEFAULT_INIT_PRIORITY)\n     {\n       if (method_type == 'I')\n@@ -3338,6 +3339,7 @@ generate_ctor_or_dtor_function (constructor_p, priority)\n {\n   char function_key;\n   tree arguments;\n+  tree body;\n   size_t i;\n \n   /* We use `I' to indicate initialization and `D' to indicate\n@@ -3348,7 +3350,7 @@ generate_ctor_or_dtor_function (constructor_p, priority)\n     function_key = 'D';\n \n   /* Begin the function.  */\n-  start_objects (function_key, priority);\n+  body = start_objects (function_key, priority);\n \n   /* Call the static storage duration function with appropriate\n      arguments.  */\n@@ -3358,7 +3360,7 @@ generate_ctor_or_dtor_function (constructor_p, priority)\n \t\t\t     NULL_TREE);\n       arguments = tree_cons (NULL_TREE, build_int_2 (constructor_p, 0),\n \t\t\t     arguments);\n-      expand_expr_stmt (build_function_call (VARRAY_TREE (ssdf_decls, i),\n+      finish_expr_stmt (build_function_call (VARRAY_TREE (ssdf_decls, i),\n \t\t\t\t\t     arguments));\n     }\n \n@@ -3372,11 +3374,11 @@ generate_ctor_or_dtor_function (constructor_p, priority)\n       for (fns = constructor_p ? static_ctors : static_dtors; \n \t   fns;\n \t   fns = TREE_CHAIN (fns))\n-\texpand_expr_stmt (build_function_call (TREE_VALUE (fns), NULL_TREE));\n+\tfinish_expr_stmt (build_function_call (TREE_VALUE (fns), NULL_TREE));\n     }\n \n   /* Close out the function.  */\n-  finish_objects (function_key, priority);\n+  finish_objects (function_key, priority, body);\n }\n \n /* Generate constructor and destructor functions for the priority"}]}