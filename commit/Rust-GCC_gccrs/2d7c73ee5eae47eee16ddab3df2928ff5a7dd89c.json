{"sha": "2d7c73ee5eae47eee16ddab3df2928ff5a7dd89c", "node_id": "C_kwDOANBUbNoAKDJkN2M3M2VlNWVhZTQ3ZWVlMTZkZGFiM2RmMjkyOGZmNWE3ZGQ4OWM", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wilco.dijkstra@arm.com", "date": "2022-12-12T15:44:03Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco.dijkstra@arm.com", "date": "2022-12-12T16:31:31Z"}, "message": "AArch64: Enable TARGET_CONST_ANCHOR\n\nEnable TARGET_CONST_ANCHOR to allow complex constants to be created via\nimmediate add/sub.  Use a 24-bit range as that enables a 3 or 4-instruction\nimmediate to be replaced by 2 add/sub instructions.  Fix the costing of\nadd/sub to support 24-bit and 12-bit shifted immediates.\nThe generated code for the testcase is now the same or better than LLVM.\nIt also results in a small codesize reduction on SPEC.\n\ngcc/\n\t* config/aarch64/aarch64.cc (aarch64_rtx_costs): Add correct costs\n\tfor 24-bit and 12-bit shifted immediate add/sub.\n\t(TARGET_CONST_ANCHOR): Define.\n\t* config/aarch64/predicates.md (aarch64_pluslong_immediate):\n\tFix range check.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/movk_3.c: New test.", "tree": {"sha": "5c2bfbe863941262f20c0e80b6c32e997def3d88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c2bfbe863941262f20c0e80b6c32e997def3d88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d7c73ee5eae47eee16ddab3df2928ff5a7dd89c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7c73ee5eae47eee16ddab3df2928ff5a7dd89c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d7c73ee5eae47eee16ddab3df2928ff5a7dd89c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7c73ee5eae47eee16ddab3df2928ff5a7dd89c/comments", "author": {"login": "Wilco1", "id": 58446312, "node_id": "MDQ6VXNlcjU4NDQ2MzEy", "avatar_url": "https://avatars.githubusercontent.com/u/58446312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wilco1", "html_url": "https://github.com/Wilco1", "followers_url": "https://api.github.com/users/Wilco1/followers", "following_url": "https://api.github.com/users/Wilco1/following{/other_user}", "gists_url": "https://api.github.com/users/Wilco1/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wilco1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wilco1/subscriptions", "organizations_url": "https://api.github.com/users/Wilco1/orgs", "repos_url": "https://api.github.com/users/Wilco1/repos", "events_url": "https://api.github.com/users/Wilco1/events{/privacy}", "received_events_url": "https://api.github.com/users/Wilco1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Wilco1", "id": 58446312, "node_id": "MDQ6VXNlcjU4NDQ2MzEy", "avatar_url": "https://avatars.githubusercontent.com/u/58446312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wilco1", "html_url": "https://github.com/Wilco1", "followers_url": "https://api.github.com/users/Wilco1/followers", "following_url": "https://api.github.com/users/Wilco1/following{/other_user}", "gists_url": "https://api.github.com/users/Wilco1/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wilco1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wilco1/subscriptions", "organizations_url": "https://api.github.com/users/Wilco1/orgs", "repos_url": "https://api.github.com/users/Wilco1/repos", "events_url": "https://api.github.com/users/Wilco1/events{/privacy}", "received_events_url": "https://api.github.com/users/Wilco1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d9db4bdd458a4b526f59e4bc5bbd549d3861cea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d9db4bdd458a4b526f59e4bc5bbd549d3861cea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d9db4bdd458a4b526f59e4bc5bbd549d3861cea"}], "stats": {"total": 71, "additions": 70, "deletions": 1}, "files": [{"sha": "73515c174fa4fe7830527e7eabd91c4648130ff4", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7c73ee5eae47eee16ddab3df2928ff5a7dd89c/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7c73ee5eae47eee16ddab3df2928ff5a7dd89c/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=2d7c73ee5eae47eee16ddab3df2928ff5a7dd89c", "patch": "@@ -14237,6 +14237,16 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n \t    return true;\n \t  }\n \n+\tif (aarch64_pluslong_immediate (op1, mode))\n+\t  {\n+\t    /* 24-bit add in 2 instructions or 12-bit shifted add.  */\n+\t    if ((INTVAL (op1) & 0xfff) != 0)\n+\t      *cost += COSTS_N_INSNS (1);\n+\n+\t    *cost += rtx_cost (op0, mode, PLUS, 0, speed);\n+\t    return true;\n+\t  }\n+\n \t*cost += rtx_cost (op1, mode, PLUS, 1, speed);\n \n \t/* Look for ADD (extended register).  */\n@@ -28091,6 +28101,9 @@ aarch64_libgcc_floating_mode_supported_p\n #undef TARGET_HAVE_SHADOW_CALL_STACK\n #define TARGET_HAVE_SHADOW_CALL_STACK true\n \n+#undef TARGET_CONST_ANCHOR\n+#define TARGET_CONST_ANCHOR 0x1000000\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-aarch64.h\""}, {"sha": "ff7f73d3f300bdb4727b9a34307e5d34b4bf0294", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7c73ee5eae47eee16ddab3df2928ff5a7dd89c/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7c73ee5eae47eee16ddab3df2928ff5a7dd89c/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=2d7c73ee5eae47eee16ddab3df2928ff5a7dd89c", "patch": "@@ -146,7 +146,7 @@\n \n (define_predicate \"aarch64_pluslong_immediate\"\n   (and (match_code \"const_int\")\n-       (match_test \"(INTVAL (op) < 0xffffff && INTVAL (op) > -0xffffff)\")))\n+       (match_test \"IN_RANGE (INTVAL (op), -0xffffff, 0xffffff)\")))\n \n (define_predicate \"aarch64_sminmax_immediate\"\n   (and (match_code \"const_int\")"}, {"sha": "9e8c0c42671bef3f63028b4e51d0bd78c9903994", "filename": "gcc/testsuite/gcc.target/aarch64/movk_3.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7c73ee5eae47eee16ddab3df2928ff5a7dd89c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovk_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7c73ee5eae47eee16ddab3df2928ff5a7dd89c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovk_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovk_3.c?ref=2d7c73ee5eae47eee16ddab3df2928ff5a7dd89c", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+\n+\n+/* 2 MOV */\n+void f16 (long *p)\n+{\n+  p[0] = 0x1234;\n+  p[2] = 0x1235;\n+}\n+\n+/* MOV, MOVK and ADD */\n+void f32_1 (long *p)\n+{\n+  p[0] = 0x12345678;\n+  p[2] = 0x12345678 + 0xfff;\n+}\n+\n+/* 2 MOV, 2 MOVK */\n+void f32_2 (long *p)\n+{\n+  p[0] = 0x12345678;\n+  p[2] = 0x12345678 + 0x555555;\n+}\n+\n+/* MOV, MOVK and ADD */\n+void f32_3 (long *p)\n+{\n+  p[0] = 0x12345678;\n+  p[2] = 0x12345678 + 0x999000;\n+}\n+\n+/* MOV, 2 MOVK and ADD */\n+void f48_1 (long *p)\n+{\n+  p[0] = 0x123456789abc;\n+  p[2] = 0x123456789abc + 0xfff;\n+}\n+\n+/* MOV, 2 MOVK and 2 ADD */\n+void f48_2 (long *p)\n+{\n+  p[0] = 0x123456789abc;\n+  p[2] = 0x123456789abc + 0x666666;\n+}\n+\n+/* 2 MOV, 4 MOVK */\n+void f48_3 (long *p)\n+{\n+  p[0] = 0x123456789abc;\n+  p[2] = 0x123456789abc + 0x1666666;\n+}\n+\n+/* { dg-final { scan-assembler-times \"mov\\tx\\[0-9\\]+, \\[0-9\\]+\" 10 } } */\n+/* { dg-final { scan-assembler-times \"movk\\tx\\[0-9\\]+, 0x\\[0-9a-f\\]+\" 12 } } */\n+/* { dg-final { scan-assembler-times \"add\\tx\\[0-9\\]+, x\\[0-9\\]+, \\[0-9\\]+\" 5 } } */"}]}