{"sha": "d31b87976f1722476ae6bfa8e6bcbf78f5350867", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMxYjg3OTc2ZjE3MjI0NzZhZTZiZmE4ZTZiY2JmNzhmNTM1MDg2Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-01-17T01:23:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-01-17T01:23:28Z"}, "message": "re PR libstdc++/60940 (general operations on atomic types do not work with atomic integral typedefs)\n\n\tPR libstdc++/60940\n\t* include/bits/atomic_base.h: Remove atomic integral typedefs as\n\tsynonyms for __atomic_base<int> etc.\n\t* include/std/atomic: Make atomic_int a synonym for atomic<int> and\n\tlikewise for all atomic integral types.\n\t* testsuite/29_atomics/atomic_integral/cons/copy_list.cc: New.\n\t* testsuite/29_atomics/atomic/60695.cc: Adjust dg-error line number.\n\nFrom-SVN: r219790", "tree": {"sha": "c642bf970c37532ec353e2a74b686069564d3d9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c642bf970c37532ec353e2a74b686069564d3d9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d31b87976f1722476ae6bfa8e6bcbf78f5350867", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d31b87976f1722476ae6bfa8e6bcbf78f5350867", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d31b87976f1722476ae6bfa8e6bcbf78f5350867", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d31b87976f1722476ae6bfa8e6bcbf78f5350867/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "340c79045e35c6bceeb60afb30b1001c238c93b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/340c79045e35c6bceeb60afb30b1001c238c93b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/340c79045e35c6bceeb60afb30b1001c238c93b6"}], "stats": {"total": 374, "additions": 204, "deletions": 170}, "files": [{"sha": "1dc68e7f5e0bcf6992811cf9aad4aea73a40e139", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d31b87976f1722476ae6bfa8e6bcbf78f5350867/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d31b87976f1722476ae6bfa8e6bcbf78f5350867/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d31b87976f1722476ae6bfa8e6bcbf78f5350867", "patch": "@@ -1,3 +1,13 @@\n+2015-01-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/60940\n+\t* include/bits/atomic_base.h: Remove atomic integral typedefs as\n+\tsynonyms for __atomic_base<int> etc.\n+\t* include/std/atomic: Make atomic_int a synonym for atomic<int> and\n+\tlikewise for all atomic integral types.\n+\t* testsuite/29_atomics/atomic_integral/cons/copy_list.cc: New.\n+\t* testsuite/29_atomics/atomic/60695.cc: Adjust dg-error line number.\n+\n 2015-01-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/56785"}, {"sha": "5e610f1c3ee2233cd04c56776cb421dd63760ff6", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 0, "deletions": 114, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d31b87976f1722476ae6bfa8e6bcbf78f5350867/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d31b87976f1722476ae6bfa8e6bcbf78f5350867/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=d31b87976f1722476ae6bfa8e6bcbf78f5350867", "patch": "@@ -119,120 +119,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _IntTp>\n     struct __atomic_base;\n \n-  /// atomic_char\n-  typedef __atomic_base<char>  \t       \t\tatomic_char;\n-\n-  /// atomic_schar\n-  typedef __atomic_base<signed char>\t     \tatomic_schar;\n-\n-  /// atomic_uchar\n-  typedef __atomic_base<unsigned char>\t\tatomic_uchar;\n-\n-  /// atomic_short\n-  typedef __atomic_base<short>\t\t\tatomic_short;\n-\n-  /// atomic_ushort\n-  typedef __atomic_base<unsigned short>\t \tatomic_ushort;\n-\n-  /// atomic_int\n-  typedef __atomic_base<int>  \t       \t\tatomic_int;\n-\n-  /// atomic_uint\n-  typedef __atomic_base<unsigned int>\t     \tatomic_uint;\n-\n-  /// atomic_long\n-  typedef __atomic_base<long>  \t       \t\tatomic_long;\n-\n-  /// atomic_ulong\n-  typedef __atomic_base<unsigned long>\t\tatomic_ulong;\n-\n-  /// atomic_llong\n-  typedef __atomic_base<long long>  \t\tatomic_llong;\n-\n-  /// atomic_ullong\n-  typedef __atomic_base<unsigned long long> \tatomic_ullong;\n-\n-  /// atomic_wchar_t\n-  typedef __atomic_base<wchar_t>  \t\tatomic_wchar_t;\n-\n-  /// atomic_char16_t\n-  typedef __atomic_base<char16_t>  \t\tatomic_char16_t;\n-\n-  /// atomic_char32_t\n-  typedef __atomic_base<char32_t>  \t\tatomic_char32_t;\n-\n-  /// atomic_char32_t\n-  typedef __atomic_base<char32_t>  \t\tatomic_char32_t;\n-\n-\n-  /// atomic_int_least8_t\n-  typedef __atomic_base<int_least8_t>  \t\tatomic_int_least8_t;\n-\n-  /// atomic_uint_least8_t\n-  typedef __atomic_base<uint_least8_t>\t       \tatomic_uint_least8_t;\n-\n-  /// atomic_int_least16_t\n-  typedef __atomic_base<int_least16_t>\t       \tatomic_int_least16_t;\n-\n-  /// atomic_uint_least16_t\n-  typedef __atomic_base<uint_least16_t>\t       \tatomic_uint_least16_t;\n-\n-  /// atomic_int_least32_t\n-  typedef __atomic_base<int_least32_t>\t       \tatomic_int_least32_t;\n-\n-  /// atomic_uint_least32_t\n-  typedef __atomic_base<uint_least32_t>\t       \tatomic_uint_least32_t;\n-\n-  /// atomic_int_least64_t\n-  typedef __atomic_base<int_least64_t>\t       \tatomic_int_least64_t;\n-\n-  /// atomic_uint_least64_t\n-  typedef __atomic_base<uint_least64_t>\t       \tatomic_uint_least64_t;\n-\n-\n-  /// atomic_int_fast8_t\n-  typedef __atomic_base<int_fast8_t>  \t\tatomic_int_fast8_t;\n-\n-  /// atomic_uint_fast8_t\n-  typedef __atomic_base<uint_fast8_t>\t      \tatomic_uint_fast8_t;\n-\n-  /// atomic_int_fast16_t\n-  typedef __atomic_base<int_fast16_t>\t      \tatomic_int_fast16_t;\n-\n-  /// atomic_uint_fast16_t\n-  typedef __atomic_base<uint_fast16_t>\t      \tatomic_uint_fast16_t;\n-\n-  /// atomic_int_fast32_t\n-  typedef __atomic_base<int_fast32_t>\t      \tatomic_int_fast32_t;\n-\n-  /// atomic_uint_fast32_t\n-  typedef __atomic_base<uint_fast32_t>\t      \tatomic_uint_fast32_t;\n-\n-  /// atomic_int_fast64_t\n-  typedef __atomic_base<int_fast64_t>\t      \tatomic_int_fast64_t;\n-\n-  /// atomic_uint_fast64_t\n-  typedef __atomic_base<uint_fast64_t>\t      \tatomic_uint_fast64_t;\n-\n-\n-  /// atomic_intptr_t\n-  typedef __atomic_base<intptr_t>  \t       \tatomic_intptr_t;\n-\n-  /// atomic_uintptr_t\n-  typedef __atomic_base<uintptr_t>  \t       \tatomic_uintptr_t;\n-\n-  /// atomic_size_t\n-  typedef __atomic_base<size_t>\t \t       \tatomic_size_t;\n-\n-  /// atomic_intmax_t\n-  typedef __atomic_base<intmax_t>  \t       \tatomic_intmax_t;\n-\n-  /// atomic_uintmax_t\n-  typedef __atomic_base<uintmax_t>  \t       \tatomic_uintmax_t;\n-\n-  /// atomic_ptrdiff_t\n-  typedef __atomic_base<ptrdiff_t>  \t       \tatomic_ptrdiff_t;\n-\n \n #define ATOMIC_VAR_INIT(_VI) { _VI }\n "}, {"sha": "43cf4f339fd83a89977a969187662eef50bba9ad", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 155, "deletions": 55, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d31b87976f1722476ae6bfa8e6bcbf78f5350867/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d31b87976f1722476ae6bfa8e6bcbf78f5350867/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=d31b87976f1722476ae6bfa8e6bcbf78f5350867", "patch": "@@ -49,21 +49,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n-  /// atomic_bool\n+  template<typename _Tp>\n+    struct atomic;\n+\n+  /// atomic<bool>\n   // NB: No operators or fetch-operations for this type.\n-  struct atomic_bool\n+  template<>\n+  struct atomic<bool>\n   {\n   private:\n     __atomic_base<bool>\t_M_base;\n \n   public:\n-    atomic_bool() noexcept = default;\n-    ~atomic_bool() noexcept = default;\n-    atomic_bool(const atomic_bool&) = delete;\n-    atomic_bool& operator=(const atomic_bool&) = delete;\n-    atomic_bool& operator=(const atomic_bool&) volatile = delete;\n+    atomic() noexcept = default;\n+    ~atomic() noexcept = default;\n+    atomic(const atomic&) = delete;\n+    atomic& operator=(const atomic&) = delete;\n+    atomic& operator=(const atomic&) volatile = delete;\n \n-    constexpr atomic_bool(bool __i) noexcept : _M_base(__i) { }\n+    constexpr atomic(bool __i) noexcept : _M_base(__i) { }\n \n     bool\n     operator=(bool __i) noexcept\n@@ -485,31 +489,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n \n-  /// Explicit specialization for bool.\n-  template<>\n-    struct atomic<bool> : public atomic_bool\n-    {\n-      typedef bool \t\t\t__integral_type;\n-      typedef atomic_bool \t\t__base_type;\n-\n-      atomic() noexcept = default;\n-      ~atomic() noexcept = default;\n-      atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n-      atomic& operator=(const atomic&) volatile = delete;\n-\n-      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }\n-\n-      using __base_type::operator __integral_type;\n-      using __base_type::operator=;\n-    };\n-\n   /// Explicit specialization for char.\n   template<>\n-    struct atomic<char> : public atomic_char\n+    struct atomic<char> : __atomic_base<char>\n     {\n       typedef char \t\t\t__integral_type;\n-      typedef atomic_char \t\t__base_type;\n+      typedef __atomic_base<char> \t__base_type;\n \n       atomic() noexcept = default;\n       ~atomic() noexcept = default;\n@@ -525,10 +510,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Explicit specialization for signed char.\n   template<>\n-    struct atomic<signed char> : public atomic_schar\n+    struct atomic<signed char> : __atomic_base<signed char>\n     {\n       typedef signed char \t\t__integral_type;\n-      typedef atomic_schar \t\t__base_type;\n+      typedef __atomic_base<signed char> \t__base_type;\n \n       atomic() noexcept= default;\n       ~atomic() noexcept = default;\n@@ -544,10 +529,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Explicit specialization for unsigned char.\n   template<>\n-    struct atomic<unsigned char> : public atomic_uchar\n+    struct atomic<unsigned char> : __atomic_base<unsigned char>\n     {\n       typedef unsigned char \t\t__integral_type;\n-      typedef atomic_uchar \t\t__base_type;\n+      typedef __atomic_base<unsigned char> \t__base_type;\n \n       atomic() noexcept= default;\n       ~atomic() noexcept = default;\n@@ -563,10 +548,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Explicit specialization for short.\n   template<>\n-    struct atomic<short> : public atomic_short\n+    struct atomic<short> : __atomic_base<short>\n     {\n       typedef short \t\t\t__integral_type;\n-      typedef atomic_short \t\t__base_type;\n+      typedef __atomic_base<short> \t\t__base_type;\n \n       atomic() noexcept = default;\n       ~atomic() noexcept = default;\n@@ -582,10 +567,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Explicit specialization for unsigned short.\n   template<>\n-    struct atomic<unsigned short> : public atomic_ushort\n+    struct atomic<unsigned short> : __atomic_base<unsigned short>\n     {\n       typedef unsigned short \t      \t__integral_type;\n-      typedef atomic_ushort \t\t__base_type;\n+      typedef __atomic_base<unsigned short> \t\t__base_type;\n \n       atomic() noexcept = default;\n       ~atomic() noexcept = default;\n@@ -601,10 +586,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Explicit specialization for int.\n   template<>\n-    struct atomic<int> : atomic_int\n+    struct atomic<int> : __atomic_base<int>\n     {\n       typedef int \t\t\t__integral_type;\n-      typedef atomic_int \t\t__base_type;\n+      typedef __atomic_base<int> \t\t__base_type;\n \n       atomic() noexcept = default;\n       ~atomic() noexcept = default;\n@@ -620,10 +605,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Explicit specialization for unsigned int.\n   template<>\n-    struct atomic<unsigned int> : public atomic_uint\n+    struct atomic<unsigned int> : __atomic_base<unsigned int>\n     {\n       typedef unsigned int\t\t__integral_type;\n-      typedef atomic_uint \t\t__base_type;\n+      typedef __atomic_base<unsigned int> \t__base_type;\n \n       atomic() noexcept = default;\n       ~atomic() noexcept = default;\n@@ -639,10 +624,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Explicit specialization for long.\n   template<>\n-    struct atomic<long> : public atomic_long\n+    struct atomic<long> : __atomic_base<long>\n     {\n       typedef long \t\t\t__integral_type;\n-      typedef atomic_long \t\t__base_type;\n+      typedef __atomic_base<long> \t__base_type;\n \n       atomic() noexcept = default;\n       ~atomic() noexcept = default;\n@@ -658,10 +643,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Explicit specialization for unsigned long.\n   template<>\n-    struct atomic<unsigned long> : public atomic_ulong\n+    struct atomic<unsigned long> : __atomic_base<unsigned long>\n     {\n       typedef unsigned long \t\t__integral_type;\n-      typedef atomic_ulong \t\t__base_type;\n+      typedef __atomic_base<unsigned long> \t__base_type;\n \n       atomic() noexcept = default;\n       ~atomic() noexcept = default;\n@@ -677,10 +662,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Explicit specialization for long long.\n   template<>\n-    struct atomic<long long> : public atomic_llong\n+    struct atomic<long long> : __atomic_base<long long>\n     {\n       typedef long long \t\t__integral_type;\n-      typedef atomic_llong \t\t__base_type;\n+      typedef __atomic_base<long long> \t\t__base_type;\n \n       atomic() noexcept = default;\n       ~atomic() noexcept = default;\n@@ -696,10 +681,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Explicit specialization for unsigned long long.\n   template<>\n-    struct atomic<unsigned long long> : public atomic_ullong\n+    struct atomic<unsigned long long> : __atomic_base<unsigned long long>\n     {\n       typedef unsigned long long       \t__integral_type;\n-      typedef atomic_ullong \t\t__base_type;\n+      typedef __atomic_base<unsigned long long> \t__base_type;\n \n       atomic() noexcept = default;\n       ~atomic() noexcept = default;\n@@ -715,10 +700,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Explicit specialization for wchar_t.\n   template<>\n-    struct atomic<wchar_t> : public atomic_wchar_t\n+    struct atomic<wchar_t> : __atomic_base<wchar_t>\n     {\n       typedef wchar_t \t\t\t__integral_type;\n-      typedef atomic_wchar_t \t\t__base_type;\n+      typedef __atomic_base<wchar_t> \t__base_type;\n \n       atomic() noexcept = default;\n       ~atomic() noexcept = default;\n@@ -734,10 +719,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Explicit specialization for char16_t.\n   template<>\n-    struct atomic<char16_t> : public atomic_char16_t\n+    struct atomic<char16_t> : __atomic_base<char16_t>\n     {\n       typedef char16_t \t\t\t__integral_type;\n-      typedef atomic_char16_t \t\t__base_type;\n+      typedef __atomic_base<char16_t> \t__base_type;\n \n       atomic() noexcept = default;\n       ~atomic() noexcept = default;\n@@ -753,10 +738,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Explicit specialization for char32_t.\n   template<>\n-    struct atomic<char32_t> : public atomic_char32_t\n+    struct atomic<char32_t> : __atomic_base<char32_t>\n     {\n       typedef char32_t \t\t\t__integral_type;\n-      typedef atomic_char32_t \t\t__base_type;\n+      typedef __atomic_base<char32_t> \t__base_type;\n \n       atomic() noexcept = default;\n       ~atomic() noexcept = default;\n@@ -771,6 +756,121 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n \n+  /// atomic_bool\n+  typedef atomic<bool>\t\t\tatomic_bool;\n+\n+  /// atomic_char\n+  typedef atomic<char>\t\t\tatomic_char;\n+\n+  /// atomic_schar\n+  typedef atomic<signed char>\t\tatomic_schar;\n+\n+  /// atomic_uchar\n+  typedef atomic<unsigned char>\t\tatomic_uchar;\n+\n+  /// atomic_short\n+  typedef atomic<short>\t\t\tatomic_short;\n+\n+  /// atomic_ushort\n+  typedef atomic<unsigned short>\tatomic_ushort;\n+\n+  /// atomic_int\n+  typedef atomic<int>\t\t\tatomic_int;\n+\n+  /// atomic_uint\n+  typedef atomic<unsigned int>\t\tatomic_uint;\n+\n+  /// atomic_long\n+  typedef atomic<long>\t\t\tatomic_long;\n+\n+  /// atomic_ulong\n+  typedef atomic<unsigned long>\t\tatomic_ulong;\n+\n+  /// atomic_llong\n+  typedef atomic<long long>\t\tatomic_llong;\n+\n+  /// atomic_ullong\n+  typedef atomic<unsigned long long>\tatomic_ullong;\n+\n+  /// atomic_wchar_t\n+  typedef atomic<wchar_t>\t\tatomic_wchar_t;\n+\n+  /// atomic_char16_t\n+  typedef atomic<char16_t>\t\tatomic_char16_t;\n+\n+  /// atomic_char32_t\n+  typedef atomic<char32_t>\t\tatomic_char32_t;\n+\n+\n+  /// atomic_int_least8_t\n+  typedef atomic<int_least8_t>\t\tatomic_int_least8_t;\n+\n+  /// atomic_uint_least8_t\n+  typedef atomic<uint_least8_t>\t\tatomic_uint_least8_t;\n+\n+  /// atomic_int_least16_t\n+  typedef atomic<int_least16_t>\t\tatomic_int_least16_t;\n+\n+  /// atomic_uint_least16_t\n+  typedef atomic<uint_least16_t>\tatomic_uint_least16_t;\n+\n+  /// atomic_int_least32_t\n+  typedef atomic<int_least32_t>\t\tatomic_int_least32_t;\n+\n+  /// atomic_uint_least32_t\n+  typedef atomic<uint_least32_t>\tatomic_uint_least32_t;\n+\n+  /// atomic_int_least64_t\n+  typedef atomic<int_least64_t>\t\tatomic_int_least64_t;\n+\n+  /// atomic_uint_least64_t\n+  typedef atomic<uint_least64_t>\tatomic_uint_least64_t;\n+\n+\n+  /// atomic_int_fast8_t\n+  typedef atomic<int_fast8_t>\t\tatomic_int_fast8_t;\n+\n+  /// atomic_uint_fast8_t\n+  typedef atomic<uint_fast8_t>\t\tatomic_uint_fast8_t;\n+\n+  /// atomic_int_fast16_t\n+  typedef atomic<int_fast16_t>\t\tatomic_int_fast16_t;\n+\n+  /// atomic_uint_fast16_t\n+  typedef atomic<uint_fast16_t>\t\tatomic_uint_fast16_t;\n+\n+  /// atomic_int_fast32_t\n+  typedef atomic<int_fast32_t>\t\tatomic_int_fast32_t;\n+\n+  /// atomic_uint_fast32_t\n+  typedef atomic<uint_fast32_t>\t\tatomic_uint_fast32_t;\n+\n+  /// atomic_int_fast64_t\n+  typedef atomic<int_fast64_t>\t\tatomic_int_fast64_t;\n+\n+  /// atomic_uint_fast64_t\n+  typedef atomic<uint_fast64_t>\t\tatomic_uint_fast64_t;\n+\n+\n+  /// atomic_intptr_t\n+  typedef atomic<intptr_t>\t\tatomic_intptr_t;\n+\n+  /// atomic_uintptr_t\n+  typedef atomic<uintptr_t>\t\tatomic_uintptr_t;\n+\n+  /// atomic_size_t\n+  typedef atomic<size_t>\t\tatomic_size_t;\n+\n+  /// atomic_intmax_t\n+  typedef atomic<intmax_t>\t\tatomic_intmax_t;\n+\n+  /// atomic_uintmax_t\n+  typedef atomic<uintmax_t>\t\tatomic_uintmax_t;\n+\n+  /// atomic_ptrdiff_t\n+  typedef atomic<ptrdiff_t>\t\tatomic_ptrdiff_t;\n+\n+\n   // Function definitions, atomic_flag operations.\n   inline bool\n   atomic_flag_test_and_set_explicit(atomic_flag* __a,"}, {"sha": "b59c6ba064ad2da77be7ff6b6ec7d00716ca54f5", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/60695.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d31b87976f1722476ae6bfa8e6bcbf78f5350867/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F60695.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d31b87976f1722476ae6bfa8e6bcbf78f5350867/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F60695.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F60695.cc?ref=d31b87976f1722476ae6bfa8e6bcbf78f5350867", "patch": "@@ -27,4 +27,4 @@ struct X {\n   char stuff[0]; // GNU extension, type has zero size\n };\n \n-std::atomic<X> a;  // { dg-error \"not supported\" \"\" { target *-*-* } 169 }\n+std::atomic<X> a;  // { dg-error \"not supported\" \"\" { target *-*-* } 173 }"}, {"sha": "ef31f7e5d87598416b117d6e66afd28304a8e7f9", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/60940.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d31b87976f1722476ae6bfa8e6bcbf78f5350867/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2F60940.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d31b87976f1722476ae6bfa8e6bcbf78f5350867/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2F60940.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2F60940.cc?ref=d31b87976f1722476ae6bfa8e6bcbf78f5350867", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <atomic>\n+#include <testsuite_common_types.h>\n+\n+struct Test\n+{\n+  template<typename T>\n+    void operator()(T&& t)\n+    {\n+      auto val = atomic_load(&t);\n+      atomic_store(&t, val);\n+    }\n+} test;\n+\n+int\n+main()\n+{\n+  __gnu_cxx::typelist::apply(test, __gnu_test::atomic_integrals::type());\n+}"}]}