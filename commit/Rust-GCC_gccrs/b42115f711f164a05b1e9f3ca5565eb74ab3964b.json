{"sha": "b42115f711f164a05b1e9f3ca5565eb74ab3964b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQyMTE1ZjcxMWYxNjRhMDViMWU5ZjNjYTU1NjVlYjc0YWIzOTY0Yg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-06-25T23:31:02Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-06-25T23:31:02Z"}, "message": "20000625-1.c, [...]: New tests.\n\n\t* gcc.dg/20000625-1.c, gcc.dg/20000625-2.c, gcc.dg/cpp-mi3.c:\n        New tests.\n\t* gcc.dg/cpp-mi3.def: New file.\n\n\t* gcc.dg/cpp-as1.c: Also test that macro expansion does not occur\n\tinside assertions.\n\t* gcc.dg/cpp-as2.c: Make error regexps match either old or new\n\tlexer's error messages.\n\t* gcc.dg/cpp-mi.c: Use -H and examine the output, don't try to\n\tdivine anything from the linemarkers.\n\t* gcc.dg/cpp-micc.h: Fix typo (declare int b, not int a);\n\t* gcc.dg/poison-1.c: Preprocess only; apply -fno-show-column.\n\nFrom-SVN: r34701", "tree": {"sha": "22d911bf83ddfad4e54cbaf87ad503050300c2c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22d911bf83ddfad4e54cbaf87ad503050300c2c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b42115f711f164a05b1e9f3ca5565eb74ab3964b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b42115f711f164a05b1e9f3ca5565eb74ab3964b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b42115f711f164a05b1e9f3ca5565eb74ab3964b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b42115f711f164a05b1e9f3ca5565eb74ab3964b/comments", "author": null, "committer": null, "parents": [{"sha": "1a03d9675e10d1d69754966c2b5329dc0d1d04db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a03d9675e10d1d69754966c2b5329dc0d1d04db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a03d9675e10d1d69754966c2b5329dc0d1d04db"}], "stats": {"total": 130, "additions": 109, "deletions": 21}, "files": [{"sha": "521e7eeb73f9952018c81c4ec037e274bc93e5f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b42115f711f164a05b1e9f3ca5565eb74ab3964b", "patch": "@@ -1,3 +1,18 @@\n+2000-06-25  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* gcc.dg/20000625-1.c, gcc.dg/20000625-2.c, gcc.dg/cpp-mi3.c:\n+        New tests.\n+\t* gcc.dg/cpp-mi3.def: New file.\n+\n+\t* gcc.dg/cpp-as1.c: Also test that macro expansion does not occur\n+\tinside assertions.\n+\t* gcc.dg/cpp-as2.c: Make error regexps match either old or new\n+\tlexer's error messages.\n+\t* gcc.dg/cpp-mi.c: Use -H and examine the output, don't try to\n+\tdivine anything from the linemarkers.\n+\t* gcc.dg/cpp-micc.h: Fix typo (declare int b, not int a);\n+\t* gcc.dg/poison-1.c: Preprocess only; apply -fno-show-column.\n+\n 2000-06-23  Geoffrey Keating  <geoffk@cygnus.com>\n \n \t* gcc.dg/20000623-1.c: New test."}, {"sha": "717ffb05e2863e2fc0be880e754d35f07f2e9a0d", "filename": "gcc/testsuite/gcc.dg/20000625-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2Fgcc.dg%2F20000625-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2Fgcc.dg%2F20000625-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20000625-1.c?ref=b42115f711f164a05b1e9f3ca5565eb74ab3964b", "patch": "@@ -0,0 +1,18 @@\n+/* Regression test for paste corner cases.  Distilled from\n+   syscall stub logic in glibc.  */\n+\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+\n+#define ENTRY(name)\tname##:\n+#define socket bind\n+\n+int\n+main(void)\n+{\n+  goto socket;\n+\n+  ENTRY(socket)\n+    return 0;\n+}"}, {"sha": "e9834503fd01ea0b73a23dc8fea7ee9ad8310bb3", "filename": "gcc/testsuite/gcc.dg/20000625-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2Fgcc.dg%2F20000625-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2Fgcc.dg%2F20000625-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20000625-2.c?ref=b42115f711f164a05b1e9f3ca5565eb74ab3964b", "patch": "@@ -0,0 +1,27 @@\n+/* More paste corner cases from glibc.  */\n+/* { dg-do run } */\n+\n+#define symbol_version(name, version) name##@##version\n+\n+#define str(x) xstr(x)\n+#define xstr(x) #x\n+\n+const char a[] = str(symbol_version(getrlimit, GLIBC_2.0));\n+const char b[] = str(getrlimit@GLIBC_2.0);\n+const char c[] = \"getrlimit@GLIBC_2.0\";\n+\n+#include <stdlib.h>\n+#include <string.h>\n+\n+int\n+main(void)\n+{\n+  if(strcmp(a, b))\n+    abort();\n+  if(strcmp(b, c))\n+    abort();\n+  if(strcmp(c, a))\n+    abort();\n+\n+  return 0;\n+}"}, {"sha": "ff7cc620bec9d3504a9524b8998834d6b0010ef7", "filename": "gcc/testsuite/gcc.dg/cpp-as1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-as1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-as1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-as1.c?ref=b42115f711f164a05b1e9f3ca5565eb74ab3964b", "patch": "@@ -2,6 +2,7 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n+#define def unused expansion\n #define fail  int fail\n \n #assert abc (def)"}, {"sha": "26d3aad02610b8b8729dd43d204e78bcded6643d", "filename": "gcc/testsuite/gcc.dg/cpp-as2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-as2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-as2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-as2.c?ref=b42115f711f164a05b1e9f3ca5565eb74ab3964b", "patch": "@@ -3,17 +3,17 @@\n /* { dg-options \"-fno-show-column\" } */\n \n #assert\t\t/* { dg-error \"without predicate\" \"assert w/o predicate\" } */\n-#assert %\t/* { dg-error \"not an identifier\" \"assert punctuation\" } */\n-#assert 12\t/* { dg-error \"not an identifier\" \"assert number\" } */\n-#assert abc\t/* { dg-error \"missing token-sequence\" \"assert w/o answer\" } */\n+#assert %\t/* { dg-error \"an identifier\" \"assert punctuation\" } */\n+#assert 12\t/* { dg-error \"an identifier\" \"assert number\" } */\n+#assert abc\t/* { dg-error \"missing\" \"assert w/o answer\" } */\n \n #if #\t\t/* { dg-error \"without predicate\" \"test w/o predicate\" } */\n #endif\n \n-#if #%\t\t/* { dg-error \"not an identifier\" \"test punctuation\" } */\n+#if #%\t\t/* { dg-error \"an identifier\" \"test punctuation\" } */\n #endif\n \n-#if #12\t\t/* { dg-error \"not an identifier\" \"test number\" } */\n+#if #12\t\t/* { dg-error \"an identifier\" \"test number\" } */\n #endif\n \n #if #abc"}, {"sha": "3d05587ddb211c7d72a743c90d6170750ee1aa9b", "filename": "gcc/testsuite/gcc.dg/cpp-mi.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-mi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-mi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-mi.c?ref=b42115f711f164a05b1e9f3ca5565eb74ab3964b", "patch": "@@ -1,9 +1,18 @@\n /* Test \"ignore redundant include\" facility.\n    We must test with C and C++ comments outside the guard conditional;\n-   also, we test guarding with #ifndef and #if !defined.  */\n+   also, we test guarding with #ifndef and #if !defined.\n+   -H is used because cpp might confuse the issue by optimizing out\n+   #line markers.  This test only passes if each of the headers is\n+   read exactly once.\n \n-/* { dg-do preprocess }\n-   { dg-options \"\" } */\n+   The disgusting regexp in the dg-error line, when stuck into\n+   dg.exp's compiler-output regexp, matches the correct -H output and\n+   only the correct -H output.  It has to be all on one line because\n+   otherwise it will not be interpreted all in one unit.  */\n+\n+/* { dg-do compile }\n+   { dg-options \"-H\" }\n+   { dg-error \"mic\\.h\\n\\[^\\n\\]*micc\\.h\\n\\[^\\n\\]*mind\\.h\\n\\[^\\n\\]*mindp\\.h\\n\\[^\\n\\]*mix\\.h\" \"redundant include check\" { target native } 0 } */\n \n #include \"cpp-mic.h\"\n #include \"cpp-mic.h\"\n@@ -26,15 +35,3 @@ main (void)\n {\n   return a + b + c + d;\n }\n-\n-/*\n-   { dg-final { if ![file exists cpp-mi.i] { return }\t\t} }\n-\n-   { dg-final { set tmp [grep cpp-mi.i {cpp-mi.*\\.h} line]\t} }\n-   { dg-final { # send_user \"$tmp\\n\" } }\n-   { dg-final { if [regexp \"^{\\[0-9\\]+ cpp-mic\\.h} {\\[0-9\\]+ cpp-micc\\.h} {\\[0-9\\]+ cpp-mind\\.h} {\\[0-9\\]+ cpp-mindp\\.h} {\\[0-9]+ cpp-mix\\.h}$\" $tmp] \\{ } }\n-   { dg-final {     pass \"cpp-mi.c: redundant include check\"\t} }\n-   { dg-final { \\} else \\{\t\t\t\t\t} }\n-   { dg-final {     fail \"cpp-mi.c: redundant include check\"\t} }\n-   { dg-final { \\}\t\t\t\t\t\t} }\n-*/"}, {"sha": "6055684b83f4396bc7e020962f5f19d834888944", "filename": "gcc/testsuite/gcc.dg/cpp-mi3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-mi3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-mi3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-mi3.c?ref=b42115f711f164a05b1e9f3ca5565eb74ab3964b", "patch": "@@ -0,0 +1,17 @@\n+/* Another test case for over-eager multiple include optimization.\n+   This one distilled from glibc's setlocale.c and categories.def.  */\n+/* { dg-do compile } */\n+\n+#define X a\n+#include \"cpp-mi3.def\"\n+#undef X\n+\n+#define X b\n+#include \"cpp-mi3.def\"\n+#undef X\n+\n+int\n+main(void)\n+{\n+  return a + b;\n+}"}, {"sha": "375d9c7fe349344d82ab0c321eefee0e5c92b46e", "filename": "gcc/testsuite/gcc.dg/cpp-mi3.def", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-mi3.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-mi3.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-mi3.def?ref=b42115f711f164a05b1e9f3ca5565eb74ab3964b", "patch": "@@ -0,0 +1,10 @@\n+/* Another test case for over-eager multiple include optimization.    \n+   This one distilled from glibc's setlocale.c and categories.def.\n+   The #ifdef block doesn't cover the entire file, so it must not be\n+   taken for a reinclude guard.  */\n+\n+#ifndef NO_POSTLOAD\n+#define NO_POSTLOAD NULL\n+#endif\n+\n+int X;"}, {"sha": "46a38cded01aacb6867bf616f500e421c6c77a22", "filename": "gcc/testsuite/gcc.dg/cpp-micc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-micc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-micc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-micc.h?ref=b42115f711f164a05b1e9f3ca5565eb74ab3964b", "patch": "@@ -3,7 +3,7 @@\n #ifndef CPP_MICC_H\n #define CPP_MICC_H\n \n-int a;\n+int b;\n \n #endif\n "}, {"sha": "79a910f6bf3574d94de1c5a499b0ae1e6d480749", "filename": "gcc/testsuite/gcc.dg/poison-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2Fgcc.dg%2Fpoison-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b42115f711f164a05b1e9f3ca5565eb74ab3964b/gcc%2Ftestsuite%2Fgcc.dg%2Fpoison-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpoison-1.c?ref=b42115f711f164a05b1e9f3ca5565eb74ab3964b", "patch": "@@ -1,3 +1,6 @@\n+/* { dg-do preprocess }\n+   { dg-options \"-fno-show-column\" } */\n+\n #pragma poison foo\n foo\t\t\t/* { dg-error \"foo\" \"use of foo\" } */\n #pragma poison foo2 foo3"}]}