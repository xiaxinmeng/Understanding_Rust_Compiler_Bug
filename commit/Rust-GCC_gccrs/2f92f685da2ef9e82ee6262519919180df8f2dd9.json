{"sha": "2f92f685da2ef9e82ee6262519919180df8f2dd9", "node_id": "C_kwDOANBUbNoAKDJmOTJmNjg1ZGEyZWY5ZTgyZWU2MjYyNTE5OTE5MTgwZGY4ZjJkZDk", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-09-21T20:15:02Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-09-22T18:48:28Z"}, "message": "Always check the return value of fold_range.\n\nThe fold_range routine in range-ops returns FALSE if the operation\nfails.  There are a few places which assume the operation was\nsuccessful.  Fix those.\n\n\t* gimple-range-fold.cc (range_of_range_op): Set result to\n\tVARYING if the call to fold_range fails.\n\t* tree-data-ref.cc (compute_distributive_range): Ditto.\n\t* tree-vrp.cc (range_fold_binary_expr): Ditto.\n\t(range_fold_unary_expr): Ditto.\n\t* value-query.cc (range_query::get_tree_range): Ditto.", "tree": {"sha": "ae1e971cdb3c1b762e97f5b5ab1484f2b3bb4b49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae1e971cdb3c1b762e97f5b5ab1484f2b3bb4b49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f92f685da2ef9e82ee6262519919180df8f2dd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f92f685da2ef9e82ee6262519919180df8f2dd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f92f685da2ef9e82ee6262519919180df8f2dd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f92f685da2ef9e82ee6262519919180df8f2dd9/comments", "author": null, "committer": null, "parents": [{"sha": "be2a25adbdc76a770f7470cc9f47892f7a4139ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be2a25adbdc76a770f7470cc9f47892f7a4139ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be2a25adbdc76a770f7470cc9f47892f7a4139ae"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "42408254c351ecb04b8679b931afc14523ff2e4f", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f92f685da2ef9e82ee6262519919180df8f2dd9/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f92f685da2ef9e82ee6262519919180df8f2dd9/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=2f92f685da2ef9e82ee6262519919180df8f2dd9", "patch": "@@ -544,7 +544,8 @@ fold_using_range::range_of_range_op (vrange &r,\n \t  // Fold range, and register any dependency if available.\n \t  Value_Range r2 (type);\n \t  r2.set_varying (type);\n-\t  handler.fold_range (r, type, range1, r2);\n+\t  if (!handler.fold_range (r, type, range1, r2))\n+\t    r.set_varying (type);\n \t  if (lhs && gimple_range_ssa_p (op1))\n \t    {\n \t      if (src.gori ())\n@@ -567,7 +568,8 @@ fold_using_range::range_of_range_op (vrange &r,\n \t      fputc ('\\n', dump_file);\n \t    }\n \t  // Fold range, and register any dependency if available.\n-\t  handler.fold_range (r, type, range1, range2, rel);\n+\t  if (!handler.fold_range (r, type, range1, range2, rel))\n+\t    r.set_varying (type);\n \t  if (irange::supports_p (type))\n \t    relation_fold_and_or (as_a <irange> (r), s, src);\n \t  if (lhs)"}, {"sha": "91bfb619d6695dc072b70d8cc8a728ad01ec3409", "filename": "gcc/tree-data-ref.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f92f685da2ef9e82ee6262519919180df8f2dd9/gcc%2Ftree-data-ref.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f92f685da2ef9e82ee6262519919180df8f2dd9/gcc%2Ftree-data-ref.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.cc?ref=2f92f685da2ef9e82ee6262519919180df8f2dd9", "patch": "@@ -594,7 +594,8 @@ compute_distributive_range (tree type, value_range &op0_range,\n   if (result_range)\n     {\n       range_op_handler op (code, type);\n-      op.fold_range (*result_range, type, op0_range, op1_range);\n+      if (!op.fold_range (*result_range, type, op0_range, op1_range))\n+\tresult_range->set_varying (type);\n     }\n \n   /* The distributive property guarantees that if TYPE is no narrower\n@@ -642,7 +643,8 @@ compute_distributive_range (tree type, value_range &op0_range,\n   range_op_handler op (code, ssizetype);\n   bool saved_flag_wrapv = flag_wrapv;\n   flag_wrapv = 1;\n-  op.fold_range (wide_range, ssizetype, op0_range, op1_range);\n+  if (!op.fold_range (wide_range, ssizetype, op0_range, op1_range))\n+    wide_range.set_varying (ssizetype);;\n   flag_wrapv = saved_flag_wrapv;\n   if (wide_range.num_pairs () != 1 || !range_int_cst_p (&wide_range))\n     return false;"}, {"sha": "93482e5d1027778a53fabf97f1f5e5f6fa8c953e", "filename": "gcc/tree-vrp.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f92f685da2ef9e82ee6262519919180df8f2dd9/gcc%2Ftree-vrp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f92f685da2ef9e82ee6262519919180df8f2dd9/gcc%2Ftree-vrp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.cc?ref=2f92f685da2ef9e82ee6262519919180df8f2dd9", "patch": "@@ -1069,7 +1069,8 @@ range_fold_binary_expr (value_range *vr,\n     vr1.set_varying (expr_type);\n   vr0.normalize_addresses ();\n   vr1.normalize_addresses ();\n-  op.fold_range (*vr, expr_type, vr0, vr1);\n+  if (!op.fold_range (*vr, expr_type, vr0, vr1))\n+    vr->set_varying (expr_type);\n }\n \n /* Perform a unary operation on a range.  */\n@@ -1095,7 +1096,8 @@ range_fold_unary_expr (value_range *vr,\n \n   value_range vr0_cst (*vr0);\n   vr0_cst.normalize_addresses ();\n-  op.fold_range (*vr, expr_type, vr0_cst, value_range (expr_type));\n+  if (!op.fold_range (*vr, expr_type, vr0_cst, value_range (expr_type)))\n+    vr->set_varying (expr_type);\n }\n \n /* If the range of values taken by OP can be inferred after STMT executes,"}, {"sha": "296784be31d133037b3cb7e0b9933c9fb23bd3fe", "filename": "gcc/value-query.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f92f685da2ef9e82ee6262519919180df8f2dd9/gcc%2Fvalue-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f92f685da2ef9e82ee6262519919180df8f2dd9/gcc%2Fvalue-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-query.cc?ref=2f92f685da2ef9e82ee6262519919180df8f2dd9", "patch": "@@ -252,7 +252,8 @@ range_query::get_tree_range (vrange &r, tree expr, gimple *stmt)\n \t  Value_Range r1 (TREE_TYPE (TREE_OPERAND (expr, 1)));\n \t  range_of_expr (r0, TREE_OPERAND (expr, 0), stmt);\n \t  range_of_expr (r1, TREE_OPERAND (expr, 1), stmt);\n-\t  op.fold_range (r, type, r0, r1);\n+\t  if (!op.fold_range (r, type, r0, r1))\n+\t    r.set_varying (type);\n \t}\n       else\n \tr.set_varying (type);\n@@ -268,7 +269,8 @@ range_query::get_tree_range (vrange &r, tree expr, gimple *stmt)\n \t  Value_Range r1 (type);\n \t  r1.set_varying (type);\n \t  range_of_expr (r0, TREE_OPERAND (expr, 0), stmt);\n-\t  op.fold_range (r, type, r0, r1);\n+\t  if (!op.fold_range (r, type, r0, r1))\n+\t    r.set_varying (type);\n \t}\n       else\n \tr.set_varying (type);"}]}