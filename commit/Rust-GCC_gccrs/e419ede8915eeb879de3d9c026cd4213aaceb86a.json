{"sha": "e419ede8915eeb879de3d9c026cd4213aaceb86a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQxOWVkZTg5MTVlZWI4NzlkZTNkOWMwMjZjZDQyMTNhYWNlYjg2YQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-10-23T07:41:11Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-10-27T10:50:35Z"}, "message": "d: Merge upstream dmd 0fcdaab32\n\nFixes a bug where there was undefined template references when compiling\nupstream dmd mainline.\n\nIn `TemplateInstance::semantic`, there exists special handling of\nmatching template instances for the same template declaration to ensure\nthat only at most one instance gets codegen'd.\n\nIf the primary instance `inst` originated from a non-root module, the\n`minst` field will be updated so it is now coming from a root module,\nhowever all Dsymbol `inst->members` of the instance still have their\n`_scope->minst` pointing at the original non-root module. We must now\npropagate `minst` to all members so that forward referenced dependencies\nthat get instantiated will also be appended to the root module,\notherwise there will be undefined references at link-time.\n\nThis doesn't affect compilations where all modules are compiled\ntogether, as every module is a root module in that situation.  What this\nprimarily affects are cases where there is a mix of root and non-root\nmodules, and a template was first instantiated in a non-root context,\nthen later instantiated again in a root context.\n\nReviewed-on: https://github.com/dlang/dmd/pull/11867\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 0fcdaab32", "tree": {"sha": "03b7bf22cb46b94e4ad563d88dfbb0e73aaac92e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03b7bf22cb46b94e4ad563d88dfbb0e73aaac92e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e419ede8915eeb879de3d9c026cd4213aaceb86a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e419ede8915eeb879de3d9c026cd4213aaceb86a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e419ede8915eeb879de3d9c026cd4213aaceb86a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e419ede8915eeb879de3d9c026cd4213aaceb86a/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14e19b82c1e67ead60c3095ac23347317298904b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e19b82c1e67ead60c3095ac23347317298904b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e19b82c1e67ead60c3095ac23347317298904b"}], "stats": {"total": 220, "additions": 216, "deletions": 4}, "files": [{"sha": "7b561e4044ec98be560f4de12e23099c846dd0e5", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e419ede8915eeb879de3d9c026cd4213aaceb86a/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e419ede8915eeb879de3d9c026cd4213aaceb86a/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=e419ede8915eeb879de3d9c026cd4213aaceb86a", "patch": "@@ -1,4 +1,4 @@\n-70aabfb511d55f2bfbdccbac7868519d9d4b63da\n+0fcdaab32c7645820820f6e1474343ccfb7560e5\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "caa8a5ba9f45575c4f0a9a72481d4306bdc907fb", "filename": "gcc/d/dmd/dtemplate.c", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e419ede8915eeb879de3d9c026cd4213aaceb86a/gcc%2Fd%2Fdmd%2Fdtemplate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e419ede8915eeb879de3d9c026cd4213aaceb86a/gcc%2Fd%2Fdmd%2Fdtemplate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdtemplate.c?ref=e419ede8915eeb879de3d9c026cd4213aaceb86a", "patch": "@@ -33,6 +33,7 @@\n #include \"hdrgen.h\"\n #include \"id.h\"\n #include \"attrib.h\"\n+#include \"cond.h\"\n #include \"tokens.h\"\n \n #define IDX_NOTFOUND (0x12345678)               // index is not found\n@@ -6088,17 +6089,18 @@ void TemplateInstance::semantic(Scope *sc, Expressions *fargs)\n         if (minst && minst->isRoot() && !(inst->minst && inst->minst->isRoot()))\n         {\n             /* Swap the position of 'inst' and 'this' in the instantiation graph.\n-             * Then, the primary instance `inst` will be changed to a root instance.\n+             * Then, the primary instance `inst` will be changed to a root instance,\n+             * along with all members of `inst` having their scopes updated.\n              *\n              * Before:\n-             *  non-root -> A!() -> B!()[inst] -> C!()\n+             *  non-root -> A!() -> B!()[inst] -> C!() { members[non-root] }\n              *                      |\n              *  root     -> D!() -> B!()[this]\n              *\n              * After:\n              *  non-root -> A!() -> B!()[this]\n              *                      |\n-             *  root     -> D!() -> B!()[inst] -> C!()\n+             *  root     -> D!() -> B!()[inst] -> C!() { members[root] }\n              */\n             Module *mi = minst;\n             TemplateInstance *ti = tinst;\n@@ -6107,6 +6109,64 @@ void TemplateInstance::semantic(Scope *sc, Expressions *fargs)\n             inst->minst = mi;\n             inst->tinst = ti;\n \n+            /* https://issues.dlang.org/show_bug.cgi?id=21299\n+               `minst` has been updated on the primary instance `inst` so it is\n+               now coming from a root module, however all Dsymbol `inst.members`\n+               of the instance still have their `_scope.minst` pointing at the\n+               original non-root module. We must now propagate `minst` to all\n+               members so that forward referenced dependencies that get\n+               instantiated will also be appended to the root module, otherwise\n+               there will be undefined references at link-time.  */\n+            class InstMemberWalker : public Visitor\n+            {\n+            public:\n+                TemplateInstance *inst;\n+\n+                InstMemberWalker(TemplateInstance *inst)\n+                    : inst(inst) { }\n+\n+                void visit(Dsymbol *d)\n+                {\n+                    if (d->_scope)\n+                        d->_scope->minst = inst->minst;\n+                }\n+\n+                void visit(ScopeDsymbol *sds)\n+                {\n+                    if (!sds->members)\n+                        return;\n+                    for (size_t i = 0; i < sds->members->length; i++)\n+                    {\n+                        Dsymbol *s = (*sds->members)[i];\n+                        s->accept(this);\n+                    }\n+                    visit((Dsymbol *)sds);\n+                }\n+\n+                void visit(AttribDeclaration *ad)\n+                {\n+                    Dsymbols *d = ad->include(NULL);\n+                    if (!d)\n+                        return;\n+                    for (size_t i = 0; i < d->length; i++)\n+                    {\n+                        Dsymbol *s = (*d)[i];\n+                        s->accept(this);\n+                    }\n+                    visit((Dsymbol *)ad);\n+                }\n+\n+                void visit(ConditionalDeclaration *cd)\n+                {\n+                    if (cd->condition->inc)\n+                        visit((AttribDeclaration *)cd);\n+                    else\n+                        visit((Dsymbol *)cd);\n+                }\n+            };\n+            InstMemberWalker v(inst);\n+            inst->accept(&v);\n+\n             if (minst)  // if inst was not speculative\n             {\n                 /* Add 'inst' once again to the root module members[], then the"}, {"sha": "fe3321faff7798289ffff4734e2574b18568de13", "filename": "gcc/testsuite/gdc.test/compilable/imports/test21299/func.d", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e419ede8915eeb879de3d9c026cd4213aaceb86a/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest21299%2Ffunc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e419ede8915eeb879de3d9c026cd4213aaceb86a/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest21299%2Ffunc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest21299%2Ffunc.d?ref=e419ede8915eeb879de3d9c026cd4213aaceb86a", "patch": "@@ -0,0 +1,8 @@\n+module imports.test21299.func;\n+import imports.test21299.mtype;\n+import imports.test21299.rootstringtable;\n+class FuncDeclaration {\n+    StringTable!Type stringtable;\n+    StringTable2!Type stringtable2;\n+    StringTable3!Type stringtable3;\n+}"}, {"sha": "01bac82c2e4fe62bae770e81d2816f5d1b6ecd79", "filename": "gcc/testsuite/gdc.test/compilable/imports/test21299/mtype.d", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e419ede8915eeb879de3d9c026cd4213aaceb86a/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest21299%2Fmtype.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e419ede8915eeb879de3d9c026cd4213aaceb86a/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest21299%2Fmtype.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest21299%2Fmtype.d?ref=e419ede8915eeb879de3d9c026cd4213aaceb86a", "patch": "@@ -0,0 +1,8 @@\n+module imports.test21299.mtype;\n+import imports.test21299.func;\n+import imports.test21299.rootstringtable;\n+class Type {\n+    StringTable!Type stringtable;\n+    StringTable2!Type stringtable2;\n+    StringTable3!Type stringtable3;\n+}"}, {"sha": "12a2d92899b49d9b1049d08fe5ee9277619b5220", "filename": "gcc/testsuite/gdc.test/compilable/imports/test21299/rootstringtable.d", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e419ede8915eeb879de3d9c026cd4213aaceb86a/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest21299%2Frootstringtable.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e419ede8915eeb879de3d9c026cd4213aaceb86a/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest21299%2Frootstringtable.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest21299%2Frootstringtable.d?ref=e419ede8915eeb879de3d9c026cd4213aaceb86a", "patch": "@@ -0,0 +1,96 @@\n+module imports.test21299.rootstringtable;\n+struct StringValue(T)\n+{\n+    char* lstring()\n+    {\n+        return cast(char*)&this;\n+    }\n+}\n+\n+struct StringTable(T)\n+{\n+    StringValue!T* insert()\n+    {\n+        allocValue;\n+        return getValue;\n+    }\n+\n+    uint allocValue()\n+    {\n+        StringValue!(T) sv;\n+        sv.lstring[0] = 0;\n+        return 0;\n+    }\n+\n+    StringValue!T* getValue()\n+    {\n+        return cast(StringValue!T*)&this;\n+    }\n+}\n+\n+// Other tests are the same as the original issue, but use other kinds of\n+// nesting Dsymbols that need to be handled by templateInstanceSemantic().\n+struct StringValue2(T)\n+{\n+    char* lstring()\n+    {\n+        return cast(char*)&this;\n+    }\n+}\n+\n+struct StringTable2(T)\n+{\n+  @nogc // AttribDeclaration (also covers pragma, extern(), static foreach, ...)\n+  {\n+    StringValue2!T* insert()\n+    {\n+        allocValue;\n+        return getValue;\n+    }\n+\n+    uint allocValue()\n+    {\n+        StringValue2!(T) sv;\n+        sv.lstring[0] = 0;\n+        return 0;\n+    }\n+\n+    StringValue2!T* getValue()\n+    {\n+        return cast(StringValue2!T*)&this;\n+    }\n+  }\n+}\n+\n+//\n+struct StringValue3(T)\n+{\n+    char* lstring()\n+    {\n+        return cast(char*)&this;\n+    }\n+}\n+\n+struct StringTable3(T)\n+{\n+  static if (true) // ConditionalDeclaration (static if)\n+  {\n+    StringValue3!T* insert()\n+    {\n+        allocValue;\n+        return getValue;\n+    }\n+\n+    uint allocValue()\n+    {\n+        StringValue3!(T) sv;\n+        sv.lstring[0] = 0;\n+        return 0;\n+    }\n+\n+    StringValue3!T* getValue()\n+    {\n+        return cast(StringValue3!T*)&this;\n+    }\n+  }\n+}"}, {"sha": "049ee6ae35bedd392b492e370ccadeb5930e62b6", "filename": "gcc/testsuite/gdc.test/compilable/test21299a.d", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e419ede8915eeb879de3d9c026cd4213aaceb86a/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21299a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e419ede8915eeb879de3d9c026cd4213aaceb86a/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21299a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21299a.d?ref=e419ede8915eeb879de3d9c026cd4213aaceb86a", "patch": "@@ -0,0 +1,4 @@\n+// EXTRA_SOURCES: imports/test21299/mtype.d imports/test21299/rootstringtable.d\n+// REQUIRED_ARGS: -main\n+// LINK\n+module test21299a;"}, {"sha": "b9d992acfb9537f6bc95a7991ea876b5ab598553", "filename": "gcc/testsuite/gdc.test/compilable/test21299b.d", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e419ede8915eeb879de3d9c026cd4213aaceb86a/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21299b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e419ede8915eeb879de3d9c026cd4213aaceb86a/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21299b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21299b.d?ref=e419ede8915eeb879de3d9c026cd4213aaceb86a", "patch": "@@ -0,0 +1,4 @@\n+// EXTRA_SOURCES: imports/test21299/func.d imports/test21299/rootstringtable.d\n+// REQUIRED_ARGS: -main\n+// LINK:\n+module test21299b;"}, {"sha": "88ed21f3ea6cdf7cbbdb003c274fb77bc778e59f", "filename": "gcc/testsuite/gdc.test/compilable/test21299c.d", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e419ede8915eeb879de3d9c026cd4213aaceb86a/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21299c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e419ede8915eeb879de3d9c026cd4213aaceb86a/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21299c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21299c.d?ref=e419ede8915eeb879de3d9c026cd4213aaceb86a", "patch": "@@ -0,0 +1,5 @@\n+// EXTRA_SOURCES: imports/test21299/mtype.d imports/test21299/func.d imports/test21299/rootstringtable.d\n+// COMPILE_SEPARATELY:\n+// LINK:\n+module test21299c;\n+void main() {}"}, {"sha": "67ec60a582b77c654a6e80f4ccf2a4340d827222", "filename": "gcc/testsuite/gdc.test/compilable/test21299d.d", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e419ede8915eeb879de3d9c026cd4213aaceb86a/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21299d.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e419ede8915eeb879de3d9c026cd4213aaceb86a/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21299d.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21299d.d?ref=e419ede8915eeb879de3d9c026cd4213aaceb86a", "patch": "@@ -0,0 +1,27 @@\n+// REQUIRED_ARGS: -main\n+// LINK:\n+module test21299d;\n+\n+struct DefaultPredicates\n+{\n+    struct IsEqual(T)\n+    {\n+        static opCall(in T, in T)\n+        {\n+            return 0;\n+        }\n+    }\n+}\n+\n+void moveToEnd(T, Pred = DefaultPredicates.IsEqual!T)(T[] array, T element, Pred pred = Pred.init)\n+{\n+    pred(array[0], element);\n+}\n+\n+class Task\n+{\n+    void removeTerminationHook(void delegate() hook)\n+    {\n+        moveToEnd([], hook);\n+    }\n+}"}]}