{"sha": "ec7e5618bc8b9d720803a3857eb787983b089318", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM3ZTU2MThiYzhiOWQ3MjA4MDNhMzg1N2ViNzg3OTgzYjA4OTMxOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-10-29T08:35:49Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-10-29T08:35:49Z"}, "message": "typeck.c (composite_pointer_type): Remove comment about DR 195.\n\ncp:\n\t* typeck.c (composite_pointer_type): Remove comment about DR 195.\n\t(build_reinterpret_cast_1): Revert DR195 patch. Only emit a\n\twarning when being pedantic.\n\t(build_reinterpet_cast, build_c_cast): Adjust.\ntestsuite:\n\t* g++.dg/conversion/dr195.C: Adjust expected errors for DR195 not\n\tbeing implemented.\n\t* g++.dg/conversion/dr195-1.C: New.\n\t* g++.old-deja/g++.brendan/operators4.C: Don't be pedantic.\n\t* g++.old-deja/g++.mike/p10148.C: Likewise.\n\nFrom-SVN: r89826", "tree": {"sha": "03090592208f20c04fbd230a804f71a68e60a03b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03090592208f20c04fbd230a804f71a68e60a03b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec7e5618bc8b9d720803a3857eb787983b089318", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec7e5618bc8b9d720803a3857eb787983b089318", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec7e5618bc8b9d720803a3857eb787983b089318", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec7e5618bc8b9d720803a3857eb787983b089318/comments", "author": null, "committer": null, "parents": [{"sha": "1dc82a999cf05e3138d83ea248106c9ec9d7d082", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dc82a999cf05e3138d83ea248106c9ec9d7d082", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dc82a999cf05e3138d83ea248106c9ec9d7d082"}], "stats": {"total": 100, "additions": 71, "deletions": 29}, "files": [{"sha": "1af9e25993f1c5d8fa5c036e7feee99f39bb4ff8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7e5618bc8b9d720803a3857eb787983b089318/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7e5618bc8b9d720803a3857eb787983b089318/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ec7e5618bc8b9d720803a3857eb787983b089318", "patch": "@@ -1,3 +1,10 @@\n+2004-10-28  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* typeck.c (composite_pointer_type): Remove comment about DR 195.\n+\t(build_reinterpret_cast_1): Revert DR195 patch. Only emit a\n+\twarning when being pedantic.\n+\t(build_reinterpet_cast, build_c_cast): Adjust.\n+\n 2004-10-29  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/17695"}, {"sha": "6593a65beaada6e1e51bfd10f7a6b06ddd36e1e8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7e5618bc8b9d720803a3857eb787983b089318/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7e5618bc8b9d720803a3857eb787983b089318/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ec7e5618bc8b9d720803a3857eb787983b089318", "patch": "@@ -507,8 +507,6 @@ composite_pointer_type (tree t1, tree t2, tree arg1, tree arg2,\n       tree result_type;\n \n       if (pedantic && TYPE_PTRFN_P (t2))\n-\t/* Although DR195 suggests allowing this when no precision is\n-\t   lost, that is only allowed in a reinterpret_cast.  */\n \tpedwarn (\"ISO C++ forbids %s between pointer of type %<void *%> \"\n                  \"and pointer-to-function\", location);\n       result_type \n@@ -4827,7 +4825,7 @@ convert_member_func_to_ptr (tree type, tree expr)\n \n static tree\n build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n-\t\t\t  bool for_reinterpret_ref_p, bool *valid_p)\n+\t\t\t  bool *valid_p)\n {\n   tree intype;\n \n@@ -4867,7 +4865,7 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n       expr = build_unary_op (ADDR_EXPR, expr, 0);\n       if (expr != error_mark_node)\n \texpr = build_reinterpret_cast_1\n-\t  (build_pointer_type (TREE_TYPE (type)), expr, c_cast_p, true,\n+\t  (build_pointer_type (TREE_TYPE (type)), expr, c_cast_p,\n \t   valid_p);\n       if (expr != error_mark_node)\n \texpr = build_indirect_ref (expr, 0);\n@@ -4945,24 +4943,12 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n   else if ((TYPE_PTRFN_P (type) && TYPE_PTROBV_P (intype))\n \t   || (TYPE_PTRFN_P (intype) && TYPE_PTROBV_P (type)))\n     {\n-      if (pedantic || !c_cast_p)\n-\t{\n-\t  /* DR 195 suggests allowing such casts if they do not lose\n-\t     precision.  We allow conversion to pointer-to-void, if it\n-\t     does not lose precision, and we allow conversion from\n-\t     pointer-to-void regardless, so that one may convert\n-\t     back again without warning.  Such conversions are not\n-\t     permitted when we are recursively called to deal with\n-\t     reinterpreting reference casts.  */\n-\t  if (!for_reinterpret_ref_p && VOID_TYPE_P (TREE_TYPE (type)))\n-\t    {\n-\t      if (TYPE_PRECISION (type) < TYPE_PRECISION (intype))\n-\t\twarning (\"conversion from %qT to %qT loses precision\",\n-\t\t\t intype, type);\n-\t    }\n-\t  else if (for_reinterpret_ref_p || !VOID_TYPE_P (TREE_TYPE (intype)))\n-\t    pedwarn (\"ISO C++ forbids casting between pointer-to-function and pointer-to-object\");\n-\t}\n+      if (pedantic)\n+\t/* Only issue a warning, as we have always supported this\n+ \t   where possible, and it is necessary in some cases.  DR 195\n+ \t   addresses this issue, but as of 2004/10/26 is still in\n+ \t   drafting.  */\n+ \twarning (\"ISO C++ forbids casting between pointer-to-function and pointer-to-object\");\n       \n       expr = decl_constant_value (expr);\n       return fold_if_not_in_template (build_nop (type, expr));\n@@ -4998,7 +4984,6 @@ build_reinterpret_cast (tree type, tree expr)\n     }\n \n   return build_reinterpret_cast_1 (type, expr, /*c_cast_p=*/false,\n-\t\t\t\t   /*for_reinterpret_ref=*/false,\n \t\t\t\t   /*valid_p=*/NULL);\n }\n \n@@ -5201,7 +5186,6 @@ build_c_cast (tree type, tree expr)\n   /* Or a reinterpret_cast.  */\n   if (!valid_p)\n     result = build_reinterpret_cast_1 (type, value, /*c_cast_p=*/true,\n-\t\t\t\t       /*for_reinterpret_ref_p=*/false,\n \t\t\t\t       &valid_p);\n   /* The static_cast or reinterpret_cast may be followed by a\n      const_cast.  */"}, {"sha": "f6f3bded2750494986144242bbfb8155c939f3e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7e5618bc8b9d720803a3857eb787983b089318/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7e5618bc8b9d720803a3857eb787983b089318/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec7e5618bc8b9d720803a3857eb787983b089318", "patch": "@@ -1,3 +1,11 @@\n+2004-10-28  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/conversion/dr195.C: Adjust expected errors for DR195 not\n+\tbeing implemented.\n+\t* g++.dg/conversion/dr195-1.C: New.\n+\t* g++.old-deja/g++.brendan/operators4.C: Don't be pedantic.\n+\t* g++.old-deja/g++.mike/p10148.C: Likewise.\n+\n 2004-10-29  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/17695"}, {"sha": "ca38580e5fe52536c96462b6890a6df952e00e79", "filename": "gcc/testsuite/g++.dg/conversion/dr195-1.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7e5618bc8b9d720803a3857eb787983b089318/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7e5618bc8b9d720803a3857eb787983b089318/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195-1.C?ref=ec7e5618bc8b9d720803a3857eb787983b089318", "patch": "@@ -0,0 +1,34 @@\n+// { dg-options \"\" }\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 20 Oct 2004 <nathan@codesourcery.com>\n+\n+// DR 195 will allow conversions between function and object pointers\n+// under some circumstances. It is in drafting, so we don't implement\n+// it (yet).\n+\n+// this checks we are silent when not being pedantic.\n+\n+typedef void (*PF)(void);\n+typedef void *PV;\n+typedef int *PO;\n+\n+\n+void foo ()\n+{\n+  PF pf;\n+  PV pv;\n+  PO po;\n+\n+  /* the following two will almost definitly be ok with 195.  */\n+  pf = reinterpret_cast <PF>(pv);\n+  pv = reinterpret_cast <PV>(pf);\n+\n+  /* the following two might or might not be ok with 195.  */\n+  pf = reinterpret_cast <PF>(po);\n+  po = reinterpret_cast <PO>(pf);\n+\n+  /* These will never be ok, as they are implicit.  */\n+  pv = pf; // { dg-error \"invalid conversion\" \"\" }\n+  pf = pv; // { dg-error \"invalid conversion\" \"\" }\n+}"}, {"sha": "902b871d21f5e60096b25c6d0cb1c81c4de4be9c", "filename": "gcc/testsuite/g++.dg/conversion/dr195.C", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7e5618bc8b9d720803a3857eb787983b089318/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7e5618bc8b9d720803a3857eb787983b089318/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195.C?ref=ec7e5618bc8b9d720803a3857eb787983b089318", "patch": "@@ -1,25 +1,31 @@\n // Copyright (C) 2004 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 20 Oct 2004 <nathan@codesourcery.com>\n \n-// DR 195 allows conversions between function and object pointers\n-// under some circumstances.\n+// DR 195 will allow conversions between function and object pointers\n+// under some circumstances. It is in drafting, so we don't implement\n+// it (yet).\n+\n+// This checks we warn when being pedantic.\n \n typedef void (*PF)(void);\n typedef void *PV;\n typedef int *PO;\n \n-\n void foo ()\n {\n   PF pf;\n   PV pv;\n   PO po;\n \n-  pf = reinterpret_cast <PF>(pv);\n-  pv = reinterpret_cast <PV>(pf);\n+  /* the following two will almost definitly be ok with 195.  */\n+  pf = reinterpret_cast <PF>(pv); // { dg-warning \"casting between\" \"\" }\n+  pv = reinterpret_cast <PV>(pf); // { dg-warning \"casting between\" \"\" }\n+\n+  /* the following two might or might not be ok with 195.  */\n   pf = reinterpret_cast <PF>(po); // { dg-error \"casting between\" \"\" }\n   po = reinterpret_cast <PO>(pf); // { dg-error \"casting between\" \"\" }\n \n+  /* These will never be ok, as they are implicit.  */\n   pv = pf; // { dg-error \"invalid conversion\" \"\" }\n   pf = pv; // { dg-error \"invalid conversion\" \"\" }\n }"}, {"sha": "d5613f15847d1cda222c253bb001410a0629e571", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/operators4.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7e5618bc8b9d720803a3857eb787983b089318/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7e5618bc8b9d720803a3857eb787983b089318/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators4.C?ref=ec7e5618bc8b9d720803a3857eb787983b089318", "patch": "@@ -1,4 +1,6 @@\n // { dg-do assemble  }\n+// { dg-options \"\" }\n+\n // GROUPS passed operators\n // Check that the & operator, when applied to a global function\n // or member function returns a proper value as long as the context"}, {"sha": "2cb359c9b9a82a298bf672443db2535a49f4844e", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p10148.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7e5618bc8b9d720803a3857eb787983b089318/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10148.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7e5618bc8b9d720803a3857eb787983b089318/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10148.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10148.C?ref=ec7e5618bc8b9d720803a3857eb787983b089318", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run  }\n+// { dg-options \"\" }\n // prms-id: 10148\n \n int fail = 1;"}]}