{"sha": "c92e858604925ce6a7085faec27421ed70949719", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkyZTg1ODYwNDkyNWNlNmE3MDg1ZmFlYzI3NDIxZWQ3MDk0OTcxOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-01T08:24:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-01T08:24:12Z"}, "message": "[multiple changes]\n\n2012-10-01  Robert Dewar  <dewar@adacore.com>\n\n\t* make.adb, exp_ch3.adb: Minor reformatting.\n\n2012-10-01  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* validsw.adb (Save_Validity_Check_Options): Do not set\n\tValidity_Check_Non_Overlapping_Params and\n\tValidity_Check_Valid_Scalars_On_Params when -gnatVa is present\n\tbecause the related checks are deemed too aggressive.\n\n2012-10-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.ads sem_util.adb (Check_Internal_Protected_Use):\n\treject use of protected procedure or entry within the body of\n\ta protected function of the same protected type, when usage is\n\ta call, an actual in an instantiation, a or prefix of 'Access.\n\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Verify that target\n\tobject in renaming of protected procedure is a variable, and\n\tapply Check_Internal_Protected_Use.\n\t* sem_res.adb (Analyze_Call, Analyze_Entry_Call): apply\n\tCheck_Internal_Protected_Use rather than on-line code.\n\t* sem_attr.adb (Analyze_Access_Attribute): Verify that target\n\tobject in accsss to protected procedure is a variable, and apply\n\tCheck_Internal_Protected_Use.\n\n2012-10-01  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch4.adb (Find_Equality_Types.Try_One_Interp): Exclude the\n\tpredefined interpretation from consideration if it's for a \"/=\"\n\toperator of a tagged type. This will allow Analyze_Equality_Op to\n\trewrite the \"/=\" as a logical negation of a call to the appropriate\n\tdispatching equality function. This needs to be done during\n\tanalysis rather than expansion for the benefit of ASIS, which\n\totherwise gets the unresolved N_Op_Ne operator from Standard.\n\nFrom-SVN: r191894", "tree": {"sha": "e8db95df586995034942e40eda9593a9f5ee2b5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8db95df586995034942e40eda9593a9f5ee2b5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c92e858604925ce6a7085faec27421ed70949719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c92e858604925ce6a7085faec27421ed70949719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c92e858604925ce6a7085faec27421ed70949719", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c92e858604925ce6a7085faec27421ed70949719/comments", "author": null, "committer": null, "parents": [{"sha": "8e983d807e96f2b993e1bc840c915c8f461077d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e983d807e96f2b993e1bc840c915c8f461077d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e983d807e96f2b993e1bc840c915c8f461077d4"}], "stats": {"total": 180, "additions": 161, "deletions": 19}, "files": [{"sha": "c1b2ba3e5fd652b43e6c7bb835303517c16793db", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c92e858604925ce6a7085faec27421ed70949719", "patch": "@@ -1,3 +1,39 @@\n+2012-10-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* make.adb, exp_ch3.adb: Minor reformatting.\n+\n+2012-10-01  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* validsw.adb (Save_Validity_Check_Options): Do not set\n+\tValidity_Check_Non_Overlapping_Params and\n+\tValidity_Check_Valid_Scalars_On_Params when -gnatVa is present\n+\tbecause the related checks are deemed too aggressive.\n+\n+2012-10-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.ads sem_util.adb (Check_Internal_Protected_Use):\n+\treject use of protected procedure or entry within the body of\n+\ta protected function of the same protected type, when usage is\n+\ta call, an actual in an instantiation, a or prefix of 'Access.\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Verify that target\n+\tobject in renaming of protected procedure is a variable, and\n+\tapply Check_Internal_Protected_Use.\n+\t* sem_res.adb (Analyze_Call, Analyze_Entry_Call): apply\n+\tCheck_Internal_Protected_Use rather than on-line code.\n+\t* sem_attr.adb (Analyze_Access_Attribute): Verify that target\n+\tobject in accsss to protected procedure is a variable, and apply\n+\tCheck_Internal_Protected_Use.\n+\n+2012-10-01  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch4.adb (Find_Equality_Types.Try_One_Interp): Exclude the\n+\tpredefined interpretation from consideration if it's for a \"/=\"\n+\toperator of a tagged type. This will allow Analyze_Equality_Op to\n+\trewrite the \"/=\" as a logical negation of a call to the appropriate\n+\tdispatching equality function. This needs to be done during\n+\tanalysis rather than expansion for the benefit of ASIS, which\n+\totherwise gets the unresolved N_Op_Ne operator from Standard.\n+\n 2012-10-01  Thomas Quinot  <quinot@adacore.com>\n \n \t* gnatcmd.adb, make.adb (Scan_Make_Arg, Inspect_Switches): Recognize"}, {"sha": "1059da6955b28bf2dc667d40142146c1b1926883", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=c92e858604925ce6a7085faec27421ed70949719", "patch": "@@ -4917,8 +4917,8 @@ package body Exp_Ch3 is\n \n            and then not\n              (Nkind (Object_Definition (N)) = N_Identifier\n-                and then\n-              Present (Equivalent_Type (Entity (Object_Definition (N)))))\n+               and then\n+                 Present (Equivalent_Type (Entity (Object_Definition (N)))))\n          then\n             pragma Assert (Is_Class_Wide_Type (Typ));\n "}, {"sha": "33611d3a744edd8527285f7b477168d686c74aa4", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=c92e858604925ce6a7085faec27421ed70949719", "patch": "@@ -410,7 +410,7 @@ package body Make is\n    --  Delete all temp files created by Gnatmake and call Osint.Fail, with the\n    --  parameter S (see osint.ads). This is called from the Prj hierarchy and\n    --  the MLib hierarchy. This subprogram also prints current error messages\n-   --  (ie finalizes Errutil).\n+   --  (i.e. finalizes Errutil).\n \n    --------------------------\n    -- Obsolete Executables --"}, {"sha": "ccfaec3ef48793a82a6ab973a6887c03eb428749", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=c92e858604925ce6a7085faec27421ed70949719", "patch": "@@ -9003,6 +9003,21 @@ package body Sem_Attr is\n                then\n                   Accessibility_Message;\n                   return;\n+\n+               --  AI05-0225: If the context is not an access to protected\n+               --  function, the prefix must be a variable, given that it may\n+               --  be used subsequently in a protected call.\n+\n+               elsif Nkind (P) = N_Selected_Component\n+                 and then not Is_Variable (Prefix (P))\n+                 and then Ekind (Entity (Selector_Name (P))) /= E_Function\n+               then\n+                  Error_Msg_N\n+                    (\"target object of access to protected procedure \"\n+                      & \"must be variable\", N);\n+\n+               elsif Is_Entity_Name (P) then\n+                  Check_Internal_Protected_Use (N, Entity (P));\n                end if;\n \n             elsif Ekind_In (Btyp, E_Access_Subprogram_Type,"}, {"sha": "6f1571401230ec71f44db85838756826dd663a97", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=c92e858604925ce6a7085faec27421ed70949719", "patch": "@@ -5612,8 +5612,24 @@ package body Sem_Ch4 is\n             return;\n          end if;\n \n+         --  If the right operand has a type compatible with T1, check for an\n+         --  acceptable interpretation, unless T1 is limited (no predefined\n+         --  equality available), or this is use of a \"/=\" for a tagged type.\n+         --  In the latter case, possible interpretations of equality need to\n+         --  be considered, we don't want the default inequality declared in\n+         --  Standard to be chosen, and the \"/=\" will be rewritten as a\n+         --  negation of \"=\" (see the end of Analyze_Equality_Op). This ensures\n+         --  that that rewriting happens during analysis rather than being\n+         --  delayed until expansion (this is needed for ASIS, which only sees\n+         --  the unexpanded tree). Note that if the node is N_Op_Ne, but Op_Id\n+         --  is Name_Op_Eq then we still proceed with the interpretation,\n+         --  because that indicates the potential rewriting case where the\n+         --  interpretation to consider is actually \"=\" and the node may be\n+         --  about to be rewritten by Analyze_Equality_Op.\n+\n          if T1 /= Standard_Void_Type\n            and then Has_Compatible_Type (R, T1)\n+\n            and then\n              ((not Is_Limited_Type (T1)\n                 and then not Is_Limited_Composite (T1))\n@@ -5622,6 +5638,11 @@ package body Sem_Ch4 is\n                  (Is_Array_Type (T1)\n                    and then not Is_Limited_Type (Component_Type (T1))\n                    and then Available_Full_View_Of_Component (T1)))\n+\n+           and then\n+             (Nkind (N) /= N_Op_Ne\n+               or else not Is_Tagged_Type (T1)\n+               or else Chars (Op_Id) = Name_Op_Eq)\n          then\n             if Found\n               and then Base_Type (T1) /= Base_Type (T_F)"}, {"sha": "51772dba2967aef31c0561b03b6ebe5d7159ba84", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=c92e858604925ce6a7085faec27421ed70949719", "patch": "@@ -1456,9 +1456,10 @@ package body Sem_Ch8 is\n       New_S   : Entity_Id;\n       Is_Body : Boolean)\n    is\n-      Nam   : constant Node_Id := Name (N);\n-      Sel   : constant Node_Id := Selector_Name (Nam);\n-      Old_S : Entity_Id;\n+      Nam       : constant Node_Id := Name (N);\n+      Sel       : constant Node_Id := Selector_Name (Nam);\n+      Is_Actual : constant Boolean := Present (Corresponding_Formal_Spec (N));\n+      Old_S     : Entity_Id;\n \n    begin\n       if Entity (Sel) = Any_Id then\n@@ -1489,15 +1490,33 @@ package body Sem_Ch8 is\n \n          Inherit_Renamed_Profile (New_S, Old_S);\n \n-         --  The prefix can be an arbitrary expression that yields a task type,\n-         --  so it must be resolved.\n+         --  The prefix can be an arbitrary expression that yields a task or\n+         --  protected object, so it must be resolved.\n \n          Resolve (Prefix (Nam), Scope (Old_S));\n       end if;\n \n       Set_Convention (New_S, Convention (Old_S));\n       Set_Has_Completion (New_S, Inside_A_Generic);\n \n+      --  AI05-0225: If the renamed entity is a procedure or entry of a\n+      --  protected object, the target object must be a variable.\n+\n+      if Ekind (Scope (Old_S)) in Protected_Kind\n+        and then Ekind (New_S) = E_Procedure\n+        and then not Is_Variable (Prefix (Nam))\n+      then\n+         if Is_Actual then\n+            Error_Msg_N\n+              (\"target object of protected operation used as actual for \"\n+               & \"formal procedure must be a variable\", Nam);\n+         else\n+            Error_Msg_N\n+              (\"target object of protected operation renamed as procedure, \"\n+               & \"must be a variable\", Nam);\n+         end if;\n+      end if;\n+\n       if Is_Body then\n          Check_Frozen_Renaming (N, New_S);\n       end if;\n@@ -2572,6 +2591,8 @@ package body Sem_Ch8 is\n             Generate_Reference (Old_S, Nam);\n          end if;\n \n+         Check_Internal_Protected_Use (N, Old_S);\n+\n          --  For a renaming-as-body, require subtype conformance, but if the\n          --  declaration being completed has not been frozen, then inherit the\n          --  convention of the renamed subprogram prior to checking conformance"}, {"sha": "c528047e6349bd3e51a8285f294ace7f0f45ef06", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=c92e858604925ce6a7085faec27421ed70949719", "patch": "@@ -5314,15 +5314,7 @@ package body Sem_Res is\n       --  Check that this is not a call to a protected procedure or entry from\n       --  within a protected function.\n \n-      if Ekind (Current_Scope) = E_Function\n-        and then Ekind (Scope (Current_Scope)) = E_Protected_Type\n-        and then Ekind (Nam) /= E_Function\n-        and then Scope (Nam) = Scope (Current_Scope)\n-      then\n-         Error_Msg_N (\"within protected function, protected \" &\n-           \"object is constant\", N);\n-         Error_Msg_N (\"\\cannot call operation that may modify it\", N);\n-      end if;\n+      Check_Internal_Protected_Use (N, Nam);\n \n       --  Freeze the subprogram name if not in a spec-expression. Note that we\n       --  freeze procedure calls as well as function calls. Procedure calls are\n@@ -6732,6 +6724,7 @@ package body Sem_Res is\n       end if;\n \n       Resolve_Actuals (N, Nam);\n+      Check_Internal_Protected_Use (N, Nam);\n \n       --  Create a call reference to the entry\n "}, {"sha": "6d86d8b04bb1e3a294e9efbc98710d4feeb36ec4", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=c92e858604925ce6a7085faec27421ed70949719", "patch": "@@ -1191,6 +1191,50 @@ package body Sem_Util is\n       end if;\n    end Check_Implicit_Dereference;\n \n+   ----------------------------------\n+   -- Check_Internal_Protected_Use --\n+   ----------------------------------\n+\n+   procedure Check_Internal_Protected_Use (N : Node_Id; Nam : Entity_Id) is\n+      S    : Entity_Id;\n+      Prot : Entity_Id;\n+\n+   begin\n+      S := Current_Scope;\n+      while Present (S) loop\n+         if S = Standard_Standard then\n+            return;\n+\n+         elsif Ekind (S) = E_Function\n+           and then Ekind (Scope (S)) = E_Protected_Type\n+         then\n+            Prot := Scope (S);\n+            exit;\n+         end if;\n+\n+         S := Scope (S);\n+      end loop;\n+\n+      if Scope (Nam) = Prot and then Ekind (Nam) /= E_Function then\n+         if Nkind (N) = N_Subprogram_Renaming_Declaration then\n+            Error_Msg_N\n+              (\"within protected function cannot use protected \"\n+               & \"procedure in renaming or as generic actual\", N);\n+\n+         elsif Nkind (N) = N_Attribute_Reference then\n+            Error_Msg_N\n+              (\"within protected function cannot take access of \"\n+               & \" protected procedure\", N);\n+\n+         else\n+            Error_Msg_N\n+              (\"within protected function, protected object is constant\", N);\n+            Error_Msg_N\n+              (\"\\cannot call operation that may modify it\", N);\n+         end if;\n+      end if;\n+   end Check_Internal_Protected_Use;\n+\n    ---------------------------------------\n    -- Check_Later_Vs_Basic_Declarations --\n    ---------------------------------------"}, {"sha": "92377c931e7bd295a57c2860038d04a68c78c7c3", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=c92e858604925ce6a7085faec27421ed70949719", "patch": "@@ -170,6 +170,12 @@ package Sem_Util is\n    --  checks whether T is a reference type, and if so it adds an interprettion\n    --  to Expr whose type is the designated type of the reference_discriminant.\n \n+   procedure Check_Internal_Protected_Use (N : Node_Id; Nam : Entity_Id);\n+   --  Within a protected function, the current object is a constant, and\n+   --  internal calls to a procedure or entry are illegal. Similarly, other\n+   --  uses of a protected procedure in a renaming or a generic instantiation\n+   --  in the context of a protected function are illegal (AI05-0225).\n+\n    procedure Check_Later_Vs_Basic_Declarations\n      (Decls          : List_Id;\n       During_Parsing : Boolean);"}, {"sha": "2edd0c09e381ae9bb75ea08c2e2264bc8aa04a3e", "filename": "gcc/ada/validsw.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2Fvalidsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c92e858604925ce6a7085faec27421ed70949719/gcc%2Fada%2Fvalidsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvalidsw.adb?ref=c92e858604925ce6a7085faec27421ed70949719", "patch": "@@ -214,20 +214,26 @@ package body Validsw is\n             when 'V' =>\n                Validity_Check_Valid_Scalars_On_Params := False;\n \n+            --  Note: The following two flags are not set when \"-gnatVa\" is in\n+            --  effect because the associated checks are deemed too aggressive.\n+\n+            --     Validity_Check_Non_Overlapping_Params\n+            --     Validity_Check_Valid_Scalars_On_Params\n+\n+            --  and in any case these do not belong as validity checks ???\n+\n             when 'a' =>\n                Validity_Check_Components              := True;\n                Validity_Check_Copies                  := True;\n                Validity_Check_Default                 := True;\n                Validity_Check_Floating_Point          := True;\n                Validity_Check_In_Out_Params           := True;\n                Validity_Check_In_Params               := True;\n-               Validity_Check_Non_Overlapping_Params  := True;\n                Validity_Check_Operands                := True;\n                Validity_Check_Parameters              := True;\n                Validity_Check_Returns                 := True;\n                Validity_Check_Subscripts              := True;\n                Validity_Check_Tests                   := True;\n-               Validity_Check_Valid_Scalars_On_Params := True;\n \n             when 'n' =>\n                Validity_Check_Components              := False;"}]}