{"sha": "878b569c6a4c24edc3bfd36adc1630e9f423278a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc4YjU2OWM2YTRjMjRlZGMzYmZkMzZhZGMxNjMwZTlmNDIzMjc4YQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-09-19T05:27:19Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-09-19T05:27:19Z"}, "message": "compiler: Fix multiple types with same name in function.\n\nFrom-SVN: r191461", "tree": {"sha": "cb0f3e4c8b179c8a4b73ed69005a7b2e283a36cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb0f3e4c8b179c8a4b73ed69005a7b2e283a36cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/878b569c6a4c24edc3bfd36adc1630e9f423278a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878b569c6a4c24edc3bfd36adc1630e9f423278a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/878b569c6a4c24edc3bfd36adc1630e9f423278a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878b569c6a4c24edc3bfd36adc1630e9f423278a/comments", "author": null, "committer": null, "parents": [{"sha": "06e28db05e78dc0c785b9539f811f5091ee87dd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e28db05e78dc0c785b9539f811f5091ee87dd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06e28db05e78dc0c785b9539f811f5091ee87dd2"}], "stats": {"total": 141, "additions": 115, "deletions": 26}, "files": [{"sha": "b1313ab8979b290eecf44e5a97a0a6e4ee697729", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878b569c6a4c24edc3bfd36adc1630e9f423278a/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878b569c6a4c24edc3bfd36adc1630e9f423278a/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=878b569c6a4c24edc3bfd36adc1630e9f423278a", "patch": "@@ -994,9 +994,19 @@ Named_object::get_id(Gogo* gogo)\n     }\n   if (this->is_type())\n     {\n-      const Named_object* in_function = this->type_value()->in_function();\n+      unsigned int index;\n+      const Named_object* in_function = this->type_value()->in_function(&index);\n       if (in_function != NULL)\n-\tdecl_name += '$' + Gogo::unpack_hidden_name(in_function->name());\n+\t{\n+\t  decl_name += '$' + Gogo::unpack_hidden_name(in_function->name());\n+\t  if (index > 0)\n+\t    {\n+\t      char buf[30];\n+\t      snprintf(buf, sizeof buf, \"%u\", index);\n+\t      decl_name += '$';\n+\t      decl_name += buf;\n+\t    }\n+\t}\n     }\n   return get_identifier_from_string(decl_name);\n }"}, {"sha": "06f0369b2eb62a0e9a075c03ecde60073b271bce", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878b569c6a4c24edc3bfd36adc1630e9f423278a/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878b569c6a4c24edc3bfd36adc1630e9f423278a/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=878b569c6a4c24edc3bfd36adc1630e9f423278a", "patch": "@@ -1056,7 +1056,15 @@ Gogo::add_type(const std::string& name, Type* type, Location location)\n   Named_object* no = this->current_bindings()->add_type(name, NULL, type,\n \t\t\t\t\t\t\tlocation);\n   if (!this->in_global_scope() && no->is_type())\n-    no->type_value()->set_in_function(this->functions_.back().function);\n+    {\n+      Named_object* f = this->functions_.back().function;\n+      unsigned int index;\n+      if (f->is_function())\n+\tindex = f->func_value()->new_local_type_index();\n+      else\n+\tindex = 0;\n+      no->type_value()->set_in_function(f, index);\n+    }\n }\n \n // Add a named type.\n@@ -1078,7 +1086,12 @@ Gogo::declare_type(const std::string& name, Location location)\n   if (!this->in_global_scope() && no->is_type_declaration())\n     {\n       Named_object* f = this->functions_.back().function;\n-      no->type_declaration_value()->set_in_function(f);\n+      unsigned int index;\n+      if (f->is_function())\n+\tindex = f->func_value()->new_local_type_index();\n+      else\n+\tindex = 0;\n+      no->type_declaration_value()->set_in_function(f, index);\n     }\n   return no;\n }\n@@ -3042,9 +3055,10 @@ Gogo::convert_named_types_in_bindings(Bindings* bindings)\n Function::Function(Function_type* type, Function* enclosing, Block* block,\n \t\t   Location location)\n   : type_(type), enclosing_(enclosing), results_(NULL),\n-    closure_var_(NULL), block_(block), location_(location), fndecl_(NULL),\n-    defer_stack_(NULL), results_are_named_(false), calls_recover_(false),\n-    is_recover_thunk_(false), has_recover_thunk_(false)\n+    closure_var_(NULL), block_(block), location_(location), labels_(),\n+    local_type_count_(0), fndecl_(NULL), defer_stack_(NULL),\n+    results_are_named_(false), calls_recover_(false), is_recover_thunk_(false),\n+    has_recover_thunk_(false)\n {\n }\n \n@@ -4652,9 +4666,10 @@ Named_object::set_type_value(Named_type* named_type)\n   go_assert(this->classification_ == NAMED_OBJECT_TYPE_DECLARATION);\n   Type_declaration* td = this->u_.type_declaration;\n   td->define_methods(named_type);\n-  Named_object* in_function = td->in_function();\n+  unsigned int index;\n+  Named_object* in_function = td->in_function(&index);\n   if (in_function != NULL)\n-    named_type->set_in_function(in_function);\n+    named_type->set_in_function(in_function, index);\n   delete td;\n   this->classification_ = NAMED_OBJECT_TYPE;\n   this->u_.type_value = named_type;"}, {"sha": "efd31f1d727d79dbbe24caadf9f7107a21329423", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878b569c6a4c24edc3bfd36adc1630e9f423278a/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878b569c6a4c24edc3bfd36adc1630e9f423278a/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=878b569c6a4c24edc3bfd36adc1630e9f423278a", "patch": "@@ -963,6 +963,11 @@ class Function\n   void\n   check_labels() const;\n \n+  // Note that a new local type has been added.  Return its index.\n+  unsigned int\n+  new_local_type_index()\n+  { return this->local_type_count_++; }\n+\n   // Whether this function calls the predeclared recover function.\n   bool\n   calls_recover() const\n@@ -1084,6 +1089,8 @@ class Function\n   Location location_;\n   // Labels defined or referenced in the function.\n   Labels labels_;\n+  // The number of local types defined in this function.\n+  unsigned int local_type_count_;\n   // The function decl.\n   tree fndecl_;\n   // The defer stack variable.  A pointer to this variable is used to\n@@ -1638,8 +1645,8 @@ class Type_declaration\n {\n  public:\n   Type_declaration(Location location)\n-    : location_(location), in_function_(NULL), methods_(),\n-      issued_warning_(false)\n+    : location_(location), in_function_(NULL), in_function_index_(0),\n+      methods_(), issued_warning_(false)\n   { }\n \n   // Return the location.\n@@ -1650,13 +1657,19 @@ class Type_declaration\n   // Return the function in which this type is declared.  This will\n   // return NULL for a type declared in global scope.\n   Named_object*\n-  in_function()\n-  { return this->in_function_; }\n+  in_function(unsigned int* pindex)\n+  {\n+    *pindex = this->in_function_index_;\n+    return this->in_function_;\n+  }\n \n   // Set the function in which this type is declared.\n   void\n-  set_in_function(Named_object* f)\n-  { this->in_function_ = f; }\n+  set_in_function(Named_object* f, unsigned int index)\n+  {\n+    this->in_function_ = f;\n+    this->in_function_index_ = index;\n+  }\n \n   // Add a method to this type.  This is used when methods are defined\n   // before the type.\n@@ -1689,6 +1702,8 @@ class Type_declaration\n   // If this type is declared in a function, a pointer back to the\n   // function in which it is defined.\n   Named_object* in_function_;\n+  // The index of this type in IN_FUNCTION_.\n+  unsigned int in_function_index_;\n   // Methods defined before the type is defined.\n   Methods methods_;\n   // True if we have issued a warning about a use of this type"}, {"sha": "d527787ca5a29225fd428edbe43510fecbc9f5b2", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878b569c6a4c24edc3bfd36adc1630e9f423278a/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878b569c6a4c24edc3bfd36adc1630e9f423278a/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=878b569c6a4c24edc3bfd36adc1630e9f423278a", "patch": "@@ -1286,7 +1286,8 @@ Type::type_descriptor_var_name(Gogo* gogo, Named_type* nt)\n     return \"__go_td_\" + this->mangled_name(gogo);\n \n   Named_object* no = nt->named_object();\n-  const Named_object* in_function = nt->in_function();\n+  unsigned int index;\n+  const Named_object* in_function = nt->in_function(&index);\n   std::string ret = \"__go_tdn_\";\n   if (nt->is_builtin())\n     go_assert(in_function == NULL);\n@@ -1301,6 +1302,13 @@ Type::type_descriptor_var_name(Gogo* gogo, Named_type* nt)\n \t{\n \t  ret.append(Gogo::unpack_hidden_name(in_function->name()));\n \t  ret.append(1, '.');\n+\t  if (index > 0)\n+\t    {\n+\t      char buf[30];\n+\t      snprintf(buf, sizeof buf, \"%u\", index);\n+\t      ret.append(buf);\n+\t      ret.append(1, '.');\n+\t    }\n \t}\n     }\n \n@@ -1737,9 +1745,19 @@ Type::specific_type_functions(Gogo* gogo, Named_type* name,\n     {\n       // This name is already hidden or not as appropriate.\n       base_name = name->name();\n-      const Named_object* in_function = name->in_function();\n+      unsigned int index;\n+      const Named_object* in_function = name->in_function(&index);\n       if (in_function != NULL)\n-\tbase_name += '$' + Gogo::unpack_hidden_name(in_function->name());\n+\t{\n+\t  base_name += '$' + Gogo::unpack_hidden_name(in_function->name());\n+\t  if (index > 0)\n+\t    {\n+\t      char buf[30];\n+\t      snprintf(buf, sizeof buf, \"%u\", index);\n+\t      base_name += '$';\n+\t      base_name += buf;\n+\t    }\n+\t}\n     }\n   std::string hash_name = base_name + \"$hash\";\n   std::string equal_name = base_name + \"$equal\";\n@@ -1980,10 +1998,19 @@ Type::uncommon_type_constructor(Gogo* gogo, Type* uncommon_type,\n \t\t\t\t     ? gogo->pkgpath()\n \t\t\t\t     : package->pkgpath());\n \t  n.assign(pkgpath);\n-\t  if (name->in_function() != NULL)\n+\t  unsigned int index;\n+\t  const Named_object* in_function = name->in_function(&index);\n+\t  if (in_function != NULL)\n \t    {\n \t      n.append(1, '.');\n-\t      n.append(Gogo::unpack_hidden_name(name->in_function()->name()));\n+\t      n.append(Gogo::unpack_hidden_name(in_function->name()));\n+\t      if (index > 0)\n+\t\t{\n+\t\t  char buf[30];\n+\t\t  snprintf(buf, sizeof buf, \"%u\", index);\n+\t\t  n.append(1, '.');\n+\t\t  n.append(buf);\n+\t\t}\n \t    }\n \t  s = Expression::make_string(n, bloc);\n \t  vals->push_back(Expression::make_unary(OPERATOR_AND, s, bloc));\n@@ -8351,6 +8378,13 @@ Named_type::do_reflection(Gogo* gogo, std::string* ret) const\n     {\n       ret->append(Gogo::unpack_hidden_name(this->in_function_->name()));\n       ret->push_back('$');\n+      if (this->in_function_index_ > 0)\n+\t{\n+\t  char buf[30];\n+\t  snprintf(buf, sizeof buf, \"%u\", this->in_function_index_);\n+\t  ret->append(buf);\n+\t  ret->push_back('$');\n+\t}\n     }\n   ret->append(Gogo::unpack_hidden_name(this->named_object_->name()));\n }\n@@ -8380,6 +8414,13 @@ Named_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n \t{\n \t  name.append(Gogo::unpack_hidden_name(this->in_function_->name()));\n \t  name.append(1, '$');\n+\t  if (this->in_function_index_ > 0)\n+\t    {\n+\t      char buf[30];\n+\t      snprintf(buf, sizeof buf, \"%u\", this->in_function_index_);\n+\t      name.append(buf);\n+\t      name.append(1, '$');\n+\t    }\n \t}\n     }\n   name.append(Gogo::unpack_hidden_name(no->name()));"}, {"sha": "7b879240e3ab3848502a5affe1822eecbc0abca7", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878b569c6a4c24edc3bfd36adc1630e9f423278a/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878b569c6a4c24edc3bfd36adc1630e9f423278a/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=878b569c6a4c24edc3bfd36adc1630e9f423278a", "patch": "@@ -2623,8 +2623,8 @@ class Named_type : public Type\n  public:\n   Named_type(Named_object* named_object, Type* type, Location location)\n     : Type(TYPE_NAMED),\n-      named_object_(named_object), in_function_(NULL), type_(type),\n-      local_methods_(NULL), all_methods_(NULL),\n+      named_object_(named_object), in_function_(NULL), in_function_index_(0),\n+      type_(type), local_methods_(NULL), all_methods_(NULL),\n       interface_method_tables_(NULL), pointer_interface_method_tables_(NULL),\n       location_(location), named_btype_(NULL), dependencies_(),\n       is_visible_(true), is_error_(false), is_placeholder_(false),\n@@ -2651,13 +2651,19 @@ class Named_type : public Type\n   // Return the function in which this type is defined.  This will\n   // return NULL for a type defined in global scope.\n   const Named_object*\n-  in_function() const\n-  { return this->in_function_; }\n+  in_function(unsigned int *pindex) const\n+  {\n+    *pindex = this->in_function_index_;\n+    return this->in_function_;\n+  }\n \n   // Set the function in which this type is defined.\n   void\n-  set_in_function(Named_object* f)\n-  { this->in_function_ = f; }\n+  set_in_function(Named_object* f, unsigned int index)\n+  {\n+    this->in_function_ = f;\n+    this->in_function_index_ = index;\n+  }\n \n   // Return the name of the type.\n   const std::string&\n@@ -2865,6 +2871,8 @@ class Named_type : public Type\n   // If this type is defined in a function, a pointer back to the\n   // function in which it is defined.\n   Named_object* in_function_;\n+  // The index of this type in IN_FUNCTION_.\n+  unsigned int in_function_index_;\n   // The actual type.\n   Type* type_;\n   // The list of methods defined for this type.  Any named type can"}]}