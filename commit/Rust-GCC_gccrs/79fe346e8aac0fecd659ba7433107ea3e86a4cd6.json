{"sha": "79fe346e8aac0fecd659ba7433107ea3e86a4cd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlmZTM0NmU4YWFjMGZlY2Q2NTliYTc0MzMxMDdlYTNlODZhNGNkNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-10-03T23:28:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-10-03T23:28:15Z"}, "message": "typeck.c (require_complete_type_sfinae): Add complain parm to...\n\n\t* typeck.c (require_complete_type_sfinae): Add complain parm to...\n\t(require_complete_type): ...this function.\n\t(cp_build_array_ref, convert_arguments): Use it.\n\t(convert_for_initialization, cp_build_modify_expr): Likewise.\n\t* cp-tree.h: Declare it.\n\t* call.c (build_over_call): Use it.\n\nFrom-SVN: r164918", "tree": {"sha": "591b863df38402e3a26c6e201f36025b6da5f227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/591b863df38402e3a26c6e201f36025b6da5f227"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79fe346e8aac0fecd659ba7433107ea3e86a4cd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79fe346e8aac0fecd659ba7433107ea3e86a4cd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79fe346e8aac0fecd659ba7433107ea3e86a4cd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79fe346e8aac0fecd659ba7433107ea3e86a4cd6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82a1c2fe690f15bfa0b91b54a7f1746acad0a1ef"}], "stats": {"total": 53, "additions": 45, "deletions": 8}, "files": [{"sha": "c5c40f8bee028c09697eb69c725b93be8da3e959", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe346e8aac0fecd659ba7433107ea3e86a4cd6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe346e8aac0fecd659ba7433107ea3e86a4cd6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=79fe346e8aac0fecd659ba7433107ea3e86a4cd6", "patch": "@@ -1,3 +1,12 @@\n+2010-10-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* typeck.c (require_complete_type_sfinae): Add complain parm to...\n+\t(require_complete_type): ...this function.\n+\t(cp_build_array_ref, convert_arguments): Use it.\n+\t(convert_for_initialization, cp_build_modify_expr): Likewise.\n+\t* cp-tree.h: Declare it.\n+\t* call.c (build_over_call): Use it.\n+\n 2010-09-30  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tmerge from FSF 'apple/trunk' branch."}, {"sha": "e0911ac45d3d92d523de6286b05154fafd1594cf", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe346e8aac0fecd659ba7433107ea3e86a4cd6/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe346e8aac0fecd659ba7433107ea3e86a4cd6/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=79fe346e8aac0fecd659ba7433107ea3e86a4cd6", "patch": "@@ -5655,7 +5655,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       if (TREE_THIS_VOLATILE (fn) && cfun)\n \tcurrent_function_returns_abnormally = 1;\n       if (!VOID_TYPE_P (return_type))\n-\trequire_complete_type (return_type);\n+\trequire_complete_type_sfinae (return_type, complain);\n       return convert_from_reference (expr);\n     }\n "}, {"sha": "6ce10e6af2cacb6ffe5bca96db48a93750c8aeec", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe346e8aac0fecd659ba7433107ea3e86a4cd6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe346e8aac0fecd659ba7433107ea3e86a4cd6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=79fe346e8aac0fecd659ba7433107ea3e86a4cd6", "patch": "@@ -5432,6 +5432,7 @@ extern int string_conv_p\t\t\t(const_tree, const_tree, int);\n extern tree cp_truthvalue_conversion\t\t(tree);\n extern tree condition_conversion\t\t(tree);\n extern tree require_complete_type\t\t(tree);\n+extern tree require_complete_type_sfinae\t(tree, tsubst_flags_t);\n extern tree complete_type\t\t\t(tree);\n extern tree complete_type_or_else\t\t(tree, tree);\n extern tree complete_type_or_maybe_complain\t(tree, tree, tsubst_flags_t);"}, {"sha": "b2b8e5f5f78ab9354908a8af9aaff6134a8ae4cc", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe346e8aac0fecd659ba7433107ea3e86a4cd6/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe346e8aac0fecd659ba7433107ea3e86a4cd6/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=79fe346e8aac0fecd659ba7433107ea3e86a4cd6", "patch": "@@ -64,11 +64,11 @@ static int convert_arguments (tree, VEC(tree,gc) **, tree, int,\n \n /* Do `exp = require_complete_type (exp);' to make sure exp\n    does not have an incomplete type.  (That includes void types.)\n-   Returns the error_mark_node if the VALUE does not have\n+   Returns error_mark_node if the VALUE does not have\n    complete type when this function returns.  */\n \n tree\n-require_complete_type (tree value)\n+require_complete_type_sfinae (tree value, tsubst_flags_t complain)\n {\n   tree type;\n \n@@ -87,12 +87,18 @@ require_complete_type (tree value)\n   if (COMPLETE_TYPE_P (type))\n     return value;\n \n-  if (complete_type_or_else (type, value))\n+  if (complete_type_or_maybe_complain (type, value, complain))\n     return value;\n   else\n     return error_mark_node;\n }\n \n+tree\n+require_complete_type (tree value)\n+{\n+  return require_complete_type_sfinae (value, tf_warning_or_error);\n+}\n+\n /* Try to complete TYPE, if it is incomplete.  For example, if TYPE is\n    a template instantiation, do the instantiation.  Returns TYPE,\n    whether or not it could be completed, unless something goes\n@@ -3039,7 +3045,8 @@ cp_build_array_ref (location_t loc, tree array, tree idx,\n \t|= (CP_TYPE_VOLATILE_P (type) | TREE_SIDE_EFFECTS (array));\n       TREE_THIS_VOLATILE (rval)\n \t|= (CP_TYPE_VOLATILE_P (type) | TREE_THIS_VOLATILE (array));\n-      ret = require_complete_type (fold_if_not_in_template (rval));\n+      ret = require_complete_type_sfinae (fold_if_not_in_template (rval),\n+\t\t\t\t\t  complain);\n       protected_set_expr_location (ret, loc);\n       return ret;\n     }\n@@ -3542,7 +3549,7 @@ convert_arguments (tree typelist, VEC(tree,gc) **values, tree fndecl,\n \t    /* Don't do ellipsis conversion for __built_in_constant_p\n \t       as this will result in spurious errors for non-trivial\n \t       types.  */\n-\t    val = require_complete_type (val);\n+\t    val = require_complete_type_sfinae (val, complain);\n \t  else\n \t    val = convert_arg_to_ellipsis (val);\n \n@@ -6744,7 +6751,7 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n     }\n   else\n     {\n-      lhs = require_complete_type (lhs);\n+      lhs = require_complete_type_sfinae (lhs, complain);\n       if (lhs == error_mark_node)\n \treturn error_mark_node;\n \n@@ -7592,7 +7599,7 @@ convert_for_initialization (tree exp, tree type, tree rhs, int flags,\n     }\n \n   if (exp != 0)\n-    exp = require_complete_type (exp);\n+    exp = require_complete_type_sfinae (exp, complain);\n   if (exp == error_mark_node)\n     return error_mark_node;\n "}, {"sha": "269e4e000cc74dd04ef24e5f29f4c1983a47a470", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe346e8aac0fecd659ba7433107ea3e86a4cd6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe346e8aac0fecd659ba7433107ea3e86a4cd6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=79fe346e8aac0fecd659ba7433107ea3e86a4cd6", "patch": "@@ -1,3 +1,7 @@\n+2010-10-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/sfinae5.C: New.\n+\n 2010-10-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR tree-optimization/45720"}, {"sha": "8474fb314312a93904f536229f1d99cfcb6af309", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae5.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe346e8aac0fecd659ba7433107ea3e86a4cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe346e8aac0fecd659ba7433107ea3e86a4cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae5.C?ref=79fe346e8aac0fecd659ba7433107ea3e86a4cd6", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options -std=c++0x }\n+\n+template<class T>\n+T&& create();\n+\n+template <class T, class U,\n+\t  class = decltype(create<T>() = create<U>())\n+\t  >\n+char test(int);\n+\n+template <class, class>\n+double test(...);\n+\n+int main() {\n+  test<int[], int[]>(0); // #1\n+}"}]}