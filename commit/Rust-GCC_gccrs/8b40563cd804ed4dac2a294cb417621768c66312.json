{"sha": "8b40563cd804ed4dac2a294cb417621768c66312", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI0MDU2M2NkODA0ZWQ0ZGFjMmEyOTRjYjQxNzYyMTc2OGM2NjMxMg==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1993-04-09T23:11:51Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1993-04-09T23:11:51Z"}, "message": "(comptypes, convert_for_assignment): Check for Objective-C protocols (non-reflexive use of maybe_objc_comptypes).\n\n(comptypes, convert_for_assignment): Check for\n\tObjective-C protocols (non-reflexive use of maybe_objc_comptypes).\n\t(comp_target_types): Rewrite so that maybe_objc_comptypes checks\n\tprotocols when processing an Objective-C module.  For C modules,\n\tthe code path is unchanged.\n\t(convert_for_assignment): Improve the error message for\n\tincompatible message arguments.\n\nFrom-SVN: r4067", "tree": {"sha": "1bd9acc2245fc38a14f03b2cfe9ae727e53dad05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bd9acc2245fc38a14f03b2cfe9ae727e53dad05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b40563cd804ed4dac2a294cb417621768c66312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b40563cd804ed4dac2a294cb417621768c66312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b40563cd804ed4dac2a294cb417621768c66312", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b40563cd804ed4dac2a294cb417621768c66312/comments", "author": null, "committer": null, "parents": [{"sha": "a604ca2693ddad05591634f0d298e4581c150649", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a604ca2693ddad05591634f0d298e4581c150649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a604ca2693ddad05591634f0d298e4581c150649"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "4d1a694b8d293eec20a7379dd7eff02c5e4734ce", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b40563cd804ed4dac2a294cb417621768c66312/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b40563cd804ed4dac2a294cb417621768c66312/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=8b40563cd804ed4dac2a294cb417621768c66312", "patch": "@@ -460,7 +460,7 @@ comptypes (type1, type2)\n       }\n \n     case RECORD_TYPE:\n-      return maybe_objc_comptypes (t1, t2);\n+      return maybe_objc_comptypes (t1, t2, 0);\n     }\n   return 0;\n }\n@@ -472,8 +472,30 @@ static int\n comp_target_types (ttl, ttr)\n      tree ttl, ttr;\n {\n-  int val = comptypes (TYPE_MAIN_VARIANT (TREE_TYPE (ttl)),\n-\t\t       TYPE_MAIN_VARIANT (TREE_TYPE (ttr)));\n+  int val = 0;\n+\n+  if (doing_objc_thang)\n+    {\n+      /* Give maybe_objc_comptypes a crack at letting these types through.  */\n+      val = maybe_objc_comptypes (ttl, ttr, 1);\n+\n+      if (val != 1 && !pedantic)\n+\t{\n+\t  /* Ignore pointer qualifiers recursively.  This way char **\n+\t     and const char ** are compatible.  */\n+\t  if (TREE_CODE (ttl) == POINTER_TYPE\n+\t      && TREE_CODE (ttr) == POINTER_TYPE)\n+\t    return comp_target_types (TYPE_MAIN_VARIANT (TREE_TYPE (ttl)),\n+\t\t\t\t      TYPE_MAIN_VARIANT (TREE_TYPE (ttr)));\n+\t  else\n+\t    return comptypes (ttl, ttr);\n+\t}\n+    }\n+\n+  if (val != 1)\n+    val = comptypes (TYPE_MAIN_VARIANT (TREE_TYPE (ttl)),\n+\t\t     TYPE_MAIN_VARIANT (TREE_TYPE (ttr)));\n+\n   if (val == 2 && pedantic)\n     pedwarn (\"types are not quite compatible\");\n   return val;\n@@ -4118,6 +4140,9 @@ convert_for_assignment (type, rhs, errtype, fundecl, funname, parmnum)\n   if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (rhstype))\n     {\n       overflow_warning (rhs);\n+      /* Check for Objective-C protocols.  This will issue a warning if\n+\t there are protocol violations.  No need to use the return value.  */\n+      maybe_objc_comptypes (type, rhstype, 0);\n       return rhs;\n     }\n \n@@ -4232,8 +4257,16 @@ convert_for_assignment (type, rhs, errtype, fundecl, funname, parmnum)\n   if (!errtype)\n     {\n       if (funname)\n-\terror (\"incompatible type for argument %d of `%s'\",\n-\t       parmnum, IDENTIFIER_POINTER (funname));\n+ \t{\n+ \t  tree selector = maybe_building_objc_message_expr ();\n+ \n+ \t  if (selector && parmnum > 2)\n+ \t    error (\"incompatible type for argument %d of `%s'\",\n+\t\t   parmnum - 2, IDENTIFIER_POINTER (selector));\n+ \t  else\n+\t    error (\"incompatible type for argument %d of `%s'\",\n+\t\t   parmnum, IDENTIFIER_POINTER (funname));\n+\t}\n       else\n \terror (\"incompatible type for argument %d of indirect function call\",\n \t       parmnum);"}]}