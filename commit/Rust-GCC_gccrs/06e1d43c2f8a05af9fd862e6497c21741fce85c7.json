{"sha": "06e1d43c2f8a05af9fd862e6497c21741fce85c7", "node_id": "C_kwDOANBUbNoAKDA2ZTFkNDNjMmY4YTA1YWY5ZmQ4NjJlNjQ5N2MyMTc0MWZjZTg1Yzc", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-03T18:01:01Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-03T19:27:24Z"}, "message": "gccrs: Fix name-resolution to be permissive and carry on\n\nThere are a few edge cases when resolving TypePaths that we cannot fully\nresolve to an explicit node_id and this is expected. So for example\n\n  <A as B>::foo\n\nA and B are simple Type paths and thats 100% but the segment foo cannot be\n100% resolved to an explicit node id as this requires type-resolution to\nfind the correct path. So when we have complex paths such as:\n\n  <<A as B>::foo as C>\n\nThe ::foo part will return UNKNOWN_NODEId and we return early and think its\na failure case but its not necessarily a failure but we need to make sure\nto name resolve C so when we do type-resolution we can resolve C properly.\n\nAddresses #1524\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>\n\ngcc/rust/ChangeLog:\n\n\t* resolve/rust-ast-resolve-type.cc (ResolveRelativeQualTypePath::resolve_qual_seg): fix\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/parse_associated_type_as_generic_arg3.rs: remove -fsyntax-only", "tree": {"sha": "9953daf4e7b40619eeb2a8fbdad2c593dbcff7da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9953daf4e7b40619eeb2a8fbdad2c593dbcff7da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06e1d43c2f8a05af9fd862e6497c21741fce85c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e1d43c2f8a05af9fd862e6497c21741fce85c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06e1d43c2f8a05af9fd862e6497c21741fce85c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e1d43c2f8a05af9fd862e6497c21741fce85c7/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f71f25af741238e911d38874da18a5654fc836f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71f25af741238e911d38874da18a5654fc836f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f71f25af741238e911d38874da18a5654fc836f7"}], "stats": {"total": 18, "additions": 5, "deletions": 13}, "files": [{"sha": "f315985450e611425c4492d522117437676da9f3", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e1d43c2f8a05af9fd862e6497c21741fce85c7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e1d43c2f8a05af9fd862e6497c21741fce85c7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=06e1d43c2f8a05af9fd862e6497c21741fce85c7", "patch": "@@ -321,16 +321,10 @@ ResolveRelativeQualTypePath::resolve_qual_seg (AST::QualifiedPathType &seg)\n     }\n \n   auto type = seg.get_type ().get ();\n-  NodeId type_resolved_node = ResolveType::go (type);\n-  if (type_resolved_node == UNKNOWN_NODEID)\n-    return false;\n-\n-  if (!seg.has_as_clause ())\n-    return true;\n+  ResolveType::go (type);\n \n-  NodeId trait_resolved_node = ResolveType::go (&seg.get_as_type_path ());\n-  if (trait_resolved_node == UNKNOWN_NODEID)\n-    return false;\n+  if (seg.has_as_clause ())\n+    ResolveType::go (&seg.get_as_type_path ());\n \n   return true;\n }"}, {"sha": "72c1b95c09a5056c9bb82feaea0fab6b0e931f58", "filename": "gcc/testsuite/rust/compile/parse_associated_type_as_generic_arg3.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e1d43c2f8a05af9fd862e6497c21741fce85c7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_associated_type_as_generic_arg3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e1d43c2f8a05af9fd862e6497c21741fce85c7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_associated_type_as_generic_arg3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fparse_associated_type_as_generic_arg3.rs?ref=06e1d43c2f8a05af9fd862e6497c21741fce85c7", "patch": "@@ -1,5 +1,3 @@\n-// { dg-additional-options \"-fsyntax-only\" }\n-\n trait Bar {\n     type B;\n \n@@ -35,7 +33,7 @@ impl Tata for f32 {\n     fn tata() {}\n }\n \n-struct S;\n+struct S; // { dg-warning \"struct is never constructed\" }\n \n impl Bar for i32 {\n     type B = u32;\n@@ -54,6 +52,6 @@ enum Maybe<T> {\n     Nothing,\n }\n \n-fn foo() -> Maybe<<<<<S as Foo>::A as Bar>::B as Toto>::C as Tata>::D> {\n+pub fn foo() -> Maybe<<<<<S as Foo>::A as Bar>::B as Toto>::C as Tata>::D> {\n     Maybe::Something(15)\n }"}]}