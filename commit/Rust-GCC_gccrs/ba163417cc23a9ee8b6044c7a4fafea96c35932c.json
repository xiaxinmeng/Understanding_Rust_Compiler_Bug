{"sha": "ba163417cc23a9ee8b6044c7a4fafea96c35932c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmExNjM0MTdjYzIzYTllZThiNjA0NGM3YTRmYWZlYTk2YzM1OTMyYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-05-18T14:54:23Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-05-18T14:54:23Z"}, "message": "arm-opts.h (enum arm_fp16_format_type, [...]): Move from arm.h.\n\n\t* config/arm/arm-opts.h (enum arm_fp16_format_type, enum\n\tarm_abi_type, enum float_abi_type, enum arm_tp_type): Move from\n\tarm.h.\n\t* config/arm/arm.c (arm_float_abi, arm_fp16_format, arm_abi,\n\ttarget_thread_pointer, arm_structure_size_boundary, struct\n\tfloat_abi, all_float_abis, struct fp16_format, all_fp16_formats,\n\tstruct abi_name, arm_all_abis): Remove.\n\t(arm_option_override) Don't process most enumerated option values\n\there.  Don't process target_fpe_name here.  Work with integer not\n\tstring for structure size boundary; use separate diagnostics for\n\teach case.\n\t* config/arm/arm.h (enum float_abi_type, enum\n\tarm_fp16_format_type, enum arm_abi_type, enum arm_tp_type): Move\n\tto arm-opts.h.\n\t(arm_float_abi, arm_fp16_format, arm_abi, target_thread_pointer,\n\tarm_structure_size_boundary): Remove.\n\t* config/arm/arm.opt (mabi=): Use Enum and Init.\n\t(arm_abi_type): New Enum and EnumValue entries.\n\t(mfloat-abi=): Use Enum and Init.\n\t(float_abi_type): New Enum and EnumValue entries.\n\t(mfp=, mfpe=): Replace by separate Alias entries for each\n\targument.\n\t(mfp16-format=): Use Enum and Init.\n\t(arm_fp16_format_type): New Enum and EnumValue entries.\n\t(mstructure-size-boundary=): Use UInteger and Init.\n\t(mtp=): Use Enum and Init.\n\t(arm_tp_type): New Enum and EnumValue entries.\n\nFrom-SVN: r173864", "tree": {"sha": "318ff76ff85829869661caba994a4e670a8208c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/318ff76ff85829869661caba994a4e670a8208c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba163417cc23a9ee8b6044c7a4fafea96c35932c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba163417cc23a9ee8b6044c7a4fafea96c35932c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba163417cc23a9ee8b6044c7a4fafea96c35932c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba163417cc23a9ee8b6044c7a4fafea96c35932c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "179184e3e58fdf0334e255600022f93d20f5eed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/179184e3e58fdf0334e255600022f93d20f5eed7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/179184e3e58fdf0334e255600022f93d20f5eed7"}], "stats": {"total": 361, "additions": 156, "deletions": 205}, "files": [{"sha": "4f6d2c3359fd96b6db5f4234bcae69b49e5c249f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba163417cc23a9ee8b6044c7a4fafea96c35932c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba163417cc23a9ee8b6044c7a4fafea96c35932c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba163417cc23a9ee8b6044c7a4fafea96c35932c", "patch": "@@ -1,3 +1,33 @@\n+2011-05-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/arm/arm-opts.h (enum arm_fp16_format_type, enum\n+\tarm_abi_type, enum float_abi_type, enum arm_tp_type): Move from\n+\tarm.h.\n+\t* config/arm/arm.c (arm_float_abi, arm_fp16_format, arm_abi,\n+\ttarget_thread_pointer, arm_structure_size_boundary, struct\n+\tfloat_abi, all_float_abis, struct fp16_format, all_fp16_formats,\n+\tstruct abi_name, arm_all_abis): Remove.\n+\t(arm_option_override) Don't process most enumerated option values\n+\there.  Don't process target_fpe_name here.  Work with integer not\n+\tstring for structure size boundary; use separate diagnostics for\n+\teach case.\n+\t* config/arm/arm.h (enum float_abi_type, enum\n+\tarm_fp16_format_type, enum arm_abi_type, enum arm_tp_type): Move\n+\tto arm-opts.h.\n+\t(arm_float_abi, arm_fp16_format, arm_abi, target_thread_pointer,\n+\tarm_structure_size_boundary): Remove.\n+\t* config/arm/arm.opt (mabi=): Use Enum and Init.\n+\t(arm_abi_type): New Enum and EnumValue entries.\n+\t(mfloat-abi=): Use Enum and Init.\n+\t(float_abi_type): New Enum and EnumValue entries.\n+\t(mfp=, mfpe=): Replace by separate Alias entries for each\n+\targument.\n+\t(mfp16-format=): Use Enum and Init.\n+\t(arm_fp16_format_type): New Enum and EnumValue entries.\n+\t(mstructure-size-boundary=): Use UInteger and Init.\n+\t(mtp=): Use Enum and Init.\n+\t(arm_tp_type): New Enum and EnumValue entries.\n+\n 2011-05-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/49018"}, {"sha": "c35224eaf5cd00534cbead35cd5abb98f2aad0f9", "filename": "gcc/config/arm/arm-opts.h", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba163417cc23a9ee8b6044c7a4fafea96c35932c/gcc%2Fconfig%2Farm%2Farm-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba163417cc23a9ee8b6044c7a4fafea96c35932c/gcc%2Fconfig%2Farm%2Farm-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-opts.h?ref=ba163417cc23a9ee8b6044c7a4fafea96c35932c", "patch": "@@ -33,4 +33,39 @@ enum processor_type\n   arm_none\n };\n \n+/* Which __fp16 format to use.\n+   The enumeration values correspond to the numbering for the\n+   Tag_ABI_FP_16bit_format attribute.\n+ */\n+enum arm_fp16_format_type\n+{\n+  ARM_FP16_FORMAT_NONE = 0,\n+  ARM_FP16_FORMAT_IEEE = 1,\n+  ARM_FP16_FORMAT_ALTERNATIVE = 2\n+};\n+\n+/* Which ABI to use.  */\n+enum arm_abi_type\n+{\n+  ARM_ABI_APCS,\n+  ARM_ABI_ATPCS,\n+  ARM_ABI_AAPCS,\n+  ARM_ABI_IWMMXT,\n+  ARM_ABI_AAPCS_LINUX\n+};\n+\n+enum float_abi_type\n+{\n+  ARM_FLOAT_ABI_SOFT,\n+  ARM_FLOAT_ABI_SOFTFP,\n+  ARM_FLOAT_ABI_HARD\n+};\n+\n+/* Which thread pointer access sequence to use.  */\n+enum arm_tp_type {\n+  TP_AUTO,\n+  TP_SOFT,\n+  TP_CP15\n+};\n+\n #endif"}, {"sha": "2b599346eddc83ce509a9fb458361bb611159690", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 18, "deletions": 153, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba163417cc23a9ee8b6044c7a4fafea96c35932c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba163417cc23a9ee8b6044c7a4fafea96c35932c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ba163417cc23a9ee8b6044c7a4fafea96c35932c", "patch": "@@ -636,21 +636,6 @@ int arm_fpu_attr;\n /* Which floating popint hardware to use.  */\n const struct arm_fpu_desc *arm_fpu_desc;\n \n-/* Whether to use floating point hardware.  */\n-enum float_abi_type arm_float_abi;\n-\n-/* Which __fp16 format to use.  */\n-enum arm_fp16_format_type arm_fp16_format;\n-\n-/* Which ABI to use.  */\n-enum arm_abi_type arm_abi;\n-\n-/* Which thread pointer model to use.  */\n-enum arm_tp_type target_thread_pointer = TP_AUTO;\n-\n-/* Used to parse -mstructure_size_boundary command line option.  */\n-int    arm_structure_size_boundary = DEFAULT_STRUCTURE_SIZE_BOUNDARY;\n-\n /* Used for Thumb call_via trampolines.  */\n rtx thumb_call_via_label[14];\n static int thumb_call_reg_needed;\n@@ -976,58 +961,6 @@ static const struct arm_fpu_desc all_fpus[] =\n };\n \n \n-struct float_abi\n-{\n-  const char * name;\n-  enum float_abi_type abi_type;\n-};\n-\n-\n-/* Available values for -mfloat-abi=.  */\n-\n-static const struct float_abi all_float_abis[] =\n-{\n-  {\"soft\",\tARM_FLOAT_ABI_SOFT},\n-  {\"softfp\",\tARM_FLOAT_ABI_SOFTFP},\n-  {\"hard\",\tARM_FLOAT_ABI_HARD}\n-};\n-\n-\n-struct fp16_format\n-{\n-  const char *name;\n-  enum arm_fp16_format_type fp16_format_type;\n-};\n-\n-\n-/* Available values for -mfp16-format=.  */\n-\n-static const struct fp16_format all_fp16_formats[] =\n-{\n-  {\"none\",\t\tARM_FP16_FORMAT_NONE},\n-  {\"ieee\",\t\tARM_FP16_FORMAT_IEEE},\n-  {\"alternative\",\tARM_FP16_FORMAT_ALTERNATIVE}\n-};\n-\n-\n-struct abi_name\n-{\n-  const char *name;\n-  enum arm_abi_type abi_type;\n-};\n-\n-\n-/* Available values for -mabi=.  */\n-\n-static const struct abi_name arm_all_abis[] =\n-{\n-  {\"apcs-gnu\",    ARM_ABI_APCS},\n-  {\"atpcs\",   ARM_ABI_ATPCS},\n-  {\"aapcs\",   ARM_ABI_AAPCS},\n-  {\"iwmmxt\",  ARM_ABI_IWMMXT},\n-  {\"aapcs-linux\",   ARM_ABI_AAPCS_LINUX}\n-};\n-\n /* Supported TLS relocations.  */\n \n enum tls_reloc {\n@@ -1447,39 +1380,6 @@ arm_option_override (void)\n   tune_flags = arm_selected_tune->flags;\n   current_tune = arm_selected_tune->tune;\n \n-  if (target_fp16_format_name)\n-    {\n-      for (i = 0; i < ARRAY_SIZE (all_fp16_formats); i++)\n-\t{\n-\t  if (streq (all_fp16_formats[i].name, target_fp16_format_name))\n-\t    {\n-\t      arm_fp16_format = all_fp16_formats[i].fp16_format_type;\n-\t      break;\n-\t    }\n-\t}\n-      if (i == ARRAY_SIZE (all_fp16_formats))\n-\terror (\"invalid __fp16 format option: -mfp16-format=%s\",\n-\t       target_fp16_format_name);\n-    }\n-  else\n-    arm_fp16_format = ARM_FP16_FORMAT_NONE;\n-\n-  if (target_abi_name)\n-    {\n-      for (i = 0; i < ARRAY_SIZE (arm_all_abis); i++)\n-\t{\n-\t  if (streq (arm_all_abis[i].name, target_abi_name))\n-\t    {\n-\t      arm_abi = arm_all_abis[i].abi_type;\n-\t      break;\n-\t    }\n-\t}\n-      if (i == ARRAY_SIZE (arm_all_abis))\n-\terror (\"invalid ABI option: -mabi=%s\", target_abi_name);\n-    }\n-  else\n-    arm_abi = ARM_DEFAULT_ABI;\n-\n   /* Make sure that the processor choice does not conflict with any of the\n      other command line choices.  */\n   if (TARGET_ARM && !(insn_flags & FL_NOTM))\n@@ -1607,17 +1507,6 @@ arm_option_override (void)\n   if (TARGET_IWMMXT_ABI && !TARGET_IWMMXT)\n     error (\"iwmmxt abi requires an iwmmxt capable cpu\");\n \n-  if (target_fpu_name == NULL && target_fpe_name != NULL)\n-    {\n-      if (streq (target_fpe_name, \"2\"))\n-\ttarget_fpu_name = \"fpe2\";\n-      else if (streq (target_fpe_name, \"3\"))\n-\ttarget_fpu_name = \"fpe3\";\n-      else\n-\terror (\"invalid floating point emulation option: -mfpe=%s\",\n-\t       target_fpe_name);\n-    }\n-\n   if (target_fpu_name == NULL)\n     {\n #ifdef FPUTYPE_DEFAULT\n@@ -1669,24 +1558,6 @@ arm_option_override (void)\n       gcc_unreachable();\n     }\n \n-  if (target_float_abi_name != NULL)\n-    {\n-      /* The user specified a FP ABI.  */\n-      for (i = 0; i < ARRAY_SIZE (all_float_abis); i++)\n-\t{\n-\t  if (streq (all_float_abis[i].name, target_float_abi_name))\n-\t    {\n-\t      arm_float_abi = all_float_abis[i].abi_type;\n-\t      break;\n-\t    }\n-\t}\n-      if (i == ARRAY_SIZE (all_float_abis))\n-\terror (\"invalid floating point abi: -mfloat-abi=%s\",\n-\t       target_float_abi_name);\n-    }\n-  else\n-    arm_float_abi = TARGET_DEFAULT_FLOAT_ABI;\n-\n   if (TARGET_AAPCS_BASED\n       && (arm_fpu_desc->model == ARM_FP_MODEL_FPA))\n     error (\"FPA is unsupported in the AAPCS\");\n@@ -1747,18 +1618,6 @@ arm_option_override (void)\n       && (tune_flags & FL_MODE32) == 0)\n     flag_schedule_insns = flag_schedule_insns_after_reload = 0;\n \n-  if (target_thread_switch)\n-    {\n-      if (strcmp (target_thread_switch, \"soft\") == 0)\n-\ttarget_thread_pointer = TP_SOFT;\n-      else if (strcmp (target_thread_switch, \"auto\") == 0)\n-\ttarget_thread_pointer = TP_AUTO;\n-      else if (strcmp (target_thread_switch, \"cp15\") == 0)\n-\ttarget_thread_pointer = TP_CP15;\n-      else\n-\terror (\"invalid thread pointer option: -mtp=%s\", target_thread_switch);\n-    }\n-\n   /* Use the cp15 method if it is available.  */\n   if (target_thread_pointer == TP_AUTO)\n     {\n@@ -1772,19 +1631,25 @@ arm_option_override (void)\n     error (\"can not use -mtp=cp15 with 16-bit Thumb\");\n \n   /* Override the default structure alignment for AAPCS ABI.  */\n-  if (TARGET_AAPCS_BASED)\n-    arm_structure_size_boundary = 8;\n-\n-  if (structure_size_string != NULL)\n+  if (!global_options_set.x_arm_structure_size_boundary)\n     {\n-      int size = strtol (structure_size_string, NULL, 0);\n-\n-      if (size == 8 || size == 32\n-\t  || (ARM_DOUBLEWORD_ALIGN && size == 64))\n-\tarm_structure_size_boundary = size;\n-      else\n-\twarning (0, \"structure size boundary can only be set to %s\",\n-\t\t ARM_DOUBLEWORD_ALIGN ? \"8, 32 or 64\": \"8 or 32\");\n+      if (TARGET_AAPCS_BASED)\n+\tarm_structure_size_boundary = 8;\n+    }\n+  else\n+    {\n+      if (arm_structure_size_boundary != 8\n+\t  && arm_structure_size_boundary != 32\n+\t  && !(ARM_DOUBLEWORD_ALIGN && arm_structure_size_boundary == 64))\n+\t{\n+\t  if (ARM_DOUBLEWORD_ALIGN)\n+\t    warning (0,\n+\t\t     \"structure size boundary can only be set to 8, 32 or 64\");\n+\t  else\n+\t    warning (0, \"structure size boundary can only be set to 8 or 32\");\n+\t  arm_structure_size_boundary\n+\t    = (TARGET_AAPCS_BASED ? 8 : DEFAULT_STRUCTURE_SIZE_BOUNDARY);\n+\t}\n     }\n \n   if (!TARGET_ARM && TARGET_VXWORKS_RTP && flag_pic)"}, {"sha": "86d842ddf4aa71f200e11776960fbc793a028953", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba163417cc23a9ee8b6044c7a4fafea96c35932c/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba163417cc23a9ee8b6044c7a4fafea96c35932c/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=ba163417cc23a9ee8b6044c7a4fafea96c35932c", "patch": "@@ -349,59 +349,17 @@ extern const struct arm_fpu_desc\n /* Which floating point hardware to schedule for.  */\n extern int arm_fpu_attr;\n \n-enum float_abi_type\n-{\n-  ARM_FLOAT_ABI_SOFT,\n-  ARM_FLOAT_ABI_SOFTFP,\n-  ARM_FLOAT_ABI_HARD\n-};\n-\n-extern enum float_abi_type arm_float_abi;\n-\n #ifndef TARGET_DEFAULT_FLOAT_ABI\n #define TARGET_DEFAULT_FLOAT_ABI ARM_FLOAT_ABI_SOFT\n #endif\n \n-/* Which __fp16 format to use.\n-   The enumeration values correspond to the numbering for the\n-   Tag_ABI_FP_16bit_format attribute.\n- */\n-enum arm_fp16_format_type\n-{\n-  ARM_FP16_FORMAT_NONE = 0,\n-  ARM_FP16_FORMAT_IEEE = 1,\n-  ARM_FP16_FORMAT_ALTERNATIVE = 2\n-};\n-\n-extern enum arm_fp16_format_type arm_fp16_format;\n #define LARGEST_EXPONENT_IS_NORMAL(bits) \\\n     ((bits) == 16 && arm_fp16_format == ARM_FP16_FORMAT_ALTERNATIVE)\n \n-/* Which ABI to use.  */\n-enum arm_abi_type\n-{\n-  ARM_ABI_APCS,\n-  ARM_ABI_ATPCS,\n-  ARM_ABI_AAPCS,\n-  ARM_ABI_IWMMXT,\n-  ARM_ABI_AAPCS_LINUX\n-};\n-\n-extern enum arm_abi_type arm_abi;\n-\n #ifndef ARM_DEFAULT_ABI\n #define ARM_DEFAULT_ABI ARM_ABI_APCS\n #endif\n \n-/* Which thread pointer access sequence to use.  */\n-enum arm_tp_type {\n-  TP_AUTO,\n-  TP_SOFT,\n-  TP_CP15\n-};\n-\n-extern enum arm_tp_type target_thread_pointer;\n-\n /* Nonzero if this chip supports the ARM Architecture 3M extensions.  */\n extern int arm_arch3m;\n \n@@ -614,7 +572,6 @@ extern int arm_arch_hwdiv;\n    0020D) page 2-20 says \"Structures are aligned on word boundaries\".\n    The AAPCS specifies a value of 8.  */\n #define STRUCTURE_SIZE_BOUNDARY arm_structure_size_boundary\n-extern int arm_structure_size_boundary;\n \n /* This is the value used to initialize arm_structure_size_boundary.  If a\n    particular arm target wants to change the default value it should change"}, {"sha": "96e4b864917179d59dbb98b22fb111e97e8d346b", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 73, "deletions": 9, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba163417cc23a9ee8b6044c7a4fafea96c35932c/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba163417cc23a9ee8b6044c7a4fafea96c35932c/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=ba163417cc23a9ee8b6044c7a4fafea96c35932c", "patch": "@@ -22,9 +22,28 @@ HeaderInclude\n config/arm/arm-opts.h\n \n mabi=\n-Target RejectNegative Joined Var(target_abi_name)\n+Target RejectNegative Joined Enum(arm_abi_type) Var(arm_abi) Init(ARM_DEFAULT_ABI)\n Specify an ABI\n \n+Enum\n+Name(arm_abi_type) Type(enum arm_abi_type)\n+Known ARM ABIs (for use with the -mabi= option):\n+\n+EnumValue\n+Enum(arm_abi_type) String(apcs-gnu) Value(ARM_ABI_APCS)\n+\n+EnumValue\n+Enum(arm_abi_type) String(atpcs) Value(ARM_ABI_ATPCS)\n+\n+EnumValue\n+Enum(arm_abi_type) String(aapcs) Value(ARM_ABI_AAPCS)\n+\n+EnumValue\n+Enum(arm_abi_type) String(iwmmxt) Value(ARM_ABI_IWMMXT)\n+\n+EnumValue\n+Enum(arm_abi_type) String(aapcs-linux) Value(ARM_ABI_AAPCS_LINUX)\n+\n mabort-on-noreturn\n Target Report Mask(ABORT_NORETURN)\n Generate a call to abort if a noreturn function returns\n@@ -76,22 +95,54 @@ Target RejectNegative Joined Enum(processor_type) Var(arm_cpu_option) Init(arm_n\n Specify the name of the target CPU\n \n mfloat-abi=\n-Target RejectNegative Joined Var(target_float_abi_name)\n+Target RejectNegative Joined Enum(float_abi_type) Var(arm_float_abi) Init(TARGET_DEFAULT_FLOAT_ABI)\n Specify if floating point hardware should be used\n \n-mfp=\n-Target RejectNegative Joined Undocumented Var(target_fpe_name)\n+Enum\n+Name(float_abi_type) Type(enum float_abi_type)\n+Known floating-point ABIs (for use with the -mfloat-abi= option):\n+\n+EnumValue\n+Enum(float_abi_type) String(soft) Value(ARM_FLOAT_ABI_SOFT)\n+\n+EnumValue\n+Enum(float_abi_type) String(softfp) Value(ARM_FLOAT_ABI_SOFTFP)\n+\n+EnumValue\n+Enum(float_abi_type) String(hard) Value(ARM_FLOAT_ABI_HARD)\n+\n+mfp=2\n+Target RejectNegative Undocumented Alias(mfpu=, fpe2)\n+\n+mfp=3\n+Target RejectNegative Undocumented Alias(mfpu=, fpe3)\n \n mfp16-format=\n-Target RejectNegative Joined Var(target_fp16_format_name)\n+Target RejectNegative Joined Enum(arm_fp16_format_type) Var(arm_fp16_format) Init(ARM_FP16_FORMAT_NONE)\n Specify the __fp16 floating-point format\n \n+Enum\n+Name(arm_fp16_format_type) Type(enum arm_fp16_format_type)\n+Known __fp16 formats (for use with the -mfp16-format= option):\n+\n+EnumValue\n+Enum(arm_fp16_format_type) String(none) Value(ARM_FP16_FORMAT_NONE)\n+\n+EnumValue\n+Enum(arm_fp16_format_type) String(ieee) Value(ARM_FP16_FORMAT_IEEE)\n+\n+EnumValue\n+Enum(arm_fp16_format_type) String(alternative) Value(ARM_FP16_FORMAT_ALTERNATIVE)\n+\n ;; Now ignored.\n mfpe\n Target RejectNegative Mask(FPE) Undocumented\n \n-mfpe=\n-Target RejectNegative Joined Undocumented Var(target_fpe_name)\n+mfpe=2\n+Target RejectNegative Undocumented Alias(mfpu=, fpe2)\n+\n+mfpe=3\n+Target RejectNegative Undocumented Alias(mfpu=, fpe3)\n \n mfpu=\n Target RejectNegative Joined Var(target_fpu_name)\n@@ -128,7 +179,7 @@ msoft-float\n Target RejectNegative Alias(mfloat-abi=, soft) Undocumented\n \n mstructure-size-boundary=\n-Target RejectNegative Joined Var(structure_size_string)\n+Target RejectNegative Joined UInteger Var(arm_structure_size_boundary) Init(DEFAULT_STRUCTURE_SIZE_BOUNDARY)\n Specify the minimum bit alignment of structures\n \n mthumb\n@@ -140,9 +191,22 @@ Target Report Mask(INTERWORK)\n Support calls between Thumb and ARM instruction sets\n \n mtp=\n-Target RejectNegative Joined Var(target_thread_switch)\n+Target RejectNegative Joined Enum(arm_tp_type) Var(target_thread_pointer) Init(TP_AUTO)\n Specify how to access the thread pointer\n \n+Enum\n+Name(arm_tp_type) Type(enum arm_tp_type)\n+Valid arguments to -mtp=:\n+\n+EnumValue\n+Enum(arm_tp_type) String(soft) Value(TP_SOFT)\n+\n+EnumValue\n+Enum(arm_tp_type) String(auto) Value(TP_AUTO)\n+\n+EnumValue\n+Enum(arm_tp_type) String(cp15) Value(TP_CP15)\n+\n mtpcs-frame\n Target Report Mask(TPCS_FRAME)\n Thumb: Generate (non-leaf) stack frames even if not needed"}]}