{"sha": "d9eb5318b600dc6aec71b231f38fbb16b100359d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDllYjUzMThiNjAwZGM2YWVjNzFiMjMxZjM4ZmJiMTZiMTAwMzU5ZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-06-21T12:00:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-06-21T12:00:47Z"}, "message": "re PR tree-optimization/32451 (ICE in verify_flow_info after DOM2)\n\n2007-06-21  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/32451\n\t* tree-ssa-threadupdate.c (thread_single_edge): Fixup edge flags.\n\n\t* g++.dg/torture/20070621-1.C: New testcase.\n\nFrom-SVN: r125916", "tree": {"sha": "973e458af9c6ab27a8175b9f1f57fd432983f886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/973e458af9c6ab27a8175b9f1f57fd432983f886"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9eb5318b600dc6aec71b231f38fbb16b100359d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9eb5318b600dc6aec71b231f38fbb16b100359d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9eb5318b600dc6aec71b231f38fbb16b100359d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9eb5318b600dc6aec71b231f38fbb16b100359d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a8257e58ac6213ce066a19950dcd4eda75f41e2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8257e58ac6213ce066a19950dcd4eda75f41e2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8257e58ac6213ce066a19950dcd4eda75f41e2a"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "90c40a20954b0a8b959529e1bcb44f8494a11b19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9eb5318b600dc6aec71b231f38fbb16b100359d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9eb5318b600dc6aec71b231f38fbb16b100359d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9eb5318b600dc6aec71b231f38fbb16b100359d", "patch": "@@ -1,3 +1,8 @@\n+2007-06-21  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/32451\n+\t* tree-ssa-threadupdate.c (thread_single_edge): Fixup edge flags.\n+\n 2007-06-21  Christian Bruel  <christian.bruel@st.com>\n \n \t* config/sh/sh-protos.h (sh_loads_bankedreg_p): Declare."}, {"sha": "55549f00289fd524c445169d95894e6b15b4c724", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9eb5318b600dc6aec71b231f38fbb16b100359d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9eb5318b600dc6aec71b231f38fbb16b100359d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9eb5318b600dc6aec71b231f38fbb16b100359d", "patch": "@@ -1,3 +1,8 @@\n+2007-06-21  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/32451\n+\t* g++.dg/torture/20070621-1.C: New testcase.\n+\n 2007-06-21  Christian Bruel  <christian.bruel@st.com>\n \n \t* gcc.dg/attr-isr.c: Test delay slot content."}, {"sha": "d17db9763ae37400172509a9254ee2993f376eaf", "filename": "gcc/testsuite/g++.dg/torture/20070621-1.C", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9eb5318b600dc6aec71b231f38fbb16b100359d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2F20070621-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9eb5318b600dc6aec71b231f38fbb16b100359d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2F20070621-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2F20070621-1.C?ref=d9eb5318b600dc6aec71b231f38fbb16b100359d", "patch": "@@ -0,0 +1,116 @@\n+/* Reduced from libstdc++-v3/testsuite/25_algorithms/equal/1.cc\n+\n+1.2.ii: In function 'void test1()':\n+1.2.ii:104: error: true/false edge after a non-COND_EXPR in bb 15\n+1.2.ii:104: internal compiler error: verify_flow_info failed\n+\n+*/\n+\n+typedef long int ptrdiff_t;\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename, typename>     struct __are_same     {\n+        enum {\n+  __value = 0 };\n+      };\n+    template<typename _Tp>     struct __is_integer     {\n+        enum {\n+  __value = 0 };\n+      };\n+    template<typename _Tp>     struct __is_pointer     {\n+        enum {\n+  __value = 0 };\n+      };\n+    template<typename _Tp>     struct __is_normal_iterator     {\n+        enum {\n+  __value = 0 };\n+      };\n+    struct input_iterator_tag {\n+ };\n+    template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,            typename _Pointer = _Tp*, typename _Reference = _Tp&>     struct iterator     {\n+        typedef _Tp value_type;\n+      };\n+    template<typename _Iterator>     struct iterator_traits     {\n+        typedef typename _Iterator::value_type value_type;\n+      };\n+    template<typename _Iterator,     bool _BoolType = __is_normal_iterator<_Iterator>::__value>     struct __niter_base     {\n+        static const _Iterator&       __b(const _Iterator& __it)       {\n+  return __it;\n+  }\n+      };\n+    template<bool _BoolType>     struct __equal     {\n+        template<typename _II1, typename _II2>         static bool         equal(_II1 __first1, _II1 __last1, _II2 __first2)         {\n+     for (;\n+  __first1 != __last1;\n+  ++__first1, ++__first2)      if (!(*__first1 == *__first2))        return false;\n+   }\n+      };\n+    template<typename _II1, typename _II2>     inline bool     __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)     {\n+        typedef typename iterator_traits<_II1>::value_type _ValueType1;\n+        typedef typename iterator_traits<_II2>::value_type _ValueType2;\n+        const bool __simple = (__is_integer<_ValueType1>::__value                       && __is_pointer<_II1>::__value                       && __is_pointer<_II2>::__value         && __are_same<_ValueType1, _ValueType2>::__value);\n+        return std::__equal<__simple>::equal(__first1, __last1, __first2);\n+      }\n+    template<typename _II1, typename _II2>     inline bool     equal(_II1 __first1, _II1 __last1, _II2 __first2)     {\n+        return std::__equal_aux(__niter_base<_II1>::__b(__first1),          __niter_base<_II1>::__b(__last1),          __niter_base<_II2>::__b(__first2));\n+      }\n+  }\n+extern \"C\" {\n+  extern void __assert_fail (__const char *__assertion, __const char *__file,       unsigned int __line, __const char *__function)      throw () __attribute__ ((__noreturn__));\n+  }\n+namespace __gnu_test {\n+    template<typename T>     struct BoundsContainer     {\n+        T* first;\n+        T* last;\n+        BoundsContainer(T* _first, T* _last)  : first(_first), last(_last)       {\n+  }\n+      };\n+    template<class T>   class input_iterator_wrapper:public std::iterator   <std::input_iterator_tag, T, ptrdiff_t, T*, T&>   {\n+    public:\n+      typedef BoundsContainer<T> ContainerType;\n+      T* ptr;\n+      ContainerType* SharedInfo;\n+      input_iterator_wrapper(T* _ptr, ContainerType* SharedInfo_in)       : ptr(_ptr), SharedInfo(SharedInfo_in)     {\n+  }\n+      bool     operator==(const input_iterator_wrapper& in) const     {\n+        (static_cast<void> (__builtin_expect (!!(SharedInfo != __null && SharedInfo == in.SharedInfo), 1) ? 0 : (__assert_fail (\"SharedInfo != __null && SharedInfo == in.SharedInfo\", \"/abuild/rguenther/gcc/libstdc++-v3/testsuite/util/testsuite_iterators.h\", 201, __PRETTY_FUNCTION__), 0)));\n+        (static_cast<void> (__builtin_expect (!!(ptr>=SharedInfo->first && in.ptr>=SharedInfo->first), 1) ? 0 : (__assert_fail (\"ptr>=SharedInfo->first && in.ptr>=SharedInfo->first\", \"/abuild/rguenther/gcc/libstdc++-v3/testsuite/util/testsuite_iterators.h\", 202, __PRETTY_FUNCTION__), 0)));\n+      }\n+      bool     operator!=(const input_iterator_wrapper& in) const     {\n+        return !(*this == in);\n+      }\n+      T&     operator*() const     {\n+        (static_cast<void> (__builtin_expect (!!(SharedInfo && ptr < SharedInfo->last), 1) ? 0 : (__assert_fail (\"SharedInfo && ptr < SharedInfo->last\", \"/abuild/rguenther/gcc/libstdc++-v3/testsuite/util/testsuite_iterators.h\", 215, __PRETTY_FUNCTION__), 0)));\n+        (static_cast<void> (__builtin_expect (!!(ptr >= SharedInfo->first), 1) ? 0 : (__assert_fail (\"ptr >= SharedInfo->first\", \"/abuild/rguenther/gcc/libstdc++-v3/testsuite/util/testsuite_iterators.h\", 216, __PRETTY_FUNCTION__), 0)));\n+      }\n+      input_iterator_wrapper&     operator++()     {\n+        (static_cast<void> (__builtin_expect (!!(SharedInfo && ptr < SharedInfo->last), 1) ? 0 : (__assert_fail (\"SharedInfo && ptr < SharedInfo->last\", \"/abuild/rguenther/gcc/libstdc++-v3/testsuite/util/testsuite_iterators.h\", 237, __PRETTY_FUNCTION__), 0)));\n+        ptr++;\n+        SharedInfo->first=ptr;\n+      }\n+    };\n+    template <class T, template<class T> class ItType>   struct test_container   {\n+      typename ItType<T>::ContainerType bounds;\n+      test_container(T* _first, T* _last):bounds(_first, _last)     {\n+  }\n+      ItType<T>     it(T* pos)     {\n+        return ItType<T>(pos, &bounds);\n+      }\n+      ItType<T>     begin()     {\n+  return it(bounds.first);\n+  }\n+      ItType<T>     end()     {\n+  }\n+     };\n+  }\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+typedef test_container<int, input_iterator_wrapper> Container;\n+int array1[] = {\n+ 0, 1};\n+int array2[] = {\n+ 1, 0};\n+void test1() {\n+    Container con1(array1, array1);\n+    Container con2(array2, array2);\n+    (static_cast<void> (__builtin_expect (!!(std::equal(con1.begin(), con1.end(), con2.begin())), 1) ? 0 : (__assert_fail (\"std::equal(con1.begin(), con1.end(), con2.begin())\", \"/abuild/rguenther/gcc/libstdc++-v3/testsuite/25_algorithms/equal/1.cc\", 35, __PRETTY_FUNCTION__), 0)));\n+  }"}, {"sha": "40a54370008138cb3764249c242b443461881d80", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9eb5318b600dc6aec71b231f38fbb16b100359d/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9eb5318b600dc6aec71b231f38fbb16b100359d/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=d9eb5318b600dc6aec71b231f38fbb16b100359d", "patch": "@@ -636,6 +636,11 @@ thread_single_edge (edge e)\n       /* If BB has just a single predecessor, we should only remove the\n \t control statements at its end, and successors except for ETO.  */\n       remove_ctrl_stmt_and_useless_edges (bb, eto->dest);\n+\n+      /* And fixup the flags on the single remaining edge.  */\n+      eto->flags &= ~(EDGE_TRUE_VALUE | EDGE_FALSE_VALUE | EDGE_ABNORMAL);\n+      eto->flags |= EDGE_FALLTHRU;\n+\n       return bb;\n     }\n "}]}