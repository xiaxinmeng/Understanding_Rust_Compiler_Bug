{"sha": "b6ca982f5108c5982762eb2e7c361a88c082bc5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZjYTk4MmY1MTA4YzU5ODI3NjJlYjJlN2MzNjFhODhjMDgyYmM1ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-06-16T14:32:40Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-06-16T14:32:40Z"}, "message": "re PR target/71242 ([ia64] Missing built-in functions for float128 NaNs)\n\n\tPR target/71242\n\t* config/ia64/ia64.c (enum ia64_builtins) [IA64_BUILTIN_NANQ]: New.\n\t[IA64_BUILTIN_NANSQ]: Ditto.\n\t(ia64_fold_builtin): New function.\n\t(TARGET_FOLD_BUILTIN): New define.\n\t(ia64_init_builtins) Declare const_string_type node.\n\tAdd __builtin_nanq and __builtin_nansq builtin functions.\n\t(ia64_expand_builtin): Handle IA64_BUILTIN_NANQ and IA64_BUILTIN_NANSQ.\n\ntestsuite/ChangeLog:\n\n\tPR target/71242\n\t* testsuite/gcc.dg/torture/float128-nan.c: Also run on ia64-*-*.\n\nFrom-SVN: r237530", "tree": {"sha": "1f9bd650692edc54f3159d746300856825bdcc5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f9bd650692edc54f3159d746300856825bdcc5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6ca982f5108c5982762eb2e7c361a88c082bc5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6ca982f5108c5982762eb2e7c361a88c082bc5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6ca982f5108c5982762eb2e7c361a88c082bc5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6ca982f5108c5982762eb2e7c361a88c082bc5d/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b07447ba5e2764c5a59c0e40fff91bea0e9f3114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b07447ba5e2764c5a59c0e40fff91bea0e9f3114", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b07447ba5e2764c5a59c0e40fff91bea0e9f3114"}], "stats": {"total": 79, "additions": 78, "deletions": 1}, "files": [{"sha": "c571db56f0774a3d1882de7234d683412bed0a59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ca982f5108c5982762eb2e7c361a88c082bc5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ca982f5108c5982762eb2e7c361a88c082bc5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6ca982f5108c5982762eb2e7c361a88c082bc5d", "patch": "@@ -1,3 +1,14 @@\n+2016-06-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/71242\n+\t* config/ia64/ia64.c (enum ia64_builtins) [IA64_BUILTIN_NANQ]: New.\n+\t[IA64_BUILTIN_NANSQ]: Ditto.\n+\t(ia64_fold_builtin): New function.\n+\t(TARGET_FOLD_BUILTIN): New define.\n+\t(ia64_init_builtins) Declare const_string_type node.\n+\tAdd __builtin_nanq and __builtin_nansq builtin functions.\n+\t(ia64_expand_builtin): Handle IA64_BUILTIN_NANQ and IA64_BUILTIN_NANSQ.\n+\n 2016-06-16  Nick Clifton  <nickc@redhat.com>\n \n \t* config/msp430/msp430-opts.h (msp430_hwmult_types): Add"}, {"sha": "6ab34005869899870b04c50ad39b082c850172c5", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ca982f5108c5982762eb2e7c361a88c082bc5d/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ca982f5108c5982762eb2e7c361a88c082bc5d/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=b6ca982f5108c5982762eb2e7c361a88c082bc5d", "patch": "@@ -323,6 +323,7 @@ static void ia64_trampoline_init (rtx, tree, rtx);\n static void ia64_override_options_after_change (void);\n static bool ia64_member_type_forces_blk (const_tree, machine_mode);\n \n+static tree ia64_fold_builtin (tree, int, tree *, bool);\n static tree ia64_builtin_decl (unsigned, bool);\n \n static reg_class_t ia64_preferred_reload_class (rtx, reg_class_t);\n@@ -372,6 +373,9 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS ia64_init_builtins\n \n+#undef TARGET_FOLD_BUILTIN\n+#define TARGET_FOLD_BUILTIN ia64_fold_builtin\n+\n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN ia64_expand_builtin\n \n@@ -10325,6 +10329,8 @@ enum ia64_builtins\n   IA64_BUILTIN_FLUSHRS,\n   IA64_BUILTIN_INFQ,\n   IA64_BUILTIN_HUGE_VALQ,\n+  IA64_BUILTIN_NANQ,\n+  IA64_BUILTIN_NANSQ,\n   IA64_BUILTIN_max\n };\n \n@@ -10353,6 +10359,9 @@ ia64_init_builtins (void)\n   if (!TARGET_HPUX)\n     {\n       tree ftype;\n+      tree const_string_type\n+\t= build_pointer_type (build_qualified_type\n+\t\t\t      (char_type_node, TYPE_QUAL_CONST));\n       tree float128_type = make_node (REAL_TYPE);\n \n       TYPE_PRECISION (float128_type) = 128;\n@@ -10371,6 +10380,21 @@ ia64_init_builtins (void)\n \t\t\t\t   NULL, NULL_TREE);\n       ia64_builtins[IA64_BUILTIN_HUGE_VALQ] = decl;\n \n+      ftype = build_function_type_list (float128_type,\n+\t\t\t\t\tconst_string_type,\n+\t\t\t\t\tNULL_TREE);\n+      decl = add_builtin_function (\"__builtin_nanq\", ftype,\n+\t\t\t\t   IA64_BUILTIN_NANQ, BUILT_IN_MD,\n+\t\t\t\t   \"nanq\", NULL_TREE);\n+      TREE_READONLY (decl) = 1;\n+      ia64_builtins[IA64_BUILTIN_NANQ] = decl;\n+\n+      decl = add_builtin_function (\"__builtin_nansq\", ftype,\n+\t\t\t\t   IA64_BUILTIN_NANSQ, BUILT_IN_MD,\n+\t\t\t\t   \"nansq\", NULL_TREE);\n+      TREE_READONLY (decl) = 1;\n+      ia64_builtins[IA64_BUILTIN_NANSQ] = decl;\n+\n       ftype = build_function_type_list (float128_type,\n \t\t\t\t\tfloat128_type,\n \t\t\t\t\tNULL_TREE);\n@@ -10427,6 +10451,41 @@ ia64_init_builtins (void)\n     }\n }\n \n+static tree\n+ia64_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED,\n+\t\t   tree *args, bool ignore ATTRIBUTE_UNUSED)\n+{\n+  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n+    {\n+      enum ia64_builtins fn_code = (enum ia64_builtins)\n+\t\t\t\t   DECL_FUNCTION_CODE (fndecl);\n+      switch (fn_code)\n+\t{\n+\tcase IA64_BUILTIN_NANQ:\n+\tcase IA64_BUILTIN_NANSQ:\n+\t  {\n+\t    tree type = TREE_TYPE (TREE_TYPE (fndecl));\n+\t    const char *str = c_getstr (*args);\n+\t    int quiet = fn_code == IA64_BUILTIN_NANQ;\n+\t    REAL_VALUE_TYPE real;\n+\n+\t    if (str && real_nan (&real, str, quiet, TYPE_MODE (type)))\n+\t      return build_real (type, real);\n+\t    return NULL_TREE;\n+\t  }\n+\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+\n+#ifdef SUBTARGET_FOLD_BUILTIN\n+  return SUBTARGET_FOLD_BUILTIN (fndecl, n_args, args, ignore);\n+#endif\n+\n+  return NULL_TREE;\n+}\n+\n rtx\n ia64_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t\t     machine_mode mode ATTRIBUTE_UNUSED,\n@@ -10469,6 +10528,8 @@ ia64_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \treturn target;\n       }\n \n+    case IA64_BUILTIN_NANQ:\n+    case IA64_BUILTIN_NANSQ:\n     case IA64_BUILTIN_FABSQ:\n     case IA64_BUILTIN_COPYSIGNQ:\n       return expand_call (exp, target, ignore);"}, {"sha": "eb84aebab6db1efdc97e31dbb543666f507d7551", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ca982f5108c5982762eb2e7c361a88c082bc5d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ca982f5108c5982762eb2e7c361a88c082bc5d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6ca982f5108c5982762eb2e7c361a88c082bc5d", "patch": "@@ -1,3 +1,8 @@\n+2016-06-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/71242\n+\t* testsuite/gcc.dg/torture/float128-nan.c: Also run on ia64-*-*.\n+\n 2016-06-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* g++.dg/vect/pr36648.cc: Disable cunrolli"}, {"sha": "6e0d4744a459402533d3d49043c17163e51e3552", "filename": "gcc/testsuite/gcc.dg/torture/float128-nan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ca982f5108c5982762eb2e7c361a88c082bc5d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-nan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ca982f5108c5982762eb2e7c361a88c082bc5d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-nan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-nan.c?ref=b6ca982f5108c5982762eb2e7c361a88c082bc5d", "patch": "@@ -1,5 +1,5 @@\n /* Test __float128 NaN generation.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* ia64-*-* } } */\n /* { dg-require-effective-target fenv_exceptions } */\n /* { dg-options \"\" } */\n "}]}