{"sha": "c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdkZGU0YTkwYWZkM2Q4M2NmYWFlMmUyNzhkZDg2ODZiY2ExZGMzZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-05T16:56:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-05T16:56:23Z"}, "message": "Share all recursive_directory_iterator state [LWG 2708]\n\nImplement the proposed resolution of LWG 2708 by moving the _M_options\nand _M_pending members out of the recursive_directory_iterator into the\nshared _Dir_stack object. Because _Dir_stack is an opaque type, the\nmember functions that access the _M_options and _M_pending variables\ncannot be inline. Move them into the library.\n\nAs a drive-by fix, add noexcept to the non-throwing member functions of\nrecursive_directory_iterator.\n\n\t* config/abi/pre/gnu.ver: Export new symbols.\n\t* include/bits/fs_dir.h (recursive_directory_iterator::options())\n\t(recursive_directory_iterator::recursion_pending())\n\t(recursive_directory_iterator::disable_recursion_pending()): Remove\n\tinline definitions. Make noexcept.\n\t(recursive_directory_iterator::depth())\n\t(recursive_directory_iterator::operator*())\n\t(recursive_directory_iterator::operator->()): Make noexcept.\n\t(recursive_directory_iterator::_M_options)\n\t(recursive_directory_iterator::_M_pending): Remove data members.\n\t* src/c++17/fs_path.cc (_Dir_stack): Add constructor and data members.\n\t(recursive_directory_iterator::recursive_directory_iterator): Remove\n\tctor-initializer. Use new constructor for _Dir_stack.\n\t(recursive_directory_iterator::options())\n\t(recursive_directory_iterator::recursion_pending())\n\t(recursive_directory_iterator::disable_recursion_pending()): Add\n\tnon-inline definitions.\n\t(recursive_directory_iterator::depth()): Make noexcept.\n\t(recursive_directory_iterator::increment(error_code&))\n\t(recursive_directory_iterator::pop(error_code&)): Adjust to new\n\tlocation of options and recursion_pending members.\n\t* testsuite/27_io/filesystem/iterators/recursion_pending.cc: New test.\n\t* testsuite/util/testsuite_fs.h (__gnu_test::scoped_file): Add\n\tuser-declared move constructor and assignment operator, to make the\n\ttype move-only.\n\nFrom-SVN: r270173", "tree": {"sha": "d95708b122ff1d049743f3ab7de6a6973a0654e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d95708b122ff1d049743f3ab7de6a6973a0654e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ed5c0da8ba2491d765ecb260e1babaa83a38b12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ed5c0da8ba2491d765ecb260e1babaa83a38b12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ed5c0da8ba2491d765ecb260e1babaa83a38b12"}], "stats": {"total": 231, "additions": 214, "deletions": 17}, "files": [{"sha": "e2aa3962f280a34d242f7ce0b70a228755f3f22e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d", "patch": "@@ -1,5 +1,31 @@\n 2019-04-05  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* config/abi/pre/gnu.ver: Export new symbols.\n+\t* include/bits/fs_dir.h (recursive_directory_iterator::options())\n+\t(recursive_directory_iterator::recursion_pending())\n+\t(recursive_directory_iterator::disable_recursion_pending()): Remove\n+\tinline definitions. Make noexcept.\n+\t(recursive_directory_iterator::depth())\n+\t(recursive_directory_iterator::operator*())\n+\t(recursive_directory_iterator::operator->()): Make noexcept.\n+\t(recursive_directory_iterator::_M_options)\n+\t(recursive_directory_iterator::_M_pending): Remove data members.\n+\t* src/c++17/fs_path.cc (_Dir_stack): Add constructor and data members.\n+\t(recursive_directory_iterator::recursive_directory_iterator): Remove\n+\tctor-initializer. Use new constructor for _Dir_stack.\n+\t(recursive_directory_iterator::options())\n+\t(recursive_directory_iterator::recursion_pending())\n+\t(recursive_directory_iterator::disable_recursion_pending()): Add\n+\tnon-inline definitions.\n+\t(recursive_directory_iterator::depth()): Make noexcept.\n+\t(recursive_directory_iterator::increment(error_code&))\n+\t(recursive_directory_iterator::pop(error_code&)): Adjust to new\n+\tlocation of options and recursion_pending members.\n+\t* testsuite/27_io/filesystem/iterators/recursion_pending.cc: New test.\n+\t* testsuite/util/testsuite_fs.h (__gnu_test::scoped_file): Add\n+\tuser-declared move constructor and assignment operator, to make the\n+\ttype move-only.\n+\n \t* src/c++17/fs_dir.cc (_Dir::advance(bool, error_code&)): Handle\n \td_type == DT_UNKNOWN immediately.\n \t(_Dir::should_recurse(bool, error_code&)): Remove file_type::unknown"}, {"sha": "019b581df711afafeb435aea941ced60a250c83d", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d", "patch": "@@ -2200,7 +2200,10 @@ GLIBCXX_3.4.26 {\n     _ZNSt10filesystem16weakly_canonical*;\n \n     _ZNKSt10filesystem18directory_iteratordeEv;\n+    _ZNKSt10filesystem28recursive_directory_iterator7optionsEv;\n     _ZNKSt10filesystem28recursive_directory_iterator5depthEv;\n+    _ZNKSt10filesystem28recursive_directory_iterator17recursion_pendingEv;\n+    _ZNSt10filesystem28recursive_directory_iterator25disable_recursion_pendingEv;\n     _ZNKSt10filesystem28recursive_directory_iteratordeEv;\n     _ZNSt10filesystem18directory_iteratorC[12]ERKNS_4pathENS_17directory_optionsEPSt10error_code;\n     _ZNSt10filesystem18directory_iteratorppEv;\n@@ -2213,8 +2216,11 @@ GLIBCXX_3.4.26 {\n     _ZNSt10filesystem28recursive_directory_iteratorppEv;\n \n     _ZNKSt10filesystem7__cxx1118directory_iteratordeEv;\n+    _ZNKSt10filesystem7__cxx1128recursive_directory_iterator7optionsEv;\n     _ZNKSt10filesystem7__cxx1128recursive_directory_iterator5depthEv;\n+    _ZNKSt10filesystem7__cxx1128recursive_directory_iterator17recursion_pendingEv;\n     _ZNKSt10filesystem7__cxx1128recursive_directory_iteratordeEv;\n+    _ZNSt10filesystem7__cxx1128recursive_directory_iterator25disable_recursion_pendingEv;\n     _ZNSt10filesystem7__cxx1118directory_iteratorC[12]ERKNS0_4pathENS_17directory_optionsEPSt10error_code;\n     _ZNSt10filesystem7__cxx1118directory_iteratorppEv;\n     _ZNSt10filesystem7__cxx1128recursive_directory_iterator3popERSt10error_code;"}, {"sha": "a5947b39541b994b08e657b379e67cfcc16a6cbd", "filename": "libstdc++-v3/include/bits/fs_dir.h", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h?ref=c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d", "patch": "@@ -466,12 +466,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     ~recursive_directory_iterator();\n \n     // observers\n-    directory_options  options() const { return _M_options; }\n-    int                depth() const;\n-    bool               recursion_pending() const { return _M_pending; }\n+    directory_options  options() const noexcept;\n+    int                depth() const noexcept;\n+    bool               recursion_pending() const noexcept;\n \n-    const directory_entry& operator*() const;\n-    const directory_entry* operator->() const { return &**this; }\n+    const directory_entry& operator*() const noexcept;\n+    const directory_entry* operator->() const noexcept { return &**this; }\n \n     // modifiers\n     recursive_directory_iterator&\n@@ -492,7 +492,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     void pop();\n     void pop(error_code&);\n \n-    void disable_recursion_pending() { _M_pending = false; }\n+    void disable_recursion_pending() noexcept;\n \n   private:\n     recursive_directory_iterator(const path&, directory_options, error_code*);\n@@ -503,8 +503,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     struct _Dir_stack;\n     std::__shared_ptr<_Dir_stack> _M_dirs;\n-    directory_options _M_options = {};\n-    bool _M_pending = false;\n   };\n \n   inline recursive_directory_iterator"}, {"sha": "d8c48f6d6d861ef37466747a384393335dca69ee", "filename": "libstdc++-v3/src/c++17/fs_dir.cc", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_dir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_dir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_dir.cc?ref=c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d", "patch": "@@ -183,20 +183,27 @@ fs::directory_iterator::increment(error_code& ec)\n \n struct fs::recursive_directory_iterator::_Dir_stack : std::stack<_Dir>\n {\n+  _Dir_stack(directory_options opts, posix::DIR* dirp, const path& p)\n+  : options(opts), pending(true)\n+  {\n+    this->emplace(dirp, p);\n+  }\n+\n+  const directory_options options;\n+  bool pending;\n+\n   void clear() { c.clear(); }\n };\n \n fs::recursive_directory_iterator::\n recursive_directory_iterator(const path& p, directory_options options,\n                              error_code* ecptr)\n-: _M_options(options), _M_pending(true)\n {\n   if (posix::DIR* dirp = posix::opendir(p.c_str()))\n     {\n       if (ecptr)\n \tecptr->clear();\n-      auto sp = std::__make_shared<_Dir_stack>();\n-      sp->push(_Dir{ dirp, p });\n+      auto sp = std::__make_shared<_Dir_stack>(options, dirp, p);\n       if (ecptr ? sp->top().advance(*ecptr) : sp->top().advance())\n \t_M_dirs.swap(sp);\n     }\n@@ -222,14 +229,26 @@ recursive_directory_iterator(const path& p, directory_options options,\n \n fs::recursive_directory_iterator::~recursive_directory_iterator() = default;\n \n+fs::directory_options\n+fs::recursive_directory_iterator::options() const noexcept\n+{\n+  return _M_dirs->options;\n+}\n+\n int\n-fs::recursive_directory_iterator::depth() const\n+fs::recursive_directory_iterator::depth() const noexcept\n {\n   return int(_M_dirs->size()) - 1;\n }\n \n+bool\n+fs::recursive_directory_iterator::recursion_pending() const noexcept\n+{\n+  return _M_dirs->pending;\n+}\n+\n const fs::directory_entry&\n-fs::recursive_directory_iterator::operator*() const\n+fs::recursive_directory_iterator::operator*() const noexcept\n {\n   return _M_dirs->top().entry;\n }\n@@ -263,13 +282,13 @@ fs::recursive_directory_iterator::increment(error_code& ec)\n     }\n \n   const bool follow\n-    = is_set(_M_options, directory_options::follow_directory_symlink);\n+    = is_set(_M_dirs->options, directory_options::follow_directory_symlink);\n   const bool skip_permission_denied\n-    = is_set(_M_options, directory_options::skip_permission_denied);\n+    = is_set(_M_dirs->options, directory_options::skip_permission_denied);\n \n   auto& top = _M_dirs->top();\n \n-  if (std::exchange(_M_pending, true) && top.should_recurse(follow, ec))\n+  if (std::exchange(_M_dirs->pending, true) && top.should_recurse(follow, ec))\n     {\n       _Dir dir(top.entry.path(), skip_permission_denied, ec);\n       if (ec)\n@@ -303,7 +322,7 @@ fs::recursive_directory_iterator::pop(error_code& ec)\n     }\n \n   const bool skip_permission_denied\n-    = is_set(_M_options, directory_options::skip_permission_denied);\n+    = is_set(_M_dirs->options, directory_options::skip_permission_denied);\n \n   do {\n     _M_dirs->pop();\n@@ -327,3 +346,9 @@ fs::recursive_directory_iterator::pop()\n \t  : \"non-dereferenceable recursive directory iterator cannot pop\",\n \t  ec));\n }\n+\n+void\n+fs::recursive_directory_iterator::disable_recursion_pending() noexcept\n+{\n+  _M_dirs->pending = false;\n+}"}, {"sha": "c837ce1895948319163bf03d9b7c37180816781b", "filename": "libstdc++-v3/testsuite/27_io/filesystem/iterators/recursion_pending.cc", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Frecursion_pending.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Frecursion_pending.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Frecursion_pending.cc?ref=c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d", "patch": "@@ -0,0 +1,139 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+#include <testsuite_fs.h>\n+\n+namespace fs = std::filesystem;\n+\n+__gnu_test::scoped_file\n+create_dir(fs::path dir = __gnu_test::nonexistent_path())\n+{\n+  fs::create_directory(dir);\n+  return { dir, __gnu_test::scoped_file::adopt_file };\n+}\n+\n+void\n+test01()\n+{\n+  const auto testdir = create_dir();\n+  __gnu_test::scoped_file file(testdir.path / \"file\");\n+\n+  fs::recursive_directory_iterator r(testdir.path);\n+  VERIFY( r.recursion_pending() );\n+\n+  r.disable_recursion_pending();\n+  VERIFY( !r.recursion_pending() );\n+}\n+\n+void\n+test02()\n+{\n+  const auto testdir = create_dir();\n+  __gnu_test::scoped_file file(testdir.path / \"file\");\n+\n+  fs::recursive_directory_iterator r(testdir.path);\n+  VERIFY( r.recursion_pending() );\n+  const auto r2 = r;\n+  // recursion pending flag should be copied:\n+  VERIFY( r2.recursion_pending() == r.recursion_pending() );\n+\n+  r.disable_recursion_pending();\n+  VERIFY( !r.recursion_pending() );\n+  const auto r3 = r;\n+  // recursion pending flag should be copied:\n+  VERIFY( r3.recursion_pending() == r.recursion_pending() );\n+}\n+\n+void\n+test03()\n+{\n+  std::error_code ec = make_error_code(std::errc::invalid_argument);\n+\n+  const auto testdir = create_dir();\n+  __gnu_test::scoped_file file1(testdir.path / \"file1\");\n+  __gnu_test::scoped_file file2(testdir.path / \"file2\");\n+  __gnu_test::scoped_file file3(testdir.path / \"file3\");\n+  __gnu_test::scoped_file file4(testdir.path / \"file4\");\n+\n+  fs::recursive_directory_iterator r(testdir.path);\n+  r.disable_recursion_pending();\n+  VERIFY( !r.recursion_pending() );\n+  ++r;\n+  // recursion pending flag should be true after incrementing:\n+  VERIFY( r.recursion_pending() );\n+\n+  r.disable_recursion_pending();\n+  VERIFY( !r.recursion_pending() );\n+  r.increment(ec);\n+  VERIFY( !ec );\n+  // recursion pending flag should be true after incrementing:\n+  VERIFY( r.recursion_pending() );\n+\n+  r.disable_recursion_pending();\n+  VERIFY( !r.recursion_pending() );\n+  r++;\n+  // recursion pending flag should be true after post-incrementing:\n+  VERIFY( r.recursion_pending() );\n+\n+  VERIFY( ++r == fs::recursive_directory_iterator() );\n+}\n+\n+void\n+test04()\n+{\n+  const auto testdir = create_dir();\n+  const auto sub1 = create_dir(testdir.path/\"sub1\");\n+  __gnu_test::scoped_file file1(sub1.path / \"file\");\n+  const auto sub2 = create_dir(testdir.path/\"sub2\");\n+  __gnu_test::scoped_file file2(sub2.path / \"file\");\n+\n+  fs::recursive_directory_iterator r(testdir.path);\n+  ++r;\n+  r.pop();\n+  // recursion pending flag should be true after popping:\n+  VERIFY( r.recursion_pending() );\n+\n+  // and recursion should actually happen:\n+  ++r;\n+  VERIFY( r.depth() == 1 );\n+  VERIFY( r->is_regular_file() );\n+  // recursion pending flag should still be true:\n+  VERIFY( r.recursion_pending() );\n+\n+  r = fs::recursive_directory_iterator(testdir.path);\n+  r.disable_recursion_pending();\n+  ++r;\n+  // when recursion is disabled, should not enter subdirectories:\n+  VERIFY( r.depth() == 0 );\n+  r.disable_recursion_pending();\n+  ++r;\n+  VERIFY( r == fs::recursive_directory_iterator() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}, {"sha": "baba90eaa0cca0ffa26c9689f63cf30fc0da4962", "filename": "libstdc++-v3/testsuite/util/testsuite_fs.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h?ref=c7dde4a90afd3d83cfaae2e278dd8686bca1dc3d", "patch": "@@ -143,6 +143,9 @@ namespace __gnu_test\n \n     ~scoped_file() { if (!path.empty()) remove(path); }\n \n+    scoped_file(scoped_file&&) = default;\n+    scoped_file& operator=(scoped_file&&) = default;\n+\n     path_type path;\n   };\n "}]}