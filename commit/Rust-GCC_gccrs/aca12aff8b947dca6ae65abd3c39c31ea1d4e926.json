{"sha": "aca12aff8b947dca6ae65abd3c39c31ea1d4e926", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNhMTJhZmY4Yjk0N2RjYTZhZTY1YWJkM2MzOWMzMWVhMWQ0ZTkyNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-12-10T14:32:16Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-12-10T14:32:16Z"}, "message": "Fix dejagnu directives in shared_ptr test\n\n\tPR libstdc++/68825\n\t* include/experimental/bits/shared_ptr.h (__shared_ptr, __weak_ptr,\n\texperimental::shared_ptr, experimental::weak_ptr): Constrain\n\tassignment operators.\n\t* testsuite/experimental/memory/shared_ptr/cons/copy_ctor_neg.cc:\n\tChange to a compile-only test and change dg-excess-errors to dg-error.\n\nFrom-SVN: r231516", "tree": {"sha": "59e81b82e5178cd99f88df2566bf3d2f0f0a7585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59e81b82e5178cd99f88df2566bf3d2f0f0a7585"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aca12aff8b947dca6ae65abd3c39c31ea1d4e926", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca12aff8b947dca6ae65abd3c39c31ea1d4e926", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aca12aff8b947dca6ae65abd3c39c31ea1d4e926", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca12aff8b947dca6ae65abd3c39c31ea1d4e926/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "102a163189b46c6d6e389817ce39b169f1fdbc9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/102a163189b46c6d6e389817ce39b169f1fdbc9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/102a163189b46c6d6e389817ce39b169f1fdbc9c"}], "stats": {"total": 89, "additions": 44, "deletions": 45}, "files": [{"sha": "e29a6134935240db3c58c18d20f8655cfbc39b1b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca12aff8b947dca6ae65abd3c39c31ea1d4e926/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca12aff8b947dca6ae65abd3c39c31ea1d4e926/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aca12aff8b947dca6ae65abd3c39c31ea1d4e926", "patch": "@@ -1,5 +1,12 @@\n 2015-12-10  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/68825\n+\t* include/experimental/bits/shared_ptr.h (__shared_ptr, __weak_ptr,\n+\texperimental::shared_ptr, experimental::weak_ptr): Constrain\n+\tassignment operators.\n+\t* testsuite/experimental/memory/shared_ptr/cons/copy_ctor_neg.cc:\n+\tChange to a compile-only test and change dg-excess-errors to dg-error.\n+\n \t* doc/doxygen/user.cfg.in: Use EXTENSION_MAPPING tag. Add new headers\n \tto INPUT. Remove obsolete XML_SCHEMA and XML_DTD tags. Update\n \tPREDEFINED macros. Set BRIEF_MEMBER_DESC for man-pages."}, {"sha": "bd22f28218801815b5d523c168b2216f63b14dd1", "filename": "libstdc++-v3/include/experimental/bits/shared_ptr.h", "status": "modified", "additions": 34, "deletions": 41, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca12aff8b947dca6ae65abd3c39c31ea1d4e926/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca12aff8b947dca6ae65abd3c39c31ea1d4e926/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fshared_ptr.h?ref=aca12aff8b947dca6ae65abd3c39c31ea1d4e926", "patch": "@@ -91,9 +91,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class __shared_ptr<__libfund_v1<_Tp, false>, _Lp>\n     : private __shared_ptr<_Tp, _Lp>\n     {\n-      template<typename _Tp1>\n+      template<typename _Tp1, typename _Res = void>\n \tusing _Compatible\n-\t  = enable_if_t<__sp_compatible<_Tp1, _Tp>::value>;\n+\t  = enable_if_t<__sp_compatible<_Tp1, _Tp>::value, _Res>;\n \n       using _Base_type = __shared_ptr<_Tp>;\n \n@@ -201,23 +201,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using _Base_type::operator->;\n \n       template<typename _Tp1>\n-\t__shared_ptr&\n+\t_Compatible<_Tp1, __shared_ptr&>\n \toperator=(const __shared_ptr<__libfund_v1<_Tp1>, _Lp>& __r) noexcept\n \t{\n \t  _Base_type::operator=(__r._M_get_base());\n \t  return *this;\n \t}\n \n       template<class _Tp1>\n-\t__shared_ptr&\n+\t_Compatible<_Tp1, __shared_ptr&>\n \toperator=(__shared_ptr<__libfund_v1<_Tp1>, _Lp>&& __r) noexcept\n \t{\n \t  _Base_type::operator=(std::move(__r._M_get_base()));\n \t  return *this;\n \t}\n \n       template<typename _Tp1>\n-\t__shared_ptr&\n+\t_Compatible<_Tp1, __shared_ptr&>\n \toperator=(std::unique_ptr<_Tp1>&& __r)\n \t{\n \t  _Base_type::operator=(std::move(__r));\n@@ -226,7 +226,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if _GLIBCXX_USE_DEPRECATED\n       template<typename _Tp1>\n-\t__shared_ptr&\n+\t_Compatible<_Tp1, __shared_ptr&>\n \toperator=(std::auto_ptr<_Tp1>&& __r)\n \t{\n \t  _Base_type::operator=(std::move(__r));\n@@ -292,26 +292,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using element_type = remove_extent_t<_Tp>;\n \n     private:\n-      struct _Array_Deleter\n+      struct _Array_deleter\n       {\n \tvoid\n \toperator()(element_type const *__p) const\n \t{ delete [] __p; }\n       };\n \n-      struct _Normal_Deleter\n-      {\n-\tvoid\n-\toperator()(element_type const *__p) const\n-\t{ delete __p; }\n-      };\n-\n-      template<typename _Tp1>\n+      template<typename _Tp1, typename _Res = void>\n \tusing _Compatible\n-\t  = enable_if_t<__sp_compatible<_Tp1, _Tp>::value>;\n-\n-      using _Deleter_type\n-\t= conditional_t<is_array<_Tp>::value, _Array_Deleter, _Normal_Deleter>;\n+\t  = enable_if_t<__sp_compatible<_Tp1, _Tp>::value, _Res>;\n \n       using _Base_type = __shared_ptr<element_type>;\n \n@@ -325,7 +315,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Tp1>\n \texplicit __shared_ptr(_Tp1* __p)\n-\t: _Base_type(__p, _Deleter_type())\n+\t: _Base_type(__p, _Array_deleter())\n \t{ }\n \n       template<typename _Tp1, typename _Deleter>\n@@ -402,7 +392,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treset(_Tp1* __p)\n \t{\n \t  _GLIBCXX_DEBUG_ASSERT(__p == 0 || __p != get());\n-\t  __shared_ptr(__p, _Deleter_type()).swap(*this);\n+\t  __shared_ptr(__p, _Array_deleter()).swap(*this);\n \t}\n \n       template<typename _Tp1, typename _Deleter>\n@@ -423,23 +413,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       template<typename _Tp1>\n-\t__shared_ptr&\n+\t_Compatible<_Tp1, __shared_ptr&>\n \toperator=(const __shared_ptr<__libfund_v1<_Tp1>, _Lp>& __r) noexcept\n \t{\n \t  _Base_type::operator=(__r._M_get_base());\n \t  return *this;\n \t}\n \n       template<class _Tp1>\n-\t__shared_ptr&\n+\t_Compatible<_Tp1, __shared_ptr&>\n \toperator=(__shared_ptr<__libfund_v1<_Tp1>, _Lp>&& __r) noexcept\n \t{\n \t  _Base_type::operator=(std::move(__r._M_get_base()));\n \t  return *this;\n \t}\n \n       template<typename _Tp1>\n-\t__shared_ptr&\n+\t_Compatible<_Tp1, __shared_ptr&>\n \toperator=(std::unique_ptr<_Tp1>&& __r)\n \t{\n \t  _Base_type::operator=(std::move(__r));\n@@ -448,7 +438,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if _GLIBCXX_USE_DEPRECATED\n       template<typename _Tp1>\n-\t__shared_ptr&\n+\t_Compatible<_Tp1, __shared_ptr&>\n \toperator=(std::auto_ptr<_Tp1>&& __r)\n \t{\n \t  _Base_type::operator=(std::move(__r));\n@@ -509,8 +499,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class __weak_ptr<__libfund_v1<_Tp>, _Lp>\n     : __weak_ptr<remove_extent_t<_Tp>, _Lp>\n     {\n-      template<typename _Tp1>\n-\tusing _Compatible = enable_if_t<__sp_compatible<_Tp1, _Tp>::value>;\n+      template<typename _Tp1, typename _Res = void>\n+\tusing _Compatible\n+\t  = enable_if_t<__sp_compatible<_Tp1, _Tp>::value, _Res>;\n \n       using _Base_type = __weak_ptr<remove_extent_t<_Tp>>;\n \n@@ -551,15 +542,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator=(const __weak_ptr& __r) noexcept = default;\n \n       template<typename _Tp1>\n-\t__weak_ptr&\n+\t_Compatible<_Tp1, __weak_ptr&>\n \toperator=(const __weak_ptr<__libfund_v1<_Tp1>, _Lp>& __r) noexcept\n \t{\n \t  this->_Base_type::operator=(__r._M_get_base());\n \t  return *this;\n \t}\n \n       template<typename _Tp1>\n-\t__weak_ptr&\n+\t_Compatible<_Tp1, __weak_ptr&>\n \toperator=(const __shared_ptr<_Tp1, _Lp>& __r) noexcept\n \t{\n \t  this->_Base_type::operator=(__r._M_get_base());\n@@ -574,7 +565,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       template<typename _Tp1>\n-\t__weak_ptr&\n+\t_Compatible<_Tp1, __weak_ptr&>\n \toperator=(__weak_ptr<_Tp1, _Lp>&& __r) noexcept\n \t{\n \t  this->_Base_type::operator=(std::move(__r._M_get_base()));\n@@ -639,8 +630,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     class shared_ptr : public __shared_ptr<_Tp>\n     {\n-      template<typename _Tp1>\n-\tusing _Compatible = enable_if_t<__sp_compatible<_Tp1, _Tp>::value>;\n+      template<typename _Tp1, typename _Res = void>\n+\tusing _Compatible\n+\t  = enable_if_t<__sp_compatible<_Tp1, _Tp>::value, _Res>;\n \n       using _Base_type = __shared_ptr<_Tp>;\n \n@@ -713,7 +705,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       shared_ptr& operator=(const shared_ptr&) noexcept = default;\n \n       template <typename _Tp1>\n-\tshared_ptr&\n+\t_Compatible<_Tp1, shared_ptr&>\n \toperator=(const shared_ptr<_Tp1>& __r) noexcept\n \t{\n \t  _Base_type::operator=(__r);\n@@ -728,7 +720,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       template <typename _Tp1>\n-\tshared_ptr&\n+\t_Compatible<_Tp1, shared_ptr&>\n \toperator=(shared_ptr<_Tp1>&& __r) noexcept\n \t{\n \t  _Base_type::operator=(std::move(__r));\n@@ -737,7 +729,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if _GLIBCXX_USE_DEPRECATED\n       template<typename _Tp1>\n-\tshared_ptr&\n+\t_Compatible<_Tp1, shared_ptr&>\n \toperator=(std::auto_ptr<_Tp1>&& __r)\n \t{\n \t  __shared_ptr<_Tp>::operator=(std::move(__r));\n@@ -746,7 +738,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       template <typename _Tp1, typename _Del>\n-\tshared_ptr&\n+\t_Compatible<_Tp1, shared_ptr&>\n \toperator=(unique_ptr<_Tp1, _Del>&& __r)\n \t{\n \t  _Base_type::operator=(std::move(__r));\n@@ -933,8 +925,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    template<typename _Tp>\n      class weak_ptr : public __weak_ptr<_Tp>\n      {\n-      template<typename _Tp1>\n-\tusing _Compatible = enable_if_t<__sp_compatible<_Tp1, _Tp>::value>;\n+      template<typename _Tp1, typename _Res = void>\n+\tusing _Compatible\n+\t  = enable_if_t<__sp_compatible<_Tp1, _Tp>::value, _Res>;\n \n       using _Base_type = __weak_ptr<_Tp>;\n \n@@ -961,15 +954,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        operator=(const weak_ptr& __r) noexcept = default;\n \n        template<typename _Tp1>\n-\t weak_ptr&\n+\t _Compatible<_Tp1, weak_ptr&>\n \t operator=(const weak_ptr<_Tp1>& __r) noexcept\n \t {\n \t   this->_Base_type::operator=(__r);\n \t   return *this;\n \t }\n \n        template<typename _Tp1>\n-\t weak_ptr&\n+\t _Compatible<_Tp1, weak_ptr&>\n \t operator=(const shared_ptr<_Tp1>& __r) noexcept\n \t {\n \t   this->_Base_type::operator=(__r);\n@@ -980,7 +973,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        operator=(weak_ptr&& __r) noexcept = default;\n \n        template<typename _Tp1>\n-\t weak_ptr&\n+\t _Compatible<_Tp1, weak_ptr&>\n \t operator=(weak_ptr<_Tp1>&& __r) noexcept\n \t {\n \t   this->_Base_type::operator=(std::move(__r));"}, {"sha": "b2691e9f504e0456f6e404b486d6ffda996d88e1", "filename": "libstdc++-v3/testsuite/experimental/memory/shared_ptr/cons/copy_ctor_neg.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca12aff8b947dca6ae65abd3c39c31ea1d4e926/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fshared_ptr%2Fcons%2Fcopy_ctor_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca12aff8b947dca6ae65abd3c39c31ea1d4e926/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fshared_ptr%2Fcons%2Fcopy_ctor_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fshared_ptr%2Fcons%2Fcopy_ctor_neg.cc?ref=aca12aff8b947dca6ae65abd3c39c31ea1d4e926", "patch": "@@ -1,4 +1,5 @@\n // { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n \n // Copyright (C) 2015 Free Software Foundation, Inc.\n //\n@@ -19,11 +20,9 @@\n \n // 8.2.1 Class template shared_ptr [memory.smartptr.shared]\n \n-\n #include <experimental/memory>\n #include <testsuite_hooks.h>\n \n-\n struct A { virtual ~A() { } };\n struct B : A { };\n \n@@ -38,7 +37,7 @@ test01()\n   bool test __attribute__((unused)) = true;\n \n   std::experimental::shared_ptr<A[3]> a;\n-  a = std::experimental::shared_ptr<B[3]> (new B[3]); // { dg-excess-errors \"no matching\" }\n+  a = std::experimental::shared_ptr<B[3]> (new B[3]); // { dg-error \"no match \" }\n }\n \n void\n@@ -47,7 +46,7 @@ test02()\n   bool test __attribute__((unused)) = true;\n \n   std::experimental::shared_ptr<A[]> a(new A[3]);\n-  std::experimental::shared_ptr<A[2]> spa(a); // { dg-excess-errors \"no matching\" }\n+  std::experimental::shared_ptr<A[2]> spa(a); // { dg-error \"no matching\" }\n }\n \n int"}]}