{"sha": "afd7db2554863507f6ec6ac628e9809cfa1ffbf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZkN2RiMjU1NDg2MzUwN2Y2ZWM2YWM2MjhlOTgwOWNmYTFmZmJmNw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2000-09-02T07:18:09Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-09-02T07:18:09Z"}, "message": "configure.in (FLAGS_FOR_TARGET): Use -nostdinc even for Canadian crosses...\n\n* configure.in (FLAGS_FOR_TARGET): Use -nostdinc even for Canadian\ncrosses, but add gcc/include to the header search path for them.\n\nFrom-SVN: r36113", "tree": {"sha": "7bffa7150cebc6de50038272a69545c8bf311c7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bffa7150cebc6de50038272a69545c8bf311c7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afd7db2554863507f6ec6ac628e9809cfa1ffbf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd7db2554863507f6ec6ac628e9809cfa1ffbf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afd7db2554863507f6ec6ac628e9809cfa1ffbf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd7db2554863507f6ec6ac628e9809cfa1ffbf7/comments", "author": null, "committer": null, "parents": [{"sha": "802a8181851e4848f740686e8f10ca4b7aa4e39a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/802a8181851e4848f740686e8f10ca4b7aa4e39a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/802a8181851e4848f740686e8f10ca4b7aa4e39a"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "d92b258071bf81975ea96f5a3f90728e46d5dac6", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7db2554863507f6ec6ac628e9809cfa1ffbf7/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7db2554863507f6ec6ac628e9809cfa1ffbf7/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=afd7db2554863507f6ec6ac628e9809cfa1ffbf7", "patch": "@@ -1,3 +1,8 @@\n+2000-08-30  Alexandre Oliva  <aoliva@redhat.com>, DJ Delorie  <dj@redhat.com>\n+\n+\t* configure.in (FLAGS_FOR_TARGET): Use -nostdinc even for Canadian\n+\tcrosses, but add gcc/include to the header search path for them.\n+\n 2000-08-04  David E. O'Brien  <obrien@FreeBSD.org>\n \n \t* MAINTAINERS: Add self to Write After Approval list."}, {"sha": "87e8a2a07505ac1bf6c22ed75bb86fadfd0a6982", "filename": "configure.in", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7db2554863507f6ec6ac628e9809cfa1ffbf7/configure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7db2554863507f6ec6ac628e9809cfa1ffbf7/configure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.in?ref=afd7db2554863507f6ec6ac628e9809cfa1ffbf7", "patch": "@@ -1244,11 +1244,27 @@ case \" $skipdirs \" in\n      FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/$(TARGET_SUBDIR)/winsup -L$$r/$(TARGET_SUBDIR)/winsup/cygwin -L$$r/$(TARGET_SUBDIR)/winsup/w32api/lib -isystem $$s/winsup/include -isystem $$s/winsup/cygwin/include -isystem $$s/winsup/w32api/include -isystem $$s/newlib/libc/sys/cygwin -isystem $$s/newlib/libc/sys/cygwin32' ;;\n    esac\n \n-   # If we're using a pre-built compiler (which is the case for\n-   # Canadian crosses or when gcc isn't being built), don't discard\n-   # standard headers.\n-   if test \"${build}\" = \"${host}\" && test -d ${topsrcdir}/gcc; then\n+   # If we're not building GCC, don't discard standard headers.\n+   if test -d ${topsrcdir}/gcc; then\n      FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -nostdinc'\n+\n+     if test \"${build}\" != \"${host}\"; then\n+       # On Canadian crosses, CC_FOR_TARGET will have already been set\n+       # by `configure', so we won't have an opportunity to add -Bgcc/\n+       # to it.  This is right: we don't want to search that directory\n+       # for binaries, but we want the header files in there, so add\n+       # them explicitly.\n+       FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -isystem $$r/gcc/include'\n+\n+       # Someone might think of using the pre-installed headers on\n+       # Canadian crosses, in case the installed compiler is not fully\n+       # compatible with the compiler being built.  In this case, it\n+       # would be better to flag an error than risking having\n+       # incompatible object files being constructed.  We can't\n+       # guarantee that an error will be flagged, but let's hope the\n+       # compiler will do it, when presented with incompatible header\n+       # files.\n+     fi\n    fi\n \n    # If we're building newlib, use its generic headers last, but search"}]}