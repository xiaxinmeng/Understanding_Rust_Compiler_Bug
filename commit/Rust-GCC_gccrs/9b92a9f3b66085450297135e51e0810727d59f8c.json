{"sha": "9b92a9f3b66085450297135e51e0810727d59f8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI5MmE5ZjNiNjYwODU0NTAyOTcxMzVlNTFlMDgxMDcyN2Q1OWY4Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-05-13T21:15:31Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-05-13T21:15:31Z"}, "message": "sjlj.m4: New file.\n\nconfig/\n\t* sjlj.m4: New file.\nlibgcc/\n\t* configure.ac: Include config/sjlj.m4.\n\tRemove manual SJLJ check, add GCC_CHECK_SJLJ_EXCEPTIONS and adjust.\n\t* config.in: Regenerate.\n\t* configure: Likewise.\n\t* config.host: Replace enable_sjlj_exceptions by ac_cv_sjlj_exceptions.\nlibjava/\n\t* configure.ac: Include config/sjlj.m4.\n\tRemove manual SJLJ check, add GCC_CHECK_SJLJ_EXCEPTIONS and adjust.\n\t* include/config.h.in: Regenerate.\n\t* configure: Likewise.\n\t* exception.cc: Replace SJLJ_EXCEPTIONS by __USING_SJLJ_EXCEPTIONS__.\n\t* stacktrace.cc: Likewise.\n\t* include/default-signal.h: Likewise.\n\t* sysdep/i386/backtrace.h: Likewise.\nlibobjc/\n\t* configure.ac: Remove manual SJLJ check.\n\t* config.h.in: Regenerate.\n\t* configure: Likewise.\n\t* exception.c: Replace SJLJ_EXCEPTIONS by __USING_SJLJ_EXCEPTIONS__.\nlibstdc++-v3/\n\t* acinclude.m4 (GLIBCXX_ENABLE_SJLJ_EXCEPTIONS): Delete.\n\t* configure.ac: Remove GLIBCXX_ENABLE_SJLJ_EXCEPTIONS.\n\t* config.h.in: Regenerate.\n\t* configure: Likewise.\n\t* libsupc++/eh_personality.cc: Replace _GLIBCXX_SJLJ_EXCEPTIONS by\n\t__USING_SJLJ_EXCEPTIONS__.\n\t* libsupc++/eh_throw.cc: Likewise.\n\t* libsupc++/eh_ptr.cc: Likewise.\n\t* doc/html/manual/appendix_porting.html: Remove\n\tGLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n\t* doc/xml/manual/build_hacking.xml: Likewise.\n\t* doc/html/manual/configure.html: Remove --enable-sjlj-exceptions.\n\t* doc/xml/manual/configure.xml: Likewise.\n\nFrom-SVN: r223181", "tree": {"sha": "dc6a0f80d4e52e052312acffbba59b37f142e9ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc6a0f80d4e52e052312acffbba59b37f142e9ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b92a9f3b66085450297135e51e0810727d59f8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b92a9f3b66085450297135e51e0810727d59f8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b92a9f3b66085450297135e51e0810727d59f8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b92a9f3b66085450297135e51e0810727d59f8c/comments", "author": null, "committer": null, "parents": [{"sha": "7893307bb20d7e1a6bd2de2fb8b5e779d376439f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7893307bb20d7e1a6bd2de2fb8b5e779d376439f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7893307bb20d7e1a6bd2de2fb8b5e779d376439f"}], "stats": {"total": 671, "additions": 140, "deletions": 531}, "files": [{"sha": "af46a1144ff652d1a86e157b80a00e7930489cba", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -1,3 +1,7 @@\n+2015-05-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sjlj.m4: New file.\n+\n 2015-05-04  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* bitfields.m4: Change int to long long, and use bitfields of"}, {"sha": "71c8b319b80feb84643eb14a9bf51d9474ee1566", "filename": "config/sjlj.m4", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/config%2Fsjlj.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/config%2Fsjlj.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fsjlj.m4?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -0,0 +1,12 @@\n+dnl Check if the compiler is configured for setjmp/longjmp exceptions.\n+AC_DEFUN([GCC_CHECK_SJLJ_EXCEPTIONS],\n+  [AC_CACHE_CHECK([whether the compiler is configured for setjmp/longjmp exceptions],\n+    ac_cv_sjlj_exceptions,\n+    [AC_COMPILE_IFELSE(\n+      [AC_LANG_PROGRAM(\n+        [[#ifdef __USING_SJLJ_EXCEPTIONS__\n+          this will fail\n+          #endif]],\n+        [[int i;]])],\n+      [ac_cv_sjlj_exceptions=no],\n+      [ac_cv_sjlj_exceptions=yes])])])"}, {"sha": "7e99ca6138dd367db563dae4c70e5c93885bd900", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -1,3 +1,11 @@\n+2015-05-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* configure.ac: Include config/sjlj.m4.\n+\tRemove manual SJLJ check, add GCC_CHECK_SJLJ_EXCEPTIONS and adjust.\n+\t* config.in: Regenerate.\n+\t* configure: Likewise.\n+\t* config.host: Replace enable_sjlj_exceptions by ac_cv_sjlj_exceptions.\n+\n 2015-05-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* libgcov-util.c: Add space between string literal and macro name."}, {"sha": "925db2910a2536eaab2c395128ae27da222b813d", "filename": "libgcc/config.host", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -499,7 +499,7 @@ hppa*64*-*-linux*)\n hppa*-*-linux*)\n \ttmake_file=\"$tmake_file pa/t-linux t-slibgcc-libgcc\"\n \t# Set the libgcc version number\n-\tif test x$enable_sjlj_exceptions = xyes; then\n+\tif test x$ac_cv_sjlj_exceptions = xyes; then\n \t    tmake_file=\"$tmake_file pa/t-slibgcc-sjlj-ver\"\n \telse\n \t    tmake_file=\"$tmake_file pa/t-slibgcc-dwarf-ver\"\n@@ -510,7 +510,7 @@ hppa*-*-linux*)\n hppa[12]*-*-hpux10*)\n \ttmake_file=\"$tmake_file pa/t-hpux pa/t-hpux10 t-libgcc-pic t-slibgcc\"\n \t# Set the libgcc version number\n-\tif test x$enable_sjlj_exceptions = xyes; then\n+\tif test x$ac_cv_sjlj_exceptions = xyes; then\n \t    tmake_file=\"$tmake_file pa/t-slibgcc-sjlj-ver\"\n \telse\n \t    tmake_file=\"$tmake_file pa/t-slibgcc-dwarf-ver\"\n@@ -521,7 +521,7 @@ hppa[12]*-*-hpux10*)\n hppa*64*-*-hpux11*)\n \ttmake_file=\"$tmake_file pa/t-hpux pa/t-pa64 pa/t-stublib t-libgcc-pic t-slibgcc\"\n \t# Set the libgcc version number\n-\tif test x$enable_sjlj_exceptions = xyes; then\n+\tif test x$ac_cv_sjlj_exceptions = xyes; then\n \t    tmake_file=\"$tmake_file pa/t-slibgcc-sjlj-ver\"\n \telse\n \t    tmake_file=\"$tmake_file pa/t-slibgcc-dwarf-ver\"\n@@ -534,7 +534,7 @@ hppa*64*-*-hpux11*)\n hppa[12]*-*-hpux11*)\n \ttmake_file=\"$tmake_file pa/t-hpux pa/t-stublib t-libgcc-pic t-slibgcc\"\n \t# Set the libgcc version number\n-\tif test x$enable_sjlj_exceptions = xyes; then\n+\tif test x$ac_cv_sjlj_exceptions = xyes; then\n \t    tmake_file=\"$tmake_file pa/t-slibgcc-sjlj-ver\"\n \telse\n \t    tmake_file=\"$tmake_file pa/t-slibgcc-dwarf-ver\"\n@@ -635,7 +635,7 @@ i[34567]86-*-cygwin*)\n \t\textra_parts=\"$extra_parts vtv_start.o vtv_end.o vtv_start_preinit.o vtv_end_preinit.o\"\n \tfi\n \t# This has to match the logic for DWARF2_UNWIND_INFO in gcc/config/i386/cygming.h\n-\tif test x$enable_sjlj_exceptions = xyes; then\n+\tif test x$ac_cv_sjlj_exceptions = xyes; then\n \t\ttmake_eh_file=\"i386/t-sjlj-eh\"\n \telse\n \t\ttmake_eh_file=\"i386/t-dw2-eh\"\n@@ -654,7 +654,7 @@ x86_64-*-cygwin*)\n \t\textra_parts=\"$extra_parts vtv_start.o vtv_end.o vtv_start_preinit.o vtv_end_preinit.o\"\n \tfi\n \t# This has to match the logic for DWARF2_UNWIND_INFO in gcc/config/i386/cygming.h\n-\tif test x$enable_sjlj_exceptions = xyes; then\n+\tif test x$ac_cv_sjlj_exceptions = xyes; then\n \t\ttmake_eh_file=\"i386/t-sjlj-eh\"\n \telse\n \t\ttmake_eh_file=\"i386/t-seh-eh\"\n@@ -682,7 +682,7 @@ i[34567]86-*-mingw*)\n \t    ;;\n \tesac\n \t# This has to match the logic for DWARF2_UNWIND_INFO in gcc/config/i386/cygming.h\n-\tif test x$enable_sjlj_exceptions = xyes; then\n+\tif test x$ac_cv_sjlj_exceptions = xyes; then\n \t\ttmake_eh_file=\"i386/t-sjlj-eh\"\n \telse\n \t\ttmake_eh_file=\"i386/t-dw2-eh\"\n@@ -706,7 +706,7 @@ x86_64-*-mingw*)\n \t    ;;\n \tesac\n \t# This has to match the logic for DWARF2_UNWIND_INFO in gcc/config/i386/cygming.h\n-\tif test x$enable_sjlj_exceptions = xyes; then\n+\tif test x$ac_cv_sjlj_exceptions = xyes; then\n \t\ttmake_eh_file=\"i386/t-sjlj-eh\"\n \telse\n \t\ttmake_eh_file=\"i386/t-seh-eh\"\n@@ -799,9 +799,9 @@ m68k-*-linux*)\t\t\t# Motorola m68k's running GNU/Linux\n \t\t\t\t# with ELF format using glibc 2\n \t\t\t\t# aka the GNU/Linux C library 6.\n \ttmake_file=\"$tmake_file m68k/t-floatlib m68k/t-linux\"\n-\t# If not configured with --enable-sjlj-exceptions, bump the\n+\t# If not configured with setjmp/longjmp exceptions, bump the\n \t# libgcc version number.\n-\tif test x$enable_sjlj_exceptions != xyes; then\n+\tif test x$ac_cv_sjlj_exceptions != xyes; then\n \t    tmake_file=\"$tmake_file m68k/t-slibgcc-elf-ver\"\n \tfi\n \tmd_unwind_header=m68k/linux-unwind.h"}, {"sha": "59a79618c0e9af7fd614f337d234332cf028e2b9", "filename": "libgcc/config.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libgcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libgcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.in?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -39,9 +39,6 @@\n /* Define to 1 if you have the <unistd.h> header file. */\n #undef HAVE_UNISTD_H\n \n-/* Define if the C compiler is configured for setjmp/longjmp exceptions. */\n-#undef LIBGCC_SJLJ_EXCEPTIONS\n-\n /* Define to the address where bug reports for this package should be sent. */\n #undef PACKAGE_BUGREPORT\n "}, {"sha": "ce66d1dd3126b320ccc1339f75e8e652961ab0e6", "filename": "libgcc/configure", "status": "modified", "additions": 22, "deletions": 62, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -670,7 +670,6 @@ enable_maintainer_mode\n with_build_libsubdir\n enable_decimal_float\n with_system_libunwind\n-enable_sjlj_exceptions\n enable_explicit_exception_frame_registration\n with_glibc_version\n enable_tls\n@@ -1308,8 +1307,6 @@ Optional Features:\n \t\t\tenable decimal float extension to C.  Selecting 'bid'\n \t\t\tor 'dpd' choses which decimal floating point format\n \t\t\tto use\n-  --enable-sjlj-exceptions\n-                          force use of builtin_setjmp for exceptions\n   --enable-explicit-exception-frame-registration\n                           register exception tables explicitly at module\n                           start, for use e.g. for compatibility with\n@@ -4539,80 +4536,43 @@ $as_echo \"#define HAVE_GETIPINFO 1\" >>confdefs.h\n   fi\n \n \n-# The sjlj test is almost duplicated here and in libgo/configure.ac (for C),\n-# libstdc++-v3/acinclude.m4 and libjava/configure.ac (for C++), and\n-# libobjc/configure.ac (for Objective-C).\n-# FIXME: This should be centralized in config/sjlj.m4.\n-# Check whether --enable-sjlj-exceptions was given.\n-if test \"${enable_sjlj_exceptions+set}\" = set; then :\n-  enableval=$enable_sjlj_exceptions; case \"$enableval\" in\n-   yes|no|auto) ;;\n-   *) as_fn_error \"unknown argument to --enable-sjlj-exceptions\" \"$LINENO\" 5 ;;\n-   esac\n-else\n-  enable_sjlj_exceptions=auto\n-fi\n-\n-\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether to use setjmp/longjmp exceptions\" >&5\n-$as_echo_n \"checking whether to use setjmp/longjmp exceptions... \" >&6; }\n-if test \"${libgcc_cv_lib_sjlj_exceptions+set}\" = set; then :\n+# Check if the compiler is configured for setjmp/longjmp exceptions.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the compiler is configured for setjmp/longjmp exceptions\" >&5\n+$as_echo_n \"checking whether the compiler is configured for setjmp/longjmp exceptions... \" >&6; }\n+if test \"${ac_cv_sjlj_exceptions+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n-\n-void bar ();\n-void clean (int *);\n-void foo ()\n+#ifdef __USING_SJLJ_EXCEPTIONS__\n+          this will fail\n+          #endif\n+int\n+main ()\n {\n-  int i __attribute__ ((cleanup (clean)));\n-  bar();\n+int i;\n+  ;\n+  return 0;\n }\n-\n _ACEOF\n-CFLAGS_hold=$CFLAGS\n-CFLAGS=\"--save-temps -fexceptions\"\n-libgcc_cv_lib_sjlj_exceptions=unknown\n-if ac_fn_c_try_compile; then :\n-  if grep _Unwind_SjLj_Resume conftest.s >/dev/null 2>&1; then\n-    libgcc_cv_lib_sjlj_exceptions=yes\n-  elif grep _Unwind_Resume conftest.s >/dev/null 2>&1; then\n-    libgcc_cv_lib_sjlj_exceptions=no\n-  fi\n-fi\n-CFLAGS=$CFLAGS_hold\n-rm -f conftest*\n-\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_cv_sjlj_exceptions=no\n+else\n+  ac_cv_sjlj_exceptions=yes\n fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgcc_cv_lib_sjlj_exceptions\" >&5\n-$as_echo \"$libgcc_cv_lib_sjlj_exceptions\" >&6; }\n-\n-if test \"$enable_sjlj_exceptions\" = \"auto\"; then\n-  enable_sjlj_exceptions=$libgcc_cv_lib_sjlj_exceptions\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n-\n-case $enable_sjlj_exceptions in\n-yes)\n-\n-$as_echo \"#define LIBGCC_SJLJ_EXCEPTIONS 1\" >>confdefs.h\n-\n-  ;;\n-no)\n-  ;;\n-*)\n-  as_fn_error \"unable to detect exception model\" \"$LINENO\" 5\n-  ;;\n-esac\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sjlj_exceptions\" >&5\n+$as_echo \"$ac_cv_sjlj_exceptions\" >&6; }\n \n # Check whether --enable-explicit-exception-frame-registration was given.\n if test \"${enable_explicit_exception_frame_registration+set}\" = set; then :\n   enableval=$enable_explicit_exception_frame_registration;\n force_explicit_eh_registry=\n if test \"$enable_explicit_exception_frame_registration\" = yes; then\n-  if test \"$enable_sjlj_exceptions\" = yes; then\n-    as_fn_error \"Can't enable both of --enable-sjlj-exceptions\n-                  and --enable-explicit-exception-frame-registration\" \"$LINENO\" 5\n+  if test $ac_cv_sjlj_exceptions = yes; then\n+    as_fn_error \"Can't --enable-explicit-exception-frame-registration\n+                  with setjmp/longjmp exceptions\" \"$LINENO\" 5\n   fi\n   force_explicit_eh_registry=-DUSE_EH_FRAME_REGISTRY_ALWAYS\n fi"}, {"sha": "dfabd808d11a360dc4e265ffe75a8f004af1956a", "filename": "libgcc/configure.ac", "status": "modified", "additions": 6, "deletions": 56, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -10,6 +10,7 @@ sinclude(../config/picflag.m4)\n sinclude(../config/dfp.m4)\n sinclude(../config/unwind_ipinfo.m4)\n sinclude(../config/gthr.m4)\n+sinclude(../config/sjlj.m4)\n \n AC_PREREQ(2.64)\n AC_INIT([GNU C Runtime Library], 1.0,,[libgcc])\n@@ -230,59 +231,8 @@ AC_SUBST(fixed_point)\n # config.gcc also contains tests of with_system_libunwind.\n GCC_CHECK_UNWIND_GETIPINFO\n \n-# The sjlj test is almost duplicated here and in libgo/configure.ac (for C),\n-# libstdc++-v3/acinclude.m4 and libjava/configure.ac (for C++), and\n-# libobjc/configure.ac (for Objective-C).\n-# FIXME: This should be centralized in config/sjlj.m4.\n-AC_ARG_ENABLE(sjlj-exceptions,\n-  AC_HELP_STRING([--enable-sjlj-exceptions],\n-\t\t [force use of builtin_setjmp for exceptions]),\n-  [case \"$enableval\" in\n-   yes|no|auto) ;;\n-   *) AC_MSG_ERROR([unknown argument to --enable-sjlj-exceptions]) ;;\n-   esac],\n-  [enable_sjlj_exceptions=auto])\n-\n-AC_CACHE_CHECK([whether to use setjmp/longjmp exceptions],\n-[libgcc_cv_lib_sjlj_exceptions],\n-[AC_LANG_CONFTEST(\n-  [AC_LANG_SOURCE([\n-void bar ();\n-void clean (int *);\n-void foo ()\n-{\n-  int i __attribute__ ((cleanup (clean)));\n-  bar();\n-}\n-])])\n-CFLAGS_hold=$CFLAGS\n-CFLAGS=\"--save-temps -fexceptions\"\n-libgcc_cv_lib_sjlj_exceptions=unknown\n-AS_IF([ac_fn_c_try_compile],\n-  [if grep _Unwind_SjLj_Resume conftest.s >/dev/null 2>&1; then\n-    libgcc_cv_lib_sjlj_exceptions=yes\n-  elif grep _Unwind_Resume conftest.s >/dev/null 2>&1; then\n-    libgcc_cv_lib_sjlj_exceptions=no\n-  fi])\n-CFLAGS=$CFLAGS_hold\n-rm -f conftest*\n-])\n-\n-if test \"$enable_sjlj_exceptions\" = \"auto\"; then\n-  enable_sjlj_exceptions=$libgcc_cv_lib_sjlj_exceptions\n-fi\n-\n-case $enable_sjlj_exceptions in\n-yes)\n-  AC_DEFINE(LIBGCC_SJLJ_EXCEPTIONS, 1,\n-\t[Define if the C compiler is configured for setjmp/longjmp exceptions.])\n-  ;;\n-no)\n-  ;;\n-*)\n-  AC_MSG_ERROR([unable to detect exception model])\n-  ;;\n-esac\n+# Check if the compiler is configured for setjmp/longjmp exceptions.\n+GCC_CHECK_SJLJ_EXCEPTIONS\n \n AC_ARG_ENABLE([explicit-exception-frame-registration],\n   [AC_HELP_STRING([--enable-explicit-exception-frame-registration],\n@@ -291,9 +241,9 @@ AC_ARG_ENABLE([explicit-exception-frame-registration],\n [\n force_explicit_eh_registry=\n if test \"$enable_explicit_exception_frame_registration\" = yes; then\n-  if test \"$enable_sjlj_exceptions\" = yes; then\n-    AC_MSG_ERROR([Can't enable both of --enable-sjlj-exceptions\n-                  and --enable-explicit-exception-frame-registration])\n+  if test $ac_cv_sjlj_exceptions = yes; then\n+    AC_MSG_ERROR([Can't --enable-explicit-exception-frame-registration\n+                  with setjmp/longjmp exceptions])\n   fi\n   force_explicit_eh_registry=-DUSE_EH_FRAME_REGISTRY_ALWAYS\n fi"}, {"sha": "17650b1d35fd2611f81ad4a292be572f3fb2175e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -1,3 +1,14 @@\n+2015-05-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* configure.ac: Include config/sjlj.m4.\n+\tRemove manual SJLJ check, add GCC_CHECK_SJLJ_EXCEPTIONS and adjust.\n+\t* include/config.h.in: Regenerate.\n+\t* configure: Likewise.\n+\t* exception.cc: Replace SJLJ_EXCEPTIONS by __USING_SJLJ_EXCEPTIONS__.\n+\t* stacktrace.cc: Likewise.\n+\t* include/default-signal.h: Likewise.\n+\t* sysdep/i386/backtrace.h: Likewise.\n+\n 2015-05-13  Michael Haubenwallner  <michael.haubenwallner@ssi-schaefer.com>\n \n \t* Makefile.in: Regenerated with automake-1.11.6."}, {"sha": "00bbd36075913f3cc83ed70cf14a02e17bc7d3b6", "filename": "libjava/configure.ac", "status": "modified", "additions": 7, "deletions": 52, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -1,4 +1,7 @@\n dnl # Process this with autoconf to create configure\n+\n+sinclude(../config/sjlj.m4)\n+\n AC_PREREQ(2.64)\n # Still use \"libjava\" here to placate dejagnu.\n AC_INIT([libjava], [version-unused],, [libjava])\n@@ -699,58 +702,10 @@ INTERPRETER=\"$libgcj_interpreter\"\n AC_SUBST(INTERPRETER)\n AM_CONDITIONAL(INTERPRETER, test \"$libgcj_interpreter\" = yes)\n \n-AC_MSG_CHECKING([for exception model to use])\n-AC_LANG_PUSH(C++)\n-AC_ARG_ENABLE(sjlj-exceptions,\n-  AS_HELP_STRING([--enable-sjlj-exceptions],\n-                 [force use of builtin_setjmp for exceptions]),\n-[:],\n-[dnl Botheration.  Now we've got to detect the exception model.\n-dnl Link tests against libgcc.a are problematic since -- at least\n-dnl as of this writing -- we've not been given proper -L bits for\n-dnl single-tree newlib and libgloss.\n-dnl\n-dnl This is what AC_TRY_COMPILE would do if it didn't delete the\n-dnl conftest files before we got a change to grep them first.\n-cat > conftest.$ac_ext << EOF\n-[#]line __oline__ \"configure\"\n-struct S { ~S(); };\n-void bar();\n-void foo()\n-{\n-  S s;\n-  bar();\n-}\n-EOF\n-old_CXXFLAGS=\"$CXXFLAGS\"  \n-CXXFLAGS=-S\n-if AC_TRY_EVAL(ac_compile); then\n-  if grep _Unwind_SjLj_Resume conftest.s >/dev/null 2>&1 ; then\n-    enable_sjlj_exceptions=yes\n-  elif grep _Unwind_Resume conftest.s >/dev/null 2>&1 ; then\n-    enable_sjlj_exceptions=no\n-  elif grep __cxa_end_cleanup conftest.s >/dev/null 2>&1 ; then\n-    # ARM EH ABI.\n-    enable_sjlj_exceptions=no\n-  fi\n-fi\n-CXXFLAGS=\"$old_CXXFLAGS\"\n-rm -f conftest*])\n-if test x$enable_sjlj_exceptions = xyes; then\n-  AC_DEFINE(SJLJ_EXCEPTIONS, 1,\n-\t[Define if the compiler is configured for setjmp/longjmp exceptions.])\n-  ac_exception_model_name=sjlj\n-elif test x$enable_sjlj_exceptions = xno; then\n-  ac_exception_model_name=\"call frame\"\n-else\n-  AC_MSG_ERROR([unable to detect exception model])\n-fi\n-AC_LANG_POP(C++)\n-AC_MSG_RESULT($ac_exception_model_name)\n-\n-# If we are non using SJLJ exceptions, and this host does not have support \n+# If we are not using SJLJ exceptions, and this host does not have support \n # for unwinding from a signal handler, enable checked dereferences and divides.\n-if test $can_unwind_signal = no && test $enable_sjlj_exceptions = no; then\n+GCC_CHECK_SJLJ_EXCEPTIONS\n+if test $ac_cv_sjlj_exceptions = no && test $can_unwind_signal = no; then\n   CHECKREFSPEC=-fcheck-references\n   DIVIDESPEC=-fuse-divide-subroutine\n   EXCEPTIONSPEC=\n@@ -1761,7 +1716,7 @@ case \"${host}\" in\n esac\n \n # If we're using sjlj exceptions, forget what we just learned.\n-if test \"$enable_sjlj_exceptions\" = yes; then\n+if test \"$ac_cv_sjlj_exceptions\" = yes; then\n    SIGNAL_HANDLER=include/default-signal.h\n    SIGNAL_HANDLER_AUX=\n fi"}, {"sha": "61734a96794e9bed340313f34d6cf1f711d2b551", "filename": "libjava/exception.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libjava%2Fexception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libjava%2Fexception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fexception.cc?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -112,7 +112,7 @@ _Jv_Throw (jthrowable value)\n \n   /* We're happy with setjmp/longjmp exceptions or region-based\n      exception handlers: entry points are provided here for both.  */\n-#ifdef SJLJ_EXCEPTIONS\n+#ifdef __USING_SJLJ_EXCEPTIONS__\n   _Unwind_SjLj_RaiseException (&xh->unwindHeader);\n #else\n   _Unwind_RaiseException (&xh->unwindHeader);\n@@ -194,7 +194,7 @@ get_ttype_entry (_Unwind_Context *context, lsda_header_info *info, long i)\n \n // Using a different personality function name causes link failures\n // when trying to mix code using different exception handling models.\n-#ifdef SJLJ_EXCEPTIONS\n+#ifdef __USING_SJLJ_EXCEPTIONS__\n #define PERSONALITY_FUNCTION\t__gcj_personality_sj0\n #define __builtin_eh_return_data_regno(x) x\n #elif defined (__SEH__)\n@@ -331,7 +331,7 @@ PERSONALITY_FUNCTION (int version,\n   action_record = 0;\n   handler_switch_value = 0;\n \n-#ifdef SJLJ_EXCEPTIONS\n+#ifdef __USING_SJLJ_EXCEPTIONS__\n   // The given \"IP\" is an index into the call-site table, with two\n   // exceptions -- -1 means no-action, and 0 means terminate.  But\n   // since we're using uleb128 values, we've not got random access\n@@ -380,7 +380,7 @@ PERSONALITY_FUNCTION (int version,\n \t  goto found_something;\n \t}\n     }\n-#endif // SJLJ_EXCEPTIONS\n+#endif // __USING_SJLJ_EXCEPTIONS__\n \n   // If ip is not present in the table, C++ would call terminate.\n   // ??? It is perhaps better to tweek the LSDA so that no-action"}, {"sha": "ea5afe251b87ba05c952a859efe392bc9937101f", "filename": "libjava/include/config.h.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libjava%2Finclude%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libjava%2Finclude%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fconfig.h.in?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -423,9 +423,6 @@\n /* The size of `void *', as computed by sizeof. */\n #undef SIZEOF_VOID_P\n \n-/* Define if the compiler is configured for setjmp/longjmp exceptions. */\n-#undef SJLJ_EXCEPTIONS\n-\n /* Define if if the synchronization code should try to avoid pthread_self\n    calls by caching thread IDs in a hashtable. */\n #undef SLOW_PTHREAD_SELF"}, {"sha": "629acfb1fd75c640555acc435d56001818be8359", "filename": "libjava/include/default-signal.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libjava%2Finclude%2Fdefault-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libjava%2Finclude%2Fdefault-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fdefault-signal.h?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -11,7 +11,7 @@ details.  */\n #ifndef JAVA_SIGNAL_H\n #define JAVA_SIGNAL_H 1\n \n-#ifdef SJLJ_EXCEPTIONS\n+#ifdef __USING_SJLJ_EXCEPTIONS__\n \n #define HANDLE_SEGV 1\n #define HANDLE_FPE 1\n@@ -37,15 +37,15 @@ while (0)\n \n #define MAKE_THROW_FRAME(_exception)  do {} while (0)\n \n-#else /* SJLJ_EXCEPTIONS */\n+#else /* __USING_SJLJ_EXCEPTIONS__ */\n \n #undef HANDLE_SEGV\n #undef HANDLE_FPE\n \n #define INIT_SEGV   do {} while (0)\n #define INIT_FPE   do {} while (0)\n \n-#endif /* SJLJ_EXCEPTIONS */\n+#endif /* __USING_SJLJ_EXCEPTIONS__ */\n \n #endif /* JAVA_SIGNAL_H */\n   "}, {"sha": "0fc91c42d8c26d09994d6aa8f5544d82b46e6b00", "filename": "libjava/stacktrace.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libjava%2Fstacktrace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libjava%2Fstacktrace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fstacktrace.cc?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -325,7 +325,7 @@ _Jv_StackTrace::GetStackTraceElements (_Jv_StackTrace *trace,\n {\n   ArrayList *list = new ArrayList ();\n \n-#if defined (SJLJ_EXCEPTIONS) && ! defined (WIN32)\n+#if defined (__USING_SJLJ_EXCEPTIONS__) && ! defined (WIN32)\n   // We can't use the nCodeMap without unwinder support. Instead,\n   // fake the method name by giving the IP in hex - better than nothing.  \n   jstring hex = JvNewStringUTF (\"0x\");\n@@ -344,7 +344,7 @@ _Jv_StackTrace::GetStackTraceElements (_Jv_StackTrace *trace,\n       list->add (element);\n     }\n \n-#else /* SJLJ_EXCEPTIONS && !WIN32 */\n+#else /* __USING_SJLJ_EXCEPTIONS__ && !WIN32 */\n \n   //JvSynchronized (ncodeMap);\n   UpdateNCodeMap ();\n@@ -412,7 +412,7 @@ _Jv_StackTrace::GetStackTraceElements (_Jv_StackTrace *trace,\n     }\n   \n   finder->close();\n-#endif /* SJLJ_EXCEPTIONS && !WIN32 */\n+#endif /* __USING_SJLJ_EXCEPTIONS__ && !WIN32 */\n \n   JArray<Object *> *array = JvNewObjectArray (list->size (), \n     &StackTraceElement::class$, NULL);"}, {"sha": "cfdf07bc36655c04bef6b82b599dd5deeb1c7ab5", "filename": "libjava/sysdep/i386/backtrace.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libjava%2Fsysdep%2Fi386%2Fbacktrace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libjava%2Fsysdep%2Fi386%2Fbacktrace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Fi386%2Fbacktrace.h?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -36,7 +36,7 @@ struct _Unwind_Context\n   _Jv_uintptr_t ret_addr;\n };\n \n-#ifdef SJLJ_EXCEPTIONS\n+#ifdef __USING_SJLJ_EXCEPTIONS__\n \n #undef _Unwind_GetIPInfo\n #define _Unwind_GetIPInfo(ctx,ip_before_insn) \\\n@@ -50,7 +50,7 @@ struct _Unwind_Context\n #define _Unwind_Backtrace(trace_fn,state_ptr) \\\n   (fallback_backtrace (trace_fn, state_ptr))\n \n-#endif /* SJLJ_EXCEPTIONS */\n+#endif /* __USING_SJLJ_EXCEPTIONS__ */\n \n /* Unwind through the call stack calling TRACE_FN with STATE for each stack\n    frame.  Returns the reason why the unwinding was stopped.  */"}, {"sha": "f176fd0fc45315143d2c6d13e18faa44bd20d20c", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -1,3 +1,10 @@\n+2015-05-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* configure.ac: Remove manual SJLJ check.\n+\t* config.h.in: Regenerate.\n+\t* configure: Likewise.\n+\t* exception.c: Replace SJLJ_EXCEPTIONS by __USING_SJLJ_EXCEPTIONS__.\n+\n 2015-05-13  Michael Haubenwallner  <michael.haubenwallner@ssi-schaefer.com>\n \n \t* aclocal.m4: Regenerated with automake-1.11.6."}, {"sha": "0f3dbf2264bf1b9a300bbf2d6259266cd8301c71", "filename": "libobjc/config.h.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libobjc%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libobjc%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfig.h.in?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -67,8 +67,5 @@\n /* Define to the version of this package. */\n #undef PACKAGE_VERSION\n \n-/* Define if the compiler is configured for setjmp/longjmp exceptions. */\n-#undef SJLJ_EXCEPTIONS\n-\n /* Define to 1 if you have the ANSI C header files. */\n #undef STDC_HEADERS"}, {"sha": "55fcc33dbe2dddd7fc768ccb43859fbb2b31c4fa", "filename": "libobjc/configure", "status": "modified", "additions": 2, "deletions": 70, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libobjc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libobjc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfigure?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -721,7 +721,6 @@ enable_fast_install\n with_gnu_ld\n enable_libtool_lock\n enable_tls\n-enable_sjlj_exceptions\n '\n       ac_precious_vars='build_alias\n host_alias\n@@ -1355,8 +1354,6 @@ Optional Features:\n                           optimize for fast installation [default=yes]\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n   --enable-tls            Use thread-local storage [default=yes]\n-  --enable-sjlj-exceptions\n-                          force use of builtin_setjmp for exceptions\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -10601,7 +10598,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10604 \"configure\"\n+#line 10601 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10707,7 +10704,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10710 \"configure\"\n+#line 10707 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11465,71 +11462,6 @@ $as_echo \"#define HAVE_TLS 1\" >>confdefs.h\n \n   fi\n \n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for exception model to use\" >&5\n-$as_echo_n \"checking for exception model to use... \" >&6; }\n-ac_ext=c\n-ac_cpp='$CPP $CPPFLAGS'\n-ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n-ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n-ac_compiler_gnu=$ac_cv_c_compiler_gnu\n-\n-# Check whether --enable-sjlj-exceptions was given.\n-if test \"${enable_sjlj_exceptions+set}\" = set; then :\n-  enableval=$enable_sjlj_exceptions; :\n-else\n-  cat > conftest.$ac_ext << EOF\n-#line 11481 \"configure\"\n-@interface Frob\n-@end\n-@implementation Frob\n-@end\n-int proc();\n-int foo()\n-{\n-  @try {\n-   return proc();\n-  }\n-  @catch (Frob* ex) {\n-    return 0;\n-  }\n-}\n-EOF\n-old_CFLAGS=\"$CFLAGS\"\n-CFLAGS=\"-x objective-c -fgnu-runtime -fobjc-exceptions -S\"\n-if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_compile\\\"\"; } >&5\n-  (eval $ac_compile) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; then\n-  if grep _Unwind_SjLj_Resume conftest.s >/dev/null 2>&1 ; then\n-    enable_sjlj_exceptions=yes\n-  elif grep _Unwind_Resume conftest.s >/dev/null 2>&1 ; then\n-    enable_sjlj_exceptions=no\n-  fi\n-fi\n-CFLAGS=\"$old_CFLAGS\"\n-rm -f conftest*\n-fi\n-\n-if test x$enable_sjlj_exceptions = xyes; then\n-\n-$as_echo \"#define SJLJ_EXCEPTIONS 1\" >>confdefs.h\n-\n-  ac_exception_model_name=sjlj\n-elif test x$enable_sjlj_exceptions = xno; then\n-  ac_exception_model_name=\"call frame\"\n-else\n-  as_fn_error \"unable to detect exception model\" \"$LINENO\" 5\n-fi\n-ac_ext=c\n-ac_cpp='$CPP $CPPFLAGS'\n-ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n-ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n-ac_compiler_gnu=$ac_cv_c_compiler_gnu\n-\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_exception_model_name\" >&5\n-$as_echo \"$ac_exception_model_name\" >&6; }\n-\n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking if the type of bitfields matters\" >&5\n $as_echo_n \"checking if the type of bitfields matters... \" >&6; }"}, {"sha": "884194abe19f9f9f83f807ea190a2bf5d47b49ff", "filename": "libobjc/configure.ac", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libobjc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libobjc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfigure.ac?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -212,60 +212,6 @@ AC_CHECK_HEADERS(sched.h)\n # Check if we have thread-local storage\n GCC_CHECK_TLS\n \n-AC_MSG_CHECKING([for exception model to use])\n-AC_LANG_PUSH(C)\n-AC_ARG_ENABLE(sjlj-exceptions,\n-  AS_HELP_STRING([--enable-sjlj-exceptions],\n-                 [force use of builtin_setjmp for exceptions]),\n-[:],\n-[dnl Botheration.  Now we've got to detect the exception model.\n-dnl Link tests against libgcc.a are problematic since -- at least\n-dnl as of this writing -- we've not been given proper -L bits for\n-dnl single-tree newlib and libgloss.\n-dnl\n-dnl This is what AC_TRY_COMPILE would do if it didn't delete the\n-dnl conftest files before we got a change to grep them first.\n-cat > conftest.$ac_ext << EOF\n-[#]line __oline__ \"configure\"\n-@interface Frob\n-@end\n-@implementation Frob\n-@end\n-int proc();\n-int foo()\n-{\n-  @try {\n-   return proc();\n-  }\n-  @catch (Frob* ex) {\n-    return 0;\n-  }\n-}\n-EOF\n-old_CFLAGS=\"$CFLAGS\" \n-dnl work around that we don't have Objective-C support in autoconf\n-CFLAGS=\"-x objective-c -fgnu-runtime -fobjc-exceptions -S\"\n-if AC_TRY_EVAL(ac_compile); then\n-  if grep _Unwind_SjLj_Resume conftest.s >/dev/null 2>&1 ; then\n-    enable_sjlj_exceptions=yes\n-  elif grep _Unwind_Resume conftest.s >/dev/null 2>&1 ; then\n-    enable_sjlj_exceptions=no\n-  fi\n-fi\n-CFLAGS=\"$old_CFLAGS\"\n-rm -f conftest*])\n-if test x$enable_sjlj_exceptions = xyes; then\n-  AC_DEFINE(SJLJ_EXCEPTIONS, 1,\n-\t[Define if the compiler is configured for setjmp/longjmp exceptions.])\n-  ac_exception_model_name=sjlj\n-elif test x$enable_sjlj_exceptions = xno; then\n-  ac_exception_model_name=\"call frame\"\n-else\n-  AC_MSG_ERROR([unable to detect exception model])\n-fi\n-AC_LANG_POP(C)\n-AC_MSG_RESULT($ac_exception_model_name)\n-\n gt_BITFIELD_TYPE_MATTERS\n \n # ------"}, {"sha": "1cc837bbdb46e00607413670471749b227a117b7", "filename": "libobjc/exception.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libobjc%2Fexception.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libobjc%2Fexception.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fexception.c?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -199,10 +199,10 @@ get_ttype_entry (struct lsda_header_info *info, _Unwind_Word i)\n /* Using a different personality function name causes link failures\n    when trying to mix code using different exception handling\n    models.  */\n-#ifdef SJLJ_EXCEPTIONS\n+#ifdef __USING_SJLJ_EXCEPTIONS__\n #define PERSONALITY_FUNCTION\t__gnu_objc_personality_sj0\n #define __builtin_eh_return_data_regno(x) x\n-#elif defined(__SEH__) && !defined (__USING_SJLJ_EXCEPTIONS__)\n+#elif defined(__SEH__) \n #define PERSONALITY_FUNCTION\t__gnu_objc_personality_imp\n #else\n #define PERSONALITY_FUNCTION\t__gnu_objc_personality_v0\n@@ -329,7 +329,7 @@ PERSONALITY_FUNCTION (int version,\n   action_record = 0;\n   handler_switch_value = 0;\n \n-#ifdef SJLJ_EXCEPTIONS\n+#ifdef __USING_SJLJ_EXCEPTIONS__\n   /* The given \"IP\" is an index into the call-site table, with two\n      exceptions -- -1 means no-action, and 0 means terminate.  But\n      since we're using uleb128 values, we've not got random access to\n@@ -380,7 +380,7 @@ PERSONALITY_FUNCTION (int version,\n \t  goto found_something;\n \t}\n     }\n-#endif /* SJLJ_EXCEPTIONS  */\n+#endif /* __USING_SJLJ_EXCEPTIONS__  */\n \n   /* If ip is not present in the table, C++ would call terminate.  */\n   /* ??? As with Java, it's perhaps better to tweek the LSDA to that\n@@ -508,7 +508,7 @@ objc_exception_throw (id exception)\n   header->base.exception_cleanup = __objc_exception_cleanup;\n   header->value = exception;\n \n-#ifdef SJLJ_EXCEPTIONS\n+#ifdef __USING_SJLJ_EXCEPTIONS__\n   _Unwind_SjLj_RaiseException (&header->base);\n #else\n   _Unwind_RaiseException (&header->base);"}, {"sha": "05073316b259276b21cd4f468493435f1baf6c6c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -1,3 +1,19 @@\n+2015-05-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* acinclude.m4 (GLIBCXX_ENABLE_SJLJ_EXCEPTIONS): Delete.\n+\t* configure.ac: Remove GLIBCXX_ENABLE_SJLJ_EXCEPTIONS.\n+\t* config.h.in: Regenerate.\n+\t* configure: Likewise.\n+\t* libsupc++/eh_personality.cc: Replace _GLIBCXX_SJLJ_EXCEPTIONS by\n+\t__USING_SJLJ_EXCEPTIONS__.\n+\t* libsupc++/eh_throw.cc: Likewise.\n+\t* libsupc++/eh_ptr.cc: Likewise.\n+\t* doc/html/manual/appendix_porting.html: Remove\n+\tGLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n+\t* doc/xml/manual/build_hacking.xml: Likewise.\n+\t* doc/html/manual/configure.html: Remove --enable-sjlj-exceptions.\n+\t* doc/xml/manual/configure.xml: Likewise.\n+\n 2015-05-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/shared_ptr_base.h (__shared_count(unique_ptr&&)): Check"}, {"sha": "46e303c0b13a87581536c7b4882577065d894bf0", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -3128,79 +3128,6 @@ EOF\n ])\n \n \n-dnl\n-dnl Check for exception handling support.  If an explicit enable/disable\n-dnl sjlj exceptions is given, we don't have to detect.  Otherwise the\n-dnl target may or may not support call frame exceptions.\n-dnl\n-dnl --enable-sjlj-exceptions forces the use of builtin setjmp.\n-dnl --disable-sjlj-exceptions forces the use of call frame unwinding.\n-dnl Neither one forces an attempt at detection.\n-dnl\n-dnl Defines:\n-dnl  _GLIBCXX_SJLJ_EXCEPTIONS if the compiler is configured for it\n-dnl\n-AC_DEFUN([GLIBCXX_ENABLE_SJLJ_EXCEPTIONS], [\n-  AC_MSG_CHECKING([for exception model to use])\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-  GLIBCXX_ENABLE(sjlj-exceptions,auto,,\n-    [force use of builtin_setjmp for exceptions],\n-    [permit yes|no|auto])\n-\n-  if test $enable_sjlj_exceptions = auto; then\n-    # Botheration.  Now we've got to detect the exception model.  Link tests\n-    # against libgcc.a are problematic since we've not been given proper -L\n-    # bits for single-tree newlib and libgloss.\n-    #\n-    # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n-    cat > conftest.$ac_ext << EOF\n-[#]line __oline__ \"configure\"\n-struct S { ~S(); };\n-void bar();\n-void foo()\n-{\n-  S s;\n-  bar();\n-}\n-EOF\n-    old_CXXFLAGS=\"$CXXFLAGS\"\n-    CXXFLAGS=-S\n-    if AC_TRY_EVAL(ac_compile); then\n-      if grep _Unwind_SjLj_Resume conftest.s >/dev/null 2>&1 ; then\n-\tenable_sjlj_exceptions=yes\n-      elif grep _Unwind_SjLj_Register conftest.s >/dev/null 2>&1 ; then\n-\tenable_sjlj_exceptions=yes\n-      elif grep _Unwind_Resume conftest.s >/dev/null 2>&1 ; then\n-\tenable_sjlj_exceptions=no\n-      elif grep __cxa_end_cleanup conftest.s >/dev/null 2>&1 ; then\n-\tenable_sjlj_exceptions=no\n-      fi\n-    fi\n-    CXXFLAGS=\"$old_CXXFLAGS\"\n-    rm -f conftest*\n-  fi\n-\n-  # This is a tad weird, for hysterical raisins.  We have to map\n-  # enable/disable to two different models.\n-  case $enable_sjlj_exceptions in\n-    yes)\n-      AC_DEFINE(_GLIBCXX_SJLJ_EXCEPTIONS, 1,\n-\t[Define if the compiler is configured for setjmp/longjmp exceptions.])\n-      ac_exception_model_name=sjlj\n-      ;;\n-    no)\n-      ac_exception_model_name=\"call frame\"\n-      ;;\n-    *)\n-      AC_MSG_ERROR([unable to detect exception model])\n-      ;;\n-  esac\n- AC_LANG_RESTORE\n- AC_MSG_RESULT($ac_exception_model_name)\n-])\n-\n-\n dnl\n dnl Allow visibility attributes to be used on namespaces, objects, etc.\n dnl"}, {"sha": "945d44ecad41a5a6cc870fddc2acf6c55405aba6", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -768,9 +768,6 @@\n /* Define if size_t is unsigned int. */\n #undef _GLIBCXX_SIZE_T_IS_UINT\n \n-/* Define if the compiler is configured for setjmp/longjmp exceptions. */\n-#undef _GLIBCXX_SJLJ_EXCEPTIONS\n-\n /* Define to the value of the EOF integer constant. */\n #undef _GLIBCXX_STDIO_EOF\n "}, {"sha": "c206bcf9a45409735aad408d8112ffd8d3f8315c", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 9, "deletions": 99, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -862,7 +862,6 @@ with_gnu_ld\n enable_libtool_lock\n enable_hosted_libstdcxx\n enable_libstdcxx_verbose\n-enable_sjlj_exceptions\n enable_libstdcxx_pch\n enable_cstdio\n enable_clocale\n@@ -1542,9 +1541,6 @@ Optional Features:\n                           only build freestanding C++ runtime support\n   --disable-libstdcxx-verbose\n                           disable termination messages to standard error\n-  --enable-sjlj-exceptions\n-                          force use of builtin_setjmp for exceptions\n-                          [default=auto]\n   --enable-libstdcxx-pch  build pre-compiled libstdc++ headers\n                           [default=$is_hosted]\n   --enable-cstdio[=PACKAGE]\n@@ -11655,7 +11651,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11658 \"configure\"\n+#line 11654 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11761,7 +11757,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11764 \"configure\"\n+#line 11760 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15151,92 +15147,6 @@ _ACEOF\n \n # Enable compiler support that doesn't require linking.\n \n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for exception model to use\" >&5\n-$as_echo_n \"checking for exception model to use... \" >&6; }\n-\n-  ac_ext=cpp\n-ac_cpp='$CXXCPP $CPPFLAGS'\n-ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n-ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n-ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n-\n-   # Check whether --enable-sjlj-exceptions was given.\n-if test \"${enable_sjlj_exceptions+set}\" = set; then :\n-  enableval=$enable_sjlj_exceptions;\n-      case \"$enableval\" in\n-       yes|no|auto) ;;\n-       *) as_fn_error \"Unknown argument to enable/disable sjlj-exceptions\" \"$LINENO\" 5 ;;\n-\t  \t        esac\n-\n-else\n-  enable_sjlj_exceptions=auto\n-fi\n-\n-\n-\n-  if test $enable_sjlj_exceptions = auto; then\n-    # Botheration.  Now we've got to detect the exception model.  Link tests\n-    # against libgcc.a are problematic since we've not been given proper -L\n-    # bits for single-tree newlib and libgloss.\n-    #\n-    # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n-    cat > conftest.$ac_ext << EOF\n-#line 15184 \"configure\"\n-struct S { ~S(); };\n-void bar();\n-void foo()\n-{\n-  S s;\n-  bar();\n-}\n-EOF\n-    old_CXXFLAGS=\"$CXXFLAGS\"\n-    CXXFLAGS=-S\n-    if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_compile\\\"\"; } >&5\n-  (eval $ac_compile) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; then\n-      if grep _Unwind_SjLj_Resume conftest.s >/dev/null 2>&1 ; then\n-\tenable_sjlj_exceptions=yes\n-      elif grep _Unwind_SjLj_Register conftest.s >/dev/null 2>&1 ; then\n-\tenable_sjlj_exceptions=yes\n-      elif grep _Unwind_Resume conftest.s >/dev/null 2>&1 ; then\n-\tenable_sjlj_exceptions=no\n-      elif grep __cxa_end_cleanup conftest.s >/dev/null 2>&1 ; then\n-\tenable_sjlj_exceptions=no\n-      fi\n-    fi\n-    CXXFLAGS=\"$old_CXXFLAGS\"\n-    rm -f conftest*\n-  fi\n-\n-  # This is a tad weird, for hysterical raisins.  We have to map\n-  # enable/disable to two different models.\n-  case $enable_sjlj_exceptions in\n-    yes)\n-\n-$as_echo \"#define _GLIBCXX_SJLJ_EXCEPTIONS 1\" >>confdefs.h\n-\n-      ac_exception_model_name=sjlj\n-      ;;\n-    no)\n-      ac_exception_model_name=\"call frame\"\n-      ;;\n-    *)\n-      as_fn_error \"unable to detect exception model\" \"$LINENO\" 5\n-      ;;\n-  esac\n- ac_ext=c\n-ac_cpp='$CPP $CPPFLAGS'\n-ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n-ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n-ac_compiler_gnu=$ac_cv_c_compiler_gnu\n-\n- { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_exception_model_name\" >&5\n-$as_echo \"$ac_exception_model_name\" >&6; }\n-\n-\n    # Check whether --enable-libstdcxx-pch was given.\n if test \"${enable_libstdcxx_pch+set}\" = set; then :\n   enableval=$enable_libstdcxx_pch;\n@@ -15533,7 +15443,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15536 \"configure\"\n+#line 15446 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15568,7 +15478,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15571 \"configure\"\n+#line 15481 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15603,7 +15513,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15606 \"configure\"\n+#line 15516 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15639,7 +15549,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15642 \"configure\"\n+#line 15552 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15718,7 +15628,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15721 \"configure\"\n+#line 15631 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -15760,7 +15670,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15763 \"configure\"\n+#line 15673 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -15794,7 +15704,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15797 \"configure\"\n+#line 15707 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };"}, {"sha": "7eac8a1a0872eadc0e241f6570106018eb9c91cb", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -147,7 +147,6 @@ GLIBCXX_ENABLE_HOSTED\n GLIBCXX_ENABLE_VERBOSE\n \n # Enable compiler support that doesn't require linking.\n-GLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n GLIBCXX_ENABLE_PCH($is_hosted)\n GLIBCXX_ENABLE_THREADS\n GLIBCXX_ENABLE_ATOMIC_BUILTINS"}, {"sha": "e2eebe65c41c001501cbe283c7799ec1ce416bab", "filename": "libstdc++-v3/doc/html/manual/appendix_porting.html", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix_porting.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix_porting.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix_porting.html?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -162,7 +162,6 @@\n     GLIBCXX_ENABLE_DEBUG_FLAGS\n     GLIBCXX_ENABLE_LONG_LONG\n     GLIBCXX_ENABLE_PCH\n-    GLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n     GLIBCXX_ENABLE_SYMVERS\n     GLIBCXX_ENABLE_THREADS\n </pre><p>"}, {"sha": "5ec0cf2acac08e3899dde0e1a6d7d9bb790c3b95", "filename": "libstdc++-v3/doc/html/manual/configure.html", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconfigure.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconfigure.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconfigure.html?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -22,11 +22,6 @@\n \tlibstdc++ built many different ways:  \"-msoft-float\"\n \tand not, etc.  A different libstdc++ will be built for each of\n \tthe different multilib versions.  This option is on by default.\n-     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-sjlj-exceptions</code></span></dt><dd><p>Forces old, set-jump/long-jump exception handling model.  If\n-\tat all possible, the new, frame unwinding exception handling routines\n-\tshould be used instead, as they significantly reduce both\n-\truntime memory usage and executable size. This option can\n-\tchange the library ABI.\n      </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-version-specific-runtime-libs</code></span></dt><dd><p>Specify that run-time libraries should be installed in the\n \tcompiler-specific subdirectory (i.e.,\n \t<code class=\"code\">${libdir}/gcc-lib/${target_alias}/${gcc_version}</code>)"}, {"sha": "1b789d32028d6d7bce734fde9014a2ecc4be4119", "filename": "libstdc++-v3/doc/xml/manual/build_hacking.xml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbuild_hacking.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbuild_hacking.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbuild_hacking.xml?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -232,7 +232,6 @@ in the build directory starts the build process. The <literal>all</literal> targ\n     GLIBCXX_ENABLE_DEBUG_FLAGS\n     GLIBCXX_ENABLE_LONG_LONG\n     GLIBCXX_ENABLE_PCH\n-    GLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n     GLIBCXX_ENABLE_SYMVERS\n     GLIBCXX_ENABLE_THREADS\n </programlisting>"}, {"sha": "9ba9c1a7641047b2eecccc2270f384d4d825f652", "filename": "libstdc++-v3/doc/xml/manual/configure.xml", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -45,15 +45,6 @@\n      </para>\n  </listitem></varlistentry>\n \n- <varlistentry><term><code>--enable-sjlj-exceptions</code></term>\n- <listitem><para>Forces old, set-jump/long-jump exception handling model.  If\n-\tat all possible, the new, frame unwinding exception handling routines\n-\tshould be used instead, as they significantly reduce both\n-\truntime memory usage and executable size. This option can\n-\tchange the library ABI.\n-     </para>\n- </listitem></varlistentry>\n-\n  <varlistentry><term><code>--enable-version-specific-runtime-libs</code></term>\n  <listitem><para>Specify that run-time libraries should be installed in the\n \tcompiler-specific subdirectory (i.e.,"}, {"sha": "f35d51e5bb14486b70d5366b0ba2b6f477241377", "filename": "libstdc++-v3/libsupc++/eh_personality.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -327,16 +327,16 @@ namespace __cxxabiv1\n \n // Using a different personality function name causes link failures\n // when trying to mix code using different exception handling models.\n-#ifdef _GLIBCXX_SJLJ_EXCEPTIONS\n+#ifdef __USING_SJLJ_EXCEPTIONS__\n #define PERSONALITY_FUNCTION\t__gxx_personality_sj0\n #define __builtin_eh_return_data_regno(x) x\n-#elif defined(__SEH__) && !defined (_GLIBCXX_SJLJ_EXCEPTIONS)\n+#elif defined(__SEH__)\n #define PERSONALITY_FUNCTION\t__gxx_personality_imp\n #else\n #define PERSONALITY_FUNCTION\t__gxx_personality_v0\n #endif\n \n-#if defined (__SEH__) && !defined (_GLIBCXX_SJLJ_EXCEPTIONS)\n+#if defined (__SEH__) && !defined (__USING_SJLJ_EXCEPTIONS__)\n static\n #else\n extern \"C\"\n@@ -455,7 +455,7 @@ PERSONALITY_FUNCTION (int version,\n   action_record = 0;\n   handler_switch_value = 0;\n \n-#ifdef _GLIBCXX_SJLJ_EXCEPTIONS\n+#ifdef __USING_SJLJ_EXCEPTIONS__\n   // The given \"IP\" is an index into the call-site table, with two\n   // exceptions -- -1 means no-action, and 0 means terminate.  But\n   // since we're using uleb128 values, we've not got random access\n@@ -508,7 +508,7 @@ PERSONALITY_FUNCTION (int version,\n \t  goto found_something;\n \t}\n     }\n-#endif // _GLIBCXX_SJLJ_EXCEPTIONS\n+#endif // __USING_SJLJ_EXCEPTIONS__\n \n   // If ip is not present in the table, call terminate.  This is for\n   // a destructor inside a cleanup, or a library routine the compiler\n@@ -789,7 +789,7 @@ __cxa_call_unexpected (void *exc_obj_in)\n }\n #endif\n \n-#if defined (__SEH__) && !defined (_GLIBCXX_SJLJ_EXCEPTIONS)\n+#if defined (__SEH__) && !defined (__USING_SJLJ_EXCEPTIONS__)\n extern \"C\"\n EXCEPTION_DISPOSITION\n __gxx_personality_seh0 (PEXCEPTION_RECORD ms_exc, void *this_frame,"}, {"sha": "3872767873d6e5ec71302d1aaab16e820c1f3603", "filename": "libstdc++-v3/libsupc++/eh_ptr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -248,7 +248,7 @@ std::rethrow_exception(std::exception_ptr ep)\n   __cxa_eh_globals *globals = __cxa_get_globals ();\n   globals->uncaughtExceptions += 1;\n \n-#ifdef _GLIBCXX_SJLJ_EXCEPTIONS\n+#ifdef __USING_SJLJ_EXCEPTIONS__\n   _Unwind_SjLj_RaiseException (&dep->unwindHeader);\n #else\n   _Unwind_RaiseException (&dep->unwindHeader);"}, {"sha": "4c953e0cddf8276cae7fda799431e865868b8f27", "filename": "libstdc++-v3/libsupc++/eh_throw.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b92a9f3b66085450297135e51e0810727d59f8c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc?ref=9b92a9f3b66085450297135e51e0810727d59f8c", "patch": "@@ -76,7 +76,7 @@ __cxxabiv1::__cxa_throw (void *obj, std::type_info *tinfo,\n   __GXX_INIT_PRIMARY_EXCEPTION_CLASS(header->exc.unwindHeader.exception_class);\n   header->exc.unwindHeader.exception_cleanup = __gxx_exception_cleanup;\n \n-#ifdef _GLIBCXX_SJLJ_EXCEPTIONS\n+#ifdef __USING_SJLJ_EXCEPTIONS__\n   _Unwind_SjLj_RaiseException (&header->exc.unwindHeader);\n #else\n   _Unwind_RaiseException (&header->exc.unwindHeader);\n@@ -109,7 +109,7 @@ __cxxabiv1::__cxa_rethrow ()\n \t\t  header->exceptionType);\n \t}\n \n-#ifdef _GLIBCXX_SJLJ_EXCEPTIONS\n+#ifdef __USING_SJLJ_EXCEPTIONS__\n       _Unwind_SjLj_Resume_or_Rethrow (&header->unwindHeader);\n #else\n #if defined(_LIBUNWIND_STD_ABI)"}]}