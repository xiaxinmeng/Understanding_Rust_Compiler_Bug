{"sha": "7816b87eb16eea7819a8b232f69fa1b9a7418bf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgxNmI4N2ViMTZlZWE3ODE5YThiMjMyZjY5ZmExYjlhNzQxOGJmNw==", "commit": {"author": {"name": "Josh Conner", "email": "jconner@apple.com", "date": "2007-01-04T01:37:15Z"}, "committer": {"name": "Josh Conner", "email": "jconner@gcc.gnu.org", "date": "2007-01-04T01:37:15Z"}, "message": "re PR middle-end/29683 (Arg split between stack/regs can cause stack corruption)\n\n2007-03-01  Josh Conner  <jconner@apple.com>\n\n\tPR middle-end/29683\n\t* calls.c (compute_argument_addresses): Set stack and stack_slot\n\tfor partial args, too.\n\t(store_one_arg): Use locate.size.constant for the size when\n\tgenerating a save_area.\n\n2007-03-01  Josh Conner  <jconner@apple.com>\n\n\tPR middle-end/29683\n\t* gcc.dg/pr29683.c: New.\n\nFrom-SVN: r120425", "tree": {"sha": "186a95381a2932a55c3a3134f0868b1aef0b3390", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/186a95381a2932a55c3a3134f0868b1aef0b3390"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7816b87eb16eea7819a8b232f69fa1b9a7418bf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7816b87eb16eea7819a8b232f69fa1b9a7418bf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7816b87eb16eea7819a8b232f69fa1b9a7418bf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7816b87eb16eea7819a8b232f69fa1b9a7418bf7/comments", "author": null, "committer": null, "parents": [{"sha": "4e8b35902bb2e407608a2425a7a211be4ccfacc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e8b35902bb2e407608a2425a7a211be4ccfacc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e8b35902bb2e407608a2425a7a211be4ccfacc5"}], "stats": {"total": 102, "additions": 94, "deletions": 8}, "files": [{"sha": "be703c7f9ab4c26b19ba3892d4e6f2a4a78ebb93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7816b87eb16eea7819a8b232f69fa1b9a7418bf7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7816b87eb16eea7819a8b232f69fa1b9a7418bf7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7816b87eb16eea7819a8b232f69fa1b9a7418bf7", "patch": "@@ -1,3 +1,11 @@\n+2007-01-03  Josh Conner  <jconner@apple.com>\n+\n+\tPR middle-end/29683\n+\t* calls.c (compute_argument_addresses): Set stack and stack_slot\n+\tfor partial args, too.\n+\t(store_one_arg): Use locate.size.constant for the size when\n+\tgenerating a save_area.\n+\n 2007-01-03  Robert Kennedy <jimbob@google.com>\n \n \t* tree-cfg.c (tree_merge_blocks): Release SSA_NAME phi results"}, {"sha": "c0d1f8ca75459cb525bcb403c004679af98ddc0a", "filename": "gcc/calls.c", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7816b87eb16eea7819a8b232f69fa1b9a7418bf7/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7816b87eb16eea7819a8b232f69fa1b9a7418bf7/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=7816b87eb16eea7819a8b232f69fa1b9a7418bf7", "patch": "@@ -1355,9 +1355,13 @@ compute_argument_addresses (struct arg_data *args, rtx argblock, int num_actuals\n \t  rtx slot_offset = ARGS_SIZE_RTX (args[i].locate.slot_offset);\n \t  rtx addr;\n \t  unsigned int align, boundary;\n+\t  unsigned int units_on_stack = 0;\n+\t  enum machine_mode partial_mode = VOIDmode;\n \n \t  /* Skip this parm if it will not be passed on the stack.  */\n-\t  if (! args[i].pass_on_stack && args[i].reg != 0)\n+\t  if (! args[i].pass_on_stack\n+\t      && args[i].reg != 0\n+\t      && args[i].partial == 0)\n \t    continue;\n \n \t  if (GET_CODE (offset) == CONST_INT)\n@@ -1366,9 +1370,23 @@ compute_argument_addresses (struct arg_data *args, rtx argblock, int num_actuals\n \t    addr = gen_rtx_PLUS (Pmode, arg_reg, offset);\n \n \t  addr = plus_constant (addr, arg_offset);\n-\t  args[i].stack = gen_rtx_MEM (args[i].mode, addr);\n-\t  set_mem_attributes (args[i].stack,\n-\t\t\t      TREE_TYPE (args[i].tree_value), 1);\n+\n+\t  if (args[i].partial != 0)\n+\t    {\n+\t      /* Only part of the parameter is being passed on the stack.\n+\t\t Generate a simple memory reference of the correct size.  */\n+\t      units_on_stack = args[i].locate.size.constant;\n+\t      partial_mode = mode_for_size (units_on_stack * BITS_PER_UNIT,\n+\t\t\t\t\t    MODE_INT, 1);\n+\t      args[i].stack = gen_rtx_MEM (partial_mode, addr);\n+\t      set_mem_size (args[i].stack, GEN_INT (units_on_stack));\n+\t    }\n+\t  else\n+\t    {\n+\t      args[i].stack = gen_rtx_MEM (args[i].mode, addr);\n+\t      set_mem_attributes (args[i].stack,\n+\t\t\t\t  TREE_TYPE (args[i].tree_value), 1);\n+\t    }\n \t  align = BITS_PER_UNIT;\n \t  boundary = args[i].locate.boundary;\n \t  if (args[i].locate.where_pad != downward)\n@@ -1386,9 +1404,21 @@ compute_argument_addresses (struct arg_data *args, rtx argblock, int num_actuals\n \t    addr = gen_rtx_PLUS (Pmode, arg_reg, slot_offset);\n \n \t  addr = plus_constant (addr, arg_offset);\n-\t  args[i].stack_slot = gen_rtx_MEM (args[i].mode, addr);\n-\t  set_mem_attributes (args[i].stack_slot,\n-\t\t\t      TREE_TYPE (args[i].tree_value), 1);\n+\n+\t  if (args[i].partial != 0)\n+\t    {\n+\t      /* Only part of the parameter is being passed on the stack.\n+\t\t Generate a simple memory reference of the correct size.\n+\t       */\n+\t      args[i].stack_slot = gen_rtx_MEM (partial_mode, addr);\n+\t      set_mem_size (args[i].stack_slot, GEN_INT (units_on_stack));\n+\t    }\n+\t  else\n+\t    {\n+\t      args[i].stack_slot = gen_rtx_MEM (args[i].mode, addr);\n+\t      set_mem_attributes (args[i].stack_slot,\n+\t\t\t\t  TREE_TYPE (args[i].tree_value), 1);\n+\t    }\n \t  set_mem_align (args[i].stack_slot, args[i].locate.boundary);\n \n \t  /* Function incoming arguments may overlap with sibling call\n@@ -4056,7 +4086,7 @@ store_one_arg (struct arg_data *arg, rtx argblock, int flags,\n \t\t  arg->save_area = assign_temp (nt, 0, 1, 1);\n \t\t  preserve_temp_slots (arg->save_area);\n \t\t  emit_block_move (validize_mem (arg->save_area), stack_area,\n-\t\t\t\t   expr_size (arg->tree_value),\n+\t\t\t\t   GEN_INT (arg->locate.size.constant),\n \t\t\t\t   BLOCK_OP_CALL_PARM);\n \t\t}\n \t      else"}, {"sha": "240666861916d47e3fea8d1316975c093f05abee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7816b87eb16eea7819a8b232f69fa1b9a7418bf7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7816b87eb16eea7819a8b232f69fa1b9a7418bf7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7816b87eb16eea7819a8b232f69fa1b9a7418bf7", "patch": "@@ -1,3 +1,8 @@\n+2007-01-03  Josh Conner  <jconner@apple.com>\n+\n+\tPR middle-end/29683\n+\t* gcc.dg/pr29683.c: New.\n+\n 2007-01-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/28217"}, {"sha": "4bed679b561b67f2a34f6704a2287365111009e1", "filename": "gcc/testsuite/gcc.dg/pr29683.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7816b87eb16eea7819a8b232f69fa1b9a7418bf7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29683.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7816b87eb16eea7819a8b232f69fa1b9a7418bf7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29683.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29683.c?ref=7816b87eb16eea7819a8b232f69fa1b9a7418bf7", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os -fno-inline-functions\" } */\n+\n+void abort (void);\n+\n+typedef struct {\n+  int x[7];\n+} agg7;\n+\n+typedef struct {\n+  int mbr1;\n+  int mbr2;\n+} agg2;\n+\n+int expected = 31415;\n+agg7 filler;\n+\n+int GetConst (agg7 filler, agg2 split)\n+{\n+  return expected;\n+}\n+\n+void VerifyValues (agg7 filler, int last_reg, int first_stack, int second_stack)\n+{\n+  if (first_stack != 123 || second_stack != expected)\n+    abort ();\n+}\n+\n+void RunTest (agg2 a)\n+{\n+  int result;\n+\t\n+  result = GetConst (filler, a);\n+  VerifyValues (filler, 0, a.mbr1, result);\n+}\n+\n+int main(void)\n+{\n+  agg2 result = {123, 456};\n+  RunTest (result);\n+  return 0;\n+}\n+"}]}