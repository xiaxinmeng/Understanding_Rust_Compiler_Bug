{"sha": "dafe11cd1851fecb7b7bc780410be394fc99142a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFmZTExY2QxODUxZmVjYjdiN2JjNzgwNDEwYmUzOTRmYzk5MTQyYQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2017-01-23T13:28:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-23T13:28:58Z"}, "message": "ghost.ads, ghost.adb (Is_Ignored_Ghost_Unit): New routine.\n\n2017-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* ghost.ads, ghost.adb (Is_Ignored_Ghost_Unit): New routine.\n\t* gnat1drv.adb Generate an empty object file for an ignored\n\tGhost compilation unit.\n\t* inline.adb, sem_util.adb, sem_ch4.adb: Minor reformatting.\n\nFrom-SVN: r244808", "tree": {"sha": "3438d0c85912057159c2ab208a41926a113a1b2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3438d0c85912057159c2ab208a41926a113a1b2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dafe11cd1851fecb7b7bc780410be394fc99142a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dafe11cd1851fecb7b7bc780410be394fc99142a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dafe11cd1851fecb7b7bc780410be394fc99142a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dafe11cd1851fecb7b7bc780410be394fc99142a/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bfaf8a97808c691ae311a55cfa0e930e92ee65a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfaf8a97808c691ae311a55cfa0e930e92ee65a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfaf8a97808c691ae311a55cfa0e930e92ee65a3"}], "stats": {"total": 93, "additions": 62, "deletions": 31}, "files": [{"sha": "b396520ced4cbb4d0589878d3f4ed4277f845b9e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafe11cd1851fecb7b7bc780410be394fc99142a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafe11cd1851fecb7b7bc780410be394fc99142a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=dafe11cd1851fecb7b7bc780410be394fc99142a", "patch": "@@ -1,3 +1,10 @@\n+2017-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* ghost.ads, ghost.adb (Is_Ignored_Ghost_Unit): New routine.\n+\t* gnat1drv.adb Generate an empty object file for an ignored\n+\tGhost compilation unit.\n+\t* inline.adb, sem_util.adb, sem_ch4.adb: Minor reformatting.\n+\n 2017-01-23  Yannick Moy  <moy@adacore.com>\n \n \t* sem_ch4.adb (Analyze_Indexed_Component_Form):"}, {"sha": "ec4c1d646c427a4b3bd24ea332e154e94e1c7aed", "filename": "gcc/ada/ghost.adb", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafe11cd1851fecb7b7bc780410be394fc99142a/gcc%2Fada%2Fghost.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafe11cd1851fecb7b7bc780410be394fc99142a/gcc%2Fada%2Fghost.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.adb?ref=dafe11cd1851fecb7b7bc780410be394fc99142a", "patch": "@@ -940,6 +940,21 @@ package body Ghost is\n       return False;\n    end Is_Ghost_Procedure_Call;\n \n+   ---------------------------\n+   -- Is_Ignored_Ghost_Unit --\n+   ---------------------------\n+\n+   function Is_Ignored_Ghost_Unit (N : Node_Id) return Boolean is\n+   begin\n+      --  Inspect the original node of the unit in case removal of ignored\n+      --  Ghost code has already taken place.\n+\n+      return\n+        Nkind (N) = N_Compilation_Unit\n+          and then Is_Ignored_Ghost_Entity\n+                     (Defining_Entity (Original_Node (Unit (N))));\n+   end Is_Ignored_Ghost_Unit;\n+\n    -------------------------\n    -- Is_Subject_To_Ghost --\n    -------------------------\n@@ -1603,8 +1618,8 @@ package body Ghost is\n \n          begin\n             --  Do not prune compilation unit nodes because many mechanisms\n-            --  depend on their presence. Note that context items must still\n-            --  be processed.\n+            --  depend on their presence. Note that context items are still\n+            --  being processed.\n \n             if Nkind (N) = N_Compilation_Unit then\n                return OK;"}, {"sha": "e0211c02f10b1b1c1c19d4d8f1c6d62dc791eac2", "filename": "gcc/ada/ghost.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafe11cd1851fecb7b7bc780410be394fc99142a/gcc%2Fada%2Fghost.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafe11cd1851fecb7b7bc780410be394fc99142a/gcc%2Fada%2Fghost.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.ads?ref=dafe11cd1851fecb7b7bc780410be394fc99142a", "patch": "@@ -94,6 +94,10 @@ package Ghost is\n    --  Determine whether arbitrary node N denotes a procedure call invoking a\n    --  Ghost procedure.\n \n+   function Is_Ignored_Ghost_Unit (N : Node_Id) return Boolean;\n+   --  Determine whether compilation unit N is subject to pragma Ghost with\n+   --  policy Ignore.\n+\n    procedure Lock;\n    --  Lock internal tables before calling backend\n "}, {"sha": "30ccd610437a7c5d910c9c30fa6c5f0aaf1193b6", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafe11cd1851fecb7b7bc780410be394fc99142a/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafe11cd1851fecb7b7bc780410be394fc99142a/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=dafe11cd1851fecb7b7bc780410be394fc99142a", "patch": "@@ -36,7 +36,7 @@ with Fmap;\n with Fname;    use Fname;\n with Fname.UF; use Fname.UF;\n with Frontend;\n-with Ghost;\n+with Ghost;    use Ghost;\n with Gnatvsn;  use Gnatvsn;\n with Inline;\n with Lib;      use Lib;\n@@ -919,6 +919,7 @@ procedure Gnat1drv is\n    --  Local variables\n \n    Back_End_Mode : Back_End.Back_End_Mode_Type;\n+   Ecode         : Exit_Code_Type;\n \n    Main_Unit_Kind : Node_Kind;\n    --  Kind of main compilation unit node\n@@ -1265,16 +1266,21 @@ begin\n          --  it must not produce an ALI or object file. Do not emit any errors\n          --  related to code generation because the unit does not exist.\n \n-         if Main_Unit_Kind = N_Null_Statement\n-           and then Is_Ignored_Ghost_Node\n-                      (Original_Node (Unit (Main_Unit_Node)))\n-         then\n-            null;\n+         if Is_Ignored_Ghost_Unit (Main_Unit_Node) then\n+\n+            --  Exit the gnat driver with success, otherwise external builders\n+            --  such as gnatmake and gprbuild will treat the compilation of an\n+            --  ignored Ghost unit as a failure. Note that this will produce\n+            --  an empty object file for the unit.\n+\n+            Ecode := E_Success;\n \n          --  Otherwise the unit is missing a crucial piece that prevents code\n          --  generation.\n \n          else\n+            Ecode := E_No_Code;\n+\n             Set_Standard_Error;\n             Write_Str (\"cannot generate code for file \");\n             Write_Name (Unit_File_Name (Main_Unit));\n@@ -1335,9 +1341,11 @@ begin\n          Namet.Finalize;\n          Check_Rep_Info;\n \n-         --  Exit program with error indication, to kill object file\n+         --  Exit the driver with an appropriate status indicator. This will\n+         --  generate an empty object file for ignored Ghost units, otherwise\n+         --  no object file will be generated.\n \n-         Exit_Program (E_No_Code);\n+         Exit_Program (Ecode);\n       end if;\n \n       --  In -gnatc mode, we only do annotation if -gnatt or -gnatR is also set"}, {"sha": "78d921a75d76c0aaa65c382e1660e0bc98876ac3", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafe11cd1851fecb7b7bc780410be394fc99142a/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafe11cd1851fecb7b7bc780410be394fc99142a/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=dafe11cd1851fecb7b7bc780410be394fc99142a", "patch": "@@ -958,8 +958,8 @@ package body Inline is\n       -----------------------------------------\n \n       function Has_Single_Return_In_GNATprove_Mode return Boolean is\n-         Last_Statement : Node_Id := Empty;\n          Body_To_Inline : constant Node_Id := N;\n+         Last_Statement : Node_Id := Empty;\n \n          function Check_Return (N : Node_Id) return Traverse_Result;\n          --  Returns OK on node N if this is not a return statement different\n@@ -972,8 +972,8 @@ package body Inline is\n          function Check_Return (N : Node_Id) return Traverse_Result is\n          begin\n             case Nkind (N) is\n-               when N_Simple_Return_Statement\n-                  | N_Extended_Return_Statement\n+               when N_Extended_Return_Statement\n+                  | N_Simple_Return_Statement\n                =>\n                   if N = Last_Statement then\n                      return OK;\n@@ -3166,9 +3166,9 @@ package body Inline is\n             --  In GNATprove mode, keep the most precise type of the actual for\n             --  the temporary variable, when the formal type is unconstrained.\n             --  Otherwise, the AST may contain unexpected assignment statements\n-            --  to a temporary variable of unconstrained type renaming a\n-            --  local variable of constrained type, which is not expected\n-            --  by GNATprove.\n+            --  to a temporary variable of unconstrained type renaming a local\n+            --  variable of constrained type, which is not expected by\n+            --  GNATprove.\n \n             elsif Etype (F) /= Etype (A)\n               and then (not GNATprove_Mode or else Is_Constrained (Etype (F)))"}, {"sha": "1cdb7a03288550f95ef21376f8d77e27201778f0", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafe11cd1851fecb7b7bc780410be394fc99142a/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafe11cd1851fecb7b7bc780410be394fc99142a/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=dafe11cd1851fecb7b7bc780410be394fc99142a", "patch": "@@ -2419,9 +2419,7 @@ package body Sem_Ch4 is\n                Analyze (Exp);\n                Set_Etype (N, Any_Type);\n \n-               if not Has_Compatible_Type\n-                 (Exp, Entry_Index_Type (Pent))\n-               then\n+               if not Has_Compatible_Type (Exp, Entry_Index_Type (Pent)) then\n                   Error_Msg_N (\"invalid index type in entry name\", N);\n \n                elsif Present (Next (Exp)) then"}, {"sha": "40a72f7c9aebc73bac5a0b87336008858ce4a995", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafe11cd1851fecb7b7bc780410be394fc99142a/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafe11cd1851fecb7b7bc780410be394fc99142a/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=dafe11cd1851fecb7b7bc780410be394fc99142a", "patch": "@@ -16227,13 +16227,13 @@ package body Sem_Util is\n       New_Scope : Entity_Id  := Empty) return Node_Id\n    is\n       Actual_Map : Elist_Id := Map;\n-      --  This is the actual map for the copy. It is initialized with the\n-      --  given elements, and then enlarged as required for Itypes that are\n-      --  copied during the first phase of the copy operation. The visit\n-      --  procedures add elements to this map as Itypes are encountered.\n-      --  The reason we cannot use Map directly, is that it may well be\n-      --  (and normally is) initialized to No_Elist, and if we have mapped\n-      --  entities, we have to reset it to point to a real Elist.\n+      --  This is the actual map for the copy. It is initialized with the given\n+      --  elements, and then enlarged as required for Itypes that are copied\n+      --  during the first phase of the copy operation. The visit procedures\n+      --  add elements to this map as Itypes are encountered. The reason we\n+      --  cannot use Map directly, is that it may well be (and normally is)\n+      --  initialized to No_Elist, and if we have mapped entities, we have to\n+      --  reset it to point to a real Elist.\n \n       NCT_Hash_Threshold : constant := 20;\n       --  If there are more than this number of pairs of entries in the map,\n@@ -16265,11 +16265,10 @@ package body Sem_Util is\n       --  phase, the tree is copied, using the replacement map to replace any\n       --  Itype references within the copied tree.\n \n-      --  The following hash tables are used if the Map supplied has more\n-      --  than hash threshold entries to speed up access to the map. If\n-      --  there are fewer entries, then the map is searched sequentially\n-      --  (because setting up a hash table for only a few entries takes\n-      --  more time than it saves.\n+      --  The following hash tables are used if the Map supplied has more than\n+      --  hash threshold entries to speed up access to the map. If there are\n+      --  fewer entries, then the map is searched sequentially (because setting\n+      --  up a hash table for only a few entries takes more time than it saves.\n \n       subtype NCT_Header_Num is Int range 0 .. 511;\n       --  Defines range of headers in hash tables (512 headers)"}]}