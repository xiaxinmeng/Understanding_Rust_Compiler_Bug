{"sha": "d4f283a153449eb77df3fe4083538b5f191a6b38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRmMjgzYTE1MzQ0OWViNzdkZjNmZTQwODM1MzhiNWYxOTFhNmIzOA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2014-01-17T11:35:46Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2014-01-17T11:35:46Z"}, "message": "msp430.opt: (mcpu): New option.\n\n\t* config/msp430/msp430.opt: (mcpu): New option.\n\t* config/msp430/msp430.c (msp430_mcu_name): Use target_mcu.\n\t(msp430_option_override): Parse target_cpu.  If the MCU name\n\tmatches a generic string, clear target_mcu.\n\t(msp430_attr): Allow numeric interrupt values up to 63.\n\t(msp430_expand_epilogue): No longer invert operand 1 of gen_popm.\n\t* config/msp430/msp430.h (ASM_SPEC): Convert -mcpu into a -mmcu\n\toption.\n\t* config/msp430/t-msp430: (MULTILIB_MATCHES): Remove mcu matches.\n\tAdd mcpu matches.\n\t* config/msp430/msp430.md (popm): Use %J rather than %I.\n\t(addsi3): Use msp430_nonimmediate_operand for operand 2.\n\t(addhi_cy_i): Use immediate_operand for operand 2.\n\t* doc/invoke.texi: Document -mcpu option.\n\nFrom-SVN: r206705", "tree": {"sha": "45f78eb9fc0d83e901196ae36dfc52c2f5defb84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45f78eb9fc0d83e901196ae36dfc52c2f5defb84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4f283a153449eb77df3fe4083538b5f191a6b38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f283a153449eb77df3fe4083538b5f191a6b38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4f283a153449eb77df3fe4083538b5f191a6b38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f283a153449eb77df3fe4083538b5f191a6b38/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7be64667c127a0cdb9dc7e4f02dcd7720589919d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be64667c127a0cdb9dc7e4f02dcd7720589919d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7be64667c127a0cdb9dc7e4f02dcd7720589919d"}], "stats": {"total": 379, "additions": 88, "deletions": 291}, "files": [{"sha": "f6b76927cc29f89c1468530583282959224ae9e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f283a153449eb77df3fe4083538b5f191a6b38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f283a153449eb77df3fe4083538b5f191a6b38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4f283a153449eb77df3fe4083538b5f191a6b38", "patch": "@@ -1,3 +1,20 @@\n+2014-01-17  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/msp430/msp430.opt: (mcpu): New option.\n+\t* config/msp430/msp430.c (msp430_mcu_name): Use target_mcu.\n+\t(msp430_option_override): Parse target_cpu.  If the MCU name\n+\tmatches a generic string, clear target_mcu.\n+\t(msp430_attr): Allow numeric interrupt values up to 63.\n+\t(msp430_expand_epilogue): No longer invert operand 1 of gen_popm.\n+\t* config/msp430/msp430.h (ASM_SPEC): Convert -mcpu into a -mmcu\n+\toption.\n+\t* config/msp430/t-msp430: (MULTILIB_MATCHES): Remove mcu matches.\n+\tAdd mcpu matches.\n+\t* config/msp430/msp430.md (popm): Use %J rather than %I.\n+\t(addsi3): Use msp430_nonimmediate_operand for operand 2.\n+\t(addhi_cy_i): Use immediate_operand for operand 2.\n+\t* doc/invoke.texi: Document -mcpu option.\n+\n 2014-01-17  Richard Biener  <rguenther@suse.de>\n \n \tPR rtl-optimization/38518"}, {"sha": "055125f5b1cea8e68033ab8b87f06e7b836f4a6d", "filename": "gcc/config/msp430/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f283a153449eb77df3fe4083538b5f191a6b38/gcc%2Fconfig%2Fmsp430%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f283a153449eb77df3fe4083538b5f191a6b38/gcc%2Fconfig%2Fmsp430%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fconstraints.md?ref=d4f283a153449eb77df3fe4083538b5f191a6b38", "patch": "@@ -72,7 +72,7 @@\n \t)))\n \n (define_constraint \"Yc\"\n-  \"Memory reference, for CALL - we can't use SP\"\n+  \"Memory reference, for CALL - we can't use SP.\"\n   (and (match_code \"mem\")\n        (match_code \"mem\" \"0\")\n        (not (ior"}, {"sha": "8b0af1a3e0111afd180a0857295d0def86f59bb7", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f283a153449eb77df3fe4083538b5f191a6b38/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f283a153449eb77df3fe4083538b5f191a6b38/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=d4f283a153449eb77df3fe4083538b5f191a6b38", "patch": "@@ -178,12 +178,12 @@ static const char * msp430x_names [] =\n const char *\n msp430_mcu_name (void)\n {\n-  if (target_cpu)\n+  if (target_mcu)\n     {\n       unsigned int i;\n       static char mcu_name [64];\n \n-      snprintf (mcu_name, sizeof (mcu_name) - 1, \"__%s__\", target_cpu);\n+      snprintf (mcu_name, sizeof (mcu_name) - 1, \"__%s__\", target_mcu);\n       for (i = strlen (mcu_name); i--;)\n \tmcu_name[i] = TOUPPER (mcu_name[i]);\n       return mcu_name;\n@@ -198,11 +198,18 @@ msp430_option_override (void)\n   init_machine_status = msp430_init_machine_status;\n \n   if (target_cpu)\n+    {\n+      if (strcasecmp (target_cpu, \"msp430x\") == 0\n+\t  || strcasecmp (target_cpu, \"msp430xv2\") == 0)\n+\tmsp430x = true;\n+    }\n+  \n+  if (target_mcu)\n     {\n       unsigned i;\n \n       for (i = ARRAY_SIZE (msp430x_names); i--;)\n-\tif (strcasecmp (target_cpu, msp430x_names[i]) == 0)\n+\tif (strcasecmp (target_mcu, msp430x_names[i]) == 0)\n \t  {\n \t    msp430x = true;\n \t    break;\n@@ -214,10 +221,14 @@ msp430_option_override (void)\n \n       /* We also recognise two generic MCU 430X names.  They do not\n \t appear in the msp430x_names table as we want to be able to\n-\t generate special C preprocessor defines for them.  */\n-      if (strcasecmp (target_cpu, \"msp430x\") == 0\n-\t  || strcasecmp (target_cpu, \"msp430xv2\") == 0)\n-\tmsp430x = true;\n+\t generate special C preprocessor defines for them.  That is\n+\t why we set target_mcu to NULL.  */\n+      if (strcasecmp (target_mcu, \"msp430x\") == 0\n+\t  || strcasecmp (target_mcu, \"msp430xv2\") == 0)\n+\t{\n+\t  msp430x = true;\n+\t  target_mcu = NULL;\n+\t}\n     }\n \n   if (TARGET_LARGE && !msp430x)\n@@ -1093,11 +1104,11 @@ msp430_attr (tree * node,\n \t  break;\n \n \tcase INTEGER_CST:\n-\t  if (TREE_INT_CST_LOW (value) > 31)\n+\t  if (TREE_INT_CST_LOW (value) > 63)\n \t    /* Allow the attribute to be added - the linker script\n \t       being used may still recognise this value.  */\n \t    warning (OPT_Wattributes,\n-\t\t     \"numeric argument of %qE attribute must be in range 0..31\",\n+\t\t     \"numeric argument of %qE attribute must be in range 0..63\",\n \t\t     name);\n \t  break;\n \n@@ -1458,11 +1469,9 @@ msp430_expand_epilogue (int is_eh)\n \n \tif (msp430x)\n \t  {\n-\t    /* Note: With TARGET_LARGE we still use POPM as POPX.A is two\n-\t       bytes bigger.\n-\t       Note: See the popm pattern for the explanation of the strange\n-\t       arguments.  */\n-\t    emit_insn (gen_popm (stack_pointer_rtx, GEN_INT (~(seq - 1)),\n+\t    /* Note: With TARGET_LARGE we still use\n+\t       POPM as POPX.A is two bytes bigger.  */\n+\t    emit_insn (gen_popm (stack_pointer_rtx, GEN_INT (seq - 1),\n \t\t\t\t GEN_INT (count)));\n \t    i += count - 1;\n \t  }\n@@ -2186,7 +2195,7 @@ msp430x_extendhisi (rtx * operands)\n {\n   if (REGNO (operands[0]) == REGNO (operands[1]))\n     /* Low word of dest == source word.  */\n-    return \"BIT.W #0x8000, %L0 { SUBC.W %H0, %H0 { INV.W %H0, %H0\"; /* 8-bytes.  */\n+    return \"BIT.W\\t#0x8000, %L0 { SUBC.W\\t%H0, %H0 { INV.W\\t%H0, %H0\"; /* 8-bytes.  */\n \n   if (! msp430x)\n     /* Note: This sequence is approximately the same length as invoking a helper\n@@ -2199,14 +2208,14 @@ msp430x_extendhisi (rtx * operands)\n \n        but this version does not involve any function calls or using argument\n        registers, so it reduces register pressure.  */\n-    return \"MOV.W %1, %L0 { BIT.W #0x8000, %L0 { SUBC.W %H0, %H0 { INV.W %H0, %H0\"; /* 10-bytes.  */\n+    return \"MOV.W\\t%1, %L0 { BIT.W\\t#0x8000, %L0 { SUBC.W\\t%H0, %H0 { INV.W\\t%H0, %H0\"; /* 10-bytes.  */\n   \n   if (REGNO (operands[0]) + 1 == REGNO (operands[1]))\n     /* High word of dest == source word.  */\n-    return \"MOV.W %1, %L0 { RPT #15 { RRAX.W %H0\"; /* 6-bytes.  */\n+    return \"MOV.W\\t%1, %L0 { RPT\\t#15 { RRAX.W\\t%H0\"; /* 6-bytes.  */\n \n   /* No overlap between dest and source.  */\n-  return \"MOV.W %1, %L0 { MOV.W %1, %H0 { RPT #15 { RRAX.W %H0\"; /* 8-bytes.  */\n+  return \"MOV.W\\t%1, %L0 { MOV.W\\t%1, %H0 { RPT\\t#15 { RRAX.W\\t%H0\"; /* 8-bytes.  */\n }\n \n /* Likewise for logical right shifts.  */"}, {"sha": "a707999c5cd64bb95eb1211dbed1447df37fd059", "filename": "gcc/config/msp430/msp430.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f283a153449eb77df3fe4083538b5f191a6b38/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f283a153449eb77df3fe4083538b5f191a6b38/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.h?ref=d4f283a153449eb77df3fe4083538b5f191a6b38", "patch": "@@ -52,7 +52,7 @@ extern bool msp430x;\n #define ENDFILE_SPEC \"crtend.o%s crtn.o%s -lgcc\"\n \n #define ASM_SPEC \"-mP \" /* Enable polymorphic instructions.  */ \\\n-  \"%{mmcu=msp430x:-mmcu=msp430X;mmcu=*:-mmcu=%*} \" /* Pass the MCU type on to the assembler.  */  \\\n+  \"%{mcpu=*:-mmcu=%*}%{!mcpu=*:%{mmcu=*:-mmcu=%*}} \" /* Pass the CPU type on to the assembler.  */ \\\n   \"%{mrelax=-mQ} \" /* Pass the relax option on to the assembler.  */ \\\n   \"%{mlarge:-ml} \" /* Tell the assembler if we are building for the LARGE pointer model.  */ \\\n   \"%{!msim:-md} %{msim:%{mlarge:-md}}\" /* Copy data from ROM to RAM if necessary.  */ \\"}, {"sha": "ee01cd1943c3a34be83c6dd1df076e8c0d4a9b74", "filename": "gcc/config/msp430/msp430.md", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f283a153449eb77df3fe4083538b5f191a6b38/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f283a153449eb77df3fe4083538b5f191a6b38/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.md?ref=d4f283a153449eb77df3fe4083538b5f191a6b38", "patch": "@@ -111,11 +111,7 @@\n ;; Operand1 is actually a register, but we cannot accept (REG...) because the\n ;; cprop_hardreg pass can and will renumber registers even inside\n ;; unspec_volatiles.  So we take an integer register number parameter and\n-;; fudge it to be a register name when we generate the assembler.  We use %I\n-;; because that is the only operator that will omit the # prefix to an\n-;; integer value.  Unfortunately it also inverts the integer value, so we\n-;; have pre-invert it when generating this insn.  (We could of course add a\n-;; new operator, eg %J, just for this pattern...)\n+;; fudge it to be a register name when we generate the assembler.\n ;;\n ;; The pushm pattern does not have this problem because of all of the\n ;; frame info cruft attached to it, so cprop_hardreg leaves it alone.\n@@ -124,7 +120,7 @@\n \t\t     (match_operand 1 \"immediate_operand\" \"i\")\n \t\t     (match_operand 2 \"immediate_operand\" \"i\")] UNS_POPM)]\n   \"\"\n-  \"POPM%b0\\t%2, r%I1\"\n+  \"POPM%b0\\t%2, r%J1\"\n   )\n \n ;; The next two patterns are here to support a \"feature\" of how GCC implements\n@@ -230,7 +226,7 @@\n   [(set (match_operand:PSI            0 \"register_operand\" \"=r\")\n \t(subreg:PSI (match_operand:SI 1 \"register_operand\" \"r\") 0))]\n   \"TARGET_LARGE\"\n-  \"PUSH.W\\t%H1 { PUSH.W %L1 { POPM.A #1, %0 ; Move reg-pair %L1:%H1 into pointer %0\"\n+  \"PUSH.W\\t%H1 { PUSH.W\\t%L1 { POPM.A #1, %0 ; Move reg-pair %L1:%H1 into pointer %0\"\n )\n \n ;;------------------------------------------------------------\n@@ -275,7 +271,7 @@\n \t(plus:SI (match_operand:SI    1 \"register_operand\" \"0\")\n \t\t (match_operand       2 \"general_operand\" \"rmi\")))]\n   \"\"\n-  \"ADD.W\\t%L2, %L0 { ADDC.W\\t%H2, %H0 { PUSH.W %H0 { PUSH.W %L0 { POPM.A #1, %0\"\n+  \"ADD.W\\t%L2, %L0 { ADDC.W\\t%H2, %H0 { PUSH.W\\t%H0 { PUSH.W\\t%L0 { POPM.A\\t#1, %0\"\n )\n \n (define_insn \"addsi3\"\n@@ -318,7 +314,7 @@\n (define_insn \"addhi3_cy\"\n   [(set (match_operand:HI          0 \"msp_nonimmediate_operand\" \"=r,rm\")\n \t(plus:HI (match_operand:HI 1 \"msp_nonimmediate_operand\" \"%0,0\")\n-\t\t (match_operand:HI 2 \"msp_general_operand\" \"r,rm\")))\n+\t\t (match_operand:HI 2 \"msp_nonimmediate_operand\" \"r,rm\")))\n    (set (reg:BI CARRY)\n \t(truncate:BI (lshiftrt:SI (plus:SI (zero_extend:SI (match_dup 1))\n \t\t\t\t\t   (zero_extend:SI (match_dup 2)))\n@@ -331,9 +327,9 @@\n   )\n \n (define_insn \"addhi3_cy_i\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm\")\n+  [(set (match_operand:HI          0 \"nonimmediate_operand\" \"=r,rm\")\n \t(plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t (match_operand:HI 2 \"general_operand\" \"i,i\")))\n+\t\t (match_operand:HI 2 \"immediate_operand\"     \"i,i\")))\n    (set (reg:BI CARRY)\n \t(truncate:BI (lshiftrt:SI (plus:SI (zero_extend:SI (match_dup 1))\n \t\t\t\t\t   (match_operand 3 \"immediate_operand\" \"i,i\"))\n@@ -349,7 +345,7 @@\n (define_insn \"addchi4_cy\"\n   [(set (match_operand:HI                   0 \"msp_nonimmediate_operand\" \"=r,rm\")\n \t(plus:HI (plus:HI (match_operand:HI 1 \"msp_nonimmediate_operand\" \"%0,0\")\n-\t\t\t  (match_operand:HI 2 \"msp_general_operand\" \"ri,rmi\"))\n+\t\t\t  (match_operand:HI 2 \"msp_general_operand\"      \"ri,rmi\"))\n \t\t (zero_extend:HI (reg:BI CARRY))))\n    ]\n   \"\"\n@@ -516,7 +512,7 @@\n )\n \n (define_insn \"zero_extendqihi2\"\n-  [(set (match_operand:HI 0 \"msp_nonimmediate_operand\" \"=rYs,m\")\n+  [(set (match_operand:HI                 0 \"msp_nonimmediate_operand\" \"=rYs,m\")\n \t(zero_extend:HI (match_operand:QI 1 \"msp_nonimmediate_operand\" \"0,0\")))]\n   \"\"\n   \"@\n@@ -536,7 +532,7 @@\n )\n    \n (define_insn \"zero_extendhipsi2\"\n-  [(set (match_operand:PSI 0 \"msp_nonimmediate_operand\" \"=r,m\")\n+  [(set (match_operand:PSI                 0 \"msp_nonimmediate_operand\" \"=r,m\")\n \t(zero_extend:PSI (match_operand:HI 1 \"msp_nonimmediate_operand\" \"rm,r\")))]\n   \"\"\n   \"MOVX\\t%1, %0\"\n@@ -621,9 +617,9 @@\n          stored in the stack slot will be the value *after* the\n \t stack pointer has been decremented.  So allow for that\n \t here.  */\n-      return \\\"PUSHM.A\\t#1, %1 { ADDX.W #4, @r1 { POPX.W %L0 { POPX.W %H0 ; get stack pointer into %L0:%H0\\\";\n+      return \\\"PUSHM.A\\t#1, %1 { ADDX.W\\t#4, @r1 { POPX.W\\t%L0 { POPX.W\\t%H0 ; get stack pointer into %L0:%H0\\\";\n     else\n-      return \\\"PUSHM.A\\t#1, %1 { POPX.W %L0 { POPX.W %H0 ; move pointer in %1 into reg-pair %L0:%H0\\\";\n+      return \\\"PUSHM.A\\t#1, %1 { POPX.W\\t%L0 { POPX.W\\t%H0 ; move pointer in %1 into reg-pair %L0:%H0\\\";\n   \"\n )\n \n@@ -642,9 +638,9 @@\n        it right by 16 bits, to get the top four bits of the pointer\n        sign-extended in %H0.  */\n     if (REGNO (operands[0]) == REGNO (operands[1]))\n-      return \\\"MOVX.A\\t%1, %H0 { MOV.W  %1, %L0 { RPT #16 { RRAX.A %H0 ; sign extend pointer in %1 into %L0:%H0\\\";\n+      return \\\"MOVX.A\\t%1, %H0 { MOV.W\\t%1, %L0 { RPT\\t#16 { RRAX.A\\t%H0 ; sign extend pointer in %1 into %L0:%H0\\\";\n     else\n-      return \\\"MOV.W \\t%1, %L0 { MOVX.A %1, %H0 { RPT #16 { RRAX.A %H0 ; sign extend pointer in %1 into %L0:%H0\\\";\n+      return \\\"MOV.W\\t%1, %L0 { MOVX.A\\t%1, %H0 { RPT\\t#16 { RRAX.A\\t%H0 ; sign extend pointer in %1 into %L0:%H0\\\";\n   \"\n )\n \n@@ -654,7 +650,7 @@\n   [(set (match_operand:PSI              0 \"register_operand\" \"=r\")\n \t(truncate:PSI (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"PUSH.W %H1 { PUSH.W %1 { POPM.A #1, %0\"\n+  \"PUSH.W\\t%H1 { PUSH.W\\t%L1 { POPM.A\\t#1, %L0\"\n )\n \n ;;------------------------------------------------------------\n@@ -1304,8 +1300,8 @@\n   \"\"\n   \"*\n     if (REGNO (operands[0]) != REGNO (operands[1]))\n-      return \\\"MOV.W\\t%1, %0 { SUB.W #0, %0 { AND.W %2, %0\\\";\n+      return \\\"MOV.W\\t%1, %0 { SUB.W\\t#0, %0 { AND.W\\t%2, %0\\\";\n     else\n-      return \\\"SUB.W\\t#0, %0 { AND.W %2, %0\\\";\n+      return \\\"SUB.W\\t#0, %0 { AND.W\\t%2, %0\\\";\n   \"\n   )"}, {"sha": "047037b31aaca94d11863ebafa14a325dbcc5fef", "filename": "gcc/config/msp430/msp430.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f283a153449eb77df3fe4083538b5f191a6b38/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f283a153449eb77df3fe4083538b5f191a6b38/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt?ref=d4f283a153449eb77df3fe4083538b5f191a6b38", "patch": "@@ -7,8 +7,12 @@ Target Mask(ASM_HEX)\n Force assembly output to always use hex constants\n \n mmcu=\n+Target Joined RejectNegative Var(target_mcu)\n+Specify the MCU to build for.\n+\n+mcpu=\n Target Joined RejectNegative Var(target_cpu)\n-Specify the cpu to build for.  If the name begins with 'msp430x' then the 430X instructions are enabled\n+Specify the ISA to build for: msp430, mdsp430x, msp430xv2\n \n mlarge\n Target Mask(LARGE) RejectNegative"}, {"sha": "3cbb61cd975f3072a635aced52095d2eccd6664e", "filename": "gcc/config/msp430/t-msp430", "status": "modified", "additions": 7, "deletions": 240, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f283a153449eb77df3fe4083538b5f191a6b38/gcc%2Fconfig%2Fmsp430%2Ft-msp430", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f283a153449eb77df3fe4083538b5f191a6b38/gcc%2Fconfig%2Fmsp430%2Ft-msp430", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Ft-msp430?ref=d4f283a153449eb77df3fe4083538b5f191a6b38", "patch": "@@ -20,249 +20,16 @@\n \n # Enable multilibs:\n \n-MULTILIB_OPTIONS    = mmcu=msp430x mlarge\n+MULTILIB_OPTIONS    = mcpu=msp430x mlarge\n MULTILIB_DIRNAMES   = 430x large\n \n-# Match msp430X with msp430x.\n-MULTILIB_MATCHES    = mmcu?msp430x=mmcu?msp430X\n-\n-# each supported X or Xv2 MCU needs a line like this:\n-# MULTILIB_MATCHES  += mmcu?msp430x=mmcu?xxxxxxxxxx\n-\n-# NB/ This list should be kept in sync with the ones in:\n-#  gcc/config/msp430/msp430.c\n-#  gas/config/tc-msp430.c\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430xv2\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430cg4616\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430cg4617\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430cg4618\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430cg4619\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f2416\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f2417\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f2418\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f2419\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f2616\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f2617\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f2618\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f2619\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f47126\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f47127\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f47163\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f47173\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f47183\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f47193\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f47166\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f47176\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f47186\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f47196\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f47167\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f47177\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f47187\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f47197\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f46161\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f46171\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f46181\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f46191\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f4616\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f4617\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f4618\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f4619\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fg4616\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fg4617\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fg4618\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fg4619\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5418\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5419\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5435\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5436\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5437\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5438\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5418a\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5419a\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5435a\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5436a\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5437a\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5438a\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5212\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5213\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5214\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5217\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5218\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5219\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5222\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5223\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5224\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5227\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5228\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5229\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5304\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5308\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5309\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5310\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5340\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5341\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5342\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5324\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5325\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5326\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5327\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5328\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5329\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5500\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5501\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5502\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5503\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5504\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5505\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5506\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5507\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5508\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5509\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5510\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5513\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5514\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5515\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5517\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5519\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5521\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5522\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5524\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5525\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5526\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5527\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5528\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5529\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?cc430f5133\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?cc430f5135\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?cc430f5137\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?cc430f6125\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?cc430f6126\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?cc430f6127\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?cc430f6135\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?cc430f6137\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?cc430f5123\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?cc430f5125\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?cc430f5143\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?cc430f5145\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?cc430f5147\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?cc430f6143\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?cc430f6145\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?cc430f6147\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5333\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5335\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5336\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5338\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5630\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5631\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5632\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5633\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5634\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5635\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5636\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5637\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5638\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6433\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6435\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6436\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6438\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6630\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6631\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6632\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6633\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6634\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6635\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6636\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6637\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6638\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5358\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5359\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5658\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5659\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6458\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6459\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6658\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6659\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5131\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5151\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5171\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5132\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5152\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f5172\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6720\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6721\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6723\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6724\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6725\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6726\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6730\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6731\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6733\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6734\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6735\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6736\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f67451\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f67651\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f67751\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f67461\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f67661\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f67761\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f67471\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f67671\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f67771\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f67481\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f67681\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f67781\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f67491\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f67691\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f67791\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6745\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6765\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6775\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6746\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6766\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6776\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6747\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6767\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6777\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6748\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6768\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6778\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6749\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6769\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430f6779\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5720\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5721\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5722\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5723\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5724\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5725\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5726\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5727\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5728\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5729\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5730\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5731\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5732\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5733\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5734\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5735\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5736\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5737\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5738\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5739\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430bt5190\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5949\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430fr5969\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430sl5438a\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430x241x\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430x26x\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430x461x1\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430x46x\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430x471x3\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430x471x6\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430x471x7\n-MULTILIB_MATCHES += mmcu?msp430x=mmcu?msp430xg46x\n+# Match msp430X, msp430xv2 and msp430Xv2 with msp430x.\n+MULTILIB_MATCHES    = mcpu?msp430x=mcpu?msp430X\n+MULTILIB_MATCHES   += mcpu?msp430x=mcpu?msp430xv2\n+MULTILIB_MATCHES   += mcpu?msp430x=mcpu?msp430Xv2\n \n+# Add additional MCU matches like this:\n+# MULTILIB_MATCHES += mcpu?msp430x=mmcu?xxxxxxxxxx\n \n MULTILIB_EXCEPTIONS = mlarge\n "}, {"sha": "ac4b597ca52f94dd79b6fd18b714a4e023dc91e1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f283a153449eb77df3fe4083538b5f191a6b38/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f283a153449eb77df3fe4083538b5f191a6b38/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d4f283a153449eb77df3fe4083538b5f191a6b38", "patch": "@@ -824,7 +824,7 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-meb -mel -mno-crt0}\n \n @emph{MSP430 Options}\n-@gccoptlist{-msim -masm-hex -mmcu= -mlarge -msmall -mrelax}\n+@gccoptlist{-msim -masm-hex -mmcu= -mcpu= -mlarge -msmall -mrelax}\n \n @emph{NDS32 Options}\n @gccoptlist{-mbig-endian -mlittle-endian @gol\n@@ -18124,21 +18124,25 @@ testsuite and/or aesthetic purposes.\n \n @item -mmcu=\n @opindex mmcu=\n-Select the MCU to target.  If the MCU supports the MSP430X ISA or the\n-MSP430Xv2 ISA then gcc will make use of the extra instructions.  A C\n-preprocessor symbol will be defined based upon the MCU name, converted\n-to upper case and pre- and post- fixed with @code{__}.\n+Select the MCU to target.  This is used to create a C preprocessor\n+symbol based upon the MCU name, converted to upper case and pre- and\n+post- fixed with @code{__}.  This in turn will be used by the\n+@code{msp430.h} header file to select an MCU specific supplimentary\n+header file.\n \n In addition two scripts will be added to the linker command line:\n @code{memory.ld} and @code{peripherals.ld}, with a search path based\n upon the MCU name.\n \n-Note that there are three ``generic'' MCUs: @code{msp430},\n-@code{msp430x} and @code{msp430xv2}, which can be used if a specific\n-MCU is not being targeted.\n-\n This option is also passed on to the assembler.\n \n+@item -mcpu=\n+@opindex -mcpu=\n+Specific the ISA to use.  Accepted values are @code{msp430},\n+@code{msp430x} and @code{msp430xv2}.  This option is needed in order\n+to ensure that the correct instructions are generated and that the\n+correct libraries are linked in.\n+\n @item -msim\n @opindex msim\n Link to the simulator runtime libraries and linker script.  Overrides"}]}