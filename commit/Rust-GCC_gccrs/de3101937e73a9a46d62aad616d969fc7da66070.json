{"sha": "de3101937e73a9a46d62aad616d969fc7da66070", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUzMTAxOTM3ZTczYTlhNDZkNjJhYWQ2MTZkOTY5ZmM3ZGE2NjA3MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-10-08T22:47:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-10-08T22:47:32Z"}, "message": "re PR tree-optimization/86659 (gnat.dg/sso/q[23].adb FAIL)\n\n\tPR tree-optimization/86659\n\t* gimple-match.h (struct gimple_match_op): Add reverse field.\n\t(gimple_match_op::set_op): New overloaded method.\n\t* gimple-match-head.c (maybe_build_generic_op) <BIT_FIELD_REF>: Set\n\tthe REF_REVERSE_STORAGE_ORDER flag on the value.\n\t(gimple_simplify) <GIMPLE_ASSIGN>: For BIT_FIELD_REF, propagate the\n\tREF_REVERSE_STORAGE_ORDER flag and avoid simplifying if it is set.\n\nFrom-SVN: r264942", "tree": {"sha": "55a2eadb0e412c74af6fb377fc0bc4509b62c233", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55a2eadb0e412c74af6fb377fc0bc4509b62c233"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de3101937e73a9a46d62aad616d969fc7da66070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de3101937e73a9a46d62aad616d969fc7da66070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de3101937e73a9a46d62aad616d969fc7da66070", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de3101937e73a9a46d62aad616d969fc7da66070/comments", "author": null, "committer": null, "parents": [{"sha": "91a3cbb4d20c3486ee38233f5864c3625692ea80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a3cbb4d20c3486ee38233f5864c3625692ea80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91a3cbb4d20c3486ee38233f5864c3625692ea80"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "392728d48e5d36b1faccad962eadf5650a10845a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3101937e73a9a46d62aad616d969fc7da66070/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3101937e73a9a46d62aad616d969fc7da66070/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de3101937e73a9a46d62aad616d969fc7da66070", "patch": "@@ -1,3 +1,13 @@\n+2018-09-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/86659\n+\t* gimple-match.h (struct gimple_match_op): Add reverse field.\n+\t(gimple_match_op::set_op): New overloaded method.\n+\t* gimple-match-head.c (maybe_build_generic_op) <BIT_FIELD_REF>: Set\n+\tthe REF_REVERSE_STORAGE_ORDER flag on the value.\n+\t(gimple_simplify) <GIMPLE_ASSIGN>: For BIT_FIELD_REF, propagate the\n+\tREF_REVERSE_STORAGE_ORDER flag and avoid simplifying if it is set.\n+        \n 2018-10-08  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR middle-end/63155"}, {"sha": "d6c60ab34db6eafcc9e2b8a5d077a8734f5bf5ba", "filename": "gcc/gimple-match-head.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3101937e73a9a46d62aad616d969fc7da66070/gcc%2Fgimple-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3101937e73a9a46d62aad616d969fc7da66070/gcc%2Fgimple-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match-head.c?ref=de3101937e73a9a46d62aad616d969fc7da66070", "patch": "@@ -445,16 +445,20 @@ void\n maybe_build_generic_op (gimple_match_op *res_op)\n {\n   tree_code code = (tree_code) res_op->code;\n+  tree val;\n   switch (code)\n     {\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n     case VIEW_CONVERT_EXPR:\n-      res_op->set_value (build1 (code, res_op->type, res_op->ops[0]));\n+      val = build1 (code, res_op->type, res_op->ops[0]);\n+      res_op->set_value (val);\n       break;\n     case BIT_FIELD_REF:\n-      res_op->set_value (build3 (code, res_op->type, res_op->ops[0],\n-\t\t\t\t res_op->ops[1], res_op->ops[2]));\n+      val = build3 (code, res_op->type, res_op->ops[0], res_op->ops[1],\n+\t\t    res_op->ops[2]);\n+      REF_REVERSE_STORAGE_ORDER (val) = res_op->reverse;\n+      res_op->set_value (val);\n       break;\n     default:;\n     }\n@@ -853,7 +857,10 @@ gimple_simplify (gimple *stmt, gimple_match_op *res_op, gimple_seq *seq,\n \t\top0 = do_valueize (op0, top_valueize, valueized);\n \t\tres_op->set_op (code, type, op0,\n \t\t\t\tTREE_OPERAND (rhs1, 1),\n-\t\t\t\tTREE_OPERAND (rhs1, 2));\n+\t\t\t\tTREE_OPERAND (rhs1, 2),\n+\t\t\t\tREF_REVERSE_STORAGE_ORDER (rhs1));\n+\t\tif (res_op->reverse)\n+\t\t  return valueized;\n \t\treturn (gimple_resimplify3 (seq, res_op, valueize)\n \t\t\t|| valueized);\n \t      }"}, {"sha": "79b9459f44410602d74e32dfe37823be97afcbf5", "filename": "gcc/gimple-match.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3101937e73a9a46d62aad616d969fc7da66070/gcc%2Fgimple-match.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3101937e73a9a46d62aad616d969fc7da66070/gcc%2Fgimple-match.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match.h?ref=de3101937e73a9a46d62aad616d969fc7da66070", "patch": "@@ -98,6 +98,7 @@ struct gimple_match_op\n   void set_op (code_helper, tree, tree);\n   void set_op (code_helper, tree, tree, tree);\n   void set_op (code_helper, tree, tree, tree, tree);\n+  void set_op (code_helper, tree, tree, tree, tree, bool);\n   void set_op (code_helper, tree, tree, tree, tree, tree);\n   void set_op (code_helper, tree, tree, tree, tree, tree, tree);\n   void set_value (tree);\n@@ -117,6 +118,10 @@ struct gimple_match_op\n   /* The type of the result.  */\n   tree type;\n \n+  /* For a BIT_FIELD_REF, whether the group of bits is stored in reverse order\n+     from the target order.  */\n+  bool reverse;\n+\n   /* The number of operands to CODE.  */\n   unsigned int num_ops;\n \n@@ -246,6 +251,19 @@ gimple_match_op::set_op (code_helper code_in, tree type_in,\n   ops[2] = op2;\n }\n \n+inline void\n+gimple_match_op::set_op (code_helper code_in, tree type_in,\n+\t\t\t tree op0, tree op1, tree op2, bool reverse_in)\n+{\n+  code = code_in;\n+  type = type_in;\n+  reverse = reverse_in;\n+  num_ops = 3;\n+  ops[0] = op0;\n+  ops[1] = op1;\n+  ops[2] = op2;\n+}\n+\n inline void\n gimple_match_op::set_op (code_helper code_in, tree type_in,\n \t\t\t tree op0, tree op1, tree op2, tree op3)"}]}