{"sha": "157689c6d3a24540fd59d402e4622991e5ac9c0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU3Njg5YzZkM2EyNDU0MGZkNTlkNDAyZTQ2MjI5OTFlNWFjOWMwYg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-11-01T23:29:09Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-11-01T23:29:09Z"}, "message": "re PR c/3170 (bogus \"suggest parentheses\" warning)\n\n\tPR c/3170\n\tPR c/3422\n\t* c-typeck.c (default_conversion): Retain the original expression\n\tcodes.\n\t* gcc.dg/Wparentheses-1.c: New tests.\n\nFrom-SVN: r46705", "tree": {"sha": "b44068ffbe582945acabf838b345c59fe2591f26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b44068ffbe582945acabf838b345c59fe2591f26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/157689c6d3a24540fd59d402e4622991e5ac9c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157689c6d3a24540fd59d402e4622991e5ac9c0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/157689c6d3a24540fd59d402e4622991e5ac9c0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157689c6d3a24540fd59d402e4622991e5ac9c0b/comments", "author": null, "committer": null, "parents": [{"sha": "edf1c8dff83d1bfd2d86da111c11427d827bed68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edf1c8dff83d1bfd2d86da111c11427d827bed68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edf1c8dff83d1bfd2d86da111c11427d827bed68"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "e7d66f81706d0317bc29798d0f54916b95530fa7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157689c6d3a24540fd59d402e4622991e5ac9c0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157689c6d3a24540fd59d402e4622991e5ac9c0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=157689c6d3a24540fd59d402e4622991e5ac9c0b", "patch": "@@ -1,3 +1,9 @@\n+2001-11-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-typeck.c (default_conversion): Retain the original expression\n+\tcodes.\n+\t* gcc.dg/Wparentheses.c: New tests.\n+\n 2001-11-01  David S. Miller  <davem@redhat.com>\n \n \t* doc/install.texi (Specific, sparc-sun-solaris2*): Bring"}, {"sha": "37810f610bb6196580b5c252148b8696e4240c23", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157689c6d3a24540fd59d402e4622991e5ac9c0b/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157689c6d3a24540fd59d402e4622991e5ac9c0b/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=157689c6d3a24540fd59d402e4622991e5ac9c0b", "patch": "@@ -847,6 +847,7 @@ tree\n default_conversion (exp)\n      tree exp;\n {\n+  tree orig_exp;\n   tree type = TREE_TYPE (exp);\n   enum tree_code code = TREE_CODE (type);\n \n@@ -868,11 +869,16 @@ default_conversion (exp)\n \n      Do not use STRIP_NOPS here!  It will remove conversions from pointer\n      to integer and cause infinite recursion.  */\n+  orig_exp = exp;\n   while (TREE_CODE (exp) == NON_LVALUE_EXPR\n \t || (TREE_CODE (exp) == NOP_EXPR\n \t     && TREE_TYPE (TREE_OPERAND (exp, 0)) == TREE_TYPE (exp)))\n     exp = TREE_OPERAND (exp, 0);\n \n+  /* Preserve the original expression code.  */\n+  if (IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (exp))))\n+    C_SET_EXP_ORIGINAL_CODE (exp, C_EXP_ORIGINAL_CODE (orig_exp));\n+\n   /* Normally convert enums to int,\n      but convert wide enums to something wider.  */\n   if (code == ENUMERAL_TYPE)"}, {"sha": "d6e86eb489b40f351a418844a363b394b2792c1f", "filename": "gcc/testsuite/gcc.dg/Wparentheses-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157689c6d3a24540fd59d402e4622991e5ac9c0b/gcc%2Ftestsuite%2Fgcc.dg%2FWparentheses-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157689c6d3a24540fd59d402e4622991e5ac9c0b/gcc%2Ftestsuite%2Fgcc.dg%2FWparentheses-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWparentheses-1.c?ref=157689c6d3a24540fd59d402e4622991e5ac9c0b", "patch": "@@ -0,0 +1,15 @@\n+/* Copyright (C) 2001 Free Software Foundation, Inc.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options -Wparentheses } */\n+\n+/* Source: Neil Booth, 1 Nov 2001.  PR 3170, 3422 - bogus warnings\n+   about suggesting parentheses.  */\n+\n+int foo (int a, int b)\n+{\n+  int c = (a && b) || 0;\t/* { dg-bogus \"suggest parentheses\" }  */\n+  c = a && b || 0;\t\t/* { dg-warning \"suggest parentheses\" }  */\n+\n+  return (a && b && 1) || 0;\t/* { dg-bogus \"suggest parentheses\" }  */\n+}"}]}