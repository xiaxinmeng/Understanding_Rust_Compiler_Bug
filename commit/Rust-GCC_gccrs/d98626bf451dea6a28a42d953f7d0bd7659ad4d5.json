{"sha": "d98626bf451dea6a28a42d953f7d0bd7659ad4d5", "node_id": "C_kwDOANBUbNoAKGQ5ODYyNmJmNDUxZGVhNmEyOGE0MmQ5NTNmN2QwYmQ3NjU5YWQ0ZDU", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2021-10-20T15:25:02Z"}, "committer": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2021-10-20T15:25:02Z"}, "message": "openmp: in_reduction support for Fortran\n\nThis patch implements support for the in_reduction clause for Fortran.\nIt also includes more completion of the taskgroup construct inside the\nFortran front-end, thus allowing task_reduction to work for task and\ntarget constructs.\n\ngcc/fortran/ChangeLog:\n\n\t* openmp.c (gfc_match_omp_clause_reduction): Add 'openmp_target' default\n\tfalse parameter. Add 'always,tofrom' map for OMP_LIST_IN_REDUCTION case.\n\t(gfc_match_omp_clauses): Add 'openmp_target' default false parameter,\n\tadjust call to gfc_match_omp_clause_reduction.\n\t(match_omp): Adjust call to gfc_match_omp_clauses\n\t* trans-openmp.c (gfc_trans_omp_taskgroup): Add call to\n\tgfc_match_omp_clause, create and return block.\n\ngcc/ChangeLog:\n\n\t* omp-low.c (omp_copy_decl_2): For !ctx, use record_vars to add new copy\n\tas local variable.\n\t(scan_sharing_clauses): Place copy of OMP_CLAUSE_IN_REDUCTION decl in\n\tctx->outer instead of ctx.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/reduction4.f90: Adjust omp target in_reduction' scan\n\tpattern.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.fortran/target-in-reduction-1.f90: New test.\n\t* testsuite/libgomp.fortran/target-in-reduction-2.f90: New test.", "tree": {"sha": "2a7e9e62091ea1a79d1a46bb82e0a861167c0bc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a7e9e62091ea1a79d1a46bb82e0a861167c0bc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d98626bf451dea6a28a42d953f7d0bd7659ad4d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d98626bf451dea6a28a42d953f7d0bd7659ad4d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d98626bf451dea6a28a42d953f7d0bd7659ad4d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d98626bf451dea6a28a42d953f7d0bd7659ad4d5/comments", "author": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90454a900824d96e6d4eae557a809c9d986198d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90454a900824d96e6d4eae557a809c9d986198d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90454a900824d96e6d4eae557a809c9d986198d9"}], "stats": {"total": 159, "additions": 147, "deletions": 12}, "files": [{"sha": "dcf22ac2c2f3aba27701ada356ae8386b77711a1", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98626bf451dea6a28a42d953f7d0bd7659ad4d5/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98626bf451dea6a28a42d953f7d0bd7659ad4d5/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=d98626bf451dea6a28a42d953f7d0bd7659ad4d5", "patch": "@@ -1202,7 +1202,7 @@ gfc_match_iterator (gfc_namespace **ns, bool permit_var)\n \n static match\n gfc_match_omp_clause_reduction (char pc, gfc_omp_clauses *c, bool openacc,\n-\t\t\t\tbool allow_derived)\n+\t\t\t\tbool allow_derived, bool openmp_target = false)\n {\n   if (pc == 'r' && gfc_match (\"reduction ( \") != MATCH_YES)\n     return MATCH_NO;\n@@ -1349,6 +1349,19 @@ gfc_match_omp_clause_reduction (char pc, gfc_omp_clauses *c, bool openacc,\n \t    n->u2.udr = gfc_get_omp_namelist_udr ();\n \t    n->u2.udr->udr = udr;\n \t  }\n+\tif (openmp_target && list_idx == OMP_LIST_IN_REDUCTION)\n+\t  {\n+\t    gfc_omp_namelist *p = gfc_get_omp_namelist (), **tl;\n+\t    p->sym = n->sym;\n+\t    p->where = p->where;\n+\t    p->u.map_op = OMP_MAP_ALWAYS_TOFROM;\n+\n+\t    tl = &c->lists[OMP_LIST_MAP];\n+\t    while (*tl)\n+\t      tl = &((*tl)->next);\n+\t    *tl = p;\n+\t    p->next = NULL;\n+\t  }\n      }\n   return MATCH_YES;\n }\n@@ -1417,7 +1430,8 @@ gfc_match_dupl_atomic (bool not_dupl, const char *name)\n static match\n gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t       bool first = true, bool needs_space = true,\n-\t\t       bool openacc = false, bool context_selector = false)\n+\t\t       bool openacc = false, bool context_selector = false,\n+\t\t       bool openmp_target = false)\n {\n   bool error = false;\n   gfc_omp_clauses *c = gfc_get_omp_clauses ();\n@@ -2121,8 +2135,8 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      goto error;\n \t    }\n \t  if ((mask & OMP_CLAUSE_IN_REDUCTION)\n-\t      && gfc_match_omp_clause_reduction (pc, c, openacc,\n-\t\t\t\t\t\t allow_derived) == MATCH_YES)\n+\t      && gfc_match_omp_clause_reduction (pc, c, openacc, allow_derived,\n+\t\t\t\t\t\t openmp_target) == MATCH_YES)\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_INBRANCH)\n \t      && (m = gfc_match_dupl_check (!c->inbranch && !c->notinbranch,\n@@ -3578,7 +3592,8 @@ static match\n match_omp (gfc_exec_op op, const omp_mask mask)\n {\n   gfc_omp_clauses *c;\n-  if (gfc_match_omp_clauses (&c, mask) != MATCH_YES)\n+  if (gfc_match_omp_clauses (&c, mask, true, true, false, false,\n+\t\t\t     op == EXEC_OMP_TARGET) != MATCH_YES)\n     return MATCH_ERROR;\n   new_st.op = op;\n   new_st.ext.omp_clauses = c;"}, {"sha": "aaeb950fb72f8832f1bcc6842d74d98a05306e10", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98626bf451dea6a28a42d953f7d0bd7659ad4d5/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98626bf451dea6a28a42d953f7d0bd7659ad4d5/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=d98626bf451dea6a28a42d953f7d0bd7659ad4d5", "patch": "@@ -6407,12 +6407,17 @@ gfc_trans_omp_task (gfc_code *code)\n static tree\n gfc_trans_omp_taskgroup (gfc_code *code)\n {\n+  stmtblock_t block;\n+  gfc_start_block (&block);\n   tree body = gfc_trans_code (code->block->next);\n   tree stmt = make_node (OMP_TASKGROUP);\n   TREE_TYPE (stmt) = void_type_node;\n   OMP_TASKGROUP_BODY (stmt) = body;\n-  OMP_TASKGROUP_CLAUSES (stmt) = NULL_TREE;\n-  return stmt;\n+  OMP_TASKGROUP_CLAUSES (stmt) = gfc_trans_omp_clauses (&block,\n+\t\t\t\t\t\t\tcode->ext.omp_clauses,\n+\t\t\t\t\t\t\tcode->loc);\n+  gfc_add_expr_to_block (&block, stmt);\n+  return gfc_finish_block (&block);\n }\n \n static tree"}, {"sha": "15e4424b0bcd02f6cf7a72ba0b10d0c4e47b8e80", "filename": "gcc/omp-low.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98626bf451dea6a28a42d953f7d0bd7659ad4d5/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98626bf451dea6a28a42d953f7d0bd7659ad4d5/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=d98626bf451dea6a28a42d953f7d0bd7659ad4d5", "patch": "@@ -591,7 +591,15 @@ omp_copy_decl_2 (tree var, tree name, tree type, omp_context *ctx)\n   tree copy = copy_var_decl (var, name, type);\n \n   DECL_CONTEXT (copy) = current_function_decl;\n-  DECL_CHAIN (copy) = ctx->block_vars;\n+\n+  if (ctx)\n+    {\n+      DECL_CHAIN (copy) = ctx->block_vars;\n+      ctx->block_vars = copy;\n+    }\n+  else\n+    record_vars (copy);\n+\n   /* If VAR is listed in task_shared_vars, it means it wasn't\n      originally addressable and is just because task needs to take\n      it's address.  But we don't need to take address of privatizations\n@@ -602,7 +610,6 @@ omp_copy_decl_2 (tree var, tree name, tree type, omp_context *ctx)\n \t  || (global_nonaddressable_vars\n \t      && bitmap_bit_p (global_nonaddressable_vars, DECL_UID (var)))))\n     TREE_ADDRESSABLE (copy) = 0;\n-  ctx->block_vars = copy;\n \n   return copy;\n }\n@@ -1281,7 +1288,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t\t  tree at = t;\n \t\t  if (ctx->outer)\n \t\t    scan_omp_op (&at, ctx->outer);\n-\t\t  tree nt = omp_copy_decl_1 (at, ctx);\n+\t\t  tree nt = omp_copy_decl_1 (at, ctx->outer);\n \t\t  splay_tree_insert (ctx->field_map,\n \t\t\t\t     (splay_tree_key) &DECL_CONTEXT (t),\n \t\t\t\t     (splay_tree_value) nt);\n@@ -1322,7 +1329,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t      tree at = decl;\n \t      if (ctx->outer)\n \t\tscan_omp_op (&at, ctx->outer);\n-\t      tree nt = omp_copy_decl_1 (at, ctx);\n+\t      tree nt = omp_copy_decl_1 (at, ctx->outer);\n \t      splay_tree_insert (ctx->field_map,\n \t\t\t\t (splay_tree_key) &DECL_CONTEXT (decl),\n \t\t\t\t (splay_tree_value) nt);"}, {"sha": "71b4231f315176f017f52f20b34f40dfc882aae9", "filename": "gcc/testsuite/gfortran.dg/gomp/reduction4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98626bf451dea6a28a42d953f7d0bd7659ad4d5/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98626bf451dea6a28a42d953f7d0bd7659ad4d5/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction4.f90?ref=d98626bf451dea6a28a42d953f7d0bd7659ad4d5", "patch": "@@ -137,7 +137,7 @@\n ! { dg-final { scan-tree-dump-times \"#pragma omp sections reduction\\\\(task,\\\\\\+:a\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp simd linear\\\\(i:1\\\\) reduction\\\\(\\\\\\+:a\\\\)\" 2 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp simd linear\\\\(i:1\\\\) reduction\\\\(task,\\\\\\+:a\\\\)\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp target in_reduction\\\\(\\\\\\+:b\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp target map\\\\(always,tofrom:b\\\\) in_reduction\\\\(\\\\\\+:b\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp task in_reduction\\\\(\\\\\\+:a\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp teams reduction\\\\(\\\\\\+:b\\\\)\" 2 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp taskloop reduction\\\\(\\\\\\+:a\\\\) in_reduction\\\\(\\\\\\+:b\\\\)\" 2 \"original\" } }"}, {"sha": "f9acb711e67073bf674ed99ecfbbd425d942f307", "filename": "libgomp/testsuite/libgomp.fortran/target-in-reduction-1.f90", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98626bf451dea6a28a42d953f7d0bd7659ad4d5/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-in-reduction-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98626bf451dea6a28a42d953f7d0bd7659ad4d5/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-in-reduction-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-in-reduction-1.f90?ref=d98626bf451dea6a28a42d953f7d0bd7659ad4d5", "patch": "@@ -0,0 +1,78 @@\n+! { dg-do run }\n+\n+module mod1\n+  contains\n+\n+    subroutine foo (x, y)\n+      integer :: x, y\n+\n+      !$omp taskgroup task_reduction (+: x, y)\n+\n+      !$omp target in_reduction (+: x, y)\n+      x = x + 8\n+      y = y + 16\n+      !$omp end target\n+\n+      !$omp task in_reduction (+: x, y)\n+      x = x + 2\n+      y = y + 4\n+      !$omp end task\n+\n+      !$omp end taskgroup\n+    end subroutine foo\n+\n+    integer function bar (x)\n+      integer, value :: x\n+\n+      !$omp taskgroup task_reduction (+: x)\n+\n+      !$omp target in_reduction (+: x)\n+      x = x + 16\n+      !$omp end target\n+\n+      !$omp task in_reduction (+: x)\n+      x = x + 32\n+      !$omp end task\n+\n+      !$omp end taskgroup\n+\n+      bar = x\n+    end function bar\n+  end module mod1\n+\n+program main\n+  use mod1\n+  integer :: x, y\n+  real :: f;\n+\n+  x = 1\n+  y = 1\n+\n+  call foo (x, y)\n+\n+  if (x .ne. 11) stop 1\n+  if (y .ne. 21) stop 2\n+\n+  y = bar (8)\n+  if (y .ne. 56) stop 3\n+\n+  x = 0\n+  f = 0.0\n+\n+  !$omp taskgroup task_reduction (+: x, f)\n+  !$omp target in_reduction (+: x, f)\n+  x = x + 1\n+  f = f + 2.0\n+  !$omp end target\n+\n+  !$omp task in_reduction (+: x, f)\n+  x = x + 2\n+  f = f + 3.0\n+  !$omp end task\n+\n+  !$omp end taskgroup\n+\n+  if (x .ne. 3) stop 4\n+  if (f .ne. 5.0) stop 5\n+\n+end program main"}, {"sha": "7f2e16b534b0cd7a3064e73bb8d1ad51343667a6", "filename": "libgomp/testsuite/libgomp.fortran/target-in-reduction-2.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98626bf451dea6a28a42d953f7d0bd7659ad4d5/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-in-reduction-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98626bf451dea6a28a42d953f7d0bd7659ad4d5/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-in-reduction-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-in-reduction-2.f90?ref=d98626bf451dea6a28a42d953f7d0bd7659ad4d5", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do run }\n+\n+program main\n+  integer :: x\n+\n+  x = 0\n+  !$omp taskgroup task_reduction (+: x)\n+  call foo (x)\n+  call bar (x)\n+  !$omp end taskgroup\n+\n+  if (x .ne. 3) stop 1\n+\n+contains\n+\n+  subroutine foo (x)\n+    integer :: x\n+    !$omp task in_reduction (+: x)\n+    x = x + 1\n+    !$omp end task\n+  end subroutine foo\n+\n+  subroutine bar (x)\n+    integer :: x\n+    !$omp target in_reduction (+: x)\n+    x = x + 2\n+    !$omp end target\n+  end subroutine bar\n+\n+end program main"}]}