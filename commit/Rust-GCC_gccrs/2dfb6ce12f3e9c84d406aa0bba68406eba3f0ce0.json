{"sha": "2dfb6ce12f3e9c84d406aa0bba68406eba3f0ce0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRmYjZjZTEyZjNlOWM4NGQ0MDZhYTBiYmE2ODQwNmViYTNmMGNlMA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2008-07-15T23:50:52Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2008-07-15T23:50:52Z"}, "message": "tree-ssa-sccvn.c (expressions_equal_p): Check type equality.\n\n2008-07-15  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-ssa-sccvn.c (expressions_equal_p): Check type equality.\n\t* tree-ssa-pre.c (pre_expr_eq): Ditto\n\t(get_constant_for_value_id): Take a type as an argument.\n\t(fully_constant_expression): Pass in type.\n\t(find_or_generate_expression): Short circuit constant case.\n\t(create_expression_by_pieces): Remove special casing of\n\tpointer_plus.\n\t(do_regular_insertion): Short circuit constant case.\n\t(do_partial_partial_insertion): Ditto.\n\nFrom-SVN: r137859", "tree": {"sha": "4faecb181c40f295369ac919f9ab5203eed115d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4faecb181c40f295369ac919f9ab5203eed115d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dfb6ce12f3e9c84d406aa0bba68406eba3f0ce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dfb6ce12f3e9c84d406aa0bba68406eba3f0ce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dfb6ce12f3e9c84d406aa0bba68406eba3f0ce0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dfb6ce12f3e9c84d406aa0bba68406eba3f0ce0/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15e38d0dce922e77304932817a10f1f42579553f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e38d0dce922e77304932817a10f1f42579553f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15e38d0dce922e77304932817a10f1f42579553f"}], "stats": {"total": 93, "additions": 67, "deletions": 26}, "files": [{"sha": "4c7a7766a1c46d0223b7800e0358a191ad3d5ab7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dfb6ce12f3e9c84d406aa0bba68406eba3f0ce0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dfb6ce12f3e9c84d406aa0bba68406eba3f0ce0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2dfb6ce12f3e9c84d406aa0bba68406eba3f0ce0", "patch": "@@ -1,3 +1,15 @@\n+2008-07-15  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-ssa-sccvn.c (expressions_equal_p): Check type equality.\n+\t* tree-ssa-pre.c (pre_expr_eq): Ditto\n+\t(get_constant_for_value_id): Take a type as an argument.\n+\t(fully_constant_expression): Pass in type.\n+\t(find_or_generate_expression): Short circuit constant case.\n+\t(create_expression_by_pieces): Remove special casing of\n+\tpointer_plus.\n+\t(do_regular_insertion): Short circuit constant case.\n+\t(do_partial_partial_insertion): Ditto.\n+\n 2008-07-15  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR target/36782"}, {"sha": "b5e38b4ba602f5fd8da01e5e468a2f7c1c0b0ee1", "filename": "gcc/testsuite/gcc.c-torture/compile/20080704-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dfb6ce12f3e9c84d406aa0bba68406eba3f0ce0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20080704-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dfb6ce12f3e9c84d406aa0bba68406eba3f0ce0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20080704-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20080704-1.c?ref=2dfb6ce12f3e9c84d406aa0bba68406eba3f0ce0", "patch": "@@ -1,5 +1,5 @@\n /* This code used to crash fold_convert due to PRE\n-   wanting to fold_convert from a REA_TYPE to an INTEGER_TYPE.  */\n+   wanting to fold_convert from a REAL_TYPE to an INTEGER_TYPE.  */\n typedef unsigned int uint32_t;\n union double_union\n {"}, {"sha": "efa934fb85329ceabb17cc84c2cdce3ef62fa7d0", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 52, "deletions": 25, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dfb6ce12f3e9c84d406aa0bba68406eba3f0ce0/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dfb6ce12f3e9c84d406aa0bba68406eba3f0ce0/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=2dfb6ce12f3e9c84d406aa0bba68406eba3f0ce0", "patch": "@@ -193,8 +193,13 @@ pre_expr_eq (const void *p1, const void *p2)\n   switch (e1->kind)\n     {\n     case CONSTANT:\n-      return expressions_equal_p (PRE_EXPR_CONSTANT (e1),\n-\t\t\t\t  PRE_EXPR_CONSTANT (e2));\n+      {\n+\ttree const0 = PRE_EXPR_CONSTANT (e1);\n+\ttree const1 = PRE_EXPR_CONSTANT (e2);\n+\treturn TREE_TYPE (const1) == TREE_TYPE (const0)\n+\t  && expressions_equal_p (const0, const1);\n+      }\n+      break;\n     case NAME:\n       return PRE_EXPR_NAME (e1) == PRE_EXPR_NAME (e2);\n     case NARY:\n@@ -316,8 +321,9 @@ get_or_alloc_expr_for_name (tree name)\n   result_id = lookup_expression_id (result);\n   if (result_id != 0)\n     {\n-      pool_free (pre_expr_pool, result);\n-      result = expression_for_id (result_id);\n+      pre_expr newresult = expression_for_id (result_id);\n+      pool_free (pre_expr_pool, result); \n+      result = newresult;\n       return result;\n     }\n   get_or_alloc_expression_id (result);\n@@ -994,8 +1000,9 @@ get_or_alloc_expr_for_constant (tree constant)\n   result_id = lookup_expression_id (newexpr);\n   if (result_id != 0)\n     {\n-      pool_free (pre_expr_pool, newexpr);\n-      newexpr = expression_for_id (result_id);\n+      pre_expr newresult = expression_for_id (result_id);\n+      pool_free (pre_expr_pool, newexpr); \n+      newexpr = newresult;\n       return newexpr;\n     }\n   value_id = get_or_alloc_constant_value_id (constant);\n@@ -1009,7 +1016,7 @@ get_or_alloc_expr_for_constant (tree constant)\n    a constant.  */\n \n static tree\n-get_constant_for_value_id (unsigned int v)\n+get_constant_for_value_id (unsigned int v, tree type)\n {\n   if (value_id_constant_p (v))\n     {\n@@ -1020,7 +1027,8 @@ get_constant_for_value_id (unsigned int v)\n       FOR_EACH_EXPR_ID_IN_SET (exprset, i, bi)\n \t{\n \t  pre_expr expr = expression_for_id (i);\n-\t  if (expr->kind == CONSTANT)\n+\t  if (expr->kind == CONSTANT\n+\t      && TREE_TYPE (PRE_EXPR_CONSTANT (expr)) == type)\n \t    return PRE_EXPR_CONSTANT (expr);\n \t}\n     }\n@@ -1064,8 +1072,10 @@ fully_constant_expression (pre_expr e)\n \t      pre_expr rep1 = get_or_alloc_expr_for (naryop1);\n \t      unsigned int vrep0 = get_expr_value_id (rep0);\n \t      unsigned int vrep1 = get_expr_value_id (rep1);\n-\t      tree const0 = get_constant_for_value_id (vrep0);\n-\t      tree const1 = get_constant_for_value_id (vrep1);\n+\t      tree const0 = get_constant_for_value_id (vrep0,\n+\t\t\t\t\t\t       TREE_TYPE (nary->op[0]));\n+\t      tree const1 = get_constant_for_value_id (vrep1,\n+\t\t\t\t\t\t       TREE_TYPE (nary->op[1]));\n \t      tree result = NULL;\n \t      if (const0 && const1)\n \t\t{\n@@ -1087,7 +1097,8 @@ fully_constant_expression (pre_expr e)\n \t      tree naryop0 = nary->op[0];\n \t      pre_expr rep0 = get_or_alloc_expr_for (naryop0);\n \t      unsigned int vrep0 = get_expr_value_id (rep0);\n-\t      tree const0 = get_constant_for_value_id (vrep0);\n+\t      tree const0 = get_constant_for_value_id (vrep0,\n+\t\t\t\t\t\t       TREE_TYPE (nary->op[0]));\n \t      tree result = NULL;\n \t      if (const0)\n \t\t{\n@@ -2599,9 +2610,14 @@ static tree\n find_or_generate_expression (basic_block block, pre_expr expr, tree stmts,\n \t\t\t     tree domstmt)\n {\n-  pre_expr leader = bitmap_find_leader (AVAIL_OUT (block),\n-\t\t\t\t\tget_expr_value_id (expr), domstmt);\n+  pre_expr leader;\n   tree genop = NULL;\n+\n+  if (expr->kind == CONSTANT)\n+    return PRE_EXPR_CONSTANT (expr);\n+  \n+  leader = bitmap_find_leader (AVAIL_OUT (block),\n+\t\t\t       get_expr_value_id (expr), domstmt);\n   if (leader)\n     {\n       if (leader->kind == NAME)\n@@ -2705,14 +2721,10 @@ create_expression_by_pieces (basic_block block, pre_expr expr, tree stmts,\n \t\t\t\t\t\t\t stmts, domstmt);\n \t      if (!genop1 || !genop2)\n \t\treturn NULL_TREE;\n+\n \t      genop1 = fold_convert (TREE_TYPE (nary->op[0]),\n \t\t\t\t     genop1);\n-\t      /* Ensure op2 is a sizetype for POINTER_PLUS_EXPR.  It\n-\t\t may be a constant with the wrong type.  */\n-\t      if (nary->opcode == POINTER_PLUS_EXPR)\n-\t\tgenop2 = fold_convert (sizetype, genop2);\n-\t      else\n-\t\tgenop2 = fold_convert (TREE_TYPE (nary->op[1]), genop2);\n+\t      genop2 = fold_convert (TREE_TYPE (nary->op[1]), genop2);\n \t      \n \t      folded = fold_build2 (nary->opcode, nary->type,\n \t\t\t\t    genop1, genop2);\n@@ -3141,9 +3153,16 @@ do_regular_insertion (basic_block block, basic_block dom)\n \t\t}\n \n \t      eprime = fully_constant_expression (eprime);\n-\t      vprime = get_expr_value_id (eprime);\n-\t      edoubleprime = bitmap_find_leader (AVAIL_OUT (bprime),\n-\t\t\t\t\t\t vprime, NULL_TREE);\n+\t      if (eprime->kind == CONSTANT)\n+\t\t{\n+\t\t  edoubleprime = eprime;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  vprime = get_expr_value_id (eprime);\n+\t\t  edoubleprime = bitmap_find_leader (AVAIL_OUT (bprime),\n+\t\t\t\t\t\t     vprime, NULL_TREE);\n+\t\t}\n \t      if (edoubleprime == NULL)\n \t\t{\n \t\t  avail[bprime->index] = eprime;\n@@ -3275,9 +3294,17 @@ do_partial_partial_insertion (basic_block block, basic_block dom)\n \t\t}\n \n \t      eprime = fully_constant_expression (eprime);\n-\t      vprime = get_expr_value_id (eprime);\n-\t      edoubleprime = bitmap_find_leader (AVAIL_OUT (bprime),\n-\t\t\t\t\t\t vprime, NULL_TREE);\n+\t      if (eprime->kind == CONSTANT)\n+\t\t{\n+\t\t  edoubleprime = eprime;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  vprime = get_expr_value_id (eprime);\n+\t\t  edoubleprime = bitmap_find_leader (AVAIL_OUT (bprime),\n+\t\t\t\t\t\t     vprime, NULL_TREE);\n+\t\t}\n+\t      \n \t      if (edoubleprime == NULL)\n \t\t{\n \t\t  by_all = false;"}, {"sha": "69945a5c3c74666fe468db7ea3e1454fca19b9a8", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dfb6ce12f3e9c84d406aa0bba68406eba3f0ce0/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dfb6ce12f3e9c84d406aa0bba68406eba3f0ce0/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=2dfb6ce12f3e9c84d406aa0bba68406eba3f0ce0", "patch": "@@ -2582,6 +2582,8 @@ expressions_equal_p (tree e1, tree e2)\n \n   te1 = TREE_TYPE (e1);\n   te2 = TREE_TYPE (e2);\n+  if (te1 != te2)\n+    return false;\n \n   if (TREE_CODE (e1) == TREE_LIST && TREE_CODE (e2) == TREE_LIST)\n     {"}]}