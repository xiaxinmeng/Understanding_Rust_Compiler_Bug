{"sha": "06a9f20f97e788bdff139dcf62d055955debcc8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZhOWYyMGY5N2U3ODhiZGZmMTM5ZGNmNjJkMDU1OTU1ZGViY2M4ZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-27T00:16:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-27T00:16:23Z"}, "message": "Daily bump.", "tree": {"sha": "aa8bb3da10e00330637c727a8aab21b376701e84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa8bb3da10e00330637c727a8aab21b376701e84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06a9f20f97e788bdff139dcf62d055955debcc8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a9f20f97e788bdff139dcf62d055955debcc8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06a9f20f97e788bdff139dcf62d055955debcc8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a9f20f97e788bdff139dcf62d055955debcc8d/comments", "author": null, "committer": null, "parents": [{"sha": "ded7355b3d90f35af387fbea27cf59f1e61766eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ded7355b3d90f35af387fbea27cf59f1e61766eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ded7355b3d90f35af387fbea27cf59f1e61766eb"}], "stats": {"total": 222, "additions": 221, "deletions": 1}, "files": [{"sha": "23a703bf78f9716ed2353359afc8d19cb715fb60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a9f20f97e788bdff139dcf62d055955debcc8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a9f20f97e788bdff139dcf62d055955debcc8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06a9f20f97e788bdff139dcf62d055955debcc8d", "patch": "@@ -1,3 +1,58 @@\n+2021-02-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/99281\n+\t* expr.c (store_field): For calls with return-slot optimization\n+\tand addressable return type expand the store directly.\n+\n+2021-02-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/99275\n+\t* builtins.c (warn_string_no_nul): Fix diagnostic formatting.\n+\n+2021-02-26  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/99279\n+\t* config/rs6000/rs6000-call.c (rs6000_init_builtins): Replace assert\n+\twith an \"if\" test.\n+\n+2021-02-26  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* config.gcc: Add rs6000-pcrel-opt.o.\n+\t* config/rs6000/rs6000-pcrel-opt.c: New file.\n+\t* config/rs6000/pcrel-opt.md: New file.\n+\t* config/rs6000/predicates.md: Add d_form_memory predicate.\n+\t* config/rs6000/rs6000-cpus.def: Add OPTION_MASK_PCREL_OPT.\n+\t* config/rs6000/rs6000-passes.def: Add pass_pcrel_opt.\n+\t* config/rs6000/rs6000-protos.h: Add reg_to_non_prefixed(),\n+\tpcrel_opt_valid_mem_p(), output_pcrel_opt_reloc(),\n+\tand make_pass_pcrel_opt().\n+\t* config/rs6000/rs6000.c (reg_to_non_prefixed): Make global.\n+\t(rs6000_option_override_internal): Add pcrel-opt.\n+\t(rs6000_delegitimize_address): Support pcrel-opt.\n+\t(rs6000_opt_masks): Add pcrel-opt.\n+\t(pcrel_opt_valid_mem_p): New function.\n+\t(reg_to_non_prefixed): Make global.\n+\t(rs6000_asm_output_opcode): Reset prepend_p_to_next_insn.\n+\t(output_pcrel_opt_reloc): New function.\n+\t* config/rs6000/rs6000.md (loads_extern_addr): New attr.\n+\t(pcrel_extern_addr): Set loads_extern_addr.\n+\tAdd include for pcrel-opt.md.\n+\t* config/rs6000/rs6000.opt: Add -mpcrel-opt.\n+\t* config/rs6000/t-rs6000: Add rules for pcrel-opt.c and\n+\tpcrel-opt.md.\n+\n+2021-02-26  YunQiang Su  <yunqiang.su@cipunited.com>\n+\n+\tPR target/98996\n+\t* config/mips/mips.c (mips_expand_ext_as_unaligned_load):\n+\tIf TARGET_64BIT and dest is SUBREG, we check the width, if it\n+\tequal to SImode, we use SImode operation, just like what we are\n+\tdoing for REG one.\n+\n+2021-02-26  Marek Polacek  <polacek@redhat.com>\n+\n+\t* builtins.c (warn_for_access): Fix typos.\n+\n 2021-02-25  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/aarch64/aarch64.md (<optab>_rol<mode>3): Add a '#'"}, {"sha": "72828d4af81c1c6b89c09a83e7c5dec2a2ca07f4", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a9f20f97e788bdff139dcf62d055955debcc8d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a9f20f97e788bdff139dcf62d055955debcc8d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=06a9f20f97e788bdff139dcf62d055955debcc8d", "patch": "@@ -1 +1 @@\n-20210226\n+20210227"}, {"sha": "8a980ded0d1f7148f3571c7f5782d9870d913c77", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a9f20f97e788bdff139dcf62d055955debcc8d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a9f20f97e788bdff139dcf62d055955debcc8d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=06a9f20f97e788bdff139dcf62d055955debcc8d", "patch": "@@ -1,3 +1,10 @@\n+2021-02-26  YunQiang Su  <yunqiang.su@cipunited.com>\n+\n+\tPR ada/98996\n+\t* Makefile.rtl: <mips*-*-linux*>\n+\tadd 128Bit operation file for MIPS N64 and N32 to\n+\tLIBGNAT_TARGET_PAIRS and EXTRA_GNATRTL_NONTASKING_OBJS\n+\n 2021-02-12  Arnaud Charlet  <charlet@adacore.com>\n \n \t* repinfo.ads, repinfo.adb (*SO_Ref*): Restore."}, {"sha": "57c945ebad9b35fe8ebad6334a28ff2009fd1d87", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a9f20f97e788bdff139dcf62d055955debcc8d/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a9f20f97e788bdff139dcf62d055955debcc8d/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=06a9f20f97e788bdff139dcf62d055955debcc8d", "patch": "@@ -1,3 +1,68 @@\n+2021-02-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc (exploded_path::exploded_path): New copy-ctor.\n+\t* exploded-graph.h (exploded_path::operator=): Drop decl.\n+\n+2021-02-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96374\n+\t* diagnostic-manager.cc (class epath_finder): New.\n+\t(epath_finder::get_best_epath): New.\n+\t(saved_diagnostic::saved_diagnostic): Update for replacement of\n+\tm_state and m_epath_length with m_best_epath.\n+\t(saved_diagnostic::~saved_diagnostic): Delete m_best_epath.\n+\t(saved_diagnostic::to_json): Update \"path_length\" to be optional.\n+\t(saved_diagnostic::calc_best_epath): New, based on\n+\tdedupe_winners::add and parts of dedupe_key::dedupe_key.\n+\t(saved_diagnostic::get_epath_length): New.\n+\t(saved_diagnostic::add_duplicate): New.\n+\t(dedupe_key::dedupe_key): Drop epath param.  Move invocation of\n+\tstmt_finder to saved_diagnostic::calc_best_epath.\n+\t(class dedupe_candidate): Delete.\n+\t(class dedupe_hash_map_traits): Update to use saved_diagnotic *\n+\trather than dedupe_candidate * as the value_type/compare_type.\n+\t(dedupe_winners::~dedupe_winners): Don't delete the values.\n+\t(dedupe_winners::add): Convert param from shortest_exploded_paths to\n+\tepath_finder.  Drop \"eg\" param.  Drop dedupe_candidate, moving\n+\tpath generation and feasiblity checking to\n+\tepath_finder::get_best_epath.  Update winner-selection for move\n+\tof epaths from dedupe_candidate to saved_diagnostic.\n+\t(dedupe_winners::emit_best):  Update for removal of class\n+\tdedupe_candidate.\n+\t(dedupe_winners::map_t): Update to use saved_diagnotic * rather\n+\tthan dedupe_candidate * as the value_type/compare_type.\n+\t(diagnostic_manager::emit_saved_diagnostics): Move\n+\tshortest_exploded_paths instance into epath_finder and pass that\n+\taround instead.\n+\t(diagnostic_manager::emit_saved_diagnostic): Drop epath, stmt\n+\tand num_dupes params, instead getting these from the\n+\tsaved_diagnostic.  Use correct location in inform_n call.\n+\t* diagnostic-manager.h (class epath_finder): New forward decl.\n+\t(saved_diagnostic::status): Drop enum.\n+\t(saved_diagnostic::set_feasible): Drop.\n+\t(saved_diagnostic::set_infeasible): Drop.\n+\t(saved_diagnostic::get_status): Drop.\n+\t(saved_diagnostic::calc_best_epath): New decl.\n+\t(saved_diagnostic::get_best_epath): New decl.\n+\t(saved_diagnostic::get_epath_length): New decl.\n+\t(saved_diagnostic::set_epath_length): Drop.\n+\t(saved_diagnostic::get_epath_length): Drop inline implementation.\n+\t(saved_diagnostic::add_duplicate): New.\n+\t(saved_diagnostic::get_num_dupes): New.\n+\t(saved_diagnostic::m_d): Document ownership.\n+\t(saved_diagnostic::m_trailing_eedge): Make const.\n+\t(saved_diagnostic::m_status): Drop field.\n+\t(saved_diagnostic::m_epath_length): Drop field.\n+\t(saved_diagnostic::m_best_epath): New field.\n+\t(saved_diagnostic::m_problem): Document ownership.\n+\t(saved_diagnostic::m_duplicates): New field.\n+\t(diagnostic_manager::emit_saved_diagnostic): Drop params epath,\n+\tstmt, and num_dupes.\n+\t* engine.cc (exploded_graph_annotator::print_saved_diagnostic):\n+\tUpdate for changes to saved_diagnostic class.\n+\t* exploded-graph.h (exploded_path::feasible_p): Drop unused\n+\toverloaded decl.\n+\n 2021-02-25  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/99193"}, {"sha": "b5c05426c130ae1ffd4e694162ae6cd758d77a5f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a9f20f97e788bdff139dcf62d055955debcc8d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a9f20f97e788bdff139dcf62d055955debcc8d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=06a9f20f97e788bdff139dcf62d055955debcc8d", "patch": "@@ -1,3 +1,30 @@\n+2021-02-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_lambda_declarator_opt): Implement\n+\tP1102R2 - Down with ()! Make ()s optional before lambda specifiers\n+\tfor -std={c,gnu}++2b or with pedwarn in earlier versions.\n+\n+2021-02-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/95451\n+\t* lambda.c (is_lambda_ignored_entity): Before checking for\n+\tLAMBDA_FUNCTION_P, use OVL_FIRST.  Drop FUNCTION_DECL check.\n+\n+2021-02-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98810\n+\t* pt.c (tsubst_copy) [VIEW_CONVERT_EXPR]: Add const\n+\tto a class non-type template argument that needs it.\n+\n+2021-02-26  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/98990\n+\t* pt.c (splice_late_return_type): Rebuild the entire return type\n+\tif we have to adjust the level of an auto within.\n+\t(type_uses_auto): Adjust call to find_type_usage.\n+\t* type-utils.h (find_type_usage): Revert r10-6571 change that\n+\tmade this function return a pointer to the auto node.\n+\n 2021-02-25  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/99213"}, {"sha": "12537ef23aa66a603e161c8d882d585a48642cb3", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a9f20f97e788bdff139dcf62d055955debcc8d/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a9f20f97e788bdff139dcf62d055955debcc8d/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=06a9f20f97e788bdff139dcf62d055955debcc8d", "patch": "@@ -1,3 +1,7 @@\n+2021-02-26  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* de.po: Update.\n+\n 2021-02-23  Joseph Myers  <joseph@codesourcery.com>\n \n \t* sv.po: Update."}, {"sha": "414fd7b482c59a6750c5e5d9f7ffd8f574181080", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a9f20f97e788bdff139dcf62d055955debcc8d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a9f20f97e788bdff139dcf62d055955debcc8d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06a9f20f97e788bdff139dcf62d055955debcc8d", "patch": "@@ -1,3 +1,65 @@\n+2021-02-26  Alexandre Oliva  <oliva@gnu.org>\n+\n+\t* gcc.target/powerpc/pr67789.c: Revert fpic target requirement\n+\tduplication.\n+\t* gcc.target/powerpc/pr83629.c: Likewise.\n+\t* gcc.target/powerpc/pr84112.c: Likewise.\n+\n+2021-02-26  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc.target/powerpc/compress-float-ppc-pic.c: Add\n+\tdg-require-effective-target fpic.\n+\t* gcc.target/powerpc/ppc-eabi.c: Likewise.\n+\t* gcc.target/powerpc/pr26350.c: Likewise.\n+\t* gcc.target/powerpc/pr67789.c: Likewise.\n+\t* gcc.target/powerpc/pr79439-1.c: Likewise.\n+\t* gcc.target/powerpc/pr79439-2.c: Likewise.\n+\t* gcc.target/powerpc/pr79439-3.c: Likewise.\n+\t* gcc.target/powerpc/pr83629.c: Likewise.\n+\t* gcc.target/powerpc/pr84112.c: Likewise.\n+\n+2021-02-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/99281\n+\t* g++.dg/pr99218.C: New testcase.\n+\n+2021-02-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp23/lambda-specifiers1.C: New test.\n+\n+2021-02-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/95451\n+\t* g++.dg/cpp1y/lambda-generic-95451.C: New test.\n+\n+2021-02-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98810\n+\t* g++.dg/cpp2a/nontype-class-defarg1.C: New test.\n+\n+2021-02-26  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/pcrel-opt-inc-di.c: New test.\n+\t* gcc.target/powerpc/pcrel-opt-ld-df.c: New test.\n+\t* gcc.target/powerpc/pcrel-opt-ld-di.c: New test.\n+\t* gcc.target/powerpc/pcrel-opt-ld-hi.c: New test.\n+\t* gcc.target/powerpc/pcrel-opt-ld-qi.c: New test.\n+\t* gcc.target/powerpc/pcrel-opt-ld-sf.c: New test.\n+\t* gcc.target/powerpc/pcrel-opt-ld-si.c: New test.\n+\t* gcc.target/powerpc/pcrel-opt-ld-vector.c: New test.\n+\t* gcc.target/powerpc/pcrel-opt-st-df.c: New test.\n+\t* gcc.target/powerpc/pcrel-opt-st-di.c: New test.\n+\t* gcc.target/powerpc/pcrel-opt-st-hi.c: New test.\n+\t* gcc.target/powerpc/pcrel-opt-st-qi.c: New test.\n+\t* gcc.target/powerpc/pcrel-opt-st-sf.c: New test.\n+\t* gcc.target/powerpc/pcrel-opt-st-si.c: New test.\n+\t* gcc.target/powerpc/pcrel-opt-st-vector.c: New test.\n+\n+2021-02-26  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/98990\n+\t* g++.dg/concepts/abbrev8.C: New test.\n+\n 2021-02-25  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/99213"}]}