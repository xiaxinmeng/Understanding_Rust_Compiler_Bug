{"sha": "f57fe06890a3f6072b1d993432cbee19bd7e7e21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU3ZmUwNjg5MGEzZjYwNzJiMWQ5OTM0MzJjYmVlMTliZDdlN2UyMQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2004-11-27T22:45:24Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2004-11-27T22:45:24Z"}, "message": "rs6000.h (WORLD_SAVE_P): Define.\n\n\t* config/rs6000/rs6000.h (WORLD_SAVE_P): Define.\n\t* config/rs6000/darwin.h (WORLD_SAVE_P): Define.\n\t* config/rs6000/rs6000.c (compute_save_world_info): Use WORLD_SAVE_P\n\tto allow non-darwin ABIs to optimize away code.\n\t(rs6000_emit_prologue, rs6000_emit_epilogue): Likewise.\n\nFrom-SVN: r91396", "tree": {"sha": "36546d191547205e56939f8b878e3b774cda9926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36546d191547205e56939f8b878e3b774cda9926"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f57fe06890a3f6072b1d993432cbee19bd7e7e21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f57fe06890a3f6072b1d993432cbee19bd7e7e21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f57fe06890a3f6072b1d993432cbee19bd7e7e21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f57fe06890a3f6072b1d993432cbee19bd7e7e21/comments", "author": null, "committer": null, "parents": [{"sha": "51dd24d7d05faef3ee43c44cd79aa699038182f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51dd24d7d05faef3ee43c44cd79aa699038182f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51dd24d7d05faef3ee43c44cd79aa699038182f4"}], "stats": {"total": 72, "additions": 45, "deletions": 27}, "files": [{"sha": "7c805f35079c69af1c4b7e08966198545fdc3a90", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57fe06890a3f6072b1d993432cbee19bd7e7e21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57fe06890a3f6072b1d993432cbee19bd7e7e21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f57fe06890a3f6072b1d993432cbee19bd7e7e21", "patch": "@@ -1,3 +1,11 @@\n+2004-11-28  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/rs6000/rs6000.h (WORLD_SAVE_P): Define.\n+\t* config/rs6000/darwin.h (WORLD_SAVE_P): Define.\n+\t* config/rs6000/rs6000.c (compute_save_world_info): Use WORLD_SAVE_P\n+\tto allow non-darwin ABIs to optimize away code.\n+\t(rs6000_emit_prologue, rs6000_emit_epilogue): Likewise.\n+\n 2004-11-27  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree.c (operand_equal_for_phi_arg_p): New."}, {"sha": "5b1b3dc34bf17b3061c05a3d65238ab776643746", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57fe06890a3f6072b1d993432cbee19bd7e7e21/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57fe06890a3f6072b1d993432cbee19bd7e7e21/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=f57fe06890a3f6072b1d993432cbee19bd7e7e21", "patch": "@@ -208,6 +208,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef\tFP_SAVE_INLINE\n #define FP_SAVE_INLINE(FIRST_REG) ((FIRST_REG) < 64)\n \n+/* Darwin uses a function call if everything needs to be saved/restored.  */\n+#undef WORLD_SAVE_P\n+#define WORLD_SAVE_P(INFO) ((INFO)->world_save_p)\n+\n /* The assembler wants the alternate register names, but without\n    leading percent sign.  */\n #undef REGISTER_NAMES"}, {"sha": "5a7bd84c08f738c5903e280e3d44f91e48cb1f6e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57fe06890a3f6072b1d993432cbee19bd7e7e21/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57fe06890a3f6072b1d993432cbee19bd7e7e21/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f57fe06890a3f6072b1d993432cbee19bd7e7e21", "patch": "@@ -12422,23 +12422,25 @@ compute_vrsave_mask (void)\n }\n \n /* For a very restricted set of circumstances, we can cut down the\n-   size of prologs/epilogs by calling our own save/restore-the-world\n-   routines. */\n+   size of prologues/epilogues by calling our own save/restore-the-world\n+   routines.  */\n \n static void\n-compute_save_world_info(rs6000_stack_t *info_ptr)\n-{\n-  info_ptr->world_save_p =\n-    (DEFAULT_ABI == ABI_DARWIN)\n-    && ! (current_function_calls_setjmp && flag_exceptions)\n-    && info_ptr->first_fp_reg_save == FIRST_SAVED_FP_REGNO\n-    && info_ptr->first_gp_reg_save == FIRST_SAVED_GP_REGNO\n-    && info_ptr->first_altivec_reg_save == FIRST_SAVED_ALTIVEC_REGNO\n-    && info_ptr->cr_save_p;\n+compute_save_world_info (rs6000_stack_t *info_ptr)\n+{\n+  info_ptr->world_save_p = 1;\n+  info_ptr->world_save_p\n+    = (WORLD_SAVE_P (info_ptr)\n+       && DEFAULT_ABI == ABI_DARWIN\n+       && ! (current_function_calls_setjmp && flag_exceptions)\n+       && info_ptr->first_fp_reg_save == FIRST_SAVED_FP_REGNO\n+       && info_ptr->first_gp_reg_save == FIRST_SAVED_GP_REGNO\n+       && info_ptr->first_altivec_reg_save == FIRST_SAVED_ALTIVEC_REGNO\n+       && info_ptr->cr_save_p);\n \n   /* This will not work in conjunction with sibcalls.  Make sure there\n      are none.  (This check is expensive, but seldom executed.) */\n-  if ( info_ptr->world_save_p )\n+  if (WORLD_SAVE_P (info_ptr))\n     {\n       rtx insn;\n       for ( insn = get_last_insn_anywhere (); insn; insn = PREV_INSN (insn))\n@@ -12450,7 +12452,7 @@ compute_save_world_info(rs6000_stack_t *info_ptr)\n \t  }\n     }\n \n-  if (info_ptr->world_save_p)\n+  if (WORLD_SAVE_P (info_ptr))\n     {\n       /* Even if we're not touching VRsave, make sure there's room on the\n \t stack for it, if it looks like we're calling SAVE_WORLD, which\n@@ -13862,7 +13864,7 @@ rs6000_emit_prologue (void)\n     }\n \n   /* Handle world saves specially here.  */\n-  if (info->world_save_p)\n+  if (WORLD_SAVE_P (info))\n     {\n       int i, j, sz;\n       rtx treg;\n@@ -13982,7 +13984,7 @@ rs6000_emit_prologue (void)\n     }\n \n   /* Save AltiVec registers if needed.  */\n-  if (! info->world_save_p && TARGET_ALTIVEC_ABI && info->altivec_size != 0)\n+  if (!WORLD_SAVE_P (info) && TARGET_ALTIVEC_ABI && info->altivec_size != 0)\n     {\n       int i;\n \n@@ -14023,7 +14025,7 @@ rs6000_emit_prologue (void)\n      epilogue.  */\n \n   if (TARGET_ALTIVEC && TARGET_ALTIVEC_VRSAVE\n-      && ! info->world_save_p && info->vrsave_mask != 0)\n+      && !WORLD_SAVE_P (info) && info->vrsave_mask != 0)\n     {\n       rtx reg, mem, vrsave;\n       int offset;\n@@ -14051,15 +14053,15 @@ rs6000_emit_prologue (void)\n     }\n \n   /* If we use the link register, get it into r0.  */\n-  if (! info->world_save_p && info->lr_save_p)\n+  if (!WORLD_SAVE_P (info) && info->lr_save_p)\n     {\n       insn = emit_move_insn (gen_rtx_REG (Pmode, 0),\n \t\t\t     gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM));\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n \n   /* If we need to save CR, put it into r12.  */\n-  if (! info->world_save_p && info->cr_save_p && frame_reg_rtx != frame_ptr_rtx)\n+  if (!WORLD_SAVE_P (info) && info->cr_save_p && frame_reg_rtx != frame_ptr_rtx)\n     {\n       rtx set;\n \n@@ -14081,7 +14083,7 @@ rs6000_emit_prologue (void)\n \n   /* Do any required saving of fpr's.  If only one or two to save, do\n      it ourselves.  Otherwise, call function.  */\n-  if (! info->world_save_p && saving_FPRs_inline)\n+  if (!WORLD_SAVE_P (info) && saving_FPRs_inline)\n     {\n       int i;\n       for (i = 0; i < 64 - info->first_fp_reg_save; i++)\n@@ -14092,7 +14094,7 @@ rs6000_emit_prologue (void)\n \t\t\t   info->fp_save_offset + sp_offset + 8 * i,\n \t\t\t   info->total_size);\n     }\n-  else if (! info->world_save_p && info->first_fp_reg_save != 64)\n+  else if (!WORLD_SAVE_P (info) && info->first_fp_reg_save != 64)\n     {\n       int i;\n       char rname[30];\n@@ -14128,7 +14130,7 @@ rs6000_emit_prologue (void)\n \n   /* Save GPRs.  This is done as a PARALLEL if we are using\n      the store-multiple instructions.  */\n-  if (! info->world_save_p && using_store_multiple)\n+  if (!WORLD_SAVE_P (info) && using_store_multiple)\n     {\n       rtvec p;\n       int i;\n@@ -14150,7 +14152,7 @@ rs6000_emit_prologue (void)\n       rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n \t\t\t    NULL_RTX, NULL_RTX);\n     }\n-  else if (! info->world_save_p)\n+  else if (!WORLD_SAVE_P (info))\n     {\n       int i;\n       for (i = 0; i < 32 - info->first_gp_reg_save; i++)\n@@ -14209,7 +14211,7 @@ rs6000_emit_prologue (void)\n \n   /* ??? There's no need to emit actual instructions here, but it's the\n      easiest way to get the frame unwind information emitted.  */\n-  if (! info->world_save_p && current_function_calls_eh_return)\n+  if (!WORLD_SAVE_P (info) && current_function_calls_eh_return)\n     {\n       unsigned int i, regno;\n \n@@ -14244,7 +14246,7 @@ rs6000_emit_prologue (void)\n     }\n \n   /* Save lr if we used it.  */\n-  if (! info->world_save_p && info->lr_save_p)\n+  if (!WORLD_SAVE_P (info) && info->lr_save_p)\n     {\n       rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t       GEN_INT (info->lr_save_offset + sp_offset));\n@@ -14259,7 +14261,7 @@ rs6000_emit_prologue (void)\n     }\n \n   /* Save CR if we use any that must be preserved.  */\n-  if (! info->world_save_p && info->cr_save_p)\n+  if (!WORLD_SAVE_P (info) && info->cr_save_p)\n     {\n       rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t       GEN_INT (info->cr_save_offset + sp_offset));\n@@ -14292,7 +14294,7 @@ rs6000_emit_prologue (void)\n \n   /* Update stack and set back pointer unless this is V.4,\n      for which it was done previously.  */\n-  if (! info->world_save_p && info->push_p\n+  if (!WORLD_SAVE_P (info) && info->push_p\n       && !(DEFAULT_ABI == ABI_V4 || current_function_calls_eh_return))\n     rs6000_emit_allocate_stack (info->total_size, FALSE);\n \n@@ -14461,7 +14463,7 @@ rs6000_emit_epilogue (int sibcall)\n \t\t\t || rs6000_cpu == PROCESSOR_PPC750\n \t\t\t || optimize_size);\n \n-  if (info->world_save_p)\n+  if (WORLD_SAVE_P (info))\n     {\n       int i, j;\n       char rname[30];"}, {"sha": "584111358da4bbb8d1d49c4fa57b4e5253031de8", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57fe06890a3f6072b1d993432cbee19bd7e7e21/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57fe06890a3f6072b1d993432cbee19bd7e7e21/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=f57fe06890a3f6072b1d993432cbee19bd7e7e21", "patch": "@@ -1627,6 +1627,10 @@ extern enum rs6000_abi rs6000_current_abi;\t/* available for use by subtarget */\n #define CALL_LONG\t\t0x00000008\t/* always call indirect */\n #define CALL_LIBCALL\t\t0x00000010\t/* libcall */\n \n+/* We don't have prologue and epilogue functions to save/restore\n+   everything for most ABIs.  */\n+#define WORLD_SAVE_P(INFO) 0\n+\n /* 1 if N is a possible register number for a function value\n    as seen by the caller.\n "}]}