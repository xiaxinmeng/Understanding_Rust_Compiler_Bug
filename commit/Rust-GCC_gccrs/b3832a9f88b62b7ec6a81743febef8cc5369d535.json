{"sha": "b3832a9f88b62b7ec6a81743febef8cc5369d535", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM4MzJhOWY4OGI2MmI3ZWM2YTgxNzQzZmViZWY4Y2M1MzY5ZDUzNQ==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2007-02-22T08:16:18Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2007-02-22T08:16:18Z"}, "message": "re PR tree-optimization/30858 (ice for legal code with -O2 -ftree-vectorize)\n\n        PR tree-optimization/30858\n        * tree-vectorizer.c (vect_is_simple_reduction): Check that the stmts\n        in the reduction cycle have a single use in the loop.\n        * tree-vectorizer.h (relevant): Add documentation.\n\nFrom-SVN: r122220", "tree": {"sha": "574c3d11b2b4b5fe7b87fc4164943fcc054acd91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/574c3d11b2b4b5fe7b87fc4164943fcc054acd91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3832a9f88b62b7ec6a81743febef8cc5369d535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3832a9f88b62b7ec6a81743febef8cc5369d535", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3832a9f88b62b7ec6a81743febef8cc5369d535", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3832a9f88b62b7ec6a81743febef8cc5369d535/comments", "author": null, "committer": null, "parents": [{"sha": "d1fb5e1c0b2c50fce4934f3b604ea263c08ac8a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1fb5e1c0b2c50fce4934f3b604ea263c08ac8a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1fb5e1c0b2c50fce4934f3b604ea263c08ac8a8"}], "stats": {"total": 87, "additions": 79, "deletions": 8}, "files": [{"sha": "829872f945827fa2ae472c6502946b28816992a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3832a9f88b62b7ec6a81743febef8cc5369d535/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3832a9f88b62b7ec6a81743febef8cc5369d535/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3832a9f88b62b7ec6a81743febef8cc5369d535", "patch": "@@ -1,3 +1,10 @@\n+2007-02-22  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/30858\n+\t* tree-vectorizer.c (vect_is_simple_reduction): Check that the stmts\n+\tin the reduction cycle have a single use in the loop.\n+\t* tree-vectorizer.h (relevant): Add documentation.\n+\n 2007-02-20  Mike Stump  <mrs@apple.com>\n \n \t* configure.ac (powerpc*-*-darwin*): #include <sys/cdefs.h>."}, {"sha": "8556c439c86bf4567502ea0adc8810a5f157dbe5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3832a9f88b62b7ec6a81743febef8cc5369d535/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3832a9f88b62b7ec6a81743febef8cc5369d535/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3832a9f88b62b7ec6a81743febef8cc5369d535", "patch": "@@ -1,3 +1,8 @@\n+2007-02-22  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+        PR tree-optimization/30858\n+\t* gcc.dg/vect/pr30858.c: New test.\n+\n 2007-02-21  Mark Mitchell  <mark@codesourcery.com>\n \n \t* lib/wrapper.exp (${tool}_maybe_build_wrapper): Allow the caller"}, {"sha": "0af2f8e9a91ca7faf728fa15bc00584245b48f79", "filename": "gcc/testsuite/gcc.dg/vect/pr30858.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3832a9f88b62b7ec6a81743febef8cc5369d535/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr30858.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3832a9f88b62b7ec6a81743febef8cc5369d535/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr30858.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr30858.c?ref=b3832a9f88b62b7ec6a81743febef8cc5369d535", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+\n+int\n+foo (int ko)\n+{\n+ int j,i;\n+  for (j = 0; j < ko; j++)\n+   i += (i > 10) ? -5 : 7;\n+ return i;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Unknown def-use cycle pattern.\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "2a53b9c9fa3a083f10bccd00a24b704767eeed56", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3832a9f88b62b7ec6a81743febef8cc5369d535/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3832a9f88b62b7ec6a81743febef8cc5369d535/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=b3832a9f88b62b7ec6a81743febef8cc5369d535", "patch": "@@ -1935,34 +1935,70 @@ vect_is_simple_reduction (struct loop *loop, tree phi)\n   int op_type;\n   tree operation, op1, op2;\n   tree type;\n+  int nloop_uses;\n+  tree name;\n+  imm_use_iterator imm_iter;\n+  use_operand_p use_p;\n \n-  if (TREE_CODE (loop_arg) != SSA_NAME)\n+  name = PHI_RESULT (phi);\n+  nloop_uses = 0;\n+  FOR_EACH_IMM_USE_FAST (use_p, imm_iter, name)\n     {\n-      if (vect_print_dump_info (REPORT_DETAILS))\n+      tree use_stmt = USE_STMT (use_p);\n+      if (flow_bb_inside_loop_p (loop, bb_for_stmt (use_stmt))\n+\t  && vinfo_for_stmt (use_stmt)\n+\t  && !is_pattern_stmt_p (vinfo_for_stmt (use_stmt)))\n+        nloop_uses++;\n+      if (nloop_uses > 1)\n         {\n-          fprintf (vect_dump, \"reduction: not ssa_name: \");\n-          print_generic_expr (vect_dump, loop_arg, TDF_SLIM);\n+          if (vect_print_dump_info (REPORT_DETAILS))\n+            fprintf (vect_dump, \"reduction used in loop.\");\n+          return NULL_TREE;\n         }\n+    }\n+\n+  if (TREE_CODE (loop_arg) != SSA_NAME)\n+    {\n+      if (vect_print_dump_info (REPORT_DETAILS))\n+\t{\n+\t  fprintf (vect_dump, \"reduction: not ssa_name: \");\n+\t  print_generic_expr (vect_dump, loop_arg, TDF_SLIM);\n+\t}\n       return NULL_TREE;\n     }\n \n   def_stmt = SSA_NAME_DEF_STMT (loop_arg);\n   if (!def_stmt)\n     {\n       if (vect_print_dump_info (REPORT_DETAILS))\n-        fprintf (vect_dump, \"reduction: no def_stmt.\");\n+\tfprintf (vect_dump, \"reduction: no def_stmt.\");\n       return NULL_TREE;\n     }\n \n   if (TREE_CODE (def_stmt) != GIMPLE_MODIFY_STMT)\n     {\n       if (vect_print_dump_info (REPORT_DETAILS))\n-        {\n-          print_generic_expr (vect_dump, def_stmt, TDF_SLIM);\n-        }\n+        print_generic_expr (vect_dump, def_stmt, TDF_SLIM);\n       return NULL_TREE;\n     }\n \n+  name = GIMPLE_STMT_OPERAND (def_stmt, 0);\n+  nloop_uses = 0;\n+  FOR_EACH_IMM_USE_FAST (use_p, imm_iter, name)\n+    {\n+      tree use_stmt = USE_STMT (use_p);\n+      if (flow_bb_inside_loop_p (loop, bb_for_stmt (use_stmt))\n+\t  && vinfo_for_stmt (use_stmt)\n+\t  && !is_pattern_stmt_p (vinfo_for_stmt (use_stmt)))\n+\tnloop_uses++;\n+      if (nloop_uses > 1)\n+\t{\n+\t  if (vect_print_dump_info (REPORT_DETAILS))\n+\t    fprintf (vect_dump, \"reduction used in loop.\");\n+\t  return NULL_TREE;\n+\t}\n+    }\n+\n   operation = GIMPLE_STMT_OPERAND (def_stmt, 1);\n   code = TREE_CODE (operation);\n   if (!commutative_tree_code (code) || !associative_tree_code (code))"}, {"sha": "4f0e7b95e8223af90a09e9289e7034eee66c92bb", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3832a9f88b62b7ec6a81743febef8cc5369d535/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3832a9f88b62b7ec6a81743febef8cc5369d535/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=b3832a9f88b62b7ec6a81743febef8cc5369d535", "patch": "@@ -175,7 +175,15 @@ enum stmt_vec_info_type {\n /* Indicates whether/how a variable is used in the loop.  */\n enum vect_relevant {\n   vect_unused_in_loop = 0,\n+\n+  /* defs that feed computations that end up (only) in a reduction. These\n+     defs may be used by non-reduction stmts, but eventually, any \n+     computations/values that are affected by these defs are used to compute \n+     a reduction (i.e. don't get stored to memory, for example). We use this \n+     to identify computations that we can change the order in which they are \n+     computed.  */\n   vect_used_by_reduction,\n+\n   vect_used_in_loop  \n };\n "}]}