{"sha": "567329fdd9d65a1e6254206fefff89fa151ba7f3", "node_id": "C_kwDOANBUbNoAKDU2NzMyOWZkZDlkNjVhMWU2MjU0MjA2ZmVmZmY4OWZhMTUxYmE3ZjM", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-09-23T22:06:34Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-09-26T17:34:04Z"}, "message": "c++: P2513R4, char8_t Compatibility and Portability Fix [PR106656]\n\nP0482R6, which added char8_t, didn't allow\n\n  const char arr[] = u8\"howdy\";\n\nbecause it said \"Declarations of arrays of char may currently be initialized\nwith UTF-8 string literals. Under this proposal, such initializations would\nbecome ill-formed.\"  This caused too many issues, so P2513R4 alleviates some\nof those compatibility problems.  In particular, \"Arrays of char or unsigned\nchar may now be initialized with a UTF-8 string literal.\"  This restriction\nhas been lifted for initialization only, not implicit conversions.  Also,\nmy reading is that 'signed char' was excluded from the allowable conversions.\n\nThis is supposed to be treated as a DR in C++20.\n\n\tPR c++/106656\n\ngcc/c-family/ChangeLog:\n\n\t* c-cppbuiltin.cc (c_cpp_builtins): Update value of __cpp_char8_t\n\tfor C++20.\n\ngcc/cp/ChangeLog:\n\n\t* typeck2.cc (array_string_literal_compatible_p): Allow\n\tinitializing arrays of char or unsigned char by a UTF-8 string literal.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp23/feat-cxx2b.C: Adjust.\n\t* g++.dg/cpp2a/feat-cxx2a.C: Likewise.\n\t* g++.dg/ext/char8_t-feature-test-macro-2.C: Likewise.\n\t* g++.dg/ext/char8_t-init-2.C: Likewise.\n\t* g++.dg/cpp2a/char8_t3.C: New test.\n\t* g++.dg/cpp2a/char8_t4.C: New test.", "tree": {"sha": "781fe7411780693ba3b1c35ff80fd51f756e8d40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/781fe7411780693ba3b1c35ff80fd51f756e8d40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/567329fdd9d65a1e6254206fefff89fa151ba7f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/567329fdd9d65a1e6254206fefff89fa151ba7f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/567329fdd9d65a1e6254206fefff89fa151ba7f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/567329fdd9d65a1e6254206fefff89fa151ba7f3/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e77d4082fa845f1182641a93cfbae71984244d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e77d4082fa845f1182641a93cfbae71984244d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e77d4082fa845f1182641a93cfbae71984244d2"}], "stats": {"total": 81, "additions": 72, "deletions": 9}, "files": [{"sha": "b709f845c81310729b0eaa7120b4ec6505b24d40", "filename": "gcc/c-family/c-cppbuiltin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567329fdd9d65a1e6254206fefff89fa151ba7f3/gcc%2Fc-family%2Fc-cppbuiltin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567329fdd9d65a1e6254206fefff89fa151ba7f3/gcc%2Fc-family%2Fc-cppbuiltin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.cc?ref=567329fdd9d65a1e6254206fefff89fa151ba7f3", "patch": "@@ -1112,7 +1112,7 @@ c_cpp_builtins (cpp_reader *pfile)\n       if (flag_threadsafe_statics)\n \tcpp_define (pfile, \"__cpp_threadsafe_static_init=200806L\");\n       if (flag_char8_t)\n-        cpp_define (pfile, \"__cpp_char8_t=201811L\");\n+\tcpp_define (pfile, \"__cpp_char8_t=202207L\");\n #ifndef THREAD_MODEL_SPEC\n       /* Targets that define THREAD_MODEL_SPEC need to define\n \t __STDCPP_THREADS__ in their config/XXX/XXX-c.c themselves.  */"}, {"sha": "739097a97342e5ad25e9579d79b7eef93cf84767", "filename": "gcc/cp/typeck2.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567329fdd9d65a1e6254206fefff89fa151ba7f3/gcc%2Fcp%2Ftypeck2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567329fdd9d65a1e6254206fefff89fa151ba7f3/gcc%2Fcp%2Ftypeck2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.cc?ref=567329fdd9d65a1e6254206fefff89fa151ba7f3", "patch": "@@ -1118,6 +1118,15 @@ array_string_literal_compatible_p (tree type, tree init)\n   if (ordinary_char_type_p (to_char_type)\n       && ordinary_char_type_p (from_char_type))\n     return true;\n+\n+  /* P2513 (C++20/C++23): \"an array of char or unsigned char may\n+     be initialized by a UTF-8 string literal, or by such a string\n+     literal enclosed in braces.\"  */\n+  if (from_char_type == char8_type_node\n+      && (to_char_type == char_type_node\n+\t  || to_char_type == unsigned_char_type_node))\n+    return true;\n+\n   return false;\n }\n "}, {"sha": "0537e1d24b5569812618e365d0c3dc73530718a7", "filename": "gcc/testsuite/g++.dg/cpp23/feat-cxx2b.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567329fdd9d65a1e6254206fefff89fa151ba7f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Ffeat-cxx2b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567329fdd9d65a1e6254206fefff89fa151ba7f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Ffeat-cxx2b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Ffeat-cxx2b.C?ref=567329fdd9d65a1e6254206fefff89fa151ba7f3", "patch": "@@ -504,8 +504,8 @@\n \n #ifndef __cpp_char8_t\n #  error \"__cpp_char8_t\"\n-#elif __cpp_char8_t != 201811\n-#  error \"__cpp_char8_t != 201811\"\n+#elif __cpp_char8_t != 202207\n+#  error \"__cpp_char8_t != 202207\"\n #endif\n \n #ifndef __cpp_designated_initializers"}, {"sha": "071a718c4d04343b4b4bba940853758e11a6f11f", "filename": "gcc/testsuite/g++.dg/cpp2a/char8_t3.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567329fdd9d65a1e6254206fefff89fa151ba7f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fchar8_t3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567329fdd9d65a1e6254206fefff89fa151ba7f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fchar8_t3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fchar8_t3.C?ref=567329fdd9d65a1e6254206fefff89fa151ba7f3", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/106656 - P2513 - char8_t Compatibility and Portability Fixes\n+// { dg-do compile { target c++20 } }\n+\n+const char *p1 = u8\"\"; // { dg-error \"invalid conversion\" }\n+const unsigned char *p2 = u8\"\"; // { dg-error \"invalid conversion\" }\n+const signed char *p3 = u8\"\"; // { dg-error \"invalid conversion\" }\n+const char *p4 = { u8\"\" }; // { dg-error \"invalid conversion\" }\n+const unsigned char *p5 = { u8\"\" }; // { dg-error \"invalid conversion\" }\n+const signed char *p6 = { u8\"\" }; // { dg-error \"invalid conversion\" }\n+const char *p7 = static_cast<const char *>(u8\"\"); // { dg-error \"invalid\" }\n+const char a1[] = u8\"text\";\n+const unsigned char a2[] = u8\"\";\n+const signed char a3[] = u8\"\"; // { dg-error \"cannot initialize array\" }\n+const char a4[] = { u8\"text\" };\n+const unsigned char a5[] = { u8\"\" };\n+const signed char a6[] = { u8\"\" }; // { dg-error \"cannot initialize array\" }\n+\n+const char *\n+resource_id ()\n+{\n+  static const char res_id[] = u8\"\";\n+  return res_id;\n+}\n+\n+const char8_t x[] = \"fail\"; // { dg-error \"cannot initialize array\" }\n+\n+void fn (const char a[]);\n+void\n+g ()\n+{\n+  fn (u8\"z\"); // { dg-error \"invalid conversion\" }\n+}\n+\n+char c = u8'c';\n+unsigned char uc = u8'c';\n+signed char sc = u8'c';\n+char8_t c8 = 'c';"}, {"sha": "c18081b66fb7756f2a7dd406dc293769fccf4711", "filename": "gcc/testsuite/g++.dg/cpp2a/char8_t4.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567329fdd9d65a1e6254206fefff89fa151ba7f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fchar8_t4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567329fdd9d65a1e6254206fefff89fa151ba7f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fchar8_t4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fchar8_t4.C?ref=567329fdd9d65a1e6254206fefff89fa151ba7f3", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/106656 - P2513 - char8_t Compatibility and Portability Fixes\n+// { dg-do compile { target c++20 } }\n+// [diff.cpp20.dcl]\n+\n+struct A {\n+\tchar8_t s[10];\n+};\n+struct B {\n+\tchar s[10];\n+};\n+\n+void f(A);\n+void f(B);\n+\n+int main() {\n+\tf({u8\"\"}); // { dg-error \"ambiguous\" }\n+}"}, {"sha": "02f3a377fd024e899e20a67dcd6ae7c82d9190ec", "filename": "gcc/testsuite/g++.dg/cpp2a/feat-cxx2a.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567329fdd9d65a1e6254206fefff89fa151ba7f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffeat-cxx2a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567329fdd9d65a1e6254206fefff89fa151ba7f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffeat-cxx2a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffeat-cxx2a.C?ref=567329fdd9d65a1e6254206fefff89fa151ba7f3", "patch": "@@ -504,8 +504,8 @@\n \n #ifndef __cpp_char8_t\n #  error \"__cpp_char8_t\"\n-#elif __cpp_char8_t != 201811\n-#  error \"__cpp_char8_t != 201811\"\n+#elif __cpp_char8_t != 202207\n+#  error \"__cpp_char8_t != 202207\"\n #endif\n \n #ifndef __cpp_designated_initializers"}, {"sha": "2d0f9045acfcc0145fbf2be01b90882240027ec3", "filename": "gcc/testsuite/g++.dg/ext/char8_t-feature-test-macro-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567329fdd9d65a1e6254206fefff89fa151ba7f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-feature-test-macro-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567329fdd9d65a1e6254206fefff89fa151ba7f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-feature-test-macro-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-feature-test-macro-2.C?ref=567329fdd9d65a1e6254206fefff89fa151ba7f3", "patch": "@@ -5,6 +5,6 @@\n \n #if !defined(__cpp_char8_t)\n #  error __cpp_char8_t is not defined!\n-#elif __cpp_char8_t != 201811\n-#  error __cpp_char8_t != 201811\n+#elif __cpp_char8_t != 202207\n+#  error __cpp_char8_t != 202207\n #endif"}, {"sha": "02a96ffe5a492448d70bb24c9757f038da2ecf65", "filename": "gcc/testsuite/g++.dg/ext/char8_t-init-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567329fdd9d65a1e6254206fefff89fa151ba7f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-init-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567329fdd9d65a1e6254206fefff89fa151ba7f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-init-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-init-2.C?ref=567329fdd9d65a1e6254206fefff89fa151ba7f3", "patch": "@@ -21,7 +21,7 @@ const char8_t (&rca4)[2] = u8\"x\";\n const char8_t (&rca5)[2] = u\"x\"; // { dg-error \"invalid initialization of reference of type .const char8_t ....... from expression of type .const char16_t ....\" \"char8_t\" }\n \n char ca1[] = \"x\";\n-char ca2[] = u8\"x\"; // { dg-error \"from a string literal with type array of .char8_t.\" \"char8_t\" }\n+char ca2[] = u8\"x\";\n char8_t ca3[] = \"x\"; // { dg-error \"from a string literal with type array of .char.\" \"char8_t\" }\n char8_t ca4[] = u8\"x\";\n char8_t ca5[] = u\"x\"; // { dg-error \"from a string literal with type array of .char16_t.\" \"char8_t\" }\n@@ -30,4 +30,4 @@ signed char sca1[] = \"x\";\n signed char sca2[] = u8\"x\"; // { dg-error \"from a string literal with type array of .char8_t.\" \"char8_t\" }\n \n unsigned char uca1[] = \"x\";\n-unsigned char uca2[] = u8\"x\"; // { dg-error \"from a string literal with type array of .char8_t.\" \"char8_t\" }\n+unsigned char uca2[] = u8\"x\";"}]}