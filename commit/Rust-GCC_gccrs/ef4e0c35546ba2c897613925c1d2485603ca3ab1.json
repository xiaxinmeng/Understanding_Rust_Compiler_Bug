{"sha": "ef4e0c35546ba2c897613925c1d2485603ca3ab1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY0ZTBjMzU1NDZiYTJjODk3NjEzOTI1YzFkMjQ4NTYwM2NhM2FiMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-06-02T20:23:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-06-03T18:06:17Z"}, "message": "c++: Fix VLA in template [PR95232]\n\nIn a non-template, grokdeclarator notices when we build a pointer to a\nvariably-modified type, and inserts a TYPE_DECL to make sure that type gets\ngimplified.  But in a template we can't always recognize a variably-modified\ntype, so we need to deal with it at instantiation time.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95232\n\t* cp-tree.h (predeclare_vla): Declare.\n\t* cp-gimplify.c (predeclare_vla): Handle getting a decl.\n\t* pt.c (tsubst_expr) [DECL_EXPR]: Use it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95232\n\t* g++.dg/ubsan/vla-2.C: New test.", "tree": {"sha": "5d209b6ffdcdb2555a52c17ce15c951e398e332f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d209b6ffdcdb2555a52c17ce15c951e398e332f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef4e0c35546ba2c897613925c1d2485603ca3ab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef4e0c35546ba2c897613925c1d2485603ca3ab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef4e0c35546ba2c897613925c1d2485603ca3ab1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef4e0c35546ba2c897613925c1d2485603ca3ab1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d57c30611b05a89fd265f6c0a74fe829c21cd34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d57c30611b05a89fd265f6c0a74fe829c21cd34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d57c30611b05a89fd265f6c0a74fe829c21cd34"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "e8fbc300fdaa8c8565b33a3610cb6629fa82c885", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4e0c35546ba2c897613925c1d2485603ca3ab1/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4e0c35546ba2c897613925c1d2485603ca3ab1/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=ef4e0c35546ba2c897613925c1d2485603ca3ab1", "patch": "@@ -1185,14 +1185,17 @@ static tree genericize_spaceship (tree expr)\n \n /* If EXPR involves an anonymous VLA type, prepend a DECL_EXPR for that type\n    to trigger gimplify_type_sizes; otherwise a cast to pointer-to-VLA confuses\n-   the middle-end (c++/88256).  */\n+   the middle-end (c++/88256).  If EXPR is a DECL, use add_stmt and return\n+   NULL_TREE; otherwise return a COMPOUND_STMT of the DECL_EXPR and EXPR.  */\n \n-static tree\n+tree\n predeclare_vla (tree expr)\n {\n   tree type = TREE_TYPE (expr);\n   if (type == error_mark_node)\n     return expr;\n+  if (is_typedef_decl (expr))\n+    type = DECL_ORIGINAL_TYPE (expr);\n \n   /* We need to strip pointers for gimplify_type_sizes.  */\n   tree vla = type;\n@@ -1209,8 +1212,16 @@ predeclare_vla (tree expr)\n   DECL_ARTIFICIAL (decl) = 1;\n   TYPE_NAME (vla) = decl;\n   tree dexp = build_stmt (input_location, DECL_EXPR, decl);\n-  expr = build2 (COMPOUND_EXPR, type, dexp, expr);\n-  return expr;\n+  if (DECL_P (expr))\n+    {\n+      add_stmt (dexp);\n+      return NULL_TREE;\n+    }\n+  else\n+    {\n+      expr = build2 (COMPOUND_EXPR, type, dexp, expr);\n+      return expr;\n+    }\n }\n \n /* Perform any pre-gimplification lowering of C++ front end trees to"}, {"sha": "447d1349117b84471d063a904923a4aebcb69ee4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4e0c35546ba2c897613925c1d2485603ca3ab1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4e0c35546ba2c897613925c1d2485603ca3ab1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ef4e0c35546ba2c897613925c1d2485603ca3ab1", "patch": "@@ -7794,6 +7794,7 @@ extern tree cp_fold_maybe_rvalue\t\t(tree, bool);\n extern tree cp_fold_rvalue\t\t\t(tree);\n extern tree cp_fully_fold\t\t\t(tree);\n extern tree cp_fully_fold_init\t\t\t(tree);\n+extern tree predeclare_vla\t\t\t(tree);\n extern void clear_fold_cache\t\t\t(void);\n extern tree lookup_hotness_attribute\t\t(tree);\n extern tree process_stmt_hotness_attribute\t(tree, location_t);"}, {"sha": "38a771b8e6fb5347fab972e51521c21bd0340eec", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4e0c35546ba2c897613925c1d2485603ca3ab1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4e0c35546ba2c897613925c1d2485603ca3ab1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ef4e0c35546ba2c897613925c1d2485603ca3ab1", "patch": "@@ -17990,6 +17990,11 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t\t    if (ndecl != error_mark_node)\n \t\t      cp_maybe_mangle_decomp (ndecl, first, cnt);\n \n+\t\t    /* In a non-template function, VLA type declarations are\n+\t\t       handled in grokdeclarator; for templates, handle them\n+\t\t       now.  */\n+\t\t    predeclare_vla (decl);\n+\n \t\t    cp_finish_decl (decl, init, const_init, NULL_TREE,\n \t\t\t\t    constinit_p ? LOOKUP_CONSTINIT : 0);\n "}, {"sha": "342d30bfeaca0b633923c89aef0340a114fb8ff3", "filename": "gcc/testsuite/g++.dg/ubsan/vla-2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4e0c35546ba2c897613925c1d2485603ca3ab1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvla-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4e0c35546ba2c897613925c1d2485603ca3ab1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvla-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvla-2.C?ref=ef4e0c35546ba2c897613925c1d2485603ca3ab1", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/95232\n+// { dg-additional-options \"-Wno-vla -ftrapv -fnon-call-exceptions -O -fsanitize=undefined\" }\n+\n+template <typename T>\n+int tmain(T argc) {\n+  typedef double (*chunk_t)[argc[0][0]];\n+  chunk_t var;\n+  (void)var[0][0];\n+  return 0;\n+}\n+\n+int main (int argc, char **argv) {\n+  return tmain(argv);\n+}"}]}