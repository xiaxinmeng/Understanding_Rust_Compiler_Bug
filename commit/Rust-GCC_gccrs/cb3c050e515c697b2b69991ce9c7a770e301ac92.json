{"sha": "cb3c050e515c697b2b69991ce9c7a770e301ac92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IzYzA1MGU1MTVjNjk3YjJiNjk5OTFjZTljN2E3NzBlMzAxYWM5Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-03-17T02:35:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-03-17T02:35:50Z"}, "message": "re PR c++/54946 (ICE on template parameter from cast char-pointer in C++11 constexpr struct)\n\n\tPR c++/54946\n\t* pt.c (convert_nontype_argument): Handle invalid pointer.\n\nFrom-SVN: r196731", "tree": {"sha": "bedb10e1b691f963066dbf55eb220bb3a023c5c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bedb10e1b691f963066dbf55eb220bb3a023c5c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb3c050e515c697b2b69991ce9c7a770e301ac92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3c050e515c697b2b69991ce9c7a770e301ac92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb3c050e515c697b2b69991ce9c7a770e301ac92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3c050e515c697b2b69991ce9c7a770e301ac92/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e9f3968bbe670a0b54516a29ca9ffb7c79c6cb20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f3968bbe670a0b54516a29ca9ffb7c79c6cb20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9f3968bbe670a0b54516a29ca9ffb7c79c6cb20"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "45c5d2887ab8bf8ec1b013ecb23d1bb40e7059b5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3c050e515c697b2b69991ce9c7a770e301ac92/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3c050e515c697b2b69991ce9c7a770e301ac92/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cb3c050e515c697b2b69991ce9c7a770e301ac92", "patch": "@@ -1,5 +1,8 @@\n 2013-03-16  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/54946\n+\t* pt.c (convert_nontype_argument): Handle invalid pointer.\n+\n \t* parser.c (cp_parser_lambda_expression): Use nreverse.\n \n \tPR c++/56447"}, {"sha": "c07ed3244cf4f28324eb18f1339143be067eb96d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3c050e515c697b2b69991ce9c7a770e301ac92/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3c050e515c697b2b69991ce9c7a770e301ac92/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=cb3c050e515c697b2b69991ce9c7a770e301ac92", "patch": "@@ -5553,15 +5553,19 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n      qualification conversion. Let's strip everything.  */\n   else if (TREE_CODE (expr) == NOP_EXPR && TYPE_PTROBV_P (type))\n     {\n-      STRIP_NOPS (expr);\n-      gcc_assert (TREE_CODE (expr) == ADDR_EXPR);\n-      gcc_assert (TREE_CODE (TREE_TYPE (expr)) == POINTER_TYPE);\n-      /* Skip the ADDR_EXPR only if it is part of the decay for\n-\t an array. Otherwise, it is part of the original argument\n-\t in the source code.  */\n-      if (TREE_CODE (TREE_TYPE (TREE_OPERAND (expr, 0))) == ARRAY_TYPE)\n-\texpr = TREE_OPERAND (expr, 0);\n-      expr_type = TREE_TYPE (expr);\n+      tree probe = expr;\n+      STRIP_NOPS (probe);\n+      if (TREE_CODE (probe) == ADDR_EXPR\n+\t  && TREE_CODE (TREE_TYPE (probe)) == POINTER_TYPE)\n+\t{\n+\t  /* Skip the ADDR_EXPR only if it is part of the decay for\n+\t     an array. Otherwise, it is part of the original argument\n+\t     in the source code.  */\n+\t  if (TREE_CODE (TREE_TYPE (TREE_OPERAND (probe, 0))) == ARRAY_TYPE)\n+\t    probe = TREE_OPERAND (probe, 0);\n+\t  expr = probe;\n+\t  expr_type = TREE_TYPE (expr);\n+\t}\n     }\n \n   /* [temp.arg.nontype]/5, bullet 1\n@@ -5640,6 +5644,13 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t\t     expr, expr);\n \t      return NULL_TREE;\n \t    }\n+\t  if (POINTER_TYPE_P (expr_type))\n+\t    {\n+\t      error (\"%qE is not a valid template argument for %qT\"\n+\t\t     \"because it is not the address of a variable\",\n+\t\t     expr, type);\n+\t      return NULL_TREE;\n+\t    }\n \t  /* Other values, like integer constants, might be valid\n \t     non-type arguments of some other type.  */\n \t  return error_mark_node;"}, {"sha": "aa80658036df67c9aaf11ccd93ae01211f63de94", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-template5.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3c050e515c697b2b69991ce9c7a770e301ac92/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-template5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3c050e515c697b2b69991ce9c7a770e301ac92/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-template5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-template5.C?ref=cb3c050e515c697b2b69991ce9c7a770e301ac92", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/54946\n+// { dg-do compile { target c++11 } }\n+\n+template<const char*s>    static void testfunc();\n+constexpr struct testtype { const char* str; } test = { \"abc\"} ;\n+void (*functionpointer)() = testfunc<(const char*) test.str>; // { dg-error \"\" }"}]}