{"sha": "f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUzNmNkOTVmYjVjZmJmYTU0ODA5NTE0ZmQ4OWRjNTVkNmI4ZTFhNA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-08-02T21:54:04Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-08-02T21:54:04Z"}, "message": "Makefile.in: Rebuilt.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (libgcj_la_SOURCES): Added posix.cc.\n\t* java/net/natPlainSocketImpl.cc: Include posix.h.\n\t(accept): Use _Jv_select.\n\t* java/net/natPlainDatagramSocketImpl.cc: Include posix.h.\n\t(receive): Use _Jv_select.\n\t* java/io/natFileDescriptorPosix.cc: Include posix.h.\n\t(available): Use _Jv_select.\n\t* java/lang/natSystem.cc: Include posix.h.\n\t(currentTimeMillis): Use _Jv_gettimeofday.\n\t* include/posix.h: New file.\n\t* posix.cc: New file.\n\nFrom-SVN: r35435", "tree": {"sha": "03fe690813ad84c550ddb18c4058221d6290e55a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03fe690813ad84c550ddb18c4058221d6290e55a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/comments", "author": null, "committer": null, "parents": [{"sha": "2d579116788c2841ace42c93fe35bef5cf263543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d579116788c2841ace42c93fe35bef5cf263543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d579116788c2841ace42c93fe35bef5cf263543"}], "stats": {"total": 215, "additions": 159, "deletions": 56}, "files": [{"sha": "6813243db35d4f5d17b0b82f93be6ab88d1b118f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4", "patch": "@@ -1,5 +1,18 @@\n 2000-08-02  Tom Tromey  <tromey@cygnus.com>\n \n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (libgcj_la_SOURCES): Added posix.cc.\n+\t* java/net/natPlainSocketImpl.cc: Include posix.h.\n+\t(accept): Use _Jv_select.\n+\t* java/net/natPlainDatagramSocketImpl.cc: Include posix.h.\n+\t(receive): Use _Jv_select.\n+\t* java/io/natFileDescriptorPosix.cc: Include posix.h.\n+\t(available): Use _Jv_select.\n+\t* java/lang/natSystem.cc: Include posix.h.\n+\t(currentTimeMillis): Use _Jv_gettimeofday.\n+\t* include/posix.h: New file.\n+\t* posix.cc: New file.\n+\n \t* scripts/encodings.pl: New file.\n \t* Makefile.in: Rebuilt.\n \t* Makefile.am (convert_source_files): Added IOConverter.java."}, {"sha": "6bd8fcce18c9db4557f5282642c87c2a8b83c3df", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4", "patch": "@@ -118,7 +118,7 @@ javao_files = $(java_source_files:.java=.lo) \\\n ## Extract the libffi object file names.\n libffi_files = `$(AR) t ../libffi/.libs/libffi.a 2>/dev/null | sed 's/\\.o/\\.lo/g' | sed 's/^/..\\/libffi\\//g'`\n \n-libgcj_la_SOURCES = prims.cc jni.cc exception.cc \\\n+libgcj_la_SOURCES = prims.cc posix.cc jni.cc exception.cc \\\n \tresolve.cc defineclass.cc interpret.cc name-finder.cc\n EXTRA_libgcj_la_SOURCES = boehm.cc nogc.cc posix-threads.cc no-threads.cc \\\n \t$(c_source_files) $(java_source_files) $(built_java_source_files)"}, {"sha": "f27de200cf667d7e701c20f4f31367d120935cd3", "filename": "libjava/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4", "patch": "@@ -193,7 +193,7 @@ javao_files = $(java_source_files:.java=.lo) \\\n \n libffi_files = `$(AR) t ../libffi/.libs/libffi.a 2>/dev/null | sed 's/\\.o/\\.lo/g' | sed 's/^/..\\/libffi\\//g'`\n \n-libgcj_la_SOURCES = prims.cc jni.cc exception.cc \\\n+libgcj_la_SOURCES = prims.cc posix.cc jni.cc exception.cc \\\n \tresolve.cc defineclass.cc interpret.cc name-finder.cc\n \n EXTRA_libgcj_la_SOURCES = boehm.cc nogc.cc posix-threads.cc no-threads.cc \\\n@@ -973,7 +973,7 @@ libgcjdata_a_LIBADD =\n @NEEDS_DATA_START_TRUE@libgcjdata_a_OBJECTS =  libgcjdata.o\n LTLIBRARIES =  $(toolexeclib_LTLIBRARIES)\n \n-libgcj_la_OBJECTS =  prims.lo jni.lo exception.lo resolve.lo \\\n+libgcj_la_OBJECTS =  prims.lo posix.lo jni.lo exception.lo resolve.lo \\\n defineclass.lo interpret.lo name-finder.lo\n @NATIVE_TRUE@bin_PROGRAMS =  jv-convert$(EXEEXT) gij$(EXEEXT)\n @NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS =  \\\n@@ -1422,7 +1422,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/util/zip/ZipInputStream.P \\\n .deps/java/util/zip/ZipOutputStream.P .deps/jni.P .deps/libgcjdata.P \\\n .deps/name-finder.P .deps/no-threads.P .deps/nogc.P \\\n-.deps/posix-threads.P .deps/prims.P .deps/resolve.P\n+.deps/posix-threads.P .deps/posix.P .deps/prims.P .deps/resolve.P\n SOURCES = $(libgcjdata_a_SOURCES) $(libgcj_la_SOURCES) $(EXTRA_libgcj_la_SOURCES) $(jv_convert_SOURCES) $(EXTRA_jv_convert_SOURCES) $(gij_SOURCES) $(gen_from_JIS_SOURCES) $(EXTRA_gen_from_JIS_SOURCES)\n OBJECTS = $(libgcjdata_a_OBJECTS) $(libgcj_la_OBJECTS) $(jv_convert_OBJECTS) $(gij_OBJECTS) $(gen_from_JIS_OBJECTS)\n "}, {"sha": "278f7eb773b4fbdbdf004ad81b92b22f5a034f29", "filename": "libjava/include/posix.h", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/libjava%2Finclude%2Fposix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/libjava%2Finclude%2Fposix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fposix.h?ref=f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4", "patch": "@@ -0,0 +1,27 @@\n+// posix.h -- Helper functions for POSIX-flavored OSs.\n+\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <time.h>\n+#include <sys/types.h>\n+\n+#ifdef HAVE_SYS_TIME_H\n+#include <sys/time.h>\n+#endif\n+\n+#ifdef HAVE_SYS_SELECT_H\n+#include <sys/select.h>\n+#endif\n+\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+\n+extern int _Jv_select (int n, fd_set *, fd_set *, fd_set *, struct timeval *);\n+extern void _Jv_gettimeofday (struct timeval *);"}, {"sha": "059eeb965645e03f520892a4f54d34c71374ef58", "filename": "libjava/java/io/natFileDescriptorPosix.cc", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc?ref=f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4", "patch": "@@ -10,16 +10,11 @@ details.  */\n \n #include <config.h>\n \n-#ifdef HAVE_UNISTD_H\n-#include <unistd.h>\n-#endif\n+#include \"posix.h\"\n+\n #include <errno.h>\n #include <stdio.h>\n #include <string.h>\n-#ifdef HAVE_SYS_TIME_H\n-#include <sys/time.h>\n-#endif\n-#include <sys/types.h>\n #include <sys/stat.h>\n #include <sys/param.h>\n #include <fcntl.h>\n@@ -309,7 +304,7 @@ java::io::FileDescriptor::available (void)\n       struct timeval tv;\n       tv.tv_sec = 0;\n       tv.tv_usec = 0;\n-      r = ::select (fd + 1, &rd, NULL, NULL, &tv);\n+      r = _Jv_select (fd + 1, &rd, NULL, NULL, &tv);\n       if (r == -1)\n \tgoto posix_error;\n       num = r == 0 ? 0 : 1;"}, {"sha": "2d82c896a07efc5fda143295d3c718016c66a3d1", "filename": "libjava/java/lang/natSystem.cc", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/libjava%2Fjava%2Flang%2FnatSystem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/libjava%2Fjava%2Flang%2FnatSystem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatSystem.cc?ref=f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4", "patch": "@@ -11,16 +11,9 @@ details.  */\n #include <config.h>\n \n #include <string.h>\n-#include <time.h>\n #include <stdlib.h>\n \n-#ifdef HAVE_UNISTD_H\n-#include <unistd.h>\n-#endif\n-\n-#ifdef HAVE_SYS_TIME_H\n-#include <sys/time.h>\n-#endif\n+#include \"posix.h\"\n \n #ifdef HAVE_PWD_H\n #include <pwd.h>\n@@ -48,10 +41,6 @@ extern java::lang::Class SystemClass;\n \n \f\n \n-#if defined (ECOS)\n-extern \"C\" unsigned long long _clock (void);\n-#endif\n-\n void\n java::lang::System::setErr (java::io::PrintStream *newErr)\n {\n@@ -152,24 +141,9 @@ java::lang::System::currentTimeMillis (void)\n {\n   jlong r;\n \n-#if defined (HAVE_GETTIMEOFDAY)\n   struct timeval tv;\n-  gettimeofday (&tv, NULL);\n-  r = (jlong) tv.tv_sec * 1000 + tv.tv_usec / 1000;\n-#elif defined (HAVE_TIME)\n-  r = time (NULL) * 1000;\n-#elif defined (HAVE_FTIME)\n-  struct timeb t;\n-  ftime (&t);\n-  r = t.time * 1000 + t.millitm;\n-#elif defined (ECOS)\n-  r = _clock();\n-#else\n-  // In the absence of any function, time remains forever fixed.\n-  r = 23;\n-#endif\n-\n-  return r;\n+  _Jv_gettimeofday (&tv);\n+  return (jlong) tv.tv_sec * 1000 + tv.tv_usec / 1000;\n }\n \n jint"}, {"sha": "fe83b1053f6c0db26a6b44176d07ed6d8d7ee28e", "filename": "libjava/java/net/natPlainDatagramSocketImpl.cc", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc?ref=f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4", "patch": "@@ -17,16 +17,10 @@ details.  */\n #define ENOPROTOOPT 109\n #endif\n #else /* USE_WINSOCK */\n-#ifdef HAVE_SYS_TYPES_H\n-#include <sys/types.h>\n-#endif\n+#include \"posix.h\"\n #ifdef HAVE_SYS_SOCKET_H\n #include <sys/socket.h>\n #endif\n-#include <sys/time.h>\n-#ifdef HAVE_SYS_SELECT_H\n-#include <sys/select.h>\n-#endif\n #ifdef HAVE_NETINET_IN_H\n #include <netinet/in.h>\n #endif\n@@ -314,7 +308,7 @@ java::net::PlainDatagramSocketImpl::receive (java::net::DatagramPacket *p)\n       tv.tv_sec = timeout / 1000;\n       tv.tv_usec = (timeout % 1000) * 1000;\n       int retval;\n-      if ((retval = select (fnum + 1, &rset, NULL, NULL, &tv)) < 0)\n+      if ((retval = _Jv_select (fnum + 1, &rset, NULL, NULL, &tv)) < 0)\n \tgoto error;\n       else if (retval == 0)\n \tJvThrow (new java::io::InterruptedIOException ());"}, {"sha": "18fd74ba447e03bb995b5552c2beba91b22a2a82", "filename": "libjava/java/net/natPlainSocketImpl.cc", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc?ref=f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -19,12 +19,8 @@ details.  */\n #define ENOPROTOOPT 109\n #endif\n #else /* USE_WINSOCK */\n-#include <sys/types.h>\n+#include \"posix.h\"\n #include <sys/socket.h>\n-#include <sys/time.h>\n-#ifdef HAVE_SYS_SELECT_H\n-#include <sys/select.h>\n-#endif\n #include <netinet/in.h>\n #include <netinet/tcp.h>\n #include <errno.h>\n@@ -249,7 +245,7 @@ java::net::PlainSocketImpl::accept (java::net::PlainSocketImpl *s)\n       tv.tv_sec = timeout / 1000;\n       tv.tv_usec = (timeout % 1000) * 1000;\n       int retval;\n-      if ((retval = select (fnum + 1, &rset, NULL, NULL, &tv)) < 0)\n+      if ((retval = _Jv_select (fnum + 1, &rset, NULL, NULL, &tv)) < 0)\n \tgoto error;\n       else if (retval == 0)\n \tJvThrow (new java::io::InterruptedIOException ("}, {"sha": "d470a644da3c9d92c31a606f65a3c9baf59d4863", "filename": "libjava/posix.cc", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/libjava%2Fposix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4/libjava%2Fposix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fposix.cc?ref=f536cd95fb5cfbfa54809514fd89dc55d6b8e1a4", "patch": "@@ -0,0 +1,104 @@\n+// posix.cc -- Helper functions for POSIX-flavored OSs.\n+\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+\n+#include \"posix.h\"\n+\n+#include <errno.h>\n+\n+#if defined (ECOS)\n+extern \"C\" unsigned long long _clock (void);\n+#endif\n+\n+// gettimeofday implementation.\n+void\n+_Jv_gettimeofday (struct timeval *tv)\n+{\n+#if defined (HAVE_GETTIMEOFDAY)\n+  gettimeofday (tv, NULL);\n+#elif defined (HAVE_TIME)\n+  tv->tv_sec = time (NULL);\n+  tv->tv_usec = 0;\n+#elif defined (HAVE_FTIME)\n+  struct timeb t;\n+  ftime (&t);\n+  tv->tv_sec = t.time;\n+  tv->tv_usec = t.millitm * 1000;\n+#elif defined (ECOS)\n+  // FIXME.\n+  tv->tv_sec = _clock () / 1000;\n+  tv->tv_usec = 0;\n+#else\n+  // In the absence of any function, time remains forever fixed.\n+  tv->tv_sec = 23;\n+  tv->tv_usec = 0;\n+#endif\n+}\n+\n+// A wrapper for select() which ignores EINTR.\n+int\n+_Jv_select (int n, fd_set *readfds, fd_set  *writefds,\n+\t    fd_set *exceptfds, struct timeval *timeout)\n+{\n+#ifdef HAVE_SELECT\n+  // If we have a timeout, compute the absolute ending time.\n+  struct timeval end, delay;\n+  if (timeout)\n+    {\n+      _Jv_gettimeofday (&end);\n+      end.tv_usec += timeout->tv_usec;\n+      if (end.tv_usec >= 1000000)\n+\t{\n+\t  ++end.tv_sec;\n+\t  end.tv_usec -= 1000000;\n+\t}\n+      end.tv_sec += timeout->tv_sec;\n+      delay = *timeout;\n+    }\n+  else\n+    {\n+      // Placate compiler.\n+      delay.tv_sec = delay.tv_usec = 0;\n+    }\n+\n+  while (1)\n+    {\n+      int r = select (n, readfds, writefds, exceptfds,\n+\t\t      timeout ? &delay : NULL);\n+      if (r != -1 || errno != EINTR)\n+\treturn r;\n+\n+      struct timeval after;\n+      if (timeout)\n+\t{\n+\t  _Jv_gettimeofday (&after);\n+\t  // Now compute new timeout argument.\n+\t  delay.tv_usec = end.tv_usec - after.tv_usec;\n+\t  delay.tv_sec = end.tv_sec - after.tv_sec;\n+\t  if (delay.tv_usec < 0)\n+\t    {\n+\t      --delay.tv_sec;\n+\t      delay.tv_usec += 1000000;\n+\t    }\n+\t  if (delay.tv_sec < 0)\n+\t    {\n+\t      // We assume that the user wants a valid select() call\n+\t      // more than precise timing.  So if we get a series of\n+\t      // EINTR we just keep trying with delay 0 until we get a\n+\t      // valid result.\n+\t      delay.tv_sec = 0;\n+\t    }\n+\t}\n+    }\n+#else /* HAVE_SELECT */\n+  return 0;\n+#endif\n+}"}]}