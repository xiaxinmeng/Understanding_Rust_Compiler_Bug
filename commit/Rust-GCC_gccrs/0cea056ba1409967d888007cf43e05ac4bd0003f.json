{"sha": "0cea056ba1409967d888007cf43e05ac4bd0003f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNlYTA1NmJhMTQwOTk2N2Q4ODgwMDdjZjQzZTA1YWM0YmQwMDAzZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-07-07T17:57:30Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-07-07T17:57:30Z"}, "message": "rtl.h (emit_line_note): Take a location_t.\n\n\t* rtl.h (emit_line_note): Take a location_t.\n\t(emit_line_note_force): Remove.\n\t(set_file_and_line_for_statement): Take a location_t.\n\t* tree.g (emit_line_note): Take a location_t.\n\t* emit-rtl.c (emit_line_note): Take a location_t.\n\t(emit_line_note_force): Remove.\n\t* function.c (init_function_start): Adjust emit_line_note call.\n\t(expand_function_end): Use force_next_line_note, not\n\temit_line_note_force.\n\t* c-parse.in (maybe_type_qual): Adjust emit_line_note calls.\n\t* c-semantics.c (genrtl_do_pushlevel, genrtl_goto_stmt,\n\tgenrtl_expr_stmt_value, genrtl_decl_stmt, genrtl_if_stmt,\n\tgenrtl_while_stmt, genrtl_do_stmt_1, genrtl_return_stmt,\n\tgenrtl_for_stmt, genrtl_break_stmt, genrtl_continue_stmt,\n\tgenrtl_continue_stmt, genrtl_switch_stmt,\n\tgenrtl_asm_stmt): Likewise.\n\t* expr.c (expand_expr): Likewise.\n\t* integrate.c (expand_inline_function): Likewise.\n\t* stmt.c (set_file_and_line_for_stmt): Take a location_t.\n\t(expand_decl_init): Adjust emit_line_note call.\n\n\t* ada/trans.c (build_unit_elab, set_lineno): Adjust emit_line_note\n\tcalls.\n\n\t* cp/semantics.c: (genrtl_try_block) Adjust emit_line_note\n\tcalls.\n\n\t* f/com.c (bison_rule_pushlevel_, bison_rule_compstmt_): Adjust\n\temit_line_note calls.\n\t* f/ste.c (ffeste_emit_line_note_): Likewise.\n\n\t* java/expr.c (expand_byte_code):\n\n\t* treelang/treetree.c (tree_code_if_start, tree_code_if_else,\n\ttree_code_if_end, tree_code_create_function_initial,\n\ttree_code_create_function_wrapup, tree_code_generate_return,\n\ttree_code_output_expression_statement): Adjust emit_line_note\n\tcalls.\n\nFrom-SVN: r69047", "tree": {"sha": "193bbe1a5e7e548cfde12119b9718bb33a509382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/193bbe1a5e7e548cfde12119b9718bb33a509382"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cea056ba1409967d888007cf43e05ac4bd0003f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cea056ba1409967d888007cf43e05ac4bd0003f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cea056ba1409967d888007cf43e05ac4bd0003f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cea056ba1409967d888007cf43e05ac4bd0003f/comments", "author": null, "committer": null, "parents": [{"sha": "8eb910fc139d3d9ecde0dbac534f48e89ab89659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eb910fc139d3d9ecde0dbac534f48e89ab89659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eb910fc139d3d9ecde0dbac534f48e89ab89659"}], "stats": {"total": 196, "additions": 115, "deletions": 81}, "files": [{"sha": "f394dc3bed7f49f111406081932af4f939302c67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -1,3 +1,26 @@\n+2003-07-07  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* rtl.h (emit_line_note): Take a location_t.\n+\t(emit_line_note_force): Remove.\n+\t(set_file_and_line_for_statement): Take a location_t.\n+\t* tree.g (emit_line_note): Take a location_t.\n+\t* emit-rtl.c (emit_line_note): Take a location_t.\n+\t(emit_line_note_force): Remove.\n+\t* function.c (init_function_start): Adjust emit_line_note call.\n+\t(expand_function_end): Use force_next_line_note, not\n+\temit_line_note_force.\n+\t* c-parse.in (maybe_type_qual): Adjust emit_line_note calls.\n+\t* c-semantics.c (genrtl_do_pushlevel, genrtl_goto_stmt,\n+\tgenrtl_expr_stmt_value, genrtl_decl_stmt, genrtl_if_stmt,\n+\tgenrtl_while_stmt, genrtl_do_stmt_1, genrtl_return_stmt,\n+\tgenrtl_for_stmt, genrtl_break_stmt, genrtl_continue_stmt,\n+\tgenrtl_continue_stmt, genrtl_switch_stmt,\n+\tgenrtl_asm_stmt): Likewise.\n+\t* expr.c (expand_expr): Likewise.\n+\t* integrate.c (expand_inline_function): Likewise.\n+\t* stmt.c (set_file_and_line_for_stmt): Take a location_t.\n+\t(expand_decl_init): Adjust emit_line_note call.\n+\n 2003-07-07  Dale Johannesen  <dalej@apple.com>\n \n         * config/rs6000/darwin-tramp.asm:  Fix trampolines.  PR 10900."}, {"sha": "cc2d36df7e01cabc61254a5dabde6f76a5efe705", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -1,3 +1,8 @@\n+2003-07-07  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* trans.c (build_unit_elab, set_lineno): Adjust emit_line_note\n+\tcalls.\n+\n 2003-07-06  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* misc.c (gnat_handle_option): Don't handle filenames."}, {"sha": "8e6f9ac4e497c93ceb64154013cb8e358e427d42", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -5341,7 +5341,7 @@ build_unit_elab (gnat_unit, body_p, gnu_elab_list)\n \t    && TYPE_IS_PADDING_P (TREE_TYPE (lhs)))\n \t  lhs = convert (TREE_TYPE (TYPE_FIELDS (TREE_TYPE (lhs))), lhs);\n \n-\temit_line_note (input_filename, input_line);\n+\temit_line_note (input_location);\n \texpand_expr_stmt (build_binary_op (MODIFY_EXPR, NULL_TREE,\n \t\t\t\t\t   TREE_PURPOSE (gnu_elab_list),\n \t\t\t\t\t   TREE_VALUE (gnu_elab_list)));\n@@ -5407,7 +5407,7 @@ set_lineno (gnat_node, write_note_p)\n   input_line = Get_Logical_Line_Number (source_location);\n \n   if (write_note_p)\n-    emit_line_note (input_filename, input_line);\n+    emit_line_note (input_location);\n }\n \f\n /* Post an error message.  MSG is the error message, properly annotated."}, {"sha": "787167c155d628f7b53161bd035bef42277d4179", "filename": "gcc/c-parse.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -2444,10 +2444,10 @@ label:\t  CASE expr_no_commas ':'\n \n maybe_type_qual:\n \t/* empty */\n-\t\t{ emit_line_note (input_filename, input_line);\n+\t\t{ emit_line_note (input_location);\n \t\t  $$ = NULL_TREE; }\n \t| TYPE_QUAL\n-\t\t{ emit_line_note (input_filename, input_line); }\n+\t\t{ emit_line_note (input_location); }\n \t;\n \n xexpr:"}, {"sha": "1481e1db706255a5eabc13046866f11c948b8a54", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -300,7 +300,7 @@ emit_local_var (tree decl)\n void\n genrtl_do_pushlevel (void)\n {\n-  emit_line_note (input_filename, input_line);\n+  emit_line_note (input_location);\n   clear_last_expr ();\n }\n \n@@ -317,7 +317,7 @@ genrtl_goto_stmt (tree destination)\n   if (TREE_CODE (destination) == LABEL_DECL)\n     TREE_USED (destination) = 1;\n \n-  emit_line_note (input_filename, input_line);\n+  emit_line_note (input_location);\n \n   if (TREE_CODE (destination) == LABEL_DECL)\n     {\n@@ -350,7 +350,7 @@ genrtl_expr_stmt_value (tree expr, int want_value, int maybe_last)\n {\n   if (expr != NULL_TREE)\n     {\n-      emit_line_note (input_filename, input_line);\n+      emit_line_note (input_location);\n \n       if (stmts_are_full_exprs_p ())\n \texpand_start_target_temps ();\n@@ -369,7 +369,7 @@ void\n genrtl_decl_stmt (tree t)\n {\n   tree decl;\n-  emit_line_note (input_filename, input_line);\n+  emit_line_note (input_location);\n   decl = DECL_STMT_DECL (t);\n   /* If this is a declaration for an automatic local\n      variable, initialize it.  Note that we might also see a\n@@ -405,7 +405,7 @@ genrtl_if_stmt (tree t)\n   tree cond;\n   genrtl_do_pushlevel ();\n   cond = expand_cond (IF_COND (t));\n-  emit_line_note (input_filename, input_line);\n+  emit_line_note (input_location);\n   expand_start_cond (cond, 0);\n   if (THEN_CLAUSE (t))\n     {\n@@ -435,14 +435,14 @@ genrtl_while_stmt (tree t)\n   tree cond = WHILE_COND (t);\n \n   emit_nop ();\n-  emit_line_note (input_filename, input_line);\n+  emit_line_note (input_location);\n   expand_start_loop (1);\n   genrtl_do_pushlevel ();\n \n   if (cond && !integer_nonzerop (cond))\n     {\n       cond = expand_cond (cond);\n-      emit_line_note (input_filename, input_line);\n+      emit_line_note (input_location);\n       expand_exit_loop_top_cond (0, cond);\n       genrtl_do_pushlevel ();\n     }\n@@ -472,25 +472,25 @@ genrtl_do_stmt_1 (tree cond, tree body)\n   else if (integer_nonzerop (cond))\n     {\n       emit_nop ();\n-      emit_line_note (input_filename, input_line);\n+      emit_line_note (input_location);\n       expand_start_loop (1);\n \n       expand_stmt (body);\n \n-      emit_line_note (input_filename, input_line);\n+      emit_line_note (input_location);\n       expand_end_loop ();\n     }\n   else\n     {\n       emit_nop ();\n-      emit_line_note (input_filename, input_line);\n+      emit_line_note (input_location);\n       expand_start_loop_continue_elsewhere (1);\n \n       expand_stmt (body);\n \n       expand_loop_continue_here ();\n       cond = expand_cond (cond);\n-      emit_line_note (input_filename, input_line);\n+      emit_line_note (input_location);\n       expand_exit_loop_if_false (0, cond);\n       expand_end_loop ();\n     }\n@@ -521,7 +521,7 @@ genrtl_return_stmt (tree stmt)\n \n   expr = RETURN_STMT_EXPR (stmt);\n \n-  emit_line_note (input_filename, input_line);\n+  emit_line_note (input_location);\n   if (!expr)\n     expand_null_return ();\n   else\n@@ -547,7 +547,7 @@ genrtl_for_stmt (tree t)\n \n   /* Expand the initialization.  */\n   emit_nop ();\n-  emit_line_note (input_filename, input_line);\n+  emit_line_note (input_location);\n   if (FOR_EXPR (t))\n     expand_start_loop_continue_elsewhere (1);\n   else\n@@ -562,7 +562,7 @@ genrtl_for_stmt (tree t)\n   if (cond && !integer_nonzerop (cond))\n     {\n       cond = expand_cond (cond);\n-      emit_line_note (input_filename, input_line);\n+      emit_line_note (input_location);\n       expand_exit_loop_top_cond (0, cond);\n       genrtl_do_pushlevel ();\n     }\n@@ -572,7 +572,7 @@ genrtl_for_stmt (tree t)\n \n   /* Expand the increment expression.  */\n   input_location = saved_loc;\n-  emit_line_note (input_filename, input_line);\n+  emit_line_note (input_location);\n   if (FOR_EXPR (t))\n     {\n       expand_loop_continue_here ();\n@@ -594,7 +594,7 @@ build_break_stmt (void)\n void\n genrtl_break_stmt (void)\n {\n-  emit_line_note (input_filename, input_line);\n+  emit_line_note (input_location);\n   if ( ! expand_exit_something ())\n     error (\"break statement not within loop or switch\");\n }\n@@ -612,7 +612,7 @@ build_continue_stmt (void)\n void\n genrtl_continue_stmt (void)\n {\n-  emit_line_note (input_filename, input_line);\n+  emit_line_note (input_location);\n   if (! expand_continue_loop (0))\n     error (\"continue statement not within a loop\");\n }\n@@ -674,7 +674,7 @@ genrtl_switch_stmt (tree t)\n        crash.  */\n     cond = boolean_false_node;\n \n-  emit_line_note (input_filename, input_line);\n+  emit_line_note (input_location);\n   expand_start_case (1, cond, TREE_TYPE (cond), \"switch statement\");\n   expand_stmt (expand_unreachable_stmt (SWITCH_BODY (t), warn_notreached));\n   expand_end_case_type (cond, SWITCH_TYPE (t));\n@@ -746,7 +746,7 @@ genrtl_asm_stmt (tree cv_qualifier, tree string, tree output_operands,\n       cv_qualifier = NULL_TREE;\n     }\n \n-  emit_line_note (input_filename, input_line);\n+  emit_line_note (input_location);\n   if (asm_input_p)\n     expand_asm (string, cv_qualifier != NULL_TREE);\n   else"}, {"sha": "9ad4f98116577d33feace01f3018c41a9f4d479e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -1,3 +1,8 @@\n+2003-07-07  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* semantics.c: (genrtl_try_block) Adjust emit_line_note\n+\tcalls.\n+\n 2003-07-07  Andreas Jaeger  <aj@suse.de>\n \n \t* search.c (lookup_base_r): Remove unused variable."}, {"sha": "599aa1677601919a16c48ee899e84d0bf15bcb6d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -798,7 +798,7 @@ genrtl_try_block (tree t)\n   else\n     {\n       if (!FN_TRY_BLOCK_P (t)) \n-\temit_line_note (input_filename, input_line);\n+\temit_line_note (input_location);\n \n       expand_eh_region_start ();\n       expand_stmt (TRY_STMTS (t));"}, {"sha": "3b926dfb3050c2ce7a1fceff5b15fcd7e19a85ea", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 15, "deletions": 28, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -4665,35 +4665,31 @@ emit_barrier (void)\n   return barrier;\n }\n \n-/* Make an insn of code NOTE\n-   with data-fields specified by FILE and LINE\n-   and add it to the end of the doubly-linked list,\n-   but only if line-numbers are desired for debugging info.  */\n+/* Make line numbering NOTE insn for LOCATION add it to the end\n+   of the doubly-linked list, but only if line-numbers are desired for\n+   debugging info and it doesn't match the previous one.  */\n \n rtx\n-emit_line_note (const char *file, int line)\n+emit_line_note (location_t location)\n {\n   rtx note;\n-\n-  if (line < 0)\n-    abort ();\n-\n-  set_file_and_line_for_stmt (file, line);\n-\n-  if (file && last_location.file && !strcmp (file, last_location.file)\n-      && line == last_location.line)\n+  \n+  set_file_and_line_for_stmt (location);\n+  \n+  if (location.file && last_location.file\n+      && !strcmp (location.file, last_location.file)\n+      && location.line == last_location.line)\n     return NULL_RTX;\n-  last_location.file = file;\n-  last_location.line = line;\n-\n+  last_location = location;\n+  \n   if (no_line_numbers)\n     {\n       cur_insn_uid++;\n       return NULL_RTX;\n     }\n \n-  note = emit_note (line);\n-  NOTE_SOURCE_FILE (note) = file;\n+  note = emit_note (location.line);\n+  NOTE_SOURCE_FILE (note) = location.file;\n   \n   return note;\n }\n@@ -4739,17 +4735,8 @@ emit_note (int note_no)\n   return note;\n }\n \n-/* Emit a NOTE, and don't omit it even if LINE is the previous note.  */\n-\n-rtx\n-emit_line_note_force (const char *file, int line)\n-{\n-  last_location.line = -1;\n-  return emit_line_note (file, line);\n-}\n-\n /* Cause next statement to emit a line note even if the line number\n-   has not changed.  This is used at the beginning of a function.  */\n+   has not changed.  */\n \n void\n force_next_line_note (void)"}, {"sha": "c32925a6bb472379dd598a888bfd515a171a3a2c", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -6920,7 +6920,7 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode, enum expand_modifier\n \tinput_filename = EXPR_WFL_FILENAME (exp);\n \tinput_line = EXPR_WFL_LINENO (exp);\n \tif (EXPR_WFL_EMIT_LINE_NOTE (exp))\n-\t  emit_line_note (input_filename, input_line);\n+\t  emit_line_note (input_location);\n \t/* Possibly avoid switching back and forth here.  */\n \tto_return = expand_expr (EXPR_WFL_NODE (exp), target, tmode, modifier);\n \tinput_location = saved_loc;"}, {"sha": "b75edc693b59be68a1e70b88e31a836e6f96b441", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -1,3 +1,9 @@\n+Mon Jul  7 18:13:22 2003  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* com.c (bison_rule_pushlevel_, bison_rule_compstmt_): Adjust\n+\temit_line_note calls.\n+\t* ste.c (ffeste_emit_line_note_): Likewise.\n+\n 2003-07-06  Andreas Jaeger  <aj@suse.de>\n \n \t* bad.c: Convert () to (void) in function definitions."}, {"sha": "4d2860c4dcf5c4b14bb8095d769ba74a26507bf3", "filename": "gcc/f/com.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -13116,7 +13116,7 @@ ffecom_which_entrypoint_decl (void)\n static void\n bison_rule_pushlevel_ (void)\n {\n-  emit_line_note (input_filename, input_line);\n+  emit_line_note (input_location);\n   pushlevel (0);\n   clear_last_expr ();\n   expand_start_bindings (0);\n@@ -13132,7 +13132,7 @@ bison_rule_compstmt_ (void)\n   if (! keep)\n     current_binding_level->names = NULL_TREE;\n \n-  emit_line_note (input_filename, input_line);\n+  emit_line_note (input_location);\n   expand_end_bindings (getdecls (), keep, 0);\n   t = poplevel (keep, 1, 0);\n "}, {"sha": "82435bc8dc8e2bbf8a8b5e7e463a6ad242c93a31", "filename": "gcc/f/ste.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Ff%2Fste.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Ff%2Fste.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fste.c?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -141,7 +141,7 @@ static void ffeste_subr_beru_ (ffestpBeruStmt *info, ffecomGfrt rt);\n /* Internal macros. */\n \n #define ffeste_emit_line_note_() \\\n-  emit_line_note (input_filename, input_line)\n+  emit_line_note (input_location)\n #define ffeste_check_simple_() \\\n   assert(ffeste_statelet_ == FFESTE_stateletSIMPLE_)\n #define ffeste_check_start_() \\"}, {"sha": "742ad2f7340b079f1356932e7475d63e9fa69fa7", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -6379,7 +6379,7 @@ init_function_start (tree subr)\n      function prologue.  Note linenums could be missing, e.g. when\n      compiling a Java .class file.  */\n   if (DECL_SOURCE_LINE (subr))\n-    emit_line_note (DECL_SOURCE_FILE (subr), DECL_SOURCE_LINE (subr));\n+    emit_line_note (DECL_SOURCE_LOCATION (subr));\n \n   /* Make sure first insn is a note even if we don't want linenums.\n      This makes sure the first insn will never be deleted.\n@@ -6918,8 +6918,8 @@ expand_function_end (void)\n \n   /* Output a linenumber for the end of the function.\n      SDB depends on this.  */\n-\n-  emit_line_note_force (input_filename, input_line);\n+  force_next_line_note ();\n+  emit_line_note (input_location);\n \n   /* Before the return label (if any), clobber the return\n      registers so that they are not propagated live to the rest of"}, {"sha": "6c5fdf4739acfb1d3ad55f99a9f3ece9da703087", "filename": "gcc/integrate.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -986,8 +986,8 @@ expand_inline_function (tree fndecl, tree parms, rtx target, int ignore,\n \t  && ! (GET_CODE (XEXP (loc, 0)) == REG\n \t\t&& REGNO (XEXP (loc, 0)) > LAST_VIRTUAL_REGISTER))\n \t{\n-\t  rtx note = emit_line_note (DECL_SOURCE_FILE (formal),\n-\t\t\t\t     DECL_SOURCE_LINE (formal));\n+\t  rtx note = emit_line_note (DECL_SOURCE_LOCATION (formal));\n+\n \t  if (note)\n \t    RTX_INTEGRATED_P (note) = 1;\n \n@@ -1276,7 +1276,7 @@ expand_inline_function (tree fndecl, tree parms, rtx target, int ignore,\n   if (flag_test_coverage)\n     emit_note (NOTE_INSN_REPEATED_LINE_NUMBER);\n \n-  emit_line_note (input_filename, input_line);\n+  emit_line_note (input_location);\n \n   /* If the function returns a BLKmode object in a register, copy it\n      out of the temp register into a BLKmode memory object.  */"}, {"sha": "89bf762721fab15b10c3bc91f567879dc458f0ae", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -1,3 +1,7 @@\n+2003-07-07  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* expr.c (expand_byte_code): Adjist emit_line_note call.\n+\n 2003-07-06  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* lang.c (java_handle_option): Don't handle filenames."}, {"sha": "0e97e986122181bc3a7de0e597c8b5767adfbac4", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -2828,7 +2828,7 @@ expand_byte_code (JCF *jcf, tree method)\n \t      if (pc == PC)\n \t\t{\n \t\t  input_line = GET_u2 (linenumber_pointer - 2);\n-\t\t  emit_line_note (input_filename, input_line);\n+\t\t  emit_line_note (input_location);\n \t\t  if (!(instruction_bits[PC] & BCODE_HAS_MULTI_LINENUMBERS))\n \t\t    break;\n \t\t}"}, {"sha": "065e03ca807dcf2babf5d41b32a0ff23b77be99d", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -1522,8 +1522,7 @@ extern rtx emit_label (rtx);\n extern rtx emit_barrier (void);\n extern rtx emit_note (int);\n extern rtx emit_note_copy (rtx);\n-extern rtx emit_line_note (const char *, int);\n-extern rtx emit_line_note_force (const char *, int);\n+extern rtx emit_line_note (location_t);\n extern rtx make_insn_raw (rtx);\n extern void add_function_usage_to (rtx, rtx);\n extern rtx last_call_insn (void);\n@@ -2092,7 +2091,7 @@ extern void purge_addressof (rtx);\n extern void purge_hard_subreg_sets (rtx);\n \n /* In stmt.c */\n-extern void set_file_and_line_for_stmt (const char *, int);\n+extern void set_file_and_line_for_stmt (location_t);\n extern void expand_null_return (void);\n extern void emit_jump (rtx);\n extern int preserve_subexpressions_p (void);"}, {"sha": "334e751bcde35319bb07ee9d646023e81c3cf2e9", "filename": "gcc/stmt.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -456,17 +456,15 @@ init_stmt_for_function (void)\n }\n \f\n /* Record the current file and line.  Called from emit_line_note.  */\n+\n void\n-set_file_and_line_for_stmt (const char *file, int line)\n+set_file_and_line_for_stmt (location_t location)\n {\n   /* If we're outputting an inline function, and we add a line note,\n      there may be no CFUN->STMT information.  So, there's no need to\n      update it.  */\n   if (cfun->stmt)\n-    {\n-      emit_locus.file = file;\n-      emit_locus.line = line;\n-    }\n+    emit_locus = location;\n }\n \n /* Emit a no-op instruction.  */\n@@ -3991,7 +3989,7 @@ expand_decl_init (tree decl)\n     }\n   else if (DECL_INITIAL (decl) && TREE_CODE (DECL_INITIAL (decl)) != TREE_LIST)\n     {\n-      emit_line_note (DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl));\n+      emit_line_note (DECL_SOURCE_LOCATION (decl));\n       expand_assignment (decl, DECL_INITIAL (decl), 0, 0);\n       emit_queue ();\n     }"}, {"sha": "abb3c608ebb5ff0b11d21fabe110ff900f33c213", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -2839,7 +2839,7 @@ extern void check_max_integer_computation_mode (tree);\n \n /* In emit-rtl.c */\n extern void start_sequence_for_rtl_expr (tree);\n-extern rtx emit_line_note (const char *, int);\n+extern rtx emit_line_note (location_t);\n \n /* In calls.c */\n "}, {"sha": "2569137a0e2b821cef0fd5ef3b9dc758ee643990", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -1,3 +1,11 @@\n+2003-07-07  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* treelang/treetree.c (tree_code_if_start, tree_code_if_else,\n+\ttree_code_if_end, tree_code_create_function_initial,\n+\ttree_code_create_function_wrapup, tree_code_generate_return,\n+\ttree_code_output_expression_statement): Adjust emit_line_note\n+\tcalls.\n+\n 2003-07-04  H.J. Lu <hongjiu.lu@intel.com>\n \n \t* Make-lang.in: Replace PWD with PWD_COMMAND."}, {"sha": "c752a82f1c22c1f1a511da08e1dfc597a40b558b", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cea056ba1409967d888007cf43e05ac4bd0003f/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=0cea056ba1409967d888007cf43e05ac4bd0003f", "patch": "@@ -189,7 +189,7 @@ tree_code_if_start (tree exp, location_t loc)\n                  TREE_TYPE (exp),\n                  exp,\n                  build1 (CONVERT_EXPR, TREE_TYPE (exp), integer_zero_node));\n-  emit_line_note (loc.file, loc.line); /* Output the line number information.  */\n+  emit_line_note (loc); /* Output the line number information.  */\n   expand_start_cond (cond_exp, /* Exit-able if nonzero.  */ 0);\n }\n \n@@ -199,7 +199,7 @@ tree_code_if_start (tree exp, location_t loc)\n void\n tree_code_if_else (location_t loc)\n {\n-  emit_line_note (loc.file, loc.line); /* Output the line number information.  */\n+  emit_line_note (loc); /* Output the line number information.  */\n   expand_start_else ();\n }\n \n@@ -209,7 +209,7 @@ tree_code_if_else (location_t loc)\n void\n tree_code_if_end (location_t loc)\n {\n-  emit_line_note (loc.file, loc.line); /* Output the line number information.  */\n+  emit_line_note (loc); /* Output the line number information.  */\n   expand_end_cond ();\n }\n \n@@ -428,7 +428,7 @@ tree_code_create_function_initial (tree prev_saved,\n \n   expand_start_bindings (0);\n \n-  emit_line_note (loc.file, loc.line); /* Output the line number information.  */\n+  emit_line_note (loc); /* Output the line number information.  */\n }\n \n /* Wrapup a function contained in file FILENAME, ending at line LINENO.  */\n@@ -440,7 +440,7 @@ tree_code_create_function_wrapup (location_t loc)\n \n   fn_decl = current_function_decl;\n \n-  emit_line_note (loc.file, loc.line); /* Output the line number information.  */\n+  emit_line_note (loc); /* Output the line number information.  */\n \n   /* Get completely built level from debugger symbol table.  */\n \n@@ -602,11 +602,10 @@ tree_code_generate_return (tree type, tree exp)\n \n \n void\n-tree_code_output_expression_statement (tree code,\n-                                       location_t loc)\n+tree_code_output_expression_statement (tree code, location_t loc)\n {\n   /* Output the line number information.  */\n-  emit_line_note (loc.file, loc.line);\n+  emit_line_note (loc);\n   TREE_USED (code) = 1;\n   TREE_SIDE_EFFECTS (code) = 1;\n   expand_expr_stmt (code);"}]}