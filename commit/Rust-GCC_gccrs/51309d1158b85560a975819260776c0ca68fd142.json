{"sha": "51309d1158b85560a975819260776c0ca68fd142", "node_id": "C_kwDOANBUbNoAKDUxMzA5ZDExNThiODU1NjBhOTc1ODE5MjYwNzc2YzBjYTY4ZmQxNDI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-16T10:02:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-16T19:20:39Z"}, "message": "libstdc++: Apply r13-1096-g6abe341558abec change to vstring too [PR101482]\n\nAs recently done for std::basic_string, __gnu_cxx::__versa_string\nequality comparisons can check lengths first for any character type and\ntraits type, not only for std::char_traits<char>.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/101482\n\t* include/ext/vstring.h (operator==): Always check lengths\n\tbefore comparing.", "tree": {"sha": "4245b15604d92c647925f928304c35ce517c8dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4245b15604d92c647925f928304c35ce517c8dce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51309d1158b85560a975819260776c0ca68fd142", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51309d1158b85560a975819260776c0ca68fd142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51309d1158b85560a975819260776c0ca68fd142", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51309d1158b85560a975819260776c0ca68fd142/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ca05d5d9b9b2bcbdc00add8a3b86d3c3361f1a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca05d5d9b9b2bcbdc00add8a3b86d3c3361f1a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ca05d5d9b9b2bcbdc00add8a3b86d3c3361f1a1"}], "stats": {"total": 45, "additions": 20, "deletions": 25}, "files": [{"sha": "47cbabf24f12a97943cd2261d4c6448f47bed812", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51309d1158b85560a975819260776c0ca68fd142/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51309d1158b85560a975819260776c0ca68fd142/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=51309d1158b85560a975819260776c0ca68fd142", "patch": "@@ -2338,18 +2338,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator==(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n \t       const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n-    { return __lhs.compare(__rhs) == 0; }\n+    {\n+      return __lhs.size() == __rhs.size()\n+\t       && !_Traits::compare(__lhs.data(), __rhs.data(), __lhs.size());\n+    }\n \n-  template<typename _CharT,\n+  /**\n+   *  @brief  Test equivalence of string and C string.\n+   *  @param __lhs  String.\n+   *  @param __rhs  C string.\n+   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n \t   template <typename, typename, typename> class _Base>\n-    inline typename __enable_if<std::__is_char<_CharT>::__value, bool>::__type\n-    operator==(const __versa_string<_CharT, std::char_traits<_CharT>,\n-\t       std::allocator<_CharT>, _Base>& __lhs,\n-\t       const __versa_string<_CharT, std::char_traits<_CharT>,\n-\t       std::allocator<_CharT>, _Base>& __rhs)\n-    { return (__lhs.size() == __rhs.size()\n-\t      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),\n-\t\t\t\t\t\t    __lhs.size())); }\n+    inline bool\n+    operator==(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t       const _CharT* __rhs)\n+    {\n+      return __lhs.size() == _Traits::length(__rhs)\n+\t       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());\n+    }\n \n   /**\n    *  @brief  Test equivalence of C string and string.\n@@ -2362,20 +2370,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator==(const _CharT* __lhs,\n \t       const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n-    { return __rhs.compare(__lhs) == 0; }\n-\n-  /**\n-   *  @brief  Test equivalence of string and C string.\n-   *  @param __lhs  String.\n-   *  @param __rhs  C string.\n-   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.\n-   */\n-  template<typename _CharT, typename _Traits, typename _Alloc,\n-\t   template <typename, typename, typename> class _Base>\n-    inline bool\n-    operator==(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n-\t       const _CharT* __rhs)\n-    { return __lhs.compare(__rhs) == 0; }\n+    { return __rhs == __lhs; }\n \n   // operator !=\n   /**\n@@ -2402,7 +2397,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator!=(const _CharT* __lhs,\n \t       const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n-    { return !(__lhs == __rhs); }\n+    { return !(__rhs == __lhs); }\n \n   /**\n    *  @brief  Test difference of string and C string."}]}