{"sha": "3c3659076b8ff160f904a4b6295cf4f9f1bccea8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MzNjU5MDc2YjhmZjE2MGY5MDRhNGI2Mjk1Y2Y0ZjlmMWJjY2VhOA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-20T15:50:34Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-20T15:50:34Z"}, "message": "Emit compiler errors for unused values.\n\nFrom-SVN: r179008", "tree": {"sha": "6f9a9953c11370b5c42ebb8583fb09221b709456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f9a9953c11370b5c42ebb8583fb09221b709456"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c3659076b8ff160f904a4b6295cf4f9f1bccea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c3659076b8ff160f904a4b6295cf4f9f1bccea8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c3659076b8ff160f904a4b6295cf4f9f1bccea8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c3659076b8ff160f904a4b6295cf4f9f1bccea8/comments", "author": null, "committer": null, "parents": [{"sha": "0274cf27fd787aa97935a1c0c15b369bd99390e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0274cf27fd787aa97935a1c0c15b369bd99390e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0274cf27fd787aa97935a1c0c15b369bd99390e3"}], "stats": {"total": 126, "additions": 92, "deletions": 34}, "files": [{"sha": "43bcb5e616ee5c1174dcc434f22dcd18bf53ba2d", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 49, "deletions": 8, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3659076b8ff160f904a4b6295cf4f9f1bccea8/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3659076b8ff160f904a4b6295cf4f9f1bccea8/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=3c3659076b8ff160f904a4b6295cf4f9f1bccea8", "patch": "@@ -135,13 +135,13 @@ Expression::do_traverse(Traverse*)\n }\n \n // This virtual function is called by the parser if the value of this\n-// expression is being discarded.  By default, we warn.  Expressions\n-// with side effects override.\n+// expression is being discarded.  By default, we give an error.\n+// Expressions with side effects override.\n \n void\n Expression::do_discarding_value()\n {\n-  this->warn_about_unused_value();\n+  this->unused_value_error();\n }\n \n // This virtual function is called to export expressions.  This will\n@@ -153,12 +153,12 @@ Expression::do_export(Export*) const\n   go_unreachable();\n }\n \n-// Warn that the value of the expression is not used.\n+// Give an error saying that the value of the expression is not used.\n \n void\n-Expression::warn_about_unused_value()\n+Expression::unused_value_error()\n {\n-  warning_at(this->location(), OPT_Wunused_value, \"value computed is not used\");\n+  error_at(this->location(), \"value computed is not used\");\n }\n \n // Note that this expression is an error.  This is called by children\n@@ -5832,7 +5832,7 @@ Binary_expression::do_discarding_value()\n   if (this->op_ == OPERATOR_OROR || this->op_ == OPERATOR_ANDAND)\n     this->right_->discarding_value();\n   else\n-    this->warn_about_unused_value();\n+    this->unused_value_error();\n }\n \n // Get type.\n@@ -6951,6 +6951,9 @@ class Builtin_call_expression : public Call_expression\n   bool\n   do_complex_constant_value(mpfr_t, mpfr_t, Type**) const;\n \n+  void\n+  do_discarding_value();\n+\n   Type*\n   do_type();\n \n@@ -7760,6 +7763,44 @@ Builtin_call_expression::do_complex_constant_value(mpfr_t real, mpfr_t imag,\n   return false;\n }\n \n+// Give an error if we are discarding the value of an expression which\n+// should not normally be discarded.  We don't give an error for\n+// discarding the value of an ordinary function call, but we do for\n+// builtin functions, purely for consistency with the gc compiler.\n+\n+void\n+Builtin_call_expression::do_discarding_value()\n+{\n+  switch (this->code_)\n+    {\n+    case BUILTIN_INVALID:\n+    default:\n+      go_unreachable();\n+\n+    case BUILTIN_APPEND:\n+    case BUILTIN_CAP:\n+    case BUILTIN_COMPLEX:\n+    case BUILTIN_IMAG:\n+    case BUILTIN_LEN:\n+    case BUILTIN_MAKE:\n+    case BUILTIN_NEW:\n+    case BUILTIN_REAL:\n+    case BUILTIN_ALIGNOF:\n+    case BUILTIN_OFFSETOF:\n+    case BUILTIN_SIZEOF:\n+      this->unused_value_error();\n+      break;\n+\n+    case BUILTIN_CLOSE:\n+    case BUILTIN_COPY:\n+    case BUILTIN_PANIC:\n+    case BUILTIN_PRINT:\n+    case BUILTIN_PRINTLN:\n+    case BUILTIN_RECOVER:\n+      break;\n+    }\n+}\n+\n // Return the type.\n \n Type*\n@@ -11241,7 +11282,7 @@ Selector_expression::lower_method_expression(Gogo* gogo)\n   size_t count = call->result_count();\n   Statement* s;\n   if (count == 0)\n-    s = Statement::make_statement(call);\n+    s = Statement::make_statement(call, true);\n   else\n     {\n       Expression_list* retvals = new Expression_list();"}, {"sha": "8cdf94d2e7889f8b5f7557bc99fa58b13744e9e1", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3659076b8ff160f904a4b6295cf4f9f1bccea8/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3659076b8ff160f904a4b6295cf4f9f1bccea8/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=3c3659076b8ff160f904a4b6295cf4f9f1bccea8", "patch": "@@ -359,9 +359,9 @@ class Expression\n   string_constant_value(std::string* val) const\n   { return this->do_string_constant_value(val); }\n \n-  // This is called by the parser if the value of this expression is\n-  // being discarded.  This issues warnings about computed values\n-  // being unused.\n+  // This is called if the value of this expression is being\n+  // discarded.  This issues warnings about computed values being\n+  // unused.\n   void\n   discarding_value()\n   { this->do_discarding_value(); }\n@@ -725,9 +725,9 @@ class Expression\n   virtual void\n   do_export(Export*) const;\n \n-  // For children to call to warn about an unused value.\n+  // For children to call to give an error for an unused value.\n   void\n-  warn_about_unused_value();\n+  unused_value_error();\n \n   // For children to call when they detect that they are in error.\n   void"}, {"sha": "221826bb62ba05f1fac59a9d451c0fa56ac40887", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3659076b8ff160f904a4b6295cf4f9f1bccea8/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3659076b8ff160f904a4b6295cf4f9f1bccea8/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=3c3659076b8ff160f904a4b6295cf4f9f1bccea8", "patch": "@@ -2017,7 +2017,7 @@ Order_eval::statement(Block* block, size_t* pindex, Statement* s)\n \t  // be handled specially.  We can't create a temporary\n \t  // because there is no type to give it.  Any actual uses of\n \t  // the values will be done via Call_result_expressions.\n-\t  s = Statement::make_statement(*pexpr);\n+\t  s = Statement::make_statement(*pexpr, true);\n \t}\n \n       block->insert_statement_before(*pindex, s);\n@@ -2072,7 +2072,7 @@ Order_eval::variable(Named_object* no)\n \t{\n \t  // A call expression which returns multiple results needs to\n \t  // be handled specially.\n-\t  s = Statement::make_statement(*pexpr);\n+\t  s = Statement::make_statement(*pexpr, true);\n \t}\n       var->add_preinit_statement(this->gogo_, s);\n     }\n@@ -2266,7 +2266,7 @@ Build_recover_thunks::function(Named_object* orig_no)\n \n   Statement* s;\n   if (orig_fntype->results() == NULL || orig_fntype->results()->empty())\n-    s = Statement::make_statement(call);\n+    s = Statement::make_statement(call, true);\n   else\n     {\n       Expression_list* vals = new Expression_list();"}, {"sha": "06281db96cf84a7294846cd955da08d721109ee1", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3659076b8ff160f904a4b6295cf4f9f1bccea8/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3659076b8ff160f904a4b6295cf4f9f1bccea8/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=3c3659076b8ff160f904a4b6295cf4f9f1bccea8", "patch": "@@ -1839,7 +1839,7 @@ Parse::init_var(const Typed_identifier& tid, Type* type, Expression* init,\n       if (!type_from_init && init != NULL)\n \t{\n \t  if (!this->gogo_->in_global_scope())\n-\t    this->gogo_->add_statement(Statement::make_statement(init));\n+\t    this->gogo_->add_statement(Statement::make_statement(init, true));\n \t  else\n \t    return this->create_dummy_global(type, init, location);\n \t}\n@@ -3506,8 +3506,7 @@ Parse::statement_list_may_start_here()\n void\n Parse::expression_stat(Expression* exp)\n {\n-  exp->discarding_value();\n-  this->gogo_->add_statement(Statement::make_statement(exp));\n+  this->gogo_->add_statement(Statement::make_statement(exp, false));\n }\n \n // SendStmt = Channel \"&lt;-\" Expression ."}, {"sha": "d78d2e2b5297c8c7bdfaee10d4a872509b8ad379", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3659076b8ff160f904a4b6295cf4f9f1bccea8/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3659076b8ff160f904a4b6295cf4f9f1bccea8/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=3c3659076b8ff160f904a4b6295cf4f9f1bccea8", "patch": "@@ -924,7 +924,7 @@ Tuple_assignment_statement::do_lower(Gogo*, Named_object*, Block* enclosing,\n \n       if ((*plhs)->is_sink_expression())\n \t{\n-\t  b->add_statement(Statement::make_statement(*prhs));\n+\t  b->add_statement(Statement::make_statement(*prhs, true));\n \t  continue;\n \t}\n \n@@ -1240,7 +1240,7 @@ Map_assignment_statement::do_lower(Gogo*, Named_object*, Block* enclosing,\n   Expression* p4 = Expression::make_temporary_reference(insert_temp, loc);\n   Expression* call = Runtime::make_call(Runtime::MAPASSIGN2, loc, 4,\n \t\t\t\t\tp1, p2, p3, p4);\n-  Statement* s = Statement::make_statement(call);\n+  Statement* s = Statement::make_statement(call, true);\n   b->add_statement(s);\n \n   return Statement::make_block_statement(b, loc);\n@@ -1614,9 +1614,9 @@ Statement::make_tuple_type_guard_assignment(Expression* val, Expression* ok,\n class Expression_statement : public Statement\n {\n  public:\n-  Expression_statement(Expression* expr)\n+  Expression_statement(Expression* expr, bool is_ignored)\n     : Statement(STATEMENT_EXPRESSION, expr->location()),\n-      expr_(expr)\n+      expr_(expr), is_ignored_(is_ignored)\n   { }\n \n   Expression*\n@@ -1632,6 +1632,9 @@ class Expression_statement : public Statement\n   do_determine_types()\n   { this->expr_->determine_type_no_context(); }\n \n+  void\n+  do_check_types(Gogo*);\n+\n   bool\n   do_may_fall_through() const;\n \n@@ -1643,8 +1646,21 @@ class Expression_statement : public Statement\n \n  private:\n   Expression* expr_;\n+  // Whether the value of this expression is being explicitly ignored.\n+  bool is_ignored_;\n };\n \n+// Check the types of an expression statement.  The only check we do\n+// is to possibly give an error about discarding the value of the\n+// expression.\n+\n+void\n+Expression_statement::do_check_types(Gogo*)\n+{\n+  if (!this->is_ignored_)\n+    this->expr_->discarding_value();\n+}\n+\n // An expression statement may fall through unless it is a call to a\n // function which does not return.\n \n@@ -1699,9 +1715,9 @@ Expression_statement::do_dump_statement(Ast_dump_context* ast_dump_context)\n // Make an expression statement from an Expression.\n \n Statement*\n-Statement::make_statement(Expression* expr)\n+Statement::make_statement(Expression* expr, bool is_ignored)\n {\n-  return new Expression_statement(expr);\n+  return new Expression_statement(expr, is_ignored);\n }\n \n // A block statement--a list of statements which may include variable\n@@ -2374,7 +2390,7 @@ Thunk_statement::build_thunk(Gogo* gogo, const std::string& thunk_name)\n   // receiver parameter.\n   call->set_varargs_are_lowered();\n \n-  Statement* call_statement = Statement::make_statement(call);\n+  Statement* call_statement = Statement::make_statement(call, true);\n \n   gogo->add_statement(call_statement);\n \n@@ -3791,7 +3807,7 @@ Switch_statement::do_lower(Gogo*, Named_object*, Block* enclosing,\n       Expression* val = this->val_;\n       if (val == NULL)\n \tval = Expression::make_boolean(true, loc);\n-      return Statement::make_statement(val);\n+      return Statement::make_statement(val, true);\n     }\n \n   Temporary_statement* val_temp;\n@@ -4516,7 +4532,7 @@ Select_clauses::Select_clause::lower(Gogo* gogo, Named_object* function,\n \t}\n       else\n \t{\n-\t  init->add_statement(Statement::make_statement(recv));\n+\t  init->add_statement(Statement::make_statement(recv, true));\n \t}\n     }\n \n@@ -5593,7 +5609,7 @@ For_range_statement::lower_range_map(Gogo*,\n   Expression* ref = Expression::make_temporary_reference(hiter, loc);\n   Expression* p2 = Expression::make_unary(OPERATOR_AND, ref, loc);\n   Expression* call = Runtime::make_call(Runtime::MAPITERINIT, loc, 2, p1, p2);\n-  init->add_statement(Statement::make_statement(call));\n+  init->add_statement(Statement::make_statement(call, true));\n \n   *pinit = init;\n \n@@ -5634,7 +5650,7 @@ For_range_statement::lower_range_map(Gogo*,\n       Expression* p3 = Expression::make_unary(OPERATOR_AND, ref, loc);\n       call = Runtime::make_call(Runtime::MAPITER2, loc, 3, p1, p2, p3);\n     }\n-  iter_init->add_statement(Statement::make_statement(call));\n+  iter_init->add_statement(Statement::make_statement(call, true));\n \n   *piter_init = iter_init;\n \n@@ -5646,7 +5662,7 @@ For_range_statement::lower_range_map(Gogo*,\n   ref = Expression::make_temporary_reference(hiter, loc);\n   p1 = Expression::make_unary(OPERATOR_AND, ref, loc);\n   call = Runtime::make_call(Runtime::MAPITERNEXT, loc, 1, p1);\n-  post->add_statement(Statement::make_statement(call));\n+  post->add_statement(Statement::make_statement(call, true));\n \n   *ppost = post;\n }"}, {"sha": "86b0f3051480a6f7e550d6358d82ffd1c44e0033", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3659076b8ff160f904a4b6295cf4f9f1bccea8/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3659076b8ff160f904a4b6295cf4f9f1bccea8/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=3c3659076b8ff160f904a4b6295cf4f9f1bccea8", "patch": "@@ -178,9 +178,11 @@ class Statement\n \t\t\t\t   Expression* expr, Type* type,\n \t\t\t\t   source_location);\n \n-  // Make an expression statement from an Expression.\n+  // Make an expression statement from an Expression.  IS_IGNORED is\n+  // true if the value is being explicitly ignored, as in an\n+  // assignment to _.\n   static Statement*\n-  make_statement(Expression*);\n+  make_statement(Expression*, bool is_ignored);\n \n   // Make a block statement from a Block.  This is an embedded list of\n   // statements which may also include variable definitions."}, {"sha": "68c35f40764d5bb5b75c7d7c6915160346a72b3d", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3659076b8ff160f904a4b6295cf4f9f1bccea8/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3659076b8ff160f904a4b6295cf4f9f1bccea8/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=3c3659076b8ff160f904a4b6295cf4f9f1bccea8", "patch": "@@ -7432,7 +7432,7 @@ Type::build_one_stub_method(Gogo* gogo, Method* method,\n   call->set_hidden_fields_are_ok();\n   size_t count = call->result_count();\n   if (count == 0)\n-    gogo->add_statement(Statement::make_statement(call));\n+    gogo->add_statement(Statement::make_statement(call, true));\n   else\n     {\n       Expression_list* retvals = new Expression_list();"}]}