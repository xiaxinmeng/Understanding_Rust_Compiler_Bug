{"sha": "9a471714928470c52b21586dd135658a02317c69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE0NzE3MTQ5Mjg0NzBjNTJiMjE1ODZkZDEzNTY1OGEwMjMxN2M2OQ==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2018-10-04T11:06:24Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2018-10-04T11:06:24Z"}, "message": "re PR tree-optimization/85787 (malloc_candidate_p fails to detect malloc attribute on nested phis)\n\n2018-10-04  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\n\tPR tree-optimization/85787\n\t* ipa-pure-const.c (malloc_candidate_p_1): Move most of malloc_candidate_p\n\tinto this function and add support for detecting multiple phis.\n\t(DUMP_AND_RETURN): Move from malloc_candidate_p into top-level macro.\n\ntestsuite/\n\t* gcc.dg/ipa/propmalloc-4.c: New test.\n\nFrom-SVN: r264838", "tree": {"sha": "ab6181264f54875968f849d28ea8d210c8ee8551", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab6181264f54875968f849d28ea8d210c8ee8551"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a471714928470c52b21586dd135658a02317c69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a471714928470c52b21586dd135658a02317c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a471714928470c52b21586dd135658a02317c69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a471714928470c52b21586dd135658a02317c69/comments", "author": null, "committer": null, "parents": [{"sha": "75fcc3eb1be8cd8079eb9e1840295ef950d6dc4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75fcc3eb1be8cd8079eb9e1840295ef950d6dc4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75fcc3eb1be8cd8079eb9e1840295ef950d6dc4a"}], "stats": {"total": 235, "additions": 161, "deletions": 74}, "files": [{"sha": "8022aabfc2166821655dfc9bcdb31c1920d1756c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a471714928470c52b21586dd135658a02317c69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a471714928470c52b21586dd135658a02317c69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a471714928470c52b21586dd135658a02317c69", "patch": "@@ -1,3 +1,10 @@\n+2018-10-04  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR tree-optimization/85787\n+\t* ipa-pure-const.c (malloc_candidate_p_1): Move most of malloc_candidate_p\n+\tinto this function and add support for detecting multiple phis.\n+\t(DUMP_AND_RETURN): Move from malloc_candidate_p into top-level macro.\n+\n 2018-10-04  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/87491"}, {"sha": "66c81be23ecd9844a5f38d7927f26b6971c7d330", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 93, "deletions": 74, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a471714928470c52b21586dd135658a02317c69/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a471714928470c52b21586dd135658a02317c69/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=9a471714928470c52b21586dd135658a02317c69", "patch": "@@ -869,14 +869,6 @@ check_retval_uses (tree retval, gimple *stmt)\n       and return_stmt (and likewise a phi arg has immediate use only within comparison\n       or the phi stmt).  */\n \n-static bool\n-malloc_candidate_p (function *fun, bool ipa)\n-{\n-  basic_block exit_block = EXIT_BLOCK_PTR_FOR_FN (fun);\n-  edge e;\n-  edge_iterator ei;\n-  cgraph_node *node = cgraph_node::get_create (fun->decl);\n-\n #define DUMP_AND_RETURN(reason)  \\\n {  \\\n   if (dump_file && (dump_flags & TDF_DETAILS))  \\\n@@ -885,6 +877,96 @@ malloc_candidate_p (function *fun, bool ipa)\n   return false;  \\\n }\n \n+static bool\n+malloc_candidate_p_1 (function *fun, tree retval, gimple *ret_stmt, bool ipa)\n+{\n+  cgraph_node *node = cgraph_node::get_create (fun->decl);\n+\n+  if (!check_retval_uses (retval, ret_stmt))\n+    DUMP_AND_RETURN(\"Return value has uses outside return stmt\"\n+\t\t    \" and comparisons against 0.\")\n+\n+  gimple *def = SSA_NAME_DEF_STMT (retval);\n+\n+  if (gcall *call_stmt = dyn_cast<gcall *> (def))\n+    {\n+      tree callee_decl = gimple_call_fndecl (call_stmt);\n+      if (!callee_decl)\n+\treturn false;\n+\n+      if (!ipa && !DECL_IS_MALLOC (callee_decl))\n+\tDUMP_AND_RETURN(\"callee_decl does not have malloc attribute for\"\n+\t\t\t\" non-ipa mode.\")\n+\n+      cgraph_edge *cs = node->get_edge (call_stmt);\n+      if (cs)\n+\t{\n+\t  ipa_call_summary *es = ipa_call_summaries->get_create (cs);\n+\t  es->is_return_callee_uncaptured = true;\n+\t}\n+    }\n+\n+    else if (gphi *phi = dyn_cast<gphi *> (def))\n+      {\n+\tbool all_args_zero = true;\n+\tfor (unsigned i = 0; i < gimple_phi_num_args (phi); ++i)\n+\t  {\n+\t    tree arg = gimple_phi_arg_def (phi, i);\n+\t    if (integer_zerop (arg))\n+\t      continue;\n+\n+\t    all_args_zero = false;\n+\t    if (TREE_CODE (arg) != SSA_NAME)\n+\t      DUMP_AND_RETURN (\"phi arg is not SSA_NAME.\");\n+\t    if (!check_retval_uses (arg, phi))\n+\t      DUMP_AND_RETURN (\"phi arg has uses outside phi\"\n+\t\t\t\t \" and comparisons against 0.\")\n+\n+\t    gimple *arg_def = SSA_NAME_DEF_STMT (arg);\n+\t    if (is_a<gphi *> (arg_def))\n+\t      {\n+\t\tif (!malloc_candidate_p_1 (fun, arg, phi, ipa))\n+\t\t    DUMP_AND_RETURN (\"nested phi fail\")\n+\t\tcontinue;\n+\t      }\n+\n+\t    gcall *call_stmt = dyn_cast<gcall *> (arg_def);\n+\t    if (!call_stmt)\n+\t      DUMP_AND_RETURN (\"phi arg is a not a call_stmt.\")\n+\n+\t    tree callee_decl = gimple_call_fndecl (call_stmt);\n+\t    if (!callee_decl)\n+\t      return false;\n+\t    if (!ipa && !DECL_IS_MALLOC (callee_decl))\n+\t      DUMP_AND_RETURN(\"callee_decl does not have malloc attribute\"\n+\t\t\t      \" for non-ipa mode.\")\n+\n+\t    cgraph_edge *cs = node->get_edge (call_stmt);\n+\t    if (cs)\n+\t      {\n+\t\tipa_call_summary *es = ipa_call_summaries->get_create (cs);\n+\t\tes->is_return_callee_uncaptured = true;\n+\t      }\n+\t  }\n+\n+\tif (all_args_zero)\n+\t  DUMP_AND_RETURN (\"Return value is a phi with all args equal to 0.\")\n+      }\n+\n+    else\n+      DUMP_AND_RETURN(\"def_stmt of return value is not a call or phi-stmt.\")\n+\n+  return true;\n+}\n+\n+static bool\n+malloc_candidate_p (function *fun, bool ipa)\n+{\n+  basic_block exit_block = EXIT_BLOCK_PTR_FOR_FN (fun);\n+  edge e;\n+  edge_iterator ei;\n+  cgraph_node *node = cgraph_node::get_create (fun->decl);\n+\n   if (EDGE_COUNT (exit_block->preds) == 0\n       || !flag_delete_null_pointer_checks)\n     return false;\n@@ -905,80 +987,17 @@ malloc_candidate_p (function *fun, bool ipa)\n \t  || TREE_CODE (TREE_TYPE (retval)) != POINTER_TYPE)\n \tDUMP_AND_RETURN(\"Return value is not SSA_NAME or not a pointer type.\")\n \n-      if (!check_retval_uses (retval, ret_stmt))\n-\tDUMP_AND_RETURN(\"Return value has uses outside return stmt\"\n-\t\t\t\" and comparisons against 0.\")\n-\n-      gimple *def = SSA_NAME_DEF_STMT (retval);\n-      if (gcall *call_stmt = dyn_cast<gcall *> (def))\n-\t{\n-\t  tree callee_decl = gimple_call_fndecl (call_stmt);\n-\t  if (!callee_decl)\n-\t    return false;\n-\n-\t  if (!ipa && !DECL_IS_MALLOC (callee_decl))\n-\t    DUMP_AND_RETURN(\"callee_decl does not have malloc attribute for\"\n-\t\t\t    \" non-ipa mode.\")\n-\n-\t  cgraph_edge *cs = node->get_edge (call_stmt);\n-\t  if (cs)\n-\t    {\n-\t      ipa_call_summary *es = ipa_call_summaries->get_create (cs);\n-\t      es->is_return_callee_uncaptured = true;\n-\t    }\n-\t}\n-\n-      else if (gphi *phi = dyn_cast<gphi *> (def))\n-\t{\n-\t  bool all_args_zero = true;\n-\t  for (unsigned i = 0; i < gimple_phi_num_args (phi); ++i)\n-\t    {\n-\t      tree arg = gimple_phi_arg_def (phi, i);\n-\t      if (integer_zerop (arg))\n-\t\tcontinue;\n-\n-\t      all_args_zero = false;\n-\t      if (TREE_CODE (arg) != SSA_NAME)\n-\t\tDUMP_AND_RETURN (\"phi arg is not SSA_NAME.\");\n-\t      if (!check_retval_uses (arg, phi))\n-\t\tDUMP_AND_RETURN (\"phi arg has uses outside phi\"\n-\t\t\t\t \" and comparisons against 0.\")\n-\n-\t      gimple *arg_def = SSA_NAME_DEF_STMT (arg);\n-\t      gcall *call_stmt = dyn_cast<gcall *> (arg_def);\n-\t      if (!call_stmt)\n-\t\treturn false;\n-\t      tree callee_decl = gimple_call_fndecl (call_stmt);\n-\t      if (!callee_decl)\n-\t\treturn false;\n-\t      if (!ipa && !DECL_IS_MALLOC (callee_decl))\n-\t\tDUMP_AND_RETURN(\"callee_decl does not have malloc attribute\"\n-\t\t\t\t\" for non-ipa mode.\")\n-\n-\t      cgraph_edge *cs = node->get_edge (call_stmt);\n-\t      if (cs)\n-\t\t{\n-\t\t  ipa_call_summary *es = ipa_call_summaries->get_create (cs);\n-\t\t  es->is_return_callee_uncaptured = true;\n-\t\t}\n-\t    }\n-\n-\t  if (all_args_zero)\n-\t    DUMP_AND_RETURN (\"Return value is a phi with all args equal to 0.\");\n-\t}\n-\n-      else\n-\tDUMP_AND_RETURN(\"def_stmt of return value is not a call or phi-stmt.\")\n+      if (!malloc_candidate_p_1 (fun, retval, ret_stmt, ipa))\n+\treturn false;\n     }\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"\\nFound %s to be candidate for malloc attribute\\n\",\n \t     IDENTIFIER_POINTER (DECL_NAME (fun->decl)));\n   return true;\n-\n-#undef DUMP_AND_RETURN\n }\n \n+#undef DUMP_AND_RETURN\n \n /* This is the main routine for finding the reference patterns for\n    global variables within a function FN.  */"}, {"sha": "a6865fee246a18be80c093cf302f509e5593daff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a471714928470c52b21586dd135658a02317c69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a471714928470c52b21586dd135658a02317c69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a471714928470c52b21586dd135658a02317c69", "patch": "@@ -1,3 +1,8 @@\n+2018-10-04  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR tree-optimization/85787\n+\t* gcc.dg/ipa/propmalloc-4.c: New test.\n+\n 2018-10-04  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/cunroll-15.c: Add XFAILs for arm and powerpc."}, {"sha": "4c40d63f63da1b80f3059ca4752d8e115eddbf93", "filename": "gcc/testsuite/gcc.dg/ipa/propmalloc-4.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a471714928470c52b21586dd135658a02317c69/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpropmalloc-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a471714928470c52b21586dd135658a02317c69/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpropmalloc-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpropmalloc-4.c?ref=9a471714928470c52b21586dd135658a02317c69", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-local-pure-const-details\" } */\n+\n+void *foo(int cond1, int cond2, int cond3)\n+{\n+  void *ret;\n+  void *a;\n+  void *b;\n+\n+  if (cond1)\n+    a = __builtin_malloc (10);\n+  else\n+    a = __builtin_malloc (20);\n+\n+  if (cond2)\n+    b = __builtin_malloc (30);\n+  else\n+    b = __builtin_malloc (40);\n+\n+  if (cond3)\n+    ret = a;\n+  else\n+    ret = b;\n+\n+  return ret;\n+}\n+\n+void *foo2(int cond1, int cond2, int cond3)\n+{\n+  void *ret;\n+  void *a;\n+  void *b;\n+  void bar(void *, void *);\n+\n+  if (cond1)\n+    a = __builtin_malloc (10);\n+  else\n+    a = __builtin_malloc (20);\n+\n+  if (cond2)\n+    b = __builtin_malloc (30);\n+  else\n+    b = __builtin_malloc (40);\n+\n+  bar (a, b);\n+\n+  if (cond3)\n+    ret = a;\n+  else\n+    ret = b;\n+\n+  return ret;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Function found to be malloc: foo\" \"local-pure-const1\" } } */\n+/* { dg-final { scan-tree-dump-not \"Function found to be malloc: foo2\" \"local-pure-const1\" } } */"}]}