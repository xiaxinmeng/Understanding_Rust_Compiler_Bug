{"sha": "7d8cc2b6d17fa3fa2c0683286926556da6d3bb6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q4Y2MyYjZkMTdmYTNmYTJjMDY4MzI4NjkyNjU1NmRhNmQzYmI2Zg==", "commit": {"author": {"name": "Maroua Maalej", "email": "maalej@adacore.com", "date": "2018-08-21T14:47:38Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-08-21T14:47:38Z"}, "message": "[Ada] Update for Ownership rules for access types according to AI12-0240\n\nThe implementation of these Ownership rules for safe pointers and\nautomatic memory management is still a prototype at an experimental\nstage.\n\nTo activate the checks, the code should be compiled with the debug flag\n-gnatdF and the flag -gnatd.F for setting the context for formal\nverification of SPARK.\n\nThese changes do not affect compilation.\n\n2018-08-21  Maroua Maalej  <maalej@adacore.com>\n\ngcc/ada/\n\n\t* sem_spark.adb (Check_Call_Statement): Check global and formal\n\tparameter permissions at call sites.\n\t(Check_Callable_Body): Assume permissions on globals and\n\tparameters depending on their modes then analyse the body\n\toperations.\n\t(Check_Declaration): Consider both deep (including elementary\n\taccess) object declarations and normal variables. First check\n\twhether the deep object is of Ownership Aspec True or not, then,\n\tdepending on its initialization, assign the appropriate state.\n\tCheck related to non access type variables deal with\n\tinitialization value permissions.\n\t(Check_Expression): Check nodes used in the expression being\n\tanalyzed.\n\t(Check_Globals): Call by Check_Call_Statement to perform the\n\tcheck on globals.\n\t(Check_List): Call Check_Node on each element of the list.\n\t(Check_Loop_Statement): Check the Iteration_Scheme and loop\n\tstatements.\n\t(Check_Node): Main traversal procedure to check safe pointer usage.\n\t(Check_Package_Body): Check subprogram's body.\n\t(Check_Param_In): Take a formal and an actual parameter and\n\tCheck the permission of every in-mode parameter.\n\t(Check_Param_Out): Take a formal and an actual parameter and\n\tcheck the state of out-mode and in out-mode parameters.\n\t(Check_Statement): Check statements other than procedure call.\n\t(Get_Perm, Get_Perm_Or_Tree, Get_Perm_Tree): Find out the state\n\trelated to the given name.\n\t(Is_Deep): Return True if an object is of access type or has\n\tsubfields of access type.\n\t(Perm_Error, Perm_Error_Subprogram_End): Add an error message\n\twhenever the found state on the given name is different from the\n\tone expected (in the statement being analyzed).\n\t(Process_Path): Given an operation and a current state, call\n\tPerm_Error if there is any mismatch.\n\t(Return_Declarations, Return_Globals, Return_The_Global): Check\n\tthe state of a given name at the end of the subprogram. These\n\tprocedures may change depending on how we shall finally deal\n\twith globals and the rhs state in a move operation.\n\t(Set_Perm_Extensions, Set_Perm_Prefixes_Borrow,\n\tSet_Perm_Prefixes, Setup_Globals, Setup_Parameter_Or_Global,\n\tSetup_Parameters): Set up the new states to the given node and\n\tup and down the tree after an operation.\n\t(Has_Ownership_Aspect_True): This function may disappear later\n\twhen the Ownership Aspect will be implemented in the FE.\n\nFrom-SVN: r263727", "tree": {"sha": "ff5b4756b3abc87aa6e268c4b9c29d2dd4a6270c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff5b4756b3abc87aa6e268c4b9c29d2dd4a6270c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d8cc2b6d17fa3fa2c0683286926556da6d3bb6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8cc2b6d17fa3fa2c0683286926556da6d3bb6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d8cc2b6d17fa3fa2c0683286926556da6d3bb6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8cc2b6d17fa3fa2c0683286926556da6d3bb6f/comments", "author": null, "committer": null, "parents": [{"sha": "41306c0a89a539c97e8eee0867816ea3ae5ab5b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41306c0a89a539c97e8eee0867816ea3ae5ab5b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41306c0a89a539c97e8eee0867816ea3ae5ab5b7"}], "stats": {"total": 4441, "additions": 1437, "deletions": 3004}, "files": [{"sha": "f34ebbd963f9645de966f7141ab650f4c6cf8adc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8cc2b6d17fa3fa2c0683286926556da6d3bb6f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8cc2b6d17fa3fa2c0683286926556da6d3bb6f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7d8cc2b6d17fa3fa2c0683286926556da6d3bb6f", "patch": "@@ -1,3 +1,50 @@\n+2018-08-21  Maroua Maalej  <maalej@adacore.com>\n+\n+\t* sem_spark.adb (Check_Call_Statement): Check global and formal\n+\tparameter permissions at call sites.\n+\t(Check_Callable_Body): Assume permissions on globals and\n+\tparameters depending on their modes then analyse the body\n+\toperations.\n+\t(Check_Declaration): Consider both deep (including elementary\n+\taccess) object declarations and normal variables. First check\n+\twhether the deep object is of Ownership Aspec True or not, then,\n+\tdepending on its initialization, assign the appropriate state.\n+\tCheck related to non access type variables deal with\n+\tinitialization value permissions.\n+\t(Check_Expression): Check nodes used in the expression being\n+\tanalyzed.\n+\t(Check_Globals): Call by Check_Call_Statement to perform the\n+\tcheck on globals.\n+\t(Check_List): Call Check_Node on each element of the list.\n+\t(Check_Loop_Statement): Check the Iteration_Scheme and loop\n+\tstatements.\n+\t(Check_Node): Main traversal procedure to check safe pointer usage.\n+\t(Check_Package_Body): Check subprogram's body.\n+\t(Check_Param_In): Take a formal and an actual parameter and\n+\tCheck the permission of every in-mode parameter.\n+\t(Check_Param_Out): Take a formal and an actual parameter and\n+\tcheck the state of out-mode and in out-mode parameters.\n+\t(Check_Statement): Check statements other than procedure call.\n+\t(Get_Perm, Get_Perm_Or_Tree, Get_Perm_Tree): Find out the state\n+\trelated to the given name.\n+\t(Is_Deep): Return True if an object is of access type or has\n+\tsubfields of access type.\n+\t(Perm_Error, Perm_Error_Subprogram_End): Add an error message\n+\twhenever the found state on the given name is different from the\n+\tone expected (in the statement being analyzed).\n+\t(Process_Path): Given an operation and a current state, call\n+\tPerm_Error if there is any mismatch.\n+\t(Return_Declarations, Return_Globals, Return_The_Global): Check\n+\tthe state of a given name at the end of the subprogram. These\n+\tprocedures may change depending on how we shall finally deal\n+\twith globals and the rhs state in a move operation.\n+\t(Set_Perm_Extensions, Set_Perm_Prefixes_Borrow,\n+\tSet_Perm_Prefixes, Setup_Globals, Setup_Parameter_Or_Global,\n+\tSetup_Parameters): Set up the new states to the given node and\n+\tup and down the tree after an operation.\n+\t(Has_Ownership_Aspect_True): This function may disappear later\n+\twhen the Ownership Aspect will be implemented in the FE.\n+\n 2018-08-21  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_res.adb (Resolve_Call): Resolve correctly a parameterless"}, {"sha": "e5226206575c7ccfab77e2f839ed74174200fdd3", "filename": "gcc/ada/sem_spark.adb", "status": "modified", "additions": 1390, "deletions": 3004, "changes": 4394, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8cc2b6d17fa3fa2c0683286926556da6d3bb6f/gcc%2Fada%2Fsem_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8cc2b6d17fa3fa2c0683286926556da6d3bb6f/gcc%2Fada%2Fsem_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.adb?ref=7d8cc2b6d17fa3fa2c0683286926556da6d3bb6f"}]}