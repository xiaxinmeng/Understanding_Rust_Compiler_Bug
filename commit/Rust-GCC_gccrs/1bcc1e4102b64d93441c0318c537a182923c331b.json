{"sha": "1bcc1e4102b64d93441c0318c537a182923c331b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJjYzFlNDEwMmI2NGQ5MzQ0MWMwMzE4YzUzN2ExODI5MjNjMzMxYg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2015-05-12T13:37:53Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2015-05-12T13:37:53Z"}, "message": "combine.c (get_undo_marker): New function.\n\n\t* combine.c (get_undo_marker): New function.\n\t(undo_to_marker): New function, largely factored out from ...\n\t(undo_all): ... this.  Adjust.\n\nFrom-SVN: r223066", "tree": {"sha": "fefaa7df646c708b7dc67856d04b5bd746df6058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fefaa7df646c708b7dc67856d04b5bd746df6058"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bcc1e4102b64d93441c0318c537a182923c331b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bcc1e4102b64d93441c0318c537a182923c331b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bcc1e4102b64d93441c0318c537a182923c331b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bcc1e4102b64d93441c0318c537a182923c331b/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e37fe6f628dc0063a36fbed59a2dcf74e88cce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e37fe6f628dc0063a36fbed59a2dcf74e88cce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e37fe6f628dc0063a36fbed59a2dcf74e88cce5"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "58b5fc34b32053c8146673995bac82b87f2a5070", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bcc1e4102b64d93441c0318c537a182923c331b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bcc1e4102b64d93441c0318c537a182923c331b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bcc1e4102b64d93441c0318c537a182923c331b", "patch": "@@ -1,3 +1,9 @@\n+2015-05-12  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* combine.c (get_undo_marker): New function.\n+\t(undo_to_marker): New function, largely factored out from ...\n+\t(undo_all): ... this.  Adjust.\n+\n 2015-05-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/66101"}, {"sha": "4b6e39f4442bf1478a3ee41d4c4f305ca13278a4", "filename": "gcc/combine.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bcc1e4102b64d93441c0318c537a182923c331b/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bcc1e4102b64d93441c0318c537a182923c331b/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=1bcc1e4102b64d93441c0318c537a182923c331b", "patch": "@@ -4673,15 +4673,25 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n     return newi2pat ? i2 : i3;\n }\n \f\n-/* Undo all the modifications recorded in undobuf.  */\n+/* Get a marker for undoing to the current state.  */\n+\n+static void *\n+get_undo_marker (void)\n+{\n+  return undobuf.undos;\n+}\n+\n+/* Undo the modifications up to the marker.  */\n \n static void\n-undo_all (void)\n+undo_to_marker (void *marker)\n {\n   struct undo *undo, *next;\n \n-  for (undo = undobuf.undos; undo; undo = next)\n+  for (undo = undobuf.undos; undo != marker; undo = next)\n     {\n+      gcc_assert (undo);\n+\n       next = undo->next;\n       switch (undo->kind)\n \t{\n@@ -4705,7 +4715,15 @@ undo_all (void)\n       undobuf.frees = undo;\n     }\n \n-  undobuf.undos = 0;\n+  undobuf.undos = (struct undo *) marker;\n+}\n+\n+/* Undo all the modifications recorded in undobuf.  */\n+\n+static void\n+undo_all (void)\n+{\n+  undo_to_marker (0);\n }\n \n /* We've committed to accepting the changes we made.  Move all"}]}