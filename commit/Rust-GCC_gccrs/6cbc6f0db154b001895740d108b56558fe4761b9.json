{"sha": "6cbc6f0db154b001895740d108b56558fe4761b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNiYzZmMGRiMTU0YjAwMTg5NTc0MGQxMDhiNTY1NThmZTQ3NjFiOQ==", "commit": {"author": {"name": "Chao-ying Fu", "email": "fu@mips.com", "date": "2004-09-02T19:14:57Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2004-09-02T19:14:57Z"}, "message": "Add MIPS-3D and MIPS PS testcases from Chao-ying Fu.\n\nFrom-SVN: r86982", "tree": {"sha": "97cd0fbe3364f74f8068866f56af35f579dae781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97cd0fbe3364f74f8068866f56af35f579dae781"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cbc6f0db154b001895740d108b56558fe4761b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbc6f0db154b001895740d108b56558fe4761b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cbc6f0db154b001895740d108b56558fe4761b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbc6f0db154b001895740d108b56558fe4761b9/comments", "author": null, "committer": null, "parents": [{"sha": "98599ff8ba98eedc4c4e62954b8d9d125efd7a17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98599ff8ba98eedc4c4e62954b8d9d125efd7a17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98599ff8ba98eedc4c4e62954b8d9d125efd7a17"}], "stats": {"total": 6205, "additions": 6205, "deletions": 0}, "files": [{"sha": "011aeff3255fbb7fe545d2e2bd6ccbfdfbbf3200", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6cbc6f0db154b001895740d108b56558fe4761b9", "patch": "@@ -1,3 +1,20 @@\n+2004-09-02  Chao-ying Fu  <fu@mips.com>\n+\n+\t* gcc.target/mips/mips-3d-1.c: New test.\n+\t* gcc.target/mips/mips-3d-2.c: New test.\n+\t* gcc.target/mips/mips-3d-3.c: New test.\n+\t* gcc.target/mips/mips-3d-4.c: New test.\n+\t* gcc.target/mips/mips-3d-5.c: New test.\n+\t* gcc.target/mips/mips-3d-6.c: New test.\n+\t* gcc.target/mips/mips-3d-7.c: New test.\n+\t* gcc.target/mips/mips-3d-8.c: New test.\n+\t* gcc.target/mips/mips-3d-9.c: New test.\n+\t* gcc.target/mips/mips-ps-1.c: New test.\n+\t* gcc.target/mips/mips-ps-2.c: New test.\n+\t* gcc.target/mips/mips-ps-3.c: New test.\n+\t* gcc.target/mips/mips-ps-4.c: New test.\n+\t* gcc.target/mips/mips-ps-type.c: New test.\n+\t\n 2004-09-02  Paul Brook  <paul@codesourcery.com>\n \n \t* gfortran.dg/edit_real_1.f90: Add new tests."}, {"sha": "c351d8c63a5d1713243d0f2127f365b8395f568e", "filename": "gcc/testsuite/gcc.target/mips/mips-3d-1.c", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-1.c?ref=6cbc6f0db154b001895740d108b56558fe4761b9", "patch": "@@ -0,0 +1,127 @@\n+/* { dg-do run { target mipsisa64*-*-* } } */\n+/* { dg-options \"-mips64 -O2 -mips3d -mhard-float -mfp64\" } */\n+\n+/* Test MIPS-3D builtin functions */\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+typedef float v2sf __attribute__ ((vector_size(8)));\n+\n+int main ()\n+{\n+  int little_endian;\n+  v2sf a, b, c, d;\n+  float f1, f2, f3, f4, f5, f6;\n+  double d1, d2, d3, d4, d5, d6, d7, d8, d9;\n+  v2sf ps1, ps2, ps3, ps4, ps5, ps6;\n+\n+  union { long long ll; int i[2]; } endianness_test;\n+  endianness_test.ll = 1;\n+  little_endian = endianness_test.i[0];\n+\n+  /* addr.ps */\n+  a = (v2sf) {12, 34};\n+  b = (v2sf) {45, 67};\n+  c = __builtin_mips_addr_ps (a, b);\n+  if (little_endian)\n+    d = (v2sf) {112, 46};\n+  else\n+    d = (v2sf) {46, 112};\n+\n+  if (!__builtin_mips_all_c_eq_ps(c, d))\n+     abort ();\n+\n+  /* mulr.ps */\n+  a = (v2sf) {12, 34};\n+  b = (v2sf) {45, 67};\n+  c = __builtin_mips_mulr_ps (a, b);\n+  if (little_endian)\n+    d = (v2sf) {3015, 408};\n+  else\n+    d = (v2sf) {408, 3015};\n+\n+  if (!__builtin_mips_all_c_eq_ps(c, d))\n+     abort ();\n+\n+  /* cvt.pw.ps */\n+  a = (v2sf) {12345.34, 67890.45};\n+  b = __builtin_mips_cvt_pw_ps (a);\n+\n+  /* cvt.ps.pw */\n+  c = __builtin_mips_cvt_ps_pw (b);\n+  d = (v2sf) {12345.0, 67890.0};\n+\n+  if (!__builtin_mips_all_c_eq_ps(c, d))\n+     abort ();\n+\n+  /* recip1.s recip2.s */\n+  f1 = 40;\n+  f2 = __builtin_mips_recip1_s (f1);\n+  f3 = __builtin_mips_recip2_s (f2, f1);\n+  f4 = f2 + f2 * f3;\n+  f5 = 0.025;\n+\n+  if (f4 != f5)\n+    abort ();\n+\n+  /* recip1.d recip2.d */\n+  d1 = 80;\n+  d2 = __builtin_mips_recip1_d (d1);\n+  d3 = __builtin_mips_recip2_d (d2, d1);\n+  d4 = d2 + d2 * d3;\n+  d5 = __builtin_mips_recip2_d (d4, d1);\n+  d6 = d4 + d4 * d5;\n+  d7 = 0.0125;\n+\n+  if (d6 != d7)\n+    abort ();\n+\n+  /* recip1.ps recip2.ps */\n+  ps1 = (v2sf) {100, 200};\n+  ps2 = __builtin_mips_recip1_ps (ps1);\n+  ps3 = __builtin_mips_recip2_ps (ps2, ps1);\n+  ps4 = ps2 + ps2 * ps3;\n+  ps5 = (v2sf) {0.01, 0.005};\n+\n+  if (!__builtin_mips_all_c_eq_ps(ps4, ps5))\n+    abort ();\n+\n+  /* rsqrt1.s rsqrt2.s */\n+  f1 = 400;\n+  f2 = __builtin_mips_rsqrt1_s (f1);\n+  f3 = f2 * f1;\n+  f4 = __builtin_mips_rsqrt2_s (f3, f2);\n+  f5 = f2 + f2 * f4;\n+  f6 = 0.05;\n+\n+  if (f5 != f6)\n+    abort ();\n+\n+  /* rsqrt1.d rsqrt2.d */\n+  d1 = 1600;\n+  d2 = __builtin_mips_rsqrt1_d (d1);\n+  d3 = d2 * d1;\n+  d4 = __builtin_mips_rsqrt2_d (d3, d2);\n+  d5 = d2 + d2 * d4;\n+  d6 = d1 * d5;\n+  d7 = __builtin_mips_rsqrt2_d (d6, d5);\n+  d8 = d5 + d5 * d7;\n+  d9 = 0.025;\n+\n+  if (d8 != d9)\n+    abort ();\n+\n+  /* rsqrt1.ps rsqrt2.ps */\n+  ps1 = (v2sf) {400, 100};\n+  ps2 = __builtin_mips_rsqrt1_ps (ps1);\n+  ps3 = ps2 * ps1;\n+  ps4 = __builtin_mips_rsqrt2_ps (ps3, ps2);\n+  ps5 = ps2 + ps2 * ps4;\n+  ps6 = (v2sf) {0.05, 0.1};\n+\n+  if (!__builtin_mips_all_c_eq_ps(ps5, ps6))\n+     abort ();\n+\n+  printf (\"Test Passes\\n\");\n+  exit (0);\n+}"}, {"sha": "e34022c7a4956ba6334a0a1ebfc08e357f6d623a", "filename": "gcc/testsuite/gcc.target/mips/mips-3d-2.c", "status": "added", "additions": 554, "deletions": 0, "changes": 554, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-2.c?ref=6cbc6f0db154b001895740d108b56558fe4761b9", "patch": "@@ -0,0 +1,554 @@\n+/* { dg-do run { target mipsisa64*-*-* } } */\n+/* { dg-options \"-mips64 -O2 -mips3d -mhard-float -mfp64\" } */\n+\n+/* Test MIPS-3D branch-if-any-two builtin functions */\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+typedef float v2sf __attribute__ ((vector_size(8)));\n+\n+int test0 (v2sf a, v2sf b);\n+int test1 (v2sf a, v2sf b);\n+int test2 (v2sf a, v2sf b);\n+int test3 (v2sf a, v2sf b);\n+int test4 (v2sf a, v2sf b);\n+int test5 (v2sf a, v2sf b);\n+int test6 (v2sf a, v2sf b);\n+int test7 (v2sf a, v2sf b);\n+int test8 (v2sf a, v2sf b);\n+int test9 (v2sf a, v2sf b);\n+int test10 (v2sf a, v2sf b);\n+int test11 (v2sf a, v2sf b);\n+int test12 (v2sf a, v2sf b);\n+int test13 (v2sf a, v2sf b);\n+int test14 (v2sf a, v2sf b);\n+int test15 (v2sf a, v2sf b);\n+int test16 (v2sf a, v2sf b);\n+int test17 (v2sf a, v2sf b);\n+int test18 (v2sf a, v2sf b);\n+int test19 (v2sf a, v2sf b);\n+int test20 (v2sf a, v2sf b);\n+int test21 (v2sf a, v2sf b);\n+int test22 (v2sf a, v2sf b);\n+int test23 (v2sf a, v2sf b);\n+int test24 (v2sf a, v2sf b);\n+int test25 (v2sf a, v2sf b);\n+int test26 (v2sf a, v2sf b);\n+int test27 (v2sf a, v2sf b);\n+int test28 (v2sf a, v2sf b);\n+int test29 (v2sf a, v2sf b);\n+int test30 (v2sf a, v2sf b);\n+int test31 (v2sf a, v2sf b);\n+\n+float qnan = 1.0f/0.0f - 1.0f/0.0f;\n+\n+int main ()\n+{\n+  v2sf a, b, c, d;\n+  int i, j;\n+\n+  /* c.eq.ps */\n+  a = (v2sf) {12, 34};\n+  b = (v2sf) {56, 78};\n+  i = 0;\n+  j = 0;\n+  if (__builtin_mips_any_c_eq_ps(a, b) != i)\n+     abort ();\n+  if (__builtin_mips_all_c_eq_ps(a, b) != j)\n+     abort ();\n+\n+  /* c.eq.ps */\n+  a = (v2sf) {12, 34};\n+  b = (v2sf) {12, 78};\n+  i = 1;\n+  j = 0;\n+  if (__builtin_mips_any_c_eq_ps(a, b) != i)\n+     abort ();\n+  if (__builtin_mips_all_c_eq_ps(a, b) != j)\n+     abort ();\n+\n+  /* c.eq.ps */\n+  a = (v2sf) {12, 34};\n+  b = (v2sf) {56, 34};\n+  i = 1;\n+  j = 0;\n+  if (__builtin_mips_any_c_eq_ps(a, b) != i)\n+     abort ();\n+  if (__builtin_mips_all_c_eq_ps(a, b) != j)\n+     abort ();\n+\n+  /* c.eq.ps */\n+  a = (v2sf) {12, 34};\n+  b = (v2sf) {12, 34};\n+  i = 1;\n+  j = 1;\n+  if (__builtin_mips_any_c_eq_ps(a, b) != i)\n+     abort ();\n+  if (__builtin_mips_all_c_eq_ps(a, b) != j)\n+     abort ();\n+\n+  /* Test with 16 operators */\n+  a = (v2sf) {10.58, 1984.0};\n+  b = (v2sf) {567.345, 1984.0};\n+\n+  i = test0 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test3 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test4 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test5 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test6 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test7 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test8 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test9 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test11 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test12 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test13 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test14 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test15 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test16 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test17 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test18 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test19 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test20 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test21 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test22 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test23 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test24 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test25 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test26 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test27 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test28 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test29 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test30 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test31 (a, b);\n+  if (i != 1)\n+    abort ();\n+\n+  /* Reverse arguments */\n+  i = test0 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test3 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test4 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test5 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test6 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test7 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test8 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test9 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test11 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test12 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test13 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test14 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test15 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test16 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test17 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test18 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test19 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test20 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test21 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test22 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test23 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test24 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test25 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test26 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test27 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test28 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test29 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test30 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test31 (b, a);\n+  if (i != 0)\n+    abort ();\n+\n+#ifndef __FAST_MATH__\n+  /* Test with 16 operators */\n+  a = (v2sf) {qnan, qnan};\n+  b = (v2sf) {567.345, 1984.0};\n+\n+  i = test0 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test3 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test4 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test5 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test6 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test7 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test8 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test9 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test11 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test12 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test13 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test14 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test15 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test16 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test17 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test18 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test19 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test20 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test21 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test22 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test23 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test24 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test25 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test26 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test27 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test28 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test29 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test30 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test31 (a, b);\n+  if (i != 1)\n+    abort ();\n+#endif\n+\n+  printf (\"Test Passes\\n\");\n+  exit (0);\n+}\n+\n+int test0 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_c_f_ps (a, b);\n+}\n+\n+int test1 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_c_f_ps (a, b);\n+}\n+\n+int test2 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_c_un_ps (a, b);\n+}\n+\n+int test3 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_c_un_ps (a, b);\n+}\n+\n+int test4 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_c_eq_ps (a, b);\n+}\n+\n+int test5 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_c_eq_ps (a, b);\n+}\n+\n+int test6 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_c_ueq_ps (a, b);\n+}\n+\n+int test7 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_c_ueq_ps (a, b);\n+}\n+\n+int test8 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_c_olt_ps (a, b);\n+}\n+\n+int test9 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_c_olt_ps (a, b);\n+}\n+\n+int test10 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_c_ult_ps (a, b);\n+}\n+\n+int test11 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_c_ult_ps (a, b);\n+}\n+\n+int test12 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_c_ole_ps (a, b);\n+}\n+\n+int test13 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_c_ole_ps (a, b);\n+}\n+\n+int test14 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_c_ule_ps (a, b);\n+}\n+\n+int test15 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_c_ule_ps (a, b);\n+}\n+\n+int test16 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_c_sf_ps (a, b);\n+}\n+\n+int test17 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_c_sf_ps (a, b);\n+}\n+\n+int test18 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_c_ngle_ps (a, b);\n+}\n+\n+int test19 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_c_ngle_ps (a, b);\n+}\n+\n+int test20 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_c_seq_ps (a, b);\n+}\n+\n+int test21 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_c_seq_ps (a, b);\n+}\n+\n+int test22 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_c_ngl_ps (a, b);\n+}\n+\n+int test23 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_c_ngl_ps (a, b);\n+}\n+\n+int test24 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_c_lt_ps (a, b);\n+}\n+\n+int test25 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_c_lt_ps (a, b);\n+}\n+\n+int test26 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_c_nge_ps (a, b);\n+}\n+\n+int test27 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_c_nge_ps (a, b);\n+}\n+\n+int test28 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_c_le_ps (a, b);\n+}\n+\n+int test29 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_c_le_ps (a, b);\n+}\n+\n+int test30 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_c_ngt_ps (a, b);\n+}\n+\n+int test31 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_c_ngt_ps (a, b);\n+}"}, {"sha": "7044fc952f0e8bdec358478c332e130557d381ec", "filename": "gcc/testsuite/gcc.target/mips/mips-3d-3.c", "status": "added", "additions": 1095, "deletions": 0, "changes": 1095, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-3.c?ref=6cbc6f0db154b001895740d108b56558fe4761b9", "patch": "@@ -0,0 +1,1095 @@\n+/* { dg-do run { target mipsisa64*-*-* } } */\n+/* { dg-options \"-mips64 -O2 -mips3d -mhard-float -mfp64\" } */\n+\n+/* Test MIPS-3D absolute compare builtin functions */\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+typedef float v2sf __attribute__ ((vector_size(8)));\n+\n+int test0 (v2sf a, v2sf b);\n+int test1 (v2sf a, v2sf b);\n+int test2 (v2sf a, v2sf b);\n+int test3 (v2sf a, v2sf b);\n+int test4 (v2sf a, v2sf b);\n+int test5 (v2sf a, v2sf b);\n+int test6 (v2sf a, v2sf b);\n+int test7 (v2sf a, v2sf b);\n+int test8 (v2sf a, v2sf b);\n+int test9 (v2sf a, v2sf b);\n+int test10 (v2sf a, v2sf b);\n+int test11 (v2sf a, v2sf b);\n+int test12 (v2sf a, v2sf b);\n+int test13 (v2sf a, v2sf b);\n+int test14 (v2sf a, v2sf b);\n+int test15 (v2sf a, v2sf b);\n+int test16 (v2sf a, v2sf b);\n+int test17 (v2sf a, v2sf b);\n+int test18 (v2sf a, v2sf b);\n+int test19 (v2sf a, v2sf b);\n+int test20 (v2sf a, v2sf b);\n+int test21 (v2sf a, v2sf b);\n+int test22 (v2sf a, v2sf b);\n+int test23 (v2sf a, v2sf b);\n+int test24 (v2sf a, v2sf b);\n+int test25 (v2sf a, v2sf b);\n+int test26 (v2sf a, v2sf b);\n+int test27 (v2sf a, v2sf b);\n+int test28 (v2sf a, v2sf b);\n+int test29 (v2sf a, v2sf b);\n+int test30 (v2sf a, v2sf b);\n+int test31 (v2sf a, v2sf b);\n+int test32 (v2sf a, v2sf b);\n+int test33 (v2sf a, v2sf b);\n+int test34 (v2sf a, v2sf b);\n+int test35 (v2sf a, v2sf b);\n+int test36 (v2sf a, v2sf b);\n+int test37 (v2sf a, v2sf b);\n+int test38 (v2sf a, v2sf b);\n+int test39 (v2sf a, v2sf b);\n+int test40 (v2sf a, v2sf b);\n+int test41 (v2sf a, v2sf b);\n+int test42 (v2sf a, v2sf b);\n+int test43 (v2sf a, v2sf b);\n+int test44 (v2sf a, v2sf b);\n+int test45 (v2sf a, v2sf b);\n+int test46 (v2sf a, v2sf b);\n+int test47 (v2sf a, v2sf b);\n+int test48 (v2sf a, v2sf b);\n+int test49 (v2sf a, v2sf b);\n+int test50 (v2sf a, v2sf b);\n+int test51 (v2sf a, v2sf b);\n+int test52 (v2sf a, v2sf b);\n+int test53 (v2sf a, v2sf b);\n+int test54 (v2sf a, v2sf b);\n+int test55 (v2sf a, v2sf b);\n+int test56 (v2sf a, v2sf b);\n+int test57 (v2sf a, v2sf b);\n+int test58 (v2sf a, v2sf b);\n+int test59 (v2sf a, v2sf b);\n+int test60 (v2sf a, v2sf b);\n+int test61 (v2sf a, v2sf b);\n+int test62 (v2sf a, v2sf b);\n+int test63 (v2sf a, v2sf b);\n+\n+float qnan = 1.0f/0.0f - 1.0f/0.0f;\n+\n+int main ()\n+{\n+  int little_endian;\n+  v2sf a, b, c, d;\n+  int i, j, k, l;\n+\n+  union { long long ll; int i[2]; } endianness_test;\n+  endianness_test.ll = 1;\n+  little_endian = endianness_test.i[0];\n+\n+  /* cabs.eq.ps */\n+  a = (v2sf) {12, 34};\n+  b = (v2sf) {-56, -78};\n+  i = 0;\n+  j = 0;\n+  k = 0;\n+  l = 0;\n+  if (__builtin_mips_any_cabs_eq_ps(a, b) != i)\n+     abort ();\n+  if (__builtin_mips_upper_cabs_eq_ps(a, b) != j)\n+     abort ();\n+  if (__builtin_mips_lower_cabs_eq_ps(a, b) != k)\n+     abort ();\n+  if (__builtin_mips_all_cabs_eq_ps(a, b) != l)\n+     abort ();\n+\n+  /* cabs.eq.ps */\n+  a = (v2sf) {12, 34};\n+  b = (v2sf) {-12, -78};\n+  i = 1;\n+  if (little_endian)\n+    {\n+      j = 0;\n+      k = 1;\n+    }\n+  else\n+    {\n+      j = 1;\n+      k = 0;\n+    }\n+  l = 0;\n+  if (__builtin_mips_any_cabs_eq_ps(a, b) != i)\n+     abort ();\n+  if (__builtin_mips_upper_cabs_eq_ps(a, b) != j)\n+     abort ();\n+  if (__builtin_mips_lower_cabs_eq_ps(a, b) != k)\n+     abort ();\n+  if (__builtin_mips_all_cabs_eq_ps(a, b) != l)\n+     abort ();\n+\n+  /* cabs.eq.ps */\n+  a = (v2sf) {12, 34};\n+  b = (v2sf) {-56, -34};\n+  i = 1;\n+  if (little_endian)\n+    {\n+      j = 1;\n+      k = 0;\n+    }\n+  else\n+    {\n+      j = 0;\n+      k = 1;\n+    }\n+  l = 0;\n+  if (__builtin_mips_any_cabs_eq_ps(a, b) != i)\n+     abort ();\n+  if (__builtin_mips_upper_cabs_eq_ps(a, b) != j)\n+     abort ();\n+  if (__builtin_mips_lower_cabs_eq_ps(a, b) != k)\n+     abort ();\n+  if (__builtin_mips_all_cabs_eq_ps(a, b) != l)\n+     abort ();\n+\n+  /* cabs.eq.ps */\n+  a = (v2sf) {12, 34};\n+  b = (v2sf) {-12, -34};\n+  i = 1;\n+  j = 1;\n+  k = 1;\n+  l = 1;\n+  if (__builtin_mips_any_cabs_eq_ps(a, b) != i)\n+     abort ();\n+  if (__builtin_mips_upper_cabs_eq_ps(a, b) != j)\n+     abort ();\n+  if (__builtin_mips_lower_cabs_eq_ps(a, b) != k)\n+     abort ();\n+  if (__builtin_mips_all_cabs_eq_ps(a, b) != l)\n+     abort ();\n+\n+  /* Test all comparisons */\n+  if (little_endian)\n+    {\n+      a = (v2sf) {1984.0, 10.58};\n+      b = (v2sf) {-1984.0, -567.345};\n+    }\n+  else\n+    {\n+      a = (v2sf) {10.58, 1984.0};\n+      b = (v2sf) {-567.345, -1984.0};\n+    }\n+\n+  i = test0 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test3 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test4 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test5 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test6 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test7 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test8 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test9 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test11 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test12 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test13 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test14 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test15 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test16 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test17 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test18 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test19 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test20 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test21 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test22 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test23 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test24 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test25 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test26 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test27 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test28 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test29 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test30 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test31 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test32 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test33 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test34 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test35 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test36 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test37 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test38 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test39 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test40 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test41 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test42 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test43 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test44 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test45 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test46 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test47 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test48 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test49 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test50 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test51 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test52 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test53 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test54 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test55 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test56 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test57 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test58 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test59 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test60 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test61 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test62 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test63 (a, b);\n+  if (i != 1)\n+    abort ();\n+\n+  /* Reverse arguments */\n+  i = test0 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test3 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test4 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test5 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test6 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test7 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test8 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test9 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test11 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test12 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test13 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test14 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test15 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test16 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test17 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test18 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test19 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test20 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test21 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test22 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test23 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test24 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test25 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test26 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test27 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test28 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test29 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test30 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test31 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test32 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test33 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test34 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test35 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test36 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test37 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test38 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test39 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test40 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test41 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test42 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test43 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test44 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test45 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test46 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test47 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test48 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test49 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test50 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test51 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test52 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test53 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test54 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test55 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test56 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test57 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test58 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test59 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test60 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test61 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test62 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test63 (b, a);\n+  if (i != 0)\n+    abort ();\n+\n+#ifndef __FAST_MATH__\n+  /* Test all comparisons */\n+  if (little_endian)\n+    {\n+      a = (v2sf) {qnan, qnan};\n+      b = (v2sf) {-1984.0, -567.345};\n+    }\n+  else\n+    {\n+      a = (v2sf) {qnan, qnan};\n+      b = (v2sf) {-567.345, -1984.0};\n+    }\n+\n+  i = test0 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test3 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test4 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test5 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test6 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test7 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test8 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test9 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test11 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test12 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test13 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test14 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test15 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test16 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test17 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test18 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test19 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test20 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test21 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test22 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test23 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test24 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test25 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test26 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test27 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test28 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test29 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test30 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test31 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test32 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test33 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test34 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test35 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test36 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test37 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test38 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test39 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test40 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test41 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test42 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test43 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test44 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test45 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test46 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test47 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test48 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test49 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test50 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test51 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test52 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test53 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test54 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test55 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test56 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test57 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test58 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test59 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test60 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test61 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test62 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test63 (a, b);\n+  if (i != 1)\n+    abort ();\n+#endif\n+\n+  printf (\"Test Passes\\n\");\n+  exit (0);\n+}\n+\n+int test0 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_cabs_f_ps (a, b);\n+}\n+\n+int test1 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_cabs_f_ps (a, b);\n+}\n+\n+int test2 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_cabs_f_ps (a, b);\n+}\n+\n+int test3 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_cabs_f_ps (a, b);\n+}\n+\n+int test4 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_cabs_un_ps (a, b);\n+}\n+\n+int test5 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_cabs_un_ps (a, b);\n+}\n+\n+int test6 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_cabs_un_ps (a, b);\n+}\n+\n+int test7 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_cabs_un_ps (a, b);\n+}\n+\n+int test8 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_cabs_eq_ps (a, b);\n+}\n+\n+int test9 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_cabs_eq_ps (a, b);\n+}\n+\n+int test10 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_cabs_eq_ps (a, b);\n+}\n+\n+int test11 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_cabs_eq_ps (a, b);\n+}\n+\n+int test12 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_cabs_ueq_ps (a, b);\n+}\n+\n+int test13 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_cabs_ueq_ps (a, b);\n+}\n+\n+int test14 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_cabs_ueq_ps (a, b);\n+}\n+\n+int test15 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_cabs_ueq_ps (a, b);\n+}\n+\n+int test16 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_cabs_olt_ps (a, b);\n+}\n+\n+int test17 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_cabs_olt_ps (a, b);\n+}\n+\n+int test18 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_cabs_olt_ps (a, b);\n+}\n+\n+int test19 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_cabs_olt_ps (a, b);\n+}\n+\n+int test20 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_cabs_ult_ps (a, b);\n+}\n+\n+int test21 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_cabs_ult_ps (a, b);\n+}\n+\n+int test22 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_cabs_ult_ps (a, b);\n+}\n+\n+int test23 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_cabs_ult_ps (a, b);\n+}\n+\n+int test24 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_cabs_ole_ps (a, b);\n+}\n+\n+int test25 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_cabs_ole_ps (a, b);\n+}\n+\n+int test26 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_cabs_ole_ps (a, b);\n+}\n+\n+int test27 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_cabs_ole_ps (a, b);\n+}\n+\n+int test28 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_cabs_ule_ps (a, b);\n+}\n+\n+int test29 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_cabs_ule_ps (a, b);\n+}\n+\n+int test30 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_cabs_ule_ps (a, b);\n+}\n+\n+int test31 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_cabs_ule_ps (a, b);\n+}\n+\n+int test32 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_cabs_sf_ps (a, b);\n+}\n+\n+int test33 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_cabs_sf_ps (a, b);\n+}\n+\n+int test34 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_cabs_sf_ps (a, b);\n+}\n+\n+int test35 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_cabs_sf_ps (a, b);\n+}\n+\n+int test36 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_cabs_ngle_ps (a, b);\n+}\n+\n+int test37 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_cabs_ngle_ps (a, b);\n+}\n+\n+int test38 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_cabs_ngle_ps (a, b);\n+}\n+\n+int test39 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_cabs_ngle_ps (a, b);\n+}\n+\n+int test40 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_cabs_seq_ps (a, b);\n+}\n+\n+int test41 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_cabs_seq_ps (a, b);\n+}\n+\n+int test42 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_cabs_seq_ps (a, b);\n+}\n+\n+int test43 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_cabs_seq_ps (a, b);\n+}\n+\n+int test44 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_cabs_ngl_ps (a, b);\n+}\n+\n+int test45 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_cabs_ngl_ps (a, b);\n+}\n+\n+int test46 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_cabs_ngl_ps (a, b);\n+}\n+\n+int test47 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_cabs_ngl_ps (a, b);\n+}\n+\n+int test48 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_cabs_lt_ps (a, b);\n+}\n+\n+int test49 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_cabs_lt_ps (a, b);\n+}\n+\n+int test50 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_cabs_lt_ps (a, b);\n+}\n+\n+int test51 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_cabs_lt_ps (a, b);\n+}\n+\n+int test52 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_cabs_nge_ps (a, b);\n+}\n+\n+int test53 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_cabs_nge_ps (a, b);\n+}\n+\n+int test54 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_cabs_nge_ps (a, b);\n+}\n+\n+int test55 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_cabs_nge_ps (a, b);\n+}\n+\n+int test56 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_cabs_le_ps (a, b);\n+}\n+\n+int test57 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_cabs_le_ps (a, b);\n+}\n+\n+int test58 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_cabs_le_ps (a, b);\n+}\n+\n+int test59 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_cabs_le_ps (a, b);\n+}\n+\n+int test60 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_any_cabs_ngt_ps (a, b);\n+}\n+\n+int test61 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_cabs_ngt_ps (a, b);\n+}\n+\n+int test62 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_cabs_ngt_ps (a, b);\n+}\n+\n+int test63 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_all_cabs_ngt_ps (a, b);\n+}"}, {"sha": "9723047ff834690ce8e92f1f4fe167824c8bb505", "filename": "gcc/testsuite/gcc.target/mips/mips-3d-4.c", "status": "added", "additions": 590, "deletions": 0, "changes": 590, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-4.c?ref=6cbc6f0db154b001895740d108b56558fe4761b9", "patch": "@@ -0,0 +1,590 @@\n+/* { dg-do run { target mipsisa64*-*-* } } */\n+/* { dg-options \"-mips64 -O2 -mips3d -mhard-float -mfp64\" } */\n+\n+/* Test MIPS-3D branch-if-any-four builtin functions */\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+typedef float v2sf __attribute__ ((vector_size(8)));\n+\n+int test0 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test1 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test2 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test3 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test4 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test5 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test6 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test7 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test8 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test9 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test10 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test11 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test12 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test13 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test14 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test15 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test16 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test17 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test18 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test19 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test20 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test21 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test22 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test23 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test24 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test25 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test26 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test27 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test28 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test29 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test30 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test31 (v2sf a, v2sf b, v2sf c, v2sf d);\n+\n+float qnan = 1.0f/0.0f - 1.0f/0.0f;\n+\n+int main ()\n+{\n+  v2sf a, b, c, d;\n+  int i, j;\n+\n+  /* c.eq.ps */\n+  a = (v2sf) {11, 22};\n+  b = (v2sf) {33, 44};\n+  c = (v2sf) {55, 66};\n+  d = (v2sf) {77, 88};\n+  i = 0;\n+  j = 0;\n+  if (__builtin_mips_any_c_eq_4s(a, b, c, d) != i)\n+    abort ();\n+  if (__builtin_mips_all_c_eq_4s(a, b, c, d) != j)\n+    abort ();\n+\n+  /* c.eq.ps */\n+  a = (v2sf) {11, 22};\n+  b = (v2sf) {11, 44};\n+  c = (v2sf) {55, 66};\n+  d = (v2sf) {77, 88};\n+  i = 1;\n+  j = 0;\n+  if (__builtin_mips_any_c_eq_4s(a, b, c, d) != i)\n+    abort ();\n+  if (__builtin_mips_all_c_eq_4s(a, b, c, d) != j)\n+    abort ();\n+\n+  /* c.eq.ps */\n+  a = (v2sf) {11, 22};\n+  b = (v2sf) {33, 22};\n+  c = (v2sf) {55, 66};\n+  d = (v2sf) {77, 88};\n+  i = 1;\n+  j = 0;\n+  if (__builtin_mips_any_c_eq_4s(a, b, c, d) != i)\n+    abort ();\n+  if (__builtin_mips_all_c_eq_4s(a, b, c, d) != j)\n+    abort ();\n+\n+  /* c.eq.ps */\n+  a = (v2sf) {11, 22};\n+  b = (v2sf) {33, 44};\n+  c = (v2sf) {55, 66};\n+  d = (v2sf) {55, 88};\n+  i = 1;\n+  j = 0;\n+  if (__builtin_mips_any_c_eq_4s(a, b, c, d) != i)\n+    abort ();\n+  if (__builtin_mips_all_c_eq_4s(a, b, c, d) != j)\n+    abort ();\n+\n+  /* c.eq.ps */\n+  a = (v2sf) {11, 22};\n+  b = (v2sf) {33, 44};\n+  c = (v2sf) {55, 66};\n+  d = (v2sf) {77, 66};\n+  i = 1;\n+  j = 0;\n+  if (__builtin_mips_any_c_eq_4s(a, b, c, d) != i)\n+    abort ();\n+  if (__builtin_mips_all_c_eq_4s(a, b, c, d) != j)\n+    abort ();\n+\n+  /* c.eq.ps */\n+  a = (v2sf) {11, 22};\n+  b = (v2sf) {11, 22};\n+  c = (v2sf) {55, 66};\n+  d = (v2sf) {55, 66};\n+  i = 1;\n+  j = 1;\n+  if (__builtin_mips_any_c_eq_4s(a, b, c, d) != i)\n+    abort ();\n+  if (__builtin_mips_all_c_eq_4s(a, b, c, d) != j)\n+    abort ();\n+\n+  /* Test all comparisons */\n+  a = (v2sf) {11, 33};\n+  b = (v2sf) {33, 11};\n+  c = (v2sf) {55, 66};\n+  d = (v2sf) {55, 88};\n+\n+  i = test0 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test3 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test4 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test5 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test6 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test7 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test8 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test9 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test11 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test12 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test13 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test14 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test15 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test16 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test17 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test18 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test19 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test20 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test21 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test22 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test23 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test24 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test25 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test26 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test27 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test28 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test29 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test30 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test31 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+\n+  /* Reversed arguments */\n+  i = test0 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test3 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test4 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test5 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test6 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test7 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test8 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test9 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test11 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test12 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test13 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test14 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test15 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test16 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test17 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test18 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test19 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test20 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test21 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test22 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test23 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test24 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test25 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test26 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test27 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test28 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test29 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test30 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test31 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+\n+#ifndef __FAST_MATH__\n+  /* Test all comparisons */\n+  a = (v2sf) {qnan, qnan};\n+  b = (v2sf) {33, 11};\n+  c = (v2sf) {qnan, qnan};\n+  d = (v2sf) {55, 88};\n+\n+  i = test0 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test3 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test4 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test5 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test6 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test7 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test8 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test9 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test11 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test12 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test13 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test14 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test15 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test16 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test17 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test18 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test19 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test20 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test21 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test22 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test23 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test24 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test25 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test26 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test27 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test28 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test29 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test30 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test31 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+#endif\n+\n+  printf (\"Test Passes\\n\");\n+  exit (0);\n+}\n+\n+int test0 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_c_f_4s (a, b, c, d);\n+}\n+\n+int test1 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_c_f_4s (a, b, c, d);\n+}\n+\n+int test2 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_c_un_4s (a, b, c, d);\n+}\n+\n+int test3 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_c_un_4s (a, b, c, d);\n+}\n+\n+int test4 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_c_eq_4s (a, b, c, d);\n+}\n+\n+int test5 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_c_eq_4s (a, b, c, d);\n+}\n+\n+int test6 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_c_ueq_4s (a, b, c, d);\n+}\n+\n+int test7 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_c_ueq_4s (a, b, c, d);\n+}\n+\n+int test8 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_c_olt_4s (a, b, c, d);\n+}\n+\n+int test9 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_c_olt_4s (a, b, c, d);\n+}\n+\n+int test10 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_c_ult_4s (a, b, c, d);\n+}\n+\n+int test11 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_c_ult_4s (a, b, c, d);\n+}\n+\n+int test12 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_c_ole_4s (a, b, c, d);\n+}\n+\n+int test13 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_c_ole_4s (a, b, c, d);\n+}\n+\n+int test14 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_c_ule_4s (a, b, c, d);\n+}\n+\n+int test15 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_c_ule_4s (a, b, c, d);\n+}\n+\n+int test16 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_c_sf_4s (a, b, c, d);\n+}\n+\n+int test17 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_c_sf_4s (a, b, c, d);\n+}\n+\n+int test18 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_c_ngle_4s (a, b, c, d);\n+}\n+\n+int test19 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_c_ngle_4s (a, b, c, d);\n+}\n+\n+int test20 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_c_seq_4s (a, b, c, d);\n+}\n+\n+int test21 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_c_seq_4s (a, b, c, d);\n+}\n+\n+int test22 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_c_ngl_4s (a, b, c, d);\n+}\n+\n+int test23 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_c_ngl_4s (a, b, c, d);\n+}\n+\n+int test24 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_c_lt_4s (a, b, c, d);\n+}\n+\n+int test25 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_c_lt_4s (a, b, c, d);\n+}\n+\n+int test26 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_c_nge_4s (a, b, c, d);\n+}\n+\n+int test27 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_c_nge_4s (a, b, c, d);\n+}\n+\n+int test28 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_c_le_4s (a, b, c, d);\n+}\n+\n+int test29 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_c_le_4s (a, b, c, d);\n+}\n+\n+int test30 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_c_ngt_4s (a, b, c, d);\n+}\n+\n+int test31 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_c_ngt_4s (a, b, c, d);\n+}"}, {"sha": "bd4c857037d815e2e2800a7cb20ef3283331d387", "filename": "gcc/testsuite/gcc.target/mips/mips-3d-5.c", "status": "added", "additions": 590, "deletions": 0, "changes": 590, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-5.c?ref=6cbc6f0db154b001895740d108b56558fe4761b9", "patch": "@@ -0,0 +1,590 @@\n+/* { dg-do run { target mipsisa64*-*-* } } */\n+/* { dg-options \"-mips64 -O2 -mips3d -mhard-float -mfp64\" } */\n+\n+/* Test MIPS-3D absolute-compare & branch-if-any-four builtin functions */\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+typedef float v2sf __attribute__ ((vector_size(8)));\n+\n+int test0 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test1 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test2 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test3 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test4 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test5 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test6 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test7 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test8 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test9 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test10 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test11 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test12 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test13 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test14 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test15 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test16 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test17 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test18 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test19 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test20 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test21 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test22 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test23 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test24 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test25 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test26 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test27 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test28 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test29 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test30 (v2sf a, v2sf b, v2sf c, v2sf d);\n+int test31 (v2sf a, v2sf b, v2sf c, v2sf d);\n+\n+float qnan = 1.0f/0.0f - 1.0f/0.0f;\n+\n+int main ()\n+{\n+  v2sf a, b, c, d;\n+  int i, j;\n+\n+  /* cabs.eq.ps */\n+  a = (v2sf) {11, 22};\n+  b = (v2sf) {-33, -44};\n+  c = (v2sf) {55, 66};\n+  d = (v2sf) {-77, -88};\n+  i = 0;\n+  j = 0;\n+  if (__builtin_mips_any_cabs_eq_4s(a, b, c, d) != i)\n+     abort ();\n+  if (__builtin_mips_all_cabs_eq_4s(a, b, c, d) != j)\n+     abort ();\n+\n+  /* cabs.eq.ps */\n+  a = (v2sf) {11, 22};\n+  b = (v2sf) {-11, -44};\n+  c = (v2sf) {55, 66};\n+  d = (v2sf) {-77, -88};\n+  i = 1;\n+  j = 0;\n+  if (__builtin_mips_any_cabs_eq_4s(a, b, c, d) != i)\n+     abort ();\n+  if (__builtin_mips_all_cabs_eq_4s(a, b, c, d) != j)\n+     abort ();\n+\n+  /* cabs.eq.ps */\n+  a = (v2sf) {11, 22};\n+  b = (v2sf) {-33, -22};\n+  c = (v2sf) {55, 66};\n+  d = (v2sf) {-77, -88};\n+  i = 1;\n+  j = 0;\n+  if (__builtin_mips_any_cabs_eq_4s(a, b, c, d) != i)\n+     abort ();\n+  if (__builtin_mips_all_cabs_eq_4s(a, b, c, d) != j)\n+     abort ();\n+\n+  /* cabs.eq.ps */\n+  a = (v2sf) {11, 22};\n+  b = (v2sf) {-33, -44};\n+  c = (v2sf) {55, 66};\n+  d = (v2sf) {-55, -88};\n+  i = 1;\n+  j = 0;\n+  if (__builtin_mips_any_cabs_eq_4s(a, b, c, d) != i)\n+     abort ();\n+  if (__builtin_mips_all_cabs_eq_4s(a, b, c, d) != j)\n+     abort ();\n+\n+  /* cabs.eq.ps */\n+  a = (v2sf) {11, 22};\n+  b = (v2sf) {-33, -44};\n+  c = (v2sf) {55, 66};\n+  d = (v2sf) {-77, -66};\n+  i = 1;\n+  j = 0;\n+  if (__builtin_mips_any_cabs_eq_4s(a, b, c, d) != i)\n+     abort ();\n+  if (__builtin_mips_all_cabs_eq_4s(a, b, c, d) != j)\n+     abort ();\n+\n+  /* cabs.eq.ps */\n+  a = (v2sf) {11, 22};\n+  b = (v2sf) {-11, -22};\n+  c = (v2sf) {55, 66};\n+  d = (v2sf) {-55, -66};\n+  i = 1;\n+  j = 1;\n+  if (__builtin_mips_any_cabs_eq_4s(a, b, c, d) != i)\n+     abort ();\n+  if (__builtin_mips_all_cabs_eq_4s(a, b, c, d) != j)\n+     abort ();\n+\n+  /* Test all comparisons */\n+  a = (v2sf) {11, 33};\n+  b = (v2sf) {-33, -11};\n+  c = (v2sf) {55, 66};\n+  d = (v2sf) {-55, -88};\n+\n+  i = test0 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test3 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test4 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test5 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test6 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test7 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test8 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test9 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test11 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test12 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test13 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test14 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test15 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test16 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test17 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test18 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test19 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test20 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test21 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test22 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test23 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test24 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test25 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test26 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test27 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test28 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test29 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test30 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test31 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+\n+  /* Reversed arguments */\n+  i = test0 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test3 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test4 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test5 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test6 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test7 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test8 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test9 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test11 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test12 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test13 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test14 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test15 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test16 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test17 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test18 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test19 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test20 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test21 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test22 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test23 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test24 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test25 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test26 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test27 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test28 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test29 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+  i = test30 (b, a, d, c);\n+  if (i != 1)\n+    abort ();\n+  i = test31 (b, a, d, c);\n+  if (i != 0)\n+    abort ();\n+\n+#ifndef __FAST_MATH__\n+  /* Test all comparisons */\n+  a = (v2sf) {qnan, qnan};\n+  b = (v2sf) {-33, -11};\n+  c = (v2sf) {qnan, qnan};\n+  d = (v2sf) {-55, -88};\n+\n+  i = test0 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test3 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test4 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test5 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test6 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test7 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test8 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test9 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test11 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test12 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test13 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test14 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test15 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test16 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test17 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test18 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test19 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test20 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test21 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test22 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test23 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test24 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test25 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test26 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test27 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test28 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test29 (a, b, c, d);\n+  if (i != 0)\n+    abort ();\n+  i = test30 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+  i = test31 (a, b, c, d);\n+  if (i != 1)\n+    abort ();\n+#endif\n+\n+  printf (\"Test Passes\\n\");\n+  exit (0);\n+}\n+\n+int test0 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_cabs_f_4s (a, b, c, d);\n+}\n+\n+int test1 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_cabs_f_4s (a, b, c, d);\n+}\n+\n+int test2 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_cabs_un_4s (a, b, c, d);\n+}\n+\n+int test3 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_cabs_un_4s (a, b, c, d);\n+}\n+\n+int test4 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_cabs_eq_4s (a, b, c, d);\n+}\n+\n+int test5 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_cabs_eq_4s (a, b, c, d);\n+}\n+\n+int test6 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_cabs_ueq_4s (a, b, c, d);\n+}\n+\n+int test7 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_cabs_ueq_4s (a, b, c, d);\n+}\n+\n+int test8 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_cabs_olt_4s (a, b, c, d);\n+}\n+\n+int test9 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_cabs_olt_4s (a, b, c, d);\n+}\n+\n+int test10 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_cabs_ult_4s (a, b, c, d);\n+}\n+\n+int test11 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_cabs_ult_4s (a, b, c, d);\n+}\n+\n+int test12 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_cabs_ole_4s (a, b, c, d);\n+}\n+\n+int test13 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_cabs_ole_4s (a, b, c, d);\n+}\n+\n+int test14 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_cabs_ule_4s (a, b, c, d);\n+}\n+\n+int test15 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_cabs_ule_4s (a, b, c, d);\n+}\n+\n+int test16 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_cabs_sf_4s (a, b, c, d);\n+}\n+\n+int test17 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_cabs_sf_4s (a, b, c, d);\n+}\n+\n+int test18 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_cabs_ngle_4s (a, b, c, d);\n+}\n+\n+int test19 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_cabs_ngle_4s (a, b, c, d);\n+}\n+\n+int test20 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_cabs_seq_4s (a, b, c, d);\n+}\n+\n+int test21 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_cabs_seq_4s (a, b, c, d);\n+}\n+\n+int test22 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_cabs_ngl_4s (a, b, c, d);\n+}\n+\n+int test23 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_cabs_ngl_4s (a, b, c, d);\n+}\n+\n+int test24 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_cabs_lt_4s (a, b, c, d);\n+}\n+\n+int test25 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_cabs_lt_4s (a, b, c, d);\n+}\n+\n+int test26 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_cabs_nge_4s (a, b, c, d);\n+}\n+\n+int test27 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_cabs_nge_4s (a, b, c, d);\n+}\n+\n+int test28 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_cabs_le_4s (a, b, c, d);\n+}\n+\n+int test29 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_cabs_le_4s (a, b, c, d);\n+}\n+\n+int test30 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_any_cabs_ngt_4s (a, b, c, d);\n+}\n+\n+int test31 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_all_cabs_ngt_4s (a, b, c, d);\n+}"}, {"sha": "0b54ef1fecbbffffa5e3087ae333a6da0ecad6d4", "filename": "gcc/testsuite/gcc.target/mips/mips-3d-6.c", "status": "added", "additions": 284, "deletions": 0, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-6.c?ref=6cbc6f0db154b001895740d108b56558fe4761b9", "patch": "@@ -0,0 +1,284 @@\n+/* { dg-do run { target mipsisa64*-*-* } } */\n+/* { dg-options \"-mips64 -O2 -mips3d -mhard-float -mfp64\" } */\n+\n+/* Test MIPS-3D absolute compare (floats) builtin functions */\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+int test0 (float a, float b);\n+int test1 (float a, float b);\n+int test2 (float a, float b);\n+int test3 (float a, float b);\n+int test4 (float a, float b);\n+int test5 (float a, float b);\n+int test6 (float a, float b);\n+int test7 (float a, float b);\n+int test8 (float a, float b);\n+int test9 (float a, float b);\n+int test10 (float a, float b);\n+int test11 (float a, float b);\n+int test12 (float a, float b);\n+int test13 (float a, float b);\n+int test14 (float a, float b);\n+int test15 (float a, float b);\n+\n+int main ()\n+{\n+  float a, b;\n+  int i;\n+\n+  /* cabs.eq.s */\n+  a = 12;\n+  b = -56;\n+  i = 0;\n+  if (__builtin_mips_cabs_eq_s(a, b) != i)\n+     abort ();\n+\n+  /* cabs.eq.s */\n+  a = 12;\n+  b = -12;\n+  i = 1;\n+  if (__builtin_mips_cabs_eq_s(a, b) != i)\n+     abort ();\n+\n+  /* Test all comparisons */\n+  a = 10.58;\n+  b = 567.345;\n+\n+  i = test0 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test3 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test4 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test5 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test6 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test7 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test8 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test9 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test11 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test12 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test13 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test14 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test15 (a, b);\n+  if (i != 1)\n+    abort ();\n+\n+  /* Reversed arguments */\n+  i = test0 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test3 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test4 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test5 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test6 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test7 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test8 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test9 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test11 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test12 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test13 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test14 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test15 (b, a);\n+  if (i != 0)\n+    abort ();\n+\n+#ifndef __FAST_MATH__\n+  /* Test all comparisons */\n+  a = 1.0f/0.0f - 1.0f/0.0f; // QNaN\n+  b = 567.345;\n+\n+  i = test0 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test2 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test3 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test4 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test5 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test6 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test7 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test8 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test9 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test10 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test11 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test12 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test13 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test14 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test15 (a, b);\n+  if (i != 1)\n+    abort ();\n+#endif\n+\n+  printf (\"Test Passes\\n\");\n+  exit (0);\n+}\n+\n+int test0 (float a, float b)\n+{\n+  return __builtin_mips_cabs_f_s (a, b);\n+}\n+\n+int test1 (float a, float b)\n+{\n+  return __builtin_mips_cabs_un_s (a, b);\n+}\n+\n+int test2 (float a, float b)\n+{\n+  return __builtin_mips_cabs_eq_s (a, b);\n+}\n+\n+int test3 (float a, float b)\n+{\n+  return __builtin_mips_cabs_ueq_s (a, b);\n+}\n+\n+int test4 (float a, float b)\n+{\n+  return __builtin_mips_cabs_olt_s (a, b);\n+}\n+\n+int test5 (float a, float b)\n+{\n+  return __builtin_mips_cabs_ult_s (a, b);\n+}\n+\n+int test6 (float a, float b)\n+{\n+  return __builtin_mips_cabs_ole_s (a, b);\n+}\n+\n+int test7 (float a, float b)\n+{\n+  return __builtin_mips_cabs_ule_s (a, b);\n+}\n+\n+int test8 (float a, float b)\n+{\n+  return __builtin_mips_cabs_sf_s (a, b);\n+}\n+\n+int test9 (float a, float b)\n+{\n+  return __builtin_mips_cabs_ngle_s (a, b);\n+}\n+\n+int test10 (float a, float b)\n+{\n+  return __builtin_mips_cabs_seq_s (a, b);\n+}\n+\n+int test11 (float a, float b)\n+{\n+  return __builtin_mips_cabs_ngl_s (a, b);\n+}\n+\n+int test12 (float a, float b)\n+{\n+  return __builtin_mips_cabs_lt_s (a, b);\n+}\n+\n+int test13 (float a, float b)\n+{\n+  return __builtin_mips_cabs_nge_s (a, b);\n+}\n+\n+int test14 (float a, float b)\n+{\n+  return __builtin_mips_cabs_le_s (a, b);\n+}\n+\n+int test15 (float a, float b)\n+{\n+  return __builtin_mips_cabs_ngt_s (a, b);\n+}"}, {"sha": "1d9a481ef6592d890989c3a4ed03de385259ab53", "filename": "gcc/testsuite/gcc.target/mips/mips-3d-7.c", "status": "added", "additions": 284, "deletions": 0, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-7.c?ref=6cbc6f0db154b001895740d108b56558fe4761b9", "patch": "@@ -0,0 +1,284 @@\n+/* { dg-do run { target mipsisa64*-*-* } } */\n+/* { dg-options \"-mips64 -O2 -mips3d -mhard-float -mfp64\" } */\n+\n+/* Test MIPS-3D absolute compare (doubles) builtin functions */\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+int test0 (double a, double b);\n+int test1 (double a, double b);\n+int test2 (double a, double b);\n+int test3 (double a, double b);\n+int test4 (double a, double b);\n+int test5 (double a, double b);\n+int test6 (double a, double b);\n+int test7 (double a, double b);\n+int test8 (double a, double b);\n+int test9 (double a, double b);\n+int test10 (double a, double b);\n+int test11 (double a, double b);\n+int test12 (double a, double b);\n+int test13 (double a, double b);\n+int test14 (double a, double b);\n+int test15 (double a, double b);\n+\n+int main ()\n+{\n+  double a, b;\n+  int i;\n+\n+  /* cabs.eq.d */\n+  a = 12;\n+  b = -56;\n+  i = 0;\n+  if (__builtin_mips_cabs_eq_d(a, b) != i)\n+     abort ();\n+\n+  /* cabs.eq.d */\n+  a = 12;\n+  b = -12;\n+  i = 1;\n+  if (__builtin_mips_cabs_eq_d(a, b) != i)\n+     abort ();\n+\n+  /* Test all operators */\n+  a = 1984.0;\n+  b = 1984.0;\n+\n+  i = test0 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test3 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test4 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test5 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test6 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test7 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test8 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test9 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test11 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test12 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test13 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test14 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test15 (a, b);\n+  if (i != 1)\n+    abort ();\n+\n+  /* Reverse arguments */\n+  i = test0 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test3 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test4 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test5 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test6 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test7 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test8 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test9 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test11 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test12 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test13 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test14 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test15 (b, a);\n+  if (i != 1)\n+    abort ();\n+\n+#ifndef __FAST_MATH__\n+  /* Test all operators */\n+  a = 1.0/0.0 - 1.0/0.0; // QNaN\n+  b = 1.0/0.0 - 1.0/0.0; // QNaN\n+\n+  i = test0 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test2 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test3 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test4 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test5 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test6 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test7 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test8 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test9 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test10 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test11 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test12 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test13 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test14 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test15 (a, b);\n+  if (i != 1)\n+    abort ();\n+#endif\n+\n+  printf (\"Test Passes\\n\");\n+  exit (0);\n+}\n+\n+int test0 (double a, double b)\n+{\n+  return __builtin_mips_cabs_f_d (a, b);\n+}\n+\n+int test1 (double a, double b)\n+{\n+  return __builtin_mips_cabs_un_d (a, b);\n+}\n+\n+int test2 (double a, double b)\n+{\n+  return __builtin_mips_cabs_eq_d (a, b);\n+}\n+\n+int test3 (double a, double b)\n+{\n+  return __builtin_mips_cabs_ueq_d (a, b);\n+}\n+\n+int test4 (double a, double b)\n+{\n+  return __builtin_mips_cabs_olt_d (a, b);\n+}\n+\n+int test5 (double a, double b)\n+{\n+  return __builtin_mips_cabs_ult_d (a, b);\n+}\n+\n+int test6 (double a, double b)\n+{\n+  return __builtin_mips_cabs_ole_d (a, b);\n+}\n+\n+int test7 (double a, double b)\n+{\n+  return __builtin_mips_cabs_ule_d (a, b);\n+}\n+\n+int test8 (double a, double b)\n+{\n+  return __builtin_mips_cabs_sf_d (a, b);\n+}\n+\n+int test9 (double a, double b)\n+{\n+  return __builtin_mips_cabs_ngle_d (a, b);\n+}\n+\n+int test10 (double a, double b)\n+{\n+  return __builtin_mips_cabs_seq_d (a, b);\n+}\n+\n+int test11 (double a, double b)\n+{\n+  return __builtin_mips_cabs_ngl_d (a, b);\n+}\n+\n+int test12 (double a, double b)\n+{\n+  return __builtin_mips_cabs_lt_d (a, b);\n+}\n+\n+int test13 (double a, double b)\n+{\n+  return __builtin_mips_cabs_nge_d (a, b);\n+}\n+\n+int test14 (double a, double b)\n+{\n+  return __builtin_mips_cabs_le_d (a, b);\n+}\n+\n+int test15 (double a, double b)\n+{\n+  return __builtin_mips_cabs_ngt_d (a, b);\n+}"}, {"sha": "955c2664f904b8d8590ef643e7d947a2283d05a6", "filename": "gcc/testsuite/gcc.target/mips/mips-3d-8.c", "status": "added", "additions": 630, "deletions": 0, "changes": 630, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-8.c?ref=6cbc6f0db154b001895740d108b56558fe4761b9", "patch": "@@ -0,0 +1,630 @@\n+/* { dg-do run { target mipsisa64*-*-* } } */\n+/* { dg-options \"-mips64 -O2 -mips3d -mhard-float -mfp64\" } */\n+\n+/* Test MIPS-3D absolute compare and conditional move builtin functions */\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+typedef float v2sf __attribute__((vector_size(8)));\n+\n+v2sf test0 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test1 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test2 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test3 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test4 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test5 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test6 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test7 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test8 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test9 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test10 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test11 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test12 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test13 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test14 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test15 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test16 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test17 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test18 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test19 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test20 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test21 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test22 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test23 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test24 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test25 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test26 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test27 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test28 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test29 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test30 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test31 (v2sf a, v2sf b, v2sf c, v2sf d);\n+\n+float qnan = 1.0f/0.0f - 1.0f/0.0f;\n+\n+int main ()\n+{\n+  v2sf a, b, c, d, e, f;\n+\n+  /* Case 1 {diff, diff} */\n+  /* movt.ps */\n+  a = (v2sf) {5, 12};\n+  b = (v2sf) {-7, -6};\n+  c = (v2sf) {33, 123};\n+  d = (v2sf) {8, 78};\n+  e = __builtin_mips_movt_cabs_eq_ps (a, b, c, d);\n+  f = (v2sf) {33, 123};\n+  if (!__builtin_mips_all_c_eq_ps (e, f))\n+    abort ();\n+\n+  /* movf.ps */\n+  e = __builtin_mips_movf_cabs_eq_ps (a, b, c, d);\n+  f = (v2sf) {8, 78};\n+  if (!__builtin_mips_all_c_eq_ps (e, f))\n+    abort ();\n+\n+  /* Case 2 {same, diff} */\n+  /* movt.ps */\n+  a = (v2sf) {5, 12};\n+  b = (v2sf) {-5, -6};\n+  c = (v2sf) {33, 123};\n+  d = (v2sf) {8, 78};\n+  e = __builtin_mips_movt_cabs_eq_ps (a, b, c, d);\n+  f = (v2sf) {8, 123};\n+  if (!__builtin_mips_all_c_eq_ps (e, f))\n+    abort ();\n+\n+  /* movf.ps */\n+  e = __builtin_mips_movf_cabs_eq_ps (a, b, c, d);\n+  f = (v2sf) {33, 78};\n+  if (!__builtin_mips_all_c_eq_ps (e, f))\n+    abort ();\n+\n+  /* Case 3 {diff, same} */\n+  /* movt.ps */\n+  a = (v2sf) {5, 12};\n+  b = (v2sf) {-9, -12};\n+  c = (v2sf) {33, 123};\n+  d = (v2sf) {8, 78};\n+  e = __builtin_mips_movt_cabs_eq_ps (a, b, c, d);\n+  f = (v2sf) {33, 78};\n+  if (!__builtin_mips_all_c_eq_ps (e, f))\n+    abort ();\n+\n+  /* movf.ps */\n+  e = __builtin_mips_movf_cabs_eq_ps (a, b, c, d);\n+  f = (v2sf) {8, 123};\n+  if (!__builtin_mips_all_c_eq_ps (e, f))\n+    abort ();\n+\n+  /* Case 4 {same, same} */\n+  /* movt.ps */\n+  a = (v2sf) {5, 12};\n+  b = (v2sf) {-5, -12};\n+  c = (v2sf) {33, 123};\n+  d = (v2sf) {8, 78};\n+  e = __builtin_mips_movt_cabs_eq_ps (a, b, c, d);\n+  f = (v2sf) {8, 78};\n+  if (!__builtin_mips_all_c_eq_ps (e, f))\n+    abort ();\n+\n+  /* movf.ps */\n+  e = __builtin_mips_movf_cabs_eq_ps (a, b, c, d);\n+  f = (v2sf) {33, 123};\n+  if (!__builtin_mips_all_c_eq_ps (e, f))\n+    abort ();\n+\n+  /* Test all 16 operators */\n+  a = (v2sf) {-123, 123};\n+  b = (v2sf) {1000, -1000};\n+  c = (v2sf) {-33, 123};\n+  d = (v2sf) {8, -78};\n+\n+  e = test0 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c))\n+    abort ();\n+  e = test1 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test2 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test3 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test4 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test5 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test6 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test7 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test8 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+  e = test9 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+\n+  e = test10 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+  e = test11 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+\n+  e = test12 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+  e = test13 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+\n+  e = test14 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+  e = test15 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+\n+  e = test16 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test17 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test18 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test19 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test20 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test21 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test22 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test23 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test24 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+  e = test25 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+\n+  e = test26 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+  e = test27 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+\n+  e = test28 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+  e = test29 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+\n+  e = test30 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+  e = test31 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+\n+  /* Reversed arguments */\n+  e = test0 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c))\n+    abort ();\n+  e = test1 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test2 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test3 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test4 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test5 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test6 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test7 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test8 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test9 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test10 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test11 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test12 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test13 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test14 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test15 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test16 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test17 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test18 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test19 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test20 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test21 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test22 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test23 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test24 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test25 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test26 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test27 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test28 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test29 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test30 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test31 (b, a, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+#ifndef __FAST_MATH__\n+  /* Test all 16 operators */\n+  a = (v2sf) {qnan, qnan};\n+  b = (v2sf) {1000, -1000};\n+  c = (v2sf) {8, -78};\n+  d = (v2sf) {-33, 123};\n+\n+  e = test0 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c))\n+    abort ();\n+  e = test1 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test2 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+  e = test3 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+\n+  e = test4 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test5 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test6 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+  e = test7 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+\n+  e = test8 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test9 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test10 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+  e = test11 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+\n+  e = test12 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test13 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test14 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+  e = test15 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+\n+  e = test16 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test17 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test18 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+  e = test19 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+\n+  e = test20 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test21 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test22 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+  e = test23 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+\n+  e = test24 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test25 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test26 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+  e = test27 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+\n+  e = test28 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+  e = test29 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+\n+  e = test30 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, d)) \n+    abort ();\n+  e = test31 (a, b, c, d);\n+  if (!__builtin_mips_all_c_eq_ps (e, c)) \n+    abort ();\n+#endif\n+\n+  printf (\"Test Passes\\n\");\n+  exit (0);\n+}\n+\n+v2sf test0 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movt_cabs_f_ps (a, b, c, d);\n+}\n+\n+v2sf test1 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movf_cabs_f_ps (a, b, c, d);\n+}\n+\n+v2sf test2 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movt_cabs_un_ps (a, b, c, d);\n+}\n+\n+v2sf test3 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movf_cabs_un_ps (a, b, c, d);\n+}\n+\n+v2sf test4 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movt_cabs_eq_ps (a, b, c, d);\n+}\n+\n+v2sf test5 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movf_cabs_eq_ps (a, b, c, d);\n+}\n+\n+v2sf test6 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movt_cabs_ueq_ps (a, b, c, d);\n+}\n+\n+v2sf test7 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movf_cabs_ueq_ps (a, b, c, d);\n+}\n+\n+v2sf test8 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movt_cabs_olt_ps (a, b, c, d);\n+}\n+\n+v2sf test9 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movf_cabs_olt_ps (a, b, c, d);\n+}\n+\n+v2sf test10 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movt_cabs_ult_ps (a, b, c, d);\n+}\n+\n+v2sf test11 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movf_cabs_ult_ps (a, b, c, d);\n+}\n+\n+v2sf test12 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movt_cabs_ole_ps (a, b, c, d);\n+}\n+\n+v2sf test13 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movf_cabs_ole_ps (a, b, c, d);\n+}\n+\n+v2sf test14 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movt_cabs_ule_ps (a, b, c, d);\n+}\n+\n+v2sf test15 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movf_cabs_ule_ps (a, b, c, d);\n+}\n+\n+v2sf test16 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movt_cabs_sf_ps (a, b, c, d);\n+}\n+\n+v2sf test17 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movf_cabs_sf_ps (a, b, c, d);\n+}\n+\n+v2sf test18 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movt_cabs_ngle_ps (a, b, c, d);\n+}\n+\n+v2sf test19 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movf_cabs_ngle_ps (a, b, c, d);\n+}\n+\n+v2sf test20 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movt_cabs_seq_ps (a, b, c, d);\n+}\n+\n+v2sf test21 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movf_cabs_seq_ps (a, b, c, d);\n+}\n+\n+v2sf test22 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movt_cabs_ngl_ps (a, b, c, d);\n+}\n+\n+v2sf test23 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movf_cabs_ngl_ps (a, b, c, d);\n+}\n+\n+v2sf test24 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movt_cabs_lt_ps (a, b, c, d);\n+}\n+\n+v2sf test25 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movf_cabs_lt_ps (a, b, c, d);\n+}\n+\n+v2sf test26 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movt_cabs_nge_ps (a, b, c, d);\n+}\n+\n+v2sf test27 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movf_cabs_nge_ps (a, b, c, d);\n+}\n+\n+v2sf test28 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movt_cabs_le_ps (a, b, c, d);\n+}\n+\n+v2sf test29 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movf_cabs_le_ps (a, b, c, d);\n+}\n+\n+v2sf test30 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movt_cabs_ngt_ps (a, b, c, d);\n+}\n+\n+v2sf test31 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return  __builtin_mips_movf_cabs_ngt_ps (a, b, c, d);\n+}"}, {"sha": "23a1f48f0fba8c1a1634abafd4e2f77c92461964", "filename": "gcc/testsuite/gcc.target/mips/mips-3d-9.c", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-3d-9.c?ref=6cbc6f0db154b001895740d108b56558fe4761b9", "patch": "@@ -0,0 +1,158 @@\n+/* { dg-do run { target mipsisa64*-*-* } } */\n+/* { dg-options \"-mips64 -O2 -mips3d -mhard-float -mfp64\" } */\n+\n+/* Matrix Multiplications */\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+typedef float v2sf __attribute__((vector_size(8)));\n+\n+float a[4] = {1.1, 2.2, 3.3, 4.4};\n+float b[4][4] = {{1, 2, 3, 4},\n+                 {5, 6, 7, 8},\n+                 {9, 10, 11, 12},\n+                 {13, 14, 15, 16}};\n+\n+float c[4]; /* Result for matrix_multiply1() */\n+float d[4]; /* Result for matrix_multiply2() */\n+float e[4]; /* Result for matrix_multiply3() */\n+float f[4]; /* Result for matrix_multiply4() */\n+\n+void matrix_multiply1();\n+void matrix_multiply2();\n+void matrix_multiply3();\n+void matrix_multiply4();\n+\n+int main ()\n+{\n+  int i;\n+\n+  /* Version 1. Use float calculations */\n+  matrix_multiply1();\n+\n+  /* Version 2. Use paired-single instructions inside the inner loop*/\n+  matrix_multiply2();\n+  for (i = 0; i < 4; i++)\n+    if (d[i] != c[i])\n+      abort();\n+\n+  /* Version 3. Use paired-single instructions and unroll the inner loop */\n+  matrix_multiply3();\n+  for (i = 0; i < 4; i++)\n+    if (e[i] != c[i])\n+      abort();\n+\n+  /* Version 4. Use paired-single instructions and unroll all loops */\n+  matrix_multiply4();\n+  for (i = 0; i < 4; i++)\n+    if (f[i] != c[i])\n+      abort();\n+\n+  printf (\"Test Passes\\n\");\n+  exit (0);\n+}\n+\n+void matrix_multiply1()\n+{\n+  int i, j;\n+\n+  for (i = 0; i < 4; i++)\n+   {\n+     c[i] = 0.0;\n+\n+     for (j = 0; j < 4; j ++)\n+       c[i] += a[j] * b[j][i]; \n+   }\n+}\n+\n+void matrix_multiply2()\n+{\n+  int i, j;\n+  v2sf m1, m2;\n+  v2sf result, temp;\n+\n+  for (i = 0; i < 4; i++)\n+   {\n+     result = (v2sf) {0.0, 0.0};\n+\n+     for (j = 0; j < 4; j+=2)\n+     {\n+       /* Load two float values into m1 */\n+       m1 = (v2sf) {a[j], a[j+1]};\n+       m2 = (v2sf) {b[j][i], b[j+1][i]};\n+\n+       /* Multiply and add */\n+       result += m1 * m2;\n+     }\n+     \n+     /* Reduction add at the end */\n+     temp = __builtin_mips_addr_ps (result, result);\n+     d[i] = __builtin_mips_cvt_s_pl (temp);\n+   }\n+}\n+\n+void matrix_multiply3()\n+{\n+  int i;\n+  v2sf m1, m2, n1, n2;\n+  v2sf result, temp;\n+\n+  m1 = (v2sf) {a[0], a[1]};\n+  m2 = (v2sf) {a[2], a[3]};\n+\n+  for (i = 0; i < 4; i++)\n+   {\n+     n1 = (v2sf) {b[0][i], b[1][i]};\n+     n2 = (v2sf) {b[2][i], b[3][i]};\n+\n+     /* Multiply and add */\n+     result = m1 * n1 + m2 * n2;\n+     \n+     /* Reduction add at the end */\n+     temp = __builtin_mips_addr_ps (result, result);\n+     e[i] = __builtin_mips_cvt_s_pl (temp);\n+   }\n+}\n+\n+void matrix_multiply4()\n+{\n+  v2sf m1, m2;\n+  v2sf n1, n2, n3, n4, n5, n6, n7, n8;\n+  v2sf temp1, temp2, temp3, temp4;\n+  v2sf result1, result2;\n+\n+  /* Load a[0] a[1] values into m1\n+     Load a[2] a[3] values into m2 */\n+  m1 = (v2sf) {a[0], a[1]};\n+  m2 = (v2sf) {a[2], a[3]};\n+\n+  /* Load b[0][0] b[1][0] values into n1\n+     Load b[2][0] b[3][0] values into n2\n+     Load b[0][1] b[1][1] values into n3\n+     Load b[2][1] b[3][1] values into n4\n+     Load b[0][2] b[1][2] values into n5\n+     Load b[2][2] b[3][2] values into n6\n+     Load b[0][3] b[1][3] values into n7\n+     Load b[2][3] b[3][3] values into n8 */\n+  n1 = (v2sf) {b[0][0], b[1][0]};\n+  n2 = (v2sf) {b[2][0], b[3][0]};\n+  n3 = (v2sf) {b[0][1], b[1][1]};\n+  n4 = (v2sf) {b[2][1], b[3][1]};\n+  n5 = (v2sf) {b[0][2], b[1][2]};\n+  n6 = (v2sf) {b[2][2], b[3][2]};\n+  n7 = (v2sf) {b[0][3], b[1][3]};\n+  n8 = (v2sf) {b[2][3], b[3][3]};\n+\n+  temp1 = m1 * n1 + m2 * n2;\n+  temp2 = m1 * n3 + m2 * n4;\n+  temp3 = m1 * n5 + m2 * n6;\n+  temp4 = m1 * n7 + m2 * n8;\n+\n+  result1 = __builtin_mips_addr_ps (temp1, temp2);\n+  result2 = __builtin_mips_addr_ps (temp3, temp4);\n+  \n+  f[0] = __builtin_mips_cvt_s_pu (result1);\n+  f[1] = __builtin_mips_cvt_s_pl (result1);\n+  f[2] = __builtin_mips_cvt_s_pu (result2);\n+  f[3] = __builtin_mips_cvt_s_pl (result2);\n+}"}, {"sha": "78f5384aeffd6045cf9c031ab6b2c42f8e3f9a35", "filename": "gcc/testsuite/gcc.target/mips/mips-ps-1.c", "status": "added", "additions": 271, "deletions": 0, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-1.c?ref=6cbc6f0db154b001895740d108b56558fe4761b9", "patch": "@@ -0,0 +1,271 @@\n+/* { dg-do run { target mipsisa64*-*-* } } */\n+/* { dg-options \"-mips64 -O2 -mpaired-single -mhard-float -mfp64\" } */\n+\n+/* Test v2sf calculations */\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+typedef float v2sf __attribute__ ((vector_size (8)));\n+\n+v2sf A = {100, 200};\n+\n+/* Init from float */\n+v2sf init (float a, float b)\n+{\n+  return (v2sf) {a, b};\n+}\n+\n+/* Move between registers */\n+v2sf move (v2sf a)\n+{\n+  return a;\n+}\n+\n+/* Load from memory */\n+v2sf load ()\n+{\n+  return A;\n+}\n+\n+/* Store to memory */ \n+void store (v2sf a)\n+{\n+  A = a;\n+}\n+\n+/* Add */ \n+v2sf add (v2sf a, v2sf b)\n+{\n+  return a + b;\n+}\n+\n+/* Subtract */ \n+v2sf sub (v2sf a, v2sf b)\n+{\n+  return a - b;\n+}\n+\n+/* Negate */\n+v2sf neg (v2sf a)\n+{\n+  return - a;\n+}\n+\n+/* Multiply */ \n+v2sf mul (v2sf a, v2sf b)\n+{\n+  return a * b;\n+}\n+\n+/* Multiply and add */ \n+v2sf madd (v2sf a, v2sf b, v2sf c)\n+{\n+  return a * b + c;\n+}\n+\n+/* Multiply and subtract */ \n+v2sf msub (v2sf a, v2sf b, v2sf c)\n+{\n+  return a * b - c;\n+}\n+\n+/* Negate Multiply and add */ \n+v2sf nmadd (v2sf a, v2sf b, v2sf c)\n+{\n+  return - (a * b + c);\n+}\n+\n+/* Negate Multiply and subtract */ \n+v2sf nmsub (v2sf a, v2sf b, v2sf c)\n+{\n+  return - (a * b - c);\n+}\n+\n+/* Conditional Move */ \n+v2sf cond_move1 (v2sf a, v2sf b, long i)\n+{\n+  if (i > 0)\n+    return a;\n+  else\n+    return b;\n+}\n+\n+/* Conditional Move */ \n+v2sf cond_move2 (v2sf a, v2sf b, int i)\n+{\n+  if (i > 0)\n+    return a;\n+  else\n+    return b;\n+}\n+\n+/* Conditional Move */ \n+v2sf cond_move3 (v2sf a, v2sf b, float i)\n+{\n+  if (i > 0.0)\n+    return a;\n+  else\n+    return b;\n+}\n+\n+/* Conditional Move */ \n+v2sf cond_move4 (v2sf a, v2sf b, double i)\n+{\n+  if (i > 0.0)\n+    return a;\n+  else\n+    return b;\n+}\n+\n+int main()\n+{\n+  v2sf a, b, c, d, e, f;\n+  float f1, f2;\n+\n+  f1 = 1.2;\n+  f2 = 3.4;\n+  a = init (f1, f2);\n+  b = (v2sf) {1.2, 3.4};\n+  if (!__builtin_mips_upper_c_eq_ps (a, b) ||\n+      !__builtin_mips_lower_c_eq_ps (a, b))\n+    abort ();\n+\n+  a = (v2sf) {1.2, 2.3};\n+  b = (v2sf) {5.3, 6.1};\n+  b = move (a);\n+\n+  if (!__builtin_mips_upper_c_eq_ps (a, b) ||\n+      !__builtin_mips_lower_c_eq_ps (a, b))\n+    abort ();\n+\n+  a = (v2sf) {1.2, 2.3};\n+  b = (v2sf) {5.3, 6.1};\n+  c = add (a, b);\n+  d = (v2sf) {6.5, 8.4};\n+  if (!__builtin_mips_upper_c_eq_ps (c, d) ||\n+      !__builtin_mips_lower_c_eq_ps (c, d))\n+    abort ();\n+\n+  a = (v2sf) {1, 12};\n+  b = (v2sf) {5, 6};\n+  c = sub (a, b);\n+  d = (v2sf) {-4, 6};\n+  if (!__builtin_mips_upper_c_eq_ps (c, d) ||\n+      !__builtin_mips_lower_c_eq_ps (c, d))\n+    abort ();\n+\n+  a = (v2sf) {1, 12};\n+  b = (v2sf) {5, 6};\n+  c = mul (a, b);\n+  d = (v2sf) {5, 72};\n+  if (!__builtin_mips_upper_c_eq_ps (c, d) ||\n+      !__builtin_mips_lower_c_eq_ps (c, d))\n+    abort ();\n+\n+  a = (v2sf) {1, 12};\n+  b = (v2sf) {5, 6};\n+  c = (v2sf) {5, 6};\n+  d = madd (a, b, c);\n+  e = (v2sf) {10, 78};\n+  if (!__builtin_mips_upper_c_eq_ps (d, e) ||\n+      !__builtin_mips_lower_c_eq_ps (d, e))\n+    abort ();\n+\n+  a = (v2sf) {1, 12};\n+  b = (v2sf) {5, 6};\n+  c = (v2sf) {5, 6};\n+  d = msub (a, b, c);\n+  e = (v2sf) {0, 66};\n+  if (!__builtin_mips_upper_c_eq_ps (d, e) ||\n+      !__builtin_mips_lower_c_eq_ps (d, e))\n+    abort ();\n+\n+  a = (v2sf) {1, 12};\n+  b = (v2sf) {5, 6};\n+  c = (v2sf) {5, 6};\n+  d = nmadd (a, b, c);\n+  e = (v2sf) {-10, -78};\n+  if (!__builtin_mips_upper_c_eq_ps (d, e) ||\n+      !__builtin_mips_lower_c_eq_ps (d, e))\n+    abort ();\n+\n+  a = (v2sf) {1, 12};\n+  b = (v2sf) {5, 6};\n+  c = (v2sf) {5, 6};\n+  d = nmsub (a, b, c);\n+  e = (v2sf) {0, -66};\n+  if (!__builtin_mips_upper_c_eq_ps (d, e) ||\n+      !__builtin_mips_lower_c_eq_ps (d, e))\n+    abort ();\n+\n+  a = (v2sf) {98, 12};\n+  b = neg (a);\n+  c = (v2sf) {-98, -12};\n+  if (!__builtin_mips_upper_c_eq_ps (b, c) ||\n+      !__builtin_mips_lower_c_eq_ps (b, c))\n+    abort ();\n+\n+  a = (v2sf) {1, 12};\n+  b = (v2sf) {5, 6};\n+  c = cond_move1 (a, b, 1000);\n+  if (!__builtin_mips_upper_c_eq_ps (c, a) ||\n+      !__builtin_mips_lower_c_eq_ps (c, a))\n+    abort ();\n+\n+  a = (v2sf) {1, 12};\n+  b = (v2sf) {5, 6};\n+  c = cond_move2 (a, b, -1000);\n+  if (!__builtin_mips_upper_c_eq_ps (c, b) ||\n+      !__builtin_mips_lower_c_eq_ps (c, b))\n+    abort ();\n+\n+  a = (v2sf) {1, 12};\n+  b = (v2sf) {5, 6};\n+  c = cond_move3 (a, b, 9.0);\n+  if (!__builtin_mips_upper_c_eq_ps (c, a) ||\n+      !__builtin_mips_lower_c_eq_ps (c, a))\n+    abort ();\n+\n+  a = (v2sf) {1, 12};\n+  b = (v2sf) {5, 6};\n+  c = cond_move4 (a, b, -10.0);\n+  if (!__builtin_mips_upper_c_eq_ps (c, b) ||\n+      !__builtin_mips_lower_c_eq_ps (c, b))\n+    abort ();\n+\n+  a = (v2sf) {5, 12};\n+  b = (v2sf) {5, 6};\n+  c = (v2sf) {33, 123};\n+  d = (v2sf) {8, 78};\n+  e = __builtin_mips_movt_c_eq_ps (a, b, c, d);\n+  f = (v2sf) {8, 123};\n+  if (!__builtin_mips_upper_c_eq_ps (e, f) ||\n+      !__builtin_mips_lower_c_eq_ps (e, f))\n+    abort ();\n+\n+  a = (v2sf) {5, 12};\n+  b = (v2sf) {5, 6};\n+  c = (v2sf) {33, 123};\n+  d = (v2sf) {8, 78};\n+  e = __builtin_mips_movf_c_eq_ps (a, b, c, d);\n+  f = (v2sf) {33, 78};\n+  if (!__builtin_mips_upper_c_eq_ps (e, f) ||\n+      !__builtin_mips_lower_c_eq_ps (e, f))\n+    abort ();\n+\n+  a = load();\n+  b = (v2sf) {100, 200};\n+  if (!__builtin_mips_upper_c_eq_ps (a, b) ||\n+      !__builtin_mips_lower_c_eq_ps (a, b))\n+    abort ();\n+\n+  a = (v2sf) {123, 321};\n+  store (a);\n+  b = load();\n+  if (!__builtin_mips_upper_c_eq_ps (a, b) ||\n+      !__builtin_mips_lower_c_eq_ps (a, b))\n+    abort ();\n+\n+  printf (\"Test Passes\\n\");\n+  exit (0);\n+}"}, {"sha": "ef639e612031da2d290d637d2289046f31d8dcf5", "filename": "gcc/testsuite/gcc.target/mips/mips-ps-2.c", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-2.c?ref=6cbc6f0db154b001895740d108b56558fe4761b9", "patch": "@@ -0,0 +1,134 @@\n+/* { dg-do run { target mipsisa64*-*-* } } */\n+/* { dg-options \"-mips64 -O2 -mpaired-single -mhard-float -mfp64\" } */\n+\n+/* Test MIPS paired-single builtin functions */\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+typedef float v2sf __attribute__ ((vector_size(8)));\n+\n+int main ()\n+{\n+  int little_endian;\n+  v2sf a, b, c, d;\n+  float e,f;\n+  int i;\n+\n+  union { long long ll; int i[2]; } endianness_test;\n+  endianness_test.ll = 1;\n+  little_endian = endianness_test.i[0];\n+\n+  /* pll.ps */\n+  a = (v2sf) {1, 2};\n+  b = (v2sf) {3, 4};\n+  c = __builtin_mips_pll_ps (a, b);\n+  if (little_endian) // little endian\n+    d = (v2sf) {3, 1};\n+  else // big endian\n+    d = (v2sf) {2, 4};\n+\n+  if (!__builtin_mips_upper_c_eq_ps (c, d) ||\n+      !__builtin_mips_lower_c_eq_ps (c, d))\n+    abort ();\n+\n+  /* pul.ps */\n+  a = (v2sf) {1, 2};\n+  b = (v2sf) {3, 4};\n+  c = __builtin_mips_pul_ps (a, b);\n+  if (little_endian) // little endian\n+    d = (v2sf) {3, 2};\n+  else // big endian\n+    d = (v2sf) {1, 4};\n+  if (!__builtin_mips_upper_c_eq_ps (c, d) ||\n+      !__builtin_mips_lower_c_eq_ps (c, d))\n+    abort ();\n+\n+  /* plu.ps */\n+  a = (v2sf) {1, 2};\n+  b = (v2sf) {3, 4};\n+  c = __builtin_mips_plu_ps (a, b);\n+  if (little_endian) // little endian\n+    d = (v2sf) {4, 1};\n+  else // big endian\n+    d = (v2sf) {2, 3};\n+  if (!__builtin_mips_upper_c_eq_ps (c, d) ||\n+      !__builtin_mips_lower_c_eq_ps (c, d))\n+    abort ();\n+\n+  /* puu.ps */\n+  a = (v2sf) {1, 2};\n+  b = (v2sf) {3, 4};\n+  c = __builtin_mips_puu_ps (a, b);\n+  if (little_endian) // little endian\n+    d = (v2sf) {4, 2};\n+  else // big endian\n+    d = (v2sf) {1, 3};\n+  if (!__builtin_mips_upper_c_eq_ps (c, d) ||\n+      !__builtin_mips_lower_c_eq_ps (c, d))\n+    abort ();\n+\n+  /* cvt.ps.s */\n+  e = 3.4;\n+  f = 4.5; \n+  a = __builtin_mips_cvt_ps_s (e, f);\n+  if (little_endian) // little endian\n+    b = (v2sf) {4.5, 3.4};\n+  else // big endian\n+    b = (v2sf) {3.4, 4.5};\n+  if (!__builtin_mips_upper_c_eq_ps (a, b) ||\n+      !__builtin_mips_lower_c_eq_ps (a, b))\n+    abort ();\n+\n+  /* cvt.s.pl */\n+  a = (v2sf) {35.1, 120.2};\n+  e = __builtin_mips_cvt_s_pl (a);\n+  if (little_endian) // little endian\n+    f = 35.1; \n+  else // big endian\n+    f = 120.2;\n+  if (e != f)\n+    abort ();\n+\n+  /* cvt.s.pu */\n+  a = (v2sf) {30.0, 100.0};\n+  e = __builtin_mips_cvt_s_pu (a);\n+  if (little_endian) // little endian\n+    f = 100.0;\n+  else // big endian\n+    f = 30.0; \n+  if (e != f)\n+    abort ();\n+\n+  /* abs.ps */\n+  a = (v2sf) {-3.4, -5.8};\n+  b = __builtin_mips_abs_ps (a);\n+  c = (v2sf) {3.4, 5.8};\n+  if (!__builtin_mips_upper_c_eq_ps (b, c) ||\n+      !__builtin_mips_lower_c_eq_ps (b, c))\n+    abort ();\n+\n+  /* alnv.ps with rs = 4*/\n+  a = (v2sf) {1, 2};\n+  b = (v2sf) {3, 4};\n+  i = 4;\n+  c = __builtin_mips_alnv_ps (a, b, i);\n+  d = (v2sf) {2, 3};\n+\n+  if (!__builtin_mips_upper_c_eq_ps (c, d) ||\n+      !__builtin_mips_lower_c_eq_ps (c, d))\n+    abort ();\n+\n+  /* alnv.ps with rs = 0 */\n+  a = (v2sf) {5, 6};\n+  b = (v2sf) {7, 8};\n+  i = 0;\n+  c = __builtin_mips_alnv_ps (a, b, i);\n+  d = (v2sf) {5, 6};\n+\n+  if (!__builtin_mips_upper_c_eq_ps (c, d) ||\n+      !__builtin_mips_lower_c_eq_ps (c, d))\n+    abort ();\n+\n+  printf (\"Test Passes\\n\");\n+  exit (0);\n+}"}, {"sha": "e4f4db2bdd765830436bb8b165e641dd22bd709d", "filename": "gcc/testsuite/gcc.target/mips/mips-ps-3.c", "status": "added", "additions": 737, "deletions": 0, "changes": 737, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-3.c?ref=6cbc6f0db154b001895740d108b56558fe4761b9", "patch": "@@ -0,0 +1,737 @@\n+/* { dg-do run { target mipsisa64*-*-* } } */\n+/* { dg-options \"-mips64 -O2 -mpaired-single -mhard-float -mfp64\" } */\n+\n+/* Test MIPS paired-single conditional move */\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+typedef float v2sf __attribute__((vector_size(8)));\n+\n+v2sf test0 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test1 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test2 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test3 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test4 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test5 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test6 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test7 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test8 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test9 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test10 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test11 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test12 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test13 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test14 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test15 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test16 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test17 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test18 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test19 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test20 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test21 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test22 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test23 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test24 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test25 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test26 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test27 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test28 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test29 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test30 (v2sf a, v2sf b, v2sf c, v2sf d);\n+v2sf test31 (v2sf a, v2sf b, v2sf c, v2sf d);\n+\n+float qnan = 1.0f/0.0f - 1.0f/0.0f;\n+\n+int main ()\n+{\n+  float f1;\n+  v2sf a, b, c, d, e, f;\n+\n+  /* Case 1 {diff, diff} */\n+  /* movt.ps */\n+  a = (v2sf) {5, 12};\n+  b = (v2sf) {9, 6};\n+  c = (v2sf) {33, 123};\n+  d = (v2sf) {8, 78};\n+  e = __builtin_mips_movt_c_eq_ps (a, b, c, d);\n+  f = (v2sf) {33, 123};\n+  if (!__builtin_mips_upper_c_eq_ps (e, f) ||\n+      !__builtin_mips_lower_c_eq_ps (e, f))\n+    abort ();\n+\n+  /* movf.ps */\n+  e = __builtin_mips_movf_c_eq_ps (a, b, c, d);\n+  f = (v2sf) {8, 78};\n+  if (!__builtin_mips_upper_c_eq_ps (e, f) ||\n+      !__builtin_mips_lower_c_eq_ps (e, f))\n+    abort ();\n+\n+  /* Case 2 {same, diff} */\n+  /* movt.ps */\n+  a = (v2sf) {5, 12};\n+  b = (v2sf) {5, 6};\n+  c = (v2sf) {33, 123};\n+  d = (v2sf) {8, 78};\n+  e = __builtin_mips_movt_c_eq_ps (a, b, c, d);\n+  f = (v2sf) {8, 123};\n+  if (!__builtin_mips_upper_c_eq_ps (e, f) ||\n+      !__builtin_mips_lower_c_eq_ps (e, f))\n+    abort ();\n+\n+  /* movf.ps */\n+  e = __builtin_mips_movf_c_eq_ps (a, b, c, d);\n+  f = (v2sf) {33, 78};\n+  if (!__builtin_mips_upper_c_eq_ps (e, f) ||\n+      !__builtin_mips_lower_c_eq_ps (e, f))\n+    abort ();\n+\n+  /* Case 3 {diff, same} */\n+  /* movt.ps */\n+  a = (v2sf) {5, 12};\n+  b = (v2sf) {9, 12};\n+  c = (v2sf) {33, 123};\n+  d = (v2sf) {8, 78};\n+  e = __builtin_mips_movt_c_eq_ps (a, b, c, d);\n+  f = (v2sf) {33, 78};\n+  if (!__builtin_mips_upper_c_eq_ps (e, f) ||\n+      !__builtin_mips_lower_c_eq_ps (e, f))\n+    abort ();\n+\n+  /* movf.ps */\n+  e = __builtin_mips_movf_c_eq_ps (a, b, c, d);\n+  f = (v2sf) {8, 123};\n+  if (!__builtin_mips_upper_c_eq_ps (e, f) ||\n+      !__builtin_mips_lower_c_eq_ps (e, f))\n+    abort ();\n+\n+  /* Case 4 {same, same} */\n+  /* movt.ps */\n+  a = (v2sf) {5, 12};\n+  b = (v2sf) {5, 12};\n+  c = (v2sf) {33, 123};\n+  d = (v2sf) {8, 78};\n+  e = __builtin_mips_movt_c_eq_ps (a, b, c, d);\n+  f = (v2sf) {8, 78};\n+  if (!__builtin_mips_upper_c_eq_ps (e, f) ||\n+      !__builtin_mips_lower_c_eq_ps (e, f))\n+    abort ();\n+\n+  /* movf.ps */\n+  e = __builtin_mips_movf_c_eq_ps (a, b, c, d);\n+  f = (v2sf) {33, 123};\n+  if (!__builtin_mips_upper_c_eq_ps (e, f) ||\n+      !__builtin_mips_lower_c_eq_ps (e, f))\n+    abort ();\n+\n+  /* Test all 16 operators */\n+  a = (v2sf) {123, 123};\n+  b = (v2sf) {1000, 1000};\n+  c = (v2sf) {33, 123};\n+  d = (v2sf) {8, 78};\n+  e = test0 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test1 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test2 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test3 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test4 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test5 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test6 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test7 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test8 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+  e = test9 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+\n+  e = test10 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+  e = test11 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+\n+  e = test12 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+  e = test13 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+\n+  e = test14 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+  e = test15 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+\n+  e = test16 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test17 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test18 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test19 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test20 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test21 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test22 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test23 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test24 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+  e = test25 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+\n+  e = test26 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+  e = test27 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+\n+  e = test28 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+  e = test29 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+\n+  e = test30 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+  e = test31 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+\n+  /* Test all 16 operators with (b, a) */\n+  a = (v2sf) {123, 123};\n+  b = (v2sf) {1000, 1000};\n+  c = (v2sf) {33, 123};\n+  d = (v2sf) {8, 78};\n+  e = test0 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test1 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test2 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test3 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test4 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test5 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test6 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test7 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test8 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test9 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test10 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test11 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test12 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test13 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test14 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test15 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test16 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test17 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test18 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test19 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test20 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test21 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test22 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test23 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test24 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test25 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test26 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test27 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test28 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test29 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test30 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test31 (b, a, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+#ifndef __FAST_MATH__\n+  /* Test with NaN */\n+  a = (v2sf) {qnan, qnan};\n+  b = (v2sf) {1000, 1000};\n+  c = (v2sf) {33, 123};\n+  d = (v2sf) {8, 78};\n+  e = test0 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test1 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test2 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+  e = test3 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+\n+  e = test4 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test5 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test6 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+  e = test7 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+\n+  e = test8 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test9 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test10 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+  e = test11 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+\n+  e = test12 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test13 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test14 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+  e = test15 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+\n+  e = test16 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test17 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test18 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+  e = test19 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+\n+  e = test20 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test21 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test22 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+  e = test23 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+\n+  e = test24 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test25 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test26 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+  e = test27 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+\n+  e = test28 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+  e = test29 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+\n+  e = test30 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, d) || \n+      !__builtin_mips_lower_c_eq_ps (e, d))\n+    abort ();\n+  e = test31 (a, b, c, d);\n+  if (!__builtin_mips_upper_c_eq_ps (e, c) || \n+      !__builtin_mips_lower_c_eq_ps (e, c))\n+    abort ();\n+#endif\n+\n+  printf (\"Test Passes\\n\");\n+  exit (0);\n+}\n+\n+v2sf test0 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movt_c_f_ps (a, b, c, d);\n+}\n+\n+v2sf test1 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movf_c_f_ps (a, b, c, d);\n+}\n+\n+v2sf test2 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movt_c_un_ps (a, b, c, d);\n+}\n+\n+v2sf test3 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movf_c_un_ps (a, b, c, d);\n+}\n+\n+v2sf test4 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movt_c_eq_ps (a, b, c, d);\n+}\n+\n+v2sf test5 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movf_c_eq_ps (a, b, c, d);\n+}\n+\n+v2sf test6 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movt_c_ueq_ps (a, b, c, d);\n+}\n+\n+v2sf test7 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movf_c_ueq_ps (a, b, c, d);\n+}\n+\n+v2sf test8 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movt_c_olt_ps (a, b, c, d);\n+}\n+\n+v2sf test9 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movf_c_olt_ps (a, b, c, d);\n+}\n+\n+v2sf test10 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movt_c_ult_ps (a, b, c, d);\n+}\n+\n+v2sf test11 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movf_c_ult_ps (a, b, c, d);\n+}\n+\n+v2sf test12 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movt_c_ole_ps (a, b, c, d);\n+}\n+\n+v2sf test13 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movf_c_ole_ps (a, b, c, d);\n+}\n+\n+v2sf test14 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movt_c_ule_ps (a, b, c, d);\n+}\n+\n+v2sf test15 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movf_c_ule_ps (a, b, c, d);\n+}\n+\n+v2sf test16 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movt_c_sf_ps (a, b, c, d);\n+}\n+\n+v2sf test17 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movf_c_sf_ps (a, b, c, d);\n+}\n+\n+v2sf test18 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movt_c_ngle_ps (a, b, c, d);\n+}\n+\n+v2sf test19 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movf_c_ngle_ps (a, b, c, d);\n+}\n+\n+v2sf test20 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movt_c_seq_ps (a, b, c, d);\n+}\n+\n+v2sf test21 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movf_c_seq_ps (a, b, c, d);\n+}\n+\n+v2sf test22 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movt_c_ngl_ps (a, b, c, d);\n+}\n+\n+v2sf test23 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movf_c_ngl_ps (a, b, c, d);\n+}\n+\n+v2sf test24 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movt_c_lt_ps (a, b, c, d);\n+}\n+\n+v2sf test25 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movf_c_lt_ps (a, b, c, d);\n+}\n+\n+v2sf test26 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movt_c_nge_ps (a, b, c, d);\n+}\n+\n+v2sf test27 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movf_c_nge_ps (a, b, c, d);\n+}\n+\n+v2sf test28 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movt_c_le_ps (a, b, c, d);\n+}\n+\n+v2sf test29 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movf_c_le_ps (a, b, c, d);\n+}\n+\n+v2sf test30 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movt_c_ngt_ps (a, b, c, d);\n+}\n+\n+v2sf test31 (v2sf a, v2sf b, v2sf c, v2sf d)\n+{\n+  return __builtin_mips_movf_c_ngt_ps (a, b, c, d);\n+}"}, {"sha": "9e0677e7dfa2964fcc2f88981afdaad1a8504d7d", "filename": "gcc/testsuite/gcc.target/mips/mips-ps-4.c", "status": "added", "additions": 583, "deletions": 0, "changes": 583, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-4.c?ref=6cbc6f0db154b001895740d108b56558fe4761b9", "patch": "@@ -0,0 +1,583 @@\n+/* { dg-do run { target mipsisa64*-*-* } } */\n+/* { dg-options \"-mips64 -O2 -mpaired-single -mhard-float -mfp64\" } */\n+\n+/* Test MIPS paired-single comparisons */\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+typedef float v2sf __attribute__((vector_size(8)));\n+\n+int test0 (v2sf a, v2sf b);\n+int test1 (v2sf a, v2sf b);\n+int test2 (v2sf a, v2sf b);\n+int test3 (v2sf a, v2sf b);\n+int test4 (v2sf a, v2sf b);\n+int test5 (v2sf a, v2sf b);\n+int test6 (v2sf a, v2sf b);\n+int test7 (v2sf a, v2sf b);\n+int test8 (v2sf a, v2sf b);\n+int test9 (v2sf a, v2sf b);\n+int test10 (v2sf a, v2sf b);\n+int test11 (v2sf a, v2sf b);\n+int test12 (v2sf a, v2sf b);\n+int test13 (v2sf a, v2sf b);\n+int test14 (v2sf a, v2sf b);\n+int test15 (v2sf a, v2sf b);\n+int test16 (v2sf a, v2sf b);\n+int test17 (v2sf a, v2sf b);\n+int test18 (v2sf a, v2sf b);\n+int test19 (v2sf a, v2sf b);\n+int test20 (v2sf a, v2sf b);\n+int test21 (v2sf a, v2sf b);\n+int test22 (v2sf a, v2sf b);\n+int test23 (v2sf a, v2sf b);\n+int test24 (v2sf a, v2sf b);\n+int test25 (v2sf a, v2sf b);\n+int test26 (v2sf a, v2sf b);\n+int test27 (v2sf a, v2sf b);\n+int test28 (v2sf a, v2sf b);\n+int test29 (v2sf a, v2sf b);\n+int test30 (v2sf a, v2sf b);\n+int test31 (v2sf a, v2sf b);\n+\n+float qnan = 1.0f/0.0f - 1.0f/0.0f;\n+\n+int main()\n+{\n+  union { long long ll; int i[2]; } endianness_test;\n+  int little_endian;\n+  v2sf a, b;\n+  int i, j;\n+\n+  endianness_test.ll = 1;\n+  little_endian = endianness_test.i[0];\n+\n+  /* Case 1 {diff, diff} */\n+  a = (v2sf) {1, 2};\n+  b = (v2sf) {3, 4};\n+  i = __builtin_mips_upper_c_eq_ps (a, b);\n+  j = __builtin_mips_lower_c_eq_ps (a, b);\n+  if (i != 0 || j != 0)\n+    abort ();\n+\n+  /* Case 2 {same, diff} */\n+  a = (v2sf) {1.0, 2.0};\n+  b = (v2sf) {1.0, 4.0};\n+  i = __builtin_mips_upper_c_eq_ps (a, b);\n+  j = __builtin_mips_lower_c_eq_ps (a, b);\n+  if (little_endian)\n+    {\n+      if (i != 0 || j != 1)\n+        abort ();\n+    }\n+  else\n+    {\n+      if (i != 1 || j != 0)\n+        abort ();\n+    }\n+\n+  /* Case 3 {diff, same} */\n+  a = (v2sf) {1, 2};\n+  b = (v2sf) {3, 2};\n+  i = __builtin_mips_upper_c_eq_ps (a, b);\n+  j = __builtin_mips_lower_c_eq_ps (a, b);\n+  if (little_endian)\n+    {\n+      if (i != 1 || j != 0)\n+        abort ();\n+    }\n+  else\n+    {\n+      if (i != 0 || j != 1)\n+        abort ();\n+    }\n+\n+  /* Case 4 {same, same} */\n+  a = (v2sf) {1, 2};\n+  b = (v2sf) {1, 2};\n+  i = __builtin_mips_upper_c_eq_ps (a, b);\n+  j = __builtin_mips_lower_c_eq_ps (a, b);\n+  if (i != 1 || j != 1)\n+    abort ();\n+\n+  /* Test upper/lower with 16 operators */\n+  if (little_endian)\n+   {\n+     a = (v2sf) {1984.0, 10.58};\n+     b = (v2sf) {1984.0, 567.345};\n+   }\n+  else\n+   {\n+     a = (v2sf) {10.58, 1984.0};\n+     b = (v2sf) {567.345, 1984.0};\n+   }\n+\n+  i = test0 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test3 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test4 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test5 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test6 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test7 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test8 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test9 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test11 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test12 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test13 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test14 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test15 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test16 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test17 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test18 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test19 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test20 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test21 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test22 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test23 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test24 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test25 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test26 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test27 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test28 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test29 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test30 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test31 (a, b);\n+  if (i != 1)\n+    abort ();\n+\n+  /* Reverse arguments */\n+  i = test0 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test3 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test4 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test5 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test6 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test7 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test8 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test9 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test11 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test12 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test13 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test14 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test15 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test16 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test17 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test18 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test19 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test20 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test21 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test22 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test23 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test24 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test25 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test26 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test27 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test28 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test29 (b, a);\n+  if (i != 1)\n+    abort ();\n+  i = test30 (b, a);\n+  if (i != 0)\n+    abort ();\n+  i = test31 (b, a);\n+  if (i != 1)\n+    abort ();\n+\n+#ifndef __FAST_MATH__\n+  /* Test upper/lower with 16 operators */\n+  if (little_endian)\n+   {\n+     a = (v2sf) {qnan, qnan};\n+     b = (v2sf) {1984.0, 567.345};\n+   }\n+  else\n+   {\n+     a = (v2sf) {qnan, qnan};\n+     b = (v2sf) {567.345, 1984.0};\n+   }\n+\n+  i = test0 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test1 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test2 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test3 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test4 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test5 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test6 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test7 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test8 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test9 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test10 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test11 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test12 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test13 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test14 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test15 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test16 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test17 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test18 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test19 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test20 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test21 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test22 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test23 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test24 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test25 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test26 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test27 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test28 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test29 (a, b);\n+  if (i != 0)\n+    abort ();\n+  i = test30 (a, b);\n+  if (i != 1)\n+    abort ();\n+  i = test31 (a, b);\n+  if (i != 1)\n+    abort ();\n+#endif\n+\n+  printf (\"Test Passes\\n\");\n+  exit (0);\n+}\n+\n+int test0 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_c_f_ps (a, b);\n+}\n+\n+int test1 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_c_f_ps (a, b);\n+}\n+\n+int test2 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_c_un_ps (a, b);\n+}\n+\n+int test3 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_c_un_ps (a, b);\n+}\n+\n+int test4 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_c_eq_ps (a, b);\n+}\n+\n+int test5 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_c_eq_ps (a, b);\n+}\n+\n+int test6 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_c_ueq_ps (a, b);\n+}\n+\n+int test7 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_c_ueq_ps (a, b);\n+}\n+\n+int test8 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_c_olt_ps (a, b);\n+}\n+\n+int test9 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_c_olt_ps (a, b);\n+}\n+\n+int test10 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_c_ult_ps (a, b);\n+}\n+\n+int test11 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_c_ult_ps (a, b);\n+}\n+\n+int test12 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_c_ole_ps (a, b);\n+}\n+\n+int test13 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_c_ole_ps (a, b);\n+}\n+\n+int test14 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_c_ule_ps (a, b);\n+}\n+\n+int test15 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_c_ule_ps (a, b);\n+}\n+\n+int test16 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_c_sf_ps (a, b);\n+}\n+\n+int test17 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_c_sf_ps (a, b);\n+}\n+\n+int test18 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_c_ngle_ps (a, b);\n+}\n+\n+int test19 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_c_ngle_ps (a, b);\n+}\n+\n+int test20 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_c_seq_ps (a, b);\n+}\n+\n+int test21 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_c_seq_ps (a, b);\n+}\n+\n+int test22 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_c_ngl_ps (a, b);\n+}\n+\n+int test23 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_c_ngl_ps (a, b);\n+}\n+\n+int test24 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_c_lt_ps (a, b);\n+}\n+\n+int test25 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_c_lt_ps (a, b);\n+}\n+\n+int test26 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_c_nge_ps (a, b);\n+}\n+\n+int test27 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_c_nge_ps (a, b);\n+}\n+\n+int test28 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_c_le_ps (a, b);\n+}\n+\n+int test29 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_c_le_ps (a, b);\n+}\n+\n+int test30 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_upper_c_ngt_ps (a, b);\n+}\n+\n+int test31 (v2sf a, v2sf b)\n+{\n+  return __builtin_mips_lower_c_ngt_ps (a, b);\n+}"}, {"sha": "b4d9a7b208547bb72f3c0739feef20d4c82d1985", "filename": "gcc/testsuite/gcc.target/mips/mips-ps-type.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-type.c?ref=6cbc6f0db154b001895740d108b56558fe4761b9", "patch": "@@ -0,0 +1,110 @@\n+/* Test v2sf calculations */\n+/* { dg-do compile { target mipsisa64*-*-* } } */ \n+/* { dg-options \"-mips64 -O2 -mpaired-single -mhard-float -mfp64\" } */ \n+/* { dg-final { scan-assembler \"cvt.ps.s\" } } */ \n+/* { dg-final { scan-assembler \"mov.ps\" } } */ \n+/* { dg-final { scan-assembler \"ldc1\" } } */ \n+/* { dg-final { scan-assembler \"sdc1\" } } */ \n+/* { dg-final { scan-assembler \"add.ps\" } } */ \n+/* { dg-final { scan-assembler \"sub.ps\" } } */ \n+/* { dg-final { scan-assembler \"neg.ps\" } } */ \n+/* { dg-final { scan-assembler \"mul.ps\" } } */ \n+/* { dg-final { scan-assembler \"madd.ps\" } } */ \n+/* { dg-final { scan-assembler \"msub.ps\" } } */ \n+/* { dg-final { scan-assembler \"nmadd.ps\" } } */ \n+/* { dg-final { scan-assembler \"nmsub.ps\" } } */ \n+/* { dg-final { scan-assembler \"mov(n|z).ps\" } } */ \n+\n+typedef float v2sf __attribute__ ((vector_size(8)));\n+\n+v2sf A = {100, 200};\n+\n+/* Init from  floats */\n+v2sf init (float a, float b)\n+{\n+  return (v2sf) {a, b};\n+}\n+\n+/* Move between registers */\n+v2sf move (v2sf a)\n+{\n+  return a;\n+}\n+\n+/* Load from memory */\n+v2sf load ()\n+{\n+  return A;\n+}\n+\n+/* Store to memory */ \n+void store (v2sf a)\n+{\n+  A = a;\n+}\n+\n+/* Add */ \n+v2sf add (v2sf a, v2sf b)\n+{\n+  return a + b;\n+}\n+\n+/* Subtract */ \n+v2sf sub (v2sf a, v2sf b)\n+{\n+  return a - b;\n+}\n+\n+/* Negate */\n+v2sf neg (v2sf a)\n+{\n+  return - a;\n+}\n+\n+/* Multiply */ \n+v2sf mul (v2sf a, v2sf b)\n+{\n+  return a * b;\n+}\n+\n+/* Multiply and add */ \n+v2sf madd (v2sf a, v2sf b, v2sf c)\n+{\n+  return a * b + c;\n+}\n+\n+/* Multiply and subtract */ \n+v2sf msub (v2sf a, v2sf b, v2sf c)\n+{\n+  return a * b - c;\n+}\n+\n+/* Negate Multiply and add */ \n+v2sf nmadd (v2sf a, v2sf b, v2sf c)\n+{\n+  return - (a * b + c);\n+}\n+\n+/* Negate Multiply and subtract */ \n+v2sf nmsub (v2sf a, v2sf b, v2sf c)\n+{\n+  return - (a * b - c);\n+}\n+\n+/* Conditional Move */ \n+v2sf cond_move1 (v2sf a, v2sf b, long i)\n+{\n+  if (i > 0)\n+    return a;\n+  else\n+    return b;\n+}\n+\n+/* Conditional Move */ \n+v2sf cond_move2 (v2sf a, v2sf b, int i)\n+{\n+  if (i > 0)\n+    return a;\n+  else\n+    return b;\n+}"}, {"sha": "56d1f4dbdb029d16175743a0c76f5179f1c5e471", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbc6f0db154b001895740d108b56558fe4761b9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=6cbc6f0db154b001895740d108b56558fe4761b9", "patch": "@@ -0,0 +1,41 @@\n+#   Copyright (C) 1997 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't a MIPS target.\n+if ![istarget mips*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}]}