{"sha": "2214053f9d9cdf66a4f3a657dbae43d293fd0387", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIxNDA1M2Y5ZDljZGY2NmE0ZjNhNjU3ZGJhZTQzZDI5M2ZkMDM4Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-21T10:31:13Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-23T13:56:16Z"}, "message": "aarch64: Fix -mtrack-speculation for irreversible conditions [PR93341]\n\nWe can't yet represent the inverse of all conditions in rtl\n(see g:865257c447cc50f5819e), triggering an ICE in the pass\nthat handles -mtrack-speculation.  Since we don't expect these\ninsns to be optimised in any way, the easiest fix seemed to be\nto add an insn that reverses the condition internally.\n\n2020-01-23  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR target/93341\n\t* config/aarch64/aarch64.md (UNSPEC_SPECULATION_TRACKER_REV): New\n\tunspec.\n\t(speculation_tracker_rev): New pattern.\n\t* config/aarch64/aarch64-speculation.cc (aarch64_do_track_speculation):\n\tUse speculation_tracker_rev to track the inverse condition.\n\ngcc/testsuite/\n\tPR target/93341\n\t* gcc.target/aarch64/pr93341.c: New test.", "tree": {"sha": "b577bee03b2bfd6558950c4d49a2074c295c0bd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b577bee03b2bfd6558950c4d49a2074c295c0bd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2214053f9d9cdf66a4f3a657dbae43d293fd0387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2214053f9d9cdf66a4f3a657dbae43d293fd0387", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2214053f9d9cdf66a4f3a657dbae43d293fd0387", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2214053f9d9cdf66a4f3a657dbae43d293fd0387/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d16db16edd35bf4f0774aafef2325e113559d910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16db16edd35bf4f0774aafef2325e113559d910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d16db16edd35bf4f0774aafef2325e113559d910"}], "stats": {"total": 60, "additions": 48, "deletions": 12}, "files": [{"sha": "ac8b18f1a8490515ed553906145b6f58931c5822", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2214053f9d9cdf66a4f3a657dbae43d293fd0387/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2214053f9d9cdf66a4f3a657dbae43d293fd0387/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2214053f9d9cdf66a4f3a657dbae43d293fd0387", "patch": "@@ -1,3 +1,12 @@\n+2020-01-23  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/93341\n+\t* config/aarch64/aarch64.md (UNSPEC_SPECULATION_TRACKER_REV): New\n+\tunspec.\n+\t(speculation_tracker_rev): New pattern.\n+\t* config/aarch64/aarch64-speculation.cc (aarch64_do_track_speculation):\n+\tUse speculation_tracker_rev to track the inverse condition.\n+\n 2020-01-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/93381"}, {"sha": "f490b64ae61b88dd077abe18d89616e9712a4152", "filename": "gcc/config/aarch64/aarch64-speculation.cc", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2214053f9d9cdf66a4f3a657dbae43d293fd0387/gcc%2Fconfig%2Faarch64%2Faarch64-speculation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2214053f9d9cdf66a4f3a657dbae43d293fd0387/gcc%2Fconfig%2Faarch64%2Faarch64-speculation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-speculation.cc?ref=2214053f9d9cdf66a4f3a657dbae43d293fd0387", "patch": "@@ -215,20 +215,13 @@ aarch64_do_track_speculation ()\n \t\t\t  && REG_P (XEXP (cond, 0))\n \t\t\t  && REGNO (XEXP (cond, 0)) == CC_REGNUM\n \t\t\t  && XEXP (cond, 1) == const0_rtx);\n-\t      enum rtx_code inv_cond_code\n-\t\t= reversed_comparison_code (cond, insn);\n-\t      /* We should be able to reverse all conditions.  */\n-\t      gcc_assert (inv_cond_code != UNKNOWN);\n-\t      rtx inv_cond = gen_rtx_fmt_ee (inv_cond_code, GET_MODE (cond),\n-\t\t\t\t\t     copy_rtx (XEXP (cond, 0)),\n-\t\t\t\t\t     copy_rtx (XEXP (cond, 1)));\n+\t      rtx branch_tracker = gen_speculation_tracker (copy_rtx (cond));\n+\t      rtx fallthru_tracker = gen_speculation_tracker_rev (cond);\n \t      if (inverted)\n-\t\tstd::swap (cond, inv_cond);\n+\t\tstd::swap (branch_tracker, fallthru_tracker);\n \n-\t      insert_insn_on_edge (gen_speculation_tracker (cond),\n-\t\t\t\t   BRANCH_EDGE (bb));\n-\t      insert_insn_on_edge (gen_speculation_tracker (inv_cond),\n-\t\t\t\t   FALLTHRU_EDGE (bb));\n+\t      insert_insn_on_edge (branch_tracker, BRANCH_EDGE (bb));\n+\t      insert_insn_on_edge (fallthru_tracker, FALLTHRU_EDGE (bb));\n \t      needs_tracking = true;\n \t    }\n \t  else if (GET_CODE (PATTERN (insn)) == RETURN)"}, {"sha": "4f5898185f52d0169ac08b9eb676db4c28da6c2b", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2214053f9d9cdf66a4f3a657dbae43d293fd0387/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2214053f9d9cdf66a4f3a657dbae43d293fd0387/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=2214053f9d9cdf66a4f3a657dbae43d293fd0387", "patch": "@@ -262,6 +262,7 @@\n     UNSPEC_REV_SUBREG\n     UNSPEC_REINTERPRET\n     UNSPEC_SPECULATION_TRACKER\n+    UNSPEC_SPECULATION_TRACKER_REV\n     UNSPEC_COPYSIGN\n     UNSPEC_TTEST\t\t; Represent transaction test.\n     UNSPEC_UPDATE_FFR\n@@ -7219,6 +7220,20 @@\n   [(set_attr \"type\" \"csel\")]\n )\n \n+;; Like speculation_tracker, but track the inverse condition.\n+(define_insn \"speculation_tracker_rev\"\n+  [(set (reg:DI SPECULATION_TRACKER_REGNUM)\n+\t(unspec:DI [(reg:DI SPECULATION_TRACKER_REGNUM) (match_operand 0)]\n+\t UNSPEC_SPECULATION_TRACKER_REV))]\n+  \"\"\n+  {\n+    operands[1] = gen_rtx_REG (DImode, SPECULATION_TRACKER_REGNUM);\n+    output_asm_insn (\"csel\\\\t%1, %1, xzr, %M0\", operands);\n+    return \"\";\n+  }\n+  [(set_attr \"type\" \"csel\")]\n+)\n+\n ;; BTI <target> instructions\n (define_insn \"bti_noarg\"\n   [(unspec_volatile [(const_int 0)] UNSPECV_BTI_NOARG)]"}, {"sha": "7a03ebbaef82b48ca6b0a38c10046ef0e1667cbb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2214053f9d9cdf66a4f3a657dbae43d293fd0387/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2214053f9d9cdf66a4f3a657dbae43d293fd0387/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2214053f9d9cdf66a4f3a657dbae43d293fd0387", "patch": "@@ -1,3 +1,8 @@\n+2020-01-23  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/93341\n+\t* gcc.target/aarch64/pr93341.c: New test.\n+\n 2020-01-23  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/analyzer/data-model-3.c: Remove hardcoded \"-O2\" and move"}, {"sha": "1efebeee21a1cdf739c7ca6d55e6a3099a10ec7f", "filename": "gcc/testsuite/gcc.target/aarch64/pr93341.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2214053f9d9cdf66a4f3a657dbae43d293fd0387/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr93341.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2214053f9d9cdf66a4f3a657dbae43d293fd0387/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr93341.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr93341.c?ref=2214053f9d9cdf66a4f3a657dbae43d293fd0387", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mtrack-speculation\" } */\n+\n+int synths_ ( float * rc)\n+{\n+  float r1, r2;\n+  int i;\n+  for (i = 0; i < 128; ++i)\n+    {\n+      r2 = rc[i];\n+      r1 = ((r2) <= (.99f) ? (r2) : (.99f));\n+      rc[i] = ((r1) >= (-.99f) ? (r1) : (-.99f));\n+    }\n+}"}]}