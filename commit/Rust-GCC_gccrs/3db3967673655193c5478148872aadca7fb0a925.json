{"sha": "3db3967673655193c5478148872aadca7fb0a925", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RiMzk2NzY3MzY1NTE5M2M1NDc4MTQ4ODcyYWFkY2E3ZmIwYTkyNQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2012-10-01T08:33:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-01T08:33:04Z"}, "message": "sem_ch13.adb (Add_Invariants): Analyze the invariant expression as an assertion expression.\n\n2012-10-01  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch13.adb (Add_Invariants): Analyze the invariant expression\n\tas an assertion expression.\n\t* sem_ch3.adb / sem_ch3.ads (Preanalyze_Assert_Expression):\n\tNew procedure that wraps a call to Preanalyze_Spec_Expression\n\tfor assertion expressions, so that In_Assertion_Expr can be\n\tproperly adjusted.\n\t* sem_prag.adb (Analyze_PPC_In_Decl_Part\n\tCheck_Precondition_Postcondition Preanalyze_CTC_Args): Call the\n\tnew Preanalyze_Assert_Expression.\n\nFrom-SVN: r191898", "tree": {"sha": "eb66d1758b9bbc36266454b1f67f25c8318cf12d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb66d1758b9bbc36266454b1f67f25c8318cf12d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3db3967673655193c5478148872aadca7fb0a925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db3967673655193c5478148872aadca7fb0a925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3db3967673655193c5478148872aadca7fb0a925", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db3967673655193c5478148872aadca7fb0a925/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f5e1e076e44c9af6920085e52c170f40cd73ae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5e1e076e44c9af6920085e52c170f40cd73ae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f5e1e076e44c9af6920085e52c170f40cd73ae3"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "d052709015d8ec7d1b2561f17709ac46b16f85d3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db3967673655193c5478148872aadca7fb0a925/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db3967673655193c5478148872aadca7fb0a925/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3db3967673655193c5478148872aadca7fb0a925", "patch": "@@ -1,3 +1,15 @@\n+2012-10-01  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch13.adb (Add_Invariants): Analyze the invariant expression\n+\tas an assertion expression.\n+\t* sem_ch3.adb / sem_ch3.ads (Preanalyze_Assert_Expression):\n+\tNew procedure that wraps a call to Preanalyze_Spec_Expression\n+\tfor assertion expressions, so that In_Assertion_Expr can be\n+\tproperly adjusted.\n+\t* sem_prag.adb (Analyze_PPC_In_Decl_Part\n+\tCheck_Precondition_Postcondition Preanalyze_CTC_Args): Call the\n+\tnew Preanalyze_Assert_Expression.\n+\n 2012-10-01  Robert Dewar  <dewar@adacore.com>\n \n \t* checks.ads: Minor reformatting."}, {"sha": "cb7ac9eb4d49ababb2196cd2256ec4070c374682", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db3967673655193c5478148872aadca7fb0a925/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db3967673655193c5478148872aadca7fb0a925/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=3db3967673655193c5478148872aadca7fb0a925", "patch": "@@ -5058,7 +5058,7 @@ package body Sem_Ch13 is\n                --  at the end of the private part and has the wrong visibility.\n \n                Set_Parent (Exp, N);\n-               Preanalyze_Spec_Expression (Exp, Standard_Boolean);\n+               Preanalyze_Assert_Expression (Exp, Standard_Boolean);\n \n                --  Build first two arguments for Check pragma\n "}, {"sha": "6b9e88bfd4095d5ce0146f93ea0433b27132dc5a", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db3967673655193c5478148872aadca7fb0a925/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db3967673655193c5478148872aadca7fb0a925/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=3db3967673655193c5478148872aadca7fb0a925", "patch": "@@ -19306,6 +19306,17 @@ package body Sem_Ch3 is\n       end if;\n    end Check_Anonymous_Access_Components;\n \n+   ----------------------------------\n+   -- Preanalyze_Assert_Expression --\n+   ----------------------------------\n+\n+   procedure Preanalyze_Assert_Expression (N : Node_Id; T : Entity_Id) is\n+   begin\n+      In_Assertion_Expr := In_Assertion_Expr + 1;\n+      Preanalyze_Spec_Expression (N, T);\n+      In_Assertion_Expr := In_Assertion_Expr - 1;\n+   end Preanalyze_Assert_Expression;\n+\n    --------------------------------\n    -- Preanalyze_Spec_Expression --\n    --------------------------------"}, {"sha": "482450176a91e63758207e28169c4fde7bb5b7ae", "filename": "gcc/ada/sem_ch3.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db3967673655193c5478148872aadca7fb0a925/gcc%2Fada%2Fsem_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db3967673655193c5478148872aadca7fb0a925/gcc%2Fada%2Fsem_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.ads?ref=3db3967673655193c5478148872aadca7fb0a925", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -246,6 +246,10 @@ package Sem_Ch3 is\n    --  This mechanism is also used for aspect specifications that have an\n    --  expression parameter that needs similar preanalysis.\n \n+   procedure Preanalyze_Assert_Expression (N : Node_Id; T : Entity_Id);\n+   --  Wrapper on Preanalyze_Spec_Expression for assertion expressions, so that\n+   --  In_Assertion_Expr can be properly adjusted.\n+\n    procedure Process_Full_View (N : Node_Id; Full_T, Priv_T : Entity_Id);\n    --  Process some semantic actions when the full view of a private type is\n    --  encountered and analyzed. The first action is to create the full views"}, {"sha": "38f916f3942e27eaf210d5149e3f978b597a2f4b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db3967673655193c5478148872aadca7fb0a925/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db3967673655193c5478148872aadca7fb0a925/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=3db3967673655193c5478148872aadca7fb0a925", "patch": "@@ -286,17 +286,15 @@ package body Sem_Prag is\n       --  Preanalyze the boolean expression, we treat this as a spec expression\n       --  (i.e. similar to a default expression).\n \n-      In_Assertion_Expr := In_Assertion_Expr + 1;\n-      Preanalyze_Spec_Expression (Get_Pragma_Arg (Arg1), Standard_Boolean);\n-      In_Assertion_Expr := In_Assertion_Expr - 1;\n+      Preanalyze_Assert_Expression (Get_Pragma_Arg (Arg1), Standard_Boolean);\n \n       --  In ASIS mode, for a pragma generated from a source aspect, also\n       --  analyze the original aspect expression.\n \n       if ASIS_Mode\n         and then Present (Corresponding_Aspect (N))\n       then\n-         Preanalyze_Spec_Expression\n+         Preanalyze_Assert_Expression\n            (Expression (Corresponding_Aspect (N)), Standard_Boolean);\n       end if;\n \n@@ -2178,7 +2176,7 @@ package body Sem_Prag is\n             then\n                --  Analyze pragma expression for correctness and for ASIS use\n \n-               Preanalyze_Spec_Expression\n+               Preanalyze_Assert_Expression\n                  (Get_Pragma_Arg (Arg1), Standard_Boolean);\n \n                --  In ASIS mode, for a pragma generated from a source aspect,\n@@ -2187,7 +2185,7 @@ package body Sem_Prag is\n                if ASIS_Mode\n                  and then Present (Corresponding_Aspect (N))\n                then\n-                  Preanalyze_Spec_Expression\n+                  Preanalyze_Assert_Expression\n                     (Expression (Corresponding_Aspect (N)), Standard_Boolean);\n                end if;\n             end if;\n@@ -6773,7 +6771,8 @@ package body Sem_Prag is\n \n             --    pragma Check (Assertion, condition [, msg]);\n \n-            --  So rewrite pragma in this manner, and analyze the result\n+            --  So rewrite pragma in this manner, transfer the message\n+            --  argument if present, and analyze the result\n \n             Expr := Get_Pragma_Arg (Arg1);\n             Newa := New_List (\n@@ -6785,8 +6784,7 @@ package body Sem_Prag is\n \n             if Arg_Count > 1 then\n                Check_Optional_Identifier (Arg2, Name_Message);\n-               Analyze_And_Resolve (Get_Pragma_Arg (Arg2), Standard_String);\n-               Append_To (Newa, Relocate_Node (Arg2));\n+               Append_To (Newa, New_Copy_Tree (Arg2));\n             end if;\n \n             Rewrite (N,\n@@ -15532,27 +15530,27 @@ package body Sem_Prag is\n       --  expressions (i.e. similar to a default expression).\n \n       if Present (Arg_Req) then\n-         Preanalyze_Spec_Expression\n+         Preanalyze_Assert_Expression\n            (Get_Pragma_Arg (Arg_Req), Standard_Boolean);\n \n          --  In ASIS mode, for a pragma generated from a source aspect, also\n          --  analyze the original aspect expression.\n \n          if ASIS_Mode and then Present (Corresponding_Aspect (N)) then\n-            Preanalyze_Spec_Expression\n+            Preanalyze_Assert_Expression\n               (Original_Node (Get_Pragma_Arg (Arg_Req)), Standard_Boolean);\n          end if;\n       end if;\n \n       if Present (Arg_Ens) then\n-         Preanalyze_Spec_Expression\n+         Preanalyze_Assert_Expression\n            (Get_Pragma_Arg (Arg_Ens), Standard_Boolean);\n \n          --  In ASIS mode, for a pragma generated from a source aspect, also\n          --  analyze the original aspect expression.\n \n          if ASIS_Mode and then Present (Corresponding_Aspect (N)) then\n-            Preanalyze_Spec_Expression\n+            Preanalyze_Assert_Expression\n               (Original_Node (Get_Pragma_Arg (Arg_Ens)), Standard_Boolean);\n          end if;\n       end if;"}]}