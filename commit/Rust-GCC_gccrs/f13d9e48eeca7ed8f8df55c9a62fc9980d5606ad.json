{"sha": "f13d9e48eeca7ed8f8df55c9a62fc9980d5606ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEzZDllNDhlZWNhN2VkOGY4ZGY1NWM5YTYyZmM5OTgwZDU2MDZhZA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-02-23T12:54:26Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-02-24T11:57:17Z"}, "message": "coroutines : Adjust error handling for type-dependent coroutines [PR96251].\n\nAlthough coroutines are not permitted to be constexpr, generic lambdas\nare implicitly from C++17 and, because of this, a generic coroutine lambda\ncan be marked as potentially constexpr. As per the PR, this then fails when\ntype substitution is attempted because the check disallowing constexpr in\nthe coroutines code was overly restrictive.\n\nThis changes the error handing to mark the function  as 'invalid_constexpr'\nbut suppresses the error in the case that we are instantiating a constexpr.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/96251\n\t* coroutines.cc (coro_common_keyword_context_valid_p): Suppress\n\terror reporting when instantiating for a constexpr.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/96251\n\t* g++.dg/coroutines/pr96251.C: New test.", "tree": {"sha": "8893d1f6baef63f73fa712887f2d8f185fecd827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8893d1f6baef63f73fa712887f2d8f185fecd827"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f13d9e48eeca7ed8f8df55c9a62fc9980d5606ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f13d9e48eeca7ed8f8df55c9a62fc9980d5606ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f13d9e48eeca7ed8f8df55c9a62fc9980d5606ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f13d9e48eeca7ed8f8df55c9a62fc9980d5606ad/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e646abbe02f2c79cc3ba1f3de705ee62ff9dcd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e646abbe02f2c79cc3ba1f3de705ee62ff9dcd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e646abbe02f2c79cc3ba1f3de705ee62ff9dcd1"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "abfe8d08192e5c91c0d9365143d3948ca6ca7484", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f13d9e48eeca7ed8f8df55c9a62fc9980d5606ad/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f13d9e48eeca7ed8f8df55c9a62fc9980d5606ad/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=f13d9e48eeca7ed8f8df55c9a62fc9980d5606ad", "patch": "@@ -683,11 +683,14 @@ coro_common_keyword_context_valid_p (tree fndecl, location_t kw_loc,\n \n   if (DECL_DECLARED_CONSTEXPR_P (fndecl))\n     {\n-      /* [dcl.constexpr] 3.3 it shall not be a coroutine.  */\n-      error_at (kw_loc, \"%qs cannot be used in a %<constexpr%> function\",\n-\t\tkw_name);\n       cp_function_chain->invalid_constexpr = true;\n-      return false;\n+      if (!is_instantiation_of_constexpr (fndecl))\n+\t{\n+\t  /* [dcl.constexpr] 3.3 it shall not be a coroutine.  */\n+\t  error_at (kw_loc, \"%qs cannot be used in a %<constexpr%> function\",\n+\t\t    kw_name);\n+\t  return false;\n+\t}\n     }\n \n   if (FNDECL_USED_AUTO (fndecl))"}, {"sha": "3f435044e41e33e29a26523f5bdfa0b4288820a0", "filename": "gcc/testsuite/g++.dg/coroutines/pr96251.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f13d9e48eeca7ed8f8df55c9a62fc9980d5606ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr96251.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f13d9e48eeca7ed8f8df55c9a62fc9980d5606ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr96251.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr96251.C?ref=f13d9e48eeca7ed8f8df55c9a62fc9980d5606ad", "patch": "@@ -0,0 +1,32 @@\n+#include <coroutine>\n+    \n+struct coroutine {\n+  struct promise_type {\n+    auto get_return_object() { return coroutine(); }\n+    auto initial_suspend() { return std::suspend_always(); }\n+    auto yield_value(int) { return std::suspend_always(); }\n+    void return_void() {}\n+    auto final_suspend() noexcept { return std::suspend_always(); }\n+    void unhandled_exception() {}\n+  };\n+};\n+\n+int main() {\n+  auto f = [](auto max) -> coroutine {\n+    for (int i = 0; i < max; ++i) {\n+       co_yield i;\n+    }\n+  };\n+\n+  f(10);\n+\n+  // From PR98976\n+  auto foo = [](auto&&) -> coroutine {\n+    switch (42) {\n+      case 42:\n+        co_return;\n+    }\n+  };\n+  foo(1);\n+\n+}"}]}