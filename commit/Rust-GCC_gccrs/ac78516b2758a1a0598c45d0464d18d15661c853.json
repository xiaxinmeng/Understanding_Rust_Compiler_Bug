{"sha": "ac78516b2758a1a0598c45d0464d18d15661c853", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM3ODUxNmIyNzU4YTFhMDU5OGM0NWQwNDY0ZDE4ZDE1NjYxYzg1Mw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-12-23T17:04:47Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-12-30T10:27:52Z"}, "message": "d: Give the result of evaluated expressions a location\n\nCST trees that were converted back to a D front-end AST node lost all\nlocation information of the original expression.  Now this is propagated\non to the literal expression.\n\ngcc/d/ChangeLog:\n\n\t* d-tree.h (d_eval_constant_expression): Add location argument.\n\t* d-builtins.cc (d_eval_constant_expression): Give generated constants\n\ta proper file location.\n\t* d-compiler.cc (Compiler::paintAsType): Pass expression location to\n\td_eval_constant_expression.\n\t* d-frontend.cc (eval_builtin): Likewise.", "tree": {"sha": "95583273941cb437277001299771b83ca1419e4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95583273941cb437277001299771b83ca1419e4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac78516b2758a1a0598c45d0464d18d15661c853", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac78516b2758a1a0598c45d0464d18d15661c853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac78516b2758a1a0598c45d0464d18d15661c853", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac78516b2758a1a0598c45d0464d18d15661c853/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f7941ca37001773a36add8119791725aeb823ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7941ca37001773a36add8119791725aeb823ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f7941ca37001773a36add8119791725aeb823ba"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "9c629c7028b78228ee00b734f71ebce7d3187b10", "filename": "gcc/d/d-builtins.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac78516b2758a1a0598c45d0464d18d15661c853/gcc%2Fd%2Fd-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac78516b2758a1a0598c45d0464d18d15661c853/gcc%2Fd%2Fd-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-builtins.cc?ref=ac78516b2758a1a0598c45d0464d18d15661c853", "patch": "@@ -332,11 +332,12 @@ build_frontend_type (tree type)\n }\n \n /* Attempt to convert GCC evaluated CST to a D Frontend Expression.\n+   LOC is the location in the source file where this CST is being evaluated.\n    This is used for getting the CTFE value out of a const-folded builtin,\n    returns NULL if it cannot convert CST.  */\n \n Expression *\n-d_eval_constant_expression (tree cst)\n+d_eval_constant_expression (const Loc &loc, tree cst)\n {\n   STRIP_TYPE_NOPS (cst);\n   Type *type = build_frontend_type (TREE_TYPE (cst));\n@@ -353,23 +354,23 @@ d_eval_constant_expression (tree cst)\n \t  real_value re = TREE_REAL_CST (TREE_REALPART (cst));\n \t  real_value im = TREE_REAL_CST (TREE_IMAGPART (cst));\n \t  complex_t value = complex_t (ldouble (re), ldouble (im));\n-\t  return ComplexExp::create (Loc (), value, type);\n+\t  return ComplexExp::create (loc, value, type);\n \t}\n       else if (code == INTEGER_CST)\n \t{\n \t  dinteger_t value = TREE_INT_CST_LOW (cst);\n-\t  return IntegerExp::create (Loc (), value, type);\n+\t  return IntegerExp::create (loc, value, type);\n \t}\n       else if (code == REAL_CST)\n \t{\n \t  real_value value = TREE_REAL_CST (cst);\n-\t  return RealExp::create (Loc (), ldouble (value), type);\n+\t  return RealExp::create (loc, ldouble (value), type);\n \t}\n       else if (code == STRING_CST)\n \t{\n \t  const void *string = TREE_STRING_POINTER (cst);\n \t  size_t len = TREE_STRING_LENGTH (cst);\n-\t  return StringExp::create (Loc (), CONST_CAST (void *, string), len);\n+\t  return StringExp::create (loc, CONST_CAST (void *, string), len);\n \t}\n       else if (code == VECTOR_CST)\n \t{\n@@ -380,17 +381,17 @@ d_eval_constant_expression (tree cst)\n \t  for (size_t i = 0; i < nunits; i++)\n \t    {\n \t      Expression *elem\n-\t\t= d_eval_constant_expression (VECTOR_CST_ELT (cst, i));\n+\t\t= d_eval_constant_expression (loc, VECTOR_CST_ELT (cst, i));\n \t      if (elem == NULL)\n \t\treturn NULL;\n \n \t      (*elements)[i] = elem;\n \t    }\n \n-\t  Expression *e = ArrayLiteralExp::create (Loc (), elements);\n+\t  Expression *e = ArrayLiteralExp::create (loc, elements);\n \t  e->type = type->isTypeVector ()->basetype;\n \n-\t  return VectorExp::create (Loc (), e, type);\n+\t  return VectorExp::create (loc, e, type);\n \t}\n     }\n "}, {"sha": "f737d8d96866322947bc0022e7be801afdb70cdd", "filename": "gcc/d/d-compiler.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac78516b2758a1a0598c45d0464d18d15661c853/gcc%2Fd%2Fd-compiler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac78516b2758a1a0598c45d0464d18d15661c853/gcc%2Fd%2Fd-compiler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-compiler.cc?ref=ac78516b2758a1a0598c45d0464d18d15661c853", "patch": "@@ -133,7 +133,7 @@ Compiler::paintAsType (UnionExp *, Expression *expr, Type *type)\n \n       cst = native_interpret_expr (vectype, buffer, len);\n \n-      Expression *e = d_eval_constant_expression (cst);\n+      Expression *e = d_eval_constant_expression (expr->loc, cst);\n       gcc_assert (e != NULL && e->op == TOKvector);\n \n       return e->isVectorExp ()->e1;\n@@ -143,7 +143,7 @@ Compiler::paintAsType (UnionExp *, Expression *expr, Type *type)\n       /* Normal interpret cast.  */\n       cst = native_interpret_expr (build_ctype (type), buffer, len);\n \n-      Expression *e = d_eval_constant_expression (cst);\n+      Expression *e = d_eval_constant_expression (expr->loc, cst);\n       gcc_assert (e != NULL);\n \n       return e;"}, {"sha": "91335307150dab49c16f4282fc2806a44dbb0779", "filename": "gcc/d/d-frontend.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac78516b2758a1a0598c45d0464d18d15661c853/gcc%2Fd%2Fd-frontend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac78516b2758a1a0598c45d0464d18d15661c853/gcc%2Fd%2Fd-frontend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-frontend.cc?ref=ac78516b2758a1a0598c45d0464d18d15661c853", "patch": "@@ -195,7 +195,7 @@ eval_builtin (Loc loc, FuncDeclaration *fd, Expressions *arguments)\n   /* Builtin should be successfully evaluated.\n      Will only return NULL if we can't convert it.  */\n   if (TREE_CONSTANT (result) && TREE_CODE (result) != CALL_EXPR)\n-    e = d_eval_constant_expression (result);\n+    e = d_eval_constant_expression (loc, result);\n \n   return e;\n }"}, {"sha": "f5cf9d3f2143b9a6b1767676ebda7b0fff98303d", "filename": "gcc/d/d-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac78516b2758a1a0598c45d0464d18d15661c853/gcc%2Fd%2Fd-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac78516b2758a1a0598c45d0464d18d15661c853/gcc%2Fd%2Fd-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-tree.h?ref=ac78516b2758a1a0598c45d0464d18d15661c853", "patch": "@@ -496,7 +496,7 @@ extern void d_init_builtins (void);\n extern void d_register_builtin_type (tree, const char *);\n extern void d_build_builtins_module (Module *);\n extern void d_maybe_set_builtin (Module *);\n-extern Expression *d_eval_constant_expression (tree);\n+extern Expression *d_eval_constant_expression (const Loc &, tree);\n extern void d_init_versions (void);\n \n /* In d-codegen.cc.  */"}]}