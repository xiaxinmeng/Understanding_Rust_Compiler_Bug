{"sha": "e088f04bdb2331f7ec6ba0faa4eb2c64982e56c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA4OGYwNGJkYjIzMzFmN2VjNmJhMGZhYTRlYjJjNjQ5ODJlNTZjMw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2008-08-06T15:20:14Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2008-08-06T15:20:14Z"}, "message": "jump.c (rtx_renumbered_equal_p): Do not call subreg_regno_offset for unrepresentable subregs or treat them as...\n\n\t* jump.c (rtx_renumbered_equal_p): Do not call subreg_regno_offset\n\tfor unrepresentable subregs or treat them as equal to other regs\n\tor subregs with the same register number.\n\nFrom-SVN: r138804", "tree": {"sha": "b10889a27b1cc0c2c180bc4ea92acf3aa3f1f998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b10889a27b1cc0c2c180bc4ea92acf3aa3f1f998"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e088f04bdb2331f7ec6ba0faa4eb2c64982e56c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e088f04bdb2331f7ec6ba0faa4eb2c64982e56c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e088f04bdb2331f7ec6ba0faa4eb2c64982e56c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e088f04bdb2331f7ec6ba0faa4eb2c64982e56c3/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f371a2e412f0384dcdc36ebd00c8597be74a098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f371a2e412f0384dcdc36ebd00c8597be74a098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f371a2e412f0384dcdc36ebd00c8597be74a098"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "1e40f07e4f9daa20b389420f113d58eb157d9f8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e088f04bdb2331f7ec6ba0faa4eb2c64982e56c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e088f04bdb2331f7ec6ba0faa4eb2c64982e56c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e088f04bdb2331f7ec6ba0faa4eb2c64982e56c3", "patch": "@@ -1,3 +1,9 @@\n+2008-08-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* jump.c (rtx_renumbered_equal_p): Do not call subreg_regno_offset\n+\tfor unrepresentable subregs or treat them as equal to other regs\n+\tor subregs with the same register number.\n+\n 2008-08-06  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR middle-end/35432"}, {"sha": "c0ab6909a2a79a6084bab97867d762bf7db1422d", "filename": "gcc/jump.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e088f04bdb2331f7ec6ba0faa4eb2c64982e56c3/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e088f04bdb2331f7ec6ba0faa4eb2c64982e56c3/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=e088f04bdb2331f7ec6ba0faa4eb2c64982e56c3", "patch": "@@ -1552,12 +1552,22 @@ rtx_renumbered_equal_p (const_rtx x, const_rtx y)\n \n \t  if (reg_renumber[reg_x] >= 0)\n \t    {\n+\t      if (!subreg_offset_representable_p (reg_renumber[reg_x],\n+\t\t\t\t\t\t  GET_MODE (SUBREG_REG (x)),\n+\t\t\t\t\t\t  byte_x,\n+\t\t\t\t\t\t  GET_MODE (x)))\n+\t\treturn 0;\n \t      reg_x = subreg_regno_offset (reg_renumber[reg_x],\n \t\t\t\t\t   GET_MODE (SUBREG_REG (x)),\n \t\t\t\t\t   byte_x,\n \t\t\t\t\t   GET_MODE (x));\n \t      byte_x = 0;\n \t    }\n+\t  else if (!subreg_offset_representable_p (reg_x,\n+\t\t\t\t\t\t   GET_MODE (SUBREG_REG (x)),\n+\t\t\t\t\t\t   byte_x,\n+\t\t\t\t\t\t   GET_MODE (x)))\n+\t    return 0;\n \t}\n       else\n \t{\n@@ -1573,12 +1583,22 @@ rtx_renumbered_equal_p (const_rtx x, const_rtx y)\n \n \t  if (reg_renumber[reg_y] >= 0)\n \t    {\n+\t      if (!subreg_offset_representable_p (reg_renumber[reg_y],\n+\t\t\t\t\t\t  GET_MODE (SUBREG_REG (y)),\n+\t\t\t\t\t\t  byte_y,\n+\t\t\t\t\t\t  GET_MODE (y)))\n+\t\treturn 0;\n \t      reg_y = subreg_regno_offset (reg_renumber[reg_y],\n \t\t\t\t\t   GET_MODE (SUBREG_REG (y)),\n \t\t\t\t\t   byte_y,\n \t\t\t\t\t   GET_MODE (y));\n \t      byte_y = 0;\n \t    }\n+\t  else if (!subreg_offset_representable_p (reg_y,\n+\t\t\t\t\t\t   GET_MODE (SUBREG_REG (y)),\n+\t\t\t\t\t\t   byte_y,\n+\t\t\t\t\t\t   GET_MODE (y)))\n+\t    return 0;\n \t}\n       else\n \t{"}]}