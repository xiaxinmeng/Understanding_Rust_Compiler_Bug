{"sha": "17d1971d8c23119089320b42e23973c1a3a52954", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdkMTk3MWQ4YzIzMTE5MDg5MzIwYjQyZTIzOTczYzFhM2E1Mjk1NA==", "commit": {"author": {"name": "Jerry Quinn", "email": "jquinn@nortelnetworks.com", "date": "1999-03-17T20:15:18Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-03-17T20:15:18Z"}, "message": "pa.md: Add real PA8000 scheduling information.\n\n        * pa.md: Add real PA8000 scheduling information.\n\nCo-Authored-By: Jeffrey A Law <law@cygnus.com>\n\nFrom-SVN: r25829", "tree": {"sha": "40655e5eb9df4e6d118483da0bcfd28a4f6c24e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40655e5eb9df4e6d118483da0bcfd28a4f6c24e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17d1971d8c23119089320b42e23973c1a3a52954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d1971d8c23119089320b42e23973c1a3a52954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d1971d8c23119089320b42e23973c1a3a52954", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d1971d8c23119089320b42e23973c1a3a52954/comments", "author": null, "committer": null, "parents": [{"sha": "e14b50cef771802f70fa720e700569dd47aa1a9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14b50cef771802f70fa720e700569dd47aa1a9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e14b50cef771802f70fa720e700569dd47aa1a9d"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "bf4be215b49768bdcdf41c117f6f7896b859ce77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d1971d8c23119089320b42e23973c1a3a52954/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d1971d8c23119089320b42e23973c1a3a52954/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17d1971d8c23119089320b42e23973c1a3a52954", "patch": "@@ -1,6 +1,8 @@\n Wed Mar 17 20:38:08 1999  Jerry Quinn <jquinn@nortelnetworks.com>\n \t\t\t  Jeff Law <law@cygnus.com>\n \n+        * pa.md: Add real PA8000 scheduling information.\n+\n         * pa.h (processor_type):  Add PROCESSOR_8000 symbol.\n         (ISSUE_RATE):  Revamp, including PA8000 support.\n         * pa.c (override_options):  Add 8000 as -mschedule= option."}, {"sha": "0edbf3139cdc2fb2d587f3a52ba2e1e29732c422", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d1971d8c23119089320b42e23973c1a3a52954/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d1971d8c23119089320b42e23973c1a3a52954/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=17d1971d8c23119089320b42e23973c1a3a52954", "patch": "@@ -350,15 +350,55 @@\n ;; treat it just like the 7100LC pipeline.\n ;; Similarly for the multi-issue fake units.\n \n-;; PA8000 scheduling\n+;; \n+;; Scheduling for the PA8000 is somewhat different than scheduling for a\n+;; traditional architecture.\n ;;\n-;; HP recommends against latency scheduling on the PA8000.\n+;; The PA8000 has a large (56) entry reorder buffer that is split between\n+;; memory and non-memory operations.\n ;;\n-;; For now we do not actually define any scheduling parameters for the PA8000.\n+;; The PA800 can issue two memory and two non-memory operations per cycle to\n+;; the function units.  Similarly, the PA8000 can retire two memory and two\n+;; non-memory operations per cycle.\n ;;\n-;; -msched=8000 is mostly so that we can retune the code sequences to improve\n-;; performance on the PA8000 class machines.\n-;; \n+;; Given the large reorder buffer, the processor can hide most latencies.\n+;; According to HP, they've got the best results by scheduling for retirement\n+;; bandwidth with limited latency scheduling for floating point operations.\n+;; Latency for integer operations and memory references is ignored.\n+;;\n+;; We claim floating point operations have a 2 cycle latency and are\n+;; fully pipelined, except for div and sqrt which are not pipelined.\n+;;\n+;; It is not necessary to define the shifter and integer alu units.\n+;;\n+;; These first two define_unit_unit descriptions model retirement from\n+;; the reorder buffer.\n+(define_function_unit \"pa8000lsu\" 2 1\n+  (and\n+    (eq_attr \"type\" \"load,fpload,store,fpstore\")\n+    (eq_attr \"cpu\" \"8000\")) 1 1)\n+\n+(define_function_unit \"pa8000alu\" 2 1\n+  (and\n+    (eq_attr \"type\" \"!load,fpload,store,fpstore\")\n+    (eq_attr \"cpu\" \"8000\")) 1 1)\n+\n+;; Claim floating point ops have a 2 cycle latency, excluding div and\n+;; sqrt, which are not pipelined and issue to different units.\n+(define_function_unit \"pa8000fmac\" 2 0\n+  (and\n+    (eq_attr \"type\" \"fpcc,fpalu,fpmulsgl,fpmuldbl\")\n+    (eq_attr \"cpu\" \"8000\")) 2 1)\n+\n+(define_function_unit \"pa8000fdiv\" 2 1\n+  (and\n+    (eq_attr \"type\" \"fpdivsgl,fpsqrtsgl\")\n+    (eq_attr \"cpu\" \"8000\")) 17 17)\n+\n+(define_function_unit \"pa8000fdiv\" 2 1\n+  (and\n+    (eq_attr \"type\" \"fpdivdbl,fpsqrtdbl\")\n+    (eq_attr \"cpu\" \"8000\")) 31 31)\n \n \f\n ;; Compare instructions."}]}