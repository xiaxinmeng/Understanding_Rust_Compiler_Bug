{"sha": "2cf4c39ee664e36df9b2d764534b455a8a432328", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNmNGMzOWVlNjY0ZTM2ZGY5YjJkNzY0NTM0YjQ1NWE4YTQzMjMyOA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2013-07-08T14:20:33Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2013-07-08T14:20:33Z"}, "message": "s390.c: Replace F*_REGNUM with FPR*_REGNUM.\n\n2013-07-08  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config/s390/s390.c: Replace F*_REGNUM with FPR*_REGNUM.\n\t* config/s390/s390.h: Remove F*_REGNUM macro definitions.\n\t* config/s390/s390.md: Define FPR*_REGNUM constants.\n\tFix FPR2_REGNUM constant (18 -> 17).\n\t(\"*trunc<BFP:mode><DFP_ALL:mode>2\")\n\t(\"*trunc<DFP_ALL:mode><BFP:mode>2\")\n\t(\"trunc<BFP:mode><DFP_ALL:mode>2\")\n\t(\"trunc<DFP_ALL:mode><BFP:mode>2\")\n\t(\"*extend<BFP:mode><DFP_ALL:mode>2\")\n\t(\"*extend<DFP_ALL:mode><BFP:mode>2\")\n\t(\"extend<BFP:mode><DFP_ALL:mode>2\")\n\t(\"extend<DFP_ALL:mode><BFP:mode>2\"): Replace FPR2_REGNUM with\n\tFPR4_REGNUM.\n\nFrom-SVN: r200787", "tree": {"sha": "378251eb61d6998b632422293d53a1a886bc8b7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/378251eb61d6998b632422293d53a1a886bc8b7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cf4c39ee664e36df9b2d764534b455a8a432328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cf4c39ee664e36df9b2d764534b455a8a432328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cf4c39ee664e36df9b2d764534b455a8a432328", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cf4c39ee664e36df9b2d764534b455a8a432328/comments", "author": null, "committer": null, "parents": [{"sha": "eebb98a55b8a102555c0e9823ed5597f8dc7cefb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eebb98a55b8a102555c0e9823ed5597f8dc7cefb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eebb98a55b8a102555c0e9823ed5597f8dc7cefb"}], "stats": {"total": 147, "additions": 80, "deletions": 67}, "files": [{"sha": "5d243ff49be97561669dcf39635e84227f938fec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf4c39ee664e36df9b2d764534b455a8a432328/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf4c39ee664e36df9b2d764534b455a8a432328/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2cf4c39ee664e36df9b2d764534b455a8a432328", "patch": "@@ -1,3 +1,19 @@\n+2013-07-08  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/s390.c: Replace F*_REGNUM with FPR*_REGNUM.\n+\t* config/s390/s390.h: Remove F*_REGNUM macro definitions.\n+\t* config/s390/s390.md: Define FPR*_REGNUM constants.\n+\tFix FPR2_REGNUM constant (18 -> 17).\n+\t(\"*trunc<BFP:mode><DFP_ALL:mode>2\")\n+\t(\"*trunc<DFP_ALL:mode><BFP:mode>2\")\n+\t(\"trunc<BFP:mode><DFP_ALL:mode>2\")\n+\t(\"trunc<DFP_ALL:mode><BFP:mode>2\")\n+\t(\"*extend<BFP:mode><DFP_ALL:mode>2\")\n+\t(\"*extend<DFP_ALL:mode><BFP:mode>2\")\n+\t(\"extend<BFP:mode><DFP_ALL:mode>2\")\n+\t(\"extend<DFP_ALL:mode><BFP:mode>2\"): Replace FPR2_REGNUM with\n+\tFPR4_REGNUM.\n+\n 2013-07-08  Graham Stott  <graham.stott@btinternet.com>\n \t* Makefile.in: (c-family-warn): Define to $(STRICT_WARN)\n "}, {"sha": "7ce0c30c8838e06e404d01e8dd67d9bdb18aa946", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf4c39ee664e36df9b2d764534b455a8a432328/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf4c39ee664e36df9b2d764534b455a8a432328/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=2cf4c39ee664e36df9b2d764534b455a8a432328", "patch": "@@ -333,9 +333,9 @@ struct GTY (()) s390_frame_layout\n   /* Bits standing for floating point registers. Set, if the\n      respective register has to be saved. Starting with reg 16 (f0)\n      at the rightmost bit.\n-     Bit 15 -  8  7  6  5  4  3  2  1  0\n-     fpr 15 -  8  7  5  3  1  6  4  2  0\n-     reg 31 - 24 23 22 21 20 19 18 17 16  */\n+     Bit 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0\n+     fpr 15 13 11  9 14 12 10  8  7  5  3  1  6  4  2  0\n+     reg 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16  */\n   unsigned int fpr_bitmap;\n \n   /* Number of floating point registers f8-f15 which must be saved.  */\n@@ -380,9 +380,9 @@ struct GTY(()) machine_function\n #define cfun_gprs_save_area_size ((cfun_frame_layout.last_save_gpr_slot -           \\\n   cfun_frame_layout.first_save_gpr_slot + 1) * UNITS_PER_LONG)\n #define cfun_set_fpr_save(REGNO) (cfun->machine->frame_layout.fpr_bitmap |=    \\\n-  (1 << (REGNO - F0_REGNUM)))\n+  (1 << (REGNO - FPR0_REGNUM)))\n #define cfun_fpr_save_p(REGNO) (!!(cfun->machine->frame_layout.fpr_bitmap &    \\\n-  (1 << (REGNO - F0_REGNUM))))\n+  (1 << (REGNO - FPR0_REGNUM))))\n \n /* Number of GPRs and FPRs used for argument passing.  */\n #define GP_ARG_NUM_REG 5\n@@ -7472,12 +7472,12 @@ s390_frame_area (int *area_bottom, int *area_top)\n \n   if (!TARGET_64BIT)\n     {\n-      if (cfun_fpr_save_p (F4_REGNUM))\n+      if (cfun_fpr_save_p (FPR4_REGNUM))\n \t{\n \t  b = MIN (b, cfun_frame_layout.f4_offset);\n \t  t = MAX (t, cfun_frame_layout.f4_offset + 8);\n \t}\n-      if (cfun_fpr_save_p (F6_REGNUM))\n+      if (cfun_fpr_save_p (FPR6_REGNUM))\n \t{\n \t  b = MIN (b, cfun_frame_layout.f4_offset + 8);\n \t  t = MAX (t, cfun_frame_layout.f4_offset + 16);\n@@ -7509,7 +7509,7 @@ s390_register_info (int clobbered_regs[])\n       cfun_frame_layout.fpr_bitmap = 0;\n       cfun_frame_layout.high_fprs = 0;\n       if (TARGET_64BIT)\n-\tfor (i = F8_REGNUM; i <= F15_REGNUM; i++)\n+\tfor (i = FPR8_REGNUM; i <= FPR15_REGNUM; i++)\n \t  /* During reload we have to use the df_regs_ever_live infos\n \t     since reload is marking FPRs used as spill slots there as\n \t     live before actually making the code changes.  Without\n@@ -7648,16 +7648,16 @@ s390_register_info (int clobbered_regs[])\n \t    min_fpr = 0;\n \n \t  for (i = min_fpr; i < max_fpr; i++)\n-\t    cfun_set_fpr_save (i + F0_REGNUM);\n+\t    cfun_set_fpr_save (i + FPR0_REGNUM);\n \t}\n     }\n \n   if (!TARGET_64BIT)\n     {\n-      if (df_regs_ever_live_p (F4_REGNUM) && !global_regs[F4_REGNUM])\n-\tcfun_set_fpr_save (F4_REGNUM);\n-      if (df_regs_ever_live_p (F6_REGNUM) && !global_regs[F6_REGNUM])\n-\tcfun_set_fpr_save (F6_REGNUM);\n+      if (df_regs_ever_live_p (FPR4_REGNUM) && !global_regs[FPR4_REGNUM])\n+\tcfun_set_fpr_save (FPR4_REGNUM);\n+      if (df_regs_ever_live_p (FPR6_REGNUM) && !global_regs[FPR6_REGNUM])\n+\tcfun_set_fpr_save (FPR6_REGNUM);\n     }\n }\n \n@@ -7694,13 +7694,13 @@ s390_frame_info (void)\n \t{\n \t  cfun_frame_layout.f4_offset\n \t    = (cfun_frame_layout.gprs_offset\n-\t       - 8 * (cfun_fpr_save_p (F4_REGNUM)\n-\t\t      + cfun_fpr_save_p (F6_REGNUM)));\n+\t       - 8 * (cfun_fpr_save_p (FPR4_REGNUM)\n+\t\t      + cfun_fpr_save_p (FPR6_REGNUM)));\n \n \t  cfun_frame_layout.f0_offset\n \t    = (cfun_frame_layout.f4_offset\n-\t       - 8 * (cfun_fpr_save_p (F0_REGNUM)\n-\t\t      + cfun_fpr_save_p (F2_REGNUM)));\n+\t       - 8 * (cfun_fpr_save_p (FPR0_REGNUM)\n+\t\t      + cfun_fpr_save_p (FPR2_REGNUM)));\n \t}\n       else\n \t{\n@@ -7709,26 +7709,26 @@ s390_frame_info (void)\n \t  cfun_frame_layout.f0_offset\n \t    = ((cfun_frame_layout.gprs_offset\n \t\t& ~(STACK_BOUNDARY / BITS_PER_UNIT - 1))\n-\t       - 8 * (cfun_fpr_save_p (F0_REGNUM)\n-\t\t      + cfun_fpr_save_p (F2_REGNUM)));\n+\t       - 8 * (cfun_fpr_save_p (FPR0_REGNUM)\n+\t\t      + cfun_fpr_save_p (FPR2_REGNUM)));\n \n \t  cfun_frame_layout.f4_offset\n \t    = (cfun_frame_layout.f0_offset\n-\t       - 8 * (cfun_fpr_save_p (F4_REGNUM)\n-\t\t      + cfun_fpr_save_p (F6_REGNUM)));\n+\t       - 8 * (cfun_fpr_save_p (FPR4_REGNUM)\n+\t\t      + cfun_fpr_save_p (FPR6_REGNUM)));\n \t}\n     }\n   else /* no backchain */\n     {\n       cfun_frame_layout.f4_offset\n \t= (STACK_POINTER_OFFSET\n-\t   - 8 * (cfun_fpr_save_p (F4_REGNUM)\n-\t\t  + cfun_fpr_save_p (F6_REGNUM)));\n+\t   - 8 * (cfun_fpr_save_p (FPR4_REGNUM)\n+\t\t  + cfun_fpr_save_p (FPR6_REGNUM)));\n \n       cfun_frame_layout.f0_offset\n \t= (cfun_frame_layout.f4_offset\n-\t   - 8 * (cfun_fpr_save_p (F0_REGNUM)\n-\t\t  + cfun_fpr_save_p (F2_REGNUM)));\n+\t   - 8 * (cfun_fpr_save_p (FPR0_REGNUM)\n+\t\t  + cfun_fpr_save_p (FPR2_REGNUM)));\n \n       cfun_frame_layout.gprs_offset\n \t= cfun_frame_layout.f0_offset - cfun_gprs_save_area_size;\n@@ -7760,7 +7760,7 @@ s390_frame_info (void)\n \n       cfun_frame_layout.frame_size += cfun_frame_layout.high_fprs * 8;\n \n-      for (i = F0_REGNUM; i <= F7_REGNUM; i++)\n+      for (i = FPR0_REGNUM; i <= FPR7_REGNUM; i++)\n \tif (cfun_fpr_save_p (i))\n \t  cfun_frame_layout.frame_size += 8;\n \n@@ -8466,7 +8466,7 @@ s390_emit_prologue (void)\n   offset = cfun_frame_layout.f0_offset;\n \n   /* Save f0 and f2.  */\n-  for (i = F0_REGNUM; i <= F0_REGNUM + 1; i++)\n+  for (i = FPR0_REGNUM; i <= FPR0_REGNUM + 1; i++)\n     {\n       if (cfun_fpr_save_p (i))\n \t{\n@@ -8479,7 +8479,7 @@ s390_emit_prologue (void)\n \n   /* Save f4 and f6.  */\n   offset = cfun_frame_layout.f4_offset;\n-  for (i = F4_REGNUM; i <= F4_REGNUM + 1; i++)\n+  for (i = FPR4_REGNUM; i <= FPR4_REGNUM + 1; i++)\n     {\n       if (cfun_fpr_save_p (i))\n \t{\n@@ -8502,7 +8502,7 @@ s390_emit_prologue (void)\n       offset = (cfun_frame_layout.f8_offset\n \t\t+ (cfun_frame_layout.high_fprs - 1) * 8);\n \n-      for (i = F15_REGNUM; i >= F8_REGNUM && offset >= 0; i--)\n+      for (i = FPR15_REGNUM; i >= FPR8_REGNUM && offset >= 0; i--)\n \tif (cfun_fpr_save_p (i))\n \t  {\n \t    insn = save_fpr (stack_pointer_rtx, offset, i);\n@@ -8515,7 +8515,7 @@ s390_emit_prologue (void)\n     }\n \n   if (!TARGET_PACKED_STACK)\n-    next_fpr = cfun_save_high_fprs_p ? F15_REGNUM : 0;\n+    next_fpr = cfun_save_high_fprs_p ? FPR15_REGNUM : 0;\n \n   if (flag_stack_usage_info)\n     current_function_static_stack_size = cfun_frame_layout.frame_size;\n@@ -8660,7 +8660,7 @@ s390_emit_prologue (void)\n \n       offset = 0;\n \n-      for (i = F8_REGNUM; i <= next_fpr; i++)\n+      for (i = FPR8_REGNUM; i <= next_fpr; i++)\n \tif (cfun_fpr_save_p (i))\n \t  {\n \t    rtx addr = plus_constant (Pmode, stack_pointer_rtx,\n@@ -8790,7 +8790,7 @@ s390_emit_epilogue (bool sibcall)\n       if (cfun_save_high_fprs_p)\n \t{\n \t  next_offset = cfun_frame_layout.f8_offset;\n-\t  for (i = F8_REGNUM; i <= F15_REGNUM; i++)\n+\t  for (i = FPR8_REGNUM; i <= FPR15_REGNUM; i++)\n \t    {\n \t      if (cfun_fpr_save_p (i))\n \t\t{\n@@ -8809,7 +8809,7 @@ s390_emit_epilogue (bool sibcall)\n     {\n       next_offset = cfun_frame_layout.f4_offset;\n       /* f4, f6 */\n-      for (i = F4_REGNUM; i <= F4_REGNUM + 1; i++)\n+      for (i = FPR4_REGNUM; i <= FPR4_REGNUM + 1; i++)\n \t{\n \t  if (cfun_fpr_save_p (i))\n \t    {\n@@ -10518,18 +10518,18 @@ s390_conditional_register_usage (void)\n     }\n   if (TARGET_64BIT)\n     {\n-      for (i = F8_REGNUM; i <= F15_REGNUM; i++)\n+      for (i = FPR8_REGNUM; i <= FPR15_REGNUM; i++)\n \tcall_used_regs[i] = call_really_used_regs[i] = 0;\n     }\n   else\n     {\n-      call_used_regs[F4_REGNUM] = call_really_used_regs[F4_REGNUM] = 0;\n-      call_used_regs[F6_REGNUM] = call_really_used_regs[F6_REGNUM] = 0;\n+      call_used_regs[FPR4_REGNUM] = call_really_used_regs[FPR4_REGNUM] = 0;\n+      call_used_regs[FPR6_REGNUM] = call_really_used_regs[FPR6_REGNUM] = 0;\n     }\n \n   if (TARGET_SOFT_FLOAT)\n     {\n-      for (i = F0_REGNUM; i <= F15_REGNUM; i++)\n+      for (i = FPR0_REGNUM; i <= FPR15_REGNUM; i++)\n \tcall_used_regs[i] = fixed_regs[i] = 1;\n     }\n }"}, {"sha": "d53fed7a6f2ee6b5e0b1972bebc5f549cba7c5c5", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf4c39ee664e36df9b2d764534b455a8a432328/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf4c39ee664e36df9b2d764534b455a8a432328/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=2cf4c39ee664e36df9b2d764534b455a8a432328", "patch": "@@ -477,23 +477,6 @@ enum reg_class\n   { 0xffffffff, 0x0000003f },\t/* ALL_REGS */\t\t\\\n }\n \n-#define F0_REGNUM  16\n-#define F1_REGNUM  20\n-#define F2_REGNUM  17\n-#define F3_REGNUM  21\n-#define F4_REGNUM  18\n-#define F5_REGNUM  22\n-#define F6_REGNUM  19\n-#define F7_REGNUM  23\n-#define F8_REGNUM  24\n-#define F9_REGNUM  25\n-#define F10_REGNUM 26\n-#define F11_REGNUM 27\n-#define F12_REGNUM 28\n-#define F13_REGNUM 29\n-#define F14_REGNUM 30\n-#define F15_REGNUM 31\n-\n /* In some case register allocation order is not enough for IRA to\n    generate a good code.  The following macro (if defined) increases\n    cost of REGNO for a pseudo approximately by pseudo usage frequency"}, {"sha": "95ded7c78e69549c538ebef798fe091f0837c442", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf4c39ee664e36df9b2d764534b455a8a432328/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf4c39ee664e36df9b2d764534b455a8a432328/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=2cf4c39ee664e36df9b2d764534b455a8a432328", "patch": "@@ -183,7 +183,21 @@\n    (GPR0_REGNUM                  0)\n    ; Floating point registers.\n    (FPR0_REGNUM                 16)\n-   (FPR2_REGNUM                 18)\n+   (FPR1_REGNUM                 20)\n+   (FPR2_REGNUM                 17)\n+   (FPR3_REGNUM                 21)\n+   (FPR4_REGNUM                 18)\n+   (FPR5_REGNUM                 22)\n+   (FPR6_REGNUM                 19)\n+   (FPR7_REGNUM                 23)\n+   (FPR8_REGNUM                 24)\n+   (FPR9_REGNUM                 28)\n+   (FPR10_REGNUM                25)\n+   (FPR11_REGNUM                29)\n+   (FPR12_REGNUM                26)\n+   (FPR13_REGNUM                30)\n+   (FPR14_REGNUM                27)\n+   (FPR15_REGNUM                31)\n   ])\n \n ;;\n@@ -4405,26 +4419,26 @@\n \n (define_insn \"*trunc<BFP:mode><DFP_ALL:mode>2\"\n   [(set (reg:DFP_ALL FPR0_REGNUM)\n-        (float_truncate:DFP_ALL (reg:BFP FPR2_REGNUM)))\n+        (float_truncate:DFP_ALL (reg:BFP FPR4_REGNUM)))\n    (use (reg:SI GPR0_REGNUM))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_HARD_DFP\"\n   \"pfpo\")\n \n (define_insn \"*trunc<DFP_ALL:mode><BFP:mode>2\"\n   [(set (reg:BFP FPR0_REGNUM)\n-        (float_truncate:BFP (reg:DFP_ALL FPR2_REGNUM)))\n+        (float_truncate:BFP (reg:DFP_ALL FPR4_REGNUM)))\n    (use (reg:SI GPR0_REGNUM))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_HARD_DFP\"\n   \"pfpo\")\n \n (define_expand \"trunc<BFP:mode><DFP_ALL:mode>2\"\n-  [(set (reg:BFP FPR2_REGNUM) (match_operand:BFP 1 \"nonimmediate_operand\" \"\"))\n+  [(set (reg:BFP FPR4_REGNUM) (match_operand:BFP 1 \"nonimmediate_operand\" \"\"))\n    (set (reg:SI GPR0_REGNUM) (match_dup 2))\n    (parallel\n     [(set (reg:DFP_ALL FPR0_REGNUM)\n-          (float_truncate:DFP_ALL (reg:BFP FPR2_REGNUM)))\n+          (float_truncate:DFP_ALL (reg:BFP FPR4_REGNUM)))\n      (use (reg:SI GPR0_REGNUM))\n      (clobber (reg:CC CC_REGNUM))])\n    (set (match_operand:DFP_ALL 0 \"nonimmediate_operand\" \"\")\n@@ -4442,11 +4456,11 @@\n })\n \n (define_expand \"trunc<DFP_ALL:mode><BFP:mode>2\"\n-  [(set (reg:DFP_ALL FPR2_REGNUM)\n+  [(set (reg:DFP_ALL FPR4_REGNUM)\n         (match_operand:DFP_ALL 1 \"nonimmediate_operand\" \"\"))\n    (set (reg:SI GPR0_REGNUM) (match_dup 2))\n    (parallel\n-    [(set (reg:BFP FPR0_REGNUM) (float_truncate:BFP (reg:DFP_ALL FPR2_REGNUM)))\n+    [(set (reg:BFP FPR0_REGNUM) (float_truncate:BFP (reg:DFP_ALL FPR4_REGNUM)))\n      (use (reg:SI GPR0_REGNUM))\n      (clobber (reg:CC CC_REGNUM))])\n    (set (match_operand:BFP 0 \"nonimmediate_operand\" \"\") (reg:BFP FPR0_REGNUM))]\n@@ -4467,25 +4481,25 @@\n ;\n \n (define_insn \"*extend<BFP:mode><DFP_ALL:mode>2\"\n-  [(set (reg:DFP_ALL FPR0_REGNUM) (float_extend:DFP_ALL (reg:BFP FPR2_REGNUM)))\n+  [(set (reg:DFP_ALL FPR0_REGNUM) (float_extend:DFP_ALL (reg:BFP FPR4_REGNUM)))\n    (use (reg:SI GPR0_REGNUM))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_HARD_DFP\"\n   \"pfpo\")\n \n (define_insn \"*extend<DFP_ALL:mode><BFP:mode>2\"\n-  [(set (reg:BFP FPR0_REGNUM) (float_extend:BFP (reg:DFP_ALL FPR2_REGNUM)))\n+  [(set (reg:BFP FPR0_REGNUM) (float_extend:BFP (reg:DFP_ALL FPR4_REGNUM)))\n    (use (reg:SI GPR0_REGNUM))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_HARD_DFP\"\n   \"pfpo\")\n \n (define_expand \"extend<BFP:mode><DFP_ALL:mode>2\"\n-  [(set (reg:BFP FPR2_REGNUM) (match_operand:BFP 1 \"nonimmediate_operand\" \"\"))\n+  [(set (reg:BFP FPR4_REGNUM) (match_operand:BFP 1 \"nonimmediate_operand\" \"\"))\n    (set (reg:SI GPR0_REGNUM) (match_dup 2))\n    (parallel\n     [(set (reg:DFP_ALL FPR0_REGNUM)\n-          (float_extend:DFP_ALL (reg:BFP FPR2_REGNUM)))\n+          (float_extend:DFP_ALL (reg:BFP FPR4_REGNUM)))\n      (use (reg:SI GPR0_REGNUM))\n      (clobber (reg:CC CC_REGNUM))])\n    (set (match_operand:DFP_ALL 0 \"nonimmediate_operand\" \"\")\n@@ -4503,11 +4517,11 @@\n })\n \n (define_expand \"extend<DFP_ALL:mode><BFP:mode>2\"\n-  [(set (reg:DFP_ALL FPR2_REGNUM)\n+  [(set (reg:DFP_ALL FPR4_REGNUM)\n         (match_operand:DFP_ALL 1 \"nonimmediate_operand\" \"\"))\n    (set (reg:SI GPR0_REGNUM) (match_dup 2))\n    (parallel\n-    [(set (reg:BFP FPR0_REGNUM) (float_extend:BFP (reg:DFP_ALL FPR2_REGNUM)))\n+    [(set (reg:BFP FPR0_REGNUM) (float_extend:BFP (reg:DFP_ALL FPR4_REGNUM)))\n      (use (reg:SI GPR0_REGNUM))\n      (clobber (reg:CC CC_REGNUM))])\n    (set (match_operand:BFP 0 \"nonimmediate_operand\" \"\") (reg:BFP FPR0_REGNUM))]"}]}