{"sha": "e66d0b7b87d105d24da8c4784a0b907fb6b2c095", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY2ZDBiN2I4N2QxMDVkMjRkYThjNDc4NGEwYjkwN2ZiNmIyYzA5NQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-06-29T18:30:51Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-06-30T16:11:17Z"}, "message": "c++: DR2397 - auto specifier for * and & to arrays [PR100975]\n\nThis patch implements DR2397, which removes the restriction in\n[dcl.array]p4 that the array element type may not be a placeholder\ntype.  We don't need to worry about decltype(auto) here, so this\nallows code like\n\n  int a[3];\n  auto (*p)[3] = &a;\n  auto (&r)[3] = a;\n\nHowever, note that\n\n  auto (&&r)[2] = { 1, 2 };\n  auto arr[2] = { 1, 2 };\n\nstill doesn't work (although one day it might) and neither does\n\n  int arr[5];\n  auto x[5] = arr;\n\ngiven that auto deduction is performed in terms of function template\nargument deduction, so the array decays to *.\n\n\tPR c++/100975\n\tDR 2397\n\ngcc/cp/ChangeLog:\n\n\t* decl.c (create_array_type_for_decl): Allow array of auto.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/auto24.C: Remove dg-error.\n\t* g++.dg/cpp0x/auto3.C: Adjust dg-error.\n\t* g++.dg/cpp0x/auto42.C: Likewise.\n\t* g++.dg/cpp0x/initlist75.C: Likewise.\n\t* g++.dg/cpp0x/initlist80.C: Likewise.\n\t* g++.dg/diagnostic/auto1.C: Remove dg-error.\n\t* g++.dg/cpp23/auto-array.C: New test.", "tree": {"sha": "2f138c42691407b73a4c335bad2e43d13620c484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f138c42691407b73a4c335bad2e43d13620c484"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e66d0b7b87d105d24da8c4784a0b907fb6b2c095", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66d0b7b87d105d24da8c4784a0b907fb6b2c095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e66d0b7b87d105d24da8c4784a0b907fb6b2c095", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66d0b7b87d105d24da8c4784a0b907fb6b2c095/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a075350ee7bffa6c90d9d233de78515f498b5149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a075350ee7bffa6c90d9d233de78515f498b5149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a075350ee7bffa6c90d9d233de78515f498b5149"}], "stats": {"total": 63, "additions": 45, "deletions": 18}, "files": [{"sha": "7672947e64a3f8e2861ba937164b129ec8dc22e1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66d0b7b87d105d24da8c4784a0b907fb6b2c095/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66d0b7b87d105d24da8c4784a0b907fb6b2c095/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e66d0b7b87d105d24da8c4784a0b907fb6b2c095", "patch": "@@ -10969,17 +10969,6 @@ create_array_type_for_decl (tree name, tree type, tree size, location_t loc)\n   if (type == error_mark_node || size == error_mark_node)\n     return error_mark_node;\n \n-  /* 8.3.4/1: If the type of the identifier of D contains the auto\n-     type-specifier, the program is ill-formed.  */\n-  if (type_uses_auto (type))\n-    {\n-      if (name)\n-\terror_at (loc, \"%qD declared as array of %qT\", name, type);\n-      else\n-\terror (\"creating array of %qT\", type);\n-      return error_mark_node;\n-    }\n-\n   /* If there are some types which cannot be array elements,\n      issue an error-message and return.  */\n   switch (TREE_CODE (type))"}, {"sha": "ac1ba24f72d5a0193c16ef05e9c3e92bd7137b9a", "filename": "gcc/testsuite/g++.dg/cpp0x/auto24.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66d0b7b87d105d24da8c4784a0b907fb6b2c095/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66d0b7b87d105d24da8c4784a0b907fb6b2c095/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto24.C?ref=e66d0b7b87d105d24da8c4784a0b907fb6b2c095", "patch": "@@ -1,5 +1,6 @@\n // PR c++/48599\n // { dg-do compile { target c++11 } }\n+// Allowed since DR2397.\n \n int v[1];\n-auto (*p)[1] = &v;\t\t// { dg-error \"8:.p. declared as array of .auto\" }\n+auto (*p)[1] = &v;"}, {"sha": "7cde745ddf22e9ef76bb9be6a0caf89c439cb6d6", "filename": "gcc/testsuite/g++.dg/cpp0x/auto3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66d0b7b87d105d24da8c4784a0b907fb6b2c095/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66d0b7b87d105d24da8c4784a0b907fb6b2c095/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto3.C?ref=e66d0b7b87d105d24da8c4784a0b907fb6b2c095", "patch": "@@ -9,8 +9,8 @@ auto x;\t\t\t\t// { dg-error \"auto\" }\n // deduction, the program is ill-formed.\n auto i = 42, j = 42.0;\t\t// { dg-error \"auto\" }\n \n-// New CWG issue\n-auto a[2] = { 1, 2 };\t\t// { dg-error \"6:.a. declared as array of .auto\" }\n+// CWG issue 2397: [dcl.type.auto.deduct]/2: \"T shall not be an array type\".\n+auto a[2] = { 1, 2 };\t\t// { dg-error \"20:unable to deduce\" }\n \n template<class T>\n struct A { };"}, {"sha": "5b2f6779aafc65c95ce8852016b6af810ba7425d", "filename": "gcc/testsuite/g++.dg/cpp0x/auto42.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66d0b7b87d105d24da8c4784a0b907fb6b2c095/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66d0b7b87d105d24da8c4784a0b907fb6b2c095/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto42.C?ref=e66d0b7b87d105d24da8c4784a0b907fb6b2c095", "patch": "@@ -5,5 +5,5 @@\n \n void foo(int i)\n {\n-  auto x[1] = { 0 };\t\t// { dg-error \"8:.x. declared as array of .auto\" }\n+  auto x[1] = { 0 };\t\t// { dg-error \"19:unable to deduce\" }\n }"}, {"sha": "f572f5181ad730f9db722bd234bbb3926c2cd626", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist75.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66d0b7b87d105d24da8c4784a0b907fb6b2c095/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist75.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66d0b7b87d105d24da8c4784a0b907fb6b2c095/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist75.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist75.C?ref=e66d0b7b87d105d24da8c4784a0b907fb6b2c095", "patch": "@@ -3,4 +3,4 @@\n \n #include <initializer_list>\n \n-auto foo[] = {};    // { dg-error \"6:.foo. declared as array of .auto\" }\n+auto foo[] = {};    // { dg-error \"15:unable to deduce\" }"}, {"sha": "a6ab40ca34982b49cbbc53b6fa3e10b6653591c4", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist80.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66d0b7b87d105d24da8c4784a0b907fb6b2c095/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist80.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66d0b7b87d105d24da8c4784a0b907fb6b2c095/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist80.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist80.C?ref=e66d0b7b87d105d24da8c4784a0b907fb6b2c095", "patch": "@@ -3,4 +3,4 @@\n \n #include <initializer_list>\n \n-auto x[2] = {};\t\t\t// { dg-error \"6:.x. declared as array of .auto\" }\n+auto x[2] = {};\t\t\t// { dg-error \"14:unable to deduce\" }"}, {"sha": "42f2b0c5cf47439488f73757f6c2717bf1428db8", "filename": "gcc/testsuite/g++.dg/cpp23/auto-array.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66d0b7b87d105d24da8c4784a0b907fb6b2c095/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-array.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66d0b7b87d105d24da8c4784a0b907fb6b2c095/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-array.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-array.C?ref=e66d0b7b87d105d24da8c4784a0b907fb6b2c095", "patch": "@@ -0,0 +1,36 @@\n+// PR c++/100975\n+// DR 2397 - auto specifier for pointers and references to arrays \n+// { dg-do compile { target c++11 } }\n+\n+struct false_type { static constexpr bool value = false; };\n+struct true_type { static constexpr bool value = true; };\n+template<class T, class U>\n+struct is_same : false_type {}; \n+template<class T>\n+struct is_same<T, T> : true_type {};\n+\n+using U = int[3];\n+\n+void\n+g ()\n+{\n+  int a[3];\n+  auto (*p)[3] = &a;\n+  auto (&r)[3] = a;\n+  int aa[3][3];\n+  auto (*pp)[3][3] = &aa;\n+  auto (&rr)[3][3] = aa;\n+\n+  auto (&&rv)[3] = U{};\n+\n+  static_assert (is_same<decltype (p), int(*)[3]>::value, \"\");\n+  static_assert (is_same<decltype (pp), int(*)[3][3]>::value, \"\");\n+  static_assert (is_same<decltype (r), int(&)[3]>::value, \"\");\n+  static_assert (is_same<decltype (rv), int(&&)[3]>::value, \"\");\n+  static_assert (is_same<decltype (rr), int(&)[3][3]>::value, \"\");\n+\n+#if __cplusplus >= 201402L\n+  // In a generic lambda parameter this was OK even before.\n+  auto l = [](auto (&arr)[5]) { return arr[0]; };\n+#endif\n+}"}, {"sha": "9d9979e3fdc20db42c7b83edcdd1dc06c8258798", "filename": "gcc/testsuite/g++.dg/diagnostic/auto1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66d0b7b87d105d24da8c4784a0b907fb6b2c095/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fauto1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66d0b7b87d105d24da8c4784a0b907fb6b2c095/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fauto1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fauto1.C?ref=e66d0b7b87d105d24da8c4784a0b907fb6b2c095", "patch": "@@ -1,4 +1,5 @@\n // PR c++/86915\n // { dg-do compile { target c++17 } }\n+// Allowed since DR2397.\n \n-template<auto [1]> struct S; // { dg-error \"creating array of .auto.\" }\n+template<auto [1]> struct S;"}]}