{"sha": "e4bec638243f4339a4700f663c32421043679846", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRiZWM2MzgyNDNmNDMzOWE0NzAwZjY2M2MzMjQyMTA0MzY3OTg0Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2007-04-05T22:39:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2007-04-05T22:39:56Z"}, "message": "alpha.c (print_operand): Remove.\n\n        * config/alpha/alpha.c (print_operand) [+]: Remove.\n        (alpha_end_function): Print nop if call at end of function.\n        * config/alpha/alpha.h (PRINT_OPERAND_PUNCT_VALID_P): Remove +.\n        * config/alpha/alpha.md (UNSPEC_LDGP1): New.\n        (call_osf_1_er_noreturn, call_value_osf_1_er_noreturn): New.\n        (call_osf_2_er_nogp, call_value_osf_2_er_nogp): New.\n        (call_osf_2_er, call_value_osf_2_er): Merge the ldgp highpart into\n        the call pattern. Update peepholes to match.\n\nFrom-SVN: r123529", "tree": {"sha": "530fa030e24babd155a9fddf78cc18bc048ea0c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/530fa030e24babd155a9fddf78cc18bc048ea0c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4bec638243f4339a4700f663c32421043679846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4bec638243f4339a4700f663c32421043679846", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4bec638243f4339a4700f663c32421043679846", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4bec638243f4339a4700f663c32421043679846/comments", "author": null, "committer": null, "parents": [{"sha": "44aea9acaba6da791facb79cf2a7e49de9c796a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44aea9acaba6da791facb79cf2a7e49de9c796a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44aea9acaba6da791facb79cf2a7e49de9c796a0"}], "stats": {"total": 209, "additions": 129, "deletions": 80}, "files": [{"sha": "1df7b55640451cef5d96c2a874356f6036124a4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4bec638243f4339a4700f663c32421043679846/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4bec638243f4339a4700f663c32421043679846/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4bec638243f4339a4700f663c32421043679846", "patch": "@@ -1,3 +1,14 @@\n+2007-04-05  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (print_operand) [+]: Remove.\n+\t(alpha_end_function): Print nop if call at end of function.\n+\t* config/alpha/alpha.h (PRINT_OPERAND_PUNCT_VALID_P): Remove +.\n+\t* config/alpha/alpha.md (UNSPEC_LDGP1): New.\n+\t(call_osf_1_er_noreturn, call_value_osf_1_er_noreturn): New.\n+\t(call_osf_2_er_nogp, call_value_osf_2_er_nogp): New.\n+\t(call_osf_2_er, call_value_osf_2_er): Merge the ldgp highpart into\n+\tthe call pattern. Update peepholes to match.\n+\n 2007-04-05  Janis Johnson  <janis187@us.ibm.com>\n \n \t* doc/extend.texi (Other Builtins): Add decimal float variants"}, {"sha": "976111462c14a50b5152baad0c3df52d9c6dad53", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4bec638243f4339a4700f663c32421043679846/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4bec638243f4339a4700f663c32421043679846/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=e4bec638243f4339a4700f663c32421043679846", "patch": "@@ -4990,13 +4990,6 @@ print_operand (FILE *file, rtx x, int code)\n       fputc ((TARGET_FLOAT_VAX ? 'g' : 't'), file);\n       break;\n \n-    case '+':\n-      /* Generates a nop after a noreturn call at the very end of the\n-\t function.  */\n-      if (next_real_insn (current_output_insn) == 0)\n-\tfprintf (file, \"\\n\\tnop\");\n-      break;\n-\n     case '#':\n       if (alpha_this_literal_sequence_number == 0)\n \talpha_this_literal_sequence_number = alpha_next_sequence_number++;\n@@ -8221,6 +8214,17 @@ alpha_expand_epilogue (void)\n void\n alpha_end_function (FILE *file, const char *fnname, tree decl ATTRIBUTE_UNUSED)\n {\n+  rtx insn;\n+\n+  /* We output a nop after noreturn calls at the very end of the function to\n+     ensure that the return address always remains in the caller's code range,\n+     as not doing so might confuse unwinding engines.  */\n+  insn = get_last_insn ();\n+  if (!INSN_P (insn))\n+    insn = prev_active_insn (insn);\n+  if (GET_CODE (insn) == CALL_INSN)\n+    output_asm_insn (get_insn_template (CODE_FOR_nop, NULL), NULL);\n+\n #if TARGET_ABI_OPEN_VMS\n   alpha_write_linkage (file, fnname, decl);\n #endif"}, {"sha": "a52ae2c5727da66b6e1d2398d3f3995060e571ba", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4bec638243f4339a4700f663c32421043679846/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4bec638243f4339a4700f663c32421043679846/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=e4bec638243f4339a4700f663c32421043679846", "patch": "@@ -1363,14 +1363,11 @@ do {\t\t\t\t\t\t\\\n \n    -\tGenerates double precision suffix for floating point\n \tinstructions (t for IEEE, g for VAX)\n-\n-   +\tGenerates a nop instruction after a noreturn call at the very end\n-\tof the function\n    */\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CODE) \\\n   ((CODE) == '/' || (CODE) == ',' || (CODE) == '-' || (CODE) == '~' \\\n-   || (CODE) == '#' || (CODE) == '*' || (CODE) == '&' || (CODE) == '+')\n+   || (CODE) == '#' || (CODE) == '*' || (CODE) == '&')\n \n /* Print a memory address as an operand to reference that memory location.  */\n "}, {"sha": "7f323af83ea3bb8598d608ff74d7c4dd8852e048", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 106, "deletions": 69, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4bec638243f4339a4700f663c32421043679846/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4bec638243f4339a4700f663c32421043679846/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=e4bec638243f4339a4700f663c32421043679846", "patch": "@@ -26,6 +26,7 @@\n \n (define_constants\n   [(UNSPEC_ARG_HOME\t0)\n+   (UNSPEC_LDGP1\t1)\n    (UNSPEC_INSXH\t2)\n    (UNSPEC_MSKXH\t3)\n    (UNSPEC_CVTQL\t4)\n@@ -4759,6 +4760,20 @@\n   emit_move_insn (gen_rtx_REG (DImode, 25), operands[2]);\n })\n \n+(define_insn \"*call_osf_1_er_noreturn\"\n+  [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"c,R,s\"))\n+\t (match_operand 1 \"\" \"\"))\n+   (use (reg:DI 29))\n+   (clobber (reg:DI 26))]\n+  \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\n+   && find_reg_note (insn, REG_NORETURN, NULL_RTX)\"\n+  \"@\n+   jsr $26,($27),0\n+   bsr $26,%0\\t\\t!samegp\n+   ldq $27,%0($29)\\t\\t!literal!%#\\;jsr $26,($27),%0\\t\\t!lituse_jsr!%#\"\n+  [(set_attr \"type\" \"jsr\")\n+   (set_attr \"length\" \"*,*,8\")])\n+\n (define_insn \"*call_osf_1_er\"\n   [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"c,R,s\"))\n \t (match_operand 1 \"\" \"\"))\n@@ -4785,10 +4800,10 @@\n        || find_reg_note (insn, REG_NORETURN, NULL_RTX))\"\n   [(parallel [(call (mem:DI (match_dup 2))\n \t\t    (match_dup 1))\n-\t      (set (reg:DI 26) (plus:DI (pc) (const_int 4)))\n-\t      (unspec_volatile [(reg:DI 29)] UNSPECV_BLOCKAGE)\n+\t      (use (reg:DI 29))\n \t      (use (match_dup 0))\n-\t      (use (match_dup 3))])]\n+\t      (use (match_dup 3))\n+\t      (clobber (reg:DI 26))])]\n {\n   if (CONSTANT_P (operands[0]))\n     {\n@@ -4816,14 +4831,13 @@\n          || find_reg_note (insn, REG_NORETURN, NULL_RTX))\"\n   [(parallel [(call (mem:DI (match_dup 2))\n \t\t    (match_dup 1))\n-\t      (set (reg:DI 26) (plus:DI (pc) (const_int 4)))\n-\t      (unspec_volatile [(reg:DI 29)] UNSPECV_BLOCKAGE)\n+\t      (set (match_dup 5)\n+\t\t   (unspec:DI [(match_dup 5) (match_dup 3)] UNSPEC_LDGP1))\n \t      (use (match_dup 0))\n-\t      (use (match_dup 4))])\n-   (set (reg:DI 29)\n-\t(unspec_volatile:DI [(reg:DI 26) (match_dup 3)] UNSPECV_LDGP1))\n-   (set (reg:DI 29)\n-\t(unspec:DI [(reg:DI 29) (match_dup 3)] UNSPEC_LDGP2))]\n+\t      (use (match_dup 4))\n+\t      (clobber (reg:DI 26))])\n+   (set (match_dup 5)\n+\t(unspec:DI [(match_dup 5) (match_dup 3)] UNSPEC_LDGP2))]\n {\n   if (CONSTANT_P (operands[0]))\n     {\n@@ -4839,32 +4853,34 @@\n       operands[4] = const0_rtx;\n     }\n   operands[3] = GEN_INT (alpha_next_sequence_number++);\n+  operands[5] = pic_offset_table_rtx;\n })\n \n-;; We add a blockage unspec_volatile to prevent insns from moving down\n-;; from above the call to in between the call and the ldah gpdisp.\n+(define_insn \"*call_osf_2_er_nogp\"\n+  [(call (mem:DI (match_operand:DI 0 \"register_operand\" \"c\"))\n+\t (match_operand 1 \"\" \"\"))\n+   (use (reg:DI 29))\n+   (use (match_operand 2 \"\" \"\"))\n+   (use (match_operand 3 \"const_int_operand\" \"\"))\n+   (clobber (reg:DI 26))]\n+  \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n+  \"jsr $26,(%0),%2%J3\"\n+  [(set_attr \"type\" \"jsr\")])\n \n (define_insn \"*call_osf_2_er\"\n   [(call (mem:DI (match_operand:DI 0 \"register_operand\" \"c\"))\n \t (match_operand 1 \"\" \"\"))\n-   (set (reg:DI 26) (plus:DI (pc) (const_int 4)))\n-   (unspec_volatile [(reg:DI 29)] UNSPECV_BLOCKAGE)\n+   (set (reg:DI 29)\n+\t(unspec:DI [(reg:DI 29) (match_operand 4 \"const_int_operand\" \"\")]\n+\t\t   UNSPEC_LDGP1))\n    (use (match_operand 2 \"\" \"\"))\n-   (use (match_operand 3 \"const_int_operand\" \"\"))]\n+   (use (match_operand 3 \"const_int_operand\" \"\"))\n+   (clobber (reg:DI 26))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n-  \"jsr $26,(%0),%2%J3\"\n+  \"jsr $26,(%0),%2%J3\\;ldah $29,0($26)\\t\\t!gpdisp!%4\"\n   [(set_attr \"type\" \"jsr\")\n-   (set_attr \"cannot_copy\" \"true\")])\n-\n-;; We output a nop after noreturn calls at the very end of the function to\n-;; ensure that the return address always remains in the caller's code range,\n-;; as not doing so might confuse unwinding engines.\n-;;\n-;; The potential change in insn length is not reflected in the length\n-;; attributes at this stage. Since the extra space is only actually added at\n-;; the very end of the compilation process (via final/print_operand), it\n-;; really seems harmless and not worth the trouble of some extra computation\n-;; cost and complexity.\n+   (set_attr \"cannot_copy\" \"true\")\n+   (set_attr \"length\" \"8\")])\n \n (define_insn \"*call_osf_1_noreturn\"\n   [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"c,R,s\"))\n@@ -4874,9 +4890,9 @@\n   \"! TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\n    && find_reg_note (insn, REG_NORETURN, NULL_RTX)\"\n   \"@\n-   jsr $26,($27),0%+\n-   bsr $26,$%0..ng%+\n-   jsr $26,%0%+\"\n+   jsr $26,($27),0\n+   bsr $26,$%0..ng\n+   jsr $26,%0\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"*,*,8\")])\n \n@@ -4893,8 +4909,6 @@\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"12,*,16\")])\n \n-;; Note that the DEC assembler expands \"jmp foo\" with $at, which\n-;; doesn't do what we want.\n (define_insn \"*sibcall_osf_1_er\"\n   [(call (mem:DI (match_operand:DI 0 \"symbolic_operand\" \"R,s\"))\n \t (match_operand 1 \"\" \"\"))\n@@ -4906,6 +4920,8 @@\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"*,8\")])\n \n+;; Note that the DEC assembler expands \"jmp foo\" with $at, which\n+;; doesn't do what we want.\n (define_insn \"*sibcall_osf_1\"\n   [(call (mem:DI (match_operand:DI 0 \"symbolic_operand\" \"R,s\"))\n \t (match_operand 1 \"\" \"\"))\n@@ -5070,10 +5086,6 @@\n \n ;; Cache flush.  Used by INITIALIZE_TRAMPOLINE.  0x86 is PAL_imb, but we don't\n ;; want to have to include pal.h in our .s file.\n-;;\n-;; Technically the type for call_pal is jsr, but we use that for determining\n-;; if we need a GP.  Use ibr instead since it has the same EV5 scheduling\n-;; characteristics.\n (define_insn \"imb\"\n   [(unspec_volatile [(const_int 0)] UNSPECV_IMB)]\n   \"\"\n@@ -7925,6 +7937,21 @@\n ;; The call patterns are at the end of the file because their\n ;; wildcard operand0 interferes with nice recognition.\n \n+(define_insn \"*call_value_osf_1_er_noreturn\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"c,R,s\"))\n+\t      (match_operand 2 \"\" \"\")))\n+   (use (reg:DI 29))\n+   (clobber (reg:DI 26))]\n+  \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\n+   && find_reg_note (insn, REG_NORETURN, NULL_RTX)\"\n+  \"@\n+   jsr $26,($27),0\n+   bsr $26,%1\\t\\t!samegp\n+   ldq $27,%1($29)\\t\\t!literal!%#\\;jsr $26,($27),%1\\t\\t!lituse_jsr!%#\"\n+  [(set_attr \"type\" \"jsr\")\n+   (set_attr \"length\" \"*,*,8\")])\n+\n (define_insn \"*call_value_osf_1_er\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"c,R,s\"))\n@@ -7954,10 +7981,10 @@\n   [(parallel [(set (match_dup 0)\n \t\t   (call (mem:DI (match_dup 3))\n \t\t\t (match_dup 2)))\n-\t      (set (reg:DI 26) (plus:DI (pc) (const_int 4)))\n-\t      (unspec_volatile [(reg:DI 29)] UNSPECV_BLOCKAGE)\n+\t      (use (reg:DI 29))\n \t      (use (match_dup 1))\n-\t      (use (match_dup 4))])]\n+\t      (use (match_dup 4))\n+\t      (clobber (reg:DI 26))])]\n {\n   if (CONSTANT_P (operands[1]))\n     {\n@@ -7987,14 +8014,13 @@\n   [(parallel [(set (match_dup 0)\n \t\t   (call (mem:DI (match_dup 3))\n \t\t\t (match_dup 2)))\n-\t      (set (reg:DI 26) (plus:DI (pc) (const_int 4)))\n-\t      (unspec_volatile [(reg:DI 29)] UNSPECV_BLOCKAGE)\n+\t      (set (match_dup 6)\n+\t\t   (unspec:DI [(match_dup 6) (match_dup 4)] UNSPEC_LDGP1))\n \t      (use (match_dup 1))\n-\t      (use (match_dup 5))])\n-   (set (reg:DI 29)\n-\t(unspec_volatile:DI [(reg:DI 26) (match_dup 4)] UNSPECV_LDGP1))\n-   (set (reg:DI 29)\n-\t(unspec:DI [(reg:DI 29) (match_dup 4)] UNSPEC_LDGP2))]\n+\t      (use (match_dup 5))\n+\t      (clobber (reg:DI 26))])\n+   (set (match_dup 6)\n+\t(unspec:DI [(match_dup 6) (match_dup 4)] UNSPEC_LDGP2))]\n {\n   if (CONSTANT_P (operands[1]))\n     {\n@@ -8010,23 +8036,36 @@\n       operands[5] = const0_rtx;\n     }\n   operands[4] = GEN_INT (alpha_next_sequence_number++);\n+  operands[6] = pic_offset_table_rtx;\n })\n \n-;; We add a blockage unspec_volatile to prevent insns from moving down\n-;; from above the call to in between the call and the ldah gpdisp.\n-(define_insn \"*call_value_osf_2_er\"\n+(define_insn \"*call_value_osf_2_er_nogp\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:DI (match_operand:DI 1 \"register_operand\" \"c\"))\n \t      (match_operand 2 \"\" \"\")))\n-   (set (reg:DI 26)\n-\t(plus:DI (pc) (const_int 4)))\n-   (unspec_volatile [(reg:DI 29)] UNSPECV_BLOCKAGE)\n+   (use (reg:DI 29))\n    (use (match_operand 3 \"\" \"\"))\n-   (use (match_operand 4 \"\" \"\"))]\n+   (use (match_operand 4 \"\" \"\"))\n+   (clobber (reg:DI 26))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"jsr $26,(%1),%3%J4\"\n+  [(set_attr \"type\" \"jsr\")])\n+\n+(define_insn \"*call_value_osf_2_er\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:DI (match_operand:DI 1 \"register_operand\" \"c\"))\n+\t      (match_operand 2 \"\" \"\")))\n+   (set (reg:DI 29)\n+\t(unspec:DI [(reg:DI 29) (match_operand 5 \"const_int_operand\" \"\")]\n+\t\t   UNSPEC_LDGP1))\n+   (use (match_operand 3 \"\" \"\"))\n+   (use (match_operand 4 \"\" \"\"))\n+   (clobber (reg:DI 26))]\n+  \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n+  \"jsr $26,(%1),%3%J4\\;ldah $29,0($26)\\t\\t!gpdisp!%5\"\n   [(set_attr \"type\" \"jsr\")\n-   (set_attr \"cannot_copy\" \"true\")])\n+   (set_attr \"cannot_copy\" \"true\")\n+   (set_attr \"length\" \"8\")])\n \n (define_insn \"*call_value_osf_1_noreturn\"\n   [(set (match_operand 0 \"\" \"\")\n@@ -8037,9 +8076,9 @@\n   \"! TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\n    && find_reg_note (insn, REG_NORETURN, NULL_RTX)\"\n   \"@\n-   jsr $26,($27),0%+\n-   bsr $26,$%1..ng%+\n-   jsr $26,%1%+\"\n+   jsr $26,($27),0\n+   bsr $26,$%1..ng\n+   jsr $26,%1\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"*,*,8\")])\n \n@@ -8060,12 +8099,11 @@\n    (parallel [(set (match_dup 0)\n \t\t   (call (mem:DI (match_dup 3))\n \t\t\t (const_int 0)))\n-\t      (set (reg:DI 26) (plus:DI (pc) (const_int 4)))\n-\t      (unspec_volatile [(match_dup 5)] UNSPECV_BLOCKAGE)\n+\t      (set (match_dup 5)\n+\t\t   (unspec:DI [(match_dup 5) (match_dup 4)] UNSPEC_LDGP1))\n \t      (use (match_dup 1))\n-\t      (use (unspec [(match_dup 2)] UNSPEC_TLSGD_CALL))])\n-   (set (match_dup 5)\n-\t(unspec_volatile:DI [(reg:DI 26) (match_dup 4)] UNSPECV_LDGP1))\n+\t      (use (unspec [(match_dup 2)] UNSPEC_TLSGD_CALL))\n+\t      (clobber (reg:DI 26))])\n    (set (match_dup 5)\n \t(unspec:DI [(match_dup 5) (match_dup 4)] UNSPEC_LDGP2))]\n {\n@@ -8092,14 +8130,13 @@\n    (parallel [(set (match_dup 0)\n \t\t   (call (mem:DI (match_dup 3))\n \t\t\t (const_int 0)))\n-\t      (set (reg:DI 26) (plus:DI (pc) (const_int 4)))\n-\t      (unspec_volatile [(match_dup 5)] UNSPECV_BLOCKAGE)\n+\t      (set (match_dup 5)\n+\t\t   (unspec:DI [(match_dup 5) (match_dup 4)] UNSPEC_LDGP1))\n \t      (use (match_dup 1))\n-\t      (use (unspec [(match_dup 2)] UNSPEC_TLSLDM_CALL))])\n-   (set (reg:DI 29)\n-\t(unspec_volatile:DI [(reg:DI 26) (match_dup 4)] UNSPECV_LDGP1))\n-   (set (reg:DI 29)\n-\t(unspec:DI [(reg:DI 29) (match_dup 4)] UNSPEC_LDGP2))]\n+\t      (use (unspec [(match_dup 2)] UNSPEC_TLSLDM_CALL))\n+\t      (clobber (reg:DI 26))])\n+   (set (match_dup 5)\n+\t(unspec:DI [(match_dup 5) (match_dup 4)] UNSPEC_LDGP2))]\n {\n   operands[3] = gen_rtx_REG (Pmode, 27);\n   operands[4] = GEN_INT (alpha_next_sequence_number++);"}]}