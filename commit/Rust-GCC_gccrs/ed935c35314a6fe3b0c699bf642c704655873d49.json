{"sha": "ed935c35314a6fe3b0c699bf642c704655873d49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ5MzVjMzUzMTRhNmZlM2IwYzY5OWJmNjQyYzcwNDY1NTg3M2Q0OQ==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2003-02-27T13:44:27Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-02-27T13:44:27Z"}, "message": "physmem.c (physmem_total): Add _WIN32 support.\n\n2003-02-24  Danny Smith  <dannysmith@users.source.forge.net>\n\n\t* physmem.c (physmem_total): Add _WIN32 support.\n\t(physmem_available): Likewise.\n\nFrom-SVN: r63504", "tree": {"sha": "3d4eec08b7c2ca7e4fabab8aa891b9862ed4c108", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d4eec08b7c2ca7e4fabab8aa891b9862ed4c108"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed935c35314a6fe3b0c699bf642c704655873d49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed935c35314a6fe3b0c699bf642c704655873d49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed935c35314a6fe3b0c699bf642c704655873d49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed935c35314a6fe3b0c699bf642c704655873d49/comments", "author": null, "committer": null, "parents": [{"sha": "3894fe320778cf2a534db5ea75e52112c40d7196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3894fe320778cf2a534db5ea75e52112c40d7196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3894fe320778cf2a534db5ea75e52112c40d7196"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "892e65c01b2e13c60cf40e507b6c518e29debd56", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed935c35314a6fe3b0c699bf642c704655873d49/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed935c35314a6fe3b0c699bf642c704655873d49/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=ed935c35314a6fe3b0c699bf642c704655873d49", "patch": "@@ -1,3 +1,8 @@\n+2003-02-24  Danny Smith  <dannysmith@users.source.forge.net>\n+\n+\t* physmem.c (physmem_total): Add _WIN32 support.\n+\t(physmem_available): Likewise.\n+\n 2003-02-24  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* physmem.c (physmem_total) [HAVE_GETSYSINFO]: Test for"}, {"sha": "ec5a18a09203757b90a02473351d83bc3965db79", "filename": "libiberty/physmem.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed935c35314a6fe3b0c699bf642c704655873d49/libiberty%2Fphysmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed935c35314a6fe3b0c699bf642c704655873d49/libiberty%2Fphysmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fphysmem.c?ref=ed935c35314a6fe3b0c699bf642c704655873d49", "patch": "@@ -56,6 +56,25 @@\n # include <sys/systemcfg.h>\n #endif\n \n+#ifdef _WIN32\n+#define WIN32_LEAN_AND_MEAN\n+#include <windows.h>\n+/*  MEMORYSTATUSEX is missing from older windows headers, so define\n+    a local replacement.  */ \n+typedef struct  {\n+\tDWORD dwLength;\n+\tDWORD dwMemoryLoad;\n+\tDWORDLONG ullTotalPhys;\n+\tDWORDLONG ullAvailPhys;\n+\tDWORDLONG ullTotalPageFile;\n+\tDWORDLONG ullAvailPageFile;\n+\tDWORDLONG ullTotalVirtual;\n+\tDWORDLONG ullAvailVirtual;\n+\tDWORDLONG ullAvailExtendedVirtual;\n+} lMEMORYSTATUSEX;\n+typedef WINBOOL (WINAPI *PFN_MS_EX) (lMEMORYSTATUSEX*);\n+#endif\n+\n #include \"libiberty.h\"\n \n /* Return the total amount of physical memory.  */\n@@ -129,6 +148,35 @@ physmem_total ()\n   return _system_configuration.physmem;\n #endif\n \n+#if defined _WIN32\n+  { /* this works on windows */\n+    PFN_MS_EX pfnex; \n+    HMODULE h = GetModuleHandle(\"kernel32.dll\");\n+\n+    if (!h) \n+      return 0.0;\n+\n+    /*  Use GlobalMemoryStatusEx if available.  */ \n+    if ((pfnex = (PFN_MS_EX) GetProcAddress (h, \"GlobalMemoryStatusEx\")))\n+      {\n+\tlMEMORYSTATUSEX lms_ex;\n+\tlms_ex.dwLength = sizeof lms_ex;\n+\tif (!pfnex (&lms_ex))\n+\t  return 0.0;\n+\treturn (double)lms_ex.ullTotalPhys;\n+      }\n+\n+    /*  Fall back to GlobalMemoryStatus which is always available.\n+        but returns wrong results for physical memory > 4GB.  */ \n+    else\n+      {\n+        MEMORYSTATUS ms;\n+        GlobalMemoryStatus (&ms);\n+        return (double)ms.dwTotalPhys;\n+      }\n+   }\n+#endif\n+\n   /* Return 0 if we can't determine the value.  */\n   return 0;\n }\n@@ -201,6 +249,35 @@ physmem_available ()\n   }\n #endif\n \n+#if defined _WIN32\n+  { /* this works on windows */\n+    PFN_MS_EX pfnex; \n+    HMODULE h = GetModuleHandle (\"kernel32.dll\");\n+\n+    if (!h)\n+      return 0.0;\n+\n+    /*  Use GlobalMemoryStatusEx if available.  */ \n+    if ((pfnex = (PFN_MS_EX) GetProcAddress (h, \"GlobalMemoryStatusEx\")))\n+      {\n+\tlMEMORYSTATUSEX lms_ex;\n+\tlms_ex.dwLength = sizeof lms_ex;\n+\tif (!pfnex (&lms_ex))\n+\t  return 0.0;\n+\treturn (double) lms_ex.ullAvailPhys;\n+      }\n+\n+    /*  Fall back to GlobalMemoryStatus which is always available.\n+        but returns wrong results for physical memory > 4GB  */ \n+    else\n+      {\n+\tMEMORYSTATUS ms;\n+\tGlobalMemoryStatus (&ms);\n+\treturn (double)ms.dwAvailPhys;\n+      }\n+  }\n+#endif\n+\n   /* Guess 25% of physical memory.  */\n   return physmem_total () / 4;\n }"}]}