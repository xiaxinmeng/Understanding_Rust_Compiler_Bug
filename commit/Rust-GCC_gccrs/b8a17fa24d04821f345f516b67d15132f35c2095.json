{"sha": "b8a17fa24d04821f345f516b67d15132f35c2095", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhhMTdmYTI0ZDA0ODIxZjM0NWY1MTZiNjdkMTUxMzJmMzVjMjA5NQ==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2011-04-19T15:13:07Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2011-04-19T15:13:07Z"}, "message": "Add missing entry.\n\nFrom-SVN: r172713", "tree": {"sha": "a5139ed434e643dde6c7e37e476d0cd019b27423", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5139ed434e643dde6c7e37e476d0cd019b27423"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8a17fa24d04821f345f516b67d15132f35c2095", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a17fa24d04821f345f516b67d15132f35c2095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8a17fa24d04821f345f516b67d15132f35c2095", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a17fa24d04821f345f516b67d15132f35c2095/comments", "author": null, "committer": null, "parents": [{"sha": "abe36b81c5d5e74a6c00fa1431132dfac4838157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abe36b81c5d5e74a6c00fa1431132dfac4838157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abe36b81c5d5e74a6c00fa1431132dfac4838157"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "29dd3c6d5f27fc65aa125c40f9e64e96b3c9fd3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a17fa24d04821f345f516b67d15132f35c2095/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a17fa24d04821f345f516b67d15132f35c2095/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8a17fa24d04821f345f516b67d15132f35c2095", "patch": "@@ -341,6 +341,37 @@\n \t* ipa-inline-analysis.c (inline_read_summary): Read size/time\n \tin same order as they're written.\n \n+2011-04-16  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* config/pa/predicates.md: Reorganize and simplify predicates.\n+\tEliminate duplicate code checks.\n+\t(arith_operand): Rename to arith14_operand\n+\t(reg_or_ior_operand): Rename to reg_or_cint_ior_operand.\n+\t* config/pa/pa.md: Use renamed operands.\n+\t* config/pa/pa-protos.h (symbolic_operand): Delete declaration.\n+\t(tls_symbolic_operand, function_label_operand, lhs_lshift_cint_operand,\n+\tarith11_operand, adddi3_operand, indexed_memory_operand,\n+\tsymbolic_memory_operand, int11_operand, reg_or_cint_move_operand,\n+\tarith5_operand, uint5_operand, pic_label_operand, plus_xor_ior_operator,\n+\tborx_reg_operand, shadd_operand, arith_operand, read_only_operand,\n+\tmove_dest_operand, move_src_operand, prefetch_cc_operand,\n+\tprefetch_nocc_operand, and_operand, ior_operand, arith32_operand,\n+\tuint32_operand, reg_before_reload_operand, reg_or_0_operand,\n+\treg_or_0_or_nonsymb_mem_operand, pre_cint_operand, post_cint_operand,\n+\tdiv_operand, int5_operand, movb_comparison_operator,\n+\tireg_or_int5_operand, call_operand_address, ior_operand, fp_reg_operand,\n+\tarith_double_operand, ireg_operand, lhs_lshift_operand,\n+\tpc_or_label_operand, non_hard_reg_operand, eq_neq_comparison_operator,\n+\tinteger_store_memory_operand): Likewise.\n+\t* config/pa/pa.c (adddi3_operand): Move to predicates.md.\n+\t(integer_store_memory_operand, read_only_operand,\n+\tfunction_label_operand, borx_reg_operand,\n+\tnon_hard_reg_operand): Likewise.\n+\t(eq_neq_comparison_operator): Delete unused operator.\n+\t(legitimize_pic_address): Use VOIDmode for mode argument in calls to\n+\tfunction_label_operand.\n+\t(emit_move_sequence): Likewise.\n+\n 2011-04-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (sseunpackmode): New mode attribute.\n@@ -1656,7 +1687,7 @@\n \n \tPR target/48366\n \t* config/pa/pa.c (hppa_register_move_cost): Increase to 18 cost of\n-\tmove from floating point to shift amount register .\n+\tmove from floating point to shift amount register.\n \t(emit_move_sequence): Remove secondary reload support for floating\n \tpoint to shift amount amount register copies.\n \t(pa_secondary_reload): Return GENERAL_REGS for floating point/shift"}]}