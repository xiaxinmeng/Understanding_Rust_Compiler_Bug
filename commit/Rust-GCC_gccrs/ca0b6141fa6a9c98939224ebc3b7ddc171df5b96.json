{"sha": "ca0b6141fa6a9c98939224ebc3b7ddc171df5b96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EwYjYxNDFmYTZhOWM5ODkzOTIyNGViYzNiN2RkYzE3MWRmNWI5Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:11:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:11:12Z"}, "message": "[multiple changes]\n\n2017-04-25  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch3.adb, exp_util.adb, sem_prag.adb, exp_ch4.adb: Minor\n\treformatting.\n\n2017-04-25  Yannick Moy  <moy@adacore.com>\n\n\t* a-ngelfu.adb, a-ngelfu.ads: Add SPARK_Mode On on spec, Off\n\ton body.\n\nFrom-SVN: r247207", "tree": {"sha": "ec75083ebd09c2e021f40d04d04b9092e0c5b95e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec75083ebd09c2e021f40d04d04b9092e0c5b95e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca0b6141fa6a9c98939224ebc3b7ddc171df5b96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca0b6141fa6a9c98939224ebc3b7ddc171df5b96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca0b6141fa6a9c98939224ebc3b7ddc171df5b96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca0b6141fa6a9c98939224ebc3b7ddc171df5b96/comments", "author": null, "committer": null, "parents": [{"sha": "5f8d3dd5b33acad71225d815ef3389fbf6c5963d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f8d3dd5b33acad71225d815ef3389fbf6c5963d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f8d3dd5b33acad71225d815ef3389fbf6c5963d"}], "stats": {"total": 59, "additions": 37, "deletions": 22}, "files": [{"sha": "a3a79cd89ccd004aa780ab178dde350c18d1e2b3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0b6141fa6a9c98939224ebc3b7ddc171df5b96/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0b6141fa6a9c98939224ebc3b7ddc171df5b96/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ca0b6141fa6a9c98939224ebc3b7ddc171df5b96", "patch": "@@ -1,3 +1,13 @@\n+2017-04-25  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch3.adb, exp_util.adb, sem_prag.adb, exp_ch4.adb: Minor\n+\treformatting.\n+\n+2017-04-25  Yannick Moy  <moy@adacore.com>\n+\n+\t* a-ngelfu.adb, a-ngelfu.ads: Add SPARK_Mode On on spec, Off\n+\ton body.\n+\n 2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_disp.adb (Check_Dispatching_Context): Add guard to refine"}, {"sha": "e7a75eea8cf240d56673fbde440df0959f068d09", "filename": "gcc/ada/a-ngelfu.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0b6141fa6a9c98939224ebc3b7ddc171df5b96/gcc%2Fada%2Fa-ngelfu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0b6141fa6a9c98939224ebc3b7ddc171df5b96/gcc%2Fada%2Fa-ngelfu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngelfu.adb?ref=ca0b6141fa6a9c98939224ebc3b7ddc171df5b96", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,7 +38,9 @@\n \n with Ada.Numerics.Aux;\n \n-package body Ada.Numerics.Generic_Elementary_Functions is\n+package body Ada.Numerics.Generic_Elementary_Functions with\n+  SPARK_Mode => Off\n+is\n \n    use type Ada.Numerics.Aux.Double;\n "}, {"sha": "767708d52095616cf0b6ec585be26ff1e6ee11cc", "filename": "gcc/ada/a-ngelfu.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0b6141fa6a9c98939224ebc3b7ddc171df5b96/gcc%2Fada%2Fa-ngelfu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0b6141fa6a9c98939224ebc3b7ddc171df5b96/gcc%2Fada%2Fa-ngelfu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngelfu.ads?ref=ca0b6141fa6a9c98939224ebc3b7ddc171df5b96", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2012-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2012-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -36,7 +36,9 @@\n generic\n    type Float_Type is digits <>;\n \n-package Ada.Numerics.Generic_Elementary_Functions is\n+package Ada.Numerics.Generic_Elementary_Functions with\n+  SPARK_Mode => On\n+is\n    pragma Pure;\n \n    function Sqrt (X : Float_Type'Base) return Float_Type'Base with"}, {"sha": "bc0aea2e2cd6fcfe7dbff3745aa37ea335df3870", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0b6141fa6a9c98939224ebc3b7ddc171df5b96/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0b6141fa6a9c98939224ebc3b7ddc171df5b96/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=ca0b6141fa6a9c98939224ebc3b7ddc171df5b96", "patch": "@@ -10779,9 +10779,9 @@ package body Exp_Ch4 is\n \n       if Is_Access_Type (Target_Type) then\n \n-         --  If this type conversion was internally generated by the frontend\n+         --  If this type conversion was internally generated by the front end\n          --  to displace the pointer to the object to reference an interface\n-         --  type and the original node was an 'Unrestricted_Access reference\n+         --  type and the original node was an Unrestricted_Access attribute,\n          --  then skip applying accessibility checks (because, according to the\n          --  GNAT Reference Manual, this attribute is similar to 'Access except\n          --  that all accessibility and aliased view checks are omitted)."}, {"sha": "19ba42b024aa485dc1d6d44b308db1cdbacb213e", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0b6141fa6a9c98939224ebc3b7ddc171df5b96/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0b6141fa6a9c98939224ebc3b7ddc171df5b96/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=ca0b6141fa6a9c98939224ebc3b7ddc171df5b96", "patch": "@@ -1292,7 +1292,8 @@ package body Exp_Util is\n          if Is_Ignored (DIC_Prag) then\n             null;\n \n-         --  Otherwise the DIC expression must be checked at runtime. Generate:\n+         --  Otherwise the DIC expression must be checked at run time.\n+         --  Generate:\n \n          --    pragma Check (<Nam>, <DIC_Expr>);\n \n@@ -2245,7 +2246,7 @@ package body Exp_Util is\n \n          --  When the type inheriting the class-wide invariant is a concurrent\n          --  type, use the corresponding record type because it contains all\n-         --  primitive operations of the concurren type and allows for proper\n+         --  primitive operations of the concurrent type and allows for proper\n          --  substitution.\n \n          if Is_Concurrent_Type (T) then\n@@ -2417,7 +2418,7 @@ package body Exp_Util is\n             null;\n \n          --  Otherwise the invariant is checked. Build a pragma Check to verify\n-         --  the expression at runtime.\n+         --  the expression at run time.\n \n          else\n             Assoc := New_List (\n@@ -3395,11 +3396,11 @@ package body Exp_Util is\n       --      force every derived type to potentially provide an empty body.\n \n       --    * The invariant procedure does not need to be declared as abstract.\n-      --      This allows for a proper body which in turn avoids redundant\n+      --      This allows for a proper body, which in turn avoids redundant\n       --      processing of the same invariants for types with multiple views.\n \n       --    * The class-wide type allows for calls to abstract primitives\n-      --      within a non-abstract subprogram. The calls are treated as\n+      --      within a nonabstract subprogram. The calls are treated as\n       --      dispatching and require additional processing when they are\n       --      remapped to call primitives of derived types. See routine\n       --      Replace_References for details.\n@@ -11506,7 +11507,7 @@ package body Exp_Util is\n \n       function Replace_Ref (Ref : Node_Id) return Traverse_Result is\n          procedure Remove_Controlling_Arguments (From_Arg : Node_Id);\n-         --  Reset the Controlling_Argument of all function calls which\n+         --  Reset the Controlling_Argument of all function calls that\n          --  encapsulate node From_Arg.\n \n          ----------------------------------\n@@ -11630,14 +11631,14 @@ package body Exp_Util is\n                New_Ref := New_Occurrence_Of (Deriv_Obj, Loc);\n \n                --  The type of the _object parameter is class-wide when the\n-               --  expression comes from an assertion pragma which applies to\n+               --  expression comes from an assertion pragma that applies to\n                --  an abstract parent type or an interface. The class-wide type\n                --  facilitates the preanalysis of the expression by treating\n-               --  calls to abstract primitives which mention the current\n+               --  calls to abstract primitives that mention the current\n                --  instance of the type as dispatching. Once the calls are\n                --  remapped to invoke overriding or inherited primitives, the\n                --  calls no longer need to be dispatching. Examine all function\n-               --  calls which encapsule the _object parameter and reset their\n+               --  calls that encapsulate the _object parameter and reset their\n                --  Controlling_Argument attribute.\n \n                if Is_Class_Wide_Type (Etype (Par_Obj))"}, {"sha": "7a9e52d43aa2f2dccb7bb4259bd9408805c5eb1b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0b6141fa6a9c98939224ebc3b7ddc171df5b96/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0b6141fa6a9c98939224ebc3b7ddc171df5b96/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=ca0b6141fa6a9c98939224ebc3b7ddc171df5b96", "patch": "@@ -1729,7 +1729,7 @@ package body Sem_Ch3 is\n                   end if;\n \n                   --  Apply legality checks in RM 6.1.1 (10-13) concerning\n-                  --  non-conforming preconditions in both an ancestor and\n+                  --  nonconforming preconditions in both an ancestor and\n                   --  a progenitor operation.\n \n                   if Present (Anc)\n@@ -2289,9 +2289,9 @@ package body Sem_Ch3 is\n                if Is_Interface (Typ) then\n \n                   --  Interfaces are treated as the partial view of a private\n-                  --  type in order to achieve uniformity with the general\n+                  --  type, in order to achieve uniformity with the general\n                   --  case. As a result, an interface receives only a \"partial\"\n-                  --  invariant procedure which is never called.\n+                  --  invariant procedure, which is never called.\n \n                   if Has_Own_Invariants (Typ) then\n                      Build_Invariant_Procedure_Body\n@@ -15335,7 +15335,7 @@ package body Sem_Ch3 is\n \n       New_Overloaded_Entity (New_Subp, Derived_Type);\n \n-      --  Ada RM 6.1.1 (15): If a subprogram inherits non-conforming class-wide\n+      --  Ada RM 6.1.1 (15): If a subprogram inherits nonconforming class-wide\n       --  preconditions and the derived type is abstract, the derived operation\n       --  is abstract as well if parent subprogram is not abstract or null.\n "}, {"sha": "53f6b42d7e560896ab7e4f029a752898709ad004", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0b6141fa6a9c98939224ebc3b7ddc171df5b96/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0b6141fa6a9c98939224ebc3b7ddc171df5b96/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=ca0b6141fa6a9c98939224ebc3b7ddc171df5b96", "patch": "@@ -17112,11 +17112,11 @@ package body Sem_Prag is\n \n             Discard := Rep_Item_Too_Late (Typ, N, FOnly => True);\n \n-            --  Create the declaration of the invariant procedure which will\n-            --  verify the invariant at run-time. Interfaces are treated as the\n+            --  Create the declaration of the invariant procedure that will\n+            --  verify the invariant at run time. Interfaces are treated as the\n             --  partial view of a private type in order to achieve uniformity\n             --  with the general case. As a result, an interface receives only\n-            --  a \"partial\" invariant procedure which is never called.\n+            --  a \"partial\" invariant procedure, which is never called.\n \n             Build_Invariant_Procedure_Declaration\n               (Typ               => Typ,"}]}