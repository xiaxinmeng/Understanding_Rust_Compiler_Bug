{"sha": "811ee85b3097a8d71c76136c9b5ef339dc7ded6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODExZWU4NWIzMDk3YThkNzFjNzYxMzZjOWI1ZWYzMzlkYzdkZWQ2Yg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2012-12-21T14:33:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-12-21T14:33:59Z"}, "message": "re PR middle-end/52996 (ice in verify_loop_structure, at cfgloop.c:1567)\n\n2012-12-21  Richard Biener  <rguenther@suse.de>\n\n\tPR rtl-optimization/52996\n\t* cprop.c (bypass_block): When loops are to be preserved\n\tdo not bypass loop headers.  Revert earlier kludge to remove\n\tloops when doing that.\n\nFrom-SVN: r194666", "tree": {"sha": "a0311866d7a6d0fe5779fa170592e64b5731a793", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0311866d7a6d0fe5779fa170592e64b5731a793"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/811ee85b3097a8d71c76136c9b5ef339dc7ded6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/811ee85b3097a8d71c76136c9b5ef339dc7ded6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/811ee85b3097a8d71c76136c9b5ef339dc7ded6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/811ee85b3097a8d71c76136c9b5ef339dc7ded6b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d106911b0d8a0575daba3c7097c2c2d8878da8c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d106911b0d8a0575daba3c7097c2c2d8878da8c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d106911b0d8a0575daba3c7097c2c2d8878da8c7"}], "stats": {"total": 41, "additions": 16, "deletions": 25}, "files": [{"sha": "f0563db6ad025a5b37afa082a3dd53556f79d459", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811ee85b3097a8d71c76136c9b5ef339dc7ded6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811ee85b3097a8d71c76136c9b5ef339dc7ded6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=811ee85b3097a8d71c76136c9b5ef339dc7ded6b", "patch": "@@ -1,3 +1,10 @@\n+2012-12-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/52996\n+\t* cprop.c (bypass_block): When loops are to be preserved\n+\tdo not bypass loop headers.  Revert earlier kludge to remove\n+\tloops when doing that.\n+\n 2012-12-21  Richard Biener  <rguenther@suse.de>\n \n \tPR bootstrap/54659"}, {"sha": "463f81ff73beb0972b51b290f8e02ac48ad91697", "filename": "gcc/cprop.c", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811ee85b3097a8d71c76136c9b5ef339dc7ded6b/gcc%2Fcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811ee85b3097a8d71c76136c9b5ef339dc7ded6b/gcc%2Fcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.c?ref=811ee85b3097a8d71c76136c9b5ef339dc7ded6b", "patch": "@@ -1496,7 +1496,7 @@ bypass_block (basic_block bb, rtx setcc, rtx jump)\n   rtx insn, note;\n   edge e, edest;\n   int change;\n-  int may_be_loop_header;\n+  int may_be_loop_header = false;\n   unsigned removed_p;\n   unsigned i;\n   edge_iterator ei;\n@@ -1510,27 +1510,22 @@ bypass_block (basic_block bb, rtx setcc, rtx jump)\n   if (note)\n     find_used_regs (&XEXP (note, 0), NULL);\n \n-  /* Determine whether there are more latch edges.  Threading through\n-     a loop header with more than one latch is delicate, see e.g.\n-     tree-ssa-threadupdate.c:thread_through_loop_header.  */\n   if (current_loops)\n     {\n-      may_be_loop_header = bb == bb->loop_father->header;\n-      if (may_be_loop_header\n-\t  && bb->loop_father->latch == NULL)\n+      /* If we are to preserve loop structure then do not bypass\n+         a loop header.  This will either rotate the loop, create\n+\t multiple entry loops or even irreducible regions.  */\n+      if (bb == bb->loop_father->header)\n \treturn 0;\n     }\n   else\n     {\n-      unsigned n_back_edges = 0;\n       FOR_EACH_EDGE (e, ei, bb->preds)\n \tif (e->flags & EDGE_DFS_BACK)\n-\t  n_back_edges++;\n-\n-      may_be_loop_header = n_back_edges > 0;\n-\n-      if (n_back_edges > 1)\n-        return 0;\n+\t  {\n+\t    may_be_loop_header = true;\n+\t    break;\n+\t  }\n     }\n \n   change = 0;\n@@ -1619,17 +1614,6 @@ bypass_block (basic_block bb, rtx setcc, rtx jump)\n \t      && dest != old_dest\n \t      && dest != EXIT_BLOCK_PTR)\n             {\n-\t      if (current_loops != NULL\n-\t\t  && e->src->loop_father->latch == e->src)\n-\t\t{\n-\t\t  /* ???  Now we are creating (or may create) a loop\n-\t\t     with multiple entries.  Simply mark it for\n-\t\t     removal.  Alternatively we could not do this\n-\t\t     threading.  */\n-\t\t  e->src->loop_father->header = NULL;\n-\t\t  e->src->loop_father->latch = NULL;\n-\t\t}\n-\n \t      redirect_edge_and_branch_force (e, dest);\n \n \t      /* Copy the register setter to the redirected edge."}]}