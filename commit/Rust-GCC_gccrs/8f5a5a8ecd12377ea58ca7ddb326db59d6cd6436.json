{"sha": "8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY1YTVhOGVjZDEyMzc3ZWE1OGNhN2RkYjMyNmRiNTlkNmNkNjQzNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-09-10T14:08:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-09-10T14:08:32Z"}, "message": "re PR c++/54506 (Defaulted move constructors and move assignment operators are erroneously defined as deleted)\n\n\tPR c++/54506\n\t* decl.c (move_signature_fn_p): Split out from move_fn_p.\n\t* method.c (process_subob_fn): Use it.\n\t* cp-tree.h: Declare it.\n\nFrom-SVN: r191140", "tree": {"sha": "2c7230153c78b5628e83a9a2369fb8c0de16be08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c7230153c78b5628e83a9a2369fb8c0de16be08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "091871eadd59a8f69413e5c480e2df8c3538f409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091871eadd59a8f69413e5c480e2df8c3538f409", "html_url": "https://github.com/Rust-GCC/gccrs/commit/091871eadd59a8f69413e5c480e2df8c3538f409"}], "stats": {"total": 69, "additions": 61, "deletions": 8}, "files": [{"sha": "2fd7c1242b08ab626aa4c84447b46dca28a7387d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436", "patch": "@@ -1,3 +1,10 @@\n+2012-09-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/54506\n+\t* decl.c (move_signature_fn_p): Split out from move_fn_p.\n+\t* method.c (process_subob_fn): Use it.\n+\t* cp-tree.h: Declare it.\n+\n 2012-09-07  Jason Merrill  <jason@redhat.com>\n \n \t* semantics.c (sort_constexpr_mem_initializers): Tweak."}, {"sha": "3c55ba45b34c9e5388544a3338f5f59b69fd4427", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436", "patch": "@@ -5066,6 +5066,7 @@ extern tree build_ptrmem_type\t\t\t(tree, tree);\n extern tree build_this_parm\t\t\t(tree, cp_cv_quals);\n extern int copy_fn_p\t\t\t\t(const_tree);\n extern bool move_fn_p                           (const_tree);\n+extern bool move_signature_fn_p                 (const_tree);\n extern tree get_scope_of_declarator\t\t(const cp_declarator *);\n extern void grok_special_member_properties\t(tree);\n extern int grok_ctor_properties\t\t\t(const_tree, const_tree);"}, {"sha": "e34092d58e678e0a1a6181c55e59210aedafbd42", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436", "patch": "@@ -10859,10 +10859,6 @@ copy_fn_p (const_tree d)\n bool\n move_fn_p (const_tree d)\n {\n-  tree args;\n-  tree arg_type;\n-  bool result = false;\n-\n   gcc_assert (DECL_FUNCTION_MEMBER_P (d));\n \n   if (cxx_dialect == cxx98)\n@@ -10872,12 +10868,29 @@ move_fn_p (const_tree d)\n   if (TREE_CODE (d) == TEMPLATE_DECL\n       || (DECL_TEMPLATE_INFO (d)\n          && DECL_MEMBER_TEMPLATE_P (DECL_TI_TEMPLATE (d))))\n-    /* Instantiations of template member functions are never copy\n+    /* Instantiations of template member functions are never move\n        functions.  Note that member functions of templated classes are\n        represented as template functions internally, and we must\n-       accept those as copy functions.  */\n+       accept those as move functions.  */\n     return 0;\n \n+  return move_signature_fn_p (d);\n+}\n+\n+/* D is a constructor or overloaded `operator='.\n+\n+   Then, this function returns true when D has the same signature as a move\n+   constructor or move assignment operator (because either it is such a\n+   ctor/op= or it is a template specialization with the same signature),\n+   false otherwise.  */\n+\n+bool\n+move_signature_fn_p (const_tree d)\n+{\n+  tree args;\n+  tree arg_type;\n+  bool result = false;\n+\n   args = FUNCTION_FIRST_USER_PARMTYPE (d);\n   if (!args)\n     return 0;"}, {"sha": "a42ed60a99f2567dbcca48fd29adab027fdc9a8c", "filename": "gcc/cp/method.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436", "patch": "@@ -947,9 +947,10 @@ process_subob_fn (tree fn, bool move_p, tree *spec_p, bool *trivial_p,\n \t}\n     }\n \n-  /* Core 1402: A non-trivial copy op suppresses the implicit\n+  /* Core 1402: A non-trivial non-move ctor suppresses the implicit\n      declaration of the move ctor/op=.  */\n-  if (no_implicit_p && move_p && !move_fn_p (fn) && !trivial_fn_p (fn))\n+  if (no_implicit_p && move_p && !move_signature_fn_p (fn)\n+      && !trivial_fn_p (fn))\n     *no_implicit_p = true;\n \n   if (constexpr_p && !DECL_DECLARED_CONSTEXPR_P (fn))"}, {"sha": "65e31bd880488fec70d24b8f385fde182fda7467", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436", "patch": "@@ -1,3 +1,8 @@\n+2012-09-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/54506\n+\t* g++.dg/cpp0x/implicit14.C: New.\n+\n 2012-09-07  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/54208"}, {"sha": "8a56244631b08f95a30e02de333b82b33489c34a", "filename": "gcc/testsuite/g++.dg/cpp0x/implicit14.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit14.C?ref=8f5a5a8ecd12377ea58ca7ddb326db59d6cd6436", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/54506\n+// { dg-do compile { target c++11 } }\n+\n+template <class T>\n+struct A\n+{\n+  A() {}\n+\n+  A(A const volatile &&) = delete;\n+  A &operator =(A const volatile &&) = delete;\n+\n+  template <class U> A(A<U> &&) {}\n+  template <class U> A &operator =(A<U> &&) { return *this; }\n+};\n+\n+struct B\n+{\n+  A<int> a;\n+  B() = default;\n+};\n+\n+int main()\n+{\n+  B b = B();\n+  b = B();\n+}"}]}