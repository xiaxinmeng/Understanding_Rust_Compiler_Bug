{"sha": "2466a8d0dd40d05cb4a239d7d4a21bbd9ffab698", "node_id": "C_kwDOANBUbNoAKDI0NjZhOGQwZGQ0MGQwNWNiNGEyMzlkN2Q0YTIxYmJkOWZmYWI2OTg", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-10-02T16:20:08Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-12-17T16:57:47Z"}, "message": "coroutines: Handle initial awaiters with non-void returns [PR 100127].\n\nThe way in which a C++20 coroutine is specified discards any value\nthat might be returned from the initial or final await expressions.\n\nThis ICE was caused by an initial await expression with an\nawait_resume () returning a reference, the function rewrite code\nwas not set up to expect this.\n\nFixed by looking through any indirection present and by explicitly\ndiscarding the value, if any, returned by await_resume().\n\nIt does not seem useful to make a diagnostic for this, since\nthe user could define a generic awaiter that usefully returns\nvalues when used in a different position from the initial (or\nfinal) await expressions.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\n\tPR c++/100127\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (coro_rewrite_function_body): Handle initial\n\tawait expressions that try to produce a reference value.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/coroutines/pr100127.C: New test.", "tree": {"sha": "52c549a73230b5b77b3da4bd2ba296f85af36860", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52c549a73230b5b77b3da4bd2ba296f85af36860"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2466a8d0dd40d05cb4a239d7d4a21bbd9ffab698", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2466a8d0dd40d05cb4a239d7d4a21bbd9ffab698", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2466a8d0dd40d05cb4a239d7d4a21bbd9ffab698", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2466a8d0dd40d05cb4a239d7d4a21bbd9ffab698/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "921942a8a106cb53994c21162922e4934eb3a3e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/921942a8a106cb53994c21162922e4934eb3a3e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/921942a8a106cb53994c21162922e4934eb3a3e0"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "25931c928017366782eef21af576e3b5839067d1", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2466a8d0dd40d05cb4a239d7d4a21bbd9ffab698/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2466a8d0dd40d05cb4a239d7d4a21bbd9ffab698/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=2466a8d0dd40d05cb4a239d7d4a21bbd9ffab698", "patch": "@@ -4211,9 +4211,15 @@ coro_rewrite_function_body (location_t fn_start, tree fnbody, tree orig,\n \t{\n \t  /* Build a compound expression that sets the\n \t     initial-await-resume-called variable true and then calls the\n-\t     initial suspend expression await resume.  */\n+\t     initial suspend expression await resume.\n+\t     In the case that the user decides to make the initial await\n+\t     await_resume() return a value, we need to discard it and, it is\n+\t     a reference type, look past the indirection.  */\n+\t  if (INDIRECT_REF_P (initial_await))\n+\t    initial_await = TREE_OPERAND (initial_await, 0);\n \t  tree vec = TREE_OPERAND (initial_await, 3);\n \t  tree aw_r = TREE_VEC_ELT (vec, 2);\n+\t  aw_r = convert_to_void (aw_r, ICV_STATEMENT, tf_warning_or_error);\n \t  tree update = build2 (MODIFY_EXPR, boolean_type_node, i_a_r_c,\n \t\t\t\tboolean_true_node);\n \t  aw_r = cp_build_compound_expr (update, aw_r, tf_warning_or_error);"}, {"sha": "374cd710077afcbe9ae9de62e106c028d6d99dd0", "filename": "gcc/testsuite/g++.dg/coroutines/pr100127.C", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2466a8d0dd40d05cb4a239d7d4a21bbd9ffab698/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr100127.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2466a8d0dd40d05cb4a239d7d4a21bbd9ffab698/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr100127.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr100127.C?ref=2466a8d0dd40d05cb4a239d7d4a21bbd9ffab698", "patch": "@@ -0,0 +1,65 @@\n+#ifdef __clang__\n+#include <experimental/coroutine>\n+namespace std {\n+  using namespace std::experimental;\n+}\n+#else\n+#include <coroutine>\n+#endif\n+#include <optional>\n+\n+struct future\n+{\n+    using value_type = int;\n+    struct promise_type;\n+    using handle_type = std::coroutine_handle<promise_type>;\n+\n+    handle_type _coroutine;\n+\n+    future(handle_type h) : _coroutine{h} {}\n+\n+    ~future() noexcept{\n+        if (_coroutine) {\n+            _coroutine.destroy();\n+        }\n+    }\n+\n+    value_type get() {\n+        auto ptr = _coroutine.promise()._value;\n+        return *ptr;\n+    }\n+\n+    struct promise_type {\n+        std::optional<value_type> _value = std::nullopt;\n+\n+        future get_return_object() {\n+            return future{handle_type::from_promise(*this)};\n+        }\n+        void return_value(value_type val) {\n+            _value = static_cast<value_type &&>(val);\n+        }\n+        auto initial_suspend() noexcept {\n+            class awaiter {\n+                std::optional<value_type> & value;\n+            public:\n+                explicit awaiter(std::optional<value_type> & val) noexcept : value{val} {}\n+                bool await_ready() noexcept { return value.has_value(); }\n+                void await_suspend(handle_type) noexcept { }\n+                value_type & await_resume() noexcept { return *value; }\n+            };\n+\n+            return awaiter{_value};\n+        }\n+        std::suspend_always final_suspend() noexcept {\n+            return {};\n+        }\n+        //void return_void() {}\n+        void unhandled_exception() {}\n+    };\n+};\n+\n+future create_future()\n+{ co_return 2021; }\n+\n+int main()\n+{ auto f = create_future(); }"}]}