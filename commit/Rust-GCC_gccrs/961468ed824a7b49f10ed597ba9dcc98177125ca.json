{"sha": "961468ed824a7b49f10ed597ba9dcc98177125ca", "node_id": "C_kwDOANBUbNoAKDk2MTQ2OGVkODI0YTdiNDlmMTBlZDU5N2JhOWRjYzk4MTc3MTI1Y2E", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-27T12:25:44Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-27T12:29:14Z"}, "message": "unsafe: Handle multi unsafe contexts by using stack\n\nCo-authored-by: philberty <philip.herron@embecosm.com>", "tree": {"sha": "9a6292e682c843b6ee7c3f65f23e6f74fd6c0dca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a6292e682c843b6ee7c3f65f23e6f74fd6c0dca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/961468ed824a7b49f10ed597ba9dcc98177125ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/961468ed824a7b49f10ed597ba9dcc98177125ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/961468ed824a7b49f10ed597ba9dcc98177125ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/961468ed824a7b49f10ed597ba9dcc98177125ca/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b14b560bc25465f2e8465c087ecd9684fb5fb65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b14b560bc25465f2e8465c087ecd9684fb5fb65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b14b560bc25465f2e8465c087ecd9684fb5fb65"}], "stats": {"total": 67, "additions": 60, "deletions": 7}, "files": [{"sha": "def3cc11b7a5906f769a97debad8c510c4943948", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/961468ed824a7b49f10ed597ba9dcc98177125ca/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/961468ed824a7b49f10ed597ba9dcc98177125ca/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=961468ed824a7b49f10ed597ba9dcc98177125ca", "patch": "@@ -35,6 +35,29 @@ UnsafeChecker::go (HIR::Crate &crate)\n     item->accept_vis (*this);\n }\n \n+void\n+UnsafeChecker::push_unsafe (HirId id)\n+{\n+  unsafe_contexts.emplace_back (id);\n+}\n+\n+HirId\n+UnsafeChecker::pop_unsafe ()\n+{\n+  rust_assert (!unsafe_contexts.empty ());\n+\n+  auto last = unsafe_contexts.back ();\n+  unsafe_contexts.pop_back ();\n+\n+  return last;\n+}\n+\n+bool\n+UnsafeChecker::is_unsafe_context ()\n+{\n+  return !unsafe_contexts.empty ();\n+}\n+\n void\n UnsafeChecker::visit (IdentifierExpr &ident_expr)\n {}\n@@ -94,7 +117,7 @@ UnsafeChecker::visit (DereferenceExpr &expr)\n   rust_assert (context.lookup_type (to_deref, &to_deref_type));\n \n   if (to_deref_type->get_kind () == TyTy::TypeKind::POINTER\n-      && !in_unsafe_context)\n+      && !is_unsafe_context ())\n     rust_error_at (expr.get_locus (), \"dereference of raw pointer requires \"\n \t\t\t\t      \"unsafe function or block\");\n }\n@@ -320,11 +343,11 @@ UnsafeChecker::visit (ReturnExpr &expr)\n void\n UnsafeChecker::visit (UnsafeBlockExpr &expr)\n {\n-  in_unsafe_context = true;\n+  push_unsafe (expr.get_mappings ().get_hirid ());\n \n   expr.get_block_expr ()->accept_vis (*this);\n \n-  in_unsafe_context = false;\n+  pop_unsafe ();\n }\n \n void\n@@ -485,11 +508,15 @@ UnsafeChecker::visit (UseDeclaration &use_decl)\n void\n UnsafeChecker::visit (Function &function)\n {\n-  in_unsafe_context = function.get_qualifiers ().is_unsafe ();\n+  auto is_unsafe_fn = function.get_qualifiers ().is_unsafe ();\n+\n+  if (is_unsafe_fn)\n+    push_unsafe (function.get_mappings ().get_hirid ());\n \n   function.get_definition ()->accept_vis (*this);\n \n-  in_unsafe_context = false;\n+  if (is_unsafe_fn)\n+    pop_unsafe ();\n }\n \n void"}, {"sha": "3c8170739932367e7d84b4efc09104904d3ec6a6", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.h", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/961468ed824a7b49f10ed597ba9dcc98177125ca/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/961468ed824a7b49f10ed597ba9dcc98177125ca/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h?ref=961468ed824a7b49f10ed597ba9dcc98177125ca", "patch": "@@ -32,8 +32,24 @@ class UnsafeChecker : public HIRFullVisitor\n   void go (HIR::Crate &crate);\n \n private:\n-  /* Are we currently in an unsafe function or block ? */\n-  bool in_unsafe_context;\n+  /* Stack of unsafe contexts */\n+  std::vector<HirId> unsafe_contexts;\n+\n+  /**\n+   * Add an unsafe context to the stack. To call when entering unsafe blocks\n+   */\n+  void push_unsafe (HirId id);\n+\n+  /**\n+   * Remove an unsafe context from the stack. Call this when exiting unsafe\n+   * blocks\n+   */\n+  HirId pop_unsafe ();\n+\n+  /**\n+   * Are we currently in an unsafe context or not\n+   */\n+  bool is_unsafe_context ();\n \n   Resolver::TypeCheckContext &context;\n \n@@ -170,6 +186,7 @@ class UnsafeChecker : public HIRFullVisitor\n   virtual void visit (InferredType &type) override;\n   virtual void visit (BareFunctionType &type) override;\n };\n+\n } // namespace HIR\n } // namespace Rust\n "}, {"sha": "7d1356bc3e588058ebb0a8ca44fcd32a85281ee1", "filename": "gcc/testsuite/rust/compile/unsafe4.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/961468ed824a7b49f10ed597ba9dcc98177125ca/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/961468ed824a7b49f10ed597ba9dcc98177125ca/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe4.rs?ref=961468ed824a7b49f10ed597ba9dcc98177125ca", "patch": "@@ -18,3 +18,12 @@ fn baz() -> i32 {\n \n     *p_a // { dg-error \"dereference of raw pointer\" }\n }\n+\n+unsafe fn qux() -> i32 {\n+    let a = 15;\n+    let p_a = &a as *const i32;\n+\n+    unsafe {}\n+\n+    *p_a\n+}"}]}