{"sha": "2d3270129fac84d3d3420a1da10330404ccadc2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQzMjcwMTI5ZmFjODRkM2QzNDIwYTFkYTEwMzMwNDA0Y2NhZGMyYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-01-13T01:35:27Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-01-13T01:35:27Z"}, "message": "cgraphunit.c (cgraph_optimize_function): Always do optimize_inline_calls when there is always_inline callee.\n\n\n\t* cgraphunit.c (cgraph_optimize_function):  Always do\n\toptimize_inline_calls when there is always_inline callee.\n\t(cgraph_decide_inlining): Fix formating.\n\t* tree-inline.c (inlinable_function_p): Do sorry for alwaysinline\n\tfunctions.\n\t(expand_call_inline): Likewise.\n\t* toplev.h (sorry): Fix prototype.\n\n\t* gcc.dg/always_inline.c: New test.\n\t* gcc.dg/debug/20031231-1.c: Fix.\n\nFrom-SVN: r75781", "tree": {"sha": "45863b0867b1a5dca9004db917fa2c41f48f77a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45863b0867b1a5dca9004db917fa2c41f48f77a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d3270129fac84d3d3420a1da10330404ccadc2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d3270129fac84d3d3420a1da10330404ccadc2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d3270129fac84d3d3420a1da10330404ccadc2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d3270129fac84d3d3420a1da10330404ccadc2a/comments", "author": null, "committer": null, "parents": [{"sha": "04cc79bb8928ff2c97bef9df08dc252eecdc9845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04cc79bb8928ff2c97bef9df08dc252eecdc9845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04cc79bb8928ff2c97bef9df08dc252eecdc9845"}], "stats": {"total": 68, "additions": 57, "deletions": 11}, "files": [{"sha": "a162c76c8779c6b5175aca5318a3f80d7fa711df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3270129fac84d3d3420a1da10330404ccadc2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3270129fac84d3d3420a1da10330404ccadc2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d3270129fac84d3d3420a1da10330404ccadc2a", "patch": "@@ -1,3 +1,13 @@\n+2004-01-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraphunit.c (cgraph_optimize_function):  Always do\n+\toptimize_inline_calls when there is always_inline callee.\n+\t(cgraph_decide_inlining): Fix formating.\n+\t* tree-inline.c (inlinable_function_p): Do sorry for alwaysinline\n+\tfunctions.\n+\t(expand_call_inline): Likewise.\n+\t* toplev.h (sorry): Fix prototype.\n+\n 2004-01-12  Roger Sayle  <roger@eyesopen.com>\n \n \t* builtins.c (expand_builtin_expect_jump): Simplify logic. Handle"}, {"sha": "cf7069b1b08dfc48507a7194dfd7453385a5a3c1", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3270129fac84d3d3420a1da10330404ccadc2a/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3270129fac84d3d3420a1da10330404ccadc2a/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=2d3270129fac84d3d3420a1da10330404ccadc2a", "patch": "@@ -481,7 +481,10 @@ cgraph_optimize_function (struct cgraph_node *node)\n       struct cgraph_edge *e;\n \n       for (e = node->callees; e; e = e->next_callee)\n-\tif (!e->inline_failed || warn_inline)\n+\tif (!e->inline_failed || warn_inline\n+\t    || (DECL_DECLARED_INLINE_P (e->callee->decl)\n+\t\t&& lookup_attribute (\"always_inline\",\n+\t\t\t\t     DECL_ATTRIBUTES (e->callee->decl))))\n \t  break;\n       if (e)\n         optimize_inline_calls (decl);\n@@ -1178,10 +1181,10 @@ cgraph_decide_inlining (void)\n \t\t     cgraph_node_name (node->callees->caller),\n \t             node->callees->caller->global.insns);\n \t}\n-\tif (cgraph_dump_file && node->global.cloned_times > 0)\n-\t  fprintf (cgraph_dump_file, \n-\t\t   \" Inlined %i times for a net change of %+i insns.\\n\",\n-\t\t   node->global.cloned_times, overall_insns - old_insns);\n+      if (cgraph_dump_file && node->global.cloned_times > 0)\n+\tfprintf (cgraph_dump_file, \n+\t\t \" Inlined %i times for a net change of %+i insns.\\n\",\n+\t\t node->global.cloned_times, overall_insns - old_insns);\n       for (y = 0; y < ninlined; y++)\n \tinlined[y]->output = 0, node->aux = 0;\n     }"}, {"sha": "2e48b75625948e567516c92d92b466b3c1883aa1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3270129fac84d3d3420a1da10330404ccadc2a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3270129fac84d3d3420a1da10330404ccadc2a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d3270129fac84d3d3420a1da10330404ccadc2a", "patch": "@@ -1,3 +1,8 @@\n+2004-01-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/always_inline.c: New test.\n+\t* gcc.dg/debug/20031231-1.c: Fix.\n+\n 2004-01-13  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/13474"}, {"sha": "9480470a95af8920396d2c680263ab5d656bd7fb", "filename": "gcc/testsuite/gcc.dg/always_inline.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3270129fac84d3d3420a1da10330404ccadc2a/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3270129fac84d3d3420a1da10330404ccadc2a/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline.c?ref=2d3270129fac84d3d3420a1da10330404ccadc2a", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Winline -O2\" } */\n+#include <stdarg.h>\n+inline __attribute__ ((always_inline)) void t(void); /* { dg-error \"body not available\" \"\" } */\n+void\n+q(void)\n+{\n+  t(); \t\t\t\t/* { dg-error \"called from here\" \"\" } */\n+}\n+inline __attribute__ ((always_inline)) void\n+q2(void)\n+{ \t\t\t\t/* { dg-error \"recursive\" \"\" } */\n+  q2(); \t\t\t/* { dg-error \"called from here\" \"\" } */\n+  q2(); \t\t\t/* { dg-error \"called from here\" \"\" } */\n+}\n+inline __attribute__ ((always_inline)) void\n+e(int t, ...)\n+{\t\t\t\t/* { dg-error \"variable argument\" \"\" } */\n+  va_list q;\n+  va_start (q, t);\n+}"}, {"sha": "fa20260b50eaf4ad9d389bf8948ee1004638a4a6", "filename": "gcc/testsuite/gcc.dg/debug/20031231-1.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3270129fac84d3d3420a1da10330404ccadc2a/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2F20031231-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3270129fac84d3d3420a1da10330404ccadc2a/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2F20031231-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2F20031231-1.c?ref=2d3270129fac84d3d3420a1da10330404ccadc2a", "patch": "@@ -12,7 +12,6 @@ void pp_c_string_literal (c_pretty_printer *, tree);\n static __inline__  __attribute__((always_inline)) void\n pp_c_shift_expression (c_pretty_printer *pp, tree e)\n {\n-        pp_c_shift_expression (pp,e);\n }\n \n static void"}, {"sha": "3c1a1eb3021c8612385735f96962423611c42744", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3270129fac84d3d3420a1da10330404ccadc2a/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3270129fac84d3d3420a1da10330404ccadc2a/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=2d3270129fac84d3d3420a1da10330404ccadc2a", "patch": "@@ -60,7 +60,7 @@ extern void error (const char *, ...);\n extern void fatal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;\n extern void pedwarn (const char *, ...);\n-extern void sorry (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern void sorry (const char *, ...);\n extern void inform (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n \n extern void rest_of_decl_compilation (tree, const char *, int, int);"}, {"sha": "ea8edcf70dc11164f570449977498883c2f16340", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3270129fac84d3d3420a1da10330404ccadc2a/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3270129fac84d3d3420a1da10330404ccadc2a/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=2d3270129fac84d3d3420a1da10330404ccadc2a", "patch": "@@ -1213,7 +1213,10 @@ inlinable_function_p (tree fn)\n \t\t\t && DECL_DECLARED_INLINE_P (fn)\n \t\t\t && !DECL_IN_SYSTEM_HEADER (fn));\n \n-      if (do_warning)\n+      if (lookup_attribute (\"always_inline\",\n+\t\t\t    DECL_ATTRIBUTES (fn)))\n+\tsorry (inline_forbidden_reason, fn, fn);\n+      else if (do_warning)\n \twarning (inline_forbidden_reason, fn, fn);\n \n       inlinable = false;\n@@ -1330,9 +1333,14 @@ expand_call_inline (tree *tp, int *walk_subtrees, void *data)\n      inlining.  */\n   if (!cgraph_inline_p (id->current_decl, fn, &reason))\n     {\n-      if (warn_inline && DECL_DECLARED_INLINE_P (fn)\n-\t  && !DECL_IN_SYSTEM_HEADER (fn)\n-\t  && strlen (reason))\n+      if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)))\n+\t{\n+\t  sorry (\"%Jinlining failed in call to '%F': %s\", fn, fn, reason);\n+\t  sorry (\"called from here\");\n+\t}\n+      else if (warn_inline && DECL_DECLARED_INLINE_P (fn)\n+\t       && !DECL_IN_SYSTEM_HEADER (fn)\n+\t       && strlen (reason))\n \t{\n \t  warning (\"%Jinlining failed in call to '%F': %s\", fn, fn, reason);\n \t  warning (\"called from here\");"}]}