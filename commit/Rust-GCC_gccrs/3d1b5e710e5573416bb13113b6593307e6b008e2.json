{"sha": "3d1b5e710e5573416bb13113b6593307e6b008e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QxYjVlNzEwZTU1NzM0MTZiYjEzMTEzYjY1OTMzMDdlNmIwMDhlMg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2019-12-11T16:48:59Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2019-12-11T16:48:59Z"}, "message": "[PR92854] Add 'libgomp.oacc-c-c++-common/acc_map_data-device_already-*.c', 'libgomp.oacc-c-c++-common/acc_map_data-host_already-*.c'\n\n... to document the status quo.\n\n\tlibgomp/\n\tPR libgomp/92854\n\t* testsuite/libgomp.oacc-c-c++-common/acc_map_data-device_already-1.c:\n\tNew file.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_map_data-device_already-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_map_data-device_already-3.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_map_data-host_already-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_map_data-host_already-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_map_data-host_already-3.c:\n\tLikewise.\n\nFrom-SVN: r279231", "tree": {"sha": "3fcc3cefcd623c5c964bdef6ed668bd4023440ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fcc3cefcd623c5c964bdef6ed668bd4023440ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d1b5e710e5573416bb13113b6593307e6b008e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d1b5e710e5573416bb13113b6593307e6b008e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d1b5e710e5573416bb13113b6593307e6b008e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d1b5e710e5573416bb13113b6593307e6b008e2/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e9394382251d43eb06f117260fcfb18961ce0c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e9394382251d43eb06f117260fcfb18961ce0c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e9394382251d43eb06f117260fcfb18961ce0c4"}], "stats": {"total": 210, "additions": 210, "deletions": 0}, "files": [{"sha": "404722e20e34851dd39baa0af2769ce2d8b60ee6", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d1b5e710e5573416bb13113b6593307e6b008e2/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d1b5e710e5573416bb13113b6593307e6b008e2/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=3d1b5e710e5573416bb13113b6593307e6b008e2", "patch": "@@ -1,3 +1,19 @@\n+2019-12-11  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR libgomp/92854\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_map_data-device_already-1.c:\n+\tNew file.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_map_data-device_already-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_map_data-device_already-3.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_map_data-host_already-1.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_map_data-host_already-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_map_data-host_already-3.c:\n+\tLikewise.\n+\n 2019-12-11  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Julian Brown  <julian@codesourcery.com>\n "}, {"sha": "b48a1adbbb685397213427f231919e8cce1c7443", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_map_data-device_already-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d1b5e710e5573416bb13113b6593307e6b008e2/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_map_data-device_already-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d1b5e710e5573416bb13113b6593307e6b008e2/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_map_data-device_already-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_map_data-device_already-1.c?ref=3d1b5e710e5573416bb13113b6593307e6b008e2", "patch": "@@ -0,0 +1,36 @@\n+/* Verify that we refuse 'acc_map_data' when the \"device address [...] is\n+   already mapped\".  */\n+\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } } */\n+\n+#include <assert.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <openacc.h>\n+\n+int\n+main ()\n+{\n+  const int N = 131;\n+\n+  char *h1 = (char *) malloc (N);\n+  assert (h1);\n+  void *d = acc_malloc (N);\n+  assert (d);\n+  acc_map_data (h1, d, N);\n+\n+  char *h2 = (char *) malloc (N);\n+  assert (h2);\n+  /* Try to arrange a setting such that a later 'acc_unmap_data' would find the\n+     device memory object still referenced elsewhere.  This is not possible,\n+     given the semantics of 'acc_map_data'.  */\n+  fprintf (stderr, \"CheCKpOInT\\n\");\n+  acc_map_data (h2, d, N);\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-output \"device address \\\\\\[\\[0-9a-fA-FxX\\]+, \\\\\\+131\\\\\\] is already mapped\" } */\n+/* { dg-shouldfail \"\" } */"}, {"sha": "4fe0662cabbf2a9775dd60c9684cec56ad8f3233", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_map_data-device_already-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d1b5e710e5573416bb13113b6593307e6b008e2/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_map_data-device_already-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d1b5e710e5573416bb13113b6593307e6b008e2/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_map_data-device_already-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_map_data-device_already-2.c?ref=3d1b5e710e5573416bb13113b6593307e6b008e2", "patch": "@@ -0,0 +1,35 @@\n+/* Verify that we refuse 'acc_map_data' when the \"device address [...] is\n+   already mapped\".  */\n+\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } } */\n+\n+#include <assert.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <openacc.h>\n+\n+int\n+main ()\n+{\n+  const int N = 132;\n+\n+  char *h1 = (char *) malloc (N);\n+  assert (h1);\n+  void *d = acc_create (h1, N);\n+  assert (d);\n+\n+  char *h2 = (char *) malloc (N);\n+  assert (h2);\n+  /* Try to arrange a setting such that a later 'acc_unmap_data' would find the\n+     device memory object still referenced elsewhere.  This is not possible,\n+     given the semantics of 'acc_map_data'.  */\n+  fprintf (stderr, \"CheCKpOInT\\n\");\n+  acc_map_data (h2, d, N);\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-output \"device address \\\\\\[\\[0-9a-fA-FxX\\]+, \\\\\\+132\\\\\\] is already mapped\" } */\n+/* { dg-shouldfail \"\" } */"}, {"sha": "44ebaa0eb3f221ad691f75fbef04b9a3ff8ec641", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_map_data-device_already-3.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d1b5e710e5573416bb13113b6593307e6b008e2/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_map_data-device_already-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d1b5e710e5573416bb13113b6593307e6b008e2/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_map_data-device_already-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_map_data-device_already-3.c?ref=3d1b5e710e5573416bb13113b6593307e6b008e2", "patch": "@@ -0,0 +1,31 @@\n+/* Verify that we refuse 'acc_map_data' when the \"device address [...] is\n+   already mapped\".  */\n+\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } } */\n+\n+#include <assert.h>\n+#include <stdio.h>\n+#include <openacc.h>\n+\n+double global_var;\n+#pragma acc declare create (global_var)\n+\n+int\n+main ()\n+{\n+  double var;\n+  void *d = acc_deviceptr (&global_var);\n+  assert (d);\n+  /* Try to arrange a setting such that a later 'acc_unmap_data' would find the\n+     device memory object still referenced elsewhere.  This is not possible,\n+     given the semantics of 'acc_map_data'.  */\n+  fprintf (stderr, \"CheCKpOInT\\n\");\n+  acc_map_data (&var, d, sizeof var);\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-output \"device address \\\\\\[\\[0-9a-fA-FxX\\]+, \\\\\\+8\\\\\\] is already mapped\" { xfail *-*-* } } TODO PR92888 */\n+/* { dg-shouldfail \"TODO PR92888\" { this-really-should-fail } } */"}, {"sha": "1fff806613c97bd64ca4c1bb8a985abaed9da123", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_map_data-host_already-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d1b5e710e5573416bb13113b6593307e6b008e2/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_map_data-host_already-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d1b5e710e5573416bb13113b6593307e6b008e2/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_map_data-host_already-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_map_data-host_already-1.c?ref=3d1b5e710e5573416bb13113b6593307e6b008e2", "patch": "@@ -0,0 +1,33 @@\n+/* Verify that we refuse 'acc_map_data' when the \"host address [...] is already\n+   mapped\".  */\n+\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } } */\n+\n+#include <assert.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <openacc.h>\n+\n+int\n+main ()\n+{\n+  const int N = 101;\n+\n+  char *h = (char *) malloc (N);\n+  assert (h);\n+  void *d1 = acc_malloc (N);\n+  assert (d1);\n+  acc_map_data (h, d1, N);\n+\n+  void *d2 = acc_malloc (N);\n+  assert (d2);\n+  fprintf (stderr, \"CheCKpOInT\\n\");\n+  acc_map_data (h, d2, N);\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-output \"host address \\\\\\[\\[0-9a-fA-FxX\\]+, \\\\\\+101\\\\\\] is already mapped\" } */\n+/* { dg-shouldfail \"\" } */"}, {"sha": "fc804692d1b453c646cc91147b61909d55fbf745", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_map_data-host_already-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d1b5e710e5573416bb13113b6593307e6b008e2/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_map_data-host_already-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d1b5e710e5573416bb13113b6593307e6b008e2/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_map_data-host_already-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_map_data-host_already-2.c?ref=3d1b5e710e5573416bb13113b6593307e6b008e2", "patch": "@@ -0,0 +1,32 @@\n+/* Verify that we refuse 'acc_map_data' when the \"host address [...] is already\n+   mapped\".  */\n+\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } } */\n+\n+#include <assert.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <openacc.h>\n+\n+int\n+main ()\n+{\n+  const int N = 102;\n+\n+  char *h = (char *) malloc (N);\n+  assert (h);\n+  void *d1 = acc_create (h, N);\n+  assert (d1);\n+\n+  void *d2 = acc_malloc (N);\n+  assert (d2);\n+  fprintf (stderr, \"CheCKpOInT\\n\");\n+  acc_map_data (h, d2, N);\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-output \"host address \\\\\\[\\[0-9a-fA-FxX\\]+, \\\\\\+102\\\\\\] is already mapped\" } */\n+/* { dg-shouldfail \"\" } */"}, {"sha": "6a80ebfef467c69d2818575525fbd2abc0610fdd", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_map_data-host_already-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d1b5e710e5573416bb13113b6593307e6b008e2/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_map_data-host_already-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d1b5e710e5573416bb13113b6593307e6b008e2/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_map_data-host_already-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_map_data-host_already-3.c?ref=3d1b5e710e5573416bb13113b6593307e6b008e2", "patch": "@@ -0,0 +1,27 @@\n+/* Verify that we refuse 'acc_map_data' when the \"host address [...] is already\n+   mapped\".  */\n+\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } } */\n+\n+#include <assert.h>\n+#include <stdio.h>\n+#include <openacc.h>\n+\n+float global_var;\n+#pragma acc declare create (global_var)\n+\n+int\n+main ()\n+{\n+  void *d = acc_malloc (sizeof global_var);\n+  assert (d);\n+  fprintf (stderr, \"CheCKpOInT\\n\");\n+  acc_map_data (&global_var, d, sizeof global_var);\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-output \"host address \\\\\\[\\[0-9a-fA-FxX\\]+, \\\\\\+4\\\\\\] is already mapped\" } */\n+/* { dg-shouldfail \"\" } */"}]}