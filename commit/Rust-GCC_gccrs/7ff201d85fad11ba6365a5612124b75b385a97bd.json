{"sha": "7ff201d85fad11ba6365a5612124b75b385a97bd", "node_id": "C_kwDOANBUbNoAKDdmZjIwMWQ4NWZhZDExYmE2MzY1YTU2MTIxMjRiNzViMzg1YTk3YmQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-02-08T14:11:29Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-02-08T14:11:29Z"}, "message": "c++: satisfaction value of type const bool [PR104410]\n\nHere constant evaluation of the atomic constraint use_func_v<T>\nsensibly yields an INTEGER_CST of type const bool, but the assert in\nsatisfaction_value expects unqualified bool.  So let's just relax the\nassert to accept cv-qualified bool.\n\n\tPR c++/104410\n\ngcc/cp/ChangeLog:\n\n\t* constraint.cc (satisfaction_value): Relax assert to accept\n\tcv-qualified bool.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-pr104410.C: New test.", "tree": {"sha": "434c20375e3f384671cf3b2aae70c61a02b9f556", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/434c20375e3f384671cf3b2aae70c61a02b9f556"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ff201d85fad11ba6365a5612124b75b385a97bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ff201d85fad11ba6365a5612124b75b385a97bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ff201d85fad11ba6365a5612124b75b385a97bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ff201d85fad11ba6365a5612124b75b385a97bd/comments", "author": null, "committer": null, "parents": [{"sha": "db5f1c17031ad8a898d77121f1e0e0141306e22a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5f1c17031ad8a898d77121f1e0e0141306e22a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db5f1c17031ad8a898d77121f1e0e0141306e22a"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "12db7e5cf14e8cf3e3675fb58a18a40b6ec5e638", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ff201d85fad11ba6365a5612124b75b385a97bd/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ff201d85fad11ba6365a5612124b75b385a97bd/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=7ff201d85fad11ba6365a5612124b75b385a97bd", "patch": "@@ -2818,7 +2818,8 @@ satisfaction_value (tree t)\n     return t;\n \n   gcc_assert (TREE_CODE (t) == INTEGER_CST\n-\t      && same_type_p (TREE_TYPE (t), boolean_type_node));\n+\t      && same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (t),\n+\t\t\t\t\t\t\t    boolean_type_node));\n   if (integer_zerop (t))\n     return boolean_false_node;\n   else"}, {"sha": "dac08e10a0f2f2a8311c1d6b383f37cc3c017aa3", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr104410.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ff201d85fad11ba6365a5612124b75b385a97bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr104410.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ff201d85fad11ba6365a5612124b75b385a97bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr104410.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr104410.C?ref=7ff201d85fad11ba6365a5612124b75b385a97bd", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/104410\n+// { dg-do compile { target c++20 } }\n+\n+template<class T> constexpr bool use_func_v{};\n+template<class T> void f() requires use_func_v<T> || true { }\n+template void f<int>();"}]}