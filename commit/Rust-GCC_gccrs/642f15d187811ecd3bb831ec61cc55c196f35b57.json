{"sha": "642f15d187811ecd3bb831ec61cc55c196f35b57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQyZjE1ZDE4NzgxMWVjZDNiYjgzMWVjNjFjYzU1YzE5NmYzNWI1Nw==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "1999-03-16T03:38:15Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "1999-03-16T03:38:15Z"}, "message": "parse.y (java_stabilize_reference): Use save_expr instead of building a SAVE_EXPR node.\n\n1999-03-16  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\t* parse.y (java_stabilize_reference): Use save_expr instead of\n\tbuilding a SAVE_EXPR node.\n\t(java_complete_lhs): Patch the resulting string of the `+='\n\toperator (if necessary) and complete the RHS after having built\n\tthe cast.\n\nFrom-SVN: r25797", "tree": {"sha": "04486ff7c61efbf307ea3265163395aed8c883c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04486ff7c61efbf307ea3265163395aed8c883c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/642f15d187811ecd3bb831ec61cc55c196f35b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/642f15d187811ecd3bb831ec61cc55c196f35b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/642f15d187811ecd3bb831ec61cc55c196f35b57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/642f15d187811ecd3bb831ec61cc55c196f35b57/comments", "author": null, "committer": null, "parents": [{"sha": "dacbe76fd2f346da8867eb288ba6123995690a06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dacbe76fd2f346da8867eb288ba6123995690a06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dacbe76fd2f346da8867eb288ba6123995690a06"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "e06e9573cc0f4df98a3825d86d608c3f3e3305a0", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/642f15d187811ecd3bb831ec61cc55c196f35b57/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/642f15d187811ecd3bb831ec61cc55c196f35b57/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=642f15d187811ecd3bb831ec61cc55c196f35b57", "patch": "@@ -1,3 +1,11 @@\n+1999-03-16  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse.y (java_stabilize_reference): Use save_expr instead of\n+\tbuilding a SAVE_EXPR node.\n+\t(java_complete_lhs): Patch the resulting string of the `+='\n+\toperator (if necessary) and complete the RHS after having built\n+\tthe cast.\n+\n Mon Mar 15 12:18:29 1999  Per Bothner  <bothner@cygnus.com>\n \n \t* class.c (make_class):  Don't set CLASS_P here (because"}, {"sha": "f090ca515f535d07ab92d3f36d2fd59a9cc72768", "filename": "gcc/java/parse.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/642f15d187811ecd3bb831ec61cc55c196f35b57/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/642f15d187811ecd3bb831ec61cc55c196f35b57/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=642f15d187811ecd3bb831ec61cc55c196f35b57", "patch": "@@ -10122,7 +10122,7 @@ java_stabilize_reference (node)\n     {\n       tree op0 = TREE_OPERAND (node, 0);\n       tree op1 = TREE_OPERAND (node, 1);\n-      TREE_OPERAND (node, 0) = build1 (SAVE_EXPR, TREE_TYPE (op0), op0);\n+      TREE_OPERAND (node, 0) = save_expr (op0);\n       TREE_OPERAND (node, 1) = java_stabilize_reference (op1);\n       return node;\n     }\n@@ -10537,9 +10537,13 @@ java_complete_lhs (node)\n \t  /* Now complete the RHS. We write it back later on. */\n \t  nn = java_complete_tree (TREE_OPERAND (node, 1));\n \n+\t  if ((cn = patch_string (nn)))\n+\t    nn = cn;\n+\n \t  /* The last part of the rewrite for E1 op= E2 is to have \n \t     E1 = (T)(E1 op E2), with T being the type of E1. */\n-\t  nn = build_cast (EXPR_WFL_LINECOL (wfl_op2), TREE_TYPE (lvalue), nn);\n+\t  nn = java_complete_tree (build_cast (EXPR_WFL_LINECOL (wfl_op2), \n+\t\t\t\t\t       TREE_TYPE (lvalue), nn));\n \t}\n \n       /* If we're about to patch a NEW_ARRAY_INIT, we call a special\n@@ -11986,7 +11990,6 @@ build_string_concatenation (op1, op2)\n {\n   tree result;\n   int side_effects = TREE_SIDE_EFFECTS (op1) | TREE_SIDE_EFFECTS (op2);\n-\n   \n   /* Try to do some static optimization */\n   if ((result = string_constant_concatenation (op1, op2)))"}, {"sha": "3e5bd74e9f038f3e92df59bc4a7bea09c6c25aba", "filename": "gcc/java/parse.y", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/642f15d187811ecd3bb831ec61cc55c196f35b57/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/642f15d187811ecd3bb831ec61cc55c196f35b57/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=642f15d187811ecd3bb831ec61cc55c196f35b57", "patch": "@@ -7520,7 +7520,7 @@ java_stabilize_reference (node)\n     {\n       tree op0 = TREE_OPERAND (node, 0);\n       tree op1 = TREE_OPERAND (node, 1);\n-      TREE_OPERAND (node, 0) = build1 (SAVE_EXPR, TREE_TYPE (op0), op0);\n+      TREE_OPERAND (node, 0) = save_expr (op0);\n       TREE_OPERAND (node, 1) = java_stabilize_reference (op1);\n       return node;\n     }\n@@ -7935,9 +7935,13 @@ java_complete_lhs (node)\n \t  /* Now complete the RHS. We write it back later on. */\n \t  nn = java_complete_tree (TREE_OPERAND (node, 1));\n \n+\t  if ((cn = patch_string (nn)))\n+\t    nn = cn;\n+\n \t  /* The last part of the rewrite for E1 op= E2 is to have \n \t     E1 = (T)(E1 op E2), with T being the type of E1. */\n-\t  nn = build_cast (EXPR_WFL_LINECOL (wfl_op2), TREE_TYPE (lvalue), nn);\n+\t  nn = java_complete_tree (build_cast (EXPR_WFL_LINECOL (wfl_op2), \n+\t\t\t\t\t       TREE_TYPE (lvalue), nn));\n \t}\n \n       /* If we're about to patch a NEW_ARRAY_INIT, we call a special\n@@ -9384,7 +9388,6 @@ build_string_concatenation (op1, op2)\n {\n   tree result;\n   int side_effects = TREE_SIDE_EFFECTS (op1) | TREE_SIDE_EFFECTS (op2);\n-\n   \n   /* Try to do some static optimization */\n   if ((result = string_constant_concatenation (op1, op2)))"}]}