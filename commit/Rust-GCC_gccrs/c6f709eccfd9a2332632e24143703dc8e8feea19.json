{"sha": "c6f709eccfd9a2332632e24143703dc8e8feea19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZmNzA5ZWNjZmQ5YTIzMzI2MzJlMjQxNDM3MDNkYzhlOGZlZWExOQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2014-03-03T17:17:49Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2014-03-03T17:17:49Z"}, "message": "rl78-real.md (cbranchsi4_real_signed): Add anti-cacnonical alternatives.\n\n\t* config/rl78/rl78-real.md (cbranchsi4_real_signed): Add\n\tanti-cacnonical alternatives.\n\t(negandhi3_real): New pattern.\n\t* config/rl78/rl78-virt.md (negandhi3_virt): New pattern.\n\nFrom-SVN: r208282", "tree": {"sha": "2fd020bfa81b3679eaedb7ba2bde0d3f37502ad7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fd020bfa81b3679eaedb7ba2bde0d3f37502ad7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6f709eccfd9a2332632e24143703dc8e8feea19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6f709eccfd9a2332632e24143703dc8e8feea19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6f709eccfd9a2332632e24143703dc8e8feea19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6f709eccfd9a2332632e24143703dc8e8feea19/comments", "author": null, "committer": null, "parents": [{"sha": "5752f78f3b1bec3a399a7af454cbca3124cbf22d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5752f78f3b1bec3a399a7af454cbca3124cbf22d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5752f78f3b1bec3a399a7af454cbca3124cbf22d"}], "stats": {"total": 678, "additions": 533, "deletions": 145}, "files": [{"sha": "c40503c47cead3530afbe26815e2b3ebd692d4b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6f709eccfd9a2332632e24143703dc8e8feea19", "patch": "@@ -1,3 +1,10 @@\n+2014-03-03  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rl78/rl78-real.md (cbranchsi4_real_signed): Add\n+\tanti-cacnonical alternatives.\n+\t(negandhi3_real): New pattern.\n+\t* config/rl78/rl78-virt.md (negandhi3_virt): New pattern.\n+\n 2014-03-03  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* config/avr/avr-mcus.def: Remove atxmega16x1.\n@@ -36,7 +43,7 @@\n \tgroup, also set all symbols to local.\n \n 2014-03-02  Jan Hubicka  <hubicka@ucw.cz>\n-\t\n+\n \tPR ipa/60306\n \n \tRevert:\n@@ -51,9 +58,9 @@\n \tPR bootstrap/52466\n \tPR target/46898\n \t* config/lm32/lm32.c (lm32_legitimate_constant_p): Remove, as incorrect.\n-\t  (TARGET_LEGITIMATE_CONSTANT_P): Undefine, as not needed.  \n+\t  (TARGET_LEGITIMATE_CONSTANT_P): Undefine, as not needed.\n \t* config/lm32/lm32.md (movsi_insn): Add 32-bit immediate support.\n-\t(simple_return, *simple_return): New patterns     \n+\t(simple_return, *simple_return): New patterns\n \t* config/lm32/predicates.md (movsi_rhs_operand): Remove as obsolete.\n \t* configure.ac (force_sjlj_exceptions): Force sjlj exceptions for lm32.\n "}, {"sha": "7f999abbdabba1bd2ebdbc74645ee2fa428d22c9", "filename": "gcc/config/msp430/msp430-protos.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Fmsp430%2Fmsp430-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Fmsp430%2Fmsp430-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430-protos.h?ref=c6f709eccfd9a2332632e24143703dc8e8feea19", "patch": "@@ -30,9 +30,11 @@ const char * msp430x_extendhisi (rtx *);\n void\tmsp430_fixup_compare_operands (enum machine_mode, rtx *);\n int\tmsp430_hard_regno_mode_ok (int, enum machine_mode);\n int\tmsp430_hard_regno_nregs (int, enum machine_mode);\n+bool    msp430_hwmult_enabled (void);\n rtx\tmsp430_incoming_return_addr_rtx (void);\n void\tmsp430_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree, int);\n int\tmsp430_initial_elimination_offset (int, int);\n+bool    msp430_is_f5_mcu (void);\n bool    msp430_is_interrupt_func (void);\n const char * msp430x_logical_shift_right (rtx);\n const char * msp430_mcu_name (void);\n@@ -41,7 +43,7 @@ void\tmsp430_output_labelref (FILE *, const char *);\n void\tmsp430_register_pragmas (void);\n rtx\tmsp430_return_addr_rtx (int);\n void\tmsp430_split_movsi (rtx *);\n-rtx\tmsp430_subreg (enum machine_mode, rtx, enum machine_mode, int);\n void    msp430_start_function (FILE *, const char *, tree);\n+rtx\tmsp430_subreg (enum machine_mode, rtx, enum machine_mode, int);\n \n #endif /* GCC_MSP430_PROTOS_H */"}, {"sha": "80a17a6e31e3ffdc8f510086919f2910bf61218f", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 180, "deletions": 96, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=c6f709eccfd9a2332632e24143703dc8e8feea19", "patch": "@@ -51,16 +51,15 @@\n #include \"msp430-protos.h\"\n #include \"dumpfile.h\"\n #include \"opts.h\"\n-\n \f\n \n static void msp430_compute_frame_info (void);\n \n \f\n \n-/* Run-time Target Specification */\n+/* Run-time Target Specification.  */\n \n-bool msp430x = false;\n+bool msp430x = true;\n \n struct GTY(()) machine_function\n {\n@@ -111,65 +110,63 @@ msp430_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE\t\tmsp430_option_override\n \n-/* This list provides a set of known MCU names that support the MSP430X\n-   ISA.  The list has been provided by TI and should be kept in sync with\n-   the ones in:\n-   \n-     gcc/config/msp430/t-msp430\n-     gas/config/tc-msp430.c\n-\n-   FIXME: We ought to read the names in from a file at run, rather\n-   than having them built in like this.  Also such a file should be\n-   shared with gas.  */\n-\n-static const char * msp430x_names [] =\n-{\n-  \"cc430f5123\",   \"cc430f5125\",   \"cc430f5133\",   \"cc430f5135\",   \"cc430f5137\",\n-  \"cc430f5143\",   \"cc430f5145\",   \"cc430f5147\",   \"cc430f6125\",   \"cc430f6126\",\n-  \"cc430f6127\",   \"cc430f6135\",   \"cc430f6137\",   \"cc430f6143\",   \"cc430f6145\",\n-  \"cc430f6147\",   \"msp430bt5190\", \"msp430cg4616\", \"msp430cg4617\", \"msp430cg4618\",\n-  \"msp430cg4619\", \"msp430f2416\",  \"msp430f2417\",  \"msp430f2418\",  \"msp430f2419\",\n-  \"msp430f2616\",  \"msp430f2617\",  \"msp430f2618\",  \"msp430f2619\",  \"msp430f4616\",\n-  \"msp430f46161\", \"msp430f4617\",  \"msp430f46171\", \"msp430f4618\",  \"msp430f46181\",\n-  \"msp430f4619\",  \"msp430f46191\", \"msp430f47126\", \"msp430f47127\", \"msp430f47163\",\n-  \"msp430f47166\", \"msp430f47167\", \"msp430f47173\", \"msp430f47176\", \"msp430f47177\",\n-  \"msp430f47183\", \"msp430f47186\", \"msp430f47187\", \"msp430f47193\", \"msp430f47196\",\n-  \"msp430f47197\", \"msp430f5131\",  \"msp430f5132\",  \"msp430f5151\",  \"msp430f5152\",\n-  \"msp430f5171\",  \"msp430f5172\",  \"msp430f5212\",  \"msp430f5213\",  \"msp430f5214\",\n-  \"msp430f5217\",  \"msp430f5218\",  \"msp430f5219\",  \"msp430f5222\",  \"msp430f5223\",\n-  \"msp430f5224\",  \"msp430f5227\",  \"msp430f5228\",  \"msp430f5229\",  \"msp430f5304\",\n-  \"msp430f5308\",  \"msp430f5309\",  \"msp430f5310\",  \"msp430f5324\",  \"msp430f5325\",\n-  \"msp430f5326\",  \"msp430f5327\",  \"msp430f5328\",  \"msp430f5329\",  \"msp430f5333\",\n-  \"msp430f5335\",  \"msp430f5336\",  \"msp430f5338\",  \"msp430f5340\",  \"msp430f5341\",\n-  \"msp430f5342\",  \"msp430f5358\",  \"msp430f5359\",  \"msp430f5418\",  \"msp430f5418a\",\n-  \"msp430f5419\",  \"msp430f5419a\", \"msp430f5435\",  \"msp430f5435a\", \"msp430f5436\",\n-  \"msp430f5436a\", \"msp430f5437\",  \"msp430f5437a\", \"msp430f5438\",  \"msp430f5438a\",\n-  \"msp430f5500\",  \"msp430f5501\",  \"msp430f5502\",  \"msp430f5503\",  \"msp430f5504\",\n-  \"msp430f5505\",  \"msp430f5506\",  \"msp430f5507\",  \"msp430f5508\",  \"msp430f5509\",\n-  \"msp430f5510\",  \"msp430f5513\",  \"msp430f5514\",  \"msp430f5515\",  \"msp430f5517\",\n-  \"msp430f5519\",  \"msp430f5521\",  \"msp430f5522\",  \"msp430f5524\",  \"msp430f5525\",\n-  \"msp430f5526\",  \"msp430f5527\",  \"msp430f5528\",  \"msp430f5529\",  \"msp430f5630\",\n-  \"msp430f5631\",  \"msp430f5632\",  \"msp430f5633\",  \"msp430f5634\",  \"msp430f5635\",\n-  \"msp430f5636\",  \"msp430f5637\",  \"msp430f5638\",  \"msp430f5658\",  \"msp430f5659\",\n-  \"msp430f6433\",  \"msp430f6435\",  \"msp430f6436\",  \"msp430f6438\",  \"msp430f6458\",\n-  \"msp430f6459\",  \"msp430f6630\",  \"msp430f6631\",  \"msp430f6632\",  \"msp430f6633\",\n-  \"msp430f6634\",  \"msp430f6635\",  \"msp430f6636\",  \"msp430f6637\",  \"msp430f6638\",\n-  \"msp430f6658\",  \"msp430f6659\",  \"msp430f6720\",  \"msp430f6721\",  \"msp430f6723\",\n-  \"msp430f6724\",  \"msp430f6725\",  \"msp430f6726\",  \"msp430f6730\",  \"msp430f6731\",\n-  \"msp430f6733\",  \"msp430f6734\",  \"msp430f6735\",  \"msp430f6736\",  \"msp430f6745\",\n-  \"msp430f67451\", \"msp430f6746\",  \"msp430f67461\", \"msp430f6747\",  \"msp430f67471\",\n-  \"msp430f6748\",  \"msp430f67481\", \"msp430f6749\",  \"msp430f67491\", \"msp430f6765\",\n-  \"msp430f67651\", \"msp430f6766\",  \"msp430f67661\", \"msp430f6767\",  \"msp430f67671\",\n-  \"msp430f6768\",  \"msp430f67681\", \"msp430f6769\",  \"msp430f67691\", \"msp430f6775\",\n-  \"msp430f67751\", \"msp430f6776\",  \"msp430f67761\", \"msp430f6777\",  \"msp430f67771\",\n-  \"msp430f6778\",  \"msp430f67781\", \"msp430f6779\",  \"msp430f67791\", \"msp430fg4616\",\n-  \"msp430fg4617\", \"msp430fg4618\", \"msp430fg4619\", \"msp430fr5720\", \"msp430fr5721\",\n-  \"msp430fr5722\", \"msp430fr5723\", \"msp430fr5724\", \"msp430fr5725\", \"msp430fr5726\",\n-  \"msp430fr5727\", \"msp430fr5728\", \"msp430fr5729\", \"msp430fr5730\", \"msp430fr5731\",\n-  \"msp430fr5732\", \"msp430fr5733\", \"msp430fr5734\", \"msp430fr5735\", \"msp430fr5736\",\n-  \"msp430fr5737\", \"msp430fr5738\", \"msp430fr5739\", \"msp430fr5949\", \"msp430fr5969\",\n-  \"msp430sl5438a\",\"msp430x241x\",  \"msp430x26x\",   \"msp430x461x1\", \"msp430x46x\",\n-  \"msp430x471x3\", \"msp430x471x6\", \"msp430x471x7\", \"msp430xg46x\"\n+static const char * msp430_mcu_names [] =\n+{\n+\"msp430afe221\",\t\"msp430afe222\",\t\"msp430afe223\",\t\"msp430afe231\",\t\n+\"msp430afe232\",\t\"msp430afe233\",\t\"msp430afe251\",\t\"msp430afe252\",\t\n+\"msp430afe253\",\t\"msp430c091\",\t\"msp430c092\",\t\"msp430c111\",\t\n+\"msp430c1111\",\t\"msp430c112\",\t\"msp430c1121\",\t\"msp430c1331\",\t\n+\"msp430c1351\",\t\"msp430c311s\",\t\"msp430c312\",\t\"msp430c313\",\t\n+\"msp430c314\",\t\"msp430c315\",\t\"msp430c323\",\t\"msp430c325\",\t\n+\"msp430c336\",\t\"msp430c337\",\t\"msp430c412\",\t\"msp430c413\",\t\n+\"msp430e112\",\t\"msp430e313\",\t\"msp430e315\",\t\"msp430e325\",\t\n+\"msp430e337\",\t\"msp430f110\",\t\"msp430f1101\",\t\"msp430f1101a\",\t\n+\"msp430f1111\",\t\"msp430f1111a\",\t\"msp430f112\",\t\"msp430f1121\",\t\n+\"msp430f1121a\",\t\"msp430f1122\",\t\"msp430f1132\",\t\"msp430f122\",\t\n+\"msp430f1222\",\t\"msp430f123\",\t\"msp430f1232\",\t\"msp430f133\",\t\n+\"msp430f135\",\t\"msp430f147\",\t\"msp430f1471\",\t\"msp430f148\",\t\n+\"msp430f1481\",\t\"msp430f149\",\t\"msp430f1491\",\t\"msp430f155\",\t\n+\"msp430f156\",\t\"msp430f157\",\t\"msp430f1610\",\t\"msp430f1611\",\t\n+\"msp430f1612\",\t\"msp430f167\",\t\"msp430f168\",\t\"msp430f169\",\t\n+\"msp430f2001\",\t\"msp430f2002\",\t\"msp430f2003\",\t\"msp430f2011\",\t\n+\"msp430f2012\",\t\"msp430f2013\",\t\"msp430f2101\",\t\"msp430f2111\",\t\n+\"msp430f2112\",\t\"msp430f2121\",\t\"msp430f2122\",\t\"msp430f2131\",\t\n+\"msp430f2132\",\t\"msp430f2232\",\t\"msp430f2234\",\t\"msp430f2252\",\t\n+\"msp430f2254\",\t\"msp430f2272\",\t\"msp430f2274\",\t\"msp430f233\",\t\n+\"msp430f2330\",\t\"msp430f235\",\t\"msp430f2350\",\t\"msp430f2370\",\t\n+\"msp430f2410\",\t\"msp430f247\",\t\"msp430f2471\",\t\"msp430f248\",\t\n+\"msp430f2481\",\t\"msp430f249\",\t\"msp430f2491\",\t\"msp430f412\",\t\n+\"msp430f413\",\t\"msp430f4132\",\t\"msp430f415\",\t\"msp430f4152\",\t\n+\"msp430f417\",\t\"msp430f423\",\t\"msp430f423a\",\t\"msp430f425\",\t\n+\"msp430f4250\",\t\"msp430f425a\",\t\"msp430f4260\",\t\"msp430f427\",\t\n+\"msp430f4270\",\t\"msp430f427a\",\t\"msp430f435\",\t\"msp430f4351\",\t\n+\"msp430f436\",\t\"msp430f4361\",\t\"msp430f437\",\t\"msp430f4371\",\t\n+\"msp430f438\",\t\"msp430f439\",\t\"msp430f447\",\t\"msp430f448\",\t\n+\"msp430f4481\",\t\"msp430f449\",\t\"msp430f4491\",\t\"msp430f477\",\t\n+\"msp430f478\",\t\"msp430f4783\",\t\"msp430f4784\",\t\"msp430f479\",\t\n+\"msp430f4793\",\t\"msp430f4794\",\t\"msp430fe423\",\t\"msp430fe4232\",\t\n+\"msp430fe423a\",\t\"msp430fe4242\",\t\"msp430fe425\",\t\"msp430fe4252\",\t\n+\"msp430fe425a\",\t\"msp430fe427\",\t\"msp430fe4272\",\t\"msp430fe427a\",\t\n+\"msp430fg4250\",\t\"msp430fg4260\",\t\"msp430fg4270\",\t\"msp430fg437\",\t\n+\"msp430fg438\",\t\"msp430fg439\",\t\"msp430fg477\",\t\"msp430fg478\",\t\n+\"msp430fg479\",\t\"msp430fw423\",\t\"msp430fw425\",\t\"msp430fw427\",\t\n+\"msp430fw428\",\t\"msp430fw429\",\t\"msp430g2001\",\t\"msp430g2101\",\t\n+\"msp430g2102\",\t\"msp430g2111\",\t\"msp430g2112\",\t\"msp430g2113\",\t\n+\"msp430g2121\",\t\"msp430g2131\",\t\"msp430g2132\",\t\"msp430g2152\",\t\n+\"msp430g2153\",\t\"msp430g2201\",\t\"msp430g2202\",\t\"msp430g2203\",\t\n+\"msp430g2210\",\t\"msp430g2211\",\t\"msp430g2212\",\t\"msp430g2213\",\t\n+\"msp430g2221\",\t\"msp430g2230\",\t\"msp430g2231\",\t\"msp430g2232\",\t\n+\"msp430g2233\",\t\"msp430g2252\",\t\"msp430g2253\",\t\"msp430g2302\",\t\n+\"msp430g2303\",\t\"msp430g2312\",\t\"msp430g2313\",\t\"msp430g2332\",\t\n+\"msp430g2333\",\t\"msp430g2352\",\t\"msp430g2353\",\t\"msp430g2402\",\t\n+\"msp430g2403\",\t\"msp430g2412\",\t\"msp430g2413\",\t\"msp430g2432\",\t\n+\"msp430g2433\",\t\"msp430g2444\",\t\"msp430g2452\",\t\"msp430g2453\",\t\n+\"msp430g2513\",\t\"msp430g2533\",\t\"msp430g2544\",\t\"msp430g2553\",\t\n+\"msp430g2744\",\t\"msp430g2755\",\t\"msp430g2855\",\t\"msp430g2955\",\t\n+\"msp430i2020\",\t\"msp430i2021\",\t\"msp430i2030\",\t\"msp430i2031\",\t\n+\"msp430i2040\",\t\"msp430i2041\",\t\"msp430l092\",   \"msp430p112\",\t\n+\"msp430p313\",\t\"msp430p315\",\t\"msp430p315s\",\t\"msp430p325\",\t\n+\"msp430p337\",\t\"msp430tch5e\"\n };\n \n /* Generate a C preprocessor symbol based upon the MCU selected by the user.\n@@ -200,35 +197,47 @@ msp430_option_override (void)\n   if (target_cpu)\n     {\n       if (strcasecmp (target_cpu, \"msp430x\") == 0\n-\t  || strcasecmp (target_cpu, \"msp430xv2\") == 0)\n+\t  || strcasecmp (target_cpu, \"msp430xv2\") == 0\n+\t  || strcasecmp (target_cpu, \"430x\") == 0\n+\t  || strcasecmp (target_cpu, \"430xv2\") == 0)\n \tmsp430x = true;\n+      else if (strcasecmp (target_cpu, \"msp430\") == 0\n+\t       || strcasecmp (target_cpu, \"430\") == 0)\n+\tmsp430x = false;\n+      else\n+\terror (\"unrecognised argument of -mcpu: %s\", target_cpu);\n     }\n-  \n+\n   if (target_mcu)\n     {\n-      unsigned i;\n+      int i;\n \n-      for (i = ARRAY_SIZE (msp430x_names); i--;)\n-\tif (strcasecmp (target_mcu, msp430x_names[i]) == 0)\n-\t  {\n-\t    msp430x = true;\n-\t    break;\n-\t  }\n-      /* Note - it is not an error if we did not recognize the MCU\n-\t name.  The msp430x_names array only contains those MCU names\n-\t which are currently known to use the MSP430X ISA.  There are\n-\t lots of other MCUs which just use the MSP430 ISA.  */\n-\n-      /* We also recognise two generic MCU 430X names.  They do not\n-\t appear in the msp430x_names table as we want to be able to\n-\t generate special C preprocessor defines for them.  That is\n-\t why we set target_mcu to NULL.  */\n-      if (strcasecmp (target_mcu, \"msp430x\") == 0\n-\t  || strcasecmp (target_mcu, \"msp430xv2\") == 0)\n+      /* If we are given an MCU name, we assume that it supports 430X.\n+\t Then we check to see if it is one of the known MCUs that only\n+\t supports 430.  */\n+      msp430x = true;\n+\n+      /* For backwards compatibility we recognise two generic MCU\n+\t 430X names.  However we want to be able to generate special C\n+\t preprocessor defines for them, which is why we set target_mcu\n+\t to NULL.  */\n+      if (strcasecmp (target_mcu, \"msp430\") == 0)\n \t{\n-\t  msp430x = true;\n+\t  msp430x = false;\n \t  target_mcu = NULL;\n \t}\n+      else if (strcasecmp (target_mcu, \"msp430x\") == 0\n+\t       || strcasecmp (target_mcu, \"msp430xv2\") == 0)\n+\ttarget_mcu = NULL;\n+      else\n+\tfor (i = ARRAY_SIZE (msp430_mcu_names); i--;)\n+\t  if (strcasecmp (msp430_mcu_names[i], target_mcu) == 0)\n+\t    {\n+\t      msp430x = false;\n+\t      break;\n+\t    }\n+      /* It is not an error if we do not match the MCU name.  There are\n+\t hundreds of them.  */\n     }\n \n   if (TARGET_LARGE && !msp430x)\n@@ -974,6 +983,8 @@ is_attr_func (const char * attr)\n bool\n msp430_is_interrupt_func (void)\n {\n+  if (current_function_decl == NULL)\n+    return false;\n   return is_attr_func (\"interrupt\");\n }\n \n@@ -1315,13 +1326,13 @@ msp430_expand_prologue (void)\n \n   if (flag_stack_usage_info)\n     current_function_static_stack_size = cfun->machine->framesize;\n-  \n+\n   if (crtl->args.pretend_args_size)\n     {\n       rtx note;\n \n       gcc_assert (crtl->args.pretend_args_size == 2);\n-      \n+\n       p = emit_insn (gen_grow_and_swap ());\n \n       /* Document the stack decrement...  */\n@@ -1376,7 +1387,7 @@ msp430_expand_prologue (void)\n \t\telse\n \t\t  addr = stack_pointer_rtx;\n \n-\t\tXVECEXP (note, 0, j + 1) = \n+\t\tXVECEXP (note, 0, j + 1) =\n \t\t  F (gen_rtx_SET (VOIDmode,\n \t\t\t\t  gen_rtx_MEM (Pmode, addr),\n \t\t\t\t  gen_rtx_REG (Pmode, i - j)) );\n@@ -1803,7 +1814,6 @@ static const struct\n   /* GCC does not use helper functions for negation */\n \n   /* Integer multiply, divide, remainder.  */\n-  /* Note: gcc doesn't know about hardware multiply options (yet?)  */\n   { \"__mulhi3\", \"__mspabi_mpyi\" },\n   { \"__mulsi3\", \"__mspabi_mpyl\" },\n   { \"__muldi3\", \"__mspabi_mpyll\" },\n@@ -1835,6 +1845,58 @@ static const struct\n   { NULL, NULL }\n };\n \n+/* Returns true if the current MCU is an F5xxx series.  */\n+bool\n+msp430_is_f5_mcu (void)\n+{\n+  if (target_mcu == NULL)\n+    return false;\n+  return strncasecmp (target_mcu, \"msp430f5\", 8) == 0;\n+}\n+\n+/* Returns true id the current MCU has a second generation 32-bit hardware multiplier.  */\n+static bool\n+has_32bit_hw_mult (void)\n+{\n+  static const char * known_32bit_mult_mcus [] =\n+    {\n+      \"msp430f4783\",      \"msp430f4793\",      \"msp430f4784\",\n+      \"msp430f4794\",      \"msp430f47126\",     \"msp430f47127\",\n+      \"msp430f47163\",     \"msp430f47173\",     \"msp430f47183\",\n+      \"msp430f47193\",     \"msp430f47166\",     \"msp430f47176\",\n+      \"msp430f47186\",     \"msp430f47196\",     \"msp430f47167\",\n+      \"msp430f47177\",     \"msp430f47187\",     \"msp430f47197\"\n+    };\n+  int i;\n+  if (target_mcu == NULL)\n+    return false;\n+\n+  for (i = ARRAY_SIZE (known_32bit_mult_mcus); i--;)\n+    if (strcasecmp (target_mcu, known_32bit_mult_mcus[i]) == 0)\n+      return true;\n+\n+  return false;\n+}\n+\n+/* Returns true if hardware multiply is supported by the chosen MCU.  */\n+bool\n+msp430_hwmult_enabled (void)\n+{\n+  if (target_mcu == NULL)\n+    return false;\n+\n+  if (!ENABLE_HWMULT)\n+    return false;\n+\n+  if (msp430_is_interrupt_func ())\n+    return false;\n+\n+  if (msp430_is_f5_mcu () || has_32bit_hw_mult ())\n+    return true;\n+\n+  return false;\n+}\n+\n /* This function does the same as the default, but it will replace GCC\n    function names with the MSPABI-specified ones.  */\n void\n@@ -1843,12 +1905,34 @@ msp430_output_labelref (FILE *file, const char *name)\n   int i;\n \n   for (i = 0; helper_function_name_mappings [i].gcc_name; i++)\n-    if (! strcmp (helper_function_name_mappings [i].gcc_name, name))\n+    if (strcmp (helper_function_name_mappings [i].gcc_name, name) == 0)\n       {\n-\tfputs (helper_function_name_mappings [i].ti_name, file);\n-\treturn;\n+\tname = helper_function_name_mappings [i].ti_name;\n+\tbreak;\n       }\n \n+  /* If we have been given a specific MCU name then we may be\n+     able to make use of its hardware multiply capabilities.  */\n+  if (msp430_hwmult_enabled ())\n+    {\n+      if (strcmp (\"__mspabi_mpyi\", name) == 0)\n+\t{\n+\t  if (msp430_is_f5_mcu ())\n+\t    name = \"__mulhi2_f5\";\n+\t  else\n+\t    name = \"__mulhi2\";\n+\t}\n+      else if (strcmp (\"__mspabi_mpyl\", name) == 0)\n+\t{\n+\t  if (msp430_is_f5_mcu ())\n+\t    name = \"__mulsi2_f5\";\n+\t  else if (has_32bit_hw_mult ())\n+\t    name = \"__mulsi2_hw32\";\n+\t  else\n+\t    name = \"__mulsi2\";\n+\t}\n+    }\n+\n   fputs (name, file);\n }\n \n@@ -2065,7 +2149,7 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n \t  op = gen_rtx_REG (Pmode, REGNO (op) + 2);\n \t  break;\n \tcase CONST_INT:\n-\t  op = GEN_INT (INTVAL (op) >> 32);\n+\t  op = GEN_INT ((long long) INTVAL (op) >> 32);\n \t  letter = 0;\n \t  break;\n \tdefault:\n@@ -2083,7 +2167,7 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n \t  op = gen_rtx_REG (Pmode, REGNO (op) + 3);\n \t  break;\n \tcase CONST_INT:\n-\t  op = GEN_INT (INTVAL (op) >> 48);\n+\t  op = GEN_INT ((long long) INTVAL (op) >> 48);\n \t  letter = 0;\n \t  break;\n \tdefault:\n@@ -2203,7 +2287,7 @@ msp430x_extendhisi (rtx * operands)\n   if (! msp430x)\n     /* Note: This sequence is approximately the same length as invoking a helper\n        function to perform the sign-extension, as in:\n-       \n+\n          MOV.W  %1, %L0\n \t MOV.W  %1, r12\n \t CALL   __mspabi_srai_15\n@@ -2212,7 +2296,7 @@ msp430x_extendhisi (rtx * operands)\n        but this version does not involve any function calls or using argument\n        registers, so it reduces register pressure.  */\n     return \"MOV.W\\t%1, %L0 { BIT.W\\t#0x8000, %L0 { SUBC.W\\t%H0, %H0 { INV.W\\t%H0, %H0\"; /* 10-bytes.  */\n-  \n+\n   if (REGNO (operands[0]) + 1 == REGNO (operands[1]))\n     /* High word of dest == source word.  */\n     return \"MOV.W\\t%1, %L0 { RPT\\t#15 { RRAX.W\\t%H0\"; /* 6-bytes.  */\n@@ -2235,11 +2319,11 @@ msp430x_logical_shift_right (rtx amount)\n       || INTVAL (amount) >= 16)\n     return \"# nop logical shift.\";\n \n-  if (INTVAL (amount) > 0\t    \n+  if (INTVAL (amount) > 0\n       && INTVAL (amount) < 5)\n     return \"rrum.w\\t%2, %0\"; /* Two bytes.  */\n \n-  if (INTVAL (amount) > 4\t    \n+  if (INTVAL (amount) > 4\n       && INTVAL (amount) < 9)\n     return \"rrum.w\\t#4, %0 { rrum.w\\t%Y2, %0 \"; /* Four bytes.  */\n "}, {"sha": "65d6ad66df228feb2c011230f8b160ba1205f38f", "filename": "gcc/config/msp430/msp430.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.h?ref=c6f709eccfd9a2332632e24143703dc8e8feea19", "patch": "@@ -407,3 +407,5 @@ typedef struct\n #undef  ASM_DECLARE_FUNCTION_NAME\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL) \\\n   msp430_start_function ((FILE), (NAME), (DECL))\n+\n+#define TARGET_HAS_NO_HW_DIVIDE (! TARGET_HWMULT)"}, {"sha": "c0c97dae6bd046e22e50fe003dff825db962e22f", "filename": "gcc/config/msp430/msp430.md", "status": "modified", "additions": 63, "deletions": 10, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.md?ref=c6f709eccfd9a2332632e24143703dc8e8feea19", "patch": "@@ -48,7 +48,7 @@\n \n    UNS_REFSYM_NEED_EXIT\n   ])\n-  \n+\n (include \"predicates.md\")\n (include \"constraints.md\")\n \n@@ -144,19 +144,20 @@\n (define_insn \"grow_and_swap\"\n   [(unspec_volatile [(const_int 0)] UNS_GROW_AND_SWAP)]\n   \"\"\n-  { if (TARGET_LARGE)\n-      return \"SUBA\\t#2, r1 \\n MOVX.A\\t2(r1), 0(r1)\";\n-    return \"SUB\\t#2, r1 \\n MOV.W\\t2(r1), 0(r1)\";\n-    }\n-  )\n+  \"*\n+    if (TARGET_LARGE)\n+      return \\\"SUBA\\t#2, r1 { MOVX.A\\t2(r1), 0(r1)\\\";\n+    return \\\"SUB\\t#2, r1 { MOV.W\\t2(r1), 0(r1)\\\";\n+  \"\n+)\n \n (define_insn \"swap_and_shrink\"\n   [(unspec_volatile [(const_int 0)] UNS_SWAP_AND_SHRINK)]\n   \"\"\n-  { return TARGET_LARGE\n-\t   ? \"MOVX.A\\t0(r1), 2(r1) \\n ADDA\\t#2, SP\"\n-\t   : \"MOV.W\\t0(r1), 2(r1) \\n ADD\\t#2, SP\";\n-  })\n+  \"* return TARGET_LARGE\n+\t   ? \\\"MOVX.A\\t0(r1), 2(r1) { ADDA\\t#2, SP\\\"\n+\t   : \\\"MOV.W\\t0(r1), 2(r1) { ADD\\t#2, SP\\\";\n+  \")\n \n ; I set LOAD_EXTEND_OP and WORD_REGISTER_OPERATIONS, but gcc puts in a\n ; zero_extend anyway.  Catch it here.\n@@ -1315,3 +1316,55 @@\n       return \\\"SUB.W\\t#0, %0 { AND.W\\t%2, %0\\\";\n   \"\n   )\n+\n+(define_insn \"mulhisi3\"\n+  [(set (match_operand:SI                          0 \"register_operand\" \"=r\")\n+\t(mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n+\t\t (sign_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))))]\n+  \"optimize > 2 && msp430_hwmult_enabled ()\"\n+  \"*\n+    if (msp430_is_f5_mcu ())\n+      return \\\"MOV.W %1, &0x04C2 { MOV.W %2, &0x04C8 { MOV.W &0x04CA, %L0 { MOV.W &0x04CC, %H0\\\";\n+    else\n+      return \\\"MOV.W %1, &0x0132 { MOV.W %2, &0x0138 { MOV.W &0x013A, %L0 { MOV.W &0x013C, %H0\\\";\n+  \"\n+)\n+\n+(define_insn \"umulhisi3\"\n+  [(set (match_operand:SI                          0 \"register_operand\" \"=r\")\n+\t(mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n+\t\t (zero_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))))]\n+  \"optimize > 2 && msp430_hwmult_enabled ()\"\n+  \"*\n+    if (msp430_is_f5_mcu ())\n+      return \\\"MOV.W %1, &0x04C0 { MOV.W %2, &0x04C8 { MOV.W &0x04CA, %L0 { MOV.W &0x04CC, %H0\\\";\n+    else\n+      return \\\"MOV.W %1, &0x0130 { MOV.W %2, &0x0138 { MOV.W &0x013A, %L0 { MOV.W &0x013C, %H0\\\";\n+  \"\n+)\n+\n+(define_insn \"mulsidi3\"\n+  [(set (match_operand:DI                          0 \"register_operand\" \"=r\")\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n+\t\t (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+  \"optimize > 2 && msp430_hwmult_enabled ()\"\n+  \"*\n+    if (msp430_is_f5_mcu ())\n+      return \\\"MOV.W %L1, &0x04D4 { MOV.W %H1, &0x04D6 { MOV.W %L2, &0x04E0 { MOV.W %H2, &0x04E2 { MOV.W &0x04E4, %A0 { MOV.W &0x04E6, %B0 { MOV.W &0x04E8, %C0 { MOV.W &0x04EA, %D0\\\";\n+    else\n+      return \\\"MOV.W %L1, &0x0144 { MOV.W %H1, &0x0146 { MOV.W %L2, &0x0150 { MOV.W %H2, &0x0152 { MOV.W &0x0154, %A0 { MOV.W &0x0156, %B0 { MOV.W &0x0158, %C0 { MOV.W &0x015A, %D0\\\";\n+  \"\n+)\n+\n+(define_insn \"umulsidi3\"\n+  [(set (match_operand:DI                          0 \"register_operand\" \"=r\")\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n+\t\t (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+  \"optimize > 2 && msp430_hwmult_enabled ()\"\n+  \"*\n+    if (msp430_is_f5_mcu ())\n+      return \\\"MOV.W %L1, &0x04D0 { MOV.W %H1, &0x04D2 { MOV.W %L2, &0x04E0 { MOV.W %H2, &0x04E2 { MOV.W &0x04E4, %A0 { MOV.W &0x04E6, %B0 { MOV.W &0x04E8, %C0 { MOV.W &0x04EA, %D0\\\";\n+    else\n+      return \\\"MOV.W %L1, &0x0140 { MOV.W %H1, &0x0141 { MOV.W %L2, &0x0150 { MOV.W %H2, &0x0152 { MOV.W &0x0154, %A0 { MOV.W &0x0156, %B0 { MOV.W &0x0158, %C0 { MOV.W &0x015A, %D0\\\";\n+  \"\n+)"}, {"sha": "5a447c0d2b051fc3ee98169304576867c289dc31", "filename": "gcc/config/msp430/msp430.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt?ref=c6f709eccfd9a2332632e24143703dc8e8feea19", "patch": "@@ -7,7 +7,7 @@ Target Mask(ASM_HEX)\n Force assembly output to always use hex constants\n \n mmcu=\n-Target Joined RejectNegative Var(target_mcu)\n+Target ToLower Joined RejectNegative Var(target_mcu)\n Specify the MCU to build for.\n \n mcpu=\n@@ -32,3 +32,7 @@ Target Undocumented Mask(OPT_SPACE)\n minrt\n Target Report Mask(MINRT) RejectNegative\n Use a minimum runtime (no static initializers or ctors) for memory-constrained devices.\n+\n+mhwmult\n+Target Report Var(ENABLE_HWMULT, 1) Init(1)\n+Enable hardware multiply (except in interrupt routines)"}, {"sha": "74a3c529f6bff6c28b4745861865365cd92827ed", "filename": "gcc/config/msp430/t-msp430", "status": "modified", "additions": 226, "deletions": 16, "changes": 242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Fmsp430%2Ft-msp430", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Fmsp430%2Ft-msp430", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Ft-msp430?ref=c6f709eccfd9a2332632e24143703dc8e8feea19", "patch": "@@ -20,26 +20,236 @@\n \n # Enable multilibs:\n \n-MULTILIB_OPTIONS    = mcpu=msp430x mlarge\n-MULTILIB_DIRNAMES   = 430x large\n-\n-# Match msp430X, msp430xv2 and msp430Xv2 with msp430x.\n-MULTILIB_MATCHES    = mcpu?msp430x=mcpu?msp430X\n-MULTILIB_MATCHES   += mcpu?msp430x=mcpu?msp430xv2\n-MULTILIB_MATCHES   += mcpu?msp430x=mcpu?msp430Xv2\n-MULTILIB_MATCHES   += mcpu?msp430x=mmcu?msp430x\n-MULTILIB_MATCHES   += mcpu?msp430x=mmcu?msp430X\n-MULTILIB_MATCHES   += mcpu?msp430x=mmcu?msp430xv2\n-MULTILIB_MATCHES   += mcpu?msp430x=mmcu?msp430Xv2\n-MULTILIB_MATCHES   += mcpu?msp430x=mcpu?430x\n-MULTILIB_MATCHES   += mcpu?msp430x=mcpu?430X\n-MULTILIB_MATCHES   += mcpu?msp430x=mcpu?430xv2\n-MULTILIB_MATCHES   += mcpu?msp430x=mcpu?430Xv2\n+MULTILIB_OPTIONS    = mcpu=msp430 mlarge\n+MULTILIB_DIRNAMES   = 430 large\n+\n+# Match -mcpu=430\n+MULTILIB_MATCHES    = mcpu?msp430=mcpu?430\n+\n+# Match the known 430 ISA mcu names.\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430afe221\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430afe222\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430afe223\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430afe231\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430afe232\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430afe233\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430afe251\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430afe252\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430afe253\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c091\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c092\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c111\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c1111\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c112\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c1121\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c1331\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c1351\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c311s\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c312\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c313\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c314\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c315\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c323\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c325\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c336\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c337\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c412\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430c413\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430e112\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430e313\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430e315\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430e325\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430e337\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f110\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f1101\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f1101a\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f1111\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f1111a\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f112\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f1121\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f1121a\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f1122\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f1132\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f122\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f1222\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f123\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f1232\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f133\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f135\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f147\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f1471\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f148\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f1481\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f149\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f1491\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f155\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f156\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f157\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f1610\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f1611\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f1612\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f167\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f168\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f169\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2001\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2002\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2003\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2011\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2012\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2013\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2101\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2111\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2112\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2121\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2122\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2131\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2132\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2232\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2234\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2252\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2254\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2272\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2274\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f233\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2330\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f235\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2350\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2370\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2410\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f247\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2471\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f248\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2481\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f249\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f2491\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f412\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f413\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f4132\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f415\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f4152\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f417\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f423\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f423a\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f425\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f4250\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f425a\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f4260\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f427\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f4270\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f427a\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f435\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f4351\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f436\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f4361\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f437\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f4371\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f438\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f439\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f447\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f448\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f4481\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f449\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f4491\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f477\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f478\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f4783\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f4784\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f479\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f4793\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430f4794\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fe423\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fe4232\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fe423a\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fe4242\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fe425\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fe4252\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fe425a\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fe427\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fe4272\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fe427a\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fg4250\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fg4260\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fg4270\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fg437\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fg438\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fg439\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fg477\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fg478\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fg479\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fw423\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fw425\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fw427\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fw428\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430fw429\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2001\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2101\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2102\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2111\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2112\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2113\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2121\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2131\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2132\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2152\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2153\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2201\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2202\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2203\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2210\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2211\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2212\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2213\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2221\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2230\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2231\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2232\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2233\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2252\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2253\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2302\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2303\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2312\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2313\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2332\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2333\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2352\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2353\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2402\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2403\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2412\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2413\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2432\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2433\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2444\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2452\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2453\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2513\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2533\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2544\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2553\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2744\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2755\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2855\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430g2955\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430i2020\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430i2021\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430i2030\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430i2031\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430i2040\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430i2041\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430l092\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430p112\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430p313\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430p315\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430p315s\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430p325\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430p337\t\n+MULTILIB_MATCHES += mcpu?msp430=mmcu?msp430tch5e\t\n \n # Add additional MCU matches like this:\n # MULTILIB_MATCHES += mcpu?msp430x=mmcu?xxxxxxxxxx\n \n-MULTILIB_EXCEPTIONS = mlarge\n+MULTILIB_EXCEPTIONS = mcpu=msp430/mlarge\n \n MULTILIB_EXTRA_OPTS =\n "}, {"sha": "f794d7cb13dad235f8eeb35358d22eee6ee1bfb6", "filename": "gcc/config/rl78/rl78-expand.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Frl78%2Frl78-expand.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Frl78%2Frl78-expand.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78-expand.md?ref=c6f709eccfd9a2332632e24143703dc8e8feea19", "patch": "@@ -237,9 +237,9 @@\n )\n \n (define_expand \"ashlsi3\"\n-  [(parallel [(set (match_operand:SI               0 \"nonimmediate_operand\")\n-\t(ashift:SI (match_operand:SI  1 \"nonimmediate_operand\")\n-\t\t      (match_operand:SI 2 \"nonmemory_operand\")))\n+  [(parallel [(set (match_operand:SI            0 \"nonimmediate_operand\")\n+\t\t   (ashift:SI (match_operand:SI 1 \"nonimmediate_operand\")\n+\t\t\t      (match_operand:SI 2 \"nonmemory_operand\")))\n \t      (clobber (reg:HI X_REG))])\n    ]\n   \"\""}, {"sha": "27ff60fa9324fdf47ea605a348954eeb34f85834", "filename": "gcc/config/rl78/rl78-real.md", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Frl78%2Frl78-real.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Frl78%2Frl78-real.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78-real.md?ref=c6f709eccfd9a2332632e24143703dc8e8feea19", "patch": "@@ -127,9 +127,9 @@\n )\n \n (define_insn \"*addqihi3a_real\"\n-  [(set (match_operand:HI          0 \"register_operand\"  \"=r\")\n-\t(plus:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\"  \"%r\"))\n-\t\t (match_operand:HI 2 \"register_operand\" \"r\")))\n+  [(set (match_operand:HI                          0 \"register_operand\" \"=r\")\n+\t(plus:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\"  \"r\"))\n+\t\t (match_operand:HI                 2 \"register_operand\"  \"0\")))\n    ]\n   \"rl78_real_insns_ok ()\"\n   \"add\\t%q0, %q1 \\;addc\\t%Q0, #0\"\n@@ -411,8 +411,8 @@\n (define_insn \"*cbranchsi4_real_signed\"\n   [(set (pc) (if_then_else\n \t      (match_operator 0 \"rl78_cmp_operator_signed\"\n-\t\t\t      [(match_operand:SI 1 \"nonimmediate_operand\" \"vU,vU,vU\")\n-\t\t\t       (match_operand:SI 2 \"nonmemory_operand\" \"ISsi,i,v\")])\n+\t\t\t      [(match_operand:SI 1 \"general_operand\"   \"vU,vU,vU,i,i\")\n+\t\t\t       (match_operand:SI 2 \"nonmemory_operand\" \"ISsi,i,v,S,v\")])\n               (label_ref (match_operand 3 \"\" \"\"))\n \t      (pc)))\n    (clobber (reg:HI AX_REG))\n@@ -421,7 +421,9 @@\n   \"@\n    movw ax,%H1 \\;cmpw  ax, %H2 \\;xor1 CY,a.7\\;not1 CY\\;      movw ax,%h1 \\;sknz \\;cmpw  ax, %h2 \\;sk%C0 \\;br\\t!!%3\n    movw ax,%H1 \\;cmpw  ax, %H2 \\;xor1 CY,a.7\\;               movw ax,%h1 \\;sknz \\;cmpw  ax, %h2 \\;sk%C0 \\;br\\t!!%3\n-   movw ax,%H1 \\;cmpw  ax, %H2 \\;xor1 CY,a.7\\;xor1 CY,%E2.7\\;movw ax,%h1 \\;sknz \\;cmpw  ax, %h2 \\;sk%C0 \\;br\\t!!%3\"\n+   movw ax,%H1 \\;cmpw  ax, %H2 \\;xor1 CY,a.7\\;xor1 CY,%E2.7\\;movw ax,%h1 \\;sknz \\;cmpw  ax, %h2 \\;sk%C0 \\;br\\t!!%3\n+   movw ax, %H1\\; cmpw  ax, %H2\\; xor1 CY, a.7\\; not1 CY\\; movw ax, %h1 \\;sknz\\; cmpw  ax, %h2 \\;sk%0 \\;br\\t!!%3\n+   movw ax, %H1\\; cmpw  ax, %H2\\; xor1 CY, a.7\\; movw ax, %h1\\; sknz\\; cmpw ax, %h2\\; sk%0\\; br\\t!!%3\"\n   )\n \n (define_insn \"*cbranchsi4_real\"\n@@ -549,3 +551,11 @@\n   [(set (reg:QI A_REG) (and:QI (reg:QI A_REG) (match_dup 1)))]\n   )\n \n+(define_insn \"*negandhi3_real\"\n+  [(set (match_operand:HI                 0 \"register_operand\"  \"=A\")\n+\t(and:HI (neg:HI (match_operand:HI 1 \"register_operand\"  \"0\"))\n+\t\t(match_operand:HI         2 \"immediate_operand\" \"n\")))\n+   ]\n+  \"rl78_real_insns_ok ()\"\n+  \"xor a, #0xff @ xch a, x @ xor a, #0xff @ xch a, x @ addw ax, #1 @ and a, %Q2 @ xch a, x @ and a, %q2 @ xch a, x\"\n+)"}, {"sha": "1db37512f0e64314b262a5371fddebdb416833ac", "filename": "gcc/config/rl78/rl78-virt.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Frl78%2Frl78-virt.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Frl78%2Frl78-virt.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78-virt.md?ref=c6f709eccfd9a2332632e24143703dc8e8feea19", "patch": "@@ -405,3 +405,12 @@\n    ]\n   \"rl78_setup_peep_movhi (operands);\"\n   )\n+\n+(define_insn \"*negandhi3_virt\"\n+  [(set (match_operand:HI                 0 \"register_operand\" \"=v\")\n+\t(and:HI (neg:HI (match_operand:HI 1 \"register_operand\"  \"0\"))\n+ \t\t(match_operand:HI         2 \"immediate_operand\" \"n\")))\n+   ]\n+  \"rl78_virt_insns_ok ()\"\n+  \"v.nand\\t%0, %1, %2\"\n+)"}, {"sha": "ecdfc15b599129a7fdd7cdcdc86e4468b8374145", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=c6f709eccfd9a2332632e24143703dc8e8feea19", "patch": "@@ -2625,7 +2625,7 @@\n (define_insn \"movdi\"\n   [(set:DI (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t   (match_operand:DI 1 \"general_operand\"      \"rmi\"))]\n-  \"TARGET_ENABLE_LRA || 1\"\n+  \"TARGET_ENABLE_LRA\"\n   { return rx_gen_move_template (operands, false); }\n   [(set_attr \"length\" \"16\")\n    (set_attr \"timings\" \"22\")]\n@@ -2634,7 +2634,7 @@\n (define_insn \"movdf\"\n   [(set:DF (match_operand:DF 0 \"nonimmediate_operand\" \"=rm\")\n \t   (match_operand:DF 1 \"general_operand\"      \"rmi\"))]\n-  \"TARGET_ENABLE_LRA || 1\"\n+  \"TARGET_ENABLE_LRA\"\n   { return rx_gen_move_template (operands, false); }\n   [(set_attr \"length\" \"16\")\n    (set_attr \"timings\" \"22\")]"}, {"sha": "4a5caa38cbdf97c90b8e96580c4153f2d89aac58", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f709eccfd9a2332632e24143703dc8e8feea19/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c6f709eccfd9a2332632e24143703dc8e8feea19", "patch": "@@ -18167,18 +18167,25 @@ post- fixed with @code{__}.  This in turn will be used by the\n @code{msp430.h} header file to select an MCU specific supplimentary\n header file.\n \n-In addition two scripts will be added to the linker command line:\n-@code{memory.ld} and @code{peripherals.ld}, with a search path based\n-upon the MCU name.\n+The option also sets the ISA to use.  If the MCU name is one that is\n+known to only support the 430 ISA then that is selected, otherwise the\n+430X ISA is selected.  A generic MCU name of @code{msp430} can also be\n+used to select the 430 ISA.  Similarly the generic @code{msp430x} MCU\n+name will select the 430X ISA.\n+\n+In addition an MCU specific linker script will be added to the linker\n+command line.  The script's name is the name of the MCU with\n+@code{.ld} appended.  Thus specifying @option{-mmcu=xxx} on the gcc\n+command line will define the C preprocessor symbol @code{__XXX__} and\n+cause the linker to search for a script called @file{xxx.ld}.\n \n This option is also passed on to the assembler.\n \n @item -mcpu=\n @opindex -mcpu=\n-Specific the ISA to use.  Accepted values are @code{msp430},\n-@code{msp430x} and @code{msp430xv2}.  This option is needed in order\n-to ensure that the correct instructions are generated and that the\n-correct libraries are linked in.\n+Specifies the ISA to use.  Accepted values are @code{msp430},\n+@code{msp430x} and @code{msp430xv2}.  This option is deprecated.  The\n+@option{-mmcu=} option should be used to select the ISA.\n \n @item -msim\n @opindex msim"}]}