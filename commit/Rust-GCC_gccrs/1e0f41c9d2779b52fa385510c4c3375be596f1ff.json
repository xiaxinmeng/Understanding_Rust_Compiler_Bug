{"sha": "1e0f41c9d2779b52fa385510c4c3375be596f1ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUwZjQxYzlkMjc3OWI1MmZhMzg1NTEwYzRjMzM3NWJlNTk2ZjFmZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-01-30T11:36:05Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-01-30T11:36:05Z"}, "message": "alloc-pool.c: Include hashtab.h\n\n\n\t* alloc-pool.c: Include hashtab.h\n\t(alloc_pool_descriptor): New structure\n\t(alloc_pool_hash): New global variable.\n\t(hash_descriptor, eq_descriptor, alloc_pool_descriptor): New.\n\t(create_alloc_pool): Update statistics.\n\t(free_alloc_pool): Likewise.\n\t(pool_alloc): Likewise.\n\t(output_info): New structure\n\t(print_statistics, dump_alloc_pool_statistics): New function.\n\t* alloc-pool.h (alloc_pool_def): Turn name to be constant.\n\t(dump_alloc_pool_statistics): Declare.\n\t* toplev.c (finalize):  Dump statistics.\n\nFrom-SVN: r76951", "tree": {"sha": "a35d691168463d8f2f27f6683446c3a04b212411", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a35d691168463d8f2f27f6683446c3a04b212411"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e0f41c9d2779b52fa385510c4c3375be596f1ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e0f41c9d2779b52fa385510c4c3375be596f1ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e0f41c9d2779b52fa385510c4c3375be596f1ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e0f41c9d2779b52fa385510c4c3375be596f1ff/comments", "author": null, "committer": null, "parents": [{"sha": "048b0d2ef95ac9432d33e780f0e6d3337e966244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048b0d2ef95ac9432d33e780f0e6d3337e966244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/048b0d2ef95ac9432d33e780f0e6d3337e966244"}], "stats": {"total": 144, "additions": 139, "deletions": 5}, "files": [{"sha": "55bc44157e125262eaef5e55250d56ed28f1d924", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0f41c9d2779b52fa385510c4c3375be596f1ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0f41c9d2779b52fa385510c4c3375be596f1ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e0f41c9d2779b52fa385510c4c3375be596f1ff", "patch": "@@ -1,5 +1,18 @@\n 2004-01-30  Jan Hubicka  <jh@suse.cz>\n \n+\t* alloc-pool.c: Include hashtab.h\n+\t(alloc_pool_descriptor): New structure\n+\t(alloc_pool_hash): New global variable.\n+\t(hash_descriptor, eq_descriptor, alloc_pool_descriptor): New.\n+\t(create_alloc_pool): Update statistics.\n+\t(free_alloc_pool): Likewise.\n+\t(pool_alloc): Likewise.\n+\t(output_info): New structure\n+\t(print_statistics, dump_alloc_pool_statistics): New function.\n+\t* alloc-pool.h (alloc_pool_def): Turn name to be constant.\n+\t(dump_alloc_pool_statistics): Declare.\n+\t* toplev.c (finalize):  Dump statistics.\n+\n \t* reload.c (secondary_memlocs_elim_used): New static variable.\n \t(get_secondary_mem): Update it.\n \t(find_reloads): Use it."}, {"sha": "8058c52f26b7b26bfc11f139dd9c75d2483d802e", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0f41c9d2779b52fa385510c4c3375be596f1ff/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0f41c9d2779b52fa385510c4c3375be596f1ff/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1e0f41c9d2779b52fa385510c4c3375be596f1ff", "patch": "@@ -1678,7 +1678,7 @@ unroll.o : unroll.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) insn-co\n    function.h $(INTEGRATE_H) $(REGS_H) $(RECOG_H) flags.h $(EXPR_H) $(LOOP_H) toplev.h \\\n    hard-reg-set.h varray.h $(BASIC_BLOCK_H) $(TM_P_H) $(PREDICT_H) $(PARAMS_H) \\\n    cfgloop.h\n-alloc-pool.o : alloc-pool.c $(CONFIG_H) $(SYSTEM_H) alloc-pool.h\n+alloc-pool.o : alloc-pool.c $(CONFIG_H) $(SYSTEM_H) alloc-pool.h $(HASHTAB_H)\n flow.o : flow.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    flags.h insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h \\\n    $(RECOG_H) function.h except.h $(EXPR_H) $(GGC_H) $(TM_P_H)"}, {"sha": "6a2fa65f4eafdb5ce8df83d7cd414e0fa3965933", "filename": "gcc/alloc-pool.c", "status": "modified", "additions": 122, "deletions": 3, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0f41c9d2779b52fa385510c4c3375be596f1ff/gcc%2Falloc-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0f41c9d2779b52fa385510c4c3375be596f1ff/gcc%2Falloc-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.c?ref=1e0f41c9d2779b52fa385510c4c3375be596f1ff", "patch": "@@ -23,6 +23,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"config.h\"\n #include \"system.h\"\n #include \"alloc-pool.h\"\n+#include \"hashtab.h\"\n \n /* Redefine abort to report an internal error w/o coredump, and\n    reporting the location of the error in the source file.  This logic\n@@ -72,6 +73,56 @@ typedef struct allocation_object_def\n static ALLOC_POOL_ID_TYPE last_id;\n #endif\n \n+#ifdef GATHER_STATISTICS\n+\n+/* Store infromation about each particular alloc_pool.  */\n+struct alloc_pool_descriptor\n+{\n+  const char *name;\n+  int allocated;\n+  int created;\n+  int peak;\n+  int current;\n+};\n+\n+/* Hashtable mapping alloc_pool names to descriptors.  */\n+static htab_t alloc_pool_hash;\n+\n+/* Hashtable helpers.  */\n+static hashval_t\n+hash_descriptor (const void *p)\n+{\n+  const struct alloc_pool_descriptor *d = p;\n+  return htab_hash_pointer (d->name);\n+}\n+static int\n+eq_descriptor (const void *p1, const void *p2)\n+{\n+  const struct alloc_pool_descriptor *d = p1;\n+  return d->name == p2;\n+}\n+\n+/* For given name, return descriptor, create new if needed.  */\n+static struct alloc_pool_descriptor *\n+alloc_pool_descriptor (const char *name)\n+{\n+  struct alloc_pool_descriptor **slot;\n+\n+  if (!alloc_pool_hash)\n+    alloc_pool_hash = htab_create (10, hash_descriptor, eq_descriptor, NULL);\n+\n+  slot = (struct alloc_pool_descriptor **)\n+    htab_find_slot_with_hash (alloc_pool_hash, name,\n+\t\t    \t      htab_hash_pointer (name),\n+\t\t\t      1);\n+  if (*slot)\n+    return *slot;\n+  *slot = xcalloc (sizeof (**slot), 1);\n+  (*slot)->name = name;\n+  return *slot;\n+}\n+#endif\n+\n /* Create a pool of things of size SIZE, with NUM in each block we\n    allocate.  */\n \n@@ -80,6 +131,9 @@ create_alloc_pool (const char *name, size_t size, size_t num)\n {\n   alloc_pool pool;\n   size_t pool_size, header_size;\n+#ifdef GATHER_STATISTICS\n+  struct alloc_pool_descriptor *desc;\n+#endif\n \n   if (!name)\n     abort ();\n@@ -107,7 +161,11 @@ create_alloc_pool (const char *name, size_t size, size_t num)\n   pool = xmalloc (pool_size);\n \n   /* Now init the various pieces of our pool structure.  */\n-  pool->name = xstrdup (name);\n+  pool->name = /*xstrdup (name)*/name;\n+#ifdef GATHER_STATISTICS\n+  desc = alloc_pool_descriptor (name);\n+  desc->created++;\n+#endif\n   pool->elt_size = size;\n   pool->elts_per_block = num;\n \n@@ -139,6 +197,9 @@ void\n free_alloc_pool (alloc_pool pool)\n {\n   alloc_pool_list block, next_block;\n+#ifdef GATHER_STATISTICS\n+  struct alloc_pool_descriptor *desc = alloc_pool_descriptor (pool->name);\n+#endif\n \n #ifdef ENABLE_CHECKING\n   if (!pool)\n@@ -150,12 +211,14 @@ free_alloc_pool (alloc_pool pool)\n     {\n       next_block = block->next;\n       free (block);\n+#ifdef GATHER_STATISTICS\n+      desc->current -= pool->block_size;\n+#endif\n     }\n-  /* Lastly, free the pool and the name.  */\n-  free (pool->name);\n #ifdef ENABLE_CHECKING\n   memset (pool, 0xaf, sizeof (*pool));\n #endif\n+  /* Lastly, free the pool.  */\n   free (pool);\n }\n \n@@ -165,6 +228,11 @@ pool_alloc (alloc_pool pool)\n {\n   alloc_pool_list header;\n   char *block;\n+#ifdef GATHER_STATISTICS\n+  struct alloc_pool_descriptor *desc = alloc_pool_descriptor (pool->name);\n+\n+  desc->allocated+=pool->elt_size;\n+#endif\n \n #ifdef ENABLE_CHECKING\n   if (!pool)\n@@ -181,6 +249,11 @@ pool_alloc (alloc_pool pool)\n       block = xmalloc (pool->block_size);\n       block_header = (alloc_pool_list) block;\n       block += align_eight (sizeof (struct alloc_pool_list_def));\n+#ifdef GATHER_STATISTICS\n+      desc->current += pool->block_size;\n+      if (desc->peak < desc->current)\n+\tdesc->peak = desc->current;\n+#endif\n \n       /* Throw it on the block list.  */\n       block_header->next = pool->block_list;\n@@ -246,3 +319,49 @@ pool_free (alloc_pool pool, void *ptr)\n   pool->free_list = header;\n   pool->elts_free++;\n }\n+/* Output per-alloc_pool statistics.  */\n+#ifdef GATHER_STATISTICS\n+\n+/* Used to accumulate statistics about alloc_pool sizes.  */\n+struct output_info\n+{\n+  int count;\n+  int size;\n+};\n+\n+/* Called via htab_traverse.  Output alloc_pool descriptor pointed out by SLOT\n+   and update statistics.  */\n+static int\n+print_statistics (void **slot, void *b)\n+{\n+  struct alloc_pool_descriptor *d = (struct alloc_pool_descriptor *) *slot;\n+  struct output_info *i = (struct output_info *) b;\n+\n+  if (d->allocated)\n+    {\n+      fprintf (stderr, \"%-21s %6d %10d %10d %10d\\n\", d->name,\n+\t       d->created, d->allocated, d->peak, d->current);\n+      i->size += d->allocated;\n+      i->count += d->created;\n+    }\n+  return 1;\n+}\n+#endif\n+\n+/* Output per-alloc_pool memory usage statistics.  */\n+void dump_alloc_pool_statistics (void)\n+{\n+#ifdef GATHER_STATISTICS\n+  struct output_info info;\n+\n+  fprintf (stderr, \"\\nAlloc-pool Kind        Pools  Allocated      Peak        Leak\\n\");\n+  fprintf (stderr, \"-------------------------------------------------------------\\n\");\n+  info.count = 0;\n+  info.size = 0;\n+  htab_traverse (alloc_pool_hash, print_statistics, &info);\n+  fprintf (stderr, \"-------------------------------------------------------------\\n\");\n+  fprintf (stderr, \"%-20s %7d %10d\\n\",\n+\t   \"Total\", info.count, info.size);\n+  fprintf (stderr, \"-------------------------------------------------------------\\n\");\n+#endif\n+}"}, {"sha": "6364fbcf1aeb590d4cef4798525bd733ce1ad302", "filename": "gcc/alloc-pool.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0f41c9d2779b52fa385510c4c3375be596f1ff/gcc%2Falloc-pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0f41c9d2779b52fa385510c4c3375be596f1ff/gcc%2Falloc-pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.h?ref=1e0f41c9d2779b52fa385510c4c3375be596f1ff", "patch": "@@ -32,7 +32,7 @@ typedef struct alloc_pool_list_def\n \n typedef struct alloc_pool_def\n {\n-  char *name;\n+  const char *name;\n #ifdef ENABLE_CHECKING\n   ALLOC_POOL_ID_TYPE id;\n #endif\n@@ -51,4 +51,5 @@ extern alloc_pool create_alloc_pool (const char *, size_t, size_t);\n extern void free_alloc_pool (alloc_pool);\n extern void *pool_alloc (alloc_pool);\n extern void pool_free (alloc_pool, void *);\n+extern void dump_alloc_pool_statistics (void);\n #endif"}, {"sha": "d1e12fa068fab2711cdade5f873771567742e8ed", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0f41c9d2779b52fa385510c4c3375be596f1ff/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0f41c9d2779b52fa385510c4c3375be596f1ff/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=1e0f41c9d2779b52fa385510c4c3375be596f1ff", "patch": "@@ -4599,6 +4599,7 @@ finalize (void)\n       dump_tree_statistics ();\n       dump_rtx_statistics ();\n       dump_varray_statistics ();\n+      dump_alloc_pool_statistics ();\n     }\n \n   /* Free up memory for the benefit of leak detectors.  */"}]}