{"sha": "5ac29058f01502c407a7b77ec57a08c96941f796", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFjMjkwNThmMDE1MDJjNDA3YTdiNzdlYzU3YTA4Yzk2OTQxZjc5Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-11-09T21:56:59Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-11-09T21:56:59Z"}, "message": "sync/atomic, runtime/internal/atomic: don't assume reads from 0 fail\n    \n    For a misaligned address force a panic rather than assuming that reading\n    from the address 0 will cause one.\n    \n    Reviewed-on: https://go-review.googlesource.com/69850\n\nFrom-SVN: r254610", "tree": {"sha": "86e5c9abbcc0655073df1ceafdd557cfeca4d68a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86e5c9abbcc0655073df1ceafdd557cfeca4d68a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ac29058f01502c407a7b77ec57a08c96941f796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac29058f01502c407a7b77ec57a08c96941f796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ac29058f01502c407a7b77ec57a08c96941f796", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac29058f01502c407a7b77ec57a08c96941f796/comments", "author": null, "committer": null, "parents": [{"sha": "d60edaba4fc4e75824f27291ff448bf48118b3f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d60edaba4fc4e75824f27291ff448bf48118b3f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d60edaba4fc4e75824f27291ff448bf48118b3f4"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "0e5a718c92bdd1cacc578bf24791d2cb3ee479ca", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac29058f01502c407a7b77ec57a08c96941f796/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac29058f01502c407a7b77ec57a08c96941f796/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=5ac29058f01502c407a7b77ec57a08c96941f796", "patch": "@@ -1,4 +1,4 @@\n-7fd845bd9414c348bfa30bd24aa0bb8e4eebf83a\n+b03c5dc36d6d0c0d3bef434936e8b924d253595b\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "24820f22a4200f0b601e19ea50c20179883d6585", "filename": "libgo/go/runtime/internal/atomic/atomic.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac29058f01502c407a7b77ec57a08c96941f796/libgo%2Fgo%2Fruntime%2Finternal%2Fatomic%2Fatomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac29058f01502c407a7b77ec57a08c96941f796/libgo%2Fgo%2Fruntime%2Finternal%2Fatomic%2Fatomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Finternal%2Fatomic%2Fatomic.c?ref=5ac29058f01502c407a7b77ec57a08c96941f796", "patch": "@@ -34,7 +34,7 @@ uint64_t\n Load64 (uint64_t *ptr)\n {\n   if (((uintptr_t) ptr & 7) != 0)\n-    ptr = NULL;\n+    panicmem ();\n   return __atomic_load_n (ptr, __ATOMIC_ACQUIRE);\n }\n \n@@ -66,7 +66,7 @@ int64_t\n Loadint64 (int64_t *ptr)\n {\n   if (((uintptr_t) ptr & 7) != 0)\n-    ptr = NULL;\n+    panicmem ();\n   return __atomic_load_n (ptr, __ATOMIC_ACQUIRE);\n }\n \n@@ -88,7 +88,7 @@ uint64_t\n Xadd64 (uint64_t *ptr, int64_t delta)\n {\n   if (((uintptr_t) ptr & 7) != 0)\n-    ptr = NULL;\n+    panicmem ();\n   return __atomic_add_fetch (ptr, (uint64_t) delta, __ATOMIC_SEQ_CST);\n }\n \n@@ -110,7 +110,7 @@ int64_t\n Xaddint64 (int64_t *ptr, int64_t delta)\n {\n   if (((uintptr_t) ptr & 7) != 0)\n-    ptr = NULL;\n+    panicmem ();\n   return __atomic_add_fetch (ptr, delta, __ATOMIC_SEQ_CST);\n }\n \n@@ -132,7 +132,7 @@ uint64_t\n Xchg64 (uint64_t *ptr, uint64_t new)\n {\n   if (((uintptr_t) ptr & 7) != 0)\n-    ptr = NULL;\n+    panicmem ();\n   return __atomic_exchange_n (ptr, new, __ATOMIC_SEQ_CST);\n }\n \n@@ -184,7 +184,7 @@ _Bool\n Cas64 (uint64_t *ptr, uint64_t old, uint64_t new)\n {\n   if (((uintptr_t) ptr & 7) != 0)\n-    ptr = NULL;\n+    panicmem ();\n   return __atomic_compare_exchange_n (ptr, &old, new, false, __ATOMIC_SEQ_CST, __ATOMIC_RELAXED);\n }\n \n@@ -226,7 +226,7 @@ void\n Store64 (uint64_t *ptr, uint64_t val)\n {\n   if (((uintptr_t) ptr & 7) != 0)\n-    ptr = NULL;\n+    panicmem ();\n   __atomic_store_n (ptr, val, __ATOMIC_SEQ_CST);\n }\n "}, {"sha": "c39a58d0c4b22d75378058808ba4c72a6446b70b", "filename": "libgo/go/runtime/panic.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac29058f01502c407a7b77ec57a08c96941f796/libgo%2Fgo%2Fruntime%2Fpanic.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac29058f01502c407a7b77ec57a08c96941f796/libgo%2Fgo%2Fruntime%2Fpanic.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fpanic.go?ref=5ac29058f01502c407a7b77ec57a08c96941f796", "patch": "@@ -22,6 +22,7 @@ import (\n //go:linkname makefuncreturning runtime.makefuncreturning\n //go:linkname gorecover runtime.gorecover\n //go:linkname deferredrecover runtime.deferredrecover\n+//go:linkname panicmem runtime.panicmem\n // Temporary for C code to call:\n //go:linkname throw runtime.throw\n "}, {"sha": "32cbf03c5cf6335174d613d9231672fdb7e7ad29", "filename": "libgo/go/sync/atomic/atomic.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac29058f01502c407a7b77ec57a08c96941f796/libgo%2Fgo%2Fsync%2Fatomic%2Fatomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac29058f01502c407a7b77ec57a08c96941f796/libgo%2Fgo%2Fsync%2Fatomic%2Fatomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsync%2Fatomic%2Fatomic.c?ref=5ac29058f01502c407a7b77ec57a08c96941f796", "patch": "@@ -26,7 +26,7 @@ int64_t\n SwapInt64 (int64_t *addr, int64_t new)\n {\n   if (((uintptr_t) addr & 7) != 0)\n-    addr = NULL;\n+    panicmem ();\n   return __atomic_exchange_n (addr, new, __ATOMIC_SEQ_CST);\n }\n \n@@ -48,7 +48,7 @@ uint64_t\n SwapUint64 (uint64_t *addr, uint64_t new)\n {\n   if (((uintptr_t) addr & 7) != 0)\n-    addr = NULL;\n+    panicmem ();\n   return __atomic_exchange_n (addr, new, __ATOMIC_SEQ_CST);\n }\n \n@@ -215,7 +215,7 @@ LoadInt64 (int64_t *addr)\n   int64_t v;\n \n   if (((uintptr_t) addr & 7) != 0)\n-    addr = NULL;\n+    panicmem ();\n   v = *addr;\n   while (! __sync_bool_compare_and_swap (addr, v, v))\n     v = *addr;\n@@ -247,7 +247,7 @@ LoadUint64 (uint64_t *addr)\n   uint64_t v;\n \n   if (((uintptr_t) addr & 7) != 0)\n-    addr = NULL;\n+    panicmem ();\n   v = *addr;\n   while (! __sync_bool_compare_and_swap (addr, v, v))\n     v = *addr;\n@@ -308,7 +308,7 @@ StoreInt64 (int64_t *addr, int64_t val)\n   int64_t v;\n \n   if (((uintptr_t) addr & 7) != 0)\n-    addr = NULL;\n+    panicmem ();\n   v = *addr;\n   while (! __sync_bool_compare_and_swap (addr, v, val))\n     v = *addr;\n@@ -338,7 +338,7 @@ StoreUint64 (uint64_t *addr, uint64_t val)\n   uint64_t v;\n \n   if (((uintptr_t) addr & 7) != 0)\n-    addr = NULL;\n+    panicmem ();\n   v = *addr;\n   while (! __sync_bool_compare_and_swap (addr, v, val))\n     v = *addr;"}, {"sha": "39b5ef883bd57e497f4029d6e79f7556ac79017b", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac29058f01502c407a7b77ec57a08c96941f796/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac29058f01502c407a7b77ec57a08c96941f796/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=5ac29058f01502c407a7b77ec57a08c96941f796", "patch": "@@ -211,6 +211,8 @@ extern\tuint32\truntime_panicking(void)\n extern\tbool\truntime_isstarted;\n extern\tbool\truntime_isarchive;\n \n+extern\tvoid\tpanicmem(void) __asm__ (GOSYM_PREFIX \"runtime.panicmem\");\n+\n /*\n  * common functions and data\n  */"}]}