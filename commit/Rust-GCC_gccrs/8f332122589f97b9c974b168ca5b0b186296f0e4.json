{"sha": "8f332122589f97b9c974b168ca5b0b186296f0e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYzMzIxMjI1ODlmOTdiOWM5NzRiMTY4Y2E1YjBiMTg2Mjk2ZjBlNA==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2021-06-29T10:57:31Z"}, "committer": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2021-06-29T15:19:56Z"}, "message": "amdgcn: Add [us]mulsid3/muldi3 patterns\n\nThis patch improves 64-bit multiplication for AMD GCN: patterns for\nunsigned and signed 32x32->64 bit multiplication have been added, and\nalso 64x64->64 bit multiplication is now open-coded rather than calling\na library function (which may be a win for code size as well as speed:\nthe function calling sequence isn't particularly concise for GCN).\n\nThis version of the patch uses define_insn_and_split in order to keep\nmultiply operations together during RTL optimisations up to register\nallocation: this appears to produce more compact code via inspection on\nsmall test cases than the previous approach using an expander.\n\nThe DImode multiply implementation is lost from libgcc if we build it\nfor DImode/TImode rather than SImode/DImode, a change we make in a later\npatch in this series.\n\n2021-06-29  Julian Brown  <julian@codesourcery.com>\n\ngcc/\n\t* config/gcn/gcn.md (<su>mulsidi3, <su>mulsidi3_reg, <su>mulsidi3_imm,\n\tmuldi3): Add patterns.", "tree": {"sha": "f21af58f4219a55bd1d0b5c762f2d8831fd18990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f21af58f4219a55bd1d0b5c762f2d8831fd18990"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f332122589f97b9c974b168ca5b0b186296f0e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f332122589f97b9c974b168ca5b0b186296f0e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f332122589f97b9c974b168ca5b0b186296f0e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f332122589f97b9c974b168ca5b0b186296f0e4/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53b1d1691857a1d3e28566d05bb434fa555c4e8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b1d1691857a1d3e28566d05bb434fa555c4e8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53b1d1691857a1d3e28566d05bb434fa555c4e8a"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "82f7a468bcec496e9ca34dd5125dd156514c7d64", "filename": "gcc/config/gcn/gcn.md", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f332122589f97b9c974b168ca5b0b186296f0e4/gcc%2Fconfig%2Fgcn%2Fgcn.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f332122589f97b9c974b168ca5b0b186296f0e4/gcc%2Fconfig%2Fgcn%2Fgcn.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.md?ref=8f332122589f97b9c974b168ca5b0b186296f0e4", "patch": "@@ -1457,6 +1457,100 @@\n    (set_attr \"length\" \"4,8,8\")\n    (set_attr \"gcn_version\" \"gcn5,gcn5,*\")])\n \n+(define_expand \"<su>mulsidi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(mult:DI (any_extend:DI\n+\t\t   (match_operand:SI 1 \"register_operand\" \"\"))\n+\t\t (any_extend:DI\n+\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"\"))))]\n+  \"\"\n+{\n+  if (can_create_pseudo_p ()\n+      && !TARGET_GCN5\n+      && !gcn_inline_immediate_operand (operands[2], SImode))\n+    operands[2] = force_reg (SImode, operands[2]);\n+\n+  if (REG_P (operands[2]))\n+    emit_insn (gen_<su>mulsidi3_reg (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_<su>mulsidi3_imm (operands[0], operands[1], operands[2]));\n+\n+  DONE;\n+})\n+\n+(define_insn_and_split \"<su>mulsidi3_reg\"\n+  [(set (match_operand:DI 0 \"register_operand\"           \"=&Sg, &v\")\n+\t(mult:DI (any_extend:DI\n+\t\t   (match_operand:SI 1 \"register_operand\" \"%Sg,  v\"))\n+\t\t (any_extend:DI\n+\t\t   (match_operand:SI 2 \"register_operand\"  \"Sg,vSv\"))))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  {\n+    rtx dstlo = gen_lowpart (SImode, operands[0]);\n+    rtx dsthi = gen_highpart_mode (SImode, DImode, operands[0]);\n+    emit_insn (gen_mulsi3 (dstlo, operands[1], operands[2]));\n+    emit_insn (gen_<su>mulsi3_highpart (dsthi, operands[1], operands[2]));\n+    DONE;\n+  }\n+  [(set_attr \"gcn_version\" \"gcn5,*\")])\n+\n+(define_insn_and_split \"<su>mulsidi3_imm\"\n+  [(set (match_operand:DI 0 \"register_operand\"                \"=&Sg,&Sg,&v\")\n+\t(mult:DI (any_extend:DI\n+\t\t   (match_operand:SI 1 \"register_operand\"       \"Sg, Sg, v\"))\n+\t\t (match_operand:DI 2 \"gcn_32bit_immediate_operand\"\n+\t\t\t\t\t\t\t\t \"A,  B, A\")))]\n+  \"TARGET_GCN5 || gcn_inline_immediate_operand (operands[2], SImode)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+  {\n+    rtx dstlo = gen_lowpart (SImode, operands[0]);\n+    rtx dsthi = gen_highpart_mode (SImode, DImode, operands[0]);\n+    emit_insn (gen_mulsi3 (dstlo, operands[1], operands[2]));\n+    emit_insn (gen_<su>mulsi3_highpart (dsthi, operands[1], operands[2]));\n+    DONE;\n+  }\n+  [(set_attr \"gcn_version\" \"gcn5,gcn5,*\")])\n+\n+(define_insn_and_split \"muldi3\"\n+  [(set (match_operand:DI 0 \"register_operand\"         \"=&Sg,&Sg, &v,&v\")\n+\t(mult:DI (match_operand:DI 1 \"register_operand\" \"%Sg, Sg,  v, v\")\n+\t\t (match_operand:DI 2 \"nonmemory_operand\" \"Sg,  i,vSv, A\")))\n+   (clobber (match_scratch:SI 3 \"=&Sg,&Sg,&v,&v\"))\n+   (clobber (match_scratch:BI 4  \"=cs, cs, X, X\"))\n+   (clobber (match_scratch:DI 5   \"=X,  X,cV,cV\"))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  {\n+    rtx tmp = operands[3];\n+    rtx dsthi = gen_highpart_mode (SImode, DImode, operands[0]);\n+    rtx op1lo = gcn_operand_part (DImode, operands[1], 0);\n+    rtx op1hi = gcn_operand_part (DImode, operands[1], 1);\n+    rtx op2lo = gcn_operand_part (DImode, operands[2], 0);\n+    rtx op2hi = gcn_operand_part (DImode, operands[2], 1);\n+    emit_insn (gen_umulsidi3 (operands[0], op1lo, op2lo));\n+    emit_insn (gen_mulsi3 (tmp, op1lo, op2hi));\n+    rtx add = gen_rtx_SET (dsthi, gen_rtx_PLUS (SImode, dsthi, tmp));\n+    rtx clob1 = gen_rtx_CLOBBER (VOIDmode, operands[4]);\n+    rtx clob2 = gen_rtx_CLOBBER (VOIDmode, operands[5]);\n+    add = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (3, add, clob1, clob2));\n+    emit_insn (add);\n+    emit_insn (gen_mulsi3 (tmp, op1hi, op2lo));\n+    add = gen_rtx_SET (dsthi, gen_rtx_PLUS (SImode, dsthi, tmp));\n+    clob1 = gen_rtx_CLOBBER (VOIDmode, operands[4]);\n+    clob2 = gen_rtx_CLOBBER (VOIDmode, operands[5]);\n+    add = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (3, add, clob1, clob2));\n+    emit_insn (add);\n+    DONE;\n+  }\n+  [(set_attr \"gcn_version\" \"gcn5,gcn5,*,*\")])\n+\n (define_insn \"<u>mulhisi3\"\n   [(set (match_operand:SI 0 \"register_operand\"\t\t\t\"=v\")\n \t(mult:SI"}]}