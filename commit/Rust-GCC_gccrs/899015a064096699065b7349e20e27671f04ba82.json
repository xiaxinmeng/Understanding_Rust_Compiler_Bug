{"sha": "899015a064096699065b7349e20e27671f04ba82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk5MDE1YTA2NDA5NjY5OTA2NWI3MzQ5ZTIwZTI3NjcxZjA0YmE4Mg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2008-05-13T14:50:27Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2008-05-13T14:50:27Z"}, "message": "re PR preprocessor/22168 (#if #A == #B should have a diagnostic in ISO C mode)\n\nlibcpp\n\tPR preprocessor/22168:\n\t* include/cpplib.h (struct cpp_options) <objc>: Update\n\tdocumentation.\n\t* expr.c (eval_token): Warn for use of assertions.\n\t* directives.c (directive_diagnostics): Warn about extensions.\n\t(DEPRECATED): New define.\n\t(DIRECTIVE_TABLE): Use it.\ngcc\n\tPR preprocessor/22168:\n\t* doc/cpp.texi (Top): Update menu.\n\t(Alternatives to Wrapper #ifndef): New node.\n\t(Other Directives): Document deprecation.\n\t(Obsolete Features): Remove menu.\n\t(Assertions): Merge node into Obsolete Features.\n\t(Obsolete once-only headers): Move earlier; rename to Alternatives\n\tto Wrapper #ifndef.\n\t* doc/cppopts.texi: Update.\n\t* c.opt (Wdeprecated): Enable for C and ObjC.\n\t* doc/invoke.texi (Option Summary): Move -Wno-deprecated.\n\t(C++ Dialect Options): Move -Wno-deprecated from here to...\n\t(Warning Options): ... here.\ngcc/testsuite\n\tPR preprocessor/22168:\n\t* gcc.dg/pch/import-2.hs: Add -Wno-deprecated.\n\t* gcc.dg/pch/import-1.hs: Add -Wno-deprecated.\n\t* gcc.dg/pch/import-2.c: Add -Wno-deprecated.\n\t* gcc.dg/pch/import-1.c: Add -Wno-deprecated.\n\t* gcc.dg/cpp/import2.c: Add -Wno-deprecated.\n\t* gcc.dg/cpp/import1.c: Add -Wno-deprecated.\n\t* gcc.dg/cpp/trad/assert3.c: Add -Wno-deprecated.\n\t* gcc.dg/cpp/trad/assert2.c: Add -Wno-deprecated.\n\t* gcc.dg/cpp/trad/assert1.c: Add -Wno-deprecated.\n\t* gcc.dg/cpp/ident.c: Add -Wno-deprecated.\n\t* gcc.dg/cpp/ident-1.c: Add -Wno-deprecated.\n\t* gcc.dg/cpp/extratokens.c: Add -Wno-deprecated.\n\t* gcc.dg/cpp/assert3.c: Add -Wno-deprecated.\n\t* gcc.dg/cpp/assert2.c: Add -Wno-deprecated.\n\t* gcc.dg/cpp/assert1.c: Add -Wno-deprecated.\n\t* gcc.dg/cpp/assert4.c: Compile with -ansi and not -pedantic.  Add\n\t-Wno-deprecated.\n\t* gcc.dg/cpp/pr22168.c: New file.\n\t* gcc.dg/cpp/pr22168-2.c: New file.\n\nFrom-SVN: r135264", "tree": {"sha": "44ca24a87d3904ae6d7e037e670b57a496ed974c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44ca24a87d3904ae6d7e037e670b57a496ed974c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/899015a064096699065b7349e20e27671f04ba82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/899015a064096699065b7349e20e27671f04ba82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/899015a064096699065b7349e20e27671f04ba82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/899015a064096699065b7349e20e27671f04ba82/comments", "author": null, "committer": null, "parents": [{"sha": "7fe08989a31b91bf4c16475bd37dbf777309ecc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe08989a31b91bf4c16475bd37dbf777309ecc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fe08989a31b91bf4c16475bd37dbf777309ecc3"}], "stats": {"total": 286, "additions": 192, "deletions": 94}, "files": [{"sha": "3efb55118a10be85c4b2df3a3fa21d66e8cc498a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,3 +1,19 @@\n+2008-05-13  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR preprocessor/22168:\n+\t* doc/cpp.texi (Top): Update menu.\n+\t(Alternatives to Wrapper #ifndef): New node.\n+\t(Other Directives): Document deprecation.\n+\t(Obsolete Features): Remove menu.\n+\t(Assertions): Merge node into Obsolete Features.\n+\t(Obsolete once-only headers): Move earlier; rename to Alternatives\n+\tto Wrapper #ifndef.\n+\t* doc/cppopts.texi: Update.\n+\t* c.opt (Wdeprecated): Enable for C and ObjC.\n+\t* doc/invoke.texi (Option Summary): Move -Wno-deprecated.\n+\t(C++ Dialect Options): Move -Wno-deprecated from here to...\n+\t(Warning Options): ... here.\n+\n 2008-05-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/36227"}, {"sha": "09d5187bd2fef267912689b7f35a9295259f3706", "filename": "gcc/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -176,7 +176,7 @@ C ObjC Var(warn_declaration_after_statement) Warning\n Warn when a declaration is found after a statement\n \n Wdeprecated\n-C++ ObjC++ Var(warn_deprecated) Init(1) Warning\n+C C++ ObjC ObjC++ Var(warn_deprecated) Init(1) Warning\n Warn about deprecated compiler features\n \n Wdiv-by-zero"}, {"sha": "9e2f19ad0b56a019ec85d655e8f2745b5a5041cf", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 44, "deletions": 47, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -111,6 +111,7 @@ Header Files\n * Include Operation::\n * Search Path::\n * Once-Only Headers::\n+* Alternatives to Wrapper #ifndef::\n * Computed Includes::\n * Wrapper Headers::\n * System Headers::\n@@ -168,8 +169,7 @@ Implementation Details\n \n Obsolete Features\n \n-* Assertions::\n-* Obsolete once-only headers::\n+* Obsolete Features::\n \n @end detailmenu\n @end menu\n@@ -734,6 +734,7 @@ underscores in header file names, and at most one dot.\n * Include Operation::\n * Search Path::\n * Once-Only Headers::\n+* Alternatives to Wrapper #ifndef::\n * Computed Includes::\n * Wrapper Headers::\n * System Headers::\n@@ -959,6 +960,42 @@ begin with @samp{_}.  In a system header file, it should begin with\n file, the macro name should contain the name of the file and some\n additional text, to avoid conflicts with other header files.\n \n+@node Alternatives to Wrapper #ifndef\n+@section Alternatives to Wrapper #ifndef\n+\n+CPP supports two more ways of indicating that a header file should be\n+read only once.  Neither one is as portable as a wrapper @samp{#ifndef}\n+and we recommend you do not use them in new programs, with the caveat\n+that @samp{#import} is standard practice in Objective-C.\n+\n+@findex #import\n+CPP supports a variant of @samp{#include} called @samp{#import} which\n+includes a file, but does so at most once.  If you use @samp{#import}\n+instead of @samp{#include}, then you don't need the conditionals\n+inside the header file to prevent multiple inclusion of the contents.\n+@samp{#import} is standard in Objective-C, but is considered a\n+deprecated extension in C and C++.\n+\n+@samp{#import} is not a well designed feature.  It requires the users of\n+a header file to know that it should only be included once.  It is much\n+better for the header file's implementor to write the file so that users\n+don't need to know this.  Using a wrapper @samp{#ifndef} accomplishes\n+this goal.\n+\n+In the present implementation, a single use of @samp{#import} will\n+prevent the file from ever being read again, by either @samp{#import} or\n+@samp{#include}.  You should not rely on this; do not use both\n+@samp{#import} and @samp{#include} to refer to the same header file.\n+\n+Another way to prevent a header file from being included more than once\n+is with the @samp{#pragma once} directive.  If @samp{#pragma once} is\n+seen when scanning a header file, that file will never be read again, no\n+matter what.\n+\n+@samp{#pragma once} does not have the problems that @samp{#import} does,\n+but it is not recognized by all preprocessors, so you cannot rely on it\n+in a portable program.\n+\n @node Computed Includes\n @section Computed Includes\n @cindex computed includes\n@@ -3467,6 +3504,8 @@ These directives are not part of the C standard, but they are not\n official GNU extensions either.  What historical information we have\n been able to find, suggests they originated with System V@.\n \n+Both @samp{#ident} and @samp{#sccs} are deprecated extensions.\n+\n @cindex null directive\n The @dfn{null directive} consists of a @samp{#} followed by a newline,\n with only whitespace (including comments) in between.  A null directive\n@@ -4004,16 +4043,10 @@ may not be a limitation.\n @node Obsolete Features\n @section Obsolete Features\n \n-CPP has a number of features which are present mainly for\n-compatibility with older programs.  We discourage their use in new code.\n-In some cases, we plan to remove the feature in a future version of GCC@.\n+CPP has some features which are present mainly for compatibility with\n+older programs.  We discourage their use in new code.  In some cases,\n+we plan to remove the feature in a future version of GCC@.\n \n-@menu\n-* Assertions::\n-* Obsolete once-only headers::\n-@end menu\n-\n-@node Assertions\n @subsection Assertions\n @cindex assertions\n \n@@ -4097,42 +4130,6 @@ no effect.\n You can also make or cancel assertions using command line options.\n @xref{Invocation}.\n \n-@node Obsolete once-only headers\n-@subsection Obsolete once-only headers\n-\n-CPP supports two more ways of indicating that a header file should be\n-read only once.  Neither one is as portable as a wrapper @samp{#ifndef},\n-and we recommend you do not use them in new programs.\n-\n-@findex #import\n-In the Objective-C language, there is a variant of @samp{#include}\n-called @samp{#import} which includes a file, but does so at most once.\n-If you use @samp{#import} instead of @samp{#include}, then you don't\n-need the conditionals inside the header file to prevent multiple\n-inclusion of the contents.  GCC permits the use of @samp{#import} in C\n-and C++ as well as Objective-C@.  However, it is not in standard C or C++\n-and should therefore not be used by portable programs.\n-\n-@samp{#import} is not a well designed feature.  It requires the users of\n-a header file to know that it should only be included once.  It is much\n-better for the header file's implementor to write the file so that users\n-don't need to know this.  Using a wrapper @samp{#ifndef} accomplishes\n-this goal.\n-\n-In the present implementation, a single use of @samp{#import} will\n-prevent the file from ever being read again, by either @samp{#import} or\n-@samp{#include}.  You should not rely on this; do not use both\n-@samp{#import} and @samp{#include} to refer to the same header file.\n-\n-Another way to prevent a header file from being included more than once\n-is with the @samp{#pragma once} directive.  If @samp{#pragma once} is\n-seen when scanning a header file, that file will never be read again, no\n-matter what.\n-\n-@samp{#pragma once} does not have the problems that @samp{#import} does,\n-but it is not recognized by all preprocessors, so you cannot rely on it\n-in a portable program.\n-\n @node Differences from previous versions\n @section Differences from previous versions\n @cindex differences from previous versions"}, {"sha": "0cdfa1b2f9a89e6478707a6ba6fcfc250895620e", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (c) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+@c Copyright (c) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n @c Free Software Foundation, Inc.\n @c This is part of the CPP and GCC manuals.\n @c For copying conditions, see the file gcc.texi.\n@@ -633,7 +633,7 @@ Make an assertion with the predicate @var{predicate} and answer\n @var{predicate}(@var{answer})}, which is still supported, because\n it does not use shell special characters.\n @ifset cppmanual\n-@xref{Assertions}.\n+@xref{Obsolete Features}.\n @end ifset\n \n @item -A -@var{predicate}=@var{answer}"}, {"sha": "a7704a08323bf6716e572af1084e8df200333ebd", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -195,7 +195,7 @@ in the following sections.\n -fvisibility-ms-compat @gol\n -Wabi  -Wctor-dtor-privacy @gol\n -Wnon-virtual-dtor  -Wreorder @gol\n--Weffc++  -Wno-deprecated  -Wstrict-null-sentinel @gol\n+-Weffc++  -Wstrict-null-sentinel @gol\n -Wno-non-template-friend  -Wold-style-cast @gol\n -Woverloaded-virtual  -Wno-pmf-conversions @gol\n -Wsign-promo}\n@@ -230,8 +230,8 @@ Objective-C and Objective-C++ Dialects}.\n -w  -Wextra  -Wall  -Waddress  -Waggregate-return  -Warray-bounds @gol\n -Wno-attributes -Wc++-compat -Wc++0x-compat -Wcast-align  -Wcast-qual  @gol\n -Wchar-subscripts -Wclobbered  -Wcomment @gol\n--Wconversion  -Wcoverage-mismatch  -Wno-deprecated-declarations @gol\n--Wdisabled-optimization  -Wno-div-by-zero  @gol\n+-Wconversion  -Wcoverage-mismatch  -Wno-deprecated  @gol\n+-Wno-deprecated-declarations -Wdisabled-optimization  -Wno-div-by-zero  @gol\n -Wempty-body  -Wno-endif-labels @gol\n -Werror  -Werror=* @gol\n -Wfatal-errors  -Wfloat-equal  -Wformat  -Wformat=2 @gol\n@@ -2119,11 +2119,6 @@ When selecting this option, be aware that the standard library\n headers do not obey all of these guidelines; use @samp{grep -v}\n to filter out those warnings.\n \n-@item -Wno-deprecated @r{(C++ and Objective-C++ only)}\n-@opindex Wno-deprecated\n-@opindex Wdeprecated\n-Do not warn about usage of deprecated features.  @xref{Deprecated Features}.\n-\n @item -Wstrict-null-sentinel @r{(C++ and Objective-C++ only)}\n @opindex Wstrict-null-sentinel\n @opindex Wno-strict-null-sentinel\n@@ -3885,6 +3880,11 @@ confused with the digit 0, and so is not the default, but may be\n useful as a local coding convention if the programming environment is\n unable to be fixed to display these characters distinctly.\n \n+@item -Wno-deprecated\n+@opindex Wno-deprecated\n+@opindex Wdeprecated\n+Do not warn about usage of deprecated features.  @xref{Deprecated Features}.\n+\n @item -Wno-deprecated-declarations\n @opindex Wno-deprecated-declarations\n @opindex Wdeprecated-declarations"}, {"sha": "ff46688d18e4f835b84800bd1fbb71b8ea0ce3dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,3 +1,26 @@\n+2008-05-13  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR preprocessor/22168:\n+\t* gcc.dg/pch/import-2.hs: Add -Wno-deprecated.\n+\t* gcc.dg/pch/import-1.hs: Add -Wno-deprecated.\n+\t* gcc.dg/pch/import-2.c: Add -Wno-deprecated.\n+\t* gcc.dg/pch/import-1.c: Add -Wno-deprecated.\n+\t* gcc.dg/cpp/import2.c: Add -Wno-deprecated.\n+\t* gcc.dg/cpp/import1.c: Add -Wno-deprecated.\n+\t* gcc.dg/cpp/trad/assert3.c: Add -Wno-deprecated.\n+\t* gcc.dg/cpp/trad/assert2.c: Add -Wno-deprecated.\n+\t* gcc.dg/cpp/trad/assert1.c: Add -Wno-deprecated.\n+\t* gcc.dg/cpp/ident.c: Add -Wno-deprecated.\n+\t* gcc.dg/cpp/ident-1.c: Add -Wno-deprecated.\n+\t* gcc.dg/cpp/extratokens.c: Add -Wno-deprecated.\n+\t* gcc.dg/cpp/assert3.c: Add -Wno-deprecated.\n+\t* gcc.dg/cpp/assert2.c: Add -Wno-deprecated.\n+\t* gcc.dg/cpp/assert1.c: Add -Wno-deprecated.\n+\t* gcc.dg/cpp/assert4.c: Compile with -ansi and not -pedantic.  Add\n+\t-Wno-deprecated.\n+\t* gcc.dg/cpp/pr22168.c: New file.\n+\t* gcc.dg/cpp/pr22168-2.c: New file.\n+\n 2008-05-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/36227"}, {"sha": "d1446105c543fd9c5e8a0b90f872cece614f1311", "filename": "gcc/testsuite/gcc.dg/cpp/assert1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert1.c?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,6 +1,6 @@\n /* Basic tests of the #assert preprocessor extension. */\n /* { dg-do compile } */\n-/* { dg-options \"\" } */\n+/* { dg-options \"-Wno-deprecated\" } */\n \n #define def unused expansion\n #define fail  int fail"}, {"sha": "130f7f5320a144e49bf47bdac75158f725ce3c05", "filename": "gcc/testsuite/gcc.dg/cpp/assert2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert2.c?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,6 +1,6 @@\n /* Malformed assertion tests.  */\n /* { dg-do preprocess } */\n-/* { dg-options \"-fno-show-column\" } */\n+/* { dg-options \"-fno-show-column -Wno-deprecated\" } */\n \n #assert\t\t/* { dg-error \"without predicate\" \"assert w/o predicate\" } */\n #assert %\t/* { dg-error \"an identifier\" \"assert punctuation\" } */"}, {"sha": "9010ecebd4ed838ae6c7699ae76b3c4cebb1adc6", "filename": "gcc/testsuite/gcc.dg/cpp/assert3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert3.c?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,7 +1,7 @@\n-/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2000, 2008 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n-/* { dg-options \"-A abc=def -A abc\\(ghi\\) \\\"-Aabc = jkl\\\" -A abc=mno -A -abc=mno\" } */\n+/* { dg-options \"-A abc=def -A abc\\(ghi\\) \\\"-Aabc = jkl\\\" -A abc=mno -A -abc=mno -Wno-deprecated\" } */\n \n /* Test -A command line syntax.  Source Neil Booth.  31 Oct 2000.  */\n "}, {"sha": "c43ba2fae9633a438f7b2af8b84a042073ee3559", "filename": "gcc/testsuite/gcc.dg/cpp/assert4.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert4.c?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,8 +1,9 @@\n-/* Copyright (C) 2003 Free Software Foundation, Inc.\n+/* Copyright (C) 2003, 2006, 2008 Free Software Foundation, Inc.\n    Test builtin preprocessor assertions.\n    By Kaveh Ghazi <ghazi@caip.rutgers.edu>.  */\n \n /* { dg-do preprocess } */\n+/* { dg-options \"-ansi -Wno-deprecated\" } */\n \n /* Check for #system assertions.  */\n "}, {"sha": "d3e941bfff05239d2ea86a187b7cd7862d14284b", "filename": "gcc/testsuite/gcc.dg/cpp/extratokens.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fextratokens.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fextratokens.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fextratokens.c?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,7 +1,7 @@\n-/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2000, 2008 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n-/* { dg-options \"-fno-show-column\" } */\n+/* { dg-options \"-fno-show-column -Wno-deprecated\" } */\n \n /* Tests all directives that do not permit excess tokens at the end of\n    the line.  */"}, {"sha": "da6e516d2f08bc60eaae4968f49a5572e4d71c62", "filename": "gcc/testsuite/gcc.dg/cpp/ident-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fident-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fident-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fident-1.c?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"\" } */ /* shut off -pedantic */\n+/* { dg-options \"-Wno-deprecated\" } */ /* shut off -pedantic */\n \n /* Based on PR 16999 */\n "}, {"sha": "5477cbe10671a8fa9ab57bf6a0d6dffdfc8cca67", "filename": "gcc/testsuite/gcc.dg/cpp/ident.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fident.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fident.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fident.c?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,6 +1,6 @@\n /* Test #ident.  */\n /* { dg-do compile } */\n-/* { dg-options \"\" } */ /* shut off -pedantic */\n+/* { dg-options \"-Wno-deprecated\" } */ /* shut off -pedantic */\n \n #ident \"this is an ident\"\n "}, {"sha": "07130f014c1ee9921d53cf50ec43cb67719e8d0c", "filename": "gcc/testsuite/gcc.dg/cpp/import1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fimport1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fimport1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fimport1.c?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,7 +1,7 @@\n-/* Copyright (C) 2003 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2003, 2008 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n-/* { dg-options \"\" } */\n+/* { dg-options \"-Wno-deprecated\" } */\n \n /* This tests that our eagerness to apply the multiple include guard\n    optimization to the #import doesn't stop us marking the file"}, {"sha": "99b987551b3e15300640ff7c5635e7a2a79b73ae", "filename": "gcc/testsuite/gcc.dg/cpp/import2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fimport2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fimport2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fimport2.c?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,7 +1,7 @@\n-/* Copyright (C) 2003 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2003, 2008 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n-/* { dg-options \"\" } */\n+/* { dg-options \"-Wno-deprecated\" } */\n \n /* This tests that the file is only included once\n    Neil Booth, 2 August 2003.  */"}, {"sha": "c1e308dfcd85d1bbf0bf97ff83f5bbabf2b7eec5", "filename": "gcc/testsuite/gcc.dg/cpp/pr22168-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr22168-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr22168-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr22168-2.c?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -0,0 +1,12 @@\n+/* Copyright (C) 2008 Free Software Foundation, Inc.  */\n+/* PR preprocessor/22168 */\n+\n+/* { dg-do preprocess }\n+   { dg-options -Wdeprecated } */\n+#if #foo(bar)    /* { dg-warning \"deprecated\" } */\n+int x;\n+#else\n+int y;\n+#endif\n+#assert zzz(a)   /* { dg-warning \"deprecated\" } */\n+#unassert yyy    /* { dg-warning \"deprecated\" } */"}, {"sha": "fecb972f7661edfbd39335d13159d89bae36125c", "filename": "gcc/testsuite/gcc.dg/cpp/pr22168.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr22168.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr22168.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr22168.c?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -0,0 +1,12 @@\n+/* Copyright (C) 2008 Free Software Foundation, Inc.  */\n+/* PR preprocessor/22168 */\n+\n+/* { dg-do preprocess }\n+   { dg-options -pedantic } */\n+#if #foo(bar)    /* { dg-warning \"GCC extension\" } */\n+int x;\n+#else\n+int y;\n+#endif\n+#assert zzz(a)   /* { dg-warning \"GCC extension\" } */\n+#unassert yyy    /* { dg-warning \"GCC extension\" } */"}, {"sha": "d1446105c543fd9c5e8a0b90f872cece614f1311", "filename": "gcc/testsuite/gcc.dg/cpp/trad/assert1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fassert1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fassert1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fassert1.c?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,6 +1,6 @@\n /* Basic tests of the #assert preprocessor extension. */\n /* { dg-do compile } */\n-/* { dg-options \"\" } */\n+/* { dg-options \"-Wno-deprecated\" } */\n \n #define def unused expansion\n #define fail  int fail"}, {"sha": "4aa0b99447967beb12bc543d9c6980ca143ccbbe", "filename": "gcc/testsuite/gcc.dg/cpp/trad/assert2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fassert2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fassert2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fassert2.c?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,5 +1,6 @@\n /* Malformed assertion tests.  */\n /* { dg-do preprocess } */\n+/* { dg-options \"-Wno-deprecated\" } */\n \n #assert\t\t/* { dg-error \"without predicate\" \"assert w/o predicate\" } */\n #assert %\t/* { dg-error \"an identifier\" \"assert punctuation\" } */"}, {"sha": "9010ecebd4ed838ae6c7699ae76b3c4cebb1adc6", "filename": "gcc/testsuite/gcc.dg/cpp/trad/assert3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fassert3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fassert3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fassert3.c?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,7 +1,7 @@\n-/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2000, 2008 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n-/* { dg-options \"-A abc=def -A abc\\(ghi\\) \\\"-Aabc = jkl\\\" -A abc=mno -A -abc=mno\" } */\n+/* { dg-options \"-A abc=def -A abc\\(ghi\\) \\\"-Aabc = jkl\\\" -A abc=mno -A -abc=mno -Wno-deprecated\" } */\n \n /* Test -A command line syntax.  Source Neil Booth.  31 Oct 2000.  */\n "}, {"sha": "b036217f82b94ea4e31aafffd47bea7fa23d7a42", "filename": "gcc/testsuite/gcc.dg/pch/import-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fimport-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fimport-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fimport-1.c?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-I. -I $srcdir/gcc.dg/pch\" } */\n+/* { dg-options \"-I. -I $srcdir/gcc.dg/pch -Wno-deprecated\" } */\n #include \"import-1.h\"\n #include \"import-1a.h\"\n #import \"import-1b.h\""}, {"sha": "a59099d44d428ace28fc057982d7e4988b1fcae6", "filename": "gcc/testsuite/gcc.dg/pch/import-1.hs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fimport-1.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fimport-1.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fimport-1.hs?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-I. -I $srcdir/gcc.dg/pch\" } */\n+/* { dg-options \"-I. -I $srcdir/gcc.dg/pch -Wno-deprecated\" } */\n #import \"import-1a.h\"\n #include \"import-1b.h\"\n #include \"import-1c.h\""}, {"sha": "c037e3d1f6f2fbd6b02ce779ede3ab60ba70b723", "filename": "gcc/testsuite/gcc.dg/pch/import-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fimport-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fimport-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fimport-2.c?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-I. -I $srcdir/gcc.dg/pch/include\" } */\n+/* { dg-options \"-I. -I $srcdir/gcc.dg/pch/include -Wno-deprecated\" } */\n \n #include \"import-2.h\"\n #import \"import-2b.h\""}, {"sha": "8a725de14a2cbe228305c970be7a0e5bab4ea13d", "filename": "gcc/testsuite/gcc.dg/pch/import-2.hs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fimport-2.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fimport-2.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fimport-2.hs?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-I $srcdir/gcc.dg/pch/include\" } */\n+/* { dg-options \"-I $srcdir/gcc.dg/pch/include -Wno-deprecated\" } */\n \n #import \"import-2b.h\"\n #import \"import-2a.h\""}, {"sha": "fc226b452bb921cefe24b14bf48d499fd0d750fa", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,3 +1,13 @@\n+2008-05-13  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR preprocessor/22168:\n+\t* include/cpplib.h (struct cpp_options) <objc>: Update\n+\tdocumentation.\n+\t* expr.c (eval_token): Warn for use of assertions.\n+\t* directives.c (directive_diagnostics): Warn about extensions.\n+\t(DEPRECATED): New define.\n+\t(DIRECTIVE_TABLE): Use it.\n+\n 2008-05-06  Tom Tromey  <tromey@redhat.com>\n \n \tPR preprocessor/35313, PR preprocessor/36088:"}, {"sha": "9954796b36a56c3a576cb5999a46a5d2c42facab", "filename": "libcpp/directives.c", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -75,6 +75,7 @@ struct pragma_entry\n #define INCL\t\t(1 << 2)\n #define IN_I\t\t(1 << 3)\n #define EXPAND\t\t(1 << 4)\n+#define DEPRECATED\t(1 << 5)\n \n /* Defines one #-directive, including how to handle it.  */\n typedef void (*directive_handler) (cpp_reader *);\n@@ -130,9 +131,9 @@ static void handle_assertion (cpp_reader *, const char *, int);\n    counts from all the source code I have lying around (egcs and libc\n    CVS as of 1999-05-18, plus grub-0.5.91, linux-2.2.9, and\n    pcmcia-cs-3.0.9).  This is no longer important as directive lookup\n-   is now O(1).  All extensions other than #warning and #include_next\n-   are deprecated.  The name is where the extension appears to have\n-   come from.  */\n+   is now O(1).  All extensions other than #warning, #include_next,\n+   and #import are deprecated.  The name is where the extension\n+   appears to have come from.  */\n \n #define DIRECTIVE_TABLE\t\t\t\t\t\t\t\\\n D(define,\tT_DEFINE = 0,\tKANDR,     IN_I)\t   /* 270554 */ \\\n@@ -149,11 +150,11 @@ D(error,\tT_ERROR,\tSTDC89,    0)\t\t   /*    475 */ \\\n D(pragma,\tT_PRAGMA,\tSTDC89,    IN_I)\t   /*    195 */ \\\n D(warning,\tT_WARNING,\tEXTENSION, 0)\t\t   /*     22 */ \\\n D(include_next,\tT_INCLUDE_NEXT,\tEXTENSION, INCL | EXPAND)  /*     19 */ \\\n-D(ident,\tT_IDENT,\tEXTENSION, IN_I)\t   /*     11 */ \\\n+D(ident,\tT_IDENT,\tEXTENSION, IN_I | DEPRECATED) /*     11 */ \\\n D(import,\tT_IMPORT,\tEXTENSION, INCL | EXPAND)  /* 0 ObjC */\t\\\n-D(assert,\tT_ASSERT,\tEXTENSION, 0)\t\t   /* 0 SVR4 */\t\\\n-D(unassert,\tT_UNASSERT,\tEXTENSION, 0)\t\t   /* 0 SVR4 */\t\\\n-D(sccs,\t\tT_SCCS,\t\tEXTENSION, IN_I)\t   /* 0 SVR4? */\n+D(assert,\tT_ASSERT,\tEXTENSION, DEPRECATED)\t   /* 0 SVR4 */\t\\\n+D(unassert,\tT_UNASSERT,\tEXTENSION, DEPRECATED)\t   /* 0 SVR4 */\t\\\n+D(sccs,\t\tT_SCCS,\t\tEXTENSION, IN_I | DEPRECATED) /* 0 SVR4? */\n \n /* #sccs is synonymous with #ident.  */\n #define do_sccs do_ident\n@@ -337,11 +338,20 @@ prepare_directive_trad (cpp_reader *pfile)\n static void\n directive_diagnostics (cpp_reader *pfile, const directive *dir, int indented)\n {\n-  /* Issue -pedantic warnings for extensions.  */\n-  if (CPP_PEDANTIC (pfile)\n-      && ! pfile->state.skipping\n-      && dir->origin == EXTENSION)\n-    cpp_error (pfile, CPP_DL_PEDWARN, \"#%s is a GCC extension\", dir->name);\n+  /* Issue -pedantic or deprecated warnings for extensions.  We let\n+     -pedantic take precedence if both are applicable.  */\n+  if (! pfile->state.skipping)\n+    {\n+      if (dir->origin == EXTENSION\n+\t  && !(dir == &dtable[T_IMPORT] && CPP_OPTION (pfile, objc))\n+\t  && CPP_PEDANTIC (pfile))\n+\tcpp_error (pfile, CPP_DL_PEDWARN, \"#%s is a GCC extension\", dir->name);\n+      else if (((dir->flags & DEPRECATED) != 0\n+\t\t|| (dir == &dtable[T_IMPORT] && !CPP_OPTION (pfile, objc)))\n+\t       && CPP_OPTION (pfile, warn_deprecated))\n+\tcpp_error (pfile, CPP_DL_WARNING, \"#%s is a deprecated GCC extension\",\n+\t\t   dir->name);\n+    }\n \n   /* Traditionally, a directive is ignored unless its # is in\n      column 1.  Therefore in code intended to work with K+R"}, {"sha": "2e52617a6568ab09c42513b53944301019d7b0e0", "filename": "libcpp/expr.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -745,10 +745,25 @@ eval_token (cpp_reader *pfile, const cpp_token *token)\n \t}\n       break;\n \n-    default: /* CPP_HASH */\n+    case CPP_HASH:\n+      if (!pfile->state.skipping)\n+\t{\n+\t  /* A pedantic warning takes precedence over a deprecated\n+\t     warning here.  */\n+\t  if (CPP_PEDANTIC (pfile))\n+\t    cpp_error (pfile, CPP_DL_PEDWARN,\n+\t\t       \"assertions are a GCC extension\");\n+\t  else if (CPP_OPTION (pfile, warn_deprecated))\n+\t    cpp_error (pfile, CPP_DL_WARNING,\n+\t\t       \"assertions are a deprecated extension\");\n+\t}\n       _cpp_test_assertion (pfile, &temp);\n       result.high = 0;\n       result.low = temp;\n+      break;\n+\n+    default:\n+      abort ();\n     }\n \n   result.unsignedp = !!unsignedp;"}, {"sha": "6b3f7615c57babdb951bb19154c5626aa122aac4", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899015a064096699065b7349e20e27671f04ba82/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899015a064096699065b7349e20e27671f04ba82/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=899015a064096699065b7349e20e27671f04ba82", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for CPP library.\n    Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n-   2004, 2005, 2007\n+   2004, 2005, 2007, 2008\n    Free Software Foundation, Inc.\n    Written by Per Bothner, 1994-95.\n \n@@ -275,8 +275,9 @@ struct cpp_options\n   /* Nonzero means handle cplusplus style comments.  */\n   unsigned char cplusplus_comments;\n \n-  /* Nonzero means define __OBJC__, treat @ as a special token, and\n-     use the OBJC[PLUS]_INCLUDE_PATH environment variable.  */\n+  /* Nonzero means define __OBJC__, treat @ as a special token, use\n+     the OBJC[PLUS]_INCLUDE_PATH environment variable, and allow\n+     \"#import\".  */\n   unsigned char objc;\n \n   /* Nonzero means don't copy comments into the output file.  */"}]}