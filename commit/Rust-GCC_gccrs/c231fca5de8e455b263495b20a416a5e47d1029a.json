{"sha": "c231fca5de8e455b263495b20a416a5e47d1029a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIzMWZjYTVkZThlNDU1YjI2MzQ5NWIyMGE0MTZhNWU0N2QxMDI5YQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2021-01-08T10:11:00Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2021-01-08T10:11:00Z"}, "message": "Fortran:Fix simplification of constructors with implied-do [PR98458]\n\n2021-01-08  Paul Thomas  <pault@gcc.gnu.org>\n\ngcc/fortran\n\tPR fortran/98458\n\t* simplify.c (is_constant_array_expr): If an array constructor\n\texpression has elements other than constants or structures, try\n\tfixing the expression with gfc_reduce_init_expr. Also, if shape\n\tis NULL, obtain the array size and set it.\n\ngcc/testsuite/\n\tPR fortran/98458\n\t* gfortran.dg/implied_do_3.f90 : New test.", "tree": {"sha": "4b588ebaee3de6b4c9bd2a5b7f051c60e5f97c0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b588ebaee3de6b4c9bd2a5b7f051c60e5f97c0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c231fca5de8e455b263495b20a416a5e47d1029a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c231fca5de8e455b263495b20a416a5e47d1029a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c231fca5de8e455b263495b20a416a5e47d1029a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c231fca5de8e455b263495b20a416a5e47d1029a/comments", "author": null, "committer": null, "parents": [{"sha": "01d92cfd79872e4cffc78bf233bb9b767336beb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d92cfd79872e4cffc78bf233bb9b767336beb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01d92cfd79872e4cffc78bf233bb9b767336beb8"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "23317a2e2d9a4b27800aeacb48757dbff61c9248", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c231fca5de8e455b263495b20a416a5e47d1029a/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c231fca5de8e455b263495b20a416a5e47d1029a/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=c231fca5de8e455b263495b20a416a5e47d1029a", "patch": "@@ -220,6 +220,8 @@ static bool\n is_constant_array_expr (gfc_expr *e)\n {\n   gfc_constructor *c;\n+  bool array_OK = true;\n+  mpz_t size;\n \n   if (e == NULL)\n     return true;\n@@ -231,13 +233,43 @@ is_constant_array_expr (gfc_expr *e)\n   if (e->expr_type != EXPR_ARRAY || !gfc_is_constant_expr (e))\n     return false;\n \n+  for (c = gfc_constructor_first (e->value.constructor);\n+       c; c = gfc_constructor_next (c))\n+    if (c->expr->expr_type != EXPR_CONSTANT\n+\t  && c->expr->expr_type != EXPR_STRUCTURE)\n+      {\n+\tarray_OK = false;\n+\tbreak;\n+      }\n+\n+  /* Check and expand the constructor.  */\n+  if (!array_OK && gfc_init_expr_flag && e->rank == 1)\n+    {\n+      array_OK = gfc_reduce_init_expr (e);\n+      /* gfc_reduce_init_expr resets the flag.  */\n+      gfc_init_expr_flag = true;\n+    }\n+  else\n+    return array_OK;\n+\n+  /* Recheck to make sure that any EXPR_ARRAYs have gone.  */\n   for (c = gfc_constructor_first (e->value.constructor);\n        c; c = gfc_constructor_next (c))\n     if (c->expr->expr_type != EXPR_CONSTANT\n \t  && c->expr->expr_type != EXPR_STRUCTURE)\n       return false;\n \n-  return true;\n+  /* Make sure that the array has a valid shape.  */\n+  if (e->shape == NULL && e->rank == 1)\n+    {\n+      if (!gfc_array_size(e, &size))\n+\treturn false;\n+      e->shape = gfc_get_shape (1);\n+      mpz_init_set (e->shape[0], size);\n+      mpz_clear (size);\n+    }\n+\n+  return array_OK;\n }\n \n /* Test for a size zero array.  */"}, {"sha": "8206332e8a4eda3905d9c5ad1a767e333674b552", "filename": "gcc/testsuite/gfortran.dg/implied_do_3.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c231fca5de8e455b263495b20a416a5e47d1029a/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_do_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c231fca5de8e455b263495b20a416a5e47d1029a/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_do_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_do_3.f90?ref=c231fca5de8e455b263495b20a416a5e47d1029a", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PR98458 in which array expressions within the implied-do\n+! array constructor caused an ICE in trans-array.c(gfc_conv_array_initializer).\n+!\n+! Contributed by Xiao Liu  <xiao.liu@compiler-dev.com>\n+!\n+program test\n+  implicit none\n+  integer :: i\n+  integer, parameter :: t(6) = [1,2,3,4,5,6]\n+  integer, parameter :: tmp(3,2) = reshape([(t(i:i+1),i=1,3)],[3,2])\n+  print *, tmp  ! Used to ICE\n+end"}]}