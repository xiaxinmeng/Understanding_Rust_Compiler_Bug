{"sha": "fb862fdfb53ecb189f8bd74b66de573a78045916", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI4NjJmZGZiNTNlY2IxODlmOGJkNzRiNjZkZTU3M2E3ODA0NTkxNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-07T10:05:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2020-01-07T10:05:14Z"}, "message": "re PR tree-optimization/93156 (abused nonnull attribute evokes new segfault in gcc 10 since Nov 4 commit, 0fb958ab8aa)\n\n\tPR tree-optimization/93156\n\t* tree-ssa-ccp.c (bit_value_binop): For x * x note that the second\n\tleast significant bit is always clear.\n\n\t* gcc.dg/tree-ssa/pr93156.c: New test.\n\nFrom-SVN: r279951", "tree": {"sha": "733c1ab99c29a45d7184f0131b1ae75029058b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/733c1ab99c29a45d7184f0131b1ae75029058b62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb862fdfb53ecb189f8bd74b66de573a78045916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb862fdfb53ecb189f8bd74b66de573a78045916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb862fdfb53ecb189f8bd74b66de573a78045916", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb862fdfb53ecb189f8bd74b66de573a78045916/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f26916c2acdda19e36e57fff97b296897ebcba76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f26916c2acdda19e36e57fff97b296897ebcba76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f26916c2acdda19e36e57fff97b296897ebcba76"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "0ead18a53b768da4f6c5dd8d738da510ea4f10e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb862fdfb53ecb189f8bd74b66de573a78045916/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb862fdfb53ecb189f8bd74b66de573a78045916/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb862fdfb53ecb189f8bd74b66de573a78045916", "patch": "@@ -1,4 +1,8 @@\n-2019-01-07  Jakub Jelinek  <jakub@redhat.com>\n+2020-01-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/93156\n+\t* tree-ssa-ccp.c (bit_value_binop): For x * x note that the second\n+\tleast significant bit is always clear.\n \n \tPR tree-optimization/93118\n \t* match.pd ((x >> c) << c -> x & (-1<<c)): Add nop_convert?.  Add new"}, {"sha": "b5c4bc02834df926ac9bf6f9ea6412dd42685095", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb862fdfb53ecb189f8bd74b66de573a78045916/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb862fdfb53ecb189f8bd74b66de573a78045916/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb862fdfb53ecb189f8bd74b66de573a78045916", "patch": "@@ -1,4 +1,7 @@\n-2019-01-07  Jakub Jelinek  <jakub@redhat.com>\n+2020-01-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/93156\n+\t* gcc.dg/tree-ssa/pr93156.c: New test.\n \n \tPR tree-optimization/93118\n \t* gcc.dg/tree-ssa/pr93118.c: New test."}, {"sha": "b8c2af3ed484e1736e39a26588fc370c80be3c87", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr93156.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb862fdfb53ecb189f8bd74b66de573a78045916/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93156.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb862fdfb53ecb189f8bd74b66de573a78045916/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93156.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93156.c?ref=fb862fdfb53ecb189f8bd74b66de573a78045916", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/93156 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"return 0;\" 3 \"optimized\" } } */\n+\n+int\n+foo (int x)\n+{\n+  return (x * x) & 2;\n+}\n+\n+unsigned long long\n+bar (unsigned long long x)\n+{\n+  return (x * x) & 2;\n+}\n+\n+int\n+baz (int x)\n+{\n+  x &= -2;\n+  return (x * x) & 3;\n+}"}, {"sha": "be6647db894d2673bc819fc106e6198e13316be8", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb862fdfb53ecb189f8bd74b66de573a78045916/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb862fdfb53ecb189f8bd74b66de573a78045916/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=fb862fdfb53ecb189f8bd74b66de573a78045916", "patch": "@@ -1650,6 +1650,17 @@ bit_value_binop (enum tree_code code, tree type, tree rhs1, tree rhs2)\n \t\t   TYPE_SIGN (TREE_TYPE (rhs2)), TYPE_PRECISION (TREE_TYPE (rhs2)),\n \t\t   value_to_wide_int (r2val), r2val.mask);\n \n+  /* (x * x) & 2 == 0.  */\n+  if (code == MULT_EXPR && rhs1 == rhs2 && TYPE_PRECISION (type) > 1)\n+    {\n+      widest_int m = 2;\n+      if (wi::sext (mask, TYPE_PRECISION (type)) != -1)\n+\tvalue = wi::bit_and_not (value, m);\n+      else\n+\tvalue = 0;\n+      mask = wi::bit_and_not (mask, m);\n+    }\n+\n   if (wi::sext (mask, TYPE_PRECISION (type)) != -1)\n     {\n       val.lattice_val = CONSTANT;"}]}