{"sha": "3c2674cc0d725783a501a78cdc1256642448c159", "node_id": "C_kwDOANBUbNoAKDNjMjY3NGNjMGQ3MjU3ODNhNTAxYTc4Y2RjMTI1NjY0MjQ0OGMxNTk", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-05-02T18:11:03Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-06-01T08:43:17Z"}, "message": "[Ada] Fix search for \"for ... of\" loop subprograms\n\nThis patch makes the search for Get_Element_Access, Step (Next/Prev),\nReference_Control_Type, and Pseudo_Reference (for optimized \"for ... of\"\nloops) more robust.  In particular, we have a new Next procedure in Ada\n2022, and we need to pick the right one.\n\nWe have not yet added the new Next and other subprograms.\n\ngcc/ada/\n\n\t* exp_ch5.adb (Expand_Iterator_Loop_Over_Container): For each\n\tsubprogram found, assert that the variable is Empty, so we can\n\tdetect bugs where we find two or more things with the same name.\n\tWithout this patch, that bug would happen when we add the new\n\tNext procedure.  For Step, make sure we pick the right one, by\n\tchecking name and number of parameters.  For Get_Element_Access,\n\tcheck that we're picking a function.  That's not really\n\tnecessary, because there is no procedure with that name, but it\n\tseems cleaner this way.\n\t* rtsfind.ads: Minor comment improvement. It seems kind of odd\n\tto say \"under no circumstances\", and then immediately contradict\n\tthat with \"The one exception is...\".", "tree": {"sha": "a2d0bb030119223ba9049c9e0f581efba0648235", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2d0bb030119223ba9049c9e0f581efba0648235"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c2674cc0d725783a501a78cdc1256642448c159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c2674cc0d725783a501a78cdc1256642448c159", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c2674cc0d725783a501a78cdc1256642448c159", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c2674cc0d725783a501a78cdc1256642448c159/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c97f3a7dc230dab0877d0c27b84eb06132cf7bf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c97f3a7dc230dab0877d0c27b84eb06132cf7bf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c97f3a7dc230dab0877d0c27b84eb06132cf7bf8"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "b9955771c9751812ea63d0ef1631d5e04ea2b9c7", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2674cc0d725783a501a78cdc1256642448c159/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2674cc0d725783a501a78cdc1256642448c159/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=3c2674cc0d725783a501a78cdc1256642448c159", "patch": "@@ -5203,22 +5203,36 @@ package body Exp_Ch5 is\n \n             Ent := First_Entity (Pack);\n             while Present (Ent) loop\n+               --  Get_Element_Access function with one parameter called\n+               --  Position.\n+\n                if Chars (Ent) = Name_Get_Element_Access\n+                 and then Ekind (Ent) = E_Function\n                  and then Present (First_Formal (Ent))\n                  and then Chars (First_Formal (Ent)) = Name_Position\n                  and then No (Next_Formal (First_Formal (Ent)))\n                then\n+                  pragma Assert (No (Fast_Element_Access_Op));\n                   Fast_Element_Access_Op := Ent;\n \n+               --  Next or Prev procedure with one parameter called\n+               --  Position.\n+\n                elsif Chars (Ent) = Name_Step\n                  and then Ekind (Ent) = E_Procedure\n+                 and then Present (First_Formal (Ent))\n+                 and then Chars (First_Formal (Ent)) = Name_Position\n+                 and then No (Next_Formal (First_Formal (Ent)))\n                then\n+                  pragma Assert (No (Fast_Step_Op));\n                   Fast_Step_Op := Ent;\n \n                elsif Chars (Ent) = Name_Reference_Control_Type then\n+                  pragma Assert (No (Reference_Control_Type));\n                   Reference_Control_Type := Ent;\n \n                elsif Chars (Ent) = Name_Pseudo_Reference then\n+                  pragma Assert (No (Pseudo_Reference));\n                   Pseudo_Reference := Ent;\n                end if;\n "}, {"sha": "127095578efa1bd6b58e1e1bac2669fa4f3b73e7", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2674cc0d725783a501a78cdc1256642448c159/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2674cc0d725783a501a78cdc1256642448c159/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=3c2674cc0d725783a501a78cdc1256642448c159", "patch": "@@ -540,13 +540,11 @@ package Rtsfind is\n    --  value is required syntactically, but no real entry is required or\n    --  needed. Use of this value will cause a fatal error in an RTE call.\n \n-   --  Note that under no circumstances can any of these entities be defined\n-   --  more than once in a given package, i.e. no overloading is allowed for\n-   --  any entity that is found using rtsfind. A fatal error is given if this\n-   --  rule is violated. The one exception is for Save_Occurrence, where the\n-   --  RM mandates the overloading. In this case, the compiler only uses the\n-   --  procedure, not the function, and the procedure must come first so that\n-   --  the compiler finds it and not the function.\n+   --  It is normally not allowed to have more than one of these entities with\n+   --  the same name in a given package. The one exception is Save_Occurrence,\n+   --  where the RM mandates the overloading. In this case, the compiler uses\n+   --  the procedure, not the function, and the procedure must come first so\n+   --  that the compiler finds it and not the function.\n \n    type RE_Id is (\n "}]}