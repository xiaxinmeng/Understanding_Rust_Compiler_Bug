{"sha": "993f19a873fcf28b589560276ae92f14823faa1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkzZjE5YTg3M2ZjZjI4YjU4OTU2MDI3NmFlOTJmMTQ4MjNmYWExYQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2003-04-07T02:48:54Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2003-04-07T02:48:54Z"}, "message": "invoke.texi (RS/6000 and PowerPC Options): Document -mspe option.\n\n 2003-04-06  Aldy Hernandez  <aldyh@redhat.com>\n\n        * doc/invoke.texi (RS/6000 and PowerPC Options): Document -mspe\n        option.\n\n        * config/rs6000/eabispe.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Set\n        rs6000_spe.\n\n        * config/rs6000/eabi.h (TARGET_E500): Define.\n\n        * config/rs6000/rs6000.h (TARGET_E500): Define.\n        (TARGET_OPTIONS): Add spe= option.\n        Declare rs6000_spe and rs6000_spe_string extern.\n\n        * config/rs6000/rs6000.c (branch_positive_comparison_operator):\n        Change TARGET_SPE to TARGET_E500.\n        (ccr_bit): Change TARGET_SPE to TARGET_E500.  Check for\n        !TARGET_FPRS.\n        (print_operand): Same.\n        (rs6000_generate_compare): Same.\n        (output_cbranch): Same.\n        (rs6000_spe): Declare.\n        (rs6000_spe_string): Declare.\n        (rs6000_override_options): Call rs6000_parse_spe_option.\n        (rs6000_parse_spe_option): New.\n\nFrom-SVN: r65319", "tree": {"sha": "bda06c0f80fa7865bf8dbbc4c25d8f8fadc636eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bda06c0f80fa7865bf8dbbc4c25d8f8fadc636eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/993f19a873fcf28b589560276ae92f14823faa1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/993f19a873fcf28b589560276ae92f14823faa1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/993f19a873fcf28b589560276ae92f14823faa1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/993f19a873fcf28b589560276ae92f14823faa1a/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4877d67e3b046d80769e1cb92066e53ba54340e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4877d67e3b046d80769e1cb92066e53ba54340e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4877d67e3b046d80769e1cb92066e53ba54340e3"}], "stats": {"total": 89, "additions": 79, "deletions": 10}, "files": [{"sha": "ca209182bc0b096d22d57f21a99101eec718daa9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993f19a873fcf28b589560276ae92f14823faa1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993f19a873fcf28b589560276ae92f14823faa1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=993f19a873fcf28b589560276ae92f14823faa1a", "patch": "@@ -1,3 +1,29 @@\n+2003-04-06  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * doc/invoke.texi (RS/6000 and PowerPC Options): Document -mspe\n+        option.\n+\n+        * config/rs6000/eabispe.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Set\n+        rs6000_spe.\n+\n+        * config/rs6000/eabi.h (TARGET_E500): Define.\n+\n+        * config/rs6000/rs6000.h (TARGET_E500): Define.\n+        (TARGET_OPTIONS): Add spe= option.\n+        Declare rs6000_spe and rs6000_spe_string extern.\n+\n+        * config/rs6000/rs6000.c (branch_positive_comparison_operator):\n+        Change TARGET_SPE to TARGET_E500.\n+        (ccr_bit): Change TARGET_SPE to TARGET_E500.  Check for\n+        !TARGET_FPRS.\n+        (print_operand): Same.\n+        (rs6000_generate_compare): Same.\n+        (output_cbranch): Same.\n+        (rs6000_spe): Declare.\n+        (rs6000_spe_string): Declare.\n+        (rs6000_override_options): Call rs6000_parse_spe_option.\n+        (rs6000_parse_spe_option): New.\n+\n 2003-04-06  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* hashtable.c (gcc_obstack_init): Delete this function"}, {"sha": "e61a91fae6b6827b6adde4e66fa1d8cc3517912f", "filename": "gcc/config/rs6000/eabi.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993f19a873fcf28b589560276ae92f14823faa1a/gcc%2Fconfig%2Frs6000%2Feabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993f19a873fcf28b589560276ae92f14823faa1a/gcc%2Fconfig%2Frs6000%2Feabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.h?ref=993f19a873fcf28b589560276ae92f14823faa1a", "patch": "@@ -45,10 +45,12 @@ Boston, MA 02111-1307, USA.  */\n \n #undef TARGET_SPE_ABI\n #undef TARGET_SPE\n+#undef TARGET_E500\n #undef TARGET_ISEL\n #undef TARGET_FPRS\n \n #define TARGET_SPE_ABI rs6000_spe_abi\n-#define TARGET_SPE (rs6000_cpu == PROCESSOR_PPC8540)\n+#define TARGET_SPE rs6000_spe\n+#define TARGET_E500 (rs6000_cpu == PROCESSOR_PPC8540)\n #define TARGET_ISEL rs6000_isel\n #define TARGET_FPRS rs6000_fprs"}, {"sha": "5cbe7f7ba5e6ee9efc978128e593e719039fec43", "filename": "gcc/config/rs6000/eabispe.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993f19a873fcf28b589560276ae92f14823faa1a/gcc%2Fconfig%2Frs6000%2Feabispe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993f19a873fcf28b589560276ae92f14823faa1a/gcc%2Fconfig%2Frs6000%2Feabispe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabispe.h?ref=993f19a873fcf28b589560276ae92f14823faa1a", "patch": "@@ -36,6 +36,8 @@ Boston, MA 02111-1307, USA.  */\n   /* See note below.  */ \\\n   /*if (rs6000_long_double_size_string == NULL)*/ \\\n   /*  rs6000_long_double_type_size = 128;*/ \\\n+  if (rs6000_spe_string == NULL) \\\n+    rs6000_spe = 1; \\\n   if (rs6000_isel_string == NULL) \\\n     rs6000_isel = 1\n "}, {"sha": "921d25da23cdb12f8e430cd29c65564af8d23c39", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993f19a873fcf28b589560276ae92f14823faa1a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993f19a873fcf28b589560276ae92f14823faa1a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=993f19a873fcf28b589560276ae92f14823faa1a", "patch": "@@ -95,12 +95,18 @@ int rs6000_spe_abi;\n /* Whether isel instructions should be generated.  */\n int rs6000_isel;\n \n+/* Whether SPE simd instructions should be generated.  */\n+int rs6000_spe;\n+\n /* Nonzero if we have FPRs.  */\n int rs6000_fprs = 1;\n \n /* String from -misel=.  */\n const char *rs6000_isel_string;\n \n+/* String from -mspe=.  */\n+const char *rs6000_spe_string;\n+\n /* Set to nonzero once AIX common-mode calls have been defined.  */\n static GTY(()) int common_mode_defined;\n \n@@ -270,6 +276,7 @@ static rtx altivec_expand_stv_builtin PARAMS ((enum insn_code, tree));\n static void rs6000_parse_abi_options PARAMS ((void));\n static void rs6000_parse_vrsave_option PARAMS ((void));\n static void rs6000_parse_isel_option PARAMS ((void));\n+static void rs6000_parse_spe_option (void);\n static int first_altivec_reg_to_save PARAMS ((void));\n static unsigned int compute_vrsave_mask PARAMS ((void));\n static void is_altivec_return_reg PARAMS ((rtx, void *));\n@@ -612,7 +619,7 @@ rs6000_override_options (default_cpu)\n \t}\n     }\n \n-  if (rs6000_cpu == PROCESSOR_PPC8540)\n+  if (TARGET_E500)\n     rs6000_isel = 1;\n \n   /* If we are optimizing big endian systems for space, use the load/store\n@@ -701,6 +708,9 @@ rs6000_override_options (default_cpu)\n   /* Handle -misel= option.  */\n   rs6000_parse_isel_option ();\n \n+  /* Handle -mspe= option.  */\n+  rs6000_parse_spe_option ();\n+\n #ifdef SUBTARGET_OVERRIDE_OPTIONS\n   SUBTARGET_OVERRIDE_OPTIONS;\n #endif\n@@ -788,6 +798,20 @@ rs6000_parse_isel_option ()\n          rs6000_isel_string);\n }\n \n+/* Handle -mspe= option.  */\n+static void\n+rs6000_parse_spe_option (void)\n+{\n+  if (rs6000_spe_string == 0)\n+    return;\n+  else if (!strcmp (rs6000_spe_string, \"yes\"))\n+    rs6000_spe = 1;\n+  else if (!strcmp (rs6000_spe_string, \"no\"))\n+    rs6000_spe = 0;\n+  else\n+    error (\"unknown -mspe= option specified: '%s'\", rs6000_spe_string);\n+}\n+\n /* Handle -mvrsave= options.  */\n static void\n rs6000_parse_vrsave_option ()\n@@ -7009,7 +7033,7 @@ branch_positive_comparison_operator (op, mode)\n \n   code = GET_CODE (op);\n   return (code == EQ || code == LT || code == GT\n-\t  || (TARGET_SPE && TARGET_HARD_FLOAT && !TARGET_FPRS && code == NE)\n+\t  || (TARGET_E500 && TARGET_HARD_FLOAT && !TARGET_FPRS && code == NE)\n \t  || code == LTU || code == GTU\n \t  || code == UNORDERED);\n }\n@@ -7469,11 +7493,13 @@ ccr_bit (op, scc_p)\n   switch (code)\n     {\n     case NE:\n-      if (TARGET_SPE && TARGET_HARD_FLOAT && cc_mode == CCFPmode)\n+      if (TARGET_E500 && !TARGET_FPRS\n+\t  && TARGET_HARD_FLOAT && cc_mode == CCFPmode)\n \treturn base_bit + 1;\n       return scc_p ? base_bit + 3 : base_bit + 2;\n     case EQ:\n-      if (TARGET_SPE && TARGET_HARD_FLOAT && cc_mode == CCFPmode)\n+      if (TARGET_E500 && !TARGET_FPRS\n+\t  && TARGET_HARD_FLOAT && cc_mode == CCFPmode)\n \treturn base_bit + 1;\n       return base_bit + 2;\n     case GT:  case GTU:  case UNLE:\n@@ -7685,7 +7711,7 @@ print_operand (file, x, code)\n \t  fprintf (file, \"crnor %d,%d,%d\\n\\t\", base_bit + 3,\n \t\t   base_bit + 2, base_bit + 2);\n \t}\n-      else if (TARGET_SPE && TARGET_HARD_FLOAT\n+      else if (TARGET_E500 && !TARGET_FPRS && TARGET_HARD_FLOAT\n \t       && GET_CODE (x) == EQ\n \t       && GET_MODE (XEXP (x, 0)) == CCFPmode)\n \t{\n@@ -8192,7 +8218,7 @@ print_operand (file, x, code)\n \n \ttmp = XEXP (x, 0);\n \n-\tif (TARGET_SPE)\n+\tif (TARGET_E500)\n \t  {\n \t    /* Handle [reg].  */\n \t    if (GET_CODE (tmp) == REG)\n@@ -8477,7 +8503,8 @@ rs6000_generate_compare (code)\n   compare_result = gen_reg_rtx (comp_mode);\n \n   /* SPE FP compare instructions on the GPRs.  Yuck!  */\n-  if ((TARGET_SPE && TARGET_HARD_FLOAT) && rs6000_compare_fp_p)\n+  if ((TARGET_E500 && !TARGET_FPRS && TARGET_HARD_FLOAT)\n+      && rs6000_compare_fp_p)\n     {\n       rtx cmp, or1, or2, or_result, compare_result2;\n \n@@ -8602,7 +8629,7 @@ rs6000_generate_compare (code)\n      except for flag_unsafe_math_optimizations we don't bother.  */\n   if (rs6000_compare_fp_p\n       && ! flag_unsafe_math_optimizations\n-      && ! (TARGET_HARD_FLOAT && TARGET_SPE)\n+      && ! (TARGET_HARD_FLOAT && TARGET_E500 && !TARGET_FPRS)\n       && (code == LE || code == GE\n \t  || code == UNEQ || code == LTGT\n \t  || code == UNGT || code == UNLT))\n@@ -8730,7 +8757,7 @@ output_cbranch (op, label, reversed, insn)\n \tcode = reverse_condition (code);\n     }\n \n-  if ((TARGET_SPE && TARGET_HARD_FLOAT) && mode == CCFPmode)\n+  if ((TARGET_E500 && !TARGET_FPRS && TARGET_HARD_FLOAT) && mode == CCFPmode)\n     {\n       /* The efscmp/tst* instructions twiddle bit 2, which maps nicely\n \t to the GT bit.  */"}, {"sha": "10d6233af56d56f7c5ce50d3e9bc72e082150313", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993f19a873fcf28b589560276ae92f14823faa1a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993f19a873fcf28b589560276ae92f14823faa1a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=993f19a873fcf28b589560276ae92f14823faa1a", "patch": "@@ -388,6 +388,8 @@ extern enum processor_type rs6000_cpu;\n     N_(\"Specify size of long double (64 or 128 bits)\") },\t\t\\\n    {\"isel=\", &rs6000_isel_string,                                       \\\n     N_(\"Specify yes/no if isel instructions should be generated\") },    \\\n+   {\"spe=\", &rs6000_spe_string,                                         \\\n+    N_(\"Specify yes/no if SPE SIMD instructions should be generated\") },\\\n    {\"vrsave=\", &rs6000_altivec_vrsave_string,                         \\\n     N_(\"Specify yes/no if VRSAVE instructions should be generated for AltiVec\") }, \\\n    {\"longcall\", &rs6000_longcall_switch,\t\t\t\t\\\n@@ -425,8 +427,10 @@ extern int rs6000_long_double_type_size;\n extern int rs6000_altivec_abi;\n extern int rs6000_spe_abi;\n extern int rs6000_isel;\n+extern int rs6000_spe;\n extern int rs6000_fprs;\n extern const char *rs6000_isel_string;\n+extern const char *rs6000_spe_string;\n extern const char *rs6000_altivec_vrsave_string;\n extern int rs6000_altivec_vrsave;\n extern const char *rs6000_longcall_switch;\n@@ -438,6 +442,7 @@ extern int rs6000_default_long_calls;\n \n #define TARGET_SPE_ABI 0\n #define TARGET_SPE 0\n+#define TARGET_E500 0\n #define TARGET_ISEL 0\n #define TARGET_FPRS 1\n "}, {"sha": "fac5ae922cfc50f6896b9f14c23bfba0cc68c436", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993f19a873fcf28b589560276ae92f14823faa1a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993f19a873fcf28b589560276ae92f14823faa1a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=993f19a873fcf28b589560276ae92f14823faa1a", "patch": "@@ -447,6 +447,7 @@ in the following sections.\n -mabi=altivec -mabi=no-altivec @gol\n -mabi=spe -mabi=no-spe @gol\n -misel=yes -misel=no @gol\n+-mspe=yes -mspe=no @gol\n -mprototype  -mno-prototype @gol\n -msim  -mmvme  -mads  -myellowknife  -memb -msdata @gol\n -msdata=@var{opt}  -mvxworks -mwindiss -G @var{num} -pthread}\n@@ -7028,6 +7029,12 @@ Disable Booke SPE ABI extensions for the current ABI.\n @opindex misel\n This switch enables or disables the generation of ISEL instructions.\n \n+@item -mspe=@var{yes/no}\n+@itemx -mspe\n+@opindex mspe\n+This switch enables or disables the generation of SPE simd\n+instructions.\n+\n @item -mfull-toc\n @itemx -mno-fp-in-toc\n @itemx -mno-sum-in-toc"}]}