{"sha": "c1d70e1a522d8c82ca8898a46d746f2f352bf6d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFkNzBlMWE1MjJkOGM4MmNhODg5OGE0NmQ3NDZmMmYzNTJiZjZkNQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2005-10-13T16:15:30Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2005-10-13T16:15:30Z"}, "message": "unix.c (fd_alloc_r_at): Use read() instead of do_read() only in case of special files (e.g.\n\n2005-10-13  Thomas Koenig  <Thomas.Koenig@online.de>\n\n\t* io/unix.c(fd_alloc_r_at):  Use read() instead of do_read()\n\tonly in case of special files (e.g. terminals).\n\nFrom-SVN: r105373", "tree": {"sha": "7992d61624301cfeea776530b917277c88d522ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7992d61624301cfeea776530b917277c88d522ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1d70e1a522d8c82ca8898a46d746f2f352bf6d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1d70e1a522d8c82ca8898a46d746f2f352bf6d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1d70e1a522d8c82ca8898a46d746f2f352bf6d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1d70e1a522d8c82ca8898a46d746f2f352bf6d5/comments", "author": null, "committer": null, "parents": [{"sha": "8c210c4104f0296d666aa25f5f904fc14b6da239", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c210c4104f0296d666aa25f5f904fc14b6da239", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c210c4104f0296d666aa25f5f904fc14b6da239"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "16552eedb5e6d055ebac885e016a637db78018de", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1d70e1a522d8c82ca8898a46d746f2f352bf6d5/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1d70e1a522d8c82ca8898a46d746f2f352bf6d5/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c1d70e1a522d8c82ca8898a46d746f2f352bf6d5", "patch": "@@ -1,3 +1,8 @@\n+2005-10-13  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\t* io/unix.c(fd_alloc_r_at):  Use read() instead of do_read()\n+\tonly in case of special files (e.g. terminals).\n+\n 2005-20-13  Uros Bizjak  <uros@kss-loka.si>\n \n \t* config/fpu-387.h (set_fpu): Add \"=m\" for stmxcsr.\n@@ -26,8 +31,8 @@\n \n 2005-10-12  Janne Blomqvist <jblomqvi@cc.hut.fi>\n \n-\t* io/unix.c: Remove parts of patch of 2005/10/07 that cause\n-\tinput from the terminal to hang.\n+\t* io/unix.c(fd_alloc_r_at): Remove parts of patch of 2005/10/07 that\n+\tcause input from the terminal to hang.\n \n 2005-10-11  Steven G. Kargl  <kargls@comcast.net>\n "}, {"sha": "ea03515f4688210cbe9a135f65a3a94d5df2481f", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1d70e1a522d8c82ca8898a46d746f2f352bf6d5/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1d70e1a522d8c82ca8898a46d746f2f352bf6d5/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=c1d70e1a522d8c82ca8898a46d746f2f352bf6d5", "patch": "@@ -440,7 +440,6 @@ static char *\n fd_alloc_r_at (unix_stream * s, int *len, gfc_offset where)\n {\n   gfc_offset m;\n-  int n;\n \n   if (where == -1)\n     where = s->logical_offset;\n@@ -462,13 +461,32 @@ fd_alloc_r_at (unix_stream * s, int *len, gfc_offset where)\n   if (s->physical_offset != m && lseek (s->fd, m, SEEK_SET) < 0)\n     return NULL;\n \n-  n = read (s->fd, s->buffer + s->active, s->len - s->active);\n-  if (n < 0)\n-    return NULL;\n+  /* do_read() hangs on read from terminals for *BSD-systems.  Only\n+     use read() in that case.  */\n+\n+  if (s->special_file)\n+    {\n+      ssize_t n;\n+\n+      n = read (s->fd, s->buffer + s->active, s->len - s->active);\n+      if (n < 0)\n+\treturn NULL;\n+\n+      s->physical_offset = where + n;\n+      s->active += n;\n+    }\n+  else\n+    {\n+      size_t n;\n \n-  s->physical_offset = where + n;\n+      n = s->len - s->active;\n+      if (do_read (s, s->buffer + s->active, &n) != 0)\n+\treturn NULL;\n+\n+      s->physical_offset = where + n;\n+      s->active += n;\n+    }\n \n-  s->active += n;\n   if (s->active < *len)\n     *len = s->active;\t\t/* Bytes actually available */\n "}]}