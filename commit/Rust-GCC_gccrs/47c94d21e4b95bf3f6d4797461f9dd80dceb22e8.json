{"sha": "47c94d21e4b95bf3f6d4797461f9dd80dceb22e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdjOTRkMjFlNGI5NWJmM2Y2ZDQ3OTc0NjFmOWRkODBkY2ViMjJlOA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-05-02T15:42:39Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-05-02T15:42:39Z"}, "message": "gcc_update (gcc/config/m68k/m68k-tables.opt): New dependencies.\n\ncontrib:\n\t* gcc_update (gcc/config/m68k/m68k-tables.opt): New dependencies.\n\ngcc:\n\t* config/m68k/genopt.sh, config/m68k/m68k-isas.def,\n\tconfig/m68k/m68k-microarchs.def, config/m68k/m68k-opts.h,\n\tconfig/m68k/t-opts: New files.\n\t* config/m68k/m68k-tables.opt: New file (generated).\n\t* config.gcc (fido-*-*, m68k-*-*): Add m68k/m68k-tables.opt to\n\textra_options and m68k/t-opts to tmake_file.\n\t* config/m68k/m68k.c (m68k_library_id_string): More to m68k.opt.\n\t(all_isas): Initialize using m68k-isas.def.\n\t(all_microarchs): Initialize using m68k-microarchs.def.\n\t(m68k_find_selection): Remove.\n\t(m68k_handle_option): Don't assert that global structures are in\n\tuse.  Use error_at.  Access variables via opts pointer.  Don't\n\thandle -march=, -mcpu= and -mtune= here.  Set gcc_options fields\n\tdirectly for -m68020-40 and -m68020-60.\n\t(m68k_option_override): Set m68k_arch_entry, m68k_cpu_entry and\n\tm68k_tune_entry here.\n\t* config/m68k/m68k.h (enum uarch_type, enum target_device): Move\n\tto m68k-opts.h.\n\t(m68k_library_id_string): Remove declaration.\n\t* config/m68k/m68k.opt (config/m68k/m68k-opts.h): New\n\tHeaderInclude.\n\t(m68k_library_id_string): New Variable.\n\t(march=, mcpu=, mtune=): Use Enum and Var.\n\nFrom-SVN: r173256", "tree": {"sha": "de4216ecaa5f4cfa346989b9a31f180441372fdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de4216ecaa5f4cfa346989b9a31f180441372fdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e562bf36b644ab3403fc28a5e41bee94fcca1deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e562bf36b644ab3403fc28a5e41bee94fcca1deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e562bf36b644ab3403fc28a5e41bee94fcca1deb"}], "stats": {"total": 846, "additions": 733, "deletions": 113}, "files": [{"sha": "86054759b4e1e95b2d06385919f7103798d13da6", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=47c94d21e4b95bf3f6d4797461f9dd80dceb22e8", "patch": "@@ -1,3 +1,7 @@\n+2011-05-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc_update (gcc/config/m68k/m68k-tables.opt): New dependencies.\n+\n 2011-04-25  Jan Kratochvil  <jan.kratochvil@redhat.com>\n \n \t* paranoia.cc (ENUM_BITFIELD): Remove."}, {"sha": "337f3d104132aebf4736df575d67234cca497753", "filename": "contrib/gcc_update", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/contrib%2Fgcc_update", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/contrib%2Fgcc_update", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc_update?ref=47c94d21e4b95bf3f6d4797461f9dd80dceb22e8", "patch": "@@ -81,6 +81,7 @@ gcc/config.in: gcc/cstamp-h.in\n gcc/fixinc/fixincl.x: gcc/fixinc/fixincl.tpl gcc/fixinc/inclhack.def\n gcc/config/arm/arm-tune.md: gcc/config/arm/arm-cores.def gcc/config/arm/gentune.sh\n gcc/config/arm/arm-tables.opt: gcc/config/arm/arm-arches.def gcc/config/arm/arm-cores.def gcc/config/arm/genopt.sh\n+gcc/config/m68k/m68k-tables.opt: gcc/config/m68k/m68k-devices.def gcc/config/m68k/m68k-isas.def gcc/config/m68k/m68k-microarchs.def gcc/config/m68k/genopt.sh\n # And then, language-specific files\n gcc/cp/cfns.h: gcc/cp/cfns.gperf\n gcc/java/keyword.h: gcc/java/keyword.gperf"}, {"sha": "28f909f7ea91688bf3a0fb6aa01f8a0a6afa4294", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47c94d21e4b95bf3f6d4797461f9dd80dceb22e8", "patch": "@@ -1,3 +1,29 @@\n+2011-05-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/m68k/genopt.sh, config/m68k/m68k-isas.def,\n+\tconfig/m68k/m68k-microarchs.def, config/m68k/m68k-opts.h,\n+\tconfig/m68k/t-opts: New files.\n+\t* config/m68k/m68k-tables.opt: New file (generated).\n+\t* config.gcc (fido-*-*, m68k-*-*): Add m68k/m68k-tables.opt to\n+\textra_options and m68k/t-opts to tmake_file.\n+\t* config/m68k/m68k.c (m68k_library_id_string): More to m68k.opt.\n+\t(all_isas): Initialize using m68k-isas.def.\n+\t(all_microarchs): Initialize using m68k-microarchs.def.\n+\t(m68k_find_selection): Remove.\n+\t(m68k_handle_option): Don't assert that global structures are in\n+\tuse.  Use error_at.  Access variables via opts pointer.  Don't\n+\thandle -march=, -mcpu= and -mtune= here.  Set gcc_options fields\n+\tdirectly for -m68020-40 and -m68020-60.\n+\t(m68k_option_override): Set m68k_arch_entry, m68k_cpu_entry and\n+\tm68k_tune_entry here.\n+\t* config/m68k/m68k.h (enum uarch_type, enum target_device): Move\n+\tto m68k-opts.h.\n+\t(m68k_library_id_string): Remove declaration.\n+\t* config/m68k/m68k.opt (config/m68k/m68k-opts.h): New\n+\tHeaderInclude.\n+\t(m68k_library_id_string): New Variable.\n+\t(march=, mcpu=, mtune=): Use Enum and Var.\n+\n 2011-05-02  Richard Guenther  <rguenther@suse.de>\n \n \t* varasm.c (output_constructor_regular_field): Compute zero-based"}, {"sha": "c204ab1f9545457bf33bdd95f98acc8c8fd61de7", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=47c94d21e4b95bf3f6d4797461f9dd80dceb22e8", "patch": "@@ -317,6 +317,7 @@ moxie*)\tcpu_type=moxie\n fido-*-*)\n \tcpu_type=m68k\n \textra_headers=math-68881.h\n+\textra_options=\"${extra_options} m68k/m68k-tables.opt\"\n         ;;\n i[34567]86-*-*)\n \tcpu_type=i386\n@@ -360,6 +361,7 @@ m32r*-*-*)\n         ;;\n m68k-*-*)\n \textra_headers=math-68881.h\n+\textra_options=\"${extra_options} m68k/m68k-tables.opt\"\n \t;;\n microblaze*-*-*)\n         cpu_type=microblaze\n@@ -3524,6 +3526,7 @@ case ${target} in\n \n \tfido*-*-* | m68k*-*-*)\n \t\ttarget_cpu_default2=$m68k_cpu_ident\n+\t\ttmake_file=\"m68k/t-opts $tmake_file\"\n \t\tif [ x\"$m68k_arch_family\" != x ]; then\n \t\t        tmake_file=\"m68k/t-$m68k_arch_family $tmake_file\"\n \t\tfi"}, {"sha": "df006b4a23c9574011a1d2c86b1760a2054deb4f", "filename": "gcc/config/m68k/genopt.sh", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig%2Fm68k%2Fgenopt.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig%2Fm68k%2Fgenopt.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fgenopt.sh?ref=47c94d21e4b95bf3f6d4797461f9dd80dceb22e8", "patch": "@@ -0,0 +1,92 @@\n+#!/bin/sh\n+# Generate m68k-tables.opt from the lists in *.def.\n+# Copyright (C) 2011 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+cat <<EOF\n+; -*- buffer-read-only: t -*-\n+; Generated automatically by genopt.sh from m68k-devices.def,\n+; m68k-isas.def and m68k-microarchs.def.\n+\n+; Copyright (C) 2011 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+Enum\n+Name(target_device) Type(enum target_device)\n+Known M68K CPUs (for use with the -mcpu= option):\n+\n+EOF\n+\n+awk -F'[(, \t]+' '/^M68K_DEVICE/ {\n+    name = $2\n+    enum = $3\n+    gsub(\"\\\"\", \"\", name)\n+    print \"EnumValue\"\n+    print \"Enum(target_device) String(\" name \") Value(\" enum \")\"\n+    print \"\"\n+}' $1/m68k-devices.def\n+\n+cat <<EOF\n+Enum\n+Name(uarch_type) Type(enum uarch_type)\n+Known M68K microarchitectures (for use with the -mtune= option):\n+\n+EOF\n+\n+awk -F'[(, \t]+' '/^M68K_MICROARCH/ {\n+    name = $2\n+    enum = $4\n+    gsub(\"\\\"\", \"\", name)\n+    print \"EnumValue\"\n+    print \"Enum(uarch_type) String(\" name \") Value(u\" enum \")\"\n+    print \"\"\n+}' $1/m68k-microarchs.def\n+\n+cat <<EOF\n+Enum\n+Name(m68k_isa) Type(int)\n+Known M68K ISAs (for use with the -march= option):\n+\n+EOF\n+\n+awk -F'[(, \t]+' 'BEGIN {\n+    value = 0\n+}\n+/^M68K_ISA/ {\n+    name = $2\n+    gsub(\"\\\"\", \"\", name)\n+    print \"EnumValue\"\n+    print \"Enum(m68k_isa) String(\" name \") Value(\" value \")\"\n+    print \"\"\n+    value++\n+}' $1/m68k-isas.def"}, {"sha": "f4d984c892745d323692dd74a7c537478f422445", "filename": "gcc/config/m68k/m68k-isas.def", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig%2Fm68k%2Fm68k-isas.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig%2Fm68k%2Fm68k-isas.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-isas.def?ref=47c94d21e4b95bf3f6d4797461f9dd80dceb22e8", "patch": "@@ -0,0 +1,43 @@\n+/* m68k ISA names.\n+   Copyright (C) 1987, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Define ISAs for the -march option, used both in m68k.c and to\n+   generate m68k-tables.opt.  Before including this file, define a\n+   macro:\n+\n+   M68K_ISA (NAME, DEVICE, MICROARCH, ISA, FLAGS)\n+\n+   where NAME is the name for use with -march=, DEVICE is the value in\n+   the target_device enumeration of a representative device, FLAGS is\n+   the set of FL_* flags that apply to this ISA and the other\n+   arguments are as for M68K_DEVICE in m68k-devices.def.  */\n+\n+M68K_ISA (\"68000\",    m68000,     68000, isa_00,    FL_FOR_isa_00)\n+M68K_ISA (\"68010\",    m68010,     68010, isa_10,    FL_FOR_isa_10)\n+M68K_ISA (\"68020\",    m68020,     68020, isa_20,    FL_FOR_isa_20)\n+M68K_ISA (\"68030\",    m68030,     68030, isa_20,    FL_FOR_isa_20)\n+M68K_ISA (\"68040\",    m68040,     68040, isa_40,    FL_FOR_isa_40)\n+M68K_ISA (\"68060\",    m68060,     68060, isa_40,    FL_FOR_isa_40)\n+M68K_ISA (\"cpu32\",    cpu32,      cpu32, isa_20,    FL_FOR_isa_cpu32)\n+M68K_ISA (\"isaa\",     mcf5206e,   cfv2,  isa_a,     FL_FOR_isa_a | FL_CF_HWDIV)\n+M68K_ISA (\"isaaplus\", mcf5271,    cfv2,  isa_aplus, FL_FOR_isa_aplus | FL_CF_HWDIV)\n+M68K_ISA (\"isab\",     mcf5407,    cfv4,  isa_b,     FL_FOR_isa_b)\n+M68K_ISA (\"isac\",     unk_device, cfv4,  isa_c,     FL_FOR_isa_c | FL_CF_HWDIV)"}, {"sha": "687b20f211285e2e62572ec750fac31d36d960cb", "filename": "gcc/config/m68k/m68k-microarchs.def", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig%2Fm68k%2Fm68k-microarchs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig%2Fm68k%2Fm68k-microarchs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-microarchs.def?ref=47c94d21e4b95bf3f6d4797461f9dd80dceb22e8", "patch": "@@ -0,0 +1,46 @@\n+/* m68k microarchitecture names.\n+   Copyright (C) 1987, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Define microarchitectures for the -mtune option, used both in\n+   m68k.c and to generate m68k-tables.opt.  Before including this\n+   file, define a macro:\n+\n+   M68K_MICROARCH (NAME, DEVICE, MICROARCH, ISA, FLAGS)\n+\n+   where NAME is the name for use with -mtune=, DEVICE is the value in\n+   the target_device enumeration of a representative device, FLAGS is\n+   the set of FL_* flags that apply to this ISA and the other\n+   arguments are as for M68K_DEVICE in m68k-devices.def.  */\n+\n+M68K_MICROARCH (\"68000\",    m68000,  68000,    isa_00,  FL_FOR_isa_00)\n+M68K_MICROARCH (\"68010\",    m68010,  68010,    isa_10,  FL_FOR_isa_10)\n+M68K_MICROARCH (\"68020\",    m68020,  68020,    isa_20,  FL_FOR_isa_20)\n+M68K_MICROARCH (\"68020-40\", m68020,  68020_40, isa_20,  FL_FOR_isa_20)\n+M68K_MICROARCH (\"68020-60\", m68020,  68020_60, isa_20,  FL_FOR_isa_20)\n+M68K_MICROARCH (\"68030\",    m68030,  68030,    isa_20,  FL_FOR_isa_20)\n+M68K_MICROARCH (\"68040\",    m68040,  68040,    isa_40,  FL_FOR_isa_40)\n+M68K_MICROARCH (\"68060\",    m68060,  68060,    isa_40,  FL_FOR_isa_40)\n+M68K_MICROARCH (\"cpu32\",    cpu32,   cpu32,    isa_20,  FL_FOR_isa_cpu32)\n+M68K_MICROARCH (\"cfv1\",     mcf51qe, cfv1,     isa_c,   FL_FOR_isa_c)\n+M68K_MICROARCH (\"cfv2\",     mcf5206, cfv2,     isa_a,   FL_FOR_isa_a)\n+M68K_MICROARCH (\"cfv3\",     mcf5307, cfv3,     isa_a,   FL_FOR_isa_a | FL_CF_HWDIV)\n+M68K_MICROARCH (\"cfv4\",     mcf5407, cfv4,     isa_b,   FL_FOR_isa_b)\n+M68K_MICROARCH (\"cfv4e\",    mcf547x, cfv4e,    isa_b,   FL_FOR_isa_b | FL_CF_USP| FL_CF_EMAC | FL_CF_FPU)"}, {"sha": "0d6e5c414623ad2b399bdc88a97f509558f4d9e6", "filename": "gcc/config/m68k/m68k-opts.h", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig%2Fm68k%2Fm68k-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig%2Fm68k%2Fm68k-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-opts.h?ref=47c94d21e4b95bf3f6d4797461f9dd80dceb22e8", "patch": "@@ -0,0 +1,46 @@\n+/* Definitions for option handling for Motorola 680x0/ColdFire.\n+   Copyright (C) 1987, 1988, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef M68K_OPTS_H\n+#define M68K_OPTS_H\n+\n+/* Values used in the MICROARCH argument to M68K_DEVICE.  */\n+enum uarch_type\n+{\n+#define M68K_MICROARCH(NAME,DEVICE,MICROARCH,ISA,FLAGS) \\\n+  u##MICROARCH,\n+#include \"m68k-microarchs.def\"\n+#undef M68K_MICROARCH\n+  ucfv5,\n+  unk_arch\n+};\n+\n+/* An enumeration of all supported target devices.  */\n+enum target_device\n+{\n+#define M68K_DEVICE(NAME,ENUM_VALUE,FAMILY,MULTILIB,MICROARCH,ISA,FLAGS) \\\n+  ENUM_VALUE,\n+#include \"m68k-devices.def\"\n+#undef M68K_DEVICE\n+  unk_device\n+};\n+\n+#endif"}, {"sha": "96eabc7f262122da3daf62d843444c90026ad77b", "filename": "gcc/config/m68k/m68k-tables.opt", "status": "added", "additions": 427, "deletions": 0, "changes": 427, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig%2Fm68k%2Fm68k-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig%2Fm68k%2Fm68k-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-tables.opt?ref=47c94d21e4b95bf3f6d4797461f9dd80dceb22e8", "patch": "@@ -0,0 +1,427 @@\n+; -*- buffer-read-only: t -*-\n+; Generated automatically by genopt.sh from m68k-devices.def,\n+; m68k-isas.def and m68k-microarchs.def.\n+\n+; Copyright (C) 2011 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+Enum\n+Name(target_device) Type(enum target_device)\n+Known M68K CPUs (for use with the -mcpu= option):\n+\n+EnumValue\n+Enum(target_device) String(68000) Value(m68000)\n+\n+EnumValue\n+Enum(target_device) String(68010) Value(m68010)\n+\n+EnumValue\n+Enum(target_device) String(68020) Value(m68020)\n+\n+EnumValue\n+Enum(target_device) String(68030) Value(m68030)\n+\n+EnumValue\n+Enum(target_device) String(68040) Value(m68040)\n+\n+EnumValue\n+Enum(target_device) String(68060) Value(m68060)\n+\n+EnumValue\n+Enum(target_device) String(68302) Value(m68302)\n+\n+EnumValue\n+Enum(target_device) String(68332) Value(m68332)\n+\n+EnumValue\n+Enum(target_device) String(cpu32) Value(cpu32)\n+\n+EnumValue\n+Enum(target_device) String(51) Value(mcf51)\n+\n+EnumValue\n+Enum(target_device) String(51ac) Value(mcf51ac)\n+\n+EnumValue\n+Enum(target_device) String(51cn) Value(mcf51cn)\n+\n+EnumValue\n+Enum(target_device) String(51em) Value(mcf51em)\n+\n+EnumValue\n+Enum(target_device) String(51jm) Value(mcf51jm)\n+\n+EnumValue\n+Enum(target_device) String(51qe) Value(mcf51qe)\n+\n+EnumValue\n+Enum(target_device) String(5202) Value(mcf5202)\n+\n+EnumValue\n+Enum(target_device) String(5204) Value(mcf5204)\n+\n+EnumValue\n+Enum(target_device) String(5206) Value(mcf5206)\n+\n+EnumValue\n+Enum(target_device) String(5206e) Value(mcf5206e)\n+\n+EnumValue\n+Enum(target_device) String(5207) Value(mcf5207)\n+\n+EnumValue\n+Enum(target_device) String(5208) Value(mcf5208)\n+\n+EnumValue\n+Enum(target_device) String(5210a) Value(mcf5210a)\n+\n+EnumValue\n+Enum(target_device) String(5211a) Value(mcf5211a)\n+\n+EnumValue\n+Enum(target_device) String(5211) Value(mcf5211)\n+\n+EnumValue\n+Enum(target_device) String(5212) Value(mcf5212)\n+\n+EnumValue\n+Enum(target_device) String(5213) Value(mcf5213)\n+\n+EnumValue\n+Enum(target_device) String(5214) Value(mcf5214)\n+\n+EnumValue\n+Enum(target_device) String(5216) Value(mcf5216)\n+\n+EnumValue\n+Enum(target_device) String(5221x) Value(mcf5221x)\n+\n+EnumValue\n+Enum(target_device) String(52221) Value(mcf52221)\n+\n+EnumValue\n+Enum(target_device) String(52223) Value(mcf52223)\n+\n+EnumValue\n+Enum(target_device) String(52230) Value(mcf52230)\n+\n+EnumValue\n+Enum(target_device) String(52231) Value(mcf52231)\n+\n+EnumValue\n+Enum(target_device) String(52232) Value(mcf52232)\n+\n+EnumValue\n+Enum(target_device) String(52233) Value(mcf52233)\n+\n+EnumValue\n+Enum(target_device) String(52234) Value(mcf52234)\n+\n+EnumValue\n+Enum(target_device) String(52235) Value(mcf52235)\n+\n+EnumValue\n+Enum(target_device) String(5224) Value(mcf5224)\n+\n+EnumValue\n+Enum(target_device) String(5225) Value(mcf5225)\n+\n+EnumValue\n+Enum(target_device) String(52252) Value(mcf52252)\n+\n+EnumValue\n+Enum(target_device) String(52254) Value(mcf52254)\n+\n+EnumValue\n+Enum(target_device) String(52255) Value(mcf52255)\n+\n+EnumValue\n+Enum(target_device) String(52256) Value(mcf52256)\n+\n+EnumValue\n+Enum(target_device) String(52258) Value(mcf52258)\n+\n+EnumValue\n+Enum(target_device) String(52259) Value(mcf52259)\n+\n+EnumValue\n+Enum(target_device) String(52274) Value(mcf52274)\n+\n+EnumValue\n+Enum(target_device) String(52277) Value(mcf52277)\n+\n+EnumValue\n+Enum(target_device) String(5232) Value(mcf5232)\n+\n+EnumValue\n+Enum(target_device) String(5233) Value(mcf5233)\n+\n+EnumValue\n+Enum(target_device) String(5234) Value(mcf5234)\n+\n+EnumValue\n+Enum(target_device) String(5235) Value(mcf5235)\n+\n+EnumValue\n+Enum(target_device) String(523x) Value(mcf523x)\n+\n+EnumValue\n+Enum(target_device) String(5249) Value(mcf5249)\n+\n+EnumValue\n+Enum(target_device) String(5250) Value(mcf5250)\n+\n+EnumValue\n+Enum(target_device) String(5253) Value(mcf5253)\n+\n+EnumValue\n+Enum(target_device) String(5270) Value(mcf5270)\n+\n+EnumValue\n+Enum(target_device) String(5271) Value(mcf5271)\n+\n+EnumValue\n+Enum(target_device) String(5272) Value(mcf5272)\n+\n+EnumValue\n+Enum(target_device) String(5274) Value(mcf5274)\n+\n+EnumValue\n+Enum(target_device) String(5275) Value(mcf5275)\n+\n+EnumValue\n+Enum(target_device) String(5280) Value(mcf5280)\n+\n+EnumValue\n+Enum(target_device) String(5281) Value(mcf5281)\n+\n+EnumValue\n+Enum(target_device) String(5282) Value(mcf5282)\n+\n+EnumValue\n+Enum(target_device) String(528x) Value(mcf528x)\n+\n+EnumValue\n+Enum(target_device) String(53011) Value(mcf53011)\n+\n+EnumValue\n+Enum(target_device) String(53012) Value(mcf53012)\n+\n+EnumValue\n+Enum(target_device) String(53013) Value(mcf53013)\n+\n+EnumValue\n+Enum(target_device) String(53014) Value(mcf53014)\n+\n+EnumValue\n+Enum(target_device) String(53015) Value(mcf53015)\n+\n+EnumValue\n+Enum(target_device) String(53016) Value(mcf53016)\n+\n+EnumValue\n+Enum(target_device) String(53017) Value(mcf53017)\n+\n+EnumValue\n+Enum(target_device) String(5307) Value(mcf5307)\n+\n+EnumValue\n+Enum(target_device) String(5327) Value(mcf5327)\n+\n+EnumValue\n+Enum(target_device) String(5328) Value(mcf5328)\n+\n+EnumValue\n+Enum(target_device) String(5329) Value(mcf5329)\n+\n+EnumValue\n+Enum(target_device) String(532x) Value(mcf532x)\n+\n+EnumValue\n+Enum(target_device) String(5372) Value(mcf5372)\n+\n+EnumValue\n+Enum(target_device) String(5373) Value(mcf5373)\n+\n+EnumValue\n+Enum(target_device) String(537x) Value(mcf537x)\n+\n+EnumValue\n+Enum(target_device) String(5407) Value(mcf5407)\n+\n+EnumValue\n+Enum(target_device) String(54410) Value(mcf54410)\n+\n+EnumValue\n+Enum(target_device) String(54415) Value(mcf54415)\n+\n+EnumValue\n+Enum(target_device) String(54416) Value(mcf54416)\n+\n+EnumValue\n+Enum(target_device) String(54417) Value(mcf54417)\n+\n+EnumValue\n+Enum(target_device) String(54418) Value(mcf54418)\n+\n+EnumValue\n+Enum(target_device) String(54450) Value(mcf54450)\n+\n+EnumValue\n+Enum(target_device) String(54451) Value(mcf54451)\n+\n+EnumValue\n+Enum(target_device) String(54452) Value(mcf54452)\n+\n+EnumValue\n+Enum(target_device) String(54453) Value(mcf54453)\n+\n+EnumValue\n+Enum(target_device) String(54454) Value(mcf54454)\n+\n+EnumValue\n+Enum(target_device) String(54455) Value(mcf54455)\n+\n+EnumValue\n+Enum(target_device) String(5470) Value(mcf5470)\n+\n+EnumValue\n+Enum(target_device) String(5471) Value(mcf5471)\n+\n+EnumValue\n+Enum(target_device) String(5472) Value(mcf5472)\n+\n+EnumValue\n+Enum(target_device) String(5473) Value(mcf5473)\n+\n+EnumValue\n+Enum(target_device) String(5474) Value(mcf5474)\n+\n+EnumValue\n+Enum(target_device) String(5475) Value(mcf5475)\n+\n+EnumValue\n+Enum(target_device) String(547x) Value(mcf547x)\n+\n+EnumValue\n+Enum(target_device) String(5480) Value(mcf5480)\n+\n+EnumValue\n+Enum(target_device) String(5481) Value(mcf5481)\n+\n+EnumValue\n+Enum(target_device) String(5482) Value(mcf5482)\n+\n+EnumValue\n+Enum(target_device) String(5483) Value(mcf5483)\n+\n+EnumValue\n+Enum(target_device) String(5484) Value(mcf5484)\n+\n+EnumValue\n+Enum(target_device) String(5485) Value(mcf5485)\n+\n+EnumValue\n+Enum(target_device) String(548x) Value(mcf548x)\n+\n+EnumValue\n+Enum(target_device) String(fidoa) Value(fidoa)\n+\n+Enum\n+Name(uarch_type) Type(enum uarch_type)\n+Known M68K microarchitectures (for use with the -mtune= option):\n+\n+EnumValue\n+Enum(uarch_type) String(68000) Value(u68000)\n+\n+EnumValue\n+Enum(uarch_type) String(68010) Value(u68010)\n+\n+EnumValue\n+Enum(uarch_type) String(68020) Value(u68020)\n+\n+EnumValue\n+Enum(uarch_type) String(68020-40) Value(u68020_40)\n+\n+EnumValue\n+Enum(uarch_type) String(68020-60) Value(u68020_60)\n+\n+EnumValue\n+Enum(uarch_type) String(68030) Value(u68030)\n+\n+EnumValue\n+Enum(uarch_type) String(68040) Value(u68040)\n+\n+EnumValue\n+Enum(uarch_type) String(68060) Value(u68060)\n+\n+EnumValue\n+Enum(uarch_type) String(cpu32) Value(ucpu32)\n+\n+EnumValue\n+Enum(uarch_type) String(cfv1) Value(ucfv1)\n+\n+EnumValue\n+Enum(uarch_type) String(cfv2) Value(ucfv2)\n+\n+EnumValue\n+Enum(uarch_type) String(cfv3) Value(ucfv3)\n+\n+EnumValue\n+Enum(uarch_type) String(cfv4) Value(ucfv4)\n+\n+EnumValue\n+Enum(uarch_type) String(cfv4e) Value(ucfv4e)\n+\n+Enum\n+Name(m68k_isa) Type(int)\n+Known M68K ISAs (for use with the -march= option):\n+\n+EnumValue\n+Enum(m68k_isa) String(68000) Value(0)\n+\n+EnumValue\n+Enum(m68k_isa) String(68010) Value(1)\n+\n+EnumValue\n+Enum(m68k_isa) String(68020) Value(2)\n+\n+EnumValue\n+Enum(m68k_isa) String(68030) Value(3)\n+\n+EnumValue\n+Enum(m68k_isa) String(68040) Value(4)\n+\n+EnumValue\n+Enum(m68k_isa) String(68060) Value(5)\n+\n+EnumValue\n+Enum(m68k_isa) String(cpu32) Value(6)\n+\n+EnumValue\n+Enum(m68k_isa) String(isaa) Value(7)\n+\n+EnumValue\n+Enum(m68k_isa) String(isaaplus) Value(8)\n+\n+EnumValue\n+Enum(m68k_isa) String(isab) Value(9)\n+\n+EnumValue\n+Enum(m68k_isa) String(isac) Value(10)\n+"}, {"sha": "c311d1289c24393737d8eb8cfd17b5d671fbe4d8", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 29, "deletions": 79, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=47c94d21e4b95bf3f6d4797461f9dd80dceb22e8", "patch": "@@ -165,10 +165,6 @@ static rtx m68k_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t      const_tree, bool);\n static bool m68k_cannot_force_const_mem (enum machine_mode mode, rtx x);\n \f\n-\n-/* Specify the identification number of the library being built */\n-const char *m68k_library_id_string = \"_current_shared_library_a5_offset_\";\n-\f\n /* Initialize the GCC target structure.  */\n \n #if INT_OP_GROUP == INT_OP_DOT_WORD\n@@ -385,45 +381,21 @@ static const struct m68k_target_selection all_devices[] =\n    Used for -march selection.  */\n static const struct m68k_target_selection all_isas[] =\n {\n-  { \"68000\",    m68000,     NULL,  u68000,   isa_00,    FL_FOR_isa_00 },\n-  { \"68010\",    m68010,     NULL,  u68010,   isa_10,    FL_FOR_isa_10 },\n-  { \"68020\",    m68020,     NULL,  u68020,   isa_20,    FL_FOR_isa_20 },\n-  { \"68030\",    m68030,     NULL,  u68030,   isa_20,    FL_FOR_isa_20 },\n-  { \"68040\",    m68040,     NULL,  u68040,   isa_40,    FL_FOR_isa_40 },\n-  { \"68060\",    m68060,     NULL,  u68060,   isa_40,    FL_FOR_isa_40 },\n-  { \"cpu32\",    cpu32,      NULL,  ucpu32,   isa_20,    FL_FOR_isa_cpu32 },\n-  { \"isaa\",     mcf5206e,   NULL,  ucfv2,    isa_a,     (FL_FOR_isa_a\n-\t\t\t\t\t\t\t | FL_CF_HWDIV) },\n-  { \"isaaplus\", mcf5271,    NULL,  ucfv2,    isa_aplus, (FL_FOR_isa_aplus\n-\t\t\t\t\t\t\t | FL_CF_HWDIV) },\n-  { \"isab\",     mcf5407,    NULL,  ucfv4,    isa_b,     FL_FOR_isa_b },\n-  { \"isac\",     unk_device, NULL,  ucfv4,    isa_c,     (FL_FOR_isa_c\n-\t\t\t\t\t\t\t | FL_CF_HWDIV) },\n+#define M68K_ISA(NAME,DEVICE,MICROARCH,ISA,FLAGS) \\\n+  { NAME, DEVICE, NULL, u##MICROARCH, ISA, FLAGS },\n+#include \"m68k-isas.def\"\n+#undef M68K_ISA\n   { NULL,       unk_device, NULL,  unk_arch, isa_max,   0 }\n };\n \n /* A list of all microarchitectures, mapping each one to a representative\n    device.  Used for -mtune selection.  */\n static const struct m68k_target_selection all_microarchs[] =\n {\n-  { \"68000\",    m68000,     NULL,  u68000,    isa_00,  FL_FOR_isa_00 },\n-  { \"68010\",    m68010,     NULL,  u68010,    isa_10,  FL_FOR_isa_10 },\n-  { \"68020\",    m68020,     NULL,  u68020,    isa_20,  FL_FOR_isa_20 },\n-  { \"68020-40\", m68020,     NULL,  u68020_40, isa_20,  FL_FOR_isa_20 },\n-  { \"68020-60\", m68020,     NULL,  u68020_60, isa_20,  FL_FOR_isa_20 },\n-  { \"68030\",    m68030,     NULL,  u68030,    isa_20,  FL_FOR_isa_20 },\n-  { \"68040\",    m68040,     NULL,  u68040,    isa_40,  FL_FOR_isa_40 },\n-  { \"68060\",    m68060,     NULL,  u68060,    isa_40,  FL_FOR_isa_40 },\n-  { \"cpu32\",    cpu32,      NULL,  ucpu32,    isa_20,  FL_FOR_isa_cpu32 },\n-  { \"cfv1\",     mcf51qe,    NULL,  ucfv1,     isa_c,   FL_FOR_isa_c },\n-  { \"cfv2\",     mcf5206,    NULL,  ucfv2,     isa_a,   FL_FOR_isa_a },\n-  { \"cfv3\",     mcf5307,    NULL,  ucfv3,     isa_a,   (FL_FOR_isa_a\n-\t\t\t\t\t\t\t| FL_CF_HWDIV) },\n-  { \"cfv4\",     mcf5407,    NULL,  ucfv4,     isa_b,   FL_FOR_isa_b },\n-  { \"cfv4e\",    mcf547x,    NULL,  ucfv4e,    isa_b,   (FL_FOR_isa_b\n-\t\t\t\t\t\t\t| FL_CF_USP\n-\t\t\t\t\t\t\t| FL_CF_EMAC\n-\t\t\t\t\t\t\t| FL_CF_FPU) },\n+#define M68K_MICROARCH(NAME,DEVICE,MICROARCH,ISA,FLAGS) \\\n+  { NAME, DEVICE, NULL, u##MICROARCH, ISA, FLAGS },\n+#include \"m68k-microarchs.def\"\n+#undef M68K_MICROARCH\n   { NULL,       unk_device, NULL,  unk_arch,  isa_max, 0 }\n };\n \f\n@@ -458,70 +430,39 @@ const char *m68k_symbolic_jump;\n enum M68K_SYMBOLIC_CALL m68k_symbolic_call_var;\n \n \f\n-/* See whether TABLE has an entry with name NAME.  Return true and\n-   store the entry in *ENTRY if so, otherwise return false and\n-   leave *ENTRY alone.  */\n-\n-static bool\n-m68k_find_selection (const struct m68k_target_selection **entry,\n-\t\t     const struct m68k_target_selection *table,\n-\t\t     const char *name)\n-{\n-  size_t i;\n-\n-  for (i = 0; table[i].name; i++)\n-    if (strcmp (table[i].name, name) == 0)\n-      {\n-\t*entry = table + i;\n-\treturn true;\n-      }\n-  return false;\n-}\n-\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-m68k_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+m68k_handle_option (struct gcc_options *opts,\n+\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n \t\t    const struct cl_decoded_option *decoded,\n-\t\t    location_t loc ATTRIBUTE_UNUSED)\n+\t\t    location_t loc)\n {\n   size_t code = decoded->opt_index;\n   const char *arg = decoded->arg;\n   int value = decoded->value;\n \n-  gcc_assert (opts == &global_options);\n-  gcc_assert (opts_set == &global_options_set);\n-\n   switch (code)\n     {\n-    case OPT_march_:\n-      return m68k_find_selection (&m68k_arch_entry, all_isas, arg);\n-\n-    case OPT_mcpu_:\n-      return m68k_find_selection (&m68k_cpu_entry, all_devices, arg);\n-\n-    case OPT_mtune_:\n-      return m68k_find_selection (&m68k_tune_entry, all_microarchs, arg);\n-\n     case OPT_m68020_40:\n-      return (m68k_find_selection (&m68k_tune_entry, all_microarchs,\n-\t\t\t\t   \"68020-40\")\n-\t      && m68k_find_selection (&m68k_cpu_entry, all_devices, \"68020\"));\n+      opts->x_m68k_tune_option = u68020_40;\n+      opts->x_m68k_cpu_option = m68020;\n+      return true;\n \n     case OPT_m68020_60:\n-      return (m68k_find_selection (&m68k_tune_entry, all_microarchs,\n-\t\t\t\t   \"68020-60\")\n-\t      && m68k_find_selection (&m68k_cpu_entry, all_devices, \"68020\"));\n+      opts->x_m68k_tune_option = u68020_60;\n+      opts->x_m68k_cpu_option = m68020;\n+      return true;\n \n     case OPT_mshared_library_id_:\n       if (value > MAX_LIBRARY_ID)\n-\terror (\"-mshared-library-id=%s is not between 0 and %d\",\n-\t       arg, MAX_LIBRARY_ID);\n+\terror_at (loc, \"-mshared-library-id=%s is not between 0 and %d\",\n+\t\t  arg, MAX_LIBRARY_ID);\n       else\n         {\n \t  char *tmp;\n \t  asprintf (&tmp, \"%d\", (value * -4) - 4);\n-\t  m68k_library_id_string = tmp;\n+\t  opts->x_m68k_library_id_string = tmp;\n \t}\n       return true;\n \n@@ -538,6 +479,15 @@ m68k_option_override (void)\n   const struct m68k_target_selection *entry;\n   unsigned long target_mask;\n \n+  if (global_options_set.x_m68k_arch_option)\n+    m68k_arch_entry = &all_isas[m68k_arch_option];\n+\n+  if (global_options_set.x_m68k_cpu_option)\n+    m68k_cpu_entry = &all_devices[(int) m68k_cpu_option];\n+\n+  if (global_options_set.x_m68k_tune_option)\n+    m68k_tune_entry = &all_microarchs[(int) m68k_tune_option];\n+\n   /* User can choose:\n \n      -mcpu="}, {"sha": "e69e164e71c1b264f8a324bb0eeed00730e6cd0f", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=47c94d21e4b95bf3f6d4797461f9dd80dceb22e8", "patch": "@@ -941,36 +941,7 @@ do {\t\t\t\t\t\t\t\\\n     goto FAIL;\t\t\t\t\t\t\\\n } while (0);\n \n-/* Values used in the MICROARCH argument to M68K_DEVICE.  */\n-enum uarch_type\n-{\n-  u68000,\n-  u68010,\n-  u68020,\n-  u68020_40,\n-  u68020_60,\n-  u68030,\n-  u68040,\n-  u68060,\n-  ucpu32,\n-  ucfv1,\n-  ucfv2,\n-  ucfv3,\n-  ucfv4,\n-  ucfv4e,\n-  ucfv5,\n-  unk_arch\n-};\n-\n-/* An enumeration of all supported target devices.  */\n-enum target_device\n-{\n-#define M68K_DEVICE(NAME,ENUM_VALUE,FAMILY,MULTILIB,MICROARCH,ISA,FLAGS) \\\n-  ENUM_VALUE,\n-#include \"m68k-devices.def\"\n-#undef M68K_DEVICE\n-  unk_device\n-};\n+#include \"config/m68k/m68k-opts.h\"\n \n enum fpu_type\n {\n@@ -987,7 +958,6 @@ enum m68k_function_kind\n };\n \n /* Variables in m68k.c; see there for details.  */\n-extern const char *m68k_library_id_string;\n extern enum target_device m68k_cpu;\n extern enum uarch_type m68k_tune;\n extern enum fpu_type m68k_fpu;"}, {"sha": "14428fc4ccc8f840b1f2a27746fb549047533e0d", "filename": "gcc/config/m68k/m68k.opt", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig%2Fm68k%2Fm68k.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig%2Fm68k%2Fm68k.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.opt?ref=47c94d21e4b95bf3f6d4797461f9dd80dceb22e8", "patch": "@@ -19,6 +19,13 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+HeaderInclude\n+config/m68k/m68k-opts.h\n+\n+; Specify the identification number of the library being built.\n+Variable\n+const char *m68k_library_id_string = \"_current_shared_library_a5_offset_\"\n+\n m5200\n Target RejectNegative Alias(mcpu=, 5206)\n Generate code for a 520X\n@@ -93,7 +100,7 @@ Target Report Mask(ALIGN_INT)\n Align variables on a 32-bit boundary\n \n march=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(m68k_isa) Var(m68k_arch_option)\n Specify the name of the target architecture\n \n mbitfield\n@@ -113,7 +120,7 @@ Target RejectNegative Alias(mcpu=, 547x)\n Generate code for a ColdFire v4e\n \n mcpu=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(target_device) Var(m68k_cpu_option) Init(unk_device)\n Specify the target CPU\n \n mcpu32\n@@ -177,7 +184,7 @@ Target Report Mask(STRICT_ALIGNMENT)\n Do not use unaligned memory references\n \n mtune=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(uarch_type) Var(m68k_tune_option) Init(unk_arch)\n Tune for the specified target CPU or architecture\n \n mxgot"}, {"sha": "7f752aed31a9cafa1ac723f06642d6016d82918a", "filename": "gcc/config/m68k/t-opts", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig%2Fm68k%2Ft-opts", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c94d21e4b95bf3f6d4797461f9dd80dceb22e8/gcc%2Fconfig%2Fm68k%2Ft-opts", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-opts?ref=47c94d21e4b95bf3f6d4797461f9dd80dceb22e8", "patch": "@@ -0,0 +1,5 @@\n+$(srcdir)/config/m68k/m68k-tables.opt: $(srcdir)/config/m68k/genopt.sh \\\n+  $(srcdir)/config/m68k/m68k-devices.def $(srcdir)/config/m68k/m68k-isas.def \\\n+  $(srcdir)/config/m68k/m68k-microarchs.def\n+\t$(SHELL) $(srcdir)/config/m68k/genopt.sh $(srcdir)/config/m68k > \\\n+\t\t$(srcdir)/config/m68k/m68k-tables.opt"}]}