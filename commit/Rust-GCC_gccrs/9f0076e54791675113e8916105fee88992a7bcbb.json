{"sha": "9f0076e54791675113e8916105fee88992a7bcbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYwMDc2ZTU0NzkxNjc1MTEzZTg5MTYxMDVmZWU4ODk5MmE3YmNiYg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-07-15T01:44:38Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-07-15T01:44:38Z"}, "message": "rs6000.md (UNSPEC_SYNC, [...]): New.\n\n        * config/rs6000/rs6000.md (UNSPEC_SYNC, UNSPEC_LWSYNC,\n        UNSPEC_ISYNC, UNSPEC_SYNC_OP, UNSPEC_ATOMIC, UNSPEC_CMPXCHG,\n        UNSPEC_XCHG, UNSPEC_AND): New.\n        (UNSPECV_ATOMIC, UNSPECV_SYNC, UNSPECV_SYNC_OP, UNSPECV_CMPXCHG,\n        UNSPECV_LWSYNC, UNSPECV_ISYNC): Delete.\n        * config/rs6000/sync.md (FETCHOP): New code macro.\n        (fetchop_name, fetchop_pred, fetchopsi_constr, fetchopdi_constr):\n        New code attrs.\n        (memory_barrier, sync_internal): Use unspec instead of unspec_volatile.\n        (sync_compare_and_swap<mode>): Same.\n        (sync_lock_test_and_set<mode>): Same.\n        (sync_<fetchop><mode>, sync_nand<mode>): Only use rs6000_emit_sync\n        for QImode and HImode, and not PPC405.\n        (sync_old_<fetchop><mode>, sync_old_nand<mode>): Same.\n        (sync_new_<fetchop><mode>, sync_new_nand<mode>): Same.\n        (sync_<fetchop>{si,di}_internal): New.\n        (sync_nand{si,di}_internal): New.\n        (sync_old_<fetchop>{si,di}_internal): New.\n        (sync_old_nand{si,di}_internal): New\n        (sync_new_<fetchop>{si,di}_internal): New.\n        (sync_new_nand{si,di}_internal): New.\n        (atomic_and{si,di}): New.\n        (sync_new_nand{si,di}_internal): New.\n        (atomic_and{si,di}): New.\n        (sync_add<mode>_internal): Delete.\n        (sync_addshort_internal): Use unspec instead of unspec_volatile.\n        (sync_sub<mode>_internal): Delte.\n        (sync_subshort_internal): New.\n        (sync_andsi_internal): Use unspec instead of unspec_volatile.\n        (sync_anddi_internal): Delete.\n        (sync_boolsi_internal): Use unspec instead of unspec_volatile.\n        (sync_booldi_internal): Delete.\n        (sync_boolc<mode>_internal): Delete.\n        (sync_boolcshort_internal): Use unspec instead of unspec_volatile.\n        (sync_boolc<mode>_internal2): Delete.\n        (sync_boolcc<mode>_internal): Delete.\n        (isync, lwsync): Use unspec instead of unspec_volatile.\n        * config/rs6000/rs6000.c (rs6000_emit_sync): Implement MINUS.\n        Revert UNSPEC_VOLATILE.\n        (rs6000_split_atomic_op): New.\n        * config/rs6000/rs6000-protos.h (rs6000_split_atomic_op): Declare.\n\nFrom-SVN: r102049", "tree": {"sha": "6969dec875be0917a1ffade468412f0a5d77b33b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6969dec875be0917a1ffade468412f0a5d77b33b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f0076e54791675113e8916105fee88992a7bcbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0076e54791675113e8916105fee88992a7bcbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f0076e54791675113e8916105fee88992a7bcbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0076e54791675113e8916105fee88992a7bcbb/comments", "author": null, "committer": null, "parents": [{"sha": "81189fe7bae7cc08a02c58a74cc5e9d6f8c191e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81189fe7bae7cc08a02c58a74cc5e9d6f8c191e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81189fe7bae7cc08a02c58a74cc5e9d6f8c191e6"}], "stats": {"total": 748, "additions": 455, "deletions": 293}, "files": [{"sha": "68dec8a96c412a3e73b789579d51787c967df28d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0076e54791675113e8916105fee88992a7bcbb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0076e54791675113e8916105fee88992a7bcbb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f0076e54791675113e8916105fee88992a7bcbb", "patch": "@@ -1,3 +1,47 @@\n+2005-07-14  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.md (UNSPEC_SYNC, UNSPEC_LWSYNC,\n+\tUNSPEC_ISYNC, UNSPEC_SYNC_OP, UNSPEC_ATOMIC, UNSPEC_CMPXCHG,\n+\tUNSPEC_XCHG, UNSPEC_AND): New.\n+\t(UNSPECV_ATOMIC, UNSPECV_SYNC, UNSPECV_SYNC_OP, UNSPECV_CMPXCHG,\n+\tUNSPECV_LWSYNC, UNSPECV_ISYNC): Delete.\n+\t* config/rs6000/sync.md (FETCHOP): New code macro.\n+\t(fetchop_name, fetchop_pred, fetchopsi_constr, fetchopdi_constr):\n+\tNew code attrs.\n+\t(memory_barrier, sync_internal): Use unspec instead of unspec_volatile.\n+\t(sync_compare_and_swap<mode>): Same.\n+\t(sync_lock_test_and_set<mode>): Same.\n+\t(sync_<fetchop><mode>, sync_nand<mode>): Only use rs6000_emit_sync\n+\tfor QImode and HImode, and not PPC405.\n+\t(sync_old_<fetchop><mode>, sync_old_nand<mode>): Same.\n+\t(sync_new_<fetchop><mode>, sync_new_nand<mode>): Same.\n+\t(sync_<fetchop>{si,di}_internal): New.\n+\t(sync_nand{si,di}_internal): New.\n+\t(sync_old_<fetchop>{si,di}_internal): New.\n+\t(sync_old_nand{si,di}_internal): New\n+\t(sync_new_<fetchop>{si,di}_internal): New.\n+\t(sync_new_nand{si,di}_internal): New.\n+\t(atomic_and{si,di}): New.\n+\t(sync_new_nand{si,di}_internal): New.\n+\t(atomic_and{si,di}): New.\n+\t(sync_add<mode>_internal): Delete.\n+\t(sync_addshort_internal): Use unspec instead of unspec_volatile.\n+\t(sync_sub<mode>_internal): Delte.\n+\t(sync_subshort_internal): New.\n+\t(sync_andsi_internal): Use unspec instead of unspec_volatile.\n+\t(sync_anddi_internal): Delete.\n+\t(sync_boolsi_internal): Use unspec instead of unspec_volatile.\n+\t(sync_booldi_internal): Delete.\n+\t(sync_boolc<mode>_internal): Delete.\n+\t(sync_boolcshort_internal): Use unspec instead of unspec_volatile.\n+\t(sync_boolc<mode>_internal2): Delete.\n+\t(sync_boolcc<mode>_internal): Delete.\n+\t(isync, lwsync): Use unspec instead of unspec_volatile.\n+\t* config/rs6000/rs6000.c (rs6000_emit_sync): Implement MINUS.\n+\tRevert UNSPEC_VOLATILE.\n+\t(rs6000_split_atomic_op): New.\n+\t* config/rs6000/rs6000-protos.h (rs6000_split_atomic_op): Declare.\n+\n 2005-07-14  Eric Christopher  <echristo@redhat.com>\n \n \t* config/mips/mips.c (mips_canonicalize_comparison): Cast"}, {"sha": "14dd8e6455314cd205d645181dc4faa245900c3f", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0076e54791675113e8916105fee88992a7bcbb/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0076e54791675113e8916105fee88992a7bcbb/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=9f0076e54791675113e8916105fee88992a7bcbb", "patch": "@@ -82,6 +82,7 @@ extern int rs6000_emit_vector_cond_expr (rtx, rtx, rtx, rtx, rtx, rtx);\n extern void rs6000_emit_minmax (rtx, enum rtx_code, rtx, rtx);\n extern void rs6000_emit_sync (enum rtx_code, enum machine_mode,\n \t\t\t      rtx, rtx, rtx, rtx, bool);\n+extern void rs6000_split_atomic_op (enum rtx_code, rtx, rtx, rtx, rtx, rtx);\n extern void rs6000_split_compare_and_swap (rtx, rtx, rtx, rtx, rtx);\n extern void rs6000_split_lock_test_and_set (rtx, rtx, rtx, rtx);\n extern void rs6000_emit_swdivsf (rtx, rtx, rtx);"}, {"sha": "432fee78ef3f83007c91070f7d8d4e76838f9009", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 56, "deletions": 7, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0076e54791675113e8916105fee88992a7bcbb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0076e54791675113e8916105fee88992a7bcbb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9f0076e54791675113e8916105fee88992a7bcbb", "patch": "@@ -11560,6 +11560,7 @@ rs6000_emit_sync (enum rtx_code code, enum machine_mode mode,\n \t}\n       else\n \toldop = lowpart_subreg (SImode, op, mode);\n+\n       switch (code)\n \t{\n \tcase IOR:\n@@ -11578,6 +11579,7 @@ rs6000_emit_sync (enum rtx_code code, enum machine_mode mode,\n \t  break;\n \n \tcase PLUS:\n+\tcase MINUS:\n \t  {\n \t    rtx mask;\n \t    \n@@ -11590,8 +11592,11 @@ rs6000_emit_sync (enum rtx_code code, enum machine_mode mode,\n \t    emit_move_insn (mask, GEN_INT (imask));\n \t    emit_insn (gen_ashlsi3 (mask, mask, shift));\n \n-\t    newop = gen_rtx_AND (SImode, gen_rtx_PLUS (SImode, m, newop),\n-\t\t\t\t mask);\n+\t    if (code == PLUS)\n+\t      newop = gen_rtx_PLUS (SImode, m, newop);\n+\t    else\n+\t      newop = gen_rtx_MINUS (SImode, m, newop);\n+\t    newop = gen_rtx_AND (SImode, newop, mask);\n \t    newop = gen_rtx_IOR (SImode, newop,\n \t\t\t\t gen_rtx_AND (SImode,\n \t\t\t\t\t      gen_rtx_NOT (SImode, mask),\n@@ -11633,7 +11638,8 @@ rs6000_emit_sync (enum rtx_code code, enum machine_mode mode,\n \tafter = gen_reg_rtx (used_mode);\n     }\n   \n-  if ((code == PLUS || GET_CODE (m) == NOT) && used_mode != mode)\n+  if ((code == PLUS || code == MINUS || GET_CODE (m) == NOT)\n+      && used_mode != mode)\n     the_op = op;  /* Computed above.  */\n   else if (GET_CODE (op) == NOT && GET_CODE (m) != NOT)\n     the_op = gen_rtx_fmt_ee (code, used_mode, op, m);\n@@ -11643,12 +11649,12 @@ rs6000_emit_sync (enum rtx_code code, enum machine_mode mode,\n   set_after = gen_rtx_SET (VOIDmode, after, the_op);\n   set_before = gen_rtx_SET (VOIDmode, before, used_m);\n   set_atomic = gen_rtx_SET (VOIDmode, used_m,\n-\t\t\t    gen_rtx_UNSPEC_VOLATILE (used_mode,\n-\t\t\t\t\t\t     gen_rtvec (1, the_op),\n-\t\t\t\t\t\t     UNSPECV_SYNC_OP));\n+\t\t\t    gen_rtx_UNSPEC (used_mode,\n+\t\t\t\t\t    gen_rtvec (1, the_op),\n+\t\t\t\t\t    UNSPEC_SYNC_OP));\n   cc_scratch = gen_rtx_CLOBBER (VOIDmode, gen_rtx_SCRATCH (CCmode));\n \n-  if (code == PLUS && used_mode != mode)\n+  if ((code == PLUS || code == MINUS) && used_mode != mode)\n     vec = gen_rtvec (5, set_after, set_before, set_atomic, cc_scratch,\n \t\t     gen_rtx_CLOBBER (VOIDmode, gen_rtx_SCRATCH (SImode)));\n   else\n@@ -11716,12 +11722,55 @@ emit_store_conditional (enum machine_mode mode, rtx res, rtx mem, rtx val)\n   else if (mode == DImode)\n     fn = gen_store_conditional_di;\n \n+  /* Emit sync before stwcx. to address PPC405 Erratum.  */\n   if (PPC405_ERRATUM77)\n     emit_insn (gen_memory_barrier ());\n \n   emit_insn (fn (res, mem, val));\n }\n \n+/* Expand an an atomic fetch-and-operate pattern.  CODE is the binary operation\n+   to perform.  MEM is the memory on which to operate.  VAL is the second \n+   operand of the binary operator.  BEFORE and AFTER are optional locations to\n+   return the value of MEM either before of after the operation.  SCRATCH is\n+   a scratch register.  */\n+\n+void\n+rs6000_split_atomic_op (enum rtx_code code, rtx mem, rtx val,\n+                       rtx before, rtx after, rtx scratch)\n+{\n+  enum machine_mode mode = GET_MODE (mem);\n+  rtx label, x, cond = gen_rtx_REG (CCmode, CR0_REGNO);\n+\n+  emit_insn (gen_memory_barrier ());\n+\n+  label = gen_label_rtx ();\n+  emit_label (label);\n+  label = gen_rtx_LABEL_REF (VOIDmode, label);\n+\n+  if (before == NULL_RTX)\n+    before = scratch;\n+  emit_load_locked (mode, before, mem);\n+\n+  if (code == NOT)\n+    x = gen_rtx_AND (mode, gen_rtx_NOT (mode, before), val);\n+  else if (code == AND)\n+    x = gen_rtx_UNSPEC (mode, gen_rtvec (2, before, val), UNSPEC_AND);\n+  else\n+    x = gen_rtx_fmt_ee (code, mode, before, val);\n+\n+  if (after != NULL_RTX)\n+    emit_insn (gen_rtx_SET (VOIDmode, after, copy_rtx (x)));\n+  emit_insn (gen_rtx_SET (VOIDmode, scratch, x));\n+\n+  emit_store_conditional (mode, cond, mem, scratch);\n+\n+  x = gen_rtx_NE (VOIDmode, cond, const0_rtx);\n+  emit_unlikely_jump (x, label);\n+\n+  emit_insn (gen_isync ());\n+}\n+\n /* Expand an atomic compare and swap operation.  MEM is the memory on which\n    to operate.  OLDVAL is the old value to be compared.  NEWVAL is the new\n    value to be stored.  SCRATCH is a scratch GPR.  */"}, {"sha": "3cc613a82edc7fa8652ea8725852a4dd760a048b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0076e54791675113e8916105fee88992a7bcbb/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0076e54791675113e8916105fee88992a7bcbb/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=9f0076e54791675113e8916105fee88992a7bcbb", "patch": "@@ -52,10 +52,18 @@\n    (UNSPEC_FIX_TRUNC_TF\t\t30)\t; fadd, rounding towards zero\n    (UNSPEC_MV_CR_GT\t\t31)\t; move_from_CR_eq_bit\n    (UNSPEC_STFIWX\t\t32)\n-   (UNSPEC_POPCNTB\t\t38)\n-   (UNSPEC_FRES\t\t\t39)\n-   (UNSPEC_SP_SET\t\t40)\n-   (UNSPEC_SP_TEST\t\t41)\n+   (UNSPEC_POPCNTB\t\t33)\n+   (UNSPEC_FRES\t\t\t34)\n+   (UNSPEC_SP_SET\t\t35)\n+   (UNSPEC_SP_TEST\t\t36)\n+   (UNSPEC_SYNC\t\t\t37)\n+   (UNSPEC_LWSYNC\t\t38)\n+   (UNSPEC_ISYNC\t\t39)\n+   (UNSPEC_SYNC_OP\t\t40)\n+   (UNSPEC_ATOMIC\t\t41)\n+   (UNSPEC_CMPXCHG\t\t42)\n+   (UNSPEC_XCHG\t\t\t43)\n+   (UNSPEC_AND\t\t\t44)\n   ])\n \n ;;\n@@ -66,12 +74,6 @@\n   [(UNSPECV_BLOCK\t\t0)\n    (UNSPECV_LL\t\t\t1)\t; load-locked\n    (UNSPECV_SC\t\t\t2)\t; store-conditional\n-   (UNSPECV_ATOMIC\t\t3)\n-   (UNSPECV_SYNC\t\t4)\n-   (UNSPECV_SYNC_OP\t\t5)\n-   (UNSPECV_CMPXCHG\t\t6)\n-   (UNSPECV_LWSYNC\t\t7)\n-   (UNSPECV_ISYNC\t\t8)\n    (UNSPECV_EH_RR\t\t9)\t; eh_reg_restore\n   ])\n \f"}, {"sha": "7678cf70a8e0f61cef5e0258c6051b4432a6c31c", "filename": "gcc/config/rs6000/sync.md", "status": "modified", "additions": 342, "deletions": 276, "changes": 618, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0076e54791675113e8916105fee88992a7bcbb/gcc%2Fconfig%2Frs6000%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0076e54791675113e8916105fee88992a7bcbb/gcc%2Fconfig%2Frs6000%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsync.md?ref=9f0076e54791675113e8916105fee88992a7bcbb", "patch": "@@ -22,9 +22,20 @@\n (define_mode_attr larx [(SI \"lwarx\") (DI \"ldarx\")])\n (define_mode_attr stcx [(SI \"stwcx.\") (DI \"stdcx.\")])\n \n+(define_code_macro FETCHOP [plus minus ior xor and])\n+(define_code_attr fetchop_name\n+  [(plus \"add\") (minus \"sub\") (ior \"ior\") (xor \"xor\") (and \"and\")])\n+(define_code_attr fetchop_pred\n+  [(plus \"add_operand\") (minus \"gpc_reg_operand\")\n+   (ior \"logical_operand\") (xor \"logical_operand\") (and \"and_operand\")])\n+(define_code_attr fetchopsi_constr\n+  [(plus \"rIL\") (minus \"r\") (ior \"rKL\") (xor \"rKL\") (and \"rTKL\")])\n+(define_code_attr fetchopdi_constr\n+  [(plus \"rIL\") (minus \"r\") (ior \"rKJF\") (xor \"rKJF\") (and \"rSTKJ\")])\n+\n (define_expand \"memory_barrier\"\n   [(set (mem:BLK (match_dup 0))\n-        (unspec_volatile:BLK [(mem:BLK (match_dup 0))] UNSPECV_SYNC))]\n+\t(unspec:BLK [(mem:BLK (match_dup 0))] UNSPEC_SYNC))]\n   \"\"\n {\n   operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n@@ -33,7 +44,7 @@\n \n (define_insn \"*sync_internal\"\n   [(set (match_operand:BLK 0 \"\" \"\")\n-        (unspec_volatile:BLK [(match_operand:BLK 1 \"\" \"\")] UNSPECV_SYNC))]\n+\t(unspec:BLK [(match_operand:BLK 1 \"\" \"\")] UNSPEC_SYNC))]\n   \"\"\n   \"{dcs|sync}\"\n   [(set_attr \"type\" \"sync\")])\n@@ -59,10 +70,10 @@\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r\")\n \t(match_operand:GPR 1 \"memory_operand\" \"+Z\"))\n    (set (match_dup 1)\n-\t(unspec_volatile:GPR\n+\t(unspec:GPR\n \t  [(match_operand:GPR 2 \"reg_or_short_operand\" \"rI\")\n \t   (match_operand:GPR 3 \"gpc_reg_operand\" \"r\")]\n-\t  UNSPECV_CMPXCHG))\n+\t  UNSPEC_CMPXCHG))\n    (clobber (match_scratch:GPR 4 \"=&r\"))\n    (clobber (match_scratch:CC 5 \"=&x\"))]\n   \"TARGET_POWERPC\"\n@@ -77,11 +88,11 @@\n \n (define_insn_and_split \"sync_lock_test_and_set<mode>\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r\")\n-        (match_operand:GPR 1 \"memory_operand\" \"+Z\"))\n+\t(match_operand:GPR 1 \"memory_operand\" \"+Z\"))\n    (set (match_dup 1)\n-\t(unspec_volatile:GPR\n+\t(unspec:GPR\n \t  [(match_operand:GPR 2 \"reg_or_short_operand\" \"rL\")]\n-\t  UNSPECV_CMPXCHG))\n+\t  UNSPEC_XCHG))\n    (clobber (match_scratch:GPR 3 \"=&r\"))\n    (clobber (match_scratch:CC 4 \"=&x\"))]\n   \"TARGET_POWERPC\"\n@@ -94,282 +105,406 @@\n   DONE;\n })\n \n-(define_expand \"sync_add<mode>\"\n-  [(use (match_operand:INT1 0 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"add_operand\" \"\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"\n-{\n-  rs6000_emit_sync (PLUS, <MODE>mode, operands[0], operands[1], \n-\t\t    NULL_RTX, NULL_RTX, true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_sub<mode>\"\n-  [(use (match_operand:GPR 0 \"memory_operand\" \"\"))\n-   (use (match_operand:GPR 1 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"\n-{\n-  rs6000_emit_sync (MINUS, <MODE>mode, operands[0], operands[1], \n-\t\t    NULL_RTX, NULL_RTX, true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_ior<mode>\"\n-  [(use (match_operand:INT1 0 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"logical_operand\" \"\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+(define_expand \"sync_<fetchop_name><mode>\"\n+  [(parallel [(set (match_operand:INT1 0 \"memory_operand\" \"\")\n+\t\t   (unspec:INT1\n+\t\t     [(FETCHOP:INT1 (match_dup 0)\n+\t\t\t(match_operand:INT1 1 \"<fetchop_pred>\" \"\"))]\n+\t\t     UNSPEC_ATOMIC))\n+\t      (clobber (scratch:INT1))\n+\t      (clobber (scratch:CC))])]\n+  \"TARGET_POWERPC\"\n   \"\n {\n-  rs6000_emit_sync (IOR, <MODE>mode, operands[0], operands[1], \n-\t\t    NULL_RTX, NULL_RTX, true);\n-  DONE;\n+  if (<MODE>mode != SImode && <MODE>mode != DImode)\n+    {\n+      if (PPC405_ERRATUM77)\n+\tFAIL;\n+      rs6000_emit_sync (<CODE>, <MODE>mode, operands[0], operands[1],\n+\t\t\tNULL_RTX, NULL_RTX, true);\n+      DONE;\n+    }\n }\")\n \n-(define_expand \"sync_and<mode>\"\n-  [(use (match_operand:INT1 0 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"and_operand\" \"\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"\n+(define_insn_and_split \"*sync_<fetchop_name>si_internal\"\n+  [(set (match_operand:SI 0 \"memory_operand\" \"+Z\")\n+\t(unspec:SI\n+\t  [(FETCHOP:SI (match_dup 0)\n+\t     (match_operand:SI 1 \"<fetchop_pred>\" \"<fetchopsi_constr>\"))]\n+\t  UNSPEC_ATOMIC))\n+   (clobber (match_scratch:SI 2 \"=&r\"))\n+   (clobber (match_scratch:CC 3 \"=&x\"))]\n+  \"TARGET_POWERPC\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n {\n-  rs6000_emit_sync (AND, <MODE>mode, operands[0], operands[1], \n-\t\t    NULL_RTX, NULL_RTX, true);\n+  rs6000_split_atomic_op (<CODE>, operands[0], operands[1],\n+\t\t\t  NULL_RTX, NULL_RTX, operands[2]);\n   DONE;\n-}\")\n+})\n \n-(define_expand \"sync_xor<mode>\"\n-  [(use (match_operand:INT1 0 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"logical_operand\" \"\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"\n+(define_insn_and_split \"*sync_<fetchop_name>di_internal\"\n+  [(set (match_operand:DI 0 \"memory_operand\" \"+Z\")\n+\t(unspec:DI\n+\t  [(FETCHOP:DI (match_dup 0)\n+\t     (match_operand:DI 1 \"<fetchop_pred>\" \"<fetchopdi_constr>\"))]\n+\t  UNSPEC_ATOMIC))\n+   (clobber (match_scratch:DI 2 \"=&r\"))\n+   (clobber (match_scratch:CC 3 \"=&x\"))]\n+  \"TARGET_POWERPC\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n {\n-  rs6000_emit_sync (XOR, <MODE>mode, operands[0], operands[1], \n-\t\t    NULL_RTX, NULL_RTX, true);\n+  rs6000_split_atomic_op (<CODE>, operands[0], operands[1],\n+\t\t\t  NULL_RTX, NULL_RTX, operands[2]);\n   DONE;\n-}\")\n+})\n \n (define_expand \"sync_nand<mode>\"\n-  [(use (match_operand:INT1 0 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"\n-{\n-  rs6000_emit_sync (AND, <MODE>mode, \n-\t\t    gen_rtx_NOT (<MODE>mode, operands[0]),\n-\t\t    operands[1],\n-\t\t    NULL_RTX, NULL_RTX, true);\n-  DONE;\n-}\")\n-\n-(define_expand \"sync_old_add<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"add_operand\" \"\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  [(parallel [(set (match_operand:INT1 0 \"memory_operand\" \"\")\n+\t      (unspec:INT1\n+\t\t[(and:INT1 (not:INT1 (match_dup 0))\n+\t\t   (match_operand:INT1 1 \"gpc_reg_operand\" \"\"))]\n+\t\tUNSPEC_ATOMIC))\n+\t      (clobber (scratch:INT1))\n+\t      (clobber (scratch:CC))])]\n+  \"TARGET_POWERPC\"\n   \"\n {\n-  rs6000_emit_sync (PLUS, <MODE>mode, operands[1], operands[2], \n-\t\t    operands[0], NULL_RTX, true);\n-  DONE;\n+  if (<MODE>mode != SImode && <MODE>mode != DImode)\n+    {\n+      if (PPC405_ERRATUM77)\n+\tFAIL;\n+      rs6000_emit_sync (AND, <MODE>mode,\n+\t\t\tgen_rtx_NOT (<MODE>mode, operands[0]),\n+\t\t\toperands[1],\n+\t\t\tNULL_RTX, NULL_RTX, true);\n+      DONE;\n+    }\n }\")\n \n-(define_expand \"sync_old_sub<mode>\"\n-  [(use (match_operand:GPR 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:GPR 1 \"memory_operand\" \"\"))\n-   (use (match_operand:GPR 2 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"\n+(define_insn_and_split \"*sync_nand<mode>_internal\"\n+  [(set (match_operand:GPR 0 \"memory_operand\" \"+Z\")\n+\t(unspec:GPR\n+\t  [(and:GPR (not:GPR (match_dup 0))\n+\t     (match_operand:GPR 1 \"gpc_reg_operand\" \"r\"))]\n+\t  UNSPEC_ATOMIC))\n+   (clobber (match_scratch:GPR 2 \"=&r\"))\n+   (clobber (match_scratch:CC 3 \"=&x\"))]\n+  \"TARGET_POWERPC\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n {\n-  rs6000_emit_sync (MINUS, <MODE>mode, operands[1], operands[2], \n-\t\t    operands[0], NULL_RTX, true);\n+  rs6000_split_atomic_op (NOT, operands[0], operands[1],\n+\t\t\t  NULL_RTX, NULL_RTX, operands[2]);\n   DONE;\n-}\")\n+})\n \n-(define_expand \"sync_old_ior<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"logical_operand\" \"\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+(define_expand \"sync_old_<fetchop_name><mode>\"\n+  [(parallel [(set (match_operand:INT1 0 \"gpc_reg_operand\" \"\")\n+\t\t   (match_operand:INT1 1 \"memory_operand\" \"\"))\n+\t      (set (match_dup 1)\n+\t\t   (unspec:INT1\n+\t\t     [(FETCHOP:INT1 (match_dup 1)\n+\t\t\t(match_operand:INT1 2 \"<fetchop_pred>\" \"\"))]\n+\t\t     UNSPEC_ATOMIC))\n+\t      (clobber (scratch:INT1))\n+\t      (clobber (scratch:CC))])]\n+  \"TARGET_POWERPC\"\n   \"\n-{\n-  rs6000_emit_sync (IOR, <MODE>mode, operands[1], operands[2], \n-\t\t    operands[0], NULL_RTX, true);\n-  DONE;\n+{ \n+  if (<MODE>mode != SImode && <MODE>mode != DImode)\n+    {\n+      if (PPC405_ERRATUM77)\n+\tFAIL;\n+      rs6000_emit_sync (<CODE>, <MODE>mode, operands[1], operands[2],\n+\t\t\toperands[0], NULL_RTX, true);\n+      DONE;\n+    }\n }\")\n \n-(define_expand \"sync_old_and<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"and_operand\" \"\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"\n+(define_insn_and_split \"*sync_old_<fetchop_name>si_internal\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r\")\n+\t(match_operand:SI 1 \"memory_operand\" \"+Z\"))\n+   (set (match_dup 1)\n+\t(unspec:SI\n+\t  [(FETCHOP:SI (match_dup 1)\n+\t     (match_operand:SI 2 \"<fetchop_pred>\" \"<fetchopsi_constr>\"))]\n+\t  UNSPEC_ATOMIC))\n+   (clobber (match_scratch:SI 3 \"=&r\"))\n+   (clobber (match_scratch:CC 4 \"=&x\"))]\n+  \"TARGET_POWERPC\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n {\n-  rs6000_emit_sync (AND, <MODE>mode, operands[1], operands[2], \n-\t\t    operands[0], NULL_RTX, true);\n+  rs6000_split_atomic_op (<CODE>, operands[1], operands[2],\n+\t\t\t  operands[0], NULL_RTX, operands[3]);\n   DONE;\n-}\")\n+})\n \n-(define_expand \"sync_old_xor<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"logical_operand\" \"\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"\n+(define_insn_and_split \"*sync_old_<fetchop_name>di_internal\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r\")\n+\t(match_operand:DI 1 \"memory_operand\" \"+Z\"))\n+   (set (match_dup 1)\n+\t(unspec:DI\n+\t  [(FETCHOP:DI (match_dup 1)\n+\t     (match_operand:DI 2 \"<fetchop_pred>\" \"<fetchopdi_constr>\"))]\n+\t  UNSPEC_ATOMIC))\n+   (clobber (match_scratch:DI 3 \"=&r\"))\n+   (clobber (match_scratch:CC 4 \"=&x\"))]\n+  \"TARGET_POWERPC\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n {\n-  rs6000_emit_sync (XOR, <MODE>mode, operands[1], operands[2], \n-\t\t    operands[0], NULL_RTX, true);\n+  rs6000_split_atomic_op (<CODE>, operands[1], operands[2],\n+\t\t\t  operands[0], NULL_RTX, operands[3]);\n   DONE;\n-}\")\n+})\n \n (define_expand \"sync_old_nand<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+  [(parallel [(set (match_operand:INT1 0 \"gpc_reg_operand\" \"\")\n+\t\t   (match_operand:INT1 1 \"memory_operand\" \"\"))\n+\t      (set (match_dup 1)\n+\t\t   (unspec:INT1\n+\t\t     [(and:INT1 (not:INT1 (match_dup 1))\n+\t\t\t(match_operand:INT1 2 \"gpc_reg_operand\" \"\"))]\n+\t\t     UNSPEC_ATOMIC))\n+\t      (clobber (scratch:INT1))\n+\t      (clobber (scratch:CC))])]\n+  \"TARGET_POWERPC\"\n   \"\n {\n-  rs6000_emit_sync (AND, <MODE>mode, \n-\t\t    gen_rtx_NOT (<MODE>mode, operands[1]),\n-\t\t    operands[2],\n-\t\t    operands[0], NULL_RTX, true);\n-  DONE;\n+  if (<MODE>mode != SImode && <MODE>mode != DImode)\n+    {\n+      if (PPC405_ERRATUM77)\n+\tFAIL;\n+      rs6000_emit_sync (AND, <MODE>mode,\n+\t\t\tgen_rtx_NOT (<MODE>mode, operands[1]),\n+\t\t\toperands[2],\n+\t\t\toperands[0], NULL_RTX, true);\n+      DONE;\n+    }\n }\")\n \n-(define_expand \"sync_new_add<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"add_operand\" \"\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"\n+(define_insn_and_split \"*sync_old_nand<mode>_internal\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+Z\"))\n+   (set (match_dup 1)\n+\t(unspec:GPR\n+\t  [(and:GPR (not:GPR (match_dup 1))\n+\t     (match_operand:GPR 2 \"gpc_reg_operand\" \"r\"))]\n+\t  UNSPEC_ATOMIC))\n+   (clobber (match_scratch:GPR 3 \"=&r\"))\n+   (clobber (match_scratch:CC 4 \"=&x\"))]\n+  \"TARGET_POWERPC\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n {\n-  rs6000_emit_sync (PLUS, <MODE>mode, operands[1], operands[2], \n-\t\t    NULL_RTX, operands[0], true);\n+  rs6000_split_atomic_op (NOT, operands[1], operands[2],\n+\t\t\t  operands[0], NULL_RTX, operands[3]);\n   DONE;\n-}\")\n+})\n \n-(define_expand \"sync_new_sub<mode>\"\n-  [(use (match_operand:GPR 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:GPR 1 \"memory_operand\" \"\"))\n-   (use (match_operand:GPR 2 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+(define_expand \"sync_new_<fetchop_name><mode>\"\n+  [(parallel [(set (match_operand:INT1 0 \"gpc_reg_operand\" \"\")\n+\t\t   (FETCHOP:INT1\n+\t\t     (match_operand:INT1 1 \"memory_operand\" \"\")\n+\t\t     (match_operand:INT1 2 \"<fetchop_pred>\" \"\")))\n+\t      (set (match_dup 1)\n+\t\t   (unspec:INT1\n+\t\t     [(FETCHOP:INT1 (match_dup 1) (match_dup 2))]\n+\t\t     UNSPEC_ATOMIC))\n+\t      (clobber (scratch:INT1))\n+\t      (clobber (scratch:CC))])]\n+  \"TARGET_POWERPC\"\n   \"\n {\n-  rs6000_emit_sync (MINUS, <MODE>mode, operands[1], operands[2], \n-\t\t    NULL_RTX, operands[0], true);\n-  DONE;\n+  if (<MODE>mode != SImode && <MODE>mode != DImode)\n+    {\n+      if (PPC405_ERRATUM77)\n+\tFAIL;\n+      rs6000_emit_sync (<CODE>, <MODE>mode, operands[1], operands[2],\n+\t\t\tNULL_RTX, operands[0], true);\n+      DONE;\n+    }\n }\")\n \n-(define_expand \"sync_new_ior<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"logical_operand\" \"\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"\n+(define_insn_and_split \"*sync_new_<fetchop_name>si_internal\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r\")\n+\t(FETCHOP:SI\n+\t  (match_operand:SI 1 \"memory_operand\" \"+Z\")\n+\t  (match_operand:SI 2 \"<fetchop_pred>\" \"<fetchopsi_constr>\")))\n+   (set (match_dup 1)\n+\t(unspec:SI\n+\t  [(FETCHOP:SI (match_dup 1) (match_dup 2))]\n+\t  UNSPEC_ATOMIC))\n+   (clobber (match_scratch:SI 3 \"=&r\"))\n+   (clobber (match_scratch:CC 4 \"=&x\"))]\n+  \"TARGET_POWERPC\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n {\n-  rs6000_emit_sync (IOR, <MODE>mode, operands[1], operands[2], \n-\t\t    NULL_RTX, operands[0], true);\n+  rs6000_split_atomic_op (<CODE>, operands[1], operands[2],\n+\t\t\t  NULL_RTX, operands[0], operands[3]);\n   DONE;\n-}\")\n+})\n \n-(define_expand \"sync_new_and<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"and_operand\" \"\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"\n+(define_insn_and_split \"*sync_new_<fetchop_name>di_internal\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r\")\n+\t(FETCHOP:DI\n+\t  (match_operand:DI 1 \"memory_operand\" \"+Z\")\n+\t  (match_operand:DI 2 \"<fetchop_pred>\" \"<fetchopdi_constr>\")))\n+   (set (match_dup 1)\n+\t(unspec:DI\n+\t  [(FETCHOP:DI (match_dup 1) (match_dup 2))]\n+\t  UNSPEC_ATOMIC))\n+   (clobber (match_scratch:DI 3 \"=&r\"))\n+   (clobber (match_scratch:CC 4 \"=&x\"))]\n+  \"TARGET_POWERPC\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n {\n-  rs6000_emit_sync (AND, <MODE>mode, operands[1], operands[2], \n-\t\t    NULL_RTX, operands[0], true);\n+  rs6000_split_atomic_op (<CODE>, operands[1], operands[2],\n+\t\t\t  NULL_RTX, operands[0], operands[3]);\n   DONE;\n-}\")\n+})\n \n-(define_expand \"sync_new_xor<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"logical_operand\" \"\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n+(define_expand \"sync_new_nand<mode>\"\n+  [(parallel [(set (match_operand:INT1 0 \"gpc_reg_operand\" \"\")\n+\t\t   (and:INT1\n+\t\t     (not:INT1 (match_operand:INT1 1 \"memory_operand\" \"\"))\n+\t\t     (match_operand:INT1 2 \"gpc_reg_operand\" \"\")))\n+\t      (set (match_dup 1)\n+\t\t   (unspec:INT1\n+\t\t     [(and:INT1 (not:INT1 (match_dup 1)) (match_dup 2))]\n+\t\t     UNSPEC_ATOMIC))\n+\t      (clobber (scratch:INT1))\n+\t      (clobber (scratch:CC))])]\n+  \"TARGET_POWERPC\"\n   \"\n {\n-  rs6000_emit_sync (XOR, <MODE>mode, operands[1], operands[2], \n-\t\t    NULL_RTX, operands[0], true);\n-  DONE;\n+  if (<MODE>mode != SImode && <MODE>mode != DImode)\n+    {\n+      if (PPC405_ERRATUM77)\n+\tFAIL;\n+      rs6000_emit_sync (AND, <MODE>mode,\n+\t\t\tgen_rtx_NOT (<MODE>mode, operands[1]),\n+\t\t\toperands[2],\n+\t\t\tNULL_RTX, operands[0], true);\n+      DONE;\n+    }\n }\")\n \n-(define_expand \"sync_new_nand<mode>\"\n-  [(use (match_operand:INT1 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:INT1 1 \"memory_operand\" \"\"))\n-   (use (match_operand:INT1 2 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"\n+(define_insn_and_split \"*sync_new_nand<mode>_internal\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r\")\n+\t(and:GPR\n+\t  (not:GPR (match_operand:GPR 1 \"memory_operand\" \"+Z\"))\n+\t  (match_operand:GPR 2 \"gpc_reg_operand\" \"r\")))\n+   (set (match_dup 1)\n+\t(unspec:GPR\n+\t  [(and:GPR (not:GPR (match_dup 1)) (match_dup 2))]\n+\t  UNSPEC_ATOMIC))\n+   (clobber (match_scratch:GPR 3 \"=&r\"))\n+   (clobber (match_scratch:CC 4 \"=&x\"))]\n+  \"TARGET_POWERPC\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n {\n-  rs6000_emit_sync (AND, <MODE>mode, \n-\t\t    gen_rtx_NOT (<MODE>mode, operands[1]),\n-\t\t    operands[2],\n-\t\t    NULL_RTX, operands[0], true);\n+  rs6000_split_atomic_op (NOT, operands[1], operands[2],\n+\t\t\t  NULL_RTX, operands[0], operands[3]);\n   DONE;\n-}\")\n+})\n+\n+; and<mode> without cr0 clobber to avoid generation of additional clobber \n+; in atomic splitters causing internal consistency failure.\n+; cr0 already clobbered by larx/stcx.\n+(define_insn \"*atomic_andsi\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n+\t(unspec:SI [(match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r\")\n+\t\t    (match_operand:SI 2 \"and_operand\" \"?r,T,K,L\")]\n+\t\t    UNSPEC_AND))]\n+  \"\"\n+  \"@\n+   and %0,%1,%2\n+   {rlinm|rlwinm} %0,%1,0,%m2,%M2\n+   {andil.|andi.} %0,%1,%b2\n+   {andiu.|andis.} %0,%1,%u2\"\n+  [(set_attr \"type\" \"*,*,compare,compare\")])\n+\n+(define_insn \"*atomic_anddi\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r,r\")\n+\t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n+\t\t    (match_operand:DI 2 \"and_operand\" \"?r,S,T,K,J\")]\n+\t\t    UNSPEC_AND))]\n+  \"TARGET_POWERPC64\"\n+  \"@\n+   and %0,%1,%2\n+   rldic%B2 %0,%1,0,%S2\n+   rlwinm %0,%1,0,%m2,%M2\n+   andi. %0,%1,%b2\n+   andis. %0,%1,%u2\"\n+  [(set_attr \"type\" \"*,*,*,compare,compare\")\n+   (set_attr \"length\" \"4,4,4,4,4\")])\n \n ; the sync_*_internal patterns all have these operands:\n ; 0 - memory location\n ; 1 - operand\n ; 2 - value in memory after operation\n ; 3 - value in memory immediately before operation\n \n-(define_insn \"*sync_add<mode>_internal\"\n-  [(set (match_operand:GPR 2 \"gpc_reg_operand\" \"=&r,&r\")\n-\t(plus:GPR (match_operand:GPR 0 \"memory_operand\" \"+Z,Z\")\n-\t\t (match_operand:GPR 1 \"add_operand\" \"rI,L\")))\n-   (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b,&b\") (match_dup 0))\n-   (set (match_dup 0) \n-\t(unspec_volatile:GPR [(plus:GPR (match_dup 0) (match_dup 1))]\n-\t\t   UNSPECV_SYNC_OP))\n-   (clobber (match_scratch:CC 4 \"=&x,&x\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"@\n-   <larx> %3,%y0\\n\\tadd%I1 %2,%3,%1\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\n-   <larx> %3,%y0\\n\\taddis %2,%3,%v1\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n-  [(set_attr \"length\" \"16,16\")])\n-\n (define_insn \"*sync_addshort_internal\"\n   [(set (match_operand:SI 2 \"gpc_reg_operand\" \"=&r\")\n \t(ior:SI (and:SI (plus:SI (match_operand:SI 0 \"memory_operand\" \"+Z\")\n \t\t\t\t (match_operand:SI 1 \"add_operand\" \"rI\"))\n \t\t\t(match_operand:SI 4 \"gpc_reg_operand\" \"r\"))\n \t\t(and:SI (not:SI (match_dup 4)) (match_dup 0))))\n    (set (match_operand:SI 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n-   (set (match_dup 0) \n-\t(unspec_volatile:SI [(ior:SI (and:SI (plus:SI (match_dup 0) (match_dup 1))\n+   (set (match_dup 0)\n+\t(unspec:SI [(ior:SI (and:SI (plus:SI (match_dup 0) (match_dup 1))\n \t\t\t\t    (match_dup 4))\n \t\t\t    (and:SI (not:SI (match_dup 4)) (match_dup 0)))]\n-\t\t   UNSPECV_SYNC_OP))\n+\t\t   UNSPEC_SYNC_OP))\n    (clobber (match_scratch:CC 5 \"=&x\"))\n    (clobber (match_scratch:SI 6 \"=&r\"))]\n   \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n   \"lwarx %3,%y0\\n\\tadd%I1 %2,%3,%1\\n\\tandc %6,%3,%4\\n\\tand %2,%2,%4\\n\\tor %2,%2,%6\\n\\tstwcx. %2,%y0\\n\\tbne- $-24\"\n   [(set_attr \"length\" \"28\")])\n \n-(define_insn \"*sync_sub<mode>_internal\"\n-  [(set (match_operand:GPR 2 \"gpc_reg_operand\" \"=&r\")\n-\t(minus:GPR (match_operand:GPR 0 \"memory_operand\" \"+Z\")\n-\t\t  (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")))\n-   (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n-   (set (match_dup 0) \n-\t(unspec_volatile:GPR [(minus:GPR (match_dup 0) (match_dup 1))]\n-\t\t   UNSPECV_SYNC_OP))\n-   (clobber (match_scratch:CC 4 \"=&x\"))]\n+(define_insn \"*sync_subshort_internal\"\n+  [(set (match_operand:SI 2 \"gpc_reg_operand\" \"=&r\")\n+\t(ior:SI (and:SI (minus:SI (match_operand:SI 0 \"memory_operand\" \"+Z\")\n+\t\t\t\t  (match_operand:SI 1 \"add_operand\" \"rI\"))\n+\t\t\t(match_operand:SI 4 \"gpc_reg_operand\" \"r\"))\n+\t\t(and:SI (not:SI (match_dup 4)) (match_dup 0))))\n+   (set (match_operand:SI 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n+   (set (match_dup 0)\n+\t(unspec:SI [(ior:SI (and:SI (minus:SI (match_dup 0) (match_dup 1))\n+\t\t\t\t    (match_dup 4))\n+\t\t\t    (and:SI (not:SI (match_dup 4)) (match_dup 0)))]\n+\t\t   UNSPEC_SYNC_OP))\n+   (clobber (match_scratch:CC 5 \"=&x\"))\n+   (clobber (match_scratch:SI 6 \"=&r\"))]\n   \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"<larx> %3,%y0\\n\\tsubf %2,%1,%3\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n-  [(set_attr \"length\" \"16\")])\n+  \"lwarx %3,%y0\\n\\tsubf %2,%1,%3\\n\\tandc %6,%3,%4\\n\\tand %2,%2,%4\\n\\tor %2,%2,%6\\n\\tstwcx. %2,%y0\\n\\tbne- $-24\"\n+  [(set_attr \"length\" \"28\")])\n \n (define_insn \"*sync_andsi_internal\"\n   [(set (match_operand:SI 2 \"gpc_reg_operand\" \"=&r,&r,&r,&r\")\n \t(and:SI (match_operand:SI 0 \"memory_operand\" \"+Z,Z,Z,Z\")\n \t\t(match_operand:SI 1 \"and_operand\" \"r,T,K,L\")))\n    (set (match_operand:SI 3 \"gpc_reg_operand\" \"=&b,&b,&b,&b\") (match_dup 0))\n-   (set (match_dup 0) \n-\t(unspec_volatile:SI [(and:SI (match_dup 0) (match_dup 1))]\n-\t\t   UNSPECV_SYNC_OP))\n+   (set (match_dup 0)\n+\t(unspec:SI [(and:SI (match_dup 0) (match_dup 1))]\n+\t\t   UNSPEC_SYNC_OP))\n    (clobber (match_scratch:CC 4 \"=&x,&x,&x,&x\"))]\n   \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n   \"@\n@@ -379,31 +514,13 @@\n    lwarx %3,%y0\\n\\tandis. %2,%3,%u1\\n\\tstwcx. %2,%y0\\n\\tbne- $-12\"\n   [(set_attr \"length\" \"16,16,16,16\")])\n \n-(define_insn \"*sync_anddi_internal\"\n-  [(set (match_operand:DI 2 \"gpc_reg_operand\" \"=&r,&r,&r,&r,&r\")\n-\t(and:DI (match_operand:DI 0 \"memory_operand\" \"+Z,Z,Z,Z,Z\")\n-\t\t(match_operand:DI 1 \"and_operand\" \"r,S,T,K,J\")))\n-   (set (match_operand:DI 3 \"gpc_reg_operand\" \"=&b,&b,&b,&b,&b\") (match_dup 0))\n-   (set (match_dup 0) \n-\t(unspec_volatile:DI [(and:DI (match_dup 0) (match_dup 1))]\n-\t\t   UNSPECV_SYNC_OP))\n-   (clobber (match_scratch:CC 4 \"=&x,&x,&x,&x,&x\"))]\n-  \"TARGET_POWERPC64\"\n-  \"@\n-   ldarx %3,%y0\\n\\tand %2,%3,%1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\n-   ldarx %3,%y0\\n\\trldic%B1 %2,%3,0,%S1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\n-   ldarx %3,%y0\\n\\trlwinm %2,%3,0,%m1,%M1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\n-   ldarx %3,%y0\\n\\tandi. %2,%3,%b1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\n-   ldarx %3,%y0\\n\\tandis. %2,%3,%b1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\"\n-  [(set_attr \"length\" \"16,16,16,16,16\")])\n-\n (define_insn \"*sync_boolsi_internal\"\n   [(set (match_operand:SI 2 \"gpc_reg_operand\" \"=&r,&r,&r\")\n \t(match_operator:SI 4 \"boolean_or_operator\"\n \t [(match_operand:SI 0 \"memory_operand\" \"+Z,Z,Z\")\n \t  (match_operand:SI 1 \"logical_operand\" \"r,K,L\")]))\n    (set (match_operand:SI 3 \"gpc_reg_operand\" \"=&b,&b,&b\") (match_dup 0))\n-   (set (match_dup 0) (unspec_volatile:SI [(match_dup 4)] UNSPECV_SYNC_OP))\n+   (set (match_dup 0) (unspec:SI [(match_dup 4)] UNSPEC_SYNC_OP))\n    (clobber (match_scratch:CC 5 \"=&x,&x,&x\"))]\n   \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n   \"@\n@@ -412,33 +529,6 @@\n    lwarx %3,%y0\\n\\t%q4is %2,%3,%u1\\n\\tstwcx. %2,%y0\\n\\tbne- $-12\"\n   [(set_attr \"length\" \"16,16,16\")])\n \n-(define_insn \"*sync_booldi_internal\"\n-  [(set (match_operand:DI 2 \"gpc_reg_operand\" \"=&r,&r,&r\")\n-\t(match_operator:DI 4 \"boolean_or_operator\"\n-\t [(match_operand:DI 0 \"memory_operand\" \"+Z,Z,Z\")\n-\t  (match_operand:DI 1 \"logical_operand\" \"r,K,JF\")]))\n-   (set (match_operand:DI 3 \"gpc_reg_operand\" \"=&b,&b,&b\") (match_dup 0))\n-   (set (match_dup 0) (unspec_volatile:DI [(match_dup 4)] UNSPECV_SYNC_OP))\n-   (clobber (match_scratch:CC 5 \"=&x,&x,&x\"))]\n-  \"TARGET_POWERPC64\"\n-  \"@\n-   ldarx %3,%y0\\n\\t%q4 %2,%3,%1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\n-   ldarx %3,%y0\\n\\t%q4i %2,%3,%b1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\n-   ldarx %3,%y0\\n\\t%q4is %2,%3,%u1\\n\\tstdcx. %2,%y0\\n\\tbne- $-12\"\n-  [(set_attr \"length\" \"16,16,16\")])\n-\n-(define_insn \"*sync_boolc<mode>_internal\"\n-  [(set (match_operand:GPR 2 \"gpc_reg_operand\" \"=&r\")\n-\t(match_operator:GPR 4 \"boolean_operator\"\n-\t [(not:GPR (match_operand:GPR 0 \"memory_operand\" \"+Z\"))\n-\t  (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")]))\n-   (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n-   (set (match_dup 0) (unspec_volatile:GPR [(match_dup 4)] UNSPECV_SYNC_OP))\n-   (clobber (match_scratch:CC 5 \"=&x\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"<larx> %3,%y0\\n\\t%q4 %2,%1,%3\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n-  [(set_attr \"length\" \"16\")])\n-\n ; This pattern could also take immediate values of operand 1,\n ; since the non-NOT version of the operator is used; but this is not\n ; very useful, since in practice operand 1 is a full 32-bit value.\n@@ -450,39 +540,15 @@\n \t\t  (match_operand:SI 5 \"logical_operand\" \"rK\"))\n \t  (match_operand:SI 1 \"gpc_reg_operand\" \"r\")]))\n    (set (match_operand:SI 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n-   (set (match_dup 0) (unspec_volatile:SI [(match_dup 4)] UNSPECV_SYNC_OP))\n+   (set (match_dup 0) (unspec:SI [(match_dup 4)] UNSPEC_SYNC_OP))\n    (clobber (match_scratch:CC 6 \"=&x\"))]\n   \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n   \"lwarx %3,%y0\\n\\txor%I2 %2,%3,%5\\n\\t%q4 %2,%2,%1\\n\\tstwcx. %2,%y0\\n\\tbne- $-16\"\n   [(set_attr \"length\" \"20\")])\n \n-(define_insn \"*sync_boolc<mode>_internal2\"\n-  [(set (match_operand:GPR 2 \"gpc_reg_operand\" \"=&r\")\n-\t(match_operator:GPR 4 \"boolean_operator\"\n-\t [(not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\"))\n-\t  (match_operand:GPR 0 \"memory_operand\" \"+Z\")]))\n-   (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n-   (set (match_dup 0) (unspec_volatile:GPR [(match_dup 4)] UNSPECV_SYNC_OP))\n-   (clobber (match_scratch:CC 5 \"=&x\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"<larx> %3,%y0\\n\\t%q4 %2,%3,%1\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n-  [(set_attr \"length\" \"16\")])\n-\n-(define_insn \"*sync_boolcc<mode>_internal\"\n-  [(set (match_operand:GPR 2 \"gpc_reg_operand\" \"=&r\")\n-\t(match_operator:GPR 4 \"boolean_operator\"\n-\t [(not:GPR (match_operand:GPR 0 \"memory_operand\" \"+Z\"))\n-\t  (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\"))]))\n-   (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n-   (set (match_dup 0) (unspec_volatile:GPR [(match_dup 4)] UNSPECV_SYNC_OP))\n-   (clobber (match_scratch:CC 5 \"=&x\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"<larx> %3,%y0\\n\\t%q4 %2,%1,%3\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n-  [(set_attr \"length\" \"16\")])\n-\n (define_insn \"isync\"\n   [(set (mem:BLK (match_scratch 0 \"X\"))\n-        (unspec_volatile:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPECV_ISYNC))]\n+\t(unspec_volatile:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPEC_ISYNC))]\n   \"\"\n   \"{ics|isync}\"\n   [(set_attr \"type\" \"isync\")])\n@@ -501,7 +567,7 @@\n ; Some AIX assemblers don't accept lwsync, so we use a .long.\n (define_insn \"lwsync\"\n   [(set (mem:BLK (match_scratch 0 \"X\"))\n-        (unspec_volatile:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPECV_LWSYNC))]\n+\t(unspec_volatile:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPEC_LWSYNC))]\n   \"\"\n   \".long 0x7c2004ac\"\n   [(set_attr \"type\" \"sync\")])"}]}