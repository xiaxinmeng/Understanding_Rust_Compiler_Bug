{"sha": "9edd4689bdc3cab0d69f23afbb12cd726475551a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVkZDQ2ODliZGMzY2FiMGQ2OWYyM2FmYmIxMmNkNzI2NDc1NTUxYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-09-19T16:50:43Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-09-19T16:50:43Z"}, "message": "(preds): Correct typo in name of `comparison_operator'.\n\n(add_to_sequence): If PREDICATE_CODES specified, warn if we find a predicate\nnot in that list.\n\nFrom-SVN: r5364", "tree": {"sha": "b85b84891d74fec154c818cde6cdb39f33610fcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b85b84891d74fec154c818cde6cdb39f33610fcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9edd4689bdc3cab0d69f23afbb12cd726475551a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9edd4689bdc3cab0d69f23afbb12cd726475551a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9edd4689bdc3cab0d69f23afbb12cd726475551a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9edd4689bdc3cab0d69f23afbb12cd726475551a/comments", "author": null, "committer": null, "parents": [{"sha": "e64c4f9e2e81206c40dab6de2054cfb265db1ac2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e64c4f9e2e81206c40dab6de2054cfb265db1ac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e64c4f9e2e81206c40dab6de2054cfb265db1ac2"}], "stats": {"total": 52, "additions": 31, "deletions": 21}, "files": [{"sha": "19c0f0d4dcd4d9a12bf8594de824bc9c6eee932f", "filename": "gcc/genrecog.c", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edd4689bdc3cab0d69f23afbb12cd726475551a/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edd4689bdc3cab0d69f23afbb12cd726475551a/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=9edd4689bdc3cab0d69f23afbb12cd726475551a", "patch": "@@ -1,5 +1,5 @@\n /* Generate code from machine description to recognize rtl as insns.\n-   Copyright (C) 1987, 1988, 1992 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1992, 1993 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -158,7 +158,7 @@ static struct pred_table\n      {\"push_operand\", {MEM}},\n      {\"memory_operand\", {SUBREG, MEM}},\n      {\"indirect_operand\", {SUBREG, MEM}},\n-     {\"comparison_operation\", {EQ, NE, LE, LT, GE, LT, LEU, LTU, GEU, GTU}},\n+     {\"comparison_operator\", {EQ, NE, LE, LT, GE, LT, LEU, LTU, GEU, GTU}},\n      {\"mode_independent_operand\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\n \t\t\t\t   LABEL_REF, SUBREG, REG, MEM}}};\n \n@@ -378,30 +378,40 @@ add_to_sequence (pattern, last, position)\n \t considerably simplify the generated code.  */\n \n       if (new->tests)\n-\tfor (i = 0; i < NUM_KNOWN_PREDS; i++)\n-\t  if (! strcmp (preds[i].name, new->tests))\n-\t    {\n-\t      int j;\n-\t      int allows_const_int = 0;\n+\t{\n+\t  for (i = 0; i < NUM_KNOWN_PREDS; i++)\n+\t    if (! strcmp (preds[i].name, new->tests))\n+\t      {\n+\t\tint j;\n+\t\tint allows_const_int = 0;\n \n-\t      new->pred = i;\n+\t\tnew->pred = i;\n \n-\t      if (preds[i].codes[1] == 0 && new->code == UNKNOWN)\n-\t\t{\n-\t\t  new->code = preds[i].codes[0];\n-\t\t  if (! strcmp (\"const_int_operand\", new->tests))\n-\t\t    new->tests = 0, new->pred = -1;\n-\t\t}\n+\t\tif (preds[i].codes[1] == 0 && new->code == UNKNOWN)\n+\t\t  {\n+\t\t    new->code = preds[i].codes[0];\n+\t\t    if (! strcmp (\"const_int_operand\", new->tests))\n+\t\t      new->tests = 0, new->pred = -1;\n+\t\t  }\n \n-\t      for (j = 0; j < NUM_RTX_CODE && preds[i].codes[j] != 0; j++)\n-\t\tif (preds[i].codes[j] == CONST_INT)\n-\t\t  allows_const_int = 1;\n+\t\tfor (j = 0; j < NUM_RTX_CODE && preds[i].codes[j] != 0; j++)\n+\t\t  if (preds[i].codes[j] == CONST_INT)\n+\t\t    allows_const_int = 1;\n \n-\t      if (! allows_const_int)\n-\t\tnew->enforce_mode = new->ignore_mode= 1;\n+\t\tif (! allows_const_int)\n+\t\t  new->enforce_mode = new->ignore_mode= 1;\n \n-\t      break;\n-\t    }\n+\t\tbreak;\n+\t      }\n+\n+#ifdef PREDICATE_CODES\n+\t  /* If the port has a list of the predicates it uses but omits\n+\t     one, warn.  */\n+\t  if (i == NUM_KNOWN_PREDS)\n+\t    fprintf (stderr, \"Warning: `%s' not in PREDICATE_CODES\\n\",\n+\t\t     new->tests);\n+#endif\n+\t}\n \n       if (code == MATCH_OPERATOR || code == MATCH_PARALLEL)\n \t{"}]}