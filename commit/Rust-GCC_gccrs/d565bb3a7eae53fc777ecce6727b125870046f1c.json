{"sha": "d565bb3a7eae53fc777ecce6727b125870046f1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU2NWJiM2E3ZWFlNTNmYzc3N2VjY2U2NzI3YjEyNTg3MDA0NmYxYw==", "commit": {"author": {"name": "Brooks Moses", "email": "brooks.moses@codesourcery.com", "date": "2007-01-21T00:32:55Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2007-01-21T00:32:55Z"}, "message": "intrinsic.texi: Edited all \"Syntax\" examples to a consistent form.\n\n* intrinsic.texi: Edited all \"Syntax\" examples to a consistent form.\n\t(MAXVAL): Corrected description of result characteristics.\n\t(MINVAL): Same.\n\t(UMASK): Added documentation.\n\nFrom-SVN: r121020", "tree": {"sha": "d103741d7221686f452a3886c8893ca5c2f9e9a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d103741d7221686f452a3886c8893ca5c2f9e9a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d565bb3a7eae53fc777ecce6727b125870046f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d565bb3a7eae53fc777ecce6727b125870046f1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d565bb3a7eae53fc777ecce6727b125870046f1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d565bb3a7eae53fc777ecce6727b125870046f1c/comments", "author": null, "committer": null, "parents": [{"sha": "f4b0ef41aa9f7e43d43d73e52233bec4941c2b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b0ef41aa9f7e43d43d73e52233bec4941c2b62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4b0ef41aa9f7e43d43d73e52233bec4941c2b62"}], "stats": {"total": 292, "additions": 145, "deletions": 147}, "files": [{"sha": "f4cd7d13eb43e0ab4e5cc10db4d1320d3dc1732a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d565bb3a7eae53fc777ecce6727b125870046f1c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d565bb3a7eae53fc777ecce6727b125870046f1c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d565bb3a7eae53fc777ecce6727b125870046f1c", "patch": "@@ -1,3 +1,10 @@\n+2007-01-20  Brooks Moses  <brooks.moses@codesourcery.com>\n+\n+\t* intrinsic.texi: Edited all \"Syntax\" examples to a consistent form.\n+\t(MAXVAL): Corrected description of result characteristics.\n+\t(MINVAL): Same.\n+\t(UMASK): Added documentation.\n+\n 2007-01-20  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* openmp.c, matchexp.c, module.c, scanner.c, resolve.c, st.c,"}, {"sha": "90f15c97cc10e2fccca472242e5f3f4d2856dda1", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 138, "deletions": 147, "changes": 285, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d565bb3a7eae53fc777ecce6727b125870046f1c/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d565bb3a7eae53fc777ecce6727b125870046f1c/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=d565bb3a7eae53fc777ecce6727b125870046f1c", "patch": "@@ -350,7 +350,7 @@ F77 and later, has overloads that are GNU extensions\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = ABS(X)}\n+@code{RESULT = ABS(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -406,7 +406,7 @@ GNU extension\n Inquiry function\n \n @item @emph{Syntax}:\n-@code{I = ACCESS(NAME, MODE)}\n+@code{RESULT = ACCESS(NAME, MODE)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -461,7 +461,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{C = ACHAR(I)}\n+@code{RESULT = ACHAR(I)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -500,7 +500,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = ACOS(X)}\n+@code{RESULT = ACOS(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -550,7 +550,7 @@ GNU extension\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = ACOSH(X)}\n+@code{RESULT = ACOSH(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -593,7 +593,7 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{STR = ADJUSTL(STR)}\n+@code{RESULT = ADJUSTL(STR)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -634,7 +634,7 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{STR = ADJUSTR(STR)}\n+@code{RESULT = ADJUSTR(STR)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -680,7 +680,7 @@ F77 and later, has overloads that are GNU extensions\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = AIMAG(Z)}\n+@code{RESULT = AIMAG(Z)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -730,7 +730,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = AINT(X [, KIND])} \n+@code{RESULT = AINT(X [, KIND])} \n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -836,7 +836,7 @@ F95 and later\n transformational function\n \n @item @emph{Syntax}:\n-@code{L = ALL(MASK [, DIM])}\n+@code{RESULT = ALL(MASK [, DIM])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -901,7 +901,7 @@ F95 and later\n Inquiry function\n \n @item @emph{Syntax}:\n-@code{L = ALLOCATED(X)}\n+@code{RESULT = ALLOCATED(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -991,8 +991,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = ANINT(X)}\n-@code{X = ANINT(X, KIND)}\n+@code{RESULT = ANINT(X [, KIND])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1047,8 +1046,7 @@ F95 and later\n transformational function\n \n @item @emph{Syntax}:\n-@code{L = ANY(MASK)} \n-@code{L = ANY(MASK, DIM)}\n+@code{RESULT = ANY(MASK [, DIM])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1114,7 +1112,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = ASIN(X)}\n+@code{RESULT = ASIN(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1164,7 +1162,7 @@ GNU extension\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = ASINH(X)}\n+@code{RESULT = ASINH(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1206,8 +1204,7 @@ F95 and later\n Inquiry function\n \n @item @emph{Syntax}:\n-@code{L = ASSOCIATED(PTR)} \n-@code{L = ASSOCIATED(PTR [, TGT])}\n+@code{RESULT = ASSOCIATED(PTR [, TGT])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1282,7 +1279,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = ATAN(X)}\n+@code{RESULT = ATAN(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1331,7 +1328,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = ATAN2(Y,X)}\n+@code{RESULT = ATAN2(Y,X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1383,7 +1380,7 @@ GNU extension\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = ATANH(X)}\n+@code{RESULT = ATANH(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1428,7 +1425,7 @@ GNU extension\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = BESJ0(X)}\n+@code{RESULT = BESJ0(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1474,7 +1471,7 @@ GNU extension\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = BESJ1(X)}\n+@code{RESULT = BESJ1(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1520,7 +1517,7 @@ GNU extension\n Elemental function\n \n @item @emph{Syntax}:\n-@code{Y = BESJN(N, X)}\n+@code{RESULT = BESJN(N, X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1567,7 +1564,7 @@ GNU extension\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = BESY0(X)}\n+@code{RESULT = BESY0(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1612,7 +1609,7 @@ GNU extension\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = BESY1(X)}\n+@code{RESULT = BESY1(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1657,7 +1654,7 @@ GNU extension\n Elemental function\n \n @item @emph{Syntax}:\n-@code{Y = BESYN(N, X)}\n+@code{RESULT = BESYN(N, X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1704,7 +1701,7 @@ F95 and later\n Inquiry function\n \n @item @emph{Syntax}:\n-@code{I = BIT_SIZE(I)}\n+@code{RESULT = BIT_SIZE(I)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1744,7 +1741,7 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{I = BTEST(I,POS)}\n+@code{RESULT = BTEST(I, POS)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1787,7 +1784,7 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{I = CEILING(X [, KIND])}\n+@code{RESULT = CEILING(X [, KIND])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1833,7 +1830,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{C = CHAR(I [, KIND])}\n+@code{RESULT = CHAR(I [, KIND])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1878,7 +1875,7 @@ GNU extension\n Non-elemental subroutine\n \n @item @emph{Syntax}:\n-@code{CALL chdir(PATH[,STATUS])}\n+@code{CALL CHDIR(PATH [, STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -1994,7 +1991,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{C = CMPLX(X [, Y [, KIND]])}\n+@code{RESULT = CMPLX(X [, Y [, KIND]])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -2042,7 +2039,7 @@ F2003\n Inquiry function\n \n @item @emph{Syntax}:\n-@code{I = COMMAND_ARGUMENT_COUNT()}\n+@code{RESULT = COMMAND_ARGUMENT_COUNT()}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -2132,7 +2129,7 @@ F77 and later, has overloads that are GNU extensions\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = COS(X)}\n+@code{RESULT = COS(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -2225,7 +2222,7 @@ Inverse function: @ref{ACOSH}\n \n @table @asis\n @item @emph{Description}:\n-@code{COUNT(MASK[,DIM])} counts the number of @code{.TRUE.} elements of\n+@code{COUNT(MASK [, DIM])} counts the number of @code{.TRUE.} elements of\n @var{MASK} along the dimension of @var{DIM}.  If @var{DIM} is omitted it is\n taken to be @code{1}.  @var{DIM} is a scaler of type @code{INTEGER} in the\n range of @math{1 /leq DIM /leq n)} where @math{n} is the rank of @var{MASK}.\n@@ -2237,7 +2234,7 @@ F95 and later\n transformational function\n \n @item @emph{Syntax}:\n-@code{I = COUNT(MASK[,DIM])}\n+@code{RESULT = COUNT(MASK [, DIM])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -2295,7 +2292,7 @@ F95 and later\n Subroutine\n \n @item @emph{Syntax}:\n-@code{CPU_TIME(X)}\n+@code{CALL CPU_TIME(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -2326,7 +2323,7 @@ end program test_cpu_time\n \n @table @asis\n @item @emph{Description}:\n-@code{CSHIFT(ARRAY, SHIFT[,DIM])} performs a circular shift on elements of\n+@code{CSHIFT(ARRAY, SHIFT [, DIM])} performs a circular shift on elements of\n @var{ARRAY} along the dimension of @var{DIM}.  If @var{DIM} is omitted it is\n taken to be @code{1}.  @var{DIM} is a scaler of type @code{INTEGER} in the\n range of @math{1 /leq DIM /leq n)} where @math{n} is the rank of @var{ARRAY}.\n@@ -2342,7 +2339,7 @@ F95 and later\n transformational function\n \n @item @emph{Syntax}:\n-@code{A = CSHIFT(A, SHIFT[,DIM])}\n+@code{RESULT = CSHIFT(A, SHIFT [, DIM])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -2517,7 +2514,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = DBLE(X)}\n+@code{RESULT = DBLE(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -2563,8 +2560,7 @@ GNU extension\n Elemental function\n \n @item @emph{Syntax}:\n-@code{C = DCMPLX(X)}\n-@code{C = DCMPLX(X,Y)}\n+@code{RESULT = DCMPLX(X [, Y])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -2610,7 +2606,7 @@ GNU extension\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = DFLOAT(X)}\n+@code{RESULT = DFLOAT(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -2652,7 +2648,7 @@ F95 and later\n Inquiry function\n \n @item @emph{Syntax}:\n-@code{C = DIGITS(X)}\n+@code{RESULT = DIGITS(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -2696,7 +2692,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = DIM(X,Y)}\n+@code{RESULT = DIM(X, Y)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -2750,7 +2746,7 @@ F95 and later\n transformational function\n \n @item @emph{Syntax}:\n-@code{S = DOT_PRODUCT(X,Y)}\n+@code{RESULT = DOT_PRODUCT(X, Y)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -2796,7 +2792,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{D = DPROD(X,Y)}\n+@code{RESULT = DPROD(X, Y)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -2838,7 +2834,7 @@ GNU extension\n Elemental function\n \n @item @emph{Syntax}:\n-@code{D = DREAL(Z)}\n+@code{RESULT = DREAL(Z)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -2974,7 +2970,7 @@ F95 and later\n transformational function\n \n @item @emph{Syntax}:\n-@code{A = EOSHIFT(A, SHIFT[,BOUNDARY, DIM])}\n+@code{RESULT = EOSHIFT(A, SHIFT [, BOUNDARY, DIM])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -3022,7 +3018,7 @@ F95 and later\n Inquiry function\n \n @item @emph{Syntax}:\n-@code{C = EPSILON(X)}\n+@code{RESULT = EPSILON(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -3061,7 +3057,7 @@ GNU Extension\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = ERF(X)}\n+@code{RESULT = ERF(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -3105,7 +3101,7 @@ GNU extension\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = ERFC(X)}\n+@code{RESULT = ERFC(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -3272,7 +3268,7 @@ F77 and later, has overloads that are GNU extensions\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = EXP(X)}\n+@code{RESULT = EXP(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -3320,7 +3316,7 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{I = EXPONENT(X)}\n+@code{RESULT = EXPONENT(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -3415,15 +3411,15 @@ GNU extension\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = FLOAT(I)}\n+@code{RESULT = FLOAT(I)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n @item @var{I} @tab The type shall be @code{INTEGER(*)}.\n @end multitable\n \n @item @emph{Return value}:\n-The return value is of type default @code{REAL}\n+The return value is of type default @code{REAL}.\n \n @item @emph{Example}:\n @smallexample\n@@ -3463,7 +3459,7 @@ GNU extension\n Non-elemental subroutine\n \n @item @emph{Syntax}:\n-@code{CALL FGET(C[,STATUS])}\n+@code{CALL FGET(C [, STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -3519,7 +3515,7 @@ GNU extension\n Non-elemental subroutine\n \n @item @emph{Syntax}:\n-@code{CALL FGETC(UNIT,C[,STATUS])}\n+@code{CALL FGETC(UNIT, C [, STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -3567,7 +3563,7 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{I = FLOOR(X [, KIND])}\n+@code{RESULT = FLOOR(X [, KIND])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -3646,7 +3642,7 @@ GNU extension\n non-elemental function\n \n @item @emph{Syntax}:\n-@code{I = FNUM(UNIT)}\n+@code{RESULT = FNUM(UNIT)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -3694,7 +3690,7 @@ GNU extension\n Non-elemental subroutine\n \n @item @emph{Syntax}:\n-@code{CALL FPUT(C[,STATUS])}\n+@code{CALL FPUT(C [, STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -3744,7 +3740,7 @@ GNU extension\n Non-elemental subroutine\n \n @item @emph{Syntax}:\n-@code{CALL FPUTC(UNIT,C[,STATUS])}\n+@code{CALL FPUTC(UNIT, C [, STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -3876,7 +3872,7 @@ GNU extension\n Non-elemental subroutine\n \n @item @emph{Syntax}:\n-@code{CALL fstat(UNIT,BUFF[,STATUS])}\n+@code{CALL FSTAT(UNIT, BUFF [, STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -3994,7 +3990,7 @@ GNU extension\n Subroutine\n \n @item @emph{Syntax}:\n-@code{CALL GETARG(N,ARG)}\n+@code{CALL GETARG(N, ARG)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -4091,7 +4087,7 @@ F2003\n Subroutine\n \n @item @emph{Syntax}:\n-@code{CALL GET_COMMAND_ARGUMENT(N,ARG)}\n+@code{CALL GET_COMMAND_ARGUMENT(N, ARG)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -4146,7 +4142,7 @@ GNU extension\n Non-elemental subroutine.\n \n @item @emph{Syntax}:\n-@code{CALL GETCWD(CWD[,STATUS])}\n+@code{CALL GETCWD(CWD [, STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -4191,7 +4187,7 @@ GNU extension\n Subroutine\n \n @item @emph{Syntax}:\n-@code{CALL GETENV(ENVVAR,VALUE)}\n+@code{CALL GETENV(ENVVAR, VALUE)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -4235,7 +4231,7 @@ F2003\n Subroutine\n \n @item @emph{Syntax}:\n-@code{CALL GET_ENVIRONMENT_VARIABLE(ENVVAR,VALUE)}\n+@code{CALL GET_ENVIRONMENT_VARIABLE(ENVVAR, VALUE)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -4276,7 +4272,7 @@ GNU extension\n function\n \n @item @emph{Syntax}:\n-@code{I = GETGID()}\n+@code{RESULT = GETGID()}\n \n @item @emph{Return value}:\n The return value of @code{GETGID} is an @code{INTEGER} of the default\n@@ -4350,7 +4346,7 @@ GNU extension\n function\n \n @item @emph{Syntax}:\n-@code{I = GETPID()}\n+@code{RESULT = GETPID()}\n \n @item @emph{Return value}:\n The return value of @code{GETPID} is an @code{INTEGER} of the default\n@@ -4388,7 +4384,7 @@ GNU extension\n function\n \n @item @emph{Syntax}:\n-@code{GETUID()}\n+@code{RESULT = GETUID()}\n \n @item @emph{Return value}:\n The return value of @code{GETUID} is an @code{INTEGER} of the default\n@@ -4514,7 +4510,7 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{Y = HUGE(X)}\n+@code{RESULT = HUGE(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -4553,7 +4549,7 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{I = IACHAR(C)}\n+@code{RESULT = IACHAR(C)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -4647,7 +4643,7 @@ GNU extension\n Non-elemental Function\n \n @item @emph{Syntax}:\n-@code{I = IARGC()}\n+@code{RESULT = IARGC()}\n \n @item @emph{Arguments}:\n None.\n@@ -4797,7 +4793,7 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{I = ICHAR(C)}\n+@code{RESULT = ICHAR(C)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -4933,7 +4929,7 @@ GNU extension\n Elemental function\n \n @item @emph{Syntax}:\n-@code{I = IERRNO()}\n+@code{RESULT = IERRNO()}\n \n @item @emph{Arguments}:\n None.\n@@ -4967,7 +4963,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{I = INDEX(STRING, SUBSTRING [, BACK])}\n+@code{RESULT = INDEX(STRING, SUBSTRING [, BACK])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -5006,7 +5002,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@item @code{X = INT(X [, KIND))}\n+@item @code{RESULT = INT(X [, KIND))}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -5114,7 +5110,7 @@ GNU extension\n non-elemental function\n \n @item @emph{Syntax}:\n-@code{I = IRAND(FLAG)}\n+@code{RESULT = IRAND(FLAG)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -5358,7 +5354,7 @@ F95 and later\n Inquiry function\n \n @item @emph{Syntax}:\n-@code{I = LBOUND(ARRAY [, DIM])}\n+@code{RESULT = LBOUND(ARRAY [, DIM])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -5430,7 +5426,7 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{L = LEN_TRIM(STRING)}\n+@code{RESULT = LEN_TRIM(STRING)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -5475,7 +5471,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{L = LGE(STRING_A, STRING_B)}\n+@code{RESULT = LGE(STRING_A, STRING_B)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -5521,7 +5517,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{L = LGT(STRING_A, STRING_B)}\n+@code{RESULT = LGT(STRING_A, STRING_B)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -5603,7 +5599,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{L = LLE(STRING_A, STRING_B)}\n+@code{RESULT = LLE(STRING_A, STRING_B)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -5649,7 +5645,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{L = LLT(STRING_A, STRING_B)}\n+@code{RESULT = LLT(STRING_A, STRING_B)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -5684,7 +5680,7 @@ GNU extension\n Elemental function\n \n @item @emph{Syntax}:\n-@code{L = LNBLNK(STRING)}\n+@code{RESULT = LNBLNK(STRING)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -5717,7 +5713,7 @@ GNU extension\n Inquiry function\n \n @item @emph{Syntax}:\n-@code{I = LOC(X)}\n+@code{RESULT = LOC(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -5763,7 +5759,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = LOG(X)}\n+@code{RESULT = LOG(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -5816,7 +5812,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = LOG10(X)}\n+@code{RESULT = LOG10(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -5944,7 +5940,7 @@ GNU extension\n Non-elemental subroutine\n \n @item @emph{Syntax}:\n-@code{CALL LSTAT(FILE,BUFF[,STATUS])}\n+@code{CALL LSTAT(FILE, BUFF [, STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -6192,7 +6188,7 @@ F95 and later\n Inquiry function\n \n @item @emph{Syntax}:\n-@code{I = MAXEXPONENT(X)}\n+@code{RESULT = MAXEXPONENT(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -6315,13 +6311,11 @@ Transformational function\n @end multitable\n \n @item @emph{Return value}:\n-If @var{DIM} is absent, the result is a rank-one array with a length\n-equal to the rank of @var{ARRAY}.  If @var{DIM} is present, the result\n-is an array with a rank one less than the rank of @var{ARRAY}, and a\n-size corresponding to the size of @var{ARRAY} with the @var{DIM}\n-dimension removed.  If @var{DIM} is present and @var{ARRAY} has a rank\n-of one, the result is a scalar.  In all cases, the result is of the same\n-type and kind as @var{ARRAY}.\n+If @var{DIM} is absent, or if @var{ARRAY} has a rank of one, the result\n+is a scalar.  If @var{DIM} is present, the result is an array with a\n+rank one less than the rank of @var{ARRAY}, and a size corresponding to\n+the size of @var{ARRAY} with the @var{DIM} dimension removed.  In all\n+cases, the result is of the same type and kind as @var{ARRAY}.\n \n @item @emph{See also}:\n @ref{MAX}, @ref{MAXLOC}\n@@ -6378,7 +6372,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{RESULT = MIN(A1, A2 [, A3 [, ...]])}\n+@code{RESULT = MIN(A1, A2 [, A3, ...])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -6426,7 +6420,7 @@ F95 and later\n Inquiry function\n \n @item @emph{Syntax}:\n-@code{I = MINEXPONENT(X)}\n+@code{RESULT = MINEXPONENT(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -6541,13 +6535,11 @@ Transformational function\n @end multitable\n \n @item @emph{Return value}:\n-If @var{DIM} is absent, the result is a rank-one array with a length\n-equal to the rank of @var{ARRAY}.  If @var{DIM} is present, the result\n-is an array with a rank one less than the rank of @var{ARRAY}, and a\n-size corresponding to the size of @var{ARRAY} with the @var{DIM}\n-dimension removed.  If @var{DIM} is present and @var{ARRAY} has a rank\n-of one, the result is a scalar.  In all cases, the result is of the same\n-type and kind as @var{ARRAY}.\n+If @var{DIM} is absent, or if @var{ARRAY} has a rank of one, the result\n+is a scalar.  If @var{DIM} is present, the result is an array with a\n+rank one less than the rank of @var{ARRAY}, and a size corresponding to\n+the size of @var{ARRAY} with the @var{DIM} dimension removed.  In all\n+cases, the result is of the same type and kind as @var{ARRAY}.\n \n @item @emph{See also}:\n @ref{MIN}, @ref{MINLOC}\n@@ -6575,7 +6567,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = MOD(A,P)}\n+@code{RESULT = MOD(A, P)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -6634,7 +6626,7 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = MODULO(A,P)}\n+@code{RESULT = MODULO(A, P)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -6780,7 +6772,7 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{Y = NEAREST(X, S)}\n+@code{RESULT = NEAREST(X, S)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -6825,7 +6817,7 @@ F2003 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{C = NEW_LINE(C)}\n+@code{RESULT = NEW_LINE(C)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -6865,7 +6857,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = NINT(X)}\n+@code{RESULT = NINT(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -7085,7 +7077,7 @@ F95 and later\n Inquiry function\n \n @item @emph{Syntax}:\n-@code{I = PRECISION(X)}\n+@code{RESULT = PRECISION(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -7176,7 +7168,7 @@ F95 and later\n Inquiry function\n \n @item @emph{Syntax}:\n-@code{R = RADIX(X)}\n+@code{RESULT = RADIX(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -7242,7 +7234,7 @@ GNU extension\n Non-elemental function\n \n @item @emph{Syntax}:\n-@code{X = RAND(FLAG)}\n+@code{RESULT = RAND(FLAG)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -7337,7 +7329,7 @@ F95 and later\n Inquiry function\n \n @item @emph{Syntax}:\n-@code{I = RANGE(X)}\n+@code{RESULT = RANGE(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -7374,9 +7366,8 @@ Elemental function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .30 .80\n-@item @code{X = REAL(X)}\n-@item @code{X = REAL(X, KIND)}\n-@item @code{X = REALPART(Z)}\n+@item @code{RESULT = REAL(X [, KIND])}\n+@item @code{RESULT = REALPART(Z)}\n @end multitable\n \n @item @emph{Arguments}:\n@@ -7523,7 +7514,7 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{Y = RRSPACING(X)}\n+@code{RESULT = RRSPACING(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -7596,7 +7587,7 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{Y = SCALE(X, I)}\n+@code{RESULT = SCALE(X, I)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -7665,7 +7656,7 @@ GNU extension\n function\n \n @item @emph{Syntax}:\n-@code{T = SECNDS (X)}\n+@code{RESULT = SECNDS (X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -7712,9 +7703,7 @@ F95 and later\n Transformational function\n \n @item @emph{Syntax}:\n-@multitable @columnfractions .80\n-@item @code{J = SELECTED_INT_KIND(I)}\n-@end multitable\n+@code{RESULT = SELECTED_INT_KIND(I)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -7758,9 +7747,7 @@ F95 and later\n Transformational function\n \n @item @emph{Syntax}:\n-@multitable @columnfractions .80\n-@item @code{I = SELECTED_REAL_KIND(P,R)}\n-@end multitable\n+@code{RESULT = SELECTED_REAL_KIND(P, R)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -7821,7 +7808,7 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{Y = SET_EXPONENT(X, I)}\n+@code{RESULT = SET_EXPONENT(X, I)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -7891,7 +7878,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = SIGN(A,B)}\n+@code{RESULT = SIGN(A, B)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -7951,8 +7938,7 @@ subroutine, non-elemental function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n-@item @code{CALL SIGNAL(NUMBER, HANDLER)}\n-@item @code{CALL SIGNAL(NUMBER, HANDLER, STATUS)}\n+@item @code{CALL SIGNAL(NUMBER, HANDLER [, STATUS])}\n @item @code{STATUS = SIGNAL(NUMBER, HANDLER)}\n @end multitable\n \n@@ -8004,7 +7990,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = SIN(X)}\n+@code{RESULT = SIN(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -8055,7 +8041,7 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = SINH(X)}\n+@code{RESULT = SINH(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -8127,7 +8113,7 @@ GNU extension\n function\n \n @item @emph{Syntax}:\n-@code{X = SNGL(A)}\n+@code{RESULT = SNGL(A)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -8213,7 +8199,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = SQRT(X)}\n+@code{RESULT = SQRT(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -8512,7 +8498,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = TAN(X)}\n+@code{RESULT = TAN(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -8688,7 +8674,7 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{Y = TINY(X)}\n+@code{RESULT = TINY(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -8791,7 +8777,7 @@ F95 and later\n Inquiry function\n \n @item @emph{Syntax}:\n-@code{I = UBOUND(ARRAY [, DIM])}\n+@code{RESULT = UBOUND(ARRAY [, DIM])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -8819,22 +8805,27 @@ the relevant dimension.\n @cindex @code{UMASK} intrinsic\n @cindex file system operations\n \n-Intrinsic implemented, documentation pending.\n-\n @table @asis\n @item @emph{Description}:\n+Sets the file creation mask to @var{MASK} and returns the old value in\n+argument @var{OLD} if it is supplied. See @code{umask(2)}.\n+\n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n Subroutine\n \n @item @emph{Syntax}:\n+@code{CALL UMASK(MASK [, OLD])}\n+\n @item @emph{Arguments}:\n-@item @emph{Return value}:\n-@item @emph{Example}:\n-@item @emph{Specific names}:\n-@item @emph{See also}:\n+@multitable @columnfractions .15 .80\n+@item @var{MASK} @tab Shall be a scalar of type @code{INTEGER(*)}.\n+@item @var{MASK} @tab (Optional) Shall be a scalar of type\n+                      @code{INTEGER(*)}.\n+@end multitable\n+\n @end table\n \n "}]}