{"sha": "b80a2b4bcc7e4a7c5282c78d6d96df185137ae34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgwYTJiNGJjYzdlNGE3YzUyODJjNzhkNmQ5NmRmMTg1MTM3YWUzNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T13:31:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T13:31:14Z"}, "message": "[multiple changes]\n\n2014-08-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Check_Parameterless_Call): Use Relocate_Node\n\tto create the name of the parameterless call, rather than\n\tNew_Copy, to preserve the tree structure when the name is a\n\tcomplex expression, e.g. a selected component that denotes a\n\tprotected operation, whose prefix is itself a selected component.\n\n2014-08-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Use\n\tUnit_Declaration_Node to retrieve body when inlining, to handle\n\tproperly subprogram child units.\n\n2014-08-01  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_attr.adb: Minor reformatting.\n\nFrom-SVN: r213459", "tree": {"sha": "b6d280d4cfd0b876e933c7610106b4c88591c8a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6d280d4cfd0b876e933c7610106b4c88591c8a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b80a2b4bcc7e4a7c5282c78d6d96df185137ae34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b80a2b4bcc7e4a7c5282c78d6d96df185137ae34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b80a2b4bcc7e4a7c5282c78d6d96df185137ae34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b80a2b4bcc7e4a7c5282c78d6d96df185137ae34/comments", "author": null, "committer": null, "parents": [{"sha": "4b259b2d0605d3da3357b46a35bd7ec92b1aaee1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b259b2d0605d3da3357b46a35bd7ec92b1aaee1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b259b2d0605d3da3357b46a35bd7ec92b1aaee1"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "c2bd64a47b2790923042f53c4086351fa31a2c21", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b80a2b4bcc7e4a7c5282c78d6d96df185137ae34/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b80a2b4bcc7e4a7c5282c78d6d96df185137ae34/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b80a2b4bcc7e4a7c5282c78d6d96df185137ae34", "patch": "@@ -1,3 +1,21 @@\n+2014-08-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Check_Parameterless_Call): Use Relocate_Node\n+\tto create the name of the parameterless call, rather than\n+\tNew_Copy, to preserve the tree structure when the name is a\n+\tcomplex expression, e.g. a selected component that denotes a\n+\tprotected operation, whose prefix is itself a selected component.\n+\n+2014-08-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Use\n+\tUnit_Declaration_Node to retrieve body when inlining, to handle\n+\tproperly subprogram child units.\n+\n+2014-08-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_attr.adb: Minor reformatting.\n+\n 2014-08-01  Vincent Celier  <celier@adacore.com>\n \n \t* debug.adb: Minor documentation addition for -dn switch."}, {"sha": "904595e2fbddf7c95540a981325761646ceb7831", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b80a2b4bcc7e4a7c5282c78d6d96df185137ae34/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b80a2b4bcc7e4a7c5282c78d6d96df185137ae34/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=b80a2b4bcc7e4a7c5282c78d6d96df185137ae34", "patch": "@@ -2983,9 +2983,7 @@ package body Sem_Attr is\n             --  because it was valid in the generic unit. Ditto if this is\n             --  an inlining of a function declared in an instance.\n \n-            if In_Instance\n-              or else In_Inlined_Body\n-            then\n+            if In_Instance or else In_Inlined_Body then\n                return;\n \n             --  For sure OK if we have a real private type itself, but must\n@@ -3130,12 +3128,10 @@ package body Sem_Attr is\n                   --  The prefix denotes either the task type, or else a\n                   --  single task whose task type is being analyzed.\n \n-                  if (Is_Type (Tsk)\n-                      and then Tsk = S)\n-\n+                  if (Is_Type (Tsk) and then Tsk = S)\n                     or else (not Is_Type (Tsk)\n-                      and then Etype (Tsk) = S\n-                      and then not (Comes_From_Source (S)))\n+                              and then Etype (Tsk) = S\n+                              and then not (Comes_From_Source (S)))\n                   then\n                      null;\n                   else\n@@ -3166,7 +3162,6 @@ package body Sem_Attr is\n \n             begin\n                Get_First_Interp (P, Index, It);\n-\n                while Present (It.Nam) loop\n                   if It.Nam = Ent then\n                      null;\n@@ -3241,9 +3236,7 @@ package body Sem_Attr is\n       when Attribute_Descriptor_Size =>\n          Check_E0;\n \n-         if not Is_Entity_Name (P)\n-           or else not Is_Type (Entity (P))\n-         then\n+         if not Is_Entity_Name (P) or else not Is_Type (Entity (P)) then\n             Error_Attr_P (\"prefix of attribute % must denote a type\");\n          end if;\n \n@@ -3547,8 +3540,8 @@ package body Sem_Attr is\n          if Etype (P) =  Standard_Exception_Type then\n             Set_Etype (N, RTE (RE_Exception_Id));\n \n-         --  Ada 2005 (AI-345): Attribute 'Identity may be applied to\n-         --  task interface class-wide types.\n+         --  Ada 2005 (AI-345): Attribute 'Identity may be applied to task\n+         --  interface class-wide types.\n \n          elsif Is_Task_Type (Etype (P))\n            or else (Is_Access_Type (Etype (P))"}, {"sha": "e6e35ab0d1d87fefc688bb57a139f3646db2a598", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b80a2b4bcc7e4a7c5282c78d6d96df185137ae34/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b80a2b4bcc7e4a7c5282c78d6d96df185137ae34/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=b80a2b4bcc7e4a7c5282c78d6d96df185137ae34", "patch": "@@ -3593,8 +3593,8 @@ package body Sem_Ch6 is\n \n                else\n                   declare\n-                     Body_Spec : constant Node_Id := Parent (Body_Id);\n-                     Subp_Body : constant Node_Id := Parent (Body_Spec);\n+                     Subp_Body : constant Node_Id :=\n+                                   Unit_Declaration_Node (Body_Id);\n                      Subp_Decl : constant List_Id := Declarations (Subp_Body);\n \n                   begin"}, {"sha": "ac3acd428845649b54bd08ff880531c533be0d43", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b80a2b4bcc7e4a7c5282c78d6d96df185137ae34/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b80a2b4bcc7e4a7c5282c78d6d96df185137ae34/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=b80a2b4bcc7e4a7c5282c78d6d96df185137ae34", "patch": "@@ -1102,7 +1102,10 @@ package body Sem_Res is\n                end if;\n             end if;\n \n-            Nam := New_Copy (N);\n+            --  The node is the name of the parameterless call. Preserve its\n+            --  descendants, which may be complex expressions.\n+\n+            Nam := Relocate_Node (N);\n \n             --  If overloaded, overload set belongs to new copy\n "}]}