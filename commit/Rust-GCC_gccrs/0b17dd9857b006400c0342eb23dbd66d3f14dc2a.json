{"sha": "0b17dd9857b006400c0342eb23dbd66d3f14dc2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIxN2RkOTg1N2IwMDY0MDBjMDM0MmViMjNkYmQ2NmQzZjE0ZGMyYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-06-18T06:27:09Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-06-18T06:27:09Z"}, "message": "PA warning fixes:\n\n        * pa.c: Include system.h and toplev.h.  Remove redundant code.\n        (call_operand_address): Mark parameter `mode' with ATTRIBUTE_UNUSED.\n        (symbolic_operand): Likewise.\n        (symbolic_memory_operand): Likewise.\n        (pic_label_operand): Likewise.\n        (fp_reg_operand): Likewise.\n        (pre_cint_operand): Likewise.\n        (post_cint_operand): Likewise.\n        (ireg_or_int5_operand): Likewise.\n        (int5_operand): Likewise.\n        (uint5_operand): Likewise.\n        (int11_operand): Likewise.\n        (uint32_operand): Likewise.\n        (ior_operand): Likewise.\n        (lhs_lshift_cint_operand): Likewise.\n        (pc_or_label_operand): Likewise.\n        (legitimize_pic_address): Likewise.\n        (hppa_legitimize_address): Likewise for parameter `old'.\n        (output_block_move): Likewise for parameter `size_is_constant'.\n        (output_function_prologue): Likewise for parameter `size'.\n        (output_function_epilogue): Likewise.\n        (return_addr_rtx): Likewise for parameter `count'.\n        (output_mul_insn): Likewise for parameter `unsignedp'.\n        (hppa_builtin_saveregs): Likewise for parameter `arglist'.\n        (output_bb): Likewise for parameter `operands'.\n        (output_bvb): Likewise.\n        (function_label_operand): Likewise for parameter `mode'.\n        (plus_xor_ior_operator): Likewise.\n        (shadd_operand): Likewise.\n        (non_hard_reg_operand): Likewise.\n        (eq_neq_comparison_operator): Likewise.\n        (movb_comparison_operator): Likewise.\n        (pa_combine_instructions): Likewise for parameter `insns'.\n        * pa.h: Add prototypes for functions `output_deferred_plabels',\n        `override_options', `output_ascii', `output_function_prologue',\n        `output_function_epilogue', `print_operand',\n        `symbolic_expression_p', `reloc_needed', `compute_frame_size',\n        `hppa_address_cost', `and_mask_p', `symbolic_memory_operand',\n        `pa_adjust_cost', `pa_adjust_insn_length' and\n        `secondary_reload_class'.\n\nFrom-SVN: r20554", "tree": {"sha": "3538e3e8725c2b6e73cbca9b67fc1f4f3c0b218e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3538e3e8725c2b6e73cbca9b67fc1f4f3c0b218e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b17dd9857b006400c0342eb23dbd66d3f14dc2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b17dd9857b006400c0342eb23dbd66d3f14dc2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b17dd9857b006400c0342eb23dbd66d3f14dc2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b17dd9857b006400c0342eb23dbd66d3f14dc2a/comments", "author": null, "committer": null, "parents": [{"sha": "df16ddd55e3d8cc3f90d897fa665a32558a08d72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df16ddd55e3d8cc3f90d897fa665a32558a08d72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df16ddd55e3d8cc3f90d897fa665a32558a08d72"}], "stats": {"total": 131, "additions": 94, "deletions": 37}, "files": [{"sha": "1f1440a519d11ca2a735f58136470a99d14b3392", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b17dd9857b006400c0342eb23dbd66d3f14dc2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b17dd9857b006400c0342eb23dbd66d3f14dc2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b17dd9857b006400c0342eb23dbd66d3f14dc2a", "patch": "@@ -1,3 +1,47 @@\n+Thu Jun 18 09:20:47 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* pa.c: Include system.h and toplev.h.  Remove redundant code.\n+\t(call_operand_address): Mark parameter `mode' with ATTRIBUTE_UNUSED.\n+\t(symbolic_operand): Likewise.\n+\t(symbolic_memory_operand): Likewise.\n+\t(pic_label_operand): Likewise.\n+\t(fp_reg_operand): Likewise.\n+\t(pre_cint_operand): Likewise.\n+\t(post_cint_operand): Likewise.\n+\t(ireg_or_int5_operand): Likewise.\n+\t(int5_operand): Likewise.\n+\t(uint5_operand): Likewise.\n+\t(int11_operand): Likewise.\n+\t(uint32_operand): Likewise.\n+\t(ior_operand): Likewise.\n+\t(lhs_lshift_cint_operand): Likewise.\n+\t(pc_or_label_operand): Likewise.\n+\t(legitimize_pic_address): Likewise.\n+\t(hppa_legitimize_address): Likewise for parameter `old'.\n+\t(output_block_move): Likewise for parameter `size_is_constant'.\n+\t(output_function_prologue): Likewise for parameter `size'.\n+\t(output_function_epilogue): Likewise.\n+\t(return_addr_rtx): Likewise for parameter `count'.\n+\t(output_mul_insn): Likewise for parameter `unsignedp'.\n+\t(hppa_builtin_saveregs): Likewise for parameter `arglist'.\n+\t(output_bb): Likewise for parameter `operands'.\n+\t(output_bvb): Likewise.\n+\t(function_label_operand): Likewise for parameter `mode'.\n+\t(plus_xor_ior_operator): Likewise.\n+\t(shadd_operand): Likewise.\n+\t(non_hard_reg_operand): Likewise.\n+\t(eq_neq_comparison_operator): Likewise.\n+\t(movb_comparison_operator): Likewise.\n+\t(pa_combine_instructions): Likewise for parameter `insns'.\n+\n+\t* pa.h: Add prototypes for functions `output_deferred_plabels',\n+ \t`override_options', `output_ascii', `output_function_prologue',\n+ \t`output_function_epilogue', `print_operand',\n+ \t`symbolic_expression_p', `reloc_needed', `compute_frame_size',\n+ \t`hppa_address_cost', `and_mask_p', `symbolic_memory_operand',\n+ \t`pa_adjust_cost', `pa_adjust_insn_length' and\n+ \t`secondary_reload_class'.\n+\n Wed Jun 17 22:28:48 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* configure.in: Don't turn on collect2 unconditionally."}, {"sha": "3b5d643bee7898f278ec822f1525e49773e0f4bb", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 35, "deletions": 36, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b17dd9857b006400c0342eb23dbd66d3f14dc2a/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b17dd9857b006400c0342eb23dbd66d3f14dc2a/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=0b17dd9857b006400c0342eb23dbd66d3f14dc2a", "patch": "@@ -20,10 +20,8 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n+#include \"system.h\"\n+\n #include \"rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -39,6 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-tree.h\"\n #include \"expr.h\"\n #include \"obstack.h\"\n+#include \"toplev.h\"\n \n static void restore_unscaled_index_insn_codes\t\tPROTO((rtx));\n static void record_unscaled_index_insn_codes\t\tPROTO((rtx));\n@@ -174,7 +173,7 @@ reg_or_0_operand (op, mode)\n int\n call_operand_address (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (CONSTANT_P (op) && ! TARGET_PORTABLE_RUNTIME);\n }\n@@ -197,7 +196,7 @@ symbolic_expression_p (x)\n int\n symbolic_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   switch (GET_CODE (op))\n     {\n@@ -220,7 +219,7 @@ symbolic_operand (op, mode)\n int\n symbolic_memory_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) == SUBREG)\n     op = SUBREG_REG (op);\n@@ -340,7 +339,7 @@ reg_or_cint_move_operand (op, mode)\n int\n pic_label_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (!flag_pic)\n     return 0;\n@@ -361,7 +360,7 @@ pic_label_operand (op, mode)\n int\n fp_reg_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return reg_renumber && FP_REG_P (op);\n }\n@@ -397,7 +396,7 @@ arith11_operand (op, mode)\n int\n pre_cint_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n \t  && INTVAL (op) >= -0x2000 && INTVAL (op) < 0x10);\n@@ -408,7 +407,7 @@ pre_cint_operand (op, mode)\n int\n post_cint_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n \t  && INTVAL (op) < 0x2000 && INTVAL (op) >= -0x10);\n@@ -434,7 +433,7 @@ arith_double_operand (op, mode)\n int\n ireg_or_int5_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return ((GET_CODE (op) == CONST_INT && INT_5_BITS (op))\n \t  || (GET_CODE (op) == REG && REGNO (op) > 0 && REGNO (op) < 32));\n@@ -446,31 +445,31 @@ ireg_or_int5_operand (op, mode)\n int\n int5_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT && INT_5_BITS (op));\n }\n \n int\n uint5_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT && INT_U5_BITS (op));\n }\n \n int\n int11_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT && INT_11_BITS (op));\n }\n \n int\n uint32_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n #if HOST_BITS_PER_WIDE_INT > 32\n   /* All allowed constants will fit a CONST_INT.  */\n@@ -543,7 +542,7 @@ ior_mask_p (mask)\n int\n ior_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT && ior_mask_p (INTVAL (op)));\n }\n@@ -562,7 +561,7 @@ lhs_lshift_operand (op, mode)\n int\n lhs_lshift_cint_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   unsigned HOST_WIDE_INT x;\n   if (GET_CODE (op) != CONST_INT)\n@@ -582,7 +581,7 @@ arith32_operand (op, mode)\n int\n pc_or_label_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == PC || GET_CODE (op) == LABEL_REF);\n }\n@@ -595,7 +594,7 @@ pc_or_label_operand (op, mode)\n rtx\n legitimize_pic_address (orig, mode, reg)\n      rtx orig, reg;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   rtx pic_ref = orig;\n \n@@ -709,7 +708,7 @@ legitimize_pic_address (orig, mode, reg)\n \n rtx\n hppa_legitimize_address (x, oldx, mode)\n-     rtx x, oldx;\n+     rtx x, oldx ATTRIBUTE_UNUSED;\n      enum machine_mode mode;\n {\n   rtx orig = x;\n@@ -1928,7 +1927,7 @@ find_addr_reg (addr)\n char *\n output_block_move (operands, size_is_constant)\n      rtx *operands;\n-     int size_is_constant;\n+     int size_is_constant ATTRIBUTE_UNUSED;\n {\n   int align = INTVAL (operands[5]);\n   unsigned long n_bytes = INTVAL (operands[4]);\n@@ -2555,7 +2554,7 @@ static char hp_profile_label_name[8];\n void\n output_function_prologue (file, size)\n      FILE *file;\n-     int size;\n+     int size ATTRIBUTE_UNUSED;\n {\n   /* The function's label and associated .PROC must never be\n      separated and must be output *after* any profiling declarations\n@@ -2942,7 +2941,7 @@ hppa_expand_prologue()\n void\n output_function_epilogue (file, size)\n      FILE *file;\n-     int size;\n+     int size ATTRIBUTE_UNUSED;\n {\n   rtx insn = get_last_insn ();\n \n@@ -3171,7 +3170,7 @@ hppa_expand_epilogue ()\n \n rtx\n return_addr_rtx (count, frameaddr)\n-     int count;\n+     int count ATTRIBUTE_UNUSED;\n      rtx frameaddr;\n {\n   rtx label;\n@@ -4015,7 +4014,7 @@ import_milli (code)\n \n char *\n output_mul_insn (unsignedp, insn)\n-     int unsignedp;\n+     int unsignedp ATTRIBUTE_UNUSED;\n      rtx insn;\n {\n   import_milli (mulI);\n@@ -4344,7 +4343,7 @@ function_arg_padding (mode, type)\n \n struct rtx_def *\n hppa_builtin_saveregs (arglist)\n-     tree arglist;\n+     tree arglist ATTRIBUTE_UNUSED;\n {\n   rtx offset, dest;\n   tree fntype = TREE_TYPE (current_function_decl);\n@@ -4572,7 +4571,7 @@ output_cbranch (operands, nullify, length, negated, insn)\n \n char *\n output_bb (operands, nullify, length, negated, insn, which)\n-  rtx *operands;\n+  rtx *operands ATTRIBUTE_UNUSED;\n   int nullify, length, negated;\n   rtx insn;\n   int which;\n@@ -4710,7 +4709,7 @@ output_bb (operands, nullify, length, negated, insn, which)\n \n char *\n output_bvb (operands, nullify, length, negated, insn, which)\n-  rtx *operands;\n+  rtx *operands ATTRIBUTE_UNUSED;\n   int nullify, length, negated;\n   rtx insn;\n   int which;\n@@ -5494,7 +5493,7 @@ hppa_encode_label (sym, permanent)\n int\n function_label_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return GET_CODE (op) == SYMBOL_REF && FUNCTION_NAME_P (XSTR (op, 0));\n }\n@@ -5634,7 +5633,7 @@ fmpysuboperands (operands)\n int\n plus_xor_ior_operator (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == PLUS || GET_CODE (op) == XOR\n \t  || GET_CODE (op) == IOR);\n@@ -5657,7 +5656,7 @@ shadd_constant_p (val)\n int\n shadd_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT && shadd_constant_p (INTVAL (op)));\n }\n@@ -5711,7 +5710,7 @@ basereg_operand (op, mode)\n int\n non_hard_reg_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return ! (GET_CODE (op) == REG && REGNO (op) < FIRST_PSEUDO_REGISTER);\n }\n@@ -5739,7 +5738,7 @@ forward_branch_p (insn)\n int\n eq_neq_comparison_operator (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == EQ || GET_CODE (op) == NE);\n }\n@@ -5748,7 +5747,7 @@ eq_neq_comparison_operator (op, mode)\n int\n movb_comparison_operator (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == EQ || GET_CODE (op) == NE\n \t  || GET_CODE (op) == LT || GET_CODE (op) == GE);\n@@ -6138,7 +6137,7 @@ pa_reorg (insns)\n \n static void\n pa_combine_instructions (insns)\n-     rtx insns;\n+     rtx insns ATTRIBUTE_UNUSED;\n {\n   rtx anchor, new;\n "}, {"sha": "4a8d52b6104d6bb8ed3dc23dee54112670adc3dd", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b17dd9857b006400c0342eb23dbd66d3f14dc2a/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b17dd9857b006400c0342eb23dbd66d3f14dc2a/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=0b17dd9857b006400c0342eb23dbd66d3f14dc2a", "patch": "@@ -2474,11 +2474,25 @@ extern char *output_div_insn ();\n extern char *output_mod_insn ();\n extern char *singlemove_string ();\n extern void output_arg_descriptor ();\n+extern void output_deferred_plabels ();\n+extern void override_options ();\n+extern void output_ascii ();\n+extern void output_function_prologue ();\n+extern void output_function_epilogue ();\n extern void output_global_address ();\n+extern void print_operand ();\n extern struct rtx_def *legitimize_pic_address ();\n extern struct rtx_def *gen_cmp_fp ();\n extern void hppa_encode_label ();\n extern int arith11_operand ();\n+extern int symbolic_expression_p ();\n+extern int reloc_needed ();\n+extern int compute_frame_size ();\n+extern int hppa_address_cost ();\n+extern int and_mask_p ();\n+extern int symbolic_memory_operand ();\n+extern int pa_adjust_cost ();\n+extern int pa_adjust_insn_length ();\n extern int int11_operand ();\n extern int reg_or_cint_move_operand ();\n extern int arith5_operand ();\n@@ -2516,7 +2530,7 @@ extern void hppa_expand_epilogue ();\n extern int hppa_can_use_return_insn_p ();\n extern int is_function_label_plus_const ();\n extern int jump_in_call_delay ();\n-\n+extern enum reg_class secondary_reload_class ();\n \n /* Declare functions defined in pa.c and used in templates.  */\n "}]}