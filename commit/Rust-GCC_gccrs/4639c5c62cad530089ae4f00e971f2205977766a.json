{"sha": "4639c5c62cad530089ae4f00e971f2205977766a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYzOWM1YzYyY2FkNTMwMDg5YWU0ZjAwZTk3MWYyMjA1OTc3NzY2YQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-12-20T16:11:41Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-12-20T16:11:41Z"}, "message": "ChangeLog: Fix a typo.\n\n\t* ChangeLog: Fix a typo.\n\t* class.c: Fix comment typos.\n\t* cp-tree.h: Likewise.\n\nFrom-SVN: r60368", "tree": {"sha": "84cdfa516b4ba2a31c09ecb6a0cdd1a114d8c993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84cdfa516b4ba2a31c09ecb6a0cdd1a114d8c993"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4639c5c62cad530089ae4f00e971f2205977766a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4639c5c62cad530089ae4f00e971f2205977766a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4639c5c62cad530089ae4f00e971f2205977766a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4639c5c62cad530089ae4f00e971f2205977766a/comments", "author": null, "committer": null, "parents": [{"sha": "7ec52186074bfcab496fc319b9521b11fceb766f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec52186074bfcab496fc319b9521b11fceb766f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ec52186074bfcab496fc319b9521b11fceb766f"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "3cd2c30ab335f06fcffdc253dc2b67fbc2d45cc4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4639c5c62cad530089ae4f00e971f2205977766a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4639c5c62cad530089ae4f00e971f2205977766a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4639c5c62cad530089ae4f00e971f2205977766a", "patch": "@@ -1,3 +1,9 @@\n+2002-12-20  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* ChangeLog: Fix a typo.\n+\t* class.c: Fix comment typos.\n+\t* cp-tree.h: Likewise.\n+\n 2002-12-18  Jason Merrill  <jason@redhat.com>\n \n \tHandle anonymous unions at the tree level.\n@@ -4809,7 +4815,7 @@ Tue Oct 23 14:00:20 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* parse.y (asm_operand): Allow named operands.\n \t* semantics.c (finish_asm_stmt): Tweek for changed location\n-\tof the operand constrant.\n+\tof the operand constraint.\n \n 2001-10-09  Jason Merrill  <jason_merrill@redhat.com>\n "}, {"sha": "bf75d9de4bc6fe68b98ec6a4b7e4f5066ac53fd5", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4639c5c62cad530089ae4f00e971f2205977766a/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4639c5c62cad530089ae4f00e971f2205977766a/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=4639c5c62cad530089ae4f00e971f2205977766a", "patch": "@@ -97,7 +97,7 @@ typedef struct vtbl_init_data_s\n /* The type of a function passed to walk_subobject_offsets.  */\n typedef int (*subobject_offset_fn) PARAMS ((tree, tree, splay_tree));\n \n-/* The stack itself.  This is an dynamically resized array.  The\n+/* The stack itself.  This is a dynamically resized array.  The\n    number of elements allocated is CURRENT_CLASS_STACK_SIZE.  */\n static int current_class_stack_size;\n static class_stack_node_t current_class_stack;\n@@ -2343,7 +2343,7 @@ get_vcall_index (tree fn, tree type)\n }\n \n /* Update an entry in the vtable for BINFO, which is in the hierarchy\n-   dominated by T.  FN has been overriden in BINFO; VIRTUALS points to the\n+   dominated by T.  FN has been overridden in BINFO; VIRTUALS points to the\n    corresponding position in the BINFO_VIRTUALS list.  */\n \n static void\n@@ -4508,7 +4508,7 @@ create_vtable_ptr (t, virtuals_p)\n \t type-based alias analysis code would decide that assignments\n \t to the base class vtable pointer can't alias assignments to\n \t the derived class vtable pointer, since they have different\n-\t types.  Thus, in an derived class destructor, where the base\n+\t types.  Thus, in a derived class destructor, where the base\n \t class constructor was inlined, we could generate bad code for\n \t setting up the vtable pointer.  \n "}, {"sha": "12504e5a1dd5179af0d7096023d26a7160a531cd", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4639c5c62cad530089ae4f00e971f2205977766a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4639c5c62cad530089ae4f00e971f2205977766a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4639c5c62cad530089ae4f00e971f2205977766a", "patch": "@@ -127,7 +127,7 @@ struct diagnostic_context;\n \n      The BV_DELTA of each node gives the amount by which to adjust the\n      `this' pointer when calling the function.  If the method is an\n-     overriden version of a base class method, then it is assumed\n+     overridden version of a base class method, then it is assumed\n      that, prior to adjustment, the this pointer points to an object\n      of the base class.\n \n@@ -149,7 +149,7 @@ struct diagnostic_context;\n      function, it is eventually set to an INTEGER_CST indicating the\n      index in the vtable at which this function can be found.  When\n      a virtual function is declared, but before it is known what\n-     function is overriden, this field is the error_mark_node.\n+     function is overridden, this field is the error_mark_node.\n \n      Temporarily, it may be set to a TREE_LIST whose TREE_VALUE is\n      the virtual function this one overrides, and whose TREE_CHAIN is"}]}