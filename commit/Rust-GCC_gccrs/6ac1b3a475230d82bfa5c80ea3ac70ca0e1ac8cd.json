{"sha": "6ac1b3a475230d82bfa5c80ea3ac70ca0e1ac8cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFjMWIzYTQ3NTIzMGQ4MmJmYTVjODBlYTNhYzcwY2EwZTFhYzhjZA==", "commit": {"author": {"name": "Laurynas Biveinis", "email": "laurynas.biveinis@gmail.com", "date": "2007-09-05T15:50:41Z"}, "committer": {"name": "Laurynas Biveinis", "email": "lauras@gcc.gnu.org", "date": "2007-09-05T15:50:41Z"}, "message": "Makefile.in (stmt.o): Add alloc-pool.h dependency.\n\n2007-09-05  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n\n\t* Makefile.in (stmt.o): Add alloc-pool.h dependency.\n\t* stmt.c: Include alloc-pool.h.\n\t(struct case_node): Remove GTY marker.\n\t(add_case_node): New parameter case_node_pool.  Use it for\n\tallocation of r.\n\t(expand_case): New allocation pool case_node_pool.  Initialize it,\n\tpass to add_case_node and free it.\n\nFrom-SVN: r128139", "tree": {"sha": "337c3e012e679db345f78cd2066a7fc4cd399987", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/337c3e012e679db345f78cd2066a7fc4cd399987"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ac1b3a475230d82bfa5c80ea3ac70ca0e1ac8cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac1b3a475230d82bfa5c80ea3ac70ca0e1ac8cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ac1b3a475230d82bfa5c80ea3ac70ca0e1ac8cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac1b3a475230d82bfa5c80ea3ac70ca0e1ac8cd/comments", "author": {"login": "laurynas-biveinis", "id": 58894, "node_id": "MDQ6VXNlcjU4ODk0", "avatar_url": "https://avatars.githubusercontent.com/u/58894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laurynas-biveinis", "html_url": "https://github.com/laurynas-biveinis", "followers_url": "https://api.github.com/users/laurynas-biveinis/followers", "following_url": "https://api.github.com/users/laurynas-biveinis/following{/other_user}", "gists_url": "https://api.github.com/users/laurynas-biveinis/gists{/gist_id}", "starred_url": "https://api.github.com/users/laurynas-biveinis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laurynas-biveinis/subscriptions", "organizations_url": "https://api.github.com/users/laurynas-biveinis/orgs", "repos_url": "https://api.github.com/users/laurynas-biveinis/repos", "events_url": "https://api.github.com/users/laurynas-biveinis/events{/privacy}", "received_events_url": "https://api.github.com/users/laurynas-biveinis/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5783dbc4129f645a81a19256659e0d60a789e8d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5783dbc4129f645a81a19256659e0d60a789e8d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5783dbc4129f645a81a19256659e0d60a789e8d4"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "389edbfc14678e994a81b37707581f1f8d157444", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac1b3a475230d82bfa5c80ea3ac70ca0e1ac8cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac1b3a475230d82bfa5c80ea3ac70ca0e1ac8cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ac1b3a475230d82bfa5c80ea3ac70ca0e1ac8cd", "patch": "@@ -1,3 +1,13 @@\n+2007-09-05  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n+\n+\t* Makefile.in (stmt.o): Add alloc-pool.h dependency.\n+\t* stmt.c: Include alloc-pool.h.\n+\t(struct case_node): Remove GTY marker.\n+\t(add_case_node): New parameter case_node_pool.  Use it for\n+\tallocation of r.\n+\t(expand_case): New allocation pool case_node_pool.  Initialize it,\n+\tpass to add_case_node and free it.\n+\n 2007-09-05  Sandra Loosemore  <sandra@codesourcery.com>\n \t    David Ung  <davidu@mips.com>\n             Nigel Stephens <nigel@mips.com>"}, {"sha": "56c79144b8158012cb83c582ac0987e1147a2bb4", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac1b3a475230d82bfa5c80ea3ac70ca0e1ac8cd/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac1b3a475230d82bfa5c80ea3ac70ca0e1ac8cd/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6ac1b3a475230d82bfa5c80ea3ac70ca0e1ac8cd", "patch": "@@ -2366,7 +2366,7 @@ stmt.o : stmt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(FUNCTION_H) insn-config.h hard-reg-set.h $(EXPR_H) \\\n    libfuncs.h except.h $(RECOG_H) toplev.h output.h $(GGC_H) $(TM_P_H) \\\n    langhooks.h $(PREDICT_H) $(OPTABS_H) $(TARGET_H) $(MACHMODE_H) \\\n-   $(REGS_H)\n+   $(REGS_H) alloc-pool.h\n except.o : except.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) except.h $(FUNCTION_H) $(EXPR_H) libfuncs.h \\\n    langhooks.h insn-config.h hard-reg-set.h $(BASIC_BLOCK_H) output.h \\"}, {"sha": "69cb5e0b8603c44a306eb1a81c5d17dcbaa32007", "filename": "gcc/stmt.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac1b3a475230d82bfa5c80ea3ac70ca0e1ac8cd/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac1b3a475230d82bfa5c80ea3ac70ca0e1ac8cd/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=6ac1b3a475230d82bfa5c80ea3ac70ca0e1ac8cd", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"optabs.h\"\n #include \"target.h\"\n #include \"regs.h\"\n+#include \"alloc-pool.h\"\n \f\n /* Functions and data structures for expanding case statements.  */\n \n@@ -79,7 +80,7 @@ along with GCC; see the file COPYING3.  If not see\n    For very small, suitable switch statements, we can generate a series\n    of simple bit test and branches instead.  */\n \n-struct case_node GTY(())\n+struct case_node\n {\n   struct case_node\t*left;\t/* Left son in binary tree */\n   struct case_node\t*right;\t/* Right son in binary tree; also node chain */\n@@ -121,7 +122,7 @@ static int node_has_high_bound (case_node_ptr, tree);\n static int node_is_bounded (case_node_ptr, tree);\n static void emit_case_nodes (rtx, case_node_ptr, rtx, tree);\n static struct case_node *add_case_node (struct case_node *, tree,\n-\t\t\t\t\ttree, tree, tree);\n+                                        tree, tree, tree, alloc_pool);\n \n \f\n /* Return the rtx-label that corresponds to a LABEL_DECL,\n@@ -2067,7 +2068,7 @@ expand_anon_union_decl (tree decl, tree cleanup ATTRIBUTE_UNUSED,\n \n static struct case_node *\n add_case_node (struct case_node *head, tree type, tree low, tree high,\n-\t       tree label)\n+               tree label, alloc_pool case_node_pool)\n {\n   tree min_value, max_value;\n   struct case_node *r;\n@@ -2119,7 +2120,7 @@ add_case_node (struct case_node *head, tree type, tree low, tree high,\n \n \n   /* Add this label to the chain.  Make sure to drop overflow flags.  */\n-  r = ggc_alloc (sizeof (struct case_node));\n+  r = (struct case_node *) pool_alloc (case_node_pool);\n   r->low = build_int_cst_wide (TREE_TYPE (low), TREE_INT_CST_LOW (low),\n \t\t\t       TREE_INT_CST_HIGH (low));\n   r->high = build_int_cst_wide (TREE_TYPE (high), TREE_INT_CST_LOW (high),\n@@ -2322,6 +2323,10 @@ expand_case (tree exp)\n   /* Label to jump to if no case matches.  */\n   tree default_label_decl;\n \n+  alloc_pool case_node_pool = create_alloc_pool (\"struct case_node pool\",\n+                                                 sizeof (struct case_node),\n+                                                 100);\n+\n   /* The switch body is lowered in gimplify.c, we should never have\n      switches with a non-NULL SWITCH_BODY here.  */\n   gcc_assert (!SWITCH_BODY (exp));\n@@ -2359,7 +2364,7 @@ expand_case (tree exp)\n \t    continue;\n \n \t  case_list = add_case_node (case_list, index_type, low, high,\n-\t\t\t\t     CASE_LABEL (elt));\n+                                     CASE_LABEL (elt), case_node_pool);\n \t}\n \n \n@@ -2410,6 +2415,7 @@ expand_case (tree exp)\n       if (count == 0)\n \t{\n \t  emit_jump (default_label);\n+          free_alloc_pool (case_node_pool);\n \t  return;\n \t}\n \n@@ -2580,6 +2586,7 @@ expand_case (tree exp)\n     }\n \n   free_temp_slots ();\n+  free_alloc_pool (case_node_pool);\n }\n \n /* Generate code to jump to LABEL if OP0 and OP1 are equal in mode MODE.  */"}]}