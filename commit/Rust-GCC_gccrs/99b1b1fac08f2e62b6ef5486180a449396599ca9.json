{"sha": "99b1b1fac08f2e62b6ef5486180a449396599ca9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTliMWIxZmFjMDhmMmU2MmI2ZWY1NDg2MTgwYTQ0OTM5NjU5OWNhOQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-01-16T09:38:21Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-01-16T09:38:21Z"}, "message": "Extend locations where to seach for Fortran pre-include.\n\n2019-01-16  Martin Liska  <mliska@suse.cz>\n\n\t* Makefile.in: Set TOOL_INCLUDE_DIR and NATIVE_SYSTEM_HEADER_DIR\n\tfor GCC driver.\n\t* config/gnu-user.h (TARGET_F951_OPTIONS): Add 'finclude%s/' as\n\ta new argument.\n\t* gcc.c (add_sysrooted_hdrs_prefix): New function.\n\t(path_prefix_reset): Move up in the source file.\n\t(find_fortran_preinclude_file): Make complex search for the\n\tfortran header files.\n\nFrom-SVN: r267967", "tree": {"sha": "27e1eeb13ffb1c747f0fe076af34c37e544f6cce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27e1eeb13ffb1c747f0fe076af34c37e544f6cce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99b1b1fac08f2e62b6ef5486180a449396599ca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b1b1fac08f2e62b6ef5486180a449396599ca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99b1b1fac08f2e62b6ef5486180a449396599ca9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b1b1fac08f2e62b6ef5486180a449396599ca9/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0684a81665555e219edafa6f46edfed7b9340b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0684a81665555e219edafa6f46edfed7b9340b4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0684a81665555e219edafa6f46edfed7b9340b4e"}], "stats": {"total": 120, "additions": 98, "deletions": 22}, "files": [{"sha": "17f2195eff334475eec6f9aa9f2fb7224fc7f1ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b1b1fac08f2e62b6ef5486180a449396599ca9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b1b1fac08f2e62b6ef5486180a449396599ca9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99b1b1fac08f2e62b6ef5486180a449396599ca9", "patch": "@@ -1,3 +1,14 @@\n+2019-01-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* Makefile.in: Set TOOL_INCLUDE_DIR and NATIVE_SYSTEM_HEADER_DIR\n+\tfor GCC driver.\n+\t* config/gnu-user.h (TARGET_F951_OPTIONS): Add 'finclude%s/' as\n+\ta new argument.\n+\t* gcc.c (add_sysrooted_hdrs_prefix): New function.\n+\t(path_prefix_reset): Move up in the source file.\n+\t(find_fortran_preinclude_file): Make complex search for the\n+\tfortran header files.\n+\n 2019-01-15  Nikhil Benesch  <nikhil.benesch@gmail.com>\n \n         * godump.c (go_output_typedef): When outputting a typedef, refer"}, {"sha": "508c674cbdc59299eca3465e2cad240157ce1cae", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b1b1fac08f2e62b6ef5486180a449396599ca9/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b1b1fac08f2e62b6ef5486180a449396599ca9/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=99b1b1fac08f2e62b6ef5486180a449396599ca9", "patch": "@@ -2172,7 +2172,9 @@ DRIVER_DEFINES = \\\n   @TARGET_SYSTEM_ROOT_DEFINE@ \\\n   $(VALGRIND_DRIVER_DEFINES) \\\n   $(if $(SHLIB),$(if $(filter yes,@enable_shared@),-DENABLE_SHARED_LIBGCC)) \\\n-  -DCONFIGURE_SPECS=\"\\\"@CONFIGURE_SPECS@\\\"\"\n+  -DCONFIGURE_SPECS=\"\\\"@CONFIGURE_SPECS@\\\"\" \\\n+  -DTOOL_INCLUDE_DIR=\\\"$(gcc_tooldir)/include\\\" \\\n+  -DNATIVE_SYSTEM_HEADER_DIR=\\\"$(NATIVE_SYSTEM_HEADER_DIR)\\\"\n \n CFLAGS-gcc.o += $(DRIVER_DEFINES) -DBASEVER=$(BASEVER_s)\n gcc.o: $(BASEVER)"}, {"sha": "055a4f0afeca4a6339fd156db1bf1daf1aae0994", "filename": "gcc/config/gnu-user.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b1b1fac08f2e62b6ef5486180a449396599ca9/gcc%2Fconfig%2Fgnu-user.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b1b1fac08f2e62b6ef5486180a449396599ca9/gcc%2Fconfig%2Fgnu-user.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgnu-user.h?ref=99b1b1fac08f2e62b6ef5486180a449396599ca9", "patch": "@@ -151,4 +151,4 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #undef TARGET_F951_OPTIONS\n #define TARGET_F951_OPTIONS \"%{!nostdinc:\\\n-  %:fortran-preinclude-file(-fpre-include= math-vector-fortran.h)}\"\n+  %:fortran-preinclude-file(-fpre-include= math-vector-fortran.h finclude%s/)}\""}, {"sha": "797ed36616f6e605179b74463a2912d504a20924", "filename": "gcc/gcc.c", "status": "modified", "additions": 83, "deletions": 20, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b1b1fac08f2e62b6ef5486180a449396599ca9/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b1b1fac08f2e62b6ef5486180a449396599ca9/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=99b1b1fac08f2e62b6ef5486180a449396599ca9", "patch": "@@ -2976,6 +2976,44 @@ add_sysrooted_prefix (struct path_prefix *pprefix, const char *prefix,\n   add_prefix (pprefix, prefix, component, priority,\n \t      require_machine_suffix, os_multilib);\n }\n+\n+/* Same as add_prefix, but prepending target_sysroot_hdrs_suffix to prefix.  */\n+\n+static void\n+add_sysrooted_hdrs_prefix (struct path_prefix *pprefix, const char *prefix,\n+\t\t\t   const char *component,\n+\t\t\t   /* enum prefix_priority */ int priority,\n+\t\t\t   int require_machine_suffix, int os_multilib)\n+{\n+  if (!IS_ABSOLUTE_PATH (prefix))\n+    fatal_error (input_location, \"system path %qs is not absolute\", prefix);\n+\n+  if (target_system_root)\n+    {\n+      char *sysroot_no_trailing_dir_separator = xstrdup (target_system_root);\n+      size_t sysroot_len = strlen (target_system_root);\n+\n+      if (sysroot_len > 0\n+\t  && target_system_root[sysroot_len - 1] == DIR_SEPARATOR)\n+\tsysroot_no_trailing_dir_separator[sysroot_len - 1] = '\\0';\n+\n+      if (target_sysroot_hdrs_suffix)\n+\tprefix = concat (sysroot_no_trailing_dir_separator,\n+\t\t\t target_sysroot_hdrs_suffix, prefix, NULL);\n+      else\n+\tprefix = concat (sysroot_no_trailing_dir_separator, prefix, NULL);\n+\n+      free (sysroot_no_trailing_dir_separator);\n+\n+      /* We have to override this because GCC's notion of sysroot\n+\t moves along with GCC.  */\n+      component = \"GCC\";\n+    }\n+\n+  add_prefix (pprefix, prefix, component, priority,\n+\t      require_machine_suffix, os_multilib);\n+}\n+\n \f\n /* Execute the command specified by the arguments on the current line of spec.\n    When using pipes, this includes several piped-together commands\n@@ -9896,20 +9934,61 @@ debug_level_greater_than_spec_func (int argc, const char **argv)\n   return NULL;\n }\n \n-/* The function takes 2 arguments: OPTION name and file name.\n+static void\n+path_prefix_reset (path_prefix *prefix)\n+{\n+  struct prefix_list *iter, *next;\n+  iter = prefix->plist;\n+  while (iter)\n+    {\n+      next = iter->next;\n+      free (const_cast <char *> (iter->prefix));\n+      XDELETE (iter);\n+      iter = next;\n+    }\n+  prefix->plist = 0;\n+  prefix->max_len = 0;\n+}\n+\n+/* The function takes 3 arguments: OPTION name, file name and location\n+   where we search for Fortran modules.\n    When the FILE is found by find_file, return OPTION=path_to_file.  */\n \n static const char *\n find_fortran_preinclude_file (int argc, const char **argv)\n {\n-  if (argc != 2)\n+  char *result = NULL;\n+  if (argc != 3)\n     return NULL;\n \n+  struct path_prefix prefixes = { 0, 0, \"preinclude\" };\n+\n+  /* Search first for 'finclude' folder location for a header file\n+     installed by the compiler (similar to omp_lib.h).  */\n+  add_prefix (&prefixes, argv[2], NULL, 0, 0, false);\n+#ifdef TOOL_INCLUDE_DIR\n+  /* Then search: <prefix>/<target>/<include>/finclude */\n+  add_prefix (&prefixes, TOOL_INCLUDE_DIR \"/finclude/\",\n+\t      NULL, 0, 0, false);\n+#endif\n+#ifdef NATIVE_SYSTEM_HEADER_DIR\n+  /* Then search: <sysroot>/usr/include/finclude/<multilib> */\n+  add_sysrooted_hdrs_prefix (&prefixes, NATIVE_SYSTEM_HEADER_DIR \"/finclude/\",\n+\t\t\t     NULL, 0, 0, false);\n+#endif\n+\n   const char *path = find_a_file (&include_prefixes, argv[1], R_OK, true);\n   if (path != NULL)\n-    return concat (argv[0], path, NULL);\n+    result = concat (argv[0], path, NULL);\n+  else\n+    {\n+      path = find_a_file (&prefixes, argv[1], R_OK, true);\n+      if (path != NULL)\n+\tresult = concat (argv[0], path, NULL);\n+    }\n \n-  return NULL;\n+  path_prefix_reset (&prefixes);\n+  return result;\n }\n \n \n@@ -9961,22 +10040,6 @@ convert_white_space (char *orig)\n     return orig;\n }\n \n-static void\n-path_prefix_reset (path_prefix *prefix)\n-{\n-  struct prefix_list *iter, *next;\n-  iter = prefix->plist;\n-  while (iter)\n-    {\n-      next = iter->next;\n-      free (const_cast <char *> (iter->prefix));\n-      XDELETE (iter);\n-      iter = next;\n-    }\n-  prefix->plist = 0;\n-  prefix->max_len = 0;\n-}\n-\n /* Restore all state within gcc.c to the initial state, so that the driver\n    code can be safely re-run in-process.\n "}]}