{"sha": "82c6faa8bafe35d63fd906899140eae9d98b9b55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJjNmZhYThiYWZlMzVkNjNmZDkwNjg5OTE0MGVhZTlkOThiOWI1NQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-12-18T17:32:12Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-12-18T17:32:12Z"}, "message": "mn10300.c (notice_update_cc): Enable this code.\n\n        * mn10300/mn10300.c (notice_update_cc): Enable this code.\n        * mn10300/mn10300.h (CC_OVERFLOW_UNUSABLE): Define.\n        * mn10300/mn10300.md (tstsi): Use \"set_zn_c0\" instead of \"set\"\n        for cc status.\n        (addsi3 pattern): Break \"inc\" into two different alternatives\n        since \"inc dn\" sets cc0, but \"inc an\" does not.\n        (multiply and divide patterns): Fix cc status.\n        (bCC, inverted bCC): Restore any comparison which needs the\n        overflow bits when CC_OVERFLOW_UNUSABLE is set.\n        (zero and sign extensions): Fix cc status.\n        (movm_store): Likewise.\n\nFrom-SVN: r13337", "tree": {"sha": "15d4aa5b0ba9e2fd69d13f8d005ae4644a2a4164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15d4aa5b0ba9e2fd69d13f8d005ae4644a2a4164"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82c6faa8bafe35d63fd906899140eae9d98b9b55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82c6faa8bafe35d63fd906899140eae9d98b9b55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82c6faa8bafe35d63fd906899140eae9d98b9b55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82c6faa8bafe35d63fd906899140eae9d98b9b55/comments", "author": null, "committer": null, "parents": [{"sha": "3e5fc51d66d0771deaf1d44053d60bca8146606a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e5fc51d66d0771deaf1d44053d60bca8146606a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e5fc51d66d0771deaf1d44053d60bca8146606a"}], "stats": {"total": 66, "additions": 46, "deletions": 20}, "files": [{"sha": "673ddb2b7d3ea96f9dedb9f1cb989031a1f0db88", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c6faa8bafe35d63fd906899140eae9d98b9b55/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c6faa8bafe35d63fd906899140eae9d98b9b55/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=82c6faa8bafe35d63fd906899140eae9d98b9b55", "patch": "@@ -265,7 +265,6 @@ notice_update_cc (body, insn)\n      rtx body;\n      rtx insn;\n {\n-#if 0\n   switch (get_attr_cc (insn))\n     {\n     case CC_NONE:\n@@ -289,6 +288,12 @@ notice_update_cc (body, insn)\n       break;\n \n     case CC_SET:\n+      /* The insn sets all the condition codes, except v is bogus.  */\n+      CC_STATUS_INIT;\n+      cc_status.flags |= CC_OVERFLOW_UNUSABLE;\n+      cc_status.value1 = recog_operand[0];\n+      break;\n+\n     case CC_COMPARE:\n       /* The insn is a compare instruction.  */\n       CC_STATUS_INIT;\n@@ -299,9 +304,10 @@ notice_update_cc (body, insn)\n       /* Insn doesn't leave CC in a usable state.  */\n       CC_STATUS_INIT;\n       break;\n+\n+    default:\n+      abort ();\n     }\n-#endif\n-  CC_STATUS_INIT;\n }\n \n /* Return true if OP is a valid call operand.  */"}, {"sha": "64f0a629b3239e278120414b9159561f7509b6e4", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c6faa8bafe35d63fd906899140eae9d98b9b55/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c6faa8bafe35d63fd906899140eae9d98b9b55/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=82c6faa8bafe35d63fd906899140eae9d98b9b55", "patch": "@@ -643,6 +643,7 @@ enum reg_class {\n    after execution of an instruction whose pattern is EXP.\n    Do not alter them if the instruction would not alter the cc's.  */\n \n+#define CC_OVERFLOW_UNUSABLE 0x200\n #define NOTICE_UPDATE_CC(EXP, INSN) notice_update_cc(EXP, INSN)\n \n /* Compute the cost of computing a constant rtl expression RTX"}, {"sha": "6ef5d30923d7df8c2de41eab8d1831a86fe66b4f", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c6faa8bafe35d63fd906899140eae9d98b9b55/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c6faa8bafe35d63fd906899140eae9d98b9b55/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=82c6faa8bafe35d63fd906899140eae9d98b9b55", "patch": "@@ -30,7 +30,7 @@\n ;; none_0hit - insn does not affect cc but it does modify operand 0\n ;;\tThis attribute is used to keep track of when operand 0 changes.\n ;; \tSee the description of NOTICE_UPDATE_CC for more info.\n-;; set - insn sets flags z,n.  v,c are set to 0.\n+;; set - insn sets flags z,n.  v is unusable c is set to 0.\n ;;\t(c may not really be set to 0 but that's ok, we don't need it anyway).\n ;; set_zn_c0 - insn sets z,n to usable values.  v is unknown.  c may or may not\n ;;\tbe known (if it isn't that's ok, we don't need it anyway).\n@@ -178,7 +178,7 @@\n   [(set (cc0) (match_operand:SI 0 \"register_operand\" \"da\"))]\n   \"\"\n   \"cmp 0,%0\"\n-  [(set_attr \"cc\" \"set\")])\n+  [(set_attr \"cc\" \"set_zn_c0\")])\n \n (define_insn \"cmpsi\"\n   [(set (cc0)\n@@ -213,16 +213,17 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=da,a,da,x\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0\")\n-\t\t (match_operand:SI 2 \"nonmemory_operand\" \"J,L,dai,i\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,a,a,da,x\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0\")\n+\t\t (match_operand:SI 2 \"nonmemory_operand\" \"J,J,L,dai,i\")))]\n   \"\"\n   \"@\n   inc %0\n+  inc %0\n   inc4 %0\n   add %2,%0\n   add %2,%0\"\n-  [(set_attr \"cc\" \"none_0hit,none_0hit,set,none_0hit\")])\n+  [(set_attr \"cc\" \"set,none_0hit,none_0hit,set,none_0hit\")])\n \n ;; ----------------------------------------------------------------------\n ;; SUBTRACT INSTRUCTIONS\n@@ -261,15 +262,15 @@\n \t\t (match_operand:SI 2 \"register_operand\" \"d\")))]\n   \"\"\n   \"mul %2,%0\"\n-  [(set_attr \"cc\" \"set\")])\n+  [(set_attr \"cc\" \"set_zn_c0\")])\n \n (define_insn \"divsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(div:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t (match_operand:SI 2 \"register_operand\" \"d\")))]\n   \"\"\n   \"ext %0\\;div %2,%0\"\n-  [(set_attr \"cc\" \"set\")])\n+  [(set_attr \"cc\" \"set_zn_c0\")])\n \n (define_expand \"udivsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -289,14 +290,14 @@\n \t\t (match_operand:SI 2 \"register_operand\" \"d\")))]\n   \"\"\n   \"divu %2,%0\"\n-  [(set_attr \"cc\" \"set\")])\n+  [(set_attr \"cc\" \"set_zn_c0\")])\n \n (define_insn \"clear_mdr\"\n   [(unspec_volatile [(const_int 2)] 0)\n    (use (match_operand:SI 0 \"register_operand\" \"d\"))]\n   \"\"\n   \"mov %0,mdr\"\n-  [(set_attr \"cc\" \"clobber\")])\n+  [(set_attr \"cc\" \"none\")])\n \f\n ;; ----------------------------------------------------------------------\n ;; AND INSTRUCTIONS\n@@ -460,7 +461,16 @@\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"b%B1 0f\\\\n\\\\tjmp %0\\\\n0:\"\n+  \"*\n+{\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0\n+      && (GET_CODE (operands[1]) == GT\n+\t  || GET_CODE (operands[1]) == GE\n+\t  || GET_CODE (operands[1]) == LE\n+\t  || GET_CODE (operands[1]) == LT))\n+    return 0;\n+  return \\\"b%B1 0f\\\\n\\\\tjmp %0\\\\n0:\\\";\n+}\"\n  [(set_attr \"cc\" \"none\")])\n \n (define_insn \"\"\n@@ -470,7 +480,16 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n-  \"b%b1 0f\\\\n\\\\tjmp %0\\\\n0:\"\n+  \"*\n+{\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0\n+      && (GET_CODE (operands[1]) == GT\n+\t  || GET_CODE (operands[1]) == GE\n+\t  || GET_CODE (operands[1]) == LE\n+\t  || GET_CODE (operands[1]) == LT))\n+    return 0;\n+  return \\\"b%b1 0f\\\\n\\\\tjmp %0\\\\n0:\\\";\n+}\"\n  [(set_attr \"cc\" \"none\")])\n \n ;; Unconditional and other jump instructions.\n@@ -570,15 +589,15 @@\n \t (match_operand:HI 1 \"register_operand\" \"0\")))]\n   \"\"\n   \"exthu %0\"\n-  [(set_attr \"cc\" \"set_zn_c0\")])\n+  [(set_attr \"cc\" \"none_0hit\")])\n \n (define_insn \"zero_extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(zero_extend:SI\n \t (match_operand:QI 1 \"register_operand\" \"0\")))]\n   \"\"\n   \"extbu %0\"\n-  [(set_attr \"cc\" \"set_zn_c0\")])\n+  [(set_attr \"cc\" \"none_0hit\")])\n \n ;;- sign extension instructions\n \n@@ -588,15 +607,15 @@\n \t (match_operand:HI 1 \"register_operand\" \"0\")))]\n   \"\"\n   \"exth %0\"\n-  [(set_attr \"cc\" \"set_zn_c0\")])\n+  [(set_attr \"cc\" \"none_0hit\")])\n \n (define_insn \"extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(sign_extend:SI\n \t (match_operand:QI 1 \"register_operand\" \"0\")))]\n   \"\"\n   \"extb %0\"\n-  [(set_attr \"cc\" \"set_zn_c0\")])\n+  [(set_attr \"cc\" \"none_0hit\")])\n \n \f\n ;; ----------------------------------------------------------------------\n@@ -669,4 +688,4 @@\n   [(const_int 1)]\n   \"\"\n   \"movm [d2,d3,a2,a3],(sp)\"\n-  [(set_attr \"cc\" \"none\")])\n+  [(set_attr \"cc\" \"clobber\")])"}]}