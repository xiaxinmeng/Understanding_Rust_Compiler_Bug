{"sha": "75b6bb627c3dd2ae3b8b338903f94610666a9111", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzViNmJiNjI3YzNkZDJhZTNiOGIzMzg5MDNmOTQ2MTA2NjZhOTExMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-02-27T00:07:03Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-02-27T00:07:03Z"}, "message": "predict.def: Set outcomes according to more recent results.\n\n\n\t* predict.def: Set outcomes according to more recent results.\n\t(PRED_LOOP_CONDITION, PRED_LOOP_PRECONDITIONING, PRED_LOOP_HEADER):\n\tRemove dead predictors.\n\t* predict.c (return_prediction): Fix pasto.\n\nFrom-SVN: r122347", "tree": {"sha": "6cbbedd1764b99506933860619b93c22f1d16648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cbbedd1764b99506933860619b93c22f1d16648"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75b6bb627c3dd2ae3b8b338903f94610666a9111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75b6bb627c3dd2ae3b8b338903f94610666a9111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75b6bb627c3dd2ae3b8b338903f94610666a9111", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75b6bb627c3dd2ae3b8b338903f94610666a9111/comments", "author": null, "committer": null, "parents": [{"sha": "48982394521bb1a742a11aa5c17a25a9acd96639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48982394521bb1a742a11aa5c17a25a9acd96639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48982394521bb1a742a11aa5c17a25a9acd96639"}], "stats": {"total": 42, "additions": 19, "deletions": 23}, "files": [{"sha": "061145dbc1a3d46fbd039db8408b98cb90a9e57b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b6bb627c3dd2ae3b8b338903f94610666a9111/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b6bb627c3dd2ae3b8b338903f94610666a9111/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75b6bb627c3dd2ae3b8b338903f94610666a9111", "patch": "@@ -1,3 +1,10 @@\n+2007-02-26  Jan Hubicka  <jh@suse.cz>\n+\n+\t* predict.def: Set outcomes according to more recent results.\n+\t(PRED_LOOP_CONDITION, PRED_LOOP_PRECONDITIONING, PRED_LOOP_HEADER):\n+\tRemove dead predictors.\n+\t* predict.c (return_prediction): Fix pasto.\n+\n 2007-02-27  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* loop-iv.c (simplify_using_initial_values): Fix oversight in previous"}, {"sha": "f390ebedb4d7bcf16a9e283535fb7b0da9635f49", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b6bb627c3dd2ae3b8b338903f94610666a9111/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b6bb627c3dd2ae3b8b338903f94610666a9111/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=75b6bb627c3dd2ae3b8b338903f94610666a9111", "patch": "@@ -1152,7 +1152,7 @@ return_prediction (tree val, enum prediction *prediction)\n \t  && (!integer_zerop (val) && !integer_onep (val)))\n \t{\n \t  *prediction = TAKEN;\n-\t  return PRED_NEGATIVE_RETURN;\n+\t  return PRED_CONST_RETURN;\n \t}\n     }\n   return PRED_NO_PREDICTION;"}, {"sha": "da27031f7c833ecad8d28267558bd86ce37e4a76", "filename": "gcc/predict.def", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b6bb627c3dd2ae3b8b338903f94610666a9111/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b6bb627c3dd2ae3b8b338903f94610666a9111/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=75b6bb627c3dd2ae3b8b338903f94610666a9111", "patch": "@@ -74,41 +74,30 @@ DEF_PREDICTOR (PRED_NORETURN, \"noreturn call\", HITRATE (99),\n \t       PRED_FLAG_FIRST_MATCH)\n \n /* Loopback edge is taken.  */\n-DEF_PREDICTOR (PRED_LOOP_BRANCH, \"loop branch\", HITRATE (89),\n+DEF_PREDICTOR (PRED_LOOP_BRANCH, \"loop branch\", HITRATE (86),\n \t       PRED_FLAG_FIRST_MATCH)\n \n /* Edge causing loop to terminate is probably not taken.  */\n-DEF_PREDICTOR (PRED_LOOP_EXIT, \"loop exit\", HITRATE (90),\n+DEF_PREDICTOR (PRED_LOOP_EXIT, \"loop exit\", HITRATE (91),\n \t       PRED_FLAG_FIRST_MATCH)\n \n-/* Condition emitted by preconditiong code to ensure that variable\n-   setting number of iterations is greater than initial value of iterator.  */\n-DEF_PREDICTOR (PRED_LOOP_CONDITION, \"loop condition\", PROB_VERY_LIKELY, 0)\n-\n-/* Preconditioning makes linear list of branches.  */\n-DEF_PREDICTOR (PRED_LOOP_PRECONDITIONING, \"loop preconditioning\", PROB_VERY_LIKELY, 0)\n-\n-/* Copied condition for the first iteration of loop is probably true.  */\n-DEF_PREDICTOR (PRED_LOOP_HEADER, \"loop header\", HITRATE (64), 0)\n-\n /* Pointers are usually not NULL.  */\n-DEF_PREDICTOR (PRED_POINTER, \"pointer\", HITRATE (81), 0)\n-DEF_PREDICTOR (PRED_TREE_POINTER, \"pointer (on trees)\", HITRATE (81), 0)\n+DEF_PREDICTOR (PRED_POINTER, \"pointer\", HITRATE (85), 0)\n+DEF_PREDICTOR (PRED_TREE_POINTER, \"pointer (on trees)\", HITRATE (85), 0)\n \n /* NE is probable, EQ not etc...  */\n DEF_PREDICTOR (PRED_OPCODE_POSITIVE, \"opcode values positive\", HITRATE (79), 0)\n DEF_PREDICTOR (PRED_OPCODE_NONEQUAL, \"opcode values nonequal\", HITRATE (71), 0)\n DEF_PREDICTOR (PRED_FPOPCODE, \"fp_opcode\", HITRATE (90), 0)\n-DEF_PREDICTOR (PRED_TREE_OPCODE_POSITIVE, \"opcode values positive (on trees)\", HITRATE (79), 0)\n-DEF_PREDICTOR (PRED_TREE_OPCODE_NONEQUAL, \"opcode values nonequal (on trees)\", HITRATE (71), 0)\n+DEF_PREDICTOR (PRED_TREE_OPCODE_POSITIVE, \"opcode values positive (on trees)\", HITRATE (70), 0)\n+DEF_PREDICTOR (PRED_TREE_OPCODE_NONEQUAL, \"opcode values nonequal (on trees)\", HITRATE (69), 0)\n DEF_PREDICTOR (PRED_TREE_FPOPCODE, \"fp_opcode (on trees)\", HITRATE (90), 0)\n \n /* Branch guarding call is probably taken.  */\n-DEF_PREDICTOR (PRED_CALL, \"call\", HITRATE (70), 0)\n+DEF_PREDICTOR (PRED_CALL, \"call\", HITRATE (69), 0)\n \n /* Branch causing function to terminate is probably not taken.  */\n-DEF_PREDICTOR (PRED_EARLY_RETURN, \"early return\", HITRATE (67), 0)\n-DEF_PREDICTOR (PRED_TREE_EARLY_RETURN, \"early return (on trees)\", HITRATE (67), 0)\n+DEF_PREDICTOR (PRED_TREE_EARLY_RETURN, \"early return (on trees)\", HITRATE (45), 0)\n \n /* Branch containing goto is probably not taken.  */\n DEF_PREDICTOR (PRED_GOTO, \"goto\", HITRATE (70), 0)\n@@ -117,10 +106,10 @@ DEF_PREDICTOR (PRED_GOTO, \"goto\", HITRATE (70), 0)\n DEF_PREDICTOR (PRED_CONST_RETURN, \"const return\", HITRATE (95), 0)\n \n /* Branch ending with return negative constant is probably not taken.  */\n-DEF_PREDICTOR (PRED_NEGATIVE_RETURN, \"negative return\", HITRATE (96), 0)\n+DEF_PREDICTOR (PRED_NEGATIVE_RETURN, \"negative return\", HITRATE (77), 0)\n \n /* Branch ending with return; is probably not taken */\n-DEF_PREDICTOR (PRED_NULL_RETURN, \"null return\", HITRATE (90), 0)\n+DEF_PREDICTOR (PRED_NULL_RETURN, \"null return\", HITRATE (96), 0)\n \n /* Branches to a mudflap bounds check are extremely unlikely.  */\n-DEF_PREDICTOR (PRED_MUDFLAP, \"mudflap check\", HITRATE (99), 0)\n+DEF_PREDICTOR (PRED_MUDFLAP, \"mudflap check\", PROB_VERY_LIKELY, 0)"}]}