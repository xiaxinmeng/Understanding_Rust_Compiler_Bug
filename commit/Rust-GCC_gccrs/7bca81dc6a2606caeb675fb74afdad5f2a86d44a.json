{"sha": "7bca81dc6a2606caeb675fb74afdad5f2a86d44a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JjYTgxZGM2YTI2MDZjYWViNjc1ZmI3NGFmZGFkNWYyYTg2ZDQ0YQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-04-05T19:23:17Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-04-05T19:23:17Z"}, "message": "bb-reorder.c (fix_crossing_unconditional_branches): Remove a set-but-unused variable.\n\n\n\t* bb-reorder.c (fix_crossing_unconditional_branches): Remove a\n\tset-but-unused variable.\n\n\t* cgraph.c (cgraph_release_function_body): Clear cfun->cfg to make\n\tbasic blocks of released function bodies garbage-collectable.\n\n\t* ree.c (find_and_remove_re): Do not call df_finish_pass here.\n\t(struct rtl_opt_pass): Add TODO_df_finish.\n\n\t* rtl.def (DEFINE_SUBST, DEFINE_SUBST_ATTR): Add documentation.\n\nFrom-SVN: r197533", "tree": {"sha": "cc55e3c8d03e775e0ae127a1d61cb22dd0973f7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc55e3c8d03e775e0ae127a1d61cb22dd0973f7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bca81dc6a2606caeb675fb74afdad5f2a86d44a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bca81dc6a2606caeb675fb74afdad5f2a86d44a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bca81dc6a2606caeb675fb74afdad5f2a86d44a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bca81dc6a2606caeb675fb74afdad5f2a86d44a/comments", "author": null, "committer": null, "parents": [{"sha": "4542a38a21fea54d28d2d2b34ef8e12ebb7ca415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4542a38a21fea54d28d2d2b34ef8e12ebb7ca415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4542a38a21fea54d28d2d2b34ef8e12ebb7ca415"}], "stats": {"total": 63, "additions": 55, "deletions": 8}, "files": [{"sha": "7e955d4c9e60f6ab2b3511817758565ec4d1cec7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bca81dc6a2606caeb675fb74afdad5f2a86d44a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bca81dc6a2606caeb675fb74afdad5f2a86d44a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bca81dc6a2606caeb675fb74afdad5f2a86d44a", "patch": "@@ -1,3 +1,16 @@\n+2013-04-05  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* bb-reorder.c (fix_crossing_unconditional_branches): Remove a\n+\tset-but-unused variable.\n+\n+\t* cgraph.c (cgraph_release_function_body): Clear cfun->cfg to make\n+\tbasic blocks of released function bodies garbage-collectable.\n+\n+\t* ree.c (find_and_remove_re): Do not call df_finish_pass here.\n+\t(struct rtl_opt_pass): Add TODO_df_finish.\n+\n+\t* rtl.def (DEFINE_SUBST, DEFINE_SUBST_ATTR): Add documentation.\n+\n 2013-04-05  Greta Yorsh  <Greta.Yorsh@arm.com>\n \n \t* config/arm/constraints.md (q): New constraint."}, {"sha": "7605e17e7ef3224d57e68c0ca347b4f26597281a", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bca81dc6a2606caeb675fb74afdad5f2a86d44a/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bca81dc6a2606caeb675fb74afdad5f2a86d44a/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=7bca81dc6a2606caeb675fb74afdad5f2a86d44a", "patch": "@@ -1998,14 +1998,12 @@ fix_crossing_unconditional_branches (void)\n       if (JUMP_P (last_insn)\n \t  && (succ->flags & EDGE_CROSSING))\n \t{\n-\t  rtx label2;\n-\n \t  gcc_assert (!any_condjump_p (last_insn));\n \n \t  /* Make sure the jump is not already an indirect or table jump.  */\n \n \t  if (!computed_jump_p (last_insn)\n-\t      && !tablejump_p (last_insn, &label2, NULL))\n+\t      && !tablejump_p (last_insn, NULL, NULL))\n \t    {\n \t      /* We have found a \"crossing\" unconditional branch.  Now\n \t\t we must convert it to an indirect jump.  First create"}, {"sha": "693d4db90141c9c47d1e392ccc715964421494e7", "filename": "gcc/cgraph.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bca81dc6a2606caeb675fb74afdad5f2a86d44a/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bca81dc6a2606caeb675fb74afdad5f2a86d44a/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=7bca81dc6a2606caeb675fb74afdad5f2a86d44a", "patch": "@@ -1260,7 +1260,10 @@ cgraph_node_remove_callers (struct cgraph_node *node)\n   node->callers = NULL;\n }\n \n-/* Release memory used to represent body of function NODE.  */\n+/* Release memory used to represent body of function NODE.\n+   Use this only for functions that are released before being translated to\n+   target code (i.e. RTL).  Functions that are compiled to RTL and beyond\n+   are free'd in final.c via free_after_compilation().  */\n \n void\n cgraph_release_function_body (struct cgraph_node *node)\n@@ -1285,6 +1288,7 @@ cgraph_release_function_body (struct cgraph_node *node)\n \t  gcc_assert (dom_computed[0] == DOM_NONE);\n \t  gcc_assert (dom_computed[1] == DOM_NONE);\n \t  clear_edges ();\n+\t  cfun->cfg = NULL;\n \t}\n       if (cfun->value_histograms)\n \tfree_histograms ();"}, {"sha": "c60921239a7ca42cb1faccfc7dbe6627bb032fa6", "filename": "gcc/ree.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bca81dc6a2606caeb675fb74afdad5f2a86d44a/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bca81dc6a2606caeb675fb74afdad5f2a86d44a/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=7bca81dc6a2606caeb675fb74afdad5f2a86d44a", "patch": "@@ -919,8 +919,6 @@ find_and_remove_re (void)\n   if (dump_file && num_re_opportunities > 0)\n     fprintf (dump_file, \"Elimination opportunities = %d realized = %d\\n\",\n \t     num_re_opportunities, num_realized);\n-\n-  df_finish_pass (false);\n }\n \n /* Find and remove redundant extensions.  */\n@@ -958,7 +956,8 @@ struct rtl_opt_pass pass_ree =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_ggc_collect |\n-  TODO_verify_rtl_sharing,              /* todo_flags_finish */\n+  TODO_df_finish\n+    | TODO_ggc_collect\n+    | TODO_verify_rtl_sharing,          /* todo_flags_finish */\n  }\n };"}, {"sha": "5da3dd3ec007c0df0d83a85d00fa7e1373572c20", "filename": "gcc/rtl.def", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bca81dc6a2606caeb675fb74afdad5f2a86d44a/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bca81dc6a2606caeb675fb74afdad5f2a86d44a/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=7bca81dc6a2606caeb675fb74afdad5f2a86d44a", "patch": "@@ -1290,8 +1290,41 @@ DEF_RTL_EXPR (ATTR_FLAG, \"attr_flag\", \"s\", RTX_EXTRA)\n    true, the second operand will be used as the value of the conditional.  */\n DEF_RTL_EXPR(COND, \"cond\", \"Ee\", RTX_EXTRA)\n \n+/* Definition of a pattern substitution meta operation on a DEFINE_EXPAND\n+   or a DEFINE_INSN.  Automatically generates new instances of DEFINE_INSNs\n+   that match the substitution pattern.\n+\n+   Operand:\n+   0: The name of the substitition template.\n+   1: Input template to match to see if a substitution is applicable.\n+   2: A C expression giving an additional condition for the generated\n+      new define_expand or define_insn.\n+   3: Output tempalate to generate via substitution.\n+\n+   Within a DEFINE_SUBST template, the meaning of some RTL expressions is\n+   different from their usual interpretation: a MATCH_OPERAND matches any\n+   expression tree with matching machine mode or with VOIDmode.  Likewise,\n+   MATCH_OP_DUP and MATCH_DUP match more liberally in a DEFINE_SUBST than\n+   in other RTL expressions.  MATCH_OPERATOR matches all common operators\n+   but also UNSPEC, UNSPEC_VOLATILE, and MATCH_OPERATORS from the input\n+   DEFINE_EXPAND or DEFINE_INSN.  */\n DEF_RTL_EXPR(DEFINE_SUBST, \"define_subst\", \"sEsE\", RTX_EXTRA)\n+\n+/* Substitution attribute to apply a DEFINE_SUBST to a pattern.\n+\n+   Operand:\n+   0: The name of the subst-attribute.\n+   1: The name of the DEFINE_SUBST to be applied for this attribute.\n+   2: String to substitute for the subst-attribute name in the pattern\n+      name, for the case that the DEFINE_SUBST is not applied (i.e. the\n+      unmodified version of the pattern).\n+   3: String to substitute for the subst-attribute name in the pattern\n+      name, for the case that the DEFINE_SUBST is applied to the patten.\n+      \n+   The use of DEFINE_SUBST and DEFINE_SUBST_ATTR is explained in the\n+   GCC internals manual, under \"RTL Templates Transformations\".  */\n DEF_RTL_EXPR(DEFINE_SUBST_ATTR, \"define_subst_attr\", \"ssss\", RTX_EXTRA)\n+\n #endif /* GENERATOR_FILE */\n \n /*"}]}