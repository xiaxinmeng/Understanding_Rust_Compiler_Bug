{"sha": "d5316f684c43291075518fd1a52e3a77db3ba6a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUzMTZmNjg0YzQzMjkxMDc1NTE4ZmQxYTUyZTNhNzdkYjNiYTZhNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T07:04:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T07:04:25Z"}, "message": "Update comments.\n\nFrom-SVN: r134073", "tree": {"sha": "3ec192b801a5c733ebd358616086bbc99884ac4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ec192b801a5c733ebd358616086bbc99884ac4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5316f684c43291075518fd1a52e3a77db3ba6a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5316f684c43291075518fd1a52e3a77db3ba6a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5316f684c43291075518fd1a52e3a77db3ba6a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5316f684c43291075518fd1a52e3a77db3ba6a7/comments", "author": null, "committer": null, "parents": [{"sha": "1aa9da5b1cd6d70bcb3d900e6d9ca470bf759e3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa9da5b1cd6d70bcb3d900e6d9ca470bf759e3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aa9da5b1cd6d70bcb3d900e6d9ca470bf759e3d"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "0d70c1d382deff0d8d19f060b272fff2544047d7", "filename": "gcc/ada/itypes.ads", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5316f684c43291075518fd1a52e3a77db3ba6a7/gcc%2Fada%2Fitypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5316f684c43291075518fd1a52e3a77db3ba6a7/gcc%2Fada%2Fitypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fitypes.ads?ref=d5316f684c43291075518fd1a52e3a77db3ba6a7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,7 +38,8 @@ package Itypes is\n    --  Implicit types (Itypes) are types and subtypes created by the semantic\n    --  phase or the expander to reflect the underlying semantics. These could\n    --  be generated by building trees for corresponding declarations and then\n-   --  analyzing these trees, but there are three reasons for not doing this:\n+   --  analyzing these trees, but there are three reasons for not doing this\n+   --  in some cases:\n \n    --    1. The declarations would require more tree nodes\n \n@@ -81,6 +82,25 @@ package Itypes is\n    --  and for the array subtype. The associated node of each index subtype\n    --  is the corresponding range expression.\n \n+   --  Notes on the use of the Parent field of an Itype\n+\n+   --    In some cases, we do create a declaration node for an itype, and in\n+   --    such cases, the Parent field of the Itype points to this declaration\n+   --    in the normal manner. This case can be detected by checking for a\n+   --    non-empty Parent field referencing a declaration whose Defining_Entity\n+   --    is the Itype in question.\n+\n+   --    In some other cases, where we don't generate such a declaration, as\n+   --    described above, the Itype is attached to the tree implicitly by being\n+   --    referenced elsewhere, e.g. as the Etype of some object. In this case\n+   --    the Parent field may be Empty.\n+\n+   --    In other cases where we don't generate a declaration for the Itype,\n+   --    the Itype may be attached to an arbitrary node in the tree, using\n+   --    the Parent field. This Parent field may even reference a declaration\n+   --    for a related different entity (hence the description of the tests\n+   --    needed for the case where a declaration for the Itype is created).\n+\n    ------------------\n    -- Create_Itype --\n    ------------------\n@@ -115,8 +135,10 @@ package Itypes is\n    --  The Scope_Id parameter specifies the scope of the created type, and\n    --  is normally the Current_Scope as shown, but can be set otherwise.\n    --\n-   --  If Ekind is in Access_Subprogram_Type_Kind, Can_Use_Internal_Rep is set\n-   --  True, unless Always_Compatible_Rep_On_Target is True.\n+   --  The size/align fields are initialized to unknown (Uint_0).\n+   --\n+   --  If Ekind is in Access_Subprogram_Kind, Can_Use_Internal_Rep is set True,\n+   --  unless Always_Compatible_Rep_On_Target is True.\n \n    ---------------------------------\n    -- Create_Null_Excluding_Itype --"}]}