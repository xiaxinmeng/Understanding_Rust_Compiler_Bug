{"sha": "c3f146d98df60106138c4ca2f0775e7c713a57f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNmMTQ2ZDk4ZGY2MDEwNjEzOGM0Y2EyZjA3NzVlN2M3MTNhNTdmMw==", "commit": {"author": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2021-08-25T11:51:49Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2021-08-25T12:18:01Z"}, "message": "module: Allow external module path to come from #[path] attribute", "tree": {"sha": "a7a465f826eaec21a23f52d927464af68113c8bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7a465f826eaec21a23f52d927464af68113c8bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3f146d98df60106138c4ca2f0775e7c713a57f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3f146d98df60106138c4ca2f0775e7c713a57f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3f146d98df60106138c4ca2f0775e7c713a57f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3f146d98df60106138c4ca2f0775e7c713a57f3/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b509a775f91da0678875ac381a655fd2ba1fd48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b509a775f91da0678875ac381a655fd2ba1fd48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b509a775f91da0678875ac381a655fd2ba1fd48"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "c18d4c4fd74c4c81575e262bb05e64770fff360f", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f146d98df60106138c4ca2f0775e7c713a57f3/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f146d98df60106138c4ca2f0775e7c713a57f3/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=c3f146d98df60106138c4ca2f0775e7c713a57f3", "patch": "@@ -4061,17 +4061,59 @@ file_exists (const std::string path)\n   return access (path.c_str (), F_OK) != -1;\n }\n \n-// FIXME: This function should also check if the module has a `path` outer\n-// attribute and fetch the path from here in that case, i.e:\n-// ```\n-// #[path=\"<dir>/<subdir>/<file>.rs\"]\n-// mod <mod_name>;\n-// ```\n+static std::string\n+filename_from_path_attribute (std::vector<Attribute> &outer_attrs)\n+{\n+  Attribute path_attr = Attribute::create_empty ();\n+  for (auto attr : outer_attrs)\n+    {\n+      if (attr.get_path ().as_string () == \"path\")\n+\t{\n+\t  path_attr = attr;\n+\t  break;\n+\t}\n+    }\n+\n+  // We didn't find a path attribute. This is not an error, there simply isn't\n+  // one present\n+  if (path_attr.is_empty ())\n+    return \"\";\n+\n+  // Here, we found a path attribute, but it has no associated string. This is\n+  // invalid\n+  if (!path_attr.has_attr_input ())\n+    {\n+      rust_error_at (\n+\tpath_attr.get_locus (),\n+\t// Split the format string so that -Wformat-diag does not complain...\n+\t\"path attributes must contain a filename: '%s'\", \"#[path = \\\"file\\\"]\");\n+      return \"\";\n+    }\n+\n+  auto path = path_attr.get_attr_input ().as_string ();\n+\n+  // On windows, the path might mix '/' and '\\' separators. Replace the\n+  // UNIX-like separators by MSDOS separators to make sure the path will resolve\n+  // properly.\n+  //\n+  // Source: rustc compiler\n+  // (https://github.com/rust-lang/rust/blob/9863bf51a52b8e61bcad312f81b5193d53099f9f/compiler/rustc_expand/src/module.rs#L174)\n+#if defined(HAVE_DOS_BASED_FILE_SYSTEM)\n+  path.replace ('/', '\\\\');\n+#endif /* HAVE_DOS_BASED_FILE_SYSTEM */\n+\n+  return path_attr.get_attr_input ().as_string ();\n+}\n+\n std::string\n Module::get_filename ()\n {\n   rust_assert (kind == Module::ModuleKind::UNLOADED);\n \n+  auto path_string = filename_from_path_attribute (get_outer_attrs ());\n+  if (!path_string.empty ())\n+    return path_string;\n+\n   // This corresponds to the path of the file 'including' the module. So the\n   // file that contains the 'mod <file>;' directive\n   std::string including_fname (outer_filename);"}, {"sha": "1efcc868d1cdb363cb07805fab3834e1b4cdd02d", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f146d98df60106138c4ca2f0775e7c713a57f3/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f146d98df60106138c4ca2f0775e7c713a57f3/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=c3f146d98df60106138c4ca2f0775e7c713a57f3", "patch": "@@ -457,6 +457,8 @@ struct Attribute\n \n   Location get_locus () const { return locus; }\n \n+  AttrInput &get_attr_input () const { return *attr_input; }\n+\n   /* e.g.:\n       #![crate_type = \"lib\"]\n       #[test]"}]}