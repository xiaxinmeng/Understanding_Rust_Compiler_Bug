{"sha": "739526a19deaeac19c2429cc7567052834d3098e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM5NTI2YTE5ZGVhZWFjMTljMjQyOWNjNzU2NzA1MjgzNGQzMDk4ZQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-13T08:40:20Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-13T15:02:18Z"}, "message": "Do not save hash slots across calls to hash_table::get_or_insert.\n\nThere's a read of a freed block while accessing the default_slot in\ncalc_switch_ranges.\n\n      default_slot->intersect (def_range);\n\nIt seems the default_slot got swiped from under us, and the valgrind\ndump indicates the free came from the get_or_insert in the same\nfunction:\n\n      irange *&slot = m_edge_table->get_or_insert (e, &existed);\n\nSo it looks like the get_or_insert is actually freeing the value of\nthe previously allocated default_slot.  Looking down the chain\nfrom get_or_insert, we see it calls hash_table<>::expand, which\nactually does a free while doing a resize of sorts:\n\n  if (!m_ggc)\n    Allocator <value_type> ::data_free (oentries);\n  else\n    ggc_free (oentries);\n\nThis patch avoids keeping a pointer to the default_slot across multiple\ncalls to get_or_insert in the loop.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/97379\n\t* gimple-range-edge.cc (outgoing_range::calc_switch_ranges): Do\n\tnot save hash slot across calls to hash_table<>::get_or_insert.", "tree": {"sha": "58dac36fb9f3a16da4574f9566d44d06a33c7836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58dac36fb9f3a16da4574f9566d44d06a33c7836"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/739526a19deaeac19c2429cc7567052834d3098e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/739526a19deaeac19c2429cc7567052834d3098e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/739526a19deaeac19c2429cc7567052834d3098e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/739526a19deaeac19c2429cc7567052834d3098e/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8311899eddf91d0d3e3ad931c6bbf2d5a1b445ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8311899eddf91d0d3e3ad931c6bbf2d5a1b445ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8311899eddf91d0d3e3ad931c6bbf2d5a1b445ca"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "b42dcd6d31868d576b5038b68bdd37bcf2b76546", "filename": "gcc/gimple-range-edge.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/739526a19deaeac19c2429cc7567052834d3098e/gcc%2Fgimple-range-edge.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/739526a19deaeac19c2429cc7567052834d3098e/gcc%2Fgimple-range-edge.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-edge.cc?ref=739526a19deaeac19c2429cc7567052834d3098e", "patch": "@@ -106,19 +106,14 @@ outgoing_range::calc_switch_ranges (gswitch *sw)\n   unsigned x, lim;\n   lim = gimple_switch_num_labels (sw);\n   tree type = TREE_TYPE (gimple_switch_index (sw));\n-  \n   edge default_edge = gimple_switch_default_edge (cfun, sw);\n-  irange *&default_slot = m_edge_table->get_or_insert (default_edge, &existed);\n \n-  // This should be the first call into this switch.  For the default\n-  // range case, start with varying and intersect each other case from\n-  // it.\n-\n-  gcc_checking_assert (!existed);\n-\n-  // Allocate an int_range_max for default case.\n-  default_slot = m_range_allocator.allocate (255);\n-  default_slot->set_varying (type);\n+  // This should be the first call into this switch.\n+  //\n+  // Allocate an int_range_max for the default range case, start with\n+  // varying and intersect each other case from it.\n+  irange *default_range = m_range_allocator.allocate (255);\n+  default_range->set_varying (type);\n \n   for (x = 1; x < lim; x++)\n     {\n@@ -137,7 +132,7 @@ outgoing_range::calc_switch_ranges (gswitch *sw)\n       int_range_max def_range (low, high);\n       range_cast (def_range, type);\n       def_range.invert ();\n-      default_slot->intersect (def_range);\n+      default_range->intersect (def_range);\n \n       // Create/union this case with anything on else on the edge.\n       int_range_max case_range (low, high);\n@@ -157,6 +152,11 @@ outgoing_range::calc_switch_ranges (gswitch *sw)\n       // intrusive than allocating max ranges for each case.\n       slot = m_range_allocator.allocate (case_range);\n     }\n+\n+  irange *&slot = m_edge_table->get_or_insert (default_edge, &existed);\n+  // This should be the first call into this switch.\n+  gcc_checking_assert (!existed);\n+  slot = default_range;\n }\n \n "}]}