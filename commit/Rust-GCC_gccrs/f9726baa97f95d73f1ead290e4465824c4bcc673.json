{"sha": "f9726baa97f95d73f1ead290e4465824c4bcc673", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk3MjZiYWE5N2Y5NWQ3M2YxZWFkMjkwZTQ0NjU4MjRjNGJjYzY3Mw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-04-26T09:25:28Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-04-26T09:25:28Z"}, "message": "Add prefix to test verification in guality.h\n\n2017-04-26  Martin Liska  <mliska@suse.cz>\n\n\t* gcc.dg/guality/guality.h: Add prefix to test verification.\n\nFrom-SVN: r247275", "tree": {"sha": "489ce67ffc599a05d55f852167742d302b4c19bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/489ce67ffc599a05d55f852167742d302b4c19bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9726baa97f95d73f1ead290e4465824c4bcc673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9726baa97f95d73f1ead290e4465824c4bcc673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9726baa97f95d73f1ead290e4465824c4bcc673", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9726baa97f95d73f1ead290e4465824c4bcc673/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f06c15a2e89cc398e6c55c3374386af6981c526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f06c15a2e89cc398e6c55c3374386af6981c526", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f06c15a2e89cc398e6c55c3374386af6981c526"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "696eb272d426656699d329dc6e4c423f40fe6fc8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9726baa97f95d73f1ead290e4465824c4bcc673/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9726baa97f95d73f1ead290e4465824c4bcc673/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9726baa97f95d73f1ead290e4465824c4bcc673", "patch": "@@ -1,3 +1,7 @@\n+2017-04-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/guality/guality.h: Add prefix to test verification.\n+\n 2017-04-25  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/dg.exp (find-cxx-tests): Remove TCL 8.5-ism."}, {"sha": "94722510ff09669762d79bc93ee31dcc0fae34dd", "filename": "gcc/testsuite/gcc.dg/guality/guality.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9726baa97f95d73f1ead290e4465824c4bcc673/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fguality.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9726baa97f95d73f1ead290e4465824c4bcc673/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fguality.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fguality.h?ref=f9726baa97f95d73f1ead290e4465824c4bcc673", "patch": "@@ -55,6 +55,8 @@ along with GCC; see the file COPYING3.  If not see\n    so that __FILE__ and __LINE__ will be usable to identify them.\n */\n \n+#define GUALITY_TEST \"guality/guality.h\"\n+\n /* This is the type we use to pass values to guality_check.  */\n \n typedef intmax_t gualchk_t;\n@@ -274,7 +276,7 @@ continue\\n\\\n \n   i = guality_count[INCORRECT];\n \n-  fprintf (stderr, \"%s: %i PASS, %i FAIL, %i UNRESOLVED\\n\",\n+  fprintf (stderr, \"%s: \" GUALITY_TEST  \": %i PASS, %i FAIL, %i UNRESOLVED\\n\",\n \t   i ? \"FAIL\" : \"PASS\",\n \t   guality_count[PASS], guality_count[INCORRECT],\n \t   guality_count[INCOMPLETE]);\n@@ -361,13 +363,13 @@ continue\\n\\\n     switch (result)\n       {\n       case PASS:\n-\tfprintf (stderr, \"PASS: %s is %lli\\n\", name, value);\n+\tfprintf (stderr, \"PASS: \" GUALITY_TEST \": %s is %lli\\n\", name, value);\n \tbreak;\n       case INCORRECT:\n-\tfprintf (stderr, \"FAIL: %s is %lli, not %lli\\n\", name, xvalue, value);\n+\tfprintf (stderr, \"FAIL: \" GUALITY_TEST \": %s is %lli, not %lli\\n\", name, xvalue, value);\n \tbreak;\n       case INCOMPLETE:\n-\tfprintf (stderr, \"%s: %s is %s, expected %lli\\n\",\n+\tfprintf (stderr, \"%s: \" GUALITY_TEST \": %s is %s, expected %lli\\n\",\n \t\t unknown_ok ? \"UNRESOLVED\" : \"FAIL\", name,\n \t\t unavailable < 0 ? \"not computable\" : \"optimized away\", value);\n \tresult = unknown_ok ? INCOMPLETE : INCORRECT;"}]}