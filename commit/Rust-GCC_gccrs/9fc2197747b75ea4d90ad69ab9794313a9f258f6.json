{"sha": "9fc2197747b75ea4d90ad69ab9794313a9f258f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZjMjE5Nzc0N2I3NWVhNGQ5MGFkNjlhYjk3OTQzMTNhOWYyNThmNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-01-11T20:53:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-01-11T20:53:07Z"}, "message": "re PR c++/69131 (default constructor of union incorrectly deleted)\n\n\tPR c++/69131\n\t* method.c (walk_field_subobs): Add dtor_from_ctor parm.\n\t(process_subob_fn): Likewise.  Don't consider triviality if true.\n\t(synthesize_method_walk): Pass it.\n\nFrom-SVN: r232243", "tree": {"sha": "761057e8cb9666290507e39f8b94d3fda855b559", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/761057e8cb9666290507e39f8b94d3fda855b559"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fc2197747b75ea4d90ad69ab9794313a9f258f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc2197747b75ea4d90ad69ab9794313a9f258f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc2197747b75ea4d90ad69ab9794313a9f258f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc2197747b75ea4d90ad69ab9794313a9f258f6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23552a4d50980a96bd4f48f93b3ae31b5015af34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23552a4d50980a96bd4f48f93b3ae31b5015af34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23552a4d50980a96bd4f48f93b3ae31b5015af34"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "ba7cf58552cf341f8e7d81f8d6e952aab8843c23", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc2197747b75ea4d90ad69ab9794313a9f258f6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc2197747b75ea4d90ad69ab9794313a9f258f6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9fc2197747b75ea4d90ad69ab9794313a9f258f6", "patch": "@@ -1,3 +1,10 @@\n+2016-01-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/69131\n+\t* method.c (walk_field_subobs): Add dtor_from_ctor parm.\n+\t(process_subob_fn): Likewise.  Don't consider triviality if true.\n+\t(synthesize_method_walk): Pass it.\n+\n 2016-01-11  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/68795"}, {"sha": "e358ebd1c8c0408b14ae3b0f8bfcb7952be472b5", "filename": "gcc/cp/method.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc2197747b75ea4d90ad69ab9794313a9f258f6/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc2197747b75ea4d90ad69ab9794313a9f258f6/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=9fc2197747b75ea4d90ad69ab9794313a9f258f6", "patch": "@@ -1097,7 +1097,7 @@ is_trivially_xible (enum tree_code code, tree to, tree from)\n static void\n process_subob_fn (tree fn, tree *spec_p, bool *trivial_p,\n \t\t  bool *deleted_p, bool *constexpr_p,\n-\t\t  bool diag, tree arg)\n+\t\t  bool diag, tree arg, bool dtor_from_ctor = false)\n {\n   if (!fn || fn == error_mark_node)\n     goto bad;\n@@ -1109,7 +1109,7 @@ process_subob_fn (tree fn, tree *spec_p, bool *trivial_p,\n       *spec_p = merge_exception_specifiers (*spec_p, raises);\n     }\n \n-  if (!trivial_fn_p (fn))\n+  if (!trivial_fn_p (fn) && !dtor_from_ctor)\n     {\n       if (trivial_p)\n \t*trivial_p = false;\n@@ -1142,14 +1142,17 @@ process_subob_fn (tree fn, tree *spec_p, bool *trivial_p,\n }\n \n /* Subroutine of synthesized_method_walk to allow recursion into anonymous\n-   aggregates.  */\n+   aggregates.  If DTOR_FROM_CTOR is true, we're walking subobject destructors\n+   called from a synthesized constructor, in which case we don't consider\n+   the triviality of the subobject destructor.  */\n \n static void\n walk_field_subobs (tree fields, tree fnname, special_function_kind sfk,\n \t\t   int quals, bool copy_arg_p, bool move_p,\n \t\t   bool assign_p, tree *spec_p, bool *trivial_p,\n \t\t   bool *deleted_p, bool *constexpr_p,\n-\t\t   bool diag, int flags, tsubst_flags_t complain)\n+\t\t   bool diag, int flags, tsubst_flags_t complain,\n+\t\t   bool dtor_from_ctor)\n {\n   tree field;\n   for (field = fields; field; field = DECL_CHAIN (field))\n@@ -1268,7 +1271,7 @@ walk_field_subobs (tree fields, tree fnname, special_function_kind sfk,\n \t  walk_field_subobs (TYPE_FIELDS (mem_type), fnname, sfk, quals,\n \t\t\t     copy_arg_p, move_p, assign_p, spec_p, trivial_p,\n \t\t\t     deleted_p, constexpr_p,\n-\t\t\t     diag, flags, complain);\n+\t\t\t     diag, flags, complain, dtor_from_ctor);\n \t  continue;\n \t}\n \n@@ -1285,7 +1288,7 @@ walk_field_subobs (tree fields, tree fnname, special_function_kind sfk,\n       rval = locate_fn_flags (mem_type, fnname, argtype, flags, complain);\n \n       process_subob_fn (rval, spec_p, trivial_p, deleted_p,\n-\t\t\tconstexpr_p, diag, field);\n+\t\t\tconstexpr_p, diag, field, dtor_from_ctor);\n     }\n }\n \n@@ -1468,7 +1471,7 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n \t     dtors would be a double-fault).  */\n \t  process_subob_fn (rval, NULL, NULL,\n \t\t\t    deleted_p, NULL, false,\n-\t\t\t    basetype);\n+\t\t\t    basetype, /*dtor_from_ctor*/true);\n \t}\n \n       if (check_vdtor && type_has_virtual_destructor (basetype))\n@@ -1515,7 +1518,7 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n \t\t\t\t      NULL_TREE, flags, complain);\n \t      process_subob_fn (rval, NULL, NULL,\n \t\t\t\tdeleted_p, NULL, false,\n-\t\t\t\tbasetype);\n+\t\t\t\tbasetype, /*dtor_from_ctor*/true);\n \t    }\n \t}\n     }\n@@ -1524,13 +1527,13 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n   walk_field_subobs (TYPE_FIELDS (ctype), fnname, sfk, quals,\n \t\t     copy_arg_p, move_p, assign_p, spec_p, trivial_p,\n \t\t     deleted_p, constexpr_p,\n-\t\t     diag, flags, complain);\n+\t\t     diag, flags, complain, /*dtor_from_ctor*/false);\n   if (ctor_p)\n     walk_field_subobs (TYPE_FIELDS (ctype), complete_dtor_identifier,\n \t\t       sfk_destructor, TYPE_UNQUALIFIED, false,\n \t\t       false, false, NULL, NULL,\n \t\t       deleted_p, NULL,\n-\t\t       false, flags, complain);\n+\t\t       false, flags, complain, /*dtor_from_ctor*/true);\n \n   pop_scope (scope);\n "}, {"sha": "c42d2177ab0dc67a8d3d297f5b7cb16ace901cc3", "filename": "gcc/testsuite/g++.dg/cpp0x/union7.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc2197747b75ea4d90ad69ab9794313a9f258f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Funion7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc2197747b75ea4d90ad69ab9794313a9f258f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Funion7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Funion7.C?ref=9fc2197747b75ea4d90ad69ab9794313a9f258f6", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/69131\n+// { dg-do compile { target c++11 } }\n+\n+struct X\n+{\n+  ~X() {}\n+};\n+\n+union U\n+{\n+  X x;\n+  ~U() {}\n+};\n+\n+U u;"}]}