{"sha": "eab880cf621b82e4f38aed74b58d2bd76f89c46a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFiODgwY2Y2MjFiODJlNGYzOGFlZDc0YjU4ZDJiZDc2Zjg5YzQ2YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-14T19:36:33Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-14T19:36:33Z"}, "message": "sse.md (round<mode>2_sfix): New expander.\n\n\t* config/i386/sse.md (round<mode>2_sfix): New expander.\n\t(round<mode>2_vec_pack_sfix): Ditto.\n\t(<sse4_1>_round<ssemodesuffix>_sfix<avxsizesuffix>): Ditto.\n\t(<sse4_1>_round<ssemodesuffix>_vec_pack_sfix<avxsizesuffix>): Ditto.\n\t* config/i386/builtin-types.def (V4SI_FTYPE_V4SF_ROUND,\n\tV8SI_FTYPE_V8SF_ROUND, V4SI_FTYPE_V2DF_V2DF_ROUND,\n\tV8SI_FTYPE_V4DF_V4DF_ROUND): New builtin types.\n\t* config/i386/i386.c (ix86_builtins): Add\n\tIX86_BUILTIN_{FLOORPD,CEILPD,ROUNDPD_AZ}_VEC_PACK_SFIX{,256} and\n\tIX86_BUILTIN_{FLOORPS,CEILPS,ROUNDPS_AZ}_SFIX{,256} defines.\n\t(bdesc_args): Add __builtin_ia32_{floorpd,ceilpd}_vec_pack_sfix{,256},\n\t__builtin_ia32_roundpd_az_vec_pack_sfix{,256},\n\t__builtin_ia32_{floorps,ceilps}_sfix{,256}and\n\t__builtin_ia32_roundps_az_sfix{,256} descriptions.\n\t(ix86_expand_sse_round_vec_pack_sfix): New.\n\t(ix86_expand_args_builtin): Handle V4SI_FTYPE_V4SF_ROUND,\n\tV8SI_FTYPE_V8SF_ROUND, V4SI_FTYPE_V2DF_V2DF_ROUND and\n\tV8SI_FTYPE_V4DF_V4DF_ROUND types.  Check last argument of\n\tCODE_FOR_sse4_1_roundpd_vec_pack_sfix, CODE_FOR_sse4_1_roundps_sfix,\n\tCODE_FOR_avx_roundpd_vec_pack_sfix256 and CODE_FOR_avx_roundps_sfix256.\n\t(ix86_builtin_vectorized_function): Handle\n\tBUILT_IN_{I,L,LL}FLOOR{,F}, BUILT_IN_{I,L,LL}CEIL{,F} and\n\tBUILT_IN_{I,L,LL}ROUND{,F}\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/sse4_1-floor-sfix-vec.c: New test.\n\t* gcc.target/i386/sse4_1-floorf-sfix-vec.c: Ditto.\n\t* gcc.target/i386/avx-floor-sfix-vec.c: Ditto.\n\t* gcc.target/i386/avx-floorf-sfix-vec.c: Ditto.\n\t* gcc.target/i386/sse4_1-ceil-sfix-vec.c: Ditto.\n\t* gcc.target/i386/sse4_1-ceilf-sfix-vec.c: Ditto.\n\t* gcc.target/i386/avx-ceil-sfix-vec.c: Ditto.\n\t* gcc.target/i386/avx-ceilf-sfix-vec.c: Ditto.\n\t* gcc.target/i386/sse4_1-round-sfix-vec.c: Ditto.\n\t* gcc.target/i386/sse4_1-roundf-sfix-vec.c: Ditto.\n\t* gcc.target/i386/avx-round-sfix-vec.c: Ditto.\n\t* gcc.target/i386/avx-roundf-sfix-vec.c: Ditto.\n\nFrom-SVN: r181361", "tree": {"sha": "398a2f2896c360ca8b4a7aef191b1fe692beb2bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/398a2f2896c360ca8b4a7aef191b1fe692beb2bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eab880cf621b82e4f38aed74b58d2bd76f89c46a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eab880cf621b82e4f38aed74b58d2bd76f89c46a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eab880cf621b82e4f38aed74b58d2bd76f89c46a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eab880cf621b82e4f38aed74b58d2bd76f89c46a/comments", "author": null, "committer": null, "parents": [{"sha": "2841f85e9c51a9ef0a81e23b57aedf76ad39621e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2841f85e9c51a9ef0a81e23b57aedf76ad39621e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2841f85e9c51a9ef0a81e23b57aedf76ad39621e"}], "stats": {"total": 815, "additions": 769, "deletions": 46}, "files": [{"sha": "fabb1dab2841d82ee791e359639bc9aa40649fee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 59, "deletions": 35, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eab880cf621b82e4f38aed74b58d2bd76f89c46a", "patch": "@@ -1,3 +1,29 @@\n+2011-11-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (round<mode>2_sfix): New expander.\n+\t(round<mode>2_vec_pack_sfix): Ditto.\n+\t(<sse4_1>_round<ssemodesuffix>_sfix<avxsizesuffix>): Ditto.\n+\t(<sse4_1>_round<ssemodesuffix>_vec_pack_sfix<avxsizesuffix>): Ditto.\n+\t* config/i386/builtin-types.def (V4SI_FTYPE_V4SF_ROUND,\n+\tV8SI_FTYPE_V8SF_ROUND, V4SI_FTYPE_V2DF_V2DF_ROUND,\n+\tV8SI_FTYPE_V4DF_V4DF_ROUND): New builtin types.\n+\t* config/i386/i386.c (ix86_builtins): Add\n+\tIX86_BUILTIN_{FLOORPD,CEILPD,ROUNDPD_AZ}_VEC_PACK_SFIX{,256} and\n+\tIX86_BUILTIN_{FLOORPS,CEILPS,ROUNDPS_AZ}_SFIX{,256} defines.\n+\t(bdesc_args): Add __builtin_ia32_{floorpd,ceilpd}_vec_pack_sfix{,256},\n+\t__builtin_ia32_roundpd_az_vec_pack_sfix{,256},\n+\t__builtin_ia32_{floorps,ceilps}_sfix{,256}and\n+\t__builtin_ia32_roundps_az_sfix{,256} descriptions.\n+\t(ix86_expand_sse_round_vec_pack_sfix): New.\n+\t(ix86_expand_args_builtin): Handle V4SI_FTYPE_V4SF_ROUND,\n+\tV8SI_FTYPE_V8SF_ROUND, V4SI_FTYPE_V2DF_V2DF_ROUND and\n+\tV8SI_FTYPE_V4DF_V4DF_ROUND types.  Check last argument of\n+\tCODE_FOR_sse4_1_roundpd_vec_pack_sfix, CODE_FOR_sse4_1_roundps_sfix,\n+\tCODE_FOR_avx_roundpd_vec_pack_sfix256 and CODE_FOR_avx_roundps_sfix256.\n+\t(ix86_builtin_vectorized_function): Handle\n+\tBUILT_IN_{I,L,LL}FLOOR{,F}, BUILT_IN_{I,L,LL}CEIL{,F} and\n+\tBUILT_IN_{I,L,LL}ROUND{,F}\n+\n 2011-11-14  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/50598\n@@ -11,38 +37,38 @@\n 2011-11-14  Zolotukhin Michael  <michael.v.zolotukhin@gmail.com>\n \t    Jan Hubicka  <jh@suse.cz>\n \n-        * config/i386/i386.h (processor_costs): Add second dimension to\n-        stringop_algs array.\n-        * config/i386/i386.c (cost models): Initialize second dimension of\n-        stringop_algs arrays.\n+\t* config/i386/i386.h (processor_costs): Add second dimension to\n+\tstringop_algs array.\n+\t* config/i386/i386.c (cost models): Initialize second dimension of\n+\tstringop_algs arrays.\n \t(core_cost): New costs based on generic64 costs with updated stringop\n \tvalues.\n-        (promote_duplicated_reg): Add support for vector modes, add\n-        declaration.\n-        (promote_duplicated_reg_to_size): Likewise.\n+\t(promote_duplicated_reg): Add support for vector modes, add\n+\tdeclaration.\n+\t(promote_duplicated_reg_to_size): Likewise.\n \t(processor_target): Set core costs for core variants.\n-        (expand_set_or_movmem_via_loop_with_iter): New function.\n-        (expand_set_or_movmem_via_loop): Enable reuse of the same iters in\n-        different loops, produced by this function.\n-        (emit_strset): New function.\n-        (expand_movmem_epilogue): Add epilogue generation for bigger sizes,\n-        use SSE-moves where possible.\n-        (expand_setmem_epilogue): Likewise.\n-        (expand_movmem_prologue): Likewise for prologue.\n-        (expand_setmem_prologue): Likewise.\n-        (expand_constant_movmem_prologue): Likewise.\n-        (expand_constant_setmem_prologue): Likewise.\n-        (decide_alg): Add new argument align_unknown.  Fix algorithm of\n-        strategy selection if TARGET_INLINE_ALL_STRINGOPS is set; Skip sse_loop\n-        (decide_alignment): Update desired alignment according to chosen move\n-        mode.\n-        (ix86_expand_movmem): Change unrolled_loop strategy to use SSE-moves.\n-        (ix86_expand_setmem): Likewise.\n-        (ix86_slow_unaligned_access): Implementation of new hook\n-        slow_unaligned_access.\n-        * config/i386/i386.md (strset): Enable half-SSE moves.\n-        * config/i386/sse.md (vec_dupv4si): Add expand for vec_dupv4si.\n-        (vec_dupv2di): Add expand for vec_dupv2di.\n+\t(expand_set_or_movmem_via_loop_with_iter): New function.\n+\t(expand_set_or_movmem_via_loop): Enable reuse of the same iters in\n+\tdifferent loops, produced by this function.\n+\t(emit_strset): New function.\n+\t(expand_movmem_epilogue): Add epilogue generation for bigger sizes,\n+\tuse SSE-moves where possible.\n+\t(expand_setmem_epilogue): Likewise.\n+\t(expand_movmem_prologue): Likewise for prologue.\n+\t(expand_setmem_prologue): Likewise.\n+\t(expand_constant_movmem_prologue): Likewise.\n+\t(expand_constant_setmem_prologue): Likewise.\n+\t(decide_alg): Add new argument align_unknown.  Fix algorithm of\n+\tstrategy selection if TARGET_INLINE_ALL_STRINGOPS is set; Skip sse_loop\n+\t(decide_alignment): Update desired alignment according to chosen move\n+\tmode.\n+\t(ix86_expand_movmem): Change unrolled_loop strategy to use SSE-moves.\n+\t(ix86_expand_setmem): Likewise.\n+\t(ix86_slow_unaligned_access): Implementation of new hook\n+\tslow_unaligned_access.\n+\t* config/i386/i386.md (strset): Enable half-SSE moves.\n+\t* config/i386/sse.md (vec_dupv4si): Add expand for vec_dupv4si.\n+\t(vec_dupv2di): Add expand for vec_dupv2di.\n \n 2011-11-14  Dimitrios Apostolou  <jimis@gmx.net>\n \n@@ -53,8 +79,7 @@\n \n 2011-11-14  Kai Tietz  <ktietz@redhat.com>\n \n-\t* gcov.c (generate_results): Add missing semicolon and\n-\tcorrect indent.\n+\t* gcov.c (generate_results): Add missing semicolon and correct indent.\n \n 2011-11-14  Ira Rosen  <ira.rosen@linaro.org>\n \n@@ -71,9 +96,8 @@\n \tPR target/50694\n \t* config/sh/sh.h (IS_LITTLE_ENDIAN_OPTION, UNSUPPORTED_SH2A):\n \tNew macros.\n-\t(DRIVER_SELF_SPECS): Use new macros to filter out\n-\tunsupported options taking the default configuration into\n-\taccount.\n+\t(DRIVER_SELF_SPECS): Use new macros to filter out unsupported options\n+\ttaking the default configuration into account.\n \n 2011-11-13  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n@@ -110,7 +134,7 @@\n \n 2011-11-12  Richard Henderson  <rth@redhat.com>\n \n-\t* config/rs6000/rs6000.md (fix_trunc<SFDF>si2_stfiwx): Use \n+\t* config/rs6000/rs6000.md (fix_trunc<SFDF>si2_stfiwx): Use\n \tnonimmediate_operand for the destination.\n \t(fixuns_trunc<SFDF>si2_stfiwx): Likewise.\n "}, {"sha": "79fb1427787e253eb5f0cc387eeb02c79de46978", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=eab880cf621b82e4f38aed74b58d2bd76f89c46a", "patch": "@@ -465,6 +465,11 @@ DEF_FUNCTION_TYPE_ALIAS (V4DF_FTYPE_V4DF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V4SF_FTYPE_V4SF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V8SF_FTYPE_V8SF, ROUND)\n \n+DEF_FUNCTION_TYPE_ALIAS (V4SI_FTYPE_V2DF_V2DF, ROUND)\n+DEF_FUNCTION_TYPE_ALIAS (V8SI_FTYPE_V4DF_V4DF, ROUND)\n+DEF_FUNCTION_TYPE_ALIAS (V4SI_FTYPE_V4SF, ROUND)\n+DEF_FUNCTION_TYPE_ALIAS (V8SI_FTYPE_V8SF, ROUND)\n+\n DEF_FUNCTION_TYPE_ALIAS (INT_FTYPE_V2DF_V2DF, PTEST)\n DEF_FUNCTION_TYPE_ALIAS (INT_FTYPE_V2DI_V2DI, PTEST)\n DEF_FUNCTION_TYPE_ALIAS (INT_FTYPE_V4DF_V4DF, PTEST)"}, {"sha": "e30799980aac4e1171010eccd773c87a9193866e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 188, "deletions": 7, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=eab880cf621b82e4f38aed74b58d2bd76f89c46a", "patch": "@@ -25457,22 +25457,32 @@ enum ix86_builtins\n   IX86_BUILTIN_PMULDQ128,\n   IX86_BUILTIN_PMULLD128,\n \n-  IX86_BUILTIN_ROUNDPD,\n-  IX86_BUILTIN_ROUNDPS,\n   IX86_BUILTIN_ROUNDSD,\n   IX86_BUILTIN_ROUNDSS,\n \n+  IX86_BUILTIN_ROUNDPD,\n+  IX86_BUILTIN_ROUNDPS,\n+\n   IX86_BUILTIN_FLOORPD,\n   IX86_BUILTIN_CEILPD,\n   IX86_BUILTIN_TRUNCPD,\n   IX86_BUILTIN_RINTPD,\n   IX86_BUILTIN_ROUNDPD_AZ,\n+\n+  IX86_BUILTIN_FLOORPD_VEC_PACK_SFIX,\n+  IX86_BUILTIN_CEILPD_VEC_PACK_SFIX,\n+  IX86_BUILTIN_ROUNDPD_AZ_VEC_PACK_SFIX,\n+\n   IX86_BUILTIN_FLOORPS,\n   IX86_BUILTIN_CEILPS,\n   IX86_BUILTIN_TRUNCPS,\n   IX86_BUILTIN_RINTPS,\n   IX86_BUILTIN_ROUNDPS_AZ,\n \n+  IX86_BUILTIN_FLOORPS_SFIX,\n+  IX86_BUILTIN_CEILPS_SFIX,\n+  IX86_BUILTIN_ROUNDPS_AZ_SFIX,\n+\n   IX86_BUILTIN_PTESTZ,\n   IX86_BUILTIN_PTESTC,\n   IX86_BUILTIN_PTESTNZC,\n@@ -25646,12 +25656,21 @@ enum ix86_builtins\n   IX86_BUILTIN_TRUNCPD256,\n   IX86_BUILTIN_RINTPD256,\n   IX86_BUILTIN_ROUNDPD_AZ256,\n+\n+  IX86_BUILTIN_FLOORPD_VEC_PACK_SFIX256,\n+  IX86_BUILTIN_CEILPD_VEC_PACK_SFIX256,\n+  IX86_BUILTIN_ROUNDPD_AZ_VEC_PACK_SFIX256,\n+\n   IX86_BUILTIN_FLOORPS256,\n   IX86_BUILTIN_CEILPS256,\n   IX86_BUILTIN_TRUNCPS256,\n   IX86_BUILTIN_RINTPS256,\n   IX86_BUILTIN_ROUNDPS_AZ256,\n \n+  IX86_BUILTIN_FLOORPS_SFIX256,\n+  IX86_BUILTIN_CEILPS_SFIX256,\n+  IX86_BUILTIN_ROUNDPS_AZ_SFIX256,\n+\n   IX86_BUILTIN_UNPCKHPD256,\n   IX86_BUILTIN_UNPCKLPD256,\n   IX86_BUILTIN_UNPCKHPS256,\n@@ -26856,14 +26875,22 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_truncpd\", IX86_BUILTIN_TRUNCPD, (enum rtx_code) ROUND_TRUNC, (int) V2DF_FTYPE_V2DF_ROUND },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_rintpd\", IX86_BUILTIN_RINTPD, (enum rtx_code) ROUND_MXCSR, (int) V2DF_FTYPE_V2DF_ROUND },\n \n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd_vec_pack_sfix, \"__builtin_ia32_floorpd_vec_pack_sfix\", IX86_BUILTIN_FLOORPD_VEC_PACK_SFIX, (enum rtx_code) ROUND_FLOOR, (int) V4SI_FTYPE_V2DF_V2DF_ROUND },\n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd_vec_pack_sfix, \"__builtin_ia32_ceilpd_vec_pack_sfix\", IX86_BUILTIN_CEILPD_VEC_PACK_SFIX, (enum rtx_code) ROUND_CEIL, (int) V4SI_FTYPE_V2DF_V2DF_ROUND },\n+\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_roundv2df2, \"__builtin_ia32_roundpd_az\", IX86_BUILTIN_ROUNDPD_AZ, UNKNOWN, (int) V2DF_FTYPE_V2DF },\n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_roundv2df2_vec_pack_sfix, \"__builtin_ia32_roundpd_az_vec_pack_sfix\", IX86_BUILTIN_ROUNDPD_AZ_VEC_PACK_SFIX, UNKNOWN, (int) V4SI_FTYPE_V2DF_V2DF },\n \n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_floorps\", IX86_BUILTIN_FLOORPS, (enum rtx_code) ROUND_FLOOR, (int) V4SF_FTYPE_V4SF_ROUND },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_ceilps\", IX86_BUILTIN_CEILPS, (enum rtx_code) ROUND_CEIL, (int) V4SF_FTYPE_V4SF_ROUND },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_truncps\", IX86_BUILTIN_TRUNCPS, (enum rtx_code) ROUND_TRUNC, (int) V4SF_FTYPE_V4SF_ROUND },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_rintps\", IX86_BUILTIN_RINTPS, (enum rtx_code) ROUND_MXCSR, (int) V4SF_FTYPE_V4SF_ROUND },\n \n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps_sfix, \"__builtin_ia32_floorps_sfix\", IX86_BUILTIN_FLOORPS_SFIX, (enum rtx_code) ROUND_FLOOR, (int) V4SI_FTYPE_V4SF_ROUND },\n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps_sfix, \"__builtin_ia32_ceilps_sfix\", IX86_BUILTIN_CEILPS_SFIX, (enum rtx_code) ROUND_CEIL, (int) V4SI_FTYPE_V4SF_ROUND },\n+\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_roundv4sf2, \"__builtin_ia32_roundps_az\", IX86_BUILTIN_ROUNDPS_AZ, UNKNOWN, (int) V4SF_FTYPE_V4SF },\n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_roundv4sf2_sfix, \"__builtin_ia32_roundps_az_sfix\", IX86_BUILTIN_ROUNDPS_AZ_SFIX, UNKNOWN, (int) V4SI_FTYPE_V4SF },\n \n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_ptest, \"__builtin_ia32_ptestz128\", IX86_BUILTIN_PTESTZ, EQ, (int) INT_FTYPE_V2DI_V2DI_PTEST },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_ptest, \"__builtin_ia32_ptestc128\", IX86_BUILTIN_PTESTC, LTU, (int) INT_FTYPE_V2DI_V2DI_PTEST },\n@@ -26983,13 +27010,21 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundpd256, \"__builtin_ia32_rintpd256\", IX86_BUILTIN_RINTPD256, (enum rtx_code) ROUND_MXCSR, (int) V4DF_FTYPE_V4DF_ROUND },\n \n   { OPTION_MASK_ISA_AVX, CODE_FOR_roundv4df2, \"__builtin_ia32_roundpd_az256\", IX86_BUILTIN_ROUNDPD_AZ256, UNKNOWN, (int) V4DF_FTYPE_V4DF },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_roundv4df2_vec_pack_sfix, \"__builtin_ia32_roundpd_az_vec_pack_sfix256\", IX86_BUILTIN_ROUNDPD_AZ_VEC_PACK_SFIX256, UNKNOWN, (int) V8SI_FTYPE_V4DF_V4DF },\n+\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundpd_vec_pack_sfix256, \"__builtin_ia32_floorpd_vec_pack_sfix256\", IX86_BUILTIN_FLOORPD_VEC_PACK_SFIX256, (enum rtx_code) ROUND_FLOOR, (int) V8SI_FTYPE_V4DF_V4DF_ROUND },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundpd_vec_pack_sfix256, \"__builtin_ia32_ceilpd_vec_pack_sfix256\", IX86_BUILTIN_CEILPD_VEC_PACK_SFIX256, (enum rtx_code) ROUND_CEIL, (int) V8SI_FTYPE_V4DF_V4DF_ROUND },\n \n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundps256, \"__builtin_ia32_floorps256\", IX86_BUILTIN_FLOORPS256, (enum rtx_code) ROUND_FLOOR, (int) V8SF_FTYPE_V8SF_ROUND },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundps256, \"__builtin_ia32_ceilps256\", IX86_BUILTIN_CEILPS256, (enum rtx_code) ROUND_CEIL, (int) V8SF_FTYPE_V8SF_ROUND },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundps256, \"__builtin_ia32_truncps256\", IX86_BUILTIN_TRUNCPS256, (enum rtx_code) ROUND_TRUNC, (int) V8SF_FTYPE_V8SF_ROUND },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundps256, \"__builtin_ia32_rintps256\", IX86_BUILTIN_RINTPS256, (enum rtx_code) ROUND_MXCSR, (int) V8SF_FTYPE_V8SF_ROUND },\n \n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundps_sfix256, \"__builtin_ia32_floorps_sfix256\", IX86_BUILTIN_FLOORPS_SFIX256, (enum rtx_code) ROUND_FLOOR, (int) V8SI_FTYPE_V8SF_ROUND },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundps_sfix256, \"__builtin_ia32_ceilps_sfix256\", IX86_BUILTIN_CEILPS_SFIX256, (enum rtx_code) ROUND_CEIL, (int) V8SI_FTYPE_V8SF_ROUND },\n+\n   { OPTION_MASK_ISA_AVX, CODE_FOR_roundv8sf2, \"__builtin_ia32_roundps_az256\", IX86_BUILTIN_ROUNDPS_AZ256, UNKNOWN, (int) V8SF_FTYPE_V8SF },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_roundv8sf2_sfix, \"__builtin_ia32_roundps_az_sfix256\", IX86_BUILTIN_ROUNDPS_AZ_SFIX256, UNKNOWN, (int) V8SI_FTYPE_V8SF },\n \n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_unpckhpd256,  \"__builtin_ia32_unpckhpd256\", IX86_BUILTIN_UNPCKHPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_unpcklpd256,  \"__builtin_ia32_unpcklpd256\", IX86_BUILTIN_UNPCKLPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF },\n@@ -28430,7 +28465,7 @@ ix86_expand_sse_comi (const struct builtin_description *d, tree exp,\n   return SUBREG_REG (target);\n }\n \n-/* Subroutine of ix86_expand_args_builtin to take care of round insns.  */\n+/* Subroutines of ix86_expand_args_builtin to take care of round insns.  */\n \n static rtx\n ix86_expand_sse_round (const struct builtin_description *d, tree exp,\n@@ -28463,6 +28498,44 @@ ix86_expand_sse_round (const struct builtin_description *d, tree exp,\n   return target;\n }\n \n+static rtx\n+ix86_expand_sse_round_vec_pack_sfix (const struct builtin_description *d,\n+\t\t\t\t     tree exp, rtx target)\n+{\n+  rtx pat;\n+  tree arg0 = CALL_EXPR_ARG (exp, 0);\n+  tree arg1 = CALL_EXPR_ARG (exp, 1);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n+  rtx op2;\n+  enum machine_mode tmode = insn_data[d->icode].operand[0].mode;\n+  enum machine_mode mode0 = insn_data[d->icode].operand[1].mode;\n+  enum machine_mode mode1 = insn_data[d->icode].operand[2].mode;\n+\n+  if (optimize || target == 0\n+      || GET_MODE (target) != tmode\n+      || !insn_data[d->icode].operand[0].predicate (target, tmode))\n+    target = gen_reg_rtx (tmode);\n+\n+  op0 = safe_vector_operand (op0, mode0);\n+  op1 = safe_vector_operand (op1, mode1);\n+\n+  if ((optimize && !register_operand (op0, mode0))\n+      || !insn_data[d->icode].operand[0].predicate (op0, mode0))\n+    op0 = copy_to_mode_reg (mode0, op0);\n+  if ((optimize && !register_operand (op1, mode1))\n+      || !insn_data[d->icode].operand[1].predicate (op1, mode1))\n+    op1 = copy_to_mode_reg (mode1, op1);\n+\n+  op2 = GEN_INT (d->comparison);\n+\n+  pat = GEN_FCN (d->icode) (target, op0, op1, op2);\n+  if (! pat)\n+    return 0;\n+  emit_insn (pat);\n+  return target;\n+}\n+\n /* Subroutine of ix86_expand_builtin to take care of ptest insns.  */\n \n static rtx\n@@ -28736,7 +28809,12 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V4DF_FTYPE_V4DF_ROUND:\n     case V4SF_FTYPE_V4SF_ROUND:\n     case V8SF_FTYPE_V8SF_ROUND:\n+    case V4SI_FTYPE_V4SF_ROUND:\n+    case V8SI_FTYPE_V8SF_ROUND:\n       return ix86_expand_sse_round (d, exp, target);\n+    case V4SI_FTYPE_V2DF_V2DF_ROUND:\n+    case V8SI_FTYPE_V4DF_V4DF_ROUND:\n+      return ix86_expand_sse_round_vec_pack_sfix (d, exp, target);\n     case INT_FTYPE_V8SF_V8SF_PTEST:\n     case INT_FTYPE_V4DI_V4DI_PTEST:\n     case INT_FTYPE_V4DF_V4DF_PTEST:\n@@ -29053,15 +29131,22 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n \t\terror (\"the last argument must be an 1-bit immediate\");\n \t\treturn const0_rtx;\n \n-\t      case CODE_FOR_sse4_1_roundpd:\n-\t      case CODE_FOR_sse4_1_roundps:\n \t      case CODE_FOR_sse4_1_roundsd:\n \t      case CODE_FOR_sse4_1_roundss:\n+\n+\t      case CODE_FOR_sse4_1_roundpd:\n+\t      case CODE_FOR_sse4_1_roundps:\n+\t      case CODE_FOR_avx_roundpd256:\n+\t      case CODE_FOR_avx_roundps256:\n+\n+\t      case CODE_FOR_sse4_1_roundpd_vec_pack_sfix:\n+\t      case CODE_FOR_sse4_1_roundps_sfix:\n+\t      case CODE_FOR_avx_roundpd_vec_pack_sfix256:\n+\t      case CODE_FOR_avx_roundps_sfix256:\n+\n \t      case CODE_FOR_sse4_1_blendps:\n \t      case CODE_FOR_avx_blendpd256:\n \t      case CODE_FOR_avx_vpermilv4df:\n-\t      case CODE_FOR_avx_roundpd256:\n-\t      case CODE_FOR_avx_roundps256:\n \t\terror (\"the last argument must be a 4-bit immediate\");\n \t\treturn const0_rtx;\n \n@@ -30087,6 +30172,70 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t}\n       break;\n \n+    case BUILT_IN_IFLOOR:\n+    case BUILT_IN_LFLOOR:\n+    case BUILT_IN_LLFLOOR:\n+      /* The round insn does not trap on denormals.  */\n+      if (flag_trapping_math || !TARGET_ROUND)\n+\tbreak;\n+\n+      if (out_mode == SImode && in_mode == DFmode)\n+\t{\n+\t  if (out_n == 4 && in_n == 2)\n+\t    return ix86_builtins[IX86_BUILTIN_FLOORPD_VEC_PACK_SFIX];\n+\t  else if (out_n == 8 && in_n == 4)\n+\t    return ix86_builtins[IX86_BUILTIN_FLOORPD_VEC_PACK_SFIX256];\n+\t}\n+      break;\n+\n+    case BUILT_IN_IFLOORF:\n+    case BUILT_IN_LFLOORF:\n+    case BUILT_IN_LLFLOORF:\n+      /* The round insn does not trap on denormals.  */\n+      if (flag_trapping_math || !TARGET_ROUND)\n+\tbreak;\n+\n+      if (out_mode == SImode && in_mode == SFmode)\n+\t{\n+\t  if (out_n == 4 && in_n == 4)\n+\t    return ix86_builtins[IX86_BUILTIN_FLOORPS_SFIX];\n+\t  else if (out_n == 8 && in_n == 8)\n+\t    return ix86_builtins[IX86_BUILTIN_FLOORPS_SFIX256];\n+\t}\n+      break;\n+\n+    case BUILT_IN_ICEIL:\n+    case BUILT_IN_LCEIL:\n+    case BUILT_IN_LLCEIL:\n+      /* The round insn does not trap on denormals.  */\n+      if (flag_trapping_math || !TARGET_ROUND)\n+\tbreak;\n+\n+      if (out_mode == SImode && in_mode == DFmode)\n+\t{\n+\t  if (out_n == 4 && in_n == 2)\n+\t    return ix86_builtins[IX86_BUILTIN_CEILPD_VEC_PACK_SFIX];\n+\t  else if (out_n == 8 && in_n == 4)\n+\t    return ix86_builtins[IX86_BUILTIN_CEILPD_VEC_PACK_SFIX256];\n+\t}\n+      break;\n+\n+    case BUILT_IN_ICEILF:\n+    case BUILT_IN_LCEILF:\n+    case BUILT_IN_LLCEILF:\n+      /* The round insn does not trap on denormals.  */\n+      if (flag_trapping_math || !TARGET_ROUND)\n+\tbreak;\n+\n+      if (out_mode == SImode && in_mode == SFmode)\n+\t{\n+\t  if (out_n == 4 && in_n == 4)\n+\t    return ix86_builtins[IX86_BUILTIN_CEILPS_SFIX];\n+\t  else if (out_n == 8 && in_n == 8)\n+\t    return ix86_builtins[IX86_BUILTIN_CEILPS_SFIX256];\n+\t}\n+      break;\n+\n     case BUILT_IN_IRINT:\n     case BUILT_IN_LRINT:\n     case BUILT_IN_LLRINT:\n@@ -30111,6 +30260,38 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t}\n       break;\n \n+    case BUILT_IN_IROUND:\n+    case BUILT_IN_LROUND:\n+    case BUILT_IN_LLROUND:\n+      /* The round insn does not trap on denormals.  */\n+      if (flag_trapping_math || !TARGET_ROUND)\n+\tbreak;\n+\n+      if (out_mode == SImode && in_mode == DFmode)\n+\t{\n+\t  if (out_n == 4 && in_n == 2)\n+\t    return ix86_builtins[IX86_BUILTIN_ROUNDPD_AZ_VEC_PACK_SFIX];\n+\t  else if (out_n == 8 && in_n == 4)\n+\t    return ix86_builtins[IX86_BUILTIN_ROUNDPD_AZ_VEC_PACK_SFIX256];\n+\t}\n+      break;\n+\n+    case BUILT_IN_IROUNDF:\n+    case BUILT_IN_LROUNDF:\n+    case BUILT_IN_LLROUNDF:\n+      /* The round insn does not trap on denormals.  */\n+      if (flag_trapping_math || !TARGET_ROUND)\n+\tbreak;\n+\n+      if (out_mode == SImode && in_mode == SFmode)\n+\t{\n+\t  if (out_n == 4 && in_n == 4)\n+\t    return ix86_builtins[IX86_BUILTIN_ROUNDPS_AZ_SFIX];\n+\t  else if (out_n == 8 && in_n == 8)\n+\t    return ix86_builtins[IX86_BUILTIN_ROUNDPS_AZ_SFIX256];\n+\t}\n+      break;\n+\n     case BUILT_IN_COPYSIGN:\n       if (out_mode == DFmode && in_mode == DFmode)\n \t{"}, {"sha": "147646bb20bdbe79d5c99d01155bb923e4518b89", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=eab880cf621b82e4f38aed74b58d2bd76f89c46a", "patch": "@@ -9902,6 +9902,45 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_expand \"<sse4_1>_round<ssemodesuffix>_sfix<avxsizesuffix>\"\n+  [(match_operand:<sseintvecmode> 0 \"register_operand\" \"\")\n+   (match_operand:VF1 1 \"nonimmediate_operand\" \"\")\n+   (match_operand:SI 2 \"const_0_to_15_operand\" \"\")]\n+  \"TARGET_ROUND\"\n+{\n+  rtx tmp = gen_reg_rtx (<MODE>mode);\n+\n+  emit_insn\n+    (gen_<sse4_1>_round<ssemodesuffix><avxsizesuffix> (tmp, operands[1],\n+\t\t\t\t\t\t       operands[2]));\n+  emit_insn\n+    (gen_fix_trunc<mode><sseintvecmodelower>2 (operands[0], tmp));\n+  DONE;\n+})\n+\n+(define_expand \"<sse4_1>_round<ssemodesuffix>_vec_pack_sfix<avxsizesuffix>\"\n+  [(match_operand:<ssepackfltmode> 0 \"register_operand\" \"\")\n+   (match_operand:VF2 1 \"nonimmediate_operand\" \"\")\n+   (match_operand:VF2 2 \"nonimmediate_operand\" \"\")\n+   (match_operand:SI 3 \"const_0_to_15_operand\" \"\")]\n+  \"TARGET_ROUND\"\n+{\n+  rtx tmp0, tmp1;\n+\n+  tmp0 = gen_reg_rtx (<MODE>mode);\n+  tmp1 = gen_reg_rtx (<MODE>mode);\n+\n+  emit_insn\n+    (gen_<sse4_1>_round<ssemodesuffix><avxsizesuffix> (tmp0, operands[1],\n+\t\t\t\t\t\t       operands[3]));\n+  emit_insn\n+    (gen_<sse4_1>_round<ssemodesuffix><avxsizesuffix> (tmp1, operands[2],\n+\t\t\t\t\t\t       operands[3]));\n+  emit_insn\n+    (gen_vec_pack_sfix_trunc_<mode> (operands[0], tmp0, tmp1));\n+  DONE;\n+})\n+\n (define_insn \"sse4_1_round<ssescalarmodesuffix>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x,x\")\n \t(vec_merge:VF_128\n@@ -9957,6 +9996,39 @@\n   operands[5] = GEN_INT (ROUND_TRUNC);\n })\n \n+(define_expand \"round<mode>2_sfix\"\n+  [(match_operand:<sseintvecmode> 0 \"register_operand\" \"\")\n+   (match_operand:VF1 1 \"nonimmediate_operand\" \"\")]\n+  \"TARGET_ROUND && !flag_trapping_math\"\n+{\n+  rtx tmp = gen_reg_rtx (<MODE>mode);\n+\n+  emit_insn (gen_round<mode>2 (tmp, operands[1]));\n+\n+  emit_insn\n+    (gen_fix_trunc<mode><sseintvecmodelower>2 (operands[0], tmp));\n+  DONE;\n+})\n+\n+(define_expand \"round<mode>2_vec_pack_sfix\"\n+  [(match_operand:<ssepackfltmode> 0 \"register_operand\" \"\")\n+   (match_operand:VF2 1 \"nonimmediate_operand\" \"\")\n+   (match_operand:VF2 2 \"nonimmediate_operand\" \"\")]\n+  \"TARGET_ROUND && !flag_trapping_math\"\n+{\n+  rtx tmp0, tmp1;\n+\n+  tmp0 = gen_reg_rtx (<MODE>mode);\n+  tmp1 = gen_reg_rtx (<MODE>mode);\n+\n+  emit_insn (gen_round<mode>2 (tmp0, operands[1]));\n+  emit_insn (gen_round<mode>2 (tmp1, operands[2]));\n+\n+  emit_insn\n+    (gen_vec_pack_sfix_trunc_<mode> (operands[0], tmp0, tmp1));\n+  DONE;\n+})\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Intel SSE4.2 string/text processing instructions"}, {"sha": "e371383f0cc4eb7ef4c6724350b33b48e7222566", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eab880cf621b82e4f38aed74b58d2bd76f89c46a", "patch": "@@ -1,3 +1,18 @@\n+2011-11-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/sse4_1-floor-sfix-vec.c: New test.\n+\t* gcc.target/i386/sse4_1-floorf-sfix-vec.c: Ditto.\n+\t* gcc.target/i386/avx-floor-sfix-vec.c: Ditto.\n+\t* gcc.target/i386/avx-floorf-sfix-vec.c: Ditto.\n+\t* gcc.target/i386/sse4_1-ceil-sfix-vec.c: Ditto.\n+\t* gcc.target/i386/sse4_1-ceilf-sfix-vec.c: Ditto.\n+\t* gcc.target/i386/avx-ceil-sfix-vec.c: Ditto.\n+\t* gcc.target/i386/avx-ceilf-sfix-vec.c: Ditto.\n+\t* gcc.target/i386/sse4_1-round-sfix-vec.c: Ditto.\n+\t* gcc.target/i386/sse4_1-roundf-sfix-vec.c: Ditto.\n+\t* gcc.target/i386/avx-round-sfix-vec.c: Ditto.\n+\t* gcc.target/i386/avx-roundf-sfix-vec.c: Ditto.\n+\n 2011-11-14  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n \n \tPR c++/6936\n@@ -309,8 +324,8 @@\n \n 2011-11-09  Janne Blomqvist  <jb@gcc.gnu.org>\n \n-        PR libfortran/50016\n-        * gfortran.dg/inquire_size.f90: Don't flush the unit.\n+\tPR libfortran/50016\n+\t* gfortran.dg/inquire_size.f90: Don't flush the unit.\n \n 2011-11-09  Richard Guenther  <rguenther@suse.de>\n \n@@ -495,8 +510,8 @@\n \n 2011-11-07  Janne Blomqvist  <jb@gcc.gnu.org>\n \n-        PR libfortran/45723\n-        * gfortran.dg/open_dev_null.f90: Remove testcase.\n+\tPR libfortran/45723\n+\t* gfortran.dg/open_dev_null.f90: Remove testcase.\n \n 2011-11-07  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "ac0911fe844d0936bd9496fc2b3005ac0b9c9e99", "filename": "gcc/testsuite/gcc.target/i386/avx-ceil-sfix-vec.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceil-sfix-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceil-sfix-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceil-sfix-vec.c?ref=eab880cf621b82e4f38aed74b58d2bd76f89c46a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-ceil-sfix-vec.c\""}, {"sha": "789b78e76a78d5f8334cab8dfa6f7fa5af2ce794", "filename": "gcc/testsuite/gcc.target/i386/avx-ceilf-sfix-vec.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceilf-sfix-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceilf-sfix-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceilf-sfix-vec.c?ref=eab880cf621b82e4f38aed74b58d2bd76f89c46a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-ceilf-sfix-vec.c\""}, {"sha": "efa557cf79177382ba2c24c6454b006d52a27049", "filename": "gcc/testsuite/gcc.target/i386/avx-floor-sfix-vec.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floor-sfix-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floor-sfix-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floor-sfix-vec.c?ref=eab880cf621b82e4f38aed74b58d2bd76f89c46a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-floor-sfix-vec.c\""}, {"sha": "0c1587a12090bd2aee56ac12eed8cf8da5e3164a", "filename": "gcc/testsuite/gcc.target/i386/avx-floorf-sfix-vec.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floorf-sfix-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floorf-sfix-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floorf-sfix-vec.c?ref=eab880cf621b82e4f38aed74b58d2bd76f89c46a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-floorf-sfix-vec.c\""}, {"sha": "5adfffa5f1037aa961608e59cdaba21e6a310382", "filename": "gcc/testsuite/gcc.target/i386/avx-round-sfix-vec.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-round-sfix-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-round-sfix-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-round-sfix-vec.c?ref=eab880cf621b82e4f38aed74b58d2bd76f89c46a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-round-sfix-vec.c\""}, {"sha": "1fd4591233de36379d5a07022e896bb973c9efbf", "filename": "gcc/testsuite/gcc.target/i386/avx-roundf-sfix-vec.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-roundf-sfix-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-roundf-sfix-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-roundf-sfix-vec.c?ref=eab880cf621b82e4f38aed74b58d2bd76f89c46a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-roundf-sfix-vec.c\""}, {"sha": "ca07d9c003f956c933d544a1ee8dbd76bf96c0c5", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-ceil-sfix-vec.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ceil-sfix-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ceil-sfix-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ceil-sfix-vec.c?ref=eab880cf621b82e4f38aed74b58d2bd76f89c46a", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <math.h>\n+\n+extern double ceil (double);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+TEST (void)\n+{\n+  double a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) ceil (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) ceil (a[i]))\n+      abort();\n+}"}, {"sha": "b0559bf39958cc67d2d350a37fdf2e8d35baa06d", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-ceilf-sfix-vec.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ceilf-sfix-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ceilf-sfix-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ceilf-sfix-vec.c?ref=eab880cf621b82e4f38aed74b58d2bd76f89c46a", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <math.h>\n+\n+extern float ceilf (float);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+TEST (void)\n+{\n+  float a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) ceilf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) ceilf (a[i]))\n+      abort();\n+}"}, {"sha": "2083a60e7fe993474ce34ef4ef9ea3d3ac4146cd", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-floor-sfix-vec.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-floor-sfix-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-floor-sfix-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-floor-sfix-vec.c?ref=eab880cf621b82e4f38aed74b58d2bd76f89c46a", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <math.h>\n+\n+extern double floor (double);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+TEST (void)\n+{\n+  double a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) floor (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) floor (a[i]))\n+      abort();\n+}"}, {"sha": "aa2976d5b0a6803cd1b47faf9194a8991ed64394", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-floorf-sfix-vec.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-floorf-sfix-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-floorf-sfix-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-floorf-sfix-vec.c?ref=eab880cf621b82e4f38aed74b58d2bd76f89c46a", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <math.h>\n+\n+extern float floorf (float);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+TEST (void)\n+{\n+  float a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) floorf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) floorf (a[i]))\n+      abort();\n+}"}, {"sha": "9abbe55b7d7b75013f4d96e1b5897b1ceab9c994", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-round-sfix-vec.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-round-sfix-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-round-sfix-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-round-sfix-vec.c?ref=eab880cf621b82e4f38aed74b58d2bd76f89c46a", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <math.h>\n+\n+extern double round (double);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+TEST (void)\n+{\n+  double a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) round (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) round (a[i]))\n+      abort();\n+}"}, {"sha": "5384e5c62c55fffced5ab84123ace0c584b263c0", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-roundf-sfix-vec.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundf-sfix-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab880cf621b82e4f38aed74b58d2bd76f89c46a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundf-sfix-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundf-sfix-vec.c?ref=eab880cf621b82e4f38aed74b58d2bd76f89c46a", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <math.h>\n+\n+extern float roundf (float);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+TEST (void)\n+{\n+  float a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) roundf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) roundf (a[i]))\n+      abort();\n+}"}]}