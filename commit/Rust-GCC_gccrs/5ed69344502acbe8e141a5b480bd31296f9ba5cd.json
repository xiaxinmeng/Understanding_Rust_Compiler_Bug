{"sha": "5ed69344502acbe8e141a5b480bd31296f9ba5cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVkNjkzNDQ1MDJhY2JlOGUxNDFhNWI0ODBiZDMxMjk2ZjliYTVjZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-10-03T13:09:42Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-10-03T13:09:42Z"}, "message": "i386.md (*ashl<mode>3_mask): Change operand 2 preticate to nonimmediate_operand.\n\n\t* config/i386/i386.md (*ashl<mode>3_mask): Change operand 2 preticate\n\tto nonimmediate_operand.  Force operand 2 to register when allowed.\n\t(*<shiftrt_insn><mode>3_mask): Ditto.\n\t(*<rotate_insn><mode>3_mask): Ditto.\n\nFrom-SVN: r164915", "tree": {"sha": "a51a27bd3f30ee29a8236268c8cd5ce8cbeee2e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a51a27bd3f30ee29a8236268c8cd5ce8cbeee2e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ed69344502acbe8e141a5b480bd31296f9ba5cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ed69344502acbe8e141a5b480bd31296f9ba5cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ed69344502acbe8e141a5b480bd31296f9ba5cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ed69344502acbe8e141a5b480bd31296f9ba5cd/comments", "author": null, "committer": null, "parents": [{"sha": "888a22d085105905fc3b951c431e7f9e1f45d158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888a22d085105905fc3b951c431e7f9e1f45d158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/888a22d085105905fc3b951c431e7f9e1f45d158"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "9d1e2b50f61f3947e555b9903a821b08963a5870", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ed69344502acbe8e141a5b480bd31296f9ba5cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ed69344502acbe8e141a5b480bd31296f9ba5cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ed69344502acbe8e141a5b480bd31296f9ba5cd", "patch": "@@ -1,3 +1,10 @@\n+2010-10-03  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*ashl<mode>3_mask): Change operand 2 preticate\n+\tto nonimmediate_operand.  Force operand 2 to register when allowed.\n+\t(*<shiftrt_insn><mode>3_mask): Ditto.\n+\t(*<rotate_insn><mode>3_mask): Ditto.\n+\n 2010-10-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR tree-optimization/45720\n@@ -9,7 +16,7 @@\n \t* tree-vect-stmts.c (vectorizable_store): Allow negative steps.\n \t(perm_mask_for_reverse): Removed.\n \t(reverse_vec_elements): Likewise.\n-\t(vectorizable_load): Don't hanle negative steps.\n+\t(vectorizable_load): Don't handle negative steps.\n \n 2010-10-02  Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "fc190e9629f59a5484298b128e9899374ca3518f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ed69344502acbe8e141a5b480bd31296f9ba5cd/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ed69344502acbe8e141a5b480bd31296f9ba5cd/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5ed69344502acbe8e141a5b480bd31296f9ba5cd", "patch": "@@ -9152,14 +9152,13 @@\n })\n \n ;; Avoid useless masking of count operand.\n-\n (define_insn_and_split \"*ashl<mode>3_mask\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0\")\n \t  (subreg:QI\n \t    (and:SI\n-\t      (match_operand:SI 2 \"register_operand\" \"c\")\n+\t      (match_operand:SI 2 \"nonimmediate_operand\" \"c\")\n \t      (match_operand:SI 3 \"const_int_operand\" \"n\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (ASHIFT, <MODE>mode, operands)\n@@ -9170,7 +9169,12 @@\n   [(parallel [(set (match_dup 0)\n \t\t   (ashift:SWI48 (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"operands[2] = simplify_gen_subreg (QImode, operands[2], SImode, 0);\"\n+{\n+  if (can_create_pseudo_p ())\n+    operands [2] = force_reg (SImode, operands[2]);\n+\n+  operands[2] = simplify_gen_subreg (QImode, operands[2], SImode, 0);\n+}\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -9714,14 +9718,13 @@\n   \"ix86_expand_binary_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n ;; Avoid useless masking of count operand.\n-\n (define_insn_and_split \"*<shiftrt_insn><mode>3_mask\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm\")\n \t(any_shiftrt:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0\")\n \t  (subreg:QI\n \t    (and:SI\n-\t      (match_operand:SI 2 \"register_operand\" \"c\")\n+\t      (match_operand:SI 2 \"nonimmediate_operand\" \"c\")\n \t      (match_operand:SI 3 \"const_int_operand\" \"n\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n@@ -9732,7 +9735,12 @@\n   [(parallel [(set (match_dup 0)\n \t\t   (any_shiftrt:SWI48 (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"operands[2] = simplify_gen_subreg (QImode, operands[2], SImode, 0);\"\n+{\n+  if (can_create_pseudo_p ())\n+    operands [2] = force_reg (SImode, operands[2]);\n+\n+  operands[2] = simplify_gen_subreg (QImode, operands[2], SImode, 0);\n+}\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -10089,14 +10097,13 @@\n   \"ix86_expand_binary_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n ;; Avoid useless masking of count operand.\n-\n (define_insn_and_split \"*<rotate_insn><mode>3_mask\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm\")\n \t(any_rotate:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0\")\n \t  (subreg:QI\n \t    (and:SI\n-\t      (match_operand:SI 2 \"register_operand\" \"c\")\n+\t      (match_operand:SI 2 \"nonimmediate_operand\" \"c\")\n \t      (match_operand:SI 3 \"const_int_operand\" \"n\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n@@ -10107,7 +10114,12 @@\n   [(parallel [(set (match_dup 0)\n \t\t   (any_rotate:SWI48 (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"operands[2] = simplify_gen_subreg (QImode, operands[2], SImode, 0);\"\n+{\n+  if (can_create_pseudo_p ())\n+    operands [2] = force_reg (SImode, operands[2]);\n+\n+  operands[2] = simplify_gen_subreg (QImode, operands[2], SImode, 0);\n+}\n   [(set_attr \"type\" \"rotate\")\n    (set_attr \"mode\" \"<MODE>\")])\n "}]}