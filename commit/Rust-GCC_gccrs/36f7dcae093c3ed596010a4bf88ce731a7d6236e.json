{"sha": "36f7dcae093c3ed596010a4bf88ce731a7d6236e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZmN2RjYWUwOTNjM2VkNTk2MDEwYTRiZjg4Y2U3MzFhN2Q2MjM2ZQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-02-03T13:38:42Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-02-03T13:38:42Z"}, "message": "re PR fortran/30514 ([4.1 only] zero-sized array wrongly rejected: integer :: i(1:-1))\n\n2007-02-03  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30514\n\t* array.c (match_array_element_spec): If the length of an array is\n\tnegative, adjust the upper limit to make it zero length.\n\n\tPR fortran/30660\n\t* resolve.c (pure_function, resolve_function): Initialize name to\n\tnull to clear up build warnings.\n\t(resolve_fl_variable): Look at components explicitly to check for\n\tdefault initializer, rather than using gfc_default_initializer.\n\n2007-02-03  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30514\n\t* gfortran.dg/zero_sized_2.f90: New test.\n\n\tPR fortran/30660\n\t* gfortran.dg/alloc_comp_basics_4.f90: New test.\n\n\tPR fortran/29820\n\t* gfortran.dg/actual_array_interface_1.f90: Copy source to empty\n\tfile.\n\nFrom-SVN: r121541", "tree": {"sha": "3f6806872e565af6ccf3b61138274516caa9cd46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f6806872e565af6ccf3b61138274516caa9cd46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36f7dcae093c3ed596010a4bf88ce731a7d6236e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f7dcae093c3ed596010a4bf88ce731a7d6236e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36f7dcae093c3ed596010a4bf88ce731a7d6236e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f7dcae093c3ed596010a4bf88ce731a7d6236e/comments", "author": null, "committer": null, "parents": [{"sha": "75b1b789dd6b3d3ad5c950a4911d49ed29a9cec4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75b1b789dd6b3d3ad5c950a4911d49ed29a9cec4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75b1b789dd6b3d3ad5c950a4911d49ed29a9cec4"}], "stats": {"total": 114, "additions": 106, "deletions": 8}, "files": [{"sha": "18832883b4b80367a2e5add9502d7e71c5bceeb0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f7dcae093c3ed596010a4bf88ce731a7d6236e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f7dcae093c3ed596010a4bf88ce731a7d6236e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=36f7dcae093c3ed596010a4bf88ce731a7d6236e", "patch": "@@ -1,3 +1,15 @@\n+2007-02-03  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30514\n+\t* array.c (match_array_element_spec): If the length of an array is\n+\tnegative, adjust the upper limit to make it zero length.\n+\n+\tPR fortran/30660\n+\t* resolve.c (pure_function, resolve_function): Initialize name to\n+\tnull to clear up build warnings.\n+\t(resolve_fl_variable): Look at components explicitly to check for\n+\tdefault initializer, rather than using gfc_default_initializer.\n+\n 2007-02-02  Steven G. Kargl <kargl@gcc.gnu.org>\n \n \tPR fortran/30683"}, {"sha": "895bccc14d108959a6534a366fbd9e9a4b870f1d", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f7dcae093c3ed596010a4bf88ce731a7d6236e/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f7dcae093c3ed596010a4bf88ce731a7d6236e/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=36f7dcae093c3ed596010a4bf88ce731a7d6236e", "patch": "@@ -319,6 +319,15 @@ match_array_element_spec (gfc_array_spec *as)\n   if (m == MATCH_NO)\n     return AS_ASSUMED_SHAPE;\n \n+  /* If the size is negative in this dimension, set it to zero.  */\n+  if ((*lower)->expr_type == EXPR_CONSTANT\n+      && (*upper)->expr_type == EXPR_CONSTANT\n+      && mpz_cmp ((*upper)->value.integer, (*lower)->value.integer) < 0)\n+    {\n+      gfc_free_expr (*upper);\n+      *upper = gfc_copy_expr (*lower);\n+      mpz_sub_ui ((*upper)->value.integer, (*upper)->value.integer, 1);\n+    }\n   return AS_EXPLICIT;\n }\n "}, {"sha": "84d42ee34f30b6e849d9be0ef0d668834d168c75", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f7dcae093c3ed596010a4bf88ce731a7d6236e/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f7dcae093c3ed596010a4bf88ce731a7d6236e/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=36f7dcae093c3ed596010a4bf88ce731a7d6236e", "patch": "@@ -1487,6 +1487,8 @@ pure_function (gfc_expr *e, const char **name)\n {\n   int pure;\n \n+  *name = NULL;\n+\n   if (e->symtree != NULL\n         && e->symtree->n.sym != NULL\n         && e->symtree->n.sym->attr.proc == PROC_ST_FUNCTION)\n@@ -1663,6 +1665,7 @@ resolve_function (gfc_expr *expr)\n #undef GENERIC_ID\n \n   need_full_assumed_size = temp;\n+  name = NULL;\n \n   if (!pure_function (expr, &name) && name)\n     {\n@@ -5534,7 +5537,7 @@ resolve_fl_variable (gfc_symbol *sym, int mp_flag)\n   int flag;\n   int i;\n   gfc_expr *e;\n-  gfc_expr *constructor_expr;\n+  gfc_component *c;\n   const char *auto_save_msg;\n \n   auto_save_msg = \"automatic object '%s' at %L cannot have the \"\n@@ -5668,18 +5671,21 @@ resolve_fl_variable (gfc_symbol *sym, int mp_flag)\n \t}\n     }\n \n+  /* Do not use gfc_default_initializer to test for a default initializer\n+     in the fortran because it generates a hidden default for allocatable\n+     components.  */\n+  c = NULL;\n+  if (sym->ts.type == BT_DERIVED && !(sym->value || flag))\n+    for (c = sym->ts.derived->components; c; c = c->next)\n+      if (c->initializer)\n+      break;\n+\n   /* 4th constraint in section 11.3:  \"If an object of a type for which\n      component-initialization is specified (R429) appears in the\n      specification-part of a module and does not have the ALLOCATABLE\n      or POINTER attribute, the object shall have the SAVE attribute.\"  */\n-\n-  constructor_expr = NULL;\n-  if (sym->ts.type == BT_DERIVED && !(sym->value || flag))\n-    constructor_expr = gfc_default_initializer (&sym->ts);\n-\n-  if (sym->ns->proc_name\n+  if (c && sym->ns->proc_name\n       && sym->ns->proc_name->attr.flavor == FL_MODULE\n-      && constructor_expr\n       && !sym->ns->save_all && !sym->attr.save\n       && !sym->attr.pointer && !sym->attr.allocatable)\n     {"}, {"sha": "89c44414f1b0f2048a1bb8ebb67eabfa6c479172", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f7dcae093c3ed596010a4bf88ce731a7d6236e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f7dcae093c3ed596010a4bf88ce731a7d6236e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36f7dcae093c3ed596010a4bf88ce731a7d6236e", "patch": "@@ -1,3 +1,15 @@\n+2007-02-03  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30514\n+\t* gfortran.dg/zero_sized_2.f90: New test.\n+\n+\tPR fortran/30660\n+\t* gfortran.dg/alloc_comp_basics_4.f90: New test.\n+\n+\tPR fortran/29820\n+\t* gfortran.dg/actual_array_interface_1.f90: Copy source to empty\n+\tfile.\n+\n 2007-02-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/30683"}, {"sha": "bc020a3468a4c6ba590f1f7213e2b918dd7e1977", "filename": "gcc/testsuite/gfortran.dg/actual_array_interface_1.f90", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f7dcae093c3ed596010a4bf88ce731a7d6236e/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_interface_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f7dcae093c3ed596010a4bf88ce731a7d6236e/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_interface_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_interface_1.f90?ref=36f7dcae093c3ed596010a4bf88ce731a7d6236e", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+! Tests the fix for PR29490, in which the creation of the\n+! interface expression for the first argument of the call to\n+! 'john' would cause an ICE because GFC_TYPE_ARRAY_LBOUND\n+! was NULL.\n+!\n+! Contributed by Philip Mason <pmason@ricardo.com>\n+!\n+  !---------------------------------\n+  program fred\n+  !---------------------------------\n+  real              :: dezz(1:10)\n+  real, allocatable :: jack(:)\n+  !\n+  allocate(jack(10)); jack = 9.\n+  dezz = john(jack,1)\n+  print*,'dezz = ',dezz\n+\n+  contains\n+    !---------------------------------\n+    function john(t,il)\n+    !---------------------------------\n+    real  :: t(il:)\n+    real  :: john(1:10)\n+    john = 10.\n+    end function john\n+  end"}, {"sha": "c910b708bd3f2f405ea58b4d8ec3024d44b6c0e2", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_basics_4.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f7dcae093c3ed596010a4bf88ce731a7d6236e/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f7dcae093c3ed596010a4bf88ce731a7d6236e/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_4.f90?ref=36f7dcae093c3ed596010a4bf88ce731a7d6236e", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! Tests the fix for PR30660 in which gfortran insisted that g_dest\n+! should have the SAVE attribute because the hidden default\n+! initializer for the allocatable component was being detected.\n+!\n+! Contributed by Toon Moene <toon@moene.indiv.nluug.nl>\n+!\n+MODULE types_m\n+  TYPE grib_t\n+    REAL,DIMENSION(:),ALLOCATABLE :: vdata\n+  END TYPE\n+END MODULE\n+\n+MODULE globals_m\n+  USE types_m\n+  TYPE(grib_t) g_dest           ! output field\n+END MODULE\n+! { dg-final { cleanup-modules \"types_m globals_m\" } }\n+"}, {"sha": "eda2de226733496caa72eccf938e8c851b7bc15f", "filename": "gcc/testsuite/gfortran.dg/zero_sized_2.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f7dcae093c3ed596010a4bf88ce731a7d6236e/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f7dcae093c3ed596010a4bf88ce731a7d6236e/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_2.f90?ref=36f7dcae093c3ed596010a4bf88ce731a7d6236e", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! Tests the fix for PR30514 in which the bounds on m would cause an\n+! error and the rest would cause the compiler to go into an infinite\n+! loop.\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+!\n+integer :: i(2:0), j(1:0), m(1:-1)\n+integer, parameter :: k(2:0) = 0, l(1:0) = 0\n+i = k\n+j = l\n+m = 5\n+end\n+"}]}