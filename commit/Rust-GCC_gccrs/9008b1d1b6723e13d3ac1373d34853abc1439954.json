{"sha": "9008b1d1b6723e13d3ac1373d34853abc1439954", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAwOGIxZDFiNjcyM2UxM2QzYWMxMzczZDM0ODUzYWJjMTQzOTk1NA==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-05-07T10:20:54Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-05-07T10:20:54Z"}, "message": "Add execution + assembler tests of AArch64 TRN Intrinsics.\n\n\t* gcc.target/aarch64/simd/vtrnf32_1.c: New file.\n\t* gcc.target/aarch64/simd/vtrnf32.x: New file.\n\t* gcc.target/aarch64/simd/vtrnp16_1.c: New file.\n\t* gcc.target/aarch64/simd/vtrnp16.x: New file.\n\t* gcc.target/aarch64/simd/vtrnp8_1.c: New file.\n\t* gcc.target/aarch64/simd/vtrnp8.x: New file.\n\t* gcc.target/aarch64/simd/vtrnqf32_1.c: New file.\n\t* gcc.target/aarch64/simd/vtrnqf32.x: New file.\n\t* gcc.target/aarch64/simd/vtrnqp16_1.c: New file.\n\t* gcc.target/aarch64/simd/vtrnqp16.x: New file.\n\t* gcc.target/aarch64/simd/vtrnqp8_1.c: New file.\n\t* gcc.target/aarch64/simd/vtrnqp8.x: New file.\n\t* gcc.target/aarch64/simd/vtrnqs16_1.c: New file.\n\t* gcc.target/aarch64/simd/vtrnqs16.x: New file.\n\t* gcc.target/aarch64/simd/vtrnqs32_1.c: New file.\n\t* gcc.target/aarch64/simd/vtrnqs32.x: New file.\n\t* gcc.target/aarch64/simd/vtrnqs8_1.c: New file.\n\t* gcc.target/aarch64/simd/vtrnqs8.x: New file.\n\t* gcc.target/aarch64/simd/vtrnqu16_1.c: New file.\n\t* gcc.target/aarch64/simd/vtrnqu16.x: New file.\n\t* gcc.target/aarch64/simd/vtrnqu32_1.c: New file.\n\t* gcc.target/aarch64/simd/vtrnqu32.x: New file.\n\t* gcc.target/aarch64/simd/vtrnqu8_1.c: New file.\n\t* gcc.target/aarch64/simd/vtrnqu8.x: New file.\n\t* gcc.target/aarch64/simd/vtrns16_1.c: New file.\n\t* gcc.target/aarch64/simd/vtrns16.x: New file.\n\t* gcc.target/aarch64/simd/vtrns32_1.c: New file.\n\t* gcc.target/aarch64/simd/vtrns32.x: New file.\n\t* gcc.target/aarch64/simd/vtrns8_1.c: New file.\n\t* gcc.target/aarch64/simd/vtrns8.x: New file.\n\t* gcc.target/aarch64/simd/vtrnu16_1.c: New file.\n\t* gcc.target/aarch64/simd/vtrnu16.x: New file.\n\t* gcc.target/aarch64/simd/vtrnu32_1.c: New file.\n\t* gcc.target/aarch64/simd/vtrnu32.x: New file.\n\t* gcc.target/aarch64/simd/vtrnu8_1.c: New file.\n\t* gcc.target/aarch64/simd/vtrnu8.x: New file.\n\nFrom-SVN: r210148", "tree": {"sha": "a1a42429d883677abd31e1f623115516b35ef4ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1a42429d883677abd31e1f623115516b35ef4ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9008b1d1b6723e13d3ac1373d34853abc1439954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9008b1d1b6723e13d3ac1373d34853abc1439954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9008b1d1b6723e13d3ac1373d34853abc1439954", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9008b1d1b6723e13d3ac1373d34853abc1439954/comments", "author": null, "committer": null, "parents": [{"sha": "9c13483b14af847e3f3d1753519db25b4ae77fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c13483b14af847e3f3d1753519db25b4ae77fb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c13483b14af847e3f3d1753519db25b4ae77fb6"}], "stats": {"total": 726, "additions": 726, "deletions": 0}, "files": [{"sha": "936a5b21c8b5dd7534a6c8651fd899c3884c08fa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -1,3 +1,42 @@\n+2014-05-07  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vtrnf32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vtrnf32.x: New file.\n+\t* gcc.target/aarch64/simd/vtrnp16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vtrnp16.x: New file.\n+\t* gcc.target/aarch64/simd/vtrnp8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vtrnp8.x: New file.\n+\t* gcc.target/aarch64/simd/vtrnqf32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vtrnqf32.x: New file.\n+\t* gcc.target/aarch64/simd/vtrnqp16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vtrnqp16.x: New file.\n+\t* gcc.target/aarch64/simd/vtrnqp8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vtrnqp8.x: New file.\n+\t* gcc.target/aarch64/simd/vtrnqs16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vtrnqs16.x: New file.\n+\t* gcc.target/aarch64/simd/vtrnqs32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vtrnqs32.x: New file.\n+\t* gcc.target/aarch64/simd/vtrnqs8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vtrnqs8.x: New file.\n+\t* gcc.target/aarch64/simd/vtrnqu16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vtrnqu16.x: New file.\n+\t* gcc.target/aarch64/simd/vtrnqu32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vtrnqu32.x: New file.\n+\t* gcc.target/aarch64/simd/vtrnqu8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vtrnqu8.x: New file.\n+\t* gcc.target/aarch64/simd/vtrns16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vtrns16.x: New file.\n+\t* gcc.target/aarch64/simd/vtrns32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vtrns32.x: New file.\n+\t* gcc.target/aarch64/simd/vtrns8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vtrns8.x: New file.\n+\t* gcc.target/aarch64/simd/vtrnu16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vtrnu16.x: New file.\n+\t* gcc.target/aarch64/simd/vtrnu32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vtrnu32.x: New file.\n+\t* gcc.target/aarch64/simd/vtrnu8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vtrnu8.x: New file.\n+\n 2014-05-07  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/57864"}, {"sha": "7b03e6b67bdc8dc48b0285de16c07d5bd61dcde4", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnf32.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnf32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnf32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnf32.x?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+float32x2x2_t\n+test_vtrnf32 (float32x2_t _a, float32x2_t _b)\n+{\n+  return vtrn_f32 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  float32_t first[] = {1, 2};\n+  float32_t second[] = {3, 4};\n+  float32x2x2_t result = test_vtrnf32 (vld1_f32 (first), vld1_f32 (second));\n+  float32x2_t res1 = result.val[0], res2 = result.val[1];\n+  float32_t exp1[] = {1, 3};\n+  float32_t exp2[] = {2, 4};\n+  float32x2_t expected1 = vld1_f32 (exp1);\n+  float32x2_t expected2 = vld1_f32 (exp2);\n+\n+  for (i = 0; i < 2; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "24c30a34977e2696dc8e1ac0941b6072262a4a3f", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnf32_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnf32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnf32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnf32_1.c?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vtrn_f32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vtrnf32.x\"\n+\n+/* { dg-final { scan-assembler-times \"trn1\\[ \\t\\]+v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"trn2\\[ \\t\\]+v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "5feabe43018f44eea71e2dae46afbe142b9ac313", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnp16.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnp16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnp16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnp16.x?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+poly16x4x2_t\n+test_vtrnp16 (poly16x4_t _a, poly16x4_t _b)\n+{\n+  return vtrn_p16 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly16_t first[] = {1, 2, 3, 4};\n+  poly16_t second[] = {5, 6, 7, 8};\n+  poly16x4x2_t result = test_vtrnp16 (vld1_p16 (first), vld1_p16 (second));\n+  poly16x4_t res1 = result.val[0], res2 = result.val[1];\n+  poly16_t exp1[] = {1, 5, 3, 7};\n+  poly16_t exp2[] = {2, 6, 4, 8};\n+  poly16x4_t expected1 = vld1_p16 (exp1);\n+  poly16x4_t expected2 = vld1_p16 (exp2);\n+\n+  for (i = 0; i < 4; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "b6851266e26a271fcd7cbeddacb88f6070727335", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnp16_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnp16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnp16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnp16_1.c?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vtrn_p16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vtrnp16.x\"\n+\n+/* { dg-final { scan-assembler-times \"trn1\\[ \\t\\]+v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"trn2\\[ \\t\\]+v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "68309c6c557477fb84439a149b99c5d2b08e1791", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnp8.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnp8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnp8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnp8.x?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+poly8x8x2_t\n+test_vtrnp8 (poly8x8_t _a, poly8x8_t _b)\n+{\n+  return vtrn_p8 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly8_t first[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  poly8_t second[] = {9, 10, 11, 12, 13, 14, 15, 16};\n+  poly8x8x2_t result = test_vtrnp8 (vld1_p8 (first), vld1_p8 (second));\n+  poly8x8_t res1 = result.val[0], res2 = result.val[1];\n+  poly8_t exp1[] = {1, 9, 3, 11, 5, 13, 7, 15};\n+  poly8_t exp2[] = {2, 10, 4, 12, 6, 14, 8, 16};\n+  poly8x8_t expected1 = vld1_p8 (exp1);\n+  poly8x8_t expected2 = vld1_p8 (exp2);\n+\n+  for (i = 0; i < 8; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "236c9bbb79760d2743f9343c9f006b1b79b0c9d6", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnp8_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnp8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnp8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnp8_1.c?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vtrn_p8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vtrnp8.x\"\n+\n+/* { dg-final { scan-assembler-times \"trn1\\[ \\t\\]+v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"trn2\\[ \\t\\]+v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "1a2fa2647e9ede4553b5b5585dadfb2861af5d10", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnqf32.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqf32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqf32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqf32.x?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+float32x4x2_t\n+test_vtrnqf32 (float32x4_t _a, float32x4_t _b)\n+{\n+  return vtrnq_f32 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  float32_t first[] = {1, 2, 3, 4};\n+  float32_t second[] = {5, 6, 7, 8};\n+  float32x4x2_t result = test_vtrnqf32 (vld1q_f32 (first), vld1q_f32 (second));\n+  float32x4_t res1 = result.val[0], res2 = result.val[1];\n+  float32_t exp1[] = {1, 5, 3, 7};\n+  float32_t exp2[] = {2, 6, 4, 8};\n+  float32x4_t expected1 = vld1q_f32 (exp1);\n+  float32x4_t expected2 = vld1q_f32 (exp2);\n+\n+  for (i = 0; i < 4; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "100b3f30b057df832fae14bb373e93f3c10917db", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnqf32_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqf32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqf32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqf32_1.c?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vtrnq_f32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vtrnqf32.x\"\n+\n+/* { dg-final { scan-assembler-times \"trn1\\[ \\t\\]+v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"trn2\\[ \\t\\]+v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "55a2204407d072704754530d9dfe415f9c1f5e5b", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnqp16.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqp16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqp16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqp16.x?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+poly16x8x2_t\n+test_vtrnqp16 (poly16x8_t _a, poly16x8_t _b)\n+{\n+  return vtrnq_p16 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly16_t first[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  poly16_t second[] = {9, 10, 11, 12, 13, 14, 15, 16};\n+  poly16x8x2_t result = test_vtrnqp16 (vld1q_p16 (first), vld1q_p16 (second));\n+  poly16x8_t res1 = result.val[0], res2 = result.val[1];\n+  poly16_t exp1[] = {1, 9, 3, 11, 5, 13, 7, 15};\n+  poly16_t exp2[] = {2, 10, 4, 12, 6, 14, 8, 16};\n+  poly16x8_t expected1 = vld1q_p16 (exp1);\n+  poly16x8_t expected2 = vld1q_p16 (exp2);\n+\n+  for (i = 0; i < 8; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "6f25784925f0efa31902d8d0eaa9fbd7cc8b2457", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnqp16_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqp16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqp16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqp16_1.c?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vtrnq_p16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vtrnqp16.x\"\n+\n+/* { dg-final { scan-assembler-times \"trn1\\[ \\t\\]+v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"trn2\\[ \\t\\]+v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d3f8cb1260597601d9aaeed1360f1220cc1ac186", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnqp8.x", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqp8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqp8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqp8.x?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,28 @@\n+extern void abort (void);\n+\n+poly8x16x2_t\n+test_vtrnqp8 (poly8x16_t _a, poly8x16_t _b)\n+{\n+  return vtrnq_p8 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly8_t first[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+  poly8_t second[] =\n+      {17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};\n+  poly8x16x2_t result = test_vtrnqp8 (vld1q_p8 (first), vld1q_p8 (second));\n+  poly8x16_t res1 = result.val[0], res2 = result.val[1];\n+  poly8_t exp1[] = {1, 17, 3, 19, 5, 21, 7, 23, 9, 25, 11, 27, 13, 29, 15, 31};\n+  poly8_t exp2[] = {2, 18, 4, 20, 6, 22, 8, 24, 10, 26, 12, 28, 14, 30, 16, 32};\n+  poly8x16_t expected1 = vld1q_p8 (exp1);\n+  poly8x16_t expected2 = vld1q_p8 (exp2);\n+\n+  for (i = 0; i < 16; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "6247989e4b3f629a4946db474c56b71fdca85ee9", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnqp8_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqp8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqp8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqp8_1.c?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vtrnq_p8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vtrnqp8.x\"\n+\n+/* { dg-final { scan-assembler-times \"trn1\\[ \\t\\]+v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"trn2\\[ \\t\\]+v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "17b2db881a5a1dc464dd0f276cb5f25c5ef79ea0", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnqs16.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqs16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqs16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqs16.x?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+int16x8x2_t\n+test_vtrnqs16 (int16x8_t _a, int16x8_t _b)\n+{\n+  return vtrnq_s16 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int16_t first[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  int16_t second[] = {9, 10, 11, 12, 13, 14, 15, 16};\n+  int16x8x2_t result = test_vtrnqs16 (vld1q_s16 (first), vld1q_s16 (second));\n+  int16x8_t res1 = result.val[0], res2 = result.val[1];\n+  int16_t exp1[] = {1, 9, 3, 11, 5, 13, 7, 15};\n+  int16_t exp2[] = {2, 10, 4, 12, 6, 14, 8, 16};\n+  int16x8_t expected1 = vld1q_s16 (exp1);\n+  int16x8_t expected2 = vld1q_s16 (exp2);\n+\n+  for (i = 0; i < 8; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "8ebf4274572f4fd639680817f5f5a97f40b66549", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnqs16_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqs16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqs16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqs16_1.c?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vtrnq_s16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vtrnqs16.x\"\n+\n+/* { dg-final { scan-assembler-times \"trn1\\[ \\t\\]+v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"trn2\\[ \\t\\]+v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "06178f49ff6d52471deb0b18da32688ccb3d27fa", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnqs32.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqs32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqs32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqs32.x?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+int32x4x2_t\n+test_vtrnqs32 (int32x4_t _a, int32x4_t _b)\n+{\n+  return vtrnq_s32 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int32_t first[] = {1, 2, 3, 4};\n+  int32_t second[] = {5, 6, 7, 8};\n+  int32x4x2_t result = test_vtrnqs32 (vld1q_s32 (first), vld1q_s32 (second));\n+  int32x4_t res1 = result.val[0], res2 = result.val[1];\n+  int32_t exp1[] = {1, 5, 3, 7};\n+  int32_t exp2[] = {2, 6, 4, 8};\n+  int32x4_t expected1 = vld1q_s32 (exp1);\n+  int32x4_t expected2 = vld1q_s32 (exp2);\n+\n+  for (i = 0; i < 4; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "a95d32e2b84bad283e31e04e8b9777cfe9324a8f", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnqs32_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqs32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqs32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqs32_1.c?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vtrnq_s32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vtrnqs32.x\"\n+\n+/* { dg-final { scan-assembler-times \"trn1\\[ \\t\\]+v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"trn2\\[ \\t\\]+v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "138b202641301dcfc4dbb6930a452265d9ded63a", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnqs8.x", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqs8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqs8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqs8.x?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,28 @@\n+extern void abort (void);\n+\n+int8x16x2_t\n+test_vtrnqs8 (int8x16_t _a, int8x16_t _b)\n+{\n+  return vtrnq_s8 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int8_t first[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+  int8_t second[] =\n+      {17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};\n+  int8x16x2_t result = test_vtrnqs8 (vld1q_s8 (first), vld1q_s8 (second));\n+  int8x16_t res1 = result.val[0], res2 = result.val[1];\n+  int8_t exp1[] = {1, 17, 3, 19, 5, 21, 7, 23, 9, 25, 11, 27, 13, 29, 15, 31};\n+  int8_t exp2[] = {2, 18, 4, 20, 6, 22, 8, 24, 10, 26, 12, 28, 14, 30, 16, 32};\n+  int8x16_t expected1 = vld1q_s8 (exp1);\n+  int8x16_t expected2 = vld1q_s8 (exp2);\n+\n+  for (i = 0; i < 16; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "61a76ded94a623296bf367cbec6746a8c64be61b", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnqs8_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqs8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqs8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqs8_1.c?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vtrnq_s8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vtrnqs8.x\"\n+\n+/* { dg-final { scan-assembler-times \"trn1\\[ \\t\\]+v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"trn2\\[ \\t\\]+v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "9f4969d489511b440f7e0dfd3bc141e88825d8bf", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnqu16.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqu16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqu16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqu16.x?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+uint16x8x2_t\n+test_vtrnqu16 (uint16x8_t _a, uint16x8_t _b)\n+{\n+  return vtrnq_u16 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint16_t first[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  uint16_t second[] = {9, 10, 11, 12, 13, 14, 15, 16};\n+  uint16x8x2_t result = test_vtrnqu16 (vld1q_u16 (first), vld1q_u16 (second));\n+  uint16x8_t res1 = result.val[0], res2 = result.val[1];\n+  uint16_t exp1[] = {1, 9, 3, 11, 5, 13, 7, 15};\n+  uint16_t exp2[] = {2, 10, 4, 12, 6, 14, 8, 16};\n+  uint16x8_t expected1 = vld1q_u16 (exp1);\n+  uint16x8_t expected2 = vld1q_u16 (exp2);\n+\n+  for (i = 0; i < 8; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "5bb63abeac6b53784197fa557c77cdcf713bbcdd", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnqu16_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqu16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqu16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqu16_1.c?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vtrnq_u16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vtrnqu16.x\"\n+\n+/* { dg-final { scan-assembler-times \"trn1\\[ \\t\\]+v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"trn2\\[ \\t\\]+v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "9ef206b5f3c1ecc3d450ff1204dfd0a88fcc46a5", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnqu32.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqu32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqu32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqu32.x?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+uint32x4x2_t\n+test_vtrnqu32 (uint32x4_t _a, uint32x4_t _b)\n+{\n+  return vtrnq_u32 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint32_t first[] = {1, 2, 3, 4};\n+  uint32_t second[] = {5, 6, 7, 8};\n+  uint32x4x2_t result = test_vtrnqu32 (vld1q_u32 (first), vld1q_u32 (second));\n+  uint32x4_t res1 = result.val[0], res2 = result.val[1];\n+  uint32_t exp1[] = {1, 5, 3, 7};\n+  uint32_t exp2[] = {2, 6, 4, 8};\n+  uint32x4_t expected1 = vld1q_u32 (exp1);\n+  uint32x4_t expected2 = vld1q_u32 (exp2);\n+\n+  for (i = 0; i < 4; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "4cc0d2d31acaafbb9b983c37240cfe7327b52294", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnqu32_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqu32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqu32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqu32_1.c?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vtrnq_u32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vtrnqu32.x\"\n+\n+/* { dg-final { scan-assembler-times \"trn1\\[ \\t\\]+v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"trn2\\[ \\t\\]+v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7b708341d1d56bc52ece9e6b86917d0d0445a368", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnqu8.x", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqu8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqu8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqu8.x?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,28 @@\n+extern void abort (void);\n+\n+uint8x16x2_t\n+test_vtrnqu8 (uint8x16_t _a, uint8x16_t _b)\n+{\n+  return vtrnq_u8 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint8_t first[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+  uint8_t second[] =\n+      {17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};\n+  uint8x16x2_t result = test_vtrnqu8 (vld1q_u8 (first), vld1q_u8 (second));\n+  uint8x16_t res1 = result.val[0], res2 = result.val[1];\n+  uint8_t exp1[] = {1, 17, 3, 19, 5, 21, 7, 23, 9, 25, 11, 27, 13, 29, 15, 31};\n+  uint8_t exp2[] = {2, 18, 4, 20, 6, 22, 8, 24, 10, 26, 12, 28, 14, 30, 16, 32};\n+  uint8x16_t expected1 = vld1q_u8 (exp1);\n+  uint8x16_t expected2 = vld1q_u8 (exp2);\n+\n+  for (i = 0; i < 16; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "b879e9308c43e547c7a5f75bdb6d14f4c2266ec0", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnqu8_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqu8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqu8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnqu8_1.c?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vtrnq_u8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vtrnqu8.x\"\n+\n+/* { dg-final { scan-assembler-times \"trn1\\[ \\t\\]+v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"trn2\\[ \\t\\]+v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "868404ab846be33bc8e7915387ff40ed1d50ae72", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrns16.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrns16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrns16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrns16.x?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+int16x4x2_t\n+test_vtrns16 (int16x4_t _a, int16x4_t _b)\n+{\n+  return vtrn_s16 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int16_t first[] = {1, 2, 3, 4};\n+  int16_t second[] = {5, 6, 7, 8};\n+  int16x4x2_t result = test_vtrns16 (vld1_s16 (first), vld1_s16 (second));\n+  int16x4_t res1 = result.val[0], res2 = result.val[1];\n+  int16_t exp1[] = {1, 5, 3, 7};\n+  int16_t exp2[] = {2, 6, 4, 8};\n+  int16x4_t expected1 = vld1_s16 (exp1);\n+  int16x4_t expected2 = vld1_s16 (exp2);\n+\n+  for (i = 0; i < 4; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "ff7013d74eeadfdcf4badcfd60848c8975edc9b2", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrns16_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrns16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrns16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrns16_1.c?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vtrn_s16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vtrns16.x\"\n+\n+/* { dg-final { scan-assembler-times \"trn1\\[ \\t\\]+v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"trn2\\[ \\t\\]+v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "bf168d04076e42a536472e165ef005f893e3527f", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrns32.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrns32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrns32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrns32.x?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+int32x2x2_t\n+test_vtrns32 (int32x2_t _a, int32x2_t _b)\n+{\n+  return vtrn_s32 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int32_t first[] = {1, 2};\n+  int32_t second[] = {3, 4};\n+  int32x2x2_t result = test_vtrns32 (vld1_s32 (first), vld1_s32 (second));\n+  int32x2_t res1 = result.val[0], res2 = result.val[1];\n+  int32_t exp1[] = {1, 3};\n+  int32_t exp2[] = {2, 4};\n+  int32x2_t expected1 = vld1_s32 (exp1);\n+  int32x2_t expected2 = vld1_s32 (exp2);\n+\n+  for (i = 0; i < 2; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "0a9256c2c8d3088f728db516819cba92022d916c", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrns32_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrns32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrns32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrns32_1.c?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vtrn_s32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vtrns32.x\"\n+\n+/* { dg-final { scan-assembler-times \"trn1\\[ \\t\\]+v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"trn2\\[ \\t\\]+v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "1f9da72f06f9ed2d93f00fbea5773886293bbde4", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrns8.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrns8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrns8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrns8.x?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+int8x8x2_t\n+test_vtrns8 (int8x8_t _a, int8x8_t _b)\n+{\n+  return vtrn_s8 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int8_t first[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  int8_t second[] = {9, 10, 11, 12, 13, 14, 15, 16};\n+  int8x8x2_t result = test_vtrns8 (vld1_s8 (first), vld1_s8 (second));\n+  int8x8_t res1 = result.val[0], res2 = result.val[1];\n+  int8_t exp1[] = {1, 9, 3, 11, 5, 13, 7, 15};\n+  int8_t exp2[] = {2, 10, 4, 12, 6, 14, 8, 16};\n+  int8x8_t expected1 = vld1_s8 (exp1);\n+  int8x8_t expected2 = vld1_s8 (exp2);\n+\n+  for (i = 0; i < 8; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "787dc5ec533819577446882e45edf9f232be4e5c", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrns8_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrns8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrns8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrns8_1.c?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vtrn_s8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vtrns8.x\"\n+\n+/* { dg-final { scan-assembler-times \"trn1\\[ \\t\\]+v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"trn2\\[ \\t\\]+v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "a84f555a6459c8647c0eafc06aaf129f714853b4", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnu16.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnu16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnu16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnu16.x?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+uint16x4x2_t\n+test_vtrnu16 (uint16x4_t _a, uint16x4_t _b)\n+{\n+  return vtrn_u16 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint16_t first[] = {1, 2, 3, 4};\n+  uint16_t second[] = {5, 6, 7, 8};\n+  uint16x4x2_t result = test_vtrnu16 (vld1_u16 (first), vld1_u16 (second));\n+  uint16x4_t res1 = result.val[0], res2 = result.val[1];\n+  uint16_t exp1[] = {1, 5, 3, 7};\n+  uint16_t exp2[] = {2, 6, 4, 8};\n+  uint16x4_t expected1 = vld1_u16 (exp1);\n+  uint16x4_t expected2 = vld1_u16 (exp2);\n+\n+  for (i = 0; i < 4; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "12588cb73bcc5b20da7c65d1a661b9430c687f55", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnu16_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnu16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnu16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnu16_1.c?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vtrn_u16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vtrnu16.x\"\n+\n+/* { dg-final { scan-assembler-times \"trn1\\[ \\t\\]+v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"trn2\\[ \\t\\]+v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "5cde242cfe10d8aec2e885d86bb6ba1155434847", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnu32.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnu32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnu32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnu32.x?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+uint32x2x2_t\n+test_vtrnu32 (uint32x2_t _a, uint32x2_t _b)\n+{\n+  return vtrn_u32 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint32_t first[] = {1, 2};\n+  uint32_t second[] = {3, 4};\n+  uint32x2x2_t result = test_vtrnu32 (vld1_u32 (first), vld1_u32 (second));\n+  uint32x2_t res1 = result.val[0], res2 = result.val[1];\n+  uint32_t exp1[] = {1, 3};\n+  uint32_t exp2[] = {2, 4};\n+  uint32x2_t expected1 = vld1_u32 (exp1);\n+  uint32x2_t expected2 = vld1_u32 (exp2);\n+\n+  for (i = 0; i < 2; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "722a1d721c4d2397a8d208faf48f526a443c6ccf", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnu32_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnu32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnu32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnu32_1.c?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vtrn_u32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vtrnu32.x\"\n+\n+/* { dg-final { scan-assembler-times \"trn1\\[ \\t\\]+v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"trn2\\[ \\t\\]+v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "03dc89447c38a7d129804b900fb54f5110af34d2", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnu8.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnu8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnu8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnu8.x?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+uint8x8x2_t\n+test_vtrnu8 (uint8x8_t _a, uint8x8_t _b)\n+{\n+  return vtrn_u8 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint8_t first[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  uint8_t second[] = {9, 10, 11, 12, 13, 14, 15, 16};\n+  uint8x8x2_t result = test_vtrnu8 (vld1_u8 (first), vld1_u8 (second));\n+  uint8x8_t res1 = result.val[0], res2 = result.val[1];\n+  uint8_t exp1[] = {1, 9, 3, 11, 5, 13, 7, 15};\n+  uint8_t exp2[] = {2, 10, 4, 12, 6, 14, 8, 16};\n+  uint8x8_t expected1 = vld1_u8 (exp1);\n+  uint8x8_t expected2 = vld1_u8 (exp2);\n+\n+  for (i = 0; i < 8; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "303bde7dbf2d0dac7c51adaaa9353a977e826ca4", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vtrnu8_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnu8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9008b1d1b6723e13d3ac1373d34853abc1439954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnu8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvtrnu8_1.c?ref=9008b1d1b6723e13d3ac1373d34853abc1439954", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vtrn_u8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vtrnu8.x\"\n+\n+/* { dg-final { scan-assembler-times \"trn1\\[ \\t\\]+v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"trn2\\[ \\t\\]+v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}]}