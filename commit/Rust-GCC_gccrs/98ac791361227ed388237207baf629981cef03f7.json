{"sha": "98ac791361227ed388237207baf629981cef03f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThhYzc5MTM2MTIyN2VkMzg4MjM3MjA3YmFmNjI5OTgxY2VmMDNmNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-03T21:44:14Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-03T21:44:14Z"}, "message": "Allow the target to set MAX_BITSIZE_MODE_ANY_MODE\n\nThe default value of MAX_BITSIZE_MODE_ANY_MODE is calculated\nfrom the initial mode sizes specified in the modes.def file.\nThe target needs to be able to override it if ADJUST_BYTESIZE\n& co. can choose a bigger size.\n\n2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* doc/rtl.texi (MAX_BITSIZE_MODE_ANY_MODE): Describe how the default\n\tis calculated and how it can be overridden.\n\t* genmodes.c (max_bitsize_mode_any_mode): New variable.\n\t(create_modes): Initialize it from MAX_BITSIZE_MODE_ANY_MODE,\n\tif defined.\n\t(emit_max_int): Use it to set the output MAX_BITSIZE_MODE_ANY_MODE,\n\tif nonzero.\n\nFrom-SVN: r256206", "tree": {"sha": "521bcd60f3e27acee052bf20b4b04fd68e39abf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/521bcd60f3e27acee052bf20b4b04fd68e39abf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98ac791361227ed388237207baf629981cef03f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ac791361227ed388237207baf629981cef03f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ac791361227ed388237207baf629981cef03f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ac791361227ed388237207baf629981cef03f7/comments", "author": null, "committer": null, "parents": [{"sha": "b187677b4f275f33f181b9ca188bf0b009981cb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b187677b4f275f33f181b9ca188bf0b009981cb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b187677b4f275f33f181b9ca188bf0b009981cb1"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "afc18a8d2ce3c25b456ab6bca8b574517fa843cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ac791361227ed388237207baf629981cef03f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ac791361227ed388237207baf629981cef03f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98ac791361227ed388237207baf629981cef03f7", "patch": "@@ -1,3 +1,13 @@\n+2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* doc/rtl.texi (MAX_BITSIZE_MODE_ANY_MODE): Describe how the default\n+\tis calculated and how it can be overridden.\n+\t* genmodes.c (max_bitsize_mode_any_mode): New variable.\n+\t(create_modes): Initialize it from MAX_BITSIZE_MODE_ANY_MODE,\n+\tif defined.\n+\t(emit_max_int): Use it to set the output MAX_BITSIZE_MODE_ANY_MODE,\n+\tif nonzero.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "7b2d0bf21606fc7a88c1750eba67c0b2bb203885", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ac791361227ed388237207baf629981cef03f7/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ac791361227ed388237207baf629981cef03f7/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=98ac791361227ed388237207baf629981cef03f7", "patch": "@@ -1509,7 +1509,12 @@ compute integer values.\n \n @findex MAX_BITSIZE_MODE_ANY_MODE\n @item MAX_BITSIZE_MODE_ANY_MODE\n-The bitsize of the largest mode on the target.   \n+The bitsize of the largest mode on the target.  The default value is\n+the largest mode size given in the mode definition file, which is\n+always correct for targets whose modes have a fixed size.  Targets\n+that might increase the size of a mode beyond this default should define\n+@code{MAX_BITSIZE_MODE_ANY_MODE} to the actual upper limit in\n+@file{@var{machine}-modes.def}.\n @end table\n \n @findex byte_mode"}, {"sha": "a70f0967859b13a349c83086cde4527d2a3648e9", "filename": "gcc/genmodes.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ac791361227ed388237207baf629981cef03f7/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ac791361227ed388237207baf629981cef03f7/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=98ac791361227ed388237207baf629981cef03f7", "patch": "@@ -792,6 +792,7 @@ make_vector_mode (enum mode_class bclass,\n \n static int bits_per_unit;\n static int max_bitsize_mode_any_int;\n+static int max_bitsize_mode_any_mode;\n \n static void\n create_modes (void)\n@@ -811,6 +812,12 @@ create_modes (void)\n #else\n   max_bitsize_mode_any_int = 0;\n #endif\n+\n+#ifdef MAX_BITSIZE_MODE_ANY_MODE\n+  max_bitsize_mode_any_mode = MAX_BITSIZE_MODE_ANY_MODE;\n+#else\n+  max_bitsize_mode_any_mode = 0;\n+#endif\n }\n \n #ifndef NUM_POLY_INT_COEFFS\n@@ -989,12 +996,18 @@ emit_max_int (void)\n   else\n     printf (\"#define MAX_BITSIZE_MODE_ANY_INT %d\\n\", max_bitsize_mode_any_int);\n \n-  mmax = 0;\n-  for (j = 0; j < MAX_MODE_CLASS; j++)\n-    for (i = modes[j]; i; i = i->next)\n-      if (mmax < i->bytesize)\n-\tmmax = i->bytesize;\n-  printf (\"#define MAX_BITSIZE_MODE_ANY_MODE (%d*BITS_PER_UNIT)\\n\", mmax);\n+  if (max_bitsize_mode_any_mode == 0)\n+    {\n+      mmax = 0;\n+      for (j = 0; j < MAX_MODE_CLASS; j++)\n+\tfor (i = modes[j]; i; i = i->next)\n+\t  if (mmax < i->bytesize)\n+\t    mmax = i->bytesize;\n+      printf (\"#define MAX_BITSIZE_MODE_ANY_MODE (%d*BITS_PER_UNIT)\\n\", mmax);\n+    }\n+  else\n+    printf (\"#define MAX_BITSIZE_MODE_ANY_MODE %d\\n\",\n+\t    max_bitsize_mode_any_mode);\n }\n \n /* Emit mode_size_inline routine into insn-modes.h header.  */"}]}