{"sha": "842cbb738e7bb5e9b0fde75d7f792f036971d13c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQyY2JiNzM4ZTdiYjVlOWIwZmRlNzVkN2Y3OTJmMDM2OTcxZDEzYw==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-06-09T10:04:37Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-06-09T10:04:37Z"}, "message": "PR/61062 Fix arm_neon.h ZIP/UZP/TRN for bigendian.\n\ngcc/ChangeLog:\n\n\t* config/arm/arm_neon.h (vtrn_s8, vtrn_s16, vtrn_u8, vtrn_u16, vtrn_p8,\n\tvtrn_p16, vtrn_s32, vtrn_f32, vtrn_u32, vtrnq_s8, vtrnq_s16, vtrnq_s32,\n\tvtrnq_f32, vtrnq_u8, vtrnq_u16, vtrnq_u32, vtrnq_p8, vtrnq_p16, vzip_s8,\n\tvzip_s16, vzip_u8, vzip_u16, vzip_p8, vzip_p16, vzip_s32, vzip_f32,\n\tvzip_u32, vzipq_s8, vzipq_s16, vzipq_s32, vzipq_f32, vzipq_u8,\n\tvzipq_u16, vzipq_u32, vzipq_p8, vzipq_p16, vuzp_s8, vuzp_s16, vuzp_s32,\n\tvuzp_f32, vuzp_u8, vuzp_u16, vuzp_u32, vuzp_p8, vuzp_p16, vuzpq_s8,\n\tvuzpq_s16, vuzpq_s32, vuzpq_f32, vuzpq_u8, vuzpq_u16, vuzpq_u32,\n\tvuzpq_p8, vuzpq_p16): Correct mask for bigendian.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/pr48252.c (main): Expect same result as endian-neutral.\n\nFrom-SVN: r211369", "tree": {"sha": "d789ad715516a85593d8dd69bff15010878c5c04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d789ad715516a85593d8dd69bff15010878c5c04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/842cbb738e7bb5e9b0fde75d7f792f036971d13c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842cbb738e7bb5e9b0fde75d7f792f036971d13c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/842cbb738e7bb5e9b0fde75d7f792f036971d13c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842cbb738e7bb5e9b0fde75d7f792f036971d13c/comments", "author": null, "committer": null, "parents": [{"sha": "8f44990250f458c849ba2cffefc86505c3491f84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f44990250f458c849ba2cffefc86505c3491f84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f44990250f458c849ba2cffefc86505c3491f84"}], "stats": {"total": 636, "additions": 517, "deletions": 119}, "files": [{"sha": "ef49127e02169096f2c7e2f8d7b90a795d2096b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842cbb738e7bb5e9b0fde75d7f792f036971d13c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842cbb738e7bb5e9b0fde75d7f792f036971d13c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=842cbb738e7bb5e9b0fde75d7f792f036971d13c", "patch": "@@ -1,3 +1,16 @@\n+2014-06-09  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\tPR target/61062\n+\t* config/arm/arm_neon.h (vtrn_s8, vtrn_s16, vtrn_u8, vtrn_u16, vtrn_p8,\n+\tvtrn_p16, vtrn_s32, vtrn_f32, vtrn_u32, vtrnq_s8, vtrnq_s16, vtrnq_s32,\n+\tvtrnq_f32, vtrnq_u8, vtrnq_u16, vtrnq_u32, vtrnq_p8, vtrnq_p16, vzip_s8,\n+\tvzip_s16, vzip_u8, vzip_u16, vzip_p8, vzip_p16, vzip_s32, vzip_f32,\n+\tvzip_u32, vzipq_s8, vzipq_s16, vzipq_s32, vzipq_f32, vzipq_u8,\n+\tvzipq_u16, vzipq_u32, vzipq_p8, vzipq_p16, vuzp_s8, vuzp_s16, vuzp_s32,\n+\tvuzp_f32, vuzp_u8, vuzp_u16, vuzp_u32, vuzp_p8, vuzp_p16, vuzpq_s8,\n+\tvuzpq_s16, vuzpq_s32, vuzpq_f32, vuzpq_u8, vuzpq_u16, vuzpq_u32,\n+\tvuzpq_p8, vuzpq_p16): Correct mask for bigendian.\n+\n 2014-06-09  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-core.h (tree_decl_with_vis): Remove section_name."}, {"sha": "3e29f44c576624152784ece6fd2022a156583547", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 497, "deletions": 108, "changes": 605, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842cbb738e7bb5e9b0fde75d7f792f036971d13c/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842cbb738e7bb5e9b0fde75d7f792f036971d13c/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=842cbb738e7bb5e9b0fde75d7f792f036971d13c", "patch": "@@ -7731,489 +7731,878 @@ vbslq_p16 (uint16x8_t __a, poly16x8_t __b, poly16x8_t __c)\n   return (poly16x8_t)__builtin_neon_vbslv8hi ((int16x8_t) __a, (int16x8_t) __b, (int16x8_t) __c);\n }\n \n+/* For big-endian, the shuffle masks for ZIP, UZP and TRN must be changed as\n+   follows. (nelt = the number of elements within a vector.)\n+\n+   Firstly, a value of N within a mask, becomes (N ^ (nelt - 1)), as gcc vector\n+   extension's indexing scheme is reversed *within each vector* (relative to the\n+   neon intrinsics view), but without changing which of the two vectors.\n+\n+   Secondly, the elements within each mask are reversed, as the mask is itself a\n+   vector, and will itself be loaded in reverse order (again, relative to the\n+   neon intrinsics view, i.e. that would result from a \"vld1\" instruction).  */\n+\n __extension__ static __inline int8x8x2_t __attribute__ ((__always_inline__))\n vtrn_s8 (int8x8_t __a, int8x8_t __b)\n {\n   int8x8x2_t __rv;\n-  __rv.val[0] = (int8x8_t) __builtin_shuffle (__a, __b, (uint8x8_t) { 0, 8, 2, 10, 4, 12, 6, 14 });\n-  __rv.val[1] = (int8x8_t) __builtin_shuffle (__a, __b, (uint8x8_t) { 1, 9, 3, 11, 5, 13, 7, 15 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 9, 1, 11, 3, 13, 5, 15, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 8, 0, 10, 2, 12, 4, 14, 6 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 0, 8, 2, 10, 4, 12, 6, 14 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 1, 9, 3, 11, 5, 13, 7, 15 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline int16x4x2_t __attribute__ ((__always_inline__))\n vtrn_s16 (int16x4_t __a, int16x4_t __b)\n {\n   int16x4x2_t __rv;\n-  __rv.val[0] = (int16x4_t) __builtin_shuffle (__a, __b, (uint16x4_t) { 0, 4, 2, 6 });\n-  __rv.val[1] = (int16x4_t) __builtin_shuffle (__a, __b, (uint16x4_t) { 1, 5, 3, 7 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t) { 5, 1, 7, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t) { 4, 0, 6, 2 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t) { 0, 4, 2, 6 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t) { 1, 5, 3, 7 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline uint8x8x2_t __attribute__ ((__always_inline__))\n vtrn_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n   uint8x8x2_t __rv;\n-  __rv.val[0] = (uint8x8_t) __builtin_shuffle (__a, __b, (uint8x8_t) { 0, 8, 2, 10, 4, 12, 6, 14 });\n-  __rv.val[1] = (uint8x8_t) __builtin_shuffle (__a, __b, (uint8x8_t) { 1, 9, 3, 11, 5, 13, 7, 15 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 9, 1, 11, 3, 13, 5, 15, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 8, 0, 10, 2, 12, 4, 14, 6 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 0, 8, 2, 10, 4, 12, 6, 14 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 1, 9, 3, 11, 5, 13, 7, 15 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline uint16x4x2_t __attribute__ ((__always_inline__))\n vtrn_u16 (uint16x4_t __a, uint16x4_t __b)\n {\n   uint16x4x2_t __rv;\n-  __rv.val[0] = (uint16x4_t) __builtin_shuffle (__a, __b, (uint16x4_t) { 0, 4, 2, 6 });\n-  __rv.val[1] = (uint16x4_t) __builtin_shuffle (__a, __b, (uint16x4_t) { 1, 5, 3, 7 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t) { 5, 1, 7, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t) { 4, 0, 6, 2 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t) { 0, 4, 2, 6 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t) { 1, 5, 3, 7 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline poly8x8x2_t __attribute__ ((__always_inline__))\n vtrn_p8 (poly8x8_t __a, poly8x8_t __b)\n {\n   poly8x8x2_t __rv;\n-  __rv.val[0] = (poly8x8_t) __builtin_shuffle (__a, __b, (uint8x8_t) { 0, 8, 2, 10, 4, 12, 6, 14 });\n-  __rv.val[1] = (poly8x8_t) __builtin_shuffle (__a, __b, (uint8x8_t) { 1, 9, 3, 11, 5, 13, 7, 15 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 9, 1, 11, 3, 13, 5, 15, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 8, 0, 10, 2, 12, 4, 14, 6 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 0, 8, 2, 10, 4, 12, 6, 14 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 1, 9, 3, 11, 5, 13, 7, 15 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline poly16x4x2_t __attribute__ ((__always_inline__))\n vtrn_p16 (poly16x4_t __a, poly16x4_t __b)\n {\n   poly16x4x2_t __rv;\n-  __rv.val[0] = (poly16x4_t) __builtin_shuffle (__a, __b, (uint16x4_t) { 0, 4, 2, 6 });\n-  __rv.val[1] = (poly16x4_t) __builtin_shuffle (__a, __b, (uint16x4_t) { 1, 5, 3, 7 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t) { 5, 1, 7, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t) { 4, 0, 6, 2 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t) { 0, 4, 2, 6 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t) { 1, 5, 3, 7 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline int32x2x2_t __attribute__ ((__always_inline__))\n vtrn_s32 (int32x2_t __a, int32x2_t __b)\n {\n   int32x2x2_t __rv;\n-  __rv.val[0] = (int32x2_t) __builtin_shuffle (__a, __b, (uint32x2_t) { 0, 2 });\n-  __rv.val[1] = (int32x2_t) __builtin_shuffle (__a, __b, (uint32x2_t) { 1, 3 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x2_t) { 3, 1 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x2_t) { 2, 0 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x2_t) { 0, 2 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x2_t) { 1, 3 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline float32x2x2_t __attribute__ ((__always_inline__))\n vtrn_f32 (float32x2_t __a, float32x2_t __b)\n {\n   float32x2x2_t __rv;\n-  __rv.val[0] = (float32x2_t) __builtin_shuffle (__a, __b, (uint32x2_t) { 0, 2 });\n-  __rv.val[1] = (float32x2_t) __builtin_shuffle (__a, __b, (uint32x2_t) { 1, 3 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x2_t) { 3, 1 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x2_t) { 2, 0 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x2_t) { 0, 2 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x2_t) { 1, 3 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline uint32x2x2_t __attribute__ ((__always_inline__))\n vtrn_u32 (uint32x2_t __a, uint32x2_t __b)\n {\n   uint32x2x2_t __rv;\n-  __rv.val[0] = (uint32x2_t) __builtin_shuffle (__a, __b, (uint32x2_t) { 0, 2 });\n-  __rv.val[1] = (uint32x2_t) __builtin_shuffle (__a, __b, (uint32x2_t) { 1, 3 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x2_t) { 3, 1 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x2_t) { 2, 0 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x2_t) { 0, 2 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x2_t) { 1, 3 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline int8x16x2_t __attribute__ ((__always_inline__))\n vtrnq_s8 (int8x16_t __a, int8x16_t __b)\n {\n   int8x16x2_t __rv;\n-  __rv.val[0] = (int8x16_t) __builtin_shuffle (__a, __b, (uint8x16_t) { 0, 16, 2, 18, 4, 20, 6, 22, 8, 24, 10, 26, 12, 28, 14, 30 });\n-  __rv.val[1] = (int8x16_t) __builtin_shuffle (__a, __b, (uint8x16_t) { 1, 17, 3, 19, 5, 21, 7, 23, 9, 25, 11, 27, 13, 29, 15, 31 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 17, 1, 19, 3, 21, 5, 23, 7, 25, 9, 27, 11, 29, 13, 31, 15 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 16, 0, 18, 2, 20, 4, 22, 6, 24, 8, 26, 10, 28, 12, 30, 14 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 0, 16, 2, 18, 4, 20, 6, 22, 8, 24, 10, 26, 12, 28, 14, 30 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 1, 17, 3, 19, 5, 21, 7, 23, 9, 25, 11, 27, 13, 29, 15, 31 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline int16x8x2_t __attribute__ ((__always_inline__))\n vtrnq_s16 (int16x8_t __a, int16x8_t __b)\n {\n   int16x8x2_t __rv;\n-  __rv.val[0] = (int16x8_t) __builtin_shuffle (__a, __b, (uint16x8_t) { 0, 8, 2, 10, 4, 12, 6, 14 });\n-  __rv.val[1] = (int16x8_t) __builtin_shuffle (__a, __b, (uint16x8_t) { 1, 9, 3, 11, 5, 13, 7, 15 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 9, 1, 11, 3, 13, 5, 15, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 8, 0, 10, 2, 12, 4, 14, 6 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 0, 8, 2, 10, 4, 12, 6, 14 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 1, 9, 3, 11, 5, 13, 7, 15 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline int32x4x2_t __attribute__ ((__always_inline__))\n vtrnq_s32 (int32x4_t __a, int32x4_t __b)\n {\n   int32x4x2_t __rv;\n-  __rv.val[0] = (int32x4_t) __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 4, 2, 6 });\n-  __rv.val[1] = (int32x4_t) __builtin_shuffle (__a, __b, (uint32x4_t) { 1, 5, 3, 7 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 5, 1, 7, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 4, 0, 6, 2 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 4, 2, 6 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 1, 5, 3, 7 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))\n vtrnq_f32 (float32x4_t __a, float32x4_t __b)\n {\n   float32x4x2_t __rv;\n-  __rv.val[0] = (float32x4_t) __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 4, 2, 6 });\n-  __rv.val[1] = (float32x4_t) __builtin_shuffle (__a, __b, (uint32x4_t) { 1, 5, 3, 7 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 5, 1, 7, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 4, 0, 6, 2 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 4, 2, 6 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 1, 5, 3, 7 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline uint8x16x2_t __attribute__ ((__always_inline__))\n vtrnq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n   uint8x16x2_t __rv;\n-  __rv.val[0] = (uint8x16_t) __builtin_shuffle (__a, __b, (uint8x16_t) { 0, 16, 2, 18, 4, 20, 6, 22, 8, 24, 10, 26, 12, 28, 14, 30 });\n-  __rv.val[1] = (uint8x16_t) __builtin_shuffle (__a, __b, (uint8x16_t) { 1, 17, 3, 19, 5, 21, 7, 23, 9, 25, 11, 27, 13, 29, 15, 31 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 17, 1, 19, 3, 21, 5, 23, 7, 25, 9, 27, 11, 29, 13, 31, 15 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 16, 0, 18, 2, 20, 4, 22, 6, 24, 8, 26, 10, 28, 12, 30, 14 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 0, 16, 2, 18, 4, 20, 6, 22, 8, 24, 10, 26, 12, 28, 14, 30 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 1, 17, 3, 19, 5, 21, 7, 23, 9, 25, 11, 27, 13, 29, 15, 31 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline uint16x8x2_t __attribute__ ((__always_inline__))\n vtrnq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n   uint16x8x2_t __rv;\n-  __rv.val[0] = (uint16x8_t) __builtin_shuffle (__a, __b, (uint16x8_t) { 0, 8, 2, 10, 4, 12, 6, 14 });\n-  __rv.val[1] = (uint16x8_t) __builtin_shuffle (__a, __b, (uint16x8_t) { 1, 9, 3, 11, 5, 13, 7, 15 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 9, 1, 11, 3, 13, 5, 15, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 8, 0, 10, 2, 12, 4, 14, 6 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 0, 8, 2, 10, 4, 12, 6, 14 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 1, 9, 3, 11, 5, 13, 7, 15 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline uint32x4x2_t __attribute__ ((__always_inline__))\n vtrnq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n   uint32x4x2_t __rv;\n-  __rv.val[0] = (uint32x4_t) __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 4, 2, 6 });\n-  __rv.val[1] = (uint32x4_t) __builtin_shuffle (__a, __b, (uint32x4_t) { 1, 5, 3, 7 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 5, 1, 7, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 4, 0, 6, 2 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 4, 2, 6 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 1, 5, 3, 7 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline poly8x16x2_t __attribute__ ((__always_inline__))\n vtrnq_p8 (poly8x16_t __a, poly8x16_t __b)\n {\n   poly8x16x2_t __rv;\n-  __rv.val[0] = (poly8x16_t) __builtin_shuffle (__a, __b, (uint8x16_t) { 0, 16, 2, 18, 4, 20, 6, 22, 8, 24, 10, 26, 12, 28, 14, 30 });\n-  __rv.val[1] = (poly8x16_t) __builtin_shuffle (__a, __b, (uint8x16_t) { 1, 17, 3, 19, 5, 21, 7, 23, 9, 25, 11, 27, 13, 29, 15, 31 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 17, 1, 19, 3, 21, 5, 23, 7, 25, 9, 27, 11, 29, 13, 31, 15 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 16, 0, 18, 2, 20, 4, 22, 6, 24, 8, 26, 10, 28, 12, 30, 14 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 0, 16, 2, 18, 4, 20, 6, 22, 8, 24, 10, 26, 12, 28, 14, 30 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 1, 17, 3, 19, 5, 21, 7, 23, 9, 25, 11, 27, 13, 29, 15, 31 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline poly16x8x2_t __attribute__ ((__always_inline__))\n vtrnq_p16 (poly16x8_t __a, poly16x8_t __b)\n {\n   poly16x8x2_t __rv;\n-  __rv.val[0] = (poly16x8_t) __builtin_shuffle (__a, __b, (uint16x8_t) { 0, 8, 2, 10, 4, 12, 6, 14 });\n-  __rv.val[1] = (poly16x8_t) __builtin_shuffle (__a, __b, (uint16x8_t) { 1, 9, 3, 11, 5, 13, 7, 15 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 9, 1, 11, 3, 13, 5, 15, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 8, 0, 10, 2, 12, 4, 14, 6 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 0, 8, 2, 10, 4, 12, 6, 14 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 1, 9, 3, 11, 5, 13, 7, 15 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline int8x8x2_t __attribute__ ((__always_inline__))\n vzip_s8 (int8x8_t __a, int8x8_t __b)\n {\n   int8x8x2_t __rv;\n-  __rv.val[0] = (int8x8_t) __builtin_shuffle (__a, __b, (uint8x8_t) { 0, 8, 1, 9, 2, 10, 3, 11 });\n-  __rv.val[1] = (int8x8_t) __builtin_shuffle (__a, __b, (uint8x8_t) { 4, 12, 5, 13, 6, 14, 7, 15 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 12, 4, 13, 5, 14, 6, 15, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 8, 0, 9, 1, 10, 2, 11, 3 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 0, 8, 1, 9, 2, 10, 3, 11 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 4, 12, 5, 13, 6, 14, 7, 15 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline int16x4x2_t __attribute__ ((__always_inline__))\n vzip_s16 (int16x4_t __a, int16x4_t __b)\n {\n   int16x4x2_t __rv;\n-  __rv.val[0] = (int16x4_t) __builtin_shuffle (__a, __b, (uint16x4_t) { 0, 4, 1, 5 });\n-  __rv.val[1] = (int16x4_t) __builtin_shuffle (__a, __b, (uint16x4_t) { 2, 6, 3, 7 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t) { 6, 2, 7, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t) { 4, 0, 5, 1 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t) { 0, 4, 1, 5 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t) { 2, 6, 3, 7 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline uint8x8x2_t __attribute__ ((__always_inline__))\n vzip_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n   uint8x8x2_t __rv;\n-  __rv.val[0] = (uint8x8_t) __builtin_shuffle (__a, __b, (uint8x8_t) { 0, 8, 1, 9, 2, 10, 3, 11 });\n-  __rv.val[1] = (uint8x8_t) __builtin_shuffle (__a, __b, (uint8x8_t) { 4, 12, 5, 13, 6, 14, 7, 15 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 12, 4, 13, 5, 14, 6, 15, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 8, 0, 9, 1, 10, 2, 11, 3 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 0, 8, 1, 9, 2, 10, 3, 11 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 4, 12, 5, 13, 6, 14, 7, 15 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline uint16x4x2_t __attribute__ ((__always_inline__))\n vzip_u16 (uint16x4_t __a, uint16x4_t __b)\n {\n   uint16x4x2_t __rv;\n-  __rv.val[0] = (uint16x4_t) __builtin_shuffle (__a, __b, (uint16x4_t) { 0, 4, 1, 5 });\n-  __rv.val[1] = (uint16x4_t) __builtin_shuffle (__a, __b, (uint16x4_t) { 2, 6, 3, 7 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t) { 6, 2, 7, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t) { 4, 0, 5, 1 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t) { 0, 4, 1, 5 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t) { 2, 6, 3, 7 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline poly8x8x2_t __attribute__ ((__always_inline__))\n vzip_p8 (poly8x8_t __a, poly8x8_t __b)\n {\n   poly8x8x2_t __rv;\n-  __rv.val[0] = (poly8x8_t) __builtin_shuffle (__a, __b, (uint8x8_t) { 0, 8, 1, 9, 2, 10, 3, 11 });\n-  __rv.val[1] = (poly8x8_t) __builtin_shuffle (__a, __b, (uint8x8_t) { 4, 12, 5, 13, 6, 14, 7, 15 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 12, 4, 13, 5, 14, 6, 15, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 8, 0, 9, 1, 10, 2, 11, 3 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 0, 8, 1, 9, 2, 10, 3, 11 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 4, 12, 5, 13, 6, 14, 7, 15 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline poly16x4x2_t __attribute__ ((__always_inline__))\n vzip_p16 (poly16x4_t __a, poly16x4_t __b)\n {\n   poly16x4x2_t __rv;\n-  __rv.val[0] = (poly16x4_t) __builtin_shuffle (__a, __b, (uint16x4_t) { 0, 4, 1, 5 });\n-  __rv.val[1] = (poly16x4_t) __builtin_shuffle (__a, __b, (uint16x4_t) { 2, 6, 3, 7 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t) { 6, 2, 7, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t) { 4, 0, 5, 1 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t) { 0, 4, 1, 5 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t) { 2, 6, 3, 7 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline int32x2x2_t __attribute__ ((__always_inline__))\n vzip_s32 (int32x2_t __a, int32x2_t __b)\n {\n   int32x2x2_t __rv;\n-  __rv.val[0] = (int32x2_t) __builtin_shuffle (__a, __b, (uint32x2_t) { 0, 2 });\n-  __rv.val[1] = (int32x2_t) __builtin_shuffle (__a, __b, (uint32x2_t) { 1, 3 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x2_t) { 3, 1 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x2_t) { 2, 0 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x2_t) { 0, 2 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x2_t) { 1, 3 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline float32x2x2_t __attribute__ ((__always_inline__))\n vzip_f32 (float32x2_t __a, float32x2_t __b)\n {\n   float32x2x2_t __rv;\n-  __rv.val[0] = (float32x2_t) __builtin_shuffle (__a, __b, (uint32x2_t) { 0, 2 });\n-  __rv.val[1] = (float32x2_t) __builtin_shuffle (__a, __b, (uint32x2_t) { 1, 3 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x2_t) { 3, 1 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x2_t) { 2, 0 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x2_t) { 0, 2 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x2_t) { 1, 3 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline uint32x2x2_t __attribute__ ((__always_inline__))\n vzip_u32 (uint32x2_t __a, uint32x2_t __b)\n {\n   uint32x2x2_t __rv;\n-  __rv.val[0] = (uint32x2_t) __builtin_shuffle (__a, __b, (uint32x2_t) { 0, 2 });\n-  __rv.val[1] = (uint32x2_t) __builtin_shuffle (__a, __b, (uint32x2_t) { 1, 3 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x2_t) { 3, 1 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x2_t) { 2, 0 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x2_t) { 0, 2 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x2_t) { 1, 3 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline int8x16x2_t __attribute__ ((__always_inline__))\n vzipq_s8 (int8x16_t __a, int8x16_t __b)\n {\n   int8x16x2_t __rv;\n-  __rv.val[0] = (int8x16_t) __builtin_shuffle (__a, __b, (uint8x16_t) { 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23 });\n-  __rv.val[1] = (int8x16_t) __builtin_shuffle (__a, __b, (uint8x16_t) { 8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 24, 8, 25, 9, 26, 10, 27, 11, 28, 12, 29, 13, 30, 14, 31, 15 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 16, 0, 17, 1, 18, 2, 19, 3, 20, 4, 21, 5, 22, 6, 23, 7 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline int16x8x2_t __attribute__ ((__always_inline__))\n vzipq_s16 (int16x8_t __a, int16x8_t __b)\n {\n   int16x8x2_t __rv;\n-  __rv.val[0] = (int16x8_t) __builtin_shuffle (__a, __b, (uint16x8_t) { 0, 8, 1, 9, 2, 10, 3, 11 });\n-  __rv.val[1] = (int16x8_t) __builtin_shuffle (__a, __b, (uint16x8_t) { 4, 12, 5, 13, 6, 14, 7, 15 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 12, 4, 13, 5, 14, 6, 15, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 8, 0, 9, 1, 10, 2, 11, 3 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 0, 8, 1, 9, 2, 10, 3, 11 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 4, 12, 5, 13, 6, 14, 7, 15 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline int32x4x2_t __attribute__ ((__always_inline__))\n vzipq_s32 (int32x4_t __a, int32x4_t __b)\n {\n   int32x4x2_t __rv;\n-  __rv.val[0] = (int32x4_t) __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 4, 1, 5 });\n-  __rv.val[1] = (int32x4_t) __builtin_shuffle (__a, __b, (uint32x4_t) { 2, 6, 3, 7 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 6, 2, 7, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 4, 0, 5, 1 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 4, 1, 5 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 2, 6, 3, 7 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))\n vzipq_f32 (float32x4_t __a, float32x4_t __b)\n {\n   float32x4x2_t __rv;\n-  __rv.val[0] = (float32x4_t) __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 4, 1, 5 });\n-  __rv.val[1] = (float32x4_t) __builtin_shuffle (__a, __b, (uint32x4_t) { 2, 6, 3, 7 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 6, 2, 7, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 4, 0, 5, 1 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 4, 1, 5 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 2, 6, 3, 7 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline uint8x16x2_t __attribute__ ((__always_inline__))\n vzipq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n   uint8x16x2_t __rv;\n-  __rv.val[0] = (uint8x16_t) __builtin_shuffle (__a, __b, (uint8x16_t) { 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23 });\n-  __rv.val[1] = (uint8x16_t) __builtin_shuffle (__a, __b, (uint8x16_t) { 8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 24, 8, 25, 9, 26, 10, 27, 11, 28, 12, 29, 13, 30, 14, 31, 15 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 16, 0, 17, 1, 18, 2, 19, 3, 20, 4, 21, 5, 22, 6, 23, 7 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline uint16x8x2_t __attribute__ ((__always_inline__))\n vzipq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n   uint16x8x2_t __rv;\n-  __rv.val[0] = (uint16x8_t) __builtin_shuffle (__a, __b, (uint16x8_t) { 0, 8, 1, 9, 2, 10, 3, 11 });\n-  __rv.val[1] = (uint16x8_t) __builtin_shuffle (__a, __b, (uint16x8_t) { 4, 12, 5, 13, 6, 14, 7, 15 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 12, 4, 13, 5, 14, 6, 15, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 8, 0, 9, 1, 10, 2, 11, 3 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 0, 8, 1, 9, 2, 10, 3, 11 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 4, 12, 5, 13, 6, 14, 7, 15 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline uint32x4x2_t __attribute__ ((__always_inline__))\n vzipq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n   uint32x4x2_t __rv;\n-  __rv.val[0] = (uint32x4_t) __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 4, 1, 5 });\n-  __rv.val[1] = (uint32x4_t) __builtin_shuffle (__a, __b, (uint32x4_t) { 2, 6, 3, 7 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 6, 2, 7, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 4, 0, 5, 1 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 4, 1, 5 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 2, 6, 3, 7 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline poly8x16x2_t __attribute__ ((__always_inline__))\n vzipq_p8 (poly8x16_t __a, poly8x16_t __b)\n {\n   poly8x16x2_t __rv;\n-  __rv.val[0] = (poly8x16_t) __builtin_shuffle (__a, __b, (uint8x16_t) { 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23 });\n-  __rv.val[1] = (poly8x16_t) __builtin_shuffle (__a, __b, (uint8x16_t) { 8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 24, 8, 25, 9, 26, 10, 27, 11, 28, 12, 29, 13, 30, 14, 31, 15 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 16, 0, 17, 1, 18, 2, 19, 3, 20, 4, 21, 5, 22, 6, 23, 7 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline poly16x8x2_t __attribute__ ((__always_inline__))\n vzipq_p16 (poly16x8_t __a, poly16x8_t __b)\n {\n   poly16x8x2_t __rv;\n-  __rv.val[0] = (poly16x8_t) __builtin_shuffle (__a, __b, (uint16x8_t) { 0, 8, 1, 9, 2, 10, 3, 11 });\n-  __rv.val[1] = (poly16x8_t) __builtin_shuffle (__a, __b, (uint16x8_t) { 4, 12, 5, 13, 6, 14, 7, 15 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 12, 4, 13, 5, 14, 6, 15, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 8, 0, 9, 1, 10, 2, 11, 3 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 0, 8, 1, 9, 2, 10, 3, 11 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 4, 12, 5, 13, 6, 14, 7, 15 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline int8x8x2_t __attribute__ ((__always_inline__))\n vuzp_s8 (int8x8_t __a, int8x8_t __b)\n {\n   int8x8x2_t __rv;\n-  __rv.val[0] = (int8x8_t) __builtin_shuffle (__a, __b, (uint8x8_t) { 0, 2, 4, 6, 8, 10, 12, 14 });\n-  __rv.val[1] = (int8x8_t) __builtin_shuffle (__a, __b, (uint8x8_t) { 1, 3, 5, 7, 9, 11, 13, 15 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 9, 11, 13, 15, 1, 3, 5, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 8, 10, 12, 14, 0, 2, 4, 6 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 0, 2, 4, 6, 8, 10, 12, 14 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 1, 3, 5, 7, 9, 11, 13, 15 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline int16x4x2_t __attribute__ ((__always_inline__))\n vuzp_s16 (int16x4_t __a, int16x4_t __b)\n {\n   int16x4x2_t __rv;\n-  __rv.val[0] = (int16x4_t) __builtin_shuffle (__a, __b, (uint16x4_t) { 0, 2, 4, 6 });\n-  __rv.val[1] = (int16x4_t) __builtin_shuffle (__a, __b, (uint16x4_t) { 1, 3, 5, 7 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t) { 5, 7, 1, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t) { 4, 6, 0, 2 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t) { 0, 2, 4, 6 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t) { 1, 3, 5, 7 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline int32x2x2_t __attribute__ ((__always_inline__))\n vuzp_s32 (int32x2_t __a, int32x2_t __b)\n {\n   int32x2x2_t __rv;\n-  __rv.val[0] = (int32x2_t) __builtin_shuffle (__a, __b, (uint32x2_t) { 0, 2 });\n-  __rv.val[1] = (int32x2_t) __builtin_shuffle (__a, __b, (uint32x2_t) { 1, 3 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x2_t) { 3, 1 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x2_t) { 2, 0 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x2_t) { 0, 2 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x2_t) { 1, 3 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline float32x2x2_t __attribute__ ((__always_inline__))\n vuzp_f32 (float32x2_t __a, float32x2_t __b)\n {\n   float32x2x2_t __rv;\n-  __rv.val[0] = (float32x2_t) __builtin_shuffle (__a, __b, (uint32x2_t) { 0, 2 });\n-  __rv.val[1] = (float32x2_t) __builtin_shuffle (__a, __b, (uint32x2_t) { 1, 3 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x2_t) { 3, 1 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x2_t) { 2, 0 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x2_t) { 0, 2 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x2_t) { 1, 3 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline uint8x8x2_t __attribute__ ((__always_inline__))\n vuzp_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n   uint8x8x2_t __rv;\n-  __rv.val[0] = (uint8x8_t) __builtin_shuffle (__a, __b, (uint8x8_t) { 0, 2, 4, 6, 8, 10, 12, 14 });\n-  __rv.val[1] = (uint8x8_t) __builtin_shuffle (__a, __b, (uint8x8_t) { 1, 3, 5, 7, 9, 11, 13, 15 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 9, 11, 13, 15, 1, 3, 5, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 8, 10, 12, 14, 0, 2, 4, 6 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 0, 2, 4, 6, 8, 10, 12, 14 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 1, 3, 5, 7, 9, 11, 13, 15 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline uint16x4x2_t __attribute__ ((__always_inline__))\n vuzp_u16 (uint16x4_t __a, uint16x4_t __b)\n {\n   uint16x4x2_t __rv;\n-  __rv.val[0] = (uint16x4_t) __builtin_shuffle (__a, __b, (uint16x4_t) { 0, 2, 4, 6 });\n-  __rv.val[1] = (uint16x4_t) __builtin_shuffle (__a, __b, (uint16x4_t) { 1, 3, 5, 7 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t) { 5, 7, 1, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t) { 4, 6, 0, 2 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t) { 0, 2, 4, 6 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t) { 1, 3, 5, 7 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline uint32x2x2_t __attribute__ ((__always_inline__))\n vuzp_u32 (uint32x2_t __a, uint32x2_t __b)\n {\n   uint32x2x2_t __rv;\n-  __rv.val[0] = (uint32x2_t) __builtin_shuffle (__a, __b, (uint32x2_t) { 0, 2 });\n-  __rv.val[1] = (uint32x2_t) __builtin_shuffle (__a, __b, (uint32x2_t) { 1, 3 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x2_t) { 3, 1 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x2_t) { 2, 0 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x2_t) { 0, 2 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x2_t) { 1, 3 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline poly8x8x2_t __attribute__ ((__always_inline__))\n vuzp_p8 (poly8x8_t __a, poly8x8_t __b)\n {\n   poly8x8x2_t __rv;\n-  __rv.val[0] = (poly8x8_t) __builtin_shuffle (__a, __b, (uint8x8_t) { 0, 2, 4, 6, 8, 10, 12, 14 });\n-  __rv.val[1] = (poly8x8_t) __builtin_shuffle (__a, __b, (uint8x8_t) { 1, 3, 5, 7, 9, 11, 13, 15 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 9, 11, 13, 15, 1, 3, 5, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 8, 10, 12, 14, 0, 2, 4, 6 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 0, 2, 4, 6, 8, 10, 12, 14 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x8_t)\n+      { 1, 3, 5, 7, 9, 11, 13, 15 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline poly16x4x2_t __attribute__ ((__always_inline__))\n vuzp_p16 (poly16x4_t __a, poly16x4_t __b)\n {\n   poly16x4x2_t __rv;\n-  __rv.val[0] = (poly16x4_t) __builtin_shuffle (__a, __b, (uint16x4_t) { 0, 2, 4, 6 });\n-  __rv.val[1] = (poly16x4_t) __builtin_shuffle (__a, __b, (uint16x4_t) { 1, 3, 5, 7 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t) { 5, 7, 1, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t) { 4, 6, 0, 2 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t) { 0, 2, 4, 6 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t) { 1, 3, 5, 7 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline int8x16x2_t __attribute__ ((__always_inline__))\n vuzpq_s8 (int8x16_t __a, int8x16_t __b)\n {\n   int8x16x2_t __rv;\n-  __rv.val[0] = (int8x16_t) __builtin_shuffle (__a, __b, (uint8x16_t) { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30 });\n-  __rv.val[1] = (int8x16_t) __builtin_shuffle (__a, __b, (uint8x16_t) { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 17, 19, 21, 23, 25, 27, 29, 31, 1, 3, 5, 7, 9, 11, 13, 15 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 16, 18, 20, 22, 24, 26, 28, 30, 0, 2, 4, 6, 8, 10, 12, 14 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline int16x8x2_t __attribute__ ((__always_inline__))\n vuzpq_s16 (int16x8_t __a, int16x8_t __b)\n {\n   int16x8x2_t __rv;\n-  __rv.val[0] = (int16x8_t) __builtin_shuffle (__a, __b, (uint16x8_t) { 0, 2, 4, 6, 8, 10, 12, 14 });\n-  __rv.val[1] = (int16x8_t) __builtin_shuffle (__a, __b, (uint16x8_t) { 1, 3, 5, 7, 9, 11, 13, 15 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 9, 11, 13, 15, 1, 3, 5, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 8, 10, 12, 14, 0, 2, 4, 6 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 0, 2, 4, 6, 8, 10, 12, 14 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 1, 3, 5, 7, 9, 11, 13, 15 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline int32x4x2_t __attribute__ ((__always_inline__))\n vuzpq_s32 (int32x4_t __a, int32x4_t __b)\n {\n   int32x4x2_t __rv;\n-  __rv.val[0] = (int32x4_t) __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 2, 4, 6 });\n-  __rv.val[1] = (int32x4_t) __builtin_shuffle (__a, __b, (uint32x4_t) { 1, 3, 5, 7 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 5, 7, 1, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 4, 6, 0, 2 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 2, 4, 6 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 1, 3, 5, 7 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))\n vuzpq_f32 (float32x4_t __a, float32x4_t __b)\n {\n   float32x4x2_t __rv;\n-  __rv.val[0] = (float32x4_t) __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 2, 4, 6 });\n-  __rv.val[1] = (float32x4_t) __builtin_shuffle (__a, __b, (uint32x4_t) { 1, 3, 5, 7 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 5, 7, 1, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 4, 6, 0, 2 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 2, 4, 6 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 1, 3, 5, 7 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline uint8x16x2_t __attribute__ ((__always_inline__))\n vuzpq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n   uint8x16x2_t __rv;\n-  __rv.val[0] = (uint8x16_t) __builtin_shuffle (__a, __b, (uint8x16_t) { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30 });\n-  __rv.val[1] = (uint8x16_t) __builtin_shuffle (__a, __b, (uint8x16_t) { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 17, 19, 21, 23, 25, 27, 29, 31, 1, 3, 5, 7, 9, 11, 13, 15 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 16, 18, 20, 22, 24, 26, 28, 30, 0, 2, 4, 6, 8, 10, 12, 14 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline uint16x8x2_t __attribute__ ((__always_inline__))\n vuzpq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n   uint16x8x2_t __rv;\n-  __rv.val[0] = (uint16x8_t) __builtin_shuffle (__a, __b, (uint16x8_t) { 0, 2, 4, 6, 8, 10, 12, 14 });\n-  __rv.val[1] = (uint16x8_t) __builtin_shuffle (__a, __b, (uint16x8_t) { 1, 3, 5, 7, 9, 11, 13, 15 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 9, 11, 13, 15, 1, 3, 5, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 8, 10, 12, 14, 0, 2, 4, 6 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 0, 2, 4, 6, 8, 10, 12, 14 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 1, 3, 5, 7, 9, 11, 13, 15 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline uint32x4x2_t __attribute__ ((__always_inline__))\n vuzpq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n   uint32x4x2_t __rv;\n-  __rv.val[0] = (uint32x4_t) __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 2, 4, 6 });\n-  __rv.val[1] = (uint32x4_t) __builtin_shuffle (__a, __b, (uint32x4_t) { 1, 3, 5, 7 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 5, 7, 1, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 4, 6, 0, 2 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 2, 4, 6 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 1, 3, 5, 7 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline poly8x16x2_t __attribute__ ((__always_inline__))\n vuzpq_p8 (poly8x16_t __a, poly8x16_t __b)\n {\n   poly8x16x2_t __rv;\n-  __rv.val[0] = (poly8x16_t) __builtin_shuffle (__a, __b, (uint8x16_t) { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30 });\n-  __rv.val[1] = (poly8x16_t) __builtin_shuffle (__a, __b, (uint8x16_t) { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 17, 19, 21, 23, 25, 27, 29, 31, 1, 3, 5, 7, 9, 11, 13, 15 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 16, 18, 20, 22, 24, 26, 28, 30, 0, 2, 4, 6, 8, 10, 12, 14 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n+      { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31 });\n+#endif\n   return __rv;\n }\n \n __extension__ static __inline poly16x8x2_t __attribute__ ((__always_inline__))\n vuzpq_p16 (poly16x8_t __a, poly16x8_t __b)\n {\n   poly16x8x2_t __rv;\n-  __rv.val[0] = (poly16x8_t) __builtin_shuffle (__a, __b, (uint16x8_t) { 0, 2, 4, 6, 8, 10, 12, 14 });\n-  __rv.val[1] = (poly16x8_t) __builtin_shuffle (__a, __b, (uint16x8_t) { 1, 3, 5, 7, 9, 11, 13, 15 });\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 9, 11, 13, 15, 1, 3, 5, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 8, 10, 12, 14, 0, 2, 4, 6 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 0, 2, 4, 6, 8, 10, 12, 14 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+      { 1, 3, 5, 7, 9, 11, 13, 15 });\n+#endif\n   return __rv;\n }\n "}, {"sha": "cbf634b6a63e5d0fbaa58ba45123319f8c6a4f74", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842cbb738e7bb5e9b0fde75d7f792f036971d13c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842cbb738e7bb5e9b0fde75d7f792f036971d13c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=842cbb738e7bb5e9b0fde75d7f792f036971d13c", "patch": "@@ -1,3 +1,8 @@\n+2014-06-09  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\tPR target/61062\n+\t* gcc.target/arm/pr48252.c (main): Expect same result as endian-neutral.\n+\n 2014-06-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/45187"}, {"sha": "250d5e4d6f9abaa7df2bf003be64f4638a31dbcb", "filename": "gcc/testsuite/gcc.target/arm/pr48252.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842cbb738e7bb5e9b0fde75d7f792f036971d13c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr48252.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842cbb738e7bb5e9b0fde75d7f792f036971d13c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr48252.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr48252.c?ref=842cbb738e7bb5e9b0fde75d7f792f036971d13c", "patch": "@@ -15,7 +15,6 @@ int main(void)\n     uint8x8x2_t vd1, vd2;\n     union {uint8x8_t v; uint8_t buf[8];} d1, d2, d3, d4;\n     int i;\n-    uint8_t odd, even;\n \n     vd1 = vzip_u8(v1, vdup_n_u8(0));\n     vd2 = vzip_u8(v2, vdup_n_u8(0));\n@@ -25,17 +24,9 @@ int main(void)\n     vst1_u8(d3.buf, vd2.val[0]);\n     vst1_u8(d4.buf, vd2.val[1]);\n \n-#ifdef __ARMEL__\n-    odd = 1;\n-    even = 0;\n-#else\n-    odd = 0;\n-    even = 1;\n-#endif\n-\n     for (i = 0; i < 8; i++)\n-      if ((i % 2 == even && d4.buf[i] != 2)\n-          || (i % 2 == odd && d4.buf[i] != 0))\n+      if ((i % 2 == 0 && d4.buf[i] != 2)\n+          || (i % 2 == 1 && d4.buf[i] != 0))\n          abort ();\n \n     return 0;"}]}