{"sha": "fd6e497e9cb9f0efe0375c65dddbe86f8e536f56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ2ZTQ5N2U5Y2I5ZjBlZmUwMzc1YzY1ZGRkYmU4NmY4ZTUzNmY1Ng==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-01-20T10:59:26Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-01-20T10:59:26Z"}, "message": "decl.c (gnat_to_gnu_entity): Robustify tests for aliased objects with an unconstrained nominal subtype.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Robustify tests\n\tfor aliased objects with an unconstrained nominal subtype.\n\t* gcc-interface/trans.c (Call_to_gnu): Likewise.\n\t(gnat_to_gnu) <case N_Op_Not>: Robustify test for private type.\n\t<case N_Op_Minus>: Remove useless code.\n\t(Exception_Handler_to_gnu_zcx): Minor tweaks.\n\nFrom-SVN: r206798", "tree": {"sha": "853a13747cde23451982d1083de9ba5cd2aac839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/853a13747cde23451982d1083de9ba5cd2aac839"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd6e497e9cb9f0efe0375c65dddbe86f8e536f56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd6e497e9cb9f0efe0375c65dddbe86f8e536f56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd6e497e9cb9f0efe0375c65dddbe86f8e536f56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd6e497e9cb9f0efe0375c65dddbe86f8e536f56/comments", "author": null, "committer": null, "parents": [{"sha": "608df31fded5fedc0f1e0b4fed35dfb0ea4aa84f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/608df31fded5fedc0f1e0b4fed35dfb0ea4aa84f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/608df31fded5fedc0f1e0b4fed35dfb0ea4aa84f"}], "stats": {"total": 65, "additions": 34, "deletions": 31}, "files": [{"sha": "bf0e2994daa882634647ccca14a9d4b56e363e1d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6e497e9cb9f0efe0375c65dddbe86f8e536f56/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6e497e9cb9f0efe0375c65dddbe86f8e536f56/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fd6e497e9cb9f0efe0375c65dddbe86f8e536f56", "patch": "@@ -1,3 +1,12 @@\n+2014-01-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Robustify tests\n+\tfor aliased objects with an unconstrained nominal subtype.\n+\t* gcc-interface/trans.c (Call_to_gnu): Likewise.\n+\t(gnat_to_gnu) <case N_Op_Not>: Robustify test for private type.\n+\t<case N_Op_Minus>: Remove useless code.\n+\t(Exception_Handler_to_gnu_zcx): Minor tweaks.\n+\n 2014-01-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <case E_Record_Subtype>:"}, {"sha": "5259ad4297aa4b0ca51030e32eeae02d9408befe", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6e497e9cb9f0efe0375c65dddbe86f8e536f56/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6e497e9cb9f0efe0375c65dddbe86f8e536f56/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=fd6e497e9cb9f0efe0375c65dddbe86f8e536f56", "patch": "@@ -771,8 +771,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t     || (TYPE_SIZE (gnu_type)\n \t\t && integer_zerop (TYPE_SIZE (gnu_type))\n \t\t && !TREE_OVERFLOW (TYPE_SIZE (gnu_type))))\n-\t    && (!Is_Constr_Subt_For_UN_Aliased (Etype (gnat_entity))\n-\t\t|| !Is_Array_Type (Etype (gnat_entity)))\n+\t    && !Is_Constr_Subt_For_UN_Aliased (Etype (gnat_entity))\n \t    && No (Renamed_Object (gnat_entity))\n \t    && No (Address_Clause (gnat_entity)))\n \t  gnu_size = bitsize_unit_node;\n@@ -864,7 +863,9 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t/* If this is an aliased object with an unconstrained nominal subtype,\n \t   make a type that includes the template.  */\n \tif (Is_Constr_Subt_For_UN_Aliased (Etype (gnat_entity))\n-\t    && Is_Array_Type (Etype (gnat_entity))\n+\t    && (Is_Array_Type (Etype (gnat_entity))\n+\t\t|| (Is_Private_Type (Etype (gnat_entity))\n+\t\t    && Is_Array_Type (Full_View (Etype (gnat_entity)))))\n \t    && !type_annotate_only)\n \t  {\n \t    tree gnu_array\n@@ -1390,7 +1391,9 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t   Note that we have to do that this late because of the couple of\n \t   allocation adjustments that might be made just above.  */\n \tif (Is_Constr_Subt_For_UN_Aliased (Etype (gnat_entity))\n-\t    && Is_Array_Type (Etype (gnat_entity))\n+\t    && (Is_Array_Type (Etype (gnat_entity))\n+\t\t|| (Is_Private_Type (Etype (gnat_entity))\n+\t\t    && Is_Array_Type (Full_View (Etype (gnat_entity)))))\n \t    && !type_annotate_only)\n \t  {\n \t    tree gnu_array\n@@ -4788,10 +4791,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t   from the full view.  But always get the type from the full view\n \t   for define on use types, since otherwise we won't see them!  */\n \telse if (!definition\n-\t\t || (Is_Itype (full_view)\n-\t\t   && No (Freeze_Node (gnat_entity)))\n-\t\t || (Is_Itype (gnat_entity)\n-\t\t   && No (Freeze_Node (full_view))))\n+\t\t || (Is_Itype (full_view) && No (Freeze_Node (gnat_entity)))\n+\t\t || (Is_Itype (gnat_entity) && No (Freeze_Node (full_view))))\n \t  {\n \t    gnu_decl = gnat_to_gnu_entity (full_view, NULL_TREE, 0);\n \t    maybe_present = true;"}, {"sha": "d99eda8a2aacd22862cbd21f92148119ddb28583", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6e497e9cb9f0efe0375c65dddbe86f8e536f56/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6e497e9cb9f0efe0375c65dddbe86f8e536f56/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=fd6e497e9cb9f0efe0375c65dddbe86f8e536f56", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2013, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2014, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -4156,7 +4156,9 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t      if (TREE_CODE (TREE_TYPE (gnu_actual)) == RECORD_TYPE\n \t\t  && TYPE_CONTAINS_TEMPLATE_P (TREE_TYPE (gnu_actual))\n \t\t  && Is_Constr_Subt_For_UN_Aliased (Etype (gnat_actual))\n-\t\t  && Is_Array_Type (Etype (gnat_actual)))\n+\t\t  && (Is_Array_Type (Etype (gnat_actual))\n+\t\t      || (Is_Private_Type (Etype (gnat_actual))\n+\t\t\t  && Is_Array_Type (Full_View (Etype (gnat_actual))))))\n \t\tgnu_actual = convert (gnat_to_gnu_type (Etype (gnat_actual)),\n \t\t\t\t      gnu_actual);\n \t    }\n@@ -4826,10 +4828,7 @@ static tree\n Exception_Handler_to_gnu_zcx (Node_Id gnat_node)\n {\n   tree gnu_etypes_list = NULL_TREE;\n-  tree gnu_expr;\n-  tree gnu_etype;\n-  tree gnu_current_exc_ptr;\n-  tree prev_gnu_incoming_exc_ptr;\n+  tree gnu_current_exc_ptr, prev_gnu_incoming_exc_ptr;\n   Node_Id gnat_temp;\n \n   /* We build a TREE_LIST of nodes representing what exception types this\n@@ -4840,20 +4839,19 @@ Exception_Handler_to_gnu_zcx (Node_Id gnat_node)\n   for (gnat_temp = First (Exception_Choices (gnat_node));\n        gnat_temp; gnat_temp = Next (gnat_temp))\n     {\n+      tree gnu_expr, gnu_etype;\n+\n       if (Nkind (gnat_temp) == N_Others_Choice)\n \t{\n-\t  tree gnu_expr\n-\t    = All_Others (gnat_temp) ? all_others_decl : others_decl;\n-\n-\t  gnu_etype\n-\t    = build_unary_op (ADDR_EXPR, NULL_TREE, gnu_expr);\n+\t  gnu_expr = All_Others (gnat_temp) ? all_others_decl : others_decl;\n+\t  gnu_etype = build_unary_op (ADDR_EXPR, NULL_TREE, gnu_expr);\n \t}\n       else if (Nkind (gnat_temp) == N_Identifier\n \t       || Nkind (gnat_temp) == N_Expanded_Name)\n \t{\n \t  Entity_Id gnat_ex_id = Entity (gnat_temp);\n \n-\t  /* Exception may be a renaming. Recover original exception which is\n+\t  /* Exception may be a renaming.  Recover original exception which is\n \t     the one elaborated and registered.  */\n \t  if (Present (Renamed_Object (gnat_ex_id)))\n \t    gnat_ex_id = Renamed_Object (gnat_ex_id);\n@@ -4914,8 +4912,8 @@ Exception_Handler_to_gnu_zcx (Node_Id gnat_node)\n   /* Declare and initialize the choice parameter, if present.  */\n   if (Present (Choice_Parameter (gnat_node)))\n     {\n-      tree gnu_param = gnat_to_gnu_entity\n-\t(Choice_Parameter (gnat_node), NULL_TREE, 1);\n+      tree gnu_param\n+\t= gnat_to_gnu_entity (Choice_Parameter (gnat_node), NULL_TREE, 1);\n \n       add_stmt (build_call_n_expr\n \t\t(set_exception_parameter_decl, 2,\n@@ -4932,8 +4930,8 @@ Exception_Handler_to_gnu_zcx (Node_Id gnat_node)\n \n   gnu_incoming_exc_ptr = prev_gnu_incoming_exc_ptr;\n \n-  return build2 (CATCH_EXPR, void_type_node, gnu_etypes_list,\n-\t\t end_stmt_group ());\n+  return\n+    build2 (CATCH_EXPR, void_type_node, gnu_etypes_list, end_stmt_group ());\n }\n \f\n /* Subroutine of gnat_to_gnu to generate code for an N_Compilation unit.  */\n@@ -6250,7 +6248,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t Fall through for a boolean operand since GNU_CODES is set\n \t up to handle this.  */\n       if (Is_Modular_Integer_Type (Etype (gnat_node))\n-\t  || (Ekind (Etype (gnat_node)) == E_Private_Type\n+\t  || (Is_Private_Type (Etype (gnat_node))\n \t      && Is_Modular_Integer_Type (Full_View (Etype (gnat_node)))))\n \t{\n \t  gnu_expr = gnat_to_gnu (Right_Opnd (gnat_node));\n@@ -6264,12 +6262,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \n     case N_Op_Minus:  case N_Op_Abs:\n       gnu_expr = gnat_to_gnu (Right_Opnd (gnat_node));\n-\n-      if (Ekind (Etype (gnat_node)) != E_Private_Type)\n-\tgnu_result_type = get_unpadded_type (Etype (gnat_node));\n-      else\n-\tgnu_result_type = get_unpadded_type (Base_Type\n-\t\t\t\t\t     (Full_View (Etype (gnat_node))));\n+      gnu_result_type = get_unpadded_type (Etype (gnat_node));\n \n       if (Do_Overflow_Check (gnat_node)\n \t  && !TYPE_UNSIGNED (gnu_result_type)"}]}