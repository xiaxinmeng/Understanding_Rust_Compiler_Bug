{"sha": "c40f7b333a8201eaf4af5c77297f9a1e39371325", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQwZjdiMzMzYTgyMDFlYWY0YWY1Yzc3Mjk3ZjlhMWUzOTM3MTMyNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-02-11T20:16:04Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-02-11T20:16:04Z"}, "message": "(grokdeclarator): Use NAME, not IDENTIFIER_POINTER of DECLARATOR for\nerror messages; DECLARATOR might be null.\n\nFrom-SVN: r8907", "tree": {"sha": "fa2be066ddce1b26f07500908d81f411e0175a7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa2be066ddce1b26f07500908d81f411e0175a7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c40f7b333a8201eaf4af5c77297f9a1e39371325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c40f7b333a8201eaf4af5c77297f9a1e39371325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c40f7b333a8201eaf4af5c77297f9a1e39371325", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c40f7b333a8201eaf4af5c77297f9a1e39371325/comments", "author": null, "committer": null, "parents": [{"sha": "5788afc6aadb9f7fadbf9a71c357b68d460febdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5788afc6aadb9f7fadbf9a71c357b68d460febdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5788afc6aadb9f7fadbf9a71c357b68d460febdf"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "12b24d05fd008a73f1fb6519d46ed620ad20377d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c40f7b333a8201eaf4af5c77297f9a1e39371325/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c40f7b333a8201eaf4af5c77297f9a1e39371325/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=c40f7b333a8201eaf4af5c77297f9a1e39371325", "patch": "@@ -1,5 +1,5 @@\n /* Process declarations and variables for C compiler.\n-   Copyright (C) 1988, 1992, 1993, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1992, 1993, 1994, 1995 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -4727,8 +4727,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t\t    && !(specbits\n \t\t\t & ((1 << (int) RID_STATIC) | (1 << (int) RID_REGISTER)))))))\n     {\n-      error (\"variable or field `%s' declared void\",\n-\t     IDENTIFIER_POINTER (declarator));\n+      error (\"variable or field `%s' declared void\", name);\n       type = integer_type_node;\n     }\n \n@@ -4802,14 +4801,12 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \n \tif (TREE_CODE (type) == FUNCTION_TYPE)\n \t  {\n-\t    error (\"field `%s' declared as a function\",\n-\t\t   IDENTIFIER_POINTER (declarator));\n+\t    error (\"field `%s' declared as a function\", name);\n \t    type = build_pointer_type (type);\n \t  }\n \telse if (TREE_CODE (type) != ERROR_MARK && TYPE_SIZE (type) == 0)\n \t  {\n-\t    error (\"field `%s' has incomplete type\",\n-\t\t   IDENTIFIER_POINTER (declarator));\n+\t    error (\"field `%s' has incomplete type\", name);\n \t    type = error_mark_node;\n \t  }\n \t/* Move type qualifiers down to element of an array.  */\n@@ -4838,19 +4835,16 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \n \tif (specbits & (1 << (int) RID_AUTO)\n \t    && (pedantic || current_binding_level == global_binding_level))\n-\t  pedwarn (\"invalid storage class for function `%s'\",\n-\t\t IDENTIFIER_POINTER (declarator));\n+\t  pedwarn (\"invalid storage class for function `%s'\", name);\n \tif (specbits & (1 << (int) RID_REGISTER))\n-\t  error (\"invalid storage class for function `%s'\",\n-\t\t IDENTIFIER_POINTER (declarator));\n+\t  error (\"invalid storage class for function `%s'\", name);\n \t/* Function declaration not at top level.\n \t   Storage classes other than `extern' are not allowed\n \t   and `extern' makes no difference.  */\n \tif (current_binding_level != global_binding_level\n \t    && (specbits & ((1 << (int) RID_STATIC) | (1 << (int) RID_INLINE)))\n \t    && pedantic)\n-\t  pedwarn (\"invalid storage class for function `%s'\",\n-\t\t   IDENTIFIER_POINTER (declarator));\n+\t  pedwarn (\"invalid storage class for function `%s'\", name);\n \n \t/* If this is a block level extern, it must live past the end\n \t   of the function so that we can check it against other\n@@ -4870,9 +4864,11 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \n \tif (extern_ref)\n \t  DECL_EXTERNAL (decl) = 1;\n+\n \t/* Record absence of global scope for `static' or `auto'.  */\n \tTREE_PUBLIC (decl)\n \t  = !(specbits & ((1 << (int) RID_STATIC) | (1 << (int) RID_AUTO)));\n+\n \t/* Record presence of `inline', if it is reasonable.  */\n \tif (inlinep)\n \t  {"}]}