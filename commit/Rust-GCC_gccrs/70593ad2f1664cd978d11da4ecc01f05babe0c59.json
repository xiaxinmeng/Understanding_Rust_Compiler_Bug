{"sha": "70593ad2f1664cd978d11da4ecc01f05babe0c59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA1OTNhZDJmMTY2NGNkOTc4ZDExZGE0ZWNjMDFmMDViYWJlMGM1OQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2008-05-16T21:55:00Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-05-16T21:55:00Z"}, "message": "system_error: Align to current draft specifications.\n\n2008-05-16  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/system_error: Align to current draft specifications.\n\t* src/system_error.cc: Same.\n\t* src/functexcept.cc: Adjust for corrected system_error construction.\n\t* include/std/ostream: Adjust error_code inserter.\n\t* acinclude.m4 (GLIBCXX_CHECK_SYSTEM_ERROR): Remove sys_nerr test.\n\t* config/abi/pre/gnu.ver: Add new exports.\n\t\n\t* testsuite/util/testsuite_error.h: Consolidate error testing\n\tutilities here.\n\t* testsuite/19_diagnostics/error_code/cons/1.cc: Use\n\ttestsuite_error, adjust line numbers and constructor calls.\n\t* testsuite/19_diagnostics/error_code/operators/equal.cc: Same.\n\t* testsuite/19_diagnostics/error_code/operators/not_equal.cc: Same.\n\t* testsuite/19_diagnostics/error_category/cons/copy_neg.cc: Same.\n\t* testsuite/19_diagnostics/error_category/cons/default.cc: Same.\n\t* testsuite/19_diagnostics/error_category/operators/equal.cc: Same.\n\t* testsuite/19_diagnostics/error_category/operators/not_equal.cc: Same.\n\t* testsuite/19_diagnostics/system_error/cons_virtual_derivation.cc: \n\tSame.\n\t* testsuite/19_diagnostics/system_error/cons-1.cc: Same.\n\t* testsuite/19_diagnostics/system_error/what-1.cc: Same.\n\t* testsuite/19_diagnostics/system_error/what-2.cc: Same.\n\t* testsuite/19_diagnostics/system_error/what-big.cc: Same.\n\t* testsuite/19_diagnostics/system_error/what-3.cc: Same.\n\t* testsuite/19_diagnostics/system_error/what-4.cc: Same.\n\nFrom-SVN: r135446", "tree": {"sha": "db696e79edd0beb18fbe3903b5746d4243fb7897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db696e79edd0beb18fbe3903b5746d4243fb7897"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70593ad2f1664cd978d11da4ecc01f05babe0c59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70593ad2f1664cd978d11da4ecc01f05babe0c59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70593ad2f1664cd978d11da4ecc01f05babe0c59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70593ad2f1664cd978d11da4ecc01f05babe0c59/comments", "author": null, "committer": null, "parents": [{"sha": "ae772c2de32aad49c4142f82af3596d70f2ce3a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae772c2de32aad49c4142f82af3596d70f2ce3a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae772c2de32aad49c4142f82af3596d70f2ce3a3"}], "stats": {"total": 602, "additions": 366, "deletions": 236}, "files": [{"sha": "1a32e5572e457396a7f92b93d5ebd04b7a938ce7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -1,3 +1,31 @@\n+2008-05-16  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/system_error: Align to current draft specifications.\n+\t* src/system_error.cc: Same.\n+\t* src/functexcept.cc: Adjust for corrected system_error construction.\n+\t* include/std/ostream: Adjust error_code inserter.\n+\t* acinclude.m4 (GLIBCXX_CHECK_SYSTEM_ERROR): Remove sys_nerr test.\n+\t* config/abi/pre/gnu.ver: Add new exports.\n+\t\n+\t* testsuite/util/testsuite_error.h: Consolidate error testing\n+\tutilities here.\n+\t* testsuite/19_diagnostics/error_code/cons/1.cc: Use\n+\ttestsuite_error, adjust line numbers and constructor calls.\n+\t* testsuite/19_diagnostics/error_code/operators/equal.cc: Same.\n+\t* testsuite/19_diagnostics/error_code/operators/not_equal.cc: Same.\n+\t* testsuite/19_diagnostics/error_category/cons/copy_neg.cc: Same.\n+\t* testsuite/19_diagnostics/error_category/cons/default.cc: Same.\n+\t* testsuite/19_diagnostics/error_category/operators/equal.cc: Same.\n+\t* testsuite/19_diagnostics/error_category/operators/not_equal.cc: Same.\n+\t* testsuite/19_diagnostics/system_error/cons_virtual_derivation.cc: \n+\tSame.\n+\t* testsuite/19_diagnostics/system_error/cons-1.cc: Same.\n+\t* testsuite/19_diagnostics/system_error/what-1.cc: Same.\n+\t* testsuite/19_diagnostics/system_error/what-2.cc: Same.\n+\t* testsuite/19_diagnostics/system_error/what-big.cc: Same.\n+\t* testsuite/19_diagnostics/system_error/what-3.cc: Same.\n+\t* testsuite/19_diagnostics/system_error/what-4.cc: Same.\n+\n 2008-05-15  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* configure.ac: Don't check AC_LIBTOOL_DLOPEN if using newlib."}, {"sha": "db3c7b19b252dca31d707a5be1b51fe7b4a4c16f", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -1327,7 +1327,7 @@ AC_DEFUN([GLIBCXX_CHECK_SYSTEM_ERROR], [\n \n m4_pushdef([n_syserr], [1])dnl\n m4_foreach([syserr], [EOWNERDEAD, ENOTRECOVERABLE, ENOLINK, EPROTO, ENODATA,\n-\t\t      ENOSR, ENOSTR, ETIME, sys_nerr, EBADMSG, ECANCELED,\n+\t\t      ENOSR, ENOSTR, ETIME, EBADMSG, ECANCELED,\n \t\t      EOVERFLOW, ENOTSUP, EIDRM, ETXTBSY],\n [m4_pushdef([SYSERR], m4_toupper(syserr))dnl\n AC_MSG_CHECKING([for syserr])"}, {"sha": "225e6e5c71fd485be4701f8cb1156eaebd9fefb9", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -70,7 +70,9 @@ GLIBCXX_3.4 {\n #     std::[d-g]*;\n       std::d[a-d]*;\n       std::d[f-z]*;\n-      std::e*;\n+      std::e[a-q]*;\n+      std::error[^_]*;\n+      std::e[s-z]*;\n       std::gslice*;\n       std::h[^a]*;\n       std::i[a-n]*;\n@@ -854,7 +856,14 @@ GLIBCXX_3.4.11 {\n     _ZNSt18condition_variableD2Ev;\n \n     # system_error\n-    _ZSt15system_category;\n+    _ZSt18get_posix_categoryv;\n+    _ZSt19get_system_categoryv;\n+\n+    _ZNKSt10error_code23default_error_conditionEv;\n+    _ZNKSt14error_category23default_error_conditionEi;\n+\n+    _ZNKSt14error_category10equivalentERKSt10error_codei;\n+    _ZNKSt14error_category10equivalentEiRKSt15error_condition;\n \n     _ZTISt14error_category;\n     _ZTSSt14error_category;"}, {"sha": "c0120fa2f053bc0d158be4d8752ee503140ea6a9", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -539,7 +539,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _CharT, typename _Traits>\n     inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __out, const error_code& __e)\n-    { return (__out << __e.category().name().c_str() << ':' << __e.value()); }\n+    { return (__out << __e.category().name() << ':' << __e.value()); }\n #endif\n \n   // [27.6.2.7] standard basic_ostream manipulators"}, {"sha": "ac3b1f75b61f01148c68d5c14887e95cc93c4ecf", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 185, "deletions": 27, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -47,17 +47,52 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  class system_error;\n   class error_code;\n+  class error_condition;\n   class error_category;\n+  class system_error;\n+\n+  /// is_error_code_enum\n+  template<typename _T>\n+    struct is_error_code_enum : public false_type { };\n+\n+  template<> \n+    struct is_error_code_enum<posix_error::posix_errno>\n+    : public true_type { };\n+\n+  /// is_error_condition_enum\n+  template<typename _T>\n+    struct is_error_condition_enum : public false_type { };\n+\n+  template<> \n+    struct is_error_condition_enum<posix_error::posix_errno>\n+    : public true_type { };\n \n-  extern const error_category& system_category;\n \n   /// error_category\n   struct error_category\n   {\n     error_category() { }\n \n+    virtual const char* \n+    name() const = 0;\n+\n+    virtual string \n+    message(int) const = 0;\n+\n+    virtual error_condition\n+    default_error_condition(int __i) const;\n+\n+    virtual bool \n+    equivalent(int __i, const error_condition& __cond) const;\n+\n+    virtual bool \n+    equivalent(const error_code& __code, int __i) const;\n+\n+    bool \n+    operator<(const error_category& __other) const\n+    { return less<const error_category*>()(this, &__other); }\n+\n     bool \n     operator==(const error_category& __other) const\n     { return this == &__other; }\n@@ -66,53 +101,66 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     operator!=(const error_category& __other) const\n     { return this != &__other; }\n \n-    virtual posix_error::posix_errno \n-    posix(int __v) const = 0;\n-\n-    virtual const string& \n-    name() const = 0;\n-\n   private:\n     error_category(const error_category&);\n \n     error_category& \n     operator=(const error_category&);\n   };\n \n+  const error_category& get_posix_category();\n+  const error_category& get_system_category();\n+\n+  static const error_category& system_category = get_system_category();\n+  static const error_category& native_category = get_posix_category();\n+\n   /// error_code\n+  // Implementation-specific error identification\n   struct error_code\n   {\n-    error_code() throw()\n+    error_code()\n     : _M_value(0), _M_cat(&system_category) { }\n \n-    error_code(int __v, const error_category& __cat) throw()\n+    error_code(int __v, const error_category& __cat)\n     : _M_value(__v), _M_cat(&__cat) { }\n \n-    error_code(posix_error::posix_errno __v)\n-    : _M_value(__v), _M_cat(&system_category) { }\n+    template<typename _ErrorCodeEnum>\n+      error_code(_ErrorCodeEnum __e,\n+      typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type* = 0)\n+      : _M_value(__e), _M_cat(&system_category)\n+      { }\n \n     void \n-    assign(int __v, const error_category& __cat) throw()\n+    assign(int __v, const error_category& __cat)\n     {\n       _M_value = __v;\n       _M_cat = &__cat; \n     }\n \n     void \n-    clear() throw()\n+    clear()\n     { \n       _M_value = 0;\n       _M_cat = &system_category;\n-   } \n+    } \n+\n+    template<typename _ErrorCodeEnum>\n+      typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type&\n+      operator=(_ErrorCodeEnum __e)\n+      { _M_value = __e; }\n \n     int\n-    value() const throw() { return _M_value; }\n+    value() const { return _M_value; }\n       \n     const error_category&  \n     category() const { return *_M_cat; }\n \n-    posix_error::posix_errno            \n-    posix() const throw() { return this->category().posix(_M_value); }\n+    error_condition \n+    default_error_condition() const;\n+\n+    string \n+    message() const\n+    { return category().message(value()); }\n \n     // Safe bool idiom.\n     // explicit operator bool() const throw()\n@@ -121,20 +169,127 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n     static void __not_bool_type() { }\n \n-    operator __bool_type() const throw()\n+    operator __bool_type() const\n     { return _M_value != 0 ? &__not_bool_type : false; }\n \n-    bool operator==(const error_code& __other) const\n-    { return value() == __other.value() && category() == __other.category(); }\n-\n-    bool operator!=(const error_code& __other) const\n-    { return !(this == &__other); }\n-\n   private:\n     int            \t\t_M_value;\n     const error_category* \t_M_cat;\n   };\n \n+  error_code \n+  make_error_code(posix_error::posix_errno);\n+\n+  // 19.4.2.5 non-member functions\n+  bool operator<(const error_code& lhs, const error_code& rhs);\n+\n+  template<typename charT, typename traits>\n+    basic_ostream<charT,traits>&\n+    operator<<(basic_ostream<charT,traits>& os, const error_code& __code);\n+\n+\n+  /// error_condition\n+  // Portable error identification\n+  struct error_condition \n+  {\n+    error_condition() : _M_value(0), _M_cat(system_category) { }\n+\n+    error_condition(int __v, const error_category& __cat)     \n+    : _M_value(__v), _M_cat(__cat) { }\n+\n+    template<typename _ErrorEnum>\n+      error_condition(typename enable_if<is_error_condition_enum<_ErrorEnum>::value, _ErrorEnum>::type __v) : _M_value(__v), _M_cat(system_category) { }\n+\n+    void \n+    assign(int val, const error_category& cat);\n+\n+    template<typename _ErrorEnum>\n+      error_condition&\n+      operator=(typename enable_if<is_error_condition_enum<_ErrorEnum>::value, _ErrorEnum>::type __v)\n+      { _M_value = __v; }\n+\n+    void \n+    clear();\n+\n+    // 19.4.3.4 observers\n+    int \n+    value() const { return _M_value; }\n+\n+    const error_category& \n+    category() const { return _M_cat; }\n+\n+    string \n+    message() const\n+    { return category().message(value()); }\n+\n+    // Safe bool idiom.\n+    // explicit operator bool() const throw()\n+    // { return _M_value != 0; }\n+    typedef void (*__bool_type)();\n+\n+    static void __not_bool_type() { }\n+\n+    operator __bool_type() const\n+    { return _M_value != 0 ? &__not_bool_type : false; }\n+\n+  private:\n+    int \t\t\t_M_value;\n+    const error_category& \t_M_cat;\n+  };\n+\n+  error_condition \n+  make_error_condition(posix_error::posix_errno);\n+\n+  // 19.4.3.5 non-member functions\n+  inline bool \n+  operator<(const error_condition& lhs, const error_condition& rhs)\n+  { \n+    bool __t1 = lhs.category() < rhs.category();\n+    bool __t2 = lhs.category() == rhs.category() && lhs.value() < rhs.value();\n+    return __t1 || __t2;\n+  }\n+\n+  // 19.4.4 Comparison operators\n+  inline bool \n+  operator==(const error_code& lhs, const error_code& rhs)\n+  { return lhs.category() == rhs.category() && lhs.value() == rhs.value(); }\n+\n+  inline bool \n+  operator==(const error_code& lhs, const error_condition& rhs)\n+  {\n+    bool __t1 = lhs.category().equivalent(lhs.value(), rhs);\n+    bool __t2 = rhs.category().equivalent(lhs, rhs.value());\n+    return __t1 || __t2;\n+  }\n+\n+  inline bool \n+  operator==(const error_condition& lhs, const error_code& rhs)\n+  {\n+    bool __t1 = rhs.category().equivalent(rhs.value(), lhs);\n+    bool __t2 = lhs.category().equivalent(rhs, lhs.value());\n+    return __t1 || __t2;\n+  }\n+\n+  inline bool \n+  operator==(const error_condition& lhs, const error_condition& rhs)\n+  { return lhs.category() == rhs.category() && lhs.value() == rhs.value(); }\n+\n+  inline bool \n+  operator!=(const error_code& lhs, const error_code& rhs)\n+  { return !(lhs == rhs); }\n+\n+  inline bool \n+  operator!=(const error_code& lhs, const error_condition& rhs)\n+  { return !(lhs == rhs); }\n+\n+  inline bool \n+  operator!=(const error_condition& lhs, const error_code& rhs)\n+  { return !(lhs == rhs); }\n+\n+  inline bool \n+  operator!=(const error_condition& lhs, const error_condition& rhs)\n+  { return !(lhs == rhs); }\n+\n   /// Thrown to indicate error code of underlying system.\n   class system_error : public std::runtime_error\n   {\n@@ -145,10 +300,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     system_error(error_code __ec = error_code())\n     : runtime_error(\"\"), _M_code(__ec) { }\n \n-    system_error(const string& __what, error_code __ec = error_code())\n+    system_error(error_code __ec, const string& __what)\n     : runtime_error(__what), _M_code(__ec) { }\n \n-    system_error(const string& __what, int __v, const error_category& __ecat)\n+    system_error(int __v, const error_category& __ecat)\n+    : runtime_error(\"\"), _M_code(error_code(__v, __ecat)) { }\n+\n+    system_error(int __v, const error_category& __ecat, const string& __what)\n     : runtime_error(__what), _M_code(error_code(__v, __ecat)) { }\n \n     virtual ~system_error() throw();"}, {"sha": "95b65bb326b9ae0ae23a3a71effe5909a3db5e59", "filename": "libstdc++-v3/src/functexcept.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -98,7 +98,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   void\n   __throw_system_error(const char* __s)\n-  { throw system_error(_(__s)); }\n+  { throw system_error(error_code(), _(__s)); }\n \n   void\n   __throw_system_error(int __i)"}, {"sha": "6724ef75a1f252e78e59a7d4e94cf5bdaa400e3c", "filename": "libstdc++-v3/src/system_error.cc", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -1,6 +1,6 @@\n // <system_error> implementation file\n \n-// Copyright (C) 2007\n+// Copyright (C) 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -35,27 +35,23 @@\n \n namespace\n {\n+  using std::string; \n+\n   struct gnu_error_category : public std::error_category\n   {\n-    virtual const std::string& \n+    virtual const char*\n     name() const \n     { \n-      static const std::string category(\"GNU\");\n-      return category;\n+      const char* s = \"GNU\";\n+      return s;\n     }\n \n-    virtual std::posix_error::posix_errno \n-    posix(int __v) const\n+    virtual string \n+    message(int i) const\n     {\n-#ifdef _GLIBCXX_HAVE_SYS_NERR\n-      const int last_errorno = sys_nerr;\n-#else\n-      const int last_errorno = std::numeric_limits<int>::max();\n-#endif\n-      if (__v > 0 && __v <= last_errorno)\n-\treturn std::posix_error::posix_errno(__v);\n-      else\n-\treturn std::posix_error::no_posix_equivalent;\n+      // XXX locale issues: how does one get or set loc.\n+      // _GLIBCXX_HAVE_STRERROR_L, strerror_l(i, cloc)\n+      return string(strerror(i));\n     }\n   };\n \n@@ -64,8 +60,28 @@ namespace\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  const error_category& system_category = gnu_category;\n+  const error_category& \n+  get_posix_category() { return gnu_category; }\n+\n+  const error_category& \n+  get_system_category() { return gnu_category; }\n \n   system_error::~system_error() throw() { }\n \n+  error_condition \n+  error_category::default_error_condition(int __i) const\n+  { return error_condition(__i, *this); }\n+\n+  bool \n+  error_category::equivalent(int __i, const error_condition& __cond) const\n+  { return default_error_condition(__i) == __cond; }\n+\n+  bool \n+  error_category::equivalent(const error_code& __code, int __i) const\n+  { return *this == __code.category() && __code.value() == __i; }\n+\n+  error_condition \n+  error_code::default_error_condition() const\n+  { return category().default_error_condition(value()); }\n+\n _GLIBCXX_END_NAMESPACE"}, {"sha": "b7635fee4c00ae09b317b672825cc253759d5f21", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_category/cons/copy_neg.cc", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fcopy_neg.cc?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -2,7 +2,7 @@\n // { dg-do compile }\n // 2007-08-22 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -21,24 +21,7 @@\n // USA.\n \n #include <system_error>\n-#include <testsuite_hooks.h>\n-\n-namespace __gnu_test\n-{\n-  struct test_category : public std::error_category\n-  { \n-    virtual std::posix_error::posix_errno \n-    posix(int __v) const\n-    { return std::posix_error::posix_errno(__v); }\n-\n-    virtual const std::string& \n-    name() const \n-    { \n-      static std::string s(\"__gnu_test::test_category\");\n-      return s;\n-    }\n-  };\n-}\n+#include <testsuite_error.h>\n \n int main()\n {\n@@ -50,7 +33,7 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"is private\" \"\" { target *-*-* } 76 }\n-// { dg-error \"within this context\" \"\" { target *-*-* } 29 }\n-// { dg-error \"first required here\" \"\" { target *-*-* } 48 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 105 }\n+// { dg-error \"within this context\" \"\" { target *-*-* } 41 }\n+// { dg-error \"first required here\" \"\" { target *-*-* } 31 }\n // { dg-excess-errors \"copy constructor\" }"}, {"sha": "50c4651613175dc12c4bb2ea32cf3695481a1e79", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_category/cons/default.cc", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fdefault.cc?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // 2007-08-22 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,34 +20,7 @@\n // USA.\n \n #include <system_error>\n-#include <testsuite_hooks.h>\n-\n-namespace __gnu_test\n-{\n-  struct test_category : public std::error_category\n-  { \n-    virtual std::posix_error::posix_errno \n-    posix(int __v) const\n-    { return std::posix_error::posix_errno(__v); }\n-\n-    virtual const std::string& \n-    name() const \n-    { \n-      static std::string s(\"__gnu_test::test_category\");\n-      return s;\n-    }\n-  };\n-\n-  struct test_derived_category : public test_category\n-  { \n-    virtual const std::string& \n-    name() const \n-    { \n-      static std::string s(\"__gnu_test::test_derived_category\");\n-      return s;\n-    }\n-  };\n-}\n+#include <testsuite_error.h>\n \n int main()\n {"}, {"sha": "b900521cb214e9f4d659dffec3509b640ca58af0", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_category/operators/equal.cc", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Foperators%2Fequal.cc?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // 2007-08-22 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,34 +20,7 @@\n // USA.\n \n #include <system_error>\n-#include <testsuite_hooks.h>\n-\n-namespace __gnu_test\n-{\n-  struct test_category : public std::error_category\n-  { \n-    virtual std::posix_error::posix_errno \n-    posix(int __v) const\n-    { return std::posix_error::posix_errno(__v); }\n-\n-    virtual const std::string& \n-    name() const \n-    { \n-      static std::string s(\"__gnu_test::test_category\");\n-      return s;\n-    }\n-  };\n-\n-  struct test_derived_category : public test_category\n-  { \n-    virtual const std::string& \n-    name() const \n-    { \n-      static std::string s(\"__gnu_test::test_derived_category\");\n-      return s;\n-    }\n-  };\n-}\n+#include <testsuite_error.h>\n \n int main()\n {"}, {"sha": "eab9940d05677195e6ac05bc39240987ba9ef74f", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_category/operators/not_equal.cc", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Foperators%2Fnot_equal.cc?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // 2007-08-22 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,34 +20,7 @@\n // USA.\n \n #include <system_error>\n-#include <testsuite_hooks.h>\n-\n-namespace __gnu_test\n-{\n-  struct test_category : public std::error_category\n-  { \n-    virtual std::posix_error::posix_errno \n-    posix(int __v) const\n-    { return std::posix_error::posix_errno(__v); }\n-\n-    virtual const std::string& \n-    name() const \n-    { \n-      static std::string s(\"__gnu_test::test_category\");\n-      return s;\n-    }\n-  };\n-\n-  struct test_derived_category : public test_category\n-  { \n-    virtual const std::string& \n-    name() const \n-    { \n-      static std::string s(\"__gnu_test::test_derived_category\");\n-      return s;\n-    }\n-  };\n-}\n+#include <testsuite_error.h>\n \n int main()\n {"}, {"sha": "8ba68d645e198d45e5de09678b79bda232672121", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/cons/1.cc", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // 2007-08-22 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,24 +20,7 @@\n // USA.\n \n #include <system_error>\n-#include <testsuite_hooks.h>\n-\n-namespace __gnu_test\n-{\n-  struct test_category : public std::error_category\n-  { \n-    virtual std::posix_error::posix_errno \n-    posix(int __v) const\n-    { return std::posix_error::posix_errno(__v); }\n-\n-    virtual const std::string& \n-    name() const \n-    { \n-      static std::string s(\"__gnu_test::test_category\");\n-      return s;\n-    }\n-  };\n-}\n+#include <testsuite_error.h>\n \n int main()\n {"}, {"sha": "a8fc65c4c3196139d53ee9b03a4598b71d58731a", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/equal.cc", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fequal.cc?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // 2007-08-22 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,24 +20,7 @@\n // USA.\n \n #include <system_error>\n-#include <testsuite_hooks.h>\n-\n-namespace __gnu_test\n-{\n-  struct test_category : public std::error_category\n-  { \n-    virtual std::posix_error::posix_errno \n-    posix(int __v) const\n-    { return std::posix_error::posix_errno(__v); }\n-\n-    virtual const std::string& \n-    name() const \n-    { \n-      static std::string s(\"__gnu_test::test_category\");\n-      return s;\n-    }\n-  };\n-}\n+#include <testsuite_error.h>\n \n // unspecified bool operator positive tests\n int main()"}, {"sha": "d5d75553bf57ce52aa9c9559ed8e0de30cb35366", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/not_equal.cc", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fnot_equal.cc?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // 2007-08-22 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,24 +20,7 @@\n // USA.\n \n #include <system_error>\n-#include <testsuite_hooks.h>\n-\n-namespace __gnu_test\n-{\n-  struct test_category : public std::error_category\n-  { \n-    virtual std::posix_error::posix_errno \n-    posix(int __v) const\n-    { return std::posix_error::posix_errno(__v); }\n-\n-    virtual const std::string& \n-    name() const \n-    { \n-      static std::string s(\"__gnu_test::test_category\");\n-      return s;\n-    }\n-  };\n-}\n+#include <testsuite_error.h>\n \n // unspecified bool operator positive tests\n int main()"}, {"sha": "9fc24f1f25d702651accd359369462504d1d63dd", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/cons-1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons-1.cc?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // 2007-06-05 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,14 +31,14 @@ int main()\n \n   // 1\n   {\n-    std::system_error err1(s, e);\n+    std::system_error err1(e, s);\n     VERIFY( err1.code() == e ); \n     VERIFY( std::strcmp(err1.runtime_error::what(), s.c_str()) == 0 );\n   }\n \n   // 2\n   {\n-    std::system_error err2(s, 95, std::system_category);\n+    std::system_error err2(95, std::system_category, s);\n     VERIFY( err2.code() == std::error_code(95, std::system_category) ); \n     VERIFY( std::strcmp(err2.runtime_error::what(), s.c_str()) == 0 );\n   }"}, {"sha": "8e67ce5edae1b0807006197b532a0468a674ddaa", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/cons_virtual_derivation.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons_virtual_derivation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons_virtual_derivation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons_virtual_derivation.cc?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -26,6 +26,6 @@\n int main()\n {\n   typedef std::system_error test_type;\n-  __gnu_test::diamond_derivation<test_type, false>::test();\n+  __gnu_test::diamond_derivation<test_type, true>::test();\n   return 0;\n }"}, {"sha": "aef2a95c4ed20fdcc4908e6a0780a4c06fcc09ba", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/what-1.cc", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-1.cc?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2007\n+// Copyright (C) 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,29 +26,31 @@\n #include <cstring>\n #include <testsuite_hooks.h>\n \n+using namespace std;\n+\n // libstdc++/1972\n void test01()\n {\n   bool test __attribute__((unused)) = true;\n-  std::string s(\"lack of sunlight, no water error\");\n+  string s(\"lack of sunlight, no water error\");\n \n   // 1\n-  std::system_error obj1 = std::system_error(s);\n+  system_error obj1 = system_error(error_code(), s);\n \n   // 2\n-  std::system_error obj2(s);\n+  system_error obj2(error_code(), s);\n \n-  VERIFY( std::strcmp(obj1.what(), s.data()) == 0 );\n-  VERIFY( std::strcmp(obj2.what(), s.data()) == 0 );\n+  VERIFY( strcmp(obj1.what(), s.data()) == 0 );\n+  VERIFY( strcmp(obj2.what(), s.data()) == 0 );\n }\n \n void test02()\n {\n   bool test __attribute__((unused)) = true;\n-  std::string s(\"lack of sunlight error\");\n-  std::system_error x(s);\n+  string s(\"lack of sunlight error\");\n+  system_error x(error_code(), s);\n   \n-  VERIFY( std::strcmp(x.what(), s.data()) == 0 );\n+  VERIFY( strcmp(x.what(), s.data()) == 0 );\n }\n \n int main(void)"}, {"sha": "2bb54fb8e265c21714c1c83d4c0f18b51f50f293", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/what-2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-2.cc?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2007\n+// Copyright (C) 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -30,7 +30,7 @@\n class fuzzy_logic : public std::system_error\n {\n public:\n-  fuzzy_logic() : std::system_error(\"whoa\") { }\n+  fuzzy_logic() : std::system_error(std::error_code(), \"whoa\") { }\n };\n \n void test03()"}, {"sha": "76d10b8e8281f39e22fb36128a3034f13f662ca6", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/what-3.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-3.cc?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -41,12 +41,12 @@ void test04()\n   const std::string s(\"CA ISO emergency once again:immediate power down\");\n   const char* strlit1 = \"wish I lived in Palo Alto\";\n   const char* strlit2 = \"...or Santa Barbara\";\n-  std::system_error obj1(s);\n+  std::system_error obj1(std::error_code(), s);\n   \n   // block 01\n   {\n     const std::string s2(strlit1);\n-    std::system_error obj2(s2);\n+    std::system_error obj2(std::error_code(), s2);\n     obj1 = obj2;\n   }\n   allocate_on_stack();\n@@ -55,7 +55,7 @@ void test04()\n   // block 02\n   {\n     const std::string s3(strlit2);\n-    std::system_error obj3 = std::system_error(s3);\n+    std::system_error obj3 = std::system_error(std::error_code(), s3);\n     obj1 = obj3;\n   }\n   allocate_on_stack();     "}, {"sha": "5934982fa479a093b3f768934c06a221245a8195", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/what-4.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-4.cc?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2007\n+// Copyright (C) 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -32,7 +32,7 @@ void test01()\n   bool test __attribute__((unused)) = true;\n   std::string s(\"after nine thirty, this request cannot be met\");\n \n-  std::system_error obj = std::system_error(s, std::posix_error::invalid_argument);\n+  std::system_error obj = std::system_error(std::posix_error::invalid_argument, s);\n   std::string s1(obj.what());\n   std::string s2(obj.what());\n   VERIFY( s1 == s2 );"}, {"sha": "ecf89526b32e83c3abf827c19559b079940db4df", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/what-big.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-big.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-big.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-big.cc?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,7 +30,7 @@ void test01()\n \n   bool test __attribute__((unused)) = true;\n   const std::string xxx(10000, 'x');\n-  test_type t(xxx);\n+  test_type t(std::error_code(), xxx);\n   VERIFY( std::strcmp(t.what(), xxx.c_str()) == 0 );\n }\n "}, {"sha": "56d641874b14afe9f0992b1f1938f61fa42f7628", "filename": "libstdc++-v3/testsuite/util/testsuite_error.h", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70593ad2f1664cd978d11da4ecc01f05babe0c59/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_error.h?ref=70593ad2f1664cd978d11da4ecc01f05babe0c59", "patch": "@@ -0,0 +1,66 @@\n+// -*- C++ -*-\n+// Error handling utils for the C++ library testsuite. \n+//\n+// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <testsuite_hooks.h>\n+\n+#ifndef _TESTSUITE_ERROR_H\n+#define _TESTSUITE_ERROR_H 1\n+\n+namespace __gnu_test\n+{\n+  using std::string;\n+\n+  struct test_category : public std::error_category\n+  { \n+    virtual const char*\n+    name() const \n+    { \n+      const char* s = \"__gnu_test::test_category\";\n+      return s;\n+    }\n+\n+    virtual string \n+    message(int) const\n+    { return string(\"message to be determined\"); }\n+\n+  };\n+\n+  struct test_derived_category : public test_category\n+  { \n+    virtual const char*\n+    name() const \n+    { \n+      const char* s = \"__gnu_test::test_derived_category\";\n+      return s;\n+    }\n+  };\n+\n+}\n+#endif"}]}