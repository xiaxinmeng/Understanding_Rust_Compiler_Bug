{"sha": "b87a8d7de708533d909b808a46d9fe52b7a07e52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg3YThkN2RlNzA4NTMzZDkwOWI4MDhhNDZkOWZlNTJiN2EwN2U1Mg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-03-10T17:23:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-03-10T17:23:06Z"}, "message": "re PR c++/70001 (Infinity compilation time)\n\n\tPR c++/70001\n\t* constexpr.c (cxx_eval_vec_init_1): For pre_init case, reuse\n\treturn value from cxx_eval_constant_expression from earlier\n\telements if it is valid constant initializer requiring no\n\trelocations.\n\n\t* g++.dg/cpp0x/constexpr-70001-1.C: New test.\n\t* g++.dg/cpp0x/constexpr-70001-2.C: New test.\n\t* g++.dg/cpp0x/constexpr-70001-3.C: New test.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r234117", "tree": {"sha": "8be605f86954df50bdc1048c627cdac0526251e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8be605f86954df50bdc1048c627cdac0526251e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b87a8d7de708533d909b808a46d9fe52b7a07e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b87a8d7de708533d909b808a46d9fe52b7a07e52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b87a8d7de708533d909b808a46d9fe52b7a07e52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b87a8d7de708533d909b808a46d9fe52b7a07e52/comments", "author": null, "committer": null, "parents": [{"sha": "48090169ea765dd56274dbc7863be562d14037a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48090169ea765dd56274dbc7863be562d14037a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48090169ea765dd56274dbc7863be562d14037a2"}], "stats": {"total": 91, "additions": 88, "deletions": 3}, "files": [{"sha": "46174cc967a4143b6665f461aa2323ecc8d19b8d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87a8d7de708533d909b808a46d9fe52b7a07e52/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87a8d7de708533d909b808a46d9fe52b7a07e52/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b87a8d7de708533d909b808a46d9fe52b7a07e52", "patch": "@@ -1,3 +1,12 @@\n+2016-03-10  Patrick Palka  <ppalka@gcc.gnu.org>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/70001\n+\t* constexpr.c (cxx_eval_vec_init_1): For pre_init case, reuse\n+\treturn value from cxx_eval_constant_expression from earlier\n+\telements if it is valid constant initializer requiring no\n+\trelocations.\n+\n 2016-03-10  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/70153"}, {"sha": "5f97c9dad192bc0bc0ebe5380b85ec1b13f24872", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87a8d7de708533d909b808a46d9fe52b7a07e52/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87a8d7de708533d909b808a46d9fe52b7a07e52/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=b87a8d7de708533d909b808a46d9fe52b7a07e52", "patch": "@@ -2340,6 +2340,7 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n   vec<constructor_elt, va_gc> **p = &CONSTRUCTOR_ELTS (ctx->ctor);\n   vec_alloc (*p, max + 1);\n   bool pre_init = false;\n+  tree pre_init_elt = NULL_TREE;\n   unsigned HOST_WIDE_INT i;\n \n   /* For the default constructor, build up a call to the default\n@@ -2389,9 +2390,18 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n \t{\n \t  /* Initializing an element using value or default initialization\n \t     we just pre-built above.  */\n-\t  eltinit = (cxx_eval_constant_expression\n-\t\t     (&new_ctx, init,\n-\t\t      lval, non_constant_p, overflow_p));\n+\t  if (pre_init_elt == NULL_TREE)\n+\t    pre_init_elt\n+\t      = cxx_eval_constant_expression (&new_ctx, init, lval,\n+\t\t\t\t\t      non_constant_p, overflow_p);\n+\t  eltinit = pre_init_elt;\n+\t  /* Don't reuse the result of cxx_eval_constant_expression\n+\t     call if it isn't a constant initializer or if it requires\n+\t     relocations.  */\n+\t  if (initializer_constant_valid_p (pre_init_elt,\n+\t\t\t\t\t    TREE_TYPE (pre_init_elt))\n+\t      != null_pointer_node)\n+\t    pre_init_elt = NULL_TREE;\n \t}\n       else\n \t{"}, {"sha": "3043ab95b2257a3ed4d38dadcb1bbfc5e5f7b237", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87a8d7de708533d909b808a46d9fe52b7a07e52/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87a8d7de708533d909b808a46d9fe52b7a07e52/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b87a8d7de708533d909b808a46d9fe52b7a07e52", "patch": "@@ -1,3 +1,11 @@\n+2016-03-10  Patrick Palka  <ppalka@gcc.gnu.org>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/70001\n+\t* g++.dg/cpp0x/constexpr-70001-1.C: New test.\n+\t* g++.dg/cpp0x/constexpr-70001-2.C: New test.\n+\t* g++.dg/cpp0x/constexpr-70001-3.C: New test.\n+\n 2016-03-10  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR lto/69589"}, {"sha": "e68ff0e58a05cb97e9d690ceb251f8192154ecfa", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-70001-1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87a8d7de708533d909b808a46d9fe52b7a07e52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70001-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87a8d7de708533d909b808a46d9fe52b7a07e52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70001-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70001-1.C?ref=b87a8d7de708533d909b808a46d9fe52b7a07e52", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/70001\n+// { dg-do compile { target c++11 } }\n+\n+struct B\n+{\n+  int a;\n+  constexpr B () : a (0) { }\n+};\n+\n+struct A\n+{\n+  B b[1 << 19];\n+} c;"}, {"sha": "96f5ad42398c5f7614f84381748fe549e98eb478", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-70001-2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87a8d7de708533d909b808a46d9fe52b7a07e52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70001-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87a8d7de708533d909b808a46d9fe52b7a07e52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70001-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70001-2.C?ref=b87a8d7de708533d909b808a46d9fe52b7a07e52", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/70001\n+// { dg-do run { target c++11 } }\n+\n+struct B\n+{\n+  struct B *a;\n+  constexpr B () : a (this) { }\n+};\n+\n+constexpr int N = 1 << 4;\n+struct A { B c[N]; } d;\n+\n+int\n+main ()\n+{\n+  for (int i = 0; i < N; ++i)\n+    if (d.c[i].a != &d.c[i])\n+      __builtin_abort ();\n+}"}, {"sha": "99d4c38895d3a021560240e2c17edeeed45ba2c7", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-70001-3.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87a8d7de708533d909b808a46d9fe52b7a07e52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70001-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87a8d7de708533d909b808a46d9fe52b7a07e52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70001-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70001-3.C?ref=b87a8d7de708533d909b808a46d9fe52b7a07e52", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/70001\n+// { dg-do compile { target c++11 } }\n+\n+#include <array>\n+#include <complex>\n+\n+typedef std::complex<double> cd;\n+\n+const int LOG = 17;\n+const int N = (1 << LOG);\n+\n+std::array<cd, N> a;\n+std::array<cd, N> b;\n+\n+void\n+foo (std::array<cd, N> &arr)\n+{\n+  std::array<std::array<cd, N>, LOG + 1> f;\n+}\n+\n+int\n+main ()\n+{\n+  foo (a);\n+  foo (b);\n+}"}]}