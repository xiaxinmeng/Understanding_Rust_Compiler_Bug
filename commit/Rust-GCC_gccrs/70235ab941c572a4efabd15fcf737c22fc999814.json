{"sha": "70235ab941c572a4efabd15fcf737c22fc999814", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAyMzVhYjk0MWM1NzJhNGVmYWJkMTVmY2Y3MzdjMjJmYzk5OTgxNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-03-12T13:04:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-03-12T13:04:37Z"}, "message": "re PR debug/43329 (Early inlining causes suboptimal debug info)\n\n\tPR debug/43329\n\t* tree-inline.c (remap_decls): Put old_var rather than origin_var\n\tinto *nonlocalized_list vector.\n\t* dwarf2out.c (gen_formal_parameter_die): Call decl_ultimate_origin\n\teven if origin is non-NULL.\n\t(gen_variable_die): Likewise.\n\t(process_scope_var): Don't change origin.\n\t(gen_decl_die): Likewise.\n\t* tree-cfgcleanup.c (remove_forwarder_block): Check single_pred_p\n\tbefore adding new edges instead of after it, fix moving over\n\tdebug stmts.\n\n\t* gcc.dg/guality/pr43329-1.c: New test.\n\nFrom-SVN: r157402", "tree": {"sha": "0b29e6fc9123592f39dc916a03b18fd320d0c99f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b29e6fc9123592f39dc916a03b18fd320d0c99f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70235ab941c572a4efabd15fcf737c22fc999814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70235ab941c572a4efabd15fcf737c22fc999814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70235ab941c572a4efabd15fcf737c22fc999814", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70235ab941c572a4efabd15fcf737c22fc999814/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d76f631a86565e06d58ee1dbf63a386fd5e9fdec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d76f631a86565e06d58ee1dbf63a386fd5e9fdec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d76f631a86565e06d58ee1dbf63a386fd5e9fdec"}], "stats": {"total": 113, "additions": 93, "deletions": 20}, "files": [{"sha": "481a2480eb82a6898be6add518e7ca2db49e9e40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70235ab941c572a4efabd15fcf737c22fc999814/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70235ab941c572a4efabd15fcf737c22fc999814/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70235ab941c572a4efabd15fcf737c22fc999814", "patch": "@@ -1,3 +1,17 @@\n+2010-03-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/43329\n+\t* tree-inline.c (remap_decls): Put old_var rather than origin_var\n+\tinto *nonlocalized_list vector.\n+\t* dwarf2out.c (gen_formal_parameter_die): Call decl_ultimate_origin\n+\teven if origin is non-NULL.\n+\t(gen_variable_die): Likewise.\n+\t(process_scope_var): Don't change origin.\n+\t(gen_decl_die): Likewise.\n+\t* tree-cfgcleanup.c (remove_forwarder_block): Check single_pred_p\n+\tbefore adding new edges instead of after it, fix moving over\n+\tdebug stmts.\n+\n 2010-03-11  David S. Miller  <davem@davemloft.net>\n \n \t* configure.ac (gcc_cv_as_cfi_advance_working): Skip a multiple of four."}, {"sha": "c76d54f39c2a9b99b70583b4eeaf63a1f92b0929", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70235ab941c572a4efabd15fcf737c22fc999814/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70235ab941c572a4efabd15fcf737c22fc999814/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=70235ab941c572a4efabd15fcf737c22fc999814", "patch": "@@ -17382,14 +17382,16 @@ gen_formal_parameter_die (tree node, tree origin, bool emit_name_p,\n \t\t\t  dw_die_ref context_die)\n {\n   tree node_or_origin = node ? node : origin;\n+  tree ultimate_origin;\n   dw_die_ref parm_die\n     = new_die (DW_TAG_formal_parameter, context_die, node);\n \n   switch (TREE_CODE_CLASS (TREE_CODE (node_or_origin)))\n     {\n     case tcc_declaration:\n-      if (!origin)\n-        origin = decl_ultimate_origin (node);\n+      ultimate_origin = decl_ultimate_origin (node_or_origin);\n+      if (node || ultimate_origin)\n+\torigin = ultimate_origin;\n       if (origin != NULL)\n \tadd_abstract_origin_attribute (parm_die, origin);\n       else\n@@ -18106,15 +18108,16 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n   HOST_WIDE_INT off;\n   tree com_decl;\n   tree decl_or_origin = decl ? decl : origin;\n+  tree ultimate_origin;\n   dw_die_ref var_die;\n   dw_die_ref old_die = decl ? lookup_decl_die (decl) : NULL;\n   dw_die_ref origin_die;\n   int declaration = (DECL_EXTERNAL (decl_or_origin)\n \t\t     || class_or_namespace_scope_p (context_die));\n \n-  if (!origin)\n-    origin = decl_ultimate_origin (decl);\n-\n+  ultimate_origin = decl_ultimate_origin (decl_or_origin);\n+  if (decl || ultimate_origin)\n+    origin = ultimate_origin;\n   com_decl = fortran_common (decl_or_origin, &off);\n \n   /* Symbol in common gets emitted as a child of the common block, in the form\n@@ -19160,10 +19163,6 @@ process_scope_var (tree stmt, tree decl, tree origin, dw_die_ref context_die)\n {\n   dw_die_ref die;\n   tree decl_or_origin = decl ? decl : origin;\n-  tree ultimate_origin = origin ? decl_ultimate_origin (origin) : NULL;\n-\n-  if (ultimate_origin)\n-    origin = ultimate_origin;\n \n   if (TREE_CODE (decl_or_origin) == FUNCTION_DECL)\n     die = lookup_decl_die (decl_or_origin);\n@@ -19435,7 +19434,7 @@ static void\n gen_decl_die (tree decl, tree origin, dw_die_ref context_die)\n {\n   tree decl_or_origin = decl ? decl : origin;\n-  tree class_origin = NULL;\n+  tree class_origin = NULL, ultimate_origin;\n \n   if (DECL_P (decl_or_origin) && DECL_IGNORED_P (decl_or_origin))\n     return;\n@@ -19481,7 +19480,9 @@ gen_decl_die (tree decl, tree origin, dw_die_ref context_die)\n \n       /* If we're emitting a clone, emit info for the abstract instance.  */\n       if (origin || DECL_ORIGIN (decl) != decl)\n-\tdwarf2out_abstract_function (origin ? origin : DECL_ABSTRACT_ORIGIN (decl));\n+\tdwarf2out_abstract_function (origin\n+\t\t\t\t     ? DECL_ORIGIN (origin)\n+\t\t\t\t     : DECL_ABSTRACT_ORIGIN (decl));\n \n       /* If we're emitting an out-of-line copy of an inline function,\n \t emit info for the abstract instance and set up to refer to it.  */\n@@ -19580,9 +19581,9 @@ gen_decl_die (tree decl, tree origin, dw_die_ref context_die)\n \t complicated because of the possibility that the VAR_DECL really\n \t represents an inlined instance of a formal parameter for an inline\n \t function.  */\n-      if (!origin)\n-        origin = decl_ultimate_origin (decl);\n-      if (origin != NULL_TREE && TREE_CODE (origin) == PARM_DECL)\n+      ultimate_origin = decl_ultimate_origin (decl_or_origin);\n+      if (ultimate_origin != NULL_TREE\n+\t  && TREE_CODE (ultimate_origin) == PARM_DECL)\n \tgen_formal_parameter_die (decl, origin,\n \t\t\t\t  true /* Emit name attribute.  */,\n \t\t\t\t  context_die);"}, {"sha": "ceb6d8486747a29aa8ab9033e45f54cd8cf60a07", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70235ab941c572a4efabd15fcf737c22fc999814/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70235ab941c572a4efabd15fcf737c22fc999814/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70235ab941c572a4efabd15fcf737c22fc999814", "patch": "@@ -1,3 +1,8 @@\n+2010-03-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/43329\n+\t* gcc.dg/guality/pr43329-1.c: New test.\n+\n 2010-03-11  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/43257"}, {"sha": "e80888e40e57379cd7cd2a5182df45b5bae10c0b", "filename": "gcc/testsuite/gcc.dg/guality/pr43329-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70235ab941c572a4efabd15fcf737c22fc999814/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr43329-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70235ab941c572a4efabd15fcf737c22fc999814/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr43329-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr43329-1.c?ref=70235ab941c572a4efabd15fcf737c22fc999814", "patch": "@@ -0,0 +1,50 @@\n+/* PR debug/43329 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+static inline void\n+foo (int argx)\n+{\n+  int varx = argx;\n+  __asm__ volatile (\"nop\");\t\t\t/* { dg-final { gdb-test 10 \"argx\" \"25\" } } */\n+  __asm__ volatile (\"nop\" : : \"g\" (varx));\t/* { dg-final { gdb-test 10 \"varx\" \"25\" } } */\n+}\n+\n+int i;\n+\n+__attribute__((noinline))\n+void baz (int x)\n+{\n+  asm volatile (\"\" : : \"r\" (x) : \"memory\");\n+}\n+\n+static inline void\n+bar (void)\n+{\n+  foo (25);\n+  i = i + 2;\n+  i = i * 2;\n+  i = i - 4;\n+  baz (i);\n+  i = i * 2;\n+  i = i >> 1;\n+  i = i << 6;\n+  baz (i);\n+  i = i + 2;\n+  i = i * 2;\n+  i = i - 4;\n+  baz (i);\n+  i = i * 2;\n+  i = i >> 6;\n+  i = i << 1;\n+  baz (i);\n+}\n+\n+int\n+main (void)\n+{\n+  __asm__ volatile (\"\" : \"=r\" (i) : \"0\" (0));\n+  bar ();\n+  bar ();\n+  return i;\n+}"}, {"sha": "eae0c84cef5b45e1235fdf8b724445209a02d61a", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70235ab941c572a4efabd15fcf737c22fc999814/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70235ab941c572a4efabd15fcf737c22fc999814/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=70235ab941c572a4efabd15fcf737c22fc999814", "patch": "@@ -376,6 +376,7 @@ remove_forwarder_block (basic_block bb)\n   gimple label;\n   edge_iterator ei;\n   gimple_stmt_iterator gsi, gsi_to;\n+  bool can_move_debug_stmts;\n \n   /* We check for infinite loops already in tree_forwarder_block_p.\n      However it may happen that the infinite loop is created\n@@ -424,6 +425,8 @@ remove_forwarder_block (basic_block bb)\n \t}\n     }\n \n+  can_move_debug_stmts = single_pred_p (dest);\n+\n   /* Redirect the edges.  */\n   for (ei = ei_start (bb->preds); (e = ei_safe_edge (ei)); )\n     {\n@@ -480,15 +483,16 @@ remove_forwarder_block (basic_block bb)\n \n   /* Move debug statements if the destination has just a single\n      predecessor.  */\n-  if (single_pred_p (dest))\n+  if (can_move_debug_stmts)\n     {\n       gsi_to = gsi_after_labels (dest);\n       for (gsi = gsi_after_labels (bb); !gsi_end_p (gsi); )\n \t{\n-\t  if (!is_gimple_debug (gsi_stmt (gsi)))\n+\t  gimple debug = gsi_stmt (gsi);\n+\t  if (!is_gimple_debug (debug))\n \t    break;\n \t  gsi_remove (&gsi, false);\n-\t  gsi_insert_before (&gsi_to, label, GSI_SAME_STMT);\n+\t  gsi_insert_before (&gsi_to, debug, GSI_SAME_STMT);\n \t}\n     }\n "}, {"sha": "f3c420475df22909805edb8f762b1f08b1ebce21", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70235ab941c572a4efabd15fcf737c22fc999814/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70235ab941c572a4efabd15fcf737c22fc999814/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=70235ab941c572a4efabd15fcf737c22fc999814", "patch": "@@ -533,7 +533,6 @@ remap_decls (tree decls, VEC(tree,gc) **nonlocalized_list, copy_body_data *id)\n   for (old_var = decls; old_var; old_var = TREE_CHAIN (old_var))\n     {\n       tree new_var;\n-      tree origin_var = DECL_ORIGIN (old_var);\n \n       if (can_be_nonlocal (old_var, id))\n \t{\n@@ -545,7 +544,7 @@ remap_decls (tree decls, VEC(tree,gc) **nonlocalized_list, copy_body_data *id)\n \t  if ((!optimize || debug_info_level > DINFO_LEVEL_TERSE)\n \t      && !DECL_IGNORED_P (old_var)\n \t      && nonlocalized_list)\n-\t    VEC_safe_push (tree, gc, *nonlocalized_list, origin_var);\n+\t    VEC_safe_push (tree, gc, *nonlocalized_list, old_var);\n \t  continue;\n \t}\n \n@@ -563,7 +562,7 @@ remap_decls (tree decls, VEC(tree,gc) **nonlocalized_list, copy_body_data *id)\n \t  if ((!optimize || debug_info_level > DINFO_LEVEL_TERSE)\n \t      && !DECL_IGNORED_P (old_var)\n \t      && nonlocalized_list)\n-\t    VEC_safe_push (tree, gc, *nonlocalized_list, origin_var);\n+\t    VEC_safe_push (tree, gc, *nonlocalized_list, old_var);\n \t}\n       else\n \t{"}]}