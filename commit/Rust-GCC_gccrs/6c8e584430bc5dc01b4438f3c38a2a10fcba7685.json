{"sha": "6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM4ZTU4NDQzMGJjNWRjMDFiNDQzOGYzYzM4YTJhMTBmY2JhNzY4NQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-28T14:08:25Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-28T18:47:14Z"}, "message": "diagnostic_metadata: unbreak xgettext (v2)\n\nChanged in v2:\n- rename from warning_with_metadata_at to warning_meta\n- fix test plugins\n\nWhile C++ can have overloads, xgettext can't deal with overloads that have\ndifferent argument positions, leading to two failures in \"make gcc.pot\":\n\nemit_diagnostic_valist used incompatibly as both\n--keyword=emit_diagnostic_valist:4\n--flag=emit_diagnostic_valist:4:gcc-internal-format and\n--keyword=emit_diagnostic_valist:5\n--flag=emit_diagnostic_valist:5:gcc-internal-format\n\nwarning_at used incompatibly as both\n--keyword=warning_at:3 --flag=warning_at:3:gcc-internal-format and\n--keyword=warning_at:4 --flag=warning_at:4:gcc-internal-format\n\nThe emit_diagnostic_valist overload isn't used anywhere (I think it's\na leftover from an earlier iteration of the analyzer patch kit).\n\nThe warning_at overload is used throughout the analyzer but nowhere else.\n\nIdeally I'd like to consolidate this argument with something\nconstructable in various ways:\n- from a metadata and an int or\n- from an int (or, better an \"enum opt_code\"),\nso that the overload happens when implicitly choosing the ctor, but\nthat feels like stage 1 material.\n\nIn the meantime, fix xgettext by deleting the unused overload and\nrenaming the used one.\n\ngcc/analyzer/ChangeLog:\n\t* region-model.cc (poisoned_value_diagnostic::emit): Update for\n\trenaming of warning_at overload to warning_meta.\n\t* sm-file.cc (file_leak::emit): Likewise.\n\t* sm-malloc.cc (double_free::emit): Likewise.\n\t(possible_null_deref::emit): Likewise.\n\t(possible_null_arg::emit): Likewise.\n\t(null_deref::emit): Likewise.\n\t(null_arg::emit): Likewise.\n\t(use_after_free::emit): Likewise.\n\t(malloc_leak::emit): Likewise.\n\t(free_of_non_heap::emit): Likewise.\n\t* sm-sensitive.cc (exposure_through_output_file::emit): Likewise.\n\t* sm-signal.cc (signal_unsafe_call::emit): Likewise.\n\t* sm-taint.cc (tainted_array_index::emit): Likewise.\n\ngcc/ChangeLog:\n\t* diagnostic-core.h (warning_at): Rename overload to...\n\t(warning_meta): ...this.\n\t(emit_diagnostic_valist): Delete decl of overload taking\n\tdiagnostic_metadata.\n\t* diagnostic.c (emit_diagnostic_valist): Likewise for defn.\n\t(warning_at): Rename overload taking diagnostic_metadata to...\n\t(warning_meta): ...this.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/plugin/diagnostic_plugin_test_metadata.c: Update for\n\trenaming of warning_at overload to warning_meta.\n\t* gcc.dg/plugin/diagnostic_plugin_test_paths.c: Likewise.", "tree": {"sha": "fe200933f9ffe9a7bc6b93cdcd7daa308c1d5365", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe200933f9ffe9a7bc6b93cdcd7daa308c1d5365"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad690d79cfbb905c5546c9333c5fd089d906505b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad690d79cfbb905c5546c9333c5fd089d906505b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad690d79cfbb905c5546c9333c5fd089d906505b"}], "stats": {"total": 188, "additions": 106, "deletions": 82}, "files": [{"sha": "513474842510e3baeb9cd27620a494b65fbe914e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "patch": "@@ -1,3 +1,13 @@\n+2020-01-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-core.h (warning_at): Rename overload to...\n+\t(warning_meta): ...this.\n+\t(emit_diagnostic_valist): Delete decl of overload taking\n+\tdiagnostic_metadata.\n+\t* diagnostic.c (emit_diagnostic_valist): Likewise for defn.\n+\t(warning_at): Rename overload taking diagnostic_metadata to...\n+\t(warning_meta): ...this.\n+\n 2020-01-28  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/93439"}, {"sha": "cea973d9a47d5cae43eb9403e56fd953cdd1d33c", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "patch": "@@ -1,3 +1,20 @@\n+2020-01-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model.cc (poisoned_value_diagnostic::emit): Update for\n+\trenaming of warning_at overload to warning_meta.\n+\t* sm-file.cc (file_leak::emit): Likewise.\n+\t* sm-malloc.cc (double_free::emit): Likewise.\n+\t(possible_null_deref::emit): Likewise.\n+\t(possible_null_arg::emit): Likewise.\n+\t(null_deref::emit): Likewise.\n+\t(null_arg::emit): Likewise.\n+\t(use_after_free::emit): Likewise.\n+\t(malloc_leak::emit): Likewise.\n+\t(free_of_non_heap::emit): Likewise.\n+\t* sm-sensitive.cc (exposure_through_output_file::emit): Likewise.\n+\t* sm-signal.cc (signal_unsafe_call::emit): Likewise.\n+\t* sm-taint.cc (tainted_array_index::emit): Likewise.\n+\n 2020-01-27  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93451"}, {"sha": "acaadcf9d3be448fe14354a6f990880a33072f58", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "patch": "@@ -3827,27 +3827,26 @@ class poisoned_value_diagnostic\n \t{\n \t  diagnostic_metadata m;\n \t  m.add_cwe (457); /* \"CWE-457: Use of Uninitialized Variable\".  */\n-\t  return warning_at (rich_loc, m,\n-\t\t\t     OPT_Wanalyzer_use_of_uninitialized_value,\n-\t\t\t     \"use of uninitialized value %qE\",\n-\t\t\t     m_expr);\n+\t  return warning_meta (rich_loc, m,\n+\t\t\t       OPT_Wanalyzer_use_of_uninitialized_value,\n+\t\t\t       \"use of uninitialized value %qE\",\n+\t\t\t       m_expr);\n \t}\n \tbreak;\n       case POISON_KIND_FREED:\n \t{\n \t  diagnostic_metadata m;\n \t  m.add_cwe (416); /* \"CWE-416: Use After Free\".  */\n-\t  return warning_at (rich_loc, m,\n-\t\t\t     OPT_Wanalyzer_use_after_free,\n-\t\t\t     \"use after %<free%> of %qE\",\n-\t\t\t     m_expr);\n+\t  return warning_meta (rich_loc, m,\n+\t\t\t       OPT_Wanalyzer_use_after_free,\n+\t\t\t       \"use after %<free%> of %qE\",\n+\t\t\t       m_expr);\n \t}\n \tbreak;\n       case POISON_KIND_POPPED_STACK:\n \t{\n-\t  diagnostic_metadata m;\n \t  /* TODO: which CWE?  */\n-\t  return warning_at (rich_loc, m,\n+\t  return warning_at (rich_loc,\n \t\t\t     OPT_Wanalyzer_use_of_pointer_in_stale_stack_frame,\n \t\t\t     \"use of pointer %qE within stale stack frame\",\n \t\t\t     m_expr);"}, {"sha": "7c546997a0cd9a2fa00125917ff5a47f3b7e3ad9", "filename": "gcc/analyzer/sm-file.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Fanalyzer%2Fsm-file.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Fanalyzer%2Fsm-file.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-file.cc?ref=6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "patch": "@@ -178,9 +178,9 @@ class file_leak : public file_diagnostic\n     /* CWE-775: \"Missing Release of File Descriptor or Handle after\n        Effective Lifetime\". */\n     m.add_cwe (775);\n-    return warning_at (rich_loc, m, OPT_Wanalyzer_file_leak,\n-\t\t       \"leak of FILE %qE\",\n-\t\t       m_arg);\n+    return warning_meta (rich_loc, m, OPT_Wanalyzer_file_leak,\n+\t\t\t \"leak of FILE %qE\",\n+\t\t\t m_arg);\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)"}, {"sha": "9415a0741354036630bf2c98b524f047e0cfaab2", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "patch": "@@ -145,8 +145,8 @@ class double_free : public malloc_diagnostic\n     auto_diagnostic_group d;\n     diagnostic_metadata m;\n     m.add_cwe (415); /* CWE-415: Double Free.  */\n-    return warning_at (rich_loc, m, OPT_Wanalyzer_double_free,\n-\t\t       \"double-%<free%> of %qE\", m_arg);\n+    return warning_meta (rich_loc, m, OPT_Wanalyzer_double_free,\n+\t\t\t \"double-%<free%> of %qE\", m_arg);\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n@@ -235,8 +235,9 @@ class possible_null_deref : public possible_null\n     /* CWE-690: Unchecked Return Value to NULL Pointer Dereference.  */\n     diagnostic_metadata m;\n     m.add_cwe (690);\n-    return warning_at (rich_loc, m, OPT_Wanalyzer_possible_null_dereference,\n-\t\t       \"dereference of possibly-NULL %qE\", m_arg);\n+    return warning_meta (rich_loc, m,\n+\t\t\t OPT_Wanalyzer_possible_null_dereference,\n+\t\t\t \"dereference of possibly-NULL %qE\", m_arg);\n   }\n \n   label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n@@ -297,9 +298,9 @@ class possible_null_arg : public possible_null\n     diagnostic_metadata m;\n     m.add_cwe (690);\n     bool warned\n-      = warning_at (rich_loc, m, OPT_Wanalyzer_possible_null_argument,\n-\t\t    \"use of possibly-NULL %qE where non-null expected\",\n-\t\t    m_arg);\n+      = warning_meta (rich_loc, m, OPT_Wanalyzer_possible_null_argument,\n+\t\t      \"use of possibly-NULL %qE where non-null expected\",\n+\t\t      m_arg);\n     if (warned)\n       inform_nonnull_attribute (m_fndecl, m_arg_idx);\n     return warned;\n@@ -338,8 +339,9 @@ class null_deref : public malloc_diagnostic\n     /* CWE-690: Unchecked Return Value to NULL Pointer Dereference.  */\n     diagnostic_metadata m;\n     m.add_cwe (690);\n-    return warning_at (rich_loc, m, OPT_Wanalyzer_null_dereference,\n-\t\t       \"dereference of NULL %qE\", m_arg);\n+    return warning_meta (rich_loc, m,\n+\t\t\t OPT_Wanalyzer_null_dereference,\n+\t\t\t \"dereference of NULL %qE\", m_arg);\n   }\n \n   label_text describe_return_of_state (const evdesc::return_of_state &info)\n@@ -386,8 +388,9 @@ class null_arg : public malloc_diagnostic\n     auto_diagnostic_group d;\n     diagnostic_metadata m;\n     m.add_cwe (690);\n-    bool warned = warning_at (rich_loc, m, OPT_Wanalyzer_null_argument,\n-\t\t\t      \"use of NULL %qE where non-null expected\", m_arg);\n+    bool warned = warning_meta (rich_loc, m, OPT_Wanalyzer_null_argument,\n+\t\t\t\t\"use of NULL %qE where non-null expected\",\n+\t\t\t\tm_arg);\n     if (warned)\n       inform_nonnull_attribute (m_fndecl, m_arg_idx);\n     return warned;\n@@ -419,8 +422,8 @@ class use_after_free : public malloc_diagnostic\n     /* CWE-416: Use After Free.  */\n     diagnostic_metadata m;\n     m.add_cwe (416);\n-    return warning_at (rich_loc, m, OPT_Wanalyzer_use_after_free,\n-\t\t       \"use after %<free%> of %qE\", m_arg);\n+    return warning_meta (rich_loc, m, OPT_Wanalyzer_use_after_free,\n+\t\t\t \"use after %<free%> of %qE\", m_arg);\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n@@ -459,8 +462,8 @@ class malloc_leak : public malloc_diagnostic\n   {\n     diagnostic_metadata m;\n     m.add_cwe (401);\n-    return warning_at (rich_loc, m, OPT_Wanalyzer_malloc_leak,\n-\t\t       \"leak of %qE\", m_arg);\n+    return warning_meta (rich_loc, m, OPT_Wanalyzer_malloc_leak,\n+\t\t\t \"leak of %qE\", m_arg);\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n@@ -514,16 +517,16 @@ class free_of_non_heap : public malloc_diagnostic\n       default:\n \tgcc_unreachable ();\n       case KIND_UNKNOWN:\n-\treturn warning_at (rich_loc, m, OPT_Wanalyzer_free_of_non_heap,\n-\t\t\t   \"%<free%> of %qE which points to memory\"\n-\t\t\t   \" not on the heap\",\n-\t\t\t   m_arg);\n+\treturn warning_meta (rich_loc, m, OPT_Wanalyzer_free_of_non_heap,\n+\t\t\t     \"%<free%> of %qE which points to memory\"\n+\t\t\t     \" not on the heap\",\n+\t\t\t     m_arg);\n \tbreak;\n       case KIND_ALLOCA:\n-\treturn warning_at (rich_loc, m, OPT_Wanalyzer_free_of_non_heap,\n-\t\t\t   \"%<free%> of memory allocated on the stack by\"\n-\t\t\t   \" %qs (%qE) will corrupt the heap\",\n-\t\t\t   \"alloca\", m_arg);\n+\treturn warning_meta (rich_loc, m, OPT_Wanalyzer_free_of_non_heap,\n+\t\t\t     \"%<free%> of memory allocated on the stack by\"\n+\t\t\t     \" %qs (%qE) will corrupt the heap\",\n+\t\t\t     \"alloca\", m_arg);\n \tbreak;\n       }\n   }"}, {"sha": "ff0c3284843933b60a4c81e6cf89b7bb2253b75b", "filename": "gcc/analyzer/sm-sensitive.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Fanalyzer%2Fsm-sensitive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Fanalyzer%2Fsm-sensitive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-sensitive.cc?ref=6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "patch": "@@ -105,9 +105,10 @@ class exposure_through_output_file\n     diagnostic_metadata m;\n     /* CWE-532: Information Exposure Through Log Files */\n     m.add_cwe (532);\n-    return warning_at (rich_loc, m, OPT_Wanalyzer_exposure_through_output_file,\n-\t\t       \"sensitive value %qE written to output file\",\n-\t\t       m_arg);\n+    return warning_meta (rich_loc, m,\n+\t\t\t OPT_Wanalyzer_exposure_through_output_file,\n+\t\t\t \"sensitive value %qE written to output file\",\n+\t\t\t m_arg);\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)"}, {"sha": "247e0ec750c705f26d95e86b7f0abca137f8b294", "filename": "gcc/analyzer/sm-signal.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Fanalyzer%2Fsm-signal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Fanalyzer%2Fsm-signal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-signal.cc?ref=6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "patch": "@@ -126,10 +126,10 @@ class signal_unsafe_call\n     diagnostic_metadata m;\n     /* CWE-479: Signal Handler Use of a Non-reentrant Function.  */\n     m.add_cwe (479);\n-    return warning_at (rich_loc, m,\n-\t\t       OPT_Wanalyzer_unsafe_call_within_signal_handler,\n-\t\t       \"call to %qD from within signal handler\",\n-\t\t       m_unsafe_fndecl);\n+    return warning_meta (rich_loc, m,\n+\t\t\t OPT_Wanalyzer_unsafe_call_within_signal_handler,\n+\t\t\t \"call to %qD from within signal handler\",\n+\t\t\t m_unsafe_fndecl);\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)"}, {"sha": "dff43a4ea800ed41b80d7fb0602d7c97b51e5995", "filename": "gcc/analyzer/sm-taint.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Fanalyzer%2Fsm-taint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Fanalyzer%2Fsm-taint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-taint.cc?ref=6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "patch": "@@ -114,22 +114,22 @@ class tainted_array_index\n       default:\n \tgcc_unreachable ();\n       case BOUNDS_NONE:\n-\treturn warning_at (rich_loc, m, OPT_Wanalyzer_tainted_array_index,\n-\t\t\t   \"use of tainted value %qE in array lookup\"\n-\t\t\t   \" without bounds checking\",\n-\t\t\t   m_arg);\n+\treturn warning_meta (rich_loc, m, OPT_Wanalyzer_tainted_array_index,\n+\t\t\t     \"use of tainted value %qE in array lookup\"\n+\t\t\t     \" without bounds checking\",\n+\t\t\t     m_arg);\n \tbreak;\n       case BOUNDS_UPPER:\n-\treturn warning_at (rich_loc, m, OPT_Wanalyzer_tainted_array_index,\n-\t\t\t   \"use of tainted value %qE in array lookup\"\n-\t\t\t   \" without lower-bounds checking\",\n-\t\t\t   m_arg);\n+\treturn warning_meta (rich_loc, m, OPT_Wanalyzer_tainted_array_index,\n+\t\t\t     \"use of tainted value %qE in array lookup\"\n+\t\t\t     \" without lower-bounds checking\",\n+\t\t\t     m_arg);\n \tbreak;\n       case BOUNDS_LOWER:\n-\treturn warning_at (rich_loc, m, OPT_Wanalyzer_tainted_array_index,\n-\t\t\t   \"use of tainted value %qE in array lookup\"\n-\t\t\t   \" without upper-bounds checking\",\n-\t\t\t   m_arg);\n+\treturn warning_meta (rich_loc, m, OPT_Wanalyzer_tainted_array_index,\n+\t\t\t     \"use of tainted value %qE in array lookup\"\n+\t\t\t     \" without upper-bounds checking\",\n+\t\t\t     m_arg);\n \tbreak;\n       }\n   }"}, {"sha": "a18d2e3206e4e3f775be54c76e274b4d9fca241d", "filename": "gcc/diagnostic-core.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Fdiagnostic-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Fdiagnostic-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-core.h?ref=6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "patch": "@@ -81,8 +81,9 @@ extern bool warning_at (location_t, int, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n extern bool warning_at (rich_location *, int, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n-extern bool warning_at (rich_location *, const diagnostic_metadata &, int,\n-\t\t\tconst char *, ...)\n+extern bool warning_meta (rich_location *,\n+\t\t\t  const diagnostic_metadata &, int,\n+\t\t\t  const char *, ...)\n     ATTRIBUTE_GCC_DIAG(4,5);\n extern void error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern void error_n (location_t, unsigned HOST_WIDE_INT, const char *,\n@@ -115,10 +116,6 @@ extern bool emit_diagnostic (diagnostic_t, rich_location *, int,\n \t\t\t     const char *, ...) ATTRIBUTE_GCC_DIAG(4,5);\n extern bool emit_diagnostic_valist (diagnostic_t, location_t, int, const char *,\n \t\t\t\t    va_list *) ATTRIBUTE_GCC_DIAG (4,0);\n-extern bool emit_diagnostic_valist (diagnostic_t, rich_location *,\n-\t\t\t\t    const diagnostic_metadata *metadata,\n-\t\t\t\t    int, const char *, va_list *)\n-  ATTRIBUTE_GCC_DIAG (5,0);\n extern bool seen_error (void);\n \n #ifdef BUFSIZ"}, {"sha": "3386f070256f6ca9c51959ea06a69f0c538fc268", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "patch": "@@ -1356,17 +1356,6 @@ emit_diagnostic_valist (diagnostic_t kind, location_t location, int opt,\n   return diagnostic_impl (&richloc, NULL, opt, gmsgid, ap, kind);\n }\n \n-/* Wrapper around diagnostic_impl taking a va_list parameter.  */\n-\n-bool\n-emit_diagnostic_valist (diagnostic_t kind, rich_location *richloc,\n-\t\t\tconst diagnostic_metadata *metadata,\n-\t\t\tint opt,\n-\t\t\tconst char *gmsgid, va_list *ap)\n-{\n-  return diagnostic_impl (richloc, metadata, opt, gmsgid, ap, kind);\n-}\n-\n /* An informative note at LOCATION.  Use this for additional details on an error\n    message.  */\n void\n@@ -1457,8 +1446,9 @@ warning_at (rich_location *richloc, int opt, const char *gmsgid, ...)\n /* Same as \"warning at\" above, but using METADATA.  */\n \n bool\n-warning_at (rich_location *richloc, const diagnostic_metadata &metadata,\n-\t    int opt, const char *gmsgid, ...)\n+warning_meta (rich_location *richloc,\n+\t      const diagnostic_metadata &metadata,\n+\t      int opt, const char *gmsgid, ...)\n {\n   gcc_assert (richloc);\n "}, {"sha": "693650d24863d1985cf0b93251bf720356bbdb85", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "patch": "@@ -1,3 +1,9 @@\n+2020-01-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/diagnostic_plugin_test_metadata.c: Update for\n+\trenaming of warning_at overload to warning_meta.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_paths.c: Likewise.\n+\n 2020-01-28  Tobias Burnus  <tobias@codesourcery.com>\n \t    Julian Brown  <julian@codesourcery.com>\n "}, {"sha": "a6108919b241582c9679637e28e13a31957ae84f", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_metadata.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_metadata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_metadata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_metadata.c?ref=6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "patch": "@@ -109,8 +109,8 @@ pass_test_metadata::execute (function *fun)\n \t    /* CWE-242: Use of Inherently Dangerous Function.  */\n \t    diagnostic_metadata m;\n \t    m.add_cwe (242);\n-\t    warning_at (&richloc, m, 0,\n-\t\t\t\"never use %qs\", \"gets\");\n+\t    warning_meta (&richloc, m, 0,\n+\t\t\t  \"never use %qs\", \"gets\");\n \t  }\n       }\n "}, {"sha": "767287572904857fe685242cc056d8c05c7565ca", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_paths.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_paths.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e584430bc5dc01b4438f3c38a2a10fcba7685/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_paths.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_paths.c?ref=6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "patch": "@@ -328,16 +328,17 @@ example_2 ()\n \t\t\t entry_to_wrapped_free, \"wrapped_free\");\n \t  path.add_leaf_call (call_to_free, 2, \"free\");\n \t  if (i == 0 && call_to_missing_location.m_fun)\n-\t    path.add_leaf_call (call_to_missing_location, 0, \"missing_location\");\n+\t    path.add_leaf_call (call_to_missing_location, 0,\n+\t\t\t\t\"missing_location\");\n \t}\n \n       richloc.set_path (&path);\n \n       diagnostic_metadata m;\n       m.add_cwe (415); /* CWE-415: Double Free.  */\n \n-      warning_at (&richloc, m, 0,\n-\t\t  \"double-free of %qs\", \"ptr\");\n+      warning_meta (&richloc, m, 0,\n+\t\t    \"double-free of %qs\", \"ptr\");\n     }\n }\n \n@@ -415,9 +416,9 @@ example_3 ()\n       /* CWE-479: Signal Handler Use of a Non-reentrant Function.  */\n       m.add_cwe (479);\n \n-      warning_at (&richloc, m, 0,\n-\t\t  \"call to %qs from within signal handler\",\n-\t\t  \"fprintf\");\n+      warning_meta (&richloc, m, 0,\n+\t\t    \"call to %qs from within signal handler\",\n+\t\t    \"fprintf\");\n     }\n }\n "}]}