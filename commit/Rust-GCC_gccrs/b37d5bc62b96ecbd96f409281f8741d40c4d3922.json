{"sha": "b37d5bc62b96ecbd96f409281f8741d40c4d3922", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM3ZDViYzYyYjk2ZWNiZDk2ZjQwOTI4MWY4NzQxZDQwYzRkMzkyMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T09:01:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T09:01:16Z"}, "message": "[multiple changes]\n\n2011-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb (Create_Finalizer): Remove local variables Spec_Nod and\n\tVis_Decls. When creating a library-level finalizer for a package spec,\n\tboth the declaration and body of the finalizer are inserted either in\n\tthe visible or private declarations of the package spec.\n\n2011-08-04  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.adb (Derive_Subprograms): Complete assertion to request the\n\tuse of the full-view of a type when invoking Is_Ancestor.\n\t* sem_type.adb (Is_Ancestor): For consistency, when the traversal of\n\tthe full-view of private parents is requested, then use also the\n\tfull-view of the parent of the first derivation.\n\nFrom-SVN: r177338", "tree": {"sha": "717756996cfd0e8c8f8167063ffe7fe6077616ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/717756996cfd0e8c8f8167063ffe7fe6077616ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b37d5bc62b96ecbd96f409281f8741d40c4d3922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b37d5bc62b96ecbd96f409281f8741d40c4d3922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b37d5bc62b96ecbd96f409281f8741d40c4d3922", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b37d5bc62b96ecbd96f409281f8741d40c4d3922/comments", "author": null, "committer": null, "parents": [{"sha": "7ab4d95af734d904c16bf4af815e8810546feff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab4d95af734d904c16bf4af815e8810546feff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ab4d95af734d904c16bf4af815e8810546feff6"}], "stats": {"total": 78, "additions": 47, "deletions": 31}, "files": [{"sha": "af7febfcdafe445948cf744c2df97bd3a8e59a2a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37d5bc62b96ecbd96f409281f8741d40c4d3922/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37d5bc62b96ecbd96f409281f8741d40c4d3922/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b37d5bc62b96ecbd96f409281f8741d40c4d3922", "patch": "@@ -1,3 +1,18 @@\n+2011-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch7.adb (Create_Finalizer): Remove local variables Spec_Nod and\n+\tVis_Decls. When creating a library-level finalizer for a package spec,\n+\tboth the declaration and body of the finalizer are inserted either in\n+\tthe visible or private declarations of the package spec.\n+\n+2011-08-04  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Derive_Subprograms): Complete assertion to request the\n+\tuse of the full-view of a type when invoking Is_Ancestor.\n+\t* sem_type.adb (Is_Ancestor): For consistency, when the traversal of\n+\tthe full-view of private parents is requested, then use also the\n+\tfull-view of the parent of the first derivation.\n+\n 2011-08-04  Tristan Gingold  <gingold@adacore.com>\n \n \t* s-taprop-vxworks.adb (Enter_Task): Use System.Float_Control.Reset"}, {"sha": "f79520edc2245b9cb4a8dd00813eab532162a4da", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37d5bc62b96ecbd96f409281f8741d40c4d3922/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37d5bc62b96ecbd96f409281f8741d40c4d3922/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=b37d5bc62b96ecbd96f409281f8741d40c4d3922", "patch": "@@ -1562,38 +1562,23 @@ package body Exp_Ch7 is\n \n             --  If the package spec has private declarations, the finalizer\n             --  body must be added to the end of the list in order to have\n-            --  visibility of all private controlled objects. The spec is\n-            --  inserted at the top of the visible declarations.\n+            --  visibility of all private controlled objects.\n \n             if For_Package_Spec then\n-               Prepend_To (Decls, Fin_Spec);\n-\n                if Present (Priv_Decls) then\n+                  Append_To (Priv_Decls, Fin_Spec);\n                   Append_To (Priv_Decls, Fin_Body);\n                else\n+                  Append_To (Decls, Fin_Spec);\n                   Append_To (Decls, Fin_Body);\n                end if;\n \n-            --  For package bodies, the finalizer body is added to the\n-            --  declarative region of the body and finalizer spec goes\n-            --  on the visible declarations of the package spec.\n+            --  For package bodies, both the finalizer spec and body are\n+            --  inserted at the end of the package declarations.\n \n             else\n-               declare\n-                  Spec_Nod  : Node_Id;\n-                  Vis_Decls : List_Id;\n-\n-               begin\n-                  Spec_Nod := Spec_Id;\n-                  while Nkind (Spec_Nod) /= N_Package_Specification loop\n-                     Spec_Nod := Parent (Spec_Nod);\n-                  end loop;\n-\n-                  Vis_Decls := Visible_Declarations (Spec_Nod);\n-\n-                  Prepend_To (Vis_Decls, Fin_Spec);\n-                  Append_To  (Decls, Fin_Body);\n-               end;\n+               Append_To (Decls, Fin_Spec);\n+               Append_To (Decls, Fin_Body);\n             end if;\n \n             --  Push the name of the package"}, {"sha": "d31aea0ac98f722be8d585dba2ed4e8b0f68a047", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37d5bc62b96ecbd96f409281f8741d40c4d3922/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37d5bc62b96ecbd96f409281f8741d40c4d3922/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=b37d5bc62b96ecbd96f409281f8741d40c4d3922", "patch": "@@ -13647,7 +13647,8 @@ package body Sem_Ch3 is\n                      Type_Conformant (Subp, Act_Subp,\n                                       Skip_Controlling_Formals => True)))\n             then\n-               pragma Assert (not Is_Ancestor (Parent_Base, Generic_Actual));\n+               pragma Assert (not Is_Ancestor (Parent_Base, Generic_Actual,\n+                                               Use_Full_View => True));\n \n                --  Remember that we need searching for all pending primitives\n "}, {"sha": "20f1c47e810e345d0a97066aeec8ac5114c9007f", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37d5bc62b96ecbd96f409281f8741d40c4d3922/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37d5bc62b96ecbd96f409281f8741d40c4d3922/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=b37d5bc62b96ecbd96f409281f8741d40c4d3922", "patch": "@@ -2656,7 +2656,23 @@ package body Sem_Type is\n          return True;\n \n       else\n-         Par := Etype (BT2);\n+         --  Obtain the parent of the base type of T2 (use the full view if\n+         --  allowed).\n+\n+         if Use_Full_View\n+           and then Is_Private_Type (BT2)\n+           and then Present (Full_View (BT2))\n+         then\n+            --  No climbing needed if its full view is the root type\n+\n+            if Full_View (BT2) = Root_Type (Full_View (BT2)) then\n+               return False;\n+            end if;\n+\n+            Par := Etype (Full_View (BT2));\n+         else\n+            Par := Etype (BT2);\n+         end if;\n \n          loop\n             --  If there was a error on the type declaration, do not recurse\n@@ -2677,10 +2693,14 @@ package body Sem_Type is\n             then\n                return True;\n \n-            --  Climb to the ancestor type\n+            --  Root type found\n \n-            elsif Etype (Par) /= Par then\n+            elsif Par = Root_Type (Par) then\n+               return False;\n+\n+            --  Continue climbing\n \n+            else\n                --  Use the full-view of private types (if allowed)\n \n                if Use_Full_View\n@@ -2691,11 +2711,6 @@ package body Sem_Type is\n                else\n                   Par := Etype (Par);\n                end if;\n-\n-            --  For all other cases return False, not an Ancestor\n-\n-            else\n-               return False;\n             end if;\n          end loop;\n       end if;"}]}