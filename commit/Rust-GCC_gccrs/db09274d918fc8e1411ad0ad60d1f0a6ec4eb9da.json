{"sha": "db09274d918fc8e1411ad0ad60d1f0a6ec4eb9da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIwOTI3NGQ5MThmYzhlMTQxMWFkMGFkNjBkMWYwYTZlYzRlYjlkYQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2014-09-08T18:40:56Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2014-09-08T18:40:56Z"}, "message": "rs6000.c (special_handling_values): Add SH_SPLAT.\n\n[gcc]\n\n2014-09-08  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (special_handling_values):  Add SH_SPLAT.\n\t(rtx_is_swappable_p): Convert UNSPEC cascading ||s to a switch\n\tstatement; allow optimization of UNSPEC_VSPLT_DIRECT with special\n\thandling SH_SPLAT.\n\t(adjust_extract): Fix test for VEC_DUPLICATE case; fix adjustment\n\tof extracted lane.\n\t(adjust_splat): New function.\n\t(handle_special_swappables): Call adjust_splat for SH_SPLAT.\n\t(dump_swap_insn_table): Add case for SH_SPLAT.\n\n[gcc/testsuite]\n\n2014-09-08  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/swaps-p8-16.c: New test.\n\nFrom-SVN: r215019", "tree": {"sha": "3ba75b651bf50bf18f714cbfb584f17bb3681990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ba75b651bf50bf18f714cbfb584f17bb3681990"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db09274d918fc8e1411ad0ad60d1f0a6ec4eb9da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db09274d918fc8e1411ad0ad60d1f0a6ec4eb9da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db09274d918fc8e1411ad0ad60d1f0a6ec4eb9da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db09274d918fc8e1411ad0ad60d1f0a6ec4eb9da/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "33d9078ac5134dce037632da60cde27145193f5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d9078ac5134dce037632da60cde27145193f5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33d9078ac5134dce037632da60cde27145193f5a"}], "stats": {"total": 197, "additions": 151, "deletions": 46}, "files": [{"sha": "668d742e1ba7374fbaf9e4c58883b67224267ac4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db09274d918fc8e1411ad0ad60d1f0a6ec4eb9da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db09274d918fc8e1411ad0ad60d1f0a6ec4eb9da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db09274d918fc8e1411ad0ad60d1f0a6ec4eb9da", "patch": "@@ -1,3 +1,15 @@\n+2014-09-08  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (special_handling_values):  Add SH_SPLAT.\n+\t(rtx_is_swappable_p): Convert UNSPEC cascading ||s to a switch\n+\tstatement; allow optimization of UNSPEC_VSPLT_DIRECT with special\n+\thandling SH_SPLAT.\n+\t(adjust_extract): Fix test for VEC_DUPLICATE case; fix adjustment\n+\tof extracted lane.\n+\t(adjust_splat): New function.\n+\t(handle_special_swappables): Call adjust_splat for SH_SPLAT.\n+\t(dump_swap_insn_table): Add case for SH_SPLAT.\n+\n 2014-09-08  Richard Biener  <rguenther@suse.de>\n \n \tPR ipa/63196"}, {"sha": "fd9198664402bf45492309189391333c4d20ca02", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 79, "deletions": 46, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db09274d918fc8e1411ad0ad60d1f0a6ec4eb9da/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db09274d918fc8e1411ad0ad60d1f0a6ec4eb9da/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=db09274d918fc8e1411ad0ad60d1f0a6ec4eb9da", "patch": "@@ -33524,7 +33524,8 @@ enum special_handling_values {\n   SH_SUBREG,\n   SH_NOSWAP_LD,\n   SH_NOSWAP_ST,\n-  SH_EXTRACT\n+  SH_EXTRACT,\n+  SH_SPLAT\n };\n \n /* Union INSN with all insns containing definitions that reach USE.\n@@ -33735,43 +33736,50 @@ rtx_is_swappable_p (rtx op, unsigned int *special)\n \t   vector splat are element-order sensitive.  A few of these\n \t   cases might be workable with special handling if required.  */\n \tint val = XINT (op, 1);\n-\tif (val == UNSPEC_VMRGH_DIRECT\n-\t    || val == UNSPEC_VMRGL_DIRECT\n-\t    || val == UNSPEC_VPACK_SIGN_SIGN_SAT\n-\t    || val == UNSPEC_VPACK_SIGN_UNS_SAT\n-\t    || val == UNSPEC_VPACK_UNS_UNS_MOD\n-\t    || val == UNSPEC_VPACK_UNS_UNS_MOD_DIRECT\n-\t    || val == UNSPEC_VPACK_UNS_UNS_SAT\n-\t    || val == UNSPEC_VPERM\n-\t    || val == UNSPEC_VPERM_UNS\n-\t    || val == UNSPEC_VPERMHI\n-\t    || val == UNSPEC_VPERMSI\n-\t    || val == UNSPEC_VPKPX\n-\t    || val == UNSPEC_VSLDOI\n-\t    || val == UNSPEC_VSLO\n-\t    || val == UNSPEC_VSPLT_DIRECT\n-\t    || val == UNSPEC_VSRO\n-\t    || val == UNSPEC_VSUM2SWS\n-\t    || val == UNSPEC_VSUM4S\n-\t    || val == UNSPEC_VSUM4UBS\n-\t    || val == UNSPEC_VSUMSWS\n-\t    || val == UNSPEC_VSUMSWS_DIRECT\n-\t    || val == UNSPEC_VSX_CONCAT\n-\t    || val == UNSPEC_VSX_CVSPDP\n-\t    || val == UNSPEC_VSX_CVSPDPN\n-\t    || val == UNSPEC_VSX_SET\n-\t    || val == UNSPEC_VSX_SLDWI\n-\t    || val == UNSPEC_VUNPACK_HI_SIGN\n-\t    || val == UNSPEC_VUNPACK_HI_SIGN_DIRECT\n-\t    || val == UNSPEC_VUNPACK_LO_SIGN\n-\t    || val == UNSPEC_VUNPACK_LO_SIGN_DIRECT\n-\t    || val == UNSPEC_VUPKHPX\n-\t    || val == UNSPEC_VUPKHS_V4SF\n-\t    || val == UNSPEC_VUPKHU_V4SF\n-\t    || val == UNSPEC_VUPKLPX\n-\t    || val == UNSPEC_VUPKLS_V4SF\n-\t    || val == UNSPEC_VUPKHU_V4SF)\n-\t  return 0;\n+\tswitch (val)\n+\t  {\n+\t  default:\n+\t    break;\n+\t  case UNSPEC_VMRGH_DIRECT:\n+\t  case UNSPEC_VMRGL_DIRECT:\n+\t  case UNSPEC_VPACK_SIGN_SIGN_SAT:\n+\t  case UNSPEC_VPACK_SIGN_UNS_SAT:\n+\t  case UNSPEC_VPACK_UNS_UNS_MOD:\n+\t  case UNSPEC_VPACK_UNS_UNS_MOD_DIRECT:\n+\t  case UNSPEC_VPACK_UNS_UNS_SAT:\n+\t  case UNSPEC_VPERM:\n+\t  case UNSPEC_VPERM_UNS:\n+\t  case UNSPEC_VPERMHI:\n+\t  case UNSPEC_VPERMSI:\n+\t  case UNSPEC_VPKPX:\n+\t  case UNSPEC_VSLDOI:\n+\t  case UNSPEC_VSLO:\n+\t  case UNSPEC_VSRO:\n+\t  case UNSPEC_VSUM2SWS:\n+\t  case UNSPEC_VSUM4S:\n+\t  case UNSPEC_VSUM4UBS:\n+\t  case UNSPEC_VSUMSWS:\n+\t  case UNSPEC_VSUMSWS_DIRECT:\n+\t  case UNSPEC_VSX_CONCAT:\n+\t  case UNSPEC_VSX_CVSPDP:\n+\t  case UNSPEC_VSX_CVSPDPN:\n+\t  case UNSPEC_VSX_SET:\n+\t  case UNSPEC_VSX_SLDWI:\n+\t  case UNSPEC_VUNPACK_HI_SIGN:\n+\t  case UNSPEC_VUNPACK_HI_SIGN_DIRECT:\n+\t  case UNSPEC_VUNPACK_LO_SIGN:\n+\t  case UNSPEC_VUNPACK_LO_SIGN_DIRECT:\n+\t  case UNSPEC_VUPKHPX:\n+\t  case UNSPEC_VUPKHS_V4SF:\n+\t  case UNSPEC_VUPKHU_V4SF:\n+\t  case UNSPEC_VUPKLPX:\n+\t  case UNSPEC_VUPKLS_V4SF:\n+\t  case UNSPEC_VUPKLU_V4SF:\n+\t    return 0;\n+\t  case UNSPEC_VSPLT_DIRECT:\n+\t    *special = SH_SPLAT;\n+\t    return 1;\n+\t  }\n       }\n \n     default:\n@@ -34098,27 +34106,45 @@ permute_store (rtx_insn *insn)\n \t     INSN_UID (insn));\n }\n \n-/* Given OP that contains a vector extract operation, change the index\n-   of the extracted lane to count from the other side of the vector.  */\n+/* Given OP that contains a vector extract operation, adjust the index\n+   of the extracted lane to account for the doubleword swap.  */\n static void\n adjust_extract (rtx_insn *insn)\n {\n-  rtx body = PATTERN (insn);\n+  rtx src = SET_SRC (PATTERN (insn));\n   /* The vec_select may be wrapped in a vec_duplicate for a splat, so\n      account for that.  */\n-  rtx sel = (GET_CODE (body) == VEC_DUPLICATE\n-\t     ? XEXP (XEXP (body, 0), 1)\n-\t     : XEXP (body, 1));\n+  rtx sel = GET_CODE (src) == VEC_DUPLICATE ? XEXP (src, 0) : src;\n   rtx par = XEXP (sel, 1);\n-  int nunits = GET_MODE_NUNITS (GET_MODE (XEXP (sel, 0)));\n-  XVECEXP (par, 0, 0) = GEN_INT (nunits - 1 - INTVAL (XVECEXP (par, 0, 0)));\n+  int half_elts = GET_MODE_NUNITS (GET_MODE (XEXP (sel, 0))) >> 1;\n+  int lane = INTVAL (XVECEXP (par, 0, 0));\n+  lane = lane >= half_elts ? lane - half_elts : lane + half_elts;\n+  XVECEXP (par, 0, 0) = GEN_INT (lane);\n   INSN_CODE (insn) = -1; /* Force re-recognition.  */\n   df_insn_rescan (insn);\n \n   if (dump_file)\n     fprintf (dump_file, \"Changing lane for extract %d\\n\", INSN_UID (insn));\n }\n \n+/* Given OP that contains a vector direct-splat operation, adjust the index\n+   of the source lane to account for the doubleword swap.  */\n+static void\n+adjust_splat (rtx_insn *insn)\n+{\n+  rtx body = PATTERN (insn);\n+  rtx unspec = XEXP (body, 1);\n+  int half_elts = GET_MODE_NUNITS (GET_MODE (unspec)) >> 1;\n+  int lane = INTVAL (XVECEXP (unspec, 0, 1));\n+  lane = lane >= half_elts ? lane - half_elts : lane + half_elts;\n+  XVECEXP (unspec, 0, 1) = GEN_INT (lane);\n+  INSN_CODE (insn) = -1; /* Force re-recognition.  */\n+  df_insn_rescan (insn);\n+\n+  if (dump_file)\n+    fprintf (dump_file, \"Changing lane for splat %d\\n\", INSN_UID (insn));\n+}\n+\n /* The insn described by INSN_ENTRY[I] can be swapped, but only\n    with special handling.  Take care of that here.  */\n static void\n@@ -34160,6 +34186,11 @@ handle_special_swappables (swap_web_entry *insn_entry, unsigned i)\n     case SH_EXTRACT:\n       /* Change the lane on an extract operation.  */\n       adjust_extract (insn);\n+      break;\n+    case SH_SPLAT:\n+      /* Change the lane on a direct-splat operation.  */\n+      adjust_splat (insn);\n+      break;\n     }\n }\n \n@@ -34230,6 +34261,8 @@ dump_swap_insn_table (swap_web_entry *insn_entry)\n \t      fputs (\"special:store \", dump_file);\n \t    else if (insn_entry[i].special_handling == SH_EXTRACT)\n \t      fputs (\"special:extract \", dump_file);\n+\t    else if (insn_entry[i].special_handling == SH_SPLAT)\n+\t      fputs (\"special:splat \", dump_file);\n \t  }\n \tif (insn_entry[i].web_not_optimizable)\n \t  fputs (\"unoptimizable \", dump_file);"}, {"sha": "cd4650c610acd458ad8965d9e0dd41b5460009c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db09274d918fc8e1411ad0ad60d1f0a6ec4eb9da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db09274d918fc8e1411ad0ad60d1f0a6ec4eb9da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db09274d918fc8e1411ad0ad60d1f0a6ec4eb9da", "patch": "@@ -1,3 +1,7 @@\n+2014-09-08  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/swaps-p8-16.c: New test.\n+\n 2014-09-07  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc.target/i386/pr62208.c: New test."}, {"sha": "b57b1ed5134827068ed0ecd9e0e5c3900e14603d", "filename": "gcc/testsuite/gcc.target/powerpc/swaps-p8-16.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db09274d918fc8e1411ad0ad60d1f0a6ec4eb9da/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db09274d918fc8e1411ad0ad60d1f0a6ec4eb9da/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-16.c?ref=db09274d918fc8e1411ad0ad60d1f0a6ec4eb9da", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-options \"-mcpu=power8 -O3\" } */\n+/* { dg-final { scan-assembler \"lxvd2x\" } } */\n+/* { dg-final { scan-assembler \"stxvd2x\" } } */\n+/* { dg-final { scan-assembler \"vspltw\" } } */\n+/* { dg-final { scan-assembler-not \"xxpermdi\" } } */\n+\n+#include <altivec.h>\n+void abort();\n+\n+typedef struct xx {vector double l; vector double h;} xx;\n+\n+#define N 4096\n+#define M 10000000\n+vector float ca[N][4] = {0};\n+vector float cb[N][4] = {0};\n+vector float cc[N][4] = {0};\n+\n+__attribute__((noinline)) void foo ()\n+{\n+  int i;\n+  vector float brow;\n+\n+  for (i = 0; i < N; i++) {\n+\n+    brow = cb[i][0];\n+    cc[i][0] = vec_mul(vec_splats(brow[0]), ca[i][0]);\n+    cc[i][0] = vec_madd(cc[i][0],vec_splats(brow[1]), ca[i][1]);\n+    cc[i][0] = vec_madd(cc[i][0],vec_splats(brow[2]), ca[i][2]);\n+    cc[i][0] = vec_madd(cc[i][0],vec_splats(brow[3]), ca[i][3]);\n+\n+    brow = cb[i][1];\n+    cc[i][1] = vec_mul(vec_splats(brow[0]), ca[i][0]);\n+    cc[i][1] = vec_madd(cc[i][0],vec_splats(brow[1]), ca[i][1]);\n+    cc[i][1] = vec_madd(cc[i][0],vec_splats(brow[2]), ca[i][2]);\n+    cc[i][1] = vec_madd(cc[i][0],vec_splats(brow[3]), ca[i][3]);\n+    \n+    brow = cb[i][2];\n+    cc[i][2] = vec_mul(vec_splats(brow[0]), ca[i][0]);\n+    cc[i][2] = vec_madd(cc[i][0],vec_splats(brow[1]), ca[i][1]);\n+    cc[i][2] = vec_madd(cc[i][0],vec_splats(brow[2]), ca[i][2]);\n+    cc[i][2] = vec_madd(cc[i][0],vec_splats(brow[3]), ca[i][3]);\n+    \n+    brow = cb[i][3];\n+    cc[i][3] = vec_mul(vec_splats(brow[0]), ca[i][0]);\n+    cc[i][3] = vec_madd(cc[i][0],vec_splats(brow[1]), ca[i][1]);\n+    cc[i][3] = vec_madd(cc[i][0],vec_splats(brow[2]), ca[i][2]);\n+    cc[i][3] = vec_madd(cc[i][0],vec_splats(brow[3]), ca[i][3]);\n+  }\n+}\n+\n+int main ()\n+{\n+  foo ();\n+  return 0;\n+}"}]}