{"sha": "0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJkYzRjMWNlOTQ3MGQ0YjViOTI2ZDJkNjJiYTNlZDI0Mzc3NWQ5ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-11-18T20:27:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-11-18T20:27:26Z"}, "message": "PR c++/67631 - list-init and explicit conversions\n\n\t* semantics.c (finish_compound_literal): Call digest_init_flags.\n\t* typeck2.c (digest_init_flags): Add complain parm.\n\t(store_init_value): Pass it.\n\nFrom-SVN: r242603", "tree": {"sha": "837c21bf7df1740ab0829786038fea473fddd46a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/837c21bf7df1740ab0829786038fea473fddd46a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b2e03037f077958d56a85e5465595e314160872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b2e03037f077958d56a85e5465595e314160872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b2e03037f077958d56a85e5465595e314160872"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "68431bb7aaf081f4ad269a18d941b41c17d98344", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e", "patch": "@@ -1,3 +1,10 @@\n+2016-11-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/67631 - list-init and explicit conversions\n+\t* semantics.c (finish_compound_literal): Call digest_init_flags.\n+\t* typeck2.c (digest_init_flags): Add complain parm.\n+\t(store_init_value): Pass it.\n+\n 2016-11-18  Richard Sandiford  <richard.sandiford@arm.com>\n  \t    Alan Hayward  <alan.hayward@arm.com>\n  \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "5674886b26f7b2e67dfa1ce604c60832a15540b1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e", "patch": "@@ -6839,7 +6839,7 @@ extern tree store_init_value\t\t\t(tree, tree, vec<tree, va_gc>**, int);\n extern tree split_nonconstant_init\t\t(tree, tree);\n extern bool check_narrowing\t\t\t(tree, tree, tsubst_flags_t);\n extern tree digest_init\t\t\t\t(tree, tree, tsubst_flags_t);\n-extern tree digest_init_flags\t\t\t(tree, tree, int);\n+extern tree digest_init_flags\t\t\t(tree, tree, int, tsubst_flags_t);\n extern tree digest_nsdmi_init\t\t        (tree, tree);\n extern tree build_scoped_ref\t\t\t(tree, tree, tree *);\n extern tree build_x_arrow\t\t\t(location_t, tree,"}, {"sha": "389e7f1b25b4cd7c25ddc8faadfa0693cbde202d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e", "patch": "@@ -2713,7 +2713,8 @@ finish_compound_literal (tree type, tree compound_literal,\n       if (type == error_mark_node)\n \treturn error_mark_node;\n     }\n-  compound_literal = digest_init (type, compound_literal, complain);\n+  compound_literal = digest_init_flags (type, compound_literal, LOOKUP_NORMAL,\n+\t\t\t\t\tcomplain);\n   if (TREE_CODE (compound_literal) == CONSTRUCTOR)\n     TREE_HAS_CONSTRUCTOR (compound_literal) = true;\n "}, {"sha": "b214c99019caed9566470f087ec3009561ee81bd", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e", "patch": "@@ -794,7 +794,7 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n     value = init;\n   else\n     /* Digest the specified initializer into an expression.  */\n-    value = digest_init_flags (type, init, flags);\n+    value = digest_init_flags (type, init, flags, tf_warning_or_error);\n \n   value = extend_ref_init_temps (decl, value, cleanups);\n \n@@ -1165,9 +1165,9 @@ digest_init (tree type, tree init, tsubst_flags_t complain)\n }\n \n tree\n-digest_init_flags (tree type, tree init, int flags)\n+digest_init_flags (tree type, tree init, int flags, tsubst_flags_t complain)\n {\n-  return digest_init_r (type, init, false, flags, tf_warning_or_error);\n+  return digest_init_r (type, init, false, flags, complain);\n }\n \n /* Process the initializer INIT for an NSDMI DECL (a FIELD_DECL).  */\n@@ -1183,7 +1183,7 @@ digest_nsdmi_init (tree decl, tree init)\n   if (BRACE_ENCLOSED_INITIALIZER_P (init)\n       && CP_AGGREGATE_TYPE_P (type))\n     init = reshape_init (type, init, tf_warning_or_error);\n-  init = digest_init_flags (type, init, flags);\n+  init = digest_init_flags (type, init, flags, tf_warning_or_error);\n   if (TREE_CODE (init) == TARGET_EXPR)\n     /* This represents the whole initialization.  */\n     TARGET_EXPR_DIRECT_INIT_P (init) = true;"}, {"sha": "5e00b2d48cc86ac94e49067ef31d791152437569", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-explicit1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-explicit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-explicit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-explicit1.C?ref=0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/67631\n+// { dg-do compile { target c++11 } }\n+\n+struct X\n+{\n+  explicit operator unsigned ();\n+};\n+unsigned foo ()\n+{\n+  return unsigned{ X () };\n+}"}]}