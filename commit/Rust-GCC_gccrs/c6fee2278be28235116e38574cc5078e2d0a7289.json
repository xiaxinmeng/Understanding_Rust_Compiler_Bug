{"sha": "c6fee2278be28235116e38574cc5078e2d0a7289", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZmZWUyMjc4YmUyODIzNTExNmUzODU3NGNjNTA3OGUyZDBhNzI4OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2008-04-09T09:13:23Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2008-04-09T09:13:23Z"}, "message": "target-supports.exp (check_effective_target_vxworks_kernel): Fix comment.\n\n\t* lib/target-supports.exp (check_effective_target_vxworks_kernel):\n\tFix comment.\n\t(check_effective_target_vxworks_rtp): New procedure.\n\t* g++.dg/opt/20050511-1.C: Rename UINT32 for VxWorks kernel mode.\n\t* g++.dg/warn/miss-format-1.C: XFAIL for VxWorks.\n\t* g++.old-deja/g++.abi/cxa_vec.C: XFAIL for VxWorks kernels.\n\t* g++.old-deja/g++.brendan/new3.C: Likewise.\n\t* g++.old-deja/g++.eh/badalloc1.C: XFAIL for VxWorks RTPs.\n\t* g++.old-deja/g++.law/missed-error2.C: Undefine max for\n\tVxWorks kernel mode.\n\t* g++.old-deja/g++.mike/init1.C: XFAIL for VxWorks kernel mode.\n\t* g++.old-deja/g++.mike/p2736.C: Likewise.\n\t* g++.old-deja/g++.mike/p658.C: Undefine OK for VxWorks kernel mode.\n\t* g++.old-deja/g++.other/headers1.C: Likewise min and max.\n\t* g++.old-deja/g++.robertl/eb79.C: Undefine max for VxWorks\n\tkernel mode.\n\nFrom-SVN: r134134", "tree": {"sha": "b08e1bf9784d40ea282946b3d1d39753e51ca9a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b08e1bf9784d40ea282946b3d1d39753e51ca9a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6fee2278be28235116e38574cc5078e2d0a7289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6fee2278be28235116e38574cc5078e2d0a7289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6fee2278be28235116e38574cc5078e2d0a7289", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6fee2278be28235116e38574cc5078e2d0a7289/comments", "author": null, "committer": null, "parents": [{"sha": "24722ea98e979fd3c7a0e82c8f422544fa5cd947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24722ea98e979fd3c7a0e82c8f422544fa5cd947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24722ea98e979fd3c7a0e82c8f422544fa5cd947"}], "stats": {"total": 93, "additions": 85, "deletions": 8}, "files": [{"sha": "008bc865401ecdd4cdfc390390c5865af211939f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c6fee2278be28235116e38574cc5078e2d0a7289", "patch": "@@ -1,3 +1,22 @@\n+2008-04-09  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_vxworks_kernel):\n+\tFix comment.\n+\t(check_effective_target_vxworks_rtp): New procedure.\n+\t* g++.dg/opt/20050511-1.C: Rename UINT32 for VxWorks kernel mode.\n+\t* g++.dg/warn/miss-format-1.C: XFAIL for VxWorks.\n+\t* g++.old-deja/g++.abi/cxa_vec.C: XFAIL for VxWorks kernels.\n+\t* g++.old-deja/g++.brendan/new3.C: Likewise.\n+\t* g++.old-deja/g++.eh/badalloc1.C: XFAIL for VxWorks RTPs.\n+\t* g++.old-deja/g++.law/missed-error2.C: Undefine max for\n+\tVxWorks kernel mode.\n+\t* g++.old-deja/g++.mike/init1.C: XFAIL for VxWorks kernel mode.\n+\t* g++.old-deja/g++.mike/p2736.C: Likewise.\n+\t* g++.old-deja/g++.mike/p658.C: Undefine OK for VxWorks kernel mode.\n+\t* g++.old-deja/g++.other/headers1.C: Likewise min and max.\n+\t* g++.old-deja/g++.robertl/eb79.C: Undefine max for VxWorks\n+\tkernel mode.\n+\n 2008-04-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gfortran.dg/namelist_47.f90: New test."}, {"sha": "a8929030af4e1fb783e77348f8b7f0b9b72df6fb", "filename": "gcc/testsuite/g++.dg/opt/20050511-1.C", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2F20050511-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2F20050511-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2F20050511-1.C?ref=c6fee2278be28235116e38574cc5078e2d0a7289", "patch": "@@ -4,6 +4,11 @@\n #include <stdio.h>\n #include <stdlib.h>\n \n+// The VxWorks kernel headers define their own UINT32\n+#if defined __vxworks && !defined __RTP__\n+#define UINT32 my_UINT32\n+#endif\n+\n typedef signed short SINT16 ;\n typedef unsigned long UINT32 ;\n typedef unsigned int UINT ;"}, {"sha": "ec9dbc1c3bdf0b19f89b4dcef754d24a0b14075f", "filename": "gcc/testsuite/g++.dg/warn/miss-format-1.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-1.C?ref=c6fee2278be28235116e38574cc5078e2d0a7289", "patch": "@@ -2,7 +2,8 @@\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n /* { dg-do compile } */\n /* { dg-options \"-Wmissing-format-attribute\" } */\n-/* { dg-error \"not declared\" \"\" { target *-*-solaris2.5.1 *-*-solaris2.[5-8] } 24 } */\n+/* VxWorks does not provide vscanf, either in kernel or RTP mode.  */\n+/* { dg-error \"not declared\" \"\" { target *-*-solaris2.5.1 *-*-solaris2.[5-8] *-*-vxworks* } 25 } */\n \n #include <stdio.h>\n #include <stdarg.h>\n@@ -21,7 +22,7 @@ bar (const char *fmt, ...)\n {\n   va_list ap;\n   va_start (ap, fmt);\n-  vscanf (fmt, ap); /* { dg-warning \"candidate\" \"scanf attribute warning\" { xfail *-*-solaris2.5.1 *-*-solaris2.[5-8] } } */\n+  vscanf (fmt, ap); /* { dg-warning \"candidate\" \"scanf attribute warning\" { xfail *-*-solaris2.5.1 *-*-solaris2.[5-8] *-*-vxworks* } } */\n   va_end (ap);\n }\n "}, {"sha": "5370fb8981df03f1cc0387666fb034c043614652", "filename": "gcc/testsuite/g++.old-deja/g++.abi/cxa_vec.C", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fcxa_vec.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fcxa_vec.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fcxa_vec.C?ref=c6fee2278be28235116e38574cc5078e2d0a7289", "patch": "@@ -1,4 +1,9 @@\n-// { dg-do run { xfail powerpc-ibm-aix* } }\n+// This test fails on VxWorks in kernel mode because it depends on the\n+// library version of \"::operator new[]\" calling the \"::operator new\"\n+// defined in this module.  This doesn't work because the library version\n+// of \"::operator new[]\" is built into the kernel itself; library relocations\n+// are resolved when the kernel is linked.\n+// { dg-do run { xfail { powerpc-ibm-aix* || vxworks_kernel } } }\n // { dg-options \"-flat_namespace\" { target *-*-darwin[67]* } }\n // Test __cxa_vec routines\n // Copyright (C) 2000, 2005 Free Software Foundation, Inc."}, {"sha": "791d00bac9635ebf202ad781a49a59bbfdf5ad49", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/new3.C", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew3.C?ref=c6fee2278be28235116e38574cc5078e2d0a7289", "patch": "@@ -1,4 +1,9 @@\n-// { dg-do run { xfail powerpc-ibm-aix* } }\n+// This test fails on VxWorks in kernel mode because it depends on the\n+// library version of \"::operator new[]\" calling the \"::operator new\"\n+// defined in this module.  This doesn't work because the library version\n+// of \"::operator new[]\" is built into the kernel itself; library relocations\n+// are resolved when the kernel is linked.\n+// { dg-do run { xfail { powerpc-ibm-aix* || vxworks_kernel } } }\n // { dg-options \"-flat_namespace\" { target *-*-darwin[67]* } }\n // GROUPS passed operator-new\n #include <stdio.h>"}, {"sha": "b2e7f62b9b30b1bfaec206e26c03d7b8c29607a4", "filename": "gcc/testsuite/g++.old-deja/g++.eh/badalloc1.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C?ref=c6fee2278be28235116e38574cc5078e2d0a7289", "patch": "@@ -1,4 +1,8 @@\n-// { dg-do run { xfail xstormy16-*-* *-*-darwin[1-7]* } }\n+// This fails for VxWorks RTPs because the initialization of\n+// __cxa_allocate_exception's emergency buffer mutex will\n+// itself call malloc(), and will fail if there is no more\n+// memory available.\n+// { dg-do run { xfail { { xstormy16-*-* *-*-darwin[1-7]* } || vxworks_rtp } } }\n // Copyright (C) 2000, 2002, 2003 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 6 June 2000 <nathan@codesourcery.com>\n "}, {"sha": "a26f456f20a0925fd22ffb18f8f19fd4b6bad6c1", "filename": "gcc/testsuite/g++.old-deja/g++.law/missed-error2.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fmissed-error2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fmissed-error2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fmissed-error2.C?ref=c6fee2278be28235116e38574cc5078e2d0a7289", "patch": "@@ -8,6 +8,12 @@\n \n #include <iostream>\n \n+// The VxWorks kernel-mode headers define a macro named \"max\", which is not\n+// ISO-compliant, but is part of the VxWorks API.\n+#if defined __vxworks && !defined __RTP__\n+#undef max\n+#endif\n+\n inline int max(int a, int b) {return a > b ? a : b;}; // { dg-error \"\" } candidate\n inline double max(double a, double b) {return a > b ? a : b;}; // { dg-error \"\" } candidate\n "}, {"sha": "5bc1ea4a9ac975e767fee09e3f53f15911720ee3", "filename": "gcc/testsuite/g++.old-deja/g++.mike/init1.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Finit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Finit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Finit1.C?ref=c6fee2278be28235116e38574cc5078e2d0a7289", "patch": "@@ -1,4 +1,6 @@\n-// { dg-do run  }\n+// The VxWorks kernel has no implementation of atexit, so local statics\n+// are never destroyed. \n+// { dg-do run { xfail vxworks_kernel } }\n int count;\n \n extern \"C\" void _exit(int);"}, {"sha": "6ae61e89260ae7e53acca4b1ddf290976772f16e", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p2736.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp2736.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp2736.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp2736.C?ref=c6fee2278be28235116e38574cc5078e2d0a7289", "patch": "@@ -1,4 +1,6 @@\n-// { dg-do run  }\n+// The VxWorks kernel has no implementation of atexit, so local statics\n+// are never destroyed. \n+// { dg-do run { xfail vxworks_kernel } }\n // This is a poor test case, it is meant to ensure that function local\n // statics are destroyed at the right time.  See PR 2736 for details.\n // prms-id: 2736"}, {"sha": "8fc7cd51b2be34c13f759f3fc80247665a6fd157", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p658.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp658.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp658.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp658.C?ref=c6fee2278be28235116e38574cc5078e2d0a7289", "patch": "@@ -12,6 +12,12 @@\n #define TRUE true\n #endif\n \n+// The VxWorks kernel-mode headers define a macro named \"OK\", which is not\n+// ISO-compliant, but is part of the VxWorks API.\n+#if defined __vxworks && !defined __RTP__\n+#undef OK\n+#endif\n+\n class Object {\n public:\n     Object();"}, {"sha": "1080fe38c8ac708e04acfc6a3b6e754c7caa7a71", "filename": "gcc/testsuite/g++.old-deja/g++.other/headers1.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fheaders1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fheaders1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fheaders1.C?ref=c6fee2278be28235116e38574cc5078e2d0a7289", "patch": "@@ -44,6 +44,12 @@\n #include <string>\n #include <typeinfo>\n #include <utility>\n+// The VxWorks kernel-mode headers define macros named \"max\" and\n+// \"min\", which is not ISO-compliant, but is part of the VxWorks API.\n+#if defined __vxworks && !defined __RTP__\n+#undef max\n+#undef min\n+#endif\n #include <valarray>\n #include <vector>\n "}, {"sha": "8d1c94d168ffcb732fecff0e86a2b6c26eddb3b4", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb79.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb79.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb79.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb79.C?ref=c6fee2278be28235116e38574cc5078e2d0a7289", "patch": "@@ -2,6 +2,12 @@\n // Makes bogus x86 assembly code.\n #include <iostream>\n \n+// The VxWorks kernel-mode headers define a macro named \"max\", which is not\n+// ISO-compliant, but is part of the VxWorks API.\n+#if defined __vxworks && !defined __RTP__\n+#undef max\n+#endif\n+\n using namespace std;\n \n template<class T>"}, {"sha": "c1bdc79b5e54e23dd453dccac5d3f5c000606f18", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6fee2278be28235116e38574cc5078e2d0a7289/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=c6fee2278be28235116e38574cc5078e2d0a7289", "patch": "@@ -2221,7 +2221,7 @@ proc check_effective_target_simulator { } {\n     return 0\n }\n \n-# Return 1 if the target is a VxWorks RTP.\n+# Return 1 if the target is a VxWorks kernel.\n \n proc check_effective_target_vxworks_kernel { } {\n     return [check_no_compiler_messages vxworks_kernel assembly {\n@@ -2231,6 +2231,16 @@ proc check_effective_target_vxworks_kernel { } {\n     }]\n }\n \n+# Return 1 if the target is a VxWorks RTP.\n+\n+proc check_effective_target_vxworks_rtp { } {\n+    return [check_no_compiler_messages vxworks_rtp assembly {\n+\t#if !defined __vxworks || !defined __RTP__\n+\t#error NO\n+\t#endif\n+    }]\n+}\n+\n # Return 1 if the target is expected to provide wide character support.\n \n proc check_effective_target_wchar { } {"}]}