{"sha": "db66bf68a1cd1d417000032cc255dfe177ce50fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI2NmJmNjhhMWNkMWQ0MTcwMDAwMzJjYzI1NWRmZTE3N2NlNTBmYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-04-12T05:44:52Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-04-12T05:44:52Z"}, "message": "re PR middle-end/65743 (LTO+FDO build of Firefox crashes at startup)\n\n\n\tPR ipa/65743\n\t* ipa-inline-transform.c (speculation_removed): Remove static var.\n\t(check_speculations): New function.\n\t(clone_inlined_nodes): Do not check spculations.\n\t(inline_call): Call check_speculations.\n\t* ipa-prop.c (ipa_make_edge_direct_to_target): Do not\n\tconsider non-invariants.\n\nFrom-SVN: r222017", "tree": {"sha": "8ac0aecfa0363647ac374049bbb636b19fed1996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ac0aecfa0363647ac374049bbb636b19fed1996"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db66bf68a1cd1d417000032cc255dfe177ce50fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db66bf68a1cd1d417000032cc255dfe177ce50fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db66bf68a1cd1d417000032cc255dfe177ce50fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db66bf68a1cd1d417000032cc255dfe177ce50fc/comments", "author": null, "committer": null, "parents": [{"sha": "c153ad0318b0d4845a3a1598cae7e2617f9fe0e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c153ad0318b0d4845a3a1598cae7e2617f9fe0e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c153ad0318b0d4845a3a1598cae7e2617f9fe0e5"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "687770055df266d13c3c166f773bf55c180b864e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db66bf68a1cd1d417000032cc255dfe177ce50fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db66bf68a1cd1d417000032cc255dfe177ce50fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db66bf68a1cd1d417000032cc255dfe177ce50fc", "patch": "@@ -1,3 +1,13 @@\n+2015-04-11 Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/65743\n+\t* ipa-inline-transform.c (speculation_removed): Remove static var.\n+\t(check_speculations): New function.\n+\t(clone_inlined_nodes): Do not check spculations.\n+\t(inline_call): Call check_speculations.\n+\t* ipa-prop.c (ipa_make_edge_direct_to_target): Do not\n+\tconsider non-invariants.\n+\n 2015-04-11 Jan Hubicka  <hubicka@ucw.cz>\n \t   Martin Liska  <mliska@suse.cz>\n "}, {"sha": "5a628f39dd68b6c314e6ea19a25de0286497d54c", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db66bf68a1cd1d417000032cc255dfe177ce50fc/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db66bf68a1cd1d417000032cc255dfe177ce50fc/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=db66bf68a1cd1d417000032cc255dfe177ce50fc", "patch": "@@ -64,7 +64,6 @@ along with GCC; see the file COPYING3.  If not see\n \n int ncalls_inlined;\n int nfunctions_inlined;\n-bool speculation_removed;\n \n /* Scale frequency of NODE edges by FREQ_SCALE.  */\n \n@@ -256,12 +255,29 @@ clone_inlined_nodes (struct cgraph_edge *e, bool duplicate,\n       next = e->next_callee;\n       if (!e->inline_failed)\n         clone_inlined_nodes (e, duplicate, update_original, overall_size, freq_scale);\n+    }\n+}\n+\n+/* Check all speculations in N and resolve them if they seems useless. */\n+\n+static bool\n+check_speculations (cgraph_node *n)\n+{\n+  bool speculation_removed = false;\n+  cgraph_edge *next;\n+\n+  for (cgraph_edge *e = n->callees; e; e = next)\n+    {\n+      next = e->next_callee;\n       if (e->speculative && !speculation_useful_p (e, true))\n \t{\n \t  e->resolve_speculation (NULL);\n \t  speculation_removed = true;\n \t}\n+      else if (!e->inline_failed)\n+\tspeculation_removed |= check_speculations (e->callee);\n     }\n+  return speculation_removed;\n }\n \n /* Mark all call graph edges coming out of NODE and all nodes that have been\n@@ -310,7 +326,6 @@ inline_call (struct cgraph_edge *e, bool update_original,\n   bool predicated = inline_edge_summary (e)->predicate != NULL;\n #endif\n \n-  speculation_removed = false;\n   /* Don't inline inlined edges.  */\n   gcc_assert (e->inline_failed);\n   /* Don't even think of inlining inline clone.  */\n@@ -360,6 +375,7 @@ inline_call (struct cgraph_edge *e, bool update_original,\n     mark_all_inlined_calls_cdtor (e->callee);\n   if (opt_for_fn (e->caller->decl, optimize))\n     new_edges_found = ipa_propagate_indirect_call_infos (curr, new_edges);\n+  check_speculations (e->callee);\n   if (update_overall_summary)\n    inline_update_overall_summary (to);\n   new_size = inline_summaries->get (to)->size;"}, {"sha": "dc8f3606b1e295bdf8371296b8269965d8e714d7", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db66bf68a1cd1d417000032cc255dfe177ce50fc/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db66bf68a1cd1d417000032cc255dfe177ce50fc/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=db66bf68a1cd1d417000032cc255dfe177ce50fc", "patch": "@@ -2626,9 +2626,29 @@ ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target,\n       target = canonicalize_constructor_val (target, NULL);\n       if (!target || TREE_CODE (target) != FUNCTION_DECL)\n \t{\n-\t  if (ie->indirect_info->member_ptr)\n-\t    /* Member pointer call that goes through a VMT lookup.  */\n-\t    return NULL;\n+\t  /* Member pointer call that goes through a VMT lookup.  */\n+\t  if (ie->indirect_info->member_ptr\n+\t      /* Or if target is not an invariant expression and we do not\n+\t\t know if it will evaulate to function at runtime.\n+\t\t This can happen when folding through &VAR, where &VAR\n+\t\t is IP invariant, but VAR itself is not.\n+\n+\t\t TODO: Revisit this when GCC 5 is branched.  It seems that\n+\t\t member_ptr check is not needed and that we may try to fold\n+\t\t the expression and see if VAR is readonly.  */\n+\t      || !is_gimple_ip_invariant (target))\n+\t    {\n+\t      if (dump_enabled_p ())\n+\t\t{\n+\t\t  location_t loc = gimple_location_safe (ie->call_stmt);\n+\t\t  dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n+\t\t\t\t   \"discovered direct call non-invariant \"\n+\t\t\t\t   \"%s/%i\\n\",\n+\t\t\t\t   ie->caller->name (), ie->caller->order);\n+\t\t}\n+\t      return NULL;\n+\t    }\n+\n \n           if (dump_enabled_p ())\n \t    {"}]}