{"sha": "76e910c6b72b46e017d7be9a6494113ebae72f85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZlOTEwYzZiNzJiNDZlMDE3ZDdiZTlhNjQ5NDExM2ViYWU3MmY4NQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-11-09T14:01:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-11-09T14:01:33Z"}, "message": "bitmap.h (bitmap_single_bit_set_p): Declare.\n\n2007-11-09  Richard Guenther  <rguenther@suse.de>\n\n\t* bitmap.h (bitmap_single_bit_set_p): Declare.\n\t* bitmap.c (bitmap_single_bit_set_p): New function.\n\t* tree-ssa-alias.c (add_may_alias_for_new_tag): Use it.\n\t(maybe_create_global_var): Use bitmap_empty_p.\n\nFrom-SVN: r130045", "tree": {"sha": "d8b32d4da8ab288343c7d289a01fb22089dced27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8b32d4da8ab288343c7d289a01fb22089dced27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76e910c6b72b46e017d7be9a6494113ebae72f85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e910c6b72b46e017d7be9a6494113ebae72f85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76e910c6b72b46e017d7be9a6494113ebae72f85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e910c6b72b46e017d7be9a6494113ebae72f85/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de266950570fd88e4e205bfb87bcbd7ba89b5c27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de266950570fd88e4e205bfb87bcbd7ba89b5c27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de266950570fd88e4e205bfb87bcbd7ba89b5c27"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "5e44419a8171825065153f6f6a683c29c9d8dd59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e910c6b72b46e017d7be9a6494113ebae72f85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e910c6b72b46e017d7be9a6494113ebae72f85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76e910c6b72b46e017d7be9a6494113ebae72f85", "patch": "@@ -1,3 +1,10 @@\n+2007-11-09  Richard Guenther  <rguenther@suse.de>\n+\n+\t* bitmap.h (bitmap_single_bit_set_p): Declare.\n+\t* bitmap.c (bitmap_single_bit_set_p): New function.\n+\t* tree-ssa-alias.c (add_may_alias_for_new_tag): Use it.\n+\t(maybe_create_global_var): Use bitmap_empty_p.\n+\n 2007-11-09  Paolo Bonzini  <bonzini@gnu.org>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "c2a66f96a73f2e1bd9090b49b05f2ddd2f778c0b", "filename": "gcc/bitmap.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e910c6b72b46e017d7be9a6494113ebae72f85/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e910c6b72b46e017d7be9a6494113ebae72f85/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=76e910c6b72b46e017d7be9a6494113ebae72f85", "patch": "@@ -693,6 +693,40 @@ bitmap_count_bits (const_bitmap a)\n   return count;\n }\n \n+/* Return true if the bitmap has a single bit set.  Otherwise return\n+   false.  */\n+\n+bool\n+bitmap_single_bit_set_p (const_bitmap a)\n+{\n+  unsigned long count = 0;\n+  const bitmap_element *elt;\n+  unsigned ix;\n+\n+  if (bitmap_empty_p (a))\n+    return false;\n+\n+  elt = a->first;\n+  /* As there are no completely empty bitmap elements, a second one\n+     means we have more than one bit set.  */\n+  if (elt->next != NULL)\n+    return false;\n+\n+  for (ix = 0; ix != BITMAP_ELEMENT_WORDS; ix++)\n+    {\n+#if GCC_VERSION >= 3400\n+      /* Note that popcountl matches BITMAP_WORD in type, so the actual size\n+\t of BITMAP_WORD is not material.  */\n+      count += __builtin_popcountl (elt->bits[ix]);\n+#else\n+      count += bitmap_popcount (elt->bits[ix]);\n+#endif\n+      if (count > 1)\n+\treturn false;\n+    }\n+\n+  return count == 1;\n+}\n \n \n /* Return the bit number of the first set bit in the bitmap.  The"}, {"sha": "0b6ed731922df5c7a1556a933042fd1a48b691a6", "filename": "gcc/bitmap.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e910c6b72b46e017d7be9a6494113ebae72f85/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e910c6b72b46e017d7be9a6494113ebae72f85/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=76e910c6b72b46e017d7be9a6494113ebae72f85", "patch": "@@ -107,6 +107,9 @@ extern bool bitmap_intersect_compl_p (const_bitmap, const_bitmap);\n /* True if MAP is an empty bitmap.  */\n #define bitmap_empty_p(MAP) (!(MAP)->first)\n \n+/* True if the bitmap has only a single bit set.  */\n+extern bool bitmap_single_bit_set_p (const_bitmap);\n+\n /* Count the number of bits set in the bitmap.  */\n extern unsigned long bitmap_count_bits (const_bitmap);\n "}, {"sha": "f2e30646d4c38a9ccc0c61e7a6fdb51346545787", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e910c6b72b46e017d7be9a6494113ebae72f85/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e910c6b72b46e017d7be9a6494113ebae72f85/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=76e910c6b72b46e017d7be9a6494113ebae72f85", "patch": "@@ -2780,7 +2780,7 @@ maybe_create_global_var (void)\n \t So, if we have some pure/const and some regular calls in the\n \t program we create .GLOBAL_VAR to avoid missing these\n \t relations.  */\n-      if (bitmap_count_bits (gimple_call_clobbered_vars (cfun)) == 0\n+      if (bitmap_empty_p (gimple_call_clobbered_vars (cfun))\n \t  && stats->num_call_sites > 0\n \t  && stats->num_pure_const_call_sites > 0\n \t  && stats->num_call_sites > stats->num_pure_const_call_sites)\n@@ -3544,7 +3544,8 @@ add_may_alias_for_new_tag (tree tag, tree var)\n     aliases = may_aliases (var);\n \n   /* Case 1: |aliases| == 1  */\n-  if (aliases && bitmap_count_bits (aliases) == 1)\n+  if (aliases\n+      && bitmap_single_bit_set_p (aliases))\n     {\n       tree ali = referenced_var (bitmap_first_set_bit (aliases));\n       if (TREE_CODE (ali) == SYMBOL_MEMORY_TAG)"}]}