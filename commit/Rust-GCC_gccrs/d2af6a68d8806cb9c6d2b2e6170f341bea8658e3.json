{"sha": "d2af6a68d8806cb9c6d2b2e6170f341bea8658e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJhZjZhNjhkODgwNmNiOWM2ZDJiMmU2MTcwZjM0MWJlYTg2NThlMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-09-23T09:39:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-09-23T09:39:39Z"}, "message": "expr.c (expand_expr_real_1): Use get_callee_fndecl instead of checking CALL_EXPR_FN directly to test for...\n\n\t* expr.c (expand_expr_real_1) <case CALL_EXPR>: Use get_callee_fndecl\n\tinstead of checking CALL_EXPR_FN directly to test for builtins.\n\tIf error or warning attributes are present, print\n\terror resp. warning.\n\t* c-common.c (handle_error_attribute): New function.\n\t(c_common_attribute_table): Add error and warning\n\tattributes.\n\t* doc/extend.texi: Document error and warning attributes.\n\n\t* gcc.dg/va-arg-pack-len-1.c: Use error and warning\n\tattributes.\n\t* gcc.dg/va-arg-pack-len-2.c: New test.\n\t* g++.dg/ext/va-arg-pack-len-1.C: Use error and warning\n\tattributes.\n\t* g++.dg/ext/va-arg-pack-len-2.C: New test.\n\nFrom-SVN: r128687", "tree": {"sha": "0774e6c9fcd6e02b542fd8dfa85b60147d10b8cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0774e6c9fcd6e02b542fd8dfa85b60147d10b8cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d752cfdb114944cf3c800fcc2e4d030ab392c52c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d752cfdb114944cf3c800fcc2e4d030ab392c52c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d752cfdb114944cf3c800fcc2e4d030ab392c52c"}], "stats": {"total": 209, "additions": 187, "deletions": 22}, "files": [{"sha": "cfad806a99b9a1969285e76dde0120b9dd9c8e80", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2af6a68d8806cb9c6d2b2e6170f341bea8658e3", "patch": "@@ -1,5 +1,14 @@\n 2007-09-23  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* expr.c (expand_expr_real_1) <case CALL_EXPR>: Use get_callee_fndecl\n+\tinstead of checking CALL_EXPR_FN directly to test for builtins.\n+\tIf error or warning attributes are present, print\n+\terror resp. warning.\n+\t* c-common.c (handle_error_attribute): New function.\n+\t(c_common_attribute_table): Add error and warning\n+\tattributes.\n+\t* doc/extend.texi: Document error and warning attributes.\n+\n \t* tree.h (block_nonartificial_location): New prototype.\n \t* tree.c (block_nonartificial_location): New function.\n \t* dwarf2out.c (gen_subprogram_die): Add DW_AT_artificial"}, {"sha": "8ebc92007cacdc84ec41cfffdf43fc637831c23e", "filename": "gcc/c-common.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d2af6a68d8806cb9c6d2b2e6170f341bea8658e3", "patch": "@@ -518,6 +518,7 @@ static tree handle_always_inline_attribute (tree *, tree, tree, int,\n static tree handle_gnu_inline_attribute (tree *, tree, tree, int, bool *);\n static tree handle_artificial_attribute (tree *, tree, tree, int, bool *);\n static tree handle_flatten_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_error_attribute (tree *, tree, tree, int, bool *);\n static tree handle_used_attribute (tree *, tree, tree, int, bool *);\n static tree handle_unused_attribute (tree *, tree, tree, int, bool *);\n static tree handle_externally_visible_attribute (tree *, tree, tree, int,\n@@ -663,6 +664,10 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_cold_attribute },\n   { \"hot\",                    0, 0, true,  false, false,\n \t\t\t      handle_hot_attribute },\n+  { \"warning\",\t\t      1, 1, true,  false, false,\n+\t\t\t      handle_error_attribute },\n+  { \"error\",\t\t      1, 1, true,  false, false,\n+\t\t\t      handle_error_attribute },\n   { NULL,                     0, 0, false, false, false, NULL }\n };\n \n@@ -4923,6 +4928,26 @@ handle_flatten_attribute (tree *node, tree name,\n   return NULL_TREE;\n }\n \n+/* Handle a \"warning\" or \"error\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_error_attribute (tree *node, tree name, tree args,\n+\t\t\tint ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) == FUNCTION_DECL\n+      || TREE_CODE (TREE_VALUE (args)) == STRING_CST)\n+    /* Do nothing else, just set the attribute.  We'll get at\n+       it later with lookup_attribute.  */\n+    ;\n+  else\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n \n /* Handle a \"used\" attribute; arguments as in\n    struct attribute_spec.handler.  */"}, {"sha": "a4f7a3a68cef295747d7a8cd795cfcf379415033", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d2af6a68d8806cb9c6d2b2e6170f341bea8658e3", "patch": "@@ -1803,7 +1803,8 @@ attributes are currently defined for functions on all targets:\n @code{destructor}, @code{used}, @code{unused}, @code{deprecated},\n @code{weak}, @code{malloc}, @code{alias}, @code{warn_unused_result},\n @code{nonnull}, @code{gnu_inline}, @code{externally_visible},\n-@code{hot}, @code{cold} and @code{artificial}.\n+@code{hot}, @code{cold}, @code{artificial}, @code{error}\n+and @code{warning}.\n Several other attributes are defined for functions on particular\n target systems.  Other attributes, including @code{section} are\n supported for variables declarations (@pxref{Variable Attributes}) and\n@@ -1941,6 +1942,30 @@ Whether the function itself is considered for inlining depends on its size and\n the current inlining parameters.  The @code{flatten} attribute only works\n reliably in unit-at-a-time mode.\n \n+@item error (\"@var{message}\")\n+@cindex @code{error} function attribute\n+If this attribute is used on a function declaration and a call to such a function\n+is not eliminated through dead code elimination or other optimizations, an error\n+which will include @var{message} will be diagnosed.  This is useful\n+for compile time checking, especially together with @code{__builtin_constant_p}\n+and inline functions where checking the inline function arguments is not\n+possible through @code{extern char [(condition) ? 1 : -1];} tricks.\n+While it is possible to leave the function undefined and thus invoke\n+a link failure, when using this attribute the problem will be diagnosed\n+earlier and with exact location of the call even in presence of inline\n+functions or when not emitting debugging information.\n+\n+@item warning (\"@var{message}\")\n+@cindex @code{warning} function attribute\n+If this attribute is used on a function declaration and a call to such a function\n+is not eliminated through dead code elimination or other optimizations, a warning\n+which will include @var{message} will be diagnosed.  This is useful\n+for compile time checking, especially together with @code{__builtin_constant_p}\n+and inline functions.  While it is possible to define the function with\n+a message in @code{.gnu.warning*} section, when using this attribute the problem\n+will be diagnosed earlier and with exact location of the call even in presence\n+of inline functions or when not emitting debugging information.\n+\n @item cdecl\n @cindex functions that do pop the argument stack on the 386\n @opindex mrtd"}, {"sha": "afd01acb4aa569f5140cd3fa5d8b75bc15d4f632", "filename": "gcc/expr.c", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d2af6a68d8806cb9c6d2b2e6170f341bea8658e3", "patch": "@@ -8002,21 +8002,32 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t inlining.  */\n       if (CALL_EXPR_VA_ARG_PACK (exp))\n \terror (\"invalid use of %<__builtin_va_arg_pack ()%>\");\n-      /* Check for a built-in function.  */\n-      if (TREE_CODE (CALL_EXPR_FN (exp)) == ADDR_EXPR\n-\t  && (TREE_CODE (TREE_OPERAND (CALL_EXPR_FN (exp), 0))\n-\t      == FUNCTION_DECL)\n-\t  && DECL_BUILT_IN (TREE_OPERAND (CALL_EXPR_FN (exp), 0)))\n-\t{\n-\t  if (DECL_BUILT_IN_CLASS (TREE_OPERAND (CALL_EXPR_FN (exp), 0))\n-\t      == BUILT_IN_FRONTEND)\n-\t    return lang_hooks.expand_expr (exp, original_target,\n-\t\t\t\t\t   tmode, modifier,\n-\t\t\t\t\t   alt_rtl);\n-\t  else\n-\t    return expand_builtin (exp, target, subtarget, tmode, ignore);\n-\t}\n-\n+      {\n+\ttree fndecl = get_callee_fndecl (exp), attr;\n+\n+\tif (fndecl\n+\t    && (attr = lookup_attribute (\"error\",\n+\t\t\t\t\t DECL_ATTRIBUTES (fndecl))) != NULL)\n+\t  error (\"call to %qs declared with attribute error: %s\",\n+\t\t lang_hooks.decl_printable_name (fndecl, 1),\n+\t\t TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr))));\n+\tif (fndecl\n+\t    && (attr = lookup_attribute (\"warning\",\n+\t\t\t\t\t DECL_ATTRIBUTES (fndecl))) != NULL)\n+\t  warning (0, \"call to %qs declared with attribute warning: %s\",\n+\t\t   lang_hooks.decl_printable_name (fndecl, 1),\n+\t\t   TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr))));\n+\n+\t/* Check for a built-in function.  */\n+\tif (fndecl && DECL_BUILT_IN (fndecl))\n+\t  {\n+\t    if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_FRONTEND)\n+\t      return lang_hooks.expand_expr (exp, original_target,\n+\t\t\t\t\t     tmode, modifier, alt_rtl);\n+\t    else\n+\t      return expand_builtin (exp, target, subtarget, tmode, ignore);\n+\t  }\n+      }\n       return expand_call (exp, target, ignore);\n \n     case NON_LVALUE_EXPR:"}, {"sha": "294cf33e11defd20c93aa34af76fee4c7959dd6e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d2af6a68d8806cb9c6d2b2e6170f341bea8658e3", "patch": "@@ -1,5 +1,12 @@\n 2007-09-23  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.dg/va-arg-pack-len-1.c: Use error and warning\n+\tattributes.\n+\t* gcc.dg/va-arg-pack-len-2.c: New test.\n+\t* g++.dg/ext/va-arg-pack-len-1.C: Use error and warning\n+\tattributes.\n+\t* g++.dg/ext/va-arg-pack-len-2.C: New test.\n+\n \tPR middle-end/28755\n \t* gcc.dg/pr28755.c: New test.\n "}, {"sha": "d3c84091b8f03f1c99ec10aa2198e80af69cc363", "filename": "gcc/testsuite/g++.dg/ext/va-arg-pack-len-1.C", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fva-arg-pack-len-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fva-arg-pack-len-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fva-arg-pack-len-1.C?ref=d2af6a68d8806cb9c6d2b2e6170f341bea8658e3", "patch": "@@ -3,8 +3,10 @@\n \n #include <stdarg.h>\n \n-extern \"C\" int warn_open_missing_mode (void);\n-extern \"C\" int warn_open_too_many_arguments (void);\n+extern \"C\" int error_open_missing_mode (void)\n+  __attribute__((__error__ (\"open with O_CREAT needs 3 arguments, only 2 were given\")));\n+extern \"C\" int warn_open_too_many_arguments (void)\n+  __attribute__((__warning__ (\"open called with more than 3 arguments\")));\n extern \"C\" void abort (void);\n \n char expected_char;\n@@ -83,7 +85,7 @@ myopen (const char *path, int oflag, ...)\n     {\n       if ((oflag & 0x40) != 0 && __builtin_va_arg_pack_len () < 1)\n \t{\n-\t  warn_open_missing_mode ();\n+\t  error_open_missing_mode ();\n \t  return myopen2 (path, oflag);\n \t}\n       return myopenva (path, oflag, __builtin_va_arg_pack ());"}, {"sha": "0d369bdc9cb83f5e16325fce02384a19151b0340", "filename": "gcc/testsuite/g++.dg/ext/va-arg-pack-len-2.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fva-arg-pack-len-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fva-arg-pack-len-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fva-arg-pack-len-2.C?ref=d2af6a68d8806cb9c6d2b2e6170f341bea8658e3", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+#include <stdarg.h>\n+\n+extern int error_open_missing_mode (void)\n+  __attribute__((__error__ (\"open with O_CREAT needs 3 arguments, only 2 were given\")));\n+extern int warn_open_too_many_arguments (void)\n+  __attribute__((__warning__ (\"open called with more than 3 arguments\")));\n+\n+extern int myopen2 (const char *path, int oflag);\n+extern int myopenva (const char *path, int oflag, ...);\n+\n+extern inline __attribute__((always_inline, gnu_inline)) int\n+myopen (const char *path, int oflag, ...)\n+{\n+  if (__builtin_va_arg_pack_len () > 1)\n+    warn_open_too_many_arguments ();\t// { dg-warning \"called with more than 3\" }\n+\n+  if (__builtin_constant_p (oflag))\n+    {\n+      if ((oflag & 0x40) != 0 && __builtin_va_arg_pack_len () < 1)\n+\t{\n+\t  error_open_missing_mode ();\t// { dg-error \"needs 3 arguments, only 2 were given\" }\n+\t  return myopen2 (path, oflag);\n+\t}\n+      return myopenva (path, oflag, __builtin_va_arg_pack ());\n+    }\n+\n+  if (__builtin_va_arg_pack_len () < 1)\n+    return myopen2 (path, oflag);\n+\n+  return myopenva (path, oflag, __builtin_va_arg_pack ());\n+}\n+\n+int\n+main (void)\n+{\n+  myopen (\"h\", 0x43);\n+  myopen (\"i\", 0x43, 0644, 0655);\n+  return 0;\n+}"}, {"sha": "409c345850849aea2bc6c07bbb7797e3d60915b6", "filename": "gcc/testsuite/gcc.dg/va-arg-pack-len-1.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-pack-len-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-pack-len-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-pack-len-1.c?ref=d2af6a68d8806cb9c6d2b2e6170f341bea8658e3", "patch": "@@ -3,8 +3,10 @@\n \n #include <stdarg.h>\n \n-extern int warn_open_missing_mode (void);\n-extern int warn_open_too_many_arguments (void);\n+extern int error_open_missing_mode (void)\n+  __attribute__((__error__ (\"open with O_CREAT needs 3 arguments, only 2 were given\")));\n+extern int warn_open_too_many_arguments (void)\n+  __attribute__((__warning__ (\"open called with more than 3 arguments\")));\n extern void abort (void);\n \n char expected_char;\n@@ -83,7 +85,7 @@ myopen (const char *path, int oflag, ...)\n     {\n       if ((oflag & 0x40) != 0 && __builtin_va_arg_pack_len () < 1)\n \t{\n-\t  warn_open_missing_mode ();\n+\t  error_open_missing_mode ();\n \t  return myopen2 (path, oflag);\n \t}\n       return myopenva (path, oflag, __builtin_va_arg_pack ());"}, {"sha": "c3fa856fdaa54631282d1bc7ae3ae5fc96d5f067", "filename": "gcc/testsuite/gcc.dg/va-arg-pack-len-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-pack-len-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2af6a68d8806cb9c6d2b2e6170f341bea8658e3/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-pack-len-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-pack-len-2.c?ref=d2af6a68d8806cb9c6d2b2e6170f341bea8658e3", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <stdarg.h>\n+\n+extern int error_open_missing_mode (void)\n+  __attribute__((__error__ (\"open with O_CREAT needs 3 arguments, only 2 were given\")));\n+extern int warn_open_too_many_arguments (void)\n+  __attribute__((__warning__ (\"open called with more than 3 arguments\")));\n+\n+extern int myopen2 (const char *path, int oflag);\n+extern int myopenva (const char *path, int oflag, ...);\n+\n+extern inline __attribute__((always_inline, gnu_inline)) int\n+myopen (const char *path, int oflag, ...)\n+{\n+  if (__builtin_va_arg_pack_len () > 1)\n+    warn_open_too_many_arguments ();\t/* { dg-warning \"called with more than 3\" } */\n+\n+  if (__builtin_constant_p (oflag))\n+    {\n+      if ((oflag & 0x40) != 0 && __builtin_va_arg_pack_len () < 1)\n+\t{\n+\t  error_open_missing_mode ();\t/* { dg-error \"needs 3 arguments, only 2 were given\" } */\n+\t  return myopen2 (path, oflag);\n+\t}\n+      return myopenva (path, oflag, __builtin_va_arg_pack ());\n+    }\n+\n+  if (__builtin_va_arg_pack_len () < 1)\n+    return myopen2 (path, oflag);\n+\n+  return myopenva (path, oflag, __builtin_va_arg_pack ());\n+}\n+\n+int\n+main (void)\n+{\n+  myopen (\"h\", 0x43);\n+  myopen (\"i\", 0x43, 0644, 0655);\n+  return 0;\n+}"}]}