{"sha": "2aa514130a99ffeaff6ae3cdddf609be358022be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFhNTE0MTMwYTk5ZmZlYWZmNmFlM2NkZGRmNjA5YmUzNTgwMjJiZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-08-29T20:42:57Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-08-29T20:42:57Z"}, "message": "Allow the use of ad-hoc locations for fix-it hints\n\nCurrently the fix-it validator rejects ad-hoc locations.\nFix this by calling get_pure_location on the input locations to\nadd_fixit_insert/replace.  Doing so requires moving get_pure_location\nfrom gcc to libcpp.\n\ngcc/ChangeLog:\n\t* diagnostic-show-locus.c\n\t(selftest::test_one_liner_fixit_validation_adhoc_locations): New\n\tfunction.\n\t(selftest::test_diagnostic_show_locus_one_liner): Call it.\n\t* input.c (get_pure_location): Move to libcpp/line-map.c.\n\t* input.h (get_pure_location): Convert decl to an inline function\n\tcalling implementation in libcpp.\n\nlibcpp/ChangeLog:\n\t* include/line-map.h (get_pure_location): New decl.\n\t* line-map.c (get_pure_location): Move here, from gcc/input.c, adding\n\ta line_maps * param.\n\t(rich_location::add_fixit_insert): Call get_pure_location on \"where\".\n\t(rich_location::add_fixit_replace): Call get_pure_location on the\n\tend-points.\n\nFrom-SVN: r239843", "tree": {"sha": "6d574e6eb977268815029f2ec08618e51a518b9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d574e6eb977268815029f2ec08618e51a518b9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aa514130a99ffeaff6ae3cdddf609be358022be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa514130a99ffeaff6ae3cdddf609be358022be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aa514130a99ffeaff6ae3cdddf609be358022be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa514130a99ffeaff6ae3cdddf609be358022be/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "adfa1e6b37f5b18570a6200a0784bd8074c5f1e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0"}], "stats": {"total": 150, "additions": 127, "deletions": 23}, "files": [{"sha": "478351818c2f006abd9b046f5e062e5c6a15a583", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa514130a99ffeaff6ae3cdddf609be358022be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa514130a99ffeaff6ae3cdddf609be358022be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2aa514130a99ffeaff6ae3cdddf609be358022be", "patch": "@@ -1,3 +1,13 @@\n+2016-08-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-show-locus.c\n+\t(selftest::test_one_liner_fixit_validation_adhoc_locations): New\n+\tfunction.\n+\t(selftest::test_diagnostic_show_locus_one_liner): Call it.\n+\t* input.c (get_pure_location): Move to libcpp/line-map.c.\n+\t* input.h (get_pure_location): Convert decl to an inline function\n+\tcalling implementation in libcpp.\n+\n 2016-08-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/77403"}, {"sha": "ba52f24778a9a97aa164e1baba970b8f87f8980c", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa514130a99ffeaff6ae3cdddf609be358022be/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa514130a99ffeaff6ae3cdddf609be358022be/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=2aa514130a99ffeaff6ae3cdddf609be358022be", "patch": "@@ -1594,6 +1594,75 @@ test_one_liner_fixit_replace_equal_secondary_range ()\n \t\tpp_formatted_text (dc.printer));\n }\n \n+/* Verify that we can use ad-hoc locations when adding fixits to a\n+   rich_location.  */\n+\n+static void\n+test_one_liner_fixit_validation_adhoc_locations ()\n+{\n+  /* Generate a range that's too long to be packed, so must\n+     be stored as an ad-hoc location (given the defaults\n+     of 5 bits or 0 bits of packed range); 41 columns > 2**5.  */\n+  const location_t c7 = linemap_position_for_column (line_table, 7);\n+  const location_t c47 = linemap_position_for_column (line_table, 47);\n+  const location_t loc = make_location (c7, c7, c47);\n+\n+  if (c47 > LINE_MAP_MAX_LOCATION_WITH_COLS)\n+    return;\n+\n+  ASSERT_TRUE (IS_ADHOC_LOC (loc));\n+\n+  /* Insert.  */\n+  {\n+    rich_location richloc (line_table, loc);\n+    richloc.add_fixit_insert (loc, \"test\");\n+    /* It should not have been discarded by the validator.  */\n+    ASSERT_EQ (1, richloc.get_num_fixit_hints ());\n+\n+    test_diagnostic_context dc;\n+    diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+    ASSERT_STREQ (\"\\n\"\n+\t\t  \" foo = bar.field;\\n\"\n+\t\t  \"       ^~~~~~~~~~                               \\n\"\n+\t\t  \"       test\\n\",\n+\t\t  pp_formatted_text (dc.printer));\n+  }\n+\n+  /* Remove.  */\n+  {\n+    rich_location richloc (line_table, loc);\n+    source_range range = source_range::from_locations (loc, c47);\n+    richloc.add_fixit_remove (range);\n+    /* It should not have been discarded by the validator.  */\n+    ASSERT_EQ (1, richloc.get_num_fixit_hints ());\n+\n+    test_diagnostic_context dc;\n+    diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+    ASSERT_STREQ (\"\\n\"\n+\t\t  \" foo = bar.field;\\n\"\n+\t\t  \"       ^~~~~~~~~~                               \\n\"\n+\t\t  \"       -----------------------------------------\\n\",\n+\t\t  pp_formatted_text (dc.printer));\n+  }\n+\n+  /* Replace.  */\n+  {\n+    rich_location richloc (line_table, loc);\n+    source_range range = source_range::from_locations (loc, c47);\n+    richloc.add_fixit_replace (range, \"test\");\n+    /* It should not have been discarded by the validator.  */\n+    ASSERT_EQ (1, richloc.get_num_fixit_hints ());\n+\n+    test_diagnostic_context dc;\n+    diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+    ASSERT_STREQ (\"\\n\"\n+\t\t  \" foo = bar.field;\\n\"\n+\t\t  \"       ^~~~~~~~~~                               \\n\"\n+\t\t  \"       test\\n\",\n+\t\t  pp_formatted_text (dc.printer));\n+  }\n+}\n+\n /* Run the various one-liner tests.  */\n \n static void\n@@ -1626,6 +1695,7 @@ test_diagnostic_show_locus_one_liner (const line_table_case &case_)\n   test_one_liner_fixit_replace ();\n   test_one_liner_fixit_replace_non_equal_range ();\n   test_one_liner_fixit_replace_equal_secondary_range ();\n+  test_one_liner_fixit_validation_adhoc_locations ();\n }\n \n /* Verify that fix-it hints are appropriately consolidated."}, {"sha": "a3fe54209dd327a2e644a056d3dd4c67d5b7aafa", "filename": "gcc/input.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa514130a99ffeaff6ae3cdddf609be358022be/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa514130a99ffeaff6ae3cdddf609be358022be/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=2aa514130a99ffeaff6ae3cdddf609be358022be", "patch": "@@ -838,28 +838,6 @@ expansion_point_location (source_location location)\n \t\t\t\t   LRK_MACRO_EXPANSION_POINT, NULL);\n }\n \n-/* Given location LOC, strip away any packed range information\n-   or ad-hoc information.  */\n-\n-location_t\n-get_pure_location (location_t loc)\n-{\n-  if (IS_ADHOC_LOC (loc))\n-    loc\n-      = line_table->location_adhoc_data_map.data[loc & MAX_SOURCE_LOCATION].locus;\n-\n-  if (loc >= LINEMAPS_MACRO_LOWEST_LOCATION (line_table))\n-    return loc;\n-\n-  if (loc < RESERVED_LOCATION_COUNT)\n-    return loc;\n-\n-  const line_map *map = linemap_lookup (line_table, loc);\n-  const line_map_ordinary *ordmap = linemap_check_ordinary (map);\n-\n-  return loc & ~((1 << ordmap->m_range_bits) - 1);\n-}\n-\n /* Construct a location with caret at CARET, ranging from START to\n    finish e.g.\n "}, {"sha": "fd21f34abf15d663aecb87e6c6fb8bf3cdeaf3ab", "filename": "gcc/input.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa514130a99ffeaff6ae3cdddf609be358022be/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa514130a99ffeaff6ae3cdddf609be358022be/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=2aa514130a99ffeaff6ae3cdddf609be358022be", "patch": "@@ -77,7 +77,11 @@ extern location_t input_location;\n #define from_macro_expansion_at(LOC) \\\n   ((linemap_location_from_macro_expansion_p (line_table, LOC)))\n \n-extern location_t get_pure_location (location_t loc);\n+static inline location_t\n+get_pure_location (location_t loc)\n+{\n+  return get_pure_location (line_table, loc);\n+}\n \n /* Get the start of any range encoded within location LOC.  */\n "}, {"sha": "37825f524d35cd47e7c07c0607a0a03e15130ed6", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa514130a99ffeaff6ae3cdddf609be358022be/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa514130a99ffeaff6ae3cdddf609be358022be/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=2aa514130a99ffeaff6ae3cdddf609be358022be", "patch": "@@ -1,3 +1,12 @@\n+2016-08-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* include/line-map.h (get_pure_location): New decl.\n+\t* line-map.c (get_pure_location): Move here, from gcc/input.c, adding\n+\ta line_maps * param.\n+\t(rich_location::add_fixit_insert): Call get_pure_location on \"where\".\n+\t(rich_location::add_fixit_replace): Call get_pure_location on the\n+\tend-points.\n+\n 2016-08-26  David Malcolm  <dmalcolm@redhat.com>\n \n \t* include/line-map.h (rich_location): Eliminate unimplemented"}, {"sha": "d9c31deb9772f2c8749946755974edfc009dc6bb", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa514130a99ffeaff6ae3cdddf609be358022be/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa514130a99ffeaff6ae3cdddf609be358022be/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=2aa514130a99ffeaff6ae3cdddf609be358022be", "patch": "@@ -1002,6 +1002,12 @@ IS_ADHOC_LOC (source_location loc)\n bool\n pure_location_p (line_maps *set, source_location loc);\n \n+/* Given location LOC within SET, strip away any packed range information\n+   or ad-hoc information.  */\n+\n+extern source_location get_pure_location (line_maps *set,\n+\t\t\t\t\t  source_location loc);\n+\n /* Combine LOC and BLOCK, giving a combined adhoc location.  */\n \n inline source_location"}, {"sha": "f5b15867a62190131e94fb598aa69eef63f74df0", "filename": "libcpp/line-map.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa514130a99ffeaff6ae3cdddf609be358022be/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa514130a99ffeaff6ae3cdddf609be358022be/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=2aa514130a99ffeaff6ae3cdddf609be358022be", "patch": "@@ -311,6 +311,28 @@ pure_location_p (line_maps *set, source_location loc)\n   return true;\n }\n \n+/* Given location LOC within SET, strip away any packed range information\n+   or ad-hoc information.  */\n+\n+source_location\n+get_pure_location (line_maps *set, source_location loc)\n+{\n+  if (IS_ADHOC_LOC (loc))\n+    loc\n+      = set->location_adhoc_data_map.data[loc & MAX_SOURCE_LOCATION].locus;\n+\n+  if (loc >= LINEMAPS_MACRO_LOWEST_LOCATION (set))\n+    return loc;\n+\n+  if (loc < RESERVED_LOCATION_COUNT)\n+    return loc;\n+\n+  const line_map *map = linemap_lookup (set, loc);\n+  const line_map_ordinary *ordmap = linemap_check_ordinary (map);\n+\n+  return loc & ~((1 << ordmap->m_range_bits) - 1);\n+}\n+\n /* Finalize the location_adhoc_data structure.  */\n void\n location_adhoc_data_fini (struct line_maps *set)\n@@ -2077,6 +2099,8 @@ void\n rich_location::add_fixit_insert (source_location where,\n \t\t\t\t const char *new_content)\n {\n+  where = get_pure_location (m_line_table, where);\n+\n   if (reject_impossible_fixit (where))\n     return;\n \n@@ -2141,6 +2165,9 @@ rich_location::add_fixit_replace (source_range src_range,\n {\n   linemap_assert (m_num_fixit_hints < MAX_FIXIT_HINTS);\n \n+  src_range.m_start = get_pure_location (m_line_table, src_range.m_start);\n+  src_range.m_finish = get_pure_location (m_line_table, src_range.m_finish);\n+\n   if (reject_impossible_fixit (src_range.m_start))\n     return;\n   if (reject_impossible_fixit (src_range.m_finish))"}]}