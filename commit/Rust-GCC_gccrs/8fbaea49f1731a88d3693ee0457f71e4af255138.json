{"sha": "8fbaea49f1731a88d3693ee0457f71e4af255138", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZiYWVhNDlmMTczMWE4OGQzNjkzZWUwNDU3ZjcxZTRhZjI1NTEzOA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-06-08T22:41:49Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-06-08T22:41:49Z"}, "message": "(cpu, memory, imuldiv, adder, mult, divide): Add vr4100 and vr4300 support.\n\n(cpu, memory, imuldiv, adder, mult, divide): Add\nvr4100 and vr4300 support.\n(muldf3, mulsf3): Add vr4300 support.\n(muldf3_internal, muldf_r4300, mulsf3_internal, mulsf_r4300): New\npatterns.\n\nFrom-SVN: r12250", "tree": {"sha": "d1d91e47ebcce8c1205ce064a55af22b99feb2d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1d91e47ebcce8c1205ce064a55af22b99feb2d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fbaea49f1731a88d3693ee0457f71e4af255138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fbaea49f1731a88d3693ee0457f71e4af255138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fbaea49f1731a88d3693ee0457f71e4af255138", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fbaea49f1731a88d3693ee0457f71e4af255138/comments", "author": null, "committer": null, "parents": [{"sha": "00b3e0523c5edad4cbef35bdace40f6430072ae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b3e0523c5edad4cbef35bdace40f6430072ae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00b3e0523c5edad4cbef35bdace40f6430072ae3"}], "stats": {"total": 159, "additions": 144, "deletions": 15}, "files": [{"sha": "f75e73773edb86eb155a66fcf107368d7034740f", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 144, "deletions": 15, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fbaea49f1731a88d3693ee0457f71e4af255138/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fbaea49f1731a88d3693ee0457f71e4af255138/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=8fbaea49f1731a88d3693ee0457f71e4af255138", "patch": "@@ -93,7 +93,7 @@\n ;;          (const_string \"default\"))))\n \n ;; ??? Fix everything that tests this attribute.\n-(define_attr \"cpu\" \"default,r3000,r6000,r4000,r4600,r4650,r8000\"\n+(define_attr \"cpu\" \"default,r3000,r6000,r4000,r4100,r4300,r4600,r4650,r8000\"\n   (const (symbol_ref \"mips_cpu_attr\")))\n \n ;; Attribute defining whether or not we can use the branch-likely instructions\n@@ -151,13 +151,17 @@\n ;; Make the default case (PROCESSOR_DEFAULT) handle the worst case\n \n (define_function_unit \"memory\" 1 0\n-  (and (eq_attr \"type\" \"load\") (eq_attr \"cpu\" \"!r3000,r4600,r4650\"))\n+  (and (eq_attr \"type\" \"load\") (eq_attr \"cpu\" \"!r3000,r4600,r4650,r4100,r4300\"))\n   3 0)\n \n (define_function_unit \"memory\" 1 0\n   (and (eq_attr \"type\" \"load\") (eq_attr \"cpu\" \"r3000,r4600,r4650\"))\n   2 0)\n \n+(define_function_unit \"memory\" 1 0\n+  (and (eq_attr \"type\" \"load\") (eq_attr \"cpu\" \"r4100,r4300\"))\n+  1 0)\n+\n (define_function_unit \"memory\"   1 0 (eq_attr \"type\" \"store\") 1 0)\n \n (define_function_unit \"memory\"   1 0 (eq_attr \"type\" \"xfer\") 2 0)\n@@ -167,7 +171,7 @@\n   1 3)\n \n (define_function_unit \"imuldiv\"  1 0\n-  (and (eq_attr \"type\" \"imul\") (eq_attr \"cpu\" \"!r3000,r4000,r4600,r4650\"))\n+  (and (eq_attr \"type\" \"imul\") (eq_attr \"cpu\" \"!r3000,r4000,r4600,r4650,r4100,r4300\"))\n   17 17)\n \n (define_function_unit \"imuldiv\"  1 0\n@@ -183,7 +187,23 @@\n   4 4)\n \n (define_function_unit \"imuldiv\"  1 0\n-  (and (eq_attr \"type\" \"idiv\") (eq_attr \"cpu\" \"!r3000,r4000,r4600,r4650\"))\n+  (and (eq_attr \"type\" \"imul\") (and (eq_attr \"mode\" \"SI\") (eq_attr \"cpu\" \"r4100\")))\n+  1 1)\n+\n+(define_function_unit \"imuldiv\"  1 0\n+  (and (eq_attr \"type\" \"imul\") (and (eq_attr \"mode\" \"DI\") (eq_attr \"cpu\" \"r4100\")))\n+  4 4)\n+\n+(define_function_unit \"imuldiv\"  1 0\n+  (and (eq_attr \"type\" \"imul\") (and (eq_attr \"mode\" \"SI\") (eq_attr \"cpu\" \"r4300\")))\n+  5 5)\n+\n+(define_function_unit \"imuldiv\"  1 0\n+  (and (eq_attr \"type\" \"imul\") (and (eq_attr \"mode\" \"DI\") (eq_attr \"cpu\" \"r4300\")))\n+  8 8)\n+\n+(define_function_unit \"imuldiv\"  1 0\n+  (and (eq_attr \"type\" \"idiv\") (eq_attr \"cpu\" \"!r3000,r4000,r4600,r4650,r4100,r4300\"))\n   38 38)\n \n (define_function_unit \"imuldiv\"  1 0\n@@ -202,16 +222,39 @@\n   (and (eq_attr \"type\" \"idiv\") (eq_attr \"cpu\" \"r4000\"))\n   69 69)\n \n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"idiv\") (and (eq_attr \"mode\" \"SI\") (eq_attr \"cpu\" \"r4100\")))\n+  35 35)\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"idiv\") (and (eq_attr \"mode\" \"DI\") (eq_attr \"cpu\" \"r4100\")))\n+  67 67)\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"idiv\") (and (eq_attr \"mode\" \"SI\") (eq_attr \"cpu\" \"r4300\")))\n+  37 37)\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"idiv\") (and (eq_attr \"mode\" \"DI\") (eq_attr \"cpu\" \"r4300\")))\n+  69 69)\n+\n+;; The R4300 does *NOT* have a seperate Floating Point Unit, instead\n+;; the FP hardware is part of the normal ALU circuitry.  This means FP\n+;; instructions affect the pipe-line, and no functional unit\n+;; parallelism can occur on R4300 processors.  To force GCC into coding\n+;; for only a single functional unit, we force the R4300 FP\n+;; instructions to be processed in the \"imuldiv\" unit.\n+\n (define_function_unit \"adder\" 1 1\n-  (and (eq_attr \"type\" \"fcmp\") (eq_attr \"cpu\" \"!r3000,r6000\"))\n+  (and (eq_attr \"type\" \"fcmp\") (eq_attr \"cpu\" \"!r3000,r6000,r4300\"))\n   3 0)\n \n (define_function_unit \"adder\" 1 1\n   (and (eq_attr \"type\" \"fcmp\") (eq_attr \"cpu\" \"r3000,r6000\"))\n   2 0)\n \n (define_function_unit \"adder\" 1 1\n-  (and (eq_attr \"type\" \"fadd\") (eq_attr \"cpu\" \"!r3000,r6000\"))\n+  (and (eq_attr \"type\" \"fadd\") (eq_attr \"cpu\" \"!r3000,r6000,r4300\"))\n   4 0)\n \n (define_function_unit \"adder\" 1 1\n@@ -223,15 +266,15 @@\n   3 0)\n \n (define_function_unit \"adder\" 1 1\n-  (and (eq_attr \"type\" \"fabs,fneg\") (eq_attr \"cpu\" \"!r3000,r4600,r4650\"))\n+  (and (eq_attr \"type\" \"fabs,fneg\") (eq_attr \"cpu\" \"!r3000,r4600,r4650,r4300\"))\n   2 0)\n \n (define_function_unit \"adder\" 1 1\n   (and (eq_attr \"type\" \"fabs,fneg\") (eq_attr \"cpu\" \"r3000,r4600,r4650\"))\n   1 0)\n \n (define_function_unit \"mult\" 1 1\n-  (and (eq_attr \"type\" \"fmul\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"!r3000,r6000,r4600,r4650\")))\n+  (and (eq_attr \"type\" \"fmul\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"!r3000,r6000,r4600,r4650,r4300\")))\n   7 0)\n \n (define_function_unit \"mult\" 1 1\n@@ -247,7 +290,7 @@\n   8 0)\n \n (define_function_unit \"mult\" 1 1\n-  (and (eq_attr \"type\" \"fmul\") (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"!r3000,r6000\")))\n+  (and (eq_attr \"type\" \"fmul\") (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"!r3000,r6000,r4300\")))\n   8 0)\n \n (define_function_unit \"mult\" 1 1\n@@ -259,7 +302,7 @@\n   6 0)\n \n (define_function_unit \"divide\" 1 1\n-  (and (eq_attr \"type\" \"fdiv\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"!r3000,r6000,r4600,r4650\")))\n+  (and (eq_attr \"type\" \"fdiv\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"!r3000,r6000,r4600,r4650,r4300\")))\n   23 0)\n \n (define_function_unit \"divide\" 1 1\n@@ -275,7 +318,7 @@\n   32 0)\n \n (define_function_unit \"divide\" 1 1\n-  (and (eq_attr \"type\" \"fdiv\") (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"!r3000,r6000,r4600,r4650\")))\n+  (and (eq_attr \"type\" \"fdiv\") (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"!r3000,r6000,r4600,r4650,r4300\")))\n   36 0)\n \n (define_function_unit \"divide\" 1 1\n@@ -292,20 +335,42 @@\n \n ;;; ??? Is this number right?\n (define_function_unit \"divide\" 1 1\n-  (and (eq_attr \"type\" \"fsqrt\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"!r4600,r4650\")))\n+  (and (eq_attr \"type\" \"fsqrt\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"!r4600,r4650,r4300\")))\n   54 0)\n (define_function_unit \"divide\" 1 1\n   (and (eq_attr \"type\" \"fsqrt\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"r4600,r4650\")))\n   31 0)\n \n ;;; ??? Is this number right?\n (define_function_unit \"divide\" 1 1\n-  (and (eq_attr \"type\" \"fsqrt\") (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"!r4600,r4650\")))\n+  (and (eq_attr \"type\" \"fsqrt\") (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"!r4600,r4650,r4300\")))\n   112 0)\n (define_function_unit \"divide\" 1 1\n   (and (eq_attr \"type\" \"fsqrt\") (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"r4600,r4650\")))\n   60 0)\n \n+;; R4300 FP instruction classes treated as part of the \"imuldiv\"\n+;; functional unit:\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"fadd\") (eq_attr \"cpu\" \"r4300\"))\n+  3 3)\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"fmul\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"r4300\")))\n+  5 5)\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"fmul\") (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"r4300\")))\n+  8 8)\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (and (eq_attr \"type\" \"fdiv\") (eq_attr \"type\" \"fsqrt\"))\n+       (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"r4300\")))\n+  29 29)\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (and (eq_attr \"type\" \"fdiv\") (eq_attr \"type\" \"fsqrt\"))\n+       (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"r4300\")))\n+  58 58)\n \f\n ;; The following functional units do not use the cpu type, and use\n ;; much less memory in genattrtab.c.\n@@ -803,26 +868,90 @@\n ;;  ....................\n ;;\n \n-(define_insn \"muldf3\"\n+;; Vr4300 has a CPU bug where multiplies with certain operands may\n+;; corrupt immediately following multiplies. This is a simple fix to\n+;; insert NOPs.\n+\n+(define_expand \"muldf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n \t\t (match_operand:DF 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n+  \"\n+{\n+  if (mips_cpu != PROCESSOR_R4300)\n+    emit_insn (gen_muldf3_internal (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_muldf3_r4300 (operands[0], operands[1], operands[2]));\n+  DONE;\n+}\")\n+\n+(define_insn \"muldf3_internal\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t (match_operand:DF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && mips_cpu != PROCESSOR_R4300\"\n   \"mul.d\\\\t%0,%1,%2\"\n   [(set_attr \"type\"\t\"fmul\")\n    (set_attr \"mode\"\t\"DF\")\n    (set_attr \"length\"\t\"1\")])\n \n-(define_insn \"mulsf3\"\n+(define_insn \"muldf3_r4300\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t (match_operand:DF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && mips_cpu == PROCESSOR_R4300\"\n+  \"*\n+{\n+  output_asm_insn (\\\"mul.d\\\\t%0,%1,%2\\\", operands);\n+  if (TARGET_4300_MUL_FIX)\n+    output_asm_insn (\\\"nop\\\", operands);\n+  return \\\"\\\";\n+}\"\n+  [(set_attr \"type\"\t\"fmul\")\n+   (set_attr \"mode\"\t\"DF\")\n+   (set_attr \"length\"\t\"2\")])\t;; mul.d + nop\n+\n+(define_expand \"mulsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n \t\t (match_operand:SF 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT\"\n+  \"\n+{\n+  if (mips_cpu != PROCESSOR_R4300)\n+    emit_insn( gen_mulsf3_internal (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn( gen_mulsf3_r4300 (operands[0], operands[1], operands[2]));\n+  DONE;\n+}\")\n+\n+(define_insn \"mulsf3_internal\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t (match_operand:SF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT && mips_cpu != PROCESSOR_R4300\"\n   \"mul.s\\\\t%0,%1,%2\"\n   [(set_attr \"type\"\t\"fmul\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"1\")])\n \n+(define_insn \"mulsf3_r4300\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t (match_operand:SF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT && mips_cpu == PROCESSOR_R4300\"\n+  \"*\n+{\n+  output_asm_insn (\\\"mul.s\\\\t%0,%1,%2\\\", operands);\n+  if (TARGET_4300_MUL_FIX)\n+    output_asm_insn (\\\"nop\\\", operands);\n+  return \\\"\\\";\n+}\"\n+  [(set_attr \"type\"\t\"fmul\")\n+   (set_attr \"mode\"\t\"SF\")\n+   (set_attr \"length\"\t\"2\")])\t;; mul.s + nop\n+\n ;; ??? The R4000 (only) has a cpu bug.  If a double-word shift executes while\n ;; a multiply is in progress, it may give an incorrect result.  Avoid\n ;; this by keeping the mflo with the mult on the R4000."}]}