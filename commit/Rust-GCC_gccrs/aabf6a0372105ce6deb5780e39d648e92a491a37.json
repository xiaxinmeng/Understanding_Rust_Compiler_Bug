{"sha": "aabf6a0372105ce6deb5780e39d648e92a491a37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFiZjZhMDM3MjEwNWNlNmRlYjU3ODBlMzlkNjQ4ZTkyYTQ5MWEzNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-10-09T18:30:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-10-09T18:30:05Z"}, "message": "re PR tree-optimization/41634 (ICE in dom)\n\n2009-10-09  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/41634\n\t* tree-ssa-dom.c (remove_local_expressions_from_table): Assert\n\twe remove the correct elements.\n\t(optimize_stmt): Make sure to update stmt operands before\n\toptimizing redundancies.\n\n\t* gcc.c-torture/compile/pr41634.c: New testcase.\n\nFrom-SVN: r152596", "tree": {"sha": "bc4e9a09cb8aa0923418bc4e26f89acdd15cce42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc4e9a09cb8aa0923418bc4e26f89acdd15cce42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aabf6a0372105ce6deb5780e39d648e92a491a37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aabf6a0372105ce6deb5780e39d648e92a491a37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aabf6a0372105ce6deb5780e39d648e92a491a37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aabf6a0372105ce6deb5780e39d648e92a491a37/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38265b74007bae4edb7a6b28a17cae94e51b1bdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38265b74007bae4edb7a6b28a17cae94e51b1bdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38265b74007bae4edb7a6b28a17cae94e51b1bdf"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "ac0fd78537898336976af0086ae91a5f0077bb56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aabf6a0372105ce6deb5780e39d648e92a491a37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aabf6a0372105ce6deb5780e39d648e92a491a37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aabf6a0372105ce6deb5780e39d648e92a491a37", "patch": "@@ -1,3 +1,11 @@\n+2009-10-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/41634\n+\t* tree-ssa-dom.c (remove_local_expressions_from_table): Assert\n+\twe remove the correct elements.\n+\t(optimize_stmt): Make sure to update stmt operands before\n+\toptimizing redundancies.\n+\n 2009-10-09  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.md (\"prefetch\"): Remove stcmh for prefetching."}, {"sha": "64e65d731e8190dd3815d466b24a7d898c409411", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aabf6a0372105ce6deb5780e39d648e92a491a37/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aabf6a0372105ce6deb5780e39d648e92a491a37/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aabf6a0372105ce6deb5780e39d648e92a491a37", "patch": "@@ -1,3 +1,8 @@\n+2009-10-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/41634\n+\t* gcc.c-torture/compile/pr41634.c: New testcase.\n+\n 2009-10-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gfortran.dg/block_2.f08: Cleanup \"original\" tree dump."}, {"sha": "976e463e2ba80a4a719bdf04ec4255ff0dec74ad", "filename": "gcc/testsuite/gcc.c-torture/compile/pr41634.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aabf6a0372105ce6deb5780e39d648e92a491a37/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41634.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aabf6a0372105ce6deb5780e39d648e92a491a37/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41634.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41634.c?ref=aabf6a0372105ce6deb5780e39d648e92a491a37", "patch": "@@ -0,0 +1,19 @@\n+extern int _xgetw();\n+extern int foo(char*);\n+\n+void test_readmode( int ascii_mode )\n+{\n+  static const char outbuffer[]\n+    = \"0,1,2,3,4,5,6,7,8,9\\r\\n\\r\\nA,B,C,D,E\\r\\nX,Y,Z\";\n+  char buffer[2*512 +256];\n+  int i, j, ao;\n+  unsigned int fp;\n+\n+  foo(buffer);\n+\n+  for (i=0, j=0; i<6; i++) {\n+      if (ao==0 || outbuffer[fp-3+i] != '\\r')\n+\tbuffer[j++] = outbuffer[fp-3+i];\n+  }\n+  _xgetw();\n+}"}, {"sha": "1e2c8f23ce8129ceb037d1f1adce2fa8c578e43e", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aabf6a0372105ce6deb5780e39d648e92a491a37/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aabf6a0372105ce6deb5780e39d648e92a491a37/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=aabf6a0372105ce6deb5780e39d648e92a491a37", "patch": "@@ -816,24 +816,25 @@ remove_local_expressions_from_table (void)\n   /* Remove all the expressions made available in this block.  */\n   while (VEC_length (expr_hash_elt_t, avail_exprs_stack) > 0)\n     {\n-      struct expr_hash_elt element;\n       expr_hash_elt_t victim = VEC_pop (expr_hash_elt_t, avail_exprs_stack);\n+      void **slot;\n \n       if (victim == NULL)\n \tbreak;\n \n-      element = *victim;\n-\n       /* This must precede the actual removal from the hash table,\n          as ELEMENT and the table entry may share a call argument\n          vector which will be freed during removal.  */\n       if (dump_file && (dump_flags & TDF_DETAILS))\n         {\n           fprintf (dump_file, \"<<<< \");\n-          print_expr_hash_elt (dump_file, &element);\n+          print_expr_hash_elt (dump_file, victim);\n         }\n \n-      htab_remove_elt_with_hash (avail_exprs, &element, element.hash);\n+      slot = htab_find_slot_with_hash (avail_exprs,\n+\t\t\t\t       victim, victim->hash, NO_INSERT);\n+      gcc_assert (slot && *slot == (void *) victim);\n+      htab_clear_slot (avail_exprs, slot);\n     }\n }\n \n@@ -2137,8 +2138,6 @@ optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n \n   if (may_optimize_p)\n     {\n-      eliminate_redundant_computations (&si);\n-      stmt = gsi_stmt (si);\n       if (gimple_code (stmt) == GIMPLE_CALL)\n \t{\n \t  /* Resolve __builtin_constant_p.  If it hasn't been\n@@ -2153,6 +2152,10 @@ optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n \t      stmt = gsi_stmt (si);\n \t    }\n \t}\n+\n+      update_stmt_if_modified (stmt);\n+      eliminate_redundant_computations (&si);\n+      stmt = gsi_stmt (si);\n     }\n \n   /* Record any additional equivalences created by this statement.  */\n@@ -2188,7 +2191,7 @@ optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n     {\n       tree val = NULL;\n       \n-      update_stmt (stmt);\n+      update_stmt_if_modified (stmt);\n \n       if (gimple_code (stmt) == GIMPLE_COND)\n         val = fold_binary_loc (gimple_location (stmt),"}]}