{"sha": "d86dc3036d4ecd0432daad6a66dee219110cba5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg2ZGMzMDM2ZDRlY2QwNDMyZGFhZDZhNjZkZWUyMTkxMTBjYmE1YQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2005-03-09T20:11:48Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2005-03-09T20:11:48Z"}, "message": "builtins.c (fold_builtin_cbrt, [...]): Rearrange code.\n\n\t* builtins.c (fold_builtin_cbrt, fold_builtin_pow): Rearrange\n\tcode.  Add more cbrt transformations.\n\ntestsuite:\n\t* gcc.dg/builtins-10.c: Reactivate disabled test.\n\t* gcc.dg/torture/builtin-power-1.c: Likewise.  Also add tests for\n\tnew cbrt transformations.\n\nFrom-SVN: r96206", "tree": {"sha": "dbef59a183a8241d0fee11d70432c971171cfd8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbef59a183a8241d0fee11d70432c971171cfd8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d86dc3036d4ecd0432daad6a66dee219110cba5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d86dc3036d4ecd0432daad6a66dee219110cba5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d86dc3036d4ecd0432daad6a66dee219110cba5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d86dc3036d4ecd0432daad6a66dee219110cba5a/comments", "author": null, "committer": null, "parents": [{"sha": "41041fc2ac278ab937196aac357cfdb934a09473", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41041fc2ac278ab937196aac357cfdb934a09473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41041fc2ac278ab937196aac357cfdb934a09473"}], "stats": {"total": 244, "additions": 161, "deletions": 83}, "files": [{"sha": "dddd9abdd83f836ae5491d3e352246c82ad79309", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d86dc3036d4ecd0432daad6a66dee219110cba5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d86dc3036d4ecd0432daad6a66dee219110cba5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d86dc3036d4ecd0432daad6a66dee219110cba5a", "patch": "@@ -1,3 +1,8 @@\n+2005-03-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (fold_builtin_cbrt, fold_builtin_pow): Rearrange\n+\tcode.  Add more cbrt transformations.\n+\n 2005-03-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* fold-const.c (fold_unary_to_constant): Add FIX_ROUND_EXPR case."}, {"sha": "b113d9f770e6b62f5d3562d4586da180fa891023", "filename": "gcc/builtins.c", "status": "modified", "additions": 121, "deletions": 61, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d86dc3036d4ecd0432daad6a66dee219110cba5a/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d86dc3036d4ecd0432daad6a66dee219110cba5a/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=d86dc3036d4ecd0432daad6a66dee219110cba5a", "patch": "@@ -6311,40 +6311,82 @@ fold_builtin_cbrt (tree arglist, tree type)\n   if (real_zerop (arg) || real_onep (arg) || real_minus_onep (arg))\n     return arg;\n \n-  /* Optimize cbrt(expN(x)) -> expN(x/3).  */\n-  if (flag_unsafe_math_optimizations && BUILTIN_EXPONENT_P (fcode))\n-    {\n-      tree expfn = TREE_OPERAND (TREE_OPERAND (arg, 0), 0);\n-      const REAL_VALUE_TYPE third_trunc =\n-\treal_value_truncate (TYPE_MODE (type), dconstthird);\n-      arg = fold (build2 (MULT_EXPR, type,\n-\t\t\t  TREE_VALUE (TREE_OPERAND (arg, 1)),\n-\t\t\t  build_real (type, third_trunc)));\n-      arglist = build_tree_list (NULL_TREE, arg);\n-      return build_function_call_expr (expfn, arglist);\n-    }\n-\n-  /* Optimize cbrt(sqrt(x)) -> pow(x,1/6).  */\n-  /* We don't optimize cbrt(cbrt(x)) -> pow(x,1/9) because if\n-     x is negative pow will error but cbrt won't.  */\n-  if (flag_unsafe_math_optimizations && BUILTIN_SQRT_P (fcode))\n+  if (flag_unsafe_math_optimizations)\n     {\n-      tree powfn = mathfn_built_in (type, BUILT_IN_POW);\n+      /* Optimize cbrt(expN(x)) -> expN(x/3).  */\n+      if (BUILTIN_EXPONENT_P (fcode))\n+        {\n+\t  tree expfn = TREE_OPERAND (TREE_OPERAND (arg, 0), 0);\n+\t  const REAL_VALUE_TYPE third_trunc =\n+\t    real_value_truncate (TYPE_MODE (type), dconstthird);\n+\t  arg = fold (build2 (MULT_EXPR, type,\n+\t\t\t      TREE_VALUE (TREE_OPERAND (arg, 1)),\n+\t\t\t      build_real (type, third_trunc)));\n+\t  arglist = build_tree_list (NULL_TREE, arg);\n+\t  return build_function_call_expr (expfn, arglist);\n+\t}\n \n-      if (powfn)\n-\t{\n-\t  tree arg0 = TREE_VALUE (TREE_OPERAND (arg, 1));\n-\t  tree tree_root;\n-\t  REAL_VALUE_TYPE dconstroot = dconstthird;\n+      /* Optimize cbrt(sqrt(x)) -> pow(x,1/6).  */\n+      if (BUILTIN_SQRT_P (fcode))\n+        {\n+\t  tree powfn = mathfn_built_in (type, BUILT_IN_POW);\n \n-\t  SET_REAL_EXP (&dconstroot, REAL_EXP (&dconstroot) - 1);\n-\t  dconstroot = real_value_truncate (TYPE_MODE (type), dconstroot);\n-\t  tree_root = build_real (type, dconstroot);\n-\t  arglist = tree_cons (NULL_TREE, arg0,\n-\t\t\t       build_tree_list (NULL_TREE, tree_root));\n-\t  return build_function_call_expr (powfn, arglist);\n+\t  if (powfn)\n+\t    {\n+\t      tree arg0 = TREE_VALUE (TREE_OPERAND (arg, 1));\n+\t      tree tree_root;\n+\t      REAL_VALUE_TYPE dconstroot = dconstthird;\n+\n+\t      SET_REAL_EXP (&dconstroot, REAL_EXP (&dconstroot) - 1);\n+\t      dconstroot = real_value_truncate (TYPE_MODE (type), dconstroot);\n+\t      tree_root = build_real (type, dconstroot);\n+\t      arglist = tree_cons (NULL_TREE, arg0,\n+\t\t\t\t   build_tree_list (NULL_TREE, tree_root));\n+\t      return build_function_call_expr (powfn, arglist);\n+\t    }\n \t}\n \n+      /* Optimize cbrt(cbrt(x)) -> pow(x,1/9) iff x is nonnegative.  */\n+      if (BUILTIN_CBRT_P (fcode))\n+        {\n+\t  tree arg0 = TREE_VALUE (TREE_OPERAND (arg, 1));\n+\t  if (tree_expr_nonnegative_p (arg0))\n+\t    {\n+\t      tree powfn = mathfn_built_in (type, BUILT_IN_POW);\n+\n+\t      if (powfn)\n+\t        {\n+\t\t  tree tree_root;\n+\t\t  REAL_VALUE_TYPE dconstroot;\n+\t      \n+\t\t  real_arithmetic (&dconstroot, MULT_EXPR, &dconstthird, &dconstthird);\n+\t\t  dconstroot = real_value_truncate (TYPE_MODE (type), dconstroot);\n+\t\t  tree_root = build_real (type, dconstroot);\n+\t\t  arglist = tree_cons (NULL_TREE, arg0,\n+\t\t\t\t       build_tree_list (NULL_TREE, tree_root));\n+\t\t  return build_function_call_expr (powfn, arglist);\n+\t\t}\n+\t    }\n+\t}\n+      \n+      /* Optimize cbrt(pow(x,y)) -> pow(x,y/3) iff x is nonnegative.  */\n+      if (fcode == BUILT_IN_POW || fcode == BUILT_IN_POWF\n+\t  || fcode == BUILT_IN_POWL)\n+        {\n+\t  tree arg00 = TREE_VALUE (TREE_OPERAND (arg, 1));\n+\t  tree arg01 = TREE_VALUE (TREE_CHAIN (TREE_OPERAND (arg, 1)));\n+\t  if (tree_expr_nonnegative_p (arg00))\n+\t    {\n+\t      tree powfn = TREE_OPERAND (TREE_OPERAND (arg, 0), 0);\n+\t      const REAL_VALUE_TYPE dconstroot\n+\t\t= real_value_truncate (TYPE_MODE (type), dconstthird);\n+\t      tree narg01 = fold (build2 (MULT_EXPR, type, arg01,\n+\t\t\t\t\t  build_real (type, dconstroot)));\n+\t      arglist = tree_cons (NULL_TREE, arg00,\n+\t\t\t\t   build_tree_list (NULL_TREE, narg01));\n+\t      return build_function_call_expr (powfn, arglist);\n+\t    }\n+\t}\n     }\n   return NULL_TREE;\n }\n@@ -6849,7 +6891,6 @@ fold_builtin_logarithm (tree exp, const REAL_VALUE_TYPE *value)\n static tree\n fold_builtin_pow (tree fndecl, tree arglist, tree type)\n {\n-  enum built_in_function fcode;\n   tree arg0 = TREE_VALUE (arglist);\n   tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n \n@@ -6928,42 +6969,61 @@ fold_builtin_pow (tree fndecl, tree arglist, tree type)\n \t}\n     }\n \n-  /* Optimize pow(expN(x),y) = expN(x*y).  */\n-  fcode = builtin_mathfn_code (arg0);\n-  if (flag_unsafe_math_optimizations && BUILTIN_EXPONENT_P (fcode))\n+  if (flag_unsafe_math_optimizations)\n     {\n-      tree expfn = TREE_OPERAND (TREE_OPERAND (arg0, 0), 0);\n-      tree arg = TREE_VALUE (TREE_OPERAND (arg0, 1));\n-      arg = fold (build2 (MULT_EXPR, type, arg, arg1));\n-      arglist = build_tree_list (NULL_TREE, arg);\n-      return build_function_call_expr (expfn, arglist);\n-    }\n+      const enum built_in_function fcode = builtin_mathfn_code (arg0);\n \n-  /* Optimize pow(sqrt(x),y) = pow(x,y*0.5).  */\n-  if (flag_unsafe_math_optimizations && BUILTIN_SQRT_P (fcode))\n-    {\n-      tree narg0 = TREE_VALUE (TREE_OPERAND (arg0, 1));\n-      tree narg1 = fold (build2 (MULT_EXPR, type, arg1,\n-\t\t\t\t build_real (type, dconsthalf)));\n+      /* Optimize pow(expN(x),y) = expN(x*y).  */\n+      if (BUILTIN_EXPONENT_P (fcode))\n+        {\n+\t  tree expfn = TREE_OPERAND (TREE_OPERAND (arg0, 0), 0);\n+\t  tree arg = TREE_VALUE (TREE_OPERAND (arg0, 1));\n+\t  arg = fold (build2 (MULT_EXPR, type, arg, arg1));\n+\t  arglist = build_tree_list (NULL_TREE, arg);\n+\t  return build_function_call_expr (expfn, arglist);\n+\t}\n \n-      arglist = tree_cons (NULL_TREE, narg0,\n-\t\t\t   build_tree_list (NULL_TREE, narg1));\n-      return build_function_call_expr (fndecl, arglist);\n-    }\n+      /* Optimize pow(sqrt(x),y) = pow(x,y*0.5).  */\n+      if (BUILTIN_SQRT_P (fcode))\n+        {\n+\t  tree narg0 = TREE_VALUE (TREE_OPERAND (arg0, 1));\n+\t  tree narg1 = fold (build2 (MULT_EXPR, type, arg1,\n+\t\t\t\t     build_real (type, dconsthalf)));\n \n-  /* Optimize pow(pow(x,y),z) = pow(x,y*z).  */\n-  if (flag_unsafe_math_optimizations\n-      && (fcode == BUILT_IN_POW\n-\t  || fcode == BUILT_IN_POWF\n-\t  || fcode == BUILT_IN_POWL))\n-    {\n-      tree arg00 = TREE_VALUE (TREE_OPERAND (arg0, 1));\n-      tree arg01 = TREE_VALUE (TREE_CHAIN (TREE_OPERAND (arg0, 1)));\n-      tree narg1 = fold (build2 (MULT_EXPR, type, arg01, arg1));\n-      arglist = tree_cons (NULL_TREE, arg00,\n-\t\t\t   build_tree_list (NULL_TREE, narg1));\n-      return build_function_call_expr (fndecl, arglist);\n+\t  arglist = tree_cons (NULL_TREE, narg0,\n+\t\t\t       build_tree_list (NULL_TREE, narg1));\n+\t  return build_function_call_expr (fndecl, arglist);\n+\t}\n+\n+      /* Optimize pow(cbrt(x),y) = pow(x,y/3) iff x is nonnegative.  */\n+      if (BUILTIN_CBRT_P (fcode))\n+        {\n+\t  tree arg = TREE_VALUE (TREE_OPERAND (arg0, 1));\n+\t  if (tree_expr_nonnegative_p (arg))\n+\t    {\n+\t      const REAL_VALUE_TYPE dconstroot\n+\t\t= real_value_truncate (TYPE_MODE (type), dconstthird);\n+\t      tree narg1 = fold (build2 (MULT_EXPR, type, arg1,\n+\t\t\t\t\t build_real (type, dconstroot)));\n+\t      arglist = tree_cons (NULL_TREE, arg,\n+\t\t\t\t   build_tree_list (NULL_TREE, narg1));\n+\t      return build_function_call_expr (fndecl, arglist);\n+\t    }\n+\t}\n+      \n+      /* Optimize pow(pow(x,y),z) = pow(x,y*z).  */\n+      if (fcode == BUILT_IN_POW || fcode == BUILT_IN_POWF\n+\t   || fcode == BUILT_IN_POWL)\n+        {\n+\t  tree arg00 = TREE_VALUE (TREE_OPERAND (arg0, 1));\n+\t  tree arg01 = TREE_VALUE (TREE_CHAIN (TREE_OPERAND (arg0, 1)));\n+\t  tree narg1 = fold (build2 (MULT_EXPR, type, arg01, arg1));\n+\t  arglist = tree_cons (NULL_TREE, arg00,\n+\t\t\t       build_tree_list (NULL_TREE, narg1));\n+\t  return build_function_call_expr (fndecl, arglist);\n+\t}\n     }\n+\n   return NULL_TREE;\n }\n "}, {"sha": "9d40f9112867f39066ea7a4885f90daa2940fdc0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d86dc3036d4ecd0432daad6a66dee219110cba5a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d86dc3036d4ecd0432daad6a66dee219110cba5a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d86dc3036d4ecd0432daad6a66dee219110cba5a", "patch": "@@ -1,3 +1,9 @@\n+2005-03-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/builtins-10.c: Reactivate disabled test.\n+\t* gcc.dg/torture/builtin-power-1.c: Likewise.  Also add tests for\n+\tnew cbrt transformations.\n+\n 2005-03-09  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/20208"}, {"sha": "d90e61ab32633db67e2ed02c6c7b496ab4fa4006", "filename": "gcc/testsuite/gcc.dg/builtins-10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d86dc3036d4ecd0432daad6a66dee219110cba5a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d86dc3036d4ecd0432daad6a66dee219110cba5a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-10.c?ref=d86dc3036d4ecd0432daad6a66dee219110cba5a", "patch": "@@ -18,8 +18,8 @@ extern double fabs(double);\n \n void test(double x)\n {\n-  /*if (sqrt(pow(x,4.0)) != x*x)\n-    link_error (); */\n+  if (sqrt(pow(x,4.0)) != x*x)\n+    link_error ();\n \n   if (pow(sqrt(x),4.0) != x*x)\n     link_error ();"}, {"sha": "7b890bb0816833ea9c7c9884190752ccfb84a27e", "filename": "gcc/testsuite/gcc.dg/torture/builtin-power-1.c", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d86dc3036d4ecd0432daad6a66dee219110cba5a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-power-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d86dc3036d4ecd0432daad6a66dee219110cba5a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-power-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-power-1.c?ref=d86dc3036d4ecd0432daad6a66dee219110cba5a", "patch": "@@ -22,6 +22,7 @@\n   extern float FN##f(float, float); \\\n   extern long double FN##l(long double, long double);\n \n+PROTOTYPE(fabs)\n PROTOTYPE(sqrt)\n PROTOTYPE(cbrt)\n PROTOTYPE2(pow)\n@@ -32,39 +33,45 @@ void test(double d1, double d2, double d3,\n {\n   /* Test N1root(N2root(x)) -> pow(x,1/(N1*N2)).  */\n   /* E.g. sqrt(cbrt(x)) -> pow(x,1/6).  */\n-#define ROOT_ROOT(FN1,N1,FN2,N2) \\\n+  /* The `ABS' argument is `fabs' when the transformation only works\n+     for nonnegative arguments.  Otherwise it's blank.  */\n+#define ROOT_ROOT(FN1,N1,FN2,N2,ABS) \\\n  extern void link_failure_##FN1##_##FN2(void); \\\n- if (FN1(FN2(d1)) != pow(d1,1.0/(N1*N2)) \\\n-     || C99CODE (FN1##f(FN2##f(f1)) != powf(f1,1.0F/(N1*N2))) \\\n-     || C99CODE (FN1##l(FN2##l(ld1)) != powl(ld1,1.0L/(N1*N2)))) \\\n+ if (FN1(FN2(ABS(d1))) != pow(ABS(d1),1.0/(N1*N2)) \\\n+     || C99CODE (FN1##f(FN2##f(ABS(f1))) != powf(ABS(f1),1.0F/(N1*N2))) \\\n+     || C99CODE (FN1##l(FN2##l(ABS(ld1))) != powl(ABS(ld1),1.0L/(N1*N2)))) \\\n     link_failure_##FN1##_##FN2()\n \n-  ROOT_ROOT(sqrt,2,sqrt,2);\n-  ROOT_ROOT(sqrt,2,cbrt,3);\n-  ROOT_ROOT(cbrt,3,sqrt,2);\n-  /*ROOT_ROOT(cbrt,3,cbrt,3); Intentionally not implemented.  */\n+  ROOT_ROOT(sqrt,2,sqrt,2,);\n+  ROOT_ROOT(sqrt,2,cbrt,3,);\n+  ROOT_ROOT(cbrt,3,sqrt,2,);\n+  ROOT_ROOT(cbrt,3,cbrt,3,fabs);\n \n   /* Test pow(Nroot(x),y) -> pow(x,y/N).  */\n-#define POW_ROOT(FN,N) \\\n+  /* The `ABS' argument is `fabs' when the transformation only works\n+     for nonnegative arguments.  Otherwise it's blank.  */\n+#define POW_ROOT(FN,N,ABS) \\\n  extern void link_failure_pow_##FN(void); \\\n- if (pow(FN(d1), d2) != pow(d1,d2/N) \\\n-     || powf(FN##f(f1),f2) != powf(f1,f2/N) \\\n-     || powl(FN##l(ld1),ld2) != powl(ld1,ld2/N)) \\\n+ if (pow(FN(ABS(d1)), d2) != pow(ABS(d1),d2/N) \\\n+     || powf(FN##f(ABS(f1)),f2) != powf(ABS(f1),f2/N) \\\n+     || powl(FN##l(ABS(ld1)),ld2) != powl(ABS(ld1),ld2/N)) \\\n     link_failure_pow_##FN()\n \n-  POW_ROOT(sqrt,2);\n-  /*POW_ROOT(cbrt,3); Intentionally not implemented.  */\n+  POW_ROOT(sqrt,2,);\n+  POW_ROOT(cbrt,3,fabs);\n \n   /* Test Nroot(pow(x,y)) -> pow(x,y/N).  */\n-#define ROOT_POW(FN,N) \\\n+  /* The `ABS' argument is `fabs' when the transformation only works\n+     for nonnegative arguments.  Otherwise it's blank.  */\n+#define ROOT_POW(FN,N,ABS) \\\n  extern void link_failure_##FN##_pow(void); \\\n- if (FN(pow(d1, d2)) != pow(d1,d2/N) \\\n-     || FN##f(powf(f1,f2)) != powf(f1,f2/N) \\\n-     || FN##l(powl(ld1,ld2)) != powl(ld1,ld2/N)) \\\n+ if (FN(pow(ABS(d1), d2)) != pow(ABS(d1),d2/N) \\\n+     || FN##f(powf(ABS(f1),f2)) != powf(ABS(f1),f2/N) \\\n+     || FN##l(powl(ABS(ld1),ld2)) != powl(ABS(ld1),ld2/N)) \\\n     link_failure_##FN##_pow()\n \n-  /*ROOT_POW(sqrt,2); Invalid. */\n-  /*ROOT_POW(cbrt,3); Intentionally not implemented.  */\n+  ROOT_POW(sqrt,2,fabs);\n+  ROOT_POW(cbrt,3,fabs);\n \n   /* Test pow(pow(x,y),z) -> pow(x,y*z).  */\n #define POW_POW \\"}]}