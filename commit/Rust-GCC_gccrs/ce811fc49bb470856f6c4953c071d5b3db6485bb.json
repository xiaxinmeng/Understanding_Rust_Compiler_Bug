{"sha": "ce811fc49bb470856f6c4953c071d5b3db6485bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U4MTFmYzQ5YmI0NzA4NTZmNmM0OTUzYzA3MWQ1YjNkYjY0ODViYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-03-16T20:12:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-03-16T20:12:27Z"}, "message": "re PR c/84909 (typo: conversion from %qT to to %qT)\n\n\tPR c/84909\n\t* c-warn.c (conversion_warning): Replace \"to to\" with \"to\" in\n\tdiagnostics.\n\n\t* hsa-gen.c (mem_type_for_type): Fix comment typo.\n\t* tree-vect-loop-manip.c (vect_create_cond_for_niters_checks):\n\tLikewise.\n\t* gimple-ssa-warn-restrict.c (builtin_memref::set_base_and_offset):\n\tLikewise.\n\nFrom-SVN: r258609", "tree": {"sha": "3f1832e061de4a3f054707d165dc576e4be68441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f1832e061de4a3f054707d165dc576e4be68441"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce811fc49bb470856f6c4953c071d5b3db6485bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce811fc49bb470856f6c4953c071d5b3db6485bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce811fc49bb470856f6c4953c071d5b3db6485bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce811fc49bb470856f6c4953c071d5b3db6485bb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "63ecb626d69524c70858af5f17f4c03b5c4707c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63ecb626d69524c70858af5f17f4c03b5c4707c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63ecb626d69524c70858af5f17f4c03b5c4707c7"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "7aeedb76dad799631d492131786d0c1c8dbd2964", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce811fc49bb470856f6c4953c071d5b3db6485bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce811fc49bb470856f6c4953c071d5b3db6485bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce811fc49bb470856f6c4953c071d5b3db6485bb", "patch": "@@ -1,3 +1,12 @@\n+2018-03-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/84909\n+\t* hsa-gen.c (mem_type_for_type): Fix comment typo.\n+\t* tree-vect-loop-manip.c (vect_create_cond_for_niters_checks):\n+\tLikewise.\n+\t* gimple-ssa-warn-restrict.c (builtin_memref::set_base_and_offset):\n+\tLikewise.\n+\n 2018-03-16  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/84876"}, {"sha": "6635f37ae4151ba01904130fbd4d46e935246d23", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce811fc49bb470856f6c4953c071d5b3db6485bb/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce811fc49bb470856f6c4953c071d5b3db6485bb/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ce811fc49bb470856f6c4953c071d5b3db6485bb", "patch": "@@ -1,5 +1,9 @@\n 2018-03-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/84909\n+\t* c-warn.c (conversion_warning): Replace \"to to\" with \"to\" in\n+\tdiagnostics.\n+\n \tPR c/84910\n \t* c-warn.c (diagnose_mismatched_attributes): Remove trailing space from\n \tdiagnostics."}, {"sha": "d0d9c7894a80e02adc326d4bd78b37933263e44b", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce811fc49bb470856f6c4953c071d5b3db6485bb/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce811fc49bb470856f6c4953c071d5b3db6485bb/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=ce811fc49bb470856f6c4953c071d5b3db6485bb", "patch": "@@ -1138,8 +1138,7 @@ conversion_warning (location_t loc, tree type, tree expr, tree result)\n       conversion_kind = unsafe_conversion_p (loc, type, expr, result, true);\n       if (conversion_kind == UNSAFE_IMAGINARY)\n \twarning_at (loc, OPT_Wconversion,\n-\t\t    \"conversion from %qT to to %qT discards imaginary \"\n-\t\t    \"component\",\n+\t\t    \"conversion from %qT to %qT discards imaginary component\",\n \t\t    expr_type, type);\n       else\n \t{"}, {"sha": "e7a85fdcd13b246f3e9fc035c169fe02bde91c1c", "filename": "gcc/gimple-ssa-warn-restrict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce811fc49bb470856f6c4953c071d5b3db6485bb/gcc%2Fgimple-ssa-warn-restrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce811fc49bb470856f6c4953c071d5b3db6485bb/gcc%2Fgimple-ssa-warn-restrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.c?ref=ce811fc49bb470856f6c4953c071d5b3db6485bb", "patch": "@@ -417,7 +417,7 @@ builtin_memref::set_base_and_offset (tree expr)\n \n   poly_int64 bytepos = exact_div (bitpos, BITS_PER_UNIT);\n \n-  /* Convert the poly_int64 offset to to offset_int.  The offset\n+  /* Convert the poly_int64 offset to offset_int.  The offset\n      should be constant but be prepared for it not to be just in\n      case.  */\n   offset_int cstoff;"}, {"sha": "7974fffe360f77eb4e35a8c4a588e4b2865d5de3", "filename": "gcc/hsa-gen.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce811fc49bb470856f6c4953c071d5b3db6485bb/gcc%2Fhsa-gen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce811fc49bb470856f6c4953c071d5b3db6485bb/gcc%2Fhsa-gen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-gen.c?ref=ce811fc49bb470856f6c4953c071d5b3db6485bb", "patch": "@@ -691,7 +691,7 @@ mem_type_for_type (BrigType16_t type)\n   /* HSA has non-intuitive constraints on load/store types.  If it's\n      a bit-type it _must_ be B128, if it's not a bit-type it must be\n      64bit max.  So for loading entities of 128 bits (e.g. vectors)\n-     we have to to B128, while for loading the rest we have to use the\n+     we have to use B128, while for loading the rest we have to use the\n      input type (??? or maybe also flattened to a equally sized non-vector\n      unsigned type?).  */\n   if ((type & BRIG_TYPE_PACK_MASK) == BRIG_TYPE_PACK_128)"}, {"sha": "e82c1fe027ee74310888d4f3b22e4429afd24869", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce811fc49bb470856f6c4953c071d5b3db6485bb/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce811fc49bb470856f6c4953c071d5b3db6485bb/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=ce811fc49bb470856f6c4953c071d5b3db6485bb", "patch": "@@ -2700,7 +2700,7 @@ vect_do_peeling (loop_vec_info loop_vinfo, tree niters, tree nitersm1,\n /* Function vect_create_cond_for_niters_checks.\n \n    Create a conditional expression that represents the run-time checks for\n-   loop's niter.  The loop is guaranteed to to terminate if the run-time\n+   loop's niter.  The loop is guaranteed to terminate if the run-time\n    checks hold.\n \n    Input:"}]}