{"sha": "497f281c25c4af5fc62c8662c23fc2a615abc4bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk3ZjI4MWMyNWM0YWY1ZmM2MmM4NjYyYzIzZmMyYTYxNWFiYzRiZA==", "commit": {"author": {"name": "Steve Ellcey", "email": "sellcey@marvell.com", "date": "2019-02-14T21:04:12Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2019-02-14T21:04:12Z"}, "message": "aarch64.c (aarch64_attribute_table): Change affects_type_identity to true for aarch64_vector_pcs.\n\n2018-02-14  Steve Ellcey  <sellcey@marvell.com>\n\n\t* config/aarch64/aarch64.c (aarch64_attribute_table): Change\n\taffects_type_identity to true for aarch64_vector_pcs.\n\t(aarch64_comp_type_attributes): New function.\n\t(TARGET_COMP_TYPE_ATTRIBUTES): New macro.\n\nFrom-SVN: r268902", "tree": {"sha": "d4c26625a946756e69ec7e6667d579141374e7f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4c26625a946756e69ec7e6667d579141374e7f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/497f281c25c4af5fc62c8662c23fc2a615abc4bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/497f281c25c4af5fc62c8662c23fc2a615abc4bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/497f281c25c4af5fc62c8662c23fc2a615abc4bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/497f281c25c4af5fc62c8662c23fc2a615abc4bd/comments", "author": null, "committer": null, "parents": [{"sha": "86b69c6b11d70efe97dd6ff1f1047c37256fd202", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86b69c6b11d70efe97dd6ff1f1047c37256fd202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86b69c6b11d70efe97dd6ff1f1047c37256fd202"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "1c4aa5da2726b130bda6604adb894cbe3ea0bccf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497f281c25c4af5fc62c8662c23fc2a615abc4bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497f281c25c4af5fc62c8662c23fc2a615abc4bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=497f281c25c4af5fc62c8662c23fc2a615abc4bd", "patch": "@@ -1,3 +1,10 @@\n+2018-02-14  Steve Ellcey  <sellcey@marvell.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_attribute_table): Change\n+\taffects_type_identity to true for aarch64_vector_pcs.\n+\t(aarch64_comp_type_attributes): New function.\n+\t(TARGET_COMP_TYPE_ATTRIBUTES): New macro.\n+\n 2019-02-14  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR target/88850"}, {"sha": "9f52cc9ff3b04cd94f96d9ae83f11ac914eac1cc", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497f281c25c4af5fc62c8662c23fc2a615abc4bd/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497f281c25c4af5fc62c8662c23fc2a615abc4bd/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=497f281c25c4af5fc62c8662c23fc2a615abc4bd", "patch": "@@ -1180,7 +1180,7 @@ static const struct attribute_spec aarch64_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n        affects_type_identity, handler, exclude } */\n-  { \"aarch64_vector_pcs\", 0, 0, false, true,  true,  false, NULL, NULL },\n+  { \"aarch64_vector_pcs\", 0, 0, false, true,  true,  true,  NULL, NULL },\n   { NULL,                 0, 0, false, false, false, false, NULL, NULL }\n };\n \n@@ -18709,6 +18709,17 @@ aarch64_simd_clone_usable (struct cgraph_node *node)\n     }\n }\n \n+/* Implement TARGET_COMP_TYPE_ATTRIBUTES */\n+\n+static int\n+aarch64_comp_type_attributes (const_tree type1, const_tree type2)\n+{\n+  if (lookup_attribute (\"aarch64_vector_pcs\", TYPE_ATTRIBUTES (type1))\n+      != lookup_attribute (\"aarch64_vector_pcs\", TYPE_ATTRIBUTES (type2)))\n+    return 0;\n+  return 1;\n+}\n+\n /* Implement TARGET_STACK_PROTECT_GUARD. In case of a\n    global variable based guard use the default else\n    return a null tree.  */\n@@ -19228,6 +19239,9 @@ aarch64_libgcc_floating_mode_supported_p\n #undef TARGET_SIMD_CLONE_USABLE\n #define TARGET_SIMD_CLONE_USABLE aarch64_simd_clone_usable\n \n+#undef TARGET_COMP_TYPE_ATTRIBUTES\n+#define TARGET_COMP_TYPE_ATTRIBUTES aarch64_comp_type_attributes\n+\n #if CHECKING_P\n #undef TARGET_RUN_TARGET_SELFTESTS\n #define TARGET_RUN_TARGET_SELFTESTS selftest::aarch64_run_selftests"}]}