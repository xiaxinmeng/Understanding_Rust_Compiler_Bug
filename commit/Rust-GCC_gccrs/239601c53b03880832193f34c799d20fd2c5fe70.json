{"sha": "239601c53b03880832193f34c799d20fd2c5fe70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM5NjAxYzUzYjAzODgwODMyMTkzZjM0Yzc5OWQyMGZkMmM1ZmU3MA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-19T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-19T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "67c7739edc1c94f204f370111e7a669a980d1e7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67c7739edc1c94f204f370111e7a669a980d1e7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/239601c53b03880832193f34c799d20fd2c5fe70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239601c53b03880832193f34c799d20fd2c5fe70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/239601c53b03880832193f34c799d20fd2c5fe70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239601c53b03880832193f34c799d20fd2c5fe70/comments", "author": null, "committer": null, "parents": [{"sha": "4a5ff2b56bfea0b3e154a15e809c5c42dc3b9e9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a5ff2b56bfea0b3e154a15e809c5c42dc3b9e9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a5ff2b56bfea0b3e154a15e809c5c42dc3b9e9f"}], "stats": {"total": 162, "additions": 161, "deletions": 1}, "files": [{"sha": "7b85668a291a1e86f5a54423e99985cff1127377", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239601c53b03880832193f34c799d20fd2c5fe70/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239601c53b03880832193f34c799d20fd2c5fe70/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=239601c53b03880832193f34c799d20fd2c5fe70", "patch": "@@ -1,3 +1,7 @@\n+2020-09-18  Omar Tahir  <omar.tahir@arm.com>\n+\n+\t* MAINTAINERS (Write After Approval): Add myself.\n+\n 2020-08-26  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* MAINTAINERS (Various Maintainers): Add myself as OpenACC maintainer."}, {"sha": "be428b84fd0d410e4af8a8291021a53c186a5b98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239601c53b03880832193f34c799d20fd2c5fe70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239601c53b03880832193f34c799d20fd2c5fe70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=239601c53b03880832193f34c799d20fd2c5fe70", "patch": "@@ -1,3 +1,86 @@\n+2020-09-18  Sudi Das  <sudi.das@arm.com>\n+\t    Omar Tahir  <omar.tahir@arm.com>\n+\n+\t* config/arm/thumb2.md (*thumb2_csneg): New.\n+\t(*thumb2_negscc): Don't match if TARGET_COND_ARITH.\n+\t* config/arm/arm.md (*if_neg_move): Don't match if TARGET_COND_ARITH.\n+\n+2020-09-18  Sudi Das  <sudi.das@arm.com>\n+\t    Omar Tahir  <omar.tahir@arm.com>\n+\n+\t* config/arm/thumb2.md (*thumb2_csinc): New.\n+\t(*thumb2_cond_arith): Generate CINC where possible.\n+\n+2020-09-18  Sudi Das  <sudi.das@arm.com>\n+\t    Omar Tahir  <omar.tahir@arm.com>\n+\n+\t* config/arm/arm.h (TARGET_COND_ARITH): New macro.\n+\t* config/arm/arm.c (arm_have_conditional_execution): Return false if\n+\tTARGET_COND_ARITH before reload.\n+\t* config/arm/predicates.md (arm_comparison_operation): Returns true if\n+\tcomparing CC_REGNUM with constant zero.\n+\t* config/arm/thumb2.md (*thumb2_csinv): New.\n+\t(*thumb2_movcond): Don't match if TARGET_COND_ARITH.\n+\n+2020-09-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/91957\n+\t* ira.c (ira_setup_eliminable_regset): Skip the special elimination\n+\thandling of the hard frame pointer if the hard frame pointer is fixed.\n+\n+2020-09-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97081\n+\t* tree-vect-patterns.c (vect_recog_rotate_pattern): Use the\n+\tprecision of the shifted operand to determine the mask.\n+\n+2020-09-18  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430.c (msp430_print_operand): Update comment.\n+\tCast to long when printing values formatted as long.\n+\tSupport 'd', 'e', 'f' and 'g' modifiers.\n+\tExtract operand value with a single operation for all modifiers.\n+\t* doc/extend.texi (msp430Operandmodifiers): New.\n+\n+2020-09-18  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430.c (increment_stack): Mark insns which increment\n+\tthe stack as frame_related.\n+\t(msp430_expand_prologue): Add comments.\n+\t(msp430_expand_epilogue): Mark insns which decrement\n+\tthe stack as frame_related.\n+\tAdd reg_note to stack pop insns describing position of register\n+\tvariables on the stack.\n+\n+2020-09-18  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-tree.c (execute_omp_gcn): Delete.\n+\t(make_pass_omp_gcn): Delete.\n+\t* config/gcn/t-gcn-hsa (PASSES_EXTRA): Delete.\n+\t* config/gcn/gcn-passes.def: Removed.\n+\n+2020-09-18  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* cfgloop.h (nb_iter_bound): Reword comment describing is_exit.\n+\n+2020-09-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97095\n+\t* tree-vect-loop.c (vectorizable_live_operation): Get\n+\tthe SLP vector type from the correct object.\n+\n+2020-09-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97089\n+\t* tree-ssa-sccvn.c (visit_nary_op): Do not replace unsigned\n+\tdivisions.\n+\n+2020-09-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97098\n+\t* tree-vect-slp.c (vect_bb_slp_mark_live_stmts): Do not\n+\trecurse to children when all stmts were already visited.\n+\n 2020-09-17  Sergei Trofimovich  <siarheit@google.com>\n \n \t* profile.c (sort_hist_values): Clarify hist format:"}, {"sha": "795f43e0fdb75ef6a5831b782efb14a320e13045", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239601c53b03880832193f34c799d20fd2c5fe70/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239601c53b03880832193f34c799d20fd2c5fe70/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=239601c53b03880832193f34c799d20fd2c5fe70", "patch": "@@ -1 +1 @@\n-20200918\n+20200919"}, {"sha": "7ec4c1451f11f8e1b64640b2f372e6443eb0e51f", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239601c53b03880832193f34c799d20fd2c5fe70/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239601c53b03880832193f34c799d20fd2c5fe70/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=239601c53b03880832193f34c799d20fd2c5fe70", "patch": "@@ -1,3 +1,13 @@\n+2020-09-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* checker-path.cc (warning_event::get_desc): Handle global state\n+\tchanges.\n+\n+2020-09-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* sm-malloc.cc (malloc_state_machine::on_stmt): Handle strdup and\n+\tstrndup as being malloc-like allocators.\n+\n 2020-09-16  David Malcolm  <dmalcolm@redhat.com>\n \n \t* engine.cc (strongly_connected_components::strong_connect): Only"}, {"sha": "3f3de0b29ede38f71ab24a4f85749b5703243d4c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239601c53b03880832193f34c799d20fd2c5fe70/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239601c53b03880832193f34c799d20fd2c5fe70/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=239601c53b03880832193f34c799d20fd2c5fe70", "patch": "@@ -1,3 +1,13 @@\n+2020-09-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR bootstrap/97118\n+\t* decl.c (complete_vars): Only call layout_var_decl if completing\n+\tthe type succeeded.\n+\n+2020-09-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (complete_vars): Call layout_var_decl.\n+\n 2020-09-17  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/96409"}, {"sha": "4450f204454896c6c279245363e5760f0d9e267f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239601c53b03880832193f34c799d20fd2c5fe70/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239601c53b03880832193f34c799d20fd2c5fe70/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=239601c53b03880832193f34c799d20fd2c5fe70", "patch": "@@ -1,3 +1,56 @@\n+2020-09-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97105\n+\t* g++.dg/template/pr97105.C: New test.\n+\n+2020-09-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/strdup-1.c: New test.\n+\t* gcc.dg/analyzer/strndup-1.c: New test.\n+\n+2020-09-18  Sudi Das  <sudi.das@arm.com>\n+\t    Omar Tahir  <omar.tahir@arm.com>\n+\n+\t* gcc.target/arm/csneg.c: New test.\n+\n+2020-09-18  Sudi Das  <sudi.das@arm.com>\n+\t    Omar Tahir  <omar.tahir@arm.com>\n+\n+\t* gcc.target/arm/csinc-1.c: New test.\n+\n+2020-09-18  Sudi Das  <sudi.das@arm.com>\n+\t    Omar Tahir  <omar.tahir@arm.com>\n+\n+\t* gcc.target/arm/csinv-1.c: New test.\n+\n+2020-09-18  H.J. Lu  <hjl.tools@gmail.com>\n+\t    Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/91957\n+\t* g++.target/i386/pr97054.C: New test.\n+\t* gcc.target/i386/pr82673.c: Remove redundant extra message.\n+\n+2020-09-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97081\n+\t* gcc.dg/vect/pr97081-2.c: New test.\n+\n+2020-09-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97081\n+\t* gcc.dg/vect/pr97081.c: New testcase.\n+\n+2020-09-18  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* gcc.target/msp430/operand-modifiers.c: Extend test to handle new\n+\tmodifiers.\n+\t* gcc.target/msp430/operand-modifiers-bad.c: New test.\n+\n+2020-09-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97095\n+\t* gfortran.dg/pr97095.f: New testcase.\n+\n 2020-09-17  Tom de Vries  <tdevries@suse.de>\n \n \t* lib/target-supports.exp (check_effective_target_non_strict_prototype):"}]}