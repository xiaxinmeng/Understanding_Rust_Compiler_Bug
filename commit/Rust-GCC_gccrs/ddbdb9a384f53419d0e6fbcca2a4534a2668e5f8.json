{"sha": "ddbdb9a384f53419d0e6fbcca2a4534a2668e5f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRiZGI5YTM4NGY1MzQxOWQwZTZmYmNjYTJhNDUzNGEyNjY4ZTVmOA==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-05-14T16:18:34Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-05-19T13:44:39Z"}, "message": "aarch64: Refactor aarch64_<sur>q<r>shr<u>n_n<mode> RTL pattern\n\nSplit the aarch64_<sur>q<r>shr<u>n_n<mode> pattern into separate\nscalar and vector variants. Further split the vector pattern into\nbig/little endian variants that model the zero-high-half semantics\nof the underlying instruction - allowing for more combinations with\nthe write-to-high-half variant (aarch64_<sur>q<r>shr<u>n2_n<mode>.)\n\ngcc/ChangeLog:\n\n2021-05-14  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Split builtin\n\tgeneration for aarch64_<sur>q<r>shr<u>n_n<mode> pattern into\n\tseparate scalar and vector generators.\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_<sur>q<r>shr<u>n_n<mode>): Define as an expander and\n\tsplit into...\n\t(aarch64_<sur>q<r>shr<u>n_n<mode>_insn_le): This and...\n\t(aarch64_<sur>q<r>shr<u>n_n<mode>_insn_be): This.\n\t* config/aarch64/iterators.md: Define SD_HSDI iterator.", "tree": {"sha": "5d00891d47d407c5c7e88a8ea3e92c49a86e2ad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d00891d47d407c5c7e88a8ea3e92c49a86e2ad1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddbdb9a384f53419d0e6fbcca2a4534a2668e5f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddbdb9a384f53419d0e6fbcca2a4534a2668e5f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddbdb9a384f53419d0e6fbcca2a4534a2668e5f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddbdb9a384f53419d0e6fbcca2a4534a2668e5f8/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "778ac63fe244b63380bd3b2dee4d20ff27332bce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/778ac63fe244b63380bd3b2dee4d20ff27332bce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/778ac63fe244b63380bd3b2dee4d20ff27332bce"}], "stats": {"total": 75, "additions": 68, "deletions": 7}, "files": [{"sha": "18baa6720b09b2ebda8577b809f8a8683f8b44f0", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbdb9a384f53419d0e6fbcca2a4534a2668e5f8/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbdb9a384f53419d0e6fbcca2a4534a2668e5f8/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=ddbdb9a384f53419d0e6fbcca2a4534a2668e5f8", "patch": "@@ -421,12 +421,18 @@\n   BUILTIN_VQW (SHIFTIMM, sshll2_n, 0, NONE)\n   BUILTIN_VQW (SHIFTIMM, ushll2_n, 0, NONE)\n   /* Implemented by aarch64_<sur>q<r>shr<u>n_n<mode>.  */\n-  BUILTIN_VSQN_HSDI (SHIFTIMM, sqshrun_n, 0, NONE)\n-  BUILTIN_VSQN_HSDI (SHIFTIMM, sqrshrun_n, 0, NONE)\n-  BUILTIN_VSQN_HSDI (SHIFTIMM, sqshrn_n, 0, NONE)\n-  BUILTIN_VSQN_HSDI (USHIFTIMM, uqshrn_n, 0, NONE)\n-  BUILTIN_VSQN_HSDI (SHIFTIMM, sqrshrn_n, 0, NONE)\n-  BUILTIN_VSQN_HSDI (USHIFTIMM, uqrshrn_n, 0, NONE)\n+  BUILTIN_VQN (SHIFTIMM, sqshrun_n, 0, NONE)\n+  BUILTIN_VQN (SHIFTIMM, sqrshrun_n, 0, NONE)\n+  BUILTIN_VQN (SHIFTIMM, sqshrn_n, 0, NONE)\n+  BUILTIN_VQN (USHIFTIMM, uqshrn_n, 0, NONE)\n+  BUILTIN_VQN (SHIFTIMM, sqrshrn_n, 0, NONE)\n+  BUILTIN_VQN (USHIFTIMM, uqrshrn_n, 0, NONE)\n+  BUILTIN_SD_HSDI (SHIFTIMM, sqshrun_n, 0, NONE)\n+  BUILTIN_SD_HSDI (SHIFTIMM, sqrshrun_n, 0, NONE)\n+  BUILTIN_SD_HSDI (SHIFTIMM, sqshrn_n, 0, NONE)\n+  BUILTIN_SD_HSDI (USHIFTIMM, uqshrn_n, 0, NONE)\n+  BUILTIN_SD_HSDI (SHIFTIMM, sqrshrn_n, 0, NONE)\n+  BUILTIN_SD_HSDI (USHIFTIMM, uqrshrn_n, 0, NONE)\n   /* Implemented by aarch64_<sur>q<r>shr<u>n2_n<mode>.  */\n   BUILTIN_VQN (SHIFT2IMM_UUSS, sqshrun2_n, 0, NONE)\n   BUILTIN_VQN (SHIFT2IMM_UUSS, sqrshrun2_n, 0, NONE)"}, {"sha": "c67fa3fb6f0ca0a181a09a42677526d12e955c06", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbdb9a384f53419d0e6fbcca2a4534a2668e5f8/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbdb9a384f53419d0e6fbcca2a4534a2668e5f8/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=ddbdb9a384f53419d0e6fbcca2a4534a2668e5f8", "patch": "@@ -6045,7 +6045,7 @@\n \n (define_insn \"aarch64_<sur>q<r>shr<u>n_n<mode>\"\n   [(set (match_operand:<VNARROWQ> 0 \"register_operand\" \"=w\")\n-        (unspec:<VNARROWQ> [(match_operand:VSQN_HSDI 1 \"register_operand\" \"w\")\n+        (unspec:<VNARROWQ> [(match_operand:SD_HSDI 1 \"register_operand\" \"w\")\n \t\t\t    (match_operand:SI 2\n \t\t\t      \"aarch64_simd_shift_imm_offset_<ve_mode>\" \"i\")]\n \t\t\t   VQSHRN_N))]\n@@ -6054,6 +6054,58 @@\n   [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n )\n \n+(define_insn \"aarch64_<sur>q<r>shr<u>n_n<mode>_insn_le\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (unspec:<VNARROWQ>\n+\t\t[(match_operand:VQN 1 \"register_operand\" \"w\")\n+\t\t (match_operand:VQN 2 \"aarch64_simd_shift_imm_vec_<vn_mode>\")]\n+\t\tVQSHRN_N)\n+\t  (match_operand:<VNARROWQ> 3 \"aarch64_simd_or_scalar_imm_zero\")))]\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n+  \"<sur>q<r>shr<u>n\\\\t%<vn2>0<Vmntype>, %<v>1<Vmtype>, %2\"\n+  [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n+)\n+\n+(define_insn \"aarch64_<sur>q<r>shr<u>n_n<mode>_insn_be\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (match_operand:<VNARROWQ> 3 \"aarch64_simd_or_scalar_imm_zero\")\n+\t  (unspec:<VNARROWQ>\n+\t\t[(match_operand:VQN 1 \"register_operand\" \"w\")\n+\t\t (match_operand:VQN 2 \"aarch64_simd_shift_imm_vec_<vn_mode>\")]\n+\t\tVQSHRN_N)))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+  \"<sur>q<r>shr<u>n\\\\t%<vn2>0<Vmntype>, %<v>1<Vmtype>, %2\"\n+  [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n+)\n+\n+(define_expand \"aarch64_<sur>q<r>shr<u>n_n<mode>\"\n+  [(set (match_operand:<VNARROWQ> 0 \"register_operand\" \"=w\")\n+        (unspec:<VNARROWQ> [(match_operand:VQN 1 \"register_operand\")\n+\t\t\t    (match_operand:SI 2\n+\t\t\t      \"aarch64_simd_shift_imm_offset_<ve_mode>\")]\n+\t\t\t   VQSHRN_N))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[2] = aarch64_simd_gen_const_vector_dup (<MODE>mode,\n+\t\t\t\t\t\t INTVAL (operands[2]));\n+    rtx tmp = gen_reg_rtx (<VNARROWQ2>mode);\n+    if (BYTES_BIG_ENDIAN)\n+      emit_insn (gen_aarch64_<sur>q<r>shr<u>n_n<mode>_insn_be (tmp,\n+\t\t    operands[1], operands[2], CONST0_RTX (<VNARROWQ>mode)));\n+    else\n+      emit_insn (gen_aarch64_<sur>q<r>shr<u>n_n<mode>_insn_le (tmp,\n+\t\t    operands[1], operands[2], CONST0_RTX (<VNARROWQ>mode)));\n+\n+    /* The intrinsic expects a narrow result, so emit a subreg that will get\n+       optimized away as appropriate.  */\n+    emit_move_insn (operands[0], lowpart_subreg (<VNARROWQ>mode, tmp,\n+\t\t\t\t\t\t <VNARROWQ2>mode));\n+    DONE;\n+  }\n+)\n+\n (define_insn \"aarch64_<sur>q<r>shr<u>n2_n<mode>_insn_le\"\n   [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n \t(vec_concat:<VNARROWQ2>"}, {"sha": "e9047d00d979411752d9aeddaadb05ec38e3a145", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbdb9a384f53419d0e6fbcca2a4534a2668e5f8/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbdb9a384f53419d0e6fbcca2a4534a2668e5f8/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=ddbdb9a384f53419d0e6fbcca2a4534a2668e5f8", "patch": "@@ -282,6 +282,9 @@\n ;; Scalar 64-bit container: 16, 32-bit integer modes\n (define_mode_iterator SD_HSI [HI SI])\n \n+;; Scalar 64-bit container: 16-bit, 32-bit and 64-bit integer modes.\n+(define_mode_iterator SD_HSDI [HI SI DI])\n+\n ;; Advanced SIMD 64-bit container: 16, 32-bit integer modes.\n (define_mode_iterator VQ_HSI [V8HI V4SI])\n "}]}