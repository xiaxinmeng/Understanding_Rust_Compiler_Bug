{"sha": "1cf0a7f1ccc13a311a036147e0ce890b03cd68ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNmMGE3ZjFjY2MxM2EzMTFhMDM2MTQ3ZTBjZTg5MGIwM2NkNjhmZg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2008-07-11T18:50:02Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2008-07-11T18:50:02Z"}, "message": "avr-protos.h (avr_peep2_scratch_safe): Remove prototype.\n\n\t* config/avr/avr-protos.h (avr_peep2_scratch_safe): Remove prototype.\n\t* config/avr/avr.c (avr_peep2_scratch_safe): Remove.\n\t(avr_hard_regno_scratch_ok): New function.\n\t(TARGET_HARD_REGNO_SCRATCH_OK): Define.\n\t* config/avr/avr.md (all peepholes that request a scratch register):\n\tRemove avr_peep2_scratch_safe use.\n\nFrom-SVN: r137725", "tree": {"sha": "731db2743cb504c83f1200a7a5e2cb49848ded79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/731db2743cb504c83f1200a7a5e2cb49848ded79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cf0a7f1ccc13a311a036147e0ce890b03cd68ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cf0a7f1ccc13a311a036147e0ce890b03cd68ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cf0a7f1ccc13a311a036147e0ce890b03cd68ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cf0a7f1ccc13a311a036147e0ce890b03cd68ff/comments", "author": null, "committer": null, "parents": [{"sha": "eea1139b26437bb71fd5ee838d8d0b5f2473a16a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea1139b26437bb71fd5ee838d8d0b5f2473a16a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eea1139b26437bb71fd5ee838d8d0b5f2473a16a"}], "stats": {"total": 68, "additions": 32, "deletions": 36}, "files": [{"sha": "398a165171c204aacbb3e907f6eff2e869dfd026", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf0a7f1ccc13a311a036147e0ce890b03cd68ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf0a7f1ccc13a311a036147e0ce890b03cd68ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1cf0a7f1ccc13a311a036147e0ce890b03cd68ff", "patch": "@@ -1,3 +1,12 @@\n+2008-07-11  Anatoly Sokolov  <aesok@post.ru>\t\n+\n+\t* config/avr/avr-protos.h (avr_peep2_scratch_safe): Remove prototype.\n+\t* config/avr/avr.c (avr_peep2_scratch_safe): Remove.\n+\t(avr_hard_regno_scratch_ok): New function.\n+\t(TARGET_HARD_REGNO_SCRATCH_OK): Define.\n+\t* config/avr/avr.md (all peepholes that request a scratch register):\n+\tRemove avr_peep2_scratch_safe use.\n+\n 2008-07-11  Tom Tromey  <tromey@redhat.com>\n \t    Ian Lance Taylor  <iant@google.com>\n "}, {"sha": "7665555fd84c14152126303c063b96e6faa7b3e7", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf0a7f1ccc13a311a036147e0ce890b03cd68ff/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf0a7f1ccc13a311a036147e0ce890b03cd68ff/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=1cf0a7f1ccc13a311a036147e0ce890b03cd68ff", "patch": "@@ -122,7 +122,6 @@ extern RTX_CODE avr_normalize_condition (RTX_CODE condition);\n extern int compare_eq_p (rtx insn);\n extern void out_shift_with_cnt (const char *template, rtx insn,\n \t\t\t\trtx operands[], int *len, int t_len);\n-extern int avr_peep2_scratch_safe (rtx reg_rtx);\n #endif /* RTX_CODE */\n \n #ifdef HAVE_MACHINE_MODES"}, {"sha": "84625d81f8af11d998fdaeceaff0a80e66d9e20b", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf0a7f1ccc13a311a036147e0ce890b03cd68ff/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf0a7f1ccc13a311a036147e0ce890b03cd68ff/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=1cf0a7f1ccc13a311a036147e0ce890b03cd68ff", "patch": "@@ -85,6 +85,7 @@ static int avr_address_cost (rtx);\n static bool avr_return_in_memory (const_tree, const_tree);\n static struct machine_function * avr_init_machine_status (void);\n static rtx avr_builtin_setjmp_frame_value (void);\n+static bool avr_hard_regno_scratch_ok (unsigned int);\n \n /* Allocate registers from r25 to r8 for parameters for function calls.  */\n #define FIRST_CUM_REG 26\n@@ -335,6 +336,9 @@ int avr_case_values_threshold = 30000;\n #undef TARGET_BUILTIN_SETJMP_FRAME_VALUE\n #define TARGET_BUILTIN_SETJMP_FRAME_VALUE avr_builtin_setjmp_frame_value\n \n+#undef TARGET_HARD_REGNO_SCRATCH_OK\n+#define TARGET_HARD_REGNO_SCRATCH_OK avr_hard_regno_scratch_ok\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n void\n@@ -5902,27 +5906,20 @@ avr_output_addr_vec_elt (FILE *stream, int value)\n     fprintf (stream, \"\\trjmp .L%d\\n\", value);\n }\n \n-/* Returns 1 if SCRATCH are safe to be allocated as a scratch\n+/* Returns true if SCRATCH are safe to be allocated as a scratch\n    registers (for a define_peephole2) in the current function.  */\n \n-int\n-avr_peep2_scratch_safe (rtx scratch)\n+bool\n+avr_hard_regno_scratch_ok (unsigned int regno)\n {\n-  if ((interrupt_function_p (current_function_decl)\n-       || signal_function_p (current_function_decl))\n-      && leaf_function_p ())\n-    {\n-      int first_reg = true_regnum (scratch);\n-      int last_reg = first_reg + GET_MODE_SIZE (GET_MODE (scratch)) - 1;\n-      int reg;\n+  /* Interrupt functions can only use registers that have already been saved\n+     by the prologue, even if they would normally be call-clobbered.  */\n \n-      for (reg = first_reg; reg <= last_reg; reg++)\n-\t{\n-\t  if (!df_regs_ever_live_p (reg))\n-\t    return 0;\n-\t}\n-    }\n-  return 1;\n+  if ((cfun->machine->is_interrupt || cfun->machine->is_signal)\n+      && !df_regs_ever_live_p (regno))\n+    return false;\n+\n+  return true;\n }\n \n /* Return nonzero if register OLD_REG can be renamed to register NEW_REG.  */"}, {"sha": "a6e4c3e0237ba47ad827f73816704c6343780d37", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf0a7f1ccc13a311a036147e0ce890b03cd68ff/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf0a7f1ccc13a311a036147e0ce890b03cd68ff/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=1cf0a7f1ccc13a311a036147e0ce890b03cd68ff", "patch": "@@ -261,8 +261,7 @@\n     && operands[1] != constm1_rtx)\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n \t      (clobber (match_dup 2))])]\n-  \"if (!avr_peep2_scratch_safe (operands[2]))\n-     FAIL;\")\n+  \"\")\n \n ;;============================================================================\n ;; move word (16 bit)\n@@ -320,8 +319,7 @@\n     && operands[1] != constm1_rtx)\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n \t      (clobber (match_dup 2))])]\n-  \"if (!avr_peep2_scratch_safe (operands[2]))\n-     FAIL;\")\n+  \"\")\n \n ;; '*' because it is not used in rtl generation, only in above peephole\n (define_insn \"*reload_inhi\"\n@@ -397,8 +395,7 @@\n     && operands[1] != constm1_rtx)\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n \t      (clobber (match_dup 2))])]\n-  \"if (!avr_peep2_scratch_safe (operands[2]))\n-     FAIL;\")\n+  \"\")\n \n ;; '*' because it is not used in rtl generation.\n (define_insn \"*reload_insi\"\n@@ -1432,8 +1429,7 @@\n   \"\"\n   [(parallel [(set (match_dup 0) (ashift:HI (match_dup 1) (match_dup 2)))\n \t      (clobber (match_dup 3))])]\n-  \"if (!avr_peep2_scratch_safe (operands[3]))\n-     FAIL;\")\n+  \"\")\n \n (define_insn \"*ashlhi3_const\"\n   [(set (match_operand:HI 0 \"register_operand\"            \"=r,r,r,r,r\")\n@@ -1453,8 +1449,7 @@\n   \"\"\n   [(parallel [(set (match_dup 0) (ashift:SI (match_dup 1) (match_dup 2)))\n \t      (clobber (match_dup 3))])]\n-  \"if (!avr_peep2_scratch_safe (operands[3]))\n-     FAIL;\")\n+  \"\")\n \n (define_insn \"*ashlsi3_const\"\n   [(set (match_operand:SI 0 \"register_operand\"            \"=r,r,r,r\")\n@@ -1506,8 +1501,7 @@\n   \"\"\n   [(parallel [(set (match_dup 0) (ashiftrt:HI (match_dup 1) (match_dup 2)))\n \t      (clobber (match_dup 3))])]\n-  \"if (!avr_peep2_scratch_safe (operands[3]))\n-     FAIL;\")\n+  \"\")\n \n (define_insn \"*ashrhi3_const\"\n   [(set (match_operand:HI 0 \"register_operand\"              \"=r,r,r,r,r\")\n@@ -1527,8 +1521,7 @@\n   \"\"\n   [(parallel [(set (match_dup 0) (ashiftrt:SI (match_dup 1) (match_dup 2)))\n \t      (clobber (match_dup 3))])]\n-  \"if (!avr_peep2_scratch_safe (operands[3]))\n-     FAIL;\")\n+  \"\")\n \n (define_insn \"*ashrsi3_const\"\n   [(set (match_operand:SI 0 \"register_operand\"              \"=r,r,r,r\")\n@@ -1580,8 +1573,7 @@\n   \"\"\n   [(parallel [(set (match_dup 0) (lshiftrt:HI (match_dup 1) (match_dup 2)))\n \t      (clobber (match_dup 3))])]\n-  \"if (!avr_peep2_scratch_safe (operands[3]))\n-     FAIL;\")\n+  \"\")\n \n (define_insn \"*lshrhi3_const\"\n   [(set (match_operand:HI 0 \"register_operand\"              \"=r,r,r,r,r\")\n@@ -1601,8 +1593,7 @@\n   \"\"\n   [(parallel [(set (match_dup 0) (lshiftrt:SI (match_dup 1) (match_dup 2)))\n \t      (clobber (match_dup 3))])]\n-  \"if (!avr_peep2_scratch_safe (operands[3]))\n-     FAIL;\")\n+  \"\")\n \n (define_insn \"*lshrsi3_const\"\n   [(set (match_operand:SI 0 \"register_operand\"              \"=r,r,r,r\")"}]}