{"sha": "5c30aff8752c02cd4fb2b8a74f2e810c3cc6b224", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMzMGFmZjg3NTJjMDJjZDRmYjJiOGE3NGYyZTgxMGMzY2M2YjIyNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-30T23:18:56Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-30T23:18:56Z"}, "message": "(extendsfdf2): SFmode and DFmode register format identical so use define_expand...\n\n(extendsfdf2): SFmode and DFmode register format identical so use\ndefine_expand with paradoxical subreg no-op and accompanying new\ndefine_split.\n\nFrom-SVN: r8586", "tree": {"sha": "c9cb04056c9117f76267209f5371c816e63806d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9cb04056c9117f76267209f5371c816e63806d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c30aff8752c02cd4fb2b8a74f2e810c3cc6b224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c30aff8752c02cd4fb2b8a74f2e810c3cc6b224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c30aff8752c02cd4fb2b8a74f2e810c3cc6b224", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c30aff8752c02cd4fb2b8a74f2e810c3cc6b224/comments", "author": null, "committer": null, "parents": [{"sha": "8ca00751f76d44f01ece03998635d38d6613ed47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca00751f76d44f01ece03998635d38d6613ed47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ca00751f76d44f01ece03998635d38d6613ed47"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "0db9e1d5a66e9e6fe20ffed7ffd6f22e552fdc66", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c30aff8752c02cd4fb2b8a74f2e810c3cc6b224/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c30aff8752c02cd4fb2b8a74f2e810c3cc6b224/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=5c30aff8752c02cd4fb2b8a74f2e810c3cc6b224", "patch": "@@ -2500,25 +2500,37 @@\n ;; The only conversions we will do will be when storing to memory.  In that\n ;; case, we will use the \"frsp\" instruction before storing.\n ;;\n+;; SFmode values are stored in DFmode registers with the same format as\n+;; DFmode values, so float_extend is a no-op: treat as paradoxical subreg\n+;; using define_expand and define_split if made by combine.\n+;;\n ;; Note that when we store into a single-precision memory location, we need to\n ;; use the frsp insn first.  If the register being stored isn't dead, we\n ;; need a scratch register for the frsp.  But this is difficult when the store\n ;; is done by reload.  It is not incorrect to do the frsp on the register in\n ;; this case, we just lose precision that we would have otherwise gotten but\n ;; is not guaranteed.  Perhaps this should be tightened up at some point.\n \n-(define_insn \"extendsfdf2\"\n+(define_expand \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n-\t(float_extend:DF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n+\t(match_operand:SF 1 \"gpc_reg_operand\" \"f\"))]\n   \"\"\n-  \"*\n+  \"\n {\n-  if (REGNO (operands[0]) == REGNO (operands[1]))\n-    return \\\"\\\";\n-  else\n-    return \\\"fmr %0,%1\\\";\n-}\"\n-  [(set_attr \"type\" \"fp\")])\n+  if (GET_CODE (operands[1]) == SUBREG)\n+     operands[1] = force_reg (SFmode, operands[1]);\n+  operands[1] = gen_rtx (SUBREG, DFmode, operands[1], 0);\n+}\")\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n+\t(float_extend:DF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n+  \"GET_CODE (operands[1]) != SUBREG\"\n+  [(set (match_dup 0) (match_dup 1))]\n+  \"\n+{\n+  operands[1] = gen_rtx (SUBREG, DFmode, operands[1], 0);\n+}\")\n \n (define_insn \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")"}]}