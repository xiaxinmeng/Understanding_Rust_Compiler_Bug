{"sha": "21a0c6e02e954af433961f306e18cbc96f31cab5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFhMGM2ZTAyZTk1NGFmNDMzOTYxZjMwNmUxOGNiYzk2ZjMxY2FiNQ==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2004-11-18T05:37:13Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2004-11-18T05:37:13Z"}, "message": "Makefile.am: Correct friend function declaration.\n\n\t* Makefile.am: Correct friend function declaration.\n\t* Makefile.in: Regenerated.\n\t* include/boehm-gc.h (JV_MARKOBJ_DECL, JV_MARKARRAY_DECL): Add\n\tscope to function names.  Declare functions directly.\n\t* libjava/java/lang/Class.h\n\t(java::lang::Class): Correct friend class declaration.\n\t(_Jv_InitClass, _Jv_GetArrayClass): Move definition to global\n\tscope.\n\t* libjava/java/lang/Class.h\n\t(java::lang::Object): Correct friend class declaration.\n\nFrom-SVN: r90849", "tree": {"sha": "c2de80f38c947fa654ee6ce1d35fb02b560f5c26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2de80f38c947fa654ee6ce1d35fb02b560f5c26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21a0c6e02e954af433961f306e18cbc96f31cab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a0c6e02e954af433961f306e18cbc96f31cab5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21a0c6e02e954af433961f306e18cbc96f31cab5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a0c6e02e954af433961f306e18cbc96f31cab5/comments", "author": null, "committer": null, "parents": [{"sha": "7915fbaa19b94cfe53f288d4d5d4f9350136a13e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7915fbaa19b94cfe53f288d4d5d4f9350136a13e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7915fbaa19b94cfe53f288d4d5d4f9350136a13e"}], "stats": {"total": 472, "additions": 320, "deletions": 152}, "files": [{"sha": "388a5f91fca20b5c711300e1e199e6355ade67ae", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a0c6e02e954af433961f306e18cbc96f31cab5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a0c6e02e954af433961f306e18cbc96f31cab5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=21a0c6e02e954af433961f306e18cbc96f31cab5", "patch": "@@ -1,3 +1,16 @@\n+2004-11-18  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\t* Makefile.am: Correct friend function declaration.\n+\t* Makefile.in: Regenerated.\n+\t* include/boehm-gc.h (JV_MARKOBJ_DECL, JV_MARKARRAY_DECL): Add\n+\tscope to function names.  Declare functions directly.\n+\t* libjava/java/lang/Class.h\n+\t(java::lang::Class): Correct friend class declaration.\n+\t(_Jv_InitClass, _Jv_GetArrayClass): Move definition to global\n+\tscope.\n+\t* libjava/java/lang/Class.h\n+\t(java::lang::Object): Correct friend class declaration.\n+\n 2004-11-17  David Daney  <ddaney@avtrex.com>\n \n \t* java/io/BufferedInputStream.java (skip): Return zero on EOF."}, {"sha": "809dcc4ba0dd31f0c9c07f690dd7592546be7ef0", "filename": "libjava/Makefile.am", "status": "modified", "additions": 42, "deletions": 21, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a0c6e02e954af433961f306e18cbc96f31cab5/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a0c6e02e954af433961f306e18cbc96f31cab5/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=21a0c6e02e954af433961f306e18cbc96f31cab5", "patch": "@@ -640,54 +640,75 @@ $(ordinary_nat_headers) $(xlib_nat_headers): %.h: %.class\n \n java/lang/ClassLoader.h: java/lang/ClassLoader.class\n \t$(GCJH) -classpath '' -bootclasspath $(top_builddir) \\\n-\t\t-friend 'jclass _Jv_FindClass (_Jv_Utf8Const *name, java::lang::ClassLoader *loader);' \\\n-\t\t-friend 'void _Jv_RunMain (jclass klass, const char *name, int argc, const char **argv, bool is_jar);' \\\n+\t\t-prepend 'jclass _Jv_FindClass (_Jv_Utf8Const *name, java::lang::ClassLoader *loader);' \\\n+\t\t-prepend 'void _Jv_RunMain (jclass klass, const char *name, int argc, const char **argv, bool is_jar);' \\\n+\t\t-friend 'jclass (::_Jv_FindClass) (_Jv_Utf8Const *name, java::lang::ClassLoader *loader);' \\\n+\t\t-friend 'void ::_Jv_RunMain (jclass klass, const char *name, int argc, const char **argv, bool is_jar);' \\\n \t\t$(basename $<)\n \n java/lang/Thread.h: java/lang/Thread.class\n \t$(GCJH) -classpath '' -bootclasspath $(top_builddir) \\\n \t\t-prepend 'class _Jv_JNIEnv;' \\\n \t\t-prepend '#define _JV_NOT_OWNER 1' \\\n \t\t-prepend '#define _JV_INTERRUPTED 2' \\\n-\t\t-friend '_Jv_JNIEnv * _Jv_GetCurrentJNIEnv ();' \\\n-\t\t-friend 'void _Jv_SetCurrentJNIEnv (_Jv_JNIEnv *env);' \\\n-\t\t-friend 'void _Jv_ThreadRun (java::lang::Thread* thread);' \\\n-\t\t-friend 'jint _Jv_AttachCurrentThread(java::lang::Thread* thread);' \\\n-\t\t-friend 'java::lang::Thread* _Jv_AttachCurrentThread(jstring name, java::lang::ThreadGroup* group);' \\\n-\t\t-friend 'java::lang::Thread* _Jv_AttachCurrentThreadAsDaemon(jstring name, java::lang::ThreadGroup* group);' \\\n-\t\t-friend 'jint _Jv_DetachCurrentThread ();' \\\n+\t\t-prepend '_Jv_JNIEnv * _Jv_GetCurrentJNIEnv ();' \\\n+\t\t-prepend 'void _Jv_SetCurrentJNIEnv (_Jv_JNIEnv *env);' \\\n+\t\t-prepend 'void _Jv_ThreadRun (java::lang::Thread* thread);' \\\n+\t\t-prepend 'jint _Jv_AttachCurrentThread(java::lang::Thread* thread);' \\\n+\t\t-prepend 'java::lang::Thread* _Jv_AttachCurrentThread (jstring name, java::lang::ThreadGroup* group);' \\\n+\t\t-prepend 'java::lang::Thread* _Jv_AttachCurrentThreadAsDaemon (jstring name, java::lang::ThreadGroup* group);' \\\n+\t\t-prepend 'jint _Jv_DetachCurrentThread ();' \\\n+\t\t-friend '_Jv_JNIEnv * ::_Jv_GetCurrentJNIEnv ();' \\\n+\t\t-friend 'void ::_Jv_SetCurrentJNIEnv (_Jv_JNIEnv *env);' \\\n+\t\t-friend 'void ::_Jv_ThreadRun (java::lang::Thread* thread);' \\\n+\t\t-friend 'jint (::_Jv_AttachCurrentThread) (java::lang::Thread* thread);' \\\n+\t\t-friend 'java::lang::Thread* ::_Jv_AttachCurrentThread (jstring name, java::lang::ThreadGroup* group);' \\\n+\t\t-friend 'java::lang::Thread* ::_Jv_AttachCurrentThreadAsDaemon (jstring name, java::lang::ThreadGroup* group);' \\\n+\t\t-friend 'jint (::_Jv_DetachCurrentThread) ();' \\\n \t\t$(basename $<)\n \n java/lang/String.h: java/lang/String.class\n \t$(GCJH) -classpath '' -bootclasspath $(top_builddir) \\\n-\t    -friend 'jchar* _Jv_GetStringChars (jstring str);' \\\n-\t    -friend 'jstring* _Jv_StringFindSlot (jchar*, jint, jint);' \\\n-\t    -friend 'jstring* _Jv_StringGetSlot (jstring);' \\\n-\t    -friend 'jstring _Jv_NewStringUtf8Const (_Jv_Utf8Const* str);' \\\n-\t    -friend 'jstring _Jv_NewStringLatin1 (const char*, jsize);' \\\n-\t    -friend 'jstring _Jv_AllocString (jsize);' \\\n+\t    -prepend 'jchar* _Jv_GetStringChars (jstring str);' \\\n+\t    -prepend 'jstring* _Jv_StringFindSlot (jchar*, jint, jint);' \\\n+\t    -prepend 'jstring* _Jv_StringGetSlot (jstring);' \\\n+\t    -prepend 'jstring _Jv_NewStringUtf8Const (_Jv_Utf8Const* str);' \\\n+\t    -prepend 'jstring _Jv_NewStringLatin1 (const char*, jsize);' \\\n+\t    -prepend 'jstring _Jv_AllocString (jsize);' \\\n+\t    -friend 'jchar* ::_Jv_GetStringChars (jstring str);' \\\n+\t    -friend 'jstring* ::_Jv_StringFindSlot (jchar*, jint, jint);' \\\n+\t    -friend 'jstring* ::_Jv_StringGetSlot (jstring);' \\\n+\t    -friend 'jstring (::_Jv_NewStringUtf8Const) (_Jv_Utf8Const* str);' \\\n+\t    -friend 'jstring (::_Jv_NewStringLatin1) (const char*, jsize);' \\\n+\t    -friend 'jstring (::_Jv_AllocString) (jsize);' \\\n \t    $(basename $<)\n \n java/lang/reflect/Constructor.h: java/lang/reflect/Constructor.class\n \t$(GCJH) -classpath '' -bootclasspath $(top_builddir) \\\n-\t    -friend 'jmethodID _Jv_FromReflectedConstructor (java::lang::reflect::Constructor *);' \\\n+\t    -prepend 'jmethodID _Jv_FromReflectedConstructor (java::lang::reflect::Constructor *);' \\\n+\t    -prepend 'jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \\\n+\t    -friend 'jmethodID (::_Jv_FromReflectedConstructor) (java::lang::reflect::Constructor *);' \\\n+\t    -friend 'jobject (::_Jv_JNI_ToReflectedMethod) (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \\\n \t    -friend 'class java::lang::Class;' \\\n-\t    -friend 'jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \\\n \t    $(basename $<)\n \n java/lang/reflect/Field.h: java/lang/reflect/Field.class\n \t$(GCJH) -classpath '' -bootclasspath $(top_builddir) \\\n-\t    -friend 'jfieldID _Jv_FromReflectedField (java::lang::reflect::Field *);' \\\n-\t    -friend 'jobject _Jv_JNI_ToReflectedField (_Jv_JNIEnv*, jclass, jfieldID, jboolean);' \\\n+\t    -prepend 'jfieldID _Jv_FromReflectedField (java::lang::reflect::Field *);' \\\n+\t    -prepend 'jobject _Jv_JNI_ToReflectedField (_Jv_JNIEnv*, jclass, jfieldID, jboolean);' \\\n+\t    -friend 'jfieldID (::_Jv_FromReflectedField) (java::lang::reflect::Field *);' \\\n+\t    -friend 'jobject (::_Jv_JNI_ToReflectedField) (_Jv_JNIEnv*, jclass, jfieldID, jboolean);' \\\n \t    -friend 'class java::lang::Class;' \\\n \t    $(basename $<)\n \n java/lang/reflect/Method.h: java/lang/reflect/Method.class\n \t$(GCJH) -classpath '' -bootclasspath $(top_builddir) \\\n-\t    -friend 'jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);' \\\n+\t    -prepend 'jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);' \\\n+\t    -prepend 'jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \\\n+\t    -friend 'jmethodID (::_Jv_FromReflectedMethod) (java::lang::reflect::Method *);' \\\n+\t    -friend 'jobject (::_Jv_JNI_ToReflectedMethod) (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \\\n \t    -friend 'class java::lang::Class;' \\\n \t    -friend 'class java::io::ObjectInputStream;' \\\n-\t    -friend 'jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \\\n \t    $(basename $<)\n \n java/lang/reflect/Proxy.h: java/lang/reflect/Proxy.class"}, {"sha": "8dc6aaa359179c25105c64e1ac332f256ed57d69", "filename": "libjava/Makefile.in", "status": "modified", "additions": 42, "deletions": 21, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a0c6e02e954af433961f306e18cbc96f31cab5/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a0c6e02e954af433961f306e18cbc96f31cab5/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=21a0c6e02e954af433961f306e18cbc96f31cab5", "patch": "@@ -23803,54 +23803,75 @@ $(ordinary_nat_headers) $(xlib_nat_headers): %.h: %.class\n \n java/lang/ClassLoader.h: java/lang/ClassLoader.class\n \t$(GCJH) -classpath '' -bootclasspath $(top_builddir) \\\n-\t\t-friend 'jclass _Jv_FindClass (_Jv_Utf8Const *name, java::lang::ClassLoader *loader);' \\\n-\t\t-friend 'void _Jv_RunMain (jclass klass, const char *name, int argc, const char **argv, bool is_jar);' \\\n+\t\t-prepend 'jclass _Jv_FindClass (_Jv_Utf8Const *name, java::lang::ClassLoader *loader);' \\\n+\t\t-prepend 'void _Jv_RunMain (jclass klass, const char *name, int argc, const char **argv, bool is_jar);' \\\n+\t\t-friend 'jclass (::_Jv_FindClass) (_Jv_Utf8Const *name, java::lang::ClassLoader *loader);' \\\n+\t\t-friend 'void ::_Jv_RunMain (jclass klass, const char *name, int argc, const char **argv, bool is_jar);' \\\n \t\t$(basename $<)\n \n java/lang/Thread.h: java/lang/Thread.class\n \t$(GCJH) -classpath '' -bootclasspath $(top_builddir) \\\n \t\t-prepend 'class _Jv_JNIEnv;' \\\n \t\t-prepend '#define _JV_NOT_OWNER 1' \\\n \t\t-prepend '#define _JV_INTERRUPTED 2' \\\n-\t\t-friend '_Jv_JNIEnv * _Jv_GetCurrentJNIEnv ();' \\\n-\t\t-friend 'void _Jv_SetCurrentJNIEnv (_Jv_JNIEnv *env);' \\\n-\t\t-friend 'void _Jv_ThreadRun (java::lang::Thread* thread);' \\\n-\t\t-friend 'jint _Jv_AttachCurrentThread(java::lang::Thread* thread);' \\\n-\t\t-friend 'java::lang::Thread* _Jv_AttachCurrentThread(jstring name, java::lang::ThreadGroup* group);' \\\n-\t\t-friend 'java::lang::Thread* _Jv_AttachCurrentThreadAsDaemon(jstring name, java::lang::ThreadGroup* group);' \\\n-\t\t-friend 'jint _Jv_DetachCurrentThread ();' \\\n+\t\t-prepend '_Jv_JNIEnv * _Jv_GetCurrentJNIEnv ();' \\\n+\t\t-prepend 'void _Jv_SetCurrentJNIEnv (_Jv_JNIEnv *env);' \\\n+\t\t-prepend 'void _Jv_ThreadRun (java::lang::Thread* thread);' \\\n+\t\t-prepend 'jint _Jv_AttachCurrentThread(java::lang::Thread* thread);' \\\n+\t\t-prepend 'java::lang::Thread* _Jv_AttachCurrentThread (jstring name, java::lang::ThreadGroup* group);' \\\n+\t\t-prepend 'java::lang::Thread* _Jv_AttachCurrentThreadAsDaemon (jstring name, java::lang::ThreadGroup* group);' \\\n+\t\t-prepend 'jint _Jv_DetachCurrentThread ();' \\\n+\t\t-friend '_Jv_JNIEnv * ::_Jv_GetCurrentJNIEnv ();' \\\n+\t\t-friend 'void ::_Jv_SetCurrentJNIEnv (_Jv_JNIEnv *env);' \\\n+\t\t-friend 'void ::_Jv_ThreadRun (java::lang::Thread* thread);' \\\n+\t\t-friend 'jint (::_Jv_AttachCurrentThread) (java::lang::Thread* thread);' \\\n+\t\t-friend 'java::lang::Thread* ::_Jv_AttachCurrentThread (jstring name, java::lang::ThreadGroup* group);' \\\n+\t\t-friend 'java::lang::Thread* ::_Jv_AttachCurrentThreadAsDaemon (jstring name, java::lang::ThreadGroup* group);' \\\n+\t\t-friend 'jint (::_Jv_DetachCurrentThread) ();' \\\n \t\t$(basename $<)\n \n java/lang/String.h: java/lang/String.class\n \t$(GCJH) -classpath '' -bootclasspath $(top_builddir) \\\n-\t    -friend 'jchar* _Jv_GetStringChars (jstring str);' \\\n-\t    -friend 'jstring* _Jv_StringFindSlot (jchar*, jint, jint);' \\\n-\t    -friend 'jstring* _Jv_StringGetSlot (jstring);' \\\n-\t    -friend 'jstring _Jv_NewStringUtf8Const (_Jv_Utf8Const* str);' \\\n-\t    -friend 'jstring _Jv_NewStringLatin1 (const char*, jsize);' \\\n-\t    -friend 'jstring _Jv_AllocString (jsize);' \\\n+\t    -prepend 'jchar* _Jv_GetStringChars (jstring str);' \\\n+\t    -prepend 'jstring* _Jv_StringFindSlot (jchar*, jint, jint);' \\\n+\t    -prepend 'jstring* _Jv_StringGetSlot (jstring);' \\\n+\t    -prepend 'jstring _Jv_NewStringUtf8Const (_Jv_Utf8Const* str);' \\\n+\t    -prepend 'jstring _Jv_NewStringLatin1 (const char*, jsize);' \\\n+\t    -prepend 'jstring _Jv_AllocString (jsize);' \\\n+\t    -friend 'jchar* ::_Jv_GetStringChars (jstring str);' \\\n+\t    -friend 'jstring* ::_Jv_StringFindSlot (jchar*, jint, jint);' \\\n+\t    -friend 'jstring* ::_Jv_StringGetSlot (jstring);' \\\n+\t    -friend 'jstring (::_Jv_NewStringUtf8Const) (_Jv_Utf8Const* str);' \\\n+\t    -friend 'jstring (::_Jv_NewStringLatin1) (const char*, jsize);' \\\n+\t    -friend 'jstring (::_Jv_AllocString) (jsize);' \\\n \t    $(basename $<)\n \n java/lang/reflect/Constructor.h: java/lang/reflect/Constructor.class\n \t$(GCJH) -classpath '' -bootclasspath $(top_builddir) \\\n-\t    -friend 'jmethodID _Jv_FromReflectedConstructor (java::lang::reflect::Constructor *);' \\\n+\t    -prepend 'jmethodID _Jv_FromReflectedConstructor (java::lang::reflect::Constructor *);' \\\n+\t    -prepend 'jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \\\n+\t    -friend 'jmethodID (::_Jv_FromReflectedConstructor) (java::lang::reflect::Constructor *);' \\\n+\t    -friend 'jobject (::_Jv_JNI_ToReflectedMethod) (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \\\n \t    -friend 'class java::lang::Class;' \\\n-\t    -friend 'jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \\\n \t    $(basename $<)\n \n java/lang/reflect/Field.h: java/lang/reflect/Field.class\n \t$(GCJH) -classpath '' -bootclasspath $(top_builddir) \\\n-\t    -friend 'jfieldID _Jv_FromReflectedField (java::lang::reflect::Field *);' \\\n-\t    -friend 'jobject _Jv_JNI_ToReflectedField (_Jv_JNIEnv*, jclass, jfieldID, jboolean);' \\\n+\t    -prepend 'jfieldID _Jv_FromReflectedField (java::lang::reflect::Field *);' \\\n+\t    -prepend 'jobject _Jv_JNI_ToReflectedField (_Jv_JNIEnv*, jclass, jfieldID, jboolean);' \\\n+\t    -friend 'jfieldID (::_Jv_FromReflectedField) (java::lang::reflect::Field *);' \\\n+\t    -friend 'jobject (::_Jv_JNI_ToReflectedField) (_Jv_JNIEnv*, jclass, jfieldID, jboolean);' \\\n \t    -friend 'class java::lang::Class;' \\\n \t    $(basename $<)\n \n java/lang/reflect/Method.h: java/lang/reflect/Method.class\n \t$(GCJH) -classpath '' -bootclasspath $(top_builddir) \\\n-\t    -friend 'jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);' \\\n+\t    -prepend 'jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);' \\\n+\t    -prepend 'jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \\\n+\t    -friend 'jmethodID (::_Jv_FromReflectedMethod) (java::lang::reflect::Method *);' \\\n+\t    -friend 'jobject (::_Jv_JNI_ToReflectedMethod) (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \\\n \t    -friend 'class java::lang::Class;' \\\n \t    -friend 'class java::io::ObjectInputStream;' \\\n-\t    -friend 'jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \\\n \t    $(basename $<)\n \n java/lang/reflect/Proxy.h: java/lang/reflect/Proxy.class"}, {"sha": "61e007ff501a41a34f0939248a55d4da52f82014", "filename": "libjava/include/boehm-gc.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a0c6e02e954af433961f306e18cbc96f31cab5/libjava%2Finclude%2Fboehm-gc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a0c6e02e954af433961f306e18cbc96f31cab5/libjava%2Finclude%2Fboehm-gc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fboehm-gc.h?ref=21a0c6e02e954af433961f306e18cbc96f31cab5", "patch": "@@ -1,7 +1,7 @@\n // -*- c++ -*-\n // boehm-gc.h - Defines for Boehm collector.\n \n-/* Copyright (C) 1998, 1999, 2002  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2002, 2004  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -12,13 +12,13 @@ details.  */\n #ifndef __JV_BOEHM_GC__\n #define __JV_BOEHM_GC__\n \n-#define JV_MARKOBJ_DECL void *_Jv_MarkObj (void *, void *, void *, void *)\n-#define JV_MARKARRAY_DECL void *_Jv_MarkArray (void *, void *, void *, void *)\n+#define JV_MARKOBJ_DECL void *::_Jv_MarkObj (void *, void *, void *, void *)\n+#define JV_MARKARRAY_DECL void *::_Jv_MarkArray (void *, void *, void *, void *)\n \n extern \"C\"\n {\n-  JV_MARKOBJ_DECL;\n-  JV_MARKARRAY_DECL;\n+  void *_Jv_MarkObj (void *, void *, void *, void *);\n+  void *_Jv_MarkArray (void *, void *, void *, void *);\n }\n \n // Enough stuff to inline _Jv_AllocObj.  Ugly."}, {"sha": "a60e80a22d9c994cfa8803a1ed8f90f1b0f7e677", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 205, "deletions": 99, "changes": 304, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a0c6e02e954af433961f306e18cbc96f31cab5/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a0c6e02e954af433961f306e18cbc96f31cab5/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=21a0c6e02e954af433961f306e18cbc96f31cab5", "patch": "@@ -1,6 +1,6 @@\n // Class.h - Header file for java.lang.Class.  -*- c++ -*-\n \n-/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -144,11 +144,111 @@ struct _Jv_CatchClass\n #define JV_CLASS(Obj) ((jclass) (*(_Jv_VTable **) Obj)->clas)\n \n // Forward declarations for friends of java::lang::Class\n+\n+// Friend functions implemented in natClass.cc.\n+_Jv_Method *_Jv_GetMethodLocal (jclass klass, _Jv_Utf8Const *name,\n+\t\t\t\t_Jv_Utf8Const *signature);\n+jboolean _Jv_IsAssignableFrom (jclass, jclass);\n+jboolean _Jv_InterfaceAssignableFrom (jclass, jclass);\n+void _Jv_InitClass (jclass klass);\n+\n+_Jv_Method* _Jv_LookupDeclaredMethod (jclass, _Jv_Utf8Const *, \n+\t\t\t\t      _Jv_Utf8Const*);\n+jfieldID JvGetFirstInstanceField (jclass);\n+jint JvNumInstanceFields (jclass);\n+jfieldID JvGetFirstStaticField (jclass);\n+jint JvNumStaticFields (jclass);\n+\n+jobject _Jv_AllocObject (jclass);\n+void *_Jv_AllocObj (jint, jclass);\n+void *_Jv_AllocPtrFreeObj (jint, jclass);\n+void *_Jv_AllocArray (jint, jclass);\n+\n+jobject _Jv_JNI_ToReflectedField (_Jv_JNIEnv *, jclass, jfieldID,\n+\t\t\t\t  jboolean);\n+jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID,\n+\t\t\t\t   jboolean);\n+jfieldID _Jv_FromReflectedField (java::lang::reflect::Field *);\n+\n+jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);\n+jmethodID _Jv_FromReflectedConstructor (java::lang::reflect::Constructor *);\n+jint JvNumMethods (jclass);\n+jmethodID JvGetFirstMethod (jclass);\n+\n+// Friend classes and functions to implement the ClassLoader\n+class java::lang::ClassLoader;\n+class java::lang::VMClassLoader;\n+\n+class java::io::ObjectOutputStream;\n+class java::io::ObjectInputStream;\n+class java::io::ObjectStreamClass;\n+\n+void _Jv_WaitForState (jclass, int);\n+void _Jv_RegisterClasses (const jclass *classes);\n+void _Jv_RegisterClasses_Counted (const jclass *classes, \n+\t\t\t\t  size_t count);\n+void _Jv_RegisterClassHookDefault (jclass klass);\n+void _Jv_RegisterInitiatingLoader (jclass,java::lang::ClassLoader*);\n+void _Jv_UnregisterClass (jclass);\n+jclass _Jv_FindClass (_Jv_Utf8Const *name,\n+\t\t      java::lang::ClassLoader *loader);\n+jclass _Jv_FindClassInCache (_Jv_Utf8Const *name,\n+\t\t\t     java::lang::ClassLoader *loader);\n+jclass _Jv_PopClass (void);\n+void _Jv_PushClass (jclass k);\n+void _Jv_NewArrayClass (jclass element,\n+\t\t\tjava::lang::ClassLoader *loader,\n+\t\t\t_Jv_VTable *array_vtable = 0);\n+jclass _Jv_NewClass (_Jv_Utf8Const *name, jclass superclass,\n+\t\t     java::lang::ClassLoader *loader);\n+void _Jv_InitNewClassFields (jclass klass);\n+\n+// Friend functions and classes in prims.cc\n+void _Jv_InitPrimClass (jclass, char *, char, int);\n+void _Jv_PrepareCompiledClass (jclass);\n+void _Jv_PrepareConstantTimeTables (jclass);\n+jshort _Jv_GetInterfaces (jclass, _Jv_ifaces *);\n+void _Jv_GenerateITable (jclass, _Jv_ifaces *, jshort *);\n+jstring _Jv_GetMethodString (jclass, _Jv_Utf8Const *);\n+jshort _Jv_AppendPartialITable (jclass, jclass, void **, jshort);\n+jshort _Jv_FindIIndex (jclass *, jshort *, jshort);\n+void _Jv_LinkSymbolTable (jclass);\n+void _Jv_LayoutInterfaceMethods (jclass);\n+void _Jv_LayoutVTableMethods (jclass klass);\n+void _Jv_SetVTableEntries (jclass, _Jv_VTable *, jboolean *);\n+void _Jv_MakeVTable (jclass);\n+void _Jv_linkExceptionClassTable (jclass);\n+\n+jboolean _Jv_CheckAccess (jclass self_klass, jclass other_klass,\n+\t\t\t  jint flags);\n+jclass _Jv_GetArrayClass (jclass klass, java::lang::ClassLoader *loader);\n+\n+#ifdef INTERPRETER\n+jboolean _Jv_IsInterpretedClass (jclass);\n+void _Jv_InitField (jobject, jclass, _Jv_Field*);\n+void _Jv_InitField (jobject, jclass, int);\n+_Jv_word _Jv_ResolvePoolEntry (jclass, int);\n+_Jv_Method *_Jv_SearchMethodInClass (jclass cls, jclass klass, \n+\t\t\t\t     _Jv_Utf8Const *method_name, \n+\t\t\t\t     _Jv_Utf8Const *method_signature);\n+\n+void _Jv_PrepareClass (jclass);\n+void _Jv_PrepareMissingMethods (jclass base, jclass iface_class);\n+\n+void _Jv_Defer_Resolution (void *cl, _Jv_Method *meth, void **);\n+  \n class _Jv_ClassReader;\t\n class _Jv_InterpClass;\n class _Jv_InterpMethod;\n+#endif\n+\n class _Jv_BytecodeVerifier;\n class _Jv_StackTrace;\n+class gnu::gcj::runtime::StackTrace;\n+class java::io::VMObjectStreamClass;\n+\n+void _Jv_sharedlib_register_hook (jclass klass);\n+\n \n class java::lang::Class : public java::lang::Object\n {\n@@ -273,43 +373,37 @@ class java::lang::Class : public java::lang::Object\n   static jstring getPackagePortion (jstring);\n \n   // Friend functions implemented in natClass.cc.\n-  friend _Jv_Method *_Jv_GetMethodLocal (jclass klass, _Jv_Utf8Const *name,\n-\t\t\t\t\t _Jv_Utf8Const *signature);\n-  friend jboolean _Jv_IsAssignableFrom(jclass, jclass);\n-  friend jboolean _Jv_InterfaceAssignableFrom (jclass, jclass);\n-  friend void *_Jv_LookupInterfaceMethodIdx (jclass klass, jclass iface, \n-\t\t\t\t\t     int method_idx);\n-\n-  inline friend void \n-  _Jv_InitClass (jclass klass)\n-  {\n-    if (__builtin_expect (klass->state == JV_STATE_DONE, true))\n-      return;\n-    klass->initializeClass ();  \n-  }\n-\n-  friend _Jv_Method* _Jv_LookupDeclaredMethod (jclass, _Jv_Utf8Const *, \n-\t\t\t\t\t       _Jv_Utf8Const*);\n-  friend jfieldID JvGetFirstInstanceField (jclass);\n-  friend jint JvNumInstanceFields (jclass);\n-  friend jfieldID JvGetFirstStaticField (jclass);\n-  friend jint JvNumStaticFields (jclass);\n-\n-  friend jobject _Jv_AllocObject (jclass);\n-  friend void *_Jv_AllocObj (jint, jclass);\n-  friend void *_Jv_AllocPtrFreeObj (jint, jclass);\n-  friend void *_Jv_AllocArray (jint, jclass);\n-\n-  friend jobject _Jv_JNI_ToReflectedField (_Jv_JNIEnv *, jclass, jfieldID,\n-\t\t\t\t\t   jboolean);\n-  friend jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    jboolean);\n-  friend jfieldID _Jv_FromReflectedField (java::lang::reflect::Field *);\n-\n-  friend jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);\n-  friend jmethodID _Jv_FromReflectedConstructor (java::lang::reflect::Constructor *);\n-  friend jint JvNumMethods (jclass);\n-  friend jmethodID JvGetFirstMethod (jclass);\n+  friend _Jv_Method *::_Jv_GetMethodLocal (jclass klass, _Jv_Utf8Const *name,\n+\t\t\t\t\t   _Jv_Utf8Const *signature);\n+  friend jboolean (::_Jv_IsAssignableFrom) (jclass, jclass);\n+  friend jboolean (::_Jv_InterfaceAssignableFrom) (jclass, jclass);\n+  friend void *::_Jv_LookupInterfaceMethodIdx (jclass klass, jclass iface, \n+\t\t\t\t\t       int method_idx);\n+\n+  friend void ::_Jv_InitClass (jclass klass);\n+\n+  friend _Jv_Method* ::_Jv_LookupDeclaredMethod (jclass, _Jv_Utf8Const *, \n+\t\t\t\t\t\t _Jv_Utf8Const*);\n+  friend jfieldID (::JvGetFirstInstanceField) (jclass);\n+  friend jint (::JvNumInstanceFields) (jclass);\n+  friend jfieldID (::JvGetFirstStaticField) (jclass);\n+  friend jint (::JvNumStaticFields) (jclass);\n+\n+  friend jobject (::_Jv_AllocObject) (jclass);\n+  friend void *::_Jv_AllocObj (jint, jclass);\n+  friend void *::_Jv_AllocPtrFreeObj (jint, jclass);\n+  friend void *::_Jv_AllocArray (jint, jclass);\n+\n+  friend jobject (::_Jv_JNI_ToReflectedField) (_Jv_JNIEnv *, jclass, jfieldID,\n+\t\t\t\t\t       jboolean);\n+  friend jobject (::_Jv_JNI_ToReflectedMethod) (_Jv_JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t\tjboolean);\n+  friend jfieldID (::_Jv_FromReflectedField) (java::lang::reflect::Field *);\n+\n+  friend jmethodID (::_Jv_FromReflectedMethod) (java::lang::reflect::Method *);\n+  friend jmethodID (::_Jv_FromReflectedConstructor) (java::lang::reflect::Constructor *);\n+  friend jint (::JvNumMethods) (jclass);\n+  friend jmethodID (::JvGetFirstMethod) (jclass);\n \n   // Friends classes and functions to implement the ClassLoader\n   friend class java::lang::ClassLoader;\n@@ -319,72 +413,62 @@ class java::lang::Class : public java::lang::Object\n   friend class java::io::ObjectInputStream;\n   friend class java::io::ObjectStreamClass;\n \n-  friend void _Jv_WaitForState (jclass, int);\n-  friend void _Jv_RegisterClasses (const jclass *classes);\n-  friend void _Jv_RegisterClasses_Counted (const jclass *classes, \n-\t\t\t\t\t   size_t count);\n-  friend void _Jv_RegisterClassHookDefault (jclass klass);\n-  friend void _Jv_RegisterInitiatingLoader (jclass,java::lang::ClassLoader*);\n-  friend void _Jv_UnregisterClass (jclass);\n-  friend jclass _Jv_FindClass (_Jv_Utf8Const *name,\n-\t\t\t       java::lang::ClassLoader *loader);\n-  friend jclass _Jv_FindClassInCache (_Jv_Utf8Const *name,\n-\t\t\t\t      java::lang::ClassLoader *loader);\n-  friend jclass _Jv_PopClass (void);\n-  friend void _Jv_PushClass (jclass k);\n-  friend void _Jv_NewArrayClass (jclass element,\n-\t\t\t\t java::lang::ClassLoader *loader,\n-\t\t\t\t _Jv_VTable *array_vtable = 0);\n-  friend jclass _Jv_NewClass (_Jv_Utf8Const *name, jclass superclass,\n-\t\t\t      java::lang::ClassLoader *loader);\n-  friend void _Jv_InitNewClassFields (jclass klass);\n+  friend void ::_Jv_WaitForState (jclass, int);\n+  friend void ::_Jv_RegisterClasses (const jclass *classes);\n+  friend void ::_Jv_RegisterClasses_Counted (const jclass *classes, \n+\t\t\t\t\t     size_t count);\n+  friend void ::_Jv_RegisterClassHookDefault (jclass klass);\n+  friend void ::_Jv_RegisterInitiatingLoader (jclass,java::lang::ClassLoader*);\n+  friend void ::_Jv_UnregisterClass (jclass);\n+  friend jclass (::_Jv_FindClass) (_Jv_Utf8Const *name,\n+\t\t\t\t   java::lang::ClassLoader *loader);\n+  friend jclass (::_Jv_FindClassInCache) (_Jv_Utf8Const *name,\n+\t\t\t\t\t  java::lang::ClassLoader *loader);\n+  friend jclass (::_Jv_PopClass) (void);\n+  friend void ::_Jv_PushClass (jclass k);\n+  friend void ::_Jv_NewArrayClass (jclass element,\n+\t\t\t\t   java::lang::ClassLoader *loader,\n+\t\t\t\t   _Jv_VTable *array_vtable);\n+  friend jclass (::_Jv_NewClass) (_Jv_Utf8Const *name, jclass superclass,\n+\t\t\t\t  java::lang::ClassLoader *loader);\n+  friend void ::_Jv_InitNewClassFields (jclass klass);\n \n   // in prims.cc\n-  friend void _Jv_InitPrimClass (jclass, char *, char, int);\n-\n-  friend void _Jv_PrepareCompiledClass (jclass);\n-  friend void _Jv_PrepareConstantTimeTables (jclass);\n-  friend jshort _Jv_GetInterfaces (jclass, _Jv_ifaces *);\n-  friend void _Jv_GenerateITable (jclass, _Jv_ifaces *, jshort *);\n-  friend jstring _Jv_GetMethodString(jclass, _Jv_Utf8Const *);\n-  friend jshort _Jv_AppendPartialITable (jclass, jclass, void **, jshort);\n-  friend jshort _Jv_FindIIndex (jclass *, jshort *, jshort);\n-  friend void _Jv_LinkSymbolTable (jclass);\n-  friend void _Jv_LayoutInterfaceMethods (jclass);\n-  friend void _Jv_LayoutVTableMethods (jclass klass);\n-  friend void _Jv_SetVTableEntries (jclass, _Jv_VTable *, jboolean *);\n-  friend void _Jv_MakeVTable (jclass);\n-  friend void _Jv_linkExceptionClassTable (jclass);\n-\n-  friend jboolean _Jv_CheckAccess (jclass self_klass, jclass other_klass,\n+  friend void ::_Jv_InitPrimClass (jclass, char *, char, int);\n+\n+  friend void ::_Jv_PrepareCompiledClass (jclass);\n+  friend void ::_Jv_PrepareConstantTimeTables (jclass);\n+  friend jshort (::_Jv_GetInterfaces) (jclass, _Jv_ifaces *);\n+  friend void ::_Jv_GenerateITable (jclass, _Jv_ifaces *, jshort *);\n+  friend jstring (::_Jv_GetMethodString) (jclass, _Jv_Utf8Const *);\n+  friend jshort (::_Jv_AppendPartialITable) (jclass, jclass, void **, jshort);\n+  friend jshort (::_Jv_FindIIndex) (jclass *, jshort *, jshort);\n+  friend void ::_Jv_LinkSymbolTable (jclass);\n+  friend void ::_Jv_LayoutInterfaceMethods (jclass);\n+  friend void ::_Jv_LayoutVTableMethods (jclass klass);\n+  friend void ::_Jv_SetVTableEntries (jclass, _Jv_VTable *, jboolean *);\n+  friend void ::_Jv_MakeVTable (jclass);\n+  friend void ::_Jv_linkExceptionClassTable (jclass);\n+\n+  friend jboolean (::_Jv_CheckAccess) (jclass self_klass, jclass other_klass,\n \t\t\t\t   jint flags);\n \n-  // Return array class corresponding to element type KLASS, creating it if\n-  // necessary.\n-  inline friend jclass\n-  _Jv_GetArrayClass (jclass klass, java::lang::ClassLoader *loader)\n-  {\n-    extern void _Jv_NewArrayClass (jclass element,\n-\t\t\t\t   java::lang::ClassLoader *loader,\n-\t\t\t\t   _Jv_VTable *array_vtable = 0);\n-    if (__builtin_expect (!klass->arrayclass, false))\n-      _Jv_NewArrayClass (klass, loader);\n-    return klass->arrayclass;\n-  }\n+  friend jclass (::_Jv_GetArrayClass) (jclass klass,\n+\t\t\t\t       java::lang::ClassLoader *loader);\n \n #ifdef INTERPRETER\n-  friend jboolean _Jv_IsInterpretedClass (jclass);\n-  friend void _Jv_InitField (jobject, jclass, _Jv_Field*);\n-  friend void _Jv_InitField (jobject, jclass, int);\n-  friend _Jv_word _Jv_ResolvePoolEntry (jclass, int);\n-  friend _Jv_Method *_Jv_SearchMethodInClass (jclass cls, jclass klass, \n-                        \t\t      _Jv_Utf8Const *method_name, \n-\t\t\t\t\t      _Jv_Utf8Const *method_signature);\n-\n-  friend void _Jv_PrepareClass (jclass);\n-  friend void _Jv_PrepareMissingMethods (jclass base, jclass iface_class);\n-\n-  friend void _Jv_Defer_Resolution (void *cl, _Jv_Method *meth, void **);\n+  friend jboolean (::_Jv_IsInterpretedClass) (jclass);\n+  friend void ::_Jv_InitField (jobject, jclass, _Jv_Field*);\n+  friend void ::_Jv_InitField (jobject, jclass, int);\n+  friend _Jv_word (::_Jv_ResolvePoolEntry) (jclass, int);\n+  friend _Jv_Method *::_Jv_SearchMethodInClass (jclass cls, jclass klass, \n+\t\t\t\t\t\t_Jv_Utf8Const *method_name, \n+\t\t\t\t\t\t_Jv_Utf8Const *method_signature);\n+\n+  friend void ::_Jv_PrepareClass (jclass);\n+  friend void ::_Jv_PrepareMissingMethods (jclass base, jclass iface_class);\n+\n+  friend void ::_Jv_Defer_Resolution (void *cl, _Jv_Method *meth, void **);\n   \n   friend class ::_Jv_ClassReader;\t\n   friend class ::_Jv_InterpClass;\n@@ -400,7 +484,7 @@ class java::lang::Class : public java::lang::Object\n   friend class gnu::gcj::runtime::StackTrace;\n   friend class java::io::VMObjectStreamClass;\n \n-  friend void _Jv_sharedlib_register_hook (jclass klass);\n+  friend void ::_Jv_sharedlib_register_hook (jclass klass);\n \n   // Chain for class pool.\n   jclass next;\n@@ -467,4 +551,26 @@ class java::lang::Class : public java::lang::Object\n   void *aux_info;\n };\n \n+// Inline functions that are friends of java::lang::Class\n+\n+inline void _Jv_InitClass (jclass klass)\n+{\n+  if (__builtin_expect (klass->state == JV_STATE_DONE, true))\n+    return;\n+  klass->initializeClass ();  \n+}\n+\n+// Return array class corresponding to element type KLASS, creating it if\n+// necessary.\n+inline jclass\n+_Jv_GetArrayClass (jclass klass, java::lang::ClassLoader *loader)\n+{\n+  extern void _Jv_NewArrayClass (jclass element,\n+\t\t\t\t java::lang::ClassLoader *loader,\n+\t\t\t\t _Jv_VTable *array_vtable = 0);\n+  if (__builtin_expect (!klass->arrayclass, false))\n+    _Jv_NewArrayClass (klass, loader);\n+  return klass->arrayclass;\n+}\n+\n #endif /* __JAVA_LANG_CLASS_H__ */"}, {"sha": "0842e0b291c12a308086dc9ae986bfa190e5dfa5", "filename": "libjava/java/lang/Object.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a0c6e02e954af433961f306e18cbc96f31cab5/libjava%2Fjava%2Flang%2FObject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a0c6e02e954af433961f306e18cbc96f31cab5/libjava%2Fjava%2Flang%2FObject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FObject.h?ref=21a0c6e02e954af433961f306e18cbc96f31cab5", "patch": "@@ -1,6 +1,6 @@\n // Object.h - Header file for java.lang.Object.  -*- c++ -*-\n \n-/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2004  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -28,6 +28,13 @@ struct _JvObjectPrefix\n # endif\n };\n \n+// Forward declarations for friends of java::lang::Object\n+void _Jv_MonitorEnter (jobject obj);\n+void _Jv_MonitorExit (jobject obj);\n+void _Jv_InitializeSyncMutex (void);\n+void _Jv_FinalizeObject (jobject obj);\n+bool _Jv_ObjectCheckMonitor (jobject obj);\n+\n class java::lang::Object : public _JvObjectPrefix\n {\n protected:\n@@ -45,11 +52,11 @@ class java::lang::Object : public _JvObjectPrefix\n   void wait (void);\n   void wait (jlong timeout);\n \n-  friend void _Jv_MonitorEnter (jobject obj);\n-  friend void _Jv_MonitorExit (jobject obj);\n-  friend void _Jv_InitializeSyncMutex (void);\n-  friend void _Jv_FinalizeObject (jobject obj);\n-  friend bool _Jv_ObjectCheckMonitor (jobject obj);\n+  friend void ::_Jv_MonitorEnter (jobject obj);\n+  friend void ::_Jv_MonitorExit (jobject obj);\n+  friend void ::_Jv_InitializeSyncMutex (void);\n+  friend void ::_Jv_FinalizeObject (jobject obj);\n+  friend bool ::_Jv_ObjectCheckMonitor (jobject obj);\n \n #ifdef JV_MARKOBJ_DECL\n   friend JV_MARKOBJ_DECL;"}]}