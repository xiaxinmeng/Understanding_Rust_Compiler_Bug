{"sha": "f61e18ec67d800e358448907260604809f3151b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYxZTE4ZWM2N2Q4MDBlMzU4NDQ4OTA3MjYwNjA0ODA5ZjMxNTFiOQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-09-22T08:34:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-09-22T08:34:52Z"}, "message": "re PR tree-optimization/41428 (CCP doesn't fold all comparisons it could)\n\n2009-09-22  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/41428\n\t* tree-ssa-ccp.c (ccp_fold_stmt): New function.\n\t(ccp_finalize): Pass it to substitute_and_fold.\n\n\t* g++.dg/tree-ssa/pr41428.C: New testcase.\n\nFrom-SVN: r151969", "tree": {"sha": "2dae69d5e6d8f6e3ea0f1c4712a4f2998ae5d083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dae69d5e6d8f6e3ea0f1c4712a4f2998ae5d083"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f61e18ec67d800e358448907260604809f3151b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61e18ec67d800e358448907260604809f3151b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f61e18ec67d800e358448907260604809f3151b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61e18ec67d800e358448907260604809f3151b9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff7ffb8f2a4670297b53f38c0a751defc59bb47f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff7ffb8f2a4670297b53f38c0a751defc59bb47f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff7ffb8f2a4670297b53f38c0a751defc59bb47f"}], "stats": {"total": 57, "additions": 56, "deletions": 1}, "files": [{"sha": "fa41a8afb220225c6f6668613a4725037e5e63d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e18ec67d800e358448907260604809f3151b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e18ec67d800e358448907260604809f3151b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f61e18ec67d800e358448907260604809f3151b9", "patch": "@@ -1,3 +1,9 @@\n+2009-09-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/41428\n+\t* tree-ssa-ccp.c (ccp_fold_stmt): New function.\n+\t(ccp_finalize): Pass it to substitute_and_fold.\n+\n 2009-09-22  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-propagate.h (ssa_prop_fold_stmt_fn): Declare."}, {"sha": "97b626297699fa1ee6f7a1316b81c27caa619b2f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e18ec67d800e358448907260604809f3151b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e18ec67d800e358448907260604809f3151b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f61e18ec67d800e358448907260604809f3151b9", "patch": "@@ -1,3 +1,8 @@\n+2009-09-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/41428\n+\t* g++.dg/tree-ssa/pr41428.C: New testcase.\n+\n 2009-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/41429"}, {"sha": "32716cad1c9b3f20963362758c910cab79dac8df", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr41428.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e18ec67d800e358448907260604809f3151b9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr41428.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e18ec67d800e358448907260604809f3151b9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr41428.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr41428.C?ref=f61e18ec67d800e358448907260604809f3151b9", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-ccp1-details\" } */\n+\n+extern \"C\" void abort (void);\n+inline void *operator new (__SIZE_TYPE__, void *__p) throw () { return __p; }\n+\n+int foo(void)\n+{\n+  float f = 0;\n+  int *i = new (&f) int (1);\n+  return *(int *)&f;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Folded into: if \\\\\\(1 != 0\\\\\\)\" \"ccp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"ccp1\" } } */"}, {"sha": "454240392cf655153d92c99ea779b47ee379e59e", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e18ec67d800e358448907260604809f3151b9/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e18ec67d800e358448907260604809f3151b9/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=f61e18ec67d800e358448907260604809f3151b9", "patch": "@@ -229,6 +229,7 @@ typedef enum\n static prop_value_t *const_val;\n \n static void canonicalize_float_value (prop_value_t *);\n+static bool ccp_fold_stmt (gimple_stmt_iterator *);\n \n /* Dump constant propagation value VAL to file OUTF prefixed by PREFIX.  */\n \n@@ -724,7 +725,7 @@ ccp_finalize (void)\n \n   do_dbg_cnt ();\n   /* Perform substitutions based on the known constant values.  */\n-  something_changed = substitute_and_fold (const_val, NULL);\n+  something_changed = substitute_and_fold (const_val, ccp_fold_stmt);\n \n   free (const_val);\n   const_val = NULL;\n@@ -1472,6 +1473,34 @@ evaluate_stmt (gimple stmt)\n   return val;\n }\n \n+/* Fold the stmt at *GSI with CCP specific information that propagating\n+   and regular folding does not catch.  */\n+\n+static bool\n+ccp_fold_stmt (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+  prop_value_t val;\n+\n+  if (gimple_code (stmt) != GIMPLE_COND)\n+    return false;\n+\n+  /* Statement evaluation will handle type mismatches in constants\n+     more gracefully than the final propagation.  This allows us to\n+     fold more conditionals here.  */\n+  val = evaluate_stmt (stmt);\n+  if (val.lattice_val != CONSTANT\n+      || TREE_CODE (val.value) != INTEGER_CST)\n+    return false;\n+\n+  if (integer_zerop (val.value))\n+    gimple_cond_make_false (stmt);\n+  else \n+    gimple_cond_make_true (stmt);\n+\n+  return true;\n+}\n+\n /* Visit the assignment statement STMT.  Set the value of its LHS to the\n    value computed by the RHS and store LHS in *OUTPUT_P.  If STMT\n    creates virtual definitions, set the value of each new name to that"}]}