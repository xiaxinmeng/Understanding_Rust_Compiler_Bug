{"sha": "bf8467d8069a4cd91a1071431200926186235f1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY4NDY3ZDgwNjlhNGNkOTFhMTA3MTQzMTIwMDkyNjE4NjIzNWYxYw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-05-09T17:09:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-06T11:35:31Z"}, "message": "[Ada] Clean up GNAT.Calendar.Time_IO.Value\n\ngcc/ada/\n\n\t* libgnat/g-catiio.adb (Parse_ISO_8601): Minor cleanups:\n\n\tGive some objects clearer names.\n\tMake some objects more local to where they are used.\n\n\tRemove some validity checks that can't fail, because some of\n\tthe variables tested have been moved so they're not visible here.\n\tAnyway, Wrong_Syntax is about errors in the input, not data\n\tvalidity.\n\n\tUse Time_Zone_Seen instead of Local_Sign = ' ' to determine\n\tthat a time zone indication was seen.\n\n\tWe don't need to distinguish two different kinds of\n\tsyntax error (End_Of_Source_Reached and Wrong_Syntax),\n\tso use Wrong_Syntax always.\n\n\tRemove comment, \"Certain scanning scenarios may handle\n\tthis exception on their own.\"; there are no such scenarios.", "tree": {"sha": "2b8a2c211a2f69693dd416419449a507fb2d55e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b8a2c211a2f69693dd416419449a507fb2d55e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf8467d8069a4cd91a1071431200926186235f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8467d8069a4cd91a1071431200926186235f1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf8467d8069a4cd91a1071431200926186235f1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8467d8069a4cd91a1071431200926186235f1c/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1e78e8577fcab0c0854f9b7884d6ce3290827ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1e78e8577fcab0c0854f9b7884d6ce3290827ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1e78e8577fcab0c0854f9b7884d6ce3290827ed"}], "stats": {"total": 117, "additions": 55, "deletions": 62}, "files": [{"sha": "21ffc7bda33deb88f51d60a3fa1c11b3985672db", "filename": "gcc/ada/libgnat/g-catiio.adb", "status": "modified", "additions": 55, "deletions": 62, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8467d8069a4cd91a1071431200926186235f1c/gcc%2Fada%2Flibgnat%2Fg-catiio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8467d8069a4cd91a1071431200926186235f1c/gcc%2Fada%2Flibgnat%2Fg-catiio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-catiio.adb?ref=bf8467d8069a4cd91a1071431200926186235f1c", "patch": "@@ -593,13 +593,10 @@ package body GNAT.Calendar.Time_IO is\n       --  The current character scan index. After a call to Advance, Index\n       --  points to the next character.\n \n-      End_Of_Source_Reached : exception;\n-      --  An exception used to signal that the scan pointer has reached the\n-      --  end of the source string.\n-\n       Wrong_Syntax : exception;\n       --  An exception used to signal that the scan pointer has reached an\n-      --  unexpected character in the source string.\n+      --  unexpected character in the source string, or if premature\n+      --  end-of-source was reached.\n \n       procedure Advance;\n       pragma Inline (Advance);\n@@ -657,13 +654,12 @@ package body GNAT.Calendar.Time_IO is\n \n       procedure Advance is\n       begin\n-         --  Signal the end of the source string. This stops a complex scan by\n-         --  bottoming up any recursive calls till control reaches routine Scan\n-         --  which handles the exception. Certain scanning scenarios may handle\n-         --  this exception on their own.\n+         --  Signal the end of the source string. This stops a complex scan\n+         --  by bottoming up any recursive calls till control reaches routine\n+         --  Scan, which handles the exception.\n \n          if Index > Date'Last then\n-            raise End_Of_Source_Reached;\n+            raise Wrong_Syntax;\n \n          --  Advance the scan pointer as long as there are characters to scan,\n          --  in other words, the scan pointer has not passed the end of the\n@@ -819,7 +815,7 @@ package body GNAT.Calendar.Time_IO is\n          --  this exception on their own.\n \n          if Index > Date'Last then\n-            raise End_Of_Source_Reached;\n+            raise Wrong_Syntax;\n \n          else\n             return Date (Index);\n@@ -833,22 +829,22 @@ package body GNAT.Calendar.Time_IO is\n       Date_Separator : constant Character := '-';\n       Hour_Separator : constant Character := ':';\n \n-      Day          : Day_Number;\n-      Month        : Month_Number;\n-      Year         : Year_Number;\n-      Hour         : Hour_Number     := 0;\n-      Minute       : Minute_Number   := 0;\n-      Second       : Second_Number   := 0;\n-      Subsec       : Second_Duration := 0.0;\n+      Day    : Day_Number;\n+      Month  : Month_Number;\n+      Year   : Year_Number;\n+      Hour   : Hour_Number     := 0;\n+      Minute : Minute_Number   := 0;\n+      Second : Second_Number   := 0;\n+      Subsec : Second_Duration := 0.0;\n \n-      Local_Hour   : Hour_Number     := 0;\n-      Local_Minute : Minute_Number   := 0;\n-      Local_Sign   : Character       := ' ';\n-      Time_Zone    : Time_Offset; -- initialized when Local_Sign is set\n+      Time_Zone_Seen   : Boolean := False;\n+      Time_Zone_Offset : Time_Offset; -- Valid only if Time_Zone_Seen\n \n       Sep_Required : Boolean := False;\n       --  True if a separator is seen (and therefore required after it!)\n \n+      subtype Sign_Type is Character with Predicate => Sign_Type in '+' | '-';\n+\n    begin\n       --  Parse date\n \n@@ -880,8 +876,8 @@ package body GNAT.Calendar.Time_IO is\n             --  Suffix 'Z' signifies that this is UTC time (time zone 0)\n \n             if Symbol = 'Z' then\n-               Local_Sign := '+';\n-               Time_Zone := 0;\n+               Time_Zone_Seen := True;\n+               Time_Zone_Offset := 0;\n                Advance;\n \n             --  A decimal fraction shall have at least one digit, and has as\n@@ -902,69 +898,66 @@ package body GNAT.Calendar.Time_IO is\n             --  if the difference between the time scales is exactly an\n             --  integral number of hours.\n \n-            elsif Symbol = '+' or else Symbol = '-' then\n-               Local_Sign := Symbol;\n-               Advance;\n-               Local_Hour := Scan_Hour;\n+            elsif Symbol in Sign_Type then\n+               declare\n+                  Time_Zone_Sign : constant Sign_Type := Symbol;\n \n-               --  Past ':'\n-\n-               if Index < Date'Last and then Symbol = Hour_Separator then\n+                  Time_Zone_Hour   : Hour_Number;\n+                  Time_Zone_Minute : Minute_Number;\n+               begin\n+                  Time_Zone_Seen := True;\n                   Advance;\n-                  Local_Minute := Scan_Minute;\n-               end if;\n+                  Time_Zone_Hour := Scan_Hour;\n \n-               --  Compute local displacement\n+                  --  Past ':'\n \n-               Time_Zone := Time_Offset (Local_Hour * 60 + Local_Minute);\n+                  if Index < Date'Last and then Symbol = Hour_Separator then\n+                     Advance;\n+                     Time_Zone_Minute := Scan_Minute;\n+                  else\n+                     Time_Zone_Minute := 0;\n+                  end if;\n \n-               if Local_Sign = '-' then\n-                  Time_Zone := -Time_Zone;\n-               end if;\n+                  --  Compute Time_Zone_Offset\n+\n+                  Time_Zone_Offset :=\n+                    Time_Offset (Time_Zone_Hour * 60 + Time_Zone_Minute);\n+\n+                  if Time_Zone_Sign = '-' then\n+                     Time_Zone_Offset := -Time_Zone_Offset;\n+                  end if;\n+               end;\n             else\n                raise Wrong_Syntax;\n             end if;\n          end if;\n       end if;\n \n-      --  Sanity checks. The check on Index ensures that there are no trailing\n-      --  characters.\n+      --  Check for trailing characters\n \n-      if Index /= Date'Length + 1\n-        or else not Year'Valid\n-        or else not Month'Valid\n-        or else not Day'Valid\n-        or else not Hour'Valid\n-        or else not Minute'Valid\n-        or else not Second'Valid\n-        or else not Subsec'Valid\n-        or else not Local_Hour'Valid\n-        or else not Local_Minute'Valid\n-      then\n+      if Index /= Date'Length + 1 then\n          raise Wrong_Syntax;\n       end if;\n \n-      --  If no time zone was specified, we call GNAT.Calendar.Time_Of, which\n-      --  uses local time. Otherwise, we use Ada.Calendar.Formatting.Time_Of\n-      --  and specify the time zone.\n+      --  If a time zone was specified, use Ada.Calendar.Formatting.Time_Of,\n+      --  and specify the time zone. Otherwise, call GNAT.Calendar.Time_Of,\n+      --  which uses local time.\n \n-      if Local_Sign = ' ' then\n-         Time := GNAT.Calendar.Time_Of\n-           (Year, Month, Day, Hour, Minute, Second, Subsec);\n-      else\n+      if Time_Zone_Seen then\n          Time := Ada.Calendar.Formatting.Time_Of\n            (Year, Month, Day, Hour, Minute, Second, Subsec,\n-            Time_Zone => Time_Zone);\n+            Time_Zone => Time_Zone_Offset);\n+      else\n+         Time := GNAT.Calendar.Time_Of\n+           (Year, Month, Day, Hour, Minute, Second, Subsec);\n       end if;\n \n       --  Notify that the input string was successfully parsed\n \n       Success := True;\n \n    exception\n-      when End_Of_Source_Reached\n-         | Wrong_Syntax\n-      =>\n+      when Wrong_Syntax =>\n          Time :=\n            Time_Of (Year_Number'First, Month_Number'First, Day_Number'First);\n          Success := False;"}]}