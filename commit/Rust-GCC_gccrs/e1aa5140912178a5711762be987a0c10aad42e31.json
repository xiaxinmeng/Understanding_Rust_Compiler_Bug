{"sha": "e1aa5140912178a5711762be987a0c10aad42e31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFhYTUxNDA5MTIxNzhhNTcxMTc2MmJlOTg3YTBjMTBhYWQ0MmUzMQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-09-10T03:41:50Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-09-10T03:41:50Z"}, "message": "cppmacro.c (check_trad_stringification): New function.\n\n\t* cppmacro.c (check_trad_stringification): New function.\n\t(save_expansion): If -Wtraditional, warn about stringification of\n\tmacro arguments.\n\ntestsuite:\n\t* gcc.dg/cpp/tr-warn6.c: New test.\n\nFrom-SVN: r36285", "tree": {"sha": "7c23b23e1e31bfbc438ca968e64e66b8dfefe79b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c23b23e1e31bfbc438ca968e64e66b8dfefe79b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1aa5140912178a5711762be987a0c10aad42e31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1aa5140912178a5711762be987a0c10aad42e31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1aa5140912178a5711762be987a0c10aad42e31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1aa5140912178a5711762be987a0c10aad42e31/comments", "author": null, "committer": null, "parents": [{"sha": "afa1738b588b778082a43c3c933f8a4b412a831d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afa1738b588b778082a43c3c933f8a4b412a831d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afa1738b588b778082a43c3c933f8a4b412a831d"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "f5e5062b8d4eb132a06b49756ad529143001269e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1aa5140912178a5711762be987a0c10aad42e31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1aa5140912178a5711762be987a0c10aad42e31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1aa5140912178a5711762be987a0c10aad42e31", "patch": "@@ -1,3 +1,9 @@\n+2000-09-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cppmacro.c (check_trad_stringification): New function.\n+\t(save_expansion): If -Wtraditional, warn about stringification of\n+\tmacro arguments.\n+\n 2000-09-11  Michael Hayes  <mhayes@cygnus.com>\n \n \t* loop.h (struct loop_mem_info): Move from loop.c"}, {"sha": "2b16fd4757ca1aa0a3cc8cf8f0c292f40b890ed5", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1aa5140912178a5711762be987a0c10aad42e31/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1aa5140912178a5711762be987a0c10aad42e31/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=e1aa5140912178a5711762be987a0c10aad42e31", "patch": "@@ -52,6 +52,9 @@ static const cpp_toklist * save_expansion PARAMS((cpp_reader *,\n static unsigned int find_param PARAMS ((const cpp_token *,\n  \t\t\t\t\tconst cpp_token *));\n static cpp_toklist * alloc_macro PARAMS ((cpp_reader *, struct macro_info *));\n+static void check_trad_stringification PARAMS ((cpp_reader *,\n+\t\t\t\t\t\tconst struct macro_info *,\n+\t\t\t\t\t\tconst cpp_string *));\n \n /* These are all the tokens that can have something pasted after them.\n    Comma is included in the list only to support the GNU varargs extension\n@@ -502,6 +505,12 @@ save_expansion (pfile, info)\n \t    continue;\n \t  break;\n \n+\tcase CPP_STRING:\n+\tcase CPP_CHAR:\n+\t  if (CPP_WTRADITIONAL (pfile) && list->paramc > 0)\n+\t    check_trad_stringification (pfile, info, &token->val.str);\n+\t  break;\n+\t  \n \tdefault:\n \t  break;\n \t}\n@@ -618,3 +627,46 @@ dump_macro_args (fp, list)\n     }\n   putc (')', fp);\n }\n+\n+/* Warn if a token in `string' matches one of the function macro\n+   arguments in `info'.  This function assumes that the macro is a\n+   function macro and not an object macro.  */\n+static void\n+check_trad_stringification (pfile, info, string)\n+     cpp_reader *pfile;\n+     const struct macro_info *info;\n+     const cpp_string *string;\n+{\n+  const U_CHAR *p, *q, *limit = string->text + string->len;\n+  \n+  /* Loop over the string.  */\n+  for (p = string->text; p < limit; p = q)\n+    {\n+      const cpp_token *token;\n+\n+      /* Find the start of an identifier.  */\n+      while (!is_idstart (*p) && p < limit) p++;\n+\n+      /* Find the end of the identifier.  */\n+      q = p;\n+      while (is_idchar (*q) && q < limit) q++;\n+     \n+      /* Loop over the function macro arguments to see if the\n+\t identifier inside the string matches one of them.  */\n+      for (token = info->first_param; token < info->first; token++)\n+        {\n+\t  /* Skip the commas in between the arguments.  */\n+\t  if (token->type != CPP_NAME)\n+\t    continue;\n+\n+\t  if (token->val.node->length == (q - p)\n+\t      && !memcmp (p, token->val.node->name, (q - p)))\n+\t    {\n+\t      cpp_warning (pfile,\n+\t\t\t   \"macro arg \\\"%.*s\\\" would be stringified with -traditional.\",\n+\t\t\t   (int) (q - p), p);\n+\t      break;\n+\t    }\n+\t}\n+    }\n+}"}, {"sha": "830af37eb6319640068c4109b499f89e225afd37", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1aa5140912178a5711762be987a0c10aad42e31/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1aa5140912178a5711762be987a0c10aad42e31/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1aa5140912178a5711762be987a0c10aad42e31", "patch": "@@ -1,3 +1,7 @@\n+2000-09-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/cpp/tr-warn6.c: New test\n+\n 2000-09-07  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.dg/format-ext-3.c: Test %#b and %#h as formats that should"}, {"sha": "4068cc51db12fb4d0e2b1e155d13b72d90e117c0", "filename": "gcc/testsuite/gcc.dg/cpp/tr-warn6.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1aa5140912178a5711762be987a0c10aad42e31/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1aa5140912178a5711762be987a0c10aad42e31/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn6.c?ref=e1aa5140912178a5711762be987a0c10aad42e31", "patch": "@@ -0,0 +1,27 @@\n+/* Test for -Wtraditional warnings for stringification of macro args.\n+   Note, gcc should omit these warnings in system header files.\n+   By Kaveh R. Ghazi <ghazi@caip.rutgers.edu> 9/8/2000.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-Wtraditional -fno-show-column\" } */\n+\n+#define foo1(h) sdf \"h3\" fds \"h\" /* { dg-warning \"macro arg \\\"h\\\" would be stringified\" \"traditional stringification\" } */\n+#define foo2(h2) sdf \"h2\" fds \"h3\" /* { dg-warning \"macro arg \\\"h2\\\" would be stringified\" \"traditional stringification\" } */\n+#define foo3(h3) sdf \"h2\" fds \"h3\" /* { dg-warning \"macro arg \\\"h3\\\" would be stringified\" \"traditional stringification\" } */\n+#define foo4(h) sdf 'h3' fds 'h' /* { dg-warning \"macro arg \\\"h\\\" would be stringified\" \"traditional stringification\" } */\n+#define foo5(h2) sdf 'h2' fds 'h3' /* { dg-warning \"macro arg \\\"h2\\\" would be stringified\" \"traditional stringification\" } */\n+#define foo6(h3) sdf 'h2' fds 'h3' /* { dg-warning \"macro arg \\\"h3\\\" would be stringified\" \"traditional stringification\" } */\n+#define foo7(AA, hello, world, EEE) sdf \"A B hello C,world,DhelloE F\" fds EEE /* { dg-warning \"macro arg \\\"hello\\\" would be stringified\" \"traditional stringification\" } */\n+\n+/* Catch the second warning from the above line.  */\n+/* { dg-warning \"macro arg \\\"world\\\" would be stringified\" \"traditional stringification\" { target *-*-* } 13 } */\n+\n+#line 19 \"sys-header.h\" 3\n+/* We are in system headers now, no -Wtraditional warnings should issue.  */\n+\n+#define bar1(h) sdf \"h3\" fds \"h\"\n+#define bar2(h2) sdf \"h2\" fds \"h3\"\n+#define bar3(h3) sdf \"h2\" fds \"h3\"\n+#define bar4(h) sdf 'h3' fds 'h'\n+#define bar5(h2) sdf 'h2' fds 'h3'\n+#define bar6(h3) sdf 'h2' fds 'h3'\n+#define bar7(AA, hello, world, EEE) sdf \"A B hello C,world,DhelloE F\" fds EEE"}]}