{"sha": "ecc3135a4a264b66c163ef32e815a99746b81800", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNjMzEzNWE0YTI2NGI2NmMxNjNlZjMyZTgxNWE5OTc0NmI4MTgwMA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-08-24T12:36:52Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-09-15T10:22:34Z"}, "message": "Retune mask <->integer cost for non-AVX512 micro-architecture.\n\ngcc/ChangeLog:\n\n\tPR target/96744\n\t* config/i386/x86-tune-costs.h (struct processor_costs):\n\tIncrease mask <-> integer cost for non AVX512 target to avoid\n\tspill gpr to mask. Also retune mask <-> integer and\n\tmask_load/store for skylake_cost.", "tree": {"sha": "c65eb478f85b902d846565f60d65b6539b6e94c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c65eb478f85b902d846565f60d65b6539b6e94c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecc3135a4a264b66c163ef32e815a99746b81800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc3135a4a264b66c163ef32e815a99746b81800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecc3135a4a264b66c163ef32e815a99746b81800", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc3135a4a264b66c163ef32e815a99746b81800/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f079e104a8d1994b6b47169a6b45737615eb2d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f079e104a8d1994b6b47169a6b45737615eb2d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f079e104a8d1994b6b47169a6b45737615eb2d7"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "0ad4b28903cc56b9be77d030c574c9c03076f64c", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc3135a4a264b66c163ef32e815a99746b81800/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc3135a4a264b66c163ef32e815a99746b81800/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=ecc3135a4a264b66c163ef32e815a99746b81800", "patch": "@@ -58,8 +58,8 @@ struct processor_costs ix86_size_cost = {/* costs for tuning for size */\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {3, 3, 3, 3, 3},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  3, 3,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  3, 3,\t\t\t\t/* mask->integer and integer->mask moves */\n   {2, 2, 2},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {2, 2, 2},\t\t\t\t/* cost if storing mask register\n@@ -169,8 +169,8 @@ struct processor_costs i386_cost = {\t/* 386 specific costs */\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {4, 8, 16, 32, 64},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  3, 3,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  3, 3,\t\t\t\t/* mask->integer and integer->mask moves */\n   {2, 4, 2},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {2, 4, 2},\t\t\t\t/* cost if storing mask register\n@@ -277,8 +277,8 @@ struct processor_costs i486_cost = {\t/* 486 specific costs */\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {4, 8, 16, 32, 64},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  3, 3,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  3, 3,\t\t\t\t/* mask->integer and integer->mask moves */\n   {2, 4, 2},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {2, 4, 2},\t\t\t\t/* cost if storing mask register\n@@ -387,8 +387,8 @@ struct processor_costs pentium_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {4, 8, 16, 32, 64},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  3, 3,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  3, 3,\t\t\t\t/* mask->integer and integer->mask moves */\n   {2, 4, 2},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {2, 4, 2},\t\t\t\t/* cost if storing mask register\n@@ -488,8 +488,8 @@ struct processor_costs lakemont_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {4, 8, 16, 32, 64},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  3, 3,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  3, 3,\t\t\t\t/* mask->integer and integer->mask moves */\n   {2, 4, 2},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {2, 4, 2},\t\t\t\t/* cost if storing mask register\n@@ -604,8 +604,8 @@ struct processor_costs pentiumpro_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {4, 8, 16, 32, 64},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  3, 3,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  3, 3,\t\t\t\t/* mask->integer and integer->mask moves */\n   {4, 4, 4},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {2, 2, 2},\t\t\t\t/* cost if storing mask register\n@@ -711,8 +711,8 @@ struct processor_costs geode_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {2, 2, 8, 16, 32},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  6, 6,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  6, 6,\t\t\t\t/* mask->integer and integer->mask moves */\n   {2, 2, 2},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {2, 2, 2},\t\t\t\t/* cost if storing mask register\n@@ -818,8 +818,8 @@ struct processor_costs k6_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {2, 2, 8, 16, 32},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  6, 6,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  6, 6,\t\t\t\t/* mask->integer and integer->mask moves */\n   {4, 5, 4},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {2, 3, 2},\t\t\t\t/* cost if storing mask register\n@@ -931,8 +931,8 @@ struct processor_costs athlon_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {4, 4, 10, 10, 20},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  5, 5,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  5, 5,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  5, 5,\t\t\t\t/* mask->integer and integer->mask moves */\n   {3, 4, 3},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {3, 4, 3},\t\t\t\t/* cost if storing mask register\n@@ -1046,8 +1046,8 @@ struct processor_costs k8_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {4, 4, 10, 10, 20},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  5, 5,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  5, 5,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  5, 5,\t\t\t\t/* mask->integer and integer->mask moves */\n   {3, 4, 3},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {3, 4, 3},\t\t\t\t/* cost if storing mask register\n@@ -1165,8 +1165,8 @@ struct processor_costs amdfam10_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {4, 4, 5, 10, 20},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  3, 3,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  3, 3,\t\t\t\t/* mask->integer and integer->mask moves */\n   {3, 4, 3},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {3, 4, 3},\t\t\t\t/* cost if storing mask register\n@@ -1295,7 +1295,7 @@ const struct processor_costs bdver_cost = {\n   {10, 10, 10, 40, 60},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   16, 20,\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  16, 20,\t\t\t\t/* mask->integer and integer->mask moves */\n   {8, 8, 8},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {8, 8, 8},\t\t\t\t/* cost if storing mask register\n@@ -1431,8 +1431,8 @@ struct processor_costs znver1_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit.  */\n   {8, 8, 8, 16, 32},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit.  */\n-  6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves.  */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  6, 6,\t\t\t\t/* SSE->integer and integer->SSE moves.  */\n+  8, 8,\t\t\t\t/* mask->integer and integer->mask moves */\n   {6, 6, 6},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {8, 8, 8},\t\t\t\t/* cost if storing mask register\n@@ -1587,7 +1587,7 @@ struct processor_costs znver2_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit.  */\n   6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE\n \t\t\t\t\t   moves.  */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  8, 8,\t\t\t\t/* mask->integer and integer->mask moves */\n   {6, 6, 6},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {8, 8, 8},\t\t\t\t/* cost if storing mask register\n@@ -1726,11 +1726,11 @@ struct processor_costs skylake_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {8, 8, 8, 12, 24},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  4, 6,\t\t\t\t/* mask->integer and integer->mask moves */\n-  {6, 6, 6},\t\t\t\t/* cost of loading mask register\n+  6, 6,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  5, 5,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {8, 8, 8},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n-  {8, 8, 8},\t\t\t\t/* cost if storing mask register\n+  {6, 6, 6},\t\t\t\t/* cost if storing mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   3,\t\t\t\t\t/* cost of moving mask register.  */\n   /* End of register allocator costs.  */\n@@ -1841,7 +1841,7 @@ const struct processor_costs btver1_cost = {\n   {10, 10, 12, 48, 96},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   14, 14,\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  14, 14,\t\t\t\t/* mask->integer and integer->mask moves */\n   {6, 8, 6},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {6, 8, 6},\t\t\t\t/* cost if storing mask register\n@@ -1951,7 +1951,7 @@ const struct processor_costs btver2_cost = {\n   {10, 10, 12, 48, 96},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   14, 14,\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  14, 14,\t\t\t\t/* mask->integer and integer->mask moves */\n   {8, 8, 6},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {8, 8, 6},\t\t\t\t/* cost if storing mask register\n@@ -2060,7 +2060,7 @@ struct processor_costs pentium4_cost = {\n   {16, 16, 16, 32, 64},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   20, 12,\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  20, 12,\t\t\t\t/* mask->integer and integer->mask moves */\n   {4, 5, 4},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {2, 3, 2},\t\t\t\t/* cost if storing mask register\n@@ -2172,7 +2172,7 @@ struct processor_costs nocona_cost = {\n   {12, 12, 12, 24, 48},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   20, 12,\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  20, 12,\t\t\t\t/* mask->integer and integer->mask moves */\n   {4, 4, 4},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {4, 4, 4},\t\t\t\t/* cost if storing mask register\n@@ -2281,8 +2281,8 @@ struct processor_costs atom_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {8, 8, 8, 16, 32},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  8, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  8, 6,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  8, 6,\t\t\t\t/* mask->integer and integer->mask moves */\n   {6, 6, 6},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {6, 6, 6},\t\t\t/* cost if storing mask register\n@@ -2391,8 +2391,8 @@ struct processor_costs slm_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {8, 8, 8, 16, 32},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  8, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  8, 6,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  8, 6,\t\t\t\t/* mask->integer and integer->mask moves */\n   {8, 8, 8},\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {6, 6, 6},\t\t\t/* cost if storing mask register\n@@ -2501,8 +2501,8 @@ struct processor_costs intel_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {6, 6, 6, 6, 6},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  4, 4,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  4, 4,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  4, 4,\t\t\t\t/* mask->integer and integer->mask moves */\n   {4, 4, 4},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {6, 6, 6},\t\t\t\t/* cost if storing mask register\n@@ -2615,8 +2615,8 @@ struct processor_costs generic_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {6, 6, 6, 10, 15},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  6, 6,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  6, 6,\t\t\t\t/* mask->integer and integer->mask moves */\n   {6, 6, 6},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {6, 6, 6},\t\t\t/* cost if storing mask register\n@@ -2734,8 +2734,8 @@ struct processor_costs core_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {6, 6, 6, 6, 12},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n-  2, 2,\t\t\t\t/* mask->integer and integer->mask moves */\n+  6, 6,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  6, 6,\t\t\t\t/* mask->integer and integer->mask moves */\n   {4, 4, 4},\t\t\t\t/* cost of loading mask register\n \t\t\t\t\t   in QImode, HImode, SImode.  */\n   {6, 6, 6},\t\t\t\t/* cost if storing mask register"}]}