{"sha": "054d7b9f6f6816a83dcadfdfe2532795cae04ff3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU0ZDdiOWY2ZjY4MTZhODNkY2FkZmRmZTI1MzI3OTVjYWUwNGZmMw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-22T06:39:04Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-29T14:40:39Z"}, "message": "Selectively trap if ranger and vr-values disagree on range builtins.\n\nThe UBSAN builtins degrade into PLUS/MINUS/MULT and call\nextract_range_from_binary_expr, which as the PR shows, can special\ncase some symbolics which the ranger doesn't currently handle.\n\nLooking at vr_values::extract_range_builtin(), I see that every single\nplace where we ask for a range, we bail on non-integers (symbolics,\netc).  That is, with the exception of the UBSAN builtins.\n\nSince this seems to be particular to UBSAN, we could still go with the\noriginal plan of removing the duplicity in ranger vs vr-values, but\nleave in the UBSAN builtin handling.  This isn't ideal, as we'd like\nto remove all the common code, but I'd be willing to put up with UBSAN\nduplication for the time being.\n\nThis patch disables the assert on the UBSAN builtins, while still\ntrapping if any other differences are found between the vr_values and\nthe ranger versions of builtin range handling.\n\nAs a follow-up, once Fedora can test this approach, I'll remove all\nthe builtin code from extract_range_builtin, with the exception of the\nUBSAN stuff (renaming it to extract_range_ubsan_builtin).\n\nSince the builtin code has proven fickle across architectures, I've\ntested this with {-m32,-m64,-fsanitize=signed-integer-overflow} on\nx86, ppc64le, and aarch64.  I think this should be enough.  If it\nisn't, we can revert the patch, and leave the duplicate code until\nthe next release cycle when hopefully vr_values, evrp, and friends\nwill all be overhauled.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/97505\n\t* vr-values.c (vr_values::extract_range_basic): Enable\n\ttrap again for everything except UBSAN builtins.", "tree": {"sha": "be3549bfa69218a49dea3d40d55c1acb40a2b4a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be3549bfa69218a49dea3d40d55c1acb40a2b4a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/054d7b9f6f6816a83dcadfdfe2532795cae04ff3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/054d7b9f6f6816a83dcadfdfe2532795cae04ff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/054d7b9f6f6816a83dcadfdfe2532795cae04ff3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/054d7b9f6f6816a83dcadfdfe2532795cae04ff3/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fe9869083d9835ba5f3a47c61e4ea8f6a8eb9c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fe9869083d9835ba5f3a47c61e4ea8f6a8eb9c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fe9869083d9835ba5f3a47c61e4ea8f6a8eb9c6"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "9f5943a1ab6e0e966880b3a8643a4a710a291ab2", "filename": "gcc/vr-values.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/054d7b9f6f6816a83dcadfdfe2532795cae04ff3/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/054d7b9f6f6816a83dcadfdfe2532795cae04ff3/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=054d7b9f6f6816a83dcadfdfe2532795cae04ff3", "patch": "@@ -1432,14 +1432,17 @@ vr_values::extract_range_basic (value_range_equiv *vr, gimple *stmt)\n \n   if (is_gimple_call (stmt) && extract_range_builtin (vr, stmt))\n     {\n+      combined_fn cfn = gimple_call_combined_fn (stmt);\n+      if (cfn == CFN_UBSAN_CHECK_ADD\n+\t  || cfn == CFN_UBSAN_CHECK_SUB\n+\t  || cfn == CFN_UBSAN_CHECK_MUL)\n+\treturn;\n+\n       value_range_equiv tmp;\n       /* Assert that any ranges vr_values::extract_range_builtin gets\n \t are also handled by the ranger counterpart.  */\n       gcc_assert (range_of_builtin_call (*this, tmp, as_a<gcall *> (stmt)));\n-#if 0\n-      /* Disable this while PR97505 is resolved.  */\n       gcc_assert (tmp.equal_p (*vr, /*ignore_equivs=*/false));\n-#endif\n       return;\n     }\n   /* Handle extraction of the two results (result of arithmetics and"}]}