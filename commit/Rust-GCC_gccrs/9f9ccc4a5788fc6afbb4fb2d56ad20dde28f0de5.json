{"sha": "9f9ccc4a5788fc6afbb4fb2d56ad20dde28f0de5", "node_id": "C_kwDOANBUbNoAKDlmOWNjYzRhNTc4OGZjNmFmYmI0ZmIyZDU2YWQyMGRkZTI4ZjBkZTU", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2022-03-29T17:14:43Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2022-03-29T17:17:05Z"}, "message": "Allow vsx_extract_<mode> to use Altivec registers.\n\nI noticed that the vsx_extract_<mode> pattern for V2DImode and V2DFmode\nonly allowed traditional floating point registers, and it did not allow\nAltivec registers.  The original code was written a few years ago when we\nused the old register allocator, and support for scalar floating point in\nAltivec registers was just being added to GCC.\n\nI have built the spec 2017 benchmark suite With all 4 patches in this\nseries applied, and compared it to the build with the previous 3 patches\napplied.  In addition to the changes from the previous 3 patches, this\npatch now changes the code for the following 3 benchmarks (2 floating\npoint, 1 integer):\n\n\tbwaves_r, fotonik3d_r, xalancbmk_r\n\nI have built bootstrap versions on the following systems.  There were no\nregressions in the runs:\n\n\tPower9 little endian, --with-cpu=power9\n\tPower10 little endian, --with-cpu=power10\n\tPower8 big endian, --with-cpu=power8 (both 32-bit & 64-bit tests)\n\n2022-03-29   Michael Meissner  <meissner@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/vsx.md (vsx_extract_<mode>): Allow destination to\n\tbe any VSX register.", "tree": {"sha": "100b9525b8becb2aa68fbb723b25645439b0f6c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/100b9525b8becb2aa68fbb723b25645439b0f6c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f9ccc4a5788fc6afbb4fb2d56ad20dde28f0de5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f9ccc4a5788fc6afbb4fb2d56ad20dde28f0de5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f9ccc4a5788fc6afbb4fb2d56ad20dde28f0de5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f9ccc4a5788fc6afbb4fb2d56ad20dde28f0de5/comments", "author": null, "committer": null, "parents": [{"sha": "b243ad1afb7f06ef4ab7649600d900b09b9c6b52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b243ad1afb7f06ef4ab7649600d900b09b9c6b52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b243ad1afb7f06ef4ab7649600d900b09b9c6b52"}], "stats": {"total": 9, "additions": 3, "deletions": 6}, "files": [{"sha": "1b75538f42f96c5bfd880b46a9ce19b86b49e3f2", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9ccc4a5788fc6afbb4fb2d56ad20dde28f0de5/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9ccc4a5788fc6afbb4fb2d56ad20dde28f0de5/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=9f9ccc4a5788fc6afbb4fb2d56ad20dde28f0de5", "patch": "@@ -3397,15 +3397,12 @@\n ;; Optimize cases were we can do a simple or direct move.\n ;; Or see if we can avoid doing the move at all\n \n-;; There are some unresolved problems with reload that show up if an Altivec\n-;; register was picked.  Limit the scalar value to FPRs for now.\n-\n (define_insn \"vsx_extract_<mode>\"\n-  [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=d, d,  wr, wr\")\n+  [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=wa, wa, wr, wr\")\n \t(vec_select:<VS_scalar>\n-\t (match_operand:VSX_D 1 \"gpc_reg_operand\"      \"wa, wa, wa, wa\")\n+\t (match_operand:VSX_D 1 \"gpc_reg_operand\"       \"wa, wa, wa, wa\")\n \t (parallel\n-\t  [(match_operand:QI 2 \"const_0_to_1_operand\"  \"wD, n,  wD, n\")])))]\n+\t  [(match_operand:QI 2 \"const_0_to_1_operand\"   \"wD, n,  wD, n\")])))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n {\n   int element = INTVAL (operands[2]);"}]}