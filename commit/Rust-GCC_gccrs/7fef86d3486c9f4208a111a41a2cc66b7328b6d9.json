{"sha": "7fef86d3486c9f4208a111a41a2cc66b7328b6d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZlZjg2ZDM0ODZjOWY0MjA4YTExMWE0MWEyY2M2NmI3MzI4YjZkOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-07-31T11:16:00Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-07-31T11:16:00Z"}, "message": "Recover GOTO predictor.\n\n2017-07-31  Jan Hubicka <hubicka@ucw.cz>\n\t    Martin Liska  <mliska@suse.cz>\n\n\t* c-typeck.c (c_finish_goto_label): Build gimple predict\n\tstament.\n2017-07-31  Jan Hubicka <hubicka@ucw.cz>\n\t    Martin Liska  <mliska@suse.cz>\n\n\t* predict.def: Remove old comment and adjust probability.\n\t* gimplify.c (should_warn_for_implicit_fallthrough): Ignore\n\tPREDICT statements.\n2017-07-31  Jan Hubicka <hubicka@ucw.cz>\n\t    Martin Liska  <mliska@suse.cz>\n\n\t* gcc.dg/predict-15.c: New test.\n\t* gcc.dg/tree-ssa/vrp24.c: Update scanned pattern.\n2017-07-31  Jan Hubicka <hubicka@ucw.cz>\n\t    Martin Liska  <mliska@suse.cz>\n\n\t* pt.c (tsubst_copy): Copy PREDICT_EXPR.\n\t* semantics.c (finish_goto_stmt): Build gimple predict\n\tstament.\n\t* constexpr.c (potential_constant_expression_1): Handle\n\tPREDICT_EXPR.\n\nCo-Authored-By: Martin Liska <mliska@suse.cz>\n\nFrom-SVN: r250737", "tree": {"sha": "12d92f7ad89fe26c757222ae443640e4eaeeaa00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12d92f7ad89fe26c757222ae443640e4eaeeaa00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fef86d3486c9f4208a111a41a2cc66b7328b6d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fef86d3486c9f4208a111a41a2cc66b7328b6d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fef86d3486c9f4208a111a41a2cc66b7328b6d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/comments", "author": null, "committer": null, "parents": [{"sha": "2ec580be156c39a87ea39c2f475565bd36d82dcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec580be156c39a87ea39c2f475565bd36d82dcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ec580be156c39a87ea39c2f475565bd36d82dcc"}], "stats": {"total": 79, "additions": 64, "deletions": 15}, "files": [{"sha": "58d1942c8f7c098dfa8db771ac3dd97498dca2c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fef86d3486c9f4208a111a41a2cc66b7328b6d9", "patch": "@@ -1,3 +1,10 @@\n+2017-07-31  Jan Hubicka <hubicka@ucw.cz>\n+\t    Martin Liska  <mliska@suse.cz>\n+\n+\t* predict.def: Remove old comment and adjust probability.\n+\t* gimplify.c (should_warn_for_implicit_fallthrough): Ignore\n+\tPREDICT statements.\n+\n 2017-07-31  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/25967"}, {"sha": "aff4866d91583241740bccd5ceb740a13b00f18b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=7fef86d3486c9f4208a111a41a2cc66b7328b6d9", "patch": "@@ -1,3 +1,9 @@\n+2017-07-31  Jan Hubicka <hubicka@ucw.cz>\n+\t    Martin Liska  <mliska@suse.cz>\n+\n+\t* c-typeck.c (c_finish_goto_label): Build gimple predict\n+\tstament.\n+\n 2017-07-31  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitize/81530"}, {"sha": "71d0135018619bafa0b118dd22dcc24ca6c223da", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=7fef86d3486c9f4208a111a41a2cc66b7328b6d9", "patch": "@@ -9824,6 +9824,7 @@ c_finish_goto_label (location_t loc, tree label)\n     return NULL_TREE;\n   TREE_USED (decl) = 1;\n   {\n+    add_stmt (build_predict_expr (PRED_GOTO, NOT_TAKEN));\n     tree t = build1 (GOTO_EXPR, void_type_node, decl);\n     SET_EXPR_LOCATION (t, loc);\n     return add_stmt (t);"}, {"sha": "76d1de09c4dd708f99ff871e91f87251b1da33d9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7fef86d3486c9f4208a111a41a2cc66b7328b6d9", "patch": "@@ -1,3 +1,12 @@\n+2017-07-31  Jan Hubicka <hubicka@ucw.cz>\n+\t    Martin Liska  <mliska@suse.cz>\n+\n+\t* pt.c (tsubst_copy): Copy PREDICT_EXPR.\n+\t* semantics.c (finish_goto_stmt): Build gimple predict\n+\tstament.\n+\t* constexpr.c (potential_constant_expression_1): Handle\n+\tPREDICT_EXPR.\n+\n 2017-07-31  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitize/81530"}, {"sha": "29ba2c3dac2c0ab57e2be40289b75272f840cc04", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=7fef86d3486c9f4208a111a41a2cc66b7328b6d9", "patch": "@@ -5782,6 +5782,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \n     case CLEANUP_STMT:\n     case EMPTY_CLASS_EXPR:\n+    case PREDICT_EXPR:\n       return false;\n \n     case GOTO_EXPR:"}, {"sha": "ee4e6b113341387ee882c629ef8e51b7c73779f1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7fef86d3486c9f4208a111a41a2cc66b7328b6d9", "patch": "@@ -15105,6 +15105,8 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       return tsubst_binary_left_fold (t, args, complain, in_decl);\n     case BINARY_RIGHT_FOLD_EXPR:\n       return tsubst_binary_right_fold (t, args, complain, in_decl);\n+    case PREDICT_EXPR:\n+      return t;\n \n     default:\n       /* We shouldn't get here, but keep going if !flag_checking.  */"}, {"sha": "f56d00fd8f388f21dc30789db04c09bfc94770d6", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=7fef86d3486c9f4208a111a41a2cc66b7328b6d9", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"omp-general.h\"\n #include \"convert.h\"\n #include \"gomp-constants.h\"\n+#include \"predict.h\"\n \n /* There routines provide a modular interface to perform many parsing\n    operations.  They may therefore be used during actual parsing, or\n@@ -630,6 +631,7 @@ finish_goto_stmt (tree destination)\n \n   check_goto (destination);\n \n+  add_stmt (build_predict_expr (PRED_GOTO, NOT_TAKEN));\n   return add_stmt (build_stmt (input_location, GOTO_EXPR, destination));\n }\n "}, {"sha": "76a08c67061e85c1004d6852e21470ebe63e41e1", "filename": "gcc/gimplify.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=7fef86d3486c9f4208a111a41a2cc66b7328b6d9", "patch": "@@ -2037,7 +2037,9 @@ should_warn_for_implicit_fallthrough (gimple_stmt_iterator *gsi_p, tree label)\n   gsi = *gsi_p;\n \n   /* Skip all immediately following labels.  */\n-  while (!gsi_end_p (gsi) && gimple_code (gsi_stmt (gsi)) == GIMPLE_LABEL)\n+  while (!gsi_end_p (gsi)\n+\t && (gimple_code (gsi_stmt (gsi)) == GIMPLE_LABEL\n+\t     || gimple_code (gsi_stmt (gsi)) == GIMPLE_PREDICT))\n     gsi_next (&gsi);\n \n   /* { ... something; default:; } */"}, {"sha": "326c39ae4c9eb63c28ebf8ee78fee37a61535c99", "filename": "gcc/predict.def", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=7fef86d3486c9f4208a111a41a2cc66b7328b6d9", "patch": "@@ -132,9 +132,8 @@ DEF_PREDICTOR (PRED_RECURSIVE_CALL, \"recursive call\", HITRATE (75), 0)\n DEF_PREDICTOR (PRED_TREE_EARLY_RETURN, \"early return (on trees)\", HITRATE (66),\n \t       0)\n \n-/* Branch containing goto is probably not taken.\n-   FIXME: Currently not used.  */\n-DEF_PREDICTOR (PRED_GOTO, \"goto\", HITRATE (70), 0)\n+/* Branch containing goto is probably not taken.  */\n+DEF_PREDICTOR (PRED_GOTO, \"goto\", HITRATE (66), 0)\n \n /* Branch ending with return constant is probably not taken.  */\n DEF_PREDICTOR (PRED_CONST_RETURN, \"const return\", HITRATE (69), 0)"}, {"sha": "7243fdf337208a456b1512db7f10a3144b91e6c8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7fef86d3486c9f4208a111a41a2cc66b7328b6d9", "patch": "@@ -1,3 +1,9 @@\n+2017-07-31  Jan Hubicka <hubicka@ucw.cz>\n+\t    Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/predict-15.c: New test.\n+\t* gcc.dg/tree-ssa/vrp24.c: Update scanned pattern.\n+\n 2017-07-31  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/25967"}, {"sha": "2a8c3ea85971ffcfb11796775c695b94271685c1", "filename": "gcc/testsuite/gcc.dg/predict-15.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-15.c?ref=7fef86d3486c9f4208a111a41a2cc66b7328b6d9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate\" } */\n+\n+int main(int argc, char **argv)\n+{\n+  if (argc == 123)\n+    goto exit;\n+  else\n+    {\n+      return 0;\n+    }\n+\n+exit:\n+  return 1;\n+}\n+\n+/* { dg-final { scan-tree-dump \"goto heuristics of edge\" \"profile_estimate\"} } */"}, {"sha": "17526113d4b65b1a3d87a2ebab1b476ed64179fa", "filename": "gcc/testsuite/gcc.dg/tree-ssa/attr-hotcold-2.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fattr-hotcold-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fattr-hotcold-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fattr-hotcold-2.c?ref=7fef86d3486c9f4208a111a41a2cc66b7328b6d9", "patch": "@@ -1,20 +1,19 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-profile_estimate-blocks-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate\" } */\n \n-void g(void);\n-void h(void);\n+int v1, v2;\n void f(int x, int y)\n {\n   if (x) goto A;\n   if (y) goto B;\n   return;\n \n  A: __attribute__((cold))\n-  g();\n+  v1 = x;\n   return;\n \n  B: __attribute__((hot))\n-  h();\n+  v2 = y;\n   return;\n }\n "}, {"sha": "ed49e25f87a9ccf49a6e420821263509c80d3df5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp24.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fef86d3486c9f4208a111a41a2cc66b7328b6d9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp24.c?ref=7fef86d3486c9f4208a111a41a2cc66b7328b6d9", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-forwprop -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fno-tree-forwprop -fdump-tree-vrp1-details -fdump-tree-optimized\" } */\n \n \n struct rtx_def;\n@@ -86,10 +86,8 @@ sss (rtx insn, int code1, int code2, int code3)\n \n /* The first n_sets > 0 test can be simplfiied into n_sets == 1 since\n    n_sets can only have the values [0, 1] as it's the result of a\n-   boolean operation.\n+   boolean operation.  */\n \n-   The second n_sets > 0 test can also be simplified into n_sets == 1\n-   as the only way to reach the tests is when n_sets <= 1 and the only\n-   value which satisfies both conditions is n_sets == 1.  */\n-/* { dg-final { scan-tree-dump-times \"Simplified relational\" 2 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 4 \"optimized\" } } */\n "}]}