{"sha": "000020907344fccdd11036944874d80d137557df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAwMDIwOTA3MzQ0ZmNjZGQxMTAzNjk0NDg3NGQ4MGQxMzc1NTdkZg==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2008-12-30T13:35:00Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2008-12-30T13:35:00Z"}, "message": "re PR middle-end/38584 (Inline heuristics run even at -O0)\n\n\tPR middle-end/38584\n\t* ipa-inline.c (compute_inline_parameters): When not optimizing,\n\tdon't compute the inline parameters, just set them to 0 instead.\n\nFrom-SVN: r142963", "tree": {"sha": "da7cb72359c2680553de44bb4782d32a3d02f9c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da7cb72359c2680553de44bb4782d32a3d02f9c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/000020907344fccdd11036944874d80d137557df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000020907344fccdd11036944874d80d137557df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/000020907344fccdd11036944874d80d137557df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000020907344fccdd11036944874d80d137557df/comments", "author": null, "committer": null, "parents": [{"sha": "0251119434aa47b54143b96a89b66e7206205765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0251119434aa47b54143b96a89b66e7206205765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0251119434aa47b54143b96a89b66e7206205765"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "87d22b44efaa07b3e18883044cb645f2e0189d11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000020907344fccdd11036944874d80d137557df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000020907344fccdd11036944874d80d137557df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=000020907344fccdd11036944874d80d137557df", "patch": "@@ -1,3 +1,9 @@\n+2008-12-30  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR middle-end/38584\n+\t* ipa-inline.c (compute_inline_parameters): When not optimizing,\n+\tdon't compute the inline parameters, just set them to 0 instead.\n+\n 2008-12-30  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR tree-optimization/38572"}, {"sha": "0656d798bc21c03936ac87b87b31f110e736a8c9", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000020907344fccdd11036944874d80d137557df/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000020907344fccdd11036944874d80d137557df/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=000020907344fccdd11036944874d80d137557df", "patch": "@@ -1592,18 +1592,30 @@ struct simple_ipa_opt_pass pass_ipa_early_inline =\n unsigned int\n compute_inline_parameters (struct cgraph_node *node)\n {\n+  HOST_WIDE_INT self_stack_size;\n+\n   gcc_assert (!node->global.inlined_to);\n-  inline_summary (node)->estimated_self_stack_size\n-    = estimated_stack_frame_size ();\n-  node->global.estimated_stack_size\n-    = inline_summary (node)->estimated_self_stack_size;\n+\n+  /* Estimate the stack size for the function.  But not at -O0\n+     because estimated_stack_frame_size is a quadratic problem.  */\n+  self_stack_size = optimize ? estimated_stack_frame_size () : 0;\n+  inline_summary (node)->estimated_self_stack_size = self_stack_size;\n+  node->global.estimated_stack_size = self_stack_size;\n   node->global.stack_frame_offset = 0;\n+\n+  /* Can this function be inlined at all?  */\n   node->local.inlinable = tree_inlinable_function_p (current_function_decl);\n+\n+  /* Estimate the number of instructions for this function.\n+     ??? At -O0 we don't use this information except for the dumps, and\n+\t even then only for always_inline functions.  But disabling this\n+\t causes ICEs in the inline heuristics...  */\n   inline_summary (node)->self_insns\n       = estimate_num_insns_fn (current_function_decl, &eni_inlining_weights);\n   if (node->local.inlinable && !node->local.disregard_inline_limits)\n     node->local.disregard_inline_limits\n       = DECL_DISREGARD_INLINE_LIMITS (current_function_decl);\n+\n   /* Inlining characteristics are maintained by the cgraph_mark_inline.  */\n   node->global.insns = inline_summary (node)->self_insns;\n   return 0;"}]}