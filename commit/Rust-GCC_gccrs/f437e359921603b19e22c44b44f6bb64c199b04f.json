{"sha": "f437e359921603b19e22c44b44f6bb64c199b04f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQzN2UzNTk5MjE2MDNiMTllMjJjNDRiNDRmNmJiNjRjMTk5YjA0Zg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2004-05-15T17:50:09Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2004-05-15T17:50:09Z"}, "message": "CharIndexedReader.java: Removed.\n\n       * gnu/regexp/CharIndexedReader.java: Removed.\n       * gnu/regexp/REFilterReader.java: Likewise.\n       * gnu/regexp/RETokenLookAhead.java: Likewise.\n       * Makefile.am (ordinary_java_source_files): Remove above classes.\n       * Makefile.in: Regenerated.\n\nFrom-SVN: r81890", "tree": {"sha": "75ae3d60d495fd40291164e2bc465b372a5f2946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75ae3d60d495fd40291164e2bc465b372a5f2946"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f437e359921603b19e22c44b44f6bb64c199b04f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f437e359921603b19e22c44b44f6bb64c199b04f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f437e359921603b19e22c44b44f6bb64c199b04f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f437e359921603b19e22c44b44f6bb64c199b04f/comments", "author": null, "committer": null, "parents": [{"sha": "dc4917425181e331c20a26437d46c79c3cb9885b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4917425181e331c20a26437d46c79c3cb9885b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc4917425181e331c20a26437d46c79c3cb9885b"}], "stats": {"total": 355, "additions": 14, "deletions": 341}, "files": [{"sha": "0d9c144e57ef51a4e83ef634b900aee87da4214a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f437e359921603b19e22c44b44f6bb64c199b04f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f437e359921603b19e22c44b44f6bb64c199b04f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f437e359921603b19e22c44b44f6bb64c199b04f", "patch": "@@ -1,3 +1,11 @@\n+2004-05-15  Mark Wielaard  <mark@klomp.org>\n+\n+\t* gnu/regexp/CharIndexedReader.java: Removed.\n+\t* gnu/regexp/REFilterReader.java: Likewise.\n+\t* gnu/regexp/RETokenLookAhead.java: Likewise.\n+\t* Makefile.am (ordinary_java_source_files): Remove above classes.\n+\t* Makefile.in: Regenerated.\n+\n 2004-05-14  Tom Tromey  <tromey@redhat.com>\n \n \t* gnu/awt/xlib/XGraphics.java (drawImage): Use `XOffScreenImage',"}, {"sha": "b7383d1989ccecbc0e0b7f66c9b52338c1c4ac07", "filename": "libjava/Makefile.am", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f437e359921603b19e22c44b44f6bb64c199b04f/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f437e359921603b19e22c44b44f6bb64c199b04f/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=f437e359921603b19e22c44b44f6bb64c199b04f", "patch": "@@ -2421,13 +2421,11 @@ gnu/java/nio/charset/UTF_8.java \\\n gnu/regexp/CharIndexed.java \\\n gnu/regexp/CharIndexedCharArray.java \\\n gnu/regexp/CharIndexedInputStream.java \\\n-gnu/regexp/CharIndexedReader.java \\\n gnu/regexp/CharIndexedString.java \\\n gnu/regexp/CharIndexedStringBuffer.java \\\n gnu/regexp/RE.java \\\n gnu/regexp/REException.java \\\n gnu/regexp/REFilterInputStream.java \\\n-gnu/regexp/REFilterReader.java \\\n gnu/regexp/REMatch.java \\\n gnu/regexp/REMatchEnumeration.java \\\n gnu/regexp/RESyntax.java \\\n@@ -2437,7 +2435,6 @@ gnu/regexp/RETokenBackRef.java \\\n gnu/regexp/RETokenChar.java \\\n gnu/regexp/RETokenEnd.java \\\n gnu/regexp/RETokenEndSub.java \\\n-gnu/regexp/RETokenLookAhead.java \\\n gnu/regexp/RETokenOneOf.java \\\n gnu/regexp/RETokenPOSIX.java \\\n gnu/regexp/RETokenRange.java \\"}, {"sha": "2330a68822ff2c8a939a8a796a118cbe19c6c34f", "filename": "libjava/Makefile.in", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f437e359921603b19e22c44b44f6bb64c199b04f/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f437e359921603b19e22c44b44f6bb64c199b04f/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=f437e359921603b19e22c44b44f6bb64c199b04f", "patch": "@@ -2093,13 +2093,11 @@ gnu/java/nio/charset/UTF_8.java \\\n gnu/regexp/CharIndexed.java \\\n gnu/regexp/CharIndexedCharArray.java \\\n gnu/regexp/CharIndexedInputStream.java \\\n-gnu/regexp/CharIndexedReader.java \\\n gnu/regexp/CharIndexedString.java \\\n gnu/regexp/CharIndexedStringBuffer.java \\\n gnu/regexp/RE.java \\\n gnu/regexp/REException.java \\\n gnu/regexp/REFilterInputStream.java \\\n-gnu/regexp/REFilterReader.java \\\n gnu/regexp/REMatch.java \\\n gnu/regexp/REMatchEnumeration.java \\\n gnu/regexp/RESyntax.java \\\n@@ -2109,7 +2107,6 @@ gnu/regexp/RETokenBackRef.java \\\n gnu/regexp/RETokenChar.java \\\n gnu/regexp/RETokenEnd.java \\\n gnu/regexp/RETokenEndSub.java \\\n-gnu/regexp/RETokenLookAhead.java \\\n gnu/regexp/RETokenOneOf.java \\\n gnu/regexp/RETokenPOSIX.java \\\n gnu/regexp/RETokenRange.java \\\n@@ -3018,7 +3015,7 @@ libgcj-test.spec.in libgcj.pc.in libgcj.spec.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n DIST_SUBDIRS =  @DIRLTDL@ testsuite gcj include @DIRLTDL@ gcj include\n DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n@@ -3444,16 +3441,14 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/javax/rmi/PortableServer.P .deps/gnu/regexp/CharIndexed.P \\\n .deps/gnu/regexp/CharIndexedCharArray.P \\\n .deps/gnu/regexp/CharIndexedInputStream.P \\\n-.deps/gnu/regexp/CharIndexedReader.P \\\n .deps/gnu/regexp/CharIndexedString.P \\\n .deps/gnu/regexp/CharIndexedStringBuffer.P .deps/gnu/regexp/RE.P \\\n .deps/gnu/regexp/REException.P .deps/gnu/regexp/REFilterInputStream.P \\\n-.deps/gnu/regexp/REFilterReader.P .deps/gnu/regexp/REMatch.P \\\n-.deps/gnu/regexp/REMatchEnumeration.P .deps/gnu/regexp/RESyntax.P \\\n-.deps/gnu/regexp/REToken.P .deps/gnu/regexp/RETokenAny.P \\\n-.deps/gnu/regexp/RETokenBackRef.P .deps/gnu/regexp/RETokenChar.P \\\n-.deps/gnu/regexp/RETokenEnd.P .deps/gnu/regexp/RETokenEndSub.P \\\n-.deps/gnu/regexp/RETokenLookAhead.P .deps/gnu/regexp/RETokenOneOf.P \\\n+.deps/gnu/regexp/REMatch.P .deps/gnu/regexp/REMatchEnumeration.P \\\n+.deps/gnu/regexp/RESyntax.P .deps/gnu/regexp/REToken.P \\\n+.deps/gnu/regexp/RETokenAny.P .deps/gnu/regexp/RETokenBackRef.P \\\n+.deps/gnu/regexp/RETokenChar.P .deps/gnu/regexp/RETokenEnd.P \\\n+.deps/gnu/regexp/RETokenEndSub.P .deps/gnu/regexp/RETokenOneOf.P \\\n .deps/gnu/regexp/RETokenPOSIX.P .deps/gnu/regexp/RETokenRange.P \\\n .deps/gnu/regexp/RETokenRepeated.P .deps/gnu/regexp/RETokenStart.P \\\n .deps/gnu/regexp/RETokenWordBoundary.P .deps/gnu/regexp/UncheckedRE.P \\"}, {"sha": "aa0fa5a313d96ae84fd34252f5e16980149b7704", "filename": "libjava/gnu/regexp/CharIndexedReader.java", "status": "removed", "additions": 0, "deletions": 142, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4917425181e331c20a26437d46c79c3cb9885b/libjava%2Fgnu%2Fregexp%2FCharIndexedReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4917425181e331c20a26437d46c79c3cb9885b/libjava%2Fgnu%2Fregexp%2FCharIndexedReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fregexp%2FCharIndexedReader.java?ref=dc4917425181e331c20a26437d46c79c3cb9885b", "patch": "@@ -1,142 +0,0 @@\n-/*\n- *  gnu/regexp/CharIndexedReader.java\n- *  Copyright (C) 2001 Lee Sau Dan\n- *  Based on gnu.regexp.CharIndexedInputStream by Wes Biggs\n- *\n- *  This library is free software; you can redistribute it and/or modify\n- *  it under the terms of the GNU Lesser General Public License as published\n- *  by the Free Software Foundation; either version 2.1 of the License, or\n- *  (at your option) any later version.\n- *\n- *  This library is distributed in the hope that it will be useful,\n- *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- *  GNU Lesser General Public License for more details.\n- *\n- *  You should have received a copy of the GNU Lesser General Public License\n- *  along with this program; if not, write to the Free Software\n- *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n- */\n-\n-package gnu.regexp;\n-import java.io.Reader;\n-import java.io.BufferedReader;\n-import java.io.IOException;\n-\n-// TODO: move(x) shouldn't rely on calling next() x times\n-\n-class CharIndexedReader implements CharIndexed {\n-    private static final int BUFFER_INCREMENT = 1024;\n-    private static final int UNKNOWN = Integer.MAX_VALUE; // value for end\n-    \n-    private final BufferedReader br;\n-    // so that we don't try to reset() right away\n-    private int index = -1;\n-\n-    private int bufsize = BUFFER_INCREMENT;\n-\n-    private int end = UNKNOWN;\n-\n-    private char cached = OUT_OF_BOUNDS;\n-\n-    // Big enough for a \\r\\n pair\n-    // lookBehind[0] = most recent\n-    // lookBehind[1] = second most recent\n-    private char[] lookBehind = new char[] { OUT_OF_BOUNDS, OUT_OF_BOUNDS }; \n-  \n-    CharIndexedReader(Reader reader, int index) {\n-\tif (reader instanceof BufferedReader) {\n-\t    br = (BufferedReader) reader; \n-\t} else {\n-\t    br = new BufferedReader(reader,BUFFER_INCREMENT);\n-\t}\n-\tnext();\n-\tif (index > 0) move(index);\n-    }\n-    \n-    private boolean next() {\n-\tlookBehind[1] = lookBehind[0];\n-\tlookBehind[0] = cached;\n-\n-\tif (end == 1) {\n-\t    cached = OUT_OF_BOUNDS;\n-\t    return false;\n-\t}\n-\tend--; // closer to end\n-\t\n-\ttry {\n-\t    if (index != -1) {\n-\t\tbr.reset();\n-\t    }\n-\t    int i = br.read();\n-\t    br.mark(bufsize);\n-\t    if (i == -1) {\n-\t\tend = 1;\n-\t\tcached = OUT_OF_BOUNDS;\n-\t\treturn false;\n-\t    }\n-\n-\t    // convert the byte read into a char\n-\t    cached = (char) i;\n-\t    index = 1;\n-\t} catch (IOException e) { \n-\t    e.printStackTrace();\n-\t    cached = OUT_OF_BOUNDS;\n-\t    return false; \n-\t}\n-\treturn true;\n-    }\n-    \n-    public char charAt(int index) {\n-\tif (index == 0) {\n-\t    return cached;\n-\t} else if (index >= end) {\n-\t    return OUT_OF_BOUNDS;\n-\t} else if (index >= bufsize) {\n-\t    // Allocate more space in the buffer.\n-\t    try {\n-\t\twhile (bufsize <= index) bufsize += BUFFER_INCREMENT;\n-\t\tbr.reset();\n-\t\tbr.mark(bufsize);\n-\t\tbr.skip(index-1);\n-\t    } catch (IOException e) { }\n-\t} else if (this.index != index) {\n-\t    try {\n-\t\tbr.reset();\n-\t\tbr.skip(index-1);\n-\t    } catch (IOException e) { }\n-\t} else if (index == -1) {\n-\t    return lookBehind[0];\n-\t} else if (index == -2) {\n-\t    return lookBehind[1];\n-\t} else if (index < -2) {\n-\t    return OUT_OF_BOUNDS;\n-\t}\n-\n-\tchar ch = OUT_OF_BOUNDS;\n-\t\n-\ttry {\n-\t    int i = br.read();\n-\t    this.index = index+1; // this.index is index of next pos relative to charAt(0)\n-\t    if (i == -1) {\n-\t\t// set flag that next should fail next time?\n-\t\tend = index;\n-\t\treturn ch;\n-\t    }\n-\t    ch = (char) i;\n-\t} catch (IOException ie) { }\n-\t\n-\treturn ch;\n-    }\n-    \n-    public boolean move(int index) {\n-\t// move read position [index] clicks from 'charAt(0)'\n-\tboolean retval = true;\n-\twhile (retval && (index-- > 0)) retval = next();\n-\treturn retval;\n-    }\n-    \n-    public boolean isValid() {\n-\treturn (cached != OUT_OF_BOUNDS);\n-    }\n-}"}, {"sha": "449efcc9b1c10beb4063d39a5779f790362f7259", "filename": "libjava/gnu/regexp/REFilterReader.java", "status": "removed", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4917425181e331c20a26437d46c79c3cb9885b/libjava%2Fgnu%2Fregexp%2FREFilterReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4917425181e331c20a26437d46c79c3cb9885b/libjava%2Fgnu%2Fregexp%2FREFilterReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fregexp%2FREFilterReader.java?ref=dc4917425181e331c20a26437d46c79c3cb9885b", "patch": "@@ -1,117 +0,0 @@\n-/*\n- *  gnu/regexp/REFilterReader.java\n- *  Copyright (C) 2001 Lee Sau Dan\n- *  Based on gnu.regexp.REFilterInputStream by Wes Biggs\n- *\n- *  This library is free software; you can redistribute it and/or modify\n- *  it under the terms of the GNU Lesser General Public License as published\n- *  by the Free Software Foundation; either version 2.1 of the License, or\n- *  (at your option) any later version.\n- *\n- *  This library is distributed in the hope that it will be useful,\n- *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- *  GNU Lesser General Public License for more details.\n- *\n- *  You should have received a copy of the GNU Lesser General Public License\n- *  along with this program; if not, write to the Free Software\n- *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n- */\n-\n-package gnu.regexp;\n-import java.io.FilterReader;\n-import java.io.Reader;\n-\n-/**\n- * Replaces instances of a given RE with replacement text. \n- *\n- * @author <A HREF=\"http://www.csis.hku.hk/~sdlee/\">Lee Sau Dan</A>\n- * @since gnu.regexp 1.1.0\n- */\n-\n-public class REFilterReader extends FilterReader {\n-\n-  private RE expr;\n-  private String replace;\n-  private String buffer;\n-  private int bufpos;\n-  private int offset;\n-  private CharIndexedReader stream;\n-\n-  /**\n-   * Creates an REFilterReader.  When reading from this stream,\n-   * occurrences of patterns matching the supplied regular expression\n-   * will be replaced with the supplied replacement text (the\n-   * metacharacters $0 through $9 may be used to refer to the full\n-   * match or subexpression matches.\n-   *\n-   * @param stream The Reader to be filtered.\n-   * @param expr The regular expression to search for.\n-   * @param replace The text pattern to replace matches with.  \n-   */\n-  public REFilterReader(Reader stream, RE expr, String replace) {\n-    super(stream);\n-    this.stream = new CharIndexedReader(stream,0);\n-    this.expr = expr;\n-    this.replace = replace;\n-  }\n-\n-  /**\n-   * Reads the next character from the stream per the general contract of\n-   * Reader.read().  Returns -1 on error or end of stream.\n-   */\n-  public int read() {\n-    // If we have buffered replace data, use it.\n-    if ((buffer != null) && (bufpos < buffer.length())) {\n-      return (int) buffer.charAt(bufpos++);\n-    }\n-\n-    // check if input is at a valid position\n-    if (!stream.isValid()) return -1;\n-\n-    REMatch mymatch = new REMatch(expr.getNumSubs(),offset,0);\n-    if (expr.match(stream,mymatch)) {\n-      mymatch.end[0] = mymatch.index;\n-      mymatch.finish(stream);\n-      stream.move(mymatch.toString().length());\n-      offset += mymatch.toString().length();\n-      buffer = mymatch.substituteInto(replace);\n-      bufpos = 1;\n-\n-      if (buffer.length() > 0) {\n-\t  return buffer.charAt(0);\n-      }\n-    }\n-    char ch = stream.charAt(0);\n-    if (ch == CharIndexed.OUT_OF_BOUNDS) return -1;\n-    stream.move(1);\n-    offset++;\n-    return ch;\n-  }\n-\n-  /** \n-   * Returns false.  REFilterReader does not support mark() and\n-   * reset() methods. \n-   */\n-  public boolean markSupported() {\n-    return false;\n-  }\n-\n-  /** Reads from the stream into the provided array. */\n-  public int read(char[] b, int off, int len) {\n-    int i;\n-    int ok = 0;\n-    while (len-- > 0) {\n-      i = read();\n-      if (i == -1) return (ok == 0) ? -1 : ok;\n-      b[off++] = (char) i;\n-      ok++;\n-    }\n-    return ok;\n-  }\n-\n-  /** Reads from the stream into the provided array. */\n-  public int read(char[] b) {\n-    return read(b,0,b.length);\n-  }\n-}"}, {"sha": "74a9bfe2465452951c27a6c1d4d98279edff15ba", "filename": "libjava/gnu/regexp/RETokenLookAhead.java", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4917425181e331c20a26437d46c79c3cb9885b/libjava%2Fgnu%2Fregexp%2FRETokenLookAhead.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4917425181e331c20a26437d46c79c3cb9885b/libjava%2Fgnu%2Fregexp%2FRETokenLookAhead.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fregexp%2FRETokenLookAhead.java?ref=dc4917425181e331c20a26437d46c79c3cb9885b", "patch": "@@ -1,68 +0,0 @@\n-/*\n- *  gnu/regexp/RETokenOneOf.java\n- *  Copyright (C) 1998-2001 Wes Biggs\n- *\n- *  This library is free software; you can redistribute it and/or modify\n- *  it under the terms of the GNU Lesser General Public License as published\n- *  by the Free Software Foundation; either version 2.1 of the License, or\n- *  (at your option) any later version.\n- *\n- *  This library is distributed in the hope that it will be useful,\n- *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- *  GNU Lesser General Public License for more details.\n- *\n- *  You should have received a copy of the GNU Lesser General Public License\n- *  along with this program; if not, write to the Free Software\n- *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n- */\n-package gnu.regexp;\n-\n-/**\n- * @since gnu.regexp 1.1.3\n- * @author Shashank Bapat\n- */\n-final class RETokenLookAhead extends REToken\n-{\n-  REToken re;\n-  boolean negative;\n-\n-  RETokenLookAhead(REToken re, boolean negative) throws REException {\n-    super(0);\n-    this.re = re;\n-    this.negative = negative;\n-  }\n-\n-  boolean match(CharIndexed input, REMatch mymatch)\n-  {\n-    REMatch trymatch = (REMatch)mymatch.clone();\n-    REMatch trymatch1 = (REMatch)mymatch.clone();\n-    REMatch newMatch = null;\n-    if (re.match(input, trymatch)) {\n-      if (negative) return false;\n-      if (next(input, trymatch1))\n-        newMatch = trymatch1;\n-    }\n-\n-    if (newMatch != null) {\n-      if (negative) return false;\n-      //else\n-      mymatch.assignFrom(newMatch);\n-      return true;\n-    }\n-    else { // no match\n-      if (negative)\n-        return next(input, mymatch);\n-      //else\n-      return false;\n-    }\n-  }\n-\n-    void dump(StringBuffer os) {\n-\tos.append(\"(?\");\n-\tos.append(negative ? '!' : '=');\n-\tre.dumpAll(os);\n-\tos.append(')');\n-    }\n-}\n-"}]}