{"sha": "1dbee8c9f90c562d20928c489412d4eca2e4b21a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRiZWU4YzlmOTBjNTYyZDIwOTI4YzQ4OTQxMmQ0ZWNhMmU0YjIxYQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2010-10-04T10:15:10Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2010-10-04T10:15:10Z"}, "message": "re PR tree-optimization/45572 (various ICEs with -finline-small-functions -findirect-inlining -finline-functions)\n\n2010-10-04  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/45572\n\t* ipa-prop.c (ipa_make_edge_direct_to_target): Call\n\tipa_check_create_node_params.\n\t* ipa-inline.c (add_new_edges_to_heap): Do not insert inlined edges.\n\n\t* testsuite/g++.dg/ipa/pr45572-1.C: New test.\n\t* testsuite/g++.dg/ipa/pr45572-2.C: Likewise.\n\nFrom-SVN: r164930", "tree": {"sha": "6e4513da8811502ddc1fda4c23a67e0fd29d9709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e4513da8811502ddc1fda4c23a67e0fd29d9709"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dbee8c9f90c562d20928c489412d4eca2e4b21a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dbee8c9f90c562d20928c489412d4eca2e4b21a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dbee8c9f90c562d20928c489412d4eca2e4b21a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dbee8c9f90c562d20928c489412d4eca2e4b21a/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eeb4dfdacf3a27faa5487d7cdc0aea3f0473a0bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb4dfdacf3a27faa5487d7cdc0aea3f0473a0bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeb4dfdacf3a27faa5487d7cdc0aea3f0473a0bd"}], "stats": {"total": 119, "additions": 118, "deletions": 1}, "files": [{"sha": "1a0a3f0275fcc2e8c3b21ad39f1a4c0e957bdd59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbee8c9f90c562d20928c489412d4eca2e4b21a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbee8c9f90c562d20928c489412d4eca2e4b21a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1dbee8c9f90c562d20928c489412d4eca2e4b21a", "patch": "@@ -1,3 +1,10 @@\n+2010-10-04  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/45572\n+\t* ipa-prop.c (ipa_make_edge_direct_to_target): Call\n+\tipa_check_create_node_params.\n+\t* ipa-inline.c (add_new_edges_to_heap): Do not insert inlined edges.\n+\n 2010-10-04  Yao Qi  <yao@codesourcery.com>\n \n \t* doc/passes.texi: Clean up."}, {"sha": "ca3823b53b3f96512dcc9ec179d18c66a71b9fae", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbee8c9f90c562d20928c489412d4eca2e4b21a/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbee8c9f90c562d20928c489412d4eca2e4b21a/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=1dbee8c9f90c562d20928c489412d4eca2e4b21a", "patch": "@@ -1031,6 +1031,7 @@ add_new_edges_to_heap (fibheap_t heap, VEC (cgraph_edge_p, heap) *new_edges)\n \n       gcc_assert (!edge->aux);\n       if (edge->callee->local.inlinable\n+\t  && edge->inline_failed\n \t  && cgraph_default_inline_p (edge->callee, &edge->inline_failed))\n         edge->aux = fibheap_insert (heap, cgraph_edge_badness (edge, false), edge);\n     }"}, {"sha": "9ffbb3f90a9b69e3dcfbd47c8d82c9af15a32baf", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbee8c9f90c562d20928c489412d4eca2e4b21a/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbee8c9f90c562d20928c489412d4eca2e4b21a/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=1dbee8c9f90c562d20928c489412d4eca2e4b21a", "patch": "@@ -1447,7 +1447,7 @@ ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target)\n   callee = cgraph_node (target);\n   if (!callee)\n     return NULL;\n-\n+  ipa_check_create_node_params ();\n   cgraph_make_edge_direct (ie, callee);\n   if (dump_file)\n     {"}, {"sha": "f64f53128bb0ab6b1617255a67d0da71ac345aab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbee8c9f90c562d20928c489412d4eca2e4b21a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbee8c9f90c562d20928c489412d4eca2e4b21a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1dbee8c9f90c562d20928c489412d4eca2e4b21a", "patch": "@@ -1,3 +1,9 @@\n+2010-10-04  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/45572\n+\t* g++.dg/ipa/pr45572-1.C: New test.\n+\t* g++.dg/ipa/pr45572-2.C: Likewise.\n+\n 2010-10-03  Ian Lance Taylor  <iant@google.com>\n \n \t* gcc.dg/anon-struct-11.c: New test."}, {"sha": "82f347052d5d51f4c90367aaafc7672fc1ee3bc4", "filename": "gcc/testsuite/g++.dg/ipa/pr45572-1.C", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbee8c9f90c562d20928c489412d4eca2e4b21a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr45572-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbee8c9f90c562d20928c489412d4eca2e4b21a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr45572-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr45572-1.C?ref=1dbee8c9f90c562d20928c489412d4eca2e4b21a", "patch": "@@ -0,0 +1,64 @@\n+// { dg-do compile }\n+// { dg-options \"-finline-small-functions -findirect-inlining -finline-functions -O\" }\n+\n+extern \"C\" {\n+typedef long unsigned int size_t;\n+typedef long int __ssize_t;\n+typedef struct _IO_FILE FILE;\n+typedef struct\n+{\n+} __mbstate_t;\n+extern __inline __attribute__ ((__gnu_inline__)) int\n+fgetc_unlocked (FILE *__fp)\n+{\n+}\n+extern __inline __attribute__ ((__gnu_inline__)) int\n+putc_unlocked (int __c, FILE *__stream)\n+{\n+}\n+extern __inline __attribute__ ((__gnu_inline__)) __ssize_t\n+getline (char **__lineptr, size_t *__n, FILE *__stream)\n+{\n+}\n+extern __inline __attribute__ ((__gnu_inline__)) int\n+ferror_unlocked (FILE *__stream) throw ()\n+{\n+}\n+}\n+typedef struct\n+{} __mpf_struct;\n+typedef __mpf_struct mpf_t[1];\n+typedef const __mpf_struct *mpf_srcptr;\n+typedef __mpf_struct *mpf_ptr;\n+extern \"C\" {\n+ void __gmpf_add (mpf_ptr, mpf_srcptr, mpf_srcptr);\n+}\n+class _knumber\n+{\n+ public:\n+  enum NumType {SpecialType, IntegerType, FractionType, FloatType};\n+  virtual NumType type(void) const = 0;\n+  virtual _knumber * add(_knumber const & arg2) const = 0;\n+  virtual operator long int(void) const = 0;\n+};\n+class _knumfloat : public _knumber\n+{\n+  _knumfloat(double num = 1.0)\n+  ;\n+  virtual NumType type(void) const ;\n+  virtual _knumber * add(_knumber const & arg2) const;\n+  virtual operator long int (void) const;\n+    mpf_t _mpf;\n+};\n+_knumber *_knumfloat::add(_knumber const & arg2) const\n+{\n+  if (arg2.type() == SpecialType)\n+    return arg2.add(*this);\n+{\n+    _knumfloat tmp_num(arg2);\n+    return tmp_num.add(*this);\n+  }\n+  _knumfloat * tmp_num = new _knumfloat();\n+  __gmpf_add(tmp_num->_mpf, _mpf,\n+   dynamic_cast<_knumfloat const &>(arg2)._mpf);\n+}"}, {"sha": "8b583d9c5d5cb24d4965350b9ffe8113d5356875", "filename": "gcc/testsuite/g++.dg/ipa/pr45572-2.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbee8c9f90c562d20928c489412d4eca2e4b21a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr45572-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbee8c9f90c562d20928c489412d4eca2e4b21a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr45572-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr45572-2.C?ref=1dbee8c9f90c562d20928c489412d4eca2e4b21a", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+// { dg-options \"-finline-small-functions -findirect-inlining -finline-function+\n+typedef struct\n+{} __mpf_struct;\n+typedef __mpf_struct mpf_t[1];\n+typedef const __mpf_struct *mpf_srcptr;\n+typedef __mpf_struct *mpf_ptr;\n+extern \"C\" {\n+ void __gmpf_add (mpf_ptr, mpf_srcptr, mpf_srcptr);\n+}\n+class _knumber\n+{\n+ public:\n+  enum NumType {SpecialType, IntegerType, FractionType, FloatType};\n+  virtual NumType type(void) const = 0;\n+  virtual _knumber * add(_knumber const & arg2) const = 0;\n+  virtual operator long int(void) const = 0;\n+};\n+class _knumfloat : public _knumber\n+{\n+  _knumfloat(double num = 1.0)\n+  ;\n+  virtual NumType type(void) const ;\n+  virtual _knumber * add(_knumber const & arg2) const;\n+  virtual operator long int (void) const;\n+    mpf_t _mpf;\n+};\n+_knumber *_knumfloat::add(_knumber const & arg2) const\n+{\n+  if (arg2.type() == SpecialType)\n+    return arg2.add(*this);\n+{\n+    _knumfloat tmp_num(arg2);\n+    return tmp_num.add(*this);\n+  }\n+  _knumfloat * tmp_num = new _knumfloat();\n+  __gmpf_add(tmp_num->_mpf, _mpf,\n+   dynamic_cast<_knumfloat const &>(arg2)._mpf);\n+}"}]}