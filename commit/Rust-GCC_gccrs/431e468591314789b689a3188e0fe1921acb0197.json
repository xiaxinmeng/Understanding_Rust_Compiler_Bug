{"sha": "431e468591314789b689a3188e0fe1921acb0197", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMxZTQ2ODU5MTMxNDc4OWI2ODlhMzE4OGUwZmUxOTIxYWNiMDE5Nw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-02-14T09:37:53Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-02-14T09:37:53Z"}, "message": "revert: [multiple changes]\n\n2013-02-14  Paul Thomas  <pault@gcc.gnu.org>\n            Tobias Burnus  <burnus@net-b.de>\n\n        PR testsuite/56138\n        * trans-decl.c (gfc_get_symbol_decl): Fix deferred-length\n        results for functions without extra result variable.\n\n        Revert:\n        2013-01-30  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/56138\n        * trans-decl.c (gfc_trans_deferred_vars): Fix deferred-length\n        results for functions without extra result variable.\n\n2013-02-14  Dominique d'Humieres  <dominiq@lps.ens.fr>\n            Tobias Burnus  <burnus@net-b.de>\n\n        PR testsuite/56138\n        * gfortran.dg/allocatable_function_7.f90: New.\n\nFrom-SVN: r196047", "tree": {"sha": "c42e3552e7f21df88d25d9919468595bddc98f5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c42e3552e7f21df88d25d9919468595bddc98f5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/431e468591314789b689a3188e0fe1921acb0197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/431e468591314789b689a3188e0fe1921acb0197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/431e468591314789b689a3188e0fe1921acb0197", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/431e468591314789b689a3188e0fe1921acb0197/comments", "author": null, "committer": null, "parents": [{"sha": "3b0c7324054b014b73bd7e1c82ed95ae306ef794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b0c7324054b014b73bd7e1c82ed95ae306ef794", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b0c7324054b014b73bd7e1c82ed95ae306ef794"}], "stats": {"total": 57, "additions": 54, "deletions": 3}, "files": [{"sha": "3e9e7914d063c12a2467cafc950a5359aa27090b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431e468591314789b689a3188e0fe1921acb0197/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431e468591314789b689a3188e0fe1921acb0197/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=431e468591314789b689a3188e0fe1921acb0197", "patch": "@@ -1,3 +1,17 @@\n+2013-02-14  Paul Thomas  <pault@gcc.gnu.org>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR testsuite/56138\n+\t* trans-decl.c (gfc_get_symbol_decl): Fix deferred-length\n+\tresults for functions without extra result variable.\n+\n+\tRevert:\n+\t2013-01-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/56138\n+\t* trans-decl.c (gfc_trans_deferred_vars): Fix deferred-length\n+\tresults for functions without extra result variable.\n+\n 2013-02-12  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/46952"}, {"sha": "337d747520fa85bf77df5d24e997ae9fea60a48d", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431e468591314789b689a3188e0fe1921acb0197/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431e468591314789b689a3188e0fe1921acb0197/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=431e468591314789b689a3188e0fe1921acb0197", "patch": "@@ -1205,6 +1205,7 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n   tree attributes;\n   int byref;\n   bool intrinsic_array_parameter = false;\n+  bool fun_or_res;\n \n   gcc_assert (sym->attr.referenced\n \t      || sym->attr.flavor == FL_PROCEDURE\n@@ -1244,7 +1245,9 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n       length = gfc_create_string_length (sym);\n     }\n \n-  if ((sym->attr.dummy && ! sym->attr.function) || (sym->attr.result && byref))\n+  fun_or_res = byref && (sym->attr.result\n+\t\t\t || (sym->attr.function && sym->ts.deferred));\n+  if ((sym->attr.dummy && ! sym->attr.function) || fun_or_res)\n     {\n       /* Return via extra parameter.  */\n       if (sym->attr.result && byref\n@@ -1270,7 +1273,7 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \t     (sym->ts.u.cl->passed_length == sym->ts.u.cl->backend_decl))\n \t    sym->ts.u.cl->backend_decl = NULL_TREE;\n \n-\t  if (sym->ts.deferred && sym->attr.result\n+\t  if (sym->ts.deferred && fun_or_res\n \t\t&& sym->ts.u.cl->passed_length == NULL\n \t\t&& sym->ts.u.cl->backend_decl)\n \t    {\n@@ -3775,7 +3778,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t\t\t\t        null_pointer_node));\n \t\t}\n \n-\t      if ((sym->attr.dummy || sym->attr.result || sym->result == sym)\n+\t      if ((sym->attr.dummy ||sym->attr.result)\n \t\t    && sym->ts.type == BT_CHARACTER\n \t\t    && sym->ts.deferred)\n \t\t{"}, {"sha": "8da89182c6c8c56514ccec517b79b27dec6bf2df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431e468591314789b689a3188e0fe1921acb0197/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431e468591314789b689a3188e0fe1921acb0197/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=431e468591314789b689a3188e0fe1921acb0197", "patch": "@@ -1,3 +1,9 @@\n+2013-02-14  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR testsuite/56138\n+\t* gfortran.dg/allocatable_function_7.f90: New.\n+\n 2013-02-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/asan/dejagnu-gtest.h: Add multiple inclusion guards."}, {"sha": "755584ca1b660fc1b64123f2d1692c78c2cf5918", "filename": "gcc/testsuite/gfortran.dg/allocatable_function_7.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431e468591314789b689a3188e0fe1921acb0197/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431e468591314789b689a3188e0fe1921acb0197/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_7.f90?ref=431e468591314789b689a3188e0fe1921acb0197", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+!\n+! PR fortran/56138\n+!\n+! Contributed by Dominique d'Humieres and John Chludzinski,\n+! using the code of John Reid\n+!\n+implicit none\n+interface\n+PURE FUNCTION s_to_c(string)\n+  CHARACTER(LEN=*),INTENT(IN)   :: string\n+  CHARACTER(LEN=:),ALLOCATABLE :: s_to_c\n+ENDFUNCTION s_to_c\n+end interface\n+CHARACTER(LEN=:),ALLOCATABLE :: str \n+if (s_to_c(\"ABCdef\") /= \"ABCdef\" .or. len(s_to_c(\"ABCdef\")) /= 6) call abort()\n+str = s_to_c(\"ABCdef\")\n+if (str /= \"ABCdef\" .or. len(str) /= 6) call abort()\n+str(1:3) = s_to_c(\"123\")\n+if (str /= \"123def\" .or. len(str) /= 6) call abort()\n+\n+end\n+\n+PURE FUNCTION s_to_c(string) \n+  CHARACTER(LEN=*),INTENT(IN)   :: string \n+  CHARACTER(LEN=:),ALLOCATABLE :: s_to_c \n+  s_to_c = string\n+END FUNCTION s_to_c "}]}