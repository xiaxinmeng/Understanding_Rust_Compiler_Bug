{"sha": "ef06769781a76eaa0de6fb500bebb8473e549f7e", "node_id": "C_kwDOANBUbNoAKGVmMDY3Njk3ODFhNzZlYWEwZGU2ZmI1MDBiZWJiODQ3M2U1NDlmN2U", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-17T15:14:01Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-18T08:08:07Z"}, "message": "path-id: Add location info on path identifier", "tree": {"sha": "3665f6165d76dc61daeb881327700f82308e4754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3665f6165d76dc61daeb881327700f82308e4754"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef06769781a76eaa0de6fb500bebb8473e549f7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef06769781a76eaa0de6fb500bebb8473e549f7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef06769781a76eaa0de6fb500bebb8473e549f7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef06769781a76eaa0de6fb500bebb8473e549f7e/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e524a7f5a5a7abd7aaf3891ea4eca6f0f84fd36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e524a7f5a5a7abd7aaf3891ea4eca6f0f84fd36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e524a7f5a5a7abd7aaf3891ea4eca6f0f84fd36"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "cff3b09d994d360e43ad08745d6fad56dee69947", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef06769781a76eaa0de6fb500bebb8473e549f7e/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef06769781a76eaa0de6fb500bebb8473e549f7e/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=ef06769781a76eaa0de6fb500bebb8473e549f7e", "patch": "@@ -33,13 +33,12 @@ namespace AST {\n class PathIdentSegment\n {\n   std::string segment_name;\n-\n-  // TODO: should this have location info stored?\n+  Location locus;\n \n   // only allow identifiers, \"super\", \"self\", \"Self\", \"crate\", or \"$crate\"\n public:\n-  PathIdentSegment (std::string segment_name)\n-    : segment_name (std::move (segment_name))\n+  PathIdentSegment (std::string segment_name, Location locus)\n+    : segment_name (std::move (segment_name)), locus (locus)\n   {}\n \n   /* TODO: insert check in constructor for this? Or is this a semantic error\n@@ -49,7 +48,10 @@ class PathIdentSegment\n    * not entirely sure */\n \n   // Creates an error PathIdentSegment.\n-  static PathIdentSegment create_error () { return PathIdentSegment (\"\"); }\n+  static PathIdentSegment create_error ()\n+  {\n+    return PathIdentSegment (\"\", Location ());\n+  }\n \n   // Returns whether PathIdentSegment is in an error state.\n   bool is_error () const { return segment_name.empty (); }\n@@ -221,7 +223,7 @@ class PathExprSegment\n   bool has_generic_args () const { return generic_args.has_generic_args (); }\n \n   // Constructor for segment (from IdentSegment and GenericArgs)\n-  PathExprSegment (PathIdentSegment segment_name, Location locus = Location (),\n+  PathExprSegment (PathIdentSegment segment_name, Location locus,\n \t\t   GenericArgs generic_args = GenericArgs::create_empty ())\n     : segment_name (std::move (segment_name)),\n       generic_args (std::move (generic_args)), locus (locus),\n@@ -237,7 +239,7 @@ class PathExprSegment\n \t\t   = std::vector<std::unique_ptr<Type> > (),\n \t\t   std::vector<GenericArgsBinding> binding_args\n \t\t   = std::vector<GenericArgsBinding> ())\n-    : segment_name (PathIdentSegment (std::move (segment_name))),\n+    : segment_name (PathIdentSegment (std::move (segment_name), locus)),\n       generic_args (GenericArgs (std::move (lifetime_args),\n \t\t\t\t std::move (type_args),\n \t\t\t\t std::move (binding_args))),\n@@ -250,7 +252,7 @@ class PathExprSegment\n   // Creates an error-state path expression segment.\n   static PathExprSegment create_error ()\n   {\n-    return PathExprSegment (PathIdentSegment::create_error ());\n+    return PathExprSegment (PathIdentSegment::create_error (), Location ());\n   }\n \n   std::string as_string () const;\n@@ -440,7 +442,7 @@ class TypePathSegment\n \n   TypePathSegment (std::string segment_name,\n \t\t   bool has_separating_scope_resolution, Location locus)\n-    : ident_segment (PathIdentSegment (std::move (segment_name))),\n+    : ident_segment (PathIdentSegment (std::move (segment_name), locus)),\n       locus (locus),\n       has_separating_scope_resolution (has_separating_scope_resolution),\n       node_id (Analysis::Mappings::get ()->get_next_node_id ())"}, {"sha": "3ff122977fdc758dc69bb7757511d1723e5530ab", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef06769781a76eaa0de6fb500bebb8473e549f7e/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef06769781a76eaa0de6fb500bebb8473e549f7e/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=ef06769781a76eaa0de6fb500bebb8473e549f7e", "patch": "@@ -706,29 +706,29 @@ Parser<ManagedTokenSource>::parse_path_ident_segment ()\n     case IDENTIFIER:\n       lexer.skip_token ();\n \n-      return AST::PathIdentSegment (t->get_str ());\n+      return AST::PathIdentSegment (t->get_str (), t->get_locus ());\n     case SUPER:\n       lexer.skip_token ();\n \n-      return AST::PathIdentSegment (\"super\");\n+      return AST::PathIdentSegment (\"super\", t->get_locus ());\n     case SELF:\n       lexer.skip_token ();\n \n-      return AST::PathIdentSegment (\"self\");\n+      return AST::PathIdentSegment (\"self\", t->get_locus ());\n     case SELF_ALIAS:\n       lexer.skip_token ();\n \n-      return AST::PathIdentSegment (\"Self\");\n+      return AST::PathIdentSegment (\"Self\", t->get_locus ());\n     case CRATE:\n       lexer.skip_token ();\n \n-      return AST::PathIdentSegment (\"crate\");\n+      return AST::PathIdentSegment (\"crate\", t->get_locus ());\n     case DOLLAR_SIGN:\n       if (lexer.peek_token (1)->get_id () == CRATE)\n \t{\n \t  lexer.skip_token (1);\n \n-\t  return AST::PathIdentSegment (\"$crate\");\n+\t  return AST::PathIdentSegment (\"$crate\", t->get_locus ());\n \t}\n       gcc_fallthrough ();\n     default:\n@@ -14613,8 +14613,10 @@ Parser<ManagedTokenSource>::parse_path_in_expression_pratt (const_TokenPtr tok)\n \n       AST::GenericArgs generic_args = parse_path_generic_args ();\n \n-      initial_segment = AST::PathExprSegment (initial_str, tok->get_locus (),\n-\t\t\t\t\t      std::move (generic_args));\n+      initial_segment\n+\t= AST::PathExprSegment (AST::PathIdentSegment (initial_str,\n+\t\t\t\t\t\t       tok->get_locus ()),\n+\t\t\t\ttok->get_locus (), std::move (generic_args));\n     }\n   if (initial_segment.is_error ())\n     {"}, {"sha": "3fb8b41d053aacf5dba59f6a1099a7870ce19f44", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef06769781a76eaa0de6fb500bebb8473e549f7e/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef06769781a76eaa0de6fb500bebb8473e549f7e/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=ef06769781a76eaa0de6fb500bebb8473e549f7e", "patch": "@@ -26,7 +26,7 @@\n #define MKBUILTIN_TYPE(_X, _R, _TY)                                            \\\n   do                                                                           \\\n     {                                                                          \\\n-      AST::PathIdentSegment seg (_X);                                          \\\n+      AST::PathIdentSegment seg (_X, Linemap::predeclared_location ());        \\\n       auto typePath = ::std::unique_ptr<AST::TypePathSegment> (                \\\n \tnew AST::TypePathSegment (::std::move (seg), false,                    \\\n \t\t\t\t  Linemap::predeclared_location ()));          \\"}]}