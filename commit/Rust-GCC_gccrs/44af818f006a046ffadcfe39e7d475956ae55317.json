{"sha": "44af818f006a046ffadcfe39e7d475956ae55317", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRhZjgxOGYwMDZhMDQ2ZmZhZGNmZTM5ZTdkNDc1OTU2YWU1NTMxNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-16T10:26:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-16T10:26:05Z"}, "message": "Only use GCC-specific __is_same_as built-in conditionally\n\nClang doesn't support __is_same_as but provides __is_same instead.\nRestore the original implementation (pre r276891) when neither of those\nbuilt-ins is available.\n\n\t* include/bits/c++config (_GLIBCXX_BUILTIN_IS_SAME_AS): Define to\n\tone of __is_same_as or __is_same when available.\n\t* include/std/concepts (__detail::__same_as): Use std::is_same_v.\n\t* include/std/type_traits (is_same) [_GLIBCXX_BUILTIN_IS_SAME_AS]:\n\tUse new macro instead of __is_same_as.\n\t(is_same) [!_GLIBCXX_BUILTIN_IS_SAME_AS]: Restore partial\n\tspecialization.\n\t(is_same_v) [_GLIBCXX_BUILTIN_IS_SAME_AS]: Use new macro.\n\t(is_same_v) [!_GLIBCXX_BUILTIN_IS_SAME_AS]: Use std::is_same.\n\nFrom-SVN: r277058", "tree": {"sha": "cb601b79c1cdca52fd0dfccc8addf287e5b99c97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb601b79c1cdca52fd0dfccc8addf287e5b99c97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44af818f006a046ffadcfe39e7d475956ae55317", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44af818f006a046ffadcfe39e7d475956ae55317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44af818f006a046ffadcfe39e7d475956ae55317", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44af818f006a046ffadcfe39e7d475956ae55317/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf78ed91a445d188e4368adc30dd5c32d973ed6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf78ed91a445d188e4368adc30dd5c32d973ed6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf78ed91a445d188e4368adc30dd5c32d973ed6e"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "c95aa32120b4da6c3932c6fc88f434b47ce5d98c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44af818f006a046ffadcfe39e7d475956ae55317/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44af818f006a046ffadcfe39e7d475956ae55317/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=44af818f006a046ffadcfe39e7d475956ae55317", "patch": "@@ -1,3 +1,15 @@\n+2019-10-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/c++config (_GLIBCXX_BUILTIN_IS_SAME_AS): Define to\n+\tone of __is_same_as or __is_same when available.\n+\t* include/std/concepts (__detail::__same_as): Use std::is_same_v.\n+\t* include/std/type_traits (is_same) [_GLIBCXX_BUILTIN_IS_SAME_AS]:\n+\tUse new macro instead of __is_same_as.\n+\t(is_same) [!_GLIBCXX_BUILTIN_IS_SAME_AS]: Restore partial\n+\tspecialization.\n+\t(is_same_v) [_GLIBCXX_BUILTIN_IS_SAME_AS]: Use new macro.\n+\t(is_same_v) [!_GLIBCXX_BUILTIN_IS_SAME_AS]: Use std::is_same.\n+\n 2019-10-16  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* src/c++11/debug.cc (print_field): Replace constness_names <unknown>"}, {"sha": "32db60f39e529c549985750e1a98a162348030dc", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44af818f006a046ffadcfe39e7d475956ae55317/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44af818f006a046ffadcfe39e7d475956ae55317/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=44af818f006a046ffadcfe39e7d475956ae55317", "patch": "@@ -633,6 +633,7 @@ namespace std\n # define _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP 1\n # define _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE 1\n # define _GLIBCXX_HAVE_BUILTIN_LAUNDER 1\n+# define _GLIBCXX_BUILTIN_IS_SAME_AS(T, U) __is_same_as(T, U)\n # if __GNUC__ >= 9\n #  define _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED 1\n # endif\n@@ -650,6 +651,9 @@ namespace std\n # if __has_builtin(__builtin_is_constant_evaluated)\n #  define _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED 1\n # endif\n+# if ! __is_identifier(__is_same)\n+#  define _GLIBCXX_BUILTIN_IS_SAME_AS(T, U) __is_same(T, U)\n+# endif\n #endif // GCC\n \n // PSTL configuration"}, {"sha": "6d740eb663c7f8e471b4a1126af3e5e42a7db9c7", "filename": "libstdc++-v3/include/std/concepts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44af818f006a046ffadcfe39e7d475956ae55317/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44af818f006a046ffadcfe39e7d475956ae55317/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts?ref=44af818f006a046ffadcfe39e7d475956ae55317", "patch": "@@ -23,7 +23,7 @@\n // <http://www.gnu.org/licenses/>.\n \n /** @file include/concepts\n- *  This is __a Standard C++ Library header.\n+ *  This is a Standard C++ Library header.\n  *  @ingroup concepts\n  */\n \n@@ -54,7 +54,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   namespace __detail\n   {\n     template<typename _Tp, typename _Up>\n-      concept __same_as = __is_same_as(_Tp, _Up);\n+      concept __same_as = std::is_same_v<_Tp, _Up>;\n   } // namespace __detail\n \n   /// [concept.same], concept same_as"}, {"sha": "8e787a994c34b80303e319f4a7c078ea5c576d36", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44af818f006a046ffadcfe39e7d475956ae55317/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44af818f006a046ffadcfe39e7d475956ae55317/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=44af818f006a046ffadcfe39e7d475956ae55317", "patch": "@@ -1390,9 +1390,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_same\n   template<typename _Tp, typename _Up>\n     struct is_same\n-    : public integral_constant<bool, __is_same_as(_Tp, _Up)>\n+#ifdef _GLIBCXX_BUILTIN_IS_SAME_AS\n+    : public integral_constant<bool, _GLIBCXX_BUILTIN_IS_SAME_AS(_Tp, _Up)>\n+#else\n+    : public false_type\n+#endif\n     { };\n \n+#ifndef _GLIBCXX_BUILTIN_IS_SAME_AS\n+  template<typename _Tp>\n+    struct is_same<_Tp, _Tp>\n+    : public true_type\n+    { };\n+#endif\n+\n   /// is_base_of\n   template<typename _Base, typename _Derived>\n     struct is_base_of\n@@ -3154,8 +3165,13 @@ template <typename _Tp>\n   inline constexpr size_t rank_v = rank<_Tp>::value;\n template <typename _Tp, unsigned _Idx = 0>\n   inline constexpr size_t extent_v = extent<_Tp, _Idx>::value;\n+#ifdef _GLIBCXX_BUILTIN_IS_SAME_AS\n template <typename _Tp, typename _Up>\n-  inline constexpr bool is_same_v = __is_same_as(_Tp, _Up);\n+  inline constexpr bool is_same_v = _GLIBCXX_BUILTIN_IS_SAME_AS(_Tp, _Up);\n+#else\n+template <typename _Tp, typename _Up>\n+  inline constexpr bool is_same_v = std::is_same<_Tp, _Up>::value;\n+#endif\n template <typename _Base, typename _Derived>\n   inline constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;\n template <typename _From, typename _To>"}]}