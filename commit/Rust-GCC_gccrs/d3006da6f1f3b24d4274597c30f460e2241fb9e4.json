{"sha": "d3006da6f1f3b24d4274597c30f460e2241fb9e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMwMDZkYTZmMWYzYjI0ZDQyNzQ1OTdjMzBmNDYwZTIyNDFmYjllNA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-11-01T10:15:51Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-11-01T10:15:51Z"}, "message": "[Patch 6/7 AArch64] Deprecate *_BY_PIECES_P, move to hookized version\n\ngcc/\n\n\t* config/aarch64/aarch64.c\n\t(aarch64_use_by_pieces_infrastructre_p): New.\n\t(TARGET_USE_BY_PIECES_INFRASTRUCTURE): Likewise.\n\t* config/aarch64/aarch64.h (STORE_BY_PIECES_P): Delete.\n\nFrom-SVN: r217003", "tree": {"sha": "222d1e0c46ddc5fe41eab58e96ead468198415cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/222d1e0c46ddc5fe41eab58e96ead468198415cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3006da6f1f3b24d4274597c30f460e2241fb9e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3006da6f1f3b24d4274597c30f460e2241fb9e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3006da6f1f3b24d4274597c30f460e2241fb9e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3006da6f1f3b24d4274597c30f460e2241fb9e4/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a10ce561035bc1e1ca234dcb233f6bcdb32bfbc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10ce561035bc1e1ca234dcb233f6bcdb32bfbc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a10ce561035bc1e1ca234dcb233f6bcdb32bfbc0"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "99150b4f934c4b40cac4bbe7a465603e8e840799", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3006da6f1f3b24d4274597c30f460e2241fb9e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3006da6f1f3b24d4274597c30f460e2241fb9e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3006da6f1f3b24d4274597c30f460e2241fb9e4", "patch": "@@ -1,3 +1,10 @@\n+2014-11-01  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64.c\n+\t(aarch64_use_by_pieces_infrastructre_p): New.\n+\t(TARGET_USE_BY_PIECES_INFRASTRUCTURE): Likewise.\n+\t* config/aarch64/aarch64.h (STORE_BY_PIECES_P): Delete.\n+\n 2014-11-01  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/mips/mips.h (MOVE_BY_PIECES_P): Remove."}, {"sha": "9aeac7c2f052a78a05d9cc2882b45a7809673eac", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3006da6f1f3b24d4274597c30f460e2241fb9e4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3006da6f1f3b24d4274597c30f460e2241fb9e4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d3006da6f1f3b24d4274597c30f460e2241fb9e4", "patch": "@@ -10001,6 +10001,22 @@ aarch64_asan_shadow_offset (void)\n   return (HOST_WIDE_INT_1 << 36);\n }\n \n+static bool\n+aarch64_use_by_pieces_infrastructure_p (unsigned int size,\n+\t\t\t\t\tunsigned int align,\n+\t\t\t\t\tenum by_pieces_operation op,\n+\t\t\t\t\tbool speed_p)\n+{\n+  /* STORE_BY_PIECES can be used when copying a constant string, but\n+     in that case each 64-bit chunk takes 5 insns instead of 2 (LDR/STR).\n+     For now we always fail this and let the move_by_pieces code copy\n+     the string from read-only memory.  */\n+  if (op == STORE_BY_PIECES)\n+    return false;\n+\n+  return default_use_by_pieces_infrastructure_p (size, align, op, speed_p);\n+}\n+\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST aarch64_address_cost\n \n@@ -10253,6 +10269,10 @@ aarch64_asan_shadow_offset (void)\n #undef TARGET_LEGITIMIZE_ADDRESS\n #define TARGET_LEGITIMIZE_ADDRESS aarch64_legitimize_address\n \n+#undef TARGET_USE_BY_PIECES_INFRASTRUCTURE_P\n+#define TARGET_USE_BY_PIECES_INFRASTRUCTURE_P \\\n+  aarch64_use_by_pieces_infrastructure_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-aarch64.h\""}, {"sha": "e22163e62af23c80a9bc54a6c7b80812e14de623", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3006da6f1f3b24d4274597c30f460e2241fb9e4/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3006da6f1f3b24d4274597c30f460e2241fb9e4/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=d3006da6f1f3b24d4274597c30f460e2241fb9e4", "patch": "@@ -723,12 +723,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n #define SET_RATIO(speed) \\\n   ((speed) ? 15 : AARCH64_CALL_RATIO - 2)\n \n-/* STORE_BY_PIECES_P can be used when copying a constant string, but\n-   in that case each 64-bit chunk takes 5 insns instead of 2 (LDR/STR).\n-   For now we always fail this and let the move_by_pieces code copy\n-   the string from read-only memory.  */\n-#define STORE_BY_PIECES_P(SIZE, ALIGN) 0\n-\n /* Disable auto-increment in move_by_pieces et al.  Use of auto-increment is\n    rarely a good idea in straight-line code since it adds an extra address\n    dependency between each instruction.  Better to use incrementing offsets.  */"}]}