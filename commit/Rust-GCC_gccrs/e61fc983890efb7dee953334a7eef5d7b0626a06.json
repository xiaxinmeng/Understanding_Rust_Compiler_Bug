{"sha": "e61fc983890efb7dee953334a7eef5d7b0626a06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYxZmM5ODM4OTBlZmI3ZGVlOTUzMzM0YTdlZWY1ZDdiMDYyNmEwNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T14:31:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T14:31:35Z"}, "message": "[multiple changes]\n\n2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Expand_Call, Inlined_Subprogram): Do not suppress\n\tdebugging information for a call to a predefined unit, if the\n\tcall comes from source and the unit is in the Ada hierarchy.\n\n2014-11-20  Bob Duff  <duff@adacore.com>\n\n\t* s-mudido.ads: Update signature of Create and Get_Last_CPU. Add\n\tCPU_Set, another Create, and Get_CPU_Set.\n\t* s-mudido.adb: Corresponding changes to the spec. New\n\toperations just raise an exception.  Also minor cleanup: use\n\traise_expressions.\n\t* s-mudido-affinity.adb: Implementations of new operations from\n\t* s-mudido.ads, for the platforms that actually support processor\n\taffinity. The new Create (which takes a set) now does all the\n\twork; the old Create (which takes a range) now just calls the\n\tnew one. Change error messages to reflect the fact that it's an\n\tarbitrary set, not just a range.\n\nFrom-SVN: r217859", "tree": {"sha": "cc4c1d1f0abeb68fe853111eff8af6f122244a4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc4c1d1f0abeb68fe853111eff8af6f122244a4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e61fc983890efb7dee953334a7eef5d7b0626a06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e61fc983890efb7dee953334a7eef5d7b0626a06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e61fc983890efb7dee953334a7eef5d7b0626a06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e61fc983890efb7dee953334a7eef5d7b0626a06/comments", "author": null, "committer": null, "parents": [{"sha": "d18b1548fa1bfeab77e60483102b8584080a6ec0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d18b1548fa1bfeab77e60483102b8584080a6ec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d18b1548fa1bfeab77e60483102b8584080a6ec0"}], "stats": {"total": 190, "additions": 126, "deletions": 64}, "files": [{"sha": "d25786bc7c78a6a41aa67a5f2febe489a000e855", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61fc983890efb7dee953334a7eef5d7b0626a06/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61fc983890efb7dee953334a7eef5d7b0626a06/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e61fc983890efb7dee953334a7eef5d7b0626a06", "patch": "@@ -1,3 +1,23 @@\n+2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call, Inlined_Subprogram): Do not suppress\n+\tdebugging information for a call to a predefined unit, if the\n+\tcall comes from source and the unit is in the Ada hierarchy.\n+\n+2014-11-20  Bob Duff  <duff@adacore.com>\n+\n+\t* s-mudido.ads: Update signature of Create and Get_Last_CPU. Add\n+\tCPU_Set, another Create, and Get_CPU_Set.\n+\t* s-mudido.adb: Corresponding changes to the spec. New\n+\toperations just raise an exception.  Also minor cleanup: use\n+\traise_expressions.\n+\t* s-mudido-affinity.adb: Implementations of new operations from\n+\t* s-mudido.ads, for the platforms that actually support processor\n+\taffinity. The new Create (which takes a set) now does all the\n+\twork; the old Create (which takes a range) now just calls the\n+\tnew one. Change error messages to reflect the fact that it's an\n+\tarbitrary set, not just a range.\n+\n 2014-11-20  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_attr.adb: Minor reformatting."}, {"sha": "c16fc495c154ca2144f389427f7bdf60da16ed94", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61fc983890efb7dee953334a7eef5d7b0626a06/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61fc983890efb7dee953334a7eef5d7b0626a06/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=e61fc983890efb7dee953334a7eef5d7b0626a06", "patch": "@@ -3720,7 +3720,17 @@ package body Exp_Ch6 is\n                  (Unit_File_Name (Get_Source_Unit (Sloc (Subp))))\n               and then In_Extended_Main_Source_Unit (N)\n             then\n-               Set_Needs_Debug_Info (Subp, False);\n+               --  We make an exception for calls to the Ada hierarchy if call\n+               --  comes from source, because some user applications need the\n+               --  debugging information for such calls.\n+\n+               if Comes_From_Source (Call_Node)\n+                 and then Name_Buffer (1 .. 2) = \"a-\"\n+               then\n+                  null;\n+               else\n+                  Set_Needs_Debug_Info (Subp, False);\n+               end if;\n             end if;\n \n          --  Front end expansion of simple functions returning unconstrained"}, {"sha": "475d245539c93807d524e8dd7f4176e945211cff", "filename": "gcc/ada/s-mudido-affinity.adb", "status": "modified", "additions": 64, "deletions": 56, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61fc983890efb7dee953334a7eef5d7b0626a06/gcc%2Fada%2Fs-mudido-affinity.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61fc983890efb7dee953334a7eef5d7b0626a06/gcc%2Fada%2Fs-mudido-affinity.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mudido-affinity.adb?ref=e61fc983890efb7dee953334a7eef5d7b0626a06", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---            Copyright (C) 2011, Free Software Foundation, Inc.            --\n+--          Copyright (C) 2011-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -77,7 +77,7 @@ package body System.Multiprocessors.Dispatching_Domains is\n    is\n       Target : constant ST.Task_Id := Convert_Ids (T);\n \n-      use type System.Tasking.Dispatching_Domain_Access;\n+      use type ST.Dispatching_Domain_Access;\n \n    begin\n       --  The exception Dispatching_Domain_Error is propagated if T is already\n@@ -114,73 +114,75 @@ package body System.Multiprocessors.Dispatching_Domains is\n    -- Create --\n    ------------\n \n-   function Create (First, Last : CPU) return Dispatching_Domain is\n-      use type System.Tasking.Dispatching_Domain;\n-      use type System.Tasking.Dispatching_Domain_Access;\n-      use type System.Tasking.Array_Allocated_Tasks;\n-      use type System.Tasking.Task_Id;\n-\n-      Valid_System_Domain : constant Boolean :=\n-        (First > CPU'First\n-          and then\n-            not (System_Dispatching_Domain (CPU'First .. First - 1) =\n-                                         (CPU'First .. First - 1 => False)))\n-                  or else (Last < Number_Of_CPUs\n-                            and then not\n-                              (System_Dispatching_Domain\n-                                (Last + 1 .. Number_Of_CPUs) =\n-                                  (Last + 1 .. Number_Of_CPUs => False)));\n-      --  Constant that indicates whether there would exist a non-empty system\n-      --  dispatching domain after the creation of this dispatching domain.\n+   function Create (First : CPU; Last : CPU_Range) return Dispatching_Domain is\n+   begin\n+      return Create ((First .. Last => True));\n+   end Create;\n+\n+   function Create (Set : CPU_Set) return Dispatching_Domain is\n+      ST_DD : aliased constant ST.Dispatching_Domain\n+        := ST.Dispatching_Domain (Set);\n+      subtype Rng is CPU_Range range\n+        Get_First_CPU (ST_DD'Unrestricted_Access) ..\n+        Get_Last_CPU (ST_DD'Unrestricted_Access);\n+\n+      use type ST.Dispatching_Domain;\n+      use type ST.Dispatching_Domain_Access;\n+      use type ST.Array_Allocated_Tasks;\n+      use type ST.Task_Id;\n \n       T : ST.Task_Id;\n \n+      New_System_Domain : ST.Dispatching_Domain := ST.System_Domain.all;\n+\n       New_Domain : Dispatching_Domain;\n \n    begin\n-      --  The range of processors for creating a dispatching domain must\n+      --  The set of processors for creating a dispatching domain must\n       --  comply with the following restrictions:\n-      --    - Non-empty range\n-      --    - Not exceeding the range of available processors\n-      --    - Range from the System_Dispatching_Domain\n-      --    - Range does not contain a processor with a task assigned to it\n-      --    - The allocation cannot leave System_Dispatching_Domain empty\n-      --    - The calling task must be the environment task\n+      --    - Not exceeding the range of available processors.\n+      --    - CPUs from the System_Dispatching_Domain.\n+      --    - The calling task must be the environment task.\n       --    - The call to Create must take place before the call to the main\n-      --      subprogram\n+      --      subprogram.\n+      --    - Set does not contain a processor with a task assigned to it.\n+      --    - The allocation cannot leave System_Dispatching_Domain empty.\n \n-      if First > Last then\n-         raise Dispatching_Domain_Error with \"empty dispatching domain\";\n+      --  Note that a previous version of the language forbade empty domains.\n \n-      elsif Last > Number_Of_CPUs then\n+      if Rng'Last > Number_Of_CPUs then\n          raise Dispatching_Domain_Error with\n-           \"CPU range not supported by the target\";\n+           \"CPU not supported by the target\";\n \n-      elsif\n-        System_Dispatching_Domain (First .. Last) /= (First .. Last => True)\n-      then\n+      elsif (ST_DD and not ST.System_Domain (Rng)) /= (Rng => False) then\n          raise Dispatching_Domain_Error with\n-           \"CPU range not currently in System_Dispatching_Domain\";\n-\n-      elsif\n-        ST.Dispatching_Domain_Tasks (First .. Last) /= (First .. Last => 0)\n-      then\n-         raise Dispatching_Domain_Error with \"CPU range has tasks assigned\";\n-\n-      elsif not Valid_System_Domain then\n-         raise Dispatching_Domain_Error with\n-           \"would leave System_Dispatching_Domain empty\";\n+           \"CPU not currently in System_Dispatching_Domain\";\n \n       elsif Self /= Environment_Task then\n          raise Dispatching_Domain_Error with\n            \"only the environment task can create dispatching domains\";\n \n       elsif ST.Dispatching_Domains_Frozen then\n          raise Dispatching_Domain_Error with\n-           \"cannot create dispatching domain after call to main program\";\n+           \"cannot create dispatching domain after call to main procedure\";\n+      end if;\n+\n+      for Proc in Rng loop\n+         if ST_DD (Proc) and then\n+           ST.Dispatching_Domain_Tasks (Proc) /= 0\n+         then\n+            raise Dispatching_Domain_Error with \"CPU has tasks assigned\";\n+         end if;\n+      end loop;\n+\n+      New_System_Domain (Rng) := New_System_Domain (Rng) and not ST_DD;\n+\n+      if New_System_Domain = (New_System_Domain'Range => False) then\n+         raise Dispatching_Domain_Error with\n+           \"would leave System_Dispatching_Domain empty\";\n       end if;\n \n-      New_Domain := new ST.Dispatching_Domain'(First .. Last => True);\n+      New_Domain := new ST.Dispatching_Domain'(ST_DD);\n \n       --  At this point we need to fix the processors belonging to the system\n       --  domain, and change the affinity of every task that has been created\n@@ -190,7 +192,8 @@ package body System.Multiprocessors.Dispatching_Domains is\n \n       Lock_RTS;\n \n-      System_Dispatching_Domain (First .. Last) := (First .. Last => False);\n+      ST.System_Domain (Rng) := New_System_Domain (Rng);\n+      pragma Assert (ST.System_Domain.all = New_System_Domain);\n \n       --  Iterate the list of tasks belonging to the default system\n       --  dispatching domain and set the appropriate affinity.\n@@ -254,6 +257,15 @@ package body System.Multiprocessors.Dispatching_Domains is\n       return Convert_Ids (T).Common.Base_CPU;\n    end Get_CPU;\n \n+   -----------------\n+   -- Get_CPU_Set --\n+   -----------------\n+\n+   function Get_CPU_Set (Domain : Dispatching_Domain) return CPU_Set is\n+   begin\n+      return CPU_Set (Domain.all);\n+   end Get_CPU_Set;\n+\n    ----------------------------\n    -- Get_Dispatching_Domain --\n    ----------------------------\n@@ -278,26 +290,22 @@ package body System.Multiprocessors.Dispatching_Domains is\n          end if;\n       end loop;\n \n-      --  Should never reach the following return\n-\n-      return Domain'First;\n+      return CPU'First;\n    end Get_First_CPU;\n \n    ------------------\n    -- Get_Last_CPU --\n    ------------------\n \n-   function Get_Last_CPU (Domain : Dispatching_Domain) return CPU is\n+   function Get_Last_CPU (Domain : Dispatching_Domain) return CPU_Range is\n    begin\n       for Proc in reverse Domain'Range loop\n          if Domain (Proc) then\n             return Proc;\n          end if;\n       end loop;\n \n-      --  Should never reach the following return\n-\n-      return Domain'Last;\n+      return CPU_Range'First;\n    end Get_Last_CPU;\n \n    -------------\n@@ -340,7 +348,7 @@ package body System.Multiprocessors.Dispatching_Domains is\n    is\n       Source_CPU : constant CPU_Range := T.Common.Base_CPU;\n \n-      use type System.Tasking.Dispatching_Domain_Access;\n+      use type ST.Dispatching_Domain_Access;\n \n    begin\n       Write_Lock (T);"}, {"sha": "b982df4cf03ee0d5173e75d0ac6b99b5af0ba706", "filename": "gcc/ada/s-mudido.adb", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61fc983890efb7dee953334a7eef5d7b0626a06/gcc%2Fada%2Fs-mudido.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61fc983890efb7dee953334a7eef5d7b0626a06/gcc%2Fada%2Fs-mudido.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mudido.adb?ref=e61fc983890efb7dee953334a7eef5d7b0626a06", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---            Copyright (C) 2011, Free Software Foundation, Inc.            --\n+--          Copyright (C) 2011-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -65,11 +65,18 @@ package body System.Multiprocessors.Dispatching_Domains is\n    -- Create --\n    ------------\n \n-   function Create (First, Last : CPU) return Dispatching_Domain is\n+   function Create (First : CPU; Last : CPU_Range) return Dispatching_Domain is\n       pragma Unreferenced (First, Last);\n    begin\n-      raise Dispatching_Domain_Error with \"dispatching domains not supported\";\n-      return System_Dispatching_Domain;\n+      return raise Dispatching_Domain_Error with\n+        \"dispatching domains not supported\";\n+   end Create;\n+\n+   function Create (Set : CPU_Set) return Dispatching_Domain is\n+      pragma Unreferenced (Set);\n+   begin\n+      return raise Dispatching_Domain_Error with\n+        \"dispatching domains not supported\";\n    end Create;\n \n    -----------------------------\n@@ -107,6 +114,17 @@ package body System.Multiprocessors.Dispatching_Domains is\n       return Not_A_Specific_CPU;\n    end Get_CPU;\n \n+   -----------------\n+   -- Get_CPU_Set --\n+   -----------------\n+\n+   function Get_CPU_Set (Domain : Dispatching_Domain) return CPU_Set is\n+      pragma Unreferenced (Domain);\n+   begin\n+      return raise Dispatching_Domain_Error\n+        with \"dispatching domains not supported\";\n+   end Get_CPU_Set;\n+\n    ----------------------------\n    -- Get_Dispatching_Domain --\n    ----------------------------\n@@ -134,7 +152,7 @@ package body System.Multiprocessors.Dispatching_Domains is\n    -- Get_Last_CPU --\n    ------------------\n \n-   function Get_Last_CPU (Domain : Dispatching_Domain) return CPU is\n+   function Get_Last_CPU (Domain : Dispatching_Domain) return CPU_Range is\n       pragma Unreferenced (Domain);\n    begin\n       return Number_Of_CPUs;"}, {"sha": "06e48bd1b9c04d4a52e4f600fc9844cd30e67e90", "filename": "gcc/ada/s-mudido.ads", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61fc983890efb7dee953334a7eef5d7b0626a06/gcc%2Fada%2Fs-mudido.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61fc983890efb7dee953334a7eef5d7b0626a06/gcc%2Fada%2Fs-mudido.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mudido.ads?ref=e61fc983890efb7dee953334a7eef5d7b0626a06", "patch": "@@ -31,11 +31,17 @@ package System.Multiprocessors.Dispatching_Domains is\n \n    System_Dispatching_Domain : constant Dispatching_Domain;\n \n-   function Create (First, Last : CPU) return Dispatching_Domain;\n+   function Create (First : CPU; Last : CPU_Range) return Dispatching_Domain;\n \n    function Get_First_CPU (Domain : Dispatching_Domain) return CPU;\n \n-   function Get_Last_CPU (Domain : Dispatching_Domain) return CPU;\n+   function Get_Last_CPU (Domain : Dispatching_Domain) return CPU_Range;\n+\n+   type CPU_Set is array (CPU range <>) of Boolean;\n+\n+   function Create (Set : CPU_Set) return Dispatching_Domain;\n+\n+   function Get_CPU_Set (Domain : Dispatching_Domain) return CPU_Set;\n \n    function Get_Dispatching_Domain\n      (T : Ada.Task_Identification.Task_Id :="}]}