{"sha": "48f6efae63cc3e9a8c8ab48bcbe2677256ac55d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhmNmVmYWU2M2NjM2U5YThjOGFiNDhiY2JlMjY3NzI1NmFjNTVkNQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cambridge.redhat.com", "date": "2002-05-16T15:17:41Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2002-05-16T15:17:41Z"}, "message": "arm.c (arm_rtx_costs): Check for RTX being a SYMBOL_REF before calling CONSTANT_POOL_ADDRESS_P.\n\n    * config/arm/arm.c (arm_rtx_costs): Check for RTX being a\n    SYMBOL_REF before calling CONSTANT_POOL_ADDRESS_P.\n    (arm_adjust_cost): Check for RTX being a SYMBOL_REF before\n    calling CONSTANT_POOL_ADDRESS_P.\n    * config/arm/arm.h (TARGET_CPU_CPP_BUILTINS): Fix typo in code\n    to decide whether to define __arm__ or __thumb.\n        (THUMB_GO_IF_LEGITIMATE_ADDRESS): Check for RTX being a\n    SYMBOL_REF before calling CONSTANT_POOL_ADDRESS_P.\n\nFrom-SVN: r53519", "tree": {"sha": "f53fc58ecadaac2573de254c444e2a7377fd175d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f53fc58ecadaac2573de254c444e2a7377fd175d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48f6efae63cc3e9a8c8ab48bcbe2677256ac55d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f6efae63cc3e9a8c8ab48bcbe2677256ac55d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48f6efae63cc3e9a8c8ab48bcbe2677256ac55d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f6efae63cc3e9a8c8ab48bcbe2677256ac55d5/comments", "author": null, "committer": null, "parents": [{"sha": "e5ce1d6de713d82c5296916a10c9cb3b41ecd0a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5ce1d6de713d82c5296916a10c9cb3b41ecd0a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5ce1d6de713d82c5296916a10c9cb3b41ecd0a8"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "38654fbbbe0bdb257aff0a10bde7a875ecdd682f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f6efae63cc3e9a8c8ab48bcbe2677256ac55d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f6efae63cc3e9a8c8ab48bcbe2677256ac55d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48f6efae63cc3e9a8c8ab48bcbe2677256ac55d5", "patch": "@@ -1,3 +1,14 @@\n+2002-05-16  Nick Clifton  <nickc@cambridge.redhat.com>\n+\n+\t* config/arm/arm.c (arm_rtx_costs): Check for RTX being a\n+\tSYMBOL_REF before calling CONSTANT_POOL_ADDRESS_P.\n+\t(arm_adjust_cost): Check for RTX being a SYMBOL_REF before\n+\tcalling CONSTANT_POOL_ADDRESS_P.\n+\t* config/arm/arm.h (TARGET_CPU_CPP_BUILTINS): Fix typo in code\n+\tto decide whether to define __arm__ or __thumb.\n+        (THUMB_GO_IF_LEGITIMATE_ADDRESS): Check for RTX being a\n+\tSYMBOL_REF before calling CONSTANT_POOL_ADDRESS_P.\n+\n 2002-05-16  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* config/arc/arc.h (CPP_PREDEFINES): Remove."}, {"sha": "a1543f885334ec20e3d645a71ce5427d965efb9b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f6efae63cc3e9a8c8ab48bcbe2677256ac55d5/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f6efae63cc3e9a8c8ab48bcbe2677256ac55d5/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=48f6efae63cc3e9a8c8ab48bcbe2677256ac55d5", "patch": "@@ -2549,7 +2549,8 @@ arm_rtx_costs (x, code, outer)\n \t  /* Memory costs quite a lot for the first word, but subsequent words\n \t     load at the equivalent of a single insn each.  */\n \t  return (10 + 4 * ((GET_MODE_SIZE (mode) - 1) / UNITS_PER_WORD)\n-\t\t  + (CONSTANT_POOL_ADDRESS_P (x) ? 4 : 0));\n+\t\t  + ((GET_CODE (x) == SYMBOL_REF && CONSTANT_POOL_ADDRESS_P (x))\n+\t\t     ? 4 : 0));\n \n \tcase IF_THEN_ELSE:\n \t  /* XXX a guess. */\n@@ -2597,7 +2598,8 @@ arm_rtx_costs (x, code, outer)\n       /* Memory costs quite a lot for the first word, but subsequent words\n \t load at the equivalent of a single insn each.  */\n       return (10 + 4 * ((GET_MODE_SIZE (mode) - 1) / UNITS_PER_WORD)\n-\t      + (CONSTANT_POOL_ADDRESS_P (x) ? 4 : 0));\n+\t      + (GET_CODE (x) == SYMBOL_REF\n+\t\t && CONSTANT_POOL_ADDRESS_P (x) ? 4 : 0));\n \n     case DIV:\n     case MOD:\n@@ -2905,16 +2907,16 @@ arm_adjust_cost (insn, link, dep, cost)\n       && (d_pat = single_set (dep)) != NULL\n       && GET_CODE (SET_DEST (d_pat)) == MEM)\n     {\n+      rtx src_mem = XEXP (SET_SRC (i_pat), 0);\n       /* This is a load after a store, there is no conflict if the load reads\n \t from a cached area.  Assume that loads from the stack, and from the\n \t constant pool are cached, and that others will miss.  This is a \n \t hack.  */\n       \n-      if (CONSTANT_POOL_ADDRESS_P (XEXP (SET_SRC (i_pat), 0))\n-\t  || reg_mentioned_p (stack_pointer_rtx, XEXP (SET_SRC (i_pat), 0))\n-\t  || reg_mentioned_p (frame_pointer_rtx, XEXP (SET_SRC (i_pat), 0))\n-\t  || reg_mentioned_p (hard_frame_pointer_rtx, \n-\t\t\t      XEXP (SET_SRC (i_pat), 0)))\n+      if ((GET_CODE (src_mem) == SYMBOL_REF && CONSTANT_POOL_ADDRESS_P (src_mem))\n+\t  || reg_mentioned_p (stack_pointer_rtx, src_mem)\n+\t  || reg_mentioned_p (frame_pointer_rtx, src_mem)\n+\t  || reg_mentioned_p (hard_frame_pointer_rtx, src_mem))\n \treturn 1;\n     }\n "}, {"sha": "fcb2c1f4a6747ca6b1d30f20a57afb179135c036", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f6efae63cc3e9a8c8ab48bcbe2677256ac55d5/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f6efae63cc3e9a8c8ab48bcbe2677256ac55d5/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=48f6efae63cc3e9a8c8ab48bcbe2677256ac55d5", "patch": "@@ -30,7 +30,7 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_CPU_CPP_BUILTINS()\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-\tif (TARGET_THUMB)\t\t\t\t\\\n+\tif (TARGET_ARM)\t\t\t\t\t\\\n \t  builtin_define (\"__arm__\");\t\t\t\\\n \telse\t\t\t\t\t\t\\\n \t  builtin_define (\"__thumb__\");\t\t\t\\\n@@ -2134,7 +2134,8 @@ typedef struct\n     goto WIN;\t\t\t\t\t\t\t\t\\\n   /* This is PC relative data before MACHINE_DEPENDENT_REORG runs.  */\t\\\n   else if (GET_MODE_SIZE (MODE) >= 4 && CONSTANT_P (X)\t\t\t\\\n-\t   && CONSTANT_POOL_ADDRESS_P (X) && ! flag_pic)\t\t\\\n+\t   && GET_CODE (X) == SYMBOL_REF \t\t\t\t\\\n+           && CONSTANT_POOL_ADDRESS_P (X) && ! flag_pic)\t\t\\\n     goto WIN;\t\t\t\t\t\t\t\t\\\n   /* This is PC relative data after MACHINE_DEPENDENT_REORG runs.  */\t\\\n   else if (GET_MODE_SIZE (MODE) >= 4 && reload_completed\t\t\\"}]}