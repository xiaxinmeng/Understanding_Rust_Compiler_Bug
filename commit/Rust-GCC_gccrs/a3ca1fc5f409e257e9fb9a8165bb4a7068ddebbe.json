{"sha": "a3ca1fc5f409e257e9fb9a8165bb4a7068ddebbe", "node_id": "C_kwDOANBUbNoAKGEzY2ExZmM1ZjQwOWUyNTdlOWZiOWE4MTY1YmI0YTcwNjhkZGViYmU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-06-28T08:50:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-06-28T10:00:16Z"}, "message": "middle-end/106053 - fold_sign_changed_comparison and large bools\n\nThe following fixes a latent issue in the match.pd variant of\nfold_sign_changed_comparison which replaces an unsigned integer\ncomparison with a signed boolean comparison of the same precision\ndespite the fact that we treat BOOLEAN_TYPEs as only having two\nvalid values.\n\n2022-06-28  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/106053\n\t* match.pd ((T)a == (T)b): Avoid folding away sign\n\tchanges in a comparison if we'd truncate to a boolean.\n\n\t* gcc.target/i386/pr106053.c: New testcase.", "tree": {"sha": "2d7f9e922c8324e5cadc3f6e8bfdbd8e166d4ebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d7f9e922c8324e5cadc3f6e8bfdbd8e166d4ebd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3ca1fc5f409e257e9fb9a8165bb4a7068ddebbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ca1fc5f409e257e9fb9a8165bb4a7068ddebbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3ca1fc5f409e257e9fb9a8165bb4a7068ddebbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ca1fc5f409e257e9fb9a8165bb4a7068ddebbe/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6835baee7196eeb03f24f6e650c0d37cbb295647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6835baee7196eeb03f24f6e650c0d37cbb295647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6835baee7196eeb03f24f6e650c0d37cbb295647"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "c43c528424e3167307c0d5c25fc11ff79ff6d186", "filename": "gcc/match.pd", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ca1fc5f409e257e9fb9a8165bb4a7068ddebbe/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ca1fc5f409e257e9fb9a8165bb4a7068ddebbe/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=a3ca1fc5f409e257e9fb9a8165bb4a7068ddebbe", "patch": "@@ -5542,7 +5542,12 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t&& (TYPE_UNSIGNED (TREE_TYPE (@00)) == TYPE_UNSIGNED (TREE_TYPE (@0))\n \t    || cmp == NE_EXPR\n \t    || cmp == EQ_EXPR)\n-\t&& !POINTER_TYPE_P (TREE_TYPE (@00)))\n+\t&& !POINTER_TYPE_P (TREE_TYPE (@00))\n+\t/* (int)bool:32 != (int)uint is not the same as\n+\t   bool:32 != (bool:32)uint since boolean types only have two valid\n+\t   values independent of their precision.  */\n+\t&& (TREE_CODE (TREE_TYPE (@00)) != BOOLEAN_TYPE\n+\t    || TREE_CODE (TREE_TYPE (@10)) == BOOLEAN_TYPE))\n     /* ???  The special-casing of INTEGER_CST conversion was in the original\n        code and here to avoid a spurious overflow flag on the resulting\n        constant which fold_convert produces.  */"}, {"sha": "69baa3e5fd17a9f9dae4c4686b358b546fa64bc3", "filename": "gcc/testsuite/gcc.target/i386/pr106053.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ca1fc5f409e257e9fb9a8165bb4a7068ddebbe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106053.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ca1fc5f409e257e9fb9a8165bb4a7068ddebbe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106053.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106053.c?ref=a3ca1fc5f409e257e9fb9a8165bb4a7068ddebbe", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run { target lp64 } } */\n+/* { dg-options \"-O -fno-tree-fre -w -mno-avx\" } */\n+\n+typedef unsigned __attribute__((__vector_size__ (32))) v256u8;\n+typedef unsigned __attribute__((__vector_size__ (64))) v512u8;\n+typedef unsigned short u16;\n+typedef unsigned int u32;\n+typedef unsigned long long u64;\n+typedef unsigned long __attribute__((__vector_size__ (64))) v512u64;\n+typedef unsigned __int128 __attribute__((__vector_size__ (32))) v256u128;\n+unsigned u;\n+v512u64 foo0_v512u64_0;\n+\n+static inline v256u8\n+foo (u32 u32_0, u64 u64_0, v256u128 v256u128_0)\n+{\n+  int o = __builtin_add_overflow_p (u64_0, 0, 0);\n+  v512u64 v512u64_1 =\n+    foo0_v512u64_0 & (u32) __builtin_sub_overflow_p (0, o, 0);\n+  u64_0 |= u;\n+  v256u128 v256u128_2 = u64_0 < v256u128_0;\n+  v256u128 v256u128_3 = -v256u128_2 == u64_0 * u32_0;\n+  v256u8 v256u8_r = ((union {\n+                      v512u8 a; v256u8 b[2];\n+                      }) (v512u8) v512u64_1).b[0] + (v256u8) v256u128_3;\n+  return v256u8_r;\n+}\n+\n+int\n+main (void)\n+{\n+  v256u8 x = foo (3095179400, 23725760132, (v256u128) { 2, 2 });\n+  for (unsigned i = 0; i < sizeof (x) / sizeof (x[0]); i++)\n+    if (x[i])\n+      __builtin_abort ();\n+  return 0;\n+}"}]}