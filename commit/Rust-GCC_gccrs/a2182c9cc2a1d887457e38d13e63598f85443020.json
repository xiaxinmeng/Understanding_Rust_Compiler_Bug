{"sha": "a2182c9cc2a1d887457e38d13e63598f85443020", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIxODJjOWNjMmExZDg4NzQ1N2UzOGQxM2U2MzU5OGY4NTQ0MzAyMA==", "commit": {"author": {"name": "Than McIntosh", "email": "thanm@google.com", "date": "2017-01-11T18:15:16Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-01-11T18:15:16Z"}, "message": "compiler: add containing Bfunction to conditional_expression\n    \n    Add containing Bfunction to Backend::conditional_expression\n    method signature, since the back end might need to create a\n    temporary when generating IR for this construct.\n    \n    Reviewed-on: https://go-review.googlesource.com/35056\n\nFrom-SVN: r244330", "tree": {"sha": "01781f4b52d85c765576949475a9459eba3e295c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01781f4b52d85c765576949475a9459eba3e295c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2182c9cc2a1d887457e38d13e63598f85443020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2182c9cc2a1d887457e38d13e63598f85443020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2182c9cc2a1d887457e38d13e63598f85443020", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2182c9cc2a1d887457e38d13e63598f85443020/comments", "author": {"login": "thanm", "id": 12280172, "node_id": "MDQ6VXNlcjEyMjgwMTcy", "avatar_url": "https://avatars.githubusercontent.com/u/12280172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thanm", "html_url": "https://github.com/thanm", "followers_url": "https://api.github.com/users/thanm/followers", "following_url": "https://api.github.com/users/thanm/following{/other_user}", "gists_url": "https://api.github.com/users/thanm/gists{/gist_id}", "starred_url": "https://api.github.com/users/thanm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thanm/subscriptions", "organizations_url": "https://api.github.com/users/thanm/orgs", "repos_url": "https://api.github.com/users/thanm/repos", "events_url": "https://api.github.com/users/thanm/events{/privacy}", "received_events_url": "https://api.github.com/users/thanm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f258a55a9df39ecef35d0049c3bf703d6cdbe53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f258a55a9df39ecef35d0049c3bf703d6cdbe53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f258a55a9df39ecef35d0049c3bf703d6cdbe53"}], "stats": {"total": 68, "additions": 44, "deletions": 24}, "files": [{"sha": "8e37e8b3e015aed32104262b7633a798ef2d5e46", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2182c9cc2a1d887457e38d13e63598f85443020/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2182c9cc2a1d887457e38d13e63598f85443020/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=a2182c9cc2a1d887457e38d13e63598f85443020", "patch": "@@ -1,3 +1,7 @@\n+2017-01-11  Than McIntosh  <thanm@google.com>\n+\n+\t* go-gcc.cc (conditional_expression): Add Bfunction parameter.\n+\n 2017-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "ed6fc2c61059b290e0a5477cc63b907bd68d6670", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2182c9cc2a1d887457e38d13e63598f85443020/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2182c9cc2a1d887457e38d13e63598f85443020/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=a2182c9cc2a1d887457e38d13e63598f85443020", "patch": "@@ -325,8 +325,8 @@ class Gcc_backend : public Backend\n   compound_expression(Bstatement*, Bexpression*, Location);\n \n   Bexpression*\n-  conditional_expression(Btype*, Bexpression*, Bexpression*, Bexpression*,\n-                         Location);\n+  conditional_expression(Bfunction*, Btype*, Bexpression*, Bexpression*,\n+                         Bexpression*, Location);\n \n   Bexpression*\n   unary_expression(Operator, Bexpression*, Location);\n@@ -1546,7 +1546,8 @@ Gcc_backend::compound_expression(Bstatement* bstat, Bexpression* bexpr,\n // ELSE_EXPR otherwise.\n \n Bexpression*\n-Gcc_backend::conditional_expression(Btype* btype, Bexpression* condition,\n+Gcc_backend::conditional_expression(Bfunction*, Btype* btype,\n+                                    Bexpression* condition,\n                                     Bexpression* then_expr,\n                                     Bexpression* else_expr, Location location)\n {"}, {"sha": "443de8bb24008d3756c2f1ca37ac60836f578de6", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2182c9cc2a1d887457e38d13e63598f85443020/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2182c9cc2a1d887457e38d13e63598f85443020/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=a2182c9cc2a1d887457e38d13e63598f85443020", "patch": "@@ -1,4 +1,4 @@\n-6be46149636c3533389e62c6dc76f0a7ff461080\n+153f7b68c0c4d3cf3da0becf82eb1a3eb8b47d6e\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "93835d9ce5fed4a17f13181ade4588d072852068", "filename": "gcc/go/gofrontend/backend.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2182c9cc2a1d887457e38d13e63598f85443020/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2182c9cc2a1d887457e38d13e63598f85443020/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=a2182c9cc2a1d887457e38d13e63598f85443020", "patch": "@@ -324,12 +324,12 @@ class Backend\n   compound_expression(Bstatement* bstat, Bexpression* bexpr, Location) = 0;\n \n   // Return an expression that executes THEN_EXPR if CONDITION is true, or\n-  // ELSE_EXPR otherwise and returns the result as type BTYPE.  ELSE_EXPR\n-  // may be NULL.  BTYPE may be NULL.\n+  // ELSE_EXPR otherwise and returns the result as type BTYPE, within the\n+  // specified function FUNCTION.  ELSE_EXPR may be NULL.  BTYPE may be NULL.\n   virtual Bexpression*\n-  conditional_expression(Btype* btype, Bexpression* condition,\n-                         Bexpression* then_expr, Bexpression* else_expr,\n-                         Location) = 0;\n+  conditional_expression(Bfunction* function, Btype* btype,\n+                         Bexpression* condition, Bexpression* then_expr,\n+                         Bexpression* else_expr, Location) = 0;\n \n   // Return an expression for the unary operation OP EXPR.\n   // Supported values of OP are (from operators.h):"}, {"sha": "fe4d07bec20215ea4baa7f27d3272c559b40d655", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2182c9cc2a1d887457e38d13e63598f85443020/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2182c9cc2a1d887457e38d13e63598f85443020/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=a2182c9cc2a1d887457e38d13e63598f85443020", "patch": "@@ -4390,7 +4390,9 @@ Unary_expression::do_get_backend(Translate_context* context)\n                 Bexpression* crash =\n \t\t  gogo->runtime_error(RUNTIME_ERROR_NIL_DEREFERENCE,\n \t\t\t\t      loc)->get_backend(context);\n-                bexpr = gogo->backend()->conditional_expression(btype, compare,\n+                Bfunction* bfn = context->function()->func_value()->get_decl();\n+                bexpr = gogo->backend()->conditional_expression(bfn, btype,\n+                                                                compare,\n                                                                 crash, bexpr,\n                                                                 loc);\n \n@@ -5992,6 +5994,7 @@ Binary_expression::do_get_backend(Translate_context* context)\n       Bexpression* zero_expr =\n           gogo->backend()->integer_constant_expression(left_btype, zero);\n       overflow = zero_expr;\n+      Bfunction* bfn = context->function()->func_value()->get_decl();\n       if (this->op_ == OPERATOR_RSHIFT\n \t  && !left_type->integer_type()->is_unsigned())\n \t{\n@@ -6000,11 +6003,12 @@ Binary_expression::do_get_backend(Translate_context* context)\n                                                  zero_expr, loc);\n           Bexpression* neg_one_expr =\n               gogo->backend()->integer_constant_expression(left_btype, neg_one);\n-          overflow = gogo->backend()->conditional_expression(btype, neg_expr,\n+          overflow = gogo->backend()->conditional_expression(bfn,\n+                                                             btype, neg_expr,\n                                                              neg_one_expr,\n                                                              zero_expr, loc);\n \t}\n-      ret = gogo->backend()->conditional_expression(btype, compare, ret,\n+      ret = gogo->backend()->conditional_expression(bfn, btype, compare, ret,\n                                                     overflow, loc);\n       mpz_clear(bitsval);\n     }\n@@ -6027,7 +6031,9 @@ Binary_expression::do_get_backend(Translate_context* context)\n \t\t\t\t\t\t   loc)->get_backend(context);\n \n \t  // right == 0 ? (__go_runtime_error(...), 0) : ret\n-          ret = gogo->backend()->conditional_expression(btype, check, crash,\n+          Bfunction* bfn = context->function()->func_value()->get_decl();\n+          ret = gogo->backend()->conditional_expression(bfn, btype,\n+                                                        check, crash,\n \t\t\t\t\t\t\tret, loc);\n \t}\n \n@@ -6047,6 +6053,7 @@ Binary_expression::do_get_backend(Translate_context* context)\n               gogo->backend()->integer_constant_expression(btype, zero);\n           Bexpression* one_expr =\n               gogo->backend()->integer_constant_expression(btype, one);\n+          Bfunction* bfn = context->function()->func_value()->get_decl();\n \n \t  if (type->integer_type()->is_unsigned())\n \t    {\n@@ -6058,12 +6065,12 @@ Binary_expression::do_get_backend(Translate_context* context)\n                                                      left, right, loc);\n \t      if (this->op_ == OPERATOR_DIV)\n                 overflow =\n-                    gogo->backend()->conditional_expression(btype, cmp,\n+                    gogo->backend()->conditional_expression(bfn, btype, cmp,\n                                                             one_expr, zero_expr,\n                                                             loc);\n \t      else\n                 overflow =\n-                    gogo->backend()->conditional_expression(btype, cmp,\n+                    gogo->backend()->conditional_expression(bfn, btype, cmp,\n                                                             zero_expr, left,\n                                                             loc);\n \t    }\n@@ -6083,7 +6090,8 @@ Binary_expression::do_get_backend(Translate_context* context)\n           overflow = gogo->backend()->convert_expression(btype, overflow, loc);\n \n \t  // right == -1 ? - left : ret\n-          ret = gogo->backend()->conditional_expression(btype, check, overflow,\n+          ret = gogo->backend()->conditional_expression(bfn, btype,\n+                                                        check, overflow,\n                                                         ret, loc);\n \t}\n     }\n@@ -10923,12 +10931,13 @@ Array_index_expression::do_get_backend(Translate_context* context)\n   bad_index = gogo->backend()->binary_expression(OPERATOR_OROR, start_too_large,\n \t\t\t\t\t\t bad_index, loc);\n \n+  Bfunction* bfn = context->function()->func_value()->get_decl();\n   if (this->end_ == NULL)\n     {\n       // Simple array indexing.  This has to return an l-value, so\n       // wrap the index check into START.\n       start =\n-\tgogo->backend()->conditional_expression(int_btype, bad_index,\n+        gogo->backend()->conditional_expression(bfn, int_btype, bad_index,\n \t\t\t\t\t\tcrash, start, loc);\n \n       Bexpression* ret;\n@@ -11017,7 +11026,7 @@ Array_index_expression::do_get_backend(Translate_context* context)\n \n   Bexpression* ctor =\n     gogo->backend()->constructor_expression(struct_btype, init, loc);\n-  return gogo->backend()->conditional_expression(struct_btype, bad_index,\n+  return gogo->backend()->conditional_expression(bfn, struct_btype, bad_index,\n \t\t\t\t\t\t crash, ctor, loc);\n }\n \n@@ -11231,6 +11240,7 @@ String_index_expression::do_get_backend(Translate_context* context)\n     }\n \n   Expression* start = Expression::make_cast(int_type, this->start_, loc);\n+  Bfunction* bfn = context->function()->func_value()->get_decl();\n \n   if (this->end_ == NULL)\n     {\n@@ -11253,8 +11263,9 @@ String_index_expression::do_get_backend(Translate_context* context)\n \n       Btype* byte_btype = bytes->type()->points_to()->get_backend(gogo);\n       Bexpression* index_error = bad_index->get_backend(context);\n-      return gogo->backend()->conditional_expression(byte_btype, index_error,\n-\t\t\t\t\t\t     crash, index, loc);\n+      return gogo->backend()->conditional_expression(bfn, byte_btype,\n+                                                     index_error, crash,\n+                                                     index, loc);\n     }\n \n   Expression* end = NULL;\n@@ -11274,7 +11285,7 @@ String_index_expression::do_get_backend(Translate_context* context)\n \n   Btype* str_btype = strslice->type()->get_backend(gogo);\n   Bexpression* index_error = bad_index->get_backend(context);\n-  return gogo->backend()->conditional_expression(str_btype, index_error,\n+  return gogo->backend()->conditional_expression(bfn, str_btype, index_error,\n \t\t\t\t\t\t crash, bstrslice, loc);\n }\n \n@@ -11967,8 +11978,10 @@ Interface_field_reference_expression::do_get_backend(Translate_context* context)\n   Bexpression* bcrash = gogo->runtime_error(RUNTIME_ERROR_NIL_DEREFERENCE,\n \t\t\t\t\t    loc)->get_backend(context);\n \n+  Bfunction* bfn = context->function()->func_value()->get_decl();\n   Bexpression* bcond =\n-      gogo->backend()->conditional_expression(NULL, bnil_check, bcrash, NULL, loc);\n+      gogo->backend()->conditional_expression(bfn, NULL,\n+                                              bnil_check, bcrash, NULL, loc);\n   Bfunction* bfunction = context->function()->func_value()->get_decl();\n   Bstatement* cond_statement =\n       gogo->backend()->expression_statement(bfunction, bcond);\n@@ -15414,7 +15427,8 @@ Conditional_expression::do_get_backend(Translate_context* context)\n   Bexpression* cond = this->cond_->get_backend(context);\n   Bexpression* then = this->then_->get_backend(context);\n   Bexpression* belse = this->else_->get_backend(context);\n-  return gogo->backend()->conditional_expression(result_btype, cond, then,\n+  Bfunction* bfn = context->function()->func_value()->get_decl();\n+  return gogo->backend()->conditional_expression(bfn, result_btype, cond, then,\n \t\t\t\t\t\t belse, this->location());\n }\n "}, {"sha": "34346a76a0f657925b9bcae1827384bc4aafc383", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2182c9cc2a1d887457e38d13e63598f85443020/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2182c9cc2a1d887457e38d13e63598f85443020/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=a2182c9cc2a1d887457e38d13e63598f85443020", "patch": "@@ -5718,7 +5718,8 @@ Function::build_defer_wrapper(Gogo* gogo, Named_object* named_function,\n       Expression* ref =\n \tExpression::make_temporary_reference(this->defer_stack_, end_loc);\n       Bexpression* bref = ref->get_backend(&context);\n-      ret = gogo->backend()->conditional_expression(NULL, bref, ret, NULL,\n+      ret = gogo->backend()->conditional_expression(this->fndecl_,\n+                                                    NULL, bref, ret, NULL,\n                                                     end_loc);\n       stmts.push_back(gogo->backend()->expression_statement(this->fndecl_, ret));\n     }"}]}