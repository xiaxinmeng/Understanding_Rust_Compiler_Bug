{"sha": "9525c26bf19318bed72d3bc3b99dceac5217102f", "node_id": "C_kwDOANBUbNoAKDk1MjVjMjZiZjE5MzE4YmVkNzJkM2JjM2I5OWRjZWFjNTIxNzEwMmY", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gmail.com", "date": "2021-12-26T10:59:14Z"}, "committer": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gmail.com", "date": "2021-12-26T11:00:00Z"}, "message": "Fortran: speed up decimal output of integers\n\nlibgfortran/ChangeLog:\n\n\tPR libfortran/98076\n\t* runtime/string.c (itoa64, itoa64_pad19): New helper functions.\n\t(gfc_itoa): On targets with 128-bit integers, call fast\n\t64-bit functions to avoid many slow divisions.\n\ngcc/testsuite/ChangeLog:\n\n\tPR libfortran/98076\n\t* gfortran.dg/pr98076.f90: New test.", "tree": {"sha": "8ce575df2473b27132d04ecf9dc8de8f1730b953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ce575df2473b27132d04ecf9dc8de8f1730b953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9525c26bf19318bed72d3bc3b99dceac5217102f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9525c26bf19318bed72d3bc3b99dceac5217102f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9525c26bf19318bed72d3bc3b99dceac5217102f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9525c26bf19318bed72d3bc3b99dceac5217102f/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10ae9946dce5fec3702cb3f18f3aa51dc6dff9c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10ae9946dce5fec3702cb3f18f3aa51dc6dff9c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10ae9946dce5fec3702cb3f18f3aa51dc6dff9c4"}], "stats": {"total": 358, "additions": 353, "deletions": 5}, "files": [{"sha": "d1288a41fefd8097f6b5b00dea0711edb794b830", "filename": "gcc/testsuite/gfortran.dg/pr98076.f90", "status": "added", "additions": 293, "deletions": 0, "changes": 293, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9525c26bf19318bed72d3bc3b99dceac5217102f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr98076.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9525c26bf19318bed72d3bc3b99dceac5217102f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr98076.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr98076.f90?ref=9525c26bf19318bed72d3bc3b99dceac5217102f", "patch": "@@ -0,0 +1,293 @@\n+! { dg-do run }\n+! { dg-require-effective-target fortran_large_int }\n+!\n+! Check that we can print large integer values\n+\n+program test\n+  implicit none\n+  ! 128-bit integer kind\n+  integer, parameter :: k = selected_int_kind(38)\n+\n+  character(len=39) :: s\n+  character(len=100) :: buffer\n+  integer(kind=k) :: n\n+  integer :: i\n+\n+  ! Random checks\n+  do i = 1, 1000\n+    call random_digits(s)\n+    read(s,*) n\n+    write(buffer,'(I0.38)') n\n+    print *, s\n+    print *, buffer\n+    if (adjustl(buffer) /= adjustl(s)) stop 2\n+  end do\n+\n+  ! Systematic check\n+  call check(0_k, \"0\")\n+  call check(1_k, \"1\")\n+  call check(9_k, \"9\")\n+  call check(10_k, \"10\")\n+  call check(11_k, \"11\")\n+  call check(99_k, \"99\")\n+  call check(100_k, \"100\")\n+  call check(101_k, \"101\")\n+  call check(999_k, \"999\")\n+  call check(1000_k, \"1000\")\n+  call check(1001_k, \"1001\")\n+  call check(9999_k, \"9999\")\n+  call check(10000_k, \"10000\")\n+  call check(10001_k, \"10001\")\n+  call check(99999_k, \"99999\")\n+  call check(100000_k, \"100000\")\n+  call check(100001_k, \"100001\")\n+  call check(999999_k, \"999999\")\n+  call check(1000000_k, \"1000000\")\n+  call check(1000001_k, \"1000001\")\n+  call check(9999999_k, \"9999999\")\n+  call check(10000000_k, \"10000000\")\n+  call check(10000001_k, \"10000001\")\n+  call check(99999999_k, \"99999999\")\n+  call check(100000000_k, \"100000000\")\n+  call check(100000001_k, \"100000001\")\n+  call check(999999999_k, \"999999999\")\n+  call check(1000000000_k, \"1000000000\")\n+  call check(1000000001_k, \"1000000001\")\n+  call check(9999999999_k, \"9999999999\")\n+  call check(10000000000_k, \"10000000000\")\n+  call check(10000000001_k, \"10000000001\")\n+  call check(99999999999_k, \"99999999999\")\n+  call check(100000000000_k, \"100000000000\")\n+  call check(100000000001_k, \"100000000001\")\n+  call check(999999999999_k, \"999999999999\")\n+  call check(1000000000000_k, \"1000000000000\")\n+  call check(1000000000001_k, \"1000000000001\")\n+  call check(9999999999999_k, \"9999999999999\")\n+  call check(10000000000000_k, \"10000000000000\")\n+  call check(10000000000001_k, \"10000000000001\")\n+  call check(99999999999999_k, \"99999999999999\")\n+  call check(100000000000000_k, \"100000000000000\")\n+  call check(100000000000001_k, \"100000000000001\")\n+  call check(999999999999999_k, \"999999999999999\")\n+  call check(1000000000000000_k, \"1000000000000000\")\n+  call check(1000000000000001_k, \"1000000000000001\")\n+  call check(9999999999999999_k, \"9999999999999999\")\n+  call check(10000000000000000_k, \"10000000000000000\")\n+  call check(10000000000000001_k, \"10000000000000001\")\n+  call check(99999999999999999_k, \"99999999999999999\")\n+  call check(100000000000000000_k, \"100000000000000000\")\n+  call check(100000000000000001_k, \"100000000000000001\")\n+  call check(999999999999999999_k, \"999999999999999999\")\n+  call check(1000000000000000000_k, \"1000000000000000000\")\n+  call check(1000000000000000001_k, \"1000000000000000001\")\n+  call check(9999999999999999999_k, \"9999999999999999999\")\n+  call check(10000000000000000000_k, \"10000000000000000000\")\n+  call check(10000000000000000001_k, \"10000000000000000001\")\n+  call check(99999999999999999999_k, \"99999999999999999999\")\n+  call check(100000000000000000000_k, \"100000000000000000000\")\n+  call check(100000000000000000001_k, \"100000000000000000001\")\n+  call check(999999999999999999999_k, \"999999999999999999999\")\n+  call check(1000000000000000000000_k, \"1000000000000000000000\")\n+  call check(1000000000000000000001_k, \"1000000000000000000001\")\n+  call check(9999999999999999999999_k, \"9999999999999999999999\")\n+  call check(10000000000000000000000_k, \"10000000000000000000000\")\n+  call check(10000000000000000000001_k, \"10000000000000000000001\")\n+  call check(99999999999999999999999_k, \"99999999999999999999999\")\n+  call check(100000000000000000000000_k, \"100000000000000000000000\")\n+  call check(100000000000000000000001_k, \"100000000000000000000001\")\n+  call check(999999999999999999999999_k, \"999999999999999999999999\")\n+  call check(1000000000000000000000000_k, \"1000000000000000000000000\")\n+  call check(1000000000000000000000001_k, \"1000000000000000000000001\")\n+  call check(9999999999999999999999999_k, \"9999999999999999999999999\")\n+  call check(10000000000000000000000000_k, \"10000000000000000000000000\")\n+  call check(10000000000000000000000001_k, \"10000000000000000000000001\")\n+  call check(99999999999999999999999999_k, \"99999999999999999999999999\")\n+  call check(100000000000000000000000000_k, \"100000000000000000000000000\")\n+  call check(100000000000000000000000001_k, \"100000000000000000000000001\")\n+  call check(999999999999999999999999999_k, \"999999999999999999999999999\")\n+  call check(1000000000000000000000000000_k, \"1000000000000000000000000000\")\n+  call check(1000000000000000000000000001_k, \"1000000000000000000000000001\")\n+  call check(9999999999999999999999999999_k, \"9999999999999999999999999999\")\n+  call check(10000000000000000000000000000_k, \"10000000000000000000000000000\")\n+  call check(10000000000000000000000000001_k, \"10000000000000000000000000001\")\n+  call check(99999999999999999999999999999_k, \"99999999999999999999999999999\")\n+  call check(100000000000000000000000000000_k, \"100000000000000000000000000000\")\n+  call check(100000000000000000000000000001_k, \"100000000000000000000000000001\")\n+  call check(999999999999999999999999999999_k, \"999999999999999999999999999999\")\n+  call check(1000000000000000000000000000000_k, \"1000000000000000000000000000000\")\n+  call check(1000000000000000000000000000001_k, \"1000000000000000000000000000001\")\n+  call check(9999999999999999999999999999999_k, \"9999999999999999999999999999999\")\n+  call check(10000000000000000000000000000000_k, \"10000000000000000000000000000000\")\n+  call check(10000000000000000000000000000001_k, \"10000000000000000000000000000001\")\n+  call check(99999999999999999999999999999999_k, \"99999999999999999999999999999999\")\n+  call check(100000000000000000000000000000000_k, \"100000000000000000000000000000000\")\n+  call check(100000000000000000000000000000001_k, \"100000000000000000000000000000001\")\n+  call check(999999999999999999999999999999999_k, \"999999999999999999999999999999999\")\n+  call check(1000000000000000000000000000000000_k, \"1000000000000000000000000000000000\")\n+  call check(1000000000000000000000000000000001_k, \"1000000000000000000000000000000001\")\n+  call check(9999999999999999999999999999999999_k, \"9999999999999999999999999999999999\")\n+  call check(10000000000000000000000000000000000_k, \"10000000000000000000000000000000000\")\n+  call check(10000000000000000000000000000000001_k, \"10000000000000000000000000000000001\")\n+  call check(99999999999999999999999999999999999_k, \"99999999999999999999999999999999999\")\n+  call check(100000000000000000000000000000000000_k, \"100000000000000000000000000000000000\")\n+  call check(100000000000000000000000000000000001_k, \"100000000000000000000000000000000001\")\n+  call check(999999999999999999999999999999999999_k, \"999999999999999999999999999999999999\")\n+  call check(1000000000000000000000000000000000000_k, \"1000000000000000000000000000000000000\")\n+  call check(1000000000000000000000000000000000001_k, \"1000000000000000000000000000000000001\")\n+  call check(9999999999999999999999999999999999999_k, \"9999999999999999999999999999999999999\")\n+  call check(10000000000000000000000000000000000000_k, \"10000000000000000000000000000000000000\")\n+  call check(10000000000000000000000000000000000001_k, \"10000000000000000000000000000000000001\")\n+  call check(99999999999999999999999999999999999999_k, \"99999999999999999999999999999999999999\")\n+  call check(100000000000000000000000000000000000000_k, \"100000000000000000000000000000000000000\")\n+  call check(100000000000000000000000000000000000001_k, \"100000000000000000000000000000000000001\")\n+  call check(109999999999999999999999999999999999999_k, \"109999999999999999999999999999999999999\")\n+\n+  call check(-1_k, \"-1\")\n+  call check(-9_k, \"-9\")\n+  call check(-10_k, \"-10\")\n+  call check(-11_k, \"-11\")\n+  call check(-99_k, \"-99\")\n+  call check(-100_k, \"-100\")\n+  call check(-101_k, \"-101\")\n+  call check(-999_k, \"-999\")\n+  call check(-1000_k, \"-1000\")\n+  call check(-1001_k, \"-1001\")\n+  call check(-9999_k, \"-9999\")\n+  call check(-10000_k, \"-10000\")\n+  call check(-10001_k, \"-10001\")\n+  call check(-99999_k, \"-99999\")\n+  call check(-100000_k, \"-100000\")\n+  call check(-100001_k, \"-100001\")\n+  call check(-999999_k, \"-999999\")\n+  call check(-1000000_k, \"-1000000\")\n+  call check(-1000001_k, \"-1000001\")\n+  call check(-9999999_k, \"-9999999\")\n+  call check(-10000000_k, \"-10000000\")\n+  call check(-10000001_k, \"-10000001\")\n+  call check(-99999999_k, \"-99999999\")\n+  call check(-100000000_k, \"-100000000\")\n+  call check(-100000001_k, \"-100000001\")\n+  call check(-999999999_k, \"-999999999\")\n+  call check(-1000000000_k, \"-1000000000\")\n+  call check(-1000000001_k, \"-1000000001\")\n+  call check(-9999999999_k, \"-9999999999\")\n+  call check(-10000000000_k, \"-10000000000\")\n+  call check(-10000000001_k, \"-10000000001\")\n+  call check(-99999999999_k, \"-99999999999\")\n+  call check(-100000000000_k, \"-100000000000\")\n+  call check(-100000000001_k, \"-100000000001\")\n+  call check(-999999999999_k, \"-999999999999\")\n+  call check(-1000000000000_k, \"-1000000000000\")\n+  call check(-1000000000001_k, \"-1000000000001\")\n+  call check(-9999999999999_k, \"-9999999999999\")\n+  call check(-10000000000000_k, \"-10000000000000\")\n+  call check(-10000000000001_k, \"-10000000000001\")\n+  call check(-99999999999999_k, \"-99999999999999\")\n+  call check(-100000000000000_k, \"-100000000000000\")\n+  call check(-100000000000001_k, \"-100000000000001\")\n+  call check(-999999999999999_k, \"-999999999999999\")\n+  call check(-1000000000000000_k, \"-1000000000000000\")\n+  call check(-1000000000000001_k, \"-1000000000000001\")\n+  call check(-9999999999999999_k, \"-9999999999999999\")\n+  call check(-10000000000000000_k, \"-10000000000000000\")\n+  call check(-10000000000000001_k, \"-10000000000000001\")\n+  call check(-99999999999999999_k, \"-99999999999999999\")\n+  call check(-100000000000000000_k, \"-100000000000000000\")\n+  call check(-100000000000000001_k, \"-100000000000000001\")\n+  call check(-999999999999999999_k, \"-999999999999999999\")\n+  call check(-1000000000000000000_k, \"-1000000000000000000\")\n+  call check(-1000000000000000001_k, \"-1000000000000000001\")\n+  call check(-9999999999999999999_k, \"-9999999999999999999\")\n+  call check(-10000000000000000000_k, \"-10000000000000000000\")\n+  call check(-10000000000000000001_k, \"-10000000000000000001\")\n+  call check(-99999999999999999999_k, \"-99999999999999999999\")\n+  call check(-100000000000000000000_k, \"-100000000000000000000\")\n+  call check(-100000000000000000001_k, \"-100000000000000000001\")\n+  call check(-999999999999999999999_k, \"-999999999999999999999\")\n+  call check(-1000000000000000000000_k, \"-1000000000000000000000\")\n+  call check(-1000000000000000000001_k, \"-1000000000000000000001\")\n+  call check(-9999999999999999999999_k, \"-9999999999999999999999\")\n+  call check(-10000000000000000000000_k, \"-10000000000000000000000\")\n+  call check(-10000000000000000000001_k, \"-10000000000000000000001\")\n+  call check(-99999999999999999999999_k, \"-99999999999999999999999\")\n+  call check(-100000000000000000000000_k, \"-100000000000000000000000\")\n+  call check(-100000000000000000000001_k, \"-100000000000000000000001\")\n+  call check(-999999999999999999999999_k, \"-999999999999999999999999\")\n+  call check(-1000000000000000000000000_k, \"-1000000000000000000000000\")\n+  call check(-1000000000000000000000001_k, \"-1000000000000000000000001\")\n+  call check(-9999999999999999999999999_k, \"-9999999999999999999999999\")\n+  call check(-10000000000000000000000000_k, \"-10000000000000000000000000\")\n+  call check(-10000000000000000000000001_k, \"-10000000000000000000000001\")\n+  call check(-99999999999999999999999999_k, \"-99999999999999999999999999\")\n+  call check(-100000000000000000000000000_k, \"-100000000000000000000000000\")\n+  call check(-100000000000000000000000001_k, \"-100000000000000000000000001\")\n+  call check(-999999999999999999999999999_k, \"-999999999999999999999999999\")\n+  call check(-1000000000000000000000000000_k, \"-1000000000000000000000000000\")\n+  call check(-1000000000000000000000000001_k, \"-1000000000000000000000000001\")\n+  call check(-9999999999999999999999999999_k, \"-9999999999999999999999999999\")\n+  call check(-10000000000000000000000000000_k, \"-10000000000000000000000000000\")\n+  call check(-10000000000000000000000000001_k, \"-10000000000000000000000000001\")\n+  call check(-99999999999999999999999999999_k, \"-99999999999999999999999999999\")\n+  call check(-100000000000000000000000000000_k, \"-100000000000000000000000000000\")\n+  call check(-100000000000000000000000000001_k, \"-100000000000000000000000000001\")\n+  call check(-999999999999999999999999999999_k, \"-999999999999999999999999999999\")\n+  call check(-1000000000000000000000000000000_k, \"-1000000000000000000000000000000\")\n+  call check(-1000000000000000000000000000001_k, \"-1000000000000000000000000000001\")\n+  call check(-9999999999999999999999999999999_k, \"-9999999999999999999999999999999\")\n+  call check(-10000000000000000000000000000000_k, \"-10000000000000000000000000000000\")\n+  call check(-10000000000000000000000000000001_k, \"-10000000000000000000000000000001\")\n+  call check(-99999999999999999999999999999999_k, \"-99999999999999999999999999999999\")\n+  call check(-100000000000000000000000000000000_k, \"-100000000000000000000000000000000\")\n+  call check(-100000000000000000000000000000001_k, \"-100000000000000000000000000000001\")\n+  call check(-999999999999999999999999999999999_k, \"-999999999999999999999999999999999\")\n+  call check(-1000000000000000000000000000000000_k, \"-1000000000000000000000000000000000\")\n+  call check(-1000000000000000000000000000000001_k, \"-1000000000000000000000000000000001\")\n+  call check(-9999999999999999999999999999999999_k, \"-9999999999999999999999999999999999\")\n+  call check(-10000000000000000000000000000000000_k, \"-10000000000000000000000000000000000\")\n+  call check(-10000000000000000000000000000000001_k, \"-10000000000000000000000000000000001\")\n+  call check(-99999999999999999999999999999999999_k, \"-99999999999999999999999999999999999\")\n+  call check(-100000000000000000000000000000000000_k, \"-100000000000000000000000000000000000\")\n+  call check(-100000000000000000000000000000000001_k, \"-100000000000000000000000000000000001\")\n+  call check(-999999999999999999999999999999999999_k, \"-999999999999999999999999999999999999\")\n+  call check(-1000000000000000000000000000000000000_k, \"-1000000000000000000000000000000000000\")\n+  call check(-1000000000000000000000000000000000001_k, \"-1000000000000000000000000000000000001\")\n+  call check(-9999999999999999999999999999999999999_k, \"-9999999999999999999999999999999999999\")\n+  call check(-10000000000000000000000000000000000000_k, \"-10000000000000000000000000000000000000\")\n+  call check(-10000000000000000000000000000000000001_k, \"-10000000000000000000000000000000000001\")\n+  call check(-99999999999999999999999999999999999999_k, \"-99999999999999999999999999999999999999\")\n+  call check(-100000000000000000000000000000000000000_k, \"-100000000000000000000000000000000000000\")\n+  call check(-100000000000000000000000000000000000001_k, \"-100000000000000000000000000000000000001\")\n+  call check(-109999999999999999999999999999999999999_k, \"-109999999999999999999999999999999999999\")\n+\n+contains\n+\n+  subroutine check (i, str)\n+    implicit none\n+    integer(kind=k), intent(in), value :: i\n+    character(len=*), intent(in) :: str\n+\n+    character(len=100) :: buffer\n+    write(buffer,*) i\n+    if (adjustl(buffer) /= adjustl(str)) stop 1\n+  end subroutine\n+\n+  subroutine random_digits (str)\n+    implicit none\n+    integer, parameter :: l = 38\n+    character(len=l+1) :: str\n+    real :: r\n+    integer :: i, d\n+\n+    str = \"\"\n+    do i = 2, l+1\n+      call random_number(r)\n+      d = floor(r * 10)\n+      str(i:i) = achar(48 + d)\n+    end do\n+\n+    call random_number(r)\n+    if (r > 0.5) then\n+      str(1:1) = '-'\n+    end if\n+  end subroutine\n+end"}, {"sha": "0ccd731852abca1c0b28585684bde4d39f5f7311", "filename": "libgfortran/runtime/string.c", "status": "modified", "additions": 60, "deletions": 5, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9525c26bf19318bed72d3bc3b99dceac5217102f/libgfortran%2Fruntime%2Fstring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9525c26bf19318bed72d3bc3b99dceac5217102f/libgfortran%2Fruntime%2Fstring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fstring.c?ref=9525c26bf19318bed72d3bc3b99dceac5217102f", "patch": "@@ -23,6 +23,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"libgfortran.h\"\n+#include <assert.h>\n #include <string.h>\n #include <strings.h>\n \n@@ -169,6 +170,38 @@ find_option (st_parameter_common *cmp, const char *s1, gfc_charlen_type s1_len,\n }\n \n \n+/* Fast helper function for a positive value that fits in uint64_t.  */\n+\n+static inline char *\n+itoa64 (uint64_t n, char *p)\n+{\n+  while (n != 0)\n+    {\n+      *--p = '0' + (n % 10);\n+      n /= 10;\n+    }\n+  return p;\n+}\n+\n+\n+#if defined(HAVE_GFC_INTEGER_16)\n+# define TEN19 ((GFC_UINTEGER_LARGEST) 1000000 * (GFC_UINTEGER_LARGEST) 1000000 * (GFC_UINTEGER_LARGEST) 10000000)\n+\n+/* Same as itoa64(), with zero padding of 19 digits.  */\n+\n+static inline char *\n+itoa64_pad19 (uint64_t n, char *p)\n+{\n+  for (int k = 0; k < 19; k++)\n+    {\n+      *--p = '0' + (n % 10);\n+      n /= 10;\n+    }\n+  return p;\n+}\n+#endif\n+\n+\n /* Integer to decimal conversion.\n \n    This function is much more restricted than the widespread (but\n@@ -195,11 +228,33 @@ gfc_itoa (GFC_UINTEGER_LARGEST n, char *buffer, size_t len)\n   p = buffer + GFC_ITOA_BUF_SIZE - 1;\n   *p = '\\0';\n \n-  while (n != 0)\n+#if defined(HAVE_GFC_INTEGER_16)\n+  /* On targets that have a 128-bit integer type, division in that type\n+     is slow, because it occurs through a function call. We avoid that.  */\n+\n+  if (n <= UINT64_MAX)\n+    /* If the value fits in uint64_t, use the fast function. */\n+    return itoa64 (n, p);\n+  else\n     {\n-      *--p = '0' + (n % 10);\n-      n /= 10;\n+      /* Otherwise, break down into smaller bits by division. Two calls to\n+\t the uint64_t function are not sufficient for all 128-bit unsigned\n+\t integers (we would need three calls), but they do suffice for all\n+\t values up to 2^127, which is the largest that Fortran can produce\n+\t (-HUGE(0_16)-1) with its signed integer types.  */\n+      static_assert(sizeof(GFC_UINTEGER_LARGEST) <= 2 * sizeof(uint64_t));\n+\n+      GFC_UINTEGER_LARGEST r;\n+      r = n % TEN19;\n+      n = n / TEN19;\n+      assert (r <= UINT64_MAX);\n+      p = itoa64_pad19 (r, p);\n+\n+      assert(n <= UINT64_MAX);\n+      return itoa64 (n, p);\n     }\n-\n-  return p;\n+#else\n+  /* On targets where the largest integer is 64-bit, just use that.  */\n+  return itoa64 (n, p);\n+#endif\n }"}]}