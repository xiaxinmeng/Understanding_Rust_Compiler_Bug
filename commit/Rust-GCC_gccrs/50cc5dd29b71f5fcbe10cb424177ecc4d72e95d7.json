{"sha": "50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBjYzVkZDI5YjcxZjVmY2JlMTBjYjQyNDE3N2VjYzRkNzJlOTVkNw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-12-11T18:01:40Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-12-11T18:01:40Z"}, "message": "String.java (String): New constructor.\n\n\t* java/lang/String.java (String): New constructor.\n\t* gnu/gcj/runtime/natStringBuffer.cc: New file.\n\t* gnu/gcj/runtime/StringBuffer.java: New file.\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (ordinary_java_source_files): Added\n\tgnu/gcj/runtime/StringBuffer.java.\n\t(nat_source_files): Added gnu/gcj/runtime/natStringBuffer.cc.\n\nFrom-SVN: r47883", "tree": {"sha": "036eb3d4668ff454b9f53f21377f4d5495ee21da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/036eb3d4668ff454b9f53f21377f4d5495ee21da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7/comments", "author": null, "committer": null, "parents": [{"sha": "34026199b380249a3de9661cfea29e5e90252d4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34026199b380249a3de9661cfea29e5e90252d4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34026199b380249a3de9661cfea29e5e90252d4d"}], "stats": {"total": 255, "additions": 253, "deletions": 2}, "files": [{"sha": "29b5db7fec9f0741e4fb1c42df1be3cc49eb4762", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7", "patch": "@@ -1,3 +1,13 @@\n+2001-12-11  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/String.java (String): New constructor.\n+\t* gnu/gcj/runtime/natStringBuffer.cc: New file.\n+\t* gnu/gcj/runtime/StringBuffer.java: New file.\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (ordinary_java_source_files): Added\n+\tgnu/gcj/runtime/StringBuffer.java.\n+\t(nat_source_files): Added gnu/gcj/runtime/natStringBuffer.cc.\n+\n 2001-12-10  Tom Tromey  <tromey@redhat.com>\n \n \tFor PR libgcj/1147:"}, {"sha": "551be461cb1c749c0c2117732991128c74da49a4", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7", "patch": "@@ -1257,6 +1257,7 @@ gnu/gcj/runtime/FinalizerThread.java \\\n gnu/gcj/runtime/FirstThread.java \\\n gnu/gcj/runtime/JNIWeakRef.java \\\n gnu/gcj/runtime/SharedLibLoader.java \\\n+gnu/gcj/runtime/StringBuffer.java \\\n gnu/gcj/runtime/VMClassLoader.java \\\n gnu/java/io/ClassLoaderObjectInputStream.java \\\n gnu/java/io/NullOutputStream.java \\\n@@ -1617,6 +1618,7 @@ gnu/gcj/protocol/core/natCoreInputStream.cc \\\n gnu/gcj/runtime/natFinalizerThread.cc \\\n gnu/gcj/runtime/natFirstThread.cc \\\n gnu/gcj/runtime/natSharedLibLoader.cc \\\n+gnu/gcj/runtime/natStringBuffer.cc \\\n java/io/natFile.cc \\\n java/io/natFileDescriptor.cc \\\n java/io/natObjectInputStream.cc \\"}, {"sha": "60d003908f23e3c7ec7bb555056f3f90273e21ea", "filename": "libjava/Makefile.in", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7", "patch": "@@ -1002,6 +1002,7 @@ gnu/gcj/runtime/FinalizerThread.java \\\n gnu/gcj/runtime/FirstThread.java \\\n gnu/gcj/runtime/JNIWeakRef.java \\\n gnu/gcj/runtime/SharedLibLoader.java \\\n+gnu/gcj/runtime/StringBuffer.java \\\n gnu/gcj/runtime/VMClassLoader.java \\\n gnu/java/io/ClassLoaderObjectInputStream.java \\\n gnu/java/io/NullOutputStream.java \\\n@@ -1361,6 +1362,7 @@ gnu/gcj/protocol/core/natCoreInputStream.cc \\\n gnu/gcj/runtime/natFinalizerThread.cc \\\n gnu/gcj/runtime/natFirstThread.cc \\\n gnu/gcj/runtime/natSharedLibLoader.cc \\\n+gnu/gcj/runtime/natStringBuffer.cc \\\n java/io/natFile.cc \\\n java/io/natFileDescriptor.cc \\\n java/io/natObjectInputStream.cc \\\n@@ -1524,7 +1526,8 @@ gnu/gcj/convert/natInput_SJIS.lo gnu/gcj/convert/natOutput_EUCJIS.lo \\\n gnu/gcj/convert/natOutput_SJIS.lo gnu/gcj/io/natSimpleSHSStream.lo \\\n gnu/gcj/io/shs.lo gnu/gcj/protocol/core/natCoreInputStream.lo \\\n gnu/gcj/runtime/natFinalizerThread.lo gnu/gcj/runtime/natFirstThread.lo \\\n-gnu/gcj/runtime/natSharedLibLoader.lo java/io/natFile.lo \\\n+gnu/gcj/runtime/natSharedLibLoader.lo \\\n+gnu/gcj/runtime/natStringBuffer.lo java/io/natFile.lo \\\n java/io/natFileDescriptor.lo java/io/natObjectInputStream.lo \\\n java/io/natObjectOutputStream.lo java/lang/natCharacter.lo \\\n java/lang/natClass.lo java/lang/natClassLoader.lo \\\n@@ -1643,10 +1646,12 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/gcj/runtime/FinalizerThread.P \\\n .deps/gnu/gcj/runtime/FirstThread.P .deps/gnu/gcj/runtime/JNIWeakRef.P \\\n .deps/gnu/gcj/runtime/SharedLibLoader.P \\\n+.deps/gnu/gcj/runtime/StringBuffer.P \\\n .deps/gnu/gcj/runtime/VMClassLoader.P \\\n .deps/gnu/gcj/runtime/natFinalizerThread.P \\\n .deps/gnu/gcj/runtime/natFirstThread.P \\\n-.deps/gnu/gcj/runtime/natSharedLibLoader.P .deps/gnu/gcj/xlib/Clip.P \\\n+.deps/gnu/gcj/runtime/natSharedLibLoader.P \\\n+.deps/gnu/gcj/runtime/natStringBuffer.P .deps/gnu/gcj/xlib/Clip.P \\\n .deps/gnu/gcj/xlib/Colormap.P .deps/gnu/gcj/xlib/Display.P \\\n .deps/gnu/gcj/xlib/Drawable.P .deps/gnu/gcj/xlib/Font.P \\\n .deps/gnu/gcj/xlib/GC.P .deps/gnu/gcj/xlib/Pixmap.P \\"}, {"sha": "403f952c951df955a680efc36e34c97310015a7e", "filename": "libjava/gnu/gcj/runtime/StringBuffer.java", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7/libjava%2Fgnu%2Fgcj%2Fruntime%2FStringBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7/libjava%2Fgnu%2Fgcj%2Fruntime%2FStringBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FStringBuffer.java?ref=50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7", "patch": "@@ -0,0 +1,188 @@\n+// This is a simplified copy of java.lang.StringBuffer with\n+// `synchronized' removed.\n+\n+/* StringBuffer.java -- Growable strings\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package gnu.gcj.runtime;\n+\n+public final class StringBuffer\n+{\n+  /** Append the <code>String</code> value of the argument to this <code>StringBuffer</code>.\n+   *  Uses <code>String.valueOf()</code> to convert to\n+   *  <code>String</code>.\n+   *  @param bool the <code>boolean</code> to convert and append.\n+   *  @return this <code>StringBuffer</code>.\n+   *  @see java.lang.String#valueOf(boolean)\n+   */\n+  public StringBuffer append (boolean bool)\n+  {\n+    return append (bool ? \"true\" : \"false\");\n+  }\n+\n+  /** Append the <code>char</code> to this <code>StringBuffer</code>.\n+   *  @param c the <code>char</code> to append.\n+   *  @return this <code>StringBuffer</code>.\n+   */\n+  public StringBuffer append (char ch)\n+  {\n+    ensureCapacity_unsynchronized (count + 1);\n+    value[count++] = ch;\n+    return this;\n+  }\n+\n+  /** Append the <code>String</code> value of the argument to this <code>StringBuffer</code>.\n+   *  Uses <code>String.valueOf()</code> to convert to\n+   *  <code>String</code>.\n+   *  @param inum the <code>int</code> to convert and append.\n+   *  @return this <code>StringBuffer</code>.\n+   *  @see java.lang.String#valueOf(int)\n+   */\n+  public native StringBuffer append (int inum);\n+\n+  /** Append the <code>String</code> value of the argument to this <code>StringBuffer</code>.\n+   *  Uses <code>String.valueOf()</code> to convert to\n+   *  <code>String</code>.\n+   *  @param lnum the <code>long</code> to convert and append.\n+   *  @return this <code>StringBuffer</code>.\n+   *  @see java.lang.String#valueOf(long)\n+   */\n+  public StringBuffer append (long lnum)\n+  {\n+    return append (Long.toString (lnum));\n+  }\n+\n+  /** Append the <code>String</code> value of the argument to this <code>StringBuffer</code>.\n+   *  Uses <code>String.valueOf()</code> to convert to\n+   *  <code>String</code>.\n+   *  @param fnum the <code>float</code> to convert and append.\n+   *  @return this <code>StringBuffer</code>.\n+   *  @see java.lang.String#valueOf(float)\n+   */\n+  public StringBuffer append (float fnum)\n+  {\n+    return append (Float.toString (fnum));\n+  }\n+\n+  /** Append the <code>String</code> value of the argument to this <code>StringBuffer</code>.\n+   *  Uses <code>String.valueOf()</code> to convert to\n+   *  <code>String</code>.\n+   *  @param dnum the <code>double</code> to convert and append.\n+   *  @return this <code>StringBuffer</code>.\n+   *  @see java.lang.String#valueOf(double)\n+   */\n+  public StringBuffer append (double dnum)\n+  {\n+    return append (Double.toString (dnum));\n+  }\n+\n+  /** Append the <code>String</code> value of the argument to this <code>StringBuffer</code>.\n+   *  Uses <code>String.valueOf()</code> to convert to\n+   *  <code>String</code>.\n+   *  @param obj the <code>Object</code> to convert and append.\n+   *  @return this <code>StringBuffer</code>.\n+   *  @see java.lang.String#valueOf(java.lang.Object)\n+   */\n+  public StringBuffer append (Object obj)\n+  {\n+    return append (String.valueOf(obj));\n+  }\n+\n+  /** Append the <code>String</code> to this <code>StringBuffer</code>.\n+   *  @param str the <code>String</code> to append.\n+   *  @return this <code>StringBuffer</code>.\n+   */\n+  public StringBuffer append (String str)\n+  {\n+    if (str == null)\n+      str = \"null\";\n+    int len = str.length();\n+    ensureCapacity_unsynchronized (count + len);\n+    str.getChars(0, len, value, count);\n+    count += len;\n+    return this;\n+  }\n+\n+  private void ensureCapacity_unsynchronized (int minimumCapacity)\n+  {\n+    if (minimumCapacity > value.length)\n+      {\n+\tminimumCapacity = value.length * 2 + 2;\n+\tchar[] nb = new char[minimumCapacity];\n+\tSystem.arraycopy(value, 0, nb, 0, count);\n+\tvalue = nb;\n+      }\n+  }\n+\n+  /** Create a new StringBuffer with default capacity 16.\n+   *  @see JLS 20.13.1\n+   */\n+  public StringBuffer ()\n+  {\n+    this (DEFAULT_CAPACITY);\n+  }\n+\n+  /** Create an empty <code>StringBuffer</code> with the specified initial capacity.\n+   *  @param capacity the initial capacity.\n+   */\n+  public StringBuffer (int capacity)\n+  {\n+    count = 0;\n+    value = new char[capacity];\n+  }\n+\n+  /** Create a new <code>StringBuffer</code> with the characters in the specified <code>String</code>.\n+   *  Initial capacity will be the size of the String plus 16.\n+   *  @param str the <code>String</code> to make a <code>StringBuffer</code> out of.\n+   */\n+  public StringBuffer (String str)\n+  {\n+    if (str == null)\n+      str = \"null\";\n+    count = str.length();\n+    // JLS: The initial capacity of the string buffer is 16 plus the\n+    // length of the argument string.\n+    value = new char[count + DEFAULT_CAPACITY];\n+    str.getChars(0, count, value, 0);\n+  }\n+\n+  /** Convert this <code>StringBuffer</code> to a <code>String</code>.\n+   *  @return the characters in this StringBuffer\n+   */\n+  // This is native because efficient implementation requires avoiding\n+  // the Java protection mechanism.\n+  public native String toString ();\n+\n+  // Index of next available character.  Note that this has\n+  // permissions set this way so that String can get the value.\n+  int count;\n+\n+  // The buffer.  Note that this has permissions set this way so that\n+  // String can get the value.\n+  char[] value;\n+\n+  private final static int DEFAULT_CAPACITY = 16; // JLS 20.13.1\n+}"}, {"sha": "2777b9ed8ebe0048dbddd5f48893ab9a3a451eaa", "filename": "libjava/gnu/gcj/runtime/natStringBuffer.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatStringBuffer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatStringBuffer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatStringBuffer.cc?ref=50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7", "patch": "@@ -0,0 +1,36 @@\n+// natStringBuffer.cc - Implementation of java.lang.StringBuffer native methods.\n+\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+#include <gcj/cni.h>\n+#include <gnu/gcj/runtime/StringBuffer.h>\n+#include <java/lang/String.h>\n+\n+gnu::gcj::runtime::StringBuffer *\n+gnu::gcj::runtime::StringBuffer::append (jint num)\n+{\n+  // Use an array large enough for \"-2147483648\"; i.e. 11 chars.\n+  jchar buffer[11];\n+  int i = _Jv_FormatInt (buffer+11, num);\n+  jint needed = count + i;\n+  ensureCapacity_unsynchronized (needed);\n+  jchar* dst = elements (value) + count;\n+  jchar* src = buffer+11-i;\n+  while (--i >= 0)\n+    *dst++ = *src++;\n+  count = needed;\n+  return this;\n+}\n+\n+java::lang::String *\n+gnu::gcj::runtime::StringBuffer::toString ()\n+{\n+  return new java::lang::String (this);\n+}"}, {"sha": "b485ffecfcfe1f93702fff4923ad7ecea38b06d9", "filename": "libjava/java/lang/String.java", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7/libjava%2Fjava%2Flang%2FString.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7/libjava%2Fjava%2Flang%2FString.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FString.java?ref=50cc5dd29b71f5fcbe10cb424177ecc4d72e95d7", "patch": "@@ -92,6 +92,16 @@ public String (StringBuffer buffer)\n       }\n   }\n \n+  // This is used by gnu.gcj.runtime.StringBuffer, so it must have\n+  // package-private protection.  It is accessed via CNI and so avoids\n+  // ordinary protection mechanisms.\n+  String (gnu.gcj.runtime.StringBuffer buffer)\n+  {\n+    // No need to synchronize or mark the buffer, since we know it is\n+    // only used once.\n+    init (buffer.value, 0, buffer.count, true);\n+  }\n+\n   public String (char[] data)\n   {\n     init(data, 0, data.length, false);"}]}