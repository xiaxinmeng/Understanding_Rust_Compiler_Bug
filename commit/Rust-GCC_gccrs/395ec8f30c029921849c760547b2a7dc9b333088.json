{"sha": "395ec8f30c029921849c760547b2a7dc9b333088", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk1ZWM4ZjMwYzAyOTkyMTg0OWM3NjA1NDdiMmE3ZGM5YjMzMzA4OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-05-11T15:01:10Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-05-11T15:01:10Z"}, "message": "Fix ViewCVS URLs in libstdc++ manual\n\n\t* doc/xml/manual/allocator.xml: Fix ViewCVS URLs.\n\t* doc/xml/manual/mt_allocator.xml: Likewise.\n\t* doc/html/*: Regenerate.\n\nFrom-SVN: r247911", "tree": {"sha": "bf59685da06d2a13a34d50d53b018145ad22b370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf59685da06d2a13a34d50d53b018145ad22b370"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/395ec8f30c029921849c760547b2a7dc9b333088", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/395ec8f30c029921849c760547b2a7dc9b333088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/395ec8f30c029921849c760547b2a7dc9b333088", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/395ec8f30c029921849c760547b2a7dc9b333088/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8634a1a24d9c2d8089b72d90af34d43d22010ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8634a1a24d9c2d8089b72d90af34d43d22010ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8634a1a24d9c2d8089b72d90af34d43d22010ff"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "5d69a8edac459ec7c0efc2349179605d74290537", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395ec8f30c029921849c760547b2a7dc9b333088/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395ec8f30c029921849c760547b2a7dc9b333088/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=395ec8f30c029921849c760547b2a7dc9b333088", "patch": "@@ -1,5 +1,9 @@\n 2017-05-11  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/xml/manual/allocator.xml: Fix ViewCVS URLs.\n+\t* doc/xml/manual/mt_allocator.xml: Likewise.\n+\t* doc/html/*: Regenerate.\n+\n \tPR libstdc++/80285\n \t* include/bits/shared_ptr_base.h (_Sp_make_shared_tag::_S_ti): Define\n \tfunction to get unique fake std::type_info reference."}, {"sha": "2dfa4a21e4119773c6b68aa76c78f4f6fc269d20", "filename": "libstdc++-v3/doc/html/manual/memory.html", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395ec8f30c029921849c760547b2a7dc9b333088/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fmemory.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395ec8f30c029921849c760547b2a7dc9b333088/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fmemory.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fmemory.html?ref=395ec8f30c029921849c760547b2a7dc9b333088", "patch": "@@ -119,8 +119,8 @@\n        Over multiple iterations, various STL container\n      objects have elements inserted to some maximum amount. A variety\n      of allocators are tested.\n-     Test source for <a class=\"link\" href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert/sequence.cc?view=markup\" target=\"_top\">sequence</a>\n-     and <a class=\"link\" href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert/associative.cc?view=markup\" target=\"_top\">associative</a>\n+     Test source for <a class=\"link\" href=\"http://gcc.gnu.org/viewcvs/gcc/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert/sequence.cc?view=markup\" target=\"_top\">sequence</a>\n+     and <a class=\"link\" href=\"http://gcc.gnu.org/viewcvs/gcc/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert/associative.cc?view=markup\" target=\"_top\">associative</a>\n      containers.\n        </p></li><li class=\"listitem\"><p>\n        Insertion and erasure in a multi-threaded environment.\n@@ -129,14 +129,14 @@\n      on a per-thread basis, as well as measuring thread contention\n      for memory resources.\n      Test source\n-    <a class=\"link\" href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert_erase/associative.cc?view=markup\" target=\"_top\">here</a>.\n+    <a class=\"link\" href=\"http://gcc.gnu.org/viewcvs/gcc/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert_erase/associative.cc?view=markup\" target=\"_top\">here</a>.\n        </p></li><li class=\"listitem\"><p>\n \t A threaded producer/consumer model.\n        </p><p>\n        Test source for\n-     <a class=\"link\" href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc++-v3/testsuite/performance/23_containers/producer_consumer/sequence.cc?view=markup\" target=\"_top\">sequence</a>\n+     <a class=\"link\" href=\"http://gcc.gnu.org/viewcvs/gcc/trunk/libstdc++-v3/testsuite/performance/23_containers/producer_consumer/sequence.cc?view=markup\" target=\"_top\">sequence</a>\n      and\n-     <a class=\"link\" href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc++-v3/testsuite/performance/23_containers/producer_consumer/associative.cc?view=markup\" target=\"_top\">associative</a>\n+     <a class=\"link\" href=\"http://gcc.gnu.org/viewcvs/gcc/trunk/libstdc++-v3/testsuite/performance/23_containers/producer_consumer/associative.cc?view=markup\" target=\"_top\">associative</a>\n      containers.\n      </p></li></ol></div><p>\n      The current default choice for"}, {"sha": "7c1d020c201740fd6c4b265fe37050bf9335e097", "filename": "libstdc++-v3/doc/html/manual/mt_allocator_impl.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395ec8f30c029921849c760547b2a7dc9b333088/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fmt_allocator_impl.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395ec8f30c029921849c760547b2a7dc9b333088/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fmt_allocator_impl.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fmt_allocator_impl.html?ref=395ec8f30c029921849c760547b2a7dc9b333088", "patch": "@@ -156,6 +156,6 @@\n as part of a container's constructor. However, this assumption is\n implementation-specific, and subject to change. For an example of a\n pool that frees memory, see the following\n-    <a class=\"link\" href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-6.cc?view=markup\" target=\"_top\">\n+    <a class=\"link\" href=\"http://gcc.gnu.org/viewcvs/gcc/trunk/libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-6.cc?view=markup\" target=\"_top\">\n     example.</a>\n </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"mt_allocator_design.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"mt_allocator.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"mt_allocator_ex_single.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Design Issues\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Single Thread Example</td></tr></table></div></body></html>\n\\ No newline at end of file"}, {"sha": "395b4e3b4ba3d154fdfea627b49e158e2ffaa443", "filename": "libstdc++-v3/doc/xml/manual/allocator.xml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395ec8f30c029921849c760547b2a7dc9b333088/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fallocator.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395ec8f30c029921849c760547b2a7dc9b333088/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fallocator.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fallocator.xml?ref=395ec8f30c029921849c760547b2a7dc9b333088", "patch": "@@ -185,8 +185,8 @@\n        Over multiple iterations, various STL container\n      objects have elements inserted to some maximum amount. A variety\n      of allocators are tested.\n-     Test source for <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert/sequence.cc?view=markup\">sequence</link>\n-     and <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert/associative.cc?view=markup\">associative</link>\n+     Test source for <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/viewcvs/gcc/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert/sequence.cc?view=markup\">sequence</link>\n+     and <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/viewcvs/gcc/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert/associative.cc?view=markup\">associative</link>\n      containers.\n        </para>\n \n@@ -201,7 +201,7 @@\n      on a per-thread basis, as well as measuring thread contention\n      for memory resources.\n      Test source\n-    <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert_erase/associative.cc?view=markup\">here</link>.\n+    <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/viewcvs/gcc/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert_erase/associative.cc?view=markup\">here</link>.\n        </para>\n      </listitem>\n \n@@ -211,9 +211,9 @@\n        </para>\n        <para>\n        Test source for\n-     <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc++-v3/testsuite/performance/23_containers/producer_consumer/sequence.cc?view=markup\">sequence</link>\n+     <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/viewcvs/gcc/trunk/libstdc++-v3/testsuite/performance/23_containers/producer_consumer/sequence.cc?view=markup\">sequence</link>\n      and\n-     <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc++-v3/testsuite/performance/23_containers/producer_consumer/associative.cc?view=markup\">associative</link>\n+     <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/viewcvs/gcc/trunk/libstdc++-v3/testsuite/performance/23_containers/producer_consumer/associative.cc?view=markup\">associative</link>\n      containers.\n      </para>\n      </listitem>"}, {"sha": "e89a0145490d287472e1b91025e01dc108ecb631", "filename": "libstdc++-v3/doc/xml/manual/mt_allocator.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395ec8f30c029921849c760547b2a7dc9b333088/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fmt_allocator.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395ec8f30c029921849c760547b2a7dc9b333088/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fmt_allocator.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fmt_allocator.xml?ref=395ec8f30c029921849c760547b2a7dc9b333088", "patch": "@@ -308,7 +308,7 @@ containers, this works, as an instance of the allocator is constructed\n as part of a container's constructor. However, this assumption is\n implementation-specific, and subject to change. For an example of a\n pool that frees memory, see the following\n-    <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-6.cc?view=markup\">\n+    <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/viewcvs/gcc/trunk/libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-6.cc?view=markup\">\n     example.</link>\n </para>\n "}]}