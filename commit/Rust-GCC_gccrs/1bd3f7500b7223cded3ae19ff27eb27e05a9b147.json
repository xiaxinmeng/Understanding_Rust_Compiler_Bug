{"sha": "1bd3f7500b7223cded3ae19ff27eb27e05a9b147", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJkM2Y3NTAwYjcyMjNjZGVkM2FlMTlmZjI3ZWIyN2UwNWE5YjE0Nw==", "commit": {"author": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2013-01-17T19:19:37Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2013-01-17T19:19:37Z"}, "message": "Fix PR55833.\n\nFrom-SVN: r195280", "tree": {"sha": "3822c20e0748ca647e4e66ae8d810fb118d5e225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3822c20e0748ca647e4e66ae8d810fb118d5e225"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bd3f7500b7223cded3ae19ff27eb27e05a9b147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bd3f7500b7223cded3ae19ff27eb27e05a9b147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bd3f7500b7223cded3ae19ff27eb27e05a9b147", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bd3f7500b7223cded3ae19ff27eb27e05a9b147/comments", "author": null, "committer": null, "parents": [{"sha": "7b045477e28e324070ea503d3ce1561ba774ee01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b045477e28e324070ea503d3ce1561ba774ee01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b045477e28e324070ea503d3ce1561ba774ee01"}], "stats": {"total": 74, "additions": 63, "deletions": 11}, "files": [{"sha": "773f4d7221beefd3054ead7c7aafdb932b75c797", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd3f7500b7223cded3ae19ff27eb27e05a9b147/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd3f7500b7223cded3ae19ff27eb27e05a9b147/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bd3f7500b7223cded3ae19ff27eb27e05a9b147", "patch": "@@ -1,3 +1,15 @@\n+2013-01-17  Richard Biener  <rguenther@suse.de>\n+\t    Marek Polacek  <polacek@redhat.com>\n+\n+\tPR rtl-optimization/55833\n+\t* loop-unswitch.c (unswitch_loops): Move loop verification...\n+\t(unswitch_single_loop): ...here.  Call mark_irreducible_loops.\n+\t* cfgloopmanip.c (fix_loop_placement): Add IRRED_INVALIDATED parameter.\n+\tSet it to true when we're removing a loop from hierarchy tree in\n+\tan irreducible region.\n+\t(fix_bb_placements): Adjust caller.\n+\t(fix_loop_placements): Likewise.\n+\n 2013-01-17  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/builtins.def (DEF_BUILTIN): Factor out"}, {"sha": "8c6c39de86b0a734cd209e24374d1230c4bd270c", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd3f7500b7223cded3ae19ff27eb27e05a9b147/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd3f7500b7223cded3ae19ff27eb27e05a9b147/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=1bd3f7500b7223cded3ae19ff27eb27e05a9b147", "patch": "@@ -111,10 +111,13 @@ fix_bb_placement (basic_block bb)\n /* Fix placement of LOOP inside loop tree, i.e. find the innermost superloop\n    of LOOP to that leads at least one exit edge of LOOP, and set it\n    as the immediate superloop of LOOP.  Return true if the immediate superloop\n-   of LOOP changed.  */\n+   of LOOP changed.\n+\n+   IRRED_INVALIDATED is set to true if a change in the loop structures might\n+   invalidate the information about irreducible regions.  */\n \n static bool\n-fix_loop_placement (struct loop *loop)\n+fix_loop_placement (struct loop *loop, bool *irred_invalidated)\n {\n   unsigned i;\n   edge e;\n@@ -139,7 +142,12 @@ fix_loop_placement (struct loop *loop)\n       /* The exit edges of LOOP no longer exits its original immediate\n \t superloops; remove them from the appropriate exit lists.  */\n       FOR_EACH_VEC_ELT (exits, i, e)\n-\trescan_loop_exit (e, false, false);\n+\t{\n+\t  /* We may need to recompute irreducible loops.  */\n+\t  if (e->flags & EDGE_IRREDUCIBLE_LOOP)\n+\t    *irred_invalidated = true;\n+\t  rescan_loop_exit (e, false, false);\n+\t}\n \n       ret = true;\n     }\n@@ -212,7 +220,7 @@ fix_bb_placements (basic_block from,\n       if (from->loop_father->header == from)\n \t{\n \t  /* Subloop header, maybe move the loop upward.  */\n-\t  if (!fix_loop_placement (from->loop_father))\n+\t  if (!fix_loop_placement (from->loop_father, irred_invalidated))\n \t    continue;\n \t  target_loop = loop_outer (from->loop_father);\n \t}\n@@ -965,7 +973,7 @@ fix_loop_placements (struct loop *loop, bool *irred_invalidated)\n   while (loop_outer (loop))\n     {\n       outer = loop_outer (loop);\n-      if (!fix_loop_placement (loop))\n+      if (!fix_loop_placement (loop, irred_invalidated))\n \tbreak;\n \n       /* Changing the placement of a loop in the loop tree may alter the"}, {"sha": "ded0aed3e0eb7d7d7cb01884beed9a78e715bf12", "filename": "gcc/loop-unswitch.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd3f7500b7223cded3ae19ff27eb27e05a9b147/gcc%2Floop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd3f7500b7223cded3ae19ff27eb27e05a9b147/gcc%2Floop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unswitch.c?ref=1bd3f7500b7223cded3ae19ff27eb27e05a9b147", "patch": "@@ -144,12 +144,7 @@ unswitch_loops (void)\n   /* Go through inner loops (only original ones).  */\n \n   FOR_EACH_LOOP (li, loop, LI_ONLY_INNERMOST)\n-    {\n-      unswitch_single_loop (loop, NULL_RTX, 0);\n-#ifdef ENABLE_CHECKING\n-      verify_loop_structure ();\n-#endif\n-    }\n+    unswitch_single_loop (loop, NULL_RTX, 0);\n \n   iv_analysis_done ();\n }\n@@ -369,6 +364,10 @@ unswitch_single_loop (struct loop *loop, rtx cond_checked, int num)\n   nloop = unswitch_loop (loop, bbs[i], copy_rtx_if_shared (cond), cinsn);\n   gcc_assert (nloop);\n \n+#ifdef ENABLE_CHECKING\n+  verify_loop_structure ();\n+#endif\n+\n   /* Invoke itself on modified loops.  */\n   unswitch_single_loop (nloop, rconds, num + 1);\n   unswitch_single_loop (loop, conds, num + 1);"}, {"sha": "1bd5ca36ded8a17ad1e755ba7b90a97f07cc4c64", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd3f7500b7223cded3ae19ff27eb27e05a9b147/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd3f7500b7223cded3ae19ff27eb27e05a9b147/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1bd3f7500b7223cded3ae19ff27eb27e05a9b147", "patch": "@@ -1,3 +1,8 @@\n+2013-01-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR rtl-optimization/55833\n+\t* gcc.dg/pr55833.c: New test.\n+\n 2013-01-17  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimization/55273"}, {"sha": "7a5c549d786c53ea2d6205d50b34a0ab5a4845e0", "filename": "gcc/testsuite/gcc.dg/pr55833.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd3f7500b7223cded3ae19ff27eb27e05a9b147/gcc%2Ftestsuite%2Fgcc.dg%2Fpr55833.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd3f7500b7223cded3ae19ff27eb27e05a9b147/gcc%2Ftestsuite%2Fgcc.dg%2Fpr55833.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr55833.c?ref=1bd3f7500b7223cded3ae19ff27eb27e05a9b147", "patch": "@@ -0,0 +1,28 @@\n+/* PR rtl-optimization/55833 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+int a, b, c;\n+\n+void foo()\n+{\n+    unsigned d, l, *p, k = 1;\n+\n+    if(bar())\n+    {\n+label:\n+      \tif((a = a <= 0))\n+        {\n+            if(c)\n+                d = b;\n+\n+            if (b || d ? l : k ? : 0)\n+                a = d = 0;\n+\n+            goto label;\n+       \t}\n+    }\n+\n+    while(*p++)\n+        goto label;\n+}"}]}