{"sha": "16a19648a2e33854ec971362dbb4a0ca70f19bc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZhMTk2NDhhMmUzMzg1NGVjOTcxMzYyZGJiNGEwY2E3MGYxOWJjNA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2009-12-07T15:42:55Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2009-12-07T15:42:55Z"}, "message": "re PR other/40302 (GCC must hard-require MPC before release)\n\n\tPR other/40302\n\t* builtins.c: Remove HAVE_mpc* checks throughout.\n\t* fold-const.c: Likewise.\n\t* real.h: Likewise.\n\t* toplev.c: Likewise.\n\nFrom-SVN: r155046", "tree": {"sha": "c8a3b69415bd3b0d2e00cbba0570ff527b2650c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8a3b69415bd3b0d2e00cbba0570ff527b2650c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16a19648a2e33854ec971362dbb4a0ca70f19bc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16a19648a2e33854ec971362dbb4a0ca70f19bc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16a19648a2e33854ec971362dbb4a0ca70f19bc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16a19648a2e33854ec971362dbb4a0ca70f19bc4/comments", "author": null, "committer": null, "parents": [{"sha": "197eb5a168c47dbb71bd59cd45d71751d4874037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/197eb5a168c47dbb71bd59cd45d71751d4874037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/197eb5a168c47dbb71bd59cd45d71751d4874037"}], "stats": {"total": 61, "additions": 11, "deletions": 50}, "files": [{"sha": "785a3780ce3d04f98e6f566beb656843a7f03ea1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a19648a2e33854ec971362dbb4a0ca70f19bc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a19648a2e33854ec971362dbb4a0ca70f19bc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16a19648a2e33854ec971362dbb4a0ca70f19bc4", "patch": "@@ -1,3 +1,11 @@\n+2009-12-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR other/40302\n+\t* builtins.c: Remove HAVE_mpc* checks throughout.\n+\t* fold-const.c: Likewise.\n+\t* real.h: Likewise.\n+\t* toplev.c: Likewise.\n+\n 2009-12-07  Edmar Wienskoski  <edmar@freescale.com>\n \n \t* config.gcc (cpu_is_64bit): Add new core e500mc64."}, {"sha": "532a481c647c84822c06fe2dffc2fdc900076602", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a19648a2e33854ec971362dbb4a0ca70f19bc4/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a19648a2e33854ec971362dbb4a0ca70f19bc4/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=16a19648a2e33854ec971362dbb4a0ca70f19bc4", "patch": "@@ -58,9 +58,7 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef PAD_VARARGS_DOWN\n #define PAD_VARARGS_DOWN BYTES_BIG_ENDIAN\n #endif\n-#ifdef HAVE_mpc\n static tree do_mpc_arg1 (tree, tree, int (*)(mpc_ptr, mpc_srcptr, mpc_rnd_t));\n-#endif\n \n /* Define the names of the builtin function types and codes.  */\n const char *const built_in_class_names[4]\n@@ -7152,20 +7150,17 @@ fold_builtin_cosh (location_t loc, tree arg, tree type, tree fndecl)\n    NULL_TREE if no simplification can be made.  */\n \n static tree\n-fold_builtin_ccos (location_t loc,\n-\t\t   tree arg, tree type ATTRIBUTE_UNUSED, tree fndecl,\n-\t\t   bool hyper ATTRIBUTE_UNUSED)\n+fold_builtin_ccos (location_t loc, tree arg, tree type, tree fndecl,\n+\t\t   bool hyper)\n {\n   if (validate_arg (arg, COMPLEX_TYPE)\n       && TREE_CODE (TREE_TYPE (TREE_TYPE (arg))) == REAL_TYPE)\n     {\n       tree tmp;\n \n-#ifdef HAVE_mpc\n       /* Calculate the result when the argument is a constant.  */\n       if ((tmp = do_mpc_arg1 (arg, type, (hyper ? mpc_cosh : mpc_cos))))\n \treturn tmp;\n-#endif\n \n       /* Optimize fn(-x) into fn(x).  */\n       if ((tmp = fold_strip_sign_ops (arg)))\n@@ -7250,19 +7245,15 @@ fold_builtin_cexp (location_t loc, tree arg0, tree type)\n {\n   tree rtype;\n   tree realp, imagp, ifn;\n-#ifdef HAVE_mpc\n   tree res;\n-#endif\n \n   if (!validate_arg (arg0, COMPLEX_TYPE)\n       || TREE_CODE (TREE_TYPE (TREE_TYPE (arg0))) != REAL_TYPE)\n     return NULL_TREE;\n \n-#ifdef HAVE_mpc\n   /* Calculate the result when the argument is a constant.  */\n   if ((res = do_mpc_arg1 (arg0, type, mpc_exp)))\n     return res;\n-#endif\n \n   rtype = TREE_TYPE (TREE_TYPE (arg0));\n \n@@ -9700,7 +9691,6 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0, bool ignore)\n     CASE_FLT_FN (BUILT_IN_CCOSH):\n       return fold_builtin_ccos(loc, arg0, type, fndecl, /*hyper=*/ true);\n \n-#ifdef HAVE_mpc\n     CASE_FLT_FN (BUILT_IN_CSIN):\n       if (validate_arg (arg0, COMPLEX_TYPE)\n \t  && TREE_CODE (TREE_TYPE (TREE_TYPE (arg0))) == REAL_TYPE)\n@@ -9737,7 +9727,6 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0, bool ignore)\n \treturn do_mpc_arg1 (arg0, type, mpc_sqrt);\n     break;\n \n-#ifdef HAVE_mpc_arc\n     CASE_FLT_FN (BUILT_IN_CASIN):\n       if (validate_arg (arg0, COMPLEX_TYPE)\n \t  && TREE_CODE (TREE_TYPE (TREE_TYPE (arg0))) == REAL_TYPE)\n@@ -9773,8 +9762,6 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0, bool ignore)\n \t  && TREE_CODE (TREE_TYPE (TREE_TYPE (arg0))) == REAL_TYPE)\n \treturn do_mpc_arg1 (arg0, type, mpc_atanh);\n     break;\n-#endif /* HAVE_mpc_arc */\n-#endif /* HAVE_mpc */\n \n     CASE_FLT_FN (BUILT_IN_CABS):\n       return fold_builtin_cabs (loc, arg0, type, fndecl);\n@@ -10092,15 +10079,13 @@ fold_builtin_2 (location_t loc, tree fndecl, tree arg0, tree arg1, bool ignore)\n     CASE_FLT_FN (BUILT_IN_HYPOT):\n       return fold_builtin_hypot (loc, fndecl, arg0, arg1, type);\n \n-#ifdef HAVE_mpc_pow\n     CASE_FLT_FN (BUILT_IN_CPOW):\n       if (validate_arg (arg0, COMPLEX_TYPE)\n \t  && TREE_CODE (TREE_TYPE (TREE_TYPE (arg0))) == REAL_TYPE\n \t  && validate_arg (arg1, COMPLEX_TYPE)\n \t  && TREE_CODE (TREE_TYPE (TREE_TYPE (arg1))) == REAL_TYPE)\n \treturn do_mpc_arg2 (arg0, arg1, type, /*do_nonfinite=*/ 0, mpc_pow);\n     break;\n-#endif\n \n     CASE_FLT_FN (BUILT_IN_LDEXP):\n       return fold_builtin_load_exponent (loc, arg0, arg1, type, /*ldexp=*/true);\n@@ -12720,7 +12705,6 @@ do_mpfr_ckconv (mpfr_srcptr m, tree type, int inexact)\n   return NULL_TREE;\n }\n \n-#ifdef HAVE_mpc\n /* Helper function for do_mpc_arg*().  Ensure M is a normal complex\n    number and no overflow/underflow occurred.  INEXACT is true if M\n    was not exactly calculated.  TYPE is the tree type for the result.\n@@ -12767,7 +12751,6 @@ do_mpc_ckconv (mpc_srcptr m, tree type, int inexact, int force_convert)\n     }\n   return NULL_TREE;\n }\n-#endif /* HAVE_mpc */\n \n /* If argument ARG is a REAL_CST, call the one-argument mpfr function\n    FUNC on it and return the resulting value as a tree with type TYPE.\n@@ -13165,7 +13148,6 @@ do_mpfr_lgamma_r (tree arg, tree arg_sg, tree type)\n   return result;\n }\n \n-#ifdef HAVE_mpc\n /* If argument ARG is a COMPLEX_CST, call the one-argument mpc\n    function FUNC on it and return the resulting value as a tree with\n    type TYPE.  The mpfr precision is set to the precision of TYPE.  We\n@@ -13219,7 +13201,6 @@ do_mpc_arg1 (tree arg, tree type, int (*func)(mpc_ptr, mpc_srcptr, mpc_rnd_t))\n    DO_NONFINITE is true, then fold expressions containing Inf or NaN\n    in the arguments and/or results.  */\n \n-#ifdef HAVE_mpc\n tree\n do_mpc_arg2 (tree arg0, tree arg1, tree type, int do_nonfinite,\n \t     int (*func)(mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t))\n@@ -13270,8 +13251,6 @@ do_mpc_arg2 (tree arg0, tree arg1, tree type, int do_nonfinite,\n \n   return result;\n }\n-# endif\n-#endif /* HAVE_mpc */\n \n /* FIXME tuples.\n    The functions below provide an alternate interface for folding"}, {"sha": "e1126219689c4bc1cac7dacb4634e183ef942b2a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a19648a2e33854ec971362dbb4a0ca70f19bc4/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a19648a2e33854ec971362dbb4a0ca70f19bc4/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=16a19648a2e33854ec971362dbb4a0ca70f19bc4", "patch": "@@ -1962,12 +1962,10 @@ const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n \t  break;\n \n \tcase MULT_EXPR:\n-#ifdef HAVE_mpc\n \t  if (COMPLEX_FLOAT_TYPE_P (type))\n \t    return do_mpc_arg2 (arg1, arg2, type,\n \t\t\t\t/* do_nonfinite= */ folding_initializer,\n \t\t\t\tmpc_mul);\n-#endif\n \n \t  real = const_binop (MINUS_EXPR,\n \t\t\t      const_binop (MULT_EXPR, r1, r2, notrunc),\n@@ -1980,14 +1978,11 @@ const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n \t  break;\n \n \tcase RDIV_EXPR:\n-#ifdef HAVE_mpc\n \t  if (COMPLEX_FLOAT_TYPE_P (type))\n \t    return do_mpc_arg2 (arg1, arg2, type,\n                                 /* do_nonfinite= */ folding_initializer,\n \t\t\t\tmpc_div);\n \t  /* Fallthru ... */\n-#endif\n-\n \tcase TRUNC_DIV_EXPR:\n \tcase CEIL_DIV_EXPR:\n \tcase FLOOR_DIV_EXPR:"}, {"sha": "e6fa0d2d859619144e139f5215fb13b2cede923a", "filename": "gcc/real.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a19648a2e33854ec971362dbb4a0ca70f19bc4/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a19648a2e33854ec971362dbb4a0ca70f19bc4/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=16a19648a2e33854ec971362dbb4a0ca70f19bc4", "patch": "@@ -24,18 +24,8 @@\n #ifndef GENERATOR_FILE\n #include <gmp.h>\n #include <mpfr.h>\n-#ifdef HAVE_mpc\n #include <mpc.h>\n-# ifdef HAVE_mpc\n extern tree do_mpc_arg2 (tree, tree, tree, int, int (*)(mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t));\n-# endif\n-# if MPC_VERSION >= MPC_VERSION_NUM(0,6,1)\n-#  define HAVE_mpc_pow\n-# endif\n-# if MPC_VERSION >= MPC_VERSION_NUM(0,7,1)\n-#  define HAVE_mpc_arc\n-# endif\n-#endif\n #endif\n #include \"machmode.h\"\n "}, {"sha": "7b7475489e31425ba649094a1bdfce5320d9bdd7", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a19648a2e33854ec971362dbb4a0ca70f19bc4/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a19648a2e33854ec971362dbb4a0ca70f19bc4/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=16a19648a2e33854ec971362dbb4a0ca70f19bc4", "patch": "@@ -1198,13 +1198,8 @@ print_version (FILE *file, const char *indent)\n     N_(\"%s%s%s %sversion %s (%s) compiled by CC, \")\n #endif\n     ;\n-#ifdef HAVE_mpc\n   static const char fmt2[] =\n     N_(\"GMP version %s, MPFR version %s, MPC version %s\\n\");\n-#else\n-  static const char fmt2[] =\n-    N_(\"GMP version %s, MPFR version %s\\n\");\n-#endif\n   static const char fmt3[] =\n     N_(\"%s%swarning: %s header version %s differs from library version %s.\\n\");\n   static const char fmt4[] =\n@@ -1236,11 +1231,7 @@ print_version (FILE *file, const char *indent)\n #endif\n   fprintf (file,\n \t   file == stderr ? _(fmt2) : fmt2,\n-\t   GCC_GMP_STRINGIFY_VERSION, MPFR_VERSION_STRING\n-#ifdef HAVE_mpc\n-\t   , MPC_VERSION_STRING\n-#endif\n-\t   );\n+\t   GCC_GMP_STRINGIFY_VERSION, MPFR_VERSION_STRING, MPC_VERSION_STRING);\n   if (strcmp (GCC_GMP_STRINGIFY_VERSION, gmp_version))\n     fprintf (file,\n \t     file == stderr ? _(fmt3) : fmt3,\n@@ -1251,13 +1242,11 @@ print_version (FILE *file, const char *indent)\n \t     file == stderr ? _(fmt3) : fmt3,\n \t     indent, *indent != 0 ? \" \" : \"\",\n \t     \"MPFR\", MPFR_VERSION_STRING, mpfr_get_version ());\n-#ifdef HAVE_mpc\n   if (strcmp (MPC_VERSION_STRING, mpc_get_version ()))\n     fprintf (file,\n \t     file == stderr ? _(fmt3) : fmt3,\n \t     indent, *indent != 0 ? \" \" : \"\",\n \t     \"MPC\", MPC_VERSION_STRING, mpc_get_version ());\n-#endif\n   fprintf (file,\n \t   file == stderr ? _(fmt4) : fmt4,\n \t   indent, *indent != 0 ? \" \" : \"\","}]}