{"sha": "c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0", "node_id": "C_kwDOANBUbNoAKGM4Zjc2N2IyYzAwYWM5YzE2MzRjN2ZlZTU5MzcyYjFlMWU2ZDViYzA", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-12-16T00:17:46Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-12-16T00:17:46Z"}, "message": "Daily bump.", "tree": {"sha": "d2c959e0fb9462323be7e882c38133c558a8080c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2c959e0fb9462323be7e882c38133c558a8080c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0/comments", "author": null, "committer": null, "parents": [{"sha": "e79d51963378b10ab90544a7d8eeb6266e9a57f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79d51963378b10ab90544a7d8eeb6266e9a57f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e79d51963378b10ab90544a7d8eeb6266e9a57f6"}], "stats": {"total": 236, "additions": 235, "deletions": 1}, "files": [{"sha": "43aa6692fa3abea28630b1d130eae65c66421452", "filename": "gcc/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0", "patch": "@@ -1,3 +1,54 @@\n+2022-12-15  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\t* ira-costs.cc: Include print-rtl.h.\n+\t(record_reg_classes, scan_one_insn): Add code to print debug info.\n+\t* ira.cc (ira_init_register_move_cost): Check that at least one hard\n+\treg of the mode are in the class contents to calculate the\n+\tregister move costs.\n+\n+2022-12-15  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\t* doc/extend.texi (__builtin_dynamic_object_size): Document\n+\tbuiltin.\n+\t* doc/passes.texi\n+\t(Optimize calls to @code{__builtin_object_size}): Also mention\n+\t__builtin_dynamic_object_size.\n+\n+2022-12-15  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\tPR middle-end/70090\n+\t* doc/invoke.texi (-fsanitize=object-size): Use\n+\t__builtin_dynamic_object_size instead of\n+\t__builtin_object_size.\n+\n+2022-12-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/108086\n+\t* tree-inline.cc (copy_edges_for_bb): Walk stmts backwards for\n+\tsplitting the block to avoid quadratic behavior with setting\n+\tstmts BB on multliple splits.\n+\n+2022-12-15  Spacetown  <michael.foerderer@gmx.de>\n+\n+\tPR gcov-profile/107537\n+\t* gcov.cc (output_branch_count): Add annotation '(fallthrough)'\n+\tor '(throw)' also to uncovered branches.\n+\n+2022-12-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/108086\n+\t* tree-inline.cc (copy_edges_for_bb): Do not update all\n+\tstmts again.\n+\n+2022-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108095\n+\t* tree-into-ssa.cc (maybe_register_def): Insert debug stmt\n+\ton all non-EH edges from asm goto if they have a single\n+\tpredecessor rather than asserting there is at most one such edge.\n+\tTest whether there are no PHI nodes next to the single predecessor\n+\ttest.\n+\n 2022-12-14  David Faust  <david.faust@oracle.com>\n \n \tPR target/106773"}, {"sha": "0891de734e93ab8393f6d3d951063f1d77c94246", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0", "patch": "@@ -1 +1 @@\n-20221215\n+20221216"}, {"sha": "0c8d3fcc5bd4f1ab327cf9a2b4d9dcb2413eea7e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0", "patch": "@@ -1,3 +1,81 @@\n+2022-12-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/102104\n+\tPR c++/108090\n+\t* error.cc (dump_decl) <case USING_DECL>: Look through a\n+\tpack expansion in the name as well.\n+\t* parser.cc (cp_parser_using_declaration): Handle a parameter\n+\tpack appearing in the terminal name of a variadic using-decl.\n+\t* pt.cc (tsubst_decl) <case USING_DECL>: Likewise.  Combine the\n+\thandling of variadic and non-variadic using-decls.\n+\n+2022-12-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* init.cc (build_vec_init): Rename \"flags\" to \"cleanup_flags\"\n+\tto distinguish from LOOKUP_*.\n+\n+2022-12-15  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n+\n+\t* mangle.cc (write_encoding): Move contract pre/post function\n+\tmangling from here...\n+\t(write_mangled_name): ... to here, and make it happen always.\n+\n+2022-12-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/107188\n+\t* parser.cc (cp_parser_using_declaration): Give up early if the\n+\tscope of an access-declaration isn't possibly a class type.\n+\n+2022-12-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100295\n+\tPR c++/107579\n+\t* pt.cc (el_data::skip_unevaluated_operands): New data member.\n+\t(extract_locals_r): If skip_unevaluated_operands is true,\n+\tdon't walk into unevaluated contexts.\n+\t(extract_local_specs): Walk the pattern twice, first with\n+\tskip_unevaluated_operands true followed by it set to false.\n+\n+2022-12-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/105518\n+\t* pt.cc (tsubst_aggr_type): Handle typedefs by delegating to\n+\ttsubst and adjusting the result if entering_scope.  Split out\n+\tthe main part of the function into ...\n+\t(tsubst_aggr_type_1) ... here.\n+\t(tsubst): Use tsubst_aggr_type_1 instead of tsubst_aggr_type.\n+\tHandle TYPE_PTRMEMFUNC_P RECORD_TYPEs here instead of in\n+\ttsubst_aggr_type_1.\n+\n+2022-12-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/108104\n+\t* pt.cc (unify) <default>: Relax assert to accept any\n+\tCONSTRUCTOR parm, not just COMPOUND_LITERAL_P one.\n+\n+2022-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/107065\n+\t* typeck.cc (cp_build_unary_op) <case TRUTH_NOT_EXPR>: If\n+\tinvert_truthvalue_loc returns obvalue_p, wrap it into NON_LVALUE_EXPR.\n+\t* parser.cc (cp_parser_binary_expression): Don't call\n+\twarn_logical_not_parentheses if current.lhs is a NON_LVALUE_EXPR\n+\tof a decl with boolean type.\n+\n+2022-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/108075\n+\t* rtti.cc (emit_support_tinfos): Add pointers to\n+\t{bfloat16,float{16,32,64,128,32x,64x,128x}}_type_node to fundamentals\n+\tarray.\n+\n+2022-12-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108071\n+\tPR c++/105838\n+\t* call.cc (struct conversion_obstack_sentinel): New.\n+\t(maybe_init_list_as_array): Compare conversion of dummy argument.\n+\n 2022-12-12  Jason Merrill  <jason@redhat.com>\n \n \tRevert:"}, {"sha": "c23beec42c02afbc298e09a1338283c909899688", "filename": "gcc/m2/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0/gcc%2Fm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0/gcc%2Fm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2FChangeLog?ref=c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0", "patch": "@@ -1,3 +1,14 @@\n+2022-12-15  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* configure.ac: Stop probing for realpath.\n+\t* tools-src/calcpath: Break dependency on realpath, cut\n+\tand echo.\n+\t* configure: Rebuilt.\n+\n+2022-12-15  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* gm2config.h.in: Rebuilt.\n+\n 2022-12-14  Gaius Mulley  <gaiusmod2@gmail.com>\n \n \t* COPYING.FDL: New file."}, {"sha": "a509defefaf4237c5a91a2fa4d4f0c28d239de4e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0", "patch": "@@ -1,3 +1,77 @@\n+2022-12-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/102104\n+\tPR c++/108090\n+\t* g++.dg/cpp1z/using-variadic1.C: New test.\n+\t* g++.dg/cpp1z/using-variadic1a.C: New test.\n+\t* g++.dg/cpp1z/using-variadic1b.C: New test.\n+\t* g++.dg/cpp1z/using-variadic1c.C: New test.\n+\t* g++.dg/cpp1z/using-variadic2.C: New test.\n+\t* g++.dg/cpp1z/using-variadic3.C: New test.\n+\n+2022-12-15  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n+\n+\t* g++.dg/contracts/contracts-externC.C: New test.\n+\n+2022-12-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/107188\n+\t* g++.dg/cpp2a/concepts-placeholder11.C: New test.\n+\n+2022-12-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100295\n+\tPR c++/107579\n+\t* g++.dg/cpp1z/constexpr-if-lambda5.C: New test.\n+\n+2022-12-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/105518\n+\t* g++.dg/cpp0x/lambda/lambda-alias1.C: New test.\n+\n+2022-12-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/108104\n+\t* g++.dg/template/ptrmem33.C: New test.\n+\n+2022-12-15  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\t* gcc.target/avr/pr90706.c: New.\n+\n+2022-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/107065\n+\t* g++.dg/cpp0x/pr107065.C: New test.\n+\n+2022-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/108075\n+\t* g++.dg/cpp23/ext-floating13.C: New test.\n+\n+2022-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lib/target-supports.exp (check_compile): Further quoting\n+\tfixes for /* Assembly, /* ObjC and (* Modula-2 *) checks.\n+\n+2022-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lib/target-supports.exp (check_compile): Add support for\n+\tRust and Modula-2.  Use \\* rather than * for /* comment for\n+\tAssembly.\n+\n+2022-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108095\n+\t* gcc.dg/pr108095.c: New test.\n+\n+2022-12-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108071\n+\tPR c++/105838\n+\t* g++.dg/cpp0x/initlist131.C: New test.\n+\t* g++.dg/cpp0x/initlist132.C: New test.\n+\t* g++.dg/cpp0x/initlist133.C: New test.\n+\n 2022-12-14  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/108065"}, {"sha": "8ebc0c107a320ad1a13d542ecfccf52a94976664", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0", "patch": "@@ -1,3 +1,10 @@\n+2022-12-15  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR libfortran/108056\n+\t* runtime/ISO_Fortran_binding.c (cfi_desc_to_gfc_desc,\n+\tgfc_desc_to_cfi_desc): Mostly revert to GCC 11 version for\n+\tthose backward-compatiblity-only functions.\n+\n 2022-10-12  Martin Liska  <mliska@suse.cz>\n \n \t* configure: Regenerate."}, {"sha": "c1f7bd6ccb92c0b603694142d1e07afaa6e3513b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0", "patch": "@@ -1,3 +1,8 @@\n+2022-12-15  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR libfortran/108056\n+\t* testsuite/libgomp.fortran/allocate-4.f90: New file.\n+\n 2022-12-14  Julian Brown  <julian@codesourcery.com>\n \n \t* testsuite/libgomp.fortran/combined-directive-splitting-1.f90: New"}, {"sha": "a32cff8e421a83cc3a050458b7f23df0ee94a6f8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0", "patch": "@@ -1,3 +1,11 @@\n+2022-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/108075\n+\t* config/abi/pre/gnu.ver (CXXABI_1.3.14): Export\n+\t_ZTIDF[0-9]*[_bx], _ZTIPDF[0-9]*[_bx] and _ZTIPKDF[0-9]*[_bx].\n+\t* testsuite/util/testsuite_abi.cc (check_version): Handle\n+\tCXXABI_1.3.14.\n+\n 2022-12-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/108097"}]}