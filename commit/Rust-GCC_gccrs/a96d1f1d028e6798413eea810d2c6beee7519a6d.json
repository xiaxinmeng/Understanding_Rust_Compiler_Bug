{"sha": "a96d1f1d028e6798413eea810d2c6beee7519a6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk2ZDFmMWQwMjhlNjc5ODQxM2VlYTgxMGQyYzZiZWVlNzUxOWE2ZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-12-08T01:51:04Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-12-08T01:51:04Z"}, "message": "Split class rtx_reader into md_reader vs rtx_reader\n\nThis moves read_rtx and friends into rtx_reader, and splits\nrtx_reader into two classes:\n\nclass md_reader: has responsibility for reading chars, managing\ninclude files, top-level directives etc.  It is the read-md.o part.\n\nclass rtx_reader, a subclass, has the code for reading hierarchical\nrtx expressions using the format codes.   It is the read-rtl.o part.\n\nThis split is needed by a followup patch, which converts\nread_rtx_operand to a virtual function of rtx_reader.  To do this,\ninstances of rtx_reader (or its subclasses) need a vtable, which\nneeds to include a ptr to the code in read-rtl.o.  Splitting it up\nallows the gen* tools that currently purely use read-md.o to continue\nto do so.\n\ngcc/ChangeLog:\n\t* genpreds.c (write_tm_constrs_h): Update for renaming of\n\trtx_reader_ptr to md_reader_ptr.\n\t(write_tm_preds_h): Likewise.\n\t(write_insn_preds_c): Likewise.\n\t* read-md.c (rtx_reader_ptr): Rename to...\n\t(md_reader_ptr): ...this, and convert from an\n\trtx_reader * to a md_reader *.\n\t(rtx_reader::set_md_ptr_loc): Rename to...\n\t(md_reader::set_md_ptr_loc): ...this.\n\t(rtx_reader::get_md_ptr_loc): Rename to...\n\t(md_reader::get_md_ptr_loc): ...this.\n\t(rtx_reader::copy_md_ptr_loc): Rename to...\n\t(md_reader::copy_md_ptr_loc): ...this.\n\t(rtx_reader::fprint_md_ptr_loc): Rename to...\n\t(md_reader::fprint_md_ptr_loc): ...this.\n\t(rtx_reader::print_md_ptr_loc): Rename to...\n\t(md_reader::print_md_ptr_loc): ...this.\n\t(rtx_reader::join_c_conditions): Rename to...\n\t(md_reader::join_c_conditions): ...this.\n\t(rtx_reader::fprint_c_condition): ...this.\n\t(rtx_reader::print_c_condition): Rename to...\n\t(md_reader::print_c_condition): ...this.\n\t(fatal_with_file_and_line):  Update for renaming of\n\trtx_reader_ptr to md_reader_ptr.\n\t(rtx_reader::require_char): Rename to...\n\t(md_reader::require_char): ...this.\n\t(rtx_reader::require_char_ws): Rename to...\n\t(md_reader::require_char_ws): ...this.\n\t(rtx_reader::require_word_ws): Rename to...\n\t(md_reader::require_word_ws): ...this.\n\t(rtx_reader::read_char): Rename to...\n\t(md_reader::read_char): ...this.\n\t(rtx_reader::unread_char): Rename to...\n\t(md_reader::unread_char): ...this.\n\t(rtx_reader::peek_char): Rename to...\n\t(md_reader::peek_char): ...this.\n\t(rtx_reader::read_name): Rename to...\n\t(md_reader::read_name): ...this.\n\t(rtx_reader::read_escape): Rename to...\n\t(md_reader::read_escape): ...this.\n\t(rtx_reader::read_quoted_string): Rename to...\n\t(md_reader::read_quoted_string): ...this.\n\t(rtx_reader::read_braced_string): Rename to...\n\t(md_reader::read_braced_string): ...this.\n\t(rtx_reader::read_string): Rename to...\n\t(md_reader::read_string): ...this.\n\t(rtx_reader::read_skip_construct): Rename to...\n\t(md_reader::read_skip_construct): ...this.\n\t(rtx_reader::handle_constants): Rename to...\n\t(md_reader::handle_constants): ...this.\n\t(rtx_reader::traverse_md_constants): Rename to...\n\t(md_reader::traverse_md_constants): ...this.\n\t(rtx_reader::handle_enum): Rename to...\n\t(md_reader::handle_enum): ...this.\n\t(rtx_reader::lookup_enum_type): Rename to...\n\t(md_reader::lookup_enum_type): ...this.\n\t(rtx_reader::traverse_enum_types): Rename to...\n\t(md_reader::traverse_enum_types): ...this.\n\t(rtx_reader::rtx_reader): Rename to...\n\t(md_reader::md_reader): ...this, and update for renaming of\n\trtx_reader_ptr to md_reader_ptr.\n\t(rtx_reader::~rtx_reader): Rename to...\n\t(md_reader::~md_reader): ...this, and update for renaming of\n\trtx_reader_ptr to md_reader_ptr.\n\t(rtx_reader::handle_include): Rename to...\n\t(md_reader::handle_include): ...this.\n\t(rtx_reader::handle_file): Rename to...\n\t(md_reader::handle_file): ...this.\n\t(rtx_reader::handle_toplevel_file): Rename to...\n\t(md_reader::handle_toplevel_file): ...this.\n\t(rtx_reader::get_current_location): Rename to...\n\t(md_reader::get_current_location): ...this.\n\t(rtx_reader::add_include_path): Rename to...\n\t(md_reader::add_include_path): ...this.\n\t(rtx_reader::read_md_files): Rename to...\n\t(md_reader::read_md_files): ...this.\n\t* read-md.h (class rtx_reader): Split into...\n\t(class md_reader): ...new class.\n\t(rtx_reader_ptr): Rename to...\n\t(md_reader_ptr): ...this, and convert to a md_reader *.\n\t(class noop_reader): Update base class to be md_reader.\n\t(class rtx_reader): Reintroduce as a subclass of md_reader.\n\t(rtx_reader_ptr): Reintroduce as a rtx_reader *.\n\t(read_char): Update for renaming of rtx_reader_ptr to\n\tmd_reader_ptr.\n\t(unread_char): Likewise.\n\t* read-rtl.c (rtx_reader_ptr): New global.\n\t(rtx_reader::apply_iterator_to_string): Rename to...\n\t(md_reader::apply_iterator_to_string): ...this.\n\t(rtx_reader::copy_rtx_for_iterators): Rename to...\n\t(md_reader::copy_rtx_for_iterators): ...this.\n\t(rtx_reader::read_conditions): Rename to...\n\t(md_reader::read_conditions): ...this.\n\t(rtx_reader::record_potential_iterator_use): Rename to...\n\t(md_reader::record_potential_iterator_use): ...this.\n\t(rtx_reader::read_mapping): Rename to...\n\t(md_reader::read_mapping): ...this.\n\t(rtx_reader::read_rtx): Use rtx_reader_ptr when calling\n\tread_rtx_code.\n\t(rtx_reader::read_rtx_operand): Use get_string_obstack rather\n\tthan directly accessing m_string_obstack.\n\t(rtx_reader::rtx_reader): New ctor.\n\t(rtx_reader::~rtx_reader): New dtor.\n\nFrom-SVN: r243426", "tree": {"sha": "da9a5cde31da5a0cbf3f908e0e00f5e09114b9f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da9a5cde31da5a0cbf3f908e0e00f5e09114b9f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a96d1f1d028e6798413eea810d2c6beee7519a6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a96d1f1d028e6798413eea810d2c6beee7519a6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a96d1f1d028e6798413eea810d2c6beee7519a6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a96d1f1d028e6798413eea810d2c6beee7519a6d/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "776a8a927eeeb7ea3c13b6a981f340591dcef530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/776a8a927eeeb7ea3c13b6a981f340591dcef530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/776a8a927eeeb7ea3c13b6a981f340591dcef530"}], "stats": {"total": 304, "additions": 231, "deletions": 73}, "files": [{"sha": "929bf4d7ac741bd6fad84305f3e11d07452e9fdd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96d1f1d028e6798413eea810d2c6beee7519a6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96d1f1d028e6798413eea810d2c6beee7519a6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a96d1f1d028e6798413eea810d2c6beee7519a6d", "patch": "@@ -1,3 +1,109 @@\n+2016-12-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* genpreds.c (write_tm_constrs_h): Update for renaming of\n+\trtx_reader_ptr to md_reader_ptr.\n+\t(write_tm_preds_h): Likewise.\n+\t(write_insn_preds_c): Likewise.\n+\t* read-md.c (rtx_reader_ptr): Rename to...\n+\t(md_reader_ptr): ...this, and convert from an\n+\trtx_reader * to a md_reader *.\n+\t(rtx_reader::set_md_ptr_loc): Rename to...\n+\t(md_reader::set_md_ptr_loc): ...this.\n+\t(rtx_reader::get_md_ptr_loc): Rename to...\n+\t(md_reader::get_md_ptr_loc): ...this.\n+\t(rtx_reader::copy_md_ptr_loc): Rename to...\n+\t(md_reader::copy_md_ptr_loc): ...this.\n+\t(rtx_reader::fprint_md_ptr_loc): Rename to...\n+\t(md_reader::fprint_md_ptr_loc): ...this.\n+\t(rtx_reader::print_md_ptr_loc): Rename to...\n+\t(md_reader::print_md_ptr_loc): ...this.\n+\t(rtx_reader::join_c_conditions): Rename to...\n+\t(md_reader::join_c_conditions): ...this.\n+\t(rtx_reader::fprint_c_condition): ...this.\n+\t(rtx_reader::print_c_condition): Rename to...\n+\t(md_reader::print_c_condition): ...this.\n+\t(fatal_with_file_and_line):  Update for renaming of\n+\trtx_reader_ptr to md_reader_ptr.\n+\t(rtx_reader::require_char): Rename to...\n+\t(md_reader::require_char): ...this.\n+\t(rtx_reader::require_char_ws): Rename to...\n+\t(md_reader::require_char_ws): ...this.\n+\t(rtx_reader::require_word_ws): Rename to...\n+\t(md_reader::require_word_ws): ...this.\n+\t(rtx_reader::read_char): Rename to...\n+\t(md_reader::read_char): ...this.\n+\t(rtx_reader::unread_char): Rename to...\n+\t(md_reader::unread_char): ...this.\n+\t(rtx_reader::peek_char): Rename to...\n+\t(md_reader::peek_char): ...this.\n+\t(rtx_reader::read_name): Rename to...\n+\t(md_reader::read_name): ...this.\n+\t(rtx_reader::read_escape): Rename to...\n+\t(md_reader::read_escape): ...this.\n+\t(rtx_reader::read_quoted_string): Rename to...\n+\t(md_reader::read_quoted_string): ...this.\n+\t(rtx_reader::read_braced_string): Rename to...\n+\t(md_reader::read_braced_string): ...this.\n+\t(rtx_reader::read_string): Rename to...\n+\t(md_reader::read_string): ...this.\n+\t(rtx_reader::read_skip_construct): Rename to...\n+\t(md_reader::read_skip_construct): ...this.\n+\t(rtx_reader::handle_constants): Rename to...\n+\t(md_reader::handle_constants): ...this.\n+\t(rtx_reader::traverse_md_constants): Rename to...\n+\t(md_reader::traverse_md_constants): ...this.\n+\t(rtx_reader::handle_enum): Rename to...\n+\t(md_reader::handle_enum): ...this.\n+\t(rtx_reader::lookup_enum_type): Rename to...\n+\t(md_reader::lookup_enum_type): ...this.\n+\t(rtx_reader::traverse_enum_types): Rename to...\n+\t(md_reader::traverse_enum_types): ...this.\n+\t(rtx_reader::rtx_reader): Rename to...\n+\t(md_reader::md_reader): ...this, and update for renaming of\n+\trtx_reader_ptr to md_reader_ptr.\n+\t(rtx_reader::~rtx_reader): Rename to...\n+\t(md_reader::~md_reader): ...this, and update for renaming of\n+\trtx_reader_ptr to md_reader_ptr.\n+\t(rtx_reader::handle_include): Rename to...\n+\t(md_reader::handle_include): ...this.\n+\t(rtx_reader::handle_file): Rename to...\n+\t(md_reader::handle_file): ...this.\n+\t(rtx_reader::handle_toplevel_file): Rename to...\n+\t(md_reader::handle_toplevel_file): ...this.\n+\t(rtx_reader::get_current_location): Rename to...\n+\t(md_reader::get_current_location): ...this.\n+\t(rtx_reader::add_include_path): Rename to...\n+\t(md_reader::add_include_path): ...this.\n+\t(rtx_reader::read_md_files): Rename to...\n+\t(md_reader::read_md_files): ...this.\n+\t* read-md.h (class rtx_reader): Split into...\n+\t(class md_reader): ...new class.\n+\t(rtx_reader_ptr): Rename to...\n+\t(md_reader_ptr): ...this, and convert to a md_reader *.\n+\t(class noop_reader): Update base class to be md_reader.\n+\t(class rtx_reader): Reintroduce as a subclass of md_reader.\n+\t(rtx_reader_ptr): Reintroduce as a rtx_reader *.\n+\t(read_char): Update for renaming of rtx_reader_ptr to\n+\tmd_reader_ptr.\n+\t(unread_char): Likewise.\n+\t* read-rtl.c (rtx_reader_ptr): New global.\n+\t(rtx_reader::apply_iterator_to_string): Rename to...\n+\t(md_reader::apply_iterator_to_string): ...this.\n+\t(rtx_reader::copy_rtx_for_iterators): Rename to...\n+\t(md_reader::copy_rtx_for_iterators): ...this.\n+\t(rtx_reader::read_conditions): Rename to...\n+\t(md_reader::read_conditions): ...this.\n+\t(rtx_reader::record_potential_iterator_use): Rename to...\n+\t(md_reader::record_potential_iterator_use): ...this.\n+\t(rtx_reader::read_mapping): Rename to...\n+\t(md_reader::read_mapping): ...this.\n+\t(rtx_reader::read_rtx): Use rtx_reader_ptr when calling\n+\tread_rtx_code.\n+\t(rtx_reader::read_rtx_operand): Use get_string_obstack rather\n+\tthan directly accessing m_string_obstack.\n+\t(rtx_reader::rtx_reader): New ctor.\n+\t(rtx_reader::~rtx_reader): New dtor.\n+\n 2016-12-07  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/77784"}, {"sha": "58e92382671d0a007d40bc56aeaf72a90fed5d37", "filename": "gcc/genpreds.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96d1f1d028e6798413eea810d2c6beee7519a6d/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96d1f1d028e6798413eea810d2c6beee7519a6d/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=a96d1f1d028e6798413eea810d2c6beee7519a6d", "patch": "@@ -1205,7 +1205,7 @@ write_tm_constrs_h (void)\n   printf (\"\\\n /* Generated automatically by the program '%s'\\n\\\n    from the machine description file '%s'.  */\\n\\n\", progname,\n-\t  rtx_reader_ptr->get_top_level_filename ());\n+\t  md_reader_ptr->get_top_level_filename ());\n \n   puts (\"\\\n #ifndef GCC_TM_CONSTRS_H\\n\\\n@@ -1405,7 +1405,7 @@ write_tm_preds_h (void)\n   printf (\"\\\n /* Generated automatically by the program '%s'\\n\\\n    from the machine description file '%s'.  */\\n\\n\", progname,\n-\t  rtx_reader_ptr->get_top_level_filename ());\n+\t  md_reader_ptr->get_top_level_filename ());\n \n   puts (\"\\\n #ifndef GCC_TM_PREDS_H\\n\\\n@@ -1555,7 +1555,7 @@ write_insn_preds_c (void)\n   printf (\"\\\n /* Generated automatically by the program '%s'\\n\\\n    from the machine description file '%s'.  */\\n\\n\", progname,\n-\t  rtx_reader_ptr->get_top_level_filename ());\n+\t  md_reader_ptr->get_top_level_filename ());\n \n   puts (\"\\\n #include \\\"config.h\\\"\\n\\"}, {"sha": "6d9a1bd01b0ca1d37d48334d036aa9f3e76a82f1", "filename": "gcc/read-md.c", "status": "modified", "additions": 46, "deletions": 44, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96d1f1d028e6798413eea810d2c6beee7519a6d/gcc%2Fread-md.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96d1f1d028e6798413eea810d2c6beee7519a6d/gcc%2Fread-md.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-md.c?ref=a96d1f1d028e6798413eea810d2c6beee7519a6d", "patch": "@@ -39,7 +39,7 @@ void (*include_callback) (const char *);\n \n /* Global singleton.  */\n \n-rtx_reader *rtx_reader_ptr;\n+md_reader *md_reader_ptr;\n \n /* Given an object that starts with a char * name field, return a hash\n    code for its name.  */\n@@ -79,7 +79,7 @@ leading_ptr_eq_p (const void *def1, const void *def2)\n /* Associate PTR with the file position given by FILENAME and LINENO.  */\n \n void\n-rtx_reader::set_md_ptr_loc (const void *ptr, const char *filename, int lineno)\n+md_reader::set_md_ptr_loc (const void *ptr, const char *filename, int lineno)\n {\n   struct ptr_loc *loc;\n \n@@ -95,15 +95,15 @@ rtx_reader::set_md_ptr_loc (const void *ptr, const char *filename, int lineno)\n    position was set.  */\n \n const struct ptr_loc *\n-rtx_reader::get_md_ptr_loc (const void *ptr)\n+md_reader::get_md_ptr_loc (const void *ptr)\n {\n   return (const struct ptr_loc *) htab_find (m_ptr_locs, &ptr);\n }\n \n /* Associate NEW_PTR with the same file position as OLD_PTR.  */\n \n void\n-rtx_reader::copy_md_ptr_loc (const void *new_ptr, const void *old_ptr)\n+md_reader::copy_md_ptr_loc (const void *new_ptr, const void *old_ptr)\n {\n   const struct ptr_loc *loc = get_md_ptr_loc (old_ptr);\n   if (loc != 0)\n@@ -114,7 +114,7 @@ rtx_reader::copy_md_ptr_loc (const void *new_ptr, const void *old_ptr)\n    directive for it to OUTF.  */\n \n void\n-rtx_reader::fprint_md_ptr_loc (FILE *outf, const void *ptr)\n+md_reader::fprint_md_ptr_loc (FILE *outf, const void *ptr)\n {\n   const struct ptr_loc *loc = get_md_ptr_loc (ptr);\n   if (loc != 0)\n@@ -123,7 +123,7 @@ rtx_reader::fprint_md_ptr_loc (FILE *outf, const void *ptr)\n \n /* Special fprint_md_ptr_loc for writing to STDOUT.  */\n void\n-rtx_reader::print_md_ptr_loc (const void *ptr)\n+md_reader::print_md_ptr_loc (const void *ptr)\n {\n   fprint_md_ptr_loc (stdout, ptr);\n }\n@@ -132,7 +132,7 @@ rtx_reader::print_md_ptr_loc (const void *ptr)\n    may be null or empty.  */\n \n const char *\n-rtx_reader::join_c_conditions (const char *cond1, const char *cond2)\n+md_reader::join_c_conditions (const char *cond1, const char *cond2)\n {\n   char *result;\n   const void **entry;\n@@ -161,7 +161,7 @@ rtx_reader::join_c_conditions (const char *cond1, const char *cond2)\n    directive for COND if its original file position is known.  */\n \n void\n-rtx_reader::fprint_c_condition (FILE *outf, const char *cond)\n+md_reader::fprint_c_condition (FILE *outf, const char *cond)\n {\n   const char **halves = (const char **) htab_find (m_joined_conditions, &cond);\n   if (halves != 0)\n@@ -183,7 +183,7 @@ rtx_reader::fprint_c_condition (FILE *outf, const char *cond)\n /* Special fprint_c_condition for writing to STDOUT.  */\n \n void\n-rtx_reader::print_c_condition (const char *cond)\n+md_reader::print_c_condition (const char *cond)\n {\n   fprint_c_condition (stdout, cond);\n }\n@@ -250,8 +250,9 @@ fatal_with_file_and_line (const char *msg, ...)\n \n   va_start (ap, msg);\n \n-  fprintf (stderr, \"%s:%d:%d: error: \", rtx_reader_ptr->get_filename (),\n-\t   rtx_reader_ptr->get_lineno (), rtx_reader_ptr->get_colno ());\n+  fprintf (stderr, \"%s:%d:%d: error: \", md_reader_ptr->get_filename (),\n+\t   md_reader_ptr->get_lineno (),\n+\t   md_reader_ptr->get_colno ());\n   vfprintf (stderr, msg, ap);\n   putc ('\\n', stderr);\n \n@@ -271,8 +272,9 @@ fatal_with_file_and_line (const char *msg, ...)\n   context[i] = '\\0';\n \n   fprintf (stderr, \"%s:%d:%d: note: following context is `%s'\\n\",\n-\t   rtx_reader_ptr->get_filename (), rtx_reader_ptr->get_lineno (),\n-\t   rtx_reader_ptr->get_colno (), context);\n+\t   md_reader_ptr->get_filename (),\n+\t   md_reader_ptr->get_lineno (),\n+\t   md_reader_ptr->get_colno (), context);\n \n   va_end (ap);\n   exit (1);\n@@ -344,7 +346,7 @@ read_skip_spaces (void)\n    EXPECTED.  */\n \n void\n-rtx_reader::require_char (char expected)\n+md_reader::require_char (char expected)\n {\n   int ch = read_char ();\n   if (ch != expected)\n@@ -355,7 +357,7 @@ rtx_reader::require_char (char expected)\n    character, issuing a fatal error if it is not EXPECTED.  */\n \n void\n-rtx_reader::require_char_ws (char expected)\n+md_reader::require_char_ws (char expected)\n {\n   int ch = read_skip_spaces ();\n   if (ch != expected)\n@@ -366,7 +368,7 @@ rtx_reader::require_char_ws (char expected)\n    issuing a fatal error if it is not EXPECTED.  */\n \n void\n-rtx_reader::require_word_ws (const char *expected)\n+md_reader::require_word_ws (const char *expected)\n {\n   struct md_name name;\n   read_name (&name);\n@@ -377,7 +379,7 @@ rtx_reader::require_word_ws (const char *expected)\n /* Read the next character from the file.  */\n \n int\n-rtx_reader::read_char (void)\n+md_reader::read_char (void)\n {\n   int ch;\n \n@@ -397,7 +399,7 @@ rtx_reader::read_char (void)\n /* Put back CH, which was the last character read from the file.  */\n \n void\n-rtx_reader::unread_char (int ch)\n+md_reader::unread_char (int ch)\n {\n   if (ch == '\\n')\n     {\n@@ -412,7 +414,7 @@ rtx_reader::unread_char (int ch)\n /* Peek at the next character from the file without consuming it.  */\n \n int\n-rtx_reader::peek_char (void)\n+md_reader::peek_char (void)\n {\n   int ch = read_char ();\n   unread_char (ch);\n@@ -423,7 +425,7 @@ rtx_reader::peek_char (void)\n    punctuation chars of rtx printed syntax.  */\n \n void\n-rtx_reader::read_name (struct md_name *name)\n+md_reader::read_name (struct md_name *name)\n {\n   int c;\n   size_t i;\n@@ -489,7 +491,7 @@ rtx_reader::read_name (struct md_name *name)\n    Caller has read the backslash, but not placed it into the obstack.  */\n \n void\n-rtx_reader::read_escape ()\n+md_reader::read_escape ()\n {\n   int c = read_char ();\n \n@@ -542,7 +544,7 @@ rtx_reader::read_escape ()\n    the leading quote.  */\n \n char *\n-rtx_reader::read_quoted_string ()\n+md_reader::read_quoted_string ()\n {\n   int c;\n \n@@ -569,7 +571,7 @@ rtx_reader::read_quoted_string ()\n    the outermost braces _are_ included in the string constant.  */\n \n char *\n-rtx_reader::read_braced_string ()\n+md_reader::read_braced_string ()\n {\n   int c;\n   int brace_depth = 1;  /* caller-processed */\n@@ -606,7 +608,7 @@ rtx_reader::read_braced_string ()\n    and dispatch to the appropriate string constant reader.  */\n \n char *\n-rtx_reader::read_string (int star_if_braced)\n+md_reader::read_string (int star_if_braced)\n {\n   char *stringbuf;\n   int saw_paren = 0;\n@@ -642,7 +644,7 @@ rtx_reader::read_string (int star_if_braced)\n    is currently nested by DEPTH levels of parentheses.  */\n \n void\n-rtx_reader::read_skip_construct (int depth, file_location loc)\n+md_reader::read_skip_construct (int depth, file_location loc)\n {\n   struct md_name name;\n   int c;\n@@ -784,7 +786,7 @@ add_constant (htab_t defs, char *name, char *value,\n    after the \"define_constants\".  */\n \n void\n-rtx_reader::handle_constants ()\n+md_reader::handle_constants ()\n {\n   int c;\n   htab_t defs;\n@@ -815,7 +817,7 @@ rtx_reader::handle_constants ()\n    Stop when CALLBACK returns zero.  */\n \n void\n-rtx_reader::traverse_md_constants (htab_trav callback, void *info)\n+md_reader::traverse_md_constants (htab_trav callback, void *info)\n {\n   htab_traverse (get_md_constants (), callback, info);\n }\n@@ -838,7 +840,7 @@ md_decimal_string (int number)\n    directive is a define_enum rather than a define_c_enum.  */\n \n void\n-rtx_reader::handle_enum (file_location loc, bool md_p)\n+md_reader::handle_enum (file_location loc, bool md_p)\n {\n   char *enum_name, *value_name;\n   struct md_name name;\n@@ -904,7 +906,7 @@ rtx_reader::handle_enum (file_location loc, bool md_p)\n /* Try to find the definition of the given enum.  Return null on failure.  */\n \n struct enum_type *\n-rtx_reader::lookup_enum_type (const char *name)\n+md_reader::lookup_enum_type (const char *name)\n {\n   return (struct enum_type *) htab_find (m_enum_types, &name);\n }\n@@ -914,15 +916,15 @@ rtx_reader::lookup_enum_type (const char *name)\n    returns zero.  */\n \n void\n-rtx_reader::traverse_enum_types (htab_trav callback, void *info)\n+md_reader::traverse_enum_types (htab_trav callback, void *info)\n {\n   htab_traverse (m_enum_types, callback, info);\n }\n \n \n-/* Constructor for rtx_reader.  */\n+/* Constructor for md_reader.  */\n \n-rtx_reader::rtx_reader ()\n+md_reader::md_reader ()\n : m_toplevel_fname (NULL),\n   m_base_dir (NULL),\n   m_read_md_file (NULL),\n@@ -933,7 +935,7 @@ rtx_reader::rtx_reader ()\n   m_last_dir_md_include_ptr (&m_first_dir_md_include)\n {\n   /* Set the global singleton pointer.  */\n-  rtx_reader_ptr = this;\n+  md_reader_ptr = this;\n \n   obstack_init (&m_string_obstack);\n \n@@ -953,9 +955,9 @@ rtx_reader::rtx_reader ()\n   unlock_std_streams ();\n }\n \n-/* rtx_reader's destructor.  */\n+/* md_reader's destructor.  */\n \n-rtx_reader::~rtx_reader ()\n+md_reader::~md_reader ()\n {\n   free (m_base_dir);\n \n@@ -972,7 +974,7 @@ rtx_reader::~rtx_reader ()\n   obstack_free (&m_string_obstack, NULL);\n \n   /* Clear the global singleton pointer.  */\n-  rtx_reader_ptr = NULL;\n+  md_reader_ptr = NULL;\n }\n \n /* Process an \"include\" directive, starting with the optional space\n@@ -981,7 +983,7 @@ rtx_reader::~rtx_reader ()\n    which the \"include\" occurred.  */\n \n void\n-rtx_reader::handle_include (file_location loc)\n+md_reader::handle_include (file_location loc)\n {\n   const char *filename;\n   const char *old_filename;\n@@ -1059,7 +1061,7 @@ rtx_reader::handle_include (file_location loc)\n    unknown directives.  */\n \n void\n-rtx_reader::handle_file ()\n+md_reader::handle_file ()\n {\n   struct md_name directive;\n   int c;\n@@ -1093,7 +1095,7 @@ rtx_reader::handle_file ()\n    and m_base_dir accordingly.  */\n \n void\n-rtx_reader::handle_toplevel_file ()\n+md_reader::handle_toplevel_file ()\n {\n   const char *base;\n \n@@ -1108,15 +1110,15 @@ rtx_reader::handle_toplevel_file ()\n }\n \n file_location\n-rtx_reader::get_current_location () const\n+md_reader::get_current_location () const\n {\n   return file_location (m_read_md_filename, m_read_md_lineno, m_read_md_colno);\n }\n \n /* Parse a -I option with argument ARG.  */\n \n void\n-rtx_reader::add_include_path (const char *arg)\n+md_reader::add_include_path (const char *arg)\n {\n   struct file_name_list *dirtmp;\n \n@@ -1137,8 +1139,8 @@ rtx_reader::add_include_path (const char *arg)\n    generic error should be reported.  */\n \n bool\n-rtx_reader::read_md_files (int argc, const char **argv,\n-\t\t\t   bool (*parse_opt) (const char *))\n+md_reader::read_md_files (int argc, const char **argv,\n+\t\t\t  bool (*parse_opt) (const char *))\n {\n   int i;\n   bool no_more_options;\n@@ -1233,7 +1235,7 @@ rtx_reader::read_md_files (int argc, const char **argv,\n   return !have_error;\n }\n \n-/* class noop_reader : public rtx_reader */\n+/* class noop_reader : public md_reader */\n \n /* A dummy implementation which skips unknown directives.  */\n void"}, {"sha": "27fc9c2dfe9aaa8cb513ece7974695ea49cdfb2e", "filename": "gcc/read-md.h", "status": "modified", "additions": 44, "deletions": 15, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96d1f1d028e6798413eea810d2c6beee7519a6d/gcc%2Fread-md.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96d1f1d028e6798413eea810d2c6beee7519a6d/gcc%2Fread-md.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-md.h?ref=a96d1f1d028e6798413eea810d2c6beee7519a6d", "patch": "@@ -91,11 +91,23 @@ struct enum_type {\n   unsigned int num_values;\n };\n \n-class rtx_reader\n+/* A class for reading .md files and RTL dump files.\n+\n+   Implemented in read-md.c.\n+\n+   This class has responsibility for reading chars from input files, and\n+   for certain common top-level directives including the \"include\"\n+   directive.\n+\n+   It does not handle parsing the hierarchically-nested expressions of\n+   rtl.def; for that see the rtx_reader subclass below (implemented in\n+   read-rtl.c).  */\n+\n+class md_reader\n {\n  public:\n-  rtx_reader ();\n-  virtual ~rtx_reader ();\n+  md_reader ();\n+  virtual ~md_reader ();\n \n   bool read_md_files (int, const char **, bool (*) (const char *));\n \n@@ -145,11 +157,6 @@ class rtx_reader\n   void record_potential_iterator_use (struct iterator_group *group,\n \t\t\t\t      void *ptr, const char *name);\n   struct mapping *read_mapping (struct iterator_group *group, htab_t table);\n-  bool read_rtx (const char *rtx_name, vec<rtx> *rtxen);\n-  rtx read_rtx_code (const char *code_name);\n-  void read_rtx_operand (rtx return_rtx, int idx);\n-  rtx read_nested_rtx ();\n-  rtx read_rtx_variadic (rtx form);\n \n   const char *get_top_level_filename () const { return m_toplevel_fname; }\n   const char *get_filename () const { return m_read_md_filename; }\n@@ -231,36 +238,58 @@ class rtx_reader\n   htab_t m_enum_types;\n };\n \n-/* Global singleton.  */\n-extern rtx_reader *rtx_reader_ptr;\n+/* Global singleton; constrast with rtx_reader_ptr below.  */\n+extern md_reader *md_reader_ptr;\n \n-/* An rtx_reader subclass which skips unknown directives.  */\n+/* An md_reader subclass which skips unknown directives, for\n+   the gen* tools that purely use read-md.o.  */\n \n-class noop_reader : public rtx_reader\n+class noop_reader : public md_reader\n {\n  public:\n-  noop_reader () : rtx_reader () {}\n+  noop_reader () : md_reader () {}\n \n   /* A dummy implementation which skips unknown directives.  */\n   void handle_unknown_directive (file_location, const char *);\n };\n \n+/* An md_reader subclass that actually handles full hierarchical\n+   rtx expressions.\n+\n+   Implemented in read-rtl.c.  */\n+\n+class rtx_reader : public md_reader\n+{\n+ public:\n+  rtx_reader ();\n+  ~rtx_reader ();\n+\n+  bool read_rtx (const char *rtx_name, vec<rtx> *rtxen);\n+  rtx read_rtx_code (const char *code_name);\n+  void read_rtx_operand (rtx return_rtx, int idx);\n+  rtx read_nested_rtx ();\n+  rtx read_rtx_variadic (rtx form);\n+};\n+\n+/* Global singleton; constrast with md_reader_ptr above.  */\n+extern rtx_reader *rtx_reader_ptr;\n+\n extern void (*include_callback) (const char *);\n \n /* Read the next character from the MD file.  */\n \n static inline int\n read_char (void)\n {\n-  return rtx_reader_ptr->read_char ();\n+  return md_reader_ptr->read_char ();\n }\n \n /* Put back CH, which was the last character read from the MD file.  */\n \n static inline void\n unread_char (int ch)\n {\n-  rtx_reader_ptr->unread_char (ch);\n+  md_reader_ptr->unread_char (ch);\n }\n \n extern hashval_t leading_string_hash (const void *);"}, {"sha": "f74c8751a9882d66c62b82eba365fecf20f2f714", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96d1f1d028e6798413eea810d2c6beee7519a6d/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96d1f1d028e6798413eea810d2c6beee7519a6d/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=a96d1f1d028e6798413eea810d2c6beee7519a6d", "patch": "@@ -107,6 +107,9 @@ const char *current_iterator_name;\n \n static void validate_const_int (const char *);\n \n+/* Global singleton.  */\n+rtx_reader *rtx_reader_ptr = NULL;\n+\n /* The mode and code iterator structures.  */\n static struct iterator_group modes, codes, ints, substs;\n \n@@ -326,7 +329,7 @@ map_attr_string (const char *p)\n    if any changes were needed, otherwise return STRING itself.  */\n \n const char *\n-rtx_reader::apply_iterator_to_string (const char *string)\n+md_reader::apply_iterator_to_string (const char *string)\n {\n   char *base, *copy, *p, *start, *end;\n   struct map_value *v;\n@@ -365,7 +368,7 @@ rtx_reader::apply_iterator_to_string (const char *string)\n    values into any strings.  */\n \n rtx\n-rtx_reader::copy_rtx_for_iterators (rtx original)\n+md_reader::copy_rtx_for_iterators (rtx original)\n {\n   const char *format_ptr, *p;\n   int i, j;\n@@ -735,7 +738,7 @@ atoll (const char *p)\n    slipped in at the beginning of the sequence of MD files read by\n    most of the other generators.  */\n void\n-rtx_reader::read_conditions ()\n+md_reader::read_conditions ()\n {\n   int c;\n \n@@ -834,8 +837,8 @@ record_attribute_use (struct iterator_group *group, void *ptr,\n    callback.  */\n \n void\n-rtx_reader::record_potential_iterator_use (struct iterator_group *group,\n-\t\t\t\t\t   void *ptr, const char *name)\n+md_reader::record_potential_iterator_use (struct iterator_group *group,\n+\t\t\t\t\t  void *ptr, const char *name)\n {\n   struct mapping *m;\n   size_t len;\n@@ -869,7 +872,7 @@ rtx_reader::record_potential_iterator_use (struct iterator_group *group,\n    (which belongs to GROUP) and return it.  */\n \n struct mapping *\n-rtx_reader::read_mapping (struct iterator_group *group, htab_t table)\n+md_reader::read_mapping (struct iterator_group *group, htab_t table)\n {\n   struct md_name name;\n   struct mapping *m;\n@@ -1072,7 +1075,7 @@ rtx_reader::read_rtx (const char *rtx_name, vec<rtx> *rtxen)\n       return true;\n     }\n \n-  apply_iterators (read_rtx_code (rtx_name), rtxen);\n+  apply_iterators (rtx_reader_ptr->read_rtx_code (rtx_name), rtxen);\n   iterator_uses.truncate (0);\n   attribute_uses.truncate (0);\n \n@@ -1270,6 +1273,7 @@ rtx_reader::read_rtx_operand (rtx return_rtx, int idx)\n       {\n \tchar *stringbuf;\n \tint star_if_braced;\n+\tstruct obstack *string_obstack = get_string_obstack ();\n \n \tc = read_skip_spaces ();\n \tunread_char (c);\n@@ -1306,11 +1310,11 @@ rtx_reader::read_rtx_operand (rtx return_rtx, int idx)\n \t    for (slash = fn; *slash; slash ++)\n \t      if (*slash == '/' || *slash == '\\\\' || *slash == ':')\n \t\tfn = slash + 1;\n-\t    obstack_1grow (&m_string_obstack, '*');\n-\t    obstack_grow (&m_string_obstack, fn, strlen (fn));\n+\t    obstack_1grow (string_obstack, '*');\n+\t    obstack_grow (string_obstack, fn, strlen (fn));\n \t    sprintf (line_name, \":%d\", get_lineno ());\n-\t    obstack_grow (&m_string_obstack, line_name, strlen (line_name)+1);\n-\t    stringbuf = XOBFINISH (&m_string_obstack, char *);\n+\t    obstack_grow (string_obstack, line_name, strlen (line_name)+1);\n+\t    stringbuf = XOBFINISH (string_obstack, char *);\n \t  }\n \n \t/* Find attr-names in the string.  */\n@@ -1447,3 +1451,20 @@ rtx_reader::read_rtx_variadic (rtx form)\n   unread_char (c);\n   return form;\n }\n+\n+/* Constructor for class rtx_reader.  */\n+\n+rtx_reader::rtx_reader ()\n+: md_reader ()\n+{\n+  /* Set the global singleton pointer.  */\n+  rtx_reader_ptr = this;\n+}\n+\n+/* Destructor for class rtx_reader.  */\n+\n+rtx_reader::~rtx_reader ()\n+{\n+  /* Clear the global singleton pointer.  */\n+  rtx_reader_ptr = NULL;\n+}"}]}