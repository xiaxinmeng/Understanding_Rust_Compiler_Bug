{"sha": "646b5f37031fbb22bc4d2c2ae8127e1aa722c4d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ2YjVmMzcwMzFmYmIyMmJjNGQyYzJhZTgxMjdlMWFhNzIyYzRkMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:16:05Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:16:05Z"}, "message": "[45/77] Make extract_left_shift take a scalar_int_mode\n\nThis patch passes the mode of the shifted value to extract_left_shift\nand updates the only caller so that the mode is a scalar_int_mode.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* combine.c (extract_left_shift): Add a mode argument and update\n\trecursive calls.\n\t(make_compound_operation_int): Change the type of the mode parameter\n\tto scalar_int_mode and update the call to extract_left_shift.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251497", "tree": {"sha": "512d58f6671f012ac6c0cd6ca0eb77879a520821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/512d58f6671f012ac6c0cd6ca0eb77879a520821"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/646b5f37031fbb22bc4d2c2ae8127e1aa722c4d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/646b5f37031fbb22bc4d2c2ae8127e1aa722c4d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/646b5f37031fbb22bc4d2c2ae8127e1aa722c4d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/646b5f37031fbb22bc4d2c2ae8127e1aa722c4d3/comments", "author": null, "committer": null, "parents": [{"sha": "50e2afe76060a1c2e9e8b80621e7cc4c5ae270ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50e2afe76060a1c2e9e8b80621e7cc4c5ae270ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50e2afe76060a1c2e9e8b80621e7cc4c5ae270ae"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "c7e6009858e0c1e718a52fdc211b5ce8388fb0e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646b5f37031fbb22bc4d2c2ae8127e1aa722c4d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646b5f37031fbb22bc4d2c2ae8127e1aa722c4d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=646b5f37031fbb22bc4d2c2ae8127e1aa722c4d3", "patch": "@@ -1,3 +1,12 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* combine.c (extract_left_shift): Add a mode argument and update\n+\trecursive calls.\n+\t(make_compound_operation_int): Change the type of the mode parameter\n+\tto scalar_int_mode and update the call to extract_left_shift.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "5eeeeda55b607b18b2de7f2d95e9a3abc52f7f30", "filename": "gcc/combine.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646b5f37031fbb22bc4d2c2ae8127e1aa722c4d3/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646b5f37031fbb22bc4d2c2ae8127e1aa722c4d3/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=646b5f37031fbb22bc4d2c2ae8127e1aa722c4d3", "patch": "@@ -445,7 +445,6 @@ static rtx expand_compound_operation (rtx);\n static const_rtx expand_field_assignment (const_rtx);\n static rtx make_extraction (machine_mode, rtx, HOST_WIDE_INT,\n \t\t\t    rtx, unsigned HOST_WIDE_INT, int, int, int);\n-static rtx extract_left_shift (rtx, int);\n static int get_pos_from_mask (unsigned HOST_WIDE_INT,\n \t\t\t      unsigned HOST_WIDE_INT *);\n static rtx canon_reg_for_combine (rtx, rtx);\n@@ -7789,14 +7788,14 @@ make_extraction (machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n   return new_rtx;\n }\n \f\n-/* See if X contains an ASHIFT of COUNT or more bits that can be commuted\n-   with any other operations in X.  Return X without that shift if so.  */\n+/* See if X (of mode MODE) contains an ASHIFT of COUNT or more bits that\n+   can be commuted with any other operations in X.  Return X without\n+   that shift if so.  */\n \n static rtx\n-extract_left_shift (rtx x, int count)\n+extract_left_shift (scalar_int_mode mode, rtx x, int count)\n {\n   enum rtx_code code = GET_CODE (x);\n-  machine_mode mode = GET_MODE (x);\n   rtx tem;\n \n   switch (code)\n@@ -7812,7 +7811,7 @@ extract_left_shift (rtx x, int count)\n       break;\n \n     case NEG:  case NOT:\n-      if ((tem = extract_left_shift (XEXP (x, 0), count)) != 0)\n+      if ((tem = extract_left_shift (mode, XEXP (x, 0), count)) != 0)\n \treturn simplify_gen_unary (code, mode, tem, mode);\n \n       break;\n@@ -7823,7 +7822,7 @@ extract_left_shift (rtx x, int count)\n       if (CONST_INT_P (XEXP (x, 1))\n \t  && (UINTVAL (XEXP (x, 1))\n \t      & (((HOST_WIDE_INT_1U << count)) - 1)) == 0\n-\t  && (tem = extract_left_shift (XEXP (x, 0), count)) != 0)\n+\t  && (tem = extract_left_shift (mode, XEXP (x, 0), count)) != 0)\n \t{\n \t  HOST_WIDE_INT val = INTVAL (XEXP (x, 1)) >> count;\n \t  return simplify_gen_binary (code, mode, tem,\n@@ -7851,7 +7850,7 @@ extract_left_shift (rtx x, int count)\n    - Return a new rtx, which the caller returns directly.  */\n \n static rtx\n-make_compound_operation_int (machine_mode mode, rtx *x_ptr,\n+make_compound_operation_int (scalar_int_mode mode, rtx *x_ptr,\n \t\t\t     enum rtx_code in_code,\n \t\t\t     enum rtx_code *next_code_ptr)\n {\n@@ -8149,7 +8148,7 @@ make_compound_operation_int (machine_mode mode, rtx *x_ptr,\n \t  && INTVAL (rhs) >= 0\n \t  && INTVAL (rhs) < HOST_BITS_PER_WIDE_INT\n \t  && INTVAL (rhs) < mode_width\n-\t  && (new_rtx = extract_left_shift (lhs, INTVAL (rhs))) != 0)\n+\t  && (new_rtx = extract_left_shift (mode, lhs, INTVAL (rhs))) != 0)\n \tnew_rtx = make_extraction (mode, make_compound_operation (new_rtx, next_code),\n \t\t\t       0, NULL_RTX, mode_width - INTVAL (rhs),\n \t\t\t       code == LSHIFTRT, 0, in_code == COMPARE);"}]}