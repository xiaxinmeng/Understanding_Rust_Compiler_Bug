{"sha": "cc5d198e6cd893132bf844622e17da0a5c2b0e54", "node_id": "C_kwDOANBUbNoAKGNjNWQxOThlNmNkODkzMTMyYmY4NDQ2MjJlMTdkYTBhNWMyYjBlNTQ", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-23T18:24:59Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-03-30T14:48:27Z"}, "message": "ast: Add Meta items TokenStream visitor\n\nAdd visitor implementation for all remaining meta items.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-tokenstream.cc (TokenStream::visit): Add visitor\n\timplementation.\n\t* ast/rust-ast-tokenstream.h: Add additional function prototype.\n\t* ast/rust-item.h: Add some getters.\n\t* ast/rust-macro.h: Likewise.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "ce73acb5cca76102f340b1614325ee25035209a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce73acb5cca76102f340b1614325ee25035209a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc5d198e6cd893132bf844622e17da0a5c2b0e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc5d198e6cd893132bf844622e17da0a5c2b0e54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc5d198e6cd893132bf844622e17da0a5c2b0e54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc5d198e6cd893132bf844622e17da0a5c2b0e54/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d9dbf5c004b4ab2206b86c68c2c824229aeee34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9dbf5c004b4ab2206b86c68c2c824229aeee34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d9dbf5c004b4ab2206b86c68c2c824229aeee34"}], "stats": {"total": 108, "additions": 92, "deletions": 16}, "files": [{"sha": "1bc1cab58c0d71d1bda6b6657492918f127622f0", "filename": "gcc/rust/ast/rust-ast-tokenstream.cc", "status": "modified", "additions": 75, "deletions": 16, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5d198e6cd893132bf844622e17da0a5c2b0e54/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5d198e6cd893132bf844622e17da0a5c2b0e54/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc?ref=cc5d198e6cd893132bf844622e17da0a5c2b0e54", "patch": "@@ -2047,8 +2047,22 @@ TokenStream::visit (ExternalTypeItem &type)\n }\n \n void\n-TokenStream::visit (ExternalStaticItem &)\n-{}\n+TokenStream::visit (ExternalStaticItem &item)\n+{\n+  auto id = item.get_identifier ();\n+  visit_items_as_lines (item.get_outer_attrs ());\n+  if (item.has_visibility ())\n+    visit (item.get_visibility ());\n+  tokens.push_back (Rust::Token::make (STATIC_TOK, item.get_locus ()));\n+  if (item.is_mut ())\n+    tokens.push_back (Rust::Token::make (MUT, Location ()));\n+  tokens.push_back (Rust::Token::make_identifier (Location (), std::move (id)));\n+  tokens.push_back (Rust::Token::make (COLON, Location ()));\n+  visit (item.get_type ());\n+  // TODO: No expr ? The \"(= Expression)?\" part from the reference seems missing\n+  // in the ast.\n+  tokens.push_back (Rust::Token::make (SEMICOLON, Location ()));\n+}\n \n void\n TokenStream::visit (ExternalFunctionItem &function)\n@@ -2188,32 +2202,77 @@ TokenStream::visit (MacroRulesDefinition &rules_def)\n }\n \n void\n-TokenStream::visit (MacroInvocation &)\n-{}\n+TokenStream::visit (MacroInvocation &invocation)\n+{\n+  auto data = invocation.get_invoc_data ();\n+  visit (data.get_path ());\n+  tokens.push_back (Rust::Token::make (EXCLAM, Location ()));\n+  visit (data.get_delim_tok_tree ());\n+  if (invocation.has_semicolon ())\n+    tokens.push_back (Rust::Token::make (SEMICOLON, Location ()));\n+}\n \n void\n-TokenStream::visit (MetaItemPath &)\n-{}\n+TokenStream::visit (MetaItemPath &item)\n+{\n+  auto path = item.to_path_item ();\n+  visit (path);\n+}\n \n void\n-TokenStream::visit (MetaItemSeq &)\n-{}\n+TokenStream::visit (MetaItemSeq &item)\n+{\n+  visit (item.get_path ());\n+  // TODO: Double check this, there is probably a mistake.\n+  tokens.push_back (Rust::Token::make (LEFT_PAREN, Location ()));\n+  visit_items_joined_by_separator (item.get_seq (), COMMA);\n+  tokens.push_back (Rust::Token::make (RIGHT_PAREN, Location ()));\n+}\n \n void\n-TokenStream::visit (MetaWord &)\n-{}\n+TokenStream::visit (MetaWord &word)\n+{\n+  auto id = word.get_ident ();\n+  tokens.push_back (\n+    Rust::Token::make_identifier (word.get_locus (), std::move (id)));\n+}\n \n void\n-TokenStream::visit (MetaNameValueStr &)\n-{}\n+TokenStream::visit (MetaNameValueStr &name)\n+{\n+  auto pair = name.get_name_value_pair ();\n+  auto id = std::get<0> (pair);\n+  auto value = std::get<1> (pair);\n+  tokens.push_back (\n+    Rust::Token::make_identifier (name.get_locus (), std::move (id)));\n+  tokens.push_back (Rust::Token::make (EQUAL, name.get_locus ()));\n+  tokens.push_back (Rust::Token::make (DOUBLE_QUOTE, Location ()));\n+  tokens.push_back (\n+    Rust::Token::make_identifier (name.get_locus (), std::move (value)));\n+  tokens.push_back (Rust::Token::make (DOUBLE_QUOTE, Location ()));\n+}\n \n void\n-TokenStream::visit (MetaListPaths &)\n-{}\n+TokenStream::visit (MetaListPaths &list)\n+{\n+  auto id = list.get_ident ();\n+  tokens.push_back (\n+    Rust::Token::make_identifier (list.get_locus (), std::move (id)));\n+  tokens.push_back (Rust::Token::make (LEFT_PAREN, Location ()));\n+  visit_items_joined_by_separator (list.get_paths (), COMMA);\n+  tokens.push_back (Rust::Token::make (RIGHT_PAREN, Location ()));\n+}\n \n void\n-TokenStream::visit (MetaListNameValueStr &)\n-{}\n+TokenStream::visit (MetaListNameValueStr &list)\n+{\n+  auto id = list.get_ident ();\n+  tokens.push_back (\n+    Rust::Token::make_identifier (list.get_locus (), std::move (id)));\n+  tokens.push_back (Rust::Token::make (LEFT_PAREN, Location ()));\n+  visit_items_joined_by_separator (list.get_values (), COMMA);\n+  tokens.push_back (Rust::Token::make (RIGHT_PAREN, Location ()));\n+}\n \n // rust-pattern.h\n void"}, {"sha": "1c9328e7dbe5360a03df99ab1d09c013fa013f0c", "filename": "gcc/rust/ast/rust-ast-tokenstream.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5d198e6cd893132bf844622e17da0a5c2b0e54/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5d198e6cd893132bf844622e17da0a5c2b0e54/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h?ref=cc5d198e6cd893132bf844622e17da0a5c2b0e54", "patch": "@@ -245,6 +245,7 @@ class TokenStream : public ASTVisitor\n   void visit (MacroMatchRepetition &match);\n   void visit (MacroMatcher &matcher);\n   void visit (MacroRulesDefinition &rules_def);\n+  void visit (MacroInvocData &invoc_data);\n   void visit (MacroInvocation &macro_invoc);\n   void visit (MetaItemPath &meta_item);\n   void visit (MetaItemSeq &meta_item);"}, {"sha": "3e865f188c5ec9485426b3db1e4446a7dcf89a18", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5d198e6cd893132bf844622e17da0a5c2b0e54/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5d198e6cd893132bf844622e17da0a5c2b0e54/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=cc5d198e6cd893132bf844622e17da0a5c2b0e54", "patch": "@@ -4087,6 +4087,8 @@ class ExternalStaticItem : public ExternalItem\n \n   Identifier get_identifier () const { return item_name; }\n \n+  Visibility &get_visibility () { return visibility; }\n+\n   const Visibility &get_visibility () const { return visibility; }\n \n   bool is_mut () const { return has_mut; }"}, {"sha": "0a3db1c68fd906098522048c51cf17b120493383", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5d198e6cd893132bf844622e17da0a5c2b0e54/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5d198e6cd893132bf844622e17da0a5c2b0e54/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=cc5d198e6cd893132bf844622e17da0a5c2b0e54", "patch": "@@ -904,6 +904,10 @@ class MetaItemSeq : public MetaItem\n \n   std::string as_string () const override;\n \n+  SimplePath &get_path () { return path; }\n+\n+  std::vector<std::unique_ptr<MetaItemInner>> &get_seq () { return seq; }\n+\n   void accept_vis (ASTVisitor &vis) override;\n \n   Location get_locus () const override { return path.get_locus (); }\n@@ -935,6 +939,8 @@ class MetaWord : public MetaItem\n \n   void accept_vis (ASTVisitor &vis) override;\n \n+  Identifier get_ident () const { return ident; }\n+\n   Location get_locus () const override { return ident_locus; }\n \n   bool check_cfg_predicate (const Session &session) const override;\n@@ -1019,6 +1025,10 @@ class MetaListPaths : public MetaItem\n \n   void accept_vis (ASTVisitor &vis) override;\n \n+  Identifier get_ident () const { return ident; }\n+\n+  std::vector<SimplePath> &get_paths () { return paths; };\n+\n   Location get_locus () const override { return ident_locus; }\n \n   bool check_cfg_predicate (const Session &session) const override;\n@@ -1055,6 +1065,10 @@ class MetaListNameValueStr : public MetaItem\n \n   void accept_vis (ASTVisitor &vis) override;\n \n+  Identifier get_ident () { return ident; }\n+\n+  std::vector<MetaNameValueStr> &get_values () { return strs; }\n+\n   Location get_locus () const override { return ident_locus; }\n \n   bool check_cfg_predicate (const Session &session) const override;"}]}