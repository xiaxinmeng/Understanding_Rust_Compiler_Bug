{"sha": "e0d80a586d221ea06ee6efa239aa81517ccc33fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBkODBhNTg2ZDIyMWVhMDZlZTZlZmEyMzlhYTgxNTE3Y2NjMzNmYg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2014-10-30T05:14:13Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2014-10-30T05:14:13Z"}, "message": "pa-protos.h (pa_output_arg_descriptor): Strengthen argument from rtx to rtx_insn *.\n\n\t* config/pa/pa-protos.h (pa_output_arg_descriptor): Strengthen\n\targument from rtx to rtx_insn *.\n\t(compute_movmem_length, compute_clrmem_length): Likewise.\n\t(copy_fp_args, length_fp_args): Likewise.\n\t* config/pa/pa.c (legitimize_pic_address): Promote local variable\n\t\"insn\" from rtx to rtx_insn *.\n\t(legitimize_tls_address, pa_emit_move_sequence): Likewise.\n\t(pa_output_block_move, store_reg, store_reg_modify): Likewise.\n\t(set_reg_plus_d, pa_expand_prologue, hppa_profile_hook): Likewise.\n\t(branch_to_delay_slot_p, branch_needs_nop_p, use_skip_p): Likewise.\n\t(pa_output_arg_descriptor): Strengthen argument to an rtx_insn *.\n\t(compute_movmem_length, compute_clrmem_length): Likewise.\n\t(copy_fp-args, length_fp_args): Likewise.\n\nFrom-SVN: r216859", "tree": {"sha": "6a605f9abf87dacaacdee6fc6810a544a4699e0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a605f9abf87dacaacdee6fc6810a544a4699e0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0d80a586d221ea06ee6efa239aa81517ccc33fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d80a586d221ea06ee6efa239aa81517ccc33fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0d80a586d221ea06ee6efa239aa81517ccc33fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d80a586d221ea06ee6efa239aa81517ccc33fb/comments", "author": null, "committer": null, "parents": [{"sha": "ed33cc2479998c35f569d64656bc98fab76a7fce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed33cc2479998c35f569d64656bc98fab76a7fce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed33cc2479998c35f569d64656bc98fab76a7fce"}], "stats": {"total": 70, "additions": 47, "deletions": 23}, "files": [{"sha": "373b44209bcc98ae879fa59b2ff7cc07aad59d30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d80a586d221ea06ee6efa239aa81517ccc33fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d80a586d221ea06ee6efa239aa81517ccc33fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0d80a586d221ea06ee6efa239aa81517ccc33fb", "patch": "@@ -1,3 +1,19 @@\n+2014-10-30  Jeff Law  <law@redhat.com>\n+\t\n+\t* config/pa/pa-protos.h (pa_output_arg_descriptor): Strengthen\n+\targument from rtx to rtx_insn *.\n+\t(compute_movmem_length, compute_clrmem_length): Likewise.\n+\t(copy_fp_args, length_fp_args): Likewise.\n+\t* config/pa/pa.c (legitimize_pic_address): Promote local variable\n+\t\"insn\" from rtx to rtx_insn *.\n+\t(legitimize_tls_address, pa_emit_move_sequence): Likewise.\n+\t(pa_output_block_move, store_reg, store_reg_modify): Likewise.\n+\t(set_reg_plus_d, pa_expand_prologue, hppa_profile_hook): Likewise.\n+\t(branch_to_delay_slot_p, branch_needs_nop_p, use_skip_p): Likewise.\n+\t(pa_output_arg_descriptor): Strengthen argument to an rtx_insn *.\n+\t(compute_movmem_length, compute_clrmem_length): Likewise.\n+\t(copy_fp-args, length_fp_args): Likewise.\n+\n 2014-10-29  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/arm/arm.h (MACHMODE): Treat machine_mode as a"}, {"sha": "0ba505567652a48c3c244a3921f3cc8fb4a3d6ab", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d80a586d221ea06ee6efa239aa81517ccc33fb/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d80a586d221ea06ee6efa239aa81517ccc33fb/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=e0d80a586d221ea06ee6efa239aa81517ccc33fb", "patch": "@@ -48,7 +48,7 @@ extern const char *pa_output_mod_insn (int, rtx_insn *);\n extern const char *pa_singlemove_string (rtx *);\n extern void pa_output_addr_vec (rtx, rtx);\n extern void pa_output_addr_diff_vec (rtx, rtx);\n-extern void pa_output_arg_descriptor (rtx);\n+extern void pa_output_arg_descriptor (rtx_insn *);\n extern void pa_output_global_address (FILE *, rtx, int);\n extern void pa_print_operand (FILE *, rtx, int);\n extern void pa_encode_label (rtx);"}, {"sha": "6e34d778981783635f23f2fcfddd5aa83ff93eaa", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d80a586d221ea06ee6efa239aa81517ccc33fb/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d80a586d221ea06ee6efa239aa81517ccc33fb/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=e0d80a586d221ea06ee6efa239aa81517ccc33fb", "patch": "@@ -117,8 +117,8 @@ static int pa_can_combine_p (rtx_insn *, rtx_insn *, rtx_insn *, int, rtx,\n static bool forward_branch_p (rtx_insn *);\n static void compute_zdepwi_operands (unsigned HOST_WIDE_INT, unsigned *);\n static void compute_zdepdi_operands (unsigned HOST_WIDE_INT, unsigned *);\n-static int compute_movmem_length (rtx);\n-static int compute_clrmem_length (rtx);\n+static int compute_movmem_length (rtx_insn *);\n+static int compute_clrmem_length (rtx_insn *);\n static bool pa_assemble_integer (rtx, unsigned int, int);\n static void remove_useless_addtr_insns (int);\n static void store_reg (int, HOST_WIDE_INT, int);\n@@ -156,8 +156,8 @@ static void hppa_va_start (tree, rtx);\n static tree hppa_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n static bool pa_scalar_mode_supported_p (machine_mode);\n static bool pa_commutative_p (const_rtx x, int outer_code);\n-static void copy_fp_args (rtx) ATTRIBUTE_UNUSED;\n-static int length_fp_args (rtx) ATTRIBUTE_UNUSED;\n+static void copy_fp_args (rtx_insn *) ATTRIBUTE_UNUSED;\n+static int length_fp_args (rtx_insn *) ATTRIBUTE_UNUSED;\n static rtx hppa_legitimize_address (rtx, rtx, machine_mode);\n static inline void pa_file_start_level (void) ATTRIBUTE_UNUSED;\n static inline void pa_file_start_space (int) ATTRIBUTE_UNUSED;\n@@ -775,7 +775,7 @@ legitimize_pic_address (rtx orig, machine_mode mode, rtx reg)\n   /* Labels need special handling.  */\n   if (pic_label_operand (orig, mode))\n     {\n-      rtx insn;\n+      rtx_insn *insn;\n \n       /* We do not want to go through the movXX expanders here since that\n \t would create recursion.\n@@ -811,7 +811,8 @@ legitimize_pic_address (rtx orig, machine_mode mode, rtx reg)\n     }\n   if (GET_CODE (orig) == SYMBOL_REF)\n     {\n-      rtx insn, tmp_reg;\n+      rtx_insn *insn;\n+      rtx tmp_reg;\n \n       gcc_assert (reg);\n \n@@ -915,7 +916,8 @@ hppa_tls_call (rtx arg)\n static rtx\n legitimize_tls_address (rtx addr)\n {\n-  rtx ret, insn, tmp, t1, t2, tp;\n+  rtx ret, tmp, t1, t2, tp;\n+  rtx_insn *insn;\n \n   /* Currently, we can't handle anything but a SYMBOL_REF.  */\n   if (GET_CODE (addr) != SYMBOL_REF)\n@@ -2090,7 +2092,8 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n       else if (GET_CODE (operand1) != CONST_INT\n \t       || !pa_cint_ok_for_move (INTVAL (operand1)))\n \t{\n-\t  rtx insn, temp;\n+\t  rtx temp;\n+\t  rtx_insn *insn;\n \t  rtx op1 = operand1;\n \t  HOST_WIDE_INT value = 0;\n \t  HOST_WIDE_INT insv = 0;\n@@ -2884,7 +2887,7 @@ pa_output_block_move (rtx *operands, int size_is_constant ATTRIBUTE_UNUSED)\n    count insns rather than emit them.  */\n \n static int\n-compute_movmem_length (rtx insn)\n+compute_movmem_length (rtx_insn *insn)\n {\n   rtx pat = PATTERN (insn);\n   unsigned int align = INTVAL (XEXP (XVECEXP (pat, 0, 7), 0));\n@@ -3026,7 +3029,7 @@ pa_output_block_clear (rtx *operands, int size_is_constant ATTRIBUTE_UNUSED)\n    count insns rather than emit them.  */\n \n static int\n-compute_clrmem_length (rtx insn)\n+compute_clrmem_length (rtx_insn *insn)\n {\n   rtx pat = PATTERN (insn);\n   unsigned int align = INTVAL (XEXP (XVECEXP (pat, 0, 4), 0));\n@@ -3515,7 +3518,8 @@ static int save_fregs;\n static void\n store_reg (int reg, HOST_WIDE_INT disp, int base)\n {\n-  rtx insn, dest, src, basereg;\n+  rtx dest, src, basereg;\n+  rtx_insn *insn;\n \n   src = gen_rtx_REG (word_mode, reg);\n   basereg = gen_rtx_REG (Pmode, base);\n@@ -3570,7 +3574,8 @@ store_reg (int reg, HOST_WIDE_INT disp, int base)\n static void\n store_reg_modify (int base, int reg, HOST_WIDE_INT mod)\n {\n-  rtx insn, basereg, srcreg, delta;\n+  rtx basereg, srcreg, delta;\n+  rtx_insn *insn;\n \n   gcc_assert (VAL_14_BITS_P (mod));\n \n@@ -3600,7 +3605,7 @@ store_reg_modify (int base, int reg, HOST_WIDE_INT mod)\n static void\n set_reg_plus_d (int reg, int base, HOST_WIDE_INT disp, int note)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   if (VAL_14_BITS_P (disp))\n     {\n@@ -3790,7 +3795,8 @@ pa_expand_prologue (void)\n   HOST_WIDE_INT size = get_frame_size ();\n   HOST_WIDE_INT offset;\n   int i;\n-  rtx insn, tmpreg;\n+  rtx tmpreg;\n+  rtx_insn *insn;\n \n   gr_saved = 0;\n   fr_saved = 0;\n@@ -4035,7 +4041,8 @@ pa_expand_prologue (void)\n \t  if (df_regs_ever_live_p (i)\n \t      || (! TARGET_64BIT && df_regs_ever_live_p (i + 1)))\n \t    {\n-\t      rtx addr, insn, reg;\n+\t      rtx addr, reg;\n+\t      rtx_insn *insn;\n \t      addr = gen_rtx_MEM (DFmode,\n \t\t\t\t  gen_rtx_POST_INC (word_mode, tmpreg));\n \t      reg = gen_rtx_REG (DFmode, i);\n@@ -4454,7 +4461,8 @@ hppa_profile_hook (int label_no)\n      lcla2 and load_offset_label_address insn patterns.  */\n   rtx reg = gen_reg_rtx (SImode);\n   rtx_code_label *label_rtx = gen_label_rtx ();\n-  rtx begin_label_rtx, call_insn;\n+  rtx begin_label_rtx;\n+  rtx_insn *call_insn;\n   char begin_label_name[16];\n \n   ASM_GENERATE_INTERNAL_LABEL (begin_label_name, FUNC_BEGIN_PROLOG_LABEL,\n@@ -5826,7 +5834,7 @@ pa_output_mod_insn (int unsignedp, rtx_insn *insn)\n }\n \n void\n-pa_output_arg_descriptor (rtx call_insn)\n+pa_output_arg_descriptor (rtx_insn *call_insn)\n {\n   const char *arg_regs[4];\n   machine_mode arg_mode;\n@@ -6334,7 +6342,7 @@ pa_scalar_mode_supported_p (machine_mode mode)\n static bool\n branch_to_delay_slot_p (rtx_insn *insn)\n {\n-  rtx jump_insn;\n+  rtx_insn *jump_insn;\n \n   if (dbr_sequence_length ())\n     return FALSE;\n@@ -6368,7 +6376,7 @@ branch_to_delay_slot_p (rtx_insn *insn)\n static bool\n branch_needs_nop_p (rtx_insn *insn)\n {\n-  rtx jump_insn;\n+  rtx_insn *jump_insn;\n \n   if (dbr_sequence_length ())\n     return FALSE;\n@@ -6396,7 +6404,7 @@ branch_needs_nop_p (rtx_insn *insn)\n static bool\n use_skip_p (rtx_insn *insn)\n {\n-  rtx jump_insn = next_active_insn (JUMP_LABEL (insn));\n+  rtx_insn *jump_insn = next_active_insn (JUMP_LABEL (insn));\n \n   while (insn)\n     {\n@@ -7428,7 +7436,7 @@ pa_output_movb (rtx *operands, rtx_insn *insn, int which_alternative,\n \n /* Copy any FP arguments in INSN into integer registers.  */\n static void\n-copy_fp_args (rtx insn)\n+copy_fp_args (rtx_insn *insn)\n {\n   rtx link;\n   rtx xoperands[2];\n@@ -7471,7 +7479,7 @@ copy_fp_args (rtx insn)\n \n /* Compute length of the FP argument copy sequence for INSN.  */\n static int\n-length_fp_args (rtx insn)\n+length_fp_args (rtx_insn *insn)\n {\n   int length = 0;\n   rtx link;"}]}