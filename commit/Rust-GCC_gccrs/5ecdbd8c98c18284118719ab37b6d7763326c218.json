{"sha": "5ecdbd8c98c18284118719ab37b6d7763326c218", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVjZGJkOGM5OGMxODI4NDExODcxOWFiMzdiNmQ3NzYzMzI2YzIxOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T09:05:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T09:05:52Z"}, "message": "Update comments and spec.\n\nFrom-SVN: r101077", "tree": {"sha": "0dcd6a5de4169ca0d9b7fd9512972932d4d10a3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dcd6a5de4169ca0d9b7fd9512972932d4d10a3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ecdbd8c98c18284118719ab37b6d7763326c218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ecdbd8c98c18284118719ab37b6d7763326c218", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ecdbd8c98c18284118719ab37b6d7763326c218", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ecdbd8c98c18284118719ab37b6d7763326c218/comments", "author": null, "committer": null, "parents": [{"sha": "a35e2879a3e3da07089dfa9f537cebbff34031a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a35e2879a3e3da07089dfa9f537cebbff34031a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a35e2879a3e3da07089dfa9f537cebbff34031a2"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "a3c0301cc160662e55a1f159f89dc961159de781", "filename": "gcc/ada/sem_ch3.ads", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ecdbd8c98c18284118719ab37b6d7763326c218/gcc%2Fada%2Fsem_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ecdbd8c98c18284118719ab37b6d7763326c218/gcc%2Fada%2Fsem_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.ads?ref=5ecdbd8c98c18284118719ab37b6d7763326c218", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -111,16 +111,21 @@ package Sem_Ch3  is\n    --  subprogram of the parent type.\n \n    procedure Derive_Subprograms\n-     (Parent_Type    : Entity_Id;\n-      Derived_Type   : Entity_Id;\n-      Generic_Actual : Entity_Id := Empty);\n-   --  To complete type derivation, collect or retrieve the primitive\n-   --  operations of the parent type, and replace the subsidiary subtypes\n-   --  with the derived type, to build the specs of the inherited ops.\n-   --  For generic actuals, the mapping of the primitive operations to those\n-   --  of the parent type is also done by rederiving the operations within\n-   --  the instance. For tagged types, the derived subprograms are aliased to\n-   --  those of the actual, not those of the ancestor.\n+     (Parent_Type             : Entity_Id;\n+      Derived_Type            : Entity_Id;\n+      Generic_Actual          : Entity_Id := Empty;\n+      Is_Interface_Derivation : Boolean   := False);\n+   --  To complete type derivation, collect/retrieve the primitive operations\n+   --  of the parent type, and replace the subsidiary subtypes with the derived\n+   --  type, to build the specs of the inherited ops. For generic actuals, the\n+   --  mapping of the primitive operations to those of the parent type is also\n+   --  done by rederiving the operations within the instance. For tagged types,\n+   --  the derived subprograms are aliased to those of the actual, not those of\n+   --  the ancestor.\n+\n+   function Find_Type_Of_Subtype_Indic (S : Node_Id) return Entity_Id;\n+   --  Given a subtype indication S (which is really an N_Subtype_Indication\n+   --  node or a plain N_Identifier), find the type of the subtype mark.\n \n    function Find_Type_Name (N : Node_Id) return Entity_Id;\n    --  Enter the identifier in a type definition, or find the entity already\n@@ -209,12 +214,12 @@ package Sem_Ch3  is\n    function Replace_Anonymous_Access_To_Protected_Subprogram\n      (N      : Node_Id;\n       Prev_E : Entity_Id) return Entity_Id;\n-   --  Ada 2005 (AI-254): Create and decorate an internal full type\n-   --  declaration in the enclosing scope corresponding to an anonymous\n-   --  access to protected subprogram. In addition, replace the anonymous\n-   --  access by an occurrence of this internal type. Prev_Etype is used\n-   --  to link the new internal entity with the anonymous entity. Return\n-   --  the entity of this type declaration.\n+   --  Ada 2005 (AI-254): Create and decorate an internal full type declaration\n+   --  in the enclosing scope corresponding to an anonymous access to protected\n+   --  subprogram. In addition, replace the anonymous access by an occurrence\n+   --  of this internal type. Prev_Etype is used to link the new internal\n+   --  entity with the anonymous entity. Return the entity of this type\n+   --  declaration.\n \n    procedure Set_Completion_Referenced (E : Entity_Id);\n    --  If E is the completion of a private or incomplete  type declaration,"}]}