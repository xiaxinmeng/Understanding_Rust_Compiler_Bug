{"sha": "7506f49132276e0bd064a169dca106b6436bde7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUwNmY0OTEzMjI3NmUwYmQwNjRhMTY5ZGNhMTA2YjY0MzZiZGU3Yw==", "commit": {"author": {"name": "Doug Evans", "email": "devans@cygnus.com", "date": "1998-05-20T00:24:32Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-20T00:24:32Z"}, "message": "* Global CSE and constant/copy propagation.\n\n        * Makefile.in (OBJS): Add gcse.o\n        (STAGESTUFF): Add *.gcse.\n        (gcse.o): Add dependencies.\n        (mostlyclean): Remove *.gcse and */*.gcse.\n        * gcse.c: New file.\n        * loop.c (loop_optimize): Move call to init_alias_analysis.\n        * recog.c (validate_replace_src): New function.\n        * toplev.c (gcse_dump): New global variable.\n        (flag_gcse, gcse_time): Likewise.\n        (compile_file): Initialize gcse_time and clean out the gcse dump\n        file if necessary.\n        (rest_of_compilation): Call gcse_main as requested.  Dump RTL\n        after gcse if requested.\n        (main): Enable gcse for -O2 and above.  Handle -dG.  Enable gcse\n        dumps for -da.\n        * gcc.texi: Add gcse related internal documentation.\n        * invoke.texi: Note new command line options for gcse.\n        * tm.texi: Document AVOID_CCMODE_COPIES.\n        * mips.h (AVOID_CCMODE_COPIES): Define.\n\nCo-Authored-By: Jeffrey A Law <law@cygnus.com>\n\nFrom-SVN: r19901", "tree": {"sha": "934ca7a916b884debf2659218bd495fc6afaa368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/934ca7a916b884debf2659218bd495fc6afaa368"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7506f49132276e0bd064a169dca106b6436bde7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7506f49132276e0bd064a169dca106b6436bde7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7506f49132276e0bd064a169dca106b6436bde7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7506f49132276e0bd064a169dca106b6436bde7c/comments", "author": null, "committer": null, "parents": [{"sha": "d392d163c58a6f9dcc2e68ae20ffde4c1bd69be5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d392d163c58a6f9dcc2e68ae20ffde4c1bd69be5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d392d163c58a6f9dcc2e68ae20ffde4c1bd69be5"}], "stats": {"total": 4817, "additions": 4811, "deletions": 6}, "files": [{"sha": "f9fc5b9d4d3c5b49827a6a46ac4f44991773a705", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7506f49132276e0bd064a169dca106b6436bde7c", "patch": "@@ -1,3 +1,27 @@\n+Wed May 20 01:11:02 1998  Doug Evans (devans@cygnus.com)\n+\t\t\t  Jeff Law (law@cygnus.com)\n+\n+\t* Global CSE and constant/copy propagation.\n+\t* Makefile.in (OBJS): Add gcse.o\n+\t(STAGESTUFF): Add *.gcse.\n+\t(gcse.o): Add dependencies.\n+\t(mostlyclean): Remove *.gcse and */*.gcse.\n+\t* gcse.c: New file.\n+\t* loop.c (loop_optimize): Move call to init_alias_analysis.\n+\t* recog.c (validate_replace_src): New function.\n+\t* toplev.c (gcse_dump): New global variable.\n+\t(flag_gcse, gcse_time): Likewise.\n+\t(compile_file): Initialize gcse_time and clean out the gcse dump\n+\tfile if necessary.\n+\t(rest_of_compilation): Call gcse_main as requested.  Dump RTL\n+\tafter gcse if requested.\n+\t(main): Enable gcse for -O2 and above.  Handle -dG.  Enable gcse\n+\tdumps for -da.\n+\t* gcc.texi: Add gcse related internal documentation.\n+\t* invoke.texi: Note new command line options for gcse.\n+\t* tm.texi: Document AVOID_CCMODE_COPIES.\n+\t* mips.h (AVOID_CCMODE_COPIES): Define.\n+\n Tue May 19 22:31:20 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* Makefile.in (deduced.h): Only run scan-types if $(SYSTEM_HEADER_DIR)"}, {"sha": "6d6eeabbd350cbc5179ec301ea77a3e473412395", "filename": "gcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7506f49132276e0bd064a169dca106b6436bde7c", "patch": "@@ -652,7 +652,7 @@ OBJS = toplev.o version.o tree.o print-tree.o stor-layout.o fold-const.o \\\n  varasm.o rtl.o print-rtl.o rtlanal.o emit-rtl.o genrtl.o real.o regmove.o \\\n  dbxout.o sdbout.o dwarfout.o dwarf2out.o xcoffout.o bitmap.o alias.o \\\n  integrate.o jump.o cse.o loop.o unroll.o flow.o stupid.o combine.o \\\n- regclass.o local-alloc.o global.o reload.o reload1.o caller-save.o \\\n+ regclass.o local-alloc.o global.o reload.o reload1.o caller-save.o gcse.o \\\n  insn-peep.o reorg.o $(SCHED_PREFIX)sched.o final.o recog.o reg-stack.o \\\n  insn-opinit.o insn-recog.o insn-extract.o insn-output.o insn-emit.o \\\n  profile.o insn-attrtab.o $(out_object_file) getpwd.o $(EXTRA_OBJS) convert.o\n@@ -685,7 +685,7 @@ STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h \\\n  specs collect2$(exeext) $(USE_COLLECT2) underscore.c \\\n  gcov$(exeext) *.bp \\\n  *.greg *.lreg *.combine *.flow *.cse *.jump *.rtl *.tree *.loop \\\n- *.dbr *.jump2 *.sched *.cse2 *.sched2 *.stack \\\n+ *.dbr *.jump2 *.sched *.cse2 *.sched2 *.stack *.gcse \\\n  *.[si] \\\n  $(LANG_STAGESTUFF)\n \n@@ -1449,6 +1449,8 @@ stupid.o : stupid.c $(CONFIG_H) system.h $(RTL_H) regs.h hard-reg-set.h flags.h\n \n cse.o : cse.c $(CONFIG_H) system.h $(RTL_H) regs.h hard-reg-set.h flags.h \\\n    real.h insn-config.h insn-codes.h $(RECOG_H) expr.h\n+gcse.o : gcse.c $(CONFIG_H) system.h $(RTL_H) regs.h hard-reg-set.h flags.h \\\n+   real.h insn-config.h insn-codes.h $(RECOG_H) expr.h basic-block.h\n profile.o : profile.c $(CONFIG_H) system.h $(RTL_H) flags.h insn-flags.h \\\n    gcov-io.h $(TREE_H) output.h regs.h toplev.h\n loop.o : loop.c $(CONFIG_H) system.h $(RTL_H) flags.h loop.h insn-config.h \\\n@@ -2159,10 +2161,11 @@ mostlyclean: lang.mostlyclean\n \t-rm -f */stamp-* */tmp-*\n # Delete debugging dump files.\n \t-rm -f *.greg *.lreg *.combine *.flow *.cse *.jump *.rtl *.tree *.loop\n-\t-rm -f *.dbr *.jump2 *.sched *.cse2 *.sched2 *.stack *.addressof *.regmove *.mach *.bp\n+\t-rm -f *.dbr *.jump2 *.sched *.cse2 *.sched2 *.stack *.addressof\n+\t-rm -f *.regmove *.mach *.bp *.gcse\n \t-rm -f */*.greg */*.lreg */*.combine */*.flow */*.cse */*.jump */*.rtl\n \t-rm -f */*.tree */*.loop */*.dbr */*.jump2 */*.sched */*.cse2\n-\t-rm -f */*.sched2 */*.stack */*.regmove\n+\t-rm -f */*.sched2 */*.stack */*.regmove */*.gcse\n # Delete some files made during installation.\n \t-rm -f specs gfloat.h float.h-* enquire SYSCALLS.c.X SYSCALLS.c\n \t-rm -f collect collect2 mips-tfile mips-tdump alloca.s"}, {"sha": "c53d452fe99f284746fdb4b53c9fe428fb7ac957", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=7506f49132276e0bd064a169dca106b6436bde7c", "patch": "@@ -3561,6 +3561,13 @@ while (0)\n   (((mips_cpu == PROCESSOR_R4000 || mips_cpu == PROCESSOR_R6000) ? 6 : 4) \\\n    + memory_move_secondary_cost ((MODE), (CLASS), (TO_P)))\n \n+/* Define if copies to/from condition code registers should be avoided.\n+\n+   This is needed for the MIPS because reload_outcc is not complete;\n+   it needs to handle cases where the source is a general or another\n+   condition code register.  */\n+#define AVOID_CCMODE_COPIES\n+\n /* A C expression for the cost of a branch instruction.  A value of\n    1 is the default; other values are interpreted relative to that.  */\n "}, {"sha": "62e32b2c28c5e76c5a7c0bf92acaee3a4553b721", "filename": "gcc/gcc.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.texi?ref=7506f49132276e0bd064a169dca106b6436bde7c", "patch": "@@ -3302,6 +3302,22 @@ The option @samp{-ds} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.cse} to\n the input file name.\n \n+@cindex global common subexpression elimination\n+@cindex constant propagation\n+@cindex copy propagation\n+@item               \n+Global common subexpression elimination.  This pass performs GCSE\n+using Morel-Renvoise Partial Redundancy Elimination, with the exception\n+that it does not try to move invariants out of loops - that is left to\n+the loop optimization pass.  This pass also performs global constant\n+and copy propagation.\n+\n+The source file for this pass is gcse.c.\n+\n+The option @samp{-dG} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.gcse} to\n+the input file name.\n+\n @cindex loop optimization\n @cindex code motion\n @cindex strength-reduction"}, {"sha": "9deff4717251c4bf62972b03c4aedf7ad6be8d60", "filename": "gcc/gcse.c", "status": "added", "additions": 4690, "deletions": 0, "changes": 4690, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=7506f49132276e0bd064a169dca106b6436bde7c"}, {"sha": "2289f3c543d6a8de45fae87bf9cfb411405979c1", "filename": "gcc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=7506f49132276e0bd064a169dca106b6436bde7c", "patch": "@@ -149,7 +149,7 @@ in the following sections.\n -fcaller-saves  -fcse-follow-jumps  -fcse-skip-blocks\n -fdelayed-branch   -fexpensive-optimizations\n -ffast-math  -ffloat-store  -fforce-addr  -fforce-mem\n--ffunction-sections  -finline-functions\n+-ffunction-sections  -fgcse -finline-functions\n -fkeep-inline-functions  -fno-default-inline\n -fno-defer-pop  -fno-function-cse\n -fno-inline  -fno-peephole  -fomit-frame-pointer -fregmove\n@@ -1986,6 +1986,8 @@ Dump after purging ADDRESSOF, to @file{@var{file}.addressof}.\n Dump after flow analysis, to @file{@var{file}.flow}.\n @item g\n Dump after global register allocation, to @file{@var{file}.greg}.\n+@item G      \n+Dump after GCSE, to @file{@var{file}.gcse}.\n @item j\n Dump after first jump optimization, to @file{@var{file}.jump}.\n @item J\n@@ -2299,6 +2301,10 @@ performed.\n @item -frerun-loop-opt\n Run the loop optimizer twice.\n \n+@item -fgcse\n+Perform a global common subexpression elimination pass.\n+This pass also performs global constant and copy propagation.\n+\n @item -fexpensive-optimizations\n Perform a number of minor optimizations that are relatively expensive.\n "}, {"sha": "8bc4ef28fac75287af8e8064e98e15dbf6008891", "filename": "gcc/loop.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=7506f49132276e0bd064a169dca106b6436bde7c", "patch": "@@ -400,7 +400,6 @@ loop_optimize (f, dumpfile, unroll_p)\n   loop_dump_stream = dumpfile;\n \n   init_recog_no_volatile ();\n-  init_alias_analysis ();\n \n   max_reg_before_loop = max_reg_num ();\n \n@@ -477,6 +476,13 @@ loop_optimize (f, dumpfile, unroll_p)\n      function.  */\n   reg_scan (f, max_reg_num (), 1);\n \n+  /* This must occur after reg_scan so that registers created by gcse\n+     will have entries in the register tables.\n+\n+     We could have added a call to reg_scan after gcse_main in toplev.c,\n+     but moving this call to init_alias_analysis is more efficient.  */\n+  init_alias_analysis ();\n+\n   /* See if we went too far.  */\n   if (get_max_uid () > max_uid_for_loop)\n     abort ();"}, {"sha": "ded35f7b4892f53d90df7bcdbbc60c0280eaf43a", "filename": "gcc/recog.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=7506f49132276e0bd064a169dca106b6436bde7c", "patch": "@@ -537,6 +537,25 @@ validate_replace_rtx (from, to, insn)\n   validate_replace_rtx_1 (&PATTERN (insn), from, to, insn);\n   return apply_change_group ();\n }\n+\n+/* Try replacing every occurrence of FROM in INSN with TO, avoiding\n+   SET_DESTs.  After all changes have been made, validate by seeing if\n+   INSN is still valid.  */\n+\n+int\n+validate_replace_src (from, to, insn)\n+     rtx from, to, insn;\n+{\n+  if ((GET_CODE (insn) != INSN && GET_CODE (insn) != JUMP_INSN)\n+      || GET_CODE (PATTERN (insn)) != SET)\n+    abort ();\n+\n+  validate_replace_rtx_1 (&SET_SRC (PATTERN (insn)), from, to, insn);\n+  if (GET_CODE (SET_DEST (PATTERN (insn))) == MEM)\n+    validate_replace_rtx_1 (&XEXP (SET_DEST (PATTERN (insn)), 0),\n+\t\t\t    from, to, insn);\n+  return apply_change_group ();\n+}\n \f\n #ifdef HAVE_cc0\n /* Return 1 if the insn using CC0 set by INSN does not contain"}, {"sha": "120b497dbdb3f73c7dcfaa408b9b688d81b77251", "filename": "gcc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=7506f49132276e0bd064a169dca106b6436bde7c", "patch": "@@ -1505,6 +1505,12 @@ accessibility of the value in a narrower mode.\n You should define this macro to return nonzero in as many cases as\n possible since doing so will allow GNU CC to perform better register\n allocation.\n+\n+@findex AVOID_CCMODE_COPIES\n+@item AVOID_CCMODE_COPIES\n+Define this macro if the compiler should avoid copies to/from @code{CCmode}\n+registers.  You should only define this macro if support fo copying to/from\n+@code{CCmode} is incomplete.\n @end table\n \n @node Leaf Functions"}, {"sha": "ecd11f9b66a4b8250b84dc210464410400f22019", "filename": "gcc/toplev.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7506f49132276e0bd064a169dca106b6436bde7c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=7506f49132276e0bd064a169dca106b6436bde7c", "patch": "@@ -267,6 +267,7 @@ int rtl_dump_and_exit = 0;\n int jump_opt_dump = 0;\n int addressof_dump = 0;\n int cse_dump = 0;\n+int gcse_dump = 0;\n int loop_dump = 0;\n int cse2_dump = 0;\n int branch_prob_dump = 0;\n@@ -538,6 +539,10 @@ int flag_volatile_global;\n \n int flag_syntax_only = 0;\n \n+/* Nonzero means perform global cse.  */\n+\n+static int flag_gcse;\n+\n /* Nonzero means to rerun cse after loop optimization.  This increases\n    compilation time about 20% and picks up a few more common expressions.  */\n \n@@ -738,6 +743,7 @@ struct { char *string; int *variable; int on_value;} f_options[] =\n   {\"pcc-struct-return\", &flag_pcc_struct_return, 1},\n   {\"reg-struct-return\", &flag_pcc_struct_return, 0},\n   {\"delayed-branch\", &flag_delayed_branch, 1},\n+  {\"gcse\", &flag_gcse, 1},\n   {\"rerun-cse-after-loop\", &flag_rerun_cse_after_loop, 1},\n   {\"rerun-loop-opt\", &flag_rerun_loop_opt, 1},\n   {\"pretend-float\", &flag_pretend_float, 1},\n@@ -977,6 +983,7 @@ int varconst_time;\n int integration_time;\n int jump_time;\n int cse_time;\n+int gcse_time;\n int loop_time;\n int cse2_time;\n int branch_prob_time;\n@@ -2274,6 +2281,7 @@ compile_file (name)\n   integration_time = 0;\n   jump_time = 0;\n   cse_time = 0;\n+  gcse_time = 0;\n   loop_time = 0;\n   cse2_time = 0;\n   branch_prob_time = 0;\n@@ -2360,6 +2368,8 @@ compile_file (name)\n   if (dbr_sched_dump)\n     clean_dump_file (\".dbr\");\n #endif\n+  if (gcse_dump)\n+    clean_dump_file (\".gcse\");\n #ifdef STACK_REGS\n   if (stack_reg_dump)\n     clean_dump_file (\".stack\");\n@@ -2840,6 +2850,7 @@ compile_file (name)\n       print_time (\"integration\", integration_time);\n       print_time (\"jump\", jump_time);\n       print_time (\"cse\", cse_time);\n+      print_time (\"gcse\", gcse_time);\n       print_time (\"loop\", loop_time);\n       print_time (\"cse2\", cse2_time);\n       print_time (\"branch-prob\", branch_prob_time);\n@@ -3257,6 +3268,18 @@ rest_of_compilation (decl)\n   if (addressof_dump)\n     dump_rtl (\".addressof\", decl, print_rtl, insns);\n   \n+  /* Perform global cse.  */\n+\n+  if (optimize > 0 && flag_gcse)\n+    {\n+      if (gcse_dump)\n+\topen_dump_file (\".gcse\", IDENTIFIER_POINTER (DECL_NAME (decl)));\n+      \n+      TIMEVAR (gcse_time, gcse_main (insns, rtl_dump_file));\n+\n+      if (gcse_dump)\n+\tclose_dump_file (print_rtl, insns);\n+    }\n   /* Move constant computations out of loops.  */\n \n   if (optimize > 0)\n@@ -3801,6 +3824,7 @@ main (argc, argv, envp)\n     {\n       flag_cse_follow_jumps = 1;\n       flag_cse_skip_blocks = 1;\n+      flag_gcse = 1;\n       flag_expensive_optimizations = 1;\n       flag_strength_reduce = 1;\n       flag_rerun_cse_after_loop = 1;\n@@ -3879,6 +3903,7 @@ main (argc, argv, envp)\n \t\t    regmove_dump = 1;\n  \t\t    rtl_dump = 1;\n  \t\t    cse_dump = 1, cse2_dump = 1;\n+\t\t    gcse_dump = 1;\n  \t\t    sched_dump = 1;\n  \t\t    sched2_dump = 1;\n #ifdef STACK_REGS\n@@ -3911,6 +3936,9 @@ main (argc, argv, envp)\n \t\t  case 'g':\n \t\t    global_reg_dump = 1;\n \t\t    break;\n+\t\t  case 'G':\n+\t\t    gcse_dump = 1;\n+\t\t    break;\n \t\t  case 'j':\n \t\t    jump_opt_dump = 1;\n \t\t    break;"}]}