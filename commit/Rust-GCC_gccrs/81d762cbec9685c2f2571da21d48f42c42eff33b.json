{"sha": "81d762cbec9685c2f2571da21d48f42c42eff33b", "node_id": "C_kwDOANBUbNoAKDgxZDc2MmNiZWM5Njg1YzJmMjU3MWRhMjFkNDhmNDJjNDJlZmYzM2I", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2023-03-22T16:33:11Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2023-03-22T17:36:30Z"}, "message": "LRA: Do not repeat inheritance and live range splitting\tin case of asm error\n\nLRA was trying to do live range splitting again and again as there were\nno enough regs for asm.  This patch solves the problem.\n\n        PR target/109137\n\ngcc/ChangeLog:\n\n\t* lra.cc (lra): Do not repeat inheritance and live range splitting\n\twhen asm error is found.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr109137.c: New.", "tree": {"sha": "6259b420b0230c18e5feb80d51bc0e734d36d4b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6259b420b0230c18e5feb80d51bc0e734d36d4b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81d762cbec9685c2f2571da21d48f42c42eff33b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d762cbec9685c2f2571da21d48f42c42eff33b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81d762cbec9685c2f2571da21d48f42c42eff33b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d762cbec9685c2f2571da21d48f42c42eff33b/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aae0d89e65c5da6ef45ec787e165dccb5ae7e2d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae0d89e65c5da6ef45ec787e165dccb5ae7e2d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aae0d89e65c5da6ef45ec787e165dccb5ae7e2d0"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "eb3ee1f8b63a78f0b0b6a614236d1adaee84375d", "filename": "gcc/lra.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d762cbec9685c2f2571da21d48f42c42eff33b/gcc%2Flra.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d762cbec9685c2f2571da21d48f42c42eff33b/gcc%2Flra.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.cc?ref=81d762cbec9685c2f2571da21d48f42c42eff33b", "patch": "@@ -2453,7 +2453,7 @@ lra (FILE *f)\n \t\t  lra_hard_reg_split_p = true;\n \t\t}\n \t    }\n-\t  while (fails_p);\n+\t  while (fails_p && !lra_asm_error_p);\n \t  if (! live_p) {\n \t    /* We need the correct reg notes for work of constraint sub-pass.  */\n \t    lra_create_live_ranges (true, true);"}, {"sha": "ffd8e8c574b5cf9a2df735721edc33e7868251a6", "filename": "gcc/testsuite/gcc.target/i386/pr109137.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d762cbec9685c2f2571da21d48f42c42eff33b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr109137.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d762cbec9685c2f2571da21d48f42c42eff33b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr109137.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr109137.c?ref=81d762cbec9685c2f2571da21d48f42c42eff33b", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-m32 -O3 -march=znver1 -fPIC -mfpmath=sse -w\" } */\n+#include <string.h>\n+typedef struct {\n+  char bytestream_end;\n+} CABACContext;\n+int get_cabac___trans_tmp_3, get_cabac_tmp, get_cabac_c,\n+    decode_cabac_mb_intra4x4_pred_mode_mode, ff_h264_decode_mb_cabac_h_0,\n+    ff_h264_decode_mb_cabac_bit;\n+typedef struct {\n+  char intra4x4_pred_mode_cache[2];\n+} H264SliceContext;\n+H264SliceContext ff_h264_decode_mb_cabac_sl;\n+void ff_h264_decode_mb_cabac(void) {\n+  memset((void*)ff_h264_decode_mb_cabac_h_0, 6, 48);\n+  int i;\n+  for (;; i++) {\n+    __asm__(\"\"/* { dg-error \"'asm' operand has impossible constraints\" } */\n+            : \"=&r\"(ff_h264_decode_mb_cabac_bit), \"=&r\"(get_cabac_c),\n+              \"=&r\"(get_cabac_c), \"=&q\"(get_cabac_tmp)\n+            : \"r\"(get_cabac___trans_tmp_3),\n+              \"r\"(__builtin_offsetof(CABACContext, bytestream_end))\n+            : \"ecx\");\n+    ff_h264_decode_mb_cabac_sl.intra4x4_pred_mode_cache[i] =\n+        decode_cabac_mb_intra4x4_pred_mode_mode;\n+  }\n+}\n+"}]}