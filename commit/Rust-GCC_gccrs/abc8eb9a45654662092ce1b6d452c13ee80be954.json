{"sha": "abc8eb9a45654662092ce1b6d452c13ee80be954", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJjOGViOWE0NTY1NDY2MjA5MmNlMWI2ZDQ1MmMxM2VlODBiZTk1NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-13T17:57:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-13T17:57:47Z"}, "message": "[AArch64] Tests for SVE structure modes\n\nThis patch adds tests for the SVE structure mode move patterns\nand for LD[234] and ST[234] vectorisation.\n\n2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/struct_move_1.c: New test.\n\t* gcc.target/aarch64/sve/struct_move_2.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_move_3.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_move_4.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_move_5.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_move_6.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_1.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_2.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_3.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_4.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_4_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_5.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_5_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_6.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_6_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_7.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_7_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_8.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_8_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_9.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_9_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_10.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_10_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_11.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_11_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_12.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_12_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_13.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_13_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_14.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_15.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_16.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_17.c: Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256619", "tree": {"sha": "995d361d0e48e6bda5d67f63b478df09f83eb9a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/995d361d0e48e6bda5d67f63b478df09f83eb9a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abc8eb9a45654662092ce1b6d452c13ee80be954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc8eb9a45654662092ce1b6d452c13ee80be954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abc8eb9a45654662092ce1b6d452c13ee80be954", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc8eb9a45654662092ce1b6d452c13ee80be954/comments", "author": null, "committer": null, "parents": [{"sha": "9f4cbab84d3bc5d4f35258cbc2e6df48d8821497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f4cbab84d3bc5d4f35258cbc2e6df48d8821497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f4cbab84d3bc5d4f35258cbc2e6df48d8821497"}], "stats": {"total": 1469, "additions": 1469, "deletions": 0}, "files": [{"sha": "735a4bed9d82189d17e83f4641f7369363922dbe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -1,3 +1,44 @@\n+2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* gcc.target/aarch64/sve/struct_move_1.c: New test.\n+\t* gcc.target/aarch64/sve/struct_move_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_move_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_move_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_move_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_move_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_4_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_5_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_6_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_7_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_8.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_8_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_9.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_9_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_10.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_10_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_11.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_11_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_12.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_12_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_13.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_13_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_14.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_15.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_16.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_17.c: Likewise.\n+\n 2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "16e48bef0446b6ab07a8bdb1af139bf4fdc9d890", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_move_1.c", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_move_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_move_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_move_1.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,129 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=256 -mbig-endian --save-temps\" } */\n+\n+typedef char vnx16qi __attribute__((vector_size(32)));\n+typedef struct { vnx16qi a[2]; } vnx32qi;\n+\n+typedef short vnx8hi __attribute__((vector_size(32)));\n+typedef struct { vnx8hi a[2]; } vnx16hi;\n+\n+typedef int vnx4si __attribute__((vector_size(32)));\n+typedef struct { vnx4si a[2]; } vnx8si;\n+\n+typedef long vnx2di __attribute__((vector_size(32)));\n+typedef struct { vnx2di a[2]; } vnx4di;\n+\n+typedef _Float16 vnx8hf __attribute__((vector_size(32)));\n+typedef struct { vnx8hf a[2]; } vnx16hf;\n+\n+typedef float vnx4sf __attribute__((vector_size(32)));\n+typedef struct { vnx4sf a[2]; } vnx8sf;\n+\n+typedef double vnx2df __attribute__((vector_size(32)));\n+typedef struct { vnx2df a[2]; } vnx4df;\n+\n+#define TEST_TYPE(TYPE, REG1, REG2)\t\t\t\\\n+  void\t\t\t\t\t\t\t\\\n+  f1_##TYPE (TYPE *a)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    register TYPE x asm (#REG1) = a[0];\t\t\t\\\n+    asm volatile (\"# test \" #TYPE \" 1 %S0\" :: \"w\" (x));\t\\\n+    register TYPE y asm (#REG2) = x;\t\t\t\\\n+    asm volatile (\"# test \" #TYPE \" 2 %S0, %S1, %S2\"\t\\\n+\t\t  : \"=&w\" (x) : \"0\" (x), \"w\" (y));\t\\\n+    a[1] = x;\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\\\n+  /* This must compile, but we don't care how.  */\t\\\n+  void\t\t\t\t\t\t\t\\\n+  f2_##TYPE (TYPE *a)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    TYPE x = a[0];\t\t\t\t\t\\\n+    x.a[0][3] = 1;\t\t\t\t\t\\\n+    x.a[1][2] = 12;\t\t\t\t\t\\\n+    asm volatile (\"# %0\" :: \"w\" (x));\t\t\t\\\n+  }\t\t\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\\\n+  f3_##TYPE (TYPE *a, int i)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    TYPE x = a[0];\t\t\t\t\t\\\n+    x.a[0][i] = 1;\t\t\t\t\t\\\n+    asm volatile (\"# %0\" :: \"w\" (x));\t\t\t\\\n+  }\t\t\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\\\n+  f4_##TYPE (TYPE *a, int i, int j)\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    TYPE x = a[0];\t\t\t\t\t\\\n+    x.a[i][j] = 44;\t\t\t\t\t\\\n+    asm volatile (\"# %0\" :: \"w\" (x));\t\t\t\\\n+  }\n+\n+TEST_TYPE (vnx32qi, z0, z2)\n+TEST_TYPE (vnx16hi, z5, z7)\n+TEST_TYPE (vnx8si, z10, z12)\n+TEST_TYPE (vnx4di, z15, z17)\n+TEST_TYPE (vnx16hf, z18, z20)\n+TEST_TYPE (vnx8sf, z21, z23)\n+TEST_TYPE (vnx4df, z28, z30)\n+\n+/* { dg-final { scan-assembler {\\tld1b\\tz0.b, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\tz1.b, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx32qi 1 z0\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz2.d, z0.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz3.d, z1.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx32qi 2 z0, z0, z2\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1b\\tz0.b, p[0-7], \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1b\\tz1.b, p[0-7], \\[x0, #3, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1h\\tz5.h, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\tz6.h, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx16hi 1 z5\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz7.d, z5.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz8.d, z6.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx16hi 2 z5, z5, z7\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1h\\tz5.h, p[0-7], \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1h\\tz6.h, p[0-7], \\[x0, #3, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1w\\tz10.s, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\tz11.s, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx8si 1 z10\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz12.d, z10.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz13.d, z11.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx8si 2 z10, z10, z12\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz10.s, p[0-7], \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz11.s, p[0-7], \\[x0, #3, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1d\\tz15.d, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1d\\tz16.d, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx4di 1 z15\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz17.d, z15.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz18.d, z16.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx4di 2 z15, z15, z17\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1d\\tz15.d, p[0-7], \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1d\\tz16.d, p[0-7], \\[x0, #3, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1h\\tz18.h, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\tz19.h, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx16hf 1 z18\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz20.d, z18.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz21.d, z19.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx16hf 2 z18, z18, z20\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1h\\tz18.h, p[0-7], \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1h\\tz19.h, p[0-7], \\[x0, #3, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1w\\tz21.s, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\tz22.s, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx8sf 1 z21\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz23.d, z21.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz24.d, z22.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx8sf 2 z21, z21, z23\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz21.s, p[0-7], \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz22.s, p[0-7], \\[x0, #3, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1d\\tz28.d, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1d\\tz29.d, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx4df 1 z28\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz30.d, z28.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz31.d, z29.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx4df 2 z28, z28, z30\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1d\\tz28.d, p[0-7], \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1d\\tz29.d, p[0-7], \\[x0, #3, mul vl\\]\\n} } } */"}, {"sha": "6041f2a2a49a5636ca526ca901a84b1dead85873", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_move_2.c", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_move_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_move_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_move_2.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,127 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=256 -mbig-endian --save-temps\" } */\n+\n+typedef char vnx16qi __attribute__((vector_size(32)));\n+typedef struct { vnx16qi a[3]; } vnx48qi;\n+\n+typedef short vnx8hi __attribute__((vector_size(32)));\n+typedef struct { vnx8hi a[3]; } vnx24hi;\n+\n+typedef int vnx4si __attribute__((vector_size(32)));\n+typedef struct { vnx4si a[3]; } vnx12si;\n+\n+typedef long vnx2di __attribute__((vector_size(32)));\n+typedef struct { vnx2di a[3]; } vnx6di;\n+\n+typedef _Float16 vnx8hf __attribute__((vector_size(32)));\n+typedef struct { vnx8hf a[3]; } vnx24hf;\n+\n+typedef float vnx4sf __attribute__((vector_size(32)));\n+typedef struct { vnx4sf a[3]; } vnx12sf;\n+\n+typedef double vnx2df __attribute__((vector_size(32)));\n+typedef struct { vnx2df a[3]; } vnx6df;\n+\n+#define TEST_TYPE(TYPE, REG1, REG2) \\\n+  void \\\n+  f_##TYPE (TYPE *a) \\\n+  { \\\n+    register TYPE x asm (#REG1) = a[0]; \\\n+    asm volatile (\"# test \" #TYPE \" 1 %S0\" :: \"w\" (x)); \\\n+    register TYPE y asm (#REG2) = x; \\\n+    asm volatile (\"# test \" #TYPE \" 2 %S0, %S1, %S2\" \\\n+\t\t  : \"=&w\" (x) : \"0\" (x), \"w\" (y)); \\\n+    a[1] = x; \\\n+  }\n+\n+TEST_TYPE (vnx48qi, z0, z3)\n+TEST_TYPE (vnx24hi, z6, z2)\n+TEST_TYPE (vnx12si, z12, z15)\n+TEST_TYPE (vnx6di, z16, z13)\n+TEST_TYPE (vnx24hf, z18, z1)\n+TEST_TYPE (vnx12sf, z20, z23)\n+TEST_TYPE (vnx6df, z26, z29)\n+\n+/* { dg-final { scan-assembler {\\tld1b\\tz0.b, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\tz1.b, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\tz2.b, p[0-7]/z, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx48qi 1 z0\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz3.d, z0.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz4.d, z1.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz5.d, z2.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx48qi 2 z0, z0, z3\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1b\\tz0.b, p[0-7], \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1b\\tz1.b, p[0-7], \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1b\\tz2.b, p[0-7], \\[x0, #5, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1h\\tz6.h, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\tz7.h, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\tz8.h, p[0-7]/z, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx24hi 1 z6\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz2.d, z6.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz3.d, z7.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz4.d, z8.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx24hi 2 z6, z6, z2\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1h\\tz6.h, p[0-7], \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1h\\tz7.h, p[0-7], \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1h\\tz8.h, p[0-7], \\[x0, #5, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1w\\tz12.s, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\tz13.s, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\tz14.s, p[0-7]/z, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx12si 1 z12\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz15.d, z12.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz16.d, z13.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz17.d, z14.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx12si 2 z12, z12, z15\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz12.s, p[0-7], \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz13.s, p[0-7], \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz14.s, p[0-7], \\[x0, #5, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1d\\tz16.d, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1d\\tz17.d, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1d\\tz18.d, p[0-7]/z, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx6di 1 z16\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz13.d, z16.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz14.d, z17.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz15.d, z18.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx6di 2 z16, z16, z13\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1d\\tz16.d, p[0-7], \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1d\\tz17.d, p[0-7], \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1d\\tz18.d, p[0-7], \\[x0, #5, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1h\\tz18.h, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\tz19.h, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\tz20.h, p[0-7]/z, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx24hf 1 z18\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz1.d, z18.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz2.d, z19.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz3.d, z20.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx24hf 2 z18, z18, z1\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1h\\tz18.h, p[0-7], \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1h\\tz19.h, p[0-7], \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1h\\tz20.h, p[0-7], \\[x0, #5, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1w\\tz20.s, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\tz21.s, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\tz22.s, p[0-7]/z, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx12sf 1 z20\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz23.d, z20.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz24.d, z21.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz25.d, z22.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx12sf 2 z20, z20, z23\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz20.s, p[0-7], \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz21.s, p[0-7], \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz22.s, p[0-7], \\[x0, #5, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1d\\tz26.d, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1d\\tz27.d, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1d\\tz28.d, p[0-7]/z, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx6df 1 z26\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz29.d, z26.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz30.d, z27.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz31.d, z28.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx6df 2 z26, z26, z29\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1d\\tz26.d, p[0-7], \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1d\\tz27.d, p[0-7], \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1d\\tz28.d, p[0-7], \\[x0, #5, mul vl\\]\\n} } } */"}, {"sha": "19011384f9b8ed9eac5c94ac43ca146132c0d4bd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_move_3.c", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_move_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_move_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_move_3.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,148 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=256 -mbig-endian --save-temps\" } */\n+\n+typedef char vnx16qi __attribute__((vector_size(32)));\n+typedef struct { vnx16qi a[4]; } vnx64qi;\n+\n+typedef short vnx8hi __attribute__((vector_size(32)));\n+typedef struct { vnx8hi a[4]; } vnx32hi;\n+\n+typedef int vnx4si __attribute__((vector_size(32)));\n+typedef struct { vnx4si a[4]; } vnx16si;\n+\n+typedef long vnx2di __attribute__((vector_size(32)));\n+typedef struct { vnx2di a[4]; } vnx8di;\n+\n+typedef _Float16 vnx8hf __attribute__((vector_size(32)));\n+typedef struct { vnx8hf a[4]; } vnx32hf;\n+\n+typedef float vnx4sf __attribute__((vector_size(32)));\n+typedef struct { vnx4sf a[4]; } vnx16sf;\n+\n+typedef double vnx2df __attribute__((vector_size(32)));\n+typedef struct { vnx2df a[4]; } vnx8df;\n+\n+#define TEST_TYPE(TYPE, REG1, REG2) \\\n+  void \\\n+  f_##TYPE (TYPE *a) \\\n+  { \\\n+    register TYPE x asm (#REG1) = a[0]; \\\n+    asm volatile (\"# test \" #TYPE \" 1 %S0\" :: \"w\" (x)); \\\n+    register TYPE y asm (#REG2) = x; \\\n+    asm volatile (\"# test \" #TYPE \" 2 %S0, %S1, %S2\" \\\n+\t\t  : \"=&w\" (x) : \"0\" (x), \"w\" (y)); \\\n+    a[1] = x; \\\n+  }\n+\n+TEST_TYPE (vnx64qi, z0, z4)\n+TEST_TYPE (vnx32hi, z6, z2)\n+TEST_TYPE (vnx16si, z12, z16)\n+TEST_TYPE (vnx8di, z17, z13)\n+TEST_TYPE (vnx32hf, z18, z1)\n+TEST_TYPE (vnx16sf, z20, z16)\n+TEST_TYPE (vnx8df, z24, z28)\n+\n+/* { dg-final { scan-assembler {\\tld1b\\tz0.b, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\tz1.b, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\tz2.b, p[0-7]/z, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\tz3.b, p[0-7]/z, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx64qi 1 z0\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz4.d, z0.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz5.d, z1.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz6.d, z2.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz7.d, z3.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx64qi 2 z0, z0, z4\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1b\\tz0.b, p[0-7], \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1b\\tz1.b, p[0-7], \\[x0, #5, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1b\\tz2.b, p[0-7], \\[x0, #6, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1b\\tz3.b, p[0-7], \\[x0, #7, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1h\\tz6.h, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\tz7.h, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\tz8.h, p[0-7]/z, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\tz9.h, p[0-7]/z, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx32hi 1 z6\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz2.d, z6.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz3.d, z7.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz4.d, z8.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz5.d, z9.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx32hi 2 z6, z6, z2\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1h\\tz6.h, p[0-7], \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1h\\tz7.h, p[0-7], \\[x0, #5, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1h\\tz8.h, p[0-7], \\[x0, #6, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1h\\tz9.h, p[0-7], \\[x0, #7, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1w\\tz12.s, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\tz13.s, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\tz14.s, p[0-7]/z, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\tz15.s, p[0-7]/z, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx16si 1 z12\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz16.d, z12.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz17.d, z13.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz18.d, z14.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz19.d, z15.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx16si 2 z12, z12, z16\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz12.s, p[0-7], \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz13.s, p[0-7], \\[x0, #5, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz14.s, p[0-7], \\[x0, #6, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz15.s, p[0-7], \\[x0, #7, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1d\\tz17.d, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1d\\tz18.d, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1d\\tz19.d, p[0-7]/z, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1d\\tz20.d, p[0-7]/z, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx8di 1 z17\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz13.d, z17.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz14.d, z18.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz15.d, z19.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz16.d, z20.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx8di 2 z17, z17, z13\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1d\\tz17.d, p[0-7], \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1d\\tz18.d, p[0-7], \\[x0, #5, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1d\\tz19.d, p[0-7], \\[x0, #6, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1d\\tz20.d, p[0-7], \\[x0, #7, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1h\\tz18.h, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\tz19.h, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\tz20.h, p[0-7]/z, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\tz21.h, p[0-7]/z, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx32hf 1 z18\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz1.d, z18.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz2.d, z19.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz3.d, z20.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz4.d, z21.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx32hf 2 z18, z18, z1\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1h\\tz18.h, p[0-7], \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1h\\tz19.h, p[0-7], \\[x0, #5, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1h\\tz20.h, p[0-7], \\[x0, #6, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1h\\tz21.h, p[0-7], \\[x0, #7, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1w\\tz20.s, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\tz21.s, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\tz22.s, p[0-7]/z, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\tz23.s, p[0-7]/z, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx16sf 1 z20\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz16.d, z20.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz17.d, z21.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz18.d, z22.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz19.d, z23.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx16sf 2 z20, z20, z16\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz20.s, p[0-7], \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz21.s, p[0-7], \\[x0, #5, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz22.s, p[0-7], \\[x0, #6, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz23.s, p[0-7], \\[x0, #7, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1d\\tz24.d, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1d\\tz25.d, p[0-7]/z, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1d\\tz26.d, p[0-7]/z, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1d\\tz27.d, p[0-7]/z, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx8df 1 z24\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz28.d, z24.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz29.d, z25.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz30.d, z26.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz31.d, z27.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx8df 2 z24, z24, z28\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1d\\tz24.d, p[0-7], \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1d\\tz25.d, p[0-7], \\[x0, #5, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1d\\tz26.d, p[0-7], \\[x0, #6, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst1d\\tz27.d, p[0-7], \\[x0, #7, mul vl\\]\\n} } } */"}, {"sha": "7973f67c5cf2793663f7af5f9f9ecbcbecdddf1e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_move_4.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_move_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_move_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_move_4.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,116 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=256 -mlittle-endian --save-temps\" } */\n+\n+typedef char vnx16qi __attribute__((vector_size(32)));\n+typedef struct { vnx16qi a[2]; } vnx32qi;\n+\n+typedef short vnx8hi __attribute__((vector_size(32)));\n+typedef struct { vnx8hi a[2]; } vnx16hi;\n+\n+typedef int vnx4si __attribute__((vector_size(32)));\n+typedef struct { vnx4si a[2]; } vnx8si;\n+\n+typedef long vnx2di __attribute__((vector_size(32)));\n+typedef struct { vnx2di a[2]; } vnx4di;\n+\n+typedef float vnx4sf __attribute__((vector_size(32)));\n+typedef struct { vnx4sf a[2]; } vnx8sf;\n+\n+typedef double vnx2df __attribute__((vector_size(32)));\n+typedef struct { vnx2df a[2]; } vnx4df;\n+\n+#define TEST_TYPE(TYPE, REG1, REG2)\t\t\t\\\n+  void\t\t\t\t\t\t\t\\\n+  f1_##TYPE (TYPE *a)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    register TYPE x asm (#REG1) = a[0];\t\t\t\\\n+    asm volatile (\"# test \" #TYPE \" 1 %S0\" :: \"w\" (x));\t\\\n+    register TYPE y asm (#REG2) = x;\t\t\t\\\n+    asm volatile (\"# test \" #TYPE \" 2 %S0, %S1, %S2\"\t\\\n+\t\t  : \"=&w\" (x) : \"0\" (x), \"w\" (y));\t\\\n+    a[1] = x;\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\\\n+  /* This must compile, but we don't care how.  */\t\\\n+  void\t\t\t\t\t\t\t\\\n+  f2_##TYPE (TYPE *a)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    TYPE x = a[0];\t\t\t\t\t\\\n+    x.a[0][3] = 1;\t\t\t\t\t\\\n+    x.a[1][2] = 12;\t\t\t\t\t\\\n+    asm volatile (\"# %0\" :: \"w\" (x));\t\t\t\\\n+  }\t\t\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\\\n+  f3_##TYPE (TYPE *a, int i)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    TYPE x = a[0];\t\t\t\t\t\\\n+    x.a[0][i] = 1;\t\t\t\t\t\\\n+    asm volatile (\"# %0\" :: \"w\" (x));\t\t\t\\\n+  }\t\t\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\\\n+  f4_##TYPE (TYPE *a, int i, int j)\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    TYPE x = a[0];\t\t\t\t\t\\\n+    x.a[i][j] = 44;\t\t\t\t\t\\\n+    asm volatile (\"# %0\" :: \"w\" (x));\t\t\t\\\n+  }\n+\n+TEST_TYPE (vnx32qi, z0, z2)\n+TEST_TYPE (vnx16hi, z5, z7)\n+TEST_TYPE (vnx8si, z10, z12)\n+TEST_TYPE (vnx4di, z15, z17)\n+TEST_TYPE (vnx8sf, z20, z23)\n+TEST_TYPE (vnx4df, z28, z30)\n+\n+/* { dg-final { scan-assembler {\\tldr\\tz0, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz1, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx32qi 1 z0\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz2.d, z0.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz3.d, z1.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx32qi 2 z0, z0, z2\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz0, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz1, \\[x0, #3, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tldr\\tz5, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz6, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx16hi 1 z5\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz7.d, z5.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz8.d, z6.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx16hi 2 z5, z5, z7\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz5, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz6, \\[x0, #3, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tldr\\tz10, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz11, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx8si 1 z10\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz12.d, z10.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz13.d, z11.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx8si 2 z10, z10, z12\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz10, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz11, \\[x0, #3, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tldr\\tz15, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz16, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx4di 1 z15\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz17.d, z15.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz18.d, z16.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx4di 2 z15, z15, z17\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz15, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz16, \\[x0, #3, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tldr\\tz20, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz21, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx8sf 1 z20\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz23.d, z20.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz24.d, z21.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx8sf 2 z20, z20, z23\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz20, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz21, \\[x0, #3, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tldr\\tz28, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz29, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx4df 1 z28\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz30.d, z28.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz31.d, z29.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx4df 2 z28, z28, z30\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz28, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz29, \\[x0, #3, mul vl\\]\\n} } } */"}, {"sha": "e0bf04aec689306aa0146b34f2f5fbfa5fa77be0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_move_5.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_move_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_move_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_move_5.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=256 -mlittle-endian --save-temps\" } */\n+\n+typedef char vnx16qi __attribute__((vector_size(32)));\n+typedef struct { vnx16qi a[3]; } vnx48qi;\n+\n+typedef short vnx8hi __attribute__((vector_size(32)));\n+typedef struct { vnx8hi a[3]; } vnx24hi;\n+\n+typedef int vnx4si __attribute__((vector_size(32)));\n+typedef struct { vnx4si a[3]; } vnx12si;\n+\n+typedef long vnx2di __attribute__((vector_size(32)));\n+typedef struct { vnx2di a[3]; } vnx6di;\n+\n+typedef float vnx4sf __attribute__((vector_size(32)));\n+typedef struct { vnx4sf a[3]; } vnx12sf;\n+\n+typedef double vnx2df __attribute__((vector_size(32)));\n+typedef struct { vnx2df a[3]; } vnx6df;\n+\n+#define TEST_TYPE(TYPE, REG1, REG2) \\\n+  void \\\n+  f_##TYPE (TYPE *a) \\\n+  { \\\n+    register TYPE x asm (#REG1) = a[0]; \\\n+    asm volatile (\"# test \" #TYPE \" 1 %S0\" :: \"w\" (x)); \\\n+    register TYPE y asm (#REG2) = x; \\\n+    asm volatile (\"# test \" #TYPE \" 2 %S0, %S1, %S2\" \\\n+\t\t  : \"=&w\" (x) : \"0\" (x), \"w\" (y)); \\\n+    a[1] = x; \\\n+  }\n+\n+TEST_TYPE (vnx48qi, z0, z3)\n+TEST_TYPE (vnx24hi, z6, z2)\n+TEST_TYPE (vnx12si, z12, z15)\n+TEST_TYPE (vnx6di, z16, z13)\n+TEST_TYPE (vnx12sf, z20, z23)\n+TEST_TYPE (vnx6df, z26, z29)\n+\n+/* { dg-final { scan-assembler {\\tldr\\tz0, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz1, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz2, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx48qi 1 z0\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz3.d, z0.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz4.d, z1.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz5.d, z2.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx48qi 2 z0, z0, z3\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz0, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz1, \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz2, \\[x0, #5, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tldr\\tz6, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz7, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz8, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx24hi 1 z6\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz2.d, z6.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz3.d, z7.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz4.d, z8.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx24hi 2 z6, z6, z2\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz6, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz7, \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz8, \\[x0, #5, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tldr\\tz12, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz13, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz14, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx12si 1 z12\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz15.d, z12.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz16.d, z13.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz17.d, z14.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx12si 2 z12, z12, z15\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz12, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz13, \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz14, \\[x0, #5, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tldr\\tz16, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz17, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz18, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx6di 1 z16\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz13.d, z16.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz14.d, z17.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz15.d, z18.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx6di 2 z16, z16, z13\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz16, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz17, \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz18, \\[x0, #5, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tldr\\tz20, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz21, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz22, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx12sf 1 z20\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz23.d, z20.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz24.d, z21.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz25.d, z22.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx12sf 2 z20, z20, z23\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz20, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz21, \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz22, \\[x0, #5, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tldr\\tz26, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz27, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz28, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx6df 1 z26\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz29.d, z26.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz30.d, z27.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz31.d, z28.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx6df 2 z26, z26, z29\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz26, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz27, \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz28, \\[x0, #5, mul vl\\]\\n} } } */"}, {"sha": "8336e3f1eddf3225b30c393c303bd8e3134bc272", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_move_6.c", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_move_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_move_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_move_6.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,129 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=256 -mlittle-endian --save-temps\" } */\n+\n+typedef char vnx16qi __attribute__((vector_size(32)));\n+typedef struct { vnx16qi a[4]; } vnx64qi;\n+\n+typedef short vnx8hi __attribute__((vector_size(32)));\n+typedef struct { vnx8hi a[4]; } vnx32hi;\n+\n+typedef int vnx4si __attribute__((vector_size(32)));\n+typedef struct { vnx4si a[4]; } vnx16si;\n+\n+typedef long vnx2di __attribute__((vector_size(32)));\n+typedef struct { vnx2di a[4]; } vnx8di;\n+\n+typedef float vnx4sf __attribute__((vector_size(32)));\n+typedef struct { vnx4sf a[4]; } vnx16sf;\n+\n+typedef double vnx2df __attribute__((vector_size(32)));\n+typedef struct { vnx2df a[4]; } vnx8df;\n+\n+#define TEST_TYPE(TYPE, REG1, REG2) \\\n+  void \\\n+  f_##TYPE (TYPE *a) \\\n+  { \\\n+    register TYPE x asm (#REG1) = a[0]; \\\n+    asm volatile (\"# test \" #TYPE \" 1 %S0\" :: \"w\" (x)); \\\n+    register TYPE y asm (#REG2) = x; \\\n+    asm volatile (\"# test \" #TYPE \" 2 %S0, %S1, %S2\" \\\n+\t\t  : \"=&w\" (x) : \"0\" (x), \"w\" (y)); \\\n+    a[1] = x; \\\n+  }\n+\n+TEST_TYPE (vnx64qi, z0, z4)\n+TEST_TYPE (vnx32hi, z6, z2)\n+TEST_TYPE (vnx16si, z12, z16)\n+TEST_TYPE (vnx8di, z17, z13)\n+TEST_TYPE (vnx16sf, z20, z16)\n+TEST_TYPE (vnx8df, z24, z28)\n+\n+/* { dg-final { scan-assembler {\\tldr\\tz0, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz1, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz2, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz3, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx64qi 1 z0\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz4.d, z0.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz5.d, z1.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz6.d, z2.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz7.d, z3.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx64qi 2 z0, z0, z4\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz0, \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz1, \\[x0, #5, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz2, \\[x0, #6, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz3, \\[x0, #7, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tldr\\tz6, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz7, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz8, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz9, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx32hi 1 z6\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz2.d, z6.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz3.d, z7.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz4.d, z8.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz5.d, z9.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx32hi 2 z6, z6, z2\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz6, \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz7, \\[x0, #5, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz8, \\[x0, #6, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz9, \\[x0, #7, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tldr\\tz12, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz13, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz14, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz15, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx16si 1 z12\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz16.d, z12.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz17.d, z13.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz18.d, z14.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz19.d, z15.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx16si 2 z12, z12, z16\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz12, \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz13, \\[x0, #5, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz14, \\[x0, #6, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz15, \\[x0, #7, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tldr\\tz17, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz18, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz19, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz20, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx8di 1 z17\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz13.d, z17.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz14.d, z18.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz15.d, z19.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz16.d, z20.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx8di 2 z17, z17, z13\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz17, \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz18, \\[x0, #5, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz19, \\[x0, #6, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz20, \\[x0, #7, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tldr\\tz20, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz21, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz22, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz23, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx16sf 1 z20\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz16.d, z20.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz17.d, z21.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz18.d, z22.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz19.d, z23.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx16sf 2 z20, z20, z16\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz20, \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz21, \\[x0, #5, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz22, \\[x0, #6, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz23, \\[x0, #7, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tldr\\tz24, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz25, \\[x0, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz26, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tldr\\tz27, \\[x0, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler { test vnx8df 1 z24\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz28.d, z24.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz29.d, z25.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz30.d, z26.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz31.d, z27.d\\n} } } */\n+/* { dg-final { scan-assembler { test vnx8df 2 z24, z24, z28\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz24, \\[x0, #4, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz25, \\[x0, #5, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz26, \\[x0, #6, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tstr\\tz27, \\[x0, #7, mul vl\\]\\n} } } */"}, {"sha": "014f4ecc494a93e53c904f0d06a0ed6baf0801fe", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_1.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_1.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#ifndef TYPE\n+#define TYPE unsigned char\n+#endif\n+\n+#ifndef NAME\n+#define NAME(X) X\n+#endif\n+\n+#define N 1024\n+\n+void __attribute__ ((noinline, noclone))\n+NAME(f2) (TYPE *__restrict a, TYPE *__restrict b, TYPE *__restrict c)\n+{\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = c[i * 2];\n+      b[i] = c[i * 2 + 1];\n+    }\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+NAME(f3) (TYPE *__restrict a, TYPE *__restrict b, TYPE *__restrict c,\n+\t  TYPE *__restrict d)\n+{\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = d[i * 3];\n+      b[i] = d[i * 3 + 1];\n+      c[i] = d[i * 3 + 2];\n+    }\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+NAME(f4) (TYPE *__restrict a, TYPE *__restrict b, TYPE *__restrict c,\n+\t  TYPE *__restrict d, TYPE *__restrict e)\n+{\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = e[i * 4];\n+      b[i] = e[i * 4 + 1];\n+      c[i] = e[i * 4 + 2];\n+      d[i] = e[i * 4 + 3];\n+    }\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+NAME(g2) (TYPE *__restrict a, TYPE *__restrict b, TYPE *__restrict c)\n+{\n+  for (int i = 0; i < N; ++i)\n+    {\n+      c[i * 2] = a[i];\n+      c[i * 2 + 1] = b[i];\n+    }\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+NAME(g3) (TYPE *__restrict a, TYPE *__restrict b, TYPE *__restrict c,\n+\t  TYPE *__restrict d)\n+{\n+  for (int i = 0; i < N; ++i)\n+    {\n+      d[i * 3] = a[i];\n+      d[i * 3 + 1] = b[i];\n+      d[i * 3 + 2] = c[i];\n+    }\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+NAME(g4) (TYPE *__restrict a, TYPE *__restrict b, TYPE *__restrict c,\n+\t  TYPE *__restrict d, TYPE *__restrict e)\n+{\n+  for (int i = 0; i < N; ++i)\n+    {\n+      e[i * 4] = a[i];\n+      e[i * 4 + 1] = b[i];\n+      e[i * 4 + 2] = c[i];\n+      e[i * 4 + 3] = d[i];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} } } */"}, {"sha": "e19ab3d89eefcc621a6128aa00356c5015571d10", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_10.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_10.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE unsigned long\n+#define ITYPE long\n+#include \"struct_vect_7.c\"\n+\n+/* { dg-final { scan-assembler {\\tld2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld3d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst3d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst4d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} } } */"}, {"sha": "e0e5cf9daf7828abb25ed33f9311fec381830527", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_10_run.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_10_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_10_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_10_run.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE unsigned long\n+#define ITYPE long\n+#include \"struct_vect_7_run.c\""}, {"sha": "ae665461c49692af34f0f2e454d36205cb0ae288", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_11.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_11.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE _Float16\n+#define ITYPE short\n+#include \"struct_vect_7.c\"\n+\n+/* { dg-final { scan-assembler {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst4h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} } } */"}, {"sha": "1544d8e5f4a28f30ec0a92515da7f0863a960870", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_11_run.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_11_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_11_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_11_run.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE _Float16\n+#define ITYPE short\n+#include \"struct_vect_7_run.c\""}, {"sha": "69bea7b7f0d75b07ad89bb204a53a11150e25022", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_12.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_12.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE float\n+#define ITYPE int\n+#include \"struct_vect_7.c\"\n+\n+/* { dg-final { scan-assembler {\\tld2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld3w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst3w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst4w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} } } */"}, {"sha": "784d93d62d359be6b313150b603951890bb903b4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_12_run.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_12_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_12_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_12_run.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE float\n+#define ITYPE int\n+#include \"struct_vect_7_run.c\""}, {"sha": "13947a39e67a4c8d9bfbedcbe1b8bb5aa7ee8c47", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_13.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_13.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE double\n+#define ITYPE long\n+#include \"struct_vect_7.c\"\n+\n+/* { dg-final { scan-assembler {\\tld2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld3d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst3d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst4d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} } } */"}, {"sha": "1674fae5792490d264af69fd9274d8ea0ff2b12a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_13_run.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_13_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_13_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_13_run.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE double\n+#define ITYPE long\n+#include \"struct_vect_7_run.c\""}, {"sha": "8c401329425519976c9eb428a0adcf3e50748b56", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_14.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_14.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=256 --save-temps\" } */\n+\n+#define TYPE unsigned char\n+#define NAME(X) qi_##X\n+#include \"struct_vect_1.c\"\n+#undef NAME\n+#undef TYPE\n+\n+#define TYPE unsigned short\n+#define NAME(X) hi_##X\n+#include \"struct_vect_1.c\"\n+#undef NAME\n+#undef TYPE\n+\n+#define TYPE unsigned int\n+#define NAME(X) si_##X\n+#include \"struct_vect_1.c\"\n+#undef NAME\n+#undef TYPE\n+\n+#define TYPE unsigned long\n+#define NAME(X) di_##X\n+#include \"struct_vect_1.c\"\n+#undef NAME\n+#undef TYPE\n+\n+#define TYPE _Float16\n+#define NAME(X) hf_##X\n+#include \"struct_vect_1.c\"\n+#undef NAME\n+#undef TYPE\n+\n+#define TYPE float\n+#define NAME(X) sf_##X\n+#include \"struct_vect_1.c\"\n+#undef NAME\n+#undef TYPE\n+\n+#define TYPE double\n+#define NAME(X) df_##X\n+#include \"struct_vect_1.c\"\n+#undef NAME\n+#undef TYPE\n+\n+/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld4h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld3w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld4w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld3d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld4d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */"}, {"sha": "814dbb3ae41f7f5bb13ffc6e59d6f7802f3c264e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_15.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_15.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=512 --save-temps\" } */\n+\n+#include \"struct_vect_14.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld4h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld3w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld4w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld3d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld4d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */"}, {"sha": "6ecf89b54420625140c08aa226a1a60b1e274398", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_16.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=1024 --save-temps\" } */\n+\n+#include \"struct_vect_14.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld4h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld3w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld4w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld3d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld4d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */"}, {"sha": "571c6d0d33b7688bde6445cb2fb2493223cd9494", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_17.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_17.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=2048 --save-temps\" } */\n+\n+#include \"struct_vect_14.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld4h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld3w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld4w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld3d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld4d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */"}, {"sha": "d56420d8edc7776134d40572ab9769d3ed17831e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_1_run.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_1_run.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#include \"struct_vect_1.c\"\n+\n+TYPE a[N], b[N], c[N], d[N], e[N * 4];\n+\n+void __attribute__ ((noinline, noclone))\n+init_array (TYPE *array, int n, TYPE base, TYPE step)\n+{\n+  for (int i = 0; i < n; ++i)\n+    array[i] = base + step * i;\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+check_array (TYPE *array, int n, TYPE base, TYPE step)\n+{\n+  for (int i = 0; i < n; ++i)\n+    if (array[i] != (TYPE) (base + step * i))\n+      __builtin_abort ();\n+}\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  init_array (e, 2 * N, 11, 5);\n+  f2 (a, b, e);\n+  check_array (a, N, 11, 10);\n+  check_array (b, N, 16, 10);\n+\n+  init_array (e, 3 * N, 7, 6);\n+  f3 (a, b, c, e);\n+  check_array (a, N, 7, 18);\n+  check_array (b, N, 13, 18);\n+  check_array (c, N, 19, 18);\n+\n+  init_array (e, 4 * N, 4, 11);\n+  f4 (a, b, c, d, e);\n+  check_array (a, N, 4, 44);\n+  check_array (b, N, 15, 44);\n+  check_array (c, N, 26, 44);\n+  check_array (d, N, 37, 44);\n+\n+  init_array (a, N, 2, 8);\n+  init_array (b, N, 6, 8);\n+  g2 (a, b, e);\n+  check_array (e, 2 * N, 2, 4);\n+\n+  init_array (a, N, 4, 15);\n+  init_array (b, N, 9, 15);\n+  init_array (c, N, 14, 15);\n+  g3 (a, b, c, e);\n+  check_array (e, 3 * N, 4, 5);\n+\n+  init_array (a, N, 14, 36);\n+  init_array (b, N, 23, 36);\n+  init_array (c, N, 32, 36);\n+  init_array (d, N, 41, 36);\n+  g4 (a, b, c, d, e);\n+  check_array (e, 4 * N, 14, 9);\n+\n+  return 0;\n+}"}, {"sha": "83745831c37666bb2e6905457cf67c2bda197207", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_2.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE unsigned short\n+#include \"struct_vect_1.c\"\n+\n+/* { dg-final { scan-assembler {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst4h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} } } */"}, {"sha": "a9b8e1d8e725d9de80bded860f17e4309d0b879f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_2_run.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_2_run.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE unsigned short\n+#include \"struct_vect_1_run.c\""}, {"sha": "a3e49a5fe06a65b880c21b64279c4a1225523cb0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_3.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE unsigned int\n+#include \"struct_vect_1.c\"\n+\n+/* { dg-final { scan-assembler {\\tld2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld3w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst3w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst4w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} } } */"}, {"sha": "03ffc7a2a172a33ac097208e8b5e67d3147d4b10", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_3_run.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_3_run.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE unsigned int\n+#include \"struct_vect_1_run.c\""}, {"sha": "fcd6476a71819cdeed161a62c6e0fc2447eb0235", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_4.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE unsigned long\n+#include \"struct_vect_1.c\"\n+\n+/* { dg-final { scan-assembler {\\tld2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld3d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst3d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst4d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} } } */"}, {"sha": "15238b44b5cddea64057a615ded8678c93cbd1a7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_4_run.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_4_run.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE unsigned long\n+#include \"struct_vect_1_run.c\""}, {"sha": "0ea13aa865c9139a8a4e27aee9c37f3c7411c7c8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_5.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_5.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE float\n+#include \"struct_vect_1.c\"\n+\n+/* { dg-final { scan-assembler {\\tld2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld3w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst3w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst4w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} } } */"}, {"sha": "73cf9af36895934405e98f7262e7de7d2a1c0e60", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_5_run.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_5_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_5_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_5_run.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE float\n+#include \"struct_vect_1_run.c\""}, {"sha": "ba584de904feb01c3f3e7162c030cdcfa962b3d0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_6.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_6.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE double\n+#include \"struct_vect_1.c\"\n+\n+/* { dg-final { scan-assembler {\\tld2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld3d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst3d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst4d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} } } */"}, {"sha": "1f61d6edf2025250c0fa61864b69c9b6428a11eb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_6_run.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_6_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_6_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_6_run.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE double\n+#include \"struct_vect_1_run.c\""}, {"sha": "203a9786098e11eeefb6db2a961aa327991dd6a2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_7.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_7.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#ifndef TYPE\n+#define TYPE unsigned char\n+#define ITYPE signed char\n+#endif\n+\n+void __attribute__ ((noinline, noclone))\n+f2 (TYPE *__restrict a, TYPE *__restrict b, TYPE *__restrict c, ITYPE n)\n+{\n+  for (ITYPE i = 0; i < n; ++i)\n+    {\n+      a[i] = c[i * 2];\n+      b[i] = c[i * 2 + 1];\n+    }\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+f3 (TYPE *__restrict a, TYPE *__restrict b, TYPE *__restrict c,\n+    TYPE *__restrict d, ITYPE n)\n+{\n+  for (ITYPE i = 0; i < n; ++i)\n+    {\n+      a[i] = d[i * 3];\n+      b[i] = d[i * 3 + 1];\n+      c[i] = d[i * 3 + 2];\n+    }\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+f4 (TYPE *__restrict a, TYPE *__restrict b, TYPE *__restrict c,\n+    TYPE *__restrict d, TYPE *__restrict e, ITYPE n)\n+{\n+  for (ITYPE i = 0; i < n; ++i)\n+    {\n+      a[i] = e[i * 4];\n+      b[i] = e[i * 4 + 1];\n+      c[i] = e[i * 4 + 2];\n+      d[i] = e[i * 4 + 3];\n+    }\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+g2 (TYPE *__restrict a, TYPE *__restrict b, TYPE *__restrict c, ITYPE n)\n+{\n+  for (ITYPE i = 0; i < n; ++i)\n+    {\n+      c[i * 2] = a[i];\n+      c[i * 2 + 1] = b[i];\n+    }\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+g3 (TYPE *__restrict a, TYPE *__restrict b, TYPE *__restrict c,\n+    TYPE *__restrict d, ITYPE n)\n+{\n+  for (ITYPE i = 0; i < n; ++i)\n+    {\n+      d[i * 3] = a[i];\n+      d[i * 3 + 1] = b[i];\n+      d[i * 3 + 2] = c[i];\n+    }\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+g4 (TYPE *__restrict a, TYPE *__restrict b, TYPE *__restrict c,\n+    TYPE *__restrict d, TYPE *__restrict e, ITYPE n)\n+{\n+  for (ITYPE i = 0; i < n; ++i)\n+    {\n+      e[i * 4] = a[i];\n+      e[i * 4 + 1] = b[i];\n+      e[i * 4 + 2] = c[i];\n+      e[i * 4 + 3] = d[i];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} } } */"}, {"sha": "70d7da910e0a24956f016d2c672a3f523a672352", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_7_run.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_7_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_7_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_7_run.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#include \"struct_vect_7.c\"\n+\n+#define N 93\n+\n+TYPE a[N], b[N], c[N], d[N], e[N * 4];\n+\n+void __attribute__ ((noinline, noclone))\n+init_array (TYPE *array, int n, TYPE base, TYPE step)\n+{\n+  for (int i = 0; i < n; ++i)\n+    array[i] = base + step * i;\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+check_array (TYPE *array, int n, TYPE base, TYPE step)\n+{\n+  for (int i = 0; i < n; ++i)\n+    if (array[i] != (TYPE) (base + step * i))\n+      __builtin_abort ();\n+}\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  init_array (e, 2 * N, 11, 5);\n+  f2 (a, b, e, N);\n+  check_array (a, N, 11, 10);\n+  check_array (b, N, 16, 10);\n+\n+  init_array (e, 3 * N, 7, 6);\n+  f3 (a, b, c, e, N);\n+  check_array (a, N, 7, 18);\n+  check_array (b, N, 13, 18);\n+  check_array (c, N, 19, 18);\n+\n+  init_array (e, 4 * N, 4, 11);\n+  f4 (a, b, c, d, e, N);\n+  check_array (a, N, 4, 44);\n+  check_array (b, N, 15, 44);\n+  check_array (c, N, 26, 44);\n+  check_array (d, N, 37, 44);\n+\n+  init_array (a, N, 2, 8);\n+  init_array (b, N, 6, 8);\n+  g2 (a, b, e, N);\n+  check_array (e, 2 * N, 2, 4);\n+\n+  init_array (a, N, 4, 15);\n+  init_array (b, N, 9, 15);\n+  init_array (c, N, 14, 15);\n+  g3 (a, b, c, e, N);\n+  check_array (e, 3 * N, 4, 5);\n+\n+  init_array (a, N, 14, 36);\n+  init_array (b, N, 23, 36);\n+  init_array (c, N, 32, 36);\n+  init_array (d, N, 41, 36);\n+  g4 (a, b, c, d, e, N);\n+  check_array (e, 4 * N, 14, 9);\n+\n+  return 0;\n+}"}, {"sha": "0905bfdaecdd6ff3293ad2e7b5b2bb7fb83748d8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_8.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE unsigned short\n+#define ITYPE short\n+#include \"struct_vect_7.c\"\n+\n+/* { dg-final { scan-assembler {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst4h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} } } */"}, {"sha": "3e360d81451824aa335fef0e59f3114331b38468", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_8_run.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_8_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_8_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_8_run.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE unsigned short\n+#define ITYPE short\n+#include \"struct_vect_7_run.c\""}, {"sha": "b6bc5c0b6a2eed83930bd5b939eb5b457d8b7ad3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_9.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_9.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE unsigned int\n+#define ITYPE int\n+#include \"struct_vect_7.c\"\n+\n+/* { dg-final { scan-assembler {\\tld2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld3w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst3w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst4w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} } } */"}, {"sha": "3588b26bd563a7ab54bb18bb6725fe1342886597", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_9_run.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_9_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8eb9a45654662092ce1b6d452c13ee80be954/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_9_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_9_run.c?ref=abc8eb9a45654662092ce1b6d452c13ee80be954", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define TYPE unsigned int\n+#define ITYPE int\n+#include \"struct_vect_7_run.c\""}]}