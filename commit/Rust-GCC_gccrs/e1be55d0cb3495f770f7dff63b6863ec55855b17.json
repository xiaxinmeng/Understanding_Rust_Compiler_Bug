{"sha": "e1be55d0cb3495f770f7dff63b6863ec55855b17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFiZTU1ZDBjYjM0OTVmNzcwZjdkZmY2M2I2ODYzZWM1NTg1NWIxNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-01-14T23:07:04Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-01-14T23:07:04Z"}, "message": "builtins.c (std_expand_builtin_va_arg): Align operand when needed.\n\n\n\t* builtins.c (std_expand_builtin_va_arg): Align operand when needed.\n\t* i386.c (init_cumulative_args): Set warn_sse; fix handling of variadic\n\tfunctions accepting SSE arguments\n\t(function_arg): Warn only when asked to warn.\n\t* i386.h (ix86_args): Add warn_sse/warn_mmx fiels.\n\nFrom-SVN: r75892", "tree": {"sha": "abaeb984e878c9db1857505cdb481fa65f664f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abaeb984e878c9db1857505cdb481fa65f664f9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1be55d0cb3495f770f7dff63b6863ec55855b17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1be55d0cb3495f770f7dff63b6863ec55855b17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1be55d0cb3495f770f7dff63b6863ec55855b17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1be55d0cb3495f770f7dff63b6863ec55855b17/comments", "author": null, "committer": null, "parents": [{"sha": "f560bf91ae0ba419d7445eb19c09a4d1ad341e75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f560bf91ae0ba419d7445eb19c09a4d1ad341e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f560bf91ae0ba419d7445eb19c09a4d1ad341e75"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "bd78cf1a9267dede5bb16ad2bef53c3d49295e55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1be55d0cb3495f770f7dff63b6863ec55855b17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1be55d0cb3495f770f7dff63b6863ec55855b17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1be55d0cb3495f770f7dff63b6863ec55855b17", "patch": "@@ -1,3 +1,11 @@\n+2004-01-15  Jan Hubicka  <jh@suse.cz>\n+\n+\t* builtins.c (std_expand_builtin_va_arg): Align operand when needed.\n+\t* i386.c (init_cumulative_args): Set warn_sse; fix handling of variadic\n+\tfunctions accepting SSE arguments\n+\t(function_arg): Warn only when asked to warn.\n+\t* i386.h (ix86_args): Add warn_sse/warn_mmx fiels.\n+\n 2004-01-14  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* c-parse.in (stmts_and_decls): Make label at end of compound"}, {"sha": "c940899e870387e1b3c8129c49153886f64e8bab", "filename": "gcc/builtins.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1be55d0cb3495f770f7dff63b6863ec55855b17/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1be55d0cb3495f770f7dff63b6863ec55855b17/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e1be55d0cb3495f770f7dff63b6863ec55855b17", "patch": "@@ -3990,10 +3990,32 @@ std_expand_builtin_va_arg (tree valist, tree type)\n   tree align, alignm1;\n   tree rounded_size;\n   rtx addr;\n+  HOST_WIDE_INT boundary;\n \n   /* Compute the rounded size of the type.  */\n   align = size_int (PARM_BOUNDARY / BITS_PER_UNIT);\n   alignm1 = size_int (PARM_BOUNDARY / BITS_PER_UNIT - 1);\n+  boundary = FUNCTION_ARG_BOUNDARY (TYPE_MODE (type), type);\n+\n+  /* va_list pointer is aligned to PARM_BOUNDARY.  If argument actually\n+     requires greater alignment, we must perform dynamic alignment.  */\n+\n+  if (boundary > PARM_BOUNDARY)\n+    {\n+      if (!PAD_VARARGS_DOWN)\n+\t{\n+\t  t = build (MODIFY_EXPR, TREE_TYPE (valist), valist,\n+\t\t     build (PLUS_EXPR, TREE_TYPE (valist), valist,\n+\t\t\t    build_int_2 (boundary / BITS_PER_UNIT - 1, 0)));\n+\t  TREE_SIDE_EFFECTS (t) = 1;\n+\t  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\t}\n+      t = build (MODIFY_EXPR, TREE_TYPE (valist), valist,\n+\t\t build (BIT_AND_EXPR, TREE_TYPE (valist), valist,\n+\t\t\tbuild_int_2 (~(boundary / BITS_PER_UNIT - 1), -1)));\n+      TREE_SIDE_EFFECTS (t) = 1;\n+      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+    }\n   if (type == error_mark_node\n       || (type_size = TYPE_SIZE_UNIT (TYPE_MAIN_VARIANT (type))) == NULL\n       || TREE_OVERFLOW (type_size))"}, {"sha": "42dfca097374815bf5c90a4eb5b24db9a57ae575", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1be55d0cb3495f770f7dff63b6863ec55855b17/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1be55d0cb3495f770f7dff63b6863ec55855b17/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e1be55d0cb3495f770f7dff63b6863ec55855b17", "patch": "@@ -1839,6 +1839,8 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n     cum->nregs = ix86_regparm;\n   cum->sse_nregs = SSE_REGPARM_MAX;\n   cum->mmx_nregs = MMX_REGPARM_MAX;\n+  cum->warn_sse = true;\n+  cum->warn_mmx = true;\n   cum->maybe_vaarg = false;\n \n   /* Use ecx and edx registers if function has fastcall attribute */\n@@ -1857,7 +1859,7 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n      are no variable arguments.  If there are variable arguments, then\n      we won't pass anything in registers */\n \n-  if (cum->nregs)\n+  if (cum->nregs || !TARGET_MMX || !TARGET_SSE)\n     {\n       for (param = (fntype) ? TYPE_ARG_TYPES (fntype) : 0;\n \t   param != 0; param = next_param)\n@@ -1868,6 +1870,10 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n \t      if (!TARGET_64BIT)\n \t\t{\n \t\t  cum->nregs = 0;\n+\t\t  cum->sse_nregs = 0;\n+\t\t  cum->mmx_nregs = 0;\n+\t\t  cum->warn_sse = 0;\n+\t\t  cum->warn_mmx = 0;\n \t\t  cum->fastcall = 0;\n \t\t}\n \t      cum->maybe_vaarg = true;\n@@ -2581,7 +2587,7 @@ function_arg (CUMULATIVE_ARGS *cum,\t/* current arg information */\n       case V2DFmode:\n \tif (!type || !AGGREGATE_TYPE_P (type))\n \t  {\n-\t    if (!TARGET_SSE && !warnedmmx)\n+\t    if (!TARGET_SSE && !warnedmmx && cum->warn_sse)\n \t      {\n \t\twarnedsse = true;\n \t\twarning (\"SSE vector argument without SSE enabled \"\n@@ -2597,7 +2603,7 @@ function_arg (CUMULATIVE_ARGS *cum,\t/* current arg information */\n       case V2SFmode:\n \tif (!type || !AGGREGATE_TYPE_P (type))\n \t  {\n-\t    if (!TARGET_MMX && !warnedmmx)\n+\t    if (!TARGET_MMX && !warnedmmx && cum->warn_mmx)\n \t      {\n \t\twarnedmmx = true;\n \t\twarning (\"MMX vector argument without MMX enabled \""}, {"sha": "52b193bb022555f711bbf7fa2dcf5116978468b1", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1be55d0cb3495f770f7dff63b6863ec55855b17/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1be55d0cb3495f770f7dff63b6863ec55855b17/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e1be55d0cb3495f770f7dff63b6863ec55855b17", "patch": "@@ -1743,6 +1743,8 @@ typedef struct ix86_args {\n   int fastcall;\t\t/* fastcall calling convention is used */\n   int sse_words;\t\t/* # sse words passed so far */\n   int sse_nregs;\t\t/* # sse registers available for passing */\n+  int warn_sse;\t\t\t/* True when we want to warn about SSE ABI.  */\n+  int warn_mmx;\t\t\t/* True when we want to warn about MMX ABI.  */\n   int sse_regno;\t\t/* next available sse register number */\n   int mmx_words;\t\t/* # mmx words passed so far */\n   int mmx_nregs;\t\t/* # mmx registers available for passing */"}]}