{"sha": "8918fe18ab24b24cba7575face37f1726a23ef19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkxOGZlMThhYjI0YjI0Y2JhNzU3NWZhY2UzN2YxNzI2YTIzZWYxOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-18T10:27:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-18T10:27:48Z"}, "message": "[multiple changes]\n\n2010-10-18  Jose Ruiz  <ruiz@adacore.com>\n\n\t* exp_ch9.adb (Expand_N_Task_Type_Declaration): Add field corresponding\n\tto the affinity when expanding the task declaration.\n\t(Make_Task_Create_Call): Add the affinity parameter to the call to\n\tcreate task.\n\t* sem_prag.adb (Analyze_Pragma): Add the analysis for pragma CPU,\n\ttaking into account the case when it applies to a subprogram (only for\n\tmain and with static expression) or to a task.\n\t* par_prag.adb:(Prag): Make pragma CPU a valid one.\n\t* snames.ads-tmpl (Name_uCPU, Name_CPU): Add these new name identifiers\n\tused by the expander for handling the affinity parameter when creating\n\ta task.\n\t(Pragma_Id): Add Pragma_CPU as a valid one.\n\t* rtsfind.ads (RTU_Id): Make System_Multiprocessors accesible.\n\t(RE_Id, RE_Unit_Table): Make the entities RE_CPU_Range and\n\tRE_Unspecified_CPU visible.\n\t* sinfo.ads, sinfo.adb (Has_Pragma_CPU, Set_Has_Pragma_CPU): Add these\n\ttwo subprograms to set/get the flag indicating whether there is a\n\tpragma CPU which applies to the entity.\n\t* lib.ads, lib.adb (Unit_Record, Default_Main_CPU, Main_CPU,\n\tSet_Main_CPU): Add the field Main_CPU to Unit_Record to store the value\n\tof the affinity associated to the main subprogram (if any).\n\tDefault_Main_CPU is used when no affinity is set. Subprograms\n\tSet_Main_CPU and Main_CPU are added to set/get the affinity of the main\n\tsubprogram.\n\t* ali.ads, ali.adb (ALIs_Record): Add field Main_CPU to contain the\n\tvalue of the affinity of the main subprogram.\n\t(Scan_ALI): Get the affinity of the main subprogram (encoded as C=XX in\n\tthe M line).\n\t* lib-writ.ads, lib-writ.adb (M_Parameters): Encode the affinity of the\n\tmain subprogram in the M (main) line using C=XX.\n\t* lib-load.adb (Create_Dummy_Package_Unit, Load_Main_Source,\n\tLoad_Unit): Add new field Main_CPU.\n\t* bindgen.adb (Gen_Adainit_Ada, Gen_Adainit_C): Add the code to pass\n\tthe affinity of the main subprogram to the run time.\n\t* s-taskin.ads (Common_ATCB): Add the field Base_CPU to store the\n\taffinity.\n\t(Unspecified_CPU): Add this constant to identify the case when no\n\taffinity is set for tasks.\n\t* s-taskin.adb (Initialize_ATCB): Store the value coming from pragma\n\tCPU in the common part of the ATCB.\n\t(Initialize): Store the value coming from pragma CPU (for the\n\tenvironment task) in the common part of the ATCB.\n\t* s-tassta.ads, s-tassta.adb (Create_Task): Add the affinity specified\n\tby pragma CPU to the ATCB.\n\t* s-tarest.ads, s-tarest.adb (Create_Restricted_Task): Add the affinity\n\tspecified by pragma CPU to the ATCB.\n\t* s-tporft.adb (Register_Foreign_Thread): Add the new affinity\n\tparameter to the call to Initialize_ATCB.\n\t* s-taprop-linux.adb (Create_Task): Change the attributes of the thread\n\tto include the task affinity before creation. Additionally, the\n\taffinity selected with Task_Info is also enforced changing the\n\tattributes at task creation time, instead of changing it after creation.\n\t(Initialize): Change the affinity of the environment task if required\n\tby a pragma CPU.\n\t* s-osinte-linux.ads (pthread_setaffinity_np): Instead of using a\n\twrapper to check whether the function is available or not, use a weak\n\tsymbol.\n\t(pthread_attr_setaffinity_np): Add the import of this function which is\n\tused to change the affinity in the attributes used to create a thread.\n\t* adaint.c (__gnat_pthread_attr_setaffinity_np): Remove this wrapper.\n\tIt was used to check whether the pthread function was available or not,\n\tbut the use of a weak symbol handles this situation in a cleaner way.\n\t* s-taprop-mingw.adb (Create_Task, Initialize): Change the affinity of\n\ttasks (including the environment task) if required by a pragma CPU.\n\t* s-taprop-solaris.adb (Enter_Task): Change the affinity of tasks\n\t(including the environment task) if required by a pragma CPU.\n\t* s-taprop-vxworks.adb (Create_Task, Initialize): Change the affinity\n\tof tasks (including the environment task) if required by a pragma CPU.\n\t* init.c (__gl_main_cpu): Make this value visible to the run time. It\n\twill pass the affinity of the environment task.\n\n2010-10-18  Javier Miranda  <miranda@adacore.com>\n\n\t* einfo.adb (Direct_Primitive_Operations): Complete assertion.\n\nFrom-SVN: r165625", "tree": {"sha": "857aedf3baf2b3a0ed2ad1c3eaef04565c4b834b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/857aedf3baf2b3a0ed2ad1c3eaef04565c4b834b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8918fe18ab24b24cba7575face37f1726a23ef19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8918fe18ab24b24cba7575face37f1726a23ef19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8918fe18ab24b24cba7575face37f1726a23ef19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8918fe18ab24b24cba7575face37f1726a23ef19/comments", "author": null, "committer": null, "parents": [{"sha": "e57ab5507b20632ae70b0ce192cbeca049133a1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57ab5507b20632ae70b0ce192cbeca049133a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e57ab5507b20632ae70b0ce192cbeca049133a1a"}], "stats": {"total": 748, "additions": 648, "deletions": 100}, "files": [{"sha": "30806a99a34f01f065f01820cae90a5982acbc02", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -1,3 +1,80 @@\n+2010-10-18  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_N_Task_Type_Declaration): Add field corresponding\n+\tto the affinity when expanding the task declaration.\n+\t(Make_Task_Create_Call): Add the affinity parameter to the call to\n+\tcreate task.\n+\t* sem_prag.adb (Analyze_Pragma): Add the analysis for pragma CPU,\n+\ttaking into account the case when it applies to a subprogram (only for\n+\tmain and with static expression) or to a task.\n+\t* par_prag.adb:(Prag): Make pragma CPU a valid one.\n+\t* snames.ads-tmpl (Name_uCPU, Name_CPU): Add these new name identifiers\n+\tused by the expander for handling the affinity parameter when creating\n+\ta task.\n+\t(Pragma_Id): Add Pragma_CPU as a valid one.\n+\t* rtsfind.ads (RTU_Id): Make System_Multiprocessors accesible.\n+\t(RE_Id, RE_Unit_Table): Make the entities RE_CPU_Range and\n+\tRE_Unspecified_CPU visible.\n+\t* sinfo.ads, sinfo.adb (Has_Pragma_CPU, Set_Has_Pragma_CPU): Add these\n+\ttwo subprograms to set/get the flag indicating whether there is a\n+\tpragma CPU which applies to the entity.\n+\t* lib.ads, lib.adb (Unit_Record, Default_Main_CPU, Main_CPU,\n+\tSet_Main_CPU): Add the field Main_CPU to Unit_Record to store the value\n+\tof the affinity associated to the main subprogram (if any).\n+\tDefault_Main_CPU is used when no affinity is set. Subprograms\n+\tSet_Main_CPU and Main_CPU are added to set/get the affinity of the main\n+\tsubprogram.\n+\t* ali.ads, ali.adb (ALIs_Record): Add field Main_CPU to contain the\n+\tvalue of the affinity of the main subprogram.\n+\t(Scan_ALI): Get the affinity of the main subprogram (encoded as C=XX in\n+\tthe M line).\n+\t* lib-writ.ads, lib-writ.adb (M_Parameters): Encode the affinity of the\n+\tmain subprogram in the M (main) line using C=XX.\n+\t* lib-load.adb (Create_Dummy_Package_Unit, Load_Main_Source,\n+\tLoad_Unit): Add new field Main_CPU.\n+\t* bindgen.adb (Gen_Adainit_Ada, Gen_Adainit_C): Add the code to pass\n+\tthe affinity of the main subprogram to the run time.\n+\t* s-taskin.ads (Common_ATCB): Add the field Base_CPU to store the\n+\taffinity.\n+\t(Unspecified_CPU): Add this constant to identify the case when no\n+\taffinity is set for tasks.\n+\t* s-taskin.adb (Initialize_ATCB): Store the value coming from pragma\n+\tCPU in the common part of the ATCB.\n+\t(Initialize): Store the value coming from pragma CPU (for the\n+\tenvironment task) in the common part of the ATCB.\n+\t* s-tassta.ads, s-tassta.adb (Create_Task): Add the affinity specified\n+\tby pragma CPU to the ATCB.\n+\t* s-tarest.ads, s-tarest.adb (Create_Restricted_Task): Add the affinity\n+\tspecified by pragma CPU to the ATCB.\n+\t* s-tporft.adb (Register_Foreign_Thread): Add the new affinity\n+\tparameter to the call to Initialize_ATCB.\n+\t* s-taprop-linux.adb (Create_Task): Change the attributes of the thread\n+\tto include the task affinity before creation. Additionally, the\n+\taffinity selected with Task_Info is also enforced changing the\n+\tattributes at task creation time, instead of changing it after creation.\n+\t(Initialize): Change the affinity of the environment task if required\n+\tby a pragma CPU.\n+\t* s-osinte-linux.ads (pthread_setaffinity_np): Instead of using a\n+\twrapper to check whether the function is available or not, use a weak\n+\tsymbol.\n+\t(pthread_attr_setaffinity_np): Add the import of this function which is\n+\tused to change the affinity in the attributes used to create a thread.\n+\t* adaint.c (__gnat_pthread_attr_setaffinity_np): Remove this wrapper.\n+\tIt was used to check whether the pthread function was available or not,\n+\tbut the use of a weak symbol handles this situation in a cleaner way.\n+\t* s-taprop-mingw.adb (Create_Task, Initialize): Change the affinity of\n+\ttasks (including the environment task) if required by a pragma CPU.\n+\t* s-taprop-solaris.adb (Enter_Task): Change the affinity of tasks\n+\t(including the environment task) if required by a pragma CPU.\n+\t* s-taprop-vxworks.adb (Create_Task, Initialize): Change the affinity\n+\tof tasks (including the environment task) if required by a pragma CPU.\n+\t* init.c (__gl_main_cpu): Make this value visible to the run time. It\n+\twill pass the affinity of the environment task.\n+\n+2010-10-18  Javier Miranda  <miranda@adacore.com>\n+\n+\t* einfo.adb (Direct_Primitive_Operations): Complete assertion.\n+\n 2010-10-18  Vincent Celier  <celier@adacore.com>\n \n \t* prj.ads (Source_Data): New Boolean flag In_The_Queue."}, {"sha": "3f4654f7a2ac59db698c945b8fda8cf0660d3621", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 15, "deletions": 34, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -811,7 +811,10 @@ __gnat_fopen (char *path, char *mode, int encoding ATTRIBUTE_UNUSED)\n }\n \n FILE *\n-__gnat_freopen (char *path, char *mode, FILE *stream, int encoding ATTRIBUTE_UNUSED)\n+__gnat_freopen (char *path,\n+\t\tchar *mode,\n+\t\tFILE *stream,\n+\t\tint encoding ATTRIBUTE_UNUSED)\n {\n #if defined (_WIN32) && ! defined (__vxworks) && ! defined (IS_CROSS)\n   TCHAR wpath[GNAT_MAX_PATH_LEN];\n@@ -1094,7 +1097,8 @@ __gnat_stat_to_attr (int fd, char* name, struct file_attributes* attr)\n     attr->file_length = statbuf.st_size;  /* all systems */\n \n #ifndef __MINGW32__\n-  /* on Windows requires extra system call, see comment in __gnat_file_exists_attr */\n+  /* on Windows requires extra system call, see comment in\n+     __gnat_file_exists_attr */\n   attr->exists = !ret;\n #endif\n \n@@ -2035,7 +2039,8 @@ __gnat_is_readable_file_attr (char* name, struct file_attributes* attr)\n      {\n         ZeroMemory (&GenericMapping, sizeof (GENERIC_MAPPING));\n         GenericMapping.GenericRead = GENERIC_READ;\n-        attr->readable = __gnat_check_OWNER_ACL (wname, FILE_READ_DATA, GenericMapping);\n+\tattr->readable =\n+\t  __gnat_check_OWNER_ACL (wname, FILE_READ_DATA, GenericMapping);\n      }\n      else\n         attr->readable = GetFileAttributes (wname) != INVALID_FILE_ATTRIBUTES;\n@@ -2108,7 +2113,8 @@ __gnat_is_executable_file_attr (char* name, struct file_attributes* attr)\n          ZeroMemory (&GenericMapping, sizeof (GENERIC_MAPPING));\n          GenericMapping.GenericExecute = GENERIC_EXECUTE;\n \n-         attr->executable = __gnat_check_OWNER_ACL (wname, FILE_EXECUTE, GenericMapping);\n+         attr->executable =\n+           __gnat_check_OWNER_ACL (wname, FILE_EXECUTE, GenericMapping);\n        }\n      else\n        attr->executable = GetFileAttributes (wname) != INVALID_FILE_ATTRIBUTES\n@@ -2717,7 +2723,8 @@ __gnat_locate_regular_file (char *file_name, char *path_val)\n \n   {\n     /* The result has to be smaller than path_val + file_name.  */\n-    char *file_path = (char *) alloca (strlen (path_val) + strlen (file_name) + 2);\n+    char *file_path =\n+      (char *) alloca (strlen (path_val) + strlen (file_name) + 2);\n \n     for (;;)\n       {\n@@ -2773,8 +2780,9 @@ __gnat_locate_exec (char *exec_name, char *path_val)\n   char *ptr;\n   if (!strstr (exec_name, HOST_EXECUTABLE_SUFFIX))\n     {\n-      char *full_exec_name\n-        = (char *) alloca (strlen (exec_name) + strlen (HOST_EXECUTABLE_SUFFIX) + 1);\n+      char *full_exec_name =\n+        (char *) alloca\n+\t  (strlen (exec_name) + strlen (HOST_EXECUTABLE_SUFFIX) + 1);\n \n       strcpy (full_exec_name, exec_name);\n       strcat (full_exec_name, HOST_EXECUTABLE_SUFFIX);\n@@ -3654,33 +3662,6 @@ void __main (void) {}\n #endif\n #endif\n \n-#if defined (linux) || defined(__GLIBC__)\n-/* pthread affinity support */\n-\n-int __gnat_pthread_setaffinity_np (pthread_t th,\n-\t\t\t           size_t cpusetsize,\n-\t\t\t           const void *cpuset);\n-\n-#ifdef CPU_SETSIZE\n-#include <pthread.h>\n-int\n-__gnat_pthread_setaffinity_np (pthread_t th,\n-\t\t\t       size_t cpusetsize,\n-\t\t\t       const cpu_set_t *cpuset)\n-{\n-  return pthread_setaffinity_np (th, cpusetsize, cpuset);\n-}\n-#else\n-int\n-__gnat_pthread_setaffinity_np (pthread_t th ATTRIBUTE_UNUSED,\n-\t\t\t       size_t cpusetsize ATTRIBUTE_UNUSED,\n-\t\t\t       const void *cpuset ATTRIBUTE_UNUSED)\n-{\n-  return 0;\n-}\n-#endif\n-#endif\n-\n #if defined (linux)\n /* There is no function in the glibc to retrieve the LWP of the current\n    thread. We need to do a system call in order to retrieve this"}, {"sha": "4ea38e2eff4670dd64f30f2f6be6e56f1a146fda", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -818,6 +818,7 @@ package body ALI is\n         Last_Unit                  => No_Unit_Id,\n         Locking_Policy             => ' ',\n         Main_Priority              => -1,\n+        Main_CPU                   => -1,\n         Main_Program               => None,\n         No_Object                  => False,\n         Normalize_Scalars          => False,\n@@ -919,6 +920,14 @@ package body ALI is\n \n                Skip_Space;\n \n+               if Nextc = 'C' then\n+                  P := P + 1;\n+                  Checkc ('=');\n+                  ALIs.Table (Id).Main_CPU := Get_Nat;\n+               end if;\n+\n+               Skip_Space;\n+\n                Checkc ('W');\n                Checkc ('=');\n                ALIs.Table (Id).WC_Encoding := Getc;"}, {"sha": "b9f953126c05915cb2a60f3aca14b9bf4f0ec75d", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -131,6 +131,12 @@ package ALI is\n       --  that no parameter was found, or no M line was present. Not set if\n       --  'M' appears in Ignore_Lines.\n \n+      Main_CPU : Int;\n+      --  Indicates processor if Main_Program field indicates that this can\n+      --  be a main program. A value of -1 (No_Main_CPU) indicates that no C\n+      --  parameter was found, or no M line was present. Not set if 'M' appears\n+      --  in Ignore_Lines.\n+\n       Time_Slice_Value : Int;\n       --  Indicates value of time slice parameter from T=xxx on main program\n       --  line. A value of -1 indicates that no T=xxx parameter was found, or\n@@ -212,6 +218,9 @@ package ALI is\n    No_Main_Priority : constant Int := -1;\n    --  Code for no main priority set\n \n+   No_Main_CPU : constant Int := -1;\n+   --  Code for no main cpu set\n+\n    package ALIs is new Table.Table (\n      Table_Component_Type => ALIs_Record,\n      Table_Index_Type     => ALI_Id,"}, {"sha": "8facb270b0a3717db19256f454127126b5de40f8", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 51, "deletions": 6, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -127,6 +127,7 @@ package body Bindgen is\n    --     Detect_Blocking               : Integer;\n    --     Default_Stack_Size            : Integer;\n    --     Leap_Seconds_Support          : Integer;\n+   --     Main_CPU                      : Integer;\n \n    --  Main_Priority is the priority value set by pragma Priority in the main\n    --  program. If no such pragma is present, the value is -1.\n@@ -215,6 +216,9 @@ package body Bindgen is\n    --  disabled. A value of zero indicates that leap seconds are turned \"off\",\n    --  while a value of one signifies \"on\" status.\n \n+   --  Main_CPU is the processor set by pragma CPU in the main program. If no\n+   --  such pragma is present, the value is -1.\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -436,6 +440,7 @@ package body Bindgen is\n \n    procedure Gen_Adainit_Ada is\n       Main_Priority : Int renames ALIs.Table (ALIs.First).Main_Priority;\n+      Main_CPU      : Int renames ALIs.Table (ALIs.First).Main_CPU;\n \n    begin\n       WBI (\"   procedure \" & Ada_Init_Name.all & \" is\");\n@@ -520,9 +525,9 @@ package body Bindgen is\n \n       Write_Statement_Buffer;\n \n-      --  If the standard library is suppressed, then the only global variable\n-      --  that might be needed (by the Ravenscar profile) is the priority of\n-      --  the environment.\n+      --  If the standard library is suppressed, then the only global variables\n+      --  that might be needed (by the Ravenscar profile) are the priority and\n+      --  the processor for the environment task.\n \n       if Suppress_Standard_Library_On_Target then\n          if Main_Priority /= No_Main_Priority then\n@@ -532,15 +537,32 @@ package body Bindgen is\n             WBI (\"\");\n          end if;\n \n+         if Main_CPU /= No_Main_CPU then\n+            WBI (\"      Main_CPU : Integer;\");\n+            WBI (\"      pragma Import (C, Main_CPU,\" &\n+                 \" \"\"__gl_main_cpu\"\");\");\n+            WBI (\"\");\n+         end if;\n+\n          WBI (\"   begin\");\n \n          if Main_Priority /= No_Main_Priority then\n             Set_String (\"      Main_Priority := \");\n             Set_Int    (Main_Priority);\n             Set_Char   (';');\n             Write_Statement_Buffer;\n+         end if;\n \n-         else\n+         if Main_CPU /= No_Main_CPU then\n+            Set_String (\"      Main_CPU := \");\n+            Set_Int    (Main_CPU);\n+            Set_Char   (';');\n+            Write_Statement_Buffer;\n+         end if;\n+\n+         if Main_Priority = No_Main_Priority\n+           and then Main_CPU = No_Main_CPU\n+         then\n             WBI (\"      null;\");\n          end if;\n \n@@ -571,6 +593,9 @@ package body Bindgen is\n          WBI (\"      Num_Specific_Dispatching : Integer;\");\n          WBI (\"      pragma Import (C, Num_Specific_Dispatching, \" &\n               \"\"\"__gl_num_specific_dispatching\"\");\");\n+         WBI (\"      Main_CPU : Integer;\");\n+         WBI (\"      pragma Import (C, Main_CPU, \" &\n+              \"\"\"__gl_main_cpu\"\");\");\n \n          WBI (\"      Interrupt_States : System.Address;\");\n          WBI (\"      pragma Import (C, Interrupt_States, \" &\n@@ -731,6 +756,11 @@ package body Bindgen is\n          Set_Char (';');\n          Write_Statement_Buffer;\n \n+         Set_String (\"      Main_CPU := \");\n+         Set_Int    (Main_CPU);\n+         Set_Char   (';');\n+         Write_Statement_Buffer;\n+\n          WBI (\"      Interrupt_States := Local_Interrupt_States'Address;\");\n \n          Set_String (\"      Num_Interrupt_States := \");\n@@ -891,6 +921,7 @@ package body Bindgen is\n \n    procedure Gen_Adainit_C is\n       Main_Priority : Int renames ALIs.Table (ALIs.First).Main_Priority;\n+      Main_CPU      : Int renames ALIs.Table (ALIs.First).Main_CPU;\n \n    begin\n       WBI (\"void \" & Ada_Init_Name.all & \" (void)\");\n@@ -934,8 +965,8 @@ package body Bindgen is\n \n       if Suppress_Standard_Library_On_Target then\n \n-         --  Case of High_Integrity_Mode mode. Set __gl_main_priority if needed\n-         --  for the Ravenscar profile.\n+         --  Case of High_Integrity_Mode mode. Set __gl_main_priority and\n+         --  __gl_main_cpu if needed for the Ravenscar profile.\n \n          if Main_Priority /= No_Main_Priority then\n             WBI (\"   extern int __gl_main_priority;\");\n@@ -945,6 +976,14 @@ package body Bindgen is\n             Write_Statement_Buffer;\n          end if;\n \n+         if Main_CPU /= No_Main_CPU then\n+            WBI (\"   extern int __gl_main_cpu;\");\n+            Set_String (\"   __gl_main_cpu = \");\n+            Set_Int    (Main_CPU);\n+            Set_Char   (';');\n+            Write_Statement_Buffer;\n+         end if;\n+\n       --  Normal case (standard library not suppressed)\n \n       else\n@@ -1030,6 +1069,12 @@ package body Bindgen is\n          Set_String (\"';\");\n          Write_Statement_Buffer;\n \n+         WBI (\"   extern int __gl_main_cpu;\");\n+         Set_String (\"   __gl_main_cpu = \");\n+         Set_Int (Main_CPU);\n+         Set_Char (';');\n+         Write_Statement_Buffer;\n+\n          Gen_Restrictions_C;\n \n          WBI (\"   extern const void *__gl_interrupt_states;\");"}, {"sha": "87c9edc84f5968781af1be0c22c3c53717de6489", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -819,7 +819,8 @@ package body Einfo is\n \n    function Direct_Primitive_Operations (Id : E) return L is\n    begin\n-      pragma Assert (Is_Tagged_Type (Id));\n+      pragma Assert (Is_Tagged_Type (Id)\n+        and then not Is_Concurrent_Type (Id));\n       return Elist15 (Id);\n    end Direct_Primitive_Operations;\n "}, {"sha": "0df9e44d7739599039d80f2e5ef1405f779cd9df", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -10315,6 +10315,7 @@ package body Exp_Ch9 is\n    --      _Priority    : Integer         := priority_expression;\n    --      _Size        : Size_Type       := Size_Type (size_expression);\n    --      _Task_Info   : Task_Info_Type  := task_info_expression;\n+   --      _CPU         : Integer         := cpu_range_expression;\n    --    end record;\n \n    --  The discriminants are present only if the corresponding task type has\n@@ -10348,6 +10349,11 @@ package body Exp_Ch9 is\n    --  present in the pragma, and is used to provide the Task_Image parameter\n    --  to the call to Create_Task.\n \n+   --  The _CPU field is present only if a CPU pragma appears in the task\n+   --  definition. The expression captures the argument that was present in\n+   --  the pragma, and is used to provide the CPU parameter to the call to\n+   --  Create_Task.\n+\n    --  The _Relative_Deadline field is present only if a Relative_Deadline\n    --  pragma appears in the task definition. The expression captures the\n    --  argument that was present in the pragma, and is used to provide the\n@@ -10666,6 +10672,27 @@ package body Exp_Ch9 is\n                      (Taskdef, Name_Task_Info)))))));\n       end if;\n \n+      --  Add the _CPU component if a CPU pragma is present\n+\n+      if Present (Taskdef) and then Has_Pragma_CPU (Taskdef) then\n+         Append_To (Cdecls,\n+           Make_Component_Declaration (Loc,\n+             Defining_Identifier =>\n+               Make_Defining_Identifier (Loc, Name_uCPU),\n+\n+             Component_Definition =>\n+               Make_Component_Definition (Loc,\n+                 Aliased_Present    => False,\n+                 Subtype_Indication =>\n+                   New_Reference_To (RTE (RE_CPU_Range), Loc)),\n+\n+             Expression => New_Copy (\n+               Expression (First (\n+                 Pragma_Argument_Associations (\n+                   Find_Task_Or_Protected_Pragma\n+                     (Taskdef, Name_CPU)))))));\n+      end if;\n+\n       --  Add the _Relative_Deadline component if a Relative_Deadline pragma is\n       --  present. If we are using a restricted run time this component will\n       --  not be added (deadlines are not allowed by the Ravenscar profile).\n@@ -12593,6 +12620,23 @@ package body Exp_Ch9 is\n            New_Reference_To (RTE (RE_Unspecified_Task_Info), Loc));\n       end if;\n \n+      --  CPU parameter. Set to Unspecified_CPU unless there is a CPU pragma,\n+      --  in which case we take the value from the pragma. The parameter is\n+      --  passed as an Integer because in the case of unspecified CPU the\n+      --  value is not in the range of CPU_Range.\n+\n+      if Present (Tdef) and then Has_Pragma_CPU (Tdef) then\n+         Append_To (Args,\n+           Convert_To (Standard_Integer,\n+             Make_Selected_Component (Loc,\n+               Prefix => Make_Identifier (Loc, Name_uInit),\n+               Selector_Name => Make_Identifier (Loc, Name_uCPU))));\n+\n+      else\n+         Append_To (Args,\n+           New_Reference_To (RTE (RE_Unspecified_CPU), Loc));\n+      end if;\n+\n       if not Restricted_Profile then\n \n          --  Deadline parameter. If no Relative_Deadline pragma is present,"}, {"sha": "766dbddf9b0688d50a39ecac3063e85187e2312a", "filename": "gcc/ada/init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -86,6 +86,7 @@ extern void Raise_From_Signal_Handler (struct Exception_Data *, const char *);\n \n /* Global values computed by the binder.  */\n int   __gl_main_priority                 = -1;\n+int   __gl_main_cpu                      = -1;\n int   __gl_time_slice_val                = -1;\n char  __gl_wc_encoding                   = 'n';\n char  __gl_locking_policy                = ' ';"}, {"sha": "894c76017d994124aa8b3e2995a61cde2dc0f455", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -220,6 +220,7 @@ package body Lib.Load is\n         Ident_String     => Empty,\n         Loading          => False,\n         Main_Priority    => Default_Main_Priority,\n+        Main_CPU         => Default_Main_CPU,\n         Munit_Index      => 0,\n         Serial_Number    => 0,\n         Source_Index     => No_Source_File,\n@@ -325,6 +326,7 @@ package body Lib.Load is\n            Ident_String     => Empty,\n            Loading          => True,\n            Main_Priority    => Default_Main_Priority,\n+           Main_CPU         => Default_Main_CPU,\n            Munit_Index      => 0,\n            Serial_Number    => 0,\n            Source_Index     => Main_Source_File,\n@@ -655,6 +657,7 @@ package body Lib.Load is\n               Ident_String     => Empty,\n               Loading          => True,\n               Main_Priority    => Default_Main_Priority,\n+              Main_CPU         => Default_Main_CPU,\n               Munit_Index      => 0,\n               Serial_Number    => 0,\n               Source_Index     => Src_Ind,"}, {"sha": "d1e442a32b07143b6c683d1b98b7604c9a8d9d77", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -86,6 +86,7 @@ package body Lib.Writ is\n          Ident_String     => Empty,\n          Loading          => False,\n          Main_Priority    => -1,\n+         Main_CPU         => -1,\n          Munit_Index      => 0,\n          Serial_Number    => 0,\n          Version          => 0,\n@@ -142,6 +143,7 @@ package body Lib.Writ is\n         Ident_String     => Empty,\n         Loading          => False,\n         Main_Priority    => -1,\n+        Main_CPU         => -1,\n         Munit_Index      => 0,\n         Serial_Number    => 0,\n         Version          => 0,\n@@ -931,6 +933,11 @@ package body Lib.Writ is\n                Write_Info_Str (\" AB\");\n             end if;\n \n+            if Main_CPU (Main_Unit) /= Default_Main_CPU then\n+               Write_Info_Str (\" C=\");\n+               Write_Info_Nat (Main_CPU (Main_Unit));\n+            end if;\n+\n             Write_Info_Str (\" W=\");\n             Write_Info_Char\n               (WC_Encoding_Letters (Wide_Character_Encoding_Method));"}, {"sha": "ef5f23a9ee38108b2344bd656103328d10689ac3", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -116,7 +116,7 @@ package Lib.Writ is\n    --  -- M  Main Program --\n    --  ---------------------\n \n-   --    M type [priority] [T=time-slice] [AB] W=?\n+   --    M type [priority] [T=time-slice] [AB] [C=cpu] W=?\n \n    --      This line appears only if the main unit for this file is suitable\n    --      for use as a main program. The parameters are:\n@@ -148,7 +148,12 @@ package Lib.Writ is\n    --          No_Allocators_After_Elaboration if it is present, and this\n    --          unit is used as a main program (only the binder can find the\n    --          violation, since only the binder knows the main program).\n-   --\n+\n+   --        C=cpu\n+\n+   --          Present only if there was a valid pragma CPU in the\n+   --          corresponding unit to set the main task affinity. It is an\n+   --          unsigned decimal integer.\n \n    --        W=?\n "}, {"sha": "42d922fcc951ebb034cb32cb161655c00402e542", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -138,6 +138,11 @@ package body Lib is\n       return Units.Table (U).Loading;\n    end Loading;\n \n+   function Main_CPU (U : Unit_Number_Type) return Int is\n+   begin\n+      return Units.Table (U).Main_CPU;\n+   end Main_CPU;\n+\n    function Main_Priority (U : Unit_Number_Type) return Int is\n    begin\n       return Units.Table (U).Main_Priority;\n@@ -231,6 +236,11 @@ package body Lib is\n       Units.Table (U).Loading := B;\n    end Set_Loading;\n \n+   procedure Set_Main_CPU (U : Unit_Number_Type; P : Int) is\n+   begin\n+      Units.Table (U).Main_CPU := P;\n+   end Set_Main_CPU;\n+\n    procedure Set_Main_Priority (U : Unit_Number_Type; P : Int) is\n    begin\n       Units.Table (U).Main_Priority := P;"}, {"sha": "b316fec221db5766e58e7ca9cedd746d5532f48c", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -357,6 +357,12 @@ package Lib is\n    --      that the default priority is to be used (and is also used for\n    --      entries that do not correspond to possible main programs).\n \n+   --    Main_CPU\n+   --      This field is used to indicate the affinity of a possible main\n+   --      program, as set by a pragma CPU. A value of -1 indicates\n+   --      that the default affinity is to be used (and is also used for\n+   --      entries that do not correspond to possible main programs).\n+\n    --    Has_Allocator\n    --      This flag is set if a subprogram unit has an allocator after the\n    --      BEGIN (it is used to set the AB flag in the M ALI line).\n@@ -392,6 +398,9 @@ package Lib is\n    Default_Main_Priority : constant Int := -1;\n    --  Value used in Main_Priority field to indicate default main priority\n \n+   Default_Main_CPU : constant Int := -1;\n+   --  Value used in Main_CPU field to indicate default main affinity\n+\n    function Cunit            (U : Unit_Number_Type) return Node_Id;\n    function Cunit_Entity     (U : Unit_Number_Type) return Entity_Id;\n    function Dependency_Num   (U : Unit_Number_Type) return Nat;\n@@ -405,6 +414,7 @@ package Lib is\n    function Has_RACW         (U : Unit_Number_Type) return Boolean;\n    function Is_Compiler_Unit (U : Unit_Number_Type) return Boolean;\n    function Loading          (U : Unit_Number_Type) return Boolean;\n+   function Main_CPU         (U : Unit_Number_Type) return Int;\n    function Main_Priority    (U : Unit_Number_Type) return Int;\n    function Munit_Index      (U : Unit_Number_Type) return Nat;\n    function OA_Setting       (U : Unit_Number_Type) return Character;\n@@ -424,6 +434,7 @@ package Lib is\n    procedure Set_Is_Compiler_Unit (U : Unit_Number_Type; B : Boolean := True);\n    procedure Set_Ident_String     (U : Unit_Number_Type; N : Node_Id);\n    procedure Set_Loading          (U : Unit_Number_Type; B : Boolean := True);\n+   procedure Set_Main_CPU         (U : Unit_Number_Type; P : Int);\n    procedure Set_Main_Priority    (U : Unit_Number_Type; P : Int);\n    procedure Set_OA_Setting       (U : Unit_Number_Type; C : Character);\n    procedure Set_Unit_Name        (U : Unit_Number_Type; N : Unit_Name_Type);\n@@ -664,6 +675,7 @@ private\n    pragma Inline (Is_Compiler_Unit);\n    pragma Inline (Increment_Serial_Number);\n    pragma Inline (Loading);\n+   pragma Inline (Main_CPU);\n    pragma Inline (Main_Priority);\n    pragma Inline (Munit_Index);\n    pragma Inline (OA_Setting);\n@@ -674,6 +686,7 @@ private\n    pragma Inline (Set_Has_Allocator);\n    pragma Inline (Set_Has_RACW);\n    pragma Inline (Set_Loading);\n+   pragma Inline (Set_Main_CPU);\n    pragma Inline (Set_Main_Priority);\n    pragma Inline (Set_OA_Setting);\n    pragma Inline (Set_Unit_Name);\n@@ -692,6 +705,7 @@ private\n       Dependency_Num   : Int;\n       Ident_String     : Node_Id;\n       Main_Priority    : Int;\n+      Main_CPU         : Int;\n       Serial_Number    : Nat;\n       Version          : Word;\n       Error_Location   : Source_Ptr;\n@@ -720,20 +734,21 @@ private\n       Dependency_Num   at 28 range 0 .. 31;\n       Ident_String     at 32 range 0 .. 31;\n       Main_Priority    at 36 range 0 .. 31;\n-      Serial_Number    at 40 range 0 .. 31;\n-      Version          at 44 range 0 .. 31;\n-      Error_Location   at 48 range 0 .. 31;\n-      Fatal_Error      at 52 range 0 ..  7;\n-      Generate_Code    at 53 range 0 ..  7;\n-      Has_RACW         at 54 range 0 ..  7;\n-      Dynamic_Elab     at 55 range 0 ..  7;\n-      Is_Compiler_Unit at 56 range 0 ..  7;\n-      OA_Setting       at 57 range 0 ..  7;\n-      Loading          at 58 range 0 ..  7;\n-      Has_Allocator    at 59 range 0 ..  7;\n+      Main_CPU         at 40 range 0 .. 31;\n+      Serial_Number    at 44 range 0 .. 31;\n+      Version          at 48 range 0 .. 31;\n+      Error_Location   at 52 range 0 .. 31;\n+      Fatal_Error      at 56 range 0 ..  7;\n+      Generate_Code    at 57 range 0 ..  7;\n+      Has_RACW         at 58 range 0 ..  7;\n+      Dynamic_Elab     at 59 range 0 ..  7;\n+      Is_Compiler_Unit at 60 range 0 ..  7;\n+      OA_Setting       at 61 range 0 ..  7;\n+      Loading          at 62 range 0 ..  7;\n+      Has_Allocator    at 63 range 0 ..  7;\n    end record;\n \n-   for Unit_Record'Size use 60 * 8;\n+   for Unit_Record'Size use 64 * 8;\n    --  This ensures that we did not leave out any fields\n \n    package Units is new Table.Table ("}, {"sha": "b74ad4007c10c268c0fcbe8fd900285a1a090eb2", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -1118,6 +1118,7 @@ begin\n            Pragma_CPP_Constructor               |\n            Pragma_CPP_Virtual                   |\n            Pragma_CPP_Vtable                    |\n+           Pragma_CPU                           |\n            Pragma_C_Pass_By_Copy                |\n            Pragma_Comment                       |\n            Pragma_Common_Object                 |"}, {"sha": "ca8bfb854288c709fd5ad8e2064e308cfcf67ddb", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -265,6 +265,7 @@ package Rtsfind is\n       System_Machine_Code,\n       System_Mantissa,\n       System_Memcop,\n+      System_Multiprocessors,\n       System_Pack_03,\n       System_Pack_05,\n       System_Pack_06,\n@@ -839,6 +840,8 @@ package Rtsfind is\n \n      RE_Mantissa_Value,                  -- System_Mantissa\n \n+     RE_CPU_Range,                       -- System.Multiprocessors\n+\n      RE_Bits_03,                         -- System.Pack_03\n      RE_Get_03,                          -- System.Pack_03\n      RE_Set_03,                          -- System.Pack_03\n@@ -1426,6 +1429,8 @@ package Rtsfind is\n      RE_Activation_Chain_Access,         -- System.Tasking\n      RE_Storage_Size,                    -- System.Tasking\n \n+     RE_Unspecified_CPU,                 -- System.Tasking\n+\n      RE_Abort_Defer,                     -- System.Soft_Links\n      RE_Abort_Undefer,                   -- System.Soft_Links\n      RE_Complete_Master,                 -- System.Soft_Links\n@@ -2012,6 +2017,8 @@ package Rtsfind is\n \n      RE_Mantissa_Value                   => System_Mantissa,\n \n+     RE_CPU_Range                        => System_Multiprocessors,\n+\n      RE_Bits_03                          => System_Pack_03,\n      RE_Get_03                           => System_Pack_03,\n      RE_Set_03                           => System_Pack_03,\n@@ -2599,6 +2606,8 @@ package Rtsfind is\n      RE_Activation_Chain_Access          => System_Tasking,\n      RE_Storage_Size                     => System_Tasking,\n \n+     RE_Unspecified_CPU                  => System_Tasking,\n+\n      RE_Abort_Defer                      => System_Soft_Links,\n      RE_Abort_Undefer                    => System_Soft_Links,\n      RE_Complete_Master                  => System_Soft_Links,"}, {"sha": "6d6a0c44e99bf100fd6b7d521329eb8d8407100b", "filename": "gcc/ada/s-osinte-linux.ads", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-osinte-linux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-osinte-linux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-linux.ads?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -490,7 +490,18 @@ package System.OS_Interface is\n      (thread     : pthread_t;\n       cpusetsize : size_t;\n       cpuset     : access cpu_set_t) return int;\n-   pragma Import (C, pthread_setaffinity_np, \"__gnat_pthread_setaffinity_np\");\n+   pragma Import (C, pthread_setaffinity_np, \"pthread_setaffinity_np\");\n+   pragma Weak_External (pthread_setaffinity_np);\n+   --  Use a weak symbol because this function may be available or not,\n+   --  depending on the version of the system.\n+\n+   function pthread_attr_setaffinity_np\n+     (attr       : access pthread_attr_t;\n+      cpusetsize : size_t;\n+      cpuset     : access cpu_set_t) return int;\n+   pragma Import (C, pthread_attr_setaffinity_np,\n+                  \"pthread_attr_setaffinity_np\");\n+   pragma Weak_External (pthread_attr_setaffinity_np);\n \n private\n "}, {"sha": "f19ca55cffd7ccec124b98b7fdaa5143786f051e", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 67, "deletions": 13, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -48,6 +48,7 @@ with System.Tasking.Debug;\n with System.Interrupt_Management;\n with System.OS_Primitives;\n with System.Stack_Checking.Operations;\n+with System.Multiprocessors;\n \n with System.Soft_Links;\n --  We use System.Soft_Links instead of System.Tasking.Initialization\n@@ -819,6 +820,8 @@ package body System.Task_Primitives.Operations is\n       Adjusted_Stack_Size : Interfaces.C.size_t;\n       Result              : Interfaces.C.int;\n \n+      use type System.Multiprocessors.CPU_Range;\n+\n    begin\n       Adjusted_Stack_Size :=\n          Interfaces.C.size_t (Stack_Size + Alternate_Stack_Size);\n@@ -841,6 +844,48 @@ package body System.Task_Primitives.Operations is\n           (Attributes'Access, PTHREAD_CREATE_DETACHED);\n       pragma Assert (Result = 0);\n \n+      --  We were calling pthread_setaffinity_np (after thread creation but\n+      --  before thread activation) to set the affinity but it was not\n+      --  behaving as expected. Now we set the required attributes for the\n+      --  creation of the thread, which is working correctly and it is\n+      --  more appropriate.\n+\n+      if pthread_attr_setaffinity_np'Address = System.Null_Address then\n+         --  Nothing to do with the affinities if there is not the underlying\n+         --  support.\n+\n+         null;\n+\n+      --  Handle pragma CPU\n+\n+      elsif T.Common.Base_CPU /= System.Multiprocessors.Not_A_Specific_CPU then\n+         declare\n+            CPU_Set : aliased cpu_set_t := (bits => (others => False));\n+\n+         begin\n+            CPU_Set.bits (Integer (T.Common.Base_CPU)) := True;\n+\n+            Result :=\n+              pthread_attr_setaffinity_np\n+                (Attributes'Access,\n+                 CPU_SETSIZE / 8,\n+                 CPU_Set'Access);\n+            pragma Assert (Result = 0);\n+         end;\n+\n+      --  Handle Task_Info\n+\n+      elsif T.Common.Task_Info /= null\n+        and then T.Common.Task_Info.CPU_Affinity /= Task_Info.Any_CPU\n+      then\n+         Result :=\n+           pthread_attr_setaffinity_np\n+             (Attributes'Access,\n+              CPU_SETSIZE / 8,\n+              T.Common.Task_Info.CPU_Affinity'Access);\n+         pragma Assert (Result = 0);\n+      end if;\n+\n       --  Since the initial signal mask of a thread is inherited from the\n       --  creator, and the Environment task has all its signals masked, we\n       --  do not need to manipulate caller's signal mask at this point.\n@@ -863,19 +908,6 @@ package body System.Task_Primitives.Operations is\n \n       Succeeded := True;\n \n-      --  Handle Task_Info\n-\n-      if T.Common.Task_Info /= null then\n-         if T.Common.Task_Info.CPU_Affinity /= Task_Info.Any_CPU then\n-            Result :=\n-              pthread_setaffinity_np\n-                (T.Common.LL.Thread,\n-                 CPU_SETSIZE / 8,\n-                 T.Common.Task_Info.CPU_Affinity'Access);\n-            pragma Assert (Result = 0);\n-         end if;\n-      end if;\n-\n       Result := pthread_attr_destroy (Attributes'Access);\n       pragma Assert (Result = 0);\n \n@@ -1238,6 +1270,8 @@ package body System.Task_Primitives.Operations is\n       --    's'   Interrupt_State pragma set state to System (use \"default\"\n       --           system handler)\n \n+      use type System.Multiprocessors.CPU_Range;\n+\n    begin\n       Environment_Task_Id := Environment_Task;\n \n@@ -1298,6 +1332,26 @@ package body System.Task_Primitives.Operations is\n          pragma Assert (Result = 0);\n          Abort_Handler_Installed := True;\n       end if;\n+\n+      --  pragma CPU for the environment task\n+\n+      if Environment_Task.Common.Base_CPU /=\n+        System.Multiprocessors.Not_A_Specific_CPU\n+      then\n+         declare\n+            CPU_Set : aliased cpu_set_t := (bits => (others => False));\n+\n+         begin\n+            CPU_Set.bits (Integer (Environment_Task.Common.Base_CPU)) := True;\n+\n+            Result :=\n+              pthread_setaffinity_np\n+                (Environment_Task.Common.LL.Thread,\n+                 CPU_SETSIZE / 8,\n+                 CPU_Set'Access);\n+            pragma Assert (Result = 0);\n+         end;\n+      end if;\n    end Initialize;\n \n end System.Task_Primitives.Operations;"}, {"sha": "bafb0674c9d77c065e8891329bbafab2283efcf6", "filename": "gcc/ada/s-taprop-mingw.adb", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-taprop-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-taprop-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-mingw.adb?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -43,6 +43,7 @@ with Ada.Unchecked_Deallocation;\n with Interfaces.C;\n with Interfaces.C.Strings;\n \n+with System.Multiprocessors;\n with System.Tasking.Debug;\n with System.OS_Primitives;\n with System.Task_Info;\n@@ -890,6 +891,8 @@ package body System.Task_Primitives.Operations is\n       Result         : DWORD;\n       Entry_Point    : PTHREAD_START_ROUTINE;\n \n+      use type System.Multiprocessors.CPU_Range;\n+\n    begin\n       pTaskParameter := To_Address (T);\n \n@@ -949,9 +952,17 @@ package body System.Task_Primitives.Operations is\n          SetThreadPriorityBoost (hTask, DisablePriorityBoost => Win32.TRUE);\n       end if;\n \n-      --  Step 4: Handle Task_Info\n+      --  Step 4: Handle pragma CPU and Task_Info\n+\n+      if T.Common.Base_CPU /= System.Multiprocessors.Not_A_Specific_CPU then\n+         --  The CPU numbering in pragma CPU starts at 1 while the subprogram\n+         --  to set the affinity starts at 0, therefore we must substract 1.\n+\n+         Result := SetThreadIdealProcessor\n+           (hTask, ProcessorId (T.Common.Base_CPU) - 1);\n+         pragma Assert (Result = 1);\n \n-      if T.Common.Task_Info /= null then\n+      elsif T.Common.Task_Info /= null then\n          if T.Common.Task_Info.CPU /= Task_Info.Any_CPU then\n             Result := SetThreadIdealProcessor (hTask, T.Common.Task_Info.CPU);\n             pragma Assert (Result = 1);\n@@ -1062,6 +1073,10 @@ package body System.Task_Primitives.Operations is\n       Discard : BOOL;\n       pragma Unreferenced (Discard);\n \n+      Result : DWORD;\n+\n+      use type System.Multiprocessors.CPU_Range;\n+\n    begin\n       Environment_Task_Id := Environment_Task;\n       OS_Primitives.Initialize;\n@@ -1092,6 +1107,20 @@ package body System.Task_Primitives.Operations is\n       Environment_Task.Known_Tasks_Index := Known_Tasks'First;\n \n       Enter_Task (Environment_Task);\n+\n+      --  pragma CPU for the environment task\n+\n+      if Environment_Task.Common.Base_CPU /=\n+         System.Multiprocessors.Not_A_Specific_CPU\n+      then\n+         --  The CPU numbering in pragma CPU starts at 1 while the subprogram\n+         --  to set the affinity starts at 0, therefore we must substract 1.\n+\n+         Result := SetThreadIdealProcessor\n+           (Environment_Task.Common.LL.Thread,\n+            ProcessorId (Environment_Task.Common.Base_CPU) - 1);\n+         pragma Assert (Result = 1);\n+      end if;\n    end Initialize;\n \n    ---------------------"}, {"sha": "d3cc4909d14d17f086dfb0871443c6f7373e393b", "filename": "gcc/ada/s-taprop-solaris.adb", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-taprop-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-taprop-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-solaris.adb?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2009, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2010, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,6 +42,7 @@ with Ada.Unchecked_Deallocation;\n \n with Interfaces.C;\n \n+with System.Multiprocessors;\n with System.Tasking.Debug;\n with System.Interrupt_Management;\n with System.OS_Primitives;\n@@ -866,12 +867,30 @@ package body System.Task_Primitives.Operations is\n       Last_Proc : processorid_t;  --  Last processor #\n \n       use System.Task_Info;\n+      use type System.Multiprocessors.CPU_Range;\n+\n    begin\n       Self_ID.Common.LL.Thread := thr_self;\n \n       Self_ID.Common.LL.LWP := lwp_self;\n \n-      if Self_ID.Common.Task_Info /= null then\n+      --  pragma CPU\n+\n+      if Self_ID.Common.Base_CPU /=\n+         System.Multiprocessors.Not_A_Specific_CPU\n+      then\n+         --  The CPU numbering in pragma CPU starts at 1 while the subprogram\n+         --  to set the affinity starts at 0, therefore we must substract 1.\n+\n+         Result :=\n+           processor_bind\n+             (P_LWPID, P_MYID, processorid_t (Self_ID.Common.Base_CPU) - 1,\n+              null);\n+         pragma Assert (Result = 0);\n+\n+      --  Task_Info\n+\n+      elsif Self_ID.Common.Task_Info /= null then\n          if Self_ID.Common.Task_Info.New_LWP\n            and then Self_ID.Common.Task_Info.CPU /= CPU_UNCHANGED\n          then"}, {"sha": "3186f6fb9622aff992168fd36ff14df82bb95137", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -43,6 +43,7 @@ with Ada.Unchecked_Deallocation;\n \n with Interfaces.C;\n \n+with System.Multiprocessors;\n with System.Tasking.Debug;\n with System.Interrupt_Management;\n \n@@ -868,9 +869,10 @@ package body System.Task_Primitives.Operations is\n       Succeeded  : out Boolean)\n    is\n       Adjusted_Stack_Size : size_t;\n-      Result : int;\n+      Result : int := 0;\n \n       use System.Task_Info;\n+      use type System.Multiprocessors.CPU_Range;\n \n    begin\n       --  Ask for four extra bytes of stack space so that the ATCB pointer can\n@@ -936,14 +938,18 @@ package body System.Task_Primitives.Operations is\n \n       --  Set processor affinity\n \n-      if T.Common.Task_Info /= Unspecified_Task_Info then\n+      if T.Common.Base_CPU /= System.Multiprocessors.Not_A_Specific_CPU then\n+         Result :=\n+           taskCpuAffinitySet (T.Common.LL.Thread, int (T.Common.Base_CPU));\n+\n+      elsif T.Common.Task_Info /= Unspecified_Task_Info then\n          Result :=\n            taskCpuAffinitySet (T.Common.LL.Thread, T.Common.Task_Info);\n+      end if;\n \n-         if Result = -1 then\n-            taskDelete (T.Common.LL.Thread);\n-            T.Common.LL.Thread := -1;\n-         end if;\n+      if Result = -1 then\n+         taskDelete (T.Common.LL.Thread);\n+         T.Common.LL.Thread := -1;\n       end if;\n \n       if T.Common.LL.Thread = -1 then\n@@ -1347,6 +1353,8 @@ package body System.Task_Primitives.Operations is\n    procedure Initialize (Environment_Task : Task_Id) is\n       Result : int;\n \n+      use type System.Multiprocessors.CPU_Range;\n+\n    begin\n       Environment_Task_Id := Environment_Task;\n \n@@ -1393,6 +1401,18 @@ package body System.Task_Primitives.Operations is\n       Environment_Task.Known_Tasks_Index := Known_Tasks'First;\n \n       Enter_Task (Environment_Task);\n+\n+      --  Set processor affinity\n+\n+      if Environment_Task.Common.Base_CPU /=\n+         System.Multiprocessors.Not_A_Specific_CPU\n+      then\n+         Result :=\n+           taskCpuAffinitySet\n+             (Environment_Task.Common.LL.Thread,\n+              int (Environment_Task.Common.Base_CPU));\n+         pragma Assert (Result /= -1);\n+      end if;\n    end Initialize;\n \n end System.Task_Primitives.Operations;"}, {"sha": "5c83412435fa6f82f72933374deecb02a2e41ad0", "filename": "gcc/ada/s-tarest.adb", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.adb?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1999-2009, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1999-2010, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -458,6 +458,7 @@ package body System.Tasking.Restricted.Stages is\n       Stack_Address : System.Address;\n       Size          : System.Parameters.Size_Type;\n       Task_Info     : System.Task_Info.Task_Info_Type;\n+      CPU           : Integer;\n       State         : Task_Procedure_Access;\n       Discriminants : System.Address;\n       Elaborated    : Access_Boolean;\n@@ -467,6 +468,7 @@ package body System.Tasking.Restricted.Stages is\n    is\n       Self_ID       : constant Task_Id := STPO.Self;\n       Base_Priority : System.Any_Priority;\n+      Base_CPU      : System.Multiprocessors.CPU_Range;\n       Success       : Boolean;\n       Len           : Integer;\n \n@@ -481,6 +483,21 @@ package body System.Tasking.Restricted.Stages is\n          then Self_ID.Common.Base_Priority\n          else System.Any_Priority (Priority));\n \n+      if CPU /= Unspecified_CPU\n+        and then (CPU < Integer (System.Multiprocessors.CPU_Range'First)\n+          or else CPU > Integer (System.Multiprocessors.CPU_Range'Last)\n+          or else CPU > Integer (System.Multiprocessors.Number_Of_CPUs))\n+      then\n+         raise Tasking_Error with \"CPU not in range\";\n+\n+      --  Normal CPU affinity\n+      else\n+         Base_CPU :=\n+           (if CPU = Unspecified_CPU\n+            then Self_ID.Common.Base_CPU\n+            else System.Multiprocessors.CPU_Range (CPU));\n+      end if;\n+\n       if Single_Lock then\n          Lock_RTS;\n       end if;\n@@ -492,7 +509,7 @@ package body System.Tasking.Restricted.Stages is\n \n       Initialize_ATCB\n         (Self_ID, State, Discriminants, Self_ID, Elaborated, Base_Priority,\n-         Task_Info, Size, Created_Task, Success);\n+         Base_CPU, Task_Info, Size, Created_Task, Success);\n \n       --  If we do our job right then there should never be any failures, which\n       --  was probably said about the Titanic; so just to be safe, let's retain"}, {"sha": "7b853914bff72f44ca79ec853ca2dc4c2f11e40d", "filename": "gcc/ada/s-tarest.ads", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-tarest.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-tarest.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.ads?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -87,9 +87,9 @@ package System.Tasking.Restricted.Stages is\n    --         system__tasking__ada_task_control_blockIP (_init._atcb, 0);\n    --         _init._task_id := _init._atcb'unchecked_access;\n    --         create_restricted_task (unspecified_priority, tZ,\n-   --           unspecified_task_info, task_procedure_access!(tB'address),\n-   --           _init'address, tE'unchecked_access, _chain, _task_name, _init.\n-   --           _task_id);\n+   --           unspecified_task_info, unspecified_cpu,\n+   --           task_procedure_access!(tB'address), _init'address,\n+   --           tE'unchecked_access, _chain, _task_name, _init._task_id);\n    --         return;\n    --      end tVIP;\n \n@@ -127,6 +127,7 @@ package System.Tasking.Restricted.Stages is\n       Stack_Address : System.Address;\n       Size          : System.Parameters.Size_Type;\n       Task_Info     : System.Task_Info.Task_Info_Type;\n+      CPU           : Integer;\n       State         : Task_Procedure_Access;\n       Discriminants : System.Address;\n       Elaborated    : Access_Boolean;\n@@ -149,6 +150,11 @@ package System.Tasking.Restricted.Stages is\n    --  Task_Info is the task info associated with the created task, or\n    --  Unspecified_Task_Info if none.\n    --\n+   --  CPU is the task affinity. We pass it as an Integer to avoid an explicit\n+   --   dependency from System.Multiprocessors when not needed. Static range\n+   --   checks are performed when analyzing the pragma, and dynamic ones are\n+   --   performed before setting the affinity at run time.\n+   --\n    --  State is the compiler generated task's procedure body\n    --\n    --  Discriminants is a pointer to a limited record whose discriminants are"}, {"sha": "d2d29f9246e64274b9b3284532b9cc8d5d113510", "filename": "gcc/ada/s-taskin.adb", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-taskin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-taskin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.adb?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -98,6 +98,7 @@ package body System.Tasking is\n       Parent           : Task_Id;\n       Elaborated       : Access_Boolean;\n       Base_Priority    : System.Any_Priority;\n+      Base_CPU         : System.Multiprocessors.CPU_Range;\n       Task_Info        : System.Task_Info.Task_Info_Type;\n       Stack_Size       : System.Parameters.Size_Type;\n       T                : Task_Id;\n@@ -119,6 +120,7 @@ package body System.Tasking is\n \n       T.Common.Parent                   := Parent;\n       T.Common.Base_Priority            := Base_Priority;\n+      T.Common.Base_CPU                 := Base_CPU;\n       T.Common.Current_Priority         := 0;\n       T.Common.Protected_Action_Nesting := 0;\n       T.Common.Call                     := null;\n@@ -170,12 +172,19 @@ package body System.Tasking is\n    --  because we use the value -1 to indicate the default main priority, and\n    --  that is of course not in Priority'range.\n \n+   Main_CPU : Integer;\n+   pragma Import (C, Main_CPU, \"__gl_main_cpu\");\n+   --  Affinity for main task. Note that this is of type Integer, not\n+   --  CPU_Range, because we use the value -1 to indicate the unassigned\n+   --  affinity, and that is of course not in CPU_Range'Range.\n+\n    Initialized : Boolean := False;\n    --  Used to prevent multiple calls to Initialize\n \n    procedure Initialize is\n       T             : Task_Id;\n       Base_Priority : Any_Priority;\n+      Base_CPU      : System.Multiprocessors.CPU_Range;\n       Success       : Boolean;\n \n    begin\n@@ -192,9 +201,14 @@ package body System.Tasking is\n          then Default_Priority\n          else Priority (Main_Priority));\n \n+      Base_CPU :=\n+        (if Main_CPU = Unspecified_CPU\n+         then System.Multiprocessors.Not_A_Specific_CPU\n+         else System.Multiprocessors.CPU_Range (Main_CPU));\n+\n       T := STPO.New_ATCB (0);\n       Initialize_ATCB\n-        (null, null, Null_Address, Null_Task, null, Base_Priority,\n+        (null, null, Null_Address, Null_Task, null, Base_Priority, Base_CPU,\n          Task_Info.Unspecified_Task_Info, 0, T, Success);\n       pragma Assert (Success);\n "}, {"sha": "459062327202dff92164f0134c62027f83200592", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -42,6 +42,7 @@ with System.Task_Info;\n with System.Soft_Links;\n with System.Task_Primitives;\n with System.Stack_Usage;\n+with System.Multiprocessors;\n \n package System.Tasking is\n    pragma Preelaborate;\n@@ -464,6 +465,11 @@ package System.Tasking is\n       --\n       --  Protection: Only written by Self, accessed by anyone\n \n+      Base_CPU : System.Multiprocessors.CPU_Range;\n+      --  Base CPU, only changed via dispatching domains package.\n+      --\n+      --  Protection: Self.L\n+\n       Current_Priority : System.Any_Priority;\n       --  Active priority, except that the effects of protected object\n       --  priority ceilings are not reflected. This only reflects explicit\n@@ -694,9 +700,9 @@ package System.Tasking is\n    Independent_Task_Level : constant Master_Level := 2;\n    Library_Task_Level     : constant Master_Level := 3;\n \n-   ------------------------------\n-   -- Task size, priority info --\n-   ------------------------------\n+   -------------------\n+   -- Priority info --\n+   -------------------\n \n    Unspecified_Priority : constant Integer := System.Priority'First - 1;\n \n@@ -706,6 +712,13 @@ package System.Tasking is\n    subtype Rendezvous_Priority is Integer\n      range Priority_Not_Boosted .. System.Any_Priority'Last;\n \n+   -------------------\n+   -- Affinity info --\n+   -------------------\n+\n+   Unspecified_CPU : constant := -1;\n+   --  No affinity specified\n+\n    ------------------------------------\n    -- Rendezvous related definitions --\n    ------------------------------------\n@@ -1091,6 +1104,7 @@ package System.Tasking is\n       Parent           : Task_Id;\n       Elaborated       : Access_Boolean;\n       Base_Priority    : System.Any_Priority;\n+      Base_CPU         : System.Multiprocessors.CPU_Range;\n       Task_Info        : System.Task_Info.Task_Info_Type;\n       Stack_Size       : System.Parameters.Size_Type;\n       T                : Task_Id;"}, {"sha": "1663b89c62c417c4660f22b89780e21b2a895e26", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -473,6 +473,7 @@ package body System.Tasking.Stages is\n      (Priority          : Integer;\n       Size              : System.Parameters.Size_Type;\n       Task_Info         : System.Task_Info.Task_Info_Type;\n+      CPU               : Integer;\n       Relative_Deadline : Ada.Real_Time.Time_Span;\n       Num_Entries       : Task_Entry_Index;\n       Master            : Master_Level;\n@@ -489,6 +490,7 @@ package body System.Tasking.Stages is\n       Success       : Boolean;\n       Base_Priority : System.Any_Priority;\n       Len           : Natural;\n+      Base_CPU      : System.Multiprocessors.CPU_Range;\n \n       pragma Unreferenced (Relative_Deadline);\n       --  EDF scheduling is not supported by any of the target platforms so\n@@ -522,6 +524,21 @@ package body System.Tasking.Stages is\n          then Self_ID.Common.Base_Priority\n          else System.Any_Priority (Priority));\n \n+      if CPU /= Unspecified_CPU\n+        and then (CPU < Integer (System.Multiprocessors.CPU_Range'First)\n+          or else CPU > Integer (System.Multiprocessors.CPU_Range'Last)\n+          or else CPU > Integer (System.Multiprocessors.Number_Of_CPUs))\n+      then\n+         raise Tasking_Error with \"CPU not in range\";\n+\n+      --  Normal CPU affinity\n+      else\n+         Base_CPU :=\n+           (if CPU = Unspecified_CPU\n+            then Self_ID.Common.Base_CPU\n+            else System.Multiprocessors.CPU_Range (CPU));\n+      end if;\n+\n       --  Find parent P of new Task, via master level number\n \n       P := Self_ID;\n@@ -570,7 +587,7 @@ package body System.Tasking.Stages is\n       end if;\n \n       Initialize_ATCB (Self_ID, State, Discriminants, P, Elaborated,\n-        Base_Priority, Task_Info, Size, T, Success);\n+        Base_Priority, Base_CPU, Task_Info, Size, T, Success);\n \n       if not Success then\n          Free (T);"}, {"sha": "a6359c0e0c7ed5c0977a45d4f98df46a19fede4f", "filename": "gcc/ada/s-tassta.ads", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-tassta.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-tassta.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.ads?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -81,10 +81,10 @@ package System.Tasking.Stages is\n    --         _init.discr := discr;\n    --         _init._task_id := null;\n    --         create_task (unspecified_priority, tZ,\n-   --           unspecified_task_info, ada__real_time__time_span_zero, 0,\n-   --           _master, task_procedure_access!(tB'address),\n-   --           _init'address, tE'unchecked_access, _chain, _task_id, _init.\n-   --           _task_id);\n+   --           unspecified_task_info, unspecified_cpu,\n+   --           ada__real_time__time_span_zero, 0, _master,\n+   --           task_procedure_access!(tB'address), _init'address,\n+   --           tE'unchecked_access, _chain, _task_id, _init._task_id);\n    --         return;\n    --      end tVIP;\n    --   ]\n@@ -170,6 +170,7 @@ package System.Tasking.Stages is\n      (Priority          : Integer;\n       Size              : System.Parameters.Size_Type;\n       Task_Info         : System.Task_Info.Task_Info_Type;\n+      CPU               : Integer;\n       Relative_Deadline : Ada.Real_Time.Time_Span;\n       Num_Entries       : Task_Entry_Index;\n       Master            : Master_Level;\n@@ -188,6 +189,10 @@ package System.Tasking.Stages is\n    --  Size is the stack size of the task to create\n    --  Task_Info is the task info associated with the created task, or\n    --   Unspecified_Task_Info if none.\n+   --  CPU is the task affinity. We pass it as an Integer because the\n+   --   undefined value is not in the range of CPU_Range. Static range\n+   --   checks are performed when analyzing the pragma, and dynamic ones are\n+   --   performed before setting the affinity at run time.\n    --  Relative_Deadline is the relative deadline associated with the created\n    --   task by means of a pragma Relative_Deadline, or 0.0 if none.\n    --  State is the compiler generated task's procedure body"}, {"sha": "0158ca284014a8e9f55d8670cb4ccdae58515720", "filename": "gcc/ada/s-tporft.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-tporft.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fs-tporft.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tporft.adb?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -35,6 +35,8 @@ with System.Task_Info;\n with System.Soft_Links;\n --  used to initialize TSD for a C thread, in function Self\n \n+with System.Multiprocessors;\n+\n separate (System.Task_Primitives.Operations)\n function Register_Foreign_Thread (Thread : Thread_Id) return Task_Id is\n    Local_ATCB : aliased Ada_Task_Control_Block (0);\n@@ -63,8 +65,8 @@ begin\n    System.Tasking.Initialize_ATCB\n      (Self_Id, null, Null_Address, Null_Task,\n       Foreign_Task_Elaborated'Access,\n-      System.Priority'First, Task_Info.Unspecified_Task_Info, 0, Self_Id,\n-      Succeeded);\n+      System.Priority'First, System.Multiprocessors.Not_A_Specific_CPU,\n+      Task_Info.Unspecified_Task_Info, 0, Self_Id, Succeeded);\n    Unlock_RTS;\n    pragma Assert (Succeeded);\n "}, {"sha": "b39d30382533a9d40f2800e033e95de25b73eaf4", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 88, "deletions": 1, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -415,7 +415,7 @@ package body Sem_Prag is\n \n       procedure Check_In_Main_Program;\n       --  Common checks for pragmas that appear within a main program\n-      --  (Priority, Main_Storage, Time_Slice, Relative_Deadline).\n+      --  (Priority, Main_Storage, Time_Slice, Relative_Deadline, CPU).\n \n       procedure Check_Interrupt_Or_Attach_Handler;\n       --  Common processing for first argument of pragma Interrupt_Handler or\n@@ -6961,6 +6961,92 @@ package body Sem_Prag is\n             end if;\n          end CPP_Vtable;\n \n+         ---------\n+         -- CPU --\n+         ---------\n+\n+         --  pragma CPU (EXPRESSION);\n+\n+         when Pragma_CPU => CPU : declare\n+            P   : constant Node_Id := Parent (N);\n+            Arg : Node_Id;\n+\n+         begin\n+            Ada_2012_Pragma;\n+            Check_No_Identifiers;\n+            Check_Arg_Count (1);\n+\n+            --  Subprogram case\n+\n+            if Nkind (P) = N_Subprogram_Body then\n+               Check_In_Main_Program;\n+\n+               Arg := Get_Pragma_Arg (Arg1);\n+               Analyze_And_Resolve (Arg, Any_Integer);\n+\n+               --  Must be static\n+\n+               if not Is_Static_Expression (Arg) then\n+                  Flag_Non_Static_Expr\n+                    (\"main subprogram affinity is not static!\", Arg);\n+                  raise Pragma_Exit;\n+\n+               --  If constraint error, then we already signalled an error\n+\n+               elsif Raises_Constraint_Error (Arg) then\n+                  null;\n+\n+               --  Otherwise check in range\n+\n+               else\n+                  declare\n+                     CPU_Id : constant Entity_Id := RTE (RE_CPU_Range);\n+                     --  This is the entity System.Multiprocessors.CPU_Range;\n+\n+                     Val : constant Uint := Expr_Value (Arg);\n+\n+                  begin\n+                     if Val < Expr_Value (Type_Low_Bound (CPU_Id))\n+                          or else\n+                        Val > Expr_Value (Type_High_Bound (CPU_Id))\n+                     then\n+                        Error_Pragma_Arg\n+                          (\"main subprogram CPU is out of range\", Arg1);\n+                     end if;\n+                  end;\n+               end if;\n+\n+               Set_Main_CPU\n+                    (Current_Sem_Unit, UI_To_Int (Expr_Value (Arg)));\n+\n+            --  Task case\n+\n+            elsif Nkind (P) = N_Task_Definition then\n+               Arg := Get_Pragma_Arg (Arg1);\n+\n+               --  The expression must be analyzed in the special manner\n+               --  described in \"Handling of Default and Per-Object\n+               --  Expressions\" in sem.ads.\n+\n+               Preanalyze_Spec_Expression (Arg, RTE (RE_CPU_Range));\n+\n+            --  Anything else is incorrect\n+\n+            else\n+               Pragma_Misplaced;\n+            end if;\n+\n+            if Has_Pragma_CPU (P) then\n+               Error_Pragma (\"duplicate pragma% not allowed\");\n+            else\n+               Set_Has_Pragma_CPU (P, True);\n+\n+               if Nkind (P) = N_Task_Definition then\n+                  Record_Rep_Item (Defining_Identifier (Parent (P)), N);\n+               end if;\n+            end if;\n+         end CPU;\n+\n          -----------\n          -- Debug --\n          -----------\n@@ -13513,6 +13599,7 @@ package body Sem_Prag is\n       Pragma_CPP_Constructor               =>  0,\n       Pragma_CPP_Virtual                   =>  0,\n       Pragma_CPP_Vtable                    =>  0,\n+      Pragma_CPU                           => -1,\n       Pragma_C_Pass_By_Copy                =>  0,\n       Pragma_Comment                       =>  0,\n       Pragma_Common_Object                 => -1,"}, {"sha": "d76d33a0b6cf1395463fb50a49ce941e10a473fa", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -1453,6 +1453,15 @@ package body Sinfo is\n       return Flag17 (N);\n    end Has_No_Elaboration_Code;\n \n+   function Has_Pragma_CPU\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Subprogram_Body\n+        or else NT (N).Nkind = N_Task_Definition);\n+      return Flag10 (N);\n+   end Has_Pragma_CPU;\n+\n    function Has_Pragma_Priority\n       (N : Node_Id) return Boolean is\n    begin\n@@ -4423,6 +4432,15 @@ package body Sinfo is\n       Set_Flag17 (N, Val);\n    end Set_Has_No_Elaboration_Code;\n \n+   procedure Set_Has_Pragma_CPU\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Subprogram_Body\n+        or else NT (N).Nkind = N_Task_Definition);\n+      Set_Flag10 (N, Val);\n+   end Set_Has_Pragma_CPU;\n+\n    procedure Set_Has_Pragma_Priority\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "2b2d8828c95f4542247be31a33da09f8bfc9cdb5", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -1133,6 +1133,11 @@ package Sinfo is\n    --    generate elaboration code, and non-preelaborated packages which do\n    --    not generate elaboration code.\n \n+   --  Has_Pragma_CPU (Flag10-Sem)\n+   --    A flag present in N_Subprogram_Body and N_Task_Definition nodes to\n+   --    flag the presence of a CPU pragma in the declaration sequence (public\n+   --    or private in the task case).\n+\n    --  Has_Pragma_Suppress_All (Flag14-Sem)\n    --    This flag is set in an N_Compilation_Unit node if the Suppress_All\n    --    pragma appears anywhere in the unit. This accomodates the rather\n@@ -4486,6 +4491,7 @@ package Sinfo is\n       --  Is_Task_Master (Flag5-Sem)\n       --  Was_Originally_Stub (Flag13-Sem)\n       --  Has_Relative_Deadline_Pragma (Flag9-Sem)\n+      --  Has_Pragma_CPU (Flag10-Sem)\n \n       ------------------------------\n       -- Parameterized Expression --\n@@ -4969,6 +4975,7 @@ package Sinfo is\n       --  Has_Task_Info_Pragma (Flag7-Sem)\n       --  Has_Task_Name_Pragma (Flag8-Sem)\n       --  Has_Relative_Deadline_Pragma (Flag9-Sem)\n+      --  Has_Pragma_CPU (Flag10-Sem)\n \n       --------------------\n       -- 9.1  Task Item --\n@@ -8316,6 +8323,9 @@ package Sinfo is\n    function Has_No_Elaboration_Code\n      (N : Node_Id) return Boolean;    -- Flag17\n \n+   function Has_Pragma_CPU\n+     (N : Node_Id) return Boolean;    -- Flag10\n+\n    function Has_Pragma_Priority\n      (N : Node_Id) return Boolean;    -- Flag6\n \n@@ -9264,6 +9274,9 @@ package Sinfo is\n    procedure Set_Has_No_Elaboration_Code\n      (N : Node_Id; Val : Boolean := True);    -- Flag17\n \n+   procedure Set_Has_Pragma_CPU\n+     (N : Node_Id; Val : Boolean := True);    -- Flag10\n+\n    procedure Set_Has_Pragma_Priority\n      (N : Node_Id; Val : Boolean := True);    -- Flag6\n \n@@ -11630,6 +11643,7 @@ package Sinfo is\n    pragma Inline (Has_Local_Raise);\n    pragma Inline (Has_Self_Reference);\n    pragma Inline (Has_No_Elaboration_Code);\n+   pragma Inline (Has_Pragma_CPU);\n    pragma Inline (Has_Pragma_Priority);\n    pragma Inline (Has_Pragma_Suppress_All);\n    pragma Inline (Has_Private_View);\n@@ -11942,6 +11956,7 @@ package Sinfo is\n    pragma Inline (Set_Has_Local_Raise);\n    pragma Inline (Set_Has_Dynamic_Range_Check);\n    pragma Inline (Set_Has_No_Elaboration_Code);\n+   pragma Inline (Set_Has_Pragma_CPU);\n    pragma Inline (Set_Has_Pragma_Priority);\n    pragma Inline (Set_Has_Pragma_Suppress_All);\n    pragma Inline (Set_Has_Private_View);"}, {"sha": "11199ec7ecaaa5fe2c2540354b8a98a5dfb7c3f2", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8918fe18ab24b24cba7575face37f1726a23ef19/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=8918fe18ab24b24cba7575face37f1726a23ef19", "patch": "@@ -153,6 +153,7 @@ package Snames is\n    Name_uChain                         : constant Name_Id := N + $;\n    Name_uClean                         : constant Name_Id := N + $;\n    Name_uController                    : constant Name_Id := N + $;\n+   Name_uCPU                           : constant Name_Id := N + $;\n    Name_uEntry_Bodies                  : constant Name_Id := N + $;\n    Name_uExpunge                       : constant Name_Id := N + $;\n    Name_uFinal_List                    : constant Name_Id := N + $;\n@@ -442,6 +443,7 @@ package Snames is\n    Name_CPP_Constructor                : constant Name_Id := N + $; -- GNAT\n    Name_CPP_Virtual                    : constant Name_Id := N + $; -- GNAT\n    Name_CPP_Vtable                     : constant Name_Id := N + $; -- GNAT\n+   Name_CPU                            : constant Name_Id := N + $; -- Ada 12\n    Name_Debug                          : constant Name_Id := N + $; -- GNAT\n    Name_Dimension                      : constant Name_Id := N + $; -- GNAT\n    Name_Elaborate                      : constant Name_Id := N + $; -- Ada 83\n@@ -1528,6 +1530,7 @@ package Snames is\n       Pragma_CPP_Constructor,\n       Pragma_CPP_Virtual,\n       Pragma_CPP_Vtable,\n+      Pragma_CPU,\n       Pragma_Debug,\n       Pragma_Dimension,\n       Pragma_Elaborate,"}]}