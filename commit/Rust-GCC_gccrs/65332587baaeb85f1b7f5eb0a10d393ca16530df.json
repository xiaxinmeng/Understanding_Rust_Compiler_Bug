{"sha": "65332587baaeb85f1b7f5eb0a10d393ca16530df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUzMzI1ODdiYWFlYjg1ZjFiN2Y1ZWIwYTEwZDM5M2NhMTY1MzBkZg==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@google.com", "date": "2009-05-27T14:13:18Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2009-05-27T14:13:18Z"}, "message": "tree-pretty-print.c (dump_location): New.\n\n\n\t* tree-pretty-print.c (dump_location): New.\n\t(dump_generic_node): Call it.\n\tFactor code to handle BLOCK nodes ...\n\t(dump_block_node): ... here.\n\nFrom-SVN: r147910", "tree": {"sha": "811473fd78e70685bf6450ec2a458023a5674f4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/811473fd78e70685bf6450ec2a458023a5674f4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65332587baaeb85f1b7f5eb0a10d393ca16530df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65332587baaeb85f1b7f5eb0a10d393ca16530df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65332587baaeb85f1b7f5eb0a10d393ca16530df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65332587baaeb85f1b7f5eb0a10d393ca16530df/comments", "author": {"login": "dnovillo", "id": 7295335, "node_id": "MDQ6VXNlcjcyOTUzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7295335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnovillo", "html_url": "https://github.com/dnovillo", "followers_url": "https://api.github.com/users/dnovillo/followers", "following_url": "https://api.github.com/users/dnovillo/following{/other_user}", "gists_url": "https://api.github.com/users/dnovillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnovillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnovillo/subscriptions", "organizations_url": "https://api.github.com/users/dnovillo/orgs", "repos_url": "https://api.github.com/users/dnovillo/repos", "events_url": "https://api.github.com/users/dnovillo/events{/privacy}", "received_events_url": "https://api.github.com/users/dnovillo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e17e31d47109a840eb32e24dfd59ca9a49c8bfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e17e31d47109a840eb32e24dfd59ca9a49c8bfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e17e31d47109a840eb32e24dfd59ca9a49c8bfa"}], "stats": {"total": 206, "additions": 139, "deletions": 67}, "files": [{"sha": "894361c3b7398b437a2a9bd1216c87a2b7c6e2f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65332587baaeb85f1b7f5eb0a10d393ca16530df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65332587baaeb85f1b7f5eb0a10d393ca16530df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65332587baaeb85f1b7f5eb0a10d393ca16530df", "patch": "@@ -1,3 +1,10 @@\n+2009-05-27  Diego Novillo  <dnovillo@google.com>\n+\n+\t* tree-pretty-print.c (dump_location): New.\n+\t(dump_generic_node): Call it.\n+\tFactor code to handle BLOCK nodes ...\n+\t(dump_block_node): ... here.\n+\n 2009-05-27  Rafael Avila de Espindola  <espindola@google.com>\n \n \t* Makefile.in (GCC_PLUGIN_H): New. Replace all uses of gcc-plugin.h with"}, {"sha": "02b63654df2523ec3532c7bdcc2ac1c0a1edbf2b", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 132, "deletions": 67, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65332587baaeb85f1b7f5eb0a10d393ca16530df/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65332587baaeb85f1b7f5eb0a10d393ca16530df/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=65332587baaeb85f1b7f5eb0a10d393ca16530df", "patch": "@@ -423,6 +423,135 @@ dump_omp_clauses (pretty_printer *buffer, tree clause, int spc, int flags)\n }\n \n \n+/* Dump location LOC to BUFFER.  */\n+\n+static void\n+dump_location (pretty_printer *buffer, location_t loc)\n+{\n+  expanded_location xloc = expand_location (loc);\n+\n+  pp_character (buffer, '[');\n+  if (xloc.file)\n+    {\n+      pp_string (buffer, xloc.file);\n+      pp_string (buffer, \" : \");\n+    }\n+  pp_decimal_int (buffer, xloc.line);\n+  pp_string (buffer, \"] \");\n+}\n+\n+\n+/* Dump lexical block BLOCK.  BUFFER, SPC and FLAGS are as in\n+   dump_generic_node.  */\n+\n+static void\n+dump_block_node (pretty_printer *buffer, tree block, int spc, int flags)\n+{\n+  tree t;\n+\n+  pp_printf (buffer, \"BLOCK #%d \", BLOCK_NUMBER (block));\n+\n+  if (flags & TDF_ADDRESS)\n+    pp_printf (buffer, \"[%p] \", (void *) block);\n+\n+  if (BLOCK_ABSTRACT (block))\n+    pp_string (buffer, \"[abstract] \");\n+\n+  if (TREE_ASM_WRITTEN (block))\n+    pp_string (buffer, \"[written] \");\n+\n+  if (flags & TDF_SLIM)\n+    return;\n+\n+  if (BLOCK_SOURCE_LOCATION (block))\n+    dump_location (buffer, BLOCK_SOURCE_LOCATION (block));\n+\n+  newline_and_indent (buffer, spc + 2);\n+\n+  if (BLOCK_SUPERCONTEXT (block))\n+    {\n+      pp_string (buffer, \"SUPERCONTEXT: \");\n+      dump_generic_node (buffer, BLOCK_SUPERCONTEXT (block), 0,\n+\t\t\t flags | TDF_SLIM, false);\n+      newline_and_indent (buffer, spc + 2);\n+    }\n+\n+  if (BLOCK_SUBBLOCKS (block))\n+    {\n+      pp_string (buffer, \"SUBBLOCKS: \");\n+      for (t = BLOCK_SUBBLOCKS (block); t; t = BLOCK_CHAIN (t))\n+\t{\n+\t  dump_generic_node (buffer, t, 0, flags | TDF_SLIM, false);\n+\t  pp_string (buffer, \" \");\n+\t}\n+      newline_and_indent (buffer, spc + 2);\n+    }\n+\n+  if (BLOCK_CHAIN (block))\n+    {\n+      pp_string (buffer, \"SIBLINGS: \");\n+      for (t = BLOCK_CHAIN (block); t; t = BLOCK_CHAIN (t))\n+\t{\n+\t  dump_generic_node (buffer, t, 0, flags | TDF_SLIM, false);\n+\t  pp_string (buffer, \" \");\n+\t}\n+      newline_and_indent (buffer, spc + 2);\n+    }\n+\n+  if (BLOCK_VARS (block))\n+    {\n+      pp_string (buffer, \"VARS: \");\n+      for (t = BLOCK_VARS (block); t; t = TREE_CHAIN (t))\n+\t{\n+\t  dump_generic_node (buffer, t, 0, flags, false);\n+\t  pp_string (buffer, \" \");\n+\t}\n+      newline_and_indent (buffer, spc + 2);\n+    }\n+\n+  if (VEC_length (tree, BLOCK_NONLOCALIZED_VARS (block)) > 0)\n+    {\n+      unsigned i;\n+      VEC(tree,gc) *nlv = BLOCK_NONLOCALIZED_VARS (block);\n+\n+      pp_string (buffer, \"NONLOCALIZED_VARS: \");\n+      for (i = 0; VEC_iterate (tree, nlv, i, t); i++)\n+\t{\n+\t  dump_generic_node (buffer, t, 0, flags, false);\n+\t  pp_string (buffer, \" \");\n+\t}\n+      newline_and_indent (buffer, spc + 2);\n+    }\n+\n+  if (BLOCK_ABSTRACT_ORIGIN (block))\n+    {\n+      pp_string (buffer, \"ABSTRACT_ORIGIN: \");\n+      dump_generic_node (buffer, BLOCK_ABSTRACT_ORIGIN (block), 0,\n+\t\t\t flags | TDF_SLIM, false);\n+      newline_and_indent (buffer, spc + 2);\n+    }\n+\n+  if (BLOCK_FRAGMENT_ORIGIN (block))\n+    {\n+      pp_string (buffer, \"FRAGMENT_ORIGIN: \");\n+      dump_generic_node (buffer, BLOCK_FRAGMENT_ORIGIN (block), 0,\n+\t\t\t flags | TDF_SLIM, false);\n+      newline_and_indent (buffer, spc + 2);\n+    }\n+\n+  if (BLOCK_FRAGMENT_CHAIN (block))\n+    {\n+      pp_string (buffer, \"FRAGMENT_CHAIN: \");\n+      for (t = BLOCK_FRAGMENT_CHAIN (block); t; t = BLOCK_FRAGMENT_CHAIN (t))\n+\t{\n+\t  dump_generic_node (buffer, t, 0, flags | TDF_SLIM, false);\n+\t  pp_string (buffer, \" \");\n+\t}\n+      newline_and_indent (buffer, spc + 2);\n+    }\n+}\n+\n+\n /* Dump the node NODE on the pretty_printer BUFFER, SPC spaces of\n    indent.  FLAGS specifies details to show in the dump (see TDF_* in\n    tree-pass.h).  If IS_STMT is true, the object printed is considered\n@@ -446,17 +575,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n     pp_printf (buffer, \"<&%p> \", (void *)node);\n \n   if ((flags & TDF_LINENO) && EXPR_HAS_LOCATION (node))\n-    {\n-      expanded_location xloc = expand_location (EXPR_LOCATION (node));\n-      pp_character (buffer, '[');\n-      if (xloc.file)\n-\t{\n-\t  pp_string (buffer, xloc.file);\n-\t  pp_string (buffer, \" : \");\n-\t}\n-      pp_decimal_int (buffer, xloc.line);\n-      pp_string (buffer, \"] \");\n-    }\n+    dump_location (buffer, EXPR_LOCATION (node));\n \n   switch (TREE_CODE (node))\n     {\n@@ -2002,62 +2121,8 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       break;\n \n     case BLOCK:\n-      {\n-\ttree t;\n-\tpp_string (buffer, \"BLOCK\");\n-\n-\tif (BLOCK_ABSTRACT (node))\n-\t  pp_string (buffer, \" [abstract]\");\n-\n-\tif (TREE_ASM_WRITTEN (node))\n-\t  pp_string (buffer, \" [written]\");\n-\n-\tnewline_and_indent (buffer, spc + 2);\n-\n-\tif (BLOCK_SUPERCONTEXT (node))\n-\t  {\n-\t    pp_string (buffer, \"SUPERCONTEXT: \");\n-\t    if (TREE_CODE (BLOCK_SUPERCONTEXT (node)) == BLOCK)\n-\t      pp_printf (buffer, \"BLOCK %p\",\n-\t\t         (void *)BLOCK_SUPERCONTEXT (node));\n-\t    else\n-\t      dump_generic_node (buffer, BLOCK_SUPERCONTEXT (node), 0, flags,\n-\t\t\t\t false);\n-\t    newline_and_indent (buffer, spc + 2);\n-\t  }\n-\n-\tif (BLOCK_SUBBLOCKS (node))\n-\t  {\n-\t    pp_string (buffer, \"SUBBLOCKS: \");\n-\t    for (t = BLOCK_SUBBLOCKS (node); t; t = BLOCK_CHAIN (t))\n-\t      pp_printf (buffer, \"%p \", (void *)t);\n-\t    newline_and_indent (buffer, spc + 2);\n-\t  }\n-\n-\tif (BLOCK_VARS (node))\n-\t  {\n-\t    pp_string (buffer, \"VARS: \");\n-\t    for (t = BLOCK_VARS (node); t; t = TREE_CHAIN (t))\n-\t      {\n-\t\tdump_generic_node (buffer, t, 0, flags, false);\n-\t\tpp_string (buffer, \" \");\n-\t      }\n-\t    newline_and_indent (buffer, spc + 2);\n-\t  }\n-\n-\tif (BLOCK_ABSTRACT_ORIGIN (node))\n-\t  {\n-\t    pp_string (buffer, \"ABSTRACT_ORIGIN: \");\n-\t    if (TREE_CODE (BLOCK_ABSTRACT_ORIGIN (node)) == BLOCK)\n-\t      pp_printf (buffer, \"BLOCK %p\",\n-\t\t\t (void *)BLOCK_ABSTRACT_ORIGIN (node));\n-\t    else\n-\t      dump_generic_node (buffer, BLOCK_ABSTRACT_ORIGIN (node), 0, flags,\n-\t\t\t\t false);\n-\t    newline_and_indent (buffer, spc + 2);\n-\t  }\n-      }\n-    break;\n+      dump_block_node (buffer, node, spc, flags);\n+      break;\n \n     case VEC_EXTRACT_EVEN_EXPR:\n       pp_string (buffer, \" VEC_EXTRACT_EVEN_EXPR < \");"}]}