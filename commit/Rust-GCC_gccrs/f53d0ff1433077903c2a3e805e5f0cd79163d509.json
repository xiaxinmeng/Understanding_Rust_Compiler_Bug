{"sha": "f53d0ff1433077903c2a3e805e5f0cd79163d509", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUzZDBmZjE0MzMwNzc5MDNjMmEzZTgwNWU1ZjBjZDc5MTYzZDUwOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2002-01-02T12:16:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2002-01-02T12:16:56Z"}, "message": "stl_algobase.h (copy_n + helpers, [...]): Move to...\n\n2002-01-02  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/stl_algobase.h (copy_n + helpers,\n\tlexicographical_compare_3way + helpers):  Move to...\n\t* include/ext/algorithm:  ...here.\n        * include/bits/stl_uninitialized.h (uninitialized_copy_n +\n        helpers):  Move to...\n        * include/ext/memory:  ...here, new file.\n        * include/Makefile.am (ext_headers):  Add new file.\n        * include/Makefile.in:  Regenerate.\n        * testsuite/ext/headers.cc:  Include <ext/memory>.\n\t* include/backward/algobase.h:  Include <ext/memory> and\n\t<ext/algorithm>, tweak.\n        * include/ext/ropeimpl.h:  Include <ext/memory>, tweak.\n\t* include/ext/stl_rope.h:  Include <ext/memory>, tweak.\n\nFrom-SVN: r48467", "tree": {"sha": "ad019616814a5f2ed84eaafde669d01edf9985a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad019616814a5f2ed84eaafde669d01edf9985a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f53d0ff1433077903c2a3e805e5f0cd79163d509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f53d0ff1433077903c2a3e805e5f0cd79163d509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f53d0ff1433077903c2a3e805e5f0cd79163d509", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f53d0ff1433077903c2a3e805e5f0cd79163d509/comments", "author": null, "committer": null, "parents": [{"sha": "d46a33b3223caf37f764ce4c26d9e293b9f26fff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d46a33b3223caf37f764ce4c26d9e293b9f26fff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d46a33b3223caf37f764ce4c26d9e293b9f26fff"}], "stats": {"total": 714, "additions": 407, "deletions": 307}, "files": [{"sha": "72c97b8aa240266198ba56cbd64b2ff272ae8cab", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f53d0ff1433077903c2a3e805e5f0cd79163d509", "patch": "@@ -1,3 +1,19 @@\n+2002-01-02  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/stl_algobase.h (copy_n + helpers,\n+\tlexicographical_compare_3way + helpers):  Move to...\n+\t* include/ext/algorithm:  ...here.\n+        * include/bits/stl_uninitialized.h (uninitialized_copy_n +\n+        helpers):  Move to...\n+        * include/ext/memory:  ...here, new file.\n+        * include/Makefile.am (ext_headers):  Add new file.\n+        * include/Makefile.in:  Regenerate.\n+        * testsuite/ext/headers.cc:  Include <ext/memory>.\n+\t* include/backward/algobase.h:  Include <ext/memory> and\n+\t<ext/algorithm>, tweak.\n+        * include/ext/ropeimpl.h:  Include <ext/memory>, tweak.\n+\t* include/ext/stl_rope.h:  Include <ext/memory>, tweak.\n+\n 2002-01-01  Roger Sayle <roger@eyesopen.com>\n \n \t* libmath/stubs.c (sinf,cosf): Implement stubs to enable the"}, {"sha": "42119305c3660f05eb419d18eb622f05d8c8f7bf", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=f53d0ff1433077903c2a3e805e5f0cd79163d509", "patch": "@@ -176,6 +176,7 @@ ext_headers = \\\n \t${ext_srcdir}/hash_map \\\n \t${ext_srcdir}/hash_set \\\n \t${ext_srcdir}/iterator \\\n+\t${ext_srcdir}/memory \\\n \t${ext_srcdir}/rope \\\n \t${ext_srcdir}/ropeimpl.h \\\n \t${ext_srcdir}/slist \\"}, {"sha": "abde46d4687e1d0dfabb04b0724697a670641d62", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 89, "deletions": 94, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=f53d0ff1433077903c2a3e805e5f0cd79163d509", "patch": "@@ -1,6 +1,7 @@\n-# Makefile.in generated automatically by automake 1.4 from Makefile.am\n+# Makefile.in generated automatically by automake 1.5 from Makefile.am.\n \n-# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n+# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n+# Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -10,6 +11,7 @@\n # even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n # PARTICULAR PURPOSE.\n \n+@SET_MAKE@\n \n SHELL = @SHELL@\n \n@@ -31,13 +33,9 @@ infodir = @infodir@\n mandir = @mandir@\n includedir = @includedir@\n oldincludedir = /usr/include\n-\n-DESTDIR =\n-\n pkgdatadir = $(datadir)/@PACKAGE@\n pkglibdir = $(libdir)/@PACKAGE@\n pkgincludedir = $(includedir)/@PACKAGE@\n-\n top_builddir = ..\n \n ACLOCAL = @ACLOCAL@\n@@ -46,11 +44,11 @@ AUTOMAKE = @AUTOMAKE@\n AUTOHEADER = @AUTOHEADER@\n \n INSTALL = @INSTALL@\n-INSTALL_PROGRAM = @INSTALL_PROGRAM@ $(AM_INSTALL_PROGRAM_FLAGS)\n+INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_DATA = @INSTALL_DATA@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@\n+INSTALL_HEADER = $(INSTALL_DATA)\n transform = @program_transform_name@\n-\n NORMAL_INSTALL = :\n PRE_INSTALL = :\n POST_INSTALL = :\n@@ -84,7 +82,6 @@ C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DATADIRNAME = @DATADIRNAME@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n-EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n@@ -108,7 +105,6 @@ LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n MAINT = @MAINT@\n-MAKEINFO = @MAKEINFO@\n MKINSTALLDIRS = @MKINSTALLDIRS@\n MSGFMT = @MSGFMT@\n OBJDUMP = @OBJDUMP@\n@@ -146,16 +142,23 @@ libtool_VERSION = @libtool_VERSION@\n release_VERSION = @release_VERSION@\n toplevel_srcdir = @toplevel_srcdir@\n \n+# Cross compiler and multilib support.\n+CXX = @glibcpp_CXX@\n+glibcpp_builddir = @glibcpp_builddir@\n+glibcpp_srcdir = @glibcpp_srcdir@\n+\n+# Target includes for threads\n+glibcpp_thread_h = @glibcpp_thread_h@\n+\n+# One big happy istallation:  just copy everything from the build to the\n+# install tree (except for the build stamps).\n+gxx_include_dir = @gxx_include_dir@\n+\n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n-# Cross compiler and multilib support.\n-CXX = @glibcpp_CXX@\n-glibcpp_srcdir = @glibcpp_srcdir@\n-glibcpp_builddir = @glibcpp_builddir@\n-\n bits_srcdir = ${glibcpp_srcdir}/include/bits\n bits_builddir = ./bits\n bits_headers = \\\n@@ -303,6 +306,7 @@ ext_headers = \\\n \t${ext_srcdir}/hash_map \\\n \t${ext_srcdir}/hash_set \\\n \t${ext_srcdir}/iterator \\\n+\t${ext_srcdir}/memory \\\n \t${ext_srcdir}/rope \\\n \t${ext_srcdir}/ropeimpl.h \\\n \t${ext_srcdir}/slist \\\n@@ -410,116 +414,108 @@ thread_headers = \\\n allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \\\n \tstamp-target stamp-thread \n \n-\n-# Target includes for threads\n-glibcpp_thread_h = @glibcpp_thread_h@\n uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n+subdir = include\n+CONFIG_HEADER = $(top_builddir)/config.h\n+CONFIG_CLEAN_FILES =\n+depcomp =\n+DIST_SOURCES =\n+all: all-am\n \n-# One big happy istallation:  just copy everything from the build to the\n-# install tree (except for the build stamps).\n-gxx_include_dir = @gxx_include_dir@\n-CONFIG_HEADER = ../config.h\n-CONFIG_CLEAN_FILES = \n-DIST_COMMON =  Makefile.am Makefile.in\n-\n-\n-DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n-\n-TAR = gtar\n-GZIP_ENV = --best\n-all: all-redirect\n .SUFFIXES:\n-$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) \n-\tcd $(top_srcdir) && $(AUTOMAKE) --gnits include/Makefile\n \n-Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status $(BUILT_SOURCES)\n-\tcd $(top_builddir) \\\n-\t  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status\n+mostlyclean-libtool:\n+\t-rm -f *.lo\n \n+clean-libtool:\n+\t-rm -rf .libs _libs\n+\n+distclean-libtool:\n+\t-rm -f libtool\n+$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)\n+\tcd $(top_srcdir) && \\\n+\t  $(AUTOMAKE) --cygnus  include/Makefile\n+Makefile: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.in  $(top_builddir)/config.status\n+\tcd $(top_builddir) && \\\n+\t  CONFIG_HEADERS= CONFIG_LINKS= \\\n+\t  CONFIG_FILES=$(subdir)/$@ $(SHELL) ./config.status\n+uninstall-info-am:\n tags: TAGS\n TAGS:\n \n+check-am:\n+check: check-am\n+all-am: Makefile all-local\n \n-distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)\n-\n-subdir = include\n+installdirs:\n \n-distdir: $(DISTFILES)\n-\there=`cd $(top_builddir) && pwd`; \\\n-\ttop_distdir=`cd $(top_distdir) && pwd`; \\\n-\tdistdir=`cd $(distdir) && pwd`; \\\n-\tcd $(top_srcdir) \\\n-\t  && $(AUTOMAKE) --include-deps --build-dir=$$here --srcdir-name=$(top_srcdir) --output-dir=$$top_distdir --gnits include/Makefile\n-\t@for file in $(DISTFILES); do \\\n-\t  d=$(srcdir); \\\n-\t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n-\t  else \\\n-\t    test -f $(distdir)/$$file \\\n-\t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\\n-\t    || cp -p $$d/$$file $(distdir)/$$file || :; \\\n-\t  fi; \\\n-\tdone\n-info-am:\n-info: info-am\n-dvi-am:\n-dvi: dvi-am\n-check-am: all-am\n-check: check-am\n-installcheck-am:\n-installcheck: installcheck-am\n-install-exec-am:\n+install: install-am\n install-exec: install-exec-am\n-\n-install-data-am: install-data-local\n install-data: install-data-am\n+uninstall: uninstall-am\n \n install-am: all-am\n \t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n-install: install-am\n-uninstall-am:\n-uninstall: uninstall-am\n-all-am: Makefile all-local\n-all-redirect: all-am\n-install-strip:\n-\t$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install\n-installdirs:\n-\n \n+installcheck: installcheck-am\n+install-strip:\n+\t$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n+\t  `test -z '$(STRIP)' || \\\n+\t    echo \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\"` install\n mostlyclean-generic:\n \n clean-generic:\n \n distclean-generic:\n-\t-rm -f Makefile $(CONFIG_CLEAN_FILES)\n-\t-rm -f config.cache config.log stamp-h stamp-h[0-9]*\n+\t-rm -f Makefile $(CONFIG_CLEAN_FILES) stamp-h stamp-h[0-9]*\n \n maintainer-clean-generic:\n-mostlyclean-am:  mostlyclean-generic\n+\t@echo \"This command is intended for maintainers to use\"\n+\t@echo \"it deletes files that may require special tools to rebuild.\"\n+clean: clean-am\n \n-mostlyclean: mostlyclean-am\n+clean-am: clean-generic clean-libtool mostlyclean-am\n \n-clean-am:  clean-generic mostlyclean-am\n+distclean: distclean-am\n \n-clean: clean-am\n+distclean-am: clean-am distclean-generic distclean-libtool\n \n-distclean-am:  distclean-generic clean-am\n-\t-rm -f libtool\n+dvi: dvi-am\n \n-distclean: distclean-am\n+dvi-am:\n \n-maintainer-clean-am:  maintainer-clean-generic distclean-am\n-\t@echo \"This command is intended for maintainers to use;\"\n-\t@echo \"it deletes files that may require special tools to rebuild.\"\n+info: info-am\n+\n+info-am:\n+\n+install-data-am: install-data-local\n+\n+install-exec-am:\n+\n+install-info:\n+\n+install-man:\n+\n+installcheck-am:\n \n maintainer-clean: maintainer-clean-am\n \n-.PHONY: tags distdir info-am info dvi-am dvi check check-am \\\n-installcheck-am installcheck install-exec-am install-exec \\\n-install-data-local install-data-am install-data install-am install \\\n-uninstall-am uninstall all-local all-redirect all-am all installdirs \\\n-mostlyclean-generic distclean-generic clean-generic \\\n-maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n+maintainer-clean-am: distclean-am maintainer-clean-generic\n+\n+mostlyclean: mostlyclean-am\n+\n+mostlyclean-am: mostlyclean-generic mostlyclean-libtool\n+\n+uninstall-am:\n+\n+.PHONY: all all-am all-local check check-am clean clean-generic \\\n+\tclean-libtool distclean distclean-generic distclean-libtool dvi \\\n+\tdvi-am info info-am install install-am install-data \\\n+\tinstall-data-am install-data-local install-exec install-exec-am \\\n+\tinstall-info install-info-am install-man install-strip \\\n+\tinstallcheck installcheck-am installdirs maintainer-clean \\\n+\tmaintainer-clean-generic mostlyclean mostlyclean-generic \\\n+\tmostlyclean-libtool uninstall uninstall-am uninstall-info-am\n \n \n # Here are the rules for building the headers\n@@ -626,7 +622,6 @@ install-data-local:\n \n # By adding these files here, automake will remove them for 'make clean'\n #CLEANFILES = ${allstamps}\n-\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "1606559828f795ff4ba96db29deefb4d6d53bb77", "filename": "libstdc++-v3/include/backward/algobase.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgobase.h?ref=f53d0ff1433077903c2a3e805e5f0cd79163d509", "patch": "@@ -60,6 +60,8 @@\n #include \"iterator.h\"\n #include <bits/stl_algobase.h>\n #include <bits/stl_uninitialized.h>\n+#include <ext/algorithm>\n+#include <ext/memory>\n \n // Names from stl_algobase.h\n using std::iter_swap; \n@@ -68,20 +70,24 @@ using std::min;\n using std::max; \n using std::copy; \n using std::copy_backward; \n-using std::copy_n; \n using std::fill; \n using std::fill_n; \n using std::mismatch; \n using std::equal; \n using std::lexicographical_compare; \n-using std::lexicographical_compare_3way; \n \n // Names from stl_uninitialized.h\n using std::uninitialized_copy;\n-using std::uninitialized_copy_n;\n using std::uninitialized_fill;\n using std::uninitialized_fill_n;\n \n+// Names from ext/algorithm\n+using __gnu_cxx::copy_n; \n+using __gnu_cxx::lexicographical_compare_3way; \n+\n+// Names from ext/memory\n+using __gnu_cxx::uninitialized_copy_n;\n+\n #endif /* _CPP_BACKWARD_ALGOBASE_H */\n \n // Local Variables:"}, {"sha": "2453976d6282290823b7dadaa2035a07726df01f", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 1, "deletions": 136, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=f53d0ff1433077903c2a3e805e5f0cd79163d509", "patch": "@@ -492,58 +492,6 @@ namespace std\n \t\t\t\t\t\t   __Normal());\n     }\n \n-  //--------------------------------------------------\n-  // copy_n (not part of the C++ standard)\n-\n-  template<typename _InputIter, typename _Size, typename _OutputIter>\n-    pair<_InputIter, _OutputIter>\n-    __copy_n(_InputIter __first, _Size __count,\n-\t     _OutputIter __result,\n-\t     input_iterator_tag)\n-    {\n-      for ( ; __count > 0; --__count) {\n-\t*__result = *__first;\n-\t++__first;\n-\t++__result;\n-      }\n-      return pair<_InputIter, _OutputIter>(__first, __result);\n-    }\n-\n-  template<typename _RAIter, typename _Size, typename _OutputIter>\n-    inline pair<_RAIter, _OutputIter>\n-    __copy_n(_RAIter __first, _Size __count,\n-\t     _OutputIter __result,\n-\t     random_access_iterator_tag)\n-    {\n-      _RAIter __last = __first + __count;\n-      return pair<_RAIter, _OutputIter>(__last, copy(__first, __last, __result));\n-    }\n-\n-  /**\n-   *  @brief Copies the range [first,first+count) into [result,result+count).\n-   *  @param  first  An input iterator.\n-   *  @param  count  The number of elements to copy.\n-   *  @param  result An output iterator.\n-   *  @return   A std::pair composed of first+count and result+count.\n-   *\n-   *  This is an SGI extension.\n-   *  This inline function will boil down to a call to @c memmove whenever\n-   *  possible.  Failing that, if random access iterators are passed, then the\n-   *  loop count will be known (and therefore a candidate for compiler\n-   *  optimizations such as unrolling).\n-   *  @ingroup SGIextensions\n-  */\n-  template<typename _InputIter, typename _Size, typename _OutputIter>\n-    inline pair<_InputIter, _OutputIter>\n-    copy_n(_InputIter __first, _Size __count, _OutputIter __result)\n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter>::value_type>)\n-\n-      return __copy_n(__first, __count, __result, __iterator_category(__first));\n-    }\n \n   //--------------------------------------------------\n   // fill and fill_n\n@@ -767,8 +715,7 @@ namespace std\n     }\n \n   //--------------------------------------------------\n-  // lexicographical_compare and lexicographical_compare_3way.\n-  // (the latter is not part of the C++ standard.)\n+  // lexicographical_compare\n \n   /**\n    *  @brief Performs \"dictionary\" comparison on ranges.\n@@ -866,88 +813,6 @@ namespace std\n #endif /* CHAR_MAX == SCHAR_MAX */\n   }\n \n-  template<typename _InputIter1, typename _InputIter2>\n-    int\n-    __lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,\n-\t\t\t\t   _InputIter2 __first2, _InputIter2 __last2)\n-    {\n-      while (__first1 != __last1 && __first2 != __last2) {\n-\tif (*__first1 < *__first2)\n-\t  return -1;\n-\tif (*__first2 < *__first1)\n-\t  return 1;\n-\t++__first1;\n-\t++__first2;\n-      }\n-      if (__first2 == __last2) {\n-\treturn !(__first1 == __last1);\n-      }\n-      else {\n-\treturn -1;\n-      }\n-    }\n-\n-  inline int\n-  __lexicographical_compare_3way(const unsigned char* __first1,\n-\t\t\t\t const unsigned char* __last1,\n-\t\t\t\t const unsigned char* __first2,\n-\t\t\t\t const unsigned char* __last2)\n-  {\n-    const ptrdiff_t __len1 = __last1 - __first1;\n-    const ptrdiff_t __len2 = __last2 - __first2;\n-    const int __result = memcmp(__first1, __first2, min(__len1, __len2));\n-    return __result != 0 ? __result \n-\t\t\t : (__len1 == __len2 ? 0 : (__len1 < __len2 ? -1 : 1));\n-  }\n-\n-  inline int \n-  __lexicographical_compare_3way(const char* __first1, const char* __last1,\n-\t\t\t\t const char* __first2, const char* __last2)\n-  {\n-#if CHAR_MAX == SCHAR_MAX\n-    return __lexicographical_compare_3way(\n-\t\t\t\t  (const signed char*) __first1,\n-\t\t\t\t  (const signed char*) __last1,\n-\t\t\t\t  (const signed char*) __first2,\n-\t\t\t\t  (const signed char*) __last2);\n-#else\n-    return __lexicographical_compare_3way((const unsigned char*) __first1,\n-\t\t\t\t\t  (const unsigned char*) __last1,\n-\t\t\t\t\t  (const unsigned char*) __first2,\n-\t\t\t\t\t  (const unsigned char*) __last2);\n-#endif\n-  }\n-\n-  /**\n-   *  @brief @c memcmp on steroids.\n-   *  @param  first1  An input iterator.\n-   *  @param  last1   An input iterator.\n-   *  @param  first2  An input iterator.\n-   *  @param  last2   An input iterator.\n-   *  @return   An int, as with @c memcmp.\n-   *\n-   *  The return value will be less than zero if the first range is\n-   *  \"lexigraphically less than\" the second, greater than zero if the second\n-   *  range is \"lexigraphically less than\" the first, and zero otherwise.\n-   *  This is an SGI extension.\n-   *  @ingroup SGIextensions\n-  */\n-  template<typename _InputIter1, typename _InputIter2>\n-    int\n-    lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,\n-\t\t\t\t _InputIter2 __first2, _InputIter2 __last2)\n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIter1>::value_type>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIter2>::value_type>)\n-\n-      return __lexicographical_compare_3way(__first1, __last1, __first2, __last2);\n-    }\n-\n } // namespace std\n \n #endif /* __GLIBCPP_INTERNAL_ALGOBASE_H */"}, {"sha": "f679d52b1d71328f523c1ecfd7b5d051ead70adb", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=f53d0ff1433077903c2a3e805e5f0cd79163d509", "patch": "@@ -127,64 +127,6 @@ namespace std\n     return __result + (__last - __first);\n   }\n \n-  // uninitialized_copy_n (not part of the C++ standard)\n-\n-  template<typename _InputIter, typename _Size, typename _ForwardIter>\n-    pair<_InputIter, _ForwardIter>\n-    __uninitialized_copy_n(_InputIter __first, _Size __count,\n-\t\t\t   _ForwardIter __result,\n-\t\t\t   input_iterator_tag)\n-    {\n-      _ForwardIter __cur = __result;\n-      try {\n-\tfor ( ; __count > 0 ; --__count, ++__first, ++__cur) \n-\t  _Construct(&*__cur, *__first);\n-\treturn pair<_InputIter, _ForwardIter>(__first, __cur);\n-      }\n-      catch(...)\n-\t{\n-\t  _Destroy(__result, __cur);\n-\t  __throw_exception_again; \n-\t}\n-    }\n-\n-  template<typename _RandomAccessIter, typename _Size, typename _ForwardIter>\n-    inline pair<_RandomAccessIter, _ForwardIter>\n-    __uninitialized_copy_n(_RandomAccessIter __first, _Size __count,\n-\t\t\t   _ForwardIter __result,\n-\t\t\t   random_access_iterator_tag)\n-    {\n-      _RandomAccessIter __last = __first + __count;\n-      return pair<_RandomAccessIter, _ForwardIter>(\n-\t\t     __last,\n-\t\t     uninitialized_copy(__first, __last, __result));\n-    }\n-\n-  template<typename _InputIter, typename _Size, typename _ForwardIter>\n-    inline pair<_InputIter, _ForwardIter>\n-    __uninitialized_copy_n(_InputIter __first, _Size __count,\n-\t\t\t _ForwardIter __result) {\n-      return __uninitialized_copy_n(__first, __count, __result,\n-\t\t\t\t    __iterator_category(__first));\n-    }\n-\n-  /**\n-   *  @brief Copies the range [first,last) into result.\n-   *  @param  first  An input iterator.\n-   *  @param  last   An input iterator.\n-   *  @param  result An output iterator.\n-   *  @return   result + (first - last)\n-   *\n-   *  Like copy(), but does not require an initialized output range.\n-  */\n-  template<typename _InputIter, typename _Size, typename _ForwardIter>\n-    inline pair<_InputIter, _ForwardIter>\n-    uninitialized_copy_n(_InputIter __first, _Size __count,\n-\t\t\t _ForwardIter __result) {\n-      return __uninitialized_copy_n(__first, __count, __result,\n-\t\t\t\t    __iterator_category(__first));\n-    }\n-\n   // Valid if copy construction is equivalent to assignment, and if the\n   // destructor is trivial.\n   template<typename _ForwardIter, typename _Tp>"}, {"sha": "588c722138fd5e5fef58dc98da808ce2b704a249", "filename": "libstdc++-v3/include/ext/algorithm", "status": "modified", "additions": 156, "deletions": 12, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm?ref=f53d0ff1433077903c2a3e805e5f0cd79163d509", "patch": "@@ -61,6 +61,150 @@\n \n namespace __gnu_cxx\n {\n+  using std::ptrdiff_t;\n+  using std::min;\n+  using std::pair;\n+  using std::input_iterator_tag;\n+  using std::random_access_iterator_tag;\n+  using std::iterator_traits;\n+\n+  //--------------------------------------------------\n+  // copy_n (not part of the C++ standard)\n+\n+  template<typename _InputIter, typename _Size, typename _OutputIter>\n+    pair<_InputIter, _OutputIter>\n+    __copy_n(_InputIter __first, _Size __count,\n+\t     _OutputIter __result,\n+\t     input_iterator_tag)\n+    {\n+      for ( ; __count > 0; --__count) {\n+\t*__result = *__first;\n+\t++__first;\n+\t++__result;\n+      }\n+      return pair<_InputIter, _OutputIter>(__first, __result);\n+    }\n+\n+  template<typename _RAIter, typename _Size, typename _OutputIter>\n+    inline pair<_RAIter, _OutputIter>\n+    __copy_n(_RAIter __first, _Size __count,\n+\t     _OutputIter __result,\n+\t     random_access_iterator_tag)\n+    {\n+      _RAIter __last = __first + __count;\n+      return pair<_RAIter, _OutputIter>(__last,\n+\t\t\t\t\tstd::copy(__first, __last, __result));\n+    }\n+\n+  /**\n+   *  @brief Copies the range [first,first+count) into [result,result+count).\n+   *  @param  first  An input iterator.\n+   *  @param  count  The number of elements to copy.\n+   *  @param  result An output iterator.\n+   *  @return   A std::pair composed of first+count and result+count.\n+   *\n+   *  This is an SGI extension.\n+   *  This inline function will boil down to a call to @c memmove whenever\n+   *  possible.  Failing that, if random access iterators are passed, then the\n+   *  loop count will be known (and therefore a candidate for compiler\n+   *  optimizations such as unrolling).\n+   *  @ingroup SGIextensions\n+  */\n+  template<typename _InputIter, typename _Size, typename _OutputIter>\n+    inline pair<_InputIter, _OutputIter>\n+    copy_n(_InputIter __first, _Size __count, _OutputIter __result)\n+    {\n+      // concept requirements\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n+      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n+\t    typename iterator_traits<_InputIter>::value_type>)\n+\n+      return __copy_n(__first, __count, __result,\n+\t\t      std::__iterator_category(__first));\n+    }\n+\n+  template<typename _InputIter1, typename _InputIter2>\n+    int\n+    __lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,\n+\t\t\t\t   _InputIter2 __first2, _InputIter2 __last2)\n+    {\n+      while (__first1 != __last1 && __first2 != __last2) {\n+\tif (*__first1 < *__first2)\n+\t  return -1;\n+\tif (*__first2 < *__first1)\n+\t  return 1;\n+\t++__first1;\n+\t++__first2;\n+      }\n+      if (__first2 == __last2) {\n+\treturn !(__first1 == __last1);\n+      }\n+      else {\n+\treturn -1;\n+      }\n+    }\n+\n+  inline int\n+  __lexicographical_compare_3way(const unsigned char* __first1,\n+\t\t\t\t const unsigned char* __last1,\n+\t\t\t\t const unsigned char* __first2,\n+\t\t\t\t const unsigned char* __last2)\n+  {\n+    const ptrdiff_t __len1 = __last1 - __first1;\n+    const ptrdiff_t __len2 = __last2 - __first2;\n+    const int __result = std::memcmp(__first1, __first2, min(__len1, __len2));\n+    return __result != 0 ? __result \n+\t\t\t : (__len1 == __len2 ? 0 : (__len1 < __len2 ? -1 : 1));\n+  }\n+\n+  inline int \n+  __lexicographical_compare_3way(const char* __first1, const char* __last1,\n+\t\t\t\t const char* __first2, const char* __last2)\n+  {\n+#if CHAR_MAX == SCHAR_MAX\n+    return __lexicographical_compare_3way(\n+\t\t\t\t  (const signed char*) __first1,\n+\t\t\t\t  (const signed char*) __last1,\n+\t\t\t\t  (const signed char*) __first2,\n+\t\t\t\t  (const signed char*) __last2);\n+#else\n+    return __lexicographical_compare_3way((const unsigned char*) __first1,\n+\t\t\t\t\t  (const unsigned char*) __last1,\n+\t\t\t\t\t  (const unsigned char*) __first2,\n+\t\t\t\t\t  (const unsigned char*) __last2);\n+#endif\n+  }\n+\n+  /**\n+   *  @brief @c memcmp on steroids.\n+   *  @param  first1  An input iterator.\n+   *  @param  last1   An input iterator.\n+   *  @param  first2  An input iterator.\n+   *  @param  last2   An input iterator.\n+   *  @return   An int, as with @c memcmp.\n+   *\n+   *  The return value will be less than zero if the first range is\n+   *  \"lexigraphically less than\" the second, greater than zero if the second\n+   *  range is \"lexigraphically less than\" the first, and zero otherwise.\n+   *  This is an SGI extension.\n+   *  @ingroup SGIextensions\n+  */\n+  template<typename _InputIter1, typename _InputIter2>\n+    int\n+    lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,\n+\t\t\t\t _InputIter2 __first2, _InputIter2 __last2)\n+    {\n+      // concept requirements\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n+      __glibcpp_function_requires(_LessThanComparableConcept<\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n+      __glibcpp_function_requires(_LessThanComparableConcept<\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n+\n+      return __lexicographical_compare_3way(__first1, __last1, __first2, __last2);\n+    }\n+\n   // count and count_if: this version, whose return type is void, was present\n   // in the HP STL, and is retained as an extension for backward compatibility.\n \n@@ -73,7 +217,7 @@ namespace __gnu_cxx\n       // concept requirements\n       __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       __glibcpp_function_requires(_EqualityComparableConcept<\n-\t    typename std::iterator_traits<_InputIter>::value_type >)\n+\t    typename iterator_traits<_InputIter>::value_type >)\n       __glibcpp_function_requires(_EqualityComparableConcept<_Tp>)\n       for ( ; __first != __last; ++__first)\n \tif (*__first == __value)\n@@ -89,7 +233,7 @@ namespace __gnu_cxx\n       // concept requirements\n       __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n-\t    typename std::iterator_traits<_InputIter>::value_type>)\n+\t    typename iterator_traits<_InputIter>::value_type>)\n       for ( ; __first != __last; ++__first)\n \tif (__pred(*__first))\n \t  ++__n;\n@@ -105,10 +249,10 @@ namespace __gnu_cxx\n       // concept requirements\n       __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t\ttypename std::iterator_traits<_ForwardIter>::value_type>)\n+\t\ttypename iterator_traits<_ForwardIter>::value_type>)\n \n       _Distance __remaining = std::distance(__first, __last);\n-      _Distance __m = std::min(__n, __remaining);\n+      _Distance __m = min(__n, __remaining);\n \n       while (__m > 0) {\n \tif (std::__random_number(__remaining) < __m) {\n@@ -133,12 +277,12 @@ namespace __gnu_cxx\n       // concept requirements\n       __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t\ttypename std::iterator_traits<_ForwardIter>::value_type>)\n+\t\ttypename iterator_traits<_ForwardIter>::value_type>)\n       __glibcpp_function_requires(_UnaryFunctionConcept<\n \t\t_RandomNumberGenerator, _Distance, _Distance>)\n \n       _Distance __remaining = std::distance(__first, __last);\n-      _Distance __m = std::min(__n, __remaining);\n+      _Distance __m = min(__n, __remaining);\n \n       while (__m > 0) {\n \tif (__rand(__remaining) < __m) {\n@@ -275,7 +419,7 @@ namespace __gnu_cxx\n       // concept requirements\n       __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIter>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename std::iterator_traits<_RandomAccessIter>::value_type>)\n+\t    typename iterator_traits<_RandomAccessIter>::value_type>)\n \n       return __is_heap(__first, __last - __first);\n     }\n@@ -288,8 +432,8 @@ namespace __gnu_cxx\n       // concept requirements\n       __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIter>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_StrictWeakOrdering,\n-\t    typename std::iterator_traits<_RandomAccessIter>::value_type, \n-\t    typename std::iterator_traits<_RandomAccessIter>::value_type>)\n+\t    typename iterator_traits<_RandomAccessIter>::value_type, \n+\t    typename iterator_traits<_RandomAccessIter>::value_type>)\n \n       return __is_heap(__first, __comp, __last - __first);\n     }\n@@ -305,7 +449,7 @@ namespace __gnu_cxx\n       // concept requirements\n       __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename std::iterator_traits<_ForwardIter>::value_type>)\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n \n       if (__first == __last)\n \treturn true;\n@@ -326,8 +470,8 @@ namespace __gnu_cxx\n       // concept requirements\n       __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_StrictWeakOrdering,\n-\t    typename std::iterator_traits<_ForwardIter>::value_type, \n-\t    typename std::iterator_traits<_ForwardIter>::value_type>)\n+\t    typename iterator_traits<_ForwardIter>::value_type, \n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n \n       if (__first == __last)\n \treturn true;"}, {"sha": "e8b85741c8c2281cbcf7975fd3ca2754ecd95853", "filename": "libstdc++-v3/include/ext/memory", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory?ref=f53d0ff1433077903c2a3e805e5f0cd79163d509", "patch": "@@ -0,0 +1,128 @@\n+// Memory extensions -*- C++ -*-\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/*\n+ *\n+ * Copyright (c) 1994\n+ * Hewlett-Packard Company\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Hewlett-Packard Company makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ *\n+ * Copyright (c) 1996\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+#ifndef _EXT_MEMORY\n+#define _EXT_MEMORY\n+\n+#pragma GCC system_header\n+#include <bits/std_memory.h>\n+\n+namespace __gnu_cxx\n+{\n+  using std::pair;\n+  using std::__iterator_category;\n+  \n+  // uninitialized_copy_n (not part of the C++ standard)\n+\n+  template<typename _InputIter, typename _Size, typename _ForwardIter>\n+    pair<_InputIter, _ForwardIter>\n+    __uninitialized_copy_n(_InputIter __first, _Size __count,\n+\t\t\t   _ForwardIter __result,\n+\t\t\t   std::input_iterator_tag)\n+    {\n+      _ForwardIter __cur = __result;\n+      try {\n+\tfor ( ; __count > 0 ; --__count, ++__first, ++__cur) \n+\t  std::_Construct(&*__cur, *__first);\n+\treturn pair<_InputIter, _ForwardIter>(__first, __cur);\n+      }\n+      catch(...)\n+\t{\n+\t  std::_Destroy(__result, __cur);\n+\t  __throw_exception_again; \n+\t}\n+    }\n+\n+  template<typename _RandomAccessIter, typename _Size, typename _ForwardIter>\n+    inline pair<_RandomAccessIter, _ForwardIter>\n+    __uninitialized_copy_n(_RandomAccessIter __first, _Size __count,\n+\t\t\t   _ForwardIter __result,\n+\t\t\t   std::random_access_iterator_tag)\n+    {\n+      _RandomAccessIter __last = __first + __count;\n+      return pair<_RandomAccessIter, _ForwardIter>(\n+\t\t     __last,\n+\t\t     std::uninitialized_copy(__first, __last, __result));\n+    }\n+\n+  template<typename _InputIter, typename _Size, typename _ForwardIter>\n+    inline pair<_InputIter, _ForwardIter>\n+    __uninitialized_copy_n(_InputIter __first, _Size __count,\n+\t\t\t _ForwardIter __result) {\n+      return __uninitialized_copy_n(__first, __count, __result,\n+\t\t\t\t    __iterator_category(__first));\n+    }\n+\n+  /**\n+   *  @brief Copies the range [first,last) into result.\n+   *  @param  first  An input iterator.\n+   *  @param  last   An input iterator.\n+   *  @param  result An output iterator.\n+   *  @return   result + (first - last)\n+   *\n+   *  Like copy(), but does not require an initialized output range.\n+  */\n+  template<typename _InputIter, typename _Size, typename _ForwardIter>\n+    inline pair<_InputIter, _ForwardIter>\n+    uninitialized_copy_n(_InputIter __first, _Size __count,\n+\t\t\t _ForwardIter __result) {\n+      return __uninitialized_copy_n(__first, __count, __result,\n+\t\t\t\t    __iterator_category(__first));\n+    }\n+\n+} // namespace __gnu_cxx\n+\n+#endif /* _EXT_MEMORY */\n+"}, {"sha": "61324943b435a3213b67423375a49f0e82a25289", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=f53d0ff1433077903c2a3e805e5f0cd79163d509", "patch": "@@ -49,6 +49,9 @@\n #include <bits/std_iostream.h>\n #include <bits/functexcept.h>\n \n+#include <ext/algorithm> // For copy_n and lexicographical_compare_3way\n+#include <ext/memory> // For uninitialized_copy_n\n+\n namespace __gnu_cxx\n {\n using std::size_t;\n@@ -58,8 +61,6 @@ using std::__throw_length_error;\n using std::__alloc;\n using std::_Destroy;\n using std::uninitialized_fill_n;\n-using std::lexicographical_compare_3way;\n-using std::uninitialized_copy_n;\n \n // Set buf_start, buf_end, and buf_ptr appropriately, filling tmp_buf\n // if necessary.  Assumes _M_path_end[leaf_index] and leaf_pos are correct.\n@@ -983,7 +984,7 @@ rope<_CharT,_Alloc>::_S_flatten(_RopeRep* __r, _CharT* __buffer)\n \tcase _RopeRep::_S_leaf:\n \t    {\n \t\t_RopeLeaf* __l = (_RopeLeaf*)__r;\n-\t\treturn std::copy_n(__l->_M_data, __l->_M_size, __buffer).second;\n+\t\treturn copy_n(__l->_M_data, __l->_M_size, __buffer).second;\n \t    }\n \tcase _RopeRep::_S_function:\n \tcase _RopeRep::_S_substringfn:"}, {"sha": "04fa15c661ee4e8b65fc94bd80ef551172790df4", "filename": "libstdc++-v3/include/ext/stl_rope.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_rope.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_rope.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_rope.h?ref=f53d0ff1433077903c2a3e805e5f0cd79163d509", "patch": "@@ -61,6 +61,8 @@\n #   define __GC_CONST   // constant except for deallocation\n # endif\n \n+#include <ext/memory> // For uninitialized_copy_n\n+\n namespace __gnu_cxx\n {\n using std::size_t;\n@@ -71,7 +73,6 @@ using std::reverse_iterator;\n using std::_Alloc_traits;\n using std::_Destroy;\n using std::_Refcount_Base;\n-using std::uninitialized_copy_n;\n \n // The _S_eos function is used for those functions that\n // convert to/from C-like strings to detect the end of the string."}, {"sha": "bc7f8b21f8b61823dc5ffe085d082b52a3f88ff4", "filename": "libstdc++-v3/testsuite/ext/headers.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fheaders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f53d0ff1433077903c2a3e805e5f0cd79163d509/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fheaders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fheaders.cc?ref=f53d0ff1433077903c2a3e805e5f0cd79163d509", "patch": "@@ -27,6 +27,7 @@\n #include <ext/hash_map>\n #include <ext/hash_set>\n #include <ext/iterator>\n+#include <ext/memory>\n #include <ext/rope>\n #include <ext/slist>\n "}]}