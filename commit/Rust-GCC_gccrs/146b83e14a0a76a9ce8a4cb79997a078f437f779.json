{"sha": "146b83e14a0a76a9ce8a4cb79997a078f437f779", "node_id": "C_kwDOANBUbNoAKDE0NmI4M2UxNGEwYTc2YTljZThhNGNiNzk5OTdhMDc4ZjQzN2Y3Nzk", "commit": {"author": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-10-29T02:28:43Z"}, "committer": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-10-29T02:28:43Z"}, "message": "rs6000: Optimize __builtin_shuffle when it's used to zero the upper bits [PR102868]\n\nIf the second operand of __builtin_shuffle is const vector 0, and with\nspecific mask, it can be optimized to vspltisw+xxpermdi instead of lxv.\n\ngcc/ChangeLog:\n\n\tPR target/102868\n\t* config/rs6000/rs6000.c (altivec_expand_vec_perm_const): Add\n\tpatterns match and emit for VSX xxpermdi.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/102868\n\t* gcc.target/powerpc/pr102868.c: New test.", "tree": {"sha": "c465e9f9a5451b51fcd5422aad53319c9e60fb2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c465e9f9a5451b51fcd5422aad53319c9e60fb2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/146b83e14a0a76a9ce8a4cb79997a078f437f779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/146b83e14a0a76a9ce8a4cb79997a078f437f779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/146b83e14a0a76a9ce8a4cb79997a078f437f779", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/146b83e14a0a76a9ce8a4cb79997a078f437f779/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84bcefd5555af6d95e08cd980965098961289215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84bcefd5555af6d95e08cd980965098961289215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84bcefd5555af6d95e08cd980965098961289215"}], "stats": {"total": 92, "additions": 89, "deletions": 3}, "files": [{"sha": "01affc7a47c88177f230b4c84722b0fee4bfda31", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146b83e14a0a76a9ce8a4cb79997a078f437f779/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146b83e14a0a76a9ce8a4cb79997a078f437f779/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=146b83e14a0a76a9ce8a4cb79997a078f437f779", "patch": "@@ -23349,7 +23349,15 @@ altivec_expand_vec_perm_const (rtx target, rtx op0, rtx op1,\n     {OPTION_MASK_P8_VECTOR,\n      BYTES_BIG_ENDIAN ? CODE_FOR_p8_vmrgow_v4sf_direct\n \t\t      : CODE_FOR_p8_vmrgew_v4sf_direct,\n-     {4, 5, 6, 7, 20, 21, 22, 23, 12, 13, 14, 15, 28, 29, 30, 31}}};\n+     {4, 5, 6, 7, 20, 21, 22, 23, 12, 13, 14, 15, 28, 29, 30, 31}},\n+    {OPTION_MASK_VSX, CODE_FOR_vsx_xxpermdi_v16qi,\n+     {0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23}},\n+    {OPTION_MASK_VSX, CODE_FOR_vsx_xxpermdi_v16qi,\n+     {8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}},\n+    {OPTION_MASK_VSX, CODE_FOR_vsx_xxpermdi_v16qi,\n+     {0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31}},\n+    {OPTION_MASK_VSX, CODE_FOR_vsx_xxpermdi_v16qi,\n+     {8, 9, 10, 11, 12, 13, 14, 15, 24, 25, 26, 27, 28, 29, 30, 31}}};\n \n   unsigned int i, j, elt, which;\n   unsigned char perm[16];\n@@ -23472,6 +23480,27 @@ altivec_expand_vec_perm_const (rtx target, rtx op0, rtx op1,\n \t  machine_mode omode = insn_data[icode].operand[0].mode;\n \t  machine_mode imode = insn_data[icode].operand[1].mode;\n \n+\t  rtx perm_idx = GEN_INT (0);\n+\t  if (icode == CODE_FOR_vsx_xxpermdi_v16qi)\n+\t    {\n+\t      int perm_val = 0;\n+\t      if (one_vec)\n+\t\t{\n+\t\t  if (perm[0] == 8)\n+\t\t    perm_val |= 2;\n+\t\t  if (perm[8] == 8)\n+\t\t    perm_val |= 1;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  if (perm[0] != 0)\n+\t\t    perm_val |= 2;\n+\t\t  if (perm[8] != 16)\n+\t\t    perm_val |= 1;\n+\t\t}\n+\t      perm_idx = GEN_INT (perm_val);\n+\t    }\n+\n \t  /* For little-endian, don't use vpkuwum and vpkuhum if the\n \t     underlying vector type is not V4SI and V8HI, respectively.\n \t     For example, using vpkuwum with a V8HI picks up the even\n@@ -23495,7 +23524,8 @@ altivec_expand_vec_perm_const (rtx target, rtx op0, rtx op1,\n           /* For little-endian, the two input operands must be swapped\n              (or swapped back) to ensure proper right-to-left numbering\n              from 0 to 2N-1.  */\n-\t  if (swapped ^ !BYTES_BIG_ENDIAN)\n+\t  if (swapped ^ !BYTES_BIG_ENDIAN\n+\t      && icode != CODE_FOR_vsx_xxpermdi_v16qi)\n \t    std::swap (op0, op1);\n \t  if (imode != V16QImode)\n \t    {\n@@ -23506,7 +23536,10 @@ altivec_expand_vec_perm_const (rtx target, rtx op0, rtx op1,\n \t    x = target;\n \t  else\n \t    x = gen_reg_rtx (omode);\n-\t  emit_insn (GEN_FCN (icode) (x, op0, op1));\n+\t  if (icode == CODE_FOR_vsx_xxpermdi_v16qi)\n+\t    emit_insn (GEN_FCN (icode) (x, op0, op1, perm_idx));\n+\t  else\n+\t    emit_insn (GEN_FCN (icode) (x, op0, op1));\n \t  if (omode != V16QImode)\n \t    emit_move_insn (target, gen_lowpart (V16QImode, x));\n \t  return true;"}, {"sha": "eb45d193f66613af2fb52407747bf2dd03d78e93", "filename": "gcc/testsuite/gcc.target/powerpc/pr102868.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146b83e14a0a76a9ce8a4cb79997a078f437f779/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr102868.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146b83e14a0a76a9ce8a4cb79997a078f437f779/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr102868.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr102868.c?ref=146b83e14a0a76a9ce8a4cb79997a078f437f779", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#include <altivec.h>\n+vector float b = {0.0f, 0.0f, 0.0f, 0.0f};\n+\n+\n+vector float foo1 (vector float x)\n+{\n+  vector int c = {0, 1, 4, 5};\n+  return __builtin_shuffle (x, b, c);\n+}\n+\n+vector float foo2 (vector float x)\n+{\n+  vector int c = {2, 3, 4, 5};\n+  return __builtin_shuffle (x, b, c);\n+}\n+\n+vector float foo3 (vector float x)\n+{\n+  vector int c = {0, 1, 6, 7};\n+  return __builtin_shuffle (x, b, c);\n+}\n+\n+vector float foo4 (vector float x)\n+{\n+  vector int c = {2, 3, 6, 7};\n+  return __builtin_shuffle (x, b, c);\n+}\n+\n+vector unsigned char foo5 (vector unsigned char x)\n+{\n+  vector unsigned char c = {0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7};\n+  return __builtin_shuffle (x, c);\n+}\n+\n+vector unsigned char foo6 (vector unsigned char x)\n+{\n+  vector unsigned char c = {8, 9, 10, 11, 12, 13, 14, 15, 8, 9, 10, 11, 12, 13, 14, 15};\n+  return __builtin_shuffle (x, c);\n+}\n+\n+vector unsigned char foo7 (vector unsigned char x)\n+{\n+  vector unsigned char c = {8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7};\n+  return __builtin_shuffle (x, c);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 7 { target has_arch_pwr9 } } } */\n+/* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 7 { target { {! has_arch_pwr9} && be } } } } */\n+/* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 11 { target { {! has_arch_pwr9} && le } } } } */"}]}