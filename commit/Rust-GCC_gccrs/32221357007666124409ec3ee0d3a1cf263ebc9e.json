{"sha": "32221357007666124409ec3ee0d3a1cf263ebc9e", "node_id": "C_kwDOANBUbNoAKDMyMjIxMzU3MDA3NjY2MTI0NDA5ZWMzZWUwZDNhMWNmMjYzZWJjOWU", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-11-15T09:31:20Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-11-17T23:39:48Z"}, "message": "Fix PR tree-optimization/103228 and 103228: folding of (type) X op CST where type is a nop convert\n\nCurrently we fold (type) X op CST into (type) (X op ((type-x) CST)) when the conversion widens\nbut not when the conversion is a nop. For the same reason why we move the widening conversion\n(the possibility of removing an extra conversion), we should do the same if the conversion is a\nnop.\n\nCommitted as approved with the comment change.\n\n\tPR tree-optimization/103228\n\tPR tree-optimization/55177\n\ngcc/ChangeLog:\n\n\t* match.pd ((type) X bitop CST): Also do this\n\ttransformation for nop conversions.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/pr103228-1.c: New test.\n\t* gcc.dg/tree-ssa/pr55177-1.c: New test.", "tree": {"sha": "bc6326db16958cb79de85d32acaca9d9c34f05df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc6326db16958cb79de85d32acaca9d9c34f05df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32221357007666124409ec3ee0d3a1cf263ebc9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32221357007666124409ec3ee0d3a1cf263ebc9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32221357007666124409ec3ee0d3a1cf263ebc9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32221357007666124409ec3ee0d3a1cf263ebc9e/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e4a8656e818b669129a670057cbc21e5b723c18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e4a8656e818b669129a670057cbc21e5b723c18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e4a8656e818b669129a670057cbc21e5b723c18"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "77d848d631ecf56435c83f8f883997c5eb99718f", "filename": "gcc/match.pd", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32221357007666124409ec3ee0d3a1cf263ebc9e/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32221357007666124409ec3ee0d3a1cf263ebc9e/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=32221357007666124409ec3ee0d3a1cf263ebc9e", "patch": "@@ -1616,8 +1616,10 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t  Restrict it to GIMPLE to avoid endless recursions.  */\n        && (bitop != BIT_AND_EXPR || GIMPLE)\n        && (/* That's a good idea if the conversion widens the operand, thus\n-\t      after hoisting the conversion the operation will be narrower.  */\n-\t   TYPE_PRECISION (TREE_TYPE (@0)) < TYPE_PRECISION (type)\n+\t      after hoisting the conversion the operation will be narrower.\n+\t      It is also a good if the conversion is a nop as moves the\n+\t      conversion to one side; allowing for combining of the conversions.  */\n+\t   TYPE_PRECISION (TREE_TYPE (@0)) <= TYPE_PRECISION (type)\n \t   /* It's also a good idea if the conversion is to a non-integer\n \t      mode.  */\n \t   || GET_MODE_CLASS (TYPE_MODE (type)) != MODE_INT"}, {"sha": "a7539819cf206c2780b8f3d7685416077e2b95eb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr103228-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32221357007666124409ec3ee0d3a1cf263ebc9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103228-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32221357007666124409ec3ee0d3a1cf263ebc9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103228-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103228-1.c?ref=32221357007666124409ec3ee0d3a1cf263ebc9e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+int f(int a, int b)\n+{\n+  b|=1u;\n+  b|=2;\n+  return b;\n+}\n+/* { dg-final { scan-tree-dump-times \"\\\\\\| 3\" 1 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"\\\\\\| 1\" 0 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"\\\\\\| 2\" 0 \"optimized\"} } */"}, {"sha": "de1a264345cdd854dcd5e9253ccb703787e89259", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr55177-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32221357007666124409ec3ee0d3a1cf263ebc9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr55177-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32221357007666124409ec3ee0d3a1cf263ebc9e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr55177-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr55177-1.c?ref=32221357007666124409ec3ee0d3a1cf263ebc9e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+extern int x;\n+\n+void foo(void)\n+{\n+  int a = __builtin_bswap32(x);\n+  a &= 0x5a5b5c5d;\n+  x = __builtin_bswap32(a);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin_bswap32\" 0 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"& 1566333786\" 1 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"& 1515936861\" 0 \"optimized\"} } */"}]}