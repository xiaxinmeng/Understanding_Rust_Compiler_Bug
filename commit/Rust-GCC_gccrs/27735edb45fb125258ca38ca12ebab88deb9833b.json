{"sha": "27735edb45fb125258ca38ca12ebab88deb9833b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc3MzVlZGI0NWZiMTI1MjU4Y2EzOGNhMTJlYmFiODhkZWI5ODMzYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-05-16T17:07:07Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-05-16T17:07:07Z"}, "message": "README: Update for new files.\n\n        * soft-fp/README: Update for new files.\n        * soft-fp/floattisf.c: New file.\n        * soft-fp/floattidf.c: New file.\n        * soft-fp/floattitf.c: New file.\n        * soft-fp/floatuntisf.c: New file.\n        * soft-fp/floatuntidf.c: New file.\n        * soft-fp/floatuntitf.c: New file.\n        * soft-fp/fixsfti.c: New file.\n        * soft-fp/fixdfti.c: New file.\n        * soft-fp/fixtfti.c: New file.\n        * soft-fp/fixunssfti.c: New file.\n        * soft-fp/fixunsdfti.c: New file.\n        * soft-fp/fixunstfti.c: New file.\n        * soft-fp/extendxftf.c: New file.\n        * soft-fp/trunctfxf.c: New file.\n\n        * libgcc-std.ver (__extendxftf2): Added to GCC_4.3.0 section.\n        (__trunctfxf2): Ditto.\n\n        * config/i386/libgcc-x86_64-glibc.ver (__addtf3, __divtf3, __eqtf2,\n        __extenddftf2, __extendsftf2, __fixtfdi, __fixtfsi, __fixtfti,\n        __fixunstfdi, __fixunstfsi, __fixunstfti, __floatditf, __floatsitf,\n        __floattitf, __floatunditf, __floatunsitf, __floatuntitf, __getf2,\n        __letf2, __multf3, __negtf2, __subtf3, __trunctfdf2, __trunctfsf2,\n        __unordtf2): Exclude and add to GCC_4.3.0 section for x86_64 targets.\n\n        * config/i386/t-fprules-softfp64: New file.\n        * config/i386/sfp-machine.h: New file.\n        * config.gcc (x86_64-*-linux*, x86_64-*-kfreebsd*-gnu,\n        x86_64-*-knetbsd*-gnu): Add i386/t-fprules-softfp64\n        and soft-fp/t-softfp to tmake_file.\n        (i[34567]86-*-linux*, i[34567]86-*-kfreebsd*-gnu,\n        i[34567]86-*-knetbsd*-gnu): Ditto for --enable-targets=all.\n\n        * config/i386/t-linux64 (softfp_wrap_start): New.\n        (softfp_wrap_end): New.\n        * config/i386/i386.c (ix86_scalar_mode_supported): TFmode is\n        supported for TARGET_64BIT.\n\ntestsuite/ChangeLog:\n\n        * gcc.dg/torture/fp-int-convert-float128.c: Do not xfail for i?86-*-*\n        and x86_64-*-* targets.\n        * gcc.dg/torture/fp-int-convert-float128-timode.c: Ditto.\n\nFrom-SVN: r124775", "tree": {"sha": "d44fb0e52f28edf76cd70bbaeeac973a32148bca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d44fb0e52f28edf76cd70bbaeeac973a32148bca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27735edb45fb125258ca38ca12ebab88deb9833b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27735edb45fb125258ca38ca12ebab88deb9833b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27735edb45fb125258ca38ca12ebab88deb9833b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27735edb45fb125258ca38ca12ebab88deb9833b/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f99a36b8a0d4412276fa97f48f00145102c05f3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99a36b8a0d4412276fa97f48f00145102c05f3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99a36b8a0d4412276fa97f48f00145102c05f3e"}], "stats": {"total": 776, "additions": 768, "deletions": 8}, "files": [{"sha": "9c6808c4c7b8f4127df0477bc7fbf88b08fc459c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -1,3 +1,44 @@\n+2007-05-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* soft-fp/README: Update for new files.\n+\t* soft-fp/floattisf.c: New file.\n+\t* soft-fp/floattidf.c: New file.\n+\t* soft-fp/floattitf.c: New file.\n+\t* soft-fp/floatuntisf.c: New file.\n+\t* soft-fp/floatuntidf.c: New file.\n+\t* soft-fp/floatuntitf.c: New file.\n+\t* soft-fp/fixsfti.c: New file.\n+\t* soft-fp/fixdfti.c: New file.\n+\t* soft-fp/fixtfti.c: New file.\n+\t* soft-fp/fixunssfti.c: New file.\n+\t* soft-fp/fixunsdfti.c: New file.\n+\t* soft-fp/fixunstfti.c: New file.\n+\t* soft-fp/extendxftf.c: New file.\n+\t* soft-fp/trunctfxf.c: New file.\n+\n+\t* libgcc-std.ver (__extendxftf2): Added to GCC_4.3.0 section.\n+\t(__trunctfxf2): Ditto.\n+\n+\t* config/i386/libgcc-x86_64-glibc.ver (__addtf3, __divtf3, __eqtf2,\n+\t__extenddftf2, __extendsftf2, __fixtfdi, __fixtfsi, __fixtfti,\n+\t__fixunstfdi, __fixunstfsi, __fixunstfti, __floatditf, __floatsitf,\n+\t__floattitf, __floatunditf, __floatunsitf, __floatuntitf, __getf2,\n+\t__letf2, __multf3, __negtf2, __subtf3, __trunctfdf2, __trunctfsf2,\n+\t__unordtf2): Exclude and add to GCC_4.3.0 section for x86_64 targets.\n+\n+\t* config/i386/t-fprules-softfp64: New file.\n+\t* config/i386/sfp-machine.h: New file.\n+\t* config.gcc (x86_64-*-linux*, x86_64-*-kfreebsd*-gnu,\n+\tx86_64-*-knetbsd*-gnu): Add i386/t-fprules-softfp64\n+\tand soft-fp/t-softfp to tmake_file.\n+\t(i[34567]86-*-linux*, i[34567]86-*-kfreebsd*-gnu,\n+\ti[34567]86-*-knetbsd*-gnu): Ditto for --enable-targets=all.\n+\t\n+\t* config/i386/t-linux64 (softfp_wrap_start): New.\n+\t(softfp_wrap_end): New.\n+\t* config/i386/i386.c (ix86_scalar_mode_supported): TFmode is\n+\tsupported for TARGET_64BIT.\n+\n 2007-05-16  Rafael Avila de Espindola  <espindola@google.com>\n \n \t* c-common.c (c_common_signed_or_unsigned_type): Emulate "}, {"sha": "bf1d0b1f137b398c02796fcc562ca132b5d247d5", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -1127,7 +1127,7 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu)\n \t\tif test x$enable_targets = xall; then\n \t\t\ttm_file=\"${tm_file} i386/x86-64.h i386/linux64.h\"\n \t\t\ttm_defines=\"${tm_defines} TARGET_BI_ARCH=1\"\n-\t\t\ttmake_file=\"${tmake_file} i386/t-linux64\"\n+\t\t\ttmake_file=\"${tmake_file} i386/t-linux64 i386/t-fprules-softfp64 soft-fp/t-softfp\"\n \t\t\tneed_64bit_hwint=yes\n \t\t\t# FIXME: -m64 for i[34567]86-*-* should be allowed just\n \t\t\t# like -m32 for x86_64-*-*.\n@@ -1159,7 +1159,7 @@ x86_64-*-linux* | x86_64-*-kfreebsd*-gnu | x86_64-*-knetbsd*-gnu)\n \tx86_64-*-kfreebsd*-gnu) tm_file=\"${tm_file} kfreebsd-gnu.h\" ;;\n \tx86_64-*-knetbsd*-gnu) tm_file=\"${tm_file} knetbsd-gnu.h\" ;;\n \tesac\n-\ttmake_file=\"${tmake_file} i386/t-linux64 i386/t-crtpc i386/t-crtfm t-dfprules\"\n+\ttmake_file=\"${tmake_file} i386/t-linux64 i386/t-crtpc i386/t-crtfm i386/t-fprules-softfp64 soft-fp/t-softfp t-dfprules\"\n \t;;\n i[34567]86-*-gnu*)\n \t;;"}, {"sha": "3c9445affdbea46f2586b076ae07c484c215029e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -21164,6 +21164,8 @@ ix86_scalar_mode_supported_p (enum machine_mode mode)\n {\n   if (DECIMAL_FLOAT_MODE_P (mode))\n     return true;\n+  else if (mode == TFmode)\n+    return TARGET_64BIT;\n   else\n     return default_scalar_mode_supported_p (mode);\n }"}, {"sha": "fa5d1a6dba2fb12ff20a39d7b227c36eb9df3ac3", "filename": "gcc/config/i386/libgcc-x86_64-glibc.ver", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fi386%2Flibgcc-x86_64-glibc.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fi386%2Flibgcc-x86_64-glibc.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flibgcc-x86_64-glibc.ver?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -23,3 +23,64 @@ GLIBC_2.0 {\n   __register_frame_info_table\n }\n %endif\n+\n+% 128 bit long double support was introduced with GCC 4.3.0.\n+% These lines make the symbols to get a @@GCC_4.3.0 attached.\n+\n+%ifdef __x86_64__\n+%exclude {\n+  __addtf3\n+  __divtf3\n+  __eqtf2\n+  __extenddftf2\n+  __extendsftf2\n+  __fixtfdi\n+  __fixtfsi\n+  __fixtfti\n+  __fixunstfdi\n+  __fixunstfsi\n+  __fixunstfti\n+  __floatditf\n+  __floatsitf\n+  __floattitf\n+  __floatunditf\n+  __floatunsitf\n+  __floatuntitf\n+  __getf2\n+  __letf2\n+  __multf3\n+  __negtf2\n+  __subtf3\n+  __trunctfdf2\n+  __trunctfsf2\n+  __unordtf2\n+}\n+\n+GCC_4.3.0 {\n+  __addtf3\n+  __divtf3\n+  __eqtf2\n+  __extenddftf2\n+  __extendsftf2\n+  __fixtfdi\n+  __fixtfsi\n+  __fixtfti\n+  __fixunstfdi\n+  __fixunstfsi\n+  __fixunstfti\n+  __floatditf\n+  __floatsitf\n+  __floattitf\n+  __floatunditf\n+  __floatunsitf\n+  __floatuntitf\n+  __getf2\n+  __letf2\n+  __multf3\n+  __negtf2\n+  __subtf3\n+  __trunctfdf2\n+  __trunctfsf2\n+  __unordtf2\n+}\n+%endif"}, {"sha": "7aa1b81bf7cd374829e7de629ded73cc25b21f69", "filename": "gcc/config/i386/t-linux64", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fi386%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fi386%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-linux64?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -15,6 +15,9 @@ EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o \\\n \t\t     crtbeginT.o crtprec32.o crtprec64.o crtprec80.o \\\n \t\t     crtfastmath.o\n \n+softfp_wrap_start := '\\#ifdef __x86_64__'\n+softfp_wrap_end := '\\#endif'\n+\n # The pushl in CTOR initialization interferes with frame pointer elimination.\n # crtend*.o cannot be compiled without -fno-asynchronous-unwind-tables,\n # because then __FRAME_END__ might not be the last thing in .eh_frame"}, {"sha": "ea58753ec174bb482aad83bf394a652d50dbe33d", "filename": "gcc/config/soft-fp/README", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2FREADME?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -1,4 +1,5 @@\n-Except for t-softfp, the files in this directory are part of the GNU C\n-Library, not part of GCC.  As described at\n-<http://gcc.gnu.org/codingconventions.html>, changes should be made to\n-the GNU C Library and the changed files then imported into GCC.\n+Except for t-softfp, conversions involving TImode and conversions involving\n+XFmode, the files in this directory are part of the GNU C Library, not part\n+of GCC.  As described at <http://gcc.gnu.org/codingconventions.html>, changes\n+should be made to the GNU C Library and the changed files then imported\n+into GCC."}, {"sha": "af29a2ae9cc6904250e6d11db10da7db91a64a54", "filename": "gcc/config/soft-fp/extendxftf2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Fextendxftf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Fextendxftf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Fextendxftf2.c?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -0,0 +1,53 @@\n+/* Software floating-point emulation.\n+   Return a converted to IEEE quad\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Uros Bizjak (ubizjak@gmail.com).\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#include \"soft-fp.h\"\n+#include \"extended.h\"\n+#include \"quad.h\"\n+\n+TFtype __extendxftf2(XFtype a)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_E(A);\n+  FP_DECL_Q(R);\n+  TFtype r;\n+\n+  FP_INIT_ROUNDMODE;\n+  FP_UNPACK_RAW_E(A, a);\n+#if (2 * _FP_W_TYPE_SIZE) < _FP_FRACBITS_Q\n+  FP_EXTEND(Q,E,4,4,R,A);\n+#else\n+  FP_EXTEND(Q,E,2,2,R,A);\n+#endif\n+  FP_PACK_RAW_Q(r, R);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r;\n+}"}, {"sha": "6d06514e22e09b80bb88a78b24efe841bbbc74d6", "filename": "gcc/config/soft-fp/fixdfti.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffixdfti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffixdfti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Ffixdfti.c?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert IEEE double to 128bit signed integer\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Uros Bizjak (ubizjak@gmail.com).\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#include \"soft-fp.h\"\n+#include \"double.h\"\n+\n+TItype __fixdfti(TFtype a)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_D(A);\n+  UTItype r;\n+\n+  FP_UNPACK_RAW_D(A, a);\n+  FP_TO_INT_D(r, A, TI_BITS, 1);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r;\n+}"}, {"sha": "779628eb403e378bbe965f51ed98fa83f2dd6d66", "filename": "gcc/config/soft-fp/fixsfti.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffixsfti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffixsfti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Ffixsfti.c?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert IEEE single to 128bit signed integer\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Uros Bizjak (ubizjak@gmail.com).\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#include \"soft-fp.h\"\n+#include \"single.h\"\n+\n+TItype __fixsfti(SFtype a)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_S(A);\n+  UTItype r;\n+\n+  FP_UNPACK_RAW_S(A, a);\n+  FP_TO_INT_S(r, A, TI_BITS, 1);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r;\n+}"}, {"sha": "8311ea5a72cf8185e7cd0afb3d447ba83b9e38a9", "filename": "gcc/config/soft-fp/fixtfti.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffixtfti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffixtfti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Ffixtfti.c?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert IEEE quad to 128bit signed integer\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Uros Bizjak (ubizjak@gmail.com).\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#include \"soft-fp.h\"\n+#include \"quad.h\"\n+\n+TItype __fixtfti(TFtype a)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_Q(A);\n+  UTItype r;\n+\n+  FP_UNPACK_RAW_Q(A, a);\n+  FP_TO_INT_Q(r, A, TI_BITS, 1);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r;\n+}"}, {"sha": "48c41d4ac9921c71309e1ddf3b7cac3e451e0aff", "filename": "gcc/config/soft-fp/fixunsdfti.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffixunsdfti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffixunsdfti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Ffixunsdfti.c?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert IEEE double to 128bit unsigned integer\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Uros Bizjak (ubizjak@gmail.com).\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#include \"soft-fp.h\"\n+#include \"double.h\"\n+\n+UTItype __fixunsdfti(DFtype a)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_D(A);\n+  UTItype r;\n+\n+  FP_UNPACK_RAW_D(A, a);\n+  FP_TO_INT_D(r, A, TI_BITS, 0);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r;\n+}"}, {"sha": "89bcedbadc369499e95081e2a1010b0458c327f1", "filename": "gcc/config/soft-fp/fixunssfti.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffixunssfti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffixunssfti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Ffixunssfti.c?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert IEEE single to 128bit unsigned integer\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Uros Bizjak (ubizjak@gmail.com).\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#include \"soft-fp.h\"\n+#include \"single.h\"\n+\n+UTItype __fixunssfti(SFtype a)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_S(A);\n+  UTItype r;\n+\n+  FP_UNPACK_RAW_S(A, a);\n+  FP_TO_INT_S(r, A, TI_BITS, 0);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r;\n+}"}, {"sha": "f62bd505c64be299b5f9e378ecae935b8daa3a57", "filename": "gcc/config/soft-fp/fixunstfti.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffixunstfti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffixunstfti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Ffixunstfti.c?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert IEEE quad to 128bit unsigned integer\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Uros Bizjak (ubizjak@gmail.com).\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#include \"soft-fp.h\"\n+#include \"quad.h\"\n+\n+UTItype __fixunstfti(TFtype a)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_Q(A);\n+  UTItype r;\n+\n+  FP_UNPACK_RAW_Q(A, a);\n+  FP_TO_INT_Q(r, A, TI_BITS, 0);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r;\n+}"}, {"sha": "14b6ea36a7abb9bb7046fa2354a56702a5a70de5", "filename": "gcc/config/soft-fp/floattidf.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffloattidf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffloattidf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Ffloattidf.c?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert a 128bit signed integer to IEEE double\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Uros Bizjak (ubizjak@gmail.com).\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#include \"soft-fp.h\"\n+#include \"double.h\"\n+\n+DFtype __floattidf(TItype i)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_D(A);\n+  DFtype a;\n+\n+  FP_FROM_INT_D(A, i, TI_BITS, UTItype);\n+  FP_PACK_RAW_D(a, A);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return a;\n+}"}, {"sha": "475cafa2770259ec42fac6b4e3632e42591951e8", "filename": "gcc/config/soft-fp/floattisf.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffloattisf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffloattisf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Ffloattisf.c?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert a 128bit signed integer to IEEE single\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Uros Bizjak (ubizjak@gmail.com).\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#include \"soft-fp.h\"\n+#include \"single.h\"\n+\n+SFtype __floattisf(TItype i)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_S(A);\n+  SFtype a;\n+\n+  FP_FROM_INT_S(A, i, TI_BITS, UTItype);\n+  FP_PACK_RAW_S(a, A);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return a;\n+}"}, {"sha": "12bbb2772c238b925b23310f413408ed6c1c10a6", "filename": "gcc/config/soft-fp/floattitf.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffloattitf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffloattitf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Ffloattitf.c?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert a 128bit signed integer to IEEE quad\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Uros Bizjak (ubizjak@gmail.com).\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#include \"soft-fp.h\"\n+#include \"quad.h\"\n+\n+TFtype __floattitf(TItype i)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_Q(A);\n+  TFtype a;\n+\n+  FP_FROM_INT_Q(A, i, TI_BITS, UTItype);\n+  FP_PACK_RAW_Q(a, A);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return a;\n+}"}, {"sha": "db1fe1aacb6edc2a1dcfa2880becd233b6510988", "filename": "gcc/config/soft-fp/floatuntidf.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffloatuntidf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffloatuntidf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Ffloatuntidf.c?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert a 128bit unsigned integer to IEEE double\n+   Copyright (C) 1997,1999, 2006 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Uros Bizjak (ubizjak@gmail.com).\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#include \"soft-fp.h\"\n+#include \"double.h\"\n+\n+DFtype __floatuntidf(UTItype i)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_D(A);\n+  DFtype a;\n+\n+  FP_FROM_INT_D(A, i, TI_BITS, UTItype);\n+  FP_PACK_RAW_D(a, A);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return a;\n+}"}, {"sha": "11ad6430e2548120a99eb8ec5d5b0edbf82385d7", "filename": "gcc/config/soft-fp/floatuntisf.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffloatuntisf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffloatuntisf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Ffloatuntisf.c?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert a 128bit unsigned integer to IEEE single\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Uros Bizjak (ubizjak@gmail.com).\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#include \"soft-fp.h\"\n+#include \"single.h\"\n+\n+SFtype __floatundisf(UTItype i)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_S(A);\n+  SFtype a;\n+\n+  FP_FROM_INT_S(A, i, TI_BITS, UTItype);\n+  FP_PACK_RAW_S(a, A);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return a;\n+}"}, {"sha": "8d66901264439948659d3883c543447bce97ea83", "filename": "gcc/config/soft-fp/floatuntitf.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffloatuntitf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ffloatuntitf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Ffloatuntitf.c?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert a 128bit unsigned integer to IEEE quad\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Uros Bizjak (ubizjak@gmail.com).\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#include \"soft-fp.h\"\n+#include \"quad.h\"\n+\n+TFtype __floatuntitf(UTItype i)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_Q(A);\n+  TFtype a;\n+\n+  FP_FROM_INT_Q(A, i, TI_BITS, UTItype);\n+  FP_PACK_RAW_Q(a, A);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return a;\n+}"}, {"sha": "50d60bc5d53f261e65edb71da3771236765e012a", "filename": "gcc/config/soft-fp/trunctfxf2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ftrunctfxf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Fconfig%2Fsoft-fp%2Ftrunctfxf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Ftrunctfxf2.c?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -0,0 +1,53 @@\n+/* Software floating-point emulation.\n+   Truncate IEEE quad into IEEE extended\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Uros Bizjak (ubizjak@gmail.com).\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#include \"soft-fp.h\"\n+#include \"extended.h\"\n+#include \"quad.h\"\n+\n+XFtype __trunctfxf2(TFtype a)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_Q(A);\n+  FP_DECL_E(R);\n+  XFtype r;\n+\n+  FP_INIT_ROUNDMODE;\n+  FP_UNPACK_SEMIRAW_Q(A, a);\n+#if (2 * _FP_W_TYPE_SIZE) < _FP_FRACBITS_Q\n+  FP_TRUNC(E,Q,4,4,R,A);\n+#else\n+  FP_TRUNC(E,Q,2,2,R,A);\n+#endif\n+  FP_PACK_SEMIRAW_E(r, R);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r;\n+}"}, {"sha": "3dcca01f48fefb39a28ee0f47771d2d0b18cfc6f", "filename": "gcc/libgcc-std.ver", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Flibgcc-std.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Flibgcc-std.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc-std.ver?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -283,4 +283,6 @@ GCC_4.3.0 {\n   __emutls_get_address\n   __emutls_register_common\n   __ffssi2\n+  __extendxftf2\n+  __trunctfxf2\n }"}, {"sha": "8d4c6ca204c49bcd58bcea2565cd473d6d91f36c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -1,3 +1,9 @@\n+2007-05-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.dg/torture/fp-int-convert-float128.c: Do not xfail for i?86-*-*\n+\tand x86_64-*-* targets.\n+\t* gcc.dg/torture/fp-int-convert-float128-timode.c: Ditto.\n+\n 2007-05-16  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/18769"}, {"sha": "965e728bec249c824c07c68de5343129a2cb3c70", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-float128-timode.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128-timode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128-timode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128-timode.c?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -1,7 +1,6 @@\n /* Test floating-point conversions.  __float128 type with TImode.  */\n /* Origin: Joseph Myers <joseph@codesourcery.com> */\n /* { dg-do run { target { ia64-*-* || { { i?86-*-* x86_64-*-*} && lp64 } } } } */\n-/* { dg-xfail-if \"\" { i?86-*-* x86_64-*-* } { \"*\" } { \"\" } } */\n /* { dg-xfail-if \"\" { ia64-*-linux* } { \"*\" } { \"\" } } */\n /* { dg-options \"\" } */\n "}, {"sha": "24decb86fdfb926a4f5b23d34746460c37a7683a", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-float128.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27735edb45fb125258ca38ca12ebab88deb9833b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128.c?ref=27735edb45fb125258ca38ca12ebab88deb9833b", "patch": "@@ -1,7 +1,6 @@\n /* Test floating-point conversions.  __float128 type.  */\n /* Origin: Joseph Myers <joseph@codesourcery.com> */\n /* { dg-do run { target { ia64-*-* || { { i?86-*-* x86_64-*-*} && lp64 } } } } */\n-/* { dg-xfail-if \"\" { i?86-*-* x86_64-*-* } { \"*\" } { \"\" } } */\n /* { dg-options \"\" } */\n \n #include \"fp-int-convert.h\""}]}