{"sha": "a9a51750b98cbff008e5388946ad65bd221fe079", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlhNTE3NTBiOThjYmZmMDA4ZTUzODg5NDZhZDY1YmQyMjFmZTA3OQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2009-06-18T01:40:44Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-06-18T01:40:44Z"}, "message": "check_construct_destroy.h: New.\n\n2009-06-17  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/23_containers/list/check_construct_destroy.h: New.\n\tMove test logic here.\n\t* testsuite/23_containers/list/moveable.h: Same.\n\t* testsuite/23_containers/list/modifiers/insert/25288.h: Same.\n\t* testsuite/23_containers/list/modifiers/1.h: Same.\n\t* testsuite/23_containers/list/modifiers/2.h: Same.\n\t* testsuite/23_containers/list/modifiers/3.h: Same.\n\t* testsuite/23_containers/list/modifiers/swap/1.h: Same.\n\t* testsuite/23_containers/list/modifiers/swap/2.h: Same.\n\t* testsuite/23_containers/list/modifiers/swap/3.h: Same.\n\t* testsuite/23_containers/list/operations/1.h: Same.\n\t* testsuite/23_containers/list/operations/2.h: Same.\n\t* testsuite/23_containers/list/operations/3.h: Same.\n\t* testsuite/23_containers/list/operations/4.h: Same.\n\t* testsuite/23_containers/list/operations/5.h: Same.\n\t* testsuite/23_containers/list/capacity/1.h: Same.\n\t* testsuite/23_containers/list/init-list.h: Same.\n\t* testsuite/23_containers/list/cons/1.h: Same.\n\t* testsuite/23_containers/list/cons/2.h: Same.\n\t* testsuite/23_containers/list/cons/3.h: Same.\n\t* testsuite/23_containers/list/cons/4.h: Same.\n\t* testsuite/23_containers/list/cons/5.h: Same.\n\t* testsuite/23_containers/list/cons/6.h: Same.\n\t* testsuite/23_containers/list/cons/7.h: Same.\n\t* testsuite/23_containers/list/cons/8.h: Same.\n\t* testsuite/23_containers/list/cons/9.h: Same.\n\t* testsuite/23_containers/list/cons/clear_allocator.h: Same.\n\t* testsuite/23_containers/list/modifiers/insert/25288.cc: Include test\n\theader.\n\t* testsuite/23_containers/list/modifiers/1.cc: Same.\n\t* testsuite/23_containers/list/modifiers/2.cc: Same.\n\t* testsuite/23_containers/list/modifiers/3.cc: Same.\n\t* testsuite/23_containers/list/modifiers/swap/1.cc: Same.\n\t* testsuite/23_containers/list/modifiers/swap/2.cc: Same.\n\t* testsuite/23_containers/list/modifiers/swap/3.cc: Same.\n\t* testsuite/23_containers/list/operations/1.cc: Same.\n\t* testsuite/23_containers/list/operations/2.cc: Same.\n\t* testsuite/23_containers/list/operations/3.cc: Same.\n\t* testsuite/23_containers/list/operations/4.cc: Same.\n\t* testsuite/23_containers/list/operations/5.cc: Same.\n\t* testsuite/23_containers/list/capacity/1.cc: Same.\n\t* testsuite/23_containers/list/init-list.cc: Same.\n\t* testsuite/23_containers/list/cons/1.cc: Same.\n\t* testsuite/23_containers/list/cons/2.cc: Same.\n\t* testsuite/23_containers/list/cons/3.cc: Same.\n\t* testsuite/23_containers/list/cons/4.cc: Same.\n\t* testsuite/23_containers/list/cons/5.cc: Same.\n\t* testsuite/23_containers/list/cons/6.cc: Same.\n\t* testsuite/23_containers/list/cons/7.cc: Same.\n\t* testsuite/23_containers/list/cons/8.cc: Same.\n\t* testsuite/23_containers/list/cons/9.cc: Same.\n\t* testsuite/23_containers/list/cons/clear_allocator.cc: Same.\n\t* testsuite/23_containers/list/check_construct_destroy.cc: Same.\n\t* testsuite/23_containers/list/moveable.cc: Same.\n\nFrom-SVN: r148644", "tree": {"sha": "95f1e99a7847a263518a24056b488079730a1618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95f1e99a7847a263518a24056b488079730a1618"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9a51750b98cbff008e5388946ad65bd221fe079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9a51750b98cbff008e5388946ad65bd221fe079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9a51750b98cbff008e5388946ad65bd221fe079", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9a51750b98cbff008e5388946ad65bd221fe079/comments", "author": null, "committer": null, "parents": [{"sha": "6bec4135eb709bc8288f23d6e423dd99f7a12d59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bec4135eb709bc8288f23d6e423dd99f7a12d59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bec4135eb709bc8288f23d6e423dd99f7a12d59"}], "stats": {"total": 3698, "additions": 2116, "deletions": 1582}, "files": [{"sha": "29747b18c8e87ee517f920974a9a8d49208d75ce", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -1,3 +1,60 @@\n+2009-06-17  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/23_containers/list/check_construct_destroy.h: New.\n+\tMove test logic here.\n+\t* testsuite/23_containers/list/moveable.h: Same.\n+\t* testsuite/23_containers/list/modifiers/insert/25288.h: Same.\n+\t* testsuite/23_containers/list/modifiers/1.h: Same.\n+\t* testsuite/23_containers/list/modifiers/2.h: Same.\n+\t* testsuite/23_containers/list/modifiers/3.h: Same.\n+\t* testsuite/23_containers/list/modifiers/swap/1.h: Same.\n+\t* testsuite/23_containers/list/modifiers/swap/2.h: Same.\n+\t* testsuite/23_containers/list/modifiers/swap/3.h: Same.\n+\t* testsuite/23_containers/list/operations/1.h: Same.\n+\t* testsuite/23_containers/list/operations/2.h: Same.\n+\t* testsuite/23_containers/list/operations/3.h: Same.\n+\t* testsuite/23_containers/list/operations/4.h: Same.\n+\t* testsuite/23_containers/list/operations/5.h: Same.\n+\t* testsuite/23_containers/list/capacity/1.h: Same.\n+\t* testsuite/23_containers/list/init-list.h: Same.\n+\t* testsuite/23_containers/list/cons/1.h: Same.\n+\t* testsuite/23_containers/list/cons/2.h: Same.\n+\t* testsuite/23_containers/list/cons/3.h: Same.\n+\t* testsuite/23_containers/list/cons/4.h: Same.\n+\t* testsuite/23_containers/list/cons/5.h: Same.\n+\t* testsuite/23_containers/list/cons/6.h: Same.\n+\t* testsuite/23_containers/list/cons/7.h: Same.\n+\t* testsuite/23_containers/list/cons/8.h: Same.\n+\t* testsuite/23_containers/list/cons/9.h: Same.\n+\t* testsuite/23_containers/list/cons/clear_allocator.h: Same.\n+\t* testsuite/23_containers/list/modifiers/insert/25288.cc: Include test\n+\theader.\n+\t* testsuite/23_containers/list/modifiers/1.cc: Same.\n+\t* testsuite/23_containers/list/modifiers/2.cc: Same.\n+\t* testsuite/23_containers/list/modifiers/3.cc: Same.\n+\t* testsuite/23_containers/list/modifiers/swap/1.cc: Same.\n+\t* testsuite/23_containers/list/modifiers/swap/2.cc: Same.\n+\t* testsuite/23_containers/list/modifiers/swap/3.cc: Same.\n+\t* testsuite/23_containers/list/operations/1.cc: Same.\n+\t* testsuite/23_containers/list/operations/2.cc: Same.\n+\t* testsuite/23_containers/list/operations/3.cc: Same.\n+\t* testsuite/23_containers/list/operations/4.cc: Same.\n+\t* testsuite/23_containers/list/operations/5.cc: Same.\n+\t* testsuite/23_containers/list/capacity/1.cc: Same.\n+\t* testsuite/23_containers/list/init-list.cc: Same.\n+\t* testsuite/23_containers/list/cons/1.cc: Same.\n+\t* testsuite/23_containers/list/cons/2.cc: Same.\n+\t* testsuite/23_containers/list/cons/3.cc: Same.\n+\t* testsuite/23_containers/list/cons/4.cc: Same.\n+\t* testsuite/23_containers/list/cons/5.cc: Same.\n+\t* testsuite/23_containers/list/cons/6.cc: Same.\n+\t* testsuite/23_containers/list/cons/7.cc: Same.\n+\t* testsuite/23_containers/list/cons/8.cc: Same.\n+\t* testsuite/23_containers/list/cons/9.cc: Same.\n+\t* testsuite/23_containers/list/cons/clear_allocator.cc: Same.\n+\t* testsuite/23_containers/list/check_construct_destroy.cc: Same.\n+\t* testsuite/23_containers/list/moveable.cc: Same.\n+\n 2009-06-17  Tom Tromey  <tromey@redhat.com>\n \n \t* python/hook.in: Do not fail when there is no current objfile."}, {"sha": "cb6c29ac8d1d615d8da6d18ea914fc22452d709c", "filename": "libstdc++-v3/testsuite/23_containers/list/capacity/1.cc", "status": "modified", "additions": 1, "deletions": 44, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F1.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,51 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.2 list capacity [lib.list.capacity]\n-\n+#include \"1.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-\n-// This test verifies the following.\n-//\n-// 23.2.2       bool empty() const\n-// 23.2.2       size_type size() const\n-// 23.2.2       iterator begin()\n-// 23.2.2       iterator end()\n-// 23.2.2.3     void push_back(const T&)\n-// 23.2.2       size_type max_size() const\n-// 23.2.2.2     void resize(size_type s, T c = T())\n-//\n-template<typename _Tp>\n-void\n-capacity01()\n-{\n-  bool test __attribute__((unused)) = true;\n-  typedef _Tp list_type;\n-  typedef typename list_type::iterator iterator_type;\n-\n-  list_type list0101;\n-  VERIFY(list0101.empty());\n-  VERIFY(list0101.size() == 0);\n-\n-  list0101.push_back(1);\n-  VERIFY(!list0101.empty());\n-  VERIFY(list0101.size() == 1);\n-\n-  list0101.resize(3, 2);\n-  VERIFY(!list0101.empty());\n-  VERIFY(list0101.size() == 3);\n-\n-  iterator_type i = list0101.begin();\n-  VERIFY(*i == 1); ++i;\n-  VERIFY(*i == 2); ++i;\n-  VERIFY(*i == 2); ++i;\n-  VERIFY(i == list0101.end());\n-\n-  list0101.resize(0);\n-  VERIFY(list0101.empty());\n-  VERIFY(list0101.size() == 0);\n-}\n \n int\n main()"}, {"sha": "4a2f2bc06a25041167c9f2da61f6e0e59ee16bd4", "filename": "libstdc++-v3/testsuite/23_containers/list/capacity/1.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F1.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,61 @@\n+// Copyright (C) 2001, 2004, 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.2 list capacity [lib.list.capacity]\n+\n+#include <testsuite_hooks.h>\n+\n+// This test verifies the following.\n+//\n+// 23.2.2       bool empty() const\n+// 23.2.2       size_type size() const\n+// 23.2.2       iterator begin()\n+// 23.2.2       iterator end()\n+// 23.2.2.3     void push_back(const T&)\n+// 23.2.2       size_type max_size() const\n+// 23.2.2.2     void resize(size_type s, T c = T())\n+//\n+template<typename _Tp>\n+void\n+capacity01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator_type;\n+\n+  list_type list0101;\n+  VERIFY(list0101.empty());\n+  VERIFY(list0101.size() == 0);\n+\n+  list0101.push_back(1);\n+  VERIFY(!list0101.empty());\n+  VERIFY(list0101.size() == 1);\n+\n+  list0101.resize(3, 2);\n+  VERIFY(!list0101.empty());\n+  VERIFY(list0101.size() == 3);\n+\n+  iterator_type i = list0101.begin();\n+  VERIFY(*i == 1); ++i;\n+  VERIFY(*i == 2); ++i;\n+  VERIFY(*i == 2); ++i;\n+  VERIFY(i == list0101.end());\n+\n+  list0101.resize(0);\n+  VERIFY(list0101.empty());\n+  VERIFY(list0101.size() == 0);\n+}"}, {"sha": "31dacb592537899d0901107c1db01022c226f329", "filename": "libstdc++-v3/testsuite/23_containers/list/check_construct_destroy.cc", "status": "modified", "additions": 3, "deletions": 61, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcheck_construct_destroy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcheck_construct_destroy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcheck_construct_destroy.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -18,70 +18,12 @@\n // <http://www.gnu.org/licenses/>.\n //\n \n+#include \"check_construct_destroy.h\"\n #include <list>\n-#include <iterator>\n-#include <testsuite_allocator.h>\n-\n-\n-template<typename _Tp>\n-bool\n-construct_destroy()\n-{\n-  typedef _Tp list_type;\n-  typedef typename list_type::iterator iterator_type;\n-\n-  using namespace __gnu_test;\n-  const int arr10[10] = { 2, 4, 1, 7, 3, 8, 10, 5, 9, 6 };\n-  bool ok = true;\n-\n-  tracker_allocator_counter::reset();\n-  {\n-    list_type c;\n-    ok = check_construct_destroy(\"empty container\", 0, 0) && ok;\n-  }\n-  ok = check_construct_destroy(\"empty container\", 0, 0) && ok;\n-\n-\n-  tracker_allocator_counter::reset();\n-  {\n-    list_type c(arr10, arr10 + 10);\n-    ok = check_construct_destroy(\"Construct from range\", 10, 0) && ok;\n-  }\n-  ok = check_construct_destroy(\"Construct from range\", 10, 10) && ok;\n-\n-  {\n-    list_type c(arr10, arr10 + 10);\n-    tracker_allocator_counter::reset();\n-    c.insert(c.begin(), arr10[0]);\n-    ok = check_construct_destroy(\"Insert element\", 1, 0) && ok;\n-  }\n-  ok = check_construct_destroy(\"Insert element\", 1, 11) && ok;\n-\n-  {\n-    list_type c(arr10, arr10 + 10);\n-    tracker_allocator_counter::reset();\n-    iterator_type i5 = c.begin();\n-    std::advance(i5, 5);\n-    c.insert(i5, arr10, arr10+3);\n-    ok = check_construct_destroy(\"Insert short range\", 3, 0) && ok;\n-  }\n-  ok = check_construct_destroy(\"Insert short range\", 3, 13) && ok;\n-\n-  {\n-    list_type c(arr10, arr10 + 10);\n-    tracker_allocator_counter::reset();\n-    iterator_type i7 = c.begin();\n-    std::advance(i7, 5);\n-    c.insert(i7, arr10, arr10+10);\n-    ok = check_construct_destroy(\"Insert long range\", 10, 0) && ok;\n-  }\n-  ok = check_construct_destroy(\"Insert long range\", 10, 20) && ok;\n-\n-  return ok ? 0 : 1;\n-}\n \n int main()\n {\n-  construct_destroy<std::list<int, __gnu_test::tracker_allocator<int> > >();\n+  typedef __gnu_test::tracker_allocator<int> allocator_type;\n+  construct_destroy<std::list<int, allocator_type> >();\n   return 0;\n }"}, {"sha": "14da42dc875ca8eb3f5e21365b3099df57c762fb", "filename": "libstdc++-v3/testsuite/23_containers/list/check_construct_destroy.h", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcheck_construct_destroy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcheck_construct_destroy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcheck_construct_destroy.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,79 @@\n+// 2004-07-26  Matt Austern  <austern@apple.com>\n+//\n+// Copyright (C) 2003, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+#include <iterator>\n+#include <testsuite_allocator.h>\n+\n+template<typename _Tp>\n+bool\n+construct_destroy()\n+{\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator_type;\n+\n+  using namespace __gnu_test;\n+  const int arr10[10] = { 2, 4, 1, 7, 3, 8, 10, 5, 9, 6 };\n+  bool ok = true;\n+\n+  tracker_allocator_counter::reset();\n+  {\n+    list_type c;\n+    ok = check_construct_destroy(\"empty container\", 0, 0) && ok;\n+  }\n+  ok = check_construct_destroy(\"empty container\", 0, 0) && ok;\n+\n+\n+  tracker_allocator_counter::reset();\n+  {\n+    list_type c(arr10, arr10 + 10);\n+    ok = check_construct_destroy(\"Construct from range\", 10, 0) && ok;\n+  }\n+  ok = check_construct_destroy(\"Construct from range\", 10, 10) && ok;\n+\n+  {\n+    list_type c(arr10, arr10 + 10);\n+    tracker_allocator_counter::reset();\n+    c.insert(c.begin(), arr10[0]);\n+    ok = check_construct_destroy(\"Insert element\", 1, 0) && ok;\n+  }\n+  ok = check_construct_destroy(\"Insert element\", 1, 11) && ok;\n+\n+  {\n+    list_type c(arr10, arr10 + 10);\n+    tracker_allocator_counter::reset();\n+    iterator_type i5 = c.begin();\n+    std::advance(i5, 5);\n+    c.insert(i5, arr10, arr10+3);\n+    ok = check_construct_destroy(\"Insert short range\", 3, 0) && ok;\n+  }\n+  ok = check_construct_destroy(\"Insert short range\", 3, 13) && ok;\n+\n+  {\n+    list_type c(arr10, arr10 + 10);\n+    tracker_allocator_counter::reset();\n+    iterator_type i7 = c.begin();\n+    std::advance(i7, 5);\n+    c.insert(i7, arr10, arr10+10);\n+    ok = check_construct_destroy(\"Insert long range\", 10, 0) && ok;\n+  }\n+  ok = check_construct_destroy(\"Insert long range\", 10, 20) && ok;\n+\n+  return ok ? 0 : 1;\n+}"}, {"sha": "da469ebb194a1a66152d9bd1cd68b3f7a1499987", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/1.cc", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F1.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,55 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.1 list constructors, copy, and assignment\n-\n+#include \"1.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-\n-// A nontrivial type.\n-template<typename T>\n-  struct A { };\n-\n-// Another nontrivial type\n-struct B { };\n-\n-// Default constructor, basic properties\n-//\n-// This test verifies the following.\n-// 23.2.2.1     explicit list(const a& = Allocator())\n-// 23.1 (7)     iterator behaviour of empty containers\n-// 23.2.2       iterator begin()\n-// 23.2.2       iterator end()\n-// 23.2.2       size_type size() const\n-// 23.2.2\texistence of required typedefs\n-//\n-template<typename _Tp>\n-void\n-cons01()\n-{\n-  bool test __attribute__((unused)) = true;\n-  typedef _Tp list_type;\n-\n-  list_type list0101;\n-  VERIFY(list0101.begin() == list0101.end());\n-  VERIFY(list0101.size() == 0);\n-\n-  // check type definitions -- will fail compile if missing\n-  typedef typename list_type::reference              reference;\n-  typedef typename list_type::const_reference        const_reference;\n-  typedef typename list_type::iterator               iterator;\n-  typedef typename list_type::const_iterator         const_iterator;\n-  typedef typename list_type::size_type              size_type;\n-  typedef typename list_type::difference_type        difference_type;\n-  typedef typename list_type::value_type             value_type;\n-  typedef typename list_type::allocator_type         allocator_type;\n-  typedef typename list_type::pointer                pointer;\n-  typedef typename list_type::const_pointer          const_pointer;\n-  typedef typename list_type::reverse_iterator       reverse_iterator;\n-  typedef typename list_type::const_reverse_iterator const_reverse_iterator;\n-\n-  // allocator checks?\n-}\n \n int main()\n {"}, {"sha": "2aa48be914662ceb8e675d578125e7e212268f5e", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/1.h", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F1.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2001, 2004, 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.1 list constructors, copy, and assignment\n+\n+#include <testsuite_hooks.h>\n+\n+// A nontrivial type.\n+template<typename T>\n+  struct A { };\n+\n+// Another nontrivial type\n+struct B { };\n+\n+// Default constructor, basic properties\n+//\n+// This test verifies the following.\n+// 23.2.2.1     explicit list(const a& = Allocator())\n+// 23.1 (7)     iterator behaviour of empty containers\n+// 23.2.2       iterator begin()\n+// 23.2.2       iterator end()\n+// 23.2.2       size_type size() const\n+// 23.2.2\texistence of required typedefs\n+//\n+template<typename _Tp>\n+void\n+cons01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+\n+  list_type list0101;\n+  VERIFY(list0101.begin() == list0101.end());\n+  VERIFY(list0101.size() == 0);\n+\n+  // check type definitions -- will fail compile if missing\n+  typedef typename list_type::reference              reference;\n+  typedef typename list_type::const_reference        const_reference;\n+  typedef typename list_type::iterator               iterator;\n+  typedef typename list_type::const_iterator         const_iterator;\n+  typedef typename list_type::size_type              size_type;\n+  typedef typename list_type::difference_type        difference_type;\n+  typedef typename list_type::value_type             value_type;\n+  typedef typename list_type::allocator_type         allocator_type;\n+  typedef typename list_type::pointer                pointer;\n+  typedef typename list_type::const_pointer          const_pointer;\n+  typedef typename list_type::reverse_iterator       reverse_iterator;\n+  typedef typename list_type::const_reverse_iterator const_reverse_iterator;\n+}"}, {"sha": "86c59f383f80bb25f4e569cd66d74ca390d21147", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/2.cc", "status": "modified", "additions": 1, "deletions": 60, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F2.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,67 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.1 list constructors, copy, and assignment\n-\n+#include \"2.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-\n-// A nontrivial type.\n-template<typename T>\n-  struct A { };\n-\n-// Another nontrivial type\n-struct B { };\n-\n-// Fill constructor\n-//\n-// This test verifies the following.\n-// 23.2.2.1 explicit list(size_type n, const T& v = T(), const a& = Allocator())\n-// 23.2.2   const_iterator begin() const\n-// 23.2.2   const_iterator end() const\n-// 23.2.2   size_type size() const\n-//\n-template<typename _Tp>\n-void\n-cons021()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const std::size_t LIST_SIZE = 5;\n-  const int INIT_VALUE = 7;\n-  std::size_t count;\n-\n-  typedef _Tp list_type;\n-  typedef typename list_type::const_iterator const_iterator;\n-  const_iterator i;\n-\n-  // default value\n-  list_type list0202(LIST_SIZE);\n-  for (i = list0202.begin(), count = 0;\n-       i != list0202.end();\n-       ++i, ++count)\n-    VERIFY(*i == 0);\n-  VERIFY(count == LIST_SIZE);\n-  VERIFY(list0202.size() == LIST_SIZE);\n-\n-  // explicit value\n-  list_type list0203(LIST_SIZE, INIT_VALUE);\n-  for (i = list0203.begin(), count = 0;\n-       i != list0203.end();\n-       ++i, ++count)\n-    VERIFY(*i == INIT_VALUE);\n-  VERIFY(count == LIST_SIZE);\n-  VERIFY(list0203.size() == LIST_SIZE);\n-}\n-\n-template<typename _Tp>\n-void\n-cons022()\n-{\n-  // nontrivial value_type\n-  typedef _Tp list_type;\n-  const std::size_t LIST_SIZE = 5;\n-  list_type list0201(LIST_SIZE);\n-}\n \n int main()\n {"}, {"sha": "eb32896e79a5fa13758cd8c94c8182c31d18e173", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/2.h", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F2.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,77 @@\n+// Copyright (C) 2001, 2004, 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.1 list constructors, copy, and assignment\n+\n+#include <testsuite_hooks.h>\n+\n+// A nontrivial type.\n+template<typename T>\n+  struct A { };\n+\n+// Another nontrivial type\n+struct B { };\n+\n+// Fill constructor\n+//\n+// This test verifies the following.\n+// 23.2.2.1 explicit list(size_type n, const T& v = T(), const a& = Allocator())\n+// 23.2.2   const_iterator begin() const\n+// 23.2.2   const_iterator end() const\n+// 23.2.2   size_type size() const\n+//\n+template<typename _Tp>\n+void\n+cons021()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const std::size_t LIST_SIZE = 5;\n+  const int INIT_VALUE = 7;\n+  std::size_t count;\n+\n+  typedef _Tp list_type;\n+  typedef typename list_type::const_iterator const_iterator;\n+  const_iterator i;\n+\n+  // default value\n+  list_type list0202(LIST_SIZE);\n+  for (i = list0202.begin(), count = 0;\n+       i != list0202.end();\n+       ++i, ++count)\n+    VERIFY(*i == 0);\n+  VERIFY(count == LIST_SIZE);\n+  VERIFY(list0202.size() == LIST_SIZE);\n+\n+  // explicit value\n+  list_type list0203(LIST_SIZE, INIT_VALUE);\n+  for (i = list0203.begin(), count = 0;\n+       i != list0203.end();\n+       ++i, ++count)\n+    VERIFY(*i == INIT_VALUE);\n+  VERIFY(count == LIST_SIZE);\n+  VERIFY(list0203.size() == LIST_SIZE);\n+}\n+\n+template<typename _Tp>\n+void\n+cons022()\n+{\n+  // nontrivial value_type\n+  typedef _Tp list_type;\n+  const std::size_t LIST_SIZE = 5;\n+  list_type list0201(LIST_SIZE);\n+}"}, {"sha": "f373cc05d8a6d629fb586c6f25b2dd8eccaab386", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/3.cc", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F3.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,38 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.1 list constructors, copy, and assignment\n-\n+#include \"3.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-\n-// A nontrivial type convertible from an int\n-struct C\n-{\n-  C(int i) : i_(i) { }\n-  bool operator==(const C& rhs) { return i_ == rhs.i_; }\n-  int i_;\n-};\n-\n-// Fill constructor disguised as a range constructor\n-template<typename _Tp>\n-void\n-cons03()\n-{\n-  bool test __attribute__((unused)) = true;\n-  typedef _Tp list_type;\n-  typedef typename list_type::iterator iterator;\n-\n-  const std::size_t LIST_SIZE = 5;\n-  const int INIT_VALUE = 7;\n-  std::size_t count = 0;\n-  list_type list0204(LIST_SIZE, INIT_VALUE);\n-  iterator i = list0204.begin();\n-  for (; i != list0204.end(); ++i, ++count)\n-    VERIFY(*i == INIT_VALUE);\n-  VERIFY(count == LIST_SIZE);\n-  VERIFY(list0204.size() == LIST_SIZE);\n-}\n \n int main()\n {"}, {"sha": "983c24ca8aeebe90d953ac943feea9e699559e16", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/3.h", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F3.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2001, 2004, 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.1 list constructors, copy, and assignment\n+\n+#include <testsuite_hooks.h>\n+\n+// A nontrivial type convertible from an int\n+struct C\n+{\n+  C(int i) : i_(i) { }\n+  bool operator==(const C& rhs) { return i_ == rhs.i_; }\n+  int i_;\n+};\n+\n+// Fill constructor disguised as a range constructor\n+template<typename _Tp>\n+void\n+cons03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator;\n+\n+  const std::size_t LIST_SIZE = 5;\n+  const int INIT_VALUE = 7;\n+  std::size_t count = 0;\n+  list_type list0204(LIST_SIZE, INIT_VALUE);\n+  iterator i = list0204.begin();\n+  for (; i != list0204.end(); ++i, ++count)\n+    VERIFY(*i == INIT_VALUE);\n+  VERIFY(count == LIST_SIZE);\n+  VERIFY(list0204.size() == LIST_SIZE);\n+}"}, {"sha": "d6b58be0481fa40655a55f161fc411e116532847", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/4.cc", "status": "modified", "additions": 1, "deletions": 44, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F4.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,51 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.1 list constructors, copy, and assignment\n-\n+#include \"4.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-\n-// Range constructor\n-//\n-// This test verifies the following.\n-// 23.2.2.1     template list(InputIterator f, InputIterator l, \n-//                            const Allocator& a = Allocator())\n-// 23.2.2       const_iterator begin() const\n-// 23.2.2       const_iterator end() const\n-// 23.2.2       size_type size() const\n-//\n-template<typename _Tp>\n-void\n-cons04()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n-  const std::size_t N = sizeof(A) / sizeof(int);\n-  std::size_t count;\n-\n-  typedef std::list<int> list_type;\n-  typedef typename list_type::const_iterator const_iterator;\n-  const_iterator i;\n-\n-  // construct from a dissimilar range\n-  list_type list0301(A, A + N);\n-  for (i = list0301.begin(), count = 0;\n-       i != list0301.end();\n-       ++i, ++count)\n-    VERIFY(*i == A[count]);\n-  VERIFY(count == N);\n-  VERIFY(list0301.size() == N);\n-\n-  // construct from a similar range\n-  list_type list0302(list0301.begin(), list0301.end());\n-  for (i = list0302.begin(), count = 0;\n-       i != list0302.end();\n-       ++i, ++count)\n-    VERIFY(*i == A[count]);\n-  VERIFY(count == N);\n-  VERIFY(list0302.size() == N);\n-}\n \n int main()\n {"}, {"sha": "bf2e51c138d189a44474384c204b436cd33f924b", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/4.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F4.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,61 @@\n+// Copyright (C) 2001, 2004, 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.1 list constructors, copy, and assignment\n+\n+#include <testsuite_hooks.h>\n+\n+// Range constructor\n+//\n+// This test verifies the following.\n+// 23.2.2.1     template list(InputIterator f, InputIterator l, \n+//                            const Allocator& a = Allocator())\n+// 23.2.2       const_iterator begin() const\n+// 23.2.2       const_iterator end() const\n+// 23.2.2       size_type size() const\n+//\n+template<typename _Tp>\n+void\n+cons04()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n+  const std::size_t N = sizeof(A) / sizeof(int);\n+  std::size_t count;\n+\n+  typedef _Tp list_type;\n+  typedef typename list_type::const_iterator const_iterator;\n+  const_iterator i;\n+\n+  // construct from a dissimilar range\n+  list_type list0301(A, A + N);\n+  for (i = list0301.begin(), count = 0;\n+       i != list0301.end();\n+       ++i, ++count)\n+    VERIFY(*i == A[count]);\n+  VERIFY(count == N);\n+  VERIFY(list0301.size() == N);\n+\n+  // construct from a similar range\n+  list_type list0302(list0301.begin(), list0301.end());\n+  for (i = list0302.begin(), count = 0;\n+       i != list0302.end();\n+       ++i, ++count)\n+    VERIFY(*i == A[count]);\n+  VERIFY(count == N);\n+  VERIFY(list0302.size() == N);\n+}"}, {"sha": "de86dccd696fa82edaaaed3254bf0abd0fcad85a", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/5.cc", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F5.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,41 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.1 list constructors, copy, and assignment\n-\n+#include \"5.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-\n-// Copy constructor\n-//\n-// This test verifies the following.\n-// 23.2.2.1     list(const list& x)\n-// 23.2.2       reverse_iterator rbegin() \n-// 23.2.2       reverse_iterator rend()\n-// 23.2.2       size_type size() const\n-//\n-template<typename _Tp>\n-void\n-cons05()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n-  const std::size_t N = sizeof(A) / sizeof(int);\n-  int count;\n-\n-  typedef _Tp list_type;\n-  typedef typename list_type::reverse_iterator reverse_iterator;\n-  reverse_iterator i;\n-  list_type list0401(A, A + N);\n-\n-  list_type list0402(list0401);\n-  for (i = list0401.rbegin(), count = N - 1;\n-       i != list0401.rend();\n-       ++i, --count)\n-    VERIFY(*i == A[count]);\n-  VERIFY(count == -1);\n-  VERIFY(list0401.size() == N);\n-}\n \n int main()\n {"}, {"sha": "5c273a322e728a0441d8c23e2ff1e40d14018a77", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/5.h", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F5.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2001, 2004, 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.1 list constructors, copy, and assignment\n+\n+#include <testsuite_hooks.h>\n+\n+// Copy constructor\n+//\n+// This test verifies the following.\n+// 23.2.2.1     list(const list& x)\n+// 23.2.2       reverse_iterator rbegin() \n+// 23.2.2       reverse_iterator rend()\n+// 23.2.2       size_type size() const\n+//\n+template<typename _Tp>\n+void\n+cons05()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n+  const std::size_t N = sizeof(A) / sizeof(int);\n+  int count;\n+\n+  typedef _Tp list_type;\n+  typedef typename list_type::reverse_iterator reverse_iterator;\n+  reverse_iterator i;\n+  list_type list0401(A, A + N);\n+\n+  list_type list0402(list0401);\n+  for (i = list0401.rbegin(), count = N - 1;\n+       i != list0401.rend();\n+       ++i, --count)\n+    VERIFY(*i == A[count]);\n+  VERIFY(count == -1);\n+  VERIFY(list0401.size() == N);\n+}"}, {"sha": "c1a2baedca2b4f5617285348a1d723daceef770b", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/6.cc", "status": "modified", "additions": 1, "deletions": 47, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F6.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,54 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.1 list constructors, copy, and assignment\n-\n+#include \"6.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-\n-// Range assign\n-//\n-// This test verifies the following.\n-// 23.2.2.1     void assign(InputIterator f, InputIterator l)\n-// 23.2.2       const_iterator begin() const\n-// 23.2.2       const_iterator end() const\n-// 23.2.2       size_type size() const\n-//\n-template<typename _Tp>\n-void\n-cons06()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n-  const int B[] = {101, 102, 103, 104, 105};\n-  const std::size_t N = sizeof(A) / sizeof(int);\n-  const std::size_t M = sizeof(B) / sizeof(int);\n-  std::size_t count;\n-\n-  typedef _Tp list_type;\n-  typedef typename list_type::const_iterator const_iterator;\n-  const_iterator i;\n-\n-  list_type list0501;\n-\n-  // make it bigger\n-  list0501.assign(A, A + N);\n-  for (i = list0501.begin(), count = 0;\n-       i != list0501.end();\n-       ++i, ++count)\n-    VERIFY(*i == A[count]);\n-  VERIFY(count == N);\n-  VERIFY(list0501.size() == N);\n-\n-  // make it smaller\n-  list0501.assign(B, B + M);\n-  for (i = list0501.begin(), count = 0;\n-       i != list0501.end();\n-       ++i, ++count)\n-    VERIFY(*i == B[count]);\n-  VERIFY(count == M);\n-  VERIFY(list0501.size() == M);\n-}\n \n int main()\n {"}, {"sha": "b247e5563cb8721f5dc8e9b34ff772a2f74ef30e", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/6.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F6.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,64 @@\n+// Copyright (C) 2001, 2004, 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.1 list constructors, copy, and assignment\n+\n+#include <testsuite_hooks.h>\n+\n+// Range assign\n+//\n+// This test verifies the following.\n+// 23.2.2.1     void assign(InputIterator f, InputIterator l)\n+// 23.2.2       const_iterator begin() const\n+// 23.2.2       const_iterator end() const\n+// 23.2.2       size_type size() const\n+//\n+template<typename _Tp>\n+void\n+cons06()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n+  const int B[] = {101, 102, 103, 104, 105};\n+  const std::size_t N = sizeof(A) / sizeof(int);\n+  const std::size_t M = sizeof(B) / sizeof(int);\n+  std::size_t count;\n+\n+  typedef _Tp list_type;\n+  typedef typename list_type::const_iterator const_iterator;\n+  const_iterator i;\n+\n+  list_type list0501;\n+\n+  // make it bigger\n+  list0501.assign(A, A + N);\n+  for (i = list0501.begin(), count = 0;\n+       i != list0501.end();\n+       ++i, ++count)\n+    VERIFY(*i == A[count]);\n+  VERIFY(count == N);\n+  VERIFY(list0501.size() == N);\n+\n+  // make it smaller\n+  list0501.assign(B, B + M);\n+  for (i = list0501.begin(), count = 0;\n+       i != list0501.end();\n+       ++i, ++count)\n+    VERIFY(*i == B[count]);\n+  VERIFY(count == M);\n+  VERIFY(list0501.size() == M);\n+}"}, {"sha": "0f3de3c6763ef7a1d5dcb1ebe5d01b11c08a338a", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/7.cc", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F7.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,55 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.1 list constructors, copy, and assignment\n-\n+#include \"7.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-\n-// Fill assign\n-//\n-// This test verifies the following.\n-// 23.2.2.1     void assign(size_type n, const T& v)\n-// 23.2.2       const_iterator begin() const\n-// 23.2.2       const_iterator end() const\n-// 23.2.2       size_type size() const\n-//\n-template<typename _Tp>\n-void\n-cons07()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const std::size_t BIG_LIST_SIZE = 11;\n-  const int BIG_INIT_VALUE = 7;\n-  const std::size_t SMALL_LIST_SIZE = 5;\n-  const int SMALL_INIT_VALUE = 17;\n-  std::size_t count;\n-\n-  typedef _Tp list_type;\n-  typedef typename list_type::const_iterator const_iterator;\n-  const_iterator i;\n-\n-  list_type list0601;\n-  VERIFY(list0601.size() == 0);\n-\n-  // make it bigger\n-  list0601.assign(BIG_LIST_SIZE, BIG_INIT_VALUE);\n-  for (i = list0601.begin(), count = 0;\n-       i != list0601.end();\n-       ++i, ++count)\n-    VERIFY(*i == BIG_INIT_VALUE);\n-  VERIFY(count == BIG_LIST_SIZE);\n-  VERIFY(list0601.size() == BIG_LIST_SIZE);\n-\n-  // make it shrink\n-  list0601.assign(SMALL_LIST_SIZE, SMALL_INIT_VALUE);\n-  for (i = list0601.begin(), count = 0;\n-       i != list0601.end();\n-       ++i, ++count)\n-    VERIFY(*i == SMALL_INIT_VALUE);\n-  VERIFY(count == SMALL_LIST_SIZE);\n-  VERIFY(list0601.size() == SMALL_LIST_SIZE);\n-}\n \n int main()\n {"}, {"sha": "1ebd7a5cfaa7ecc5f21bde30b61381404cdc2f20", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/7.h", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F7.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,65 @@\n+// Copyright (C) 2001, 2004, 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.1 list constructors, copy, and assignment\n+\n+#include <testsuite_hooks.h>\n+\n+// Fill assign\n+//\n+// This test verifies the following.\n+// 23.2.2.1     void assign(size_type n, const T& v)\n+// 23.2.2       const_iterator begin() const\n+// 23.2.2       const_iterator end() const\n+// 23.2.2       size_type size() const\n+//\n+template<typename _Tp>\n+void\n+cons07()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const std::size_t BIG_LIST_SIZE = 11;\n+  const int BIG_INIT_VALUE = 7;\n+  const std::size_t SMALL_LIST_SIZE = 5;\n+  const int SMALL_INIT_VALUE = 17;\n+  std::size_t count;\n+\n+  typedef _Tp list_type;\n+  typedef typename list_type::const_iterator const_iterator;\n+  const_iterator i;\n+\n+  list_type list0601;\n+  VERIFY(list0601.size() == 0);\n+\n+  // make it bigger\n+  list0601.assign(BIG_LIST_SIZE, BIG_INIT_VALUE);\n+  for (i = list0601.begin(), count = 0;\n+       i != list0601.end();\n+       ++i, ++count)\n+    VERIFY(*i == BIG_INIT_VALUE);\n+  VERIFY(count == BIG_LIST_SIZE);\n+  VERIFY(list0601.size() == BIG_LIST_SIZE);\n+\n+  // make it shrink\n+  list0601.assign(SMALL_LIST_SIZE, SMALL_INIT_VALUE);\n+  for (i = list0601.begin(), count = 0;\n+       i != list0601.end();\n+       ++i, ++count)\n+    VERIFY(*i == SMALL_INIT_VALUE);\n+  VERIFY(count == SMALL_LIST_SIZE);\n+  VERIFY(list0601.size() == SMALL_LIST_SIZE);\n+}"}, {"sha": "16d888b4472546aa53ea846875e5a170e9f5fb2b", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/8.cc", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F8.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,41 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.1 list constructors, copy, and assignment\n-\n+#include \"8.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-\n-// A nontrivial type convertible from an int\n-struct C \n-{\n-  C(int i) : i_(i) { }\n-  bool operator==(const C& rhs) { return i_ == rhs.i_; }\n-  int i_;\n-};\n-\n-// Fill Assignment disguised as a Range Assignment\n-template<typename _Tp>\n-void\n-cons08()\n-{\n-  typedef _Tp list_type;\n-  typedef typename list_type::iterator iterator;\n-  bool test __attribute__((unused)) = true;\n-  const std::size_t LIST_SIZE = 5;\n-  const int INIT_VALUE = 7;\n-  std::size_t count = 0;\n-\n-  list_type list0604;\n-  VERIFY(list0604.size() == 0);\n-  \n-  list0604.assign(LIST_SIZE, INIT_VALUE);\n-  iterator i = list0604.begin();\n-  for (; i != list0604.end(); ++i, ++count)\n-    VERIFY(*i == INIT_VALUE);\n-  VERIFY(count == LIST_SIZE);\n-  VERIFY(list0604.size() == LIST_SIZE);\n-}\n \n int main()\n {"}, {"sha": "4aed16b81d9c9eda63578b8fb0ea12e629ef6f7c", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/8.h", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F8.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F8.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F8.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2001, 2004, 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.1 list constructors, copy, and assignment\n+\n+#include <testsuite_hooks.h>\n+\n+// A nontrivial type convertible from an int\n+struct C \n+{\n+  C(int i) : i_(i) { }\n+  bool operator==(const C& rhs) { return i_ == rhs.i_; }\n+  int i_;\n+};\n+\n+// Fill Assignment disguised as a Range Assignment\n+template<typename _Tp>\n+void\n+cons08()\n+{\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator;\n+  bool test __attribute__((unused)) = true;\n+  const std::size_t LIST_SIZE = 5;\n+  const int INIT_VALUE = 7;\n+  std::size_t count = 0;\n+\n+  list_type list0604;\n+  VERIFY(list0604.size() == 0);\n+  \n+  list0604.assign(LIST_SIZE, INIT_VALUE);\n+  iterator i = list0604.begin();\n+  for (; i != list0604.end(); ++i, ++count)\n+    VERIFY(*i == INIT_VALUE);\n+  VERIFY(count == LIST_SIZE);\n+  VERIFY(list0604.size() == LIST_SIZE);\n+}"}, {"sha": "908454453a25011f4c80ca1e0f110cf5f75c13e4", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/9.cc", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F9.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,49 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.1 list constructors, copy, and assignment\n-\n+#include \"9.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-\n-// Assignment operator\n-//\n-// This test verifies the following.\n-// 23.2.2       operator=(const list& x)\n-// 23.2.2       iterator begin()\n-// 23.2.2       iterator end()\n-// 23.2.2       size_type size() const\n-// 23.2.2       bool operator==(const list& x, const list& y)\n-//\n-template<typename _Tp>\n-void\n-cons09()\n-{\n-  bool test __attribute__((unused)) = true;\n-  typedef _Tp list_type;\n-  typedef typename list_type::iterator iterator;\n-\n-  const int A[] = {701, 702, 703, 704, 705};\n-  const std::size_t N = sizeof(A) / sizeof(int);\n-  std::size_t count;\n-\n-  iterator i;\n-\n-  list_type list0701(A, A + N);\n-  VERIFY(list0701.size() == N);\n-\n-  list_type list0702;\n-  VERIFY(list0702.size() == 0);\n-\n-  list0702 = list0701;\n-  VERIFY(list0702.size() == N);\n-  for (i = list0702.begin(), count = 0;\n-       i != list0702.end();\n-       ++i, ++count)\n-    VERIFY(*i == A[count]);\n-  VERIFY(count == N);\n-  VERIFY(list0702 == list0701);\n-}\n \n int main()\n {"}, {"sha": "90c3fd0540e309693f15da29c7133ef6dab25ef0", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/9.h", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F9.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F9.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F9.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,59 @@\n+// Copyright (C) 2001, 2004, 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.1 list constructors, copy, and assignment\n+\n+#include <testsuite_hooks.h>\n+\n+// Assignment operator\n+//\n+// This test verifies the following.\n+// 23.2.2       operator=(const list& x)\n+// 23.2.2       iterator begin()\n+// 23.2.2       iterator end()\n+// 23.2.2       size_type size() const\n+// 23.2.2       bool operator==(const list& x, const list& y)\n+//\n+template<typename _Tp>\n+void\n+cons09()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator;\n+\n+  const int A[] = {701, 702, 703, 704, 705};\n+  const std::size_t N = sizeof(A) / sizeof(int);\n+  std::size_t count;\n+\n+  iterator i;\n+\n+  list_type list0701(A, A + N);\n+  VERIFY(list0701.size() == N);\n+\n+  list_type list0702;\n+  VERIFY(list0702.size() == 0);\n+\n+  list0702 = list0701;\n+  VERIFY(list0702.size() == N);\n+  for (i = list0702.begin(), count = 0;\n+       i != list0702.end();\n+       ++i, ++count)\n+    VERIFY(*i == A[count]);\n+  VERIFY(count == N);\n+  VERIFY(list0702 == list0701);\n+}"}, {"sha": "cb186d321cbcec987571bff14922f6f60a104d81", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/clear_allocator.cc", "status": "modified", "additions": 1, "deletions": 62, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fclear_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fclear_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fclear_allocator.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,69 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+#include \"clear_allocator.h\"\n #include <list>\n-#include <ext/new_allocator.h>\n-\n-using namespace std;\n-using __gnu_cxx::new_allocator;\n-\n-template<typename T>\n-  class clear_alloc : public new_allocator<T> \n-  {\n-  public:\n-\n-    template <typename T1>\n-      struct rebind \n-      { typedef clear_alloc<T1> other; };\n-\n-    virtual void clear() throw()\n-    { }\n-\n-    clear_alloc() throw()\n-    { }\n-    \n-    clear_alloc(clear_alloc const&) throw() : new_allocator<T>() \n-    { }\n-    \n-    template<typename T1>\n-    clear_alloc(clear_alloc<T1> const&) throw()\n-      { }\n-\n-    virtual ~clear_alloc() throw()\n-    { this->clear(); }\n-\n-    T* allocate(typename new_allocator<T>::size_type n, const void *hint = 0)\n-    {\n-      this->clear();\n-      return new_allocator<T>::allocate(n, hint);\n-    }\n-    \n-    void deallocate(T *ptr, typename new_allocator<T>::size_type n)\n-    {\n-      this->clear();\n-      new_allocator<T>::deallocate(ptr, n);\n-    }\n-  };\n-\n-template<typename Container>\n-  void Check_Container()\n-  {\n-    Container* pic = new Container;\n-    int x = 230;\n-    \n-    while (x--)\n-      {\n-\tpic->push_back(x);\n-      }\n-    \n-    pic->get_allocator();\n-    \n-    // The following has led to infinite recursions or cores.\n-    pic->clear();\n-\n-    delete pic;\n-  }\n-\n \n int main()\n {"}, {"sha": "3a53751c9624eb9e871d4a5ae3e699815487cbd5", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/clear_allocator.h", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fclear_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fclear_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fclear_allocator.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,78 @@\n+// Copyright (C) 2004, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/new_allocator.h>\n+\n+using namespace std;\n+using __gnu_cxx::new_allocator;\n+\n+template<typename T>\n+  class clear_alloc : public new_allocator<T> \n+  {\n+  public:\n+\n+    template <typename T1>\n+      struct rebind \n+      { typedef clear_alloc<T1> other; };\n+\n+    virtual void clear() throw()\n+    { }\n+\n+    clear_alloc() throw()\n+    { }\n+    \n+    clear_alloc(clear_alloc const&) throw() : new_allocator<T>() \n+    { }\n+    \n+    template<typename T1>\n+    clear_alloc(clear_alloc<T1> const&) throw()\n+      { }\n+\n+    virtual ~clear_alloc() throw()\n+    { this->clear(); }\n+\n+    T* allocate(typename new_allocator<T>::size_type n, const void *hint = 0)\n+    {\n+      this->clear();\n+      return new_allocator<T>::allocate(n, hint);\n+    }\n+    \n+    void deallocate(T *ptr, typename new_allocator<T>::size_type n)\n+    {\n+      this->clear();\n+      new_allocator<T>::deallocate(ptr, n);\n+    }\n+  };\n+\n+template<typename Container>\n+  void Check_Container()\n+  {\n+    Container* pic = new Container;\n+    int x = 230;\n+    \n+    while (x--)\n+      {\n+\tpic->push_back(x);\n+      }\n+    \n+    pic->get_allocator();\n+    \n+    // The following has led to infinite recursions or cores.\n+    pic->clear();\n+\n+    delete pic;\n+  }"}, {"sha": "db6bc3b69375cf2922e7d64345b744e6c489fbc4", "filename": "libstdc++-v3/testsuite/23_containers/list/init-list.cc", "status": "modified", "additions": 3, "deletions": 49, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finit-list.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n // Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -16,56 +18,8 @@\n // <http://www.gnu.org/licenses/>.\n //\n \n-// { dg-options \"-std=gnu++0x\" }\n-\n+#include \"init-list.h\"\n #include <list>\n-#include <testsuite_allocator.h>\n-\n-template<typename _Tp>\n-bool\n-init_list()\n-{\n-  using namespace __gnu_test;\n-  typedef _Tp list_type;\n-  typedef typename list_type::iterator iterator;\n-\n-  const int arr10[10] = { 2, 4, 1, 7, 3, 8, 10, 5, 9, 6 };\n-  bool ok = true;\n-\n-  tracker_allocator_counter::reset();\n-  {\n-    list_type c({ 2, 4, 1 });\n-    ok = check_construct_destroy(\"Construct from init-list\", 3, 0) && ok;\n-    iterator i = c.begin();\n-    ok &= (*i++ == 2);\n-    ok &= (*i++ == 4);\n-  }\n-  ok = check_construct_destroy(\"Construct from init-list\", 3, 3) && ok;\n-\n-  {\n-    list_type c(arr10, arr10 + 10);\n-    tracker_allocator_counter::reset();\n-    iterator i = c.begin();\n-    ++i; ++i; ++i; ++i; ++i; ++i; ++i;\n-    c.insert(i, { 234, 42, 1 });\n-    ok = check_construct_destroy(\"Insert init-list\", 3, 0) && ok;\n-    ok &= (*--i == 1);\n-    ok &= (*--i == 42);\n-  }\n-  ok = check_construct_destroy(\"Insert init-list\", 3, 13) && ok;\n-\n-  {\n-    list_type c;\n-    tracker_allocator_counter::reset();\n-    c = { 13, 0, 42 };\n-    ok = check_construct_destroy(\"Assign init-list\", 3, 0) && ok;\n-    iterator i = c.begin();\n-    ok &= (*i++ == 13);\n-  }\n-  ok = check_construct_destroy(\"Assign init-list\", 3, 3) && ok;\n-\n-  return ok ? 0 : 1;\n-}\n \n int main()\n {"}, {"sha": "a391ffdad6710f606d606cf0c81d0817b3fd4029", "filename": "libstdc++-v3/testsuite/23_containers/list/init-list.h", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finit-list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finit-list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finit-list.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,65 @@\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+#include <testsuite_allocator.h>\n+\n+template<typename _Tp>\n+bool\n+init_list()\n+{\n+  using namespace __gnu_test;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator;\n+\n+  const int arr10[10] = { 2, 4, 1, 7, 3, 8, 10, 5, 9, 6 };\n+  bool ok = true;\n+\n+  tracker_allocator_counter::reset();\n+  {\n+    list_type c({ 2, 4, 1 });\n+    ok = check_construct_destroy(\"Construct from init-list\", 3, 0) && ok;\n+    iterator i = c.begin();\n+    ok &= (*i++ == 2);\n+    ok &= (*i++ == 4);\n+  }\n+  ok = check_construct_destroy(\"Construct from init-list\", 3, 3) && ok;\n+\n+  {\n+    list_type c(arr10, arr10 + 10);\n+    tracker_allocator_counter::reset();\n+    iterator i = c.begin();\n+    ++i; ++i; ++i; ++i; ++i; ++i; ++i;\n+    c.insert(i, { 234, 42, 1 });\n+    ok = check_construct_destroy(\"Insert init-list\", 3, 0) && ok;\n+    ok &= (*--i == 1);\n+    ok &= (*--i == 42);\n+  }\n+  ok = check_construct_destroy(\"Insert init-list\", 3, 13) && ok;\n+\n+  {\n+    list_type c;\n+    tracker_allocator_counter::reset();\n+    c = { 13, 0, 42 };\n+    ok = check_construct_destroy(\"Assign init-list\", 3, 0) && ok;\n+    iterator i = c.begin();\n+    ok &= (*i++ == 13);\n+  }\n+  ok = check_construct_destroy(\"Assign init-list\", 3, 3) && ok;\n+\n+  return ok ? 0 : 1;\n+}"}, {"sha": "cf8c20a6578dc8ce3161ac39e625d9add0e4825f", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/1.cc", "status": "modified", "additions": 1, "deletions": 96, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F1.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,103 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.3 list modifiers [lib.list.modifiers]\n-\n+#include \"1.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-\n-// range and fill insert/erase + clear\n-// missing: o  fill insert disguised as a range insert in all its variants\n-//          o  exception effects\n-template<typename _Tp>\n-void\n-modifiers1()\n-{\n-  bool test __attribute__((unused)) = true;\n-  typedef _Tp list_type;\n-  typedef typename list_type::iterator iterator;\n-  typedef typename list_type::value_type value_type;\n-\n-  list_type list0301;\n-  value_type::reset();\n-\n-  // fill insert at beginning of list / empty list\n-  list0301.insert(list0301.begin(), 3, value_type(11)); // should be [11 11 11]\n-  VERIFY(list0301.size() == 3);\n-  VERIFY(value_type::copyCount() == 3);\n-\n-  // save iterators to verify post-insert validity\n-  iterator b = list0301.begin();\n-  iterator m = list0301.end(); --m;\n-  iterator e = list0301.end();\n-\n-  // fill insert at end of list\n-  value_type::reset();\n-  list0301.insert(list0301.end(), 3, value_type(13)); // should be [11 11 11 13 13 13]\n-  VERIFY(list0301.size() == 6);\n-  VERIFY(value_type::copyCount() == 3);\n-  VERIFY(b == list0301.begin() && b->id() == 11);\n-  VERIFY(e == list0301.end());\n-  VERIFY(m->id() == 11);\n-\n-  // fill insert in the middle of list\n-  ++m;\n-  value_type::reset();\n-  list0301.insert(m, 3, value_type(12)); // should be [11 11 11 12 12 12 13 13 13]\n-  VERIFY(list0301.size() == 9);\n-  VERIFY(value_type::copyCount() == 3);\n-  VERIFY(b == list0301.begin() && b->id() == 11);\n-  VERIFY(e == list0301.end());\n-  VERIFY(m->id() == 13);\n-\n-  // single erase\n-  value_type::reset();\n-  m = list0301.erase(m); // should be [11 11 11 12 12 12 13 13]\n-  VERIFY(list0301.size() == 8);\n-  VERIFY(value_type::dtorCount() == 1);\n-  VERIFY(b == list0301.begin() && b->id() == 11);\n-  VERIFY(e == list0301.end());\n-  VERIFY(m->id() == 13);\n-\n-  // range erase\n-  value_type::reset();\n-  m = list0301.erase(list0301.begin(), m); // should be [13 13]\n-  VERIFY(list0301.size() == 2);\n-  VERIFY(value_type::dtorCount() == 6);\n-  VERIFY(m->id() == 13);\n-\n-  // range fill at beginning\n-  const int A[] = {321, 322, 333};\n-  const int N = sizeof(A) / sizeof(int);\n-  value_type::reset();\n-  b = list0301.begin();\n-  list0301.insert(b, A, A + N); // should be [321 322 333 13 13]\n-  VERIFY(list0301.size() == 5);\n-  VERIFY(value_type::copyCount() == 3);\n-  VERIFY(m->id() == 13);\n-\n-  // range fill at end\n-  value_type::reset();\n-  list0301.insert(e, A, A + N); // should be [321 322 333 13 13 321 322 333]\n-  VERIFY(list0301.size() == 8);\n-  VERIFY(value_type::copyCount() == 3);\n-  VERIFY(e == list0301.end());\n-  VERIFY(m->id() == 13);\n-\n-  // range fill in middle\n-  value_type::reset();\n-  list0301.insert(m, A, A + N);\n-  VERIFY(list0301.size() == 11);\n-  VERIFY(value_type::copyCount() == 3);\n-  VERIFY(e == list0301.end());\n-  VERIFY(m->id() == 13);\n-\n-  value_type::reset();\n-  list0301.clear();\n-  VERIFY(list0301.size() == 0);\n-  VERIFY(value_type::dtorCount() == 11);\n-  VERIFY(e == list0301.end());\n-}\n \n int main()\n {"}, {"sha": "f26fd8854859e88744cc080151e00a3642f1f8ab", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/1.h", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F1.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,113 @@\n+// Copyright (C) 2001, 2003, 2004, 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.3 list modifiers [lib.list.modifiers]\n+\n+#include <testsuite_hooks.h>\n+\n+// range and fill insert/erase + clear\n+// missing: o  fill insert disguised as a range insert in all its variants\n+//          o  exception effects\n+template<typename _Tp>\n+void\n+modifiers1()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator;\n+  typedef typename list_type::value_type value_type;\n+\n+  list_type list0301;\n+  value_type::reset();\n+\n+  // fill insert at beginning of list / empty list\n+  list0301.insert(list0301.begin(), 3, value_type(11)); // should be [11 11 11]\n+  VERIFY(list0301.size() == 3);\n+  VERIFY(value_type::copyCount() == 3);\n+\n+  // save iterators to verify post-insert validity\n+  iterator b = list0301.begin();\n+  iterator m = list0301.end(); --m;\n+  iterator e = list0301.end();\n+\n+  // fill insert at end of list\n+  value_type::reset();\n+  list0301.insert(list0301.end(), 3, value_type(13)); // should be [11 11 11 13 13 13]\n+  VERIFY(list0301.size() == 6);\n+  VERIFY(value_type::copyCount() == 3);\n+  VERIFY(b == list0301.begin() && b->id() == 11);\n+  VERIFY(e == list0301.end());\n+  VERIFY(m->id() == 11);\n+\n+  // fill insert in the middle of list\n+  ++m;\n+  value_type::reset();\n+  list0301.insert(m, 3, value_type(12)); // should be [11 11 11 12 12 12 13 13 13]\n+  VERIFY(list0301.size() == 9);\n+  VERIFY(value_type::copyCount() == 3);\n+  VERIFY(b == list0301.begin() && b->id() == 11);\n+  VERIFY(e == list0301.end());\n+  VERIFY(m->id() == 13);\n+\n+  // single erase\n+  value_type::reset();\n+  m = list0301.erase(m); // should be [11 11 11 12 12 12 13 13]\n+  VERIFY(list0301.size() == 8);\n+  VERIFY(value_type::dtorCount() == 1);\n+  VERIFY(b == list0301.begin() && b->id() == 11);\n+  VERIFY(e == list0301.end());\n+  VERIFY(m->id() == 13);\n+\n+  // range erase\n+  value_type::reset();\n+  m = list0301.erase(list0301.begin(), m); // should be [13 13]\n+  VERIFY(list0301.size() == 2);\n+  VERIFY(value_type::dtorCount() == 6);\n+  VERIFY(m->id() == 13);\n+\n+  // range fill at beginning\n+  const int A[] = {321, 322, 333};\n+  const int N = sizeof(A) / sizeof(int);\n+  value_type::reset();\n+  b = list0301.begin();\n+  list0301.insert(b, A, A + N); // should be [321 322 333 13 13]\n+  VERIFY(list0301.size() == 5);\n+  VERIFY(value_type::copyCount() == 3);\n+  VERIFY(m->id() == 13);\n+\n+  // range fill at end\n+  value_type::reset();\n+  list0301.insert(e, A, A + N); // should be [321 322 333 13 13 321 322 333]\n+  VERIFY(list0301.size() == 8);\n+  VERIFY(value_type::copyCount() == 3);\n+  VERIFY(e == list0301.end());\n+  VERIFY(m->id() == 13);\n+\n+  // range fill in middle\n+  value_type::reset();\n+  list0301.insert(m, A, A + N);\n+  VERIFY(list0301.size() == 11);\n+  VERIFY(value_type::copyCount() == 3);\n+  VERIFY(e == list0301.end());\n+  VERIFY(m->id() == 13);\n+\n+  value_type::reset();\n+  list0301.clear();\n+  VERIFY(list0301.size() == 0);\n+  VERIFY(value_type::dtorCount() == 11);\n+  VERIFY(e == list0301.end());\n+}"}, {"sha": "ee9b54923df7e8bcab70d1fdf1844785c49fd59d", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/2.cc", "status": "modified", "additions": 1, "deletions": 69, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F2.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,76 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.3 list modifiers [lib.list.modifiers]\n-\n+#include \"2.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-\n-// general single insert/erase + swap\n-template<typename _Tp>\n-void\n-modifiers2()\n-{\n-  bool test __attribute__((unused)) = true;\n-  typedef _Tp list_type;\n-  typedef typename list_type::value_type value_type;\n-  typedef typename list_type::iterator iterator;\n-  typedef typename list_type::const_iterator const_iterator;\n-\n-  list_type list0201;\n-  value_type::reset();\n-\n-  list0201.insert(list0201.begin(), value_type(1));     // list should be [1]\n-  VERIFY(list0201.size() == 1);\n-  VERIFY(value_type::copyCount() == 1);\n-\n-  list0201.insert(list0201.end(), value_type(2));     // list should be [1 2]\n-  VERIFY(list0201.size() == 2);\n-  VERIFY(value_type::copyCount() == 2);\n-\n-  iterator i = list0201.begin();\n-  const_iterator j = i;\n-  VERIFY(i->id() == 1); ++i;\n-  VERIFY(i->id() == 2);\n-\n-  list0201.insert(i, value_type(3));     // list should be [1 3 2]\n-  VERIFY(list0201.size() == 3);\n-  VERIFY(value_type::copyCount() == 3);\n-\n-  const_iterator k = i;\n-  VERIFY(i->id() == 2); --i;\n-  VERIFY(i->id() == 3); --i;\n-  VERIFY(i->id() == 1);\n-  VERIFY(j->id() == 1);\n-\n-  ++i; // will point to '3'\n-  value_type::reset();\n-  list0201.erase(i); // should be [1 2]\n-  VERIFY(list0201.size() == 2);\n-  VERIFY(value_type::dtorCount() == 1);\n-  VERIFY(k->id() == 2);\n-  VERIFY(j->id() == 1);\n-\n-  list_type list0202;\n-  value_type::reset();\n-  VERIFY(list0202.size() == 0);\n-  VERIFY(value_type::copyCount() == 0);\n-  VERIFY(value_type::dtorCount() == 0);\n-\n-  // member swap\n-  list0202.swap(list0201);\n-  VERIFY(list0201.size() == 0);\n-  VERIFY(list0202.size() == 2);\n-  VERIFY(value_type::copyCount() == 0);\n-  VERIFY(value_type::dtorCount() == 0);\n-\n-  // specialized swap\n-  swap(list0201, list0202);\n-  VERIFY(list0201.size() == 2);\n-  VERIFY(list0202.size() == 0);\n-  VERIFY(value_type::copyCount() == 0);\n-  VERIFY(value_type::dtorCount() == 0);\n-}\n \n int main()\n {"}, {"sha": "64a348769e228dda483f7e77d118bbf46fdb11d0", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/2.h", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F2.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,86 @@\n+// Copyright (C) 2001, 2003, 2004, 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.3 list modifiers [lib.list.modifiers]\n+\n+#include <testsuite_hooks.h>\n+\n+// general single insert/erase + swap\n+template<typename _Tp>\n+void\n+modifiers2()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+  typedef typename list_type::value_type value_type;\n+  typedef typename list_type::iterator iterator;\n+  typedef typename list_type::const_iterator const_iterator;\n+\n+  list_type list0201;\n+  value_type::reset();\n+\n+  list0201.insert(list0201.begin(), value_type(1));     // list should be [1]\n+  VERIFY(list0201.size() == 1);\n+  VERIFY(value_type::copyCount() == 1);\n+\n+  list0201.insert(list0201.end(), value_type(2));     // list should be [1 2]\n+  VERIFY(list0201.size() == 2);\n+  VERIFY(value_type::copyCount() == 2);\n+\n+  iterator i = list0201.begin();\n+  const_iterator j = i;\n+  VERIFY(i->id() == 1); ++i;\n+  VERIFY(i->id() == 2);\n+\n+  list0201.insert(i, value_type(3));     // list should be [1 3 2]\n+  VERIFY(list0201.size() == 3);\n+  VERIFY(value_type::copyCount() == 3);\n+\n+  const_iterator k = i;\n+  VERIFY(i->id() == 2); --i;\n+  VERIFY(i->id() == 3); --i;\n+  VERIFY(i->id() == 1);\n+  VERIFY(j->id() == 1);\n+\n+  ++i; // will point to '3'\n+  value_type::reset();\n+  list0201.erase(i); // should be [1 2]\n+  VERIFY(list0201.size() == 2);\n+  VERIFY(value_type::dtorCount() == 1);\n+  VERIFY(k->id() == 2);\n+  VERIFY(j->id() == 1);\n+\n+  list_type list0202;\n+  value_type::reset();\n+  VERIFY(list0202.size() == 0);\n+  VERIFY(value_type::copyCount() == 0);\n+  VERIFY(value_type::dtorCount() == 0);\n+\n+  // member swap\n+  list0202.swap(list0201);\n+  VERIFY(list0201.size() == 0);\n+  VERIFY(list0202.size() == 2);\n+  VERIFY(value_type::copyCount() == 0);\n+  VERIFY(value_type::dtorCount() == 0);\n+\n+  // specialized swap\n+  swap(list0201, list0202);\n+  VERIFY(list0201.size() == 2);\n+  VERIFY(list0202.size() == 0);\n+  VERIFY(value_type::copyCount() == 0);\n+  VERIFY(value_type::dtorCount() == 0);\n+}"}, {"sha": "8454c3f46fae102eb07d2cb0e9b84738dd048e38", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/3.cc", "status": "modified", "additions": 1, "deletions": 101, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F3.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,108 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.3 list modifiers [lib.list.modifiers]\n-\n+#include \"3.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-\n-// This test verifies the following.\n-//\n-// 23.2.2.3     void push_front(const T& x)\n-// 23.2.2.3     void push_back(const T& x)\n-// 23.2.2.3 (1) iterator and reference non-invalidation\n-// 23.2.2.3 (1) exception effects\n-// 23.2.2.3 (2) complexity requirements\n-//\n-// 23.2.2.3     void pop_front()\n-// 23.2.2.3     void pop_back()\n-// 23.2.2.3 (3) iterator and reference non-invalidation\n-// 23.2.2.3 (5) complexity requirements\n-//\n-// 23.2.2       const_iterator begin() const\n-// 23.2.2       iterator end()\n-// 23.2.2       const_reverse_iterator rbegin() const\n-// 23.2.2       _reference front()\n-// 23.2.2       const_reference front() const\n-// 23.2.2       reference back()\n-// 23.2.2       const_reference back() const\n-//\n-template<typename _Tp>\n-void\n-modifiers3()\n-{\n-  bool test __attribute__((unused)) = true;\n-  typedef _Tp list_type;\n-  typedef typename list_type::iterator iterator;\n-  typedef typename list_type::value_type value_type;\n-  typedef typename list_type::const_iterator const_iterator;\n-  typedef typename list_type::const_reverse_iterator const_reverse_iterator;\n-\n-  list_type list0101;\n-  const_iterator i;\n-  const_reverse_iterator j;\n-  iterator k;\n-  value_type::reset();\n-\n-  list0101.push_back(value_type(1));     // list should be [1]\n-  VERIFY(list0101.size() == 1);\n-  VERIFY(value_type::copyCount() == 1);\n-\n-  k = list0101.end();\n-  --k;\n-  VERIFY(k->id() == 1);\n-  VERIFY(k->id() == list0101.front().id());\n-  VERIFY(k->id() == list0101.back().id());\n-\n-  list0101.push_front(value_type(2));    // list should be [2 1]\n-  VERIFY(list0101.size() == 2);\n-  VERIFY(value_type::copyCount() == 2);\n-  VERIFY(k->id() == 1);\n-\n-  list0101.push_back(value_type(3));     // list should be [2 1 3]\n-  VERIFY(list0101.size() == 3);\n-  VERIFY(value_type::copyCount() == 3);\n-  VERIFY(k->id() == 1);\n-\n-  try\n-  {\n-    list0101.push_back(value_type(4, true));\n-    VERIFY(false);\n-  }\n-  catch (...)\n-  {\n-    VERIFY(list0101.size() == 3);\n-    VERIFY(value_type::copyCount() == 4);\n-  }\n-\n-  i = list0101.begin();\n-  VERIFY(i->id() == 2);\n-  VERIFY(i->id() == list0101.front().id());\n-\n-  j = list0101.rbegin();\n-  VERIFY(j->id() == 3);\n-  VERIFY(j->id() == list0101.back().id());\n-\n-  ++i;\n-  VERIFY(i->id() == 1);\n-\n-  ++j;\n-  VERIFY(j->id() == 1);\n-\n-  value_type::reset();\n-\n-  list0101.pop_back();          // list should be [2 1]\n-  VERIFY(list0101.size() == 2);\n-  VERIFY(value_type::dtorCount() == 1);\n-  VERIFY(i->id() == 1);\n-  VERIFY(k->id() == 1);\n-\n-  list0101.pop_front();          // list should be [1]\n-  VERIFY(list0101.size() == 1);\n-  VERIFY(value_type::dtorCount() == 2);\n-  VERIFY(i->id() == 1);\n-  VERIFY(k->id() == 1);\n-}\n \n int main()\n {"}, {"sha": "43e5c58ec607afb22b8c1a9ad613f54bfda86d50", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/3.h", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F3.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,118 @@\n+// Copyright (C) 2001, 2003, 2004, 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.3 list modifiers [lib.list.modifiers]\n+\n+#include <testsuite_hooks.h>\n+\n+// This test verifies the following.\n+//\n+// 23.2.2.3     void push_front(const T& x)\n+// 23.2.2.3     void push_back(const T& x)\n+// 23.2.2.3 (1) iterator and reference non-invalidation\n+// 23.2.2.3 (1) exception effects\n+// 23.2.2.3 (2) complexity requirements\n+//\n+// 23.2.2.3     void pop_front()\n+// 23.2.2.3     void pop_back()\n+// 23.2.2.3 (3) iterator and reference non-invalidation\n+// 23.2.2.3 (5) complexity requirements\n+//\n+// 23.2.2       const_iterator begin() const\n+// 23.2.2       iterator end()\n+// 23.2.2       const_reverse_iterator rbegin() const\n+// 23.2.2       _reference front()\n+// 23.2.2       const_reference front() const\n+// 23.2.2       reference back()\n+// 23.2.2       const_reference back() const\n+//\n+template<typename _Tp>\n+void\n+modifiers3()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator;\n+  typedef typename list_type::value_type value_type;\n+  typedef typename list_type::const_iterator const_iterator;\n+  typedef typename list_type::const_reverse_iterator const_reverse_iterator;\n+\n+  list_type list0101;\n+  const_iterator i;\n+  const_reverse_iterator j;\n+  iterator k;\n+  value_type::reset();\n+\n+  list0101.push_back(value_type(1));     // list should be [1]\n+  VERIFY(list0101.size() == 1);\n+  VERIFY(value_type::copyCount() == 1);\n+\n+  k = list0101.end();\n+  --k;\n+  VERIFY(k->id() == 1);\n+  VERIFY(k->id() == list0101.front().id());\n+  VERIFY(k->id() == list0101.back().id());\n+\n+  list0101.push_front(value_type(2));    // list should be [2 1]\n+  VERIFY(list0101.size() == 2);\n+  VERIFY(value_type::copyCount() == 2);\n+  VERIFY(k->id() == 1);\n+\n+  list0101.push_back(value_type(3));     // list should be [2 1 3]\n+  VERIFY(list0101.size() == 3);\n+  VERIFY(value_type::copyCount() == 3);\n+  VERIFY(k->id() == 1);\n+\n+  try\n+  {\n+    list0101.push_back(value_type(4, true));\n+    VERIFY(false);\n+  }\n+  catch (...)\n+  {\n+    VERIFY(list0101.size() == 3);\n+    VERIFY(value_type::copyCount() == 4);\n+  }\n+\n+  i = list0101.begin();\n+  VERIFY(i->id() == 2);\n+  VERIFY(i->id() == list0101.front().id());\n+\n+  j = list0101.rbegin();\n+  VERIFY(j->id() == 3);\n+  VERIFY(j->id() == list0101.back().id());\n+\n+  ++i;\n+  VERIFY(i->id() == 1);\n+\n+  ++j;\n+  VERIFY(j->id() == 1);\n+\n+  value_type::reset();\n+\n+  list0101.pop_back();          // list should be [2 1]\n+  VERIFY(list0101.size() == 2);\n+  VERIFY(value_type::dtorCount() == 1);\n+  VERIFY(i->id() == 1);\n+  VERIFY(k->id() == 1);\n+\n+  list0101.pop_front();          // list should be [1]\n+  VERIFY(list0101.size() == 1);\n+  VERIFY(value_type::dtorCount() == 2);\n+  VERIFY(i->id() == 1);\n+  VERIFY(k->id() == 1);\n+}"}, {"sha": "e9195ddbc6431223bfda338f496497de8baf077b", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/insert/25288.cc", "status": "modified", "additions": 3, "deletions": 75, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -1,3 +1,5 @@\n+// { dg-require-time \"\" }\n+\n // Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -15,82 +17,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.3 list modifiers [lib.list.modifiers]\n-\n-// { dg-require-time \"\" }\n-\n+#include \"25288.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-#include <ext/throw_allocator.h>\n-\n-// libstdc++/25288\n-template<typename _Tp>\n-void insert1()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  typedef _Tp list_type;\n-  typedef typename _Tp::value_type value_type;\n-  typedef typename _Tp::allocator_type allocator_type;\n-  typedef typename _Tp::size_type size_type;\n-\n-  for (int j = 0; j < 10; ++j)\n-    for (int i = 0; i < 10; ++i)\n-      {\n-\tallocator_type alloc1;\n-\ttypename allocator_type::never_adjustor adjust1;\n-\tlist_type list1(alloc1);\n-\t\n-\tfor (int k = 0; k < j; ++k)\n-\t  list1.push_back(value_type(-(k + 1)));\n-      \n-\ttry\n-\t  {\n-\t    typename allocator_type::always_adjustor adjust2;\n-\t    list1.insert(list1.begin(), 10, 99);\n-\t    VERIFY( false );\n-\t  }\n-\tcatch (__gnu_cxx::forced_exception_error&)\n-\t  {\n-\t    VERIFY( true );\n-\t  }\n-\tcatch (...)\n-\t  {\n-\t    __throw_exception_again;\n-\t  }\n-\t\n-\tVERIFY( list1.size() == size_type(j) );\n-\tVERIFY( list1.size() == 0 || list1.back() == -j );\n-\tVERIFY( list1.size() == 0 || list1.front() == -1 );\n-\n-\tallocator_type alloc2;\n-\tlist_type list2(alloc2);\n-\t\n-\tconst int data[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n-\t\n-\tfor (int k = 0; k < j; ++k)\n-\t  list2.push_back(-(k + 1));\n-\t\n-\ttry\n-\t  {\n-\t    typename allocator_type::always_adjustor adjust3;\n-\t    list2.insert(list2.begin(), data, data + 10);\n-\t    VERIFY( false );\n-\t  }\n-\tcatch (__gnu_cxx::forced_exception_error&)\n-\t  {\n-\t    VERIFY( true );\n-\t  }\n-\tcatch (...)\n-\t  {\n-\t    VERIFY( false );\n-\t  }\n-\n-\tVERIFY( list2.size() == size_type(j) );\n-\tVERIFY( list2.size() == 0 || list2.back() == -j );\n-\tVERIFY( list2.size() == 0 || list2.front() == -1 );\n-      }\n-}\n \n int main()\n {"}, {"sha": "c3ec6628f3d96201baa94ce2e4e61851395ef0c7", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/insert/25288.h", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,90 @@\n+// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.3 list modifiers [lib.list.modifiers]\n+\n+#include <testsuite_hooks.h>\n+#include <ext/throw_allocator.h>\n+\n+// libstdc++/25288\n+template<typename _Tp>\n+void insert1()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef _Tp list_type;\n+  typedef typename _Tp::value_type value_type;\n+  typedef typename _Tp::allocator_type allocator_type;\n+  typedef typename _Tp::size_type size_type;\n+\n+  for (int j = 0; j < 10; ++j)\n+    for (int i = 0; i < 10; ++i)\n+      {\n+\tallocator_type alloc1;\n+\ttypename allocator_type::never_adjustor adjust1;\n+\tlist_type list1(alloc1);\n+\t\n+\tfor (int k = 0; k < j; ++k)\n+\t  list1.push_back(value_type(-(k + 1)));\n+      \n+\ttry\n+\t  {\n+\t    typename allocator_type::always_adjustor adjust2;\n+\t    list1.insert(list1.begin(), 10, 99);\n+\t    VERIFY( false );\n+\t  }\n+\tcatch (__gnu_cxx::forced_exception_error&)\n+\t  {\n+\t    VERIFY( true );\n+\t  }\n+\tcatch (...)\n+\t  {\n+\t    __throw_exception_again;\n+\t  }\n+\t\n+\tVERIFY( list1.size() == size_type(j) );\n+\tVERIFY( list1.size() == 0 || list1.back() == -j );\n+\tVERIFY( list1.size() == 0 || list1.front() == -1 );\n+\n+\tallocator_type alloc2;\n+\tlist_type list2(alloc2);\n+\t\n+\tconst int data[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+\t\n+\tfor (int k = 0; k < j; ++k)\n+\t  list2.push_back(-(k + 1));\n+\t\n+\ttry\n+\t  {\n+\t    typename allocator_type::always_adjustor adjust3;\n+\t    list2.insert(list2.begin(), data, data + 10);\n+\t    VERIFY( false );\n+\t  }\n+\tcatch (__gnu_cxx::forced_exception_error&)\n+\t  {\n+\t    VERIFY( true );\n+\t  }\n+\tcatch (...)\n+\t  {\n+\t    VERIFY( false );\n+\t  }\n+\n+\tVERIFY( list2.size() == size_type(j) );\n+\tVERIFY( list2.size() == 0 || list2.back() == -j );\n+\tVERIFY( list2.size() == 0 || list2.front() == -1 );\n+      }\n+}"}, {"sha": "d9bd9a2194e1b148c970bda6ed8ae62009ab5b2e", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/swap/1.cc", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F1.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,12 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+#include \"1.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n- \n-struct T { int i; };\n-\n-int swap_calls;\n \n namespace std\n {\n@@ -30,41 +26,6 @@ namespace std\n     { ++swap_calls; }\n }\n \n-// Should use list specialization for swap.\n-template<typename _Tp>\n-void \n-swap11()\n-{\n-  bool test __attribute__((unused)) = true;\n-  typedef _Tp list_type;\n-\n-  list_type A;\n-  list_type B;\n-  swap_calls = 0;\n-  std::swap(A, B);\n-  VERIFY(1 == swap_calls);\n-}\n-\n-// Should use list specialization for swap.\n-template<typename _Tp>\n-void \n-swap12()\n-{\n-  using namespace std;\n-  bool test __attribute__((unused)) = true;\n-  typedef _Tp list_type;\n-\n-  list_type A;\n-  list_type B;\n-  swap_calls = 0;\n-  swap(A, B);\n-  VERIFY(1 == swap_calls);\n-}\n-\n-#if !__GXX_WEAK__ && _MT_ALLOCATOR_H\n-template class __gnu_cxx::__mt_alloc<std::_List_node<T> >;\n-#endif\n-\n // See c++/13658 for background info.\n int main()\n {"}, {"sha": "64619b42470dfbf727d720e82574ff8c92551263", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/swap/1.h", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F1.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2004, 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+ \n+struct T { int i; };\n+\n+int swap_calls;\n+\n+// Should use list specialization for swap.\n+template<typename _Tp>\n+void \n+swap11()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+\n+  list_type A;\n+  list_type B;\n+  swap_calls = 0;\n+  std::swap(A, B);\n+  VERIFY(1 == swap_calls);\n+}\n+\n+// Should use list specialization for swap.\n+template<typename _Tp>\n+void \n+swap12()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+\n+  list_type A;\n+  list_type B;\n+  swap_calls = 0;\n+  swap(A, B);\n+  VERIFY(1 == swap_calls);\n+}\n+\n+#if !__GXX_WEAK__ && _MT_ALLOCATOR_H\n+template class __gnu_cxx::__mt_alloc<std::_List_node<T> >;\n+#endif"}, {"sha": "7bd75a39e3c363d5b32bca570ac4e0d79a7bcc2f", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/swap/2.cc", "status": "modified", "additions": 1, "deletions": 108, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F2.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -17,115 +17,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.3 list::swap\n-\n+#include \"2.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n-\n-// uneq_allocator as a non-empty allocator.\n-template<typename _Tp>\n-void\n-swap2()\n-{\n-  bool test __attribute__((unused)) = true;\n-  using namespace std;\n-\n-  typedef _Tp list_type;\n-  typedef typename list_type::allocator_type allocator_type;\n-  typedef typename list_type::size_type size_type;\n-\n-  const char title01[] = \"Rivers of sand\";\n-  const char title02[] = \"Concret PH\";\n-  const char title03[] = \"Sonatas and Interludes for Prepared Piano\";\n-  const char title04[] = \"never as tired as when i'm waking up\";\n-\n-  const size_t N1 = sizeof(title01);\n-  const size_t N2 = sizeof(title02);\n-  const size_t N3 = sizeof(title03);\n-  const size_t N4 = sizeof(title04);\n-\n-  size_type size01, size02;\n-\n-  allocator_type alloc01(1);\n-\n-  list_type lis01(alloc01);\n-  size01 = lis01.size();\n-  list_type lis02(alloc01);\n-  size02 = lis02.size();\n-  \n-  lis01.swap(lis02);\n-  VERIFY( lis01.size() == size02 );\n-  VERIFY( lis01.empty() );\n-  VERIFY( lis02.size() == size01 );\n-  VERIFY( lis02.empty() );\n-\n-  list_type lis03(alloc01);\n-  size01 = lis03.size();\n-  list_type lis04(title02, title02 + N2, alloc01);\n-  size02 = lis04.size();\n-  \n-  lis03.swap(lis04);\n-  VERIFY( lis03.size() == size02 );\n-  VERIFY( equal(lis03.begin(), lis03.end(), title02) );\n-  VERIFY( lis04.size() == size01 );\n-  VERIFY( lis04.empty() );\n-  \n-  list_type lis05(title01, title01 + N1, alloc01);\n-  size01 = lis05.size();\n-  list_type lis06(title02, title02 + N2, alloc01);\n-  size02 = lis06.size();\n-  \n-  lis05.swap(lis06);\n-  VERIFY( lis05.size() == size02 );\n-  VERIFY( equal(lis05.begin(), lis05.end(), title02) );\n-  VERIFY( lis06.size() == size01 );\n-  VERIFY( equal(lis06.begin(), lis06.end(), title01) );\n-\n-  list_type lis07(title01, title01 + N1, alloc01);\n-  size01 = lis07.size();\n-  list_type lis08(title03, title03 + N3, alloc01);\n-  size02 = lis08.size();\n-\n-  lis07.swap(lis08);\n-  VERIFY( lis07.size() == size02 );\n-  VERIFY( equal(lis07.begin(), lis07.end(), title03) );\n-  VERIFY( lis08.size() == size01 );\n-  VERIFY( equal(lis08.begin(), lis08.end(), title01) );\n-\n-  list_type lis09(title03, title03 + N3, alloc01);\n-  size01 = lis09.size();\n-  list_type lis10(title04, title04 + N4, alloc01);\n-  size02 = lis10.size();\n-\n-  lis09.swap(lis10);\n-  VERIFY( lis09.size() == size02 );\n-  VERIFY( equal(lis09.begin(), lis09.end(), title04) );\n-  VERIFY( lis10.size() == size01 );\n-  VERIFY( equal(lis10.begin(), lis10.end(), title03) );\n-\n-  list_type lis11(title04, title04 + N4, alloc01);\n-  size01 = lis11.size();\n-  list_type lis12(title01, title01 + N1, alloc01);\n-  size02 = lis12.size();\n-\n-  lis11.swap(lis12);\n-  VERIFY( lis11.size() == size02 );\n-  VERIFY( equal(lis11.begin(), lis11.end(), title01) );\n-  VERIFY( lis12.size() == size01 );\n-  VERIFY( equal(lis12.begin(), lis12.end(), title04) );\n-\n-  list_type lis13(title03, title03 + N3, alloc01);\n-  size01 = lis13.size();\n-  list_type lis14(title03, title03 + N3, alloc01);\n-  size02 = lis14.size();\n-\n-  lis13.swap(lis14);\n-  VERIFY( lis13.size() == size02 );\n-  VERIFY( equal(lis13.begin(), lis13.end(), title03) );\n-  VERIFY( lis14.size() == size01 );\n-  VERIFY( equal(lis14.begin(), lis14.end(), title03) );\n-}\n \n int main()\n { "}, {"sha": "2cd68f60c7a113d03bc97b29bc90c4cffce9a799", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/swap/2.h", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F2.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,127 @@\n+// 2005-12-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.3 list::swap\n+\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+// uneq_allocator as a non-empty allocator.\n+template<typename _Tp>\n+void\n+swap2()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  typedef _Tp list_type;\n+  typedef typename list_type::allocator_type allocator_type;\n+  typedef typename list_type::size_type size_type;\n+\n+  const char title01[] = \"Rivers of sand\";\n+  const char title02[] = \"Concret PH\";\n+  const char title03[] = \"Sonatas and Interludes for Prepared Piano\";\n+  const char title04[] = \"never as tired as when i'm waking up\";\n+\n+  const size_t N1 = sizeof(title01);\n+  const size_t N2 = sizeof(title02);\n+  const size_t N3 = sizeof(title03);\n+  const size_t N4 = sizeof(title04);\n+\n+  size_type size01, size02;\n+\n+  allocator_type alloc01(1);\n+\n+  list_type lis01(alloc01);\n+  size01 = lis01.size();\n+  list_type lis02(alloc01);\n+  size02 = lis02.size();\n+  \n+  lis01.swap(lis02);\n+  VERIFY( lis01.size() == size02 );\n+  VERIFY( lis01.empty() );\n+  VERIFY( lis02.size() == size01 );\n+  VERIFY( lis02.empty() );\n+\n+  list_type lis03(alloc01);\n+  size01 = lis03.size();\n+  list_type lis04(title02, title02 + N2, alloc01);\n+  size02 = lis04.size();\n+  \n+  lis03.swap(lis04);\n+  VERIFY( lis03.size() == size02 );\n+  VERIFY( equal(lis03.begin(), lis03.end(), title02) );\n+  VERIFY( lis04.size() == size01 );\n+  VERIFY( lis04.empty() );\n+  \n+  list_type lis05(title01, title01 + N1, alloc01);\n+  size01 = lis05.size();\n+  list_type lis06(title02, title02 + N2, alloc01);\n+  size02 = lis06.size();\n+  \n+  lis05.swap(lis06);\n+  VERIFY( lis05.size() == size02 );\n+  VERIFY( equal(lis05.begin(), lis05.end(), title02) );\n+  VERIFY( lis06.size() == size01 );\n+  VERIFY( equal(lis06.begin(), lis06.end(), title01) );\n+\n+  list_type lis07(title01, title01 + N1, alloc01);\n+  size01 = lis07.size();\n+  list_type lis08(title03, title03 + N3, alloc01);\n+  size02 = lis08.size();\n+\n+  lis07.swap(lis08);\n+  VERIFY( lis07.size() == size02 );\n+  VERIFY( equal(lis07.begin(), lis07.end(), title03) );\n+  VERIFY( lis08.size() == size01 );\n+  VERIFY( equal(lis08.begin(), lis08.end(), title01) );\n+\n+  list_type lis09(title03, title03 + N3, alloc01);\n+  size01 = lis09.size();\n+  list_type lis10(title04, title04 + N4, alloc01);\n+  size02 = lis10.size();\n+\n+  lis09.swap(lis10);\n+  VERIFY( lis09.size() == size02 );\n+  VERIFY( equal(lis09.begin(), lis09.end(), title04) );\n+  VERIFY( lis10.size() == size01 );\n+  VERIFY( equal(lis10.begin(), lis10.end(), title03) );\n+\n+  list_type lis11(title04, title04 + N4, alloc01);\n+  size01 = lis11.size();\n+  list_type lis12(title01, title01 + N1, alloc01);\n+  size02 = lis12.size();\n+\n+  lis11.swap(lis12);\n+  VERIFY( lis11.size() == size02 );\n+  VERIFY( equal(lis11.begin(), lis11.end(), title01) );\n+  VERIFY( lis12.size() == size01 );\n+  VERIFY( equal(lis12.begin(), lis12.end(), title04) );\n+\n+  list_type lis13(title03, title03 + N3, alloc01);\n+  size01 = lis13.size();\n+  list_type lis14(title03, title03 + N3, alloc01);\n+  size02 = lis14.size();\n+\n+  lis13.swap(lis14);\n+  VERIFY( lis13.size() == size02 );\n+  VERIFY( equal(lis13.begin(), lis13.end(), title03) );\n+  VERIFY( lis14.size() == size01 );\n+  VERIFY( equal(lis14.begin(), lis14.end(), title03) );\n+}"}, {"sha": "f994e9b4ae139ba5068fb426d2772d4873f5106c", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/swap/3.cc", "status": "modified", "additions": 1, "deletions": 137, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F3.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -17,144 +17,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.3 list::swap\n-\n+#include \"3.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n-\n-// uneq_allocator, two different personalities.\n-template<typename _Tp>\n-void\n-swap3()\n-{\n-  bool test __attribute__((unused)) = true;\n-  using namespace std;\n-\n-  typedef _Tp list_type;\n-  typedef typename list_type::allocator_type allocator_type;\n-  typedef typename list_type::size_type size_type;\n-\n-  const char title01[] = \"Rivers of sand\";\n-  const char title02[] = \"Concret PH\";\n-  const char title03[] = \"Sonatas and Interludes for Prepared Piano\";\n-  const char title04[] = \"never as tired as when i'm waking up\";\n-\n-  const size_t N1 = sizeof(title01);\n-  const size_t N2 = sizeof(title02);\n-  const size_t N3 = sizeof(title03);\n-  const size_t N4 = sizeof(title04);\n-\n-  size_type size01, size02;\n-\n-  allocator_type alloc01(1), alloc02(2);\n-  int personality01, personality02;\n-\n-  list_type lis01(alloc01);\n-  size01 = lis01.size();\n-  personality01 = lis01.get_allocator().get_personality();\n-  list_type lis02(alloc02);\n-  size02 = lis02.size();\n-  personality02 = lis02.get_allocator().get_personality();\n-\n-  lis01.swap(lis02);\n-  VERIFY( lis01.size() == size02 );\n-  VERIFY( lis01.empty() );\n-  VERIFY( lis02.size() == size01 );\n-  VERIFY( lis02.empty() );\n-  VERIFY( lis01.get_allocator().get_personality() == personality02 );\n-  VERIFY( lis02.get_allocator().get_personality() == personality01 );\n-\n-  list_type lis03(alloc02);\n-  size01 = lis03.size();\n-  personality01 = lis03.get_allocator().get_personality();\n-  list_type lis04(title02, title02 + N2, alloc01);\n-  size02 = lis04.size();\n-  personality02 = lis04.get_allocator().get_personality();\n-\n-  lis03.swap(lis04);\n-  VERIFY( lis03.size() == size02 );\n-  VERIFY( equal(lis03.begin(), lis03.end(), title02) );\n-  VERIFY( lis04.size() == size01 );\n-  VERIFY( lis04.empty() );\n-  VERIFY( lis03.get_allocator().get_personality() == personality02 );\n-  VERIFY( lis04.get_allocator().get_personality() == personality01 );\n-  \n-  list_type lis05(title01, title01 + N1, alloc01);\n-  size01 = lis05.size();\n-  personality01 = lis05.get_allocator().get_personality();\n-  list_type lis06(title02, title02 + N2, alloc02);\n-  size02 = lis06.size();\n-  personality02 = lis06.get_allocator().get_personality();\n-\n-  lis05.swap(lis06);\n-  VERIFY( lis05.size() == size02 );\n-  VERIFY( equal(lis05.begin(), lis05.end(), title02) );\n-  VERIFY( lis06.size() == size01 );\n-  VERIFY( equal(lis06.begin(), lis06.end(), title01) );\n-  VERIFY( lis05.get_allocator().get_personality() == personality02 );\n-  VERIFY( lis06.get_allocator().get_personality() == personality01 );\n-\n-  list_type lis07(title01, title01 + N1, alloc02);\n-  size01 = lis07.size();\n-  personality01 = lis07.get_allocator().get_personality();\n-  list_type lis08(title03, title03 + N3, alloc01);\n-  size02 = lis08.size();\n-  personality02 = lis08.get_allocator().get_personality();\n-\n-  lis07.swap(lis08);\n-  VERIFY( lis07.size() == size02 );\n-  VERIFY( equal(lis07.begin(), lis07.end(), title03) );\n-  VERIFY( lis08.size() == size01 );\n-  VERIFY( equal(lis08.begin(), lis08.end(), title01) );\n-  VERIFY( lis07.get_allocator().get_personality() == personality02 );\n-  VERIFY( lis08.get_allocator().get_personality() == personality01 );\n-\n-  list_type lis09(title03, title03 + N3, alloc01);\n-  size01 = lis09.size();\n-  personality01 = lis09.get_allocator().get_personality();\n-  list_type lis10(title04, title04 + N4, alloc02);\n-  size02 = lis10.size();\n-  personality02 = lis10.get_allocator().get_personality();\n-\n-  lis09.swap(lis10);\n-  VERIFY( lis09.size() == size02 );\n-  VERIFY( equal(lis09.begin(), lis09.end(), title04) );\n-  VERIFY( lis10.size() == size01 );\n-  VERIFY( equal(lis10.begin(), lis10.end(), title03) );\n-  VERIFY( lis09.get_allocator().get_personality() == personality02 );\n-  VERIFY( lis10.get_allocator().get_personality() == personality01 );\n-\n-  list_type lis11(title04, title04 + N4, alloc02);\n-  size01 = lis11.size();\n-  personality01 = lis11.get_allocator().get_personality();\n-  list_type lis12(title01, title01 + N1, alloc01);\n-  size02 = lis12.size();\n-  personality02 = lis12.get_allocator().get_personality();\n-\n-  lis11.swap(lis12);\n-  VERIFY( lis11.size() == size02 );\n-  VERIFY( equal(lis11.begin(), lis11.end(), title01) );\n-  VERIFY( lis12.size() == size01 );\n-  VERIFY( equal(lis12.begin(), lis12.end(), title04) );\n-  VERIFY( lis11.get_allocator().get_personality() == personality02 );\n-  VERIFY( lis12.get_allocator().get_personality() == personality01 );\n-\n-  list_type lis13(title03, title03 + N3, alloc01);\n-  size01 = lis13.size();\n-  personality01 = lis13.get_allocator().get_personality();\n-  list_type lis14(title03, title03 + N3, alloc02);\n-  size02 = lis14.size();\n-  personality02 = lis14.get_allocator().get_personality();\n-\n-  lis13.swap(lis14);\n-  VERIFY( lis13.size() == size02 );\n-  VERIFY( equal(lis13.begin(), lis13.end(), title03) );\n-  VERIFY( lis14.size() == size01 );\n-  VERIFY( equal(lis14.begin(), lis14.end(), title03) );\n-  VERIFY( lis13.get_allocator().get_personality() == personality02 );\n-  VERIFY( lis14.get_allocator().get_personality() == personality01 );\n-}\n \n int main()\n { "}, {"sha": "b4f2cd097d8e20624578599b4162fbd5b8b2f460", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/swap/3.h", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F3.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,156 @@\n+// 2005-12-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.3 list::swap\n+\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+// uneq_allocator, two different personalities.\n+template<typename _Tp>\n+void\n+swap3()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  typedef _Tp list_type;\n+  typedef typename list_type::allocator_type allocator_type;\n+  typedef typename list_type::size_type size_type;\n+\n+  const char title01[] = \"Rivers of sand\";\n+  const char title02[] = \"Concret PH\";\n+  const char title03[] = \"Sonatas and Interludes for Prepared Piano\";\n+  const char title04[] = \"never as tired as when i'm waking up\";\n+\n+  const size_t N1 = sizeof(title01);\n+  const size_t N2 = sizeof(title02);\n+  const size_t N3 = sizeof(title03);\n+  const size_t N4 = sizeof(title04);\n+\n+  size_type size01, size02;\n+\n+  allocator_type alloc01(1), alloc02(2);\n+  int personality01, personality02;\n+\n+  list_type lis01(alloc01);\n+  size01 = lis01.size();\n+  personality01 = lis01.get_allocator().get_personality();\n+  list_type lis02(alloc02);\n+  size02 = lis02.size();\n+  personality02 = lis02.get_allocator().get_personality();\n+\n+  lis01.swap(lis02);\n+  VERIFY( lis01.size() == size02 );\n+  VERIFY( lis01.empty() );\n+  VERIFY( lis02.size() == size01 );\n+  VERIFY( lis02.empty() );\n+  VERIFY( lis01.get_allocator().get_personality() == personality02 );\n+  VERIFY( lis02.get_allocator().get_personality() == personality01 );\n+\n+  list_type lis03(alloc02);\n+  size01 = lis03.size();\n+  personality01 = lis03.get_allocator().get_personality();\n+  list_type lis04(title02, title02 + N2, alloc01);\n+  size02 = lis04.size();\n+  personality02 = lis04.get_allocator().get_personality();\n+\n+  lis03.swap(lis04);\n+  VERIFY( lis03.size() == size02 );\n+  VERIFY( equal(lis03.begin(), lis03.end(), title02) );\n+  VERIFY( lis04.size() == size01 );\n+  VERIFY( lis04.empty() );\n+  VERIFY( lis03.get_allocator().get_personality() == personality02 );\n+  VERIFY( lis04.get_allocator().get_personality() == personality01 );\n+  \n+  list_type lis05(title01, title01 + N1, alloc01);\n+  size01 = lis05.size();\n+  personality01 = lis05.get_allocator().get_personality();\n+  list_type lis06(title02, title02 + N2, alloc02);\n+  size02 = lis06.size();\n+  personality02 = lis06.get_allocator().get_personality();\n+\n+  lis05.swap(lis06);\n+  VERIFY( lis05.size() == size02 );\n+  VERIFY( equal(lis05.begin(), lis05.end(), title02) );\n+  VERIFY( lis06.size() == size01 );\n+  VERIFY( equal(lis06.begin(), lis06.end(), title01) );\n+  VERIFY( lis05.get_allocator().get_personality() == personality02 );\n+  VERIFY( lis06.get_allocator().get_personality() == personality01 );\n+\n+  list_type lis07(title01, title01 + N1, alloc02);\n+  size01 = lis07.size();\n+  personality01 = lis07.get_allocator().get_personality();\n+  list_type lis08(title03, title03 + N3, alloc01);\n+  size02 = lis08.size();\n+  personality02 = lis08.get_allocator().get_personality();\n+\n+  lis07.swap(lis08);\n+  VERIFY( lis07.size() == size02 );\n+  VERIFY( equal(lis07.begin(), lis07.end(), title03) );\n+  VERIFY( lis08.size() == size01 );\n+  VERIFY( equal(lis08.begin(), lis08.end(), title01) );\n+  VERIFY( lis07.get_allocator().get_personality() == personality02 );\n+  VERIFY( lis08.get_allocator().get_personality() == personality01 );\n+\n+  list_type lis09(title03, title03 + N3, alloc01);\n+  size01 = lis09.size();\n+  personality01 = lis09.get_allocator().get_personality();\n+  list_type lis10(title04, title04 + N4, alloc02);\n+  size02 = lis10.size();\n+  personality02 = lis10.get_allocator().get_personality();\n+\n+  lis09.swap(lis10);\n+  VERIFY( lis09.size() == size02 );\n+  VERIFY( equal(lis09.begin(), lis09.end(), title04) );\n+  VERIFY( lis10.size() == size01 );\n+  VERIFY( equal(lis10.begin(), lis10.end(), title03) );\n+  VERIFY( lis09.get_allocator().get_personality() == personality02 );\n+  VERIFY( lis10.get_allocator().get_personality() == personality01 );\n+\n+  list_type lis11(title04, title04 + N4, alloc02);\n+  size01 = lis11.size();\n+  personality01 = lis11.get_allocator().get_personality();\n+  list_type lis12(title01, title01 + N1, alloc01);\n+  size02 = lis12.size();\n+  personality02 = lis12.get_allocator().get_personality();\n+\n+  lis11.swap(lis12);\n+  VERIFY( lis11.size() == size02 );\n+  VERIFY( equal(lis11.begin(), lis11.end(), title01) );\n+  VERIFY( lis12.size() == size01 );\n+  VERIFY( equal(lis12.begin(), lis12.end(), title04) );\n+  VERIFY( lis11.get_allocator().get_personality() == personality02 );\n+  VERIFY( lis12.get_allocator().get_personality() == personality01 );\n+\n+  list_type lis13(title03, title03 + N3, alloc01);\n+  size01 = lis13.size();\n+  personality01 = lis13.get_allocator().get_personality();\n+  list_type lis14(title03, title03 + N3, alloc02);\n+  size02 = lis14.size();\n+  personality02 = lis14.get_allocator().get_personality();\n+\n+  lis13.swap(lis14);\n+  VERIFY( lis13.size() == size02 );\n+  VERIFY( equal(lis13.begin(), lis13.end(), title03) );\n+  VERIFY( lis14.size() == size01 );\n+  VERIFY( equal(lis14.begin(), lis14.end(), title03) );\n+  VERIFY( lis13.get_allocator().get_personality() == personality02 );\n+  VERIFY( lis14.get_allocator().get_personality() == personality01 );\n+}"}, {"sha": "fbe06634e6ffaaf47a4de31e84f6e9c42e439720", "filename": "libstdc++-v3/testsuite/23_containers/list/moveable.cc", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmoveable.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -17,31 +17,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// NOTE: This makes use of the fact that we know how moveable\n-// is implemented on list (via swap). If the implementation changed\n-// this test may begin to fail.\n-\n+#include \"moveable.h\"\n #include <list>\n-#include <utility>\n-#include <testsuite_hooks.h>\n-\n-template<typename _Tp>\n-  void\n-  test_moveable()\n-  {\n-    bool test __attribute__((unused)) = true;\n-\n-    typedef _Tp list_type;\n-    \n-    list_type a,b;\n-    a.push_back(1);\n-    b = std::move(a);\n-    VERIFY( b.size() == 1 && *b.begin() == 1 && a.size() == 0 );\n-    \n-    list_type c(std::move(b));\n-    VERIFY( c.size() == 1 && *c.begin() == 1 );\n-    VERIFY( b.size() == 0 );\n-  }\n \n int main()\n {"}, {"sha": "1f11d6221e79f68e02513ec5621240a164ca8f44", "filename": "libstdc++-v3/testsuite/23_containers/list/moveable.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmoveable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmoveable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmoveable.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on list (via swap). If the implementation changed\n+// this test may begin to fail.\n+\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+template<typename _Tp>\n+  void\n+  test_moveable()\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    typedef _Tp list_type;\n+    \n+    list_type a,b;\n+    a.push_back(1);\n+    b = std::move(a);\n+    VERIFY( b.size() == 1 && *b.begin() == 1 && a.size() == 0 );\n+    \n+    list_type c(std::move(b));\n+    VERIFY( c.size() == 1 && *c.begin() == 1 );\n+    VERIFY( b.size() == 0 );\n+  }"}, {"sha": "2c98213e2a52335885262ec018fff3da7aaa42bc", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/1.cc", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F1.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,58 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.4 list operations [lib.list.ops]\n-\n+#include \"1.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-\n-// splice(p, x) + remove + reverse\n-template<typename _Tp>\n-void\n-operations01()\n-{\n-  bool test __attribute__((unused)) = true;\n-  typedef _Tp list_type;\n-  typedef typename list_type::iterator iterator;\n-\n-  const int K = 417;\n-  const int A[] = {1, 2, 3, 4, 5};\n-  const int B[] = {K, K, K, K, K};\n-  const std::size_t N = sizeof(A) / sizeof(int);\n-  const std::size_t M = sizeof(B) / sizeof(int);\n-\n-  list_type list0101(A, A + N);\n-  list_type list0102(B, B + M);\n-  iterator p = list0101.begin();\n-\n-  VERIFY(list0101.size() == N);\n-  VERIFY(list0102.size() == M);\n-\n-  ++p;\n-  list0101.splice(p, list0102); // [1 K K K K K 2 3 4 5]\n-  VERIFY(list0101.size() == N + M);\n-  VERIFY(list0102.size() == 0);\n-\n-  // remove range from middle\n-  list0101.remove(K);\n-  VERIFY(list0101.size() == N);\n-\n-  // remove first element\n-  list0101.remove(1);\n-  VERIFY(list0101.size() == N - 1);\n-\n-  // remove last element\n-  list0101.remove(5);\n-  VERIFY(list0101.size() == N - 2);\n-\n-  // reverse\n-  list0101.reverse();\n-  p = list0101.begin();\n-  VERIFY(*p == 4); ++p;\n-  VERIFY(*p == 3); ++p;\n-  VERIFY(*p == 2); ++p;\n-  VERIFY(p == list0101.end());\n-}\n \n int main()\n {"}, {"sha": "2f3f9df94659874a4446bce6f75bb823d1c8da9d", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/1.h", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F1.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2001, 2004, 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.4 list operations [lib.list.ops]\n+\n+#include <testsuite_hooks.h>\n+\n+// splice(p, x) + remove + reverse\n+template<typename _Tp>\n+void\n+operations01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator;\n+\n+  const int K = 417;\n+  const int A[] = {1, 2, 3, 4, 5};\n+  const int B[] = {K, K, K, K, K};\n+  const std::size_t N = sizeof(A) / sizeof(int);\n+  const std::size_t M = sizeof(B) / sizeof(int);\n+\n+  list_type list0101(A, A + N);\n+  list_type list0102(B, B + M);\n+  iterator p = list0101.begin();\n+\n+  VERIFY(list0101.size() == N);\n+  VERIFY(list0102.size() == M);\n+\n+  ++p;\n+  list0101.splice(p, list0102); // [1 K K K K K 2 3 4 5]\n+  VERIFY(list0101.size() == N + M);\n+  VERIFY(list0102.size() == 0);\n+\n+  // remove range from middle\n+  list0101.remove(K);\n+  VERIFY(list0101.size() == N);\n+\n+  // remove first element\n+  list0101.remove(1);\n+  VERIFY(list0101.size() == N - 1);\n+\n+  // remove last element\n+  list0101.remove(5);\n+  VERIFY(list0101.size() == N - 2);\n+\n+  // reverse\n+  list0101.reverse();\n+  p = list0101.begin();\n+  VERIFY(*p == 4); ++p;\n+  VERIFY(*p == 3); ++p;\n+  VERIFY(*p == 2); ++p;\n+  VERIFY(p == list0101.end());\n+}"}, {"sha": "100066fc29bc6615dfcc5814f35f6ed033b6516a", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/2.cc", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F2.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,44 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.4 list operations [lib.list.ops]\n-\n+#include \"2.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-\n-// splice(p, x, i) + remove_if + operator==\n-template<typename _Tp>\n-void\n-operations02()\n-{\n-  bool test __attribute__((unused)) = true;\n-  typedef _Tp list_type;\n-  typedef typename list_type::iterator iterator;\n-\n-  const int A[] = {1, 2, 3, 4, 5};\n-  const int B[] = {2, 1, 3, 4, 5};\n-  const int C[] = {1, 3, 4, 5, 2};\n-  const int N = sizeof(A) / sizeof(int);\n-  list_type list0201(A, A + N);\n-  list_type list0202(A, A + N);\n-  list_type list0203(B, B + N);\n-  list_type list0204(C, C + N);\n-  iterator i = list0201.begin();\n-\n-  // result should be unchanged\n-  list0201.splice(list0201.begin(), list0201, i);\n-  VERIFY(list0201 == list0202);\n-\n-  // result should be [2 1 3 4 5]\n-  ++i;\n-  list0201.splice(list0201.begin(), list0201, i);\n-  VERIFY(list0201 != list0202);\n-  VERIFY(list0201 == list0203);\n-\n-  // result should be [1 3 4 5 2]\n-  list0201.splice(list0201.end(), list0201, i);\n-  VERIFY(list0201 == list0204);\n-}\n \n int main()\n {"}, {"sha": "8eb3da4e78095f198efb5ab16aa6a3efb9b86bc5", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/2.h", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F2.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,54 @@\n+// Copyright (C) 2001, 2004, 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.4 list operations [lib.list.ops]\n+\n+#include <testsuite_hooks.h>\n+\n+// splice(p, x, i) + remove_if + operator==\n+template<typename _Tp>\n+void\n+operations02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator;\n+\n+  const int A[] = {1, 2, 3, 4, 5};\n+  const int B[] = {2, 1, 3, 4, 5};\n+  const int C[] = {1, 3, 4, 5, 2};\n+  const int N = sizeof(A) / sizeof(int);\n+  list_type list0201(A, A + N);\n+  list_type list0202(A, A + N);\n+  list_type list0203(B, B + N);\n+  list_type list0204(C, C + N);\n+  iterator i = list0201.begin();\n+\n+  // result should be unchanged\n+  list0201.splice(list0201.begin(), list0201, i);\n+  VERIFY(list0201 == list0202);\n+\n+  // result should be [2 1 3 4 5]\n+  ++i;\n+  list0201.splice(list0201.begin(), list0201, i);\n+  VERIFY(list0201 != list0202);\n+  VERIFY(list0201 == list0203);\n+\n+  // result should be [1 3 4 5 2]\n+  list0201.splice(list0201.end(), list0201, i);\n+  VERIFY(list0201 == list0204);\n+}"}, {"sha": "53570b4a694bbb93e830a4a76f0e55eaaf1304fc", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/3.cc", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F3.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,58 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.4 list operations [lib.list.ops]\n-\n+#include \"3.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-\n-// splice(p, x, f, l) + sort + merge + unique\n-template<typename _Tp>\n-void\n-operations03()\n-{\n-  bool test __attribute__((unused)) = true;\n-  typedef _Tp list_type;\n-  typedef typename list_type::iterator iterator;\n-\n-  const int A[] = {103, 203, 603, 303, 403, 503};\n-  const int B[] = {417, 417, 417, 417, 417};\n-  const int E[] = {103, 417, 417, 203, 603, 303, 403, 503};\n-  const int F[] = {103, 203, 303, 403, 417, 417, 503, 603};\n-  const int C[] = {103, 203, 303, 403, 417, 417, 417, 417, 417, 503, 603};\n-  const int D[] = {103, 203, 303, 403, 417, 503, 603};\n-  const int N = sizeof(A) / sizeof(int);\n-  const int M = sizeof(B) / sizeof(int);\n-  const int P = sizeof(C) / sizeof(int);\n-  const int Q = sizeof(D) / sizeof(int);\n-  const int R = sizeof(E) / sizeof(int);\n-\n-  list_type list0301(A, A + N);\n-  list_type list0302(B, B + M);\n-  list_type list0303(C, C + P);\n-  list_type list0304(D, D + Q);\n-  list_type list0305(E, E + R);\n-  list_type list0306(F, F + R);\n-  iterator p = list0301.begin();\n-  iterator q = list0302.begin();\n-\n-  ++p; ++q; ++q;\n-  list0301.splice(p, list0302, list0302.begin(), q);\n-  VERIFY(list0301 == list0305);\n-  VERIFY(list0301.size() == N + 2);\n-  VERIFY(list0302.size() == M - 2);\n-\n-  list0301.sort();\n-  VERIFY(list0301 == list0306);\n-\n-  list0301.merge(list0302);\n-  VERIFY(list0301.size() == N + M);\n-  VERIFY(list0302.size() == 0);\n-  VERIFY(list0301 == list0303);\n-\n-  list0301.unique();\n-  VERIFY(list0301 == list0304);\n-}\n \n int main(void)\n {"}, {"sha": "4d28daea12bb49e5fec799ea20ec3366ba9d83a2", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/3.h", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F3.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2001, 2004, 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.4 list operations [lib.list.ops]\n+\n+#include <testsuite_hooks.h>\n+\n+// splice(p, x, f, l) + sort + merge + unique\n+template<typename _Tp>\n+void\n+operations03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator;\n+\n+  const int A[] = {103, 203, 603, 303, 403, 503};\n+  const int B[] = {417, 417, 417, 417, 417};\n+  const int E[] = {103, 417, 417, 203, 603, 303, 403, 503};\n+  const int F[] = {103, 203, 303, 403, 417, 417, 503, 603};\n+  const int C[] = {103, 203, 303, 403, 417, 417, 417, 417, 417, 503, 603};\n+  const int D[] = {103, 203, 303, 403, 417, 503, 603};\n+  const int N = sizeof(A) / sizeof(int);\n+  const int M = sizeof(B) / sizeof(int);\n+  const int P = sizeof(C) / sizeof(int);\n+  const int Q = sizeof(D) / sizeof(int);\n+  const int R = sizeof(E) / sizeof(int);\n+\n+  list_type list0301(A, A + N);\n+  list_type list0302(B, B + M);\n+  list_type list0303(C, C + P);\n+  list_type list0304(D, D + Q);\n+  list_type list0305(E, E + R);\n+  list_type list0306(F, F + R);\n+  iterator p = list0301.begin();\n+  iterator q = list0302.begin();\n+\n+  ++p; ++q; ++q;\n+  list0301.splice(p, list0302, list0302.begin(), q);\n+  VERIFY(list0301 == list0305);\n+  VERIFY(list0301.size() == N + 2);\n+  VERIFY(list0302.size() == M - 2);\n+\n+  list0301.sort();\n+  VERIFY(list0301 == list0306);\n+\n+  list0301.merge(list0302);\n+  VERIFY(list0301.size() == N + M);\n+  VERIFY(list0302.size() == 0);\n+  VERIFY(list0301 == list0303);\n+\n+  list0301.unique();\n+  VERIFY(list0301 == list0304);\n+}"}, {"sha": "a220b9b331f09c71afc448c6fed1b67df6792d8c", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/4.cc", "status": "modified", "additions": 1, "deletions": 74, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F4.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -15,81 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.4 list operations [lib.list.ops]\n-\n+#include \"4.h\"\n #include <list>\n-#include <testsuite_hooks.h>\n-\n-// A comparison predicate to order by rightmost digit.  Tracks call\n-// counts for performance checks.\n-struct CompLastLt\n-{\n-  bool operator()(const int x, const int y) \n-  { ++itsCount; return x % 10 < y % 10; }\n-  static int count() { return itsCount; }\n-  static void reset() { itsCount = 0; }\n-  static int itsCount;\n-};\n-\n-int CompLastLt::itsCount;\n-\n-struct CompLastEq\n-{\n-  bool operator()(const int x, const int y) \n-  { ++itsCount; return x % 10 == y % 10; }\n-  static int count() { return itsCount; }\n-  static void reset() { itsCount = 0; }\n-  static int itsCount;\n-};\n-\n-int CompLastEq::itsCount;\n-\n-// sort(pred) + merge(pred) + unique(pred)\n-// also checks performance requirements\n-template<typename _Tp>\n-void\n-operations04()\n-{\n-  bool test __attribute__((unused)) = true;\n-  typedef _Tp list_type;\n-\n-  const int A[] = {1, 2, 3, 4, 5, 6};\n-  const int B[] = {12, 15, 13, 14, 11};\n-  const int C[] = {11, 12, 13, 14, 15};\n-  const int D[] = {1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6};\n-  const int N = sizeof(A) / sizeof(int);\n-  const int M = sizeof(B) / sizeof(int);\n-  const int Q = sizeof(D) / sizeof(int);\n-\n-  list_type list0401(A, A + N);\n-  list_type list0402(B, B + M);\n-  list_type list0403(C, C + M);\n-  list_type list0404(D, D + Q);\n-  list_type list0405(A, A + N);\n-\n-  // sort B\n-  CompLastLt lt;\n-\n-  CompLastLt::reset();\n-  list0402.sort(lt);\n-  VERIFY(list0402 == list0403);\n-\n-  CompLastLt::reset();\n-  list0401.merge(list0402, lt);\n-  VERIFY(list0401 == list0404);\n-#ifndef _GLIBCXX_DEBUG\n-  VERIFY(lt.count() <= (N + M - 1));\n-#endif\n-\n-  CompLastEq eq;\n-\n-  CompLastEq::reset();\n-  list0401.unique(eq);\n-  VERIFY(list0401 == list0405);\n-#ifndef _GLIBCXX_DEBUG\n-  VERIFY(eq.count() == (N + M - 1));\n-#endif\n-}\n \n int main()\n {"}, {"sha": "0a3ea4d234d4ba3c21756bad840cc4bd6f6571fd", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/4.h", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F4.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,92 @@\n+// Copyright (C) 2001, 2004, 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.4 list operations [lib.list.ops]\n+\n+#include <testsuite_hooks.h>\n+\n+// A comparison predicate to order by rightmost digit.  Tracks call\n+// counts for performance checks.\n+struct CompLastLt\n+{\n+  bool operator()(const int x, const int y) \n+  { ++itsCount; return x % 10 < y % 10; }\n+  static int count() { return itsCount; }\n+  static void reset() { itsCount = 0; }\n+  static int itsCount;\n+};\n+\n+int CompLastLt::itsCount;\n+\n+struct CompLastEq\n+{\n+  bool operator()(const int x, const int y) \n+  { ++itsCount; return x % 10 == y % 10; }\n+  static int count() { return itsCount; }\n+  static void reset() { itsCount = 0; }\n+  static int itsCount;\n+};\n+\n+int CompLastEq::itsCount;\n+\n+// sort(pred) + merge(pred) + unique(pred)\n+// also checks performance requirements\n+template<typename _Tp>\n+void\n+operations04()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+\n+  const int A[] = {1, 2, 3, 4, 5, 6};\n+  const int B[] = {12, 15, 13, 14, 11};\n+  const int C[] = {11, 12, 13, 14, 15};\n+  const int D[] = {1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6};\n+  const int N = sizeof(A) / sizeof(int);\n+  const int M = sizeof(B) / sizeof(int);\n+  const int Q = sizeof(D) / sizeof(int);\n+\n+  list_type list0401(A, A + N);\n+  list_type list0402(B, B + M);\n+  list_type list0403(C, C + M);\n+  list_type list0404(D, D + Q);\n+  list_type list0405(A, A + N);\n+\n+  // sort B\n+  CompLastLt lt;\n+\n+  CompLastLt::reset();\n+  list0402.sort(lt);\n+  VERIFY(list0402 == list0403);\n+\n+  CompLastLt::reset();\n+  list0401.merge(list0402, lt);\n+  VERIFY(list0401 == list0404);\n+#ifndef _GLIBCXX_DEBUG\n+  VERIFY(lt.count() <= (N + M - 1));\n+#endif\n+\n+  CompLastEq eq;\n+\n+  CompLastEq::reset();\n+  list0401.unique(eq);\n+  VERIFY(list0401 == list0405);\n+#ifndef _GLIBCXX_DEBUG\n+  VERIFY(eq.count() == (N + M - 1));\n+#endif\n+}\n+"}, {"sha": "ad99c27ae42a9e838363dadfb0da528acdafb93d", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/5.cc", "status": "modified", "additions": 1, "deletions": 115, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F5.cc?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -17,122 +17,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 23.2.2.4 list operations [lib.list.ops]\n-\n+#include \"5.h\"\n #include <list>\n-#include <stdexcept>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n-\n-// Check the splice (and merge) bits of N1599.\n-template<typename _Tp>\n-void\n-operations05()\n-{\n-  bool test __attribute__((unused)) = true;\n-  \n-  typedef _Tp list_type;\n-  typedef typename list_type::allocator_type allocator_type;\n-\n-  const int data1[] = {1, 2, 3, 4, 5};\n-  const int data2[] = {6, 7, 8, 9, 10};\n-  const size_t N1 = sizeof(data1) / sizeof(int);\n-  const size_t N2 = sizeof(data2) / sizeof(int);\n-  \n-  allocator_type alloc01(1), alloc02(2);\n-\n-  list_type l01(data1, data1 + N1, alloc01);\n-  const list_type l01_ref = l01;\n-\n-  list_type l02(data2, data2 + N2, alloc02);\n-  const list_type l02_ref = l02;\n-\n-  bool catched = false;\n-\n-  try\n-    {\n-      l01.splice(l01.begin(), l02);\n-    }\n-  catch(std::runtime_error&)\n-    {\n-      catched = true;\n-    }\n-  catch(...)\n-    {\n-      VERIFY( false );\n-    }\n-  VERIFY( catched );\n-  VERIFY( l01 == l01_ref );\n-  VERIFY( l02 == l02_ref );\n-  \n-  catched = false;\n-  try\n-    {\n-      l01.splice(l01.begin(), l02, l02.begin());\n-    }\n-  catch(std::runtime_error&)\n-    {\n-      catched = true;\n-    }\n-  catch(...)\n-    {\n-      VERIFY( false );\n-    }\n-  VERIFY( catched );\n-  VERIFY( l01 == l01_ref );\n-  VERIFY( l02 == l02_ref );\n-\n-  catched = false;\n-  try\n-    {\n-      l01.splice(l01.begin(), l02, l02.begin(), l02.end());\n-    }\n-  catch(std::runtime_error&)\n-    {\n-      catched = true;\n-    }\n-  catch(...)\n-    {\n-      VERIFY( false );\n-    }\n-  VERIFY( catched );\n-  VERIFY( l01 == l01_ref );\n-  VERIFY( l02 == l02_ref );\n-\n-  catched = false;\n-  try\n-    {\n-      l01.merge(l02);\n-    }\n-  catch(std::runtime_error&)\n-    {\n-      catched = true;\n-    }\n-  catch(...)\n-    {\n-      VERIFY( false );\n-    }\n-  VERIFY( catched );\n-  VERIFY( l01 == l01_ref );\n-  VERIFY( l02 == l02_ref );\n-\n-  catched = false;\n-  try\n-    {\n-      l01.merge(l02, std::less<int>());\n-    }\n-  catch(std::runtime_error&)\n-    {\n-      catched = true;\n-    }\n-  catch(...)\n-    {\n-      VERIFY( false );\n-    }\n-  VERIFY( catched );\n-  VERIFY( l01 == l01_ref );\n-  VERIFY( l02 == l02_ref );\n-}\n \n int main()\n {"}, {"sha": "2b54d5195ffdee664d8742ebc3dabc488da7e189", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/5.h", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a51750b98cbff008e5388946ad65bd221fe079/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F5.h?ref=a9a51750b98cbff008e5388946ad65bd221fe079", "patch": "@@ -0,0 +1,134 @@\n+// 2006-01-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.4 list operations [lib.list.ops]\n+\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+// Check the splice (and merge) bits of N1599.\n+template<typename _Tp>\n+void\n+operations05()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  typedef _Tp list_type;\n+  typedef typename list_type::allocator_type allocator_type;\n+\n+  const int data1[] = {1, 2, 3, 4, 5};\n+  const int data2[] = {6, 7, 8, 9, 10};\n+  const size_t N1 = sizeof(data1) / sizeof(int);\n+  const size_t N2 = sizeof(data2) / sizeof(int);\n+  \n+  allocator_type alloc01(1), alloc02(2);\n+\n+  list_type l01(data1, data1 + N1, alloc01);\n+  const list_type l01_ref = l01;\n+\n+  list_type l02(data2, data2 + N2, alloc02);\n+  const list_type l02_ref = l02;\n+\n+  bool catched = false;\n+\n+  try\n+    {\n+      l01.splice(l01.begin(), l02);\n+    }\n+  catch(std::runtime_error&)\n+    {\n+      catched = true;\n+    }\n+  catch(...)\n+    {\n+      VERIFY( false );\n+    }\n+  VERIFY( catched );\n+  VERIFY( l01 == l01_ref );\n+  VERIFY( l02 == l02_ref );\n+  \n+  catched = false;\n+  try\n+    {\n+      l01.splice(l01.begin(), l02, l02.begin());\n+    }\n+  catch(std::runtime_error&)\n+    {\n+      catched = true;\n+    }\n+  catch(...)\n+    {\n+      VERIFY( false );\n+    }\n+  VERIFY( catched );\n+  VERIFY( l01 == l01_ref );\n+  VERIFY( l02 == l02_ref );\n+\n+  catched = false;\n+  try\n+    {\n+      l01.splice(l01.begin(), l02, l02.begin(), l02.end());\n+    }\n+  catch(std::runtime_error&)\n+    {\n+      catched = true;\n+    }\n+  catch(...)\n+    {\n+      VERIFY( false );\n+    }\n+  VERIFY( catched );\n+  VERIFY( l01 == l01_ref );\n+  VERIFY( l02 == l02_ref );\n+\n+  catched = false;\n+  try\n+    {\n+      l01.merge(l02);\n+    }\n+  catch(std::runtime_error&)\n+    {\n+      catched = true;\n+    }\n+  catch(...)\n+    {\n+      VERIFY( false );\n+    }\n+  VERIFY( catched );\n+  VERIFY( l01 == l01_ref );\n+  VERIFY( l02 == l02_ref );\n+\n+  catched = false;\n+  try\n+    {\n+      l01.merge(l02, std::less<int>());\n+    }\n+  catch(std::runtime_error&)\n+    {\n+      catched = true;\n+    }\n+  catch(...)\n+    {\n+      VERIFY( false );\n+    }\n+  VERIFY( catched );\n+  VERIFY( l01 == l01_ref );\n+  VERIFY( l02 == l02_ref );\n+}"}]}