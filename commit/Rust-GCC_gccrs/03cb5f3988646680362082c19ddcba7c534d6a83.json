{"sha": "03cb5f3988646680362082c19ddcba7c534d6a83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNjYjVmMzk4ODY0NjY4MDM2MjA4MmMxOWRkY2JhN2M1MzRkNmE4Mw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-11-09T13:43:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-11-09T13:43:02Z"}, "message": "re PR tree-optimization/51039 (ICE: in estimate_function_body_sizes, at ipa-inline-analysis.c:1977 with -finline-small-functions -fno-ipa-pure-const and passing incompatible function ptr)\n\n2011-11-09  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/51039\n\t* tree-cfg.c (verify_gimple_call): Verify that\n\tgimple_call_cannot_inline_p is returning a conservative\n\tcorrect result according to gimple_check_call_matching_types.\n\t* ipa-inline-analysis.c (estimate_function_body_sizes): Remove\n\tcode dealing with un-inlinablility.\n\t* gimple-streamer-in.c (input_gimple_stmt): Update the\n\tnon-inlinable flag.\n\n\t* gcc.dg/pr51039.c: New testcase.\n\nFrom-SVN: r181205", "tree": {"sha": "524fa049f2662f6ef1b7960ace71e77bbaa25b55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/524fa049f2662f6ef1b7960ace71e77bbaa25b55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03cb5f3988646680362082c19ddcba7c534d6a83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03cb5f3988646680362082c19ddcba7c534d6a83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03cb5f3988646680362082c19ddcba7c534d6a83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03cb5f3988646680362082c19ddcba7c534d6a83/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c4ac6e9400db96df9e82434acc513060853ed2e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ac6e9400db96df9e82434acc513060853ed2e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4ac6e9400db96df9e82434acc513060853ed2e1"}], "stats": {"total": 64, "additions": 50, "deletions": 14}, "files": [{"sha": "63da104969f8dd5c9412009ad52b5aa194dae3a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cb5f3988646680362082c19ddcba7c534d6a83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cb5f3988646680362082c19ddcba7c534d6a83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03cb5f3988646680362082c19ddcba7c534d6a83", "patch": "@@ -1,3 +1,14 @@\n+2011-11-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/51039\n+\t* tree-cfg.c (verify_gimple_call): Verify that\n+\tgimple_call_cannot_inline_p is returning a conservative\n+\tcorrect result according to gimple_check_call_matching_types.\n+\t* ipa-inline-analysis.c (estimate_function_body_sizes): Remove\n+\tcode dealing with un-inlinablility.\n+\t* gimple-streamer-in.c (input_gimple_stmt): Update the\n+\tnon-inlinable flag.\n+\n 2011-11-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/51039"}, {"sha": "862c5b08e3a8f8236014690f9ee02e309cd11941", "filename": "gcc/gimple-streamer-in.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cb5f3988646680362082c19ddcba7c534d6a83/gcc%2Fgimple-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cb5f3988646680362082c19ddcba7c534d6a83/gcc%2Fgimple-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-in.c?ref=03cb5f3988646680362082c19ddcba7c534d6a83", "patch": "@@ -219,11 +219,18 @@ input_gimple_stmt (struct lto_input_block *ib, struct data_in *data_in,\n \t}\n       if (is_gimple_call (stmt))\n \t{\n+\t  tree fndecl;\n \t  if (gimple_call_internal_p (stmt))\n \t    gimple_call_set_internal_fn\n \t      (stmt, streamer_read_enum (ib, internal_fn, IFN_LAST));\n \t  else\n \t    gimple_call_set_fntype (stmt, stream_read_tree (ib, data_in));\n+\t  /* Update the non-inlinable flag conservatively.  */\n+\t  fndecl = gimple_call_fndecl (stmt);\n+\t  if (fndecl\n+\t      && !gimple_call_cannot_inline_p (stmt)\n+\t      && !gimple_check_call_matching_types (stmt, fndecl))\n+\t    gimple_call_set_cannot_inline (stmt, true);\n \t}\n       break;\n "}, {"sha": "91aa6123d9134daeac3d0b11055148f5fcba94d0", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cb5f3988646680362082c19ddcba7c534d6a83/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cb5f3988646680362082c19ddcba7c534d6a83/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=03cb5f3988646680362082c19ddcba7c534d6a83", "patch": "@@ -1961,20 +1961,6 @@ estimate_function_body_sizes (struct cgraph_node *node, bool early)\n \t      es->call_stmt_time = this_time;\n \t      es->loop_depth = bb->loop_depth;\n \t      edge_set_predicate (edge, &bb_predicate);\n-\n-\t      /* Do not inline calls where we cannot triviall work around\n-\t\t mismatches in argument or return types.  */\n-\t      if (edge->callee\n-\t\t  && cgraph_function_or_thunk_node (edge->callee, NULL)\n-\t\t  && !gimple_check_call_matching_types\n-\t\t       (stmt, cgraph_function_or_thunk_node (edge->callee,\n-\t\t\tNULL)->decl))\n-\t\t{\n-\t\t  edge->call_stmt_cannot_inline_p = true;\n-\t\t  gimple_call_set_cannot_inline (stmt, true);\n-\t\t}\n-\t      else\n-\t\tgcc_assert (!gimple_call_cannot_inline_p (stmt));\n \t    }\n \n \t  /* TODO: When conditional jump or swithc is known to be constant, but"}, {"sha": "2d4a6aab21282e1175abe38560a910a447ea0304", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cb5f3988646680362082c19ddcba7c534d6a83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cb5f3988646680362082c19ddcba7c534d6a83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03cb5f3988646680362082c19ddcba7c534d6a83", "patch": "@@ -1,3 +1,8 @@\n+2011-11-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/51039\n+\t* gcc.dg/pr51039.c: New testcase.\n+\n 2011-11-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* lib/target-supports.exp (check_effective_target_vect_cond_mixed):"}, {"sha": "863a6ff164579519162030482992b41875702448", "filename": "gcc/testsuite/gcc.dg/pr51039.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cb5f3988646680362082c19ddcba7c534d6a83/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51039.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cb5f3988646680362082c19ddcba7c534d6a83/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51039.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51039.c?ref=03cb5f3988646680362082c19ddcba7c534d6a83", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -finline-small-functions -fno-ipa-pure-const\" } */\n+\n+float baz (void)\n+{\n+  return 0;\n+}\n+\n+static inline int bar (int (*ibaz) (void))\n+{\n+  return ibaz ();\n+}\n+\n+void foo (void)\n+{\n+  bar((int (*)(void))baz);\n+}"}, {"sha": "b733c88ff14fbce7c5ab0522c3c4e3e5cacf3b62", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cb5f3988646680362082c19ddcba7c534d6a83/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cb5f3988646680362082c19ddcba7c534d6a83/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=03cb5f3988646680362082c19ddcba7c534d6a83", "patch": "@@ -3227,6 +3227,16 @@ verify_gimple_call (gimple stmt)\n \t}\n     }\n \n+  /* Verify that if we have a direct call and the argument/return\n+     types have mismatches the call is properly marked as noninlinable.  */\n+  if (fndecl\n+      && !gimple_call_cannot_inline_p (stmt)\n+      && !gimple_check_call_matching_types (stmt, fndecl))\n+    {\n+      error (\"gimple call cannot be inlined but is not marked so\");\n+      return true;\n+    }\n+\n   return false;\n }\n "}]}