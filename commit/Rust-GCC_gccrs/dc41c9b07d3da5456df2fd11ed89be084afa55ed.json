{"sha": "dc41c9b07d3da5456df2fd11ed89be084afa55ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM0MWM5YjA3ZDNkYTU0NTZkZjJmZDExZWQ4OWJlMDg0YWZhNTVlZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-05-05T20:51:18Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-05-05T20:51:18Z"}, "message": "diagnostic_report_diagnostic: refactor pragma-handling\n\nThis patch simplifies diagnostic_report_diagnostic by moving the\npragma-handling logic into a subroutine.\n\nNo functional change intended.\n\ngcc/ChangeLog:\n\t* diagnostic.c (diagnostic_report_diagnostic): Split out pragma\n\thandling logic into...\n\t(update_effective_level_from_pragmas): ...this new function.\n\nFrom-SVN: r247660", "tree": {"sha": "1d806129b966e092e1dc6fa4b30cee8efe4a152d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d806129b966e092e1dc6fa4b30cee8efe4a152d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc41c9b07d3da5456df2fd11ed89be084afa55ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc41c9b07d3da5456df2fd11ed89be084afa55ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc41c9b07d3da5456df2fd11ed89be084afa55ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc41c9b07d3da5456df2fd11ed89be084afa55ed/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "822856928407e34bc10f2aa7d00bc6149b43d7f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/822856928407e34bc10f2aa7d00bc6149b43d7f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/822856928407e34bc10f2aa7d00bc6149b43d7f8"}], "stats": {"total": 85, "additions": 56, "deletions": 29}, "files": [{"sha": "a6fc221182029b06d949602b292738ed0d30e3ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc41c9b07d3da5456df2fd11ed89be084afa55ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc41c9b07d3da5456df2fd11ed89be084afa55ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc41c9b07d3da5456df2fd11ed89be084afa55ed", "patch": "@@ -1,3 +1,9 @@\n+2017-05-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic.c (diagnostic_report_diagnostic): Split out pragma\n+\thandling logic into...\n+\t(update_effective_level_from_pragmas): ...this new function.\n+\n 2017-05-04  Andrew Waterman  <andrew@sifive.com>\n \n \t* config/riscv/riscv.opt (mstrict-align): New option."}, {"sha": "b61c09e261732f007dbf0a83615cc078130ae6ff", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 50, "deletions": 29, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc41c9b07d3da5456df2fd11ed89be084afa55ed/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc41c9b07d3da5456df2fd11ed89be084afa55ed/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=dc41c9b07d3da5456df2fd11ed89be084afa55ed", "patch": "@@ -768,6 +768,54 @@ print_parseable_fixits (pretty_printer *pp, rich_location *richloc)\n     }\n }\n \n+/* Update the diag_class of DIAGNOSTIC based on its location\n+   relative to any\n+     #pragma GCC diagnostic\n+   directives recorded within CONTEXT.\n+\n+   Return the new diag_class of DIAGNOSTIC if it was updated, or\n+   DK_UNSPECIFIED otherwise.  */\n+\n+static diagnostic_t\n+update_effective_level_from_pragmas (diagnostic_context *context,\n+\t\t\t\t     diagnostic_info *diagnostic)\n+{\n+  diagnostic_t diag_class = DK_UNSPECIFIED;\n+\n+  if (context->n_classification_history > 0)\n+    {\n+      location_t location = diagnostic_location (diagnostic);\n+\n+      /* FIXME: Stupid search.  Optimize later. */\n+      for (int i = context->n_classification_history - 1; i >= 0; i --)\n+\t{\n+\t  if (linemap_location_before_p\n+\t      (line_table,\n+\t       context->classification_history[i].location,\n+\t       location))\n+\t    {\n+\t      if (context->classification_history[i].kind == (int) DK_POP)\n+\t\t{\n+\t\t  i = context->classification_history[i].option;\n+\t\t  continue;\n+\t\t}\n+\t      int option = context->classification_history[i].option;\n+\t      /* The option 0 is for all the diagnostics.  */\n+\t      if (option == 0 || option == diagnostic->option_index)\n+\t\t{\n+\t\t  diag_class = context->classification_history[i].kind;\n+\t\t  if (diag_class != DK_UNSPECIFIED)\n+\t\t    diagnostic->kind = diag_class;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+  return diag_class;\n+}\n+\n+\n /* Report a diagnostic message (an error or a warning) as specified by\n    DC.  This function is *the* subroutine in terms of which front-ends\n    should implement their specific diagnostic handling modules.  The\n@@ -822,42 +870,15 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n   if (diagnostic->option_index\n       && diagnostic->option_index != permissive_error_option (context))\n     {\n-      diagnostic_t diag_class = DK_UNSPECIFIED;\n-\n       /* This tests if the user provided the appropriate -Wfoo or\n \t -Wno-foo option.  */\n       if (! context->option_enabled (diagnostic->option_index,\n \t\t\t\t     context->option_state))\n \treturn false;\n \n       /* This tests for #pragma diagnostic changes.  */\n-      if (context->n_classification_history > 0)\n-\t{\n-\t  /* FIXME: Stupid search.  Optimize later. */\n-\t  for (int i = context->n_classification_history - 1; i >= 0; i --)\n-\t    {\n-\t      if (linemap_location_before_p\n-\t\t  (line_table,\n-\t\t   context->classification_history[i].location,\n-\t\t   location))\n-\t\t{\n-\t\t  if (context->classification_history[i].kind == (int) DK_POP)\n-\t\t    {\n-\t\t      i = context->classification_history[i].option;\n-\t\t      continue;\n-\t\t    }\n-\t\t  int option = context->classification_history[i].option;\n-\t\t  /* The option 0 is for all the diagnostics.  */\n-\t\t  if (option == 0 || option == diagnostic->option_index)\n-\t\t    {\n-\t\t      diag_class = context->classification_history[i].kind;\n-\t\t      if (diag_class != DK_UNSPECIFIED)\n-\t\t\tdiagnostic->kind = diag_class;\n-\t\t      break;\n-\t\t    }\n-\t\t}\n-\t    }\n-\t}\n+      diagnostic_t diag_class\n+\t= update_effective_level_from_pragmas (context, diagnostic);\n \n       /* This tests if the user provided the appropriate -Werror=foo\n \t option.  */"}]}