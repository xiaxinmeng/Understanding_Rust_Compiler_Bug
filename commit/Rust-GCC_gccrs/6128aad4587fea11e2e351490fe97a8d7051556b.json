{"sha": "6128aad4587fea11e2e351490fe97a8d7051556b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEyOGFhZDQ1ODdmZWExMWUyZTM1MTQ5MGZlOTdhOGQ3MDUxNTU2Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-18T09:55:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-18T09:55:03Z"}, "message": "[multiple changes]\n\n2014-07-18  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-memdum.adb, g-memdum.ads (Dump): New parameter Prefix, defaulted\n\tto Absolute_Address.\n\n2014-07-18  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* opt.ads (Suppress_Back_Annotation): Remove as unused.\n\t* fe.h (Back_Annotate_Rep_Info): Likewise.\n\t(Global_Discard_Names): Likewise.\n\nFrom-SVN: r212799", "tree": {"sha": "102d8f3e3c05ed3d1d16b845d7f4da4383a6e438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/102d8f3e3c05ed3d1d16b845d7f4da4383a6e438"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6128aad4587fea11e2e351490fe97a8d7051556b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6128aad4587fea11e2e351490fe97a8d7051556b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6128aad4587fea11e2e351490fe97a8d7051556b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6128aad4587fea11e2e351490fe97a8d7051556b/comments", "author": null, "committer": null, "parents": [{"sha": "623267dc190af4ed37d179d8ee7c0b62c5c5d3d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/623267dc190af4ed37d179d8ee7c0b62c5c5d3d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/623267dc190af4ed37d179d8ee7c0b62c5c5d3d0"}], "stats": {"total": 145, "additions": 102, "deletions": 43}, "files": [{"sha": "05d2da05f7825a7f29c909b462f3864d30e8af3e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6128aad4587fea11e2e351490fe97a8d7051556b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6128aad4587fea11e2e351490fe97a8d7051556b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6128aad4587fea11e2e351490fe97a8d7051556b", "patch": "@@ -1,3 +1,14 @@\n+2014-07-18  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-memdum.adb, g-memdum.ads (Dump): New parameter Prefix, defaulted\n+\tto Absolute_Address.\n+\n+2014-07-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* opt.ads (Suppress_Back_Annotation): Remove as unused.\n+\t* fe.h (Back_Annotate_Rep_Info): Likewise.\n+\t(Global_Discard_Names): Likewise.\n+\n 2014-07-18  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch13.adb (Is_Type_Ref): Check that type name is not"}, {"sha": "31564c5b9f2a998916704a45a593539f609f2270", "filename": "gcc/ada/g-memdum.adb", "status": "modified", "additions": 84, "deletions": 41, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6128aad4587fea11e2e351490fe97a8d7051556b/gcc%2Fada%2Fg-memdum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6128aad4587fea11e2e351490fe97a8d7051556b/gcc%2Fada%2Fg-memdum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-memdum.adb?ref=6128aad4587fea11e2e351490fe97a8d7051556b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2003-2010, AdaCore                     --\n+--                     Copyright (C) 2003-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,6 +30,7 @@\n ------------------------------------------------------------------------------\n \n with System;                  use System;\n+with System.Img_BIU;          use System.Img_BIU;\n with System.Storage_Elements; use System.Storage_Elements;\n \n with GNAT.IO;              use GNAT.IO;\n@@ -43,10 +44,18 @@ package body GNAT.Memory_Dump is\n    -- Dump --\n    ----------\n \n-   procedure Dump (Addr : System.Address; Count : Natural) is\n+   procedure Dump\n+     (Addr   : Address;\n+      Count  : Natural;\n+      Prefix : Prefix_Type := Absolute_Address)\n+   is\n       Ctr : Natural := Count;\n       --  Count of bytes left to output\n \n+      Offset_Buf  : String (1 .. Standard'Address_Size / 4 + 4);\n+      Offset_Last : Natural;\n+      --  Buffer for prefix in Offset mode\n+\n       Adr : Address := Addr;\n       --  Current address\n \n@@ -56,68 +65,102 @@ package body GNAT.Memory_Dump is\n       C : Character;\n       --  Character at current storage address\n \n-      AIL : constant := Address_Image_Length - 4 + 2;\n-      --  Number of chars in initial address + colon + space\n+      AIL : Natural;\n+      --  Number of chars in prefix (including colon and space)\n \n-      Line_Len : constant Natural := AIL + 3 * 16 + 2 + 16;\n+      Line_Len : Natural;\n       --  Line length for entire line\n \n-      Line_Buf : String (1 .. Line_Len);\n-\n       Hex : constant array (0 .. 15) of Character := \"0123456789ABCDEF\";\n \n       type Char_Ptr is access all Character;\n \n       function To_Char_Ptr is new Ada.Unchecked_Conversion (Address, Char_Ptr);\n \n    begin\n-      while Ctr /= 0 loop\n+      case Prefix is\n+         when Absolute_Address =>\n+            AIL := Address_Image_Length - 4 + 2;\n+         when Offset =>\n+            Offset_Last := Offset_Buf'First - 1;\n+            Set_Image_Based_Integer (Ctr, 16, 0, Offset_Buf, Offset_Last);\n+            AIL := Offset_Last - 4 + 2;\n+         when None =>\n+            AIL := 0;\n+      end case;\n+      Line_Len := AIL + 3 * 16 + 2 + 16;\n+\n+      declare\n+         Line_Buf : String (1 .. Line_Len);\n+      begin\n+         while Ctr /= 0 loop\n+\n+            --  Start of line processing\n+\n+            if N = 0 then\n+               case Prefix is\n+                  when Absolute_Address =>\n+                     declare\n+                        S : constant String := Image (Adr);\n+                     begin\n+                        Line_Buf (1 .. AIL) := S (4 .. S'Length - 1) & \": \";\n+                     end;\n+\n+                  when Offset =>\n+                     declare\n+                        Last : Natural := 0;\n+                        Len  : Natural;\n+                     begin\n+                        Set_Image_Based_Integer\n+                          (Count - Ctr, 16, 0, Offset_Buf, Last);\n+                        Len := Last - 4;\n+\n+                        Line_Buf (1 .. AIL - Len - 2) := (others => '0');\n+                        Line_Buf (AIL - Len - 1 .. AIL - 2) :=\n+                          Offset_Buf (4 .. Last - 1);\n+                        Line_Buf (AIL - 1 .. AIL) := \": \";\n+                     end;\n+                  when None =>\n+                     null;\n+               end case;\n \n-         --  Start of line processing\n-\n-         if N = 0 then\n-            declare\n-               S : constant String := Image (Adr);\n-            begin\n-               Line_Buf (1 .. AIL) := S (4 .. S'Length - 1) & \": \";\n                Line_Buf (AIL + 1 .. Line_Buf'Last) := (others => ' ');\n                Line_Buf (AIL + 3 * 16 + 1) := '\"';\n-            end;\n-         end if;\n+            end if;\n \n-         --  Add one character to current line\n+            --  Add one character to current line\n \n-         C := To_Char_Ptr (Adr).all;\n-         Adr := Adr + 1;\n-         Ctr := Ctr - 1;\n+            C := To_Char_Ptr (Adr).all;\n+            Adr := Adr + 1;\n+            Ctr := Ctr - 1;\n \n-         Line_Buf (AIL + 3 * N + 1) := Hex (Character'Pos (C) / 16);\n-         Line_Buf (AIL + 3 * N + 2) := Hex (Character'Pos (C) mod 16);\n+            Line_Buf (AIL + 3 * N + 1) := Hex (Character'Pos (C) / 16);\n+            Line_Buf (AIL + 3 * N + 2) := Hex (Character'Pos (C) mod 16);\n \n-         if C < ' ' or else C = Character'Val (16#7F#) then\n-            C := '?';\n-         end if;\n+            if C < ' ' or else C = Character'Val (16#7F#) then\n+               C := '?';\n+            end if;\n \n-         Line_Buf (AIL + 3 * 16 + 2 + N) := C;\n-         N := N + 1;\n+            Line_Buf (AIL + 3 * 16 + 2 + N) := C;\n+            N := N + 1;\n \n-         --  End of line processing\n+            --  End of line processing\n \n-         if N = 16 then\n-            Line_Buf (Line_Buf'Last) := '\"';\n-            GNAT.IO.Put_Line (Line_Buf);\n-            N := 0;\n-         end if;\n-      end loop;\n+            if N = 16 then\n+               Line_Buf (Line_Buf'Last) := '\"';\n+               GNAT.IO.Put_Line (Line_Buf);\n+               N := 0;\n+            end if;\n+         end loop;\n \n-      --  Deal with possible last partial line\n+         --  Deal with possible last partial line\n \n-      if N /= 0 then\n-         Line_Buf (AIL + 3 * 16 + 2 + N) := '\"';\n-         GNAT.IO.Put_Line (Line_Buf (1 .. AIL + 3 * 16 + 2 + N));\n-      end if;\n+         if N /= 0 then\n+            Line_Buf (AIL + 3 * 16 + 2 + N) := '\"';\n+            GNAT.IO.Put_Line (Line_Buf (1 .. AIL + 3 * 16 + 2 + N));\n+         end if;\n+      end;\n \n-      return;\n    end Dump;\n \n end GNAT.Memory_Dump;"}, {"sha": "919663cf5e35941afa910f56425320837cdf5a89", "filename": "gcc/ada/g-memdum.ads", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6128aad4587fea11e2e351490fe97a8d7051556b/gcc%2Fada%2Fg-memdum.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6128aad4587fea11e2e351490fe97a8d7051556b/gcc%2Fada%2Fg-memdum.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-memdum.ads?ref=6128aad4587fea11e2e351490fe97a8d7051556b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2003-2010, AdaCore                     --\n+--                     Copyright (C) 2003-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,7 +38,12 @@ with System;\n package GNAT.Memory_Dump is\n    pragma Preelaborate;\n \n-   procedure Dump (Addr : System.Address; Count : Natural);\n+   type Prefix_Type is (Absolute_Address, Offset, None);\n+\n+   procedure Dump\n+     (Addr   : System.Address;\n+      Count  : Natural;\n+      Prefix : Prefix_Type := Absolute_Address);\n    --  Dumps indicated number (Count) of bytes, starting at the address given\n    --  by Addr. The coding of this routine in its current form assumes the\n    --  case of a byte addressable machine (and is therefore inapplicable to"}]}