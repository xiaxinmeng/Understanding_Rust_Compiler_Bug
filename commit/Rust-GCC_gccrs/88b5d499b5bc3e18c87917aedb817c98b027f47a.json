{"sha": "88b5d499b5bc3e18c87917aedb817c98b027f47a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhiNWQ0OTliNWJjM2UxOGM4NzkxN2FlZGI4MTdjOThiMDI3ZjQ3YQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-04-13T19:11:16Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-04-13T19:11:16Z"}, "message": "libgo: update to Go 1.6.1 release\n    \n    Reviewed-on: https://go-review.googlesource.com/22007\n\nFrom-SVN: r234958", "tree": {"sha": "bcc1d22ec63255a12044941df76a5bd63e1fbadf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcc1d22ec63255a12044941df76a5bd63e1fbadf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88b5d499b5bc3e18c87917aedb817c98b027f47a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b5d499b5bc3e18c87917aedb817c98b027f47a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88b5d499b5bc3e18c87917aedb817c98b027f47a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b5d499b5bc3e18c87917aedb817c98b027f47a/comments", "author": null, "committer": null, "parents": [{"sha": "10c3c4245b5c080727639467aaf298c8a5c30bea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10c3c4245b5c080727639467aaf298c8a5c30bea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10c3c4245b5c080727639467aaf298c8a5c30bea"}], "stats": {"total": 78, "additions": 62, "deletions": 16}, "files": [{"sha": "ce20dad142f7dcbc8423b8d482da3662bdf9d485", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b5d499b5bc3e18c87917aedb817c98b027f47a/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b5d499b5bc3e18c87917aedb817c98b027f47a/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=88b5d499b5bc3e18c87917aedb817c98b027f47a", "patch": "@@ -1,4 +1,4 @@\n-8e7b5e777333fa4cd070d96e94ea82e3e1132739\n+ff29ea8e4e69eb94958aef4388da09a61b2b52b6\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "a40967cea246fe63f9e71a5c2818c53139dbaa4d", "filename": "libgo/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMERGE?ref=88b5d499b5bc3e18c87917aedb817c98b027f47a", "patch": "@@ -1,4 +1,4 @@\n-7bc40ffb05d8813bf9b41a331b45d37216f9e747\n+f5cf5673590a68c55b2330df9dfcdd6fac75b893\n \n The first line of this file holds the git revision number of the\n last merge done from the master library sources."}, {"sha": "e1bf218d1df385d3380e281e07ab51d25db3fc21", "filename": "libgo/VERSION", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2FVERSION", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2FVERSION", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FVERSION?ref=88b5d499b5bc3e18c87917aedb817c98b027f47a", "patch": "@@ -1 +1 @@\n-go1.6\n\\ No newline at end of file\n+go1.6.1\n\\ No newline at end of file"}, {"sha": "9f414a470c79529af94a14a7377f0f5322d166f9", "filename": "libgo/go/crypto/dsa/dsa.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa.go?ref=88b5d499b5bc3e18c87917aedb817c98b027f47a", "patch": "@@ -249,6 +249,10 @@ func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r, s *big.Int, err err\n func Verify(pub *PublicKey, hash []byte, r, s *big.Int) bool {\n \t// FIPS 186-3, section 4.7\n \n+\tif pub.P.Sign() == 0 {\n+\t\treturn false\n+\t}\n+\n \tif r.Sign() < 1 || r.Cmp(pub.Q) >= 0 {\n \t\treturn false\n \t}"}, {"sha": "e54488c9cf6b699d4d8d5716101d278218400b06", "filename": "libgo/go/crypto/ecdsa/ecdsa.go", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Fcrypto%2Fecdsa%2Fecdsa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Fcrypto%2Fecdsa%2Fecdsa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fecdsa%2Fecdsa.go?ref=88b5d499b5bc3e18c87917aedb817c98b027f47a", "patch": "@@ -23,6 +23,7 @@ import (\n \t\"crypto/elliptic\"\n \t\"crypto/sha512\"\n \t\"encoding/asn1\"\n+\t\"errors\"\n \t\"io\"\n \t\"math/big\"\n )\n@@ -140,6 +141,8 @@ func fermatInverse(k, N *big.Int) *big.Int {\n \treturn new(big.Int).Exp(k, nMinus2, N)\n }\n \n+var errZeroParam = errors.New(\"zero parameter\")\n+\n // Sign signs an arbitrary length hash (which should be the result of hashing a\n // larger message) using the private key, priv. It returns the signature as a\n // pair of integers. The security of the private key depends on the entropy of\n@@ -180,7 +183,9 @@ func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r, s *big.Int, err err\n \t// See [NSA] 3.4.1\n \tc := priv.PublicKey.Curve\n \tN := c.Params().N\n-\n+\tif N.Sign() == 0 {\n+\t\treturn nil, nil, errZeroParam\n+\t}\n \tvar k, kInv *big.Int\n \tfor {\n \t\tfor {\n@@ -193,7 +198,7 @@ func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r, s *big.Int, err err\n \t\t\tif in, ok := priv.Curve.(invertible); ok {\n \t\t\t\tkInv = in.Inverse(k)\n \t\t\t} else {\n-\t\t\t\tkInv = fermatInverse(k, N)\n+\t\t\t\tkInv = fermatInverse(k, N) // N != 0\n \t\t\t}\n \n \t\t\tr, _ = priv.Curve.ScalarBaseMult(k.Bytes())\n@@ -207,7 +212,7 @@ func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r, s *big.Int, err err\n \t\ts = new(big.Int).Mul(priv.D, r)\n \t\ts.Add(s, e)\n \t\ts.Mul(s, kInv)\n-\t\ts.Mod(s, N)\n+\t\ts.Mod(s, N) // N != 0\n \t\tif s.Sign() != 0 {\n \t\t\tbreak\n \t\t}"}, {"sha": "0f487fe1524b2137cefd05a6ba90e1fee99e4ec6", "filename": "libgo/go/crypto/rsa/rsa.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Fcrypto%2Frsa%2Frsa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Fcrypto%2Frsa%2Frsa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frsa%2Frsa.go?ref=88b5d499b5bc3e18c87917aedb817c98b027f47a", "patch": "@@ -465,6 +465,9 @@ func decrypt(random io.Reader, priv *PrivateKey, c *big.Int) (m *big.Int, err er\n \t\terr = ErrDecryption\n \t\treturn\n \t}\n+\tif priv.N.Sign() == 0 {\n+\t\treturn nil, ErrDecryption\n+\t}\n \n \tvar ir *big.Int\n \tif random != nil {\n@@ -490,7 +493,7 @@ func decrypt(random io.Reader, priv *PrivateKey, c *big.Int) (m *big.Int, err er\n \t\t\t}\n \t\t}\n \t\tbigE := big.NewInt(int64(priv.E))\n-\t\trpowe := new(big.Int).Exp(r, bigE, priv.N)\n+\t\trpowe := new(big.Int).Exp(r, bigE, priv.N) // N != 0\n \t\tcCopy := new(big.Int).Set(c)\n \t\tcCopy.Mul(cCopy, rpowe)\n \t\tcCopy.Mod(cCopy, priv.N)"}, {"sha": "c7cd8804da7b75e68488e2a3bfcdd90455b426ac", "filename": "libgo/go/go/build/deps_test.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Fgo%2Fbuild%2Fdeps_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Fgo%2Fbuild%2Fdeps_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fdeps_test.go?ref=88b5d499b5bc3e18c87917aedb817c98b027f47a", "patch": "@@ -132,10 +132,10 @@ var pkgDeps = map[string][]string{\n \t// End of linear dependency definitions.\n \n \t// Operating system access.\n-\t\"syscall\":                           {\"L0\", \"internal/race\", \"unicode/utf16\"},\n+\t\"syscall\":                           {\"L0\", \"internal/race\", \"internal/syscall/windows/sysdll\", \"unicode/utf16\"},\n \t\"internal/syscall/unix\":             {\"L0\", \"syscall\"},\n-\t\"internal/syscall/windows\":          {\"L0\", \"syscall\"},\n-\t\"internal/syscall/windows/registry\": {\"L0\", \"syscall\", \"unicode/utf16\"},\n+\t\"internal/syscall/windows\":          {\"L0\", \"syscall\", \"internal/syscall/windows/sysdll\"},\n+\t\"internal/syscall/windows/registry\": {\"L0\", \"syscall\", \"internal/syscall/windows/sysdll\", \"unicode/utf16\"},\n \t\"time\":          {\"L0\", \"syscall\", \"internal/syscall/windows/registry\"},\n \t\"os\":            {\"L1\", \"os\", \"syscall\", \"time\", \"internal/syscall/windows\"},\n \t\"path/filepath\": {\"L2\", \"os\", \"syscall\"},"}, {"sha": "02d985cec90b0f9ccdf40179a9c5540a1f1f2d93", "filename": "libgo/go/internal/syscall/windows/registry/syscall.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Finternal%2Fsyscall%2Fwindows%2Fregistry%2Fsyscall.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Finternal%2Fsyscall%2Fwindows%2Fregistry%2Fsyscall.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fsyscall%2Fwindows%2Fregistry%2Fsyscall.go?ref=88b5d499b5bc3e18c87917aedb817c98b027f47a", "patch": "@@ -8,7 +8,7 @@ package registry\n \n import \"syscall\"\n \n-//go:generate go run $GOROOT/src/syscall/mksyscall_windows.go -output zsyscall_windows.go syscall.go\n+//go:generate go run $GOROOT/src/syscall/mksyscall_windows.go -output zsyscall_windows.go -systemdll syscall.go\n \n const (\n \t_REG_OPTION_NON_VOLATILE = 0"}, {"sha": "7e473d4e1de7b2609cb645a05060f02e1803c205", "filename": "libgo/go/internal/syscall/windows/registry/zsyscall_windows.go", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Finternal%2Fsyscall%2Fwindows%2Fregistry%2Fzsyscall_windows.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Finternal%2Fsyscall%2Fwindows%2Fregistry%2Fzsyscall_windows.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fsyscall%2Fwindows%2Fregistry%2Fzsyscall_windows.go?ref=88b5d499b5bc3e18c87917aedb817c98b027f47a", "patch": "@@ -4,12 +4,13 @@ package registry\n \n import \"unsafe\"\n import \"syscall\"\n+import \"internal/syscall/windows/sysdll\"\n \n var _ unsafe.Pointer\n \n var (\n-\tmodadvapi32 = syscall.NewLazyDLL(\"advapi32.dll\")\n-\tmodkernel32 = syscall.NewLazyDLL(\"kernel32.dll\")\n+\tmodadvapi32 = syscall.NewLazyDLL(sysdll.Add(\"advapi32.dll\"))\n+\tmodkernel32 = syscall.NewLazyDLL(sysdll.Add(\"kernel32.dll\"))\n \n \tprocRegCreateKeyExW           = modadvapi32.NewProc(\"RegCreateKeyExW\")\n \tprocRegDeleteKeyW             = modadvapi32.NewProc(\"RegDeleteKeyW\")"}, {"sha": "e6a3f238d884ff125e49a46b6deccea9df75f70e", "filename": "libgo/go/internal/syscall/windows/syscall_windows.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Finternal%2Fsyscall%2Fwindows%2Fsyscall_windows.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Finternal%2Fsyscall%2Fwindows%2Fsyscall_windows.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fsyscall%2Fwindows%2Fsyscall_windows.go?ref=88b5d499b5bc3e18c87917aedb817c98b027f47a", "patch": "@@ -6,7 +6,7 @@ package windows\n \n import \"syscall\"\n \n-//go:generate go run ../../../syscall/mksyscall_windows.go -output zsyscall_windows.go syscall_windows.go\n+//go:generate go run ../../../syscall/mksyscall_windows.go -output zsyscall_windows.go -systemdll syscall_windows.go\n \n const GAA_FLAG_INCLUDE_PREFIX = 0x00000010\n "}, {"sha": "4e0018f3877905ae1a82acfae4fd2e70173845ec", "filename": "libgo/go/internal/syscall/windows/sysdll/sysdll.go", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Finternal%2Fsyscall%2Fwindows%2Fsysdll%2Fsysdll.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Finternal%2Fsyscall%2Fwindows%2Fsysdll%2Fsysdll.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fsyscall%2Fwindows%2Fsysdll%2Fsysdll.go?ref=88b5d499b5bc3e18c87917aedb817c98b027f47a", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Package sysdll is an internal leaf package that records and reports\n+// which Windows DLL names are used by Go itself. These DLLs are then\n+// only loaded from the System32 directory. See Issue 14959.\n+package sysdll\n+\n+// IsSystemDLL reports whether the named dll key (a base name, like\n+// \"foo.dll\") is a system DLL which should only be loaded from the\n+// Windows SYSTEM32 directory.\n+//\n+// Filenames are case sensitive, but that doesn't matter because\n+// the case registered with Add is also the same case used with\n+// LoadDLL later.\n+//\n+// It has no associated mutex and should only be mutated serially\n+// (currently: during init), and not concurrent with DLL loading.\n+var IsSystemDLL = map[string]bool{}\n+\n+// Add notes that dll is a system32 DLL which should only be loaded\n+// from the Windows SYSTEM32 directory. It returns its argument back,\n+// for ease of use in generated code.\n+func Add(dll string) string {\n+\tIsSystemDLL[dll] = true\n+\treturn dll\n+}"}, {"sha": "d599258976b81d014b3e7fee43520223c770aab6", "filename": "libgo/go/internal/syscall/windows/zsyscall_windows.go", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Finternal%2Fsyscall%2Fwindows%2Fzsyscall_windows.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Finternal%2Fsyscall%2Fwindows%2Fzsyscall_windows.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fsyscall%2Fwindows%2Fzsyscall_windows.go?ref=88b5d499b5bc3e18c87917aedb817c98b027f47a", "patch": "@@ -4,12 +4,13 @@ package windows\n \n import \"unsafe\"\n import \"syscall\"\n+import \"internal/syscall/windows/sysdll\"\n \n var _ unsafe.Pointer\n \n var (\n-\tmodiphlpapi = syscall.NewLazyDLL(\"iphlpapi.dll\")\n-\tmodkernel32 = syscall.NewLazyDLL(\"kernel32.dll\")\n+\tmodiphlpapi = syscall.NewLazyDLL(sysdll.Add(\"iphlpapi.dll\"))\n+\tmodkernel32 = syscall.NewLazyDLL(sysdll.Add(\"kernel32.dll\"))\n \n \tprocGetAdaptersAddresses = modiphlpapi.NewProc(\"GetAdaptersAddresses\")\n \tprocGetComputerNameExW   = modkernel32.NewProc(\"GetComputerNameExW\")"}, {"sha": "7b269ecccb4db7d3be2f9b0f7f1046974d30bdf2", "filename": "libgo/go/runtime/export_windows_test.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Fruntime%2Fexport_windows_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b5d499b5bc3e18c87917aedb817c98b027f47a/libgo%2Fgo%2Fruntime%2Fexport_windows_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fexport_windows_test.go?ref=88b5d499b5bc3e18c87917aedb817c98b027f47a", "patch": "@@ -15,3 +15,7 @@ func NumberOfProcessors() int32 {\n \tstdcall1(_GetSystemInfo, uintptr(unsafe.Pointer(&info)))\n \treturn int32(info.dwnumberofprocessors)\n }\n+\n+func LoadLibraryExStatus() (useEx, haveEx, haveFlags bool) {\n+\treturn useLoadLibraryEx, _LoadLibraryExW != nil, _AddDllDirectory != nil\n+}"}]}