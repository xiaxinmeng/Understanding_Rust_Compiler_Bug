{"sha": "7494697b8c55022b046dbed542369289646fbe22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ5NDY5N2I4YzU1MDIyYjA0NmRiZWQ1NDIzNjkyODk2NDZmYmUyMg==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2017-04-27T13:05:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T13:05:10Z"}, "message": "g-dyntab.ads, [...]: Remove incorrect assertion.\n\n2017-04-27  Bob Duff  <duff@adacore.com>\n\n\t* g-dyntab.ads, g-dyntab.adb, g-table.ads: Remove incorrect assertion.\n\tIf the table grows and then shrinks back to empty, we won't necessarily\n\tpoint back to the empty array. Code cleanups.\n\t* sinput.ads: Add 'Base to Size clause to match the declared\n\tcomponent subtypes.\n\nFrom-SVN: r247329", "tree": {"sha": "9f69f475620cc998a16ebc1e844d5d66b8f6addb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f69f475620cc998a16ebc1e844d5d66b8f6addb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7494697b8c55022b046dbed542369289646fbe22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7494697b8c55022b046dbed542369289646fbe22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7494697b8c55022b046dbed542369289646fbe22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7494697b8c55022b046dbed542369289646fbe22/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f2acfbce60d8225bff9f469a68606ebd2fe54736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2acfbce60d8225bff9f469a68606ebd2fe54736", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2acfbce60d8225bff9f469a68606ebd2fe54736"}], "stats": {"total": 61, "additions": 41, "deletions": 20}, "files": [{"sha": "d01469f226472523aa8ae2f50d0b71e63c1872fb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7494697b8c55022b046dbed542369289646fbe22/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7494697b8c55022b046dbed542369289646fbe22/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7494697b8c55022b046dbed542369289646fbe22", "patch": "@@ -1,3 +1,11 @@\n+2017-04-27  Bob Duff  <duff@adacore.com>\n+\n+\t* g-dyntab.ads, g-dyntab.adb, g-table.ads: Remove incorrect assertion.\n+\tIf the table grows and then shrinks back to empty, we won't necessarily\n+\tpoint back to the empty array. Code cleanups.\n+\t* sinput.ads: Add 'Base to Size clause to match the declared\n+\tcomponent subtypes.\n+\n 2017-04-27  Claire Dross  <dross@adacore.com>\n \n \t* a-cforma.adb, a-cforma.ads (=): Generic parameter removed to"}, {"sha": "7159059ce57bf124473361403a3fd0816ec318bf", "filename": "gcc/ada/g-dyntab.adb", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7494697b8c55022b046dbed542369289646fbe22/gcc%2Fada%2Fg-dyntab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7494697b8c55022b046dbed542369289646fbe22/gcc%2Fada%2Fg-dyntab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dyntab.adb?ref=7494697b8c55022b046dbed542369289646fbe22", "patch": "@@ -46,7 +46,7 @@ package body GNAT.Dynamic_Tables is\n    --  This is called when we are about to set the value of Last to a value\n    --  that is larger than Last_Allocated. This reallocates the table to the\n    --  larger size, as indicated by New_Last. At the time this is called,\n-   --  T.P.Last is still the old value.\n+   --  Last (T) is still the old value, and this does not modify it.\n \n    --------------\n    -- Allocate --\n@@ -57,17 +57,25 @@ package body GNAT.Dynamic_Tables is\n       --  Note that Num can be negative\n \n       pragma Assert (not T.Locked);\n-      Set_Last (T, T.P.Last + Table_Index_Type'Base (Num));\n+      Set_Last (T, Last (T) + Table_Index_Type'Base (Num));\n    end Allocate;\n \n    ------------\n    -- Append --\n    ------------\n \n    procedure Append (T : in out Instance; New_Val : Table_Component_Type) is\n-   begin\n       pragma Assert (not T.Locked);\n-      Set_Item (T, T.P.Last + 1, New_Val);\n+      New_Last : constant Table_Last_Type := Last (T) + 1;\n+   begin\n+      if New_Last <= T.P.Last_Allocated then\n+         --  fast path\n+         T.P.Last := New_Last;\n+         T.Table (New_Last) := New_Val;\n+\n+      else\n+         Set_Item (T, New_Last, New_Val);\n+      end if;\n    end Append;\n \n    ----------------\n@@ -185,7 +193,7 @@ package body GNAT.Dynamic_Tables is\n \n       begin\n          if T.Table /= Empty_Table_Ptr then\n-            New_Table (First .. T.P.Last) := Old_Table (First .. T.P.Last);\n+            New_Table (First .. Last (T)) := Old_Table (First .. Last (T));\n             Free (Old_Table);\n          end if;\n \n@@ -238,10 +246,8 @@ package body GNAT.Dynamic_Tables is\n    --------------\n \n    function Is_Empty (T : Instance) return Boolean is\n-      Result : constant Boolean := T.P.Last = Table_Low_Bound - 1;\n    begin\n-      pragma Assert (Result = (T.Table = Empty_Table_Ptr));\n-      return Result;\n+      return Last (T) = Table_Low_Bound - 1;\n    end Is_Empty;\n \n    ----------\n@@ -292,7 +298,7 @@ package body GNAT.Dynamic_Tables is\n          subtype Table_Length_Type is Table_Index_Type'Base\n            range 0 .. Table_Index_Type'Base'Last;\n \n-         Length : constant Table_Length_Type := T.P.Last - First + 1;\n+         Length : constant Table_Length_Type := Last (T) - First + 1;\n \n          Comp_Size_In_Bytes : constant Table_Length_Type :=\n            Table_Type'Component_Size / System.Storage_Unit;\n@@ -302,7 +308,7 @@ package body GNAT.Dynamic_Tables is\n \n       begin\n          if Release_Threshold = 0 or else Length < Length_Threshold then\n-            return T.P.Last;\n+            return Last (T);\n          else\n             declare\n                Extra_Length : constant Table_Length_Type := Length / 1000;\n@@ -320,7 +326,7 @@ package body GNAT.Dynamic_Tables is\n \n    begin\n       if New_Last_Alloc < T.P.Last_Allocated then\n-         pragma Assert (T.P.Last < T.P.Last_Allocated);\n+         pragma Assert (Last (T) < T.P.Last_Allocated);\n          pragma Assert (T.Table /= Empty_Table_Ptr);\n \n          declare\n@@ -359,10 +365,9 @@ package body GNAT.Dynamic_Tables is\n       Index : Valid_Table_Index_Type;\n       Item  : Table_Component_Type)\n    is\n+   begin\n       pragma Assert (not T.Locked);\n-      Item_Copy : constant Table_Component_Type := Item;\n \n-   begin\n       --  If Set_Last is going to reallocate the table, we make a copy of Item,\n       --  in case the call was \"Set_Item (T, X, T.Table (Y));\", and Item is\n       --  passed by reference. Without the copy, we would deallocate the array\n@@ -376,14 +381,13 @@ package body GNAT.Dynamic_Tables is\n             T.Table (Index) := Item_Copy;\n          end;\n \n-         return;\n-      end if;\n+      else\n+         if Index > Last (T) then\n+            Set_Last (T, Index);\n+         end if;\n \n-      if Index > T.P.Last then\n-         Set_Last (T, Index);\n+         T.Table (Index) := Item;\n       end if;\n-\n-      T.Table (Index) := Item_Copy;\n    end Set_Item;\n \n    --------------"}, {"sha": "cb4b74123bdcf1c2018d0110ba96e08532c37bfd", "filename": "gcc/ada/g-dyntab.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7494697b8c55022b046dbed542369289646fbe22/gcc%2Fada%2Fg-dyntab.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7494697b8c55022b046dbed542369289646fbe22/gcc%2Fada%2Fg-dyntab.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dyntab.ads?ref=7494697b8c55022b046dbed542369289646fbe22", "patch": "@@ -183,6 +183,7 @@ package GNAT.Dynamic_Tables is\n    end record;\n \n    function Is_Empty (T : Instance) return Boolean;\n+   pragma Inline (Is_Empty);\n \n    procedure Init (T : in out Instance);\n    --  Reinitializes the table to empty. There is no need to call this before"}, {"sha": "77e5bafcd355920b8da3a2de4c1aca86d5cdc376", "filename": "gcc/ada/g-table.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7494697b8c55022b046dbed542369289646fbe22/gcc%2Fada%2Fg-table.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7494697b8c55022b046dbed542369289646fbe22/gcc%2Fada%2Fg-table.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-table.ads?ref=7494697b8c55022b046dbed542369289646fbe22", "patch": "@@ -82,7 +82,9 @@ package GNAT.Table is\n    function Is_Empty return Boolean;\n \n    procedure Init;\n+   pragma Inline (Init);\n    procedure Free;\n+   pragma Inline (Free);\n \n    function First return Table_Index_Type;\n    pragma Inline (First);\n@@ -91,6 +93,7 @@ package GNAT.Table is\n    pragma Inline (Last);\n \n    procedure Release;\n+   pragma Inline (Release);\n \n    procedure Set_Last (New_Val : Table_Last_Type);\n    pragma Inline (Set_Last);\n@@ -105,6 +108,7 @@ package GNAT.Table is\n    pragma Inline (Append);\n \n    procedure Append_All (New_Vals : Table_Type);\n+   pragma Inline (Append_All);\n \n    procedure Set_Item\n      (Index : Valid_Table_Index_Type;\n@@ -115,10 +119,12 @@ package GNAT.Table is\n    --  Type used for Save/Restore subprograms\n \n    function Save return Saved_Table;\n+   pragma Inline (Save);\n    --  Resets table to empty, but saves old contents of table in returned\n    --  value, for possible later restoration by a call to Restore.\n \n    procedure Restore (T : in out Saved_Table);\n+   pragma Inline (Restore);\n    --  Given a Saved_Table value returned by a prior call to Save, restores\n    --  the table to the state it was in at the time of the Save call.\n \n@@ -137,9 +143,11 @@ package GNAT.Table is\n         Item  : Table_Component_Type;\n         Quit  : in out Boolean) is <>;\n    procedure For_Each;\n+   pragma Inline (For_Each);\n \n    generic\n      with function Lt (Comp1, Comp2 : Table_Component_Type) return Boolean;\n    procedure Sort_Table;\n+   pragma Inline (Sort_Table);\n \n end GNAT.Table;"}, {"sha": "6b5b412b35dcee14abd4437db14c26319e6a1fbe", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7494697b8c55022b046dbed542369289646fbe22/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7494697b8c55022b046dbed542369289646fbe22/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=7494697b8c55022b046dbed542369289646fbe22", "patch": "@@ -936,7 +936,7 @@ private\n    type Dope_Rec is record\n       First, Last : Source_Ptr'Base;\n    end record;\n-   Dope_Rec_Size : constant := 2 * Source_Ptr'Size;\n+   Dope_Rec_Size : constant := 2 * Source_Ptr'Base'Size;\n    for Dope_Rec'Size use Dope_Rec_Size;\n    for Dope_Rec'Alignment use Dope_Rec_Size / 8;\n    type Dope_Ptr is access all Dope_Rec;"}]}