{"sha": "3c27ce4cd4de1b9fd7d4e39d3bd56b6a75115537", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MyN2NlNGNkNGRlMWI5ZmQ3ZDRlMzlkM2JkNTZiNmE3NTExNTUzNw==", "commit": {"author": {"name": "Joey Ye", "email": "joey.ye@arm.com", "date": "2013-03-06T06:32:03Z"}, "committer": {"name": "Joey Ye", "email": "jye2@gcc.gnu.org", "date": "2013-03-06T06:32:03Z"}, "message": "re PR lto/50293 (-flto fails if GCC is installed in directory with space in path name)\n\n2013-03-06  Joey Ye  <joey.ye@arm.com>\n\n    PR lto/50293\n    * gcc.c (convert_white_space): New function.\n    (main): Handles white space in function name.\n\nFrom-SVN: r196485", "tree": {"sha": "4c3cf99f1787e5d18623890c1f8f5e6db8d7a684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c3cf99f1787e5d18623890c1f8f5e6db8d7a684"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c27ce4cd4de1b9fd7d4e39d3bd56b6a75115537", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c27ce4cd4de1b9fd7d4e39d3bd56b6a75115537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c27ce4cd4de1b9fd7d4e39d3bd56b6a75115537", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c27ce4cd4de1b9fd7d4e39d3bd56b6a75115537/comments", "author": {"login": "joeye-arm", "id": 38510878, "node_id": "MDQ6VXNlcjM4NTEwODc4", "avatar_url": "https://avatars.githubusercontent.com/u/38510878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joeye-arm", "html_url": "https://github.com/joeye-arm", "followers_url": "https://api.github.com/users/joeye-arm/followers", "following_url": "https://api.github.com/users/joeye-arm/following{/other_user}", "gists_url": "https://api.github.com/users/joeye-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/joeye-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joeye-arm/subscriptions", "organizations_url": "https://api.github.com/users/joeye-arm/orgs", "repos_url": "https://api.github.com/users/joeye-arm/repos", "events_url": "https://api.github.com/users/joeye-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/joeye-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f6d1c8601131f3ebdab1629ff923fa03ceb7ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f6d1c8601131f3ebdab1629ff923fa03ceb7ea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f6d1c8601131f3ebdab1629ff923fa03ceb7ea5"}], "stats": {"total": 65, "additions": 61, "deletions": 4}, "files": [{"sha": "b8473b0825ed7c65a2a65ad1f0f64a9c0fc2d58f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c27ce4cd4de1b9fd7d4e39d3bd56b6a75115537/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c27ce4cd4de1b9fd7d4e39d3bd56b6a75115537/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c27ce4cd4de1b9fd7d4e39d3bd56b6a75115537", "patch": "@@ -1,3 +1,9 @@\n+2013-03-06  Joey Ye  <joey.ye@arm.com>\n+\n+\tPR lto/50293\n+\t* gcc.c (convert_white_space): New function.\n+\t(main): Handles white space in function name.\n+\n 2013-03-06  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/56529"}, {"sha": "86077f8cf321ad1ed3a3897b1259ddc06d71eeca", "filename": "gcc/gcc.c", "status": "modified", "additions": 55, "deletions": 4, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c27ce4cd4de1b9fd7d4e39d3bd56b6a75115537/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c27ce4cd4de1b9fd7d4e39d3bd56b6a75115537/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=3c27ce4cd4de1b9fd7d4e39d3bd56b6a75115537", "patch": "@@ -265,6 +265,7 @@ static const char *compare_debug_self_opt_spec_function (int, const char **);\n static const char *compare_debug_auxbase_opt_spec_function (int, const char **);\n static const char *pass_through_libs_spec_func (int, const char **);\n static const char *replace_extension_spec_func (int, const char **);\n+static char *convert_white_space (char *);\n \f\n /* The Specs Language\n \n@@ -6627,6 +6628,7 @@ main (int argc, char **argv)\n \t\t\t\t    X_OK, false);\n   if (lto_wrapper_file)\n     {\n+      lto_wrapper_file = convert_white_space (lto_wrapper_file);\n       lto_wrapper_spec = lto_wrapper_file;\n       obstack_init (&collect_obstack);\n       obstack_grow (&collect_obstack, \"COLLECT_LTO_WRAPPER=\",\n@@ -7037,12 +7039,13 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t\t\t      + strlen (fuse_linker_plugin), 0))\n #endif\n \t    {\n-\t      linker_plugin_file_spec = find_a_file (&exec_prefixes,\n-\t\t\t\t\t\t     LTOPLUGINSONAME, R_OK,\n-\t\t\t\t\t\t     false);\n-\t      if (!linker_plugin_file_spec)\n+\t      char *temp_spec = find_a_file (&exec_prefixes,\n+\t\t\t\t\t     LTOPLUGINSONAME, R_OK,\n+\t\t\t\t\t     false);\n+\t      if (!temp_spec)\n \t\tfatal_error (\"-fuse-linker-plugin, but %s not found\",\n \t\t\t     LTOPLUGINSONAME);\n+\t      linker_plugin_file_spec = convert_white_space (temp_spec);\n \t    }\n #endif\n \t  lto_gcc_spec = argv[0];\n@@ -8538,3 +8541,51 @@ replace_extension_spec_func (int argc, const char **argv)\n   free (name);\n   return result;\n }\n+\n+/* Insert backslash before spaces in ORIG (usually a file path), to \n+   avoid being broken by spec parser.\n+\n+   This function is needed as do_spec_1 treats white space (' ' and '\\t')\n+   as the end of an argument. But in case of -plugin /usr/gcc install/xxx.so,\n+   the file name should be treated as a single argument rather than being\n+   broken into multiple. Solution is to insert '\\\\' before the space in a \n+   file name.\n+   \n+   This function converts and only converts all occurrence of ' ' \n+   to '\\\\' + ' ' and '\\t' to '\\\\' + '\\t'.  For example:\n+   \"a b\"  -> \"a\\\\ b\"\n+   \"a  b\" -> \"a\\\\ \\\\ b\"\n+   \"a\\tb\" -> \"a\\\\\\tb\"\n+   \"a\\\\ b\" -> \"a\\\\\\\\ b\"\n+\n+   orig: input null-terminating string that was allocated by xalloc. The\n+   memory it points to might be freed in this function. Behavior undefined\n+   if ORIG wasn't xalloced or was freed already at entry.\n+\n+   Return: ORIG if no conversion needed. Otherwise a newly allocated string\n+   that was converted from ORIG.  */\n+\n+static char *\n+convert_white_space (char *orig)\n+{\n+  int len, number_of_space = 0;\n+\n+  for (len = 0; orig[len]; len++)\n+    if (orig[len] == ' ' || orig[len] == '\\t') number_of_space++;\n+\n+  if (number_of_space)\n+    {\n+      char *new_spec = (char *) xmalloc (len + number_of_space + 1);\n+      int j, k;\n+      for (j = 0, k = 0; j <= len; j++, k++)\n+\t{\n+\t  if (orig[j] == ' ' || orig[j] == '\\t')\n+\t    new_spec[k++] = '\\\\';\n+\t  new_spec[k] = orig[j];\n+\t}\n+      free (orig);\n+      return new_spec;\n+  }\n+  else\n+    return orig;\n+}"}]}