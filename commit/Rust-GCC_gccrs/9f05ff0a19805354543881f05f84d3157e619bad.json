{"sha": "9f05ff0a19805354543881f05f84d3157e619bad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYwNWZmMGExOTgwNTM1NDU0Mzg4MWYwNWY4NGQzMTU3ZTYxOWJhZA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2005-04-02T16:53:44Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2005-04-02T16:53:44Z"}, "message": "re PR rtl-optimization/20290 (Miscompilation on ppc/arm with -Os)\n\ngcc/ChangeLog:\nPR rtl-optimization/20290\n* loop.c (for_each_insn_in_loop): Don't assume the loop body runs\nin every iteration if the entry point is the exit test.\ngcc/testsuite/ChangeLog:\nPR rtl-optimization/20290\n* gcc.c-torture/execute/loop-ivopts-2.c: New.\n\nFrom-SVN: r97441", "tree": {"sha": "044b11cdff4c1f9ae9e84e8a7ad960da4a7111d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/044b11cdff4c1f9ae9e84e8a7ad960da4a7111d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f05ff0a19805354543881f05f84d3157e619bad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f05ff0a19805354543881f05f84d3157e619bad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f05ff0a19805354543881f05f84d3157e619bad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f05ff0a19805354543881f05f84d3157e619bad/comments", "author": null, "committer": null, "parents": [{"sha": "3a5afdfc208747167216c3318134c159860b59b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5afdfc208747167216c3318134c159860b59b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a5afdfc208747167216c3318134c159860b59b2"}], "stats": {"total": 83, "additions": 76, "deletions": 7}, "files": [{"sha": "f9f53e008cf2f2521a4cc88d5edf41101b6b6c29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f05ff0a19805354543881f05f84d3157e619bad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f05ff0a19805354543881f05f84d3157e619bad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f05ff0a19805354543881f05f84d3157e619bad", "patch": "@@ -1,3 +1,9 @@\n+2005-04-02  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR rtl-optimization/20290\n+\t* loop.c (for_each_insn_in_loop): Don't assume the loop body runs\n+\tin every iteration if the entry point is the exit test.\n+\n 2005-04-02  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/cris.md (attribute \"length\"): Define."}, {"sha": "e2e6074ccc47dffcb1e38b217b7950066b3d9307", "filename": "gcc/loop.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f05ff0a19805354543881f05f84d3157e619bad/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f05ff0a19805354543881f05f84d3157e619bad/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=9f05ff0a19805354543881f05f84d3157e619bad", "patch": "@@ -4654,12 +4654,18 @@ for_each_insn_in_loop (struct loop *loop, loop_insn_callback fncall)\n   int not_every_iteration = 0;\n   int maybe_multiple = 0;\n   int past_loop_latch = 0;\n+  bool exit_test_is_entry = false;\n   rtx p;\n \n-  /* If loop_scan_start points to the loop exit test, we have to be wary of\n-     subversive use of gotos inside expression statements.  */\n+  /* If loop_scan_start points to the loop exit test, the loop body\n+     cannot be counted on running on every iteration, and we have to\n+     be wary of subversive use of gotos inside expression\n+     statements.  */\n   if (prev_nonnote_insn (loop->scan_start) != prev_nonnote_insn (loop->start))\n-    maybe_multiple = back_branch_in_range_p (loop, loop->scan_start);\n+    {\n+      exit_test_is_entry = true;\n+      maybe_multiple = back_branch_in_range_p (loop, loop->scan_start);\n+    }\n \n   /* Scan through loop and update NOT_EVERY_ITERATION and MAYBE_MULTIPLE.  */\n   for (p = next_insn_in_loop (loop, loop->scan_start);\n@@ -4717,10 +4723,12 @@ for_each_insn_in_loop (struct loop *loop, loop_insn_callback fncall)\n          beginning, don't set not_every_iteration for that.\n          This can be any kind of jump, since we want to know if insns\n          will be executed if the loop is executed.  */\n-\t  && !(JUMP_LABEL (p) == loop->top\n-\t       && ((NEXT_INSN (NEXT_INSN (p)) == loop->end\n-\t\t    && any_uncondjump_p (p))\n-\t\t   || (NEXT_INSN (p) == loop->end && any_condjump_p (p)))))\n+\t  && (exit_test_is_entry\n+\t      || !(JUMP_LABEL (p) == loop->top\n+\t\t   && ((NEXT_INSN (NEXT_INSN (p)) == loop->end\n+\t\t\t&& any_uncondjump_p (p))\n+\t\t       || (NEXT_INSN (p) == loop->end\n+\t\t\t   && any_condjump_p (p))))))\n \t{\n \t  rtx label = 0;\n "}, {"sha": "c2a49280c1448fc69e2a4cd50ee98659d96356f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f05ff0a19805354543881f05f84d3157e619bad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f05ff0a19805354543881f05f84d3157e619bad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f05ff0a19805354543881f05f84d3157e619bad", "patch": "@@ -1,3 +1,8 @@\n+2005-04-02  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR rtl-optimization/20290\n+\t* gcc.c-torture/execute/loop-ivopts-2.c: New.\n+\n 2005-04-02  Geoffrey Keating  <geoffk@apple.com>\n \n \t* gcc.dg/rs6000-fpint.c: New."}, {"sha": "737640bff05a26e19e89c6797d7bba6965b0acaa", "filename": "gcc/testsuite/gcc.c-torture/execute/loop-ivopts-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f05ff0a19805354543881f05f84d3157e619bad/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Floop-ivopts-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f05ff0a19805354543881f05f84d3157e619bad/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Floop-ivopts-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Floop-ivopts-2.c?ref=9f05ff0a19805354543881f05f84d3157e619bad", "patch": "@@ -0,0 +1,50 @@\n+/* PR rtl-optimization/20290  */\n+   \n+/* We used to mis-optimize the second loop in main on at least ppc and\n+   arm, because tree loop would change the loop to something like:\n+\n+  ivtmp.65 = &l[i];\n+  ivtmp.16 = 113;\n+  goto <bb 4> (<L4>);\n+\n+<L3>:;\n+  *(ivtmp.65 + 4294967292B) = 9;\n+  i = i + 1;\n+\n+<L4>:;\n+  ivtmp.16 = ivtmp.16 - 1;\n+  ivtmp.65 = ivtmp.65 + 4B;\n+  if (ivtmp.16 != 0) goto <L3>; \n+\n+  We used to consider the increment of i as executed in every\n+  iteration, so we'd miscompute the final value.  */\n+\n+extern void abort (void);\n+\n+void\n+check (unsigned int *l)\n+{\n+  int i;\n+  for (i = 0; i < 288; i++)\n+    if (l[i] != 7 + (i < 256 || i >= 280) + (i >= 144 && i < 256))\n+      abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  int i;\n+  unsigned int l[288];\n+\n+  for (i = 0; i < 144; i++)\n+    l[i] = 8;\n+  for (; i < 256; i++)\n+    l[i] = 9;\n+  for (; i < 280; i++)\n+    l[i] = 7;\n+  for (; i < 288; i++)\n+    l[i] = 8;\n+  check (l);\n+  return 0;\n+}\n+"}]}