{"sha": "ad1f7916e754694a877cb6d701112e2d9ec6643c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQxZjc5MTZlNzU0Njk0YTg3N2NiNmQ3MDExMTJlMmQ5ZWM2NjQzYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-06-04T15:47:49Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-06-04T15:47:49Z"}, "message": "i386.md (*addqi_2): Do not assert operands[2] == 255 for TYPE_INCDEC operands.\n\n\t* config/i386/i386.md (*addqi_2): Do not assert operands[2] == 255\n\tfor TYPE_INCDEC operands.\n\t(*addqi_3): Ditto.\n\t(*addqi_4): Ditto.\n\t(*addqi_5): Ditto.\n\t(*addqi_ext_1_rex64): Ditto.\n\t(*addqi_ext_1): Ditto.\n\n\t(*addqi_4): Check for incdec_operand in QImode.\n\n\t(*add<mode>_2): Macroize insn from *add<mode>_2 and *add{qi,hi}_2\n\tusing SWI mode iterator.\n\t(*add<mode>_3): Ditto from *add<mode>_3 and *add{qi,hi}_3.\n\t(*add<mode>_4): Macroize insn from *add{qi,hi,si}_4 using SWI124\n\tmode iterator.\n\t(*add<mode>_5): Macroize insn from *add<mode>_5 and *add{qi,hi}_5\n\tusing SWI mode iterator.\n\nFrom-SVN: r160277", "tree": {"sha": "e358ac6e743ceda724b79656ea08f45a3e5a182c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e358ac6e743ceda724b79656ea08f45a3e5a182c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad1f7916e754694a877cb6d701112e2d9ec6643c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1f7916e754694a877cb6d701112e2d9ec6643c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad1f7916e754694a877cb6d701112e2d9ec6643c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1f7916e754694a877cb6d701112e2d9ec6643c/comments", "author": null, "committer": null, "parents": [{"sha": "49706e39a2b65519ef173e55637c41c899e0b968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49706e39a2b65519ef173e55637c41c899e0b968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49706e39a2b65519ef173e55637c41c899e0b968"}], "stats": {"total": 395, "additions": 54, "deletions": 341}, "files": [{"sha": "836de436c7f9688598f470a3ffd48eef9e14b9f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1f7916e754694a877cb6d701112e2d9ec6643c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1f7916e754694a877cb6d701112e2d9ec6643c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad1f7916e754694a877cb6d701112e2d9ec6643c", "patch": "@@ -1,3 +1,23 @@\n+2010-06-04  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*addqi_2): Do not assert operands[2] == 255\n+\tfor TYPE_INCDEC operands.\n+\t(*addqi_3): Ditto.\n+\t(*addqi_4): Ditto.\n+\t(*addqi_5): Ditto.\n+\t(*addqi_ext_1_rex64): Ditto.\n+\t(*addqi_ext_1): Ditto.\n+\n+\t(*addqi_4): Check for incdec_operand in QImode.\n+\n+\t(*add<mode>_2): Macroize insn from *add<mode>_2 and *add{qi,hi}_2\n+\tusing SWI mode iterator.\n+\t(*add<mode>_3): Ditto from *add<mode>_3 and *add{qi,hi}_3.\n+\t(*add<mode>_4): Macroize insn from *add{qi,hi,si}_4 using SWI124\n+\tmode iterator.\n+\t(*add<mode>_5): Macroize insn from *add<mode>_5 and *add{qi,hi}_5\n+\tusing SWI mode iterator.\n+\n 2010-06-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/25880\n@@ -15,8 +35,7 @@\n \n 2010-06-04  Kai Tietz  <kai.tietz@onevision.com>\n \n-\t* config/i386/cygming.h (ASM_GENERATE_INTERNAL_LABEL): Prefix\n-\tby '*'.\n+\t* config/i386/cygming.h (ASM_GENERATE_INTERNAL_LABEL): Prefix by '*'.\n \n 2010-06-04  Jan Hubicka  <jh@suse.cz>\n \n@@ -55,12 +74,13 @@\n \tdf_md_bb_local_compute_process_def, df_md_local_compute, df_md_reset,\n \tdf_md_transfer_function, df_md_init, df_md_confluence_0,\n \tdf_md_confluence_n,\n-\tdf_md_top_dump, df_md_bottom_dump): Update.  (struct df_lr_problem_data):\n-\tEmbedd bitmap headers.\n+\tdf_md_top_dump, df_md_bottom_dump): Update.\n+\t(struct df_lr_problem_data): Embedd bitmap headers.\n \n 2010-06-04  Jan Hubicka  <jh@suse.cz>\n \n-\t* dce.c (dce_process_block): Do not re-scan already marked instructions.\n+\t* dce.c (dce_process_block): Do not re-scan already marked\n+\tinstructions.\n \n 2010-06-04  Bernd Schmidt  <bernds@codesourcery.com>\n \n@@ -81,8 +101,7 @@\n \t(ira_adjust_equiv_reg_cost): New function.\n \t* ira.h (ira_adjust_equiv_reg_cost): Declare it.\n \t* reload1.c (init_eliminable_invariants, free_reg_equiv,\n-\telimination_costs_in_insn, note_reg_elim_costly): New static\n-\tfunctions.\n+\telimination_costs_in_insn, note_reg_elim_costly): New static functions.\n \t(elim_bb): New static variable.\n \t(reload): Move code out of here into init_eliminable_invariants and\n \tfree_reg_equiv.  Call them."}, {"sha": "468c2391f24c42619d32fd4dcc50366512ad7139", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 28, "deletions": 334, "changes": 362, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1f7916e754694a877cb6d701112e2d9ec6643c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1f7916e754694a877cb6d701112e2d9ec6643c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ad1f7916e754694a877cb6d701112e2d9ec6643c", "patch": "@@ -6395,12 +6395,12 @@\n (define_insn \"*add<mode>_2\"\n   [(set (reg FLAGS_REG)\n \t(compare\n-\t  (plus:SWI48\n-\t    (match_operand:SWI48 1 \"nonimmediate_operand\" \"%0,0\")\n-\t    (match_operand:SWI48 2 \"<general_operand>\" \"<g>,r<i>\"))\n+\t  (plus:SWI\n+\t    (match_operand:SWI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t    (match_operand:SWI 2 \"<general_operand>\" \"<g>,<r><i>\"))\n \t  (const_int 0)))\n-   (set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=r,rm\")\n-\t(plus:SWI48 (match_dup 1) (match_dup 2)))]\n+   (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>,<r>m\")\n+\t(plus:SWI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n {\n@@ -6427,7 +6427,7 @@\n     }\n }\n   [(set (attr \"type\")\n-     (if_then_else (match_operand:SWI48 2 \"incdec_operand\" \"\")\n+     (if_then_else (match_operand:SWI 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n    (set (attr \"length_immediate\")\n@@ -6478,89 +6478,12 @@\n \t(const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*addhi_2\"\n-  [(set (reg FLAGS_REG)\n-\t(compare\n-\t  (plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t   (match_operand:HI 2 \"general_operand\" \"rmn,rn\"))\n-\t  (const_int 0)))\n-   (set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm\")\n-\t(plus:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (PLUS, HImode, operands)\"\n-{\n-  switch (get_attr_type (insn))\n-    {\n-    case TYPE_INCDEC:\n-      if (operands[2] == const1_rtx)\n-\treturn \"inc{w}\\t%0\";\n-      else\n-        {\n-\t  gcc_assert (operands[2] == constm1_rtx);\n-\t  return \"dec{w}\\t%0\";\n-\t}\n-\n-    default:\n-      if (x86_maybe_negate_const_int (&operands[2], HImode))\n-\treturn \"sub{w}\\t{%2, %0|%0, %2}\";\n-\n-      return \"add{w}\\t{%2, %0|%0, %2}\";\n-    }\n-}\n-  [(set (attr \"type\")\n-     (if_then_else (match_operand:HI 2 \"incdec_operand\" \"\")\n-\t(const_string \"incdec\")\n-\t(const_string \"alu\")))\n-   (set (attr \"length_immediate\")\n-      (if_then_else\n-\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n-\t(const_string \"1\")\n-\t(const_string \"*\")))\n-   (set_attr \"mode\" \"HI\")])\n-\n-(define_insn \"*addqi_2\"\n-  [(set (reg FLAGS_REG)\n-\t(compare\n-\t  (plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t   (match_operand:QI 2 \"general_operand\" \"qmn,qn\"))\n-\t  (const_int 0)))\n-   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,qm\")\n-\t(plus:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (PLUS, QImode, operands)\"\n-{\n-  switch (get_attr_type (insn))\n-    {\n-    case TYPE_INCDEC:\n-      if (operands[2] == const1_rtx)\n-\treturn \"inc{b}\\t%0\";\n-      else\n-        {\n-\t  gcc_assert (operands[2] == constm1_rtx\n-\t\t      || (CONST_INT_P (operands[2])\n-\t\t          && INTVAL (operands[2]) == 255));\n-\t  return \"dec{b}\\t%0\";\n-\t}\n-\n-    default:\n-      if (x86_maybe_negate_const_int (&operands[2], QImode))\n-\treturn \"sub{b}\\t{%2, %0|%0, %2}\";\n-\n-      return \"add{b}\\t{%2, %0|%0, %2}\";\n-    }\n-}\n-  [(set (attr \"type\")\n-     (if_then_else (match_operand:QI 2 \"incdec_operand\" \"\")\n-\t(const_string \"incdec\")\n-\t(const_string \"alu\")))\n-   (set_attr \"mode\" \"QI\")])\n-\n (define_insn \"*add<mode>_3\"\n   [(set (reg FLAGS_REG)\n \t(compare\n-\t  (neg:SWI48 (match_operand:SWI48 2 \"<general_operand>\" \"<g>\"))\n-\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"%0\")))\n-   (clobber (match_scratch:SWI48 0 \"=r\"))]\n+\t  (neg:SWI (match_operand:SWI 2 \"<general_operand>\" \"<g>\"))\n+\t  (match_operand:SWI 1 \"nonimmediate_operand\" \"%0\")))\n+   (clobber (match_scratch:SWI 0 \"=<r>\"))]\n   \"ix86_match_ccmode (insn, CCZmode)\n    && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n {\n@@ -6587,7 +6510,7 @@\n     }\n }\n   [(set (attr \"type\")\n-     (if_then_else (match_operand:SWI48 2 \"incdec_operand\" \"\")\n+     (if_then_else (match_operand:SWI 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n    (set (attr \"length_immediate\")\n@@ -6637,79 +6560,6 @@\n \t(const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*addhi_3\"\n-  [(set (reg FLAGS_REG)\n-\t(compare\n-\t  (neg:HI (match_operand:HI 2 \"general_operand\" \"rmn\"))\n-\t  (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")))\n-   (clobber (match_scratch:HI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCZmode)\n-   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n-{\n-  switch (get_attr_type (insn))\n-    {\n-    case TYPE_INCDEC:\n-      if (operands[2] == const1_rtx)\n-\treturn \"inc{w}\\t%0\";\n-      else\n-        {\n-\t  gcc_assert (operands[2] == constm1_rtx);\n-\t  return \"dec{w}\\t%0\";\n-\t}\n-\n-    default:\n-      if (x86_maybe_negate_const_int (&operands[2], HImode))\n-\treturn \"sub{w}\\t{%2, %0|%0, %2}\";\n-\n-      return \"add{w}\\t{%2, %0|%0, %2}\";\n-    }\n-}\n-  [(set (attr \"type\")\n-     (if_then_else (match_operand:HI 2 \"incdec_operand\" \"\")\n-\t(const_string \"incdec\")\n-\t(const_string \"alu\")))\n-   (set (attr \"length_immediate\")\n-      (if_then_else\n-\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n-\t(const_string \"1\")\n-\t(const_string \"*\")))\n-   (set_attr \"mode\" \"HI\")])\n-\n-(define_insn \"*addqi_3\"\n-  [(set (reg FLAGS_REG)\n-\t(compare\n-\t  (neg:QI (match_operand:QI 2 \"general_operand\" \"qmn\"))\n-\t  (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")))\n-   (clobber (match_scratch:QI 0 \"=q\"))]\n-  \"ix86_match_ccmode (insn, CCZmode)\n-   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n-{\n-  switch (get_attr_type (insn))\n-    {\n-    case TYPE_INCDEC:\n-      if (operands[2] == const1_rtx)\n-\treturn \"inc{b}\\t%0\";\n-      else\n-        {\n-\t  gcc_assert (operands[2] == constm1_rtx\n-\t\t      || (CONST_INT_P (operands[2])\n-\t\t\t  && INTVAL (operands[2]) == 255));\n-\t  return \"dec{b}\\t%0\";\n-\t}\n-\n-    default:\n-      if (x86_maybe_negate_const_int (&operands[2], QImode))\n-\treturn \"sub{b}\\t{%2, %0|%0, %2}\";\n-\n-      return \"add{b}\\t{%2, %0|%0, %2}\";\n-    }\n-}\n-  [(set (attr \"type\")\n-     (if_then_else (match_operand:QI 2 \"incdec_operand\" \"\")\n-\t(const_string \"incdec\")\n-\t(const_string \"alu\")))\n-   (set_attr \"mode\" \"QI\")])\n-\n ; For comparisons against 1, -1 and 128, we may generate better code\n ; by converting cmp to add, inc or dec as done by peephole2.  This pattern\n ; is matched then.  We can't accept general immediate, because for\n@@ -6763,129 +6613,52 @@\n ; Also carry flag is reversed compared to cmp, so this conversion is valid\n ; only for comparisons not depending on it.\n \n-(define_insn \"*addsi_4\"\n+(define_insn \"*add<mode>_4\"\n   [(set (reg FLAGS_REG)\n \t(compare\n-\t  (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n-\t  (match_operand:SI 2 \"const_int_operand\" \"n\")))\n-   (clobber (match_scratch:SI 0 \"=rm\"))]\n+\t  (match_operand:SWI124 1 \"nonimmediate_operand\" \"0\")\n+\t  (match_operand:SWI124 2 \"const_int_operand\" \"n\")))\n+   (clobber (match_scratch:SWI124 0 \"=<r>m\"))]\n   \"ix86_match_ccmode (insn, CCGCmode)\"\n {\n   switch (get_attr_type (insn))\n     {\n     case TYPE_INCDEC:\n       if (operands[2] == constm1_rtx)\n-        return \"inc{l}\\t%0\";\n+        return \"inc{<imodesuffix>}\\t%0\";\n       else\n         {\n \t  gcc_assert (operands[2] == const1_rtx);\n-          return \"dec{l}\\t%0\";\n-\t}\n-\n-    default:\n-      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n-      if (x86_maybe_negate_const_int (&operands[2], SImode))\n-\treturn \"add{l}\\t{%2, %0|%0, %2}\";\n-\n-      return \"sub{l}\\t{%2, %0|%0, %2}\";\n-    }\n-}\n-  [(set (attr \"type\")\n-     (if_then_else (match_operand:SI 2 \"incdec_operand\" \"\")\n-\t(const_string \"incdec\")\n-\t(const_string \"alu\")))\n-   (set (attr \"length_immediate\")\n-      (if_then_else\n-\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n-\t(const_string \"1\")\n-\t(const_string \"*\")))\n-   (set_attr \"mode\" \"SI\")])\n-\n-; See comments above addsi_4 for details.\n-\n-(define_insn \"*addhi_4\"\n-  [(set (reg FLAGS_REG)\n-\t(compare\n-\t  (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n-\t  (match_operand:HI 2 \"const_int_operand\" \"n\")))\n-   (clobber (match_scratch:HI 0 \"=rm\"))]\n-  \"ix86_match_ccmode (insn, CCGCmode)\"\n-{\n-  switch (get_attr_type (insn))\n-    {\n-    case TYPE_INCDEC:\n-      if (operands[2] == constm1_rtx)\n-        return \"inc{w}\\t%0\";\n-      else\n-\t{\n-\t  gcc_assert (operands[2] == const1_rtx);\n-          return \"dec{w}\\t%0\";\n+          return \"dec{<imodesuffix>}\\t%0\";\n \t}\n \n     default:\n       gcc_assert (rtx_equal_p (operands[0], operands[1]));\n-      if (x86_maybe_negate_const_int (&operands[2], HImode))\n-\treturn \"add{w}\\t{%2, %0|%0, %2}\";\n+      if (x86_maybe_negate_const_int (&operands[2], <MODE>mode))\n+\treturn \"add{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n \n-      return \"sub{w}\\t{%2, %0|%0, %2}\";\n+      return \"sub{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n     }\n }\n   [(set (attr \"type\")\n-     (if_then_else (match_operand:HI 2 \"incdec_operand\" \"\")\n+     (if_then_else (match_operand:<MODE> 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n    (set (attr \"length_immediate\")\n       (if_then_else\n \t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n \t(const_string \"1\")\n \t(const_string \"*\")))\n-   (set_attr \"mode\" \"HI\")])\n-\n-; See comments above addsi_4 for details.\n-\n-(define_insn \"*addqi_4\"\n-  [(set (reg FLAGS_REG)\n-\t(compare\n-\t  (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n-\t  (match_operand:QI 2 \"const_int_operand\" \"n\")))\n-   (clobber (match_scratch:QI 0 \"=qm\"))]\n-  \"ix86_match_ccmode (insn, CCGCmode)\"\n-{\n-  switch (get_attr_type (insn))\n-    {\n-    case TYPE_INCDEC:\n-      if (operands[2] == constm1_rtx\n-\t  || (CONST_INT_P (operands[2])\n-\t      && INTVAL (operands[2]) == 255))\n-        return \"inc{b}\\t%0\";\n-      else\n-\t{\n-\t  gcc_assert (operands[2] == const1_rtx);\n-          return \"dec{b}\\t%0\";\n-\t}\n-\n-    default:\n-      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n-      if (x86_maybe_negate_const_int (&operands[2], QImode))\n-\treturn \"add{b}\\t{%2, %0|%0, %2}\";\n-\n-      return \"sub{b}\\t{%2, %0|%0, %2}\";\n-    }\n-}\n-  [(set (attr \"type\")\n-     (if_then_else (match_operand:HI 2 \"incdec_operand\" \"\")\n-\t(const_string \"incdec\")\n-\t(const_string \"alu\")))\n-   (set_attr \"mode\" \"QI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*add<mode>_5\"\n   [(set (reg FLAGS_REG)\n \t(compare\n-\t  (plus:SWI48\n-\t    (match_operand:SWI48 1 \"nonimmediate_operand\" \"%0\")\n-\t    (match_operand:SWI48 2 \"<general_operand>\" \"<g>\"))\n+\t  (plus:SWI\n+\t    (match_operand:SWI 1 \"nonimmediate_operand\" \"%0\")\n+\t    (match_operand:SWI 2 \"<general_operand>\" \"<g>\"))\n \t  (const_int 0)))\n-   (clobber (match_scratch:SWI48 0 \"=r\"))]\n+   (clobber (match_scratch:SWI 0 \"=<r>\"))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n    && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n {\n@@ -6910,7 +6683,7 @@\n     }\n }\n   [(set (attr \"type\")\n-     (if_then_else (match_operand:SWI48 2 \"incdec_operand\" \"\")\n+     (if_then_else (match_operand:SWI 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n    (set (attr \"length_immediate\")\n@@ -6920,81 +6693,6 @@\n \t(const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*addhi_5\"\n-  [(set (reg FLAGS_REG)\n-\t(compare\n-\t  (plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t   (match_operand:HI 2 \"general_operand\" \"rmn\"))\n-\t  (const_int 0)))\n-   (clobber (match_scratch:HI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n-{\n-  switch (get_attr_type (insn))\n-    {\n-    case TYPE_INCDEC:\n-      if (operands[2] == const1_rtx)\n-\treturn \"inc{w}\\t%0\";\n-      else\n-\t{\n-\t  gcc_assert (operands[2] == constm1_rtx);\n-\t  return \"dec{w}\\t%0\";\n-\t}\n-\n-    default:\n-      if (x86_maybe_negate_const_int (&operands[2], HImode))\n-\treturn \"sub{w}\\t{%2, %0|%0, %2}\";\n-\n-      return \"add{w}\\t{%2, %0|%0, %2}\";\n-    }\n-}\n-  [(set (attr \"type\")\n-     (if_then_else (match_operand:HI 2 \"incdec_operand\" \"\")\n-\t(const_string \"incdec\")\n-\t(const_string \"alu\")))\n-   (set (attr \"length_immediate\")\n-      (if_then_else\n-\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n-\t(const_string \"1\")\n-\t(const_string \"*\")))\n-   (set_attr \"mode\" \"HI\")])\n-\n-(define_insn \"*addqi_5\"\n-  [(set (reg FLAGS_REG)\n-\t(compare\n-\t  (plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t   (match_operand:QI 2 \"general_operand\" \"qmn\"))\n-\t  (const_int 0)))\n-   (clobber (match_scratch:QI 0 \"=q\"))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\n-   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n-{\n-  switch (get_attr_type (insn))\n-    {\n-    case TYPE_INCDEC:\n-      if (operands[2] == const1_rtx)\n-\treturn \"inc{b}\\t%0\";\n-      else\n-        {\n-\t  gcc_assert (operands[2] == constm1_rtx\n-\t\t      || (CONST_INT_P (operands[2])\n-\t\t\t  && INTVAL (operands[2]) == 255));\n-\t  return \"dec{b}\\t%0\";\n-\t}\n-\n-    default:\n-      if (x86_maybe_negate_const_int (&operands[2], QImode))\n-\treturn \"sub{b}\\t{%2, %0|%0, %2}\";\n-\n-      return \"add{b}\\t{%2, %0|%0, %2}\";\n-    }\n-}\n-  [(set (attr \"type\")\n-     (if_then_else (match_operand:QI 2 \"incdec_operand\" \"\")\n-\t(const_string \"incdec\")\n-\t(const_string \"alu\")))\n-   (set_attr \"mode\" \"QI\")])\n-\n (define_insn \"*addqi_ext_1_rex64\"\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n \t\t\t (const_int 8)\n@@ -7015,9 +6713,7 @@\n \treturn \"inc{b}\\t%h0\";\n       else\n         {\n-\t  gcc_assert (operands[2] == constm1_rtx\n-\t\t      || (CONST_INT_P (operands[2])\n-\t\t\t  && INTVAL (operands[2]) == 255));\n+\t  gcc_assert (operands[2] == constm1_rtx);\n           return \"dec{b}\\t%h0\";\n         }\n \n@@ -7052,9 +6748,7 @@\n \treturn \"inc{b}\\t%h0\";\n       else\n         {\n-\t  gcc_assert (operands[2] == constm1_rtx\n-\t\t      || (CONST_INT_P (operands[2])\n-\t\t\t  && INTVAL (operands[2]) == 255));\n+\t  gcc_assert (operands[2] == constm1_rtx);\n           return \"dec{b}\\t%h0\";\n \t}\n "}]}