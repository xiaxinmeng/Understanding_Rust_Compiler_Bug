{"sha": "7f7429ca2ca16ccd9c2af06b8a3b048e94ed563e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y3NDI5Y2EyY2ExNmNjZDljMmFmMDZiOGEzYjA0OGU5NGVkNTYzZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-05T08:04:57Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-05T08:04:57Z"}, "message": "(hard-reg-set.h):  Included to get decl of `reg_names'.\n\n(PRINT_REG):  Default definition added.\n(dwarf_last_decl):  Variable declaration added.\n(output_reg_number):  New function; handle -fverbose-asm reg printing.\n(output_mem_loc_descriptor, output_loc_descriptor):  Call it.\n(output_decl):  Set `dwarf_last_decl' each time this fn is called.\n\nFrom-SVN: r2325", "tree": {"sha": "86c8af7503386e0f81971c81007c743fa5000b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86c8af7503386e0f81971c81007c743fa5000b20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f7429ca2ca16ccd9c2af06b8a3b048e94ed563e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7429ca2ca16ccd9c2af06b8a3b048e94ed563e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f7429ca2ca16ccd9c2af06b8a3b048e94ed563e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7429ca2ca16ccd9c2af06b8a3b048e94ed563e/comments", "author": null, "committer": null, "parents": [{"sha": "139fc12e0f70790ba5dea9afa3b333c23e09e334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/139fc12e0f70790ba5dea9afa3b333c23e09e334", "html_url": "https://github.com/Rust-GCC/gccrs/commit/139fc12e0f70790ba5dea9afa3b333c23e09e334"}], "stats": {"total": 68, "additions": 44, "deletions": 24}, "files": [{"sha": "0774ca085b508ab9fb1ae897c44b140e8a574d25", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 44, "deletions": 24, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7429ca2ca16ccd9c2af06b8a3b048e94ed563e/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7429ca2ca16ccd9c2af06b8a3b048e94ed563e/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=7f7429ca2ca16ccd9c2af06b8a3b048e94ed563e", "patch": "@@ -28,6 +28,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"tree.h\"\n #include \"flags.h\"\n #include \"rtl.h\"\n+#include \"hard-reg-set.h\"\n #include \"insn-config.h\"\n #include \"reload.h\"\n #include \"output.h\"\n@@ -80,6 +81,12 @@ extern char *rindex ();\n #define ASM_COMMENT_START \";#\"\n #endif\n \n+/* How to print out a register name.  */\n+#ifndef PRINT_REG\n+#define PRINT_REG(RTX, CODE, FILE) \\\n+  fprintf ((FILE), \"%s\", reg_names[REGNO (RTX)])\n+#endif\n+\n /* Define a macro which returns non-zero for any tagged type which is\n    used (directly or indirectly) in the specification of either some\n    function's return type or some formal parameter of some function.\n@@ -277,6 +284,13 @@ static tree fake_containing_scope;\n \n static unsigned current_funcdef_number = 1;\n \n+/* A pointer to the ..._DECL node which we have most recently been working\n+   on.  We keep this around just in case something about it looks screwy\n+   and we want to tell the user what the source coordinates for the actual\n+   declaration are.  */\n+\n+static tree dwarf_last_decl;\n+\n /* Forward declarations for functions defined in this file.  */\n \n static void output_type ();\n@@ -1438,6 +1452,28 @@ equate_type_number_to_die_number (type)\n   ASM_OUTPUT_DEF (asm_out_file, type_label, die_label);\n }\n \n+static void\n+output_reg_number (rtl)\n+     register rtx rtl;\n+{\n+  register unsigned regno = REGNO (rtl);\n+\n+  if (regno >= FIRST_PSEUDO_REGISTER)\n+    {\n+      warning_with_decl (dwarf_last_decl, \"internal regno botch: regno = %d\\n\",\n+\t\t\t regno);\n+      regno = 0;\n+    }\n+  fprintf (asm_out_file, \"\\t%s\\t0x%x\",\n+\t   UNALIGNED_INT_ASM_OP, DBX_REGISTER_NUMBER (regno));\n+  if (flag_verbose_asm)\n+    {\n+      fprintf (asm_out_file, \"\\t%s \", ASM_COMMENT_START);\n+      PRINT_REG (rtl, 0, asm_out_file);\n+    }\n+  fputc ('\\n', asm_out_file);\n+}\n+\n /* The following routine is a nice and simple transducer.  It converts the\n    RTL for a variable or parameter (resident in memory) into an equivalent\n    Dwarf representation of a mechanism for getting the address of that same\n@@ -1492,18 +1528,7 @@ output_mem_loc_descriptor (rtl)\n \t   distinction between OP_REG and OP_BASEREG.  */\n \n \tASM_OUTPUT_DWARF_STACK_OP (asm_out_file, OP_BASEREG);\n-\t{\n-\t  register unsigned regno = REGNO (rtl);\n-\n-\t  if (regno >= FIRST_PSEUDO_REGISTER)\n-\t    {\n-\t      fprintf (stderr, \"%s: regno botch detected: dwarfout.c:%u\\n\",\n-\t\t       language_string, __LINE__);\n-\t      debug_rtx(rtl);\n-\t      regno = 0;\n-\t    }\n-\t  ASM_OUTPUT_DWARF_DATA4 (asm_out_file, DBX_REGISTER_NUMBER (regno));\n-\t}\n+\toutput_reg_number (rtl);\n \tbreak;\n \n       case MEM:\n@@ -1558,18 +1583,7 @@ output_loc_descriptor (rtl)\n \n     case REG:\n \tASM_OUTPUT_DWARF_STACK_OP (asm_out_file, OP_REG);\n-\t{\n-\t  register unsigned regno = REGNO (rtl);\n-\n-\t  if (regno >= FIRST_PSEUDO_REGISTER)\n-\t    {\n-\t      fprintf (stderr, \"%s: regno botch detected: dwarfout.c:%u\\n\",\n-\t\t       language_string, __LINE__);\n-\t      debug_rtx(rtl);\n-\t      regno = 0;\n-\t    }\n-\t  ASM_OUTPUT_DWARF_DATA4 (asm_out_file, DBX_REGISTER_NUMBER (regno));\n-\t}\n+\toutput_reg_number (rtl);\n \tbreak;\n \n     case MEM:\n@@ -4212,6 +4226,12 @@ output_decl (decl, containing_scope)\n      register tree decl;\n      register tree containing_scope;\n {\n+  /* Make a note of the decl node we are going to be working on.  We may\n+     need to give the user the source coordinates of where it appeared in\n+     case we notice (later on) that something about it looks screwy.  */\n+\n+  dwarf_last_decl = decl;\n+\n   if (TREE_CODE (decl) == ERROR_MARK)\n     return;\n "}]}