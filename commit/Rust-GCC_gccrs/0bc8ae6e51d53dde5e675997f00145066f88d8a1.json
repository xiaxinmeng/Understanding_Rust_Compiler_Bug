{"sha": "0bc8ae6e51d53dde5e675997f00145066f88d8a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJjOGFlNmU1MWQ1M2RkZTVlNjc1OTk3ZjAwMTQ1MDY2Zjg4ZDhhMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-12-11T22:25:57Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-12-11T22:25:57Z"}, "message": "(print_operand): Use HOST_WIDE_INT_PRINT_DEC instead of using \"%ld\".\n\n(output_prolog): Don't print useless comment for VMS.\n\nFrom-SVN: r13285", "tree": {"sha": "2b46cff4bba6fcc614a11fe7448952ba6ac6e134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b46cff4bba6fcc614a11fe7448952ba6ac6e134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bc8ae6e51d53dde5e675997f00145066f88d8a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bc8ae6e51d53dde5e675997f00145066f88d8a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bc8ae6e51d53dde5e675997f00145066f88d8a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bc8ae6e51d53dde5e675997f00145066f88d8a1/comments", "author": null, "committer": null, "parents": [{"sha": "555919ac3ca07295751472e0e88b8c0a3f05345f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/555919ac3ca07295751472e0e88b8c0a3f05345f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/555919ac3ca07295751472e0e88b8c0a3f05345f"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "718ad9b6efc1b2c1e3f9b931a37c75b7dc2346b7", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bc8ae6e51d53dde5e675997f00145066f88d8a1/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bc8ae6e51d53dde5e675997f00145066f88d8a1/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=0bc8ae6e51d53dde5e675997f00145066f88d8a1", "patch": "@@ -1340,31 +1340,32 @@ print_operand (file, x, code)\n       if (GET_CODE (x) != CONST_INT)\n \toutput_operand_lossage (\"invalid %%N value\");\n \n-      fprintf (file, \"%ld\", ~ INTVAL (x));\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, ~ INTVAL (x));\n       break;\n \n     case 'P':\n       /* Write 1 << C, for a constant C.  */\n       if (GET_CODE (x) != CONST_INT)\n \toutput_operand_lossage (\"invalid %%P value\");\n \n-      fprintf (file, \"%ld\", (HOST_WIDE_INT) 1 << INTVAL (x));\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT) 1 << INTVAL (x));\n       break;\n \n     case 'h':\n       /* Write the high-order 16 bits of a constant, sign-extended.  */\n       if (GET_CODE (x) != CONST_INT)\n \toutput_operand_lossage (\"invalid %%h value\");\n \n-      fprintf (file, \"%ld\", INTVAL (x) >> 16);\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (x) >> 16);\n       break;\n \n     case 'L':\n       /* Write the low-order 16 bits of a constant, sign-extended.  */\n       if (GET_CODE (x) != CONST_INT)\n \toutput_operand_lossage (\"invalid %%L value\");\n \n-      fprintf (file, \"%ld\", (INTVAL (x) & 0xffff) - 2 * (INTVAL (x) & 0x8000));\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC,\n+\t       (INTVAL (x) & 0xffff) - 2 * (INTVAL (x) & 0x8000));\n       break;\n \n     case 'm':\n@@ -1386,7 +1387,7 @@ print_operand (file, x, code)\n \t    if (value & 0xff)\n \t      mask |= (1 << (i + sizeof (int)));\n \n-\t  fprintf (file, \"%ld\", mask & 0xff);\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, mask & 0xff);\n \t}\n \n       else if (GET_CODE (x) == CONST_INT)\n@@ -1397,7 +1398,7 @@ print_operand (file, x, code)\n \t    if (value & 0xff)\n \t      mask |= (1 << i);\n \n-\t  fprintf (file, \"%ld\", mask);\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, mask);\n \t}\n       else\n \toutput_operand_lossage (\"invalid %%m value\");\n@@ -1439,7 +1440,7 @@ print_operand (file, x, code)\n \t  && (INTVAL (x) & 7) != 8)\n \toutput_operand_lossage (\"invalid %%s value\");\n \n-      fprintf (file, \"%ld\", INTVAL (x) / 8);\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (x) / 8);\n       break;\n \n     case 'S':\n@@ -1450,7 +1451,7 @@ print_operand (file, x, code)\n \t  && (INTVAL (x) & 7) != 8)\n \toutput_operand_lossage (\"invalid %%s value\");\n \n-      fprintf (file, \"%ld\", (64 - INTVAL (x)) / 8);\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, (64 - INTVAL (x)) / 8);\n       break;\n \n     case 'C': case 'D': case 'c': case 'd':\n@@ -2009,10 +2010,6 @@ output_prolog (file, size)\n \t\t   + (is_stack_procedure ? 8 : 0)\n \t\t   + size + current_function_pretend_args_size);\n \n-  fprintf (file, \"# size %d, current_function_pretend_args_size %d, current_function_outgoing_args_size %d\\n\",\n-\tsize, current_function_pretend_args_size, current_function_outgoing_args_size);\n-  fprintf (file, \"# sa_size %d, frame_size %d\\n\", sa_size, frame_size);\n-\n   /* Issue function start and label.  */\n   fprintf (file, \"\\t.ent \");\n   assemble_name (file, alpha_function_name);"}]}