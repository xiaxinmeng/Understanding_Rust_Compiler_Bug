{"sha": "066c89d1e1c509975a0e76be4279e2505084bd3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY2Yzg5ZDFlMWM1MDk5NzVhMGU3NmJlNDI3OWUyNTA1MDg0YmQzYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-17T18:07:25Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-17T21:28:07Z"}, "message": "global trees\n\nThis reorders the common and c++ global tree arrays.  It introduces a\nmodule-specific High Water Mark, below which are the immutable slots\ninitialized at startup and beyond which are the lazily filled slots\n(and a few immutables we need to locate by name lookup anyway).\n\n\tgcc/c-family/\n\t* c-common.h (enum c_tree_index): Reorder to place lazy fields\n\tafter newly-added CTI_MODULE_HWM.\n\tgcc/cp/\n\t* cp-tree.h (enum cp_tree_index): Reorder to place lazy fields\n\tafter newly-added CPTI_MODULE_HWM.", "tree": {"sha": "53bd1a7f460efcd0b1147ff5c5fc7067bdfb14c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53bd1a7f460efcd0b1147ff5c5fc7067bdfb14c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/066c89d1e1c509975a0e76be4279e2505084bd3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/066c89d1e1c509975a0e76be4279e2505084bd3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/066c89d1e1c509975a0e76be4279e2505084bd3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/066c89d1e1c509975a0e76be4279e2505084bd3b/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c49f56adcb2fcfbf3bcf6e1a088bc5dd702f266e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c49f56adcb2fcfbf3bcf6e1a088bc5dd702f266e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c49f56adcb2fcfbf3bcf6e1a088bc5dd702f266e"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "f413e8773f5e839bbc24c56c9c64d67c5a7122a6", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/066c89d1e1c509975a0e76be4279e2505084bd3b/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/066c89d1e1c509975a0e76be4279e2505084bd3b/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=066c89d1e1c509975a0e76be4279e2505084bd3b", "patch": "@@ -364,13 +364,17 @@ enum c_tree_index\n \n     CTI_DEFAULT_FUNCTION_TYPE,\n \n+    CTI_NULL,\n+\n     /* These are not types, but we have to look them up all the time.  */\n     CTI_FUNCTION_NAME_DECL,\n     CTI_PRETTY_FUNCTION_NAME_DECL,\n     CTI_C99_FUNCTION_NAME_DECL,\n-    CTI_SAVED_FUNCTION_NAME_DECLS,\n \n-    CTI_NULL,\n+    CTI_MODULE_HWM,\n+    /* Below here entities change during compilation.  */\n+\n+    CTI_SAVED_FUNCTION_NAME_DECLS,\n \n     CTI_MAX\n };"}, {"sha": "81485de94f94efee69caeff64447d33e495ac20f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/066c89d1e1c509975a0e76be4279e2505084bd3b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/066c89d1e1c509975a0e76be4279e2505084bd3b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=066c89d1e1c509975a0e76be4279e2505084bd3b", "patch": "@@ -128,12 +128,8 @@ enum cp_tree_index\n     CPTI_EXPLICIT_VOID_LIST,\n     CPTI_VTBL_TYPE,\n     CPTI_VTBL_PTR_TYPE,\n-    CPTI_STD,\n-    CPTI_ABI,\n     CPTI_GLOBAL,\n     CPTI_GLOBAL_TYPE,\n-    CPTI_CONST_TYPE_INFO_TYPE,\n-    CPTI_TYPE_INFO_PTR_TYPE,\n     CPTI_ABORT_FNDECL,\n     CPTI_AGGR_TAG,\n     CPTI_CONV_OP_MARKER,\n@@ -190,8 +186,28 @@ enum cp_tree_index\n     CPTI_NOEXCEPT_FALSE_SPEC,\n     CPTI_NOEXCEPT_DEFERRED_SPEC,\n \n+    CPTI_NULLPTR,\n+    CPTI_NULLPTR_TYPE,\n+\n+    CPTI_ANY_TARG,\n+\n+    CPTI_MODULE_HWM,\n+    /* Nodes after here change during compilation, or should not be in\n+       the module's global tree table.  */\n+\n+    /* We must find these via the global namespace.  */\n+    CPTI_STD,\n+    CPTI_ABI,\n+\n+    /* These are created at init time, but the library/headers provide\n+       definitions.  */\n+    CPTI_ALIGN_TYPE,\n+    CPTI_CONST_TYPE_INFO_TYPE,\n+    CPTI_TYPE_INFO_PTR_TYPE,\n     CPTI_TERMINATE_FN,\n     CPTI_CALL_UNEXPECTED_FN,\n+\n+    /* These are lazily inited.  */\n     CPTI_GET_EXCEPTION_PTR_FN,\n     CPTI_BEGIN_CATCH_FN,\n     CPTI_END_CATCH_FN,\n@@ -204,13 +220,6 @@ enum cp_tree_index\n     CPTI_DSO_HANDLE,\n     CPTI_DCAST,\n \n-    CPTI_NULLPTR,\n-    CPTI_NULLPTR_TYPE,\n-\n-    CPTI_ALIGN_TYPE,\n-\n-    CPTI_ANY_TARG,\n-\n     CPTI_SOURCE_LOCATION_IMPL,\n \n     CPTI_FALLBACK_DFLOAT32_TYPE,"}]}