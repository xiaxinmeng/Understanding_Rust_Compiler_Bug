{"sha": "76bbe0281d2291f72fac65dc87513ee91a54382c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZiYmUwMjgxZDIyOTFmNzJmYWM2NWRjODc1MTNlZTkxYTU0MzgyYw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@rabi.columbia.edu", "date": "1999-04-27T05:34:43Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-04-27T05:34:43Z"}, "message": "expr.c (emit_move_insn_1): Abort if MODE argument is invalid.\n\n1999-04-27 08:32 -0400  Zack Weinberg  <zack@rabi.columbia.edu>\n\t* expr.c (emit_move_insn_1): Abort if MODE argument is invalid.\n\t(compare): Punt if TREE_OPERAND (exp, 0) is an ERROR_MARK.\n\nFrom-SVN: r26673", "tree": {"sha": "9c4448a681a75a900c93ce0ca59fa19311001d7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c4448a681a75a900c93ce0ca59fa19311001d7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76bbe0281d2291f72fac65dc87513ee91a54382c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76bbe0281d2291f72fac65dc87513ee91a54382c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76bbe0281d2291f72fac65dc87513ee91a54382c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76bbe0281d2291f72fac65dc87513ee91a54382c/comments", "author": null, "committer": null, "parents": [{"sha": "d2e0d40a134bf6080552ab8dc6fce9d33bbb70f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2e0d40a134bf6080552ab8dc6fce9d33bbb70f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2e0d40a134bf6080552ab8dc6fce9d33bbb70f1"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "90bbe68247d3d0d3b315a5557e9d8cc868e6629f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76bbe0281d2291f72fac65dc87513ee91a54382c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76bbe0281d2291f72fac65dc87513ee91a54382c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76bbe0281d2291f72fac65dc87513ee91a54382c", "patch": "@@ -1,3 +1,8 @@\n+1999-04-27 08:32 -0400  Zack Weinberg  <zack@rabi.columbia.edu>\n+\n+\t* expr.c (emit_move_insn_1): Abort if MODE argument is invalid. \n+\t(compare): Punt if TREE_OPERAND (exp, 0) is an ERROR_MARK.\n+\n Tue Apr 27 01:33:43 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* Makefile.in (ORDINARY_FLAGS_TO_PASS): Renmaed from FLAGS_TO_PASS."}, {"sha": "f8ca4267b7763000cc8888f5123dc1fa6fc6335c", "filename": "gcc/expr.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76bbe0281d2291f72fac65dc87513ee91a54382c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76bbe0281d2291f72fac65dc87513ee91a54382c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=76bbe0281d2291f72fac65dc87513ee91a54382c", "patch": "@@ -2565,6 +2565,9 @@ emit_move_insn_1 (x, y)\n   enum mode_class class = GET_MODE_CLASS (mode);\n   int i;\n \n+  if (mode >= MAX_MACHINE_MODE)\n+      abort ();\n+\n   if (mov_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing)\n     return\n       emit_insn (GEN_FCN (mov_optab->handlers[(int) mode].insn_code) (x, y));\n@@ -11205,14 +11208,22 @@ compare (exp, signed_code, unsigned_code)\n      register tree exp;\n      enum rtx_code signed_code, unsigned_code;\n {\n-  register rtx op0\n-    = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, VOIDmode, 0);\n-  register rtx op1\n-    = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX, VOIDmode, 0);\n-  register tree type = TREE_TYPE (TREE_OPERAND (exp, 0));\n-  register enum machine_mode mode = TYPE_MODE (type);\n-  int unsignedp = TREE_UNSIGNED (type);\n-  enum rtx_code code = unsignedp ? unsigned_code : signed_code;\n+  register rtx op0, op1;\n+  register tree type;\n+  register enum machine_mode mode;\n+  int unsignedp;\n+  enum rtx_code code;\n+\n+  /* Don't crash if the comparison was erroneous.  */\n+  op0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, VOIDmode, 0);\n+  if (TREE_CODE (TREE_OPERAND (exp, 0)) == ERROR_MARK)\n+    return op0;\n+  \n+  op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX, VOIDmode, 0);\n+  type = TREE_TYPE (TREE_OPERAND (exp, 0));\n+  mode = TYPE_MODE (type);\n+  unsignedp = TREE_UNSIGNED (type);\n+  code = unsignedp ? unsigned_code : signed_code;\n \n #ifdef HAVE_canonicalize_funcptr_for_compare\n   /* If function pointers need to be \"canonicalized\" before they can"}]}