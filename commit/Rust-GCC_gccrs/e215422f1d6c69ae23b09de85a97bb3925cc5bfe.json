{"sha": "e215422f1d6c69ae23b09de85a97bb3925cc5bfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIxNTQyMmYxZDZjNjlhZTIzYjA5ZGU4NWE5N2JiMzkyNWNjNWJmZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-03-21T20:20:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-03-21T20:20:40Z"}, "message": "re PR tree-optimization/84982 (logically inverting bools into local array results in bitwise negation)\n\n\tPR tree-optimization/84982\n\t* gimple-ssa-store-merging.c (invert_op): Handle boolean inversion\n\tby flipping the least significant bit rather than all bits from\n\tbitpos to bitpos + bitsize - 1.\n\n\t* c-c++-common/pr84982.c: New test.\n\nFrom-SVN: r258742", "tree": {"sha": "1e258992b30bc6e92a03d29ded42a6af6cd3dde3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e258992b30bc6e92a03d29ded42a6af6cd3dde3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e215422f1d6c69ae23b09de85a97bb3925cc5bfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e215422f1d6c69ae23b09de85a97bb3925cc5bfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e215422f1d6c69ae23b09de85a97bb3925cc5bfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e215422f1d6c69ae23b09de85a97bb3925cc5bfe/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57e20f74e011f190a29ec0b414c0ee74e62ebdc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e20f74e011f190a29ec0b414c0ee74e62ebdc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57e20f74e011f190a29ec0b414c0ee74e62ebdc9"}], "stats": {"total": 89, "additions": 86, "deletions": 3}, "files": [{"sha": "0980eac591de1d8f7a871b9e55dd8bb8cab9fa51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e215422f1d6c69ae23b09de85a97bb3925cc5bfe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e215422f1d6c69ae23b09de85a97bb3925cc5bfe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e215422f1d6c69ae23b09de85a97bb3925cc5bfe", "patch": "@@ -1,3 +1,10 @@\n+2018-03-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/84982\n+\t* gimple-ssa-store-merging.c (invert_op): Handle boolean inversion\n+\tby flipping the least significant bit rather than all bits from\n+\tbitpos to bitpos + bitsize - 1.\n+\n 2018-03-21  Nathan Sidwell  <nathan@acm.org>\n \n \t* doc/extend.texi (Deprecated Features): Remove mention of"}, {"sha": "6f6538bf37eaa72b45a4bd0a32a53668a7648a9c", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e215422f1d6c69ae23b09de85a97bb3925cc5bfe/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e215422f1d6c69ae23b09de85a97bb3925cc5bfe/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=e215422f1d6c69ae23b09de85a97bb3925cc5bfe", "patch": "@@ -3248,16 +3248,23 @@ invert_op (split_store *split_store, int idx, tree int_type, tree &mask)\n   unsigned int i;\n   store_immediate_info *info;\n   unsigned int cnt = 0;\n+  bool any_paddings = false;\n   FOR_EACH_VEC_ELT (split_store->orig_stores, i, info)\n     {\n       bool bit_not_p = idx < 2 ? info->ops[idx].bit_not_p : info->bit_not_p;\n       if (bit_not_p)\n-\t++cnt;\n+\t{\n+\t  ++cnt;\n+\t  tree lhs = gimple_assign_lhs (info->stmt);\n+\t  if (INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n+\t      && TYPE_PRECISION (TREE_TYPE (lhs)) < info->bitsize)\n+\t    any_paddings = true;\n+\t}\n     }\n   mask = NULL_TREE;\n   if (cnt == 0)\n     return NOP_EXPR;\n-  if (cnt == split_store->orig_stores.length ())\n+  if (cnt == split_store->orig_stores.length () && !any_paddings)\n     return BIT_NOT_EXPR;\n \n   unsigned HOST_WIDE_INT try_bitpos = split_store->bytepos * BITS_PER_UNIT;\n@@ -3274,14 +3281,42 @@ invert_op (split_store *split_store, int idx, tree int_type, tree &mask)\n \t clear regions with !bit_not_p, so that gaps in between stores aren't\n \t set in the mask.  */\n       unsigned HOST_WIDE_INT bitsize = info->bitsize;\n+      unsigned HOST_WIDE_INT prec = bitsize;\n       unsigned int pos_in_buffer = 0;\n+      if (any_paddings)\n+\t{\n+\t  tree lhs = gimple_assign_lhs (info->stmt);\n+\t  if (INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n+\t      && TYPE_PRECISION (TREE_TYPE (lhs)) < bitsize)\n+\t    prec = TYPE_PRECISION (TREE_TYPE (lhs));\n+\t}\n       if (info->bitpos < try_bitpos)\n \t{\n \t  gcc_assert (info->bitpos + bitsize > try_bitpos);\n-\t  bitsize -= (try_bitpos - info->bitpos);\n+\t  if (!BYTES_BIG_ENDIAN)\n+\t    {\n+\t      if (prec <= try_bitpos - info->bitpos)\n+\t\tcontinue;\n+\t      prec -= try_bitpos - info->bitpos;\n+\t    }\n+\t  bitsize -= try_bitpos - info->bitpos;\n+\t  if (BYTES_BIG_ENDIAN && prec > bitsize)\n+\t    prec = bitsize;\n \t}\n       else\n \tpos_in_buffer = info->bitpos - try_bitpos;\n+      if (prec < bitsize)\n+\t{\n+\t  /* If this is a bool inversion, invert just the least significant\n+\t     prec bits rather than all bits of it.  */\n+\t  if (BYTES_BIG_ENDIAN)\n+\t    {\n+\t      pos_in_buffer += bitsize - prec;\n+\t      if (pos_in_buffer >= split_store->size)\n+\t\tcontinue;\n+\t    }\n+\t  bitsize = prec;\n+\t}\n       if (pos_in_buffer + bitsize > split_store->size)\n \tbitsize = split_store->size - pos_in_buffer;\n       unsigned char *p = buf + (pos_in_buffer / BITS_PER_UNIT);"}, {"sha": "f12a38357bbaff3b31f807cea953d2f4652f13a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e215422f1d6c69ae23b09de85a97bb3925cc5bfe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e215422f1d6c69ae23b09de85a97bb3925cc5bfe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e215422f1d6c69ae23b09de85a97bb3925cc5bfe", "patch": "@@ -1,5 +1,8 @@\n 2018-03-21  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/84982\n+\t* c-c++-common/pr84982.c: New test.\n+\n \tPR c++/84961\n \t* c-c++-common/pr43690.c: Don't expect errors on \"m\" (--x) and\n \t\"m\" (++x) in C++."}, {"sha": "3370a8313cbd22463da29c59d353096810266cb0", "filename": "gcc/testsuite/c-c++-common/pr84982.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e215422f1d6c69ae23b09de85a97bb3925cc5bfe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr84982.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e215422f1d6c69ae23b09de85a97bb3925cc5bfe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr84982.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr84982.c?ref=e215422f1d6c69ae23b09de85a97bb3925cc5bfe", "patch": "@@ -0,0 +1,38 @@\n+/* PR tree-optimization/84982 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#ifndef __cplusplus\n+#define bool _Bool\n+#define true 1\n+#define false 0\n+#endif\n+\n+struct S { bool a, b, c, d; };\n+\n+__attribute__((noipa)) void\n+bar (bool *x)\n+{\n+  if (x[0] || !x[1] || !x[2] || x[3])\n+    __builtin_abort ();\n+}\n+\n+__attribute__((noipa)) void\n+foo (struct S *x)\n+{\n+  bool a[4];\n+  a[0] = !x->a;\n+  a[1] = !x->b;\n+  a[2] = x->c;\n+  a[3] = !x->d;\n+  bar (a);\n+} \n+\n+int\n+main ()\n+{\n+  struct S s;\n+  s.a = true; s.b = false; s.c = true; s.d = true;\n+  foo (&s);\n+  return 0;\n+}"}]}