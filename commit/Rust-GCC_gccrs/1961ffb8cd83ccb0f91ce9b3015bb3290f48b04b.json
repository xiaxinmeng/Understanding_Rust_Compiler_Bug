{"sha": "1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk2MWZmYjhjZDgzY2NiMGY5MWNlOWIzMDE1YmIzMjkwZjQ4YjA0Yg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-05-19T20:09:57Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-05-19T20:09:57Z"}, "message": "double-int.h (double_int_ior): New function.\n\n\t* double-int.h (double_int_ior): New function.\n\t* tree.h (build_int_cst_wide_type): Remove.\n\t* tree.c (build_int_cst_wide_type): Remove.\n\t* fold-const.c (native_interpret_int): Use double_int_to_tree instead\n\tof build_int_cst_wide_type.\n\t* stor-layout.c (set_sizetype): (Ditto.).\n\t* dojump.c (do_jump): Use build_int_cstu instead of\n\tbuild_int_cst_wide_type.\n\n/java\n\t* jcf-parse.c (get_constant): Use double_int_to_tree instead of\n\tbuild_int_cst_wide_type.\n\nFrom-SVN: r159595", "tree": {"sha": "89268be053049f4ffb484bf22fb0818f0c2db8b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89268be053049f4ffb484bf22fb0818f0c2db8b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/comments", "author": null, "committer": null, "parents": [{"sha": "9908949ca643e02d6a07fef3742d50f389a80def", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9908949ca643e02d6a07fef3742d50f389a80def", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9908949ca643e02d6a07fef3742d50f389a80def"}], "stats": {"total": 80, "additions": 48, "deletions": 32}, "files": [{"sha": "e215a91fba8d66f28f3895fcdcf97ada245e043c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b", "patch": "@@ -1,3 +1,14 @@\n+2010-05-19  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* double-int.h (double_int_ior): New function.\n+\t* tree.h (build_int_cst_wide_type): Remove.\n+\t* tree.c (build_int_cst_wide_type): Remove.\n+\t* fold-const.c (native_interpret_int): Use double_int_to_tree instead\n+\tof build_int_cst_wide_type.\n+\t* stor-layout.c (set_sizetype): (Ditto.).\n+\t* dojump.c (do_jump): Use build_int_cstu instead of\n+\tbuild_int_cst_wide_type.\n+\n 2010-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* langhooks.h (struct lang_hooks): Add new field deep_unsharing."}, {"sha": "0ebf932cfc5618933db2a48ad48f994977585976", "filename": "gcc/dojump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b", "patch": "@@ -542,7 +542,7 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label, int prob)\n \t\t  unsigned HOST_WIDE_INT mask\n \t\t    = (unsigned HOST_WIDE_INT) 1 << TREE_INT_CST_LOW (shift);\n \t\t  do_jump (build2 (BIT_AND_EXPR, argtype, arg,\n-\t\t\t\t   build_int_cst_wide_type (argtype, mask, 0)),\n+\t\t\t\t   build_int_cstu (argtype, mask)),\n \t\t\t   clr_label, set_label, setclr_prob);\n \t\t  break;\n \t\t}"}, {"sha": "370f61965c9acdfce2d19248d713160ca18dac36", "filename": "gcc/double-int.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/gcc%2Fdouble-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/gcc%2Fdouble-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.h?ref=1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b", "patch": "@@ -126,6 +126,9 @@ double_int double_int_udivmod (double_int, double_int, unsigned, double_int *);\n double_int double_int_setbit (double_int, unsigned);\n \n /* Logical operations.  */\n+\n+/* Returns ~A.  */\n+\n static inline double_int\n double_int_not (double_int a)\n {\n@@ -134,6 +137,16 @@ double_int_not (double_int a)\n   return a;\n }\n \n+/* Returns A | B.  */\n+\n+static inline double_int\n+double_int_ior (double_int a, double_int b)\n+{\n+  a.low |= b.low;\n+  a.high |= b.high;\n+  return a;\n+}\n+\n /* Shift operations.  */\n double_int double_int_lshift (double_int, HOST_WIDE_INT, unsigned int, bool);\n double_int double_int_rshift (double_int, HOST_WIDE_INT, unsigned int, bool);"}, {"sha": "e92a674277a55c91810d3c48e34e0fd99ff5b395", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b", "patch": "@@ -7408,13 +7408,14 @@ native_interpret_int (tree type, const unsigned char *ptr, int len)\n   int total_bytes = GET_MODE_SIZE (TYPE_MODE (type));\n   int byte, offset, word, words;\n   unsigned char value;\n-  unsigned int HOST_WIDE_INT lo = 0;\n-  HOST_WIDE_INT hi = 0;\n+  double_int result;\n \n   if (total_bytes > len)\n     return NULL_TREE;\n   if (total_bytes * BITS_PER_UNIT > 2 * HOST_BITS_PER_WIDE_INT)\n     return NULL_TREE;\n+\n+  result = double_int_zero;\n   words = total_bytes / UNITS_PER_WORD;\n \n   for (byte = 0; byte < total_bytes; byte++)\n@@ -7436,13 +7437,13 @@ native_interpret_int (tree type, const unsigned char *ptr, int len)\n       value = ptr[offset];\n \n       if (bitpos < HOST_BITS_PER_WIDE_INT)\n-\tlo |= (unsigned HOST_WIDE_INT) value << bitpos;\n+\tresult.low |= (unsigned HOST_WIDE_INT) value << bitpos;\n       else\n-\thi |= (unsigned HOST_WIDE_INT) value\n-\t      << (bitpos - HOST_BITS_PER_WIDE_INT);\n+\tresult.high |= (unsigned HOST_WIDE_INT) value\n+\t\t       << (bitpos - HOST_BITS_PER_WIDE_INT);\n     }\n \n-  return build_int_cst_wide_type (type, lo, hi);\n+  return double_int_to_tree (type, result);\n }\n \n "}, {"sha": "9a68dcdae893c917b9bb45ec300d5cc4be4feed1", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b", "patch": "@@ -1,3 +1,8 @@\n+2010-05-19  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* jcf-parse.c (get_constant): Use double_int_to_tree instead of\n+\tbuild_int_cst_wide_type.\n+\n 2010-05-18  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* expr.c (pop_arguments): Fix use of undeclared variable."}, {"sha": "4768c715489395b18ee984f259a92043891bfad5", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b", "patch": "@@ -1,6 +1,6 @@\n /* Parser for Java(TM) .class files.\n    Copyright (C) 1996, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   2005, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1040,14 +1040,15 @@ get_constant (JCF *jcf, int index)\n       }\n     case CONSTANT_Long:\n       {\n-\tunsigned HOST_WIDE_INT num = JPOOL_UINT (jcf, index);\n-\tunsigned HOST_WIDE_INT lo;\n-\tHOST_WIDE_INT hi;\n-\t\n-\tlshift_double (num, 0, 32, 64, &lo, &hi, 0);\n-\tnum = JPOOL_UINT (jcf, index+1);\n-\tadd_double (lo, hi, num, 0, &lo, &hi);\n-\tvalue = build_int_cst_wide_type (long_type_node, lo, hi);\n+\tunsigned HOST_WIDE_INT num;\n+\tdouble_int val;\n+\n+\tnum = JPOOL_UINT (jcf, index);\n+\tval = double_int_lshift (uhwi_to_double_int (num), 32, 64, false);\n+\tnum = JPOOL_UINT (jcf, index + 1);\n+\tval = double_int_ior (val, uhwi_to_double_int (num));\n+\n+\tvalue = double_int_to_tree (long_type_node, val);\n \tbreak;\n       }\n "}, {"sha": "57287a4d81cbdd00219e2642cac412aa0dbe94f6", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b", "patch": "@@ -2275,9 +2275,7 @@ set_sizetype (tree type)\n      sign-extended in a way consistent with force_fit_type.  */\n   max = TYPE_MAX_VALUE (sizetype);\n   TYPE_MAX_VALUE (sizetype)\n-    = build_int_cst_wide_type (sizetype,\n-\t\t\t       TREE_INT_CST_LOW (max),\n-\t\t\t       TREE_INT_CST_HIGH (max));\n+    = double_int_to_tree (sizetype, tree_to_double_int (max));\n \n   t = make_node (INTEGER_TYPE);\n   TYPE_NAME (t) = get_identifier (\"bit_size_type\");"}, {"sha": "887326664fadaf3f55762e190ec45132bf6a6f25", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b", "patch": "@@ -1063,17 +1063,6 @@ build_int_cst_type (tree type, HOST_WIDE_INT low)\n   return build_int_cst_wide (type, low1, hi);\n }\n \n-/* Create an INT_CST node of TYPE and value HI:LOW.  The value is truncated\n-   and sign extended according to the value range of TYPE.  */\n-\n-tree\n-build_int_cst_wide_type (tree type,\n-\t\t\t unsigned HOST_WIDE_INT low, HOST_WIDE_INT high)\n-{\n-  fit_double_type (low, high, &low, &high, type);\n-  return build_int_cst_wide (type, low, high);\n-}\n-\n /* Constructs tree in type TYPE from with value given by CST.  Signedness\n    of CST is assumed to be the same as the signedness of TYPE.  */\n "}, {"sha": "8d7ab6dd5b5d656264d311bdfb5502708ad92a31", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1961ffb8cd83ccb0f91ce9b3015bb3290f48b04b", "patch": "@@ -4012,8 +4012,6 @@ build_int_cstu (tree type, unsigned HOST_WIDE_INT cst)\n extern tree build_int_cst (tree, HOST_WIDE_INT);\n extern tree build_int_cst_type (tree, HOST_WIDE_INT);\n extern tree build_int_cst_wide (tree, unsigned HOST_WIDE_INT, HOST_WIDE_INT);\n-extern tree build_int_cst_wide_type (tree,\n-\t\t\t\t     unsigned HOST_WIDE_INT, HOST_WIDE_INT);\n extern tree build_vector (tree, tree);\n extern tree build_vector_from_ctor (tree, VEC(constructor_elt,gc) *);\n extern tree build_constructor (tree, VEC(constructor_elt,gc) *);"}]}