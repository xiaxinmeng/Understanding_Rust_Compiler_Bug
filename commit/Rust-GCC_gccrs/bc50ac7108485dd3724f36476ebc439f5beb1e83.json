{"sha": "bc50ac7108485dd3724f36476ebc439f5beb1e83", "node_id": "C_kwDOANBUbNoAKGJjNTBhYzcxMDg0ODVkZDM3MjRmMzY0NzZlYmM0MzlmNWJlYjFlODM", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-11-15T18:57:49Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-21T10:10:32Z"}, "message": "ada: Move warnings switches\n\nThis patch moves warning switches from Opt into Warnsw, fixes some minor\ndiscrepancies, and cleans up the code.\n\nNo change in behavior.\n\ngcc/ada/\n\n\t* warnsw.ads, warnsw.adb: Move warning flags here from package\n\tOpt. Rename Warning_Record to be Warnings_State. Use an array\n\tinstead of a record; this simplifies the code. Add renamings of\n\tall the array components for easy reference outside this package.\n\tPass the \"Family\" to Set_Warning_Switch. Use more table-driven\n\tcode. Misc cleanup and comment fixes.\n\t* opt.ads: Move warning switches to Warnsw.\n\t* gnat1drv.adb\n\t(Adjust_Global_Switches): Expanded names needed.\n\t* inline.ads: Rename Warning_Record to be Warnings_State.\n\t* sem_ch12.adb: Likewise.\n\t* sem_prag.adb: Use new Set_Warning_Switch.\n\t* contracts.adb, errout.adb, exp_aggr.adb, exp_ch11.adb: Adjust\n\timports for move to Warnsw.\n\t* exp_ch5.adb, exp_prag.adb, exp_util.adb, frontend.adb: Likewise.\n\t* layout.adb, lib-xref.adb, restrict.adb, scn.adb, sem_aggr.adb:\n\tLikewise.\n\t* sem_attr.adb, sem_case.adb, sem_ch10.adb, sem_ch11.adb:\n\tLikewise.\n\t* sem_ch13.adb, sem_ch3.adb, sem_ch4.adb, sem_ch5.adb: Likewise.\n\t* sem_ch6.adb, sem_ch7.adb, sem_ch8.adb, sem_elab.adb: Likewise.\n\t* sem_eval.adb, sem_res.adb, sem_util.adb, sem_warn.adb: Likewise.\n\t* switch-c.adb: Likewise.", "tree": {"sha": "48bb69e47fb21aebfedbb563f75e7596c516a3f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48bb69e47fb21aebfedbb563f75e7596c516a3f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc50ac7108485dd3724f36476ebc439f5beb1e83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc50ac7108485dd3724f36476ebc439f5beb1e83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc50ac7108485dd3724f36476ebc439f5beb1e83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc50ac7108485dd3724f36476ebc439f5beb1e83/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84e80d556415c4c82081647e70e899506a7db9ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e80d556415c4c82081647e70e899506a7db9ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84e80d556415c4c82081647e70e899506a7db9ba"}], "stats": {"total": 1813, "additions": 700, "deletions": 1113}, "files": [{"sha": "fef3d24870f44f1b7e56fa49d5e7176d052634bd", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -59,6 +59,7 @@ with Snames;         use Snames;\n with Stand;          use Stand;\n with Stringt;        use Stringt;\n with Tbuild;         use Tbuild;\n+with Warnsw;         use Warnsw;\n \n package body Contracts is\n "}, {"sha": "afa30674fa389fdd85170f543d1830c4cd62117a", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -53,8 +53,7 @@ with Stand;          use Stand;\n with Stylesw;        use Stylesw;\n with System.OS_Lib;\n with Uname;          use Uname;\n-with Warnsw; pragma Unreferenced (Warnsw);\n---  Will be referenced when various flags are moved to Warnsw.\n+with Warnsw; pragma Unreferenced (Warnsw); -- disable spurious warning\n \n package body Errout is\n \n@@ -989,14 +988,14 @@ package body Errout is\n          --  after fixing the error, the use clause no longer looks like it was\n          --  unused.\n \n-         Check_Unreferenced := False;\n-         Check_Unreferenced_Formals := False;\n+         Warnsw.Check_Unreferenced := False;\n+         Warnsw.Check_Unreferenced_Formals := False;\n       end Handle_Serious_Error;\n \n    --  Start of processing for Error_Msg_Internal\n \n    begin\n-      --  Detect common mistake of prefixing or suffing the message with a\n+      --  Detect common mistake of prefixing or suffixing the message with a\n       --  space character.\n \n       pragma Assert (Msg (Msg'First) /= ' ' and then Msg (Msg'Last) /= ' ');"}, {"sha": "3f51ed6b457139d384acc06c3900796030d1be9d", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -71,6 +71,7 @@ with Stringt;        use Stringt;\n with Tbuild;         use Tbuild;\n with Uintp;          use Uintp;\n with Urealp;         use Urealp;\n+with Warnsw;         use Warnsw;\n \n package body Exp_Aggr is\n "}, {"sha": "5b83035ebd8e1e435240dbea4520df8ad434309f", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -53,6 +53,7 @@ with Stringt;        use Stringt;\n with Targparm;       use Targparm;\n with Tbuild;         use Tbuild;\n with Uintp;          use Uintp;\n+with Warnsw;         use Warnsw;\n \n package body Exp_Ch11 is\n "}, {"sha": "3ea6cbbd3e86e4b81b3a8fd862f144b10a332307", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -65,6 +65,7 @@ with Tbuild;         use Tbuild;\n with Ttypes;         use Ttypes;\n with Uintp;          use Uintp;\n with Validsw;        use Validsw;\n+with Warnsw;         use Warnsw;\n \n package body Exp_Ch5 is\n "}, {"sha": "cce0aa58a212c817054a731e6a158b2631cf2079", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -58,6 +58,7 @@ with Stand;          use Stand;\n with Tbuild;         use Tbuild;\n with Uintp;          use Uintp;\n with Validsw;        use Validsw;\n+with Warnsw;         use Warnsw;\n \n package body Exp_Prag is\n "}, {"sha": "bcfb39ce21d7b952c79dc8fb3e0a12736a2e55f2", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -67,6 +67,7 @@ with Stringt;        use Stringt;\n with Tbuild;         use Tbuild;\n with Ttypes;         use Ttypes;\n with Validsw;        use Validsw;\n+with Warnsw;         use Warnsw;\n \n with GNAT.HTable;\n package body Exp_Util is\n@@ -2966,7 +2967,7 @@ package body Exp_Util is\n          --  Output an info message when inheriting an invariant and the\n          --  listing option is enabled.\n \n-         if Inherited and Opt.List_Inherited_Aspects then\n+         if Inherited and List_Inherited_Aspects then\n             Error_Msg_Sloc := Sloc (Prag);\n             Error_Msg_N\n               (\"info: & inherits `Invariant''Class` aspect from #?.l?\", Typ);"}, {"sha": "033ecf3b7be750620451bcabb5e6d8a9f5e497fb", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -69,6 +69,7 @@ with SCIL_LL;\n with Tbuild;         use Tbuild;\n with Types;          use Types;\n with VAST;\n+with Warnsw;         use Warnsw;\n \n procedure Frontend is\n begin"}, {"sha": "0b29c6f04c3e6311591ee0732c52a7162704c1c2", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -562,9 +562,10 @@ procedure Gnat1drv is\n          --    - suspicious contracts, which are useful for SPARK code\n \n          Reset_Style_Check_Options;\n-         Restore_Warnings (W => (Elab_Warnings               => True,\n-                                 Warn_On_Suspicious_Contract => True,\n-                                 others                      => False));\n+         Restore_Warnings\n+           ((Warnings_Package.Elab_Warnings => True,\n+             Warnings_Package.Warn_On_Suspicious_Contract => True,\n+             others => False));\n \n          --  Suppress the generation of name tables for enumerations, which are\n          --  not needed for formal verification, and fall outside the SPARK"}, {"sha": "82d48077625fe5508ce2028cf15c89eff194d3b1", "filename": "gcc/ada/inline.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Finline.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Finline.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.ads?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -94,7 +94,7 @@ package Inline is\n       --  This means we have to capture this information from the current scope\n       --  at the point of instantiation.\n \n-      Warnings : Warning_Record;\n+      Warnings : Warnings_State;\n       --  Capture values of warning flags\n    end record;\n "}, {"sha": "b352c0643f4da020845cfc2b7eab31652a980369", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -40,6 +40,7 @@ with Sinfo.Utils;    use Sinfo.Utils;\n with Snames;         use Snames;\n with Ttypes;         use Ttypes;\n with Uintp;          use Uintp;\n+with Warnsw;         use Warnsw;\n \n package body Layout is\n "}, {"sha": "e5dcc85523b7489e9b257b88805f1aa1eb0d9d94", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -47,6 +47,7 @@ with Snames;         use Snames;\n with Stringt;        use Stringt;\n with Stand;          use Stand;\n with Table;          use Table;\n+with Warnsw;         use Warnsw;\n \n with GNAT.Heap_Sort_G;\n with GNAT.HTable;"}, {"sha": "2ae9dd99f56513ccaf4aa0f36ae43e5375da422a", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 0, "deletions": 271, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -141,11 +141,6 @@ package Opt is\n    --  The name of the Ada package generated by the binder (when in Ada mode).\n    --  This variable may be modified by Gnatbind.Scan_Bind_Arg.\n \n-   Address_Clause_Overlay_Warnings : Boolean := True;\n-   --  GNAT\n-   --  Set False to disable address clause warnings. Modified by use of\n-   --  -gnatwo/O.\n-\n    Address_Is_Private : Boolean := False;\n    --  GNAT, GNATBIND\n    --  Set True if package System has the line \"type Address is private;\"\n@@ -317,28 +312,11 @@ package Opt is\n    --  GNATMAKE, GPBUILD\n    --  Set to True to check compiler options during the make process\n \n-   Check_Unreferenced : Boolean := False;\n-   --  GNAT\n-   --  Set to True to enable checking for unreferenced entities other\n-   --  than formal parameters (for which see Check_Unreferenced_Formals)\n-   --  Modified by use of -gnatwu/U.\n-\n-   Check_Unreferenced_Formals : Boolean := False;\n-   --  GNAT\n-   --  Set to True to check for unreferenced formals. This is turned on by\n-   --  -gnatwa/wf/wu and turned off by -gnatwA/wF/wU.\n-\n    Check_Validity_Of_Parameters : Boolean := False;\n    --  GNAT\n    --  Set to True to check for proper scalar initialization of subprogram\n    --  parameters on both entry and exit. This is turned on by -gnateV.\n \n-   Check_Withs : Boolean := False;\n-   --  GNAT\n-   --  Set to True to enable checking for unused withs, and also the case\n-   --  of withing a package and using none of the entities in the package.\n-   --  Modified by use of -gnatwu/U.\n-\n    CodePeer_Mode : Boolean := False;\n    --  GNAT, GNATBIND, GPRBUILD\n    --  Enable full CodePeer mode (SCIL generation, disable switches that\n@@ -385,11 +363,6 @@ package Opt is\n    --  True, or if pragma No_Run_Time is used. See the spec of Rtsfind for\n    --  details on the handling of the latter pragma.\n \n-   Constant_Condition_Warnings : Boolean := False;\n-   --  GNAT\n-   --  Set to True to activate warnings on constant conditions. Modified by\n-   --  use of -gnatwc/C.\n-\n    Create_Mapping_File : Boolean := False;\n    --  GNATMAKE\n    --  Set to True (-C switch) to indicate that the compiler will be invoked\n@@ -525,18 +498,6 @@ package Opt is\n    --  GNATBIND\n    --  Set to True to output chosen elaboration order\n \n-   Elab_Info_Messages : Boolean := False;\n-   --  GNAT\n-   --  Set to True to output info messages for static elabmodel (-gnatel)\n-\n-   Elab_Warnings : Boolean := True;\n-   --  GNAT\n-   --  Set to True to generate elaboration warnings (-gnatwl). The warnings are\n-   --  enabled by default because they carry the same importance as errors. The\n-   --  compiler cannot emit actual errors because elaboration diagnostics need\n-   --  dataflow analysis, which is not available. This behavior parallels that\n-   --  of the old ABE mechanism.\n-\n    Enable_128bit_Types : Boolean := False;\n    --  GNAT\n    --  Set to True to enable the support for 128-bit types in the compiler.\n@@ -854,11 +815,6 @@ package Opt is\n    --  reflect the starting node of the outermost ignored Ghost region. If a\n    --  nested ignored Ghost region is entered, the value must remain unchanged.\n \n-   Implementation_Unit_Warnings : Boolean := True;\n-   --  GNAT\n-   --  Set True to active warnings for use of implementation internal units.\n-   --  Modified by use of -gnatwi/-gnatwI.\n-\n    Implicit_Packing : Boolean := False;\n    --  GNAT\n    --  If set True, then a Size attribute clause on an array is allowed to\n@@ -869,14 +825,6 @@ package Opt is\n    --  GNAT\n    --  Set True to include the enclosing subprogram in compiler messages.\n \n-   Ineffective_Inline_Warnings : Boolean := False;\n-   --  GNAT\n-   --  Set True to activate warnings if front-end inlining (-gnatN) is not able\n-   --  to actually inline a particular call (or all calls). Can be controlled\n-   --  by use of -gnatwp/-gnatwP. Also set True to activate warnings if\n-   --  frontend inlining is not able to inline a subprogram expected to\n-   --  be inlined in GNATprove mode.\n-\n    Init_Or_Norm_Scalars : Boolean := False;\n    --  GNAT, GNATBIND\n    --  Set True if a pragma Initialize_Scalars applies to the current unit.\n@@ -962,17 +910,6 @@ package Opt is\n    --  Set to True to skip compile and bind steps (except when Bind_Only is\n    --  set to True).\n \n-   List_Body_Required_Info : Boolean := False;\n-   --  GNATMAKE\n-   --  List info messages about why a package requires a body. Modified by use\n-   --  of -gnatw.y/.Y.\n-\n-   List_Inherited_Aspects : Boolean := False;\n-   --  GNAT\n-   --  List inherited invariants, preconditions, and postconditions from\n-   --  Invariant'Class, Pre'Class, and Post'Class aspects. Also list inherited\n-   --  subtype predicates. Modified by use of -gnatw.l/.L.\n-\n    List_Restrictions : Boolean := False;\n    --  GNATBIND\n    --  Set to True to list restrictions pragmas that could apply to partition\n@@ -1719,214 +1656,6 @@ package Opt is\n    --  In High Verbosity, additional lines are output when the ALI file\n    --  is part of an Ada library, is read-only or is part of the runtime.\n \n-   Warn_On_Ada_2005_Compatibility : Boolean := True;\n-   --  GNAT\n-   --  Set to True to generate all warnings on Ada 2005 compatibility issues,\n-   --  including warnings on Ada 2005 obsolescent features used in Ada 2005\n-   --  mode. Set by default, modified by use of -gnatwy/Y.\n-\n-   Warn_On_Ada_2012_Compatibility : Boolean := True;\n-   --  GNAT\n-   --  Set to True to generate all warnings on Ada 2012 compatibility issues,\n-   --  including warnings on Ada 2012 obsolescent features used in Ada 2012\n-   --  mode. Modified by use of -gnatwy/Y.\n-\n-   Warn_On_Ada_2022_Compatibility : Boolean := True;\n-   --  GNAT\n-   --  Set to True to generate all warnings on Ada 2022 compatibility issues,\n-   --  including warnings on Ada 2022 obsolescent features used in Ada 2022\n-   --  mode.\n-\n-   Warn_On_All_Unread_Out_Parameters : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings in all cases where a variable is\n-   --  modified by being passed as to an OUT formal, but the resulting value is\n-   --  never read. The default is that this warning is suppressed. Modified\n-   --  by use of gnatw.o/.O.\n-\n-   Warn_On_Assertion_Failure : Boolean := True;\n-   --  GNAT\n-   --  Set to True to activate warnings on assertions that can be determined\n-   --  at compile time will always fail. Modified by use of -gnatw.a/.A.\n-\n-   Warn_On_Assumed_Low_Bound : Boolean := True;\n-   --  GNAT\n-   --  Set to True to activate warnings for string parameters that are indexed\n-   --  with literals or S'Length, presumably assuming a lower bound of one.\n-   --  Modified by use of -gnatww/W.\n-\n-   Warn_On_Atomic_Synchronization : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate information messages for atomic synchronization.\n-   --  Modified by use of -gnatw.n/.N.\n-\n-   Warn_On_Bad_Fixed_Value : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings for static fixed-point expression\n-   --  values that are not an exact multiple of the small value of the type.\n-   --  Odd by default, modified by use of -gnatwb/B.\n-\n-   Warn_On_Biased_Representation : Boolean := True;\n-   --  GNAT\n-   --  Set to True to generate warnings for size clauses, component clauses\n-   --  and component_size clauses that force biased representation. Modified\n-   --  by use of -gnatw.b/.B.\n-\n-   Warn_On_Constant : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings for variables that could be declared\n-   --  as constants. Modified by use of -gnatwk/K.\n-\n-   Warn_On_Deleted_Code : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings for code deleted by the front end\n-   --  for conditional statements whose outcome is known at compile time.\n-   --  Modified by use of -gnatwt/T.\n-\n-   Warn_On_Dereference : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings for implicit dereferences for array\n-   --  indexing and record component access. Modified by use of -gnatwd/D.\n-\n-   Warn_On_Export_Import : Boolean := True;\n-   --  GNAT\n-   --  Set to True to generate warnings for suspicious use of export or\n-   --  import pragmas. Modified by use of -gnatwx/X.\n-\n-   Warn_On_Elab_Access : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings for P'Access in the case where\n-   --  subprogram P is in the same package as the P'Access, and the P'Access is\n-   --  evaluated at package elaboration time, and occurs before the body of P\n-   --  has been elaborated.\n-\n-   Warn_On_Hiding : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings if a declared entity hides another\n-   --  entity. The default is that this warning is suppressed. Modified by\n-   --  use of -gnatwh/H.\n-\n-   Warn_On_Modified_Unread : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings if a variable is assigned but is never\n-   --  read. Also controls warnings for similar cases involving out parameters,\n-   --  but only if there is only one out parameter for the procedure involved.\n-   --  The default is that this warning is suppressed, modified by use of\n-   --  -gnatwm/M.\n-\n-   Warn_On_No_Value_Assigned : Boolean := True;\n-   --  GNAT\n-   --  Set to True to generate warnings if no value is ever assigned to a\n-   --  variable that is at least partially uninitialized. Set to false to\n-   --  suppress such warnings. The default is that such warnings are enabled.\n-   --  Modified by use of -gnatwv/V.\n-\n-   Warn_On_Non_Local_Exception : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings for non-local exception raises and also\n-   --  handlers that can never handle a local raise. This warning is only ever\n-   --  generated if pragma Restrictions (No_Exception_Propagation) is set. The\n-   --  default is not to generate the warnings except that if the source has\n-   --  at least one exception handler, and this restriction is set, and the\n-   --  warning was not explicitly turned off, then it is turned on by default.\n-   --  Modified by use of -gnatw.x/.X.\n-\n-   No_Warn_On_Non_Local_Exception : Boolean := False;\n-   --  GNAT\n-   --  This is set to True if the above warning is explicitly suppressed. We\n-   --  use this to avoid turning it on by default when No_Exception_Propagation\n-   --  restriction is set and an exception handler is present.\n-\n-   Warn_On_Object_Renames_Function : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings when a function result is renamed as\n-   --  an object. The default is that this warning is disabled. Modified by\n-   --  use of -gnatw.r/.R.\n-\n-   Warn_On_Obsolescent_Feature : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings on use of any feature in Annex or if a\n-   --  subprogram is called for which a pragma Obsolescent applies. Modified\n-   --  by use of -gnatwj/J.\n-\n-   Warn_On_Overlap : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings when a writable actual overlaps with\n-   --  another actual in a subprogram call. This applies only in modes before\n-   --  Ada 2012. Starting with Ada 2012, such overlaps are illegal.\n-   --  Modified by use of -gnatw.i/.I.\n-\n-   Warn_On_Questionable_Missing_Parens : Boolean := True;\n-   --  GNAT\n-   --  Set to True to generate warnings for cases where parentheses are missing\n-   --  and the usage is questionable, because the intent is unclear. On by\n-   --  default, modified by use of -gnatwq/Q.\n-\n-   Warn_On_Parameter_Order : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings for cases where the argument list for\n-   --  a call is a sequence of identifiers that match the formal identifiers,\n-   --  but are in the wrong order.\n-\n-   Warn_On_Redundant_Constructs : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings for redundant constructs (e.g. useless\n-   --  assignments/conversions). The default is that this warning is disabled.\n-   --  Modified by use of -gnatwr/R.\n-\n-   Warn_On_Reverse_Bit_Order : Boolean := True;\n-   --  GNAT\n-   --  Set to True to generate warning (informational) messages for component\n-   --  clauses that are affected by non-standard bit-order. The default is\n-   --  that this warning is enabled. Modified by -gnatw.v/.V.\n-\n-   Warn_On_Suspicious_Contract : Boolean := True;\n-   --  GNAT\n-   --  Set to True to generate warnings for suspicious contracts expressed as\n-   --  pragmas or aspects precondition and postcondition, as well as other\n-   --  suspicious cases of expressions typically found in contracts like\n-   --  quantified expressions and uses of Update attribute. The default is that\n-   --  this warning is enabled. Modified by use of -gnatw.t/.T.\n-\n-   Warn_On_Suspicious_Modulus_Value : Boolean := True;\n-   --  GNAT\n-   --  Set to True to generate warnings for suspicious modulus values, as well\n-   --  as negative literals of a modular type. The default is that this warning\n-   --  is enabled. Modified by -gnatw.m/.M.\n-\n-   Warn_On_Unchecked_Conversion : Boolean := True;\n-   --  GNAT\n-   --  Set to True to generate warnings for unchecked conversions that may have\n-   --  non-portable semantics (e.g. because sizes of types differ). Modified\n-   --  by use of -gnatwz/Z.\n-\n-   Warn_On_Unordered_Enumeration_Type : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings for inappropriate uses (comparisons\n-   --  and explicit ranges) on unordered enumeration types (which includes\n-   --  all enumeration types for which pragma Ordered is not given). The\n-   --  default is that this warning is disabled. Modified by -gnat.u/.U.\n-\n-   Warn_On_Unrecognized_Pragma : Boolean := True;\n-   --  GNAT\n-   --  Set to True to generate warnings for unrecognized pragmas. The default\n-   --  is that this warning is enabled. Modified by use of -gnatwg/G.\n-\n-   Warn_On_Unrepped_Components : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings for the case of components of record\n-   --  which have a record representation clause but this component does not\n-   --  have a component clause. Modified by use of -gnatw.c/.C.\n-\n-   Warn_On_Warnings_Off : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings for use of Pragma Warnings (Off, ent),\n-   --  where either the pragma is never used, or it could be replaced by a\n-   --  pragma Unmodified or Unreferenced. Also generates warnings for pragma\n-   --  Warning (Off, string) which either has no matching pragma Warning On,\n-   --  or where no warning has been suppressed by the use of the pragma.\n-   --  Modified by use of -gnatw.w/.W.\n-\n    type Warning_Mode_Type is\n      (Suppress, Normal, Treat_As_Error, Treat_Run_Time_Warnings_As_Errors);\n    Warning_Mode : Warning_Mode_Type := Normal;"}, {"sha": "9ef923b186c0a51e24617f2518d19d3a3cf94799", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -41,6 +41,7 @@ with Sinput;         use Sinput;\n with Stand;          use Stand;\n with Targparm;       use Targparm;\n with Uname;          use Uname;\n+with Warnsw;         use Warnsw;\n \n package body Restrict is\n "}, {"sha": "35d6981ad5c0403284fe52cde17f62327c6063df", "filename": "gcc/ada/scn.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fscn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fscn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscn.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -26,14 +26,14 @@\n with Atree;          use Atree;\n with Csets;          use Csets;\n with Namet;          use Namet;\n-with Opt;            use Opt;\n with Restrict;       use Restrict;\n with Rident;         use Rident;\n with Scans;          use Scans;\n with Sinfo;          use Sinfo;\n with Sinfo.Nodes;    use Sinfo.Nodes;\n with Sinput;         use Sinput;\n with Uintp;          use Uintp;\n+with Warnsw;         use Warnsw;\n \n package body Scn is\n "}, {"sha": "3e978f93c468cbea0c919a2b5a63b60c7d467f35", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -70,6 +70,7 @@ with Targparm;       use Targparm;\n with Tbuild;         use Tbuild;\n with Ttypes;         use Ttypes;\n with Uintp;          use Uintp;\n+with Warnsw;         use Warnsw;\n \n package body Sem_Aggr is\n "}, {"sha": "4c76b9344c2677309b8b4ee46ea3a42882bba989", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -84,6 +84,7 @@ with Tbuild;         use Tbuild;\n with Uintp;          use Uintp;\n with Uname;          use Uname;\n with Urealp;         use Urealp;\n+with Warnsw;         use Warnsw;\n \n with System.CRC32;   use System.CRC32;\n "}, {"sha": "9577921a9ab1fd79e022ee122c0e9a34d4feca54", "filename": "gcc/ada/sem_case.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_case.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_case.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_case.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -48,6 +48,7 @@ with Stringt;        use Stringt;\n with Table;\n with Tbuild;         use Tbuild;\n with Uintp;          use Uintp;\n+with Warnsw;         use Warnsw;\n \n with Ada.Unchecked_Deallocation;\n "}, {"sha": "a93808370c20e1759f42126410f01daf2f0be29e", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -74,6 +74,7 @@ with Style;          use Style;\n with Stylesw;        use Stylesw;\n with Tbuild;         use Tbuild;\n with Uname;          use Uname;\n+with Warnsw;         use Warnsw;\n \n package body Sem_Ch10 is\n "}, {"sha": "ea6f9c872af93644cfcea283557b6a863f1eb630", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -50,6 +50,7 @@ with Sinfo;          use Sinfo;\n with Sinfo.Nodes;    use Sinfo.Nodes;\n with Sinfo.Utils;    use Sinfo.Utils;\n with Stand;          use Stand;\n+with Warnsw;         use Warnsw;\n \n package body Sem_Ch11 is\n "}, {"sha": "1ea95845a16011136804aed9f7485c37a2e6611c", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -11892,7 +11892,7 @@ package body Sem_Ch12 is\n       Saved_SM   : constant SPARK_Mode_Type          := SPARK_Mode;\n       Saved_SMP  : constant Node_Id                  := SPARK_Mode_Pragma;\n       Saved_SS   : constant Suppress_Record          := Scope_Suppress;\n-      Saved_Warn : constant Warning_Record           := Save_Warnings;\n+      Saved_Warn : constant Warnings_State           := Save_Warnings;\n \n       Act_Body      : Node_Id;\n       Act_Body_Id   : Entity_Id;\n@@ -12429,7 +12429,7 @@ package body Sem_Ch12 is\n       Saved_SM   : constant SPARK_Mode_Type          := SPARK_Mode;\n       Saved_SMP  : constant Node_Id                  := SPARK_Mode_Pragma;\n       Saved_SS   : constant Suppress_Record          := Scope_Suppress;\n-      Saved_Warn : constant Warning_Record           := Save_Warnings;\n+      Saved_Warn : constant Warnings_State           := Save_Warnings;\n \n       Act_Body      : Node_Id;\n       Act_Body_Id   : Entity_Id;\n@@ -14432,7 +14432,7 @@ package body Sem_Ch12 is\n    is\n       Comp_Unit          : constant Node_Id := Cunit (Get_Source_Unit (Spec));\n       Saved_Style_Check  : constant Boolean := Style_Check;\n-      Saved_Warnings     : constant Warning_Record := Save_Warnings;\n+      Saved_Warn         : constant Warnings_State := Save_Warnings;\n       True_Parent        : Node_Id;\n       Inst_Node          : Node_Id;\n       OK                 : Boolean;\n@@ -14763,7 +14763,7 @@ package body Sem_Ch12 is\n             Expander_Mode_Save_And_Set (True);\n             Load_Needed_Body (Comp_Unit, OK);\n             Opt.Style_Check := Saved_Style_Check;\n-            Restore_Warnings (Saved_Warnings);\n+            Restore_Warnings (Saved_Warn);\n             Expander_Mode_Restore;\n \n             if not OK"}, {"sha": "a4782747aff4cc030eed0c7a82bc8d85d4585fa8", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -9943,7 +9943,7 @@ package body Sem_Ch13 is\n             --  generally suppress the message in instantiations, and also\n             --  if it involves internal names.\n \n-            if Opt.List_Inherited_Aspects\n+            if List_Inherited_Aspects\n               and then not Is_Generic_Actual_Type (Typ)\n               and then Instantiation_Location (Sloc (Typ)) = No_Location\n               and then not Is_Internal_Name (Chars (T))"}, {"sha": "ce5a00b7fc8cd16b32c594f635f668ae29f49d7c", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -87,6 +87,7 @@ with Tbuild;         use Tbuild;\n with Ttypes;         use Ttypes;\n with Uintp;          use Uintp;\n with Urealp;         use Urealp;\n+with Warnsw;         use Warnsw;\n \n package body Sem_Ch3 is\n "}, {"sha": "b724fbe57a610fbfb6f4b3783057fa671c2277cd", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -65,6 +65,7 @@ with Sinfo.Utils;    use Sinfo.Utils;\n with Snames;         use Snames;\n with Tbuild;         use Tbuild;\n with Uintp;          use Uintp;\n+with Warnsw;         use Warnsw;\n \n package body Sem_Ch4 is\n "}, {"sha": "b54f2708c8de88aa74bacadbf82afd61dff3853e", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -66,6 +66,7 @@ with Targparm;       use Targparm;\n with Tbuild;         use Tbuild;\n with Ttypes;         use Ttypes;\n with Uintp;          use Uintp;\n+with Warnsw;         use Warnsw;\n \n package body Sem_Ch5 is\n "}, {"sha": "cb982b376a5356363f7ff3464e15d0d207cd8d07", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -11669,7 +11669,7 @@ package body Sem_Ch6 is\n \n    procedure List_Inherited_Pre_Post_Aspects (E : Entity_Id) is\n    begin\n-      if Opt.List_Inherited_Aspects\n+      if List_Inherited_Aspects\n         and then Is_Subprogram_Or_Generic_Subprogram (E)\n       then\n          declare"}, {"sha": "0fb9fe10ff6efdb3bd274f3945099b773b51bc0a", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -72,6 +72,7 @@ with Sinfo.Utils;    use Sinfo.Utils;\n with Sinput;         use Sinput;\n with Style;\n with Uintp;          use Uintp;\n+with Warnsw;         use Warnsw;\n \n with GNAT.HTable;\n "}, {"sha": "ca30666379126ed6e7b4916199bde3e857d2d3ee", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -76,6 +76,7 @@ with Style;\n with Table;\n with Tbuild;         use Tbuild;\n with Uintp;          use Uintp;\n+with Warnsw;         use Warnsw;\n \n package body Sem_Ch8 is\n "}, {"sha": "a1e8f1ef30b1b8a289515524f1d33140665b5495", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -64,6 +64,7 @@ with Table;\n with Tbuild;         use Tbuild;\n with Uintp;          use Uintp;\n with Uname;          use Uname;\n+with Warnsw;         use Warnsw;\n \n with GNAT;                 use GNAT;\n with GNAT.Dynamic_HTables; use GNAT.Dynamic_HTables;"}, {"sha": "bec91add25c3325fb5370e2fd58e4a67e8bd2c9d", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -61,6 +61,7 @@ with Snames;         use Snames;\n with Stand;          use Stand;\n with Stringt;        use Stringt;\n with Tbuild;         use Tbuild;\n+with Warnsw;         use Warnsw;\n \n package body Sem_Eval is\n "}, {"sha": "72ad0cd9d8197e066a58d13483893becf54b696a", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -25784,7 +25784,7 @@ package body Sem_Prag is\n                                  C := Get_String_Char (Str, J);\n                                  Chr := Get_Character (C);\n \n-                                 if not Set_Dot_Warning_Switch (Chr) then\n+                                 if not Set_Warning_Switch ('.', Chr) then\n                                     Error_Pragma_Arg\n                                       (\"invalid warning switch character \"\n                                        & '.' & Chr, Arg1);\n@@ -25793,7 +25793,7 @@ package body Sem_Prag is\n                               --  Non-Dot case\n \n                               else\n-                                 OK := Set_Warning_Switch (Chr);\n+                                 OK := Set_Warning_Switch (Plain, Chr);\n                               end if;\n \n                               if not OK then"}, {"sha": "e702df68a324c773ce44b5debb00f211c1707c04", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -90,6 +90,7 @@ with Targparm;       use Targparm;\n with Tbuild;         use Tbuild;\n with Uintp;          use Uintp;\n with Urealp;         use Urealp;\n+with Warnsw;         use Warnsw;\n \n package body Sem_Res is\n "}, {"sha": "67baf7abfad3399fbddc7e81790e41ca04e35921", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -71,6 +71,7 @@ with Targparm;       use Targparm;\n with Tbuild;         use Tbuild;\n with Ttypes;         use Ttypes;\n with Uname;          use Uname;\n+with Warnsw;         use Warnsw;\n \n with GNAT.Heap_Sort_G;\n with GNAT.HTable;    use GNAT.HTable;"}, {"sha": "cbfabd2ceb3c2f0d01ab0b0ba4689760646f8a1a", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -51,6 +51,7 @@ with Stand;          use Stand;\n with Stringt;        use Stringt;\n with Tbuild;         use Tbuild;\n with Uintp;          use Uintp;\n+with Warnsw;         use Warnsw;\n \n package body Sem_Warn is\n \n@@ -2706,7 +2707,7 @@ package body Sem_Warn is\n    begin\n       --  Immediate return if no semantics or warning flag not set\n \n-      if not Opt.Check_Withs or else Operating_Mode = Check_Syntax then\n+      if not Check_Withs or else Operating_Mode = Check_Syntax then\n          return;\n       end if;\n "}, {"sha": "db01d53ef292c0413066a2c8c1748dab34802df8", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -1326,7 +1326,7 @@ package body Switch.C is\n                      Ptr := Ptr + 1;\n                      C := Switch_Chars (Ptr);\n \n-                     if Set_Dot_Warning_Switch (C) then\n+                     if Set_Warning_Switch ('.', C) then\n                         Store_Compilation_Switch (\"-gnatw.\" & C);\n                      else\n                         Bad_Switch (\"-gnatw.\" & Switch_Chars (Ptr .. Max));\n@@ -1338,7 +1338,7 @@ package body Switch.C is\n                      Ptr := Ptr + 1;\n                      C := Switch_Chars (Ptr);\n \n-                     if Set_Underscore_Warning_Switch (C) then\n+                     if Set_Warning_Switch ('_', C) then\n                         Store_Compilation_Switch (\"-gnatw_\" & C);\n                      else\n                         Bad_Switch (\"-gnatw_\" & Switch_Chars (Ptr .. Max));\n@@ -1347,7 +1347,7 @@ package body Switch.C is\n                   --  Normal case\n \n                   else\n-                     if Set_Warning_Switch (C) then\n+                     if Set_Warning_Switch (Plain, C) then\n                         Store_Compilation_Switch (\"-gnatw\" & C);\n                      else\n                         Bad_Switch (\"-gnatw\" & Switch_Chars (Ptr .. Max));"}, {"sha": "6fabafb909641d3372655080a7031e8f566c9e65", "filename": "gcc/ada/warnsw.adb", "status": "modified", "additions": 236, "deletions": 708, "changes": 944, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -26,523 +26,149 @@\n with Opt;      use Opt;\n with Output;   use Output;\n \n-package body Warnsw is\n-\n-   --  Local Subprograms\n-\n-   procedure All_Warnings (Setting : Boolean);\n-   --  Sets all warnings off if Setting = False, and on if Setting = True\n+with System.Case_Util; use System.Case_Util;\n \n-   procedure WA_Warnings;\n-   --  Turn on all warnings set by -gnatwa (also used by -gnatw.g)\n+package body Warnsw is\n \n-   ------------------\n-   -- All_Warnings --\n-   ------------------\n-\n-   procedure All_Warnings (Setting : Boolean) is\n-   begin\n-      Address_Clause_Overlay_Warnings      := Setting;\n-      Check_Unreferenced                   := Setting;\n-      Check_Unreferenced_Formals           := Setting;\n-      Check_Withs                          := Setting;\n-      Constant_Condition_Warnings          := Setting;\n-      Elab_Warnings                        := Setting;\n-      Implementation_Unit_Warnings         := Setting;\n-      Ineffective_Inline_Warnings          := Setting;\n-      List_Body_Required_Info              := Setting;\n-      List_Inherited_Aspects               := Setting;\n-      Warn_On_Ada_2005_Compatibility       := Setting;\n-      Warn_On_Ada_2012_Compatibility       := Setting;\n-      Warn_On_All_Unread_Out_Parameters    := Setting;\n-      Warn_On_Anonymous_Allocators         := Setting;\n-      Warn_On_Assertion_Failure            := Setting;\n-      Warn_On_Assumed_Low_Bound            := Setting;\n-      Warn_On_Atomic_Synchronization       := Setting;\n-      Warn_On_Bad_Fixed_Value              := Setting;\n-      Warn_On_Biased_Representation        := Setting;\n-      Warn_On_Constant                     := Setting;\n-      Warn_On_Deleted_Code                 := Setting;\n-      Warn_On_Dereference                  := Setting;\n-      Warn_On_Export_Import                := Setting;\n-      Warn_On_Hiding                       := Setting;\n-      Warn_On_Late_Primitives              := Setting;\n-      Warn_On_Modified_Unread              := Setting;\n-      Warn_On_No_Value_Assigned            := Setting;\n-      Warn_On_Non_Local_Exception          := Setting;\n-      Warn_On_Object_Renames_Function      := Setting;\n-      Warn_On_Obsolescent_Feature          := Setting;\n-      Warn_On_Overlap                      := Setting;\n-      Warn_On_Overridden_Size              := Setting;\n-      Warn_On_Parameter_Order              := Setting;\n-      Warn_On_Pedantic_Checks              := Setting;\n-      Warn_On_Questionable_Layout          := Setting;\n-      Warn_On_Questionable_Missing_Parens  := Setting;\n-      Warn_On_Record_Holes                 := Setting;\n-      Warn_On_Ignored_Equality             := Setting;\n-      Warn_On_Component_Order              := Setting;\n-      Warn_On_Redundant_Constructs         := Setting;\n-      Warn_On_Reverse_Bit_Order            := Setting;\n-      Warn_On_Size_Alignment               := Setting;\n-      Warn_On_Standard_Redefinition        := Setting;\n-      Warn_On_Suspicious_Contract          := Setting;\n-      Warn_On_Suspicious_Modulus_Value     := Setting;\n-      Warn_On_Unchecked_Conversion         := Setting;\n-      Warn_On_Unknown_Compile_Time_Warning := Setting;\n-      Warn_On_Unordered_Enumeration_Type   := Setting;\n-      Warn_On_Unrecognized_Pragma          := Setting;\n-      Warn_On_Unrepped_Components          := Setting;\n-      Warn_On_Warnings_Off                 := Setting;\n-   end All_Warnings;\n+   subtype Lowercase is Character range 'a' .. 'z';\n+   --  Warning-enable switches are lowercase letters\n+\n+   Switch_To_Flag_Mapping : constant array (Warning_Family, Lowercase) of\n+     --  Mapping from the letter after \"-gnatw\", \"-gnatw.\" or \"-gnatw_\" to\n+     --  the corresponding flag for the warning it enables. Special_Case means\n+     --  Set_Warning_Switch must do something special, as opposed to simply\n+     --  setting the corresponding flag. No_Such_Warning means the letter\n+     --  is not a defined warning switch, which is an error.\n+     X.Opt_Warnings_Enum :=\n+       (Plain =>\n+         ('a' | 'e' | 'n' | 's' | 'u' | 'y' => Special_Case,\n+\n+          'b' => X.Warn_On_Bad_Fixed_Value,\n+          'c' => X.Constant_Condition_Warnings,\n+          'd' => X.Warn_On_Dereference,\n+          'f' => X.Check_Unreferenced_Formals,\n+          'g' => X.Warn_On_Unrecognized_Pragma,\n+          'h' => X.Warn_On_Hiding,\n+          'i' => X.Implementation_Unit_Warnings,\n+          'j' => X.Warn_On_Obsolescent_Feature,\n+          'k' => X.Warn_On_Constant,\n+          'l' => X.Elab_Warnings,\n+          'm' => X.Warn_On_Modified_Unread,\n+          'o' => X.Address_Clause_Overlay_Warnings,\n+          'p' => X.Ineffective_Inline_Warnings,\n+          'q' => X.Warn_On_Questionable_Missing_Parens,\n+          'r' => X.Warn_On_Redundant_Constructs,\n+          't' => X.Warn_On_Deleted_Code,\n+          'v' => X.Warn_On_No_Value_Assigned,\n+          'w' => X.Warn_On_Assumed_Low_Bound,\n+          'x' => X.Warn_On_Export_Import,\n+          'z' => X.Warn_On_Unchecked_Conversion),\n+\n+        '.' =>\n+         ('e' | 'g' | 'x' => Special_Case,\n+\n+          'a' => X.Warn_On_Assertion_Failure,\n+          'b' => X.Warn_On_Biased_Representation,\n+          'c' => X.Warn_On_Unrepped_Components,\n+          'd' => X.Warning_Doc_Switch,\n+          'f' => X.Warn_On_Elab_Access,\n+          'h' => X.Warn_On_Record_Holes,\n+          'i' => X.Warn_On_Overlap,\n+          'j' => X.Warn_On_Late_Primitives,\n+          'k' => X.Warn_On_Standard_Redefinition,\n+          'l' => X.List_Inherited_Aspects,\n+          'm' => X.Warn_On_Suspicious_Modulus_Value,\n+          'n' => X.Warn_On_Atomic_Synchronization,\n+          'o' => X.Warn_On_All_Unread_Out_Parameters,\n+          'p' => X.Warn_On_Parameter_Order,\n+          'q' => X.Warn_On_Questionable_Layout,\n+          'r' => X.Warn_On_Object_Renames_Function,\n+          's' => X.Warn_On_Overridden_Size,\n+          't' => X.Warn_On_Suspicious_Contract,\n+          'u' => X.Warn_On_Unordered_Enumeration_Type,\n+          'v' => X.Warn_On_Reverse_Bit_Order,\n+          'w' => X.Warn_On_Warnings_Off,\n+          'y' => X.List_Body_Required_Info,\n+          'z' => X.Warn_On_Size_Alignment),\n+\n+        '_' =>\n+         ('b' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' |\n+          'n' | 'o' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' =>\n+           No_Such_Warning,\n+\n+          'a' => X.Warn_On_Anonymous_Allocators,\n+          'c' => X.Warn_On_Unknown_Compile_Time_Warning,\n+          'p' => X.Warn_On_Pedantic_Checks,\n+          'q' => X.Warn_On_Ignored_Equality,\n+          'r' => X.Warn_On_Component_Order));\n+\n+   All_Warnings : constant Warnings_State := --  Warnings set by -gnatw.e\n+     (X.Elab_Info_Messages |\n+      X.Warning_Doc_Switch |\n+      X.Warn_On_Ada_2022_Compatibility |\n+      X.Warn_On_Elab_Access |\n+      X.No_Warn_On_Non_Local_Exception => False,\n+      others => True);\n+   --  Warning_Doc_Switch is not really a warning to be enabled, but controls\n+   --  the form of warnings printed. No_Warn_On_Non_Local_Exception is handled\n+   --  specially (see Warn_On_Non_Local_Exception). The others are not part of\n+   --  -gnatw.e for historical reasons.\n+\n+   WA_Warnings : constant Warnings_State := --  Warnings set by -gnatwa\n+     (X.Check_Unreferenced                  | -- -gnatwf/-gnatwu\n+      X.Check_Unreferenced_Formals          | -- -gnatwf/-gnatwu\n+      X.Check_Withs                         | -- -gnatwu\n+      X.Constant_Condition_Warnings         | -- -gnatwc\n+      X.Implementation_Unit_Warnings        | -- -gnatwi\n+      X.Ineffective_Inline_Warnings         | -- -gnatwp\n+      X.Warn_On_Ada_2005_Compatibility      | -- -gnatwy\n+      X.Warn_On_Ada_2012_Compatibility      | -- -gnatwy\n+      X.Warn_On_Anonymous_Allocators        | -- -gnatw_a\n+      X.Warn_On_Assertion_Failure           | -- -gnatw.a\n+      X.Warn_On_Assumed_Low_Bound           | -- -gnatww\n+      X.Warn_On_Bad_Fixed_Value             | -- -gnatwb\n+      X.Warn_On_Biased_Representation       | -- -gnatw.b\n+      X.Warn_On_Constant                    | -- -gnatwk\n+      X.Warn_On_Export_Import               | -- -gnatwx\n+      X.Warn_On_Late_Primitives             | -- -gnatw.j\n+      X.Warn_On_Modified_Unread             | -- -gnatwm\n+      X.Warn_On_No_Value_Assigned           | -- -gnatwv\n+      X.Warn_On_Non_Local_Exception         | -- -gnatw.x\n+      X.Warn_On_Object_Renames_Function     | -- -gnatw.r\n+      X.Warn_On_Obsolescent_Feature         | -- -gnatwj\n+      X.Warn_On_Overlap                     | -- -gnatw.i\n+      X.Warn_On_Parameter_Order             | -- -gnatw.p\n+      X.Warn_On_Questionable_Missing_Parens | -- -gnatwq\n+      X.Warn_On_Redundant_Constructs        | -- -gnatwr\n+      X.Warn_On_Reverse_Bit_Order           | -- -gnatw.v\n+      X.Warn_On_Size_Alignment              | -- -gnatw.z\n+      X.Warn_On_Suspicious_Contract         | -- -gnatw.t\n+      X.Warn_On_Suspicious_Modulus_Value    | -- -gnatw.m\n+      X.Warn_On_Unchecked_Conversion        | -- -gnatwz\n+      X.Warn_On_Unrecognized_Pragma         | -- -gnatwg\n+      X.Warn_On_Unrepped_Components         => -- -gnatw.c\n+        True,\n+\n+      others => False);\n \n    ----------------------\n    -- Restore_Warnings --\n    ----------------------\n \n-   procedure Restore_Warnings (W : Warning_Record) is\n+   procedure Restore_Warnings (W : Warnings_State) is\n    begin\n-      Address_Clause_Overlay_Warnings      :=\n-        W.Address_Clause_Overlay_Warnings;\n-      Check_Unreferenced                   :=\n-        W.Check_Unreferenced;\n-      Check_Unreferenced_Formals           :=\n-        W.Check_Unreferenced_Formals;\n-      Check_Withs                          :=\n-        W.Check_Withs;\n-      Constant_Condition_Warnings          :=\n-        W.Constant_Condition_Warnings;\n-      Elab_Warnings                        :=\n-        W.Elab_Warnings;\n-      Elab_Info_Messages                   :=\n-        W.Elab_Info_Messages;\n-      Implementation_Unit_Warnings         :=\n-        W.Implementation_Unit_Warnings;\n-      Ineffective_Inline_Warnings          :=\n-        W.Ineffective_Inline_Warnings;\n-      List_Body_Required_Info              :=\n-        W.List_Body_Required_Info;\n-      List_Inherited_Aspects               :=\n-        W.List_Inherited_Aspects;\n-      No_Warn_On_Non_Local_Exception       :=\n-        W.No_Warn_On_Non_Local_Exception;\n-      Warning_Doc_Switch                   :=\n-        W.Warning_Doc_Switch;\n-      Warn_On_Ada_2005_Compatibility       :=\n-        W.Warn_On_Ada_2005_Compatibility;\n-      Warn_On_Ada_2012_Compatibility       :=\n-        W.Warn_On_Ada_2012_Compatibility;\n-      Warn_On_All_Unread_Out_Parameters    :=\n-        W.Warn_On_All_Unread_Out_Parameters;\n-      Warn_On_Anonymous_Allocators         :=\n-        W.Warn_On_Anonymous_Allocators;\n-      Warn_On_Assertion_Failure            :=\n-        W.Warn_On_Assertion_Failure;\n-      Warn_On_Assumed_Low_Bound            :=\n-        W.Warn_On_Assumed_Low_Bound;\n-      Warn_On_Atomic_Synchronization       :=\n-        W.Warn_On_Atomic_Synchronization;\n-      Warn_On_Bad_Fixed_Value              :=\n-        W.Warn_On_Bad_Fixed_Value;\n-      Warn_On_Biased_Representation        :=\n-        W.Warn_On_Biased_Representation;\n-      Warn_On_Constant                     :=\n-        W.Warn_On_Constant;\n-      Warn_On_Deleted_Code                 :=\n-        W.Warn_On_Deleted_Code;\n-      Warn_On_Dereference                  :=\n-        W.Warn_On_Dereference;\n-      Warn_On_Export_Import                :=\n-        W.Warn_On_Export_Import;\n-      Warn_On_Hiding                       :=\n-        W.Warn_On_Hiding;\n-      Warn_On_Late_Primitives              :=\n-        W.Warn_On_Late_Primitives;\n-      Warn_On_Modified_Unread              :=\n-        W.Warn_On_Modified_Unread;\n-      Warn_On_No_Value_Assigned            :=\n-        W.Warn_On_No_Value_Assigned;\n-      Warn_On_Non_Local_Exception          :=\n-        W.Warn_On_Non_Local_Exception;\n-      Warn_On_Object_Renames_Function      :=\n-        W.Warn_On_Object_Renames_Function;\n-      Warn_On_Obsolescent_Feature          :=\n-        W.Warn_On_Obsolescent_Feature;\n-      Warn_On_Overlap                      :=\n-        W.Warn_On_Overlap;\n-      Warn_On_Overridden_Size              :=\n-        W.Warn_On_Overridden_Size;\n-      Warn_On_Parameter_Order              :=\n-        W.Warn_On_Parameter_Order;\n-      Warn_On_Pedantic_Checks              :=\n-        W.Warn_On_Pedantic_Checks;\n-      Warn_On_Questionable_Layout          :=\n-        W.Warn_On_Questionable_Layout;\n-      Warn_On_Questionable_Missing_Parens  :=\n-        W.Warn_On_Questionable_Missing_Parens;\n-      Warn_On_Record_Holes                 :=\n-        W.Warn_On_Record_Holes;\n-      Warn_On_Ignored_Equality              :=\n-        W.Warn_On_Ignored_Equality;\n-      Warn_On_Component_Order              :=\n-        W.Warn_On_Component_Order;\n-      Warn_On_Redundant_Constructs         :=\n-        W.Warn_On_Redundant_Constructs;\n-      Warn_On_Reverse_Bit_Order            :=\n-        W.Warn_On_Reverse_Bit_Order;\n-      Warn_On_Size_Alignment               :=\n-        W.Warn_On_Size_Alignment;\n-      Warn_On_Standard_Redefinition        :=\n-        W.Warn_On_Standard_Redefinition;\n-      Warn_On_Suspicious_Contract          :=\n-        W.Warn_On_Suspicious_Contract;\n-      Warn_On_Unchecked_Conversion         :=\n-        W.Warn_On_Unchecked_Conversion;\n-      Warn_On_Unknown_Compile_Time_Warning :=\n-        W.Warn_On_Unknown_Compile_Time_Warning;\n-      Warn_On_Unordered_Enumeration_Type   :=\n-        W.Warn_On_Unordered_Enumeration_Type;\n-      Warn_On_Unrecognized_Pragma          :=\n-        W.Warn_On_Unrecognized_Pragma;\n-      Warn_On_Unrepped_Components          :=\n-        W.Warn_On_Unrepped_Components;\n-      Warn_On_Warnings_Off                 :=\n-        W.Warn_On_Warnings_Off;\n+      Warning_Flags := W;\n    end Restore_Warnings;\n \n    -------------------\n    -- Save_Warnings --\n    -------------------\n \n-   function Save_Warnings return Warning_Record is\n-      W : Warning_Record;\n-\n+   function Save_Warnings return Warnings_State is\n    begin\n-      W.Address_Clause_Overlay_Warnings      :=\n-        Address_Clause_Overlay_Warnings;\n-      W.Check_Unreferenced                   :=\n-        Check_Unreferenced;\n-      W.Check_Unreferenced_Formals           :=\n-        Check_Unreferenced_Formals;\n-      W.Check_Withs                          :=\n-        Check_Withs;\n-      W.Constant_Condition_Warnings          :=\n-        Constant_Condition_Warnings;\n-      W.Elab_Info_Messages                   :=\n-        Elab_Info_Messages;\n-      W.Elab_Warnings                        :=\n-        Elab_Warnings;\n-      W.Implementation_Unit_Warnings         :=\n-        Implementation_Unit_Warnings;\n-      W.Ineffective_Inline_Warnings          :=\n-        Ineffective_Inline_Warnings;\n-      W.List_Body_Required_Info              :=\n-        List_Body_Required_Info;\n-      W.List_Inherited_Aspects               :=\n-        List_Inherited_Aspects;\n-      W.No_Warn_On_Non_Local_Exception       :=\n-        No_Warn_On_Non_Local_Exception;\n-      W.Warning_Doc_Switch                   :=\n-        Warning_Doc_Switch;\n-      W.Warn_On_Ada_2005_Compatibility       :=\n-        Warn_On_Ada_2005_Compatibility;\n-      W.Warn_On_Ada_2012_Compatibility       :=\n-        Warn_On_Ada_2012_Compatibility;\n-      W.Warn_On_All_Unread_Out_Parameters    :=\n-        Warn_On_All_Unread_Out_Parameters;\n-      W.Warn_On_Anonymous_Allocators         :=\n-        Warn_On_Anonymous_Allocators;\n-      W.Warn_On_Assertion_Failure            :=\n-        Warn_On_Assertion_Failure;\n-      W.Warn_On_Assumed_Low_Bound            :=\n-        Warn_On_Assumed_Low_Bound;\n-      W.Warn_On_Atomic_Synchronization       :=\n-        Warn_On_Atomic_Synchronization;\n-      W.Warn_On_Bad_Fixed_Value              :=\n-        Warn_On_Bad_Fixed_Value;\n-      W.Warn_On_Biased_Representation        :=\n-        Warn_On_Biased_Representation;\n-      W.Warn_On_Constant                     :=\n-        Warn_On_Constant;\n-      W.Warn_On_Deleted_Code                 :=\n-        Warn_On_Deleted_Code;\n-      W.Warn_On_Dereference                  :=\n-        Warn_On_Dereference;\n-      W.Warn_On_Export_Import                :=\n-        Warn_On_Export_Import;\n-      W.Warn_On_Hiding                       :=\n-        Warn_On_Hiding;\n-      W.Warn_On_Late_Primitives              :=\n-        Warn_On_Late_Primitives;\n-      W.Warn_On_Modified_Unread              :=\n-        Warn_On_Modified_Unread;\n-      W.Warn_On_No_Value_Assigned            :=\n-        Warn_On_No_Value_Assigned;\n-      W.Warn_On_Non_Local_Exception          :=\n-        Warn_On_Non_Local_Exception;\n-      W.Warn_On_Object_Renames_Function      :=\n-        Warn_On_Object_Renames_Function;\n-      W.Warn_On_Obsolescent_Feature          :=\n-        Warn_On_Obsolescent_Feature;\n-      W.Warn_On_Overlap                      :=\n-        Warn_On_Overlap;\n-      W.Warn_On_Overridden_Size              :=\n-        Warn_On_Overridden_Size;\n-      W.Warn_On_Parameter_Order              :=\n-        Warn_On_Parameter_Order;\n-      W.Warn_On_Pedantic_Checks              :=\n-        Warn_On_Pedantic_Checks;\n-      W.Warn_On_Questionable_Layout          :=\n-        Warn_On_Questionable_Layout;\n-      W.Warn_On_Questionable_Missing_Parens  :=\n-        Warn_On_Questionable_Missing_Parens;\n-      W.Warn_On_Record_Holes                 :=\n-        Warn_On_Record_Holes;\n-      W.Warn_On_Ignored_Equality             :=\n-        Warn_On_Ignored_Equality;\n-      W.Warn_On_Component_Order              :=\n-        Warn_On_Component_Order;\n-      W.Warn_On_Redundant_Constructs         :=\n-        Warn_On_Redundant_Constructs;\n-      W.Warn_On_Reverse_Bit_Order            :=\n-        Warn_On_Reverse_Bit_Order;\n-      W.Warn_On_Size_Alignment               :=\n-        Warn_On_Size_Alignment;\n-      W.Warn_On_Standard_Redefinition        :=\n-        Warn_On_Standard_Redefinition;\n-      W.Warn_On_Suspicious_Contract          :=\n-        Warn_On_Suspicious_Contract;\n-      W.Warn_On_Unchecked_Conversion         :=\n-        Warn_On_Unchecked_Conversion;\n-      W.Warn_On_Unknown_Compile_Time_Warning :=\n-        Warn_On_Unknown_Compile_Time_Warning;\n-      W.Warn_On_Unordered_Enumeration_Type   :=\n-        Warn_On_Unordered_Enumeration_Type;\n-      W.Warn_On_Unrecognized_Pragma          :=\n-        Warn_On_Unrecognized_Pragma;\n-      W.Warn_On_Unrepped_Components          :=\n-        Warn_On_Unrepped_Components;\n-      W.Warn_On_Warnings_Off                 :=\n-        Warn_On_Warnings_Off;\n-      return W;\n+      return Warning_Flags;\n    end Save_Warnings;\n \n-   ----------------------------\n-   -- Set_Dot_Warning_Switch --\n-   ----------------------------\n-\n-   function Set_Dot_Warning_Switch (C : Character) return Boolean is\n-   begin\n-      case C is\n-         when 'a' =>\n-            Warn_On_Assertion_Failure           := True;\n-\n-         when 'A' =>\n-            Warn_On_Assertion_Failure           := False;\n-\n-         when 'b' =>\n-            Warn_On_Biased_Representation       := True;\n-\n-         when 'B' =>\n-            Warn_On_Biased_Representation       := False;\n-\n-         when 'c' =>\n-            Warn_On_Unrepped_Components         := True;\n-\n-         when 'C' =>\n-            Warn_On_Unrepped_Components         := False;\n-\n-         when 'd' =>\n-            Warning_Doc_Switch                  := True;\n-\n-         when 'D' =>\n-            Warning_Doc_Switch                  := False;\n-\n-         when 'e' =>\n-            All_Warnings (True);\n-\n-         when 'f' =>\n-            Warn_On_Elab_Access                 := True;\n-\n-         when 'F' =>\n-            Warn_On_Elab_Access                 := False;\n-\n-         when 'g' =>\n-            Set_GNAT_Mode_Warnings;\n-\n-         when 'h' =>\n-            Warn_On_Record_Holes                := True;\n-\n-         when 'H' =>\n-            Warn_On_Record_Holes                := False;\n-\n-         when 'i' =>\n-            Warn_On_Overlap                     := True;\n-\n-         when 'I' =>\n-            Warn_On_Overlap                     := False;\n-\n-         when 'j' =>\n-            Warn_On_Late_Primitives             := True;\n-\n-         when 'J' =>\n-            Warn_On_Late_Primitives             := False;\n-\n-         when 'k' =>\n-            Warn_On_Standard_Redefinition       := True;\n-\n-         when 'K' =>\n-            Warn_On_Standard_Redefinition       := False;\n-\n-         when 'l' =>\n-            List_Inherited_Aspects              := True;\n-\n-         when 'L' =>\n-            List_Inherited_Aspects              := False;\n-\n-         when 'm' =>\n-            Warn_On_Suspicious_Modulus_Value    := True;\n-\n-         when 'M' =>\n-            Warn_On_Suspicious_Modulus_Value    := False;\n-\n-         when 'n' =>\n-            Warn_On_Atomic_Synchronization      := True;\n-\n-         when 'N' =>\n-            Warn_On_Atomic_Synchronization      := False;\n-\n-         when 'o' =>\n-            Warn_On_All_Unread_Out_Parameters   := True;\n-\n-         when 'O' =>\n-            Warn_On_All_Unread_Out_Parameters   := False;\n-\n-         when 'p' =>\n-            Warn_On_Parameter_Order             := True;\n-\n-         when 'P' =>\n-            Warn_On_Parameter_Order             := False;\n-\n-         when 'q' =>\n-            Warn_On_Questionable_Layout         := True;\n-\n-         when 'Q' =>\n-            Warn_On_Questionable_Layout         := False;\n-\n-         when 'r' =>\n-            Warn_On_Object_Renames_Function     := True;\n-\n-         when 'R' =>\n-            Warn_On_Object_Renames_Function     := False;\n-\n-         when 's' =>\n-            Warn_On_Overridden_Size             := True;\n-\n-         when 'S' =>\n-            Warn_On_Overridden_Size             := False;\n-\n-         when 't' =>\n-            Warn_On_Suspicious_Contract         := True;\n-\n-         when 'T' =>\n-            Warn_On_Suspicious_Contract         := False;\n-\n-         when 'u' =>\n-            Warn_On_Unordered_Enumeration_Type  := True;\n-\n-         when 'U' =>\n-            Warn_On_Unordered_Enumeration_Type  := False;\n-\n-         when 'v' =>\n-            Warn_On_Reverse_Bit_Order           := True;\n-\n-         when 'V' =>\n-            Warn_On_Reverse_Bit_Order           := False;\n-\n-         when 'w' =>\n-            Warn_On_Warnings_Off                := True;\n-\n-         when 'W' =>\n-            Warn_On_Warnings_Off                := False;\n-\n-         when 'x' =>\n-            Warn_On_Non_Local_Exception         := True;\n-\n-         when 'X' =>\n-            Warn_On_Non_Local_Exception         := False;\n-            No_Warn_On_Non_Local_Exception      := True;\n-\n-         when 'y' =>\n-            List_Body_Required_Info             := True;\n-\n-         when 'Y' =>\n-            List_Body_Required_Info             := False;\n-\n-         when 'z' =>\n-            Warn_On_Size_Alignment              := True;\n-\n-         when 'Z' =>\n-            Warn_On_Size_Alignment              := False;\n-\n-         when others =>\n-            if Ignore_Unrecognized_VWY_Switches then\n-               Write_Line (\"unrecognized switch -gnatw.\" & C & \" ignored\");\n-            else\n-               return False;\n-            end if;\n-      end case;\n-\n-      return True;\n-   end Set_Dot_Warning_Switch;\n-\n-   -----------------------------------\n-   -- Set_Underscore_Warning_Switch --\n-   -----------------------------------\n-\n-   function Set_Underscore_Warning_Switch (C : Character) return Boolean is\n-   begin\n-      case C is\n-         when 'a' =>\n-            Warn_On_Anonymous_Allocators := True;\n-\n-         when 'A' =>\n-            Warn_On_Anonymous_Allocators := False;\n-\n-         when 'c' =>\n-            Warn_On_Unknown_Compile_Time_Warning := True;\n-\n-         when 'C' =>\n-            Warn_On_Unknown_Compile_Time_Warning := False;\n-\n-         when 'p' =>\n-            Warn_On_Pedantic_Checks := True;\n-\n-         when 'P' =>\n-            Warn_On_Pedantic_Checks := False;\n-\n-         when 'q' =>\n-            Warn_On_Ignored_Equality := True;\n-\n-         when 'Q' =>\n-            Warn_On_Ignored_Equality := False;\n-\n-         when 'r' =>\n-            Warn_On_Component_Order := True;\n-\n-         when 'R' =>\n-            Warn_On_Component_Order := False;\n-\n-         when others =>\n-            if Ignore_Unrecognized_VWY_Switches then\n-               Write_Line (\"unrecognized switch -gnatw_\" & C & \" ignored\");\n-            else\n-               return False;\n-            end if;\n-      end case;\n-\n-      return True;\n-   end Set_Underscore_Warning_Switch;\n-\n    ----------------------------\n    -- Set_GNAT_Mode_Warnings --\n    ----------------------------\n@@ -551,8 +177,7 @@ package body Warnsw is\n    begin\n       --  Set -gnatwa warnings and no others\n \n-      All_Warnings (False);\n-      WA_Warnings;\n+      Warning_Flags := (Warning_Flags and not All_Warnings) or WA_Warnings;\n \n       --  These warnings are added to the -gnatwa set\n \n@@ -574,215 +199,118 @@ package body Warnsw is\n    -- Set_Warning_Switch --\n    ------------------------\n \n-   function Set_Warning_Switch (C : Character) return Boolean is\n+   function Set_Warning_Switch\n+     (Family : Warning_Family; C : Character) return Boolean\n+   is\n+      L : constant Character := To_Lower (C);\n    begin\n-      case C is\n-         when 'a' =>\n-            WA_Warnings;\n-\n-         when 'A' =>\n-            All_Warnings (False);\n-            No_Warn_On_Non_Local_Exception      := True;\n-\n-         when 'b' =>\n-            Warn_On_Bad_Fixed_Value             := True;\n-\n-         when 'B' =>\n-            Warn_On_Bad_Fixed_Value             := False;\n-\n-         when 'c' =>\n-            Constant_Condition_Warnings         := True;\n-\n-         when 'C' =>\n-            Constant_Condition_Warnings         := False;\n-\n-         when 'd' =>\n-            Warn_On_Dereference                 := True;\n-\n-         when 'D' =>\n-            Warn_On_Dereference                 := False;\n-\n-         when 'e' =>\n-            Warning_Mode                        := Treat_As_Error;\n-\n-         when 'E' =>\n-            Warning_Mode := Treat_Run_Time_Warnings_As_Errors;\n-\n-         when 'f' =>\n-            Check_Unreferenced_Formals          := True;\n-\n-         when 'F' =>\n-            Check_Unreferenced_Formals          := False;\n-\n-         when 'g' =>\n-            Warn_On_Unrecognized_Pragma         := True;\n-\n-         when 'G' =>\n-            Warn_On_Unrecognized_Pragma         := False;\n-\n-         when 'h' =>\n-            Warn_On_Hiding                      := True;\n-\n-         when 'H' =>\n-            Warn_On_Hiding                      := False;\n-\n-         when 'i' =>\n-            Implementation_Unit_Warnings        := True;\n-\n-         when 'I' =>\n-            Implementation_Unit_Warnings        := False;\n-\n-         when 'j' =>\n-            Warn_On_Obsolescent_Feature         := True;\n-\n-         when 'J' =>\n-            Warn_On_Obsolescent_Feature         := False;\n-\n-         when 'k' =>\n-            Warn_On_Constant                    := True;\n-\n-         when 'K' =>\n-            Warn_On_Constant                    := False;\n-\n-         when 'l' =>\n-            Elab_Warnings                       := True;\n-\n-         when 'L' =>\n-            Elab_Warnings                       := False;\n-\n-         when 'm' =>\n-            Warn_On_Modified_Unread             := True;\n-\n-         when 'M' =>\n-            Warn_On_Modified_Unread             := False;\n-\n-         when 'n' =>\n-            Warning_Mode                        := Normal;\n-\n-         when 'o' =>\n-            Address_Clause_Overlay_Warnings     := True;\n-\n-         when 'O' =>\n-            Address_Clause_Overlay_Warnings     := False;\n-\n-         when 'p' =>\n-            Ineffective_Inline_Warnings         := True;\n-\n-         when 'P' =>\n-            Ineffective_Inline_Warnings         := False;\n-\n-         when 'q' =>\n-            Warn_On_Questionable_Missing_Parens := True;\n-\n-         when 'Q' =>\n-            Warn_On_Questionable_Missing_Parens := False;\n-\n-         when 'r' =>\n-            Warn_On_Redundant_Constructs        := True;\n-\n-         when 'R' =>\n-            Warn_On_Redundant_Constructs        := False;\n-\n-         when 's' =>\n-            Warning_Mode                        := Suppress;\n-\n-         when 't' =>\n-            Warn_On_Deleted_Code                := True;\n-\n-         when 'T' =>\n-            Warn_On_Deleted_Code                := False;\n-\n-         when 'u' =>\n-            Check_Unreferenced                  := True;\n-            Check_Withs                         := True;\n-            Check_Unreferenced_Formals          := True;\n-\n-         when 'U' =>\n-            Check_Unreferenced                  := False;\n-            Check_Withs                         := False;\n-            Check_Unreferenced_Formals          := False;\n-\n-         when 'v' =>\n-            Warn_On_No_Value_Assigned           := True;\n-\n-         when 'V' =>\n-            Warn_On_No_Value_Assigned           := False;\n-\n-         when 'w' =>\n-            Warn_On_Assumed_Low_Bound           := True;\n-\n-         when 'W' =>\n-            Warn_On_Assumed_Low_Bound           := False;\n-\n-         when 'x' =>\n-            Warn_On_Export_Import               := True;\n-\n-         when 'X' =>\n-            Warn_On_Export_Import               := False;\n-\n-         when 'y' =>\n-            Warn_On_Ada_2005_Compatibility      := True;\n-            Warn_On_Ada_2012_Compatibility      := True;\n-\n-         when 'Y' =>\n-            Warn_On_Ada_2005_Compatibility      := False;\n-            Warn_On_Ada_2012_Compatibility      := False;\n-\n-         when 'z' =>\n-            Warn_On_Unchecked_Conversion        := True;\n-\n-         when 'Z' =>\n-            Warn_On_Unchecked_Conversion        := False;\n-\n-         when others =>\n-            if Ignore_Unrecognized_VWY_Switches then\n-               Write_Line (\"unrecognized switch -gnatw\" & C & \" ignored\");\n-            else\n-               return False;\n-            end if;\n-      end case;\n+      --  Error case\n+\n+      if L not in Lowercase\n+        or else Switch_To_Flag_Mapping (Family, L) = No_Such_Warning\n+      then\n+         if Ignore_Unrecognized_VWY_Switches then\n+            declare\n+               Family_Switch : constant String :=\n+                 (case Family is\n+                   when Plain => \"\", when '.' => \".\", when '_' => \"_\");\n+            begin\n+               Write_Line\n+                 (\"unrecognized switch -gnatw\" & Family_Switch & C &\n+                  \" ignored\");\n+            end;\n+            return True;\n+         else\n+            return False;\n+         end if;\n+      end if;\n+\n+      --  Special cases that don't fall into the normal pattern below\n+\n+      if Switch_To_Flag_Mapping (Family, L) = Special_Case then\n+         case Family is\n+            when Plain =>\n+               case C is\n+                  when 'a' =>\n+                     --  \"or\" in the -gnatwa flags, possibly leaving others set\n+                     Warning_Flags := Warning_Flags or WA_Warnings;\n+\n+                  when 'A' =>\n+                     --  Turn off the All_Warnings flags, except that\n+                     --  No_Warn_On_Non_Local_Exception is a special case.\n+                     Warning_Flags := Warning_Flags and not All_Warnings;\n+                     No_Warn_On_Non_Local_Exception := True;\n+\n+                  when 'e' =>\n+                     Warning_Mode := Treat_As_Error;\n+\n+                  when 'E' =>\n+                     Warning_Mode := Treat_Run_Time_Warnings_As_Errors;\n+\n+                  when 'n' =>\n+                     Warning_Mode := Normal;\n+\n+                  when 's' =>\n+                     Warning_Mode := Suppress;\n+\n+                  when 'u' =>\n+                     Check_Unreferenced := True;\n+                     Check_Withs := True;\n+                     Check_Unreferenced_Formals := True;\n+\n+                  when 'U' =>\n+                     Check_Unreferenced := False;\n+                     Check_Withs := False;\n+                     Check_Unreferenced_Formals := False;\n+\n+                  when 'y' =>\n+                     Warn_On_Ada_2005_Compatibility := True;\n+                     Warn_On_Ada_2012_Compatibility := True;\n+\n+                  when 'Y' =>\n+                     Warn_On_Ada_2005_Compatibility := False;\n+                     Warn_On_Ada_2012_Compatibility := False;\n+\n+                  when others => raise Program_Error;\n+               end case;\n+\n+            when '.' =>\n+               case C is\n+                  when 'e' =>\n+                     --  \"or\" in the All_Warnings flags\n+                     Warning_Flags := Warning_Flags or All_Warnings;\n+                  when 'g' =>\n+                     Set_GNAT_Mode_Warnings;\n+\n+                  when 'x' =>\n+                     Warn_On_Non_Local_Exception := True;\n+\n+                  when 'X' =>\n+                     Warn_On_Non_Local_Exception := False;\n+                     No_Warn_On_Non_Local_Exception := True;\n+\n+                  when others => raise Program_Error;\n+               end case;\n+\n+            when '_' =>\n+               raise Program_Error;\n+         end case;\n+\n+         return True;\n+      end if;\n+\n+      --  Normal pattern (lower case enables the warning, upper case disables\n+      --  the warning).\n+\n+      if C in Lowercase then\n+         Warning_Flags (Switch_To_Flag_Mapping (Family, C)) := True;\n+      elsif L in Lowercase then\n+         Warning_Flags (Switch_To_Flag_Mapping (Family, L)) := False;\n+      else\n+         raise Program_Error;\n+      end if;\n \n       return True;\n    end Set_Warning_Switch;\n \n-   -----------------\n-   -- WA_Warnings --\n-   -----------------\n-\n-   procedure WA_Warnings is\n-   begin\n-      Check_Unreferenced                  := True; -- -gnatwf/-gnatwu\n-      Check_Unreferenced_Formals          := True; -- -gnatwf/-gnatwu\n-      Check_Withs                         := True; -- -gnatwu\n-      Constant_Condition_Warnings         := True; -- -gnatwc\n-      Implementation_Unit_Warnings        := True; -- -gnatwi\n-      Ineffective_Inline_Warnings         := True; -- -gnatwp\n-      Warn_On_Ada_2005_Compatibility      := True; -- -gnatwy\n-      Warn_On_Ada_2012_Compatibility      := True; -- -gnatwy\n-      Warn_On_Anonymous_Allocators        := True; -- -gnatw_a\n-      Warn_On_Assertion_Failure           := True; -- -gnatw.a\n-      Warn_On_Assumed_Low_Bound           := True; -- -gnatww\n-      Warn_On_Bad_Fixed_Value             := True; -- -gnatwb\n-      Warn_On_Biased_Representation       := True; -- -gnatw.b\n-      Warn_On_Constant                    := True; -- -gnatwk\n-      Warn_On_Export_Import               := True; -- -gnatwx\n-      Warn_On_Late_Primitives             := True; -- -gnatw.j\n-      Warn_On_Modified_Unread             := True; -- -gnatwm\n-      Warn_On_No_Value_Assigned           := True; -- -gnatwv\n-      Warn_On_Non_Local_Exception         := True; -- -gnatw.x\n-      Warn_On_Object_Renames_Function     := True; -- -gnatw.r\n-      Warn_On_Obsolescent_Feature         := True; -- -gnatwj\n-      Warn_On_Overlap                     := True; -- -gnatw.i\n-      Warn_On_Parameter_Order             := True; -- -gnatw.p\n-      Warn_On_Questionable_Missing_Parens := True; -- -gnatwq\n-      Warn_On_Redundant_Constructs        := True; -- -gnatwr\n-      Warn_On_Reverse_Bit_Order           := True; -- -gnatw.v\n-      Warn_On_Size_Alignment              := True; -- -gnatw.z\n-      Warn_On_Suspicious_Contract         := True; -- -gnatw.t\n-      Warn_On_Suspicious_Modulus_Value    := True; -- -gnatw.m\n-      Warn_On_Unchecked_Conversion        := True; -- -gnatwz\n-      Warn_On_Unrecognized_Pragma         := True; -- -gnatwg\n-      Warn_On_Unrepped_Components         := True; -- -gnatw.c\n-   end WA_Warnings;\n-\n end Warnsw;"}, {"sha": "46ae75211e5e93ca11c4aeda51bf3c81c49101ab", "filename": "gcc/ada/warnsw.ads", "status": "modified", "additions": 416, "deletions": 111, "changes": 527, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fwarnsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc50ac7108485dd3724f36476ebc439f5beb1e83/gcc%2Fada%2Fwarnsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.ads?ref=bc50ac7108485dd3724f36476ebc439f5beb1e83", "patch": "@@ -24,6 +24,7 @@\n ------------------------------------------------------------------------------\n \n --  This unit contains the routines used to handle setting of warning options\n+--  in the GNAT compiler.\n \n package Warnsw is\n \n@@ -34,11 +35,206 @@ package Warnsw is\n    --  These flags are activated or deactivated by -gnatw switches and control\n    --  whether warnings of a given class will be generated or not.\n \n-   --  Note: most of these flags are still in opt, but the plan is to move them\n-   --  here as time goes by. And in fact a really nice idea would be to put\n-   --  them all in a Warn_Record so that they would be easy to save/restore.\n+   package Warnings_Package is\n+      type Opt_Warnings_Enum is\n+        --  List of all warnings that can be enabled, plus the two null-ish\n+        --  values.\n+        (No_Such_Warning, Special_Case, -- see body\n \n-   Warning_Doc_Switch : Boolean := True;\n+         Address_Clause_Overlay_Warnings,\n+         Check_Unreferenced,\n+         Check_Unreferenced_Formals,\n+         Check_Withs,\n+         Constant_Condition_Warnings,\n+         Elab_Info_Messages,\n+         Elab_Warnings,\n+         Implementation_Unit_Warnings,\n+         Ineffective_Inline_Warnings,\n+         List_Body_Required_Info,\n+         List_Inherited_Aspects,\n+         Warning_Doc_Switch,\n+         Warn_On_Ada_2005_Compatibility,\n+         Warn_On_Ada_2012_Compatibility,\n+         Warn_On_Ada_2022_Compatibility,\n+         Warn_On_All_Unread_Out_Parameters,\n+         Warn_On_Anonymous_Allocators,\n+         Warn_On_Assertion_Failure,\n+         Warn_On_Assumed_Low_Bound,\n+         Warn_On_Atomic_Synchronization,\n+         Warn_On_Bad_Fixed_Value,\n+         Warn_On_Biased_Representation,\n+         Warn_On_Component_Order,\n+         Warn_On_Constant,\n+         Warn_On_Deleted_Code,\n+         Warn_On_Dereference,\n+         Warn_On_Elab_Access,\n+         Warn_On_Export_Import,\n+         Warn_On_Hiding,\n+         Warn_On_Ignored_Equality,\n+         Warn_On_Late_Primitives,\n+         Warn_On_Modified_Unread,\n+         Warn_On_No_Value_Assigned,\n+         Warn_On_Non_Local_Exception,\n+         No_Warn_On_Non_Local_Exception,\n+         Warn_On_Object_Renames_Function,\n+         Warn_On_Obsolescent_Feature,\n+         Warn_On_Overlap,\n+         Warn_On_Overridden_Size,\n+         Warn_On_Parameter_Order,\n+         Warn_On_Pedantic_Checks,\n+         Warn_On_Questionable_Layout,\n+         Warn_On_Questionable_Missing_Parens,\n+         Warn_On_Record_Holes,\n+         Warn_On_Redundant_Constructs,\n+         Warn_On_Reverse_Bit_Order,\n+         Warn_On_Size_Alignment,\n+         Warn_On_Standard_Redefinition,\n+         Warn_On_Suspicious_Contract,\n+         Warn_On_Suspicious_Modulus_Value,\n+         Warn_On_Unchecked_Conversion,\n+         Warn_On_Unknown_Compile_Time_Warning,\n+         Warn_On_Unordered_Enumeration_Type,\n+         Warn_On_Unrecognized_Pragma,\n+         Warn_On_Unrepped_Components,\n+         Warn_On_Warnings_Off); -- Opt_Warnings_Enum\n+\n+      subtype Warnings_Enum is Opt_Warnings_Enum\n+        range Opt_Warnings_Enum'Succ (Special_Case) .. Opt_Warnings_Enum'Last;\n+      --  Just the warning switches, without the null-ish values\n+   end Warnings_Package;\n+   use Warnings_Package;\n+\n+   type Warnings_State is array (Warnings_Enum) of Boolean;\n+   pragma Pack (Warnings_State);\n+   --  Without Pack, we can have bootstrapping failures, because the compiler\n+   --  generates calls to System.Boolean_Array_Operations, which is not\n+   --  currently part of the compiler.\n+\n+   Warning_Flags : Warnings_State :=\n+   --  Current state of warnings -- True/False means enabled/disabled.\n+   --  The following initializes the flags to their default values,\n+   --  and warning switches modify them.\n+     (Address_Clause_Overlay_Warnings |\n+      Elab_Warnings |\n+      Implementation_Unit_Warnings |\n+      Warning_Doc_Switch |\n+      Warn_On_Ada_2005_Compatibility |\n+      Warn_On_Ada_2012_Compatibility |\n+      Warn_On_Ada_2022_Compatibility |\n+      Warn_On_Assertion_Failure |\n+      Warn_On_Assumed_Low_Bound |\n+      Warn_On_Biased_Representation |\n+      Warn_On_Export_Import |\n+      Warn_On_No_Value_Assigned |\n+      Warn_On_Questionable_Missing_Parens |\n+      Warn_On_Reverse_Bit_Order |\n+      Warn_On_Size_Alignment |\n+      Warn_On_Suspicious_Contract |\n+      Warn_On_Suspicious_Modulus_Value |\n+      Warn_On_Unchecked_Conversion |\n+      Warn_On_Unknown_Compile_Time_Warning |\n+      Warn_On_Unrecognized_Pragma =>\n+        True,\n+\n+      Check_Unreferenced |\n+      Check_Unreferenced_Formals |\n+      Check_Withs |\n+      Constant_Condition_Warnings |\n+      Elab_Info_Messages |\n+      Ineffective_Inline_Warnings |\n+      List_Body_Required_Info |\n+      List_Inherited_Aspects |\n+      Warn_On_All_Unread_Out_Parameters |\n+      Warn_On_Anonymous_Allocators |\n+      Warn_On_Atomic_Synchronization |\n+      Warn_On_Bad_Fixed_Value |\n+      Warn_On_Component_Order |\n+      Warn_On_Constant |\n+      Warn_On_Deleted_Code |\n+      Warn_On_Dereference |\n+      Warn_On_Elab_Access |\n+      Warn_On_Hiding |\n+      Warn_On_Ignored_Equality |\n+      Warn_On_Late_Primitives |\n+      Warn_On_Modified_Unread |\n+      Warn_On_Non_Local_Exception |\n+      No_Warn_On_Non_Local_Exception |\n+      Warn_On_Object_Renames_Function |\n+      Warn_On_Obsolescent_Feature |\n+      Warn_On_Overlap |\n+      Warn_On_Overridden_Size |\n+      Warn_On_Parameter_Order |\n+      Warn_On_Pedantic_Checks |\n+      Warn_On_Questionable_Layout |\n+      Warn_On_Record_Holes |\n+      Warn_On_Redundant_Constructs |\n+      Warn_On_Standard_Redefinition |\n+      Warn_On_Unordered_Enumeration_Type |\n+      Warn_On_Unrepped_Components |\n+      Warn_On_Warnings_Off =>\n+        False);\n+\n+   package X renames Warnings_Package;\n+   F : Warnings_State renames Warning_Flags;\n+   --  Short-hand names used only locally to this package\n+\n+   --  The following rename all the components of Warning_Flags for convenient\n+   --  access throughout the compiler.\n+\n+   pragma Style_Checks (\"M120\");\n+   Address_Clause_Overlay_Warnings : Boolean renames F (X.Address_Clause_Overlay_Warnings);\n+   --  Set False to disable address clause warnings. Modified by use of\n+   --  -gnatwo/O.\n+\n+   Check_Unreferenced : Boolean renames F (X.Check_Unreferenced);\n+   --  Set to True to enable checking for unreferenced entities other\n+   --  than formal parameters (for which see Check_Unreferenced_Formals)\n+   --  Modified by use of -gnatwu/U.\n+\n+   Check_Unreferenced_Formals : Boolean renames F (X.Check_Unreferenced_Formals);\n+   --  Set to True to check for unreferenced formals. This is turned on by\n+   --  -gnatwa/wf/wu and turned off by -gnatwA/wF/wU.\n+\n+   Check_Withs : Boolean renames F (X.Check_Withs);\n+   --  Set to True to enable checking for unused withs, and also the case\n+   --  of withing a package and using none of the entities in the package.\n+   --  Modified by use of -gnatwu/U.\n+\n+   Constant_Condition_Warnings : Boolean renames F (X.Constant_Condition_Warnings);\n+   --  Set to True to activate warnings on constant conditions. Modified by\n+   --  use of -gnatwc/C.\n+\n+   Elab_Info_Messages : Boolean renames F (X.Elab_Info_Messages);\n+   --  Set to True to output info messages for static elabmodel (-gnatel)\n+\n+   Elab_Warnings : Boolean renames F (X.Elab_Warnings);\n+   --  Set to True to generate elaboration warnings (-gnatwl). The warnings are\n+   --  enabled by default because they carry the same importance as errors. The\n+   --  compiler cannot emit actual errors because elaboration diagnostics need\n+   --  dataflow analysis, which is not available. This behavior parallels that\n+   --  of the old ABE mechanism.\n+\n+   Implementation_Unit_Warnings : Boolean renames F (X.Implementation_Unit_Warnings);\n+   --  Set True to active warnings for use of implementation internal units.\n+   --  Modified by use of -gnatwi/-gnatwI.\n+\n+   Ineffective_Inline_Warnings : Boolean renames F (X.Ineffective_Inline_Warnings);\n+   --  Set True to activate warnings if front-end inlining (-gnatN) is not able\n+   --  to actually inline a particular call (or all calls). Can be controlled\n+   --  by use of -gnatwp/-gnatwP. Also set True to activate warnings if\n+   --  frontend inlining is not able to inline a subprogram expected to\n+   --  be inlined in GNATprove mode.\n+\n+   List_Body_Required_Info : Boolean renames F (X.List_Body_Required_Info);\n+   --  List info messages about why a package requires a body. Modified by use\n+   --  of -gnatw.y/.Y.\n+\n+   List_Inherited_Aspects : Boolean renames F (X.List_Inherited_Aspects);\n+   --  List inherited invariants, preconditions, and postconditions from\n+   --  Invariant'Class, Pre'Class, and Post'Class aspects. Also list inherited\n+   --  subtype predicates. Modified by use of -gnatw.l/.L.\n+\n+   Warning_Doc_Switch : Boolean renames F (X.Warning_Doc_Switch);\n    --  If this is set True, then the ??/?*?/?$?/?x?/?.x?/?_x? insertion\n    --  sequences in error messages generate appropriate tags for the output\n    --  error messages. If this switch is False, then these sequences are still\n@@ -47,35 +243,162 @@ package Warnsw is\n    --  in adding the error message tag. The -gnatw.d switch sets this flag\n    --  True, -gnatw.D sets this flag False.\n \n-   Warn_On_Anonymous_Allocators : Boolean := False;\n+   Warn_On_Ada_2005_Compatibility : Boolean renames F (X.Warn_On_Ada_2005_Compatibility);\n+   --  Set to True to generate all warnings on Ada 2005 compatibility issues,\n+   --  including warnings on Ada 2005 obsolescent features used in Ada 2005\n+   --  mode. Set by default, modified by use of -gnatwy/Y.\n+\n+   Warn_On_Ada_2012_Compatibility : Boolean renames F (X.Warn_On_Ada_2012_Compatibility);\n+   --  Set to True to generate all warnings on Ada 2012 compatibility issues,\n+   --  including warnings on Ada 2012 obsolescent features used in Ada 2012\n+   --  mode. Modified by use of -gnatwy/Y.\n+\n+   Warn_On_Ada_2022_Compatibility : Boolean renames F (X.Warn_On_Ada_2022_Compatibility);\n+   --  Set to True to generate all warnings on Ada 2022 compatibility issues,\n+   --  including warnings on Ada 2022 obsolescent features used in Ada 2022\n+   --  mode. There is no switch controlling this option.\n+\n+   Warn_On_All_Unread_Out_Parameters : Boolean renames F (X.Warn_On_All_Unread_Out_Parameters);\n+   --  Set to True to generate warnings in all cases where a variable is\n+   --  modified by being passed as to an OUT formal, but the resulting value is\n+   --  never read. The default is that this warning is suppressed. Modified\n+   --  by use of gnatw.o/.O.\n+\n+   Warn_On_Anonymous_Allocators : Boolean renames F (X.Warn_On_Anonymous_Allocators);\n    --  Warn when allocators for anonymous access types are present, which,\n    --  although not illegal in Ada, may be confusing to users due to how\n    --  accessibility checks get generated. Off by default, modified by use\n    --  of -gnatw_a/_A and set as part of -gnatwa.\n \n-   Warn_On_Late_Primitives : Boolean := False;\n+   Warn_On_Assertion_Failure : Boolean renames F (X.Warn_On_Assertion_Failure);\n+   --  Set to True to activate warnings on assertions that can be determined\n+   --  at compile time will always fail. Modified by use of -gnatw.a/.A.\n+\n+   Warn_On_Assumed_Low_Bound : Boolean renames F (X.Warn_On_Assumed_Low_Bound);\n+   --  Set to True to activate warnings for string parameters that are indexed\n+   --  with literals or S'Length, presumably assuming a lower bound of one.\n+   --  Modified by use of -gnatww/W.\n+\n+   Warn_On_Atomic_Synchronization : Boolean renames F (X.Warn_On_Atomic_Synchronization);\n+   --  Set to True to generate information messages for atomic synchronization.\n+   --  Modified by use of -gnatw.n/.N.\n+\n+   Warn_On_Bad_Fixed_Value : Boolean renames F (X.Warn_On_Bad_Fixed_Value);\n+   --  Set to True to generate warnings for static fixed-point expression\n+   --  values that are not an exact multiple of the small value of the type.\n+   --  Odd by default, modified by use of -gnatwb/B.\n+\n+   Warn_On_Biased_Representation : Boolean renames F (X.Warn_On_Biased_Representation);\n+   --  Set to True to generate warnings for size clauses, component clauses\n+   --  and component_size clauses that force biased representation. Modified\n+   --  by use of -gnatw.b/.B.\n+\n+   Warn_On_Component_Order : Boolean renames F (X.Warn_On_Component_Order);\n+   --  Warn when record component clauses are out of order with respect to the\n+   --  component declarations, or if the memory layout is out of order with\n+   --  respect to component declarations and clauses.  Off by default, set by\n+   --  -gnatw_r (but not -gnatwa).\n+\n+   Warn_On_Constant : Boolean renames F (X.Warn_On_Constant);\n+   --  Set to True to generate warnings for variables that could be declared\n+   --  as constants. Modified by use of -gnatwk/K.\n+\n+   Warn_On_Deleted_Code : Boolean renames F (X.Warn_On_Deleted_Code);\n+   --  Set to True to generate warnings for code deleted by the front end\n+   --  for conditional statements whose outcome is known at compile time.\n+   --  Modified by use of -gnatwt/T.\n+\n+   Warn_On_Dereference : Boolean renames F (X.Warn_On_Dereference);\n+   --  Set to True to generate warnings for implicit dereferences for array\n+   --  indexing and record component access. Modified by use of -gnatwd/D.\n+\n+   Warn_On_Elab_Access : Boolean renames F (X.Warn_On_Elab_Access);\n+   --  Set to True to generate warnings for P'Access in the case where\n+   --  subprogram P is in the same package as the P'Access, and the P'Access is\n+   --  evaluated at package elaboration time, and occurs before the body of P\n+   --  has been elaborated. Modified by use of -gnatw.f/.F.\n+\n+   Warn_On_Export_Import : Boolean renames F (X.Warn_On_Export_Import);\n+   --  Set to True to generate warnings for suspicious use of export or\n+   --  import pragmas. Modified by use of -gnatwx/X.\n+\n+   Warn_On_Hiding : Boolean renames F (X.Warn_On_Hiding);\n+   --  Set to True to generate warnings if a declared entity hides another\n+   --  entity. The default is that this warning is suppressed. Modified by\n+   --  use of -gnatwh/H.\n+\n+   Warn_On_Ignored_Equality : Boolean renames F (X.Warn_On_Ignored_Equality);\n+   --  Warn when a user-defined \"=\" function does not compose (i.e. is ignored\n+   --  for a predefined \"=\" for a composite type containing a component of\n+   --  whose type has the user-defined \"=\" as primitive). Off by default, and\n+   --  set by -gnatw_q (but not -gnatwa).\n+\n+   Warn_On_Late_Primitives : Boolean renames F (X.Warn_On_Late_Primitives);\n    --  Warn when tagged type public primitives are defined after its private\n    --  extensions.\n \n-   Warn_On_Unknown_Compile_Time_Warning : Boolean := True;\n-   --  Warn on a pragma Compile_Time_Warning whose condition has a value that\n-   --  is not known at compile time. On by default, modified by use\n-   --  of -gnatw_c/_C and set as part of -gnatwa.\n+   Warn_On_Modified_Unread : Boolean renames F (X.Warn_On_Modified_Unread);\n+   --  Set to True to generate warnings if a variable is assigned but is never\n+   --  read. Also controls warnings for similar cases involving out parameters,\n+   --  but only if there is only one out parameter for the procedure involved.\n+   --  The default is that this warning is suppressed, modified by use of\n+   --  -gnatwm/M.\n+\n+   Warn_On_No_Value_Assigned : Boolean renames F (X.Warn_On_No_Value_Assigned);\n+   --  Set to True to generate warnings if no value is ever assigned to a\n+   --  variable that is at least partially uninitialized. Set to false to\n+   --  suppress such warnings. The default is that such warnings are enabled.\n+   --  Modified by use of -gnatwv/V.\n \n-   Warn_On_Overridden_Size : Boolean := False;\n+   Warn_On_Non_Local_Exception : Boolean renames F (X.Warn_On_Non_Local_Exception);\n+   --  Set to True to generate warnings for non-local exception raises and also\n+   --  handlers that can never handle a local raise. This warning is only ever\n+   --  generated if pragma Restrictions (No_Exception_Propagation) is set. The\n+   --  default is not to generate the warnings except that if the source has\n+   --  at least one exception handler, and this restriction is set, and the\n+   --  warning was not explicitly turned off, then it is turned on by default.\n+   --  Modified by use of -gnatw.x/.X.\n+\n+   No_Warn_On_Non_Local_Exception : Boolean renames F (X.No_Warn_On_Non_Local_Exception);\n+   --  This is set to True if the above warning is explicitly suppressed. We\n+   --  use this to avoid turning it on by default when No_Exception_Propagation\n+   --  restriction is set and an exception handler is present.\n+\n+   Warn_On_Object_Renames_Function : Boolean renames F (X.Warn_On_Object_Renames_Function);\n+   --  Set to True to generate warnings when a function result is renamed as\n+   --  an object. The default is that this warning is disabled. Modified by\n+   --  use of -gnatw.r/.R.\n+\n+   Warn_On_Obsolescent_Feature : Boolean renames F (X.Warn_On_Obsolescent_Feature);\n+   --  Set to True to generate warnings on use of any feature in Annex or if a\n+   --  subprogram is called for which a pragma Obsolescent applies. Modified\n+   --  by use of -gnatwj/J.\n+\n+   Warn_On_Overlap : Boolean renames F (X.Warn_On_Overlap);\n+   --  Set to True to generate warnings when a writable actual overlaps with\n+   --  another actual in a subprogram call. This applies only in modes before\n+   --  Ada 2012. Starting with Ada 2012, such overlaps are illegal.\n+   --  Modified by use of -gnatw.i/.I.\n+\n+   Warn_On_Overridden_Size : Boolean renames F (X.Warn_On_Overridden_Size);\n    --  Warn when explicit record component clause or array component_size\n    --  clause specifies a size that overrides a size for the type which was\n    --  set with an explicit size clause. Off by default, modified by use of\n    --  -gnatw.s/.S (but not -gnatwa).\n \n-   Warn_On_Pedantic_Checks : Boolean := False;\n+   Warn_On_Parameter_Order : Boolean renames F (X.Warn_On_Parameter_Order);\n+   --  Set to True to generate warnings for cases where the argument list for\n+   --  a call is a sequence of identifiers that match the formal identifiers,\n+   --  but are in the wrong order.\n+\n+   Warn_On_Pedantic_Checks : Boolean renames F (X.Warn_On_Pedantic_Checks);\n    --  Warn for violation of miscellaneous pedantic rules (such as when the\n    --  subtype of a formal parameter given in a subprogram body's specification\n    --  comes from a different subtype declaration that the subtype of the\n    --  formal in the subprogram declaration). Off by default, and set by\n    --  -gnatw_p (but not -gnatwa).\n \n-   Warn_On_Questionable_Layout : Boolean := False;\n+   Warn_On_Questionable_Layout : Boolean renames F (X.Warn_On_Questionable_Layout);\n    --  Warn when default layout of a record type is questionable for run-time\n    --  efficiency reasons and would be improved by reordering the components.\n    --  Off by default, modified by use of -gnatw.q/.Q (but not -gnatwa).\n@@ -84,130 +407,112 @@ package Warnsw is\n      (Warn_On_Questionable_Layout);\n    --  WARNING: There is a matching C declaration of this function in fe.h\n \n-   Warn_On_Record_Holes : Boolean := False;\n+   Warn_On_Questionable_Missing_Parens : Boolean renames F (X.Warn_On_Questionable_Missing_Parens);\n+   --  Set to True to generate warnings for cases where parentheses are missing\n+   --  and the usage is questionable, because the intent is unclear. On by\n+   --  default, modified by use of -gnatwq/Q.\n+\n+   Warn_On_Record_Holes : Boolean renames F (X.Warn_On_Record_Holes);\n    --  Warn when explicit record component clauses leave uncovered holes (gaps)\n    --  in a record layout. Off by default, set by -gnatw.h (but not -gnatwa).\n \n-   Warn_On_Ignored_Equality : Boolean := False;\n-   --  Warn when a user-defined \"=\" function does not compose (i.e. is ignored\n-   --  for a predefined \"=\" for a composite type containing a component of\n-   --  whose type has the user-defined \"=\" as primitive). Off by default, and\n-   --  set by -gnatw_q (but not -gnatwa).\n+   Warn_On_Redundant_Constructs : Boolean renames F (X.Warn_On_Redundant_Constructs);\n+   --  Set to True to generate warnings for redundant constructs (e.g. useless\n+   --  assignments/conversions). The default is that this warning is disabled.\n+   --  Modified by use of -gnatwr/R.\n \n-   Warn_On_Component_Order : Boolean := False;\n-   --  Warn when record component clauses are out of order with respect to the\n-   --  component declarations, or if the memory layout is out of order with\n-   --  respect to component declarations and clauses.  Off by default, set by\n-   --  -gnatw_r (but not -gnatwa).\n+   Warn_On_Reverse_Bit_Order : Boolean renames F (X.Warn_On_Reverse_Bit_Order);\n+   --  Set to True to generate warning (informational) messages for component\n+   --  clauses that are affected by non-standard bit-order. The default is\n+   --  that this warning is enabled. Modified by -gnatw.v/.V.\n \n-   Warn_On_Size_Alignment : Boolean := True;\n+   Warn_On_Size_Alignment : Boolean renames F (X.Warn_On_Size_Alignment);\n    --  Warn when explicit Size and Alignment clauses are given for a type, and\n    --  the size is not a multiple of the alignment. Off by default, modified\n    --  by use of -gnatw.z/.Z and set as part of -gnatwa.\n \n-   Warn_On_Standard_Redefinition : Boolean := False;\n+   Warn_On_Standard_Redefinition : Boolean renames F (X.Warn_On_Standard_Redefinition);\n    --  Warn when a program defines an identifier that matches a name in\n    --  Standard. Off by default, modified by use of -gnatw.k/.K (but not\n    --  by -gnatwa).\n \n+   Warn_On_Suspicious_Contract : Boolean renames F (X.Warn_On_Suspicious_Contract);\n+   --  Set to True to generate warnings for suspicious contracts expressed as\n+   --  pragmas or aspects precondition and postcondition, as well as other\n+   --  suspicious cases of expressions typically found in contracts like\n+   --  quantified expressions and uses of Update attribute. The default is that\n+   --  this warning is enabled. Modified by use of -gnatw.t/.T.\n+\n+   Warn_On_Suspicious_Modulus_Value : Boolean renames F (X.Warn_On_Suspicious_Modulus_Value);\n+   --  Set to True to generate warnings for suspicious modulus values, as well\n+   --  as negative literals of a modular type. The default is that this warning\n+   --  is enabled. Modified by -gnatw.m/.M.\n+\n+   Warn_On_Unchecked_Conversion : Boolean renames F (X.Warn_On_Unchecked_Conversion);\n+   --  Set to True to generate warnings for unchecked conversions that may have\n+   --  non-portable semantics (e.g. because sizes of types differ). Modified\n+   --  by use of -gnatwz/Z.\n+\n+   Warn_On_Unknown_Compile_Time_Warning : Boolean renames F (X.Warn_On_Unknown_Compile_Time_Warning);\n+   --  Warn on a pragma Compile_Time_Warning whose condition has a value that\n+   --  is not known at compile time. On by default, modified by use\n+   --  of -gnatw_c/_C and set as part of -gnatwa.\n+\n+   Warn_On_Unordered_Enumeration_Type : Boolean renames F (X.Warn_On_Unordered_Enumeration_Type);\n+   --  Set to True to generate warnings for inappropriate uses (comparisons\n+   --  and explicit ranges) on unordered enumeration types (which includes\n+   --  all enumeration types for which pragma Ordered is not given). The\n+   --  default is that this warning is disabled. Modified by -gnat.u/.U.\n+\n+   Warn_On_Unrecognized_Pragma : Boolean renames F (X.Warn_On_Unrecognized_Pragma);\n+   --  Set to True to generate warnings for unrecognized pragmas. The default\n+   --  is that this warning is enabled. Modified by use of -gnatwg/G.\n+\n+   Warn_On_Unrepped_Components : Boolean renames F (X.Warn_On_Unrepped_Components);\n+   --  Set to True to generate warnings for the case of components of record\n+   --  which have a record representation clause but this component does not\n+   --  have a component clause. Modified by use of -gnatw.c/.C.\n+\n+   Warn_On_Warnings_Off : Boolean renames F (X.Warn_On_Warnings_Off);\n+   --  Set to True to generate warnings for use of Pragma Warnings (Off, ent),\n+   --  where either the pragma is never used, or it could be replaced by a\n+   --  pragma Unmodified or Unreferenced. Also generates warnings for pragma\n+   --  Warning (Off, string) which either has no matching pragma Warning On,\n+   --  or where no warning has been suppressed by the use of the pragma.\n+   --  Modified by use of -gnatw.w/.W.\n+   pragma Style_Checks (\"M79\");\n+\n    -----------------------------------\n    -- Saving and Restoring Warnings --\n    -----------------------------------\n \n-   --  Type used to save and restore warnings\n-\n-   type Warning_Record is record\n-      Address_Clause_Overlay_Warnings      : Boolean;\n-      Check_Unreferenced                   : Boolean;\n-      Check_Unreferenced_Formals           : Boolean;\n-      Check_Withs                          : Boolean;\n-      Constant_Condition_Warnings          : Boolean;\n-      Elab_Info_Messages                   : Boolean;\n-      Elab_Warnings                        : Boolean;\n-      Implementation_Unit_Warnings         : Boolean;\n-      Ineffective_Inline_Warnings          : Boolean;\n-      List_Body_Required_Info              : Boolean;\n-      List_Inherited_Aspects               : Boolean;\n-      No_Warn_On_Non_Local_Exception       : Boolean;\n-      Warning_Doc_Switch                   : Boolean;\n-      Warn_On_Ada_2005_Compatibility       : Boolean;\n-      Warn_On_Ada_2012_Compatibility       : Boolean;\n-      Warn_On_All_Unread_Out_Parameters    : Boolean;\n-      Warn_On_Anonymous_Allocators         : Boolean;\n-      Warn_On_Assertion_Failure            : Boolean;\n-      Warn_On_Assumed_Low_Bound            : Boolean;\n-      Warn_On_Atomic_Synchronization       : Boolean;\n-      Warn_On_Bad_Fixed_Value              : Boolean;\n-      Warn_On_Biased_Representation        : Boolean;\n-      Warn_On_Constant                     : Boolean;\n-      Warn_On_Deleted_Code                 : Boolean;\n-      Warn_On_Dereference                  : Boolean;\n-      Warn_On_Export_Import                : Boolean;\n-      Warn_On_Hiding                       : Boolean;\n-      Warn_On_Late_Primitives              : Boolean;\n-      Warn_On_Modified_Unread              : Boolean;\n-      Warn_On_No_Value_Assigned            : Boolean;\n-      Warn_On_Non_Local_Exception          : Boolean;\n-      Warn_On_Object_Renames_Function      : Boolean;\n-      Warn_On_Obsolescent_Feature          : Boolean;\n-      Warn_On_Overlap                      : Boolean;\n-      Warn_On_Overridden_Size              : Boolean;\n-      Warn_On_Parameter_Order              : Boolean;\n-      Warn_On_Pedantic_Checks              : Boolean;\n-      Warn_On_Questionable_Layout          : Boolean;\n-      Warn_On_Questionable_Missing_Parens  : Boolean;\n-      Warn_On_Record_Holes                 : Boolean;\n-      Warn_On_Ignored_Equality             : Boolean;\n-      Warn_On_Component_Order              : Boolean;\n-      Warn_On_Redundant_Constructs         : Boolean;\n-      Warn_On_Reverse_Bit_Order            : Boolean;\n-      Warn_On_Size_Alignment               : Boolean;\n-      Warn_On_Standard_Redefinition        : Boolean;\n-      Warn_On_Suspicious_Contract          : Boolean;\n-      Warn_On_Suspicious_Modulus_Value     : Boolean;\n-      Warn_On_Unchecked_Conversion         : Boolean;\n-      Warn_On_Unknown_Compile_Time_Warning : Boolean;\n-      Warn_On_Unordered_Enumeration_Type   : Boolean;\n-      Warn_On_Unrecognized_Pragma          : Boolean;\n-      Warn_On_Unrepped_Components          : Boolean;\n-      Warn_On_Warnings_Off                 : Boolean;\n-   end record;\n-\n-   function Save_Warnings return Warning_Record;\n+   function Save_Warnings return Warnings_State;\n    --  Returns current settings of warnings\n \n-   procedure Restore_Warnings (W : Warning_Record);\n+   procedure Restore_Warnings (W : Warnings_State);\n    --  Restores current settings of warning flags from W\n \n    -----------------\n    -- Subprograms --\n    -----------------\n \n-   function Set_Warning_Switch (C : Character) return Boolean;\n-   --  This function sets the warning switch or switches corresponding to the\n-   --  given character. It is used to process a -gnatw switch on the command\n-   --  line, or a character in a string literal in pragma Warnings. Returns\n-   --  True for valid warning character C, False for invalid character.\n-\n-   function Set_Dot_Warning_Switch (C : Character) return Boolean;\n-   --  This function sets the warning switch or switches corresponding to the\n-   --  given character preceded by a dot. Used to process a -gnatw. switch on\n-   --  the command line or .C in a string literal in pragma Warnings. Returns\n-   --  True for valid warning character C, False for invalid character.\n-\n-   function Set_Underscore_Warning_Switch (C : Character) return Boolean;\n-   --  This function sets the warning switch or switches corresponding to the\n-   --  given character preceded by an underscore. Used to process a -gnatw_\n-   --  switch on the command line or _C in a string literal in pragma Warnings.\n-   --  Returns True for valid warnings character C, False for invalid\n-   --  character.\n+   type Warning_Family is\n+     --  The \"family\" indicates the form of warning switch:\n+     (Plain, -- form \"-gnatwx\"\n+      '.',   -- form \"-gnatw.x\"\n+      '_');  -- form \"-gnatw_x\"\n+     --  where \"x\" is a lowercase letter that enables a particular warning.\n+     --  Typically, uppercase of \"x\" disables the warning, but there are some\n+     --  switches that do not follow that pattern.\n+\n+   function Set_Warning_Switch\n+     (Family : Warning_Family; C : Character) return Boolean;\n+   --  Set the warning switch or switches corresponding to the given family and\n+   --  character. Returns True for valid warning switch, False for invalid.\n+   --  Called for -gnatw... switches, and for pragma Warnings.\n \n    procedure Set_GNAT_Mode_Warnings;\n-   --  This is called in -gnatg mode to set the warnings for gnat mode. It is\n-   --  also used to set the proper warning statuses for -gnatw.g. Note that\n-   --  this set of warnings is neither a subset nor a superset of -gnatwa, it\n-   --  enables warnings that are not included in -gnatwa and disables warnings\n-   --  that are included in -gnatwa (such as Warn_On_Implementation_Units, that\n-   --  we clearly want to be False for units built with -gnatg).\n+   --  Called for -gnatg and -gnatw.g to set GNAT mode warnings. This set of\n+   --  warnings is neither a subset nor a superset of -gnatwa.\n \n end Warnsw;"}]}