{"sha": "e0bffbbb5936be8b6a35d868db4226ca1b2365fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBiZmZiYmI1OTM2YmU4YjZhMzVkODY4ZGI0MjI2Y2ExYjIzNjVmYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-03-29T18:40:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-03-29T18:40:02Z"}, "message": "re PR c++/70353 (ICE on __PRETTY_FUNCTION__ in a constexpr function)\n\n\tPR c++/70353\n\ngcc/\n\t* tree-inline.c (remap_decls): Don't add_local_decl if\n\tcfun is null.\ngcc/cp/\n\t* decl.c (make_rtl_for_nonlocal_decl): Don't defer local statics\n\tin constexpr functions.\n\nFrom-SVN: r234530", "tree": {"sha": "4b759a379b55a6ac060ab50cf266013f5d5b5c1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b759a379b55a6ac060ab50cf266013f5d5b5c1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0bffbbb5936be8b6a35d868db4226ca1b2365fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bffbbb5936be8b6a35d868db4226ca1b2365fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0bffbbb5936be8b6a35d868db4226ca1b2365fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bffbbb5936be8b6a35d868db4226ca1b2365fa/comments", "author": null, "committer": null, "parents": [{"sha": "3336c6e09385fa50daaa6b7b1bb68908f9a4298f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3336c6e09385fa50daaa6b7b1bb68908f9a4298f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3336c6e09385fa50daaa6b7b1bb68908f9a4298f"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "cb6297710d54072dc002f83d167231828ef94af1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bffbbb5936be8b6a35d868db4226ca1b2365fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bffbbb5936be8b6a35d868db4226ca1b2365fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0bffbbb5936be8b6a35d868db4226ca1b2365fa", "patch": "@@ -1,5 +1,9 @@\n 2016-03-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/70353\n+\t* tree-inline.c (remap_decls): Don't add_local_decl if\n+\tcfun is null.\n+\n \tPR tree-optimization/70405\n \t* ssa-iterators.h (num_imm_uses): Add missing braces.\n "}, {"sha": "91ad5ac341f3c4d8b745f4f5c672852f9b6f1aa9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bffbbb5936be8b6a35d868db4226ca1b2365fa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bffbbb5936be8b6a35d868db4226ca1b2365fa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e0bffbbb5936be8b6a35d868db4226ca1b2365fa", "patch": "@@ -1,3 +1,9 @@\n+2016-03-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/70353\n+\t* decl.c (make_rtl_for_nonlocal_decl): Don't defer local statics\n+\tin constexpr functions.\n+\n 2016-03-28  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/70422"}, {"sha": "cfae210da552c081e9e1ab86c755db949fa169e2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bffbbb5936be8b6a35d868db4226ca1b2365fa/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bffbbb5936be8b6a35d868db4226ca1b2365fa/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e0bffbbb5936be8b6a35d868db4226ca1b2365fa", "patch": "@@ -6251,8 +6251,11 @@ make_rtl_for_nonlocal_decl (tree decl, tree init, const char* asmspec)\n     return;\n \n   /* We defer emission of local statics until the corresponding\n-     DECL_EXPR is expanded.  */\n-  defer_p = DECL_FUNCTION_SCOPE_P (decl) || DECL_VIRTUAL_P (decl);\n+     DECL_EXPR is expanded.  But with constexpr its function might never\n+     be expanded, so go ahead and tell cgraph about the variable now.  */\n+  defer_p = ((DECL_FUNCTION_SCOPE_P (decl)\n+\t      && !DECL_DECLARED_CONSTEXPR_P (DECL_CONTEXT (decl)))\n+\t     || DECL_VIRTUAL_P (decl));\n \n   /* Defer template instantiations.  */\n   if (DECL_LANG_SPECIFIC (decl)"}, {"sha": "e6782905423b5f72747f9d5622c06db77b9b32bd", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-__func__2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bffbbb5936be8b6a35d868db4226ca1b2365fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-__func__2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bffbbb5936be8b6a35d868db4226ca1b2365fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-__func__2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-__func__2.C?ref=e0bffbbb5936be8b6a35d868db4226ca1b2365fa", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/70353\n+// { dg-do link { target c++11 } }\n+\n+constexpr const char* ce ()\n+{\n+  return __func__;\n+}\n+\n+const char *c = ce();\n+\n+int main()\n+{\n+}"}, {"sha": "5206d202babd3be4f61fceeaf83cf23d0ed96a86", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bffbbb5936be8b6a35d868db4226ca1b2365fa/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bffbbb5936be8b6a35d868db4226ca1b2365fa/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=e0bffbbb5936be8b6a35d868db4226ca1b2365fa", "patch": "@@ -616,7 +616,8 @@ remap_decls (tree decls, vec<tree, va_gc> **nonlocalized_list,\n \t  /* We need to add this variable to the local decls as otherwise\n \t     nothing else will do so.  */\n \t  if (TREE_CODE (old_var) == VAR_DECL\n-\t      && ! DECL_EXTERNAL (old_var))\n+\t      && ! DECL_EXTERNAL (old_var)\n+\t      && cfun)\n \t    add_local_decl (cfun, old_var);\n \t  if ((!optimize || debug_info_level > DINFO_LEVEL_TERSE)\n \t      && !DECL_IGNORED_P (old_var)"}]}