{"sha": "7a1db261dec3c7da38f1576a03ec44167649c1af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ExZGIyNjFkZWMzYzdkYTM4ZjE1NzZhMDNlYzQ0MTY3NjQ5YzFhZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-22T18:48:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-22T18:48:39Z"}, "message": "re PR c++/48647 ([C++0x] SFINAE does not handle incompatible pointer types well in conditional operator)\n\n\tPR c++/48647\n\t* typeck.c (composite_pointer_type_r): Return error_mark_node\n\ton error in SFINAE context.\n\nFrom-SVN: r174031", "tree": {"sha": "16927b8403529184612faf5712c25bbde2c9b4cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16927b8403529184612faf5712c25bbde2c9b4cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a1db261dec3c7da38f1576a03ec44167649c1af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1db261dec3c7da38f1576a03ec44167649c1af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a1db261dec3c7da38f1576a03ec44167649c1af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1db261dec3c7da38f1576a03ec44167649c1af/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eec2794c17c802a3027874aaa49f6bb3e5ef9f22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eec2794c17c802a3027874aaa49f6bb3e5ef9f22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eec2794c17c802a3027874aaa49f6bb3e5ef9f22"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "e6399d364e9eac69599e1dc057c842b63584fb79", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1db261dec3c7da38f1576a03ec44167649c1af/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1db261dec3c7da38f1576a03ec44167649c1af/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7a1db261dec3c7da38f1576a03ec44167649c1af", "patch": "@@ -1,3 +1,9 @@\n+2011-05-22  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/48647\n+\t* typeck.c (composite_pointer_type_r): Return error_mark_node\n+\ton error in SFINAE context.\n+\n 2011-05-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/48945"}, {"sha": "dd1cc3b127c55d1f1ae860998f9fd8b096e52ce3", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1db261dec3c7da38f1576a03ec44167649c1af/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1db261dec3c7da38f1576a03ec44167649c1af/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7a1db261dec3c7da38f1576a03ec44167649c1af", "patch": "@@ -516,7 +516,8 @@ composite_pointer_type_r (tree t1, tree t2,\n     {\n       if (complain & tf_error)\n \tcomposite_pointer_error (DK_PERMERROR, t1, t2, operation);\n-\n+      else\n+\treturn error_mark_node;\n       result_type = void_type_node;\n     }\n   result_type = cp_build_qualified_type (result_type,\n@@ -527,9 +528,13 @@ composite_pointer_type_r (tree t1, tree t2,\n   if (TYPE_PTR_TO_MEMBER_P (t1))\n     {\n       if (!same_type_p (TYPE_PTRMEM_CLASS_TYPE (t1),\n-\t\t\tTYPE_PTRMEM_CLASS_TYPE (t2))\n-\t  && (complain & tf_error))\n-\tcomposite_pointer_error (DK_PERMERROR, t1, t2, operation);\n+\t\t\tTYPE_PTRMEM_CLASS_TYPE (t2)))\n+\t{\n+\t  if (complain & tf_error)\n+\t    composite_pointer_error (DK_PERMERROR, t1, t2, operation);\n+\t  else\n+\t    return error_mark_node;\n+\t}\n       result_type = build_ptrmem_type (TYPE_PTRMEM_CLASS_TYPE (t1),\n \t\t\t\t       result_type);\n     }"}, {"sha": "f083968b1c6baa1cea405e11634df1002cfdc8a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1db261dec3c7da38f1576a03ec44167649c1af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1db261dec3c7da38f1576a03ec44167649c1af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a1db261dec3c7da38f1576a03ec44167649c1af", "patch": "@@ -1,3 +1,8 @@\n+2011-05-22  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/sfinae23.C: New.\n+\t* g++.dg/cpp0x/sfinae8.C: Correct.\n+\n 2011-05-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* gfortran.dg/function_optimize_8.f90:  New test case."}, {"sha": "4e2ea88b171dd85ba380f9a7ef3aa643d85f2fbc", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae23.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1db261dec3c7da38f1576a03ec44167649c1af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1db261dec3c7da38f1576a03ec44167649c1af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae23.C?ref=7a1db261dec3c7da38f1576a03ec44167649c1af", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/48647\n+// { dg-options -std=c++0x }\n+\n+template< class T >\n+T&& declval();\n+\n+template< class T, class U >\n+decltype( true ? declval<T>() : declval<U>() ) test( int );\n+\n+template< class T, class U >\n+void test( ... );\n+\n+\n+template< class T, class U >\n+struct is_same {\n+  static const bool value = false;\n+};\n+\n+template< class T >\n+struct is_same<T, T> {\n+  static const bool value = true;\n+};\n+\n+#define SA(X) static_assert ((X),#X)\n+\n+typedef decltype( test<int*, double*>(0) ) void_expected;\n+SA ((is_same<void_expected, void>::value));\n+SA ((!is_same<void_expected, void*>::value));"}, {"sha": "5ac09c6b3b83eecac1e7fcb29b59b0499f1c1ff2", "filename": "gcc/testsuite/g++.dg/template/sfinae8.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1db261dec3c7da38f1576a03ec44167649c1af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1db261dec3c7da38f1576a03ec44167649c1af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae8.C?ref=7a1db261dec3c7da38f1576a03ec44167649c1af", "patch": "@@ -120,7 +120,7 @@ STATIC_ASSERT((!is_equality_comparable<Y, X>::value));\n STATIC_ASSERT((!is_equality_comparable<Y>::value));\n STATIC_ASSERT((is_equality_comparable<int X::*>::value));\n STATIC_ASSERT((!is_equality_comparable<int X::*, int Y::*>::value));\n-STATIC_ASSERT((is_equality_comparable<int*, float*>::value));\n+STATIC_ASSERT((!is_equality_comparable<int*, float*>::value));\n STATIC_ASSERT((is_equality_comparable<X*, Z*>::value));\n STATIC_ASSERT((!is_equality_comparable<X*, Y*>::value));\n \n@@ -139,7 +139,7 @@ STATIC_ASSERT((!is_not_equal_comparable<Y, X>::value));\n STATIC_ASSERT((!is_not_equal_comparable<Y>::value));\n STATIC_ASSERT((is_not_equal_comparable<int X::*>::value));\n STATIC_ASSERT((!is_not_equal_comparable<int X::*, int Y::*>::value));\n-STATIC_ASSERT((is_not_equal_comparable<int*, float*>::value));\n+STATIC_ASSERT((!is_not_equal_comparable<int*, float*>::value));\n STATIC_ASSERT((is_not_equal_comparable<X*, Z*>::value));\n STATIC_ASSERT((!is_not_equal_comparable<X*, Y*>::value));\n "}]}