{"sha": "f2d3d07ee55fa52b41c1ec08e51269831961a772", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJkM2QwN2VlNTVmYTUyYjQxYzFlYzA4ZTUxMjY5ODMxOTYxYTc3Mg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2014-11-19T13:30:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2014-11-19T13:30:59Z"}, "message": "Allow the front-end to create calls with a static chain\n\nAnd, at the same time, allow indirect calls to have a static chain.\nWe'll always eliminate the static chain if we can prove it's unused.\n\n        * calls.c (prepare_call_address): Allow decl or type for first arg.\n        (expand_call): Pass type to prepare_call_address if no decl.\n        * gimple-fold.c (gimple_fold_call): Eliminate the static chain if\n        the function doesn't use it; fold it otherwise.\n        * gimplify.c (gimplify_call_expr): Gimplify the static chain.\n        * tree-cfg.c (verify_gimple_call): Allow a static chain on indirect\n        function calls.\n\nFrom-SVN: r217770", "tree": {"sha": "7cca5afeed122318032b1af7171e8154c14590df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cca5afeed122318032b1af7171e8154c14590df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2d3d07ee55fa52b41c1ec08e51269831961a772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d3d07ee55fa52b41c1ec08e51269831961a772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d3d07ee55fa52b41c1ec08e51269831961a772", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d3d07ee55fa52b41c1ec08e51269831961a772/comments", "author": null, "committer": null, "parents": [{"sha": "c21df29bcfc04945d3a7be6a0c6e306fc9efc505", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21df29bcfc04945d3a7be6a0c6e306fc9efc505", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c21df29bcfc04945d3a7be6a0c6e306fc9efc505"}], "stats": {"total": 82, "additions": 60, "deletions": 22}, "files": [{"sha": "8d47292c654d4b93eb44f0c6074748b4acaf221d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d3d07ee55fa52b41c1ec08e51269831961a772/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d3d07ee55fa52b41c1ec08e51269831961a772/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2d3d07ee55fa52b41c1ec08e51269831961a772", "patch": "@@ -1,5 +1,13 @@\n 2014-11-19  Richard Henderson  <rth@redhat.com>\n \n+\t* calls.c (prepare_call_address): Allow decl or type for first arg.\n+\t(expand_call): Pass type to prepare_call_address if no decl.\n+\t* gimple-fold.c (gimple_fold_call): Eliminate the static chain if\n+\tthe function doesn't use it; fold it otherwise.\n+\t* gimplify.c (gimplify_call_expr): Gimplify the static chain.\n+\t* tree-cfg.c (verify_gimple_call): Allow a static chain on indirect\n+\tfunction calls.\n+\n \t* targhooks.c (default_static_chain): Remove check for\n \tDECL_STATIC_CHAIN.\n \t* config/moxie/moxie.c (moxie_static_chain): Likewise."}, {"sha": "c64c0eb6bf7cc01a8274a9dcd38566cf98a12a2b", "filename": "gcc/calls.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d3d07ee55fa52b41c1ec08e51269831961a772/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d3d07ee55fa52b41c1ec08e51269831961a772/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=f2d3d07ee55fa52b41c1ec08e51269831961a772", "patch": "@@ -197,7 +197,7 @@ static void restore_fixed_argument_area (rtx, rtx, int, int);\n    CALL_INSN_FUNCTION_USAGE information.  */\n \n rtx\n-prepare_call_address (tree fndecl, rtx funexp, rtx static_chain_value,\n+prepare_call_address (tree fndecl_or_type, rtx funexp, rtx static_chain_value,\n \t\t      rtx *call_fusage, int reg_parm_seen, int sibcallp)\n {\n   /* Make a valid memory address and copy constants through pseudo-regs,\n@@ -217,12 +217,13 @@ prepare_call_address (tree fndecl, rtx funexp, rtx static_chain_value,\n #endif\n     }\n \n-  if (static_chain_value != 0)\n+  if (static_chain_value != 0\n+      && (TREE_CODE (fndecl_or_type) != FUNCTION_DECL\n+\t  || DECL_STATIC_CHAIN (fndecl_or_type)))\n     {\n       rtx chain;\n \n-      gcc_assert (fndecl);\n-      chain = targetm.calls.static_chain (fndecl, false);\n+      chain = targetm.calls.static_chain (fndecl_or_type, false);\n       static_chain_value = convert_memory_address (Pmode, static_chain_value);\n \n       emit_move_insn (chain, static_chain_value);\n@@ -3278,8 +3279,9 @@ expand_call (tree exp, rtx target, int ignore)\n \t}\n \n       after_args = get_last_insn ();\n-      funexp = prepare_call_address (fndecl, funexp, static_chain_value,\n-\t\t\t\t     &call_fusage, reg_parm_seen, pass == 0);\n+      funexp = prepare_call_address (fndecl ? fndecl : fntype, funexp,\n+\t\t\t\t     static_chain_value, &call_fusage,\n+\t\t\t\t     reg_parm_seen, pass == 0);\n \n       load_register_parameters (args, num_actuals, &call_fusage, flags,\n \t\t\t\tpass == 0, &sibcall_failure);"}, {"sha": "4f716b2e0e075dce481bbfd69afad7423833dd65", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d3d07ee55fa52b41c1ec08e51269831961a772/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d3d07ee55fa52b41c1ec08e51269831961a772/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=f2d3d07ee55fa52b41c1ec08e51269831961a772", "patch": "@@ -2723,6 +2723,27 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n \t}\n     }\n \n+  /* Check for indirect calls that became direct calls, and then\n+     no longer require a static chain.  */\n+  if (gimple_call_chain (stmt))\n+    {\n+      tree fn = gimple_call_fndecl (stmt);\n+      if (fn && !DECL_STATIC_CHAIN (fn))\n+\t{\n+\t  gimple_call_set_chain (stmt, NULL);\n+\t  changed = true;\n+\t}\n+      else\n+\t{\n+\t  tree tmp = maybe_fold_reference (gimple_call_chain (stmt), false);\n+\t  if (tmp)\n+\t    {\n+\t      gimple_call_set_chain (stmt, tmp);\n+\t      changed = true;\n+\t    }\n+\t}\n+    }\n+\n   if (inplace)\n     return changed;\n "}, {"sha": "c46fb663ef1dab249f9390b2d34c9e2b3f7c56ef", "filename": "gcc/gimplify.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d3d07ee55fa52b41c1ec08e51269831961a772/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d3d07ee55fa52b41c1ec08e51269831961a772/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=f2d3d07ee55fa52b41c1ec08e51269831961a772", "patch": "@@ -2432,7 +2432,7 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n \t}\n     }\n \n-  /* Finally, gimplify the function arguments.  */\n+  /* Gimplify the function arguments.  */\n   if (nargs > 0)\n     {\n       for (i = (PUSH_ARGS_REVERSED ? nargs - 1 : 0);\n@@ -2454,6 +2454,21 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n         }\n     }\n \n+  /* Gimplify the static chain.  */\n+  if (CALL_EXPR_STATIC_CHAIN (*expr_p))\n+    {\n+      if (fndecl && !DECL_STATIC_CHAIN (fndecl))\n+\tCALL_EXPR_STATIC_CHAIN (*expr_p) = NULL;\n+      else\n+\t{\n+\t  enum gimplify_status t;\n+\t  t = gimplify_arg (&CALL_EXPR_STATIC_CHAIN (*expr_p), pre_p,\n+\t\t\t    EXPR_LOCATION (*expr_p));\n+\t  if (t == GS_ERROR)\n+\t    ret = GS_ERROR;\n+\t}\n+    }\n+\n   /* Verify the function result.  */\n   if (want_value && fndecl\n       && VOID_TYPE_P (TREE_TYPE (TREE_TYPE (fnptrtype))))"}, {"sha": "71a828c37aac431a08d55b522e8a35da003a4407", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d3d07ee55fa52b41c1ec08e51269831961a772/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d3d07ee55fa52b41c1ec08e51269831961a772/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=f2d3d07ee55fa52b41c1ec08e51269831961a772", "patch": "@@ -3333,22 +3333,14 @@ verify_gimple_call (gimple stmt)\n       return true;\n     }\n \n-  /* If there is a static chain argument, this should not be an indirect\n-     call, and the decl should have DECL_STATIC_CHAIN set.  */\n-  if (gimple_call_chain (stmt))\n+  /* If there is a static chain argument, the call should either be\n+     indirect, or the decl should have DECL_STATIC_CHAIN set.  */\n+  if (gimple_call_chain (stmt)\n+      && fndecl\n+      && !DECL_STATIC_CHAIN (fndecl))\n     {\n-      if (!gimple_call_fndecl (stmt))\n-\t{\n-\t  error (\"static chain in indirect gimple call\");\n-\t  return true;\n-\t}\n-      fn = TREE_OPERAND (fn, 0);\n-\n-      if (!DECL_STATIC_CHAIN (fn))\n-\t{\n-\t  error (\"static chain with function that doesn%'t use one\");\n-\t  return true;\n-\t}\n+      error (\"static chain with function that doesn%'t use one\");\n+      return true;\n     }\n \n   /* ???  The C frontend passes unpromoted arguments in case it"}]}