{"sha": "86122f7282ff1c895004881a9febde7bf15e928c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYxMjJmNzI4MmZmMWM4OTUwMDQ4ODFhOWZlYmRlN2JmMTVlOTI4Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-04-20T11:40:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-04-20T11:40:47Z"}, "message": "re PR tree-optimization/31632 (ICE in compare_values)\n\n\tPR tree-optimization/31632\n\t* fold-const.c (fold_binary): Use op0 and op1 instead of arg0\n\tand arg1 for optimizations of comparison against min/max values.\n\tFold arg0 to arg1's type for optimizations of comparison against\n\tmin+1 and max-1 values.\n\n\t* gcc.c-torture/compile/20070419-1.c: New test.\n\nFrom-SVN: r123988", "tree": {"sha": "d90632ae74816fc5e35d1e5f5e33db4f9a64e8d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d90632ae74816fc5e35d1e5f5e33db4f9a64e8d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86122f7282ff1c895004881a9febde7bf15e928c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86122f7282ff1c895004881a9febde7bf15e928c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86122f7282ff1c895004881a9febde7bf15e928c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86122f7282ff1c895004881a9febde7bf15e928c/comments", "author": null, "committer": null, "parents": [{"sha": "c1673e1b5a35cd6fe10a088d458ca0133a71eebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1673e1b5a35cd6fe10a088d458ca0133a71eebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1673e1b5a35cd6fe10a088d458ca0133a71eebd"}], "stats": {"total": 86, "additions": 61, "deletions": 25}, "files": [{"sha": "cc638b30e0e30de62d866b286a6a9ea32f3e4db2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86122f7282ff1c895004881a9febde7bf15e928c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86122f7282ff1c895004881a9febde7bf15e928c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86122f7282ff1c895004881a9febde7bf15e928c", "patch": "@@ -1,3 +1,11 @@\n+2007-04-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/31632\n+\t* fold-const.c (fold_binary): Use op0 and op1 instead of arg0\n+\tand arg1 for optimizations of comparison against min/max values.\n+\tFold arg0 to arg1's type for optimizations of comparison against\n+\tmin+1 and max-1 values.\n+\n 2007-04-19  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* reload.c (combine_reloads): When trying to use a dying register,\n@@ -13,7 +21,6 @@\n \n 2007-04-19  Joseph Myers  <joseph@codesourcery.com>\n \n-\tgcc/\n \t* config/rs6000/spe.md (*frob_tf_ti, *frob_ti_tf, *frob_ti_tf_2,\n \t*mov_si<mode>_e500_subreg0, *mov_si<mode>_e500_subreg0_2,\n \t*mov_sitf_e500_subreg8, *mov_sitf_e500_subreg8_2, spe_extenddftf2,\n@@ -292,8 +299,8 @@\n \n 2007-04-16  Matthias Klose  <doko@debian.org>\n \n-\t* gcc/config/alpha/linux.h (CPP_SPEC): Define.\n-\t* gcc/config/arm/linux-gas.h (SUBTARGET_CPP_SPEC): Extend.\n+\t* config/alpha/linux.h (CPP_SPEC): Define.\n+\t* config/arm/linux-gas.h (SUBTARGET_CPP_SPEC): Extend.\n \n 2007-04-16  Aldy Hernandez  <aldyh@redhat.com>\n \n@@ -3505,7 +3512,7 @@\n \t(thread_across_edge): Likewise.\n \t* tree-flow.h (vrp_evaluate_conditional): Update declaration.\n \t(thread_across_edge): Likewise.\n-\t* gcc/Makefile.in (tree-vrp.o): Depend upon intl.h.\n+\t* Makefile.in (tree-vrp.o): Depend upon intl.h.\n \n 2007-03-08  Uros Bizjak  <ubizjak@gmail.com>\n \n@@ -6303,7 +6310,7 @@\n \n 2007-02-13  Stuart Hastings  <stuart@apple.com>\n \n-\t* gcc/config/i386/i386.md (fixuns_truncdfhi2): Require SSE2.\n+\t* config/i386/i386.md (fixuns_truncdfhi2): Require SSE2.\n \n 2007-02-13  Richard Henderson  <rth@redhat.com>\n \n@@ -6593,21 +6600,21 @@\n 2007-02-09  Stuart Hastings  <stuart@apple.com>\n \t    Richard Henderson  <rth@redhat.com>\n \n-\t* gcc/config/i386/i386.h (TARGET_KEEPS_VECTOR_ALIGNED_STACK): New.\n-\t* gcc/config/i386/darwin.h: (TARGET_KEEPS_VECTOR_ALIGNED_STACK): New.\n-\t* gcc/config/i386/i386.md (fixuns_trunc<mode>si2, fixuns_truncsfhi2,\n+\t* config/i386/i386.h (TARGET_KEEPS_VECTOR_ALIGNED_STACK): New.\n+\t* config/i386/darwin.h: (TARGET_KEEPS_VECTOR_ALIGNED_STACK): New.\n+\t* config/i386/i386.md (fixuns_trunc<mode>si2, fixuns_truncsfhi2,\n \tfixuns_truncdfhi2): New.\n \t(fix_truncsfdi_sse): Call ix86_expand_convert_sign_didf_sse.\n \t(floatunsdidf2): Call ix86_expand_convert_uns_didf_sse.\n \t(floatunssisf2): Add call to ix86_expand_convert_uns_sisf_sse.\n \t(floatunssidf2): Allow nonimmediate source.\n-\t* gcc/config/i386/sse.md (movdi_to_sse): New.\n+\t* config/i386/sse.md (movdi_to_sse): New.\n \t(vec_concatv2di): Drop '*'.\n-\t* gcc/config/i386/i386-protos.h (ix86_expand_convert_uns_si_sse,\n+\t* config/i386/i386-protos.h (ix86_expand_convert_uns_si_sse,\n \tix86_expand_convert_uns_didf_sse, ix86_expand_convert_uns_sidf_sse,\n \tix86_expand_convert_uns_sisf_sse, ix86_expand_convert_sign_didf_sse):\n \tNew.\n-\t* gcc/config/i386/i386.c (ix86_expand_convert_uns_si_sse,\n+\t* config/i386/i386.c (ix86_expand_convert_uns_si_sse,\n \tix86_expand_convert_uns_didf_sse, ix86_expand_convert_uns_sidf_sse,\n \tix86_expand_convert_uns_sisf_sse, ix86_expand_convert_sign_didf_sse,\n \tix86_build_const_vector, ix86_expand_vector_init_one_nonzero): New.\n@@ -7902,7 +7909,7 @@\n \n 2007-01-31  Kazu Hirata  <kazu@codesourcery.com>\n \n-\t* gcc/config/arm/unwind-arm.h (_sleb128_t, _uleb128_t): New.\n+\t* config/arm/unwind-arm.h (_sleb128_t, _uleb128_t): New.\n \n 2007-01-30  Eric Christopher  <echristo@apple.com>\n "}, {"sha": "6d2db7b876e610ebb36032ecf82b1793ae55074b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86122f7282ff1c895004881a9febde7bf15e928c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86122f7282ff1c895004881a9febde7bf15e928c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=86122f7282ff1c895004881a9febde7bf15e928c", "patch": "@@ -11918,13 +11918,13 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t  return omit_one_operand (type, integer_zero_node, arg0);\n \n \t\tcase GE_EXPR:\n-\t\t  return fold_build2 (EQ_EXPR, type, arg0, arg1);\n+\t\t  return fold_build2 (EQ_EXPR, type, op0, op1);\n \n \t\tcase LE_EXPR:\n \t\t  return omit_one_operand (type, integer_one_node, arg0);\n \n \t\tcase LT_EXPR:\n-\t\t  return fold_build2 (NE_EXPR, type, arg0, arg1);\n+\t\t  return fold_build2 (NE_EXPR, type, op0, op1);\n \n \t\t/* The GE_EXPR and LT_EXPR cases above are not normally\n \t\t   reached because of previous transformations.  */\n@@ -11940,11 +11940,15 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\tcase GT_EXPR:\n \t\t  arg1 = const_binop (PLUS_EXPR, arg1,\n \t\t\t\t      build_int_cst (TREE_TYPE (arg1), 1), 0);\n-\t\t  return fold_build2 (EQ_EXPR, type, arg0, arg1);\n+\t\t  return fold_build2 (EQ_EXPR, type,\n+\t\t\t\t      fold_convert (TREE_TYPE (arg1), arg0),\n+\t\t\t\t      arg1);\n \t\tcase LE_EXPR:\n \t\t  arg1 = const_binop (PLUS_EXPR, arg1,\n \t\t\t\t      build_int_cst (TREE_TYPE (arg1), 1), 0);\n-\t\t  return fold_build2 (NE_EXPR, type, arg0, arg1);\n+\t\t  return fold_build2 (NE_EXPR, type,\n+\t\t\t\t      fold_convert (TREE_TYPE (arg1), arg0),\n+\t\t\t\t      arg1);\n \t\tdefault:\n \t\t  break;\n \t\t}\n@@ -11957,7 +11961,7 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t  return omit_one_operand (type, integer_zero_node, arg0);\n \n \t\tcase LE_EXPR:\n-\t\t  return fold_build2 (EQ_EXPR, type, arg0, arg1);\n+\t\t  return fold_build2 (EQ_EXPR, type, op0, op1);\n \n \t\tcase GE_EXPR:\n \t\t  return omit_one_operand (type, integer_one_node, arg0);\n@@ -11975,10 +11979,14 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t{\n \t\tcase GE_EXPR:\n \t\t  arg1 = const_binop (MINUS_EXPR, arg1, integer_one_node, 0);\n-\t\t  return fold_build2 (NE_EXPR, type, arg0, arg1);\n+\t\t  return fold_build2 (NE_EXPR, type,\n+\t\t\t\t      fold_convert (TREE_TYPE (arg1), arg0),\n+\t\t\t\t      arg1);\n \t\tcase LT_EXPR:\n \t\t  arg1 = const_binop (MINUS_EXPR, arg1, integer_one_node, 0);\n-\t\t  return fold_build2 (EQ_EXPR, type, arg0, arg1);\n+\t\t  return fold_build2 (EQ_EXPR, type,\n+\t\t\t\t      fold_convert (TREE_TYPE (arg1), arg0),\n+\t\t\t\t      arg1);\n \t\tdefault:\n \t\t  break;\n \t\t}\n@@ -11998,12 +12006,11 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t   and X >= signed_max+1 because previous transformations.  */\n \t\tif (code == LE_EXPR || code == GT_EXPR)\n \t\t  {\n-\t\t    tree st0, st1;\n-\t\t    st0 = lang_hooks.types.signed_type (TREE_TYPE (arg0));\n-\t\t    st1 = lang_hooks.types.signed_type (TREE_TYPE (arg1));\n-\t\t    return fold_build2 (code == LE_EXPR ? GE_EXPR: LT_EXPR,\n-\t\t\t\t\ttype, fold_convert (st0, arg0),\n-\t\t\t\t\tbuild_int_cst (st1, 0));\n+\t\t    tree st;\n+\t\t    st = lang_hooks.types.signed_type (TREE_TYPE (arg1));\n+\t\t    return fold_build2 (code == LE_EXPR ? GE_EXPR : LT_EXPR,\n+\t\t\t\t\ttype, fold_convert (st, arg0),\n+\t\t\t\t\tbuild_int_cst (st, 0));\n \t\t  }\n \t      }\n \t  }"}, {"sha": "2cb05104d783dac6682e7dc6cc12c987aa3e155c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86122f7282ff1c895004881a9febde7bf15e928c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86122f7282ff1c895004881a9febde7bf15e928c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=86122f7282ff1c895004881a9febde7bf15e928c", "patch": "@@ -1,3 +1,8 @@\n+2007-04-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/31632\n+\t* gcc.c-torture/compile/20070419-1.c: New test.\n+\n 2007-04-19  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.dg/invalid-call-1.c: New test."}, {"sha": "ea23bf8bdc0c5d381b70c5b55a724043308a9d66", "filename": "gcc/testsuite/gcc.c-torture/compile/20070419-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86122f7282ff1c895004881a9febde7bf15e928c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20070419-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86122f7282ff1c895004881a9febde7bf15e928c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20070419-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20070419-1.c?ref=86122f7282ff1c895004881a9febde7bf15e928c", "patch": "@@ -0,0 +1,17 @@\n+/* PR tree-optimization/31632 */\n+\n+struct S\n+{\n+  long int l;\n+  void *m;\n+};\n+\n+int\n+foo (struct S *x)\n+{\n+  unsigned long a;\n+  a = x->l;\n+  if (a <= ((void *) 0))\n+    x->m = 0;\n+  return 0;\n+}"}]}