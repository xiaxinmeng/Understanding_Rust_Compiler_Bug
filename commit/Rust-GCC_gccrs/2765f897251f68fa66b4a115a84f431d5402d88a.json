{"sha": "2765f897251f68fa66b4a115a84f431d5402d88a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc2NWY4OTcyNTFmNjhmYTY2YjRhMTE1YTg0ZjQzMWQ1NDAyZDg4YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-10-03T22:50:59Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-10-03T22:50:59Z"}, "message": "re PR c++/58584 ([c++11] ICE with invalid argument for alignas)\n\n/cp\n2013-10-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/58584\n\t* decl2.c (save_template_attributes): Handle error_mark_node as\n\t*attr_p argument.\n\t(cp_check_const_attributes): Likewise for attributes.\n\t* parser.c (cp_parser_std_attribute_spec): When alignas_expr is an\n\terror_mark_node call cp_parser_skip_to_end_of_statement.\n\n/testsuite\n2013-10-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/58584\n\t* g++.dg/cpp0x/gen-attrs-55.C: New.\n\nFrom-SVN: r203193", "tree": {"sha": "632ec45b1b3a83b404fb65ccd1659df4baecd037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/632ec45b1b3a83b404fb65ccd1659df4baecd037"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2765f897251f68fa66b4a115a84f431d5402d88a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2765f897251f68fa66b4a115a84f431d5402d88a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2765f897251f68fa66b4a115a84f431d5402d88a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2765f897251f68fa66b4a115a84f431d5402d88a/comments", "author": null, "committer": null, "parents": [{"sha": "d9d60b6febd92c2a51793a747e1544ec172347a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9d60b6febd92c2a51793a747e1544ec172347a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9d60b6febd92c2a51793a747e1544ec172347a4"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "f618475d85bcb27d742ab48f4aaaff346bb32e11", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2765f897251f68fa66b4a115a84f431d5402d88a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2765f897251f68fa66b4a115a84f431d5402d88a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2765f897251f68fa66b4a115a84f431d5402d88a", "patch": "@@ -1,3 +1,12 @@\n+2013-10-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/58584\n+\t* decl2.c (save_template_attributes): Handle error_mark_node as\n+\t*attr_p argument.\n+\t(cp_check_const_attributes): Likewise for attributes.\n+\t* parser.c (cp_parser_std_attribute_spec): When alignas_expr is an\n+\terror_mark_node call cp_parser_skip_to_end_of_statement.\n+\n 2013-10-03  Easwaran Raman  <eraman@google.com>\n \n \tPR c++/33911"}, {"sha": "53e6bc9da1b7d0f4191c3f3bd71609091b4c7a1e", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2765f897251f68fa66b4a115a84f431d5402d88a/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2765f897251f68fa66b4a115a84f431d5402d88a/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=2765f897251f68fa66b4a115a84f431d5402d88a", "patch": "@@ -1218,10 +1218,12 @@ splice_template_attributes (tree *attr_p, tree decl)\n static void\n save_template_attributes (tree *attr_p, tree *decl_p)\n {\n-  tree late_attrs = splice_template_attributes (attr_p, *decl_p);\n   tree *q;\n-  tree old_attrs = NULL_TREE;\n \n+  if (attr_p && *attr_p == error_mark_node)\n+    return;\n+\n+  tree late_attrs = splice_template_attributes (attr_p, *decl_p);\n   if (!late_attrs)\n     return;\n \n@@ -1230,7 +1232,7 @@ save_template_attributes (tree *attr_p, tree *decl_p)\n   else\n     q = &TYPE_ATTRIBUTES (*decl_p);\n \n-  old_attrs = *q;\n+  tree old_attrs = *q;\n \n   /* Merge the late attributes at the beginning with the attribute\n      list.  */\n@@ -1318,6 +1320,9 @@ cp_reconstruct_complex_type (tree type, tree bottom)\n static void\n cp_check_const_attributes (tree attributes)\n {\n+  if (attributes == error_mark_node)\n+    return;\n+\n   tree attr;\n   for (attr = attributes; attr; attr = TREE_CHAIN (attr))\n     {"}, {"sha": "1a9d6b9dfb1d8050fc2536f04a5cf997fc1c292b", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2765f897251f68fa66b4a115a84f431d5402d88a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2765f897251f68fa66b4a115a84f431d5402d88a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2765f897251f68fa66b4a115a84f431d5402d88a", "patch": "@@ -21458,6 +21458,8 @@ cp_parser_std_attribute_spec (cp_parser *parser)\n \t  alignas_expr =\n \t    cp_parser_assignment_expression (parser, /*cast_p=*/false,\n \t\t\t\t\t     /**cp_id_kind=*/NULL);\n+\t  if (alignas_expr == error_mark_node)\n+\t    cp_parser_skip_to_end_of_statement (parser);\n \t  if (alignas_expr == NULL_TREE\n \t      || alignas_expr == error_mark_node)\n \t    return alignas_expr;"}, {"sha": "d631f0f5775c8096df56f1ce90cde381a920c46c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2765f897251f68fa66b4a115a84f431d5402d88a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2765f897251f68fa66b4a115a84f431d5402d88a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2765f897251f68fa66b4a115a84f431d5402d88a", "patch": "@@ -1,3 +1,8 @@\n+2013-10-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/58584\n+\t* g++.dg/cpp0x/gen-attrs-55.C: New.\n+\n 2013-10-03  Easwaran Raman  <eraman@google.com>\n \n \tPR c++/33911"}, {"sha": "c4e6deabe1dc6534fe2de8c3451cba538adde624", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-55.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2765f897251f68fa66b4a115a84f431d5402d88a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2765f897251f68fa66b4a115a84f431d5402d88a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-55.C?ref=2765f897251f68fa66b4a115a84f431d5402d88a", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/58584\n+// { dg-do compile { target c++11 } }\n+\n+struct A\n+{\n+  int i alignas(this);  // { dg-error \"17:invalid use of 'this'\" }\n+};\n+\n+template<int> struct B\n+{\n+  int j alignas(this);  // { dg-error \"17:invalid use of 'this'\" }\n+};"}]}