{"sha": "7d5a5747fc5ffbd86d1da0e2cff9823f0446a907", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q1YTU3NDdmYzVmZmJkODZkMWRhMGUyY2ZmOTgyM2YwNDQ2YTkwNw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-05-11T12:23:50Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-05-11T12:23:50Z"}, "message": "re PR c/53063 (encode group options in the .opt files)\n\n2012-05-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR 53063\ngcc/\n\t* doc/options.texi (EnabledBy): Document\n\t* opts.c: Include opts.h and options.h before tm.h.\n\t(finish_options): Do not handle some sub-options here...\n\t(common_handle_option): ... instead call common_handle_option_auto here.\n\t* optc-gen.awk: Handle EnabledBy.\n\t* opth-gen.awk: Declare common_handle_option_auto.\n\t* common.opt (Wuninitialized): Use EnabledBy. Delete Init.\n\t(Wmaybe-uninitialized): Likewise.\n        (Wunused-but-set-variable): Likewise.\n        (Wunused-function): Likewise.\n        (Wunused-label): Likewise.\n        (Wunused-value): Likewise.\n        (Wunused-variable): Likewise.\n        * opt-read.awk: Create opt_numbers array.\nada/\n\t* gcc-interface/misc.c (gnat_parse_file): Move before ...\n\t(gnat_handle_option): ... this. Use handle_generated_option.\nc-family/\n\t* c-opts.c (c_common_handle_option): Use handle_generated_option\n\tto enable sub-options.\nfortran/\n\t* options.c: Include diagnostics.h instead of\n\tdiagnostics-core.h.\n\t(set_Wall): Do not see warn_unused here.\n\t(gfc_handle_option): Set it here using handle_generated_option.\n\nFrom-SVN: r187403", "tree": {"sha": "1a38b4f6902dc5e5cc35971539a25051202efa2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a38b4f6902dc5e5cc35971539a25051202efa2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/comments", "author": null, "committer": null, "parents": [{"sha": "319e6439f592285e7d931c47285c363cca113788", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/319e6439f592285e7d931c47285c363cca113788", "html_url": "https://github.com/Rust-GCC/gccrs/commit/319e6439f592285e7d931c47285c363cca113788"}], "stats": {"total": 199, "additions": 154, "deletions": 45}, "files": [{"sha": "c9f7f499b74fd7877f89d9091420a0a7cca722c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d5a5747fc5ffbd86d1da0e2cff9823f0446a907", "patch": "@@ -1,3 +1,21 @@\n+2012-05-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 53063\n+\t* doc/options.texi (EnabledBy): Document\n+\t* opts.c: Include opts.h and options.h before tm.h.\n+\t(finish_options): Do not handle some sub-options here...\n+\t(common_handle_option): ... instead call common_handle_option_auto here.\n+\t* optc-gen.awk: Handle EnabledBy.\n+\t* opth-gen.awk: Declare common_handle_option_auto.\n+\t* common.opt (Wuninitialized): Use EnabledBy. Delete Init.\n+\t(Wmaybe-uninitialized): Likewise.\n+        (Wunused-but-set-variable): Likewise.\n+        (Wunused-function): Likewise.\n+        (Wunused-label): Likewise.\n+        (Wunused-value): Likewise.\n+        (Wunused-variable): Likewise.\n+        * opt-read.awk: Create opt_numbers array.\n+\n 2012-05-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/53295"}, {"sha": "537b39e98caaee5d81254e80717ca081b225c0fb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7d5a5747fc5ffbd86d1da0e2cff9823f0446a907", "patch": "@@ -1,3 +1,9 @@\n+2012-05-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 53063\n+\t* gcc-interface/misc.c (gnat_parse_file): Move before ...\n+\t(gnat_handle_option): ... this. Use handle_generated_option.\n+\n 2012-05-10  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc-interface/cuintp.c (UI_From_gnu): Remove TYPE_IS_SIZETYPE use."}, {"sha": "ad15f6724239c08c58f38bfb934c15ecfde8d0f5", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=7d5a5747fc5ffbd86d1da0e2cff9823f0446a907", "patch": "@@ -105,6 +105,14 @@ gnat_parse_file (void)\n   _ada_gnat1drv ();\n }\n \n+/* Return language mask for option processing.  */\n+\n+static unsigned int\n+gnat_option_lang_mask (void)\n+{\n+  return CL_Ada;\n+}\n+\n /* Decode all the language specific options that cannot be decoded by GCC.\n    The option decoding phase of GCC calls this routine on the flags that\n    are marked as Ada-specific.  Return true on success or false on failure.  */\n@@ -119,7 +127,10 @@ gnat_handle_option (size_t scode, const char *arg ATTRIBUTE_UNUSED, int value,\n   switch (code)\n     {\n     case OPT_Wall:\n-      warn_unused = value;\n+      handle_generated_option (&global_options, &global_options_set,\n+\t\t\t       OPT_Wunused, NULL, value,\n+\t\t\t       gnat_option_lang_mask (), kind, loc,\n+\t\t\t       handlers, global_dc);\n       warn_uninitialized = value;\n       warn_maybe_uninitialized = value;\n       break;\n@@ -145,14 +156,6 @@ gnat_handle_option (size_t scode, const char *arg ATTRIBUTE_UNUSED, int value,\n   return true;\n }\n \n-/* Return language mask for option processing.  */\n-\n-static unsigned int\n-gnat_option_lang_mask (void)\n-{\n-  return CL_Ada;\n-}\n-\n /* Initialize options structure OPTS.  */\n \n static void"}, {"sha": "2c85d515f079f0858b4d7783e468eaa2e7d83c47", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7d5a5747fc5ffbd86d1da0e2cff9823f0446a907", "patch": "@@ -1,3 +1,9 @@\n+2012-05-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 53063\n+\t* c-opts.c (c_common_handle_option): Use handle_generated_option\n+\tto enable sub-options.\n+\n 2012-05-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/53158"}, {"sha": "7d8ee6b334f500becee77193d27561e4fe3a7292", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=7d5a5747fc5ffbd86d1da0e2cff9823f0446a907", "patch": "@@ -360,7 +360,10 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_Wall:\n-      warn_unused = value;\n+      handle_generated_option (&global_options, &global_options_set,\n+\t\t\t       OPT_Wunused, NULL, value,\n+\t\t\t       c_family_lang_mask, kind, loc,\n+\t\t\t       handlers, global_dc);\n       set_Wformat (value);\n       handle_generated_option (&global_options, &global_options_set,\n \t\t\t       OPT_Wimplicit, NULL, value,"}, {"sha": "375c10d713e97622c8d8b2f5bcb692224ee223ff", "filename": "gcc/common.opt", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=7d5a5747fc5ffbd86d1da0e2cff9823f0446a907", "patch": "@@ -650,11 +650,11 @@ Common Var(warn_type_limits) Init(-1) Warning\n Warn if a comparison is always true or always false due to the limited range of the data type\n \n Wuninitialized\n-Common Var(warn_uninitialized) Init(-1) Warning\n+Common Var(warn_uninitialized) Warning EnabledBy(Wextra)\n Warn about uninitialized automatic variables\n \n Wmaybe-uninitialized\n-Common Var(warn_maybe_uninitialized) Warning\n+Common Var(warn_maybe_uninitialized) Warning EnabledBy(Wuninitialized)\n Warn about maybe uninitialized automatic variables\n \n Wunreachable-code\n@@ -670,27 +670,27 @@ Common Var(warn_unused_but_set_parameter) Init(-1) Warning\n Warn when a function parameter is only set, otherwise unused\n \n Wunused-but-set-variable\n-Common Var(warn_unused_but_set_variable) Init(-1) Warning\n+Common Var(warn_unused_but_set_variable) Warning EnabledBy(Wunused)\n Warn when a variable is only set, otherwise unused\n \n Wunused-function\n-Common Var(warn_unused_function) Init(-1) Warning\n+Common Var(warn_unused_function) Warning EnabledBy(Wunused)\n Warn when a function is unused\n \n Wunused-label\n-Common Var(warn_unused_label) Init(-1) Warning\n+Common Var(warn_unused_label) Warning EnabledBy(Wunused)\n Warn when a label is unused\n \n Wunused-parameter\n Common Var(warn_unused_parameter) Init(-1) Warning\n Warn when a function parameter is unused\n \n Wunused-value\n-Common Var(warn_unused_value) Init(-1) Warning\n+Common Var(warn_unused_value) Warning EnabledBy(Wunused)\n Warn when an expression value is unused\n \n Wunused-variable\n-Common Var(warn_unused_variable) Init(-1) Warning\n+Common Var(warn_unused_variable) Warning EnabledBy(Wunused)\n Warn when a variable is unused\n \n Wcoverage-mismatch"}, {"sha": "360cbdfb662f12f6113c2c7cd70ee068e34f1265", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=7d5a5747fc5ffbd86d1da0e2cff9823f0446a907", "patch": "@@ -459,4 +459,6 @@ combined option.  For example, some front ends use this to prevent\n value of @option{-fmath-errno} for languages that do not use\n @code{errno}.\n \n+@item EnabledBy(@var{opt})\n+If not explicitly set, the option is set to the value of @option{-@var{opt}}.\n @end table"}, {"sha": "a488dcac5672cd58a517b0574fa8985cb85d49b6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7d5a5747fc5ffbd86d1da0e2cff9823f0446a907", "patch": "@@ -1,3 +1,11 @@\n+2012-05-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 53063\n+\t* options.c: Include diagnostics.h instead of\n+\tdiagnostics-core.h.\n+\t(set_Wall): Do not see warn_unused here.\n+\t(gfc_handle_option): Set it here using handle_generated_option.\n+\n 2012-05-08  Jan Hubicka  <jh@suse.cz>\n \t\n \t* trans-common.c (create_common): Do not fake TREE_ASM_WRITTEN."}, {"sha": "32a8a4cb464c285faf40d92d147064c6cb778d67", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=7d5a5747fc5ffbd86d1da0e2cff9823f0446a907", "patch": "@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gfortran.h\"\n #include \"target.h\"\n #include \"cpp.h\"\n-#include \"diagnostic-core.h\"\t/* For sorry.  */\n+#include \"diagnostic.h\"\t/* For global_dc.  */\n #include \"tm.h\"\n \n gfc_option_t gfc_option;\n@@ -474,7 +474,6 @@ set_Wall (int setting)\n   gfc_option.warn_real_q_constant = setting;\n   gfc_option.warn_unused_dummy_argument = setting;\n \n-  warn_unused = setting;\n   warn_return_type = setting;\n   warn_switch = setting;\n   warn_uninitialized = setting;\n@@ -612,6 +611,10 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_Wall:\n+      handle_generated_option (&global_options, &global_options_set,\n+\t\t\t       OPT_Wunused, NULL, value,\n+\t\t\t       gfc_option_lang_mask (), kind, loc,\n+\t\t\t       handlers, global_dc);\n       set_Wall (value);\n       break;\n "}, {"sha": "81c3ea894d9738571474ce585b4133bbba30212d", "filename": "gcc/opt-read.awk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Fopt-read.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Fopt-read.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-read.awk?ref=7d5a5747fc5ffbd86d1da0e2cff9823f0446a907", "patch": "@@ -1,4 +1,4 @@\n-#  Copyright (C) 2003,2004,2005,2006,2007,2008, 2010, 2011\n+#  Copyright (C) 2003,2004,2005,2006,2007,2008, 2010, 2011, 2012\n #  Free Software Foundation, Inc.\n #  Contributed by Kelley Cook, June 2004.\n #  Original code from Neil Booth, May 2003.\n@@ -108,6 +108,7 @@ BEGIN {\n \t\t\tname = opt_args(\"Mask\", $1)\n \t\t\tif (name == \"\") {\n \t\t\t\topts[n_opts]  = $1\n+\t\t\t\topt_numbers[$1] = n_opts\n \t\t\t\tflags[n_opts] = $2\n \t\t\t\thelp[n_opts]  = $3\n \t\t\t\tfor (i = 4; i <= NF; i++)"}, {"sha": "4dc97f9ca6a56c80477f6553ac0d86038c5c0d36", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=7d5a5747fc5ffbd86d1da0e2cff9823f0446a907", "patch": "@@ -1,4 +1,4 @@\n-#  Copyright (C) 2003, 2004, 2007, 2008, 2009, 2010, 2011\n+#  Copyright (C) 2003, 2004, 2007, 2008, 2009, 2010, 2011, 2012\n #  Free Software Foundation, Inc.\n #  Contributed by Kelley Cook, June 2004.\n #  Original code from Neil Booth, May 2003.\n@@ -324,4 +324,66 @@ for (i = 0; i < n_opts; i++) {\n \n print \"};\"\n \n+print \"\\n\\n\"\n+print \"bool                                                                  \"\n+print \"common_handle_option_auto (struct gcc_options *opts,                  \"\n+print \"                           struct gcc_options *opts_set,              \"\n+print \"                           const struct cl_decoded_option *decoded,   \"\n+print \"                           unsigned int lang_mask, int kind,          \"\n+print \"                           location_t loc,                            \"\n+print \"                           const struct cl_option_handlers *handlers, \"\n+print \"                           diagnostic_context *dc)                    \"\n+print \"{                                                                     \"\n+print \"  size_t scode = decoded->opt_index;                                  \"\n+print \"  int value = decoded->value;                                         \"\n+print \"  enum opt_code code = (enum opt_code) scode;                         \"\n+print \"                                                                      \"\n+print \"  gcc_assert (decoded->canonical_option_num_elements <= 2);           \"\n+print \"                                                                      \"\n+print \"  switch (code)                                                       \"\n+print \"    {                                                                 \"\n+n_enabledby = 0;\n+for (i = 0; i < n_opts; i++) {\n+    # With identical flags, pick only the last one.  The\n+    # earlier loop ensured that it has all flags merged,\n+    # and a nonempty help text if one of the texts was nonempty.\n+    while( i + 1 != n_opts && opts[i] == opts[i + 1] ) {\n+        i++;\n+    }\n+    enabledby_arg = opt_args(\"EnabledBy\", flags[i]);\n+    if (enabledby_arg != \"\") {\n+        enabledby_name = enabledby_arg;\n+        enabledby_index = opt_numbers[enabledby_name];\n+        if (enabledby_index == \"\") {\n+            print \"#error Enabledby: \" enabledby_name \n+        } else {\n+            enabledby_var_name = var_name(flags[enabledby_index]);\n+            if (enables[enabledby_name] == \"\") {\n+                enabledby[n_enabledby] = enabledby_name;\n+                n_enabledby++;\n+            }\n+            enables[enabledby_name] = enables[enabledby_name] opts[i] \",\";\n+        }\n+    }\n+}\n+for (i = 0; i < n_enabledby; i++) {\n+    enabledby_name = enabledby[i];\n+    print \"    case \" opt_enum(enabledby_name) \":\"\n+    n_enables = split(enables[enabledby_name], thisenable, \",\");\n+    for (j = 1; j < n_enables; j++) {\n+        opt_var_name = var_name(flags[opt_numbers[thisenable[j]]]);\n+        print \"      if (!opts_set->x_\" opt_var_name \")\"\n+        print \"        handle_generated_option (opts, opts_set,\"\n+        print \"                                 \" opt_enum(thisenable[j]) \", NULL, value,\"\n+        print \"                                 lang_mask, kind, loc, handlers, dc);\"\n+    }\n+    print \"      break;\\n\"\n+\n+}\n+print \"    default:    \"\n+print \"      break;    \"\n+print \"    }           \"\n+print \"  return true;  \"\n+print \"}               \"\n+\n }"}, {"sha": "8257587e1b34a565072334ece02c18b2e424e42f", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=7d5a5747fc5ffbd86d1da0e2cff9823f0446a907", "patch": "@@ -1,4 +1,4 @@\n-#  Copyright (C) 2003,2004,2005,2006,2007,2008, 2010, 2011\n+#  Copyright (C) 2003,2004,2005,2006,2007,2008, 2010, 2011, 2012\n #  Free Software Foundation, Inc.\n #  Contributed by Kelley Cook, June 2004.\n #  Original code from Neil Booth, May 2003.\n@@ -293,6 +293,19 @@ print \"extern void cl_target_option_restore (struct gcc_options *, struct cl_tar\n print \"\";\n print \"/* Print target option variables from a structure.  */\";\n print \"extern void cl_target_option_print (FILE *, int, struct cl_target_option *);\";\n+print \"\";\n+print \"/* Anything that includes tm.h, does not necessarily need this.  */\"\n+print \"#if !defined(GCC_TM_H)\"\n+print \"#include \\\"input.h\\\" /* for location_t */\"\n+print \"bool                                                                  \"\n+print \"common_handle_option_auto (struct gcc_options *opts,                  \"\n+print \"                           struct gcc_options *opts_set,              \"\n+print \"                           const struct cl_decoded_option *decoded,   \"\n+print \"                           unsigned int lang_mask, int kind,          \"\n+print \"                           location_t loc,                            \"\n+print \"                           const struct cl_option_handlers *handlers, \"\n+print \"                           diagnostic_context *dc);                   \"\n+print \"#endif\";\n print \"#endif\";\n print \"\";\n "}, {"sha": "ac43d4a2da7c391496e85edb7a776b6e8fe94e4e", "filename": "gcc/opts.c", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5a5747fc5ffbd86d1da0e2cff9823f0446a907/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=7d5a5747fc5ffbd86d1da0e2cff9823f0446a907", "patch": "@@ -1,5 +1,7 @@\n /* Command line option handling.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,\n+   2012\n+\n    Free Software Foundation, Inc.\n    Contributed by Neil Booth.\n \n@@ -23,11 +25,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"intl.h\"\n #include \"coretypes.h\"\n+#include \"opts.h\"\n+#include \"options.h\"\n #include \"tm.h\" /* For STACK_CHECK_BUILTIN,\n \t\t   STACK_CHECK_STATIC_BUILTIN, DEFAULT_GDB_EXTENSIONS,\n \t\t   DWARF2_DEBUGGING_INFO and DBX_DEBUGGING_INFO.  */\n-#include \"opts.h\"\n-#include \"options.h\"\n #include \"flags.h\"\n #include \"params.h\"\n #include \"diagnostic.h\"\n@@ -815,33 +817,18 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n                            opts->x_param_values, opts_set->x_param_values);\n \n   /* This replaces set_Wunused.  */\n-  if (opts->x_warn_unused_function == -1)\n-    opts->x_warn_unused_function = opts->x_warn_unused;\n-  if (opts->x_warn_unused_label == -1)\n-    opts->x_warn_unused_label = opts->x_warn_unused;\n   /* Wunused-parameter is enabled if both -Wunused -Wextra are enabled.  */\n   if (opts->x_warn_unused_parameter == -1)\n     opts->x_warn_unused_parameter = (opts->x_warn_unused\n \t\t\t\t     && opts->x_extra_warnings);\n-  if (opts->x_warn_unused_variable == -1)\n-    opts->x_warn_unused_variable = opts->x_warn_unused;\n   /* Wunused-but-set-parameter is enabled if both -Wunused -Wextra are\n      enabled.  */\n   if (opts->x_warn_unused_but_set_parameter == -1)\n     opts->x_warn_unused_but_set_parameter = (opts->x_warn_unused\n \t\t\t\t\t     && opts->x_extra_warnings);\n-  if (opts->x_warn_unused_but_set_variable == -1)\n-    opts->x_warn_unused_but_set_variable = opts->x_warn_unused;\n-  if (opts->x_warn_unused_value == -1)\n-    opts->x_warn_unused_value = opts->x_warn_unused;\n-\n   /* Wunused-local-typedefs is enabled by -Wunused or -Wall.  */\n   if (opts->x_warn_unused_local_typedefs == -1)\n     opts->x_warn_unused_local_typedefs = opts->x_warn_unused;\n-\n-  /* This replaces set_Wextra.  */\n-  if (opts->x_warn_uninitialized == -1)\n-    opts->x_warn_uninitialized = opts->x_extra_warnings;\n }\n \n #define LEFT_COLUMN\t27\n@@ -1745,18 +1732,15 @@ common_handle_option (struct gcc_options *opts,\n       /* No-op. Used by the driver and passed to us because it starts with f.*/\n       break;\n \n-    case OPT_Wuninitialized:\n-      /* Also turn on maybe uninitialized warning.  */\n-      opts->x_warn_maybe_uninitialized = value;\n-      break;\n-\n     default:\n       /* If the flag was handled in a standard way, assume the lack of\n \t processing here is intentional.  */\n       gcc_assert (option_flag_var (scode, opts));\n       break;\n     }\n \n+  common_handle_option_auto (opts, opts_set, decoded, lang_mask, kind,\n+                             loc, handlers, dc);\n   return true;\n }\n "}]}