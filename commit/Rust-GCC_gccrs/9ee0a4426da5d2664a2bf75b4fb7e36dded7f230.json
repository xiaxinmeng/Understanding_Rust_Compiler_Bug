{"sha": "9ee0a4426da5d2664a2bf75b4fb7e36dded7f230", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVlMGE0NDI2ZGE1ZDI2NjRhMmJmNzViNGZiN2UzNmRkZWQ3ZjIzMA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-01-15T17:32:38Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-01-15T17:32:38Z"}, "message": "re PR middle-end/9009 (floating-point negate and abs optimizations incorrect for ARM)\n\n\n\tPR middle-end/9009\n\t* optabs.c (expand_unop):  When manipulating the FP sign bit\n\tusing integer operations, account for targets with different\n\tinteger and FP word orders.\n\t(expand_abs): Likewise.\n\nFrom-SVN: r61335", "tree": {"sha": "c62a976a42c04eee74b528e74a2cf9263b1298d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c62a976a42c04eee74b528e74a2cf9263b1298d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ee0a4426da5d2664a2bf75b4fb7e36dded7f230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee0a4426da5d2664a2bf75b4fb7e36dded7f230", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ee0a4426da5d2664a2bf75b4fb7e36dded7f230", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee0a4426da5d2664a2bf75b4fb7e36dded7f230/comments", "author": null, "committer": null, "parents": [{"sha": "e3981aabf2789a22086f81899a1bf8e8d090b020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3981aabf2789a22086f81899a1bf8e8d090b020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3981aabf2789a22086f81899a1bf8e8d090b020"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "8f42f48cefa64cb880be864479a8b3feaf0a1e4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee0a4426da5d2664a2bf75b4fb7e36dded7f230/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee0a4426da5d2664a2bf75b4fb7e36dded7f230/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ee0a4426da5d2664a2bf75b4fb7e36dded7f230", "patch": "@@ -1,3 +1,11 @@\n+2003-01-15  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/9009\n+\t* optabs.c (expand_unop):  When manipulating the FP sign bit\n+\tusing integer operations, account for targets with different\n+\tinteger and FP word orders.\n+\t(expand_abs): Likewise.\n+\n 2003-01-15  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.c (rs6000_gen_section_name): Do not include"}, {"sha": "38cc7e7fdffa0bf2ee0cdd05ebf667921eb26918", "filename": "gcc/optabs.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee0a4426da5d2664a2bf75b4fb7e36dded7f230/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee0a4426da5d2664a2bf75b4fb7e36dded7f230/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=9ee0a4426da5d2664a2bf75b4fb7e36dded7f230", "patch": "@@ -1,6 +1,6 @@\n /* Expand the basic unary and binary arithmetic operations, for GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -2530,6 +2530,14 @@ expand_unop (mode, unoptab, op0, target, unsignedp)\n \t  HOST_WIDE_INT hi, lo;\n \t  rtx last = get_last_insn ();\n \n+\t  /* Handle targets with different FP word orders.  */\n+\t  if (FLOAT_WORDS_BIG_ENDIAN != WORDS_BIG_ENDIAN)\n+\t    {\n+\t      int nwords = GET_MODE_BITSIZE (mode) / BITS_PER_WORD;\n+\t      int word = nwords - (bitpos / BITS_PER_WORD) - 1;\n+\t      bitpos = word * BITS_PER_WORD + bitpos % BITS_PER_WORD;\n+\t    }\n+\n \t  if (bitpos < HOST_BITS_PER_WIDE_INT)\n \t    {\n \t      hi = 0;\n@@ -2675,6 +2683,14 @@ expand_abs (mode, op0, target, result_unsignedp, safe)\n \t  HOST_WIDE_INT hi, lo;\n \t  rtx last = get_last_insn ();\n \n+\t  /* Handle targets with different FP word orders.  */\n+\t  if (FLOAT_WORDS_BIG_ENDIAN != WORDS_BIG_ENDIAN)\n+\t    {\n+\t      int nwords = GET_MODE_BITSIZE (mode) / BITS_PER_WORD;\n+\t      int word = nwords - (bitpos / BITS_PER_WORD) - 1;\n+\t      bitpos = word * BITS_PER_WORD + bitpos % BITS_PER_WORD;\n+\t    }\n+\n \t  if (bitpos < HOST_BITS_PER_WIDE_INT)\n \t    {\n \t      hi = 0;"}]}