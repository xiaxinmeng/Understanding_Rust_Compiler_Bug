{"sha": "5d24a9774e7e5e40c0b0394de971ac4d4d8c521f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQyNGE5Nzc0ZTdlNWU0MGMwYjAzOTRkZTk3MWFjNGQ0ZDhjNTIxZg==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-10-06T16:21:42Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-10-06T16:21:42Z"}, "message": "re PR fortran/17568 (ISHFT intrinsic: bogus overflow error)\n\nfortran/\nPR fortran/17568\n* simplify.c (twos_complement): New function.\n(gfc_simplify_ishft, gfc_simplify_ishftc): Revise.\n\ntestsuite/\nPR fortran/17568\n* gfortran.dg/ishft.f90: New test.\n\nFrom-SVN: r88609", "tree": {"sha": "87123040ec341b43665f88e8fc6051e4ee4b40b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87123040ec341b43665f88e8fc6051e4ee4b40b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d24a9774e7e5e40c0b0394de971ac4d4d8c521f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d24a9774e7e5e40c0b0394de971ac4d4d8c521f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d24a9774e7e5e40c0b0394de971ac4d4d8c521f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d24a9774e7e5e40c0b0394de971ac4d4d8c521f/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d13256a357157ac785b5b3b17e742ca5b1a62fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d13256a357157ac785b5b3b17e742ca5b1a62fb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d13256a357157ac785b5b3b17e742ca5b1a62fb3"}], "stats": {"total": 164, "additions": 137, "deletions": 27}, "files": [{"sha": "d52914f419a13281edf5d28fe6cedc7eb2518548", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d24a9774e7e5e40c0b0394de971ac4d4d8c521f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d24a9774e7e5e40c0b0394de971ac4d4d8c521f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5d24a9774e7e5e40c0b0394de971ac4d4d8c521f", "patch": "@@ -1,3 +1,9 @@\n+2004-10-06  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/17568\n+\t* simplify.c (twos_complement): New function.\n+\t(gfc_simplify_ishft, gfc_simplify_ishftc): Revise.\n+\n 2004-10-06  Paul Brook  <paul@codesourcery.com>\n \n \t* trans-stmt.c (gfc_trans_simple_do): New function."}, {"sha": "0ac9d618bd25018549c21e4d74440ba74560fb4f", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 82, "deletions": 27, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d24a9774e7e5e40c0b0394de971ac4d4d8c521f/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d24a9774e7e5e40c0b0394de971ac4d4d8c521f/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=5d24a9774e7e5e40c0b0394de971ac4d4d8c521f", "patch": "@@ -138,6 +138,38 @@ get_kind (bt type, gfc_expr * k, const char *name, int default_kind)\n }\n \n \n+/* Checks if X, which is assumed to represent a two's complement\n+   integer of binary width BITSIZE, has the signbit set.  If so, makes \n+   X the corresponding negative number.  */\n+\n+static void\n+twos_complement (mpz_t x, int bitsize)\n+{\n+  mpz_t mask;\n+  char mask_s[bitsize + 1];\n+\n+  if (mpz_tstbit (x, bitsize - 1) == 1)\n+    {\n+      /* The mpz_init_set_{u|s}i functions take a long argument, but\n+\t the widest integer the target supports might be wider, so we\n+\t have to go via an intermediate string.  */\n+      memset (mask_s, '1', bitsize);\n+      mask_s[bitsize] = '\\0';\n+      mpz_init_set_str (mask, mask_s, 2);\n+\n+      /* We negate the number by hand, zeroing the high bits, and then\n+\t have it negated by GMP.  */\n+      mpz_com (x, x);\n+      mpz_add_ui (x, x, 1);\n+      mpz_and (x, x, mask);\n+\n+      mpz_neg (x, x);\n+\n+      mpz_clear (mask);\n+    }\n+}\n+\n+\n /********************** Simplification functions *****************************/\n \n gfc_expr *\n@@ -1557,8 +1589,7 @@ gfc_expr *\n gfc_simplify_ishft (gfc_expr * e, gfc_expr * s)\n {\n   gfc_expr *result;\n-  int shift, ashift, isize, k;\n-  long e_int;\n+  int shift, ashift, isize, k, *bits, i;\n \n   if (e->expr_type != EXPR_CONSTANT || s->expr_type != EXPR_CONSTANT)\n     return NULL;\n@@ -1586,24 +1617,50 @@ gfc_simplify_ishft (gfc_expr * e, gfc_expr * s)\n       return &gfc_bad_expr;\n     }\n \n-  e_int = mpz_get_si (e->value.integer);\n-  if (e_int > INT_MAX || e_int < INT_MIN)\n-    gfc_internal_error (\"ISHFT: unable to extract integer\");\n-\n   result = gfc_constant_result (e->ts.type, e->ts.kind, &e->where);\n \n   if (shift == 0)\n     {\n       mpz_set (result->value.integer, e->value.integer);\n       return range_check (result, \"ISHFT\");\n     }\n+  \n+  bits = gfc_getmem (isize * sizeof (int));\n+\n+  for (i = 0; i < isize; i++)\n+    bits[i] = mpz_tstbit (e->value.integer, i);\n \n   if (shift > 0)\n-    mpz_set_si (result->value.integer, e_int << shift);\n+    {\n+      for (i = 0; i < shift; i++)\n+\tmpz_clrbit (result->value.integer, i);\n+\n+      for (i = 0; i < isize - shift; i++)\n+\t{\n+\t  if (bits[i] == 0)\n+\t    mpz_clrbit (result->value.integer, i + shift);\n+\t  else\n+\t    mpz_setbit (result->value.integer, i + shift);\n+\t}\n+    }\n   else\n-    mpz_set_si (result->value.integer, e_int >> ashift);\n+    {\n+      for (i = isize - 1; i >= isize - ashift; i--)\n+\tmpz_clrbit (result->value.integer, i);\n \n-  return range_check (result, \"ISHFT\");\n+      for (i = isize - 1; i >= ashift; i--)\n+\t{\n+\t  if (bits[i] == 0)\n+\t    mpz_clrbit (result->value.integer, i - ashift);\n+\t  else\n+\t    mpz_setbit (result->value.integer, i - ashift);\n+\t}\n+    }\n+\n+  twos_complement (result->value.integer, isize);\n+\n+  gfc_free (bits);\n+  return result;\n }\n \n \n@@ -1651,62 +1708,60 @@ gfc_simplify_ishftc (gfc_expr * e, gfc_expr * s, gfc_expr * sz)\n \n   result = gfc_constant_result (e->ts.type, e->ts.kind, &e->where);\n \n+  if (shift == 0)\n+    {\n+      mpz_set (result->value.integer, e->value.integer);\n+      return result;\n+    }\n+\n   bits = gfc_getmem (isize * sizeof (int));\n \n   for (i = 0; i < isize; i++)\n     bits[i] = mpz_tstbit (e->value.integer, i);\n \n   delta = isize - ashift;\n \n-  if (shift == 0)\n-    {\n-      mpz_set (result->value.integer, e->value.integer);\n-      gfc_free (bits);\n-      return range_check (result, \"ISHFTC\");\n-    }\n-\n-  else if (shift > 0)\n+  if (shift > 0)\n     {\n       for (i = 0; i < delta; i++)\n \t{\n \t  if (bits[i] == 0)\n \t    mpz_clrbit (result->value.integer, i + shift);\n-\t  if (bits[i] == 1)\n+\t  else\n \t    mpz_setbit (result->value.integer, i + shift);\n \t}\n \n       for (i = delta; i < isize; i++)\n \t{\n \t  if (bits[i] == 0)\n \t    mpz_clrbit (result->value.integer, i - delta);\n-\t  if (bits[i] == 1)\n+\t  else\n \t    mpz_setbit (result->value.integer, i - delta);\n \t}\n-\n-      gfc_free (bits);\n-      return range_check (result, \"ISHFTC\");\n     }\n   else\n     {\n       for (i = 0; i < ashift; i++)\n \t{\n \t  if (bits[i] == 0)\n \t    mpz_clrbit (result->value.integer, i + delta);\n-\t  if (bits[i] == 1)\n+\t  else\n \t    mpz_setbit (result->value.integer, i + delta);\n \t}\n \n       for (i = ashift; i < isize; i++)\n \t{\n \t  if (bits[i] == 0)\n \t    mpz_clrbit (result->value.integer, i + shift);\n-\t  if (bits[i] == 1)\n+\t  else\n \t    mpz_setbit (result->value.integer, i + shift);\n \t}\n-\n-      gfc_free (bits);\n-      return range_check (result, \"ISHFTC\");\n     }\n+\n+  twos_complement (result->value.integer, isize);\n+\n+  gfc_free (bits);\n+  return result;\n }\n \n "}, {"sha": "99ba040467e86a1f7dd135b775e699893cdf0c40", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d24a9774e7e5e40c0b0394de971ac4d4d8c521f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d24a9774e7e5e40c0b0394de971ac4d4d8c521f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d24a9774e7e5e40c0b0394de971ac4d4d8c521f", "patch": "@@ -1,3 +1,8 @@\n+2004-10-06  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/17568\n+\t* gfortran.dg/ishft.f90: New test.\n+\t\n 2004-10-06  Paul Brook  <paul@codesourcery.com>\n \n \t* gfortran.dg/do_1.f90: New test."}, {"sha": "f37555671751bb30d0b4c26a43ab7e3927b4dfdf", "filename": "gcc/testsuite/gfortran.dg/ishft.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d24a9774e7e5e40c0b0394de971ac4d4d8c521f/gcc%2Ftestsuite%2Fgfortran.dg%2Fishft.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d24a9774e7e5e40c0b0394de971ac4d4d8c521f/gcc%2Ftestsuite%2Fgfortran.dg%2Fishft.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fishft.f90?ref=5d24a9774e7e5e40c0b0394de971ac4d4d8c521f", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do run }\n+! verifies basic functioning of the ishft and ishftc intrinsics\n+if (ishft (1_1, 0) /= 1) call abort\n+if (ishft (1_1, 1) /= 2) call abort\n+if (ishft (3_1, 1) /= 6) call abort\n+if (ishft (-1_1, 1) /= -2) call abort\n+if (ishft (-1_1, -1) /= 127) call abort\n+if (ishft (96_1, 2) /= -128_2) call abort\n+\n+if (ishft (1_2, 0) /= 1) call abort\n+if (ishft (1_2, 1) /= 2) call abort\n+if (ishft (3_2, 1) /= 6) call abort\n+if (ishft (-1_2, 1) /= -2) call abort\n+if (ishft (-1_2, -1) /= 32767) call abort\n+if (ishft (16384_2 + 8192_2, 2) /= -32768_4) call abort\n+\n+if (ishft (1_4, 0) /= 1) call abort\n+if (ishft (1_4, 1) /= 2) call abort\n+if (ishft (3_4, 1) /= 6) call abort\n+if (ishft (-1_4, 1) /= -2) call abort\n+if (ishft (-1_4, -1) /= 2147483647) call abort\n+if (ishft (1073741824_4 + 536870912_4, 2) /= -2147483648_8) call abort\n+\n+if (ishftc (1_1, 0) /= 1) call abort\n+if (ishftc (1_1, 1) /= 2) call abort\n+if (ishftc (3_1, 1) /= 6) call abort\n+if (ishftc (-1_1, 1) /= -1) call abort\n+if (ishftc (-1_1, -1) /= -1) call abort\n+if (ishftc (ishftc (96_1, 2), -2) /= 96) call abort\n+\n+if (ishftc (1_2, 0) /= 1) call abort\n+if (ishftc (1_2, 1) /= 2) call abort\n+if (ishftc (3_2, 1) /= 6) call abort\n+if (ishftc (-1_2, 1) /= -1) call abort\n+if (ishftc (-1_2, -1) /= -1) call abort\n+if (ishftc (ishftc (25000_2, 2), -2) /= 25000) call abort\n+\n+if (ishftc (1_4, 0) /= 1) call abort\n+if (ishftc (1_4, 1) /= 2) call abort\n+if (ishftc (3_4, 1) /= 6) call abort\n+if (ishftc (-1_4, 1) /= -1) call abort\n+if (ishftc (-1_4, -1) /= -1) call abort\n+if (ishftc (ishftc (1325876_4, 2), -2) /= 1325876) call abort\n+end"}]}