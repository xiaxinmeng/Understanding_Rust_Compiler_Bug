{"sha": "3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4YzA0ZTczY2Q1MGQzNGQyYjlmNDEyOGM2MTVkYmQzNWE2ZTQwYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-27T11:50:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-27T11:50:29Z"}, "message": "[multiple changes]\n\n2015-10-27  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_util.ads, sem_util.adb (Defining_Identifier): Adding a formal to\n\tindicate the needed behavior in case of nodes with errors.\n\n2015-10-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Eval_Attribute): If the prefix of attribute\n\tEnum_Rep is an object that is a generated loop variable for an\n\telement iterator, no folding is possible.\n\t* sem_res.adb (Resolve_Entity_Name): Do not check for a missing\n\tinitialization in the case of a constant that is an object\n\trenaming.\n\t* exp_attr.adb (Expand_N_Attribute_Reference, case Enum_Rep):\n\tIf the prefix is a constant that renames an expression there is\n\tnothing to evaluate statically.\n\n2015-10-27  Vincent Celier  <celier@adacore.com>\n\n\t* gnatlink.adb: Always delete the response file, even when the\n\tinvocation of gcc to link failed.\n\n2015-10-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper):\n\tDo not inherit the SPARK_Mode from the context if it has been\n\tset already.\n\t(Build_Subprogram_Declaration): Relocate relevant\n\tpragmas from the subprogram body to the generated corresponding\n\tspec. Do not copy aspect SPARK_Mode as this leads to circularity\n\tin Copy_Separate_Tree. Inherit the attributes that describe\n\tpragmas Ghost and SPARK_Mode.\n\t(Move_Pragmas): New routine.\n\nFrom-SVN: r229421", "tree": {"sha": "2f1225e96583feab0f21bc963d590f85e1ce0444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f1225e96583feab0f21bc963d590f85e1ce0444"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a/comments", "author": null, "committer": null, "parents": [{"sha": "2bfad6eb411319a475bf7c5f5ffd79fe06780084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bfad6eb411319a475bf7c5f5ffd79fe06780084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bfad6eb411319a475bf7c5f5ffd79fe06780084"}], "stats": {"total": 200, "additions": 162, "deletions": 38}, "files": [{"sha": "59ed03f170f3c0967c754d9cc45f32eb6821ef82", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a", "patch": "@@ -1,3 +1,37 @@\n+2015-10-27  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Defining_Identifier): Adding a formal to\n+\tindicate the needed behavior in case of nodes with errors.\n+\n+2015-10-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Eval_Attribute): If the prefix of attribute\n+\tEnum_Rep is an object that is a generated loop variable for an\n+\telement iterator, no folding is possible.\n+\t* sem_res.adb (Resolve_Entity_Name): Do not check for a missing\n+\tinitialization in the case of a constant that is an object\n+\trenaming.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference, case Enum_Rep):\n+\tIf the prefix is a constant that renames an expression there is\n+\tnothing to evaluate statically.\n+\n+2015-10-27  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatlink.adb: Always delete the response file, even when the\n+\tinvocation of gcc to link failed.\n+\n+2015-10-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper):\n+\tDo not inherit the SPARK_Mode from the context if it has been\n+\tset already.\n+\t(Build_Subprogram_Declaration): Relocate relevant\n+\tpragmas from the subprogram body to the generated corresponding\n+\tspec. Do not copy aspect SPARK_Mode as this leads to circularity\n+\tin Copy_Separate_Tree. Inherit the attributes that describe\n+\tpragmas Ghost and SPARK_Mode.\n+\t(Move_Pragmas): New routine.\n+\n 2015-10-27  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* inline.adb (Is_Expression_Function): Removed."}, {"sha": "cb64c39230e4821170caa493806e2fafc3df9955", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a", "patch": "@@ -2995,10 +2995,12 @@ package body Exp_Attr is\n               Make_Integer_Literal (Loc, Enumeration_Rep (Entity (Pref))));\n \n          --  If this is a renaming of a literal, recover the representation\n-         --  of the original.\n+         --  of the original. If it renames an expression there is nothing\n+         --  to fold.\n \n          elsif Ekind (Entity (Pref)) = E_Constant\n            and then Present (Renamed_Object (Entity (Pref)))\n+           and then Is_Entity_Name (Renamed_Object (Entity (Pref)))\n            and then Ekind (Entity (Renamed_Object (Entity (Pref)))) =\n                       E_Enumeration_Literal\n          then"}, {"sha": "f0eb7e973f3c71fbe8124c78a88c09bce14afc09", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a", "patch": "@@ -1859,6 +1859,10 @@ begin\n    --  been compiled.\n \n    if Opt.CodePeer_Mode then\n+      if Tname_FD /= Invalid_FD then\n+         Delete (Tname);\n+      end if;\n+\n       return;\n    end if;\n \n@@ -2052,16 +2056,14 @@ begin\n \n          System.OS_Lib.Spawn (Linker_Path.all, Args, Success);\n \n-         if Success then\n+         --  Delete the temporary file used in conjunction with linking if one\n+         --  was created. See Process_Bind_File for details.\n \n-            --  Delete the temporary file used in conjunction with linking\n-            --  if one was created. See Process_Bind_File for details.\n-\n-            if Tname_FD /= Invalid_FD then\n-               Delete (Tname);\n-            end if;\n+         if Tname_FD /= Invalid_FD then\n+            Delete (Tname);\n+         end if;\n \n-         else\n+         if not Success then\n             Error_Msg (\"error when calling \" & Linker_Path.all);\n             Exit_Program (E_Fatal);\n          end if;"}, {"sha": "7112869f4a8f1f372b65eaf138ab70521c27b1b3", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a", "patch": "@@ -7286,9 +7286,14 @@ package body Sem_Attr is\n             if Is_Entity_Name (P) then\n \n                --  The prefix denotes a constant or an enumeration literal, the\n-               --  attribute can be folded.\n+               --  attribute can be folded. A generated loop variable for an\n+               --  iterator is a constant, but cannot be constant-folded.\n \n-               if Ekind_In (Entity (P), E_Constant, E_Enumeration_Literal) then\n+               if Ekind (Entity (P)) = E_Enumeration_Literal\n+                 or else\n+                   (Ekind (Entity (P)) = E_Constant\n+                     and then Ekind (Scope (Entity (P))) /= E_Loop)\n+               then\n                   P_Entity := Etype (P);\n \n                --  The prefix denotes an enumeration type. Folding can occur"}, {"sha": "8a86d4465b760f78801d02ac032c97d47c76f287", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 73, "deletions": 20, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a", "patch": "@@ -2364,10 +2364,57 @@ package body Sem_Ch6 is\n       ----------------------------------\n \n       procedure Build_Subprogram_Declaration is\n-         Asp       : Node_Id;\n+         procedure Move_Pragmas (From : Node_Id; To : Node_Id);\n+         --  Relocate certain categorization pragmas from the declarative list\n+         --  of subprogram body From and insert them after node To. The pragmas\n+         --  in question are:\n+         --    Ghost\n+         --    SPARK_Mode\n+         --    Volatile_Function\n+\n+         ------------------\n+         -- Move_Pragmas --\n+         ------------------\n+\n+         procedure Move_Pragmas (From : Node_Id; To : Node_Id) is\n+            Decl      : Node_Id;\n+            Next_Decl : Node_Id;\n+\n+         begin\n+            pragma Assert (Nkind (From) = N_Subprogram_Body);\n+\n+            --  The destination node must be part of a list as the pragmas are\n+            --  inserted after it.\n+\n+            pragma Assert (Is_List_Member (To));\n+\n+            --  Inspect the declarations of the subprogram body looking for\n+            --  specific pragmas.\n+\n+            Decl := First (Declarations (N));\n+            while Present (Decl) loop\n+               Next_Decl := Next (Decl);\n+\n+               if Nkind (Decl) = N_Pragma\n+                 and then Nam_In (Pragma_Name (Decl), Name_Ghost,\n+                                                      Name_SPARK_Mode,\n+                                                      Name_Volatile_Function)\n+               then\n+                  Remove (Decl);\n+                  Insert_After (To, Decl);\n+               end if;\n+\n+               Decl := Next_Decl;\n+            end loop;\n+         end Move_Pragmas;\n+\n+         --  Local variables\n+\n          Decl      : Node_Id;\n          Subp_Decl : Node_Id;\n \n+      --  Start of processing for Build_Subprogram_Declaration\n+\n       begin\n          --  Create a matching subprogram spec using the profile of the body.\n          --  The structure of the tree is identical, but has new entities for\n@@ -2378,15 +2425,17 @@ package body Sem_Ch6 is\n              Specification => Copy_Subprogram_Spec (Body_Spec));\n          Set_Comes_From_Source (Subp_Decl, True);\n \n-         --  Relocate the aspects of the subprogram body to the new subprogram\n-         --  spec because it acts as the initial declaration.\n-         --  ??? what about pragmas\n+         --  Relocate the aspects and relevant pragmas from the subprogram body\n+         --  to the generated spec because it acts as the initial declaration.\n \n+         Insert_Before (N, Subp_Decl);\n          Move_Aspects (N, To => Subp_Decl);\n-         Insert_Before_And_Analyze (N, Subp_Decl);\n+         Move_Pragmas (N, To => Subp_Decl);\n+\n+         Analyze (Subp_Decl);\n \n-         --  The analysis of the subprogram spec aspects may introduce pragmas\n-         --  that need to be analyzed.\n+         --  Analyze any relocated source pragmas or pragmas created for aspect\n+         --  specifications.\n \n          Decl := Next (Subp_Decl);\n          while Present (Decl) loop\n@@ -2412,24 +2461,25 @@ package body Sem_Ch6 is\n \n          Set_Comes_From_Source (Spec_Id, True);\n \n-         --  If aspect SPARK_Mode was specified on the body, it needs to be\n-         --  repeated both on the generated spec and the body.\n-\n-         Asp := Find_Aspect (Spec_Id, Aspect_SPARK_Mode);\n-\n-         if Present (Asp) then\n-            Asp := New_Copy_Tree (Asp);\n-            Set_Analyzed (Asp, False);\n-            Set_Aspect_Specifications (N, New_List (Asp));\n-         end if;\n-\n          --  Ensure that the specs of the subprogram declaration and its body\n          --  are identical, otherwise they will appear non-conformant due to\n          --  rewritings in the default values of formal parameters.\n \n          Body_Spec := Copy_Subprogram_Spec (Body_Spec);\n          Set_Specification (N, Body_Spec);\n          Body_Id := Analyze_Subprogram_Specification (Body_Spec);\n+\n+         --  Ensure that the generated corresponding spec and original body\n+         --  share the same Ghost and SPARK_Mode attributes.\n+\n+         Set_Is_Checked_Ghost_Entity\n+           (Body_Id, Is_Checked_Ghost_Entity (Spec_Id));\n+         Set_Is_Ignored_Ghost_Entity\n+           (Body_Id, Is_Ignored_Ghost_Entity (Spec_Id));\n+\n+         Set_SPARK_Pragma (Body_Id, SPARK_Pragma (Spec_Id));\n+         Set_SPARK_Pragma_Inherited\n+           (Body_Id, SPARK_Pragma_Inherited (Spec_Id));\n       end Build_Subprogram_Declaration;\n \n       ----------------------------\n@@ -3525,9 +3575,12 @@ package body Sem_Ch6 is\n            (Body_Id, SPARK_Pragma_Inherited (Prev_Id));\n \n       --  Set the SPARK_Mode from the current context (may be overwritten later\n-      --  with explicit pragma).\n+      --  with explicit pragma). Exclude the case where the SPARK_Mode appears\n+      --  initially on a stand alone subprogram body, but is then relocated to\n+      --  a generated corresponding spec. In this scenario the mode is shared\n+      --  between the spec and body.\n \n-      else\n+      elsif No (SPARK_Pragma (Body_Id)) then\n          Set_SPARK_Pragma (Body_Id, SPARK_Mode_Pragma);\n          Set_SPARK_Pragma_Inherited (Body_Id);\n       end if;"}, {"sha": "b82fd6f4adbb925c441a8b2955cf975e350a54be", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a", "patch": "@@ -7158,14 +7158,16 @@ package body Sem_Res is\n       else\n          --  A deferred constant that appears in an expression must have a\n          --  completion, unless it has been removed by in-place expansion of\n-         --  an aggregate.\n+         --  an aggregate. A constant that is a renaming does not need\n+         --  initialization.\n \n          if Ekind (E) = E_Constant\n            and then Comes_From_Source (E)\n            and then No (Constant_Value (E))\n            and then Is_Frozen (Etype (E))\n            and then not In_Spec_Expression\n            and then not Is_Imported (E)\n+           and then Nkind (Parent (E)) /= N_Object_Renaming_Declaration\n          then\n             if No_Initialization (Parent (E))\n               or else (Present (Full_View (E))"}, {"sha": "89332c44b8c43336676ab3c8f99bdd27da277fd9", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a", "patch": "@@ -4950,7 +4950,10 @@ package body Sem_Util is\n    -- Defining_Entity --\n    ---------------------\n \n-   function Defining_Entity (N : Node_Id) return Entity_Id is\n+   function Defining_Entity\n+     (N               : Node_Id;\n+      Empty_On_Errors : Boolean := False) return Entity_Id\n+   is\n       Err : Entity_Id := Empty;\n \n    begin\n@@ -5028,10 +5031,14 @@ package body Sem_Util is\n                --  can continue semantic analysis.\n \n                elsif Nam = Error then\n-                  Err := Make_Temporary (Sloc (N), 'T');\n-                  Set_Defining_Unit_Name (N, Err);\n+                  if Empty_On_Errors then\n+                     return Empty;\n+                  else\n+                     Err := Make_Temporary (Sloc (N), 'T');\n+                     Set_Defining_Unit_Name (N, Err);\n \n-                  return Err;\n+                     return Err;\n+                  end if;\n \n                --  If not an entity, get defining identifier\n \n@@ -5045,7 +5052,11 @@ package body Sem_Util is\n             return Entity (Identifier (N));\n \n          when others =>\n-            raise Program_Error;\n+            if Empty_On_Errors then\n+               return Empty;\n+            else\n+               raise Program_Error;\n+            end if;\n \n       end case;\n    end Defining_Entity;"}, {"sha": "411798ed06a2080495c6b71c32509eaaf4b667e6", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a", "patch": "@@ -456,7 +456,9 @@ package Sem_Util is\n    --  in the case of a descendant of a generic formal type (returns Int'Last\n    --  instead of 0).\n \n-   function Defining_Entity (N : Node_Id) return Entity_Id;\n+   function Defining_Entity\n+     (N               : Node_Id;\n+      Empty_On_Errors : Boolean := False) return Entity_Id;\n    --  Given a declaration N, returns the associated defining entity. If the\n    --  declaration has a specification, the entity is obtained from the\n    --  specification. If the declaration has a defining unit name, then the\n@@ -467,6 +469,19 @@ package Sem_Util is\n    --  local entities declared during loop expansion. These entities need\n    --  debugging information, generated through Qualify_Entity_Names, and\n    --  the loop declaration must be placed in the table Name_Qualify_Units.\n+   --\n+   --  Set flag Empty_On_Error to change the behavior of this routine as\n+   --  follows:\n+   --\n+   --    * True  - A declaration that lacks a defining entity returns Empty.\n+   --      A node that does not allow for a defining entity returns Empty.\n+   --\n+   --    * False - A declaration that lacks a defining entity is given a new\n+   --      internally generated entity which is subsequently returned. A node\n+   --      that does not allow for a defining entity raises Program_Error.\n+   --\n+   --  The former semantic is appropriate for the backend; the latter semantic\n+   --  is appropriate for the frontend.\n \n    function Denotes_Discriminant\n      (N                : Node_Id;"}]}