{"sha": "6283ba266f3f633712cfdf2ebe68010f2187513a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI4M2JhMjY2ZjNmNjMzNzEyY2ZkZjJlYmU2ODAxMGYyMTg3NTEzYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-06-29T00:32:25Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-06-29T00:32:25Z"}, "message": "ia64.c (ia64_expand_vecint_compare): Decompose to EQ when using psubN.uuu.\n\n        * config/ia64/ia64.c (ia64_expand_vecint_compare): Decompose to EQ\n        when using psubN.uuu.\n\nFrom-SVN: r101405", "tree": {"sha": "da67355587399ea84200b3dbdbc8ce925675704f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da67355587399ea84200b3dbdbc8ce925675704f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6283ba266f3f633712cfdf2ebe68010f2187513a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6283ba266f3f633712cfdf2ebe68010f2187513a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6283ba266f3f633712cfdf2ebe68010f2187513a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6283ba266f3f633712cfdf2ebe68010f2187513a/comments", "author": null, "committer": null, "parents": [{"sha": "a415a2505de0a3858eeab1c57bb31cae49069a15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a415a2505de0a3858eeab1c57bb31cae49069a15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a415a2505de0a3858eeab1c57bb31cae49069a15"}], "stats": {"total": 248, "additions": 243, "deletions": 5}, "files": [{"sha": "bd0a65ca5fdf6dd7ae28ccbb91f76a7c50aa93ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6283ba266f3f633712cfdf2ebe68010f2187513a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6283ba266f3f633712cfdf2ebe68010f2187513a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6283ba266f3f633712cfdf2ebe68010f2187513a", "patch": "@@ -1,3 +1,8 @@\n+2005-06-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ia64/ia64.c (ia64_expand_vecint_compare): Decompose to EQ\n+\twhen using psubN.uuu.\n+\n 2005-06-29  Kelley Cook <kcook@gcc.gnu.org>\n \n \t* doc/gcc.texi: Update FSF address."}, {"sha": "85d0bd22cd8cc6d7accc2bb56066478c1e074105", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6283ba266f3f633712cfdf2ebe68010f2187513a/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6283ba266f3f633712cfdf2ebe68010f2187513a/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=6283ba266f3f633712cfdf2ebe68010f2187513a", "patch": "@@ -1568,7 +1568,7 @@ ia64_expand_vecint_compare (enum rtx_code code, enum machine_mode mode,\n     }\n \n   /* Unsigned parallel compare is not supported by the hardware.  Play some\n-     tricks to turn this into a GT comparison against 0.  */\n+     tricks to turn this into a signed comparison against 0.  */\n   if (code == GTU)\n     {\n       switch (mode)\n@@ -1592,6 +1592,10 @@ ia64_expand_vecint_compare (enum rtx_code code, enum machine_mode mode,\n \t       in the sign bit set iff we saw unsigned underflow.  */\n \t    x = gen_reg_rtx (V2SImode);\n \t    emit_insn (gen_xorv2si3 (x, t1, t2));\n+\n+\t    code = GT;\n+\t    op0 = x;\n+\t    op1 = CONST0_RTX (mode);\n \t  }\n \t  break;\n \n@@ -1601,15 +1605,16 @@ ia64_expand_vecint_compare (enum rtx_code code, enum machine_mode mode,\n \t  x = gen_reg_rtx (mode);\n \t  emit_insn (gen_rtx_SET (VOIDmode, x,\n \t\t\t\t  gen_rtx_US_MINUS (mode, op0, op1)));\n+\n+\t  code = EQ;\n+\t  op0 = x;\n+\t  op1 = CONST0_RTX (mode);\n+\t  negate = !negate;\n \t  break;\n \n \tdefault:\n \t  gcc_unreachable ();\n \t}\n-\n-      code = GT;\n-      op0 = x;\n-      op1 = CONST0_RTX (mode);\n     }\n \n   x = gen_rtx_fmt_ee (code, mode, op0, op1);"}, {"sha": "a7329df14b986a3d9b8a2762e6b7945397e293bd", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-7.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6283ba266f3f633712cfdf2ebe68010f2187513a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6283ba266f3f633712cfdf2ebe68010f2187513a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-7.c?ref=6283ba266f3f633712cfdf2ebe68010f2187513a", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 32\n+\n+extern void abort (void);\n+typedef unsigned char T;\n+\n+void\n+testmax (const T *c, T init, T result)\n+{\n+  T lc[N], accum = init;\n+  int i;\n+\n+  __builtin_memcpy (lc, c, sizeof(lc));\n+\n+  for (i = 0; i < N; i++) {\n+    accum = accum < lc[i] ? lc[i] : accum;\n+  }\n+\n+  if (accum != result)\n+    abort ();\n+}\n+\n+void\n+testmin (const T *c, T init, T result)\n+{\n+  T lc[N], accum = init;\n+  int i;\n+\n+  __builtin_memcpy (lc, c, sizeof(lc));\n+\n+  for (i = 0; i < N; i++) {\n+    accum = accum > lc[i] ? lc[i] : accum;\n+  }\n+\n+  if (accum != result)\n+    abort ();\n+}\n+\n+int main (void)\n+{ \n+  static unsigned char const A[N] = {\n+    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,\n+    0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,\n+    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n+    0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f\n+  };\n+\n+  static unsigned char const B[N] = {\n+    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n+    0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,\n+    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,\n+    0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f\n+  };\n+\n+  static unsigned char const C[N] = {\n+    0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8,\n+    0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,\n+    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,\n+    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n+  };\n+\n+  check_vect ();\n+  \n+  testmin (A, 10, 1);\n+  testmin (B, 0x7f, 0x70);\n+  testmin (C, 0x7f, 0x09);\n+\n+  testmax (A, 0, 0x7f);\n+  testmax (B, 0, 0x8f);\n+  testmax (C, 0, 0xff);\n+\n+  return 0;\n+}"}, {"sha": "090b1c67fbd5acb2c263e6a136f640ff5e25626b", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-8.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6283ba266f3f633712cfdf2ebe68010f2187513a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6283ba266f3f633712cfdf2ebe68010f2187513a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-8.c?ref=6283ba266f3f633712cfdf2ebe68010f2187513a", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 32\n+\n+extern void abort (void);\n+typedef signed char T;\n+\n+void\n+testmax (const T *c, T init, T result)\n+{\n+  T lc[N], accum = init;\n+  int i;\n+\n+  __builtin_memcpy (lc, c, sizeof(lc));\n+\n+  for (i = 0; i < N; i++) {\n+    accum = accum < lc[i] ? lc[i] : accum;\n+  }\n+\n+  if (accum != result)\n+    abort ();\n+}\n+\n+void\n+testmin (const T *c, T init, T result)\n+{\n+  T lc[N], accum = init;\n+  int i;\n+\n+  __builtin_memcpy (lc, c, sizeof(lc));\n+\n+  for (i = 0; i < N; i++) {\n+    accum = accum > lc[i] ? lc[i] : accum;\n+  }\n+\n+  if (accum != result)\n+    abort ();\n+}\n+\n+int main (void)\n+{ \n+  static signed char const A[N] = {\n+    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,\n+    0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,\n+    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n+    0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f\n+  };\n+\n+  static signed char const B[N] = {\n+    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n+    0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,\n+    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,\n+    0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f\n+  };\n+\n+  static signed char const C[N] = {\n+    0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8,\n+    0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,\n+    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,\n+    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n+  };\n+\n+  check_vect ();\n+  \n+  testmin (A, 0, 0);\n+  testmin (B, 0, 0x80);\n+  testmin (C, 0, 0x80);\n+\n+  testmax (A, 0, 0x7f);\n+  testmax (B, 0, 0x7f);\n+  testmax (C, 0, 0x77);\n+\n+  return 0;\n+}"}, {"sha": "5b89289a7ee69f0ae11f3d337b8a03a7b26ed05a", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-9.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6283ba266f3f633712cfdf2ebe68010f2187513a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6283ba266f3f633712cfdf2ebe68010f2187513a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-9.c?ref=6283ba266f3f633712cfdf2ebe68010f2187513a", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 32\n+\n+extern void abort (void);\n+typedef unsigned short T;\n+\n+void\n+testmax (const T *c, T init, T result)\n+{\n+  T lc[N], accum = init;\n+  int i;\n+\n+  __builtin_memcpy (lc, c, sizeof(lc));\n+\n+  for (i = 0; i < N; i++) {\n+    accum = accum < lc[i] ? lc[i] : accum;\n+  }\n+\n+  if (accum != result)\n+    abort ();\n+}\n+\n+void\n+testmin (const T *c, T init, T result)\n+{\n+  T lc[N], accum = init;\n+  int i;\n+\n+  __builtin_memcpy (lc, c, sizeof(lc));\n+\n+  for (i = 0; i < N; i++) {\n+    accum = accum > lc[i] ? lc[i] : accum;\n+  }\n+\n+  if (accum != result)\n+    abort ();\n+}\n+\n+int main (void)\n+{ \n+  static unsigned short const A[N] = {\n+    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008,\n+    0x0009, 0x000a, 0x000b, 0x000c, 0x000d, 0x000e, 0x000f, 0x0010,\n+    0x7000, 0x7100, 0x7200, 0x7300, 0x7400, 0x7500, 0x7600, 0x7700,\n+    0x7ff8, 0x7ff9, 0x7ffa, 0x7ffb, 0x7ffc, 0x7ffd, 0x7ffe, 0x7fff\n+  };\n+\n+  static unsigned short const B[N] = {\n+    0x7000, 0x7100, 0x7200, 0x7300, 0x7400, 0x7500, 0x7600, 0x7700,\n+    0x7ff8, 0x7ff9, 0x7ffa, 0x7ffb, 0x7ffc, 0x7ffd, 0x7ffe, 0x7fff,\n+    0x8000, 0x8001, 0x8002, 0x8003, 0x8004, 0x8005, 0x8006, 0x8007,\n+    0x8008, 0x8009, 0x800a, 0x800b, 0x800c, 0x800d, 0x800e, 0x800f\n+  };\n+\n+  static unsigned short const C[N] = {\n+    0xffff, 0xfffe, 0xfffd, 0xfffc, 0xfffb, 0xfffa, 0xfff9, 0xfff8,\n+    0x0009, 0x000a, 0x000b, 0x000c, 0x000d, 0x000e, 0x000f, 0x0010,\n+    0x8000, 0x8001, 0x8002, 0x8003, 0x8004, 0x8005, 0x8006, 0x8007,\n+    0x7000, 0x7100, 0x7200, 0x7300, 0x7400, 0x7500, 0x7600, 0x7700,\n+  };\n+\n+  check_vect ();\n+  \n+  testmin (A, 10, 1);\n+  testmin (B, 0x7fff, 0x7000);\n+  testmin (C, 0x7fff, 0x0009);\n+\n+  testmax (A, 0, 0x7fff);\n+  testmax (B, 0, 0x800f);\n+  testmax (C, 0, 0xffff);\n+\n+  return 0;\n+}"}]}