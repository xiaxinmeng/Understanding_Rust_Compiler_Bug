{"sha": "2c4caf0ab956d49f57544fd65c93dbbd60123eff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM0Y2FmMGFiOTU2ZDQ5ZjU3NTQ0ZmQ2NWM5M2RiYmQ2MDEyM2VmZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2011-08-03T21:05:14Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-08-03T21:05:14Z"}, "message": "tuple: Mark more constructors constexpr.\n\n2011-08-03  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/tuple: Mark more constructors constexpr.\n\t* testsuite/20_util/tuple/cons/constexpr.cc: Split into and extend as:\n\t* testsuite/20_util/tuple/cons/constexpr-2.cc: ...this.\n\t* testsuite/20_util/tuple/cons/constexpr-3.cc: ... and this.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust line numbers.\n\n2011-08-03  Benjamin Kosnik  <bkoz@redhat.com>\n\t    Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n\n\t* testsuite/23_containers/array/at_neg.cc: Move...\n\t* testsuite/23_containers/array/at.cc: ...here. Remove\n\t-fno-exceptions, call const at member function.\n\n\nCo-Authored-By: Fran\u00e7ois Dumont <francois.cppdevs@free.fr>\n\nFrom-SVN: r177299", "tree": {"sha": "e5d3f09d63186c6d603026ac7fccb8e4e1509cb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5d3f09d63186c6d603026ac7fccb8e4e1509cb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c4caf0ab956d49f57544fd65c93dbbd60123eff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c4caf0ab956d49f57544fd65c93dbbd60123eff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c4caf0ab956d49f57544fd65c93dbbd60123eff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c4caf0ab956d49f57544fd65c93dbbd60123eff/comments", "author": null, "committer": null, "parents": [{"sha": "4ac2beb541f2e753192e2fb1f8644bd18c0e44a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ac2beb541f2e753192e2fb1f8644bd18c0e44a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ac2beb541f2e753192e2fb1f8644bd18c0e44a8"}], "stats": {"total": 188, "additions": 149, "deletions": 39}, "files": [{"sha": "e42879203f5ca157b4bd7994e9c799bf954eed03", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c4caf0ab956d49f57544fd65c93dbbd60123eff/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c4caf0ab956d49f57544fd65c93dbbd60123eff/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2c4caf0ab956d49f57544fd65c93dbbd60123eff", "patch": "@@ -1,3 +1,18 @@\n+2011-08-03  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/tuple: Mark more constructors constexpr.\n+\t* testsuite/20_util/tuple/cons/constexpr.cc: Split into and extend as:\n+\t* testsuite/20_util/tuple/cons/constexpr-2.cc: ...this.\n+\t* testsuite/20_util/tuple/cons/constexpr-3.cc: ... and this.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust line numbers.\n+\n+2011-08-03  Benjamin Kosnik  <bkoz@redhat.com>\n+\t    Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n+\n+\t* testsuite/23_containers/array/at_neg.cc: Move...\n+\t* testsuite/23_containers/array/at.cc: ...here. Remove\n+\t-fno-exceptions, call const at member function.\n+\n 2011-08-01  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/abi/post/x86_64-linux-gnu/x32/baseline_symbols.txt: Generated."}, {"sha": "1636552b177a5d563dbb346c1cdd6e8639037d9e", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c4caf0ab956d49f57544fd65c93dbbd60123eff/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c4caf0ab956d49f57544fd65c93dbbd60123eff/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=2c4caf0ab956d49f57544fd65c93dbbd60123eff", "patch": "@@ -114,7 +114,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UHead, typename = typename\n \t       enable_if<!is_convertible<_UHead,\n \t                                 __uses_alloc_base>::value>::type>\n-        _Head_base(_UHead&& __h)\n+        constexpr _Head_base(_UHead&& __h)\n \t: _Head(std::forward<_UHead>(__h)) { }\n \n       _Head_base(__uses_alloc0)\n@@ -140,8 +140,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)\n \t: _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }\n \n-      _Head&       _M_head() noexcept       { return *this; }\n-      const _Head& _M_head() const noexcept { return *this; }\n+      _Head&       \n+      _M_head() noexcept { return *this; }\n+\n+      const _Head& \n+      _M_head() const noexcept { return *this; }\n     };\n \n   template<std::size_t _Idx, typename _Head>\n@@ -156,7 +159,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UHead, typename = typename\n \t       enable_if<!is_convertible<_UHead,\n \t                                 __uses_alloc_base>::value>::type>\n-        _Head_base(_UHead&& __h)\n+        constexpr _Head_base(_UHead&& __h)\n \t: _M_head_impl(std::forward<_UHead>(__h)) { }\n \n       _Head_base(__uses_alloc0)\n@@ -183,8 +186,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)\n \t: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }\n \n-      _Head&       _M_head() noexcept       { return _M_head_impl; }\n-      const _Head& _M_head() const noexcept { return _M_head_impl; }        \n+      _Head&       \n+      _M_head() noexcept { return _M_head_impl; }\n+\n+      const _Head& \n+      _M_head() const noexcept { return _M_head_impl; }        \n \n       _Head _M_head_impl; \n     };\n@@ -239,11 +245,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;\n       typedef _Head_base<_Idx, _Head, std::is_empty<_Head>::value> _Base;\n \n-      _Head&            _M_head() noexcept       { return _Base::_M_head(); }\n-      const _Head&      _M_head() const noexcept { return _Base::_M_head(); }\n+      _Head&            \n+      _M_head() noexcept { return _Base::_M_head(); }\n+\n+      const _Head&      \n+      _M_head() const noexcept { return _Base::_M_head(); }\n \n-      _Inherited&       _M_tail() noexcept       { return *this; }\n-      const _Inherited& _M_tail() const noexcept { return *this; }\n+      _Inherited&       \n+      _M_tail() noexcept { return *this; }\n+\n+      const _Inherited& \n+      _M_tail() const noexcept { return *this; }\n \n       constexpr _Tuple_impl()\n       : _Inherited(), _Base() { }\n@@ -255,7 +267,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UHead, typename... _UTail, typename = typename\n                enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> \n         explicit\n-        _Tuple_impl(_UHead&& __head, _UTail&&... __tail)\n+        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)\n \t: _Inherited(std::forward<_UTail>(__tail)...),\n \t  _Base(std::forward<_UHead>(__head)) { }\n \n@@ -371,7 +383,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     };\n \n-  /// tuple\n+  /// Primary class template, tuple\n   template<typename... _Elements> \n     class tuple : public _Tuple_impl<0, _Elements...>\n     {\n@@ -392,10 +404,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t   __conv_types<_Elements...>>\n \t\t\t >::value>::type>\n \texplicit\n-        tuple(_UElements&&... __elements)\n+        constexpr tuple(_UElements&&... __elements)\n \t: _Inherited(std::forward<_UElements>(__elements)...) {\t}\n \n       constexpr tuple(const tuple&) = default;\n+\n       tuple(tuple&&) = default;\n \n       template<typename... _UElements, typename = typename\n@@ -417,7 +430,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         tuple(tuple<_UElements...>&& __in)\n         : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }\n \n-      // allocator-extended constructors\n+      // Allocator-extended constructors.\n \n       template<typename _Alloc>\n \ttuple(allocator_arg_t __tag, const _Alloc& __a)\n@@ -503,14 +516,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { _Inherited::_M_swap(__in); }\n     };\n \n+  // Explicit specialization, zero-element tuple.\n   template<>  \n     class tuple<>\n     {\n     public:\n       void swap(tuple&) noexcept { /* no-op */ }\n     };\n \n-  /// tuple (2-element), with construction and assignment from a pair.\n+  /// Partial specialization, 2-element tuple.\n+  /// Includes construction and assignment from a pair.\n   template<typename _T1, typename _T2>\n     class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>\n     {\n@@ -528,10 +543,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       enable_if<__and_<is_convertible<_U1, _T1>,\n \t\t\t\tis_convertible<_U2, _T2>>::value>::type>\n         explicit\n-        tuple(_U1&& __a1, _U2&& __a2)\n+        constexpr tuple(_U1&& __a1, _U2&& __a2)\n \t: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }\n \n       constexpr tuple(const tuple&) = default;\n+\n       tuple(tuple&&) = default;\n \n       template<typename _U1, typename _U2, typename = typename\n@@ -549,7 +565,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _U1, typename _U2, typename = typename\n \tenable_if<__and_<is_convertible<const _U1&, _T1>,\n \t\t\t is_convertible<const _U2&, _T2>>::value>::type>\n-        tuple(const pair<_U1, _U2>& __in)\n+        constexpr tuple(const pair<_U1, _U2>& __in)\n \t: _Inherited(__in.first, __in.second) { }\n \n       template<typename _U1, typename _U2, typename = typename\n@@ -559,7 +575,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _Inherited(std::forward<_U1>(__in.first),\n \t\t     std::forward<_U2>(__in.second)) { }\n \n-      // allocator-extended constructors\n+      // Allocator-extended constructors.\n \n       template<typename _Alloc>\n \ttuple(allocator_arg_t __tag, const _Alloc& __a)"}, {"sha": "14577b0bc06570c4ea7a78fb478bd1556d7cfc7c", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/constexpr-2.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c4caf0ab956d49f57544fd65c93dbbd60123eff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstexpr-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c4caf0ab956d49f57544fd65c93dbbd60123eff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstexpr-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstexpr-2.cc?ref=2c4caf0ab956d49f57544fd65c93dbbd60123eff", "patch": "@@ -0,0 +1,63 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <testsuite_common_types.h>\n+\n+#include <iostream>\n+\n+// 2 element tuple\n+int main()\n+{\n+  typedef std::tuple<int, int> tuple_type;\n+\n+  // 01: default ctor\n+  __gnu_test::constexpr_default_constructible test1;\n+  test1.operator()<tuple_type>();\n+\n+  // 02: default copy ctor\n+  __gnu_test::constexpr_single_value_constructible test2;\n+  test2.operator()<tuple_type, tuple_type>();\n+\n+  // 03: element move ctor, single element\n+  const int i1(415);\n+  constexpr tuple_type t2 { 44, std::move(i1) };\n+\n+  // 04: element move ctor, two element\n+  const int i2(510);\n+  const int i3(408);\n+  constexpr tuple_type t4 { std::move(i2), std::move(i3) };\n+\n+  // 05: value-type conversion constructor\n+  const int i4(650);\n+  const int i5(310);\n+  constexpr tuple_type t8(i4, i5);\n+\n+  // 06: pair conversion ctor\n+  test2.operator()<tuple_type, std::pair<int, int>>();\n+  test2.operator()<std::tuple<short, short>, std::pair<int, int>>();\n+  test2.operator()<tuple_type, std::pair<short, short>>();\n+\n+  // 07: different-tuple-type conversion constructor\n+  // test2.operator()<tuple_type, std::tuple<short, short>>();\n+  // test2.operator()<std::tuple<short, short>, tuple_type>();\n+\n+  return 0;\n+}"}, {"sha": "7f8b2f93ecd99c5c0faaa4cc96f5894f3936881a", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/constexpr-3.cc", "status": "renamed", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c4caf0ab956d49f57544fd65c93dbbd60123eff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstexpr-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c4caf0ab956d49f57544fd65c93dbbd60123eff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstexpr-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstexpr-3.cc?ref=2c4caf0ab956d49f57544fd65c93dbbd60123eff", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -21,27 +21,40 @@\n #include <memory>\n #include <testsuite_common_types.h>\n \n+#include <iostream>\n+\n+// 3 element tuple\n int main()\n {\n+  typedef std::tuple<int, int, int> tuple_type;\n+\n+  // 01: default ctor\n   __gnu_test::constexpr_default_constructible test1;\n-  test1.operator()<std::tuple<int, int>>();\n+  test1.operator()<tuple_type>();\n \n+  // 02: default copy ctor\n   __gnu_test::constexpr_single_value_constructible test2;\n-  test2.operator()<std::tuple<int, int>, std::tuple<int, int>>();\n-  //  test2.operator()<std::tuple<int, int>, std::pair<short, short>>();\n-  //  test2.operator()<std::tuple<int>, std::tuple<short>>();\n-  //  test2.operator()<std::tuple<int, int>, std::tuple<short, short>>();\n-\n-  // test 3\n-  const int i1(129);\n-  const int i2(6);\n-  constexpr std::tuple<int, int> p3(i1, i2);\n-\n-  // test 4\n-  const int i3(415);\n-  const int i4(550);\n-  const int i5(6414);\n-  constexpr std::tuple<int, int, int, int, int> p4(i1, i2, i3, i4, i5);\n+  test2.operator()<tuple_type, tuple_type>();\n+\n+  // 03: element move ctor, single element\n+  const int i1(415);\n+  constexpr tuple_type t2 { 44, 55, std::move(i1) };\n+\n+  // 04: element move ctor, three element\n+  const int i2(510);\n+  const int i3(408);\n+  const int i4(650);\n+  constexpr tuple_type t4 { std::move(i2), std::move(i3), std::move(i4) };\n+\n+  // 05: value-type conversion constructor\n+  const int i5(310);\n+  const int i6(310);\n+  const int i7(310);\n+  constexpr tuple_type t8(i5, i6, i7);\n+\n+  // 06: different-tuple-type conversion constructor\n+  // test2.operator()<tuple_type, std::tuple<short, short, short>>();\n+  // test2.operator()<std::tuple<short, short, short>, tuple_type>();\n \n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/20_util/tuple/cons/constexpr.cc"}, {"sha": "b192c656f7955d62590018f151345e1384b30c67", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c4caf0ab956d49f57544fd65c93dbbd60123eff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c4caf0ab956d49f57544fd65c93dbbd60123eff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=2c4caf0ab956d49f57544fd65c93dbbd60123eff", "patch": "@@ -51,7 +51,7 @@ main()\n // { dg-warning \"note\" \"\" { target *-*-* } 485 }\n // { dg-warning \"note\" \"\" { target *-*-* } 479 }\n // { dg-warning \"note\" \"\" { target *-*-* } 468 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 813 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 829 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1055 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1049 }\n // { dg-warning \"note\" \"\" { target *-*-* } 341 }"}, {"sha": "449395206ccbe166474304066009005956a132a3", "filename": "libstdc++-v3/testsuite/23_containers/array/at.cc", "status": "renamed", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c4caf0ab956d49f57544fd65c93dbbd60123eff/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c4caf0ab956d49f57544fd65c93dbbd60123eff/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fat.cc?ref=2c4caf0ab956d49f57544fd65c93dbbd60123eff", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run { xfail *-*-* } }\n-// { dg-options \"-std=gnu++0x -fno-exceptions\" }\n+// { dg-options \"-std=gnu++0x\" }\n \n // Copyright (C) 2011 Free Software Foundation, Inc.\n //\n@@ -22,7 +22,10 @@\n \n int main()\n {\n-  std::array<int, 3> a{{1, 2, 3}};\n-  auto i = a.at(4); // expected behavior is to either throw or abort\n+  // Expected behavior is to either throw and have the uncaught\n+  // exception end up in a terminate handler which eventually exits,\n+  // or abort. (Depending on -fno-exceptions.)\n+  constexpr std::array<int, 3> a{{1, 2, 3}};\n+  auto i = a.at(4); \n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/23_containers/array/at_neg.cc"}]}