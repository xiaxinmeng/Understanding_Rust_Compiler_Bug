{"sha": "cfa9a96b646cc033dcda6a6303e0f702d4d44139", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZhOWE5NmI2NDZjYzAzM2RjZGE2YTYzMDNlMGY3MDJkNGQ0NDEzOQ==", "commit": {"author": {"name": "Chris Fairles", "email": "chris.fairles@gmail.com", "date": "2008-07-08T11:59:22Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-07-08T11:59:22Z"}, "message": "type_traits: Add common_type.\n\n2008-07-08  Chris Fairles  <chris.fairles@gmail.com>\n\n        * include/std/type_traits: Add common_type.\n        * testsuite/20_util/common_type/requirements/\n\texplicit_instantiation.cc: New.\n        * testsuite/20_util/common_type/requirements/\n\ttypedefs-1.cc: Likewise.\n\nFrom-SVN: r137618", "tree": {"sha": "ff71a5c32cd79d817b37d451e0f45a0794d58ab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff71a5c32cd79d817b37d451e0f45a0794d58ab8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfa9a96b646cc033dcda6a6303e0f702d4d44139", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfa9a96b646cc033dcda6a6303e0f702d4d44139", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfa9a96b646cc033dcda6a6303e0f702d4d44139", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfa9a96b646cc033dcda6a6303e0f702d4d44139/comments", "author": {"login": "chrisfearless", "id": 812000, "node_id": "MDQ6VXNlcjgxMjAwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/812000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisfearless", "html_url": "https://github.com/chrisfearless", "followers_url": "https://api.github.com/users/chrisfearless/followers", "following_url": "https://api.github.com/users/chrisfearless/following{/other_user}", "gists_url": "https://api.github.com/users/chrisfearless/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisfearless/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisfearless/subscriptions", "organizations_url": "https://api.github.com/users/chrisfearless/orgs", "repos_url": "https://api.github.com/users/chrisfearless/repos", "events_url": "https://api.github.com/users/chrisfearless/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisfearless/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5acba8a21a2fc1b9de73843bc59ff39d58a81a07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5acba8a21a2fc1b9de73843bc59ff39d58a81a07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5acba8a21a2fc1b9de73843bc59ff39d58a81a07"}], "stats": {"total": 207, "additions": 207, "deletions": 0}, "files": [{"sha": "da30a6a741e72423a4a47d4658869ee540ab2525", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfa9a96b646cc033dcda6a6303e0f702d4d44139/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfa9a96b646cc033dcda6a6303e0f702d4d44139/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cfa9a96b646cc033dcda6a6303e0f702d4d44139", "patch": "@@ -1,3 +1,11 @@\n+2008-07-08  Chris Fairles  <chris.fairles@gmail.com>\n+\n+        * include/std/type_traits: Add common_type.\n+        * testsuite/20_util/common_type/requirements/\n+\texplicit_instantiation.cc: New.\n+        * testsuite/20_util/common_type/requirements/\n+\ttypedefs-1.cc: Likewise.\n+\n 2008-07-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/lib/libstdc++.exp (check_v3_target_stdint): New."}, {"sha": "1a759187955ef4d3e21c2a99981c00c971839379", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfa9a96b646cc033dcda6a6303e0f702d4d44139/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfa9a96b646cc033dcda6a6303e0f702d4d44139/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=cfa9a96b646cc033dcda6a6303e0f702d4d44139", "patch": "@@ -551,6 +551,41 @@ namespace std\n   // Integral, but don't define.\n   template<>\n     struct make_signed<bool>;\n+\n+  template<typename... _Tp>\n+    struct common_type;\n+\n+  template<typename _Tp>\n+    struct common_type<_Tp>\n+    {\n+      static_assert(sizeof(_Tp) > 0, \"must be complete type\");\n+      typedef _Tp type;\n+    };\n+\n+  template<typename _Tp, typename _Up>\n+    class common_type<_Tp, _Up>\n+    {\n+      static_assert(sizeof(_Tp) > 0, \"must be complete type\");\n+      static_assert(sizeof(_Up) > 0, \"must be complete type\");\n+\n+      static _Tp&& __t();\n+      static _Up&& __u();\n+\n+      // HACK: Prevents optimization of ?: in the decltype\n+      // expression when the condition is the literal, \"true\".\n+      // See, PR36628.\n+      static bool __true_or_false();\n+\n+    public:\n+      typedef decltype(__true_or_false() ? __t() : __u()) type;\n+    };\n+\n+  template<typename _Tp, typename _Up, typename... _Vp>\n+    struct common_type<_Tp, _Up, _Vp...>\n+    {\n+      typedef typename\n+        common_type<typename common_type<_Tp, _Up>::type, _Vp...>::type type;\n+    };\n }\n \n #endif  // __GXX_EXPERIMENTAL_CXX0X__"}, {"sha": "fcc5b2adf300a8c9b4f640facc81a89e172a6b81", "filename": "libstdc++-v3/testsuite/20_util/common_type/requirements/explicit_instantiation.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfa9a96b646cc033dcda6a6303e0f702d4d44139/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfa9a96b646cc033dcda6a6303e0f702d4d44139/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fexplicit_instantiation.cc?ref=cfa9a96b646cc033dcda6a6303e0f702d4d44139", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef int test_type1;\n+  typedef int& test_type2;\n+  typedef double test_type3;\n+  typedef float test_type4;\n+  \n+  template struct common_type<test_type1>;\n+  template struct common_type<test_type1, test_type2>;\n+  template struct common_type<test_type1, test_type2, test_type3>;\n+  template struct common_type<test_type1, test_type2, test_type3, test_type4>;\n+}"}, {"sha": "e4152e51d312102c693644b76e246f3ddc289a5f", "filename": "libstdc++-v3/testsuite/20_util/common_type/requirements/typedefs-1.cc", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfa9a96b646cc033dcda6a6303e0f702d4d44139/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfa9a96b646cc033dcda6a6303e0f702d4d44139/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-1.cc?ref=cfa9a96b646cc033dcda6a6303e0f702d4d44139", "patch": "@@ -0,0 +1,118 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+#define JOIN( X, Y ) DO_JOIN( X, Y )\n+#define DO_JOIN( X, Y ) DO_JOIN2(X,Y)\n+#define DO_JOIN2( X, Y ) X##Y\n+\n+#define COMMON_TYPE_TEST_1(type1, uid) \\\n+  typedef common_type<type1>::type JOIN(test_t,uid); \\\n+  VERIFY( (is_same<JOIN(test_t,uid), JOIN(test_t,uid)>::value) ); \\\n+  typedef common_type<const type1>::type JOIN(test_t,JOIN(uid,c)); \\\n+  VERIFY( (is_same<JOIN(test_t,JOIN(uid,c)), \\\n+                   JOIN(test_t,JOIN(uid,c))>::value) ); \\\n+  typedef common_type<volatile type1>::type JOIN(test_t,JOIN(uid,v)); \\\n+  VERIFY( (is_same<JOIN(test_t,JOIN(uid,v)), \\\n+                   JOIN(test_t,JOIN(uid,v))>::value) ); \\\n+  typedef common_type<const volatile type1>::type JOIN(test_t,JOIN(uid,cv)); \\\n+  VERIFY( (is_same<JOIN(test_t,JOIN(uid,cv)), \\\n+                   JOIN(test_t,JOIN(uid,cv))>::value) ); \\\n+  typedef common_type<type1 &>::type JOIN(test_t,JOIN(uid,l)); \\\n+  VERIFY( (is_same<JOIN(test_t,JOIN(uid,l)), \\\n+                   JOIN(test_t,JOIN(uid,l))>::value) ); \\\n+  typedef common_type<const type1 &>::type JOIN(test_t,JOIN(uid,lc)); \\\n+  VERIFY( (is_same<JOIN(test_t,JOIN(uid,lc)), \\\n+                   JOIN(test_t,JOIN(uid,lc))>::value) ); \\\n+  typedef common_type<volatile type1 &>::type JOIN(test_t,JOIN(uid,lv)); \\\n+  VERIFY( (is_same<JOIN(test_t,JOIN(uid,lv)), \\\n+                   JOIN(test_t,JOIN(uid,lv))>::value) ); \\\n+  typedef common_type<const volatile type1 &>::type JOIN(test_t,JOIN(uid,lcv)); \\\n+  VERIFY( (is_same<JOIN(test_t,JOIN(uid,lcv)), \\\n+                   JOIN(test_t,JOIN(uid,lcv))>::value) ); \\\n+  typedef common_type<type1 &&>::type JOIN(test_t,JOIN(uid,r)); \\\n+  VERIFY( (is_same<JOIN(test_t,JOIN(uid,r)), \\\n+                   JOIN(test_t,JOIN(uid,r))>::value) ); \\\n+  typedef common_type<const type1 &&>::type JOIN(test_t,JOIN(uid,rc)); \\\n+  VERIFY( (is_same<JOIN(test_t,JOIN(uid,rc)), \\\n+                   JOIN(test_t,JOIN(uid,rc))>::value) ); \\\n+  typedef common_type<volatile type1 &&>::type JOIN(test_t,JOIN(uid,rv)); \\\n+  VERIFY( (is_same<JOIN(test_t,JOIN(uid,rv)), \\\n+                   JOIN(test_t,JOIN(uid,rv))>::value) ); \\\n+  typedef common_type<const volatile type1 &&>::type JOIN(test_t,JOIN(uid,rcv)); \\\n+  VERIFY( (is_same<JOIN(test_t,JOIN(uid,rcv)), \\\n+                   JOIN(test_t,JOIN(uid,rcv))>::value) )\n+    \n+struct A { };\n+struct B : A { };\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::common_type;\n+  using std::is_same;\n+\n+  // Positive tests.\n+  COMMON_TYPE_TEST_1(int, 1);\n+  COMMON_TYPE_TEST_1(double, 2);\n+  COMMON_TYPE_TEST_1(A, 3);\n+  COMMON_TYPE_TEST_1(B, 4);\n+}\n+\n+#define COMMON_TYPE_TEST_2_IMPL(type1, type2, type3, uid) \\\n+  typedef common_type<type1, type2>::type  \tJOIN(JOIN(test, uid),_t1); \\\n+  typedef common_type<type2, type1>::type  \tJOIN(JOIN(test, uid),_t2); \\\n+  VERIFY( (is_same<JOIN(JOIN(test, uid),_t1), type3>::value) ); \\\n+  VERIFY( (is_same<JOIN(JOIN(test, uid),_t2), type3>::value) )\n+\n+#define NO_CV\n+  \n+#define COMMON_TYPE_TEST_2(cv_qual, type1, type2, type3, uid) \\\n+  COMMON_TYPE_TEST_2_IMPL(cv_qual type1, type2, type3, uid); \\\n+  COMMON_TYPE_TEST_2_IMPL(cv_qual type1 &, type2, type3, JOIN(uid,l)); \\\n+  COMMON_TYPE_TEST_2_IMPL(cv_qual type1 &&, type2, type3, JOIN(uid,r))\n+\n+#define COMMON_TYPE_TEST_ALL_2(type1, type2, type3, uid) \\\n+  COMMON_TYPE_TEST_2(NO_CV, type1, type2, type3, uid); \\\n+  COMMON_TYPE_TEST_2(const, type1, type2, type3, uid); \\\n+  COMMON_TYPE_TEST_2(volatile, type1, type2, type3, uid); \\\n+  COMMON_TYPE_TEST_2(const volatile, type1, type2, type3, uid)\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::common_type;\n+  using std::is_same;\n+  \n+  COMMON_TYPE_TEST_ALL_2(int, int, int, 1);\n+  COMMON_TYPE_TEST_ALL_2(int, double, double, 2);\n+  COMMON_TYPE_TEST_2(NO_CV, A, A, A, 3);\n+  COMMON_TYPE_TEST_2(const, A, A, const A, 4);\n+  COMMON_TYPE_TEST_2(NO_CV, B, A, A, 5);  \n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}]}