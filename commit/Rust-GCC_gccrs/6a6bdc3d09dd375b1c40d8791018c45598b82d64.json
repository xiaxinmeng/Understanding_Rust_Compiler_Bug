{"sha": "6a6bdc3d09dd375b1c40d8791018c45598b82d64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE2YmRjM2QwOWRkMzc1YjFjNDBkODc5MTAxOGM0NTU5OGI4MmQ2NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-08-09T08:58:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-08-09T08:58:33Z"}, "message": "invoke.texi ([Wnarrowing]): Update for non-constants in C++11.\n\n2014-08-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* doc/invoke.texi ([Wnarrowing]): Update for non-constants in C++11.\n\ngcc/cp\n2014-08-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* typeck2.c (check_narrowing): Add tsubst_flags_t parameter, change\n\treturn type to bool; in C++11 for constants give errors, not pedwarns.\n\t* cp-tree.h (check_narrowing): Adjust declaration.\n\t* call.c (convert_like_real): Update calls.\n\t* semantics.c (finish_compound_literal): Likewise.\n\ngcc/testsuite\n2014-08-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/cpp0x/Wnarrowing1.C: Adjust for errors.\n\t* g++.dg/cpp0x/enum29.C: Adjust.\n\n/libstdc++-v3\n2014-08-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/ext/pod_char_traits.h (char_traits<__gnu_cxx::\n\tcharacter<_Value, _Int, _St> >::eof): Fix vs narrowing conversion.\n\nFrom-SVN: r213776", "tree": {"sha": "6ee601ded83d4fe7b691e53061a78a56524ccec4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ee601ded83d4fe7b691e53061a78a56524ccec4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a6bdc3d09dd375b1c40d8791018c45598b82d64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a6bdc3d09dd375b1c40d8791018c45598b82d64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a6bdc3d09dd375b1c40d8791018c45598b82d64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a6bdc3d09dd375b1c40d8791018c45598b82d64/comments", "author": null, "committer": null, "parents": [{"sha": "013078982d33a06a6b323556d8615f2b48dc38ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/013078982d33a06a6b323556d8615f2b48dc38ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/013078982d33a06a6b323556d8615f2b48dc38ab"}], "stats": {"total": 121, "additions": 81, "deletions": 40}, "files": [{"sha": "2aa721c9ce26d82c82c79d04ed7ead7ff6ab4c1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a6bdc3d09dd375b1c40d8791018c45598b82d64", "patch": "@@ -1,3 +1,7 @@\n+2014-08-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* doc/invoke.texi ([Wnarrowing]): Update for non-constants in C++11.\n+\n 2014-08-09  Roman Gareev  <gareevroman@gmail.com>\n \n \t* graphite-isl-ast-to-gimple.c:\n@@ -20,7 +24,6 @@\n \n \t* predict.c (expr_expected_value_1): Remove the redundant assignment.\n \n-\n 2014-08-08  Richard Biener  <rguenther@suse.de>\n \n \t* lto-streamer.h (struct lto_input_block): Make it a class\n@@ -289,7 +292,7 @@\n \n 2014-08-07  Marek Polacek  <polacek@redhat.com>\n \n-\t* fold-const.c (fold_binary_loc): Add folding of \n+\t* fold-const.c (fold_binary_loc): Add folding of\n \t(PTR0 - (PTR1 p+ A) -> (PTR0 - PTR1) - A.\n \n 2013-08-07  Ilya Enkovich  <ilya.enkovich@intel.com>\n@@ -477,10 +480,10 @@\n 2014-08-05  Roman Gareev  <gareevroman@gmail.com>\n \n \t* graphite-isl-ast-to-gimple.c: Add a new struct ast_build_info.\n-\t(translate_isl_ast_for_loop): Add checking of the \n+\t(translate_isl_ast_for_loop): Add checking of the\n \tflag_loop_parallelize_all.\n \t(ast_build_before_for): New function.\n-\t(scop_to_isl_ast): Add checking of the \n+\t(scop_to_isl_ast): Add checking of the\n \tflag_loop_parallelize_all.\n \t* graphite-dependences.c: Move the defenition of the\n \tscop_get_dependences from graphite-optimize-isl.c to this file.\n@@ -612,7 +615,8 @@\n \n 2014-08-01  Jan Hubicka  <hubicka@ucw.cz>\n \n-\t* doc/invoke.texi (Wsuggest-final-types, Wsuggest-final-methods): Document.\n+\t* doc/invoke.texi (Wsuggest-final-types, Wsuggest-final-methods):\n+\tDocument.\n \t* ipa-devirt.c: Include hash-map.h\n \t(struct polymorphic_call_target_d): Add type_warning and decl_warning.\n \t(clear_speculation): Break out of ...\n@@ -621,15 +625,16 @@\n \t(odr_type_warn_count, decl_warn_count): New structures.\n \t(final_warning_record): New structure.\n \t(final_warning_records): New static variable.\n-\t(possible_polymorphic_call_targets): Cleanup handling of speculative info;\n-\tdo not build speculation when user do not care; record info about warnings\n-\twhen asked for.\n+\t(possible_polymorphic_call_targets): Cleanup handling of\n+\tspeculative info; do not build speculation when user do not care;\n+\trecord info about warnings when asked for.\n \t(add_decl_warning): New function.\n \t(type_warning_cmp): New function.\n \t(decl_warning_cmp): New function.\n \t(ipa_devirt): Handle -Wsuggest-final-methods and -Wsuggest-final-types.\n \t(gate): Enable pass when warnings are requested.\n-\t* common.opt (Wsuggest-final-types, Wsuggest-final-methods): New options.\n+\t* common.opt (Wsuggest-final-types, Wsuggest-final-methods): New\n+\toptions.\n \n 2014-08-02  Trevor Saunders  <tsaunders@mozilla.com>\n "}, {"sha": "47621ca0e868e0f93ae0b1b4a4843480d27a6c16", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6a6bdc3d09dd375b1c40d8791018c45598b82d64", "patch": "@@ -1,3 +1,11 @@\n+2014-08-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* typeck2.c (check_narrowing): Add tsubst_flags_t parameter, change\n+\treturn type to bool; in C++11 for constants give errors, not pedwarns.\n+\t* cp-tree.h (check_narrowing): Adjust declaration.\n+\t* call.c (convert_like_real): Update calls.\n+\t* semantics.c (finish_compound_literal): Likewise.\n+\n 2014-08-08  Jason Merrill  <jason@redhat.com>\n \n \t* pt.c (lookup_template_class_1): Copy abi_tag."}, {"sha": "64cab453ae0725db632094dd157a385fb02ab252", "filename": "gcc/cp/call.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=6a6bdc3d09dd375b1c40d8791018c45598b82d64", "patch": "@@ -6251,8 +6251,9 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t\t\t\t\t  1, false, false, complain);\n \t    if (sub == error_mark_node)\n \t      return sub;\n-\t    if (!BRACE_ENCLOSED_INITIALIZER_P (val))\n-\t      check_narrowing (TREE_TYPE (sub), val);\n+\t    if (!BRACE_ENCLOSED_INITIALIZER_P (val)\n+\t\t&& !check_narrowing (TREE_TYPE (sub), val, complain))\n+\t      return error_mark_node;\n \t    CONSTRUCTOR_APPEND_ELT (CONSTRUCTOR_ELTS (new_ctor), NULL_TREE, sub);\n \t    if (!TREE_CONSTANT (sub))\n \t      TREE_CONSTANT (new_ctor) = false;\n@@ -6480,8 +6481,9 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n       break;\n     }\n \n-  if (convs->check_narrowing)\n-    check_narrowing (totype, expr);\n+  if (convs->check_narrowing\n+      && !check_narrowing (totype, expr, complain))\n+    return error_mark_node;\n \n   if (issue_conversion_warnings)\n     expr = cp_convert_and_check (totype, expr, complain);"}, {"sha": "64049c403d2b0ca6747c518e866c029725f11e85", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6a6bdc3d09dd375b1c40d8791018c45598b82d64", "patch": "@@ -6214,7 +6214,7 @@ extern int abstract_virtuals_error_sfinae\t(tree, tree, tsubst_flags_t);\n extern int abstract_virtuals_error_sfinae\t(abstract_class_use, tree, tsubst_flags_t);\n \n extern tree store_init_value\t\t\t(tree, tree, vec<tree, va_gc>**, int);\n-extern void check_narrowing\t\t\t(tree, tree);\n+extern bool check_narrowing\t\t\t(tree, tree, tsubst_flags_t);\n extern tree digest_init\t\t\t\t(tree, tree, tsubst_flags_t);\n extern tree digest_init_flags\t\t\t(tree, tree, int);\n extern tree digest_nsdmi_init\t\t        (tree, tree);"}, {"sha": "531927e3bcaafb7d6d612bda4a254cec09679b1d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=6a6bdc3d09dd375b1c40d8791018c45598b82d64", "patch": "@@ -2597,8 +2597,8 @@ finish_compound_literal (tree type, tree compound_literal,\n   compound_literal = reshape_init (type, compound_literal, complain);\n   if (SCALAR_TYPE_P (type)\n       && !BRACE_ENCLOSED_INITIALIZER_P (compound_literal)\n-      && (complain & tf_warning_or_error))\n-    check_narrowing (type, compound_literal);\n+      && !check_narrowing (type, compound_literal, complain))\n+    return error_mark_node;\n   if (TREE_CODE (type) == ARRAY_TYPE\n       && TYPE_DOMAIN (type) == NULL_TREE)\n     {"}, {"sha": "c985a4bf92c069494867daaabba6e99b00993879", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=6a6bdc3d09dd375b1c40d8791018c45598b82d64", "patch": "@@ -842,27 +842,31 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n }\n \n \f\n-/* Give errors about narrowing conversions within { }.  */\n+/* Give diagnostic about narrowing conversions within { }.  */\n \n-void\n-check_narrowing (tree type, tree init)\n+bool\n+check_narrowing (tree type, tree init, tsubst_flags_t complain)\n {\n   tree ftype = unlowered_expr_type (init);\n   bool ok = true;\n   REAL_VALUE_TYPE d;\n \n-  if (!warn_narrowing || !ARITHMETIC_TYPE_P (type))\n-    return;\n+  if (((!warn_narrowing || !(complain & tf_warning))\n+       && cxx_dialect == cxx98)\n+      || !ARITHMETIC_TYPE_P (type))\n+    return ok;\n \n   if (BRACE_ENCLOSED_INITIALIZER_P (init)\n       && TREE_CODE (type) == COMPLEX_TYPE)\n     {\n       tree elttype = TREE_TYPE (type);\n       if (CONSTRUCTOR_NELTS (init) > 0)\n-        check_narrowing (elttype, CONSTRUCTOR_ELT (init, 0)->value);\n+        ok &= check_narrowing (elttype, CONSTRUCTOR_ELT (init, 0)->value,\n+\t\t\t       complain);\n       if (CONSTRUCTOR_NELTS (init) > 1)\n-\tcheck_narrowing (elttype, CONSTRUCTOR_ELT (init, 1)->value);\n-      return;\n+\tok &= check_narrowing (elttype, CONSTRUCTOR_ELT (init, 1)->value,\n+\t\t\t       complain);\n+      return ok;\n     }\n \n   init = maybe_constant_value (fold_non_dependent_expr_sfinae (init, tf_none));\n@@ -917,15 +921,27 @@ check_narrowing (tree type, tree init)\n \n   if (!ok)\n     {\n-      if (cxx_dialect >= cxx11)\n-\tpedwarn (EXPR_LOC_OR_LOC (init, input_location), OPT_Wnarrowing,\n-\t\t \"narrowing conversion of %qE from %qT to %qT inside { }\",\n-\t\t init, ftype, type);\n-      else\n+      if (cxx_dialect == cxx98)\n \twarning_at (EXPR_LOC_OR_LOC (init, input_location), OPT_Wnarrowing,\n \t\t    \"narrowing conversion of %qE from %qT to %qT inside { } \"\n \t\t    \"is ill-formed in C++11\", init, ftype, type);\n+      else if (!TREE_CONSTANT (init))\n+\t{\n+\t  if (complain & tf_warning_or_error)\n+\t    {\n+\t      pedwarn (EXPR_LOC_OR_LOC (init, input_location), OPT_Wnarrowing,\n+\t\t       \"narrowing conversion of %qE from %qT to %qT inside { }\",\n+\t\t       init, ftype, type);\n+\t      ok = true;\n+\t    }\n+\t}\n+      else if (complain & tf_error)\n+\terror_at (EXPR_LOC_OR_LOC (init, input_location),\n+\t\t  \"narrowing conversion of %qE from %qT to %qT inside { }\",\n+\t\t  init, ftype, type);\n     }\n+\n+  return cxx_dialect == cxx98 || ok; \n }\n \n /* Process the initializer INIT for a variable of type TYPE, emitting"}, {"sha": "35820350d6cb721f49b923969e5a7363a9113739", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6a6bdc3d09dd375b1c40d8791018c45598b82d64", "patch": "@@ -2622,10 +2622,10 @@ int i = @{ 2.2 @}; // error: narrowing from double to int\n \n This flag is included in @option{-Wall} and @option{-Wc++11-compat}.\n \n-With @option{-std=c++11}, @option{-Wno-narrowing} suppresses the diagnostic\n-required by the standard.  Note that this does not affect the meaning\n-of well-formed code; narrowing conversions are still considered\n-ill-formed in SFINAE context.\n+With @option{-std=c++11}, @option{-Wno-narrowing} suppresses for\n+non-constants the diagnostic required by the standard.  Note that this\n+does not affect the meaning of well-formed code; narrowing conversions\n+are still considered ill-formed in SFINAE context.\n \n @item -Wnoexcept @r{(C++ and Objective-C++ only)}\n @opindex Wnoexcept"}, {"sha": "073f83780b871f5958f5b9cf0b1ad850cd1ba63b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a6bdc3d09dd375b1c40d8791018c45598b82d64", "patch": "@@ -1,3 +1,8 @@\n+2014-08-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/cpp0x/Wnarrowing1.C: Adjust for errors.\n+\t* g++.dg/cpp0x/enum29.C: Adjust.\n+\n 2014-08-08  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/strlenopt-8.c: Remove XFAIL."}, {"sha": "4df30255474c465a889025e9643860b8a4570140", "filename": "gcc/testsuite/g++.dg/cpp0x/Wnarrowing1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing1.C?ref=6a6bdc3d09dd375b1c40d8791018c45598b82d64", "patch": "@@ -9,10 +9,10 @@ struct X\n \n int f() { return __INT_MAX__; }\n \n-signed char a { __INT_MAX__ };     // { dg-warning \"narrowing conversion\" }\n+signed char a { __INT_MAX__ };     // { dg-error \"narrowing conversion\" }\n signed char b { f() };             // { dg-warning \"narrowing conversion\" }\n-signed char c { X{} };             // { dg-warning \"narrowing conversion\" }\n+signed char c { X{} };             // { dg-error \"narrowing conversion\" }\n \n-signed char ar[] { __INT_MAX__ };  // { dg-warning \"narrowing conversion\" }\n+signed char ar[] { __INT_MAX__ };  // { dg-error \"narrowing conversion\" }\n signed char br[] { f() };          // { dg-warning \"narrowing conversion\" }\n-signed char cr[] { X{} };          // { dg-warning \"narrowing conversion\" }\n+signed char cr[] { X{} };          // { dg-error \"narrowing conversion\" }"}, {"sha": "f24a6a2a958eef774b18356d58d573060c47bdbd", "filename": "gcc/testsuite/g++.dg/cpp0x/enum29.C", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6bdc3d09dd375b1c40d8791018c45598b82d64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum29.C?ref=6a6bdc3d09dd375b1c40d8791018c45598b82d64", "patch": "@@ -51,8 +51,6 @@ enum F5 : int { f5 = X5() };\n enum G0 : signed char { g0 = X0() };\n enum G1 : signed char { g1 = X1() };\n enum G2 : signed char { g2 = X2() };  // { dg-error \"narrowing\" }\n-// { dg-warning \"overflow\" \"\" { target *-*-* } 53 }\n enum G3 : signed char { g3 = X3() };  // { dg-error \"narrowing\" }\n-// { dg-warning \"overflow\" \"\" { target *-*-* } 55 }\n enum G4 : signed char { g4 = X4() };  // { dg-error \"narrowing\" }\n enum G5 : signed char { g5 = X5() };  // { dg-error \"ambiguous\" }"}, {"sha": "821dfe5c87419633f2f66e2e4be7cb35296d30e5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6bdc3d09dd375b1c40d8791018c45598b82d64/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6bdc3d09dd375b1c40d8791018c45598b82d64/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6a6bdc3d09dd375b1c40d8791018c45598b82d64", "patch": "@@ -1,3 +1,8 @@\n+2014-08-08  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/ext/pod_char_traits.h (char_traits<__gnu_cxx::\n+\tcharacter<_Value, _Int, _St> >::eof): Fix vs narrowing conversion.\n+\n 2014-08-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/61667"}, {"sha": "d6de298a90f43b9e0a86ee6e75eea0d5e8432418", "filename": "libstdc++-v3/include/ext/pod_char_traits.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6bdc3d09dd375b1c40d8791018c45598b82d64/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6bdc3d09dd375b1c40d8791018c45598b82d64/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h?ref=6a6bdc3d09dd375b1c40d8791018c45598b82d64", "patch": "@@ -177,7 +177,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static int_type\n       eof() \n       {\n-\tint_type __r = { -1 };\n+\tint_type __r = { static_cast<typename __gnu_cxx::__conditional_type\n+\t\t\t <std::__is_integer<int_type>::__value,\n+\t\t\t int_type, int>::__type>(-1) };\n \treturn __r;\n       }\n "}]}