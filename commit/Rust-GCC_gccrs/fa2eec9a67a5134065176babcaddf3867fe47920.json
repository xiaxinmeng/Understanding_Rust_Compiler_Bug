{"sha": "fa2eec9a67a5134065176babcaddf3867fe47920", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEyZWVjOWE2N2E1MTM0MDY1MTc2YmFiY2FkZGYzODY3ZmU0NzkyMA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2001-06-28T18:24:55Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-06-28T18:24:55Z"}, "message": "ssa-dce.c (eliminate_dead_code): Properly handle control dependencies implied by PHI nodes.\n\n        * ssa-dce.c (eliminate_dead_code): Properly handle control\n        dependencies implied by PHI nodes.\n\nFrom-SVN: r43643", "tree": {"sha": "82ecd03ca4c9f05046ceb72b92b971adedbbe29c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82ecd03ca4c9f05046ceb72b92b971adedbbe29c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa2eec9a67a5134065176babcaddf3867fe47920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2eec9a67a5134065176babcaddf3867fe47920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa2eec9a67a5134065176babcaddf3867fe47920", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2eec9a67a5134065176babcaddf3867fe47920/comments", "author": null, "committer": null, "parents": [{"sha": "7a442791bbd35236ae2c45e383db88d704f8f41c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a442791bbd35236ae2c45e383db88d704f8f41c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a442791bbd35236ae2c45e383db88d704f8f41c"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "5d363c361948e11b0c5fa5cbf3cae3f964e34d4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2eec9a67a5134065176babcaddf3867fe47920/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2eec9a67a5134065176babcaddf3867fe47920/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa2eec9a67a5134065176babcaddf3867fe47920", "patch": "@@ -11,6 +11,9 @@ Thu Jun 28 20:13:11 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n Thu Jun 28 11:19:42 2001  Jeffrey A Law  (law@cygnus.com)\n \n+\t* ssa-dce.c (eliminate_dead_code): Properly handle control\n+\tdependencies implied by PHI nodes.\n+\n \t* ssa-dce.c (eliminate_dead_code): Remove fake edges from the\n \tCFG after dead code elimination is complete.\n "}, {"sha": "4ccd9e01ccb263d4a7ed1ead31ff5c0afd4ce823", "filename": "gcc/ssa-dce.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2eec9a67a5134065176babcaddf3867fe47920/gcc%2Fssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2eec9a67a5134065176babcaddf3867fe47920/gcc%2Fssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-dce.c?ref=fa2eec9a67a5134065176babcaddf3867fe47920", "patch": "@@ -558,6 +558,41 @@ eliminate_dead_code ()\n \t\t\t&propagate_necessity_through_operand,\n \t\t\t(PTR) &unprocessed_instructions);\n \n+\t  /* PHI nodes are somewhat special in that each PHI alternative\n+\t     has data and control dependencies.  The data dependencies\n+\t     are handled via propagate_necessity_through_operand.  We\n+\t     handle the control dependency here.\n+\n+\t     We consider the control dependent edges leading to the\n+\t     predecessor block associated with each PHI alternative\n+\t     as necessary.  */\n+\t  if (PHI_NODE_P (current_instruction))\n+\t    {\n+\t      rtvec phi_vec = XVEC (SET_SRC (PATTERN (current_instruction)), 0);\n+\t      int num_elem = GET_NUM_ELEM (phi_vec);\n+\t      int v;\n+\n+\t      for (v = num_elem - 2; v >= 0; v -= 2)\n+\t\t{\n+\t\t  basic_block bb;\n+\n+\t\t  bb = BASIC_BLOCK (INTVAL (RTVEC_ELT (phi_vec, v + 1)));\n+\t\t  EXECUTE_IF_CONTROL_DEPENDENT\n+\t\t    (cdbte, bb->end, edge_number,\n+\t\t    {\n+\t\t      rtx jump_insn;\n+\n+\t\t      jump_insn = (INDEX_EDGE_PRED_BB (el, edge_number))->end;\n+\t\t      if (((GET_CODE (jump_insn) == JUMP_INSN))\n+\t\t\t  && UNNECESSARY_P (jump_insn))\n+\t\t\t{\n+\t\t\t  RESURRECT_INSN (jump_insn);\n+\t\t\t  VARRAY_PUSH_RTX (unprocessed_instructions, jump_insn);\n+\t\t\t}\n+\t\t    });\n+\n+\t\t}\n+\t    }\n \t}\n     }\n "}]}