{"sha": "2aaf44a90283156ec0e70ad4d9030f3ba5054c6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFhZjQ0YTkwMjgzMTU2ZWMwZTcwYWQ0ZDkwMzBmM2JhNTA1NGM2Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-24T08:04:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-24T08:04:28Z"}, "message": "openmp: Fix C ICE on OpenMP atomics\n\nc_parser_binary_expression was using build2 to create a temporary holder\nfor binary expression that c_parser_atomic and c_finish_omp_atomic can then\nhandle.  The latter performs then all the needed checking.\n\nUnfortunately, build2 performs some checking too, e.g. PLUS_EXPR vs.\nPOINTER_PLUS_EXPR or matching types of the arguments, nothing we can guarantee\nat the parsing time.  So we need something like C++ build_min_nt*.  This\npatch implements that inline.\n\n2020-11-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/97958\n\t* c-parser.c (c_parser_binary_expression): For omp atomic binary\n\texpressions, use make_node instead of build2 to avoid checking build2\n\tperforms.\n\n\t* c-c++-common/gomp/pr97958.c: New test.", "tree": {"sha": "ca36956c3b723576c2227b668f2520cdf406acfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca36956c3b723576c2227b668f2520cdf406acfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aaf44a90283156ec0e70ad4d9030f3ba5054c6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aaf44a90283156ec0e70ad4d9030f3ba5054c6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aaf44a90283156ec0e70ad4d9030f3ba5054c6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aaf44a90283156ec0e70ad4d9030f3ba5054c6f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4866b2f5db117f9e89f82c44ffed57178c09cc49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4866b2f5db117f9e89f82c44ffed57178c09cc49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4866b2f5db117f9e89f82c44ffed57178c09cc49"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "d86098a6de7f65ad620f648f0e9f79d2a6adfe79", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aaf44a90283156ec0e70ad4d9030f3ba5054c6f/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aaf44a90283156ec0e70ad4d9030f3ba5054c6f/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=2aaf44a90283156ec0e70ad4d9030f3ba5054c6f", "patch": "@@ -7865,9 +7865,13 @@ c_parser_binary_expression (c_parser *parser, struct c_expr *after,\n \t&& stack[1].expr.value != error_mark_node\t\t\t      \\\n \t&& (c_tree_equal (stack[0].expr.value, omp_atomic_lhs)\t\t      \\\n \t    || c_tree_equal (stack[1].expr.value, omp_atomic_lhs)))\t      \\\n-      stack[0].expr.value\t\t\t\t\t\t      \\\n-\t= build2 (stack[1].op, TREE_TYPE (stack[0].expr.value),\t\t      \\\n-\t\t  stack[0].expr.value, stack[1].expr.value);\t\t      \\\n+      {\t\t\t\t\t\t\t\t\t      \\\n+\ttree t = make_node (stack[1].op);\t\t\t\t      \\\n+\tTREE_TYPE (t) = TREE_TYPE (stack[0].expr.value);\t\t      \\\n+\tTREE_OPERAND (t, 0) = stack[0].expr.value;\t\t\t      \\\n+\tTREE_OPERAND (t, 1) = stack[1].expr.value;\t\t\t      \\\n+\tstack[0].expr.value = t;\t\t\t\t\t      \\\n+      }\t\t\t\t\t\t\t\t\t      \\\n     else\t\t\t\t\t\t\t\t      \\\n       stack[sp - 1].expr = parser_build_binary_op (stack[sp].loc,\t      \\\n \t\t\t\t\t\t   stack[sp].op,\t      \\"}, {"sha": "5a6de02f373912e7caeaee0aa9d0fd8d1507d221", "filename": "gcc/testsuite/c-c++-common/gomp/pr97958.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aaf44a90283156ec0e70ad4d9030f3ba5054c6f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr97958.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aaf44a90283156ec0e70ad4d9030f3ba5054c6f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr97958.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr97958.c?ref=2aaf44a90283156ec0e70ad4d9030f3ba5054c6f", "patch": "@@ -0,0 +1,17 @@\n+/* PR c/97958 */\n+\n+int *p;\n+\n+void\n+foo (void)\n+{\n+  #pragma omp atomic\n+  p = p + 1;\n+}\n+\n+void\n+bar (void)\n+{\n+  #pragma omp atomic\t/* { dg-error \"invalid expression type for '#pragma omp atomic'\" } */\n+  bar = bar + 1;\n+}"}]}