{"sha": "67e3020b219fd83a42903e8a62e7d32e712791ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdlMzAyMGIyMTlmZDgzYTQyOTAzZThhNjJlN2QzMmU3MTI3OTFmZg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-03-30T22:19:18Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-04-26T07:50:46Z"}, "message": "d: Recognize pragma(inline) in the code generator.\n\nPragma inline affects whether functions are inlined or not.  If at the\ndeclaration level, it affects the functions declared in the block it\ncontrols.  If inside a function, it affects the function it is enclosed\nby.  Support has been in the front-end for some time, but the\ninformation was not leveraged by the code generation pass.\n\ngcc/d/ChangeLog:\n\n\t* decl.cc (get_symbol_decl): Set DECL_DECLARED_INLINE_P or\n\tDECL_UNINLINABLE for declarations with pragma(inline).\n\t* toir.cc (IRVisitor::visit (GccAsmStatement *)): Set ASM_INLINE_P if\n\tin function decorated with pragma(inline).", "tree": {"sha": "48f9d54b3aafd962ad6dded2e9f5d99b6a7d8a3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48f9d54b3aafd962ad6dded2e9f5d99b6a7d8a3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67e3020b219fd83a42903e8a62e7d32e712791ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67e3020b219fd83a42903e8a62e7d32e712791ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67e3020b219fd83a42903e8a62e7d32e712791ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67e3020b219fd83a42903e8a62e7d32e712791ff/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50929dd318a8171bad96b748491e9678f828e25e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50929dd318a8171bad96b748491e9678f828e25e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50929dd318a8171bad96b748491e9678f828e25e"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "845fc5cf877a98f604449d4d130f04e22876c005", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e3020b219fd83a42903e8a62e7d32e712791ff/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e3020b219fd83a42903e8a62e7d32e712791ff/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=67e3020b219fd83a42903e8a62e7d32e712791ff", "patch": "@@ -1277,6 +1277,13 @@ get_symbol_decl (Declaration *decl)\n \t  DECL_NO_INLINE_WARNING_P (decl->csym) = 1;\n \t}\n \n+      /* In [pragma/inline], functions decorated with 'pragma(inline)' affects\n+\t whether they are inlined or not.  */\n+      if (fd->inlining == PINLINEalways)\n+\tDECL_DECLARED_INLINE_P (decl->csym) = 1;\n+      else if (fd->inlining == PINLINEnever)\n+\tDECL_UNINLINABLE (decl->csym) = 1;\n+\n       /* Function was declared 'naked'.  */\n       if (fd->naked)\n \t{"}, {"sha": "074cde0e0da7a50b1cc01c226ef8b7b0401b1dcd", "filename": "gcc/d/toir.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e3020b219fd83a42903e8a62e7d32e712791ff/gcc%2Fd%2Ftoir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e3020b219fd83a42903e8a62e7d32e712791ff/gcc%2Fd%2Ftoir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftoir.cc?ref=67e3020b219fd83a42903e8a62e7d32e712791ff", "patch": "@@ -1423,14 +1423,20 @@ class IRVisitor : public Visitor\n \t\t       outputs, inputs, clobbers, labels);\n     SET_EXPR_LOCATION (exp, make_location_t (s->loc));\n \n-    /* If the extended syntax was not used, mark the ASM_EXPR.  */\n+    /* If the extended syntax was not used, mark the ASM_EXPR as being an\n+       ASM_INPUT expression instead of an ASM_OPERAND with no operands.  */\n     if (s->args == NULL && s->clobbers == NULL)\n       ASM_INPUT_P (exp) = 1;\n \n     /* All asm statements are assumed to have a side effect.  As a future\n        optimization, this could be unset when building in release mode.  */\n     ASM_VOLATILE_P (exp) = 1;\n \n+    /* If the function has been annotated with 'pragma(inline)', then mark\n+       the asm expression as being inline as well.  */\n+    if (this->func_->inlining == PINLINEalways)\n+      ASM_INLINE_P (exp) = 1;\n+\n     add_stmt (exp);\n   }\n "}]}