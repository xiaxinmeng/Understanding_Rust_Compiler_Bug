{"sha": "5ab7138b864346ad197796835427037f8af8c3b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFiNzEzOGI4NjQzNDZhZDE5Nzc5NjgzNTQyNzAzN2Y4YWY4YzNiNA==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-08-15T19:05:21Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-08-15T19:05:21Z"}, "message": "sparc.c (label_ref_operand): New function.\n\n\t* sparc/sparc.c (label_ref_operand): New function.\n\t(emit_move_sequence): Pass label_ref to gen_move_label_di to not\n\tlose flags.\n\t* sparc/sparc.md (move_label_di): Operand one is label_ref now.\n\t* genattrtab.c (write_test_expr): Allow label_ref in match_dup.\n\nFrom-SVN: r12643", "tree": {"sha": "fcb67e3194a8878265edaa93dfe94fa3a3033c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcb67e3194a8878265edaa93dfe94fa3a3033c3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ab7138b864346ad197796835427037f8af8c3b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab7138b864346ad197796835427037f8af8c3b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ab7138b864346ad197796835427037f8af8c3b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab7138b864346ad197796835427037f8af8c3b4/comments", "author": null, "committer": null, "parents": [{"sha": "1271a76a07ea23917a755aa07737fc838051bb80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1271a76a07ea23917a755aa07737fc838051bb80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1271a76a07ea23917a755aa07737fc838051bb80"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "5b80dcb43c26952417290711e9b82cd3aba89e19", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab7138b864346ad197796835427037f8af8c3b4/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab7138b864346ad197796835427037f8af8c3b4/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=5ab7138b864346ad197796835427037f8af8c3b4", "patch": "@@ -441,6 +441,20 @@ symbolic_memory_operand (op, mode)\n \t  || GET_CODE (op) == HIGH || GET_CODE (op) == LABEL_REF);\n }\n \n+/* Return truth value of statement that OP is a LABEL_REF of mode MODE.  */\n+\n+int\n+label_ref_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (GET_CODE (op) != LABEL_REF)\n+    return 0;\n+  if (GET_MODE (op) != mode)\n+    return 0;\n+  return 1;\n+}\n+\n /* Return 1 if the operand is an argument used in generating pic references\n    in either the medium/low or medium/anywhere code models of sparc64.  */\n \n@@ -1502,6 +1516,8 @@ emit_move_sequence (operands, mode)\n     {\n       if (TARGET_ARCH64)\n \tabort ();\n+      /* ??? This might suffer from the same problem the DImode case did:\n+\t flags in operand1 not being propagated.  */\n       emit_insn (gen_move_pic_label_si (operand0, XEXP (operand1, 0)));\n       return 1;\n     }\n@@ -1512,7 +1528,7 @@ emit_move_sequence (operands, mode)\n     {\n       if (! TARGET_ARCH64)\n \tabort ();\n-      emit_insn (gen_move_label_di (operands[0], XEXP (operands[1], 0)));\n+      emit_insn (gen_move_label_di (operand0, operand1));\n       return 1;\n     }\n   /* DImode HIGH values in sparc64 need a clobber added.  */"}, {"sha": "f565dc631f7f5d8488091a539767ee59f7c61ed8", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab7138b864346ad197796835427037f8af8c3b4/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab7138b864346ad197796835427037f8af8c3b4/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=5ab7138b864346ad197796835427037f8af8c3b4", "patch": "@@ -1573,7 +1573,9 @@\n \n (define_insn \"move_label_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(label_ref:DI (match_operand 1 \"\" \"\")))\n+\t; This was previously (label_ref:DI (match_operand 1 \"\" \"\")) but that\n+\t; loses the volatil and other flags of the original label_ref.\n+\t(match_operand:DI 1 \"label_ref_operand\" \"\"))\n    (set (reg:DI 15) (pc))]\n   \"TARGET_ARCH64\"\n   \"*"}, {"sha": "f1a94d08d64138547e6072066d2f1f5cabb9ae10", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab7138b864346ad197796835427037f8af8c3b4/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab7138b864346ad197796835427037f8af8c3b4/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=5ab7138b864346ad197796835427037f8af8c3b4", "patch": "@@ -4488,7 +4488,8 @@ write_test_expr (exp, in_comparison)\n \n     /* The address of the branch target.  */\n     case MATCH_DUP:\n-      printf (\"insn_addresses[INSN_UID (operands[%d])]\", XINT (exp, 0));\n+      printf (\"insn_addresses[INSN_UID (GET_CODE (operands[%d]) == LABEL_REF ? XEXP (operands[%d], 0) : operands[%d])]\",\n+\t      XINT (exp, 0), XINT (exp, 0), XINT (exp, 0));\n       break;\n \n     /* The address of the current insn.  It would be more consistent with"}]}