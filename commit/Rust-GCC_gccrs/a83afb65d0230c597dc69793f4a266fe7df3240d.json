{"sha": "a83afb65d0230c597dc69793f4a266fe7df3240d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgzYWZiNjVkMDIzMGM1OTdkYzY5NzkzZjRhMjY2ZmU3ZGYzMjQwZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-27T13:48:17Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-27T13:48:17Z"}, "message": "(simplify_binary_operation, fold_rtx): Allow some FP simplications with -ffast-math.\n\n(simplify_binary_operation, fold_rtx): Allow some FP simplications\nwith -ffast-math.\n(simplify_relational_operation): FP comparisons can be reversed\nif -ffast-math is specified.\n\nFrom-SVN: r6334", "tree": {"sha": "0349f1048b7364dcb16d246438bf62698626615a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0349f1048b7364dcb16d246438bf62698626615a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a83afb65d0230c597dc69793f4a266fe7df3240d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a83afb65d0230c597dc69793f4a266fe7df3240d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a83afb65d0230c597dc69793f4a266fe7df3240d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a83afb65d0230c597dc69793f4a266fe7df3240d/comments", "author": null, "committer": null, "parents": [{"sha": "7e2a0d8ef437936d4664dc6dd6fe6e1ec053534a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e2a0d8ef437936d4664dc6dd6fe6e1ec053534a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e2a0d8ef437936d4664dc6dd6fe6e1ec053534a"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "48d9367854934f2ea590388bca84960c7b4c3c65", "filename": "gcc/cse.c", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83afb65d0230c597dc69793f4a266fe7df3240d/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83afb65d0230c597dc69793f4a266fe7df3240d/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=a83afb65d0230c597dc69793f4a266fe7df3240d", "patch": "@@ -3453,7 +3453,7 @@ simplify_binary_operation (code, mode, op0, op1)\n \t  /* In IEEE floating point, x+0 is not the same as x.  Similarly\n \t     for the other optimizations below.  */\n \t  if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT\n-\t      && FLOAT_MODE_P (mode))\n+\t      && FLOAT_MODE_P (mode) && ! flag_fast_math)\n \t    break;\n \n \t  if (op1 == CONST0_RTX (mode))\n@@ -3554,7 +3554,7 @@ simplify_binary_operation (code, mode, op0, op1)\n \t     In IEEE floating point, x-0 is not the same as x.  */\n \n \t  if ((TARGET_FLOAT_FORMAT != IEEE_FLOAT_FORMAT\n-\t       || ! FLOAT_MODE_P (mode))\n+\t       || ! FLOAT_MODE_P (mode) || flag_fast_math)\n \t      && op1 == CONST0_RTX (mode))\n \t    return op0;\n #else\n@@ -3566,14 +3566,16 @@ simplify_binary_operation (code, mode, op0, op1)\n \t  /* None of these optimizations can be done for IEEE\n \t     floating point.  */\n \t  if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT\n-\t      && FLOAT_MODE_P (mode))\n+\t      && FLOAT_MODE_P (mode) && ! flag_fast_math)\n \t    break;\n \n-\t  /* We can't assume x-x is 0 even with non-IEEE floating point.  */\n+\t  /* We can't assume x-x is 0 even with non-IEEE floating point,\n+\t     but since it is zero except in very strange circumstances, we\n+\t     will treat it as zero with -ffast-math.  */\n \t  if (rtx_equal_p (op0, op1)\n \t      && ! side_effects_p (op0)\n-\t      && ! FLOAT_MODE_P (mode))\n-\t    return const0_rtx;\n+\t      && (! FLOAT_MODE_P (mode) || flag_fast_math))\n+\t    return CONST0_RTX (mode);\n \n \t  /* Change subtraction from zero into negation.  */\n \t  if (op0 == CONST0_RTX (mode))\n@@ -3672,7 +3674,7 @@ simplify_binary_operation (code, mode, op0, op1)\n \n \t  /* In IEEE floating point, x*0 is not always 0.  */\n \t  if ((TARGET_FLOAT_FORMAT != IEEE_FLOAT_FORMAT\n-\t       && ! FLOAT_MODE_P (mode))\n+\t       || ! FLOAT_MODE_P (mode) || flag_fast_math)\n \t      && op1 == CONST0_RTX (mode)\n \t      && ! side_effects_p (op0))\n \t    return op1;\n@@ -3772,32 +3774,35 @@ simplify_binary_operation (code, mode, op0, op1)\n \n \t  /* In IEEE floating point, 0/x is not always 0.  */\n \t  if ((TARGET_FLOAT_FORMAT != IEEE_FLOAT_FORMAT\n-\t       || ! FLOAT_MODE_P (mode))\n+\t       || ! FLOAT_MODE_P (mode) || flag_fast_math)\n \t      && op0 == CONST0_RTX (mode)\n \t      && ! side_effects_p (op1))\n \t    return op0;\n \n-#if 0 /* Turned off till an expert says this is a safe thing to do.  */\n #if ! defined (REAL_IS_NOT_DOUBLE) || defined (REAL_ARITHMETIC)\n-\t  /* Change division by a constant into multiplication.  */\n+\t  /* Change division by a constant into multiplication.  Only do\n+\t     this with -ffast-math until an expert says it is safe in\n+\t     general.  */\n \t  else if (GET_CODE (op1) == CONST_DOUBLE\n \t\t   && GET_MODE_CLASS (GET_MODE (op1)) == MODE_FLOAT\n-\t\t   && op1 != CONST0_RTX (mode))\n+\t\t   && op1 != CONST0_RTX (mode)\n+\t\t   && flag_fast_math)\n \t    {\n \t      REAL_VALUE_TYPE d;\n \t      REAL_VALUE_FROM_CONST_DOUBLE (d, op1);\n-\t      if (REAL_VALUES_EQUAL (d, dconst0))\n-\t\tabort();\n+\n+\t      if (! REAL_VALUES_EQUAL (d, dconst0))\n+\t\t{\n #if defined (REAL_ARITHMETIC)\n-\t      REAL_ARITHMETIC (d, (int) RDIV_EXPR, dconst1, d);\n-\t      return gen_rtx (MULT, mode, op0, \n-\t\t\t      CONST_DOUBLE_FROM_REAL_VALUE (d, mode));\n+\t\t  REAL_ARITHMETIC (d, rtx_to_tree_code (DIV), dconst1, d);\n+\t\t  return gen_rtx (MULT, mode, op0, \n+\t\t\t\t  CONST_DOUBLE_FROM_REAL_VALUE (d, mode));\n #else\n-\t      return gen_rtx (MULT, mode, op0, \n-\t\t\t      CONST_DOUBLE_FROM_REAL_VALUE (1./d, mode));\n-\t    }\n-#endif\n+\t\t  return gen_rtx (MULT, mode, op0, \n+\t\t\t\t  CONST_DOUBLE_FROM_REAL_VALUE (1./d, mode));\n #endif\n+\t\t}\n+\t    }\n #endif\n \t  break;\n \n@@ -4302,7 +4307,7 @@ simplify_relational_operation (code, mode, op0, op1)\n \t the result.  */\n       if (rtx_equal_p (op0, op1)\n \t  && (TARGET_FLOAT_FORMAT != IEEE_FLOAT_FORMAT\n-\t      || ! FLOAT_MODE_P (GET_MODE (op0))))\n+\t      || ! FLOAT_MODE_P (GET_MODE (op0)) || flag_fast_math))\n \treturn (code == EQ || code == GE || code == LE || code == LEU\n \t\t|| code == GEU) ? const_true_rtx : const0_rtx;\n \n@@ -5234,7 +5239,7 @@ fold_rtx (x, insn)\n \t\t since x might be a NaN.  */\n \n \t      if ((TARGET_FLOAT_FORMAT != IEEE_FLOAT_FORMAT\n-\t\t   || ! FLOAT_MODE_P (mode_arg0))\n+\t\t   || ! FLOAT_MODE_P (mode_arg0) || flag_fast_math)\n \t\t  && (folded_arg0 == folded_arg1\n \t\t      || (GET_CODE (folded_arg0) == REG\n \t\t\t  && GET_CODE (folded_arg1) == REG"}]}