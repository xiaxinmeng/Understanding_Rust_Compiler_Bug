{"sha": "c02f59e2320f7ac4cac42ea205bc70a785bd4371", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAyZjU5ZTIzMjBmN2FjNGNhYzQyZWEyMDViYzcwYTc4NWJkNDM3MQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2014-04-25T08:08:41Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2014-04-25T08:08:41Z"}, "message": "Remove LIB_TLS_SPEC on Solaris\n\n\t* configure.ac (tga_func): Remove.\n\t(LIB_TLS_SPEC): Remove.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* config/sol2.h (LIB_SPEC): Don't use LIB_TLS_SPEC.\n\nFrom-SVN: r209785", "tree": {"sha": "d218fa2e836de72774c6b716e10904452b077d33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d218fa2e836de72774c6b716e10904452b077d33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c02f59e2320f7ac4cac42ea205bc70a785bd4371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c02f59e2320f7ac4cac42ea205bc70a785bd4371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c02f59e2320f7ac4cac42ea205bc70a785bd4371", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c02f59e2320f7ac4cac42ea205bc70a785bd4371/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b002eee4eaee7254205ea6a90b685a30a92398f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b002eee4eaee7254205ea6a90b685a30a92398f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b002eee4eaee7254205ea6a90b685a30a92398f"}], "stats": {"total": 157, "additions": 10, "deletions": 147}, "files": [{"sha": "5437c256fe2f953f4c2dbf6ed65553e4ebae3cfa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c02f59e2320f7ac4cac42ea205bc70a785bd4371/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c02f59e2320f7ac4cac42ea205bc70a785bd4371/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c02f59e2320f7ac4cac42ea205bc70a785bd4371", "patch": "@@ -1,3 +1,11 @@\n+2014-04-25  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (tga_func): Remove.\n+\t(LIB_TLS_SPEC): Remove.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* config/sol2.h (LIB_SPEC): Don't use LIB_TLS_SPEC.\n+\n 2014-04-25  Richard Biener  <rguenther@suse.de>\n \n \tPR ipa/60912"}, {"sha": "cebe0e5349c414421098cfd51372621881c4d127", "filename": "gcc/config.in", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c02f59e2320f7ac4cac42ea205bc70a785bd4371/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c02f59e2320f7ac4cac42ea205bc70a785bd4371/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=c02f59e2320f7ac4cac42ea205bc70a785bd4371", "patch": "@@ -1697,12 +1697,6 @@\n #endif\n \n \n-/* Define to the library containing __tls_get_addr/___tls_get_addr. */\n-#ifndef USED_FOR_TARGET\n-#undef LIB_TLS_SPEC\n-#endif\n-\n-\n /* The linker hash style */\n #ifndef USED_FOR_TARGET\n #undef LINKER_HASH_STYLE"}, {"sha": "a21c953b0359b899b0492228f1e601734e5bf171", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c02f59e2320f7ac4cac42ea205bc70a785bd4371/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c02f59e2320f7ac4cac42ea205bc70a785bd4371/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=c02f59e2320f7ac4cac42ea205bc70a785bd4371", "patch": "@@ -115,7 +115,6 @@ along with GCC; see the file COPYING3.  If not see\n #define LIB_SPEC \\\n   \"%{!symbolic:\\\n      %{pthreads|pthread:-lpthread} \\\n-     %{pthreads|pthread|fprofile-generate*:\" LIB_TLS_SPEC \"} \\\n      %{p|pg:-ldl} -lc}\"\n \n #ifndef CROSS_DIRECTORY_STRUCTURE"}, {"sha": "4326867b0eae30a8dcd08c51dee62a0c20da0494", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 102, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c02f59e2320f7ac4cac42ea205bc70a785bd4371/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c02f59e2320f7ac4cac42ea205bc70a785bd4371/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=c02f59e2320f7ac4cac42ea205bc70a785bd4371", "patch": "@@ -23306,13 +23306,8 @@ foo:\t.long\t25\n \t;;\n   i[34567]86-*-* | x86_64-*-*)\n     case \"$target\" in\n-      i[34567]86-*-solaris2.*)\n+      i[34567]86-*-solaris2.* | x86_64-*-solaris2.1[0-9]*)\n \ton_solaris=yes\n-\ttga_func=___tls_get_addr\n-\t;;\n-      x86_64-*-solaris2.1[0-9]*)\n-\ton_solaris=yes\n-\ttga_func=__tls_get_addr\n         ;;\n       *)\n \ton_solaris=no\n@@ -23587,7 +23582,6 @@ foo:\t.long\t25\n     case \"$target\" in\n       sparc*-sun-solaris2.*)\n \ton_solaris=yes\n-\ttga_func=__tls_get_addr\n \t;;\n       *)\n \ton_solaris=no\n@@ -23711,101 +23705,6 @@ if test $gcc_cv_as_tls = yes; then\n   set_have_as_tls=yes\n fi\n fi\n-case \"$target\" in\n-  # TLS was introduced in the Solaris 9 FCS release.  Support for GNU-style\n-  # TLS on x86 was only introduced in Solaris 9 4/04, replacing the earlier\n-  # Sun style that Sun ld and GCC don't support any longer.\n-  *-*-solaris2.*)\n-    ld_tls_support=yes\n-\n-    save_LIBS=\"$LIBS\"\n-    save_LDFLAGS=\"$LDFLAGS\"\n-    LIBS=\n-    LDFLAGS=\n-\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking library containing $tga_func\" >&5\n-$as_echo_n \"checking library containing $tga_func... \" >&6; }\n-    # Before Solaris 10, __tls_get_addr (SPARC/x64) resp. ___tls_get_addr\n-    # (32-bit x86) only lived in libthread, so check for that.  Keep\n-    # set_have_as_tls if found, disable if not.\n-    as_ac_Search=`$as_echo \"ac_cv_search_$tga_func\" | $as_tr_sh`\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing $tga_func\" >&5\n-$as_echo_n \"checking for library containing $tga_func... \" >&6; }\n-if { as_var=$as_ac_Search; eval \"test \\\"\\${$as_var+set}\\\" = set\"; }; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  ac_func_search_save_LIBS=$LIBS\n-cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-\n-/* Override any GCC internal prototype to avoid an error.\n-   Use char because int might match the return type of a GCC\n-   builtin and then its argument prototype would still apply.  */\n-#ifdef __cplusplus\n-extern \"C\"\n-#endif\n-char $tga_func ();\n-int\n-main ()\n-{\n-return $tga_func ();\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-for ac_lib in '' thread; do\n-  if test -z \"$ac_lib\"; then\n-    ac_res=\"none required\"\n-  else\n-    ac_res=-l$ac_lib\n-    LIBS=\"-l$ac_lib  $ac_func_search_save_LIBS\"\n-  fi\n-  if ac_fn_c_try_link \"$LINENO\"; then :\n-  eval \"$as_ac_Search=\\$ac_res\"\n-fi\n-rm -f core conftest.err conftest.$ac_objext \\\n-    conftest$ac_exeext\n-  if { as_var=$as_ac_Search; eval \"test \\\"\\${$as_var+set}\\\" = set\"; }; then :\n-  break\n-fi\n-done\n-if { as_var=$as_ac_Search; eval \"test \\\"\\${$as_var+set}\\\" = set\"; }; then :\n-\n-else\n-  eval \"$as_ac_Search=no\"\n-fi\n-rm conftest.$ac_ext\n-LIBS=$ac_func_search_save_LIBS\n-fi\n-eval ac_res=\\$$as_ac_Search\n-\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n-$as_echo \"$ac_res\" >&6; }\n-eval ac_res=\\$$as_ac_Search\n-if test \"$ac_res\" != no; then :\n-  test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n-\n-else\n-  set_have_as_tls=no\n-fi\n-\n-    ld_tls_libs=\"$LIBS\"\n-    # Clear LIBS if we cannot support TLS.\n-    if test $set_have_as_tls = no; then\n-      LIBS=\n-    fi\n-    # Always define LIB_TLS_SPEC, even without TLS support.\n-\n-cat >>confdefs.h <<_ACEOF\n-#define LIB_TLS_SPEC \"$LIBS\"\n-_ACEOF\n-\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $LIBS\" >&5\n-$as_echo \"$LIBS\" >&6; }\n-\n-    LIBS=\"$save_LIBS\"\n-    LDFLAGS=\"$save_LDFLAGS\"\n-    ;;\n-esac\n if test $set_have_as_tls = yes ; then\n \n $as_echo \"#define HAVE_AS_TLS 1\" >>confdefs.h"}, {"sha": "91de23300dd9443764a46810aac33a010db0f9d7", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c02f59e2320f7ac4cac42ea205bc70a785bd4371/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c02f59e2320f7ac4cac42ea205bc70a785bd4371/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=c02f59e2320f7ac4cac42ea205bc70a785bd4371", "patch": "@@ -2935,13 +2935,8 @@ foo:\t.long\t25\n \t;;\n   i[34567]86-*-* | x86_64-*-*)\n     case \"$target\" in\n-      i[34567]86-*-solaris2.*)\n+      i[34567]86-*-solaris2.* | x86_64-*-solaris2.1[0-9]*)\n \ton_solaris=yes\n-\ttga_func=___tls_get_addr\n-\t;;\n-      x86_64-*-solaris2.1[0-9]*)\n-\ton_solaris=yes\n-\ttga_func=__tls_get_addr\n         ;;\n       *)\n \ton_solaris=no\n@@ -3217,7 +3212,6 @@ foo:\t.long\t25\n     case \"$target\" in\n       sparc*-sun-solaris2.*)\n \ton_solaris=yes\n-\ttga_func=__tls_get_addr\n \t;;\n       *)\n \ton_solaris=no\n@@ -3313,37 +3307,6 @@ else\n   [$tls_first_major,$tls_first_minor,0], [$tls_as_opt], [$conftest_s],,\n   [set_have_as_tls=yes])\n fi\n-case \"$target\" in\n-  # TLS was introduced in the Solaris 9 FCS release.  Support for GNU-style\n-  # TLS on x86 was only introduced in Solaris 9 4/04, replacing the earlier\n-  # Sun style that Sun ld and GCC don't support any longer.\n-  *-*-solaris2.*)\n-    ld_tls_support=yes\n-\n-    save_LIBS=\"$LIBS\"\n-    save_LDFLAGS=\"$LDFLAGS\"\n-    LIBS=\n-    LDFLAGS=\n-\n-    AC_MSG_CHECKING(library containing $tga_func)\n-    # Before Solaris 10, __tls_get_addr (SPARC/x64) resp. ___tls_get_addr\n-    # (32-bit x86) only lived in libthread, so check for that.  Keep\n-    # set_have_as_tls if found, disable if not.\n-    AC_SEARCH_LIBS([$tga_func], [thread],, [set_have_as_tls=no])\n-    ld_tls_libs=\"$LIBS\"\n-    # Clear LIBS if we cannot support TLS.\n-    if test $set_have_as_tls = no; then\n-      LIBS=\n-    fi\n-    # Always define LIB_TLS_SPEC, even without TLS support.\n-    AC_DEFINE_UNQUOTED(LIB_TLS_SPEC, \"$LIBS\",\n-        [Define to the library containing __tls_get_addr/___tls_get_addr.])\n-    AC_MSG_RESULT($LIBS)\n-\n-    LIBS=\"$save_LIBS\"\n-    LDFLAGS=\"$save_LDFLAGS\"\n-    ;;\n-esac\n if test $set_have_as_tls = yes ; then\n   AC_DEFINE(HAVE_AS_TLS, 1,\n \t    [Define if your assembler and linker support thread-local storage.])"}]}