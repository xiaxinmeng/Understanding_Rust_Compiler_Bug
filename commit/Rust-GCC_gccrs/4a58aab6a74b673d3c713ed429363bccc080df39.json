{"sha": "4a58aab6a74b673d3c713ed429363bccc080df39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE1OGFhYjZhNzRiNjczZDNjNzEzZWQ0MjkzNjNiY2NjMDgwZGYzOQ==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-11-18T12:18:09Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-11-18T12:18:09Z"}, "message": "cppinit.c: Update comments.\n\n\t* cppinit.c: Update comments.\n\t(cpp_reader_init): Make -imacro and -include use the standard\n\t#include \"\" search path.\n\t(do_includes): New function.\n\nFrom-SVN: r37542", "tree": {"sha": "d90f40e6ebd7e4293074171049d054e48417ba9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d90f40e6ebd7e4293074171049d054e48417ba9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a58aab6a74b673d3c713ed429363bccc080df39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a58aab6a74b673d3c713ed429363bccc080df39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a58aab6a74b673d3c713ed429363bccc080df39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a58aab6a74b673d3c713ed429363bccc080df39/comments", "author": null, "committer": null, "parents": [{"sha": "18c07aaf6d28eea4ecd88460890908dadbc69063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18c07aaf6d28eea4ecd88460890908dadbc69063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18c07aaf6d28eea4ecd88460890908dadbc69063"}], "stats": {"total": 131, "additions": 73, "deletions": 58}, "files": [{"sha": "9e5850ef5c18a415ecd5afb318a018be5391aad8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a58aab6a74b673d3c713ed429363bccc080df39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a58aab6a74b673d3c713ed429363bccc080df39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a58aab6a74b673d3c713ed429363bccc080df39", "patch": "@@ -1,3 +1,10 @@\n+2000-11-18  Neil Booth  <neilb@earthling.net>\n+\n+\t* cppinit.c: Update comments.\n+\t(cpp_reader_init): Make -imacro and -include use the standard\n+\t#include \"\" search path.\n+\t(do_includes): New function.\n+\n 2000-11-18  Ben Elliston  <bje@redhat.com>\n \n \t* config/sh/crt1.asm (start_l): Move PC-relative move instruction"}, {"sha": "095e6d4c8fb40388da7028165579e78ab7bd5eac", "filename": "gcc/cppinit.c", "status": "modified", "additions": 66, "deletions": 58, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a58aab6a74b673d3c713ed429363bccc080df39/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a58aab6a74b673d3c713ed429363bccc080df39/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=4a58aab6a74b673d3c713ed429363bccc080df39", "patch": "@@ -30,7 +30,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"mkdeps.h\"\n #include \"cppdefault.h\"\n \n-/* Predefined symbols, built-in macros, and the default include path. */\n+/* Predefined symbols, built-in macros, and the default include path.  */\n \n #ifndef GET_ENV_PATH_LIST\n #define GET_ENV_PATH_LIST(VAR,NAME)\tdo { (VAR) = getenv (NAME); } while (0)\n@@ -47,13 +47,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #define INO_T_EQ(a, b) ((a) == (b))\n #endif\n \n-/* Internal structures and prototypes. */\n+/* Internal structures and prototypes.  */\n \n-/* A `struct pending_option' remembers one -D, -A, -U, -include, or -imacros\n-   switch.  There are four lists: one for -D and -U, one for -A, one\n-   for -include, one for -imacros.  `undef' is set for -U, clear for\n-   -D, ignored for the others.\n-   (Future: add an equivalent of -U for -A) */\n+/* A `struct pending_option' remembers one -D, -A, -U, -include, or\n+   -imacros switch.  */\n \n typedef void (* cl_directive_handler) PARAMS ((cpp_reader *, const char *));\n struct pending_option\n@@ -66,7 +63,7 @@ struct pending_option\n /* The `pending' structure accumulates all the options that are not\n    actually processed until we hit cpp_start_read.  It consists of\n    several lists, one for each type of option.  We keep both head and\n-   tail pointers for quick insertion. */\n+   tail pointers for quick insertion.  */\n struct cpp_pending\n {\n   struct pending_option *directive_head, *directive_tail;\n@@ -105,7 +102,9 @@ struct file_name_list * remove_dup_dir\tPARAMS ((cpp_reader *,\n struct file_name_list * remove_dup_dirs PARAMS ((cpp_reader *,\n \t\t\t\t\t\t struct file_name_list *));\n static void merge_include_chains\tPARAMS ((cpp_reader *));\n-\n+static void do_includes\t\t\tPARAMS ((cpp_reader *,\n+\t\t\t\t\t\t struct pending_option *,\n+\t\t\t\t\t\t int));\n static void initialize_dependency_output PARAMS ((cpp_reader *));\n static void initialize_standard_includes PARAMS ((cpp_reader *));\n static void new_pending_directive\tPARAMS ((struct cpp_pending *,\n@@ -116,18 +115,18 @@ static int opt_comp\t\t\tPARAMS ((const void *, const void *));\n #endif\n static int parse_option\t\t\tPARAMS ((const char *));\n \n-/* Fourth argument to append_include_chain: chain to use */\n+/* Fourth argument to append_include_chain: chain to use.  */\n enum { QUOTE = 0, BRACKET, SYSTEM, AFTER };\n \n /* If we have designated initializers (GCC >2.7) these tables can be\n    initialized, constant data.  Otherwise, they have to be filled in at\n    runtime.  */\n #if HAVE_DESIGNATED_INITIALIZERS\n \n-#define init_IStable()  /* nothing */\n+#define init_IStable()  /* Nothing.  */\n #define ISTABLE __extension__ const U_CHAR _cpp_IStable[UCHAR_MAX + 1] = {\n \n-#define init_trigraph_map()  /* nothing */\n+#define init_trigraph_map()  /* Nothing.  */\n #define TRIGRAPH_MAP \\\n __extension__ const U_CHAR _cpp_trigraph_map[UCHAR_MAX + 1] = {\n \n@@ -343,7 +342,7 @@ remove_dup_dirs (pfile, head)\n    bracket_include path.\n \n    For the future: Check if the directory is empty (but\n-   how?) and possibly preload the include hash. */\n+   how?) and possibly preload the include hash.  */\n \n static void\n merge_include_chains (pfile)\n@@ -452,7 +451,7 @@ cpp_reader_init (pfile)\n   CPP_OPTION (pfile, pending) =\n     (struct cpp_pending *) xcalloc (1, sizeof (struct cpp_pending));\n \n-  /* Initialize comment saving state.  */\n+  /* Initialize lexer state.  */\n   pfile->state.save_comments = ! CPP_OPTION (pfile, discard_comments);\n \n   /* Indicate date and time not yet calculated.  */\n@@ -475,7 +474,7 @@ cpp_reader_init (pfile)\n   /* Macro pool initially 8K.  Aligned, permanent pool.  */\n   _cpp_init_pool (&pfile->macro_pool, 8 * 1024, 0, 0);\n \n-  /* Start with temporary pool.   */\n+  /* Start with temporary pool.  */\n   pfile->string_pool = &pfile->temp_string_pool;\n \n   _cpp_init_hashtable (pfile);\n@@ -823,18 +822,42 @@ initialize_standard_includes (pfile)\n \t  || (CPP_OPTION (pfile, cplusplus)\n \t      && !CPP_OPTION (pfile, no_standard_cplusplus_includes)))\n \t{\n-\t  /* XXX Potential memory leak! */\n \t  char *str = xstrdup (update_path (p->fname, p->component));\n \t  append_include_chain (pfile, str, SYSTEM, p->cxx_aware);\n \t}\n     }\n }\n \n-/* This is called after options have been processed.\n- * Check options for consistency, and setup for processing input\n- * from the file named FNAME.  (Use standard input if FNAME==NULL.)\n- * Return 1 on success, 0 on failure.\n- */\n+/* Handles -imacro and -include from the command line.  */\n+static void\n+do_includes (pfile, p, scan)\n+     cpp_reader *pfile;\n+     struct pending_option *p;\n+     int scan;\n+{\n+  while (p)\n+    {\n+      cpp_token header;\n+      struct pending_option *q;\n+\n+      header.type = CPP_STRING;\n+      header.val.str.text = (unsigned char *) p->arg;\n+      header.val.str.len = strlen (p->arg);\n+\n+      /* Use the #include \"\" search path.  */\n+      _cpp_execute_include (pfile, &header, 0, 0);\n+      if (scan)\n+\tcpp_scan_buffer_nooutput (pfile);\n+      q = p->next;\n+      free (p);\n+      p = q;\n+    }\n+}\n+\n+/* This is called after options have been processed.  Check options\n+ for consistency, and setup for processing input from the file named\n+ FNAME.  (Use standard input if FNAME == NULL.)  Return 1 on success,\n+ 0 on failure.  */\n \n int\n cpp_start_read (pfile, fname)\n@@ -918,27 +941,12 @@ cpp_start_read (pfile, fname)\n   pfile->done_initializing = 1;\n \n   /* The -imacros files can be scanned now, but the -include files\n-     have to be pushed onto the include stack and processed later,\n-     in the main loop calling cpp_get_token.  */\n-\n-  p = CPP_OPTION (pfile, pending)->imacros_head;\n-  while (p)\n-    {\n-      if (cpp_read_file (pfile, p->arg))\n-\tcpp_scan_buffer_nooutput (pfile);\n-      q = p->next;\n-      free (p);\n-      p = q;\n-    }\n-\n-  p = CPP_OPTION (pfile, pending)->include_head;\n-  while (p)\n-    {\n-      cpp_read_file (pfile, p->arg);\n-      q = p->next;\n-      free (p);\n-      p = q;\n-    }\n+     have to be pushed onto the buffer stack and processed later,\n+     otherwise cppmain.c won't see the tokens.  include_head was built\n+     up as a stack, and popping this stack onto the buffer stack means\n+     we preserve the order of the command line.  */\n+  do_includes (pfile, CPP_OPTION (pfile, pending)->imacros_head, 1);\n+  do_includes (pfile, CPP_OPTION (pfile, pending)->include_head, 0);\n \n   free (CPP_OPTION (pfile, pending));\n   CPP_OPTION (pfile, pending) = NULL;\n@@ -949,7 +957,7 @@ cpp_start_read (pfile, fname)\n /* This is called at the end of preprocessing.  It pops the\n    last buffer and writes dependency output.  It should also\n    clear macro definitions, such that you could call cpp_start_read\n-   with a new filename to restart processing. */\n+   with a new filename to restart processing.  */\n void\n cpp_finish (pfile)\n      cpp_reader *pfile;\n@@ -1118,7 +1126,7 @@ static const struct cl_option cl_options[] =\n    e.g. -iwithprefix and -iwithprefixbefore.  Moreover, we want to\n    accept options beginning with -g and -W that we do not recognise,\n    but not to swallow any subsequent command line argument; these are\n-   handled as special cases in cpp_handle_option */\n+   handled as special cases in cpp_handle_option.  */\n static int\n parse_option (input)\n      const char *input;\n@@ -1149,13 +1157,13 @@ parse_option (input)\n \t     we may match a later option or we may have been passed the\n \t     argument.  The longest possible option match succeeds.\n \t     If the option takes no arguments we have not matched and\n-\t     continue the search (e.g. input=\"stdc++\" match was \"stdc\") */\n+\t     continue the search (e.g. input=\"stdc++\" match was \"stdc\").  */\n \t  mn = md + 1;\n \t  if (cl_options[md].msg)\n \t    {\n \t      /* Scan forwards.  If we get an exact match, return it.\n \t\t Otherwise, return the longest option-accepting match.\n-\t\t This loops no more than twice with current options */\n+\t\t This loops no more than twice with current options.  */\n \t      mx = md;\n \t      for (; mn < N_OPTS; mn++)\n \t\t{\n@@ -1204,7 +1212,7 @@ cpp_handle_option (pfile, argc, argv)\n       int opt_index;\n       const char *arg = 0;\n \n-      /* Skip over '-' */\n+      /* Skip over '-'.  */\n       opt_index = parse_option (&argv[i][1]);\n       if (opt_index < 0)\n \treturn i;\n@@ -1216,7 +1224,7 @@ cpp_handle_option (pfile, argc, argv)\n \n \t  /* Yuk. Special case for -g and -W as they must not swallow\n \t     up any following argument.  If this becomes common, add\n-\t     another field to the cl_options table */\n+\t     another field to the cl_options table.  */\n \t  if (arg[0] == '\\0' && !(opt_code == OPT_g || opt_code == OPT_W))\n \t    {\n \t      arg = argv[++i];\n@@ -1230,7 +1238,7 @@ cpp_handle_option (pfile, argc, argv)\n \n       switch (opt_code)\n \t{\n-\tcase N_OPTS: /* shut GCC up */\n+\tcase N_OPTS: /* Shut GCC up.  */\n \t  break;\n \tcase OPT_fleading_underscore:\n \t  CPP_OPTION (pfile, user_label_prefix) = \"_\";\n@@ -1263,7 +1271,7 @@ cpp_handle_option (pfile, argc, argv)\n \tcase OPT_w:\n \t  CPP_OPTION (pfile, inhibit_warnings) = 1;\n \t  break;\n-\tcase OPT_g:  /* Silently ignore anything but -g3 */\n+\tcase OPT_g:  /* Silently ignore anything but -g3.  */\n \t  if (!strcmp(&argv[i][2], \"3\"))\n \t    CPP_OPTION (pfile, debug_output) = 1;\n \t  break;\n@@ -1286,7 +1294,7 @@ cpp_handle_option (pfile, argc, argv)\n \tcase OPT_P:\n \t  CPP_OPTION (pfile, no_line_commands) = 1;\n \t  break;\n-\tcase OPT_dollar:\t\t/* Don't include $ in identifiers.  */\n+\tcase OPT_dollar:\t/* Don't include $ in identifiers.  */\n \t  CPP_OPTION (pfile, dollars_in_ident) = 0;\n \t  break;\n \tcase OPT_H:\n@@ -1423,7 +1431,7 @@ cpp_handle_option (pfile, argc, argv)\n \t  CPP_OPTION (pfile, verbose) = 1;\n \t  break;\n \tcase OPT_stdin_stdout:\n-\t  /* JF handle '-' as file name meaning stdin or stdout */\n+\t  /* JF handle '-' as file name meaning stdin or stdout.  */\n \t  if (CPP_OPTION (pfile, in_fname) == NULL)\n \t    CPP_OPTION (pfile, in_fname) = \"\";\n \t  else if (CPP_OPTION (pfile, out_fname) == NULL)\n@@ -1432,7 +1440,7 @@ cpp_handle_option (pfile, argc, argv)\n \tcase OPT_d:\n \t  /* Args to -d specify what parts of macros to dump.\n \t     Silently ignore unrecognised options; they may\n-\t     be aimed at the compiler proper. */\n+\t     be aimed at the compiler proper.  */\n  \t  {\n \t    char c;\n \n@@ -1479,9 +1487,9 @@ cpp_handle_option (pfile, argc, argv)\n  \t  else\n \t    CPP_OPTION (pfile, print_deps) = 1;\n \n-\t  /* For -MD and -MMD options, write deps on file named by next arg */\n-\t  /* For -M and -MM, write deps on standard output\n-\t     and suppress the usual output.  */\n+\t  /* For -MD and -MMD, write deps on file named by next arg.  */\n+\t  /* For -M and -MM, write deps on standard output and\n+\t     suppress the usual output.  */\n \t  if (opt_code == OPT_MD || opt_code == OPT_MMD)\n \t      CPP_OPTION (pfile, deps_file) = arg;\n  \t  else\n@@ -1549,7 +1557,7 @@ cpp_handle_option (pfile, argc, argv)\n \t  break;\n \tcase OPT_isystem:\n \t  /* Add directory to beginning of system include path, as a system\n-\t     include directory. */\n+\t     include directory.  */\n \t  append_include_chain (pfile, xstrdup (arg), SYSTEM, 0);\n \t  break;\n \tcase OPT_include:\n@@ -1613,7 +1621,7 @@ cpp_handle_option (pfile, argc, argv)\n \t  append_include_chain (pfile, xstrdup (arg), AFTER, 0);\n \t  break;\n \tcase OPT_W:\n-\t  /* Silently ignore unrecognised options */\n+\t  /* Silently ignore unrecognised options.  */\n \t  if (!strcmp (argv[i], \"-Wall\"))\n \t    {\n \t      CPP_OPTION (pfile, warn_trigraphs) = 1;"}]}