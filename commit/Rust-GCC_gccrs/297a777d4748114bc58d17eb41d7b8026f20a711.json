{"sha": "297a777d4748114bc58d17eb41d7b8026f20a711", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk3YTc3N2Q0NzQ4MTE0YmM1OGQxN2ViNDFkN2I4MDI2ZjIwYTcxMQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2005-11-09T11:42:38Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2005-11-09T11:42:38Z"}, "message": "s390.c (s390_regs_ever_clobbered): Only save live eh regs for a function containing a landing pad.\n\n2005-11-09  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390.c (s390_regs_ever_clobbered): Only save live eh regs\n\tfor a function containing a landing pad.\n\t* testsuite/g++.dg/other/pr24623.C: Testcase added.\n\nFrom-SVN: r106687", "tree": {"sha": "daab885ca761c1889ea819eca5b0410606e642a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daab885ca761c1889ea819eca5b0410606e642a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/297a777d4748114bc58d17eb41d7b8026f20a711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/297a777d4748114bc58d17eb41d7b8026f20a711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/297a777d4748114bc58d17eb41d7b8026f20a711", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/297a777d4748114bc58d17eb41d7b8026f20a711/comments", "author": null, "committer": null, "parents": [{"sha": "7221b4a18ceb8d291f2d6f5f0d9f2b1bfccc058e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7221b4a18ceb8d291f2d6f5f0d9f2b1bfccc058e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7221b4a18ceb8d291f2d6f5f0d9f2b1bfccc058e"}], "stats": {"total": 80, "additions": 79, "deletions": 1}, "files": [{"sha": "d5043a75969b51f920ba0a2c4c9d20914e745c57", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297a777d4748114bc58d17eb41d7b8026f20a711/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297a777d4748114bc58d17eb41d7b8026f20a711/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=297a777d4748114bc58d17eb41d7b8026f20a711", "patch": "@@ -1,3 +1,9 @@\n+2005-11-09  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_regs_ever_clobbered): Only save live eh regs\n+\tfor a function containing a landing pad.\n+\t* testsuite/g++.dg/other/pr24623.C: Testcase added.\n+\n 2005-11-09  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* flow.c (mark_set_1): Handle CLOBBERs like SETs if the register"}, {"sha": "75192e4b89b1972ff558841ee57c07932b610834", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297a777d4748114bc58d17eb41d7b8026f20a711/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297a777d4748114bc58d17eb41d7b8026f20a711/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=297a777d4748114bc58d17eb41d7b8026f20a711", "patch": "@@ -6009,7 +6009,10 @@ s390_regs_ever_clobbered (int *regs_ever_clobbered)\n      deal with this automatically.  */\n   if (current_function_calls_eh_return || cfun->machine->has_landing_pad_p)\n     for (i = 0; EH_RETURN_DATA_REGNO (i) != INVALID_REGNUM ; i++)\n-      regs_ever_clobbered[EH_RETURN_DATA_REGNO (i)] = 1;\n+      if (current_function_calls_eh_return \n+\t  || (cfun->machine->has_landing_pad_p \n+\t      && regs_ever_live [EH_RETURN_DATA_REGNO (i)]))\n+\tregs_ever_clobbered[EH_RETURN_DATA_REGNO (i)] = 1;\n \n   /* For nonlocal gotos all call-saved registers have to be saved.\n      This flag is also set for the unwinding code in libgcc."}, {"sha": "480bb39b63ae59292c350e09e7fc3b63df767dcf", "filename": "gcc/testsuite/g++.dg/other/pr24623.C", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297a777d4748114bc58d17eb41d7b8026f20a711/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr24623.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297a777d4748114bc58d17eb41d7b8026f20a711/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr24623.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr24623.C?ref=297a777d4748114bc58d17eb41d7b8026f20a711", "patch": "@@ -0,0 +1,69 @@\n+/* This used to ICE due to a backend problem on s390.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+class ReferenceCounted\n+{\n+public:\n+\n+  virtual ~ ReferenceCounted ()\n+  {\n+  }\n+  void decrementRefCount () const\n+  {\n+    if (--const_cast < unsigned int &>(_ref_count) == 0)\n+      {\n+\tdelete this;\n+      }\n+  }\n+  unsigned int _ref_count;\n+};\n+\n+template < class T > class RefCountPointer\n+{\n+public:\n+\n+RefCountPointer (T * p = 0):_p (p)\n+  {\n+  }\n+  RefCountPointer & operator= (const RefCountPointer < T > &o)\n+  {\n+    if (_p != o._p)\n+      {\n+\tif (_p != 0)\n+\t  _p->decrementRefCount ();\n+      }\n+  }\n+  ~RefCountPointer ()\n+  {\n+  }\n+  T *_p;\n+};\n+class Item:public ReferenceCounted\n+{\n+public:\n+\n+  typedef RefCountPointer < const Item > Ptr;\n+};\n+class AnyAtomicType:public Item\n+{\n+};\n+class StaticContext\n+{\n+};\n+class DynamicContext:public StaticContext\n+{\n+};\n+class SortableItem\n+{\n+  SortableItem ();\n+  int m_bAscending:1;\n+  DynamicContext *m_context;\n+    AnyAtomicType::Ptr m_item;\n+};\n+SortableItem::SortableItem ()\n+{\n+  m_context = __null;\n+  m_item = __null;\n+}"}]}