{"sha": "bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZmNGI2M2QzMTA1OWYzZWJmOTE4ZTcwY2EwMGQ1ZWI0ZGNiYzYyZQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2007-03-09T07:36:43Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2007-03-09T07:36:43Z"}, "message": "rtl.def (ASM_INPUT): Add location.\n\n* rtl.def (ASM_INPUT): Add location.\n* rtl.h (ASM_INPUT_SOURCE_LOCATION): New.\n(ASM_INPUT_SOURCE_FILE, ASM_INPUT_SOURCE_LINE): New.\n(decode_asm_operands): Add loc operand.\n(gen_rtx_ASM_INPUT, gen_rtx_ASM_INPUT_loc): Define.\n* stmt.c (expand_asm): Rename to...\n(expand_asm_loc): ... this.  Add locus argument.  Pass it on to\ngen_rtx_ASM_INPUT_loc.\n(expand_asm_expr): Adjust.\n* recog.c (decode_asm_operands): Add loc operand.\n(check_asm_operands, extract_insn): Adjust.\n* reload1.c (maybe_fix_stack_asms): Likewise.\n* final.c (asm_insn_count): Likewise.\n(final_scan_insn): Output # line before and after asm.\n\nFrom-SVN: r122742", "tree": {"sha": "48b68219ea2954e8bd644e2a8f092df8fd7a9b90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48b68219ea2954e8bd644e2a8f092df8fd7a9b90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e/comments", "author": null, "committer": null, "parents": [{"sha": "1296c31f09a6f9ec9030f4641f8a3bc50e509dc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1296c31f09a6f9ec9030f4641f8a3bc50e509dc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1296c31f09a6f9ec9030f4641f8a3bc50e509dc7"}], "stats": {"total": 120, "additions": 92, "deletions": 28}, "files": [{"sha": "6c55f65339c69b423ee3e0499a0a5fe1394564a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e", "patch": "@@ -1,3 +1,20 @@\n+2007-03-09  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* rtl.def (ASM_INPUT): Add location.\n+\t* rtl.h (ASM_INPUT_SOURCE_LOCATION): New.\n+\t(ASM_INPUT_SOURCE_FILE, ASM_INPUT_SOURCE_LINE): New.\n+\t(decode_asm_operands): Add loc operand.\n+\t(gen_rtx_ASM_INPUT, gen_rtx_ASM_INPUT_loc): Define.\n+\t* stmt.c (expand_asm): Rename to...\n+\t(expand_asm_loc): ... this.  Add locus argument.  Pass it on to\n+\tgen_rtx_ASM_INPUT_loc.\n+\t(expand_asm_expr): Adjust.\n+\t* recog.c (decode_asm_operands): Add loc operand.\n+\t(check_asm_operands, extract_insn): Adjust.\n+\t* reload1.c (maybe_fix_stack_asms): Likewise.\n+\t* final.c (asm_insn_count): Likewise.\n+\t(final_scan_insn): Output # line before and after asm.\n+\n 2007-03-09  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* tree-ssa-structalias.c (variable_info): Remove"}, {"sha": "d7d1dafe2a4b00f8daa71e2b78cc86869f090c9a", "filename": "gcc/final.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e", "patch": "@@ -1,6 +1,6 @@\n /* Convert RTL to assembler code and output it, for GNU compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,\n-   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -1357,7 +1357,7 @@ asm_insn_count (rtx body)\n   if (GET_CODE (body) == ASM_INPUT)\n     template = XSTR (body, 0);\n   else\n-    template = decode_asm_operands (body, NULL, NULL, NULL, NULL);\n+    template = decode_asm_operands (body, NULL, NULL, NULL, NULL, NULL);\n \n   for (; *template; template++)\n     if (IS_ASM_LOGICAL_LINE_SEPARATOR (*template) || *template == '\\n')\n@@ -2068,12 +2068,25 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \n \t    if (string[0])\n \t      {\n+\t\tlocation_t loc;\n+\n \t\tif (! app_on)\n \t\t  {\n \t\t    fputs (ASM_APP_ON, file);\n \t\t    app_on = 1;\n \t\t  }\n+#ifdef USE_MAPPED_LOCATION\n+\t\tloc = ASM_INPUT_SOURCE_LOCATION (body);\n+#else\n+\t\tloc.file = ASM_INPUT_SOURCE_FILE (body);\n+\t\tloc.line = ASM_INPUT_SOURCE_LINE (body);\n+#endif\n+\t\tif (loc.file && loc.line)\n+\t\t  fprintf (asm_out_file, \"%s %i \\\"%s\\\" 1\\n\",\n+\t\t\t   ASM_COMMENT_START, loc.line, loc.file);\n \t\tfprintf (asm_out_file, \"\\t%s\\n\", string);\n+\t\tif (loc.file && loc.line)\n+\t\t  fprintf (asm_out_file, \"%s 0 \\\"\\\" 2\\n\", ASM_COMMENT_START);\n \t      }\n \t    break;\n \t  }\n@@ -2084,12 +2097,13 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t    unsigned int noperands = asm_noperands (body);\n \t    rtx *ops = alloca (noperands * sizeof (rtx));\n \t    const char *string;\n+\t    location_t loc;\n \n \t    /* There's no telling what that did to the condition codes.  */\n \t    CC_STATUS_INIT;\n \n \t    /* Get out the operand values.  */\n-\t    string = decode_asm_operands (body, ops, NULL, NULL, NULL);\n+\t    string = decode_asm_operands (body, ops, NULL, NULL, NULL, &loc);\n \t    /* Inhibit dieing on what would otherwise be compiler bugs.  */\n \t    insn_noperands = noperands;\n \t    this_is_asm_operands = insn;\n@@ -2106,7 +2120,12 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t\t    fputs (ASM_APP_ON, file);\n \t\t    app_on = 1;\n \t\t  }\n+\t\tif (loc.file && loc.line)\n+\t\t  fprintf (asm_out_file, \"%s %i \\\"%s\\\" 1\\n\",\n+\t\t\t   ASM_COMMENT_START, loc.line, loc.file);\n \t        output_asm_insn (string, ops);\n+\t\tif (loc.file && loc.line)\n+\t\t  fprintf (asm_out_file, \"%s 0 \\\"\\\" 2\\n\", ASM_COMMENT_START);\n \t      }\n \n \t    this_is_asm_operands = 0;"}, {"sha": "af5387a03372eed37d1aa48dbaef521fa04a5407", "filename": "gcc/recog.c", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines used by or related to instruction recognition.\n    Copyright (C) 1987, 1988, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -140,7 +140,7 @@ check_asm_operands (rtx x)\n   operands = alloca (noperands * sizeof (rtx));\n   constraints = alloca (noperands * sizeof (char *));\n \n-  decode_asm_operands (x, operands, NULL, constraints, NULL);\n+  decode_asm_operands (x, operands, NULL, constraints, NULL, NULL);\n \n   for (i = 0; i < noperands; i++)\n     {\n@@ -1492,15 +1492,16 @@ asm_noperands (rtx body)\n \n const char *\n decode_asm_operands (rtx body, rtx *operands, rtx **operand_locs,\n-\t\t     const char **constraints, enum machine_mode *modes)\n+\t\t     const char **constraints, enum machine_mode *modes,\n+\t\t     location_t *loc)\n {\n   int i;\n   int noperands;\n-  const char *template = 0;\n+  rtx asmop = 0;\n \n   if (GET_CODE (body) == SET && GET_CODE (SET_SRC (body)) == ASM_OPERANDS)\n     {\n-      rtx asmop = SET_SRC (body);\n+      asmop = SET_SRC (body);\n       /* Single output operand: BODY is (set OUTPUT (asm_operands ....)).  */\n \n       noperands = ASM_OPERANDS_INPUT_LENGTH (asmop) + 1;\n@@ -1527,11 +1528,10 @@ decode_asm_operands (rtx body, rtx *operands, rtx **operand_locs,\n \tconstraints[0] = ASM_OPERANDS_OUTPUT_CONSTRAINT (asmop);\n       if (modes)\n \tmodes[0] = GET_MODE (SET_DEST (body));\n-      template = ASM_OPERANDS_TEMPLATE (asmop);\n     }\n   else if (GET_CODE (body) == ASM_OPERANDS)\n     {\n-      rtx asmop = body;\n+      asmop = body;\n       /* No output operands: BODY is (asm_operands ....).  */\n \n       noperands = ASM_OPERANDS_INPUT_LENGTH (asmop);\n@@ -1549,13 +1549,12 @@ decode_asm_operands (rtx body, rtx *operands, rtx **operand_locs,\n \t  if (modes)\n \t    modes[i] = ASM_OPERANDS_INPUT_MODE (asmop, i);\n \t}\n-      template = ASM_OPERANDS_TEMPLATE (asmop);\n     }\n   else if (GET_CODE (body) == PARALLEL\n \t   && GET_CODE (XVECEXP (body, 0, 0)) == SET\n \t   && GET_CODE (SET_SRC (XVECEXP (body, 0, 0))) == ASM_OPERANDS)\n     {\n-      rtx asmop = SET_SRC (XVECEXP (body, 0, 0));\n+      asmop = SET_SRC (XVECEXP (body, 0, 0));\n       int nparallel = XVECLEN (body, 0); /* Includes CLOBBERs.  */\n       int nin = ASM_OPERANDS_INPUT_LENGTH (asmop);\n       int nout = 0;\t\t/* Does not include CLOBBERs.  */\n@@ -1591,15 +1590,13 @@ decode_asm_operands (rtx body, rtx *operands, rtx **operand_locs,\n \t  if (modes)\n \t    modes[i + nout] = ASM_OPERANDS_INPUT_MODE (asmop, i);\n \t}\n-\n-      template = ASM_OPERANDS_TEMPLATE (asmop);\n     }\n   else if (GET_CODE (body) == PARALLEL\n \t   && GET_CODE (XVECEXP (body, 0, 0)) == ASM_OPERANDS)\n     {\n       /* No outputs, but some CLOBBERs.  */\n \n-      rtx asmop = XVECEXP (body, 0, 0);\n+      asmop = XVECEXP (body, 0, 0);\n       int nin = ASM_OPERANDS_INPUT_LENGTH (asmop);\n \n       for (i = 0; i < nin; i++)\n@@ -1614,10 +1611,19 @@ decode_asm_operands (rtx body, rtx *operands, rtx **operand_locs,\n \t    modes[i] = ASM_OPERANDS_INPUT_MODE (asmop, i);\n \t}\n \n-      template = ASM_OPERANDS_TEMPLATE (asmop);\n     }\n \n-  return template;\n+  if (loc)\n+    {\n+#ifdef USE_MAPPED_LOCATION\n+      *loc = ASM_OPERANDS_SOURCE_LOCATION (asmop);\n+#else\n+      loc->file = ASM_OPERANDS_SOURCE_FILE (asmop);\n+      loc->line = ASM_OPERANDS_SOURCE_LINE (asmop);\n+#endif\n+    }\n+\n+  return ASM_OPERANDS_TEMPLATE (asmop);\n }\n \n /* Check if an asm_operand matches its constraints.\n@@ -2086,7 +2092,7 @@ extract_insn (rtx insn)\n \t  decode_asm_operands (body, recog_data.operand,\n \t\t\t       recog_data.operand_loc,\n \t\t\t       recog_data.constraints,\n-\t\t\t       recog_data.operand_mode);\n+\t\t\t       recog_data.operand_mode, NULL);\n \t  if (noperands > 0)\n \t    {\n \t      const char *p =  recog_data.constraints[0];"}, {"sha": "2aad6b0c15ab5e4e32af083621b44b8ea2af83b6", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e", "patch": "@@ -1365,7 +1365,7 @@ maybe_fix_stack_asms (void)\n \n       /* Get the operand values and constraints out of the insn.  */\n       decode_asm_operands (pat, recog_data.operand, recog_data.operand_loc,\n-\t\t\t   constraints, operand_mode);\n+\t\t\t   constraints, operand_mode, NULL);\n \n       /* For every operand, see what registers are allowed.  */\n       for (i = 0; i < noperands; i++)"}, {"sha": "a49f1649e8a79b3ffdd52f8a5dc4824089914fdc", "filename": "gcc/rtl.def", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e", "patch": "@@ -168,15 +168,15 @@ DEF_RTL_EXPR(COND_EXEC, \"cond_exec\", \"ee\", RTX_EXTRA)\n /* Several operations to be done in parallel (perhaps under COND_EXEC).  */\n DEF_RTL_EXPR(PARALLEL, \"parallel\", \"E\", RTX_EXTRA)\n \n+#ifdef USE_MAPPED_LOCATION\n /* A string that is passed through to the assembler as input.\n      One can obviously pass comments through by using the\n      assembler comment syntax.\n      These occur in an insn all by themselves as the PATTERN.\n      They also appear inside an ASM_OPERANDS\n      as a convenient way to hold a string.  */\n-DEF_RTL_EXPR(ASM_INPUT, \"asm_input\", \"s\", RTX_EXTRA)\n+DEF_RTL_EXPR(ASM_INPUT, \"asm_input\", \"si\", RTX_EXTRA)\n \n-#ifdef USE_MAPPED_LOCATION\n /* An assembler instruction with operands.\n    1st operand is the instruction template.\n    2nd operand is the constraint for the output.\n@@ -190,6 +190,14 @@ DEF_RTL_EXPR(ASM_INPUT, \"asm_input\", \"s\", RTX_EXTRA)\n    6th is the source line number.  */\n DEF_RTL_EXPR(ASM_OPERANDS, \"asm_operands\", \"ssiEEi\", RTX_EXTRA)\n #else\n+/* A string that is passed through to the assembler as input.\n+     One can obviously pass comments through by using the\n+     assembler comment syntax.\n+     These occur in an insn all by themselves as the PATTERN.\n+     They also appear inside an ASM_OPERANDS\n+     as a convenient way to hold a string.  */\n+DEF_RTL_EXPR(ASM_INPUT, \"asm_input\", \"ssi\", RTX_EXTRA)\n+\n /* An assembler instruction with operands.\n    1st operand is the instruction template.\n    2nd operand is the constraint for the output."}, {"sha": "5c39efeecf06cf2415639e9945e46a3d682ef618", "filename": "gcc/rtl.h", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e", "patch": "@@ -1090,9 +1090,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n   GET_MODE (XCVECEXP (RTX, 4, N, ASM_OPERANDS))\n #ifdef USE_MAPPED_LOCATION\n #define ASM_OPERANDS_SOURCE_LOCATION(RTX) XCUINT (RTX, 5, ASM_OPERANDS)\n+#define ASM_INPUT_SOURCE_LOCATION(RTX) XCUINT (RTX, 1, ASM_INPUT)\n #else\n #define ASM_OPERANDS_SOURCE_FILE(RTX) XCSTR (RTX, 5, ASM_OPERANDS)\n #define ASM_OPERANDS_SOURCE_LINE(RTX) XCINT (RTX, 6, ASM_OPERANDS)\n+#define ASM_INPUT_SOURCE_FILE(RTX) XCSTR (RTX, 1, ASM_INPUT)\n+#define ASM_INPUT_SOURCE_LINE(RTX) XCINT (RTX, 2, ASM_INPUT)\n #endif\n \n /* 1 if RTX is a mem that is statically allocated in read-only memory.  */\n@@ -1767,7 +1770,7 @@ extern void free_reg_info (void);\n /* recog.c */\n extern int asm_noperands (rtx);\n extern const char *decode_asm_operands (rtx, rtx *, rtx **, const char **,\n-\t\t\t\t\tenum machine_mode *);\n+\t\t\t\t\tenum machine_mode *, location_t *);\n \n extern enum reg_class reg_preferred_class (int);\n extern enum reg_class reg_alternate_class (int);\n@@ -1864,7 +1867,17 @@ extern GTY(()) rtx return_address_pointer_rtx;\n \n #ifndef GENERATOR_FILE\n #include \"genrtl.h\"\n-#ifndef USE_MAPPED_LOCATION\n+#undef gen_rtx_ASM_INPUT\n+#ifdef USE_MAPPED_LOCATION\n+#define gen_rtx_ASM_INPUT(MODE, ARG0)\t\t\t\t\\\n+  gen_rtx_fmt_si (ASM_INPUT, (MODE), (ARG0), 0)\n+#define gen_rtx_ASM_INPUT_loc(MODE, ARG0, LOC)\t\t\t\\\n+  gen_rtx_fmt_si (ASM_INPUT, (MODE), (ARG0), (LOC))\n+#else\n+#define gen_rtx_ASM_INPUT(MODE, ARG0)\t\t\t\t\\\n+  gen_rtx_fmt_ssi (ASM_INPUT, (MODE), (ARG0), NULL, 0)\n+#define gen_rtx_ASM_INPUT_loc(MODE, ARG0, LOC)\t\t\t\\\n+  gen_rtx_fmt_ssi (ASM_INPUT, (MODE), (ARG0), (LOC).file, (LOC).line)\n #undef gen_rtx_ASM_OPERANDS\n #define gen_rtx_ASM_OPERANDS(MODE, ARG0, ARG1, ARG2, ARG3, ARG4, LOC) \\\n   gen_rtx_fmt_ssiEEsi (ASM_OPERANDS, (MODE), (ARG0), (ARG1), (ARG2), (ARG3), (ARG4), (LOC).file, (LOC).line)"}, {"sha": "20ce1aa4d50c78b2d95acd7a23766a1930bec6d4", "filename": "gcc/stmt.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=bff4b63d31059f3ebf918e70ca00d5eb4dcbc62e", "patch": "@@ -1,6 +1,6 @@\n /* Expands front end tree to back end RTL for GCC\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,\n-   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -260,15 +260,16 @@ n_occurrences (int c, const char *s)\n    insn is volatile; don't optimize it.  */\n \n static void\n-expand_asm (tree string, int vol)\n+expand_asm_loc (tree string, int vol, location_t locus)\n {\n   rtx body;\n \n   if (TREE_CODE (string) == ADDR_EXPR)\n     string = TREE_OPERAND (string, 0);\n \n-  body = gen_rtx_ASM_INPUT (VOIDmode,\n-\t\t\t    ggc_strdup (TREE_STRING_POINTER (string)));\n+  body = gen_rtx_ASM_INPUT_loc (VOIDmode,\n+\t\t\t\tggc_strdup (TREE_STRING_POINTER (string)),\n+\t\t\t\tlocus);\n \n   MEM_VOLATILE_P (body) = vol;\n \n@@ -1094,7 +1095,7 @@ expand_asm_expr (tree exp)\n \n   if (ASM_INPUT_P (exp))\n     {\n-      expand_asm (ASM_STRING (exp), ASM_VOLATILE_P (exp));\n+      expand_asm_loc (ASM_STRING (exp), ASM_VOLATILE_P (exp), input_location);\n       return;\n     }\n "}]}