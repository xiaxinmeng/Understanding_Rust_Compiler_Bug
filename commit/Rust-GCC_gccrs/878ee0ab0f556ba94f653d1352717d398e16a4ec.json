{"sha": "878ee0ab0f556ba94f653d1352717d398e16a4ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc4ZWUwYWIwZjU1NmJhOTRmNjUzZDEzNTI3MTdkMzk4ZTE2YTRlYw==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2010-02-21T03:58:51Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2010-02-21T03:58:51Z"}, "message": "configure.ac: Test if linker and assembler properly support GOTDATA_OP relocations.\n\ngcc/\n\n2010-02-20  David S. Miller  <davem@davemloft.net>\n\n\t* configure.ac: Test if linker and assembler properly support\n\tGOTDATA_OP relocations.\n\t* configure: Rebuild.\n\t* config.in: Likewise.\n\t* config/sparc/sparc.md (UNSPEC_MOVE_GOTDATA): New.\n\t(movsi_lo_sum_pic): Use %gdop_*() relocs if available.\n\t(movsi_high_pic): Likewise.\n\t(movdi_lo_sum_pic): Likewise.\n\t(movdi_high_pic): Likewise.\n\t(movsi_pic_gotdata_op): New pattern.\n\t(movdi_pic_gotdata_op): Likewise.\n\t* config/sparc/sparc.c (legitimize_pic_address): If flag_pic is 2,\n\temit gen_mov{si,di}_pic_gotdata_op for the GOT slot load.\n\nFrom-SVN: r156933", "tree": {"sha": "1f268d9d146f9c7ed9d1caef3cd9d4aadc1046a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f268d9d146f9c7ed9d1caef3cd9d4aadc1046a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/878ee0ab0f556ba94f653d1352717d398e16a4ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878ee0ab0f556ba94f653d1352717d398e16a4ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/878ee0ab0f556ba94f653d1352717d398e16a4ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878ee0ab0f556ba94f653d1352717d398e16a4ec/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9cd1520f413cbe44a7dcde1663a12af958594f44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cd1520f413cbe44a7dcde1663a12af958594f44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cd1520f413cbe44a7dcde1663a12af958594f44"}], "stats": {"total": 175, "additions": 167, "deletions": 8}, "files": [{"sha": "8975aea4f16863af5fb453b6f5ed77863f75f829", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878ee0ab0f556ba94f653d1352717d398e16a4ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878ee0ab0f556ba94f653d1352717d398e16a4ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=878ee0ab0f556ba94f653d1352717d398e16a4ec", "patch": "@@ -1,3 +1,19 @@\n+2010-02-20  David S. Miller  <davem@davemloft.net>\n+\n+\t* configure.ac: Test if linker and assembler properly support\n+\tGOTDATA_OP relocations.\n+\t* configure: Rebuild.\n+\t* config.in: Likewise.\n+\t* config/sparc/sparc.md (UNSPEC_MOVE_GOTDATA): New.\n+\t(movsi_lo_sum_pic): Use %gdop_*() relocs if available.\n+\t(movsi_high_pic): Likewise.\n+\t(movdi_lo_sum_pic): Likewise.\n+\t(movdi_high_pic): Likewise.\n+\t(movsi_pic_gotdata_op): New pattern.\n+\t(movdi_pic_gotdata_op): Likewise.\n+\t* config/sparc/sparc.c (legitimize_pic_address): If flag_pic is 2,\n+\temit gen_mov{si,di}_pic_gotdata_op for the GOT slot load.\n+\t\n 2010-02-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/43067"}, {"sha": "98dffa73b2c8f9b951511659ec79778293a22703", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878ee0ab0f556ba94f653d1352717d398e16a4ec/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878ee0ab0f556ba94f653d1352717d398e16a4ec/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=878ee0ab0f556ba94f653d1352717d398e16a4ec", "patch": "@@ -417,6 +417,12 @@\n #endif\n \n \n+/* Define if your assembler and linker support GOTDATA_OP relocs. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_SPARC_GOTDATA_OP\n+#endif\n+\n+\n /* Define if your assembler and linker support unaligned PC relative relocs.\n    */\n #ifndef USED_FOR_TARGET"}, {"sha": "c45460db4db57a15520f066f4947817da5c7c3dc", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878ee0ab0f556ba94f653d1352717d398e16a4ec/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878ee0ab0f556ba94f653d1352717d398e16a4ec/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=878ee0ab0f556ba94f653d1352717d398e16a4ec", "patch": "@@ -3374,6 +3374,8 @@ legitimize_tls_address (rtx addr)\n static rtx\n legitimize_pic_address (rtx orig, rtx reg)\n {\n+  bool gotdata_op = false;\n+\n   if (GET_CODE (orig) == SYMBOL_REF\n       /* See the comment in sparc_expand_move.  */\n       || (TARGET_VXWORKS_RTP && GET_CODE (orig) == LABEL_REF))\n@@ -3410,15 +3412,28 @@ legitimize_pic_address (rtx orig, rtx reg)\n \t      emit_insn (gen_movsi_lo_sum_pic (temp_reg, temp_reg, orig));\n \t    }\n \t  address = temp_reg;\n+\t  gotdata_op = true;\n \t}\n       else\n \taddress = orig;\n \n-      pic_ref = gen_const_mem (Pmode,\n-\t\t\t       gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t     pic_offset_table_rtx, address));\n       crtl->uses_pic_offset_table = 1;\n-      insn = emit_move_insn (reg, pic_ref);\n+      if (gotdata_op)\n+\t{\n+\t  if (TARGET_ARCH64)\n+\t    insn = emit_insn (gen_movdi_pic_gotdata_op (reg, pic_offset_table_rtx,\n+\t\t\t\t\t\t\taddress, orig));\n+\t  else\n+\t    insn = emit_insn (gen_movsi_pic_gotdata_op (reg, pic_offset_table_rtx,\n+\t\t\t\t\t\t\taddress, orig));\n+\t}\n+      else\n+\t{\n+\t  pic_ref = gen_const_mem (Pmode,\n+\t\t\t\t   gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t pic_offset_table_rtx, address));\n+\t  insn = emit_move_insn (reg, pic_ref);\n+\t}\n       /* Put a REG_EQUAL note on this insn, so that it can be optimized\n \t by loop.  */\n       set_unique_reg_note (insn, REG_EQUAL, orig);"}, {"sha": "586c06655f3de58beee091c904d1e1e5ac5917c6", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 59, "deletions": 4, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878ee0ab0f556ba94f653d1352717d398e16a4ec/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878ee0ab0f556ba94f653d1352717d398e16a4ec/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=878ee0ab0f556ba94f653d1352717d398e16a4ec", "patch": "@@ -38,6 +38,7 @@\n    (UNSPEC_EMB_TEXTHI\t\t14)\n    (UNSPEC_EMB_TEXTULO\t\t15)\n    (UNSPEC_EMB_SETHM\t\t18)\n+   (UNSPEC_MOVE_GOTDATA\t\t19)\n \n    (UNSPEC_MEMBAR\t\t20)\n \n@@ -1224,13 +1225,40 @@\n         (lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")\n                    (unspec:SI [(match_operand:SI 2 \"immediate_operand\" \"in\")] UNSPEC_MOVE_PIC)))]\n   \"flag_pic\"\n-  \"or\\t%1, %%lo(%a2), %0\")\n+{\n+#ifdef HAVE_AS_SPARC_GOTDATA_OP\n+  return \"xor\\t%1, %%gdop_lox10(%a2), %0\";\n+#else\n+  return \"or\\t%1, %%lo(%a2), %0\";\n+#endif\n+})\n \n (define_insn \"movsi_high_pic\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n         (high:SI (unspec:SI [(match_operand 1 \"\" \"\")] UNSPEC_MOVE_PIC)))]\n   \"flag_pic && check_pic (1)\"\n-  \"sethi\\t%%hi(%a1), %0\")\n+{\n+#ifdef HAVE_AS_SPARC_GOTDATA_OP\n+  return \"sethi\\t%%gdop_hix22(%a1), %0\";\n+#else\n+  return \"sethi\\t%%hi(%a1), %0\";\n+#endif\n+})\n+\n+(define_insn \"movsi_pic_gotdata_op\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t            (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t    (match_operand 3 \"symbolic_operand\" \"\")] UNSPEC_MOVE_GOTDATA))]\n+  \"flag_pic && check_pic (1)\"\n+{\n+#ifdef HAVE_AS_SPARC_GOTDATA_OP\n+  return \"ld\\t[%1 + %2], %0, %%gdop(%a3)\";\n+#else\n+  return \"ld\\t[%1 + %2], %0\";\n+#endif\n+}\n+  [(set_attr \"type\" \"load\")])\n \n (define_expand \"movsi_pic_label_ref\"\n   [(set (match_dup 3) (high:SI\n@@ -1430,13 +1458,40 @@\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                    (unspec:DI [(match_operand:DI 2 \"immediate_operand\" \"in\")] UNSPEC_MOVE_PIC)))]\n   \"TARGET_ARCH64 && flag_pic\"\n-  \"or\\t%1, %%lo(%a2), %0\")\n+{\n+#ifdef HAVE_AS_SPARC_GOTDATA_OP\n+  return \"xor\\t%1, %%gdop_lox10(%a2), %0\";\n+#else\n+  return \"or\\t%1, %%lo(%a2), %0\";\n+#endif\n+})\n \n (define_insn \"movdi_high_pic\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (unspec:DI [(match_operand 1 \"\" \"\")] UNSPEC_MOVE_PIC)))]\n   \"TARGET_ARCH64 && flag_pic && check_pic (1)\"\n-  \"sethi\\t%%hi(%a1), %0\")\n+{\n+#ifdef HAVE_AS_SPARC_GOTDATA_OP\n+  return \"sethi\\t%%gdop_hix22(%a1), %0\";\n+#else\n+  return \"sethi\\t%%hi(%a1), %0\";\n+#endif\n+})\n+\n+(define_insn \"movdi_pic_gotdata_op\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n+\t            (match_operand:DI 2 \"register_operand\" \"r\")\n+\t\t    (match_operand 3 \"symbolic_operand\" \"\")] UNSPEC_MOVE_GOTDATA))]\n+  \"TARGET_ARCH64 && flag_pic && check_pic (1)\"\n+{\n+#ifdef HAVE_AS_SPARC_GOTDATA_OP\n+  return \"ldx\\t[%1 + %2], %0, %%gdop(%a3)\";\n+#else\n+  return \"ldx\\t[%1 + %2], %0\";\n+#endif\n+}\n+  [(set_attr \"type\" \"load\")])\n \n (define_insn \"*sethi_di_medlow_embmedany_pic\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")"}, {"sha": "938f5c1d9f4456692505b33d0ac56660478389d3", "filename": "gcc/configure", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878ee0ab0f556ba94f653d1352717d398e16a4ec/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878ee0ab0f556ba94f653d1352717d398e16a4ec/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=878ee0ab0f556ba94f653d1352717d398e16a4ec", "patch": "@@ -22489,6 +22489,51 @@ if test $gcc_cv_as_sparc_relax = yes; then\n \n $as_echo \"#define HAVE_AS_RELAX_OPTION 1\" >>confdefs.h\n \n+fi\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for GOTDATA_OP relocs\" >&5\n+$as_echo_n \"checking assembler for GOTDATA_OP relocs... \" >&6; }\n+if test \"${gcc_cv_as_sparc_gotdata_op+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_sparc_gotdata_op=no\n+  if test x$gcc_cv_as != x; then\n+    echo '.text\n+foo:\n+\tnop\n+bar:\n+\tsethi %gdop_hix22(foo), %g1\n+\txor    %g1, %gdop_lox10(foo), %g1\n+\tld    [%l7 + %g1], %g2, %gdop(foo)' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -K PIC -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tif test x$gcc_cv_ld != x \\\n+       && $gcc_cv_ld -o conftest conftest.o -G > /dev/null 2>&1 \\\n+       && (test x$gnu_ld_flag = xno \\\n+           || (test x$gcc_cv_objdump != x \\\n+               && $gcc_cv_objdump -s -j .text conftest.o 2> /dev/null \\\n+                  | grep ' 03000004 82186004 c405c001'> /dev/null 2>&1)); then\n+\t gcc_cv_as_sparc_gotdata_op=yes\n+       fi\n+       rm -f conftest\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_sparc_gotdata_op\" >&5\n+$as_echo \"$gcc_cv_as_sparc_gotdata_op\" >&6; }\n+if test $gcc_cv_as_sparc_gotdata_op = yes; then\n+\n+$as_echo \"#define HAVE_AS_SPARC_GOTDATA_OP 1\" >>confdefs.h\n+\n fi\n \n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for unaligned pcrel relocs\" >&5"}, {"sha": "fe1ac55d8632204c6c253dbf9001ad82915aaa93", "filename": "gcc/configure.ac", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878ee0ab0f556ba94f653d1352717d398e16a4ec/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878ee0ab0f556ba94f653d1352717d398e16a4ec/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=878ee0ab0f556ba94f653d1352717d398e16a4ec", "patch": "@@ -2944,6 +2944,28 @@ case \"$target\" in\n       [AC_DEFINE(HAVE_AS_RELAX_OPTION, 1,\n \t\t[Define if your assembler supports -relax option.])])\n \n+    gcc_GAS_CHECK_FEATURE([GOTDATA_OP relocs],\n+      gcc_cv_as_sparc_gotdata_op,,\n+      [-K PIC],\n+[.text\n+foo:\n+\tnop\n+bar:\n+\tsethi %gdop_hix22(foo), %g1\n+\txor    %g1, %gdop_lox10(foo), %g1\n+\tld    [[%l7 + %g1]], %g2, %gdop(foo)],\n+      [if test x$gcc_cv_ld != x \\\n+       && $gcc_cv_ld -o conftest conftest.o -G > /dev/null 2>&1 \\\n+       && (test x$gnu_ld_flag = xno \\\n+           || (test x$gcc_cv_objdump != x \\\n+               && $gcc_cv_objdump -s -j .text conftest.o 2> /dev/null \\\n+                  | grep ' 03000004 82186004 c405c001'> /dev/null 2>&1)); then\n+\t gcc_cv_as_sparc_gotdata_op=yes\n+       fi\n+       rm -f conftest],\n+      [AC_DEFINE(HAVE_AS_SPARC_GOTDATA_OP, 1,\n+\t\t[Define if your assembler and linker support GOTDATA_OP relocs.])])\n+\n     gcc_GAS_CHECK_FEATURE([unaligned pcrel relocs],\n       gcc_cv_as_sparc_ua_pcrel,,\n       [-K PIC],"}]}