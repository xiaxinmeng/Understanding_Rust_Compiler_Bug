{"sha": "2b59cf475a06f37c2b49631043f2896455923c3c", "node_id": "C_kwDOANBUbNoAKDJiNTljZjQ3NWEwNmYzN2MyYjQ5NjMxMDQzZjI4OTY0NTU5MjNjM2M", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-09T09:45:26Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-09T17:23:43Z"}, "message": "Return NULL for maybe_register_path when unprofitable.\n\nThis is a minor cleanup for maybe_register_path to return NULL when\nthe path is unprofitable.  It is needed for a follow-up patch to\ngenerate better dumps from the threader.\n\nThere is no change in behavior, since the only call to this function\nbails on !profitable_path_p.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* tree-ssa-threadbackward.c (back_threader::maybe_register_path):\n\tReturn NULL when unprofitable.", "tree": {"sha": "9442d450b2b2f0dd496fbd8305f6d0d9b29b7616", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9442d450b2b2f0dd496fbd8305f6d0d9b29b7616"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b59cf475a06f37c2b49631043f2896455923c3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b59cf475a06f37c2b49631043f2896455923c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b59cf475a06f37c2b49631043f2896455923c3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b59cf475a06f37c2b49631043f2896455923c3c/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d60c0a3eedea4d0f1d40806a5f95540a1a4219e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "84249544760c66f51754a2485de5f482aa79b8f0", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b59cf475a06f37c2b49631043f2896455923c3c/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b59cf475a06f37c2b49631043f2896455923c3c/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=2b59cf475a06f37c2b49631043f2896455923c3c", "patch": "@@ -186,11 +186,10 @@ back_threader::debug_counter ()\n   return true;\n }\n \n-// Register the current path for jump threading if it's profitable to\n-// do so.\n //\n-// Return the known taken edge out of the path, even if the path was\n-// not registered, or NULL if the taken edge could not be determined.\n+// Return NULL if it is unprofitable to thread this path, or the\n+// outgoing edge is unknown.  Return UNREACHABLE_EDGE if the path is\n+// unreachable.\n \n edge\n back_threader::maybe_register_path ()\n@@ -199,23 +198,26 @@ back_threader::maybe_register_path ()\n \n   if (taken_edge && taken_edge != UNREACHABLE_EDGE)\n     {\n-      // Avoid circular paths.\n       if (m_visited_bbs.contains (taken_edge->dest))\n-\treturn UNREACHABLE_EDGE;\n-\n-      bool irreducible = false;\n-      bool profitable\n-\t= m_profit.profitable_path_p (m_path, m_name, taken_edge, &irreducible);\n-\n-      if (profitable)\n \t{\n-\t  if (!debug_counter ())\n-\t    return NULL;\n-\n-\t  m_registry.register_path (m_path, taken_edge);\n+\t  // Avoid circular paths by indicating there is nothing to\n+\t  // see in this direction.\n+\t  taken_edge = UNREACHABLE_EDGE;\n+\t}\n+      else\n+\t{\n+\t  bool irreducible = false;\n+\t  if (m_profit.profitable_path_p (m_path, m_name, taken_edge,\n+\t\t\t\t\t  &irreducible)\n+\t      && debug_counter ())\n+\t    {\n+\t      m_registry.register_path (m_path, taken_edge);\n \n-\t  if (irreducible)\n-\t    vect_free_loop_info_assumptions (m_path[0]->loop_father);\n+\t      if (irreducible)\n+\t\tvect_free_loop_info_assumptions (m_path[0]->loop_father);\n+\t    }\n+\t  else\n+\t    taken_edge = NULL;\n \t}\n     }\n   return taken_edge;"}]}