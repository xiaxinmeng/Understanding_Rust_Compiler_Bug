{"sha": "aba938d6c3525450e70fe26e7d92a70761a5ba8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJhOTM4ZDZjMzUyNTQ1MGU3MGZlMjZlN2Q5MmE3MDc2MWE1YmE4ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-17T19:27:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-18T14:02:31Z"}, "message": "libstdc++: Enable doxygen processing for C++20 components\n\nImprove grouping, add @since and @deprecated information.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* doc/doxygen/user.cfg.in (PREDEFINED): Enable doxygen\n\tprocessing for C++20 components and components that depend on\n\tcompiler features.\n\t* include/bits/stl_algo.h (random_shuffle): Use @deprecated.\n\t* include/std/type_traits: Improve doxygen comments for C++20\n\ttraits.", "tree": {"sha": "61f78d5a88585af07e9a1fc326fb8d89ab32e95f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61f78d5a88585af07e9a1fc326fb8d89ab32e95f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aba938d6c3525450e70fe26e7d92a70761a5ba8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aba938d6c3525450e70fe26e7d92a70761a5ba8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aba938d6c3525450e70fe26e7d92a70761a5ba8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aba938d6c3525450e70fe26e7d92a70761a5ba8e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37620d575111caf3b24d4b9039808334e619c13a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37620d575111caf3b24d4b9039808334e619c13a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37620d575111caf3b24d4b9039808334e619c13a"}], "stats": {"total": 83, "additions": 65, "deletions": 18}, "files": [{"sha": "ab9e552701c9a78abe515f0a53fd03c88f898be1", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba938d6c3525450e70fe26e7d92a70761a5ba8e/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba938d6c3525450e70fe26e7d92a70761a5ba8e/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=aba938d6c3525450e70fe26e7d92a70761a5ba8e", "patch": "@@ -2384,7 +2384,7 @@ INCLUDE_FILE_PATTERNS  =\n # recursively expanded use the := operator instead of the = operator.\n # This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n \n-PREDEFINED             = __cplusplus=201703L \\\n+PREDEFINED             = __cplusplus=202002L \\\n                          __GTHREADS \\\n                          _GLIBCXX_HAS_GTHREADS \\\n                          _GLIBCXX_HAVE_TLS \\\n@@ -2427,6 +2427,13 @@ PREDEFINED             = __cplusplus=201703L \\\n                          __cpp_exceptions \\\n                          __cpp_rtti \\\n                          __cpp_inline_variables \\\n+                         __cpp_constexpr_dynamic_alloc \\\n+                         __cpp_aligned_new \\\n+                         __cpp_sized_deallocation \\\n+                         __cpp_concepts=209900 \\\n+                         __cpp_deduction_guides=209900 \\\n+                         __cpp_impl_three_way_comparison=209900 \\\n+                         __cpp_impl_coroutine \\\n                          ATOMIC_INT_LOCK_FREE=2 \\\n                          PB_DS_DATA_TRUE_INDICATOR \\\n                          PB_DS_STATIC_ASSERT=// \\\n@@ -2448,8 +2455,15 @@ PREDEFINED             = __cplusplus=201703L \\\n                          \"_GLIBCXX20_DEPRECATED(E)= \" \\\n                          \"_GLIBCXX20_DEPRECATED(E)= \" \\\n                          _GLIBCXX17_INLINE=inline \\\n-\t\t\t _GLIBCXX_CHRONO_INT64_T=int64_t \\\n-\t\t\t _GLIBCXX_DEFAULT_ABI_TAG\n+                         _GLIBCXX_CHRONO_INT64_T=int64_t \\\n+                         _GLIBCXX_DEFAULT_ABI_TAG \\\n+                         _GLIBCXX_USE_DEPRECATED \\\n+                         _GLIBCXX_HOSTED \\\n+                         \"__has_builtin(x)=1\" \\\n+                         _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP \\\n+                         _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE \\\n+                         _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED \\\n+                         _GLIBCXX_HAVE_BUILTIN_LAUNDER \\\n \n # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this\n # tag can be used to specify a list of macro names that should be expanded. The"}, {"sha": "5d12972ce2cd89602843c82b7f21fb1785c4fb62", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba938d6c3525450e70fe26e7d92a70761a5ba8e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba938d6c3525450e70fe26e7d92a70761a5ba8e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=aba938d6c3525450e70fe26e7d92a70761a5ba8e", "patch": "@@ -4545,6 +4545,10 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  Reorder the elements in the range @p [__first,__last) using a random\n    *  distribution, so that every possible ordering of the sequence is\n    *  equally likely.\n+   *\n+   *  @deprecated\n+   *  Since C++14 `std::random_shuffle` is not part of the C++ standard.\n+   *  Use `std::shuffle` instead, which was introduced in C++11.\n   */\n   template<typename _RandomAccessIterator>\n     _GLIBCXX14_DEPRECATED_SUGGEST(\"std::shuffle\")\n@@ -4581,6 +4585,10 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  provide a random distribution. Calling @p __rand(N) for a positive\n    *  integer @p N should return a randomly chosen integer from the\n    *  range [0,N).\n+   *\n+   *  @deprecated\n+   *  Since C++14 `std::random_shuffle` is not part of the C++ standard.\n+   *  Use `std::shuffle` instead, which was introduced in C++11.\n   */\n   template<typename _RandomAccessIterator, typename _RandomNumberGenerator>\n     _GLIBCXX14_DEPRECATED_SUGGEST(\"std::shuffle\")"}, {"sha": "1571800080060fd767a0b4d755f1ee84dba9c698", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba938d6c3525450e70fe26e7d92a70761a5ba8e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba938d6c3525450e70fe26e7d92a70761a5ba8e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=aba938d6c3525450e70fe26e7d92a70761a5ba8e", "patch": "@@ -551,7 +551,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n   /// __is_nullptr_t (deprecated extension).\n-  /// @deprecated Use `is_null_pointer` instead.\n+  /// @deprecated Non-standard. Use `is_null_pointer` instead.\n   template<typename _Tp>\n     struct __is_nullptr_t\n     : public is_null_pointer<_Tp>\n@@ -732,8 +732,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\"template argument must be a complete class or an unbounded array\");\n     };\n \n-  /** is_pod (deprecated in C++20)\n-   * @deprecated Use `is_standard_layout && is_trivial` instead.\n+  /** is_pod\n+   * @deprecated Deprecated in C++20.\n+   * Use `is_standard_layout && is_trivial` instead.\n    */\n   // Could use is_standard_layout && is_trivial instead of the builtin.\n   template<typename _Tp>\n@@ -747,7 +748,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   /** is_literal_type\n-   * @deprecated Deprecated in C++20. The idea of a literal type isn't useful.\n+   * @deprecated Deprecated in C++17, removed in C++20.\n+   * The idea of a literal type isn't useful.\n    */\n   template<typename _Tp>\n     struct\n@@ -3097,7 +3099,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * Each variable `is_xxx_v<T>` is a boolean constant with the same value\n    * as the `value` member of the corresponding type trait `is_xxx<T>`.\n    *\n-   * @since C++17\n+   * @since C++17 unless noted otherwise.\n    */\n \n   /**\n@@ -3286,6 +3288,7 @@ template<typename _Ret, typename _Fn, typename... _Args>\n #ifdef _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP\n # define __cpp_lib_has_unique_object_representations 201606\n   /// has_unique_object_representations\n+  /// @since C++17\n   template<typename _Tp>\n     struct has_unique_object_representations\n     : bool_constant<__has_unique_object_representations(\n@@ -3305,6 +3308,7 @@ template<typename _Ret, typename _Fn, typename... _Args>\n #ifdef _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE\n # define __cpp_lib_is_aggregate 201703\n   /// is_aggregate\n+  /// @since C++17\n   template<typename _Tp>\n     struct is_aggregate\n     : bool_constant<__is_aggregate(remove_cv_t<_Tp>)>\n@@ -3316,10 +3320,14 @@ template<typename _Ret, typename _Fn, typename... _Args>\n #endif\n #endif // C++17\n \n-#if __cplusplus > 201703L\n+#if __cplusplus >= 202002L\n+\n+  /** * Remove references and cv-qualifiers.\n+   * @since C++20\n+   * @{\n+   */\n #define __cpp_lib_remove_cvref 201711L\n \n-  /// Remove references and cv-qualifiers.\n   template<typename _Tp>\n     struct remove_cvref\n     : remove_cv<_Tp>\n@@ -3337,18 +3345,26 @@ template<typename _Ret, typename _Fn, typename... _Args>\n \n   template<typename _Tp>\n     using remove_cvref_t = typename remove_cvref<_Tp>::type;\n+  /// @}\n \n+  /** * Identity metafunction.\n+   * @since C++20\n+   * @{\n+   */\n #define __cpp_lib_type_identity 201806L\n-  /// Identity metafunction.\n   template<typename _Tp>\n     struct type_identity { using type = _Tp; };\n \n   template<typename _Tp>\n     using type_identity_t = typename type_identity<_Tp>::type;\n+  /// @}\n \n #define __cpp_lib_unwrap_ref 201811L\n \n-  /// Unwrap a reference_wrapper\n+  /** Unwrap a reference_wrapper\n+   * @since C++20\n+   * @{\n+   */\n   template<typename _Tp>\n     struct unwrap_reference { using type = _Tp; };\n \n@@ -3357,34 +3373,43 @@ template<typename _Ret, typename _Fn, typename... _Args>\n \n   template<typename _Tp>\n     using unwrap_reference_t = typename unwrap_reference<_Tp>::type;\n+  /// @}\n \n-  /// Decay type and if it's a reference_wrapper, unwrap it\n+  /** Decay type and if it's a reference_wrapper, unwrap it\n+   * @since C++20\n+   * @{\n+   */\n   template<typename _Tp>\n     struct unwrap_ref_decay { using type = unwrap_reference_t<decay_t<_Tp>>; };\n \n   template<typename _Tp>\n     using unwrap_ref_decay_t = typename unwrap_ref_decay<_Tp>::type;\n+  /// @}\n \n #define __cpp_lib_bounded_array_traits 201902L\n \n   /// True for a type that is an array of known bound.\n+  /// @since C++20\n   template<typename _Tp>\n     struct is_bounded_array\n     : public __is_array_known_bounds<_Tp>\n     { };\n \n   /// True for a type that is an array of unknown bound.\n+  /// @since C++20\n   template<typename _Tp>\n     struct is_unbounded_array\n     : public __is_array_unknown_bounds<_Tp>\n     { };\n \n   /// @ingroup variable_templates\n+  /// @since C++20\n   template<typename _Tp>\n     inline constexpr bool is_bounded_array_v\n       = is_bounded_array<_Tp>::value;\n \n   /// @ingroup variable_templates\n+  /// @since C++20\n   template<typename _Tp>\n     inline constexpr bool is_unbounded_array_v\n       = is_unbounded_array<_Tp>::value;\n@@ -3419,8 +3444,8 @@ template<typename _Ret, typename _Fn, typename... _Args>\n #if __cplusplus > 202002L\n #define __cpp_lib_is_scoped_enum 202011L\n \n+  /// True if the type is a scoped enumeration type.\n   /// @since C++23\n-  //@{\n \n   template<typename _Tp>\n     struct is_scoped_enum\n@@ -3443,22 +3468,22 @@ template<typename _Ret, typename _Fn, typename... _Args>\n     : bool_constant<!requires(_Tp __t, void(*__f)(int)) { __f(__t); }>\n     { };\n \n-  /**\n-   * @ingroup variable_templates\n-   */\n+  /// @ingroup variable_templates\n+  /// @since C++23\n   template<typename _Tp>\n     inline constexpr bool is_scoped_enum_v = is_scoped_enum<_Tp>::value;\n+\n #endif // C++23\n \n #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n \n #define __cpp_lib_is_constant_evaluated 201811L\n \n   /// Returns true only when called during constant evaluation.\n+  /// @since C++20\n   constexpr inline bool\n   is_constant_evaluated() noexcept\n   { return __builtin_is_constant_evaluated(); }\n-  /// @}\n #endif\n \n   /// @cond undocumented"}]}