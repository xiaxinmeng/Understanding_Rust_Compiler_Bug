{"sha": "92f0f3ec9210d529daa3271f6108e18600c9c2c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJmMGYzZWM5MjEwZDUyOWRhYTMyNzFmNjEwOGUxODYwMGM5YzJjMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-04-17T12:49:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-04-17T12:49:49Z"}, "message": "genmodes.c (struct mode_data): Add need_bytesize_adj field.\n\n\t* genmodes.c (struct mode_data): Add need_bytesize_adj field.\n\t(blank_mode): Initialize it.\n\t(emit_mode_size_inline, emit_mode_nunits_inline,\n\temit_mode_inner_inline): New functions.\n\t(emit_insn_modes_h): Call them and surround their output with\n\t#if GCC_VERSION >= 4001 ... #endif.\n\t* machmode.h (GET_MODE_SIZE, GET_MODE_NUNITS, GET_MODE_INNER):\n\tFor GCC_VERSION >= 4001 use mode_*_inline routines instead of\n\tmode_* arrays if the argument is __builtin_constant_p.\n\t* lower-subreg.c (dump_choices): Make sure GET_MODE_SIZE argument\n\tis enum machine_mode.\nfortran/\n\t* trans-types.c (gfc_init_kinds): Make sure GET_MODE_BITSIZE\n\targument is enum machine_mode.\n\nFrom-SVN: r209484", "tree": {"sha": "4c749de5dc4a776f1ab9f29f46405e370f12efcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c749de5dc4a776f1ab9f29f46405e370f12efcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92f0f3ec9210d529daa3271f6108e18600c9c2c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f0f3ec9210d529daa3271f6108e18600c9c2c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92f0f3ec9210d529daa3271f6108e18600c9c2c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f0f3ec9210d529daa3271f6108e18600c9c2c3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be55bfe6cf456943b12fe128f8a445b583ace36f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be55bfe6cf456943b12fe128f8a445b583ace36f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be55bfe6cf456943b12fe128f8a445b583ace36f"}], "stats": {"total": 150, "additions": 147, "deletions": 3}, "files": [{"sha": "ead28c2bf928261cc14c5a1b4ed74d08fe467ea5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f0f3ec9210d529daa3271f6108e18600c9c2c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f0f3ec9210d529daa3271f6108e18600c9c2c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92f0f3ec9210d529daa3271f6108e18600c9c2c3", "patch": "@@ -1,3 +1,17 @@\n+2014-04-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* genmodes.c (struct mode_data): Add need_bytesize_adj field.\n+\t(blank_mode): Initialize it.\n+\t(emit_mode_size_inline, emit_mode_nunits_inline,\n+\temit_mode_inner_inline): New functions.\n+\t(emit_insn_modes_h): Call them and surround their output with\n+\t#if GCC_VERSION >= 4001 ... #endif.\n+\t* machmode.h (GET_MODE_SIZE, GET_MODE_NUNITS, GET_MODE_INNER):\n+\tFor GCC_VERSION >= 4001 use mode_*_inline routines instead of\n+\tmode_* arrays if the argument is __builtin_constant_p.\n+\t* lower-subreg.c (dump_choices): Make sure GET_MODE_SIZE argument\n+\tis enum machine_mode.\n+\n 2014-04-17  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* passes.c (opt_pass::execute): Adjust."}, {"sha": "d2b666040d0953c9b8ba240c92c83f95c222476a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f0f3ec9210d529daa3271f6108e18600c9c2c3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f0f3ec9210d529daa3271f6108e18600c9c2c3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=92f0f3ec9210d529daa3271f6108e18600c9c2c3", "patch": "@@ -1,3 +1,8 @@\n+2014-04-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans-types.c (gfc_init_kinds): Make sure GET_MODE_BITSIZE\n+\targument is enum machine_mode.\n+\n 2014-04-13  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/58085"}, {"sha": "243feb7aedbc74674ec735dc547eb80f3a5b1e45", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f0f3ec9210d529daa3271f6108e18600c9c2c3/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f0f3ec9210d529daa3271f6108e18600c9c2c3/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=92f0f3ec9210d529daa3271f6108e18600c9c2c3", "patch": "@@ -373,7 +373,7 @@ gfc_init_kinds (void)\n       /* The middle end doesn't support constants larger than 2*HWI.\n \t Perhaps the target hook shouldn't have accepted these either,\n \t but just to be safe...  */\n-      bitsize = GET_MODE_BITSIZE (mode);\n+      bitsize = GET_MODE_BITSIZE ((enum machine_mode) mode);\n       if (bitsize > 2*HOST_BITS_PER_WIDE_INT)\n \tcontinue;\n "}, {"sha": "99078788c52c4c109df6653bff2c2384c0f971c9", "filename": "gcc/genmodes.c", "status": "modified", "additions": 108, "deletions": 1, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f0f3ec9210d529daa3271f6108e18600c9c2c3/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f0f3ec9210d529daa3271f6108e18600c9c2c3/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=92f0f3ec9210d529daa3271f6108e18600c9c2c3", "patch": "@@ -72,6 +72,8 @@ struct mode_data\n   unsigned int counter;\t\t/* Rank ordering of modes */\n   unsigned int ibit;\t\t/* the number of integral bits */\n   unsigned int fbit;\t\t/* the number of fractional bits */\n+  bool need_bytesize_adj;\t/* true if this mode need dynamic size\n+\t\t\t\t   adjustment */\n };\n \n static struct mode_data *modes[MAX_MODE_CLASS];\n@@ -82,7 +84,7 @@ static const struct mode_data blank_mode = {\n   0, \"<unknown>\", MAX_MODE_CLASS,\n   -1U, -1U, -1U, -1U,\n   0, 0, 0, 0, 0,\n-  \"<unknown>\", 0, 0, 0, 0\n+  \"<unknown>\", 0, 0, 0, 0, false\n };\n \n static htab_t modes_by_name;\n@@ -904,6 +906,105 @@ emit_max_int (void)\n   printf (\"#define MAX_BITSIZE_MODE_ANY_MODE (%d*BITS_PER_UNIT)\\n\", mmax);\n }\n \n+/* Emit mode_size_inline routine into insn-modes.h header.  */\n+static void\n+emit_mode_size_inline (void)\n+{\n+  int c;\n+  struct mode_adjust *a;\n+  struct mode_data *m;\n+\n+  /* Size adjustments must be propagated to all containing modes.  */\n+  for (a = adj_bytesize; a; a = a->next)\n+    {\n+      a->mode->need_bytesize_adj = true;\n+      for (m = a->mode->contained; m; m = m->next_cont)\n+\tm->need_bytesize_adj = true;\n+    }\n+\n+  printf (\"\\\n+#ifdef __cplusplus\\n\\\n+inline __attribute__((__always_inline__))\\n\\\n+#else\\n\\\n+extern __inline__ __attribute__((__always_inline__, __gnu_inline__))\\n\\\n+#endif\\n\\\n+unsigned char\\n\\\n+mode_size_inline (enum machine_mode mode)\\n\\\n+{\\n\\\n+  extern %sunsigned char mode_size[NUM_MACHINE_MODES];\\n\\\n+  switch (mode)\\n\\\n+    {\\n\", adj_bytesize ? \"\" : \"const \");\n+\n+  for_all_modes (c, m)\n+    if (!m->need_bytesize_adj)\n+      printf (\"    case %smode: return %u;\\n\", m->name, m->bytesize);\n+\n+  puts (\"\\\n+    default: return mode_size[mode];\\n\\\n+    }\\n\\\n+}\\n\");\n+}\n+\n+/* Emit mode_nunits_inline routine into insn-modes.h header.  */\n+static void\n+emit_mode_nunits_inline (void)\n+{\n+  int c;\n+  struct mode_data *m;\n+\n+  puts (\"\\\n+#ifdef __cplusplus\\n\\\n+inline __attribute__((__always_inline__))\\n\\\n+#else\\n\\\n+extern __inline__ __attribute__((__always_inline__, __gnu_inline__))\\n\\\n+#endif\\n\\\n+unsigned char\\n\\\n+mode_nunits_inline (enum machine_mode mode)\\n\\\n+{\\n\\\n+  extern const unsigned char mode_nunits[NUM_MACHINE_MODES];\\n\\\n+  switch (mode)\\n\\\n+    {\");\n+\n+  for_all_modes (c, m)\n+    printf (\"    case %smode: return %u;\\n\", m->name, m->ncomponents);\n+\n+  puts (\"\\\n+    default: return mode_nunits[mode];\\n\\\n+    }\\n\\\n+}\\n\");\n+}\n+\n+/* Emit mode_inner_inline routine into insn-modes.h header.  */\n+static void\n+emit_mode_inner_inline (void)\n+{\n+  int c;\n+  struct mode_data *m;\n+\n+  puts (\"\\\n+#ifdef __cplusplus\\n\\\n+inline __attribute__((__always_inline__))\\n\\\n+#else\\n\\\n+extern __inline__ __attribute__((__always_inline__, __gnu_inline__))\\n\\\n+#endif\\n\\\n+unsigned char\\n\\\n+mode_inner_inline (enum machine_mode mode)\\n\\\n+{\\n\\\n+  extern const unsigned char mode_inner[NUM_MACHINE_MODES];\\n\\\n+  switch (mode)\\n\\\n+    {\");\n+\n+  for_all_modes (c, m)\n+    printf (\"    case %smode: return %smode;\\n\", m->name,\n+\t    c != MODE_PARTIAL_INT && m->component\n+\t    ? m->component->name : void_mode->name);\n+\n+  puts (\"\\\n+    default: return mode_inner[mode];\\n\\\n+    }\\n\\\n+}\\n\");\n+}\n+\n static void\n emit_insn_modes_h (void)\n {\n@@ -969,6 +1070,12 @@ enum machine_mode\\n{\");\n   printf (\"#define CONST_MODE_IBIT%s\\n\", adj_ibit ? \"\" : \" const\");\n   printf (\"#define CONST_MODE_FBIT%s\\n\", adj_fbit ? \"\" : \" const\");\n   emit_max_int ();\n+  puts (\"\\n#if GCC_VERSION >= 4001\\n\");\n+  emit_mode_size_inline ();\n+  emit_mode_nunits_inline ();\n+  emit_mode_inner_inline ();\n+  puts (\"#endif /* GCC_VERSION >= 4001 */\");\n+\n   puts (\"\\\n \\n\\\n #endif /* insn-modes.h */\");"}, {"sha": "ae935f76459dc73c36f4f166dc7c16146b4b21ca", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f0f3ec9210d529daa3271f6108e18600c9c2c3/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f0f3ec9210d529daa3271f6108e18600c9c2c3/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=92f0f3ec9210d529daa3271f6108e18600c9c2c3", "patch": "@@ -1371,7 +1371,7 @@ dump_choices (bool speed_p, const char *description)\n   fprintf (dump_file, \"Choices when optimizing for %s:\\n\", description);\n \n   for (i = 0; i < MAX_MACHINE_MODE; i++)\n-    if (GET_MODE_SIZE (i) > UNITS_PER_WORD)\n+    if (GET_MODE_SIZE ((enum machine_mode) i) > UNITS_PER_WORD)\n       fprintf (dump_file, \"  %s mode %s for copy lowering.\\n\",\n \t       choices[speed_p].move_modes_to_split[i]\n \t       ? \"Splitting\""}, {"sha": "222e6263e0b3ee048bb4a43f199651d2e3865c0e", "filename": "gcc/machmode.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f0f3ec9210d529daa3271f6108e18600c9c2c3/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f0f3ec9210d529daa3271f6108e18600c9c2c3/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=92f0f3ec9210d529daa3271f6108e18600c9c2c3", "patch": "@@ -177,7 +177,13 @@ extern const unsigned char mode_class[NUM_MACHINE_MODES];\n /* Get the size in bytes and bits of an object of mode MODE.  */\n \n extern CONST_MODE_SIZE unsigned char mode_size[NUM_MACHINE_MODES];\n+#if GCC_VERSION >= 4001\n+#define GET_MODE_SIZE(MODE) \\\n+  ((unsigned short) (__builtin_constant_p (MODE) \\\n+\t\t     ? mode_size_inline (MODE) : mode_size[MODE]))\n+#else\n #define GET_MODE_SIZE(MODE)    ((unsigned short) mode_size[MODE])\n+#endif\n #define GET_MODE_BITSIZE(MODE) \\\n   ((unsigned short) (GET_MODE_SIZE (MODE) * BITS_PER_UNIT))\n \n@@ -203,7 +209,13 @@ extern const unsigned HOST_WIDE_INT mode_mask_array[NUM_MACHINE_MODES];\n /* Return the mode of the inner elements in a vector.  */\n \n extern const unsigned char mode_inner[NUM_MACHINE_MODES];\n+#if GCC_VERSION >= 4001\n+#define GET_MODE_INNER(MODE) \\\n+  ((enum machine_mode) (__builtin_constant_p (MODE) \\\n+\t\t\t? mode_inner_inline (MODE) : mode_inner[MODE]))\n+#else\n #define GET_MODE_INNER(MODE) ((enum machine_mode) mode_inner[MODE])\n+#endif\n \n /* Get the size in bytes or bites of the basic parts of an\n    object of mode MODE.  */\n@@ -224,7 +236,13 @@ extern const unsigned char mode_inner[NUM_MACHINE_MODES];\n /* Get the number of units in the object.  */\n \n extern const unsigned char mode_nunits[NUM_MACHINE_MODES];\n+#if GCC_VERSION >= 4001\n+#define GET_MODE_NUNITS(MODE) \\\n+  ((unsigned char) (__builtin_constant_p (MODE) \\\n+\t\t    ? mode_nunits_inline (MODE) : mode_nunits[MODE]))\n+#else\n #define GET_MODE_NUNITS(MODE)  mode_nunits[MODE]\n+#endif\n \n /* Get the next wider natural mode (eg, QI -> HI -> SI -> DI -> TI).  */\n "}]}