{"sha": "8e9ea4d72c8f0909db7eda507805a941d48348a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU5ZWE0ZDcyYzhmMDkwOWRiN2VkYTUwNzgwNWE5NDFkNDgzNDhhMg==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2004-02-05T06:52:26Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2004-02-05T06:52:26Z"}, "message": "Partially revert/redo 2003-10-01 change; fix -fworking-directory.\n\n\t* c-ppoutput.c (pp_dir_change):  New function.\n\t* c-common.h (pp_dir_change):  New declaration.\n\t* cpplib.h (struct cpp_options):  Remove working_directory field.\n\t* cppinit.c (cpp_find_main_file, cpp_push_main_file):  Merge back to\n\t(cpp_read_main_file):  as before 10-01.  Call _cpp_stack_file.\n\tDon't handle -fworking_directory here, but in c_common_post_options.\n\t(read_original_directory): Don't back up when done.\n\tDon't clear no-longer used working_directory flag.\n\t* cpplib.h:  Update declarations to match.\n\t* c-lex.c (cb_dir_change):  Move to c-opts.c.\n\t(init_c_lex):  Don't set dir_change callback here, since we want\n\tto set it even if flag_preprocess_only.\n\t* c-opts.c (cb_dir_change):  Function moved from c-lex.c.\n\t(c_common_post_options):  Set dir_change callback.\n\tCall pp_dir_change if approporiate.\n\t(finish_options):  Don't call cpp_find_main_file here.\tHence remove\n\tunneeded parameter and result. Do LC_RENAME for <built-in>.\n\t(c_common_post_options):  Call cpp_read_main_file here instead.\n\t(c_common_init):  Update accordingly.\n\t(push_command_line_include):  Don't cpp_push_main_file.\n\tDo LC_RENAME rather than LC_LEASE to get back to main file.\n\tCompared to pre-10-01 version, inline cpp_rename_to_main_file.\n\t(c_common_parse_file):  Call cpp_read_main_file for subsequent main\n\tfiles, but call finish_options for all files.\n\t* c-opts.c (sanitize_cpp_opts):  Don't set cpp_opts->working_directory.\n\t* fix-header.c (read_scan_file):  Call cpp_read_main_file instead of\n\tcpp_find_main_file + cpp_push_main_file.\n\t* c-lex.c (fe_file_change):  Don't set main_input_filename here.\n\t* opts.c (handle_options):  Only set main_input_filename first time.\n\nFrom-SVN: r77303", "tree": {"sha": "a8cb79fee4ffa92207a17795cfa3750745b8d001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8cb79fee4ffa92207a17795cfa3750745b8d001"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e9ea4d72c8f0909db7eda507805a941d48348a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9ea4d72c8f0909db7eda507805a941d48348a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e9ea4d72c8f0909db7eda507805a941d48348a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9ea4d72c8f0909db7eda507805a941d48348a2/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5384443a5f76667b12ccde8451b5a59faefb36da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5384443a5f76667b12ccde8451b5a59faefb36da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5384443a5f76667b12ccde8451b5a59faefb36da"}], "stats": {"total": 200, "additions": 111, "deletions": 89}, "files": [{"sha": "79977d1ea2150ae4f241bbbb6a2dad2fc4107b58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9ea4d72c8f0909db7eda507805a941d48348a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9ea4d72c8f0909db7eda507805a941d48348a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e9ea4d72c8f0909db7eda507805a941d48348a2", "patch": "@@ -1,3 +1,36 @@\n+2004-02-04  Per Bothner  <per@bothner.com>\n+\n+\tPartially revert/redo 2003-10-01 change; fix -fworking-directory.\n+\t* c-ppoutput.c (pp_dir_change):  New function.\n+\t* c-common.h (pp_dir_change):  New declaration.\n+\t* cpplib.h (struct cpp_options):  Remove working_directory field.\n+\t* cppinit.c (cpp_find_main_file, cpp_push_main_file):  Merge back to\n+\t(cpp_read_main_file):  as before 10-01.  Call _cpp_stack_file.\n+\tDon't handle -fworking_directory here, but in c_common_post_options.\n+\t(read_original_directory): Don't back up when done.\n+\tDon't clear no-longer used working_directory flag.\n+\t* cpplib.h:  Update declarations to match.\n+\t* c-lex.c (cb_dir_change):  Move to c-opts.c.\n+\t(init_c_lex):  Don't set dir_change callback here, since we want\n+\tto set it even if flag_preprocess_only.\n+\t* c-opts.c (cb_dir_change):  Function moved from c-lex.c.\n+\t(c_common_post_options):  Set dir_change callback.\n+\tCall pp_dir_change if approporiate.\n+\t(finish_options):  Don't call cpp_find_main_file here.\tHence remove\n+\tunneeded parameter and result. Do LC_RENAME for <built-in>.\n+\t(c_common_post_options):  Call cpp_read_main_file here instead.\n+\t(c_common_init):  Update accordingly.\n+\t(push_command_line_include):  Don't cpp_push_main_file.\n+\tDo LC_RENAME rather than LC_LEASE to get back to main file.\n+\tCompared to pre-10-01 version, inline cpp_rename_to_main_file.\n+\t(c_common_parse_file):  Call cpp_read_main_file for subsequent main\n+\tfiles, but call finish_options for all files.\n+\t* c-opts.c (sanitize_cpp_opts):  Don't set cpp_opts->working_directory.\n+\t* fix-header.c (read_scan_file):  Call cpp_read_main_file instead of\n+\tcpp_find_main_file + cpp_push_main_file.\n+\t* c-lex.c (fe_file_change):  Don't set main_input_filename here.\n+\t* opts.c (handle_options):  Only set main_input_filename first time.\n+\n 2004-02-05  Ian Lance Taylor  <ian@wasabisystems.com>\n \n \t* config/arm/arm.h (REG_CLASS_NAMES): Add missing comma."}, {"sha": "f948e44c6949d14079d6e4ff878538156fe2afd0", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9ea4d72c8f0909db7eda507805a941d48348a2/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9ea4d72c8f0909db7eda507805a941d48348a2/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=8e9ea4d72c8f0909db7eda507805a941d48348a2", "patch": "@@ -1340,5 +1340,6 @@ extern void objc_mark_locals_volatile (void *);\n extern void init_pp_output (FILE *);\n extern void preprocess_file (cpp_reader *);\n extern void pp_file_change (const struct line_map *);\n+extern void pp_dir_change (cpp_reader *, const char *);\n \n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "aba571fab9a211eb73b9cca1c6e48f0642d3fba4", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9ea4d72c8f0909db7eda507805a941d48348a2/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9ea4d72c8f0909db7eda507805a941d48348a2/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=8e9ea4d72c8f0909db7eda507805a941d48348a2", "patch": "@@ -69,7 +69,6 @@ static tree lex_charconst (const cpp_token *);\n static void update_header_times (const char *);\n static int dump_one_header (splay_tree_node, void *);\n static void cb_line_change (cpp_reader *, const cpp_token *, int);\n-static void cb_dir_change (cpp_reader *, const char *);\n static void cb_ident (cpp_reader *, unsigned int, const cpp_string *);\n static void cb_def_pragma (cpp_reader *, unsigned int);\n static void cb_define (cpp_reader *, unsigned int, cpp_hashnode *);\n@@ -96,7 +95,6 @@ init_c_lex (void)\n   cb = cpp_get_callbacks (parse_in);\n \n   cb->line_change = cb_line_change;\n-  cb->dir_change = cb_dir_change;\n   cb->ident = cb_ident;\n   cb->def_pragma = cb_def_pragma;\n   cb->valid_pch = c_common_valid_pch;\n@@ -202,13 +200,6 @@ cb_line_change (cpp_reader *pfile ATTRIBUTE_UNUSED, const cpp_token *token,\n   input_line = SOURCE_LINE (map, token->line);\n }\n \n-static void\n-cb_dir_change (cpp_reader *pfile ATTRIBUTE_UNUSED, const char *dir)\n-{\n-  if (! set_src_pwd (dir))\n-    warning (\"too late for # directive to set debug directory\");\n-}\n-\n void\n fe_file_change (const struct line_map *new_map)\n {\n@@ -222,9 +213,7 @@ fe_file_change (const struct line_map *new_map)\n     {\n       /* Don't stack the main buffer on the input stack;\n \t we already did in compile_file.  */\n-      if (map == NULL)\n-\tmain_input_filename = new_map->to_file;\n-      else\n+      if (map != NULL)\n \t{\n           int included_at = SOURCE_LINE (new_map - 1, new_map->from_line - 1);\n "}, {"sha": "6fbfd1cee6c3c0970b2f0090d9f215da5462d96f", "filename": "gcc/c-opts.c", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9ea4d72c8f0909db7eda507805a941d48348a2/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9ea4d72c8f0909db7eda507805a941d48348a2/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=8e9ea4d72c8f0909db7eda507805a941d48348a2", "patch": "@@ -108,7 +108,8 @@ static void sanitize_cpp_opts (void);\n static void add_prefixed_path (const char *, size_t);\n static void push_command_line_include (void);\n static void cb_file_change (cpp_reader *, const struct line_map *);\n-static bool finish_options (const char *);\n+static void cb_dir_change (cpp_reader *, const char *);\n+static void finish_options (void);\n \n #ifndef STDC_0_IN_SYSTEM_HEADERS\n #define STDC_0_IN_SYSTEM_HEADERS 0\n@@ -1053,8 +1054,10 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n \n /* Post-switch processing.  */\n bool\n-c_common_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n+c_common_post_options (const char **pfilename)\n {\n+  struct cpp_callbacks *cb;\n+\n   /* Canonicalize the input and output filenames.  */\n   if (in_fnames == NULL)\n     {\n@@ -1142,7 +1145,9 @@ c_common_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n       input_line = 0;\n     }\n \n-  cpp_get_callbacks (parse_in)->file_change = cb_file_change;\n+  cb = cpp_get_callbacks (parse_in);\n+  cb->file_change = cb_file_change;\n+  cb->dir_change = cb_dir_change;\n   cpp_post_options (parse_in);\n \n   saved_lineno = input_line;\n@@ -1152,6 +1157,14 @@ c_common_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n      immediately.  */\n   errorcount += cpp_errors (parse_in);\n \n+  *pfilename = this_input_filename\n+    = cpp_read_main_file (parse_in, in_fnames[0]);\n+  if (this_input_filename == NULL)\n+    return true;\n+\n+  if (flag_preprocess_only && flag_working_directory)\n+    pp_dir_change (parse_in, get_src_pwd ());\n+\n   return flag_preprocess_only;\n }\n \n@@ -1176,8 +1189,8 @@ c_common_init (void)\n \n   if (flag_preprocess_only)\n     {\n-      if (finish_options (in_fnames[0]))\n-\tpreprocess_file (parse_in);\n+      finish_options ();\n+      preprocess_file (parse_in);\n       return false;\n     }\n \n@@ -1211,10 +1224,12 @@ c_common_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n \n \t  /* Reset cpplib's macros and start a new file.  */\n \t  cpp_undef_all (parse_in);\n+\t  main_input_filename = this_input_filename\n+\t    = cpp_read_main_file (parse_in, in_fnames[file_index]);\n+\t  if (this_input_filename == NULL)\n+\t    break;\n \t}\n-\n-      if (! finish_options(in_fnames[file_index]))\n-\tbreak;\n+      finish_options ();\n       if (file_index == 0)\n \tpch_init();\n       c_parse_file ();\n@@ -1355,8 +1370,6 @@ sanitize_cpp_opts (void)\n      actually output the current directory?  */\n   if (flag_working_directory == -1)\n     flag_working_directory = (debug_info_level != DINFO_LEVEL_NONE);\n-  cpp_opts->working_directory\n-    = flag_preprocess_only && flag_working_directory;\n }\n \n /* Add include path with a prefix at the front of its name.  */\n@@ -1379,21 +1392,15 @@ add_prefixed_path (const char *suffix, size_t chain)\n   add_path (path, chain, 0);\n }\n \n-/* Handle -D, -U, -A, -imacros, and the first -include.  \n-   TIF is the input file to which we will return after processing all\n-   the includes.  Returns true on success.  */\n-static bool\n-finish_options (const char *tif)\n+/* Handle -D, -U, -A, -imacros, and the first -include.  */\n+static void\n+finish_options (void)\n {\n-  this_input_filename = tif;\n-  if (! cpp_find_main_file (parse_in, this_input_filename))\n-    return false;\n-\n   if (!cpp_opts->preprocessed)\n     {\n       size_t i;\n \n-      cpp_change_file (parse_in, LC_ENTER, _(\"<built-in>\"));\n+      cpp_change_file (parse_in, LC_RENAME, _(\"<built-in>\"));\n       cpp_init_builtins (parse_in, flag_hosted);\n       c_cpp_builtins (parse_in);\n \n@@ -1443,7 +1450,6 @@ finish_options (const char *tif)\n \n   include_cursor = 0;\n   push_command_line_include ();\n-  return true;\n }\n \n /* Give CPP the next file given by -include, if any.  */\n@@ -1462,12 +1468,15 @@ push_command_line_include (void)\n   if (include_cursor == deferred_count)\n     {\n       include_cursor++;\n-      /* Restore the line map from <command line>.  */\n-      if (! cpp_opts->preprocessed)\n-\tcpp_change_file (parse_in, LC_LEAVE, NULL);\n       /* -Wunused-macros should only warn about macros defined hereafter.  */\n       cpp_opts->warn_unused_macros = warn_unused_macros;\n-      cpp_push_main_file (parse_in);\n+      /* Restore the line map from <command line>.  */\n+      if (! cpp_opts->preprocessed)\n+\tcpp_change_file (parse_in, LC_RENAME, main_input_filename);\n+\n+      /* Set this here so the client can change the option if it wishes,\n+\t and after stacking the main file so we don't trace the main file.  */\n+      line_table.trace_includes = cpp_opts->print_include_names;\n     }\n }\n \n@@ -1485,6 +1494,13 @@ cb_file_change (cpp_reader *pfile ATTRIBUTE_UNUSED,\n     push_command_line_include ();\n }\n \n+void\n+cb_dir_change (cpp_reader *pfile ATTRIBUTE_UNUSED, const char *dir)\n+{\n+  if (! set_src_pwd (dir))\n+    warning (\"too late for # directive to set debug directory\");\n+}\n+\n /* Set the C 89 standard (with 1994 amendments if C94, without GNU\n    extensions if ISO).  There is no concept of gnu94.  */\n static void"}, {"sha": "f3f8f81c1c5904ed6a49cf8c828ce5bdf782711a", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9ea4d72c8f0909db7eda507805a941d48348a2/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9ea4d72c8f0909db7eda507805a941d48348a2/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=8e9ea4d72c8f0909db7eda507805a941d48348a2", "patch": "@@ -334,6 +334,22 @@ cb_include (cpp_reader *pfile ATTRIBUTE_UNUSED, fileline line,\n   print.line++;\n }\n \n+/* Callback called when -fworking-director and -E to emit working\n+   diretory in cpp output file. */\n+\n+void\n+pp_dir_change (cpp_reader *pfile ATTRIBUTE_UNUSED, const char *dir)\n+{\n+  size_t to_file_len = strlen (dir);\n+  unsigned char *to_file_quoted = alloca (to_file_len * 4 + 1);\n+  unsigned char *p;\n+\n+  /* cpp_quote_string does not nul-terminate, so we have to do it ourselves. */\n+  p = cpp_quote_string (to_file_quoted, (unsigned char *) dir, to_file_len);\n+  *p = '\\0';\n+  fprintf (print.outf, \"# 1 \\\"%s//\\\"\\n\", to_file_quoted);\n+}\n+\n /* The file name, line number or system header flags have changed, as\n    described in MAP.  From this point on, the old print.map might be\n    pointing to freed memory, and so must not be dereferenced.  */"}, {"sha": "0fc9c682baf5ab113661eeed6fac90149eedd03e", "filename": "gcc/cppinit.c", "status": "modified", "additions": 10, "deletions": 36, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9ea4d72c8f0909db7eda507805a941d48348a2/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9ea4d72c8f0909db7eda507805a941d48348a2/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=8e9ea4d72c8f0909db7eda507805a941d48348a2", "patch": "@@ -453,9 +453,10 @@ cpp_post_options (cpp_reader *pfile)\n }\n \n /* Setup for processing input from the file named FNAME, or stdin if\n-   it is the empty string.  Returns true if the file was found.  */\n-bool\n-cpp_find_main_file (cpp_reader *pfile, const char *fname)\n+   it is the empty string.  Return the original filename\n+   on success (e.g. foo.i->foo.c), or NULL on failure.  */\n+const char *\n+cpp_read_main_file (cpp_reader *pfile, const char *fname)\n {\n   if (CPP_OPTION (pfile, deps.style) != DEPS_NONE)\n     {\n@@ -471,37 +472,16 @@ cpp_find_main_file (cpp_reader *pfile, const char *fname)\n   if (_cpp_find_failed (pfile->main_file))\n     return false;\n \n-  if (CPP_OPTION (pfile, working_directory))\n-    {\n-      const char *dir = getpwd ();\n-      char *dir_with_slashes = alloca (strlen (dir) + 3);\n-\n-      memcpy (dir_with_slashes, dir, strlen (dir));\n-      memcpy (dir_with_slashes + strlen (dir), \"//\", 3);\n-\n-      if (pfile->cb.dir_change)\n-\tpfile->cb.dir_change (pfile, dir);\n-    }\n-  return true;\n-}\n-\n-/* This function reads the file, but does not start preprocessing.\n-   This will generate at least one file change callback, and possibly\n-   a line change callback.  */\n-void\n-cpp_push_main_file (cpp_reader *pfile)\n-{\n   _cpp_stack_file (pfile, pfile->main_file, false);\n \n   /* For foo.i, read the original filename foo.c now, for the benefit\n      of the front ends.  */\n   if (CPP_OPTION (pfile, preprocessed))\n-    read_original_filename (pfile);\n-\n-  /* Set this here so the client can change the option if it wishes,\n-     and after stacking the main file so we don't trace the main\n-     file.  */\n-  pfile->line_table->trace_includes = CPP_OPTION (pfile, print_include_names);\n+    {\n+      read_original_filename (pfile);\n+      fname = pfile->map->to_file;\n+    }\n+  return fname;\n }\n \n /* For preprocessed files, if the first tokens are of the form # NUM.\n@@ -579,13 +559,7 @@ read_original_directory (cpp_reader *pfile)\n       debugdir[token->val.str.len - 4] = '\\0';\n \n       pfile->cb.dir_change (pfile, debugdir);\n-    }\n-\n-  /* We want to process the fake line changes as regular changes, to\n-     get them output.  */\n-  _cpp_backup_tokens (pfile, 3);\n-\n-  CPP_OPTION (pfile, working_directory) = false;\n+    }      \n }\n \n /* This is called at the end of preprocessing.  It pops the last"}, {"sha": "fd512b6412c3b776e4733d98ab2993df49cab584", "filename": "gcc/cpplib.h", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9ea4d72c8f0909db7eda507805a941d48348a2/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9ea4d72c8f0909db7eda507805a941d48348a2/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=8e9ea4d72c8f0909db7eda507805a941d48348a2", "patch": "@@ -373,11 +373,6 @@ struct cpp_options\n \n   /* Nonzero means __STDC__ should have the value 0 in system headers.  */\n   unsigned char stdc_0_in_system_headers;\n-\n-  /* Nonzero means output a directory line marker right after the\n-     initial file name line marker, and before a duplicate initial\n-     line marker.  */\n-  bool working_directory;\n };\n \n /* Call backs to cpplib client.  */\n@@ -536,14 +531,12 @@ extern const struct line_maps *cpp_get_line_maps (cpp_reader *);\n extern cpp_callbacks *cpp_get_callbacks (cpp_reader *);\n extern void cpp_set_callbacks (cpp_reader *, cpp_callbacks *);\n \n-/* This function finds the main file, but does not start reading it.\n-   Returns true iff the file was found.  */\n-extern bool cpp_find_main_file (cpp_reader *, const char *);\n-\n-/* This function reads the file, but does not start preprocessing.\n-   This will generate at least one file change callback, and possibly\n-   a line change callback.  */\n-extern void cpp_push_main_file (cpp_reader *);\n+/* This function reads the file, but does not start preprocessing.  It\n+   returns the name of the original file; this is the same as the\n+   input file, except for preprocessed input.  This will generate at\n+   least one file change callback, and possibly a line change callback\n+   too.  If there was an error opening the file, it returns NULL. */\n+extern const char *cpp_read_main_file (cpp_reader *, const char *);\n \n /* Set up built-ins like __FILE__.  */\n extern void cpp_init_builtins (cpp_reader *, int);"}, {"sha": "43916c54789100460a8a9130792ef4a543e0a4ac", "filename": "gcc/fix-header.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9ea4d72c8f0909db7eda507805a941d48348a2/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9ea4d72c8f0909db7eda507805a941d48348a2/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=8e9ea4d72c8f0909db7eda507805a941d48348a2", "patch": "@@ -606,9 +606,8 @@ read_scan_file (char *in_fname, int argc, char **argv)\n   options->inhibit_errors = 1;\n   cpp_post_options (scan_in);\n \n-  if (!cpp_find_main_file (scan_in, in_fname))\n+  if (!cpp_read_main_file (scan_in, in_fname))\n     exit (FATAL_EXIT_CODE);\n-  cpp_push_main_file (scan_in);\n \n   cpp_change_file (scan_in, LC_RENAME, \"<built-in>\");\n   cpp_init_builtins (scan_in, true);"}, {"sha": "f49228b8cc1eb7dd0a03c8601f2d70fcfb8ed4d5", "filename": "gcc/opts.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9ea4d72c8f0909db7eda507805a941d48348a2/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9ea4d72c8f0909db7eda507805a941d48348a2/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=8e9ea4d72c8f0909db7eda507805a941d48348a2", "patch": "@@ -448,7 +448,8 @@ handle_options (unsigned int argc, const char **argv, unsigned int lang_mask)\n       /* Interpret \"-\" or a non-switch as a file name.  */\n       if (opt[0] != '-' || opt[1] == '\\0')\n \t{\n-\t  main_input_filename = opt;\n+\t  if (main_input_filename == NULL)\n+\t    main_input_filename = opt;\n \t  add_input_filename (opt);\n \t  n = 1;\n \t  continue;"}]}