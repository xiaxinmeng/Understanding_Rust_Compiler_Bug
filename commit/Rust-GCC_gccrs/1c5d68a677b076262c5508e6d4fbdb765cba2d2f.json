{"sha": "1c5d68a677b076262c5508e6d4fbdb765cba2d2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM1ZDY4YTY3N2IwNzYyNjJjNTUwOGU2ZDRmYmRiNzY1Y2JhMmQyZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-29T14:47:34Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-29T14:47:34Z"}, "message": "Make vect_get_mask_type_for_stmt take a group size\n\nThis patch makes vect_get_mask_type_for_stmt and\nget_mask_type_for_scalar_type take a group size instead of\nthe SLP node, so that later patches can call it before an\nSLP node has been built.\n\n2019-11-29  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (get_mask_type_for_scalar_type): Replace\n\tthe slp_tree parameter with a group size parameter.\n\t(vect_get_mask_type_for_stmt): Likewise.\n\t* tree-vect-stmts.c (get_mask_type_for_scalar_type): Likewise.\n\t(vect_get_mask_type_for_stmt): Likewise.\n\t* tree-vect-slp.c (vect_slp_analyze_node_operations_1): Update\n\tcall accordingly.\n\nFrom-SVN: r278849", "tree": {"sha": "94d5b9ef33d9443e543ec0337f3d369917683a30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94d5b9ef33d9443e543ec0337f3d369917683a30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c5d68a677b076262c5508e6d4fbdb765cba2d2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c5d68a677b076262c5508e6d4fbdb765cba2d2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c5d68a677b076262c5508e6d4fbdb765cba2d2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c5d68a677b076262c5508e6d4fbdb765cba2d2f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4177e933b309408e69eb5561fee7a3cc5e6f8899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4177e933b309408e69eb5561fee7a3cc5e6f8899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4177e933b309408e69eb5561fee7a3cc5e6f8899"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "d5a4f620be75ff15b7c5226085598bc9b8ebbf3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5d68a677b076262c5508e6d4fbdb765cba2d2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5d68a677b076262c5508e6d4fbdb765cba2d2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c5d68a677b076262c5508e6d4fbdb765cba2d2f", "patch": "@@ -1,3 +1,13 @@\n+2019-11-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (get_mask_type_for_scalar_type): Replace\n+\tthe slp_tree parameter with a group size parameter.\n+\t(vect_get_mask_type_for_stmt): Likewise.\n+\t* tree-vect-stmts.c (get_mask_type_for_scalar_type): Likewise.\n+\t(vect_get_mask_type_for_stmt): Likewise.\n+\t* tree-vect-slp.c (vect_slp_analyze_node_operations_1): Update\n+\tcall accordingly.\n+\n 2019-11-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-stmts.c (vectorizable_operation): Punt early"}, {"sha": "e3fd0e903a43adb6fbe9afd22d2256a7df038c4e", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5d68a677b076262c5508e6d4fbdb765cba2d2f/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5d68a677b076262c5508e6d4fbdb765cba2d2f/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=1c5d68a677b076262c5508e6d4fbdb765cba2d2f", "patch": "@@ -2757,7 +2757,8 @@ vect_slp_analyze_node_operations_1 (vec_info *vinfo, slp_tree node,\n   bb_vec_info bb_vinfo = STMT_VINFO_BB_VINFO (stmt_info);\n   if (bb_vinfo && STMT_VINFO_VECTYPE (stmt_info) == boolean_type_node)\n     {\n-      tree vectype = vect_get_mask_type_for_stmt (stmt_info, node);\n+      unsigned int group_size = SLP_TREE_SCALAR_STMTS (node).length ();\n+      tree vectype = vect_get_mask_type_for_stmt (stmt_info, group_size);\n       if (!vectype)\n \t/* vect_get_mask_type_for_stmt has already explained the\n \t   failure.  */"}, {"sha": "f1e2ff4117f7506f7061383ab4eba387b79a59db", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5d68a677b076262c5508e6d4fbdb765cba2d2f/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5d68a677b076262c5508e6d4fbdb765cba2d2f/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=1c5d68a677b076262c5508e6d4fbdb765cba2d2f", "patch": "@@ -11323,14 +11323,15 @@ get_vectype_for_scalar_type (vec_info *vinfo, tree scalar_type, slp_tree node)\n \n    Returns the mask type corresponding to a result of comparison\n    of vectors of specified SCALAR_TYPE as supported by target.\n-   NODE, if nonnull, is the SLP tree node that will use the returned\n-   vector type.  */\n+   If GROUP_SIZE is nonzero and we're performing BB vectorization,\n+   make sure that the number of elements in the vector is no bigger\n+   than GROUP_SIZE.  */\n \n tree\n get_mask_type_for_scalar_type (vec_info *vinfo, tree scalar_type,\n-\t\t\t       slp_tree node)\n+\t\t\t       unsigned int group_size)\n {\n-  tree vectype = get_vectype_for_scalar_type (vinfo, scalar_type, node);\n+  tree vectype = get_vectype_for_scalar_type (vinfo, scalar_type, group_size);\n \n   if (!vectype)\n     return NULL;\n@@ -12190,11 +12191,12 @@ vect_get_vector_types_for_stmt (stmt_vec_info stmt_info,\n \n /* Try to determine the correct vector type for STMT_INFO, which is a\n    statement that produces a scalar boolean result.  Return the vector\n-   type on success, otherwise return NULL_TREE.  NODE, if nonnull,\n-   is the SLP tree node that will use the returned vector type.  */\n+   type on success, otherwise return NULL_TREE.  If GROUP_SIZE is nonzero\n+   and we're performing BB vectorization, make sure that the number of\n+   elements in the vector is no bigger than GROUP_SIZE.  */\n \n opt_tree\n-vect_get_mask_type_for_stmt (stmt_vec_info stmt_info, slp_tree node)\n+vect_get_mask_type_for_stmt (stmt_vec_info stmt_info, unsigned int group_size)\n {\n   vec_info *vinfo = stmt_info->vinfo;\n   gimple *stmt = stmt_info->stmt;\n@@ -12206,7 +12208,8 @@ vect_get_mask_type_for_stmt (stmt_vec_info stmt_info, slp_tree node)\n       && !VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (gimple_assign_rhs1 (stmt))))\n     {\n       scalar_type = TREE_TYPE (gimple_assign_rhs1 (stmt));\n-      mask_type = get_mask_type_for_scalar_type (vinfo, scalar_type, node);\n+      mask_type = get_mask_type_for_scalar_type (vinfo, scalar_type,\n+\t\t\t\t\t\t group_size);\n \n       if (!mask_type)\n \treturn opt_tree::failure_at (stmt,"}, {"sha": "ad73519afaa77c83e58982580063b56b58244d82", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5d68a677b076262c5508e6d4fbdb765cba2d2f/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5d68a677b076262c5508e6d4fbdb765cba2d2f/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=1c5d68a677b076262c5508e6d4fbdb765cba2d2f", "patch": "@@ -1640,7 +1640,7 @@ extern tree get_related_vectype_for_scalar_type (machine_mode, tree,\n \t\t\t\t\t\t poly_uint64 = 0);\n extern tree get_vectype_for_scalar_type (vec_info *, tree, unsigned int = 0);\n extern tree get_vectype_for_scalar_type (vec_info *, tree, slp_tree);\n-extern tree get_mask_type_for_scalar_type (vec_info *, tree, slp_tree = 0);\n+extern tree get_mask_type_for_scalar_type (vec_info *, tree, unsigned int = 0);\n extern tree get_same_sized_vectype (tree, tree);\n extern bool vect_chooses_same_modes_p (vec_info *, machine_mode);\n extern bool vect_get_loop_mask_type (loop_vec_info);\n@@ -1693,7 +1693,7 @@ extern gcall *vect_gen_while (tree, tree, tree);\n extern tree vect_gen_while_not (gimple_seq *, tree, tree, tree);\n extern opt_result vect_get_vector_types_for_stmt (stmt_vec_info, tree *,\n \t\t\t\t\t\t  tree *, unsigned int = 0);\n-extern opt_tree vect_get_mask_type_for_stmt (stmt_vec_info, slp_tree = 0);\n+extern opt_tree vect_get_mask_type_for_stmt (stmt_vec_info, unsigned int = 0);\n \n /* In tree-vect-data-refs.c.  */\n extern bool vect_can_force_dr_alignment_p (const_tree, poly_uint64);"}]}