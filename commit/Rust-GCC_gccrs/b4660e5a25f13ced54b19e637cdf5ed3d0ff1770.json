{"sha": "b4660e5a25f13ced54b19e637cdf5ed3d0ff1770", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ2NjBlNWEyNWYxM2NlZDU0YjE5ZTYzN2NkZjVlZDNkMGZmMTc3MA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-05-11T16:25:30Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-05-11T16:25:30Z"}, "message": "Makefile.in (tree-eh.o): Kill gt-tree-eh.h dependency.\n\n\n\t* Makefile.in (tree-eh.o: Kill gt-tree-eh.h dependency.\n\t(GTFILES): add except.h.\n\t* except.c (eh_status): Add throw_stmt_table.\n\t(set_eh_throw_stmt_table, get_eh_throw_stmt_table): New functions.\n\t* except.h (add_stmt_to_eh_region_fn, remove_stmt_from_eh_region_fn,\n\tlookup_stmt_eh_region_fn): Declare.\n\t(throw_stmt_node): New structure.\n\t(set_eh_throw_stmt_table, get_eh_throw_stmt_table): New.\n\t* gengtype.c (open_base_files): Add except.h to inlines.\n\t* tree-eh.c (throw_stmt_node): Kill.\n\t(record_stmt_eh_region): Update.\n\t(add_stmt_to_eh_region_fn): Break out from ...\n\t(add_stmt_to_eh_region): ... here.\n\t(remove_stmt_from_eh_region_fn): Break out from ...\n\t(remove_stmt_from_eh_region): ... here.\n\t(lookup_stmt_eh_region_fn): Break out from ...\n\t(lookup_stmt_eh_region): ... here.\n\t(honor_protect_cleanup_actions): Use build_resx.\n\t(lower_try_finally_onedest): Likewise.\n\t(lower_try_finally_copy): Likewise.\n\t(lower_try_finally_switch): Likewise.\n\t(lower_eh_constructs): Update eh table construction.\n\t* tree.c (build_resx): New.\n\t* tree.h (build_resx): Declare.\n\nFrom-SVN: r99585", "tree": {"sha": "9b77e37a7adbdb5597d14331019fbd8e25756e47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b77e37a7adbdb5597d14331019fbd8e25756e47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770/comments", "author": null, "committer": null, "parents": [{"sha": "3ca48b3e7251f931b0a8af263d31043078ffb701", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ca48b3e7251f931b0a8af263d31043078ffb701", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ca48b3e7251f931b0a8af263d31043078ffb701"}], "stats": {"total": 146, "additions": 109, "deletions": 37}, "files": [{"sha": "07ed6e1e62413cd4439d14c78a54038a5e115b69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4660e5a25f13ced54b19e637cdf5ed3d0ff1770", "patch": "@@ -1,3 +1,30 @@\n+2005-05-11  Jan Hubicka  <jh@suse.cz>\n+\n+\t* Makefile.in (tree-eh.o: Kill gt-tree-eh.h dependency.\n+\t(GTFILES): add except.h.\n+\t* except.c (eh_status): Add throw_stmt_table.\n+\t(set_eh_throw_stmt_table, get_eh_throw_stmt_table): New functions.\n+\t* except.h (add_stmt_to_eh_region_fn, remove_stmt_from_eh_region_fn,\n+\tlookup_stmt_eh_region_fn): Declare.\n+\t(throw_stmt_node): New structure.\n+\t(set_eh_throw_stmt_table, get_eh_throw_stmt_table): New.\n+\t* gengtype.c (open_base_files): Add except.h to inlines.\n+\t* tree-eh.c (throw_stmt_node): Kill.\n+\t(record_stmt_eh_region): Update.\n+\t(add_stmt_to_eh_region_fn): Break out from ...\n+\t(add_stmt_to_eh_region): ... here.\n+\t(remove_stmt_from_eh_region_fn): Break out from ...\n+\t(remove_stmt_from_eh_region): ... here.\n+\t(lookup_stmt_eh_region_fn): Break out from ...\n+\t(lookup_stmt_eh_region): ... here.\n+\t(honor_protect_cleanup_actions): Use build_resx.\n+\t(lower_try_finally_onedest): Likewise.\n+\t(lower_try_finally_copy): Likewise.\n+\t(lower_try_finally_switch): Likewise.\n+\t(lower_eh_constructs): Update eh table construction.\n+\t* tree.c (build_resx): New.\n+\t* tree.h (build_resx): Declare.\n+\n 2005-05-11  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* libgcov.c (gcov_exit): Set prefix_length to 0 if no relocation"}, {"sha": "517d5d8b2ca86d2c2be603024b84ccffb7108ddd", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b4660e5a25f13ced54b19e637cdf5ed3d0ff1770", "patch": "@@ -1763,7 +1763,7 @@ tree-ssa-operands.o : tree-ssa-operands.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    gt-tree-ssa-operands.h coretypes.h langhooks.h tree-ssa-opfinalize.h\n tree-eh.o : tree-eh.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_H) $(FLAGS_H) function.h except.h langhooks.h \\\n-   $(GGC_H) tree-pass.h gt-tree-eh.h coretypes.h $(TIMEVAR_H) $(TM_P_H) \\\n+   $(GGC_H) tree-pass.h coretypes.h $(TIMEVAR_H) $(TM_P_H) \\\n    $(TREE_DUMP_H) tree-inline.h tree-iterator.h\n tree-ssa-loop.o : tree-ssa-loop.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) \\\n@@ -2570,7 +2570,7 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/dbxout.c $(srcdir)/dwarf2out.c $(srcdir)/dwarf2asm.c \\\n   $(srcdir)/dojump.c $(srcdir)/tree-profile.c \\\n   $(srcdir)/emit-rtl.c $(srcdir)/except.c $(srcdir)/explow.c $(srcdir)/expr.c \\\n-  $(srcdir)/function.c \\\n+  $(srcdir)/function.c $(srcdir)/except.h \\\n   $(srcdir)/gcse.c $(srcdir)/integrate.c $(srcdir)/lists.c $(srcdir)/optabs.c \\\n   $(srcdir)/profile.c $(srcdir)/regclass.c \\\n   $(srcdir)/reg-stack.c $(srcdir)/cfglayout.c \\\n@@ -2602,7 +2602,7 @@ gt-dwarf2out.h gt-reg-stack.h gt-dwarf2asm.h \\\n gt-dbxout.h gt-c-common.h gt-c-decl.h gt-c-parser.h \\\n gt-c-pragma.h gtype-c.h gt-cfglayout.h \\\n gt-tree-mudflap.h gt-tree-complex.h \\\n-gt-tree-eh.h gt-tree-profile.h \\\n+gt-tree-profile.h \\\n gt-tree-ssanames.h gt-tree-iterator.h gt-gimplify.h \\\n gt-tree-phinodes.h gt-tree-nested.h \\\n gt-tree-ssa-operands.h gt-tree-ssa-propagate.h \\"}, {"sha": "35105f9d7ad380827323b2047787c3fb855ce0e0", "filename": "gcc/except.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=b4660e5a25f13ced54b19e637cdf5ed3d0ff1770", "patch": "@@ -251,6 +251,8 @@ struct eh_status GTY(())\n \n   rtx sjlj_fc;\n   rtx sjlj_exit_after;\n+\n+  htab_t GTY((param_is (struct throw_stmt_node))) throw_stmt_table;\n };\n \n \f\n@@ -3436,6 +3438,18 @@ output_function_exception_table (void)\n   current_function_section (current_function_decl);\n }\n \n+void\n+set_eh_throw_stmt_table (struct function *fun, struct htab *table)\n+{\n+  fun->eh->throw_stmt_table = table;\n+}\n+\n+htab_t\n+get_eh_throw_stmt_table (struct function *fun)\n+{\n+  return fun->eh->throw_stmt_table;\n+}\n+\n /* Dump EH information to OUT.  */\n void \n dump_eh_tree (FILE *out, struct function *fun)"}, {"sha": "746b3d4aca881bb9fc3949e5e57c1accec59cce3", "filename": "gcc/except.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=b4660e5a25f13ced54b19e637cdf5ed3d0ff1770", "patch": "@@ -105,6 +105,9 @@ extern void verify_eh_tree (struct function *);\n extern void dump_eh_tree (FILE *, struct function *);\n \n /* tree-eh.c */\n+extern void add_stmt_to_eh_region_fn (struct function *, tree, int);\n+extern bool remove_stmt_from_eh_region_fn (struct function *, tree);\n+extern int lookup_stmt_eh_region_fn (struct function *, tree);\n extern int lookup_stmt_eh_region (tree);\n extern bool verify_eh_edges (tree);\n \n@@ -158,3 +161,12 @@ extern tree (*lang_eh_runtime_type) (tree);\n #else\n # define USING_SJLJ_EXCEPTIONS\t\tMUST_USE_SJLJ_EXCEPTIONS\n #endif\n+\n+struct throw_stmt_node GTY(())\n+{\n+  tree stmt;\n+  int region_nr;\n+};\n+\n+extern struct htab *get_eh_throw_stmt_table (struct function *);\n+extern void set_eh_throw_stmt_table (struct function *, struct htab *);"}, {"sha": "2b6cc0fef05d8ba10cdd9f79a41a0bb6f778342b", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=b4660e5a25f13ced54b19e637cdf5ed3d0ff1770", "patch": "@@ -1088,7 +1088,7 @@ open_base_files (void)\n       \"hard-reg-set.h\", \"basic-block.h\", \"cselib.h\", \"insn-addr.h\",\n       \"optabs.h\", \"libfuncs.h\", \"debug.h\", \"ggc.h\", \"cgraph.h\",\n       \"tree-flow.h\", \"reload.h\", \"cpp-id-data.h\", \"tree-chrec.h\",\n-      NULL\n+      \"except.h\", NULL\n     };\n     const char *const *ifp;\n     outf_p gtype_desc_c;"}, {"sha": "72644aa0b0499cad0c425f88a2f017b02e459844", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 41, "deletions": 33, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=b4660e5a25f13ced54b19e637cdf5ed3d0ff1770", "patch": "@@ -81,14 +81,6 @@ struct_ptr_hash (const void *a)\n    compared to those that can.  We should be saving some amount\n    of space by only allocating memory for those that can throw.  */\n \n-struct throw_stmt_node GTY(())\n-{\n-  tree stmt;\n-  int region_nr;\n-};\n-\n-static GTY((param_is (struct throw_stmt_node))) htab_t throw_stmt_table;\n-\n static void\n record_stmt_eh_region (struct eh_region *region, tree t)\n {\n@@ -102,62 +94,85 @@ record_stmt_eh_region (struct eh_region *region, tree t)\n   n->stmt = t;\n   n->region_nr = get_eh_region_number (region);\n \n-  slot = htab_find_slot (throw_stmt_table, n, INSERT);\n+  slot = htab_find_slot (get_eh_throw_stmt_table (cfun), n, INSERT);\n   gcc_assert (!*slot);\n   *slot = n;\n }\n \n void\n-add_stmt_to_eh_region (tree t, int num)\n+add_stmt_to_eh_region_fn (struct function *ifun, tree t, int num)\n {\n   struct throw_stmt_node *n;\n   void **slot;\n \n   gcc_assert (num >= 0);\n+  gcc_assert (TREE_CODE (t) != RESX_EXPR);\n \n   n = ggc_alloc (sizeof (*n));\n   n->stmt = t;\n   n->region_nr = num;\n \n-  slot = htab_find_slot (throw_stmt_table, n, INSERT);\n+  slot = htab_find_slot (get_eh_throw_stmt_table (ifun), n, INSERT);\n   gcc_assert (!*slot);\n   *slot = n;\n }\n \n+void\n+add_stmt_to_eh_region (tree t, int num)\n+{\n+  add_stmt_to_eh_region_fn (cfun, t, num);\n+}\n+\n bool\n-remove_stmt_from_eh_region (tree t)\n+remove_stmt_from_eh_region_fn (struct function *ifun, tree t)\n {\n   struct throw_stmt_node dummy;\n   void **slot;\n \n-  if (!throw_stmt_table)\n+  if (!get_eh_throw_stmt_table (ifun))\n     return false;\n \n   dummy.stmt = t;\n-  slot = htab_find_slot (throw_stmt_table, &dummy, NO_INSERT);\n+  slot = htab_find_slot (get_eh_throw_stmt_table (ifun), &dummy,\n+                        NO_INSERT);\n   if (slot)\n     {\n-      htab_clear_slot (throw_stmt_table, slot);\n+      htab_clear_slot (get_eh_throw_stmt_table (ifun), slot);\n       return true;\n     }\n   else\n     return false;\n }\n \n+bool\n+remove_stmt_from_eh_region (tree t)\n+{\n+  return remove_stmt_from_eh_region_fn (cfun, t);\n+}\n+\n int\n-lookup_stmt_eh_region (tree t)\n+lookup_stmt_eh_region_fn (struct function *ifun, tree t)\n {\n   struct throw_stmt_node *p, n;\n \n-  if (!throw_stmt_table)\n+  if (!get_eh_throw_stmt_table (ifun))\n     return -2;\n \n   n.stmt = t;\n-  p = htab_find (throw_stmt_table, &n);\n+  p = htab_find (get_eh_throw_stmt_table (ifun), &n);\n \n   return (p ? p->region_nr : -1);\n }\n \n+int\n+lookup_stmt_eh_region (tree t)\n+{\n+  /* We can get called from initialized data when -fnon-call-exceptions\n+     is on; prevent crash.  */\n+  if (!cfun)\n+    return -1;\n+  return lookup_stmt_eh_region_fn (cfun, t);\n+}\n \n \f\n /* First pass of EH node decomposition.  Build up a tree of TRY_FINALLY_EXPR\n@@ -832,9 +847,7 @@ honor_protect_cleanup_actions (struct leh_state *outer_state,\n       x = build (MODIFY_EXPR, void_type_node, x, save_filt);\n       tsi_link_after (&i, x, TSI_CONTINUE_LINKING);\n \n-      x = build1 (RESX_EXPR, void_type_node,\n-\t\t  build_int_cst (NULL_TREE,\n-\t\t\t\t get_eh_region_number (tf->region)));\n+      x = build_resx (get_eh_region_number (tf->region));\n       tsi_link_after (&i, x, TSI_CONTINUE_LINKING);\n     }\n \n@@ -939,9 +952,8 @@ lower_try_finally_onedest (struct leh_state *state, struct leh_tf_state *tf)\n \n       append_to_statement_list (finally, tf->top_p);\n \n-      x = build1 (RESX_EXPR, void_type_node,\n-\t\t  build_int_cst (NULL_TREE,\n-\t\t\t\t get_eh_region_number (tf->region)));\n+      x = build_resx (get_eh_region_number (tf->region));\n+\n       append_to_statement_list (x, tf->top_p);\n \n       return;\n@@ -1028,9 +1040,7 @@ lower_try_finally_copy (struct leh_state *state, struct leh_tf_state *tf)\n       lower_eh_constructs_1 (state, &x);\n       append_to_statement_list (x, &new_stmt);\n \n-      x = build1 (RESX_EXPR, void_type_node,\n-\t\t  build_int_cst (NULL_TREE,\n-\t\t\t\t get_eh_region_number (tf->region)));\n+      x = build_resx (get_eh_region_number (tf->region));\n       append_to_statement_list (x, &new_stmt);\n     }\n \n@@ -1204,9 +1214,7 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n \n       x = build (LABEL_EXPR, void_type_node, CASE_LABEL (last_case));\n       append_to_statement_list (x, &switch_body);\n-      x = build1 (RESX_EXPR, void_type_node,\n-\t\t  build_int_cst (NULL_TREE,\n-\t\t\t\t get_eh_region_number (tf->region)));\n+      x = build_resx (get_eh_region_number (tf->region));\n       append_to_statement_list (x, &switch_body);\n     }\n \n@@ -1676,8 +1684,9 @@ lower_eh_constructs (void)\n   tree *tp = &DECL_SAVED_TREE (current_function_decl);\n \n   finally_tree = htab_create (31, struct_ptr_hash, struct_ptr_eq, free);\n-  throw_stmt_table = htab_create_ggc (31, struct_ptr_hash, struct_ptr_eq,\n-\t\t\t\t      ggc_free);\n+  set_eh_throw_stmt_table (cfun, htab_create_ggc (31, struct_ptr_hash,\n+\t\t\t\t\t\t  struct_ptr_eq,\n+\t\t\t\t\t\t  ggc_free));\n \n   collect_finally_tree (*tp, NULL);\n \n@@ -2035,4 +2044,3 @@ maybe_clean_eh_stmt (tree stmt)\n   return false;\n }\n \n-#include \"gt-tree-eh.h\""}, {"sha": "32977724d9df6c1e2954c6477767ca9a779a4bbf", "filename": "gcc/tree.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b4660e5a25f13ced54b19e637cdf5ed3d0ff1770", "patch": "@@ -5972,6 +5972,16 @@ build_vector_type (tree innertype, int nunits)\n   return make_vector_type (innertype, nunits, VOIDmode);\n }\n \n+/* Build RESX_EXPR with given REGION_NUMBER.  */\n+tree\n+build_resx (int region_number)\n+{\n+  tree t;\n+  t = build1 (RESX_EXPR, void_type_node,\n+\t      build_int_cst (NULL_TREE, region_number));\n+  return t;\n+}\n+\n /* Given an initializer INIT, return TRUE if INIT is zero or some\n    aggregate of zeros.  Otherwise return FALSE.  */\n bool"}, {"sha": "60b7943cf35802cc0f7c37621a29314c6ec796ba", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4660e5a25f13ced54b19e637cdf5ed3d0ff1770/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b4660e5a25f13ced54b19e637cdf5ed3d0ff1770", "patch": "@@ -2937,6 +2937,7 @@ extern tree build_method_type_directly (tree, tree, tree);\n extern tree build_method_type (tree, tree);\n extern tree build_offset_type (tree, tree);\n extern tree build_complex_type (tree);\n+extern tree build_resx (int);\n extern tree array_type_nelts (tree);\n extern bool in_array_bounds_p (tree);\n "}]}