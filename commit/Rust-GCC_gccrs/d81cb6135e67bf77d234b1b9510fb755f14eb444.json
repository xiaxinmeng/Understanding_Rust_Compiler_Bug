{"sha": "d81cb6135e67bf77d234b1b9510fb755f14eb444", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgxY2I2MTM1ZTY3YmY3N2QyMzRiMWI5NTEwZmI3NTVmMTRlYjQ0NA==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-11-10T15:59:37Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-11-10T15:59:37Z"}, "message": "[AArch64] Move iterators from atomics.md to iterators.md\n\n\t* config/aarch64/atomics.md (unspecv): Move to iterators.md.\n\t(ATOMIC_LDOP): Likewise.\n\t(atomic_ldop): Likewise.\n\t* config/aarch64/iterators.md (unspecv): Moved from atomics.md.\n\t(ATOMIC_LDOP): Likewise.\n\t(atomic_ldop): Likewise.\n\nFrom-SVN: r230114", "tree": {"sha": "bb9f6155b464c78b9671bbc4d050dd3a3253ffed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb9f6155b464c78b9671bbc4d050dd3a3253ffed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d81cb6135e67bf77d234b1b9510fb755f14eb444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d81cb6135e67bf77d234b1b9510fb755f14eb444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d81cb6135e67bf77d234b1b9510fb755f14eb444", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d81cb6135e67bf77d234b1b9510fb755f14eb444/comments", "author": null, "committer": null, "parents": [{"sha": "d4a9dffbaaf1e53648ee102a93bdcb3edb2f137e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a9dffbaaf1e53648ee102a93bdcb3edb2f137e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4a9dffbaaf1e53648ee102a93bdcb3edb2f137e"}], "stats": {"total": 70, "additions": 42, "deletions": 28}, "files": [{"sha": "75dc765b34aa293b174bfeaec8eedc2029f5c345", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81cb6135e67bf77d234b1b9510fb755f14eb444/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81cb6135e67bf77d234b1b9510fb755f14eb444/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d81cb6135e67bf77d234b1b9510fb755f14eb444", "patch": "@@ -1,3 +1,12 @@\n+2015-11-10  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* config/aarch64/atomics.md (unspecv): Move to iterators.md.\n+\t(ATOMIC_LDOP): Likewise.\n+\t(atomic_ldop): Likewise.\n+\t* config/aarch64/iterators.md (unspecv): Moved from atomics.md.\n+\t(ATOMIC_LDOP): Likewise.\n+\t(atomic_ldop): Likewise.\n+\n 2015-11-10  Martin Liska  <mliska@suse.cz>\n \n \t* alloc-pool.h (allocate_raw): New function."}, {"sha": "3c034fb437640288fe07132de5e95c5d253f33c5", "filename": "gcc/config/aarch64/atomics.md", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81cb6135e67bf77d234b1b9510fb755f14eb444/gcc%2Fconfig%2Faarch64%2Fatomics.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81cb6135e67bf77d234b1b9510fb755f14eb444/gcc%2Fconfig%2Faarch64%2Fatomics.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fatomics.md?ref=d81cb6135e67bf77d234b1b9510fb755f14eb444", "patch": "@@ -18,34 +18,6 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n-(define_c_enum \"unspecv\"\n- [\n-    UNSPECV_LX\t\t\t\t; Represent a load-exclusive.\n-    UNSPECV_SX\t\t\t\t; Represent a store-exclusive.\n-    UNSPECV_LDA\t\t\t\t; Represent an atomic load or load-acquire.\n-    UNSPECV_STL\t\t\t\t; Represent an atomic store or store-release.\n-    UNSPECV_ATOMIC_CMPSW\t\t; Represent an atomic compare swap.\n-    UNSPECV_ATOMIC_EXCHG\t\t; Represent an atomic exchange.\n-    UNSPECV_ATOMIC_CAS\t\t\t; Represent an atomic CAS.\n-    UNSPECV_ATOMIC_SWP\t\t\t; Represent an atomic SWP.\n-    UNSPECV_ATOMIC_OP\t\t\t; Represent an atomic operation.\n-    UNSPECV_ATOMIC_LDOP\t\t\t; Represent an atomic load-operation\n-    UNSPECV_ATOMIC_LDOP_OR\t\t; Represent an atomic load-or\n-    UNSPECV_ATOMIC_LDOP_BIC\t\t; Represent an atomic load-bic\n-    UNSPECV_ATOMIC_LDOP_XOR\t\t; Represent an atomic load-xor\n-    UNSPECV_ATOMIC_LDOP_PLUS\t\t; Represent an atomic load-add\n-])\n-\n-;; Iterators for load-operate instructions.\n-\n-(define_int_iterator ATOMIC_LDOP\n- [UNSPECV_ATOMIC_LDOP_OR UNSPECV_ATOMIC_LDOP_BIC\n-  UNSPECV_ATOMIC_LDOP_XOR UNSPECV_ATOMIC_LDOP_PLUS])\n-\n-(define_int_attr atomic_ldop\n- [(UNSPECV_ATOMIC_LDOP_OR \"set\") (UNSPECV_ATOMIC_LDOP_BIC \"clr\")\n-  (UNSPECV_ATOMIC_LDOP_XOR \"eor\") (UNSPECV_ATOMIC_LDOP_PLUS \"add\")])\n-\n ;; Instruction patterns.\n \n (define_expand \"atomic_compare_and_swap<mode>\""}, {"sha": "c2eb7dec99d06b103c86ec11c590ac746706a8ab", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81cb6135e67bf77d234b1b9510fb755f14eb444/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81cb6135e67bf77d234b1b9510fb755f14eb444/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=d81cb6135e67bf77d234b1b9510fb755f14eb444", "patch": "@@ -306,6 +306,29 @@\n     UNSPEC_VEC_SHR      ; Used in aarch64-simd.md.\n ])\n \n+;; ------------------------------------------------------------------\n+;; Unspec enumerations for Atomics.  They are here so that they can be\n+;; used in the int_iterators for atomic operations.\n+;; ------------------------------------------------------------------\n+\n+(define_c_enum \"unspecv\"\n+ [\n+    UNSPECV_LX\t\t\t; Represent a load-exclusive.\n+    UNSPECV_SX\t\t\t; Represent a store-exclusive.\n+    UNSPECV_LDA\t\t\t; Represent an atomic load or load-acquire.\n+    UNSPECV_STL\t\t\t; Represent an atomic store or store-release.\n+    UNSPECV_ATOMIC_CMPSW\t; Represent an atomic compare swap.\n+    UNSPECV_ATOMIC_EXCHG\t; Represent an atomic exchange.\n+    UNSPECV_ATOMIC_CAS\t\t; Represent an atomic CAS.\n+    UNSPECV_ATOMIC_SWP\t\t; Represent an atomic SWP.\n+    UNSPECV_ATOMIC_OP\t\t; Represent an atomic operation.\n+    UNSPECV_ATOMIC_LDOP\t\t; Represent an atomic load-operation\n+    UNSPECV_ATOMIC_LDOP_OR\t; Represent an atomic load-or\n+    UNSPECV_ATOMIC_LDOP_BIC\t; Represent an atomic load-bic\n+    UNSPECV_ATOMIC_LDOP_XOR\t; Represent an atomic load-xor\n+    UNSPECV_ATOMIC_LDOP_PLUS\t; Represent an atomic load-add\n+])\n+\n ;; -------------------------------------------------------------------\n ;; Mode attributes\n ;; -------------------------------------------------------------------\n@@ -965,6 +988,16 @@\n \n (define_int_iterator CRYPTO_SHA256 [UNSPEC_SHA256H UNSPEC_SHA256H2])\n \n+;; Iterators for atomic operations.\n+\n+(define_int_iterator ATOMIC_LDOP\n+ [UNSPECV_ATOMIC_LDOP_OR UNSPECV_ATOMIC_LDOP_BIC\n+  UNSPECV_ATOMIC_LDOP_XOR UNSPECV_ATOMIC_LDOP_PLUS])\n+\n+(define_int_attr atomic_ldop\n+ [(UNSPECV_ATOMIC_LDOP_OR \"set\") (UNSPECV_ATOMIC_LDOP_BIC \"clr\")\n+  (UNSPECV_ATOMIC_LDOP_XOR \"eor\") (UNSPECV_ATOMIC_LDOP_PLUS \"add\")])\n+\n ;; -------------------------------------------------------------------\n ;; Int Iterators Attributes.\n ;; -------------------------------------------------------------------"}]}