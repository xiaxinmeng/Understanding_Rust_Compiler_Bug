{"sha": "4361b41d838b11e957dfb751d55298bd1d1b1a55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM2MWI0MWQ4MzhiMTFlOTU3ZGZiNzUxZDU1Mjk4YmQxZDFiMWE1NQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-08-29T16:23:20Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-08-29T16:23:20Z"}, "message": "calls.c (expand_call): Don't create a VAR_DECL just to throw it away.\n\n\t* calls.c (expand_call): Don't create a VAR_DECL just to throw it\n\taway.\n\t* expr.c (expand_expr, case TARGET_EXPR): Don't call\n\tmark_addressable.\n\t* tree.h (get_file_function_name): Remove two duplicate\n\tdeclarations.\n\n\t* typeck.c (mark_addressable): Remove code that pokes around in\n\tRTL.\n\nFrom-SVN: r36038", "tree": {"sha": "b04c965157f31a59a49b3963cd4d9793bb84fcf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b04c965157f31a59a49b3963cd4d9793bb84fcf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4361b41d838b11e957dfb751d55298bd1d1b1a55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4361b41d838b11e957dfb751d55298bd1d1b1a55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4361b41d838b11e957dfb751d55298bd1d1b1a55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4361b41d838b11e957dfb751d55298bd1d1b1a55/comments", "author": null, "committer": null, "parents": [{"sha": "9b1ee05b0e2a948a2612dcc6b9835a91ee855f99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b1ee05b0e2a948a2612dcc6b9835a91ee855f99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b1ee05b0e2a948a2612dcc6b9835a91ee855f99"}], "stats": {"total": 55, "additions": 20, "deletions": 35}, "files": [{"sha": "b054ac6f33b3c59f403b2db1cbeaaf7130889f48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4361b41d838b11e957dfb751d55298bd1d1b1a55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4361b41d838b11e957dfb751d55298bd1d1b1a55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4361b41d838b11e957dfb751d55298bd1d1b1a55", "patch": "@@ -1,3 +1,12 @@\n+2000-08-29  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* calls.c (expand_call): Don't create a VAR_DECL just to throw it\n+\taway.\n+\t* expr.c (expand_expr, case TARGET_EXPR): Don't call\n+\tmark_addressable.\n+\t* tree.h (get_file_function_name): Remove two duplicate\n+\tdeclarations.\n+\n 2000-08-28  Kazu Hirata  <kazu@hxi.com>\n \n \t* tree.c: Fix formatting."}, {"sha": "605c5ae9393ac331b9f81fbc25f4221bcf95f799", "filename": "gcc/calls.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4361b41d838b11e957dfb751d55298bd1d1b1a55/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4361b41d838b11e957dfb751d55298bd1d1b1a55/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=4361b41d838b11e957dfb751d55298bd1d1b1a55", "patch": "@@ -2260,8 +2260,7 @@ expand_call (exp, target, ignore)\n \t  structure_value_addr = XEXP (target, 0);\n \telse\n \t  {\n-\t    /* Assign a temporary to hold the value.  */\n-\t    tree d;\n+\t    rtx d;\n \n \t    /* For variable-sized objects, we must be called with a target\n \t       specified.  If we were to allocate space on the stack here,\n@@ -2270,14 +2269,9 @@ expand_call (exp, target, ignore)\n \t    if (struct_value_size < 0)\n \t      abort ();\n \n-\t    /* This DECL is just something to feed to mark_addressable;\n-\t       it doesn't get pushed.  */\n-\t    d = build_decl (VAR_DECL, NULL_TREE, TREE_TYPE (exp));\n-\t    DECL_RTL (d) = assign_temp (TREE_TYPE (exp), 1, 0, 1);\n-\t    mark_addressable (d);\n-\t    mark_temp_addr_taken (DECL_RTL (d));\n-\t    structure_value_addr = XEXP (DECL_RTL (d), 0);\n-\t    TREE_USED (d) = 1;\n+\t    d = assign_temp (TREE_TYPE (exp), 1, 1, 1);\n+\t    mark_temp_addr_taken (d);\n+\t    structure_value_addr = XEXP (d, 0);\n \t    target = 0;\n \t  }\n       }"}, {"sha": "325872dc80f1c1afe9137ee08141565b9ed6bca4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4361b41d838b11e957dfb751d55298bd1d1b1a55/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4361b41d838b11e957dfb751d55298bd1d1b1a55/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4361b41d838b11e957dfb751d55298bd1d1b1a55", "patch": "@@ -1,3 +1,8 @@\n+2000-08-29  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* typeck.c (mark_addressable): Remove code that pokes around in\n+\tRTL.\n+\n 2000-08-28  Jason Merrill  <jason@redhat.com>\n \n \t* lex.c (file_name_nondirectory): Move to toplev.c."}, {"sha": "015df0e78ad18a0c9f2e08c4da5027f3e6a536e6", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4361b41d838b11e957dfb751d55298bd1d1b1a55/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4361b41d838b11e957dfb751d55298bd1d1b1a55/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4361b41d838b11e957dfb751d55298bd1d1b1a55", "patch": "@@ -4925,19 +4925,6 @@ mark_addressable (exp)\n \t    return 1;\n \t  }\n       case VAR_DECL:\n-\tif (TREE_STATIC (x) && TREE_READONLY (x)\n-\t    && DECL_RTL (x) != 0\n-\t    && ! DECL_IN_MEMORY_P (x))\n-\t  {\n-\t    TREE_ASM_WRITTEN (x) = 0;\n-\t    DECL_RTL (x) = 0;\n-\t    rest_of_decl_compilation (x, 0, \n-\t\t\t\t      !DECL_FUNCTION_SCOPE_P (x),\n-\t\t\t\t      0);\n-\t    TREE_ADDRESSABLE (x) = 1;\n-\n-\t    return 1;\n-\t  }\n \t/* Caller should not be trying to mark initialized\n \t   constant fields addressable.  */\n \tmy_friendly_assert (DECL_LANG_SPECIFIC (x) == 0\n@@ -4952,8 +4939,6 @@ mark_addressable (exp)\n \t  cp_warning (\"address requested for `%D', which is declared `register'\",\n \t\t      x);\n \tTREE_ADDRESSABLE (x) = 1;\n-\tif (cfun && expanding_p)\n-\t  put_var_into_stack (x);\n \treturn 1;\n \n       case FUNCTION_DECL:"}, {"sha": "04604e01ea835905b18d5f89edda27a35e2f4176", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4361b41d838b11e957dfb751d55298bd1d1b1a55/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4361b41d838b11e957dfb751d55298bd1d1b1a55/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4361b41d838b11e957dfb751d55298bd1d1b1a55", "patch": "@@ -8104,10 +8104,7 @@ expand_expr (exp, target, tmode, modifier)\n \t\tpreserve_temp_slots (target);\n \t\tDECL_RTL (slot) = target;\n \t\tif (TREE_ADDRESSABLE (slot))\n-\t\t  {\n-\t\t    TREE_ADDRESSABLE (slot) = 0;\n-\t\t    mark_addressable (slot);\n-\t\t  }\n+\t\t  put_var_into_stack (slot);\n \n \t\t/* Since SLOT is not known to the called function\n \t\t   to belong to its stack frame, we must build an explicit\n@@ -8145,10 +8142,7 @@ expand_expr (exp, target, tmode, modifier)\n \t\t/* If we must have an addressable slot, then make sure that\n \t\t   the RTL that we just stored in slot is OK.  */\n \t\tif (TREE_ADDRESSABLE (slot))\n-\t\t  {\n-\t\t    TREE_ADDRESSABLE (slot) = 0;\n-\t\t    mark_addressable (slot);\n-\t\t  }\n+\t\t  put_var_into_stack (slot);\n \t      }\n \t  }\n "}, {"sha": "93a54161572e0bf4f8e5e3c11391534bb4edf07e", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4361b41d838b11e957dfb751d55298bd1d1b1a55/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4361b41d838b11e957dfb751d55298bd1d1b1a55/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4361b41d838b11e957dfb751d55298bd1d1b1a55", "patch": "@@ -2436,7 +2436,6 @@ extern tree builtin_function\t\t\tPARAMS ((const char *, tree, int,\n /* In tree.c */\n extern char *perm_calloc\t\t\tPARAMS ((int, long));\n extern void clean_symbol_name\t\t\tPARAMS ((char *));\n-extern tree get_file_function_name\t\tPARAMS ((int));\n extern tree get_file_function_name_long \tPARAMS ((const char *));\n extern tree get_set_constructor_bits\t\tPARAMS ((tree, char *, int));\n extern tree get_set_constructor_bytes\t\tPARAMS ((tree,\n@@ -2649,7 +2648,6 @@ extern void preserve_momentary\t\tPARAMS ((void));\n extern void saveable_allocation\t\tPARAMS ((void));\n extern void temporary_allocation\tPARAMS ((void));\n extern void resume_temporary_allocation\tPARAMS ((void));\n-extern tree get_file_function_name\tPARAMS ((int));\n extern void set_identifier_size\t\tPARAMS ((int));\n extern int int_fits_type_p\t\tPARAMS ((tree, tree));\n extern int tree_log2\t\t\tPARAMS ((tree));"}]}