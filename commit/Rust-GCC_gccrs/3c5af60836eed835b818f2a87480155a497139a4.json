{"sha": "3c5af60836eed835b818f2a87480155a497139a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M1YWY2MDgzNmVlZDgzNWI4MThmMmE4NzQ4MDE1NWE0OTcxMzlhNA==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2018-09-19T10:24:59Z"}, "committer": {"name": "Matthew Malcomson", "email": "matmal01@gcc.gnu.org", "date": "2018-09-19T10:24:59Z"}, "message": "[AARCH64] Use STLUR for atomic_store\n\nUse the STLUR instruction introduced in Armv8.4-a.\nThis instruction has the store-release semantic like STLR but can take a\n9-bit unscaled signed immediate offset.\n\nExample test case:\n```\nvoid\nfoo ()\n{\n    int32_t *atomic_vals = calloc (4, sizeof (int32_t));\n    atomic_store_explicit (atomic_vals + 1, 2, memory_order_release);\n}\n```\n\nBefore patch generates\n```\nfoo:\n\tstp\tx29, x30, [sp, -16]!\n\tmov\tx1, 4\n\tmov\tx0, x1\n\tmov\tx29, sp\n\tbl\tcalloc\n\tmov\tw1, 2\n\tadd\tx0, x0, 4\n\tstlr\tw1, [x0]\n\tldp\tx29, x30, [sp], 16\n\tret\n```\n\nAfter patch generates\n```\nfoo:\n\tstp\tx29, x30, [sp, -16]!\n\tmov\tx1, 4\n\tmov\tx0, x1\n\tmov\tx29, sp\n\tbl\tcalloc\n\tmov\tw1, 2\n\tstlur\tw1, [x0, 4]\n\tldp\tx29, x30, [sp], 16\n\tret\n```\n\nWe introduce a new feature flag to indicate the presence of this instruction.\nThe feature flag is called AARCH64_ISA_RCPC8_4 and is included when targeting\narmv8.4 architecture.\n\nWe also introduce an \"arch\" attribute to be checked called \"rcpc8_4\" after this\nfeature flag.\n\ngcc/\n\n2018-09-19  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* config/aarch64/aarch64-protos.h\n\t(aarch64_offset_9bit_signed_unscaled_p): New declaration.\n\t* config/aarch64/aarch64.md (arches): New \"rcpc8_4\" attribute value.\n\t(arch_enabled): Add check for \"rcpc8_4\" attribute value of \"arch\".\n\t* config/aarch64/aarch64.h (AARCH64_FL_RCPC8_4): New bitfield.\n\t(AARCH64_FL_FOR_ARCH8_4): Include AARCH64_FL_RCPC8_4.\n\t(AARCH64_FL_PROFILE): Move index so flags are ordered.\n\t(AARCH64_ISA_RCPC8_4): New flag.\n\t* config/aarch64/aarch64.c (offset_9bit_signed_unscaled_p): Renamed\n\tto aarch64_offset_9bit_signed_unscaled_p.\n\t* config/aarch64/atomics.md (atomic_store<mode>): Allow offset\n\tand use stlur.\n\t* config/aarch64/constraints.md (Ust): New constraint.\n\t* config/aarch64/predicates.md.\n\t(aarch64_9bit_offset_memory_operand): New predicate.\n\t(aarch64_rcpc_memory_operand): New predicate.\n\ngcc/testsuite/\n\n2018-09-19  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* gcc.target/aarch64/atomic-store.c: New.\n\nFrom-SVN: r264421", "tree": {"sha": "cc5018970428d8d38fd290cd73f0120a24a26046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc5018970428d8d38fd290cd73f0120a24a26046"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c5af60836eed835b818f2a87480155a497139a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5af60836eed835b818f2a87480155a497139a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5af60836eed835b818f2a87480155a497139a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5af60836eed835b818f2a87480155a497139a4/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "574f5885f7d0fce6cb7f3b0bcf476871722d0bc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574f5885f7d0fce6cb7f3b0bcf476871722d0bc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/574f5885f7d0fce6cb7f3b0bcf476871722d0bc9"}], "stats": {"total": 171, "additions": 157, "deletions": 14}, "files": [{"sha": "619019d454c9e79f0d2ab2890ab13c6c40e4b739", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5af60836eed835b818f2a87480155a497139a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5af60836eed835b818f2a87480155a497139a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c5af60836eed835b818f2a87480155a497139a4", "patch": "@@ -1,3 +1,22 @@\n+2018-09-19  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_offset_9bit_signed_unscaled_p): New declaration.\n+\t* config/aarch64/aarch64.md (arches): New \"rcpc8_4\" attribute value.\n+\t(arch_enabled): Add check for \"rcpc8_4\" attribute value of \"arch\".\n+\t* config/aarch64/aarch64.h (AARCH64_FL_RCPC8_4): New bitfield.\n+\t(AARCH64_FL_FOR_ARCH8_4): Include AARCH64_FL_RCPC8_4.\n+\t(AARCH64_FL_PROFILE): Move index so flags are ordered.\n+\t(AARCH64_ISA_RCPC8_4): New flag.\n+\t* config/aarch64/aarch64.c (offset_9bit_signed_unscaled_p): Renamed\n+\tto aarch64_offset_9bit_signed_unscaled_p.\n+\t* config/aarch64/atomics.md (atomic_store<mode>): Allow offset\n+\tand use stlur.\n+\t* config/aarch64/constraints.md (Ust): New constraint.\n+\t* config/aarch64/predicates.md.\n+\t(aarch64_9bit_offset_memory_operand): New predicate.\n+\t(aarch64_rcpc_memory_operand): New predicate.\n+\n 2018-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR rtl-optimization/87361"}, {"sha": "caf1d2041f0cac8e3f975f8384a167a90dc638e5", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5af60836eed835b818f2a87480155a497139a4/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5af60836eed835b818f2a87480155a497139a4/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=3c5af60836eed835b818f2a87480155a497139a4", "patch": "@@ -436,6 +436,7 @@ void aarch64_split_add_offset (scalar_int_mode, rtx, rtx, rtx, rtx, rtx);\n bool aarch64_mov_operand_p (rtx, machine_mode);\n rtx aarch64_reverse_mask (machine_mode, unsigned int);\n bool aarch64_offset_7bit_signed_scaled_p (machine_mode, poly_int64);\n+bool aarch64_offset_9bit_signed_unscaled_p (machine_mode, poly_int64);\n char *aarch64_output_sve_cnt_immediate (const char *, const char *, rtx);\n char *aarch64_output_sve_addvl_addpl (rtx, rtx, rtx);\n char *aarch64_output_sve_inc_dec_immediate (const char *, rtx);"}, {"sha": "cbf9d0c09b23712a67a5f0781c247cc859ade18d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5af60836eed835b818f2a87480155a497139a4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5af60836eed835b818f2a87480155a497139a4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=3c5af60836eed835b818f2a87480155a497139a4", "patch": "@@ -4452,9 +4452,9 @@ aarch64_offset_7bit_signed_scaled_p (machine_mode mode, poly_int64 offset)\n \n /* Return true if OFFSET is a signed 9-bit value.  */\n \n-static inline bool\n-offset_9bit_signed_unscaled_p (machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t       poly_int64 offset)\n+bool\n+aarch64_offset_9bit_signed_unscaled_p (machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t\t       poly_int64 offset)\n {\n   HOST_WIDE_INT const_offset;\n   return (offset.is_constant (&const_offset)\n@@ -5721,7 +5721,7 @@ aarch64_classify_address (struct aarch64_address_info *info,\n \t     instruction memory accesses.  */\n \t  if (mode == TImode || mode == TFmode)\n \t    return (aarch64_offset_7bit_signed_scaled_p (DImode, offset)\n-\t\t    && (offset_9bit_signed_unscaled_p (mode, offset)\n+\t\t    && (aarch64_offset_9bit_signed_unscaled_p (mode, offset)\n \t\t\t|| offset_12bit_unsigned_scaled_p (mode, offset)));\n \n \t  /* A 7bit offset check because OImode will emit a ldp/stp\n@@ -5735,7 +5735,8 @@ aarch64_classify_address (struct aarch64_address_info *info,\n \t     ldr/str instructions (only big endian will get here).  */\n \t  if (mode == CImode)\n \t    return (aarch64_offset_7bit_signed_scaled_p (TImode, offset)\n-\t\t    && (offset_9bit_signed_unscaled_p (V16QImode, offset + 32)\n+\t\t    && (aarch64_offset_9bit_signed_unscaled_p (V16QImode,\n+\t\t\t\t\t\t\t       offset + 32)\n \t\t\t|| offset_12bit_unsigned_scaled_p (V16QImode,\n \t\t\t\t\t\t\t   offset + 32)));\n \n@@ -5775,7 +5776,7 @@ aarch64_classify_address (struct aarch64_address_info *info,\n \t\t     || known_eq (GET_MODE_SIZE (mode), 16))\n \t\t    && aarch64_offset_7bit_signed_scaled_p (mode, offset));\n \t  else\n-\t    return (offset_9bit_signed_unscaled_p (mode, offset)\n+\t    return (aarch64_offset_9bit_signed_unscaled_p (mode, offset)\n \t\t    || offset_12bit_unsigned_scaled_p (mode, offset));\n \t}\n \n@@ -5828,15 +5829,15 @@ aarch64_classify_address (struct aarch64_address_info *info,\n \t   */\n \t  if (mode == TImode || mode == TFmode)\n \t    return (aarch64_offset_7bit_signed_scaled_p (mode, offset)\n-\t\t    && offset_9bit_signed_unscaled_p (mode, offset));\n+\t\t    && aarch64_offset_9bit_signed_unscaled_p (mode, offset));\n \n \t  if (load_store_pair_p)\n \t    return ((known_eq (GET_MODE_SIZE (mode), 4)\n \t\t     || known_eq (GET_MODE_SIZE (mode), 8)\n \t\t     || known_eq (GET_MODE_SIZE (mode), 16))\n \t\t    && aarch64_offset_7bit_signed_scaled_p (mode, offset));\n \t  else\n-\t    return offset_9bit_signed_unscaled_p (mode, offset);\n+\t    return aarch64_offset_9bit_signed_unscaled_p (mode, offset);\n \t}\n       return false;\n "}, {"sha": "e5cdb1d54f4ee96140202ea21a9478438d208f45", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5af60836eed835b818f2a87480155a497139a4/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5af60836eed835b818f2a87480155a497139a4/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=3c5af60836eed835b818f2a87480155a497139a4", "patch": "@@ -157,9 +157,10 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_FL_SM4\t      (1 << 17)  /* Has ARMv8.4-A SM3 and SM4.  */\n #define AARCH64_FL_SHA3\t      (1 << 18)  /* Has ARMv8.4-a SHA3 and SHA512.  */\n #define AARCH64_FL_F16FML     (1 << 19)  /* Has ARMv8.4-a FP16 extensions.  */\n+#define AARCH64_FL_RCPC8_4    (1 << 20)  /* Has ARMv8.4-a RCPC extensions.  */\n \n /* Statistical Profiling extensions.  */\n-#define AARCH64_FL_PROFILE    (1 << 20)\n+#define AARCH64_FL_PROFILE    (1 << 21)\n \n /* Has FP and SIMD.  */\n #define AARCH64_FL_FPSIMD     (AARCH64_FL_FP | AARCH64_FL_SIMD)\n@@ -178,7 +179,7 @@ extern unsigned aarch64_architecture_version;\n   (AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_V8_3)\n #define AARCH64_FL_FOR_ARCH8_4\t\t\t\\\n   (AARCH64_FL_FOR_ARCH8_3 | AARCH64_FL_V8_4 | AARCH64_FL_F16FML \\\n-   | AARCH64_FL_DOTPROD)\n+   | AARCH64_FL_DOTPROD | AARCH64_FL_RCPC8_4)\n \n /* Macros to test ISA flags.  */\n \n@@ -199,6 +200,7 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_ISA_SM4\t           (aarch64_isa_flags & AARCH64_FL_SM4)\n #define AARCH64_ISA_SHA3\t   (aarch64_isa_flags & AARCH64_FL_SHA3)\n #define AARCH64_ISA_F16FML\t   (aarch64_isa_flags & AARCH64_FL_F16FML)\n+#define AARCH64_ISA_RCPC8_4\t   (aarch64_isa_flags & AARCH64_FL_RCPC8_4)\n \n /* Crypto is an optional extension to AdvSIMD.  */\n #define TARGET_CRYPTO (TARGET_SIMD && AARCH64_ISA_CRYPTO)"}, {"sha": "7e7ca15c088f902dd20ad810f743b6e87828cf2c", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5af60836eed835b818f2a87480155a497139a4/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5af60836eed835b818f2a87480155a497139a4/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=3c5af60836eed835b818f2a87480155a497139a4", "patch": "@@ -263,7 +263,7 @@\n ;; alternative). This attribute is used to compute attribute \"enabled\", use type\n ;; \"any\" to enable an alternative in all cases.\n \n-(define_enum \"arches\" [ any fp simd sve fp16])\n+(define_enum \"arches\" [ any rcpc8_4 fp simd sve fp16])\n \n (define_enum_attr \"arch\" \"arches\" (const_string \"any\"))\n \n@@ -285,6 +285,9 @@\n     (ior\n \t(eq_attr \"arch\" \"any\")\n \n+\t(and (eq_attr \"arch\" \"rcpc8_4\")\n+\t     (match_test \"AARCH64_ISA_RCPC8_4\"))\n+\n \t(and (eq_attr \"arch\" \"fp\")\n \t     (match_test \"TARGET_FLOAT\"))\n "}, {"sha": "bba8e9e9c8e61d95fcfb61e650e7e76671c8f996", "filename": "gcc/config/aarch64/atomics.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5af60836eed835b818f2a87480155a497139a4/gcc%2Fconfig%2Faarch64%2Fatomics.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5af60836eed835b818f2a87480155a497139a4/gcc%2Fconfig%2Faarch64%2Fatomics.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fatomics.md?ref=3c5af60836eed835b818f2a87480155a497139a4", "patch": "@@ -481,19 +481,22 @@\n )\n \n (define_insn \"atomic_store<mode>\"\n-  [(set (match_operand:ALLI 0 \"aarch64_sync_memory_operand\" \"=Q\")\n+  [(set (match_operand:ALLI 0 \"aarch64_rcpc_memory_operand\" \"=Q,Ust\")\n     (unspec_volatile:ALLI\n-      [(match_operand:ALLI 1 \"general_operand\" \"rZ\")\n+      [(match_operand:ALLI 1 \"general_operand\" \"rZ,rZ\")\n        (match_operand:SI 2 \"const_int_operand\")]\t\t\t;; model\n       UNSPECV_STL))]\n   \"\"\n   {\n     enum memmodel model = memmodel_from_int (INTVAL (operands[2]));\n     if (is_mm_relaxed (model) || is_mm_consume (model) || is_mm_acquire (model))\n       return \"str<atomic_sfx>\\t%<w>1, %0\";\n-    else\n+    else if (which_alternative == 0)\n       return \"stlr<atomic_sfx>\\t%<w>1, %0\";\n+    else\n+      return \"stlur<atomic_sfx>\\t%<w>1, %0\";\n   }\n+  [(set_attr \"arch\" \"*,rcpc8_4\")]\n )\n \n (define_insn \"@aarch64_load_exclusive<mode>\""}, {"sha": "99dac3be807e6e0f399b3e273df6d54e95ef5a2e", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5af60836eed835b818f2a87480155a497139a4/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5af60836eed835b818f2a87480155a497139a4/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=3c5af60836eed835b818f2a87480155a497139a4", "patch": "@@ -225,6 +225,11 @@\n  (and (match_code \"mem\")\n       (match_test \"REG_P (XEXP (op, 0))\")))\n \n+(define_memory_constraint \"Ust\"\n+  \"@internal\n+  A memory address with 9bit unscaled offset.\"\n+  (match_operand 0 \"aarch64_9bit_offset_memory_operand\"))\n+\n (define_memory_constraint \"Ump\"\n   \"@internal\n   A memory address suitable for a load/store pair operation.\""}, {"sha": "5b08b03c5868c7aa86f8844e3219a6e82717d4f0", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5af60836eed835b818f2a87480155a497139a4/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5af60836eed835b818f2a87480155a497139a4/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=3c5af60836eed835b818f2a87480155a497139a4", "patch": "@@ -359,6 +359,36 @@\n   (and (match_operand 0 \"memory_operand\")\n        (match_code \"reg\" \"0\")))\n \n+(define_predicate \"aarch64_9bit_offset_memory_operand\"\n+  (and (match_operand 0 \"memory_operand\")\n+       (ior (match_code \"reg\" \"0\")\n+\t    (and (match_code \"plus\" \"0\")\n+\t\t (match_code \"reg\"  \"00\")\n+\t\t (match_code \"const_int\" \"01\"))))\n+{\n+  rtx mem_op = XEXP (op, 0);\n+\n+  if (REG_P (mem_op))\n+    return GET_MODE (mem_op) == DImode;\n+\n+  rtx plus_op0 = XEXP (mem_op, 0);\n+  rtx plus_op1 = XEXP (mem_op, 1);\n+\n+  if (GET_MODE (plus_op0) != DImode)\n+    return false;\n+\n+  poly_int64 offset;\n+  if (!poly_int_rtx_p (plus_op1, &offset))\n+    gcc_unreachable ();\n+\n+  return aarch64_offset_9bit_signed_unscaled_p (mode, offset);\n+})\n+\n+(define_predicate \"aarch64_rcpc_memory_operand\"\n+  (if_then_else (match_test \"AARCH64_ISA_RCPC8_4\")\n+    (match_operand 0 \"aarch64_9bit_offset_memory_operand\")\n+    (match_operand 0 \"aarch64_sync_memory_operand\")))\n+\n ;; Predicates for parallel expanders based on mode.\n (define_special_predicate \"vect_par_cnst_hi_half\"\n   (match_code \"parallel\")"}, {"sha": "c2739e8b7bbe4bcd96686a55cc0c46f813eb46ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5af60836eed835b818f2a87480155a497139a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5af60836eed835b818f2a87480155a497139a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c5af60836eed835b818f2a87480155a497139a4", "patch": "@@ -1,3 +1,7 @@\n+2018-09-19  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* gcc.target/aarch64/atomic-store.c: New.\n+\n 2018-09-19  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87349"}, {"sha": "8cabc05b0d739dbfdcecf681348b62634fcfc9a4", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-store.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5af60836eed835b818f2a87480155a497139a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-store.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5af60836eed835b818f2a87480155a497139a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-store.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-store.c?ref=3c5af60836eed835b818f2a87480155a497139a4", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.4-a -O2\" } */\n+\n+#include <stdatomic.h>\n+\n+typedef __INT8_TYPE__ int8_t;\n+typedef __INT16_TYPE__ int16_t;\n+typedef __INT32_TYPE__ int32_t;\n+typedef __INT64_TYPE__ int64_t;\n+\n+#define STORE_TESTS(size) \\\n+  void \\\n+  foo##size (int##size##_t *atomic_vals) \\\n+{ \\\n+  atomic_store_explicit (atomic_vals, 2, memory_order_relaxed); \\\n+  atomic_store_explicit (atomic_vals, 2, memory_order_release); \\\n+  atomic_store_explicit ((atomic_vals + 1), 2, memory_order_release); \\\n+  atomic_store ((atomic_vals + 2), 2); \\\n+  atomic_store_explicit ((atomic_vals + 3), 2, memory_order_relaxed); \\\n+}\n+\n+STORE_TESTS (8);\n+/* { dg-final { scan-assembler-times \"strb\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"stlrb\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 1  { target { ! ilp32 } } } } */\n+/* { dg-final { scan-assembler-times \"stlrb\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 2  { target { ilp32 } } } } */\n+/* { dg-final { scan-assembler-times \"stlurb\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+, 1\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"stlurb\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+, 2\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"strb\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+, 3\\\\\\]\" 1 } } */\n+\n+STORE_TESTS (16);\n+/* { dg-final { scan-assembler-times \"strh\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"stlrh\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"stlurh\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+, 2\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"stlurh\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+, 4\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"strh\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+, 6\\\\\\]\" 1 } } */\n+\n+STORE_TESTS (32);\n+/* { dg-final { scan-assembler-times \"str\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"stlr\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"stlur\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+, 4\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"stlur\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+, 8\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"str\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+, 12\\\\\\]\" 1 } } */\n+\n+STORE_TESTS (64);\n+/* { dg-final { scan-assembler-times \"str\\tx\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"stlur\\tx\\[0-9\\]+, \\\\\\[x\\[0-9\\]+, 8\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"stlur\\tx\\[0-9\\]+, \\\\\\[x\\[0-9\\]+, 16\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"str\\tx\\[0-9\\]+, \\\\\\[x\\[0-9\\]+, 24\\\\\\]\" 1 } } */\n+\n+void\n+foo_toolarge_offset (int64_t *atomic_vals)\n+{\n+  /* 9bit signed unscaled immediate =>\n+\tlargest representable value +255.\n+\tsmallest representable value -256.  */\n+  atomic_store_explicit (atomic_vals + 32, 2, memory_order_release);\n+  atomic_store_explicit (atomic_vals - 33, 2, memory_order_release);\n+}\n+\n+void\n+foo_negative (int8_t *atomic_vals)\n+{\n+  atomic_store_explicit (atomic_vals - 2, 2, memory_order_release);\n+}\n+/* { dg-final { scan-assembler-times \"stlurb\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+, -2\\\\\\]\" 1 { target { ! ilp32 } } } } */\n+\n+#pragma GCC target (\"arch=armv8.3-a\")\n+void\n+foo_older_arch (int64_t *atomic_vals)\n+{\n+  atomic_store_explicit (atomic_vals + 2, 2, memory_order_release);\n+}\n+\n+/* Three times, one for each of the three above functions.  */\n+/* { dg-final { scan-assembler-times \"stlr\\tx\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 4 } } */"}]}