{"sha": "3d091dac56f97cc79cc2e9a31796219fba99764c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QwOTFkYWM1NmY5N2NjNzljYzJlOWEzMTc5NjIxOWZiYTk5NzY0Yw==", "commit": {"author": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-09-05T02:50:09Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-09-05T02:50:09Z"}, "message": "builtin-attrs.def (ATTR_SENTINEL, [...]): New.\n\ngcc:\n\t* builtin-attrs.def (ATTR_SENTINEL, ATTR_SENTINEL_NOTHROW_LIST):\n\tNew.\n\t* builtins.def (BUILT_IN_EXECL, BUILT_IN_EXECLP): Add `sentinel'\n\tattribute.\n\t* c-common.c (handle_sentinel_attribute, check_function_sentinel):\n\tNew functions.\n\t(c_common_attribute_table): Add `sentinel' attribute.\n\t(check_function_arguments): Handle `sentinel' attribute.\n\t* doc/extend.texi: Document `sentinel' attribute.\n\ngcc/testsuite:\n\t* gcc.dg/format/sentinel-1.c: New test.\n\ninclude:\n\t* ansidecl.h (ATTRIBUTE_SENTINEL): Define.\n\t* libiberty.h (concat, reconcat, concat_length, concat_copy,\n\tconcat_copy2): Use ATTRIBUTE_SENTINEL.\n\nFrom-SVN: r87096", "tree": {"sha": "616590e443b211fdf7309d929fce3872a4ff3f15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/616590e443b211fdf7309d929fce3872a4ff3f15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d091dac56f97cc79cc2e9a31796219fba99764c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d091dac56f97cc79cc2e9a31796219fba99764c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d091dac56f97cc79cc2e9a31796219fba99764c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d091dac56f97cc79cc2e9a31796219fba99764c/comments", "author": null, "committer": null, "parents": [{"sha": "ecd466457ce9203bec0241815528533fcbee81ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd466457ce9203bec0241815528533fcbee81ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecd466457ce9203bec0241815528533fcbee81ea"}], "stats": {"total": 161, "additions": 151, "deletions": 10}, "files": [{"sha": "95f0e026050dc0fab8d990b9666ab39c55e6ce02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d091dac56f97cc79cc2e9a31796219fba99764c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d091dac56f97cc79cc2e9a31796219fba99764c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d091dac56f97cc79cc2e9a31796219fba99764c", "patch": "@@ -1,8 +1,19 @@\n+2004-09-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n-\t* configure: Regenerated.\n+\t* builtin-attrs.def (ATTR_SENTINEL, ATTR_SENTINEL_NOTHROW_LIST):\n+\tNew.\n+\t* builtins.def (BUILT_IN_EXECL, BUILT_IN_EXECLP): Add `sentinel'\n+\tattribute.\n+\t* c-common.c (handle_sentinel_attribute, check_function_sentinel):\n+\tNew functions.\n+\t(c_common_attribute_table): Add `sentinel' attribute.\n+\t(check_function_arguments): Handle `sentinel' attribute.\n+\t* doc/extend.texi: Document `sentinel' attribute.\n \n 2004-09-04  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* configure: Regenerated.\n+\n \t* gimplify.c (internal_get_tmp_var): Remove unused var CLASS.\n \n \t* tree.c (save_expr): No longer TREE_READONLY."}, {"sha": "67cf193e4fd1c1c4a214ca3d40f550c07a1b5498", "filename": "gcc/builtin-attrs.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d091dac56f97cc79cc2e9a31796219fba99764c/gcc%2Fbuiltin-attrs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d091dac56f97cc79cc2e9a31796219fba99764c/gcc%2Fbuiltin-attrs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-attrs.def?ref=3d091dac56f97cc79cc2e9a31796219fba99764c", "patch": "@@ -84,6 +84,7 @@ DEF_ATTR_IDENT (ATTR_GCC_CDIAG, \"gcc_cdiag\")\n DEF_ATTR_IDENT (ATTR_GCC_CXXDIAG, \"gcc_cxxdiag\")\n DEF_ATTR_IDENT (ATTR_PURE, \"pure\")\n DEF_ATTR_IDENT (ATTR_SCANF, \"scanf\")\n+DEF_ATTR_IDENT (ATTR_SENTINEL, \"sentinel\")\n DEF_ATTR_IDENT (ATTR_STRFMON, \"strfmon\")\n DEF_ATTR_IDENT (ATTR_STRFTIME, \"strftime\")\n \n@@ -97,6 +98,8 @@ DEF_ATTR_TREE_LIST (ATTR_NORETURN_NOTHROW_LIST, ATTR_NORETURN,\t\\\n \t\t\tATTR_NULL, ATTR_NOTHROW_LIST)\n DEF_ATTR_TREE_LIST (ATTR_MALLOC_NOTHROW_LIST, ATTR_MALLOC,\t\\\n \t\t\tATTR_NULL, ATTR_NOTHROW_LIST)\n+DEF_ATTR_TREE_LIST (ATTR_SENTINEL_NOTHROW_LIST, ATTR_SENTINEL,\t\\\n+\t\t\tATTR_NULL, ATTR_NOTHROW_LIST)\n \n DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_1, ATTR_NONNULL, ATTR_LIST_1, \\\n \t\t\tATTR_NOTHROW_LIST)"}, {"sha": "e89509fcebfa3a4cf5715095c9472b162b95dd8c", "filename": "gcc/builtins.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d091dac56f97cc79cc2e9a31796219fba99764c/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d091dac56f97cc79cc2e9a31796219fba99764c/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=3d091dac56f97cc79cc2e9a31796219fba99764c", "patch": "@@ -554,8 +554,8 @@ DEF_GCC_BUILTIN        (BUILT_IN_DWARF_CFA, \"dwarf_cfa\", BT_FN_PTR, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_DWARF_SP_COLUMN, \"dwarf_sp_column\", BT_FN_UINT, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_EH_RETURN, \"eh_return\", BT_FN_VOID_PTRMODE_PTR, ATTR_NORETURN_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_EH_RETURN_DATA_REGNO, \"eh_return_data_regno\", BT_FN_INT_INT, ATTR_NULL)\n-DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECL, \"execl\", BT_FN_INT_CONST_STRING_CONST_STRING_VAR, ATTR_NOTHROW_LIST)\n-DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECLP, \"execlp\", BT_FN_INT_CONST_STRING_CONST_STRING_VAR, ATTR_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECL, \"execl\", BT_FN_INT_CONST_STRING_CONST_STRING_VAR, ATTR_SENTINEL_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECLP, \"execlp\", BT_FN_INT_CONST_STRING_CONST_STRING_VAR, ATTR_SENTINEL_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECLE, \"execle\", BT_FN_INT_CONST_STRING_CONST_STRING_VAR, ATTR_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECV, \"execv\", BT_FN_INT_CONST_STRING_PTR_CONST_STRING, ATTR_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECVP, \"execvp\", BT_FN_INT_CONST_STRING_PTR_CONST_STRING, ATTR_NOTHROW_LIST)"}, {"sha": "3af1e6408ed0391406cf10b30488018397aa535d", "filename": "gcc/c-common.c", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d091dac56f97cc79cc2e9a31796219fba99764c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d091dac56f97cc79cc2e9a31796219fba99764c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3d091dac56f97cc79cc2e9a31796219fba99764c", "patch": "@@ -557,6 +557,7 @@ static tree handle_nothrow_attribute (tree *, tree, tree, int, bool *);\n static tree handle_cleanup_attribute (tree *, tree, tree, int, bool *);\n static tree handle_warn_unused_result_attribute (tree *, tree, tree, int,\n \t\t\t\t\t\t bool *);\n+static tree handle_sentinel_attribute (tree *, tree, tree, int, bool *);\n \n static void check_function_nonnull (tree, tree);\n static void check_nonnull_arg (void *, tree, unsigned HOST_WIDE_INT);\n@@ -635,6 +636,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_cleanup_attribute },\n   { \"warn_unused_result\",     0, 0, false, true, true,\n \t\t\t      handle_warn_unused_result_attribute },\n+  { \"sentinel\",               0, 0, false, true, true,\n+\t\t\t      handle_sentinel_attribute },\n   { NULL,                     0, 0, false, false, false, NULL }\n };\n \n@@ -5044,6 +5047,29 @@ check_function_nonnull (tree attrs, tree params)\n     }\n }\n \n+/* Check the last argument of a function call is (pointer)0.  */\n+\n+static void\n+check_function_sentinel (tree attrs, tree params)\n+{\n+  tree attr = lookup_attribute (\"sentinel\", attrs);\n+\n+  if (attr)\n+    {\n+      if (!params)\n+\twarning (\"missing sentinel in function call\");\n+      else\n+        {\n+\t  /* Find the last parameter.  */\n+\t  while (TREE_CHAIN (params))\n+\t    params = TREE_CHAIN (params);\n+\t  if (!POINTER_TYPE_P (TREE_TYPE (TREE_VALUE (params)))\n+\t      || !integer_zerop (TREE_VALUE (params)))\n+\t    warning (\"missing sentinel in function call\");\n+\t}\n+    }\n+}\n+\n /* Helper for check_function_nonnull; given a list of operands which\n    must be non-null in ARGS, determine if operand PARAM_NUM should be\n    checked.  */\n@@ -5185,6 +5211,36 @@ handle_warn_unused_result_attribute (tree *node, tree name,\n \n   return NULL_TREE;\n }\n+\n+/* Handle a \"sentinel\" attribute.  */\n+\n+static tree\n+handle_sentinel_attribute (tree *node, tree name,\n+\t\t\t   tree ARG_UNUSED (args),\n+\t\t\t   int ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  tree params = TYPE_ARG_TYPES (*node);\n+\n+  if (!params)\n+    {\n+      warning (\"`%s' attribute requires prototypes with named arguments\",\n+               IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+      return NULL_TREE;\n+    }\n+\n+  while (TREE_CHAIN (params))\n+    params = TREE_CHAIN (params);\n+\n+  if (VOID_TYPE_P (TREE_VALUE (params)))\n+    {\n+      warning (\"`%s' attribute only applies to variadic functions\",\n+\t       IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+  \n+  return NULL_TREE;\n+}\n \f\n /* Check for valid arguments being passed to a function.  */\n void\n@@ -5199,7 +5255,10 @@ check_function_arguments (tree attrs, tree params)\n   /* Check for errors in format strings.  */\n \n   if (warn_format)\n-    check_function_format (attrs, params);\n+    {\n+      check_function_format (attrs, params);\n+      check_function_sentinel (attrs, params);\n+    }\n }\n \n /* Generic argument checking recursion routine.  PARAM is the argument to"}, {"sha": "4c27320f2b95195b0bfa112d133b8bc328a04033", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d091dac56f97cc79cc2e9a31796219fba99764c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d091dac56f97cc79cc2e9a31796219fba99764c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=3d091dac56f97cc79cc2e9a31796219fba99764c", "patch": "@@ -1496,7 +1496,7 @@ attributes when making a declaration.  This keyword is followed by an\n attribute specification inside double parentheses.  The following\n attributes are currently defined for functions on all targets:\n @code{noreturn}, @code{noinline}, @code{always_inline},\n-@code{pure}, @code{const}, @code{nothrow},\n+@code{pure}, @code{const}, @code{nothrow}, @code{sentinel},\n @code{format}, @code{format_arg}, @code{no_instrument_function},\n @code{section}, @code{constructor}, @code{destructor}, @code{used},\n @code{unused}, @code{deprecated}, @code{weak}, @code{malloc},\n@@ -2111,6 +2111,18 @@ attribute is not available on all platforms.\n If you need to map the entire contents of a module to a particular\n section, consider using the facilities of the linker instead.\n \n+@item sentinel\n+@cindex @code{sentinel} function attribute\n+This function attribute ensures that the last parameter in a function\n+call is an explicit @code{NULL}.  The attribute is only valid on\n+variadic functions.  For example the attribute is automatically set for\n+the built-in functions @code{execl} and @code{execlp} where @code{NULL}\n+is the marker for argument list termination.  A valid @code{NULL} in\n+this context is defined as zero with any pointer type.  If your system\n+defines the @code{NULL} macro with an integer type then you need to add\n+an explicit cast.  The warnings for missing or incorrect sentinels are\n+enabled with @option{-Wformat}.\n+\n @item short_call\n See long_call/short_call.\n "}, {"sha": "4fb58cb251b55463f57303930ada633cb3d8a5f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d091dac56f97cc79cc2e9a31796219fba99764c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d091dac56f97cc79cc2e9a31796219fba99764c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3d091dac56f97cc79cc2e9a31796219fba99764c", "patch": "@@ -1,3 +1,7 @@\n+2004-09-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/format/sentinel-1.c: New test.\n+\n 2004-09-04  Uros Bizjak  <uros@kss-loka.si>\n \n \t* testsuite/gcc.dg/builtins-46.c: New."}, {"sha": "e1e127dca38e9dcc1836e1290b978906a7ecbc8c", "filename": "gcc/testsuite/gcc.dg/format/sentinel-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d091dac56f97cc79cc2e9a31796219fba99764c/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsentinel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d091dac56f97cc79cc2e9a31796219fba99764c/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsentinel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsentinel-1.c?ref=3d091dac56f97cc79cc2e9a31796219fba99764c", "patch": "@@ -0,0 +1,37 @@\n+/* Test for attribute sentinel.  */\n+/* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+#include <stddef.h> /* For NULL, which must be (ptr)0.  */\n+\n+extern int execl (const char *, const char *, ...);\n+extern int execlp (const char *, const char *, ...);\n+\n+#define ATTR __attribute__ ((__sentinel__))\n+\n+extern int a ATTR; /* { dg-warning \"applies to function types\" \"sentinel\" } */\n+\n+extern void foo1 (const char *, ...) ATTR;\n+extern void foo2 (...) ATTR; /* { dg-error \"ISO C requires|named arguments\" \"sentinel\" } */\n+extern void foo3 () ATTR; /* { dg-warning \"named arguments\" \"sentinel\" } */\n+extern void foo4 (const char *, int) ATTR; /* { dg-warning \"variadic functions\" \"sentinel\" } */\n+\n+extern void bar(void)\n+{\n+  foo1 (); /* { dg-error \"missing sentinel|too few arguments\" \"sentinel\" } */\n+  foo1 (\"a\"); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  foo1 (\"a\", 1); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  foo1 (\"a\", 0); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  foo1 (\"a\", (void*)1); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  foo1 (\"a\", NULL, 1); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  foo1 (\"a\", NULL);\n+\n+  execl (\"/bin/ls\", \"-aFC\"); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  execl (\"/bin/ls\", \"-aFC\", 0); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  execl (\"/bin/ls\", \"-aFC\", NULL);\n+\n+  execlp (\"ls\", \"-aFC\"); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  execlp (\"ls\", \"-aFC\", 0); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  execlp (\"ls\", \"-aFC\", NULL);\n+}"}, {"sha": "19d2f5099e43d986e9962e357ea1c64c2136bb93", "filename": "include/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d091dac56f97cc79cc2e9a31796219fba99764c/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d091dac56f97cc79cc2e9a31796219fba99764c/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=3d091dac56f97cc79cc2e9a31796219fba99764c", "patch": "@@ -1,3 +1,9 @@\n+2004-09-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* ansidecl.h (ATTRIBUTE_SENTINEL): Define.\n+\t* libiberty.h (concat, reconcat, concat_length, concat_copy,\n+\tconcat_copy2): Use ATTRIBUTE_SENTINEL.\n+\n 2004-08-02  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* libiberty.h (XDELETE, XDELETEVEC, XRESIZEVEC): Remove any"}, {"sha": "04c3a30bb53bfa3204d61983d16b23067aea5f14", "filename": "include/ansidecl.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d091dac56f97cc79cc2e9a31796219fba99764c/include%2Fansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d091dac56f97cc79cc2e9a31796219fba99764c/include%2Fansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fansidecl.h?ref=3d091dac56f97cc79cc2e9a31796219fba99764c", "patch": "@@ -322,6 +322,15 @@ So instead we use the macro below and test it against specific values.  */\n # define ATTRIBUTE_NULL_PRINTF_5 ATTRIBUTE_NULL_PRINTF(5, 6)\n #endif /* ATTRIBUTE_NULL_PRINTF */\n \n+/* Attribute `sentinel' was valid as of gcc 3.5.  */\n+#ifndef ATTRIBUTE_SENTINEL\n+# if (GCC_VERSION >= 3005)\n+#  define ATTRIBUTE_SENTINEL __attribute__ ((__sentinel__))\n+# else\n+#  define ATTRIBUTE_SENTINEL\n+# endif /* GNUC >= 3.5 */\n+#endif /* ATTRIBUTE_SENTINEL */\n+\n /* We use __extension__ in some places to suppress -pedantic warnings\n    about GCC extensions.  This feature didn't work properly before\n    gcc 2.8.  */"}, {"sha": "4aab80b215073badfdca76677700afe737d229a6", "filename": "include/libiberty.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d091dac56f97cc79cc2e9a31796219fba99764c/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d091dac56f97cc79cc2e9a31796219fba99764c/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=3d091dac56f97cc79cc2e9a31796219fba99764c", "patch": "@@ -93,7 +93,7 @@ extern char *lrealpath PARAMS ((const char *));\n    the last argument of this function, to terminate the list of\n    strings.  Allocates memory using xmalloc.  */\n \n-extern char *concat PARAMS ((const char *, ...)) ATTRIBUTE_MALLOC;\n+extern char *concat PARAMS ((const char *, ...)) ATTRIBUTE_MALLOC ATTRIBUTE_SENTINEL;\n \n /* Concatenate an arbitrary number of strings.  You must pass NULL as\n    the last argument of this function, to terminate the list of\n@@ -102,27 +102,27 @@ extern char *concat PARAMS ((const char *, ...)) ATTRIBUTE_MALLOC;\n    pointer to be freed after the new string is created, similar to the\n    way xrealloc works.  */\n \n-extern char *reconcat PARAMS ((char *, const char *, ...)) ATTRIBUTE_MALLOC;\n+extern char *reconcat PARAMS ((char *, const char *, ...)) ATTRIBUTE_MALLOC ATTRIBUTE_SENTINEL;\n \n /* Determine the length of concatenating an arbitrary number of\n    strings.  You must pass NULL as the last argument of this function,\n    to terminate the list of strings.  */\n \n-extern unsigned long concat_length PARAMS ((const char *, ...));\n+extern unsigned long concat_length PARAMS ((const char *, ...)) ATTRIBUTE_SENTINEL;\n \n /* Concatenate an arbitrary number of strings into a SUPPLIED area of\n    memory.  You must pass NULL as the last argument of this function,\n    to terminate the list of strings.  The supplied memory is assumed\n    to be large enough.  */\n \n-extern char *concat_copy PARAMS ((char *, const char *, ...));\n+extern char *concat_copy PARAMS ((char *, const char *, ...)) ATTRIBUTE_SENTINEL;\n \n /* Concatenate an arbitrary number of strings into a GLOBAL area of\n    memory.  You must pass NULL as the last argument of this function,\n    to terminate the list of strings.  The supplied memory is assumed\n    to be large enough.  */\n \n-extern char *concat_copy2 PARAMS ((const char *, ...));\n+extern char *concat_copy2 PARAMS ((const char *, ...)) ATTRIBUTE_SENTINEL;\n \n /* This is the global area used by concat_copy2.  */\n "}]}