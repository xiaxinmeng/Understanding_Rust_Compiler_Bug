{"sha": "bff469f75fb4941ff4ff923a7b921e179c8f1390", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZmNDY5Zjc1ZmI0OTQxZmY0ZmY5MjNhN2I5MjFlMTc5YzhmMTM5MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-26T13:37:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-26T13:37:29Z"}, "message": "[multiple changes]\n\n2015-05-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sinfo.ads: Minor reformatting.\n\t* sem_aux.ads: Clarify use of First_Discriminant.\n\t* sem_ch4.adb (Analyze_Explicit_Dereference): The use of a limited\n\tview is replaced with the non-limited view in an instance body,\n\twhere the enclosing unit must have a regular with_clause on the\n\trelevant unit.\n\t* sem_ch12.adb (Install_Body): Freeze instantation after its\n\tbody. Remove useless freeze nodes for incomplete actuals to\n\tprevent multiple generation of internal operations.\n\t(Instantiate_Package_Body): Set sloc of body appropriately when\n\tthere are incomplete actuals and the instance body is placed in\n\tthe body of the enclosing unit.\n\t* errout.ads: Consistent punctuation, better alignment and trivial\n\ttypos in comments.\n\t* err_vars.ads: Fix typo.\n\n2015-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_ch8.adb (Analyze_Object_Renaming): Lift restriction on\n\tcomponents of Volatile_Full_Access objects.\n\n2015-05-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Is_Non_Overriding_Operation,\n\tGet_Generic_Parent_Type): Handle properly the case of a derived\n\tscalar type by using the first subtype rather than its generated\n\tanonymous base type.\n\n2015-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* einfo.adb (Write_Field17_Name): Move E_Incomplete_Subtype\n\tcase to...\n\t(Write_Field19_Name): ...here.\n\nFrom-SVN: r223696", "tree": {"sha": "a0ef882e5129e5a8a53a1340365a9896fa87e4c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0ef882e5129e5a8a53a1340365a9896fa87e4c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bff469f75fb4941ff4ff923a7b921e179c8f1390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bff469f75fb4941ff4ff923a7b921e179c8f1390", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bff469f75fb4941ff4ff923a7b921e179c8f1390", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bff469f75fb4941ff4ff923a7b921e179c8f1390/comments", "author": null, "committer": null, "parents": [{"sha": "70c3fcfc3fac404a19312b0494f5119ec7ca1173", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70c3fcfc3fac404a19312b0494f5119ec7ca1173", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70c3fcfc3fac404a19312b0494f5119ec7ca1173"}], "stats": {"total": 175, "additions": 98, "deletions": 77}, "files": [{"sha": "f30ae12eb283f95b4a8541b88157d6eb6edc8fe4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bff469f75fb4941ff4ff923a7b921e179c8f1390", "patch": "@@ -1,3 +1,39 @@\n+2015-05-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sinfo.ads: Minor reformatting.\n+\t* sem_aux.ads: Clarify use of First_Discriminant.\n+\t* sem_ch4.adb (Analyze_Explicit_Dereference): The use of a limited\n+\tview is replaced with the non-limited view in an instance body,\n+\twhere the enclosing unit must have a regular with_clause on the\n+\trelevant unit.\n+\t* sem_ch12.adb (Install_Body): Freeze instantation after its\n+\tbody. Remove useless freeze nodes for incomplete actuals to\n+\tprevent multiple generation of internal operations.\n+\t(Instantiate_Package_Body): Set sloc of body appropriately when\n+\tthere are incomplete actuals and the instance body is placed in\n+\tthe body of the enclosing unit.\n+\t* errout.ads: Consistent punctuation, better alignment and trivial\n+\ttypos in comments.\n+\t* err_vars.ads: Fix typo.\n+\n+2015-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Object_Renaming): Lift restriction on\n+\tcomponents of Volatile_Full_Access objects.\n+\n+2015-05-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Is_Non_Overriding_Operation,\n+\tGet_Generic_Parent_Type): Handle properly the case of a derived\n+\tscalar type by using the first subtype rather than its generated\n+\tanonymous base type.\n+\n+2015-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.adb (Write_Field17_Name): Move E_Incomplete_Subtype\n+\tcase to...\n+\t(Write_Field19_Name): ...here.\n+\n 2015-05-26  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch13.adb: sem_ch13.adb (Add_Predicates): Undo analysis"}, {"sha": "eb57b6996d8b98b0a7b970629755b5b3a83647a2", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=bff469f75fb4941ff4ff923a7b921e179c8f1390", "patch": "@@ -9484,11 +9484,6 @@ package body Einfo is\n          when Modular_Integer_Kind                         =>\n             Write_Str (\"Modulus\");\n \n-         when E_Incomplete_Subtype                         =>\n-            if From_Limited_With (Id) then\n-               Write_Str (\"Non_Limited_View\");\n-            end if;\n-\n          when E_Component                                  =>\n             Write_Str (\"Prival\");\n \n@@ -9584,6 +9579,11 @@ package body Einfo is\n               E_Incomplete_Type                            =>\n             Write_Str (\"Non_Limited_View\");\n \n+         when E_Incomplete_Subtype                         =>\n+            if From_Limited_With (Id) then\n+               Write_Str (\"Non_Limited_View\");\n+            end if;\n+\n          when E_Array_Type                                 =>\n             Write_Str (\"Default_Component_Value\");\n "}, {"sha": "c9beb0ccc30e697443950d057fc560d8c3435b9a", "filename": "gcc/ada/err_vars.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2Ferr_vars.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2Ferr_vars.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferr_vars.ads?ref=bff469f75fb4941ff4ff923a7b921e179c8f1390", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -57,7 +57,7 @@ package Err_Vars is\n    Error_Msg_Qual_Level : Int := 0;\n    --  Number of levels of qualification required for type name (see the\n    --  description of the } insertion character. Note that this value does\n-   --  note get reset by any Error_Msg call, so the caller is responsible\n+   --  not get reset by any Error_Msg call, so the caller is responsible\n    --  for resetting it.\n \n    Warn_On_Instance : Boolean := False;"}, {"sha": "8a3f9f25f7a2d3d3259a59ab5f35f6281ddba84e", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=bff469f75fb4941ff4ff923a7b921e179c8f1390", "patch": "@@ -24,7 +24,7 @@\n ------------------------------------------------------------------------------\n \n --  This package contains the routines to output error messages. They are\n---  basically system independent, however in some environments, e.g. when the\n+--  basically system independent, however, in some environments, e.g. when the\n --  parser is embedded into an editor, it may be appropriate to replace the\n --  implementation of this package.\n \n@@ -157,8 +157,8 @@ package Errout is\n    --      obtained from the Unit_Name_Type value in Error_Msg_Unit_1 and\n    --      Error_Msg_Unit_2, as provided by Get_Unit_Name_String in package\n    --      Uname. Note that this name includes the postfix (spec) or (body)\n-   --      strings. If this postfix is not required, use the normal %\n-   --      insertion for the unit name.\n+   --      strings. If this postfix is not required, use the normal % insertion\n+   --      for the unit name.\n \n    --    Insertion character { (Left brace: insert file name from names table)\n    --      The character { is treated similarly to %, except that the input\n@@ -168,7 +168,7 @@ package Errout is\n    --      insertion is the exact string stored in the names table without\n    --      adjusting the casing.\n \n-   --    Insertion character * (Asterisk, insert reserved word name)\n+   --    Insertion character * (Asterisk: insert reserved word name)\n    --      The insertion character * is treated exactly like % except that the\n    --      resulting name is cased according to the default conventions for\n    --      reserved words (see package Scans).\n@@ -221,7 +221,7 @@ package Errout is\n    --      where appropriate the location of its declaration. Special cases\n    --      like \"some integer type\" are handled appropriately. Only one } is\n    --      allowed in a message, since there is not enough room for two (the\n-   --      insertion can be quite long, including a file name) In addition, if\n+   --      insertion can be quite long, including a file name). In addition, if\n    --      the special global variable Error_Msg_Qual_Level is non-zero, then\n    --      the reference will include up to the given number of levels of\n    --      qualification, using the scope chain.\n@@ -240,7 +240,7 @@ package Errout is\n    --      A second ^ may occur in the message, in which case it is replaced\n    --      by the decimal conversion of the Uint value in Error_Msg_Uint_2.\n \n-   --    Insertion character > (Greater Than, run time name)\n+   --    Insertion character > (Greater Than: run time name)\n    --      The character > is replaced by a string of the form (name) if\n    --      Targparm scanned out a Run_Time_Name (see package Targparm for\n    --      details). The name is enclosed in parentheses and output in mixed\n@@ -372,7 +372,7 @@ package Errout is\n    --      messages are treated as a unit. The \\ character must be the first\n    --      character of the message text.\n \n-   --    Insertion character \\\\ (Two backslashes, continuation with new line)\n+   --    Insertion character \\\\ (Two backslashes: continuation with new line)\n    --      This differs from \\ only in -gnatjnn mode (Error_Message_Line_Length\n    --      set non-zero). This sequence forces a new line to start even when\n    --      continuations are being gathered into a single message.\n@@ -480,7 +480,7 @@ package Errout is\n    Error_Msg_Qual_Level : Int renames Err_Vars.Error_Msg_Qual_Level;\n    --  Number of levels of qualification required for type name (see the\n    --  description of the } insertion character). Note that this value does\n-   --  note get reset by any Error_Msg call, so the caller is responsible\n+   --  not get reset by any Error_Msg call, so the caller is responsible\n    --  for resetting it.\n \n    Error_Msg_Warn : Boolean renames Err_Vars.Error_Msg_Warn;"}, {"sha": "5268b011a3a62880c6ef85b4ea9f372208053f93", "filename": "gcc/ada/sem_aux.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2Fsem_aux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2Fsem_aux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.ads?ref=bff469f75fb4941ff4ff923a7b921e179c8f1390", "patch": "@@ -119,6 +119,9 @@ package Sem_Aux is\n    --  First_Entity. The exception arises for tagged types, where the tag\n    --  itself is prepended to the front of the entity chain, so the\n    --  First_Discriminant function steps past the tag if it is present.\n+   --  The caller is responsible for checking that the type has discriminants,\n+   --  so for example it is improper to call this function on a private\n+   --  type with unknown discriminants.\n \n    function First_Stored_Discriminant (Typ : Entity_Id) return Entity_Id;\n    --  Typ is a type with discriminants. Gives the first discriminant stored"}, {"sha": "ecc3a8e0b0c20f73399bd29dcff908dc80a8eee2", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 24, "deletions": 37, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=bff469f75fb4941ff4ff923a7b921e179c8f1390", "patch": "@@ -8876,8 +8876,8 @@ package body Sem_Ch12 is\n       --  in the instance body requires the presence of a regular with_clause\n       --  in the enclosing unit, and will fail if this with_clause is missing.\n       --  We place the instance body at the beginning of the enclosing body,\n-      --  which is the unit being compiled, and ensure that freeze nodes for\n-      --  the full views of the incomplete types appear before the instance.\n+      --  which is the unit being compiled. The freeze node for the instance\n+      --  is then placed after the instance body.\n \n       if not Is_Empty_Elmt_List (Incomplete_Actuals (Act_Id))\n         and then Expander_Active\n@@ -8892,43 +8892,15 @@ package body Sem_Ch12 is\n             Ensure_Freeze_Node (Act_Id);\n             F_Node := Freeze_Node (Act_Id);\n             if Present (Body_Id) then\n-               Set_Is_Frozen (Act_Id);\n+               Set_Is_Frozen (Act_Id, False);\n                Prepend (Act_Body, Declarations (Parent (Body_Id)));\n-            end if;\n-\n-            --  Add freeze nodes of formerly incomplete types ahead of\n-            --  the instance body.\n-\n-            declare\n-               Elmt : Elmt_Id;\n-               F_T  : Node_Id;\n-               Typ  : Entity_Id;\n-\n-            begin\n-               Elmt := First_Elmt (Incomplete_Actuals (Act_Id));\n-               while Present (Elmt) loop\n-                  Typ := Node (Elmt);\n-\n-                  if From_Limited_With (Typ) then\n-                     Typ := Non_Limited_View (Typ);\n-                  end if;\n-\n-                  Ensure_Freeze_Node (Typ);\n-                  F_T := Freeze_Node (Typ);\n-\n-                  --  If freeze node is already in the tree, remove it\n-                  --  and place ahead of instance body.\n-\n-                  if Is_List_Member (F_T) then\n-                     Remove (F_T);\n-                  end if;\n+               if Is_List_Member (F_Node) then\n+                  Remove (F_Node);\n+               end if;\n \n-                  Prepend (F_T, Declarations (Parent (Body_Id)));\n-                  Next_Elmt (Elmt);\n-               end loop;\n-            end;\n+               Insert_After (Act_Body, F_Node);\n+            end if;\n          end;\n-\n          return;\n       end if;\n \n@@ -10794,8 +10766,23 @@ package body Sem_Ch12 is\n       end if;\n \n       --  Establish global variable for sloc adjustment and for error recovery\n+      --  In the case of an instance body for an instantiation with actuals\n+      --  from a limited view, the instance body is placed at the beginning\n+      --  of the enclosing package body: use the body entity as the source\n+      --  location for nodes of the instance body.\n \n-      Instantiation_Node := Inst_Node;\n+      if not Is_Empty_Elmt_List (Incomplete_Actuals (Act_Decl_Id)) then\n+         declare\n+            Scop    : constant Entity_Id := Scope (Act_Decl_Id);\n+            Body_Id : constant Node_Id :=\n+                         Corresponding_Body (Unit_Declaration_Node (Scop));\n+\n+         begin\n+            Instantiation_Node := Body_Id;\n+         end;\n+      else\n+         Instantiation_Node := Inst_Node;\n+      end if;\n \n       if Present (Gen_Body_Id) then\n          Save_Env (Gen_Unit, Act_Decl_Id);"}, {"sha": "1c0dbd9b723f589174866c15c09239369494d701", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=bff469f75fb4941ff4ff923a7b921e179c8f1390", "patch": "@@ -1969,15 +1969,18 @@ package body Sem_Ch4 is\n \n                --  An explicit dereference is a legal occurrence of an\n                --  incomplete type imported through a limited_with clause,\n-               --  if the full view is visible.\n+               --  if the full view is visible, or if we are within an\n+               --  instance body, where the enclosing body has a regular\n+               --  with_clause on the unit.\n \n                if From_Limited_With (DT)\n                  and then not From_Limited_With (Scope (DT))\n                  and then\n                    (Is_Immediately_Visible (Scope (DT))\n                      or else\n                        (Is_Child_Unit (Scope (DT))\n-                         and then Is_Visible_Lib_Unit (Scope (DT))))\n+                         and then Is_Visible_Lib_Unit (Scope (DT)))\n+                     or else In_Instance_Body)\n                then\n                   Set_Etype (N, Available_View (DT));\n "}, {"sha": "fdfe9f6a5047c5bd59057eb7ab4665346cc4bd82", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=bff469f75fb4941ff4ff923a7b921e179c8f1390", "patch": "@@ -8288,7 +8288,19 @@ package body Sem_Ch6 is\n             --  is needed for cases where a full derived type has been\n             --  rewritten.)\n \n-            Defn := Type_Definition (Original_Node (Parent (F_Typ)));\n+            --  If the parent type is a scalar type, the derivation creates\n+            --  an anonymous base type for it, and the source type is its\n+            --  first subtype.\n+\n+            if Is_Scalar_Type (F_Typ)\n+              and then not Comes_From_Source (F_Typ)\n+            then\n+               Defn :=\n+                 Type_Definition\n+                    (Original_Node (Parent (First_Subtype (F_Typ))));\n+            else\n+               Defn := Type_Definition (Original_Node (Parent (F_Typ)));\n+            end if;\n             if Nkind (Defn) = N_Derived_Type_Definition then\n                Indic := Subtype_Indication (Defn);\n "}, {"sha": "ee76eda0fced58a065fa4eed31f3df44f5382123", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=bff469f75fb4941ff4ff923a7b921e179c8f1390", "patch": "@@ -927,25 +927,6 @@ package body Sem_Ch8 is\n               (\"renaming of conversion only allowed for tagged types\", Nam);\n          end if;\n \n-         --  Reject renaming of component of Volatile_Full_Access object\n-\n-         if Nkind_In (Nam, N_Selected_Component, N_Indexed_Component) then\n-            declare\n-               P : constant Node_Id := Prefix (Nam);\n-            begin\n-               if Is_Entity_Name (P) then\n-                  if Is_Volatile_Full_Access (Entity (P))\n-                       or else\n-                     Is_Volatile_Full_Access (Etype (P))\n-                  then\n-                     Error_Msg_N\n-                       (\"cannot rename component of Volatile_Full_Access \"\n-                        & \"object\", Nam);\n-                  end if;\n-               end if;\n-            end;\n-         end if;\n-\n          Resolve (Nam, T);\n \n          --  If the renamed object is a function call of a limited type,"}, {"sha": "203313d11e6dfa1ea402359e681b745876eb77df", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff469f75fb4941ff4ff923a7b921e179c8f1390/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=bff469f75fb4941ff4ff923a7b921e179c8f1390", "patch": "@@ -786,9 +786,8 @@ package Sinfo is\n \n    --  Acts_As_Spec (Flag4-Sem)\n    --    A flag set in the N_Subprogram_Body node for a subprogram body which\n-   --    is acting as its own spec, except in the case of a library level\n-   --    subprogram, in which case the flag is set on the parent compilation\n-   --    unit node instead.\n+   --    is acting as its own spec. In the case of a library-level subprogram\n+   --    the flag is set as well on the parent compilation unit node.\n \n    --  Actual_Designated_Subtype (Node4-Sem)\n    --    Present in N_Free_Statement and N_Explicit_Dereference nodes. If gigi"}]}