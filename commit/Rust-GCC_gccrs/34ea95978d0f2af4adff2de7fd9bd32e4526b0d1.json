{"sha": "34ea95978d0f2af4adff2de7fd9bd32e4526b0d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRlYTk1OTc4ZDBmMmFmNGFkZmYyZGU3ZmQ5YmQzMmU0NTI2YjBkMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-11-27T21:34:44Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-11-27T21:34:44Z"}, "message": "compiler: finalize types parsed for inline functions\n    \n    When we inline functions, we may parse types that we have not seen\n    before inlining.  Inlining runs after the finalize_methods pass, so\n    those types will not be finalized, meaning that we don't have an\n    accurate list of which methods they support.  Explicitly finalize them\n    when we parse them.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/150068\n\nFrom-SVN: r266530", "tree": {"sha": "f5a5d3c4a9b0d8aa52611022a119796176545b72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5a5d3c4a9b0d8aa52611022a119796176545b72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34ea95978d0f2af4adff2de7fd9bd32e4526b0d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ea95978d0f2af4adff2de7fd9bd32e4526b0d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34ea95978d0f2af4adff2de7fd9bd32e4526b0d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ea95978d0f2af4adff2de7fd9bd32e4526b0d1/comments", "author": null, "committer": null, "parents": [{"sha": "80d7d30d2483025baff22fde3b36ea227639a4e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d7d30d2483025baff22fde3b36ea227639a4e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80d7d30d2483025baff22fde3b36ea227639a4e7"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "9947fcf68a1826e018afd67d0bce51fd0bbbc555", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ea95978d0f2af4adff2de7fd9bd32e4526b0d1/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ea95978d0f2af4adff2de7fd9bd32e4526b0d1/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=34ea95978d0f2af4adff2de7fd9bd32e4526b0d1", "patch": "@@ -1,4 +1,4 @@\n-ce81aad0e3d53215e2c0f1f060c7fd6219e6fb23\n+c11d9528a0846293e4d615c86fc773c97252fdce\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "a5a0e5620d31da10c3be45a347e282b5d834103c", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ea95978d0f2af4adff2de7fd9bd32e4526b0d1/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ea95978d0f2af4adff2de7fd9bd32e4526b0d1/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=34ea95978d0f2af4adff2de7fd9bd32e4526b0d1", "patch": "@@ -3243,6 +3243,17 @@ Gogo::finalize_methods()\n   this->traverse(&finalize);\n }\n \n+// Finalize the method list for a type.  This is called when a type is\n+// parsed for an inlined function body, which happens after the\n+// finalize_methods pass.\n+\n+void\n+Gogo::finalize_methods_for_type(Type* type)\n+{\n+  Finalize_methods finalize(this);\n+  Type::traverse(type, &finalize);\n+}\n+\n // Set types for unspecified variables and constants.\n \n void"}, {"sha": "854d37a6333391e70e203a49a8c45111e870ce78", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ea95978d0f2af4adff2de7fd9bd32e4526b0d1/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ea95978d0f2af4adff2de7fd9bd32e4526b0d1/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=34ea95978d0f2af4adff2de7fd9bd32e4526b0d1", "patch": "@@ -637,6 +637,10 @@ class Gogo\n   void\n   finalize_methods();\n \n+  // Finalize the method list for one type.\n+  void\n+  finalize_methods_for_type(Type*);\n+\n   // Work out the types to use for unspecified variables and\n   // constants.\n   void"}, {"sha": "eefee7cb1e62402586adc0feeae14dcced715e07", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ea95978d0f2af4adff2de7fd9bd32e4526b0d1/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ea95978d0f2af4adff2de7fd9bd32e4526b0d1/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=34ea95978d0f2af4adff2de7fd9bd32e4526b0d1", "patch": "@@ -886,7 +886,9 @@ Import::read_type()\n   if (c == '>')\n     {\n       // A reference to a type defined earlier.\n-      return this->type_for_index(index, \"import data\", stream->pos());\n+      bool parsed;\n+      return this->type_for_index(index, \"import data\", stream->pos(),\n+\t\t\t\t  &parsed);\n     }\n \n   if (this->version_ >= EXPORT_FORMAT_V3)\n@@ -1092,12 +1094,13 @@ Import::read_named_type(int index)\n   return type;\n }\n \n-// Return the type given an index.\n+// Return the type given an index.  Set *PARSED if we parsed it here.\n \n Type*\n Import::type_for_index(int index, const std::string& input_name,\n-\t\t       size_t input_offset)\n+\t\t       size_t input_offset, bool* parsed)\n {\n+  *parsed = false;\n   if (index >= 0 && !this->type_data_.empty())\n     {\n       if (static_cast<size_t>(index) >= this->type_offsets_.size())\n@@ -1114,6 +1117,7 @@ Import::type_for_index(int index, const std::string& input_name,\n \t{\n \t  if (!this->parse_type(index))\n \t    return Type::make_error_type();\n+\t  *parsed = true;\n \t}\n     }\n \n@@ -1497,6 +1501,15 @@ Import_function_body::read_type()\n       return Type::make_error_type();\n     }\n \n-  return this->imp_->type_for_index(static_cast<int>(val), this->name(),\n-\t\t\t\t    static_cast<unsigned long>(start));\n+  bool parsed;\n+  Type* type = this->imp_->type_for_index(static_cast<int>(val), this->name(),\n+\t\t\t\t\t  static_cast<unsigned long>(start),\n+\t\t\t\t\t  &parsed);\n+\n+  // If we just read this type's information, its methods will not\n+  // have been finalized.  Do that now.\n+  if (parsed)\n+    this->gogo_->finalize_methods_for_type(type);\n+\n+  return type;\n }"}, {"sha": "e2f4e50378ca79c2f2aeb98e537068d76d840d45", "filename": "gcc/go/gofrontend/import.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ea95978d0f2af4adff2de7fd9bd32e4526b0d1/gcc%2Fgo%2Fgofrontend%2Fimport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ea95978d0f2af4adff2de7fd9bd32e4526b0d1/gcc%2Fgo%2Fgofrontend%2Fimport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.h?ref=34ea95978d0f2af4adff2de7fd9bd32e4526b0d1", "patch": "@@ -284,10 +284,11 @@ class Import : public Import_expression\n   read_type();\n \n   // Return the type for a type index.  INPUT_NAME and INPUT_OFFSET\n-  // are only for error reporting.\n+  // are only for error reporting.  PARSED is set to whether we parsed\n+  // the type information for a new type.\n   Type*\n   type_for_index(int index, const std::string& input_name,\n-\t\t size_t input_offset);\n+\t\t size_t input_offset, bool* parsed);\n \n   // Read an escape note.\n   std::string"}]}