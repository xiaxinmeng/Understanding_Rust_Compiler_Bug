{"sha": "32f1271c4ff1694371eb7ec587326265326f2063", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJmMTI3MWM0ZmYxNjk0MzcxZWI3ZWM1ODczMjYyNjUzMjZmMjA2Mw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2008-01-07T11:11:02Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-01-07T11:11:02Z"}, "message": "re PR libstdc++/34680 (Unconditional use of dynamic_cast in locale_facets.tcc breaks compilation with -fno-rtti)\n\n2008-01-07  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/34680\n\t* include/bits/locale_classes.h (has_facet<>, use_facet<>): Do not\n\tuse dynamic_cast when run-time type identification is disabled; do\n\tnot mark inline; only declare, define...\n\t* include/bits/locale_classes.tcc: ... here.\n\nFrom-SVN: r131372", "tree": {"sha": "d51d5b5b9ac9dc0f8256620be54ecd2a3bc7e695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d51d5b5b9ac9dc0f8256620be54ecd2a3bc7e695"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32f1271c4ff1694371eb7ec587326265326f2063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32f1271c4ff1694371eb7ec587326265326f2063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32f1271c4ff1694371eb7ec587326265326f2063", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32f1271c4ff1694371eb7ec587326265326f2063/comments", "author": null, "committer": null, "parents": [{"sha": "bd5db9de0dac29118308421acb4f1db79bea6609", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd5db9de0dac29118308421acb4f1db79bea6609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd5db9de0dac29118308421acb4f1db79bea6609"}], "stats": {"total": 74, "additions": 51, "deletions": 23}, "files": [{"sha": "e99e05003607d56d1d58e1f7de892df8c5b8d646", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f1271c4ff1694371eb7ec587326265326f2063/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f1271c4ff1694371eb7ec587326265326f2063/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=32f1271c4ff1694371eb7ec587326265326f2063", "patch": "@@ -1,3 +1,11 @@\n+2008-01-07  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/34680\n+\t* include/bits/locale_classes.h (has_facet<>, use_facet<>): Do not\n+\tuse dynamic_cast when run-time type identification is disabled; do\n+\tnot mark inline; only declare, define...\n+\t* include/bits/locale_classes.tcc: ... here.\n+\n 2008-01-06  Ted Phelps  <phelps@gnusto.com>\n \n \tPR c++/34152"}, {"sha": "691694aad22650494e7f875195e5a0d4afd1283c", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f1271c4ff1694371eb7ec587326265326f2063/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f1271c4ff1694371eb7ec587326265326f2063/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=32f1271c4ff1694371eb7ec587326265326f2063", "patch": "@@ -1,7 +1,7 @@\n // Locale support -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007\n+// 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -574,14 +574,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @return  true if locale contains a facet of type Facet, else false.\n   */\n   template<typename _Facet>\n-    inline bool\n-    has_facet(const locale& __loc) throw()\n-    {\n-      const size_t __i = _Facet::id._M_id();\n-      const locale::facet** __facets = __loc._M_impl->_M_facets;\n-      return __i < __loc._M_impl->_M_facets_size\n-\t      && dynamic_cast<const _Facet*>(__facets[__i]) != NULL;\n-    }\n+    bool\n+    has_facet(const locale& __loc) throw();\n \n   /**\n    *  @brief  Return a facet.\n@@ -597,15 +591,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @throw  std::bad_cast if locale doesn't contain a facet of type Facet.\n   */\n   template<typename _Facet>\n-    inline const _Facet&\n-    use_facet(const locale& __loc)\n-    {\n-      const size_t __i = _Facet::id._M_id();\n-      const locale::facet** __facets = __loc._M_impl->_M_facets;\n-      if (__i >= __loc._M_impl->_M_facets_size || __facets[__i] == NULL)\n-        __throw_bad_cast();\n-      return dynamic_cast<const _Facet&>(*__facets[__i]);\n-    }\n+    const _Facet&\n+    use_facet(const locale& __loc);\n \n \n   /**"}, {"sha": "551fc90d3b6d910ca96df6a328ffadce48bc4efd", "filename": "libstdc++-v3/include/bits/locale_classes.tcc", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f1271c4ff1694371eb7ec587326265326f2063/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f1271c4ff1694371eb7ec587326265326f2063/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc?ref=32f1271c4ff1694371eb7ec587326265326f2063", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,7 +44,8 @@\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<typename _Facet>\n-    locale::locale(const locale& __other, _Facet* __f)\n+    locale::\n+    locale(const locale& __other, _Facet* __f)\n     {\n       _M_impl = new _Impl(*__other._M_impl, 1);\n \n@@ -61,7 +62,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<typename _Facet>\n     locale\n-    locale::combine(const locale& __other) const\n+    locale::\n+    combine(const locale& __other) const\n     {\n       _Impl* __tmp = new _Impl(*_M_impl, 1);\n       try\n@@ -78,8 +80,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     bool\n-    locale::operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,\n-                       const basic_string<_CharT, _Traits, _Alloc>& __s2) const\n+    locale::\n+    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,\n+\t       const basic_string<_CharT, _Traits, _Alloc>& __s2) const\n     {\n       typedef std::collate<_CharT> __collate_type;\n       const __collate_type& __collate = use_facet<__collate_type>(*this);\n@@ -88,6 +91,36 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n \n+  template<typename _Facet>\n+    bool\n+    has_facet(const locale& __loc) throw()\n+    {\n+      const size_t __i = _Facet::id._M_id();\n+      const locale::facet** __facets = __loc._M_impl->_M_facets;\n+      return (__i < __loc._M_impl->_M_facets_size\n+#ifdef __GXX_RTTI\n+\t      && dynamic_cast<const _Facet*>(__facets[__i]));\n+#else\n+              && static_cast<const _Facet*>(__facets[__i]));\n+#endif\n+    }\n+\n+  template<typename _Facet>\n+    const _Facet&\n+    use_facet(const locale& __loc)\n+    {\n+      const size_t __i = _Facet::id._M_id();\n+      const locale::facet** __facets = __loc._M_impl->_M_facets;\n+      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])\n+        __throw_bad_cast();\n+#ifdef __GXX_RTTI\n+      return dynamic_cast<const _Facet&>(*__facets[__i]);\n+#else\n+      return static_cast<const _Facet&>(*__facets[__i]);\n+#endif\n+    }\n+\n+\n   // Generic version does nothing.\n   template<typename _CharT>\n     int"}]}