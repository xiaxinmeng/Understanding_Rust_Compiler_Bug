{"sha": "96474f366fef95a6645cb06e5b2d30a6fce77783", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY0NzRmMzY2ZmVmOTVhNjY0NWNiMDZlNWIyZDMwYTZmY2U3Nzc4Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-05-06T16:51:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-05-06T16:51:25Z"}, "message": "dwarf2out.c (new_reg_loc_descr): Don't ever create DW_OP_regX.\n\n\t* dwarf2out.c (new_reg_loc_descr): Don't ever create DW_OP_regX.\n\t(one_reg_loc_descriptor): Create DW_OP_regX here instead of calling\n\tnew_reg_loc_descr.\n\t(loc_by_reference): If loc is DW_OP_regX, change it into DW_OP_bregX 0\n\tinstead of appending DW_OP_deref*.\n\nFrom-SVN: r147187", "tree": {"sha": "408fac4324b4949788943278e2152507d0838fa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/408fac4324b4949788943278e2152507d0838fa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96474f366fef95a6645cb06e5b2d30a6fce77783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96474f366fef95a6645cb06e5b2d30a6fce77783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96474f366fef95a6645cb06e5b2d30a6fce77783", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96474f366fef95a6645cb06e5b2d30a6fce77783/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "529ff44101de7c912c138994b03c7ec199ff5e93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/529ff44101de7c912c138994b03c7ec199ff5e93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/529ff44101de7c912c138994b03c7ec199ff5e93"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "7b3d41e9d1b6ee2339f59b35904981424492d5c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96474f366fef95a6645cb06e5b2d30a6fce77783/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96474f366fef95a6645cb06e5b2d30a6fce77783/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96474f366fef95a6645cb06e5b2d30a6fce77783", "patch": "@@ -1,3 +1,11 @@\n+2009-05-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dwarf2out.c (new_reg_loc_descr): Don't ever create DW_OP_regX.\n+\t(one_reg_loc_descriptor): Create DW_OP_regX here instead of calling\n+\tnew_reg_loc_descr.\n+\t(loc_by_reference): If loc is DW_OP_regX, change it into DW_OP_bregX 0\n+\tinstead of appending DW_OP_deref*.\n+\n 2009-05-06  Michael Matz  <matz@suse.de>\n \n \tPR middle-end/40021"}, {"sha": "0d308c9f0471ae0958f63d5422a269a7010fd2ba", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96474f366fef95a6645cb06e5b2d30a6fce77783/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96474f366fef95a6645cb06e5b2d30a6fce77783/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=96474f366fef95a6645cb06e5b2d30a6fce77783", "patch": "@@ -3851,18 +3851,11 @@ new_loc_descr (enum dwarf_location_atom op, unsigned HOST_WIDE_INT oprnd1,\n static inline dw_loc_descr_ref\n new_reg_loc_descr (unsigned int reg,  unsigned HOST_WIDE_INT offset)\n {\n-  if (offset)\n-    {\n-      if (reg <= 31)\n-\treturn new_loc_descr ((enum dwarf_location_atom) (DW_OP_breg0 + reg),\n-\t\t\t      offset, 0);\n-      else\n-\treturn new_loc_descr (DW_OP_bregx, reg, offset);\n-    }\n-  else if (reg <= 31)\n-    return new_loc_descr ((enum dwarf_location_atom) (DW_OP_reg0 + reg), 0, 0);\n+  if (reg <= 31)\n+    return new_loc_descr ((enum dwarf_location_atom) (DW_OP_breg0 + reg),\n+\t\t\t  offset, 0);\n   else\n-   return new_loc_descr (DW_OP_regx, reg, 0);\n+    return new_loc_descr (DW_OP_bregx, reg, offset);\n }\n \n /* Add a location description term to a location description expression.  */\n@@ -9702,7 +9695,13 @@ reg_loc_descriptor (rtx rtl, enum var_init_status initialized)\n static dw_loc_descr_ref\n one_reg_loc_descriptor (unsigned int regno, enum var_init_status initialized)\n {\n-  dw_loc_descr_ref reg_loc_descr = new_reg_loc_descr (regno, 0);\n+  dw_loc_descr_ref reg_loc_descr;\n+\n+  if (regno <= 31)\n+    reg_loc_descr\n+      = new_loc_descr ((enum dwarf_location_atom) (DW_OP_reg0 + regno), 0, 0);\n+  else\n+    reg_loc_descr = new_loc_descr (DW_OP_regx, regno, 0);\n \n   if (initialized == VAR_INIT_STATUS_UNINITIALIZED)\n     add_loc_descr (&reg_loc_descr, new_loc_descr (DW_OP_GNU_uninit, 0, 0));\n@@ -11719,6 +11718,31 @@ loc_by_reference (dw_loc_descr_ref loc, tree decl)\n       || !DECL_BY_REFERENCE (decl))\n     return loc;\n \n+  /* If loc is DW_OP_reg{0...31,x}, don't add DW_OP_deref, instead\n+     change it into corresponding DW_OP_breg{0...31,x} 0.  Then the\n+     location expression is considered to be address of a memory location,\n+     rather than the register itself.  */\n+  if (((loc->dw_loc_opc >= DW_OP_reg0 && loc->dw_loc_opc <= DW_OP_reg31)\n+       || loc->dw_loc_opc == DW_OP_regx)\n+      && (loc->dw_loc_next == NULL\n+\t  || (loc->dw_loc_next->dw_loc_opc == DW_OP_GNU_uninit\n+\t      && loc->dw_loc_next->dw_loc_next == NULL)))\n+    {\n+      if (loc->dw_loc_opc == DW_OP_regx)\n+\t{\n+\t  loc->dw_loc_opc = DW_OP_bregx;\n+\t  loc->dw_loc_oprnd2.v.val_int = 0;\n+\t}\n+      else\n+\t{\n+\t  loc->dw_loc_opc\n+\t    = (enum dwarf_location_atom)\n+\t      (loc->dw_loc_opc + (DW_OP_breg0 - DW_OP_reg0));\n+\t  loc->dw_loc_oprnd1.v.val_int = 0;\n+\t}\n+      return loc;\n+    }\n+\n   size = int_size_in_bytes (TREE_TYPE (decl));\n   if (size > DWARF2_ADDR_SIZE || size == -1)\n     return 0;"}]}