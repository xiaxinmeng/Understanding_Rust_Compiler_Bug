{"sha": "fc879b8f3fe2442e8a7c73b84c3c5d96f8d5ef96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM4NzliOGYzZmUyNDQyZThhN2M3M2I4NGMzYzVkOTZmOGQ1ZWY5Ng==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2007-04-06T09:28:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-04-06T09:28:45Z"}, "message": "utils2.c (known_alignment): Handle COMPOUND_EXPR, COND_EXPR and BIT_AND_EXPR.\n\n2007-04-06  Olivier Hainque  <hainque@adacore.com>\n\n\t* utils2.c (known_alignment): Handle COMPOUND_EXPR, COND_EXPR and\n\tBIT_AND_EXPR. Handle also VIEW_CONVERT_EXPR, as the other conversion\n\topcodes.\n\nFrom-SVN: r123604", "tree": {"sha": "b247b4e9952466119bdb9d6901c272c302fdb65c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b247b4e9952466119bdb9d6901c272c302fdb65c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc879b8f3fe2442e8a7c73b84c3c5d96f8d5ef96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc879b8f3fe2442e8a7c73b84c3c5d96f8d5ef96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc879b8f3fe2442e8a7c73b84c3c5d96f8d5ef96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc879b8f3fe2442e8a7c73b84c3c5d96f8d5ef96/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e45500e5a5ea6308945ba9458ecccdf28d24269", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e45500e5a5ea6308945ba9458ecccdf28d24269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e45500e5a5ea6308945ba9458ecccdf28d24269"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "4a4bd7d896c7a66189c32b2f3ea2763216df6a6b", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc879b8f3fe2442e8a7c73b84c3c5d96f8d5ef96/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc879b8f3fe2442e8a7c73b84c3c5d96f8d5ef96/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=fc879b8f3fe2442e8a7c73b84c3c5d96f8d5ef96", "patch": "@@ -158,13 +158,19 @@ known_alignment (tree exp)\n   switch (TREE_CODE (exp))\n     {\n     case CONVERT_EXPR:\n+    case VIEW_CONVERT_EXPR:\n     case NOP_EXPR:\n     case NON_LVALUE_EXPR:\n       /* Conversions between pointers and integers don't change the alignment\n \t of the underlying object.  */\n       this_alignment = known_alignment (TREE_OPERAND (exp, 0));\n       break;\n \n+    case COMPOUND_EXPR:\n+      /* The value of a COMPOUND_EXPR is that of it's second operand.  */\n+      this_alignment = known_alignment (TREE_OPERAND (exp, 1));\n+      break;\n+\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n       /* If two address are added, the alignment of the result is the\n@@ -174,6 +180,13 @@ known_alignment (tree exp)\n       this_alignment = MIN (lhs, rhs);\n       break;\n \n+    case COND_EXPR:\n+      /* If there is a choice between two values, use the smallest one.  */\n+      lhs = known_alignment (TREE_OPERAND (exp, 1));\n+      rhs = known_alignment (TREE_OPERAND (exp, 2));\n+      this_alignment = MIN (lhs, rhs);\n+      break;\n+\n     case INTEGER_CST:\n       /* The first part of this represents the lowest bit in the constant,\n \t but is it in bytes, not bits.  */\n@@ -195,6 +208,14 @@ known_alignment (tree exp)\n \tthis_alignment = MIN (BIGGEST_ALIGNMENT, lhs * rhs);\n       break;\n \n+    case BIT_AND_EXPR:\n+      /* A bit-and expression is as aligned as the maximum alignment of the\n+\t operands.  We typically get here for a complex lhs and a constant\n+\t negative power of two on the rhs to force an explicit alignment, so\n+\t don't bother looking at the lhs.  */\n+      this_alignment = known_alignment (TREE_OPERAND (exp, 1));\n+      break;\n+\n     case ADDR_EXPR:\n       this_alignment = expr_align (TREE_OPERAND (exp, 0));\n       break;"}]}