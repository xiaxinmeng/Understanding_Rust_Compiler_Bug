{"sha": "2e4cf9dce7d03df56ff3bfc923638cab9962b469", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU0Y2Y5ZGNlN2QwM2RmNTZmZjNiZmM5MjM2MzhjYWI5OTYyYjQ2OQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-12-19T11:52:59Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-12-19T11:52:59Z"}, "message": "re PR c++/90 (funny syntactical error message)\n\ncp:\n\tPR c++/90\n\t* typeck.c (build_function_call_real): Use original function\n\texpression for errors.\ntestsuite:\n\t* g++.dg/other/error1.C: New test.\n\nFrom-SVN: r48176", "tree": {"sha": "3b9a73f1002332536c2cbe5d68ebb323ccc305a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b9a73f1002332536c2cbe5d68ebb323ccc305a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e4cf9dce7d03df56ff3bfc923638cab9962b469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e4cf9dce7d03df56ff3bfc923638cab9962b469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e4cf9dce7d03df56ff3bfc923638cab9962b469", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e4cf9dce7d03df56ff3bfc923638cab9962b469/comments", "author": null, "committer": null, "parents": [{"sha": "b2c16b03be8c341e73afff5e9ae13fdca57386e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c16b03be8c341e73afff5e9ae13fdca57386e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2c16b03be8c341e73afff5e9ae13fdca57386e9"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "888c960f00356ed9f3e58c8d469d94e1e740dbe6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4cf9dce7d03df56ff3bfc923638cab9962b469/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4cf9dce7d03df56ff3bfc923638cab9962b469/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2e4cf9dce7d03df56ff3bfc923638cab9962b469", "patch": "@@ -1,3 +1,9 @@\n+2001-12-19  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/90\n+\t* typeck.c (build_function_call_real): Use original function\n+\texpression for errors.\n+\n 2001-12-18  Jason Merrill  <jason@redhat.com>\n \n \t* class.c (add_method): Do compare 'this' quals when trying to match a"}, {"sha": "05c0711ec14eb7984c3c6761f8e967e9afe06298", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4cf9dce7d03df56ff3bfc923638cab9962b469/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4cf9dce7d03df56ff3bfc923638cab9962b469/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=2e4cf9dce7d03df56ff3bfc923638cab9962b469", "patch": "@@ -2964,6 +2964,7 @@ build_function_call_real (function, params, require_complete, flags)\n   tree result;\n   tree name = NULL_TREE, assembler_name = NULL_TREE;\n   int is_method;\n+  tree original = function;\n \n   /* build_c_cast puts on a NOP_EXPR to make the result not an lvalue.\n      Strip such NOP_EXPRs, since FUNCTION is used in non-lvalue context.  */\n@@ -2990,7 +2991,7 @@ build_function_call_real (function, params, require_complete, flags)\n       /* Differs from default_conversion by not setting TREE_ADDRESSABLE\n \t (because calling an inline function does not mean the function\n \t needs to be separately compiled).  */\n-\n+      \n       if (DECL_INLINE (function))\n \tfunction = inline_conversion (function);\n       else\n@@ -3011,7 +3012,7 @@ build_function_call_real (function, params, require_complete, flags)\n   if (TYPE_PTRMEMFUNC_P (fntype))\n     {\n       error (\"must use .* or ->* to call pointer-to-member function in `%E (...)'\",\n-\t\tfunction);\n+\t\toriginal);\n       return error_mark_node;\n     }\n \n@@ -3023,7 +3024,7 @@ build_function_call_real (function, params, require_complete, flags)\n \t|| is_method\n \t|| TREE_CODE (function) == TEMPLATE_ID_EXPR))\n     {\n-      error (\"`%E' cannot be used as a function\", function);\n+      error (\"`%E' cannot be used as a function\", original);\n       return error_mark_node;\n     }\n "}, {"sha": "b198da8b3d5a69c0c7566aaa5cd37e4bd3d01e80", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4cf9dce7d03df56ff3bfc923638cab9962b469/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4cf9dce7d03df56ff3bfc923638cab9962b469/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e4cf9dce7d03df56ff3bfc923638cab9962b469", "patch": "@@ -1,3 +1,7 @@\n+2001-12-19  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/other/error1.C: New test.\n+\n Mon Dec 17 14:31:42 2001  Jeffrey A Law  (law@redhat.com)\n \n \t* gcc.c-torture/execute/20011217-1.c: New test."}, {"sha": "2fabd7ccf370c5501039fb6b6729e635894de794", "filename": "gcc/testsuite/g++.dg/other/error1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4cf9dce7d03df56ff3bfc923638cab9962b469/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4cf9dce7d03df56ff3bfc923638cab9962b469/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror1.C?ref=2e4cf9dce7d03df56ff3bfc923638cab9962b469", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 18 Dec 2001 <nathan@nathan@codesourcery.com>\n+\n+// PR 90, stupid error message `(this + 160)'\n+\n+class foo {\n+  public:\n+  int fudge[40];\n+  int bar [40];\n+  inline int access(int i) {\n+    return bar(i);  // { dg-error \"`this->foo::bar' cannot\" \"\" }\n+  }\n+};"}]}