{"sha": "0c2a4754bc69f5642d1db07ecde1fa610404b745", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMyYTQ3NTRiYzY5ZjU2NDJkMWRiMDdlY2RlMWZhNjEwNDA0Yjc0NQ==", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@novell.com", "date": "2004-07-10T00:27:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-10T00:27:59Z"}, "message": "mm3dnow.h: New.\n\n        * config/i386/mm3dnow.h: New.\n        * config.gcc: Add mm3dnow.h to extra_headers for i?86 and x86-64.\n\nFrom-SVN: r84428", "tree": {"sha": "b46a649fa5b79de897e4bd9ca9db7c17358713a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b46a649fa5b79de897e4bd9ca9db7c17358713a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c2a4754bc69f5642d1db07ecde1fa610404b745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c2a4754bc69f5642d1db07ecde1fa610404b745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c2a4754bc69f5642d1db07ecde1fa610404b745", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c2a4754bc69f5642d1db07ecde1fa610404b745/comments", "author": null, "committer": null, "parents": [{"sha": "04b80a8885ee940c0f07e5a9c61324bfbfb9b348", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b80a8885ee940c0f07e5a9c61324bfbfb9b348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04b80a8885ee940c0f07e5a9c61324bfbfb9b348"}], "stats": {"total": 279, "additions": 276, "deletions": 3}, "files": [{"sha": "9b2c4c9d1eba6751d44856e1b924d6179b94a7b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c2a4754bc69f5642d1db07ecde1fa610404b745/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c2a4754bc69f5642d1db07ecde1fa610404b745/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c2a4754bc69f5642d1db07ecde1fa610404b745", "patch": "@@ -1,9 +1,14 @@\n+2004-07-09  Jan Beulich  <jbeulich@novell.com>\n+\n+\t* config/i386/mm3dnow.h: New.\n+\t* config.gcc: Add mm3dnow.h to extra_headers for i?86 and x86-64.\n+\n 2004-07-09  Richard Henderson  <rth@redhat.com>\n \n \t* simplify-rtx.c (simplify_const_relational_operation): Only\n \tlook at bounds of scalar integers.\n \n-2004-07-09 Jan Beulich <jbeulich@novell.com>\n+2004-07-09  Jan Beulich  <jbeulich@novell.com>\n \n \t* config/i386/i386.md (sse2_clflush): Use correct operand for clflush.\n "}, {"sha": "bc8fa23166bd65127a12d5c772c4ac70fee3933d", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c2a4754bc69f5642d1db07ecde1fa610404b745/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c2a4754bc69f5642d1db07ecde1fa610404b745/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=0c2a4754bc69f5642d1db07ecde1fa610404b745", "patch": "@@ -248,11 +248,11 @@ xscale-*-*)\n \t;;\n i[34567]86-*-*)\n \tcpu_type=i386\n-\textra_headers=\"mmintrin.h xmmintrin.h emmintrin.h pmmintrin.h\"\n+\textra_headers=\"mmintrin.h mm3dnow.h xmmintrin.h emmintrin.h pmmintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n-\textra_headers=\"mmintrin.h xmmintrin.h emmintrin.h pmmintrin.h\"\n+\textra_headers=\"mmintrin.h mm3dnow.h xmmintrin.h emmintrin.h pmmintrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "7987c0a1419c8ae46d5e903ce3b5027e7c73f487", "filename": "gcc/config/i386/mm3dnow.h", "status": "added", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c2a4754bc69f5642d1db07ecde1fa610404b745/gcc%2Fconfig%2Fi386%2Fmm3dnow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c2a4754bc69f5642d1db07ecde1fa610404b745/gcc%2Fconfig%2Fi386%2Fmm3dnow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmm3dnow.h?ref=0c2a4754bc69f5642d1db07ecde1fa610404b745", "patch": "@@ -0,0 +1,220 @@\n+/* Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you include this header file into source\n+   files compiled by GCC, this header file does not by itself cause\n+   the resulting executable to be covered by the GNU General Public\n+   License.  This exception does not however invalidate any other\n+   reasons why the executable file might be covered by the GNU General\n+   Public License.  */\n+\n+/* Implemented from the mm3dnow.h (of supposedly AMD origin) included with\n+   MSVC 7.1.  */\n+\n+#ifndef _MM3DNOW_H_INCLUDED\n+#define _MM3DNOW_H_INCLUDED\n+\n+#ifdef __3dNOW__\n+\n+#include <mmintrin.h>\n+\n+/* Internal data types for implementing the intrinsics.  */\n+typedef int __v2sf __attribute__ ((__mode__ (__SF__), __vector_size__ (8)));\n+\n+static __inline void\n+_m_femms (void)\n+{\n+  __builtin_ia32_femms();\n+}\n+\n+static __inline __m64\n+_m_pavgusb (__m64 __A, __m64 __B)\n+{\n+  return (__m64)__builtin_ia32_pavgusb ((__v8qi)__A, (__v8qi)__B);\n+}\n+\n+static __inline __m64\n+_m_pf2id (__m64 __A)\n+{\n+  return (__m64)__builtin_ia32_pf2id ((__v2sf)__A);\n+}\n+\n+static __inline __m64\n+_m_pfacc (__m64 __A, __m64 __B)\n+{\n+  return (__m64)__builtin_ia32_pfacc ((__v2sf)__A, (__v2sf)__B);\n+}\n+\n+static __inline __m64\n+_m_pfadd (__m64 __A, __m64 __B)\n+{\n+  return (__m64)__builtin_ia32_pfadd ((__v2sf)__A, (__v2sf)__B);\n+}\n+\n+static __inline __m64\n+_m_pfcmpeq (__m64 __A, __m64 __B)\n+{\n+  return (__m64)__builtin_ia32_pfcmpeq ((__v2sf)__A, (__v2sf)__B);\n+}\n+\n+static __inline __m64\n+_m_pfcmpge (__m64 __A, __m64 __B)\n+{\n+  return (__m64)__builtin_ia32_pfcmpge ((__v2sf)__A, (__v2sf)__B);\n+}\n+\n+static __inline __m64\n+_m_pfcmpgt (__m64 __A, __m64 __B)\n+{\n+  return (__m64)__builtin_ia32_pfcmpgt ((__v2sf)__A, (__v2sf)__B);\n+}\n+\n+static __inline __m64\n+_m_pfmax (__m64 __A, __m64 __B)\n+{\n+  return (__m64)__builtin_ia32_pfmax ((__v2sf)__A, (__v2sf)__B);\n+}\n+\n+static __inline __m64\n+_m_pfmin (__m64 __A, __m64 __B)\n+{\n+  return (__m64)__builtin_ia32_pfmin ((__v2sf)__A, (__v2sf)__B);\n+}\n+\n+static __inline __m64\n+_m_pfmul (__m64 __A, __m64 __B)\n+{\n+  return (__m64)__builtin_ia32_pfmul ((__v2sf)__A, (__v2sf)__B);\n+}\n+\n+static __inline __m64\n+_m_pfrcp (__m64 __A)\n+{\n+  return (__m64)__builtin_ia32_pfrcp ((__v2sf)__A);\n+}\n+\n+static __inline __m64\n+_m_pfrcpit1 (__m64 __A, __m64 __B)\n+{\n+  return (__m64)__builtin_ia32_pfrcpit1 ((__v2sf)__A, (__v2sf)__B);\n+}\n+\n+static __inline __m64\n+_m_pfrcpit2 (__m64 __A, __m64 __B)\n+{\n+  return (__m64)__builtin_ia32_pfrcpit2 ((__v2sf)__A, (__v2sf)__B);\n+}\n+\n+static __inline __m64\n+_m_pfrsqrt (__m64 __A)\n+{\n+  return (__m64)__builtin_ia32_pfrsqrt ((__v2sf)__A);\n+}\n+\n+static __inline __m64\n+_m_pfrsqit1 (__m64 __A, __m64 __B)\n+{\n+  return (__m64)__builtin_ia32_pfrsqit1 ((__v2sf)__A, (__v2sf)__B);\n+}\n+\n+static __inline __m64\n+_m_pfsub (__m64 __A, __m64 __B)\n+{\n+  return (__m64)__builtin_ia32_pfsub ((__v2sf)__A, (__v2sf)__B);\n+}\n+\n+static __inline __m64\n+_m_pfsubr (__m64 __A, __m64 __B)\n+{\n+  return (__m64)__builtin_ia32_pfsubr ((__v2sf)__A, (__v2sf)__B);\n+}\n+\n+static __inline __m64\n+_m_pi2fd (__m64 __A)\n+{\n+  return (__m64)__builtin_ia32_pi2fd ((__v2si)__A);\n+}\n+\n+static __inline __m64\n+_m_pmulhrw (__m64 __A, __m64 __B)\n+{\n+  return (__m64)__builtin_ia32_pmulhrw ((__v4hi)__A, (__v4hi)__B);\n+}\n+\n+static __inline void\n+_m_prefetch (void *__P)\n+{\n+  __builtin_prefetch (__P, 0, 3 /* _MM_HINT_T0 */);\n+}\n+\n+static __inline void\n+_m_prefetchw (void *__P)\n+{\n+  __builtin_prefetch (__P, 1, 3 /* _MM_HINT_T0 */);\n+}\n+\n+static __inline __m64\n+_m_from_float (float __A)\n+{\n+  return (__m64)(__v2sf){ __A, 0 };\n+}\n+\n+static __inline float\n+_m_to_float (__m64 __A)\n+{\n+  union { __v2sf v; float a[2]; } __tmp = { (__v2sf)__A };\n+  return __tmp.a[0];\n+}\n+\n+#ifdef __3dNOW_A__\n+\n+static __inline __m64\n+_m_pf2iw (__m64 __A)\n+{\n+  return (__m64)__builtin_ia32_pf2iw ((__v2sf)__A);\n+}\n+\n+static __inline __m64\n+_m_pfnacc (__m64 __A, __m64 __B)\n+{\n+  return (__m64)__builtin_ia32_pfnacc ((__v2sf)__A, (__v2sf)__B);\n+}\n+\n+static __inline __m64\n+_m_pfpnacc (__m64 __A, __m64 __B)\n+{\n+  return (__m64)__builtin_ia32_pfpnacc ((__v2sf)__A, (__v2sf)__B);\n+}\n+\n+static __inline __m64\n+_m_pi2fw (__m64 __A)\n+{\n+  return (__m64)__builtin_ia32_pi2fw ((__v2si)__A);\n+}\n+\n+static __inline __m64\n+_m_pswapd (__m64 __A)\n+{\n+  return (__m64)__builtin_ia32_pswapdsf ((__v2sf)__A);\n+}\n+\n+#endif /* __3dNOW_A__ */\n+#endif /* __3dNOW__ */\n+\n+#endif /* _MM3DNOW_H_INCLUDED */"}, {"sha": "a8dcb419c7e9fde20275de0cabdd03f0e30e9aa5", "filename": "gcc/testsuite/gcc.dg/i386-3dnow-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c2a4754bc69f5642d1db07ecde1fa610404b745/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-3dnow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c2a4754bc69f5642d1db07ecde1fa610404b745/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-3dnow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-3dnow-1.c?ref=0c2a4754bc69f5642d1db07ecde1fa610404b745", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do assemble { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -m3dnow\" } */\n+\n+/* Test that the intrinsics compile with optimization.  All of them are\n+   defined as inline functions in mmintrin.h that reference the proper\n+   builtin functions.  Defining away \"static\" and \"__inline\" results in\n+   all of them being compiled as proper functions.  */\n+\n+#define static\n+#define __inline\n+\n+#include <mm3dnow.h>"}, {"sha": "d9aa7a56420a76be192e76f63621faf61903e7c4", "filename": "gcc/testsuite/gcc.dg/i386-3dnow-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c2a4754bc69f5642d1db07ecde1fa610404b745/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-3dnow-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c2a4754bc69f5642d1db07ecde1fa610404b745/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-3dnow-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-3dnow-2.c?ref=0c2a4754bc69f5642d1db07ecde1fa610404b745", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do assemble { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -m3dnow\" } */\n+\n+/* Test that the intrinsics compile without optimization.  All of them are\n+   defined as inline functions in mmintrin.h that reference the proper\n+   builtin functions.  Defining away \"static\" and \"__inline\" results in\n+   all of them being compiled as proper functions.  */\n+\n+#define static\n+#define __inline\n+\n+#include <mm3dnow.h>"}, {"sha": "2ae1a04d5cbbd1b1da4e3b79e9cc59bc0ffcd1db", "filename": "gcc/testsuite/gcc.dg/i386-3dnowA-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c2a4754bc69f5642d1db07ecde1fa610404b745/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-3dnowA-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c2a4754bc69f5642d1db07ecde1fa610404b745/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-3dnowA-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-3dnowA-1.c?ref=0c2a4754bc69f5642d1db07ecde1fa610404b745", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do assemble { target i?86-*-* } } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -m3dnow -march=athlon\" } */\n+\n+/* Test that the intrinsics compile with optimization.  All of them are\n+   defined as inline functions in mmintrin.h that reference the proper\n+   builtin functions.  Defining away \"static\" and \"__inline\" results in\n+   all of them being compiled as proper functions.  */\n+\n+#define static\n+#define __inline\n+\n+#include <mm3dnow.h>"}, {"sha": "d8ed6cb4c4db41ca6dc77524b468519275326b68", "filename": "gcc/testsuite/gcc.dg/i386-3dnowA-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c2a4754bc69f5642d1db07ecde1fa610404b745/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-3dnowA-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c2a4754bc69f5642d1db07ecde1fa610404b745/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-3dnowA-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-3dnowA-2.c?ref=0c2a4754bc69f5642d1db07ecde1fa610404b745", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do assemble { target i?86-*-* } } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -m3dnow -march=athlon\" } */\n+\n+/* Test that the intrinsics compile without optimization.  All of them are\n+   defined as inline functions in mmintrin.h that reference the proper\n+   builtin functions.  Defining away \"static\" and \"__inline\" results in\n+   all of them being compiled as proper functions.  */\n+\n+#define static\n+#define __inline\n+\n+#include <mm3dnow.h>"}]}