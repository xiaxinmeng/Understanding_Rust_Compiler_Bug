{"sha": "277d7ee0c95456a21ef371aa025791cbef883169", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc3ZDdlZTBjOTU0NTZhMjFlZjM3MWFhMDI1NzkxY2JlZjg4MzE2OQ==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2016-06-23T14:34:16Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2016-06-23T14:34:16Z"}, "message": "Add make autoprofiledbootstrap\n\nAdd support for profiledbootstrap with autofdo. Will be useful\nto get better testing coverage of autofdo.\n\nThis requires Linux perf and autofdo to be installed, only\nreally for x86_64 linux on Intel so far.\n\nProfile the whole build process with perf, then convert the file,\nand pass it back to the compiler in the feedback stage.\n\nThe conversion has to be done per language, as only that knows\nthe name of the binary. Currently we only do it for C and C++,\nas the other languages don't have enough coverage during a normal\nbootstrap.\n\nFor lto1 it is also disabled, because it would only be useful during a LTO\nbootstrap, but right now autofdo and LTO are not working together due to\nPR66229\n\nFor common backend files always the profile output of the C++ compiler\nis used. In theory multiple inputs could be merged here, but so far\nthat is not implemented.\n\nThe method is not friendly to partial rebuilds, as only the profile\ninformation from the current rebuild is used. So if an error\noccurs it is best to clean and restart, otherwise the code\nquality may be worse.\n\nThis patch is fairly large, but most of it is auto generated from\nautogen in Makefile.in. for the new stage targets.\n\nPasses profiledbootstrap and normal bootstrap on x86_64-linux.\nautoprofiledbootstrap is currently not working due to\nPR70427 (but it finishes with that worked around)\n\nThe autofdo'ed compiler is ~7% faster on insn-recog.i (vs ~11% for\nprofiledfeedback), and ~4% faster for tramp3d-v4 (vs 10% for\nprofiledfeedback) on a Sandy Bridge system.\n\ngcc/lto/:\n\n2016-06-23  Andi Kleen  <ak@linux.intel.com>\n\n\t* Make-lang.in: Add support for autofdo (disabled for now)\n\ngcc/cp/:\n\n2016-06-23  Andi Kleen  <ak@linux.intel.com>\n\n\t* Make-lang.in: Add support for autofdo.\n\ngcc/:\n\n2016-06-23  Andi Kleen  <ak@linux.intel.com>\n\n\t* Makefile.in: Regenerate.\n\t* doc/install.texi: Document autoprofiledbootstrap.\n\n/:\n2016-06-23  Andi Kleen  <ak@linux.intel.com>\n\n\t* Makefile.def: Add autoprofiledbootstrap.\n\t* Makefile.tpl: Dito.\n\t* Makefile.in: Regenerate.\n\ngcc/c/:\n\n2016-06-23  Andi Kleen  <ak@linux.intel.com>\n\n\t* Make-lang.in: Add support for autofdo.\n\nFrom-SVN: r237733", "tree": {"sha": "a64cadd18e82bbd81f52a690484f43fc66291fdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a64cadd18e82bbd81f52a690484f43fc66291fdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/277d7ee0c95456a21ef371aa025791cbef883169", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/277d7ee0c95456a21ef371aa025791cbef883169", "html_url": "https://github.com/Rust-GCC/gccrs/commit/277d7ee0c95456a21ef371aa025791cbef883169", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/277d7ee0c95456a21ef371aa025791cbef883169/comments", "author": null, "committer": null, "parents": [{"sha": "7f586d904de25044a08f99669df5bc1ed2fa9f26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f586d904de25044a08f99669df5bc1ed2fa9f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f586d904de25044a08f99669df5bc1ed2fa9f26"}], "stats": {"total": 5888, "additions": 5713, "deletions": 175}, "files": [{"sha": "ecbb7174d757520a565777f5f6e94e7adb0f8551", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277d7ee0c95456a21ef371aa025791cbef883169/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277d7ee0c95456a21ef371aa025791cbef883169/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=277d7ee0c95456a21ef371aa025791cbef883169", "patch": "@@ -1,3 +1,9 @@\n+2016-06-23  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* Makefile.def: Add autoprofiledbootstrap.\n+\t* Makefile.tpl: Dito.\n+\t* Makefile.in: Regenerate.\n+\n 2016-06-23  Jakub Sejdak  <jakub.sejdak@phoesys.com>\n \n     * configure.ac: Disable libgcj and libgloss for Phoenix-RTOS targets."}, {"sha": "05316a407f4c78606875a9f4734e683acfa985c3", "filename": "Makefile.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277d7ee0c95456a21ef371aa025791cbef883169/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277d7ee0c95456a21ef371aa025791cbef883169/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=277d7ee0c95456a21ef371aa025791cbef883169", "patch": "@@ -639,3 +639,10 @@ bootstrap_stage = {\n bootstrap_stage = {\n \tid=feedback ; prev=profile ;\n \tbootstrap_target=profiledbootstrap ; };\n+bootstrap_stage = {\n+\tid=autoprofile ; prev=1 ;\n+        autoprofile=\"$$s/gcc/config/i386/$(AUTO_PROFILE)\" ; };\n+bootstrap_stage = {\n+\tid=autofeedback ; prev=autoprofile ;\n+\tbootstrap_target=autoprofiledbootstrap ;\n+\tprofile_data=\"PERF_DATA=perf.data\" ; };"}, {"sha": "117fbf5d7520751b3d2510061e35c1e315491c7a", "filename": "Makefile.in", "status": "modified", "additions": 5610, "deletions": 170, "changes": 5780, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277d7ee0c95456a21ef371aa025791cbef883169/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277d7ee0c95456a21ef371aa025791cbef883169/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=277d7ee0c95456a21ef371aa025791cbef883169"}, {"sha": "94a4f79f68e6b61f0a3178f701d864703d7f2532", "filename": "Makefile.tpl", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277d7ee0c95456a21ef371aa025791cbef883169/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277d7ee0c95456a21ef371aa025791cbef883169/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=277d7ee0c95456a21ef371aa025791cbef883169", "patch": "@@ -382,6 +382,8 @@ MAKEINFO = @MAKEINFO@\n EXPECT = @EXPECT@\n RUNTEST = @RUNTEST@\n \n+AUTO_PROFILE = gcc-auto-profile -c 1000000\n+\n # This just becomes part of the MAKEINFO definition passed down to\n # sub-makes.  It lets flags be given on the command line while still\n # using the makeinfo from the object tree.\n@@ -418,6 +420,8 @@ CXXFLAGS = @CXXFLAGS@\n LIBCXXFLAGS = $(CXXFLAGS) -fno-implicit-templates\n GOCFLAGS = $(CFLAGS)\n \n+CREATE_GCOV = create_gcov\n+\n TFLAGS =\n \n # Defaults for all stages; some are overridden below.\n@@ -462,6 +466,12 @@ STAGEprofile_TFLAGS = $(STAGE2_TFLAGS)\n STAGEfeedback_CFLAGS = $(STAGE3_CFLAGS) -fprofile-use\n STAGEfeedback_TFLAGS = $(STAGE3_TFLAGS)\n \n+STAGEautoprofile_CFLAGS = $(STAGE2_CFLAGS) -g\n+STAGEautoprofile_TFLAGS = $(STAGE2_TFLAGS)\n+\n+STAGEautofeedback_CFLAGS = $(STAGE3_CFLAGS)\n+STAGEautofeedback_TFLAGS = $(STAGE3_TFLAGS)\n+\n do-compare = @do_compare@\n do-compare3 = $(do-compare)\n \n@@ -617,7 +627,8 @@ EXTRA_HOST_FLAGS = \\\n \t'READELF=$(READELF)' \\\n \t'STRIP=$(STRIP)' \\\n \t'WINDRES=$(WINDRES)' \\\n-\t'WINDMC=$(WINDMC)'\n+\t'WINDMC=$(WINDMC)' \\\n+\t'CREATE_GCOV=$(CREATE_GCOV)'\n \n FLAGS_TO_PASS = $(BASE_FLAGS_TO_PASS) $(EXTRA_HOST_FLAGS)\n \n@@ -1147,6 +1158,7 @@ all-stage[+id+]-[+prefix+][+module+]: configure-stage[+id+]-[+prefix+][+module+]\n \t[+exports+][+ IF prev +] \\\n \t[+poststage1_exports+][+ ENDIF prev +] [+extra_exports+] \\\n \tcd [+subdir+]/[+module+] && \\\n+\t[+autoprofile+] \\\n \t$(MAKE) $(BASE_FLAGS_TO_PASS)[+ IF prefix +] \\\n \t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n \t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n@@ -1160,7 +1172,7 @@ all-stage[+id+]-[+prefix+][+module+]: configure-stage[+id+]-[+prefix+][+module+]\n \t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n \t\t[+args+] [+IF prev +][+poststage1_args+][+ ELSE prev +] \\\n \t\t[+stage1_args+][+ ENDIF prev +] [+extra_make_flags+] \\\n-\t\tTFLAGS=\"$(STAGE[+id+]_TFLAGS)\" \\\n+\t\tTFLAGS=\"$(STAGE[+id+]_TFLAGS)\" [+profile_data+] \\\n \t\t$(TARGET-stage[+id+]-[+prefix+][+module+])\n \n maybe-clean-stage[+id+]-[+prefix+][+module+]: clean-stage[+id+]-[+prefix+][+module+]"}, {"sha": "9a1f732d259c586aa007968a2d9e07f2ab0d639a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277d7ee0c95456a21ef371aa025791cbef883169/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277d7ee0c95456a21ef371aa025791cbef883169/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=277d7ee0c95456a21ef371aa025791cbef883169", "patch": "@@ -1,3 +1,8 @@\n+2016-06-23  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* Makefile.in: Regenerate.\n+\t* doc/install.texi: Document autoprofiledbootstrap.\n+\n 2016-06-23  Andi Kleen  <ak@linux.intel.com>\n \n \t* config/i386/gcc-auto-profile: New file."}, {"sha": "878fcd0555255def6308cc994ce66115af0e8f69", "filename": "gcc/Makefile.in", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277d7ee0c95456a21ef371aa025791cbef883169/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277d7ee0c95456a21ef371aa025791cbef883169/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=277d7ee0c95456a21ef371aa025791cbef883169", "patch": "@@ -1567,6 +1567,13 @@ ALL_HOST_BACKEND_OBJS = $(GCC_OBJS) $(OBJS) $(OBJS-libcommon) \\\n   $(GCOV_TOOL_OBJS) $(GENGTYPE_OBJS) gcc-ar.o gcc-nm.o gcc-ranlib.o \\\n   lto-wrapper.o collect-utils.o\n \n+# for anything that is shared use the cc1plus profile data, as that\n+# is likely the most exercised during the build\n+ifeq ($(shell cat ../stage_current),stageautofeedback)\n+$(ALL_HOST_BACKEND_OBJS): ALL_COMPILERFLAGS += -fauto-profile=cc1plus.fda\n+$(ALL_HOST_BACKEND_OBJS): cc1plus.fda\n+endif\n+\n # This lists all host object files, whether they are included in this\n # compilation or not.\n ALL_HOST_OBJS = $(ALL_HOST_FRONTEND_OBJS) $(ALL_HOST_BACKEND_OBJS)\n@@ -1596,7 +1603,7 @@ MOSTLYCLEANFILES = insn-flags.h insn-config.h insn-codes.h \\\n  gcov-iov$(build_exeext) gcov$(exeext) gcov-dump$(exeext) \\\n  gcov-tool$(exeect) \\\n  gengtype$(exeext) *.[0-9][0-9].* *.[si] *-checksum.c libbackend.a \\\n- libcommon-target.a libcommon.a libgcc.mk\n+ libcommon-target.a libcommon.a libgcc.mk perf.data\n \n # This symlink makes the full installation name of the driver be available\n # from within the *build* directory, for use when running the JIT library"}, {"sha": "dc6ceccd020d390285de716afa5c5d7f5c1257ec", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277d7ee0c95456a21ef371aa025791cbef883169/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277d7ee0c95456a21ef371aa025791cbef883169/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=277d7ee0c95456a21ef371aa025791cbef883169", "patch": "@@ -1,3 +1,7 @@\n+2016-06-23  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* Make-lang.in: Add support for autofdo.\n+\n 2016-06-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/70339"}, {"sha": "5b14ba395c725ac21bf3d19121ca5d8e5db406f0", "filename": "gcc/c/Make-lang.in", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277d7ee0c95456a21ef371aa025791cbef883169/gcc%2Fc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277d7ee0c95456a21ef371aa025791cbef883169/gcc%2Fc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FMake-lang.in?ref=277d7ee0c95456a21ef371aa025791cbef883169", "patch": "@@ -60,6 +60,11 @@ c_OBJS = $(C_OBJS) cc1-checksum.o c/gccspec.o\n # Use strict warnings for this front end.\n c-warn = $(STRICT_WARN)\n \n+ifeq ($(shell cat ../stage_current),stageautofeedback)\n+$(C_OBJS): ALL_COMPILERFLAGS += -fauto-profile=cc1.fda\n+$(C_OBJS): cc1.fda\n+endif\n+\n # compute checksum over all object files and the options\n # re-use the checksum from the prev-final stage so it passes\n # the bootstrap comparison and allows comparing of the cc1 binary\n@@ -77,6 +82,10 @@ cc1-checksum.c : build/genchecksum$(build_exeext) checksum-options \\\n cc1$(exeext): $(C_OBJS) cc1-checksum.o $(BACKEND) $(LIBDEPS)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ $(C_OBJS) \\\n \t  cc1-checksum.o $(BACKEND) $(LIBS) $(BACKENDLIBS)\n+\n+cc1.fda: ../stage1-gcc/cc1$(exeext) ../prev-gcc/$(PERF_DATA)\n+\t$(CREATE_GCOV) -binary ../stage1-gcc/cc1$(exeext) -gcov cc1.fda -profile ../prev-gcc/$(PERF_DATA) -gcov_version 1\n+\n #\f\n # Build hooks:\n \n@@ -126,6 +135,7 @@ c.mostlyclean:\n \t-rm -f cc1$(exeext)\n \t-rm -f c/*$(objext)\n \t-rm -f c/*$(coverageexts)\n+\t-rm -f cc1.fda\n c.clean:\n c.distclean:\n \t-rm -f c/config.status c/Makefile\n@@ -146,3 +156,7 @@ c.stageprofile: stageprofile-start\n \t-mv c/*$(objext) stageprofile/c\n c.stagefeedback: stagefeedback-start\n \t-mv c/*$(objext) stagefeedback/c\n+c.autostageprofile: autostageprofile-start\n+\t-mv c/*$(objext) autostageprofile/c\n+c.autostagefeedback: autostagefeedback-start\n+\t-mv c/*$(objext) autostagefeedback/c"}, {"sha": "9ef7d4ef9555c9a95be63303fb5aa5c70e1d5d49", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277d7ee0c95456a21ef371aa025791cbef883169/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277d7ee0c95456a21ef371aa025791cbef883169/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=277d7ee0c95456a21ef371aa025791cbef883169", "patch": "@@ -1,3 +1,7 @@\n+2016-06-23  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* Make-lang.in: Add support for autofdo.\n+\n 2016-06-21  Jason Merrill  <jason@redhat.com>\n \n \t* constraint.cc (constraints_satisfied_p): Keep as many levels of"}, {"sha": "c1f26eacb94d54e8f40f9fd4e10fc5a9f959ee67", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277d7ee0c95456a21ef371aa025791cbef883169/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277d7ee0c95456a21ef371aa025791cbef883169/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=277d7ee0c95456a21ef371aa025791cbef883169", "patch": "@@ -81,6 +81,11 @@ CXX_AND_OBJCXX_OBJS = cp/call.o cp/decl.o cp/expr.o cp/pt.o cp/typeck2.o \\\n  cp/vtable-class-hierarchy.o cp/constexpr.o cp/cp-ubsan.o \\\n  cp/constraint.o cp/logic.o $(CXX_C_OBJS)\n \n+ifeq ($(shell cat ../stage_current),stageautofeedback)\n+$(CXX_AND_OBJCXX_OBJS): CFLAGS += -fauto-profile=cc1plus.fda\n+$(CXX_AND_OBJCXX_OBJS): cc1plus.fda\n+endif\n+\n # Language-specific object files for C++.\n CXX_OBJS = cp/cp-lang.o c-family/stub-objc.o $(CXX_AND_OBJCXX_OBJS)\n \n@@ -122,6 +127,9 @@ endif\n \tgperf -o -C -E -k '1-6,$$' -j1 -D -N 'libc_name_p' -L C++ \\\n \t\t$(srcdir)/cp/cfns.gperf --output-file $(srcdir)/cp/cfns.h\n \n+cc1plus.fda: ../stage1-gcc/cc1plus$(exeext) ../prev-gcc/$(PERF_DATA)\n+\t$(CREATE_GCOV) -binary ../stage1-gcc/cc1plus$(exeext) -gcov cc1plus.fda -profile ../prev-gcc/$(PERF_DATA) -gcov_version 1\n+\n #\f\n # Build hooks:\n \n@@ -235,7 +243,7 @@ c++.mostlyclean:\n \t-rm -f doc/g++.1\n \t-rm -f cp/*$(objext)\n \t-rm -f cp/*$(coverageexts)\n-\t-rm -f xg++$(exeext) g++-cross$(exeext) cc1plus$(exeext)\n+\t-rm -f xg++$(exeext) g++-cross$(exeext) cc1plus$(exeext) cc1plus.fda\n c++.clean:\n c++.distclean:\n \t-rm -f cp/config.status cp/Makefile\n@@ -257,3 +265,7 @@ c++.stageprofile: stageprofile-start\n \t-mv cp/*$(objext) stageprofile/cp\n c++.stagefeedback: stagefeedback-start\n \t-mv cp/*$(objext) stagefeedback/cp\n+c++.autostageprofile: stageprofile-start\n+\t-mv cp/*$(objext) autostageprofile/cp\n+c++.autostagefeedback: stagefeedback-start\n+\t-mv cp/*$(objext) autostagefeedback/cp"}, {"sha": "9248f0d2e334435cf92e73031233e3910f0eb1eb", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277d7ee0c95456a21ef371aa025791cbef883169/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277d7ee0c95456a21ef371aa025791cbef883169/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=277d7ee0c95456a21ef371aa025791cbef883169", "patch": "@@ -2776,6 +2776,17 @@ Unlike standard bootstrap, several additional restrictions apply.  The\n compiler used to build @code{stage1} needs to support a 64-bit integral type.\n It is recommended to only use GCC for this.\n \n+On Linux/x86_64 hosts with some restrictions (no virtualization) it is\n+also possible to do autofdo build with @samp{make\n+autoprofiledback}. This uses Linux perf to sample branches in the\n+binary and then rebuild it with feedback derived from the profile.\n+Linux perf and the @code{autofdo} toolkit needs to be installed for\n+this.\n+\n+Only the profile from the current build is used, so when an error\n+occurs it is recommended to clean before restarting. Otherwise\n+the code quality may be much worse.\n+\n @html\n <hr />\n <p>"}, {"sha": "f2e56a99162df8ee03dc8d2d21df3431af777c05", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277d7ee0c95456a21ef371aa025791cbef883169/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277d7ee0c95456a21ef371aa025791cbef883169/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=277d7ee0c95456a21ef371aa025791cbef883169", "patch": "@@ -1,3 +1,7 @@\n+2016-06-23  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* Make-lang.in: Add support for autofdo (disabled for now)\n+\n 2016-06-10  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/71392"}, {"sha": "9b952767e139d390eb39d0896088b3b98fe3aa15", "filename": "gcc/lto/Make-lang.in", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277d7ee0c95456a21ef371aa025791cbef883169/gcc%2Flto%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277d7ee0c95456a21ef371aa025791cbef883169/gcc%2Flto%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FMake-lang.in?ref=277d7ee0c95456a21ef371aa025791cbef883169", "patch": "@@ -25,6 +25,15 @@ LTO_EXE = lto1$(exeext)\n LTO_OBJS = lto/lto-lang.o lto/lto.o lto/lto-object.o attribs.o lto/lto-partition.o lto/lto-symtab.o\n lto_OBJS = $(LTO_OBJS)\n \n+# this is only useful in a LTO bootstrap, but this does not work right\n+# now. Should reenable after this is fixed, but only when LTO bootstrap\n+# is enabled.\n+\n+#ifeq ($(shell cat ../stage_current),stageautofeedback)\n+#$(LTO_OBJS): CFLAGS += -fauto-profile=lto1.fda\n+#$(LTO_OBJS): lto1.fda\n+#endif\n+\n # Rules\n \n # These hooks are used by the main GCC Makefile.  Consult that\n@@ -50,7 +59,7 @@ lto.srcinfo:\n lto.install-plugin:\n \n lto.mostlyclean:\n-\trm -f $(LTO_OBJS) $(LTO_EXE)\n+\trm -f $(LTO_OBJS) $(LTO_EXE) lto1.fda\n \n lto.clean:\n lto.distclean:\n@@ -71,5 +80,8 @@ $(LTO_EXE): $(LTO_OBJS) $(BACKEND) $(LIBDEPS)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t\t$(LTO_OBJS) $(BACKEND) $(BACKENDLIBS) $(LIBS)\n \n+lto1.fda: ../prev-gcc/lto1$(exeext) ../prev-gcc/$(PERF_DATA)\n+\t$(CREATE_GCOV) -binary ../prev-gcc/lto1$(exeext) -gcov lto1.fda -profile ../prev-gcc/$(PERF_DATA) -gcov_version 1\n+\n # LTO testing is done as part of C/C++/Fortran etc. testing.\n check-lto:"}]}