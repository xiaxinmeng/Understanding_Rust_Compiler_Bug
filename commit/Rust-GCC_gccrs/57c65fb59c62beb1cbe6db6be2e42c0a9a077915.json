{"sha": "57c65fb59c62beb1cbe6db6be2e42c0a9a077915", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdjNjVmYjU5YzYyYmViMWNiZTZkYjZiZTJlNDJjMGE5YTA3NzkxNQ==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2007-12-23T17:34:45Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-12-23T17:34:45Z"}, "message": "re PR fortran/34536 (Make support of 2.0**-3*5 tighter: Print warning by default)\n\ngcc/fortran:\n2007-12-23  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/34536 \n\t* matchexp.c (match_ext_mult_operand): Print warning for unary \n\toperators following arithmetic ones by default.\n\t(match_ext_add_operand): Likewise.\n\ngcc/testsuite:\n2007-12-23  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/34536\n\t* gfortran.dg/integer_exponentiation_2.f90: Fixed testcase.\n\t* gfortran.dg/real_const_3.f90: Likewise.\n\t* gfortran.dg/unary_operator.f90: New test.\n\nFrom-SVN: r131149", "tree": {"sha": "57a9a5c60ea2fc02c8e7f025201bd38f9eda5124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57a9a5c60ea2fc02c8e7f025201bd38f9eda5124"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57c65fb59c62beb1cbe6db6be2e42c0a9a077915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c65fb59c62beb1cbe6db6be2e42c0a9a077915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57c65fb59c62beb1cbe6db6be2e42c0a9a077915", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c65fb59c62beb1cbe6db6be2e42c0a9a077915/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1584031f69250f7c4479b5d64e724fdd0f120422", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1584031f69250f7c4479b5d64e724fdd0f120422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1584031f69250f7c4479b5d64e724fdd0f120422"}], "stats": {"total": 168, "additions": 99, "deletions": 69}, "files": [{"sha": "6e992433b57ef672b669e68a1f51250bee598b35", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c65fb59c62beb1cbe6db6be2e42c0a9a077915/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c65fb59c62beb1cbe6db6be2e42c0a9a077915/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=57c65fb59c62beb1cbe6db6be2e42c0a9a077915", "patch": "@@ -1,3 +1,10 @@\n+2007-12-23  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/34536 \n+\t* matchexp.c (match_ext_mult_operand): Print warning for unary \n+\toperators following arithmetic ones by default.\n+\t(match_ext_add_operand): Likewise.\n+\n 2007-12-22  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/34559"}, {"sha": "0bc567f3cec1094eff5d0f198c1b96a3c72f7de5", "filename": "gcc/fortran/matchexp.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c65fb59c62beb1cbe6db6be2e42c0a9a077915/gcc%2Ffortran%2Fmatchexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c65fb59c62beb1cbe6db6be2e42c0a9a077915/gcc%2Ffortran%2Fmatchexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatchexp.c?ref=57c65fb59c62beb1cbe6db6be2e42c0a9a077915", "patch": "@@ -345,10 +345,15 @@ match_ext_mult_operand (gfc_expr **result)\n   if (i == 0)\n     return match_mult_operand (result);\n \n-  if (gfc_notify_std (GFC_STD_GNU, \"Extension: Unary operator following \"\n-\t\t      \"arithmetic operator (use parentheses) at %C\")\n-      == FAILURE)\n-    return MATCH_ERROR;\n+  if (gfc_notification_std (GFC_STD_GNU) == ERROR)\n+    {\n+      gfc_error (\"Extension: Unary operator following \"\n+\t\t \"arithmetic operator (use parentheses) at %C\");\n+      return MATCH_ERROR;\n+    }\n+  else\n+    gfc_warning (\"Extension: Unary operator following \"\n+\t\t \"arithmetic operator (use parentheses) at %C\");\n \n   m = match_ext_mult_operand (&e);\n   if (m != MATCH_YES)\n@@ -449,10 +454,15 @@ match_ext_add_operand (gfc_expr **result)\n   if (i == 0)\n     return match_add_operand (result);\n \n-  if (gfc_notify_std (GFC_STD_GNU, \"Extension: Unary operator following \"\n-\t\t      \"arithmetic operator (use parentheses) at %C\")\n-      == FAILURE)\n-    return MATCH_ERROR;\n+  if (gfc_notification_std (GFC_STD_GNU) == ERROR)\n+    {\n+      gfc_error (\"Extension: Unary operator following \"\n+\t\t \"arithmetic operator (use parentheses) at %C\");\n+      return MATCH_ERROR;\n+    }\n+  else\n+    gfc_warning (\"Extension: Unary operator following \"\n+\t\t\"arithmetic operator (use parentheses) at %C\");\n \n   m = match_ext_add_operand (&e);\n   if (m != MATCH_YES)"}, {"sha": "4b540f05f70c88795cb1b3270ec3b72574d83f30", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c65fb59c62beb1cbe6db6be2e42c0a9a077915/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c65fb59c62beb1cbe6db6be2e42c0a9a077915/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=57c65fb59c62beb1cbe6db6be2e42c0a9a077915", "patch": "@@ -1,3 +1,10 @@\n+2007-12-23  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/34536\n+\t* gfortran.dg/integer_exponentiation_2.f90: Fixed testcase.\n+\t* gfortran.dg/real_const_3.f90: Likewise.\n+\t* gfortran.dg/unary_operator.f90: New test.\n+\n 2007-12-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/pack2.adb: New test."}, {"sha": "1261d48d3412bb91b428c4db719d923926e61101", "filename": "gcc/testsuite/gfortran.dg/integer_exponentiation_2.f90", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c65fb59c62beb1cbe6db6be2e42c0a9a077915/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c65fb59c62beb1cbe6db6be2e42c0a9a077915/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_2.f90?ref=57c65fb59c62beb1cbe6db6be2e42c0a9a077915", "patch": "@@ -32,29 +32,29 @@ subroutine run_me(a, i, z)\n   call check_equal_r (a**1.0, a)\n   call check_equal_r (a**2.0, a*a)\n   call check_equal_r (a**3.0, a*(a**2))\n-  call check_equal_r (a**-1.0, 1/a)\n-  call check_equal_r (a**-2.0, (1/a)*(1/a))\n+  call check_equal_r (a**(-1.0), 1/a)\n+  call check_equal_r (a**(-2.0), (1/a)*(1/a))\n \n   call check_equal_r (a**0, 1.0)\n   call check_equal_r (a**1, a)\n   call check_equal_r (a**2, a*a)\n   call check_equal_r (a**3, a*(a**2))\n-  call check_equal_r (a**-1, 1/a)\n-  call check_equal_r (a**-2, (1/a)*(1/a))\n+  call check_equal_r (a**(-1), 1/a)\n+  call check_equal_r (a**(-2), (1/a)*(1/a))\n \n   call check_equal_r (a**0_8, 1.0)\n   call check_equal_r (a**1_8, a)\n   call check_equal_r (a**2_8, a*a)\n   call check_equal_r (a**3_8, a*(a**2))\n-  call check_equal_r (a**-1_8, 1/a)\n-  call check_equal_r (a**-2_8, (1/a)*(1/a))\n+  call check_equal_r (a**(-1_8), 1/a)\n+  call check_equal_r (a**(-2_8), (1/a)*(1/a))\n \n   call check_equal_c (z**0.0, (1.0,0.0))\n   call check_equal_c (z**1.0, z)\n   call check_equal_c (z**2.0, z*z)\n   call check_equal_c (z**3.0, z*(z**2))\n-  call check_equal_c (z**-1.0, 1/z)\n-  call check_equal_c (z**-2.0, (1/z)*(1/z))\n+  call check_equal_c (z**(-1.0), 1/z)\n+  call check_equal_c (z**(-2.0), (1/z)*(1/z))\n \n   call check_equal_c (z**(0.0,0.0), (1.0,0.0))\n   call check_equal_c (z**(1.0,0.0), z)\n@@ -67,15 +67,15 @@ subroutine run_me(a, i, z)\n   call check_equal_c (z**1, z)\n   call check_equal_c (z**2, z*z)\n   call check_equal_c (z**3, z*(z**2))\n-  call check_equal_c (z**-1, 1/z)\n-  call check_equal_c (z**-2, (1/z)*(1/z))\n+  call check_equal_c (z**(-1), 1/z)\n+  call check_equal_c (z**(-2), (1/z)*(1/z))\n \n   call check_equal_c (z**0_8, (1.0,0.0))\n   call check_equal_c (z**1_8, z)\n   call check_equal_c (z**2_8, z*z)\n   call check_equal_c (z**3_8, z*(z**2))\n-  call check_equal_c (z**-1_8, 1/z)\n-  call check_equal_c (z**-2_8, (1/z)*(1/z))\n+  call check_equal_c (z**(-1_8), 1/z)\n+  call check_equal_c (z**(-2_8), (1/z)*(1/z))\n \n \n contains\n@@ -110,134 +110,134 @@ subroutine foo(a)\n   call gee_i(i**1_1)\n   call gee_i(i**2_1)\n   call gee_i(i**3_1)\n-  call gee_i(i**-1_1)\n-  call gee_i(i**-2_1)\n-  call gee_i(i**-3_1)\n+  call gee_i(i**(-1_1))\n+  call gee_i(i**(-2_1))\n+  call gee_i(i**(-3_1))\n   call gee_i(i**huge(0_1))\n-  call gee_i(i**-huge(0_1))\n+  call gee_i(i**(-huge(0_1)))\n   call gee_i(i**(-huge(0_1)-1_1))\n \n   call gee_i(i**0_2)\n   call gee_i(i**1_2)\n   call gee_i(i**2_2)\n   call gee_i(i**3_2)\n-  call gee_i(i**-1_2)\n-  call gee_i(i**-2_2)\n-  call gee_i(i**-3_2)\n+  call gee_i(i**(-1_2))\n+  call gee_i(i**(-2_2))\n+  call gee_i(i**(-3_2))\n   call gee_i(i**huge(0_2))\n-  call gee_i(i**-huge(0_2))\n+  call gee_i(i**(-huge(0_2)))\n   call gee_i(i**(-huge(0_2)-1_2))\n \n   call gee_i(i**0_4)\n   call gee_i(i**1_4)\n   call gee_i(i**2_4)\n   call gee_i(i**3_4)\n-  call gee_i(i**-1_4)\n-  call gee_i(i**-2_4)\n-  call gee_i(i**-3_4)\n+  call gee_i(i**(-1_4))\n+  call gee_i(i**(-2_4))\n+  call gee_i(i**(-3_4))\n   call gee_i(i**huge(0_4))\n-  call gee_i(i**-huge(0_4))\n+  call gee_i(i**(-huge(0_4)))\n   call gee_i(i**(-huge(0_4)-1_4))\n \n   call gee_i(i**0_8)\n   call gee_i(i**1_8)\n   call gee_i(i**2_8)\n   call gee_i(i**3_8)\n-  call gee_i(i**-1_8)\n-  call gee_i(i**-2_8)\n-  call gee_i(i**-3_8)\n+  call gee_i(i**(-1_8))\n+  call gee_i(i**(-2_8))\n+  call gee_i(i**(-3_8))\n   call gee_i(i**huge(0_8))\n-  call gee_i(i**-huge(0_8))\n+  call gee_i(i**(-huge(0_8)))\n   call gee_i(i**(-huge(0_8)-1_8))\n \n   ! Real\n   call gee_r(a**0_1)\n   call gee_r(a**1_1)\n   call gee_r(a**2_1)\n   call gee_r(a**3_1)\n-  call gee_r(a**-1_1)\n-  call gee_r(a**-2_1)\n-  call gee_r(a**-3_1)\n+  call gee_r(a**(-1_1))\n+  call gee_r(a**(-2_1))\n+  call gee_r(a**(-3_1))\n   call gee_r(a**huge(0_1))\n-  call gee_r(a**-huge(0_1))\n+  call gee_r(a**(-huge(0_1)))\n   call gee_r(a**(-huge(0_1)-1_1))\n \n   call gee_r(a**0_2)\n   call gee_r(a**1_2)\n   call gee_r(a**2_2)\n   call gee_r(a**3_2)\n-  call gee_r(a**-1_2)\n-  call gee_r(a**-2_2)\n-  call gee_r(a**-3_2)\n+  call gee_r(a**(-1_2))\n+  call gee_r(a**(-2_2))\n+  call gee_r(a**(-3_2))\n   call gee_r(a**huge(0_2))\n-  call gee_r(a**-huge(0_2))\n+  call gee_r(a**(-huge(0_2)))\n   call gee_r(a**(-huge(0_2)-1_2))\n \n   call gee_r(a**0_4)\n   call gee_r(a**1_4)\n   call gee_r(a**2_4)\n   call gee_r(a**3_4)\n-  call gee_r(a**-1_4)\n-  call gee_r(a**-2_4)\n-  call gee_r(a**-3_4)\n+  call gee_r(a**(-1_4))\n+  call gee_r(a**(-2_4))\n+  call gee_r(a**(-3_4))\n   call gee_r(a**huge(0_4))\n-  call gee_r(a**-huge(0_4))\n+  call gee_r(a**(-huge(0_4)))\n   call gee_r(a**(-huge(0_4)-1_4))\n \n   call gee_r(a**0_8)\n   call gee_r(a**1_8)\n   call gee_r(a**2_8)\n   call gee_r(a**3_8)\n-  call gee_r(a**-1_8)\n-  call gee_r(a**-2_8)\n-  call gee_r(a**-3_8)\n+  call gee_r(a**(-1_8))\n+  call gee_r(a**(-2_8))\n+  call gee_r(a**(-3_8))\n   call gee_r(a**huge(0_8))\n-  call gee_r(a**-huge(0_8))\n+  call gee_r(a**(-huge(0_8)))\n   call gee_r(a**(-huge(0_8)-1_8))\n \n   ! Complex\n   call gee_z(z**0_1)\n   call gee_z(z**1_1)\n   call gee_z(z**2_1)\n   call gee_z(z**3_1)\n-  call gee_z(z**-1_1)\n-  call gee_z(z**-2_1)\n-  call gee_z(z**-3_1)\n+  call gee_z(z**(-1_1))\n+  call gee_z(z**(-2_1))\n+  call gee_z(z**(-3_1))\n   call gee_z(z**huge(0_1))\n-  call gee_z(z**-huge(0_1))\n+  call gee_z(z**(-huge(0_1)))\n   call gee_z(z**(-huge(0_1)-1_1))\n \n   call gee_z(z**0_2)\n   call gee_z(z**1_2)\n   call gee_z(z**2_2)\n   call gee_z(z**3_2)\n-  call gee_z(z**-1_2)\n-  call gee_z(z**-2_2)\n-  call gee_z(z**-3_2)\n+  call gee_z(z**(-1_2))\n+  call gee_z(z**(-2_2))\n+  call gee_z(z**(-3_2))\n   call gee_z(z**huge(0_2))\n-  call gee_z(z**-huge(0_2))\n+  call gee_z(z**(-huge(0_2)))\n   call gee_z(z**(-huge(0_2)-1_2))\n \n   call gee_z(z**0_4)\n   call gee_z(z**1_4)\n   call gee_z(z**2_4)\n   call gee_z(z**3_4)\n-  call gee_z(z**-1_4)\n-  call gee_z(z**-2_4)\n-  call gee_z(z**-3_4)\n+  call gee_z(z**(-1_4))\n+  call gee_z(z**(-2_4))\n+  call gee_z(z**(-3_4))\n   call gee_z(z**huge(0_4))\n-  call gee_z(z**-huge(0_4))\n+  call gee_z(z**(-huge(0_4)))\n   call gee_z(z**(-huge(0_4)-1_4))\n \n   call gee_z(z**0_8)\n   call gee_z(z**1_8)\n   call gee_z(z**2_8)\n   call gee_z(z**3_8)\n-  call gee_z(z**-1_8)\n-  call gee_z(z**-2_8)\n-  call gee_z(z**-3_8)\n+  call gee_z(z**(-1_8))\n+  call gee_z(z**(-2_8))\n+  call gee_z(z**(-3_8))\n   call gee_z(z**huge(0_8))\n-  call gee_z(z**-huge(0_8))\n+  call gee_z(z**(-huge(0_8)))\n   call gee_z(z**(-huge(0_8)-1_8))\n end subroutine foo\n "}, {"sha": "a05986fcb8f87f8cca83b8bedebf9a3c85e455f1", "filename": "gcc/testsuite/gfortran.dg/real_const_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c65fb59c62beb1cbe6db6be2e42c0a9a077915/gcc%2Ftestsuite%2Fgfortran.dg%2Freal_const_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c65fb59c62beb1cbe6db6be2e42c0a9a077915/gcc%2Ftestsuite%2Fgfortran.dg%2Freal_const_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freal_const_3.f90?ref=57c65fb59c62beb1cbe6db6be2e42c0a9a077915", "patch": "@@ -28,7 +28,7 @@ program main\n   write(str,*) 0.0/0.0\n   if (trim(adjustl(str)) .ne. 'NaN') call abort\n \n-  write(str,*) 1.0/-0.\n+  write(str,*) 1.0/(-0.)\n   if (trim(adjustl(str)) .ne. '-Infinity') call abort\n \n   write(str,*) -2.0/0."}, {"sha": "ee16e18a8bb1c5df20600f37fa27215648d88538", "filename": "gcc/testsuite/gfortran.dg/unary_operator.f90", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c65fb59c62beb1cbe6db6be2e42c0a9a077915/gcc%2Ftestsuite%2Fgfortran.dg%2Funary_operator.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c65fb59c62beb1cbe6db6be2e42c0a9a077915/gcc%2Ftestsuite%2Fgfortran.dg%2Funary_operator.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funary_operator.f90?ref=57c65fb59c62beb1cbe6db6be2e42c0a9a077915", "patch": "@@ -0,0 +1,6 @@\n+! { dg-do compile }\n+! PR fortran/34536 -- unary operators following arithmetic ones\n+\n+  real :: x\n+  x = 2.0 ** -3 * 5  ! { dg-warning \"Unary operator following arithmetic operator\" }\n+end\n\\ No newline at end of file"}]}