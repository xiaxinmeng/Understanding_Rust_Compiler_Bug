{"sha": "73624c403d6bc189395af0c8b7c47c0262d38ca0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM2MjRjNDAzZDZiYzE4OTM5NWFmMGM4YjdjNDdjMDI2MmQzOGNhMA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-08-28T03:21:33Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-08-28T03:21:33Z"}, "message": "New file in g77 front end.\n\nFrom-SVN: r14986", "tree": {"sha": "e8f31fcead949ffef7abd61ea9b6295b94c33c5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8f31fcead949ffef7abd61ea9b6295b94c33c5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73624c403d6bc189395af0c8b7c47c0262d38ca0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73624c403d6bc189395af0c8b7c47c0262d38ca0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73624c403d6bc189395af0c8b7c47c0262d38ca0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73624c403d6bc189395af0c8b7c47c0262d38ca0/comments", "author": null, "committer": null, "parents": [{"sha": "795232f720238a9cf7744ee9a0f06f505c28e23b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/795232f720238a9cf7744ee9a0f06f505c28e23b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/795232f720238a9cf7744ee9a0f06f505c28e23b"}], "stats": {"total": 208, "additions": 208, "deletions": 0}, "files": [{"sha": "c73cc42c8561dd6bfa9173f3aef38ccf8f2b2065", "filename": "gcc/f/ansify.c", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73624c403d6bc189395af0c8b7c47c0262d38ca0/gcc%2Ff%2Fansify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73624c403d6bc189395af0c8b7c47c0262d38ca0/gcc%2Ff%2Fansify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fansify.c?ref=73624c403d6bc189395af0c8b7c47c0262d38ca0", "patch": "@@ -0,0 +1,208 @@\n+/* ansify.c\n+   Copyright (C) 1997 Free Software Foundation, Inc.\n+   Contributed by James Craig Burley (burley@gnu.ai.mit.edu).\n+\n+This file is part of GNU Fortran.\n+\n+GNU Fortran is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Fortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Fortran; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+/* From f/proj.h, which uses #error -- not all C compilers\n+   support that, and we want *this* program to be compilable\n+   by pretty much any C compiler.  */\n+\n+#include \"assert.j\"\t\t/* Use gcc's assert.h. */\n+#include <stdio.h>\n+#include <stddef.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+typedef enum\n+  {\n+#if !defined(false) || !defined(true)\n+    false = 0, true = 1,\n+#endif\n+#if !defined(FALSE) || !defined(TRUE)\n+    FALSE = 0, TRUE = 1,\n+#endif\n+    Doggone_Trailing_Comma_Dont_Work = 1\n+  } bool;\n+\n+#define ARRAY_SIZE(a) (sizeof(a)/sizeof(a[0]))\n+\n+#define die_unless(c) \\\n+  do if (!(c)) \\\n+    { \\\n+      fprintf (stderr, \"%s:%lu: \" #c \"\\n\", argv[1], lineno); \\\n+      die (); \\\n+    } \\\n+  while(0)\n+\n+static void\n+die ()\n+{\n+  exit (1);\n+}\n+\n+int\n+main(int argc, char **argv)\n+{\n+  int c;\n+  static unsigned long lineno = 1;\n+\n+  die_unless (argc == 2);\n+\n+  printf (\"\\\n+/* This file is automatically generated from `%s',\\n\\\n+   which you should modify instead.  */\\n\\\n+# 1 \\\"%s\\\"\\n\\\n+\",\n+\t  argv[1], argv[1]);\n+\n+  while ((c = getchar ()) != EOF)\n+    {\n+      switch (c)\n+\t{\n+\tdefault:\n+\t  putchar (c);\n+\t  break;\n+\n+\tcase '\\n':\n+\t  ++lineno;\n+\t  putchar (c);\n+\t  break;\n+\n+\tcase '\"':\n+\t  putchar (c);\n+\t  for (;;)\n+\t    {\n+\t      c = getchar ();\n+\t      die_unless (c != EOF);\n+\t      switch (c)\n+\t\t{\n+\t\tcase '\"':\n+\t\t  putchar (c);\n+\t\t  goto next_char;\n+\n+\t\tcase '\\n':\n+\t\t  putchar ('\\\\');\n+\t\t  putchar ('n');\n+\t\t  putchar ('\\\\');\n+\t\t  putchar ('\\n');\n+\t\t  ++lineno;\n+\t\t  break;\n+\n+\t\tcase '\\\\':\n+\t\t  putchar (c);\n+\t\t  c = getchar ();\n+\t\t  die_unless (c != EOF);\n+\t\t  putchar (c);\n+\t\t  if (c == '\\n')\n+\t\t    ++lineno;\n+\t\t  break;\n+\t\t  \n+\t\tdefault:\n+\t\t  putchar (c);\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t  break;\n+\n+\tcase '\\'':\n+\t  putchar (c);\n+\t  for (;;)\n+\t    {\n+\t      c = getchar ();\n+\t      die_unless (c != EOF);\n+\t      switch (c)\n+\t\t{\n+\t\tcase '\\'':\n+\t\t  putchar (c);\n+\t\t  goto next_char;\n+\t\t  \n+\t\tcase '\\n':\n+\t\t  putchar ('\\\\');\n+\t\t  putchar ('n');\n+\t\t  putchar ('\\\\');\n+\t\t  putchar ('\\n');\n+\t\t  ++lineno;\n+\t\t  break;\n+\t\t  \n+\t\tcase '\\\\':\n+\t\t  putchar (c);\n+\t\t  c = getchar ();\n+\t\t  die_unless (c != EOF);\n+\t\t  putchar (c);\n+\t\t  if (c == '\\n')\n+\t\t    ++lineno;\n+\t\t  break;\n+\t\t  \n+\t\tdefault:\n+\t\t  putchar (c);\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t  break;\n+\n+\tcase '/':\n+\t  putchar (c);\n+\t  c = getchar ();\n+\t  putchar (c);\n+\t  if (c != '*')\n+\t    break;\n+\t  for (;;)\n+\t    {\n+\t      c = getchar ();\n+\t      die_unless (c != EOF);\n+\n+\t      switch (c)\n+\t\t{\n+\t\tcase '\\n':\n+\t\t  ++lineno;\n+\t\t  putchar (c);\n+\t\t  break;\n+\t\t  \n+\t\tcase '*':\n+\t\t  c = getchar ();\n+\t\t  die_unless (c != EOF);\n+\t\t  if (c == '/')\n+\t\t    {\n+\t\t      putchar ('*');\n+\t\t      putchar ('/');\n+\t\t      goto next_char;\n+\t\t    }\n+\t\t  if (c == '\\n')\n+\t\t    {\n+\t\t      ++lineno;\n+\t\t      putchar (c);\n+\t\t    }\n+\t\t  break;\n+\t\t  \n+\t\tdefault:\n+\t\t  /* Don't bother outputting content of comments.  */\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t  break;\n+\t}\n+      \n+    next_char:\n+      ;\n+    }\n+\n+  die_unless (c == EOF);\n+\n+  return 0;\n+}"}]}