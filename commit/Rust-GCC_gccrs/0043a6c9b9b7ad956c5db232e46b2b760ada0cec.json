{"sha": "0043a6c9b9b7ad956c5db232e46b2b760ada0cec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA0M2E2YzliOWI3YWQ5NTZjNWRiMjMyZTQ2YjJiNzYwYWRhMGNlYw==", "commit": {"author": {"name": "Mark Wielaard", "email": "mjw@redhat.com", "date": "2014-09-23T11:06:57Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2014-09-23T11:06:57Z"}, "message": "gcc-gdb-test.exp: Handle old GDB \"short int\" and \"long int\" types.\n\nOld GDB might show short and long as short int and long int. This made\ngcc.dg/guality/const-volatile.c ans restrict.c fail on older GDBs.\nAccording to the patch that changed this in newer versions of GDB\nthis was a bug: https://sourceware.org/ml/gdb-patches/2012-09/msg00455.html\n\nThe patch transforms the types \"short int\" and \"long int\" coming from\nGDB to plain \"short\" and \"long\". And a variant has been added to the\nconst-volatile.c testcase to make sure short and long long are handled\ncorrectly now with older GDB.\n\ngcc/testsuite/ChangeLog\n\n\t* lib/gcc-gdb-test.exp (gdb-test): Transform gdb types \"short int\"\n\tand \"long int\" to plain \"short\" and \"long\".\n\t* gcc.dg/guality/const-volatile.c (struct bar): New struct\n\tcontaining short and long long fields.\n\t(bar): New variable to test the type.\n\nFrom-SVN: r215501", "tree": {"sha": "68e2de7310100b3e2764d6485db8fb53e26ec603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68e2de7310100b3e2764d6485db8fb53e26ec603"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0043a6c9b9b7ad956c5db232e46b2b760ada0cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0043a6c9b9b7ad956c5db232e46b2b760ada0cec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0043a6c9b9b7ad956c5db232e46b2b760ada0cec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0043a6c9b9b7ad956c5db232e46b2b760ada0cec/comments", "author": null, "committer": null, "parents": [{"sha": "6c979aa1bf4cb88c7934cea3453802d5281f7dff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c979aa1bf4cb88c7934cea3453802d5281f7dff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c979aa1bf4cb88c7934cea3453802d5281f7dff"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "e80c48a5b1e605e20ea3616d019af7d7143f01fa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0043a6c9b9b7ad956c5db232e46b2b760ada0cec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0043a6c9b9b7ad956c5db232e46b2b760ada0cec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0043a6c9b9b7ad956c5db232e46b2b760ada0cec", "patch": "@@ -1,3 +1,11 @@\n+2014-09-20  Mark Wielaard  <mjw@redhat.com>\n+\n+\t* lib/gcc-gdb-test.exp (gdb-test): Transform gdb types \"short int\"\n+\tand \"long int\" to plain \"short\" and \"long\".\n+\t* gcc.dg/guality/const-volatile.c (struct bar): New struct\n+\tcontaining short and long long fields.\n+\t(bar): New variable to test the type.\n+\n 2014-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/62155"}, {"sha": "eb45ae5ab35975071abe02bf391294ed11c645d7", "filename": "gcc/testsuite/gcc.dg/guality/const-volatile.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0043a6c9b9b7ad956c5db232e46b2b760ada0cec/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fconst-volatile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0043a6c9b9b7ad956c5db232e46b2b760ada0cec/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fconst-volatile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fconst-volatile.c?ref=0043a6c9b9b7ad956c5db232e46b2b760ada0cec", "patch": "@@ -28,6 +28,16 @@ struct foo\n   const signed char csc;\n };\n \n+struct bar\n+{\n+  short s;\n+  const short cs;\n+  volatile short vs;\n+  const volatile short cvs;\n+  volatile long long vll;\n+};\n+\n+struct bar bar __attribute__((used));\n struct foo foo;\n const struct foo cfoo;\n volatile struct foo vfoo;\n@@ -72,6 +82,7 @@ main (int argc, char **argv)\n \n /* { dg-final { gdb-test 50 \"type:cvip\" \"int * const volatile\" } } */\n \n+/* { dg-final { gdb-test 50 \"type:bar\" \"struct bar { short s; const short cs; volatile short vs; const volatile short cvs; volatile long long vll; }\" } } */\n /* { dg-final { gdb-test 50 \"type:foo\" \"struct foo { const long cli; const signed char csc; }\" } } */\n /* { dg-final { gdb-test 50 \"type:cfoo\" \"const struct foo { const long cli; const signed char csc; }\" } } */\n /* { dg-final { gdb-test 50 \"type:vfoo\" \"volatile struct foo { const long cli; const signed char csc; }\" } } */"}, {"sha": "cc37bf0a06d1d8786f58b7bbed8e7ccc09687b9d", "filename": "gcc/testsuite/lib/gcc-gdb-test.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0043a6c9b9b7ad956c5db232e46b2b760ada0cec/gcc%2Ftestsuite%2Flib%2Fgcc-gdb-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0043a6c9b9b7ad956c5db232e46b2b760ada0cec/gcc%2Ftestsuite%2Flib%2Fgcc-gdb-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-gdb-test.exp?ref=0043a6c9b9b7ad956c5db232e46b2b760ada0cec", "patch": "@@ -111,6 +111,10 @@ proc gdb-test { args } {\n \t    # Squash all extra whitespace/newlines that gdb might use for\n \t    # \"pretty printing\" into one so result is just one line.\n \t    regsub -all {[\\n\\r\\t ]+} $type \" \" type\n+\t    # Old gdb might output \"long int\" instead of just \"long\"\n+\t    # and \"short int\" instead of just \"short\". Canonicalize.\n+\t    regsub -all {\\mlong int\\M} $type \"long\" type\n+\t    regsub -all {\\mshort int\\M} $type \"short\" type\n \t    set expected [lindex $args 2]\n \t    if { $type == $expected } {\n \t\tpass \"$testname\""}]}