{"sha": "d573a303be1bd554d1dff6cc243b30d536987fb4", "node_id": "C_kwDOANBUbNoAKGQ1NzNhMzAzYmUxYmQ1NTRkMWRmZjZjYzI0M2IzMGQ1MzY5ODdmYjQ", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2022-01-17T11:12:00Z"}, "committer": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2022-01-17T11:15:27Z"}, "message": "Fortran: remove new files introduced by mistake\n\nThese two files were introduced by mistake in\n86e3b476d5defaa79c94d40b76cbeec21cd02e5f\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/ieee/signaling_3.f90: Remove file.\n\nlibgfortran/ChangeLog:\n\n\t* ieee/issignaling_fallback.h: Remove file.", "tree": {"sha": "22790fdbd05aa1da2c4a4b45b8a0f574ddd11bc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22790fdbd05aa1da2c4a4b45b8a0f574ddd11bc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d573a303be1bd554d1dff6cc243b30d536987fb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d573a303be1bd554d1dff6cc243b30d536987fb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d573a303be1bd554d1dff6cc243b30d536987fb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d573a303be1bd554d1dff6cc243b30d536987fb4/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a42805deb85975e82c1d87e430b88c9f4b145df4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a42805deb85975e82c1d87e430b88c9f4b145df4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a42805deb85975e82c1d87e430b88c9f4b145df4"}], "stats": {"total": 280, "additions": 0, "deletions": 280}, "files": [{"sha": "45bd9c3599f54e9473a48c81c156ffdcc8bb9265", "filename": "gcc/testsuite/gfortran.dg/ieee/signaling_3.f90", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a42805deb85975e82c1d87e430b88c9f4b145df4/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fsignaling_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a42805deb85975e82c1d87e430b88c9f4b145df4/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fsignaling_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fsignaling_3.f90?ref=a42805deb85975e82c1d87e430b88c9f4b145df4", "patch": "@@ -1,42 +0,0 @@\n-! { dg-do run }\n-!\n-program test\n-  use, intrinsic :: iso_c_binding\n-  use, intrinsic :: ieee_arithmetic\n-  implicit none\n-\n-  real(kind=c_float) :: x\n-  real(kind=c_double) :: y\n-  real(kind=c_long_double) :: z\n-\n-  if (ieee_support_nan(x)) then\n-    x = ieee_value(x, ieee_signaling_nan)\n-    if (ieee_class(x) /= ieee_signaling_nan) stop 100\n-    if (.not. ieee_is_nan(x)) stop 101\n-\n-    x = ieee_value(x, ieee_quiet_nan)\n-    if (ieee_class(x) /= ieee_quiet_nan) stop 103\n-    if (.not. ieee_is_nan(x)) stop 104\n-  end if\n-\n-  if (ieee_support_nan(y)) then\n-    y = ieee_value(y, ieee_signaling_nan)\n-    if (ieee_class(y) /= ieee_signaling_nan) stop 100\n-    if (.not. ieee_is_nan(y)) stop 101\n-\n-    y = ieee_value(y, ieee_quiet_nan)\n-    if (ieee_class(y) /= ieee_quiet_nan) stop 103\n-    if (.not. ieee_is_nan(y)) stop 104\n-  end if\n-\n-  if (ieee_support_nan(z)) then\n-    z = ieee_value(z, ieee_signaling_nan)\n-    if (ieee_class(z) /= ieee_signaling_nan) stop 100\n-    if (.not. ieee_is_nan(z)) stop 101\n-\n-    z = ieee_value(z, ieee_quiet_nan)\n-    if (ieee_class(z) /= ieee_quiet_nan) stop 103\n-    if (.not. ieee_is_nan(z)) stop 104\n-  end if\n-\n-end program test"}, {"sha": "e824cf8c59bde4b2cf58ac3834a3cf5e82f751c1", "filename": "libgfortran/ieee/issignaling_fallback.h", "status": "removed", "additions": 0, "deletions": 238, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a42805deb85975e82c1d87e430b88c9f4b145df4/libgfortran%2Fieee%2Fissignaling_fallback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a42805deb85975e82c1d87e430b88c9f4b145df4/libgfortran%2Fieee%2Fissignaling_fallback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fieee%2Fissignaling_fallback.h?ref=a42805deb85975e82c1d87e430b88c9f4b145df4", "patch": "@@ -1,238 +0,0 @@\n-/* Fallback implementation of issignaling macro.\n-   Copyright (C) 2022 Free Software Foundation, Inc.\n-   Contributed by Francois-Xavier Coudert <fxcoudert@gcc.gnu.org>\n-\n-This file is part of the GNU Fortran runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 3 of the License, or (at your option) any later version.\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#include \"libgfortran.h\"\n-\n-/* This header provides an implementation of the type-generic issignaling macro.\n-   Some points of note:\n-\n-     - This header is only included if the issignaling macro is not defined.\n-     - All targets for which Fortran IEEE modules are supported currently have\n-       the high-order bit of the NaN mantissa clear for signaling (and set\n-       for quiet), as recommended by IEEE.\n-     - We use the __*_IS_IEC_60559__ macros to make sure we only deal with formats\n-       we know. For other floating-point formats, we consider all NaNs as quiet.\n-\n- */\n-\n-typedef union\n-{\n-  float value;\n-  uint32_t word;\n-} ieee_float_shape_type;\n-\n-static inline int\n-__issignalingf (float x)\n-{\n-#if __FLT_IS_IEC_60559__\n-  uint32_t xi;\n-  ieee_float_shape_type u;\n-\n-  u.value = x;\n-  xi = u.word;\n-\n-  xi ^= 0x00400000;\n-  return (xi & 0x7fffffff) > 0x7fc00000;\n-#else\n-  return 0;\n-#endif\n-}\n-\n-\n-typedef union\n-{\n-  double value;\n-  uint64_t word;\n-} ieee_double_shape_type;\n-\n-static inline int\n-__issignaling (double x)\n-{\n-#if __DBL_IS_IEC_60559__\n-  ieee_double_shape_type u;\n-  uint64_t xi;\n-\n-  u.value = x;\n-  xi = u.word;\n-\n-  xi ^= UINT64_C (0x0008000000000000);\n-  return (xi & UINT64_C (0x7fffffffffffffff)) > UINT64_C (0x7ff8000000000000);\n-#else\n-  return 0;\n-#endif\n-}\n-\n-\n-#if __LDBL_DIG__ == __DBL_DIG__\n-\n-/* Long double is the same as double.  */\n-static inline int\n-__issignalingl (long double x)\n-{\n-  return __issignaling (x);\n-}\n-\n-#elif (__LDBL_DIG__ == 18) && __LDBL_IS_IEC_60559__\n-\n-/* Long double is x86 extended type.  */\n-\n-typedef union\n-{\n-  long double value;\n-  struct\n-  {\n-#if __FLOAT_WORD_ORDER == __BIG_ENDIAN\n-    int sign_exponent:16;\n-    unsigned int empty:16;\n-    uint32_t msw;\n-    uint32_t lsw;\n-#elif __FLOAT_WORD_ORDER == __LITTLE_ENDIAN\n-    uint32_t lsw;\n-    uint32_t msw;\n-    int sign_exponent:16;\n-    unsigned int empty:16;\n-#endif\n-  } parts;\n-} ieee_long_double_shape_type;\n-\n-static inline int\n-__issignalingl (long double x)\n-{\n-  int ret;\n-  uint32_t exi, hxi, lxi;\n-  ieee_long_double_shape_type u;\n-\n-  u.value = x;\n-  exi = u.parts.sign_exponent;\n-  hxi = u.parts.msw;\n-  lxi = u.parts.lsw;\n-\n-  /* Pseudo numbers on x86 are always signaling.  */\n-  ret = (exi & 0x7fff) && ((hxi & 0x80000000) == 0);\n-\n-  hxi ^= 0x40000000;\n-  hxi |= (lxi | -lxi) >> 31;\n-  return ret || (((exi & 0x7fff) == 0x7fff) && (hxi > 0xc0000000));\n-}\n-\n-#elif (__LDBL_DIG__ = 33) && __LDBL_IS_IEC_60559__\n-\n-/* Long double is 128-bit type.  */\n-\n-typedef union\n-{\n-  long double value;\n-  struct\n-  {\n-#if __FLOAT_WORD_ORDER == __BIG_ENDIAN\n-    uint64_t msw;\n-    uint64_t lsw;\n-#elif __FLOAT_WORD_ORDER == __LITTLE_ENDIAN\n-    uint64_t lsw;\n-    uint64_t msw;\n-#endif\n-  } parts64;\n-} ieee854_long_double_shape_type;\n-\n-static inline int\n-__issignalingl (long double x)\n-{\n-  uint64_t hxi, lxi;\n-  ieee854_long_double_shape_type u;\n-\n-  u.value = x;\n-  hxi = u.parts64.msw;\n-  lxi = u.parts64.lsw;\n-\n-  hxi ^= UINT64_C (0x0000800000000000);\n-  hxi |= (lxi | -lxi) >> 63;\n-  return (hxi & UINT64_C (0x7fffffffffffffff)) > UINT64_C (0x7fff800000000000);\n-}\n-\n-#else\n-\n-static inline int\n-__issignalingl (long double x)\n-{\n-  return 0;\n-}\n-\n-#endif\n-\n-\n-#if __FLT128_IS_IEC_60559__\n-\n-/* We have a _Float128 type.  */\n-\n-typedef union\n-{\n-  __float128 value;\n-  struct\n-  {\n-#if __FLOAT_WORD_ORDER == __BIG_ENDIAN\n-    uint64_t msw;\n-    uint64_t lsw;\n-#elif __FLOAT_WORD_ORDER == __LITTLE_ENDIAN\n-    uint64_t lsw;\n-    uint64_t msw;\n-#endif\n-  } parts64;\n-} ieee854_float128_shape_type;\n-\n-static inline int\n-__issignalingf128 (__float128 x)\n-{\n-  uint64_t hxi, lxi;\n-  ieee854_float128_shape_type u;\n-\n-  u.value = x;\n-  hxi = u.parts64.msw;\n-  lxi = u.parts64.lsw;\n-\n-  hxi ^= UINT64_C (0x0000800000000000);\n-  hxi |= (lxi | -lxi) >> 63;\n-  return (hxi & UINT64_C (0x7fffffffffffffff)) > UINT64_C (0x7fff800000000000);\n-}\n-\n-#endif\n-\n-\n-/* Define the type-generic macro based on the functions above.  */\n-\n-#if __FLT128_IS_IEC_60559__\n-# define issignaling(X) \\\n-  _Generic ((X), \\\n-\t    __float128: __issignalingf128, \\\n-\t    float: __issignalingf, \\\n-\t    double: __issignaling, \\\n-\t    long double: __issignalingl)(X)\n-#else\n-# define issignaling(X) \\\n-  _Generic ((X), \\\n-\t    float: __issignalingf, \\\n-\t    double: __issignaling, \\\n-\t    long double: __issignalingl)(X)\n-#endif\n-"}]}