{"sha": "a55d6091230ae8d0d6f6c20dcc55158f6705090e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU1ZDYwOTEyMzBhZThkMGQ2ZjZjMjBkY2M1NTE1OGY2NzA1MDkwZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-07-29T11:38:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-07-29T11:38:46Z"}, "message": "re PR tree-optimization/91257 (Compile-time and memory-hog hog)\n\n2019-07-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/91257\n\t* tree-vrp.c (operand_less_p): Avoid dispatching to fold for\n\tmost cases, instead call compare_values which handles the\n\tsymbolic ranges we handle specially.\n\t(compare_values_warnv): Do not call operand_less_p but open-code\n\tthe effective fold calls.  Avoid converting so much.\n\nFrom-SVN: r273876", "tree": {"sha": "cec10398d4ae477966d760d992c57c79ff102569", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cec10398d4ae477966d760d992c57c79ff102569"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a55d6091230ae8d0d6f6c20dcc55158f6705090e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a55d6091230ae8d0d6f6c20dcc55158f6705090e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a55d6091230ae8d0d6f6c20dcc55158f6705090e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a55d6091230ae8d0d6f6c20dcc55158f6705090e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc5e7d2ac42fbc9169458095f4fff257e4a80d03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5e7d2ac42fbc9169458095f4fff257e4a80d03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc5e7d2ac42fbc9169458095f4fff257e4a80d03"}], "stats": {"total": 77, "additions": 46, "deletions": 31}, "files": [{"sha": "d3089062e368184a174f580bf5c6e7bbcbb22a39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a55d6091230ae8d0d6f6c20dcc55158f6705090e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a55d6091230ae8d0d6f6c20dcc55158f6705090e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a55d6091230ae8d0d6f6c20dcc55158f6705090e", "patch": "@@ -1,3 +1,12 @@\n+2019-07-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91257\n+\t* tree-vrp.c (operand_less_p): Avoid dispatching to fold for\n+\tmost cases, instead call compare_values which handles the\n+\tsymbolic ranges we handle specially.\n+\t(compare_values_warnv): Do not call operand_less_p but open-code\n+\tthe effective fold calls.  Avoid converting so much.\n+\n 2019-07-29  Martin Liska  <mliska@suse.cz>\n \n \t* tree-ssa-dce.c (eliminate_unnecessary_stmts): Do not"}, {"sha": "1b20489f7b6bb1c586bcd31ee2515f86119899e8", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 37, "deletions": 31, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a55d6091230ae8d0d6f6c20dcc55158f6705090e/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a55d6091230ae8d0d6f6c20dcc55158f6705090e/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=a55d6091230ae8d0d6f6c20dcc55158f6705090e", "patch": "@@ -909,22 +909,17 @@ operand_less_p (tree val, tree val2)\n   /* LT is folded faster than GE and others.  Inline the common case.  */\n   if (TREE_CODE (val) == INTEGER_CST && TREE_CODE (val2) == INTEGER_CST)\n     return tree_int_cst_lt (val, val2);\n+  else if (TREE_CODE (val) == SSA_NAME && TREE_CODE (val2) == SSA_NAME)\n+    return val == val2 ? 0 : -2;\n   else\n     {\n-      tree tcmp;\n-\n-      fold_defer_overflow_warnings ();\n-\n-      tcmp = fold_binary_to_constant (LT_EXPR, boolean_type_node, val, val2);\n-\n-      fold_undefer_and_ignore_overflow_warnings ();\n-\n-      if (!tcmp\n-\t  || TREE_CODE (tcmp) != INTEGER_CST)\n-\treturn -2;\n-\n-      if (!integer_zerop (tcmp))\n+      int cmp = compare_values (val, val2);\n+      if (cmp == -1)\n \treturn 1;\n+      else if (cmp == 0 || cmp == 1)\n+\treturn 0;\n+      else\n+\treturn -2;\n     }\n \n   return 0;\n@@ -958,8 +953,8 @@ compare_values_warnv (tree val1, tree val2, bool *strict_overflow_p)\n \n   /* Convert the two values into the same type.  This is needed because\n      sizetype causes sign extension even for unsigned types.  */\n-  val2 = fold_convert (TREE_TYPE (val1), val2);\n-  STRIP_USELESS_TYPE_CONVERSION (val2);\n+  if (!useless_type_conversion_p (TREE_TYPE (val1), TREE_TYPE (val2)))\n+    val2 = fold_convert (TREE_TYPE (val1), val2);\n \n   const bool overflow_undefined\n     = INTEGRAL_TYPE_P (TREE_TYPE (val1))\n@@ -1067,32 +1062,43 @@ compare_values_warnv (tree val1, tree val2, bool *strict_overflow_p)\n     }\n   else\n     {\n-      tree t;\n+      if (TREE_CODE (val1) == INTEGER_CST && TREE_CODE (val2) == INTEGER_CST)\n+\t{\n+\t  /* We cannot compare overflowed values.  */\n+\t  if (TREE_OVERFLOW (val1) || TREE_OVERFLOW (val2))\n+\t    return -2;\n+\n+\t  return tree_int_cst_compare (val1, val2);\n+\t}\n \n       /* First see if VAL1 and VAL2 are not the same.  */\n-      if (val1 == val2 || operand_equal_p (val1, val2, 0))\n+      if (operand_equal_p (val1, val2, 0))\n \treturn 0;\n \n+      fold_defer_overflow_warnings ();\n+\n       /* If VAL1 is a lower address than VAL2, return -1.  */\n-      if (operand_less_p (val1, val2) == 1)\n-\treturn -1;\n+      tree t = fold_binary_to_constant (LT_EXPR, boolean_type_node, val1, val2);\n+      if (t && integer_onep (t))\n+\t{\n+\t  fold_undefer_and_ignore_overflow_warnings ();\n+\t  return -1;\n+\t}\n \n       /* If VAL1 is a higher address than VAL2, return +1.  */\n-      if (operand_less_p (val2, val1) == 1)\n-\treturn 1;\n-\n-      /* If VAL1 is different than VAL2, return +2.\n-\t For integer constants we either have already returned -1 or 1\n-\t or they are equivalent.  We still might succeed in proving\n-\t something about non-trivial operands.  */\n-      if (TREE_CODE (val1) != INTEGER_CST\n-\t  || TREE_CODE (val2) != INTEGER_CST)\n+      t = fold_binary_to_constant (LT_EXPR, boolean_type_node, val2, val1);\n+      if (t && integer_onep (t))\n \t{\n-          t = fold_binary_to_constant (NE_EXPR, boolean_type_node, val1, val2);\n-\t  if (t && integer_onep (t))\n-\t    return 2;\n+\t  fold_undefer_and_ignore_overflow_warnings ();\n+\t  return 1;\n \t}\n \n+      /* If VAL1 is different than VAL2, return +2.  */\n+      t = fold_binary_to_constant (NE_EXPR, boolean_type_node, val1, val2);\n+      fold_undefer_and_ignore_overflow_warnings ();\n+      if (t && integer_onep (t))\n+\treturn 2;\n+\n       return -2;\n     }\n }"}]}