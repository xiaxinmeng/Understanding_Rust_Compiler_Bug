{"sha": "89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlmMWE2ZWNjYzY3MGE1ZDQxZDdhYTJlOGJkYmU1NzkzZDY2MmVkYQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-12-16T02:46:31Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-12-16T02:46:31Z"}, "message": "re PR c++/10926 (ICE in build_delete when trying to declare template destructor)\n\n\tPR c++/10926\n\t* decl2.c (grokfield): Robustify.\n\n\tPR c++/11116\n\t* parser.c (cp_parser_throw_expression): Determine whether or not\n\tan assignment-expression is present by doing one-token lookahead.\n\n\tPR c++/10926\n\t* g++.dg/template/error9.C: New test.\n\n\tPR c++/11116\n\t* g++.dg/template/error8.C: New test.\n\nFrom-SVN: r74664", "tree": {"sha": "666879933d74c747ef939964a372c4a7812082cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/666879933d74c747ef939964a372c4a7812082cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda/comments", "author": null, "committer": null, "parents": [{"sha": "040fc928031ee65c0eeed2ed20e024179d02d9cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/040fc928031ee65c0eeed2ed20e024179d02d9cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/040fc928031ee65c0eeed2ed20e024179d02d9cf"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "2c4b0526f4955ff13026dc64fea24c4f1989245f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda", "patch": "@@ -1,5 +1,12 @@\n 2003-12-15  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/10926\n+\t* decl2.c (grokfield): Robustify.\n+\n+\tPR c++/11116\n+\t* parser.c (cp_parser_throw_expression): Determine whether or not\n+\tan assignment-expression is present by doing one-token lookahead.\n+\n \tPR c++/13269\n \t* parser.c (cp_parser_function_definition_after_declarator): Stop\n \tscanning tokens when reaching EOF."}, {"sha": "b9034a1f1c0ba97c9d053a6bae0a54090c0034cb", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda", "patch": "@@ -882,10 +882,8 @@ grokfield (tree declarator, tree declspecs, tree init, tree asmspec_tree,\n     init = NULL_TREE;\n \n   value = grokdeclarator (declarator, declspecs, FIELD, init != 0, &attrlist);\n-  if (! value || value == error_mark_node)\n+  if (! value || error_operand_p (value))\n     /* friend or constructor went bad.  */\n-    return value;\n-  if (TREE_TYPE (value) == error_mark_node)\n     return error_mark_node;\n \n   if (TREE_CODE (value) == TYPE_DECL && init)\n@@ -981,7 +979,11 @@ grokfield (tree declarator, tree declspecs, tree init, tree asmspec_tree,\n \n   if (processing_template_decl\n       && (TREE_CODE (value) == VAR_DECL || TREE_CODE (value) == FUNCTION_DECL))\n-    value = push_template_decl (value);\n+    {\n+      value = push_template_decl (value);\n+      if (error_operand_p (value))\n+\treturn error_mark_node;\n+    }\n \n   if (attrlist)\n     cplus_decl_attributes (&value, attrlist, 0);"}, {"sha": "14923b17ce4e72e6f45ff4a44945da1994d6bc63", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda", "patch": "@@ -12784,15 +12784,21 @@ static tree\n cp_parser_throw_expression (cp_parser* parser)\n {\n   tree expression;\n+  cp_token* token;\n \n   cp_parser_require_keyword (parser, RID_THROW, \"`throw'\");\n-  /* We can't be sure if there is an assignment-expression or not.  */\n-  cp_parser_parse_tentatively (parser);\n-  /* Try it.  */\n-  expression = cp_parser_assignment_expression (parser);\n-  /* If it didn't work, this is just a rethrow.  */\n-  if (!cp_parser_parse_definitely (parser))\n+  token = cp_lexer_peek_token (parser->lexer);\n+  /* Figure out whether or not there is an assignment-expression\n+     following the \"throw\" keyword.  */\n+  if (token->type == CPP_COMMA\n+      || token->type == CPP_SEMICOLON\n+      || token->type == CPP_CLOSE_PAREN\n+      || token->type == CPP_CLOSE_SQUARE\n+      || token->type == CPP_CLOSE_BRACE\n+      || token->type == CPP_COLON)\n     expression = NULL_TREE;\n+  else\n+    expression = cp_parser_assignment_expression (parser);\n \n   return build_throw (expression);\n }"}, {"sha": "b3e3e1aa845d7dd19bfde89ab60d91f3512af876", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda", "patch": "@@ -1,3 +1,11 @@\n+2003-12-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/10926\n+\t* g++.dg/template/error9.C: New test.\n+\n+\tPR c++/11116\n+\t* g++.dg/template/error8.C: New test.\n+\n 2003-12-15  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/13400"}, {"sha": "30872a2e953da2dc147deab04155ea46bb7b212c", "filename": "gcc/testsuite/g++.dg/template/error8.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror8.C?ref=89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/11116\n+\n+template <typename T> struct S {};\n+\n+void f() {\n+  throw S (); // { dg-error \"template\" }\n+}"}, {"sha": "60f550a7ca64e5c27b43d84e86bb2e3de67efd12", "filename": "gcc/testsuite/g++.dg/template/error9.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror9.C?ref=89f1a6eccc670a5d41d7aa2e8bdbe5793d662eda", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/10926\n+\n+struct Foo\n+{\n+    template <int i>\n+    ~Foo(); // { dg-error \"\" }\n+};"}]}