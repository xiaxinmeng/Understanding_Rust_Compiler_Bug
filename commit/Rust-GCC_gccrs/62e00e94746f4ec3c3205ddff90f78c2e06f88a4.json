{"sha": "62e00e94746f4ec3c3205ddff90f78c2e06f88a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJlMDBlOTQ3NDZmNGVjM2MzMjA1ZGRmZjkwZjc4YzJlMDZmODhhNA==", "commit": {"author": {"name": "Dirk Mueller", "email": "dmueller@suse.de", "date": "2007-03-14T19:33:17Z"}, "committer": {"name": "Dirk Mueller", "email": "mueller@gcc.gnu.org", "date": "2007-03-14T19:33:17Z"}, "message": "c-common.h (empty_body_warning): Rename to empty_if_body_warning.\n\n2007-03-14  Dirk Mueller  <dmueller@suse.de>\n\n        * c-common.h (empty_body_warning): Rename to empty_if_body_warning.\n        * c-common.c (empty_if_body_warning): Rephrase diagnostic message.\n        * c-parser.c (c_parser_if_body): Always add an empty statement in case\n        of empty body.\n        * c-parser.c (c_parser_do_statement): Warn about empty body in\n        do/while statement.\n        * c-typeck (c_finish_if_stmt): Call empty_if_body_warning.\n        * doc/invoke.texi (-Wempty-body): Update documentation.\n\n        * cp/semantics.c (c_finish_if_stmt): Call empty_if_body_warning.\n        (finish_do_body): Warn about empty body in do/while statement.\n\n        * g++.dg/warn/do-empty.C: New.\n        * gcc.dg/do-empty.c: New.\n        * gcc.dg/if-empty-1.c: Update.\n        * gcc.dg/20001116-1.c: Update.\n        * gcc.dg/pr23165.c: Update.\n\nFrom-SVN: r122928", "tree": {"sha": "6eaa29a86e707ec20730717f602d38ed322cf784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6eaa29a86e707ec20730717f602d38ed322cf784"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62e00e94746f4ec3c3205ddff90f78c2e06f88a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e00e94746f4ec3c3205ddff90f78c2e06f88a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e00e94746f4ec3c3205ddff90f78c2e06f88a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/comments", "author": null, "committer": null, "parents": [{"sha": "adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adea5e16e4e86438f97cfdd3fabb5654c45f9d61"}], "stats": {"total": 120, "additions": 91, "deletions": 29}, "files": [{"sha": "1259974f21fa2aeed2f9852aeac510ce6174441e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62e00e94746f4ec3c3205ddff90f78c2e06f88a4", "patch": "@@ -1,3 +1,14 @@\n+2007-03-14  Dirk Mueller  <dmueller@suse.de>\n+\n+\t* c-common.h (empty_body_warning): Rename to empty_if_body_warning.\n+\t* c-common.c (empty_if_body_warning): Rephrase diagnostic message.\n+\t* c-parser.c (c_parser_if_body): Always add an empty statement in case\n+\tof empty body.\n+\t* c-parser.c (c_parser_do_statement): Warn about empty body in\n+\tdo/while statement.\n+\t* c-typeck (c_finish_if_stmt): Call empty_if_body_warning.\n+\t* doc/invoke.texi (-Wempty-body): Update documentation.\n+\n 2007-03-14  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c/21438"}, {"sha": "36b87eba20620aae32c881b055c72d4d30910bb8", "filename": "gcc/c-common.c", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=62e00e94746f4ec3c3205ddff90f78c2e06f88a4", "patch": "@@ -1056,26 +1056,23 @@ strict_aliasing_warning (tree otype, tree type, tree expr)\n    block.  */\n \n void\n-empty_body_warning (tree inner_then, tree inner_else)\n+empty_if_body_warning (tree inner_then, tree inner_else)\n {\n-  if (warn_empty_body)\n-    {\n-      if (TREE_CODE (inner_then) == STATEMENT_LIST\n-\t  && STATEMENT_LIST_TAIL (inner_then))\n-\tinner_then = STATEMENT_LIST_TAIL (inner_then)->stmt;\n+  if (TREE_CODE (inner_then) == STATEMENT_LIST\n+      && STATEMENT_LIST_TAIL (inner_then))\n+    inner_then = STATEMENT_LIST_TAIL (inner_then)->stmt;\n \n-      if (inner_else && TREE_CODE (inner_else) == STATEMENT_LIST\n-\t  && STATEMENT_LIST_TAIL (inner_else))\n-\tinner_else = STATEMENT_LIST_TAIL (inner_else)->stmt;\n+  if (inner_else && TREE_CODE (inner_else) == STATEMENT_LIST\n+      && STATEMENT_LIST_TAIL (inner_else))\n+    inner_else = STATEMENT_LIST_TAIL (inner_else)->stmt;\n \n-      if (IS_EMPTY_STMT (inner_then) && !inner_else)\n-\twarning (OPT_Wempty_body, \"%Hempty body in an if-statement\",\n-\t\t EXPR_LOCUS (inner_then));\n+  if (IS_EMPTY_STMT (inner_then) && !inner_else)\n+    warning (OPT_Wempty_body, \"%Hsuggest braces around empty body \"\n+             \"in an %<if%> statement\", EXPR_LOCUS (inner_then));\n \n-      if (inner_else && IS_EMPTY_STMT (inner_else))\n-\twarning (OPT_Wempty_body, \"%Hempty body in an else-statement\",\n-\t\t EXPR_LOCUS (inner_else));\n-   }\n+  else if (inner_else && IS_EMPTY_STMT (inner_else))\n+    warning (OPT_Wempty_body, \"%Hsuggest braces around empty body \"\n+             \"in an %<else%> statement\", EXPR_LOCUS (inner_else));\n }\n \n /* Warn for unlikely, improbable, or stupid DECL declarations"}, {"sha": "08ce4600ee69d911d1571ca744efcf0a46636995", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=62e00e94746f4ec3c3205ddff90f78c2e06f88a4", "patch": "@@ -670,7 +670,7 @@ extern tree fix_string_type (tree);\n struct varray_head_tag;\n extern void constant_expression_warning (tree);\n extern void strict_aliasing_warning (tree, tree, tree);\n-extern void empty_body_warning (tree, tree);\n+extern void empty_if_body_warning (tree, tree);\n extern tree convert_and_check (tree, tree);\n extern void overflow_warning (tree);\n extern void warn_logical_operator (enum tree_code, tree, tree);"}, {"sha": "b1f40a47faa88d0134c16041d4d63a97c0b5e0db", "filename": "gcc/c-parser.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=62e00e94746f4ec3c3205ddff90f78c2e06f88a4", "patch": "@@ -3844,7 +3844,7 @@ c_parser_if_body (c_parser *parser, bool *if_p)\n \t     && c_parser_peek_2nd_token (parser)->type == CPP_COLON))\n     c_parser_label (parser);\n   *if_p = c_parser_next_token_is_keyword (parser, RID_IF);\n-  if (warn_empty_body && c_parser_next_token_is (parser, CPP_SEMICOLON))\n+  if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n     add_stmt (build_empty_stmt ());\n   c_parser_statement_after_labels (parser);\n   return c_end_compound_stmt (block, flag_isoc99);\n@@ -3953,6 +3953,9 @@ c_parser_do_statement (c_parser *parser)\n   location_t loc;\n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_DO));\n   c_parser_consume_token (parser);\n+  if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n+    warning (OPT_Wempty_body,\n+             \"suggest braces around empty body in %<do%> statement\");\n   block = c_begin_compound_stmt (flag_isoc99);\n   loc = c_parser_peek_token (parser)->location;\n   save_break = c_break_label;"}, {"sha": "6986405e8a98e9f2c1d00129d35b58b1d4f35c03", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=62e00e94746f4ec3c3205ddff90f78c2e06f88a4", "patch": "@@ -7229,7 +7229,7 @@ c_finish_if_stmt (location_t if_locus, tree cond, tree then_block,\n \t\t  &if_locus);\n     }\n \n-  empty_body_warning (then_block, else_block);\n+  empty_if_body_warning (then_block, else_block);\n \n   stmt = build3 (COND_EXPR, void_type_node, cond, then_block, else_block);\n   SET_EXPR_LOCATION (stmt, if_locus);"}, {"sha": "1409d2b974ae2623ca761c219d37794cc8eec59a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=62e00e94746f4ec3c3205ddff90f78c2e06f88a4", "patch": "@@ -1,3 +1,8 @@\n+2007-03-14  Dirk Mueller  <dmueller@suse.de>\n+\n+\t* cp/semantics.c (c_finish_if_stmt): Call empty_if_body_warning.\n+\t(finish_do_body): Warn about empty body in do/while statement.\n+\n 2007-03-14  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* class.c (warn_hidden): Add OPT_Woverloaded_virtual to warning."}, {"sha": "e2603531e881e796aa3d6ae9bc18278ca8a8b5e2", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=62e00e94746f4ec3c3205ddff90f78c2e06f88a4", "patch": "@@ -701,7 +701,7 @@ finish_if_stmt (tree if_stmt)\n   TREE_CHAIN (if_stmt) = NULL;\n   add_stmt (do_poplevel (scope));\n   finish_stmt ();\n-  empty_body_warning (THEN_CLAUSE (if_stmt), ELSE_CLAUSE (if_stmt));\n+  empty_if_body_warning (THEN_CLAUSE (if_stmt), ELSE_CLAUSE (if_stmt));\n }\n \n /* Begin a while-statement.  Returns a newly created WHILE_STMT if\n@@ -754,7 +754,14 @@ begin_do_stmt (void)\n void\n finish_do_body (tree do_stmt)\n {\n-  DO_BODY (do_stmt) = pop_stmt_list (DO_BODY (do_stmt));\n+  tree body = DO_BODY (do_stmt) = pop_stmt_list (DO_BODY (do_stmt));\n+\n+  if (TREE_CODE (body) == STATEMENT_LIST && STATEMENT_LIST_TAIL (body))\n+    body = STATEMENT_LIST_TAIL (body)->stmt;\n+\n+  if (IS_EMPTY_STMT (body))\n+    warning (OPT_Wempty_body,\n+            \"suggest explicit braces around empty body in %<do%> statement\");\n }\n \n /* Finish a do-statement, which may be given by DO_STMT, and whose"}, {"sha": "fa9ed7f4d2b2592f3ac5a8e99605325041848ada", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=62e00e94746f4ec3c3205ddff90f78c2e06f88a4", "patch": "@@ -3136,8 +3136,9 @@ functions.  This warning can be independently controlled by\n @option{-Wmissing-parameter-type}.\n \n @item\n-An empty body occurs in an @samp{if} or @samp{else} statement. This\n-warning can be independently controlled by @option{-Wempty-body}.\n+An empty body occurs in an @samp{if}, @samp{else} or\n+@samp{do while} statement. This warning can be independently\n+controlled by @option{-Wempty-body}.\n \n @item\n A pointer is compared against integer zero with @samp{<}, @samp{<=},\n@@ -3397,8 +3398,8 @@ changed by the conversion like in @code{abs (2.0)}.\n \n @item -Wempty-body\n @opindex Wempty-body\n-An empty body occurs in an @samp{if} or @samp{else} statement. \n-This warning is also enabled by @option{-Wextra}.\n+An empty body occurs in an @samp{if}, @samp{else} or @samp{do while}\n+statement.  This warning is also enabled by @option{-Wextra}.\n \n @item -Wsign-compare\n @opindex Wsign-compare"}, {"sha": "e0d27c55562265cf937b4965414a376e32164c68", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62e00e94746f4ec3c3205ddff90f78c2e06f88a4", "patch": "@@ -1,3 +1,11 @@\n+2007-03-14  Dirk Mueller  <dmueller@suse.de>\n+\n+\t* g++.dg/warn/do-empty.C: New.\n+\t* gcc.dg/do-empty.c: New.\n+\t* gcc.dg/if-empty-1.c: Update.\n+\t* gcc.dg/20001116-1.c: Update.\n+\t* gcc.dg/pr23165.c: Update.\n+\n 2007-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gfortran.dg/module_implicit_conversion.f90: New test."}, {"sha": "350261d48ed831fc5b5189fa6424bc3bbf18c6ee", "filename": "gcc/testsuite/g++.dg/warn/do-empty.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdo-empty.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdo-empty.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdo-empty.C?ref=62e00e94746f4ec3c3205ddff90f78c2e06f88a4", "patch": "@@ -0,0 +1,15 @@\n+/* Test diagnostics for empty bodies in do / while.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wempty-body\" } */\n+\n+void\n+f (int x)\n+{\n+  do\n+    ; /* { dg-warning \"empty body in\" } */\n+  while (x--);\n+\n+  do\n+  {} /* { dg-bogus \"empty body in\" } */\n+  while (++x < 10);\n+}"}, {"sha": "8b1e919c66fbcc7bc17077ff601239e195b222e8", "filename": "gcc/testsuite/gcc.dg/20001116-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Ftestsuite%2Fgcc.dg%2F20001116-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Ftestsuite%2Fgcc.dg%2F20001116-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20001116-1.c?ref=62e00e94746f4ec3c3205ddff90f78c2e06f88a4", "patch": "@@ -7,5 +7,5 @@\n void foo (int x)\n {\n   if (x)\n-    ;\t/* { dg-warning \"empty body in an if-statement\" } */\n+    ;\t/* { dg-warning \"empty body in an\" } */\n }"}, {"sha": "350261d48ed831fc5b5189fa6424bc3bbf18c6ee", "filename": "gcc/testsuite/gcc.dg/do-empty.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Ftestsuite%2Fgcc.dg%2Fdo-empty.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Ftestsuite%2Fgcc.dg%2Fdo-empty.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdo-empty.c?ref=62e00e94746f4ec3c3205ddff90f78c2e06f88a4", "patch": "@@ -0,0 +1,15 @@\n+/* Test diagnostics for empty bodies in do / while.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wempty-body\" } */\n+\n+void\n+f (int x)\n+{\n+  do\n+    ; /* { dg-warning \"empty body in\" } */\n+  while (x--);\n+\n+  do\n+  {} /* { dg-bogus \"empty body in\" } */\n+  while (++x < 10);\n+}"}, {"sha": "a129832c337adb8aa523a560eb66d35b06099141", "filename": "gcc/testsuite/gcc.dg/if-empty-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Ftestsuite%2Fgcc.dg%2Fif-empty-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Ftestsuite%2Fgcc.dg%2Fif-empty-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fif-empty-1.c?ref=62e00e94746f4ec3c3205ddff90f78c2e06f88a4", "patch": "@@ -7,15 +7,15 @@ void\n f (int x)\n {\n   if (x)\n-    ; /* { dg-warning \"warning: empty body in an if-statement\" } */\n+    ; /* { dg-warning \"warning: empty body in an\" } */\n   if (x)\n     ; /* By design we don't warn in this case.  */\n   else\n     (void)0;\n   if (x)\n     (void)0;\n   else\n-    ; /* { dg-warning \"warning: empty body in an else-statement\" } */\n+    ; /* { dg-warning \"warning: empty body in an\" } */\n   if (x)\n     (void)0;\n   else"}, {"sha": "49194a1462d14ef3034ad68bd3efd694f808fcbd", "filename": "gcc/testsuite/gcc.dg/pr23165.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23165.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e00e94746f4ec3c3205ddff90f78c2e06f88a4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23165.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23165.c?ref=62e00e94746f4ec3c3205ddff90f78c2e06f88a4", "patch": "@@ -3,7 +3,7 @@\n void foo (void)\n {\n \tif (0)\n-\t  a: ; /* { dg-warning \"empty body in an if-statement\" } */\n+\t  a: ; /* { dg-warning \"empty body in an\" } */\n \n \n }"}]}