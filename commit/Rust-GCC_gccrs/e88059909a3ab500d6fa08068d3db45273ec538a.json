{"sha": "e88059909a3ab500d6fa08068d3db45273ec538a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg4MDU5OTA5YTNhYjUwMGQ2ZmEwODA2OGQzZGI0NTI3M2VjNTM4YQ==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2005-01-11T20:22:38Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2005-01-11T20:22:38Z"}, "message": "hex.c (hex_value): Group 'unsigned int' together to get correct markup.\n\n* hex.c (hex_value): Group 'unsigned int' together to get correct\nmarkup.\n* functions.texi: Regenerated.\n\nFrom-SVN: r93196", "tree": {"sha": "3a6c9e90955ba818f1b639ec63dd07805f3c431c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a6c9e90955ba818f1b639ec63dd07805f3c431c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e88059909a3ab500d6fa08068d3db45273ec538a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e88059909a3ab500d6fa08068d3db45273ec538a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e88059909a3ab500d6fa08068d3db45273ec538a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e88059909a3ab500d6fa08068d3db45273ec538a/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30e8a59c742c7fe9e5f622371564d40ad46a8a68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30e8a59c742c7fe9e5f622371564d40ad46a8a68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30e8a59c742c7fe9e5f622371564d40ad46a8a68"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "adbb2498124c32cddc22bdf337a1e70e8d8f27ab", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88059909a3ab500d6fa08068d3db45273ec538a/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88059909a3ab500d6fa08068d3db45273ec538a/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=e88059909a3ab500d6fa08068d3db45273ec538a", "patch": "@@ -1,3 +1,9 @@\n+2005-01-11  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* hex.c (hex_value): Group 'unsigned int' together to get correct\n+\tmarkup.\n+\t* functions.texi: Regenerated.\n+\t\n 2004-12-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* Makefile.in: Undo to 2004-12-17."}, {"sha": "b6e8e7acb813fe22784ece8097162fa821082628", "filename": "libiberty/functions.texi", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88059909a3ab500d6fa08068d3db45273ec538a/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88059909a3ab500d6fa08068d3db45273ec538a/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=e88059909a3ab500d6fa08068d3db45273ec538a", "patch": "@@ -196,7 +196,7 @@ argument vector.\n \n @end deftypefn\n \n-@c strerror.c:566\n+@c strerror.c:567\n @deftypefn Extension int errno_max (void)\n \n Returns the maximum @code{errno} value for which a corresponding\n@@ -359,7 +359,7 @@ or zero if it is not.  Note that the value you pass will be cast to\n @end deftypefn\n \n @c hex.c:47\n-@deftypefn Extension unsigned int hex_value (int @var{c})\n+@deftypefn Extension {unsigned int} hex_value (int @var{c})\n \n Returns the numeric equivalent of the given character when interpreted\n as a hexidecimal digit.  The result is undefined if you pass an\n@@ -649,7 +649,7 @@ text of the error message with an optional argument (if not needed,\n \n @end deftypefn\n \n-@c strsignal.c:547\n+@c strsignal.c:546\n @deftypefn Supplemental void psignal (unsigned @var{signo}, char *@var{message})\n \n Print @var{message} to the standard error, followed by a colon,\n@@ -746,7 +746,7 @@ environment.  This implementation is not safe for multithreaded code.\n \n @end deftypefn\n \n-@c strsignal.c:353\n+@c strsignal.c:352\n @deftypefn Extension int signo_max (void)\n \n Returns the maximum signal value for which a corresponding symbolic\n@@ -837,7 +837,7 @@ Returns a pointer to a copy of @var{s} in memory obtained from\n \n @end deftypefn\n \n-@c strerror.c:670\n+@c strerror.c:671\n @deftypefn Replacement {const char*} strerrno (int @var{errnum})\n \n Given an error number returned from a system call (typically returned\n@@ -857,7 +857,7 @@ valid until the next call to @code{strerrno}.\n \n @end deftypefn\n \n-@c strerror.c:602\n+@c strerror.c:603\n @deftypefn Supplemental char* strerror (int @var{errnoval})\n \n Maps an @code{errno} number to an error message string, the contents\n@@ -902,7 +902,7 @@ null character, the results are undefined.\n \n @end deftypefn\n \n-@c strsignal.c:388\n+@c strsignal.c:387\n @deftypefn Supplemental {const char *} strsignal (int @var{signo})\n \n Maps an signal number to an signal message string, the contents of\n@@ -923,7 +923,7 @@ call to @code{strsignal}.\n \n @end deftypefn\n \n-@c strsignal.c:452\n+@c strsignal.c:451\n @deftypefn Extension {const char*} strsigno (int @var{signo})\n \n Given an signal number, returns a pointer to a string containing the\n@@ -965,7 +965,7 @@ the location referenced by @var{endptr}.\n \n @end deftypefn\n \n-@c strerror.c:730\n+@c strerror.c:731\n @deftypefn Extension int strtoerrno (const char *@var{name})\n \n Given the symbolic name of a error number (e.g., @code{EACCES}), map it\n@@ -989,7 +989,7 @@ that the converted value is unsigned.\n \n @end deftypefn\n \n-@c strsignal.c:507\n+@c strsignal.c:506\n @deftypefn Extension int strtosigno (const char *@var{name})\n \n Given the symbolic name of a signal, map it to a signal number.  If no\n@@ -1008,7 +1008,7 @@ not be used in new projects.  Use @code{mkstemp} instead.\n \n @end deftypefn\n \n-@c vasprintf.c:48\n+@c vasprintf.c:51\n @deftypefn Extension int vasprintf (char **@var{resptr}, const char *@var{format}, va_list @var{args})\n \n Like @code{vsprintf}, but instead of passing a pointer to a buffer,"}, {"sha": "d30f199224e976b1b71e6c286e736827852a3c67", "filename": "libiberty/hex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88059909a3ab500d6fa08068d3db45273ec538a/libiberty%2Fhex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88059909a3ab500d6fa08068d3db45273ec538a/libiberty%2Fhex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fhex.c?ref=e88059909a3ab500d6fa08068d3db45273ec538a", "patch": "@@ -44,7 +44,7 @@ or zero if it is not.  Note that the value you pass will be cast to\n \n @end deftypefn\n \n-@deftypefn Extension unsigned int hex_value (int @var{c})\n+@deftypefn Extension {unsigned int} hex_value (int @var{c})\n \n Returns the numeric equivalent of the given character when interpreted\n as a hexidecimal digit.  The result is undefined if you pass an"}]}