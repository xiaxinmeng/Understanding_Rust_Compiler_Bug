{"sha": "94f7d7ec6ebef49a50da777fd71db3d03ee03aa0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRmN2Q3ZWM2ZWJlZjQ5YTUwZGE3NzdmZDcxZGIzZDAzZWUwM2FhMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-04T15:34:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-04T15:35:20Z"}, "message": "libstdc++: Fix comment on __memcpyable\n\nThe discussion of iterator_traits<volatile T*>::value_type and  the\nexample with three tempalte arguments related to an earlier version of\nthe patch, not the one committed.\n\nAlso improve the comment on __memcmpable.\n\n\t* include/bits/cpp_type_traits.h (__memcpyable): Fix comment.", "tree": {"sha": "cb0a7e0ca537fb2e3c583f996f74e9a25b815571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb0a7e0ca537fb2e3c583f996f74e9a25b815571"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94f7d7ec6ebef49a50da777fd71db3d03ee03aa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f7d7ec6ebef49a50da777fd71db3d03ee03aa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94f7d7ec6ebef49a50da777fd71db3d03ee03aa0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f7d7ec6ebef49a50da777fd71db3d03ee03aa0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b0908c1f27d12a3cbbd3c9fd55aec1fe87586a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b0908c1f27d12a3cbbd3c9fd55aec1fe87586a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b0908c1f27d12a3cbbd3c9fd55aec1fe87586a6"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "df3b040abca38948e4ace90cc8afe2f8275785e5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f7d7ec6ebef49a50da777fd71db3d03ee03aa0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f7d7ec6ebef49a50da777fd71db3d03ee03aa0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=94f7d7ec6ebef49a50da777fd71db3d03ee03aa0", "patch": "@@ -1,3 +1,7 @@\n+2020-03-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/cpp_type_traits.h (__memcpyable): Fix comment.\n+\n 2020-03-04  Patrick Palka  <ppalka@redhat.com>\n \n \tPR libstdc++/94017"}, {"sha": "979ad9c2c690bd0b15f00c62634c67b8b7f4f201", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f7d7ec6ebef49a50da777fd71db3d03ee03aa0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f7d7ec6ebef49a50da777fd71db3d03ee03aa0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=94f7d7ec6ebef49a50da777fd71db3d03ee03aa0", "patch": "@@ -429,10 +429,9 @@ __INT_N(__GLIBCXX_TYPE_INT_N_3)\n       enum { __value = __is_trivially_copyable(_Tp) };\n     };\n \n-  // Cannot use memcpy/memmove/memcmp on volatile types, but before C++20\n-  // iterator_traits<volatile T*>::value_type is volatile T and so the\n-  // partial specializations below match for volatile-qualified pointers\n-  // e.g. __memcpyable<volatile int*, volatile int*, volatile int>.\n+  // Cannot use memcpy/memmove/memcmp on volatile types even if they are\n+  // trivially copyable, so ensure __memcpyable<volatile int*, volatile int*>\n+  // and similar will be false.\n   template<typename _Tp>\n     struct __is_nonvolatile_trivially_copyable<volatile _Tp>\n     {\n@@ -457,6 +456,10 @@ __INT_N(__GLIBCXX_TYPE_INT_N_3)\n     { };\n \n   // Whether two iterator types can be used with memcmp.\n+  // This trait only says it's well-formed to use memcmp, not that it\n+  // gives the right answer for a given algorithm. So for example, std::equal\n+  // needs to add additional checks that the types are integers or pointers,\n+  // because other trivially copyable types can overload operator==.\n   template<typename _Iter1, typename _Iter2>\n     struct __memcmpable\n     {"}]}