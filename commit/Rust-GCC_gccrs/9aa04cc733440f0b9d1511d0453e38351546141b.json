{"sha": "9aa04cc733440f0b9d1511d0453e38351546141b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFhMDRjYzczMzQ0MGYwYjlkMTUxMWQwNDUzZTM4MzUxNTQ2MTQxYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-02-22T14:12:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-02-22T14:12:55Z"}, "message": "[multiple changes]\n\n2012-02-22  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_util.adb, make.adb, sem_dim.adb, sem_ch4.adb, exp_disp.adb: Minor\n\treformatting.\n\n2012-02-22  Geert Bosch  <bosch@adacore.com>\n\n\t* g-bytswa-x86.adb, g-bytswa.adb, gcc-interface/Makefile.in: Remove\n\tx86-specific version of byteswap and use GCC builtins instead.\n\n2012-02-22  Tristan Gingold  <gingold@adacore.com>\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) [E_String_Type,\n\tE_Array_Type]: Translate component ealier.\n\n2012-02-22  Robert Dewar  <dewar@adacore.com>\n\n\t* par-ch3.adb (P_Signed_Integer_Type_Definition): Specialize\n\terror message for 'Range.\n\nFrom-SVN: r184480", "tree": {"sha": "0ca3eebfb23972eb52bb66139e169b1ffc2e8701", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ca3eebfb23972eb52bb66139e169b1ffc2e8701"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aa04cc733440f0b9d1511d0453e38351546141b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa04cc733440f0b9d1511d0453e38351546141b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa04cc733440f0b9d1511d0453e38351546141b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa04cc733440f0b9d1511d0453e38351546141b/comments", "author": null, "committer": null, "parents": [{"sha": "aab081301183b100541e48100c11281435b9e286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aab081301183b100541e48100c11281435b9e286", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aab081301183b100541e48100c11281435b9e286"}], "stats": {"total": 431, "additions": 129, "deletions": 302}, "files": [{"sha": "f3cf57efdb385c2c3c894cee8d7ec2a6976eac40", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9aa04cc733440f0b9d1511d0453e38351546141b", "patch": "@@ -1,3 +1,23 @@\n+2012-02-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_util.adb, make.adb, sem_dim.adb, sem_ch4.adb, exp_disp.adb: Minor\n+\treformatting.\n+\n+2012-02-22  Geert Bosch  <bosch@adacore.com>\n+\n+\t* g-bytswa-x86.adb, g-bytswa.adb, gcc-interface/Makefile.in: Remove\n+\tx86-specific version of byteswap and use GCC builtins instead.\n+\n+2012-02-22  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) [E_String_Type,\n+\tE_Array_Type]: Translate component ealier.\n+\n+2012-02-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-ch3.adb (P_Signed_Integer_Type_Definition): Specialize\n+\terror message for 'Range.\n+\n 2012-02-22  Pascal Obry  <obry@adacore.com>\n \n \t* s-taprop-mingw.adb (Finalize_TCB): Do not wait on thread handle as"}, {"sha": "e065538c72b12facded6540464458377e8350d3b", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=9aa04cc733440f0b9d1511d0453e38351546141b", "patch": "@@ -77,8 +77,9 @@ package body Exp_Disp is\n \n    function Find_Specific_Type (CW : Entity_Id) return Entity_Id;\n    --  Find specific type of a class-wide type, and handle the case of an\n-   --  incomplete type coming  either from a limited_with clause or from an\n-   --  incomplete type declaration.\n+   --  incomplete type coming either from a limited_with clause or from an\n+   --  incomplete type declaration. Shouldn't this be in Sem_Util? It seems\n+   --  like a general purpose semantic routine ???\n \n    function Has_DT (Typ : Entity_Id) return Boolean;\n    pragma Inline (Has_DT);"}, {"sha": "96498c2aa111edb5e5b94647397c28c2755f0b9a", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=9aa04cc733440f0b9d1511d0453e38351546141b", "patch": "@@ -3961,7 +3961,6 @@ package body Exp_Util is\n \n       function Initialized_By_Ctrl_Function (N : Node_Id) return Boolean is\n          Expr : constant Node_Id := Original_Node (Expression (N));\n-\n       begin\n          return\n             Nkind (Expr) = N_Function_Call\n@@ -3986,6 +3985,7 @@ package body Exp_Util is\n                                   N_Unchecked_Type_Conversion)\n             then\n                Call := Expression (Call);\n+\n             else\n                exit;\n             end if;"}, {"sha": "cc47b7298353f4b6ee7d8b50e64d77cb643c8ba8", "filename": "gcc/ada/g-bytswa-x86.adb", "status": "removed", "additions": 0, "deletions": 192, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aab081301183b100541e48100c11281435b9e286/gcc%2Fada%2Fg-bytswa-x86.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aab081301183b100541e48100c11281435b9e286/gcc%2Fada%2Fg-bytswa-x86.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-bytswa-x86.adb?ref=aab081301183b100541e48100c11281435b9e286", "patch": "@@ -1,192 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                    G N A T . B Y T E _ S W A P P I N G                   --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---                     Copyright (C) 2006-2010, AdaCore                     --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is a machine-specific version of this package.\n---  It uses instructions available on Intel 486 processors (or later).\n-\n-with Interfaces;          use Interfaces;\n-with System.Machine_Code; use System.Machine_Code;\n-with Ada.Unchecked_Conversion;\n-\n-package body GNAT.Byte_Swapping is\n-\n-   -----------------------\n-   -- Local Subprograms --\n-   -----------------------\n-\n-   function Swapped32 (Value : Unsigned_32) return Unsigned_32;\n-   pragma Inline_Always (Swapped32);\n-\n-   --------------\n-   -- Swapped2 --\n-   --------------\n-\n-   function Swapped2 (Input : Item) return Item is\n-\n-      function As_U16 is new Ada.Unchecked_Conversion\n-         (Source => Item, Target => Unsigned_16);\n-\n-      function As_Item is new Ada.Unchecked_Conversion\n-         (Source => Unsigned_16, Target => Item);\n-\n-      X : Unsigned_16 := As_U16 (Input);\n-\n-   begin\n-      Asm (\"xchgb %b0,%h0\",\n-           Unsigned_16'Asm_Output (\"=q\", X),\n-           Unsigned_16'Asm_Input (\"0\", X));\n-      return As_Item (X);\n-   end Swapped2;\n-\n-   --------------\n-   -- Swapped4 --\n-   --------------\n-\n-   function Swapped4 (Input : Item) return Item is\n-\n-      function As_U32 is new Ada.Unchecked_Conversion\n-         (Source => Item, Target => Unsigned_32);\n-\n-      function As_Item is new Ada.Unchecked_Conversion\n-         (Source => Unsigned_32, Target => Item);\n-\n-      X : Unsigned_32 := As_U32 (Input);\n-\n-   begin\n-      Asm (\"bswap %0\",\n-           Unsigned_32'Asm_Output (\"=r\", X),\n-           Unsigned_32'Asm_Input (\"0\", X));\n-      return As_Item (X);\n-   end Swapped4;\n-\n-   --------------\n-   -- Swapped8 --\n-   --------------\n-\n-   function Swapped8 (Input : Item) return Item is\n-\n-      function As_U64 is new Ada.Unchecked_Conversion\n-         (Source => Item, Target => Unsigned_64);\n-\n-      X : constant Unsigned_64 := As_U64 (Input);\n-\n-      type Two_Words is array (0 .. 1) of Unsigned_32;\n-      for Two_Words'Component_Size use Unsigned_32'Size;\n-\n-      function As_Item is new Ada.Unchecked_Conversion\n-        (Source => Two_Words, Target => Item);\n-\n-      Result : Two_Words;\n-\n-   begin\n-      Asm (\"xchgl %0,%1\",\n-         Outputs =>\n-            (Unsigned_32'Asm_Output (\"=r\", Result (0)),\n-             Unsigned_32'Asm_Output (\"=r\", Result (1))),\n-         Inputs =>\n-            (Unsigned_32'Asm_Input (\"0\",\n-                Swapped32 (Unsigned_32 (X and 16#0000_0000_FFFF_FFFF#))),\n-             Unsigned_32'Asm_Input (\"1\",\n-                Swapped32 (Unsigned_32 (Shift_Right (X, 32))))));\n-      return As_Item (Result);\n-   end Swapped8;\n-\n-   -----------\n-   -- Swap2 --\n-   -----------\n-\n-   procedure Swap2 (Location : System.Address) is\n-\n-      X : Unsigned_16;\n-      for X'Address use Location;\n-\n-   begin\n-      Asm (\"xchgb %b0,%h0\",\n-           Unsigned_16'Asm_Output (\"=q\", X),\n-           Unsigned_16'Asm_Input (\"0\", X));\n-   end Swap2;\n-\n-   -----------\n-   -- Swap4 --\n-   -----------\n-\n-   procedure Swap4 (Location : System.Address) is\n-\n-      X : Unsigned_32;\n-      for X'Address use Location;\n-\n-   begin\n-      Asm (\"bswap %0\",\n-           Unsigned_32'Asm_Output (\"=r\", X),\n-           Unsigned_32'Asm_Input (\"0\", X));\n-   end Swap4;\n-\n-   ---------------\n-   -- Swapped32 --\n-   ---------------\n-\n-   function Swapped32 (Value : Unsigned_32) return Unsigned_32 is\n-      X : Unsigned_32 := Value;\n-   begin\n-      Asm (\"bswap %0\",\n-           Unsigned_32'Asm_Output (\"=r\", X),\n-           Unsigned_32'Asm_Input (\"0\", X));\n-      return X;\n-   end Swapped32;\n-\n-   -----------\n-   -- Swap8 --\n-   -----------\n-\n-   procedure Swap8 (Location : System.Address) is\n-\n-      X : Unsigned_64;\n-      for X'Address use Location;\n-\n-      type Two_Words is array (0 .. 1) of Unsigned_32;\n-      for Two_Words'Component_Size use Unsigned_32'Size;\n-\n-      Words : Two_Words;\n-      for Words'Address use Location;\n-\n-   begin\n-      Asm (\"xchgl %0,%1\",\n-         Outputs =>\n-            (Unsigned_32'Asm_Output (\"=r\", Words (0)),\n-             Unsigned_32'Asm_Output (\"=r\", Words (1))),\n-         Inputs =>\n-            (Unsigned_32'Asm_Input (\"0\",\n-                Swapped32 (Unsigned_32 (X and 16#0000_0000_FFFF_FFFF#))),\n-             Unsigned_32'Asm_Input (\"1\",\n-                Swapped32 (Unsigned_32 (Shift_Right (X, 32))))));\n-   end Swap8;\n-\n-end GNAT.Byte_Swapping;"}, {"sha": "329c078fff40d3df1aa26eab419202964db66e5e", "filename": "gcc/ada/g-bytswa.adb", "status": "modified", "additions": 40, "deletions": 63, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2Fg-bytswa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2Fg-bytswa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-bytswa.adb?ref=9aa04cc733440f0b9d1511d0453e38351546141b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2006-2010, AdaCore                     --\n+--                     Copyright (C) 2006-2012, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,121 +29,98 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This is a general implementation that does not take advantage of\n---  any machine-specific instructions.\n+--  This is a general implementation that uses GCC intrinsics to take\n+--  advantage of any machine-specific instructions.\n \n-with Interfaces; use Interfaces;\n-with Ada.Unchecked_Conversion;\n+with Ada.Unchecked_Conversion; use Ada;\n \n package body GNAT.Byte_Swapping is\n \n+   type U16 is mod 2**16;\n+   type U32 is mod 2**32;\n+   type U64 is mod 2**64;\n+\n+   function Bswap_16 (X : U16) return U16 is (X / 256 or X * 256);\n+   --  The above is an idiom recognized by GCC\n+\n+   function Bswap_32 (X : U32) return U32;\n+   pragma Import (Intrinsic, Bswap_32, \"__builtin_bswap32\");\n+\n+   function Bswap_64 (X : U64) return U64;\n+   pragma Import (Intrinsic, Bswap_64, \"__builtin_bswap64\");\n+\n    --------------\n    -- Swapped2 --\n    --------------\n \n    function Swapped2 (Input : Item) return Item is\n+      function As_U16 is new Unchecked_Conversion (Item, U16);\n+      function As_Item is new Unchecked_Conversion (U16, Item);\n \n-      function As_U16 is new Ada.Unchecked_Conversion\n-         (Source => Item, Target => Unsigned_16);\n-\n-      function As_Item is new Ada.Unchecked_Conversion\n-         (Source => Unsigned_16, Target => Item);\n-\n-      X : constant Unsigned_16 := As_U16 (Input);\n-\n+      function Bswap_16 (X : U16) return U16 is (X / 256 or X * 256);\n+      --  ??? Need to have function local here to allow inlining\n+      pragma Compile_Time_Error (Item'Max_Size_In_Storage_Elements /= 2,\n+        \"storage size must be 2 bytes\");\n    begin\n-      return As_Item ((Shift_Left (X, 8)  and 16#FF00#) or\n-                      (Shift_Right (X, 8) and 16#00FF#));\n+      return As_Item (Bswap_16 (As_U16 (Input)));\n    end Swapped2;\n \n    --------------\n    -- Swapped4 --\n    --------------\n \n    function Swapped4 (Input : Item) return Item is\n-\n-      function As_U32 is new Ada.Unchecked_Conversion\n-         (Source => Item, Target => Unsigned_32);\n-\n-      function As_Item is new Ada.Unchecked_Conversion\n-         (Source => Unsigned_32, Target => Item);\n-\n-      X : constant Unsigned_32 := As_U32 (Input);\n-\n+      function As_U32 is new Unchecked_Conversion (Item, U32);\n+      function As_Item is new Unchecked_Conversion (U32, Item);\n+      pragma Compile_Time_Error (Item'Max_Size_In_Storage_Elements /= 4,\n+        \"storage size must be 4 bytes\");\n    begin\n-      return As_Item ((Shift_Right (X, 24) and 16#0000_00FF#) or\n-                      (Shift_Right (X, 8)  and 16#0000_FF00#) or\n-                      (Shift_Left (X, 8)   and 16#00FF_0000#) or\n-                      (Shift_Left (X, 24)  and 16#FF00_0000#));\n+      return As_Item (Bswap_32 (As_U32 (Input)));\n    end Swapped4;\n \n    --------------\n    -- Swapped8 --\n    --------------\n \n    function Swapped8 (Input : Item) return Item is\n-\n-      function As_U64 is new Ada.Unchecked_Conversion\n-         (Source => Item, Target => Unsigned_64);\n-\n-      function As_Item is new Ada.Unchecked_Conversion\n-         (Source => Unsigned_64, Target => Item);\n-\n-      X : constant Unsigned_64 := As_U64 (Input);\n-\n-      Low, High : aliased Unsigned_32;\n-\n+      function As_U64 is new Unchecked_Conversion (Item, U64);\n+      function As_Item is new Unchecked_Conversion (U64, Item);\n+      pragma Compile_Time_Error (Item'Max_Size_In_Storage_Elements /= 8,\n+        \"storage size must be 8 bytes\");\n    begin\n-      Low := Unsigned_32 (X and 16#0000_0000_FFFF_FFFF#);\n-      Swap4 (Low'Address);\n-      High := Unsigned_32 (Shift_Right (X, 32));\n-      Swap4 (High'Address);\n-      return As_Item\n-         (Shift_Left (Unsigned_64 (Low), 32) or Unsigned_64 (High));\n+      return As_Item (Bswap_64 (As_U64 (Input)));\n    end Swapped8;\n \n    -----------\n    -- Swap2 --\n    -----------\n \n    procedure Swap2 (Location : System.Address) is\n-      X : Unsigned_16;\n+      X : U16;\n       for X'Address use Location;\n    begin\n-      X := (Shift_Left (X, 8)  and 16#FF00#) or\n-           (Shift_Right (X, 8) and 16#00FF#);\n+      X := Bswap_16 (X);\n    end Swap2;\n \n    -----------\n    -- Swap4 --\n    -----------\n \n    procedure Swap4 (Location : System.Address) is\n-      X : Unsigned_32;\n+      X : U32;\n       for X'Address use Location;\n    begin\n-      X := (Shift_Right (X, 24) and 16#0000_00FF#) or\n-           (Shift_Right (X, 8)  and 16#0000_FF00#) or\n-           (Shift_Left (X, 8)   and 16#00FF_0000#) or\n-           (Shift_Left (X, 24)  and 16#FF00_0000#);\n+      X := Bswap_32 (X);\n    end Swap4;\n \n    -----------\n    -- Swap8 --\n    -----------\n \n    procedure Swap8 (Location : System.Address) is\n-      X : Unsigned_64;\n+      X : U64;\n       for X'Address use Location;\n-\n-      Low, High : aliased Unsigned_32;\n-\n    begin\n-      Low := Unsigned_32 (X and 16#0000_0000_FFFF_FFFF#);\n-      Swap4 (Low'Address);\n-      High := Unsigned_32 (Shift_Right (X, 32));\n-      Swap4 (High'Address);\n-      X := Shift_Left (Unsigned_64 (Low), 32) or Unsigned_64 (High);\n+      X := Bswap_64 (X);\n    end Swap8;\n-\n end GNAT.Byte_Swapping;"}, {"sha": "72569032a1082f34b59abc40a1ef45d4ed1ba246", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=9aa04cc733440f0b9d1511d0453e38351546141b", "patch": "@@ -430,13 +430,11 @@ ATOMICS_BUILTINS_TARGET_PAIRS = \\\n X86_TARGET_PAIRS = \\\n   a-numaux.ads<a-numaux-x86.ads \\\n   a-numaux.adb<a-numaux-x86.adb \\\n-  g-bytswa.adb<g-bytswa-x86.adb \\\n   s-atocou.adb<s-atocou-x86.adb\n \n X86_64_TARGET_PAIRS = \\\n   a-numaux.ads<a-numaux-x86.ads \\\n   a-numaux.adb<a-numaux-x86.adb \\\n-  g-bytswa.adb<g-bytswa-x86.adb \\\n   s-atocou.adb<s-atocou-builtin.adb\n \n LIB_VERSION = $(strip $(shell grep ' Library_Version :' $(fsrcpfx)ada/gnatvsn.ads | sed -e 's/.*\"\\(.*\\)\".*/\\1/'))"}, {"sha": "10e9c8d60e09f98eabf32ce1cb0ee7dd83a98e80", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=9aa04cc733440f0b9d1511d0453e38351546141b", "patch": "@@ -2003,6 +2003,18 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \ttree gnu_max_size = size_one_node, gnu_max_size_unit, tem, t;\n \tEntity_Id gnat_index, gnat_name;\n \tint index;\n+\ttree comp_type;\n+\n+\t/* Create the type for the component now, as it simplifies breaking\n+\t   type reference loops.  */\n+\tcomp_type\n+\t  = gnat_to_gnu_component_type (gnat_entity, definition, debug_info_p);\n+\tif (present_gnu_tree (gnat_entity))\n+\t  {\n+\t    /* As a side effect, the type may have been translated.  */\n+\t    maybe_present = true;\n+\t    break;\n+\t  }\n \n \t/* We complete an existing dummy fat pointer type in place.  This both\n \t   avoids further complex adjustments in update_pointer_to and yields\n@@ -2173,29 +2185,28 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t    debug_info_p);\n \tTYPE_READONLY (gnu_template_type) = 1;\n \n-\t/* Now make the array of arrays and update the pointer to the array\n-\t   in the fat pointer.  Note that it is the first field.  */\n-\ttem\n-\t  = gnat_to_gnu_component_type (gnat_entity, definition, debug_info_p);\n+\t/* Now build the array type.  */\n \n \t/* If Component_Size is not already specified, annotate it with the\n \t   size of the component.  */\n \tif (Unknown_Component_Size (gnat_entity))\n-\t  Set_Component_Size (gnat_entity, annotate_value (TYPE_SIZE (tem)));\n+\t  Set_Component_Size (gnat_entity,\n+                              annotate_value (TYPE_SIZE (comp_type)));\n \n \t/* Compute the maximum size of the array in units and bits.  */\n \tif (gnu_max_size)\n \t  {\n \t    gnu_max_size_unit = size_binop (MULT_EXPR, gnu_max_size,\n-\t\t\t\t\t    TYPE_SIZE_UNIT (tem));\n+\t\t\t\t\t    TYPE_SIZE_UNIT (comp_type));\n \t    gnu_max_size = size_binop (MULT_EXPR,\n \t\t\t\t       convert (bitsizetype, gnu_max_size),\n-\t\t\t\t       TYPE_SIZE (tem));\n+\t\t\t\t       TYPE_SIZE (comp_type));\n \t  }\n \telse\n \t  gnu_max_size_unit = NULL_TREE;\n \n \t/* Now build the array type.  */\n+        tem = comp_type;\n \tfor (index = ndim - 1; index >= 0; index--)\n \t  {\n \t    tem = build_nonshared_array_type (tem, gnu_index_types[index]);"}, {"sha": "e2512a0678c0f8c5ff5ea023ad3036d724dae9f6", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=9aa04cc733440f0b9d1511d0453e38351546141b", "patch": "@@ -1865,7 +1865,7 @@ package body Make is\n             elsif not Read_Only and then Main_Project /= No_Project then\n                declare\n                   Uname : constant Name_Id :=\n-                    Check_Source_Info_In_ALI (ALI, Project_Tree);\n+                            Check_Source_Info_In_ALI (ALI, Project_Tree);\n \n                   Udata : Prj.Unit_Index;\n \n@@ -1875,11 +1875,11 @@ package body Make is\n                      return;\n                   end if;\n \n-                  --  Check that the ALI file is in the correct object\n-                  --  directory. If it is in the object directory of a project\n-                  --  that is extended and it depends on a source that is in\n-                  --  one of its extending projects, then the ALI file is not\n-                  --  in the correct object directory.\n+                  --  Check that ALI file is in the correct object directory.\n+                  --  If it is in the object directory of a project that is\n+                  --  extended and it depends on a source that is in one of\n+                  --  its extending projects, then the ALI file is not in the\n+                  --  correct object directory.\n \n                   --  First, find the project of this ALI file. As there may be\n                   --  several projects with the same object directory, we first"}, {"sha": "bfc4f592bf36af68761e31f59189d6ef87e85587", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=9aa04cc733440f0b9d1511d0453e38351546141b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2279,13 +2279,30 @@ package body Ch3 is\n          Scan; -- past RANGE\n       end if;\n \n-      Expr_Node := P_Expression;\n-      Check_Simple_Expression (Expr_Node);\n-      Set_Low_Bound (Typedef_Node, Expr_Node);\n-      T_Dot_Dot;\n-      Expr_Node := P_Expression;\n-      Check_Simple_Expression (Expr_Node);\n-      Set_High_Bound (Typedef_Node, Expr_Node);\n+      Expr_Node := P_Expression_Or_Range_Attribute;\n+\n+      --  Range case (not permitted by the grammar, this is surprising but\n+      --  the grammar in the RM is as quoted above, and does not allow Range).\n+\n+      if Expr_Form = EF_Range_Attr then\n+         Error_Msg_N\n+           (\"Range attribute not allowed here, use First .. Last\", Expr_Node);\n+         Set_Low_Bound (Typedef_Node, Expr_Node);\n+         Set_Attribute_Name (Expr_Node, Name_First);\n+         Set_High_Bound (Typedef_Node, Copy_Separate_Tree (Expr_Node));\n+         Set_Attribute_Name (High_Bound (Typedef_Node), Name_Last);\n+\n+      --  Normal case of explicit range\n+\n+      else\n+         Check_Simple_Expression (Expr_Node);\n+         Set_Low_Bound (Typedef_Node, Expr_Node);\n+         T_Dot_Dot;\n+         Expr_Node := P_Expression;\n+         Check_Simple_Expression (Expr_Node);\n+         Set_High_Bound (Typedef_Node, Expr_Node);\n+      end if;\n+\n       return Typedef_Node;\n    end P_Signed_Integer_Type_Definition;\n "}, {"sha": "0a9cb78c087b25c9ef09636229ffbac3ccfba590", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=9aa04cc733440f0b9d1511d0453e38351546141b", "patch": "@@ -5543,26 +5543,24 @@ package body Sem_Ch4 is\n                return;\n             end if;\n \n-         --  If we have infix notation, the operator must be usable.\n-         --  Within an instance, if the type is already established we\n-         --  know it is correct. If an operand is universal it is compatible\n-         --  with any numeric type.\n+         --  If we have infix notation, the operator must be usable. Within\n+         --  an instance, if the type is already established we know it is\n+         --  correct. If an operand is universal it is compatible with any\n+         --  numeric type.\n \n          --  In Ada 2005, the equality on anonymous access types is declared\n          --  in Standard, and is always visible.\n \n          elsif In_Open_Scopes (Scope (Bas))\n            or else Is_Potentially_Use_Visible (Bas)\n            or else In_Use (Bas)\n-           or else (In_Use (Scope (Bas))\n-                     and then not Is_Hidden (Bas))\n-\n+           or else (In_Use (Scope (Bas)) and then not Is_Hidden (Bas))\n            or else (In_Instance\n-                    and then\n-                      (First_Subtype (T1) = First_Subtype (Etype (R))\n-                       or else (Is_Numeric_Type (T1)\n-                         and then Is_Universal_Numeric_Type (Etype (R)))))\n-\n+                     and then\n+                       (First_Subtype (T1) = First_Subtype (Etype (R))\n+                         or else\n+                           (Is_Numeric_Type (T1)\n+                             and then Is_Universal_Numeric_Type (Etype (R)))))\n            or else Ekind (T1) = E_Anonymous_Access_Type\n          then\n             null;"}, {"sha": "7e0d5d4a7dce8d09e6d6d512392e6d9c35b7cac6", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa04cc733440f0b9d1511d0453e38351546141b/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=9aa04cc733440f0b9d1511d0453e38351546141b", "patch": "@@ -1373,9 +1373,8 @@ package body Sem_Dim is\n       Ent            : Entity_Id;\n \n       function Is_Elementary_Function_Entity (E : Entity_Id) return Boolean;\n-      --  Given E the original subprogram entity, return True if the call is a\n-      --  an elementary function call (see\n-      --  Ada.Numerics.Generic_Elementary_Functions).\n+      --  Given E, the original subprogram entity, return True if call is to an\n+      --  elementary function (see Ada.Numerics.Generic_Elementary_Functions).\n \n       -----------------------------------\n       -- Is_Elementary_Function_Entity --\n@@ -1385,8 +1384,7 @@ package body Sem_Dim is\n          Loc : constant Source_Ptr := Sloc (E);\n \n       begin\n-         --  Check the function entity is located in\n-         --  Ada.Numerics.Generic_Elementary_Functions.\n+         --  Is function entity in Ada.Numerics.Generic_Elementary_Functions?\n \n          return\n            Loc > No_Location\n@@ -1422,8 +1420,8 @@ package body Sem_Dim is\n                if Exists (Dims_Of_Call) then\n                   for Position in Dims_Of_Call'Range loop\n                      Dims_Of_Call (Position) :=\n-                       Dims_Of_Call (Position) * Rational'(Numerator =>   1,\n-                                                        Denominator => 2);\n+                       Dims_Of_Call (Position) * Rational'(Numerator   => 1,\n+                                                           Denominator => 2);\n                   end loop;\n \n                   Set_Dimensions (N, Dims_Of_Call);\n@@ -1440,8 +1438,7 @@ package body Sem_Dim is\n                   if Exists (Dims_Of_Actual) then\n                      Error_Msg_NE (\"parameter should be dimensionless for \" &\n                                    \"elementary function&\",\n-                                   Actual,\n-                                   Name_Call);\n+                                   Actual, Name_Call);\n                      Error_Msg_N (\"\\parameter \" & Dimensions_Msg_Of (Actual),\n                                   Actual);\n                   end if;"}]}