{"sha": "810e8b5200c3e59dddb0fb5e43d46290ec400927", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEwZThiNTIwMGMzZTU5ZGRkYjBmYjVlNDNkNDYyOTBlYzQwMDkyNw==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2001-02-22T04:16:07Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-02-22T04:16:07Z"}, "message": "re PR java/2040 (java.util.Hashtable(int,float) is stricter than sun's version)\n\n\tFix for PR java/2040:\n\t* java/util/HashMap.java (HashMap): Don't throw exception for\n\tloadFactor > 1. Add exception messages.\n\t* java/util/Hashtable.java (Hashtable): Likewise.\n\nFrom-SVN: r39969", "tree": {"sha": "6bf010a67cccbe03b819b7320a3cd43e49919b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bf010a67cccbe03b819b7320a3cd43e49919b7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/810e8b5200c3e59dddb0fb5e43d46290ec400927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/810e8b5200c3e59dddb0fb5e43d46290ec400927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/810e8b5200c3e59dddb0fb5e43d46290ec400927", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/810e8b5200c3e59dddb0fb5e43d46290ec400927/comments", "author": null, "committer": null, "parents": [{"sha": "7a6f7290413b2209ab01506a2a832eb3f9d3ca8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a6f7290413b2209ab01506a2a832eb3f9d3ca8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a6f7290413b2209ab01506a2a832eb3f9d3ca8b"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "4b73b5c7c1b415f9d3a713cf9bc5959d8907b136", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/810e8b5200c3e59dddb0fb5e43d46290ec400927/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/810e8b5200c3e59dddb0fb5e43d46290ec400927/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=810e8b5200c3e59dddb0fb5e43d46290ec400927", "patch": "@@ -1,3 +1,10 @@\n+2001-02-22  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\tFix for PR java/2040:\n+\t* java/util/HashMap.java (HashMap): Don't throw exception for \n+\tloadFactor > 1. Add exception messages.\n+\t* java/util/Hashtable.java (Hashtable): Likewise.\n+\n 2001-02-20  Tom Tromey  <tromey@redhat.com>\n \n \t* java/io/PipedWriter.java (flush): Throw exception if stream"}, {"sha": "bf10e9ef00ab373fd58fa4f8f4312a6f0253f9cb", "filename": "libjava/java/util/HashMap.java", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/810e8b5200c3e59dddb0fb5e43d46290ec400927/libjava%2Fjava%2Futil%2FHashMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/810e8b5200c3e59dddb0fb5e43d46290ec400927/libjava%2Fjava%2Futil%2FHashMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FHashMap.java?ref=810e8b5200c3e59dddb0fb5e43d46290ec400927", "patch": "@@ -60,8 +60,6 @@\n  * @author         Jon Zeppieri\n  * @author         Jochen Hoenicke\n  * @author\t   Bryce McKinlay\n- * @version        $Revision: 1.4 $\n- * @modified       $Id: HashMap.java,v 1.4 2000/12/21 02:00:15 bryce Exp $\n  */\n public class HashMap extends AbstractMap\n   implements Map, Cloneable, Serializable\n@@ -160,14 +158,16 @@ public HashMap(int initialCapacity) throws IllegalArgumentException\n    * \n    * @throws   IllegalArgumentException    if (initialCapacity < 0) ||\n    *                                          (initialLoadFactor > 1.0) ||\n-   *                                          (initialLoadFactor <= 0.0)\n    */\n   public HashMap(int initialCapacity, float loadFactor)\n     throws IllegalArgumentException\n   {\n-    if (initialCapacity < 0 || loadFactor <= 0 || loadFactor > 1)\n-      throw new IllegalArgumentException();\n-    \n+    if (initialCapacity < 0)\n+      throw new IllegalArgumentException(\"Illegal Initial Capacity: \" \n+      \t\t\t\t\t + initialCapacity);    \n+    if (loadFactor <= 0)\n+      throw new IllegalArgumentException(\"Illegal Load Factor: \" + loadFactor);\n+  \n     buckets = new Entry[initialCapacity];\n     this.loadFactor = loadFactor;\n     this.threshold = (int) (initialCapacity * loadFactor);\n@@ -619,8 +619,6 @@ private void readObject(ObjectInputStream s)\n    * keys, values, or entries.\n    *\n    * @author       Jon Zeppieri\n-   * @version      $Revision: 1.4 $\n-   * @modified     $Id: HashMap.java,v 1.4 2000/12/21 02:00:15 bryce Exp $\n    */\n   class HashIterator implements Iterator\n   {"}, {"sha": "4fd8167d60cdfcfcee3208a129b0993f487dac0c", "filename": "libjava/java/util/Hashtable.java", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/810e8b5200c3e59dddb0fb5e43d46290ec400927/libjava%2Fjava%2Futil%2FHashtable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/810e8b5200c3e59dddb0fb5e43d46290ec400927/libjava%2Fjava%2Futil%2FHashtable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FHashtable.java?ref=810e8b5200c3e59dddb0fb5e43d46290ec400927", "patch": "@@ -64,8 +64,6 @@\n  * @author      Jon Zeppieri\n  * @author\tWarren Levy\n  * @author      Bryce McKinlay\n- * @version     $Revision: 1.9 $\n- * @modified    $Id: Hashtable.java,v 1.9 2000/12/17 09:15:51 bryce Exp $\n  */\n public class Hashtable extends Dictionary \n   implements Map, Cloneable, Serializable\n@@ -171,15 +169,17 @@ public Hashtable(int initialCapacity) throws IllegalArgumentException\n    * @param   loadFactor       the load factor\n    * \n    * @throws   IllegalArgumentException    if (initialCapacity < 0) ||\n-   *                                          (initialLoadFactor > 1.0) ||\n    *                                          (initialLoadFactor <= 0.0)\n    */\n   public Hashtable(int initialCapacity, float loadFactor)\n     throws IllegalArgumentException\n   {\n-    if (initialCapacity < 0 || loadFactor <= 0 || loadFactor > 1)\n-      throw new IllegalArgumentException();\n-    \n+    if (initialCapacity < 0)\n+      throw new IllegalArgumentException(\"Illegal Initial Capacity: \" \n+      \t\t\t\t\t + initialCapacity);    \n+    if (loadFactor <= 0)\n+      throw new IllegalArgumentException(\"Illegal Load Factor: \" + loadFactor);\n+     \n     buckets = new Entry[initialCapacity];\n     this.loadFactor = loadFactor;\n     this.threshold = (int) (initialCapacity * loadFactor);\n@@ -721,8 +721,6 @@ private void readObject(ObjectInputStream s)\n    * as per the Javasoft spec.\n    *\n    * @author       Jon Zeppieri\n-   * @version      $Revision: 1.9 $\n-   * @modified     $Id: Hashtable.java,v 1.9 2000/12/17 09:15:51 bryce Exp $\n    */\n   class HashIterator implements Iterator\n   {\n@@ -818,16 +816,15 @@ public void remove()\n    * elements; this implementation is parameterized to provide access either \n    * to the keys or to the values in the Hashtable.\n    *\n-   * <b>NOTE: Enumeration is not safe if new elements are put in the table as\n-   * this could cause a rehash and we'd completely lose our place.  Even\n+   * <b>NOTE</b>: Enumeration is not safe if new elements are put in the table\n+   * as this could cause a rehash and we'd completely lose our place.  Even\n    * without a rehash, it is undetermined if a new element added would\n    * appear in the enumeration.  The spec says nothing about this, but\n    * the \"Java Class Libraries\" book infers that modifications to the\n    * hashtable during enumeration causes indeterminate results.  Don't do it!\n    *\n    * @author       Jon Zeppieri\n-   * @version      $Revision: 1.9 $\n-   * @modified $Id: Hashtable.java,v 1.9 2000/12/17 09:15:51 bryce Exp $ */\n+   */\n   class Enumerator implements Enumeration\n   {\n     static final int KEYS = 0;"}]}