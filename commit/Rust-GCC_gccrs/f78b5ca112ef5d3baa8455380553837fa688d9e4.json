{"sha": "f78b5ca112ef5d3baa8455380553837fa688d9e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc4YjVjYTExMmVmNWQzYmFhODQ1NTM4MDU1MzgzN2ZhNjg4ZDllNA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1997-11-14T14:06:07Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-11-14T14:06:07Z"}, "message": "* calls.c (expand_call): Handle pcc_struct_value correctly for C++.\n\nFrom-SVN: r16485", "tree": {"sha": "e2fb28c342648ac9106c1370ad2af4e6b441d4ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2fb28c342648ac9106c1370ad2af4e6b441d4ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f78b5ca112ef5d3baa8455380553837fa688d9e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f78b5ca112ef5d3baa8455380553837fa688d9e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f78b5ca112ef5d3baa8455380553837fa688d9e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f78b5ca112ef5d3baa8455380553837fa688d9e4/comments", "author": null, "committer": null, "parents": [{"sha": "238ad62b9fc6a0290a25467bb49c975e5ea29c92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/238ad62b9fc6a0290a25467bb49c975e5ea29c92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/238ad62b9fc6a0290a25467bb49c975e5ea29c92"}], "stats": {"total": 38, "additions": 8, "deletions": 30}, "files": [{"sha": "7f0ed57933a2503740a1c1324ffa3070044e0304", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f78b5ca112ef5d3baa8455380553837fa688d9e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f78b5ca112ef5d3baa8455380553837fa688d9e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f78b5ca112ef5d3baa8455380553837fa688d9e4", "patch": "@@ -1,5 +1,7 @@\n Fri Nov 14 06:59:33 1997  Jeffrey A Law  (law@cygnus.com)\n \n+\t* calls.c (expand_call): Handle pcc_struct_value correctly for C++.\n+\n \t* i386/xm-cygwin32.h (HAVE_FILE_H, HAVE_RUSAGE): Delete defines.\n \t* i386/xm-mingw32.h (HAVE_FILE_H, HAVE_RUSAGE): Likewise.\n \t* rs6000/xm-cygwin32.h (HAVE_FILE_H, HAVE_RUSAGE): Likewise."}, {"sha": "2d94cb6287dc1f1476ee20a73bc6411a9effe3db", "filename": "gcc/calls.c", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f78b5ca112ef5d3baa8455380553837fa688d9e4/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f78b5ca112ef5d3baa8455380553837fa688d9e4/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=f78b5ca112ef5d3baa8455380553837fa688d9e4", "patch": "@@ -2061,36 +2061,12 @@ expand_call (exp, target, ignore)\n     }\n   else if (pcc_struct_value)\n     {\n-      if (target == 0)\n-\t{\n-\t  /* We used leave the value in the location that it is\n-\t     returned in, but that causes problems if it is used more\n-\t     than once in one expression.  Rather than trying to track\n-\t     when a copy is required, we always copy when TARGET is\n-\t     not specified.  This calling sequence is only used on\n-\t     a few machines and TARGET is usually nonzero.  */\n-\t  if (TYPE_MODE (TREE_TYPE (exp)) == BLKmode)\n-\t    {\n-\t      target = assign_stack_temp (BLKmode,\n-\t\t\t\t\t  int_size_in_bytes (TREE_TYPE (exp)),\n-\t\t\t\t\t  0);\n-\n-\t      MEM_IN_STRUCT_P (target) = AGGREGATE_TYPE_P (TREE_TYPE (exp));\n-\n-\t      /* Save this temp slot around the pop below.  */\n-\t      preserve_temp_slots (target);\n-\t    }\n-\t  else\n-\t    target = gen_reg_rtx (TYPE_MODE (TREE_TYPE (exp)));\n-\t}\n-\n-      if (TYPE_MODE (TREE_TYPE (exp)) != BLKmode)\n-\temit_move_insn (target, gen_rtx (MEM, TYPE_MODE (TREE_TYPE (exp)),\n-\t\t\t\t\t copy_to_reg (valreg)));\n-      else\n-\temit_block_move (target, gen_rtx (MEM, BLKmode, copy_to_reg (valreg)),\n-\t\t\t expr_size (exp),\n-\t\t\t TYPE_ALIGN (TREE_TYPE (exp)) / BITS_PER_UNIT);\n+      /* This is the special C++ case where we need to\n+\t know what the true target was.  We take care to\n+\t never use this value more than once in one expression.  */\n+      target = gen_rtx (MEM, TYPE_MODE (TREE_TYPE (exp)),\n+\t\t\tcopy_to_reg (valreg));\n+      MEM_IN_STRUCT_P (target) = AGGREGATE_TYPE_P (TREE_TYPE (exp));\n     }\n   /* Handle calls that return values in multiple non-contiguous locations.\n      The Irix 6 ABI has examples of this.  */"}]}