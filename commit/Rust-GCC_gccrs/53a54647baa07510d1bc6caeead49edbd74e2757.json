{"sha": "53a54647baa07510d1bc6caeead49edbd74e2757", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNhNTQ2NDdiYWEwNzUxMGQxYmM2Y2FlZWFkNDllZGJkNzRlMjc1Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T09:01:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T09:01:52Z"}, "message": "Removed, no longer used.\n\nFrom-SVN: r101073", "tree": {"sha": "2d8b37860f3b39943edc5cff58f5e105479b5dcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d8b37860f3b39943edc5cff58f5e105479b5dcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53a54647baa07510d1bc6caeead49edbd74e2757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53a54647baa07510d1bc6caeead49edbd74e2757", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53a54647baa07510d1bc6caeead49edbd74e2757", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53a54647baa07510d1bc6caeead49edbd74e2757/comments", "author": null, "committer": null, "parents": [{"sha": "84fdd8a35ecef52e58198b55ac169e9f921ecd7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84fdd8a35ecef52e58198b55ac169e9f921ecd7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84fdd8a35ecef52e58198b55ac169e9f921ecd7f"}], "stats": {"total": 916, "additions": 0, "deletions": 916}, "files": [{"sha": "e18511f89f644e27d97bfa9f9db215e691d6b1ca", "filename": "gcc/ada/Makefile.generic", "status": "removed", "additions": 0, "deletions": 503, "changes": 503, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fdd8a35ecef52e58198b55ac169e9f921ecd7f/gcc%2Fada%2FMakefile.generic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fdd8a35ecef52e58198b55ac169e9f921ecd7f/gcc%2Fada%2FMakefile.generic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.generic?ref=84fdd8a35ecef52e58198b55ac169e9f921ecd7f", "patch": "@@ -1,503 +0,0 @@\n-# Generic Makefile to support compilation for multiple languages.\n-# See also Makefile.prolog\n-#\n-#   Copyright (C) 2001-2004 Free Software Foundation, Inc.\n-\n-# This file is part of GCC.\n-\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2, or (at your option)\n-# any later version.\n-\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING.  If not, write to\n-# the Free Software Foundation, 59 Temple Place - Suite 330,\n-# Boston, MA 02111-1307, USA.\n-\n-# This Makefile provides a very generic framework of the following\n-# functionalities:\n-#\n-# Multi-language support (currently any combination of Ada/C/C++ supported)\n-# Automatic handling of source dependencies\n-# Handling of various C/C++ compilers\n-# Handling of Ada sources using the GNAT toolchain\n-# Complete build process (compile/bind/link)\n-# Individual compilation (on a file, or on a language)\n-# Handling of an object directory\n-\n-# Here are the rules that can be used from the command line:\n-#\n-# build:         complete compile/bind/link process\n-# compile:       compile all files that are not up-to-date\n-# link:          bind/link\n-# ada:           compile all Ada files that are not up-to-date\n-# c:             ditto for C files\n-# c++:           ditto for C++ files\n-# <ada file>:    compile the specified file if needed.\n-# <object file>: compile the corresponding C/C++ source file if needed.\n-# clean:         remove all temporary files\n-\n-# This Makefile expects the following variables to be set by the caller\n-# (typically another Makefile):\n-#\n-# ADA_SPEC         extension of Ada spec files (optional, default to .ads)\n-# ADA_BODY         extension of Ada body files (optional, default to .adb)\n-# C_EXT            extension of C files (optional, default to .c)\n-# CXX_EXT          extension of C++ files (optional, default to .cc)\n-# OBJ_EXT          extension of object files (optional, default to .o)\n-# SRC_DIRS         blank separated list of source directories\n-# C_SRCS           explicit list of C sources (optional)\n-# C_SRCS_DEFINED   if set, indicates that C_SRCS is already set\n-# CXX_SRCS         explicit list of C++ sources (optional)\n-# CXX_SRCS_DEFINED is set, indicates that CXX_SRCS is already set\n-# OBJ_DIR          a single directory where object files should be put\n-# EXEC_DIR         a single directory where executables should be put (optional)\n-# LANGUAGES        a blank separated list of languages supported, e.g \"ada c\"\n-#                  the current list of recognized languages is: ada, c, c++\n-# CC               name of the C compiler (optional, default to gcc)\n-# CXX              name of the C++ compiler (optional, default to gcc)\n-# AR_CMD           command to create an archive (optional, default to \"ar rc\")\n-# AR_EXT           file extension of an archive (optional, default to \".a\")\n-# RANLIB           command to generate an index (optional, default to \"ranlib\")\n-# GNATMAKE         name of the GNAT builder (optional, default to \"gnatmake\")\n-# ADAFLAGS         additional Ada compilation switches, e.g \"-gnatf\" (optional)\n-# CFLAGS           default C compilation switches, e.g \"-O2 -g\" (optional)\n-# CXXFLAGS         default C++ compilation switches (optional)\n-# LIBS             libraries to link with (optional)\n-# LDFLAGS          linker switches (optional)\n-# ADA_SOURCES      list of main Ada sources (optional)\n-# EXEC             name of the final executable (optional)\n-# MAIN             language of the main program (optional)\n-# MAIN_OBJECT      main object file (optional)\n-# PROJECT_FILE     name of the project file, without the .gpr extension\n-# DEPS_PROJECTS    list of project dependencies (optional)\n-\n-# SILENT           (optional) when defined, make -s will not output anything\n-#                  when all commands are successful.\n-\n-# Set the source search path for C and C++ if needed\n-\n-ifndef MAIN\n-   MAIN=ada\n-endif\n-\n-ifndef ADA_SPEC\n-   ADA_SPEC=.ads\n-endif\n-\n-ifndef ADA_BODY\n-   ADA_BODY=.adb\n-endif\n-\n-ifndef CC\n-   CC=gcc\n-endif\n-\n-ifndef CXX\n-   CXX=gcc\n-endif\n-\n-ifndef CXX_EXT\n-   CXX_EXT=.cc\n-endif\n-\n-vpath %$(C_EXT) $(SRC_DIRS)\n-vpath %$(CXX_EXT) $(SRC_DIRS)\n-\n-ifndef OBJ_EXT\n-   OBJ_EXT=.o\n-endif\n-\n-ifndef AR_EXT\n-   AR_EXT=.a\n-endif\n-\n-ifndef AR_CMD\n-   AR_CMD=ar rc\n-endif\n-\n-ifndef RANLIB\n-   RANLIB=ranlib\n-endif\n-\n-ifndef GNATMAKE\n-   GNATMAKE:=gnatmake\n-endif\n-\n-ifndef ARCHIVE\n-   ARCHIVE=$(OBJ_DIR)/lib$(PROJECT_BASE)-full$(AR_EXT)\n-endif\n-\n-ifeq ($(EXEC_DIR),)\n-   EXEC_DIR=$(OBJ_DIR)\n-endif\n-\n-# Define display to echo only when SILENT is not defined\n-\n-ifdef SILENT\n-define display\n-   @gprcmd ignore\n-endef\n-\n-else\n-define display\n-   @echo\n-endef\n-endif\n-\n-# Make sure gnatmake is called silently when SILENT is set\n-ifdef SILENT\n-   GNATMAKE:=$(GNATMAKE) -q\n-endif\n-\n-# If C/C++ compiler is gcc, make sure gcc is called with the switch indicating\n-# the language, in case the extension is not standard.\n-\n-ifeq ($(strip $(filter-out %gcc,$(CC))),)\n-   C_Compiler=$(CC) -x c\n-else\n-   C_Compiler=$(CC)\n-endif\n-\n-ifeq ($(strip $(filter-out %gcc %g++,$(CXX))),)\n-   CXX_Compiler=$(CXX) -x c++\n-else\n-   CXX_Compiler=$(CXX)\n-endif\n-\n-# Set the object search path\n-\n-vpath %$(OBJ_EXT) $(OBJ_DIR)\n-vpath %$(AR_EXT) $(OBJ_DIR)\n-\n-# A target can't have a character ':' otherwise it will confuse make. We\n-# replace ':' by a pipe character. Note that there is less chance than a pipe\n-# character be part of a pathname on UNIX and this character can't be used in\n-# a pathname on Windows.\n-\n-clean_deps = $(subst :,__GPRCOLON__,$(DEPS_PROJECTS:%=clean_%))\n-compile_deps = $(subst :,__GPRCOLON__,$(DEPS_PROJECTS:%=compile_%))\n-object_deps = $(subst :,__GPRCOLON__,$(DEPS_PROJECTS:%=object_%))\n-ada_deps = $(subst :,__GPRCOLON__,$(DEPS_PROJECTS:%=ada_%))\n-c_deps = $(subst :,__GPRCOLON__,$(DEPS_PROJECTS:%=c_%))\n-c++_deps = $(subst :,__GPRCOLON__,$(DEPS_PROJECTS:%=c++_%))\n-\n-# Default target is to build (compile/bind/link)\n-all: build\n-\n-clean: $(clean_deps) internal-clean\n-build: $(compile_deps) internal-compile internal-build\n-compile: $(compile_deps) internal-compile $(ADA_SOURCES)\n-ada: $(ada_deps) internal-ada\n-archive-objects: $(object_deps) internal-archive-objects\n-c: $(c_deps) internal-c\n-c++: $(c++deps) internal-c++\n-\n-$(clean_deps): force\n-\t@$(MAKE) -C $(dir $(subst __GPRCOLON__,:,$(@:clean_%=%))) -f Makefile.$(notdir $@) internal-clean\n-\n-$(compile_deps): force\n-\t@$(MAKE) -C $(dir $(subst __GPRCOLON__,:,$(@:compile_%=%))) -f Makefile.$(notdir $@) internal-compile\n-\n-$(object_deps): force\n-\t@$(MAKE) -C $(dir $(subst __GPRCOLON__,:,$(@:object_%=%))) -f Makefile.$(notdir $@) internal-archive-objects ARCHIVE=$(ARCHIVE)\n-\n-$(ada_deps): force\n-\t@$(MAKE) -C $(dir $(subst __GPRCOLON__,:,$(@:ada_%=%))) -f Makefile.$(notdir $@) internal-ada\n-\n-$(c_deps): force\n-\t@$(MAKE) -C $(dir $(subst __GPRCOLON__,:,$(@:c_%=%))) -f Makefile.$(notdir $@) internal-c\n-\n-$(c++_deps): force\n-\t@$(MAKE) -C $(dir $(subst __GPRCOLON__,:,$(@:c++_%=%))) -f Makefile.$(notdir $@) internal-c++\n-\n-ifneq ($(EXEC),)\n-   EXEC_RULE=-o $(EXEC)\n-endif\n-\n-PROJECT_BASE = $(notdir $(PROJECT_FILE))\n-\n-# Set C/C++ linker command & target\n-\n-ifeq ($(filter c++,$(LANGUAGES)),c++)\n-   LINKER = $(CXX)\n-\n-   ifeq ($(filter ada,$(LANGUAGES)),ada)\n-      # C++ and Ada mixed\n-      LARGS = --LINK=$(LINKER)\n-\n-      ifeq ($(strip $(filter-out %gcc %g++,$(CXX))),)\n-         # Case of GNAT and a GNU C++ compiler\n-$(LINKER):\n-\n-      else\n-         # Case of GNAT and a non GNU C++ compiler\n-         LINKER = $(OBJ_DIR)/c++linker\n-\n-$(LINKER): Makefile.$(PROJECT_BASE)\n-\t@echo \\#!/bin/sh > $(LINKER)\n-\t@echo $(CXX) $$\\* $(shell gcc -print-libgcc-file-name) >> $(LINKER)\n-\t@chmod +x $(LINKER)\n-      endif\n-   endif\n-else\n-   ifeq ($(strip $(LANGUAGES)),c)\n-      # Case of C only\n-      LINKER = $(CC)\n-   endif\n-endif\n-\n-C_INCLUDES := $(foreach name,$(SRC_DIRS),-I$(name))\n-ALL_CFLAGS = $(CFLAGS) $(DEP_CFLAGS)\n-ALL_CXXFLAGS = $(CXXFLAGS) $(DEP_CFLAGS)\n-LDFLAGS := $(LIBS) $(LDFLAGS)\n-\n-# Compute list of objects based on languages\n-\n-ifeq ($(strip $(filter c,$(LANGUAGES))),c)\n-   # Compute list of C sources automatically unless already specified\n-\n-   ifndef C_SRCS_DEFINED\n-      ifndef C_SRCS\n-         C_SRCS := \\\n-           $(foreach name,$(SRC_DIRS),$(notdir $(wildcard $(name)/*$(C_EXT))))\n-      endif\n-   endif\n-\n-   C_OBJECTS := $(C_SRCS:$(C_EXT)=$(OBJ_EXT))\n-   OBJECTS += $(C_OBJECTS)\n-endif\n-\n-ifeq ($(strip $(filter c++,$(LANGUAGES))),c++)\n-   # Compute list of C++ sources automatically unless already specified\n-\n-   ifndef CXX_SRCS_DEFINED\n-      ifndef CXX_SRCS\n-         CXX_SRCS := \\\n-         $(foreach name,$(SRC_DIRS),$(notdir $(wildcard $(name)/*$(CXX_EXT))))\n-      endif\n-   endif\n-\n-   CXX_OBJECTS := $(CXX_SRCS:$(CXX_EXT)=$(OBJ_EXT))\n-   OBJECTS += $(CXX_OBJECTS)\n-endif\n-\n-OBJ_FILES := $(foreach name,$(OBJECTS),$(OBJ_DIR)/$(name))\n-\n-# To handle C/C++ dependencies, we associate a small file for each\n-# source that will list the dependencies as a make rule, so that we can then\n-# include these rules in this makefile, and recompute them on a file by file\n-# basis\n-\n-DEP_FILES := $(OBJ_FILES:$(OBJ_EXT)=.d)\n-\n-# Ada compilations are taken care of automatically, so do not mess with Ada\n-# objects, only with main sources.\n-\n-ifeq ($(strip $(OBJECTS)),)\n-internal-compile:\n-internal-archive-objects:\n-\n-else\n-internal-compile: lib$(PROJECT_BASE)$(AR_EXT)\n-\n-lib$(PROJECT_BASE)$(AR_EXT): $(OBJECTS)\n-\t@$(display) creating archive file for $(PROJECT_BASE)\n-\tcd $(OBJ_DIR); $(AR_CMD) $@ $(strip $(OBJECTS))\n-\t-$(RANLIB) $(OBJ_DIR)/$@\n-\n-internal-archive-objects: $(OBJECTS)\n-#\t@echo $(AR_CMD) $(ARCHIVE) $(strip $(OBJECTS))\n-#\tcd $(OBJ_DIR); $(AR_CMD) $(ARCHIVE) $(strip $(OBJECTS))\n-#\t-$(RANLIB) $(OBJ_DIR)/$@\n-\n-endif\n-\n-# Linking rules\n-\n-# There are three cases:\n-#\n-# - C/C++ sources\n-#\n-# - Ada/C/C++, main program is in Ada\n-#\n-# - Ada/C/C++, main program is in C/C++\n-\n-ifeq ($(strip $(filter-out c c++,$(LANGUAGES))),)\n-# link with C/C++\n-ifeq ($(MAIN_OBJECT),)\n-link:\n-\t@echo link: no main object specified, exiting...\n-\texit 1\n-else\n-ifeq ($(EXEC),)\n-\n-link:\n-\t@echo link: no executable specified, exiting...\n-\texit 1\n-else\n-\n-link: $(EXEC_DIR)/$(EXEC) archive-objects\n-$(EXEC_DIR)/$(EXEC): $(OBJECTS)\n-\t@$(display) $(LINKER) -o $(EXEC_DIR)/$(EXEC) $(OBJ_DIR)/$(MAIN_OBJECT) $(LDFLAGS) $(FLDFLAGS)\n-\t@$(LINKER) -o $(EXEC_DIR)/$(EXEC) $(OBJ_DIR)/$(MAIN_OBJECT) $(LDFLAGS) $(FLDFLAGS)\n-endif\n-endif\n-\n-internal-build: internal-compile link\n-\n-else\n-ifeq ($(strip $(filter-out c c++ ada,$(LANGUAGES))),)\n-# link with Ada/C/C++\n-\n-ifeq ($(MAIN),ada)\n-# Ada main\n-link: $(LINKER) archive-objects force\n-\t@$(display) $(GNATMAKE) -b -l -P$(PROJECT_FILE) $(ADA_SOURCES)\n-\t@$(GNATMAKE) -b -l -P$(PROJECT_FILE) $(ADA_SOURCES) \\\n-\t\t -largs $(LARGS) $(LDFLAGS)\n-\n-internal-build: $(LINKER) archive-objects force\n-\t@$(display) $(GNATMAKE) -P$(PROJECT_FILE) $(ADA_SOURCES) $(EXEC_RULE) $(ADAFLAGS)\n-\t@$(GNATMAKE) -P$(PROJECT_FILE) $(EXEC_RULE) $(ADA_SOURCES) $(ADAFLAGS) \\\n-\t -largs $(LARGS) $(LDFLAGS)\n-\n-else\n-# C/C++ main\n-\n-link: $(LINKER) archive-objects force\n-\t@$(display) $(GNATMAKE) $(EXEC_RULE) -B -P$(PROJECT_FILE) $(ADA_SOURCES)\n-\t@$(GNATMAKE) $(EXEC_RULE) -B -P$(PROJECT_FILE) $(ADA_SOURCES) \\\n-\t\t -largs $(OBJ_DIR)/$(MAIN_OBJECT) $(LARGS) $(LDFLAGS) $(FLDFLAGS)\n-\n-internal-build: $(LINKER) archive-objects force\n-\t@$(display) $(GNATMAKE) $(EXEC_RULE) -B -P$(PROJECT_FILE) $(ADA_SOURCES) $(ADAFLAGS)\n-\t@$(GNATMAKE) $(EXEC_RULE) \\\n-\t\t -B -P$(PROJECT_FILE) $(ADA_SOURCES) $(ADAFLAGS) \\\n-\t\t -largs $(OBJ_DIR)/$(MAIN_OBJECT) $(LARGS) $(LDFLAGS) $(FLDFLAGS)\n-endif\n-\n-else\n-# unknown set of languages, fail\n-link:\n-\t@echo do not know how to link with the following languages: $(LANGUAGES)\n-\texit 1\n-endif\n-endif\n-\n-# Automatic handling of dependencies\n-\n-ifeq ($(strip $(filter-out %gcc %g++,$(CC) $(CXX))),)\n-# Compiler is GCC, take avantage of the preprocessor option -MD and\n-# the CPATH environment variable\n-\n-empty:=\n-space:=$(empty) $(empty)\n-path_sep:=$(shell gprcmd path_sep)\n-SRC_DIRS_PATH:= $(subst $(space),$(path_sep),$(SRC_DIRS))\n-export CPATH:=$(SRC_DIRS_PATH)$(path_sep)$(CPATH)\n-\n-DEP_CFLAGS = -Wp,-MD,$(OBJ_DIR)/$(*F).d\n-\n-define post-compile\n-  @gprcmd deps $(OBJ_EXT) $(OBJ_DIR)/$(*F).d gcc\n-endef\n-\n-# Default rule to create dummy dependency files the first time\n-\n-$(OBJ_DIR)/%.d:\n-\t@echo $(*F)$(OBJ_EXT): > $@\n-\n-else\n-# Compiler unknown, use a more general approach based on the output of $(CC) -M\n-\n-ALL_CFLAGS := $(ALL_CFLAGS) $(C_INCLUDES)\n-ALL_CXXFLAGS := $(ALL_CXXFLAGS) $(C_INCLUDES)\n-\n-DEP_FLAGS  = -M\n-DEP_CFLAGS =\n-\n-define post-compile\n-endef\n-\n-$(OBJ_DIR)/%.d: %$(C_EXT)\n-\t@$(CC) $(DEP_FLAGS) $(ALL_CFLAGS) $< > $@\n-\t@gprcmd deps $(OBJ_EXT) $@\n-\n-$(OBJ_DIR)/%.d: %$(CXX_EXT)\n-\t@$(CXX) $(DEP_FLAGS) $(ALL_CXXFLAGS) $< > $@\n-\t@gprcmd deps $(OBJ_EXT) $@\n-endif\n-\n-ifneq ($(DEP_FILES),)\n--include $(DEP_FILES)\n-endif\n-\n-# Compilation rules\n-\n-# File rules\n-\n-# Compile C files individually\n-%$(OBJ_EXT) : %$(C_EXT)\n-\t@$(display) $(C_Compiler) -c $(CFLAGS) $< -o $(OBJ_DIR)/$@\n-ifndef FAKE_COMPILE\n-\t@$(C_Compiler) -c $(ALL_CFLAGS) $< -o $(OBJ_DIR)/$@\n-\t@$(post-compile)\n-endif\n-\n-# Compile C++ files individually\n-%$(OBJ_EXT) : %$(CXX_EXT)\n-\t@$(display) $(CXX_Compiler) -c $(CXXFLAGS) $< -o $(OBJ_DIR)/$@\n-ifndef FAKE_COMPILE\n-\t@$(CXX_Compiler) -c $(ALL_CXXFLAGS) $< -o $(OBJ_DIR)/$@\n-\t@$(post-compile)\n-endif\n-\n-# Compile Ada body files individually\n-%$(ADA_BODY) : force\n-\t$(GNATMAKE) -c -P$(PROJECT_FILE) $@ $(ADAFLAGS)\n-\n-# Compile Ada spec files individually\n-%$(ADA_SPEC) : force\n-\t$(GNATMAKE) -c -P$(PROJECT_FILE) $@ $(ADAFLAGS)\n-\n-# Languages rules\n-\n-# Compile all Ada files in the project\n-internal-ada :\n-\t$(GNATMAKE) -c -P$(PROJECT_FILE) $(ADAFLAGS)\n-\n-# Compile all C files in the project\n-internal-c : $(C_OBJECTS)\n-\n-# Compile all C++ files in the project\n-internal-c++ : $(CXX_OBJECTS)\n-\n-.PHONY: force internal-clean internal-archive internal-build internal-compile internal-ada internal-c internal-c++ build compile clean ada c c++\n-\n-internal-clean:\n-\t@$(display) $(RM) $(OBJ_DIR)/*$(OBJ_EXT)\n-\t@$(RM) $(OBJ_DIR)/*$(OBJ_EXT)\n-\t@$(display) $(RM) $(OBJ_DIR)/*.ali\n-\t@$(RM) $(OBJ_DIR)/*.ali\n-\t@$(display) $(RM) $(OBJ_DIR)/b~*\n-\t@$(RM) $(OBJ_DIR)/b~*\n-\t@$(display) $(RM) $(OBJ_DIR)/b_*\n-\t@$(RM) $(OBJ_DIR)/b_*\n-\t@$(display) $(RM) $(OBJ_DIR)/*$(AR_EXT)\n-\t@$(RM) $(OBJ_DIR)/*$(AR_EXT)\n-\t@$(display) $(RM) $(OBJ_DIR)/*.d\n-\t@$(RM) $(OBJ_DIR)/*.d\n-ifneq ($(EXEC),)\n-\t@$(display) $(RM) $(EXEC_DIR)/$(EXEC)\n-\t@$(RM) $(EXEC_DIR)/$(EXEC)\n-endif\n-\n-force:\n-"}, {"sha": "83da2cd614e2c45fd282ae9e2aa695ab77a5550d", "filename": "gcc/ada/Makefile.prolog", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fdd8a35ecef52e58198b55ac169e9f921ecd7f/gcc%2Fada%2FMakefile.prolog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fdd8a35ecef52e58198b55ac169e9f921ecd7f/gcc%2Fada%2FMakefile.prolog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.prolog?ref=84fdd8a35ecef52e58198b55ac169e9f921ecd7f", "patch": "@@ -1,67 +0,0 @@\n-# Makefile included at the beginning of the makefiles generated by gpr2make\n-# to support compilation for multiple languages.\n-# See also Makefile.generic\n-#\n-#   Copyright (C) 2001-2004 Free Software Foundation, Inc.\n-\n-# This file is part of GCC.\n-\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2, or (at your option)\n-# any later version.\n-\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING.  If not, write to\n-# the Free Software Foundation, 59 Temple Place - Suite 330,\n-# Boston, MA 02111-1307, USA.\n-\n-# all reserved variables are saved in <VAR>.saved\n-\n-BASE_DIR.saved := $(BASE_DIR)\n-C_EXT.saved:=$(C_EXT)\n-CXX_EXT.saved:=$(CXX_EXT)\n-OBJ_EXT.saved:=$(OBJ_EXT)\n-SRC_DIRS.saved:=$(SRC_DIRS)\n-C_SRCS.saved:=$(C_SRCS)\n-CXX_SRCS.saved:=$(CXX_SRCS)\n-OBJ_DIR.saved:=$(OBJ_DIR)\n-LANGUAGES.saved:=$(LANGUAGES)\n-CC.saved:=$(CC)\n-CXX.saved:=$(CXX)\n-AR_CMD.saved:=$(AR_CMD)\n-AR_EXT.saved:=$(AR_EXT)\n-GNATMAKE.saved:=$(GNATMAKE)\n-ADAFLAGS.saved:=$(ADAFLAGS)\n-CFLAGS.saved:=$(CFLAGS)\n-CXXFLAGS.saved:=$(CXXFLAGS)\n-FLDFLAGS.saved:=$(FLDFLAGS)\n-LIBS.saved:=$(LIBS)\n-LDFLAGS.saved:=$(LDFLAGS)\n-ADA_SOURCES.saved:=$(ADA_SOURCES)\n-EXEC.saved:=$(EXEC)\n-EXEC_DIR.saved:=$(EXEC_DIR)\n-MAIN.saved:=$(MAIN)\n-PROJECT_FILE.saved:=$(PROJECT_FILE)\n-DEPS_PROJECTS.saved:=$(DEPS_PROJECTS)\n-\n-# Default settings\n-\n-LANGUAGES:=ada\n-C_EXT:=.c\n-CXX_EXT:=.cc\n-AR_EXT=.a\n-OBJ_EXT=.o\n-CC=gcc\n-FLDFLAGS:=\n-\n-# Default target is to build (compile/bind/link)\n-# Target build is defined in Makefile.generic\n-\n-default: build\n-"}, {"sha": "a0a8a49962ebab376e5134662273d3a873d08f9d", "filename": "gcc/ada/i-cpp-vms.adb", "status": "removed", "additions": 0, "deletions": 346, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fdd8a35ecef52e58198b55ac169e9f921ecd7f/gcc%2Fada%2Fi-cpp-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fdd8a35ecef52e58198b55ac169e9f921ecd7f/gcc%2Fada%2Fi-cpp-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cpp-vms.adb?ref=84fdd8a35ecef52e58198b55ac169e9f921ecd7f", "patch": "@@ -1,346 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                       I N T E R F A C E S . C P P                        --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---         Copyright (C) 2000-2004, Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- As a special exception,  if other files  instantiate  generics from this --\n--- unit, or you link  this unit with other files  to produce an executable, --\n--- this  unit  does not  by itself cause  the resulting  executable  to  be --\n--- covered  by the  GNU  General  Public  License.  This exception does not --\n--- however invalidate  any other reasons why  the executable file  might be --\n--- covered by the  GNU Public License.                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is the OpenVMS/Alpha DEC C++ (cxx) version of this package\n-\n-with Ada.Tags;                use Ada.Tags;\n-with System;                  use System;\n-with System.Storage_Elements; use System.Storage_Elements;\n-with Unchecked_Conversion;\n-\n-package body Interfaces.CPP is\n-\n-   subtype Cstring is String (Positive);\n-   type Cstring_Ptr is access all Cstring;\n-   type Tag_Table is array (Natural range <>) of Vtable_Ptr;\n-   pragma Suppress_Initialization (Tag_Table);\n-\n-   type Type_Specific_Data is record\n-      Idepth        : Natural;\n-      Expanded_Name : Cstring_Ptr;\n-      External_Tag  : Cstring_Ptr;\n-      HT_Link       : Tag;\n-      Ancestor_Tags : Tag_Table (Natural);\n-   end record;\n-\n-   type Vtable_Entry is record\n-     Pfn    : System.Address;\n-   end record;\n-\n-   type Type_Specific_Data_Ptr is access all Type_Specific_Data;\n-   type Vtable_Entry_Array is array (Positive range <>) of Vtable_Entry;\n-\n-   type VTable is record\n-      Prims_Ptr : Vtable_Entry_Array (Positive);\n-      TSD       : Type_Specific_Data_Ptr;\n-      --  Location of TSD is unknown so it got moved here to be out of the\n-      --  way of Prims_Ptr. Find it later. ???\n-   end record;\n-\n-   --------------------------------------------------------\n-   -- Unchecked Conversions for Tag, Vtable_Ptr, and TSD --\n-   --------------------------------------------------------\n-\n-   function To_Type_Specific_Data_Ptr is\n-     new Unchecked_Conversion (Address, Type_Specific_Data_Ptr);\n-\n-   function To_Address is\n-     new Unchecked_Conversion (Type_Specific_Data_Ptr, Address);\n-\n-   ---------------------------------------------\n-   -- Unchecked Conversions for String Fields --\n-   ---------------------------------------------\n-\n-   function To_Cstring_Ptr is\n-     new Unchecked_Conversion (Address, Cstring_Ptr);\n-\n-   function To_Address is\n-     new Unchecked_Conversion (Cstring_Ptr, Address);\n-\n-   -----------------------\n-   -- Local Subprograms --\n-   -----------------------\n-\n-   function Length (Str : Cstring_Ptr) return Natural;\n-   --  Length of string represented by the given pointer (treating the\n-   --  string as a C-style string, which is Nul terminated).\n-\n-   --------------------\n-   -- Displaced_This --\n-   --------------------\n-\n-   function Displaced_This\n-    (Current_This : System.Address;\n-     Vptr         : Vtable_Ptr;\n-     Position     : Positive) return System.Address\n-   is\n-      pragma Warnings (Off, Vptr);\n-      pragma Warnings (Off, Position);\n-   begin\n-      return Current_This;\n-      --        + Storage_Offset (Vptr.Prims_Ptr (Position).Delta1);\n-      --  why is above line commented out ???\n-   end Displaced_This;\n-\n-   -----------------------\n-   -- CPP_CW_Membership --\n-   -----------------------\n-\n-   function CPP_CW_Membership\n-     (Obj_Tag : Vtable_Ptr;\n-      Typ_Tag : Vtable_Ptr) return Boolean\n-   is\n-      Pos : constant Integer := Obj_Tag.TSD.Idepth - Typ_Tag.TSD.Idepth;\n-   begin\n-      return Pos >= 0 and then Obj_Tag.TSD.Ancestor_Tags (Pos) = Typ_Tag;\n-   end CPP_CW_Membership;\n-\n-   ---------------------------\n-   -- CPP_Get_Expanded_Name --\n-   ---------------------------\n-\n-   function CPP_Get_Expanded_Name (T : Vtable_Ptr) return Address is\n-   begin\n-      return To_Address (T.TSD.Expanded_Name);\n-   end CPP_Get_Expanded_Name;\n-\n-   --------------------------\n-   -- CPP_Get_External_Tag --\n-   --------------------------\n-\n-   function CPP_Get_External_Tag (T : Vtable_Ptr) return Address is\n-   begin\n-      return To_Address (T.TSD.External_Tag);\n-   end CPP_Get_External_Tag;\n-\n-   -------------------------------\n-   -- CPP_Get_Inheritance_Depth --\n-   -------------------------------\n-\n-   function CPP_Get_Inheritance_Depth (T : Vtable_Ptr) return Natural is\n-   begin\n-      return T.TSD.Idepth;\n-   end CPP_Get_Inheritance_Depth;\n-\n-   -----------------------\n-   -- CPP_Get_RC_Offset --\n-   -----------------------\n-\n-   function CPP_Get_RC_Offset (T : Vtable_Ptr) return SSE.Storage_Offset is\n-      pragma Warnings (Off, T);\n-   begin\n-      return 0;\n-   end CPP_Get_RC_Offset;\n-\n-   -----------------------------\n-   -- CPP_Get_Prim_Op_Address --\n-   -----------------------------\n-\n-   function CPP_Get_Prim_Op_Address\n-     (T        : Vtable_Ptr;\n-      Position : Positive) return Address\n-   is\n-   begin\n-      return T.Prims_Ptr (Position).Pfn;\n-   end CPP_Get_Prim_Op_Address;\n-\n-   -------------------------------\n-   -- CPP_Get_Remotely_Callable --\n-   -------------------------------\n-\n-   function CPP_Get_Remotely_Callable (T : Vtable_Ptr) return Boolean is\n-      pragma Warnings (Off, T);\n-   begin\n-      return True;\n-   end CPP_Get_Remotely_Callable;\n-\n-   -----------------\n-   -- CPP_Get_TSD --\n-   -----------------\n-\n-   function CPP_Get_TSD  (T : Vtable_Ptr) return Address is\n-   begin\n-      return To_Address (T.TSD);\n-   end CPP_Get_TSD;\n-\n-   --------------------\n-   -- CPP_Inherit_DT --\n-   --------------------\n-\n-   procedure CPP_Inherit_DT\n-    (Old_T       : Vtable_Ptr;\n-     New_T       : Vtable_Ptr;\n-     Entry_Count : Natural)\n-   is\n-   begin\n-      if Old_T /= null then\n-         New_T.Prims_Ptr (1 .. Entry_Count) :=\n-           Old_T.Prims_Ptr (1 .. Entry_Count);\n-      end if;\n-   end CPP_Inherit_DT;\n-\n-   ---------------------\n-   -- CPP_Inherit_TSD --\n-   ---------------------\n-\n-   procedure CPP_Inherit_TSD\n-     (Old_TSD : Address;\n-      New_Tag : Vtable_Ptr)\n-   is\n-      TSD : constant Type_Specific_Data_Ptr :=\n-              To_Type_Specific_Data_Ptr (Old_TSD);\n-\n-      New_TSD : Type_Specific_Data renames New_Tag.TSD.all;\n-\n-   begin\n-      if TSD /= null then\n-         New_TSD.Idepth := TSD.Idepth + 1;\n-         New_TSD.Ancestor_Tags (1 .. New_TSD.Idepth)\n-           := TSD.Ancestor_Tags (0 .. TSD.Idepth);\n-      else\n-         New_TSD.Idepth := 0;\n-      end if;\n-\n-      New_TSD.Ancestor_Tags (0) := New_Tag;\n-   end CPP_Inherit_TSD;\n-\n-   ---------------------------\n-   -- CPP_Set_Expanded_Name --\n-   ---------------------------\n-\n-   procedure CPP_Set_Expanded_Name (T : Vtable_Ptr; Value : Address) is\n-   begin\n-      T.TSD.Expanded_Name := To_Cstring_Ptr (Value);\n-   end CPP_Set_Expanded_Name;\n-\n-   --------------------------\n-   -- CPP_Set_External_Tag --\n-   --------------------------\n-\n-   procedure CPP_Set_External_Tag (T : Vtable_Ptr; Value : Address) is\n-   begin\n-      T.TSD.External_Tag := To_Cstring_Ptr (Value);\n-   end CPP_Set_External_Tag;\n-\n-   -------------------------------\n-   -- CPP_Set_Inheritance_Depth --\n-   -------------------------------\n-\n-   procedure CPP_Set_Inheritance_Depth\n-     (T     : Vtable_Ptr;\n-      Value : Natural)\n-   is\n-   begin\n-      T.TSD.Idepth := Value;\n-   end CPP_Set_Inheritance_Depth;\n-\n-   -----------------------------\n-   -- CPP_Set_Prim_Op_Address --\n-   -----------------------------\n-\n-   procedure CPP_Set_Prim_Op_Address\n-     (T        : Vtable_Ptr;\n-      Position : Positive;\n-      Value    : Address)\n-   is\n-   begin\n-      T.Prims_Ptr (Position).Pfn := Value;\n-   end CPP_Set_Prim_Op_Address;\n-\n-   -----------------------\n-   -- CPP_Set_RC_Offset --\n-   -----------------------\n-\n-   procedure CPP_Set_RC_Offset (T : Vtable_Ptr; Value : SSE.Storage_Offset) is\n-      pragma Warnings (Off, T);\n-      pragma Warnings (Off, Value);\n-   begin\n-      null;\n-   end CPP_Set_RC_Offset;\n-\n-   -------------------------------\n-   -- CPP_Set_Remotely_Callable --\n-   -------------------------------\n-\n-   procedure CPP_Set_Remotely_Callable (T : Vtable_Ptr; Value : Boolean) is\n-      pragma Warnings (Off, T);\n-      pragma Warnings (Off, Value);\n-   begin\n-      null;\n-   end CPP_Set_Remotely_Callable;\n-\n-   -----------------\n-   -- CPP_Set_TSD --\n-   -----------------\n-\n-   procedure CPP_Set_TSD (T : Vtable_Ptr; Value : Address) is\n-   begin\n-      T.TSD := To_Type_Specific_Data_Ptr (Value);\n-   end CPP_Set_TSD;\n-\n-   -------------------\n-   -- Expanded_Name --\n-   -------------------\n-\n-   function Expanded_Name (T : Vtable_Ptr) return String is\n-      Result : constant Cstring_Ptr := T.TSD.Expanded_Name;\n-   begin\n-      return Result (1 .. Length (Result));\n-   end Expanded_Name;\n-\n-   ------------------\n-   -- External_Tag --\n-   ------------------\n-\n-   function External_Tag (T : Vtable_Ptr) return String is\n-      Result : constant Cstring_Ptr := T.TSD.External_Tag;\n-   begin\n-      return Result (1 .. Length (Result));\n-   end External_Tag;\n-\n-   ------------\n-   -- Length --\n-   ------------\n-\n-   function Length (Str : Cstring_Ptr) return Natural is\n-      Len : Integer := 1;\n-\n-   begin\n-      while Str (Len) /= ASCII.Nul loop\n-         Len := Len + 1;\n-      end loop;\n-\n-      return Len - 1;\n-   end Length;\n-\n-end Interfaces.CPP;"}]}