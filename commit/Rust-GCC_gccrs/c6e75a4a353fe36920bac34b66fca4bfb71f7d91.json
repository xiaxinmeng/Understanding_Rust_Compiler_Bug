{"sha": "c6e75a4a353fe36920bac34b66fca4bfb71f7d91", "node_id": "C_kwDOANBUbNoAKGM2ZTc1YTRhMzUzZmUzNjkyMGJhYzM0YjY2ZmNhNGJmYjcxZjdkOTE", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-03-22T12:25:57Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-03-22T12:27:16Z"}, "message": "aarch64: update error message format.\n\nUse 'qs' and remove usage '(%qs)'.\n\n\tPR target/104898\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.cc (aarch64_handle_attr_arch):\n\tUse 'qs' and remove usage '(%qs)'.\n\t(aarch64_handle_attr_cpu): Likewise.\n\t(aarch64_handle_attr_tune): Likewise.\n\t(aarch64_handle_attr_isa_flags): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/branch-protection-attr.c:\n\tUse 'qs' and remove usage '(%qs)'.\n\t* gcc.target/aarch64/spellcheck_1.c: Likewise.\n\t* gcc.target/aarch64/spellcheck_2.c: Likewise.\n\t* gcc.target/aarch64/spellcheck_3.c: Likewise.", "tree": {"sha": "5061a781b1d3c1160da09185a98f9ef6ec68b683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5061a781b1d3c1160da09185a98f9ef6ec68b683"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6e75a4a353fe36920bac34b66fca4bfb71f7d91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e75a4a353fe36920bac34b66fca4bfb71f7d91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6e75a4a353fe36920bac34b66fca4bfb71f7d91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e75a4a353fe36920bac34b66fca4bfb71f7d91/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "930eb8b6c2cc1a95ce60eb0d15994e16ed0b8ca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/930eb8b6c2cc1a95ce60eb0d15994e16ed0b8ca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/930eb8b6c2cc1a95ce60eb0d15994e16ed0b8ca4"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "2f559600cff55af9d468e8d0810545583cc986f5", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e75a4a353fe36920bac34b66fca4bfb71f7d91/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e75a4a353fe36920bac34b66fca4bfb71f7d91/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=c6e75a4a353fe36920bac34b66fca4bfb71f7d91", "patch": "@@ -18423,11 +18423,11 @@ aarch64_handle_attr_arch (const char *str)\n \terror (\"missing name in %<target(\\\"arch=\\\")%> pragma or attribute\");\n \tbreak;\n       case AARCH64_PARSE_INVALID_ARG:\n-\terror (\"invalid name (%qs) in %<target(\\\"arch=\\\")%> pragma or attribute\", str);\n+\terror (\"invalid name %qs in %<target(\\\"arch=\\\")%> pragma or attribute\", str);\n \taarch64_print_hint_for_arch (str);\n \tbreak;\n       case AARCH64_PARSE_INVALID_FEATURE:\n-\terror (\"invalid feature modifier %s of value (%qs) in \"\n+\terror (\"invalid feature modifier %s of value %qs in \"\n \t       \"%<target()%> pragma or attribute\", invalid_extension.c_str (), str);\n \taarch64_print_hint_for_extensions (invalid_extension);\n \tbreak;\n@@ -18465,11 +18465,11 @@ aarch64_handle_attr_cpu (const char *str)\n \terror (\"missing name in %<target(\\\"cpu=\\\")%> pragma or attribute\");\n \tbreak;\n       case AARCH64_PARSE_INVALID_ARG:\n-\terror (\"invalid name (%qs) in %<target(\\\"cpu=\\\")%> pragma or attribute\", str);\n+\terror (\"invalid name %qs in %<target(\\\"cpu=\\\")%> pragma or attribute\", str);\n \taarch64_print_hint_for_core (str);\n \tbreak;\n       case AARCH64_PARSE_INVALID_FEATURE:\n-\terror (\"invalid feature modifier %s of value (%qs) in \"\n+\terror (\"invalid feature modifier %qs of value %qs in \"\n \t       \"%<target()%> pragma or attribute\", invalid_extension.c_str (), str);\n \taarch64_print_hint_for_extensions (invalid_extension);\n \tbreak;\n@@ -18496,7 +18496,7 @@ aarch64_handle_attr_cpu (const char *str)\n \t      \" attribute\");\n        break;\n      case AARCH64_PARSE_INVALID_ARG:\n-       error (\"invalid protection type (%qs) in %<target(\\\"branch-protection\"\n+       error (\"invalid protection type %qs in %<target(\\\"branch-protection\"\n \t      \"=\\\")%> pragma or attribute\", err_str);\n        break;\n      case AARCH64_PARSE_OK:\n@@ -18531,7 +18531,7 @@ aarch64_handle_attr_tune (const char *str)\n   switch (parse_res)\n     {\n       case AARCH64_PARSE_INVALID_ARG:\n-\terror (\"invalid name (%qs) in %<target(\\\"tune=\\\")%> pragma or attribute\", str);\n+\terror (\"invalid name %qs in %<target(\\\"tune=\\\")%> pragma or attribute\", str);\n \taarch64_print_hint_for_core (str);\n \tbreak;\n       default:\n@@ -18576,7 +18576,7 @@ aarch64_handle_attr_isa_flags (char *str)\n \tbreak;\n \n       case AARCH64_PARSE_INVALID_FEATURE:\n-\terror (\"invalid feature modifier %s of value (%qs) in \"\n+\terror (\"invalid feature modifier %qs of value %qs in \"\n \t       \"%<target()%> pragma or attribute\", invalid_extension.c_str (), str);\n \tbreak;\n "}, {"sha": "272000c27474bd03fe0b3080d03d091114004f9d", "filename": "gcc/testsuite/gcc.target/aarch64/branch-protection-attr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e75a4a353fe36920bac34b66fca4bfb71f7d91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbranch-protection-attr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e75a4a353fe36920bac34b66fca4bfb71f7d91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbranch-protection-attr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbranch-protection-attr.c?ref=c6e75a4a353fe36920bac34b66fca4bfb71f7d91", "patch": "@@ -4,7 +4,7 @@ void __attribute__ ((target(\"branch-protection=leaf\")))\n foo1 ()\n {\n }\n-/* { dg-error {invalid protection type \\('leaf'\\) in 'target\\(\"branch-protection=\"\\)' pragma or attribute} \"\" { target *-*-* } 5 } */\n+/* { dg-error {invalid protection type 'leaf' in 'target\\(\"branch-protection=\"\\)' pragma or attribute} \"\" { target *-*-* } 5 } */\n /* { dg-error {pragma or attribute 'target\\(\"branch-protection=leaf\"\\)' is not valid} \"\" { target *-*-* } 5 } */\n \n void __attribute__ ((target(\"branch-protection=none+pac-ret\")))"}, {"sha": "7f58be04bb1f6347ecf68b4b23169d2021c0cd32", "filename": "gcc/testsuite/gcc.target/aarch64/spellcheck_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e75a4a353fe36920bac34b66fca4bfb71f7d91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e75a4a353fe36920bac34b66fca4bfb71f7d91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_1.c?ref=c6e75a4a353fe36920bac34b66fca4bfb71f7d91", "patch": "@@ -4,6 +4,6 @@ __attribute__((target (\"arch=armv8-a-typo\"))) void\n foo ()\n {\n   /* { dg-message \"valid arguments are: \\[^\\n\\r]*(; did you mean 'armv*'?)?\"  \"\" { target *-*-* } .-1 } */\n-  /* { dg-error \"invalid name \\\\('armv8-a-typo'\\\\) in 'target\\\\(\\\"arch=\\\"\\\\)' pragma or attribute\"  \"\" { target *-*-* } .-2 } */\n+  /* { dg-error \"invalid name 'armv8-a-typo' in 'target\\\\(\\\"arch=\\\"\\\\)' pragma or attribute\"  \"\" { target *-*-* } .-2 } */\n   /* { dg-error \"pragma or attribute 'target\\\\(\\\"arch=armv8-a-typo\\\"\\\\)' is not valid\"  \"\" { target *-*-* } .-3 } */\n }"}, {"sha": "83c8686c9227440a83e17cb4202f9845ca2379f8", "filename": "gcc/testsuite/gcc.target/aarch64/spellcheck_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e75a4a353fe36920bac34b66fca4bfb71f7d91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e75a4a353fe36920bac34b66fca4bfb71f7d91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_2.c?ref=c6e75a4a353fe36920bac34b66fca4bfb71f7d91", "patch": "@@ -4,6 +4,6 @@ __attribute__((target (\"cpu=cortex-a57-typo\"))) void\n foo ()\n {\n   /* { dg-message \"valid arguments are: \\[^\\n\\r]*; did you mean 'cortex-a57'?\"  \"\" { target *-*-* } .-1 } */\n-  /* { dg-error \"invalid name \\\\('cortex-a57-typo'\\\\) in 'target\\\\(\\\"cpu=\\\"\\\\)' pragma or attribute\"  \"\" { target *-*-* } .-2 } */\n+  /* { dg-error \"invalid name 'cortex-a57-typo' in 'target\\\\(\\\"cpu=\\\"\\\\)' pragma or attribute\"  \"\" { target *-*-* } .-2 } */\n   /* { dg-error \"pragma or attribute 'target\\\\(\\\"cpu=cortex-a57-typo\\\"\\\\)' is not valid\"  \"\" { target *-*-* } .-3 } */\n }"}, {"sha": "069c4211e481170e01338ca9824a1ad739eef5d7", "filename": "gcc/testsuite/gcc.target/aarch64/spellcheck_3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e75a4a353fe36920bac34b66fca4bfb71f7d91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e75a4a353fe36920bac34b66fca4bfb71f7d91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_3.c?ref=c6e75a4a353fe36920bac34b66fca4bfb71f7d91", "patch": "@@ -4,6 +4,6 @@ __attribute__((target (\"tune=cortex-a57-typo\"))) void\n foo ()\n {\n   /* { dg-message \"valid arguments are: \\[^\\n\\r]*; did you mean 'cortex-a57'?\"  \"\" { target *-*-* } .-1 } */\n-  /* { dg-error \"invalid name \\\\('cortex-a57-typo'\\\\) in 'target\\\\(\\\"tune=\\\"\\\\)' pragma or attribute\"  \"\" { target *-*-* } .-2 } */\n+  /* { dg-error \"invalid name 'cortex-a57-typo' in 'target\\\\(\\\"tune=\\\"\\\\)' pragma or attribute\"  \"\" { target *-*-* } .-2 } */\n   /* { dg-error \"pragma or attribute 'target\\\\(\\\"tune=cortex-a57-typo\\\"\\\\)' is not valid\"  \"\" { target *-*-* } .-3 } */\n }"}]}