{"sha": "9f532472da3e506db3609ebb03cff3d5f20f7353", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY1MzI0NzJkYTNlNTA2ZGIzNjA5ZWJiMDNjZmYzZDVmMjBmNzM1Mw==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2017-08-31T14:25:55Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2017-08-31T14:25:55Z"}, "message": "[ARC] Use -G option to control sdata behavior\n\ngcc/\n2017-04-24  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config.gcc: Use g.opt for arc.\n\t* config/arc/arc.c (LEGITIMATE_SCALED_ADDRESS_P): Deleted,\n\tfunctionality moved to ...\n\t(legitimate_scaled_address_p): New function, ...here.\n\t(LEGITIMATE_SMALL_DATA_OFFSET_P): New define.\n\t(LEGITIMATE_SMALL_DATA_ADDRESS_P): Use the above define.\n\t(legitimate_offset_address_p): Delete TARGET_NO_SDATA_SET\n\tcondition.\n\t(arc_override_options): Handle G option.\n\t(arc_output_pic_addr_const): Correct function definition.\n\t(arc_legitimate_address_p): Use legitimate_scaled_address_p.\n\t(arc_decl_anon_ns_mem_p): Delete.\n\t(arc_in_small_data_p): Overhaul this function to take into\n\tconsideration the value given via G option.\n\t(arc_rewrite_small_data_1): Renamed and corrected old\n\tarc_rewrite_small_data function.\n\t(arc_rewrite_small_data): New function.\n\t(small_data_pattern): Don't use pic_offset_table_rtx.\n\t* config/arc/arc.h (CC1_SPEC): Recognize G option.\n\t* config/arc/simdext.md (movmisalignv2hi): Use\n\tprepare_move_operands function.\n\t(mov*): Likewise.\n\t(movmisalign*): Likewise.\n\ngcc/testsuite/\n2017-04-24  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* gcc.target/arc/sdata-5.c: New test.\n\t* gcc.target/arc/arc700-stld-hazard.c: Update test options.\n\nFix test\n\nFrom-SVN: r251564", "tree": {"sha": "3f3874a38140210c975019239a1fa6b37d2220fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f3874a38140210c975019239a1fa6b37d2220fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f532472da3e506db3609ebb03cff3d5f20f7353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f532472da3e506db3609ebb03cff3d5f20f7353", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f532472da3e506db3609ebb03cff3d5f20f7353", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f532472da3e506db3609ebb03cff3d5f20f7353/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b6fb793374fd887aee2b08b44145961b28533be2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6fb793374fd887aee2b08b44145961b28533be2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6fb793374fd887aee2b08b44145961b28533be2"}], "stats": {"total": 324, "additions": 199, "deletions": 125}, "files": [{"sha": "c0e032b1a77ad2b541f2d1a6e83fb5855c97db2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f532472da3e506db3609ebb03cff3d5f20f7353/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f532472da3e506db3609ebb03cff3d5f20f7353/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f532472da3e506db3609ebb03cff3d5f20f7353", "patch": "@@ -1,3 +1,30 @@\n+2017-08-31  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config.gcc: Use g.opt for arc.\n+\t* config/arc/arc.c (LEGITIMATE_SCALED_ADDRESS_P): Deleted,\n+\tfunctionality moved to ...\n+\t(legitimate_scaled_address_p): New function, ...here.\n+\t(LEGITIMATE_SMALL_DATA_OFFSET_P): New define.\n+\t(LEGITIMATE_SMALL_DATA_ADDRESS_P): Use the above define.\n+\t(legitimate_offset_address_p): Delete TARGET_NO_SDATA_SET\n+\tcondition.\n+\t(arc_override_options): Handle G option.\n+\t(arc_output_pic_addr_const): Correct function definition.\n+\t(arc_legitimate_address_p): Use legitimate_scaled_address_p.\n+\t(arc_decl_anon_ns_mem_p): Delete.\n+\t(arc_in_small_data_p): Overhaul this function to take into\n+\tconsideration the value given via G option.\n+\t(arc_rewrite_small_data_1): Renamed and corrected old\n+\tarc_rewrite_small_data function.\n+\t(arc_rewrite_small_data): New function.\n+\t(small_data_pattern): Don't use pic_offset_table_rtx.\n+\t* config/arc/arc.h (CC1_SPEC): Recognize G option.\n+\t* config/arc/simdext.md (movmisalignv2hi): Use\n+\tprepare_move_operands function.\n+\t(mov*): Likewise.\n+\t(movmisalign*): Likewise.\n+\t* doc/invoke.texi (ARC options): Document -G option.\n+\n 2017-08-31  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc-protos.h (compact_sda_memory_operand): Update"}, {"sha": "b5229766b312e1ac406481e1e771146bcbad2514", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f532472da3e506db3609ebb03cff3d5f20f7353/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f532472da3e506db3609ebb03cff3d5f20f7353/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=9f532472da3e506db3609ebb03cff3d5f20f7353", "patch": "@@ -318,7 +318,7 @@ arc*-*-*)\n \tcpu_type=arc\n \tc_target_objs=\"arc-c.o\"\n \tcxx_target_objs=\"arc-c.o\"\n-\textra_options=\"${extra_options} arc/arc-tables.opt\"\n+\textra_options=\"${extra_options} arc/arc-tables.opt g.opt\"\n \textra_headers=\"arc-simd.h\"\n \t;;\n arm*-*-*)"}, {"sha": "4dcac1892a7501890637ed6322629f47837ed95b", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 129, "deletions": 107, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f532472da3e506db3609ebb03cff3d5f20f7353/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f532472da3e506db3609ebb03cff3d5f20f7353/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=9f532472da3e506db3609ebb03cff3d5f20f7353", "patch": "@@ -79,26 +79,21 @@ static const char *arc_cpu_string = arc_cpu_name;\n \t\t      ? 0 \\\n \t\t      : -(-GET_MODE_SIZE (MODE) | -4) >> 1)))\n \n-#define LEGITIMATE_SCALED_ADDRESS_P(MODE, X, STRICT) \\\n-(GET_CODE (X) == PLUS \\\n- && GET_CODE (XEXP (X, 0)) == MULT \\\n- && RTX_OK_FOR_INDEX_P (XEXP (XEXP (X, 0), 0), (STRICT)) \\\n- && GET_CODE (XEXP (XEXP (X, 0), 1)) == CONST_INT \\\n- && ((GET_MODE_SIZE (MODE) == 2 && INTVAL (XEXP (XEXP (X, 0), 1)) == 2) \\\n-     || (GET_MODE_SIZE (MODE) == 4 && INTVAL (XEXP (XEXP (X, 0), 1)) == 4)) \\\n- && (RTX_OK_FOR_BASE_P (XEXP (X, 1), (STRICT)) \\\n-     || (flag_pic ? CONST_INT_P (XEXP (X, 1)) : CONSTANT_P (XEXP (X, 1)))))\n-\n-#define LEGITIMATE_SMALL_DATA_ADDRESS_P(X) \\\n-  (GET_CODE (X) == PLUS \\\n-   && (REG_P (XEXP ((X), 0)) && REGNO (XEXP ((X), 0)) == SDATA_BASE_REGNUM) \\\n-   && ((GET_CODE (XEXP((X),1)) == SYMBOL_REF \\\n-\t&& SYMBOL_REF_SMALL_P (XEXP ((X), 1))) \\\n-       || (GET_CODE (XEXP ((X), 1)) == CONST \\\n-\t   && GET_CODE (XEXP (XEXP ((X), 1), 0)) == PLUS \\\n-\t   && GET_CODE (XEXP (XEXP (XEXP ((X), 1), 0), 0)) == SYMBOL_REF \\\n-\t   && SYMBOL_REF_SMALL_P (XEXP (XEXP (XEXP ((X), 1), 0), 0)) \\\n-\t   && GET_CODE (XEXP(XEXP (XEXP ((X), 1), 0), 1)) == CONST_INT)))\n+#define LEGITIMATE_SMALL_DATA_OFFSET_P(X)\t\t\t\t\\\n+  (GET_CODE (X) == CONST\t\t\t\t\t\t\\\n+   && GET_CODE (XEXP ((X), 0)) == PLUS\t\t\t\t\t\\\n+   && GET_CODE (XEXP (XEXP ((X), 0), 0)) == SYMBOL_REF\t\t\t\\\n+   && SYMBOL_REF_SMALL_P (XEXP (XEXP ((X), 0), 0))\t\t\t\\\n+   && GET_CODE (XEXP(XEXP ((X), 0), 1)) == CONST_INT\t\t\t\\\n+   && INTVAL (XEXP (XEXP ((X), 0), 1)) <= g_switch_value)\n+\n+#define LEGITIMATE_SMALL_DATA_ADDRESS_P(X)\t\t\t\t\\\n+  (GET_CODE (X) == PLUS\t\t\t\t\t\t\t\\\n+     && REG_P (XEXP ((X), 0))\t\t\t\t\t\t\\\n+     && REGNO (XEXP ((X), 0)) == SDATA_BASE_REGNUM\t\t\t\\\n+     && ((GET_CODE (XEXP ((X), 1)) == SYMBOL_REF\t\t\t\\\n+\t    && SYMBOL_REF_SMALL_P (XEXP ((X), 1)))\t\t\t\\\n+\t || LEGITIMATE_SMALL_DATA_OFFSET_P (XEXP ((X), 1))))\n \n /* Array of valid operand punctuation characters.  */\n char arc_punct_chars[256];\n@@ -276,6 +271,61 @@ static bool arc_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT,\n /* Globally visible information about currently selected cpu.  */\n const arc_cpu_t *arc_selected_cpu;\n \n+static bool\n+legitimate_scaled_address_p (machine_mode mode, rtx op, bool strict)\n+{\n+  if (GET_CODE (op) != PLUS)\n+    return false;\n+\n+  if (GET_CODE (XEXP (op, 0)) != MULT)\n+    return false;\n+\n+  /* Check multiplication operands.  */\n+  if (!RTX_OK_FOR_INDEX_P (XEXP (XEXP (op, 0), 0), strict))\n+    return false;\n+\n+  if (!CONST_INT_P (XEXP (XEXP (op, 0), 1)))\n+    return false;\n+\n+  switch (GET_MODE_SIZE (mode))\n+    {\n+    case 2:\n+      if (INTVAL (XEXP (XEXP (op, 0), 1)) != 2)\n+\treturn false;\n+      break;\n+    case 8:\n+      if (!TARGET_LL64)\n+\treturn false;\n+      /*  Fall through. */\n+    case 4:\n+      if (INTVAL (XEXP (XEXP (op, 0), 1)) != 4)\n+\treturn false;\n+    default:\n+      return false;\n+    }\n+\n+  /* Check the base.  */\n+  if (RTX_OK_FOR_BASE_P (XEXP (op, 1), (strict)))\n+    return true;\n+\n+  if (flag_pic)\n+    {\n+      if (CONST_INT_P (XEXP (op, 1)))\n+\treturn true;\n+      return false;\n+    }\n+  if (CONSTANT_P (XEXP (op, 1)))\n+    {\n+      /* Scalled addresses for sdata is done other places.  */\n+      if (GET_CODE (XEXP (op, 1)) == SYMBOL_REF\n+\t  && SYMBOL_REF_SMALL_P (XEXP (op, 1)))\n+\treturn false;\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n /* Check for constructions like REG + OFFS, where OFFS can be a\n    register, an immediate or an long immediate. */\n \n@@ -301,8 +351,7 @@ legitimate_offset_address_p (machine_mode mode, rtx x, bool index, bool strict)\n       && (GET_MODE_SIZE (mode) <= 4)\n       /* Avoid small data which ends in something like GP +\n \t symb@sda.  */\n-      && (!SYMBOL_REF_SMALL_P (XEXP (x, 1))\n-\t  || TARGET_NO_SDATA_SET))\n+      && (!SYMBOL_REF_SMALL_P (XEXP (x, 1))))\n     return true;\n \n   return false;\n@@ -1117,6 +1166,10 @@ arc_override_options (void)\n   if (TARGET_COMPACT_CASESI)\n     TARGET_CASE_VECTOR_PC_RELATIVE = 1;\n \n+  /* Check for small data option */\n+  if (!global_options_set.x_g_switch_value && !TARGET_NO_SDATA_SET)\n+    g_switch_value = TARGET_LL64 ? 8 : 4;\n+\n   /* These need to be done at start up.  It's convenient to do them here.  */\n   arc_init ();\n }\n@@ -5422,7 +5475,7 @@ arc_legitimize_pic_address (rtx orig, rtx oldx)\n \n /* Output address constant X to FILE, taking PIC into account.  */\n \n-void\n+static void\n arc_output_pic_addr_const (FILE * file, rtx x, int code)\n {\n   char buf[256];\n@@ -5871,7 +5924,7 @@ arc_legitimate_address_p (machine_mode mode, rtx x, bool strict)\n      return true;\n   if (legitimate_offset_address_p (mode, x, TARGET_INDEXED_LOADS, strict))\n      return true;\n-  if (LEGITIMATE_SCALED_ADDRESS_P (mode, x, strict))\n+  if (legitimate_scaled_address_p (mode, x, strict))\n     return true;\n   if (LEGITIMATE_SMALL_DATA_ADDRESS_P (x))\n      return true;\n@@ -7465,28 +7518,6 @@ valid_brcc_with_delay_p (rtx *operands)\n   return brcc_nolimm_operator (operands[0], VOIDmode);\n }\n \n-/* ??? Hack.  This should no really be here.  See PR32143.  */\n-static bool\n-arc_decl_anon_ns_mem_p (const_tree decl)\n-{\n-  while (1)\n-    {\n-      if (decl == NULL_TREE || decl == error_mark_node)\n-\treturn false;\n-      if (TREE_CODE (decl) == NAMESPACE_DECL\n-\t  && DECL_NAME (decl) == NULL_TREE)\n-\treturn true;\n-      /* Classes and namespaces inside anonymous namespaces have\n-\t TREE_PUBLIC == 0, so we can shortcut the search.  */\n-      else if (TYPE_P (decl))\n-\treturn (TREE_PUBLIC (TYPE_NAME (decl)) == 0);\n-      else if (TREE_CODE (decl) == NAMESPACE_DECL)\n-\treturn (TREE_PUBLIC (decl) == 0);\n-      else\n-\tdecl = DECL_CONTEXT (decl);\n-    }\n-}\n-\n /* Implement TARGET_IN_SMALL_DATA_P.  Return true if it would be safe to\n    access DECL using %gp_rel(...)($gp).  */\n \n@@ -7495,60 +7526,43 @@ arc_in_small_data_p (const_tree decl)\n {\n   HOST_WIDE_INT size;\n \n-  /* Strings and functions are never in small data area.  */\n-  if (TREE_CODE (decl) == STRING_CST || TREE_CODE (decl) == FUNCTION_DECL)\n+  /* Only variables are going into small data area.  */\n+  if (TREE_CODE (decl) != VAR_DECL)\n     return false;\n \n   if (TARGET_NO_SDATA_SET)\n     return false;\n \n-  if (TREE_CODE (decl) == VAR_DECL && DECL_SECTION_NAME (decl) != 0)\n-    {\n-      const char *name;\n-\n-      /* Reject anything that isn't in a known small-data section.  */\n-      name = DECL_SECTION_NAME (decl);\n-      if (strcmp (name, \".sdata\") != 0 && strcmp (name, \".sbss\") != 0)\n-\treturn false;\n-\n-      /* If a symbol is defined externally, the assembler will use the\n-\t usual -G rules when deciding how to implement macros.  */\n-      if (!DECL_EXTERNAL (decl))\n-\t  return true;\n-    }\n-  /* Only global variables go into sdata section for now.  */\n-  else\n-    {\n-      /* Don't put constants into the small data section: we want them\n-\t to be in ROM rather than RAM.  */\n-      if (TREE_CODE (decl) != VAR_DECL)\n-\treturn false;\n-\n-      if (TREE_READONLY (decl)\n-\t  && !TREE_SIDE_EFFECTS (decl)\n-\t  && (!DECL_INITIAL (decl) || TREE_CONSTANT (DECL_INITIAL (decl))))\n-\treturn false;\n-\n-      /* TREE_PUBLIC might change after the first call, because of the patch\n-\t for PR19238.  */\n-      if (default_binds_local_p_1 (decl, 1)\n-\t  || arc_decl_anon_ns_mem_p (decl))\n-\treturn false;\n-\n-      /* To ensure -mvolatile-cache works\n-\t ld.di does not have a gp-relative variant.  */\n-      if (TREE_THIS_VOLATILE (decl))\n-\treturn false;\n-    }\n-\n   /* Disable sdata references to weak variables.  */\n   if (DECL_WEAK (decl))\n     return false;\n \n-  size = int_size_in_bytes (TREE_TYPE (decl));\n+  /* Don't put constants into the small data section: we want them to\n+     be in ROM rather than RAM.  */\n+  if (TREE_READONLY (decl))\n+    return false;\n+\n+  /* To ensure -mvolatile-cache works ld.di does not have a\n+     gp-relative variant.  */\n+  if (!TARGET_VOLATILE_CACHE_SET\n+      && TREE_THIS_VOLATILE (decl))\n+    return false;\n \n-  /* Allow only <=4B long data types into sdata.  */\n-  return (size > 0 && size <= 4);\n+  if (DECL_SECTION_NAME (decl) != 0)\n+    {\n+      const char *name = DECL_SECTION_NAME (decl);\n+      if (strcmp (name, \".sdata\") == 0\n+\t  || strcmp (name, \".sbss\") == 0)\n+\treturn true;\n+    }\n+  /* If it's not public, there's no need to put it in the small data\n+     section.  */\n+  else if (TREE_PUBLIC (decl))\n+    {\n+      size = int_size_in_bytes (TREE_TYPE (decl));\n+      return (size > 0 && size <= g_switch_value);\n+    }\n+  return false;\n }\n \n /* Return true if X is a small data address that can be rewritten\n@@ -7577,38 +7591,44 @@ arc_rewrite_small_data_p (const_rtx x)\n /* If possible, rewrite OP so that it refers to small data using\n    explicit relocations.  */\n \n-rtx\n-arc_rewrite_small_data (rtx op)\n+static rtx\n+arc_rewrite_small_data_1 (rtx op)\n {\n+  rtx rgp = gen_rtx_REG (Pmode, SDATA_BASE_REGNUM);\n   op = copy_insn (op);\n   subrtx_ptr_iterator::array_type array;\n   FOR_EACH_SUBRTX_PTR (iter, array, &op, ALL)\n     {\n       rtx *loc = *iter;\n       if (arc_rewrite_small_data_p (*loc))\n \t{\n-\t  gcc_assert (SDATA_BASE_REGNUM == PIC_OFFSET_TABLE_REGNUM);\n-\t  *loc = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, *loc);\n-\t  if (loc != &op)\n-\t    {\n-\t      if (GET_CODE (op) == MEM && &XEXP (op, 0) == loc)\n-\t\t; /* OK.  */\n-\t      else if (GET_CODE (op) == MEM\n-\t\t       && GET_CODE (XEXP (op, 0)) == PLUS\n-\t\t       && GET_CODE (XEXP (XEXP (op, 0), 0)) == MULT)\n-\t\t*loc = force_reg (Pmode, *loc);\n-\t      else\n-\t\tgcc_unreachable ();\n-\t    }\n+\t  *loc = gen_rtx_PLUS (Pmode, rgp, *loc);\n \t  iter.skip_subrtxes ();\n \t}\n       else if (GET_CODE (*loc) == PLUS\n-\t       && rtx_equal_p (XEXP (*loc, 0), pic_offset_table_rtx))\n+\t       && rtx_equal_p (XEXP (*loc, 0), rgp))\n \titer.skip_subrtxes ();\n     }\n   return op;\n }\n \n+rtx\n+arc_rewrite_small_data (rtx op)\n+{\n+  op = arc_rewrite_small_data_1 (op);\n+\n+  /* Check if we fit small data constraints.  */\n+  if (MEM_P (op)\n+      && !LEGITIMATE_SMALL_DATA_ADDRESS_P (XEXP (op, 0)))\n+    {\n+      rtx addr = XEXP (op, 0);\n+      rtx tmp = gen_reg_rtx (Pmode);\n+      emit_move_insn (tmp, addr);\n+      op = replace_equiv_address_nv (op, tmp);\n+    }\n+  return op;\n+}\n+\n /* Return true if OP refers to small data symbols directly, not through\n    a PLUS.  */\n \n@@ -7617,12 +7637,14 @@ small_data_pattern (rtx op, machine_mode)\n {\n   if (GET_CODE (op) == SEQUENCE)\n     return false;\n+\n+  rtx rgp = gen_rtx_REG (Pmode, SDATA_BASE_REGNUM);\n   subrtx_iterator::array_type array;\n   FOR_EACH_SUBRTX (iter, array, op, ALL)\n     {\n       const_rtx x = *iter;\n       if (GET_CODE (x) == PLUS\n-\t  && rtx_equal_p (XEXP (x, 0), pic_offset_table_rtx))\n+\t  && rtx_equal_p (XEXP (x, 0), rgp))\n \titer.skip_subrtxes ();\n       else if (arc_rewrite_small_data_p (x))\n \treturn true;"}, {"sha": "2c06f9fc305fbd6681b1ff227dc324f270370c29", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f532472da3e506db3609ebb03cff3d5f20f7353/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f532472da3e506db3609ebb03cff3d5f20f7353/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=9f532472da3e506db3609ebb03cff3d5f20f7353", "patch": "@@ -65,9 +65,9 @@ along with GCC; see the file COPYING3.  If not see\n %(subtarget_cpp_spec)\"\n \n #undef CC1_SPEC\n-#define CC1_SPEC \"\\\n-%{EB:%{EL:%emay not use both -EB and -EL}} \\\n-%{EB:-mbig-endian} %{EL:-mlittle-endian} \\\n+#define CC1_SPEC \"%{EB:%{EL:%emay not use both -EB and -EL}}\t\\\n+%{EB:-mbig-endian} %{EL:-mlittle-endian}\t\t\t\\\n+%{G*}\t\t\t\t\t\t\t\t\\\n \"\n extern const char *arc_cpu_to_as (int argc, const char **argv);\n "}, {"sha": "9f5b4a82e566dfbfc835221aece84111551279fd", "filename": "gcc/config/arc/simdext.md", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f532472da3e506db3609ebb03cff3d5f20f7353/gcc%2Fconfig%2Farc%2Fsimdext.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f532472da3e506db3609ebb03cff3d5f20f7353/gcc%2Fconfig%2Farc%2Fsimdext.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fsimdext.md?ref=9f532472da3e506db3609ebb03cff3d5f20f7353", "patch": "@@ -1383,19 +1383,18 @@\n  [(set (match_operand:V2HI 0 \"general_operand\" \"\")\n        (match_operand:V2HI 1 \"general_operand\" \"\"))]\n  \"\"\n-{\n- if (!register_operand (operands[0], V2HImode)\n-      && !register_operand (operands[1], V2HImode))\n-    operands[1] = force_reg (V2HImode, operands[1]);\n-})\n+ \"{\n+   if (prepare_move_operands (operands, V2HImode))\n+     DONE;\n+  }\")\n \n (define_expand \"mov<mode>\"\n   [(set (match_operand:VWH 0 \"move_dest_operand\" \"\")\n \t(match_operand:VWH 1 \"general_operand\" \"\"))]\n   \"\"\n   \"{\n-    if (GET_CODE (operands[0]) == MEM)\n-     operands[1] = force_reg (<MODE>mode, operands[1]);\n+    if (prepare_move_operands (operands, <MODE>mode))\n+     DONE;\n    }\")\n \n (define_insn_and_split \"*mov<mode>_insn\"\n@@ -1440,11 +1439,10 @@\n  [(set (match_operand:VWH 0 \"general_operand\" \"\")\n        (match_operand:VWH 1 \"general_operand\" \"\"))]\n  \"\"\n-{\n- if (!register_operand (operands[0], <MODE>mode)\n-      && !register_operand (operands[1], <MODE>mode))\n-    operands[1] = force_reg (<MODE>mode, operands[1]);\n-})\n+ \"{\n+   if (prepare_move_operands (operands, <MODE>mode))\n+     DONE;\n+  }\")\n \n (define_insn \"bswapv2hi2\"\n   [(set (match_operand:V2HI 0 \"register_operand\" \"=r,r\")"}, {"sha": "1241b1840ef52c83cefee5d1be6d49cb10db3697", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f532472da3e506db3609ebb03cff3d5f20f7353/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f532472da3e506db3609ebb03cff3d5f20f7353/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9f532472da3e506db3609ebb03cff3d5f20f7353", "patch": "@@ -614,7 +614,7 @@ Objective-C and Objective-C++ Dialects}.\n -mcrc  -mdsp-packa  -mdvbf  -mlock  -mmac-d16  -mmac-24  -mrtsc  -mswape @gol\n -mtelephony  -mxy  -misize  -mannotate-align  -marclinux  -marclinux_prof @gol\n -mlong-calls  -mmedium-calls  -msdata -mirq-ctrl-saved @gol\n--mrgf-banked-regs @gol\n+-mrgf-banked-regs -G @var{num} @gol\n -mvolatile-cache  -mtp-regno=@var{regno} @gol\n -malign-call  -mauto-modify-reg  -mbbit-peephole  -mno-brcc @gol\n -mcase-vector-pcrel  -mcompact-casesi  -mno-cond-exec  -mearly-cbranchsi @gol\n@@ -14896,6 +14896,13 @@ allow use of the 25-bit range, rather than the 21-bit range with\n conditional branch-and-link.  This is the default for tool chains built\n for @w{@code{arc-linux-uclibc}} and @w{@code{arceb-linux-uclibc}} targets.\n \n+@item -G @var{num}\n+@opindex G\n+Put definitions of externally-visible data in a small data section if\n+that data is no bigger than @var{num} bytes.  The default value of\n+@var{num} is 4 for any ARC configuration, or 8 when we have double\n+load/store operations.\n+\n @item -mno-sdata\n @opindex mno-sdata\n Do not generate sdata references.  This is the default for tool chains"}, {"sha": "cd63ace82501a13380d63dadc2b08777eb5c203a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f532472da3e506db3609ebb03cff3d5f20f7353/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f532472da3e506db3609ebb03cff3d5f20f7353/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f532472da3e506db3609ebb03cff3d5f20f7353", "patch": "@@ -1,3 +1,8 @@\n+2017-08-31  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/sdata-5.c: New test.\n+        * gcc.target/arc/arc700-stld-hazard.c: Update test options.\n+\n 2017-08-31  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/sdata-3.c: New file."}, {"sha": "eba03d8625681e7d0c42400fd92df7bb1871486b", "filename": "gcc/testsuite/gcc.target/arc/arc700-stld-hazard.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f532472da3e506db3609ebb03cff3d5f20f7353/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Farc700-stld-hazard.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f532472da3e506db3609ebb03cff3d5f20f7353/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Farc700-stld-hazard.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Farc700-stld-hazard.c?ref=9f532472da3e506db3609ebb03cff3d5f20f7353", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mcpu=arc700\" } */\n+/* { dg-options \"-mcpu=arc700 -mno-sdata\" } */\n \n volatile int a;\n volatile int b;"}, {"sha": "0d4eae5c4542892d6f66628d0bb6133e912e3e63", "filename": "gcc/testsuite/gcc.target/arc/sdata-5.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f532472da3e506db3609ebb03cff3d5f20f7353/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsdata-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f532472da3e506db3609ebb03cff3d5f20f7353/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsdata-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsdata-5.c?ref=9f532472da3e506db3609ebb03cff3d5f20f7353", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -msdata\" } */\n+\n+/* Check interaction between section anchors and small data. */\n+\n+const int a[1] = {};\n+static short b[] = {};\n+\n+int c;\n+\n+const int* fn1 (void)\n+{\n+  return a + b[c];\n+}\n+/* { dg-final { scan-assembler \"@c@sda\" } } */"}]}