{"sha": "cdece1efd184a99037324ebc23f5294b9a2e8168", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RlY2UxZWZkMTg0YTk5MDM3MzI0ZWJjMjNmNTI5NGI5YTJlODE2OA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-23T11:39:59Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-23T11:39:59Z"}, "message": "(dbxout_type): Use int_size_in_bytes instead of size_in_bytes for\nconsistency with other code.\n\nFrom-SVN: r3834", "tree": {"sha": "563917927556de7bf3a1bfa05ac9d282c73ab7b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/563917927556de7bf3a1bfa05ac9d282c73ab7b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdece1efd184a99037324ebc23f5294b9a2e8168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdece1efd184a99037324ebc23f5294b9a2e8168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdece1efd184a99037324ebc23f5294b9a2e8168", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdece1efd184a99037324ebc23f5294b9a2e8168/comments", "author": null, "committer": null, "parents": [{"sha": "1ef1ca81c3e3725828eab62bd15b2d8f866d5215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef1ca81c3e3725828eab62bd15b2d8f866d5215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef1ca81c3e3725828eab62bd15b2d8f866d5215"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "27b996e9bfeebf6d462087da2776916d0e561d9e", "filename": "gcc/dbxout.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdece1efd184a99037324ebc23f5294b9a2e8168/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdece1efd184a99037324ebc23f5294b9a2e8168/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=cdece1efd184a99037324ebc23f5294b9a2e8168", "patch": "@@ -1012,7 +1012,7 @@ dbxout_type (type, full, show_arg_types)\n       /* This used to say `r1' and we used to take care\n \t to make sure that `int' was type number 1.  */\n       fprintf (asmfile, \"r%d;%d;0;\", TYPE_SYMTAB_ADDRESS (integer_type_node),\n-\t       TREE_INT_CST_LOW (size_in_bytes (type)));\n+\t       int_size_in_bytes (type));\n       CHARS (16);\n       break;\n \n@@ -1042,14 +1042,14 @@ dbxout_type (type, full, show_arg_types)\n \t{\n \t  fprintf (asmfile, \"r%d;%d;0;\",\n \t\t   TYPE_SYMTAB_ADDRESS (type),\n-\t\t   TREE_INT_CST_LOW (size_in_bytes (TREE_TYPE (type))));\n+\t\t   int_size_in_bytes (TREE_TYPE (type)));\n \t  CHARS (15);\t\t/* The number is probably incorrect here.  */\n \t}\n       else\n \t{\n \t  /* Output a complex integer type as a structure,\n \t     pending some other way to do it.  */\n-\t  fprintf (asmfile, \"s%d\", TREE_INT_CST_LOW (size_in_bytes (type)));\n+\t  fprintf (asmfile, \"s%d\", int_size_in_bytes (type));\n \n \t  fprintf (asmfile, \"real:\");\n \t  CHARS (10);\n@@ -1135,11 +1135,10 @@ dbxout_type (type, full, show_arg_types)\n \t    typevec[TYPE_SYMTAB_ADDRESS (type)] = TYPE_XREF;\n \t    break;\n \t  }\n-\ttem = size_in_bytes (type);\n \n \t/* Identify record or union, and print its size.  */\n \tfprintf (asmfile, (TREE_CODE (type) == RECORD_TYPE) ? \"s%d\" : \"u%d\",\n-\t\t TREE_INT_CST_LOW (tem));\n+\t\t int_size_in_bytes (type));\n \n \tif (use_gnu_debug_info_extensions)\n \t  {"}]}