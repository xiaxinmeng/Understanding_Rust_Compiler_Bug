{"sha": "8535755af70f819d820553b2e73e72a16a984599", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUzNTc1NWFmNzBmODE5ZDgyMDU1M2IyZTczZTcyYTE2YTk4NDU5OQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-04-16T15:58:50Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-04-16T15:58:50Z"}, "message": "SVE: Fix wrong sve predicate split (PR100048)\n\nThe attached testcase generates the following paradoxical subregs when creating\nthe predicates.\n\n(insn 22 21 23 2 (set (reg:VNx8BI 100)\n\t(subreg:VNx8BI (reg:VNx2BI 103) 0))\n     (expr_list:REG_EQUAL (const_vector:VNx8BI [\n\t\t(const_int 1 [0x1])\n\t\t(const_int 0 [0])\n\t\t(const_int 1 [0x1])\n\t(const_int 0 [0]) repeated x5\n\t    ])\n\t(nil)))\n\nand\n\n(insn 15 14 16 2 (set (reg:VNx8BI 96)\n\t(subreg:VNx8BI (reg:VNx2BI 99) 0))\n     (expr_list:REG_EQUAL (const_vector:VNx8BI [\n\t\t(const_int 1 [0x1])\n\t\t(const_int 0 [0]) repeated x7\n\t    ])\n\t(nil)))\n\nThis causes CSE to incorrectly think that the two predicates are equal because\nsome of the significant bits get ignored due to the subreg.\n\nThe attached patch instead makes it so it always looks at all 16-bits of the\npredicate, but in turn means we need to generate a TRN that matches the expected\nresult mode.  In effect in RTL we keep the mode as VNx16BI but during codegen\nre-interpret them as the mode the predicate instruction wanted:\n\n(insn 10 9 11 2 (set (reg:VNx8BI 96)\n\t(subreg:VNx8BI (reg:VNx16BI 99) 0))\n     (expr_list:REG_EQUAL (const_vector:VNx8BI [\n\t\t(const_int 1 [0x1])\n\t\t(const_int 0 [0]) repeated x7\n\t    ])\n\t(nil)))\n\nWhich needed correction to the TRN pattern.  A new TRN1_CONV unspec is\nintroduced which allows one to keep the arguments as VNx16BI but encode the\ninstruction as a type of the last operand.\n\n(insn 9 8 10 2 (set (reg:VNx16BI 99)\n\t(unspec:VNx16BI [\n\t\t(reg:VNx16BI 97)\n\t\t(reg:VNx16BI 98)\n\t\t(reg:VNx2BI 100)\n\t    ] UNSPEC_TRN1_CONV))\n\t(nil))\n\nThis allows us remove all the paradoxical subregs and end up with\n\n(insn 16 15 17 2 (set (reg:VNx8BI 101)\n\t(subreg:VNx8BI (reg:VNx16BI 104) 0))\n\t(expr_list:REG_EQUAL (const_vector:VNx8BI [\n\t\t(const_int 1 [0x1])\n\t\t(const_int 0 [0])\n\t\t(const_int 1 [0x1])\n\t\t(const_int 0 [0]) repeated x5\n\t    ])\n\t(nil)))\n\ngcc/ChangeLog:\n\n\tPR target/100048\n\t* config/aarch64/aarch64-sve.md (@aarch64_sve_trn1_conv<mode>): New.\n\t* config/aarch64/aarch64.c (aarch64_expand_sve_const_pred_trn): Use new\n\tTRN optab.\n\t* config/aarch64/iterators.md (UNSPEC_TRN1_CONV): New.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/100048\n\t* gcc.target/aarch64/sve/pr100048.c: New test.", "tree": {"sha": "3cbae871877bab2f2819b7355b578b7f00851d29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cbae871877bab2f2819b7355b578b7f00851d29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8535755af70f819d820553b2e73e72a16a984599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8535755af70f819d820553b2e73e72a16a984599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8535755af70f819d820553b2e73e72a16a984599", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8535755af70f819d820553b2e73e72a16a984599/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35e8b38a91d9fb49a4759649576f15e76c129d99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35e8b38a91d9fb49a4759649576f15e76c129d99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35e8b38a91d9fb49a4759649576f15e76c129d99"}], "stats": {"total": 50, "additions": 45, "deletions": 5}, "files": [{"sha": "b8b6f55e1607e5697620bf205fbe9edf3be7c549", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535755af70f819d820553b2e73e72a16a984599/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535755af70f819d820553b2e73e72a16a984599/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=8535755af70f819d820553b2e73e72a16a984599", "patch": "@@ -8657,6 +8657,20 @@\n   \"<perm_insn>\\t%0.<Vetype>, %1.<Vetype>, %2.<Vetype>\"\n )\n \n+;; Special purpose permute used by the predicate generation instructions.\n+;; Unlike the normal permute patterns, these instructions operate on VNx16BI\n+;; regardless of the element size, so that all input and output bits are\n+;; well-defined.  Operand 3 then indicates the size of the permute.\n+(define_insn \"@aarch64_sve_trn1_conv<mode>\"\n+  [(set (match_operand:VNx16BI 0 \"register_operand\" \"=Upa\")\n+\t(unspec:VNx16BI [(match_operand:VNx16BI 1 \"register_operand\" \"Upa\")\n+\t\t\t (match_operand:VNx16BI 2 \"register_operand\" \"Upa\")\n+\t\t\t (match_operand:PRED_ALL 3 \"aarch64_simd_imm_zero\")]\n+\t\t\tUNSPEC_TRN1_CONV))]\n+  \"TARGET_SVE\"\n+  \"trn1\\t%0.<PRED_ALL:Vetype>, %1.<PRED_ALL:Vetype>, %2.<PRED_ALL:Vetype>\"\n+)\n+\n ;; =========================================================================\n ;; == Conversions\n ;; ========================================================================="}, {"sha": "09d79f67a61ee3c1c56cc2d5b1771fdbff276808", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535755af70f819d820553b2e73e72a16a984599/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535755af70f819d820553b2e73e72a16a984599/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=8535755af70f819d820553b2e73e72a16a984599", "patch": "@@ -5535,12 +5535,12 @@ aarch64_expand_sve_const_pred_trn (rtx target, rtx_vector_builder &builder,\n \t}\n     }\n \n-  /* Emit the TRN1 itself.  */\n+  /* Emit the TRN1 itself.  We emit a TRN that operates on VNx16BI\n+     operands but permutes them as though they had mode MODE.  */\n   machine_mode mode = aarch64_sve_pred_mode (permute_size).require ();\n-  target = aarch64_target_reg (target, mode);\n-  emit_insn (gen_aarch64_sve (UNSPEC_TRN1, mode, target,\n-\t\t\t      gen_lowpart (mode, a),\n-\t\t\t      gen_lowpart (mode, b)));\n+  target = aarch64_target_reg (target, GET_MODE (a));\n+  rtx type_reg = CONST0_RTX (mode);\n+  emit_insn (gen_aarch64_sve_trn1_conv (mode, target, a, b, type_reg));\n   return target;\n }\n "}, {"sha": "cac33ae812b382cd55611b0da8a6e9eac3a513c4", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535755af70f819d820553b2e73e72a16a984599/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535755af70f819d820553b2e73e72a16a984599/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=8535755af70f819d820553b2e73e72a16a984599", "patch": "@@ -649,6 +649,7 @@\n     UNSPEC_UZP2Q\t; Used in aarch64-sve.md.\n     UNSPEC_ZIP1Q\t; Used in aarch64-sve.md.\n     UNSPEC_ZIP2Q\t; Used in aarch64-sve.md.\n+    UNSPEC_TRN1_CONV\t; Used in aarch64-sve.md.\n     UNSPEC_COND_CMPEQ_WIDE ; Used in aarch64-sve.md.\n     UNSPEC_COND_CMPGE_WIDE ; Used in aarch64-sve.md.\n     UNSPEC_COND_CMPGT_WIDE ; Used in aarch64-sve.md."}, {"sha": "525933863f7d67d76ba7afa4321346efa27ba000", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr100048.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535755af70f819d820553b2e73e72a16a984599/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr100048.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535755af70f819d820553b2e73e72a16a984599/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr100048.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr100048.c?ref=8535755af70f819d820553b2e73e72a16a984599", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-additional-options \"-O2 -fno-schedule-insns\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"arm_sve.h\"\n+\n+/*\n+** foo:\n+**        ptrue   (p[0-7])\\.d, all\n+**        pfalse  (p[0-7])\\.b\n+**        ptrue   (p[0-7])\\.s, all\n+**        trn1    (p[0-7])\\.d, \\2\\.d, \\3\\.d\n+**        trn1    \\2\\.d, \\1\\.d, \\3\\.d\n+**        faddv   (h[0-31]), \\4\\, (z[0-31]).h\n+**        faddv   (h[0-31]), \\2\\, \\6\\.h\n+**        str     \\5, [x0]\n+**        str     \\7, [x0, 2]\n+**        ret\n+*/\n+void foo(svfloat16_t in, float16_t *dst) {\n+  const svbool_t pg_q0 = svdupq_n_b16(1, 0, 1, 0, 0, 0, 0, 0);\n+  const svbool_t pg_f0 = svdupq_n_b16(1, 0, 0, 0, 0, 0, 0, 0);\n+  dst[0] = svaddv_f16(pg_f0, in);\n+  dst[1] = svaddv_f16(pg_q0, in);\n+}\n+"}]}