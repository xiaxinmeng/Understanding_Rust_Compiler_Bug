{"sha": "d19202bab3d154185de0da52cf3856e00fe78cd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE5MjAyYmFiM2QxNTQxODVkZTBkYTUyY2YzODU2ZTAwZmU3OGNkNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-08-05T22:16:51Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-08-05T22:16:51Z"}, "message": "gcov.c (output_data): Round to % to nearest, tweak formatting.\n\ngcc:\n\t* gcov.c (output_data): Round to % to nearest, tweak formatting.\ntestsuite:\n\t* lib/gcov.exp: Tweak expected line formats.\n\t* gcc.misc-tests/gcov8.c: New test.\n\t* gcc.misc-tests/gcov8.x: New flags.\n\nFrom-SVN: r56059", "tree": {"sha": "14ce17895d333e555a6871437542358a5ed0beac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14ce17895d333e555a6871437542358a5ed0beac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d19202bab3d154185de0da52cf3856e00fe78cd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19202bab3d154185de0da52cf3856e00fe78cd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d19202bab3d154185de0da52cf3856e00fe78cd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19202bab3d154185de0da52cf3856e00fe78cd6/comments", "author": null, "committer": null, "parents": [{"sha": "1bed5ee327933809acc2bb4a95fdcf8254d7ffa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bed5ee327933809acc2bb4a95fdcf8254d7ffa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bed5ee327933809acc2bb4a95fdcf8254d7ffa5"}], "stats": {"total": 194, "additions": 94, "deletions": 100}, "files": [{"sha": "63354cac78b474ed93fdfeb6bc368f5ffe23b450", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19202bab3d154185de0da52cf3856e00fe78cd6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19202bab3d154185de0da52cf3856e00fe78cd6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d19202bab3d154185de0da52cf3856e00fe78cd6", "patch": "@@ -1,3 +1,7 @@\n+2002-08-05  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* gcov.c (output_data): Round to % to nearest, tweak formatting.\n+\n 2002-08-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* fold-const.c (associate_trees): Only optimize NEGATE_EXPR in one"}, {"sha": "e28aac076fc10de3bf3e2d6e58dc88a9b6e1a57e", "filename": "gcc/gcov.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19202bab3d154185de0da52cf3856e00fe78cd6/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19202bab3d154185de0da52cf3856e00fe78cd6/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=d19202bab3d154185de0da52cf3856e00fe78cd6", "patch": "@@ -1134,10 +1134,10 @@ format_hwint (top, bottom, dp)\n       for (ix = dp; ix--; )\n \tlimit *= 10;\n       \n-      percent = (unsigned) (ratio * limit);\n-      if (!percent && top)\n+      percent = (unsigned) (ratio * limit + (float)0.5);\n+      if (percent <= 0 && top)\n \tpercent = 1;\n-      else if (percent == limit && top != bottom)\n+      else if (percent >= limit && top != bottom)\n \tpercent = limit - 1;\n       ix = sprintf (buffer, \"%.*u%%\", dp + 1, percent);\n       if (dp)\n@@ -1607,22 +1607,22 @@ output_data ()\n \t\t      if (a_ptr->call_insn)\n \t\t\t{\n \t\t\t  if (a_ptr->total == 0)\n-\t\t\t    fnotice (gcov_file, \"call   %2d: never executed\\n\", i);\n+\t\t\t    fnotice (gcov_file, \"call   %2d never executed\\n\", i);\n \t\t\t  else\n \t\t\t    fnotice\n-\t\t\t      (gcov_file, \"call   %2d: returns %s\\n\", i,\n+\t\t\t      (gcov_file, \"call   %2d returns %s\\n\", i,\n \t\t\t       format_hwint (a_ptr->total - a_ptr->hits,\n \t\t\t\t\t     a_ptr->total,\n \t\t\t\t\t     -output_branch_counts));\n \t\t\t}\n \t\t      else\n \t\t\t{\n \t\t\t  if (a_ptr->total == 0)\n-\t\t\t    fnotice (gcov_file, \"branch %2d: never executed\\n\",\n+\t\t\t    fnotice (gcov_file, \"branch %2d never executed\\n\",\n \t\t\t\t     i);\n \t\t\t  else\n \t\t\t    fnotice\n-\t\t\t      (gcov_file, \"branch %2d: taken %s\\n\", i,\n+\t\t\t      (gcov_file, \"branch %2d taken %s\\n\", i,\n \t\t\t       format_hwint (a_ptr->hits, a_ptr->total,\n \t\t\t\t\t     -output_branch_counts));\n \t\t\t}"}, {"sha": "b9de8f5aaf7988a7967373799ae18258f19ea8d1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19202bab3d154185de0da52cf3856e00fe78cd6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19202bab3d154185de0da52cf3856e00fe78cd6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d19202bab3d154185de0da52cf3856e00fe78cd6", "patch": "@@ -1,3 +1,9 @@\n+2002-08-05  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* lib/gcov.exp: Tweak expected line formats.\n+\t* gcc.misc-tests/gcov8.c: New test.\n+\t* gcc.misc-tests/gcov8.x: New flags.\n+\n 2002-08-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* consistency.vlad/layout/endian.c: Include string.h."}, {"sha": "58eec64555837c73a1533c01a7bb298621d47b9f", "filename": "gcc/testsuite/gcc.misc-tests/gcov-8.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19202bab3d154185de0da52cf3856e00fe78cd6/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19202bab3d154185de0da52cf3856e00fe78cd6/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-8.c?ref=d19202bab3d154185de0da52cf3856e00fe78cd6", "patch": "@@ -0,0 +1,47 @@\n+/* Check that gcov correctly rounds nearly zero to non-zero and nearly\n+   100 to not-100.\n+\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Nathan Sidwell <nathan@codesourcery.com>\n+*/\n+\n+/* { dg-options \"-fprofile-arcs -ftest-coverage\" } */\n+/* { dg-do run { target native } } */\n+\n+int proxy (int i)\n+{\n+  return i;\n+}\n+\n+int foo (int i)\n+{\n+  if (i > 0) /* branch(1) */\n+    return proxy (1);\n+  else if (i < 0) /* branch(100) */\n+    return proxy (-1);\n+  else\n+    return proxy (0);\n+}\n+\n+int baz (int i)\n+{\n+  if (i == 0) /* branch(99) */\n+    return proxy (0);\n+  else if (i > 0) /* branch(0)*/\n+    return proxy (1);\n+  else\n+    return proxy (-1);\n+}\n+\n+int main ()\n+{\n+  int t = 0;\n+  int ix;\n+\n+  for (ix = 0; ix != 1000; ix++)\n+    t += foo (ix) + baz (ix);\n+  \n+  return t == 0;\n+}\n+\n+/* { dg-final { run-gcov -b gcov-8.c } } */"}, {"sha": "b01ef42b9d772316f3c99c588e2042897a94c63e", "filename": "gcc/testsuite/gcc.misc-tests/gcov-8.x", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19202bab3d154185de0da52cf3856e00fe78cd6/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19202bab3d154185de0da52cf3856e00fe78cd6/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-8.x?ref=d19202bab3d154185de0da52cf3856e00fe78cd6", "patch": "@@ -0,0 +1,2 @@\n+set gcov_verify_branches 1\n+return 0"}, {"sha": "672156eb9ed1990dfb9779f2906cd29fa95cef82", "filename": "gcc/testsuite/lib/gcov.exp", "status": "modified", "additions": 28, "deletions": 93, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19202bab3d154185de0da52cf3856e00fe78cd6/gcc%2Ftestsuite%2Flib%2Fgcov.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19202bab3d154185de0da52cf3856e00fe78cd6/gcc%2Ftestsuite%2Flib%2Fgcov.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcov.exp?ref=d19202bab3d154185de0da52cf3856e00fe78cd6", "patch": "@@ -38,36 +38,21 @@ proc clean-gcov { testcase } {\n #\n proc verify-lines { testcase file } {\n     #send_user \"verify-lines\\n\"\n-    global subdir\n     set failed 0\n-    set lmessage \"\"\n-    set output [grep $file \".*count\\\\(\\[0-9\\]+\\\\)\" line]\n-    #send_user \"output:$output\\n\"\n-    foreach line $output {\n-\tverbose \"Processing count line: $line\" 3\n-\t#send_user \"line:$line\\n\"\n-\tif [regexp \"(\\[0-9\\]+) *(\\[0-9\\]+).*count\\\\((\\[0-9\\]+)\\\\)\" \\\n-\t\t\"$line\" all n is shouldbe] {\n-\t    #send_user \"n $n:is $is:shouldbe $shouldbe\\n\"\n+    set fd [open $file r]\n+    while { [gets $fd line] >= 0 } {\n+\tif [regexp \"^ *(\\[^:]*): *(\\[0-9\\]+):.*count\\\\((\\[0-9\\]+)\\\\)\" \\\n+\t\t\"$line\" all is n shouldbe] {\n \t    if { $is == \"\" } {\n-\t\tif { $failed == 0 } {\n-\t\t    set lmessage \"$n:no data available for this line\"\n-\t\t}\n+\t\tfail \"$n:no data available for this line\"\n \t\tincr failed\n \t    } elseif { $is != $shouldbe } {\n-\t\tif { $failed == 0 } {\n-\t\t    set lmessage \"$n:is $is:should be $shouldbe\"\n-\t\t}\n+\t\tfail \"$n:is $is:should be $shouldbe\"\n \t\tincr failed\n \t    }\n-\t} else {\n-\t    if { $failed == 0 } {\n-\t        set lmessage \"can't parse $line (in wrong place?)\"\n-\t    }\n-\t    incr failed\n \t}\n     }\n-    return [list $failed $lmessage]\n+    return $failed\n }\n \n #\n@@ -90,25 +75,18 @@ proc verify-lines { testcase file } {\n #\n proc verify-branches { testcase file } {\n     #send_user \"verify-branches\\n\"\n-    global bmessage\n-    global subdir\n     set failed 0\n-    set bmessage \"\"\n     set shouldbe \"\"\n     set fd [open $file r]\n     set n 0\n     while { [gets $fd line] >= 0 } {\n-\tincr n\n+\tregexp \"^\\[^:\\]+: *(\\[0-9\\]+):\" \"$line\" all n\n \tif [regexp \"branch\" $line] {\n \t    verbose \"Processing branch line $n: $line\" 3\n \t    if [regexp \"branch\\\\((\\[0-9 \\]+)\\\\)\" \"$line\" all new_shouldbe] {\n \t\t# All percentages in the current list should have been seen.\n \t\tif {[llength $shouldbe] != 0} {\n-\t\t    if { $failed == 0 } {\n-\t\t        set bmessage \\\n-\t\t\t  \"$n: expected branch percentages not found: $shouldbe\"\n-\t\t    }\n-\t\t    #send_user \"$n: expected branch percentages not found: $shouldbe\\n\"\n+\t\t    fail \"$n: expected branch percentages not found: $shouldbe\"\n \t\t    incr failed\n \t\t    set shouldbe \"\"\n \t\t}\n@@ -123,21 +101,17 @@ proc verify-branches { testcase file } {\n \t\t\tset shouldbe [lreplace $shouldbe $i $i [expr 100 - $num]]\n \t\t    }\n \t\t}\n-\t    } elseif [regexp \"branch \\[0-9\\]+ taken = (-\\[0-9\\]+)%\" \"$line\" \\\n+\t    } elseif [regexp \"branch +\\[0-9\\]+ taken (-\\[0-9\\]+)%\" \"$line\" \\\n \t\t\tall taken] {\n \t\t# Percentages should never be negative.\n-\t\tif { $failed == 0 } {\n-\t\t    set bmessage \"$n: negative percentage: $taken\"\n-\t\t}\n+\t\tfail \"$n: negative percentage: $taken\"\n \t\tincr failed\n-\t    } elseif [regexp \"branch \\[0-9\\]+ taken = (\\[0-9\\]+)%\" \"$line\" \\\n+\t    } elseif [regexp \"branch +\\[0-9\\]+ taken (\\[0-9\\]+)%\" \"$line\" \\\n \t\t\tall taken] {\n \t\t#send_user \"$n: taken = $taken\\n\"\n \t\t# Percentages should never be greater than 100.\n \t\tif {$taken > 100} {\n-\t\t    if { $failed == 0 } {\n-\t\t\tset bmessage \"$n: percentage greater than 100: $taken\"\n-\t\t    }\n+\t\t    fail \"$n: percentage greater than 100: $taken\"\n \t\t    incr failed\n \t\t}\n \t\tif {$taken > 50} {\n@@ -152,11 +126,7 @@ proc verify-branches { testcase file } {\n \t    } elseif [regexp \"branch\\\\(end\\\\)\" \"$line\"] {\n \t\t# All percentages in the list should have been seen by now.\n \t\tif {[llength $shouldbe] != 0} {\n-\t\t    if { $failed == 0 } {\n-\t\t\tset bmessage \\\n-\t\t\t  \"$n: expected branch percentages not found: $shouldbe\"\n-\t\t    }\n-\t\t    #send_user \"$n: expected branch percentages not found: $shouldbe\\n\"\n+\t\t    fail \"$n: expected branch percentages not found: $shouldbe\"\n \t\t    incr failed\n \t\t}\n \t\tset shouldbe \"\"\n@@ -165,14 +135,11 @@ proc verify-branches { testcase file } {\n     }\n     # All percentages in the list should have been seen.\n     if {[llength $shouldbe] != 0} {\n-\tif { $failed == 0 } {\n-\t    set bmessage \"$n: expected branch percentages not found: $shouldbe\"\n-\t}\n-\t#send_user \"$n: expected branch percentages not found: $shouldbe\\n\"\n+\tfail \"$n: expected branch percentages not found: $shouldbe\"\n \tincr failed\n     }\n     close $fd\n-    return [list $failed $bmessage]\n+    return $failed\n }\n \n #\n@@ -195,37 +162,29 @@ proc verify-branches { testcase file } {\n #\n proc verify-calls { testcase file } {\n     #send_user \"verify-calls\\n\"\n-    global cmessage\n-    global subdir\n     set failed 0\n-    set cmessage \"\"\n     set shouldbe \"\"\n     set fd [open $file r]\n     set n 0\n     while { [gets $fd line] >= 0 } {\n-\tincr n\n+\tregexp \"^\\[^:\\]+: *(\\[0-9\\]+):\" \"$line\" all n\n \tif [regexp \"returns\" $line] {\n \t    verbose \"Processing returns line $n: $line\" 3\n \t    if [regexp \"returns\\\\((\\[0-9 \\]+)\\\\)\" \"$line\" all new_shouldbe] {\n \t\t# All percentages in the current list should have been seen.\n \t\tif {[llength $shouldbe] != 0} {\n-\t\t    if { $failed == 0 } {\n-\t\t        set cmessage \\\n-\t\t\t  \"$n: expected return percentages not found: $shouldbe\"\n-\t\t    }\n+\t\t    fail \"$n: expected return percentages not found: $shouldbe\"\n \t\t    incr failed\n \t\t    set shouldbe \"\"\n \t\t}\n \t        # Record the percentages to check for.\n \t\tset shouldbe $new_shouldbe\n-\t    } elseif [regexp \"call \\[0-9\\]+ returns = (-\\[0-9\\]+)%\" \"$line\" \\\n+\t    } elseif [regexp \"call +\\[0-9\\]+ returns (-\\[0-9\\]+)%\" \"$line\" \\\n \t\t\tall returns] {\n \t\t# Percentages should never be negative.\n-\t\tif { $failed == 0 } {\n-\t\t    set cmessage \"$n: negative percentage: $returns\"\n-\t\t}\n+\t\tfail \"$n: negative percentage: $returns\"\n \t\tincr failed\n-\t    } elseif [regexp \"call \\[0-9\\]+ returns = (\\[0-9\\]+)%\" \"$line\" \\\n+\t    } elseif [regexp \"call +\\[0-9\\]+ returns (\\[0-9\\]+)%\" \"$line\" \\\n \t\t\tall returns] {\n \t\t# For branches we check that percentages are not greater than\n \t\t# 100 but call return percentages can be, as for setjmp(), so\n@@ -240,10 +199,7 @@ proc verify-calls { testcase file } {\n \t    } elseif [regexp \"returns\\\\(end\\\\)\" \"$line\"] {\n \t\t# All percentages in the list should have been seen by now.\n \t\tif {[llength $shouldbe] != 0} {\n-\t\t    if { $failed == 0 } {\n-\t\t\tset cmessage \\\n-\t\t\t  \"$n: expected return percentages not found: $shouldbe\"\n-\t\t    }\n+\t\t    fail \"$n: expected return percentages not found: $shouldbe\"\n \t\t    incr failed\n \t\t}\n \t\tset shouldbe \"\"\n@@ -252,13 +208,11 @@ proc verify-calls { testcase file } {\n     }\n     # All percentages in the list should have been seen.\n     if {[llength $shouldbe] != 0} {\n-\tif { $failed == 0 } {\n-\t    set cmessage \"$n: expected return percentages not found: $shouldbe\"\n-\t}\n+\tfail \"$n: expected return percentages not found: $shouldbe\"\n \tincr failed\n     }\n     close $fd\n-    return [list $failed $cmessage]\n+    return $failed\n }\n \n # Called by dg-final to run gcov and analyze the results.\n@@ -314,45 +268,26 @@ proc run-gcov { args } {\n     }\n \n     # Check that line execution counts are as expected.\n-    set loutput [verify-lines $testcase $testcase.gcov]\n-    set lfailed [lindex $loutput 0]\n-    set lmessage [lindex $loutput 1]\n+    set lfailed [verify-lines $testcase $testcase.gcov]\n \n     # If requested via the .x file, check that branch and call information\n     # is correct.\n     if [info exists gcov_verify_branches] {\n-\tset boutput [verify-branches $testcase $testcase.gcov]\n-\tset bfailed [lindex $boutput 0]\n-\tset bmessage [lindex $boutput 1]\n+\tset bfailed [verify-branches $testcase $testcase.gcov]\n     } else {\n \tset bfailed 0\n-\tset bmessage \"\"\n     }\n     if [info exists gcov_verify_calls] {\n-\tset coutput [verify-calls $testcase $testcase.gcov]\n-\tset cfailed [lindex $coutput 0]\n-\tset cmessage [lindex $coutput 1]\n+\tset cfailed [verify-calls $testcase $testcase.gcov]\n     } else {\n \tset cfailed 0\n-\tset cmessage \"\"\n     }\n \n     # Report whether the gcov test passed or failed.  If there were\n     # multiple failures then the message is a summary.\n     set tfailed [expr $lfailed + $bfailed + $cfailed]\n     if { $tfailed > 0 } {\n-\tif { $tfailed == 1 } {\n-\t    set vmessage \"$lmessage$bmessage$cmessage\"\n-\t} elseif { $bfailed == 0 && $cfailed == 0 } {\n-\t    set vmessage \"$lfailed failures in line counts\"\n-\t} elseif { $lfailed == 0 && $cfailed == 0 } {\n-\t    set vmessage \"$bfailed failures in branch percentages\"\n-\t} elseif { $lfailed == 0 && $bfailed == 0 } {\n-\t    set vmessage \"$cfailed failures in return percentages\"\n-\t} else {\n-\t    set vmessage \"$lfailed failures in line counts, $bfailed in branch percentages, $cfailed in return percentages\"\n-\t}\n-\tfail \"$subdir/$testcase gcov: $vmessage\"\n+\tfail \"$subdir/$testcase gcov: $lfailed failures in line counts, $bfailed in branch percentages, $cfailed in return percentages\"\n     } else {\n \tpass \"$subdir/$testcase gcov\"\n \tclean-gcov $testcase"}]}