{"sha": "b1e3ddfd2914dda056da9533f55ffeb291975b10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFlM2RkZmQyOTE0ZGRhMDU2ZGE5NTMzZjU1ZmZlYjI5MTk3NWIxMA==", "commit": {"author": {"name": "Aaron Jackson", "email": "jackson@negril.msrce.howard.edu", "date": "1997-09-29T06:37:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-29T06:37:11Z"}, "message": "Makefile.in (bootstrap-lean): New target.\n\n        * Makefile.in (bootstrap-lean): New target.\n        * gcc/Makefile.in (bootstrap-lean, compare-lean): New targets.\n\nFrom-SVN: r15786", "tree": {"sha": "84576198ea7ea61999328571beccbf475c738bb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84576198ea7ea61999328571beccbf475c738bb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1e3ddfd2914dda056da9533f55ffeb291975b10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1e3ddfd2914dda056da9533f55ffeb291975b10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1e3ddfd2914dda056da9533f55ffeb291975b10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1e3ddfd2914dda056da9533f55ffeb291975b10/comments", "author": null, "committer": null, "parents": [{"sha": "c02f035f409537d2b7e9ed626a3c424026eb8602", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c02f035f409537d2b7e9ed626a3c424026eb8602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c02f035f409537d2b7e9ed626a3c424026eb8602"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "147325d75733c2e6d9cd8a29f95f789ff910d744", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e3ddfd2914dda056da9533f55ffeb291975b10/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e3ddfd2914dda056da9533f55ffeb291975b10/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=b1e3ddfd2914dda056da9533f55ffeb291975b10", "patch": "@@ -1,3 +1,7 @@\n+Mon Sep 29 00:38:08 1997 Aaron Jackson <jackson@negril.msrce.howard.edu>\n+\n+\t* Makefile.in (bootstrap-lean): New target.\n+\n Thu Sep 18 23:58:27 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* Makefile.in (cross): New target."}, {"sha": "b7f9c27be7954c78d47bcebdaae400f63d2d1888", "filename": "Makefile.in", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e3ddfd2914dda056da9533f55ffeb291975b10/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e3ddfd2914dda056da9533f55ffeb291975b10/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=b1e3ddfd2914dda056da9533f55ffeb291975b10", "patch": "@@ -1298,6 +1298,21 @@ bootstrap bootstrap2 bootstrap3: all-texinfo all-bison all-byacc all-binutils al\n \t@echo \"Building runtime libraries\"; \\\n \t$(MAKE) all\n \n+.PHONY: bootstrap-lean\n+bootstrap-lean: all-texinfo all-bison all-byacc all-binutils all-gas all-ld\n+\t@r=`pwd`; export r; \\\n+\ts=`cd $(srcdir); pwd`; export s; \\\n+\t$(SET_LIB_PATH) \\\n+\techo \"Bootstrapping the compiler\"; \\\n+\tcd gcc; $(MAKE) $(GCC_FLAGS_TO_PASS) $@\n+\t@r=`pwd`; export r; \\\n+\ts=`cd $(srcdir); pwd`; export s; \\\n+\t$(SET_LIB_PATH) \\\n+\techo \"Comparing stage2 and stage3 of the compiler\"; \\\n+\tcd gcc; $(MAKE) $(GCC_FLAGS_TO_PASS) compare-lean\n+\t@echo \"Building runtime libraries\"; \\\n+\t$(MAKE) all\n+\n .PHONY: cross\n cross: all-texinfo all-bison all-byacc all-binutils all-gas all-ld\n \t@r=`pwd`; export r; \\"}, {"sha": "76baa0e829ae3ec44b285ca8b3a7c149251b6372", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e3ddfd2914dda056da9533f55ffeb291975b10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e3ddfd2914dda056da9533f55ffeb291975b10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1e3ddfd2914dda056da9533f55ffeb291975b10", "patch": "@@ -1,3 +1,7 @@\n+Mon Sep 29 00:38:42 1997 Aaron Jackson <jackson@negril.msrce.howard.edu>\n+\n+\t* Makefile.in (bootstrap-lean, compare-lean): New targets.\n+\n Mon Sep 29 00:18:16 1997  Richard Henderson  (rth@cygnus.com)\n \n \t* alias.c (base_alias_check): Two symbols can conflict if they"}, {"sha": "3ca979b79f518362132f073699f37650b1644cb4", "filename": "gcc/Makefile.in", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e3ddfd2914dda056da9533f55ffeb291975b10/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e3ddfd2914dda056da9533f55ffeb291975b10/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b1e3ddfd2914dda056da9533f55ffeb291975b10", "patch": "@@ -2576,6 +2576,22 @@ bootstrap: force\n \t$(MAKE) stage2\n \t$(MAKE) CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n \n+bootstrap-lean: force\n+# Only build the C compiler for stage1, because that is the only one that\n+# we can guarantee will build with the native compiler, and also it is the\n+# only thing useful for building stage2.\n+\t$(MAKE) CC=\"$(CC)\" libdir=$(libdir) LANGUAGES=\"$(BOOT_LANGUAGES)\"\n+\t$(MAKE) stage1\n+# This used to define ALLOCA as empty, but that would lead to bad results\n+# for a subsequent `make install' since that would not have ALLOCA empty.\n+# To prevent `make install' from compiling alloca.o and then relinking cc1\n+# because alloca.o is newer, we permit these recursive makes to compile\n+# alloca.o.  Then cc1 is newer, so it won't have to be relinked.\n+\t$(MAKE) CC=\"stage1/xgcc -Bstage1/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES=\"$(LANGUAGES)\"\n+\t$(MAKE) stage2\n+\trm -rf stage1\n+\t$(MAKE) CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n+\n bootstrap2: force\n \t$(MAKE) CC=\"stage1/xgcc -Bstage1/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES=\"$(LANGUAGES)\"\n \t$(MAKE) stage2\n@@ -2612,6 +2628,31 @@ compare: force\n \telse true; \\\n \tfi\n \n+# ./ avoids bug in some versions of tail.\n+compare-lean: force\n+\t-rm -f .bad_compare\n+\tfor file in *$(objext); do \\\n+\t  tail +16c ./$$file > tmp-foo1; \\\n+\t  tail +16c stage2/$$file > tmp-foo2 \\\n+\t    && (cmp tmp-foo1 tmp-foo2 > /dev/null 2>&1 || echo $$file differs >> .bad_compare) || true; \\\n+\tdone\n+\tfor dir in tmp-foo $(SUBDIRS); do \\\n+\t  if [ \"`echo $$dir/*$(objext)`\" != \"$$dir/*$(objext)\" ] ; then \\\n+\t    for file in $$dir/*$(objext); do \\\n+\t      tail +16c ./$$file > tmp-foo1; \\\n+\t      tail +16c stage2/$$file > tmp-foo2 \\\n+\t        && (cmp tmp-foo1 tmp-foo2 > /dev/null 2>&1 || echo $$file differs >> .bad_compare) || true; \\\n+\t    done; \\\n+\t  fi; \\\n+\tdone\n+\t-rm -f tmp-foo*\n+\tif [ -f .bad_compare ]; then \\\n+\t  echo \"Bootstrap comparison failure!\"; \\\n+\t  cat .bad_compare; \\\n+\t  exit 1; \\\n+\telse rm -rf stage2; \\\n+\tfi\n+\n # Similar, but compare with stage3 directory\n compare3: force\n \tfor file in *$(objext); do \\"}]}