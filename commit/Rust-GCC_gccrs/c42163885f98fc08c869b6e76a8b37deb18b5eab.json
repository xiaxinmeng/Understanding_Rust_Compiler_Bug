{"sha": "c42163885f98fc08c869b6e76a8b37deb18b5eab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQyMTYzODg1Zjk4ZmMwOGM4NjliNmU3NmE4YjM3ZGViMThiNWVhYg==", "commit": {"author": {"name": "Matthew Gretton-Dann", "email": "matthew.gretton-dann@arm.com", "date": "2012-10-18T12:02:01Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2012-10-18T12:02:01Z"}, "message": "Add support for fma intrinsics for ARM.\n\nCorrect dates in changelog from earlier commit.\n\n\n2012-10-18  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n        * config/arm/arm.c (neon_builtin_data): Add vfma and vfms\n      \tbuiltins.\n        * config/arm/neon-docgen.ml (intrinsic_groups): Add\n        fused-multiply-* groups.\n        * config/neon-gen.ml (print_feature_test_start): New function.\n        (print_feature_test_end): Likewise.\n        (print_variant): Print feature test macros.\n        * config/arm/neon-testgen.ml (emit_prologue): Allow different\n        tests to require different effective targets.\n        (effective_target): New function.\n        (test_intrinsic): Specify correct effective targets.\n        * gcc/config/arm/neon.md (fma<VCVTF:mode>4_intrinsic): New pattern.\n        (fmsub<VCVTF:mode>4_intrinsic): Likewise.\n        (neon_vfma<VCVFT:mode>): New expand.\n        (neon_vfms<VCVFT:mode>): Likewise.\n        * config/neon.ml (opcode): Add Vfma and Vfms.\n        (features): Add Requires_feature.\n        (ops): Add VFMA and VFMS intrinsics.\n        * config/arm/arm_neon.h: Regenerate.\n        * doc/arm-neon-intrinsics.texi: Likewise.\n\n\n\n\n\n2012-10-18  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n\n        * gcc.target/arm/neon/vfmaQf32.c: New testcase.\n        * gcc.target/arm/neon/vfmaf32.c: Likewise.\n        * gcc.target/arm/neon/vfmsQf32.c: Likewise.\n        * gcc.target/arm/neon/vfmsf32.c: Likewise.\n\n\n\nCo-Authored-By: Ramana Radhakrishnan <ramana.radhakrishnan@arm.com>\n\nFrom-SVN: r192560", "tree": {"sha": "4931945d977b538731f48253b13269516a6f570e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4931945d977b538731f48253b13269516a6f570e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c42163885f98fc08c869b6e76a8b37deb18b5eab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c42163885f98fc08c869b6e76a8b37deb18b5eab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c42163885f98fc08c869b6e76a8b37deb18b5eab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c42163885f98fc08c869b6e76a8b37deb18b5eab/comments", "author": {"login": "matt-gretton-dann", "id": 53790742, "node_id": "MDQ6VXNlcjUzNzkwNzQy", "avatar_url": "https://avatars.githubusercontent.com/u/53790742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matt-gretton-dann", "html_url": "https://github.com/matt-gretton-dann", "followers_url": "https://api.github.com/users/matt-gretton-dann/followers", "following_url": "https://api.github.com/users/matt-gretton-dann/following{/other_user}", "gists_url": "https://api.github.com/users/matt-gretton-dann/gists{/gist_id}", "starred_url": "https://api.github.com/users/matt-gretton-dann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matt-gretton-dann/subscriptions", "organizations_url": "https://api.github.com/users/matt-gretton-dann/orgs", "repos_url": "https://api.github.com/users/matt-gretton-dann/repos", "events_url": "https://api.github.com/users/matt-gretton-dann/events{/privacy}", "received_events_url": "https://api.github.com/users/matt-gretton-dann/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c61f8c3b79e093c3485d1b381a04b482c7edf885", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61f8c3b79e093c3485d1b381a04b482c7edf885", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c61f8c3b79e093c3485d1b381a04b482c7edf885"}], "stats": {"total": 271, "additions": 264, "deletions": 7}, "files": [{"sha": "a03cf115fc8971ad31f64f520429ea40b9af6682", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c42163885f98fc08c869b6e76a8b37deb18b5eab", "patch": "@@ -1,3 +1,27 @@\n+2012-10-18  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n+\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+        * config/arm/arm.c (neon_builtin_data): Add vfma and vfms\n+      \tbuiltins.\n+        * config/arm/neon-docgen.ml (intrinsic_groups): Add\n+        fused-multiply-* groups.\n+        * config/neon-gen.ml (print_feature_test_start): New function.\n+        (print_feature_test_end): Likewise.\n+        (print_variant): Print feature test macros.\n+        * config/arm/neon-testgen.ml (emit_prologue): Allow different\n+        tests to require different effective targets.\n+        (effective_target): New function.\n+        (test_intrinsic): Specify correct effective targets.\n+        * gcc/config/arm/neon.md (fma<VCVTF:mode>4_intrinsic): New pattern.\n+        (fmsub<VCVTF:mode>4_intrinsic): Likewise.\n+        (neon_vfma<VCVFT:mode>): New expand.\n+        (neon_vfms<VCVFT:mode>): Likewise.\n+        * config/neon.ml (opcode): Add Vfma and Vfms.\n+        (features): Add Requires_feature.\n+        (ops): Add VFMA and VFMS intrinsics.\n+        * config/arm/arm_neon.h: Regenerate.\n+        * doc/arm-neon-intrinsics.texi: Likewise.\n+\n 2012-10-18  Richard Guenther  <rguenther@suse.de>\n \n \t* lto-streamer.h (enum LTO_tags): Add LTO_integer_cst.\n@@ -11,7 +35,7 @@\n \t(streamer_pack_tree_bitfields): Call it.\n \t(streamer_write_integer_cst): Adjust.\n \n-2012-10-17  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n+2012-10-18  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n \t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n         * config.gcc: Add support for ARMv8 for arm*-*-* targets."}, {"sha": "327ef223e4e699b12709991f9c94c171f4e9220b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c42163885f98fc08c869b6e76a8b37deb18b5eab", "patch": "@@ -18726,6 +18726,8 @@ static neon_builtin_datum neon_builtin_data[] =\n   VAR8 (BINOP, vmul, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n   VAR8 (TERNOP, vmla, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n   VAR3 (TERNOP, vmlal, v8qi, v4hi, v2si),\n+  VAR2 (TERNOP, vfma, v2sf, v4sf),\n+  VAR2 (TERNOP, vfms, v2sf, v4sf),\n   VAR8 (TERNOP, vmls, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n   VAR3 (TERNOP, vmlsl, v8qi, v4hi, v2si),\n   VAR4 (BINOP, vqdmulh, v4hi, v2si, v8hi, v4si),"}, {"sha": "8fec83f287dc0cc5720920cb046ebc625ea35cae", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=c42163885f98fc08c869b6e76a8b37deb18b5eab", "patch": "@@ -1350,6 +1350,38 @@ vqdmlsl_s32 (int64x2_t __a, int32x2_t __b, int32x2_t __c)\n   return (int64x2_t)__builtin_neon_vqdmlslv2si (__a, __b, __c, 1);\n }\n \n+#ifdef __ARM_FEATURE_FMA\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vfma_f32 (float32x2_t __a, float32x2_t __b, float32x2_t __c)\n+{\n+  return (float32x2_t)__builtin_neon_vfmav2sf (__a, __b, __c, 3);\n+}\n+\n+#endif\n+#ifdef __ARM_FEATURE_FMA\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vfmaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)\n+{\n+  return (float32x4_t)__builtin_neon_vfmav4sf (__a, __b, __c, 3);\n+}\n+\n+#endif\n+#ifdef __ARM_FEATURE_FMA\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vfms_f32 (float32x2_t __a, float32x2_t __b, float32x2_t __c)\n+{\n+  return (float32x2_t)__builtin_neon_vfmsv2sf (__a, __b, __c, 3);\n+}\n+\n+#endif\n+#ifdef __ARM_FEATURE_FMA\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vfmsq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)\n+{\n+  return (float32x4_t)__builtin_neon_vfmsv4sf (__a, __b, __c, 3);\n+}\n+\n+#endif\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vsub_s8 (int8x8_t __a, int8x8_t __b)\n {"}, {"sha": "043b1e06a2a45e9c26d8eda6ef0b24efd6b11524", "filename": "gcc/config/arm/neon-docgen.ml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Fconfig%2Farm%2Fneon-docgen.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Fconfig%2Farm%2Fneon-docgen.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon-docgen.ml?ref=c42163885f98fc08c869b6e76a8b37deb18b5eab", "patch": "@@ -103,6 +103,8 @@ let intrinsic_groups =\n     \"Multiplication\", single_opcode Vmul;\n     \"Multiply-accumulate\", single_opcode Vmla;\n     \"Multiply-subtract\", single_opcode Vmls;\n+    \"Fused-multiply-accumulate\", single_opcode Vfma;\n+    \"Fused-multiply-subtract\", single_opcode Vfms;\n     \"Subtraction\", single_opcode Vsub;\n     \"Comparison (equal-to)\", single_opcode Vceq;\n     \"Comparison (greater-than-or-equal-to)\", single_opcode Vcge;"}, {"sha": "6c4e2726af0853b3abe8ccce9b0aec6cfdc81064", "filename": "gcc/config/arm/neon-gen.ml", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Fconfig%2Farm%2Fneon-gen.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Fconfig%2Farm%2Fneon-gen.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon-gen.ml?ref=c42163885f98fc08c869b6e76a8b37deb18b5eab", "patch": "@@ -286,6 +286,24 @@ let get_shuffle features =\n     | _ -> None\n   with Not_found -> None\n \n+let print_feature_test_start features =\n+  try\n+    match List.find (fun feature ->\n+                       match feature with Requires_feature _ -> true\n+                                        | _ -> false)\n+                     features with\n+      Requires_feature feature -> \n+        Format.printf \"#ifdef __ARM_FEATURE_%s@\\n\" feature\n+    | _ -> assert false\n+  with Not_found -> assert true\n+\n+let print_feature_test_end features =\n+  let feature =\n+    List.exists (function Requires_feature x -> true\n+                                        |  _ -> false) features in\n+  if feature then Format.printf \"#endif@\\n\"\n+\n+\n let print_variant opcode features shape name (ctype, asmtype, elttype) =\n   let bits = infoword_value elttype features in\n   let modesuf = mode_suffix elttype shape in\n@@ -302,7 +320,11 @@ let print_variant opcode features shape name (ctype, asmtype, elttype) =\n \treturn ctype builtin in\n   let body = pdecls @ rdecls @ stmts\n   and fnname = (intrinsic_name name) ^ \"_\" ^ (string_of_elt elttype) in\n-  print_function ctype fnname body\n+  begin\n+    print_feature_test_start features;\n+    print_function ctype fnname body;\n+    print_feature_test_end features;\n+  end\n \n (* When this function processes the element types in the ops table, it rewrites\n    them in a list of tuples (a,b,c):"}, {"sha": "4645f3901508079071f743b47b9fb73700d9566e", "filename": "gcc/config/arm/neon-testgen.ml", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Fconfig%2Farm%2Fneon-testgen.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Fconfig%2Farm%2Fneon-testgen.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon-testgen.ml?ref=c42163885f98fc08c869b6e76a8b37deb18b5eab", "patch": "@@ -46,13 +46,14 @@ let open_test_file dir name =\n     failwith (\"Could not create test source file \" ^ name ^ \": \" ^ str)\n \n (* Emit prologue code to a test source file.  *)\n-let emit_prologue chan test_name =\n+let emit_prologue chan test_name effective_target =\n   Printf.fprintf chan \"/* Test the `%s' ARM Neon intrinsic.  */\\n\" test_name;\n   Printf.fprintf chan \"/* This file was autogenerated by neon-testgen.  */\\n\\n\";\n   Printf.fprintf chan \"/* { dg-do assemble } */\\n\";\n-  Printf.fprintf chan \"/* { dg-require-effective-target arm_neon_ok } */\\n\";\n+  Printf.fprintf chan \"/* { dg-require-effective-target %s_ok } */\\n\"\n+                 effective_target;\n   Printf.fprintf chan \"/* { dg-options \\\"-save-temps -O0\\\" } */\\n\";\n-  Printf.fprintf chan \"/* { dg-add-options arm_neon } */\\n\";\n+  Printf.fprintf chan \"/* { dg-add-options %s } */\\n\" effective_target;\n   Printf.fprintf chan \"\\n#include \\\"arm_neon.h\\\"\\n\\n\";\n   Printf.fprintf chan \"void test_%s (void)\\n{\\n\" test_name\n \n@@ -156,6 +157,17 @@ let check_types tys =\n                 then (Const :: flags, String.sub ty 6 ((String.length ty) - 6))\n                 else (flags, ty)) tys'\n \n+(* Work out what the effective target should be.  *)\n+let effective_target features =\n+  try\n+    match List.find (fun feature ->\n+                       match feature with Requires_feature _ -> true\n+                                        | _ -> false)\n+                     features with\n+      Requires_feature \"FMA\" -> \"arm_neonv2\"\n+    | _ -> assert false\n+  with Not_found -> \"arm_neon\"\n+\n (* Given an intrinsic shape, produce a regexp that will match\n    the right-hand sides of instructions generated by an intrinsic of\n    that shape.  *)\n@@ -262,9 +274,11 @@ let test_intrinsic dir opcode features shape name munge elt_ty =\n   let regexps = List.map (fun regexp -> insn_regexp ^ \"\\\\[ \\t\\\\]+\" ^ regexp ^\n \t\t\t  \"!?\\\\(\\\\[ \\t\\\\]+@\\\\[a-zA-Z0-9 \\\\]+\\\\)?\\\\n\")\n                          (analyze_all_shapes features shape analyze_shape)\n+  in\n+  let effective_target = effective_target features\n   in\n     (* Emit file and function prologues.  *)\n-    emit_prologue chan test_name;\n+    emit_prologue chan test_name effective_target;\n     (* Emit local variable declarations.  *)\n     emit_automatics chan c_types features;\n     Printf.fprintf chan \"\\n\";"}, {"sha": "92e03b097604fd56130ac88e767ceeb89bf3e1ef", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=c42163885f98fc08c869b6e76a8b37deb18b5eab", "patch": "@@ -722,6 +722,10 @@\n )\n \n ;; Fused multiply-accumulate\n+;; We define each insn twice here:\n+;;    1: with flag_unsafe_math_optimizations for the widening multiply phase\n+;;       to be able to use when converting to FMA.\n+;;    2: without flag_unsafe_math_optimizations for the intrinsics to use.\n (define_insn \"fma<VCVTF:mode>4\"\n   [(set (match_operand:VCVTF 0 \"register_operand\" \"=w\")\n         (fma:VCVTF (match_operand:VCVTF 1 \"register_operand\" \"w\")\n@@ -735,6 +739,19 @@\n \t\t      (const_string \"neon_fp_vmla_qqq\")))]\n )\n \n+(define_insn \"fma<VCVTF:mode>4_intrinsic\"\n+  [(set (match_operand:VCVTF 0 \"register_operand\" \"=w\")\n+        (fma:VCVTF (match_operand:VCVTF 1 \"register_operand\" \"w\")\n+\t\t (match_operand:VCVTF 2 \"register_operand\" \"w\")\n+\t\t (match_operand:VCVTF 3 \"register_operand\" \"0\")))]\n+  \"TARGET_NEON && TARGET_FMA\"\n+  \"vfma%?.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+  [(set (attr \"neon_type\")\n+\t(if_then_else (match_test \"<Is_d_reg>\")\n+\t\t      (const_string \"neon_fp_vmla_ddd\")\n+\t\t      (const_string \"neon_fp_vmla_qqq\")))]\n+)\n+\n (define_insn \"*fmsub<VCVTF:mode>4\"\n   [(set (match_operand:VCVTF 0 \"register_operand\" \"=w\")\n         (fma:VCVTF (neg:VCVTF (match_operand:VCVTF 1 \"register_operand\" \"w\"))\n@@ -748,6 +765,19 @@\n \t\t      (const_string \"neon_fp_vmla_qqq\")))]\n )\n \n+(define_insn \"fmsub<VCVTF:mode>4_intrinsic\"\n+  [(set (match_operand:VCVTF 0 \"register_operand\" \"=w\")\n+        (fma:VCVTF (neg:VCVTF (match_operand:VCVTF 1 \"register_operand\" \"w\"))\n+\t\t   (match_operand:VCVTF 2 \"register_operand\" \"w\")\n+\t\t   (match_operand:VCVTF 3 \"register_operand\" \"0\")))]\n+  \"TARGET_NEON && TARGET_FMA\"\n+  \"vfms%?.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+  [(set (attr \"neon_type\")\n+\t(if_then_else (match_test \"<Is_d_reg>\")\n+\t\t      (const_string \"neon_fp_vmla_ddd\")\n+\t\t      (const_string \"neon_fp_vmla_qqq\")))]\n+)\n+\n (define_insn \"ior<mode>3\"\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w,w\")\n \t(ior:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"w,0\")\n@@ -1925,6 +1955,32 @@\n   DONE;\n })\n \n+(define_expand \"neon_vfma<VCVTF:mode>\"\n+  [(match_operand:VCVTF 0 \"s_register_operand\")\n+   (match_operand:VCVTF 1 \"s_register_operand\")\n+   (match_operand:VCVTF 2 \"s_register_operand\")\n+   (match_operand:VCVTF 3 \"s_register_operand\")\n+   (match_operand:SI 4 \"immediate_operand\")]\n+  \"TARGET_NEON && TARGET_FMA\"\n+{\n+  emit_insn (gen_fma<mode>4_intrinsic (operands[0], operands[2], operands[3],\n+\t\t\t\t       operands[1]));\n+  DONE;\n+})\n+\n+(define_expand \"neon_vfms<VCVTF:mode>\"\n+  [(match_operand:VCVTF 0 \"s_register_operand\")\n+   (match_operand:VCVTF 1 \"s_register_operand\")\n+   (match_operand:VCVTF 2 \"s_register_operand\")\n+   (match_operand:VCVTF 3 \"s_register_operand\")\n+   (match_operand:SI 4 \"immediate_operand\")]\n+  \"TARGET_NEON && TARGET_FMA\"\n+{\n+  emit_insn (gen_fmsub<mode>4_intrinsic (operands[0], operands[2], operands[3],\n+\t\t\t\t\t operands[1]));\n+  DONE;\n+})\n+\n ; Used for intrinsics when flag_unsafe_math_optimizations is false.\n \n (define_insn \"neon_vmla<mode>_unspec\""}, {"sha": "101f8f654fefe521c50c995b622ee06c0726b90e", "filename": "gcc/config/arm/neon.ml", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Fconfig%2Farm%2Fneon.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Fconfig%2Farm%2Fneon.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.ml?ref=c42163885f98fc08c869b6e76a8b37deb18b5eab", "patch": "@@ -102,6 +102,8 @@ type opcode =\n   | Vmul\n   | Vmla\n   | Vmls\n+  | Vfma\n+  | Vfms\n   | Vsub\n   | Vceq\n   | Vcge\n@@ -275,6 +277,8 @@ type features =\n   | Const_valuator of (int -> int)\n   | Fixed_vector_reg\n   | Fixed_core_reg\n+    (* Mark that the intrinsic requires __ARM_FEATURE_string to be defined.  *)\n+  | Requires_feature of string\n \n exception MixedMode of elts * elts\n \n@@ -802,6 +806,12 @@ let ops =\n     Vmls, [], Long, \"vmlsl\", elts_same_io, su_8_32;\n     Vmls, [Saturating; Doubling], Long, \"vqdmlsl\", elts_same_io, [S16; S32];\n \n+    (* Fused-multiply-accumulate. *)\n+    Vfma, [Requires_feature \"FMA\"], All (3, Dreg), \"vfma\", elts_same_io, [F32];\n+    Vfma, [Requires_feature \"FMA\"], All (3, Qreg), \"vfmaQ\", elts_same_io, [F32];\n+    Vfms, [Requires_feature \"FMA\"], All (3, Dreg), \"vfms\", elts_same_io, [F32];\n+    Vfms, [Requires_feature \"FMA\"], All (3, Qreg), \"vfmsQ\", elts_same_io, [F32];\n+\n     (* Subtraction.  *)\n     Vsub, [], All (3, Dreg), \"vsub\", sign_invar_2, F32 :: su_8_32;\n     Vsub, [No_op], All (3, Dreg), \"vsub\", sign_invar_2,  [S64; U64];"}, {"sha": "9fb6e290a73ad9f2155685ec4fa153562ad4ca0d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c42163885f98fc08c869b6e76a8b37deb18b5eab", "patch": "@@ -1,4 +1,11 @@\n-2012-10-17  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n+2012-10-18  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n+\n+        * gcc.target/arm/neon/vfmaQf32.c: New testcase.\n+        * gcc.target/arm/neon/vfmaf32.c: Likewise.\n+        * gcc.target/arm/neon/vfmsQf32.c: Likewise.\n+        * gcc.target/arm/neon/vfmsf32.c: Likewise.\n+\n+2012-10-18  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n \n         * gcc.target/arm/ftest-armv8a-arm.c: New testcase.\n         * gcc.target/arm/ftest-armv8a-thumb.c: Likewise."}, {"sha": "d400163a191eee7771307aff3931cfa0f971d262", "filename": "gcc/testsuite/gcc.target/arm/neon/vfmaQf32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvfmaQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvfmaQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvfmaQf32.c?ref=c42163885f98fc08c869b6e76a8b37deb18b5eab", "patch": "@@ -0,0 +1,22 @@\n+/* Test the `vfmaQf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neonv2_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neonv2 } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vfmaQf32 (void)\n+{\n+  float32x4_t out_float32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+  float32x4_t arg1_float32x4_t;\n+  float32x4_t arg2_float32x4_t;\n+\n+  out_float32x4_t = vfmaq_f32 (arg0_float32x4_t, arg1_float32x4_t, arg2_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vfma\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "988328dd08e14c57bf016b1b4c4f25f15cdfb8cd", "filename": "gcc/testsuite/gcc.target/arm/neon/vfmaf32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvfmaf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvfmaf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvfmaf32.c?ref=c42163885f98fc08c869b6e76a8b37deb18b5eab", "patch": "@@ -0,0 +1,22 @@\n+/* Test the `vfmaf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neonv2_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neonv2 } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vfmaf32 (void)\n+{\n+  float32x2_t out_float32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+  float32x2_t arg1_float32x2_t;\n+  float32x2_t arg2_float32x2_t;\n+\n+  out_float32x2_t = vfma_f32 (arg0_float32x2_t, arg1_float32x2_t, arg2_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vfma\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "247a8edfd2303594b8090f167fb8954e1da241d8", "filename": "gcc/testsuite/gcc.target/arm/neon/vfmsQf32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvfmsQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvfmsQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvfmsQf32.c?ref=c42163885f98fc08c869b6e76a8b37deb18b5eab", "patch": "@@ -0,0 +1,22 @@\n+/* Test the `vfmsQf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neonv2_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neonv2 } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vfmsQf32 (void)\n+{\n+  float32x4_t out_float32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+  float32x4_t arg1_float32x4_t;\n+  float32x4_t arg2_float32x4_t;\n+\n+  out_float32x4_t = vfmsq_f32 (arg0_float32x4_t, arg1_float32x4_t, arg2_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vfms\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7f9e8570dc35d433f47035e51abbd3e3b9f24819", "filename": "gcc/testsuite/gcc.target/arm/neon/vfmsf32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvfmsf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42163885f98fc08c869b6e76a8b37deb18b5eab/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvfmsf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvfmsf32.c?ref=c42163885f98fc08c869b6e76a8b37deb18b5eab", "patch": "@@ -0,0 +1,22 @@\n+/* Test the `vfmsf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neonv2_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neonv2 } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vfmsf32 (void)\n+{\n+  float32x2_t out_float32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+  float32x2_t arg1_float32x2_t;\n+  float32x2_t arg2_float32x2_t;\n+\n+  out_float32x2_t = vfms_f32 (arg0_float32x2_t, arg1_float32x2_t, arg2_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vfms\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}]}