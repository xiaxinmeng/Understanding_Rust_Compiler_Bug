{"sha": "f6abb50a8a53adba2fdfdee15069890868f0d443", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZhYmI1MGE4YTUzYWRiYTJmZGZkZWUxNTA2OTg5MDg2OGYwZDQ0Mw==", "commit": {"author": {"name": "Brendan Kehoe", "email": "brendan@lisa.cygnus.com", "date": "1995-03-13T02:04:52Z"}, "committer": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1995-03-13T02:04:52Z"}, "message": "parse.y: New rules to allow attributes in a prefix position.\n\n        * parse.y: New rules to allow attributes in a prefix position.\n        (prefix_attributes): New variable.  Pass it into cplus_decl_attributes.\n        (setattr): New rule.\n        (reserved_declspecs, declmods): Catch attributes here.\n        * decl2.c (cplus_decl_attributes): Add PREFIX_ATTRIBUTES argument.\n        * decl.c (duplicate_decls): Pass DECL_MACHINE_ATTRIBUTES to\n        descendent typedef.\n        (grokdeclarator): Added code to support machine attributes.\n        * Makefile.in (stamp-parse): Expect 5 shift/reduce failures.\n\nFrom-SVN: r9172", "tree": {"sha": "c2a260465fa275684474039646345364e0fad98e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2a260465fa275684474039646345364e0fad98e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6abb50a8a53adba2fdfdee15069890868f0d443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6abb50a8a53adba2fdfdee15069890868f0d443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6abb50a8a53adba2fdfdee15069890868f0d443", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6abb50a8a53adba2fdfdee15069890868f0d443/comments", "author": null, "committer": null, "parents": [{"sha": "bf6ed0403197c55ff8176894d0a215b32ef15bc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf6ed0403197c55ff8176894d0a215b32ef15bc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf6ed0403197c55ff8176894d0a215b32ef15bc5"}], "stats": {"total": 86, "additions": 59, "deletions": 27}, "files": [{"sha": "0cbb5de182119d3da0ea99c0a212343b2b27e533", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6abb50a8a53adba2fdfdee15069890868f0d443/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6abb50a8a53adba2fdfdee15069890868f0d443/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f6abb50a8a53adba2fdfdee15069890868f0d443", "patch": "@@ -1,3 +1,15 @@\n+Tue Mar  7 10:14:29 1995  Brendan Kehoe  (brendan@lisa.cygnus.com)\n+\n+\t* parse.y: New rules to allow attributes in a prefix position.\n+\t(prefix_attributes): New variable.  Pass it into cplus_decl_attributes.\n+\t(setattr): New rule.\n+\t(reserved_declspecs, declmods): Catch attributes here.\n+\t* decl2.c (cplus_decl_attributes): Add PREFIX_ATTRIBUTES argument.\n+\t* decl.c (duplicate_decls): Pass DECL_MACHINE_ATTRIBUTES to\n+\tdescendent typedef.\n+\t(grokdeclarator): Added code to support machine attributes.\n+\t* Makefile.in (stamp-parse): Expect 5 shift/reduce failures.\n+\n Tue Feb 21 18:43:48 1995  Douglas Rupp  (drupp@cs.washington.edu)\n \n \t* Make-lang.in, config-lang.in: ($exeext): New macro."}, {"sha": "766e308e370776d0171ed1c3ef6fc11d0337e73b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6abb50a8a53adba2fdfdee15069890868f0d443/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6abb50a8a53adba2fdfdee15069890868f0d443/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f6abb50a8a53adba2fdfdee15069890868f0d443", "patch": "@@ -2011,6 +2011,7 @@ extern tree grokbitfield\t\t\tPROTO((tree, tree, tree));\n extern tree groktypefield\t\t\tPROTO((tree, tree));\n extern tree grokoptypename\t\t\tPROTO((tree, tree));\n extern tree build_push_scope\t\t\tPROTO((tree, tree));\n+extern void cplus_decl_attributes\t\tPROTO((tree, tree, tree)); \n extern tree constructor_name_full\t\tPROTO((tree));\n extern tree constructor_name\t\t\tPROTO((tree));\n extern void setup_vtbl_ptr\t\t\tPROTO((void));"}, {"sha": "aad3dfb04b0a5566174c2bbf698df7dd22249dd1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6abb50a8a53adba2fdfdee15069890868f0d443/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6abb50a8a53adba2fdfdee15069890868f0d443/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f6abb50a8a53adba2fdfdee15069890868f0d443", "patch": "@@ -2122,6 +2122,9 @@ duplicate_decls (newdecl, olddecl)\n   int new_defines_function;\n   tree previous_c_decl = NULL_TREE;\n \n+  if (TREE_CODE_CLASS (TREE_CODE (olddecl)) == 'd')\n+    DECL_MACHINE_ATTRIBUTES (newdecl) = DECL_MACHINE_ATTRIBUTES (olddecl);\n+\n   types_match = decls_match (newdecl, olddecl);\n \n   if (TREE_CODE (olddecl) != TREE_LIST)\n@@ -7157,6 +7160,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, raises)\n   enum tree_code innermost_code = ERROR_MARK;\n   int bitfield = 0;\n   int size_varies = 0;\n+  tree decl_machine_attr = NULL_TREE;\n   /* Set this to error_mark_node for FIELD_DECLs we could not handle properly.\n      All FIELD_DECLs we build here have `init' put into their DECL_INITIAL.  */\n   tree init = NULL_TREE;\n@@ -7530,6 +7534,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, raises)\n \t  else\n \t    {\n \t      type = TREE_TYPE (t);\n+\t      decl_machine_attr = DECL_MACHINE_ATTRIBUTES (id);\n \t      typedef_decl = t;\n \t    }\n \t}\n@@ -9001,6 +9006,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, raises)\n \t    decl = grokfndecl (ctype, type, declarator,\n \t\t\t       virtualp, flags, quals,\n \t\t\t       raises, friendp ? -1 : 0, publicp);\n+\t    decl = build_decl_attribute_variant (decl, decl_machine_attr);\n \t    if (decl == NULL_TREE)\n \t      return NULL_TREE;\n "}, {"sha": "b0e5c00c56949c71e8288020688610b936ebdc8d", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6abb50a8a53adba2fdfdee15069890868f0d443/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6abb50a8a53adba2fdfdee15069890868f0d443/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=f6abb50a8a53adba2fdfdee15069890868f0d443", "patch": "@@ -1921,11 +1921,11 @@ build_push_scope (cname, name)\n   return rval;\n }\n \n-void cplus_decl_attributes (decl, attributes)\n-     tree decl, attributes;\n+void cplus_decl_attributes (decl, attributes, prefix_attributes)\n+     tree decl, attributes, prefix_attributes;\n {\n   if (decl && decl != void_type_node)\n-    decl_attributes (decl, attributes, NULL_TREE);\n+    decl_attributes (decl, attributes, prefix_attributes);\n }\n \f\n /* CONSTRUCTOR_NAME:"}, {"sha": "c51c756700a3f506ced4381f6b8b0035ecbf355f", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 37, "deletions": 24, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6abb50a8a53adba2fdfdee15069890868f0d443/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6abb50a8a53adba2fdfdee15069890868f0d443/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=f6abb50a8a53adba2fdfdee15069890868f0d443", "patch": "@@ -287,6 +287,7 @@ empty_parms ()\n %{\n /* List of types and structure classes of the current declaration.  */\n static tree current_declspecs;\n+static tree prefix_attributes = NULL_TREE;\n \n /* When defining an aggregate, this is the most recent one being defined.  */\n static tree current_aggr;\n@@ -504,7 +505,7 @@ template_def:\n \t\t  momentary = suspend_momentary ();\n \t\t  d = start_decl ($<ttype>2, /*current_declspecs*/NULL_TREE, 0,\n \t\t\t\t  $3);\n-\t\t  cplus_decl_attributes (d, $5);\n+\t\t  cplus_decl_attributes (d, $5, prefix_attributes);\n \t\t  finish_decl (d, NULL_TREE, $4, 0, 0);\n \t\t  end_template_decl ($1, d, 0, def);\n \t\t  if (def)\n@@ -523,7 +524,7 @@ template_def:\n \t\t  momentary = suspend_momentary ();\n \t\t  d = start_decl ($<ttype>3, current_declspecs,\n \t\t\t\t  0, $<ttype>4);\n-\t\t  cplus_decl_attributes (d, $6);\n+\t\t  cplus_decl_attributes (d, $6, prefix_attributes);\n \t\t  finish_decl (d, NULL_TREE, $5, 0, 0);\n \t\t  end_template_decl ($1, d, 0, def);\n \t\t  if (def)\n@@ -975,7 +976,7 @@ condition:\n \t\t  current_declspecs = $1;\n \t\t  $<itype>6 = suspend_momentary ();\n \t\t  $<ttype>$ = start_decl ($<ttype>2, current_declspecs, 1, $3);\n-\t\t  cplus_decl_attributes ($<ttype>$, $5);\n+\t\t  cplus_decl_attributes ($<ttype>$, $5, prefix_attributes);\n \t\t}\n \tinit\n \t\t{ \n@@ -1724,6 +1725,10 @@ object:\t  primary '.'\n \t\t}\n \t;\n \n+setattrs: /* empty */\n+\t\t{ prefix_attributes = $<ttype>0; }\n+\t;\n+\n decl:\n \t/* Normal case: make this fast.  */\n \t  typespec declarator ';'\n@@ -1833,6 +1838,10 @@ reserved_declspecs:\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER ($2));\n \t\t  $$ = decl_tree_cons (NULL_TREE, $2, $$); }\n+\t| reserved_declspecs attributes setattrs\n+\t\t{ $$ = $1; }\n+\t| attributes setattrs\n+\t\t{ $$ = NULL_TREE; }\n \t;\n \n /* List of just storage classes and type modifiers.\n@@ -1853,6 +1862,10 @@ declmods:\n \t\t\t     IDENTIFIER_POINTER ($2));\n \t\t  $$ = decl_tree_cons (NULL_TREE, $2, $$);\n \t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n+\t| declmods attributes setattrs\n+\t\t{ $$ = $1; }\n+\t| attributes setattrs\n+\t\t{ $$ = NULL_TREE; }\n \t;\n \n \n@@ -1968,7 +1981,7 @@ initdcl0:\n \t\t    }\n \t\t  $<itype>5 = suspend_momentary ();\n \t\t  $<ttype>$ = start_decl ($<ttype>1, current_declspecs, 1, $2);\n-\t\t  cplus_decl_attributes ($<ttype>$, $4); }\n+\t\t  cplus_decl_attributes ($<ttype>$, $4, prefix_attributes); }\n \t  init\n /* Note how the declaration of the variable is in effect while its init is parsed! */\n \t\t{ finish_decl ($<ttype>6, $7, $3, 0, LOOKUP_ONLYCONVERTING);\n@@ -1987,20 +2000,20 @@ initdcl0:\n \t\t    }\n \t\t  $$ = suspend_momentary ();\n \t\t  d = start_decl ($<ttype>1, current_declspecs, 0, $2);\n-\t\t  cplus_decl_attributes (d, $4);\n+\t\t  cplus_decl_attributes (d, $4, prefix_attributes);\n \t\t  finish_decl (d, NULL_TREE, $3, 0, 0); }\n \t;\n \n initdcl:\n \t  declarator exception_specification_opt maybeasm maybe_attribute '='\n \t\t{ $<ttype>$ = start_decl ($<ttype>1, current_declspecs, 1, $2);\n-\t\t  cplus_decl_attributes ($<ttype>$, $4); }\n+\t\t  cplus_decl_attributes ($<ttype>$, $4, prefix_attributes); }\n \t  init\n /* Note how the declaration of the variable is in effect while its init is parsed! */\n \t\t{ finish_decl ($<ttype>6, $7, $3, 0, LOOKUP_ONLYCONVERTING); }\n \t| declarator exception_specification_opt maybeasm maybe_attribute\n \t\t{ $<ttype>$ = start_decl ($<ttype>1, current_declspecs, 0, $2);\n-\t\t  cplus_decl_attributes ($<ttype>$, $4);\n+\t\t  cplus_decl_attributes ($<ttype>$, $4, prefix_attributes);\n \t\t  finish_decl ($<ttype>$, NULL_TREE, $3, 0, 0); }\n \t;\n \n@@ -2009,7 +2022,7 @@ notype_initdcl0:\n \t\t{ current_declspecs = $<ttype>0;\n \t\t  $<itype>5 = suspend_momentary ();\n \t\t  $<ttype>$ = start_decl ($<ttype>1, current_declspecs, 1, $2);\n-\t\t  cplus_decl_attributes ($<ttype>$, $4); }\n+\t\t  cplus_decl_attributes ($<ttype>$, $4, prefix_attributes); }\n \t  init\n /* Note how the declaration of the variable is in effect while its init is parsed! */\n \t\t{ finish_decl ($<ttype>6, $7, $3, 0, LOOKUP_ONLYCONVERTING);\n@@ -2019,7 +2032,7 @@ notype_initdcl0:\n \t\t  current_declspecs = $<ttype>0;\n \t\t  $$ = suspend_momentary ();\n \t\t  d = start_decl ($<ttype>1, current_declspecs, 0, $2);\n-\t\t  cplus_decl_attributes (d, $4);\n+\t\t  cplus_decl_attributes (d, $4, prefix_attributes);\n \t\t  finish_decl (d, NULL_TREE, $3, 0, 0); }\n \t;\n \n@@ -2028,7 +2041,7 @@ nomods_initdcl0:\n \t\t{ current_declspecs = NULL_TREE;\n \t\t  $<itype>5 = suspend_momentary ();\n \t\t  $<ttype>$ = start_decl ($1, current_declspecs, 1, $2);\n-\t\t  cplus_decl_attributes ($<ttype>$, $4); }\n+\t\t  cplus_decl_attributes ($<ttype>$, $4, prefix_attributes); }\n \t  init\n /* Note how the declaration of the variable is in effect while its init is parsed! */\n \t\t{ finish_decl ($<ttype>6, $7, $3, 0, LOOKUP_ONLYCONVERTING);\n@@ -2038,7 +2051,7 @@ nomods_initdcl0:\n \t\t  current_declspecs = NULL_TREE;\n \t\t  $$ = suspend_momentary ();\n \t\t  d = start_decl ($1, current_declspecs, 0, $2);\n-\t\t  cplus_decl_attributes (d, $4);\n+\t\t  cplus_decl_attributes (d, $4, prefix_attributes);\n \t\t  finish_decl (d, NULL_TREE, $3, 0, 0); }\n \t;\n \n@@ -2608,7 +2621,7 @@ component_decl_1:\n \t\t}\n \t| notype_declarator exception_specification_opt maybeasm maybe_attribute maybe_init\n \t\t{ $$ = grokfield ($$, NULL_TREE, $2, $5, $3);\n-\t\t  cplus_decl_attributes ($$, $4); }\n+\t\t  cplus_decl_attributes ($$, $4, prefix_attributes); }\n \t| ':' expr_no_commas\n \t\t{ $$ = grokbitfield (NULL_TREE, NULL_TREE, $2); }\n \t| error\n@@ -2626,12 +2639,12 @@ component_decl_1:\n \t\t{ $$ = build_parse_node (CALL_EXPR, TREE_VALUE ($1),\n \t\t\t\t\t $3, $5);\n \t\t  $$ = grokfield ($$, TREE_CHAIN ($1), $6, $9, $7);\n-\t\t  cplus_decl_attributes ($$, $8); }\n+\t\t  cplus_decl_attributes ($$, $8, prefix_attributes); }\n \t| typed_declspecs LEFT_RIGHT type_quals exception_specification_opt maybeasm maybe_attribute maybe_init\n \t\t{ $$ = build_parse_node (CALL_EXPR, TREE_VALUE ($1),\n \t\t\t\t\t empty_parms (), $3);\n \t\t  $$ = grokfield ($$, TREE_CHAIN ($1), $4, $7, $5);\n-\t\t  cplus_decl_attributes ($$, $6); }\n+\t\t  cplus_decl_attributes ($$, $6, prefix_attributes); }\n \t| using_decl\n \t;\n \n@@ -2680,47 +2693,47 @@ after_type_component_declarator0:\n \t  after_type_declarator exception_specification_opt maybeasm maybe_attribute maybe_init\n \t\t{ current_declspecs = $<ttype>0;\n \t\t  $$ = grokfield ($$, current_declspecs, $2, $5, $3);\n-\t\t  cplus_decl_attributes ($$, $4); }\n+\t\t  cplus_decl_attributes ($$, $4, prefix_attributes); }\n \t| TYPENAME ':' expr_no_commas maybe_attribute\n \t\t{ current_declspecs = $<ttype>0;\n \t\t  $$ = grokbitfield ($$, current_declspecs, $3);\n-\t\t  cplus_decl_attributes ($$, $4); }\n+\t\t  cplus_decl_attributes ($$, $4, prefix_attributes); }\n \t;\n \n notype_component_declarator0:\n \t  notype_declarator exception_specification_opt maybeasm maybe_attribute maybe_init\n \t\t{ current_declspecs = $<ttype>0;\n \t\t  $$ = grokfield ($$, current_declspecs, $2, $5, $3);\n-\t\t  cplus_decl_attributes ($$, $4); }\n+\t\t  cplus_decl_attributes ($$, $4, prefix_attributes); }\n \t| IDENTIFIER ':' expr_no_commas maybe_attribute\n \t\t{ current_declspecs = $<ttype>0;\n \t\t  $$ = grokbitfield ($$, current_declspecs, $3);\n-\t\t  cplus_decl_attributes ($$, $4); }\n+\t\t  cplus_decl_attributes ($$, $4, prefix_attributes); }\n \t| ':' expr_no_commas maybe_attribute\n \t\t{ current_declspecs = $<ttype>0;\n \t\t  $$ = grokbitfield (NULL_TREE, current_declspecs, $2);\n-\t\t  cplus_decl_attributes ($$, $3); }\n+\t\t  cplus_decl_attributes ($$, $3, prefix_attributes); }\n \t;\n \n after_type_component_declarator:\n \t  after_type_declarator exception_specification_opt maybeasm maybe_attribute maybe_init\n \t\t{ $$ = grokfield ($$, current_declspecs, $2, $5, $3);\n-\t\t  cplus_decl_attributes ($$, $4); }\n+\t\t  cplus_decl_attributes ($$, $4, prefix_attributes); }\n \t| TYPENAME ':' expr_no_commas maybe_attribute\n \t\t{ $$ = grokbitfield ($$, current_declspecs, $3);\n-\t\t  cplus_decl_attributes ($$, $4); }\n+\t\t  cplus_decl_attributes ($$, $4, prefix_attributes); }\n \t;\n \n notype_component_declarator:\n \t  notype_declarator exception_specification_opt maybeasm maybe_attribute maybe_init\n \t\t{ $$ = grokfield ($$, current_declspecs, $2, $5, $3);\n-\t\t  cplus_decl_attributes ($$, $4); }\n+\t\t  cplus_decl_attributes ($$, $4, prefix_attributes); }\n \t| IDENTIFIER ':' expr_no_commas maybe_attribute\n \t\t{ $$ = grokbitfield ($$, current_declspecs, $3);\n-\t\t  cplus_decl_attributes ($$, $4); }\n+\t\t  cplus_decl_attributes ($$, $4, prefix_attributes); }\n \t| ':' expr_no_commas maybe_attribute\n \t\t{ $$ = grokbitfield (NULL_TREE, current_declspecs, $2);\n-\t\t  cplus_decl_attributes ($$, $3); }\n+\t\t  cplus_decl_attributes ($$, $3, prefix_attributes); }\n \t;\n \n /* We chain the enumerators in reverse order."}]}