{"sha": "0bfc204142439b8167bf3447d7d12b65d1da82f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJmYzIwNDE0MjQzOWI4MTY3YmYzNDQ3ZDdkMTJiNjVkMWRhODJmOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-09-26T16:54:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-09-26T16:54:51Z"}, "message": "re PR tree-optimization/91896 (ICE in vect_get_vec_def_for_stmt_copy, at tree-vect-stmts.c:1687)\n\n2019-09-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/91896\n\t* tree-vect-loop.c (vectorizable_reduction): The single\n\tdef-use cycle optimization cannot apply when there's more\n\tthan one pattern stmt involved.\n\n\t* gcc.dg/torture/pr91896.c: New testcase.\n\nFrom-SVN: r276158", "tree": {"sha": "a2335246e4ea0ed0bd0ecd9fb508bcd581749c5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2335246e4ea0ed0bd0ecd9fb508bcd581749c5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bfc204142439b8167bf3447d7d12b65d1da82f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bfc204142439b8167bf3447d7d12b65d1da82f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bfc204142439b8167bf3447d7d12b65d1da82f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bfc204142439b8167bf3447d7d12b65d1da82f8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b4dbccc1f828fa00e6acc8b88d24301c65552df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4dbccc1f828fa00e6acc8b88d24301c65552df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b4dbccc1f828fa00e6acc8b88d24301c65552df"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "1358d4b3542e7adb03b77a621568a7aa8c15c6db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfc204142439b8167bf3447d7d12b65d1da82f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfc204142439b8167bf3447d7d12b65d1da82f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bfc204142439b8167bf3447d7d12b65d1da82f8", "patch": "@@ -1,3 +1,10 @@\n+2019-09-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91896\n+\t* tree-vect-loop.c (vectorizable_reduction): The single\n+\tdef-use cycle optimization cannot apply when there's more\n+\tthan one pattern stmt involved.\n+\n 2019-09-26  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-loop.c (vect_analyze_loop_operations): Analyze"}, {"sha": "7a7070670ed86b55c9f6256bcfbabe54ea69109e", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfc204142439b8167bf3447d7d12b65d1da82f8/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfc204142439b8167bf3447d7d12b65d1da82f8/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=0bfc204142439b8167bf3447d7d12b65d1da82f8", "patch": "@@ -7230,12 +7230,13 @@ get_inner_reference (tree exp, poly_int64_pod *pbitsize,\n       *punsignedp = (! INTEGRAL_TYPE_P (TREE_TYPE (exp))\n \t\t     || TYPE_UNSIGNED (TREE_TYPE (exp)));\n \n-      /* For vector types, with the correct size of access, use the mode of\n-\t inner type.  */\n-      if (TREE_CODE (TREE_TYPE (TREE_OPERAND (exp, 0))) == VECTOR_TYPE\n-\t  && TREE_TYPE (exp) == TREE_TYPE (TREE_TYPE (TREE_OPERAND (exp, 0)))\n-\t  && tree_int_cst_equal (size_tree, TYPE_SIZE (TREE_TYPE (exp))))\n-        mode = TYPE_MODE (TREE_TYPE (exp));\n+      /* For vector element types with the correct size of access or for\n+         vector typed accesses use the mode of the access type.  */\n+      if ((TREE_CODE (TREE_TYPE (TREE_OPERAND (exp, 0))) == VECTOR_TYPE\n+\t   && TREE_TYPE (exp) == TREE_TYPE (TREE_TYPE (TREE_OPERAND (exp, 0)))\n+\t   && tree_int_cst_equal (size_tree, TYPE_SIZE (TREE_TYPE (exp))))\n+\t  || VECTOR_TYPE_P (TREE_TYPE (exp)))\n+\tmode = TYPE_MODE (TREE_TYPE (exp));\n     }\n   else\n     {"}, {"sha": "19ad3936b64b06b32db928dc62aba7eb23ab673b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfc204142439b8167bf3447d7d12b65d1da82f8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfc204142439b8167bf3447d7d12b65d1da82f8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0bfc204142439b8167bf3447d7d12b65d1da82f8", "patch": "@@ -1,3 +1,8 @@\n+2019-09-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/91897\n+\t* gcc.target/i386/pr91897.c: New testcase.\n+\n 2019-09-26  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/91914"}, {"sha": "0615ad2fdcafd49fbc331917964b6eb2082a27a4", "filename": "gcc/testsuite/gcc.target/i386/pr91897.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfc204142439b8167bf3447d7d12b65d1da82f8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91897.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfc204142439b8167bf3447d7d12b65d1da82f8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91897.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91897.c?ref=0bfc204142439b8167bf3447d7d12b65d1da82f8", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+typedef double Double16 __attribute__((vector_size(8*16)));\n+\n+void mult(Double16 *res, const Double16 *v1, const Double16 *v2)\n+{\n+  *res = *v1 * *v2;\n+}\n+\n+/* We want 4 ymm loads and 4 ymm stores.  */\n+/* { dg-final { scan-assembler-times \"movapd\" 8 } } */"}]}