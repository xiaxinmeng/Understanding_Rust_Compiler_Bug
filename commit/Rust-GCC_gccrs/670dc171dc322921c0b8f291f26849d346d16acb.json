{"sha": "670dc171dc322921c0b8f291f26849d346d16acb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcwZGMxNzFkYzMyMjkyMWMwYjhmMjkxZjI2ODQ5ZDM0NmQxNmFjYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2009-01-14T19:37:02Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2009-01-14T19:37:02Z"}, "message": "long-calls-1.c: Tolerate the lack of sibling calls and/or PLT markers.\n\n\t* gcc.target/arm/long-calls-1.c: Tolerate the lack of sibling\n\tcalls and/or PLT markers.\n\t* gcc.target/arm/long-calls-2.c: Tolerate the lack of sibling\n\tcalls and/or PLT markers.\n\t* gcc.target/arm/long-calls-3.c: Tolerate the lack of sibling\n\tcalls and/or PLT markers.\n\t* gcc.target/arm/long-calls-4.c: Tolerate the lack of sibling\n\tcalls and/or PLT markers.\n\nFrom-SVN: r143381", "tree": {"sha": "69062a60004716ed6def8e19eabcc69f6ced88ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69062a60004716ed6def8e19eabcc69f6ced88ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/670dc171dc322921c0b8f291f26849d346d16acb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/670dc171dc322921c0b8f291f26849d346d16acb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/670dc171dc322921c0b8f291f26849d346d16acb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/670dc171dc322921c0b8f291f26849d346d16acb/comments", "author": null, "committer": null, "parents": [{"sha": "ed8a0bc47c8aa359f417360d8443770b02327e1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed8a0bc47c8aa359f417360d8443770b02327e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed8a0bc47c8aa359f417360d8443770b02327e1c"}], "stats": {"total": 353, "additions": 197, "deletions": 156}, "files": [{"sha": "95015b36e42287da1ea1da83fe48eaed36c4b1fa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670dc171dc322921c0b8f291f26849d346d16acb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670dc171dc322921c0b8f291f26849d346d16acb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=670dc171dc322921c0b8f291f26849d346d16acb", "patch": "@@ -1,3 +1,14 @@\n+2009-01-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* gcc.target/arm/long-calls-1.c: Tolerate the lack of sibling\n+\tcalls and/or PLT markers.\n+\t* gcc.target/arm/long-calls-2.c: Tolerate the lack of sibling\n+\tcalls and/or PLT markers.\n+\t* gcc.target/arm/long-calls-3.c: Tolerate the lack of sibling\n+\tcalls and/or PLT markers.\n+\t* gcc.target/arm/long-calls-4.c: Tolerate the lack of sibling\n+\tcalls and/or PLT markers.\n+\n 2009-01-14  Daniel Jacobowitz  <dan@codesourcery.com>\n \t    Nathan Froyd  <froydnj@codesourcery.com>\n \t    Joseph Myers  <joseph@codesourcery.com>"}, {"sha": "587f6d6f25b879736f4e1a283d9b00ebcfea4f24", "filename": "gcc/testsuite/gcc.target/arm/long-calls-1.c", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670dc171dc322921c0b8f291f26849d346d16acb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670dc171dc322921c0b8f291f26849d346d16acb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-1.c?ref=670dc171dc322921c0b8f291f26849d346d16acb", "patch": "@@ -38,8 +38,14 @@ DO_TESTS_CALL_ATTR (weak_, EXTERN_CALL, weak)\n DO_TESTS_CALL_ATTR (static_, STATIC_CALL,)\n \n \n-/* Calls to remote_* should honor the call type sttribute,\n-   with \"short\" being the default.  */\n+/* Calls to remote_* should honor the call type attribute,\n+   with \"short\" being the default.\n+\n+   In the regular expressions below:\n+   \n+   * We allow both \"b\" and \"bl\" in some cases to allow for the\n+     possibility of sibling calls.  As of this writing, GCC does not\n+     use sibling calls in Thumb-2 mode.  */\n \n /* { dg-final { scan-assembler \"\\tbl\\tremote_n1\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tremote_n2\\n\" } } */\n@@ -59,68 +65,68 @@ DO_TESTS_CALL_ATTR (static_, STATIC_CALL,)\n    should be short.  */\n \n /* { dg-final { scan-assembler \"\\tbl\\tstrong_n1\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_n1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_n1\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tstrong_n2\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_n2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_n2\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tstrong_n3\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_n3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_n3\\n\" } } */\n \n /* { dg-final { scan-assembler \"\\tbl\\tstrong_l1\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_l1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_l1\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_l2\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tstrong_l3\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_l3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_l3\\n\" } } */\n \n /* { dg-final { scan-assembler \"\\tbl\\tstrong_s1\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_s1\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tstrong_s2\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_s2\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tstrong_s3\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_s3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_s3\\n\" } } */\n \n \n-/* Calls to weak_* should honor the call type sttribute,\n+/* Calls to weak_* should honor the call type attribute,\n    with \"short\" being the default.  */\n \n /* { dg-final { scan-assembler \"\\tbl\\tweak_n1\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tweak_n1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tweak_n1\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tweak_n2\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tweak_n2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tweak_n2\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tweak_n3\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tweak_n3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tweak_n3\\n\" } } */\n \n /* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l1\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l2\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l3\\n\" } } */\n \n /* { dg-final { scan-assembler \"\\tbl\\tweak_s1\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tweak_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tweak_s1\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tweak_s2\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tweak_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tweak_s2\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tweak_s3\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tweak_s3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tweak_s3\\n\" } } */\n \n \n /* Calls to static_*2 calls should honor the call type attribute,\n    with \"short\" being the default.  Calls to other static_* functions\n    should be short.  */\n \n /* { dg-final { scan-assembler \"\\tbl\\tstatic_n1\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_n1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_n1\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tstatic_n2\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_n2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_n2\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tstatic_n3\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_n3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_n3\\n\" } } */\n \n /* { dg-final { scan-assembler \"\\tbl\\tstatic_l1\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_l1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_l1\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tbl?\\tstatic_l2\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tstatic_l3\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_l3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_l3\\n\" } } */\n \n /* { dg-final { scan-assembler \"\\tbl\\tstatic_s1\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_s1\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tstatic_s2\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_s2\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tstatic_s3\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_s3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_s3\\n\" } } */"}, {"sha": "8ce2404c1f7c86c35feda7ca979f27fcb272173d", "filename": "gcc/testsuite/gcc.target/arm/long-calls-2.c", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670dc171dc322921c0b8f291f26849d346d16acb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670dc171dc322921c0b8f291f26849d346d16acb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-2.c?ref=670dc171dc322921c0b8f291f26849d346d16acb", "patch": "@@ -38,8 +38,14 @@ DO_TESTS_CALL_ATTR (weak_, EXTERN_CALL, weak)\n DO_TESTS_CALL_ATTR (static_, STATIC_CALL,)\n \n \n-/* Calls to remote_* should honor the call type sttribute,\n-   with \"long\" being the default.  */\n+/* Calls to remote_* should honor the call type attribute,\n+   with \"long\" being the default.\n+\n+   In the regular expressions below:\n+   \n+   * We allow both \"b\" and \"bl\" in some cases to allow for the\n+     possibility of sibling calls.  As of this writing, GCC does not\n+     use sibling calls in Thumb-2 mode.  */\n \n /* { dg-final { scan-assembler-not \"\\tbl\\tremote_n1\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tbl\\tremote_n2\\n\" } } */\n@@ -59,26 +65,26 @@ DO_TESTS_CALL_ATTR (static_, STATIC_CALL,)\n    should be short.  */\n \n /* { dg-final { scan-assembler \"\\tbl\\tstrong_n1\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_n1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_n1\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tbl\\tstrong_n2\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tstrong_n3\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_n3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_n3\\n\" } } */\n \n /* { dg-final { scan-assembler \"\\tbl\\tstrong_l1\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_l1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_l1\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_l2\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tstrong_l3\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_l3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_l3\\n\" } } */\n \n /* { dg-final { scan-assembler \"\\tbl\\tstrong_s1\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_s1\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tstrong_s2\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_s2\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tstrong_s3\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_s3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_s3\\n\" } } */\n \n \n-/* Calls to weak_* should honor the call type sttribute,\n+/* Calls to weak_* should honor the call type attribute,\n    with \"long\" being the default.  */\n \n /* { dg-final { scan-assembler-not \"\\tbl?\\tweak_n1\\n\" } } */\n@@ -90,32 +96,32 @@ DO_TESTS_CALL_ATTR (static_, STATIC_CALL,)\n /* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l3\\n\" } } */\n \n /* { dg-final { scan-assembler \"\\tbl\\tweak_s1\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tweak_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tweak_s1\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tweak_s2\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tweak_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tweak_s2\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tweak_s3\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tweak_s3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tweak_s3\\n\" } } */\n \n \n /* Calls to static_*2 calls should honor the call type attribute,\n    with \"long\" being the default.  Calls to other static_* functions\n    should be short.  */\n \n /* { dg-final { scan-assembler \"\\tbl\\tstatic_n1\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_n1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_n1\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tbl?\\tstatic_n2\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tstatic_n3\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_n3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_n3\\n\" } } */\n \n /* { dg-final { scan-assembler \"\\tbl\\tstatic_l1\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_l1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_l1\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tbl?\\tstatic_l2\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tstatic_l3\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_l3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_l3\\n\" } } */\n \n /* { dg-final { scan-assembler \"\\tbl\\tstatic_s1\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_s1\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tstatic_s2\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_s2\\n\" } } */\n /* { dg-final { scan-assembler \"\\tbl\\tstatic_s3\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_s3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_s3\\n\" } } */"}, {"sha": "bd1891c008b148b19193b23a01554fbe8eb461e8", "filename": "gcc/testsuite/gcc.target/arm/long-calls-3.c", "status": "modified", "additions": 68, "deletions": 59, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670dc171dc322921c0b8f291f26849d346d16acb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670dc171dc322921c0b8f291f26849d346d16acb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-3.c?ref=670dc171dc322921c0b8f291f26849d346d16acb", "patch": "@@ -39,79 +39,88 @@ DO_TESTS_CALL_ATTR (static_, STATIC_CALL,)\n \n \n /* Calls to remote_*, strong_* and weak_* should honor the call type\n-   sttribute, with \"short\" being the default.  */\n+   attribute, with \"short\" being the default.  \n \n-/* { dg-final { scan-assembler \"\\tbl\\tremote_n1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tremote_n2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tremote_n3\\\\(PLT\\\\)\\n\" } } */\n+   In the regular expressions below:\n+   \n+   * The PLT marker is optional, even though we are using -fpic,\n+     because it is not used (or required) on some targets.\n \n-/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l3\\\\(PLT\\\\)\\n\" } } */\n+   * We allow both \"b\" and \"bl\" in some cases to allow for the\n+     possibility of sibling calls.  As of this writing, GCC does not\n+     use sibling calls in Thumb-2 mode.  */\n \n-/* { dg-final { scan-assembler \"\\tbl\\tremote_s1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tremote_s2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tremote_s3\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_n1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_n2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_n3(\\\\(PLT\\\\))?\\n\" } } */\n \n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l3(\\\\(PLT\\\\))?\\n\" } } */\n \n-/* { dg-final { scan-assembler \"\\tbl\\tstrong_n1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_n1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tstrong_n2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_n2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tstrong_n3\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_n3\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_s1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_s2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_s3(\\\\(PLT\\\\))?\\n\" } } */\n \n-/* { dg-final { scan-assembler-not \"\\tbl\\tstrong_l1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_l2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl\\tstrong_l3\\\\(PLT\\\\)\\n\" } } */\n \n-/* { dg-final { scan-assembler \"\\tbl\\tstrong_s1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_s1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tstrong_s2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_s2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tstrong_s3\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_s3\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_n1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_n1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_n2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_n2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_n3(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_n3(\\\\(PLT\\\\))?\\n\" } } */\n \n+/* { dg-final { scan-assembler-not \"\\tbl\\tstrong_l1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_l2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tstrong_l3(\\\\(PLT\\\\))?\\n\" } } */\n \n-/* { dg-final { scan-assembler \"\\tbl\\tweak_n1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tweak_n1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tweak_n2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tweak_n2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tweak_n3\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tweak_n3\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_s1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_s1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_s2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_s2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_s3(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_s3(\\\\(PLT\\\\))?\\n\" } } */\n \n-/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l3\\\\(PLT\\\\)\\n\" } } */\n \n-/* { dg-final { scan-assembler \"\\tbl\\tweak_s1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tweak_s1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tweak_s2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tweak_s2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tweak_s3\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tweak_s3\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_n1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tweak_n1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_n2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tweak_n2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_n3(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tweak_n3(\\\\(PLT\\\\))?\\n\" } } */\n+\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l3(\\\\(PLT\\\\))?\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_s1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tweak_s1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_s2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tweak_s2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_s3(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tweak_s3(\\\\(PLT\\\\))?\\n\" } } */\n \n \n /* Calls to static_*2 calls should honor the call type attribute,\n    with \"short\" being the default.  Calls to other static_* functions\n    should be short.  */\n \n-/* { dg-final { scan-assembler \"\\tbl\\tstatic_n1(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_n1(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tstatic_n2(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_n2(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tstatic_n3(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_n3(\\\\(PLT\\\\))\\n\" } } */\n-\n-/* { dg-final { scan-assembler \"\\tbl\\tstatic_l1(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_l1(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl?\\tstatic_l2(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tstatic_l3(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_l3(\\\\(PLT\\\\))\\n\" } } */\n-\n-/* { dg-final { scan-assembler \"\\tbl\\tstatic_s1(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_s1(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tstatic_s2(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_s2(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tstatic_s3(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_s3(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_n1((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_n1((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_n2((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_n2((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_n3((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_n3((\\\\(PLT\\\\))?)\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_l1((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_l1((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstatic_l2((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_l3((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_l3((\\\\(PLT\\\\))?)\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_s1((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_s1((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_s2((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_s2((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_s3((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_s3((\\\\(PLT\\\\))?)\\n\" } } */"}, {"sha": "dc184b8f8be3e463321a1d1febd6f2a58c16e914", "filename": "gcc/testsuite/gcc.target/arm/long-calls-4.c", "status": "modified", "additions": 61, "deletions": 52, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670dc171dc322921c0b8f291f26849d346d16acb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670dc171dc322921c0b8f291f26849d346d16acb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-4.c?ref=670dc171dc322921c0b8f291f26849d346d16acb", "patch": "@@ -39,72 +39,81 @@ DO_TESTS_CALL_ATTR (static_, STATIC_CALL,)\n \n \n /* Calls to remote_*, strong_* and weak_* should honor the call type\n-   sttribute, with \"long\" being the default.  */\n+   attribute, with \"long\" being the default.  \n \n-/* { dg-final { scan-assembler-not \"\\tbl\\tremote_n1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl\\tremote_n2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl\\tremote_n3\\\\(PLT\\\\)\\n\" } } */\n+   In the regular expressions below:\n+   \n+   * The PLT marker is optional, even though we are using -fpic,\n+     because it is not used (or required) on some targets.\n \n-/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l3\\\\(PLT\\\\)\\n\" } } */\n+   * We allow both \"b\" and \"bl\" in some cases to allow for the\n+     possibility of sibling calls.  As of this writing, GCC does not\n+     use sibling calls in Thumb-2 mode.  */\n \n-/* { dg-final { scan-assembler \"\\tbl\\tremote_s1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tremote_s2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tremote_s3\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_n1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_n2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_n3(\\\\(PLT\\\\))?\\n\" } } */\n \n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l3(\\\\(PLT\\\\))?\\n\" } } */\n \n-/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_n1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_n2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_n3\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_s1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_s2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_s3(\\\\(PLT\\\\))?\\n\" } } */\n \n-/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_l1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_l2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_l3\\\\(PLT\\\\)\\n\" } } */\n \n-/* { dg-final { scan-assembler \"\\tbl\\tstrong_s1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_s1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tstrong_s2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_s2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tstrong_s3\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstrong_s3\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_n1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_n2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_n3(\\\\(PLT\\\\))?\\n\" } } */\n \n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_l1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_l2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_l3(\\\\(PLT\\\\))?\\n\" } } */\n \n-/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_n1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_n2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_n3\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_s1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_s1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_s2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_s2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_s3(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstrong_s3(\\\\(PLT\\\\))?\\n\" } } */\n \n-/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l3\\\\(PLT\\\\)\\n\" } } */\n \n-/* { dg-final { scan-assembler \"\\tbl\\tweak_s1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tweak_s1\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tweak_s2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tweak_s2\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tweak_s3\\\\(PLT\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tweak_s3\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_n1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_n2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_n3(\\\\(PLT\\\\))?\\n\" } } */\n+\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l3(\\\\(PLT\\\\))?\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_s1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tweak_s1(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_s2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tweak_s2(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_s3(\\\\(PLT\\\\))?\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tweak_s3(\\\\(PLT\\\\))?\\n\" } } */\n \n \n /* Calls to static_*2 calls should honor the call type attribute,\n    with \"long\" being the default.  Calls to other static_* functions\n    should be short.  */\n \n-/* { dg-final { scan-assembler \"\\tbl\\tstatic_n1(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_n1(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl?\\tstatic_n2(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tstatic_n3(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_n3(\\\\(PLT\\\\))\\n\" } } */\n-\n-/* { dg-final { scan-assembler \"\\tbl\\tstatic_l1(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_l1(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler-not \"\\tbl?\\tstatic_l2(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tstatic_l3(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_l3(\\\\(PLT\\\\))\\n\" } } */\n-\n-/* { dg-final { scan-assembler \"\\tbl\\tstatic_s1(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_s1(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tstatic_s2(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_s2(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tbl\\tstatic_s3(\\\\(PLT\\\\))\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tb\\tstatic_s3(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_n1((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_n1((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstatic_n2((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_n3((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_n3((\\\\(PLT\\\\))?)\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_l1((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_l1((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstatic_l2((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_l3((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_l3((\\\\(PLT\\\\))?)\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_s1((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_s1((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_s2((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_s2((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_s3((\\\\(PLT\\\\))?)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl?\\tstatic_s3((\\\\(PLT\\\\))?)\\n\" } } */"}]}