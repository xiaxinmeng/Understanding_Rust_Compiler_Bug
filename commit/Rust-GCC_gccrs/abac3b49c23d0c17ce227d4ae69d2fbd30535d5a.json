{"sha": "abac3b49c23d0c17ce227d4ae69d2fbd30535d5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJhYzNiNDljMjNkMGMxN2NlMjI3ZDRhZTY5ZDJmYmQzMDUzNWQ1YQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2005-04-09T12:03:54Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2005-04-09T12:03:54Z"}, "message": "arm.c (FL_WBUF): Define.\n\n\t* arm.c (FL_WBUF): Define.\n\t(arm_tune_strongarm): Renamed from arm_is_strong.  All uses changed.\n\t(arm_is_6_or_7): Delete.\n\t(arm_tune_wbuf): New.\n\t(arm_override_options): Set arm_tune_wbuf.\n\t* arm.h (arm_tune_strongarm): Renamed from arm_is_strong.\n\t(arm_is_6_or_7): Delete declaration.\n\t(arm_tune_wbuf): New declartion.\n\t* arm.md (is_strongarm): Derive from arm_tune_strongarm.\n\t(model_wbuf): Derive from arm_tune_wbuf.\n\t* arm-cores.def (arm600, arm610, arm620, arm700, arm700i, arm710)\n\t(arm720, arm710c, arm7100, arm7500, arm7500fe, arm710t, arm720t)\n\t(arm740t): Mark CPUs as having a write buffer.\n\nFrom-SVN: r97894", "tree": {"sha": "22815b80db64c76f5385a4035863b0bd38a6fa6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22815b80db64c76f5385a4035863b0bd38a6fa6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abac3b49c23d0c17ce227d4ae69d2fbd30535d5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abac3b49c23d0c17ce227d4ae69d2fbd30535d5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abac3b49c23d0c17ce227d4ae69d2fbd30535d5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abac3b49c23d0c17ce227d4ae69d2fbd30535d5a/comments", "author": null, "committer": null, "parents": [{"sha": "835d64ab880ab3932c0e67c87ff859472771456d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/835d64ab880ab3932c0e67c87ff859472771456d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/835d64ab880ab3932c0e67c87ff859472771456d"}], "stats": {"total": 78, "additions": 48, "deletions": 30}, "files": [{"sha": "6b36779dcf92eb79dffab650ef42f355d96d4356", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abac3b49c23d0c17ce227d4ae69d2fbd30535d5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abac3b49c23d0c17ce227d4ae69d2fbd30535d5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abac3b49c23d0c17ce227d4ae69d2fbd30535d5a", "patch": "@@ -1,3 +1,19 @@\n+2005-04-09  Richard Earnshaw <richard.earnshaw@arm.com>\n+\n+\t* arm.c (FL_WBUF): Define.\n+\t(arm_tune_strongarm): Renamed from arm_is_strong.  All uses changed.\n+\t(arm_is_6_or_7): Delete.\n+\t(arm_tune_wbuf): New.\n+\t(arm_override_options): Set arm_tune_wbuf.\n+\t* arm.h (arm_tune_strongarm): Renamed from arm_is_strong.\n+\t(arm_is_6_or_7): Delete declaration.\n+\t(arm_tune_wbuf): New declartion.\n+\t* arm.md (is_strongarm): Derive from arm_tune_strongarm.\n+\t(model_wbuf): Derive from arm_tune_wbuf.\n+\t* arm-cores.def (arm600, arm610, arm620, arm700, arm700i, arm710)\n+\t(arm720, arm710c, arm7100, arm7500, arm7500fe, arm710t, arm720t)\n+\t(arm740t): Mark CPUs as having a write buffer.\n+\n 2005-04-09  Uros Bizjak  <uros@kss-loka.si>\n \n \t* config/i386/i386.md (*fp_jcc_7_387): Use 'const0_operand' instead"}, {"sha": "a18a09c56c99941a6e033f62c161061fcf43e3d0", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abac3b49c23d0c17ce227d4ae69d2fbd30535d5a/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abac3b49c23d0c17ce227d4ae69d2fbd30535d5a/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=abac3b49c23d0c17ce227d4ae69d2fbd30535d5a", "patch": "@@ -43,22 +43,22 @@ ARM_CORE(\"arm3\",   arm3,\t2,\tFL_CO_PROC | FL_MODE26, slowmul)\n /* V3 Architecture Processors */\n ARM_CORE(\"arm6\",          arm6,\t\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n ARM_CORE(\"arm60\",         arm60,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm600\",        arm600,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm610\",        arm610,\t3,\t             FL_MODE26, slowmul)\n-ARM_CORE(\"arm620\",        arm620,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm600\",        arm600,\t3,\tFL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm610\",        arm610,\t3,\t             FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm620\",        arm620,\t3,\tFL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n ARM_CORE(\"arm7\",          arm7,\t\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n ARM_CORE(\"arm7d\",         arm7d,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n ARM_CORE(\"arm7di\",        arm7di,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n ARM_CORE(\"arm70\",         arm70,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm700\",        arm700,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm700i\",       arm700i,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm710\",        arm710,\t3,\t             FL_MODE26, slowmul)\n-ARM_CORE(\"arm720\",        arm720,\t3,\t             FL_MODE26, slowmul)\n-ARM_CORE(\"arm710c\",       arm710c,\t3,\t             FL_MODE26, slowmul)\n-ARM_CORE(\"arm7100\",       arm7100,\t3,\t             FL_MODE26, slowmul)\n-ARM_CORE(\"arm7500\",       arm7500,\t3,\t             FL_MODE26, slowmul)\n+ARM_CORE(\"arm700\",        arm700,\t3,\tFL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm700i\",       arm700i,\t3,\tFL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm710\",        arm710,\t3,\t             FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm720\",        arm720,\t3,\t             FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm710c\",       arm710c,\t3,\t             FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm7100\",       arm7100,\t3,\t             FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm7500\",       arm7500,\t3,\t             FL_MODE26 | FL_WBUF, slowmul)\n /* Doesn't have an external co-proc, but does have embedded fpa.  */\n-ARM_CORE(\"arm7500fe\",     arm7500fe,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm7500fe\",     arm7500fe,\t3,\tFL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n \n /* V3M Architecture Processors */\n /* arm7m doesn't exist on its own, but only with D, (\"and\", and I), but\n@@ -76,11 +76,11 @@ ARM_CORE(\"strongarm1100\", strongarm1100, 4,\t             FL_MODE26 | FL_LDSCHED\n ARM_CORE(\"strongarm1110\", strongarm1110, 4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, fastmul)\n \n /* V4T Architecture Processors */\n-ARM_CORE(\"arm7tdmi\",      arm7tdmi,\t4T,\tFL_CO_PROC            , fastmul)\n-ARM_CORE(\"arm7tdmi-s\",    arm7tdmis,\t4T,\tFL_CO_PROC            , fastmul)\n-ARM_CORE(\"arm710t\",       arm710t,\t4T,\t                      0 , fastmul)\n-ARM_CORE(\"arm720t\",       arm720t,\t4T,\t                      0 , fastmul)\n-ARM_CORE(\"arm740t\",       arm740t,\t4T,\t                      0 , fastmul)\n+ARM_CORE(\"arm7tdmi\",      arm7tdmi,\t4T,\tFL_CO_PROC          , fastmul)\n+ARM_CORE(\"arm7tdmi-s\",    arm7tdmis,\t4T,\tFL_CO_PROC          , fastmul)\n+ARM_CORE(\"arm710t\",       arm710t,\t4T,\t             FL_WBUF, fastmul)\n+ARM_CORE(\"arm720t\",       arm720t,\t4T,\t             FL_WBUF, fastmul)\n+ARM_CORE(\"arm740t\",       arm740t,\t4T,\t             FL_WBUF, fastmul)\n ARM_CORE(\"arm9\",          arm9,\t\t4T,\t                         FL_LDSCHED, fastmul)\n ARM_CORE(\"arm9tdmi\",      arm9tdmi,\t4T,\t                         FL_LDSCHED, fastmul)\n ARM_CORE(\"arm920\",        arm920,\t4T,\t                         FL_LDSCHED, fastmul)"}, {"sha": "13cf323d5618f32a9f0c36f2657a30ae04426474", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abac3b49c23d0c17ce227d4ae69d2fbd30535d5a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abac3b49c23d0c17ce227d4ae69d2fbd30535d5a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=abac3b49c23d0c17ce227d4ae69d2fbd30535d5a", "patch": "@@ -386,6 +386,8 @@ static int thumb_call_reg_needed;\n #define FL_ARCH6      (1 << 12)       /* Architecture rel 6.  Adds\n \t\t\t\t\t media instructions.  */\n #define FL_VFPV2      (1 << 13)       /* Vector Floating Point V2.  */\n+#define FL_WBUF\t      (1 << 14)\t      /* Schedule for write buffer ops.\n+\t\t\t\t\t Note: ARM6 & 7 derivatives only.  */\n \n #define FL_IWMMXT     (1 << 29)\t      /* XScale v2 or \"Intel Wireless MMX technology\".  */\n \n@@ -438,7 +440,7 @@ int arm_arch6 = 0;\n int arm_ld_sched = 0;\n \n /* Nonzero if this chip is a StrongARM.  */\n-int arm_is_strong = 0;\n+int arm_tune_strongarm = 0;\n \n /* Nonzero if this chip is a Cirrus variant.  */\n int arm_arch_cirrus = 0;\n@@ -452,8 +454,9 @@ int arm_arch_xscale = 0;\n /* Nonzero if tuning for XScale  */\n int arm_tune_xscale = 0;\n \n-/* Nonzero if this chip is an ARM6 or an ARM7.  */\n-int arm_is_6_or_7 = 0;\n+/* Nonzero if we want to tune for stores that access the write-buffer. \n+   This typicallly means an ARM6 or ARM7 with MMU or MPU.  */\n+int arm_tune_wbuf = 0;\n \n /* Nonzero if generating Thumb instructions.  */\n int thumb_code = 0;\n@@ -980,10 +983,9 @@ arm_override_options (void)\n   arm_arch_cirrus = (insn_flags & FL_CIRRUS) != 0;\n \n   arm_ld_sched = (tune_flags & FL_LDSCHED) != 0;\n-  arm_is_strong = (tune_flags & FL_STRONG) != 0;\n+  arm_tune_strongarm = (tune_flags & FL_STRONG) != 0;\n   thumb_code = (TARGET_ARM == 0);\n-  arm_is_6_or_7 = (((tune_flags & (FL_MODE26 | FL_MODE32))\n-\t\t    && !(tune_flags & FL_ARCH4))) != 0;\n+  arm_tune_wbuf = (tune_flags & FL_WBUF) != 0;\n   arm_tune_xscale = (tune_flags & FL_XSCALE) != 0;\n   arm_arch_iwmmxt = (insn_flags & FL_IWMMXT) != 0;\n \n@@ -1182,7 +1184,7 @@ arm_override_options (void)\n \n       /* StrongARM has early execution of branches, so a sequence\n          that is worth skipping is shorter.  */\n-      if (arm_is_strong)\n+      if (arm_tune_strongarm)\n         max_insns_skipped = 3;\n     }\n \n@@ -1396,7 +1398,7 @@ use_return_insn (int iscond, rtx sibling)\n \n   /* On StrongARM, conditional returns are expensive if they aren't\n      taken and multiple registers have been stacked.  */\n-  if (iscond && arm_is_strong)\n+  if (iscond && arm_tune_strongarm)\n     {\n       /* Conditional return when just the LR is stored is a simple\n \t conditional-load instruction, that's not expensive.  */"}, {"sha": "59ad92ad25448a55bea709da7a92009f034102e3", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abac3b49c23d0c17ce227d4ae69d2fbd30535d5a/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abac3b49c23d0c17ce227d4ae69d2fbd30535d5a/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=abac3b49c23d0c17ce227d4ae69d2fbd30535d5a", "patch": "@@ -525,7 +525,7 @@ extern int arm_ld_sched;\n extern int thumb_code;\n \n /* Nonzero if this chip is a StrongARM.  */\n-extern int arm_is_strong;\n+extern int arm_tune_strongarm;\n \n /* Nonzero if this chip is a Cirrus variant.  */\n extern int arm_arch_cirrus;\n@@ -536,11 +536,11 @@ extern int arm_arch_iwmmxt;\n /* Nonzero if this chip is an XScale.  */\n extern int arm_arch_xscale;\n \n-/* Nonzero if tuning for XScale  */\n+/* Nonzero if tuning for XScale.  */\n extern int arm_tune_xscale;\n \n-/* Nonzero if this chip is an ARM6 or an ARM7.  */\n-extern int arm_is_6_or_7;\n+/* Nonzero if tuning for stores via the write buffer.  */\n+extern int arm_tune_wbuf;\n \n /* Nonzero if we should define __THUMB_INTERWORK__ in the\n    preprocessor."}, {"sha": "6dc46aecb356db7a12d70c56b3ad67e3cee6874d", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abac3b49c23d0c17ce227d4ae69d2fbd30535d5a/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abac3b49c23d0c17ce227d4ae69d2fbd30535d5a/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=abac3b49c23d0c17ce227d4ae69d2fbd30535d5a", "patch": "@@ -135,7 +135,7 @@\n \n ; IS_STRONGARM is set to 'yes' when compiling for StrongARM, it affects\n ; scheduling decisions for the load unit and the multiplier.\n-(define_attr \"is_strongarm\" \"no,yes\" (const (symbol_ref \"arm_is_strong\")))\n+(define_attr \"is_strongarm\" \"no,yes\" (const (symbol_ref \"arm_tune_strongarm\")))\n \n ; IS_XSCALE is set to 'yes' when compiling for XScale.\n (define_attr \"is_xscale\" \"no,yes\" (const (symbol_ref \"arm_tune_xscale\")))\n@@ -267,7 +267,7 @@\n ; have one.  Later ones, such as StrongARM, have write-back caches, so don't\n ; suffer blockages enough to warrant modelling this (and it can adversely\n ; affect the schedule).\n-(define_attr \"model_wbuf\" \"no,yes\" (const (symbol_ref \"arm_is_6_or_7\")))\n+(define_attr \"model_wbuf\" \"no,yes\" (const (symbol_ref \"arm_tune_wbuf\")))\n \n ; WRITE_CONFLICT implies that a read following an unrelated write is likely\n ; to stall the processor.  Used with model_wbuf above."}]}