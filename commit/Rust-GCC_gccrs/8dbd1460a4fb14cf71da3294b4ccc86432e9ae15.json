{"sha": "8dbd1460a4fb14cf71da3294b4ccc86432e9ae15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRiZDE0NjBhNGZiMTRjZjcxZGEzMjk0YjRjY2M4NjQzMmU5YWUxNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-07T15:26:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-07T15:26:21Z"}, "message": "[multiple changes]\n\n2009-04-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Restore_Scope_Stack): First_Private_Entity is only\n\trelevant to packages.\n\n2009-04-07  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_attr.adb: Minor reformatting\n\n\t* sem_ch6.adb: Minor reformatting\n\nFrom-SVN: r145682", "tree": {"sha": "869076d4f1d441b172e7696433afa61912dd1812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/869076d4f1d441b172e7696433afa61912dd1812"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dbd1460a4fb14cf71da3294b4ccc86432e9ae15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dbd1460a4fb14cf71da3294b4ccc86432e9ae15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dbd1460a4fb14cf71da3294b4ccc86432e9ae15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dbd1460a4fb14cf71da3294b4ccc86432e9ae15/comments", "author": null, "committer": null, "parents": [{"sha": "2ddc20004f457e12735ceeda5e42ba63c3e1f60a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ddc20004f457e12735ceeda5e42ba63c3e1f60a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ddc20004f457e12735ceeda5e42ba63c3e1f60a"}], "stats": {"total": 93, "additions": 55, "deletions": 38}, "files": [{"sha": "5dc09e10775f0f88fb8c98ee97e1c8615fa59688", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dbd1460a4fb14cf71da3294b4ccc86432e9ae15/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dbd1460a4fb14cf71da3294b4ccc86432e9ae15/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8dbd1460a4fb14cf71da3294b4ccc86432e9ae15", "patch": "@@ -1,3 +1,14 @@\n+2009-04-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Restore_Scope_Stack): First_Private_Entity is only\n+\trelevant to packages.\n+\n+2009-04-07  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_attr.adb: Minor reformatting\n+\n+\t* sem_ch6.adb: Minor reformatting\n+\n 2009-04-07  Tristan Gingold  <gingold@adacore.com>\n \n \t* socket.c: Add more protections against S_resolvLib_ macros."}, {"sha": "533c8b4b2fa2ad3778855b33c559ecf03123a49e", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dbd1460a4fb14cf71da3294b4ccc86432e9ae15/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dbd1460a4fb14cf71da3294b4ccc86432e9ae15/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=8dbd1460a4fb14cf71da3294b4ccc86432e9ae15", "patch": "@@ -5517,6 +5517,7 @@ package body Sem_Attr is\n          --  an optimization, but it falls out essentially free, so why not.\n          --  Again we compute the variable Static for easy reference later\n          --  (note that no array attributes are static in Ada 83).\n+\n          --  We also need to set Static properly for subsequent legality checks\n          --  which might otherwise accept non-static constants in contexts\n          --  where they are not legal."}, {"sha": "e8ffbaaff68867081bac98e3a0e06315d05c400a", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 37, "deletions": 36, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dbd1460a4fb14cf71da3294b4ccc86432e9ae15/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dbd1460a4fb14cf71da3294b4ccc86432e9ae15/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=8dbd1460a4fb14cf71da3294b4ccc86432e9ae15", "patch": "@@ -3093,10 +3093,12 @@ package body Sem_Ch6 is\n    --  Start of processing for Build_Body_To_Inline\n \n    begin\n+      --  Return immediately if done already\n+\n       if Nkind (Decl) = N_Subprogram_Declaration\n         and then Present (Body_To_Inline (Decl))\n       then\n-         return;    --  Done already\n+         return;\n \n       --  Functions that return unconstrained composite types require\n       --  secondary stack handling, and cannot currently be inlined, unless\n@@ -5517,6 +5519,7 @@ package body Sem_Ch6 is\n                  and then Post_Error\n                then\n                   Error_Msg_Sloc := Sloc (E);\n+\n                   if Is_Imported (E) then\n                      Error_Msg_NE\n                       (\"body not allowed for imported subprogram & declared#\",\n@@ -5646,7 +5649,6 @@ package body Sem_Ch6 is\n             Act := First (Actuals);\n \n             if Nkind (Op_Node) in N_Binary_Op then\n-\n                if not FCE (Left_Opnd (Op_Node), Act) then\n                   return False;\n                end if;\n@@ -5771,7 +5773,6 @@ package body Sem_Ch6 is\n \n                         Elt1 := First (Constraints (Constraint (Indic1)));\n                         Elt2 := First (Constraints (Constraint (Indic2)));\n-\n                         while Present (Elt1) and then Present (Elt2) loop\n                            if not FCE (Elt1, Elt2) then\n                               return False;\n@@ -6233,13 +6234,13 @@ package body Sem_Ch6 is\n             return False;\n          end if;\n \n-         --  If the generic type is a private type, then the original\n-         --  operation was not overriding in the generic, because there was\n-         --  no primitive operation to override.\n+         --  If the generic type is a private type, then the original operation\n+         --  was not overriding in the generic, because there was no primitive\n+         --  operation to override.\n \n          if Nkind (Parent (G_Typ)) = N_Formal_Type_Declaration\n            and then Nkind (Formal_Type_Definition (Parent (G_Typ))) =\n-             N_Formal_Private_Type_Definition\n+                      N_Formal_Private_Type_Definition\n          then\n             return True;\n \n@@ -6495,17 +6496,17 @@ package body Sem_Ch6 is\n          B_Typ  : Entity_Id;\n \n          function Visible_Part_Type (T : Entity_Id) return Boolean;\n-         --  Returns true if T is declared in the visible part of\n-         --  the current package scope; otherwise returns false.\n-         --  Assumes that T is declared in a package.\n+         --  Returns true if T is declared in the visible part of the current\n+         --  package scope; otherwise returns false. Assumes that T is declared\n+         --  in a package.\n \n          procedure Check_Private_Overriding (T : Entity_Id);\n          --  Checks that if a primitive abstract subprogram of a visible\n-         --  abstract type is declared in a private part, then it must\n-         --  override an abstract subprogram declared in the visible part.\n-         --  Also checks that if a primitive function with a controlling\n-         --  result is declared in a private part, then it must override\n-         --  a function declared in the visible part.\n+         --  abstract type is declared in a private part, then it must override\n+         --  an abstract subprogram declared in the visible part. Also checks\n+         --  that if a primitive function with a controlling result is declared\n+         --  in a private part, then it must override a function declared in\n+         --  the visible part.\n \n          ------------------------------\n          -- Check_Private_Overriding --\n@@ -6521,7 +6522,7 @@ package body Sem_Ch6 is\n                if Is_Abstract_Type (T)\n                  and then Is_Abstract_Subprogram (S)\n                  and then (not Is_Overriding\n-                           or else not Is_Abstract_Subprogram (E))\n+                            or else not Is_Abstract_Subprogram (E))\n                then\n                   Error_Msg_N (\"abstract subprograms must be visible \"\n                                    & \"(RM 3.9.3(10))!\", S);\n@@ -6550,8 +6551,8 @@ package body Sem_Ch6 is\n             N : Node_Id;\n \n          begin\n-            --  If the entity is a private type, then it must be\n-            --  declared in a visible part.\n+            --  If the entity is a private type, then it must be declared in a\n+            --  visible part.\n \n             if Ekind (T) in Private_Kind then\n                return True;\n@@ -7027,10 +7028,11 @@ package body Sem_Ch6 is\n                 (Is_List_Member (Decl)\n                    and then List_Containing (Decl) = Priv_Decls)\n               or else (Nkind (Parent (Decl)) = N_Package_Specification\n-                         and then not Is_Compilation_Unit (\n-                           Defining_Entity (Parent (Decl)))\n+                         and then not\n+                           Is_Compilation_Unit\n+                             (Defining_Entity (Parent (Decl)))\n                          and then List_Containing (Parent (Parent (Decl)))\n-                           = Priv_Decls);\n+                                    = Priv_Decls);\n          else\n             return False;\n          end if;\n@@ -7197,7 +7199,6 @@ package body Sem_Ch6 is\n                                  and then Is_Overriding_Alias (E, S)))\n                  and then Ekind (E) /= E_Enumeration_Literal\n                then\n-\n                   --  When an derived operation is overloaded it may be due to\n                   --  the fact that the full view of a private extension\n                   --  re-inherits. It has to be dealt with.\n@@ -7240,7 +7241,7 @@ package body Sem_Ch6 is\n                  and then (not In_Instance\n                             or else No (Parent (E))\n                             or else Nkind (Unit_Declaration_Node (E)) /=\n-                               N_Subprogram_Renaming_Declaration)\n+                                      N_Subprogram_Renaming_Declaration)\n                then\n                   --  A subprogram child unit is not allowed to override\n                   --  an inherited subprogram (10.1.1(20)).\n@@ -7254,6 +7255,7 @@ package body Sem_Ch6 is\n \n                   if Is_Non_Overriding_Operation (E, S) then\n                      Enter_Overloaded_Entity (S);\n+\n                      if No (Derived_Type)\n                        or else Is_Tagged_Type (Derived_Type)\n                      then\n@@ -7276,7 +7278,6 @@ package body Sem_Ch6 is\n \n                   begin\n                      Prev := First_Entity (Current_Scope);\n-\n                      while Present (Prev)\n                        and then Next_Entity (Prev) /= E\n                      loop\n@@ -7312,17 +7313,17 @@ package body Sem_Ch6 is\n                      then\n                         --  For nondispatching derived operations that are\n                         --  overridden by a subprogram declared in the private\n-                        --  part of a package, we retain the derived\n-                        --  subprogram but mark it as not immediately visible.\n-                        --  If the derived operation was declared in the\n-                        --  visible part then this ensures that it will still\n-                        --  be visible outside the package with the proper\n-                        --  signature (calls from outside must also be\n-                        --  directed to this version rather than the\n-                        --  overriding one, unlike the dispatching case).\n-                        --  Calls from inside the package will still resolve\n-                        --  to the overriding subprogram since the derived one\n-                        --  is marked as not visible within the package.\n+                        --  part of a package, we retain the derived subprogram\n+                        --  but mark it as not immediately visible. If the\n+                        --  derived operation was declared in the visible part\n+                        --  then this ensures that it will still be visible\n+                        --  outside the package with the proper signature\n+                        --  (calls from outside must also be directed to this\n+                        --  version rather than the overriding one, unlike the\n+                        --  dispatching case). Calls from inside the package\n+                        --  will still resolve to the overriding subprogram\n+                        --  since the derived one is marked as not visible\n+                        --  within the package.\n \n                         --  If the private operation is dispatching, we achieve\n                         --  the overriding by keeping the implicit operation\n@@ -7335,7 +7336,6 @@ package body Sem_Ch6 is\n                         --  remove the implicit operation altogether.\n \n                         if Is_Private_Declaration (S) then\n-\n                            if not Is_Dispatching_Operation (E) then\n                               Set_Is_Immediately_Visible (E, False);\n                            else\n@@ -7459,6 +7459,7 @@ package body Sem_Ch6 is\n                   declare\n                      F1 : Entity_Id;\n                      F2 : Entity_Id;\n+\n                   begin\n                      F1 := First_Formal (S);\n                      F2 := First_Formal (E);"}, {"sha": "0ff2df470639cff4e58ab42c0c7ab43ed300e07d", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dbd1460a4fb14cf71da3294b4ccc86432e9ae15/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dbd1460a4fb14cf71da3294b4ccc86432e9ae15/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=8dbd1460a4fb14cf71da3294b4ccc86432e9ae15", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -6613,7 +6613,11 @@ package body Sem_Ch8 is\n \n                Next_Entity (E);\n \n-               if not Full_Vis then\n+               if not Full_Vis\n+                 and then Is_Package_Or_Generic_Package (S)\n+               then\n+                  --  We are in the visible part of the package scope\n+\n                   exit when E = First_Private_Entity (S);\n                end if;\n             end loop;"}]}