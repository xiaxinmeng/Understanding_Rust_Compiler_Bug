{"sha": "2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRmOWQzYzUyZTY3NThmNjY0MGU3YzBhZTBiNzUwMmM3Y2MxZDQzMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-21T11:03:04Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-21T11:15:53Z"}, "message": "i386: Add comparisons for 4-byte vectors [PR100637]\n\n2021-05-21  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/100637\n\t* config/i386/i386-expand.c (ix86_expand_sse_movcc):\n\tHandle V4QI and V2HI modes.\n\t(ix86_expand_sse_movcc): Ditto.\n\t* config/i386/mmx.md (*<sat_plusminus:insn><VI_32:mode>3):\n\tNew instruction pattern.\n\t(*eq<VI_32:mode>3): Ditto.\n\t(*gt<VI_32:mode>3): Ditto.\n\t(*xop_pcmov_<VI_32:mode>): Ditto.\n\t(mmx_pblendvb32): Ditto.\n\t(mmx_pblendvb64): Rename from mmx_pblendvb.\n\t(vec_cmp<VI_32:mode><VI_32:mode>): New expander.\n\t(vec_cmpu<VI_32:mode><VI_32:mode>): Ditto.\n\t(vcond<VI_32:mode><VI_32:mode>): Ditto.\n\t(vcondu<VI_32:mode><VI_32:mode>): Ditto.\n\t(vcond_mask_<VI_32:mode><VI_32:mode>): Ditto.\n\ngcc/testsuite/\n\n\tPR target/100637\n\t* g++.target/i386/pr100637-1b.C: New test.\n\t* g++.target/i386/pr100637-1w.C: Ditto.\n\t* gcc.target/i386/pr100637-2b.c: Ditto.\n\t* gcc.target/i386/pr100637-2w.c: Ditto.", "tree": {"sha": "01228cd1dc403498f0af8ba0a2dba3ac1ae2f7fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01228cd1dc403498f0af8ba0a2dba3ac1ae2f7fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fdacaf4b00619ad139ecf101cbb0136dcdd8c3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fdacaf4b00619ad139ecf101cbb0136dcdd8c3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fdacaf4b00619ad139ecf101cbb0136dcdd8c3a"}], "stats": {"total": 246, "additions": 244, "deletions": 2}, "files": [{"sha": "931b3362144907656c5da5e94ea3374138c5cb0f", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430", "patch": "@@ -3721,14 +3721,28 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n \t{\n \t  op_true = force_reg (mode, op_true);\n \n-\t  gen = gen_mmx_pblendvb;\n+\t  gen = gen_mmx_pblendvb64;\n \t  if (mode != V8QImode)\n \t    d = gen_reg_rtx (V8QImode);\n \t  op_false = gen_lowpart (V8QImode, op_false);\n \t  op_true = gen_lowpart (V8QImode, op_true);\n \t  cmp = gen_lowpart (V8QImode, cmp);\n \t}\n       break;\n+    case E_V4QImode:\n+    case E_V2HImode:\n+      if (TARGET_SSE4_1)\n+\t{\n+\t  op_true = force_reg (mode, op_true);\n+\n+\t  gen = gen_mmx_pblendvb32;\n+\t  if (mode != V4QImode)\n+\t    d = gen_reg_rtx (V4QImode);\n+\t  op_false = gen_lowpart (V4QImode, op_false);\n+\t  op_true = gen_lowpart (V4QImode, op_true);\n+\t  cmp = gen_lowpart (V4QImode, cmp);\n+\t}\n+      break;\n     case E_V16QImode:\n     case E_V8HImode:\n     case E_V4SImode:\n@@ -4241,6 +4255,12 @@ ix86_expand_int_sse_cmp (rtx dest, enum rtx_code code, rtx cop0, rtx cop1,\n \t      else if (code == GT && TARGET_SSE4_1)\n \t\tgen = gen_sminv8qi3;\n \t      break;\n+\t    case E_V4QImode:\n+\t      if (code == GTU && TARGET_SSE2)\n+\t\tgen = gen_uminv4qi3;\n+\t      else if (code == GT && TARGET_SSE4_1)\n+\t\tgen = gen_sminv4qi3;\n+\t      break;\n \t    case E_V8HImode:\n \t      if (code == GTU && TARGET_SSE4_1)\n \t\tgen = gen_uminv8hi3;\n@@ -4253,6 +4273,12 @@ ix86_expand_int_sse_cmp (rtx dest, enum rtx_code code, rtx cop0, rtx cop1,\n \t      else if (code == GT && TARGET_SSE2)\n \t\tgen = gen_sminv4hi3;\n \t      break;\n+\t    case E_V2HImode:\n+\t      if (code == GTU && TARGET_SSE4_1)\n+\t\tgen = gen_uminv2hi3;\n+\t      else if (code == GT && TARGET_SSE2)\n+\t\tgen = gen_sminv2hi3;\n+\t      break;\n \t    case E_V4SImode:\n \t      if (TARGET_SSE4_1)\n \t\tgen = (code == GTU) ? gen_uminv4si3 : gen_sminv4si3;\n@@ -4327,8 +4353,10 @@ ix86_expand_int_sse_cmp (rtx dest, enum rtx_code code, rtx cop0, rtx cop1,\n \t    case E_V16HImode:\n \t    case E_V16QImode:\n \t    case E_V8QImode:\n+\t    case E_V4QImode:\n \t    case E_V8HImode:\n \t    case E_V4HImode:\n+\t    case E_V2HImode:\n \t      /* Perform a parallel unsigned saturating subtraction.  */\n \t      x = gen_reg_rtx (mode);\n \t      emit_insn (gen_rtx_SET"}, {"sha": "4c42e6d93dc00b68751df05a05f043c5536eee99", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 139, "deletions": 1, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430", "patch": "@@ -1403,6 +1403,20 @@\n    (set_attr \"type\" \"mmxadd,sseadd,sseadd\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n+(define_insn \"*<insn><mode>3\"\n+  [(set (match_operand:VI_32 0 \"register_operand\" \"=x,Yw\")\n+        (sat_plusminus:VI_32\n+\t  (match_operand:VI_32 1 \"register_operand\" \"<comm>0,Yw\")\n+\t  (match_operand:VI_32 2 \"register_operand\" \"x,Yw\")))]\n+  \"TARGET_SSE2\n+   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"@\n+   p<plusminus_mnemonic><mmxvecsize>\\t{%2, %0|%0, %2}\n+   vp<plusminus_mnemonic><mmxvecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseadd\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_expand \"mmx_mulv4hi3\"\n   [(set (match_operand:V4HI 0 \"register_operand\")\n         (mult:V4HI (match_operand:V4HI 1 \"register_mmxmem_operand\")\n@@ -2032,6 +2046,20 @@\n    (set_attr \"type\" \"mmxcmp,ssecmp,ssecmp\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n+(define_insn \"*eq<mode>3\"\n+  [(set (match_operand:VI_32 0 \"register_operand\" \"=x,x\")\n+        (eq:VI_32\n+\t  (match_operand:VI_32 1 \"register_operand\" \"%0,x\")\n+\t  (match_operand:VI_32 2 \"register_operand\" \"x,x\")))]\n+  \"TARGET_SSE2\n+   && ix86_binary_operator_ok (EQ, <MODE>mode, operands)\"\n+  \"@\n+   pcmpeq<mmxvecsize>\\t{%2, %0|%0, %2}\n+   vpcmpeq<mmxvecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"ssecmp\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn \"mmx_gt<mode>3\"\n   [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y,x,x\")\n         (gt:MMXMODEI\n@@ -2047,6 +2075,19 @@\n    (set_attr \"type\" \"mmxcmp,ssecmp,ssecmp\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n+(define_insn \"*gt<mode>3\"\n+  [(set (match_operand:VI_32 0 \"register_operand\" \"=x,x\")\n+        (gt:VI_32\n+\t  (match_operand:VI_32 1 \"register_operand\" \"0,x\")\n+\t  (match_operand:VI_32 2 \"register_operand\" \"x,x\")))]\n+  \"TARGET_SSE2\"\n+  \"@\n+   pcmpgt<mmxvecsize>\\t{%2, %0|%0, %2}\n+   vpcmpgt<mmxvecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"ssecmp\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_expand \"vec_cmp<mode><mode>\"\n   [(set (match_operand:MMXMODEI 0 \"register_operand\")\n \t(match_operator:MMXMODEI 1 \"\"\n@@ -2059,6 +2100,18 @@\n   DONE;\n })\n \n+(define_expand \"vec_cmp<mode><mode>\"\n+  [(set (match_operand:VI_32 0 \"register_operand\")\n+\t(match_operator:VI_32 1 \"\"\n+\t  [(match_operand:VI_32 2 \"register_operand\")\n+\t   (match_operand:VI_32 3 \"register_operand\")]))]\n+  \"TARGET_SSE2\"\n+{\n+  bool ok = ix86_expand_int_vec_cmp (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n (define_expand \"vec_cmpu<mode><mode>\"\n   [(set (match_operand:MMXMODEI 0 \"register_operand\")\n \t(match_operator:MMXMODEI 1 \"\"\n@@ -2071,6 +2124,18 @@\n   DONE;\n })\n \n+(define_expand \"vec_cmpu<mode><mode>\"\n+  [(set (match_operand:VI_32 0 \"register_operand\")\n+\t(match_operator:VI_32 1 \"\"\n+\t  [(match_operand:VI_32 2 \"register_operand\")\n+\t   (match_operand:VI_32 3 \"register_operand\")]))]\n+  \"TARGET_SSE2\"\n+{\n+  bool ok = ix86_expand_int_vec_cmp (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n (define_expand \"vcond<MMXMODE124:mode><MMXMODEI:mode>\"\n   [(set (match_operand:MMXMODE124 0 \"register_operand\")\n \t(if_then_else:MMXMODE124\n@@ -2088,6 +2153,21 @@\n   DONE;\n })\n \n+(define_expand \"vcond<mode><mode>\"\n+  [(set (match_operand:VI_32 0 \"register_operand\")\n+\t(if_then_else:VI_32\n+\t  (match_operator 3 \"\"\n+\t    [(match_operand:VI_32 4 \"register_operand\")\n+\t     (match_operand:VI_32 5 \"register_operand\")])\n+\t  (match_operand:VI_32 1)\n+\t  (match_operand:VI_32 2)))]\n+  \"TARGET_SSE2\"\n+{\n+  bool ok = ix86_expand_int_vcond (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n (define_expand \"vcondu<MMXMODE124:mode><MMXMODEI:mode>\"\n   [(set (match_operand:MMXMODE124 0 \"register_operand\")\n \t(if_then_else:MMXMODE124\n@@ -2105,6 +2185,21 @@\n   DONE;\n })\n \n+(define_expand \"vcondu<mode><mode>\"\n+  [(set (match_operand:VI_32 0 \"register_operand\")\n+\t(if_then_else:VI_32\n+\t  (match_operator 3 \"\"\n+\t    [(match_operand:VI_32 4 \"register_operand\")\n+\t     (match_operand:VI_32 5 \"register_operand\")])\n+\t  (match_operand:VI_32 1)\n+\t  (match_operand:VI_32 2)))]\n+  \"TARGET_SSE2\"\n+{\n+  bool ok = ix86_expand_int_vcond (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n (define_expand \"vcond_mask_<mode><mmxintvecmodelower>\"\n   [(set (match_operand:MMXMODE124 0 \"register_operand\")\n \t(vec_merge:MMXMODE124\n@@ -2118,7 +2213,20 @@\n   DONE;\n })\n \n-(define_insn \"mmx_pblendvb\"\n+(define_expand \"vcond_mask_<mode><mode>\"\n+  [(set (match_operand:VI_32 0 \"register_operand\")\n+\t(vec_merge:VI_32\n+\t  (match_operand:VI_32 1 \"register_operand\")\n+\t  (match_operand:VI_32 2 \"register_operand\")\n+\t  (match_operand:VI_32 3 \"register_operand\")))]\n+  \"TARGET_SSE2\"\n+{\n+  ix86_expand_sse_movcc (operands[0], operands[3],\n+\t\t\t operands[1], operands[2]);\n+  DONE;\n+})\n+\n+(define_insn \"mmx_pblendvb64\"\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=Yr,*x,x\")\n \t(unspec:V8QI\n \t  [(match_operand:V8QI 1 \"register_operand\" \"0,0,x\")\n@@ -2138,6 +2246,26 @@\n    (set_attr \"btver2_decode\" \"vector\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"mmx_pblendvb32\"\n+  [(set (match_operand:V4QI 0 \"register_operand\" \"=Yr,*x,x\")\n+\t(unspec:V4QI\n+\t  [(match_operand:V4QI 1 \"register_operand\" \"0,0,x\")\n+\t   (match_operand:V4QI 2 \"register_operand\" \"Yr,*x,x\")\n+\t   (match_operand:V4QI 3 \"register_operand\" \"Yz,Yz,x\")]\n+\t  UNSPEC_BLENDV))]\n+  \"TARGET_SSE4_1\"\n+  \"@\n+   pblendvb\\t{%3, %2, %0|%0, %2, %3}\n+   pblendvb\\t{%3, %2, %0|%0, %2, %3}\n+   vpblendvb\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"*,*,1\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"btver2_decode\" \"vector\")\n+   (set_attr \"mode\" \"TI\")])\n+\n ;; XOP parallel XMM conditional moves\n (define_insn \"*xop_pcmov_<mode>\"\n   [(set (match_operand:MMXMODE124 0 \"register_operand\" \"=x\")\n@@ -2149,6 +2277,16 @@\n   \"vpcmov\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")])\n \n+(define_insn \"*xop_pcmov_<mode>\"\n+  [(set (match_operand:VI_32 0 \"register_operand\" \"=x\")\n+        (if_then_else:VI_32\n+          (match_operand:VI_32 3 \"register_operand\" \"x\")\n+          (match_operand:VI_32 1 \"register_operand\" \"x\")\n+          (match_operand:VI_32 2 \"register_operand\" \"x\")))]\n+  \"TARGET_XOP\"\n+  \"vpcmov\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  [(set_attr \"type\" \"sse4arg\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel integral logical operations"}, {"sha": "35b5df7c9dde705709fe2100f1c43468d1ae8240", "filename": "gcc/testsuite/g++.target/i386/pr100637-1b.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100637-1b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100637-1b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100637-1b.C?ref=2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/100637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef unsigned char __attribute__((__vector_size__ (4))) __v4qu;\n+typedef char __attribute__((__vector_size__ (4))) __v4qi;\n+\n+__v4qu au, bu;\n+__v4qi as, bs;\n+\n+__v4qu uu (__v4qu a, __v4qu b) { return (a > b) ? au : bu; }\n+__v4qu us (__v4qi a, __v4qi b) { return (a > b) ? au : bu; }\n+__v4qi su (__v4qu a, __v4qu b) { return (a > b) ? as : bs; }\n+__v4qi ss (__v4qi a, __v4qi b) { return (a > b) ? as : bs; }\n+\n+/* { dg-final { scan-assembler-times \"pcmpeqb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"pcmpgtb\" 2 } } */"}, {"sha": "a3ed06fddee1aceddca20afce3456516c187022e", "filename": "gcc/testsuite/g++.target/i386/pr100637-1w.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100637-1w.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100637-1w.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100637-1w.C?ref=2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/100637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef unsigned short __attribute__((__vector_size__ (4))) __v2hu;\n+typedef short __attribute__((__vector_size__ (4))) __v2hi;\n+\n+__v2hu au, bu;\n+__v2hi as, bs;\n+\n+__v2hu uu (__v2hu a, __v2hu b) { return (a > b) ? au : bu; }\n+__v2hu us (__v2hi a, __v2hi b) { return (a > b) ? au : bu; }\n+__v2hi su (__v2hu a, __v2hu b) { return (a > b) ? as : bs; }\n+__v2hi ss (__v2hi a, __v2hi b) { return (a > b) ? as : bs; }\n+\n+/* { dg-final { scan-assembler-times \"pcmpeqw\" 2 } } */\n+/* { dg-final { scan-assembler-times \"pcmpgtw\" 2 } } */"}, {"sha": "04480bb5a9b96da5ba7766bec82d02bf4aa75a77", "filename": "gcc/testsuite/gcc.target/i386/pr100637-2b.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-2b.c?ref=2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/100637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef char vec __attribute__((vector_size(4)));\n+\n+vec lt (vec a, vec b) { return a < b; }\n+vec le (vec a, vec b) { return a <= b; }\n+vec eq (vec a, vec b) { return a == b; }\n+vec ne (vec a, vec b) { return a != b; }\n+vec ge (vec a, vec b) { return a >= b; }\n+vec gt (vec a, vec b) { return a > b; }\n+\n+typedef unsigned char uvec __attribute__((vector_size(4)));\n+\n+vec ltu (uvec a, uvec b) { return a < b; }\n+vec leu (uvec a, uvec b) { return a <= b; }\n+vec geu (uvec a, uvec b) { return a >= b; }\n+vec gtu (uvec a, uvec b) { return a > b; }\n+\n+/* { dg-final { scan-assembler-not \"cmpb\" } } */"}, {"sha": "fbbaac983f6dda249bdc135d6d8f6cba1c60264c", "filename": "gcc/testsuite/gcc.target/i386/pr100637-2w.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-2w.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-2w.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-2w.c?ref=2df9d3c52e6758f6640e7c0ae0b7502c7cc1d430", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/100637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef short vec __attribute__((vector_size(4)));\n+\n+vec lt (vec a, vec b) { return a < b; }\n+vec le (vec a, vec b) { return a <= b; }\n+vec eq (vec a, vec b) { return a == b; }\n+vec ne (vec a, vec b) { return a != b; }\n+vec ge (vec a, vec b) { return a >= b; }\n+vec gt (vec a, vec b) { return a > b; }\n+\n+typedef unsigned short uvec __attribute__((vector_size(4)));\n+\n+vec ltu (uvec a, uvec b) { return a < b; }\n+vec leu (uvec a, uvec b) { return a <= b; }\n+vec geu (uvec a, uvec b) { return a >= b; }\n+vec gtu (uvec a, uvec b) { return a > b; }\n+\n+/* { dg-final { scan-assembler-not \"cmpw\" } } */"}]}