{"sha": "6d69c02ecbd2978ddde0dcb660f7de1d77699396", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ2OWMwMmVjYmQyOTc4ZGRkZTBkY2I2NjBmN2RlMWQ3NzY5OTM5Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-04-27T00:49:54Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-27T00:49:54Z"}, "message": "Use backend interface for struct types.\n\n\t* go-gcc.cc (Gcc_backend::struct_type): Implement.\n\nFrom-SVN: r173004", "tree": {"sha": "8824dc668b4b9e115737b55bfefd3ac0ae288005", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8824dc668b4b9e115737b55bfefd3ac0ae288005"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d69c02ecbd2978ddde0dcb660f7de1d77699396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d69c02ecbd2978ddde0dcb660f7de1d77699396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d69c02ecbd2978ddde0dcb660f7de1d77699396", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d69c02ecbd2978ddde0dcb660f7de1d77699396/comments", "author": null, "committer": null, "parents": [{"sha": "dcd83a8176f986be0660a7613d186056370975fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcd83a8176f986be0660a7613d186056370975fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcd83a8176f986be0660a7613d186056370975fa"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "f9eccd5238f18500e6b702cdc884562ca8746a65", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d69c02ecbd2978ddde0dcb660f7de1d77699396/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d69c02ecbd2978ddde0dcb660f7de1d77699396/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=6d69c02ecbd2978ddde0dcb660f7de1d77699396", "patch": "@@ -1,3 +1,7 @@\n+2011-04-26  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::struct_type): Implement.\n+\n 2011-04-25  Ian Lance Taylor  <iant@google.com>\n \n \t* go-gcc.cc (Gcc_backend::error_type): Implement."}, {"sha": "7751fb81ab43f34110ddf014c7e37d705c87e309", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d69c02ecbd2978ddde0dcb660f7de1d77699396/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d69c02ecbd2978ddde0dcb660f7de1d77699396/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=6d69c02ecbd2978ddde0dcb660f7de1d77699396", "patch": "@@ -158,8 +158,7 @@ class Gcc_backend : public Backend\n \t\tsource_location);\n \n   Btype*\n-  struct_type(const std::vector<Btyped_identifier>&)\n-  { gcc_unreachable(); }\n+  struct_type(const std::vector<Btyped_identifier>&);\n \n   Btype*\n   array_type(const Btype* /* element_type */, const Bexpression* /* length */)\n@@ -449,6 +448,32 @@ Gcc_backend::function_type(const Btyped_identifier& receiver,\n   return this->make_type(build_pointer_type(fntype));\n }\n \n+// Make a struct type.\n+\n+Btype*\n+Gcc_backend::struct_type(const std::vector<Btyped_identifier>& fields)\n+{\n+  tree ret = make_node(RECORD_TYPE);\n+  tree field_trees = NULL_TREE;\n+  tree* pp = &field_trees;\n+  for (std::vector<Btyped_identifier>::const_iterator p = fields.begin();\n+       p != fields.end();\n+       ++p)\n+    {\n+      tree name_tree = get_identifier_from_string(p->name);\n+      tree type_tree = p->btype->get_tree();\n+      if (type_tree == error_mark_node)\n+\treturn this->error_type();\n+      tree field = build_decl(p->location, FIELD_DECL, name_tree, type_tree);\n+      DECL_CONTEXT(field) = ret;\n+      *pp = field;\n+      pp = &DECL_CHAIN(field);\n+    }\n+  TYPE_FIELDS(ret) = field_trees;\n+  layout_type(ret);\n+  return this->make_type(ret);\n+}\n+\n // An expression as a statement.\n \n Bstatement*"}, {"sha": "09f80c07ea10dc406b5587bc734eff10f64db6ea", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d69c02ecbd2978ddde0dcb660f7de1d77699396/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d69c02ecbd2978ddde0dcb660f7de1d77699396/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=6d69c02ecbd2978ddde0dcb660f7de1d77699396", "patch": "@@ -2593,7 +2593,7 @@ Function_type::do_get_tree(Gogo* gogo)\n   Backend::Btyped_identifier breceiver;\n   if (this->receiver_ != NULL)\n     {\n-      breceiver.name = this->receiver_->name();\n+      breceiver.name = Gogo::unpack_hidden_name(this->receiver_->name());\n \n       // We always pass the address of the receiver parameter, in\n       // order to make interface calls work with unknown types.\n@@ -2613,11 +2613,11 @@ Function_type::do_get_tree(Gogo* gogo)\n \t   p != this->parameters_->end();\n \t   ++p, ++i)\n \t{\n-\t  bparameters[i].name = p->name();\n+\t  bparameters[i].name = Gogo::unpack_hidden_name(p->name());\n \t  bparameters[i].btype = tree_to_type(p->type()->get_tree(gogo));\n \t  bparameters[i].location = p->location();\n \t}\n-      gcc_assert(i == bparameters.size());\n+      go_assert(i == bparameters.size());\n     }\n \n   std::vector<Backend::Btyped_identifier> bresults;\n@@ -2629,11 +2629,11 @@ Function_type::do_get_tree(Gogo* gogo)\n \t   p != this->results_->end();\n \t   ++p, ++i)\n \t{\n-\t  bresults[i].name = p->name();\n+\t  bresults[i].name = Gogo::unpack_hidden_name(p->name());\n \t  bresults[i].btype = tree_to_type(p->type()->get_tree(gogo));\n \t  bresults[i].location = p->location();\n \t}\n-      gcc_assert(i == bresults.size());\n+      go_assert(i == bresults.size());\n     }\n \n   Btype* fntype = gogo->backend()->function_type(breceiver, bparameters,\n@@ -3753,8 +3753,20 @@ Struct_type::method_function(const std::string& name, bool* is_ambiguous) const\n tree\n Struct_type::do_get_tree(Gogo* gogo)\n {\n-  tree type = make_node(RECORD_TYPE);\n-  return this->fill_in_tree(gogo, type);\n+  std::vector<Backend::Btyped_identifier> fields;\n+  fields.resize(this->fields_->size());\n+  size_t i = 0;\n+  for (Struct_field_list::const_iterator p = this->fields_->begin();\n+       p != this->fields_->end();\n+       ++p, ++i)\n+    {\n+      fields[i].name = Gogo::unpack_hidden_name(p->field_name());\n+      fields[i].btype = tree_to_type(p->type()->get_tree(gogo));\n+      fields[i].location = p->location();\n+    }\n+  go_assert(i == this->fields_->size());\n+  Btype* btype = gogo->backend()->struct_type(fields);\n+  return type_to_tree(btype);\n }\n \n // Fill in the fields for a struct type."}]}