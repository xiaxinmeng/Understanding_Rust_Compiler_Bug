{"sha": "71b5bc8705c789fa61ad0d7858441da861213356", "node_id": "C_kwDOANBUbNoAKDcxYjViYzg3MDVjNzg5ZmE2MWFkMGQ3ODU4NDQxZGE4NjEyMTMzNTY", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-09T11:50:39Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-10T10:36:26Z"}, "message": "transmute: Fix behavior by always performing the raw copy\n\nThis desugars calls to transmute the following way:\n\n`transmute::<T1, T2>(value)`\n\n->\n\n`*((T2 *) &value)`\n\nThis always ends up being optimized into a simple copy for small types\nand a memcpy for larger types.\n\nCo-authored-by: philberty <philip.herron@embecosm.com>", "tree": {"sha": "f26b5cbc8647efb7b14ea260b251fa4d275a2bcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f26b5cbc8647efb7b14ea260b251fa4d275a2bcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71b5bc8705c789fa61ad0d7858441da861213356", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b5bc8705c789fa61ad0d7858441da861213356", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71b5bc8705c789fa61ad0d7858441da861213356", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b5bc8705c789fa61ad0d7858441da861213356/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "349b0f8ed4564fff88fc28bab0733657f2621780", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/349b0f8ed4564fff88fc28bab0733657f2621780", "html_url": "https://github.com/Rust-GCC/gccrs/commit/349b0f8ed4564fff88fc28bab0733657f2621780"}], "stats": {"total": 59, "additions": 32, "deletions": 27}, "files": [{"sha": "75e8c99158b48f32c0ec5bae83c6bba51bce4d3e", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5bc8705c789fa61ad0d7858441da861213356/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5bc8705c789fa61ad0d7858441da861213356/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=71b5bc8705c789fa61ad0d7858441da861213356", "patch": "@@ -390,33 +390,15 @@ transmute_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype_tyty)\n   ctx->push_block (code_block);\n \n   // BUILTIN transmute FN BODY BEGIN\n-  tree result_type_tree = TREE_TYPE (DECL_RESULT (fndecl));\n-  tree result_expr = error_mark_node;\n-  if (AGGREGATE_TYPE_P (TREE_TYPE (convert_me_expr)))\n-    {\n-      // Return *(orig_type*)&decl.  */\n-      // tree t = build_fold_addr_expr_loc (location.gcc_location (), this->t_);\n-      // t = fold_build1_loc (location.gcc_location (), NOP_EXPR,\n-      //       \t       build_pointer_type (this->orig_type_), t);\n-      // return build_fold_indirect_ref_loc (location.gcc_location (), t);\n-\n-      // result_expr = fold_build1_loc (Location ().gcc_location (),\n-      // CONVERT_EXPR,\n-      //   \t\t\t     result_type_tree, convert_me_expr);\n-\n-      tree t = build_fold_addr_expr_loc (Location ().gcc_location (),\n-\t\t\t\t\t convert_me_expr);\n-      t = fold_build1_loc (Location ().gcc_location (), NOP_EXPR,\n-\t\t\t   build_pointer_type (target_type_expr), t);\n-      result_expr\n-\t= build_fold_indirect_ref_loc (Location ().gcc_location (), t);\n-    }\n-  else\n-    {\n-      result_expr = ctx->get_backend ()->convert_expression (result_type_tree,\n-\t\t\t\t\t\t\t     convert_me_expr,\n-\t\t\t\t\t\t\t     Location ());\n-    }\n+\n+  // Return *((orig_type*)&decl)  */\n+\n+  tree t\n+    = build_fold_addr_expr_loc (Location ().gcc_location (), convert_me_expr);\n+  t = fold_build1_loc (Location ().gcc_location (), NOP_EXPR,\n+\t\t       build_pointer_type (target_type_expr), t);\n+  tree result_expr\n+    = build_fold_indirect_ref_loc (Location ().gcc_location (), t);\n \n   auto return_statement\n     = ctx->get_backend ()->return_statement (fndecl, {result_expr},"}, {"sha": "b9ec38ca618375363d27545b1f08ff7596d369bb", "filename": "gcc/testsuite/rust/execute/torture/transmute1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5bc8705c789fa61ad0d7858441da861213356/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftransmute1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5bc8705c789fa61ad0d7858441da861213356/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftransmute1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftransmute1.rs?ref=71b5bc8705c789fa61ad0d7858441da861213356", "patch": "@@ -0,0 +1,23 @@\n+// { dg-additional-options \"-w\" }\n+\n+extern \"rust-intrinsic\" {\n+    fn transmute<T, U>(value: T) -> U;\n+}\n+\n+struct WrapI {\n+    inner: i32,\n+}\n+\n+struct WrapF {\n+    inner: f32,\n+}\n+\n+fn main() -> i32 {\n+    let f = 15.4f32;\n+    let f_wrap = WrapF { inner: f };\n+\n+    let fst = unsafe { transmute::<f32, i32>(f) };\n+    let snd = unsafe { transmute::<WrapF, WrapI>(f_wrap) };\n+\n+    fst - snd.inner\n+}"}]}