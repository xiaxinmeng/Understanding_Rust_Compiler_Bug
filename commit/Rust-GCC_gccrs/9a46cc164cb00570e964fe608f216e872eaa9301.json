{"sha": "9a46cc164cb00570e964fe608f216e872eaa9301", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE0NmNjMTY0Y2IwMDU3MGU5NjRmZTYwOGYyMTZlODcyZWFhOTMwMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2007-06-04T21:56:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2007-06-04T21:56:10Z"}, "message": "tree-vrp.c (adjust_range_with_scev): When loop is not expected to overflow, reduce overflow infinity to regular infinity.\n\n./:\t* tree-vrp.c (adjust_range_with_scev): When loop is not expected\n\tto overflow, reduce overflow infinity to regular infinity.\n\t(vrp_var_may_overflow): New static function.\n\t(vrp_visit_phi_node): Check vrp_var_may_overflow.\ntestsuite/:\n\t* gcc.dg/Wstrict-overflow-18.c: New test.\n\nFrom-SVN: r125319", "tree": {"sha": "9e1c2c180f4cb7684e89144b82c6168c877994e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e1c2c180f4cb7684e89144b82c6168c877994e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a46cc164cb00570e964fe608f216e872eaa9301", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a46cc164cb00570e964fe608f216e872eaa9301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a46cc164cb00570e964fe608f216e872eaa9301", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a46cc164cb00570e964fe608f216e872eaa9301/comments", "author": null, "committer": null, "parents": [{"sha": "b9d493510e957faecdf598f64b66c6fc8fa2da62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9d493510e957faecdf598f64b66c6fc8fa2da62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9d493510e957faecdf598f64b66c6fc8fa2da62"}], "stats": {"total": 94, "additions": 92, "deletions": 2}, "files": [{"sha": "d9506d85b184dacc54f892f152badf4d894a84fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a46cc164cb00570e964fe608f216e872eaa9301/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a46cc164cb00570e964fe608f216e872eaa9301/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a46cc164cb00570e964fe608f216e872eaa9301", "patch": "@@ -1,3 +1,10 @@\n+2007-06-04  Ian Lance Taylor  <iant@google.com>\n+\n+\t* tree-vrp.c (adjust_range_with_scev): When loop is not expected\n+\tto overflow, reduce overflow infinity to regular infinity.\n+\t(vrp_var_may_overflow): New static function.\n+\t(vrp_visit_phi_node): Check vrp_var_may_overflow.\n+\n 2007-06-04  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* stor-layout.c (layout_type): Remove duplicate code."}, {"sha": "b729e1d7f307c3f428d29b3dfdefde0661378d48", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a46cc164cb00570e964fe608f216e872eaa9301/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a46cc164cb00570e964fe608f216e872eaa9301/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a46cc164cb00570e964fe608f216e872eaa9301", "patch": "@@ -1,3 +1,7 @@\n+2007-06-04  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gcc.dg/Wstrict-overflow-18.c: New test.\n+\n 2007-06-04  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR testsuite/25241"}, {"sha": "e26e7e914e5e2f3d052833ed49751427d345fe0d", "filename": "gcc/testsuite/gcc.dg/Wstrict-overflow-18.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a46cc164cb00570e964fe608f216e872eaa9301/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a46cc164cb00570e964fe608f216e872eaa9301/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-18.c?ref=9a46cc164cb00570e964fe608f216e872eaa9301", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fstrict-overflow -O2 -Wstrict-overflow\" } */\n+\n+/* Don't warn about an overflow when folding i > 0.  The loop analysis\n+   should determine that i does not wrap.  */\n+\n+struct c { unsigned int a; unsigned int b; };\n+extern void bar (struct c *);\n+int\n+foo (struct c *p)\n+{\n+  int i;\n+  int sum = 0;\n+\n+  for (i = 0; i < p->a - p->b; ++i)\n+    {\n+      if (i > 0)\n+\tsum += 2;\n+      bar (p);\n+    }\n+  return sum;\n+}"}, {"sha": "1867377d1b2014ac74f3b87de4dbb2911ed47b9a", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a46cc164cb00570e964fe608f216e872eaa9301/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a46cc164cb00570e964fe608f216e872eaa9301/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=9a46cc164cb00570e964fe608f216e872eaa9301", "patch": "@@ -2695,6 +2695,13 @@ adjust_range_with_scev (value_range_t *vr, struct loop *loop, tree stmt,\n \t      if (compare_values (min, max) == 1)\n \t\treturn;\n \t    }\n+\n+\t  /* According to the loop information, the variable does not\n+\t     overflow.  If we think it does, probably because of an\n+\t     overflow due to arithmetic on a different INF value,\n+\t     reset now.  */\n+\t  if (is_negative_overflow_infinity (min))\n+\t    min = tmin;\n \t}\n       else\n \t{\n@@ -2707,12 +2714,60 @@ adjust_range_with_scev (value_range_t *vr, struct loop *loop, tree stmt,\n \t      if (compare_values (min, max) == 1)\n \t\treturn;\n \t    }\n+\n+\t  if (is_positive_overflow_infinity (max))\n+\t    max = tmax;\n \t}\n \n       set_value_range (vr, VR_RANGE, min, max, vr->equiv);\n     }\n }\n \n+/* Return true if VAR may overflow at STMT.  This checks any available\n+   loop information to see if we can determine that VAR does not\n+   overflow.  */\n+\n+static bool\n+vrp_var_may_overflow (tree var, tree stmt)\n+{\n+  struct loop *l;\n+  tree chrec, init, step;\n+\n+  if (current_loops == NULL)\n+    return true;\n+\n+  l = loop_containing_stmt (stmt);\n+  if (l == NULL)\n+    return true;\n+\n+  chrec = instantiate_parameters (l, analyze_scalar_evolution (l, var));\n+  if (TREE_CODE (chrec) != POLYNOMIAL_CHREC)\n+    return true;\n+\n+  init = initial_condition_in_loop_num (chrec, l->num);\n+  step = evolution_part_in_loop_num (chrec, l->num);\n+\n+  if (step == NULL_TREE\n+      || !is_gimple_min_invariant (step)\n+      || !valid_value_p (init))\n+    return true;\n+\n+  /* If we get here, we know something useful about VAR based on the\n+     loop information.  If it wraps, it may overflow.  */\n+\n+  if (scev_probably_wraps_p (init, step, stmt, get_chrec_loop (chrec),\n+\t\t\t     true))\n+    return true;\n+\n+  if (dump_file && (dump_flags & TDF_DETAILS) != 0)\n+    {\n+      print_generic_expr (dump_file, var, 0);\n+      fprintf (dump_file, \": loop information indicates does not overflow\\n\");\n+    }\n+\n+  return false;\n+}\n+\n \n /* Given two numeric value ranges VR0, VR1 and a comparison code COMP:\n    \n@@ -5391,7 +5446,8 @@ vrp_visit_phi_node (tree phi)\n \t      if (vrp_val_is_max (vr_result.max))\n \t\tgoto varying;\n \n-\t      if (!needs_overflow_infinity (TREE_TYPE (vr_result.min)))\n+\t      if (!needs_overflow_infinity (TREE_TYPE (vr_result.min))\n+\t\t  || !vrp_var_may_overflow (lhs, phi))\n \t\tvr_result.min = TYPE_MIN_VALUE (TREE_TYPE (vr_result.min));\n \t      else if (supports_overflow_infinity (TREE_TYPE (vr_result.min)))\n \t\tvr_result.min =\n@@ -5409,7 +5465,8 @@ vrp_visit_phi_node (tree phi)\n \t      if (vrp_val_is_min (vr_result.min))\n \t\tgoto varying;\n \n-\t      if (!needs_overflow_infinity (TREE_TYPE (vr_result.max)))\n+\t      if (!needs_overflow_infinity (TREE_TYPE (vr_result.max))\n+\t\t  || !vrp_var_may_overflow (lhs, phi))\n \t\tvr_result.max = TYPE_MAX_VALUE (TREE_TYPE (vr_result.max));\n \t      else if (supports_overflow_infinity (TREE_TYPE (vr_result.max)))\n \t\tvr_result.max ="}]}