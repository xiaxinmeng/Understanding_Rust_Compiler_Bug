{"sha": "baef0cffb58be7f5d9aeac6313ea9d8becc017b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFlZjBjZmZiNThiZTdmNWQ5YWVhYzYzMTNlYTlkOGJlY2MwMTdiMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-03-23T13:08:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-03-23T15:00:43Z"}, "message": "libstdc++: Disable \"ALT128\" long double support for Clang\n\nClang does not currently support the __ibm128 type [1] and only supports\nthe __ieee128 type in the unreleased 12.0.0 version [2]. That means it\nis not possible to provide support for -mabi=ieeelongdouble with Clang\nin an ABI compatible way (as we do for GCC by defining new facets and\nother types in the __gnu_cxx_ldbl128 namespace).\n\nBy preventing the definition of _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT when\ncompiling with Clang, all uses of __ibm128 and __ieee128 types will be\ndisabled. This can be revisited in future when Clang supports the types\n(and provides a way to detect that support using the preprocessor).\n\n[1] https://reviews.llvm.org/D93377\n[2] https://reviews.llvm.org/D97846\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/c++config (_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT):\n\tDo not define when compiling with Clang.", "tree": {"sha": "8943b72597aa8babe8b313b9313837ac7240b62e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8943b72597aa8babe8b313b9313837ac7240b62e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/baef0cffb58be7f5d9aeac6313ea9d8becc017b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baef0cffb58be7f5d9aeac6313ea9d8becc017b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baef0cffb58be7f5d9aeac6313ea9d8becc017b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baef0cffb58be7f5d9aeac6313ea9d8becc017b1/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "831f9f768eb1fbf9a31d9a89591188b1487b6376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/831f9f768eb1fbf9a31d9a89591188b1487b6376", "html_url": "https://github.com/Rust-GCC/gccrs/commit/831f9f768eb1fbf9a31d9a89591188b1487b6376"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "72ec91949de5510faeb7f205f00100ba8308f071", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baef0cffb58be7f5d9aeac6313ea9d8becc017b1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baef0cffb58be7f5d9aeac6313ea9d8becc017b1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=baef0cffb58be7f5d9aeac6313ea9d8becc017b1", "patch": "@@ -425,9 +425,12 @@ _GLIBCXX_END_NAMESPACE_VERSION\n // GLIBCXX_ABI Deprecated\n // Define if compatibility should be provided for -mlong-double-64.\n #undef _GLIBCXX_LONG_DOUBLE_COMPAT\n+\n // Define if compatibility should be provided for alternative 128-bit long\n-// double formats.\n+// double formats. Not possible for Clang until __ibm128 is supported.\n+#ifndef __clang__\n #undef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+#endif\n \n // Inline namespaces for long double 128 modes.\n #if defined _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT \\"}]}