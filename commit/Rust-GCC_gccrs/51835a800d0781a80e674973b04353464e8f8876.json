{"sha": "51835a800d0781a80e674973b04353464e8f8876", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE4MzVhODAwZDA3ODFhODBlNjc0OTczYjA0MzUzNDY0ZThmODg3Ng==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-01-13T20:07:22Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-01-13T20:07:22Z"}, "message": "set.h (set): Implement C++11 allocator-aware container requirements.\n\n2014-01-13  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/set.h (set): Implement C++11 allocator-aware\n\tcontainer requirements.\n\t* include/debug/map.h (map): Likewise.\n\t* include/debug/multiset.h (multiset): Likewise.\n\t* include/debug/multimap.h (multimap): Likewise.\n\t* include/debug/set.h (set::operator=(set&&)): Add noexcept and\n\tfix implementation regarding management of safe iterators.\n\t* include/debug/map.h (map::operator=(map&&)): Likewise.\n\t* include/debug/multiset.h (multiset::operator=(multiset&&)): Likewise.\n\t* include/debug/multimap.h (multimap::operator=(multimap&&)):\n\tLikewise.\n\t* include/debug/set.h (set::operator=(std::initializer_list<>)):\n\tRely on the same operator from normal mode.\n\t* include/debug/map.h (map::operator=(std::initializer_list<>)):\n\tLikewise.\n\t* include/debug/multiset.h\n\t(multiset::operator=(std::initializer_list<>)): Likewise.\n\t* include/debug/multimap.h\n\t(multimap::operator=(std::initializer_list<>)): Likewise.\n\t* include/debug/set.h (set::swap(set&)): Add noexcept\n\tspecification, add allocator equality check.\n\t* include/debug/map.h (map::swap(map&)): Likewise.\n\t* include/debug/multiset.h (multiset::swap(multiset&)): Likewise.\n\t* include/debug/multimap.h (multimap::swap(multimap&)): Likewise.\n\nFrom-SVN: r206588", "tree": {"sha": "37bca70b3e0b98a972d9cb2d910d3786b7926b66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37bca70b3e0b98a972d9cb2d910d3786b7926b66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51835a800d0781a80e674973b04353464e8f8876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51835a800d0781a80e674973b04353464e8f8876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51835a800d0781a80e674973b04353464e8f8876", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51835a800d0781a80e674973b04353464e8f8876/comments", "author": null, "committer": null, "parents": [{"sha": "ed100f5d64b3f38cc581391b9b447726edd1b119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed100f5d64b3f38cc581391b9b447726edd1b119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed100f5d64b3f38cc581391b9b447726edd1b119"}], "stats": {"total": 237, "additions": 209, "deletions": 28}, "files": [{"sha": "43c2900d0d733c43a66dd3f4df09391c7edbe3de", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51835a800d0781a80e674973b04353464e8f8876/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51835a800d0781a80e674973b04353464e8f8876/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=51835a800d0781a80e674973b04353464e8f8876", "patch": "@@ -1,3 +1,30 @@\n+2014-01-13  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/set.h (set): Implement C++11 allocator-aware\n+\tcontainer requirements.\n+\t* include/debug/map.h (map): Likewise.\n+\t* include/debug/multiset.h (multiset): Likewise.\n+\t* include/debug/multimap.h (multimap): Likewise.\n+\t* include/debug/set.h (set::operator=(set&&)): Add noexcept and\n+\tfix implementation regarding management of safe iterators.\n+\t* include/debug/map.h (map::operator=(map&&)): Likewise.\n+\t* include/debug/multiset.h (multiset::operator=(multiset&&)): Likewise.\n+\t* include/debug/multimap.h (multimap::operator=(multimap&&)):\n+\tLikewise.\n+\t* include/debug/set.h (set::operator=(std::initializer_list<>)):\n+\tRely on the same operator from normal mode.\n+\t* include/debug/map.h (map::operator=(std::initializer_list<>)):\n+\tLikewise.\n+\t* include/debug/multiset.h\n+\t(multiset::operator=(std::initializer_list<>)): Likewise.\n+\t* include/debug/multimap.h\n+\t(multimap::operator=(std::initializer_list<>)): Likewise.\n+\t* include/debug/set.h (set::swap(set&)): Add noexcept\n+\tspecification, add allocator equality check.\n+\t* include/debug/map.h (map::swap(map&)): Likewise.\n+\t* include/debug/multiset.h (multiset::swap(multiset&)): Likewise.\n+\t* include/debug/multimap.h (multimap::swap(multimap&)): Likewise.\n+\n 2014-01-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/59698"}, {"sha": "2367d57452c7403450d2a9c3624d129322ed02ae", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51835a800d0781a80e674973b04353464e8f8876/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51835a800d0781a80e674973b04353464e8f8876/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=51835a800d0781a80e674973b04353464e8f8876", "patch": "@@ -49,6 +49,11 @@ namespace __debug\n       typedef typename _Base::const_iterator _Base_const_iterator;\n       typedef typename _Base::iterator _Base_iterator;\n       typedef __gnu_debug::_Equal_to<_Base_const_iterator> _Equal;\n+\n+#if __cplusplus >= 201103L\n+      typedef __gnu_cxx::__alloc_traits<typename\n+\t\t\t\t\t_Base::allocator_type> _Alloc_traits;\n+#endif\n     public:\n       // types:\n       typedef _Key                                  key_type;\n@@ -101,35 +106,61 @@ namespace __debug\n \t  const _Compare& __c = _Compare(),\n \t  const allocator_type& __a = allocator_type())\n       : _Base(__l, __c, __a) { }\n+\n+      explicit\n+      map(const allocator_type& __a)\n+      : _Base(__a) { }\n+\n+      map(const map& __m, const allocator_type& __a)\n+      : _Base(__m, __a) { }\n+\n+      map(map&& __m, const allocator_type& __a)\n+      : _Base(std::move(__m._M_base()), __a) { }\n+\n+      map(initializer_list<value_type> __l, const allocator_type& __a)\n+      : _Base(__l, __a) { }\n+\n+      template<typename _InputIterator>\n+        map(_InputIterator __first, _InputIterator __last,\n+\t    const allocator_type& __a)\n+\t  : _Base(__gnu_debug::__base(__gnu_debug::__check_valid_range(__first,\n+\t\t\t\t\t\t\t\t       __last)),\n+\t\t  __gnu_debug::__base(__last), __a)\n+\t{ }\n #endif\n \n       ~map() _GLIBCXX_NOEXCEPT { }\n \n       map&\n       operator=(const map& __x)\n       {\n-\t*static_cast<_Base*>(this) = __x;\n+\t_M_base() = __x;\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n \n #if __cplusplus >= 201103L\n       map&\n       operator=(map&& __x)\n+      noexcept(_Alloc_traits::_S_nothrow_move())\n       {\n-\t// NB: DR 1204.\n-\t// NB: DR 675.\n \t__glibcxx_check_self_move_assign(__x);\n-\tclear();\n-\tswap(__x);\n+\tbool xfer_memory = _Alloc_traits::_S_propagate_on_move_assign()\n+\t    || __x.get_allocator() == this->get_allocator();\n+\t_M_base() = std::move(__x._M_base());\n+\tif (xfer_memory)\n+\t  this->_M_swap(__x);\n+\telse\n+\t  this->_M_invalidate_all();\n+\t__x._M_invalidate_all();\n \treturn *this;\n       }\n \n       map&\n       operator=(initializer_list<value_type> __l)\n       {\n-\tthis->clear();\n-\tthis->insert(__l);\n+\t_M_base() = __l;\n+\tthis->_M_invalidate_all();\n \treturn *this;\n       }\n #endif\n@@ -360,7 +391,14 @@ namespace __debug\n \n       void\n       swap(map& __x)\n+#if __cplusplus >= 201103L\n+      noexcept(_Alloc_traits::_S_nothrow_swap())\n+#endif\n       {\n+#if __cplusplus >= 201103L\n+\tif (!_Alloc_traits::_S_propagate_on_swap())\n+\t  __glibcxx_check_equal_allocs(__x);\n+#endif\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n       }"}, {"sha": "0976573b7e1fdf4a407c1df1d62f7212f40f9a12", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51835a800d0781a80e674973b04353464e8f8876/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51835a800d0781a80e674973b04353464e8f8876/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=51835a800d0781a80e674973b04353464e8f8876", "patch": "@@ -50,6 +50,11 @@ namespace __debug\n       typedef typename _Base::const_iterator _Base_const_iterator;\n       typedef typename _Base::iterator _Base_iterator;\n       typedef __gnu_debug::_Equal_to<_Base_const_iterator> _Equal;\n+\n+#if __cplusplus >= 201103L\n+      typedef __gnu_cxx::__alloc_traits<typename\n+\t\t\t\t\t_Base::allocator_type> _Alloc_traits;\n+#endif\n     public:\n       // types:\n       typedef _Key\t\t\t\t     key_type;\n@@ -102,35 +107,62 @@ namespace __debug\n \t       const _Compare& __c = _Compare(),\n \t       const allocator_type& __a = allocator_type())\n       : _Base(__l, __c, __a) { }\n+\n+      explicit\n+      multimap(const allocator_type& __a)\n+      : _Base(__a) { }\n+\n+      multimap(const multimap& __m, const allocator_type& __a)\n+      : _Base(__m, __a) { }\n+\n+      multimap(multimap&& __m, const allocator_type& __a)\n+      : _Base(std::move(__m._M_base()), __a) { }\n+\n+      multimap(initializer_list<value_type> __l, const allocator_type& __a)\n+      : _Base(__l, __a)\n+      { }\n+\n+      template<typename _InputIterator>\n+        multimap(_InputIterator __first, _InputIterator __last,\n+\t\t const allocator_type& __a)\n+\t: _Base(__gnu_debug::__base(__gnu_debug::__check_valid_range(__first,\n+\t\t\t\t\t\t\t\t     __last)),\n+\t\t__gnu_debug::__base(__last), __a)\n+      { }\n #endif\n \n       ~multimap() _GLIBCXX_NOEXCEPT { }\n \n       multimap&\n       operator=(const multimap& __x)\n       {\n-\t*static_cast<_Base*>(this) = __x;\n+\t_M_base() = __x;\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n \n #if __cplusplus >= 201103L\n       multimap&\n       operator=(multimap&& __x)\n+      noexcept(_Alloc_traits::_S_nothrow_move())\n       {\n-\t// NB: DR 1204.\n-\t// NB: DR 675.\n \t__glibcxx_check_self_move_assign(__x);\n-\tclear();\n-\tswap(__x);\n+\tbool xfer_memory = _Alloc_traits::_S_propagate_on_move_assign()\n+\t    || __x.get_allocator() == this->get_allocator();\n+\t_M_base() = std::move(__x._M_base());\n+\tif (xfer_memory)\n+\t  this->_M_swap(__x);\n+\telse\n+\t  this->_M_invalidate_all();\n+\t__x._M_invalidate_all();\n \treturn *this;\n       }\n \n       multimap&\n       operator=(initializer_list<value_type> __l)\n       {\n-\tthis->clear();\n-\tthis->insert(__l);\n+\t_M_base() = __l;\n+\tthis->_M_invalidate_all();\n \treturn *this;\n       }\n #endif\n@@ -343,7 +375,14 @@ namespace __debug\n \n       void\n       swap(multimap& __x)\n+#if __cplusplus >= 201103L\n+      noexcept(_Alloc_traits::_S_nothrow_swap())\n+#endif\n       {\n+#if __cplusplus >= 201103L\n+\tif (!_Alloc_traits::_S_propagate_on_swap())\n+\t  __glibcxx_check_equal_allocs(__x);\n+#endif\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n       }"}, {"sha": "5a39ef8887f2d427a6705c82b16bf799310a23b8", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51835a800d0781a80e674973b04353464e8f8876/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51835a800d0781a80e674973b04353464e8f8876/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=51835a800d0781a80e674973b04353464e8f8876", "patch": "@@ -49,6 +49,11 @@ namespace __debug\n       typedef typename _Base::const_iterator _Base_const_iterator;\n       typedef typename _Base::iterator _Base_iterator;\n       typedef __gnu_debug::_Equal_to<_Base_const_iterator> _Equal;\n+\n+#if __cplusplus >= 201103L\n+      typedef __gnu_cxx::__alloc_traits<typename\n+\t\t\t\t\t_Base::allocator_type> _Alloc_traits;\n+#endif\n     public:\n       // types:\n       typedef _Key\t\t\t\t     key_type;\n@@ -101,35 +106,62 @@ namespace __debug\n \t       const _Compare& __comp = _Compare(),\n \t       const allocator_type& __a = allocator_type())\n       : _Base(__l, __comp, __a) { }\n+\n+      explicit\n+      multiset(const allocator_type& __a)\n+      : _Base(__a) { }\n+\n+      multiset(const multiset& __m, const allocator_type& __a)\n+      : _Base(__m, __a) { }\n+\n+      multiset(multiset&& __m, const allocator_type& __a)\n+      : _Base(std::move(__m._M_base()), __a) { }\n+\n+      multiset(initializer_list<value_type> __l, const allocator_type& __a)\n+\t: _Base(__l, __a)\n+      { }\n+\n+      template<typename _InputIterator>\n+        multiset(_InputIterator __first, _InputIterator __last,\n+\t\t const allocator_type& __a)\n+\t  : _Base(__gnu_debug::__base(__gnu_debug::__check_valid_range(__first,\n+\t\t\t\t\t\t\t\t       __last)),\n+\t\t  __gnu_debug::__base(__last), __a)\n+        { }\n #endif\n \n       ~multiset() _GLIBCXX_NOEXCEPT { }\n \n       multiset&\n       operator=(const multiset& __x)\n       {\n-\t*static_cast<_Base*>(this) = __x;\n+\t_M_base() = __x;\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n \n #if __cplusplus >= 201103L\n       multiset&\n       operator=(multiset&& __x)\n+      noexcept(_Alloc_traits::_S_nothrow_move())\n       {\n-\t// NB: DR 1204.\n-\t// NB: DR 675.\n \t__glibcxx_check_self_move_assign(__x);\n-\tclear();\n-\tswap(__x);\n+\tbool xfer_memory = _Alloc_traits::_S_propagate_on_move_assign()\n+\t    || __x.get_allocator() == this->get_allocator();\n+\t_M_base() = std::move(__x._M_base());\n+\tif (xfer_memory)\n+\t  this->_M_swap(__x);\n+\telse\n+\t  this->_M_invalidate_all();\n+\t__x._M_invalidate_all();\n \treturn *this;\n       }\n \n       multiset&\n       operator=(initializer_list<value_type> __l)\n       {\n-\tthis->clear();\n-\tthis->insert(__l);\n+\t_M_base() = __l;\n+\tthis->_M_invalidate_all();\n \treturn *this;\n       }\n #endif\n@@ -328,7 +360,14 @@ namespace __debug\n \n       void\n       swap(multiset& __x)\n+#if __cplusplus >= 201103L\n+      noexcept(_Alloc_traits::_S_nothrow_swap())\n+#endif\n       {\n+#if __cplusplus >= 201103L\n+\tif (!_Alloc_traits::_S_propagate_on_swap())\n+\t  __glibcxx_check_equal_allocs(__x);\n+#endif\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n       }"}, {"sha": "8c84f25298a9f3cee7f692d90c5e6cb1ac34a251", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51835a800d0781a80e674973b04353464e8f8876/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51835a800d0781a80e674973b04353464e8f8876/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=51835a800d0781a80e674973b04353464e8f8876", "patch": "@@ -49,6 +49,10 @@ namespace __debug\n       typedef typename _Base::const_iterator _Base_const_iterator;\n       typedef typename _Base::iterator _Base_iterator;\n       typedef __gnu_debug::_Equal_to<_Base_const_iterator> _Equal;\n+#if __cplusplus >= 201103L\n+      typedef __gnu_cxx::__alloc_traits<typename\n+\t\t\t\t\t_Base::allocator_type> _Alloc_traits;\n+#endif\n     public:\n       // types:\n       typedef _Key\t\t\t\t    key_type;\n@@ -101,35 +105,62 @@ namespace __debug\n \t  const _Compare& __comp = _Compare(),\n \t  const allocator_type& __a = allocator_type())\n       : _Base(__l, __comp, __a) { }\n+\n+      explicit\n+      set(const allocator_type& __a)\n+      : _Base(__a) { }\n+\n+      set(const set& __x, const allocator_type& __a)\n+      : _Base(__x, __a) { }\n+\n+      set(set&& __x, const allocator_type& __a)\n+      : _Base(std::move(__x._M_base()), __a) { }\n+\n+      set(initializer_list<value_type> __l, const allocator_type& __a)\n+\t: _Base(__l, __a)\n+      { }\n+\n+      template<typename _InputIterator>\n+        set(_InputIterator __first, _InputIterator __last,\n+\t    const allocator_type& __a)\n+\t: _Base(__gnu_debug::__base(__gnu_debug::__check_valid_range(__first,\n+\t\t\t\t\t\t\t\t     __last)),\n+\t\t__gnu_debug::__base(__last), __a)\n+        { }\n #endif\n \n       ~set() _GLIBCXX_NOEXCEPT { }\n \n       set&\n       operator=(const set& __x)\n       {\n-\t*static_cast<_Base*>(this) = __x;\n+\t_M_base() = __x;\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n \n #if __cplusplus >= 201103L\n       set&\n       operator=(set&& __x)\n+      noexcept(_Alloc_traits::_S_nothrow_move())\n       {\n-\t// NB: DR 1204.\n-\t// NB: DR 675.\n \t__glibcxx_check_self_move_assign(__x);\n-\tclear();\n-\tswap(__x);\n+\tbool xfer_memory = _Alloc_traits::_S_propagate_on_move_assign()\n+\t    || __x.get_allocator() == this->get_allocator();\n+\t_M_base() = std::move(__x._M_base());\n+\tif (xfer_memory)\n+\t  this->_M_swap(__x);\n+\telse\n+\t  this->_M_invalidate_all();\n+\t__x._M_invalidate_all();\n \treturn *this;\n       }\n \n       set&\n       operator=(initializer_list<value_type> __l)\n       {\n-\tthis->clear();\n-\tthis->insert(__l);\n+\t_M_base() = __l;\n+\tthis->_M_invalidate_all();\n \treturn *this;\n       }\n #endif\n@@ -337,7 +368,14 @@ namespace __debug\n \n       void\n       swap(set& __x)\n+#if __cplusplus >= 201103L\n+      noexcept(_Alloc_traits::_S_nothrow_swap())\n+#endif\n       {\n+#if __cplusplus >= 201103L\n+\tif (!_Alloc_traits::_S_propagate_on_swap())\n+\t  __glibcxx_check_equal_allocs(__x);\n+#endif\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n       }"}]}