{"sha": "09cff37bfdcc9407a72262cbdd6fd3350488d934", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDljZmYzN2JmZGNjOTQwN2E3MjI2MmNiZGQ2ZmQzMzUwNDg4ZDkzNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-07-05T13:11:44Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-07-05T13:11:44Z"}, "message": "Replace NO_IMPLICIT_EXTERN_C with SYSTEM_IMPLICIT_EXTERN_C.\n\n\tgcc/\n\tReplace NO_IMPLICIT_EXTERN_C with SYSTEM_IMPLICIT_EXTERN_C.\n\t* doc/cpp.texi: Update comment.\n\t* doc/tm.texi: Rebuilt.\n\t* doc/tm.texi.in (NO_IMPLICIT_EXTERN_C): Replace with ...\n\t(SYSTEM_IMPLICIT_EXTERN_C): ... this, opposite sense.\n\t* doc/extend.texi (Backwards Compatibility): Clarify it is system\n\theaders affected by extern \"C\".\n\t* system.h: Poison NO_IMPLICIT_EXTERN_C.\n\t* config/alpha/alpha.h, config/arm/uclinux-elf.h,\n\tconfig/bfin/elf.h, config/cris/cris.h, config/darwin.h,\n\tconfig/dragonfly.h, config/freebsd.h, config/gnu-user.h,\n\tconfig/i386/cygming.h, config/i386/djgpp.h, config/i386/nto.h,\n\tconfig/ia64/hpux.h, config/lm32/lm32.h, config/lm32/uclinux-elf.h,\n\tconfig/lynx.h, config/mips/elf.h, config/mmix/mmix.h,\n\tconfig/netbsd.h, config/pa/pa-hpux.h, config/powerpcspe/sysv4.h,\n\tconfig/riscv/elf.h, config/rs6000/sysv4.h, config/rtems.h,\n\tconfig/s390/tpf.h, config/sh/newlib.h, config/sol2.h,\n\tconfig/sparc/openbsd64.h, config/sparc/sp-elf.h,\n\tconfig/sparc/sp64-elf.h, config/spu/spu.h,\n\tconfig/stormy16/stormy16.h, config/v850/v850.h,\n\tconfig/visium/visium.h, config/vx-common.h, config/xtensa/elf.h: Don't\n\tdefine NO_IMPLICIT_EXTERN_C.\n\t* config/rs6000/aix.h: Set SYSTEM_IMPLICIT_EXTERN_C.\n\n\tgcc/c-family/\n\t* c-lex.c (fe_file_change): Check SYSTEM_IMPLICIT_EXTERN_C not\n\tNO_IMPLICIT_EXTERN_C.\n\n\tgcc/cp/\n\t* cp/decl.c (decls_match): Check SYSTEM_IMPLICIT_EXTERN_C not\n\tNO_IMPLICIT_EXTERN_C.\n\t* cp/parser.c (cp_parser_parameter_declaration_clause): Likewise.\n\nFrom-SVN: r262437", "tree": {"sha": "8a12aa4815a59efd810f5c77daa77152e9a589c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a12aa4815a59efd810f5c77daa77152e9a589c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09cff37bfdcc9407a72262cbdd6fd3350488d934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09cff37bfdcc9407a72262cbdd6fd3350488d934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09cff37bfdcc9407a72262cbdd6fd3350488d934", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09cff37bfdcc9407a72262cbdd6fd3350488d934/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6fc2658638727f52780fe35c1dfabca402fd9481", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fc2658638727f52780fe35c1dfabca402fd9481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fc2658638727f52780fe35c1dfabca402fd9481"}], "stats": {"total": 193, "additions": 57, "deletions": 136}, "files": [{"sha": "87cfd18bb268445b2ae3d641dcf605c715054363", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -1,3 +1,29 @@\n+2018-07-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\tReplace NO_IMPLICIT_EXTERN_C with SYSTEM_IMPLICIT_EXTERN_C.\n+\t* doc/cpp.texi: Update comment.\n+\t* doc/tm.texi: Rebuilt.\n+\t* doc/tm.texi.in (NO_IMPLICIT_EXTERN_C): Replace with ...\n+\t(SYSTEM_IMPLICIT_EXTERN_C): ... this, opposite sense.\n+\t* doc/extend.texi (Backwards Compatibility): Clarify it is system\n+\theaders affected by extern \"C\".\n+\t* system.h: Poison NO_IMPLICIT_EXTERN_C.\n+\t* config/alpha/alpha.h, config/arm/uclinux-elf.h,\n+\tconfig/bfin/elf.h, config/cris/cris.h, config/darwin.h,\n+\tconfig/dragonfly.h, config/freebsd.h, config/gnu-user.h,\n+\tconfig/i386/cygming.h, config/i386/djgpp.h, config/i386/nto.h,\n+\tconfig/ia64/hpux.h, config/lm32/lm32.h, config/lm32/uclinux-elf.h,\n+\tconfig/lynx.h, config/mips/elf.h, config/mmix/mmix.h,\n+\tconfig/netbsd.h, config/pa/pa-hpux.h, config/powerpcspe/sysv4.h,\n+\tconfig/riscv/elf.h, config/rs6000/sysv4.h, config/rtems.h,\n+\tconfig/s390/tpf.h, config/sh/newlib.h, config/sol2.h,\n+\tconfig/sparc/openbsd64.h, config/sparc/sp-elf.h,\n+\tconfig/sparc/sp64-elf.h, config/spu/spu.h,\n+\tconfig/stormy16/stormy16.h, config/v850/v850.h,\n+\tconfig/visium/visium.h, config/vx-common.h, config/xtensa/elf.h: Don't\n+\tdefine NO_IMPLICIT_EXTERN_C.\n+\t* config/rs6000/aix.h: Set SYSTEM_IMPLICIT_EXTERN_C.\n+\n 2018-07-05  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR target/84711\n@@ -1939,7 +1965,7 @@\n \n \t* tree-cfgcleanup.c (tree_forwarder_block_p): Do not return false at\n \t-O0 if the locus represent UNKNOWN_LOCATION but have different values.\n-        \n+\n 2018-06-19  Aaron Sawdey  <acsawdey@linux.ibm.com>\n \n \t* config/rs6000/rs6000-string.c (select_block_compare_mode): Check"}, {"sha": "24eaf6ad6328ecd11bb42894770ee30e13b77781", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -1,3 +1,8 @@\n+2018-07-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-lex.c (fe_file_change): Check SYSTEM_IMPLICIT_EXTERN_C not\n+\tNO_IMPLICIT_EXTERN_C.\n+\n 2018-06-28  Martin Liska  <mliska@suse.cz>\n \n \t* cppspec.c: Include opt-suggestions.h."}, {"sha": "074c2d2b86e34ae29e6de7abd826971439c50639", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -206,7 +206,7 @@ fe_file_change (const line_map_ordinary *new_map)\n \n \t  input_location = new_map->start_location;\n \t  (*debug_hooks->start_source_file) (line, LINEMAP_FILE (new_map));\n-#ifndef NO_IMPLICIT_EXTERN_C\n+#ifdef SYSTEM_IMPLICIT_EXTERN_C\n \t  if (c_header_level)\n \t    ++c_header_level;\n \t  else if (LINEMAP_SYSP (new_map) == 2)\n@@ -219,7 +219,7 @@ fe_file_change (const line_map_ordinary *new_map)\n     }\n   else if (new_map->reason == LC_LEAVE)\n     {\n-#ifndef NO_IMPLICIT_EXTERN_C\n+#ifdef SYSTEM_IMPLICIT_EXTERN_C\n       if (c_header_level && --c_header_level == 0)\n \t{\n \t  if (LINEMAP_SYSP (new_map) == 2)"}, {"sha": "6802ef386eded2d498f0e4dc8e429bc6a2119b34", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -922,7 +922,4 @@ extern long alpha_auto_offset;\n /* By default, turn on GDB extensions.  */\n #define DEFAULT_GDB_EXTENSIONS 1\n \n-/* The system headers under Alpha systems are generally C++-aware.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n #define TARGET_SUPPORTS_WIDE_INT 1"}, {"sha": "f78f279f0abe80e5a4d350b59ef9e10bb257282a", "filename": "gcc/config/arm/uclinux-elf.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Farm%2Fuclinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Farm%2Fuclinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fuclinux-elf.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -48,9 +48,6 @@\n     }\t\t\t\t\t\t\\\n   while (false)\n \n-/* Do not assume anything about header files.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n /* The GNU C++ standard library requires that these macros be defined.  */\n #undef CPLUSPLUS_CPP_SPEC\n #define CPLUSPLUS_CPP_SPEC \"-D_GNU_SOURCE %(cpp)\""}, {"sha": "ae160507491edd0a46abe5e43116d5dfdac6de19", "filename": "gcc/config/bfin/elf.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fbfin%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fbfin%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Felf.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -70,5 +70,3 @@ asm (TEXT_SECTION_ASM_OP);\n #undef SUBTARGET_DRIVER_SELF_SPECS\n #define SUBTARGET_DRIVER_SELF_SPECS \\\n      \"%{mfdpic:-msim} %{mid-shared-library:-msim}\"\n-\n-#define NO_IMPLICIT_EXTERN_C"}, {"sha": "e15f3f645ce49429910ff13a311c2edb1478cd88", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -1030,8 +1030,6 @@ enum cris_symbol_type\n \n #define FUNCTION_MODE QImode\n \n-#define NO_IMPLICIT_EXTERN_C\n-\n /*\n  * Local variables:\n  * eval: (c-set-style \"gnu\")"}, {"sha": "591188a1d19257e9b54d5463e2c1860edf44c696", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -43,9 +43,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define DARWIN_X86 0\n #define DARWIN_PPC 0\n \n-/* Don't assume anything about the header files.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n /* Suppress g++ attempt to link in the math library automatically. */\n #define MATH_LIBRARY \"\"\n "}, {"sha": "4f53d2224a104dfd10afcbaf6b40c70ba75c25b7", "filename": "gcc/config/dragonfly.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fdragonfly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fdragonfly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdragonfly.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -104,10 +104,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #undef  OBJECT_FORMAT_ELF\n #define OBJECT_FORMAT_ELF\n \n-/* Don't assume anything about the header files.  */\n-#undef  NO_IMPLICIT_EXTERN_C\n-#define NO_IMPLICIT_EXTERN_C\t1\n-\n /* Follow DragonFly's standard headers (<machine/stdint.h>, etc...).  */\n \n #undef  WCHAR_TYPE"}, {"sha": "9463deabf7f622d2b5270b7a1dea47dc684f81da", "filename": "gcc/config/freebsd.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -68,10 +68,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef  OBJECT_FORMAT_ELF\n #define OBJECT_FORMAT_ELF\n \n-/* Don't assume anything about the header files.  */\n-#undef  NO_IMPLICIT_EXTERN_C\n-#define NO_IMPLICIT_EXTERN_C\t1\n-\n /* Follow FreeBSD's standard headers (<sys/_types.h> etc...).  */\n \n #undef  WCHAR_TYPE"}, {"sha": "aff034d55239c7469841321a55c4c494afa51d63", "filename": "gcc/config/gnu-user.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fgnu-user.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fgnu-user.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgnu-user.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -26,9 +26,6 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-/* Don't assume anything about the header files.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n #undef ASM_APP_ON\n #define ASM_APP_ON \"#APP\\n\"\n "}, {"sha": "80a0a37e308e0f42b128f4ea7164511ad3840cc2", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -378,9 +378,6 @@ do {\t\t\t\t\t\t\\\n #endif\n #endif\n \n-/* Don't assume anything about the header files.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n #undef PROFILE_HOOK\n #define PROFILE_HOOK(LABEL)\t\t\t\t\t\t\\\n   if (MAIN_NAME_P (DECL_NAME (current_function_decl)))\t\t\t\\"}, {"sha": "01774cea4d62375c76f5864821cc0289753e1917", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -23,9 +23,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n \n-/* Don't assume anything about the header files.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n #undef BSS_SECTION_ASM_OP\n #define BSS_SECTION_ASM_OP \"\\t.section\\t.bss\"\n "}, {"sha": "fbcc668c079545f4a7bcec09189e37b3a6afd784", "filename": "gcc/config/i386/nto.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fi386%2Fnto.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fi386%2Fnto.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnto.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -98,8 +98,6 @@ crti.o%s \\\n #undef WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE BITS_PER_WORD\n \n-#define NO_IMPLICIT_EXTERN_C 1\n-\n #define TARGET_POSIX_IO\n \n #undef DBX_REGISTER_NUMBER"}, {"sha": "d50c6abf76bf7f9421eb82907cc2192b3205c00b", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -185,9 +185,6 @@ do {\t\t\t\t\t\t\t\t\\\n \n #define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) ((MODE) == TFmode)\n \n-/* HP-UX headers are C++-compatible.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n /* HP-UX uses PROFILE_HOOK instead of FUNCTION_PROFILER but we need a\n    FUNCTION_PROFILER defined because its use is not ifdefed.  When using\n    PROFILE_HOOK, the profile call comes after the prologue.  */"}, {"sha": "2a4a27594199fe6144d30595f0fe96d0a2fab23c", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -516,8 +516,4 @@ do {                                                            \\\n \n #define FUNCTION_MODE SImode\n \n-#ifndef NO_IMPLICIT_EXTERN_C\n-#define NO_IMPLICIT_EXTERN_C\n-#endif\n-\n #define STORE_FLAG_VALUE 1"}, {"sha": "cfaca3724623d8e40587f723fd529cbc70cb3ee3", "filename": "gcc/config/lm32/uclinux-elf.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Flm32%2Fuclinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Flm32%2Fuclinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Fuclinux-elf.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -21,10 +21,6 @@\n /* elfos.h should have already been included.  Now just override\n    any conflicting definitions and add any extras.  */\n \n-/* Do not assume anything about header files.  */\n-#undef NO_IMPLICIT_EXTERN_C\n-#define NO_IMPLICIT_EXTERN_C\n-\n /* The GNU C++ standard library requires that these macros be defined.  */\n #undef CPLUSPLUS_CPP_SPEC\n #define CPLUSPLUS_CPP_SPEC \"-D_GNU_SOURCE %(cpp)\""}, {"sha": "e2f768b9f7eaf6cd4ac26eb45e27ec5afb86eda3", "filename": "gcc/config/lynx.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flynx.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -165,12 +165,6 @@ along with GCC; see the file COPYING3.  If not see\n # define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n #endif\n \n-/* We have C++ support in our system headers.  */\n-\n-#ifndef NO_IMPLICIT_EXTERN_C\n-# define NO_IMPLICIT_EXTERN_C\n-#endif\n-\n #ifndef TARGET_POSIX_IO\n # define TARGET_POSIX_IO\n #endif"}, {"sha": "98d4f806ee9f1848db1669228e55b30fba44d6cb", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -46,5 +46,3 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \"crtend%O%s crtn%O%s\"\n-\n-#define NO_IMPLICIT_EXTERN_C 1"}, {"sha": "7b46afcf7076b6f745f0cf3a8161f1796440084e", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -789,8 +789,6 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n \n #define FUNCTION_MODE QImode\n \n-#define NO_IMPLICIT_EXTERN_C\n-\n /* mmix-knuth-mmixware target has no support of C99 runtime */\n #undef TARGET_LIBC_HAS_FUNCTION\n #define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function"}, {"sha": "dfd7c302176f98a188732d495b68e703f9af92ee", "filename": "gcc/config/netbsd.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -149,10 +149,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_POSIX_IO\n #define TARGET_POSIX_IO\n \n-/* Don't assume anything about the header files.  */\n-#undef  NO_IMPLICIT_EXTERN_C\n-#define NO_IMPLICIT_EXTERN_C    1\n-\n /* Define some types that are the same on all NetBSD platforms,\n    making them agree with <machine/ansi.h>.  */\n "}, {"sha": "496cfb80cc196330dee7f539dbac38c9ef865273", "filename": "gcc/config/pa/pa-hpux.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -102,10 +102,6 @@ along with GCC; see the file COPYING3.  If not see\n   \"%{mlinker-opt:-O} %{!shared:-u main} %{static:-a archive} %{g*:-a archive} %{shared:-b}\"\n #endif\n \n-/* hpux8 and later have C++ compatible include files, so do not\n-   pretend they are `extern \"C\"'.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n /* hpux11 and earlier don't have fputc_unlocked, so we must inhibit the\n    transformation of fputs_unlocked and fprintf_unlocked to fputc_unlocked.  */\n #define DONT_HAVE_FPUTC_UNLOCKED"}, {"sha": "756e9e5649b423840f654a0d1d506f7a182a9716", "filename": "gcc/config/powerpcspe/sysv4.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fpowerpcspe%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fpowerpcspe%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fsysv4.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -23,10 +23,6 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* Header files should be C++ aware in general.  */\n-#undef  NO_IMPLICIT_EXTERN_C\n-#define NO_IMPLICIT_EXTERN_C\n-\n /* Yes!  We are ELF.  */\n #define\tTARGET_OBJECT_FORMAT OBJECT_ELF\n "}, {"sha": "0a4686a693b4ccbad0d1a42cdee5f1420798934c", "filename": "gcc/config/riscv/elf.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Friscv%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Friscv%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Felf.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -32,5 +32,3 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \"crtend%O%s\"\n-\n-#define NO_IMPLICIT_EXTERN_C 1"}, {"sha": "2d585d84d01c813b15979df17bf4e7eaa75f3061", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -23,6 +23,9 @@\n #undef  TARGET_AIX\n #define TARGET_AIX 1\n \n+/* System headers are not C++-aware.  */\n+#define SYSTEM_IMPLICIT_EXTERN_C 1\n+\n /* Linux64.h wants to redefine TARGET_AIX based on -m64, but it can't be used\n    in the #if conditional in options-default.h, so provide another macro.  */\n #undef  TARGET_AIX_OS"}, {"sha": "0c676349cf72e602ff65cd20a955c32a06c47d10", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -23,10 +23,6 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* Header files should be C++ aware in general.  */\n-#undef  NO_IMPLICIT_EXTERN_C\n-#define NO_IMPLICIT_EXTERN_C\n-\n /* Yes!  We are ELF.  */\n #define\tTARGET_OBJECT_FORMAT OBJECT_ELF\n "}, {"sha": "9879d5259cdd27facc97cc9e6667e3c974e351f3", "filename": "gcc/config/rtems.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frtems.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -22,10 +22,6 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* The system headers under RTEMS are C++-aware.  */\n-#undef NO_IMPLICIT_EXTERN_C\n-#define NO_IMPLICIT_EXTERN_C\n-\n /*\n  * Dummy start/end specification to let linker work as\n  * needed by autoconf scripts using this compiler."}, {"sha": "5871a6bd3fb703a8ec1e3ab9357e9613397a5b3b", "filename": "gcc/config/s390/tpf.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fs390%2Ftpf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fs390%2Ftpf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ftpf.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -30,7 +30,6 @@ along with GCC; see the file COPYING3.  If not see\n #define ASM_APP_ON \"#APP\\n\"\n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"#NO_APP\\n\"\n-#define NO_IMPLICIT_EXTERN_C\n #define TARGET_POSIX_IO\n \n #undef  SIZE_TYPE"}, {"sha": "9884856a98855fc686aa3ec88db891b25fc85131", "filename": "gcc/config/sh/newlib.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fsh%2Fnewlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fsh%2Fnewlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fnewlib.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -23,7 +23,3 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef LIB_SPEC\n #define LIB_SPEC \"-lc -lgloss\"\n-\n-#undef  NO_IMPLICIT_EXTERN_C\n-#define NO_IMPLICIT_EXTERN_C 1\n-"}, {"sha": "8b67e78dee06d05ab845be5250ba858a9edbe9c1", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -423,9 +423,6 @@ along with GCC; see the file COPYING3.  If not see\n    produce the same format.  */\n #define NM_FLAGS \"-png\"\n \f\n-/* The system headers under Solaris 2 are C++-aware since 2.0.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n #define STDC_0_IN_SYSTEM_HEADERS 1\n \n /* Support Solaris-specific format checking for cmn_err.  */"}, {"sha": "55880f841fc42af93c86deb0993796b737974a26", "filename": "gcc/config/sparc/openbsd64.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fsparc%2Fopenbsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fsparc%2Fopenbsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fopenbsd64.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -41,9 +41,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-/* Inherited from sp64-elf.  */\n-#undef NO_IMPLICIT_EXTERN_C\n-\n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n -s %{\" FPIE_OR_FPIC_SPEC \":-K PIC} \\"}, {"sha": "0c533322251a49f33c40eefe7e721ea7040cdd6c", "filename": "gcc/config/sparc/sp-elf.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fsparc%2Fsp-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fsparc%2Fsp-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp-elf.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -18,9 +18,6 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* Don't assume anything about the header files.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n /* It's safe to pass -s always, even if -g is not used.  */\n #undef ASM_SPEC\n #define ASM_SPEC \\"}, {"sha": "3af2af0b77a732fb7d4a1f6c8a512c847dfba015", "filename": "gcc/config/sparc/sp64-elf.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -27,9 +27,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef SPARC_DEFAULT_CMODEL\n #define SPARC_DEFAULT_CMODEL CM_EMBMEDANY\n \n-/* Don't assume anything about the header files.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n -s %{\" FPIE_OR_FPIC_SPEC \":-K PIC} \\"}, {"sha": "af7395852ceebd40153696924ab71963ee863060", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -483,8 +483,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define FUNCTION_MODE QImode\n \n-#define NO_IMPLICIT_EXTERN_C 1\n-\n \n /* Address spaces.  */\n #define ADDR_SPACE_EA\t1"}, {"sha": "8adc6bedcae527ca4f3acdfb58a686a15b1be05d", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -476,5 +476,3 @@ enum reg_class\n #define Pmode HImode\n \n #define FUNCTION_MODE HImode\n-\n-#define NO_IMPLICIT_EXTERN_C"}, {"sha": "d3391a68bece82775048484be7ec53fa66590906", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -834,12 +834,6 @@ extern const char * GHS_current_section_names [(int) COUNT_OF_GHS_SECTION_KINDS]\n \n #define TARGET_ASM_INIT_SECTIONS v850_asm_init_sections\n \n-/* Define this so that the cc1plus will not think that system header files\n-   need an implicit 'extern \"C\" { ... }' assumed.  This breaks testing C++\n-   in a build directory where the libstdc++ header files are found via a\n-   -isystem <path-to-build-dir>.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n #define ADJUST_INSN_LENGTH(INSN, LENGTH) \\\n   ((LENGTH) = v850_adjust_insn_length ((INSN), (LENGTH)))\n "}, {"sha": "f1bd00fadb71fe65662a9c6f8dfc3298cc1155a6", "filename": "gcc/config/visium/visium.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fvisium%2Fvisium.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fvisium%2Fvisium.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -1211,14 +1211,6 @@ do\t\t\t\t\t\t\t\t\t\\\n    machines this should be `QImode'. */\n #define FUNCTION_MODE SImode\n \n-/* `NO_IMPLICIT_EXTERN_C'\n-\n-   Define this macro if the system header files support C++ as well as\n-   C.  This macro inhibits the usual method of using system header\n-   files in C++, which is to pretend that the file's contents are\n-   enclosed in `extern \"C\" {...}'. */\n-#define NO_IMPLICIT_EXTERN_C\n-\n /* Dividing the Output into Sections (Texts, Data, ...)\n \n    An object file is divided into sections containing different types"}, {"sha": "d83cbfb7cc929cf808e639b59f9d55daab861b33", "filename": "gcc/config/vx-common.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fvx-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fvx-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvx-common.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -18,10 +18,6 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* VxWorks headers are C++-aware.  */\n-#undef  NO_IMPLICIT_EXTERN_C\n-#define NO_IMPLICIT_EXTERN_C\n-\n /* Most of these will probably be overridden by subsequent headers.  We\n    undefine them here just in case, and define VXWORKS_ versions of each,\n    to be used in port-specific vxworks.h.  */"}, {"sha": "736fd2d4eb55951de9c43bc0c525125635058111", "filename": "gcc/config/xtensa/elf.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fxtensa%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fconfig%2Fxtensa%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Felf.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -20,9 +20,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #define TARGET_SECTION_TYPE_FLAGS xtensa_multibss_section_type_flags\n \n-/* Don't assume anything about the header files.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n #undef ASM_APP_ON\n #define ASM_APP_ON \"#APP\\n\"\n "}, {"sha": "fc14d6a8af82fc37adbbca32f8c75521a60c2280", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -1,3 +1,9 @@\n+2018-07-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp/decl.c (decls_match): Check SYSTEM_IMPLICIT_EXTERN_C not\n+\tNO_IMPLICIT_EXTERN_C.\n+\t* cp/parser.c (cp_parser_parameter_declaration_clause): Likewise.\n+\n 2018-07-04  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR c++/86398"}, {"sha": "6cfd1a005a80cf512e75faa378506f8f572996b9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -967,7 +967,7 @@ decls_match (tree newdecl, tree olddecl, bool record_versions /* = true */)\n \t{\n \t  if (!prototype_p (f2) && DECL_EXTERN_C_P (olddecl)\n \t      && (DECL_BUILT_IN (olddecl)\n-#ifndef NO_IMPLICIT_EXTERN_C\n+#ifdef SYSTEM_IMPLICIT_EXTERN_C\n \t\t  || (DECL_IN_SYSTEM_HEADER (newdecl) && !DECL_CLASS_SCOPE_P (newdecl))\n \t\t  || (DECL_IN_SYSTEM_HEADER (olddecl) && !DECL_CLASS_SCOPE_P (olddecl))\n #endif\n@@ -977,7 +977,7 @@ decls_match (tree newdecl, tree olddecl, bool record_versions /* = true */)\n \t      if (p1 == void_list_node)\n \t\tTREE_TYPE (newdecl) = TREE_TYPE (olddecl);\n \t    }\n-#ifndef NO_IMPLICIT_EXTERN_C\n+#ifdef SYSTEM_IMPLICIT_EXTERN_C\n \t  else if (!prototype_p (f1)\n \t\t   && (DECL_EXTERN_C_P (olddecl)\n \t\t       && DECL_IN_SYSTEM_HEADER (olddecl)"}, {"sha": "366a0d894602db5f74ed89cf2e94938eb88fed57", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -21363,7 +21363,7 @@ cp_parser_parameter_declaration_clause (cp_parser* parser)\n   else if (token->type == CPP_CLOSE_PAREN)\n     /* There are no parameters.  */\n     {\n-#ifndef NO_IMPLICIT_EXTERN_C\n+#ifdef SYSTEM_IMPLICIT_EXTERN_C\n       if (in_system_header_at (input_location)\n \t  && current_class_type == NULL\n \t  && current_lang_name == lang_name_c)"}, {"sha": "3f7a8fc15f83ae54d08e0af64f74f1f45f92a3df", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -3735,7 +3735,7 @@ so certain warnings should be suppressed.\n @item 4\n This indicates that the following text should be treated as being\n wrapped in an implicit @code{extern \"C\"} block.\n-@c maybe cross reference NO_IMPLICIT_EXTERN_C\n+@c maybe cross reference SYSTEM_IMPLICIT_EXTERN_C\n @end table\n \n As an extension, the preprocessor accepts linemarkers in non-assembler"}, {"sha": "c7745c4efb7bc9cca22be57eb8f71e39fa000363", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -23475,7 +23475,7 @@ deprecated.   @xref{Deprecated Features}.\n \n @item Implicit C language\n Old C system header files did not contain an @code{extern \"C\" @{@dots{}@}}\n-scope to set the language.  On such systems, all header files are\n+scope to set the language.  On such systems, all system header files are\n implicitly scoped inside a C language scope.  Also, an empty prototype\n @code{()} is treated as an unspecified number of arguments, rather\n than no arguments, as C++ demands."}, {"sha": "057d650a61f519ab8bbfe5b947becbf3856b273e", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -11149,11 +11149,10 @@ Define this hook to return the name of a header file to be included at the start\n Define this hook to add target-specific C++ implicit extern C functions. If this function returns true for the name of a file-scope function, that function implicitly gets extern \"C\" linkage rather than whatever language linkage the declaration would normally have.  An example of such function is WinMain on Win32 targets.\n @end deftypefn\n \n-@defmac NO_IMPLICIT_EXTERN_C\n-Define this macro if the system header files support C++ as well as C@.\n-This macro inhibits the usual method of using system header files in\n-C++, which is to pretend that the file's contents are enclosed in\n-@samp{extern \"C\" @{@dots{}@}}.\n+@defmac SYSTEM_IMPLICIT_EXTERN_C\n+Define this macro if the system header files do not support C++@.\n+This macro handles system header files by pretending that system\n+header files are enclosed in @samp{extern \"C\" @{@dots{}@}}.\n @end defmac\n \n @findex #pragma"}, {"sha": "7579423668e33fb8fe6e1c1043530b08c009eae7", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -7657,11 +7657,10 @@ files @code{__STDC__} will always expand to 1.\n \n @hook TARGET_CXX_IMPLICIT_EXTERN_C\n \n-@defmac NO_IMPLICIT_EXTERN_C\n-Define this macro if the system header files support C++ as well as C@.\n-This macro inhibits the usual method of using system header files in\n-C++, which is to pretend that the file's contents are enclosed in\n-@samp{extern \"C\" @{@dots{}@}}.\n+@defmac SYSTEM_IMPLICIT_EXTERN_C\n+Define this macro if the system header files do not support C++@.\n+This macro handles system header files by pretending that system\n+header files are enclosed in @samp{extern \"C\" @{@dots{}@}}.\n @end defmac\n \n @findex #pragma"}, {"sha": "8295577618a4009b6cb2a4dfbbed6ce8a78d0684", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cff37bfdcc9407a72262cbdd6fd3350488d934/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=09cff37bfdcc9407a72262cbdd6fd3350488d934", "patch": "@@ -1025,7 +1025,7 @@ extern void fancy_abort (const char *, int, const char *)\n \tLIBGCC2_LONG_DOUBLE_TYPE_SIZE STRUCT_VALUE\t\t\t   \\\n \tEH_FRAME_IN_DATA_SECTION TARGET_FLT_EVAL_METHOD_NON_DEFAULT\t   \\\n \tJCR_SECTION_NAME TARGET_USE_JCR_SECTION SDB_DEBUGGING_INFO\t   \\\n-\tSDB_DEBUG\n+\tSDB_DEBUG NO_IMPLICIT_EXTERN_C\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}