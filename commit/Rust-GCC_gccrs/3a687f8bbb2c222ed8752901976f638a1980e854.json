{"sha": "3a687f8bbb2c222ed8752901976f638a1980e854", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E2ODdmOGJiYjJjMjIyZWQ4NzUyOTAxOTc2ZjYzOGExOTgwZTg1NA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2007-06-23T19:17:04Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-06-23T19:17:04Z"}, "message": "extend.texi: Document that dllimport and dllexport imply default visibility.\n\n2007-06-23  Mark Mitchell  <mark@codesourcery.com>\n\n\t* doc/extend.texi: Document that dllimport and dllexport imply\n\tdefault visibility.\n\t* tree.c (handle_dll_attribute): Set DECL_VISIBILITY on the\n\timported or exported declaration, including type declarations.\n\t* c-common.c (handle_visibility_attribute): Check for conflicts\n\twith dllimport/dllexport.\n\t(c_determine_visibility): Handle dllimport/dllexport as an\n\texplicit visibility atttribute.\n\n2007-06-23  Mark Mitchell  <mark@codesourcery.com>\n\n\t* decl2.c (determine_visibility): Don't look for dllexport here.\n\t(determine_visibility_from_class): Tidy.\n\n2007-06-23  Mark Mitchell  <mark@codesourcery.com>\n\n\t* gcc.dg/visibility-12.c: New test.\n\t* gcc.dg/visibility-13.c: Likewise.\n\t* g++.dg/ext/visibility-9.C: Likewise.\n\t* g++.dg/ext/visibility-10.C: Likewise.\n\nFrom-SVN: r125975", "tree": {"sha": "68bf248eebd2d13665cd9f9a10d25b6810ef5803", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68bf248eebd2d13665cd9f9a10d25b6810ef5803"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a687f8bbb2c222ed8752901976f638a1980e854", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a687f8bbb2c222ed8752901976f638a1980e854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a687f8bbb2c222ed8752901976f638a1980e854", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a687f8bbb2c222ed8752901976f638a1980e854/comments", "author": null, "committer": null, "parents": [{"sha": "e36711f3cd476b24b011f18953aa3ed3e9a70a36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e36711f3cd476b24b011f18953aa3ed3e9a70a36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e36711f3cd476b24b011f18953aa3ed3e9a70a36"}], "stats": {"total": 129, "additions": 86, "deletions": 43}, "files": [{"sha": "8406d5f60620675604ecbb928c3e98dabed44506", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a687f8bbb2c222ed8752901976f638a1980e854/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a687f8bbb2c222ed8752901976f638a1980e854/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a687f8bbb2c222ed8752901976f638a1980e854", "patch": "@@ -1,3 +1,14 @@\n+2007-06-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* doc/extend.texi: Document that dllimport and dllexport imply\n+\tdefault visibility.\n+\t* tree.c (handle_dll_attribute): Set DECL_VISIBILITY on the\n+\timported or exported declaration, including type declarations.\n+\t* c-common.c (handle_visibility_attribute): Check for conflicts\n+\twith dllimport/dllexport.\n+\t(c_determine_visibility): Handle dllimport/dllexport as an\n+\texplicit visibility atttribute.\n+\n 2007-06-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/16876"}, {"sha": "e1c387502040f60ba67bd12b459f8db745aaf9b7", "filename": "gcc/c-common.c", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a687f8bbb2c222ed8752901976f638a1980e854/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a687f8bbb2c222ed8752901976f638a1980e854/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3a687f8bbb2c222ed8752901976f638a1980e854", "patch": "@@ -5419,11 +5419,22 @@ handle_visibility_attribute (tree *node, tree name, tree args,\n     }\n \n   if (DECL_VISIBILITY_SPECIFIED (decl)\n-      && vis != DECL_VISIBILITY (decl)\n-      && lookup_attribute (\"visibility\", (TYPE_P (*node)\n-\t\t\t\t\t  ? TYPE_ATTRIBUTES (*node)\n-\t\t\t\t\t  : DECL_ATTRIBUTES (decl))))\n-    error (\"%qD redeclared with different visibility\", decl);\n+      && vis != DECL_VISIBILITY (decl))\n+    {\n+      tree attributes = (TYPE_P (*node)\n+\t\t\t ? TYPE_ATTRIBUTES (*node)\n+\t\t\t : DECL_ATTRIBUTES (decl));\n+      if (lookup_attribute (\"visibility\", attributes))\n+\terror (\"%qD redeclared with different visibility\", decl);\n+      else if (TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+\t       && lookup_attribute (\"dllimport\", attributes))\n+\terror (\"%qD was declared %qs which implies default visibility\",\n+\t       decl, \"dllimport\");\n+      else if (TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+\t       && lookup_attribute (\"dllexport\", attributes))\n+\terror (\"%qD was declared %qs which implies default visibility\",\n+\t       decl, \"dllexport\");\n+    }\n \n   DECL_VISIBILITY (decl) = vis;\n   DECL_VISIBILITY_SPECIFIED (decl) = 1;\n@@ -5456,18 +5467,12 @@ c_determine_visibility (tree decl)\n      to distinguish the use of an attribute from the use of a \"#pragma\n      GCC visibility push(...)\"; in the latter case we still want other\n      considerations to be able to overrule the #pragma.  */\n-  if (lookup_attribute (\"visibility\", DECL_ATTRIBUTES (decl)))\n+  if (lookup_attribute (\"visibility\", DECL_ATTRIBUTES (decl))\n+      || (TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+\t  && (lookup_attribute (\"dllimport\", DECL_ATTRIBUTES (decl))\n+\t      || lookup_attribute (\"dllexport\", DECL_ATTRIBUTES (decl)))))\n     return true;\n \n-  /* Anything that is exported must have default visibility.  */\n-  if (TARGET_DLLIMPORT_DECL_ATTRIBUTES\n-      && lookup_attribute (\"dllexport\", DECL_ATTRIBUTES (decl)))\n-    {\n-      DECL_VISIBILITY (decl) = VISIBILITY_DEFAULT;\n-      DECL_VISIBILITY_SPECIFIED (decl) = 1;\n-      return true;\n-    }\n-\n   /* Set default visibility to whatever the user supplied with\n      visibility_specified depending on #pragma GCC visibility.  */\n   if (!DECL_VISIBILITY_SPECIFIED (decl))"}, {"sha": "951faf4af494db9af38935bdc2cd047c11b10eab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a687f8bbb2c222ed8752901976f638a1980e854/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a687f8bbb2c222ed8752901976f638a1980e854/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3a687f8bbb2c222ed8752901976f638a1980e854", "patch": "@@ -1,3 +1,8 @@\n+2007-06-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl2.c (determine_visibility): Don't look for dllexport here.\n+\t(determine_visibility_from_class): Tidy.\n+\n 2007-06-18  Simon Baldwin <simonb@google.com>\n \n \tPR c++/31923"}, {"sha": "b745183f1af962b7f587cbaec54899bb14bde5ca", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a687f8bbb2c222ed8752901976f638a1980e854/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a687f8bbb2c222ed8752901976f638a1980e854/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=3a687f8bbb2c222ed8752901976f638a1980e854", "patch": "@@ -1684,17 +1684,6 @@ determine_visibility (tree decl)\n   else\n     use_template = 0;\n \n-  /* Anything that is exported must have default visibility.  */\n-  if (TARGET_DLLIMPORT_DECL_ATTRIBUTES\n-      && lookup_attribute (\"dllexport\",\n-\t\t\t   TREE_CODE (decl) == TYPE_DECL\n-\t\t\t   ? TYPE_ATTRIBUTES (TREE_TYPE (decl))\n-\t\t\t   : DECL_ATTRIBUTES (decl)))\n-    {\n-      DECL_VISIBILITY (decl) = VISIBILITY_DEFAULT;\n-      DECL_VISIBILITY_SPECIFIED (decl) = 1;\n-    }\n-\n   /* If DECL is a member of a class, visibility specifiers on the\n      class can influence the visibility of the DECL.  */\n   if (DECL_CLASS_SCOPE_P (decl))\n@@ -1796,18 +1785,20 @@ determine_visibility (tree decl)\n static void\n determine_visibility_from_class (tree decl, tree class_type)\n {\n+  if (DECL_VISIBILITY_SPECIFIED (decl))\n+    return;\n+\n   if (visibility_options.inlines_hidden\n       /* Don't do this for inline templates; specializations might not be\n \t inline, and we don't want them to inherit the hidden\n \t visibility.  We'll set it here for all inline instantiations.  */\n       && !processing_template_decl\n-      && ! DECL_VISIBILITY_SPECIFIED (decl)\n       && TREE_CODE (decl) == FUNCTION_DECL\n       && DECL_DECLARED_INLINE_P (decl)\n       && (! DECL_LANG_SPECIFIC (decl)\n \t  || ! DECL_EXPLICIT_INSTANTIATION (decl)))\n     DECL_VISIBILITY (decl) = VISIBILITY_HIDDEN;\n-  else if (!DECL_VISIBILITY_SPECIFIED (decl))\n+  else\n     {\n       /* Default to the class visibility.  */\n       DECL_VISIBILITY (decl) = CLASSTYPE_VISIBILITY (class_type);\n@@ -1826,7 +1817,6 @@ determine_visibility_from_class (tree decl, tree class_type)\n \t      && !DECL_CONSTRUCTION_VTABLE_P (decl)))\n       && TREE_PUBLIC (decl)\n       && !DECL_REALLY_EXTERN (decl)\n-      && !DECL_VISIBILITY_SPECIFIED (decl)\n       && !CLASSTYPE_VISIBILITY_SPECIFIED (class_type))\n     targetm.cxx.determine_class_data_visibility (decl);\n }"}, {"sha": "76cc546fac65377d00c0844c4de66100bf2a628d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a687f8bbb2c222ed8752901976f638a1980e854/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a687f8bbb2c222ed8752901976f638a1980e854/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=3a687f8bbb2c222ed8752901976f638a1980e854", "patch": "@@ -1782,10 +1782,8 @@ You can use @code{__declspec(dllexport)} as a synonym for\n compilers.\n \n On systems that support the @code{visibility} attribute, this\n-attribute also implies ``default'' visibility, unless a\n-@code{visibility} attribute is explicitly specified.  You should avoid\n-the use of @code{dllexport} with ``hidden'' or ``internal''\n-visibility; in the future GCC may issue an error for those cases.\n+attribute also implies ``default'' visibility.  It is an error to\n+explicitly specify any other visibility.\n \n Currently, the @code{dllexport} attribute is ignored for inlined\n functions, unless the @option{-fkeep-inline-functions} flag has been\n@@ -1806,14 +1804,18 @@ the @option{--export-all} linker flag.\n On Microsoft Windows and Symbian OS targets, the @code{dllimport}\n attribute causes the compiler to reference a function or variable via\n a global pointer to a pointer that is set up by the DLL exporting the\n-symbol.  The attribute implies @code{extern} storage.  On Microsoft\n-Windows targets, the pointer name is formed by combining @code{_imp__}\n-and the function or variable name.\n+symbol.  The attribute implies @code{extern}.  On Microsoft Windows\n+targets, the pointer name is formed by combining @code{_imp__} and the\n+function or variable name.\n \n You can use @code{__declspec(dllimport)} as a synonym for\n @code{__attribute__ ((dllimport))} for compatibility with other\n compilers.\n \n+On systems that support the @code{visibility} attribute, this\n+attribute also implies ``default'' visibility.  It is an error to\n+explicitly specify any other visibility.\n+\n Currently, the attribute is ignored for inlined functions.  If the\n attribute is applied to a symbol @emph{definition}, an error is reported.\n If a symbol previously declared @code{dllimport} is later defined, the"}, {"sha": "cd8d386e11fcc42c03bfcea7a9bc1294323f974c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a687f8bbb2c222ed8752901976f638a1980e854/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a687f8bbb2c222ed8752901976f638a1980e854/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=3a687f8bbb2c222ed8752901976f638a1980e854", "patch": "@@ -14237,9 +14237,9 @@ fold_relational_const (enum tree_code code, tree type, tree op0, tree op1)\n   return constant_boolean_node (result, type);\n }\n \n-/* Build an expression for the a clean point containing EXPR with type TYPE.\n-   Don't build a cleanup point expression for EXPR which don't have side\n-   effects.  */\n+/* If necessary, return a CLEANUP_POINT_EXPR for EXPR with the\n+   indicated TYPE.  If no CLEANUP_POINT_EXPR is necessary, return EXPR\n+   itself.  */\n \n tree\n fold_build_cleanup_point_expr (tree type, tree expr)"}, {"sha": "5fbc1331cb290f73d548f52f04d58849ec164842", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a687f8bbb2c222ed8752901976f638a1980e854/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a687f8bbb2c222ed8752901976f638a1980e854/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3a687f8bbb2c222ed8752901976f638a1980e854", "patch": "@@ -1,3 +1,10 @@\n+2007-06-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* gcc.dg/visibility-12.c: New test.\n+\t* gcc.dg/visibility-13.c: Likewise.\n+\t* g++.dg/ext/visibility-9.C: Likewise.\n+\t* g++.dg/ext/visibility-10.C: Likewise.\n+\n 2007-06-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/16876"}, {"sha": "f70a3073a21d5e227979ceb5ba2946ec56885017", "filename": "gcc/tree.c", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a687f8bbb2c222ed8752901976f638a1980e854/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a687f8bbb2c222ed8752901976f638a1980e854/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3a687f8bbb2c222ed8752901976f638a1980e854", "patch": "@@ -4001,18 +4001,25 @@ handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n \t  *no_add_attrs = true;\n \t  return tree_cons (name, args, NULL_TREE);\n \t}\n-      if (TREE_CODE (node) != RECORD_TYPE && TREE_CODE (node) != UNION_TYPE)\n+      if (TREE_CODE (node) == RECORD_TYPE\n+\t  || TREE_CODE (node) == UNION_TYPE)\n+\t{\n+\t  node = TYPE_NAME (node);\n+\t  if (!node)\n+\t    return NULL_TREE;\n+\t}\n+      else\n \t{\n \t  warning (OPT_Wattributes, \"%qs attribute ignored\",\n \t\t   IDENTIFIER_POINTER (name));\n \t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n \t}\n-\n-      return NULL_TREE;\n     }\n \n   if (TREE_CODE (node) != FUNCTION_DECL\n-      && TREE_CODE (node) != VAR_DECL)\n+      && TREE_CODE (node) != VAR_DECL\n+      && TREE_CODE (node) != TYPE_DECL)\n     {\n       *no_add_attrs = true;\n       warning (OPT_Wattributes, \"%qs attribute ignored\",\n@@ -4075,6 +4082,22 @@ handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n       *no_add_attrs = true;\n     }\n \n+  /* A dllexport'd entity must have default visibility so that other\n+     program units (shared libraries or the main executable) can see\n+     it.  A dllimport'd entity must have default visibility so that\n+     the linker knows that undefined references within this program\n+     unit can be resolved by the dynamic linker.  */\n+  if (!*no_add_attrs)\n+    {\n+      if (DECL_VISIBILITY_SPECIFIED (node)\n+\t  && DECL_VISIBILITY (node) != VISIBILITY_DEFAULT)\n+\terror (\"%qs implies default visibility, but %qD has already \"\n+\t       \"been declared with a different visibility\", \n+\t       IDENTIFIER_POINTER (name), node);\n+      DECL_VISIBILITY (node) = VISIBILITY_DEFAULT;\n+      DECL_VISIBILITY_SPECIFIED (node) = 1;\n+    }\n+\n   return NULL_TREE;\n }\n "}]}