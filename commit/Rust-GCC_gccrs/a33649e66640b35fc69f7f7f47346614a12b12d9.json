{"sha": "a33649e66640b35fc69f7f7f47346614a12b12d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMzNjQ5ZTY2NjQwYjM1ZmM2OWY3ZjdmNDczNDY2MTRhMTJiMTJkOQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-02-06T17:12:11Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-05-09T02:22:20Z"}, "message": "cris: Enable \"neg\" to set condition codes.\n\nWhile gcc seems to prefer transforming tests on the result of\nreversible operations, into tests on the original, it also can\nwork with the destination, if allocated to the same register as\nit commonly-enough is.  The re-use is easily covered in a\ntest-case.  (N.B.: the value 0x80000000 appears to be considered\ninvalid and unimportant.)  Spotted as a \"microregression\" in\nlibgcc when comparing to the cc0 version.\n\ngcc:\n\t* config/cris/cris.c (cris_select_cc_mode): Return CC_NZmode for\n\tNEG too.  Correct comment.\n\t* config/cris/cris.md (\"<anz>neg<mode>2<setnz>\"): Rename from\n\t\"neg<mode>2\".", "tree": {"sha": "9fae7681a3be4ef5bc66a9aecc6908b22243b848", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fae7681a3be4ef5bc66a9aecc6908b22243b848"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a33649e66640b35fc69f7f7f47346614a12b12d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a33649e66640b35fc69f7f7f47346614a12b12d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a33649e66640b35fc69f7f7f47346614a12b12d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a33649e66640b35fc69f7f7f47346614a12b12d9/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b73bf8a14dd77531d72426beec22c8e4b80a22a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b73bf8a14dd77531d72426beec22c8e4b80a22a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b73bf8a14dd77531d72426beec22c8e4b80a22a7"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "178973f0e734673ca4eb5cbf3bf0caceeef61351", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a33649e66640b35fc69f7f7f47346614a12b12d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a33649e66640b35fc69f7f7f47346614a12b12d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a33649e66640b35fc69f7f7f47346614a12b12d9", "patch": "@@ -167,6 +167,11 @@\n \tHandle output of CC_ZnNmode.\n \t(\"*b<nzcond:code>_reversed<mode>\"): Ditto.\n \n+\t* config/cris/cris.c (cris_select_cc_mode): Return CC_NZmode for\n+\tNEG too.  Correct comment.\n+\t* config/cris/cris.md (\"<anz>neg<mode>2<setnz>\"): Rename from\n+\t\"neg<mode>2\".\n+\n 2020-05-08  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* ira-color.c (update_costs_from_allocno): Remove"}, {"sha": "2bad9393c6ed8863756627b1c67b49152364213e", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a33649e66640b35fc69f7f7f47346614a12b12d9/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a33649e66640b35fc69f7f7f47346614a12b12d9/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=a33649e66640b35fc69f7f7f47346614a12b12d9", "patch": "@@ -1531,9 +1531,9 @@ cris_select_cc_mode (enum rtx_code op, rtx x, rtx y)\n     return CCmode;\n \n   /* If we have a comparison that doesn't have to look at V or C, check\n-     operand x; if it looks like a binary operator, return CC_NZmode,\n-     else CCmode, so we only use CC_NZmode for the cases where we don't\n-     actually have both V and C valid.  */\n+     operand x; if it's a valid operator, return CC_NZmode, else CCmode,\n+     so we only use CC_NZmode for the cases where we don't actually have\n+     both V and C valid.  */\n   if (op == EQ || op ==  NE || op ==  GTU || op ==  LEU\n       || op ==  LT || op ==  GE)\n     {\n@@ -1542,7 +1542,7 @@ cris_select_cc_mode (enum rtx_code op, rtx x, rtx y)\n     /* Mentioning the rtx_code here is required but not sufficient: the\n        insn also needs to be decorated with <setnz> (and the\n        anonymization prefix <anz> for a named pattern).  */\n-      return e == PLUS || e == MINUS || e == MULT || e == NOT\n+      return e == PLUS || e == MINUS || e == MULT || e == NOT || e == NEG\n \t? CC_NZmode : CCmode;\n     }\n "}, {"sha": "081041fa24561af28077503746a53e9293912e5c", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a33649e66640b35fc69f7f7f47346614a12b12d9/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a33649e66640b35fc69f7f7f47346614a12b12d9/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=a33649e66640b35fc69f7f7f47346614a12b12d9", "patch": "@@ -1734,7 +1734,7 @@\n ;; No \"negdi2\" although we could make one up that may be faster than\n ;; the one in libgcc.\n \n-(define_insn \"neg<mode>2\"\n+(define_insn \"<anz>neg<mode>2<setnz>\"\n   [(set (match_operand:BWD 0 \"register_operand\" \"=r\")\n \t(neg:BWD (match_operand:BWD 1 \"register_operand\" \"r\")))\n    (clobber (reg:CC CRIS_CC0_REGNUM))]"}]}