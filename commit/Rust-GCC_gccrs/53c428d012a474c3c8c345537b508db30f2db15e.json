{"sha": "53c428d012a474c3c8c345537b508db30f2db15e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNjNDI4ZDAxMmE0NzRjM2M4YzM0NTUzN2I1MDhkYjMwZjJkYjE1ZQ==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2004-02-27T12:02:55Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-02-27T12:02:55Z"}, "message": "* function.c (assign_parms): Don't count pretend args for alignment.\n\nFrom-SVN: r78563", "tree": {"sha": "03e05129dde7d8c4fbc8882758b56caeb9b7d439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03e05129dde7d8c4fbc8882758b56caeb9b7d439"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53c428d012a474c3c8c345537b508db30f2db15e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c428d012a474c3c8c345537b508db30f2db15e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c428d012a474c3c8c345537b508db30f2db15e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c428d012a474c3c8c345537b508db30f2db15e/comments", "author": null, "committer": null, "parents": [{"sha": "f4bdbead2e8c0d4ec63219c1f94696259556bab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4bdbead2e8c0d4ec63219c1f94696259556bab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4bdbead2e8c0d4ec63219c1f94696259556bab1"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "5a7723e24a068c4a4ff0d4cbd20767dce11ca018", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c428d012a474c3c8c345537b508db30f2db15e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c428d012a474c3c8c345537b508db30f2db15e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53c428d012a474c3c8c345537b508db30f2db15e", "patch": "@@ -1,3 +1,7 @@\n+2004-02-27  Paul Brook  <paul@codesourcery.com>\n+\n+\t* function.c (assign_parms): Don't count pretend args for alignment.\n+\n 2004-02-27  Richard Henderson  <rth@redhat.com>\n \n \t* passes.c: New file."}, {"sha": "84f0e853d7e564e85f748d04c98da61c52fddabe", "filename": "gcc/function.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c428d012a474c3c8c345537b508db30f2db15e/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c428d012a474c3c8c345537b508db30f2db15e/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=53c428d012a474c3c8c345537b508db30f2db15e", "patch": "@@ -4285,6 +4285,7 @@ assign_parms (tree fndecl)\n   /* Total space needed so far for args on the stack,\n      given as a constant and a tree-expression.  */\n   struct args_size stack_args_size;\n+  HOST_WIDE_INT extra_pretend_bytes = 0;\n   tree fntype = TREE_TYPE (fndecl);\n   tree fnargs = DECL_ARGUMENTS (fndecl), orig_fnargs;\n   /* This is used for the arg pointer when referring to stack args.  */\n@@ -4569,15 +4570,19 @@ assign_parms (tree fndecl)\n \t\t bits.  We must preserve this invariant by rounding\n \t\t CURRENT_FUNCTION_PRETEND_ARGS_SIZE up to a stack\n \t\t boundary.  */\n+\n+\t      /* We assume at most one partial arg, and it must be the first\n+\t         argument on the stack.  */\n+\t      if (extra_pretend_bytes || current_function_pretend_args_size)\n+\t\tabort ();\n+\n \t      pretend_bytes = partial * UNITS_PER_WORD;\n \t      current_function_pretend_args_size\n \t\t= CEIL_ROUND (pretend_bytes, STACK_BYTES);\n \n-\t      /* If PRETEND_BYTES != CURRENT_FUNCTION_PRETEND_ARGS_SIZE,\n-\t\t insert the padding before the start of the first pretend\n-\t\t argument.  */\n-\t      stack_args_size.constant\n-\t\t= (current_function_pretend_args_size - pretend_bytes);\n+\t      /* We want to align relative to the actual stack pointer, so\n+\t         don't include this in the stack size until later.  */\n+\t      extra_pretend_bytes = current_function_pretend_args_size;\n \t    }\n \t}\n #endif\n@@ -4586,6 +4591,13 @@ assign_parms (tree fndecl)\n       locate_and_pad_parm (promoted_mode, passed_type, in_regs,\n \t\t\t   entry_parm ? partial : 0, fndecl,\n \t\t\t   &stack_args_size, &locate);\n+      /* Adjust offsets to include pretend args, unless this is the\n+         split arg.  */\n+      if (pretend_bytes == 0)\n+\t{\n+\t  locate.slot_offset.constant += extra_pretend_bytes;\n+\t  locate.offset.constant += extra_pretend_bytes;\n+\t}\n \n       {\n \trtx offset_rtx;\n@@ -4661,7 +4673,7 @@ assign_parms (tree fndecl)\n #endif\n \t  )\n \t{\n-\t  stack_args_size.constant += pretend_bytes + locate.size.constant;\n+\t  stack_args_size.constant += locate.size.constant;\n \t  if (locate.size.var)\n \t    ADD_PARM_SIZE (stack_args_size, locate.size.var);\n \t}\n@@ -5273,6 +5285,8 @@ assign_parms (tree fndecl)\n \n   last_parm_insn = get_last_insn ();\n \n+  /* We have aligned all the args, so add space for the pretend args.  */\n+  stack_args_size.constant += extra_pretend_bytes;\n   current_function_args_size = stack_args_size.constant;\n \n   /* Adjust function incoming argument size for alignment and"}]}