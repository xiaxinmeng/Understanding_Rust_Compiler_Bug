{"sha": "ae117af43944101ca47b99b743c85a3c528b4b4f", "node_id": "C_kwDOANBUbNoAKGFlMTE3YWY0Mzk0NDEwMWNhNDdiOTliNzQzYzg1YTNjNTI4YjRiNGY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-11T11:43:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-11T12:53:45Z"}, "message": "[gimplefe] Add vector_mask attribute to get access to vector bools\n\nThe following adds __attribute__((vector_mask)) to get access to\nthe corresponding mask type for a vector type.  The implementation\nsimply uses truth_type_for so creating a mask type that's not\nwhat the target would choose as canonical, say a AVX2 style one\nwhen AVX512VL is enabled, is not possible.  It might be possible\nto provide access to that with an optional argument specifying\nthe precision of the bool element.  The syntax is as simple as\n\ntypedef vector_type mask_type __attribute__((vector_mask));\n\nIn theory this allows to create unit testcases for vector\nlowering and ISEL.\n\n2022-02-11  Richard Biener  <rguenther@suse.de>\n\ngcc/c-family/\n\t* c-attribs.cc (c_common_attribute_table): Add entry for\n\tvector_mask.\n\t(handle_vector_mask_attribute): New.\n\ngcc/c/\n\t* gimple-parser.cc (c_parser_gimple_statement): Properly parse\n\tVEC_COND_EXPRs.\n\ngcc/testsuite/\n\t* gcc.dg/gimplefe-48.c: New testcase.", "tree": {"sha": "e6b640e8c3125ff9be07dc1d869a03e4d682beef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6b640e8c3125ff9be07dc1d869a03e4d682beef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae117af43944101ca47b99b743c85a3c528b4b4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae117af43944101ca47b99b743c85a3c528b4b4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae117af43944101ca47b99b743c85a3c528b4b4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae117af43944101ca47b99b743c85a3c528b4b4f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84993d94e13ad2ab3aee151bb5a5e767cf75d51e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84993d94e13ad2ab3aee151bb5a5e767cf75d51e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84993d94e13ad2ab3aee151bb5a5e767cf75d51e"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "3849dba90b2fd7e86fb960bf092c085f36822b45", "filename": "gcc/c-family/c-attribs.cc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae117af43944101ca47b99b743c85a3c528b4b4f/gcc%2Fc-family%2Fc-attribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae117af43944101ca47b99b743c85a3c528b4b4f/gcc%2Fc-family%2Fc-attribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.cc?ref=ae117af43944101ca47b99b743c85a3c528b4b4f", "patch": "@@ -129,6 +129,8 @@ static tree handle_unavailable_attribute (tree *, tree, tree, int,\n \t\t\t\t\t  bool *);\n static tree handle_vector_size_attribute (tree *, tree, tree, int,\n \t\t\t\t\t  bool *) ATTRIBUTE_NONNULL(3);\n+static tree handle_vector_mask_attribute (tree *, tree, tree, int,\n+\t\t\t\t\t  bool *) ATTRIBUTE_NONNULL(3);\n static tree handle_nonnull_attribute (tree *, tree, tree, int, bool *);\n static tree handle_nonstring_attribute (tree *, tree, tree, int, bool *);\n static tree handle_nothrow_attribute (tree *, tree, tree, int, bool *);\n@@ -417,6 +419,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_unavailable_attribute, NULL },\n   { \"vector_size\",\t      1, 1, false, true, false, true,\n \t\t\t      handle_vector_size_attribute, NULL },\n+  { \"vector_mask\",\t      0, 0, false, true, false, true,\n+\t\t\t      handle_vector_mask_attribute, NULL },\n   { \"visibility\",\t      1, 1, false, false, false, false,\n \t\t\t      handle_visibility_attribute, NULL },\n   { \"tls_model\",\t      1, 1, true,  false, false, false,\n@@ -4419,6 +4423,38 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n   return NULL_TREE;\n }\n \n+/* Handle a \"vector_mask\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_vector_mask_attribute (tree *node, tree name, tree,\n+\t\t\t      int ARG_UNUSED (flags),\n+\t\t\t      bool *no_add_attrs)\n+{\n+  *no_add_attrs = true;\n+  if (!flag_gimple)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      return NULL_TREE;\n+    }\n+\n+  /* Determine the \"base\" type to apply the attribute to.  */\n+  tree type = type_for_vector_size (*node);\n+  if (!VECTOR_TYPE_P (type) || VECTOR_BOOLEAN_TYPE_P (type))\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute only supported on \"\n+\t       \"non-mask vector types\", name);\n+      return NULL_TREE;\n+    }\n+\n+  tree new_type = truth_type_for (type);\n+\n+  /* Build back pointers if needed.  */\n+  *node = lang_hooks.types.reconstruct_complex_type (*node, new_type);\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle the \"nonnull\" attribute.  */\n \n static tree"}, {"sha": "31075237c986b4ac77014f0a8a6fdb04602d8269", "filename": "gcc/c/gimple-parser.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae117af43944101ca47b99b743c85a3c528b4b4f/gcc%2Fc%2Fgimple-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae117af43944101ca47b99b743c85a3c528b4b4f/gcc%2Fc%2Fgimple-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.cc?ref=ae117af43944101ca47b99b743c85a3c528b4b4f", "patch": "@@ -860,9 +860,10 @@ c_parser_gimple_statement (gimple_parser &parser, gimple_seq *seq)\n   if (lhs.value != error_mark_node\n       && rhs.value != error_mark_node)\n     {\n-      /* If we parsed a comparison and the next token is a '?' then\n-         parse a conditional expression.  */\n-      if (COMPARISON_CLASS_P (rhs.value)\n+      /* If we parsed a comparison or an identifier and the next token\n+\t is a '?' then parse a conditional expression.  */\n+      if ((COMPARISON_CLASS_P (rhs.value)\n+\t   || SSA_VAR_P (rhs.value))\n \t  && c_parser_next_token_is (parser, CPP_QUERY))\n \t{\n \t  struct c_expr trueval, falseval;\n@@ -874,7 +875,10 @@ c_parser_gimple_statement (gimple_parser &parser, gimple_seq *seq)\n \t  if (trueval.value == error_mark_node\n \t      || falseval.value == error_mark_node)\n \t    return;\n-\t  rhs.value = build3_loc (loc, COND_EXPR, TREE_TYPE (trueval.value),\n+\t  rhs.value = build3_loc (loc,\n+\t\t\t\t  VECTOR_TYPE_P (TREE_TYPE (rhs.value))\n+\t\t\t\t  ? VEC_COND_EXPR : COND_EXPR,\n+\t\t\t\t  TREE_TYPE (trueval.value),\n \t\t\t\t  rhs.value, trueval.value, falseval.value);\n \t}\n       if (get_gimple_rhs_class (TREE_CODE (rhs.value)) == GIMPLE_INVALID_RHS)"}, {"sha": "1399cc9d79a627dbe3725013c9b0d64c564a9672", "filename": "gcc/testsuite/gcc.dg/gimplefe-48.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae117af43944101ca47b99b743c85a3c528b4b4f/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae117af43944101ca47b99b743c85a3c528b4b4f/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-48.c?ref=ae117af43944101ca47b99b743c85a3c528b4b4f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fgimple -Wno-psabi -w\" } */\n+/* { dg-additional-options \"-mavx2\" { target x86_64-*-* i?86-*-* } } */\n+\n+typedef int v8si __attribute__((vector_size(8*sizeof(int))));\n+typedef v8si v8sib __attribute__((vector_mask));\n+\n+v8si res;\n+\n+void __GIMPLE (ssa) foo (v8si v1, v8si v2, v8si v3, v8si v4)\n+{\n+  v8sib tem;\n+  v8si resr;\n+\n+__BB(2):\n+  tem_3 = v1_1(D) <= v2_2(D);\n+  resr_4 = tem_3 ? v3_5(D) : v4_6(D);\n+  res = resr_4;\n+  return;\n+}"}]}