{"sha": "07c7ee4d2d42f4728928556dbbe0700f9a13db90", "node_id": "C_kwDOANBUbNoAKDA3YzdlZTRkMmQ0MmY0NzI4OTI4NTU2ZGJiZTA3MDBmOWExM2RiOTA", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-08-04T09:20:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-08-04T12:10:33Z"}, "message": "libstdc++: Rename data members of std::unexpected and std::bad_expected_access\n\nThe P2549R1 paper was accepted for C++23. I already implemented it for\nour <expected>, but I didn't rename the private daata members, only the\npublic member functions. This renames the data members for consistency\nwith the working draft.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/expected (unexpected::_M_val): Rename to _M_unex.\n\t(bad_expected_access::_M_val): Likewise.", "tree": {"sha": "6170dc0da2573126d0dc71d6bce94ab6ee3a3f29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6170dc0da2573126d0dc71d6bce94ab6ee3a3f29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07c7ee4d2d42f4728928556dbbe0700f9a13db90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c7ee4d2d42f4728928556dbbe0700f9a13db90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c7ee4d2d42f4728928556dbbe0700f9a13db90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c7ee4d2d42f4728928556dbbe0700f9a13db90/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e9bd6b2b1782891639fa5d49b7d2a933b8e85cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e9bd6b2b1782891639fa5d49b7d2a933b8e85cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e9bd6b2b1782891639fa5d49b7d2a933b8e85cd"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "3ee13aa95f6657a6474aebc1cfc65286d97d59d1", "filename": "libstdc++-v3/include/std/expected", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c7ee4d2d42f4728928556dbbe0700f9a13db90/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fexpected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c7ee4d2d42f4728928556dbbe0700f9a13db90/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fexpected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fexpected?ref=07c7ee4d2d42f4728928556dbbe0700f9a13db90", "patch": "@@ -95,32 +95,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class bad_expected_access : public bad_expected_access<void> {\n     public:\n       explicit\n-      bad_expected_access(_Er __e) : _M_val(std::move(__e)) { }\n+      bad_expected_access(_Er __e) : _M_unex(std::move(__e)) { }\n \n       // XXX const char* what() const noexcept override;\n \n       [[nodiscard]]\n       _Er&\n       error() & noexcept\n-      { return _M_val; }\n+      { return _M_unex; }\n \n       [[nodiscard]]\n       const _Er&\n       error() const & noexcept\n-      { return _M_val; }\n+      { return _M_unex; }\n \n       [[nodiscard]]\n       _Er&&\n       error() && noexcept\n-      { return std::move(_M_val); }\n+      { return std::move(_M_unex); }\n \n       [[nodiscard]]\n       const _Er&&\n       error() const && noexcept\n-      { return std::move(_M_val); }\n+      { return std::move(_M_unex); }\n \n     private:\n-      _Er _M_val;\n+      _Er _M_unex;\n     };\n \n   /// Tag type for constructing unexpected values in a std::expected\n@@ -175,15 +175,15 @@ namespace __expected\n \tconstexpr explicit\n \tunexpected(_Err&& __e)\n \tnoexcept(is_nothrow_constructible_v<_Er, _Err>)\n-\t: _M_val(std::forward<_Err>(__e))\n+\t: _M_unex(std::forward<_Err>(__e))\n \t{ }\n \n       template<typename... _Args>\n \trequires is_constructible_v<_Er, _Args...>\n \tconstexpr explicit\n \tunexpected(in_place_t, _Args&&... __args)\n \tnoexcept(is_nothrow_constructible_v<_Er, _Args...>)\n-\t: _M_val(std::forward<_Args>(__args)...)\n+\t: _M_unex(std::forward<_Args>(__args)...)\n \t{ }\n \n       template<typename _Up, typename... _Args>\n@@ -192,7 +192,7 @@ namespace __expected\n \tunexpected(in_place_t, initializer_list<_Up> __il, _Args&&... __args)\n \tnoexcept(is_nothrow_constructible_v<_Er, initializer_list<_Up>&,\n \t\t\t\t\t    _Args...>)\n-\t: _M_val(__il, std::forward<_Args>(__args)...)\n+\t: _M_unex(__il, std::forward<_Args>(__args)...)\n \t{ }\n \n       constexpr unexpected& operator=(const unexpected&) = default;\n@@ -201,33 +201,33 @@ namespace __expected\n \n       [[nodiscard]]\n       constexpr const _Er&\n-      error() const & noexcept { return _M_val; }\n+      error() const & noexcept { return _M_unex; }\n \n       [[nodiscard]]\n       constexpr _Er&\n-      error() & noexcept { return _M_val; }\n+      error() & noexcept { return _M_unex; }\n \n       [[nodiscard]]\n       constexpr const _Er&&\n-      error() const && noexcept { return std::move(_M_val); }\n+      error() const && noexcept { return std::move(_M_unex); }\n \n       [[nodiscard]]\n       constexpr _Er&&\n-      error() && noexcept { return std::move(_M_val); }\n+      error() && noexcept { return std::move(_M_unex); }\n \n       constexpr void\n       swap(unexpected& __other) noexcept(is_nothrow_swappable_v<_Er>)\n       {\n \tstatic_assert( is_swappable_v<_Er> );\n \tusing std::swap;\n-\tswap(_M_val, __other._M_val);\n+\tswap(_M_unex, __other._M_unex);\n       }\n \n       template<typename _Err>\n \t[[nodiscard]]\n \tfriend constexpr bool\n \toperator==(const unexpected& __x, const unexpected<_Err>& __y)\n-\t{ return __x._M_val == __y.error(); }\n+\t{ return __x._M_unex == __y.error(); }\n \n       friend constexpr void\n       swap(unexpected& __x, unexpected& __y)\n@@ -236,7 +236,7 @@ namespace __expected\n       { __x.swap(__y); }\n \n     private:\n-      _Er _M_val;\n+      _Er _M_unex;\n     };\n \n   template<typename _Er> unexpected(_Er) -> unexpected<_Er>;"}]}