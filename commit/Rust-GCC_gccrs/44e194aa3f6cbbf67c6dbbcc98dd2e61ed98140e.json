{"sha": "44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "node_id": "C_kwDOANBUbNoAKDQ0ZTE5NGFhM2Y2Y2JiZjY3YzZkYmJjYzk4ZGQyZTYxZWQ5ODE0MGU", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-29T23:35:38Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-30T16:46:25Z"}, "message": "RISC-V: Add vloxei8 C++ API intrinsic testcase\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vloxei8-1.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei8-2.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei8-3.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei8_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei8_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei8_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei8_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei8_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei8_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei8_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei8_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei8_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei8_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei8_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei8_tumu-3.C: New test.", "tree": {"sha": "61ca191b89c08f99614fe073a2dc3ab6b438904e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61ca191b89c08f99614fe073a2dc3ab6b438904e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b85ba3c4b37ea60a81d4def8406caa868a881aa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b85ba3c4b37ea60a81d4def8406caa868a881aa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b85ba3c4b37ea60a81d4def8406caa868a881aa5"}], "stats": {"total": 6210, "additions": 6210, "deletions": 0}, "files": [{"sha": "197f1fd3ef2e5759e91e28ba7ebc79853c8b24f8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei8-1.C", "status": "added", "additions": 686, "deletions": 0, "changes": 686, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8-1.C?ref=44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "patch": "@@ -0,0 +1,686 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei8(const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei8(const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei8(const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei8(const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei8(const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei8(const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vloxei8(const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei8(const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei8(const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei8(const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei8(const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei8(const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei8(const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei8(const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei8(const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei8(const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei8(const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei8(const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei8(const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei8(const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei8(const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei8(const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei8(const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei8(const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei8(const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei8(const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei8(const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei8(const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vloxei8(const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei8(const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei8(const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei8(const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei8(const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei8(const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei8(const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei8(const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei8(const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei8(const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei8(const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei8(const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei8(const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei8(const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei8(const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei8(const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei8(const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei8(const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei8(const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei8(const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei8(const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei8(const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei8(const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei8(const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei8(const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vloxei8(vbool64_t mask,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei8(vbool32_t mask,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei8(vbool16_t mask,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei8(vbool8_t mask,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei8(vbool4_t mask,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei8(vbool2_t mask,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vloxei8(vbool1_t mask,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei8(vbool64_t mask,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei8(vbool32_t mask,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei8(vbool16_t mask,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei8(vbool8_t mask,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei8(vbool4_t mask,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei8(vbool2_t mask,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei8(vbool64_t mask,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei8(vbool32_t mask,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei8(vbool16_t mask,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei8(vbool8_t mask,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei8(vbool4_t mask,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei8(vbool64_t mask,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei8(vbool32_t mask,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei8(vbool16_t mask,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei8(vbool8_t mask,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei8(vbool64_t mask,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei8(vbool32_t mask,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei8(vbool16_t mask,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei8(vbool8_t mask,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei8(vbool4_t mask,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei8(vbool2_t mask,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vloxei8(vbool1_t mask,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei8(vbool64_t mask,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei8(vbool32_t mask,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei8(vbool16_t mask,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei8(vbool8_t mask,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei8(vbool4_t mask,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei8(vbool2_t mask,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei8(vbool64_t mask,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei8(vbool32_t mask,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei8(vbool16_t mask,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei8(vbool8_t mask,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei8(vbool4_t mask,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei8(vbool64_t mask,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei8(vbool32_t mask,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei8(vbool16_t mask,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei8(vbool8_t mask,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei8(vbool64_t mask,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei8(vbool32_t mask,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei8(vbool16_t mask,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei8(vbool8_t mask,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei8(vbool4_t mask,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei8(vbool64_t mask,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei8(vbool32_t mask,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei8(vbool16_t mask,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei8(vbool8_t mask,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "c06e5912d1c5751ca0d80728ec25d0d6a18cbdd0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei8-2.C", "status": "added", "additions": 686, "deletions": 0, "changes": 686, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8-2.C?ref=44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "patch": "@@ -0,0 +1,686 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei8(const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei8(const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei8(const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei8(const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei8(const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei8(const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vloxei8(const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei8(const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei8(const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei8(const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei8(const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei8(const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei8(const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei8(const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei8(const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei8(const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei8(const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei8(const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei8(const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei8(const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei8(const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei8(const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei8(const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei8(const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei8(const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei8(const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei8(const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei8(const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vloxei8(const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei8(const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei8(const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei8(const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei8(const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei8(const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei8(const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei8(const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei8(const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei8(const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei8(const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei8(const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei8(const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei8(const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei8(const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei8(const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei8(const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei8(const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei8(const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei8(const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei8(const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei8(const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei8(const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei8(const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei8(const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vloxei8(vbool64_t mask,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei8(vbool32_t mask,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei8(vbool16_t mask,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei8(vbool8_t mask,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei8(vbool4_t mask,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei8(vbool2_t mask,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vloxei8(vbool1_t mask,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei8(vbool64_t mask,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei8(vbool32_t mask,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei8(vbool16_t mask,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei8(vbool8_t mask,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei8(vbool4_t mask,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei8(vbool2_t mask,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei8(vbool64_t mask,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei8(vbool32_t mask,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei8(vbool16_t mask,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei8(vbool8_t mask,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei8(vbool4_t mask,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei8(vbool64_t mask,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei8(vbool32_t mask,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei8(vbool16_t mask,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei8(vbool8_t mask,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei8(vbool64_t mask,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei8(vbool32_t mask,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei8(vbool16_t mask,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei8(vbool8_t mask,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei8(vbool4_t mask,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei8(vbool2_t mask,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vloxei8(vbool1_t mask,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei8(vbool64_t mask,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei8(vbool32_t mask,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei8(vbool16_t mask,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei8(vbool8_t mask,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei8(vbool4_t mask,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei8(vbool2_t mask,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei8(vbool64_t mask,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei8(vbool32_t mask,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei8(vbool16_t mask,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei8(vbool8_t mask,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei8(vbool4_t mask,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei8(vbool64_t mask,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei8(vbool32_t mask,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei8(vbool16_t mask,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei8(vbool8_t mask,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei8(vbool64_t mask,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei8(vbool32_t mask,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei8(vbool16_t mask,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei8(vbool8_t mask,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei8(vbool4_t mask,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei8(vbool64_t mask,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei8(vbool32_t mask,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei8(vbool16_t mask,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei8(vbool8_t mask,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "f02debcb34601842c324577087fd19ae9443d8da", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei8-3.C", "status": "added", "additions": 686, "deletions": 0, "changes": 686, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8-3.C?ref=44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "patch": "@@ -0,0 +1,686 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei8(const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei8(const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei8(const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei8(const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei8(const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei8(const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vloxei8(const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei8(const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei8(const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei8(const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei8(const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei8(const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei8(const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei8(const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei8(const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei8(const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei8(const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei8(const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei8(const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei8(const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei8(const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei8(const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei8(const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei8(const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei8(const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei8(const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei8(const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei8(const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vloxei8(const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei8(const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei8(const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei8(const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei8(const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei8(const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei8(const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei8(const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei8(const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei8(const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei8(const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei8(const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei8(const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei8(const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei8(const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei8(const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei8(const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei8(const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei8(const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei8(const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei8(const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei8(const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei8(const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei8(const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei8(const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(base,bindex,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vloxei8(vbool64_t mask,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei8(vbool32_t mask,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei8(vbool16_t mask,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei8(vbool8_t mask,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei8(vbool4_t mask,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei8(vbool2_t mask,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vloxei8(vbool1_t mask,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei8(vbool64_t mask,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei8(vbool32_t mask,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei8(vbool16_t mask,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei8(vbool8_t mask,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei8(vbool4_t mask,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei8(vbool2_t mask,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei8(vbool64_t mask,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei8(vbool32_t mask,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei8(vbool16_t mask,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei8(vbool8_t mask,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei8(vbool4_t mask,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei8(vbool64_t mask,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei8(vbool32_t mask,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei8(vbool16_t mask,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei8(vbool8_t mask,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei8(vbool64_t mask,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei8(vbool32_t mask,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei8(vbool16_t mask,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei8(vbool8_t mask,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei8(vbool4_t mask,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei8(vbool2_t mask,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vloxei8(vbool1_t mask,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei8(vbool64_t mask,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei8(vbool32_t mask,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei8(vbool16_t mask,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei8(vbool8_t mask,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei8(vbool4_t mask,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei8(vbool2_t mask,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei8(vbool64_t mask,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei8(vbool32_t mask,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei8(vbool16_t mask,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei8(vbool8_t mask,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei8(vbool4_t mask,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei8(vbool64_t mask,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei8(vbool32_t mask,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei8(vbool16_t mask,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei8(vbool8_t mask,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei8(vbool64_t mask,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei8(vbool32_t mask,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei8(vbool16_t mask,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei8(vbool8_t mask,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei8(vbool4_t mask,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei8(vbool64_t mask,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei8(vbool32_t mask,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei8(vbool16_t mask,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei8(vbool8_t mask,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8(mask,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "de18bf944f00b78c99503a29c85ee4a9bc5beef9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei8_mu-1.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_mu-1.C?ref=44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei8_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei8_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei8_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei8_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei8_mu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei8_mu(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vloxei8_mu(vbool1_t mask,vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei8_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei8_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei8_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei8_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei8_mu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei8_mu(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei8_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei8_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei8_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei8_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei8_mu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei8_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei8_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei8_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei8_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei8_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei8_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei8_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei8_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei8_mu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei8_mu(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vloxei8_mu(vbool1_t mask,vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei8_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei8_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei8_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei8_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei8_mu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei8_mu(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei8_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei8_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei8_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei8_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei8_mu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei8_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei8_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei8_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei8_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei8_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei8_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei8_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei8_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei8_mu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei8_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei8_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei8_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei8_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "2433a60bbd24f38273f94a11b645f74c8ba79476", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei8_mu-2.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_mu-2.C?ref=44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei8_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei8_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei8_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei8_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei8_mu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei8_mu(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vloxei8_mu(vbool1_t mask,vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei8_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei8_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei8_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei8_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei8_mu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei8_mu(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei8_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei8_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei8_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei8_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei8_mu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei8_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei8_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei8_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei8_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei8_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei8_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei8_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei8_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei8_mu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei8_mu(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vloxei8_mu(vbool1_t mask,vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei8_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei8_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei8_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei8_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei8_mu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei8_mu(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei8_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei8_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei8_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei8_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei8_mu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei8_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei8_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei8_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei8_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei8_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei8_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei8_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei8_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei8_mu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei8_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei8_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei8_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei8_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "8a14e28dfe2d21ae8c5b65cf18f96714e05f702d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei8_mu-3.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_mu-3.C?ref=44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei8_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei8_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei8_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei8_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei8_mu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei8_mu(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vloxei8_mu(vbool1_t mask,vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei8_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei8_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei8_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei8_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei8_mu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei8_mu(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei8_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei8_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei8_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei8_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei8_mu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei8_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei8_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei8_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei8_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei8_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei8_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei8_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei8_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei8_mu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei8_mu(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vloxei8_mu(vbool1_t mask,vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei8_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei8_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei8_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei8_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei8_mu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei8_mu(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei8_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei8_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei8_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei8_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei8_mu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei8_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei8_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei8_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei8_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei8_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei8_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei8_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei8_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei8_mu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei8_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei8_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei8_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei8_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "933d49e2ddda70d8135b2b167ef02377a18dd69b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei8_tu-1.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tu-1.C?ref=44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei8_tu(vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei8_tu(vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei8_tu(vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei8_tu(vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei8_tu(vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei8_tu(vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vloxei8_tu(vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei8_tu(vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei8_tu(vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei8_tu(vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei8_tu(vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei8_tu(vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei8_tu(vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei8_tu(vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei8_tu(vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei8_tu(vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei8_tu(vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei8_tu(vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei8_tu(vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei8_tu(vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei8_tu(vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei8_tu(vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei8_tu(vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei8_tu(vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei8_tu(vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei8_tu(vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei8_tu(vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei8_tu(vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vloxei8_tu(vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei8_tu(vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei8_tu(vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei8_tu(vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei8_tu(vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei8_tu(vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei8_tu(vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei8_tu(vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei8_tu(vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei8_tu(vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei8_tu(vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei8_tu(vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei8_tu(vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei8_tu(vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei8_tu(vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei8_tu(vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei8_tu(vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei8_tu(vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei8_tu(vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei8_tu(vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei8_tu(vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei8_tu(vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei8_tu(vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei8_tu(vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei8_tu(vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */"}, {"sha": "575514faa95ab92e9431dcd729fb3b3673c4a2dd", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei8_tu-2.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tu-2.C?ref=44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei8_tu(vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei8_tu(vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei8_tu(vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei8_tu(vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei8_tu(vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei8_tu(vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vloxei8_tu(vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei8_tu(vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei8_tu(vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei8_tu(vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei8_tu(vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei8_tu(vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei8_tu(vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei8_tu(vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei8_tu(vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei8_tu(vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei8_tu(vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei8_tu(vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei8_tu(vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei8_tu(vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei8_tu(vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei8_tu(vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei8_tu(vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei8_tu(vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei8_tu(vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei8_tu(vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei8_tu(vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei8_tu(vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vloxei8_tu(vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei8_tu(vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei8_tu(vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei8_tu(vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei8_tu(vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei8_tu(vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei8_tu(vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei8_tu(vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei8_tu(vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei8_tu(vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei8_tu(vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei8_tu(vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei8_tu(vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei8_tu(vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei8_tu(vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei8_tu(vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei8_tu(vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei8_tu(vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei8_tu(vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei8_tu(vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei8_tu(vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei8_tu(vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei8_tu(vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei8_tu(vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei8_tu(vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */"}, {"sha": "da5aa7744b04bf5b0abb97d3a4e5bcb10ac40207", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei8_tu-3.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tu-3.C?ref=44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei8_tu(vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei8_tu(vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei8_tu(vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei8_tu(vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei8_tu(vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei8_tu(vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vloxei8_tu(vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei8_tu(vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei8_tu(vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei8_tu(vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei8_tu(vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei8_tu(vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei8_tu(vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei8_tu(vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei8_tu(vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei8_tu(vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei8_tu(vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei8_tu(vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei8_tu(vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei8_tu(vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei8_tu(vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei8_tu(vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei8_tu(vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei8_tu(vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei8_tu(vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei8_tu(vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei8_tu(vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei8_tu(vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vloxei8_tu(vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei8_tu(vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei8_tu(vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei8_tu(vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei8_tu(vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei8_tu(vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei8_tu(vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei8_tu(vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei8_tu(vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei8_tu(vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei8_tu(vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei8_tu(vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei8_tu(vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei8_tu(vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei8_tu(vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei8_tu(vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei8_tu(vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei8_tu(vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei8_tu(vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei8_tu(vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei8_tu(vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei8_tu(vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei8_tu(vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei8_tu(vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei8_tu(vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */"}, {"sha": "54d038db3b8e261e7c1eed8545d6fdcc6e8b768d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei8_tum-1.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tum-1.C?ref=44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei8_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei8_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei8_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei8_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei8_tum(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei8_tum(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vloxei8_tum(vbool1_t mask,vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei8_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei8_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei8_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei8_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei8_tum(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei8_tum(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei8_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei8_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei8_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei8_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei8_tum(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei8_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei8_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei8_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei8_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei8_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei8_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei8_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei8_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei8_tum(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei8_tum(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vloxei8_tum(vbool1_t mask,vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei8_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei8_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei8_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei8_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei8_tum(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei8_tum(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei8_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei8_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei8_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei8_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei8_tum(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei8_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei8_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei8_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei8_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei8_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei8_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei8_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei8_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei8_tum(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei8_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei8_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei8_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei8_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "170c7c85a04f34b6e4f1c521d70de722f2ca599e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei8_tum-2.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tum-2.C?ref=44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei8_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei8_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei8_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei8_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei8_tum(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei8_tum(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vloxei8_tum(vbool1_t mask,vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei8_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei8_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei8_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei8_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei8_tum(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei8_tum(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei8_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei8_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei8_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei8_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei8_tum(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei8_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei8_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei8_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei8_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei8_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei8_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei8_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei8_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei8_tum(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei8_tum(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vloxei8_tum(vbool1_t mask,vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei8_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei8_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei8_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei8_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei8_tum(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei8_tum(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei8_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei8_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei8_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei8_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei8_tum(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei8_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei8_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei8_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei8_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei8_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei8_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei8_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei8_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei8_tum(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei8_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei8_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei8_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei8_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "67fd325fff10d19af8d1c5536859b74f2309076c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei8_tum-3.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tum-3.C?ref=44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei8_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei8_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei8_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei8_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei8_tum(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei8_tum(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vloxei8_tum(vbool1_t mask,vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei8_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei8_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei8_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei8_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei8_tum(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei8_tum(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei8_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei8_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei8_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei8_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei8_tum(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei8_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei8_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei8_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei8_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei8_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei8_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei8_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei8_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei8_tum(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei8_tum(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vloxei8_tum(vbool1_t mask,vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei8_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei8_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei8_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei8_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei8_tum(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei8_tum(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei8_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei8_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei8_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei8_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei8_tum(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei8_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei8_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei8_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei8_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei8_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei8_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei8_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei8_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei8_tum(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei8_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei8_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei8_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei8_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "ddc84caca2d5fa3654ce1900462cac42426f8f14", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei8_tumu-1.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tumu-1.C?ref=44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei8_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei8_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei8_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei8_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei8_tumu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei8_tumu(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vloxei8_tumu(vbool1_t mask,vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei8_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei8_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei8_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei8_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei8_tumu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei8_tumu(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei8_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei8_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei8_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei8_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei8_tumu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei8_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei8_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei8_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei8_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei8_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei8_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei8_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei8_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei8_tumu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei8_tumu(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vloxei8_tumu(vbool1_t mask,vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei8_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei8_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei8_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei8_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei8_tumu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei8_tumu(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei8_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei8_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei8_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei8_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei8_tumu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei8_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei8_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei8_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei8_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei8_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei8_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei8_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei8_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei8_tumu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei8_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei8_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei8_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei8_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "f9f6ffc2a7f92c1ff26b9f27f23979fe883ad5b5", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei8_tumu-2.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tumu-2.C?ref=44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei8_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei8_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei8_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei8_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei8_tumu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei8_tumu(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vloxei8_tumu(vbool1_t mask,vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei8_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei8_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei8_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei8_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei8_tumu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei8_tumu(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei8_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei8_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei8_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei8_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei8_tumu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei8_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei8_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei8_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei8_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei8_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei8_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei8_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei8_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei8_tumu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei8_tumu(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vloxei8_tumu(vbool1_t mask,vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei8_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei8_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei8_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei8_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei8_tumu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei8_tumu(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei8_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei8_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei8_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei8_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei8_tumu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei8_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei8_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei8_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei8_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei8_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei8_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei8_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei8_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei8_tumu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei8_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei8_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei8_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei8_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "462e4a2990dd2331675ce887613c1c375940b2e4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei8_tumu-3.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei8_tumu-3.C?ref=44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei8_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei8_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei8_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei8_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei8_tumu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei8_tumu(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vloxei8_tumu(vbool1_t mask,vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei8_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei8_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei8_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei8_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei8_tumu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei8_tumu(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei8_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei8_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei8_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei8_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei8_tumu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei8_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei8_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei8_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei8_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei8_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei8_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei8_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei8_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei8_tumu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei8_tumu(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vloxei8_tumu(vbool1_t mask,vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei8_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei8_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei8_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei8_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei8_tumu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei8_tumu(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei8_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei8_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei8_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei8_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei8_tumu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei8_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei8_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei8_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei8_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei8_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei8_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei8_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei8_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei8_tumu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei8_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei8_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei8_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei8_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vloxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}]}