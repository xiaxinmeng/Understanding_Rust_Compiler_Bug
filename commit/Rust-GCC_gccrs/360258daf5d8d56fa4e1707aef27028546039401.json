{"sha": "360258daf5d8d56fa4e1707aef27028546039401", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYwMjU4ZGFmNWQ4ZDU2ZmE0ZTE3MDdhZWYyNzAyODU0NjAzOTQwMQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-26T00:16:41Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-26T00:16:41Z"}, "message": "Daily bump.", "tree": {"sha": "cc0edb5576083fc726fb0483ab70f64745305b60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc0edb5576083fc726fb0483ab70f64745305b60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/360258daf5d8d56fa4e1707aef27028546039401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/360258daf5d8d56fa4e1707aef27028546039401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/360258daf5d8d56fa4e1707aef27028546039401", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/360258daf5d8d56fa4e1707aef27028546039401/comments", "author": null, "committer": null, "parents": [{"sha": "ca23341b28cd3af7985b83a6479107d9ea145a90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca23341b28cd3af7985b83a6479107d9ea145a90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca23341b28cd3af7985b83a6479107d9ea145a90"}], "stats": {"total": 1077, "additions": 1076, "deletions": 1}, "files": [{"sha": "fdb396b8328be229d9562566a77a2114d6847582", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360258daf5d8d56fa4e1707aef27028546039401/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360258daf5d8d56fa4e1707aef27028546039401/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=360258daf5d8d56fa4e1707aef27028546039401", "patch": "@@ -1,3 +1,8 @@\n+2020-11-25  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* configure: Regenerate.\n+\t* configure.ac: Add --bootstrap-hwasan option.\n+\n 2020-11-23  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config.guess: Import latest upstream."}, {"sha": "6a15db4eb703af1ba56dda05088e5b49c479a196", "filename": "config/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360258daf5d8d56fa4e1707aef27028546039401/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360258daf5d8d56fa4e1707aef27028546039401/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=360258daf5d8d56fa4e1707aef27028546039401", "patch": "@@ -1,3 +1,12 @@\n+2020-11-25  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* bootstrap-hwasan.mk: Disable random frame tags for stack-tagging\n+\tduring bootstrap.\n+\n+2020-11-25  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* bootstrap-hwasan.mk: New file.\n+\n 2020-09-09  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tSync from binutils-gdb."}, {"sha": "77f5de35cdc1bf3f3a9569c9fc4289e7f348e02a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 327, "deletions": 0, "changes": 327, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360258daf5d8d56fa4e1707aef27028546039401/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360258daf5d8d56fa4e1707aef27028546039401/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=360258daf5d8d56fa4e1707aef27028546039401", "patch": "@@ -1,3 +1,330 @@\n+2020-11-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR bootstrap/97622\n+\tPR bootstrap/94982\n+\t* config/i386/i386-options.c (ix86_valid_target_attribute_inner_p):\n+\tAvoid -Wformat-diag.\n+\t* digraph.cc (struct test_edge): Same.\n+\t* dumpfile.c (dump_loc): Same.\n+\t(dump_context::begin_scope): Same.\n+\t* edit-context.c (edited_file::print_diff): Same.\n+\t(edited_file::print_diff_hunk): Same.\n+\t* json.cc (object::print): Same.\n+\t* lto-wrapper.c (merge_and_complain): Same.\n+\t* reload.c (find_reloads): Same.\n+\t* tree-diagnostic-path.cc (print_path_summary_as_text): Same.\n+\t* ubsan.c (ubsan_type_descriptor): Same.\n+\n+2020-11-25  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gimple.c (gimple_call_arg_flags): Also imply EAF_NODIRECTESCAPE.\n+\t* tree-core.h (EAF_NODRECTESCAPE): New flag.\n+\t* tree-ssa-structalias.c (make_indirect_escape_constraint): New\n+\tfunction.\n+\t(handle_rhs_call): Hanlde EAF_NODIRECTESCAPE.\n+\t* ipa-modref.c (dump_eaf_flags): Print EAF_NODIRECTESCAPE.\n+\t(deref_flags): Dereference is always EAF_NODIRECTESCAPE.\n+\t(modref_lattice::init): Also set EAF_NODIRECTESCAPE.\n+\t(analyze_ssa_name_flags): Pure functions do not affect\n+\tEAF_NODIRECTESCAPE.\n+\t(analyze_params): Likewise.\n+\t(ipa_merge_modref_summary_after_inlining): Likewise.\n+\t(modref_merge_call_site_flags): Likewise.\n+\n+2020-11-25  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-modref.c (modref_summaries::duplicate,\n+\tmodref_summaries_lto::duplicate): Copy arg_flags.\n+\t(remap_arg_flags): Fix remapping of arg_flags.\n+\n+2020-11-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97956\n+\t* gimple-fold.c (gimple_fold_builtin_memchr): Use sizetype for pointer\n+\toffsets.\n+\n+2020-11-25  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* asan.c (asan_instrument_reads): New.\n+\t(asan_instrument_writes): New.\n+\t(asan_memintrin): New.\n+\t(handle_builtin_stack_restore): Account for HWASAN.\n+\t(handle_builtin_alloca): Account for HWASAN.\n+\t(get_mem_refs_of_builtin_call): Special case strlen for HWASAN.\n+\t(hwasan_instrument_reads): New.\n+\t(hwasan_instrument_writes): New.\n+\t(hwasan_memintrin): New.\n+\t(report_error_func): Assert not HWASAN.\n+\t(build_check_stmt): Make HWASAN_CHECK instead of ASAN_CHECK.\n+\t(instrument_derefs): HWASAN does not tag globals.\n+\t(instrument_builtin_call): Use new helper functions.\n+\t(maybe_instrument_call): Don't instrument `noreturn` functions.\n+\t(initialize_sanitizer_builtins): Add new type.\n+\t(asan_expand_mark_ifn): Account for HWASAN.\n+\t(asan_expand_check_ifn): Assert never called by HWASAN.\n+\t(asan_expand_poison_ifn): Account for HWASAN.\n+\t(asan_instrument): Branch based on whether using HWASAN or ASAN.\n+\t(pass_asan::gate): Return true if sanitizing HWASAN.\n+\t(pass_asan_O0::gate): Return true if sanitizing HWASAN.\n+\t(hwasan_check_func): New.\n+\t(hwasan_expand_check_ifn): New.\n+\t(hwasan_expand_mark_ifn): New.\n+\t(gate_hwasan): New.\n+\t* asan.h (hwasan_expand_check_ifn): New decl.\n+\t(hwasan_expand_mark_ifn): New decl.\n+\t(gate_hwasan): New decl.\n+\t(asan_intercepted_p): Always false for hwasan.\n+\t(asan_sanitize_use_after_scope): Account for HWASAN.\n+\t* builtin-types.def (BT_FN_PTR_CONST_PTR_UINT8): New.\n+\t* gimple-fold.c (gimple_build): New overload for building function\n+\tcalls without arguments.\n+\t(gimple_build_round_up): New.\n+\t* gimple-fold.h (gimple_build): New decl.\n+\t(gimple_build): New inline function.\n+\t(gimple_build_round_up): New decl.\n+\t(gimple_build_round_up): New inline function.\n+\t* gimple-pretty-print.c (dump_gimple_call_args): Account for\n+\tHWASAN.\n+\t* gimplify.c (asan_poison_variable): Account for HWASAN.\n+\t(gimplify_function_tree): Remove requirement of\n+\tSANITIZE_ADDRESS, requiring asan or hwasan is accounted for in\n+\t`asan_sanitize_use_after_scope`.\n+\t* internal-fn.c (expand_HWASAN_CHECK): New.\n+\t(expand_HWASAN_ALLOCA_UNPOISON): New.\n+\t(expand_HWASAN_CHOOSE_TAG): New.\n+\t(expand_HWASAN_MARK): New.\n+\t(expand_HWASAN_SET_TAG): New.\n+\t* internal-fn.def (HWASAN_ALLOCA_UNPOISON): New.\n+\t(HWASAN_CHOOSE_TAG): New.\n+\t(HWASAN_CHECK): New.\n+\t(HWASAN_MARK): New.\n+\t(HWASAN_SET_TAG): New.\n+\t* sanitizer.def (BUILT_IN_HWASAN_LOAD1): New.\n+\t(BUILT_IN_HWASAN_LOAD2): New.\n+\t(BUILT_IN_HWASAN_LOAD4): New.\n+\t(BUILT_IN_HWASAN_LOAD8): New.\n+\t(BUILT_IN_HWASAN_LOAD16): New.\n+\t(BUILT_IN_HWASAN_LOADN): New.\n+\t(BUILT_IN_HWASAN_STORE1): New.\n+\t(BUILT_IN_HWASAN_STORE2): New.\n+\t(BUILT_IN_HWASAN_STORE4): New.\n+\t(BUILT_IN_HWASAN_STORE8): New.\n+\t(BUILT_IN_HWASAN_STORE16): New.\n+\t(BUILT_IN_HWASAN_STOREN): New.\n+\t(BUILT_IN_HWASAN_LOAD1_NOABORT): New.\n+\t(BUILT_IN_HWASAN_LOAD2_NOABORT): New.\n+\t(BUILT_IN_HWASAN_LOAD4_NOABORT): New.\n+\t(BUILT_IN_HWASAN_LOAD8_NOABORT): New.\n+\t(BUILT_IN_HWASAN_LOAD16_NOABORT): New.\n+\t(BUILT_IN_HWASAN_LOADN_NOABORT): New.\n+\t(BUILT_IN_HWASAN_STORE1_NOABORT): New.\n+\t(BUILT_IN_HWASAN_STORE2_NOABORT): New.\n+\t(BUILT_IN_HWASAN_STORE4_NOABORT): New.\n+\t(BUILT_IN_HWASAN_STORE8_NOABORT): New.\n+\t(BUILT_IN_HWASAN_STORE16_NOABORT): New.\n+\t(BUILT_IN_HWASAN_STOREN_NOABORT): New.\n+\t(BUILT_IN_HWASAN_TAG_MISMATCH4): New.\n+\t(BUILT_IN_HWASAN_HANDLE_LONGJMP): New.\n+\t(BUILT_IN_HWASAN_TAG_PTR): New.\n+\t* sanopt.c (sanopt_optimize_walker): Act for hwasan.\n+\t(pass_sanopt::execute): Act for hwasan.\n+\t* toplev.c (compile_file): Use `gate_hwasan` function.\n+\n+2020-11-25  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* asan.c (struct hwasan_stack_var): New.\n+\t(hwasan_sanitize_p): New.\n+\t(hwasan_sanitize_stack_p): New.\n+\t(hwasan_sanitize_allocas_p): New.\n+\t(initialize_sanitizer_builtins): Define new builtins.\n+\t(ATTR_NOTHROW_LIST): New macro.\n+\t(hwasan_current_frame_tag): New.\n+\t(hwasan_frame_base): New.\n+\t(stack_vars_base_reg_p): New.\n+\t(hwasan_maybe_init_frame_base_init): New.\n+\t(hwasan_record_stack_var): New.\n+\t(hwasan_get_frame_extent): New.\n+\t(hwasan_increment_frame_tag): New.\n+\t(hwasan_record_frame_init): New.\n+\t(hwasan_emit_prologue): New.\n+\t(hwasan_emit_untag_frame): New.\n+\t(hwasan_finish_file): New.\n+\t(hwasan_truncate_to_tag_size): New.\n+\t* asan.h (hwasan_record_frame_init): New declaration.\n+\t(hwasan_record_stack_var): New declaration.\n+\t(hwasan_emit_prologue): New declaration.\n+\t(hwasan_emit_untag_frame): New declaration.\n+\t(hwasan_get_frame_extent): New declaration.\n+\t(hwasan_maybe_enit_frame_base_init): New declaration.\n+\t(hwasan_frame_base): New declaration.\n+\t(stack_vars_base_reg_p): New declaration.\n+\t(hwasan_current_frame_tag): New declaration.\n+\t(hwasan_increment_frame_tag): New declaration.\n+\t(hwasan_truncate_to_tag_size): New declaration.\n+\t(hwasan_finish_file): New declaration.\n+\t(hwasan_sanitize_p): New declaration.\n+\t(hwasan_sanitize_stack_p): New declaration.\n+\t(hwasan_sanitize_allocas_p): New declaration.\n+\t(HWASAN_TAG_SIZE): New macro.\n+\t(HWASAN_TAG_GRANULE_SIZE): New macro.\n+\t(HWASAN_STACK_BACKGROUND): New macro.\n+\t* builtin-types.def (BT_FN_VOID_PTR_UINT8_PTRMODE): New.\n+\t* builtins.def (DEF_SANITIZER_BUILTIN): Enable for HWASAN.\n+\t* cfgexpand.c (align_local_variable): When using hwasan ensure\n+\talignment to tag granule.\n+\t(align_frame_offset): New.\n+\t(expand_one_stack_var_at): For hwasan use tag offset.\n+\t(expand_stack_vars): Record stack objects for hwasan.\n+\t(expand_one_stack_var_1): Record stack objects for hwasan.\n+\t(init_vars_expansion): Initialise hwasan state.\n+\t(expand_used_vars): Emit hwasan prologue and generate hwasan epilogue.\n+\t(pass_expand::execute): Emit hwasan base initialization if needed.\n+\t* doc/tm.texi (TARGET_MEMTAG_TAG_SIZE,TARGET_MEMTAG_GRANULE_SIZE,\n+\tTARGET_MEMTAG_INSERT_RANDOM_TAG,TARGET_MEMTAG_ADD_TAG,\n+\tTARGET_MEMTAG_SET_TAG,TARGET_MEMTAG_EXTRACT_TAG,\n+\tTARGET_MEMTAG_UNTAGGED_POINTER): Document new hooks.\n+\t* doc/tm.texi.in (TARGET_MEMTAG_TAG_SIZE,TARGET_MEMTAG_GRANULE_SIZE,\n+\tTARGET_MEMTAG_INSERT_RANDOM_TAG,TARGET_MEMTAG_ADD_TAG,\n+\tTARGET_MEMTAG_SET_TAG,TARGET_MEMTAG_EXTRACT_TAG,\n+\tTARGET_MEMTAG_UNTAGGED_POINTER): Document new hooks.\n+\t* explow.c (get_dynamic_stack_base): Take new `base` argument.\n+\t* explow.h (get_dynamic_stack_base): Take new `base` argument.\n+\t* sanitizer.def (BUILT_IN_HWASAN_INIT): New.\n+\t(BUILT_IN_HWASAN_TAG_MEM): New.\n+\t* target.def (target_memtag_tag_size,target_memtag_granule_size,\n+\ttarget_memtag_insert_random_tag,target_memtag_add_tag,\n+\ttarget_memtag_set_tag,target_memtag_extract_tag,\n+\ttarget_memtag_untagged_pointer): New hooks.\n+\t* targhooks.c (HWASAN_SHIFT): New.\n+\t(HWASAN_SHIFT_RTX): New.\n+\t(default_memtag_tag_size): New default hook.\n+\t(default_memtag_granule_size): New default hook.\n+\t(default_memtag_insert_random_tag): New default hook.\n+\t(default_memtag_add_tag): New default hook.\n+\t(default_memtag_set_tag): New default hook.\n+\t(default_memtag_extract_tag): New default hook.\n+\t(default_memtag_untagged_pointer): New default hook.\n+\t* targhooks.h (default_memtag_tag_size): New default hook.\n+\t(default_memtag_granule_size): New default hook.\n+\t(default_memtag_insert_random_tag): New default hook.\n+\t(default_memtag_add_tag): New default hook.\n+\t(default_memtag_set_tag): New default hook.\n+\t(default_memtag_extract_tag): New default hook.\n+\t(default_memtag_untagged_pointer): New default hook.\n+\t* toplev.c (compile_file): Call hwasan_finish_file when finished.\n+\n+2020-11-25  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* common.opt (flag_sanitize_recover): Default for kernel\n+\thwaddress.\n+\t(static-libhwasan): New cli option.\n+\t* config/aarch64/aarch64.c (aarch64_can_tag_addresses): New.\n+\t(TARGET_MEMTAG_CAN_TAG_ADDRESSES): New.\n+\t* config/gnu-user.h (LIBHWASAN_EARLY_SPEC): hwasan equivalent of\n+\tasan command line flags.\n+\t* cppbuiltin.c (define_builtin_macros_for_compilation_flags):\n+\tAdd hwasan equivalent of __SANITIZE_ADDRESS__.\n+\t* doc/invoke.texi: Document hwasan command line flags.\n+\t* doc/tm.texi: Document new hook.\n+\t* doc/tm.texi.in: Document new hook.\n+\t* flag-types.h (enum sanitize_code): New sanitizer values.\n+\t* gcc.c (STATIC_LIBHWASAN_LIBS): New macro.\n+\t(LIBHWASAN_SPEC): New macro.\n+\t(LIBHWASAN_EARLY_SPEC): New macro.\n+\t(SANITIZER_EARLY_SPEC): Update to include hwasan.\n+\t(SANITIZER_SPEC): Update to include hwasan.\n+\t(sanitize_spec_function): Use hwasan options.\n+\t* opts.c (finish_options): Describe conflicts between address\n+\tsanitizers.\n+\t(find_sanitizer_argument): New.\n+\t(report_conflicting_sanitizer_options): New.\n+\t(sanitizer_opts): Introduce new sanitizer flags.\n+\t(common_handle_option): Add defaults for kernel sanitizer.\n+\t* params.opt (hwasan--instrument-stack): New\n+\t(hwasan-random-frame-tag): New\n+\t(hwasan-instrument-allocas): New\n+\t(hwasan-instrument-reads): New\n+\t(hwasan-instrument-writes): New\n+\t(hwasan-instrument-mem-intrinsics): New\n+\t* target.def (HOOK_PREFIX): Add new hook.\n+\t(can_tag_addresses): Add new hook under memtag prefix.\n+\t* targhooks.c (default_memtag_can_tag_addresses): New.\n+\t* targhooks.h (default_memtag_can_tag_addresses): New decl.\n+\t* toplev.c (process_options): Ensure hwasan only on\n+\tarchitectures that advertise the possibility.\n+\n+2020-11-25  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* doc/install.texi: Document new option.\n+\n+2020-11-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_maybe_expand_sve_subreg_move):\n+\tDo not optimize LRA subregs.\n+\t* config/aarch64/aarch64-sve.md\n+\t(@aarch64_pred_<SVE_INT_UNARY:optab><mode>): Tie the input to the\n+\toutput.\n+\t(@aarch64_sve_revbhw_<SVE_ALL:mode><PRED_HSD:mode>): Likewise.\n+\t(*<ANY_EXTEND:optab><SVE_PARTIAL_I:mode><SVE_HSDI:mode>2): Likewise.\n+\t(@aarch64_pred_sxt<SVE_FULL_HSDI:mode><SVE_PARTIAL_I:mode>): Likewise.\n+\t(*cnot<mode>): Likewise.\n+\t(@aarch64_pred_<SVE_COND_FP_UNARY:optab><mode>): Likewise.\n+\t(@aarch64_sve_<optab>_nontrunc<SVE_FULL_F:mode><SVE_FULL_HSDI:mode>):\n+\tLikewise.\n+\t(@aarch64_sve_<optab>_trunc<VNx2DF_ONLY:mode><VNx4SI_ONLY:mode>):\n+\tLikewise.\n+\t(@aarch64_sve_<optab>_nonextend<SVE_FULL_HSDI:mode><SVE_FULL_F:mode>):\n+\tLikewise.\n+\t(@aarch64_sve_<optab>_extend<VNx4SI_ONLY:mode><VNx2DF_ONLY:mode>):\n+\tLikewise.\n+\t(@aarch64_sve_<optab>_trunc<SVE_FULL_SDF:mode><SVE_FULL_HSF:mode>):\n+\tLikewise.\n+\t(@aarch64_sve_<optab>_trunc<VNx4SF_ONLY:mode><VNx8BF_ONLY:mode>):\n+\tLikewise.\n+\t(@aarch64_sve_<optab>_nontrunc<SVE_FULL_HSF:mode><SVE_FULL_SDF:mode>):\n+\tLikewise.\n+\t* config/aarch64/aarch64-sve2.md\n+\t(@aarch64_pred_<SVE2_COND_FP_UNARY_LONG:sve_fp_op><mode>): Likewise.\n+\t(@aarch64_pred_<SVE2_COND_FP_UNARY_NARROWB:sve_fp_op><mode>): Likewise.\n+\t(@aarch64_pred_<SVE2_U32_UNARY:sve_int_op><mode>): Likewise.\n+\t(@aarch64_pred_<SVE2_COND_INT_UNARY_FP:sve_fp_op><mode>): Likewise.\n+\n+2020-11-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/95862\n+\t* internal-fn.c (get_min_precision): For narrowing conversion, recurse\n+\ton the operand and if the operand precision is smaller than the\n+\tcurrent one, return that smaller precision.\n+\t(expand_mul_overflow): For s1 * u2 -> ur and s1 * s2 -> ur cases\n+\tif the sum of minimum precisions of both operands is smaller or equal\n+\tto the result precision, just perform normal multiplication and\n+\tset overflow to the sign bit of the multiplication result.  For\n+\tu1 * u2 -> sr if both arguments have the MSB known zero, use\n+\tnormal s1 * s2 -> sr expansion.\n+\n+2020-11-25  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cfg.c (free_block): New function.\n+\t(clear_edges): Rename to ....\n+\t(free_cfg): ... this one; also free BBs and vectors.\n+\t(expunge_block): Update comment.\n+\t* cfg.h (clear_edges): Rename to ...\n+\t(free_cfg): ... this one.\n+\t* cgraph.c (release_function_body): Use free_cfg.\n+\n+2020-11-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/97579\n+\t* gimple-isel.cc (gimple_expand_vec_cond_expr): Lower\n+\tVECTOR_BOOLEAN_TYPE_P, non-vector mode VEC_COND_EXPRs.\n+\n+2020-11-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/97943\n+\t* gimple-fold.c (clear_padding_union, clear_padding_type): Error on and\n+\tignore flexible array member fields.  Ignore fields with\n+\terror_mark_node type.\n+\n 2020-11-24  Ulrich Weigand  <ulrich.weigand@de.ibm.com>\n \n \tRevert:"}, {"sha": "2c90f2149a71ff76ccc4583604ca80c54fc1136f", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360258daf5d8d56fa4e1707aef27028546039401/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360258daf5d8d56fa4e1707aef27028546039401/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=360258daf5d8d56fa4e1707aef27028546039401", "patch": "@@ -1 +1 @@\n-20201125\n+20201126"}, {"sha": "961414c8d6e833e7f1d433e3737503bc152b01f6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360258daf5d8d56fa4e1707aef27028546039401/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360258daf5d8d56fa4e1707aef27028546039401/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=360258daf5d8d56fa4e1707aef27028546039401", "patch": "@@ -1,3 +1,205 @@\n+2020-11-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Is_Uninitialized_Aggregate): Move...\n+\t* exp_util.adb (Is_Uninitialized_Aggregate): ... here.\n+\t(Expand_Subtype_From_Expr): If the expression is an\n+\tuninitialized aggregate, capture subtype for declared object and\n+\tremove expression to suppress further superfluous expansion.\n+\n+2020-11-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_eval.adb (Subtypes_Statically_Compatible): Scalar types\n+\twith compatible static bounds are statically compatible if\n+\tpredicates are compatible, even if they are not static subtypes.\n+\tSame for private types without discriminants.\n+\n+2020-11-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch11.adb (Expand_N_Raise_Statement): Use Is_Entity_Name\n+\tconsistently in tests on the name of the statement.\n+\t* exp_prag.adb (Expand_Pragma_Check): In the local propagation\n+\tcase, wrap the raise statement in a block statement.\n+\n+2020-11-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch8.adb (Expand_N_Exception_Renaming_Declaration): Move\n+\t\"Nam\" constant after the body of a nested subprogram; change \"T\"\n+\tfrom variable to constant.\n+\n+2020-11-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* make.adb (Scan_Make_Arg): Merge ELSIF branches for -u and -U.\n+\n+2020-11-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_attributes.rst\n+\t(Has_Tagged_Values): Document based on the existing description\n+\tof Has_Access_Type and the comment for Has_Tagged_Component,\n+\twhich is where frontend evaluates this attribute.\n+\t* gnat_rm.texi: Regenerate.\n+\t* sem_attr.adb (Analyze_Attribute): Merge processing of\n+\tHas_Access_Type and Has_Tagged_Component attributes.\n+\t* sem_util.adb (Has_Access_Type): Fix casing in comment.\n+\t* sem_util.ads (Has_Tagged_Component): Remove wrong (or\n+\toutdated) comment about the use of this routine to implement the\n+\tequality operator.\n+\n+2020-11-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_Size_Attribute): Remove whitespace;\n+\tsimplify with a membership test, which are now allowed in the\n+\tfrontend code.\n+\n+2020-11-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_One_Aspect): Fix inconsistent calls to\n+\tMake_Aitem_Pragma.\n+\n+2020-11-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Check_Expr_Constants): Simplify with\n+\tIs_Named_Number.\n+\t* sem_prag.adb (Process_Convention): Likewise.\n+\n+2020-11-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_One_Aspect): Detect aspect identifiers\n+\twith membership tests.\n+\t(Check_Aspect_At_End_Of_Declarations): Likewise.\n+\t(Freeze_Entity_Checks): Likewise; a local constant is no longer\n+\tneeded.\n+\t(Is_Operational_Item): Similar simplification for attribute\n+\tidentifiers.\n+\t(Is_Type_Related_Rep_Item): Likewise.\n+\t(Resolve_Iterable_Operation): Detect names with a membership\n+\ttest.\n+\t(Validate_Independence): Replace repeated Ekind with a\n+\tmembership test.\n+\n+2020-11-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_One_Aspect): Replace duplicate of\n+\tEffective_Reads.\n+\n+2020-11-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* einfo.adb: Use composite wrappers (e.g.\n+\tIs_Subprogram_Or_Entry) and membership tests where it appears to\n+\timprove clarity.\n+\n+2020-11-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* einfo.adb (Is_Standard_Character_Type,\n+\tIs_Standard_String_Type): Simplify.\n+\t(Last_Formal): Use procedural variant of Next_Formal.\n+\n+2020-11-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* einfo.adb: Replace \"E\" with Entity_Id in local object\n+\tdeclarations.\n+\n+2020-11-25  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch2.adb (Expand_Entity_Reference): A new local predicate\n+\tIs_Object_Renaming_Name indicates whether a given expression\n+\toccurs (after looking through qualified expressions and type\n+\tconversions) as the name of an object renaming declaration. If\n+\tCurrent_Value is available but this new predicate is True, then\n+\tignore the availability of Current_Value.\n+\n+2020-11-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch12.adb (Instantiate_Type): Remove extra whitespace.\n+\t(Validate_Access_Type_Instance): Remove dead (and duplicated)\n+\tcode.\n+\n+2020-11-25  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_util.adb (Possible_Side_Effect_In_SPARK): Replace hyphen\n+\twith a space in \"side-effect\" (two instances).\n+\n+2020-11-25  Justin Squirek  <squirek@adacore.com>\n+\n+\t* doc/gnat_rm/intrinsic_subprograms.rst (Shifts and Rotates):\n+\tDocument behavior on negative numbers\n+\t* gnat_rm.texi: Regenerate.\n+\t* sem_eval.adb (Fold_Shift): Set modulus to be based on the RM\n+\tsize for non-modular integer types.\n+\n+2020-11-25  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* adaint.c (__gnat_copy_attribs): Reinstate code based on utime\n+\tfor timestamp processing on VxWorks 6.\n+\n+2020-11-25  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_util.adb (Remove_Side_Effects): Only remove side-effects\n+\tin GNATprove mode when this is useful.\n+\t* sem_res.adb (Set_Slice_Subtype): Make sure in GNATprove mode\n+\tto define the Itype when needed, so that run-time errors can be\n+\tanalyzed.\n+\t* sem_util.adb (Enclosing_Declaration): Correctly take into\n+\taccount renaming declarations.\n+\n+2020-11-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-rannum.adb (Random_Discrete): Specifically deal with\n+\tthe case where the size of the base type is larger than 64 bits.\n+\n+2020-11-25  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch3.adb (Access_Type_Declaration): Set Etype before\n+\tchecking for volatility compatibility.\n+\n+2020-11-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/g-rannum.ads (Random): New functions returning 128-bit.\n+\t* libgnat/g-rannum.adb (Random): Implement them and alphabetize.\n+\t(To_Signed): New unchecked conversion function for 128-bit.\n+\n+2020-11-25  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch7.adb (Build_Finalization_Master, Build_Finalizer,\n+\tBuild_Object_Declarations, Make_Deep_Array_Body,\n+\tWrap_Transient_Expression): Call Set_Debug_Info_Needed on\n+\ttemporaries when Debug_Generated_Code is True.\n+\n+2020-11-25  Liaiss Merzougue  <merzougue@adacore.com>\n+\n+\t* libgnat/s-imagei.adb\n+\t(Set_Digits): Rewrite the procedure to remove recursion.\n+\t(Image_Integer, Set_Image_Integer): Update assertions and remove\n+\tredundant ones.\n+\t* libgnat/s-imageu.adb\n+\t(Set_Image_Unsigned): Rewrite the procedure to remove recursion.\n+\n+2020-11-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_util.adb (Attribute_Constrained_Static_Value): Fix body\n+\tbox.\n+\t* sem_attr.adb (Eval_Attribute): Replace repeated calls to\n+\tAttribute_Name with a captured value of the Attribute_Id; also,\n+\tremove extra parens around Is_Generic_Type.\n+\n+2020-11-25  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Emit error on wrong argument\n+\tnkind.\n+\n+2020-11-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb, sem_prag.adb: Use Is_Named_Number.\n+\n+2020-11-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb, exp_util.adb: Fix style and typos in comments.\n+\n+2020-11-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): A variable that\n+\tis only incremented in the code has now type Nat; conversion is\n+\tnow unnecessary.\n+\n 2020-11-24  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* sem_prag.adb (Analyze_Global_Item): Call SPARK_Msg_NE with the"}, {"sha": "8d17c44fadf4201cda5797645ef91e3d99b6bb48", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360258daf5d8d56fa4e1707aef27028546039401/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360258daf5d8d56fa4e1707aef27028546039401/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=360258daf5d8d56fa4e1707aef27028546039401", "patch": "@@ -1,3 +1,9 @@\n+2020-11-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR bootstrap/94982\n+\t* c-attribs.c (handle_patchable_function_entry_attribute): Avoid\n+\t-Wformat-diag.\n+\n 2020-11-24  Martin Sebor  <msebor@redhat.com>\n \n \t* c-warn.c (warn_parm_array_mismatch): Avoid invalid redeclarations."}, {"sha": "16abe163584b84ced602543014753840c90989f4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360258daf5d8d56fa4e1707aef27028546039401/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360258daf5d8d56fa4e1707aef27028546039401/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=360258daf5d8d56fa4e1707aef27028546039401", "patch": "@@ -1,3 +1,20 @@\n+2020-11-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR bootstrap/94982\n+\t* constraint.cc (debug_argument_list): Avoid -Wformat-diag.\n+\t* error.c (function_category): Same.\n+\t(print_template_differences): Same.\n+\t* logic.cc (debug): Same.\n+\t* name-lookup.c (lookup_using_decl): Same.\n+\t* parser.c (maybe_add_cast_fixit): Same.\n+\t(cp_parser_template_introduction): Same.\n+\t* typeck.c (access_failure_info::add_fixit_hint): Same.\n+\n+2020-11-25  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* pt.c (tsubst_omp_clauses): Handle 'OMP_CLAUSE__CACHE_'.\n+\t(tsubst_expr): Handle 'OACC_CACHE'.\n+\n 2020-11-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/97899"}, {"sha": "34141949ce0b0fdf61ab7ad491d3257fe543243f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360258daf5d8d56fa4e1707aef27028546039401/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360258daf5d8d56fa4e1707aef27028546039401/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=360258daf5d8d56fa4e1707aef27028546039401", "patch": "@@ -1,3 +1,9 @@\n+2020-11-25  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/85796\n+\t* resolve.c (traverse_data_list): Fix copy&paste errors; catch\n+\tstep=0 in implied do loop.\n+\n 2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/97911"}, {"sha": "dafb480abe78a44ad2769d1916622bd2a1e3e75c", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360258daf5d8d56fa4e1707aef27028546039401/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360258daf5d8d56fa4e1707aef27028546039401/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=360258daf5d8d56fa4e1707aef27028546039401", "patch": "@@ -1,3 +1,10 @@\n+2020-11-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR bootstrap/94982\n+\t* jit-recording.c (recording::function::dump_to_dot): Avoid\n+\t-Wformat-diag.\n+\t(recording::block::dump_to_dot): Same.\n+\n 2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/97911"}, {"sha": "e948d754e514847b18fa0de3c65059f7f50198ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 365, "deletions": 0, "changes": 365, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360258daf5d8d56fa4e1707aef27028546039401/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360258daf5d8d56fa4e1707aef27028546039401/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=360258daf5d8d56fa4e1707aef27028546039401", "patch": "@@ -1,3 +1,368 @@\n+2020-11-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR bootstrap/94982\n+\t* c-c++-common/patchable_function_entry-error-3.c: Adjust text\n+\tof expected warning.\n+\n+2020-11-25  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/lto/modref-3_0.c: New test.\n+\t* gcc.dg/lto/modref-3_1.c: New test.\n+\t* gcc.dg/lto/modref-4_0.c: New test.\n+\t* gcc.dg/lto/modref-4_1.c: New test.\n+\t* gcc.dg/tree-ssa/modref-5.c: New test.\n+\n+2020-11-25  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/85796\n+\t* gfortran.dg/pr85796.f90: New test.\n+\n+2020-11-25  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* g++.dg/gomp/map-1.C: New.\n+\t* g++.dg/gomp/map-2.C: Likewise.\n+\t* c-c++-common/gomp/map-1.c: Adjust.\n+\t* c-c++-common/gomp/map-2.c: Likewise.\n+\n+2020-11-25  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/cache-1.c: Update.\n+\t* c-c++-common/goacc/cache-2.c: Likewise.\n+\t* g++.dg/goacc/cache-1.C: New.\n+\t* g++.dg/goacc/cache-2.C: Likewise.\n+\n+2020-11-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97956\n+\t* gcc.dg/memchr-3.c: New test.\n+\n+2020-11-25  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* c-c++-common/ubsan/sanitize-recover-7.c: Update error message format.\n+\t* lib/asan-dg.exp (asan_link_flags): Implement as a helper\n+\tfunction asan_link_flags_1 which asan_link_flags and\n+\thwasan_link_flags use.\n+\t(asan_link_flags_1): Parametrised version of asan_link_flags.\n+\t* c-c++-common/hwasan/aligned-alloc.c: New test.\n+\t* c-c++-common/hwasan/alloca-array-accessible.c: New test.\n+\t* c-c++-common/hwasan/alloca-base-init.c: New test.\n+\t* c-c++-common/hwasan/alloca-gets-different-tag.c: New test.\n+\t* c-c++-common/hwasan/alloca-outside-caught.c: New test.\n+\t* c-c++-common/hwasan/arguments-1.c: New test.\n+\t* c-c++-common/hwasan/arguments-2.c: New test.\n+\t* c-c++-common/hwasan/arguments-3.c: New test.\n+\t* c-c++-common/hwasan/arguments.c: New test.\n+\t* c-c++-common/hwasan/asan-pr63316.c: New test.\n+\t* c-c++-common/hwasan/asan-pr70541.c: New test.\n+\t* c-c++-common/hwasan/asan-pr78106.c: New test.\n+\t* c-c++-common/hwasan/asan-pr79944.c: New test.\n+\t* c-c++-common/hwasan/asan-rlimit-mmap-test-1.c: New test.\n+\t* c-c++-common/hwasan/bitfield-1.c: New test.\n+\t* c-c++-common/hwasan/bitfield-2.c: New test.\n+\t* c-c++-common/hwasan/builtin-special-handling.c: New test.\n+\t* c-c++-common/hwasan/check-interface.c: New test.\n+\t* c-c++-common/hwasan/halt_on_error-1.c: New test.\n+\t* c-c++-common/hwasan/handles-poly_int-marked-vars.c: New test.\n+\t* c-c++-common/hwasan/heap-overflow.c: New test.\n+\t* c-c++-common/hwasan/hwasan-poison-optimisation.c: New test.\n+\t* c-c++-common/hwasan/hwasan-thread-access-parent.c: New test.\n+\t* c-c++-common/hwasan/hwasan-thread-basic-failure.c: New test.\n+\t* c-c++-common/hwasan/hwasan-thread-clears-stack.c: New test.\n+\t* c-c++-common/hwasan/hwasan-thread-success.c: New test.\n+\t* c-c++-common/hwasan/kernel-defaults.c: New test.\n+\t* c-c++-common/hwasan/large-aligned-0.c: New test.\n+\t* c-c++-common/hwasan/large-aligned-1.c: New test.\n+\t* c-c++-common/hwasan/large-aligned-untagging-0.c: New test.\n+\t* c-c++-common/hwasan/large-aligned-untagging-1.c: New test.\n+\t* c-c++-common/hwasan/large-aligned-untagging-2.c: New test.\n+\t* c-c++-common/hwasan/large-aligned-untagging-3.c: New test.\n+\t* c-c++-common/hwasan/large-aligned-untagging-4.c: New test.\n+\t* c-c++-common/hwasan/large-aligned-untagging-5.c: New test.\n+\t* c-c++-common/hwasan/large-aligned-untagging-6.c: New test.\n+\t* c-c++-common/hwasan/large-aligned-untagging-7.c: New test.\n+\t* c-c++-common/hwasan/macro-definition.c: New test.\n+\t* c-c++-common/hwasan/no-sanitize-attribute.c: New test.\n+\t* c-c++-common/hwasan/param-instrument-mem-intrinsics.c: New test.\n+\t* c-c++-common/hwasan/param-instrument-reads-and-writes.c: New test.\n+\t* c-c++-common/hwasan/param-instrument-reads.c: New test.\n+\t* c-c++-common/hwasan/param-instrument-writes.c: New test.\n+\t* c-c++-common/hwasan/random-frame-tag.c: New test.\n+\t* c-c++-common/hwasan/sanity-check-pure-c.c: New test.\n+\t* c-c++-common/hwasan/setjmp-longjmp-0.c: New test.\n+\t* c-c++-common/hwasan/setjmp-longjmp-1.c: New test.\n+\t* c-c++-common/hwasan/stack-tagging-basic-0.c: New test.\n+\t* c-c++-common/hwasan/stack-tagging-basic-1.c: New test.\n+\t* c-c++-common/hwasan/stack-tagging-disable.c: New test.\n+\t* c-c++-common/hwasan/unprotected-allocas-0.c: New test.\n+\t* c-c++-common/hwasan/unprotected-allocas-1.c: New test.\n+\t* c-c++-common/hwasan/use-after-free.c: New test.\n+\t* c-c++-common/hwasan/vararray-outside-caught.c: New test.\n+\t* c-c++-common/hwasan/vararray-stack-restore-correct.c: New test.\n+\t* c-c++-common/hwasan/very-large-objects.c: New test.\n+\t* g++.dg/hwasan/hwasan.exp: New test.\n+\t* g++.dg/hwasan/rvo-handled.C: New test.\n+\t* gcc.dg/hwasan/hwasan.exp: New test.\n+\t* gcc.dg/hwasan/nested-functions-0.c: New test.\n+\t* gcc.dg/hwasan/nested-functions-1.c: New test.\n+\t* gcc.dg/hwasan/nested-functions-2.c: New test.\n+\t* lib/hwasan-dg.exp: New file.\n+\n+2020-11-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/95862\n+\t* gcc.dg/builtin-artih-overflow-5.c: Renamed to ...\n+\t* gcc.dg/builtin-arith-overflow-5.c: ... this.\n+\n+2020-11-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/asm/abs_f16.c (abs_f16_x_untied): Expect\n+\ta MOVPRFX instruction.\n+\t* gcc.target/aarch64/sve/acle/asm/abs_f32.c (abs_f32_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/abs_f64.c (abs_f64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/abs_s16.c (abs_s16_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/abs_s32.c (abs_s32_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/abs_s64.c (abs_s64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/abs_s8.c (abs_s8_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cls_s16.c (cls_s16_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cls_s32.c (cls_s32_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cls_s64.c (cls_s64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cls_s8.c (cls_s8_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/clz_s16.c (clz_s16_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/clz_s32.c (clz_s32_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/clz_s64.c (clz_s64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/clz_s8.c (clz_s8_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/clz_u16.c (clz_u16_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/clz_u32.c (clz_u32_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/clz_u64.c (clz_u64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/clz_u8.c (clz_u8_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnot_s16.c (cnot_s16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnot_s32.c (cnot_s32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnot_s64.c (cnot_s64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnot_s8.c (cnot_s8_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnot_u16.c (cnot_u16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnot_u32.c (cnot_u32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnot_u64.c (cnot_u64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnot_u8.c (cnot_u8_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnt_bf16.c (cnt_bf16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnt_f16.c (cnt_f16_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnt_f32.c (cnt_f32_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnt_f64.c (cnt_f64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnt_s16.c (cnt_s16_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnt_s32.c (cnt_s32_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnt_s64.c (cnt_s64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnt_s8.c (cnt_s8_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnt_u16.c (cnt_u16_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnt_u32.c (cnt_u32_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnt_u64.c (cnt_u64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cnt_u8.c (cnt_u8_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cvt_bf16.c (cvt_bf16_f32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/cvt_f16.c (cvt_f16_f32_x_untied)\n+\t(cvt_f16_f64_x_untied, cvt_f16_s16_x_untied, cvt_f16_s32_x_untied)\n+\t(cvt_f16_s64_x_untied, cvt_f16_u16_x_untied, cvt_f16_u32_x_untied)\n+\t(cvt_f16_u64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cvt_f32.c (cvt_f32_f16_x_untied)\n+\t(cvt_f32_f64_x_untied, cvt_f32_s16_x_untied, cvt_f32_s32_x_untied)\n+\t(cvt_f32_s64_x_untied, cvt_f32_u16_x_untied, cvt_f32_u32_x_untied)\n+\t(cvt_f32_u64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cvt_f64.c (cvt_f64_f16_x_untied)\n+\t(cvt_f64_f32_x_untied, cvt_f64_s16_x_untied, cvt_f64_s32_x_untied)\n+\t(cvt_f64_s64_x_untied, cvt_f64_u16_x_untied, cvt_f64_u32_x_untied)\n+\t(cvt_f64_u64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cvt_s16.c (cvt_s16_f16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/cvt_s32.c (cvt_s32_f16_x_untied)\n+\t(cvt_s32_f32_x_untied, cvt_s32_s64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cvt_s64.c (cvt_s64_f16_x_untied)\n+\t(cvt_s64_f32_x_untied, cvt_s64_s64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cvt_u16.c (cvt_u16_f16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/cvt_u32.c (cvt_u32_f16_x_untied)\n+\t(cvt_u32_f32_x_untied, cvt_u32_u64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/cvt_u64.c (cvt_u64_f16_x_untied)\n+\t(cvt_u64_f32_x_untied, cvt_u64_u64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/extb_s16.c (extb_s16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/extb_s32.c (extb_s32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/extb_s64.c (extb_s64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/exth_s32.c (exth_s32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/exth_s64.c (exth_s64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/extw_s64.c (extw_s64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/neg_f16.c (neg_f16_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/neg_f32.c (neg_f32_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/neg_f64.c (neg_f64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/neg_s16.c (neg_s16_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/neg_s32.c (neg_s32_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/neg_s64.c (neg_s64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/neg_s8.c (neg_s8_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/not_s16.c (not_s16_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/not_s32.c (not_s32_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/not_s64.c (not_s64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/not_s8.c (not_s8_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/not_u16.c (not_u16_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/not_u32.c (not_u32_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/not_u64.c (not_u64_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/not_u8.c (not_u8_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/rbit_s16.c (rbit_s16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rbit_s32.c (rbit_s32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rbit_s64.c (rbit_s64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rbit_s8.c (rbit_s8_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/rbit_u16.c (rbit_u16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rbit_u32.c (rbit_u32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rbit_u64.c (rbit_u64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rbit_u8.c (rbit_u8_x_untied): Ditto.\n+\t* gcc.target/aarch64/sve/acle/asm/recpx_f16.c (recpx_f16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/recpx_f32.c (recpx_f32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/recpx_f64.c (recpx_f64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/revb_s16.c (revb_s16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/revb_s32.c (revb_s32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/revb_s64.c (revb_s64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/revb_u16.c (revb_u16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/revb_u32.c (revb_u32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/revb_u64.c (revb_u64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/revh_s32.c (revh_s32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/revh_s64.c (revh_s64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/revh_u32.c (revh_u32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/revh_u64.c (revh_u64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/revw_s64.c (revw_s64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/revw_u64.c (revw_u64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rinta_f16.c (rinta_f16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rinta_f32.c (rinta_f32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rinta_f64.c (rinta_f64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rinti_f16.c (rinti_f16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rinti_f32.c (rinti_f32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rinti_f64.c (rinti_f64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rintm_f16.c (rintm_f16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rintm_f32.c (rintm_f32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rintm_f64.c (rintm_f64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rintn_f16.c (rintn_f16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rintn_f32.c (rintn_f32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rintn_f64.c (rintn_f64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rintp_f16.c (rintp_f16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rintp_f32.c (rintp_f32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rintp_f64.c (rintp_f64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rintx_f16.c (rintx_f16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rintx_f32.c (rintx_f32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rintx_f64.c (rintx_f64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rintz_f16.c (rintz_f16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rintz_f32.c (rintz_f32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/rintz_f64.c (rintz_f64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/sqrt_f16.c (sqrt_f16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/sqrt_f32.c (sqrt_f32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve/acle/asm/sqrt_f64.c (sqrt_f64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve2/acle/asm/cvtx_f32.c (cvtx_f32_f64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve2/acle/asm/logb_f16.c (logb_f16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve2/acle/asm/logb_f32.c (logb_f32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve2/acle/asm/logb_f64.c (logb_f64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve2/acle/asm/qabs_s16.c (qabs_s16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve2/acle/asm/qabs_s32.c (qabs_s32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve2/acle/asm/qabs_s64.c (qabs_s64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve2/acle/asm/qabs_s8.c (qabs_s8_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve2/acle/asm/qneg_s16.c (qneg_s16_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve2/acle/asm/qneg_s32.c (qneg_s32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve2/acle/asm/qneg_s64.c (qneg_s64_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve2/acle/asm/qneg_s8.c (qneg_s8_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve2/acle/asm/recpe_u32.c (recpe_u32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve2/acle/asm/rsqrte_u32.c (rsqrte_u32_x_untied):\n+\tDitto.\n+\t* gcc.target/aarch64/sve2/acle/asm/cvtlt_f32.c\n+\t(cvtlt_f32_f16_x_untied): Expect a MOV instruction.\n+\t* gcc.target/aarch64/sve2/acle/asm/cvtlt_f64.c\n+\t(cvtlt_f64_f32_x_untied): Likewise.\n+\n+2020-11-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/95862\n+\t* gcc.dg/builtin-artih-overflow-5.c: New test.\n+\n+2020-11-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/97579\n+\t* gcc.dg/pr97579.c: New testcase.\n+\n+2020-11-25  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\tPR target/91816\n+\t* gcc.target/arm/pr91816.c: New test.\n+\n+2020-11-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/97943\n+\t* c-c++-common/builtin-clear-padding-2.c: New test.\n+\t* c-c++-common/builtin-clear-padding-3.c: New test.\n+\t* g++.dg/ext/builtin-clear-padding-1.C: New test.\n+\t* gcc.dg/builtin-clear-padding-2.c: New test.\n+\n 2020-11-24  Martin Sebor  <msebor@redhat.com>\n \n \t* gcc.dg/pr97955.c: New test."}, {"sha": "6127fbf804ed095452d0f2119b4c7af3ceb15d38", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360258daf5d8d56fa4e1707aef27028546039401/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360258daf5d8d56fa4e1707aef27028546039401/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=360258daf5d8d56fa4e1707aef27028546039401", "patch": "@@ -1,3 +1,9 @@\n+2020-11-25  Stefan Kanthak  <stefan.kanthak@nexgo.de>\n+\n+\t* libgcc2.c (absvSI2): Simplify/improve implementation by using\n+\tbuiltin_add_overflow.\n+\t(absvsi2, absvDI2): Likewise.\n+\n 2020-11-20  Maciej W. Rozycki  <macro@linux-mips.org>\n \n \t* unwind-dw2-fde-dip.c [__OpenBSD__ || __NetBSD__]"}, {"sha": "6a7151e4ca33fd235122cdd1c2c678e3c76f6a3a", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360258daf5d8d56fa4e1707aef27028546039401/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360258daf5d8d56fa4e1707aef27028546039401/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=360258daf5d8d56fa4e1707aef27028546039401", "patch": "@@ -1,3 +1,13 @@\n+2020-11-25  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c++/cache-1.C: New.\n+\t* testsuite/libgomp.oacc-c-c++-common/cache-1.c: Update.\n+\n+2020-11-25  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/atomic_capture-1.f90 (main): Adjust\n+\texpected results.\n+\n 2020-11-24  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* plugin/plugin-gcn.c: Don't redefine relocations if elf.h has them."}, {"sha": "ccc8a0e0fc50f0770c44cb643e20118c1566eb3c", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360258daf5d8d56fa4e1707aef27028546039401/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360258daf5d8d56fa4e1707aef27028546039401/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=360258daf5d8d56fa4e1707aef27028546039401", "patch": "@@ -1,3 +1,8 @@\n+2020-11-25  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* configure: Regenerate.\n+\t* configure.ac: Avoid using sanitizer.\n+\n 2020-11-13  Eduard-Mihai Burtescu  <eddyb@lyken.rs>\n \n \t* rust-demangle.c (struct rust_demangler): Add"}, {"sha": "3515cfffc80a66a7c143e07ae1d6025e4a63e52d", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360258daf5d8d56fa4e1707aef27028546039401/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360258daf5d8d56fa4e1707aef27028546039401/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=360258daf5d8d56fa4e1707aef27028546039401", "patch": "@@ -1,3 +1,34 @@\n+2020-11-25  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* LOCAL_PATCHES: Add one commit.\n+\n+2020-11-25  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* Makefile.am: Condition Build hwasan directory.\n+\t* Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Set HWASAN_SUPPORTED based on target\n+\tarchitecture.\n+\t* configure.tgt: Likewise.\n+\n+2020-11-25  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* Makefile.am:  Build libhwasan.\n+\t* Makefile.in:  Build libhwasan.\n+\t* asan/Makefile.in:  Build libhwasan.\n+\t* configure:  Build libhwasan.\n+\t* configure.ac:  Build libhwasan.\n+\t* hwasan/Makefile.am: New file.\n+\t* hwasan/Makefile.in: New file.\n+\t* hwasan/libtool-version: New file.\n+\t* interception/Makefile.in: Build libhwasan.\n+\t* libbacktrace/Makefile.in: Build libhwasan.\n+\t* libsanitizer.spec.in: Build libhwasan.\n+\t* lsan/Makefile.in: Build libhwasan.\n+\t* sanitizer_common/Makefile.in: Build libhwasan.\n+\t* tsan/Makefile.in: Build libhwasan.\n+\t* ubsan/Makefile.in: Build libhwasan.\n+\n 2020-11-21  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* configure.tgt: Allow x86_64 Darwin2x."}, {"sha": "b73cddb8b24bf9e3f7abb02e6efb94b42e1895bd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360258daf5d8d56fa4e1707aef27028546039401/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360258daf5d8d56fa4e1707aef27028546039401/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=360258daf5d8d56fa4e1707aef27028546039401", "patch": "@@ -1,3 +1,77 @@\n+2020-11-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/atomic_timed_wait.h (__cond_wait_until): Do not\n+\tperform redundant conversions to the same clock.\n+\n+2020-11-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/atomic_timed_wait.h (__cond_wait_until_impl):\n+\tDo not define when _GLIBCXX_HAVE_LINUX_FUTEX is defined. Use\n+\t__condvar and mutex instead of __gthread_cond_t and\n+\tunique_lock<mutex>.\n+\t(__cond_wait_until): Likewise. Fix test for return value of\n+\t__cond_wait_until_impl.\n+\t(__timed_waiters::_M_do_wait_until): Use __condvar instead\n+\tof __gthread_cond_t.\n+\t* include/bits/atomic_wait.h: Remove <bits/unique_lock.h>\n+\tinclude. Only include <bits/std_mutex.h> if not using futexes.\n+\t(__platform_wait_max_value): Remove unused variable.\n+\t(__waiters::lock_t): Use lock_guard instead of unique_lock.\n+\t(__waiters::_M_cv): Use __condvar instead of __gthread_cond_t.\n+\t(__waiters::_M_do_wait(__platform_wait_t)): Likewise.\n+\t(__waiters::_M_notify()): Likewise. Use notify_one() if not\n+\tasked to notify all.\n+\t* include/bits/std_mutex.h (__condvar): New type.\n+\t* include/std/condition_variable (condition_variable::_M_cond)\n+\t(condition_variable::wait_until): Use __condvar instead of\n+\t__gthread_cond_t.\n+\t* src/c++11/condition_variable.cc (condition_variable): Define\n+\tdefault constructor and destructor as defaulted.\n+\t(condition_variable::wait, condition_variable::notify_one)\n+\t(condition_variable::notify_all): Forward to corresponding\n+\tmember function of __condvar.\n+\n+2020-11-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97936\n+\t* testsuite/29_atomics/atomic/wait_notify/bool.cc: Re-eneable\n+\ttest.\n+\t* testsuite/29_atomics/atomic/wait_notify/generic.cc: Likewise.\n+\t* testsuite/29_atomics/atomic/wait_notify/pointers.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_flag/wait_notify/1.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_float/wait_notify.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_integral/wait_notify.cc: Likewise.\n+\t* testsuite/util/atomic/wait_notify_util.h: Fix missed\n+\tnotifications by making the new thread wait until the parent\n+\tthread is waiting on the condition variable.\n+\n+2020-11-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97935\n+\t* include/bits/iterator_concepts.h (__detail::__iter_without_category):\n+\tNew helper concept.\n+\t(__iterator_traits::__cat): Use __detail::__iter_without_category.\n+\t* testsuite/24_iterators/associated_types/iterator.traits.cc: New test.\n+\n+2020-11-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/17_intro/names.cc: Do not test 'v' on AIX.\n+\n+2020-11-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97936\n+\t* include/bits/atomic_wait.h (__platform_wait): Check errno,\n+\tnot just the value of EAGAIN.\n+\t(__waiters::__waiters()): Fix name of data member.\n+\n+2020-11-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97936\n+\t* include/bits/atomic_wait.h (__platform_wait): Return if futex\n+\tsets EAGAIN.\n+\t* testsuite/30_threads/latch/3.cc: Re-enable test.\n+\t* testsuite/30_threads/semaphore/try_acquire_until.cc: Likewise.\n+\n 2020-11-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/97936"}, {"sha": "17414a152c87a113f54beb1c6cd4448116f0423b", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360258daf5d8d56fa4e1707aef27028546039401/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360258daf5d8d56fa4e1707aef27028546039401/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=360258daf5d8d56fa4e1707aef27028546039401", "patch": "@@ -1,3 +1,8 @@\n+2020-11-25  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* Makefile.am: Avoid using sanitizer.\n+\t* Makefile.in: Regenerate.\n+\n 2020-09-10  Jonathan Yong  <10walls@gmail.com>\n \n \t* Makefile.am: drop versioning from libtool completely."}]}