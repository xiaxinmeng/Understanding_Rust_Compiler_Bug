{"sha": "3ce5fa4fa606357251b653f66fbef96fdfcbea2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NlNWZhNGZhNjA2MzU3MjUxYjY1M2Y2NmZiZWY5NmZkZmNiZWEyZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-10-12T18:07:43Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-10-12T18:07:43Z"}, "message": "re PR c++/23797 (ICE on typename outside template)\n\ncp:\n\tPR c++/23797\n\t* parser.c (cp_parser_functional_cast): Cope when TYPE is not a\n\tTYPE_DECL.  Use dependent_type_p to check type.\n\t* pt.c (uses_template_parms_p): Use dependent_type_p for a\n\tTYPE_DECL.\n\t(type_dependent_expression_p): Assert we've not been given a\n\tTYPE_DECL.\ntestsuite:\n\tPR c++/23797\n\t* g++.dg/other/typename8.C: New.\n\nFrom-SVN: r105312", "tree": {"sha": "942011e89513616498985f2c0177369f00dd00a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/942011e89513616498985f2c0177369f00dd00a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ce5fa4fa606357251b653f66fbef96fdfcbea2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce5fa4fa606357251b653f66fbef96fdfcbea2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce5fa4fa606357251b653f66fbef96fdfcbea2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce5fa4fa606357251b653f66fbef96fdfcbea2f/comments", "author": null, "committer": null, "parents": [{"sha": "51b15ede491940fcc66789e704474a67387ae705", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51b15ede491940fcc66789e704474a67387ae705", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51b15ede491940fcc66789e704474a67387ae705"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "d6dad42f712e28916c462343f1df13ccdfbd7389", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce5fa4fa606357251b653f66fbef96fdfcbea2f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce5fa4fa606357251b653f66fbef96fdfcbea2f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3ce5fa4fa606357251b653f66fbef96fdfcbea2f", "patch": "@@ -1,5 +1,13 @@\n 2005-10-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR c++/23797\n+\t* parser.c (cp_parser_functional_cast): Cope when TYPE is not a\n+\tTYPE_DECL.  Use dependent_type_p to check type.\n+\t* pt.c (uses_template_parms_p): Use dependent_type_p for a\n+\tTYPE_DECL.\n+\t(type_dependent_expression_p): Assert we've not been given a\n+\tTYPE_DECL.\n+\n \tPR c++/21117\n \t* decl.c (check_function_type): Correctly overwrite incomplete\n \treturn type with void type."}, {"sha": "469cc73699f1045a03dd955418774d58a98f84c3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce5fa4fa606357251b653f66fbef96fdfcbea2f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce5fa4fa606357251b653f66fbef96fdfcbea2f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=3ce5fa4fa606357251b653f66fbef96fdfcbea2f", "patch": "@@ -3956,6 +3956,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p)\n \n \t/* Consume the `typename' token.  */\n \tcp_lexer_consume_token (parser->lexer);\n+\n \t/* Look for the optional `::' operator.  */\n \tcp_parser_global_scope_opt (parser,\n \t\t\t\t    /*current_scope_valid_p=*/false);\n@@ -15355,8 +15356,10 @@ cp_parser_functional_cast (cp_parser* parser, tree type)\n   cast = build_functional_cast (type, expression_list);\n   /* [expr.const]/1: In an integral constant expression \"only type\n      conversions to integral or enumeration type can be used\".  */\n-  if (cast != error_mark_node && !type_dependent_expression_p (type)\n-      && !INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (type)))\n+  if (TREE_CODE (type) == TYPE_DECL)\n+    type = TREE_TYPE (type);\n+  if (cast != error_mark_node && !dependent_type_p (type)\n+      && !INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n     {\n       if (cp_parser_non_integral_constant_expression\n \t  (parser, \"a call to a constructor\"))"}, {"sha": "020d819488a6962f59429c53be610e06a71968a8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce5fa4fa606357251b653f66fbef96fdfcbea2f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce5fa4fa606357251b653f66fbef96fdfcbea2f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3ce5fa4fa606357251b653f66fbef96fdfcbea2f", "patch": "@@ -4982,6 +4982,8 @@ uses_template_parms (tree t)\n   else if (TREE_CODE (t) == TREE_LIST)\n     dependent_p = (uses_template_parms (TREE_VALUE (t))\n \t\t   || uses_template_parms (TREE_CHAIN (t)));\n+  else if (TREE_CODE (t) == TYPE_DECL)\n+    dependent_p = dependent_type_p (TREE_TYPE (t));\n   else if (DECL_P (t)\n \t   || EXPR_P (t)\n \t   || TREE_CODE (t) == TEMPLATE_PARM_INDEX\n@@ -12442,6 +12444,8 @@ type_dependent_expression_p (tree expression)\n       return false;\n     }\n \n+  gcc_assert (TREE_CODE (expression) != TYPE_DECL);\n+  \n   return (dependent_type_p (TREE_TYPE (expression)));\n }\n "}, {"sha": "1f416b691327355833e93c147d0f60b35800d964", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce5fa4fa606357251b653f66fbef96fdfcbea2f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce5fa4fa606357251b653f66fbef96fdfcbea2f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ce5fa4fa606357251b653f66fbef96fdfcbea2f", "patch": "@@ -1,5 +1,8 @@\n 2005-10-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR c++/23797\n+\t* g++.dg/other/typename8.C: New.\n+\n \tPR c++/21117\n \t* g++.dg/other/return1.C: New.\n "}, {"sha": "413e954daebe0ba76dfe2db57a0b1c133ae00fdf", "filename": "gcc/testsuite/g++.dg/parse/typename8.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce5fa4fa606357251b653f66fbef96fdfcbea2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce5fa4fa606357251b653f66fbef96fdfcbea2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename8.C?ref=3ce5fa4fa606357251b653f66fbef96fdfcbea2f", "patch": "@@ -0,0 +1,9 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 12 Oct 2005 <nathan@codesourcery.com>\n+\n+// PR 23797:ICE\n+// Origin:  Volker Reichelt <reichelt@gcc.gnu.org>\n+\n+struct A { typedef int X; };\n+\n+int i = typename A::X();"}]}