{"sha": "247c45b265ff85428aafb7cfcf6f968936ad48f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ3YzQ1YjI2NWZmODU0MjhhYWZiN2NmY2Y2Zjk2ODkzNmFkNDhmMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-12-21T13:30:58Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-12-21T13:30:58Z"}, "message": "re PR target/88556 (Inline built-in sinh, cosh, tanh for -ffast-math)\n\n\tPR target/88556\n\t* internal-fn.def (COSH): New.\n\t(SINH): Ditto.\n\t(TANH): Ditto.\n\t* optabs.def (cosh_optab): New.\n\t(sinh_optab): Ditto.\n\t(tanh_optab): Ditto.\n\t* config/i386/i386-protos.h (ix86_emit_i387_sinh): New prototype.\n\t(ix86_emit_i387_cosh): Ditto.\n\t(ix86_emit_i387_tanh): Ditto.\n\t* config/i386/i386.c (ix86_emit_i387_sinh): New function.\n\t(ix86_emit_i387_cosh): Ditto.\n\t(ix86_emit_i387_tanh): Ditto.\n\t* config/i386/i386.md (sinhxf2): New expander.\n\t(sinh<mode>2):\tDitto.\n\t(coshxf2): Ditto.\n\t(cosh<mode>2): Ditto.\n\t(tanhxf2): Ditto.\n\t(tanh<mode>2): Ditto.\n\nFrom-SVN: r267325", "tree": {"sha": "a5a129f25fa82b46540ceb6d1cd01d33d19bbf28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5a129f25fa82b46540ceb6d1cd01d33d19bbf28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/247c45b265ff85428aafb7cfcf6f968936ad48f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247c45b265ff85428aafb7cfcf6f968936ad48f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/247c45b265ff85428aafb7cfcf6f968936ad48f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247c45b265ff85428aafb7cfcf6f968936ad48f3/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6aa698aa4dce009886b4c793b6aefe2d8977ef9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa698aa4dce009886b4c793b6aefe2d8977ef9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa698aa4dce009886b4c793b6aefe2d8977ef9d"}], "stats": {"total": 232, "additions": 231, "deletions": 1}, "files": [{"sha": "c7738e8528b00fe8a2e6210c9c531c9661d9bc5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247c45b265ff85428aafb7cfcf6f968936ad48f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247c45b265ff85428aafb7cfcf6f968936ad48f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=247c45b265ff85428aafb7cfcf6f968936ad48f3", "patch": "@@ -1,3 +1,25 @@\n+2018-12-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/88556\n+\t* internal-fn.def (COSH): New.\n+\t(SINH): Ditto.\n+\t(TANH): Ditto.\n+\t* optabs.def (cosh_optab): New.\n+\t(sinh_optab): Ditto.\n+\t(tanh_optab): Ditto.\n+\t* config/i386/i386-protos.h (ix86_emit_i387_sinh): New prototype.\n+\t(ix86_emit_i387_cosh): Ditto.\n+\t(ix86_emit_i387_tanh): Ditto.\n+\t* config/i386/i386.c (ix86_emit_i387_sinh): New function.\n+\t(ix86_emit_i387_cosh): Ditto.\n+\t(ix86_emit_i387_tanh): Ditto.\n+\t* config/i386/i386.md (sinhxf2): New expander.\n+\t(sinh<mode>2):\tDitto.\n+\t(coshxf2): Ditto.\n+\t(cosh<mode>2): Ditto.\n+\t(tanhxf2): Ditto.\n+\t(tanh<mode>2): Ditto.\n+\n 2018-12-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/88547"}, {"sha": "1e802bac1eaa4cab3c6c68e3b87080d5f6a12a4d", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247c45b265ff85428aafb7cfcf6f968936ad48f3/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247c45b265ff85428aafb7cfcf6f968936ad48f3/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=247c45b265ff85428aafb7cfcf6f968936ad48f3", "patch": "@@ -170,6 +170,9 @@ extern void x86_function_profiler (FILE *, int);\n extern void x86_emit_floatuns (rtx [2]);\n extern void ix86_emit_fp_unordered_jump (rtx);\n \n+extern void ix86_emit_i387_sinh (rtx, rtx);\n+extern void ix86_emit_i387_cosh (rtx, rtx);\n+extern void ix86_emit_i387_tanh (rtx, rtx);\n extern void ix86_emit_i387_asinh (rtx, rtx);\n extern void ix86_emit_i387_acosh (rtx, rtx);\n extern void ix86_emit_i387_atanh (rtx, rtx);"}, {"sha": "61dbc95c086fd52b6dbe32fdc17fe024e51bf351", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 117, "deletions": 1, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247c45b265ff85428aafb7cfcf6f968936ad48f3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247c45b265ff85428aafb7cfcf6f968936ad48f3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=247c45b265ff85428aafb7cfcf6f968936ad48f3", "patch": "@@ -44380,6 +44380,122 @@ ix86_emit_fp_unordered_jump (rtx label)\n   JUMP_LABEL (insn) = label;\n }\n \n+/* Output code to perform an sinh XFmode calculation.  */\n+\n+void ix86_emit_i387_sinh (rtx op0, rtx op1)\n+{\n+  rtx e1 = gen_reg_rtx (XFmode);\n+  rtx e2 = gen_reg_rtx (XFmode);\n+  rtx scratch = gen_reg_rtx (HImode);\n+  rtx flags = gen_rtx_REG (CCNOmode, FLAGS_REG);\n+  rtx half = const_double_from_real_value (dconsthalf, XFmode);\n+  rtx cst1, tmp;\n+  rtx_code_label *jump_label = gen_label_rtx ();\n+  rtx_insn *insn;\n+\n+  /* scratch = fxam (op1) */\n+  emit_insn (gen_fxamxf2_i387 (scratch, op1));\n+\n+  /* e1 = expm1 (|op1|) */\n+  emit_insn (gen_absxf2 (e2, op1));\n+  emit_insn (gen_expm1xf2 (e1, e2));\n+\n+  /* e2 = e1 / (e1 + 1.0) + e1 */\n+  cst1 = force_reg (XFmode, CONST1_RTX (XFmode));\n+  emit_insn (gen_addxf3 (e2, e1, cst1));\n+  emit_insn (gen_divxf3 (e2, e1, e2));\n+  emit_insn (gen_addxf3 (e2, e2, e1));\n+\n+  /* flags = signbit (op1) */\n+  emit_insn (gen_testqi_ext_1_ccno (scratch, GEN_INT (0x02)));\n+\n+  /* if (flags) then e2 = -e2 */\n+  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode,\n+\t\t\t      gen_rtx_EQ (VOIDmode, flags, const0_rtx),\n+\t\t\t      gen_rtx_LABEL_REF (VOIDmode, jump_label),\n+\t\t\t      pc_rtx);\n+  insn = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n+  predict_jump (REG_BR_PROB_BASE * 50 / 100);\n+  JUMP_LABEL (insn) = jump_label;\n+\n+  emit_insn (gen_negxf2 (e2, e2));\n+\n+  emit_label (jump_label);\n+  LABEL_NUSES (jump_label) = 1;\n+\n+  /* op0 = 0.5 * e2 */\n+  half = force_reg (XFmode, half);\n+  emit_insn (gen_mulxf3 (op0, e2, half));\n+}\n+\n+/* Output code to perform an cosh XFmode calculation.  */\n+\n+void ix86_emit_i387_cosh (rtx op0, rtx op1)\n+{\n+  rtx e1 = gen_reg_rtx (XFmode);\n+  rtx e2 = gen_reg_rtx (XFmode);\n+  rtx half = const_double_from_real_value (dconsthalf, XFmode);\n+  rtx cst1;\n+\n+  /* e1 = exp (op1) */\n+  emit_insn (gen_expxf2 (e1, op1));\n+\n+  /* e2 = e1 + 1.0 / e1 */\n+  cst1 = force_reg (XFmode, CONST1_RTX (XFmode));\n+  emit_insn (gen_divxf3 (e2, cst1, e1));\n+  emit_insn (gen_addxf3 (e2, e1, e2));\n+\n+  /* op0 = 0.5 * e2 */\n+  half = force_reg (XFmode, half);\n+  emit_insn (gen_mulxf3 (op0, e2, half));\n+}\n+\n+/* Output code to perform an tanh XFmode calculation.  */\n+\n+void ix86_emit_i387_tanh (rtx op0, rtx op1)\n+{\n+  rtx e1 = gen_reg_rtx (XFmode);\n+  rtx e2 = gen_reg_rtx (XFmode);\n+  rtx scratch = gen_reg_rtx (HImode);\n+  rtx flags = gen_rtx_REG (CCNOmode, FLAGS_REG);\n+  rtx cst2, tmp;\n+  rtx_code_label *jump_label = gen_label_rtx ();\n+  rtx_insn *insn;\n+\n+  /* scratch = fxam (op1) */\n+  emit_insn (gen_fxamxf2_i387 (scratch, op1));\n+\n+  /* e1 = expm1 (-|2 * op1|) */\n+  emit_insn (gen_addxf3 (e2, op1, op1));\n+  emit_insn (gen_absxf2 (e2, e2));\n+  emit_insn (gen_negxf2 (e2, e2));\n+  emit_insn (gen_expm1xf2 (e1, e2));\n+\n+  /* e2 = e1 / (e1 + 2.0) */\n+  cst2 = force_reg (XFmode, CONST2_RTX (XFmode));\n+  emit_insn (gen_addxf3 (e2, e1, cst2));\n+  emit_insn (gen_divxf3 (e2, e1, e2));\n+\n+  /* flags = signbit (op1) */\n+  emit_insn (gen_testqi_ext_1_ccno (scratch, GEN_INT (0x02)));\n+\n+  /* if (!flags) then e2 = -e2 */\n+  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode,\n+\t\t\t      gen_rtx_NE (VOIDmode, flags, const0_rtx),\n+\t\t\t      gen_rtx_LABEL_REF (VOIDmode, jump_label),\n+\t\t\t      pc_rtx);\n+  insn = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n+  predict_jump (REG_BR_PROB_BASE * 50 / 100);\n+  JUMP_LABEL (insn) = jump_label;\n+\n+  emit_insn (gen_negxf2 (e2, e2));\n+\n+  emit_label (jump_label);\n+  LABEL_NUSES (jump_label) = 1;\n+\n+  emit_move_insn (op0, e2);\n+}\n+\n /* Output code to perform an asinh XFmode calculation.  */\n \n void ix86_emit_i387_asinh (rtx op0, rtx op1)\n@@ -44504,7 +44620,7 @@ void ix86_emit_i387_atanh (rtx op0, rtx op1)\n   emit_label (jump_label);\n   LABEL_NUSES (jump_label) = 1;\n \n-  /* op0 = 0.5 * e2) */\n+  /* op0 = 0.5 * e2 */\n   half = force_reg (XFmode, half);\n   emit_insn (gen_mulxf3 (op0, e2, half));\n }"}, {"sha": "b2d27faa4fd97a5b2eeb710a06cd68702df3da1f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247c45b265ff85428aafb7cfcf6f968936ad48f3/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247c45b265ff85428aafb7cfcf6f968936ad48f3/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=247c45b265ff85428aafb7cfcf6f968936ad48f3", "patch": "@@ -15483,6 +15483,89 @@\n   DONE;\n })\n \n+(define_expand \"sinhxf2\"\n+  [(use (match_operand:XF 0 \"register_operand\"))\n+   (use (match_operand:XF 1 \"register_operand\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && flag_finite_math_only\n+   && flag_unsafe_math_optimizations\"\n+{\n+  ix86_emit_i387_sinh (operands[0], operands[1]);\n+  DONE;\n+})\n+\n+(define_expand \"sinh<mode>2\"\n+  [(use (match_operand:MODEF 0 \"register_operand\"))\n+   (use (match_operand:MODEF 1 \"general_operand\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+       || TARGET_MIX_SSE_I387)\n+   && flag_finite_math_only\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+\n+  emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n+  emit_insn (gen_sinhxf2 (op0, op1));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n+  DONE;\n+})\n+\n+(define_expand \"coshxf2\"\n+  [(use (match_operand:XF 0 \"register_operand\"))\n+   (use (match_operand:XF 1 \"register_operand\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  ix86_emit_i387_cosh (operands[0], operands[1]);\n+  DONE;\n+})\n+\n+(define_expand \"cosh<mode>2\"\n+  [(use (match_operand:MODEF 0 \"register_operand\"))\n+   (use (match_operand:MODEF 1 \"general_operand\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+       || TARGET_MIX_SSE_I387)\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+\n+  emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n+  emit_insn (gen_coshxf2 (op0, op1));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n+  DONE;\n+})\n+\n+(define_expand \"tanhxf2\"\n+  [(use (match_operand:XF 0 \"register_operand\"))\n+   (use (match_operand:XF 1 \"register_operand\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  ix86_emit_i387_tanh (operands[0], operands[1]);\n+  DONE;\n+})\n+\n+(define_expand \"tanh<mode>2\"\n+  [(use (match_operand:MODEF 0 \"register_operand\"))\n+   (use (match_operand:MODEF 1 \"general_operand\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+       || TARGET_MIX_SSE_I387)\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+\n+  emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n+  emit_insn (gen_tanhxf2 (op0, op1));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n+  DONE;\n+})\n+\n (define_expand \"asinhxf2\"\n   [(use (match_operand:XF 0 \"register_operand\"))\n    (use (match_operand:XF 1 \"register_operand\"))]"}, {"sha": "a7e7db68d9beeb92b58d1ee4a7b02caf29ddea8c", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247c45b265ff85428aafb7cfcf6f968936ad48f3/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247c45b265ff85428aafb7cfcf6f968936ad48f3/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=247c45b265ff85428aafb7cfcf6f968936ad48f3", "patch": "@@ -207,6 +207,7 @@ DEF_INTERNAL_FLT_FN (ASINH, ECF_CONST, asinh, unary)\n DEF_INTERNAL_FLT_FN (ATAN, ECF_CONST, atan, unary)\n DEF_INTERNAL_FLT_FN (ATANH, ECF_CONST, atanh, unary)\n DEF_INTERNAL_FLT_FN (COS, ECF_CONST, cos, unary)\n+DEF_INTERNAL_FLT_FN (COSH, ECF_CONST, cosh, unary)\n DEF_INTERNAL_FLT_FN (EXP, ECF_CONST, exp, unary)\n DEF_INTERNAL_FLT_FN (EXP10, ECF_CONST, exp10, unary)\n DEF_INTERNAL_FLT_FN (EXP2, ECF_CONST, exp2, unary)\n@@ -218,8 +219,10 @@ DEF_INTERNAL_FLT_FN (LOG2, ECF_CONST, log2, unary)\n DEF_INTERNAL_FLT_FN (LOGB, ECF_CONST, logb, unary)\n DEF_INTERNAL_FLT_FN (SIGNIFICAND, ECF_CONST, significand, unary)\n DEF_INTERNAL_FLT_FN (SIN, ECF_CONST, sin, unary)\n+DEF_INTERNAL_FLT_FN (SINH, ECF_CONST, sinh, unary)\n DEF_INTERNAL_FLT_FLOATN_FN (SQRT, ECF_CONST, sqrt, unary)\n DEF_INTERNAL_FLT_FN (TAN, ECF_CONST, tan, unary)\n+DEF_INTERNAL_FLT_FN (TANH, ECF_CONST, tanh, unary)\n \n /* FP rounding.  */\n DEF_INTERNAL_FLT_FLOATN_FN (CEIL, ECF_CONST, ceil, unary)"}, {"sha": "7d65ab89074d08307714e37b97a2a4a46dd31bc2", "filename": "gcc/optabs.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247c45b265ff85428aafb7cfcf6f968936ad48f3/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247c45b265ff85428aafb7cfcf6f968936ad48f3/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=247c45b265ff85428aafb7cfcf6f968936ad48f3", "patch": "@@ -282,6 +282,7 @@ OPTAB_D (atanh_optab, \"atanh$a2\")\n OPTAB_D (copysign_optab, \"copysign$F$a3\")\n OPTAB_D (xorsign_optab, \"xorsign$F$a3\")\n OPTAB_D (cos_optab, \"cos$a2\")\n+OPTAB_D (cosh_optab, \"cosh$a2\")\n OPTAB_D (exp10_optab, \"exp10$a2\")\n OPTAB_D (exp2_optab, \"exp2$a2\")\n OPTAB_D (exp_optab, \"exp$a2\")\n@@ -304,7 +305,9 @@ OPTAB_D (signbit_optab, \"signbit$F$a2\")\n OPTAB_D (significand_optab, \"significand$a2\")\n OPTAB_D (sin_optab, \"sin$a2\")\n OPTAB_D (sincos_optab, \"sincos$a3\")\n+OPTAB_D (sinh_optab, \"sinh$a2\")\n OPTAB_D (tan_optab, \"tan$a2\")\n+OPTAB_D (tanh_optab, \"tanh$a2\")\n \n /* C99 implementations of fmax/fmin.  */\n OPTAB_D (fmax_optab, \"fmax$a3\")"}]}