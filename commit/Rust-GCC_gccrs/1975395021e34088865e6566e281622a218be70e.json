{"sha": "1975395021e34088865e6566e281622a218be70e", "node_id": "C_kwDOANBUbNoAKDE5NzUzOTUwMjFlMzQwODg4NjVlNjU2NmUyODE2MjJhMjE4YmU3MGU", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-10-14T15:35:41Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-10-14T15:35:41Z"}, "message": "arm: Remove add_stmt_cost hook\n\nThe arm implementation of add_stmt_cost was added alongside\narm_builtin_vectorization_cost.  At that time it was necessary\nto override the latter when overriding the former, since\ndefault_add_stmt_cost didn't indirect through the\nbuiltin_vectorization_cost target hook:\n\n      int stmt_cost = default_builtin_vectorization_cost (kind, vectype,\n                                                          misalign);\n\nThat was fixed by:\n\n| 2014-06-06  Bingfeng Mei  <bmei@broadcom.com>\n|\n|      * targhooks.c (default_add_stmt_cost): Call target specific\n|      hook instead of default one.\n\nso the arm definition of add_stmt_cost is now equivalent\nto the default.\n\ngcc/\n\t* config/arm/arm.c (arm_add_stmt_cost): Delete.\n\t(TARGET_VECTORIZE_ADD_STMT_COST): Delete.", "tree": {"sha": "97891264b5876badce01b575931a84b13359b973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97891264b5876badce01b575931a84b13359b973"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1975395021e34088865e6566e281622a218be70e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1975395021e34088865e6566e281622a218be70e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1975395021e34088865e6566e281622a218be70e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1975395021e34088865e6566e281622a218be70e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa62b199f174064d7ffa5d018e7779f5575f7be9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa62b199f174064d7ffa5d018e7779f5575f7be9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa62b199f174064d7ffa5d018e7779f5575f7be9"}], "stats": {"total": 40, "additions": 0, "deletions": 40}, "files": [{"sha": "e51f60a1841d9c599afe3d6ce72f8a9ad799c43e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1975395021e34088865e6566e281622a218be70e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1975395021e34088865e6566e281622a218be70e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1975395021e34088865e6566e281622a218be70e", "patch": "@@ -304,11 +304,6 @@ static bool aarch_macro_fusion_pair_p (rtx_insn*, rtx_insn*);\n static int arm_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n \t\t\t\t\t   tree vectype,\n \t\t\t\t\t   int misalign ATTRIBUTE_UNUSED);\n-static unsigned arm_add_stmt_cost (vec_info *vinfo, void *data, int count,\n-\t\t\t\t   enum vect_cost_for_stmt kind,\n-\t\t\t\t   struct _stmt_vec_info *stmt_info,\n-\t\t\t\t   tree vectype, int misalign,\n-\t\t\t\t   enum vect_cost_model_location where);\n \n static void arm_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n \t\t\t\t\t bool op0_preserve_value);\n@@ -769,8 +764,6 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST\n #define TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST \\\n   arm_builtin_vectorization_cost\n-#undef TARGET_VECTORIZE_ADD_STMT_COST\n-#define TARGET_VECTORIZE_ADD_STMT_COST arm_add_stmt_cost\n \n #undef TARGET_CANONICALIZE_COMPARISON\n #define TARGET_CANONICALIZE_COMPARISON \\\n@@ -12242,39 +12235,6 @@ arm_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n     }\n }\n \n-/* Implement targetm.vectorize.add_stmt_cost.  */\n-\n-static unsigned\n-arm_add_stmt_cost (vec_info *vinfo, void *data, int count,\n-\t\t   enum vect_cost_for_stmt kind,\n-\t\t   struct _stmt_vec_info *stmt_info, tree vectype,\n-\t\t   int misalign, enum vect_cost_model_location where)\n-{\n-  unsigned *cost = (unsigned *) data;\n-  unsigned retval = 0;\n-\n-  if (flag_vect_cost_model)\n-    {\n-      int stmt_cost = arm_builtin_vectorization_cost (kind, vectype, misalign);\n-\n-      /* Statements in an inner loop relative to the loop being\n-\t vectorized are weighted more heavily.  The value here is\n-\t arbitrary and could potentially be improved with analysis.  */\n-      if (where == vect_body && stmt_info\n-\t  && stmt_in_inner_loop_p (vinfo, stmt_info))\n-\t{\n-\t  loop_vec_info loop_vinfo = dyn_cast<loop_vec_info> (vinfo);\n-\t  gcc_assert (loop_vinfo);\n-\t  count *= LOOP_VINFO_INNER_LOOP_COST_FACTOR (loop_vinfo); /* FIXME.  */\n-\t}\n-\n-      retval = (unsigned) (count * stmt_cost);\n-      cost[where] += retval;\n-    }\n-\n-  return retval;\n-}\n-\n /* Return true if and only if this insn can dual-issue only as older.  */\n static bool\n cortexa7_older_only (rtx_insn *insn)"}]}