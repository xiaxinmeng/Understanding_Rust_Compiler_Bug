{"sha": "16de3637c4df37e0203b3ad52b238887e6ca38fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZkZTM2MzdjNGRmMzdlMDIwM2IzYWQ1MmIyMzg4ODdlNmNhMzhmYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-06-18T14:49:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-06-18T14:49:28Z"}, "message": "[AArch64] Factor out ptrue predicate creation\n\nThis is the first step to canonicalising predicate constants so that\nthey can be reused between modes.\n\n2019-06-18  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-protos.h (aarch64_ptrue_reg): Declare.\n\t* config/aarch64/aarch64.c (aarch64_ptrue_reg): New functions.\n\t(aarch64_expand_sve_widened_duplicate, aarch64_expand_sve_mem_move)\n\t(aarch64_maybe_expand_sve_subreg_move, aarch64_evpc_rev_local)\n\t(aarch64_expand_sve_vec_cmp_int): Use it.\n\t(aarch64_expand_sve_vec_cmp_float): Likewise.\n\t* config/aarch64/aarch64-sve.md: Likewise throughout.\n\nFrom-SVN: r272424", "tree": {"sha": "f95a633b9adabcc19b24295271a88a743a6142d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f95a633b9adabcc19b24295271a88a743a6142d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16de3637c4df37e0203b3ad52b238887e6ca38fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16de3637c4df37e0203b3ad52b238887e6ca38fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16de3637c4df37e0203b3ad52b238887e6ca38fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16de3637c4df37e0203b3ad52b238887e6ca38fc/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32cf949cec180799d3fb14d405772ea35b5aafd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32cf949cec180799d3fb14d405772ea35b5aafd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32cf949cec180799d3fb14d405772ea35b5aafd3"}], "stats": {"total": 110, "additions": 65, "deletions": 45}, "files": [{"sha": "41764984eecf620dd3eb852d9ca44187d9cadc98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16de3637c4df37e0203b3ad52b238887e6ca38fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16de3637c4df37e0203b3ad52b238887e6ca38fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16de3637c4df37e0203b3ad52b238887e6ca38fc", "patch": "@@ -1,3 +1,13 @@\n+2019-06-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_ptrue_reg): Declare.\n+\t* config/aarch64/aarch64.c (aarch64_ptrue_reg): New functions.\n+\t(aarch64_expand_sve_widened_duplicate, aarch64_expand_sve_mem_move)\n+\t(aarch64_maybe_expand_sve_subreg_move, aarch64_evpc_rev_local)\n+\t(aarch64_expand_sve_vec_cmp_int): Use it.\n+\t(aarch64_expand_sve_vec_cmp_float): Likewise.\n+\t* config/aarch64/aarch64-sve.md: Likewise throughout.\n+\n 2019-06-18  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-sve.md (*cond_<optab><mode>_0): Delete."}, {"sha": "3a8be2212f9ede98abbe61cd3837ff1fa4c6bcc6", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16de3637c4df37e0203b3ad52b238887e6ca38fc/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16de3637c4df37e0203b3ad52b238887e6ca38fc/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=16de3637c4df37e0203b3ad52b238887e6ca38fc", "patch": "@@ -520,6 +520,7 @@ const char * aarch64_output_probe_sve_stack_clash (rtx, rtx, rtx, rtx);\n void aarch64_err_no_fpadvsimd (machine_mode);\n void aarch64_expand_epilogue (bool);\n void aarch64_expand_mov_immediate (rtx, rtx, rtx (*) (rtx, rtx) = 0);\n+rtx aarch64_ptrue_reg (machine_mode);\n void aarch64_emit_sve_pred_move (rtx, rtx, rtx);\n void aarch64_expand_sve_mem_move (rtx, rtx, machine_mode);\n bool aarch64_maybe_expand_sve_subreg_move (rtx, rtx);"}, {"sha": "eef8ed60c9f91b055c84964c1c437f59fc637655", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16de3637c4df37e0203b3ad52b238887e6ca38fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16de3637c4df37e0203b3ad52b238887e6ca38fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=16de3637c4df37e0203b3ad52b238887e6ca38fc", "patch": "@@ -232,7 +232,7 @@\n \t  UNSPEC_LD1_GATHER))]\n   \"TARGET_SVE\"\n   {\n-    operands[5] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[5] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -289,7 +289,7 @@\n \t  UNSPEC_ST1_SCATTER))]\n   \"TARGET_SVE\"\n   {\n-    operands[5] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[5] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -629,7 +629,7 @@\n   {\n     if (MEM_P (operands[1]))\n       {\n-\trtx ptrue = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+\trtx ptrue = aarch64_ptrue_reg (<VPRED>mode);\n \temit_insn (gen_sve_ld1r<mode> (operands[0], ptrue, operands[1],\n \t\t\t\t       CONST0_RTX (<MODE>mode)));\n \tDONE;\n@@ -744,7 +744,7 @@\n \t  UNSPEC_LDN))]\n   \"TARGET_SVE\"\n   {\n-    operands[2] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -773,7 +773,7 @@\n \t  UNSPEC_STN))]\n   \"TARGET_SVE\"\n   {\n-    operands[2] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -932,7 +932,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[3] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -1019,7 +1019,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[3] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -1050,7 +1050,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[3] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -1080,7 +1080,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[2] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -1150,7 +1150,7 @@\n \t  (match_dup 3)))]\n   \"TARGET_SVE\"\n   {\n-    operands[3] = force_reg (<MODE>mode, CONSTM1_RTX (<MODE>mode));\n+    operands[3] = aarch64_ptrue_reg (<MODE>mode);\n   }\n )\n \n@@ -1197,7 +1197,7 @@\n \t  (match_dup 2)))]\n   \"TARGET_SVE\"\n   {\n-    operands[2] = force_reg (<MODE>mode, CONSTM1_RTX (<MODE>mode));\n+    operands[2] = aarch64_ptrue_reg (<MODE>mode);\n   }\n )\n \n@@ -1246,7 +1246,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[3] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -1738,7 +1738,7 @@\n \t  (pc)))]\n   \"\"\n   {\n-    rtx ptrue = force_reg (<MODE>mode, CONSTM1_RTX (<MODE>mode));\n+    rtx ptrue = aarch64_ptrue_reg (<MODE>mode);\n     rtx pred;\n     if (operands[2] == CONST0_RTX (<MODE>mode))\n       pred = operands[1];\n@@ -1764,7 +1764,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[3] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -1793,7 +1793,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[3] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -1823,7 +1823,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[3] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2017,7 +2017,7 @@\n \t\t      UNSPEC_ADDV))]\n   \"TARGET_SVE\"\n   {\n-    operands[2] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2039,7 +2039,7 @@\n \t\t      UNSPEC_FADDV))]\n   \"TARGET_SVE\"\n   {\n-    operands[2] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2061,7 +2061,7 @@\n \t\t      MAXMINV))]\n   \"TARGET_SVE\"\n   {\n-    operands[2] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2083,7 +2083,7 @@\n \t\t      FMAXMINV))]\n   \"TARGET_SVE\"\n   {\n-    operands[2] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2104,7 +2104,7 @@\n \t\t      BITWISEV))]\n   \"TARGET_SVE\"\n   {\n-    operands[2] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2126,7 +2126,7 @@\n \t\t      UNSPEC_FADDA))]\n   \"TARGET_SVE\"\n   {\n-    operands[3] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2167,7 +2167,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[3] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2203,7 +2203,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[3] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2243,7 +2243,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[3] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2289,7 +2289,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[4] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[4] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2322,7 +2322,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[4] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[4] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2356,7 +2356,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[4] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[4] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2391,7 +2391,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[4] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[4] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2424,7 +2424,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[3] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2453,7 +2453,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[2] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2491,7 +2491,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[2] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2518,7 +2518,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[2] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2569,7 +2569,7 @@\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\"\n   {\n-    operands[2] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n@@ -2707,7 +2707,7 @@\n \t\t? gen_aarch64_sve_zip2<mode>\n \t\t: gen_aarch64_sve_zip1<mode>)\n \t\t(temp, operands[1], operands[1]));\n-    rtx ptrue = force_reg (<VWIDE_PRED>mode, CONSTM1_RTX (<VWIDE_PRED>mode));\n+    rtx ptrue = aarch64_ptrue_reg (<VWIDE_PRED>mode);\n     emit_insn (gen_aarch64_sve_extend<mode><Vwide>2 (operands[0],\n \t\t\t\t\t\t     ptrue, temp));\n     DONE;\n@@ -2733,7 +2733,7 @@\n \t        ? gen_aarch64_sve_zip2vnx4si\n \t        : gen_aarch64_sve_zip1vnx4si)\n \t       (temp, operands[1], operands[1]));\n-    rtx ptrue = force_reg (VNx2BImode, CONSTM1_RTX (VNx2BImode));\n+    rtx ptrue = aarch64_ptrue_reg (VNx2BImode);\n     emit_insn (gen_aarch64_sve_<FLOATUORS:optab>vnx4sivnx2df2 (operands[0],\n \t\t\t\t\t\t\t       ptrue, temp));\n     DONE;\n@@ -2783,7 +2783,7 @@\n \t(unspec:SVE_HSF [(match_dup 4) (match_dup 5)] UNSPEC_UZP1))]\n   \"TARGET_SVE\"\n   {\n-    operands[3] = force_reg (<VWIDE_PRED>mode, CONSTM1_RTX (<VWIDE_PRED>mode));\n+    operands[3] = aarch64_ptrue_reg (<VWIDE_PRED>mode);\n     operands[4] = gen_reg_rtx (<MODE>mode);\n     operands[5] = gen_reg_rtx (<MODE>mode);\n   }\n@@ -2805,7 +2805,7 @@\n \t(unspec:VNx4SI [(match_dup 4) (match_dup 5)] UNSPEC_UZP1))]\n   \"TARGET_SVE\"\n   {\n-    operands[3] = force_reg (VNx2BImode, CONSTM1_RTX (VNx2BImode));\n+    operands[3] = aarch64_ptrue_reg (VNx2BImode);\n     operands[4] = gen_reg_rtx (VNx4SImode);\n     operands[5] = gen_reg_rtx (VNx4SImode);\n   }\n@@ -3073,7 +3073,7 @@\n \t\t(match_operand:SVE_I 2 \"register_operand\"))]\n   \"TARGET_SVE\"\n   {\n-    rtx pred = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+    rtx pred = aarch64_ptrue_reg (<VPRED>mode);\n     emit_insn (gen_aarch64_<su>abd<mode>_3 (operands[0], pred, operands[1],\n \t\t\t\t\t    operands[2]));\n     DONE;"}, {"sha": "d5dca76a1430fac3fc325e0ee8d46f4ced50bfb5", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16de3637c4df37e0203b3ad52b238887e6ca38fc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16de3637c4df37e0203b3ad52b238887e6ca38fc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=16de3637c4df37e0203b3ad52b238887e6ca38fc", "patch": "@@ -2458,6 +2458,15 @@ aarch64_force_temporary (machine_mode mode, rtx x, rtx value)\n     }\n }\n \n+/* Return an all-true predicate register of mode MODE.  */\n+\n+rtx\n+aarch64_ptrue_reg (machine_mode mode)\n+{\n+  gcc_assert (GET_MODE_CLASS (mode) == MODE_VECTOR_BOOL);\n+  return force_reg (mode, CONSTM1_RTX (mode));\n+}\n+\n /* Return true if we can move VALUE into a register using a single\n    CNT[BHWD] instruction.  */\n \n@@ -3187,7 +3196,7 @@ aarch64_expand_sve_widened_duplicate (rtx dest, scalar_int_mode src_mode,\n   machine_mode mode = GET_MODE (dest);\n   unsigned int elem_bytes = GET_MODE_UNIT_SIZE (mode);\n   machine_mode pred_mode = aarch64_sve_pred_mode (elem_bytes).require ();\n-  rtx ptrue = force_reg (pred_mode, CONSTM1_RTX (pred_mode));\n+  rtx ptrue = aarch64_ptrue_reg (pred_mode);\n   src = gen_rtx_UNSPEC (mode, gen_rtvec (2, ptrue, src), UNSPEC_LD1RQ);\n   emit_insn (gen_rtx_SET (dest, src));\n   return true;\n@@ -3448,7 +3457,7 @@ void\n aarch64_expand_sve_mem_move (rtx dest, rtx src, machine_mode pred_mode)\n {\n   machine_mode mode = GET_MODE (dest);\n-  rtx ptrue = force_reg (pred_mode, CONSTM1_RTX (pred_mode));\n+  rtx ptrue = aarch64_ptrue_reg (pred_mode);\n   if (!register_operand (src, mode)\n       && !register_operand (dest, mode))\n     {\n@@ -3512,7 +3521,7 @@ aarch64_maybe_expand_sve_subreg_move (rtx dest, rtx src)\n     return false;\n \n   /* Generate *aarch64_sve_mov<mode>_subreg_be.  */\n-  rtx ptrue = force_reg (VNx16BImode, CONSTM1_RTX (VNx16BImode));\n+  rtx ptrue = aarch64_ptrue_reg (VNx16BImode);\n   rtx unspec = gen_rtx_UNSPEC (GET_MODE (dest), gen_rtvec (2, ptrue, src),\n \t\t\t       UNSPEC_REV_SUBREG);\n   emit_insn (gen_rtx_SET (dest, unspec));\n@@ -16753,7 +16762,7 @@ aarch64_evpc_rev_local (struct expand_vec_perm_d *d)\n   rtx src = gen_rtx_UNSPEC (d->vmode, gen_rtvec (1, d->op0), unspec);\n   if (d->vec_flags == VEC_SVE_DATA)\n     {\n-      rtx pred = force_reg (pred_mode, CONSTM1_RTX (pred_mode));\n+      rtx pred = aarch64_ptrue_reg (pred_mode);\n       src = gen_rtx_UNSPEC (d->vmode, gen_rtvec (2, pred, src),\n \t\t\t    UNSPEC_MERGE_PTRUE);\n     }\n@@ -17101,7 +17110,7 @@ aarch64_expand_sve_vec_cmp_int (rtx target, rtx_code code, rtx op0, rtx op1)\n   if (!aarch64_sve_cmp_operand_p (code, op1))\n     op1 = force_reg (data_mode, op1);\n \n-  rtx ptrue = force_reg (pred_mode, CONSTM1_RTX (pred_mode));\n+  rtx ptrue = aarch64_ptrue_reg (pred_mode);\n   rtx cond = gen_rtx_fmt_ee (code, pred_mode, op0, op1);\n   aarch64_emit_sve_ptrue_op_cc (target, ptrue, cond);\n }\n@@ -17160,7 +17169,7 @@ aarch64_expand_sve_vec_cmp_float (rtx target, rtx_code code,\n   machine_mode pred_mode = GET_MODE (target);\n   machine_mode data_mode = GET_MODE (op0);\n \n-  rtx ptrue = force_reg (pred_mode, CONSTM1_RTX (pred_mode));\n+  rtx ptrue = aarch64_ptrue_reg (pred_mode);\n   switch (code)\n     {\n     case UNORDERED:"}]}