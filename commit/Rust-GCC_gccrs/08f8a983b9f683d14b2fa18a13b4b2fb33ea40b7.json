{"sha": "08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhmOGE5ODNiOWY2ODNkMTRiMmZhMThhMTNiNGIyZmIzM2VhNDBiNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-06T12:14:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-06T12:14:30Z"}, "message": "[multiple changes]\n\n2011-09-06  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-os_lib.ads (Spawn): Minor documentation clarification,\n\tSuccess is True for a zero exit status.\n\n2011-09-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb: Add message for common iterator error.\n\n2011-09-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.adb (Build_Initialization_Call): If the target is a\n\tselected component discriminated by a current instance, replace\n\tthe constraint with a reference to the target object, regardless\n\tof whether the context is an init_proc.\n\n2011-09-06  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_attr.adb: Descriptor_Size is never static.\n\n2011-09-06  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Add documentation for LSLOC metric in gnatmetric\n\n2011-09-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* gnat_rm.texi: Clarify that attribute Descriptor_Size is\n\tnon-static.\n\n2011-09-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve): An expression that is the body of an\n\texpression function does not freeze.\n\n2011-09-06  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-csquin.ads, a-cusyqu.adb, a-cbprqu.adb, a-cbsyqu.adb,\n\ta-cuprqu.adb: Changed copyright notice to indicate current\n\tyear only.\n\n2011-09-06  Vincent Celier  <celier@adacore.com>\n\n\t* prj.adb: Minor spelling error fix in comment\n\t* sem_res.adb: Minor reformatting\n\n2011-09-06  Pascal Obry  <obry@adacore.com>\n\n\t* sysdep.c (winflush_nt): Removed as not needed anymore.\n\t(winflush_95): Likewise.\n\t(winflush_init): Likewise.\n\t(winflush_function): Likewise.\n\t(getc_immediate_common): Remove call to winflush_function.\n\nFrom-SVN: r178591", "tree": {"sha": "1b96738a51d9c45e1f4cff05c2f0e3a0eee58e09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b96738a51d9c45e1f4cff05c2f0e3a0eee58e09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/comments", "author": null, "committer": null, "parents": [{"sha": "cb3d8731fd7316bcdeff478fbae3f54cc9757944", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3d8731fd7316bcdeff478fbae3f54cc9757944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb3d8731fd7316bcdeff478fbae3f54cc9757944"}], "stats": {"total": 232, "additions": 126, "deletions": 106}, "files": [{"sha": "682e500fe05aede264002e102f880891b6fab118", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7", "patch": "@@ -1,3 +1,56 @@\n+2011-09-06  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-os_lib.ads (Spawn): Minor documentation clarification,\n+\tSuccess is True for a zero exit status.\n+\n+2011-09-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb: Add message for common iterator error.\n+\n+2011-09-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Initialization_Call): If the target is a\n+\tselected component discriminated by a current instance, replace\n+\tthe constraint with a reference to the target object, regardless\n+\tof whether the context is an init_proc.\n+\n+2011-09-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_attr.adb: Descriptor_Size is never static.\n+\n+2011-09-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Add documentation for LSLOC metric in gnatmetric\n+\n+2011-09-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat_rm.texi: Clarify that attribute Descriptor_Size is\n+\tnon-static.\n+\n+2011-09-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve): An expression that is the body of an\n+\texpression function does not freeze.\n+\n+2011-09-06  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-csquin.ads, a-cusyqu.adb, a-cbprqu.adb, a-cbsyqu.adb,\n+\ta-cuprqu.adb: Changed copyright notice to indicate current\n+\tyear only.\n+\n+2011-09-06  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj.adb: Minor spelling error fix in comment\n+\t* sem_res.adb: Minor reformatting\n+\n+2011-09-06  Pascal Obry  <obry@adacore.com>\n+\n+\t* sysdep.c (winflush_nt): Removed as not needed anymore.\n+\t(winflush_95): Likewise.\n+\t(winflush_init): Likewise.\n+\t(winflush_function): Likewise.\n+\t(getc_immediate_common): Remove call to winflush_function.\n+\n 2011-09-06  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_attr.adb (Expand_N_Attribute_Reference): Rewrite the"}, {"sha": "09a06b277ad4910e102e966078959d75d21de162", "filename": "gcc/ada/a-cbprqu.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fa-cbprqu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fa-cbprqu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbprqu.adb?ref=08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--            Copyright (C) 2011, Free Software Foundation, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "462d6f4c95c4bf7e3988742e51ab3e6ec5a884ed", "filename": "gcc/ada/a-cbsyqu.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fa-cbsyqu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fa-cbsyqu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbsyqu.adb?ref=08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--            Copyright (C) 2011, Free Software Foundation, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "2a4d0b36eec900059827736cf779b9c931bedd73", "filename": "gcc/ada/a-csquin.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fa-csquin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fa-csquin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-csquin.ads?ref=08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--            Copyright (C) 2011, Free Software Foundation, Inc.            --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --"}, {"sha": "2d11a2621b3072078ddaf76d4125e7352a387153", "filename": "gcc/ada/a-cuprqu.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fa-cuprqu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fa-cuprqu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cuprqu.adb?ref=08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--            Copyright (C) 2011, Free Software Foundation, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "7fc01cc5fc93897eb1c486361c41ed532877b082", "filename": "gcc/ada/a-cusyqu.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fa-cusyqu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fa-cusyqu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cusyqu.adb?ref=08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--            Copyright (C) 2011, Free Software Foundation, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "897844bb8e42012655913403091957823a39c11a", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7", "patch": "@@ -1814,11 +1814,12 @@ package body Exp_Attr is\n             Apply_Universal_Integer_Attribute_Checks (N);\n \n          --  For any other type, the descriptor size is 0 because there is no\n-         --  actual descriptor.\n+         --  actual descriptor, but the result is not formally static.\n \n          else\n             Rewrite (N, Make_Integer_Literal (Loc, 0));\n             Analyze (N);\n+            Set_Is_Static_Expression (N, False);\n          end if;\n \n       ---------------"}, {"sha": "fecbf5ce26bebbceb957717fe25f88ea5d2c3ddb", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7", "patch": "@@ -1563,7 +1563,21 @@ package body Exp_Ch3 is\n                    Discriminant_Constraint (Full_Type));\n             end;\n \n-            if In_Init_Proc then\n+            --  If the target has access discriminants, and is constrained by\n+            --  an access to the enclosing construct, i.e. a current instance,\n+            --  replace the reference to the type by a reference to the object.\n+\n+            if Nkind (Arg) = N_Attribute_Reference\n+              and then Is_Access_Type (Etype (Arg))\n+              and then Is_Entity_Name (Prefix (Arg))\n+              and then Is_Type (Entity (Prefix (Arg)))\n+            then\n+               Arg :=\n+                 Make_Attribute_Reference (Loc,\n+                   Prefix         => New_Copy (Prefix (Id_Ref)),\n+                   Attribute_Name => Name_Unrestricted_Access);\n+\n+            elsif In_Init_Proc then\n \n                --  Replace any possible references to the discriminant in the\n                --  call to the record initialization procedure with references\n@@ -1574,19 +1588,6 @@ package body Exp_Ch3 is\n                then\n                   Arg := New_Reference_To (Discriminal (Entity (Arg)), Loc);\n \n-               --  Case of access discriminants. We replace the reference\n-               --  to the type by a reference to the actual object\n-\n-               elsif Nkind (Arg) = N_Attribute_Reference\n-                 and then Is_Access_Type (Etype (Arg))\n-                 and then Is_Entity_Name (Prefix (Arg))\n-                 and then Is_Type (Entity (Prefix (Arg)))\n-               then\n-                  Arg :=\n-                    Make_Attribute_Reference (Loc,\n-                      Prefix         => New_Copy (Prefix (Id_Ref)),\n-                      Attribute_Name => Name_Unrestricted_Access);\n-\n                --  Otherwise make a copy of the default expression. Note that\n                --  we use the current Sloc for this, because we do not want the\n                --  call to appear to be at the declaration point. Within the"}, {"sha": "666d251273d91642c6eaaabb7c6c969765e31d8a", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7", "patch": "@@ -5940,11 +5940,11 @@ as a @code{Pos} value (0 for @code{High_Order_First}, 1 for\n @cindex Dope vector\n @findex Descriptor_Size\n @noindent\n-Attribute @code{Descriptor_Size} returns the size in bits of the descriptor\n-allocated for a type.  The result is non-zero only for unconstrained array\n-types and the returned value is of type universal integer.  In GNAT, an array\n-descriptor contains bounds information and is located immediately before the\n-first element of the array.\n+Non-static attribute @code{Descriptor_Size} returns the size in bits of the\n+descriptor allocated for a type.  The result is non-zero only for unconstrained\n+array types and the returned value is of type universal integer.  In GNAT, an\n+array descriptor contains bounds information and is located immediately before\n+the first element of the array.\n \n @smallexample @c ada\n type Unconstr_Array is array (Positive range <>) of Boolean;"}, {"sha": "e17716709d4811765b849168abad0ea1f786a103", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7", "patch": "@@ -14235,7 +14235,23 @@ outermost unit and for each eligible local unit:\n \n @table @emph\n @item LSLOC (``Logical Source Lines Of Code'')\n-The total number of declarations and the total number of statements\n+The total number of declarations and the total number of statements. Note\n+that the definition of declarations is the one given in the reference\n+manual:\n+\n+@noindent\n+``Each of the following is defined to be a declaration: any basic_declaration;\n+an enumeration_literal_specification; a discriminant_specification;\n+a component_declaration; a loop_parameter_specification; a\n+parameter_specification; a subprogram_body; an entry_declaration;\n+an entry_index_specification; a choice_parameter_specification;\n+a generic_formal_parameter_declaration.''\n+\n+This means for example that each enumeration literal adds one to the count,\n+as well as each subprogram parameter.\n+\n+Thus the results from this metric will be significantly greater than might\n+be expected from a naive view of counting semicolons.\n \n @item Maximal static nesting level of inner program units\n According to"}, {"sha": "1c63e386ea923b495e90874a180b9aea575a7e65", "filename": "gcc/ada/s-os_lib.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fs-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fs-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.ads?ref=08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7", "patch": "@@ -707,7 +707,8 @@ package System.OS_Lib is\n    --\n    --  This function will always set Success to False under VxWorks and other\n    --  similar operating systems which have no notion of the concept of\n-   --  dynamically executable file.\n+   --  dynamically executable file. Otherwise Success is set True if the exit\n+   --  status of the spawned process is zero.\n \n    function Spawn\n      (Program_Name : String;"}, {"sha": "be2237715c6ee051fd0ad56efe7350e71c3860f2", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7", "patch": "@@ -2430,6 +2430,21 @@ package body Sem_Ch5 is\n               Entity (Find_Aspect (Typ, Aspect_Iterator_Element)));\n \n          else\n+            --  For an iteration of the form IN, the name must denote an\n+            --  iterator, typically the result of a call to Iterate. Give a\n+            --  useful error message when the name is a container by itself.\n+\n+            if Is_Entity_Name (Original_Node (Name (N)))\n+              and then not Is_Iterator (Typ)\n+            then\n+               Error_Msg_N\n+                 (\"name must be an iterator, not a container\", Name (N));\n+\n+               Error_Msg_NE\n+                 (\"\\to iterate directly over a container, write `of &`\",\n+                    Name (N), Original_Node (Name (N)));\n+            end if;\n+\n             --  The result type of Iterate function is the classwide type of\n             --  the interface parent. We need the specific Cursor type defined\n             --  in the container package."}, {"sha": "9ce5282d5b8bf96625956c159861477b1071916f", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7", "patch": "@@ -2810,7 +2810,16 @@ package body Sem_Res is\n          --  default expression mode (the Freeze_Expression routine tests this\n          --  flag and only freezes static types if it is set).\n \n-         Freeze_Expression (N);\n+         --  AI05-177 (Ada2012): Expression functions do not freeze. Only\n+         --  their use (in an expanded call) freezes.\n+\n+         if Ekind (Current_Scope) /= E_Function\n+           or else\n+             Nkind (Original_Node (Unit_Declaration_Node (Current_Scope))) /=\n+                                                        N_Expression_Function\n+         then\n+            Freeze_Expression (N);\n+         end if;\n \n          --  Now we can do the expansion\n "}, {"sha": "4d383fd0608de53f063efc89bf5d9443e198ba43", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 2, "deletions": 78, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=08f8a983b9f683d14b2fa18a13b4b2fb33ea40b7", "patch": "@@ -211,84 +211,10 @@ __gnat_ttyname (int filedes)\n     return NULL;\n }\n \n-/* This function is needed to fix a bug under Win95/98. Under these platforms\n-   doing :\n-                ch1 = getch();\n-\t\tch2 = fgetc (stdin);\n-\n-   will put the same character into ch1 and ch2. It seem that the character\n-   read by getch() is not correctly removed from the buffer. Even a\n-   fflush(stdin) does not fix the bug. This bug does not appear under Window\n-   NT. So we have two version of this routine below one for 95/98 and one for\n-   NT/2000 version of Windows. There is also a special routine (winflushinit)\n-   that will be called only the first time to check which version of Windows\n-   we are running running on to set the right routine to use.\n-\n-   This problem occurs when using Text_IO.Get_Line after Text_IO.Get_Immediate\n-   for example.\n-\n-   Calling FlushConsoleInputBuffer just after getch() fix the bug under\n-   95/98. */\n-\n-#ifdef RTX\n-\n-static void winflush_nt (void);\n-\n-/* winflush_function will do nothing since we only have problems with Windows\n-   95/98 which are not supported by RTX. */\n-\n-static void (*winflush_function) (void) = winflush_nt;\n-\n-static void\n-winflush_nt (void)\n-{\n-  /* Does nothing as there is no problem under NT.  */\n-}\n-\n-#else /* !RTX */\n-\n-static void winflush_init (void);\n-\n-static void winflush_95 (void);\n-\n-static void winflush_nt (void);\n+#ifndef RTX\n \n int __gnat_is_windows_xp (void);\n \n-/* winflusfunction is set first to the winflushinit function which will check\n-   the OS version 95/98 or NT/2000 */\n-\n-static void (*winflush_function) (void) = winflush_init;\n-\n-/* This function does the runtime check of the OS version and then sets\n-   winflush_function to the appropriate function and then call it. */\n-\n-static void\n-winflush_init (void)\n-{\n-  DWORD dwVersion = GetVersion();\n-\n-  if (dwVersion < 0x80000000)                /* Windows NT/2000 */\n-    winflush_function = winflush_nt;\n-  else                                       /* Windows 95/98   */\n-    winflush_function = winflush_95;\n-\n-  (*winflush_function)();      /* Perform the 'flush' */\n-\n-}\n-\n-static void\n-winflush_95 (void)\n-{\n-  FlushConsoleInputBuffer (GetStdHandle (STD_INPUT_HANDLE));\n-}\n-\n-static void\n-winflush_nt (void)\n-{\n-  /* Does nothing as there is no problem under NT.  */\n-}\n-\n int\n __gnat_is_windows_xp (void)\n {\n@@ -311,7 +237,7 @@ __gnat_is_windows_xp (void)\n   return is_win_xp;\n }\n \n-#endif /* !RTX */\n+#endif\n \n /* Get the bounds of the stack.  The stack pointer is supposed to be\n    initialized to BASE when a thread is created and the stack can be extended\n@@ -542,7 +468,6 @@ getc_immediate_common (FILE *stream,\n       if (waiting)\n \t{\n \t  *ch = getch ();\n-\t  (*winflush_function) ();\n \n \t  if (*ch == eot_ch)\n \t    *end_of_file = 1;\n@@ -559,7 +484,6 @@ getc_immediate_common (FILE *stream,\n \t    {\n \t      *avail = 1;\n \t      *ch = getch ();\n-\t      (*winflush_function) ();\n \n \t      if (*ch == eot_ch)\n \t\t*end_of_file = 1;"}]}