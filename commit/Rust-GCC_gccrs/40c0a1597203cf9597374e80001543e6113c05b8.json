{"sha": "40c0a1597203cf9597374e80001543e6113c05b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBjMGExNTk3MjAzY2Y5NTk3Mzc0ZTgwMDAxNTQzZTYxMTNjMDViOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-06-02T13:22:34Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-06-02T13:22:34Z"}, "message": "re PR target/61239 (ICE in decompose, at rtl.h when compiling vshuf-v16hi.c using -mavx2)\n\n\tPR target/61239\n\t* config/i386/i386.c (ix86_expand_vec_perm) [case V32QImode]: Use\n\tGEN_INT (-128) instead of GEN_INT (128) to set MSB of QImode constant.\n\nFrom-SVN: r211134", "tree": {"sha": "abce4f32ea8bc9862cf0926c04e1bbe09b50593d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abce4f32ea8bc9862cf0926c04e1bbe09b50593d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40c0a1597203cf9597374e80001543e6113c05b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c0a1597203cf9597374e80001543e6113c05b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40c0a1597203cf9597374e80001543e6113c05b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c0a1597203cf9597374e80001543e6113c05b8/comments", "author": null, "committer": null, "parents": [{"sha": "94bfa2da9a5a7912f0b48bf9501f3246eb86ee14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94bfa2da9a5a7912f0b48bf9501f3246eb86ee14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94bfa2da9a5a7912f0b48bf9501f3246eb86ee14"}], "stats": {"total": 72, "additions": 39, "deletions": 33}, "files": [{"sha": "bc9b0368e8d0083e37a9822fac54a154e2c82567", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 32, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c0a1597203cf9597374e80001543e6113c05b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c0a1597203cf9597374e80001543e6113c05b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40c0a1597203cf9597374e80001543e6113c05b8", "patch": "@@ -1,3 +1,9 @@\n+2014-06-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/61239\n+\t* config/i386/i386.c (ix86_expand_vec_perm) [case V32QImode]: Use\n+\tGEN_INT (-128) instead of GEN_INT (128) to set MSB of QImode constant.\n+\n 2014-06-02  Tom de Vries  <tom@codesourcery.com>\n \n \t* config/aarch64/aarch64.c (aarch64_float_const_representable_p): Handle\n@@ -149,17 +155,17 @@\n 2014-05-29  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/61325\n-\t* lra-constraints.c (process_address): Rename to\n-\tprocess_address_1.\n+\t* lra-constraints.c (process_address): Rename to process_address_1.\n \t(process_address): New function.\n \n 2014-05-29  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64-builtins.c (aarch64_types_binopv_qualifiers,\n \tTYPES_BINOPV): New static data.\n-\t* config/aarch64/aarch64-simd-builtins.def (im_lane_bound): New builtin.\n-\t* config/aarch64/aarch64-simd.md (aarch64_ext, aarch64_im_lane_boundsi):\n-\tNew patterns.\n+\t* config/aarch64/aarch64-simd-builtins.def (im_lane_bound):\n+\tNew builtin.\n+\t* config/aarch64/aarch64-simd.md (aarch64_ext,\n+\taarch64_im_lane_boundsi): New patterns.\n \t* config/aarch64/aarch64.c (aarch64_expand_vec_perm_const_1): Match\n \tpatterns for EXT.\n \t(aarch64_evpc_ext): New function.\n@@ -177,20 +183,20 @@\n \t* rtl.h (BLOCK_SYMBOL_CHECK): Use SYMBOL_REF_FLAGS.\n \n 2014-05-29  Richard Earnshaw <rearnsha@arm.com>\n-\tRichard Sandiford  <rdsandiford@googlemail.com>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n \n-        * arm/iterators.md (shiftable_ops): New code iterator.\n-        (t2_binop0, arith_shift_insn): New code attributes.\n+\t* arm/iterators.md (shiftable_ops): New code iterator.\n+\t(t2_binop0, arith_shift_insn): New code attributes.\n \t* arm/predicates.md (shift_nomul_operator): New predicate.\n-        * arm/arm.md (insn_enabled): Delete.\n-        (enabled): Remove insn_enabled test.\n-        (*arith_shiftsi): Delete.  Replace with ...\n-        (*<arith_shift_insn>_multsi): ... new pattern.\n+\t* arm/arm.md (insn_enabled): Delete.\n+\t(enabled): Remove insn_enabled test.\n+\t(*arith_shiftsi): Delete.  Replace with ...\n+\t(*<arith_shift_insn>_multsi): ... new pattern.\n \t(*<arith_shift_insn>_shiftsi): ... new pattern.\n \t* config/arm/arm.c (arm_print_operand): Handle operand format 'b'.\n \n 2014-05-29  Radovan Obradovic  <robradovic@mips.com>\n-            Tom de Vries  <tom@codesourcery.com>\n+\t    Tom de Vries  <tom@codesourcery.com>\n \n \t* config/mips/mips.h (POST_CALL_TMP_REG): Define.\n \t* config/mips/mips.c (mips_emit_call_insn): Add POST_CALL_TMP_REG\n@@ -220,8 +226,9 @@\n \t-fuse-caller-save.\n \t* lra-assigns.c (lra_assign): Allow call_used_regs to cross calls for\n \t-fuse-caller-save.\n-\t* lra-constraints.c (need_for_call_save_p): Use actual_call_used_reg_set\n-\tinstead of call_used_reg_set for -fuse-caller-save.\n+\t* lra-constraints.c (need_for_call_save_p): Use\n+\tactual_call_used_reg_set instead of call_used_reg_set for\n+\t-fuse-caller-save.\n \t* lra-lives.c (process_bb_lives): Calculate actual_call_used_reg_set.\n \n 2014-05-28  Richard Sandiford  <rdsandiford@googlemail.com>\n@@ -301,8 +308,7 @@\n \t__RL78_64BIT_DOUBLES__ or __RL78_32BIT_DOUBLES__.\n \t(ASM_SPEC): Pass -m64bit-doubles or -m32bit-doubles on\n \tto the assembler.\n-\t(DOUBLE_TYPE_SIZE): Use 64 bit if TARGET_64BIT_DOUBLES\n-\tis true.\n+\t(DOUBLE_TYPE_SIZE): Use 64 bit if TARGET_64BIT_DOUBLES is true.\n \t* gcc/config/rl78/rl78.opt (m64bit-doubles): New option.\n \t(m32bit-doubles) Likewise.\n \t* gcc/config/rl78/t-rl78: Add 64-bit-double multilib.\n@@ -347,25 +353,26 @@\n \t-fuse-caller-save.\n \t* lra-assigns.c (lra_assign): Allow call_used_regs to cross calls for\n \t-fuse-caller-save.\n-\t* lra-constraints.c (need_for_call_save_p): Use actual_call_used_reg_set\n-\tinstead of call_used_reg_set for -fuse-caller-save.\n+\t* lra-constraints.c (need_for_call_save_p): Use\n+\tactual_call_used_reg_set instead of call_used_reg_set for\n+\t-fuse-caller-save.\n \t* lra-lives.c (process_bb_lives): Calculate actual_call_used_reg_set.\n \n 2014-05-28  Radovan Obradovic  <robradovic@mips.com>\n-            Tom de Vries  <tom@codesourcery.com>\n+\t    Tom de Vries  <tom@codesourcery.com>\n \n-\t* doc/invoke.texi (@item Optimization Options): Add -fuse-caller-save to\n-\tgccoptlist.\n+\t* doc/invoke.texi (@item Optimization Options): Add -fuse-caller-save\n+\tto gccoptlist.\n \t(@item -fuse-caller-save): New item.\n \n 2014-05-28  Radovan Obradovic  <robradovic@mips.com>\n-            Tom de Vries  <tom@codesourcery.com>\n+\t    Tom de Vries  <tom@codesourcery.com>\n \n \t* opts.c (default_options_table): Add OPT_LEVELS_2_PLUS entry with\n \tOPT_fuse_caller_save.\n \n 2014-05-28  Radovan Obradovic  <robradovic@mips.com>\n-            Tom de Vries  <tom@codesourcery.com>\n+\t    Tom de Vries  <tom@codesourcery.com>\n \n \t* df-scan.c (df_get_call_refs): Use get_call_reg_set_usage.\n \t* caller-save.c (setup_save_areas, save_call_clobbered_regs): Use\n@@ -387,7 +394,7 @@\n \tALLOCNO_CROSSED_CALLS_CLOBBERED_REGS to adjust costs.\n \n 2014-05-28  Radovan Obradovic  <robradovic@mips.com>\n-            Tom de Vries  <tom@codesourcery.com>\n+\t    Tom de Vries  <tom@codesourcery.com>\n \n \t* cgraph.h (struct cgraph_rtl_info): Add function_used_regs\n \tand function_used_regs_valid fields.\n@@ -419,8 +426,7 @@\n \n \t* config/aarch64/aarch64.md (stack_protect_set_<mode>):\n \tUse <w> for the register in assembly template.\n-\t(stack_protect_test): Use the mode of operands[0] for the\n-\tresult.\n+\t(stack_protect_test): Use the mode of operands[0] for the result.\n \t(stack_protect_test_<mode>): Use <w> for the register\n \tin assembly template.\n \n@@ -1171,7 +1177,7 @@\n \t(ubsan_instrument_float_cast): New function.\n \t* ubsan.h (ubsan_instrument_float_cast): Declare.\n \n-2014-05-23  Jiong Wang   <jiong.wang@arm.com>\n+2014-05-23 Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/predicates.md (aarch64_call_insn_operand): New\n \tpredicate.\n@@ -6506,7 +6512,7 @@\n \t* tree-vect-loop.c (vect_create_epilog_for_reduction): Force\n \tinitial PHI args to be gimple values.\n \n-2014-04-17   Richard Biener  <rguenther@suse.de>\n+2014-04-17  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/60841\n \t* tree-vect-data-refs.c (vect_analyze_data_refs): Count stmts.\n@@ -6755,7 +6761,7 @@\n \tgen_type_die_with_usage, gen_type_die_with_usage): Likewise.\n \t* dbxout.c (dbxout_type, dbxout_symbol): Likewise.\n \n-2014-04-14  Jan Hubicka   <hubicka@ucw.cz>\n+2014-04-14  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR lto/60820\n \t* varpool.c (varpool_remove_node): Do not alter decls when streaming.\n@@ -8821,7 +8827,7 @@\n \tPR ipa/60306\n \n \tRevert:\n-\t2013-12-14   Jan Hubicka  <jh@suse.cz>\n+\t2013-12-14  Jan Hubicka  <jh@suse.cz>\n \tPR middle-end/58477\n \t* ipa-prop.c (stmt_may_be_vtbl_ptr_store): Skip clobbers.\n \n@@ -11713,7 +11719,7 @@\n \t* Makefile.in: Add vec.o to OBJS-libcommon\n \n 2014-01-23  Kirill Yukhin  <kirill.yukhin@intel.com>\n-\t    Ilya Tocar     <ilya.tocar@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n \n \t* config/i386/avx512fintrin.h (_mm512_kmov): New.\n \t* config/i386/i386.c (IX86_BUILTIN_KMOV16): Ditto."}, {"sha": "6f235f7f5f79b4a52eb64ebfa0cb081c1ffe2ac6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c0a1597203cf9597374e80001543e6113c05b8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c0a1597203cf9597374e80001543e6113c05b8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=40c0a1597203cf9597374e80001543e6113c05b8", "patch": "@@ -21541,7 +21541,7 @@ ix86_expand_vec_perm (rtx operands[])\n \t  t1 = gen_reg_rtx (V32QImode);\n \t  t2 = gen_reg_rtx (V32QImode);\n \t  t3 = gen_reg_rtx (V32QImode);\n-\t  vt2 = GEN_INT (128);\n+\t  vt2 = GEN_INT (-128);\n \t  for (i = 0; i < 32; i++)\n \t    vec[i] = vt2;\n \t  vt = gen_rtx_CONST_VECTOR (V32QImode, gen_rtvec_v (32, vec));"}]}