{"sha": "29a4ef18ec053a15ccc224d4cc5c8860b03496b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlhNGVmMThlYzA1M2ExNWNjYzIyNGQ0Y2M1Yzg4NjBiMDM0OTZiNA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-10-31T15:31:25Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-10-31T15:31:25Z"}, "message": "GCOV: add -j argument (human readable format).\n\n2017-10-31  Martin Liska  <mliska@suse.cz>\n\n\t* doc/gcov.texi: Document new option.\n\t* gcov.c (print_usage): Likewise print it.\n\t(process_args): Support the argument.\n\t(format_count): New function.\n\t(format_gcov): Use the function.\n2017-10-31  Martin Liska  <mliska@suse.cz>\n\n\t* g++.dg/gcov/loop.C: New test.\n\t* lib/gcov.exp: Support human readable format for counts.\n\nFrom-SVN: r254269", "tree": {"sha": "71b33bb93ae5a9f64c217d8e5eea0a24f2ea6b54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71b33bb93ae5a9f64c217d8e5eea0a24f2ea6b54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29a4ef18ec053a15ccc224d4cc5c8860b03496b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a4ef18ec053a15ccc224d4cc5c8860b03496b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29a4ef18ec053a15ccc224d4cc5c8860b03496b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a4ef18ec053a15ccc224d4cc5c8860b03496b4/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cbb449d1f73ad948968b2e55387403f4ee58e0e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbb449d1f73ad948968b2e55387403f4ee58e0e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbb449d1f73ad948968b2e55387403f4ee58e0e8"}], "stats": {"total": 87, "additions": 84, "deletions": 3}, "files": [{"sha": "c396b106f0590b693e01eb018afed03a19dbb611", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a4ef18ec053a15ccc224d4cc5c8860b03496b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a4ef18ec053a15ccc224d4cc5c8860b03496b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29a4ef18ec053a15ccc224d4cc5c8860b03496b4", "patch": "@@ -1,3 +1,11 @@\n+2017-10-31  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/gcov.texi: Document new option.\n+\t* gcov.c (print_usage): Likewise print it.\n+\t(process_args): Support the argument.\n+\t(format_count): New function.\n+\t(format_gcov): Use the function.\n+\n 2017-10-31  Martin Liska  <mliska@suse.cz>\n \n \t* gcov.c (struct name_map): do not use typedef."}, {"sha": "5c4ba8a51a74689b6cf288f039fbe40b184d93e7", "filename": "gcc/doc/gcov.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a4ef18ec053a15ccc224d4cc5c8860b03496b4/gcc%2Fdoc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a4ef18ec053a15ccc224d4cc5c8860b03496b4/gcc%2Fdoc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.texi?ref=29a4ef18ec053a15ccc224d4cc5c8860b03496b4", "patch": "@@ -125,6 +125,7 @@ gcov [@option{-v}|@option{--version}] [@option{-h}|@option{--help}]\n      [@option{-d}|@option{--display-progress}]\n      [@option{-f}|@option{--function-summaries}]\n      [@option{-i}|@option{--intermediate-format}]\n+     [@option{-j}|@option{--human-readable}]\n      [@option{-k}|@option{--use-colors}]\n      [@option{-l}|@option{--long-file-names}]\n      [@option{-m}|@option{--demangled-names}]\n@@ -186,6 +187,10 @@ be used by @command{lcov} or other tools. The output is a single\n The format of the intermediate @file{.gcov} file is plain text with\n one entry per line\n \n+@item -j\n+@itemx --human-readable\n+Write counts in human readable format (like 24k).\n+\n @smallexample\n file:@var{source_file_name}\n function:@var{line_number},@var{execution_count},@var{function_name}"}, {"sha": "48bcdc0d4c39ef2dcc027451f167631a393c6e40", "filename": "gcc/gcov.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a4ef18ec053a15ccc224d4cc5c8860b03496b4/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a4ef18ec053a15ccc224d4cc5c8860b03496b4/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=29a4ef18ec053a15ccc224d4cc5c8860b03496b4", "patch": "@@ -431,6 +431,10 @@ static int flag_use_colors = 0;\n \n static int flag_all_blocks = 0;\n \n+/* Output human readable numbers.  */\n+\n+static int flag_human_readable_numbers = 0;\n+\n /* Output summary info for each function.  */\n \n static int flag_function_summary = 0;\n@@ -742,6 +746,7 @@ print_usage (int error_p)\n   fnotice (file, \"  -f, --function-summaries        Output summaries for each function\\n\");\n   fnotice (file, \"  -h, --help                      Print this help, then exit\\n\");\n   fnotice (file, \"  -i, --intermediate-format       Output .gcov file in intermediate text format\\n\");\n+  fnotice (file, \"  -j, --human-readable            Output human readable numbers\\n\");\n   fnotice (file, \"  -k, --use-colors                Emit colored output\\n\");\n   fnotice (file, \"  -l, --long-file-names           Use long output file names for included\\n\\\n                                     source files\\n\");\n@@ -784,6 +789,7 @@ static const struct option options[] =\n   { \"branch-probabilities\", no_argument,       NULL, 'b' },\n   { \"branch-counts\",        no_argument,       NULL, 'c' },\n   { \"intermediate-format\",  no_argument,       NULL, 'i' },\n+  { \"human-readable\",\t    no_argument,       NULL, 'j' },\n   { \"no-output\",            no_argument,       NULL, 'n' },\n   { \"long-file-names\",      no_argument,       NULL, 'l' },\n   { \"function-summaries\",   no_argument,       NULL, 'f' },\n@@ -807,7 +813,7 @@ process_args (int argc, char **argv)\n {\n   int opt;\n \n-  const char *opts = \"abcdfhiklmno:prs:uvwx\";\n+  const char *opts = \"abcdfhijklmno:prs:uvwx\";\n   while ((opt = getopt_long (argc, argv, opts, options, NULL)) != -1)\n     {\n       switch (opt)\n@@ -830,6 +836,9 @@ process_args (int argc, char **argv)\n \tcase 'l':\n \t  flag_long_names = 1;\n \t  break;\n+\tcase 'j':\n+\t  flag_human_readable_numbers = 1;\n+\t  break;\n \tcase 'k':\n \t  flag_use_colors = 1;\n \t  break;\n@@ -1914,6 +1923,33 @@ add_branch_counts (coverage_t *coverage, const arc_t *arc)\n     }\n }\n \n+/* Format COUNT, if flag_human_readable_numbers is set, return it human\n+   readable format.  */\n+\n+static char const *\n+format_count (gcov_type count)\n+{\n+  static char buffer[64];\n+  const char *units = \" kMGTPEZY\";\n+\n+  if (count < 1000 || !flag_human_readable_numbers)\n+    {\n+      sprintf (buffer, \"%\" PRId64, count);\n+      return buffer;\n+    }\n+\n+  unsigned i;\n+  gcov_type divisor = 1;\n+  for (i = 0; units[i+1]; i++, divisor *= 1000)\n+    {\n+      if (count + divisor / 2 < 1000 * divisor)\n+\tbreak;\n+    }\n+  gcov_type r  = (count + divisor / 2) / divisor;\n+  sprintf (buffer, \"%\" PRId64 \"%c\", r, units[i]);\n+  return buffer;\n+}\n+\n /* Format a GCOV_TYPE integer as either a percent ratio, or absolute\n    count.  If dp >= 0, format TOP/BOTTOM * 100 to DP decimal places.\n    If DP is zero, no decimal point is printed. Only print 100% when\n@@ -1961,7 +1997,7 @@ format_gcov (gcov_type top, gcov_type bottom, int dp)\n \t}\n     }\n   else\n-    sprintf (buffer, \"%\" PRId64, (int64_t)top);\n+    return format_count (top);\n \n   return buffer;\n }"}, {"sha": "37c15f06086c2d22cf53bd77653f21c85bc03525", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a4ef18ec053a15ccc224d4cc5c8860b03496b4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a4ef18ec053a15ccc224d4cc5c8860b03496b4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29a4ef18ec053a15ccc224d4cc5c8860b03496b4", "patch": "@@ -1,3 +1,8 @@\n+2017-10-31  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/gcov/loop.C: New test.\n+\t* lib/gcov.exp: Support human readable format for counts.\n+\n 2017-10-31  Martin Liska  <mliska@suse.cz>\n \n \t* g++.dg/gcov/ternary.C: New test."}, {"sha": "7f3be5587af964d1d71bb968a80bb33784abfa0d", "filename": "gcc/testsuite/g++.dg/gcov/loop.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a4ef18ec053a15ccc224d4cc5c8860b03496b4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Floop.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a4ef18ec053a15ccc224d4cc5c8860b03496b4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Floop.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Floop.C?ref=29a4ef18ec053a15ccc224d4cc5c8860b03496b4", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-options \"-fprofile-arcs -ftest-coverage\" } */\n+/* { dg-do run { target native } } */\n+\n+unsigned\n+loop (unsigned n, int value)\t\t  /* count(14k) */\n+{\n+  for (unsigned i = 0; i < n - 1; i++)\n+  {\n+    value += i;\t\t\t\t  /* count(21M) */\n+  }\n+\n+  return value;\n+}\n+\n+int main(int argc, char **argv)\n+{\n+  unsigned sum = 0;\n+  for (unsigned i = 0; i < 7 * 1000; i++)\n+  {\n+    sum += loop (1000, sum);\n+    sum += loop (2000, sum);\t\t  /* count(7k) */\n+  }\n+\n+  return 0;\t\t\t\t  /* count(1) */\n+}\n+\n+/* { dg-final { run-gcov branches { -abj loop.C } } } */"}, {"sha": "ede01e70212a0c50f696094891cef8bf348c8cad", "filename": "gcc/testsuite/lib/gcov.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a4ef18ec053a15ccc224d4cc5c8860b03496b4/gcc%2Ftestsuite%2Flib%2Fgcov.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a4ef18ec053a15ccc224d4cc5c8860b03496b4/gcc%2Ftestsuite%2Flib%2Fgcov.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcov.exp?ref=29a4ef18ec053a15ccc224d4cc5c8860b03496b4", "patch": "@@ -59,7 +59,7 @@ proc verify-lines { testname testcase file } {\n     while { [gets $fd line] >= 0 } {\n         # We want to match both \"-\" and \"#####\" as count as well as numbers,\n         # since we want to detect lines that shouldn't be marked as covered.\n-\tif [regexp \"^ *(\\[^:]*): *(\\[0-9\\\\-#]+):.*count\\\\((\\[0-9\\\\-#=]+)\\\\)(.*)\" \\\n+\tif [regexp \"^ *(\\[^:]*): *(\\[0-9\\\\-#]+):.*count\\\\((\\[0-9\\\\-#=\\\\.kMGTPEZY]+)\\\\)(.*)\" \\\n \t\t\"$line\" all is n shouldbe rest] {\n \t    if [regexp \"^ *{(.*)}\" $rest all xfailed] {\n \t\tswitch [dg-process-target $xfailed] {"}]}