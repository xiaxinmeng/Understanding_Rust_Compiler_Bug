{"sha": "9c5365902aaee9033ed781bfc5e8147060e5b130", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM1MzY1OTAyYWFlZTkwMzNlZDc4MWJmYzVlODE0NzA2MGU1YjEzMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-01-30T23:18:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-01-30T23:18:22Z"}, "message": "PR libstdc++/89117 fix path::replace_extension(\"\") case\n\nPreviously the operator+=(extension) call would have re-parsed the path\nand recreated the components with the right extension. Since optimising\nit to not re-parse the whole string, we need to actually remove the\nextension from the final filename before appending anything to it, and\nappend the dot to that final component too.\n\n\tPR libstdc++/89117\n\t* src/c++17/fs_path.cc (path::replace_extension): Erase extension from\n\tfinal component as well as from _M_pathname. Append the dot using\n\toperator+= instead of only to _M_pathname.\n\t(path::_M_find_extension): Reformat slightly.\n\t* testsuite/27_io/filesystem/path/modifiers/replace_extension.cc:\n\tAdd more test cases.\n\nFrom-SVN: r268406", "tree": {"sha": "adddb8ab176cad6dcdff325584717707152c33ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adddb8ab176cad6dcdff325584717707152c33ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c5365902aaee9033ed781bfc5e8147060e5b130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5365902aaee9033ed781bfc5e8147060e5b130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c5365902aaee9033ed781bfc5e8147060e5b130", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5365902aaee9033ed781bfc5e8147060e5b130/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1ac2471e7325d3e47d7b1c028c36be998f5747e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ac2471e7325d3e47d7b1c028c36be998f5747e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1ac2471e7325d3e47d7b1c028c36be998f5747e"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "36fcab95d7bc99ab7f699b060449de57b3c64ab4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5365902aaee9033ed781bfc5e8147060e5b130/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5365902aaee9033ed781bfc5e8147060e5b130/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9c5365902aaee9033ed781bfc5e8147060e5b130", "patch": "@@ -1,3 +1,13 @@\n+2019-01-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/89117\n+\t* src/c++17/fs_path.cc (path::replace_extension): Erase extension from\n+\tfinal component as well as from _M_pathname. Append the dot using\n+\toperator+= instead of only to _M_pathname.\n+\t(path::_M_find_extension): Reformat slightly.\n+\t* testsuite/27_io/filesystem/path/modifiers/replace_extension.cc:\n+\tAdd more test cases.\n+\n 2019-01-30  Ulrich Drepper  <drepper@redhat.com>\n \n \t* doc/xml/manual/status_cxx2020.xml: Update P0600 entry."}, {"sha": "db6a1cb29d8d367d2021f21ca9f5dc086716d23e", "filename": "libstdc++-v3/src/c++17/fs_path.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5365902aaee9033ed781bfc5e8147060e5b130/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5365902aaee9033ed781bfc5e8147060e5b130/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_path.cc?ref=9c5365902aaee9033ed781bfc5e8147060e5b130", "patch": "@@ -1258,17 +1258,16 @@ path::replace_extension(const path& replacement)\n \t_M_pathname.erase(ext.second);\n       else\n \t{\n-\t  const auto& back = _M_cmpts.back();\n-\t  if (ext.first != &back._M_pathname)\n-\t    _GLIBCXX_THROW_OR_ABORT(\n-\t\tstd::logic_error(\"path::replace_extension failed\"));\n+\t  auto& back = _M_cmpts.back();\n+\t  __glibcxx_assert( ext.first == &back._M_pathname );\n+\t  back._M_pathname.erase(ext.second);\n \t  _M_pathname.erase(back._M_pos + ext.second);\n \t}\n     }\n    // If replacement is not empty and does not begin with a dot character,\n    // a dot character is appended\n   if (!replacement.empty() && replacement.native()[0] != dot)\n-    _M_pathname += dot;\n+    operator+=(\".\");\n   operator+=(replacement);\n   return *this;\n }\n@@ -1803,8 +1802,9 @@ path::_M_find_extension() const\n \t{\n \t  if (sz <= 2 && (*s)[0] == dot)\n \t    return { s, string_type::npos };\n-\t  const auto pos = s->rfind(dot);\n-\t  return { s, pos ? pos : string_type::npos };\n+\t  if (const auto pos = s->rfind(dot))\n+\t    return { s , pos };\n+\t  return { s, string_type::npos };\n \t}\n     }\n   return {};"}, {"sha": "98f2e6e4c4179e507206c0daeb57754f112a09e4", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/modifiers/replace_extension.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5365902aaee9033ed781bfc5e8147060e5b130/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fmodifiers%2Freplace_extension.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5365902aaee9033ed781bfc5e8147060e5b130/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fmodifiers%2Freplace_extension.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fmodifiers%2Freplace_extension.cc?ref=9c5365902aaee9033ed781bfc5e8147060e5b130", "patch": "@@ -33,6 +33,15 @@ test01()\n   compare_paths( path(\"/foo.txt\").replace_extension(\"cpp\"), \"/foo.cpp\" );\n   compare_paths( path(\"/foo.txt\").replace_extension(\".cpp\"), \"/foo.cpp\" );\n   compare_paths( path(\"/\").replace_extension(\"bar\"), \"/.bar\" );\n+  compare_paths( path(\"/\").replace_extension(\".bar\"), \"/.bar\" );\n+  compare_paths( path(\"/dir/\").replace_extension(\"bar\"), \"/dir/.bar\" );\n+  compare_paths( path(\"dir/foo\").replace_extension(\"bar\"), \"dir/foo.bar\" );\n+\n+  // PR 89117:\n+  compare_paths( path(\"/foo.txt\").replace_extension(), \"/foo\" );\n+  compare_paths( path(\"foo.txt\").replace_extension(), \"foo\" );\n+  compare_paths( path(\"/foo\").replace_extension(), \"/foo\" );\n+  compare_paths( path(\"foo\").replace_extension(), \"foo\" );\n }\n \n void"}]}