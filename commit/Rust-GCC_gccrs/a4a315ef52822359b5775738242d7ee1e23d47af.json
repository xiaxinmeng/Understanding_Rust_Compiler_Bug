{"sha": "a4a315ef52822359b5775738242d7ee1e23d47af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRhMzE1ZWY1MjgyMjM1OWI1Nzc1NzM4MjQyZDdlZTFlMjNkNDdhZg==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1996-01-16T23:46:59Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1996-01-16T23:46:59Z"}, "message": "cppexp.c (cpp_lex): Do cpp_pop_buffer after CPP_POP so retried cpp_skip_hspace will actually work.\n\n* cppexp.c (cpp_lex):  Do cpp_pop_buffer after CPP_POP so retried\ncpp_skip_hspace will actually work.\n* cppexp.c (SKIP_OPERAND):  New macro.\n(cpp_parse_expr):  Suppress evaluation and diagnostics in\nunevaluated subexpressions.\n\nFrom-SVN: r11034", "tree": {"sha": "d30185ad6538989330b0795e888ef903019524bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d30185ad6538989330b0795e888ef903019524bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4a315ef52822359b5775738242d7ee1e23d47af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4a315ef52822359b5775738242d7ee1e23d47af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4a315ef52822359b5775738242d7ee1e23d47af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4a315ef52822359b5775738242d7ee1e23d47af/comments", "author": null, "committer": null, "parents": [{"sha": "9ba73d3880e060602e86ca1a048969fe8b1baea7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ba73d3880e060602e86ca1a048969fe8b1baea7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ba73d3880e060602e86ca1a048969fe8b1baea7"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "b830f9b71ac465097063c68482eca0f1959b5838", "filename": "gcc/cppexp.c", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a315ef52822359b5775738242d7ee1e23d47af/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a315ef52822359b5775738242d7ee1e23d47af/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=a4a315ef52822359b5775738242d7ee1e23d47af", "patch": "@@ -121,7 +121,10 @@ static long right_shift ();\n #define LEFT_OPERAND_REQUIRED 1\n #define RIGHT_OPERAND_REQUIRED 2\n #define HAVE_VALUE 4\n-/*#define UNSIGNEDP 8*/\n+/* SKIP_OPERAND is set for '&&' '||' '?' and ':' when the\n+   following operand should be short-circuited instead of evaluated. */\n+#define SKIP_OPERAND 8\n+/*#define UNSIGNEDP 16*/\n \n #ifndef HOST_BITS_PER_WIDE_INT\n \n@@ -308,15 +311,16 @@ cpp_reader *pfile;\n   switch (token)\n   {\n     case CPP_EOF: /* Should not happen ... */\n+    case CPP_VSPACE:\n       op.op = 0;\n       return op;\n-    case CPP_VSPACE:\n     case CPP_POP:\n       if (CPP_BUFFER (pfile)->fname != NULL)\n \t{\n \t  op.op = 0;\n \t  return op;\n \t}\n+      cpp_pop_buffer (pfile);\n       goto retry;\n     case CPP_HSPACE:   case CPP_COMMENT: \n       goto retry;\n@@ -670,6 +674,7 @@ cpp_parse_expr (pfile)\n   struct operation *limit = stack + INIT_STACK_SIZE;\n   register struct operation *top = stack;\n   int lprio, rprio;\n+  int skip_evaluation = 0;\n \n   top->rprio = 0;\n   top->flags = 0;\n@@ -782,13 +787,14 @@ cpp_parse_expr (pfile)\n \t\t{\n \t\t  top->value = v1 + v2;\n \t\t  top->unsignedp = unsigned1 || unsigned2;\n-\t\t  if (! top->unsignedp\n+\t\t  if (! top->unsignedp && ! skip_evaluation\n \t\t      && ! possible_sum_sign (v1, v2, top->value))\n \t\t    integer_overflow (pfile);\n \t\t}\n \t      break;\n \t    case '-':\n-\t      if (!(top->flags & HAVE_VALUE))\n+\t      if (skip_evaluation) ;\t/* do nothing */\n+\t      else if (!(top->flags & HAVE_VALUE))\n \t\t{ /* Unary '-' */\n \t\t  top->value = - v2;\n \t\t  if ((top->value & v2) < 0 && ! unsigned2)\n@@ -809,7 +815,7 @@ cpp_parse_expr (pfile)\n \t      top->unsignedp = unsigned1 || unsigned2;\n \t      if (top->unsignedp)\n \t\ttop->value = (unsigned long) v1 * v2;\n-\t      else\n+\t      else if (!skip_evaluation)\n \t\t{\n \t\t  top->value = v1 * v2;\n \t\t  if (v1\n@@ -819,6 +825,8 @@ cpp_parse_expr (pfile)\n \t\t}\n \t      break;\n \t    case '/':\n+\t      if (skip_evaluation)\n+\t\tbreak;\n \t      if (v2 == 0)\n \t\t{\n \t\t  cpp_error (pfile, \"division by zero in #if\");\n@@ -835,6 +843,8 @@ cpp_parse_expr (pfile)\n \t\t}\n \t      break;\n \t    case '%':\n+\t      if (skip_evaluation)\n+\t\tbreak;\n \t      if (v2 == 0)\n \t\t{\n \t\t  cpp_error (pfile, \"division by zero in #if\");\n@@ -879,13 +889,17 @@ cpp_parse_expr (pfile)\n \t      top->unsignedp = 0;\n \t      break;\n \t    case LSH:\n+\t      if (skip_evaluation)\n+\t\tbreak;\n \t      top->unsignedp = unsigned1;\n \t      if (v2 < 0 && ! unsigned2)\n \t\ttop->value = right_shift (pfile, v1, unsigned1, -v2);\n \t      else\n \t\ttop->value = left_shift (pfile, v1, unsigned1, v2);\n \t      break;\n \t    case RSH:\n+\t      if (skip_evaluation)\n+\t\tbreak;\n \t      top->unsignedp = unsigned1;\n \t      if (v2 < 0 && ! unsigned2)\n \t\ttop->value = left_shift (pfile, v1, unsigned1, -v2);\n@@ -899,9 +913,13 @@ cpp_parse_expr (pfile)\n \t    case '^':  LOGICAL(^);  break;\n \t    case '|':  LOGICAL(|);  break;\n \t    case ANDAND:\n-\t      top->value = v1 && v2;  top->unsignedp = 0;  break;\n+\t      top->value = v1 && v2;  top->unsignedp = 0;\n+\t      if (!v1) skip_evaluation--;\n+\t      break;\n \t    case OROR:\n-\t      top->value = v1 || v2;  top->unsignedp = 0;  break;\n+\t      top->value = v1 || v2;  top->unsignedp = 0;\n+\t      if (v1) skip_evaluation--;\n+\t      break;\n \t    case ',':\n \t      if (CPP_PEDANTIC (pfile))\n \t\tcpp_pedwarn (pfile, \"comma operator in operand of `#if'\");\n@@ -928,6 +946,7 @@ cpp_parse_expr (pfile)\n \t      else\n \t\t{\n \t\t  top--;\n+\t\t  if (top->value) skip_evaluation--;\n \t\t  top->value = top->value ? v1 : v2;\n \t\t  top->unsignedp = unsigned1 || unsigned2;\n \t\t}\n@@ -988,6 +1007,19 @@ cpp_parse_expr (pfile)\n       top->flags = flags;\n       top->rprio = rprio;\n       top->op = op.op;\n+      if ((op.op == OROR && top[-1].value)\n+\t  || (op.op == ANDAND && !top[-1].value)\n+\t  || (op.op == '?' && !top[-1].value))\n+\t{\n+\t  skip_evaluation++;\n+\t}\n+      else if (op.op == ':')\n+\t{\n+\t  if (top[-2].value) /* Was condition true? */\n+\t    skip_evaluation++;\n+\t  else\n+\t    skip_evaluation--;\n+\t}\n     }\n  syntax_error:\n   if (stack != init_stack)"}]}