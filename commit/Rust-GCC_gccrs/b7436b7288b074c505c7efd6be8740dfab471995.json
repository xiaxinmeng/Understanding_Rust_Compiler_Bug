{"sha": "b7436b7288b074c505c7efd6be8740dfab471995", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc0MzZiNzI4OGIwNzRjNTA1YzdlZmQ2YmU4NzQwZGZhYjQ3MTk5NQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-11-04T04:57:33Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-11-04T04:57:33Z"}, "message": "lang-options.h: Mention -Wout-of-date.\n\n\t* lang-options.h: Mention -Wout-of-date.\n\t* jcf-dump.c (flag_newer): New global.\n\t* gjavah.c (flag_newer): New global.\n\t* jcf-io.c (find_class): Only warn when flag_newer set.\n\t* lang.c (flag_newer): New global.\n\t(struct string_option): New declaration.\n\t(lang_W_options): New global.\n\t(process_option_with_no): New function.\n\t(lang_decode_option): Use it.\n\nFrom-SVN: r37244", "tree": {"sha": "cf40e4641c23b927eab437ca1b6fad40488aed6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf40e4641c23b927eab437ca1b6fad40488aed6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7436b7288b074c505c7efd6be8740dfab471995", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7436b7288b074c505c7efd6be8740dfab471995", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7436b7288b074c505c7efd6be8740dfab471995", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7436b7288b074c505c7efd6be8740dfab471995/comments", "author": null, "committer": null, "parents": [{"sha": "0160fbe1508e18e4ff7b50822b3620f69cffe400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0160fbe1508e18e4ff7b50822b3620f69cffe400", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0160fbe1508e18e4ff7b50822b3620f69cffe400"}], "stats": {"total": 122, "additions": 84, "deletions": 38}, "files": [{"sha": "6528d40cbf5271ae05dfb58a1e557aeef9f41c0c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7436b7288b074c505c7efd6be8740dfab471995/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7436b7288b074c505c7efd6be8740dfab471995/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b7436b7288b074c505c7efd6be8740dfab471995", "patch": "@@ -1,5 +1,15 @@\n 2000-11-03  Tom Tromey  <tromey@cygnus.com>\n \n+\t* lang-options.h: Mention -Wout-of-date.\n+\t* jcf-dump.c (flag_newer): New global.\n+\t* gjavah.c (flag_newer): New global.\n+\t* jcf-io.c (find_class): Only warn when flag_newer set.\n+\t* lang.c (flag_newer): New global.\n+\t(struct string_option): New declaration.\n+\t(lang_W_options): New global.\n+\t(process_option_with_no): New function.\n+\t(lang_decode_option): Use it.\n+\n \t* class.c (cxx_keyword_p): Accept keywords with trailing `$'s.\n \t* gjavah.c (cxx_keyword_subst): Handle any number of trailing\n \t`$'."}, {"sha": "6e6075ea0ffdda3e1ab30bfc6c4f3a01f0703ff6", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7436b7288b074c505c7efd6be8740dfab471995/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7436b7288b074c505c7efd6be8740dfab471995/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=b7436b7288b074c505c7efd6be8740dfab471995", "patch": "@@ -47,6 +47,10 @@ static int found_error = 0;\n /* Nonzero if we're generating JNI output.  */\n static int flag_jni = 0;\n \n+/* When non zero, warn when source file is newer than matching class\n+   file.  */\n+int flag_newer = 1;\n+\n /* Directory to place resulting files in. Set by -d option. */\n const char *output_directory = \"\";\n "}, {"sha": "27533670b9e71dc9ad988175713ebd645f5c1636", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7436b7288b074c505c7efd6be8740dfab471995/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7436b7288b074c505c7efd6be8740dfab471995/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=b7436b7288b074c505c7efd6be8740dfab471995", "patch": "@@ -162,6 +162,10 @@ extern int flag_redundant;\n extern int flag_not_overriding;\n extern int flag_static_local_jdk1_1;\n \n+/* When non zero, warn when source file is newer than matching class\n+   file.  */\n+extern int flag_newer;\n+\n /* When non zero, call a library routine to do integer divisions. */\n extern int flag_use_divide_subroutine;\n "}, {"sha": "1becf16e33e31cbd454c20c9c071c1da8844142f", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7436b7288b074c505c7efd6be8740dfab471995/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7436b7288b074c505c7efd6be8740dfab471995/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=b7436b7288b074c505c7efd6be8740dfab471995", "patch": "@@ -71,6 +71,10 @@ int flag_print_fields = 1;\n int flag_print_methods = 1;\n int flag_print_attributes = 1;\n \n+/* When non zero, warn when source file is newer than matching class\n+   file.  */\n+int flag_newer = 1;\n+\n /* Print names of classes that have a \"main\" method. */\n int flag_print_main = 0;\n "}, {"sha": "db19208288152da70486ba0261b2e8a07a3139d1", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7436b7288b074c505c7efd6be8740dfab471995/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7436b7288b074c505c7efd6be8740dfab471995/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=b7436b7288b074c505c7efd6be8740dfab471995", "patch": "@@ -403,7 +403,8 @@ DEFUN(find_class, (classname, classname_length, jcf, source_ok),\n \ti--;\n       \n       stripped_class_name [i] = '\\0';\n-      warning (\"Source file for class `%s' is newer than its matching class file. Source file used instead\", stripped_class_name);\n+      if (flag_newer)\n+\twarning (\"Source file for class `%s' is newer than its matching class file. Source file used instead\", stripped_class_name);\n       free (stripped_class_name);\n       class = -1;\n     }"}, {"sha": "25a501573d02a039ae4480cb1466550deee366a7", "filename": "gcc/java/lang-options.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7436b7288b074c505c7efd6be8740dfab471995/gcc%2Fjava%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7436b7288b074c505c7efd6be8740dfab471995/gcc%2Fjava%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang-options.h?ref=b7436b7288b074c505c7efd6be8740dfab471995", "patch": "@@ -57,3 +57,4 @@ DEFINE_LANG_NAME (\"Java\")\n     \"Warn if modifiers are specified when not necessary\"},\n   { \"-Wunsupported-jdk11\", \"Warn if `final' local variables are specified\"},\n   { \"-Wextraneous-semicolon\", \"Warn if deprecated empty statements are found\"},\n+  { \"-Wout-of-date\", \"Warn if .class files are out of date\" },"}, {"sha": "b90abdb461ef94585f5da44c836cc26f8d49177e", "filename": "gcc/java/lang.c", "status": "modified", "additions": 59, "deletions": 37, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7436b7288b074c505c7efd6be8740dfab471995/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7436b7288b074c505c7efd6be8740dfab471995/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=b7436b7288b074c505c7efd6be8740dfab471995", "patch": "@@ -37,10 +37,20 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"xref.h\"\n #include \"ggc.h\"\n \n+struct string_option\n+{\n+  const char *string;\n+  int *variable;\n+  int on_value;\n+};\n+\n static void put_decl_string PARAMS ((const char *, int));\n static void put_decl_node PARAMS ((tree));\n static void java_dummy_print PARAMS ((const char *));\n static void lang_print_error PARAMS ((const char *));\n+static int process_option_with_no PARAMS ((char *,\n+\t\t\t\t\t   struct string_option *,\n+\t\t\t\t\t   int));\n \n #ifndef OBJECT_SUFFIX\n # define OBJECT_SUFFIX \".o\"\n@@ -122,6 +132,10 @@ int flag_hash_synchronization;\n    JNI, not CNI.  */\n int flag_jni = 0;\n \n+/* When non zero, warn when source file is newer than matching class\n+   file.  */\n+int flag_newer = 1;\n+\n /* The encoding of the source file.  */\n const char *current_encoding = NULL;\n \n@@ -139,7 +153,7 @@ extern int flag_exceptions;\n     if `-fSTRING' is seen as an option.\n    (If `-fno-STRING' is seen as an option, the opposite value is stored.)  */\n \n-static struct { const char *string; int *variable; int on_value;}\n+static struct string_option\n lang_f_options[] =\n {\n   {\"emit-class-file\", &flag_emit_class_files, 1},\n@@ -150,6 +164,15 @@ lang_f_options[] =\n   {\"jni\", &flag_jni, 1}\n };\n \n+static struct string_option\n+lang_W_options[] =\n+{\n+  { \"unsupported-jdk11\", &flag_static_local_jdk1_1, 1 },\n+  { \"redundant-modifiers\", &flag_redundant, 1 },\n+  { \"extraneous-semicolon\", &flag_extraneous_semicolon, 1 },\n+  { \"out-of-date\", &flag_newer, 1 }\n+};\n+\n JCF *current_jcf;\n \n /* Variable controlling how dependency tracking is enabled in\n@@ -162,6 +185,34 @@ static int dependency_tracking = 0;\n #define DEPEND_TARGET_SET 4\n #define DEPEND_FILE_ALREADY_SET 8\n \n+/* Process an option that can accept a `no-' form.\n+   Return 1 if option found, 0 otherwise.  */\n+static int\n+process_option_with_no (p, table, table_size)\n+     char *p;\n+     struct string_option *table;\n+     int table_size;\n+{\n+  int j;\n+\n+  for (j = 0; j < table_size; j++)\n+    {\n+      if (!strcmp (p, table[j].string))\n+\t{\n+\t  *table[j].variable = table[j].on_value;\n+\t  return 1;\n+\t}\n+      if (p[0] == 'n' && p[1] == 'o' && p[2] == '-'\n+\t  && ! strcmp (p+3, table[j].string))\n+\t{\n+\t  *table[j].variable = ! table[j].on_value;\n+\t  return 1;\n+\t}\n+    }\n+\n+  return 0;\n+}\n+\n /*\n  * process java-specific compiler command-line options\n  * return 0, but do not complain if the option is not recognised.\n@@ -241,28 +292,9 @@ lang_decode_option (argc, argv)\n       /* Some kind of -f option.\n \t P's value is the option sans `-f'.\n \t Search for it in the table of options.  */\n-      int found = 0, j;\n-\n       p += 2;\n-\n-      for (j = 0; !found && j < (int) ARRAY_SIZE (lang_f_options); j++)\n-\t{\n-\t  if (!strcmp (p, lang_f_options[j].string))\n-\t    {\n-\t      *lang_f_options[j].variable = lang_f_options[j].on_value;\n-\t      /* A goto here would be cleaner,\n-\t\t but breaks the vax pcc.  */\n-\t      found = 1;\n-\t    }\n-\t  if (p[0] == 'n' && p[1] == 'o' && p[2] == '-'\n-\t      && ! strcmp (p+3, lang_f_options[j].string))\n-\t    {\n-\t      *lang_f_options[j].variable = ! lang_f_options[j].on_value;\n-\t      found = 1;\n-\t    }\n-\t}\n-\n-      return found;\n+      return process_option_with_no (p, lang_f_options,\n+\t\t\t\t     ARRAY_SIZE (lang_f_options));\n     }\n \n   if (strcmp (p, \"-Wall\") == 0)\n@@ -276,22 +308,12 @@ lang_decode_option (argc, argv)\n       return 1;\n     }\n \n-  if (strcmp (p, \"-Wunsupported-jdk11\") == 0)\n-    {\n-      flag_static_local_jdk1_1 = 1;\n-      return 1;\n-    }\n-\n-  if (strcmp (p, \"-Wredundant-modifiers\") == 0)\n-    {\n-      flag_redundant = 1;\n-      return 1;\n-    }\n-\n-  if (strcmp (p, \"-Wextraneous-semicolon\") == 0)\n+  if (p[0] == '-' && p[1] == 'W')\n     {\n-      flag_extraneous_semicolon = 1;\n-      return 1;\n+      /* Skip `-W' and see if we accept the option or its `no-' form.  */\n+      p += 2;\n+      return process_option_with_no (p, lang_W_options,\n+\t\t\t\t     ARRAY_SIZE (lang_W_options));\n     }\n \n   if (strcmp (p, \"-MD\") == 0)"}]}