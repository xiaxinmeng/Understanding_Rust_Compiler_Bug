{"sha": "7a9942f52157987785e964fe602306d477d1885e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E5OTQyZjUyMTU3OTg3Nzg1ZTk2NGZlNjAyMzA2ZDQ3N2QxODg1ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-09-26T16:08:39Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-09-26T16:08:39Z"}, "message": "Implement C++20 constexpr changes to std::pair (P1032R1)\n\n\t* include/bits/stl_pair.h (pair): Add _GLIBCXX20_CONSTEXPR to\n\tpiecewise construction constructor, assignment operators, and swap.\n\t* include/std/tuple (pair::pair(piecewise_construct_t, tuple, tuple)):\n\tAdd _GLIBCXX20_CONSTEXPR.\n\t(pair::pair(tuple, tuple, _Index_tuple, _Index_tuple)): Likewise.\n\t* testsuite/20_util/pair/constexpr_assign.cc: New test.\n\t* testsuite/20_util/pair/constexpr_swap.cc: New test.\n\nFrom-SVN: r276154", "tree": {"sha": "66954878a69708cc1f8758998654506c78e89378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66954878a69708cc1f8758998654506c78e89378"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a9942f52157987785e964fe602306d477d1885e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a9942f52157987785e964fe602306d477d1885e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a9942f52157987785e964fe602306d477d1885e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a9942f52157987785e964fe602306d477d1885e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5f7e04923c5fe55db12e7da006c41c3853b4ddb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5f7e04923c5fe55db12e7da006c41c3853b4ddb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5f7e04923c5fe55db12e7da006c41c3853b4ddb"}], "stats": {"total": 111, "additions": 99, "deletions": 12}, "files": [{"sha": "83e3225a432d4bb1307368561fcff11338bbe1c2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9942f52157987785e964fe602306d477d1885e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9942f52157987785e964fe602306d477d1885e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7a9942f52157987785e964fe602306d477d1885e", "patch": "@@ -1,5 +1,13 @@\n 2019-09-26  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/stl_pair.h (pair): Add _GLIBCXX20_CONSTEXPR to\n+\tpiecewise construction constructor, assignment operators, and swap.\n+\t* include/std/tuple (pair::pair(piecewise_construct_t, tuple, tuple)):\n+\tAdd _GLIBCXX20_CONSTEXPR.\n+\t(pair::pair(tuple, tuple, _Index_tuple, _Index_tuple)): Likewise.\n+\t* testsuite/20_util/pair/constexpr_assign.cc: New test.\n+\t* testsuite/20_util/pair/constexpr_swap.cc: New test.\n+\n \t* include/experimental/internet (operator==, operator<): Fix loop\n \tcondition to avoid reading past the end of the array.\n "}, {"sha": "f7ad169654586c6065fe8b1eaeed73fd1d437428", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9942f52157987785e964fe602306d477d1885e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9942f52157987785e964fe602306d477d1885e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=7a9942f52157987785e964fe602306d477d1885e", "patch": "@@ -380,9 +380,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  second(std::forward<_U2>(__p.second)) { }\n \n       template<typename... _Args1, typename... _Args2>\n+\t_GLIBCXX20_CONSTEXPR\n         pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);\n \n-      pair&\n+      _GLIBCXX20_CONSTEXPR pair&\n       operator=(typename conditional<\n \t\t__and_<is_copy_assignable<_T1>,\n \t\t       is_copy_assignable<_T2>>::value,\n@@ -393,7 +394,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n-      pair&\n+      _GLIBCXX20_CONSTEXPR pair&\n       operator=(typename conditional<\n \t\t__and_<is_move_assignable<_T1>,\n \t\t       is_move_assignable<_T2>>::value,\n@@ -407,9 +408,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       template<typename _U1, typename _U2>\n-      typename enable_if<__and_<is_assignable<_T1&, const _U1&>,\n-\t\t\t\tis_assignable<_T2&, const _U2&>>::value,\n-\t\t\t pair&>::type\n+\t_GLIBCXX20_CONSTEXPR\n+\ttypename enable_if<__and_<is_assignable<_T1&, const _U1&>,\n+\t\t\t\t  is_assignable<_T2&, const _U2&>>::value,\n+\t\t\t   pair&>::type\n \toperator=(const pair<_U1, _U2>& __p)\n \t{\n \t  first = __p.first;\n@@ -418,9 +420,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _U1, typename _U2>\n-      typename enable_if<__and_<is_assignable<_T1&, _U1&&>,\n-\t\t\t\tis_assignable<_T2&, _U2&&>>::value,\n-\t\t\t pair&>::type\n+\t_GLIBCXX20_CONSTEXPR\n+\ttypename enable_if<__and_<is_assignable<_T1&, _U1&&>,\n+\t\t\t\t  is_assignable<_T2&, _U2&&>>::value,\n+\t\t\t   pair&>::type\n \toperator=(pair<_U1, _U2>&& __p)\n \t{\n \t  first = std::forward<_U1>(__p.first);\n@@ -429,7 +432,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       /// Swap the first members and then the second members.\n-      void\n+      _GLIBCXX20_CONSTEXPR void\n       swap(pair& __p)\n       noexcept(__and_<__is_nothrow_swappable<_T1>,\n                       __is_nothrow_swappable<_T2>>::value)\n@@ -442,6 +445,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     private:\n       template<typename... _Args1, std::size_t... _Indexes1,\n                typename... _Args2, std::size_t... _Indexes2>\n+\t_GLIBCXX20_CONSTEXPR\n         pair(tuple<_Args1...>&, tuple<_Args2...>&,\n              _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);\n #endif\n@@ -503,7 +507,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * which has performance implications, e.g. see https://gcc.gnu.org/PR38466\n   */\n   template<typename _T1, typename _T2>\n-    inline\n+    _GLIBCXX20_CONSTEXPR inline\n #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n     // Constrained free swap overload, see p0185r1\n     typename enable_if<__and_<__is_swappable<_T1>,"}, {"sha": "ae1a3d0d18b645a17761d10249d2fb3914c9f062", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9942f52157987785e964fe602306d477d1885e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9942f52157987785e964fe602306d477d1885e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=7a9942f52157987785e964fe602306d477d1885e", "patch": "@@ -1570,7 +1570,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<class _T1, class _T2>\n     template<typename... _Args1, typename... _Args2>\n-      inline\n+      _GLIBCXX20_CONSTEXPR inline\n       pair<_T1, _T2>::\n       pair(piecewise_construct_t,\n \t   tuple<_Args1...> __first, tuple<_Args2...> __second)\n@@ -1582,7 +1582,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<class _T1, class _T2>\n     template<typename... _Args1, std::size_t... _Indexes1,\n              typename... _Args2, std::size_t... _Indexes2>\n-      inline\n+      _GLIBCXX20_CONSTEXPR inline\n       pair<_T1, _T2>::\n       pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,\n \t   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)"}, {"sha": "7abf2370658fb0a6363b7129d1000d15fa544097", "filename": "libstdc++-v3/testsuite/20_util/pair/constexpr_assign.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9942f52157987785e964fe602306d477d1885e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fconstexpr_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9942f52157987785e964fe602306d477d1885e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fconstexpr_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fconstexpr_assign.cc?ref=7a9942f52157987785e964fe602306d477d1885e", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <utility>\n+#include <tuple>\n+\n+constexpr int\n+test01(int i, int j)\n+{\n+  using T = std::tuple<int>;\n+  std::pair<int, int> p0, p1, p2, p3;\n+  std::pair<int, int> pij(std::piecewise_construct, T(i), T(j));\n+  p0 = pij;\n+  p1 = std::move(pij);\n+  std::pair<long, long> pijl(i, j);\n+  p2 = pijl;\n+  p3 = std::move(pijl);\n+  return p0.first + p0.second + p1.first + p1.second\n+    + p2.first + p2.second + p3.first + p3.second;\n+}\n+\n+static_assert( test01(3, 100) == 412 );"}, {"sha": "a69308b1d5e91b9c9c72c99350c33454e12e4dd1", "filename": "libstdc++-v3/testsuite/20_util/pair/constexpr_swap.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9942f52157987785e964fe602306d477d1885e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fconstexpr_swap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9942f52157987785e964fe602306d477d1885e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fconstexpr_swap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fconstexpr_swap.cc?ref=7a9942f52157987785e964fe602306d477d1885e", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <utility>\n+#include <tuple>\n+\n+constexpr int\n+test01(int i, int j)\n+{\n+  using T = std::tuple<int>;\n+  std::pair<int, int> p0, p1;\n+  std::pair<int, int> pij(std::piecewise_construct, T(i), T(j));\n+  std::pair<int, int> pji(std::piecewise_construct, T(j), T(i));\n+  p0.swap(pij);\n+  swap(p1, pji);\n+  return p0.first - p0.second - p1.first + p1.second;\n+}\n+\n+static_assert( test01(5, 100) == -190 );"}]}