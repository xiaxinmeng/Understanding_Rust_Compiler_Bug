{"sha": "b1b7599ca52f3ba94deea842c80286194d516210", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFiNzU5OWNhNTJmM2JhOTRkZWVhODQyYzgwMjg2MTk0ZDUxNjIxMA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-06T20:30:17Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-11T14:32:20Z"}, "message": "testsuite, Objective-C : Update forward-1.m.\n\nNewer versions of the runtime / NSObject don't respond to forward:.\nThis uses the replacement.\n\ngcc/testsuite/ChangeLog:\n\n\t* objc.dg/torture/forward-1.m: Implement forwarding using the\n\tnative NeXT (NSInvocation) method for Darwin.", "tree": {"sha": "97bcce33cbbffbafc2c221e0a2c1401b19c35174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97bcce33cbbffbafc2c221e0a2c1401b19c35174"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1b7599ca52f3ba94deea842c80286194d516210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1b7599ca52f3ba94deea842c80286194d516210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1b7599ca52f3ba94deea842c80286194d516210", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1b7599ca52f3ba94deea842c80286194d516210/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40330e70770d1c42ca51f6d84b70b04537687bc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40330e70770d1c42ca51f6d84b70b04537687bc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40330e70770d1c42ca51f6d84b70b04537687bc5"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "a25012de25c77ab35ce5d5a0b7b0cf218902029e", "filename": "gcc/testsuite/objc.dg/torture/forward-1.m", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b7599ca52f3ba94deea842c80286194d516210/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fforward-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b7599ca52f3ba94deea842c80286194d516210/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fforward-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fforward-1.m?ref=b1b7599ca52f3ba94deea842c80286194d516210", "patch": "@@ -1,32 +1,53 @@\n /* { dg-do run } */\n /* See if -forward:: is able to work. */\n /* { dg-skip-if \"Needs OBJC2 Implementation\" { *-*-darwin8* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-\n+/* { dg-additional-options \"-Wl,-framework,Foundation\" { target *-*-darwin* } } */\n #include <stdio.h>\n #include <stdlib.h>\n \n+/* Versions of the runtime after 10.13 no longer support the original\n+   'forward:' mechanism, so we make a stripped down representation of\n+   NSInvocation and need to link with -framework Foundation.  */\n+#if __NEXT_RUNTIME__\n+@class  NSInvocation, NSMethodSignature;\n+# include \"../../objc-obj-c++-shared/F-NSObject.h\"\n+@interface NSInvocation : NSObject\n++ (NSInvocation *)invocationWithMethodSignature:(NSMethodSignature *)sig;\n+@property SEL selector;\n+- (void)invoke;\n+- (void)invokeWithTarget:(id)target;\n+@end\n+# define OBJECT NSObject\n+#else\n #include \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n+#define OBJECT TestsuiteObject\n+#endif\n \n #define VALUETOUSE 1234567890\n \n id forwarder, receiver;\n \n-@interface Forwarder: TestsuiteObject\n+@interface Forwarder : OBJECT\n {\n     id receiver;\n }\n \n -initWithReceiver:theReceiver;\n+#if __NEXT_RUNTIME__\n+- (void)forwardInvocation:(NSInvocation *)anInvocation;\n+- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector;\n+#endif\n \n @end\n \n-@interface Receiver:TestsuiteObject\n+@interface Receiver : OBJECT\n {\n     int foo;\n }\n -display;\n -initWithFoo:(int)theFoo;\n @end\n+\n @implementation Receiver\n \n -initWithFoo: (int)theFoo\n@@ -56,7 +77,22 @@ @implementation Forwarder\n     receiver = theReceiver;\n     return self;\n }\n--(void *) forward: (SEL)theSel: (void *)theArgFrame\n+\n+#if __NEXT_RUNTIME__\n+- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSel\n+{\n+ return [receiver methodSignatureForSelector:aSel];\n+}\n+- (void)forwardInvocation:(NSInvocation *)anInvocation\n+{\n+    if ([receiver respondsToSelector:[anInvocation selector]]) {\n+        [anInvocation invokeWithTarget:receiver];\n+    }\n+    else {\n+    }\n+}\n+#else\n+-(void *) forward:(SEL)theSel : (void *)theArgFrame\n {\n   /* If we have a reciever try to perform on that object */\n     if (receiver)\n@@ -75,6 +111,8 @@ -(void *) forward: (SEL)theSel: (void *)theArgFrame\n     printf (\"Unrecognized selector\\n\");\n     return NULL;\n }\n+#endif\n+\n @end\n int main()\n {"}]}