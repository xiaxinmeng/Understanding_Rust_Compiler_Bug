{"sha": "38c4e50d8c738553de6f5e7a5fee3b55728ea457", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhjNGU1MGQ4YzczODU1M2RlNmY1ZTdhNWZlZTNiNTU3MjhlYTQ1Nw==", "commit": {"author": {"name": "Dmitriy Anisimkov", "email": "anisimko@adacore.com", "date": "2019-09-17T07:59:23Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-17T07:59:23Z"}, "message": "[Ada] Support for local unix sockets in GNAT.Sockets API\n\nSock_Addr_Type has Family_Unix variant now. This variant can be created\nwith function Unix_Local_Addr call. And this variant is working in\nGNAT.Socket routines where it is appropriate.\n\n2019-09-17  Dmitriy Anisimkov  <anisimko@adacore.com>\n\ngcc/ada/\n\n\t* gsocket.h: Include sys/un.h.\n\t* s-oscons-tmplt.c (AF_UNIX): New constant generation.\n\t(SIZEOF_sockaddr_un): Idem.\n\t* libgnat/g-socket.ads (Family_Type): New value Family_Unix\n\tadded.\n\t(Family_Inet_4_6): New subtype only for network families.\n\t(Sock_Addr_Type): Add Unbounded_String field for Family_Unix\n\tvariant.\n\t(Unix_Socket_Address): Create Sock_Addr_Type from socket\n\tpathname.\n\t(Network_Socket_Address): Create Sock_Addr_Type from\n\tInet_Addr_Type and Port_Type parameters.\n\t* libgnat/g-socket.adb: Support local unix address in socket\n\troutines.\n\t(Get_Address_Info): Disable warning about Result may be\n\treferenced before it has a value. Remove duplicated code to exit\n\tfrom Look_For_Supported.\n\t* libgnat/g-sothco.ads (Unix_Name_Length): New constant defining\n\tmaximum number of characters in local socket address path.\n\t(Sockaddr): Add variant for Family_Unix address family. Move\n\tSin_Port and Sin_Family to Family_Inet section. Add Sin6_Port\n\tand Sin6_Family to Family_Inet6 section.\n\t(Set_Address): Add out parameter Length to return valuable\n\tSockaddr data length.\n\t(Get_Address): Add input parameter Length to set valuable\n\tSockaddr data length.\n\t* libgnat/g-sothco.adb: Support local unix address in socket\n\troutines.\n\nFrom-SVN: r275770", "tree": {"sha": "12f8f4d4fe58df84863fd3f7203becd9106b0dbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12f8f4d4fe58df84863fd3f7203becd9106b0dbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38c4e50d8c738553de6f5e7a5fee3b55728ea457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38c4e50d8c738553de6f5e7a5fee3b55728ea457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38c4e50d8c738553de6f5e7a5fee3b55728ea457", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38c4e50d8c738553de6f5e7a5fee3b55728ea457/comments", "author": {"login": "anisimkov", "id": 15864134, "node_id": "MDQ6VXNlcjE1ODY0MTM0", "avatar_url": "https://avatars.githubusercontent.com/u/15864134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anisimkov", "html_url": "https://github.com/anisimkov", "followers_url": "https://api.github.com/users/anisimkov/followers", "following_url": "https://api.github.com/users/anisimkov/following{/other_user}", "gists_url": "https://api.github.com/users/anisimkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/anisimkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anisimkov/subscriptions", "organizations_url": "https://api.github.com/users/anisimkov/orgs", "repos_url": "https://api.github.com/users/anisimkov/repos", "events_url": "https://api.github.com/users/anisimkov/events{/privacy}", "received_events_url": "https://api.github.com/users/anisimkov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37915d022449d21fe7bfa7db640a15e77cd3352e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37915d022449d21fe7bfa7db640a15e77cd3352e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37915d022449d21fe7bfa7db640a15e77cd3352e"}], "stats": {"total": 343, "additions": 252, "deletions": 91}, "files": [{"sha": "f5b72a085616da3b56e51673c61facec28eebb26", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38c4e50d8c738553de6f5e7a5fee3b55728ea457/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38c4e50d8c738553de6f5e7a5fee3b55728ea457/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=38c4e50d8c738553de6f5e7a5fee3b55728ea457", "patch": "@@ -1,3 +1,34 @@\n+2019-09-17  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* gsocket.h: Include sys/un.h.\n+\t* s-oscons-tmplt.c (AF_UNIX): New constant generation.\n+\t(SIZEOF_sockaddr_un): Idem.\n+\t* libgnat/g-socket.ads (Family_Type): New value Family_Unix\n+\tadded.\n+\t(Family_Inet_4_6): New subtype only for network families.\n+\t(Sock_Addr_Type): Add Unbounded_String field for Family_Unix\n+\tvariant.\n+\t(Unix_Socket_Address): Create Sock_Addr_Type from socket\n+\tpathname.\n+\t(Network_Socket_Address): Create Sock_Addr_Type from\n+\tInet_Addr_Type and Port_Type parameters.\n+\t* libgnat/g-socket.adb: Support local unix address in socket\n+\troutines.\n+\t(Get_Address_Info): Disable warning about Result may be\n+\treferenced before it has a value. Remove duplicated code to exit\n+\tfrom Look_For_Supported.\n+\t* libgnat/g-sothco.ads (Unix_Name_Length): New constant defining\n+\tmaximum number of characters in local socket address path.\n+\t(Sockaddr): Add variant for Family_Unix address family. Move\n+\tSin_Port and Sin_Family to Family_Inet section. Add Sin6_Port\n+\tand Sin6_Family to Family_Inet6 section.\n+\t(Set_Address): Add out parameter Length to return valuable\n+\tSockaddr data length.\n+\t(Get_Address): Add input parameter Length to set valuable\n+\tSockaddr data length.\n+\t* libgnat/g-sothco.adb: Support local unix address in socket\n+\troutines.\n+\n 2019-09-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_attr.adb (Expand_Size_Attribute): Chain the special cases"}, {"sha": "91a06b8197b76fa1a8142bf875ef81f06faab8fb", "filename": "gcc/ada/gsocket.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38c4e50d8c738553de6f5e7a5fee3b55728ea457/gcc%2Fada%2Fgsocket.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38c4e50d8c738553de6f5e7a5fee3b55728ea457/gcc%2Fada%2Fgsocket.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgsocket.h?ref=38c4e50d8c738553de6f5e7a5fee3b55728ea457", "patch": "@@ -208,6 +208,7 @@\n  */\n #if !(defined (VMS) || defined (__MINGW32__))\n #include <sys/socket.h>\n+#include <sys/un.h>\n #include <netinet/in.h>\n #include <netinet/tcp.h>\n #include <sys/ioctl.h>"}, {"sha": "8565ccff53562b43d3e4186d5e256de663ec7132", "filename": "gcc/ada/libgnat/g-socket.adb", "status": "modified", "additions": 77, "deletions": 44, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38c4e50d8c738553de6f5e7a5fee3b55728ea457/gcc%2Fada%2Flibgnat%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38c4e50d8c738553de6f5e7a5fee3b55728ea457/gcc%2Fada%2Flibgnat%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-socket.adb?ref=38c4e50d8c738553de6f5e7a5fee3b55728ea457", "patch": "@@ -128,14 +128,12 @@ package body GNAT.Sockets is\n    Socket_Error_Id : constant Exception_Id := Socket_Error'Identity;\n    Host_Error_Id   : constant Exception_Id := Host_Error'Identity;\n \n-   type In_Addr_Union (Family : Family_Type) is record\n+   type In_Addr_Union (Family : Family_Inet_4_6) is record\n       case Family is\n          when Family_Inet =>\n             In4 : In_Addr;\n          when Family_Inet6 =>\n             In6 : In6_Addr;\n-         when Family_Unspec =>\n-            null;\n       end case;\n    end record with Unchecked_Union;\n \n@@ -291,7 +289,7 @@ package body GNAT.Sockets is\n    --  or the null selector.\n \n    function Create_Address\n-     (Family : Family_Type; Bytes : Inet_Addr_Bytes) return Inet_Addr_Type\n+     (Family : Family_Inet_4_6; Bytes : Inet_Addr_Bytes) return Inet_Addr_Type\n      with Inline;\n    --  Creates address from family and Inet_Addr_Bytes array.\n \n@@ -354,7 +352,7 @@ package body GNAT.Sockets is\n       end if;\n \n       Socket := Socket_Type (Res);\n-      Address := Get_Address (Sin);\n+      Address := Get_Address (Sin, Len);\n    end Accept_Socket;\n \n    -------------------\n@@ -465,12 +463,12 @@ package body GNAT.Sockets is\n    is\n       Res : C.int;\n       Sin : aliased Sockaddr;\n+      Len : C.int;\n \n    begin\n-      Set_Address (Sin'Unchecked_Access, Address);\n+      Set_Address (Sin'Unchecked_Access, Address, Len);\n \n-      Res := C_Bind\n-        (C.int (Socket), Sin'Address, C.int (Lengths (Address.Family)));\n+      Res := C_Bind (C.int (Socket), Sin'Address, Len);\n \n       if Res = Failure then\n          Raise_Socket_Error (Socket_Errno);\n@@ -670,11 +668,11 @@ package body GNAT.Sockets is\n       Server : Sock_Addr_Type) return C.int\n    is\n       Sin : aliased Sockaddr;\n+      Len : C.int;\n    begin\n-      Set_Address (Sin'Unchecked_Access, Server);\n+      Set_Address (Sin'Unchecked_Access, Server, Len);\n \n-      return C_Connect\n-        (C.int (Socket), Sin'Address, C.int (Lengths (Server.Family)));\n+      return C_Connect (C.int (Socket), Sin'Address, Len);\n    end Connect_Socket;\n \n    procedure Connect_Socket\n@@ -1039,10 +1037,17 @@ package body GNAT.Sockets is\n          for J in Result'Range loop\n             Look_For_Supported : loop\n                if Iter = null then\n+                  pragma Warnings\n+                    (Off, \"may be referenced before it has a value\");\n+\n                   return Result (1 .. J - 1);\n+\n+                  pragma Warnings\n+                    (On, \"may be referenced before it has a value\");\n                end if;\n \n-               Result (J).Addr := Get_Address (Iter.ai_addr.all);\n+               Result (J).Addr :=\n+                 Get_Address (Iter.ai_addr.all, C.int (Iter.ai_addrlen));\n \n                if Result (J).Addr.Family = Family_Unspec then\n                   Unsupported;\n@@ -1071,10 +1076,6 @@ package body GNAT.Sockets is\n                end if;\n \n                Iter := Iter.ai_next;\n-\n-               if Iter = null then\n-                  return Result (1 .. J - 1);\n-               end if;\n             end loop Look_For_Supported;\n \n             Iter := Iter.ai_next;\n@@ -1149,15 +1150,16 @@ package body GNAT.Sockets is\n       Numeric_Host : Boolean := False;\n       Numeric_Serv : Boolean := False) return Host_Service\n    is\n-      SA : aliased Sockaddr;\n-      H  : aliased C.char_array := (1 .. SOSC.NI_MAXHOST => C.nul);\n-      S  : aliased C.char_array := (1 .. SOSC.NI_MAXSERV => C.nul);\n-      RC : C.int;\n+      SA  : aliased Sockaddr;\n+      H   : aliased C.char_array := (1 .. SOSC.NI_MAXHOST => C.nul);\n+      S   : aliased C.char_array := (1 .. SOSC.NI_MAXSERV => C.nul);\n+      RC  : C.int;\n+      Len : C.int;\n    begin\n-      Set_Address (SA'Unchecked_Access, Addr);\n+      Set_Address (SA'Unchecked_Access, Addr, Len);\n \n       RC := C_Getnameinfo\n-        (SA'Unchecked_Access, socklen_t (Lengths (Addr.Family)),\n+        (SA'Unchecked_Access, socklen_t (Len),\n          H'Unchecked_Access, H'Length,\n          S'Unchecked_Access, S'Length,\n          (if Numeric_Host then SOSC.NI_NUMERICHOST else 0) +\n@@ -1197,9 +1199,6 @@ package body GNAT.Sockets is\n             HA.In4 := To_In_Addr (Address);\n          when Family_Inet6 =>\n             HA.In6 := To_In6_Addr (Address);\n-         when Family_Unspec =>\n-            return (0, 0, (1, \" \"), (1 .. 0 => (1, \" \")),\n-                    (1 .. 0 => No_Inet_Addr));\n       end case;\n \n       Netdb_Lock;\n@@ -1208,8 +1207,7 @@ package body GNAT.Sockets is\n         (HA'Address,\n          (case Address.Family is\n              when Family_Inet => HA.In4'Size,\n-             when Family_Inet6 => HA.In6'Size,\n-             when Family_Unspec => 0) / 8,\n+             when Family_Inet6 => HA.In6'Size) / 8,\n          Families (Address.Family),\n          Res'Access, Buf'Address, Buflen, Err'Access) /= 0\n       then\n@@ -1280,7 +1278,7 @@ package body GNAT.Sockets is\n          Raise_Socket_Error (Socket_Errno);\n       end if;\n \n-      return Get_Address (Sin);\n+      return Get_Address (Sin, Len);\n    end Get_Peer_Name;\n \n    -------------------------\n@@ -1364,7 +1362,7 @@ package body GNAT.Sockets is\n          return No_Sock_Addr;\n       end if;\n \n-      return Get_Address (Sin);\n+      return Get_Address (Sin, Len);\n    end Get_Socket_Name;\n \n    -----------------------\n@@ -1572,9 +1570,8 @@ package body GNAT.Sockets is\n       Size : constant socklen_t :=\n         (case Value.Family is\n             when Family_Inet   => 4 * Value.Sin_V4'Length,\n-            when Family_Inet6  => 6 * 5 + 4 * 4,\n+            when Family_Inet6  => 6 * 5 + 4 * 4);\n             --  1234:1234:1234:1234:1234:1234:123.123.123.123\n-            when Family_Unspec => 0);\n       Dst : aliased C.char_array := (1 .. C.size_t (Size) => C.nul);\n       Ia  : aliased In_Addr_Union (Value.Family);\n    begin\n@@ -1583,8 +1580,6 @@ package body GNAT.Sockets is\n             Ia.In6 := To_In6_Addr (Value);\n          when Family_Inet =>\n             Ia.In4 := To_In_Addr (Value);\n-         when Family_Unspec =>\n-            return \"\";\n       end case;\n \n       if Inet_Ntop\n@@ -1602,11 +1597,30 @@ package body GNAT.Sockets is\n    -----------\n \n    function Image (Value : Sock_Addr_Type) return String is\n-      Port : constant String := Value.Port'Img;\n       function Ipv6_Brackets (S : String) return String is\n         (if Value.Family = Family_Inet6 then \"[\" & S & \"]\" else S);\n    begin\n-      return Ipv6_Brackets (Image (Value.Addr)) & ':' & Port (2 .. Port'Last);\n+      case Value.Family is\n+         when Family_Unix =>\n+            if ASU.Length (Value.Name) > 0\n+              and then ASU.Element (Value.Name, 1) = ASCII.NUL\n+            then\n+               return '@' & ASU.Slice (Value.Name, 2, ASU.Length (Value.Name));\n+            else\n+               return ASU.To_String (Value.Name);\n+            end if;\n+\n+         when Family_Inet_4_6 =>\n+            declare\n+               Port : constant String := Value.Port'Img;\n+            begin\n+               return Ipv6_Brackets (Image (Value.Addr)) & ':'\n+                 & Port (2 .. Port'Last);\n+            end;\n+\n+         when Family_Unspec =>\n+            return \"\";\n+      end case;\n    end Image;\n \n    -----------\n@@ -1924,6 +1938,19 @@ package body GNAT.Sockets is\n       end if;\n    end Netdb_Unlock;\n \n+   ----------------------------\n+   -- Network_Socket_Address --\n+   ----------------------------\n+\n+   function Network_Socket_Address\n+     (Addr : Inet_Addr_Type; Port : Port_Type) return Sock_Addr_Type is\n+   begin\n+      return Result : Sock_Addr_Type (Addr.Family) do\n+         Result.Addr := Addr;\n+         Result.Port := Port;\n+      end return;\n+   end Network_Socket_Address;\n+\n    --------------------------------\n    -- Normalize_Empty_Socket_Set --\n    --------------------------------\n@@ -2139,7 +2166,7 @@ package body GNAT.Sockets is\n \n       Last := Last_Index (First => Item'First, Count => size_t (Res));\n \n-      From := Get_Address (Sin);\n+      From := Get_Address (Sin, Len);\n    end Receive_Socket;\n \n    --------------------\n@@ -2404,9 +2431,8 @@ package body GNAT.Sockets is\n \n    begin\n       if To /= null then\n-         Set_Address (Sin'Unchecked_Access, To.all);\n+         Set_Address (Sin'Unchecked_Access, To.all, Len);\n          C_To := Sin'Address;\n-         Len := C.int (Thin_Common.Lengths (To.Family));\n \n       else\n          C_To := System.Null_Address;\n@@ -3055,12 +3081,11 @@ package body GNAT.Sockets is\n    --------------------\n \n    function Create_Address\n-     (Family : Family_Type; Bytes : Inet_Addr_Bytes) return Inet_Addr_Type\n+     (Family : Family_Inet_4_6; Bytes : Inet_Addr_Bytes) return Inet_Addr_Type\n    is\n      (case Family is\n          when Family_Inet => (Family_Inet, Bytes),\n-         when Family_Inet6 => (Family_Inet6, Bytes),\n-         when Family_Unspec => (Family => Family_Unspec));\n+         when Family_Inet6 => (Family_Inet6, Bytes));\n \n    ---------------\n    -- Get_Bytes --\n@@ -3069,15 +3094,14 @@ package body GNAT.Sockets is\n    function Get_Bytes (Addr : Inet_Addr_Type) return Inet_Addr_Bytes is\n      (case Addr.Family is\n          when Family_Inet => Addr.Sin_V4,\n-         when Family_Inet6 => Addr.Sin_V6,\n-         when Family_Unspec => (1 .. 0 => 0));\n+         when Family_Inet6 => Addr.Sin_V6);\n \n    ----------\n    -- Mask --\n    ----------\n \n    function Mask\n-     (Family : Family_Type;\n+     (Family : Family_Inet_4_6;\n       Length : Natural;\n       Host   : Boolean := False) return Inet_Addr_Type\n    is\n@@ -3109,6 +3133,15 @@ package body GNAT.Sockets is\n       end;\n    end Mask;\n \n+   -------------------------\n+   -- Unix_Socket_Address --\n+   -------------------------\n+\n+   function Unix_Socket_Address (Addr : String) return Sock_Addr_Type is\n+   begin\n+      return Sock_Addr_Type'(Family_Unix, ASU.To_Unbounded_String (Addr));\n+   end Unix_Socket_Address;\n+\n    -----------\n    -- \"and\" --\n    -----------"}, {"sha": "38d10784fc7440313efdd6a05b131093f1a791a8", "filename": "gcc/ada/libgnat/g-socket.ads", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38c4e50d8c738553de6f5e7a5fee3b55728ea457/gcc%2Fada%2Flibgnat%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38c4e50d8c738553de6f5e7a5fee3b55728ea457/gcc%2Fada%2Flibgnat%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-socket.ads?ref=38c4e50d8c738553de6f5e7a5fee3b55728ea457", "patch": "@@ -45,6 +45,7 @@\n \n with Ada.Exceptions;\n with Ada.Streams;\n+with Ada.Strings.Unbounded;\n with Ada.Unchecked_Deallocation;\n \n with Interfaces.C;\n@@ -469,12 +470,14 @@ package GNAT.Sockets is\n    --  Return a file descriptor to be used by external subprograms. This is\n    --  useful for C functions that are not yet interfaced in this package.\n \n-   type Family_Type is (Family_Inet, Family_Inet6, Family_Unspec);\n+   type Family_Type is (Family_Inet, Family_Inet6, Family_Unix, Family_Unspec);\n    --  Address family (or protocol family) identifies the communication domain\n    --  and groups protocols with similar address formats.\n    --  The order of the enumeration elements should not be changed unilaterally\n    --  because the IPv6_TCP_Preferred routine rely on it.\n \n+   subtype Family_Inet_4_6 is Family_Type range Family_Inet .. Family_Inet6;\n+\n    type Mode_Type is (Socket_Stream, Socket_Datagram, Socket_Raw);\n    --  Stream sockets provide connection-oriented byte streams. Datagram\n    --  sockets support unreliable connectionless message-based communication.\n@@ -502,8 +505,8 @@ package GNAT.Sockets is\n    type Inet_Addr_Comp_Type is mod 2 ** 8;\n    --  Octet for Internet address\n \n-   Inet_Addr_Bytes_Length : constant array (Family_Type) of Natural :=\n-     (Family_Inet => 4, Family_Inet6 => 16, Family_Unspec => 0);\n+   Inet_Addr_Bytes_Length : constant array (Family_Inet_4_6) of Natural :=\n+     (Family_Inet => 4, Family_Inet6 => 16);\n \n    type Inet_Addr_Bytes is array (Natural range <>) of Inet_Addr_Comp_Type;\n \n@@ -515,17 +518,14 @@ package GNAT.Sockets is\n    subtype Inet_Addr_VN_Type is Inet_Addr_Bytes;\n    --  For backwards compatibility\n \n-   type Inet_Addr_Type (Family : Family_Type := Family_Inet) is record\n+   type Inet_Addr_Type (Family : Family_Inet_4_6 := Family_Inet) is record\n       case Family is\n          when Family_Inet =>\n             Sin_V4 : Inet_Addr_V4_Type := (others => 0);\n \n          when Family_Inet6 =>\n             Sin_V6 : Inet_Addr_V6_Type := (others => 0);\n \n-         when Family_Unspec =>\n-            null;\n-\n       end case;\n    end record;\n \n@@ -541,10 +541,6 @@ package GNAT.Sockets is\n    No_Inet_Addr        : constant Inet_Addr_Type;\n    --  Uninitialized inet address\n \n-   Unspecified_Addr    : constant Inet_Addr_Type;\n-   --  Unspecified address. Unlike of No_Inet_Addr the constraint is\n-   --  Family_Unspec for this constant.\n-\n    Broadcast_Inet_Addr : constant Inet_Addr_Type;\n    --  Broadcast destination address in the current network\n \n@@ -581,7 +577,7 @@ package GNAT.Sockets is\n    --  Functions to handle masks and prefixes\n \n    function Mask\n-     (Family : Family_Type;\n+     (Family : Family_Inet_4_6;\n       Length : Natural;\n       Host   : Boolean := False) return Inet_Addr_Type;\n    --  Return an address mask of the given family with the given prefix length.\n@@ -596,8 +592,15 @@ package GNAT.Sockets is\n    --  same address family).\n \n    type Sock_Addr_Type (Family : Family_Type := Family_Inet) is record\n-      Addr : Inet_Addr_Type (Family);\n-      Port : Port_Type;\n+      case Family is\n+         when Family_Unix =>\n+            Name : Ada.Strings.Unbounded.Unbounded_String;\n+         when Family_Inet_4_6 =>\n+            Addr : Inet_Addr_Type (Family);\n+            Port : Port_Type;\n+         when Family_Unspec =>\n+            null;\n+      end case;\n    end record;\n    pragma No_Component_Reordering (Sock_Addr_Type);\n    --  Socket addresses fully define a socket connection with protocol family,\n@@ -619,12 +622,20 @@ package GNAT.Sockets is\n    --  8 hextets in hexadecimal format separated by colons.\n \n    function Image (Value : Sock_Addr_Type) return String;\n-   --  Return inet address image and port image separated by a colon\n+   --  Return socket address image. Network socket address image will be with\n+   --  a port image separated by a colon.\n \n    function Inet_Addr (Image : String) return Inet_Addr_Type;\n    --  Convert address image from numbers-dots-and-colons notation into an\n    --  inet address.\n \n+   function Unix_Socket_Address (Addr : String) return Sock_Addr_Type;\n+   --  Convert unix local socket name to Sock_Addr_Type\n+\n+   function Network_Socket_Address\n+     (Addr : Inet_Addr_Type; Port : Port_Type) return Sock_Addr_Type;\n+   --  Create network socket address\n+\n    --  Host entries provide complete information on a given host: the official\n    --  name, an array of alternative names or aliases and array of network\n    --  addresses.\n@@ -1439,6 +1450,8 @@ package GNAT.Sockets is\n \n private\n \n+   package ASU renames Ada.Strings.Unbounded;\n+\n    type Socket_Type is new Integer;\n    No_Socket : constant Socket_Type := -1;\n \n@@ -1493,8 +1506,6 @@ private\n                            (Family_Inet6, (others => 0));\n    No_Inet_Addr        : constant Inet_Addr_Type :=\n                            (Family_Inet, (others => 0));\n-   Unspecified_Addr    : constant Inet_Addr_Type :=\n-                           (Family => Family_Unspec);\n    Broadcast_Inet_Addr : constant Inet_Addr_Type :=\n                            (Family_Inet, (others => 255));\n    Loopback_Inet_Addr  : constant Inet_Addr_Type :="}, {"sha": "9794d8b0ea18c69f3459529d993a3f046f23ebab", "filename": "gcc/ada/libgnat/g-sothco.adb", "status": "modified", "additions": 63, "deletions": 9, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38c4e50d8c738553de6f5e7a5fee3b55728ea457/gcc%2Fada%2Flibgnat%2Fg-sothco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38c4e50d8c738553de6f5e7a5fee3b55728ea457/gcc%2Fada%2Flibgnat%2Fg-sothco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-sothco.adb?ref=38c4e50d8c738553de6f5e7a5fee3b55728ea457", "patch": "@@ -37,18 +37,59 @@ package body GNAT.Sockets.Thin_Common is\n \n    procedure Set_Address\n      (Sin     : Sockaddr_Access;\n-      Address : Sock_Addr_Type)\n+      Address : Sock_Addr_Type;\n+      Length  : out C.int)\n    is\n+      use type C.char;\n+\n+      function Network_Port return C.unsigned_short is\n+        (Short_To_Network (C.unsigned_short (Address.Port))) with Inline;\n+\n    begin\n       Set_Family (Sin.Sin_Family, Address.Family);\n-      Sin.Sin_Port := Short_To_Network (C.unsigned_short (Address.Port));\n+\n+      Length := C.int (Lengths (Address.Family));\n \n       case Address.Family is\n          when Family_Inet =>\n+            Sin.Sin_Port := Network_Port;\n             Sin.Sin_Addr := To_In_Addr (Address.Addr);\n+\n          when Family_Inet6 =>\n+            Sin.Sin6_Port := Network_Port;\n             Sin.Sin6_Addr := To_In6_Addr (Address.Addr);\n             Sin.Sin6_Scope_Id := 0;\n+\n+         when Family_Unix =>\n+            declare\n+               use type C.size_t;\n+               Name_Len : constant C.size_t :=\n+                            C.size_t (ASU.Length (Address.Name));\n+            begin\n+               Length := Sockaddr_Length_And_Family'Size / System.Storage_Unit\n+                         + C.int (Name_Len);\n+\n+               if Name_Len > Sin.Sun_Path'Length then\n+                  raise Constraint_Error with\n+                    \"Too big address length for UNIX local communication\";\n+               end if;\n+\n+               if Name_Len = 0 then\n+                  Sin.Sun_Path (1) := C.nul;\n+\n+               else\n+                  Sin.Sun_Path (1 .. Name_Len) :=\n+                    C.To_C (ASU.To_String (Address.Name), Append_Nul => False);\n+\n+                  if Sin.Sun_Path (1) /= C.nul\n+                    and then Name_Len < Sin.Sun_Path'Length\n+                  then\n+                     Sin.Sun_Path (Name_Len + 1) := C.nul;\n+                     Length := Length + 1;\n+                  end if;\n+               end if;\n+            end;\n+\n          when Family_Unspec =>\n             null;\n       end case;\n@@ -58,26 +99,39 @@ package body GNAT.Sockets.Thin_Common is\n    -- Get_Address --\n    -----------------\n \n-   function Get_Address (Sin : Sockaddr) return Sock_Addr_Type is\n-      use type C.unsigned_short;\n+   function Get_Address\n+     (Sin : Sockaddr; Length : C.int) return Sock_Addr_Type\n+   is\n+      use type C.unsigned_short, C.size_t, C.char, SOSC.OS_Type;\n       Family : constant C.unsigned_short :=\n         (if SOSC.Has_Sockaddr_Len = 0 then Sin.Sin_Family.Short_Family\n          else C.unsigned_short (Sin.Sin_Family.Char_Family));\n-      AF_INET6_Defined : constant Boolean := SOSC.AF_INET6 > 0;\n       Result : Sock_Addr_Type\n-        (if AF_INET6_Defined and then SOSC.AF_INET6 = Family then Family_Inet6\n+        (if SOSC.AF_INET6 > 0 and then SOSC.AF_INET6 = Family then Family_Inet6\n+         elsif SOSC.AF_UNIX > 0 and then SOSC.AF_UNIX = Family then Family_Unix\n          elsif SOSC.AF_INET = Family then Family_Inet\n          else Family_Unspec);\n    begin\n-      Result.Port := Port_Type (Network_To_Short (Sin.Sin_Port));\n-\n       case Result.Family is\n          when Family_Inet =>\n+            Result.Port := Port_Type (Network_To_Short (Sin.Sin_Port));\n             To_Inet_Addr (Sin.Sin_Addr, Result.Addr);\n          when Family_Inet6 =>\n+            Result.Port := Port_Type (Network_To_Short (Sin.Sin6_Port));\n             To_Inet_Addr (Sin.Sin6_Addr, Result.Addr);\n+         when Family_Unix =>\n+            if Length > Sin.Sin_Family'Size / System.Storage_Unit then\n+               Result.Name := ASU.To_Unbounded_String\n+                 (C.To_Ada\n+                    (Sin.Sun_Path\n+                         (1 .. C.size_t (Length)\n+                          - Sin.Sin_Family'Size / System.Storage_Unit),\n+                     Trim_Nul => Sin.Sun_Path (1) /= C.nul\n+                                 or else SOSC.Target_OS = SOSC.Windows));\n+            end if;\n+\n          when Family_Unspec =>\n-            Result.Addr := (Family => Family_Unspec);\n+            null;\n       end case;\n \n       return Result;"}, {"sha": "a68019c5125f67934682785d9542a27a32edd62c", "filename": "gcc/ada/libgnat/g-sothco.ads", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38c4e50d8c738553de6f5e7a5fee3b55728ea457/gcc%2Fada%2Flibgnat%2Fg-sothco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38c4e50d8c738553de6f5e7a5fee3b55728ea457/gcc%2Fada%2Flibgnat%2Fg-sothco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-sothco.ads?ref=38c4e50d8c738553de6f5e7a5fee3b55728ea457", "patch": "@@ -75,11 +75,13 @@ package GNAT.Sockets.Thin_Common is\n \n    Families : constant array (Family_Type) of C.int :=\n                 (Family_Unspec => SOSC.AF_UNSPEC,\n+                 Family_Unix   => SOSC.AF_UNIX,\n                  Family_Inet   => SOSC.AF_INET,\n                  Family_Inet6  => SOSC.AF_INET6);\n \n    Lengths  : constant array (Family_Type) of C.unsigned_char :=\n                 (Family_Unspec => 0,\n+                 Family_Unix   => SOSC.SIZEOF_sockaddr_un,\n                  Family_Inet   => SOSC.SIZEOF_sockaddr_in,\n                  Family_Inet6  => SOSC.SIZEOF_sockaddr_in6);\n \n@@ -106,9 +108,7 @@ package GNAT.Sockets.Thin_Common is\n          when False =>\n             Short_Family : C.unsigned_short;\n       end case;\n-   end record;\n-   pragma Unchecked_Union (Sockaddr_Length_And_Family);\n-   pragma Convention (C, Sockaddr_Length_And_Family);\n+   end record with Unchecked_Union, Convention => C;\n \n    procedure Set_Family\n      (Length_And_Family : out Sockaddr_Length_And_Family;\n@@ -122,9 +122,7 @@ package GNAT.Sockets.Thin_Common is\n \n    type In_Addr is record\n       S_B1, S_B2, S_B3, S_B4 : C.unsigned_char;\n-   end record;\n-   for In_Addr'Alignment use C.int'Alignment;\n-   pragma Convention (C, In_Addr);\n+   end record with Convention => C, Alignment => C.int'Alignment;\n    --  IPv4 address, represented as a network-order C.int. Note that the\n    --  underlying operating system may assume that values of this type have\n    --  C.int alignment, so we need to provide a suitable alignment clause here.\n@@ -138,9 +136,10 @@ package GNAT.Sockets.Thin_Common is\n       Result : out Inet_Addr_Type);\n    --  Conversion functions\n \n-   type In6_Addr is array (1 .. 16) of C.unsigned_char;\n-   for In6_Addr'Alignment use C.int'Alignment;\n-   pragma Convention (C, In6_Addr);\n+   type In6_Addr is array (1 .. 16) of C.unsigned_char with Convention => C;\n+\n+   Unix_Name_Length : constant := 108;\n+   --  Maximum length for local unix socket name\n \n    function To_In6_Addr (Addr : Inet_Addr_Type) return In6_Addr;\n    procedure To_Inet_Addr\n@@ -149,14 +148,14 @@ package GNAT.Sockets.Thin_Common is\n    --  Conversion functions\n \n    type Sockaddr (Family : Family_Type := Family_Inet) is record\n-      Sin_Family : Sockaddr_Length_And_Family;\n-      --  Address family (and address length on some platforms)\n-\n-      Sin_Port : C.unsigned_short;\n-      --  Port in network byte order\n-\n       case Family is\n       when Family_Inet =>\n+         Sin_Family : Sockaddr_Length_And_Family;\n+         --  Address family (and address length on some platforms)\n+\n+         Sin_Port : C.unsigned_short;\n+         --  Port in network byte order\n+\n          Sin_Addr : In_Addr := (others => 0);\n          --  IPv4 address\n \n@@ -165,16 +164,28 @@ package GNAT.Sockets.Thin_Common is\n          --\n          --  Note that some platforms require that all unused (reserved) bytes\n          --  in addresses be initialized to 0 (e.g. VxWorks).\n+\n       when Family_Inet6 =>\n+         Sin6_Family : Sockaddr_Length_And_Family;\n+         --  Address family (and address length on some platforms)\n+\n+         Sin6_Port : C.unsigned_short;\n+         --  Port in network byte order\n+\n          Sin6_FlowInfo : Interfaces.Unsigned_32 := 0;\n          Sin6_Addr     : In6_Addr := (others => 0);\n          Sin6_Scope_Id : Interfaces.Unsigned_32 := 0;\n+\n+      when Family_Unix =>\n+         Sun_Family : Sockaddr_Length_And_Family;\n+         --  Address family (and address length on some platforms)\n+\n+         Sun_Path : C.char_array (1 .. Unix_Name_Length);\n+\n       when Family_Unspec =>\n          null;\n       end case;\n-   end record;\n-   pragma Unchecked_Union (Sockaddr);\n-   pragma Convention (C, Sockaddr);\n+   end record with Convention => C, Unchecked_Union;\n    --  Internet socket address\n \n    type Sockaddr_Access is access all Sockaddr;\n@@ -183,13 +194,15 @@ package GNAT.Sockets.Thin_Common is\n \n    procedure Set_Address\n      (Sin     : Sockaddr_Access;\n-      Address : Sock_Addr_Type);\n+      Address : Sock_Addr_Type;\n+      Length  : out C.int);\n    --  Initialise all necessary fields in Sin from Address.\n    --  Set appropriate Family, Port, and either Sin.Sin_Addr or Sin.Sin6_Addr\n    --  depend on family.\n+   --  Set the Length out parameter to the valuable Sockaddr data length.\n \n-   function Get_Address (Sin : Sockaddr) return Sock_Addr_Type;\n-   --  Get Sock_Addr_Type from Sockaddr\n+   function Get_Address (Sin : Sockaddr; Length : C.int) return Sock_Addr_Type;\n+   --  Get Sock_Addr_Type from Sockaddr and its valuable data Length\n \n    ------------------\n    -- Host entries --"}, {"sha": "4c3ecc605729bab69729153c316ebc66194aefe4", "filename": "gcc/ada/s-oscons-tmplt.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38c4e50d8c738553de6f5e7a5fee3b55728ea457/gcc%2Fada%2Fs-oscons-tmplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38c4e50d8c738553de6f5e7a5fee3b55728ea457/gcc%2Fada%2Fs-oscons-tmplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-oscons-tmplt.c?ref=38c4e50d8c738553de6f5e7a5fee3b55728ea457", "patch": "@@ -1053,6 +1053,11 @@ CND(AF_INET, \"IPv4 address family\")\n #endif\n CND(AF_INET6, \"IPv6 address family\")\n \n+#ifndef AF_UNIX\n+# define AF_UNIX -1\n+#endif\n+CND(AF_UNIX, \"Local unix family\")\n+\n #ifndef AF_UNSPEC\n # define AF_UNSPEC -1\n #else\n@@ -1701,6 +1706,19 @@ CND(SIZEOF_sockaddr_in, \"struct sockaddr_in\")\n #endif\n CND(SIZEOF_sockaddr_in6, \"struct sockaddr_in6\")\n \n+/**\n+ ** The sockaddr_un structure is not defined in MINGW C headers\n+ ** but Windows supports it from build 17063.\n+ **/\n+#if defined(__MINGW32__)\n+struct sockaddr_un {\n+  ADDRESS_FAMILY sun_family;    /* AF_UNIX */\n+  char           sun_path[108]; /* Pathname */\n+};\n+#endif\n+#define SIZEOF_sockaddr_un (sizeof (struct sockaddr_un))\n+CND(SIZEOF_sockaddr_un, \"struct sockaddr_un\")\n+\n #define SIZEOF_fd_set (sizeof (fd_set))\n CND(SIZEOF_fd_set, \"fd_set\")\n CND(FD_SETSIZE, \"Max fd value\")"}]}