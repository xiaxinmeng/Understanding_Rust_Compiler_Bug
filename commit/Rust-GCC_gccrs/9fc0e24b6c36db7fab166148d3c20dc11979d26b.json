{"sha": "9fc0e24b6c36db7fab166148d3c20dc11979d26b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZjMGUyNGI2YzM2ZGI3ZmFiMTY2MTQ4ZDNjMjBkYzExOTc5ZDI2Yg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-11-08T21:03:58Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-11-08T21:03:58Z"}, "message": "safe_iterator.h (_BeforeBeginHelper<>::_S_Is): Take only a const safe iterator reference.\n\n2013-11-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/safe_iterator.h (_BeforeBeginHelper<>::_S_Is):\n\tTake only a const safe iterator reference.\n\t(_BeforeBeginHelper<>::_S_Is_beginnest): Likewise.\n\t(__get_distance): Take only one type of iterator.\n\t(_Safe_iterator<>::_M_valid_range<>): Not template anymore.\n\t(_Safe_iterator<>::_M_get_sequence()): Return pointer to const\n\tsequence from a const_iterator and a pointer to sequence from an\n\titerator.\n\t* include/debug/safe_iterator.tcc: Adapt.\n\t* include/debug/safe_local_iterator.h\n\t(_Safe_local_iterator<>::_M_valid_range<>): Not template anymore.\n\t(_Safe_local_iterator<>::_M_get_sequence()): Return pointer to\n\tconst sequence from a const_iterator and a pointer to sequence\n\tfrom an iterator.\n\t* include/debug/safe_local_iterator.tcc: Adapt.\n\t* include/debug/forward_list\n\t(_BeforeBeginHelper<std::__debug::forward_list<>>): Adapt.\n\nFrom-SVN: r204598", "tree": {"sha": "127a57a01410caa1b07b9f08156a9d0bab0fde0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/127a57a01410caa1b07b9f08156a9d0bab0fde0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fc0e24b6c36db7fab166148d3c20dc11979d26b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc0e24b6c36db7fab166148d3c20dc11979d26b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc0e24b6c36db7fab166148d3c20dc11979d26b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc0e24b6c36db7fab166148d3c20dc11979d26b/comments", "author": null, "committer": null, "parents": [{"sha": "d53b3432e224527d5864c4ad91beefa6a20ef0f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d53b3432e224527d5864c4ad91beefa6a20ef0f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d53b3432e224527d5864c4ad91beefa6a20ef0f0"}], "stats": {"total": 260, "additions": 139, "deletions": 121}, "files": [{"sha": "31bffa55022b4c50157b86cf98c1efaec97af075", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc0e24b6c36db7fab166148d3c20dc11979d26b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc0e24b6c36db7fab166148d3c20dc11979d26b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9fc0e24b6c36db7fab166148d3c20dc11979d26b", "patch": "@@ -1,3 +1,23 @@\n+2013-11-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/safe_iterator.h (_BeforeBeginHelper<>::_S_Is):\n+\tTake only a const safe iterator reference.\n+\t(_BeforeBeginHelper<>::_S_Is_beginnest): Likewise.\n+\t(__get_distance): Take only one type of iterator.\n+\t(_Safe_iterator<>::_M_valid_range<>): Not template anymore.\n+\t(_Safe_iterator<>::_M_get_sequence()): Return pointer to const\n+\tsequence from a const_iterator and a pointer to sequence from an\n+\titerator.\n+\t* include/debug/safe_iterator.tcc: Adapt.\n+\t* include/debug/safe_local_iterator.h\n+\t(_Safe_local_iterator<>::_M_valid_range<>): Not template anymore.\n+\t(_Safe_local_iterator<>::_M_get_sequence()): Return pointer to\n+\tconst sequence from a const_iterator and a pointer to sequence\n+\tfrom an iterator.\n+\t* include/debug/safe_local_iterator.tcc: Adapt.\n+\t* include/debug/forward_list\n+\t(_BeforeBeginHelper<std::__debug::forward_list<>>): Adapt.\n+\n 2013-11-08  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/bits/regex_automaton.h (__detail::_State): Split"}, {"sha": "5269f3978d36faf95f7d446126a9ca2dd6204903", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc0e24b6c36db7fab166148d3c20dc11979d26b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc0e24b6c36db7fab166148d3c20dc11979d26b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=9fc0e24b6c36db7fab166148d3c20dc11979d26b", "patch": "@@ -785,23 +785,26 @@ namespace __gnu_debug\n     struct _BeforeBeginHelper<std::__debug::forward_list<_Tp, _Alloc> >\n     {\n       typedef std::__debug::forward_list<_Tp, _Alloc> _Sequence;\n-      typedef typename _Sequence::const_iterator _It;\n-      typedef typename _It::iterator_type _BaseIt;\n \n-      static bool\n-      _S_Is(_BaseIt __it, const _Sequence* __seq)\n-      { return __it == __seq->_M_base().cbefore_begin(); }\n+      template<typename _Iterator>\n+\tstatic bool\n+\t_S_Is(const _Safe_iterator<_Iterator, _Sequence>& __it)\n+\t{\n+\t  return\n+\t    __it.base() == __it._M_get_sequence()->_M_base().before_begin();\n+\t}\n \n-      static bool\n-      _S_Is_Beginnest(_BaseIt __it, const _Sequence* __seq)\n-      { return _S_Is(__it, __seq); }\n+      template<typename _Iterator>\n+\tstatic bool\n+\t_S_Is_Beginnest(const _Safe_iterator<_Iterator, _Sequence>& __it)\n+\t{ return _S_Is(__it); }\n     };\n \n #ifndef _GLIBCXX_DEBUG_PEDANTIC\n   template<class _Tp, class _Alloc>\n     struct _Insert_range_from_self_is_safe<\n       std::__debug::forward_list<_Tp, _Alloc> >\n-      { enum { __value = 1 }; };\n+    { enum { __value = 1 }; };\n #endif\n }\n "}, {"sha": "59ba602e411451ee1fd1e917e2a98e03576077d8", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 39, "deletions": 40, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc0e24b6c36db7fab166148d3c20dc11979d26b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc0e24b6c36db7fab166148d3c20dc11979d26b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=9fc0e24b6c36db7fab166148d3c20dc11979d26b", "patch": "@@ -44,16 +44,15 @@ namespace __gnu_debug\n   template <typename _Sequence>\n     struct _BeforeBeginHelper\n     {\n-      typedef typename _Sequence::const_iterator _It;\n-      typedef typename _It::iterator_type _BaseIt;\n-\n-      static bool\n-      _S_Is(_BaseIt, const _Sequence*)\n-      { return false; }\n-\n-      static bool\n-      _S_Is_Beginnest(_BaseIt __it, const _Sequence* __seq)\n-      { return __it == __seq->_M_base().begin(); }\n+      template<typename _Iterator>\n+\tstatic bool\n+\t_S_Is(const _Safe_iterator<_Iterator, _Sequence>&)\n+\t{ return false; }\n+\n+      template<typename _Iterator>\n+\tstatic bool\n+\t_S_Is_Beginnest(const _Safe_iterator<_Iterator, _Sequence>& __it)\n+\t{ return __it.base() == __it._M_get_sequence()->_M_base().begin(); }\n     };\n \n   /** Iterators that derive from _Safe_iterator_base can be determined singular\n@@ -76,26 +75,26 @@ namespace __gnu_debug\n   /** Determine the distance between two iterators with some known\n    *\tprecision.\n   */\n-  template<typename _Iterator1, typename _Iterator2>\n-    inline std::pair<typename std::iterator_traits<_Iterator1>::difference_type,\n+  template<typename _Iterator>\n+    inline std::pair<typename std::iterator_traits<_Iterator>::difference_type,\n \t\t     _Distance_precision>\n-    __get_distance(const _Iterator1& __lhs, const _Iterator2& __rhs,\n+    __get_distance(const _Iterator& __lhs, const _Iterator& __rhs,\n \t\t   std::random_access_iterator_tag)\n     { return std::make_pair(__rhs - __lhs, __dp_exact); }\n \n-  template<typename _Iterator1, typename _Iterator2>\n-    inline std::pair<typename std::iterator_traits<_Iterator1>::difference_type,\n+  template<typename _Iterator>\n+    inline std::pair<typename std::iterator_traits<_Iterator>::difference_type,\n \t\t     _Distance_precision>\n-    __get_distance(const _Iterator1& __lhs, const _Iterator2& __rhs,\n+    __get_distance(const _Iterator& __lhs, const _Iterator& __rhs,\n \t\t   std::forward_iterator_tag)\n     { return std::make_pair(__lhs == __rhs? 0 : 1, __dp_equality); }\n \n-  template<typename _Iterator1, typename _Iterator2>\n-    inline std::pair<typename std::iterator_traits<_Iterator1>::difference_type,\n+  template<typename _Iterator>\n+    inline std::pair<typename std::iterator_traits<_Iterator>::difference_type,\n \t\t     _Distance_precision>\n-    __get_distance(const _Iterator1& __lhs, const _Iterator2& __rhs)\n+    __get_distance(const _Iterator& __lhs, const _Iterator& __rhs)\n     {\n-      typedef typename std::iterator_traits<_Iterator1>::iterator_category\n+      typedef typename std::iterator_traits<_Iterator>::iterator_category\n \t  _Category;\n       return __get_distance(__lhs, __rhs, _Category());\n     }\n@@ -115,17 +114,15 @@ namespace __gnu_debug\n     class _Safe_iterator : public _Safe_iterator_base\n     {\n       typedef _Safe_iterator _Self;\n+      typedef typename _Sequence::const_iterator _Const_iterator;\n \n       /// The underlying iterator\n       _Iterator _M_current;\n \n       /// Determine if this is a constant iterator.\n       bool\n       _M_constant() const\n-      {\n-\ttypedef typename _Sequence::const_iterator const_iterator;\n-\treturn std::__are_same<const_iterator, _Safe_iterator>::__value;\n-      }\n+      { return std::__are_same<_Const_iterator, _Safe_iterator>::__value; }\n \n       typedef std::iterator_traits<_Iterator> _Traits;\n \n@@ -445,37 +442,39 @@ namespace __gnu_debug\n       _M_can_advance(const difference_type& __n) const;\n \n       // Is the iterator range [*this, __rhs) valid?\n-      template<typename _Other>\n-        bool\n-        _M_valid_range(const _Safe_iterator<_Other, _Sequence>& __rhs) const;\n+      bool\n+      _M_valid_range(const _Safe_iterator& __rhs) const;\n \n       // The sequence this iterator references.\n-      const _Sequence*\n+      typename\n+      __gnu_cxx::__conditional_type<std::__are_same<_Const_iterator,\n+\t\t\t\t\t\t    _Safe_iterator>::__value,\n+\t\t\t\t    const _Sequence*,\n+\t\t\t\t    _Sequence*>::__type\n       _M_get_sequence() const\n-      { return static_cast<const _Sequence*>(_M_sequence); }\n+      { return static_cast<_Sequence*>(_M_sequence); }\n \n       /// Is this iterator equal to the sequence's begin() iterator?\n-      bool _M_is_begin() const\n+      bool\n+      _M_is_begin() const\n       { return base() == _M_get_sequence()->_M_base().begin(); }\n \n       /// Is this iterator equal to the sequence's end() iterator?\n-      bool _M_is_end() const\n+      bool\n+      _M_is_end() const\n       { return base() == _M_get_sequence()->_M_base().end(); }\n \n       /// Is this iterator equal to the sequence's before_begin() iterator if\n       /// any?\n-      bool _M_is_before_begin() const\n-      {\n-\treturn _BeforeBeginHelper<_Sequence>::_S_Is(base(), _M_get_sequence());\n-      }\n+      bool\n+      _M_is_before_begin() const\n+      { return _BeforeBeginHelper<_Sequence>::_S_Is(*this); }\n \n       /// Is this iterator equal to the sequence's before_begin() iterator if\n       /// any or begin() otherwise?\n-      bool _M_is_beginnest() const\n-      {\n-\treturn _BeforeBeginHelper<_Sequence>::_S_Is_Beginnest(base(),\n-\t\t\t\t\t\t\t  _M_get_sequence());\n-      }\n+      bool\n+      _M_is_beginnest() const\n+      { return _BeforeBeginHelper<_Sequence>::_S_Is_Beginnest(*this); }\n     };\n \n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>"}, {"sha": "7550a1d96baf0b83a7a2acf575a7ec2c024ca36c", "filename": "libstdc++-v3/include/debug/safe_iterator.tcc", "status": "modified", "additions": 33, "deletions": 39, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc0e24b6c36db7fab166148d3c20dc11979d26b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc0e24b6c36db7fab166148d3c20dc11979d26b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc?ref=9fc0e24b6c36db7fab166148d3c20dc11979d26b", "patch": "@@ -36,70 +36,64 @@ namespace __gnu_debug\n     _Safe_iterator<_Iterator, _Sequence>::\n     _M_can_advance(const difference_type& __n) const\n     {\n-      typedef typename _Sequence::const_iterator const_debug_iterator;\n-      typedef typename const_debug_iterator::iterator_type const_iterator;\n-\n       if (this->_M_singular())\n \treturn false;\n       if (__n == 0)\n \treturn true;\n       if (__n < 0)\n \t{\n-\t  const_iterator __begin = _M_get_sequence()->_M_base().begin();\n \t  std::pair<difference_type, _Distance_precision> __dist =\n-\t    __get_distance(__begin, base());\n+\t    __get_distance(_M_get_sequence()->_M_base().begin(), base());\n \t  bool __ok =  ((__dist.second == __dp_exact && __dist.first >= -__n)\n \t\t\t|| (__dist.second != __dp_exact && __dist.first > 0));\n \t  return __ok;\n \t}\n       else\n \t{\n-\t  const_iterator __end = _M_get_sequence()->_M_base().end();\n \t  std::pair<difference_type, _Distance_precision> __dist =\n-\t    __get_distance(base(), __end);\n+\t    __get_distance(base(), _M_get_sequence()->_M_base().end());\n \t  bool __ok = ((__dist.second == __dp_exact && __dist.first >= __n)\n \t\t       || (__dist.second != __dp_exact && __dist.first > 0));\n \t  return __ok;\n \t}\n     }\n \n   template<typename _Iterator, typename _Sequence>\n-    template<typename _Other>\n-      bool\n-      _Safe_iterator<_Iterator, _Sequence>::\n-      _M_valid_range(const _Safe_iterator<_Other, _Sequence>& __rhs) const\n-      {\n-\tif (!_M_can_compare(__rhs))\n-\t  return false;\n-\n-\t/* Determine if we can order the iterators without the help of\n-\t   the container */\n-\tstd::pair<difference_type, _Distance_precision> __dist =\n-\t  __get_distance(base(), __rhs.base());\n-\tswitch (__dist.second) {\n-\tcase __dp_equality:\n-\t  if (__dist.first == 0)\n-\t    return true;\n-\t  break;\n-\n-\tcase __dp_sign:\n-\tcase __dp_exact:\n-\t  return __dist.first >= 0;\n-\t}\n+    bool\n+    _Safe_iterator<_Iterator, _Sequence>::\n+    _M_valid_range(const _Safe_iterator& __rhs) const\n+    {\n+      if (!_M_can_compare(__rhs))\n+\treturn false;\n \n-\t/* We can only test for equality, but check if one of the\n-\t   iterators is at an extreme. */\n-\t/* Optim for classic [begin, it) or [it, end) ranges, limit checks\n-\t * when code is valid.  Note, for the special case of forward_list,\n-\t * before_begin replaces the role of begin.  */ \n-\tif (_M_is_beginnest() || __rhs._M_is_end())\n+      /* Determine if we can order the iterators without the help of\n+\t the container */\n+      std::pair<difference_type, _Distance_precision> __dist =\n+\t__get_distance(base(), __rhs.base());\n+      switch (__dist.second) {\n+      case __dp_equality:\n+\tif (__dist.first == 0)\n \t  return true;\n-\tif (_M_is_end() || __rhs._M_is_beginnest())\n-\t  return false;\n+\tbreak;\n \n-\t// Assume that this is a valid range; we can't check anything else\n-\treturn true;\n+      case __dp_sign:\n+      case __dp_exact:\n+\treturn __dist.first >= 0;\n       }\n+\n+      /* We can only test for equality, but check if one of the\n+\t iterators is at an extreme. */\n+      /* Optim for classic [begin, it) or [it, end) ranges, limit checks\n+       * when code is valid.  Note, for the special case of forward_list,\n+       * before_begin replaces the role of begin.  */ \n+      if (_M_is_beginnest() || __rhs._M_is_end())\n+\treturn true;\n+      if (_M_is_end() || __rhs._M_is_beginnest())\n+\treturn false;\n+\n+      // Assume that this is a valid range; we can't check anything else\n+      return true;\n+    }\n } // namespace __gnu_debug\n \n #endif"}, {"sha": "6724798b37794393636fb1d954325b4fc7f640e8", "filename": "libstdc++-v3/include/debug/safe_local_iterator.h", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc0e24b6c36db7fab166148d3c20dc11979d26b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc0e24b6c36db7fab166148d3c20dc11979d26b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h?ref=9fc0e24b6c36db7fab166148d3c20dc11979d26b", "patch": "@@ -52,6 +52,7 @@ namespace __gnu_debug\n     class _Safe_local_iterator : public _Safe_local_iterator_base\n     {\n       typedef _Safe_local_iterator _Self;\n+      typedef typename _Sequence::const_local_iterator _Const_local_iterator;\n       typedef typename _Sequence::size_type size_type;\n \n       /// The underlying iterator\n@@ -64,8 +65,8 @@ namespace __gnu_debug\n       bool\n       _M_constant() const\n       {\n-\ttypedef typename _Sequence::const_local_iterator const_iterator;\n-\treturn std::__are_same<const_iterator, _Safe_local_iterator>::__value;\n+\treturn std::__are_same<_Const_local_iterator,\n+\t\t\t       _Safe_local_iterator>::__value;\n       }\n \n       typedef std::iterator_traits<_Iterator> _Traits;\n@@ -253,15 +254,17 @@ namespace __gnu_debug\n       { return !this->_M_singular() && !_M_is_end(); }\n \n       // Is the iterator range [*this, __rhs) valid?\n-      template<typename _Other>\n-\tbool\n-\t_M_valid_range(const _Safe_local_iterator<_Other,\n-\t\t\t\t\t\t  _Sequence>& __rhs) const;\n+      bool\n+      _M_valid_range(const _Safe_local_iterator& __rhs) const;\n \n       // The sequence this iterator references.\n-      const _Sequence*\n+      typename\n+      __gnu_cxx::__conditional_type<std::__are_same<_Const_local_iterator,\n+\t\t\t\t\t\t    _Safe_local_iterator>::__value,\n+\t\t\t\t    const _Sequence*,\n+\t\t\t\t    _Sequence*>::__type\n       _M_get_sequence() const\n-      { return static_cast<const _Sequence*>(_M_sequence); }\n+      { return static_cast<_Sequence*>(_M_sequence); }\n \n       /// Is this iterator equal to the sequence's begin() iterator?\n       bool _M_is_begin() const"}, {"sha": "6633bdb779440abba9603140ff635625e56bcbc6", "filename": "libstdc++-v3/include/debug/safe_local_iterator.tcc", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc0e24b6c36db7fab166148d3c20dc11979d26b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc0e24b6c36db7fab166148d3c20dc11979d26b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.tcc?ref=9fc0e24b6c36db7fab166148d3c20dc11979d26b", "patch": "@@ -32,21 +32,20 @@\n namespace __gnu_debug\n {\n   template<typename _Iterator, typename _Sequence>\n-    template<typename _Other>\n-      bool\n-      _Safe_local_iterator<_Iterator, _Sequence>::\n-      _M_valid_range(const _Safe_local_iterator<_Other, _Sequence>& __rhs) const\n-      {\n-\tif (!_M_can_compare(__rhs))\n-\t  return false;\n-\tif (_M_bucket != __rhs._M_bucket)\n-\t  return false;\n+    bool\n+    _Safe_local_iterator<_Iterator, _Sequence>::\n+    _M_valid_range(const _Safe_local_iterator& __rhs) const\n+    {\n+      if (!_M_can_compare(__rhs))\n+\treturn false;\n+      if (_M_bucket != __rhs._M_bucket)\n+\treturn false;\n \n-\t/* Determine if we can order the iterators without the help of\n-\t   the container */\n-\tstd::pair<difference_type, _Distance_precision> __dist =\n-\t  __get_distance(base(), __rhs.base());\n-\tswitch (__dist.second)\n+      /* Determine if we can order the iterators without the help of\n+\t the container */\n+      std::pair<difference_type, _Distance_precision> __dist =\n+\t__get_distance(base(), __rhs.base());\n+      switch (__dist.second)\n \t{\n \tcase __dp_equality:\n \t  if (__dist.first == 0)\n@@ -58,18 +57,18 @@ namespace __gnu_debug\n \t  return __dist.first >= 0;\n \t}\n \n-\t/* We can only test for equality, but check if one of the\n-\t   iterators is at an extreme. */\n-\t/* Optim for classic [begin, it) or [it, end) ranges, limit checks\n-\t * when code is valid. */\n-\tif (_M_is_begin() || __rhs._M_is_end())\n-\t  return true;\n-\tif (_M_is_end() || __rhs._M_is_begin())\n-\t  return false;\n-\n-\t// Assume that this is a valid range; we can't check anything else\n+      /* We can only test for equality, but check if one of the\n+\t iterators is at an extreme. */\n+      /* Optim for classic [begin, it) or [it, end) ranges, limit checks\n+       * when code is valid. */\n+      if (_M_is_begin() || __rhs._M_is_end())\n \treturn true;\n-      }\n+      if (_M_is_end() || __rhs._M_is_begin())\n+\treturn false;\n+\n+      // Assume that this is a valid range; we can't check anything else\n+      return true;\n+    }\n } // namespace __gnu_debug\n \n #endif"}]}