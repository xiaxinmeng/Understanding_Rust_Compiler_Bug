{"sha": "893e85fa0d8f2defe4af2490ec8a45a6adb510d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkzZTg1ZmEwZDhmMmRlZmU0YWYyNDkwZWM4YTQ1YTZhZGI1MTBkNA==", "commit": {"author": {"name": "Cameron McInally", "email": "cameron.mcinally@nyu.edu", "date": "2013-09-12T09:23:08Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-09-12T09:23:08Z"}, "message": "extend.texi: Fix errors in x86 FMA builtin naming.\n\n\t* doc/extend.texi: Fix errors in x86 FMA builtin naming.\n\tThe FMA instruction names should have a 'v' prefix.\n\nFrom-SVN: r202517", "tree": {"sha": "88311c64f130a562dfd8ccdec047ef0c2019b227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88311c64f130a562dfd8ccdec047ef0c2019b227"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/893e85fa0d8f2defe4af2490ec8a45a6adb510d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/893e85fa0d8f2defe4af2490ec8a45a6adb510d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/893e85fa0d8f2defe4af2490ec8a45a6adb510d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/893e85fa0d8f2defe4af2490ec8a45a6adb510d4/comments", "author": {"login": "mcinally", "id": 19612094, "node_id": "MDQ6VXNlcjE5NjEyMDk0", "avatar_url": "https://avatars.githubusercontent.com/u/19612094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcinally", "html_url": "https://github.com/mcinally", "followers_url": "https://api.github.com/users/mcinally/followers", "following_url": "https://api.github.com/users/mcinally/following{/other_user}", "gists_url": "https://api.github.com/users/mcinally/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcinally/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcinally/subscriptions", "organizations_url": "https://api.github.com/users/mcinally/orgs", "repos_url": "https://api.github.com/users/mcinally/repos", "events_url": "https://api.github.com/users/mcinally/events{/privacy}", "received_events_url": "https://api.github.com/users/mcinally/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "174ec470afd5d68fe8469b1cb64a553a62349e1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/174ec470afd5d68fe8469b1cb64a553a62349e1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/174ec470afd5d68fe8469b1cb64a553a62349e1b"}], "stats": {"total": 103, "additions": 53, "deletions": 50}, "files": [{"sha": "c7c3593f853260eccc1d027538166c403a0bc846", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893e85fa0d8f2defe4af2490ec8a45a6adb510d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893e85fa0d8f2defe4af2490ec8a45a6adb510d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=893e85fa0d8f2defe4af2490ec8a45a6adb510d4", "patch": "@@ -1,3 +1,8 @@\n+2013-09-12  Cameron McInally  <cameron.mcinally@nyu.edu>\n+\n+\t* doc/extend.texi: Fix errors in x86 FMA builtin naming.\n+\tThe FMA instruction names should have a 'v' prefix.\n+\n 2013-09-12  Richard Biener  <rguenther@suse.de>\n \n \t* tree-loop-distribution.c (dot_rdg_1): Make graph prettier.\n@@ -60,7 +65,8 @@\n \t(cbranchsi4_real_signed): New.\n \t(cbranchsi4_real): New.\n \t(peephole2): New.\n-\t* config/rl78/rl78-virt.md (ashrsi3_virt): Add custom cases for constant shifts.\n+\t* config/rl78/rl78-virt.md (ashrsi3_virt): Add custom cases for\n+\tconstant shifts.\n \t(lshrsi3_virt): Likewise.\n \t(ashlsi3_virt): Likewise.\n \t(cbranchqi4_virt_signed): New.\n@@ -93,8 +99,8 @@\n \t(add_postponed_content_update): New.\n \t(process_postponed_content_update): New.\n \t(gen_and_emit_move): New.\n-\t(transcode_memory_rtx): Record new location content.  Use\n-\tgen_and_emit_move.\n+\t(transcode_memory_rtx): Record new location content.\n+\tUse gen_and_emit_move.\n \t(force_into_acc): New.\n \t(move_to_acc): Use gen_and_emit_move.\n \t(move_from_acc): Likewise.\n@@ -192,9 +198,9 @@\n \t(MASK_REGNO_P): New.\n \t(ANY_MASK_REG_P): Ditto.\n \t(HI_REGISTER_NAMES): Add new mask registers.\n-\t* config/i386/i386.md (MASK0_REG, MASK1_REG, MASK2_REG,\n-\tMASK3_REG, MASK4_REG, MASK5_REG, MASK6_REG,\n-\tMASK7_REG): Constants for new mask registers.\n+\t* config/i386/i386.md (MASK0_REG, MASK1_REG, MASK2_REG, MASK3_REG,\n+\tMASK4_REG, MASK5_REG, MASK6_REG, MASK7_REG): Constants for new\n+\tmask registers.\n \t(attribute \"type\"): Add mskmov, msklog.\n \t(attribute \"length_immediate\"): Support them.\n \t(attribute \"memory\"): Ditto.\n@@ -219,7 +225,8 @@\n \t(*one_cmpl<mode>2_1): Remove HImode and handle it...\n \t(*one_cmplhi2_1): ...Here, now with mask registers support.\n \t(*one_cmplqi2_1): Support new mask registers.\n-\t(HI/QImode arithmetics splitter): Don't split if mask registers are used.\n+\t(HI/QImode arithmetics splitter): Don't split if mask registers\n+\tare used.\n \t(HI/QImode not splitter): Ditto.\n \t* config/i386/predicated.md (mask_reg_operand): New.\n \t(general_reg_operand): Ditto.\n@@ -312,9 +319,8 @@\n \t* tree-data-ref.h (build_rdg): Drop all parameters but loop.\n \t* tree-data-ref.c (create_rdg_vertices): Collect all data\n \treferences, signal failure to the caller, use data-ref API.\n-\t(build_rdg): Compute data references only once.  Maintain\n-\tlifetime of data references and data dependences from within\n-\tRDG.\n+\t(build_rdg): Compute data references only once.  Maintain lifetime\n+\tof data references and data dependences from within RDG.\n \t(free_rdg): Free dependence relations.\n \t* tree-loop-distribution.c (rdg_flag_uses): Drop weird code\n \tinventing extra dependences."}, {"sha": "cb48220c071dfea138f59bea123864387375ce89", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 37, "deletions": 40, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893e85fa0d8f2defe4af2490ec8a45a6adb510d4/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893e85fa0d8f2defe4af2490ec8a45a6adb510d4/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=893e85fa0d8f2defe4af2490ec8a45a6adb510d4", "patch": "@@ -10204,8 +10204,7 @@ void __builtin_ia32_mwait (unsigned int, unsigned int)\n @end smallexample\n \n The following built-in functions are available when @option{-mssse3} is used.\n-All of them generate the machine instruction that is part of the name\n-with MMX registers.\n+All of them generate the machine instruction that is part of the name.\n \n @smallexample\n v2si __builtin_ia32_phaddd (v2si, v2si)\n@@ -10227,8 +10226,7 @@ v4hi __builtin_ia32_pabsw (v4hi)\n @end smallexample\n \n The following built-in functions are available when @option{-mssse3} is used.\n-All of them generate the machine instruction that is part of the name\n-with SSE registers.\n+All of them generate the machine instruction that is part of the name.\n \n @smallexample\n v4si __builtin_ia32_phaddd128 (v4si, v4si)\n@@ -10876,42 +10874,41 @@ v8hi __builtin_ia32_vpshlw (v8hi, v8hi)\n @end smallexample\n \n The following built-in functions are available when @option{-mfma4} is used.\n-All of them generate the machine instruction that is part of the name\n-with MMX registers.\n-\n-@smallexample\n-v2df __builtin_ia32_fmaddpd (v2df, v2df, v2df)\n-v4sf __builtin_ia32_fmaddps (v4sf, v4sf, v4sf)\n-v2df __builtin_ia32_fmaddsd (v2df, v2df, v2df)\n-v4sf __builtin_ia32_fmaddss (v4sf, v4sf, v4sf)\n-v2df __builtin_ia32_fmsubpd (v2df, v2df, v2df)\n-v4sf __builtin_ia32_fmsubps (v4sf, v4sf, v4sf)\n-v2df __builtin_ia32_fmsubsd (v2df, v2df, v2df)\n-v4sf __builtin_ia32_fmsubss (v4sf, v4sf, v4sf)\n-v2df __builtin_ia32_fnmaddpd (v2df, v2df, v2df)\n-v4sf __builtin_ia32_fnmaddps (v4sf, v4sf, v4sf)\n-v2df __builtin_ia32_fnmaddsd (v2df, v2df, v2df)\n-v4sf __builtin_ia32_fnmaddss (v4sf, v4sf, v4sf)\n-v2df __builtin_ia32_fnmsubpd (v2df, v2df, v2df)\n-v4sf __builtin_ia32_fnmsubps (v4sf, v4sf, v4sf)\n-v2df __builtin_ia32_fnmsubsd (v2df, v2df, v2df)\n-v4sf __builtin_ia32_fnmsubss (v4sf, v4sf, v4sf)\n-v2df __builtin_ia32_fmaddsubpd  (v2df, v2df, v2df)\n-v4sf __builtin_ia32_fmaddsubps  (v4sf, v4sf, v4sf)\n-v2df __builtin_ia32_fmsubaddpd  (v2df, v2df, v2df)\n-v4sf __builtin_ia32_fmsubaddps  (v4sf, v4sf, v4sf)\n-v4df __builtin_ia32_fmaddpd256 (v4df, v4df, v4df)\n-v8sf __builtin_ia32_fmaddps256 (v8sf, v8sf, v8sf)\n-v4df __builtin_ia32_fmsubpd256 (v4df, v4df, v4df)\n-v8sf __builtin_ia32_fmsubps256 (v8sf, v8sf, v8sf)\n-v4df __builtin_ia32_fnmaddpd256 (v4df, v4df, v4df)\n-v8sf __builtin_ia32_fnmaddps256 (v8sf, v8sf, v8sf)\n-v4df __builtin_ia32_fnmsubpd256 (v4df, v4df, v4df)\n-v8sf __builtin_ia32_fnmsubps256 (v8sf, v8sf, v8sf)\n-v4df __builtin_ia32_fmaddsubpd256 (v4df, v4df, v4df)\n-v8sf __builtin_ia32_fmaddsubps256 (v8sf, v8sf, v8sf)\n-v4df __builtin_ia32_fmsubaddpd256 (v4df, v4df, v4df)\n-v8sf __builtin_ia32_fmsubaddps256 (v8sf, v8sf, v8sf)\n+All of them generate the machine instruction that is part of the name.\n+\n+@smallexample\n+v2df __builtin_ia32_vfmaddpd (v2df, v2df, v2df)\n+v4sf __builtin_ia32_vfmaddps (v4sf, v4sf, v4sf)\n+v2df __builtin_ia32_vfmaddsd (v2df, v2df, v2df)\n+v4sf __builtin_ia32_vfmaddss (v4sf, v4sf, v4sf)\n+v2df __builtin_ia32_vfmsubpd (v2df, v2df, v2df)\n+v4sf __builtin_ia32_vfmsubps (v4sf, v4sf, v4sf)\n+v2df __builtin_ia32_vfmsubsd (v2df, v2df, v2df)\n+v4sf __builtin_ia32_vfmsubss (v4sf, v4sf, v4sf)\n+v2df __builtin_ia32_vfnmaddpd (v2df, v2df, v2df)\n+v4sf __builtin_ia32_vfnmaddps (v4sf, v4sf, v4sf)\n+v2df __builtin_ia32_vfnmaddsd (v2df, v2df, v2df)\n+v4sf __builtin_ia32_vfnmaddss (v4sf, v4sf, v4sf)\n+v2df __builtin_ia32_vfnmsubpd (v2df, v2df, v2df)\n+v4sf __builtin_ia32_vfnmsubps (v4sf, v4sf, v4sf)\n+v2df __builtin_ia32_vfnmsubsd (v2df, v2df, v2df)\n+v4sf __builtin_ia32_vfnmsubss (v4sf, v4sf, v4sf)\n+v2df __builtin_ia32_vfmaddsubpd  (v2df, v2df, v2df)\n+v4sf __builtin_ia32_vfmaddsubps  (v4sf, v4sf, v4sf)\n+v2df __builtin_ia32_vfmsubaddpd  (v2df, v2df, v2df)\n+v4sf __builtin_ia32_vfmsubaddps  (v4sf, v4sf, v4sf)\n+v4df __builtin_ia32_vfmaddpd256 (v4df, v4df, v4df)\n+v8sf __builtin_ia32_vfmaddps256 (v8sf, v8sf, v8sf)\n+v4df __builtin_ia32_vfmsubpd256 (v4df, v4df, v4df)\n+v8sf __builtin_ia32_vfmsubps256 (v8sf, v8sf, v8sf)\n+v4df __builtin_ia32_vfnmaddpd256 (v4df, v4df, v4df)\n+v8sf __builtin_ia32_vfnmaddps256 (v8sf, v8sf, v8sf)\n+v4df __builtin_ia32_vfnmsubpd256 (v4df, v4df, v4df)\n+v8sf __builtin_ia32_vfnmsubps256 (v8sf, v8sf, v8sf)\n+v4df __builtin_ia32_vfmaddsubpd256 (v4df, v4df, v4df)\n+v8sf __builtin_ia32_vfmaddsubps256 (v8sf, v8sf, v8sf)\n+v4df __builtin_ia32_vfmsubaddpd256 (v4df, v4df, v4df)\n+v8sf __builtin_ia32_vfmsubaddps256 (v8sf, v8sf, v8sf)\n \n @end smallexample\n "}]}