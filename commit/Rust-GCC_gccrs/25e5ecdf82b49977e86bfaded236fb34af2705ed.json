{"sha": "25e5ecdf82b49977e86bfaded236fb34af2705ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVlNWVjZGY4MmI0OTk3N2U4NmJmYWRlZDIzNmZiMzRhZjI3MDVlZA==", "commit": {"author": {"name": "Thomas Rodgers", "email": "rodgert@appliantology.com", "date": "2021-06-08T22:51:53Z"}, "committer": {"name": "Thomas Rodgers", "email": "rodgert@appliantology.com", "date": "2021-06-08T22:55:10Z"}, "message": "libstdc++: Fix Wrong param type in :atomic_ref<_Tp*>::wait [PR100889]\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100889\n\t* include/bits/atomic_base.h (atomic_ref<_Tp*>::wait):\n\tChange parameter type from _Tp to _Tp*.\n\t* testsuite/29_atomics/atomic_ref/wait_notify.cc: Extend\n\tcoverage of types tested.", "tree": {"sha": "889ce3d70e31292fa03457b55c56756fc55f8526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/889ce3d70e31292fa03457b55c56756fc55f8526"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25e5ecdf82b49977e86bfaded236fb34af2705ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25e5ecdf82b49977e86bfaded236fb34af2705ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25e5ecdf82b49977e86bfaded236fb34af2705ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25e5ecdf82b49977e86bfaded236fb34af2705ed/comments", "author": null, "committer": null, "parents": [{"sha": "16a8e18858abdc877b14caf33dec24aada1a3308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16a8e18858abdc877b14caf33dec24aada1a3308", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16a8e18858abdc877b14caf33dec24aada1a3308"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "20cf1343c58ece9a29ecb220536d161d0c997396", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e5ecdf82b49977e86bfaded236fb34af2705ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e5ecdf82b49977e86bfaded236fb34af2705ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=25e5ecdf82b49977e86bfaded236fb34af2705ed", "patch": "@@ -1870,7 +1870,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cpp_lib_atomic_wait\n       _GLIBCXX_ALWAYS_INLINE void\n-      wait(_Tp __old, memory_order __m = memory_order_seq_cst) const noexcept\n+      wait(_Tp* __old, memory_order __m = memory_order_seq_cst) const noexcept\n       { __atomic_impl::wait(_M_ptr, __old, __m); }\n \n       // TODO add const volatile overload"}, {"sha": "003b86c85d00c5a1da9d62e8af9c2934818ae8c0", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_ref/wait_notify.cc", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e5ecdf82b49977e86bfaded236fb34af2705ed/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_ref%2Fwait_notify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e5ecdf82b49977e86bfaded236fb34af2705ed/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_ref%2Fwait_notify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_ref%2Fwait_notify.cc?ref=25e5ecdf82b49977e86bfaded236fb34af2705ed", "patch": "@@ -26,22 +26,34 @@\n \n #include <testsuite_hooks.h>\n \n+template<typename S>\n+  void\n+  test (S va, S vb)\n+  {\n+    S aa{ va };\n+    S bb{ vb };\n+    std::atomic_ref<S> a{ aa };\n+    a.wait(bb);\n+    std::thread t([&]\n+      {\n+\ta.store(bb);\n+\ta.notify_one();\n+      });\n+    a.wait(aa);\n+    t.join();\n+  }\n+\n int\n main ()\n {\n+  test<int>(0, 42);\n+  test<long>(0, 42);\n+  test<unsigned>(0u, 42u);\n+  test<float>(0.0f, 42.0f);\n+  test<double>(0.0, 42.0);\n+  test<void*>(nullptr, reinterpret_cast<void*>(42));\n+\n   struct S{ int i; };\n-  S aa{ 0 };\n-  S bb{ 42 };\n-\n-  std::atomic_ref<S> a{ aa };\n-  VERIFY( a.load().i == aa.i );\n-  a.wait(bb);\n-  std::thread t([&]\n-    {\n-      a.store(bb);\n-      a.notify_one();\n-    });\n-  a.wait(aa);\n-  t.join();\n+  test<S>(S{ 0 }, S{ 42 });\n   return 0;\n }"}]}