{"sha": "3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IwMDdiNWQ2YmNlZmEzYzg3YTkyMGU4MzRhN2IxZDBhMzRmMzhlNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2002-01-04T17:02:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2002-01-04T17:02:28Z"}, "message": "stl_tree.h (rb_tree): Move to...\n\n2002-01-04  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/stl_tree.h (rb_tree):  Move to...\n\t* include/ext/rb_tree:  ...here, new file.\n        * include/Makefile.am (ext_headers):  Add new file.\n        * include/Makefile.in:  Regenerate.\n        * include/bits/stl_tempbuf.h (get_temporary_buffer + helper,\n\treturn_temporary_buffer, struct temporary_buffer):  Move to...\n        * include/ext/memory:  ...here.\n        * testsuite/ext/headers.cc:  Include <ext/rb_tree>.\n\t* include/backward/tempbuf.h:  Include <ext/memory>, tweak.\n\t* include/backward/tree.h:  Include <ext/rb_tree), tweak.\n\nFrom-SVN: r48538", "tree": {"sha": "ef4219bcfd9e1b5a7f08cc328f044c7aa65ed663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef4219bcfd9e1b5a7f08cc328f044c7aa65ed663"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/comments", "author": null, "committer": null, "parents": [{"sha": "b6ec437a14a6a4774e07529aaeaa8879bf379011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6ec437a14a6a4774e07529aaeaa8879bf379011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6ec437a14a6a4774e07529aaeaa8879bf379011"}], "stats": {"total": 226, "additions": 156, "deletions": 70}, "files": [{"sha": "776bbfe6e529bacee58dd5395fd0873c0d946016", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5", "patch": "@@ -1,3 +1,16 @@\n+2002-01-04  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/stl_tree.h (rb_tree):  Move to...\n+\t* include/ext/rb_tree:  ...here, new file.\n+\t* include/Makefile.am (ext_headers):  Add new file.\n+\t* include/Makefile.in:  Regenerate.\n+\t* include/bits/stl_tempbuf.h (get_temporary_buffer + helper,\n+\treturn_temporary_buffer, struct temporary_buffer):  Move to...\n+\t* include/ext/memory:  ...here.\n+\t* testsuite/ext/headers.cc:  Include <ext/rb_tree>.\n+\t* include/backward/tempbuf.h:  Include <ext/memory>, tweak.\n+\t* include/backward/tree.h:  Include <ext/rb_tree), tweak.\n+\n 2002-01-03  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/bits/stl_numeric.h (power + helpers, iota):  Move to..."}, {"sha": "17c4baae0ec0fd079564c82c88581950d9450b6a", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5", "patch": "@@ -179,6 +179,7 @@ ext_headers = \\\n \t${ext_srcdir}/iterator \\\n \t${ext_srcdir}/memory \\\n \t${ext_srcdir}/numeric \\\n+\t${ext_srcdir}/rb_tree \\\n \t${ext_srcdir}/rope \\\n \t${ext_srcdir}/ropeimpl.h \\\n \t${ext_srcdir}/slist \\"}, {"sha": "f07088c27985ab36886984433d3e5c3c15afe5f2", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5", "patch": "@@ -309,6 +309,7 @@ ext_headers = \\\n \t${ext_srcdir}/iterator \\\n \t${ext_srcdir}/memory \\\n \t${ext_srcdir}/numeric \\\n+\t${ext_srcdir}/rb_tree \\\n \t${ext_srcdir}/rope \\\n \t${ext_srcdir}/ropeimpl.h \\\n \t${ext_srcdir}/slist \\"}, {"sha": "617cbc33c08094eb3fb1b338dd8b81eed7df368b", "filename": "libstdc++-v3/include/backward/tempbuf.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftempbuf.h?ref=3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5", "patch": "@@ -65,11 +65,11 @@\n #include <bits/type_traits.h>  \n #include <bits/stl_construct.h>\n #include <bits/stl_uninitialized.h>\n-#include <bits/stl_tempbuf.h>\n+#include <ext/memory>\n \n-using std::get_temporary_buffer;\n-using std::return_temporary_buffer;\n-using std::temporary_buffer;\n+using __gnu_cxx::get_temporary_buffer;\n+using __gnu_cxx::return_temporary_buffer;\n+using __gnu_cxx::temporary_buffer;\n \n #endif /* _CPP_BACKWARD_TEMPBUF_H */\n "}, {"sha": "f3ee6525b88c8db7adda4b57049dad5b27975e0b", "filename": "libstdc++-v3/include/backward/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftree.h?ref=3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5", "patch": "@@ -45,9 +45,9 @@\n #define _CPP_EXT_TREE 1\n \n #include \"backward_warning.h\"\n-#include <bits/stl_tree.h>\n+#include <ext/rb_tree>\n \n-using std::rb_tree;\n+using __gnu_cxx::rb_tree;\n \n #endif \n // Local Variables:"}, {"sha": "05565e0288891c4cc4c082981767a93addf616a7", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5", "patch": "@@ -64,40 +64,6 @@\n namespace std\n {\n \n-template <class _Tp>\n-pair<_Tp*, ptrdiff_t> \n-__get_temporary_buffer(ptrdiff_t __len, _Tp*)\n-{\n-  if (__len > ptrdiff_t(INT_MAX / sizeof(_Tp)))\n-    __len = INT_MAX / sizeof(_Tp);\n-\n-  while (__len > 0) {\n-    _Tp* __tmp = (_Tp*) malloc((size_t)__len * sizeof(_Tp));\n-    if (__tmp != 0)\n-      return pair<_Tp*, ptrdiff_t>(__tmp, __len);\n-    __len /= 2;\n-  }\n-\n-  return pair<_Tp*, ptrdiff_t>((_Tp*)0, 0);\n-}\n-\n-/**\n- *  This is a mostly-useless wrapper around malloc().\n-*/\n-template <class _Tp>\n-inline pair<_Tp*, ptrdiff_t> get_temporary_buffer(ptrdiff_t __len) {\n-  return __get_temporary_buffer(__len, (_Tp*) 0);\n-}\n-\n-/**\n- *  The companion to get_temporary_buffer().\n-*/\n-template <class _Tp>\n-void return_temporary_buffer(_Tp* __p) {\n-  free(__p);\n-}\n-\n-\n template <class _ForwardIterator, class _Tp>\n class _Temporary_buffer {\n private:\n@@ -161,19 +127,6 @@ class _Temporary_buffer {\n   _Temporary_buffer(const _Temporary_buffer&) {}\n   void operator=(const _Temporary_buffer&) {}\n };\n-\n-// Class temporary_buffer is not part of the standard.  It is an extension.\n-\n-template <class _ForwardIterator, \n-          class _Tp \n-                    = typename iterator_traits<_ForwardIterator>::value_type\n-         >\n-struct temporary_buffer : public _Temporary_buffer<_ForwardIterator, _Tp>\n-{\n-  temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)\n-    : _Temporary_buffer<_ForwardIterator, _Tp>(__first, __last) {}\n-  ~temporary_buffer() {}\n-};\n     \n } // namespace std\n "}, {"sha": "5a0b94839aee5bdb7de0ddaafeb577e27aa1a479", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5", "patch": "@@ -1288,23 +1288,6 @@ bool _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const\n   return true;\n }\n \n-// Class rb_tree is not part of the C++ standard.  It is provided for\n-// compatibility with the HP STL.\n-\n-template <class _Key, class _Value, class _KeyOfValue, class _Compare,\n-          class _Alloc = allocator<_Value> >\n-struct rb_tree : public _Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc>\n-{\n-  typedef _Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc> _Base;\n-  typedef typename _Base::allocator_type allocator_type;\n-\n-  rb_tree(const _Compare& __comp = _Compare(),\n-          const allocator_type& __a = allocator_type())\n-    : _Base(__comp, __a) {}\n-  \n-  ~rb_tree() {}\n-};\n-\n } // namespace std \n \n #endif /* __GLIBCPP_INTERNAL_TREE_H */"}, {"sha": "84c31f05684dfd63494a7f552c8d9c593da60b95", "filename": "libstdc++-v3/include/ext/memory", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory?ref=3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5", "patch": "@@ -61,8 +61,10 @@\n \n namespace __gnu_cxx\n {\n+  using std::ptrdiff_t;\n   using std::pair;\n   using std::__iterator_category;\n+  using std::_Temporary_buffer;\n   \n   // uninitialized_copy_n (not part of the C++ standard)\n \n@@ -122,6 +124,52 @@ namespace __gnu_cxx\n \t\t\t\t    __iterator_category(__first));\n     }\n \n+  template <class _Tp>\n+  pair<_Tp*, ptrdiff_t> \n+  __get_temporary_buffer(ptrdiff_t __len, _Tp*)\n+  {\n+    if (__len > ptrdiff_t(INT_MAX / sizeof(_Tp)))\n+      __len = INT_MAX / sizeof(_Tp);\n+\n+    while (__len > 0) {\n+      _Tp* __tmp = (_Tp*) std::malloc((std::size_t)__len * sizeof(_Tp));\n+      if (__tmp != 0)\n+\treturn pair<_Tp*, ptrdiff_t>(__tmp, __len);\n+      __len /= 2;\n+    }\n+\n+    return pair<_Tp*, ptrdiff_t>((_Tp*)0, 0);\n+  }\n+\n+  /**\n+   *  This is a mostly-useless wrapper around malloc().\n+   */\n+  template <class _Tp>\n+  inline pair<_Tp*, ptrdiff_t> get_temporary_buffer(ptrdiff_t __len) {\n+    return __get_temporary_buffer(__len, (_Tp*) 0);\n+  }\n+\n+  /**\n+   *  The companion to get_temporary_buffer().\n+   */\n+  template <class _Tp>\n+  void return_temporary_buffer(_Tp* __p) {\n+    std::free(__p);\n+  }\n+\n+  // Class temporary_buffer is not part of the standard.  It is an extension.\n+\n+  template <class _ForwardIterator, \n+\t    class _Tp \n+\t    = typename std::iterator_traits<_ForwardIterator>::value_type\n+  >\n+  struct temporary_buffer : public _Temporary_buffer<_ForwardIterator, _Tp>\n+  {\n+    temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)\n+      : _Temporary_buffer<_ForwardIterator, _Tp>(__first, __last) {}\n+    ~temporary_buffer() {}\n+  };\n+\n } // namespace __gnu_cxx\n \n #endif /* _EXT_MEMORY */"}, {"sha": "103900e7d4de93d7ee3c9a118831acb799b8c94e", "filename": "libstdc++-v3/include/ext/rb_tree", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2Finclude%2Fext%2Frb_tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2Finclude%2Fext%2Frb_tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frb_tree?ref=3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5", "patch": "@@ -0,0 +1,86 @@\n+// rb_tree extension -*- C++ -*-\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/*\n+ *\n+ * Copyright (c) 1994\n+ * Hewlett-Packard Company\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Hewlett-Packard Company makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ *\n+ * Copyright (c) 1996\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+#ifndef _EXT_RB_TREE\n+#define _EXT_RB_TREE\n+\n+#pragma GCC system_header\n+#include <bits/stl_tree.h>\n+\n+namespace __gnu_cxx\n+{\n+using std::_Rb_tree;\n+using std::allocator;\n+\n+// Class rb_tree is not part of the C++ standard.  It is provided for\n+// compatibility with the HP STL.\n+\n+template <class _Key, class _Value, class _KeyOfValue, class _Compare,\n+          class _Alloc = allocator<_Value> >\n+struct rb_tree : public _Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc>\n+{\n+  typedef _Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc> _Base;\n+  typedef typename _Base::allocator_type allocator_type;\n+\n+  rb_tree(const _Compare& __comp = _Compare(),\n+          const allocator_type& __a = allocator_type())\n+    : _Base(__comp, __a) {}\n+  \n+  ~rb_tree() {}\n+};\n+\n+} // namespace __gnu_cxx\n+\n+#endif /* _EXT_RB_TREE */"}, {"sha": "a2c1233302d3f32f056318f9be5a9154e3be5c9c", "filename": "libstdc++-v3/testsuite/ext/headers.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fheaders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fheaders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fheaders.cc?ref=3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5", "patch": "@@ -30,6 +30,7 @@\n #include <ext/iterator>\n #include <ext/memory>\n #include <ext/numeric>\n+#include <ext/rb_tree>\n #include <ext/rope>\n #include <ext/slist>\n "}]}