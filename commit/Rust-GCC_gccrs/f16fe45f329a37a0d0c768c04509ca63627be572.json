{"sha": "f16fe45f329a37a0d0c768c04509ca63627be572", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE2ZmU0NWYzMjlhMzdhMGQwYzc2OGMwNDUwOWNhNjM2MjdiZTU3Mg==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2005-11-14T17:07:42Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2005-11-14T17:07:42Z"}, "message": "arm.c (pic_labelno): New.\n\n\t* config/arm/arm.c (pic_labelno): New.\n\t(arm_load_pic_register): Use an UNSPEC_PIC_LABEL instead of a\n\tLABEL_REF.  Pass only the labelno to PIC insns.\n\t(arm_call_tls_get_addr, legitimize_tls_address): Likewise.\n\t(arm_output_addr_const_extra): Handle UNSPEC_PIC_LABEL.\n\t* arm.md (UNSPEC_PIC_LABEL): New constant.\n\t(pic_add_dot_plus_four, pic_add_dot_plus_eight)\n\t(tls_load_dot_plus_eight): Expect a labelno instead of a LABEL_REF.\n\tUse the correct label prefix.\n\nFrom-SVN: r106893", "tree": {"sha": "3e2cac69e7d077b62a84fb1c6bfd02b374913b14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e2cac69e7d077b62a84fb1c6bfd02b374913b14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f16fe45f329a37a0d0c768c04509ca63627be572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f16fe45f329a37a0d0c768c04509ca63627be572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f16fe45f329a37a0d0c768c04509ca63627be572", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f16fe45f329a37a0d0c768c04509ca63627be572/comments", "author": null, "committer": null, "parents": [{"sha": "e66e1c68069bbc63a5bdf1db079c3db248d4fabb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66e1c68069bbc63a5bdf1db079c3db248d4fabb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e66e1c68069bbc63a5bdf1db079c3db248d4fabb"}], "stats": {"total": 85, "additions": 59, "deletions": 26}, "files": [{"sha": "8ad58d5fdabc45ee406964de36b5eb33acd16fba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16fe45f329a37a0d0c768c04509ca63627be572/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16fe45f329a37a0d0c768c04509ca63627be572/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f16fe45f329a37a0d0c768c04509ca63627be572", "patch": "@@ -1,3 +1,15 @@\n+2005-11-14  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* config/arm/arm.c (pic_labelno): New.\n+\t(arm_load_pic_register): Use an UNSPEC_PIC_LABEL instead of a\n+\tLABEL_REF.  Pass only the labelno to PIC insns.\n+\t(arm_call_tls_get_addr, legitimize_tls_address): Likewise.\n+\t(arm_output_addr_const_extra): Handle UNSPEC_PIC_LABEL.\n+\t* arm.md (UNSPEC_PIC_LABEL): New constant.\n+\t(pic_add_dot_plus_four, pic_add_dot_plus_eight)\n+\t(tls_load_dot_plus_eight): Expect a labelno instead of a LABEL_REF.\n+\tUse the correct label prefix.\n+\n 2005-11-14  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* config/arm/arm.c (legitimize_tls_address): Use correct rtx for"}, {"sha": "c3a7562f8fa06645ace8aae2fb2f02b91aaecaa9", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16fe45f329a37a0d0c768c04509ca63627be572/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16fe45f329a37a0d0c768c04509ca63627be572/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f16fe45f329a37a0d0c768c04509ca63627be572", "patch": "@@ -3340,6 +3340,7 @@ thumb_find_work_register (unsigned long pushed_regs_mask)\n   gcc_unreachable ();\n }\n \n+static GTY(()) int pic_labelno;\n \n /* Generate code to load the PIC register.  In thumb mode SCRATCH is a\n    low register.  */\n@@ -3348,20 +3349,25 @@ void\n arm_load_pic_register (unsigned long saved_regs ATTRIBUTE_UNUSED)\n {\n #ifndef AOF_ASSEMBLER\n-  rtx l1, pic_tmp, pic_tmp2, pic_rtx;\n+  rtx l1, labelno, pic_tmp, pic_tmp2, pic_rtx;\n   rtx global_offset_table;\n \n   if (current_function_uses_pic_offset_table == 0 || TARGET_SINGLE_PIC_BASE)\n     return;\n \n   gcc_assert (flag_pic);\n \n-  l1 = gen_label_rtx ();\n+  /* We use an UNSPEC rather than a LABEL_REF because this label never appears\n+     in the code stream.  */\n+\n+  labelno = GEN_INT (pic_labelno++);\n+  l1 = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, labelno), UNSPEC_PIC_LABEL);\n+  l1 = gen_rtx_CONST (VOIDmode, l1);\n \n   global_offset_table = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n   /* On the ARM the PC register contains 'dot + 8' at the time of the\n      addition, on the Thumb it is 'dot + 4'.  */\n-  pic_tmp = plus_constant (gen_rtx_LABEL_REF (Pmode, l1), TARGET_ARM ? 8 : 4);\n+  pic_tmp = plus_constant (l1, TARGET_ARM ? 8 : 4);\n   if (GOT_PCREL)\n     pic_tmp2 = gen_rtx_CONST (VOIDmode,\n \t\t\t    gen_rtx_PLUS (Pmode, global_offset_table, pc_rtx));\n@@ -3374,7 +3380,7 @@ arm_load_pic_register (unsigned long saved_regs ATTRIBUTE_UNUSED)\n     {\n       emit_insn (gen_pic_load_addr_arm (pic_offset_table_rtx, pic_rtx));\n       emit_insn (gen_pic_add_dot_plus_eight (pic_offset_table_rtx,\n-\t\t\t\t\t     pic_offset_table_rtx, l1));\n+\t\t\t\t\t     pic_offset_table_rtx, labelno));\n     }\n   else\n     {\n@@ -3390,7 +3396,7 @@ arm_load_pic_register (unsigned long saved_regs ATTRIBUTE_UNUSED)\n       else\n \temit_insn (gen_pic_load_addr_thumb (pic_offset_table_rtx, pic_rtx));\n       emit_insn (gen_pic_add_dot_plus_four (pic_offset_table_rtx,\n-\t\t\t\t\t    pic_offset_table_rtx, l1));\n+\t\t\t\t\t    pic_offset_table_rtx, labelno));\n     }\n \n   /* Need to emit this whether or not we obey regdecls,\n@@ -3822,22 +3828,24 @@ load_tls_operand (rtx x, rtx reg)\n static rtx\n arm_call_tls_get_addr (rtx x, rtx reg, rtx *valuep, int reloc)\n {\n-  rtx insns, label, sum;\n+  rtx insns, label, labelno, sum;\n \n   start_sequence ();\n \n-  label = gen_label_rtx ();\n+  labelno = GEN_INT (pic_labelno++);\n+  label = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, labelno), UNSPEC_PIC_LABEL);\n+  label = gen_rtx_CONST (VOIDmode, label);\n+\n   sum = gen_rtx_UNSPEC (Pmode,\n-\t\t\tgen_rtvec (4, x, GEN_INT (reloc),\n-\t\t\t\t   gen_rtx_LABEL_REF (Pmode, label),\n+\t\t\tgen_rtvec (4, x, GEN_INT (reloc), label,\n \t\t\t\t   GEN_INT (TARGET_ARM ? 8 : 4)),\n \t\t\tUNSPEC_TLS);\n   reg = load_tls_operand (sum, reg);\n \n   if (TARGET_ARM)\n-    emit_insn (gen_pic_add_dot_plus_eight (reg, reg, label));\n+    emit_insn (gen_pic_add_dot_plus_eight (reg, reg, labelno));\n   else\n-    emit_insn (gen_pic_add_dot_plus_four (reg, reg, label));\n+    emit_insn (gen_pic_add_dot_plus_four (reg, reg, labelno));\n \n   *valuep = emit_library_call_value (get_tls_get_addr (), NULL_RTX, LCT_PURE, /* LCT_CONST?  */\n \t\t\t\t     Pmode, 1, reg, Pmode);\n@@ -3851,7 +3859,7 @@ arm_call_tls_get_addr (rtx x, rtx reg, rtx *valuep, int reloc)\n rtx\n legitimize_tls_address (rtx x, rtx reg)\n {\n-  rtx dest, tp, label, sum, insns, ret, eqv, addend;\n+  rtx dest, tp, label, labelno, sum, insns, ret, eqv, addend;\n   unsigned int model = SYMBOL_REF_TLS_MODEL (x);\n \n   switch (model)\n@@ -3879,19 +3887,20 @@ legitimize_tls_address (rtx x, rtx reg)\n       return gen_rtx_PLUS (Pmode, dest, addend);\n \n     case TLS_MODEL_INITIAL_EXEC:\n-      label = gen_label_rtx ();\n+      labelno = GEN_INT (pic_labelno++);\n+      label = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, labelno), UNSPEC_PIC_LABEL);\n+      label = gen_rtx_CONST (VOIDmode, label);\n       sum = gen_rtx_UNSPEC (Pmode,\n-\t\t\t    gen_rtvec (4, x, GEN_INT (TLS_IE32),\n-\t\t\t\t       gen_rtx_LABEL_REF (Pmode, label),\n+\t\t\t    gen_rtvec (4, x, GEN_INT (TLS_IE32), label,\n \t\t\t\t       GEN_INT (TARGET_ARM ? 8 : 4)),\n \t\t\t    UNSPEC_TLS);\n       reg = load_tls_operand (sum, reg);\n \n       if (TARGET_ARM)\n-\temit_insn (gen_tls_load_dot_plus_eight (reg, reg, label));\n+\temit_insn (gen_tls_load_dot_plus_eight (reg, reg, labelno));\n       else\n \t{\n-\t  emit_insn (gen_pic_add_dot_plus_four (reg, reg, label));\n+\t  emit_insn (gen_pic_add_dot_plus_four (reg, reg, labelno));\n \t  emit_move_insn (reg, gen_const_mem (SImode, reg));\n \t}\n \n@@ -15431,6 +15440,16 @@ arm_output_addr_const_extra (FILE *fp, rtx x)\n {\n   if (GET_CODE (x) == UNSPEC && XINT (x, 1) == UNSPEC_TLS)\n     return arm_emit_tls_decoration (fp, x);\n+  else if (GET_CODE (x) == UNSPEC && XINT (x, 1) == UNSPEC_PIC_LABEL)\n+    {\n+      char label[256];\n+      int labelno = INTVAL (XVECEXP (x, 0, 0));\n+\n+      ASM_GENERATE_INTERNAL_LABEL (label, \"LPIC\", labelno);\n+      assemble_name_raw (fp, label);\n+\n+      return TRUE;\n+    }\n   else if (GET_CODE (x) == CONST_VECTOR)\n     return arm_emit_vector_const (fp, x);\n "}, {"sha": "1b671fa1d1ee73a315c4c16cc2f3c6df107a35c3", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16fe45f329a37a0d0c768c04509ca63627be572/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16fe45f329a37a0d0c768c04509ca63627be572/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=f16fe45f329a37a0d0c768c04509ca63627be572", "patch": "@@ -91,6 +91,8 @@\n    (UNSPEC_WMADDS   18) ; Used by the intrinsic form of the iWMMXt WMADDS instruction.\n    (UNSPEC_WMADDU   19) ; Used by the intrinsic form of the iWMMXt WMADDU instruction.\n    (UNSPEC_TLS      20) ; A symbol that has been treated properly for TLS usage.\n+   (UNSPEC_PIC_LABEL 21) ; A label used for PIC access that does not appear in the\n+                         ; instruction stream.\n   ]\n )\n \n@@ -4468,11 +4470,11 @@\n \t(unspec:SI [(plus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t\t     (const (plus:SI (pc) (const_int 4))))]\n \t\t   UNSPEC_PIC_BASE))\n-   (use (label_ref (match_operand 2 \"\" \"\")))]\n+   (use (match_operand 2 \"\" \"\"))]\n   \"TARGET_THUMB\"\n   \"*\n-  (*targetm.asm_out.internal_label) (asm_out_file, \\\"L\\\",\n-\t\t\t     CODE_LABEL_NUMBER (operands[2]));\n+  (*targetm.asm_out.internal_label) (asm_out_file, \\\"LPIC\\\",\n+\t\t\t\t     INTVAL (operands[2]));\n   return \\\"add\\\\t%0, %|pc\\\";\n   \"\n   [(set_attr \"length\" \"2\")]\n@@ -4483,11 +4485,11 @@\n \t(unspec:SI [(plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t     (const (plus:SI (pc) (const_int 8))))]\n \t\t   UNSPEC_PIC_BASE))\n-   (use (label_ref (match_operand 2 \"\" \"\")))]\n+   (use (match_operand 2 \"\" \"\"))]\n   \"TARGET_ARM\"\n   \"*\n-    (*targetm.asm_out.internal_label) (asm_out_file, \\\"L\\\",\n-\t\t\t       CODE_LABEL_NUMBER (operands[2]));\n+    (*targetm.asm_out.internal_label) (asm_out_file, \\\"LPIC\\\",\n+\t\t\t\t       INTVAL (operands[2]));\n     return \\\"add%?\\\\t%0, %|pc, %1\\\";\n   \"\n   [(set_attr \"predicable\" \"yes\")]\n@@ -4498,11 +4500,11 @@\n \t(mem:SI (unspec:SI [(plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t     (const (plus:SI (pc) (const_int 8))))]\n \t\t\t   UNSPEC_PIC_BASE)))\n-   (use (label_ref (match_operand 2 \"\" \"\")))]\n+   (use (match_operand 2 \"\" \"\"))]\n   \"TARGET_ARM\"\n   \"*\n-    (*targetm.asm_out.internal_label) (asm_out_file, \\\"L\\\",\n-\t\t\t       CODE_LABEL_NUMBER (operands[2]));\n+    (*targetm.asm_out.internal_label) (asm_out_file, \\\"LPIC\\\",\n+\t\t\t\t       INTVAL (operands[2]));\n     return \\\"ldr%?\\\\t%0, [%|pc, %1]\\t\\t@ tls_load_dot_plus_eight\\\";\n   \"\n   [(set_attr \"predicable\" \"yes\")]"}]}