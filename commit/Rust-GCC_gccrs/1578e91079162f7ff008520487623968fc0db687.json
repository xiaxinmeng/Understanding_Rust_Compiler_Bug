{"sha": "1578e91079162f7ff008520487623968fc0db687", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU3OGU5MTA3OTE2MmY3ZmYwMDg1MjA0ODc2MjM5NjhmYzBkYjY4Nw==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2009-10-20T16:07:21Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2009-10-20T16:07:21Z"}, "message": "* loop-invariant.c (create_new_invariant): Use different magic number.\n\nFrom-SVN: r153022", "tree": {"sha": "8373744cb0ba30186429688bf97d57291d6ff5b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8373744cb0ba30186429688bf97d57291d6ff5b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1578e91079162f7ff008520487623968fc0db687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1578e91079162f7ff008520487623968fc0db687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1578e91079162f7ff008520487623968fc0db687", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1578e91079162f7ff008520487623968fc0db687/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a3a8eb12ea8fa102cfbdbd2429fc119a41f5904", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a3a8eb12ea8fa102cfbdbd2429fc119a41f5904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a3a8eb12ea8fa102cfbdbd2429fc119a41f5904"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "3dfa1bbbc07d193f5116e8287fb822c2f72c340f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1578e91079162f7ff008520487623968fc0db687/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1578e91079162f7ff008520487623968fc0db687/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1578e91079162f7ff008520487623968fc0db687", "patch": "@@ -1,3 +1,7 @@\n+2009-10-20  Michael Matz  <matz@suse.de>\n+\n+\t* loop-invariant.c (create_new_invariant): Use different magic number.\n+\n 2009-10-20  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/39247"}, {"sha": "901ce51ac89cfbee77e426d3b787fa5d85227f3d", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1578e91079162f7ff008520487623968fc0db687/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1578e91079162f7ff008520487623968fc0db687/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=1578e91079162f7ff008520487623968fc0db687", "patch": "@@ -705,8 +705,17 @@ create_new_invariant (struct def *def, rtx insn, bitmap depends_on,\n   if (def)\n     {\n       inv->cost = rtx_cost (set, SET, speed);\n+      /* ??? Try to determine cheapness of address computation.  Unfortunately\n+         the address cost is only a relative measure, we can't really compare\n+\t it with any absolute number, but only with other address costs.\n+\t But here we don't have any other addresses, so compare with a magic\n+\t number anyway.  It has to be large enough to not regress PR33928\n+\t (by avoiding to move reg+8,reg+16,reg+24 invariants), but small\n+\t enough to not regress 410.bwaves either (by still moving reg+reg\n+\t invariants).\n+\t See http://gcc.gnu.org/ml/gcc-patches/2009-10/msg01210.html .  */\n       inv->cheap_address = address_cost (SET_SRC (set), word_mode,\n-\t\t\t\t\t speed) < COSTS_N_INSNS (1);\n+\t\t\t\t\t speed) < 3;\n     }\n   else\n     {"}]}