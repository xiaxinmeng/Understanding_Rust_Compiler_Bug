{"sha": "1862869df973b42e270a7af90f66dbfcd18a93c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg2Mjg2OWRmOTczYjQyZTI3MGE3YWY5MGY2NmRiZmNkMThhOTNjMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-10-29T12:29:54Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-10-29T12:29:54Z"}, "message": "h8300.h (MASK_*): New.\n\n\t* config/h8300/h8300.h (MASK_*): New.\n\t(TARGET_*): Use MASK_*.\n\nFrom-SVN: r58620", "tree": {"sha": "c3d11b152f0c0425ffea37875ec6148424f7495e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3d11b152f0c0425ffea37875ec6148424f7495e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1862869df973b42e270a7af90f66dbfcd18a93c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1862869df973b42e270a7af90f66dbfcd18a93c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1862869df973b42e270a7af90f66dbfcd18a93c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1862869df973b42e270a7af90f66dbfcd18a93c3/comments", "author": null, "committer": null, "parents": [{"sha": "216cd92c021528364eb4cdc2431bc9b1c21bdf8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/216cd92c021528364eb4cdc2431bc9b1c21bdf8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/216cd92c021528364eb4cdc2431bc9b1c21bdf8a"}], "stats": {"total": 73, "additions": 45, "deletions": 28}, "files": [{"sha": "49e9ecdc2589674061f2ee175a0dccd90893b4f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1862869df973b42e270a7af90f66dbfcd18a93c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1862869df973b42e270a7af90f66dbfcd18a93c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1862869df973b42e270a7af90f66dbfcd18a93c3", "patch": "@@ -1,3 +1,8 @@\n+2002-10-29  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.h (MASK_*): New.\n+\t(TARGET_*): Use MASK_*.\n+\n 2002-10-28  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config.gcc (*-*-netbsd*): Add NETBSD_ENABLE_PTHREADS to"}, {"sha": "927484a6ba3bafebdbcdfd0301cbecfd632d5883", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 40, "deletions": 28, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1862869df973b42e270a7af90f66dbfcd18a93c3/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1862869df973b42e270a7af90f66dbfcd18a93c3/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=1862869df973b42e270a7af90f66dbfcd18a93c3", "patch": "@@ -74,65 +74,77 @@ extern const char * const *h8_reg_names;\n \n extern int target_flags;\n \n+/* Masks for the -m switches.  */\n+#define MASK_H8300S\t\t0x00000001\n+#define MASK_MAC\t\t0x00000002\n+#define MASK_INT32\t\t0x00000008\n+#define MASK_ADDRESSES\t\t0x00000040\n+#define MASK_QUICKCALL\t\t0x00000080\n+#define MASK_SLOWBYTE\t\t0x00000100\n+#define MASK_RELAX\t\t0x00000400\n+#define MASK_RTL_DUMP\t\t0x00000800\n+#define MASK_H8300H\t\t0x00001000\n+#define MASK_ALIGN_300\t\t0x00002000\n+\n /* Macros used in the machine description to test the flags.  */\n \n /* Make int's 32 bits.  */\n-#define TARGET_INT32 (target_flags & 8)\n+#define TARGET_INT32 (target_flags & MASK_INT32)\n \n /* Dump recorded insn lengths into the output file.  This helps debug the\n    md file.  */\n-#define TARGET_ADDRESSES (target_flags & 64)\n+#define TARGET_ADDRESSES (target_flags & MASK_ADDRESSES)\n \n /* Pass the first few arguments in registers.  */\n-#define TARGET_QUICKCALL (target_flags & 128)\n+#define TARGET_QUICKCALL (target_flags & MASK_QUICKCALL)\n \n /* Pretend byte accesses are slow.  */\n-#define TARGET_SLOWBYTE (target_flags & 256)\n+#define TARGET_SLOWBYTE (target_flags & MASK_SLOWBYTE)\n \n /* Dump each assembler insn's rtl into the output file.\n    This is for debugging the compiler only.  */\n-#define TARGET_RTL_DUMP\t(target_flags & 2048)\n+#define TARGET_RTL_DUMP\t(target_flags & MASK_RTL_DUMP)\n \n /* Select between the H8/300 and H8/300H CPUs.  */\n #define TARGET_H8300\t(! TARGET_H8300H && ! TARGET_H8300S)\n-#define TARGET_H8300H\t(target_flags & 4096)\n-#define TARGET_H8300S\t(target_flags & 1)\n+#define TARGET_H8300H\t(target_flags & MASK_H8300H)\n+#define TARGET_H8300S\t(target_flags & MASK_H8300S)\n \n /* mac register and relevant instructions are available.  */\n-#define TARGET_MAC    (target_flags & 2)\n+#define TARGET_MAC    (target_flags & MASK_MAC)\n \n /* Align all values on the H8/300H the same way as the H8/300.  Specifically,\n    32 bit and larger values are aligned on 16 bit boundaries.\n    This is all the hardware requires, but the default is 32 bits for the 300H.\n    ??? Now watch someone add hardware floating point requiring 32 bit\n    alignment.  */\n-#define TARGET_ALIGN_300 (target_flags & 8192)\n+#define TARGET_ALIGN_300 (target_flags & MASK_ALIGN_300)\n \n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n    each pair being { \"NAME\", VALUE }\n    where VALUE is the bits to set or minus the bits to clear.\n    An empty string NAME is used to identify the default VALUE.  */\n \n-#define TARGET_SWITCHES  \\\n-  { {\"s\",\t\t1,     N_(\"Generate H8S code\")},\t\t\\\n-    {\"no-s\",\t\t-1,    N_(\"Do not generate H8S code\")},\t\\\n-    {\"s2600\",\t\t2,     N_(\"Generate H8S/2600 code\")},           \\\n-    {\"no-s2600\",\t-2,    N_(\"Do not generate H8S/2600 code\")},    \\\n-    {\"int32\",\t\t8,     N_(\"Make integers 32 bits wide\")},\t\\\n-    {\"addresses\",\t64,    NULL},\t\t\t\t\t\\\n-    {\"quickcall\",\t128,\t\t\t\t\t\t\\\n-     N_(\"Use registers for argument passing\")},\t\t\t\\\n-    {\"no-quickcall\",\t-128,\t\t\t\t\t\t\\\n-     N_(\"Do not use registers for argument passing\")},\t\t\t\\\n-    {\"slowbyte\",\t256,\t\t\t\t\t\t\\\n-     N_(\"Consider access to byte sized memory slow\")},\t\t\t\\\n-    {\"relax\",\t\t1024,  N_(\"Enable linker relaxing\")},\t\t\\\n-    {\"rtl-dump\",\t2048,  NULL},\t\t\t\t\t\\\n-    {\"h\",\t\t4096,  N_(\"Generate H8/300H code\")},\t\t\\\n-    {\"no-h\",\t\t-4096, N_(\"Do not generate H8/300H code\")},\t\\\n-    {\"align-300\",\t8192,  N_(\"Use H8/300 alignment rules\")},\t\\\n-    { \"\", TARGET_DEFAULT, NULL}}\n+#define TARGET_SWITCHES\t\t\t\t\t\t\t    \\\n+{ {\"s\",\t\t\t MASK_H8300S, N_(\"Generate H8S code\")},\t\t    \\\n+  {\"no-s\",\t\t-MASK_H8300S, N_(\"Do not generate H8S code\")},\t    \\\n+  {\"s2600\",\t\t MASK_MAC, N_(\"Generate H8S/2600 code\")},\t    \\\n+  {\"no-s2600\",\t\t-MASK_MAC, N_(\"Do not generate H8S/2600 code\")},    \\\n+  {\"int32\",\t\t MASK_INT32, N_(\"Make integers 32 bits wide\")},\t    \\\n+  {\"addresses\",\t\t MASK_ADDRESSES, NULL},\t\t\t\t    \\\n+  {\"quickcall\",\t\t MASK_QUICKCALL,\t\t\t\t    \\\n+   N_(\"Use registers for argument passing\")},\t\t\t\t    \\\n+  {\"no-quickcall\",\t-MASK_QUICKCALL,\t\t\t\t    \\\n+   N_(\"Do not use registers for argument passing\")},\t\t\t    \\\n+  {\"slowbyte\",\t\t MASK_SLOWBYTE,\t\t\t\t\t    \\\n+   N_(\"Consider access to byte sized memory slow\")},\t\t\t    \\\n+  {\"relax\",\t\t MASK_RELAX, N_(\"Enable linker relaxing\")},\t    \\\n+  {\"rtl-dump\",\t\t MASK_RTL_DUMP, NULL},\t\t\t\t    \\\n+  {\"h\",\t\t\t MASK_H8300H, N_(\"Generate H8/300H code\")},\t    \\\n+  {\"no-h\",\t\t-MASK_H8300H, N_(\"Do not generate H8/300H code\")},  \\\n+  {\"align-300\",\t\t MASK_ALIGN_300, N_(\"Use H8/300 alignment rules\")}, \\\n+  { \"\",\t\t\t TARGET_DEFAULT, NULL}}\n \n #ifdef IN_LIBGCC2\n #undef TARGET_H8300H"}]}