{"sha": "076a5ce626f254ae311ebc2db8e8d304194d23dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc2YTVjZTYyNmYyNTRhZTMxMWViYzJkYjhlOGQzMDQxOTRkMjNkZA==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2007-10-18T13:53:35Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2007-10-18T13:53:35Z"}, "message": "mips.c (mips_dwarf_register_span): New.\n\n\t* config/mips/mips.c (mips_dwarf_register_span): New.\n\t(TARGET_DWARF_REGISTER_SPAN): Define.\n\nFrom-SVN: r129438", "tree": {"sha": "d7c993e00bc261d753b697c6ecccbfe4204ba21c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7c993e00bc261d753b697c6ecccbfe4204ba21c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/076a5ce626f254ae311ebc2db8e8d304194d23dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/076a5ce626f254ae311ebc2db8e8d304194d23dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/076a5ce626f254ae311ebc2db8e8d304194d23dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/076a5ce626f254ae311ebc2db8e8d304194d23dd/comments", "author": null, "committer": null, "parents": [{"sha": "a944c79a88afb91706e4b29db4224981fe0c91eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a944c79a88afb91706e4b29db4224981fe0c91eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a944c79a88afb91706e4b29db4224981fe0c91eb"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "c8b1e2f146ec08b19a8d300f29015ca9124f19a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076a5ce626f254ae311ebc2db8e8d304194d23dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076a5ce626f254ae311ebc2db8e8d304194d23dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=076a5ce626f254ae311ebc2db8e8d304194d23dd", "patch": "@@ -1,3 +1,8 @@\n+2007-10-18  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* config/mips/mips.c (mips_dwarf_register_span): New.\n+\t(TARGET_DWARF_REGISTER_SPAN): Define.\n+\n 2007-10-18  Chen Liqin  <liqin@sunnorth.com.cn>\n \n         * config.gcc : update score-*-elf(extra_objs)."}, {"sha": "f9d559c5c510ae1d13caa78a6ee8abf2dcb97db9", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076a5ce626f254ae311ebc2db8e8d304194d23dd/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076a5ce626f254ae311ebc2db8e8d304194d23dd/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=076a5ce626f254ae311ebc2db8e8d304194d23dd", "patch": "@@ -432,6 +432,7 @@ static void mips_set_current_function (tree);\n static int mips_mode_rep_extended (enum machine_mode, enum machine_mode);\n static bool mips_offset_within_alignment_p (rtx, HOST_WIDE_INT);\n static void mips_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n+static rtx mips_dwarf_register_span (rtx);\n \n /* Structure to be filled in by compute_frame_size with register\n    save masks, and offsets for the current function.  */\n@@ -1386,6 +1387,9 @@ static const unsigned char mips16e_save_restore_regs[] = {\n #define TARGET_ASM_OUTPUT_DWARF_DTPREL mips_output_dwarf_dtprel\n #endif\n \n+#undef TARGET_DWARF_REGISTER_SPAN\n+#define TARGET_DWARF_REGISTER_SPAN mips_dwarf_register_span\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \n@@ -12866,5 +12870,31 @@ mips_output_dwarf_dtprel (FILE *file, int size, rtx x)\n   output_addr_const (file, x);\n   fputs (\"+0x8000\", file);\n }\n+\n+/* Implement TARGET_DWARF_REGISTER_SPAN.  */\n+\n+static rtx\n+mips_dwarf_register_span (rtx reg)\n+{\n+  rtx high, low;\n+  enum machine_mode mode;\n+\n+  /* By default, GCC maps increasing register numbers to increasing\n+     memory locations, but paired FPRs are always little-endian,\n+     regardless of the prevailing endianness.  */\n+  mode = GET_MODE (reg);\n+  if (FP_REG_P (REGNO (reg))\n+      && TARGET_BIG_ENDIAN\n+      && MAX_FPRS_PER_FMT > 1\n+      && GET_MODE_SIZE (mode) > UNITS_PER_FPREG)\n+    {\n+      gcc_assert (GET_MODE_SIZE (mode) == UNITS_PER_HWFPVALUE);\n+      high = mips_subword (reg, true);\n+      low = mips_subword (reg, false);\n+      return gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, high, low));\n+    }\n+\n+  return NULL_RTX;\n+}\n \f\n #include \"gt-mips.h\""}]}