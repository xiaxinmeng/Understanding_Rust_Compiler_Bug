{"sha": "94369251651270268df0a79ea5917265617b7fb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQzNjkyNTE2NTEyNzAyNjhkZjBhNzllYTU5MTcyNjU2MTdiN2ZiNA==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2011-02-28T18:23:25Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-02-28T18:23:25Z"}, "message": "re PR debug/28047 (DWARF output_file_names should really understand DOS pathnames)\n\n2011-02-28  Kai Tietz  <kai.tietz@onevision.com>\n\n\tPR debug/28047\n\t* dwarf2out.c (file_table_eq): Use filename_cmp instead of strcmp.\n\t(lookup_filename): Likewise.\n\t* final.c (remap_debug_filename): Use filename_ncmp instead of\n\tstrncmp.\n\n2011-02-28  Kai Tietz  <kai.tietz@onevision.com>\n\n\t* filename_cmp.c (filename_ncmp): New function.\n\t* functions.texi: Regenerated.\n\n2011-02-28  Kai Tietz  <kai.tietz@onevision.com>\n\n\t* filenames.h (filename_ncmp): New prototype.\n\nFrom-SVN: r170570", "tree": {"sha": "07ad443dd995197f3280e34b7b9dce263c7e22f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07ad443dd995197f3280e34b7b9dce263c7e22f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94369251651270268df0a79ea5917265617b7fb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94369251651270268df0a79ea5917265617b7fb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94369251651270268df0a79ea5917265617b7fb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94369251651270268df0a79ea5917265617b7fb4/comments", "author": null, "committer": null, "parents": [{"sha": "80a832cd25fa03a93768f3d2bc05d23a06a87e26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80a832cd25fa03a93768f3d2bc05d23a06a87e26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80a832cd25fa03a93768f3d2bc05d23a06a87e26"}], "stats": {"total": 93, "additions": 90, "deletions": 3}, "files": [{"sha": "b50ed6f2ab301ac87754fd2f990bad15bcd0534c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94369251651270268df0a79ea5917265617b7fb4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94369251651270268df0a79ea5917265617b7fb4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94369251651270268df0a79ea5917265617b7fb4", "patch": "@@ -1,3 +1,11 @@\n+2011-02-28  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\tPR debug/28047\n+\t* dwarf2out.c (file_table_eq): Use filename_cmp instead of strcmp.\n+\t(lookup_filename): Likewise.\n+\t* final.c (remap_debug_filename): Use filename_ncmp instead of\n+\tstrncmp.\n+\n 2011-02-28  Bernd Schmidt  <bernds@codesourcery.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "1450e806556c0e65ad5926bf2ca0ae1e886c2b20", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94369251651270268df0a79ea5917265617b7fb4/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94369251651270268df0a79ea5917265617b7fb4/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=94369251651270268df0a79ea5917265617b7fb4", "patch": "@@ -21560,7 +21560,7 @@ file_table_eq (const void *p1_p, const void *p2_p)\n   const struct dwarf_file_data *const p1 =\n     (const struct dwarf_file_data *) p1_p;\n   const char *const p2 = (const char *) p2_p;\n-  return strcmp (p1->filename, p2) == 0;\n+  return filename_cmp (p1->filename, p2) == 0;\n }\n \n static hashval_t\n@@ -21591,7 +21591,7 @@ lookup_filename (const char *file_name)\n      call matches this file name.  If so, return the index.  */\n   if (file_table_last_lookup\n       && (file_name == file_table_last_lookup->filename\n-\t  || strcmp (file_table_last_lookup->filename, file_name) == 0))\n+\t  || filename_cmp (file_table_last_lookup->filename, file_name) == 0))\n     return file_table_last_lookup;\n \n   /* Didn't match the previous lookup, search the table.  */"}, {"sha": "1e1424feabc28fbb2965e660efde3fed9c7320d8", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94369251651270268df0a79ea5917265617b7fb4/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94369251651270268df0a79ea5917265617b7fb4/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=94369251651270268df0a79ea5917265617b7fb4", "patch": "@@ -1492,7 +1492,7 @@ remap_debug_filename (const char *filename)\n   size_t name_len;\n \n   for (map = debug_prefix_maps; map; map = map->next)\n-    if (strncmp (filename, map->old_prefix, map->old_len) == 0)\n+    if (filename_ncmp (filename, map->old_prefix, map->old_len) == 0)\n       break;\n   if (!map)\n     return filename;"}, {"sha": "c4ec00efe6d6edb1c6867e8c9466d778009a0f35", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94369251651270268df0a79ea5917265617b7fb4/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94369251651270268df0a79ea5917265617b7fb4/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=94369251651270268df0a79ea5917265617b7fb4", "patch": "@@ -1,3 +1,7 @@\n+2011-02-28  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* filenames.h (filename_ncmp): New prototype.\n+\n 2011-02-23  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* dwarf2.h (_ELF_DWARF2_H): Renamed to"}, {"sha": "d4955df661cf4f965a4e22806eeb350acccc4a79", "filename": "include/filenames.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94369251651270268df0a79ea5917265617b7fb4/include%2Ffilenames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94369251651270268df0a79ea5917265617b7fb4/include%2Ffilenames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Ffilenames.h?ref=94369251651270268df0a79ea5917265617b7fb4", "patch": "@@ -73,6 +73,9 @@ extern \"C\" {\n extern int filename_cmp (const char *s1, const char *s2);\n #define FILENAME_CMP(s1, s2)\tfilename_cmp(s1, s2)\n \n+extern int filename_ncmp (const char *s1, const char *s2,\n+\t\t\t  size_t n);\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "dc926382a8eaef38a8cd0e79c03d7733fdf189bc", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94369251651270268df0a79ea5917265617b7fb4/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94369251651270268df0a79ea5917265617b7fb4/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=94369251651270268df0a79ea5917265617b7fb4", "patch": "@@ -1,3 +1,8 @@\n+2011-02-28  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* filename_cmp.c (filename_ncmp): New function.\n+\t* functions.texi: Regenerated.\n+\n 2011-02-03  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* splay-tree.c: Escape wrapping newlines in texinfo markup"}, {"sha": "0eed12086bfe41d00d9a593b3a60b7008b3d758f", "filename": "libiberty/filename_cmp.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94369251651270268df0a79ea5917265617b7fb4/libiberty%2Ffilename_cmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94369251651270268df0a79ea5917265617b7fb4/libiberty%2Ffilename_cmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffilename_cmp.c?ref=94369251651270268df0a79ea5917265617b7fb4", "patch": "@@ -76,3 +76,52 @@ filename_cmp (const char *s1, const char *s2)\n #endif\n }\n \n+/*\n+\n+@deftypefn Extension int filename_ncmp (const char *@var{s1}, const char *@var{s2}, size_t @var{n})\n+\n+Return zero if the two file names @var{s1} and @var{s2} are equivalent\n+in range @var{n}.\n+If not equivalent, the returned value is similar to what @code{strncmp}\n+would return.  In other words, it returns a negative value if @var{s1}\n+is less than @var{s2}, or a positive value if @var{s2} is greater than\n+@var{s2}.\n+\n+This function does not normalize file names.  As a result, this function\n+will treat filenames that are spelled differently as different even in\n+the case when the two filenames point to the same underlying file.\n+However, it does handle the fact that on DOS-like file systems, forward\n+and backward slashes are equal.\n+\n+@end deftypefn\n+\n+*/\n+\n+int\n+filename_ncmp (const char *s1, const char *s2, size_t n)\n+{\n+#ifndef HAVE_DOS_BASED_FILE_SYSTEM\n+  return strncmp(s1, s2, n);\n+#else\n+  if (!n)\n+    return 0;\n+  for (; n > 0; --n)\n+  {\n+      int c1 = TOLOWER (*s1);\n+      int c2 = TOLOWER (*s2);\n+\n+      /* On DOS-based file systems, the '/' and the '\\' are equivalent.  */\n+      if (c1 == '/')\n+        c1 = '\\\\';\n+      if (c2 == '/')\n+        c2 = '\\\\';\n+\n+      if (c1 == '\\0' || c1 != c2)\n+        return (c1 - c2);\n+\n+      s1++;\n+      s2++;\n+  }\n+  return 0;\n+#endif\n+}"}, {"sha": "c9df186be0f87df701ea02893e1f06d3801aa3d2", "filename": "libiberty/functions.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94369251651270268df0a79ea5917265617b7fb4/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94369251651270268df0a79ea5917265617b7fb4/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=94369251651270268df0a79ea5917265617b7fb4", "patch": "@@ -296,6 +296,24 @@ and backward slashes are equal.\n \n @end deftypefn\n \n+@c filename_cmp.c:81\n+@deftypefn Extension int filename_ncmp (const char *@var{s1}, const char *@var{s2}, size_t @var{n})\n+\n+Return zero if the two file names @var{s1} and @var{s2} are equivalent\n+in range @var{n}.\n+If not equivalent, the returned value is similar to what @code{strncmp}\n+would return.  In other words, it returns a negative value if @var{s1}\n+is less than @var{s2}, or a positive value if @var{s2} is greater than\n+@var{s2}.\n+\n+This function does not normalize file names.  As a result, this function\n+will treat filenames that are spelled differently as different even in\n+the case when the two filenames point to the same underlying file.\n+However, it does handle the fact that on DOS-like file systems, forward\n+and backward slashes are equal.\n+\n+@end deftypefn\n+\n @c fnmatch.txh:1\n @deftypefn Replacement int fnmatch (const char *@var{pattern}, @\n   const char *@var{string}, int @var{flags})"}]}