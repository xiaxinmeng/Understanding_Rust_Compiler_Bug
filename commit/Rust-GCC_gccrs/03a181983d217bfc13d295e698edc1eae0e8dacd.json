{"sha": "03a181983d217bfc13d295e698edc1eae0e8dacd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNhMTgxOTgzZDIxN2JmYzEzZDI5NWU2OThlZGMxZWFlMGU4ZGFjZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-03-12T20:45:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-03-12T20:45:39Z"}, "message": "re PR target/39431 (ICE in spill_failure, at reload1.c:2093)\n\n\tPR target/39431\n\t* config/i386/predicates.md (cmpxchg8b_pic_memory_operand): New\n\tpredicate.\n\t* config/i386/sync.md (sync_compare_and_swap<mode>,\n\tsync_compare_and_swap_cc<mode>): For DImode with -m32 -fpic check\n\tif operands[1] is cmpxchg8b_pic_memory_operand, if not force address\n\tinto a register.\n\t(sync_double_compare_and_swapdi_pic,\n\tsync_double_compare_and_swap_ccdi_pic): Require operand 1 to be\n\tcmpxchg8b_pic_memory_operand instead of just memory_operand.\n\n\t* gcc.target/i386/pr39431.c: New test.\n\nFrom-SVN: r144825", "tree": {"sha": "beadbfad946cf940235a072c010af8519bd6c4cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beadbfad946cf940235a072c010af8519bd6c4cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03a181983d217bfc13d295e698edc1eae0e8dacd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a181983d217bfc13d295e698edc1eae0e8dacd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03a181983d217bfc13d295e698edc1eae0e8dacd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a181983d217bfc13d295e698edc1eae0e8dacd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "122c59c73bbf3ef40c786f4faab80955a677553d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/122c59c73bbf3ef40c786f4faab80955a677553d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/122c59c73bbf3ef40c786f4faab80955a677553d"}], "stats": {"total": 89, "additions": 82, "deletions": 7}, "files": [{"sha": "2282b896d6645783dace0c6f3a34a05f6720c741", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a181983d217bfc13d295e698edc1eae0e8dacd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a181983d217bfc13d295e698edc1eae0e8dacd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03a181983d217bfc13d295e698edc1eae0e8dacd", "patch": "@@ -1,3 +1,16 @@\n+2008-03-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/39431\n+\t* config/i386/predicates.md (cmpxchg8b_pic_memory_operand): New\n+\tpredicate.\n+\t* config/i386/sync.md (sync_compare_and_swap<mode>,\n+\tsync_compare_and_swap_cc<mode>): For DImode with -m32 -fpic check\n+\tif operands[1] is cmpxchg8b_pic_memory_operand, if not force address\n+\tinto a register.\n+\t(sync_double_compare_and_swapdi_pic,\n+\tsync_double_compare_and_swap_ccdi_pic): Require operand 1 to be\n+\tcmpxchg8b_pic_memory_operand instead of just memory_operand.\n+\n 2009-03-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/39445"}, {"sha": "f1c7103333388c4f3364caa98533bff99b16dfb4", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a181983d217bfc13d295e698edc1eae0e8dacd/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a181983d217bfc13d295e698edc1eae0e8dacd/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=03a181983d217bfc13d295e698edc1eae0e8dacd", "patch": "@@ -887,6 +887,34 @@\n   return parts.disp != NULL_RTX;\n })\n \n+;; Returns 1 if OP is memory operand which will need zero or\n+;; one register at most, not counting stack pointer or frame pointer.\n+(define_predicate \"cmpxchg8b_pic_memory_operand\"\n+  (match_operand 0 \"memory_operand\")\n+{\n+  struct ix86_address parts;\n+  int ok;\n+\n+  ok = ix86_decompose_address (XEXP (op, 0), &parts);\n+  gcc_assert (ok);\n+  if (parts.base == NULL_RTX\n+      || parts.base == arg_pointer_rtx\n+      || parts.base == frame_pointer_rtx\n+      || parts.base == hard_frame_pointer_rtx\n+      || parts.base == stack_pointer_rtx)\n+    return 1;\n+\n+  if (parts.index == NULL_RTX\n+      || parts.index == arg_pointer_rtx\n+      || parts.index == frame_pointer_rtx\n+      || parts.index == hard_frame_pointer_rtx\n+      || parts.index == stack_pointer_rtx)\n+    return 1;\n+\n+  return 0;\n+})\n+\n+\n ;; Returns 1 if OP is memory operand that cannot be represented\n ;; by the modRM array.\n (define_predicate \"long_memory_operand\""}, {"sha": "05aad00ba94b4128ed85c0c2d75b1c2d126e11e1", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a181983d217bfc13d295e698edc1eae0e8dacd/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a181983d217bfc13d295e698edc1eae0e8dacd/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=03a181983d217bfc13d295e698edc1eae0e8dacd", "patch": "@@ -1,5 +1,5 @@\n ;; GCC machine description for i386 synchronization instructions.\n-;; Copyright (C) 2005, 2006, 2007, 2008\n+;; Copyright (C) 2005, 2006, 2007, 2008, 2009\n ;; Free Software Foundation, Inc.\n ;;\n ;; This file is part of GCC.\n@@ -82,8 +82,15 @@\n       low = force_reg (hmode, low);\n       high = force_reg (hmode, high);\n       if (<MODE>mode == DImode)\n-\temit_insn (gen_sync_double_compare_and_swapdi\n-\t\t   (operands[0], operands[1], operands[2], low, high));\n+\t{\n+\t  if (flag_pic && !cmpxchg8b_pic_memory_operand (operands[1], DImode))\n+\t    operands[1] = replace_equiv_address (operands[1],\n+\t\t\t\t\t\t force_reg (Pmode,\n+\t\t\t\t\t\t\t    XEXP (operands[1],\n+\t\t\t\t\t\t\t\t  0)));\n+\t  emit_insn (gen_sync_double_compare_and_swapdi\n+\t\t     (operands[0], operands[1], operands[2], low, high));\n+\t}\n       else if (<MODE>mode == TImode)\n \temit_insn (gen_sync_double_compare_and_swapti\n \t\t   (operands[0], operands[1], operands[2], low, high));\n@@ -131,7 +138,7 @@\n ;; are just esi and edi.\n (define_insn \"*sync_double_compare_and_swapdi_pic\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=A\")\n-\t(match_operand:DI 1 \"memory_operand\" \"+m\"))\n+\t(match_operand:DI 1 \"cmpxchg8b_pic_memory_operand\" \"+m\"))\n    (set (match_dup 1)\n \t(unspec_volatile:DI\n \t  [(match_dup 1)\n@@ -173,8 +180,15 @@\n       low = force_reg (hmode, low);\n       high = force_reg (hmode, high);\n       if (<MODE>mode == DImode)\n-\temit_insn (gen_sync_double_compare_and_swap_ccdi\n-\t\t   (operands[0], operands[1], operands[2], low, high));\n+\t{\n+\t  if (flag_pic && !cmpxchg8b_pic_memory_operand (operands[1], DImode))\n+\t    operands[1] = replace_equiv_address (operands[1],\n+\t\t\t\t\t\t force_reg (Pmode,\n+\t\t\t\t\t\t\t    XEXP (operands[1],\n+\t\t\t\t\t\t\t\t  0)));\n+\t  emit_insn (gen_sync_double_compare_and_swap_ccdi\n+\t\t     (operands[0], operands[1], operands[2], low, high));\n+\t}\n       else if (<MODE>mode == TImode)\n \temit_insn (gen_sync_double_compare_and_swap_ccti\n \t\t   (operands[0], operands[1], operands[2], low, high));\n@@ -224,7 +238,7 @@\n ;; operand 3.\n (define_insn \"*sync_double_compare_and_swap_ccdi_pic\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=A\")\n-\t(match_operand:DI 1 \"memory_operand\" \"+m\"))\n+\t(match_operand:DI 1 \"cmpxchg8b_pic_memory_operand\" \"+m\"))\n    (set (match_dup 1)\n \t(unspec_volatile:DI\n \t  [(match_dup 1)"}, {"sha": "1940fe52aea2cdcf8eea88cb7ab8f1b1f99f7503", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a181983d217bfc13d295e698edc1eae0e8dacd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a181983d217bfc13d295e698edc1eae0e8dacd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03a181983d217bfc13d295e698edc1eae0e8dacd", "patch": "@@ -1,3 +1,8 @@\n+2008-03-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/39431\n+\t* gcc.target/i386/pr39431.c: New test.\n+\n 2009-03-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/39445"}, {"sha": "756bdb9ebb81025e3b93dd13d9c87dc030ec3b90", "filename": "gcc/testsuite/gcc.target/i386/pr39431.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a181983d217bfc13d295e698edc1eae0e8dacd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39431.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a181983d217bfc13d295e698edc1eae0e8dacd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39431.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39431.c?ref=03a181983d217bfc13d295e698edc1eae0e8dacd", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/39431 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -march=i686 -fpic\" { target { ilp32 && fpic } } } */\n+\n+extern void bar (char *, int);\n+\n+int\n+foo (long long *p, long long oldv, long long *q, int n)\n+{\n+  char buf[n];\n+  bar (buf, n);\n+  p[256 + n] = __sync_val_compare_and_swap (p + n, oldv, oldv + 6);\n+  return __sync_bool_compare_and_swap (q + n, oldv, oldv + 8);\n+}"}]}