{"sha": "da7db2ced2f26dc763e69176e850e8175945bc46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE3ZGIyY2VkMmYyNmRjNzYzZTY5MTc2ZTg1MGU4MTc1OTQ1YmM0Ng==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-08-12T13:08:23Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-08-12T13:08:23Z"}, "message": "tree-vrp.c (simplify_min_or_max_using_ranges): New.\n\n\t* tree-vrp.c (simplify_min_or_max_using_ranges): New.\n\t(simplify_stmt_using_ranges): Simplify MIN and MAX exprs.\n\n\ttestsuite/\n\t* gcc.dg/vrp-min-max-1.c: New.\n\t* gcc.dg/vrp-min-max-2.c: New.\n\nFrom-SVN: r226809", "tree": {"sha": "cc3b5adfb47fbb84706ba2a55f6f8b493af361a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc3b5adfb47fbb84706ba2a55f6f8b493af361a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da7db2ced2f26dc763e69176e850e8175945bc46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7db2ced2f26dc763e69176e850e8175945bc46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da7db2ced2f26dc763e69176e850e8175945bc46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7db2ced2f26dc763e69176e850e8175945bc46/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "191a6b94e688171a6e62f0ee3443011f0d1d1855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191a6b94e688171a6e62f0ee3443011f0d1d1855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/191a6b94e688171a6e62f0ee3443011f0d1d1855"}], "stats": {"total": 110, "additions": 109, "deletions": 1}, "files": [{"sha": "3869f671cd3fbfe40e884d85c1c4d070af796e95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7db2ced2f26dc763e69176e850e8175945bc46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7db2ced2f26dc763e69176e850e8175945bc46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da7db2ced2f26dc763e69176e850e8175945bc46", "patch": "@@ -1,3 +1,8 @@\n+2015-08-12  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* tree-vrp.c (simplify_min_or_max_using_ranges): New.\n+\t(simplify_stmt_using_ranges): Simplify MIN and MAX exprs.\n+\n 2015-08-12  Simon Dardis  <simon.dardis@imgtec.com>\n \n \t* config/mips/mips.c (mips_store_data_bypass_p): Bring code into"}, {"sha": "b712e5f0e8bc2ebaa9161e457b43a61816c1891e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7db2ced2f26dc763e69176e850e8175945bc46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7db2ced2f26dc763e69176e850e8175945bc46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da7db2ced2f26dc763e69176e850e8175945bc46", "patch": "@@ -1,3 +1,8 @@\n+2015-08-12  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* gcc.dg/vrp-min-max-1.c: New.\n+\t* gcc.dg/vrp-min-max-2.c: New.\n+\n 2015-08-12  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/ssa-fre-43.c: Adjust."}, {"sha": "270f2bbb4364b548db3e074156e9ab9dcf8016f9", "filename": "gcc/testsuite/gcc.dg/vrp-min-max-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7db2ced2f26dc763e69176e850e8175945bc46/gcc%2Ftestsuite%2Fgcc.dg%2Fvrp-min-max-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7db2ced2f26dc763e69176e850e8175945bc46/gcc%2Ftestsuite%2Fgcc.dg%2Fvrp-min-max-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvrp-min-max-1.c?ref=da7db2ced2f26dc763e69176e850e8175945bc46", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-mergephi2\" } */\n+\n+int bar (void);\n+\n+int foo1 (int x, int y)\n+{\n+  if (y < 10) return bar ();\n+  if (x > 9) return bar ();\n+\n+  return x < y ? x : y;\n+}\n+\n+int foo2 (int x, int y)\n+{\n+  if (y < 10) return bar ();\n+  if (x > 9) return bar ();\n+\n+  return x > y ? x : y;\n+}\n+\n+/* We expect to optimiz min/max in VRP*/\n+\n+/* { dg-final { scan-tree-dump-times \"MIN_EXPR\" 1 \"mergephi2\" } } */\n+/* { dg-final { scan-tree-dump-times \"MAX_EXPR\" 1 \"mergephi2\" } } */\n+/* { dg-final { scan-tree-dump-not \"MIN_EXPR\" \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-not \"MAX_EXPR\" \"vrp1\" } } */"}, {"sha": "a3ccc6644bfb74762a11c46b24a599ac55fac4cb", "filename": "gcc/testsuite/gcc.dg/vrp-min-max-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7db2ced2f26dc763e69176e850e8175945bc46/gcc%2Ftestsuite%2Fgcc.dg%2Fvrp-min-max-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7db2ced2f26dc763e69176e850e8175945bc46/gcc%2Ftestsuite%2Fgcc.dg%2Fvrp-min-max-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvrp-min-max-2.c?ref=da7db2ced2f26dc763e69176e850e8175945bc46", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp2\" } */\n+\n+int Foo (int X)\n+{\n+  if (X < 0)\n+    X = 0;\n+  if (X > 191)\n+    X = 191;\n+\n+  return X << 23;\n+}\n+\n+/* We expect this min/max pair to survive.  */\n+\n+/* { dg-final { scan-tree-dump-times \"MIN_EXPR\" 1 \"vrp2\" } } */\n+/* { dg-final { scan-tree-dump-times \"MAX_EXPR\" 1 \"vrp2\" } } */"}, {"sha": "0439272b97d59b56cade5e6647e5bc38832c3178", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7db2ced2f26dc763e69176e850e8175945bc46/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7db2ced2f26dc763e69176e850e8175945bc46/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=da7db2ced2f26dc763e69176e850e8175945bc46", "patch": "@@ -7466,7 +7466,8 @@ compare_names (enum tree_code comp, tree n1, tree n2,\n   return NULL_TREE;\n }\n \n-/* Helper function for vrp_evaluate_conditional_warnv.  */\n+/* Helper function for vrp_evaluate_conditional_warnv & other\n+   optimizers.  */\n \n static tree\n vrp_evaluate_conditional_warnv_with_ops_using_ranges (enum tree_code code,\n@@ -9145,6 +9146,54 @@ simplify_div_or_mod_using_ranges (gimple stmt)\n   return false;\n }\n \n+/* Simplify a min or max if the ranges of the two operands are\n+   disjoint.   Return true if we do simplify.  */\n+\n+static bool\n+simplify_min_or_max_using_ranges (gimple stmt)\n+{\n+  tree op0 = gimple_assign_rhs1 (stmt);\n+  tree op1 = gimple_assign_rhs2 (stmt);\n+  bool sop = false;\n+  tree val;\n+\n+  val = (vrp_evaluate_conditional_warnv_with_ops_using_ranges\n+\t (LE_EXPR, op0, op1, &sop));\n+  if (!val)\n+    {\n+      sop = false;\n+      val = (vrp_evaluate_conditional_warnv_with_ops_using_ranges\n+\t     (LT_EXPR, op0, op1, &sop));\n+    }\n+\n+  if (val)\n+    {\n+      if (sop && issue_strict_overflow_warning (WARN_STRICT_OVERFLOW_MISC))\n+\t{\n+\t  location_t location;\n+\n+\t  if (!gimple_has_location (stmt))\n+\t    location = input_location;\n+\t  else\n+\t    location = gimple_location (stmt);\n+\t  warning_at (location, OPT_Wstrict_overflow,\n+\t\t      \"assuming signed overflow does not occur when \"\n+\t\t      \"simplifying %<min/max (X,Y)%> to %<X%> or %<Y%>\");\n+\t}\n+\n+      /* VAL == TRUE -> OP0 < or <= op1\n+\t VAL == FALSE -> OP0 > or >= op1.  */\n+      tree res = ((gimple_assign_rhs_code (stmt) == MAX_EXPR)\n+\t\t  == integer_zerop (val)) ? op0 : op1;\n+      gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n+      gimple_assign_set_rhs_from_tree (&gsi, res);\n+      update_stmt (stmt);\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n /* If the operand to an ABS_EXPR is >= 0, then eliminate the\n    ABS_EXPR.  If the operand is <= 0, then simplify the\n    ABS_EXPR into a NEGATE_EXPR.  */\n@@ -9987,6 +10036,11 @@ simplify_stmt_using_ranges (gimple_stmt_iterator *gsi)\n \t    return simplify_float_conversion_using_ranges (gsi, stmt);\n \t  break;\n \n+\tcase MIN_EXPR:\n+\tcase MAX_EXPR:\n+\t  return simplify_min_or_max_using_ranges (stmt);\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}"}]}