{"sha": "254cbf72661b932eb039220fccef9a2546ab8f4e", "node_id": "C_kwDOANBUbNoAKDI1NGNiZjcyNjYxYjkzMmViMDM5MjIwZmNjZWY5YTI1NDZhYjhmNGU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-17T10:10:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-17T10:10:30Z"}, "message": "i386: Fix up V2DI and V1TI inequality comparisons [PR105613]\n\nThe recent r13-458 change to introduce vec_cmpeqv1tiv1ti and\nadd TARGET_SSE2 support to vec_cmpeqv2div2di works nicely for\nequality comparisons, but as the testcase shows doesn't work\nfor inequality comparisons.\nFor EQ if we perform comparison with twice as many half-sized elemenets,\nthe result should be ~0 when both halves are ~0 only (both halves need\nto be equal for the whole to be equal), otherwise 0, so AND is the\ncorrect operation for it.\nBut for NE, the result should be ~0 when either of the halves is ~0\n(if either half is not equal, the whole is not equal) and so the right\noperation for NE is IOR, not AND.\n\n2022-05-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/105613\n\t* config/i386/sse.md (vec_cmpeqv2div2di, vec_cmpeqv1tiv1ti): Use\n\tandv4si3 only for EQ, for NE use iorv4si3 instead.\n\n\t* gcc.c-torture/execute/pr105613.c: New test.", "tree": {"sha": "a2ac77a581832b625452049403485f5b06aea5e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2ac77a581832b625452049403485f5b06aea5e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/254cbf72661b932eb039220fccef9a2546ab8f4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254cbf72661b932eb039220fccef9a2546ab8f4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/254cbf72661b932eb039220fccef9a2546ab8f4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254cbf72661b932eb039220fccef9a2546ab8f4e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f94c38a9237b728b3a3f76c169b5b47f6c45187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f94c38a9237b728b3a3f76c169b5b47f6c45187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f94c38a9237b728b3a3f76c169b5b47f6c45187"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "92890d4957dfb89f9a66a762bb195b9180e298e6", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254cbf72661b932eb039220fccef9a2546ab8f4e/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254cbf72661b932eb039220fccef9a2546ab8f4e/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=254cbf72661b932eb039220fccef9a2546ab8f4e", "patch": "@@ -4407,7 +4407,10 @@\n       emit_insn (gen_sse2_pshufd (tmp1, ops[0], GEN_INT (0xb1)));\n \n       rtx tmp2 = gen_reg_rtx (V4SImode);\n-      emit_insn (gen_andv4si3 (tmp2, tmp1, ops[0]));\n+      if (GET_CODE (operands[1]) == EQ)\n+\temit_insn (gen_andv4si3 (tmp2, tmp1, ops[0]));\n+      else\n+\temit_insn (gen_iorv4si3 (tmp2, tmp1, ops[0]));\n \n       emit_move_insn (operands[0], gen_lowpart (V2DImode, tmp2));\n     }\n@@ -4435,7 +4438,10 @@\n   emit_insn (gen_sse2_pshufd (tmp1, tmp2, GEN_INT (0x4e)));\n \n   rtx tmp3 = gen_reg_rtx (V4SImode);\n-  emit_insn (gen_andv4si3 (tmp3, tmp2, tmp1));\n+  if (GET_CODE (operands[1]) == EQ)\n+    emit_insn (gen_andv4si3 (tmp3, tmp2, tmp1));\n+  else\n+    emit_insn (gen_iorv4si3 (tmp3, tmp2, tmp1));\n \n   emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp3));\n   DONE;"}, {"sha": "6e51e191ec0b1ccf26ef6a04d201710fcba9e892", "filename": "gcc/testsuite/gcc.c-torture/execute/pr105613.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254cbf72661b932eb039220fccef9a2546ab8f4e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr105613.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254cbf72661b932eb039220fccef9a2546ab8f4e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr105613.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr105613.c?ref=254cbf72661b932eb039220fccef9a2546ab8f4e", "patch": "@@ -0,0 +1,26 @@\n+/* PR target/105613 */\n+/* { dg-do run { target int128 } } */\n+\n+typedef unsigned __int128 __attribute__((__vector_size__ (16))) V;\n+\n+void\n+foo (V v, V *r)\n+{\n+  *r = v != 0;\n+}\n+\n+int\n+main ()\n+{\n+  V r;\n+  foo ((V) {5}, &r);\n+  if (r[0] != ~(unsigned __int128) 0)\n+    __builtin_abort ();\n+  foo ((V) {0x500000005ULL}, &r);\n+  if (r[0] != ~(unsigned __int128) 0)\n+    __builtin_abort ();\n+  foo ((V) {0}, &r);\n+  if (r[0] != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}