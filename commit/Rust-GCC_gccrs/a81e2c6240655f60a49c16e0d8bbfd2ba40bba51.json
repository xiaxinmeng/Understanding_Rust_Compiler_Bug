{"sha": "a81e2c6240655f60a49c16e0d8bbfd2ba40bba51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgxZTJjNjI0MDY1NWY2MGE0OWMxNmUwZDhiYmZkMmJhNDBiYmE1MQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2018-11-15T03:44:49Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2018-11-15T03:44:49Z"}, "message": "re PR tree-optimization/84648 (Missed optimization : loop not removed.)\n\n\n\tPR tree-optimization/84648\n\t* tree-ssa-loop-niter.c (adjust_cond_for_loop_until_wrap): New.\n\t(number_of_iterations_cond): Adjust exit cond for loop-until-wrap case\n\tby calling adjust_cond_for_loop_until_wrap.\n\n\tgcc/testsuite\n\t* gcc.dg/tree-ssa/pr84648.c: New test.\n\t* gcc.dg/pr68317.c: Add warning check on overflow.\n\nFrom-SVN: r266171", "tree": {"sha": "e7cce19325fbea4e794b3677a829d5c0e940b7f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7cce19325fbea4e794b3677a829d5c0e940b7f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a81e2c6240655f60a49c16e0d8bbfd2ba40bba51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81e2c6240655f60a49c16e0d8bbfd2ba40bba51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a81e2c6240655f60a49c16e0d8bbfd2ba40bba51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81e2c6240655f60a49c16e0d8bbfd2ba40bba51/comments", "author": null, "committer": null, "parents": [{"sha": "d8fdf280ab8e6f12746f23717cc0cf92871561d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8fdf280ab8e6f12746f23717cc0cf92871561d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8fdf280ab8e6f12746f23717cc0cf92871561d1"}], "stats": {"total": 100, "additions": 89, "deletions": 11}, "files": [{"sha": "aa1d0de9f953e6d5d29132c3f9758a31d861debf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81e2c6240655f60a49c16e0d8bbfd2ba40bba51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81e2c6240655f60a49c16e0d8bbfd2ba40bba51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a81e2c6240655f60a49c16e0d8bbfd2ba40bba51", "patch": "@@ -1,3 +1,10 @@\n+2018-11-15  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\tPR tree-optimization/84648\n+\t* tree-ssa-loop-niter.c (adjust_cond_for_loop_until_wrap): New.\n+\t(number_of_iterations_cond): Adjust exit cond for loop-until-wrap case\n+\tby calling adjust_cond_for_loop_until_wrap.\n+\n 2018-11-15  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR other/56334"}, {"sha": "a5dfd90de4947645d40a4589f86327e1bdec4ec2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81e2c6240655f60a49c16e0d8bbfd2ba40bba51/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81e2c6240655f60a49c16e0d8bbfd2ba40bba51/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a81e2c6240655f60a49c16e0d8bbfd2ba40bba51", "patch": "@@ -1,3 +1,9 @@\n+2018-11-15  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\tPR tree-optimization/84648\n+\t* gcc.dg/tree-ssa/pr84648.c: New test.\n+\t* gcc.dg/pr68317.c: Add warning check on overflow.\n+\n 2018-11-14  Nathan Sidwell  <nathan@acm.org>\n \n \tPR debug/88006"}, {"sha": "9ba6fb075e67c86dd65f30551fc43899e661f36e", "filename": "gcc/testsuite/gcc.dg/pr68317.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81e2c6240655f60a49c16e0d8bbfd2ba40bba51/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68317.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81e2c6240655f60a49c16e0d8bbfd2ba40bba51/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68317.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68317.c?ref=a81e2c6240655f60a49c16e0d8bbfd2ba40bba51", "patch": "@@ -11,5 +11,5 @@ foo ()\n  for (index; index <= 10; index--)\n    /* Result of the following multiply will overflow\n       when converted to signed int.  */\n-   bar ((0xcafe + index) * 0xdead);\n+   bar ((0xcafe + index) * 0xdead);  /* { dg-warning \"iteration \\[0-9\\]+ invokes undefined behavior\" } */\n }"}, {"sha": "6ff5a07cd20bfffa2455aeba070f242774315a2a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr84648.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81e2c6240655f60a49c16e0d8bbfd2ba40bba51/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84648.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81e2c6240655f60a49c16e0d8bbfd2ba40bba51/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84648.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84648.c?ref=a81e2c6240655f60a49c16e0d8bbfd2ba40bba51", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-cddce1-details\" } */\n+\n+int main() {\n+    for (unsigned i = 0; i < (1u << 31); ++i) {\n+    }\n+    return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Found loop 1 to be finite: upper bound found\" 1 \"cddce1\" } } */"}, {"sha": "67a3d6894630c8bde35d3d4b75b267d882e12b18", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 65, "deletions": 10, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81e2c6240655f60a49c16e0d8bbfd2ba40bba51/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81e2c6240655f60a49c16e0d8bbfd2ba40bba51/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=a81e2c6240655f60a49c16e0d8bbfd2ba40bba51", "patch": "@@ -1641,6 +1641,62 @@ dump_affine_iv (FILE *file, affine_iv *iv)\n     }\n }\n \n+/* Given exit condition IV0 CODE IV1 in TYPE, this function adjusts\n+   the condition for loop-until-wrap cases.  For example:\n+     (unsigned){8, -1}_loop < 10        => {0, 1} != 9\n+     10 < (unsigned){0, max - 7}_loop   => {0, 1} != 8\n+   Return true if condition is successfully adjusted.  */\n+\n+static bool\n+adjust_cond_for_loop_until_wrap (tree type, affine_iv *iv0, tree_code *code,\n+\t\t\t\t affine_iv *iv1)\n+{\n+  /* Only support simple cases for the moment.  */\n+  if (TREE_CODE (iv0->base) != INTEGER_CST\n+      || TREE_CODE (iv1->base) != INTEGER_CST)\n+    return false;\n+\n+  tree niter_type = unsigned_type_for (type), high, low;\n+  /* Case: i-- < 10.  */\n+  if (integer_zerop (iv1->step))\n+    {\n+      /* TODO: Should handle case in which abs(step) != 1.  */\n+      if (!integer_minus_onep (iv0->step))\n+\treturn false;\n+      /* Give up on infinite loop.  */\n+      if (*code == LE_EXPR\n+\t  && tree_int_cst_equal (iv1->base, TYPE_MAX_VALUE (type)))\n+\treturn false;\n+      high = fold_build2 (PLUS_EXPR, niter_type,\n+\t\t\t  fold_convert (niter_type, iv0->base),\n+\t\t\t  build_int_cst (niter_type, 1));\n+      low = fold_convert (niter_type, TYPE_MIN_VALUE (type));\n+    }\n+  else if (integer_zerop (iv0->step))\n+    {\n+      /* TODO: Should handle case in which abs(step) != 1.  */\n+      if (!integer_onep (iv1->step))\n+\treturn false;\n+      /* Give up on infinite loop.  */\n+      if (*code == LE_EXPR\n+\t  && tree_int_cst_equal (iv0->base, TYPE_MIN_VALUE (type)))\n+\treturn false;\n+      high = fold_convert (niter_type, TYPE_MAX_VALUE (type));\n+      low = fold_build2 (MINUS_EXPR, niter_type,\n+\t\t\t fold_convert (niter_type, iv1->base),\n+\t\t\t build_int_cst (niter_type, 1));\n+    }\n+  else\n+    gcc_unreachable ();\n+\n+  iv0->base = low;\n+  iv0->step = fold_convert (niter_type, integer_one_node);\n+  iv1->base = high;\n+  iv1->step = build_int_cst (niter_type, 0);\n+  *code = NE_EXPR;\n+  return true;\n+}\n+\n /* Determine the number of iterations according to condition (for staying\n    inside loop) which compares two induction variables using comparison\n    operator CODE.  The induction variable on left side of the comparison\n@@ -1764,16 +1820,6 @@ number_of_iterations_cond (struct loop *loop,\n   if (integer_zerop (iv0->step) && integer_zerop (iv1->step))\n     return false;\n \n-  /* Ignore loops of while (i-- < 10) type.  */\n-  if (code != NE_EXPR)\n-    {\n-      if (iv0->step && tree_int_cst_sign_bit (iv0->step))\n-\treturn false;\n-\n-      if (!integer_zerop (iv1->step) && !tree_int_cst_sign_bit (iv1->step))\n-\treturn false;\n-    }\n-\n   /* If the loop exits immediately, there is nothing to do.  */\n   tree tem = fold_binary (code, boolean_type_node, iv0->base, iv1->base);\n   if (tem && integer_zerop (tem))\n@@ -1783,6 +1829,15 @@ number_of_iterations_cond (struct loop *loop,\n       return true;\n     }\n \n+  /* Handle special case loops: while (i-- < 10) and while (10 < i++) by\n+     adjusting iv0, iv1 and code.  */\n+  if (code != NE_EXPR\n+      && (tree_int_cst_sign_bit (iv0->step)\n+\t  || (!integer_zerop (iv1->step)\n+\t      && !tree_int_cst_sign_bit (iv1->step)))\n+      && !adjust_cond_for_loop_until_wrap (type, iv0, &code, iv1))\n+    return false;\n+\n   /* OK, now we know we have a senseful loop.  Handle several cases, depending\n      on what comparison operator is used.  */\n   bound_difference (loop, iv1->base, iv0->base, &bnds);"}]}