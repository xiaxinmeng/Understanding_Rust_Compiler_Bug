{"sha": "abde687ac31890d073a6e769b19ef3ad5d9433a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJkZTY4N2FjMzE4OTBkMDczYTZlNzY5YjE5ZWYzYWQ1ZDk0MzNhMg==", "commit": {"author": {"name": "Senthil Kumar Selvaraj", "email": "senthil_kumar.selvaraj@atmel.com", "date": "2017-04-11T05:09:41Z"}, "committer": {"name": "Senthil Kumar Selvaraj", "email": "saaadhu@gcc.gnu.org", "date": "2017-04-11T05:09:41Z"}, "message": "Fix bogus builtin-sprintf-warn-{3,10}.c failures for avr.\n\nThis patch fixes a whole bunch of failures reported for\ngcc.dg/tree-ssa/builtin-sprintf-warn-{3,10}.c for the avr target.\n\nbuiltin-sprintf-warn-10.c fails because the bounds in the warning\nmessages expect 4 digit wide exponents i.e. __DBL_MAX_EXP__ > 999.\nFor the avr, floats and doubles are both 32 bits wide, __DBL_MAX_EXP__\n== 128, and the max number of exponent digits can only be 3 .\nThe computed size thus ends up one short of the value the test\nexpects. The patch makes the test run only for targets with double64plus.\n\nbuiltin-sprintf-warn-3.c fails because the test appears to assume all\nnon lp64 targets to be ilp32. For the avr, pointer size and int size\nare equal, but both are 16 bits, not 32. The patch fixes this by\nexplicitly adding avr to the dejagnu selector.\n\ngcc/testsuite\n\n2017-04-06  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-10.c: Require double64plus.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-3.c (void test_too_large): \n\tAdd avr-*-* to non-lp64 selector.\n\nFrom-SVN: r246831", "tree": {"sha": "83d909eb9d35576473abdde5ed503a04cac832ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83d909eb9d35576473abdde5ed503a04cac832ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abde687ac31890d073a6e769b19ef3ad5d9433a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abde687ac31890d073a6e769b19ef3ad5d9433a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abde687ac31890d073a6e769b19ef3ad5d9433a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abde687ac31890d073a6e769b19ef3ad5d9433a2/comments", "author": null, "committer": {"login": "saaadhu", "id": 532256, "node_id": "MDQ6VXNlcjUzMjI1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/532256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saaadhu", "html_url": "https://github.com/saaadhu", "followers_url": "https://api.github.com/users/saaadhu/followers", "following_url": "https://api.github.com/users/saaadhu/following{/other_user}", "gists_url": "https://api.github.com/users/saaadhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/saaadhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saaadhu/subscriptions", "organizations_url": "https://api.github.com/users/saaadhu/orgs", "repos_url": "https://api.github.com/users/saaadhu/repos", "events_url": "https://api.github.com/users/saaadhu/events{/privacy}", "received_events_url": "https://api.github.com/users/saaadhu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b75179f367576ba1e10c7d38fc9089f2d4f7faed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75179f367576ba1e10c7d38fc9089f2d4f7faed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b75179f367576ba1e10c7d38fc9089f2d4f7faed"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "a2d0865502843c7ab022b2266900d52f897bd6ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abde687ac31890d073a6e769b19ef3ad5d9433a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abde687ac31890d073a6e769b19ef3ad5d9433a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=abde687ac31890d073a6e769b19ef3ad5d9433a2", "patch": "@@ -1,3 +1,9 @@\n+2017-04-11  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n+\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-10.c: Require double64plus.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-3.c (void test_too_large):\n+\tAdd avr-*-* to non-lp64 selector.\n+\n 2017-04-10  Martin Sebor  <msebor@redhat.com>\n \n \t* gcc.dg/pr40340-3.c: Adjust directive pattern."}, {"sha": "30599ad04dca42df49adc4cb55aa13363e15ab5d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-10.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abde687ac31890d073a6e769b19ef3ad5d9433a2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abde687ac31890d073a6e769b19ef3ad5d9433a2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-10.c?ref=abde687ac31890d073a6e769b19ef3ad5d9433a2", "patch": "@@ -2,6 +2,7 @@\n    Test to verify the correctness of ranges of output computed for floating\n    point directives.\n    { dg-do compile }\n+   { dg-require-effective-target double64plus }\n    { dg-options \"-O2 -Wformat -Wformat-overflow -ftrack-macro-expansion=0\" } */\n \n typedef __builtin_va_list va_list;"}, {"sha": "9db7ad74f370bd86397c135d169d85ed6ba219db", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-3.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abde687ac31890d073a6e769b19ef3ad5d9433a2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abde687ac31890d073a6e769b19ef3ad5d9433a2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-3.c?ref=abde687ac31890d073a6e769b19ef3ad5d9433a2", "patch": "@@ -358,19 +358,19 @@ void test_too_large (char *d, int x, __builtin_va_list va)\n \n   __builtin_snprintf (d, imax,    \"%c\", x);\n   __builtin_snprintf (d, imax_p1, \"%c\", x);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"INT_MAX + 1\" { target lp64 } } */\n-  /* { dg-warning \"specified bound \\[0-9\\]+ exceeds maximum object size\" \"INT_MAX + 1\" { target { ilp32 } } .-1 } */\n+  /* { dg-warning \"specified bound \\[0-9\\]+ exceeds maximum object size\" \"INT_MAX + 1\" { target { { avr-*-* } || ilp32 } } .-1 } */\n \n   __builtin_vsnprintf (d, imax,    \"%c\", va);\n   __builtin_vsnprintf (d, imax_p1, \"%c\", va);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"INT_MAX + 1\" { target lp64 } } */\n-  /* { dg-warning \"specified bound \\[0-9\\]+ exceeds maximum object size\" \"INT_MAX + 1\" { target { ilp32 } } .-1 } */\n+  /* { dg-warning \"specified bound \\[0-9\\]+ exceeds maximum object size\" \"INT_MAX + 1\" { target { { avr-*-* } || ilp32 } } .-1 } */\n \n   __builtin___snprintf_chk (d, imax,    0, imax,    \"%c\", x);\n   __builtin___snprintf_chk (d, imax_p1, 0, imax_p1, \"%c\", x);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"INT_MAX + 1\" { target lp64 } } */\n-  /* { dg-warning \"specified bound \\[0-9\\]+ exceeds maximum object size\" \"INT_MAX + 1\" { target { ilp32 } } .-1 } */\n+  /* { dg-warning \"specified bound \\[0-9\\]+ exceeds maximum object size\" \"INT_MAX + 1\" { target { { avr-*-* } || ilp32 } } .-1 } */\n \n   __builtin___vsnprintf_chk (d, imax,    0, imax,    \"%c\", va);\n   __builtin___vsnprintf_chk (d, imax_p1, 0, imax_p1, \"%c\", va);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"INT_MAX + 1\" { target lp64 } } */\n-  /* { dg-warning \"specified bound \\[0-9\\]+ exceeds maximum object size\" \"INT_MAX + 1\" { target { ilp32 } } .-1 } */\n+  /* { dg-warning \"specified bound \\[0-9\\]+ exceeds maximum object size\" \"INT_MAX + 1\" { target { { avr-*-* } || ilp32 } } .-1 } */\n \n   const size_t ptrmax = __PTRDIFF_MAX__;\n   const size_t ptrmax_m1 = ptrmax - 1;"}]}