{"sha": "f6f315fe1143ddf98f1eb66becabbb10aa92e0a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZmMzE1ZmUxMTQzZGRmOThmMWViNjZiZWNhYmJiMTBhYTkyZTBhMw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2002-04-23T07:20:55Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2002-04-23T07:20:55Z"}, "message": "re PR target/6413 (PROFILE_HOOK label_no)\n\n\tPR target/6413\n\t* function.h: (struct function): Add profile_label_no field.\n\t(current_function_profile_label_no): Define.\n\t* function.c: (profile_label_no): New static var.\n\t(expand_function_start): Increment it, and copy to\n\tcurrent_function_profile_label_no.\n\t* output.h (profile_label_no): Delete.\n\t* final.c (profile_label_no): Delete.\n\t(profile_function): Use current_function_profile_label_no.\n\t(final_end_function): Don't increment profile_label_no here.\n\t* config/i386/i386.c (ix86_osf_output_function_prologue): Replace\n\tprofile_label_no with current_function_profile_label_no.\n\t* config/pa/pa.c (current_function_number): Delete.\n\t(pa_output_function_prologue): Don't output profile label here.\n\t(hppa_profile_hook): Use label_no param rather than\n\tcurrent_function_number.\n\t(FUNC_BEGIN_PROLOG_LABEL): Move to ..\n\t* config/pa/pa.h: .. here.\n\t(FUNCTION_PROFILER): Output profile label here.\n\nFrom-SVN: r52656", "tree": {"sha": "fdb47569e86fdbcfcd516dea2f4adaa666e43043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdb47569e86fdbcfcd516dea2f4adaa666e43043"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3/comments", "author": null, "committer": null, "parents": [{"sha": "878a19ebe2b42ac126f62e4f3d3d2d70f0be26c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878a19ebe2b42ac126f62e4f3d3d2d70f0be26c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/878a19ebe2b42ac126f62e4f3d3d2d70f0be26c2"}], "stats": {"total": 85, "additions": 48, "deletions": 37}, "files": [{"sha": "1293bf0b7e3319627d61c2ca8437c41ba948ee56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6f315fe1143ddf98f1eb66becabbb10aa92e0a3", "patch": "@@ -1,3 +1,25 @@\n+2002-04-23  Alan Modra  <amodra@bigpond.net.au>\n+\n+\tPR target/6413\n+\t* function.h: (struct function): Add profile_label_no field.\n+\t(current_function_profile_label_no): Define.\n+\t* function.c: (profile_label_no): New static var.\n+\t(expand_function_start): Increment it, and copy to\n+\tcurrent_function_profile_label_no.\n+\t* output.h (profile_label_no): Delete.\n+\t* final.c (profile_label_no): Delete.\n+\t(profile_function): Use current_function_profile_label_no.\n+\t(final_end_function): Don't increment profile_label_no here.\n+\t* config/i386/i386.c (ix86_osf_output_function_prologue): Replace\n+\tprofile_label_no with current_function_profile_label_no.\n+\t* config/pa/pa.c (current_function_number): Delete.\n+\t(pa_output_function_prologue): Don't output profile label here.\n+\t(hppa_profile_hook): Use label_no param rather than\n+\tcurrent_function_number.\n+\t(FUNC_BEGIN_PROLOG_LABEL): Move to ..\n+\t* config/pa/pa.h: .. here.\n+\t(FUNCTION_PROFILER): Output profile label here.\n+\n 2002-04-22  Eric Christopher  <echristo@redhat.com>\n \n \t* config/mips/mips.h (ASM_OUTPUT_ALIGNED_DECL_COMMON): Revert"}, {"sha": "f134a211769084e3884df5819cb21d6c19e237d6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f6f315fe1143ddf98f1eb66becabbb10aa92e0a3", "patch": "@@ -1335,7 +1335,7 @@ ix86_osf_output_function_prologue (file, size)\n {\n   const char *prefix = \"\";\n   const char *const lprefix = LPREFIX;\n-  int labelno = profile_label_no;\n+  int labelno = current_function_profile_label_no;\n \n #ifdef OSF_OS\n "}, {"sha": "e5259da45bb787cdeab728abfd5a42ca52a9af35", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=f6f315fe1143ddf98f1eb66becabbb10aa92e0a3", "patch": "@@ -57,10 +57,6 @@ Boston, MA 02111-1307, USA.  */\n #endif\n #endif\n \n-#ifndef FUNC_BEGIN_PROLOG_LABEL\n-#define FUNC_BEGIN_PROLOG_LABEL        \"LFBP\"\n-#endif\n-\n static inline rtx force_mode PARAMS ((enum machine_mode, rtx));\n static void pa_combine_instructions PARAMS ((rtx));\n static int pa_can_combine_p PARAMS ((rtx, rtx, rtx, int, rtx, rtx, rtx));\n@@ -103,11 +99,6 @@ const char *pa_arch_string;\n    registers which were saved by the current function's prologue.  */\n static int gr_saved, fr_saved;\n \n-/* The number of the current function for which profile information\n-   is to be collected.  These numbers are used to create unique label\n-   id's for labels emitted at the beginning of profiled functions.  */\n-static unsigned int current_function_number = 0;\n-\n static rtx find_addr_reg PARAMS ((rtx));\n \n /* Keep track of the number of bytes we have output in the CODE subspaces\n@@ -3119,16 +3110,6 @@ pa_output_function_prologue (file, size)\n \n   fputs (\"\\n\\t.ENTRY\\n\", file);\n \n-  /* When profiling, we need a local label at the beginning of the\n-     prologue because GAS can't handle the difference of a global symbol\n-     and a local symbol.  */\n-  if (current_function_profile)\n-    {\n-      ASM_OUTPUT_INTERNAL_LABEL (file, FUNC_BEGIN_PROLOG_LABEL,\n-\t\t\t\t current_function_number);\n-      current_function_number++;\n-    }\n-\n   /* If we're using GAS and SOM, and not using the portable runtime model,\n      then we don't need to accumulate the total number of code bytes.  */\n   if ((TARGET_GAS && TARGET_SOM && ! TARGET_PORTABLE_RUNTIME)\n@@ -3681,13 +3662,13 @@ hppa_pic_save_rtx ()\n \n void\n hppa_profile_hook (label_no)\n-     int label_no ATTRIBUTE_UNUSED;\n+     int label_no;\n {\n   rtx begin_label_rtx, call_insn;\n   char begin_label_name[16];\n \n   ASM_GENERATE_INTERNAL_LABEL (begin_label_name, FUNC_BEGIN_PROLOG_LABEL,\n-\t\t\t       current_function_number);\n+\t\t\t       label_no);\n   begin_label_rtx = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (begin_label_name));\n \n   if (TARGET_64BIT)"}, {"sha": "0fd97eefc2e0b4a01769eae51382adeb537602c1", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=f6f315fe1143ddf98f1eb66becabbb10aa92e0a3", "patch": "@@ -939,9 +939,16 @@ extern enum cmp_type hppa_branch_type;\n }\n \n /* On HPPA, we emit profiling code as rtl via PROFILE_HOOK rather than\n-   as assembly via FUNCTION_PROFILER.  */\n+   as assembly via FUNCTION_PROFILER.  Just output a local label.\n+   We can't use the function label because the GAS SOM target can't\n+   handle the difference of a global symbol and a local symbol.  */\n \n-#define FUNCTION_PROFILER(FILE, LABEL) /* nothing */\n+#ifndef FUNC_BEGIN_PROLOG_LABEL\n+#define FUNC_BEGIN_PROLOG_LABEL        \"LFBP\"\n+#endif\n+\n+#define FUNCTION_PROFILER(FILE, LABEL) \\\n+  ASM_OUTPUT_INTERNAL_LABEL (FILE, FUNC_BEGIN_PROLOG_LABEL, LABEL)\n \n #define PROFILE_HOOK(label_no) hppa_profile_hook (label_no)\n void hppa_profile_hook PARAMS ((int label_no));"}, {"sha": "a0adcbe70b4f4f4db1ceeac591f9bed2912f20b9", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=f6f315fe1143ddf98f1eb66becabbb10aa92e0a3", "patch": "@@ -170,10 +170,6 @@ char regs_ever_live[FIRST_PSEUDO_REGISTER];\n \n int frame_pointer_needed;\n \n-/* Assign unique numbers to labels generated for profiling.  */\n-\n-int profile_label_no;\n-\n /* Number of unmatched NOTE_INSN_BLOCK_BEG notes we have seen.  */\n \n static int block_depth;\n@@ -1595,7 +1591,7 @@ profile_function (file)\n #ifndef NO_PROFILE_COUNTERS\n   data_section ();\n   ASM_OUTPUT_ALIGN (file, floor_log2 (align / BITS_PER_UNIT));\n-  ASM_OUTPUT_INTERNAL_LABEL (file, \"LP\", profile_label_no);\n+  ASM_OUTPUT_INTERNAL_LABEL (file, \"LP\", current_function_profile_label_no);\n   assemble_integer (const0_rtx, LONG_TYPE_SIZE / BITS_PER_UNIT, align, 1);\n #endif\n \n@@ -1625,7 +1621,7 @@ profile_function (file)\n #endif\n #endif\n \n-  FUNCTION_PROFILER (file, profile_label_no);\n+  FUNCTION_PROFILER (file, current_function_profile_label_no);\n \n #if defined(STATIC_CHAIN_INCOMING_REGNUM) && defined(ASM_OUTPUT_REG_PUSH)\n   if (cxt)\n@@ -1675,8 +1671,6 @@ final_end_function ()\n       && dwarf2out_do_frame ())\n     dwarf2out_end_epilogue ();\n #endif\n-\n-  profile_label_no++;\n }\n \f\n /* Output assembler code for some insns: all or part of a function."}, {"sha": "56e90147b3291685ef1572bb94e72a3a616116de", "filename": "gcc/function.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=f6f315fe1143ddf98f1eb66becabbb10aa92e0a3", "patch": "@@ -124,6 +124,9 @@ int current_function_uses_only_leaf_regs;\n    post-instantiation libcalls.  */\n int virtuals_instantiated;\n \n+/* Assign unique numbers to labels generated for profiling.  */\n+static int profile_label_no;\n+\n /* These variables hold pointers to functions to create and destroy\n    target specific, per-function data structures.  */\n void (*init_machine_status) PARAMS ((struct function *));\n@@ -6684,10 +6687,13 @@ expand_function_start (subr, parms_have_cleanups)\n \t\t\t Pmode);\n     }\n \n-#ifdef PROFILE_HOOK\n   if (current_function_profile)\n-    PROFILE_HOOK (profile_label_no);\n+    {\n+      current_function_profile_label_no = profile_label_no++;\n+#ifdef PROFILE_HOOK\n+      PROFILE_HOOK (current_function_profile_label_no);\n #endif\n+    }\n \n   /* After the display initializations is where the tail-recursion label\n      should go, if we end up needing one.   Ensure we have a NOTE here"}, {"sha": "70164f1d9fad72c90e02baaae2bcd4d03d6668a6", "filename": "gcc/function.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=f6f315fe1143ddf98f1eb66becabbb10aa92e0a3", "patch": "@@ -364,6 +364,9 @@ struct function\n   /* Highest label number in current function.  */\n   int inl_max_label_num;\n \n+  /* Profile label number.  */\n+  int profile_label_no;\n+\n   /* For md files.  */\n \n   /* tm.h can use this to store whatever it likes.  */\n@@ -508,6 +511,7 @@ extern int virtuals_instantiated;\n #define current_function_return_rtx (cfun->return_rtx)\n #define current_function_instrument_entry_exit (cfun->instrument_entry_exit)\n #define current_function_profile (cfun->profile)\n+#define current_function_profile_label_no (cfun->profile_label_no)\n #define current_function_limit_stack (cfun->limit_stack)\n #define current_function_uses_pic_offset_table (cfun->uses_pic_offset_table)\n #define current_function_uses_const_pool (cfun->uses_const_pool)"}, {"sha": "b3426ce3263619156cdf509660d3b15d2f0ab7c6", "filename": "gcc/output.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f315fe1143ddf98f1eb66becabbb10aa92e0a3/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=f6f315fe1143ddf98f1eb66becabbb10aa92e0a3", "patch": "@@ -491,9 +491,6 @@ extern const char *user_label_prefix;\n #define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME) \\\n   (VAR) = ((SYMBOL_NAME) + ((SYMBOL_NAME)[0] == '*'))\n #endif\n-/* Assign unique numbers to labels generated for profiling.  */\n-\n-extern int profile_label_no;\n \n /* Default target function prologue and epilogue assembler output.  */\n extern void default_function_pro_epilogue PARAMS ((FILE *, HOST_WIDE_INT));"}]}