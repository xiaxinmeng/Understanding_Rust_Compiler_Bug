{"sha": "53d1bae90176e1e1a605149d6bdfb9c455888289", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNkMWJhZTkwMTc2ZTFlMWE2MDUxNDlkNmJkZmI5YzQ1NTg4ODI4OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-05-19T07:08:49Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-05-19T07:08:49Z"}, "message": "cfgcleanup.c (mentions_nonequal_regs): Use END_REGNO.\n\ngcc/\n\t* cfgcleanup.c (mentions_nonequal_regs): Use END_REGNO.\n\t* dse.c (note_add_store): Likewise.\n\t* ira-lives.c (mark_hard_reg_dead): Likewise.\n\t* loop-invariant.c (mark_reg_store): Likewise.\n\t(mark_reg_death): Likewise.\n\t* postreload.c (reload_combine): Likewise.\n\t(reload_combine_note_store): Likewise.\n\t(reload_combine_note_use): Likewise.\n\t* recog.c (peep2_reg_dead_p): Likewise.\n\nFrom-SVN: r223336", "tree": {"sha": "3d5e0a4f3edc366a0770e5779bd3c7fddedfd8c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d5e0a4f3edc366a0770e5779bd3c7fddedfd8c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53d1bae90176e1e1a605149d6bdfb9c455888289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53d1bae90176e1e1a605149d6bdfb9c455888289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53d1bae90176e1e1a605149d6bdfb9c455888289", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53d1bae90176e1e1a605149d6bdfb9c455888289/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a480dc3d0d950b6e0a1134897b0dffc26c393e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a480dc3d0d950b6e0a1134897b0dffc26c393e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a480dc3d0d950b6e0a1134897b0dffc26c393e4"}], "stats": {"total": 104, "additions": 37, "deletions": 67}, "files": [{"sha": "4ccebea10168b2ae89dc98f8e4c1297df40f52e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d1bae90176e1e1a605149d6bdfb9c455888289/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d1bae90176e1e1a605149d6bdfb9c455888289/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53d1bae90176e1e1a605149d6bdfb9c455888289", "patch": "@@ -1,3 +1,15 @@\n+2015-05-19  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* cfgcleanup.c (mentions_nonequal_regs): Use END_REGNO.\n+\t* dse.c (note_add_store): Likewise.\n+\t* ira-lives.c (mark_hard_reg_dead): Likewise.\n+\t* loop-invariant.c (mark_reg_store): Likewise.\n+\t(mark_reg_death): Likewise.\n+\t* postreload.c (reload_combine): Likewise.\n+\t(reload_combine_note_store): Likewise.\n+\t(reload_combine_note_use): Likewise.\n+\t* recog.c (peep2_reg_dead_p): Likewise.\n+\n 2015-05-19  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/predicates.md (gpc_reg_operand): Don't allow all"}, {"sha": "f2a831d62a2a5b06d80946fbca0b2afc1d9863bc", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d1bae90176e1e1a605149d6bdfb9c455888289/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d1bae90176e1e1a605149d6bdfb9c455888289/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=53d1bae90176e1e1a605149d6bdfb9c455888289", "patch": "@@ -272,16 +272,10 @@ mentions_nonequal_regs (const_rtx x, regset nonequal)\n       const_rtx x = *iter;\n       if (REG_P (x))\n \t{\n-\t  unsigned int regno = REGNO (x);\n-\t  if (REGNO_REG_SET_P (nonequal, regno))\n-\t    return true;\n-\t  if (regno < FIRST_PSEUDO_REGISTER)\n-\t    {\n-\t      int n = hard_regno_nregs[regno][GET_MODE (x)];\n-\t      while (--n > 0)\n-\t\tif (REGNO_REG_SET_P (nonequal, regno + n))\n-\t\t  return true;\n-\t    }\n+\t  unsigned int end_regno = END_REGNO (x);\n+\t  for (unsigned int regno = REGNO (x); regno < end_regno; ++regno)\n+\t    if (REGNO_REG_SET_P (nonequal, regno))\n+\t      return true;\n \t}\n     }\n   return false;"}, {"sha": "478984ca8c2a0be5712cba71a48e357281285f3f", "filename": "gcc/dse.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d1bae90176e1e1a605149d6bdfb9c455888289/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d1bae90176e1e1a605149d6bdfb9c455888289/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=53d1bae90176e1e1a605149d6bdfb9c455888289", "patch": "@@ -855,7 +855,6 @@ note_add_store (rtx loc, const_rtx expr ATTRIBUTE_UNUSED, void *data)\n {\n   rtx_insn *insn;\n   note_add_store_info *info = (note_add_store_info *) data;\n-  int r, n;\n \n   if (!REG_P (loc))\n     return;\n@@ -874,15 +873,14 @@ note_add_store (rtx loc, const_rtx expr ATTRIBUTE_UNUSED, void *data)\n      available, fail now.  */\n   if (!info->fixed_regs_live)\n     {\n-      info->failure =  true;\n+      info->failure = true;\n       return;\n     }\n   /* Now check if this is a live fixed register.  */\n-  r = REGNO (loc);\n-  n = hard_regno_nregs[r][GET_MODE (loc)];\n-  while (--n >=  0)\n-    if (REGNO_REG_SET_P (info->fixed_regs_live, r+n))\n-      info->failure =  true;\n+  unsigned int end_regno = END_REGNO (loc);\n+  for (unsigned int regno = REGNO (loc); regno < end_regno; ++regno)\n+    if (REGNO_REG_SET_P (info->fixed_regs_live, regno))\n+      info->failure = true;\n }\n \n /* Callback for for_each_inc_dec that emits an INSN that sets DEST to"}, {"sha": "60e7dc57ff31f5dd888934c11323098cce933f29", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d1bae90176e1e1a605149d6bdfb9c455888289/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d1bae90176e1e1a605149d6bdfb9c455888289/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=53d1bae90176e1e1a605149d6bdfb9c455888289", "patch": "@@ -478,7 +478,7 @@ mark_hard_reg_dead (rtx reg)\n \n   if (! TEST_HARD_REG_BIT (ira_no_alloc_regs, regno))\n     {\n-      int last = regno + hard_regno_nregs[regno][GET_MODE (reg)];\n+      int last = END_REGNO (reg);\n       enum reg_class aclass, pclass;\n \n       while (regno < last)"}, {"sha": "1c3eae5e965a1a06f613726b759288c4909ffa0e", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d1bae90176e1e1a605149d6bdfb9c455888289/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d1bae90176e1e1a605149d6bdfb9c455888289/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=53d1bae90176e1e1a605149d6bdfb9c455888289", "patch": "@@ -1883,8 +1883,6 @@ static void\n mark_reg_store (rtx reg, const_rtx setter ATTRIBUTE_UNUSED,\n \t\tvoid *data ATTRIBUTE_UNUSED)\n {\n-  int regno;\n-\n   if (GET_CODE (reg) == SUBREG)\n     reg = SUBREG_REG (reg);\n \n@@ -1893,20 +1891,9 @@ mark_reg_store (rtx reg, const_rtx setter ATTRIBUTE_UNUSED,\n \n   regs_set[n_regs_set++] = reg;\n \n-  regno = REGNO (reg);\n-\n-  if (regno >= FIRST_PSEUDO_REGISTER)\n+  unsigned int end_regno = END_REGNO (reg);\n+  for (unsigned int regno = REGNO (reg); regno < end_regno; ++regno)\n     mark_regno_live (regno);\n-  else\n-    {\n-      int last = regno + hard_regno_nregs[regno][GET_MODE (reg)];\n-\n-      while (regno < last)\n-\t{\n-\t  mark_regno_live (regno);\n-\t  regno++;\n-\t}\n-    }\n }\n \n /* Mark clobbering register REG.  */\n@@ -1921,20 +1908,9 @@ mark_reg_clobber (rtx reg, const_rtx setter, void *data)\n static void\n mark_reg_death (rtx reg)\n {\n-  int regno = REGNO (reg);\n-\n-  if (regno >= FIRST_PSEUDO_REGISTER)\n+  unsigned int end_regno = END_REGNO (reg);\n+  for (unsigned int regno = REGNO (reg); regno < end_regno; ++regno)\n     mark_regno_death (regno);\n-  else\n-    {\n-      int last = regno + hard_regno_nregs[regno][GET_MODE (reg)];\n-\n-      while (regno < last)\n-\t{\n-\t  mark_regno_death (regno);\n-\t  regno++;\n-\t}\n-    }\n }\n \n /* Mark occurrence of registers in X for the current loop.  */"}, {"sha": "0144f6046b22b0c8120e6e49e86a995629244033", "filename": "gcc/postreload.c", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d1bae90176e1e1a605149d6bdfb9c455888289/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d1bae90176e1e1a605149d6bdfb9c455888289/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=53d1bae90176e1e1a605149d6bdfb9c455888289", "patch": "@@ -1374,12 +1374,8 @@ reload_combine (void)\n \t      if ((GET_CODE (setuse) == USE || GET_CODE (setuse) == CLOBBER)\n \t\t  && REG_P (usage_rtx))\n \t        {\n-\t\t  unsigned int i;\n-\t\t  unsigned int start_reg = REGNO (usage_rtx);\n-\t\t  unsigned int num_regs\n-\t\t    = hard_regno_nregs[start_reg][GET_MODE (usage_rtx)];\n-\t\t  unsigned int end_reg = start_reg + num_regs - 1;\n-\t\t  for (i = start_reg; i <= end_reg; i++)\n+\t\t  unsigned int end_regno = END_REGNO (usage_rtx);\n+\t\t  for (unsigned int i = REGNO (usage_rtx); i < end_regno; ++i)\n \t\t    if (GET_CODE (XEXP (link, 0)) == CLOBBER)\n \t\t      {\n \t\t        reg_state[i].use_index = RELOAD_COMBINE_MAX_USES;\n@@ -1461,9 +1457,8 @@ reload_combine_note_store (rtx dst, const_rtx set, void *data ATTRIBUTE_UNUSED)\n \t  || GET_CODE (dst) == PRE_DEC || GET_CODE (dst) == POST_DEC\n \t  || GET_CODE (dst) == PRE_MODIFY || GET_CODE (dst) == POST_MODIFY)\n \t{\n-\t  regno = REGNO (XEXP (dst, 0));\n-\t  mode = GET_MODE (XEXP (dst, 0));\n-\t  for (i = hard_regno_nregs[regno][mode] - 1 + regno; i >= regno; i--)\n+\t  unsigned int end_regno = END_REGNO (XEXP (dst, 0));\n+\t  for (unsigned int i = REGNO (XEXP (dst, 0)); i < end_regno; ++i)\n \t    {\n \t      /* We could probably do better, but for now mark the register\n \t\t as used in an unknown fashion and set/clobbered at this\n@@ -1533,13 +1528,11 @@ reload_combine_note_use (rtx *xp, rtx_insn *insn, int ruid, rtx containing_mem)\n       /* If this is the USE of a return value, we can't change it.  */\n       if (REG_P (XEXP (x, 0)) && REG_FUNCTION_VALUE_P (XEXP (x, 0)))\n \t{\n-\t/* Mark the return register as used in an unknown fashion.  */\n+\t  /* Mark the return register as used in an unknown fashion.  */\n \t  rtx reg = XEXP (x, 0);\n-\t  int regno = REGNO (reg);\n-\t  int nregs = hard_regno_nregs[regno][GET_MODE (reg)];\n-\n-\t  while (--nregs >= 0)\n-\t    reg_state[regno + nregs].use_index = -1;\n+\t  unsigned int end_regno = END_REGNO (reg);\n+\t  for (unsigned int regno = REGNO (reg); regno < end_regno; ++regno)\n+\t    reg_state[regno].use_index = -1;\n \t  return;\n \t}\n       break;"}, {"sha": "ffbd7b5c5608455c82e0b7b09c6787dd18ea868b", "filename": "gcc/recog.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d1bae90176e1e1a605149d6bdfb9c455888289/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d1bae90176e1e1a605149d6bdfb9c455888289/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=53d1bae90176e1e1a605149d6bdfb9c455888289", "patch": "@@ -3128,18 +3128,15 @@ peep2_regno_dead_p (int ofs, int regno)\n int\n peep2_reg_dead_p (int ofs, rtx reg)\n {\n-  int regno, n;\n-\n   gcc_assert (ofs < MAX_INSNS_PER_PEEP2 + 1);\n \n   ofs = peep2_buf_position (peep2_current + ofs);\n \n   gcc_assert (peep2_insn_data[ofs].insn != NULL_RTX);\n \n-  regno = REGNO (reg);\n-  n = hard_regno_nregs[regno][GET_MODE (reg)];\n-  while (--n >= 0)\n-    if (REGNO_REG_SET_P (peep2_insn_data[ofs].live_before, regno + n))\n+  unsigned int end_regno = END_REGNO (reg);\n+  for (unsigned int regno = REGNO (reg); regno < end_regno; ++regno)\n+    if (REGNO_REG_SET_P (peep2_insn_data[ofs].live_before, regno))\n       return 0;\n   return 1;\n }"}]}