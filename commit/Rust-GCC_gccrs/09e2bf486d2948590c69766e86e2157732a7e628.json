{"sha": "09e2bf486d2948590c69766e86e2157732a7e628", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDllMmJmNDg2ZDI5NDg1OTBjNjk3NjZlODZlMjE1NzczMmE3ZTYyOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-03-03T18:27:09Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-03-03T18:27:09Z"}, "message": "calls.c (rtx_for_function_call): Take the address as an argument\n\n\t* calls.c (rtx_for_function_call): Take the address as an argument\n\t(expand_call): Do not modify the expression.\n\nFrom-SVN: r63725", "tree": {"sha": "af672e0a31cf7543b3a7efb9ccd5801be4a7fd2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af672e0a31cf7543b3a7efb9ccd5801be4a7fd2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09e2bf486d2948590c69766e86e2157732a7e628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09e2bf486d2948590c69766e86e2157732a7e628", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09e2bf486d2948590c69766e86e2157732a7e628", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09e2bf486d2948590c69766e86e2157732a7e628/comments", "author": null, "committer": null, "parents": [{"sha": "f7da1e9a1e1b18af3a64419f989b6d7ed284f4fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7da1e9a1e1b18af3a64419f989b6d7ed284f4fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7da1e9a1e1b18af3a64419f989b6d7ed284f4fc"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "988250c800c55b1cc99370614613ec6519ccfaf3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e2bf486d2948590c69766e86e2157732a7e628/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e2bf486d2948590c69766e86e2157732a7e628/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09e2bf486d2948590c69766e86e2157732a7e628", "patch": "@@ -1,5 +1,8 @@\n Mon Mar  3 19:07:21 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n+\t* calls.c (rtx_for_function_call): Take the address as an argument\n+\t(expand_call): Do not modify the expression.\n+\n \t* toplev.c (rest_of_compilation):  Avoid cfg_cleanup calls when not\n \toptimizing.\n "}, {"sha": "31550afc62c0fc53c1c27b5d5ebc02c116dba960", "filename": "gcc/calls.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e2bf486d2948590c69766e86e2157732a7e628/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e2bf486d2948590c69766e86e2157732a7e628/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=09e2bf486d2948590c69766e86e2157732a7e628", "patch": "@@ -1663,12 +1663,12 @@ compute_argument_addresses (args, argblock, num_actuals)\n    FNDECL is the tree node for the target function.  For an indirect call\n    FNDECL will be NULL_TREE.\n \n-   EXP is the CALL_EXPR for this call.  */\n+   ADDR is the operand 0 of CALL_EXPR for this call.  */\n \n static rtx\n-rtx_for_function_call (fndecl, exp)\n+rtx_for_function_call (fndecl, addr)\n      tree fndecl;\n-     tree exp;\n+     tree addr;\n {\n   rtx funexp;\n \n@@ -1690,7 +1690,7 @@ rtx_for_function_call (fndecl, exp)\n     /* Generate an rtx (probably a pseudo-register) for the address.  */\n     {\n       push_temp_slots ();\n-      funexp = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, VOIDmode, 0);\n+      funexp = expand_expr (addr, NULL_RTX, VOIDmode, 0);\n       pop_temp_slots ();\t/* FUNEXP can't be BLKmode.  */\n       emit_queue ();\n     }\n@@ -2212,6 +2212,7 @@ expand_call (exp, target, ignore)\n   int old_stack_allocated;\n   rtx call_fusage;\n   tree p = TREE_OPERAND (exp, 0);\n+  tree addr = TREE_OPERAND (exp, 0);\n   int i;\n   /* The alignment of the stack, in bits.  */\n   HOST_WIDE_INT preferred_stack_boundary;\n@@ -2343,7 +2344,7 @@ expand_call (exp, target, ignore)\n   preferred_stack_boundary = PREFERRED_STACK_BOUNDARY;\n \n   /* Operand 0 is a pointer-to-function; get the type of the function.  */\n-  funtype = TREE_TYPE (TREE_OPERAND (exp, 0));\n+  funtype = TREE_TYPE (addr);\n   if (! POINTER_TYPE_P (funtype))\n     abort ();\n   funtype = TREE_TYPE (funtype);\n@@ -2480,8 +2481,8 @@ expand_call (exp, target, ignore)\n \n   /* Tail recursion fails, when we are not dealing with recursive calls.  */\n   if (!try_tail_recursion\n-      || TREE_CODE (TREE_OPERAND (exp, 0)) != ADDR_EXPR\n-      || TREE_OPERAND (TREE_OPERAND (exp, 0), 0) != current_function_decl)\n+      || TREE_CODE (addr) != ADDR_EXPR\n+      || TREE_OPERAND (addr, 0) != current_function_decl)\n     try_tail_recursion = 0;\n \n   /*  Rest of purposes for tail call optimizations to fail.  */\n@@ -2503,7 +2504,7 @@ expand_call (exp, target, ignore)\n       /* Functions that do not return exactly once may not be sibcall\n          optimized.  */\n       || (flags & (ECF_RETURNS_TWICE | ECF_LONGJMP | ECF_NORETURN))\n-      || TYPE_VOLATILE (TREE_TYPE (TREE_TYPE (TREE_OPERAND (exp, 0))))\n+      || TYPE_VOLATILE (TREE_TYPE (TREE_TYPE (addr)))\n       /* If this function requires more stack slots than the current\n \t function, we cannot change it into a sibling call.  */\n       || args_size.constant > current_function_args_size\n@@ -2558,7 +2559,7 @@ expand_call (exp, target, ignore)\n \t}\n       /* Do the same for the function address if it is an expression. */\n       if (!fndecl)\n-        TREE_OPERAND (exp, 0) = fix_unsafe_tree (TREE_OPERAND (exp, 0));\n+        addr = fix_unsafe_tree (addr);\n       /* Expanding one of those dangerous arguments could have added\n \t cleanups, but otherwise give it a whirl.  */\n       if (any_pending_cleanups (1))\n@@ -2949,7 +2950,7 @@ expand_call (exp, target, ignore)\n \t be deferred during the evaluation of the arguments.  */\n       NO_DEFER_POP;\n \n-      funexp = rtx_for_function_call (fndecl, exp);\n+      funexp = rtx_for_function_call (fndecl, addr);\n \n       /* Figure out the register where the value, if any, will come back.  */\n       valreg = 0;"}]}