{"sha": "5f531feff7ed6651354ed5b1cbd2a83cf204d170", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY1MzFmZWZmN2VkNjY1MTM1NGVkNWIxY2JkMmE4M2NmMjA0ZDE3MA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-12-11T11:09:19Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-12-11T11:09:19Z"}, "message": "[Ada] Spurious errors on aspect specifications in generic units\n\nThis patch fixes spurious errors on aspect specifications on record\ntypes when the aspect expression references a component of the type that\nis not a discriminant. The patch also cleans up the legality checks on\naspect specifications, and improves error message on illegal aspect\nspecifications whose expressions are not conformant between\nspecification and freeze point, because of changes in visibility.\n\n2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch13.adb (Push_Type, Pop_Type): New procedures, used for\n\tanalysis of aspect expressions for record types, whose\n\tcomponents (not only discriminants) may be referenced in aspect\n\texpressions.\n\t(Analyze_Aspect_Specifications, Analyze_Aspects_At_Freeze_Point,\n\tAnalyze_Aspect_At_End-Of_Declarations,\n\tResolve_Aspect_Expressions): Use the new subprograms.\n\t(Check_Aspect_At_End_Of_Declarations): Improve error message.\n\t(Build_Predicate_Functions): Do not build their bodies in a\n\tgeneric unit.\n\t(Is_Derived_Type_With_Constraint): New subprogram to uncover and\n\treject aspect specificationss on types that appear after the\n\ttype is frozen.\n\t* sem_ch13.ads (Push_Scope_And_Install_Discriminants,\n\tUninstall_Discriminants_And_Pop_Scope): Remove.\n\t* sem_ch6.adb, sem_ch6.ads (Fully_Conformant_Expressions):\n\tAdditional parameter to improve error message on illegal aspect\n\tspecifications whose resolution differ between aspect\n\tspecification and freeze point.\n\t* freeze.adb: Remove references to\n\tInstall/Uninstall_Discriminants.\n\ngcc/testsuite/\n\n\t* gnat.dg/aspect1.adb, gnat.dg/aspect1_horizontal.adb,\n\tgnat.dg/aspect1_horizontal.ads, gnat.dg/aspect1_vectors_2d.ads:\n\tNew testcase.\n\t* gnat.dg/static_pred1.adb: Expect an error message.\n\nFrom-SVN: r266980", "tree": {"sha": "516bc968672662fd2a9636ff4234661f1e7aaefd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/516bc968672662fd2a9636ff4234661f1e7aaefd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f531feff7ed6651354ed5b1cbd2a83cf204d170", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f531feff7ed6651354ed5b1cbd2a83cf204d170", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f531feff7ed6651354ed5b1cbd2a83cf204d170", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f531feff7ed6651354ed5b1cbd2a83cf204d170/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15bdffc4963b842cf104a0075921965a3cee272b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15bdffc4963b842cf104a0075921965a3cee272b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15bdffc4963b842cf104a0075921965a3cee272b"}], "stats": {"total": 321, "additions": 244, "deletions": 77}, "files": [{"sha": "861b09d05b06f63d39cea6fc6e8d1ab2bdaf7bdf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5f531feff7ed6651354ed5b1cbd2a83cf204d170", "patch": "@@ -1,3 +1,27 @@\n+2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Push_Type, Pop_Type): New procedures, used for\n+\tanalysis of aspect expressions for record types, whose\n+\tcomponents (not only discriminants) may be referenced in aspect\n+\texpressions.\n+\t(Analyze_Aspect_Specifications, Analyze_Aspects_At_Freeze_Point,\n+\tAnalyze_Aspect_At_End-Of_Declarations,\n+\tResolve_Aspect_Expressions): Use the new subprograms.\n+\t(Check_Aspect_At_End_Of_Declarations): Improve error message.\n+\t(Build_Predicate_Functions): Do not build their bodies in a\n+\tgeneric unit.\n+\t(Is_Derived_Type_With_Constraint): New subprogram to uncover and\n+\treject aspect specificationss on types that appear after the\n+\ttype is frozen.\n+\t* sem_ch13.ads (Push_Scope_And_Install_Discriminants,\n+\tUninstall_Discriminants_And_Pop_Scope): Remove.\n+\t* sem_ch6.adb, sem_ch6.ads (Fully_Conformant_Expressions):\n+\tAdditional parameter to improve error message on illegal aspect\n+\tspecifications whose resolution differ between aspect\n+\tspecification and freeze point.\n+\t* freeze.adb: Remove references to\n+\tInstall/Uninstall_Discriminants.\n+\n 2018-12-11  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:"}, {"sha": "7ef10ccbbd209605aff177819e1efd06d88fcb6a", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=5f531feff7ed6651354ed5b1cbd2a83cf204d170", "patch": "@@ -1938,12 +1938,6 @@ package body Freeze is\n             --  for a description of how we handle aspect visibility).\n \n             elsif Has_Delayed_Aspects (E) then\n-\n-               --  Retrieve the visibility to the discriminants in order to\n-               --  analyze properly the aspects.\n-\n-               Push_Scope_And_Install_Discriminants (E);\n-\n                declare\n                   Ritem : Node_Id;\n \n@@ -1960,8 +1954,6 @@ package body Freeze is\n                      Ritem := Next_Rep_Item (Ritem);\n                   end loop;\n                end;\n-\n-               Uninstall_Discriminants_And_Pop_Scope (E);\n             end if;\n \n             --  If an incomplete type is still not frozen, this may be a"}, {"sha": "e1bc6bca31a4eaffa36be8b8b035fac2ff45355d", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 144, "deletions": 46, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=5f531feff7ed6651354ed5b1cbd2a83cf204d170", "patch": "@@ -230,6 +230,23 @@ package body Sem_Ch13 is\n    --  is True. This warning inserts the string Msg to describe the construct\n    --  causing biasing.\n \n+   -----------------------------------------------------------\n+   --  Visibility of Discriminants in Aspect Specifications --\n+   -----------------------------------------------------------\n+\n+   --  The discriminants of a type are visible when analyzing the aspect\n+   --  specifications of a type declaration or protected type declaration,\n+   --  but not when analyzing those of a subtype declaration. The following\n+   --  routines enforce this distinction.\n+\n+   procedure Push_Type (E : Entity_Id);\n+   --  Push scope E and make visible the discriminants of type entity E if E\n+   --  has discriminants and is not a subtype.\n+\n+   procedure Pop_Type (E : Entity_Id);\n+   --  Remove visibility to the discriminants of type entity E and pop the\n+   --  scope stack if E has discriminants and is not a subtype.\n+\n    ---------------------------------------------------\n    -- Table for Validate_Compile_Time_Warning_Error --\n    ---------------------------------------------------\n@@ -1353,6 +1370,13 @@ package body Sem_Ch13 is\n       if May_Inherit_Delayed_Rep_Aspects (E) then\n          Inherit_Delayed_Rep_Aspects (ASN);\n       end if;\n+\n+      if In_Instance\n+        and then E /= Base_Type (E)\n+        and then Is_First_Subtype (E)\n+      then\n+         Inherit_Rep_Item_Chain (Base_Type (E), E);\n+      end if;\n    end Analyze_Aspects_At_Freeze_Point;\n \n    -----------------------------------\n@@ -5462,11 +5486,12 @@ package body Sem_Ch13 is\n                   --  described in \"Handling of Default and Per-Object\n                   --  Expressions\" in sem.ads.\n \n-                  --  The visibility to the discriminants must be restored\n+                  --  The visibility to the components must be established\n+                  --  and restored before and after analysis.\n \n-                  Push_Scope_And_Install_Discriminants (U_Ent);\n+                  Push_Type (U_Ent);\n                   Preanalyze_Spec_Expression (Expr, RTE (RE_CPU_Range));\n-                  Uninstall_Discriminants_And_Pop_Scope (U_Ent);\n+                  Pop_Type (U_Ent);\n \n                   if not Is_OK_Static_Expression (Expr) then\n                      Check_Restriction (Static_Priorities, Expr);\n@@ -5556,14 +5581,14 @@ package body Sem_Ch13 is\n                   --  described in \"Handling of Default and Per-Object\n                   --  Expressions\" in sem.ads.\n \n-                  --  The visibility to the discriminants must be restored\n+                  --  The visibility to the components must be restored\n \n-                  Push_Scope_And_Install_Discriminants (U_Ent);\n+                  Push_Type (U_Ent);\n \n                   Preanalyze_Spec_Expression\n                     (Expr, RTE (RE_Dispatching_Domain));\n \n-                  Uninstall_Discriminants_And_Pop_Scope (U_Ent);\n+                  Pop_Type (U_Ent);\n                end if;\n \n             else\n@@ -5644,14 +5669,14 @@ package body Sem_Ch13 is\n                   --  described in \"Handling of Default and Per-Object\n                   --  Expressions\" in sem.ads.\n \n-                  --  The visibility to the discriminants must be restored\n+                  --  The visibility to the components must be restored\n \n-                  Push_Scope_And_Install_Discriminants (U_Ent);\n+                  Push_Type (U_Ent);\n \n                   Preanalyze_Spec_Expression\n                     (Expr, RTE (RE_Interrupt_Priority));\n \n-                  Uninstall_Discriminants_And_Pop_Scope (U_Ent);\n+                  Pop_Type (U_Ent);\n \n                   --  Check the No_Task_At_Interrupt_Priority restriction\n \n@@ -5682,6 +5707,7 @@ package body Sem_Ch13 is\n             begin\n                Assoc := First (Component_Associations (Expr));\n                while Present (Assoc) loop\n+                  Analyze (Expression (Assoc));\n                   if not Is_Entity_Name (Expression (Assoc)) then\n                      Error_Msg_N (\"value must be a function\", Assoc);\n                   end if;\n@@ -5820,11 +5846,11 @@ package body Sem_Ch13 is\n                   --  described in \"Handling of Default and Per-Object\n                   --  Expressions\" in sem.ads.\n \n-                  --  The visibility to the discriminants must be restored\n+                  --  The visibility to the components must be restored\n \n-                  Push_Scope_And_Install_Discriminants (U_Ent);\n+                  Push_Type (U_Ent);\n                   Preanalyze_Spec_Expression (Expr, Standard_Integer);\n-                  Uninstall_Discriminants_And_Pop_Scope (U_Ent);\n+                  Pop_Type (U_Ent);\n \n                   if not Is_OK_Static_Expression (Expr) then\n                      Check_Restriction (Static_Priorities, Expr);\n@@ -8699,6 +8725,13 @@ package body Sem_Ch13 is\n         or else (Present (SId) and then Has_Completion (SId))\n       then\n          return;\n+\n+        --  Do not generate predicate bodies within a generic unit. The\n+        --  expressions have been analyzed already, and the bodies play\n+        --  no role if not within an executable unit.\n+\n+      elsif Inside_A_Generic then\n+         return;\n       end if;\n \n       --  The related type may be subject to pragma Ghost. Set the mode now to\n@@ -9327,11 +9360,22 @@ package body Sem_Ch13 is\n          then\n             Preanalyze_Spec_Expression (End_Decl_Expr, Full_View (T));\n \n+         --  The following aspect expressions may contain references to\n+         --  components and discriminants of the type.\n+\n+         elsif A_Id  = Aspect_Dynamic_Predicate\n+           or else A_Id = Aspect_Priority\n+         then\n+            Push_Type (Ent);\n+            Preanalyze_Spec_Expression (End_Decl_Expr, T);\n+            Pop_Type (Ent);\n+\n          else\n             Preanalyze_Spec_Expression (End_Decl_Expr, T);\n          end if;\n \n-         Err := not Fully_Conformant_Expressions (End_Decl_Expr, Freeze_Expr);\n+         Err := not Fully_Conformant_Expressions\n+                 (End_Decl_Expr, Freeze_Expr, Report => True);\n       end if;\n \n       --  Output error message if error. Force error on aspect specification\n@@ -9342,7 +9386,7 @@ package body Sem_Ch13 is\n            (\"!visibility of aspect for& changes after freeze point\",\n             ASN, Ent);\n          Error_Msg_NE\n-           (\"info: & is frozen here, aspects evaluated at this point??\",\n+           (\"info: & is frozen here, (RM 13.1.1 (13/3))??\",\n             Freeze_Node (Ent), Ent);\n       end if;\n    end Check_Aspect_At_End_Of_Declarations;\n@@ -11193,13 +11237,9 @@ package body Sem_Ch13 is\n         and then Has_Delayed_Aspects (E)\n         and then Scope (E) = Current_Scope\n       then\n-         --  Retrieve the visibility to the discriminants in order to properly\n-         --  analyze the aspects.\n-\n-         Push_Scope_And_Install_Discriminants (E);\n-\n          declare\n             Ritem : Node_Id;\n+            A_Id : Aspect_Id;\n \n          begin\n             --  Look for aspect specification entries for this entity\n@@ -11210,14 +11250,26 @@ package body Sem_Ch13 is\n                  and then Entity (Ritem) = E\n                  and then Is_Delayed_Aspect (Ritem)\n                then\n-                  Check_Aspect_At_Freeze_Point (Ritem);\n+                  A_Id := Get_Aspect_Id (Ritem);\n+                  if A_Id = Aspect_Dynamic_Predicate\n+                    or else A_Id = Aspect_Priority\n+                  then\n+                    --  Retrieve the visibility to components and discriminants\n+                    --  in order to properly analyze the aspects.\n+\n+                     Push_Type (E);\n+                     Check_Aspect_At_Freeze_Point (Ritem);\n+                     Pop_Type (E);\n+\n+                  else\n+                     Check_Aspect_At_Freeze_Point (Ritem);\n+                  end if;\n                end if;\n \n                Next_Rep_Item (Ritem);\n             end loop;\n          end;\n \n-         Uninstall_Discriminants_And_Pop_Scope (E);\n       end if;\n \n       --  For a record type, deal with variant parts. This has to be delayed\n@@ -12402,23 +12454,33 @@ package body Sem_Ch13 is\n       end if;\n    end New_Stream_Subprogram;\n \n-   ------------------------------------------\n-   -- Push_Scope_And_Install_Discriminants --\n-   ------------------------------------------\n+   ---------------\n+   -- Push_Type --\n+   ---------------\n \n-   procedure Push_Scope_And_Install_Discriminants (E : Entity_Id) is\n+   procedure Push_Type (E : Entity_Id) is\n+      Comp : Entity_Id;\n    begin\n-      if Is_Type (E) and then Has_Discriminants (E) then\n+      if Ekind (E) = E_Record_Type then\n          Push_Scope (E);\n+         Comp := First_Component (E);\n+         while Present (Comp) loop\n+            Install_Entity (Comp);\n+            Next_Component (Comp);\n+         end loop;\n \n-         --  Make the discriminants visible for type declarations and protected\n-         --  type declarations, not for subtype declarations (RM 13.1.1 (12/3))\n-\n-         if Nkind (Parent (E)) /= N_Subtype_Declaration then\n+         if Has_Discriminants (E) then\n             Install_Discriminants (E);\n          end if;\n+\n+      elsif Is_Type (E)\n+         and then Has_Discriminants (E)\n+         and then Nkind (Parent (E)) /= N_Subtype_Declaration\n+      then\n+         Push_Scope (E);\n+         Install_Discriminants (E);\n       end if;\n-   end Push_Scope_And_Install_Discriminants;\n+   end Push_Type;\n \n    -----------------------------------\n    -- Register_Address_Clause_Check --\n@@ -12498,6 +12560,13 @@ package body Sem_Ch13 is\n       S           : Entity_Id;\n       Parent_Type : Entity_Id;\n \n+      function Is_Derived_Type_With_Constraint return Boolean;\n+      --  Check whether T is a derived type with an explicit constraint, in\n+      --  which case the constraint has frozen the type and the item is too\n+      --  late.  This compensates for the fact that for derived scalar types\n+      --  we freeze the base type unconditionally on account of a long-standing\n+      --  issue in gigi.\n+\n       procedure No_Type_Rep_Item;\n       --  Output message indicating that no type-related aspects can be\n       --  specified due to some property of the parent type.\n@@ -12512,6 +12581,22 @@ package body Sem_Ch13 is\n       --  document the requirement in the spec of Rep_Item_Too_Late that\n       --  if True is returned, then the rep item must be completely ignored???\n \n+      --------------------------------------\n+      --  Is_Derived_Type_With_Constraint --\n+      --------------------------------------\n+\n+      function Is_Derived_Type_With_Constraint return Boolean is\n+         Decl : constant Node_Id := Declaration_Node (T);\n+      begin\n+         return Is_Derived_Type (T)\n+           and then Is_Frozen (Base_Type (T))\n+           and then Is_Enumeration_Type (T)\n+           and then False\n+           and then Nkind (N) = N_Enumeration_Representation_Clause\n+           and then Nkind (Decl) = N_Subtype_Declaration\n+           and then not Is_Entity_Name (Subtype_Indication (Decl));\n+      end Is_Derived_Type_With_Constraint;\n+\n       ----------------------\n       -- No_Type_Rep_Item --\n       ----------------------\n@@ -12541,7 +12626,9 @@ package body Sem_Ch13 is\n    begin\n       --  First make sure entity is not frozen (RM 13.1(9))\n \n-      if Is_Frozen (T)\n+      if (Is_Frozen (T)\n+         or else (Is_Type (T)\n+           and then Is_Derived_Type_With_Constraint))\n \n         --  Exclude imported types, which may be frozen if they appear in a\n         --  representation clause for a local type.\n@@ -12975,9 +13062,9 @@ package body Sem_Ch13 is\n    --  Start of processing for Resolve_Aspect_Expressions\n \n    begin\n-      --  Need to make sure discriminants, if any, are directly visible\n-\n-      Push_Scope_And_Install_Discriminants (E);\n+      if No (ASN) then\n+         return;\n+      end if;\n \n       while Present (ASN) loop\n          if Nkind (ASN) = N_Aspect_Specification and then Entity (ASN) = E then\n@@ -13004,18 +13091,19 @@ package body Sem_Ch13 is\n                      --  Build predicate function specification and preanalyze\n                      --  expression after type replacement. The function\n                      --  declaration must be analyzed in the scope of the\n-                     --  type, but the expression must see components.\n+                     --  type, but the the expression can reference components\n+                     --  and discriminants of the type.\n \n                      if No (Predicate_Function (E)) then\n-                        Uninstall_Discriminants_And_Pop_Scope (E);\n                         declare\n                            FDecl : constant Node_Id :=\n                                      Build_Predicate_Function_Declaration (E);\n                            pragma Unreferenced (FDecl);\n \n                         begin\n-                           Push_Scope_And_Install_Discriminants (E);\n+                           Push_Type (E);\n                            Resolve_Aspect_Expression (Expr);\n+                           Pop_Type (E);\n                         end;\n                      end if;\n \n@@ -13045,6 +13133,11 @@ package body Sem_Ch13 is\n                      Set_Must_Not_Freeze (Expr);\n                      Preanalyze_Spec_Expression (Expr, E);\n \n+                  when Aspect_Priority =>\n+                     Push_Type (E);\n+                     Preanalyze_Spec_Expression (Expr, Any_Integer);\n+                     Pop_Type (E);\n+\n                   --  Ditto for Storage_Size. Any other aspects that carry\n                   --  expressions that should not freeze ??? This is only\n                   --  relevant to the misuse of deferred constants.\n@@ -13078,8 +13171,6 @@ package body Sem_Ch13 is\n \n          ASN := Next_Rep_Item (ASN);\n       end loop;\n-\n-      Uninstall_Discriminants_And_Pop_Scope (E);\n    end Resolve_Aspect_Expressions;\n \n    -------------------------\n@@ -13586,17 +13677,24 @@ package body Sem_Ch13 is\n       end if;\n    end Uninstall_Discriminants;\n \n-   -------------------------------------------\n-   -- Uninstall_Discriminants_And_Pop_Scope --\n-   -------------------------------------------\n+   --------------\n+   -- Pop_Type --\n+   --------------\n \n-   procedure Uninstall_Discriminants_And_Pop_Scope (E : Entity_Id) is\n+   procedure Pop_Type (E : Entity_Id) is\n    begin\n-      if Is_Type (E) and then Has_Discriminants (E) then\n+      if Ekind (E) = E_Record_Type and then E = Current_Scope then\n+         End_Scope;\n+         return;\n+\n+      elsif Is_Type (E)\n+         and then Has_Discriminants (E)\n+         and then Nkind (Parent (E)) /= N_Subtype_Declaration\n+      then\n          Uninstall_Discriminants (E);\n          Pop_Scope;\n       end if;\n-   end Uninstall_Discriminants_And_Pop_Scope;\n+   end Pop_Type;\n \n    ------------------------------\n    -- Validate_Address_Clauses --"}, {"sha": "00d7c3bb5a2816e349729e64467251c1203b5025", "filename": "gcc/ada/sem_ch13.ads", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Fada%2Fsem_ch13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Fada%2Fsem_ch13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.ads?ref=5f531feff7ed6651354ed5b1cbd2a83cf204d170", "patch": "@@ -354,27 +354,10 @@ package Sem_Ch13 is\n    --  for First, Next, and Has_Element. Optionally an Element primitive may\n    --  also be defined.\n \n-   -----------------------------------------------------------\n-   --  Visibility of Discriminants in Aspect Specifications --\n-   -----------------------------------------------------------\n-\n-   --  The discriminants of a type are visible when analyzing the aspect\n-   --  specifications of a type declaration or protected type declaration,\n-   --  but not when analyzing those of a subtype declaration. The following\n-   --  routines enforce this distinction.\n-\n    procedure Install_Discriminants (E : Entity_Id);\n    --  Make visible the discriminants of type entity E\n \n-   procedure Push_Scope_And_Install_Discriminants (E : Entity_Id);\n-   --  Push scope E and makes visible the discriminants of type entity E if E\n-   --  has discriminants and is not a subtype.\n-\n    procedure Uninstall_Discriminants (E : Entity_Id);\n    --  Remove visibility to the discriminants of type entity E\n \n-   procedure Uninstall_Discriminants_And_Pop_Scope (E : Entity_Id);\n-   --  Remove visibility to the discriminants of type entity E and pop the\n-   --  scope stack if E has discriminants and is not a subtype.\n-\n end Sem_Ch13;"}, {"sha": "ee75ee42074098760cc75a6565c408ee8bb4fc2b", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=5f531feff7ed6651354ed5b1cbd2a83cf204d170", "patch": "@@ -8823,16 +8823,21 @@ package body Sem_Ch6 is\n \n    function Fully_Conformant_Expressions\n      (Given_E1 : Node_Id;\n-      Given_E2 : Node_Id) return Boolean\n+      Given_E2 : Node_Id;\n+      Report   : Boolean := False) return Boolean\n    is\n       E1 : constant Node_Id := Original_Node (Given_E1);\n       E2 : constant Node_Id := Original_Node (Given_E2);\n       --  We always test conformance on original nodes, since it is possible\n       --  for analysis and/or expansion to make things look as though they\n       --  conform when they do not, e.g. by converting 1+2 into 3.\n \n-      function FCE (Given_E1, Given_E2 : Node_Id) return Boolean\n-        renames Fully_Conformant_Expressions;\n+      Result : Boolean;\n+      function FCE (Given_E1, Given_E2 : Node_Id) return Boolean;\n+      function FCE (Given_E1, Given_E2 : Node_Id) return Boolean is\n+      begin\n+         return Fully_Conformant_Expressions (Given_E1, Given_E2, Report);\n+      end FCE;\n \n       function FCL (L1, L2 : List_Id) return Boolean;\n       --  Compare elements of two lists for conformance. Elements have to be\n@@ -8917,6 +8922,8 @@ package body Sem_Ch6 is\n    --  Start of processing for Fully_Conformant_Expressions\n \n    begin\n+      Result := True;\n+\n       --  Nonconformant if paren count does not match. Note: if some idiot\n       --  complains that we don't do this right for more than 3 levels of\n       --  parentheses, they will be treated with the respect they deserve.\n@@ -8929,7 +8936,7 @@ package body Sem_Ch6 is\n \n       elsif Is_Entity_Name (E1) and then Is_Entity_Name (E2) then\n          if Present (Entity (E1)) then\n-            return Entity (E1) = Entity (E2)\n+            Result := Entity (E1) = Entity (E2)\n \n               --  One may be a discriminant that has been replaced by the\n               --  corresponding discriminal.\n@@ -8968,6 +8975,14 @@ package body Sem_Ch6 is\n                    and then Is_Intrinsic_Subprogram (Entity (E1))\n                    and then Is_Generic_Instance (Entity (E1))\n                    and then Entity (E2) = Alias (Entity (E1)));\n+            if Report and not Result then\n+               Error_Msg_Sloc :=\n+                 Text_Ptr'Max (Sloc (Entity (E1)), Sloc (Entity (E2)));\n+               Error_Msg_NE\n+                 (\"Meaning of& differs because of declaration#\", E1, E2);\n+            end if;\n+\n+            return Result;\n \n          elsif Nkind (E1) = N_Expanded_Name\n            and then Nkind (E2) = N_Expanded_Name"}, {"sha": "66361be322ce9f32b06ddbb32c25c5c9a02b6581", "filename": "gcc/ada/sem_ch6.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Fada%2Fsem_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Fada%2Fsem_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.ads?ref=5f531feff7ed6651354ed5b1cbd2a83cf204d170", "patch": "@@ -172,7 +172,8 @@ package Sem_Ch6 is\n \n    function Fully_Conformant_Expressions\n      (Given_E1 : Node_Id;\n-      Given_E2 : Node_Id) return Boolean;\n+      Given_E2 : Node_Id;\n+      Report   : Boolean := False) return Boolean;\n    --  Determines if two (non-empty) expressions are fully conformant\n    --  as defined by (RM 6.3.1(18-21))\n "}, {"sha": "daae085b1a96e771fb01200d2351e4d38c124564", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5f531feff7ed6651354ed5b1cbd2a83cf204d170", "patch": "@@ -1,3 +1,10 @@\n+2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/aspect1.adb, gnat.dg/aspect1_horizontal.adb,\n+\tgnat.dg/aspect1_horizontal.ads, gnat.dg/aspect1_vectors_2d.ads:\n+\tNew testcase.\n+\t* gnat.dg/static_pred1.adb: Expect an error message.\n+\n 2018-12-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR lto/86004"}, {"sha": "01dba4e9aeb07a46f9ec2c2db3dc83f1c08fa308", "filename": "gcc/testsuite/gnat.dg/aspect1.adb", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Ftestsuite%2Fgnat.dg%2Faspect1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Ftestsuite%2Fgnat.dg%2Faspect1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faspect1.adb?ref=5f531feff7ed6651354ed5b1cbd2a83cf204d170", "patch": "@@ -0,0 +1,13 @@\n+--  { dg-do compile }\n+\n+with Aspect1_Horizontal;\n+with Aspect1_Vectors_2D;\n+\n+procedure Aspect1 is\n+   type Speed is new Float;\n+   package Distances is new Aspect1_Vectors_2D (Float);\n+   package Velocities is new Aspect1_Vectors_2D (Speed);\n+   package Motion is new Aspect1_Horizontal (Distances, Velocities);\n+begin\n+   null;\n+end;"}, {"sha": "b5b0cf795bfed0da5d1c8425a52282fb27e5dec6", "filename": "gcc/testsuite/gnat.dg/aspect1_horizontal.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Ftestsuite%2Fgnat.dg%2Faspect1_horizontal.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Ftestsuite%2Fgnat.dg%2Faspect1_horizontal.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faspect1_horizontal.adb?ref=5f531feff7ed6651354ed5b1cbd2a83cf204d170", "patch": "@@ -0,0 +1,9 @@\n+package body Aspect1_Horizontal is\n+   function Theta_D(s: Position_2d_Pkg.Vect2; nzv: Speed_2d_Pkg.Nz_vect2)\n+      return float\n+   is\n+        a: constant float := 0.0;\n+   begin\n+      return 0.0;\n+   end Theta_D;\n+end Aspect1_Horizontal;"}, {"sha": "3437271ec3ba15946b5bdde0a778f0ddab378a33", "filename": "gcc/testsuite/gnat.dg/aspect1_horizontal.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Ftestsuite%2Fgnat.dg%2Faspect1_horizontal.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Ftestsuite%2Fgnat.dg%2Faspect1_horizontal.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faspect1_horizontal.ads?ref=5f531feff7ed6651354ed5b1cbd2a83cf204d170", "patch": "@@ -0,0 +1,9 @@\n+with Aspect1_Vectors_2D;\n+\n+generic\n+   with package Position_2d_Pkg is new Aspect1_Vectors_2D (<>);\n+   with package Speed_2d_Pkg is new Aspect1_Vectors_2D (<>);\n+package Aspect1_Horizontal is\n+   function Theta_D(s: Position_2d_Pkg.Vect2; nzv: Speed_2d_Pkg.Nz_vect2)\n+      return float;\n+end Aspect1_Horizontal;"}, {"sha": "dfcc9d9424eed17c6bf027ded871afcb8801e346", "filename": "gcc/testsuite/gnat.dg/aspect1_vectors_2d.ads", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Ftestsuite%2Fgnat.dg%2Faspect1_vectors_2d.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Ftestsuite%2Fgnat.dg%2Faspect1_vectors_2d.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faspect1_vectors_2d.ads?ref=5f531feff7ed6651354ed5b1cbd2a83cf204d170", "patch": "@@ -0,0 +1,16 @@\n+generic\n+   type T_horizontal is new float;\n+\n+-- Declaration of types, constants, and common functions on 3D vectors.\n+-- Corresponds to PVS theory vectors/vectors_2D\n+package Aspect1_Vectors_2D is\n+\n+   -- A 2D vector, represented by an x and a y coordinate.\n+   type Vect2 is record\n+      x: T_horizontal;\n+      y: T_horizontal;\n+   end record;\n+\n+   subtype Nz_vect2 is Vect2\n+     with Predicate => (Nz_vect2.x /= 0.0 and then Nz_Vect2.y /= 0.0);\n+end Aspect1_Vectors_2D;"}, {"sha": "5b32a5ca5091eb7f6a1208491bd43d616071e8a3", "filename": "gcc/testsuite/gnat.dg/static_pred1.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Ftestsuite%2Fgnat.dg%2Fstatic_pred1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f531feff7ed6651354ed5b1cbd2a83cf204d170/gcc%2Ftestsuite%2Fgnat.dg%2Fstatic_pred1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fstatic_pred1.adb?ref=5f531feff7ed6651354ed5b1cbd2a83cf204d170", "patch": "@@ -8,7 +8,7 @@ package body Static_Pred1 is\n      Enum_Subrange in A | C;\n \n    function \"not\" (Kind : Enum_Subrange) return Enum_Subrange is\n-     (case Kind is\n+     (case Kind is -- { dg-error \"missing case value: \\\"B\\\"\" }\n       when A => C,\n       when C => A);\n "}]}