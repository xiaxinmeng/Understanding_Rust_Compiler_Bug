{"sha": "98ce9490b067e497a7ec904d2695ecd30af71bc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThjZTk0OTBiMDY3ZTQ5N2E3ZWM5MDRkMjY5NWVjZDMwYWY3MWJjOA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-02-18T21:16:20Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-02-18T21:16:20Z"}, "message": "Add fstdarg-opt\n\n2015-02-18  Tom de Vries  <tom@codesourcery.com>\n\n\t* common.opt (fstdarg-opt): New option.\n\t* tree-stdarg.c (pass_stdarg::gate): Use flag_stdarg_opt.\n\t* doc/invoke.texi (@item Optimization Options): Add -fstdarg-opt.\n\t(@item -fstdarg-opt): New item.\n\nFrom-SVN: r220800", "tree": {"sha": "df2082a9f5431c20971b2171803a45b082dc597f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df2082a9f5431c20971b2171803a45b082dc597f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98ce9490b067e497a7ec904d2695ecd30af71bc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ce9490b067e497a7ec904d2695ecd30af71bc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ce9490b067e497a7ec904d2695ecd30af71bc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ce9490b067e497a7ec904d2695ecd30af71bc8/comments", "author": null, "committer": null, "parents": [{"sha": "b06684b7abac241bb181ded2d045662086f53993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b06684b7abac241bb181ded2d045662086f53993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b06684b7abac241bb181ded2d045662086f53993"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "4919a5f2ddb32ad656cef304f2e9ccc8d063eb57", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ce9490b067e497a7ec904d2695ecd30af71bc8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ce9490b067e497a7ec904d2695ecd30af71bc8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98ce9490b067e497a7ec904d2695ecd30af71bc8", "patch": "@@ -1,3 +1,10 @@\n+2015-02-18  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* common.opt (fstdarg-opt): New option.\n+\t* tree-stdarg.c (pass_stdarg::gate): Use flag_stdarg_opt.\n+\t* doc/invoke.texi (@item Optimization Options): Add -fstdarg-opt.\n+\t(@item -fstdarg-opt): New item.\n+\n 2015-02-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/65064"}, {"sha": "4fa12f5fa3813167312b0ad2c24e79bb8eb7859c", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ce9490b067e497a7ec904d2695ecd30af71bc8/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ce9490b067e497a7ec904d2695ecd30af71bc8/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=98ce9490b067e497a7ec904d2695ecd30af71bc8", "patch": "@@ -2069,6 +2069,10 @@ fssa-phiopt\n Common Report Var(flag_ssa_phiopt) Optimization\n Optimize conditional patterns using SSA PHI nodes\n \n+fstdarg-opt\n+Common Report Var(flag_stdarg_opt) Init(1) Optimization\n+Optimize amount of stdarg registers saved to stack at start of function\n+\n fvariable-expansion-in-unroller\n Common Report Var(flag_variable_expansion_in_unroller) Optimization\n Apply variable expansion when loops are unrolled"}, {"sha": "ef4cc75ba5d5abed2a40a8e50f346d6498b4bae7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ce9490b067e497a7ec904d2695ecd30af71bc8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ce9490b067e497a7ec904d2695ecd30af71bc8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=98ce9490b067e497a7ec904d2695ecd30af71bc8", "patch": "@@ -430,7 +430,7 @@ Objective-C and Objective-C++ Dialects}.\n -fshrink-wrap -fsignaling-nans -fsingle-precision-constant @gol\n -fsplit-ivs-in-unroller -fsplit-wide-types -fssa-phiopt @gol\n -fstack-protector -fstack-protector-all -fstack-protector-strong @gol\n--fstack-protector-explicit -fstrict-aliasing @gol\n+-fstack-protector-explicit -fstdarg-opt -fstrict-aliasing @gol\n -fstrict-overflow -fthread-jumps -ftracer -ftree-bit-ccp @gol\n -ftree-builtin-call-dce -ftree-ccp -ftree-ch @gol\n -ftree-coalesce-inline-vars -ftree-coalesce-vars -ftree-copy-prop @gol\n@@ -9867,6 +9867,11 @@ references to local frame addresses.\n Like @option{-fstack-protector} but only protects those functions which\n have the @code{stack_protect} attribute\n \n+@item -fstdarg-opt\n+@opindex fstdarg-opt\n+Optimize the prologue of variadic argument functions with respect to usage of\n+those arguments.\n+\n @item -fsection-anchors\n @opindex fsection-anchors\n Try to reduce the number of symbolic address calculations by using"}, {"sha": "17d51a20fd31458cc05a071994c56415ee15625a", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ce9490b067e497a7ec904d2695ecd30af71bc8/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ce9490b067e497a7ec904d2695ecd30af71bc8/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=98ce9490b067e497a7ec904d2695ecd30af71bc8", "patch": "@@ -704,8 +704,9 @@ class pass_stdarg : public gimple_opt_pass\n   /* opt_pass methods: */\n   virtual bool gate (function *fun)\n     {\n-      /* This optimization is only for stdarg functions.  */\n-      return fun->stdarg != 0;\n+      return (flag_stdarg_opt\n+\t      /* This optimization is only for stdarg functions.  */\n+\t      && fun->stdarg != 0);\n     }\n \n   virtual unsigned int execute (function *);"}]}