{"sha": "4e2238672f5baf99c32eebc33ed85040a0e9ca98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUyMjM4NjcyZjViYWY5OWMzMmVlYmMzM2VkODUwNDBhMGU5Y2E5OA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-03-02T11:09:52Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-03-02T11:09:52Z"}, "message": "typeck.c (common_base_type): Delete unused function.\n\n2007-03-02  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\t* typeck.c (common_base_type): Delete unused function.\n\nFrom-SVN: r122472", "tree": {"sha": "47bfbd6ef6b5e5a466f884466988ae86f19e574c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47bfbd6ef6b5e5a466f884466988ae86f19e574c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e2238672f5baf99c32eebc33ed85040a0e9ca98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e2238672f5baf99c32eebc33ed85040a0e9ca98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e2238672f5baf99c32eebc33ed85040a0e9ca98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e2238672f5baf99c32eebc33ed85040a0e9ca98/comments", "author": null, "committer": null, "parents": [{"sha": "7ac5faca9750f3af73582759d6777268e9d709bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac5faca9750f3af73582759d6777268e9d709bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ac5faca9750f3af73582759d6777268e9d709bf"}], "stats": {"total": 58, "additions": 4, "deletions": 54}, "files": [{"sha": "8b19a86fc3aeac53503197a08a510f5add553aae", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2238672f5baf99c32eebc33ed85040a0e9ca98/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2238672f5baf99c32eebc33ed85040a0e9ca98/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4e2238672f5baf99c32eebc33ed85040a0e9ca98", "patch": "@@ -1,3 +1,7 @@\n+2007-03-02  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* typeck.c (common_base_type): Delete unused function.\n+\t\n 2007-03-01  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* Make-lang.in: Add dummy lang.install-pdf target."}, {"sha": "81fe195f2697372c200638be9a0869167c72bfa8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2238672f5baf99c32eebc33ed85040a0e9ca98/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2238672f5baf99c32eebc33ed85040a0e9ca98/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4e2238672f5baf99c32eebc33ed85040a0e9ca98", "patch": "@@ -53,7 +53,6 @@ static tree rationalize_conditional_expr (enum tree_code, tree);\n static int comp_ptr_ttypes_real (tree, tree, int);\n static bool comp_except_types (tree, tree, bool);\n static bool comp_array_types (tree, tree, bool);\n-static tree common_base_type (tree, tree);\n static tree pointer_diff (tree, tree, tree);\n static tree get_delta_difference (tree, tree, bool, bool);\n static void casts_away_constness_r (tree *, tree *);\n@@ -1196,59 +1195,6 @@ comp_cv_qual_signature (tree type1, tree type2)\n   else\n     return 0;\n }\n-\n-/* If two types share a common base type, return that basetype.\n-   If there is not a unique most-derived base type, this function\n-   returns ERROR_MARK_NODE.  */\n-\n-static tree\n-common_base_type (tree tt1, tree tt2)\n-{\n-  tree best = NULL_TREE;\n-  int i;\n-\n-  /* If one is a baseclass of another, that's good enough.  */\n-  if (UNIQUELY_DERIVED_FROM_P (tt1, tt2))\n-    return tt1;\n-  if (UNIQUELY_DERIVED_FROM_P (tt2, tt1))\n-    return tt2;\n-\n-  /* Otherwise, try to find a unique baseclass of TT1\n-     that is shared by TT2, and follow that down.  */\n-  for (i = BINFO_N_BASE_BINFOS (TYPE_BINFO (tt1))-1; i >= 0; i--)\n-    {\n-      tree basetype = BINFO_TYPE (BINFO_BASE_BINFO (TYPE_BINFO (tt1), i));\n-      tree trial = common_base_type (basetype, tt2);\n-\n-      if (trial)\n-\t{\n-\t  if (trial == error_mark_node)\n-\t    return trial;\n-\t  if (best == NULL_TREE)\n-\t    best = trial;\n-\t  else if (best != trial)\n-\t    return error_mark_node;\n-\t}\n-    }\n-\n-  /* Same for TT2.  */\n-  for (i = BINFO_N_BASE_BINFOS (TYPE_BINFO (tt2))-1; i >= 0; i--)\n-    {\n-      tree basetype = BINFO_TYPE (BINFO_BASE_BINFO (TYPE_BINFO (tt2), i));\n-      tree trial = common_base_type (tt1, basetype);\n-\n-      if (trial)\n-\t{\n-\t  if (trial == error_mark_node)\n-\t    return trial;\n-\t  if (best == NULL_TREE)\n-\t    best = trial;\n-\t  else if (best != trial)\n-\t    return error_mark_node;\n-\t}\n-    }\n-  return best;\n-}\n \f\n /* Subroutines of `comptypes'.  */\n "}]}