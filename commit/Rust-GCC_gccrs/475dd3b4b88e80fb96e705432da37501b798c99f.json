{"sha": "475dd3b4b88e80fb96e705432da37501b798c99f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc1ZGQzYjRiODhlODBmYjk2ZTcwNTQzMmRhMzc1MDFiNzk4Yzk5Zg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T21:04:47Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T21:04:47Z"}, "message": "(ASM_OUTPUT_DOUBLE, ASM_OUTPUT_FLOAT, PRINT_OPERAND_FLOAT)\n\n(ASM_OUTPUT_DOUBLE, ASM_OUTPUT_FLOAT, PRINT_OPERAND_FLOAT)\n(PRINT_OPERAND): Use new REAL_VALUE... macros.\n(ASM_OUTPUT_LONG_DOUBLE): New macro.\n\nFrom-SVN: r3969", "tree": {"sha": "4e64fec5484500eccc170a80b28c9cfa7755bf8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e64fec5484500eccc170a80b28c9cfa7755bf8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/475dd3b4b88e80fb96e705432da37501b798c99f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/475dd3b4b88e80fb96e705432da37501b798c99f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/475dd3b4b88e80fb96e705432da37501b798c99f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/475dd3b4b88e80fb96e705432da37501b798c99f/comments", "author": null, "committer": null, "parents": [{"sha": "579f50b6c581a59c82d265bcfab116b493dcaea3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/579f50b6c581a59c82d265bcfab116b493dcaea3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/579f50b6c581a59c82d265bcfab116b493dcaea3"}], "stats": {"total": 83, "additions": 44, "deletions": 39}, "files": [{"sha": "8714ed65b72059570f45974cc7c42b1e74e8a627", "filename": "gcc/config/m68k/hp320.h", "status": "modified", "additions": 44, "deletions": 39, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/475dd3b4b88e80fb96e705432da37501b798c99f/gcc%2Fconfig%2Fm68k%2Fhp320.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/475dd3b4b88e80fb96e705432da37501b798c99f/gcc%2Fconfig%2Fm68k%2Fhp320.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp320.h?ref=475dd3b4b88e80fb96e705432da37501b798c99f", "patch": "@@ -345,30 +345,25 @@ do{  if (PREFIX[0] == 'L' && PREFIX[1] == 'I')\t\t\\\n     fprintf (FILE, \"%s%d:\\n\", PREFIX, NUM);\t\t\\\n } while(0)\n \n-#define ASM_OUTPUT_DOUBLE(FILE, VALUE)\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tdouble 0f%.20g\\n\", (VALUE))\n-\n-#define ASM_OUTPUT_FLOAT(FILE, VALUE)\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tfloat 0f%.9g\\n\", (VALUE))\n-\n-#ifdef AS_BUG_FLOATING_CONSTANT\n-#undef  ASM_OUTPUT_DOUBLE_OPERAND\n-#define ASM_OUTPUT_DOUBLE_OPERAND(FILE, VALUE)                  \\\n-  do {\t\t\t\t\t\t\t\t\\\n-    union { double d; int i[2]; } dummy_u;\t\t\t\\\n-    dummy_u.d = (VALUE);\t\t\t\t\t\\\n-    asm_fprintf (FILE, \"%I0x%x%08x\", dummy_u.i[0], dummy_u.i[1]); \\\n-  } while (0)\n-\n-#undef  ASM_OUTPUT_FLOAT_OPERAND\n-#define ASM_OUTPUT_FLOAT_OPERAND(FILE, VALUE)                   \\\n-  do {\t\t\t\t\t\t\t\t\\\n-    union { float f; int i; } dummy_u;\t\t\t\t\\\n-    dummy_u.f = (VALUE);\t\t\t\t\t\\\n-    asm_fprintf (FILE, \"%I0x%08x\", dummy_u.i);\t\t\t\\\n-  } while (0)\n-#endif /* AS_BUG_FLOATING_CONSTANT */\n-\n+#define ASM_OUTPUT_DOUBLE(FILE, VALUE)\t\t\t\\\n+  do { char dstr[30];\t\t\t\t\t\\\n+       REAL_VALUE_TO_DECIMAL (VALUE, \"%.20g\", dstr);\t\\\n+       fprintf (FILE, \"\\tdouble 0f%s\\n\", dstr);\t\t\\\n+     } while (0)\n+\n+#define ASM_OUTPUT_FLOAT(FILE, VALUE)\t\t\t\\\n+  do { char dstr[30];\t\t\t\t\t\\\n+       REAL_VALUE_TO_DECIMAL (VALUE, \"%.9g\", dstr);\t\\\n+       fprintf (FILE, \"\\tfloat 0f%s\\n\", dstr);\t\t\\\n+     } while (0)\n+\n+#undef ASM_OUTPUT_LONG_DOUBLE\n+#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\t\\\n+do { long l[3];\t\t\t\t\t\t\t\t\\\n+     REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\t\\\n+     fprintf (FILE, \"\\tlong 0x%x,0x%x,0x%x\\n\", l[0], l[1], l[2]);\t\\\n+   } while (0)\n+  \n /* This is how to output an assembler line defining an `int' constant.  */\n \n #define ASM_OUTPUT_INT(FILE,VALUE)  \\\n@@ -412,14 +407,20 @@ do{  if (PREFIX[0] == 'L' && PREFIX[1] == 'I')\t\t\\\n #define ASM_OUTPUT_SOURCE_LINE(FILE, LINENO)\n \n #ifdef AS_BUG_FLOATING_CONSTANT\n-#define PRINT_OPERAND_FLOAT(FILE,CODE,FLOAT,INT)\t\\\n-  fprintf (FILE, \"&0x%x\", (INT))\n+#define PRINT_OPERAND_FLOAT(CODE,FILE,VALUE,INT)\t\\\n+ do { REAL_VALUE_TO_TARGET_SINGLE (VALUE, INT);\t\t\\\n+      fprintf (FILE, \"&0x%x\", INT); } while (0)\n #else\n-#define PRINT_OPERAND_FLOAT(FILE,CODE,FLOAT,INT)\t\\\n-  if (CODE == 'f')\t\t\t\t\t\\\n-    fprintf (FILE, \"&0f%.9g\", (FLOAT));\t\t\t\\\n-  else\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"&0x%x\", (INT))\n+#define PRINT_OPERAND_FLOAT(CODE,FILE,VALUE,INT)\t\\\n+ do { if (CODE == 'f')\t\t\t\t\t\\\n+        { char dstr[30];\t\t\t\t\\\n+          REAL_VALUE_TO_DECIMAL (VALUE, \"%.9g\", dstr);\t\\\n+          fprintf (FILE, \"&0f%s\", dstr);\t\t\\\n+        }\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\\\n+        {\t\t\t\t\t\t\\\n+          REAL_VALUE_TO_TARGET_SINGLE (VALUE, INT);\t\\\n+          fprintf (FILE, \"&0x%x\", INT); } } while (0)\n #endif /* AS_BUG_FLOATING_CONSTANT */\n \n #define PRINT_OPERAND(FILE, X, CODE)  \\\n@@ -436,15 +437,19 @@ do{  if (PREFIX[0] == 'L' && PREFIX[1] == 'I')\t\t\\\n   else if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n     output_address (XEXP (X, 0));\t\t\t\t\t\\\n   else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == SFmode)\t\\\n-    { union { double d; int i[2]; } u;\t\t\t\t\t\\\n-      union { float f; int i; } u1;\t\t\t\t\t\\\n-      u.i[0] = CONST_DOUBLE_LOW (X); u.i[1] = CONST_DOUBLE_HIGH (X);\t\\\n-      u1.f = u.d;\t\t\t\t\t\t\t\\\n-      PRINT_OPERAND_FLOAT (FILE,CODE, u1.f, u1.i); }\t\t\t\\\n+    { REAL_VALUE_TYPE r;  long l;\t\t\t\t\t\\\n+      REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n+      PRINT_OPERAND_FLOAT (CODE, FILE, r, l); }\t\t\t\t\\\n   else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == DFmode)\t\\\n-    { union { double d; int i[2]; } u;\t\t\t\t\t\\\n-      u.i[0] = CONST_DOUBLE_LOW (X); u.i[1] = CONST_DOUBLE_HIGH (X);\t\\\n-      fprintf (FILE, \"&0f%.20g\", u.d); }\t\t\t\t\\\n+    { REAL_VALUE_TYPE r;  char dstr[30];\t\t\t\t\\\n+      REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n+      REAL_VALUE_TO_DECIMAL (r, \"%.20g\", dstr);\t\t\t\t\\\n+      fprintf (FILE, \"&0f%s\", dstr); }\t\t\t\t\t\\\n+  else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == XFmode)\t\\\n+    { REAL_VALUE_TYPE r;  char dstr[30];\t\t\t\t\\\n+      REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n+      REAL_VALUE_TO_DECIMAL (r, \"%.20g\", dstr);\t\t\t\t\\\n+      fprintf (FILE, \"&0f%s\", dstr); }\t\t\t\t\t\\\n   else { putc ('&', FILE); output_addr_const (FILE, X); }}\n \n #define PRINT_OPERAND_ADDRESS(FILE, ADDR)  \\"}]}