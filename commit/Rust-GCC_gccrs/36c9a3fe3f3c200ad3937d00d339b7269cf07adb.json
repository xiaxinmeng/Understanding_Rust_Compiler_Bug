{"sha": "36c9a3fe3f3c200ad3937d00d339b7269cf07adb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZjOWEzZmUzZjNjMjAwYWQzOTM3ZDAwZDMzOWI3MjY5Y2YwN2FkYg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-12-15T09:36:00Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-12-15T21:20:35Z"}, "message": "d: Fix ICE in gimplify_expr, at gimplify.c (PR98277)\n\nThe DMD front-end shouldn't, but can sometimes leak manifest constants\nin the AST passed to the code generator.  To prevent this being an\nissue, the setting of DECL_INITIAL has been moved to the point where the\nCONST_DECL is used, rather than in the declaration handler.\n\ngcc/d/ChangeLog:\n\n\tPR d/98277\n\t* decl.cc (DeclVisitor::visit (VarDeclaration *)): Move setting of\n\tDECL_INITIAL for manifest constants to ...\n\t(get_symbol_decl): ... here.\n\ngcc/testsuite/ChangeLog:\n\n\tPR d/98277\n\t* gdc.dg/pr98277.d: New test.", "tree": {"sha": "abd2c0a815ceee858b2a12f257ff6daec547af4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abd2c0a815ceee858b2a12f257ff6daec547af4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36c9a3fe3f3c200ad3937d00d339b7269cf07adb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c9a3fe3f3c200ad3937d00d339b7269cf07adb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36c9a3fe3f3c200ad3937d00d339b7269cf07adb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c9a3fe3f3c200ad3937d00d339b7269cf07adb/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34c7d3d3b216d674192678443bcfd379ec575d9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34c7d3d3b216d674192678443bcfd379ec575d9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34c7d3d3b216d674192678443bcfd379ec575d9f"}], "stats": {"total": 56, "additions": 35, "deletions": 21}, "files": [{"sha": "a3db4ae6d8949b1e0aeed114257a2085117d463d", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c9a3fe3f3c200ad3937d00d339b7269cf07adb/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c9a3fe3f3c200ad3937d00d339b7269cf07adb/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=36c9a3fe3f3c200ad3937d00d339b7269cf07adb", "patch": "@@ -653,31 +653,13 @@ class DeclVisitor : public Visitor\n \treturn;\n       }\n \n-    /* Do not store variables we cannot take the address of,\n-       but keep the values for purposes of debugging.  */\n     if (!d->canTakeAddressOf ())\n       {\n-\t/* Don't know if there is a good way to handle instantiations.  */\n-\tif (d->isInstantiated ())\n-\t  return;\n-\n-\t/* Cannot make an expression out of a void initializer.  */\n-\tif (!d->_init || d->_init->isVoidInitializer ())\n-\t  return;\n-\n-\ttree decl = get_symbol_decl (d);\n-\tExpression *ie = initializerToExpression (d->_init);\n-\n-\t/* CONST_DECL was initially intended for enumerals and may be used for\n-\t   scalars in general, but not for aggregates.  Here a non-constant\n-\t   value is generated anyway so as the CONST_DECL only serves as a\n-\t   placeholder for the value, however the DECL itself should never be\n-\t   referenced in any generated code, or passed to the back-end.  */\n+\t/* Do not store variables we cannot take the address of,\n+\t   but keep the values for purposes of debugging.  */\n \tif (!d->type->isscalar ())\n-\t  DECL_INITIAL (decl) = build_expr (ie, false);\n-\telse\n \t  {\n-\t    DECL_INITIAL (decl) = build_expr (ie, true);\n+\t    tree decl = get_symbol_decl (d);\n \t    d_pushdecl (decl);\n \t    rest_of_decl_compilation (decl, 1, 0);\n \t  }\n@@ -1106,6 +1088,25 @@ get_symbol_decl (Declaration *decl)\n \n       if (vd->storage_class & STCextern)\n \tDECL_EXTERNAL (decl->csym) = 1;\n+\n+      /* CONST_DECL was initially intended for enumerals and may be used for\n+\t scalars in general, but not for aggregates.  Here a non-constant\n+\t value is generated anyway so as the CONST_DECL only serves as a\n+\t placeholder for the value, however the DECL itself should never be\n+\t referenced in any generated code, or passed to the back-end.  */\n+      if (vd->storage_class & STCmanifest)\n+\t{\n+\t  /* Cannot make an expression out of a void initializer.  */\n+\t  if (vd->_init && !vd->_init->isVoidInitializer ())\n+\t    {\n+\t      Expression *ie = initializerToExpression (vd->_init);\n+\n+\t      if (!vd->type->isscalar ())\n+\t\tDECL_INITIAL (decl->csym) = build_expr (ie, false);\n+\t      else\n+\t\tDECL_INITIAL (decl->csym) = build_expr (ie, true);\n+\t    }\n+\t}\n     }\n \n   /* Set the declaration mangled identifier if static.  */"}, {"sha": "d3b859fcbda2268d8a2198737a9e2f51007e3fa3", "filename": "gcc/testsuite/gdc.dg/pr98277.d", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c9a3fe3f3c200ad3937d00d339b7269cf07adb/gcc%2Ftestsuite%2Fgdc.dg%2Fpr98277.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c9a3fe3f3c200ad3937d00d339b7269cf07adb/gcc%2Ftestsuite%2Fgdc.dg%2Fpr98277.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr98277.d?ref=36c9a3fe3f3c200ad3937d00d339b7269cf07adb", "patch": "@@ -0,0 +1,13 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98277\n+// { dg-do compile }\n+\n+enum Side\n+{\n+    left,\n+    right\n+}\n+\n+ref int getSide(Side side, ref int left, ref int right)\n+{\n+    return side == Side.left ? left : right;\n+}"}]}