{"sha": "7bf9a5ac1c5310efed24c42eab522e4e9ade1933", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JmOWE1YWMxYzUzMTBlZmVkMjRjNDJlYWI1MjJlNGU5YWRlMTkzMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-05-12T14:54:09Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-05-12T14:54:09Z"}, "message": "trans.c (call_to_gnu): In the by-reference case...\n\n\t* gcc-interface/trans.c (call_to_gnu): In the by-reference case, if the\n\ttype of the parameter is an unconstrained array, convert the actual to\n\tthe type of the formal in the In Out and Out cases as well.\n\nFrom-SVN: r173706", "tree": {"sha": "3df342877a3a9a3b2cf6eef779b339e65eea49b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3df342877a3a9a3b2cf6eef779b339e65eea49b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bf9a5ac1c5310efed24c42eab522e4e9ade1933", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf9a5ac1c5310efed24c42eab522e4e9ade1933", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bf9a5ac1c5310efed24c42eab522e4e9ade1933", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf9a5ac1c5310efed24c42eab522e4e9ade1933/comments", "author": null, "committer": null, "parents": [{"sha": "61332f77748bd6ea8cb59c15f08a48466940ac95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61332f77748bd6ea8cb59c15f08a48466940ac95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61332f77748bd6ea8cb59c15f08a48466940ac95"}], "stats": {"total": 69, "additions": 65, "deletions": 4}, "files": [{"sha": "420193935713287f25171d88dfe696dc996d0eb6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf9a5ac1c5310efed24c42eab522e4e9ade1933/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf9a5ac1c5310efed24c42eab522e4e9ade1933/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7bf9a5ac1c5310efed24c42eab522e4e9ade1933", "patch": "@@ -1,3 +1,9 @@\n+2011-05-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (call_to_gnu): In the by-reference case, if the\n+\ttype of the parameter is an unconstrained array, convert the actual to\n+\tthe type of the formal in the In Out and Out cases as well.\n+\n 2011-05-11  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* gcc-interface/utils.c (def_fn_type): Don't call build_function_type;"}, {"sha": "6b132353250504e078df418042a27637eaea87aa", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf9a5ac1c5310efed24c42eab522e4e9ade1933/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf9a5ac1c5310efed24c42eab522e4e9ade1933/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=7bf9a5ac1c5310efed24c42eab522e4e9ade1933", "patch": "@@ -3018,12 +3018,18 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n \t  /* There is no need to convert the actual to the formal's type before\n \t     taking its address.  The only exception is for unconstrained array\n \t     types because of the way we build fat pointers.  */\n-\t  else if (TREE_CODE (gnu_formal_type) == UNCONSTRAINED_ARRAY_TYPE)\n-\t    gnu_actual = convert (gnu_formal_type, gnu_actual);\n+\t  if (TREE_CODE (gnu_formal_type) == UNCONSTRAINED_ARRAY_TYPE)\n+\t    {\n+\t      /* Put back a view conversion for In Out or Out parameters.  */\n+\t      if (Ekind (gnat_formal) != E_In_Parameter)\n+\t\tgnu_actual = convert (gnat_to_gnu_type (Etype (gnat_actual)),\n+\t\t\t\t      gnu_actual);\n+\t      gnu_actual = convert (gnu_formal_type, gnu_actual);\n+\t    }\n \n \t  /* The symmetry of the paths to the type of an entity is broken here\n \t     since arguments don't know that they will be passed by ref.  */\n-\t  gnu_formal_type = TREE_TYPE (get_gnu_tree (gnat_formal));\n+\t  gnu_formal_type = TREE_TYPE (gnu_formal);\n \n \t  if (DECL_BY_DOUBLE_REF_P (gnu_formal))\n \t    gnu_actual\n@@ -3036,7 +3042,7 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n \t       && TREE_CODE (gnu_formal) == PARM_DECL\n \t       && DECL_BY_COMPONENT_PTR_P (gnu_formal))\n \t{\n-\t  gnu_formal_type = TREE_TYPE (get_gnu_tree (gnat_formal));\n+\t  gnu_formal_type = TREE_TYPE (gnu_formal);\n \t  gnu_actual = maybe_implicit_deref (gnu_actual);\n \t  gnu_actual = maybe_unconstrained_array (gnu_actual);\n "}, {"sha": "e09ae2e91c9a9f236b56c7d84b1dd5a655f5d0f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf9a5ac1c5310efed24c42eab522e4e9ade1933/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf9a5ac1c5310efed24c42eab522e4e9ade1933/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7bf9a5ac1c5310efed24c42eab522e4e9ade1933", "patch": "@@ -1,3 +1,7 @@\n+2011-05-12  Geert Bosch  <bosch@adacore.com>\n+\n+\t* gnat.dg/view_conversion1.adb: New test.\n+\n 2011-05-12  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/48172"}, {"sha": "bb58c1b40c2836de30bdbde5378d38f51fd567e6", "filename": "gcc/testsuite/gnat.dg/view_conversion1.adb", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf9a5ac1c5310efed24c42eab522e4e9ade1933/gcc%2Ftestsuite%2Fgnat.dg%2Fview_conversion1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf9a5ac1c5310efed24c42eab522e4e9ade1933/gcc%2Ftestsuite%2Fgnat.dg%2Fview_conversion1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fview_conversion1.adb?ref=7bf9a5ac1c5310efed24c42eab522e4e9ade1933", "patch": "@@ -0,0 +1,45 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnatws\" }\n+\n+procedure View_Conversion1 is\n+\n+   type Matrix is array (Integer range <>, Integer range <>) of Float;\n+\n+   S1 : Matrix (-3 .. -2, 2 .. 3) := ((2.0, -1.0), (-1.0, 2.0));\n+   S2 : Matrix (1 .. 2, 1 .. 2) := S1;\n+   S3 : Matrix (2 .. 3, -3 .. -2);\n+   S4 : Matrix (1 .. 2, 1 .. 2);\n+\n+   function Normal_Last (A : Matrix; N : Natural) return Boolean is\n+   begin\n+      if A'Last (1) = N and then A'Last (2) = N then\n+         return True;\n+      else\n+         return False;\n+      end if;\n+   end;\n+\n+   procedure Transpose (A : Matrix; B : out Matrix) is\n+      N : constant Natural := A'Length (1);\n+      subtype Normal_Matrix is Matrix (1 .. N, 1 .. N);\n+   begin\n+      if not Normal_Last (A, N) or else not Normal_Last (B, N) then\n+         Transpose (Normal_Matrix (A), Normal_Matrix (B));\n+         return;\n+      end if;\n+\n+      for J in 1 .. N loop\n+         for K in 1 .. N loop\n+            B (J, K) := A (K, J);\n+         end loop;\n+      end loop;\n+   end;\n+\n+begin\n+   Transpose (S1, S3);\n+   Transpose (S3, S4);\n+\n+   if S4 /= S2 then\n+      raise Program_Error;\n+   end if;\n+end;"}]}