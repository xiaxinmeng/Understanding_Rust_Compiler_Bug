{"sha": "ec35ea455c30c14700dbb7a2cbbd3379e0212e96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMzNWVhNDU1YzMwYzE0NzAwZGJiN2EyY2JiZDMzNzllMDIxMmU5Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-04-06T12:42:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-04-06T12:42:24Z"}, "message": "re PR middle-end/70550 (-Wuninitialized false positives in OpenMP code)\n\n\tPR middle-end/70550\n\t* tree.h (OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT): Define.\n\t* gimplify.c (gimplify_adjust_omp_clauses_1): Set it for implicit\n\tfirstprivate clauses.\n\t* omp-low.c (lower_send_clauses): Set TREE_NO_WARNING for\n\tOMP_CLAUSE_FIRSTPRIVATE_IMPLICIT !by_ref vars in task contexts.\n\t(lower_omp_target): Set TREE_NO_WARNING for\n\tnon-addressable possibly uninitialized vars which are copied into\n\taddressable temporaries or copied for GOMP_MAP_FIRSTPRIVATE_INT.\n\n\t* c-c++-common/gomp/pr70550-1.c: New test.\n\t* c-c++-common/gomp/pr70550-2.c: New test.\n\nFrom-SVN: r234779", "tree": {"sha": "adfbb9d8a87972b13facb8bacfc7b423b26a711d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adfbb9d8a87972b13facb8bacfc7b423b26a711d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec35ea455c30c14700dbb7a2cbbd3379e0212e96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec35ea455c30c14700dbb7a2cbbd3379e0212e96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec35ea455c30c14700dbb7a2cbbd3379e0212e96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec35ea455c30c14700dbb7a2cbbd3379e0212e96/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce043b0c1ccea48a249a2d55641e46b62d9d7d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce043b0c1ccea48a249a2d55641e46b62d9d7d8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce043b0c1ccea48a249a2d55641e46b62d9d7d8f"}], "stats": {"total": 184, "additions": 182, "deletions": 2}, "files": [{"sha": "e31d7cfff05d0ad67018fd16672e4179e82dc347", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec35ea455c30c14700dbb7a2cbbd3379e0212e96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec35ea455c30c14700dbb7a2cbbd3379e0212e96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec35ea455c30c14700dbb7a2cbbd3379e0212e96", "patch": "@@ -1,3 +1,15 @@\n+2016-04-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/70550\n+\t* tree.h (OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT): Define.\n+\t* gimplify.c (gimplify_adjust_omp_clauses_1): Set it for implicit\n+\tfirstprivate clauses.\n+\t* omp-low.c (lower_send_clauses): Set TREE_NO_WARNING for\n+\tOMP_CLAUSE_FIRSTPRIVATE_IMPLICIT !by_ref vars in task contexts.\n+\t(lower_omp_target): Set TREE_NO_WARNING for\n+\tnon-addressable possibly uninitialized vars which are copied into\n+\taddressable temporaries or copied for GOMP_MAP_FIRSTPRIVATE_INT.\n+\n 2016-04-05  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/predicates.md (integer_store_memory_operand): Accept"}, {"sha": "f29d608f5eb9ea45ec56c30f08111ff2c390b8cf", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec35ea455c30c14700dbb7a2cbbd3379e0212e96/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec35ea455c30c14700dbb7a2cbbd3379e0212e96/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=ec35ea455c30c14700dbb7a2cbbd3379e0212e96", "patch": "@@ -7742,6 +7742,8 @@ gimplify_adjust_omp_clauses_1 (splay_tree_node n, void *data)\n \t   && (flags & GOVD_WRITTEN) == 0\n \t   && omp_shared_to_firstprivate_optimizable_decl_p (decl))\n     OMP_CLAUSE_SHARED_READONLY (clause) = 1;\n+  else if (code == OMP_CLAUSE_FIRSTPRIVATE && (flags & GOVD_EXPLICIT) == 0)\n+    OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT (clause) = 1;\n   else if (code == OMP_CLAUSE_MAP && (flags & GOVD_MAP_0LEN_ARRAY) != 0)\n     {\n       tree nc = build_omp_clause (input_location, OMP_CLAUSE_MAP);"}, {"sha": "52a80059ef344b685977fc7fc30dc8bd8a911a62", "filename": "gcc/omp-low.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec35ea455c30c14700dbb7a2cbbd3379e0212e96/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec35ea455c30c14700dbb7a2cbbd3379e0212e96/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=ec35ea455c30c14700dbb7a2cbbd3379e0212e96", "patch": "@@ -6107,8 +6107,15 @@ lower_send_clauses (tree clauses, gimple_seq *ilist, gimple_seq *olist,\n \n       switch (OMP_CLAUSE_CODE (c))\n \t{\n-\tcase OMP_CLAUSE_PRIVATE:\n \tcase OMP_CLAUSE_FIRSTPRIVATE:\n+\t  if (OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT (c)\n+\t      && !by_ref\n+\t      && is_task_ctx (ctx))\n+\t    TREE_NO_WARNING (var) = 1;\n+\t  do_in = true;\n+\t  break;\n+\n+\tcase OMP_CLAUSE_PRIVATE:\n \tcase OMP_CLAUSE_COPYIN:\n \tcase OMP_CLAUSE__LOOPTEMP_:\n \t  do_in = true;\n@@ -16083,7 +16090,16 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t\t|| map_kind == GOMP_MAP_POINTER\n \t\t\t|| map_kind == GOMP_MAP_TO_PSET\n \t\t\t|| map_kind == GOMP_MAP_FORCE_DEVICEPTR)\n-\t\t      gimplify_assign (avar, var, &ilist);\n+\t\t      {\n+\t\t\t/* If we need to initialize a temporary\n+\t\t\t   with VAR because it is not addressable, and\n+\t\t\t   the variable hasn't been initialized yet, then\n+\t\t\t   we'll get a warning for the store to avar.\n+\t\t\t   Don't warn in that case, the mapping might\n+\t\t\t   be implicit.  */\n+\t\t\tTREE_NO_WARNING (var) = 1;\n+\t\t\tgimplify_assign (avar, var, &ilist);\n+\t\t      }\n \t\t    avar = build_fold_addr_expr (avar);\n \t\t    gimplify_assign (x, avar, &ilist);\n \t\t    if ((GOMP_MAP_COPY_FROM_P (map_kind)\n@@ -16252,6 +16268,8 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\ttree t = var;\n \t\tif (is_reference (var))\n \t\t  t = build_simple_mem_ref (var);\n+\t\telse if (OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT (c))\n+\t\t  TREE_NO_WARNING (var) = 1;\n \t\tif (TREE_CODE (type) != POINTER_TYPE)\n \t\t  t = fold_convert (pointer_sized_int_node, t);\n \t\tt = fold_convert (TREE_TYPE (x), t);\n@@ -16263,6 +16281,8 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t      {\n \t\ttree avar = create_tmp_var (TREE_TYPE (var));\n \t\tmark_addressable (avar);\n+\t\tif (OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT (c))\n+\t\t  TREE_NO_WARNING (var) = 1;\n \t\tgimplify_assign (avar, var, &ilist);\n \t\tavar = build_fold_addr_expr (avar);\n \t\tgimplify_assign (x, avar, &ilist);"}, {"sha": "5c4b95f9381fe7b01b5eb695d31faa89a0b0fbb8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec35ea455c30c14700dbb7a2cbbd3379e0212e96/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec35ea455c30c14700dbb7a2cbbd3379e0212e96/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec35ea455c30c14700dbb7a2cbbd3379e0212e96", "patch": "@@ -1,3 +1,9 @@\n+2016-04-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/70550\n+\t* c-c++-common/gomp/pr70550-1.c: New test.\n+\t* c-c++-common/gomp/pr70550-2.c: New test.\n+\n 2016-04-05  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/70512"}, {"sha": "493d4175993cf8df38d07be7e4e5b59f5dd2ab33", "filename": "gcc/testsuite/c-c++-common/gomp/pr70550-1.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec35ea455c30c14700dbb7a2cbbd3379e0212e96/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr70550-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec35ea455c30c14700dbb7a2cbbd3379e0212e96/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr70550-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr70550-1.c?ref=ec35ea455c30c14700dbb7a2cbbd3379e0212e96", "patch": "@@ -0,0 +1,81 @@\n+/* PR middle-end/70550 */\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wuninitialized\" } */\n+\n+#ifdef __SIZEOF_INT128__\n+typedef __int128 T;\n+#else\n+typedef long long T;\n+#endif\n+\n+void bar (T);\n+#pragma omp declare target (bar)\n+\n+void\n+foo (void)\n+{\n+  {\n+    int i;\n+    #pragma omp target defaultmap(tofrom:scalar)\t/* { dg-bogus \"is used uninitialized in this function\" } */\n+    {\n+      i = 26;\n+      bar (i);\n+    }\n+  }\n+  {\n+    T j;\n+    #pragma omp target defaultmap(tofrom:scalar)\t/* { dg-bogus \"is used uninitialized in this function\" } */\n+    {\n+      j = 37;\n+      bar (j);\n+    }\n+  }\n+  {\n+    int i;\n+    #pragma omp target\t\t\t\t\t/* { dg-bogus \"is used uninitialized in this function\" } */\n+    {\n+      i = 26;\n+      bar (i);\n+    }\n+  }\n+  {\n+    T j;\n+    #pragma omp target\t\t\t\t\t/* { dg-bogus \"is used uninitialized in this function\" } */\n+    {\n+      j = 37;\n+      bar (j);\n+    }\n+  }\n+  {\n+    int i;\n+    #pragma omp target firstprivate (i)\t\t\t/* { dg-warning \"is used uninitialized in this function\" } */\n+    {\n+      i = 26;\n+      bar (i);\n+    }\n+  }\n+  {\n+    T j;\n+    #pragma omp target firstprivate (j)\t\t\t/* { dg-warning \"is used uninitialized in this function\" } */\n+    {\n+      j = 37;\n+      bar (j);\n+    }\n+  }\n+  {\n+    int i;\n+    #pragma omp target private (i)\t\t\t/* { dg-bogus \"is used uninitialized in this function\" } */\n+    {\n+      i = 26;\n+      bar (i);\n+    }\n+  }\n+  {\n+    T j;\n+    #pragma omp target private (j)\t\t\t/* { dg-bogus \"is used uninitialized in this function\" } */\n+    {\n+      j = 37;\n+      bar (j);\n+    }\n+  }\n+}"}, {"sha": "31c34da4711e7102bb873f8f006f3650652df8f3", "filename": "gcc/testsuite/c-c++-common/gomp/pr70550-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec35ea455c30c14700dbb7a2cbbd3379e0212e96/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr70550-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec35ea455c30c14700dbb7a2cbbd3379e0212e96/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr70550-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr70550-2.c?ref=ec35ea455c30c14700dbb7a2cbbd3379e0212e96", "patch": "@@ -0,0 +1,55 @@\n+/* PR middle-end/70550 */\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wuninitialized\" } */\n+\n+void bar (int);\n+\n+void\n+foo (void)\n+{\n+  int i, j, k, l, m, n, o, p, q;\n+  #pragma omp task\t\t\t\t/* { dg-bogus \"is used uninitialized in this function\" } */\n+  {\n+    i = 2;\n+    bar (i);\n+  }\n+  #pragma omp taskloop\t\t\t\t/* { dg-bogus \"is used uninitialized in this function\" } */\n+  for (j = 0; j < 10; j++)\n+    {\n+      k = 7;\n+      bar (k);\n+    }\n+  #pragma omp task firstprivate (l)\t\t/* { dg-warning \"is used uninitialized in this function\" } */\n+  {\n+    l = 2;\n+    bar (l);\n+  }\n+  #pragma omp taskloop firstprivate (m)\t\t/* { dg-warning \"is used uninitialized in this function\" } */\n+  for (j = 0; j < 10; j++)\n+    {\n+      m = 7;\n+      bar (m);\n+    }\n+  #pragma omp task shared (n)\t\t\t/* { dg-bogus \"is used uninitialized in this function\" } */\n+  {\n+    n = 2;\n+    bar (n);\n+  }\n+  #pragma omp taskloop shared (o)\t\t/* { dg-bogus \"is used uninitialized in this function\" } */\n+  for (j = 0; j < 10; j++)\n+    {\n+      o = 7;\n+      bar (o);\n+    }\n+  #pragma omp task private (p)\t\t\t/* { dg-bogus \"is used uninitialized in this function\" } */\n+  {\n+    p = 2;\n+    bar (p);\n+  }\n+  #pragma omp taskloop shared (q)\t\t/* { dg-bogus \"is used uninitialized in this function\" } */\n+  for (j = 0; j < 10; j++)\n+    {\n+      q = 7;\n+      bar (q);\n+    }\n+}"}, {"sha": "fa705967e13df4d01a96d2b40c819ae5bb2dbdf6", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec35ea455c30c14700dbb7a2cbbd3379e0212e96/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec35ea455c30c14700dbb7a2cbbd3379e0212e96/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ec35ea455c30c14700dbb7a2cbbd3379e0212e96", "patch": "@@ -1430,6 +1430,10 @@ extern void protected_set_expr_location (tree, location_t);\n #define OMP_CLAUSE_PRIVATE_TASKLOOP_IV(NODE) \\\n   TREE_PROTECTED (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_PRIVATE))\n \n+/* True on a FIRSTPRIVATE clause if it has been added implicitly.  */\n+#define OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT(NODE) \\\n+  (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_FIRSTPRIVATE)->base.public_flag)\n+\n /* True on a LASTPRIVATE clause if a FIRSTPRIVATE clause for the same\n    decl is present in the chain.  */\n #define OMP_CLAUSE_LASTPRIVATE_FIRSTPRIVATE(NODE) \\"}]}