{"sha": "0c45b8e0733816401db93ce0aea47c05cba04e1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM0NWI4ZTA3MzM4MTY0MDFkYjkzY2UwYWVhNDdjMDVjYmEwNGUxZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-03-17T18:44:44Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-03-17T18:44:44Z"}, "message": "[multiple changes]\n\n\n2003-03-17  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/Makefile.am (CLEANFILES): Add tmp*.\n\t* testsuite/Makefile.in: Regenerate.\n\t* testsuite/27_io/filebuf_members.cc: Consistently name tmp files.\n\tCleanups.\n\n2003-03-17  Petur Runolfsson  <peturr02@ru.is>\n\n        PR libstdc++/9964\n        * include/bits/fstream.tcc (basic_filebuf::close):\n        Always close file, even when write fails.\n        * testsuite/27_io/filebuf_members.cc (test_07):  New test.\n\nFrom-SVN: r64498", "tree": {"sha": "1065cd00ca2e851f1e2ca0f68e3685c8670e7020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1065cd00ca2e851f1e2ca0f68e3685c8670e7020"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c45b8e0733816401db93ce0aea47c05cba04e1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c45b8e0733816401db93ce0aea47c05cba04e1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c45b8e0733816401db93ce0aea47c05cba04e1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c45b8e0733816401db93ce0aea47c05cba04e1f/comments", "author": null, "committer": null, "parents": [{"sha": "aa40083db969e08c9841bfd4ff3e9021f7fa3a9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa40083db969e08c9841bfd4ff3e9021f7fa3a9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa40083db969e08c9841bfd4ff3e9021f7fa3a9d"}], "stats": {"total": 130, "additions": 94, "deletions": 36}, "files": [{"sha": "555c135cdf927af0b26f56d43e1a877bcf367cd1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c45b8e0733816401db93ce0aea47c05cba04e1f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c45b8e0733816401db93ce0aea47c05cba04e1f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0c45b8e0733816401db93ce0aea47c05cba04e1f", "patch": "@@ -1,3 +1,17 @@\n+2003-03-17  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/Makefile.am (CLEANFILES): Add tmp*.\n+\t* testsuite/Makefile.in: Regenerate.\n+\t* testsuite/27_io/filebuf_members.cc: Consistently name tmp files.\n+\tCleanups.\n+\n+2003-03-17  Petur Runolfsson  <peturr02@ru.is>\n+ \n+        PR libstdc++/9964\n+        * include/bits/fstream.tcc (basic_filebuf::close):\n+        Always close file, even when write fails.\n+        * testsuite/27_io/filebuf_members.cc (test_07):  New test.\n+ \n 2003-03-17  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* libsupc++/Makefile.am (C_COMPILE): Remove."}, {"sha": "d854d0b883afa4bc61c11cf4eef676598f971564", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c45b8e0733816401db93ce0aea47c05cba04e1f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c45b8e0733816401db93ce0aea47c05cba04e1f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=0c45b8e0733816401db93ce0aea47c05cba04e1f", "patch": "@@ -122,21 +122,17 @@ namespace std\n     basic_filebuf<_CharT, _Traits>::\n     close()\n     {\n-      __filebuf_type *__ret = NULL;\n+      __filebuf_type* __ret = NULL;\n       if (this->is_open())\n \t{\n+\t  bool __testfail = false;\n \t  const int_type __eof = traits_type::eof();\n \t  bool __testput = this->_M_out_cur\n-\t    && this->_M_out_beg < this->_M_out_lim;\n+\t                   && this->_M_out_beg < this->_M_out_lim;\n \t  if (__testput \n \t      && traits_type::eq_int_type(_M_really_overflow(__eof), __eof))\n-\t    return __ret;\n+\t    __testfail = true;\n \n-\t  // NB: Do this here so that re-opened filebufs will be cool...\n-\t  this->_M_mode = ios_base::openmode(0);\n-\t  _M_destroy_internal_buffer();\n-\t  _M_pback_destroy();\n-\t  \n #if 0\n \t  // XXX not done\n \t  if (_M_last_overflowed)\n@@ -146,10 +142,17 @@ namespace std\n \t    }\n #endif\n \n-\t  if (_M_file.close())\n+\t  // NB: Do this here so that re-opened filebufs will be cool...\n+\t  this->_M_mode = ios_base::openmode(0);\n+\t  _M_destroy_internal_buffer();\n+\t  _M_pback_destroy();\n+\n+\t  if (!_M_file.close())\n+\t    __testfail = true;\n+\n+\t  if (!__testfail)\n \t    __ret = this;\n \t}\n-\n       _M_last_overflowed = false;\t\n       return __ret;\n     }"}, {"sha": "d6a9b35cd3f113f00d0804235b346e1fc35850a0", "filename": "libstdc++-v3/testsuite/27_io/filebuf_members.cc", "status": "modified", "additions": 62, "deletions": 19, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c45b8e0733816401db93ce0aea47c05cba04e1f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c45b8e0733816401db93ce0aea47c05cba04e1f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc?ref=0c45b8e0733816401db93ce0aea47c05cba04e1f", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -89,23 +89,24 @@ void test_02()\n   // read (ext)\n   FILE* f2 = fopen(name_01, \"r\");\n   VERIFY( f2 != NULL );\n+  if (f2)\n   {\n     __gnu_cxx::stdio_filebuf<char> fb(f2, std::ios_base::in, 512);\n+    close_num = fclose(f2);\n   }\n-  close_num = fclose(f2);\n   VERIFY( close_num == 0 );\n \n-\n   // read (standard)\n   FILE* f = fopen(name_01, \"r\");\n   VERIFY( f != NULL );\n+  if (f)\n   {\n     std::ifstream ifstream1(name_01);\n     VERIFY( ifstream1.is_open() );\n     std::ios_base::iostate st01 = ifstream1.rdstate();\n     VERIFY( st01 == std::ios_base::goodbit );\n+    close_num = fclose(f);\n   }\n-  close_num = fclose(f);\n   VERIFY( close_num == 0 );\n }\n \n@@ -128,9 +129,11 @@ void test_03()\n void\n test_04()\n {\n+  bool test = true;\n+  const char* name = \"tmp_fifo1\";\n   signal(SIGPIPE, SIG_IGN);\n   \n-  if (0 != mkfifo(\"xxx\", S_IRWXU))\n+  if (0 != mkfifo(name, S_IRWXU))\n     {\n       std::cerr << \"failed to creat fifo\" << std::endl;\n       exit(-1);\n@@ -140,18 +143,18 @@ test_04()\n   if (fval == -1)\n     {\n       std::cerr << \"failed to fork\" << std::endl;\n-      unlink(\"xxx\");\n+      unlink(name);\n       exit(-1);\n     }\n   else if (fval == 0)\n     {\n-      std::ifstream ifs(\"xxx\");\n+      std::ifstream ifs(name);\n       sleep(1);\n       ifs.close();\n       exit(0);\n     }\n \n-  std::ofstream ofs(\"xxx\");\n+  std::ofstream ofs(name);\n   sleep(2);\n   ofs.put('t');\n \n@@ -166,25 +169,27 @@ test_04()\n   ofs.close();\n   if (!(ofs.rdstate() & std::ios::failbit))\n     {\n-      std::cerr << \"fail bit was not set!\" << std::endl;\n-      unlink(\"xxx\");\n+      test = false;\n+      VERIFY( test );\n+      unlink(name);\n       exit(-1);\n     }\n \n-  unlink(\"xxx\");\n+  unlink(name);\n }\n \n // Charles Leggett <CGLeggett@lbl.gov>\n void test_05()\n {\n   bool test = true;\n+  const char* name = \"tmp_file5\";\n \n   std::fstream scratch_file;\n \n-  scratch_file.open(\"SCRATCH\", std::ios::out);\n+  scratch_file.open(name, std::ios::out);\n   scratch_file.close();\n \n-  scratch_file.open(\"SCRATCH\", std::ios::in);\n+  scratch_file.open(name, std::ios::in);\n   if (!scratch_file)\n     VERIFY( false );\n   scratch_file.close();\n@@ -194,29 +199,66 @@ void test_05()\n void test_06()\n {\n   bool test = true;\n+  const char* name = \"tmp_fifo2\";\n \n   signal(SIGPIPE, SIG_IGN);\n \n-  unlink(\"yyy\");\n-  mkfifo(\"yyy\", S_IRWXU);\n+  unlink(name);\n+  mkfifo(name, S_IRWXU);\n \t\n   if (!fork())\n     {\n       std::filebuf fbuf;\n-      fbuf.open(\"yyy\", std::ios_base::in);\n+      fbuf.open(name, std::ios_base::in);\n       fbuf.sgetc();\n       fbuf.close();\n-\n       exit(0);\n     }\n \n   std::filebuf fbuf;\n-  std::filebuf* r =\n-    fbuf.open(\"yyy\", std::ios_base::out | std::ios_base::ate);\n+  std::filebuf* r = fbuf.open(name, std::ios_base::out | std::ios_base::ate);\n   VERIFY( !fbuf.is_open() );\n   VERIFY( r == NULL );\n }\n \n+// libstdc++/9964\n+void test_07()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  const char* name = \"tmp_fifo3\";\n+\n+  signal(SIGPIPE, SIG_IGN);\n+\n+  unlink(name);  \n+  mkfifo(name, S_IRWXU);\n+  \n+  int child = fork();\n+  VERIFY( child != -1 );\n+\n+  if (child == 0)\n+    {\n+      filebuf fbin;\n+      fbin.open(name, ios_base::in);\n+      sleep(1);\n+      fbin.close();\n+      exit(0);\n+    }\n+  \n+  filebuf fb;\n+  filebuf* ret = fb.open(name, ios_base::out | ios_base::trunc);\n+  VERIFY( ret != NULL );\n+  VERIFY( fb.is_open() );\n+\n+  sleep(2);\n+  fb.sputc('a');\n+\n+  ret = fb.close();\n+  VERIFY( ret == NULL );\n+  VERIFY( !fb.is_open() );\n+}\n+\n int\n main()\n {\n@@ -226,6 +268,7 @@ main()\n   test_04();\n   test_05();\n   test_06();\n+  test_07();\n   return 0;\n }\n "}, {"sha": "fc8f61630111083207d766495ecfb5d514ae21f8", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c45b8e0733816401db93ce0aea47c05cba04e1f/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c45b8e0733816401db93ce0aea47c05cba04e1f/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=0c45b8e0733816401db93ce0aea47c05cba04e1f", "patch": "@@ -73,6 +73,5 @@ stamp_wchar:\n \ttouch testsuite_wchar_t\n \n # By adding these files here, automake will remove them for 'make clean'\n-CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp ostream_* *.log *.sum \\\n-\ttestsuite_files testsuite_wchar_t \\\n-\tsite.exp abi_check \n+CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \\\n+\t     testsuite_files testsuite_wchar_t site.exp abi_check "}, {"sha": "f9b0d99bf595d31d3d0b83cff4d8997ffd626d60", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c45b8e0733816401db93ce0aea47c05cba04e1f/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c45b8e0733816401db93ce0aea47c05cba04e1f/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=0c45b8e0733816401db93ce0aea47c05cba04e1f", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -180,9 +180,8 @@ libv3test_a_SOURCES = testsuite_hooks.cc testsuite_allocator.cc\n abi_check_SOURCES = abi_check.cc\n \n # By adding these files here, automake will remove them for 'make clean'\n-CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp ostream_* *.log *.sum \\\n-\ttestsuite_files testsuite_wchar_t \\\n-\tsite.exp abi_check \n+CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \\\n+\t     testsuite_files testsuite_wchar_t site.exp abi_check \n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}]}