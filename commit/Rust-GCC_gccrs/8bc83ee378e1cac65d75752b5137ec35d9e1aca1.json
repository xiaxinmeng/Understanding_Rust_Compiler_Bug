{"sha": "8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJjODNlZTM3OGUxY2FjNjVkNzU3NTJiNTEzN2VjMzVkOWUxYWNhMQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-07-17T12:13:12Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-07-17T12:13:12Z"}, "message": "AArch64: Add test for -mcpu=native\n\nThis adds some tests to the GCC testsuite for testing the\n-mcpu=native code.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/cpunative/aarch64-cpunative.exp: New test.\n\t* gcc.target/aarch64/cpunative/info_0: New test.\n\t* gcc.target/aarch64/cpunative/info_1: New test.\n\t* gcc.target/aarch64/cpunative/info_10: New test.\n\t* gcc.target/aarch64/cpunative/info_11: New test.\n\t* gcc.target/aarch64/cpunative/info_12: New test.\n\t* gcc.target/aarch64/cpunative/info_13: New test.\n\t* gcc.target/aarch64/cpunative/info_14: New test.\n\t* gcc.target/aarch64/cpunative/info_15: New test.\n\t* gcc.target/aarch64/cpunative/info_2: New test.\n\t* gcc.target/aarch64/cpunative/info_3: New test.\n\t* gcc.target/aarch64/cpunative/info_4: New test.\n\t* gcc.target/aarch64/cpunative/info_5: New test.\n\t* gcc.target/aarch64/cpunative/info_6: New test.\n\t* gcc.target/aarch64/cpunative/info_7: New test.\n\t* gcc.target/aarch64/cpunative/info_8: New test.\n\t* gcc.target/aarch64/cpunative/info_9: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_0.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_1.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_10.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_11.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_12.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_13.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_14.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_15.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_2.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_3.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_4.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_5.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_6.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_7.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_8.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_9.c: New test.", "tree": {"sha": "8cd9a090a62d29ef044e2e39c1dffc9f14b8a09e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cd9a090a62d29ef044e2e39c1dffc9f14b8a09e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c4491e33d1be16bfb85d448862a8b956d35e4d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c4491e33d1be16bfb85d448862a8b956d35e4d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c4491e33d1be16bfb85d448862a8b956d35e4d8"}], "stats": {"total": 363, "additions": 363, "deletions": 0}, "files": [{"sha": "ce80ca04b8d095c96acf0bda4d5b16a6460c4cbd", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/aarch64-cpunative.exp", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Faarch64-cpunative.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Faarch64-cpunative.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Faarch64-cpunative.exp?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,35 @@\n+# Copyright (C) 2014-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an AArch64 target.\n+if ![istarget aarch64*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n+\t\"\" \"\"\n+\n+# All done.\n+dg-finish"}, {"sha": "ef4a3f606fa56bc7ef1e951c1896737f013f78a6", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_0", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_0", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_0", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_0?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,8 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features\t: fp asimd evtstrm aes pmull sha1 sha2 crc32 asimddp\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2"}, {"sha": "0f434bca28521f678bcee9f407f34ef813e7f1f1", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_1", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_1?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,8 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features\t: fp\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2"}, {"sha": "c6e9d7ca9e274a0be8a75bd7056dad958aa53cb4", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_10", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_10", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_10", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_10?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,8 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features\t: \n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2"}, {"sha": "fb76f7d45bcd8238e49d3dedb1dab5265cbae982", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_11", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_11?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,8 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features\t: asimd fp sb\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2"}, {"sha": "9b6aa7bc248530eb794dad5d874a78dc9c06851b", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_12", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_12", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_12", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_12?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,8 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features\t: asimd fp ssbs\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2"}, {"sha": "ef4a3f606fa56bc7ef1e951c1896737f013f78a6", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_13", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_13", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_13", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_13?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,8 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features\t: fp asimd evtstrm aes pmull sha1 sha2 crc32 asimddp\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2"}, {"sha": "338975715132ed6e55c2d34514ad20294b7018ee", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_14", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_14", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_14", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_14?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,8 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features\t: Lorem ipsum dolor sit ametd rebum expetendis per at Dolor lucilius referrentur ei mei virtute eruditi eum ne Iisque verterem tacimates eu mea ei autem asimd fp asimddp\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2"}, {"sha": "bc6453945561044ab09ec2dba851eb88829c483b", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_15", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_15", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_15", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_15?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,8 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features\t: Lorem ipsum dolor sit ametd rebum expetendis per at Dolor lucilius referrentur ei mei virtute eruditi eum ne Iisque verter svesm4 asimd fp\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2"}, {"sha": "965d37760ac34a456a6463c9e1baae152e966040", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_2", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_2?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,8 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features\t: asimd\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2"}, {"sha": "0c276f884a8365b8aa66b7c08f12f3e6cfead497", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_3", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_3?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,8 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features\t: asimd fp\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2"}, {"sha": "716210c14175ef5af956af2e40ecd188451bf54b", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_4", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_4?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,8 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features\t: asimd fp aes pmull sha1 sha2\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2"}, {"sha": "7a002e1c4c8192fcb541de8f90603bd27e793e72", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_5", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_5", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_5", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_5?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,8 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features\t: asimd fp fphp asimdhp\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2"}, {"sha": "d341dfe86f4c6d68a085389954197d29f32d5992", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_6", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_6?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,8 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features\t: asimd fp aes pmull sha1 sha2 fphp asimdhp\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2"}, {"sha": "ccb784915d517b44cdfba7dec01047ad085e685b", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_7", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_7", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_7", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_7?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,8 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features\t: asimd pmull sha1 fp aes sha2 fphp asimdhp\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2"}, {"sha": "d6d9d03a2a26c2196ddae770411479bf71725d59", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_8", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_8", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_8", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_8?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,8 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features\t: asimd sve fp\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2"}, {"sha": "c9aa4a9a07df4df4a7a4642fed6f664cdf8da4b3", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_9", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_9", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_9", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_9?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,8 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features\t: asimd fp svesm4\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2"}, {"sha": "f155f51bae734a62b39867fc1a0adec65fb552de", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_0.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_0.c?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_0\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+crypto\\+crc\\+dotprod} } } */\n+\n+/* Test a normal looking procinfo.  */"}, {"sha": "2cf0e89994b1cc0dc9fac67f4dc431c003498048", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_1.c?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_1\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+nosimd} } } */\n+\n+/* Test one where fp is on by default so turn off simd.  */"}, {"sha": "6a753965c527fd7f27851c5e8e474ec900a1a75a", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_10.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_10.c?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_10\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+nofp\\+nosimd} } } */\n+\n+/* Test one with no entry in feature list.  */"}, {"sha": "96b9ca434ebbf007ddaa45d55a8c2b8e7a19a715", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_11.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_11.c?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_11\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+sb} } } */\n+\n+/* Test one with a feature name that overlaps with another one.  */"}, {"sha": "c3b44adbf6c8a02c5003049eed2ed453587b8ad4", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_12.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_12.c?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_12\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+ssbs} } } */\n+\n+/* Test one where the longer feature overlaps with a shorter one.  */"}, {"sha": "b7b3a8e13dfbda887f80b9e5c8f5416c153e0d65", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_13.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_13.c?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_13\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+crypto\\+crc\\+dotprod} } } */\n+\n+/* Test one with mixed order of feature bits.  */"}, {"sha": "781ab1ebbfb46901ea38cd0063d984e372839ecd", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_14.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_14.c?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_14\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+dotprod} } } */\n+\n+/* Test one where valid feature bits are at a boundary > buffer size.   */"}, {"sha": "c9205d95b793c27cd61982b9262bbbcc4912ec6d", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_15.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_15.c?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_15\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+sve2-sm4} } } */\n+\n+/* Test one where the bounary of buffer size would cut off and leave\n+   a valid feature in the first full buffer.  e.g. this will cut off at\n+   sve leaving 2-sm4 to yet be read.  Check that this doesn't enable\n+   +sve by mistake.  */"}, {"sha": "aad71f4347d2f8e8bb7270db2f8534bf3a198e9e", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_2.c?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_2\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+nofp\\+nosimd} } } */\n+\n+/* Test one where asimd is provided byt no fp.  */"}, {"sha": "50685c297dbd7549ee1ea190dbfdb9dd90f3af12", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_3.c?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_3\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a} } } */\n+\n+/* Test where asimd and fp are the only ones provided, these are default\n+   and so shouldn't emit anything.  */"}, {"sha": "91ae809757a4e31bf946fc27ec33f51001b0d3e8", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_4.c?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_4\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+crypto} } } */\n+\n+/* Test one where all crypto bits are given so crypto should be enabled.  */"}, {"sha": "84139e58ee0000816c4ea24f27bc28f5f6563bac", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_5.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_5.c?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_5\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+fp16} } } */\n+\n+/* Test one where fp16 is available and so should be emitted.  */"}, {"sha": "da72052e62385c9251d25f792b679263a18d9e61", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_6.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_6.c?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_6\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+crypto\\+fp16} } } */\n+\n+/* Test one where the feature bits for crypto and fp16 are given in\n+   same order as declared in options file.  */"}, {"sha": "96ad4c14db16468df30cc0a00d709ed5e2f32ed9", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_7.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_7.c?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_7\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+crypto\\+fp16} } } */\n+\n+/* Test one where the crypto and fp16 options are specified in different\n+   order from what is in the options file.  */"}, {"sha": "7a5a2144a3973406b9ba7d268029a6940fb0be48", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_8.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_8.c?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_8\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+sve} } } */\n+\n+/* Test one where sve is enabled.  */"}, {"sha": "528b5d029f1a21c8388a30120590c1b8d5b4a81f", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_9.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc83ee378e1cac65d75752b5137ec35d9e1aca1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_9.c?ref=8bc83ee378e1cac65d75752b5137ec35d9e1aca1", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_9\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+sve2-sm4} } } */\n+\n+/* Test one here a feature that is a prefix of another is enabled.\n+   In this case sve is a prefix to svesm4, but sve2-sm4 should be\n+   enabled.  */"}]}