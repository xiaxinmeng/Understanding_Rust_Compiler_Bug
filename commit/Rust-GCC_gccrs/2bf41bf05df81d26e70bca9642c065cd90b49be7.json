{"sha": "2bf41bf05df81d26e70bca9642c065cd90b49be7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJmNDFiZjA1ZGY4MWQyNmU3MGJjYTk2NDJjMDY1Y2Q5MGI0OWJlNw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2008-02-20T02:16:43Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2008-02-20T02:16:43Z"}, "message": "traditional.c (lex_identifier): Use CPP_HASHNODE.\n\n\t* traditional.c (lex_identifier): Use CPP_HASHNODE.\n\t* lex.c (lex_identifier): Use CPP_HASHNODE.\n\t* include/line-map.h (LINEMAP_POSITION_FOR_COLUMN): Wrap in\n\tdo-while.\n\t* identifiers.c (alloc_node): Change return type.\n\t(_cpp_init_hashtable): Don't cast 'alloc_node'.\n\t(proxy_assertion_broken): New declaration.\n\t(cpp_forall_identifiers): Move comment.\n\t* line-map.c (linemap_add): Comment fix.\n\t(linemap_line_start): Indentation fix.\n\nFrom-SVN: r132467", "tree": {"sha": "a0f5aee41aeac0578015bd28b69be97666cfa9bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0f5aee41aeac0578015bd28b69be97666cfa9bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bf41bf05df81d26e70bca9642c065cd90b49be7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bf41bf05df81d26e70bca9642c065cd90b49be7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bf41bf05df81d26e70bca9642c065cd90b49be7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bf41bf05df81d26e70bca9642c065cd90b49be7/comments", "author": null, "committer": null, "parents": [{"sha": "18ca3965e9f2a024baca017763ddfa4342ef499d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18ca3965e9f2a024baca017763ddfa4342ef499d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18ca3965e9f2a024baca017763ddfa4342ef499d"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "c2c026e27eafc6959682268f918a3d442ce92368", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf41bf05df81d26e70bca9642c065cd90b49be7/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf41bf05df81d26e70bca9642c065cd90b49be7/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=2bf41bf05df81d26e70bca9642c065cd90b49be7", "patch": "@@ -1,3 +1,16 @@\n+2008-02-19  Tom Tromey  <tromey@redhat.com>\n+\n+\t* traditional.c (lex_identifier): Use CPP_HASHNODE.\n+\t* lex.c (lex_identifier): Use CPP_HASHNODE.\n+\t* include/line-map.h (LINEMAP_POSITION_FOR_COLUMN): Wrap in\n+\tdo-while.\n+\t* identifiers.c (alloc_node): Change return type.\n+\t(_cpp_init_hashtable): Don't cast 'alloc_node'.\n+\t(proxy_assertion_broken): New declaration.\n+\t(cpp_forall_identifiers): Move comment.\n+\t* line-map.c (linemap_add): Comment fix.\n+\t(linemap_line_start): Indentation fix.\n+\n 2008-01-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/34692"}, {"sha": "41f32a2bbaec9ac0e2643e5ff8f6490dd2f3697b", "filename": "libcpp/identifiers.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf41bf05df81d26e70bca9642c065cd90b49be7/libcpp%2Fidentifiers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf41bf05df81d26e70bca9642c065cd90b49be7/libcpp%2Fidentifiers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fidentifiers.c?ref=2bf41bf05df81d26e70bca9642c065cd90b49be7", "patch": "@@ -1,6 +1,6 @@\n /* Hash tables for the CPP library.\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1998,\n-   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2007 Free Software Foundation, Inc.\n    Written by Per Bothner, 1994.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -28,18 +28,18 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n #include \"cpplib.h\"\n #include \"internal.h\"\n \n-static cpp_hashnode *alloc_node (hash_table *);\n+static hashnode alloc_node (hash_table *);\n \n /* Return an identifier node for hashtable.c.  Used by cpplib except\n    when integrated with the C front ends.  */\n-static cpp_hashnode *\n+static hashnode\n alloc_node (hash_table *table)\n {\n   cpp_hashnode *node;\n \n   node = XOBNEW (&table->pfile->hash_ob, cpp_hashnode);\n   memset (node, 0, sizeof (cpp_hashnode));\n-  return node;\n+  return HT_NODE (node);\n }\n \n /* Set up the identifier hash table.  Use TABLE if non-null, otherwise\n@@ -53,7 +53,7 @@ _cpp_init_hashtable (cpp_reader *pfile, hash_table *table)\n     {\n       pfile->our_hashtable = 1;\n       table = ht_create (13);\t/* 8K (=2^13) entries.  */\n-      table->alloc_node = (hashnode (*) (hash_table *)) alloc_node;\n+      table->alloc_node = alloc_node;\n \n       _obstack_begin (&pfile->hash_ob, 0, 0,\n \t\t      (void *(*) (long)) xmalloc,\n@@ -107,12 +107,15 @@ cpp_defined (cpp_reader *pfile, const unsigned char *str, int len)\n   return node && node->type == NT_MACRO;\n }\n \n+/* We don't need a proxy since the hash table's identifier comes first\n+   in cpp_hashnode.  However, in case this is ever changed, we have a\n+   static assertion for it.  */\n+extern char proxy_assertion_broken[offsetof (struct cpp_hashnode, ident) == 0 ? 1 : -1];\n+\n /* For all nodes in the hashtable, callback CB with parameters PFILE,\n    the node, and V.  */\n void\n cpp_forall_identifiers (cpp_reader *pfile, cpp_cb cb, void *v)\n {\n-  /* We don't need a proxy since the hash table's identifier comes\n-     first in cpp_hashnode.  */\n   ht_forall (pfile->hash_table, (ht_cb) cb, v);\n }"}, {"sha": "3378315238f4dc6a8a8d8b94bbfd8e04ae887eaf", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf41bf05df81d26e70bca9642c065cd90b49be7/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf41bf05df81d26e70bca9642c065cd90b49be7/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=2bf41bf05df81d26e70bca9642c065cd90b49be7", "patch": "@@ -172,7 +172,7 @@ extern void linemap_print_containing_files (struct line_maps *,\n /* Set LOC to a source position that is the same line as the most recent\n    linemap_line_start, but with the specified TO_COLUMN column number.  */\n \n-#define LINEMAP_POSITION_FOR_COLUMN(LOC, SET, TO_COLUMN) { \\\n+#define LINEMAP_POSITION_FOR_COLUMN(LOC, SET, TO_COLUMN) do { \\\n   unsigned int to_column = (TO_COLUMN); \\\n   struct line_maps *set = (SET); \\\n   if (__builtin_expect (to_column >= set->max_column_hint, 0)) \\\n@@ -183,7 +183,7 @@ extern void linemap_print_containing_files (struct line_maps *,\n     if (r >= set->highest_location) \\\n       set->highest_location = r; \\\n     (LOC) = r;\t\t\t \\\n-  }}\n+  }} while (0)\n     \n \n extern source_location"}, {"sha": "2eaf6105922437d1f7c3c6057f2564dfa9a24149", "filename": "libcpp/lex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf41bf05df81d26e70bca9642c065cd90b49be7/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf41bf05df81d26e70bca9642c065cd90b49be7/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=2bf41bf05df81d26e70bca9642c065cd90b49be7", "patch": "@@ -1,5 +1,5 @@\n /* CPP Library - lexical analysis.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n    Contributed by Per Bothner, 1994-95.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -538,8 +538,8 @@ lex_identifier (cpp_reader *pfile, const uchar *base, bool starts_ucn,\n       len = cur - base;\n       hash = HT_HASHFINISH (hash, len);\n \n-      result = (cpp_hashnode *)\n-\tht_lookup_with_hash (pfile->hash_table, base, len, hash, HT_ALLOC);\n+      result = CPP_HASHNODE (ht_lookup_with_hash (pfile->hash_table,\n+\t\t\t\t\t\t  base, len, hash, HT_ALLOC));\n     }\n \n   /* Rarely, identifiers require diagnostics when lexed.  */"}, {"sha": "2c6d2510e6113a0aef1d7cab211887d43f76c07f", "filename": "libcpp/line-map.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf41bf05df81d26e70bca9642c065cd90b49be7/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf41bf05df81d26e70bca9642c065cd90b49be7/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=2bf41bf05df81d26e70bca9642c065cd90b49be7", "patch": "@@ -1,5 +1,5 @@\n /* Map logical line numbers to (source file, line number) pairs.\n-   Copyright (C) 2001, 2003, 2004, 2007\n+   Copyright (C) 2001, 2003, 2004, 2007, 2008\n    Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n@@ -81,7 +81,6 @@ linemap_free (struct line_maps *set)\n \n    FROM_LINE should be monotonic increasing across calls to this\n    function.  A call to this function can relocate the previous set of\n-   A call to this function can relocate the previous set of\n    maps, so any stored line_map pointers should not be used.  */\n \n const struct line_map *\n@@ -225,8 +224,8 @@ linemap_line_start (struct line_maps *set, unsigned int to_line,\n       if (line_delta < 0\n \t  || last_line != map->to_line\n \t  || SOURCE_COLUMN (map, highest) >= (1U << column_bits))\n-\tmap = (struct line_map*) linemap_add (set, LC_RENAME, map->sysp,\n-\t\t\t\t      map->to_file, to_line);\n+\tmap = (struct line_map *) linemap_add (set, LC_RENAME, map->sysp,\n+\t\t\t\t\t       map->to_file, to_line);\n       map->column_bits = column_bits;\n       r = map->start_location + ((to_line - map->to_line) << column_bits);\n     }"}, {"sha": "1a384253a9063b3acdc9fc79f4f35c35555dff29", "filename": "libcpp/traditional.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf41bf05df81d26e70bca9642c065cd90b49be7/libcpp%2Ftraditional.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf41bf05df81d26e70bca9642c065cd90b49be7/libcpp%2Ftraditional.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ftraditional.c?ref=2bf41bf05df81d26e70bca9642c065cd90b49be7", "patch": "@@ -253,8 +253,8 @@ lex_identifier (cpp_reader *pfile, const uchar *cur)\n \n   CUR (pfile->context) = cur;\n   len = out - pfile->out.cur;\n-  result = (cpp_hashnode *) ht_lookup (pfile->hash_table, pfile->out.cur,\n-\t\t\t\t       len, HT_ALLOC);\n+  result = CPP_HASHNODE (ht_lookup (pfile->hash_table, pfile->out.cur,\n+\t\t\t\t    len, HT_ALLOC));\n   pfile->out.cur = out;\n   return result;\n }"}]}