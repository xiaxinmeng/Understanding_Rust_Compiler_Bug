{"sha": "d8a88cdae9c0c42ab7c5c65a5043c4f8bad349d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhhODhjZGFlOWMwYzQyYWI3YzVjNjVhNTA0M2M0ZjhiYWQzNDlkMg==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-06-11T14:48:51Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-06-16T13:21:52Z"}, "message": "aarch64: Model zero-high-half semantics of XTN instruction in RTL\n\nModeling the zero-high-half semantics of the XTN narrowing\ninstruction in RTL indicates to the compiler that this is a totally\ndestructive operation. This enables more RTL simplifications and also\nprevents some register allocation issues.\n\nAdd new tests to narrow_zero_high_half.c to verify the benefit of\nthis change.\n\ngcc/ChangeLog:\n\n2021-06-11  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd.md (aarch64_xtn<mode>_insn_le):\n\tDefine - modeling zero-high-half semantics.\n\t(aarch64_xtn<mode>): Change to an expander that emits the\n\tappropriate instruction depending on endianness.\n\t(aarch64_xtn<mode>_insn_be): Define - modeling zero-high-half\n\tsemantics.\n\t(aarch64_xtn2<mode>_le): Rename to...\n\t(aarch64_xtn2<mode>_insn_le): This.\n\t(aarch64_xtn2<mode>_be): Rename to...\n\t(aarch64_xtn2<mode>_insn_be): This.\n\t(vec_pack_trunc_<mode>): Emit truncation instruction instead\n\tof aarch64_xtn.\n\t* config/aarch64/iterators.md (Vnarrowd): Add Vnarrowd mode\n\tattribute iterator.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/narrow_zero_high_half.c: Add new tests.", "tree": {"sha": "43c2e4ceeabbc60b031b56d11965cecb77dbe074", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43c2e4ceeabbc60b031b56d11965cecb77dbe074"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8a88cdae9c0c42ab7c5c65a5043c4f8bad349d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8a88cdae9c0c42ab7c5c65a5043c4f8bad349d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8a88cdae9c0c42ab7c5c65a5043c4f8bad349d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8a88cdae9c0c42ab7c5c65a5043c4f8bad349d2/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac6c858d072016ad2c409f1593fa290ad0d87e11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6c858d072016ad2c409f1593fa290ad0d87e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac6c858d072016ad2c409f1593fa290ad0d87e11"}], "stats": {"total": 123, "additions": 88, "deletions": 35}, "files": [{"sha": "b23556b551cbbef420950007e9714acf190a534d", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 70, "deletions": 35, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a88cdae9c0c42ab7c5c65a5043c4f8bad349d2/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a88cdae9c0c42ab7c5c65a5043c4f8bad349d2/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=d8a88cdae9c0c42ab7c5c65a5043c4f8bad349d2", "patch": "@@ -1690,17 +1690,48 @@\n \n ;; Narrowing operations.\n \n-;; For doubles.\n+(define_insn \"aarch64_xtn<mode>_insn_le\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (truncate:<VNARROWQ> (match_operand:VQN 1 \"register_operand\" \"w\"))\n+\t  (match_operand:<VNARROWQ> 2 \"aarch64_simd_or_scalar_imm_zero\")))]\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n+  \"xtn\\\\t%0.<Vntype>, %1.<Vtype>\"\n+  [(set_attr \"type\" \"neon_move_narrow_q\")]\n+)\n \n-(define_insn \"aarch64_xtn<mode>\"\n-  [(set (match_operand:<VNARROWQ> 0 \"register_operand\" \"=w\")\n-\t(truncate:<VNARROWQ> (match_operand:VQN 1 \"register_operand\" \"w\")))]\n-  \"TARGET_SIMD\"\n+(define_insn \"aarch64_xtn<mode>_insn_be\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (match_operand:<VNARROWQ> 2 \"aarch64_simd_or_scalar_imm_zero\")\n+\t  (truncate:<VNARROWQ> (match_operand:VQN 1 \"register_operand\" \"w\"))))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n   \"xtn\\\\t%0.<Vntype>, %1.<Vtype>\"\n   [(set_attr \"type\" \"neon_move_narrow_q\")]\n )\n \n-(define_insn \"aarch64_xtn2<mode>_le\"\n+(define_expand \"aarch64_xtn<mode>\"\n+  [(set (match_operand:<VNARROWQ> 0 \"register_operand\")\n+\t(truncate:<VNARROWQ> (match_operand:VQN 1 \"register_operand\")))]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx tmp = gen_reg_rtx (<VNARROWQ2>mode);\n+    if (BYTES_BIG_ENDIAN)\n+      emit_insn (gen_aarch64_xtn<mode>_insn_be (tmp, operands[1],\n+\t\t\t\tCONST0_RTX (<VNARROWQ>mode)));\n+    else\n+      emit_insn (gen_aarch64_xtn<mode>_insn_le (tmp, operands[1],\n+\t\t\t\tCONST0_RTX (<VNARROWQ>mode)));\n+\n+    /* The intrinsic expects a narrow result, so emit a subreg that will get\n+       optimized away as appropriate.  */\n+    emit_move_insn (operands[0], lowpart_subreg (<VNARROWQ>mode, tmp,\n+\t\t\t\t\t\t <VNARROWQ2>mode));\n+    DONE;\n+  }\n+)\n+\n+(define_insn \"aarch64_xtn2<mode>_insn_le\"\n   [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n \t(vec_concat:<VNARROWQ2>\n \t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")\n@@ -1710,7 +1741,7 @@\n   [(set_attr \"type\" \"neon_move_narrow_q\")]\n )\n \n-(define_insn \"aarch64_xtn2<mode>_be\"\n+(define_insn \"aarch64_xtn2<mode>_insn_be\"\n   [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n \t(vec_concat:<VNARROWQ2>\n \t  (truncate:<VNARROWQ> (match_operand:VQN 2 \"register_operand\" \"w\"))\n@@ -1727,15 +1758,17 @@\n   \"TARGET_SIMD\"\n   {\n     if (BYTES_BIG_ENDIAN)\n-      emit_insn (gen_aarch64_xtn2<mode>_be (operands[0], operands[1],\n-\t\t\t\t\t     operands[2]));\n+      emit_insn (gen_aarch64_xtn2<mode>_insn_be (operands[0], operands[1],\n+\t\t\t\t\t\t operands[2]));\n     else\n-      emit_insn (gen_aarch64_xtn2<mode>_le (operands[0], operands[1],\n-\t\t\t\t\t     operands[2]));\n+      emit_insn (gen_aarch64_xtn2<mode>_insn_le (operands[0], operands[1],\n+\t\t\t\t\t\t operands[2]));\n     DONE;\n   }\n )\n \n+;; Packing doubles.\n+\n (define_expand \"vec_pack_trunc_<mode>\"\n  [(match_operand:<VNARROWD> 0 \"register_operand\")\n   (match_operand:VDN 1 \"register_operand\")\n@@ -1748,10 +1781,35 @@\n \n   emit_insn (gen_move_lo_quad_<Vdbl> (tempreg, operands[lo]));\n   emit_insn (gen_move_hi_quad_<Vdbl> (tempreg, operands[hi]));\n-  emit_insn (gen_aarch64_xtn<Vdbl> (operands[0], tempreg));\n+  emit_insn (gen_trunc<Vdbl><Vnarrowd>2 (operands[0], tempreg));\n   DONE;\n })\n \n+;; Packing quads.\n+\n+(define_expand \"vec_pack_trunc_<mode>\"\n+ [(set (match_operand:<VNARROWQ2> 0 \"register_operand\")\n+       (vec_concat:<VNARROWQ2>\n+\t (truncate:<VNARROWQ> (match_operand:VQN 1 \"register_operand\"))\n+\t (truncate:<VNARROWQ> (match_operand:VQN 2 \"register_operand\"))))]\n+ \"TARGET_SIMD\"\n+ {\n+   rtx tmpreg = gen_reg_rtx (<VNARROWQ>mode);\n+   int lo = BYTES_BIG_ENDIAN ? 2 : 1;\n+   int hi = BYTES_BIG_ENDIAN ? 1 : 2;\n+\n+   emit_insn (gen_trunc<mode><Vnarrowq>2 (tmpreg, operands[lo]));\n+\n+   if (BYTES_BIG_ENDIAN)\n+     emit_insn (gen_aarch64_xtn2<mode>_insn_be (operands[0], tmpreg,\n+\t\t\t\t\t\toperands[hi]));\n+   else\n+     emit_insn (gen_aarch64_xtn2<mode>_insn_le (operands[0], tmpreg,\n+\t\t\t\t\t\toperands[hi]));\n+   DONE;\n+ }\n+)\n+\n (define_insn \"aarch64_shrn<mode>_insn_le\"\n   [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n \t(vec_concat:<VNARROWQ2>\n@@ -1936,29 +1994,6 @@\n   }\n )\n \n-;; For quads.\n-\n-(define_expand \"vec_pack_trunc_<mode>\"\n- [(set (match_operand:<VNARROWQ2> 0 \"register_operand\")\n-       (vec_concat:<VNARROWQ2>\n-\t (truncate:<VNARROWQ> (match_operand:VQN 1 \"register_operand\"))\n-\t (truncate:<VNARROWQ> (match_operand:VQN 2 \"register_operand\"))))]\n- \"TARGET_SIMD\"\n- {\n-   rtx tmpreg = gen_reg_rtx (<VNARROWQ>mode);\n-   int lo = BYTES_BIG_ENDIAN ? 2 : 1;\n-   int hi = BYTES_BIG_ENDIAN ? 1 : 2;\n-\n-   emit_insn (gen_aarch64_xtn<mode> (tmpreg, operands[lo]));\n-\n-   if (BYTES_BIG_ENDIAN)\n-     emit_insn (gen_aarch64_xtn2<mode>_be (operands[0], tmpreg, operands[hi]));\n-   else\n-     emit_insn (gen_aarch64_xtn2<mode>_le (operands[0], tmpreg, operands[hi]));\n-   DONE;\n- }\n-)\n-\n ;; Widening operations.\n \n (define_insn \"aarch64_simd_vec_unpack<su>_lo_<mode>\""}, {"sha": "caa42f8f169fbf2cf46a90cf73dee05619acc300", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a88cdae9c0c42ab7c5c65a5043c4f8bad349d2/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a88cdae9c0c42ab7c5c65a5043c4f8bad349d2/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=d8a88cdae9c0c42ab7c5c65a5043c4f8bad349d2", "patch": "@@ -1257,6 +1257,8 @@\n ;; Narrowed modes for VDN.\n (define_mode_attr VNARROWD [(V4HI \"V8QI\") (V2SI \"V4HI\")\n \t\t\t    (DI   \"V2SI\")])\n+(define_mode_attr Vnarrowd [(V4HI \"v8qi\") (V2SI \"v4hi\")\n+\t\t\t    (DI   \"v2si\")])\n \n ;; Narrowed double-modes for VQN (Used for XTN).\n (define_mode_attr VNARROWQ [(V8HI \"V8QI\") (V4SI \"V4HI\")"}, {"sha": "451b0116e5eaffe1b50a8ccccee459c17cf4cb80", "filename": "gcc/testsuite/gcc.target/aarch64/narrow_zero_high_half.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a88cdae9c0c42ab7c5c65a5043c4f8bad349d2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_zero_high_half.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a88cdae9c0c42ab7c5c65a5043c4f8bad349d2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_zero_high_half.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_zero_high_half.c?ref=d8a88cdae9c0c42ab7c5c65a5043c4f8bad349d2", "patch": "@@ -48,6 +48,21 @@ TEST_SHIFT (vqrshrun_n, uint8x16_t, int16x8_t, s16, u8)\n TEST_SHIFT (vqrshrun_n, uint16x8_t, int32x4_t, s32, u16)\n TEST_SHIFT (vqrshrun_n, uint32x4_t, int64x2_t, s64, u32)\n \n+#define TEST_UNARY(name, rettype, intype, fs, rs) \\\n+  rettype test_ ## name ## _ ## fs ## _zero_high \\\n+\t\t(intype a) \\\n+\t{ \\\n+\t\treturn vcombine_ ## rs (name ## _ ## fs (a), \\\n+\t\t\t\t\tvdup_n_ ## rs (0)); \\\n+\t}\n+\n+TEST_UNARY (vmovn, int8x16_t, int16x8_t, s16, s8)\n+TEST_UNARY (vmovn, int16x8_t, int32x4_t, s32, s16)\n+TEST_UNARY (vmovn, int32x4_t, int64x2_t, s64, s32)\n+TEST_UNARY (vmovn, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_UNARY (vmovn, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_UNARY (vmovn, uint32x4_t, uint64x2_t, u64, u32)\n+\n /* { dg-final { scan-assembler-not \"dup\\\\t\" } } */\n \n /* { dg-final { scan-assembler-times \"\\\\tshrn\\\\tv\" 6} }  */\n@@ -58,3 +73,4 @@ TEST_SHIFT (vqrshrun_n, uint32x4_t, int64x2_t, s64, u32)\n /* { dg-final { scan-assembler-times \"\\\\tuqrshrn\\\\tv\" 3} }  */\n /* { dg-final { scan-assembler-times \"\\\\tsqshrun\\\\tv\" 3} }  */\n /* { dg-final { scan-assembler-times \"\\\\tsqrshrun\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"\\\\txtn\\\\tv\" 6} }  */"}]}