{"sha": "841745310d4ec60ca9f157fe99993f7f5b1dc893", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQxNzQ1MzEwZDRlYzYwY2E5ZjE1N2ZlOTk5OTNmN2Y1YjFkYzg5Mw==", "commit": {"author": {"name": "Frank Ch. Eigler", "email": "fche@redhat.com", "date": "2006-11-06T20:04:14Z"}, "committer": {"name": "Frank Ch. Eigler", "email": "fche@gcc.gnu.org", "date": "2006-11-06T20:04:14Z"}, "message": "2006-11-06  Frank Ch. Eigler  <fche@redhat.com>\n\n\tFrom Herman ten Brugge <hermantenbrugge@home.nl>:\n\t* mf-runtime.c (__mf_uncache_object): Optimize the code so that\n\tsmall and large objects are handled a lot faster.\n\nFrom-SVN: r118526", "tree": {"sha": "a85d325c9608d9d7313a5f397125884fd700ed93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a85d325c9608d9d7313a5f397125884fd700ed93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/841745310d4ec60ca9f157fe99993f7f5b1dc893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/841745310d4ec60ca9f157fe99993f7f5b1dc893", "html_url": "https://github.com/Rust-GCC/gccrs/commit/841745310d4ec60ca9f157fe99993f7f5b1dc893", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/841745310d4ec60ca9f157fe99993f7f5b1dc893/comments", "author": {"login": "fche", "id": 588885, "node_id": "MDQ6VXNlcjU4ODg4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/588885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fche", "html_url": "https://github.com/fche", "followers_url": "https://api.github.com/users/fche/followers", "following_url": "https://api.github.com/users/fche/following{/other_user}", "gists_url": "https://api.github.com/users/fche/gists{/gist_id}", "starred_url": "https://api.github.com/users/fche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fche/subscriptions", "organizations_url": "https://api.github.com/users/fche/orgs", "repos_url": "https://api.github.com/users/fche/repos", "events_url": "https://api.github.com/users/fche/events{/privacy}", "received_events_url": "https://api.github.com/users/fche/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f60e48f450f8b42bde14571068b952c2ccfccc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f60e48f450f8b42bde14571068b952c2ccfccc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f60e48f450f8b42bde14571068b952c2ccfccc9"}], "stats": {"total": 86, "additions": 74, "deletions": 12}, "files": [{"sha": "206411667e4aa0aade54e92ba4184cb8f611c395", "filename": "libmudflap/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841745310d4ec60ca9f157fe99993f7f5b1dc893/libmudflap%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841745310d4ec60ca9f157fe99993f7f5b1dc893/libmudflap%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2FChangeLog?ref=841745310d4ec60ca9f157fe99993f7f5b1dc893", "patch": "@@ -1,3 +1,9 @@\n+2006-11-06  Frank Ch. Eigler  <fche@redhat.com>\n+\n+\tFrom Herman ten Brugge <hermantenbrugge@home.nl>:\n+\t* mf-runtime.c (__mf_uncache_object): Optimize the code so that\n+\tsmall and large objects are handled a lot faster.\n+\n 2006-11-06  Frank Ch. Eigler  <fche@redhat.com>\n \n \t* configure.ac (__libc_freeres): Look for it."}, {"sha": "8501cca6feef030ceb33d2179b2c8004946c92d6", "filename": "libmudflap/mf-runtime.c", "status": "modified", "additions": 68, "deletions": 12, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841745310d4ec60ca9f157fe99993f7f5b1dc893/libmudflap%2Fmf-runtime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841745310d4ec60ca9f157fe99993f7f5b1dc893/libmudflap%2Fmf-runtime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fmf-runtime.c?ref=841745310d4ec60ca9f157fe99993f7f5b1dc893", "patch": "@@ -1079,24 +1079,80 @@ __mf_uncache_object (__mf_object_t *old_obj)\n   /* Can it possibly exist in the cache?  */\n   if (LIKELY (old_obj->read_count + old_obj->write_count))\n     {\n-      /* As reported by Herman ten Brugge, we need to scan the entire\n-         cache for entries that may hit this object. */\n       uintptr_t low = old_obj->low;\n       uintptr_t high = old_obj->high;\n-      struct __mf_cache *entry = & __mf_lookup_cache [0];\n+      struct __mf_cache *entry;\n       unsigned i;\n-      for (i = 0; i <= __mf_lc_mask; i++, entry++)\n-        {\n-          /* NB: the \"||\" in the following test permits this code to\n-             tolerate the situation introduced by __mf_check over\n-             contiguous objects, where a cache entry spans several\n-             objects.  */\n-          if (entry->low == low || entry->high == high)\n+      if ((high - low) >= (__mf_lc_mask << __mf_lc_shift))\n+\t{\n+\t  /* For large objects (>= cache size - 1) check the whole cache.  */\n+          entry = & __mf_lookup_cache [0];\n+          for (i = 0; i <= __mf_lc_mask; i++, entry++)\n             {\n-              entry->low = MAXPTR;\n-              entry->high = MINPTR;\n+              /* NB: the \"||\" in the following test permits this code to\n+                 tolerate the situation introduced by __mf_check over\n+                 contiguous objects, where a cache entry spans several\n+                 objects.  */\n+              if (entry->low == low || entry->high == high)\n+                {\n+                  entry->low = MAXPTR;\n+                  entry->high = MINPTR;\n+                }\n             }\n         }\n+      else\n+\t{\n+\t  /* Object is now smaller then cache size.  */\n+          unsigned entry_low_idx = __MF_CACHE_INDEX (low);\n+          unsigned entry_high_idx = __MF_CACHE_INDEX (high);\n+          if (entry_low_idx <= entry_high_idx)\n+\t    {\n+              entry = & __mf_lookup_cache [entry_low_idx];\n+              for (i = entry_low_idx; i <= entry_high_idx; i++, entry++)\n+                {\n+                  /* NB: the \"||\" in the following test permits this code to\n+                     tolerate the situation introduced by __mf_check over\n+                     contiguous objects, where a cache entry spans several\n+                     objects.  */\n+                  if (entry->low == low || entry->high == high)\n+                    {\n+                      entry->low = MAXPTR;\n+                      entry->high = MINPTR;\n+                    }\n+                }\n+            }\n+          else\n+\t    {\n+\t      /* Object wrapped around the end of the cache. First search\n+\t\t from low to end of cache and then from 0 to high.  */\n+              entry = & __mf_lookup_cache [entry_low_idx];\n+              for (i = entry_low_idx; i <= __mf_lc_mask; i++, entry++)\n+                {\n+                  /* NB: the \"||\" in the following test permits this code to\n+                     tolerate the situation introduced by __mf_check over\n+                     contiguous objects, where a cache entry spans several\n+                     objects.  */\n+                  if (entry->low == low || entry->high == high)\n+                    {\n+                      entry->low = MAXPTR;\n+                      entry->high = MINPTR;\n+                    }\n+                }\n+              entry = & __mf_lookup_cache [0];\n+              for (i = 0; i <= entry_high_idx; i++, entry++)\n+                {\n+                  /* NB: the \"||\" in the following test permits this code to\n+                     tolerate the situation introduced by __mf_check over\n+                     contiguous objects, where a cache entry spans several\n+                     objects.  */\n+                  if (entry->low == low || entry->high == high)\n+                    {\n+                      entry->low = MAXPTR;\n+                      entry->high = MINPTR;\n+                    }\n+                }\n+\t    }\n+\t}\n     }\n }\n "}]}