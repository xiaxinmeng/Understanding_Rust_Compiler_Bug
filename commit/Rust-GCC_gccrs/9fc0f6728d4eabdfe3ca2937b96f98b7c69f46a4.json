{"sha": "9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZjMGY2NzI4ZDRlYWJkZmUzY2EyOTM3Yjk2Zjk4YjdjNjlmNDZhNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-03-13T13:22:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-03-13T13:22:52Z"}, "message": "[multiple changes]\n\n2015-03-13  Gary Dismukes  <dismukes@adacore.com>\n\n\t* style.adb (Missing_Overriding): Apply the\n\tComes_From_Source test to the Original_Node of the subprogram\n\tnode, to handle the case of a null procedure declaration that\n\thas been rewritten as an empty procedure body.\n\n2015-03-13  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_util.ads: Minor fix to comment.\n\t* sem_ch3.adb (Constrain_Index): Correct pasto from previous\n\tchange.\n\nFrom-SVN: r221419", "tree": {"sha": "12c89db34b20ed942e7ef7a0e4d90bed01480708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12c89db34b20ed942e7ef7a0e4d90bed01480708"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4/comments", "author": null, "committer": null, "parents": [{"sha": "28c7180f1ce824f720bfd80895c03c5a46269497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c7180f1ce824f720bfd80895c03c5a46269497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28c7180f1ce824f720bfd80895c03c5a46269497"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "3b961475cc4849b041392eb298378b5daa192e07", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4", "patch": "@@ -1,3 +1,16 @@\n+2015-03-13  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* style.adb (Missing_Overriding): Apply the\n+\tComes_From_Source test to the Original_Node of the subprogram\n+\tnode, to handle the case of a null procedure declaration that\n+\thas been rewritten as an empty procedure body.\n+\n+2015-03-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_util.ads: Minor fix to comment.\n+\t* sem_ch3.adb (Constrain_Index): Correct pasto from previous\n+\tchange.\n+\n 2015-03-13  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_util.ads, exp_util.adb (Force_Evaluation): Add Related_Id and"}, {"sha": "9c2341af59cf799ff599c7e9d0269b1e7d3a7750", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4", "patch": "@@ -881,7 +881,7 @@ package Exp_Util is\n    --  Is_Low_Bound and Is_High_Bound specify whether the expression to check\n    --  is the low or the high bound of a range. These three optional arguments\n    --  signal Remove_Side_Effects to create an external symbol of the form\n-   --  Chars (Related_Id)_FIRST/_LAST. If Related_Id is set, the exactly one\n+   --  Chars (Related_Id)_FIRST/_LAST. If Related_Id is set, then exactly one\n    --  of the Is_xxx_Bound flags must be set. For use of these parameters see\n    --  the warning in the body of Sem_Ch3.Process_Range_Expr_In_Decl.\n "}, {"sha": "53fc26166a3f78a097a5d2eedba26c909c262ca3", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4", "patch": "@@ -13172,6 +13172,10 @@ package body Sem_Ch3 is\n       T      : constant Entity_Id := Etype (Index);\n \n    begin\n+      Def_Id :=\n+        Create_Itype (E_Void, Related_Nod, Related_Id, Suffix, Suffix_Index);\n+      Set_Etype (Def_Id, Base_Type (T));\n+\n       if Nkind (S) = N_Range\n         or else\n           (Nkind (S) = N_Attribute_Reference\n@@ -13221,9 +13225,9 @@ package body Sem_Ch3 is\n \n          if Expander_Active or GNATprove_Mode then\n             Force_Evaluation\n-              (Low_Bound (R),  Related_Id => Related_Id, Is_Low_Bound => True);\n+              (Low_Bound (R),  Related_Id => Def_Id, Is_Low_Bound  => True);\n             Force_Evaluation\n-              (High_Bound (R), Related_Id => Related_Id, Is_Low_Bound => True);\n+              (High_Bound (R), Related_Id => Def_Id, Is_High_Bound => True);\n          end if;\n \n       elsif Nkind (S) = N_Discriminant_Association then\n@@ -13263,10 +13267,7 @@ package body Sem_Ch3 is\n          end if;\n       end if;\n \n-      Def_Id :=\n-        Create_Itype (E_Void, Related_Nod, Related_Id, Suffix, Suffix_Index);\n-\n-      Set_Etype (Def_Id, Base_Type (T));\n+      --  Complete construction of the Itype\n \n       if Is_Modular_Integer_Type (T) then\n          Set_Ekind (Def_Id, E_Modular_Integer_Subtype);\n@@ -13382,7 +13383,6 @@ package body Sem_Ch3 is\n       else\n          pragma Assert (No (C));\n          Set_Scalar_Range (Def_Id, Scalar_Range (T));\n-\n       end if;\n \n       Set_Discrete_RM_Size (Def_Id);\n@@ -20188,9 +20188,9 @@ package body Sem_Ch3 is\n                  (Hi, Related_Id => Subtyp, Is_High_Bound => True);\n             end if;\n \n-            --  We use a flag here instead of suppressing checks on the\n-            --  type because the type we check against isn't necessarily\n-            --  the place where we put the check.\n+            --  We use a flag here instead of suppressing checks on the type\n+            --  because the type we check against isn't necessarily the place\n+            --  where we put the check.\n \n             if not R_Check_Off then\n                R_Checks := Get_Range_Checks (R, T);"}, {"sha": "e58d5052d70e4fc5bec64ec40888782922f4d471", "filename": "gcc/ada/style.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4/gcc%2Fada%2Fstyle.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4/gcc%2Fada%2Fstyle.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyle.adb?ref=9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -264,10 +264,13 @@ package body Style is\n    begin\n       --  Perform the check on source subprograms and on subprogram instances,\n       --  because these can be primitives of untagged types. Note that such\n-      --  indicators were introduced in Ada 2005.\n+      --  indicators were introduced in Ada 2005. We apply Comes_From_Source\n+      --  to Original_Node to catch the case of a procedure body declared with\n+      --  \"is null\" that has been rewritten as a normal empty body.\n \n       if Style_Check_Missing_Overriding\n-        and then (Comes_From_Source (N) or else Is_Generic_Instance (E))\n+        and then (Comes_From_Source (Original_Node (N))\n+                   or else Is_Generic_Instance (E))\n         and then Ada_Version_Explicit >= Ada_2005\n       then\n          --  If the subprogram is an instantiation,  its declaration appears"}]}