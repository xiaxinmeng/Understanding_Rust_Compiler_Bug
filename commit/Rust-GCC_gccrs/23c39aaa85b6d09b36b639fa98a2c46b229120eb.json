{"sha": "23c39aaa85b6d09b36b639fa98a2c46b229120eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNjMzlhYWE4NWI2ZDA5YjM2YjYzOWZhOThhMmM0NmIyMjkxMjBlYg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-25T19:32:54Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-25T19:32:54Z"}, "message": "config/spu/spu.c: Use rtx_insn\n\ngcc/\n\t* config/spu/spu.c (frame_emit_store): Strengthen return type from\n\trtx to rtx_insn *.\n\t(frame_emit_load): Likewise.\n\t(frame_emit_add_imm): Likewise, also for local \"insn\".\n\t(spu_expand_prologue): Likewise for local \"insn\".\n\t(struct spu_bb_info): Likewise for field \"prop_jump\".\n\t(emit_nop_for_insn): Likewise for param \"insn\" and local\n\t\"new_insn\".\n\t(pad_bb): Likewise for locals \"insn\", \"next_insn\", \"prev_insn\",\n\t\"hbr_insn\".\n\t(spu_emit_branch_hint): Likewise for params \"before\", \"branch\" and\n\tlocals \"hint\", \"insn\".\n\t(get_branch_target): Likewise for param \"branch\".\n\t(insn_clobbers_hbr): Likewise for param \"insn\".\n\t(insert_hbrp_for_ilb_runout): Likewise for param \"first\" and\n\tlocals \"insn\", \"before_4\", \"before_16\".\n\t(insert_hbrp): Likewise for local \"insn\".\n\t(spu_machine_dependent_reorg): Likewise for locals \"branch\",\n\t\"insn\", \"next\", \"bbend\".\n\t(uses_ls_unit): Likewise for param \"insn\".\n\t(get_pipe): Likewise.\n\t(spu_sched_variable_issue): Rename param \"insn\" to \"uncast_insn\",\n\tintroducing a checked cast.\n\t(spu_sched_adjust_cost): Likewise for params \"insn\" and\n\t\"dep_insn\".\n\t(ea_load_store_inline): Strengthen local \"insn\" from rtx to rtx_insn *.\n\t(spu_sms_res_mii): Likewise.\n\nFrom-SVN: r214463", "tree": {"sha": "215d04f04c607ff3f2db59f7e5b1880b31c37962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/215d04f04c607ff3f2db59f7e5b1880b31c37962"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23c39aaa85b6d09b36b639fa98a2c46b229120eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c39aaa85b6d09b36b639fa98a2c46b229120eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23c39aaa85b6d09b36b639fa98a2c46b229120eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c39aaa85b6d09b36b639fa98a2c46b229120eb/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1faf324d3c4d2e3fc7bea27984d448e9e107cc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1faf324d3c4d2e3fc7bea27984d448e9e107cc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1faf324d3c4d2e3fc7bea27984d448e9e107cc4"}], "stats": {"total": 90, "additions": 63, "deletions": 27}, "files": [{"sha": "c865df151d474e882e53bb76aa8f397eb02f4262", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c39aaa85b6d09b36b639fa98a2c46b229120eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c39aaa85b6d09b36b639fa98a2c46b229120eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23c39aaa85b6d09b36b639fa98a2c46b229120eb", "patch": "@@ -1,3 +1,33 @@\n+2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/spu/spu.c (frame_emit_store): Strengthen return type from\n+\trtx to rtx_insn *.\n+\t(frame_emit_load): Likewise.\n+\t(frame_emit_add_imm): Likewise, also for local \"insn\".\n+\t(spu_expand_prologue): Likewise for local \"insn\".\n+\t(struct spu_bb_info): Likewise for field \"prop_jump\".\n+\t(emit_nop_for_insn): Likewise for param \"insn\" and local\n+\t\"new_insn\".\n+\t(pad_bb): Likewise for locals \"insn\", \"next_insn\", \"prev_insn\",\n+\t\"hbr_insn\".\n+\t(spu_emit_branch_hint): Likewise for params \"before\", \"branch\" and\n+\tlocals \"hint\", \"insn\".\n+\t(get_branch_target): Likewise for param \"branch\".\n+\t(insn_clobbers_hbr): Likewise for param \"insn\".\n+\t(insert_hbrp_for_ilb_runout): Likewise for param \"first\" and\n+\tlocals \"insn\", \"before_4\", \"before_16\".\n+\t(insert_hbrp): Likewise for local \"insn\".\n+\t(spu_machine_dependent_reorg): Likewise for locals \"branch\",\n+\t\"insn\", \"next\", \"bbend\".\n+\t(uses_ls_unit): Likewise for param \"insn\".\n+\t(get_pipe): Likewise.\n+\t(spu_sched_variable_issue): Rename param \"insn\" to \"uncast_insn\",\n+\tintroducing a checked cast.\n+\t(spu_sched_adjust_cost): Likewise for params \"insn\" and\n+\t\"dep_insn\".\n+\t(ea_load_store_inline): Strengthen local \"insn\" from rtx to rtx_insn *.\n+\t(spu_sms_res_mii): Likewise.\n+\n 2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/sparc/sparc-protos.h (output_ubranch): Strengthen param 2"}, {"sha": "b974b2362ac086f1abc3a218f5263f2ca3cc9ab8", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c39aaa85b6d09b36b639fa98a2c46b229120eb/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c39aaa85b6d09b36b639fa98a2c46b229120eb/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=23c39aaa85b6d09b36b639fa98a2c46b229120eb", "patch": "@@ -160,7 +160,7 @@ static struct spu_builtin_range spu_builtin_range[] = {\n char regs_ever_allocated[FIRST_PSEUDO_REGISTER];\n \n /*  Prototypes and external defs.  */\n-static int get_pipe (rtx insn);\n+static int get_pipe (rtx_insn *insn);\n static int spu_naked_function_p (tree func);\n static int mem_is_padded_component_ref (rtx x);\n static void fix_range (const char *);\n@@ -1632,7 +1632,7 @@ spu_saved_regs_size (void)\n   return reg_save_size;\n }\n \n-static rtx\n+static rtx_insn *\n frame_emit_store (int regno, rtx addr, HOST_WIDE_INT offset)\n {\n   rtx reg = gen_rtx_REG (V4SImode, regno);\n@@ -1641,7 +1641,7 @@ frame_emit_store (int regno, rtx addr, HOST_WIDE_INT offset)\n   return emit_insn (gen_movv4si (mem, reg));\n }\n \n-static rtx\n+static rtx_insn *\n frame_emit_load (int regno, rtx addr, HOST_WIDE_INT offset)\n {\n   rtx reg = gen_rtx_REG (V4SImode, regno);\n@@ -1651,10 +1651,10 @@ frame_emit_load (int regno, rtx addr, HOST_WIDE_INT offset)\n }\n \n /* This happens after reload, so we need to expand it.  */\n-static rtx\n+static rtx_insn *\n frame_emit_add_imm (rtx dst, rtx src, HOST_WIDE_INT imm, rtx scratch)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   if (satisfies_constraint_K (GEN_INT (imm)))\n     {\n       insn = emit_insn (gen_addsi3 (dst, src, GEN_INT (imm)));\n@@ -1725,7 +1725,8 @@ spu_expand_prologue (void)\n   HOST_WIDE_INT saved_regs_size;\n   rtx sp_reg = gen_rtx_REG (Pmode, STACK_POINTER_REGNUM);\n   rtx scratch_reg_0, scratch_reg_1;\n-  rtx insn, real;\n+  rtx_insn *insn;\n+  rtx real;\n \n   if (flag_pic && optimize == 0 && !cfun->machine->pic_reg)\n     cfun->machine->pic_reg = pic_offset_table_rtx;\n@@ -1969,7 +1970,7 @@ spu_const_from_ints(enum machine_mode mode, int a, int b, int c, int d)\n /* An array of these is used to propagate hints to predecessor blocks. */\n struct spu_bb_info\n {\n-  rtx prop_jump; /* propagated from another block */\n+  rtx_insn *prop_jump; /* propagated from another block */\n   int bb_index;  /* the original block. */\n };\n static struct spu_bb_info *spu_bb_info;\n@@ -1993,10 +1994,10 @@ static struct spu_bb_info *spu_bb_info;\n    We check for TImode to handle a MULTI1 insn which has dual issued its\n    first instruction.  get_pipe returns -1 for MULTI0 or inline asm.  */\n static void\n-emit_nop_for_insn (rtx insn)\n+emit_nop_for_insn (rtx_insn *insn)\n {\n   int p;\n-  rtx new_insn;\n+  rtx_insn *new_insn;\n \n   /* We need to handle JUMP_TABLE_DATA separately.  */\n   if (JUMP_TABLE_DATA_P (insn))\n@@ -2028,7 +2029,7 @@ emit_nop_for_insn (rtx insn)\n static void\n pad_bb(void)\n {\n-  rtx insn, next_insn, prev_insn, hbr_insn = 0;\n+  rtx_insn *insn, *next_insn, *prev_insn, *hbr_insn = 0;\n   int length;\n   int addr;\n \n@@ -2098,12 +2099,12 @@ pad_bb(void)\n /* Routines for branch hints. */\n \n static void\n-spu_emit_branch_hint (rtx before, rtx branch, rtx target,\n+spu_emit_branch_hint (rtx_insn *before, rtx_insn *branch, rtx target,\n \t\t      int distance, sbitmap blocks)\n {\n   rtx branch_label = 0;\n-  rtx hint;\n-  rtx insn;\n+  rtx_insn *hint;\n+  rtx_insn *insn;\n   rtx_jump_table_data *table;\n \n   if (before == 0 || branch == 0 || target == 0)\n@@ -2183,7 +2184,7 @@ spu_emit_branch_hint (rtx before, rtx branch, rtx target,\n /* Returns 0 if we don't want a hint for this branch.  Otherwise return\n    the rtx for the branch target. */\n static rtx\n-get_branch_target (rtx branch)\n+get_branch_target (rtx_insn *branch)\n {\n   if (JUMP_P (branch))\n     {\n@@ -2251,7 +2252,7 @@ get_branch_target (rtx branch)\n    should only be used in a clobber, and this function searches for\n    insns which clobber it.  */\n static bool\n-insn_clobbers_hbr (rtx insn)\n+insn_clobbers_hbr (rtx_insn *insn)\n {\n   if (INSN_P (insn)\n       && GET_CODE (PATTERN (insn)) == PARALLEL)\n@@ -2282,9 +2283,9 @@ insn_clobbers_hbr (rtx insn)\n    and an hbrp within 16 instructions of FIRST.\n  */\n static void\n-insert_hbrp_for_ilb_runout (rtx first)\n+insert_hbrp_for_ilb_runout (rtx_insn *first)\n {\n-  rtx insn, before_4 = 0, before_16 = 0;\n+  rtx_insn *insn, *before_4 = 0, *before_16 = 0;\n   int addr = 0, length, first_addr = -1;\n   int hbrp_addr0 = 128 * 4, hbrp_addr1 = 128 * 4;\n   int insert_lnop_after = 0;\n@@ -2414,7 +2415,7 @@ insert_hbrp_for_ilb_runout (rtx first)\n static void\n insert_hbrp (void)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   if (TARGET_SAFE_HINTS)\n     {\n       shorten_branches (get_insns ());\n@@ -2451,7 +2452,7 @@ spu_machine_dependent_reorg (void)\n {\n   sbitmap blocks;\n   basic_block bb;\n-  rtx branch, insn;\n+  rtx_insn *branch, *insn;\n   rtx branch_target = 0;\n   int branch_addr = 0, insn_addr, required_dist = 0;\n   int i;\n@@ -2523,7 +2524,7 @@ spu_machine_dependent_reorg (void)\n \t\t      || insn_clobbers_hbr (insn)\n \t\t      || branch_addr - insn_addr > 600))\n \t\t{\n-\t\t  rtx next = NEXT_INSN (insn);\n+\t\t  rtx_insn *next = NEXT_INSN (insn);\n \t\t  int next_addr = INSN_ADDRESSES (INSN_UID (next));\n \t\t  if (insn != BB_END (bb)\n \t\t      && branch_addr - next_addr >= required_dist)\n@@ -2562,7 +2563,7 @@ spu_machine_dependent_reorg (void)\n \t  /* If we haven't emitted a hint for this branch yet, it might\n \t     be profitable to emit it in one of the predecessor blocks,\n \t     especially for loops.  */\n-\t  rtx bbend;\n+\t  rtx_insn *bbend;\n \t  basic_block prev = 0, prop = 0, prev2 = 0;\n \t  int loop_exit = 0, simple_loop = 0;\n \t  int next_addr = INSN_ADDRESSES (INSN_UID (NEXT_INSN (insn)));\n@@ -2693,7 +2694,7 @@ spu_sched_issue_rate (void)\n }\n \n static int\n-uses_ls_unit(rtx insn)\n+uses_ls_unit(rtx_insn *insn)\n {\n   rtx set = single_set (insn);\n   if (set != 0\n@@ -2704,7 +2705,7 @@ uses_ls_unit(rtx insn)\n }\n \n static int\n-get_pipe (rtx insn)\n+get_pipe (rtx_insn *insn)\n {\n   enum attr_type t;\n   /* Handle inline asm */\n@@ -2800,10 +2801,12 @@ spu_sched_init (FILE *file ATTRIBUTE_UNUSED, int verbose ATTRIBUTE_UNUSED,\n \n static int\n spu_sched_variable_issue (FILE *file ATTRIBUTE_UNUSED,\n-\t\t\t  int verbose ATTRIBUTE_UNUSED, rtx insn, int more)\n+\t\t\t  int verbose ATTRIBUTE_UNUSED,\n+\t\t\t  rtx uncast_insn, int more)\n {\n   int len;\n   int p;\n+  rtx_insn *insn = as_a <rtx_insn *> (uncast_insn);\n   if (GET_CODE (PATTERN (insn)) == USE\n       || GET_CODE (PATTERN (insn)) == CLOBBER\n       || (len = get_attr_length (insn)) == 0)\n@@ -2997,9 +3000,11 @@ spu_sched_reorder (FILE *file ATTRIBUTE_UNUSED, int verbose ATTRIBUTE_UNUSED,\n \n /* INSN is dependent on DEP_INSN. */\n static int\n-spu_sched_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n+spu_sched_adjust_cost (rtx uncast_insn, rtx link, rtx uncast_dep_insn, int cost)\n {\n   rtx set;\n+  rtx_insn *insn = as_a <rtx_insn *> (uncast_insn);\n+  rtx_insn *dep_insn = as_a <rtx_insn *> (uncast_dep_insn);\n \n   /* The blockage pattern is used to prevent instructions from being\n      moved across it and has no cost. */\n@@ -4272,7 +4277,8 @@ ea_load_store_inline (rtx mem, bool is_store, rtx ea_addr, rtx data_addr)\n   rtx tag_eq_pack = gen_reg_rtx (V4SImode);\n   rtx tag_eq_pack_si = gen_reg_rtx (SImode);\n   rtx eq_index = gen_reg_rtx (SImode);\n-  rtx bcomp, hit_label, hit_ref, cont_label, insn;\n+  rtx bcomp, hit_label, hit_ref, cont_label;\n+  rtx_insn *insn;\n \n   if (spu_ea_model != 32)\n     {\n@@ -6839,7 +6845,7 @@ spu_sms_res_mii (struct ddg *g)\n \n   for (i = 0; i < g->num_nodes; i++)\n     {\n-      rtx insn = g->nodes[i].insn;\n+      rtx_insn *insn = g->nodes[i].insn;\n       int p = get_pipe (insn) + 2;\n \n       gcc_assert (p >= 0);"}]}