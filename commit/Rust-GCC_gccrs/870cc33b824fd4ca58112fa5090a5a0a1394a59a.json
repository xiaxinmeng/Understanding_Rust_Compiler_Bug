{"sha": "870cc33b824fd4ca58112fa5090a5a0a1394a59a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcwY2MzM2I4MjRmZDRjYTU4MTEyZmE1MDkwYTVhMGExMzk0YTU5YQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-16T06:29:26Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-16T06:29:26Z"}, "message": "(build_indirect_ref): Avoid *& short-cut if -fvolatile.\n\nFrom-SVN: r3475", "tree": {"sha": "82a0b9a7137b23d23afbf492752b9755bb8d853c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82a0b9a7137b23d23afbf492752b9755bb8d853c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/870cc33b824fd4ca58112fa5090a5a0a1394a59a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870cc33b824fd4ca58112fa5090a5a0a1394a59a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/870cc33b824fd4ca58112fa5090a5a0a1394a59a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870cc33b824fd4ca58112fa5090a5a0a1394a59a/comments", "author": null, "committer": null, "parents": [{"sha": "a73f14a3f91130cd6e4e5a46dfa5d751a4abafef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73f14a3f91130cd6e4e5a46dfa5d751a4abafef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a73f14a3f91130cd6e4e5a46dfa5d751a4abafef"}], "stats": {"total": 63, "additions": 33, "deletions": 30}, "files": [{"sha": "e1a402bb4f4352ba448d1a2329fcaedbaaa69c36", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870cc33b824fd4ca58112fa5090a5a0a1394a59a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870cc33b824fd4ca58112fa5090a5a0a1394a59a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=870cc33b824fd4ca58112fa5090a5a0a1394a59a", "patch": "@@ -1109,37 +1109,40 @@ build_indirect_ref (ptr, errorstring)\n   register tree type = TREE_TYPE (pointer);\n \n   if (TREE_CODE (type) == POINTER_TYPE)\n-    if (TREE_CODE (pointer) == ADDR_EXPR\n-\t&& (TREE_TYPE (TREE_OPERAND (pointer, 0))\n-\t    == TREE_TYPE (type)))\n-      return TREE_OPERAND (pointer, 0);\n-    else\n-      {\n-\ttree t = TREE_TYPE (type);\n-\tregister tree ref = build1 (INDIRECT_REF,\n-\t\t\t\t    TYPE_MAIN_VARIANT (t), pointer);\n+    {\n+      if (TREE_CODE (pointer) == ADDR_EXPR\n+\t  && !flag_volatile\n+\t  && (TREE_TYPE (TREE_OPERAND (pointer, 0))\n+\t      == TREE_TYPE (type)))\n+\treturn TREE_OPERAND (pointer, 0);\n+      else\n+\t{\n+\t  tree t = TREE_TYPE (type);\n+\t  register tree ref = build1 (INDIRECT_REF,\n+\t\t\t\t      TYPE_MAIN_VARIANT (t), pointer);\n \n-\tif (TYPE_SIZE (t) == 0 && TREE_CODE (t) != ARRAY_TYPE)\n-\t  {\n-\t    error (\"dereferencing pointer to incomplete type\");\n-\t    return error_mark_node;\n-\t  }\n-\tif (TREE_CODE (t) == VOID_TYPE)\n-\t  warning (\"dereferencing `void *' pointer\");\n-\n-\t/* We *must* set TREE_READONLY when dereferencing a pointer to const,\n-\t   so that we get the proper error message if the result is used\n-\t   to assign to.  Also, &* is supposed to be a no-op.\n-\t   And ANSI C seems to specify that the type of the result\n-\t   should be the const type.  */\n-\t/* A de-reference of a pointer to const is not a const.  It is valid\n-\t   to change it via some other pointer.  */\n-\tTREE_READONLY (ref) = TYPE_READONLY (t);\n-\tTREE_SIDE_EFFECTS (ref)\n-\t  = TYPE_VOLATILE (t) || TREE_SIDE_EFFECTS (pointer) || flag_volatile;\n-\tTREE_THIS_VOLATILE (ref) = TYPE_VOLATILE (t) || flag_volatile;\n-\treturn ref;\n-      }\n+\t  if (TYPE_SIZE (t) == 0 && TREE_CODE (t) != ARRAY_TYPE)\n+\t    {\n+\t      error (\"dereferencing pointer to incomplete type\");\n+\t      return error_mark_node;\n+\t    }\n+\t  if (TREE_CODE (t) == VOID_TYPE)\n+\t    warning (\"dereferencing `void *' pointer\");\n+\n+\t  /* We *must* set TREE_READONLY when dereferencing a pointer to const,\n+\t     so that we get the proper error message if the result is used\n+\t     to assign to.  Also, &* is supposed to be a no-op.\n+\t     And ANSI C seems to specify that the type of the result\n+\t     should be the const type.  */\n+\t  /* A de-reference of a pointer to const is not a const.  It is valid\n+\t     to change it via some other pointer.  */\n+\t  TREE_READONLY (ref) = TYPE_READONLY (t);\n+\t  TREE_SIDE_EFFECTS (ref)\n+\t    = TYPE_VOLATILE (t) || TREE_SIDE_EFFECTS (pointer) || flag_volatile;\n+\t  TREE_THIS_VOLATILE (ref) = TYPE_VOLATILE (t) || flag_volatile;\n+\t  return ref;\n+\t}\n+    }\n   else if (TREE_CODE (pointer) != ERROR_MARK)\n     error (\"invalid type argument of `%s'\", errorstring);\n   return error_mark_node;"}]}