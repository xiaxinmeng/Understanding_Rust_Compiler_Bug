{"sha": "11fc1858a0850253a8487eae391b9ea3fd24ea5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFmYzE4NThhMDg1MDI1M2E4NDg3ZWFlMzkxYjllYTNmZDI0ZWE1ZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-06-22T23:59:04Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-06-22T23:59:04Z"}, "message": "[multiple changes]\n\n\n2000-06-22 Steven King <sxking@uswest.net>\n\n        * acinclude.m4: Check for sinl, _sinl using 1 parameter.\n\n2000-06-22  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* acinclude.m4 (GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT): Redo. Use the\n\tsame approach as GLIBCPP_CHECK_MATH_SUPPORT, only don't try to\n\tlink against libm and don't use -fno-builtins...\n\t* math/mathconf.h: Change up builtin macros to new schema.\n\t* bits/std_cmath.h: And here. Wheee!\n\t* shadow/bits/std_cmath.h: And here.\n\t* acconfig.h: Change up builtin macros here.\n\t* math/cosf.c:  Remove.\n\t* math/fabsf.c:  Likewise.\n\t* math/sinf.c:  Likewise.\n\t* math/sqrtf.c:  Likewise.\n\t* math/Makefile.am (EXTRA_DIST):  Remove those four files.\n\t* math/Makefile.in:  Regenerate.\n\nFrom-SVN: r34655", "tree": {"sha": "55d68c4cdad4304329eba578c894b1baa8731a80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55d68c4cdad4304329eba578c894b1baa8731a80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11fc1858a0850253a8487eae391b9ea3fd24ea5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11fc1858a0850253a8487eae391b9ea3fd24ea5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11fc1858a0850253a8487eae391b9ea3fd24ea5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11fc1858a0850253a8487eae391b9ea3fd24ea5d/comments", "author": null, "committer": null, "parents": [{"sha": "28398c70a38735c784e2de4427870e780a2b23dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28398c70a38735c784e2de4427870e780a2b23dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28398c70a38735c784e2de4427870e780a2b23dd"}], "stats": {"total": 6154, "additions": 1821, "deletions": 4333}, "files": [{"sha": "bc5a1ca4bd264a22c37cc2ab30b5b47a3af209fa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=11fc1858a0850253a8487eae391b9ea3fd24ea5d", "patch": "@@ -1,3 +1,23 @@\n+2000-06-22 Steven King <sxking@uswest.net>\n+\n+        * acinclude.m4: Check for sinl, _sinl using 1 parameter.\n+\n+2000-06-22  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* acinclude.m4 (GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT): Redo. Use the\n+\tsame approach as GLIBCPP_CHECK_MATH_SUPPORT, only don't try to\n+\tlink against libm and don't use -fno-builtins...\n+\t* math/mathconf.h: Change up builtin macros to new schema.\n+\t* bits/std_cmath.h: And here. Wheee!\n+\t* shadow/bits/std_cmath.h: And here.\n+\t* acconfig.h: Change up builtin macros here.\n+\t* math/cosf.c:  Remove.\n+\t* math/fabsf.c:  Likewise.\n+\t* math/sinf.c:  Likewise.\n+\t* math/sqrtf.c:  Likewise.\n+\t* math/Makefile.am (EXTRA_DIST):  Remove those four files.\n+\t* math/Makefile.in:  Regenerate.\n+\n 2000-06-22  Anthony Williams  <anthony@anthonyw.cjb.net>\n \n \t* testsuite/21_strings/find.cc: Patch."}, {"sha": "01aca88544bffe5a31925c89fa1fe1690c808b07", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 17, "deletions": 173, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=11fc1858a0850253a8487eae391b9ea3fd24ea5d", "patch": "@@ -12,203 +12,47 @@\n // Define if code specialized for wchar_t should be used.\n #undef _GLIBCPP_USE_WCHAR_T\n \n-// Define if the compiler/host combination has __builtin_acos\n-#undef HAVE_BUILTIN_ACOS\n+// Define if the compiler/host combination has __builtin_abs\n+#undef HAVE___BUILTIN_ABS\n \n-// Define if the compiler/host combination has __builtin_acosf\n-#undef HAVE_BUILTIN_ACOSF\n-\n-// Define if the compiler/host combination has __builtin_acosl\n-#undef HAVE_BUILTIN_ACOSL\n-\n-// Define if the compiler/host combination has __builtin_asin\n-#undef HAVE_BUILTIN_ASIN\n-\n-// Define if the compiler/host combination has __builtin_asinf\n-#undef HAVE_BUILTIN_ASINF\n-\n-// Define if the compiler/host combination has __builtin_asinl\n-#undef HAVE_BUILTIN_ASINL\n-\n-// Define if the compiler/host combination has __builtin_atan\n-#undef HAVE_BUILTIN_ATAN\n-\n-// Define if the compiler/host combination has __builtin_atanf\n-#undef HAVE_BUILTIN_ATANF\n-\n-// Define if the compiler/host combination has __builtin_atanl\n-#undef HAVE_BUILTIN_ATANL\n-\n-// Define if the compiler/host combination has __builtin_atan2\n-#undef HAVE_BUILTIN_ATAN2\n-\n-// Define if the compiler/host combination has __builtin_atan2f\n-#undef HAVE_BUILTIN_ATAN2F\n-\n-// Define if the compiler/host combination has __builtin_atan2l\n-#undef HAVE_BUILTIN_ATAN2L\n-\n-// Define if the compiler/host combination has __builtin_ceil\n-#undef HAVE_BUILTIN_CEIL\n-\n-// Define if the compiler/host combination has __builtin_ceilf\n-#undef HAVE_BUILTIN_CEILF\n-\n-// Define if the compiler/host combination has __builtin_ceill\n-#undef HAVE_BUILTIN_CEILL\n+// Define if the compiler/host combination has __builtin_labs\n+#undef HAVE___BUILTIN_LABS\n \n // Define if the compiler/host combination has __builtin_cos\n-#undef HAVE_BUILTIN_COS\n+#undef HAVE___BUILTIN_COS\n \n // Define if the compiler/host combination has __builtin_cosf\n-#undef HAVE_BUILTIN_COSF\n+#undef HAVE___BUILTIN_COSF\n \n // Define if the compiler/host combination has __builtin_cosl\n-#undef HAVE_BUILTIN_COSL\n-\n-// Define if the compiler/host combination has __builtin_cosh\n-#undef HAVE_BUILTIN_COSH\n-\n-// Define if the compiler/host combination has __builtin_coshf\n-#undef HAVE_BUILTIN_COSHF\n-\n-// Define if the compiler/host combination has __builtin_coshl\n-#undef HAVE_BUILTIN_COSHL\n-\n-// Define if the compiler/host combination has __builtin_exp\n-#undef HAVE_BUILTIN_EXP\n-\n-// Define if the compiler/host combination has __builtin_expf\n-#undef HAVE_BUILTIN_EXPF\n-\n-// Define if the compiler/host combination has __builtin_expl\n-#undef HAVE_BUILTIN_EXPL\n+#undef HAVE___BUILTIN_COSL\n \n // Define if the compiler/host combination has __builtin_fabs\n-#undef HAVE_BUILTIN_FABS\n+#undef HAVE___BUILTIN_FABS\n \n // Define if the compiler/host combination has __builtin_fabsf\n-#undef HAVE_BUILTIN_FABSF\n+#undef HAVE___BUILTIN_FABSF\n \n // Define if the compiler/host combination has __builtin_fabsl\n-#undef HAVE_BUILTIN_FABSL\n-\n-// Define if the compiler/host combination has __builtin_floor\n-#undef HAVE_BUILTIN_FLOOR\n-\n-// Define if the compiler/host combination has __builtin_floorf\n-#undef HAVE_BUILTIN_FLOORF\n-\n-// Define if the compiler/host combination has __builtin_floorl\n-#undef HAVE_BUILTIN_FLOORL\n-\n-// Define if the compiler/host combination has __builtin_fmod\n-#undef HAVE_BUILTIN_FMOD\n-\n-// Define if the compiler/host combination has __builtin_fmodf\n-#undef HAVE_BUILTIN_FMODF\n-\n-// Define if the compiler/host combination has __builtin_fmodl\n-#undef HAVE_BUILTIN_FMODL\n-\n-// Define if the compiler/host combination has __builtin_frexp\n-#undef HAVE_BUILTIN_FREXP\n-\n-// Define if the compiler/host combination has __builtin_frexpf\n-#undef HAVE_BUILTIN_FREXPF\n-\n-// Define if the compiler/host combination has __builtin_frexpl\n-#undef HAVE_BUILTIN_FREXPL\n-\n-// Define if the compiler/host combination has __builtin_ldexp\n-#undef HAVE_BUILTIN_LDEXP\n-\n-// Define if the compiler/host combination has __builtin_ldexpf\n-#undef HAVE_BUILTIN_LDEXPF\n-\n-// Define if the compiler/host combination has __builtin_ldexpl\n-#undef HAVE_BUILTIN_LDEXPL\n-\n-// Define if the compiler/host combination has __builtin_log\n-#undef HAVE_BUILTIN_LOG\n-\n-// Define if the compiler/host combination has __builtin_logf\n-#undef HAVE_BUILTIN_LOGF\n-\n-// Define if the compiler/host combination has __builtin_logl\n-#undef HAVE_BUILTIN_LOGL\n-\n-// Define if the compiler/host combination has __builtin_log10\n-#undef HAVE_BUILTIN_LOG10\n-\n-// Define if the compiler/host combination has __builtin_log10f\n-#undef HAVE_BUILTIN_LOG10F\n-\n-// Define if the compiler/host combination has __builtin_log10l\n-#undef HAVE_BUILTIN_LOG10L\n-\n-// Define if the compiler/host combination has __builtin_modf\n-#undef HAVE_BUILTIN_MODF\n-\n-// Define if the compiler/host combination has __builtin_modff\n-#undef HAVE_BUILTIN_MODFF\n-\n-// Define if the compiler/host combination has __builtin_modfl\n-#undef HAVE_BUILTIN_MODFL\n-\n-// Define if the compiler/host combination has __builtin_pow\n-#undef HAVE_BUILTIN_POW\n-\n-// Define if the compiler/host combination has __builtin_powf\n-#undef HAVE_BUILTIN_POWF\n-\n-// Define if the compiler/host combination has __builtin_powl\n-#undef HAVE_BUILTIN_POWL\n+#undef HAVE___BUILTIN_FABSL\n \n // Define if the compiler/host combination has __builtin_sin\n-#undef HAVE_BUILTIN_SIN\n+#undef HAVE___BUILTIN_SIN\n \n // Define if the compiler/host combination has __builtin_sinf\n-#undef HAVE_BUILTIN_SINF\n+#undef HAVE___BUILTIN_SINF\n \n // Define if the compiler/host combination has __builtin_sinl\n-#undef HAVE_BUILTIN_SINL\n-\n-// Define if the compiler/host combination has __builtin_sinh\n-#undef HAVE_BUILTIN_SINH\n-\n-// Define if the compiler/host combination has __builtin_sinhf\n-#undef HAVE_BUILTIN_SINHF\n-\n-// Define if the compiler/host combination has __builtin_sinhl\n-#undef HAVE_BUILTIN_SINHL\n+#undef HAVE___BUILTIN_SINL\n \n-// Define if the compiler/host combination has __builtin_sqrt\n-#undef HAVE_BUILTIN_SQRT\n+// Define if the compiler/host combination has __builtin_fsqrt\n+#undef HAVE___BUILTIN_FSQRT\n \n // Define if the compiler/host combination has __builtin_sqrtf\n-#undef HAVE_BUILTIN_SQRTF\n+#undef HAVE___BUILTIN_SQRTF\n \n // Define if the compiler/host combination has __builtin_sqrtl\n-#undef HAVE_BUILTIN_SQRTL\n-\n-// Define if the compiler/host combination has __builtin_tan\n-#undef HAVE_BUILTIN_TAN\n-\n-// Define if the compiler/host combination has __builtin_tanf\n-#undef HAVE_BUILTIN_TANF\n-\n-// Define if the compiler/host combination has __builtin_tanl\n-#undef HAVE_BUILTIN_TANL\n-\n-// Define if the compiler/host combination has __builtin_tanh\n-#undef HAVE_BUILTIN_TANH\n-\n-// Define if the compiler/host combination has __builtin_tanhf\n-#undef HAVE_BUILTIN_TANHF\n-\n-// Define if the compiler/host combination has __builtin_tanhl\n-#undef HAVE_BUILTIN_TANHL\n+#undef HAVE___BUILTIN_SQRTL\n \n // Define if GCC support for __complex__ float is buggy.\n #undef _GLIBCPP_BUGGY_FLOAT_COMPLEX"}, {"sha": "b8d3337054de66e2434960c89abad83ee0a5fe72", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 124, "deletions": 623, "changes": 747, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=11fc1858a0850253a8487eae391b9ea3fd24ea5d", "patch": "@@ -286,613 +286,7 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n \n \n dnl\n-dnl Check to see what builtin math functions are supported\n-dnl\n-dnl check for __builtin_acos\n-dnl check for __builtin_acosf\n-dnl check for __builtin_acosl\n-dnl check for __builtin_asin\n-dnl check for __builtin_asinf\n-dnl check for __builtin_asinl\n-dnl check for __builtin_atan\n-dnl check for __builtin_atanf\n-dnl check for __builtin_atanl\n-dnl check for __builtin_atan2\n-dnl check for __builtin_atan2f\n-dnl check for __builtin_atan2l\n-dnl check for __builtin_ceil\n-dnl check for __builtin_ceilf\n-dnl check for __builtin_ceill\n-dnl check for __builtin_cos\n-dnl check for __builtin_cosf\n-dnl check for __builtin_cosl\n-dnl check for __builtin_cosh\n-dnl check for __builtin_coshf\n-dnl check for __builtin_coshl\n-dnl check for __builtin_exp\n-dnl check for __builtin_expf\n-dnl check for __builtin_expl\n-dnl check for __builtin_fabs\n-dnl check for __builtin_fabsf\n-dnl check for __builtin_fabsl\n-dnl check for __builtin_floor\n-dnl check for __builtin_floorf\n-dnl check for __builtin_floorl\n-dnl check for __builtin_fmod\n-dnl check for __builtin_fmodf\n-dnl check for __builtin_fmodl\n-dnl check for __builtin_frexp\n-dnl check for __builtin_frexpf\n-dnl check for __builtin_frexpl\n-dnl check for __builtin_ldexp\n-dnl check for __builtin_ldexpf\n-dnl check for __builtin_ldexpl\n-dnl check for __builtin_log\n-dnl check for __builtin_logf\n-dnl check for __builtin_logl\n-dnl check for __builtin_log10\n-dnl check for __builtin_log10f\n-dnl check for __builtin_log10l\n-dnl check for __builtin_modf\n-dnl check for __builtin_modff\n-dnl check for __builtin_modfl\n-dnl check for __builtin_pow\n-dnl check for __builtin_powf\n-dnl check for __builtin_powl\n-dnl check for __builtin_sin\n-dnl check for __builtin_sinf\n-dnl check for __builtin_sinl\n-dnl check for __builtin_sinh\n-dnl check for __builtin_sinhf\n-dnl check for __builtin_sinhl\n-dnl check for __builtin_sqrt\n-dnl check for __builtin_sqrtf\n-dnl check for __builtin_sqrtl\n-dnl check for __builtin_tan\n-dnl check for __builtin_tanf\n-dnl check for __builtin_tanl\n-dnl check for __builtin_tanh\n-dnl check for __builtin_tanhf\n-dnl check for __builtin_tanhl\n-dnl GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT\n-AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT, [\n-  dnl Test for builtin math functions.\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-  AC_MSG_CHECKING([for __builtin_acos])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_acos(0.0);], \n-  use_builtin_acos=yes, use_builtin_acos=no)\n-  AC_MSG_RESULT($use_builtin_acos)\n-  if test $use_builtin_acos = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ACOS)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_acosf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_acosf(0.0);], \n-  use_builtin_acosf=yes, use_builtin_acosf=no)\n-  AC_MSG_RESULT($use_builtin_acosf)\n-  if test $use_builtin_acosf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ACOSF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_acosl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_acosl(0.0);], \n-  use_builtin_acosl=yes, use_builtin_acosl=no)\n-  AC_MSG_RESULT($use_builtin_acosl)\n-  if test $use_builtin_acosl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ACOSL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_asin])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_asin(0.0);], \n-  use_builtin_asin=yes, use_builtin_asin=no)\n-  AC_MSG_RESULT($use_builtin_asin)\n-  if test $use_builtin_asin = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ASIN)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_asinf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_asinf(0.0);], \n-  use_builtin_asinf=yes, use_builtin_asinf=no)\n-  AC_MSG_RESULT($use_builtin_asinf)\n-  if test $use_builtin_asinf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ASINF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_asinl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_asinl(0.0);], \n-  use_builtin_asinl=yes, use_builtin_asinl=no)\n-  AC_MSG_RESULT($use_builtin_asinl)\n-  if test $use_builtin_asinl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ASINL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_atan])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_atan(0.0);], \n-  use_builtin_atan=yes, use_builtin_atan=no)\n-  AC_MSG_RESULT($use_builtin_atan)\n-  if test $use_builtin_atan = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ATAN)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_atanf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_atanf(0.0);], \n-  use_builtin_atanf=yes, use_builtin_atanf=no)\n-  AC_MSG_RESULT($use_builtin_atanf)\n-  if test $use_builtin_atanf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ATANF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_atanl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_atanl(0.0);], \n-  use_builtin_atanl=yes, use_builtin_atanl=no)\n-  AC_MSG_RESULT($use_builtin_atanl)\n-  if test $use_builtin_atanl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ATANL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_atan2])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_atan2(0.0, 0.0);], \n-  use_builtin_atan2=yes, use_builtin_atan2=no)\n-  AC_MSG_RESULT($use_builtin_atan2)\n-  if test $use_builtin_atan2 = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ATAN2)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_atan2f])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_atan2f(0.0, 0.0);], \n-  use_builtin_atan2f=yes, use_builtin_atan2f=no)\n-  AC_MSG_RESULT($use_builtin_atan2f)\n-  if test $use_builtin_atan2f = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ATAN2F)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_atan2l])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_atan2l(0.0, 0.0);], \n-  use_builtin_atan2l=yes, use_builtin_atan2l=no)\n-  AC_MSG_RESULT($use_builtin_atan2l)\n-  if test $use_builtin_atan2l = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ATAN2L)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_ceil])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_fceil(0.0);], \n-  use_builtin_ceil=yes, use_builtin_ceil=no)\n-  AC_MSG_RESULT($use_builtin_ceil)\n-  if test $use_builtin_ceil = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_CEIL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_ceilf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_ceilf(0.0);], \n-  use_builtin_ceilf=yes, use_builtin_ceilf=no)\n-  AC_MSG_RESULT($use_builtin_ceilf)\n-  if test $use_builtin_ceilf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_CEILF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_ceill])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_ceill(0.0);], \n-  use_builtin_ceill=yes, use_builtin_ceill=no)\n-  AC_MSG_RESULT($use_builtin_ceill)\n-  if test $use_builtin_ceill = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_CEILL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_cos])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_cos(0.0);], \n-  use_builtin_cos=yes, use_builtin_cos=no)\n-  AC_MSG_RESULT($use_builtin_cos)\n-  if test $use_builtin_cos = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_COS)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_cosf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_cosf(0.0);], \n-  use_builtin_cosf=yes, use_builtin_cosf=no)\n-  AC_MSG_RESULT($use_builtin_cosf)\n-  if test $use_builtin_cosf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_COSF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_cosl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_cosl(0.0);], \n-  use_builtin_cosl=yes, use_builtin_cosl=no)\n-  AC_MSG_RESULT($use_builtin_cosl)\n-  if test $use_builtin_cosl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_COSL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_cosh])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_cosh(0.0);], \n-  use_builtin_cosh=yes, use_builtin_cosh=no)\n-  AC_MSG_RESULT($use_builtin_cosh)\n-  if test $use_builtin_cosh = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_COSH)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_coshf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_coshf(0.0);], \n-  use_builtin_coshf=yes, use_builtin_coshf=no)\n-  AC_MSG_RESULT($use_builtin_coshf)\n-  if test $use_builtin_coshf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_COSHF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_coshl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_coshl(0.0);], \n-  use_builtin_coshl=yes, use_builtin_coshl=no)\n-  AC_MSG_RESULT($use_builtin_coshl)\n-  if test $use_builtin_coshl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_COSHL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_exp])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_exp(0.0);], \n-  use_builtin_exp=yes, use_builtin_exp=no)\n-  AC_MSG_RESULT($use_builtin_exp)\n-  if test $use_builtin_exp = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_EXP)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_expf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_expf(0.0);], \n-  use_builtin_expf=yes, use_builtin_expf=no)\n-  AC_MSG_RESULT($use_builtin_expf)\n-  if test $use_builtin_expf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_EXPF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_expl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_expl(0.0);], \n-  use_builtin_expl=yes, use_builtin_expl=no)\n-  AC_MSG_RESULT($use_builtin_expl)\n-  if test $use_builtin_expl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_EXPL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_fabs])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_fabs(0.0);], \n-  use_builtin_fabs=yes, use_builtin_fabs=no)\n-  AC_MSG_RESULT($use_builtin_fabs)\n-  if test $use_builtin_fabs = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FABS)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_fabsf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_fabsf(0.0);], \n-  use_builtin_fabsf=yes, use_builtin_fabsf=no)\n-  AC_MSG_RESULT($use_builtin_fabsf)\n-  if test $use_builtin_fabsf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FABSF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_fabsl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_fabsl(0.0);], \n-  use_builtin_fabsl=yes, use_builtin_fabsl=no)\n-  AC_MSG_RESULT($use_builtin_fabsl)\n-  if test $use_builtin_fabsl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FABSL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_floor])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_floor(0.0);], \n-  use_builtin_floor=yes, use_builtin_floor=no)\n-  AC_MSG_RESULT($use_builtin_floor)\n-  if test $use_builtin_floor = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FLOOR)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_floorf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_floorf(0.0);], \n-  use_builtin_floorf=yes, use_builtin_floorf=no)\n-  AC_MSG_RESULT($use_builtin_floorf)\n-  if test $use_builtin_floorf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FLOORF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_floorl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_floorl(0.0);], \n-  use_builtin_floorl=yes, use_builtin_floorl=no)\n-  AC_MSG_RESULT($use_builtin_floorl)\n-  if test $use_builtin_floorl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FLOORL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_fmod])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_fmod(0.0, 0.0);], \n-  use_builtin_fmod=yes, use_builtin_fmod=no)\n-  AC_MSG_RESULT($use_builtin_fmod)\n-  if test $use_builtin_fmod = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FMOD)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_fmodf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_fmodf(0.0, 0.0);], \n-  use_builtin_fmodf=yes, use_builtin_fmodf=no)\n-  AC_MSG_RESULT($use_builtin_fmodf)\n-  if test $use_builtin_fmodf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FMODF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_fmodl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_fmodl(0.0, 0.0);], \n-  use_builtin_fmodl=yes, use_builtin_fmodl=no)\n-  AC_MSG_RESULT($use_builtin_fmodl)\n-  if test $use_builtin_fmodl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FMODL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_frexp])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_frexp(0.0, 0);], \n-  use_builtin_frexp=yes, use_builtin_frexp=no)\n-  AC_MSG_RESULT($use_builtin_frexp)\n-  if test $use_builtin_frexp = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FREXP)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_frexpf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_frexpf(0.0, 0);], \n-  use_builtin_frexpf=yes, use_builtin_frexpf=no)\n-  AC_MSG_RESULT($use_builtin_frexpf)\n-  if test $use_builtin_frexpf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FREXPF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_frexpl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_frexpl(0.0, 0);], \n-  use_builtin_frexpl=yes, use_builtin_frexpl=no)\n-  AC_MSG_RESULT($use_builtin_frexpl)\n-  if test $use_builtin_frexpl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FREXPL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_ldexp])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_ldexp(0.0, 0);], \n-  use_builtin_ldexp=yes, use_builtin_ldexp=no)\n-  AC_MSG_RESULT($use_builtin_ldexp)\n-  if test $use_builtin_ldexp = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_LDEXP)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_ldexpf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_ldexpf(0.0, 0);], \n-  use_builtin_ldexpf=yes, use_builtin_ldexpf=no)\n-  AC_MSG_RESULT($use_builtin_ldexpf)\n-  if test $use_builtin_ldexpf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_LDEXPF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_ldexpl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_ldexpl(0.0, 0);], \n-  use_builtin_ldexpl=yes, use_builtin_ldexpl=no)\n-  AC_MSG_RESULT($use_builtin_ldexpl)\n-  if test $use_builtin_ldexpl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_LDEXPL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_log])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_log(0.0);], \n-  use_builtin_log=yes, use_builtin_log=no)\n-  AC_MSG_RESULT($use_builtin_log)\n-  if test $use_builtin_log = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_LOG)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_logf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_logf(0.0);], \n-  use_builtin_logf=yes, use_builtin_logf=no)\n-  AC_MSG_RESULT($use_builtin_logf)\n-  if test $use_builtin_logf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_LOGF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_logl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_logl(0.0);], \n-  use_builtin_logl=yes, use_builtin_logl=no)\n-  AC_MSG_RESULT($use_builtin_logl)\n-  if test $use_builtin_logl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_LOGL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_log10])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_log10(0.0);], \n-  use_builtin_log10=yes, use_builtin_log10=no)\n-  AC_MSG_RESULT($use_builtin_log10)\n-  if test $use_builtin_log10 = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_LOG10)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_log10f])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_log10f(0.0);], \n-  use_builtin_log10f=yes, use_builtin_log10f=no)\n-  AC_MSG_RESULT($use_builtin_log10f)\n-  if test $use_builtin_log10f = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_LOG10F)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_log10l])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_log10l(0.0);], \n-  use_builtin_log10l=yes, use_builtin_log10l=no)\n-  AC_MSG_RESULT($use_builtin_log10l)\n-  if test $use_builtin_log10l = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_LOG10L)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_modf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_modf(0.0, 0);], \n-  use_builtin_modf=yes, use_builtin_modf=no)\n-  AC_MSG_RESULT($use_builtin_modf)\n-  if test $use_builtin_modf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_MODF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_modff])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_modff(0.0, 0);], \n-  use_builtin_modff=yes, use_builtin_modff=no)\n-  AC_MSG_RESULT($use_builtin_modff)\n-  if test $use_builtin_modff = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_MODFF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_modfl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_modfl(0.0, 0);], \n-  use_builtin_modfl=yes, use_builtin_modfl=no)\n-  AC_MSG_RESULT($use_builtin_modfl)\n-  if test $use_builtin_modfl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_MODFL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_pow])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_pow(0.0, 0.0);], \n-  use_builtin_pow=yes, use_builtin_pow=no)\n-  AC_MSG_RESULT($use_builtin_pow)\n-  if test $use_builtin_pow = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_POW)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_powf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_powf(0.0, 0.0);], \n-  use_builtin_powf=yes, use_builtin_powf=no)\n-  AC_MSG_RESULT($use_builtin_powf)\n-  if test $use_builtin_powf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_POWF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_powl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_powl(0.0, 0.0);], \n-  use_builtin_powl=yes, use_builtin_powl=no)\n-  AC_MSG_RESULT($use_builtin_powl)\n-  if test $use_builtin_powl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_POWL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_sin])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_sin(0.0);], \n-  use_builtin_sin=yes, use_builtin_sin=no)\n-  AC_MSG_RESULT($use_builtin_sin)\n-  if test $use_builtin_sin = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_SIN)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_sinf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_sinf(0.0);], \n-  use_builtin_sinf=yes, use_builtin_sinf=no)\n-  AC_MSG_RESULT($use_builtin_sinf)\n-  if test $use_builtin_sinf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_SINF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_sinl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_sinl(0.0);], \n-  use_builtin_sinl=yes, use_builtin_sinl=no)\n-  AC_MSG_RESULT($use_builtin_sinl)\n-  if test $use_builtin_sinl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_SINL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_sinh])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_sinh(0.0);], \n-  use_builtin_sinh=yes, use_builtin_sinh=no)\n-  AC_MSG_RESULT($use_builtin_sinh)\n-  if test $use_builtin_sinh = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_SINH)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_sinhf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_sinhf(0.0);], \n-  use_builtin_sinhf=yes, use_builtin_sinhf=no)\n-  AC_MSG_RESULT($use_builtin_sinhf)\n-  if test $use_builtin_sinhf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_SINHF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_sinhl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_sinhl(0.0);], \n-  use_builtin_sinhl=yes, use_builtin_sinhl=no)\n-  AC_MSG_RESULT($use_builtin_sinhl)\n-  if test $use_builtin_sinhl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_SINHL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_sqrt])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_fsqrt(0.0);], \n-  use_builtin_sqrt=yes, use_builtin_sqrt=no)\n-  AC_MSG_RESULT($use_builtin_sqrt)\n-  if test $use_builtin_sqrt = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_SQRT)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_sqrtf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_sqrtf(0.0);], \n-  use_builtin_sqrtf=yes, use_builtin_sqrtf=no)\n-  AC_MSG_RESULT($use_builtin_sqrtf)\n-  if test $use_builtin_sqrtf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_SQRTF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_sqrtl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_sqrtl(0.0);], \n-  use_builtin_sqrtl=yes, use_builtin_sqrtl=no)\n-  AC_MSG_RESULT($use_builtin_sqrtl)\n-  if test $use_builtin_sqrtl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_SQRTL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_tan])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_tan(0.0);], \n-  use_builtin_tan=yes, use_builtin_tan=no)\n-  AC_MSG_RESULT($use_builtin_tan)\n-  if test $use_builtin_tan = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_TAN)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_tanf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_tanf(0.0);], \n-  use_builtin_tanf=yes, use_builtin_tanf=no)\n-  AC_MSG_RESULT($use_builtin_tanf)\n-  if test $use_builtin_tanf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_TANF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_tanl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_tanl(0.0);], \n-  use_builtin_tanl=yes, use_builtin_tanl=no)\n-  AC_MSG_RESULT($use_builtin_tanl)\n-  if test $use_builtin_tanl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_TANL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_tanh])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_tanh(0.0);], \n-  use_builtin_tanh=yes, use_builtin_tanh=no)\n-  AC_MSG_RESULT($use_builtin_tanh)\n-  if test $use_builtin_tanh = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_TANH)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_tanhf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_tanhf(0.0);], \n-  use_builtin_tanhf=yes, use_builtin_tanhf=no)\n-  AC_MSG_RESULT($use_builtin_tanhf)\n-  if test $use_builtin_tanhf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_TANHF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_tanhl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_tanhl(0.0);], \n-  use_builtin_tanhl=yes, use_builtin_tanhl=no)\n-  AC_MSG_RESULT($use_builtin_tanhl)\n-  if test $use_builtin_tanhl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_TANHL)\n-  fi\n-  AC_LANG_RESTORE\n-])\n-\n-\n-dnl\n-dnl Check to see if the argument passed is\n+dnl Check to see if the (math function) argument passed is\n dnl 1) declared when using the c++ compiler\n dnl 2) has \"C\" linkage\n dnl\n@@ -919,7 +313,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, [\n \n \n dnl\n-dnl Check to see if the argument passed is\n+dnl Check to see if the (math function) argument passed is\n dnl 1) declared when using the c++ compiler\n dnl 2) has \"C\" linkage\n dnl\n@@ -946,7 +340,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2, [\n \n \n dnl\n-dnl Check to see if the argument passed is\n+dnl Check to see if the (math function) argument passed is\n dnl 1) declared when using the c++ compiler\n dnl 2) has \"C\" linkage\n dnl\n@@ -972,6 +366,109 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3, [\n ])\n \n \n+dnl\n+dnl Because the builtins are picky picky picky about the arguments they take, \n+dnl do an explict linkage tests here.\n+dnl Check to see if the (math function) argument passed is\n+dnl 1) declared when using the c++ compiler\n+dnl 2) has \"C\" linkage\n+dnl\n+dnl Define HAVE_CARGF etc if \"cargf\" is declared and links\n+dnl\n+dnl argument 1 is name of function to check\n+dnl\n+dnl ASSUMES argument is a math function with ONE parameter\n+dnl\n+dnl GLIBCPP_CHECK_BUILTIN_MATH_DECL_LINKAGE_1\n+AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1, [\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_MSG_CHECKING([for $1 declaration])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ $1(0);], \n+  [use_$1=yes], [use_$1=no])\n+  AC_MSG_RESULT($use_$1)\n+  AC_LANG_RESTORE\n+  if test x$use_$1 = x\"yes\"; then\n+    AC_MSG_CHECKING([for $1 linkage])\n+      AC_TRY_LINK([#include <math.h>], \n+      [ $1(0);],\n+      [link_$1=yes], [link_$1=no])\n+    AC_MSG_RESULT($link_$1)\n+    if test x$link_$1 = x\"yes\"; then\n+      ac_tr_func=HAVE_`echo $1 | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`\n+      AC_DEFINE_UNQUOTED(${ac_tr_func})\n+    fi\n+  fi\n+])\n+\n+\n+dnl\n+dnl Check to see what builtin math functions are supported\n+dnl\n+dnl check for __builtin_abs\n+dnl check for __builtin_fabsf\n+dnl check for __builtin_fabs\n+dnl check for __builtin_fabl\n+dnl check for __builtin_labs\n+dnl check for __builtin_sqrtf\n+dnl check for __builtin_sqrtl\n+dnl check for __builtin_fsqrt\n+dnl check for __builtin_sinf\n+dnl check for __builtin_sin\n+dnl check for __builtin_sinl\n+dnl check for __builtin_cosf\n+dnl check for __builtin_cos\n+dnl check for __builtin_cosl\n+dnl\n+dnl GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT\n+AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT, [\n+  dnl Test for builtin math functions.\n+  dnl These are made in gcc/c-common.c \n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_abs)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabsf)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabs)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabsl)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_labs)\n+\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sqrtf)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fsqrt)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sqrtl)\n+\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sinf)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sin)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sinl)\n+\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_cosf)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_cos)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_cosl)\n+\n+  dnl There is, without a doubt, a more elegant way to have these\n+  dnl names exported so that they won't be stripped out of acconfig.h by\n+  dnl autoheader. I leave this as an exercise to somebody less frustrated\n+  dnl than I.... please email the libstdc++ list if you can figure out a\n+  dnl more elegant approach (see autoconf/acgen.m4 and specifically\n+  dnl AC_CHECK_FUNC for things to steal.)\n+  dummyvar=no\n+  if test x$dummyvar = x\"yes\"; then\n+    AC_DEFINE(HAVE___BUILTIN_ABS)\n+    AC_DEFINE(HAVE___BUILTIN_LABS)\n+    AC_DEFINE(HAVE___BUILTIN_COS)\n+    AC_DEFINE(HAVE___BUILTIN_COSF)\n+    AC_DEFINE(HAVE___BUILTIN_COSL)\n+    AC_DEFINE(HAVE___BUILTIN_FABS)\n+    AC_DEFINE(HAVE___BUILTIN_FABSF)\n+    AC_DEFINE(HAVE___BUILTIN_FABSL)\n+    AC_DEFINE(HAVE___BUILTIN_SIN)\n+    AC_DEFINE(HAVE___BUILTIN_SINF)\n+    AC_DEFINE(HAVE___BUILTIN_SINL)\n+    AC_DEFINE(HAVE___BUILTIN_FSQRT)\n+    AC_DEFINE(HAVE___BUILTIN_SQRTF)\n+    AC_DEFINE(HAVE___BUILTIN_SQRTL)\n+  fi\n+])\n+\n+\n dnl\n dnl Check to see what the underlying c library or math library is like.\n dnl These checks need to do two things: \n@@ -1035,7 +532,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   dnl Check to see if basic C math functions have long double versions.\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnanl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinfl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(copysignl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(copysignl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(acosl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(asinl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(atanl)\n@@ -1053,7 +550,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(log10l)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(modfl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(powl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(sinl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sinl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sinhl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sqrtl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(tanl)\n@@ -1105,7 +602,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   dnl Check to see if basic C math functions have long double versions.\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isnanl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isinfl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_copysignl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_copysignl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_acosl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_asinl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_atanl)\n@@ -1123,7 +620,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_log10l)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_modfl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_powl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_sinl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sinl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sinhl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sqrtl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_tanl)\n@@ -1149,16 +646,20 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   AC_CHECK_HEADERS([complex.h])\n   AC_REPLACE_MATHFUNCS(ccos ccosf ccosh ccoshf cexp cexpf c_log c_logf \\\n   clog10 clog10f cpow cpowf csin csinf csinh csinhf csqrt csqrtf \\\n-  ctan ctanf ctanh ctanhf \\\n-  carg cargf nan hypot hypotf atan2f expf copysignf)\n-\n-  dnl We compile the long double complex functions only if the function \n-  dnl provides the non-complex long double functions.\n-  USE_LONG_DOUBLE=no\n-  AC_CHECK_FUNC(copysignl,\n-  USE_LONG_DOUBLE=yes\n-  AC_REPLACE_MATHFUNCS(ccoshl ccosl cexpl cpowl csinhl csinl \\\n-  csqrtl ctanhl ctanl cargl hypotl signbitl c_logl clog10l))\n+  ctan ctanf ctanh ctanhf carg cargf nan hypot hypotf atan2f expf copysignf)\n+\n+  dnl Compile the long double complex functions only if the function \n+  dnl provides the non-complex long double functions that are needed.\n+  dnl Currently this includes copysignl and atan2l, which should be\n+  dnl cached from the GLIBCPP_CHECK_MATH_SUPPORT macro, above.\n+  USE_COMPLEX_LONG_DOUBLE=no\n+  if test x$ac_cv_func_atan2l = x\"yes\" \\\n+     && test x$ac_cv_func_copysignl = x\"yes\"; then\n+    USE_COMPLEX_LONG_DOUBLE=yes\n+    AC_REPLACE_MATHFUNCS(ccoshl ccosl cexpl cpowl csinhl csinl \\\n+    csqrtl ctanhl ctanl cargl hypotl signbitl c_logl clog10l)\n+  fi\n+\n   AC_SUBST(USE_COMPLEX_LONG_DOUBLE)\n ])\n "}, {"sha": "41ca7a46dc7b4daf73d79cf8c3bee74ed3207387", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 124, "deletions": 623, "changes": 747, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=11fc1858a0850253a8487eae391b9ea3fd24ea5d", "patch": "@@ -298,613 +298,7 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n \n \n dnl\n-dnl Check to see what builtin math functions are supported\n-dnl\n-dnl check for __builtin_acos\n-dnl check for __builtin_acosf\n-dnl check for __builtin_acosl\n-dnl check for __builtin_asin\n-dnl check for __builtin_asinf\n-dnl check for __builtin_asinl\n-dnl check for __builtin_atan\n-dnl check for __builtin_atanf\n-dnl check for __builtin_atanl\n-dnl check for __builtin_atan2\n-dnl check for __builtin_atan2f\n-dnl check for __builtin_atan2l\n-dnl check for __builtin_ceil\n-dnl check for __builtin_ceilf\n-dnl check for __builtin_ceill\n-dnl check for __builtin_cos\n-dnl check for __builtin_cosf\n-dnl check for __builtin_cosl\n-dnl check for __builtin_cosh\n-dnl check for __builtin_coshf\n-dnl check for __builtin_coshl\n-dnl check for __builtin_exp\n-dnl check for __builtin_expf\n-dnl check for __builtin_expl\n-dnl check for __builtin_fabs\n-dnl check for __builtin_fabsf\n-dnl check for __builtin_fabsl\n-dnl check for __builtin_floor\n-dnl check for __builtin_floorf\n-dnl check for __builtin_floorl\n-dnl check for __builtin_fmod\n-dnl check for __builtin_fmodf\n-dnl check for __builtin_fmodl\n-dnl check for __builtin_frexp\n-dnl check for __builtin_frexpf\n-dnl check for __builtin_frexpl\n-dnl check for __builtin_ldexp\n-dnl check for __builtin_ldexpf\n-dnl check for __builtin_ldexpl\n-dnl check for __builtin_log\n-dnl check for __builtin_logf\n-dnl check for __builtin_logl\n-dnl check for __builtin_log10\n-dnl check for __builtin_log10f\n-dnl check for __builtin_log10l\n-dnl check for __builtin_modf\n-dnl check for __builtin_modff\n-dnl check for __builtin_modfl\n-dnl check for __builtin_pow\n-dnl check for __builtin_powf\n-dnl check for __builtin_powl\n-dnl check for __builtin_sin\n-dnl check for __builtin_sinf\n-dnl check for __builtin_sinl\n-dnl check for __builtin_sinh\n-dnl check for __builtin_sinhf\n-dnl check for __builtin_sinhl\n-dnl check for __builtin_sqrt\n-dnl check for __builtin_sqrtf\n-dnl check for __builtin_sqrtl\n-dnl check for __builtin_tan\n-dnl check for __builtin_tanf\n-dnl check for __builtin_tanl\n-dnl check for __builtin_tanh\n-dnl check for __builtin_tanhf\n-dnl check for __builtin_tanhl\n-dnl GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT\n-AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT, [\n-  dnl Test for builtin math functions.\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-  AC_MSG_CHECKING([for __builtin_acos])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_acos(0.0);], \n-  use_builtin_acos=yes, use_builtin_acos=no)\n-  AC_MSG_RESULT($use_builtin_acos)\n-  if test $use_builtin_acos = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ACOS)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_acosf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_acosf(0.0);], \n-  use_builtin_acosf=yes, use_builtin_acosf=no)\n-  AC_MSG_RESULT($use_builtin_acosf)\n-  if test $use_builtin_acosf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ACOSF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_acosl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_acosl(0.0);], \n-  use_builtin_acosl=yes, use_builtin_acosl=no)\n-  AC_MSG_RESULT($use_builtin_acosl)\n-  if test $use_builtin_acosl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ACOSL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_asin])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_asin(0.0);], \n-  use_builtin_asin=yes, use_builtin_asin=no)\n-  AC_MSG_RESULT($use_builtin_asin)\n-  if test $use_builtin_asin = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ASIN)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_asinf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_asinf(0.0);], \n-  use_builtin_asinf=yes, use_builtin_asinf=no)\n-  AC_MSG_RESULT($use_builtin_asinf)\n-  if test $use_builtin_asinf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ASINF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_asinl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_asinl(0.0);], \n-  use_builtin_asinl=yes, use_builtin_asinl=no)\n-  AC_MSG_RESULT($use_builtin_asinl)\n-  if test $use_builtin_asinl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ASINL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_atan])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_atan(0.0);], \n-  use_builtin_atan=yes, use_builtin_atan=no)\n-  AC_MSG_RESULT($use_builtin_atan)\n-  if test $use_builtin_atan = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ATAN)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_atanf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_atanf(0.0);], \n-  use_builtin_atanf=yes, use_builtin_atanf=no)\n-  AC_MSG_RESULT($use_builtin_atanf)\n-  if test $use_builtin_atanf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ATANF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_atanl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_atanl(0.0);], \n-  use_builtin_atanl=yes, use_builtin_atanl=no)\n-  AC_MSG_RESULT($use_builtin_atanl)\n-  if test $use_builtin_atanl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ATANL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_atan2])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_atan2(0.0, 0.0);], \n-  use_builtin_atan2=yes, use_builtin_atan2=no)\n-  AC_MSG_RESULT($use_builtin_atan2)\n-  if test $use_builtin_atan2 = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ATAN2)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_atan2f])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_atan2f(0.0, 0.0);], \n-  use_builtin_atan2f=yes, use_builtin_atan2f=no)\n-  AC_MSG_RESULT($use_builtin_atan2f)\n-  if test $use_builtin_atan2f = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ATAN2F)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_atan2l])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_atan2l(0.0, 0.0);], \n-  use_builtin_atan2l=yes, use_builtin_atan2l=no)\n-  AC_MSG_RESULT($use_builtin_atan2l)\n-  if test $use_builtin_atan2l = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_ATAN2L)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_ceil])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_fceil(0.0);], \n-  use_builtin_ceil=yes, use_builtin_ceil=no)\n-  AC_MSG_RESULT($use_builtin_ceil)\n-  if test $use_builtin_ceil = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_CEIL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_ceilf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_ceilf(0.0);], \n-  use_builtin_ceilf=yes, use_builtin_ceilf=no)\n-  AC_MSG_RESULT($use_builtin_ceilf)\n-  if test $use_builtin_ceilf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_CEILF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_ceill])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_ceill(0.0);], \n-  use_builtin_ceill=yes, use_builtin_ceill=no)\n-  AC_MSG_RESULT($use_builtin_ceill)\n-  if test $use_builtin_ceill = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_CEILL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_cos])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_cos(0.0);], \n-  use_builtin_cos=yes, use_builtin_cos=no)\n-  AC_MSG_RESULT($use_builtin_cos)\n-  if test $use_builtin_cos = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_COS)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_cosf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_cosf(0.0);], \n-  use_builtin_cosf=yes, use_builtin_cosf=no)\n-  AC_MSG_RESULT($use_builtin_cosf)\n-  if test $use_builtin_cosf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_COSF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_cosl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_cosl(0.0);], \n-  use_builtin_cosl=yes, use_builtin_cosl=no)\n-  AC_MSG_RESULT($use_builtin_cosl)\n-  if test $use_builtin_cosl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_COSL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_cosh])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_cosh(0.0);], \n-  use_builtin_cosh=yes, use_builtin_cosh=no)\n-  AC_MSG_RESULT($use_builtin_cosh)\n-  if test $use_builtin_cosh = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_COSH)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_coshf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_coshf(0.0);], \n-  use_builtin_coshf=yes, use_builtin_coshf=no)\n-  AC_MSG_RESULT($use_builtin_coshf)\n-  if test $use_builtin_coshf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_COSHF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_coshl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_coshl(0.0);], \n-  use_builtin_coshl=yes, use_builtin_coshl=no)\n-  AC_MSG_RESULT($use_builtin_coshl)\n-  if test $use_builtin_coshl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_COSHL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_exp])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_exp(0.0);], \n-  use_builtin_exp=yes, use_builtin_exp=no)\n-  AC_MSG_RESULT($use_builtin_exp)\n-  if test $use_builtin_exp = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_EXP)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_expf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_expf(0.0);], \n-  use_builtin_expf=yes, use_builtin_expf=no)\n-  AC_MSG_RESULT($use_builtin_expf)\n-  if test $use_builtin_expf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_EXPF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_expl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_expl(0.0);], \n-  use_builtin_expl=yes, use_builtin_expl=no)\n-  AC_MSG_RESULT($use_builtin_expl)\n-  if test $use_builtin_expl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_EXPL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_fabs])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_fabs(0.0);], \n-  use_builtin_fabs=yes, use_builtin_fabs=no)\n-  AC_MSG_RESULT($use_builtin_fabs)\n-  if test $use_builtin_fabs = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FABS)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_fabsf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_fabsf(0.0);], \n-  use_builtin_fabsf=yes, use_builtin_fabsf=no)\n-  AC_MSG_RESULT($use_builtin_fabsf)\n-  if test $use_builtin_fabsf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FABSF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_fabsl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_fabsl(0.0);], \n-  use_builtin_fabsl=yes, use_builtin_fabsl=no)\n-  AC_MSG_RESULT($use_builtin_fabsl)\n-  if test $use_builtin_fabsl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FABSL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_floor])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_floor(0.0);], \n-  use_builtin_floor=yes, use_builtin_floor=no)\n-  AC_MSG_RESULT($use_builtin_floor)\n-  if test $use_builtin_floor = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FLOOR)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_floorf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_floorf(0.0);], \n-  use_builtin_floorf=yes, use_builtin_floorf=no)\n-  AC_MSG_RESULT($use_builtin_floorf)\n-  if test $use_builtin_floorf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FLOORF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_floorl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_floorl(0.0);], \n-  use_builtin_floorl=yes, use_builtin_floorl=no)\n-  AC_MSG_RESULT($use_builtin_floorl)\n-  if test $use_builtin_floorl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FLOORL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_fmod])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_fmod(0.0, 0.0);], \n-  use_builtin_fmod=yes, use_builtin_fmod=no)\n-  AC_MSG_RESULT($use_builtin_fmod)\n-  if test $use_builtin_fmod = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FMOD)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_fmodf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_fmodf(0.0, 0.0);], \n-  use_builtin_fmodf=yes, use_builtin_fmodf=no)\n-  AC_MSG_RESULT($use_builtin_fmodf)\n-  if test $use_builtin_fmodf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FMODF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_fmodl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_fmodl(0.0, 0.0);], \n-  use_builtin_fmodl=yes, use_builtin_fmodl=no)\n-  AC_MSG_RESULT($use_builtin_fmodl)\n-  if test $use_builtin_fmodl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FMODL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_frexp])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_frexp(0.0, 0);], \n-  use_builtin_frexp=yes, use_builtin_frexp=no)\n-  AC_MSG_RESULT($use_builtin_frexp)\n-  if test $use_builtin_frexp = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FREXP)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_frexpf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_frexpf(0.0, 0);], \n-  use_builtin_frexpf=yes, use_builtin_frexpf=no)\n-  AC_MSG_RESULT($use_builtin_frexpf)\n-  if test $use_builtin_frexpf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FREXPF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_frexpl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_frexpl(0.0, 0);], \n-  use_builtin_frexpl=yes, use_builtin_frexpl=no)\n-  AC_MSG_RESULT($use_builtin_frexpl)\n-  if test $use_builtin_frexpl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_FREXPL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_ldexp])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_ldexp(0.0, 0);], \n-  use_builtin_ldexp=yes, use_builtin_ldexp=no)\n-  AC_MSG_RESULT($use_builtin_ldexp)\n-  if test $use_builtin_ldexp = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_LDEXP)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_ldexpf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_ldexpf(0.0, 0);], \n-  use_builtin_ldexpf=yes, use_builtin_ldexpf=no)\n-  AC_MSG_RESULT($use_builtin_ldexpf)\n-  if test $use_builtin_ldexpf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_LDEXPF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_ldexpl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_ldexpl(0.0, 0);], \n-  use_builtin_ldexpl=yes, use_builtin_ldexpl=no)\n-  AC_MSG_RESULT($use_builtin_ldexpl)\n-  if test $use_builtin_ldexpl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_LDEXPL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_log])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_log(0.0);], \n-  use_builtin_log=yes, use_builtin_log=no)\n-  AC_MSG_RESULT($use_builtin_log)\n-  if test $use_builtin_log = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_LOG)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_logf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_logf(0.0);], \n-  use_builtin_logf=yes, use_builtin_logf=no)\n-  AC_MSG_RESULT($use_builtin_logf)\n-  if test $use_builtin_logf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_LOGF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_logl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_logl(0.0);], \n-  use_builtin_logl=yes, use_builtin_logl=no)\n-  AC_MSG_RESULT($use_builtin_logl)\n-  if test $use_builtin_logl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_LOGL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_log10])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_log10(0.0);], \n-  use_builtin_log10=yes, use_builtin_log10=no)\n-  AC_MSG_RESULT($use_builtin_log10)\n-  if test $use_builtin_log10 = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_LOG10)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_log10f])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_log10f(0.0);], \n-  use_builtin_log10f=yes, use_builtin_log10f=no)\n-  AC_MSG_RESULT($use_builtin_log10f)\n-  if test $use_builtin_log10f = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_LOG10F)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_log10l])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_log10l(0.0);], \n-  use_builtin_log10l=yes, use_builtin_log10l=no)\n-  AC_MSG_RESULT($use_builtin_log10l)\n-  if test $use_builtin_log10l = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_LOG10L)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_modf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_modf(0.0, 0);], \n-  use_builtin_modf=yes, use_builtin_modf=no)\n-  AC_MSG_RESULT($use_builtin_modf)\n-  if test $use_builtin_modf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_MODF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_modff])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_modff(0.0, 0);], \n-  use_builtin_modff=yes, use_builtin_modff=no)\n-  AC_MSG_RESULT($use_builtin_modff)\n-  if test $use_builtin_modff = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_MODFF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_modfl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_modfl(0.0, 0);], \n-  use_builtin_modfl=yes, use_builtin_modfl=no)\n-  AC_MSG_RESULT($use_builtin_modfl)\n-  if test $use_builtin_modfl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_MODFL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_pow])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_pow(0.0, 0.0);], \n-  use_builtin_pow=yes, use_builtin_pow=no)\n-  AC_MSG_RESULT($use_builtin_pow)\n-  if test $use_builtin_pow = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_POW)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_powf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_powf(0.0, 0.0);], \n-  use_builtin_powf=yes, use_builtin_powf=no)\n-  AC_MSG_RESULT($use_builtin_powf)\n-  if test $use_builtin_powf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_POWF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_powl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_powl(0.0, 0.0);], \n-  use_builtin_powl=yes, use_builtin_powl=no)\n-  AC_MSG_RESULT($use_builtin_powl)\n-  if test $use_builtin_powl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_POWL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_sin])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_sin(0.0);], \n-  use_builtin_sin=yes, use_builtin_sin=no)\n-  AC_MSG_RESULT($use_builtin_sin)\n-  if test $use_builtin_sin = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_SIN)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_sinf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_sinf(0.0);], \n-  use_builtin_sinf=yes, use_builtin_sinf=no)\n-  AC_MSG_RESULT($use_builtin_sinf)\n-  if test $use_builtin_sinf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_SINF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_sinl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_sinl(0.0);], \n-  use_builtin_sinl=yes, use_builtin_sinl=no)\n-  AC_MSG_RESULT($use_builtin_sinl)\n-  if test $use_builtin_sinl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_SINL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_sinh])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_sinh(0.0);], \n-  use_builtin_sinh=yes, use_builtin_sinh=no)\n-  AC_MSG_RESULT($use_builtin_sinh)\n-  if test $use_builtin_sinh = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_SINH)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_sinhf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_sinhf(0.0);], \n-  use_builtin_sinhf=yes, use_builtin_sinhf=no)\n-  AC_MSG_RESULT($use_builtin_sinhf)\n-  if test $use_builtin_sinhf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_SINHF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_sinhl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_sinhl(0.0);], \n-  use_builtin_sinhl=yes, use_builtin_sinhl=no)\n-  AC_MSG_RESULT($use_builtin_sinhl)\n-  if test $use_builtin_sinhl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_SINHL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_sqrt])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_fsqrt(0.0);], \n-  use_builtin_sqrt=yes, use_builtin_sqrt=no)\n-  AC_MSG_RESULT($use_builtin_sqrt)\n-  if test $use_builtin_sqrt = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_SQRT)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_sqrtf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_sqrtf(0.0);], \n-  use_builtin_sqrtf=yes, use_builtin_sqrtf=no)\n-  AC_MSG_RESULT($use_builtin_sqrtf)\n-  if test $use_builtin_sqrtf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_SQRTF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_sqrtl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_sqrtl(0.0);], \n-  use_builtin_sqrtl=yes, use_builtin_sqrtl=no)\n-  AC_MSG_RESULT($use_builtin_sqrtl)\n-  if test $use_builtin_sqrtl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_SQRTL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_tan])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_tan(0.0);], \n-  use_builtin_tan=yes, use_builtin_tan=no)\n-  AC_MSG_RESULT($use_builtin_tan)\n-  if test $use_builtin_tan = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_TAN)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_tanf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_tanf(0.0);], \n-  use_builtin_tanf=yes, use_builtin_tanf=no)\n-  AC_MSG_RESULT($use_builtin_tanf)\n-  if test $use_builtin_tanf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_TANF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_tanl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_tanl(0.0);], \n-  use_builtin_tanl=yes, use_builtin_tanl=no)\n-  AC_MSG_RESULT($use_builtin_tanl)\n-  if test $use_builtin_tanl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_TANL)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_tanh])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_tanh(0.0);], \n-  use_builtin_tanh=yes, use_builtin_tanh=no)\n-  AC_MSG_RESULT($use_builtin_tanh)\n-  if test $use_builtin_tanh = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_TANH)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_tanhf])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_tanhf(0.0);], \n-  use_builtin_tanhf=yes, use_builtin_tanhf=no)\n-  AC_MSG_RESULT($use_builtin_tanhf)\n-  if test $use_builtin_tanhf = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_TANHF)\n-  fi\n-  AC_MSG_CHECKING([for __builtin_tanhl])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ __builtin_tanhl(0.0);], \n-  use_builtin_tanhl=yes, use_builtin_tanhl=no)\n-  AC_MSG_RESULT($use_builtin_tanhl)\n-  if test $use_builtin_tanhl = \"yes\"; then\n-    AC_DEFINE(HAVE_BUILTIN_TANHL)\n-  fi\n-  AC_LANG_RESTORE\n-])\n-\n-\n-dnl\n-dnl Check to see if the argument passed is\n+dnl Check to see if the (math function) argument passed is\n dnl 1) declared when using the c++ compiler\n dnl 2) has \"C\" linkage\n dnl\n@@ -931,7 +325,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, [\n \n \n dnl\n-dnl Check to see if the argument passed is\n+dnl Check to see if the (math function) argument passed is\n dnl 1) declared when using the c++ compiler\n dnl 2) has \"C\" linkage\n dnl\n@@ -958,7 +352,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2, [\n \n \n dnl\n-dnl Check to see if the argument passed is\n+dnl Check to see if the (math function) argument passed is\n dnl 1) declared when using the c++ compiler\n dnl 2) has \"C\" linkage\n dnl\n@@ -984,6 +378,109 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3, [\n ])\n \n \n+dnl\n+dnl Because the builtins are picky picky picky about the arguments they take, \n+dnl do an explict linkage tests here.\n+dnl Check to see if the (math function) argument passed is\n+dnl 1) declared when using the c++ compiler\n+dnl 2) has \"C\" linkage\n+dnl\n+dnl Define HAVE_CARGF etc if \"cargf\" is declared and links\n+dnl\n+dnl argument 1 is name of function to check\n+dnl\n+dnl ASSUMES argument is a math function with ONE parameter\n+dnl\n+dnl GLIBCPP_CHECK_BUILTIN_MATH_DECL_LINKAGE_1\n+AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1, [\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_MSG_CHECKING([for $1 declaration])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ $1(0);], \n+  [use_$1=yes], [use_$1=no])\n+  AC_MSG_RESULT($use_$1)\n+  AC_LANG_RESTORE\n+  if test x$use_$1 = x\"yes\"; then\n+    AC_MSG_CHECKING([for $1 linkage])\n+      AC_TRY_LINK([#include <math.h>], \n+      [ $1(0);],\n+      [link_$1=yes], [link_$1=no])\n+    AC_MSG_RESULT($link_$1)\n+    if test x$link_$1 = x\"yes\"; then\n+      ac_tr_func=HAVE_`echo $1 | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`\n+      AC_DEFINE_UNQUOTED(${ac_tr_func})\n+    fi\n+  fi\n+])\n+\n+\n+dnl\n+dnl Check to see what builtin math functions are supported\n+dnl\n+dnl check for __builtin_abs\n+dnl check for __builtin_fabsf\n+dnl check for __builtin_fabs\n+dnl check for __builtin_fabl\n+dnl check for __builtin_labs\n+dnl check for __builtin_sqrtf\n+dnl check for __builtin_sqrtl\n+dnl check for __builtin_fsqrt\n+dnl check for __builtin_sinf\n+dnl check for __builtin_sin\n+dnl check for __builtin_sinl\n+dnl check for __builtin_cosf\n+dnl check for __builtin_cos\n+dnl check for __builtin_cosl\n+dnl\n+dnl GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT\n+AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT, [\n+  dnl Test for builtin math functions.\n+  dnl These are made in gcc/c-common.c \n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_abs)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabsf)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabs)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabsl)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_labs)\n+\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sqrtf)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fsqrt)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sqrtl)\n+\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sinf)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sin)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sinl)\n+\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_cosf)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_cos)\n+  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_cosl)\n+\n+  dnl There is, without a doubt, a more elegant way to have these\n+  dnl names exported so that they won't be stripped out of acconfig.h by\n+  dnl autoheader. I leave this as an exercise to somebody less frustrated\n+  dnl than I.... please email the libstdc++ list if you can figure out a\n+  dnl more elegant approach (see autoconf/acgen.m4 and specifically\n+  dnl AC_CHECK_FUNC for things to steal.)\n+  dummyvar=no\n+  if test x$dummyvar = x\"yes\"; then\n+    AC_DEFINE(HAVE___BUILTIN_ABS)\n+    AC_DEFINE(HAVE___BUILTIN_LABS)\n+    AC_DEFINE(HAVE___BUILTIN_COS)\n+    AC_DEFINE(HAVE___BUILTIN_COSF)\n+    AC_DEFINE(HAVE___BUILTIN_COSL)\n+    AC_DEFINE(HAVE___BUILTIN_FABS)\n+    AC_DEFINE(HAVE___BUILTIN_FABSF)\n+    AC_DEFINE(HAVE___BUILTIN_FABSL)\n+    AC_DEFINE(HAVE___BUILTIN_SIN)\n+    AC_DEFINE(HAVE___BUILTIN_SINF)\n+    AC_DEFINE(HAVE___BUILTIN_SINL)\n+    AC_DEFINE(HAVE___BUILTIN_FSQRT)\n+    AC_DEFINE(HAVE___BUILTIN_SQRTF)\n+    AC_DEFINE(HAVE___BUILTIN_SQRTL)\n+  fi\n+])\n+\n+\n dnl\n dnl Check to see what the underlying c library or math library is like.\n dnl These checks need to do two things: \n@@ -1047,7 +544,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   dnl Check to see if basic C math functions have long double versions.\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnanl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinfl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(copysignl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(copysignl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(acosl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(asinl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(atanl)\n@@ -1065,7 +562,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(log10l)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(modfl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(powl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(sinl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sinl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sinhl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sqrtl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(tanl)\n@@ -1117,7 +614,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   dnl Check to see if basic C math functions have long double versions.\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isnanl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isinfl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_copysignl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_copysignl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_acosl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_asinl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_atanl)\n@@ -1135,7 +632,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_log10l)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_modfl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_powl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_sinl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sinl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sinhl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sqrtl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_tanl)\n@@ -1161,16 +658,20 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   AC_CHECK_HEADERS([complex.h])\n   AC_REPLACE_MATHFUNCS(ccos ccosf ccosh ccoshf cexp cexpf c_log c_logf \\\n   clog10 clog10f cpow cpowf csin csinf csinh csinhf csqrt csqrtf \\\n-  ctan ctanf ctanh ctanhf \\\n-  carg cargf nan hypot hypotf atan2f expf copysignf)\n-\n-  dnl We compile the long double complex functions only if the function \n-  dnl provides the non-complex long double functions.\n-  USE_LONG_DOUBLE=no\n-  AC_CHECK_FUNC(copysignl,\n-  USE_LONG_DOUBLE=yes\n-  AC_REPLACE_MATHFUNCS(ccoshl ccosl cexpl cpowl csinhl csinl \\\n-  csqrtl ctanhl ctanl cargl hypotl signbitl c_logl clog10l))\n+  ctan ctanf ctanh ctanhf carg cargf nan hypot hypotf atan2f expf copysignf)\n+\n+  dnl Compile the long double complex functions only if the function \n+  dnl provides the non-complex long double functions that are needed.\n+  dnl Currently this includes copysignl and atan2l, which should be\n+  dnl cached from the GLIBCPP_CHECK_MATH_SUPPORT macro, above.\n+  USE_COMPLEX_LONG_DOUBLE=no\n+  if test x$ac_cv_func_atan2l = x\"yes\" \\\n+     && test x$ac_cv_func_copysignl = x\"yes\"; then\n+    USE_COMPLEX_LONG_DOUBLE=yes\n+    AC_REPLACE_MATHFUNCS(ccoshl ccosl cexpl cpowl csinhl csinl \\\n+    csqrtl ctanhl ctanl cargl hypotl signbitl c_logl clog10l)\n+  fi\n+\n   AC_SUBST(USE_COMPLEX_LONG_DOUBLE)\n ])\n "}, {"sha": "c0f3a0affc2557da695a4a759b5fcaa64d4e84c8", "filename": "libstdc++-v3/bits/std_cmath.h", "status": "modified", "additions": 53, "deletions": 250, "changes": 303, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fstd_cmath.h?ref=11fc1858a0850253a8487eae391b9ea3fd24ea5d", "patch": "@@ -47,7 +47,7 @@ namespace std {\n     // float\n     //\n \n-#if _GLIBCPP_HAVE_BUILTIN_FABSF\n+#if _GLIBCPP_HAVE___BUILTIN_FABSF\n     inline float abs(float __x)\n       { return __builtin_fabsf(__x); }\n #elif _GLIBCPP_HAVE_FABSF\n@@ -58,62 +58,47 @@ namespace std {\n       { return ::fabs(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ACOSF\n-    inline float acos(float __x)\n-      { return __builtin_acosf(__x); }\n-#elif _GLIBCPP_HAVE_ACOSF\n+#if _GLIBCPP_HAVE_ACOSF\n     inline float acos(float __x)\n       { return ::acosf(__x); }\n #else\n     inline float acos(float __x)\n       { return ::acos(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ASINF\n-    inline float asin(float __x)\n-      { return __builtin_asinf(__x); }\n-#elif _GLIBCPP_HAVE_ASINF\n+#if _GLIBCPP_HAVE_ASINF\n     inline float asin(float __x)\n       { return ::asinf(__x); }\n #else\n     inline float asin(float __x)\n       { return ::asin(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ATANF\n-    inline float atan(float __x)\n-      { return __builtin_atanf(__x); }\n-#elif _GLIBCPP_HAVE_ATANF\n+#if _GLIBCPP_HAVE_ATANF\n     inline float atan(float __x)\n       { return ::atanf(__x); }\n #else\n     inline float atan(float __x)\n       { return ::atan(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ATAN2F\n-    inline float atan2(float __y, float __x)\n-      { return __builtin_atan2f(__y, __x); }\n-#elif _GLIBCPP_HAVE_ATAN2F\n+#if _GLIBCPP_HAVE_ATAN2F\n     inline float atan2(float __y, float __x)\n       { return ::atan2f(__y, __x); }\n #else\n     inline float atan2(float __y, float __x)\n       { return ::atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_CEILF\n-    inline float ceil(float __x)\n-      { return __builtin_ceilf(__x); }\n-#elif _GLIBCPP_HAVE_CEILF\n+#if _GLIBCPP_HAVE_CEILF\n     inline float ceil(float __x)\n       { return ::ceilf(__x); }\n #else\n     inline float ceil(float __x)\n       { return ::ceil(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_COSF\n+#if _GLIBCPP_HAVE___BUILTIN_COSF\n     inline float cos(float __x)\n       { return __builtin_cosf(__x); }\n #elif _GLIBCPP_HAVE_COSF\n@@ -124,29 +109,23 @@ namespace std {\n       { return ::cos(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_COSHF\n-    inline float cosh(float __x)\n-      { return __builtin_coshf(__x); }\n-#elif _GLIBCPP_HAVE_COSHF\n+#if _GLIBCPP_HAVE_COSHF\n     inline float cosh(float __x)\n       { return ::coshf(__x); }\n #else\n     inline float cosh(float __x)\n       { return ::cosh(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_EXPF\n-    inline float exp(float __x)\n-      { return __builtin_expf(__x); }\n-#elif _GLIBCPP_HAVE_EXPF\n+#if _GLIBCPP_HAVE_EXPF\n     inline float exp(float __x)\n       { return ::expf(__x); }\n #else\n     inline float exp(float __x)\n       { return ::exp(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FABSF\n+#if _GLIBCPP_HAVE___BUILTIN_FABSF\n     inline float fabs(float __x)\n       { return __builtin_fabsf(__x); }\n #elif _GLIBCPP_HAVE_FABSF\n@@ -157,76 +136,55 @@ namespace std {\n       { return ::fabs(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FLOORF\n-    inline float floor(float __x)\n-      { return __builtin_floorf(__x); }\n-#elif _GLIBCPP_HAVE_FLOORF\n+#if _GLIBCPP_HAVE_FLOORF\n     inline float floor(float __x)\n       { return ::floorf(__x); }\n #else\n     inline float floor(float __x)\n       { return ::floor(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FMODF\n-    inline float fmod(float __x, float __y)\n-      { return __builtin_fmodf(__x, __y); }\n-#elif _GLIBCPP_HAVE_FMODF\n+#if _GLIBCPP_HAVE_FMODF\n     inline float fmod(float __x, float __y)\n       { return ::fmodf(__x, __y); }\n #else\n     inline float fmod(float __x, float __y)\n       { return ::fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FREXPF\n-    inline float frexp(float __x, int* __exp)\n-      { return __builtin_frexpf(__x, __exp); }\n-#elif _GLIBCPP_HAVE_FREXPF\n+#if _GLIBCPP_HAVE_FREXPF\n     inline float frexp(float __x, int* __exp)\n       { return ::frexpf(__x, __exp); }\n #else\n     inline float frexp(float __x, int* __exp)\n       { return ::frexp(__x, __exp); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_LDEXPF\n-    inline float ldexp(float __x, int __exp)\n-      { return __builtin_ldexpf(__x, __exp); }\n-#elif _GLIBCPP_HAVE_LDEXPF\n+#if _GLIBCPP_HAVE_LDEXPF\n     inline float ldexp(float __x, int __exp)\n       { return ::ldexpf(__x, __exp); }\n #else\n     inline float ldexp(float __x, int __exp)\n       { return ::ldexp(static_cast<double>(__x), __exp); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_LOGF\n-    inline float log(float __x)\n-      { return __builtin_logf(__x); }\n-#elif _GLIBCPP_HAVE_LOGF\n+#if _GLIBCPP_HAVE_LOGF\n     inline float log(float __x)\n       { return ::logf(__x); }\n #else\n     inline float log(float __x)\n       { return ::log(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_LOG10F\n-    inline float log10(float __x)\n-      { return __builtin_log10f(__x); }\n-#elif _GLIBCPP_HAVE_LOG10F\n+#if _GLIBCPP_HAVE_LOG10F\n     inline float log10(float __x)\n       { return ::log10f(__x); }\n #else\n     inline float log10(float __x)\n       { return ::log10(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_MODFF\n-    inline float modf(float __x, float* __iptr)\n-      { return __builtin_modff(__x, __iptr); }\n-#elif _GLIBCPP_HAVE_MODFF\n+#if _GLIBCPP_HAVE_MODFF\n     inline float modf(float __x, float* __iptr)\n       { return ::modff(__x, __iptr); }\n #else\n@@ -239,20 +197,17 @@ namespace std {\n     }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_POWF\n-    inline float pow(float __x, float __y)\n-      { return __builtin_powf(__x, __y); }\n-#elif _GLIBCPP_HAVE_POWF\n+#if _GLIBCPP_HAVE_POWF\n     inline float pow(float __x, float __y)\n       { return ::powf(__x, __y); }\n #else\n     inline float pow(float __x, float __y)\n       { return ::pow(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n-    float pow (float, int);\n+    float pow(float, int);\n \n-#if _GLIBCPP_HAVE_BUILTIN_SINF\n+#if _GLIBCPP_HAVE___BUILTIN_SINF\n     inline float sin(float __x)\n       { return __builtin_sinf(__x); }\n #elif _GLIBCPP_HAVE_SINF\n@@ -263,18 +218,15 @@ namespace std {\n       { return ::sin(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_SINHF\n-    inline float sinh(float __x)\n-      { return __builtin_sinhf(__x); }\n-#elif _GLIBCPP_HAVE_SINHF\n+#if _GLIBCPP_HAVE_SINHF\n     inline float sinh(float __x)\n       { return ::sinhf(__x); }\n #else\n     inline float sinh(float __x)\n       { return ::sinh(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_SQRTF\n+#if _GLIBCPP_HAVE___BUILTIN_SQRTF\n     inline float sqrt(float __x)\n       { return __builtin_sqrtf(__x); }\n #elif _GLIBCPP_HAVE_SQRTF\n@@ -285,21 +237,15 @@ namespace std {\n       { return ::sqrt(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_TANF\n-    inline float tan(float __x)\n-      { return __builtin_tanf(__x); }\n-#elif _GLIBCPP_HAVE_TANF\n+#if _GLIBCPP_HAVE_TANF\n     inline float tan(float __x)\n       { return ::tanf(__x); }\n #else\n     inline float tan(float __x)\n       { return ::tan(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_TANHF\n-    inline float tanh(float __x)\n-      { return __builtin_tanhf(__x); }\n-#elif _GLIBCPP_HAVE_TANHF\n+#if _GLIBCPP_HAVE_TANHF\n     inline float tanh(float __x)\n       { return ::tanhf(__x); }\n #else\n@@ -311,377 +257,234 @@ namespace std {\n     // double\n     //\n \n-#if _GLIBCPP_HAVE_BUILTIN_FABS\n+#if _GLIBCPP_HAVE___BUILTIN_FABS\n     inline double abs(double __x)\n       { return __builtin_fabs(__x); }\n #else\n     inline double abs(double __x)\n       { return ::fabs(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ACOS\n-    inline double acos(double __x)\n-      { return __builtin_acos(__x); }\n-#else\n     inline double acos(double __x)\n       { return ::acos(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ASIN\n-    inline double asin(double __x)\n-      { return __builtin_asin(__x); }\n-#else\n     inline double asin(double __x)\n       { return ::asin(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ATAN\n-    inline double atan(double __x)\n-      { return __builtin_atan(__x); }\n-#else\n     inline double atan(double __x)\n       { return ::atan(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ATAN2\n-    inline double atan2(double __y, double __x)\n-      { return __builtin_atan2(__y, __x); }\n-#else\n     inline double atan2(double __y, double __x)\n       { return ::atan2(__y, __x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_CEIL\n-    inline double ceil(double __x)\n-      { return __builtin_fceil(__x); }\n-#else\n     inline double ceil(double __x)\n       { return ::ceil(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_COS\n+#if _GLIBCPP_HAVE___BUILTIN_COS\n     inline double cos(double __x)\n       { return __builtin_cos(__x); }\n #else\n     inline double cos(double __x)\n       { return ::cos(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_COSH\n-    inline double cosh(double __x)\n-      { return __builtin_cosh(__x); }\n-#else\n     inline double cosh(double __x)\n       { return ::cosh(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_EXP\n-    inline double exp(double __x)\n-      { return __builtin_exp(__x); }\n-#else\n     inline double exp(double __x)\n       { return ::exp(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FABS\n+\n+#if _GLIBCPP_HAVE___BUILTIN_FABS\n     inline double fabs(double __x)\n       { return __builtin_fabs(__x); }\n #else\n     inline double fabs(double __x)\n       { return ::fabs(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FLOOR\n-    inline double floor(double __x)\n-      { return __builtin_ffloor(__x); }\n-#else\n     inline double floor(double __x)\n       { return ::floor(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FMOD\n-    inline double fmod(double __x, double __y)\n-      { return __builtin_fmod(__x, __y); }\n-#else\n     inline double fmod(double __x, double __y)\n       { return ::fmod(__x, __y); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FREXP\n-    inline double frexp(double __x, int* __exp)\n-      { return __builtin_frexp(__x, __exp); }\n-#else\n     inline double frexp(double __x, int* __exp)\n       { return ::frexp(__x, __exp); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_LDEXP\n-    inline double ldexp(double __x, int __exp)\n-      { return __builtin_ldexp(__x, __exp); }\n-#else\n     inline double ldexp(double __x, int __exp)\n       { return ::ldexp(__x, __exp); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_LOG\n-    inline double log(double __x)\n-      { return __builtin_log(__x); }\n-#else\n     inline double log(double __x)\n       { return ::log(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_LOG10\n-    inline double log10(double __x)\n-      { return __builtin_log10(__x); }\n-#else\n     inline double log10(double __x)\n       { return ::log10(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_MODF\n-    inline double modf(double __x, double* __iptr)\n-      { return __builtin_modf(__x, __iptr); }\n-#else\n     inline double modf(double __x, double* __iptr)\n       { return ::modf(__x, __iptr); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_POW\n-    inline double pow(double __x, double __y)\n-      { return __builtin_pow(__x, static_cast<double>(__y)); }\n-#else\n     inline double pow(double __x, double __y)\n       { return ::pow(__x, __y); }\n-#endif\n \n     double pow (double, int);\n \n-#if _GLIBCPP_HAVE_BUILTIN_SIN\n+#if _GLIBCPP_HAVE___BUILTIN_SIN\n     inline double sin(double __x)\n       { return __builtin_sin(__x); }\n #else\n     inline double sin(double __x)\n       { return ::sin(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_SINH\n-    inline double sinh(double __x)\n-      { return __builtin_sinh(__x); }\n-#else\n     inline double sinh(double __x)\n       { return ::sinh(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_SQRT\n+#if _GLIBCPP_HAVE___BUILTIN_SQRT\n     inline double sqrt(double __x)\n       { return __builtin_fsqrt(__x); }\n #else\n     inline double sqrt(double __x)\n       { return ::sqrt(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_TAN\n-    inline double tan(double __x)\n-      { return __builtin_tan(__x); }\n-#else\n     inline double tan(double __x)\n       { return ::tan(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_TANH\n-    inline double tanh(double __x)\n-      { return __builtin_tanh(__x); }\n-#else\n     inline double tanh(double __x)\n       { return ::tanh(__x); }\n-#endif\n \n     //\n     // long double\n     //\n-#if _GLIBCPP_HAVE_BUILTIN_FABSL\n+#if _GLIBCPP_HAVE___BUILTIN_FABSL\n     inline long double abs(long double __x)\n       { return __builtin_fabsl(__x); }\n #elif _GLIBCPP_HAVE_FABSL\n     inline long double abs(long double __x)\n       { return ::fabsl(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ACOSL\n-    inline long double acos(long double __x)\n-      { return __builtin_acosl(__x); }\n-#elif _GLIBCPP_HAVE_ACOSL\n+#if _GLIBCPP_HAVE_ACOSL\n     inline long double acos(long double __x)\n       { return ::acosl(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ASINL\n-    inline long double asin(long double __x)\n-      { return __builtin_asinl(__x); }\n-#elif _GLIBCPP_HAVE_ASINL\n+#if _GLIBCPP_HAVE_ASINL\n     inline long double asin(long double __x)\n       { return ::asinl(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ATANL\n-    inline long double atan(long double __x)\n-      { return __builtin_atanl(__x); }\n-#elif _GLIBCPP_HAVE_ATANL\n+#if _GLIBCPP_HAVE_ATANL\n     inline long double atan(long double __x)\n       { return ::atanl(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ATAN2L\n-    inline long double atan2(long double __y, long double __x)\n-      { return __builtin_atan2l(__y, __x); }\n-#elif _GLIBCPP_HAVE_ATAN2L\n+#if _GLIBCPP_HAVE_ATAN2L\n     inline long double atan2(long double __y, long double __x)\n       { return ::atan2l(__y, __x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_CEILL\n-    inline long double ceil(long double __x)\n-      { return __builtin_ceill(__x); }\n-#elif _GLIBCPP_HAVE_CEILL\n+#if _GLIBCPP_HAVE_CEILL\n     inline long double ceil(long double __x)\n       { return ::ceill(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_COSL\n+#if _GLIBCPP_HAVE___BUILTIN_COSL\n     inline long double cos(long double __x)\n       { return __builtin_cosl(__x); }\n #elif _GLIBCPP_HAVE_COSL\n     inline long double cos(long double __x)\n       { return ::cosl(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_COSHL\n-    inline long double cosh(long double __x)\n-      { return __builtin_coshl(__x); }\n-#elif _GLIBCPP_HAVE_COSHL\n+#if _GLIBCPP_HAVE_COSHL\n     inline long double cosh(long double __x)\n       { return ::coshl(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_EXPL\n-    inline long double exp(long double __x)\n-      { return __builtin_expl(__x); }\n-#elif _GLIBCPP_HAVE_EXPL\n+#if _GLIBCPP_HAVE_EXPL\n     inline long double exp(long double __x)\n       { return ::expl(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FABSL\n+#if _GLIBCPP_HAVE___BUILTIN_FABSL\n     inline long double fabs(long double __x)\n       { return __builtin_fabsl(__x); }\n #elif _GLIBCPP_HAVE_FABSL\n     inline long double fabs(long double __x)\n       { return ::fabsl(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FLOORL\n-    inline long double floor(long double __x)\n-      { return __builtin_floorl(__x); }\n-#elif _GLIBCPP_HAVE_FLOORL\n+#if _GLIBCPP_HAVE_FLOORL\n     inline long double floor(long double __x)\n       { return ::floorl(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FMODL\n-    inline long double fmod(long double __x, long double __y)\n-      { return __builtin_fmodl(__x, __y); }\n-#elif _GLIBCPP_HAVE_FMODL\n+#if _GLIBCPP_HAVE_FMODL\n     inline long double fmod(long double __x, long double __y)\n       { return ::fmodl(__x, __y); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FREXPL\n-    inline long double frexp(long double __x, int* __exp)\n-      { return __builtin_frexpl(__x, __exp); }\n-#elif _GLIBCPP_HAVE_FREXPL\n+#if _GLIBCPP_HAVE_FREXPL\n     inline long double frexp(long double __x, int* __exp)\n       { return ::frexpl(__x, __exp); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_LDEXPL\n-    inline long double ldexp(long double __x, int __exp)\n-      { return __builtin_ldexpl(__x, __exp); }\n-#elif _GLIBCPP_HAVE_LDEXPL\n+#if _GLIBCPP_HAVE_LDEXPL\n     inline long double ldexp(long double __x, int __exp)\n       { return ::ldexpl(__x, __exp); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_LOGL\n-    inline long double log(long double __x)\n-      { return __builtin_logl(__x); }\n-#elif _GLIBCPP_HAVE_LOGL\n+#if _GLIBCPP_HAVE_LOGL\n     inline long double log(long double __x)\n       { return ::logl(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_LOG10L\n-    inline long double log10(long double __x)\n-      { return __builtin_log10l(__x); }\n-#elif _GLIBCPP_HAVE_LOG10L\n+#if _GLIBCPP_HAVE_LOG10L\n     inline long double log10(long double __x)\n       { return ::log10l(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_MODFL\n-    inline long double mod(long double __x, long double* __iptr)\n-      { return __builtin_modfl(__x, __iptr); }\n-#elif _GLIBCPP_HAVE_MODFL\n+#if _GLIBCPP_HAVE_MODFL\n     inline long double modf(long double __x, long double* __iptr)\n       { return ::modfl(__x, __iptr); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_POWL\n-    inline long double pow(long double __x, long double __y)\n-      { return __builtin_powl(__x, __y); }\n-#elif _GLIBCPP_HAVE_POWL\n+#if _GLIBCPP_HAVE_POWL\n     inline long double pow(long double __x, long double __y)\n       { return ::powl(__x, __y); }\n #endif\n \n     long double pow(long double, int);\n \n-#if _GLIBCPP_HAVE_BUILTIN_SINL\n+#if _GLIBCPP_HAVE___BUILTIN_SINL\n     inline long double sin(long double __x)\n       { return __builtin_sinl(__x); }\n #elif _GLIBCPP_HAVE_SINL\n     inline long double sin(long double __x)\n       { return ::sinl(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_SINHL\n-    inline long double sinh(long double __x)\n-      { return __builtin_sinhl(__x); }\n-#elif _GLIBCPP_HAVE_SINHL\n+#if _GLIBCPP_HAVE_SINHL\n     inline long double sinh(long double __x)\n       { return ::sinhl(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_SQRTL\n+#if _GLIBCPP_HAVE___BUILTIN_SQRTL\n     inline long double sqrt(long double __x)\n       { return __builtin_sqrtl(__x); }\n #elif _GLIBCPP_HAVE_SQRTL\n     inline long double sqrt(long double __x)\n       { return ::sqrtl(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_TANL\n-    inline long double tan(long double __x)\n-      { return __builtin_tanl(__x); }\n-#elif _GLIBCPP_HAVE_TANL\n+#if _GLIBCPP_HAVE_TANL\n     inline long double tan(long double __x)\n       { return ::tanl(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_TANHL\n-    inline long double tanh(long double __x)\n-      { return __builtin_tanhl(__x); }\n-#elif _GLIBCPP_HAVE_TANHL\n+#if _GLIBCPP_HAVE_TANHL\n     inline long double tanh(long double __x)\n       { return ::tanhl(__x); }\n #endif"}, {"sha": "99276e59974828feee429c217ef91b72a3f116f1", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 17, "deletions": 173, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=11fc1858a0850253a8487eae391b9ea3fd24ea5d", "patch": "@@ -15,203 +15,47 @@\n // Define if code specialized for wchar_t should be used.\n #undef _GLIBCPP_USE_WCHAR_T\n \n-// Define if the compiler/host combination has __builtin_acos\n-#undef HAVE_BUILTIN_ACOS\n+// Define if the compiler/host combination has __builtin_abs\n+#undef HAVE___BUILTIN_ABS\n \n-// Define if the compiler/host combination has __builtin_acosf\n-#undef HAVE_BUILTIN_ACOSF\n-\n-// Define if the compiler/host combination has __builtin_acosl\n-#undef HAVE_BUILTIN_ACOSL\n-\n-// Define if the compiler/host combination has __builtin_asin\n-#undef HAVE_BUILTIN_ASIN\n-\n-// Define if the compiler/host combination has __builtin_asinf\n-#undef HAVE_BUILTIN_ASINF\n-\n-// Define if the compiler/host combination has __builtin_asinl\n-#undef HAVE_BUILTIN_ASINL\n-\n-// Define if the compiler/host combination has __builtin_atan\n-#undef HAVE_BUILTIN_ATAN\n-\n-// Define if the compiler/host combination has __builtin_atanf\n-#undef HAVE_BUILTIN_ATANF\n-\n-// Define if the compiler/host combination has __builtin_atanl\n-#undef HAVE_BUILTIN_ATANL\n-\n-// Define if the compiler/host combination has __builtin_atan2\n-#undef HAVE_BUILTIN_ATAN2\n-\n-// Define if the compiler/host combination has __builtin_atan2f\n-#undef HAVE_BUILTIN_ATAN2F\n-\n-// Define if the compiler/host combination has __builtin_atan2l\n-#undef HAVE_BUILTIN_ATAN2L\n-\n-// Define if the compiler/host combination has __builtin_ceil\n-#undef HAVE_BUILTIN_CEIL\n-\n-// Define if the compiler/host combination has __builtin_ceilf\n-#undef HAVE_BUILTIN_CEILF\n-\n-// Define if the compiler/host combination has __builtin_ceill\n-#undef HAVE_BUILTIN_CEILL\n+// Define if the compiler/host combination has __builtin_labs\n+#undef HAVE___BUILTIN_LABS\n \n // Define if the compiler/host combination has __builtin_cos\n-#undef HAVE_BUILTIN_COS\n+#undef HAVE___BUILTIN_COS\n \n // Define if the compiler/host combination has __builtin_cosf\n-#undef HAVE_BUILTIN_COSF\n+#undef HAVE___BUILTIN_COSF\n \n // Define if the compiler/host combination has __builtin_cosl\n-#undef HAVE_BUILTIN_COSL\n-\n-// Define if the compiler/host combination has __builtin_cosh\n-#undef HAVE_BUILTIN_COSH\n-\n-// Define if the compiler/host combination has __builtin_coshf\n-#undef HAVE_BUILTIN_COSHF\n-\n-// Define if the compiler/host combination has __builtin_coshl\n-#undef HAVE_BUILTIN_COSHL\n-\n-// Define if the compiler/host combination has __builtin_exp\n-#undef HAVE_BUILTIN_EXP\n-\n-// Define if the compiler/host combination has __builtin_expf\n-#undef HAVE_BUILTIN_EXPF\n-\n-// Define if the compiler/host combination has __builtin_expl\n-#undef HAVE_BUILTIN_EXPL\n+#undef HAVE___BUILTIN_COSL\n \n // Define if the compiler/host combination has __builtin_fabs\n-#undef HAVE_BUILTIN_FABS\n+#undef HAVE___BUILTIN_FABS\n \n // Define if the compiler/host combination has __builtin_fabsf\n-#undef HAVE_BUILTIN_FABSF\n+#undef HAVE___BUILTIN_FABSF\n \n // Define if the compiler/host combination has __builtin_fabsl\n-#undef HAVE_BUILTIN_FABSL\n-\n-// Define if the compiler/host combination has __builtin_floor\n-#undef HAVE_BUILTIN_FLOOR\n-\n-// Define if the compiler/host combination has __builtin_floorf\n-#undef HAVE_BUILTIN_FLOORF\n-\n-// Define if the compiler/host combination has __builtin_floorl\n-#undef HAVE_BUILTIN_FLOORL\n-\n-// Define if the compiler/host combination has __builtin_fmod\n-#undef HAVE_BUILTIN_FMOD\n-\n-// Define if the compiler/host combination has __builtin_fmodf\n-#undef HAVE_BUILTIN_FMODF\n-\n-// Define if the compiler/host combination has __builtin_fmodl\n-#undef HAVE_BUILTIN_FMODL\n-\n-// Define if the compiler/host combination has __builtin_frexp\n-#undef HAVE_BUILTIN_FREXP\n-\n-// Define if the compiler/host combination has __builtin_frexpf\n-#undef HAVE_BUILTIN_FREXPF\n-\n-// Define if the compiler/host combination has __builtin_frexpl\n-#undef HAVE_BUILTIN_FREXPL\n-\n-// Define if the compiler/host combination has __builtin_ldexp\n-#undef HAVE_BUILTIN_LDEXP\n-\n-// Define if the compiler/host combination has __builtin_ldexpf\n-#undef HAVE_BUILTIN_LDEXPF\n-\n-// Define if the compiler/host combination has __builtin_ldexpl\n-#undef HAVE_BUILTIN_LDEXPL\n-\n-// Define if the compiler/host combination has __builtin_log\n-#undef HAVE_BUILTIN_LOG\n-\n-// Define if the compiler/host combination has __builtin_logf\n-#undef HAVE_BUILTIN_LOGF\n-\n-// Define if the compiler/host combination has __builtin_logl\n-#undef HAVE_BUILTIN_LOGL\n-\n-// Define if the compiler/host combination has __builtin_log10\n-#undef HAVE_BUILTIN_LOG10\n-\n-// Define if the compiler/host combination has __builtin_log10f\n-#undef HAVE_BUILTIN_LOG10F\n-\n-// Define if the compiler/host combination has __builtin_log10l\n-#undef HAVE_BUILTIN_LOG10L\n-\n-// Define if the compiler/host combination has __builtin_modf\n-#undef HAVE_BUILTIN_MODF\n-\n-// Define if the compiler/host combination has __builtin_modff\n-#undef HAVE_BUILTIN_MODFF\n-\n-// Define if the compiler/host combination has __builtin_modfl\n-#undef HAVE_BUILTIN_MODFL\n-\n-// Define if the compiler/host combination has __builtin_pow\n-#undef HAVE_BUILTIN_POW\n-\n-// Define if the compiler/host combination has __builtin_powf\n-#undef HAVE_BUILTIN_POWF\n-\n-// Define if the compiler/host combination has __builtin_powl\n-#undef HAVE_BUILTIN_POWL\n+#undef HAVE___BUILTIN_FABSL\n \n // Define if the compiler/host combination has __builtin_sin\n-#undef HAVE_BUILTIN_SIN\n+#undef HAVE___BUILTIN_SIN\n \n // Define if the compiler/host combination has __builtin_sinf\n-#undef HAVE_BUILTIN_SINF\n+#undef HAVE___BUILTIN_SINF\n \n // Define if the compiler/host combination has __builtin_sinl\n-#undef HAVE_BUILTIN_SINL\n-\n-// Define if the compiler/host combination has __builtin_sinh\n-#undef HAVE_BUILTIN_SINH\n-\n-// Define if the compiler/host combination has __builtin_sinhf\n-#undef HAVE_BUILTIN_SINHF\n-\n-// Define if the compiler/host combination has __builtin_sinhl\n-#undef HAVE_BUILTIN_SINHL\n+#undef HAVE___BUILTIN_SINL\n \n-// Define if the compiler/host combination has __builtin_sqrt\n-#undef HAVE_BUILTIN_SQRT\n+// Define if the compiler/host combination has __builtin_fsqrt\n+#undef HAVE___BUILTIN_FSQRT\n \n // Define if the compiler/host combination has __builtin_sqrtf\n-#undef HAVE_BUILTIN_SQRTF\n+#undef HAVE___BUILTIN_SQRTF\n \n // Define if the compiler/host combination has __builtin_sqrtl\n-#undef HAVE_BUILTIN_SQRTL\n-\n-// Define if the compiler/host combination has __builtin_tan\n-#undef HAVE_BUILTIN_TAN\n-\n-// Define if the compiler/host combination has __builtin_tanf\n-#undef HAVE_BUILTIN_TANF\n-\n-// Define if the compiler/host combination has __builtin_tanl\n-#undef HAVE_BUILTIN_TANL\n-\n-// Define if the compiler/host combination has __builtin_tanh\n-#undef HAVE_BUILTIN_TANH\n-\n-// Define if the compiler/host combination has __builtin_tanhf\n-#undef HAVE_BUILTIN_TANHF\n-\n-// Define if the compiler/host combination has __builtin_tanhl\n-#undef HAVE_BUILTIN_TANHL\n+#undef HAVE___BUILTIN_SQRTL\n \n // Define if GCC support for __complex__ float is buggy.\n #undef _GLIBCPP_BUGGY_FLOAT_COMPLEX"}, {"sha": "80c621a86d5bfb8189838c2f863d4d365954c918", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1413, "deletions": 2239, "changes": 3652, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=11fc1858a0850253a8487eae391b9ea3fd24ea5d"}, {"sha": "898bfc3ed355275ba03461c683190175badeb04e", "filename": "libstdc++-v3/math/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Fmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Fmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2FMakefile.am?ref=11fc1858a0850253a8487eae391b9ea3fd24ea5d", "patch": "@@ -31,7 +31,6 @@ EXTRA_LONG_DOUBLE_yes = \\\n \tsignbitl.c cabsl.c \n \n EXTRA_DIST = \\\n-\tcosf.c fabsf.c sinf.c sqrtf.c \\\n \tccos.c ccosf.c ccosh.c ccoshf.c ccoshl.c \\\n \tcexp.c cexpf.c c_log.c c_logf.c  clog10.c clog10f.c \\\n \tcpow.c cpowf.c csin.c csinf.c csinh.c csinhf.c \\"}, {"sha": "002ed235181e0beff71bd1ac2ffcf317685ca03c", "filename": "libstdc++-v3/math/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Fmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Fmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2FMakefile.in?ref=11fc1858a0850253a8487eae391b9ea3fd24ea5d", "patch": "@@ -118,7 +118,6 @@ EXTRA_LONG_DOUBLE_yes = \\\n \n \n EXTRA_DIST = \\\n-\tcosf.c fabsf.c sinf.c sqrtf.c \\\n \tccos.c ccosf.c ccosh.c ccoshf.c ccoshl.c \\\n \tcexp.c cexpf.c c_log.c c_logf.c  clog10.c clog10f.c \\\n \tcpow.c cpowf.c csin.c csinf.c csinh.c csinhf.c \\"}, {"sha": "b3adff957ab79ddd664234f366848596d353e07d", "filename": "libstdc++-v3/math/mathconf.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Fmath%2Fmathconf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Fmath%2Fmathconf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2Fmathconf.h?ref=11fc1858a0850253a8487eae391b9ea3fd24ea5d", "patch": "@@ -328,10 +328,10 @@ do {                                                            \\\n \n \n /* Replacement for non-existing float functions.  */\n-#if !defined(_GLIBCPP_HAVE_FABSF) && !defined(_GLIBCPP_HAVE_BUILTIN_FABSF)\n+#if !defined(_GLIBCPP_HAVE_FABSF) && !defined(_GLIBCPP_HAVE___BUILTIN_FABSF)\n # define fabsf(x) fabs (x)\n #endif\n-#if !defined(_GLIBCPP_HAVE_COSF) && !defined(_GLIBCPP_HAVE_BUILTIN_COSF)\n+#if !defined(_GLIBCPP_HAVE_COSF) && !defined(_GLIBCPP_HAVE___BUILTIN_COSF)\n # define cosf(x) cos (x)\n #endif\n #ifndef _GLIBCPP_HAVE_COSHF\n@@ -349,13 +349,13 @@ do {                                                            \\\n #ifndef _GLIBCPP_HAVE_POWF\n # define powf(x, y) pow (x, y)\n #endif\n-#if !defined(_GLIBCPP_HAVE_SINF) && !defined(_GLIBCPP_HAVE_BUILTIN_SINF)\n+#if !defined(_GLIBCPP_HAVE_SINF) && !defined(_GLIBCPP_HAVE___BUILTIN_SINF)\n # define sinf(x) sin (x)\n #endif\n #ifndef _GLIBCPP_HAVE_SINHF\n # define sinhf(x) sinh (x)\n #endif\n-#if !defined(_GLIBCPP_HAVE_SQRTF) && !defined(_GLIBCPP_HAVE_BUILTIN_SQRTF)\n+#if !defined(_GLIBCPP_HAVE_SQRTF) && !defined(_GLIBCPP_HAVE___BUILTIN_SQRTF)\n # define sqrtf(x) sqrt (x)\n #endif\n #ifndef _GLIBCPP_HAVE_TANF"}, {"sha": "34967d498908f6ada2138f375f7d21eb4e9b07fe", "filename": "libstdc++-v3/shadow/bits/std_cmath.h", "status": "modified", "additions": 49, "deletions": 246, "changes": 295, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11fc1858a0850253a8487eae391b9ea3fd24ea5d/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cmath.h?ref=11fc1858a0850253a8487eae391b9ea3fd24ea5d", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -43,62 +43,48 @@\n #     include_next <math.h>\n     }\n     inline double _CPP_HUGE_VAL_capture()        { return HUGE_VAL; }\n-#if _GLIBCPP_HAVE_BUILTIN_ACOSF\n-    inline float _CPP_acos_capture(float __x)\n-      { return __builtin_acosf(__x); }\n-#elif _GLIBCPP_HAVE_ACOSF\n+\n+#if _GLIBCPP_HAVE_ACOSF\n     inline float _CPP_acos_capture(float __x)\n       { return acosf(__x); }\n #else\n     inline float _CPP_acos_capture(float __x)\n       { return acos(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ASINF\n-    inline float _CPP_asin_capture(float __x)\n-      { return __builtin_asinf(__x); }\n-#elif _GLIBCPP_HAVE_ASINF\n+#if _GLIBCPP_HAVE_ASINF\n     inline float _CPP_asin_capture(float __x)\n       { return asinf(__x); }\n #else\n     inline float _CPP_asin_capture(float __x)\n       { return asin(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ATANF\n-    inline float _CPP_atan_capture(float __x)\n-      { return __builtin_atanf(__x); }\n-#elif _GLIBCPP_HAVE_ATANF\n+#if _GLIBCPP_HAVE_ATANF\n     inline float _CPP_atan_capture(float __x)\n       { return atanf(__x); }\n #else\n     inline float _CPP_atan_capture(float __x)\n       { return atan(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ATAN2F\n-    inline float _CPP_atan2_capture(float __y, float __x)\n-      { return __builtin_atan2f(__y, __x); }\n-#elif _GLIBCPP_HAVE_ATAN2F\n+#if _GLIBCPP_HAVE_ATAN2F\n     inline float _CPP_atan2_capture(float __y, float __x)\n       { return atan2f(__y, __x); }\n #else\n     inline float _CPP_atan2_capture(float __y, float __x)\n       { return atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_CEILF\n-    inline float _CPP_ceil_capture(float __x)\n-      { return __builtin_ceilf(__x); }\n-#elif _GLIBCPP_HAVE_CEILF\n+#if _GLIBCPP_HAVE_CEILF\n     inline float _CPP_ceil_capture(float __x)\n       { return ceilf(__x); }\n #else\n     inline float _CPP_ceil_capture(float __x)\n       { return ceil(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_COSF\n+#if _GLIBCPP_HAVE___BUILTIN_COSF\n     inline float _CPP_cos_capture(float __x)\n       { return __builtin_cosf(__x); }\n #elif _GLIBCPP_HAVE_COSF\n@@ -109,29 +95,23 @@\n       { return cos(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_COSHF\n-    inline float _CPP_cosh_capture(float __x)\n-      { return __builtin_coshf(__x); }\n-#elif _GLIBCPP_HAVE_COSHF\n+#if _GLIBCPP_HAVE_COSHF\n     inline float _CPP_cosh_capture(float __x)\n       { return coshf(__x); }\n #else\n     inline float _CPP_cosh_capture(float __x)\n       { return cosh(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_EXPF\n-    inline float _CPP_exp_capture(float __x)\n-      { return __builtin_expf(__x); }\n-#elif _GLIBCPP_HAVE_EXPF\n+#if _GLIBCPP_HAVE_EXPF\n     inline float _CPP_exp_capture(float __x)\n       { return expf(__x); }\n #else\n     inline float _CPP_exp_capture(float __x)\n       { return exp(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FABSF\n+#if _GLIBCPP_HAVE___BUILTIN_FABSF\n     inline float _CPP_fabs_capture(float __x)\n       { return __builtin_fabsf(__x); }\n #elif _GLIBCPP_HAVE_FABSF\n@@ -142,76 +122,55 @@\n       { return fabs(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FLOORF\n-    inline float _CPP_floor_capture(float __x)\n-      { return __builtin_floorf(__x); }\n-#elif _GLIBCPP_HAVE_FLOORF\n+#if _GLIBCPP_HAVE_FLOORF\n     inline float _CPP_floor_capture(float __x)\n       { return floorf(__x); }\n #else\n     inline float _CPP_floor_capture(float __x)\n       { return floor(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FMODFF\n-    inline float _CPP_fmod_capture(float __x, float __y)\n-      { return __builtin_fmodf(__x, __y); }\n-#elif _GLIBCPP_HAVE_FMODFF\n+#if _GLIBCPP_HAVE_FMODFF\n     inline float _CPP_fmod_capture(float __x, float __y)\n       { return fmodf(__x, __y); }\n #else\n     inline float _CPP_fmod_capture(float __x, float __y)\n       { return fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FREXPF\n-    inline float _CPP_frexp_capture(float __x, int* __exp)\n-      { return __builtin_frexpf(__x, __exp); }\n-#elif _GLIBCPP_HAVE_FREXPF\n+#if _GLIBCPP_HAVE_FREXPF\n     inline float _CPP_frexp_capture(float __x, int* __exp)\n       { return frexpf(__x, __exp); }\n #else\n     inline float _CPP_frexp_capture(float __x, int* __exp)\n       { return frexp(__x, __exp); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_LDEXPF\n-    inline float _CPP_ldexp_capture(float __x, int __exp)\n-      { return __builtin_ldexpf(__x, __exp); }\n-#elif _GLIBCPP_HAVE_LDEXPF\n+#if _GLIBCPP_HAVE_LDEXPF\n     inline float _CPP_ldexp_capture(float __x, int __exp)\n       { return ldexpf(__x, __exp); }\n #else\n     inline float _CPP_ldexp_capture(float __x, int __exp)\n       { return ldexp(static_cast<double>(__x), __exp); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_LOGF\n-    inline float _CPP_log_capture(float __x)\n-      { return __builtin_logf(__x); }\n-#elif _GLIBCPP_HAVE_LOGF\n+#if _GLIBCPP_HAVE_LOGF\n     inline float _CPP_log_capture(float __x)\n       { return logf(__x); }\n #else\n     inline float _CPP_log_capture(float __x)\n       { return log(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_LOG10F\n-    inline float _CPP_log10_capture(float __x)\n-      { return __builtin_log10f(__x); }\n-#elif _GLIBCPP_HAVE_LOG10F\n+#if _GLIBCPP_HAVE_LOG10F\n     inline float _CPP_log10_capture(float __x)\n       { return log10f(__x); }\n #else\n     inline float _CPP_log10_capture(float __x)\n       { return log10(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_MODFF\n-    inline float _CPP_modf_capture(float __x, float* __iptr)\n-      { return __builtin_modff(__x, __iptr); }\n-#elif _GLIBCPP_HAVE_MODFF\n+#if _GLIBCPP_HAVE_MODFF\n     inline float _CPP_modf_capture(float __x, float* __iptr)\n       { return modff(__x, __iptr); }\n #else\n@@ -224,10 +183,7 @@\n     }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_POWF\n-    inline float _CPP_pow_capture(float __x, float __y)\n-      { return __builtin_powf(__x, __y); }\n-#elif _GLIBCPP_HAVE_POWF\n+#if _GLIBCPP_HAVE_POWF\n     inline float _CPP_pow_capture(float __x, float __y)\n       { return powf(__x, __y); }\n #else\n@@ -237,7 +193,7 @@\n \n     float pow(float, int);\n \n-#if _GLIBCPP_HAVE_BUILTIN_SINF\n+#if _GLIBCPP_HAVE___BUILTIN_SINF\n     inline float _CPP_sin_capture(float __x)\n       { return __builtin_sinf(__x); }\n #elif _GLIBCPP_HAVE_SINF\n@@ -248,18 +204,15 @@\n       { return sin(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_SINHF\n-    inline float _CPP_sinh_capture(float __x)\n-      { return __builtin_sinhf(__x); }\n-#elif _GLIBCPP_HAVE_SINHF\n+#if _GLIBCPP_HAVE_SINHF\n     inline float _CPP_sinh_capture(float __x)\n       { return sinhf(__x); }\n #else\n     inline float _CPP_sinh_capture(float __x)\n       { return sinh(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_SQRTF\n+#if _GLIBCPP_HAVE___BUILTIN_SQRTF\n     inline float _CPP_sqrt_capture(float __x)\n       { return __builtin_sqrtf(__x); }\n #elif _GLIBCPP_HAVE_SQRTF\n@@ -270,21 +223,15 @@\n       { return sqrt(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_TANF\n-    inline float _CPP_tan_capture(float __x)\n-      { return __builtin_tanf(__x); }\n-#elif _GLIBCPP_HAVE_TANF\n+#if _GLIBCPP_HAVE_TANF\n     inline float _CPP_tan_capture(float __x)\n       { return tanf(__x); }\n #else\n     inline float _CPP_tan_capture(float __x)\n       { return tan(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_TANHF\n-    inline float _CPP_tanh_capture(float __x)\n-      { return __builtin_tanhf(__x); }\n-#elif _GLIBCPP_HAVE_TANHF\n+#if _GLIBCPP_HAVE_TANHF\n     inline float _CPP_tanh_capture(float __x)\n       { return tanhf(__x); }\n #else\n@@ -296,233 +243,128 @@\n     // double\n     //\n \n-#if _GLIBCPP_HAVE_BUILTIN_ACOS\n-    inline double _CPP_acos_capture(double __x)\n-      { return __builtin_acos(__x); }\n-#else\n     inline double _CPP_acos_capture(double __x)\n       { return acos(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ASIN\n-    inline double _CPP_asin_capture(double __x)\n-      { return __builtin_asin(__x); }\n-#else\n     inline double _CPP_asin_capture(double __x)\n       { return asin(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ATAN\n-    inline double _CPP_atan_capture(double __x)\n-      { return __builtin_atan(__x); }\n-#else\n     inline double _CPP_atan_capture(double __x)\n       { return atan(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ATAN2\n-    inline double _CPP_atan2_capture(double __y, double __x)\n-      { return __builtin_atan2(__y, __x); }\n-#else\n     inline double _CPP_atan2_capture(double __y, double __x)\n       { return atan2(__y, __x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_CEIL\n-    inline double _CPP_ceil_capture(double __x)\n-      { return __builtin_fceil(__x); }\n-#else\n     inline double _CPP_ceil_capture(double __x)\n       { return ceil(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_COS\n+#if _GLIBCPP_HAVE___BUILTIN_COS\n     inline double _CPP_cos_capture(double __x)\n       { return __builtin_cos(__x); }\n #else\n     inline double _CPP_cos_capture(double __x)\n       { return cos(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_COSH\n-    inline double _CPP_cosh_capture(double __x)\n-      { return __builtin_cosh(__x); }\n-#else\n     inline double _CPP_cosh_capture(double __x)\n       { return cosh(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_EXP\n-    inline double _CPP_exp_capture(double __x)\n-      { return __builtin_exp(__x); }\n-#else\n     inline double _CPP_exp_capture(double __x)\n       { return exp(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FABS\n+#if _GLIBCPP_HAVE___BUILTIN_FABS\n     inline double _CPP_fabs_capture(double __x)\n       { return __builtin_fabs(__x); }\n #else\n     inline double _CPP_fabs_capture(double __x)\n       { return fabs(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FLOOR\n-    inline double _CPP_floor_capture(double __x)\n-      { return __builtin_ffloor(__x); }\n-#else\n     inline double _CPP_floor_capture(double __x)\n       { return floor(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FMOD\n-    inline double _CPP_fmod_capture(double __x, double __y)\n-      { return __builtin_fmod(__x, __y); }\n-#else\n     inline double _CPP_fmod_capture(double __x, double __y)\n       { return fmod(__x, __y); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FREXP\n-    inline double _CPP_frexp_capture(double __x, int* __exp)\n-      { return __builtin_frexp(__x, __exp); }\n-#else\n     inline double _CPP_frexp_capture(double __x, int* __exp)\n       { return frexp(__x, __exp); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_LDEXP\n-    inline double _CPP_ldexp_capture(double __x, int __exp)\n-      { return __builtin_ldexp(__x, __exp); }\n-#else\n     inline double _CPP_ldexp_capture(double __x, int __exp)\n       { return ldexp(__x, __exp); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_LOG\n-    inline double _CPP_log_capture(double __x)\n-      { return __builtin_log(__x); }\n-#else\n     inline double _CPP_log_capture(double __x)\n       { return log(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_LOG10\n-    inline double _CPP_log10_capture(double __x)\n-      { return __builtin_log10(__x); }\n-#else\n     inline double _CPP_log10_capture(double __x)\n       { return log10(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_MODF\n-    inline double _CPP_modf_capture(double __x, double* __iptr)\n-      { return __builtin_modf(__x, __iptr); }\n-#else\n     inline double _CPP_modf_capture(double __x, double* __iptr)\n       { return modf(__x, __iptr); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_POW\n-    inline double _CPP_pow_capture(double __x, double __y)\n-      { return __builtin_pow(__x, static_cast<double>(__y)); }\n-#else\n     inline double _CPP_pow_capture(double __x, double __y)\n       { return pow(__x, __y); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_SIN\n+#if _GLIBCPP_HAVE___BUILTIN_SIN\n     inline double _CPP_sin_capture(double __x)\n       { return __builtin_sin(__x); }\n #else\n     inline double _CPP_sin_capture(double __x)\n       { return sin(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_SINH\n-    inline double _CPP_sinh_capture(double __x)\n-      { return __builtin_sinh(__x); }\n-#else\n     inline double _CPP_sinh_capture(double __x)\n       { return sinh(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_SQRT\n+#if _GLIBCPP_HAVE___BUILTIN_SQRT\n     inline double _CPP_sqrt_capture(double __x)\n       { return __builtin_fsqrt(__x); }\n #else\n     inline double _CPP_sqrt_capture(double __x)\n       { return sqrt(__x); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_TAN\n-    inline double _CPP_tan_capture(double __x)\n-      { return __builtin_tan(__x); }\n-#else\n     inline double _CPP_tan_capture(double __x)\n       { return tan(__x); }\n-#endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_TANH\n-    inline double _CPP_tanh_capture(double __x)\n-      { return __builtin_tanh(__x); }\n-#else\n     inline double _CPP_tanh_capture(double __x)\n       { return tanh(__x); }\n-#endif\n \n     //\n     // long double\n     //\n \n-#if _GLIBCPP_HAVE_BUILTIN_ACOSL\n-    inline long double _CPP_acos_capture(long double __x)\n-      { return __builtin_acosl(__x); }\n-#elif _GLIBCPP_HAVE_ACOSL\n+#if _GLIBCPP_HAVE_ACOSL\n     inline long double _CPP_acos_capture(long double __x)\n       { return acosl(__x); }\n #else\n     inline long double _CPP_acos_capture(long double __x)\n       { return acos(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ASINL\n-    inline long double _CPP_asin_capture(long double __x)\n-      { return __builtin_asinl(__x); }\n-#elif _GLIBCPP_HAVE_ASINL\n+#if _GLIBCPP_HAVE_ASINL\n     inline long double _CPP_asin_capture(long double __x)\n       { return asinl(__x); }\n #else\n     inline long double _CPP_asin_capture(long double __x)\n       { return asin(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ATANL\n-    inline long double _CPP_atan_capture(long double __x)\n-      { return __builtin_atanl(__x); }\n-#elif _GLIBCPP_HAVE_ATANL\n+#if _GLIBCPP_HAVE_ATANL\n     inline long double _CPP_atan_capture(long double __x)\n       { return atanl(__x); }\n #else\n     inline long double _CPP_atan_capture(long double __x)\n       { return atan(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_ATAN2L\n-    inline long double _CPP_atan2_capture(long double __y, long double __x)\n-      { return __builtin_atan2l(__y, __x); }\n-#elif _GLIBCPP_HAVE_ATAN2L\n+#if _GLIBCPP_HAVE_ATAN2L\n     inline long double _CPP_atan2_capture(long double __y, long double __x)\n       { return atan2l(__y, __x); }\n #else\n     inline long double _CPP_atan2_capture(long double __y, long double __x)\n       { return atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_CEILL\n-    inline long double _CPP_ceil_capture(long double __x)\n-      { return __builtin_ceill(__x); }\n #elif _GLIBCPP_HAVE_CEILL\n     inline long double _CPP_ceil_capture(long double __x)\n       { return ceill(__x); }\n@@ -531,7 +373,7 @@\n       { return ceil(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_COSL\n+#if _GLIBCPP_HAVE___BUILTIN_COSL\n     inline long double _CPP_cos_capture(long double __x)\n       { return __builtin_cosl(__x); }\n #elif _GLIBCPP_HAVE_COSL\n@@ -542,29 +384,23 @@\n       { return cos(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_COSHL\n-    inline long double _CPP_cosh_capture(long double __x)\n-      { return __builtin_coshl(__x); }\n-#elif _GLIBCPP_HAVE_COSHL\n+#if _GLIBCPP_HAVE_COSHL\n     inline long double _CPP_cosh_capture(long double __x)\n       { return coshl(__x); }\n #else\n     inline long double _CPP_cosh_capture(long double __x)\n       { return cosh(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_EXPL\n-    inline long double _CPP_exp_capture(long double __x)\n-      { return __builtin_expl(__x); }\n-#elif _GLIBCPP_HAVE_EXPL\n+#if _GLIBCPP_HAVE_EXPL\n     inline long double _CPP_exp_capture(long double __x)\n       { return expl(__x); }\n #else\n     inline long double _CPP_exp_capture(long double __x)\n       { return exp(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FABSL\n+#if _GLIBCPP_HAVE___BUILTIN_FABSL\n     inline long double _CPP_fabs_capture(long double __x)\n       { return __builtin_fabsl(__x); }\n #elif _GLIBCPP_HAVE_FABSL\n@@ -575,76 +411,55 @@\n       { return fabs(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FLOORL\n-    inline long double _CPP_floor_capture(long double __x)\n-      { return __builtin_floorl(__x); }\n-#elif _GLIBCPP_HAVE_FLOORL\n+#if _GLIBCPP_HAVE_FLOORL\n     inline long double _CPP_floor_capture(long double __x)\n       { return floorl(__x); }\n #else\n     inline long double _CPP_floor_capture(long double __x)\n       { return floor(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FMODL\n-    inline long double _CPP_fmod_capture(long double __x, long double __y)\n-      { return __builtin_fmodl(__x, __y); }\n-#elif _GLIBCPP_HAVE_FMODL\n+#if _GLIBCPP_HAVE_FMODL\n     inline long double _CPP_fmod_capture(long double __x, long double __y)\n       { return fmodl(__x, __y); }\n #else\n     inline long double _CPP_fmod_capture(long double __x, long double __y)\n       { return fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_FREXPL\n-    inline long double _CPP_frexp_capture(long double __x, int* __exp)\n-      { return __builtin_frexpl(__x, __exp); }\n-#elif _GLIBCPP_HAVE_FREXPL\n+#if _GLIBCPP_HAVE_FREXPL\n     inline long double _CPP_frexp_capture(long double __x, int* __exp)\n       { return frexpl(__x, __exp); }\n #else\n     inline long double _CPP_frexp_capture(long double __x, int* __exp)\n       { return frexp(static_cast<double>(__x), __exp); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_LDEXPL\n-    inline long double _CPP_ldexp_capture(long double __x, int __exp)\n-      { return __builtin_ldexpl(__x, __exp); }\n-#elif _GLIBCPP_HAVE_LDEXPL\n+#if _GLIBCPP_HAVE_LDEXPL\n     inline long double _CPP_ldexp_capture(long double __x, int __exp)\n       { return ldexpl(__x, __exp); }\n #else\n     inline long double _CPP_ldexp_capture(long double __x, int __exp)\n       { return ldexp(static_cast<double>(__x), __exp); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_LOGL\n-    inline long double _CPP_log_capture(long double __x)\n-      { return __builtin_logl(__x); }\n-#elif _GLIBCPP_HAVE_LOGL\n+#if _GLIBCPP_HAVE_LOGL\n     inline long double _CPP_log_capture(long double __x)\n       { return logl(__x); }\n #else\n     inline long double _CPP_log_capture(long double __x)\n       { return log(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_LOG10L\n-    inline long double _CPP_log10_capture(long double __x)\n-      { return __builtin_log10l(__x); }\n-#elif _GLIBCPP_HAVE_LOG10L\n+#if _GLIBCPP_HAVE_LOG10L\n     inline long double _CPP_log10_capture(long double __x)\n       { return log10l(__x); }\n #else\n     inline long double _CPP_log10_capture(long double __x)\n       { return log10(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_MODFL\n-    inline long double _CPP_mod_capture(long double __x, long double* __iptr)\n-      { return __builtin_modfl(__x, __iptr); }\n-#elif _GLIBCPP_HAVE_MODFL\n+#if _GLIBCPP_HAVE_MODFL\n     inline long double _CPP_modf_capture(long double __x, long double* __iptr)\n       { return modfl(__x, __iptr); }\n #else\n@@ -657,18 +472,15 @@\n     }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_POWL\n-    inline long double _CPP_pow_capture(long double __x, long double __y)\n-      { return __builtin_powl(__x, __y); }\n-#elif _GLIBCPP_HAVE_POWL\n+#if _GLIBCPP_HAVE_POWL\n     inline long double _CPP_pow_capture(long double __x, long double __y)\n       { return powl(__x, __y); }\n #else\n     inline long double _CPP_pow_capture(long double __x, long double __y)\n       { return pow(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_SINL\n+#if _GLIBCPP_HAVE___BUILTIN_SINL\n     inline long double _CPP_sin_capture(long double __x)\n       { return __builtin_sinl(__x); }\n #elif _GLIBCPP_HAVE_SINL\n@@ -679,18 +491,15 @@\n       { return sin(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_SINHL\n-    inline long double _CPP_sinh_capture(long double __x)\n-      { return __builtin_sinhl(__x); }\n-#elif _GLIBCPP_HAVE_SINHL\n+#if _GLIBCPP_HAVE_SINHL\n     inline long double _CPP_sinh_capture(long double __x)\n       { return sinhl(__x); }\n #else\n     inline long double _CPP_sinh_capture(long double __x)\n       { return sinh(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_SQRTL\n+#if _GLIBCPP_HAVE___BUILTIN_SQRTL\n     inline long double _CPP_sqrt_capture(long double __x)\n       { return __builtin_sqrtl(__x); }\n #elif _GLIBCPP_HAVE_SQRTL\n@@ -701,21 +510,15 @@\n       { return sqrt(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_TANL\n-    inline long double _CPP_tan_capture(long double __x)\n-      { return __builtin_tanl(__x); }\n-#elif _GLIBCPP_HAVE_TANL\n+#if _GLIBCPP_HAVE_TANL\n     inline long double _CPP_tan_capture(long double __x)\n       { return tanl(__x); }\n #else\n     inline long double _CPP_tan_capture(long double __x)\n       { return tan(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_BUILTIN_TANHL\n-    inline long double _CPP_tanh_capture(long double __x)\n-      { return __builtin_tanhl(__x); }\n-#elif _GLIBCPP_HAVE_TANHL\n+#if _GLIBCPP_HAVE_TANHL\n     inline long double _CPP_tanh_capture(long double __x)\n       { return tanhl(__x); }\n #else"}]}