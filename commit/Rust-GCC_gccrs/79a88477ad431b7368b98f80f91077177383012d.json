{"sha": "79a88477ad431b7368b98f80f91077177383012d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlhODg0NzdhZDQzMWI3MzY4Yjk4ZjgwZjkxMDc3MTc3MzgzMDEyZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-17T13:16:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-17T13:16:51Z"}, "message": "Remove unused explicit instantiation of __bind_simple\n\nThe explicit instantiation of std::call_once used to require an\ninstantiation of __bind_simple, but call_once was changed by r241031 to\nnot use __bind_simple. The instantiation of __bind_simple (and the\ndefinitions it uses) are not needed. They should have been removed\ninstead of doing the changes in r241111 that kept them compiling.\n\nThe use of std::call_once by _Async_state_common::_M_join can be\nsimplified to use a pointer instead of reference wrapper. The call_once\nsymbol isn't exported so the change isn't visible outside the library.\n\n\t* src/c++11/compatibility-thread-c++0x.cc [_GLIBCXX_SHARED]\n\t(_Async_state_common::_M_join): Simplify use of std::call_once and\n\tcorresponding explicit instantiation.\n\t(_Maybe_wrap_member_pointer, _Bind_simple, _Bind_simple_helper)\n\t(__bind_simple): Remove definitions and explicit instantiation that\n\tare not required by exported symbols.\n\nFrom-SVN: r262823", "tree": {"sha": "402a8c4308d672babc7593faad188731e6cd3e3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/402a8c4308d672babc7593faad188731e6cd3e3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79a88477ad431b7368b98f80f91077177383012d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a88477ad431b7368b98f80f91077177383012d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79a88477ad431b7368b98f80f91077177383012d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a88477ad431b7368b98f80f91077177383012d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f4453745ecf9ff1730567c665f4b1847bd3d33f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f4453745ecf9ff1730567c665f4b1847bd3d33f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f4453745ecf9ff1730567c665f4b1847bd3d33f"}], "stats": {"total": 91, "additions": 12, "deletions": 79}, "files": [{"sha": "33b2eea824784d1d0dee01c33982562ebd2554a1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a88477ad431b7368b98f80f91077177383012d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a88477ad431b7368b98f80f91077177383012d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=79a88477ad431b7368b98f80f91077177383012d", "patch": "@@ -1,3 +1,12 @@\n+2018-07-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++11/compatibility-thread-c++0x.cc [_GLIBCXX_SHARED]\n+\t(_Async_state_common::_M_join): Simplify use of std::call_once and\n+\tcorresponding explicit instantiation.\n+\t(_Maybe_wrap_member_pointer, _Bind_simple, _Bind_simple_helper)\n+\t(__bind_simple): Remove definitions and explicit instantiation that\n+\tare not required by exported symbols.\n+\n 2018-07-16  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* scripts/create_testsuite_files: Fix typo in comment."}, {"sha": "e60c8f9bfd69f833bce9f9211c1106191cf47dc8", "filename": "libstdc++-v3/src/c++11/compatibility-thread-c++0x.cc", "status": "modified", "additions": 3, "deletions": 79, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a88477ad431b7368b98f80f91077177383012d/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-thread-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a88477ad431b7368b98f80f91077177383012d/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-thread-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-thread-c%2B%2B0x.cc?ref=79a88477ad431b7368b98f80f91077177383012d", "patch": "@@ -109,92 +109,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   protected:\n     ~_Async_state_common();\n     virtual void _M_run_deferred() { _M_join(); }\n-    void _M_join() { std::call_once(_M_once, &thread::join, ref(_M_thread)); }\n+    void _M_join() { std::call_once(_M_once, &thread::join, &_M_thread); }\n     thread _M_thread;\n     once_flag _M_once;\n   };\n #if defined(_GLIBCXX_HAVE_TLS)\n   // Replaced with inline definition in gcc-4.8.0\n   __future_base::_Async_state_common::~_Async_state_common() { _M_join(); }\n \n-  template<typename _Tp>\n-    struct _Maybe_wrap_member_pointer;\n-\n-  template<typename _Tp, typename _Class>\n-    struct _Maybe_wrap_member_pointer<_Tp _Class::*>\n-    {\n-      typedef _Mem_fn<_Tp _Class::*> type;\n-\n-      static constexpr type\n-      __do_wrap(_Tp _Class::* __pm)\n-      { return type(__pm); }\n-    };\n-\n-  template<typename _Signature>\n-    struct _Bind_simple;\n-\n-  template<typename _Callable, typename... _Args>\n-    struct _Bind_simple<_Callable(_Args...)>\n-    {\n-      typedef typename result_of<_Callable(_Args...)>::type result_type;\n-\n-      template<typename _Tp, typename... _Up>\n-        explicit\n-        _Bind_simple(_Tp&& __f, _Up&&... __args)\n-        : _M_bound(std::forward<_Tp>(__f), std::forward<_Up>(__args)...)\n-        { }\n-\n-      _Bind_simple(const _Bind_simple&) = default;\n-      _Bind_simple(_Bind_simple&&) = default;\n-\n-      result_type\n-      operator()()\n-      {\n-        typedef typename _Build_index_tuple<sizeof...(_Args)>::__type _Indices;\n-        return _M_invoke(_Indices());\n-      }\n-\n-    private:\n-      template<std::size_t... _Indices>\n-        typename result_of<_Callable(_Args...)>::type\n-        _M_invoke(_Index_tuple<_Indices...>)\n-        {\n-         // std::bind always forwards bound arguments as lvalues,\n-         // but this type can call functions which only accept rvalues.\n-          return std::forward<_Callable>(std::get<0>(_M_bound))(\n-              std::forward<_Args>(std::get<_Indices+1>(_M_bound))...);\n-        }\n-\n-      std::tuple<_Callable, _Args...> _M_bound;\n-    };\n-\n-  template<typename _Func, typename... _BoundArgs>\n-    struct _Bind_simple_helper\n-    {\n-      typedef _Maybe_wrap_member_pointer<typename decay<_Func>::type>\n-        __maybe_type;\n-      typedef typename __maybe_type::type __func_type;\n-      typedef _Bind_simple<__func_type(typename decay<_BoundArgs>::type...)>\n-               __type;\n-    };\n-\n-  // Simplified version of std::bind for internal use, without support for\n-  // unbound arguments, placeholders or nested bind expressions.\n-  template<typename _Callable, typename... _Args>\n-    typename _Bind_simple_helper<_Callable, _Args...>::__type\n-    __bind_simple(_Callable&& __callable, _Args&&... __args)\n-    {\n-      typedef _Bind_simple_helper<_Callable, _Args...> __helper_type;\n-      typedef typename __helper_type::__maybe_type __maybe_type;\n-      typedef typename __helper_type::__type __result_type;\n-      return __result_type(\n-          __maybe_type::__do_wrap( std::forward<_Callable>(__callable)),\n-          std::forward<_Args>(__args)...);\n-    }\n-\n-  // Explicit instantiation due to -fno-implicit-instantiation.\n-  template void call_once(once_flag&, void (thread::*&&)(), reference_wrapper<thread>&&);\n-  template _Bind_simple_helper<void (thread::*)(), reference_wrapper<thread>>::__type __bind_simple(void (thread::*&&)(), reference_wrapper<thread>&&);\n+  // Explicit instantiation due to -fno-implicit-templates.\n+  template void call_once(once_flag&, void (thread::*&&)(), thread*&&);\n #endif // _GLIBCXX_HAVE_TLS\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}]}