{"sha": "78ec9c15be7e34eb2b8c1faaea3e15b7740322df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhlYzljMTViZTdlMzRlYjJiOGMxZmFhZWEzZTE1Yjc3NDAzMjJkZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-05T12:01:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-05T12:01:36Z"}, "message": "PR 70564 disambiguate constructors for not_fn call wrapper\n\n\tPR libstdc++/70564\n\t* include/experimental/functional (_Not_fn): Remove.\n\t(not_fn): Use std::_Not_fn.\n\t* include/std/functional (_Not_fn): Add second parameter to\n\tdisambiguate copying from initialization by not_fn. Define for C++14.\n\t(not_fn): Add second argument to initialization.\n\t* testsuite/20_util/not_fn/1.cc: Copy call wrapper using\n\tdirect-initialization.\n\nFrom-SVN: r240778", "tree": {"sha": "706df9dcc4c3b957089fc9b53c6684d8cb02afef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/706df9dcc4c3b957089fc9b53c6684d8cb02afef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78ec9c15be7e34eb2b8c1faaea3e15b7740322df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78ec9c15be7e34eb2b8c1faaea3e15b7740322df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78ec9c15be7e34eb2b8c1faaea3e15b7740322df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78ec9c15be7e34eb2b8c1faaea3e15b7740322df/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "496326bcc14616ae90da47db7a7f203d79f02923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/496326bcc14616ae90da47db7a7f203d79f02923", "html_url": "https://github.com/Rust-GCC/gccrs/commit/496326bcc14616ae90da47db7a7f203d79f02923"}], "stats": {"total": 106, "additions": 40, "deletions": 66}, "files": [{"sha": "20bbc5e13d68f65a5528e5e22a08b9ac582cc772", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ec9c15be7e34eb2b8c1faaea3e15b7740322df/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ec9c15be7e34eb2b8c1faaea3e15b7740322df/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=78ec9c15be7e34eb2b8c1faaea3e15b7740322df", "patch": "@@ -1,3 +1,14 @@\n+2016-10-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/70564\n+\t* include/experimental/functional (_Not_fn): Remove.\n+\t(not_fn): Use std::_Not_fn.\n+\t* include/std/functional (_Not_fn): Add second parameter to\n+\tdisambiguate copying from initialization by not_fn. Define for C++14.\n+\t(not_fn): Add second argument to initialization.\n+\t* testsuite/20_util/not_fn/1.cc: Copy call wrapper using\n+\tdirect-initialization.\n+\n 2016-10-03  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* src/c++11/shared_ptr.cc (mask, invalid, get_mutex): Move"}, {"sha": "db45665d1508fbf413e7708b204fac9fea3a5fe5", "filename": "libstdc++-v3/include/experimental/functional", "status": "modified", "additions": 1, "deletions": 52, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ec9c15be7e34eb2b8c1faaea3e15b7740322df/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ec9c15be7e34eb2b8c1faaea3e15b7740322df/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional?ref=78ec9c15be7e34eb2b8c1faaea3e15b7740322df", "patch": "@@ -378,64 +378,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #define __cpp_lib_experimental_not_fn 201406\n \n-  /// Generalized negator.\n-  template<typename _Fn>\n-    class _Not_fn\n-    {\n-      _Fn _M_fn;\n-\n-    public:\n-      template<typename _Fn2>\n-\texplicit\n-\t_Not_fn(_Fn2&& __fn)\n-\t: _M_fn(std::forward<_Fn2>(__fn)) { }\n-\n-      _Not_fn(const _Not_fn& __fn) = default;\n-      _Not_fn(_Not_fn&& __fn) = default;\n-      ~_Not_fn() = default;\n-\n-      template<typename... _Args>\n-\tauto\n-\toperator()(_Args&&... __args) &\n-\tnoexcept(__is_nothrow_callable<_Fn&(_Args&&...)>::value)\n-\t-> decltype(!std::declval<result_of_t<_Fn&(_Args&&...)>>())\n-\t{ return !std::__invoke(_M_fn, std::forward<_Args>(__args)...); }\n-\n-      template<typename... _Args>\n-\tauto\n-\toperator()(_Args&&... __args) const &\n-\tnoexcept(__is_nothrow_callable<const _Fn&(_Args&&...)>::value)\n-\t-> decltype(!std::declval<result_of_t<const _Fn&(_Args&&...)>>())\n-\t{ return !std::__invoke(_M_fn, std::forward<_Args>(__args)...); }\n-\n-      template<typename... _Args>\n-\tauto\n-\toperator()(_Args&&... __args) &&\n-\tnoexcept(__is_nothrow_callable<_Fn&&(_Args&&...)>::value)\n-\t-> decltype(!std::declval<result_of_t<_Fn&&(_Args&&...)>>())\n-\t{\n-\t  return !std::__invoke(std::move(_M_fn),\n-\t\t\t\tstd::forward<_Args>(__args)...);\n-\t}\n-\n-      template<typename... _Args>\n-\tauto\n-\toperator()(_Args&&... __args) const &&\n-\tnoexcept(__is_nothrow_callable<const _Fn&&(_Args&&...)>::value)\n-\t-> decltype(!std::declval<result_of_t<const _Fn&&(_Args&&...)>>())\n-\t{\n-\t  return !std::__invoke(std::move(_M_fn),\n-\t\t\t\tstd::forward<_Args>(__args)...);\n-\t}\n-    };\n-\n   /// [func.not_fn] Function template not_fn\n   template<typename _Fn>\n     inline auto\n     not_fn(_Fn&& __fn)\n     noexcept(std::is_nothrow_constructible<std::decay_t<_Fn>, _Fn&&>::value)\n     {\n-      return _Not_fn<std::decay_t<_Fn>>{std::forward<_Fn>(__fn)};\n+      return std::_Not_fn<std::decay_t<_Fn>>{std::forward<_Fn>(__fn), 0};\n     }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "1c7523e89afbd5a204428a5c4d420b16c80b6cc0", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ec9c15be7e34eb2b8c1faaea3e15b7740322df/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ec9c15be7e34eb2b8c1faaea3e15b7740322df/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=78ec9c15be7e34eb2b8c1faaea3e15b7740322df", "patch": "@@ -2139,19 +2139,14 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n     swap(function<_Res(_Args...)>& __x, function<_Res(_Args...)>& __y) noexcept\n     { __x.swap(__y); }\n \n-\n-#if __cplusplus > 201402L\n-\n-#define __cpp_lib_not_fn 201603\n-\n-    /// Generalized negator.\n+#if __cplusplus >= 201402L\n+  /// Generalized negator.\n   template<typename _Fn>\n     class _Not_fn\n     {\n     public:\n       template<typename _Fn2>\n-\texplicit\n-\t_Not_fn(_Fn2&& __fn)\n+\t_Not_fn(_Fn2&& __fn, int)\n \t: _M_fn(std::forward<_Fn2>(__fn)) { }\n \n       _Not_fn(const _Not_fn& __fn) = default;\n@@ -2161,21 +2156,21 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       template<typename... _Args>\n \tauto\n \toperator()(_Args&&... __args) &\n-\tnoexcept(is_nothrow_callable_v<_Fn&(_Args&&...)>)\n+\tnoexcept(__is_nothrow_callable<_Fn&(_Args&&...)>::value)\n \t-> decltype(!std::declval<result_of_t<_Fn&(_Args&&...)>>())\n \t{ return !std::__invoke(_M_fn, std::forward<_Args>(__args)...); }\n \n       template<typename... _Args>\n \tauto\n \toperator()(_Args&&... __args) const &\n-\tnoexcept(is_nothrow_callable_v<const _Fn&(_Args&&...)>)\n+\tnoexcept(__is_nothrow_callable<const _Fn&(_Args&&...)>::value)\n \t-> decltype(!std::declval<result_of_t<const _Fn&(_Args&&...)>>())\n \t{ return !std::__invoke(_M_fn, std::forward<_Args>(__args)...); }\n \n       template<typename... _Args>\n \tauto\n \toperator()(_Args&&... __args) &&\n-\tnoexcept(is_nothrow_callable_v<_Fn&&(_Args&&...)>)\n+\tnoexcept(__is_nothrow_callable<_Fn&&(_Args&&...)>::value)\n \t-> decltype(!std::declval<result_of_t<_Fn&&(_Args&&...)>>())\n \t{\n \t  return !std::__invoke(std::move(_M_fn),\n@@ -2185,7 +2180,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       template<typename... _Args>\n \tauto\n \toperator()(_Args&&... __args) const &&\n-\tnoexcept(is_nothrow_callable_v<const _Fn&&(_Args&&...)>)\n+\tnoexcept(__is_nothrow_callable<const _Fn&&(_Args&&...)>::value)\n \t-> decltype(!std::declval<result_of_t<const _Fn&&(_Args&&...)>>())\n \t{\n \t  return !std::__invoke(std::move(_M_fn),\n@@ -2195,14 +2190,19 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n     private:\n       _Fn _M_fn;\n     };\n+#endif // C++14\n+\n+#if __cplusplus > 201402L\n+\n+#define __cpp_lib_not_fn 201603\n \n   /// [func.not_fn] Function template not_fn\n   template<typename _Fn>\n     inline auto\n     not_fn(_Fn&& __fn)\n     noexcept(std::is_nothrow_constructible<std::decay_t<_Fn>, _Fn&&>::value)\n     {\n-      return _Not_fn<std::decay_t<_Fn>>{std::forward<_Fn>(__fn)};\n+      return _Not_fn<std::decay_t<_Fn>>{std::forward<_Fn>(__fn), 0};\n     }\n \n   // Searchers\n@@ -2515,7 +2515,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       return std::make_pair(__last, __last);\n     }\n \n-#endif\n+#endif // C++17\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "8d6e9eccee111218be0cc0d06f49c199505a606a", "filename": "libstdc++-v3/testsuite/20_util/not_fn/1.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ec9c15be7e34eb2b8c1faaea3e15b7740322df/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fnot_fn%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ec9c15be7e34eb2b8c1faaea3e15b7740322df/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fnot_fn%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fnot_fn%2F1.cc?ref=78ec9c15be7e34eb2b8c1faaea3e15b7740322df", "patch": "@@ -84,11 +84,18 @@ test04()\n   VERIFY( not_fn(f)(d) );\n }\n \n+void\n+test05()\n+{\n+  auto nf{ std::not_fn([] { return false; }) };\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n+  test05();\n }"}, {"sha": "59d7621fb932baf8984628568afa453abde9a26c", "filename": "libstdc++-v3/testsuite/experimental/functional/not_fn.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ec9c15be7e34eb2b8c1faaea3e15b7740322df/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffunctional%2Fnot_fn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ec9c15be7e34eb2b8c1faaea3e15b7740322df/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffunctional%2Fnot_fn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffunctional%2Fnot_fn.cc?ref=78ec9c15be7e34eb2b8c1faaea3e15b7740322df", "patch": "@@ -84,11 +84,18 @@ test04()\n   VERIFY( not_fn(f)(d) );\n }\n \n+void\n+test05()\n+{\n+  auto nf{ not_fn([] { return false; }) };\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n+  test05();\n }"}]}