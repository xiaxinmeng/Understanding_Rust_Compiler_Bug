{"sha": "9fd9ccf7150c486685430557b5c1865f464201ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZkOWNjZjcxNTBjNDg2Njg1NDMwNTU3YjVjMTg2NWY0NjQyMDFhYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-04-16T15:32:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-04-16T15:32:26Z"}, "message": "re PR tree-optimization/56756 (ICE: verify_ssa failed (definition in block n follows the use !))\n\n2013-04-16  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56756\n\t* tree-ssa-loop-im.c (struct first_mem_ref_loc_1): New functor.\n\t(first_mem_ref_loc): New.\n\t(execute_sm): Place the load temporarily before a previous\n\taccess instead of in the latch edge to ensure its SSA dependencies\n\tare defined at points dominating the load.\n\n\t* gcc.dg/torture/pr56756.c: New testcase.\n\nFrom-SVN: r198001", "tree": {"sha": "06c4c358c5207acc9ab8ce629b72aa388bf6412e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06c4c358c5207acc9ab8ce629b72aa388bf6412e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fd9ccf7150c486685430557b5c1865f464201ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd9ccf7150c486685430557b5c1865f464201ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fd9ccf7150c486685430557b5c1865f464201ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd9ccf7150c486685430557b5c1865f464201ab/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "326785a3e529f6a5b6d7d46c8e7ebfeb94ee12df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/326785a3e529f6a5b6d7d46c8e7ebfeb94ee12df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/326785a3e529f6a5b6d7d46c8e7ebfeb94ee12df"}], "stats": {"total": 82, "additions": 76, "deletions": 6}, "files": [{"sha": "60f941e5f9290de8777e637646ef111c76f66972", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd9ccf7150c486685430557b5c1865f464201ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd9ccf7150c486685430557b5c1865f464201ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fd9ccf7150c486685430557b5c1865f464201ab", "patch": "@@ -1,3 +1,12 @@\n+2013-04-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56756\n+\t* tree-ssa-loop-im.c (struct first_mem_ref_loc_1): New functor.\n+\t(first_mem_ref_loc): New.\n+\t(execute_sm): Place the load temporarily before a previous\n+\taccess instead of in the latch edge to ensure its SSA dependencies\n+\tare defined at points dominating the load.\n+\n 2013-04-16  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* cfgrtl.c (cfg_layout_merge_blocks): Revert r184005, implement"}, {"sha": "b3adc0ee2e2e4d9a64f78e37f82bbe5c8da217ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd9ccf7150c486685430557b5c1865f464201ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd9ccf7150c486685430557b5c1865f464201ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9fd9ccf7150c486685430557b5c1865f464201ab", "patch": "@@ -1,3 +1,8 @@\n+2013-04-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56756\n+\t* gcc.dg/torture/pr56756.c: New testcase.\n+\n 2013-04-16  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/56969"}, {"sha": "470014d266075cc14b0ac4e1b45f7440809f1a6f", "filename": "gcc/testsuite/gcc.dg/torture/pr56756.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd9ccf7150c486685430557b5c1865f464201ab/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr56756.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd9ccf7150c486685430557b5c1865f464201ab/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr56756.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr56756.c?ref=9fd9ccf7150c486685430557b5c1865f464201ab", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+\n+int a, *b;\n+\n+void f(void)\n+{\n+  if(a)\n+    {\n+      int k;\n+\n+      for(a = 0; a < 1; a++)\n+\t{\n+\t  int **q;\n+\t  f();\n+\n+\t  for(; **q; ++**q)\n+\t    lbl:\n+\t\tif(a)\n+\t\t  {\n+\t\t    a = 0;\n+\t\t    goto lbl;\n+\t\t  }\n+\n+\t  b = &k;\n+\t}\n+    }\n+  goto lbl;\n+}"}, {"sha": "188af0012a7f828bcfe1c0364a4ba509b0b0bc9d", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd9ccf7150c486685430557b5c1865f464201ab/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd9ccf7150c486685430557b5c1865f464201ab/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=9fd9ccf7150c486685430557b5c1865f464201ab", "patch": "@@ -1718,6 +1718,32 @@ rewrite_mem_refs (struct loop *loop, mem_ref_p ref, tree tmp_var)\n   for_all_locs_in_loop (loop, ref, rewrite_mem_ref_loc (tmp_var));\n }\n \n+/* Stores the first reference location in LOCP.  */\n+\n+struct first_mem_ref_loc_1\n+{\n+  first_mem_ref_loc_1 (mem_ref_loc_p *locp_) : locp (locp_) {}\n+  bool operator()(mem_ref_loc_p loc);\n+  mem_ref_loc_p *locp;\n+};\n+\n+bool\n+first_mem_ref_loc_1::operator()(mem_ref_loc_p loc)\n+{\n+  *locp = loc;\n+  return true;\n+}\n+\n+/* Returns the first reference location to REF in LOOP.  */\n+\n+static mem_ref_loc_p\n+first_mem_ref_loc (struct loop *loop, mem_ref_p ref)\n+{\n+  mem_ref_loc_p locp = NULL;\n+  for_all_locs_in_loop (loop, ref, first_mem_ref_loc_1 (&locp));\n+  return locp;\n+}\n+\n /* The name and the length of the currently generated variable\n    for lsm.  */\n #define MAX_LSM_NAME_LENGTH 40\n@@ -2022,9 +2048,10 @@ execute_sm (struct loop *loop, vec<edge> exits, mem_ref_p ref)\n   unsigned i;\n   gimple load;\n   struct fmt_data fmt_data;\n-  edge ex, latch_edge;\n+  edge ex;\n   struct lim_aux_data *lim_data;\n   bool multi_threaded_model_p = false;\n+  gimple_stmt_iterator gsi;\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -2049,9 +2076,10 @@ execute_sm (struct loop *loop, vec<edge> exits, mem_ref_p ref)\n \n   rewrite_mem_refs (loop, ref, tmp_var);\n \n-  /* Emit the load code into the latch, so that we are sure it will\n-     be processed after all dependencies.  */\n-  latch_edge = loop_latch_edge (loop);\n+  /* Emit the load code on a random exit edge or into the latch if\n+     the loop does not exit, so that we are sure it will be processed\n+     by move_computations after all dependencies.  */\n+  gsi = gsi_for_stmt (first_mem_ref_loc (loop, ref)->stmt);\n \n   /* FIXME/TODO: For the multi-threaded variant, we could avoid this\n      load altogether, since the store is predicated by a flag.  We\n@@ -2060,15 +2088,15 @@ execute_sm (struct loop *loop, vec<edge> exits, mem_ref_p ref)\n   lim_data = init_lim_data (load);\n   lim_data->max_loop = loop;\n   lim_data->tgt_loop = loop;\n-  gsi_insert_on_edge (latch_edge, load);\n+  gsi_insert_before (&gsi, load, GSI_SAME_STMT);\n \n   if (multi_threaded_model_p)\n     {\n       load = gimple_build_assign (store_flag, boolean_false_node);\n       lim_data = init_lim_data (load);\n       lim_data->max_loop = loop;\n       lim_data->tgt_loop = loop;\n-      gsi_insert_on_edge (latch_edge, load);\n+      gsi_insert_before (&gsi, load, GSI_SAME_STMT);\n     }\n \n   /* Sink the store to every exit from the loop.  */"}]}