{"sha": "b3181992f587d6d7de62c21ae93fb37d68f8d265", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMxODE5OTJmNTg3ZDZkN2RlNjJjMjFhZTkzZmIzN2Q2OGY4ZDI2NQ==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2018-07-16T14:09:53Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-16T14:09:53Z"}, "message": "[Ada] Violation of No_Standard_Allocators_After_Elaboration not detected\n\nThe compiler fails to generate a call to detect allocators executed after\nelaboration in cases where the allocator is associated with Global_Pool_Object.\nThe fix is to test for this associated storage pool as part of the condition\nfor generating a call to System.Elaboration_Allocators.Check_Standard_Alloctor.\nAlso, the exception Storage_Error is now generated instead of Program_Error\nfor such a run-time violation, as required by the Ada RM in D.7.\n\nThe following test must compile and execute quietly:\n\n-- Put the pragma in gnat.adc:\npragma Restrictions (No_Standard_Allocators_After_Elaboration);\n\npackage Pkg_With_Allocators is\n\n   type Priv is private;\n\n   procedure Allocate\n     (Use_Global_Allocator : Boolean;\n      During_Elaboration   : Boolean);\n\nprivate\n\n   type Rec is record\n      Int : Integer;\n   end record;\n\n   type Priv is access Rec;\n\nend Pkg_With_Allocators;\n\npackage body Pkg_With_Allocators is\n\n   Ptr : Priv;\n\n   procedure Allocate\n     (Use_Global_Allocator : Boolean;\n      During_Elaboration   : Boolean)\n   is\n      type Local_Acc is access Rec;\n\n      Local_Ptr : Local_Acc;\n\n   begin\n      if Use_Global_Allocator then\n         Ptr := new Rec;  -- Raise Storage_Error if after elaboration\n         Ptr.Int := 1;\n      else\n         Local_Ptr := new Rec;  -- Raise Storage_Error if after elaboration\n         Local_Ptr.Int := 1;\n      end if;\n\n      if not During_Elaboration then\n         raise Program_Error;  -- No earlier exception: FAIL\n      end if;\n\n   exception\n      when Storage_Error =>\n         if During_Elaboration then\n            raise Program_Error;  -- No exception expected: FAIL\n         else\n            null;                 -- Expected Storage_Error: PASS\n         end if;\n      when others =>\n         raise Program_Error;  -- Unexpected exception: FAIL\n   end Allocate;\n\nbegin\n   Allocate (Use_Global_Allocator => True, During_Elaboration => True);\n\n   Allocate (Use_Global_Allocator => False, During_Elaboration => True);\nend Pkg_With_Allocators;\n\nwith Pkg_With_Allocators;\n\nprocedure Alloc_Restriction_Main is\nbegin\n   Pkg_With_Allocators.Allocate\n     (Use_Global_Allocator => True,\n      During_Elaboration   => False);\n\n   Pkg_With_Allocators.Allocate\n     (Use_Global_Allocator => False,\n      During_Elaboration   => False);\nend Alloc_Restriction_Main;\n\n2018-07-16  Gary Dismukes  <dismukes@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_N_Allocator): Test for Storage_Pool being RTE in\n\taddition to the existing test for no Storage_Pool as a condition\n\tenabling generation of the call to Check_Standard_Allocator when the\n\trestriction No_Standard_Allocators_After_Elaboration is active.\n\t* libgnat/s-elaall.ads (Check_Standard_Allocator): Correct comment to\n\tsay that Storage_Error will be raised (rather than Program_Error).\n\t* libgnat/s-elaall.adb (Check_Standard_Allocator): Raise Storage_Error\n\trather than Program_Error when Elaboration_In_Progress is False.\n\nFrom-SVN: r262700", "tree": {"sha": "8067b78c00a8362654801c63f876a8a23fb7a3b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8067b78c00a8362654801c63f876a8a23fb7a3b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3181992f587d6d7de62c21ae93fb37d68f8d265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3181992f587d6d7de62c21ae93fb37d68f8d265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3181992f587d6d7de62c21ae93fb37d68f8d265", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3181992f587d6d7de62c21ae93fb37d68f8d265/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3bbfc593690e307c5c41885ebec8a7ecabb1a41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3bbfc593690e307c5c41885ebec8a7ecabb1a41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3bbfc593690e307c5c41885ebec8a7ecabb1a41"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "19e2c44c50bcb25314c1711d95775f643c0d7fef", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3181992f587d6d7de62c21ae93fb37d68f8d265/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3181992f587d6d7de62c21ae93fb37d68f8d265/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b3181992f587d6d7de62c21ae93fb37d68f8d265", "patch": "@@ -1,3 +1,14 @@\n+2018-07-16  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Allocator): Test for Storage_Pool being RTE in\n+\taddition to the existing test for no Storage_Pool as a condition\n+\tenabling generation of the call to Check_Standard_Allocator when the\n+\trestriction No_Standard_Allocators_After_Elaboration is active.\n+\t* libgnat/s-elaall.ads (Check_Standard_Allocator): Correct comment to\n+\tsay that Storage_Error will be raised (rather than Program_Error).\n+\t* libgnat/s-elaall.adb (Check_Standard_Allocator): Raise Storage_Error\n+\trather than Program_Error when Elaboration_In_Progress is False.\n+\n 2018-07-16  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_eval.adb: Fix spelling for compile-time-known."}, {"sha": "222ca19706d8d5dd70bcb674d7c8203403d80c7e", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3181992f587d6d7de62c21ae93fb37d68f8d265/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3181992f587d6d7de62c21ae93fb37d68f8d265/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=b3181992f587d6d7de62c21ae93fb37d68f8d265", "patch": "@@ -4561,12 +4561,14 @@ package body Exp_Ch4 is\n          end if;\n       end if;\n \n-      --  If no storage pool has been specified and we have the restriction\n+      --  If no storage pool has been specified, or the storage pool\n+      --  is System.Pool_Global.Global_Pool_Object, and the restriction\n       --  No_Standard_Allocators_After_Elaboration is present, then generate\n       --  a call to Elaboration_Allocators.Check_Standard_Allocator.\n \n       if Nkind (N) = N_Allocator\n-        and then No (Storage_Pool (N))\n+        and then (No (Storage_Pool (N))\n+                   or else Is_RTE (Storage_Pool (N), RE_Global_Pool_Object))\n         and then Restriction_Active (No_Standard_Allocators_After_Elaboration)\n       then\n          Insert_Action (N,"}, {"sha": "1c4517a5b3b8c66ae2b39743377e44b68335fcef", "filename": "gcc/ada/libgnat/s-elaall.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3181992f587d6d7de62c21ae93fb37d68f8d265/gcc%2Fada%2Flibgnat%2Fs-elaall.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3181992f587d6d7de62c21ae93fb37d68f8d265/gcc%2Fada%2Flibgnat%2Fs-elaall.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-elaall.adb?ref=b3181992f587d6d7de62c21ae93fb37d68f8d265", "patch": "@@ -45,7 +45,7 @@ package body System.Elaboration_Allocators is\n    procedure Check_Standard_Allocator is\n    begin\n       if not Elaboration_In_Progress then\n-         raise Program_Error with\n+         raise Storage_Error with\n            \"standard allocator after elaboration is complete is not allowed \"\n            & \"(No_Standard_Allocators_After_Elaboration restriction active)\";\n       end if;"}, {"sha": "cbe4d693ea841aa4c59d83b8a87b0a1c7808a172", "filename": "gcc/ada/libgnat/s-elaall.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3181992f587d6d7de62c21ae93fb37d68f8d265/gcc%2Fada%2Flibgnat%2Fs-elaall.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3181992f587d6d7de62c21ae93fb37d68f8d265/gcc%2Fada%2Flibgnat%2Fs-elaall.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-elaall.ads?ref=b3181992f587d6d7de62c21ae93fb37d68f8d265", "patch": "@@ -51,7 +51,7 @@ package System.Elaboration_Allocators is\n    procedure Check_Standard_Allocator;\n    --  Called as part of every allocator in a program for which the restriction\n    --  No_Standard_Allocators_After_Elaboration is active. This will raise an\n-   --  exception (Program_Error with an appropriate message) if it is called\n+   --  exception (Storage_Error with an appropriate message) if it is called\n    --  after the call to Mark_End_Of_Elaboration.\n \n end System.Elaboration_Allocators;"}]}