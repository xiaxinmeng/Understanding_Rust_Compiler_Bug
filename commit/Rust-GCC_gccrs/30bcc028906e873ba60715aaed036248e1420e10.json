{"sha": "30bcc028906e873ba60715aaed036248e1420e10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBiY2MwMjg5MDZlODczYmE2MDcxNWFhZWQwMzYyNDhlMTQyMGUxMA==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2007-03-15T13:51:09Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2007-03-15T13:51:09Z"}, "message": "ptree.c (cxx_print_type): Use formatting markup for integers when printing template parameter...\n\n2007-03-15  Douglas Gregor  <doug.gregor@gmail.com>\n\n\t* ptree.c (cxx_print_type): Use formatting markup for integers\n\twhen printing template parameter index/level/orig level.\n\t(cxx_print_xnode): Ditto.\n\t* cp-tree.h (TEMPLATE_PARM_PARAMETER_PACK): Use TREE_LANG_FLAG_0.\n\t(struct template_parm_index_s): Remove the PARAMETER_PACK member.\n\tMake INDEX, LEVEL, and ORIG_LEVEL integers instead of\n\tHOST_WIDE_INTs.\n\t(struct saved_scope): Make X_PROCESSING_TEMPLATE_DECL an int,\n\trather than a HOST_WIDE_INT.\n\tTurn X_PROCESSING_EXPLICIT_INSTANTIATION, SKIP_EVALUATION, and\n\tNEED_POP_FUNCTION_CONTEXT into bool bitfields; reorder fields for\n\tbetter bit-packing.\n\t(struct language_function): Make RETURNS_VALUE, RETURNS_NULL,\n\tRETURNS_ABNORMALLY, IN_FUNCTION_TRY_HANDLER, and\n\tIN_BASE_INITIALIZER bool bitfields.\n\t(struct cp_declarator): Make KIND a 4-bit field. Make\n\tPARAMETER_PACK_P a bool bitfield just after KIND.\n\t* pt.c (uses_parameter_packs): Destroy the pointer set.\n\t(make_pack_expansion): Ditto.\n\t(check_for_bare_parameter_packs): Ditto.\n\t* name-lookup.c (push_to_top_level): Make need_pop a bool value.\n\nFrom-SVN: r122955", "tree": {"sha": "7001b30fe967c813936aad21b5158797ce06906f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7001b30fe967c813936aad21b5158797ce06906f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30bcc028906e873ba60715aaed036248e1420e10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30bcc028906e873ba60715aaed036248e1420e10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30bcc028906e873ba60715aaed036248e1420e10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30bcc028906e873ba60715aaed036248e1420e10/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "868d75dbdc33cfb040fcd93d0f525ab70eb43491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868d75dbdc33cfb040fcd93d0f525ab70eb43491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/868d75dbdc33cfb040fcd93d0f525ab70eb43491"}], "stats": {"total": 82, "additions": 54, "deletions": 28}, "files": [{"sha": "dcb9655a37a6435e968f124d7dad85ede4f05547", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30bcc028906e873ba60715aaed036248e1420e10/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30bcc028906e873ba60715aaed036248e1420e10/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=30bcc028906e873ba60715aaed036248e1420e10", "patch": "@@ -1,3 +1,27 @@\n+2007-03-15  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\t* ptree.c (cxx_print_type): Use formatting markup for integers\n+\twhen printing template parameter index/level/orig level.\n+\t(cxx_print_xnode): Ditto.\n+\t* cp-tree.h (TEMPLATE_PARM_PARAMETER_PACK): Use TREE_LANG_FLAG_0.\n+\t(struct template_parm_index_s): Remove the PARAMETER_PACK member.\n+\tMake INDEX, LEVEL, and ORIG_LEVEL integers instead of\n+\tHOST_WIDE_INTs.\n+\t(struct saved_scope): Make X_PROCESSING_TEMPLATE_DECL an int,\n+\trather than a HOST_WIDE_INT.\n+\tTurn X_PROCESSING_EXPLICIT_INSTANTIATION, SKIP_EVALUATION, and\n+\tNEED_POP_FUNCTION_CONTEXT into bool bitfields; reorder fields for\n+\tbetter bit-packing.\n+\t(struct language_function): Make RETURNS_VALUE, RETURNS_NULL,\n+\tRETURNS_ABNORMALLY, IN_FUNCTION_TRY_HANDLER, and\n+\tIN_BASE_INITIALIZER bool bitfields.\n+\t(struct cp_declarator): Make KIND a 4-bit field. Make\n+\tPARAMETER_PACK_P a bool bitfield just after KIND.\n+\t* pt.c (uses_parameter_packs): Destroy the pointer set.\n+\t(make_pack_expansion): Ditto.\n+\t(check_for_bare_parameter_packs): Ditto.\n+\t* name-lookup.c (push_to_top_level): Make need_pop a bool value.\n+\t\n 2007-03-14  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR c++/31165"}, {"sha": "7d6ebc7fcc96eb5f1703e8f2414b75c2392ab062", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30bcc028906e873ba60715aaed036248e1420e10/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30bcc028906e873ba60715aaed036248e1420e10/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=30bcc028906e873ba60715aaed036248e1420e10", "patch": "@@ -56,6 +56,7 @@ struct diagnostic_context;\n       OMP_FOR_GIMPLIFYING_P (in OMP_FOR)\n       BASELINK_QUALIFIED_P (in BASELINK)\n       TARGET_EXPR_IMPLICIT_P (in TARGET_EXPR)\n+      TEMPLATE_PARM_PARAMETER_PACK (in TEMPLATE_PARM_INDEX)\n    1: IDENTIFIER_VIRTUAL_P (in IDENTIFIER_NODE)\n       TI_PENDING_TEMPLATE_FLAG.\n       TEMPLATE_PARMS_FOR_INLINE.\n@@ -219,14 +220,10 @@ struct lang_identifier GTY(())\n struct template_parm_index_s GTY(())\n {\n   struct tree_common common;\n-  HOST_WIDE_INT index;\n-  HOST_WIDE_INT level;\n-  HOST_WIDE_INT orig_level;\n+  int index;\n+  int level;\n+  int orig_level;\n   tree decl;\n-\n-  /* When true, indicates that this parameter is actually a parameter\n-     pack, for variadic templates.  */\n-  BOOL_BITFIELD parameter_pack;\n };\n typedef struct template_parm_index_s template_parm_index;\n \n@@ -703,11 +700,11 @@ struct saved_scope GTY(())\n   struct cp_binding_level *x_previous_class_level;\n   tree x_saved_tree;\n \n-  HOST_WIDE_INT x_processing_template_decl;\n+  int x_processing_template_decl;\n   int x_processing_specialization;\n-  bool x_processing_explicit_instantiation;\n-  int need_pop_function_context;\n-  bool skip_evaluation;\n+  BOOL_BITFIELD x_processing_explicit_instantiation : 1;\n+  BOOL_BITFIELD need_pop_function_context : 1;\n+  BOOL_BITFIELD skip_evaluation : 1;\n \n   struct stmt_tree_s x_stmt_tree;\n \n@@ -786,11 +783,11 @@ struct language_function GTY(())\n   tree x_vtt_parm;\n   tree x_return_value;\n \n-  int returns_value;\n-  int returns_null;\n-  int returns_abnormally;\n-  int in_function_try_handler;\n-  int in_base_initializer;\n+  BOOL_BITFIELD returns_value : 1;\n+  BOOL_BITFIELD returns_null : 1;\n+  BOOL_BITFIELD returns_abnormally : 1;\n+  BOOL_BITFIELD in_function_try_handler : 1;\n+  BOOL_BITFIELD in_base_initializer : 1;\n \n   /* True if this function can throw an exception.  */\n   BOOL_BITFIELD can_throw : 1;\n@@ -3705,7 +3702,8 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, OP_FLAG, TYPENAME_FLAG };\n #define TEMPLATE_PARM_DESCENDANTS(NODE) (TREE_CHAIN (NODE))\n #define TEMPLATE_PARM_ORIG_LEVEL(NODE) (TEMPLATE_PARM_INDEX_CAST (NODE)->orig_level)\n #define TEMPLATE_PARM_DECL(NODE) (TEMPLATE_PARM_INDEX_CAST (NODE)->decl)\n-#define TEMPLATE_PARM_PARAMETER_PACK(NODE) (TEMPLATE_PARM_INDEX_CAST (NODE)->parameter_pack)\n+#define TEMPLATE_PARM_PARAMETER_PACK(NODE) \\\n+  (TREE_LANG_FLAG_0 (TEMPLATE_PARM_INDEX_CHECK (NODE)))\n \n /* These macros are for accessing the fields of TEMPLATE_TYPE_PARM,\n    TEMPLATE_TEMPLATE_PARM and BOUND_TEMPLATE_TEMPLATE_PARM nodes.  */\n@@ -3901,16 +3899,16 @@ struct cp_parameter_declarator {\n /* A declarator.  */\n struct cp_declarator {\n   /* The kind of declarator.  */\n-  cp_declarator_kind kind;\n+  ENUM_BITFIELD (cp_declarator_kind) kind : 4;\n+  /* Whether we parsed an ellipsis (`...') just before the declarator,\n+     to indicate this is a parameter pack.  */\n+  BOOL_BITFIELD parameter_pack_p : 1;\n   /* Attributes that apply to this declarator.  */\n   tree attributes;\n   /* For all but cdk_id and cdk_error, the contained declarator.  For\n      cdk_id and cdk_error, guaranteed to be NULL.  */\n   cp_declarator *declarator;\n   location_t id_loc; /* Currently only set for cdk_id. */\n-  /* Whether we parsed an ellipsis (`...') just before the declarator,\n-     to indicate this is a parameter pack.  */\n-  bool parameter_pack_p;\n   union {\n     /* For identifiers.  */\n     struct {"}, {"sha": "a7a12cd4b3a88867d61b1362b7eb74c6ac6abf6a", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30bcc028906e873ba60715aaed036248e1420e10/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30bcc028906e873ba60715aaed036248e1420e10/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=30bcc028906e873ba60715aaed036248e1420e10", "patch": "@@ -5030,7 +5030,7 @@ push_to_top_level (void)\n   struct cp_binding_level *b;\n   cxx_saved_binding *sb;\n   size_t i;\n-  int need_pop;\n+  bool need_pop;\n \n   timevar_push (TV_NAME_LOOKUP);\n   s = GGC_CNEW (struct saved_scope);\n@@ -5040,11 +5040,11 @@ push_to_top_level (void)\n   /* If we're in the middle of some function, save our state.  */\n   if (cfun)\n     {\n-      need_pop = 1;\n+      need_pop = true;\n       push_function_context_to (NULL_TREE);\n     }\n   else\n-    need_pop = 0;\n+    need_pop = false;\n \n   if (scope_chain && previous_class_level)\n     store_class_bindings (previous_class_level->class_shadowed,"}, {"sha": "2546ab4b07c6cc912af509edc7af6ed0de96baf7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30bcc028906e873ba60715aaed036248e1420e10/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30bcc028906e873ba60715aaed036248e1420e10/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=30bcc028906e873ba60715aaed036248e1420e10", "patch": "@@ -2461,6 +2461,7 @@ uses_parameter_packs (tree t)\n   ppd.parameter_packs = &parameter_packs;\n   ppd.visited = pointer_set_create ();\n   walk_tree (&t, &find_parameter_packs_r, &ppd, ppd.visited);\n+  pointer_set_destroy (ppd.visited);\n   return parameter_packs != NULL_TREE;\n }\n \n@@ -2515,6 +2516,7 @@ make_pack_expansion (tree arg)\n       if (parameter_packs == NULL_TREE)\n         {\n           error (\"base initializer expansion %<%T%> contains no parameter packs\", arg);\n+          pointer_set_destroy (ppd.visited);\n           return error_mark_node;\n         }\n \n@@ -2531,6 +2533,8 @@ make_pack_expansion (tree arg)\n             }\n         }\n \n+      pointer_set_destroy (ppd.visited);\n+\n       /* Create the pack expansion type for the base type.  */\n       purpose = make_node (TYPE_PACK_EXPANSION);\n       SET_PACK_EXPANSION_PATTERN (purpose, TREE_PURPOSE (arg));\n@@ -2564,6 +2568,7 @@ make_pack_expansion (tree arg)\n   ppd.parameter_packs = &parameter_packs;\n   ppd.visited = pointer_set_create ();\n   walk_tree (&arg, &find_parameter_packs_r, &ppd, ppd.visited);\n+  pointer_set_destroy (ppd.visited);\n \n   /* Make sure we found some parameter packs.  */\n   if (parameter_packs == NULL_TREE)\n@@ -2605,6 +2610,7 @@ check_for_bare_parameter_packs (tree t)\n   ppd.parameter_packs = &parameter_packs;\n   ppd.visited = pointer_set_create ();\n   walk_tree (&t, &find_parameter_packs_r, &ppd, ppd.visited);\n+  pointer_set_destroy (ppd.visited);\n \n   if (parameter_packs) {\n     error (\"parameter packs not expanded with `...':\");"}, {"sha": "532e950e315e1a3a4fa5c0f1dc5896f2a8a2fee5", "filename": "gcc/cp/ptree.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30bcc028906e873ba60715aaed036248e1420e10/gcc%2Fcp%2Fptree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30bcc028906e873ba60715aaed036248e1420e10/gcc%2Fcp%2Fptree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fptree.c?ref=30bcc028906e873ba60715aaed036248e1420e10", "patch": "@@ -68,8 +68,7 @@ cxx_print_type (FILE *file, tree node, int indent)\n     case TEMPLATE_TEMPLATE_PARM:\n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n       indent_to (file, indent + 3);\n-      fprintf (file, \"index \" HOST_WIDE_INT_PRINT_DEC \" level \"\n-\t       HOST_WIDE_INT_PRINT_DEC \" orig_level \" HOST_WIDE_INT_PRINT_DEC,\n+      fprintf (file, \"index %d level %d orig_level %d\",\n \t       TEMPLATE_TYPE_IDX (node), TEMPLATE_TYPE_LEVEL (node),\n \t       TEMPLATE_TYPE_ORIG_LEVEL (node));\n       return;\n@@ -181,8 +180,7 @@ cxx_print_xnode (FILE *file, tree node, int indent)\n       break;\n     case TEMPLATE_PARM_INDEX:\n       indent_to (file, indent + 3);\n-      fprintf (file, \"index \" HOST_WIDE_INT_PRINT_DEC \" level \"\n-\t       HOST_WIDE_INT_PRINT_DEC \" orig_level \" HOST_WIDE_INT_PRINT_DEC,\n+      fprintf (file, \"index %d level %d orig_level %d\",\n \t       TEMPLATE_PARM_IDX (node), TEMPLATE_PARM_LEVEL (node),\n \t       TEMPLATE_PARM_ORIG_LEVEL (node));\n       break;"}]}