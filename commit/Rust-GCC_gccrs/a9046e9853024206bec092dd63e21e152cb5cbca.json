{"sha": "a9046e9853024206bec092dd63e21e152cb5cbca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkwNDZlOTg1MzAyNDIwNmJlYzA5MmRkNjNlMjFlMTUyY2I1Y2JjYQ==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozefl@gcc.gnu.org", "date": "2019-12-11T19:19:50Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozefl@gcc.gnu.org", "date": "2019-12-11T19:19:50Z"}, "message": "MSP430: Add -fno-exceptions multilib\n\nChangeLog:\n\n2019-12-11  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* config-ml.in (msp430-*-*): Support --disable-no-exceptions configure\n\tflag.\n\ngcc/ChangeLog:\n\n2019-12-11  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* config/msp430/msp430.h (STARTFILE_SPEC) [!fexceptions]: Use\n\tcrtbegin_no_eh.o if building for the C language.\n\t[fno-exceptions]: Use crtbegin_no_eh.o if building for any language\n\texcept C.\n\t(ENDFILE_SPEC) [!fexceptions]: Use crtend_no_eh.o if building for \n\tthe C language.\n\t[fno-exceptions]: Use crtend_no_eh.o if building for any language\n\texcept C.\n\t* config/msp430/t-msp430: Add -fno-exceptions multilib.\n\t* doc/install.texi: Document --disable-no-exceptions multilib configure\n\toption.\n\t* doc/sourcebuild.texi: Document exceptions_enabled effective target.\n\ngcc/testsuite/ChangeLog:\n\n2019-12-11  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* lib/gcc-dg.exp: Add dg-prune messages for when exception handling is\n\tdisabled.\n\t* lib/target-supports.exp (check_effective_target_exceptions_enabled):\n\tNew.\n\nlibgcc/ChangeLog:\n\n2019-12-11  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* config.host: Add crt{begin,end}_no_eh.o to \"extra_parts\".\n\t* config.host (msp430*-*-elf): Add crt{begin,end}_no_eh.o to\n\t\"extra_parts\".\n\nFrom-SVN: r279246", "tree": {"sha": "051719319b73e772a57ca7103c0df5acaf847094", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/051719319b73e772a57ca7103c0df5acaf847094"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9046e9853024206bec092dd63e21e152cb5cbca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9046e9853024206bec092dd63e21e152cb5cbca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9046e9853024206bec092dd63e21e152cb5cbca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9046e9853024206bec092dd63e21e152cb5cbca/comments", "author": null, "committer": null, "parents": [{"sha": "368877a11b789a74b1ae5b878e3bd30039118c30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/368877a11b789a74b1ae5b878e3bd30039118c30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/368877a11b789a74b1ae5b878e3bd30039118c30"}], "stats": {"total": 114, "additions": 106, "deletions": 8}, "files": [{"sha": "19b3c5eb229b3e57ded3431fcc8817769bb11a4a", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9046e9853024206bec092dd63e21e152cb5cbca/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9046e9853024206bec092dd63e21e152cb5cbca/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=a9046e9853024206bec092dd63e21e152cb5cbca", "patch": "@@ -1,6 +1,11 @@\n+2019-12-11  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config-ml.in (msp430-*-*): Support --disable-no-exceptions configure\n+\tflag.\n+\n 2019-12-10  Lewis Hyatt  <lhyatt@gmail.com>\n \n-        * MAINTAINERS (Write After Approval): Add myself.\n+\t* MAINTAINERS (Write After Approval): Add myself.\n \n 2019-11-27  Tobias Burnus  <tobias@codesourcery.com>\n "}, {"sha": "5720d38d23f9a0b0a429efd870e6350b1fb83fbe", "filename": "config-ml.in", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9046e9853024206bec092dd63e21e152cb5cbca/config-ml.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9046e9853024206bec092dd63e21e152cb5cbca/config-ml.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config-ml.in?ref=a9046e9853024206bec092dd63e21e152cb5cbca", "patch": "@@ -383,6 +383,19 @@ mips*-*-*)\n \t  done\n \tfi\n \t;;\n+msp430-*-*)\n+\tif [ x$enable_no_exceptions = xno ]\n+\tthen\n+\t  old_multidirs=\"${multidirs}\"\n+\t  multidirs=\"\"\n+\t  for x in ${old_multidirs}; do\n+\t    case \"$x\" in\n+\t      *no-exceptions* ) : ;;\n+\t      *) multidirs=\"${multidirs} ${x}\" ;;\n+\t    esac\n+\t  done\n+\tfi\n+\t;;\n powerpc*-*-* | rs6000*-*-*)\n \tif [ x$enable_aix64 = xno ]\n \tthen"}, {"sha": "77723836c29bb9a36752cb301bf6cc0102277793", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9046e9853024206bec092dd63e21e152cb5cbca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9046e9853024206bec092dd63e21e152cb5cbca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9046e9853024206bec092dd63e21e152cb5cbca", "patch": "@@ -1,3 +1,18 @@\n+2019-12-11  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430.h (STARTFILE_SPEC) [!fexceptions]: Use\n+\tcrtbegin_no_eh.o if building for the C language.\n+\t[fno-exceptions]: Use crtbegin_no_eh.o if building for any language\n+\texcept C.\n+\t(ENDFILE_SPEC) [!fexceptions]: Use crtend_no_eh.o if building for \n+\tthe C language.\n+\t[fno-exceptions]: Use crtend_no_eh.o if building for any language\n+\texcept C.\n+\t* config/msp430/t-msp430: Add -fno-exceptions multilib.\n+\t* doc/install.texi: Document --disable-no-exceptions multilib configure\n+\toption.\n+\t* doc/sourcebuild.texi: Document exceptions_enabled effective target.\n+\n 2019-12-11  David Malcolm  <dmalcolm@redhat.com>\n \n \t* pretty-print.c (pretty_printer::pretty_printer): New copy-ctor."}, {"sha": "7b94918a55dc835635437f2f856f23e808eddd02", "filename": "gcc/config/msp430/msp430.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9046e9853024206bec092dd63e21e152cb5cbca/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9046e9853024206bec092dd63e21e152cb5cbca/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.h?ref=a9046e9853024206bec092dd63e21e152cb5cbca", "patch": "@@ -44,13 +44,20 @@ extern bool msp430x;\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+/* For the \"c\" language where exceptions are implicitly disabled, use\n+   crt*_no_eh.o unless -fexceptions is passed.  For other languages, only use\n+   crt*_no_eh.o if -fno-exceptions is explicitly passed.  */\n #undef  STARTFILE_SPEC\n #define STARTFILE_SPEC \"%{pg:gcrt0.o%s}\" \\\n-  \"%{!pg:%{minrt:crt0-minrt.o%s}%{!minrt:crt0.o%s}} %{!minrt:crtbegin.o%s}\"\n+  \"%{!pg:%{minrt:crt0-minrt.o%s}%{!minrt:crt0.o%s}} \" \\\n+  \"%{!minrt:%{,c:%{!fexceptions:crtbegin_no_eh.o%s; :crtbegin.o%s}; \" \\\n+    \":%{fno-exceptions:crtbegin_no_eh.o%s; :crtbegin.o%s}}}\"\n \n /* -lgcc is included because crtend.o needs __mspabi_func_epilog_1.  */\n #undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC \"%{!minrt:crtend.o%s} \" \\\n+#define ENDFILE_SPEC \\\n+  \"%{!minrt:%{,c:%{!fexceptions:crtend_no_eh.o%s; :crtend.o%s}; \" \\\n+    \":%{fno-exceptions:crtend_no_eh.o%s; :crtend.o%s}}} \" \\\n   \"%{minrt:%:if-exists(crtn-minrt.o%s)}%{!minrt:%:if-exists(crtn.o%s)} -lgcc\"\n \n #define ASM_SPEC \"-mP \" /* Enable polymorphic instructions.  */ \\"}, {"sha": "e180ce3efdbf6e16a63cdbc2291e7b848270295c", "filename": "gcc/config/msp430/t-msp430", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9046e9853024206bec092dd63e21e152cb5cbca/gcc%2Fconfig%2Fmsp430%2Ft-msp430", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9046e9853024206bec092dd63e21e152cb5cbca/gcc%2Fconfig%2Fmsp430%2Ft-msp430", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Ft-msp430?ref=a9046e9853024206bec092dd63e21e152cb5cbca", "patch": "@@ -28,8 +28,8 @@ msp430-devices.o: $(srcdir)/config/msp430/msp430-devices.c \\\n \n # Enable multilibs:\n \n-MULTILIB_OPTIONS    = mcpu=msp430 mlarge  mdata-region=none\n-MULTILIB_DIRNAMES   = 430\t   large  full-memory-range\n+MULTILIB_OPTIONS    = mcpu=msp430 mlarge  mdata-region=none fno-exceptions\n+MULTILIB_DIRNAMES   = 430\t   large  full-memory-range no-exceptions\n \n # Match -mcpu=430\n MULTILIB_MATCHES    = mcpu?msp430=mcpu?430\n@@ -41,9 +41,10 @@ MULTILIB_MATCHES   += mdata-region?none=mdata-region?either\n # hard-coded data here, because DRIVER_SELF_SPECS will place the correct\n # -mcpu option for a given mcu onto the command line.\n \n-MULTILIB_REQUIRED = mcpu=msp430\n-MULTILIB_REQUIRED += mlarge\n+MULTILIB_REQUIRED =\t\t    mcpu=msp430\t\t       mlarge\n+MULTILIB_REQUIRED += fno-exceptions mcpu=msp430/fno-exceptions mlarge/fno-exceptions\n MULTILIB_REQUIRED += mlarge/mdata-region=none\n+MULTILIB_REQUIRED += mlarge/mdata-region=none/fno-exceptions\n \n \n MULTILIB_EXTRA_OPTS ="}, {"sha": "19d649ccc83c938f71ebbee44a6197df7ea252ec", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9046e9853024206bec092dd63e21e152cb5cbca/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9046e9853024206bec092dd63e21e152cb5cbca/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=a9046e9853024206bec092dd63e21e152cb5cbca", "patch": "@@ -1086,6 +1086,9 @@ softfloat, m68881, m68000, m68020.\n @item mips*-*-*\n single-float, biendian, softfloat.\n \n+@item msp430-*-*\n+no-exceptions\n+\n @item powerpc*-*-*, rs6000*-*-*\n aix64, pthread, softfloat, powercpu, powerpccpu, powerpcos, biendian,\n sysv, aix."}, {"sha": "85573a49a2b28de71ef4ca9659cd5af86ea46b81", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9046e9853024206bec092dd63e21e152cb5cbca/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9046e9853024206bec092dd63e21e152cb5cbca/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=a9046e9853024206bec092dd63e21e152cb5cbca", "patch": "@@ -2274,6 +2274,10 @@ Target has packed layout of structure members by default.\n @item exceptions\n Target supports exceptions.\n \n+@item exceptions_enabled\n+Target supports exceptions and they are enabled in the current\n+testing configuration.\n+\n @item fgraphite\n Target supports Graphite optimizations.\n "}, {"sha": "57d2a1162c6d96e790b4627c03a55e1970f51672", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9046e9853024206bec092dd63e21e152cb5cbca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9046e9853024206bec092dd63e21e152cb5cbca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9046e9853024206bec092dd63e21e152cb5cbca", "patch": "@@ -1,3 +1,10 @@\n+2019-12-11  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* lib/gcc-dg.exp: Add dg-prune messages for when exception handling is\n+\tdisabled.\n+\t* lib/target-supports.exp (check_effective_target_exceptions_enabled):\n+\tNew.\n+\n 2019-12-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/92869"}, {"sha": "7396daa4a1d274ad999c47029a8c9971f08964f0", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9046e9853024206bec092dd63e21e152cb5cbca/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9046e9853024206bec092dd63e21e152cb5cbca/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=a9046e9853024206bec092dd63e21e152cb5cbca", "patch": "@@ -417,6 +417,18 @@ proc gcc-dg-prune { system text } {\n \treturn \"::unsupported::large return values\"\n     }\n \n+    # If exceptions are disabled, mark tests expecting exceptions to be enabled\n+    # as unsupported.\n+    if { ![check_effective_target_exceptions_enabled] } {\n+\tif [regexp \"(^|\\n)\\[^\\n\\]*: error: exception handling disabled\" $text] {\n+\t    return \"::unsupported::exception handling disabled\"\n+\t}\n+\n+\tif [regexp \"(^|\\n)\\[^\\n\\]*: error: #error .__cpp_exceptions.\" $text] {\n+\t    return \"::unsupported::exception handling disabled\"\n+\t}\n+    }\n+\n     return $text\n }\n "}, {"sha": "80e9d6720bd167180dcc11344396db5b2895820e", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9046e9853024206bec092dd63e21e152cb5cbca/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9046e9853024206bec092dd63e21e152cb5cbca/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=a9046e9853024206bec092dd63e21e152cb5cbca", "patch": "@@ -8990,6 +8990,24 @@ proc check_effective_target_exceptions {} {\n     return 1\n }\n \n+# Used to check if the testing configuration supports exceptions.\n+# Returns 0 if exceptions are unsupported or disabled (e.g. by passing\n+# -fno-exceptions). Returns 1 if exceptions are enabled.\n+proc check_effective_target_exceptions_enabled {} {\n+    return [check_cached_effective_target exceptions_enabled {\n+\tif { [check_effective_target_exceptions] } {\n+\t    return [check_no_compiler_messages exceptions_enabled assembly {\n+\t\tvoid foo (void)\n+\t\t{\n+\t\t    throw 1;\n+\t\t}\n+\t    }]\n+\t} else {\n+\t    # If exceptions aren't supported, then they're not enabled.\n+\t    return 0\n+\t}\n+    }]\n+}\n \n proc check_effective_target_tiny {} {\n     return [check_cached_effective_target tiny {"}, {"sha": "90ea2a48b3cf98db3ea68952f686d12bede84de0", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9046e9853024206bec092dd63e21e152cb5cbca/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9046e9853024206bec092dd63e21e152cb5cbca/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=a9046e9853024206bec092dd63e21e152cb5cbca", "patch": "@@ -1,3 +1,9 @@\n+2019-12-11  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config.host (msp430*-*-elf): Add crt{begin,end}_no_eh.o to\n+\t\"extra_parts\".\n+\t* config/msp430/t-msp430: Add rules to build crt{begin,end}_no_eh.o.\n+\n 2019-12-11  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* crtstuff.c: Declare __dso_handle only if DEFAULT_USE_CXA_ATEXIT is"}, {"sha": "56868719fc8c048d61d3014309f1bf1c05114b38", "filename": "libgcc/config.host", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9046e9853024206bec092dd63e21e152cb5cbca/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9046e9853024206bec092dd63e21e152cb5cbca/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=a9046e9853024206bec092dd63e21e152cb5cbca", "patch": "@@ -1045,7 +1045,8 @@ moxie-*-elf | moxie-*-moxiebox* | moxie-*-uclinux* | moxie-*-rtems*)\n \t;;\n msp430*-*-elf)\n \ttmake_file=\"$tm_file t-crtstuff t-fdpbit msp430/t-msp430\"\n-        extra_parts=\"$extra_parts libmul_none.a libmul_16.a libmul_32.a libmul_f5.a\"\n+\textra_parts=\"$extra_parts crtbegin_no_eh.o crtend_no_eh.o\"\n+\textra_parts=\"$extra_parts libmul_none.a libmul_16.a libmul_32.a libmul_f5.a\"\n \t;;\n nds32*-linux*)\n \t# Basic makefile fragment and extra_parts for crt stuff."}, {"sha": "72ae93a8daeab6d30039ebc505b41da099b72b6c", "filename": "libgcc/config/msp430/t-msp430", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9046e9853024206bec092dd63e21e152cb5cbca/libgcc%2Fconfig%2Fmsp430%2Ft-msp430", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9046e9853024206bec092dd63e21e152cb5cbca/libgcc%2Fconfig%2Fmsp430%2Ft-msp430", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmsp430%2Ft-msp430?ref=a9046e9853024206bec092dd63e21e152cb5cbca", "patch": "@@ -42,6 +42,12 @@ LIB2ADD = \\\n \n HOST_LIBGCC2_CFLAGS += -Os -ffunction-sections -fdata-sections -mhwmult=none\n \n+crtbegin_no_eh.o: $(srcdir)/crtstuff.c\n+\t$(crt_compile) -U__LIBGCC_EH_FRAME_SECTION_NAME__ -c $< -DCRT_BEGIN\n+\n+crtend_no_eh.o: $(srcdir)/crtstuff.c\n+\t$(crt_compile) -U__LIBGCC_EH_FRAME_SECTION_NAME__ -c $< -DCRT_END\n+\n mpy.o: $(srcdir)/config/msp430/mpy.c\n \t$(gcc_compile) $< -c\n "}]}