{"sha": "dca412a1ddaae99a8672bfbed37fe951f486b6bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNhNDEyYTFkZGFhZTk5YTg2NzJiZmJlZDM3ZmU5NTFmNDg2YjZiYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-07-20T13:35:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-20T13:35:20Z"}, "message": "re PR middle-end/18908 (Missed folding opportunities with bools)\n\n2011-07-20  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/18908\n\t* tree.c (integer_all_onesp): Use TYPE_PRECISION, not mode precision.\n\t* tree-ssa-forwprop.c (simplify_bitwise_binary): Remove bogus\n\tADDR_EXPR folding.  Canonicalize X ^ ~0 as ~X.\n\n\t* gcc.dg/tree-ssa/pr18908.c: New testcase.\n\t* gcc.dg/tree-ssa/bitwise-sink.c: Adjust.\n\nFrom-SVN: r176508", "tree": {"sha": "3997651a823f3fea3135b0089b972faf3df8feab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3997651a823f3fea3135b0089b972faf3df8feab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dca412a1ddaae99a8672bfbed37fe951f486b6bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dca412a1ddaae99a8672bfbed37fe951f486b6bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dca412a1ddaae99a8672bfbed37fe951f486b6bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dca412a1ddaae99a8672bfbed37fe951f486b6bc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73d7e2662e438cc5e49b65a3df31a83844906eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d7e2662e438cc5e49b65a3df31a83844906eab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73d7e2662e438cc5e49b65a3df31a83844906eab"}], "stats": {"total": 66, "additions": 34, "deletions": 32}, "files": [{"sha": "6a9b143b96c78fb02883c77869ee27eeeb8c0665", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca412a1ddaae99a8672bfbed37fe951f486b6bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca412a1ddaae99a8672bfbed37fe951f486b6bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dca412a1ddaae99a8672bfbed37fe951f486b6bc", "patch": "@@ -1,3 +1,10 @@\n+2011-07-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/18908\n+\t* tree.c (integer_all_onesp): Use TYPE_PRECISION, not mode precision.\n+\t* tree-ssa-forwprop.c (simplify_bitwise_binary): Remove bogus\n+\tADDR_EXPR folding.  Canonicalize X ^ ~0 as ~X.\n+\n 2011-07-20  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* config/frv/frv.c (frv_register_move_cost): Define explicitly"}, {"sha": "1e2bc1c07cdee10ef095e36cbf1aa946246486c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca412a1ddaae99a8672bfbed37fe951f486b6bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca412a1ddaae99a8672bfbed37fe951f486b6bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dca412a1ddaae99a8672bfbed37fe951f486b6bc", "patch": "@@ -1,3 +1,9 @@\n+2011-07-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/18908\n+\t* gcc.dg/tree-ssa/pr18908.c: New testcase.\n+\t* gcc.dg/tree-ssa/bitwise-sink.c: Adjust.\n+\n 2011-07-20  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* gcc.target/arm/combine-movs.c: New."}, {"sha": "1de04bc84317e18c3d4ca6d12509c5ad4c73bdb1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/bitwise-sink.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca412a1ddaae99a8672bfbed37fe951f486b6bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbitwise-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca412a1ddaae99a8672bfbed37fe951f486b6bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbitwise-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbitwise-sink.c?ref=dca412a1ddaae99a8672bfbed37fe951f486b6bc", "patch": "@@ -7,5 +7,5 @@ foo (_Bool x)\n   return (x ^ 1);\n }\n \n-/* { dg-final { scan-tree-dump-times \"x\\[^ \\]* \\\\^ 1\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"~x\" 1 \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "cfc92fec9c42db74d8a4c39569b71acd40341c7c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr18908.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca412a1ddaae99a8672bfbed37fe951f486b6bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr18908.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca412a1ddaae99a8672bfbed37fe951f486b6bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr18908.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr18908.c?ref=dca412a1ddaae99a8672bfbed37fe951f486b6bc", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-forwprop1\" } */\n+\n+_Bool f3(_Bool *p) { *p ^= 1; }\n+\n+/* We should be able to canonicalize the above to use bitwise not.  */\n+/* { dg-final { scan-tree-dump \"~D\" \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-not \"\\\\\\^ 1\" \"forwprop1\" } } */\n+/* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "577609b20149a289a54b61fba316f6927b684868", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 11, "deletions": 31, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca412a1ddaae99a8672bfbed37fe951f486b6bc/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca412a1ddaae99a8672bfbed37fe951f486b6bc/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=dca412a1ddaae99a8672bfbed37fe951f486b6bc", "patch": "@@ -1710,37 +1710,6 @@ simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n   tree def1_arg1, def2_arg1;\n   enum tree_code def1_code, def2_code;\n \n-  /* If the first argument is an SSA name that is itself a result of a\n-     typecast of an ADDR_EXPR to an integer, feed the ADDR_EXPR to the\n-     folder rather than the ssa name.  */\n-  if (code == BIT_AND_EXPR\n-      && TREE_CODE (arg2) == INTEGER_CST\n-      && TREE_CODE (arg1) == SSA_NAME)\n-    {\n-      gimple def = SSA_NAME_DEF_STMT (arg1);\n-      tree op = arg1;\n-\n-      /* ???  This looks bogus - the conversion could be truncating.  */\n-      if (is_gimple_assign (def)\n-\t  && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def))\n-\t  && INTEGRAL_TYPE_P (TREE_TYPE (arg1)))\n-\t{\n-\t  tree opp = gimple_assign_rhs1 (def);\n-\t  if (TREE_CODE (opp) == ADDR_EXPR)\n-\t    op = opp;\n-\t}\n-\n-      res = fold_binary_loc (gimple_location (stmt),\n-\t\t\t     BIT_AND_EXPR, TREE_TYPE (gimple_assign_lhs (stmt)),\n-\t\t\t     op, arg2);\n-      if (res && is_gimple_min_invariant (res))\n-\t{\n-\t  gimple_assign_set_rhs_from_tree (gsi, res);\n-\t  update_stmt (stmt);\n-\t  return true;\n-\t}\n-    }\n-\n   def1_code = TREE_CODE (arg1);\n   def1_arg1 = arg1;\n   if (TREE_CODE (arg1) == SSA_NAME)\n@@ -1862,6 +1831,17 @@ simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n       return true;\n     }\n \n+  /* Canonicalize X ^ ~0 to ~X.  */\n+  if (code == BIT_XOR_EXPR\n+      && TREE_CODE (arg2) == INTEGER_CST\n+      && integer_all_onesp (arg2))\n+    {\n+      gimple_assign_set_rhs_with_ops (gsi, BIT_NOT_EXPR, arg1, NULL_TREE);\n+      gcc_assert (gsi_stmt (*gsi) == stmt);\n+      update_stmt (stmt);\n+      return true;\n+    }\n+\n   /* Try simple folding for X op !X, and X op X.  */\n   res = simplify_bitwise_binary_1 (code, TREE_TYPE (arg1), arg1, arg2);\n   if (res != NULL_TREE)"}]}