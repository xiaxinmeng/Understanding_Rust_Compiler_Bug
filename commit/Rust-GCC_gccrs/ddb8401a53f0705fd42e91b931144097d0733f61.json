{"sha": "ddb8401a53f0705fd42e91b931144097d0733f61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRiODQwMWE1M2YwNzA1ZmQ0MmU5MWI5MzExNDQwOTdkMDczM2Y2MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-12-21T21:12:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-12-21T21:12:13Z"}, "message": "revert accidental checkin\n\nFrom-SVN: r142869", "tree": {"sha": "bcf2bc5972f1e1a577c2dca13aa523eb0c978e34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcf2bc5972f1e1a577c2dca13aa523eb0c978e34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddb8401a53f0705fd42e91b931144097d0733f61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb8401a53f0705fd42e91b931144097d0733f61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddb8401a53f0705fd42e91b931144097d0733f61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb8401a53f0705fd42e91b931144097d0733f61/comments", "author": null, "committer": null, "parents": [{"sha": "3feb128fadfe1f496dd5d59116221e07fe019e27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3feb128fadfe1f496dd5d59116221e07fe019e27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3feb128fadfe1f496dd5d59116221e07fe019e27"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "1ec27c1ffcd722ea1e322caa05dd1beeefa14db6", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb8401a53f0705fd42e91b931144097d0733f61/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb8401a53f0705fd42e91b931144097d0733f61/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=ddb8401a53f0705fd42e91b931144097d0733f61", "patch": "@@ -2348,12 +2348,12 @@ write_expression (tree expr)\n \n \tcase CAST_EXPR:\n \t  write_type (TREE_TYPE (expr));\n-\t  /* There is no way to mangle a zero-operand cast like\n-\t     \"T()\".  */\n \t  if (!TREE_OPERAND (expr, 0))\n-\t    sorry (\"zero-operand casts cannot be mangled due to a defect \"\n-\t\t   \"in the C++ ABI\");\n+\t    /* \"T()\" is mangled as \"T(void)\".  */\n+\t    write_char ('v');\n \t  else if (list_length (TREE_OPERAND (expr, 0)) > 1)\n+\t    /* FIXME the above hack for T() needs to be replaced with\n+\t       something more general.  */\n \t    sorry (\"mangling function-style cast with more than one argument\");\n \t  else\n \t    write_expression (TREE_VALUE (TREE_OPERAND (expr, 0)));"}]}