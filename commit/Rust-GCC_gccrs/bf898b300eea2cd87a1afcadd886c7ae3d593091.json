{"sha": "bf898b300eea2cd87a1afcadd886c7ae3d593091", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY4OThiMzAwZWVhMmNkODdhMWFmY2FkZDg4NmM3YWUzZDU5MzA5MQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2014-09-26T10:37:44Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2014-09-26T10:37:44Z"}, "message": "cgraph.c (cgraph_node::release_body): New argument keep_arguments introduced.\n\n\t* cgraph.c (cgraph_node::release_body): New argument keep_arguments\n\tintroduced.\n\t* cgraph.h: Likewise.\n\t* cgraphunit.c (cgraph_node::create_wrapper): Usage of new argument introduced.\n\t* ipa-utils.h (polymorphic_type_binfo_p): Safe check for binfos created by Java.\n\t* tree-ssa-alias.c (ao_ref_base_alias_set): Static function transformed to global.\n\t* tree-ssa-alias.h: Likewise.\n\nFrom-SVN: r215640", "tree": {"sha": "826243916bb4f3470111118df833648f93566f57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/826243916bb4f3470111118df833648f93566f57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf898b300eea2cd87a1afcadd886c7ae3d593091", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf898b300eea2cd87a1afcadd886c7ae3d593091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf898b300eea2cd87a1afcadd886c7ae3d593091", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf898b300eea2cd87a1afcadd886c7ae3d593091/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5535b7d6f3ff58a69b2bf52e7fe8772e2797f112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5535b7d6f3ff58a69b2bf52e7fe8772e2797f112", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5535b7d6f3ff58a69b2bf52e7fe8772e2797f112"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "d92a705edf34e32341d612b984700b3cb535aff9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf898b300eea2cd87a1afcadd886c7ae3d593091/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf898b300eea2cd87a1afcadd886c7ae3d593091/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf898b300eea2cd87a1afcadd886c7ae3d593091", "patch": "@@ -1,3 +1,13 @@\n+2014-09-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* cgraph.c (cgraph_node::release_body): New argument keep_arguments\n+\tintroduced.\n+\t* cgraph.h: Likewise.\n+\t* cgraphunit.c (cgraph_node::create_wrapper): Usage of new argument introduced.\n+\t* ipa-utils.h (polymorphic_type_binfo_p): Safe check for binfos created by Java.\n+\t* tree-ssa-alias.c (ao_ref_base_alias_set): Static function transformed to global.\n+\t* tree-ssa-alias.h: Likewise.\n+\n 2014-09-26  Jakub Jelinek  <jakub@redhat.com>\n \t    Max Ostapenko  <m.ostapenko@partner.samsung.com>\n "}, {"sha": "fdcaf79b3585b7be550cdb071765b0c02f9bed17", "filename": "gcc/cgraph.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf898b300eea2cd87a1afcadd886c7ae3d593091/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf898b300eea2cd87a1afcadd886c7ae3d593091/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=bf898b300eea2cd87a1afcadd886c7ae3d593091", "patch": "@@ -1625,16 +1625,19 @@ release_function_body (tree decl)\n /* Release memory used to represent body of function.\n    Use this only for functions that are released before being translated to\n    target code (i.e. RTL).  Functions that are compiled to RTL and beyond\n-   are free'd in final.c via free_after_compilation().  */\n+   are free'd in final.c via free_after_compilation().\n+   KEEP_ARGUMENTS are useful only if you want to rebuild body as thunk.  */\n \n void\n-cgraph_node::release_body (void)\n+cgraph_node::release_body (bool keep_arguments)\n {\n   ipa_transforms_to_apply.release ();\n   if (!used_as_abstract_origin && symtab->state != PARSING)\n     {\n       DECL_RESULT (decl) = NULL;\n-      DECL_ARGUMENTS (decl) = NULL;\n+\n+      if (!keep_arguments)\n+\tDECL_ARGUMENTS (decl) = NULL;\n     }\n   /* If the node is abstract and needed, then do not clear DECL_INITIAL\n      of its associated function function declaration because it's"}, {"sha": "4fd58a551d50f94809c18a3928257ae109036e0c", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf898b300eea2cd87a1afcadd886c7ae3d593091/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf898b300eea2cd87a1afcadd886c7ae3d593091/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=bf898b300eea2cd87a1afcadd886c7ae3d593091", "patch": "@@ -917,7 +917,7 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node {\n      Use this only for functions that are released before being translated to\n      target code (i.e. RTL).  Functions that are compiled to RTL and beyond\n      are free'd in final.c via free_after_compilation().  */\n-  void release_body (void);\n+  void release_body (bool keep_arguments = false);\n \n   /* cgraph_node is no longer nested function; update cgraph accordingly.  */\n   void unnest (void);"}, {"sha": "d463505235267984565ecf9c704c38a2ac982711", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf898b300eea2cd87a1afcadd886c7ae3d593091/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf898b300eea2cd87a1afcadd886c7ae3d593091/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=bf898b300eea2cd87a1afcadd886c7ae3d593091", "patch": "@@ -2294,8 +2294,9 @@ cgraph_node::create_wrapper (cgraph_node *target)\n     /* Preserve DECL_RESULT so we get right by reference flag.  */\n     tree decl_result = DECL_RESULT (decl);\n \n-    /* Remove the function's body.  */\n-    release_body ();\n+    /* Remove the function's body but keep arguments to be reused\n+       for thunk.  */\n+    release_body (true);\n     reset ();\n \n     DECL_RESULT (decl) = decl_result;"}, {"sha": "465bc267f3c7a59b2631cfa8a27c2e546fdbc5d3", "filename": "gcc/ipa-utils.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf898b300eea2cd87a1afcadd886c7ae3d593091/gcc%2Fipa-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf898b300eea2cd87a1afcadd886c7ae3d593091/gcc%2Fipa-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.h?ref=bf898b300eea2cd87a1afcadd886c7ae3d593091", "patch": "@@ -179,8 +179,10 @@ odr_type_p (const_tree t)\n inline bool\n polymorphic_type_binfo_p (const_tree binfo)\n {\n-  /* See if BINFO's type has an virtual table associtated with it.  */\n-  return BINFO_VTABLE (TYPE_BINFO (BINFO_TYPE (binfo)));\n+  /* See if BINFO's type has an virtual table associtated with it.\n+     Check is defensive because of Java FE produces BINFOs\n+     without BINFO_TYPE set.   */\n+  return BINFO_TYPE (binfo) && BINFO_VTABLE (TYPE_BINFO (BINFO_TYPE (binfo)));\n }\n #endif  /* GCC_IPA_UTILS_H  */\n "}, {"sha": "1bf88e29548442d47ded04ae9edb8665abfdbff3", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf898b300eea2cd87a1afcadd886c7ae3d593091/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf898b300eea2cd87a1afcadd886c7ae3d593091/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=bf898b300eea2cd87a1afcadd886c7ae3d593091", "patch": "@@ -559,7 +559,7 @@ ao_ref_base (ao_ref *ref)\n \n /* Returns the base object alias set of the memory reference *REF.  */\n \n-static alias_set_type\n+alias_set_type\n ao_ref_base_alias_set (ao_ref *ref)\n {\n   tree base_ref;"}, {"sha": "0d35283803a38045967c1df52e0b5f183e030e5e", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf898b300eea2cd87a1afcadd886c7ae3d593091/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf898b300eea2cd87a1afcadd886c7ae3d593091/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=bf898b300eea2cd87a1afcadd886c7ae3d593091", "patch": "@@ -98,6 +98,7 @@ extern void ao_ref_init (ao_ref *, tree);\n extern void ao_ref_init_from_ptr_and_size (ao_ref *, tree, tree);\n extern tree ao_ref_base (ao_ref *);\n extern alias_set_type ao_ref_alias_set (ao_ref *);\n+extern alias_set_type ao_ref_base_alias_set (ao_ref *);\n extern bool ptr_deref_may_alias_global_p (tree);\n extern bool ptr_derefs_may_alias_p (tree, tree);\n extern bool ref_may_alias_global_p (tree);"}]}