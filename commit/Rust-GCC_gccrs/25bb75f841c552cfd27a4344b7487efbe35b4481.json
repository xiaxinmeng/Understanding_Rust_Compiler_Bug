{"sha": "25bb75f841c552cfd27a4344b7487efbe35b4481", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjViYjc1Zjg0MWM1NTJjZmQyN2E0MzQ0Yjc0ODdlZmJlMzViNDQ4MQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-19T00:16:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-19T00:16:30Z"}, "message": "Daily bump.", "tree": {"sha": "e1a05ec3a33acbf1e606003dafffccc8afe6782a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1a05ec3a33acbf1e606003dafffccc8afe6782a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25bb75f841c552cfd27a4344b7487efbe35b4481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25bb75f841c552cfd27a4344b7487efbe35b4481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25bb75f841c552cfd27a4344b7487efbe35b4481", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25bb75f841c552cfd27a4344b7487efbe35b4481/comments", "author": null, "committer": null, "parents": [{"sha": "1be4878116a2be82552bd59c3c1c9adcac3d106b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be4878116a2be82552bd59c3c1c9adcac3d106b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1be4878116a2be82552bd59c3c1c9adcac3d106b"}], "stats": {"total": 491, "additions": 490, "deletions": 1}, "files": [{"sha": "104aa42292346057a23401b77698f8667b2355e7", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,8 @@\n+2020-11-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* inclhack.def (aix_physaddr_t): New.\n+\t* fixincl.x: Regenerated.\n+\n 2020-10-03  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n \n \t* inclhack.def (aix_malloc): Add more context to select."}, {"sha": "f4e89b8799ff00019722bccc9fa192012335fd2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,185 @@\n+2020-11-18  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR middle-end/85811\n+\t* fold-const.c (tree_expr_finite_p): New function to test whether\n+\ta tree expression must be finite, i.e. not a FP NaN or infinity.\n+\t(tree_expr_infinite_p):  New function to test whether a tree\n+\texpression must be infinite, i.e. a FP infinity.\n+\t(tree_expr_maybe_infinite_p): New function to test whether a tree\n+\texpression may be infinite, i.e. a FP infinity.\n+\t(tree_expr_signaling_nan_p): New function to test whether a tree\n+\texpression must evaluate to a signaling NaN (sNaN).\n+\t(tree_expr_maybe_signaling_nan_p): New function to test whether a\n+\ttree expression may be a signaling NaN (sNaN).\n+\t(tree_expr_nan_p): New function to test whether a tree expression\n+\tmust evaluate to a (quiet or signaling) NaN.\n+\t(tree_expr_maybe_nan_p): New function to test whether a tree\n+\texpression me be a (quiet or signaling) NaN.\n+\t(tree_binary_nonnegative_warnv_p) [MAX_EXPR]: In the presence\n+\tof NaNs, MAX_EXPR is only guaranteed to be non-negative, if both\n+\toperands are non-negative.\n+\t(tree_call_nonnegative_warnv_p) [CASE_CFN_FMAX,CASE_CFN_FMAX_FN]:\n+\tIn the presence of signaling NaNs, fmax is only guaranteed to be\n+\tnon-negative if both operands are negative.  In the presence of\n+\tquiet NaNs, fmax is non-negative if either operand is non-negative\n+\tand not a qNaN, or both operands are non-negative.\n+\t* fold-const.h (tree_expr_finite_p, tree_expr_infinite_p,\n+\ttree_expr_maybe_infinite_p, tree_expr_signaling_nan_p,\n+\ttree_expr_maybe_signaling_nan_p, tree_expr_nan_p,\n+\ttree_expr_maybe_nan_p): Prototype new functions here.\n+\t* builtins.c (fold_builtin_classify) [BUILT_IN_ISINF]: Fold to\n+\ta constant if argument is known to be (or not to be) an Infinity.\n+\t[BUILT_IN_ISFINITE]: Fold to a constant if argument is known to\n+\tbe (or not to be) finite.\n+\t[BUILT_IN_ISNAN]: Fold to a constant if argument is known to be\n+\t(or not to be) a NaN.\n+\t(fold_builtin_fpclassify): Check tree_expr_maybe_infinite_p and\n+\ttree_expr_maybe_nan_p instead of HONOR_INFINITIES and HONOR_NANS\n+\trespectively.\n+\t(fold_builtin_unordered_cmp): Fold UNORDERED_EXPR to a constant\n+\twhen its arguments are known to be (or not be) NaNs.  Check\n+\ttree_expr_maybe_nan_p instead of HONOR_NANS when choosing between\n+\tunordered and regular forms of comparison operators.\n+\t* match.pd (ordered(x,y)->true/false): Constant fold ORDERED_EXPR\n+\tif its operands are known to be (or not to be) NaNs.\n+\t(unordered(x,y)->true/false): Constant fold UNORDERED_EXPR if its\n+\toperands are known to be (or not to be) NaNs.\n+\t(sqrt(x)*sqrt(x)->x): Check tree_expr_maybe_signaling_nan_p instead\n+\tof HONOR_SNANS.\n+\n+2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/91029\n+\tPR tree-optimization/97888\n+\t* range-op.cc (operator_trunc_mod::op1_range): Only set op1\n+\trange to >= 0 if lhs is > 0, rather than >= 0.  Fix up comments.\n+\n+2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* opts.h (struct cl_var): New type.\n+\t(cl_vars): Declare.\n+\t* optc-gen.awk: Generate cl_vars array.\n+\n+2020-11-18  Eugene Rozenfeld  <Eugene.Rozenfeld@microsoft.com>\n+\n+\tPR tree-optimization/96671\n+\t* match.pd (three xor patterns): New patterns.\n+\n+2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* optc-save-gen.awk: Initialize var_opt_init.  In\n+\tcl_optimization_stream_out for params with default values larger than\n+\t10, xor the default value with the actual parameter value.  In\n+\tcl_optimization_stream_in repeat the above xor.\n+\n+2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.ac: Add $lang.prev rules, INDEX.$lang and SERIAL_LIST and\n+\tSERIAL_COUNT variables to Make-hooks.\n+\t(--enable-link-serialization): New configure option.\n+\t* Makefile.in (DO_LINK_SERIALIZATION, LINK_PROGRESS): New variables.\n+\t* doc/install.texi (--enable-link-serialization): Document.\n+\t* configure: Regenerated.\n+\n+2020-11-18  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/97870\n+\t* lra-constraints.c (curr_insn_transform): Do not delete asm goto\n+\twith wrong constraints.  Nullify it saving CFG.\n+\n+2020-11-18  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430.md (mulhi3): New.\n+\t(mulsi3): New.\n+\t(mulsidi3): Rename to *mulsidi3_inline.\n+\t(umulsidi3): Rename to *umulsidi3_inline.\n+\t(mulsidi3): New define_expand.\n+\t(umulsidi3): New define_expand.\n+\n+2020-11-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97886\n+\t* tree-vect-loop.c (vectorizable_lc_phi): Properly assign\n+\tvector types to invariants for SLP.\n+\n+2020-11-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* config.gcc (*-*-dragonfly*): Add dragonfly-d.o and t-dragonfly.\n+\t* config/dragonfly-d.c: New file.\n+\t* config/t-dragonfly: New file.\n+\n+2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/97862\n+\t* omp-expand.c (expand_omp_for_init_vars): Don't use the sqrt path\n+\tif number of iterations is constant 0.\n+\n+2020-11-18  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.c (riscv_ext_version): New.\n+\t(riscv_ext_version_table): Ditto.\n+\t(get_default_version): Ditto.\n+\t(riscv_subset_t::implied_p): New field.\n+\t(riscv_subset_t::riscv_subset_t): Init implied_p.\n+\t(riscv_subset_list::add): New.\n+\t(riscv_subset_list::handle_implied_ext): Pass riscv_subset_t\n+\tinstead of separated argument.\n+\t(riscv_subset_list::to_string): Handle zifencei and zicsr, and\n+\tomit version if version is unknown.\n+\t(riscv_subset_list::parsing_subset_version): New argument `ext`,\n+\tremove default_major_version and default_minor_version, get\n+\tdefault version info via get_default_version.\n+\t(riscv_subset_list::parse_std_ext): Update argument for\n+\tparsing_subset_version calls.\n+\tHandle 2.2 ISA spec, always enable zicsr and zifencei, they are\n+\tincluded in baseline ISA in that time.\n+\t(riscv_subset_list::parse_multiletter_ext): Update argument for\n+\t`parsing_subset_version` and `add` calls.\n+\t(riscv_subset_list::parse): Adjust argument for\n+\triscv_subset_list::handle_implied_ext call.\n+\t* config.gcc (riscv*-*-*): Handle --with-isa-spec=.\n+\t* config.in (HAVE_AS_MISA_SPEC): New.\n+\t(HAVE_AS_MARCH_ZIFENCEI): Ditto.\n+\t* config/riscv/riscv-opts.h (riscv_isa_spec_class): New.\n+\t(riscv_isa_spec): Ditto.\n+\t* config/riscv/riscv.h (HAVE_AS_MISA_SPEC): New.\n+\t(ASM_SPEC): Pass -misa-spec if gas supported.\n+\t* config/riscv/riscv.opt (riscv_isa_spec_class) New.\n+\t* configure.ac (HAVE_AS_MARCH_ZIFENCEI): New test.\n+\t(HAVE_AS_MISA_SPEC): Ditto.\n+\t* configure: Regen.\n+\n+2020-11-18  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.c (riscv_implied_info):\n+\td and f implied zicsr.\n+\t(riscv_ext_flag_table): Handle zicsr and zifencei.\n+\t* config/riscv/riscv-opts.h (MASK_ZICSR): New.\n+\t(MASK_ZIFENCEI): Ditto.\n+\t(TARGET_ZICSR): Ditto.\n+\t(TARGET_ZIFENCEI): Ditto.\n+\t* config/riscv/riscv.md (clear_cache): Check TARGET_ZIFENCEI.\n+\t(fence_i): Ditto.\n+\t* config/riscv/riscv.opt (riscv_zi_subext): New.\n+\n+2020-11-18  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.c (single_letter_subset_rank): New.\n+\t(multi_letter_subset_rank): Ditto.\n+\t(subset_cmp): Ditto.\n+\t(riscv_subset_list::add): Insert subext in canonical ordering.\n+\t(riscv_subset_list::parse_std_ext): Move handle_implied_ext to ...\n+\t(riscv_subset_list::parse): ... here.\n+\n+2020-11-18  Jiufu Guo   <guojiufu@linux.ibm.com>\n+\n+\t* cfgloop.h (loop_optimizer_finalize): Add flag argument.\n+\t* loop-init.c (loop_optimizer_finalize): Call clean_up_loop_closed_phi.\n+\t* tree-cfgcleanup.h (clean_up_loop_closed_phi): New declare.\n+\t* tree-ssa-loop.c (tree_ssa_loop_done): Call loop_optimizer_finalize\n+\twith flag argument.\n+\t* tree-ssa-propagate.c (clean_up_loop_closed_phi): New function.\n+\n 2020-11-17  Sebastian Pop  <spop@amazon.com>\n \n \t* config.gcc: add configure flags --with-{cpu,arch,tune}-{32,64}"}, {"sha": "f5efa497de1dde1b8899f3817d3a5ff78016004d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1 +1 @@\n-20201118\n+20201119"}, {"sha": "13ea49a61c3b1c53a7c836e9607053ec2dde0359", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,14 @@\n+2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc-interface/Make-lang.in (ada.serial): New goal.\n+\t(.PHONY): Add ada.serial ada.prev.\n+\t(gnat1$(exeext)): Depend on ada.prev.  Call LINK_PROGRESS.\n+\n+2020-11-18  Matthias Klose  <doko@ubuntu.com>\n+\n+\tPR ada/97859\n+\t* Makefile.rtl (powerpc% linux%): Also match powerpc64le cpu.\n+\n 2020-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h: Remove ^L characters throughout."}, {"sha": "6565c67d4ec069433b1ca8a961f96a15d1c5002f", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,10 @@\n+2020-11-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97893\n+\t* sm-malloc.cc (null_deref::emit): Use CWE-476 rather than\n+\tCWE-690, as this isn't due to an unchecked return value.\n+\t(null_arg::emit): Likewise.\n+\n 2020-11-12  David Malcolm  <dmalcolm@redhat.com>\n \n \t* checker-path.h (checker_event::get_id_ptr): New."}, {"sha": "170fdf7c4ccaeb1fae3d579a3539c9df2231cb7b", "filename": "gcc/brig/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fbrig%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fbrig%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,9 @@\n+2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (brig.serial): New goal.\n+\t(.PHONY): Add brig.serial brig.prev.\n+\t(brig1$(exeext)): Depend on brig.prev.  Call LINK_PROGRESS.\n+\n 2020-08-03  Martin Jambor  <mjambor@suse.cz>\n \n \t* brigfrontend/brig-util.h (hsa_type_packed_p): Declared."}, {"sha": "42c20f01616700544d8612a4818b53b15752f02a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,7 @@\n+2020-11-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-lex.c (c_lex_with_flags): CPP_HEADER_NAMEs can now be seen.\n+\n 2020-11-17  Nathan Sidwell  <nathan@acm.org>\n \n \t* c-common.h (enum c_tree_index): Reorder to place lazy fields"}, {"sha": "f5b173c74f01b425613d6abaf9109625659fb6d2", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,9 @@\n+2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (c.serial): New goal.\n+\t(.PHONY): Add c.serial c.prev.\n+\t(cc1$(exeext)): Call LINK_PROGRESS.\n+\n 2020-11-13  Vladimir N. Makarov  <vmakarov@redhat.com>\n \n \t* c-parser.c (c_parser_asm_statement): Parse outputs for asm"}, {"sha": "b72904baa8041dcb85b034523593e5a482a3634c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,14 @@\n+2020-11-18  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* parser.c (cp_parser_objc_valid_prefix_attributes): Check\n+\tfor empty attributes.\n+\n+2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (c++.serial): New goal.\n+\t(.PHONY): Add c++.serial c++.prev.\n+\t(cc1plus$(exeext)): Depend on c++.prev.  Call LINK_PROGRESS.\n+\n 2020-11-17  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/97877"}, {"sha": "3e23bfeb55dffa9df9390966dca0d845a6abbf15", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,22 @@\n+2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (d.serial): New goal.\n+\t(.PHONY): Add d.serial d.prev.\n+\t(d21$(exeext)): Depend on d.prev.  Call LINK_PROGRESS.\n+\n+2020-11-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/97843\n+\t* d-codegen.cc (build_assign): Evaluate TARGET_EXPR before use in\n+\tthe right hand side of an assignment.\n+\t* expr.cc (ExprVisitor::visit (CatAssignExp *)): Force a TARGET_EXPR\n+\ton the element to append if it is a CALL_EXPR.\n+\n+2020-11-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/97842\n+\t* dmd/MERGE: Merge upstream dmd b6a779e49\n+\n 2020-11-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* intrinsics.cc (expand_intrinsic_copysign): Explicitly determine"}, {"sha": "6e204d3f4a6e0f6fa309c46f377b4aecd07068f2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,9 @@\n+2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (fortran.serial): New goal.\n+\t(.PHONY): Add fortran.serial fortran.prev.\n+\t(f951$(exeext)): Depend on fortran.prev.  Call LINK_PROGRESS.\n+\n 2020-11-17  Harald Anlauf  <anlauf@gmx.de>\n \n \t* gfortran.texi: Fix description of GFC_RTCHECK_* to match actual"}, {"sha": "f7f861f36468dba3092c7d5ebeb44866c9464041", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,9 @@\n+2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (go.serial): New goal.\n+\t(.PHONY): Add go.serial go.prev.\n+\t(go1$(exeext)): Depend on go.prev.  Call LINK_PROGRESS.\n+\n 2020-11-11  Alan Modra  <amodra@gmail.com>\n \n \t* go-gcc.cc (Gcc_backend::global_variable_set_init): Cast NULL to"}, {"sha": "7dc02cc6a8ed7721ad3164584df82799e3ae6666", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,9 @@\n+2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (jit.serial): New goal.\n+\t(.PHONY): Add jit.serial jit.prev.\n+\t($(LIBGCCJIT_FILENAME)): Depend on jit.prev.  Call LINK_PROGRESS.\n+\n 2020-11-12  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/87291"}, {"sha": "e03b949ad0796d6ab4626f6ff9f8175ebe53f2f6", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,15 @@\n+2020-11-18  Jerry Clcanny  <a837940593@gmail.com>\n+\n+\t* lto-symtab.c (lto_symtab_merge_symbols): Fix typos in comment.\n+\n+2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (lto, lto1.serial, lto2.serial): New goals.\n+\t(.PHONY): Add lto lto1.serial lto1.prev lto2.serial lto2.prev.\n+\t(lto.all.cross, lto.start.encap): Remove dependencies.\n+\t($(LTO_EXE)): Depend on lto1.prev.  Call LINK_PROGRESS.\n+\t($(LTO_DUMP_EXE)): Depend on lto2.prev.  Call LINK_PROGRESS.\n+\n 2020-11-17  Jan Hubicka  <jh@suse.cz>\n \n \tPR bootstrap/97857"}, {"sha": "2b3331c756a0fc538832115030c78ba18d86840c", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,9 @@\n+2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (objc.serial): New goal.\n+\t(.PHONY): Add objc.serial objc.prev.\n+\t(cc1obj$(exeext)): Depend on objc.prev.  Call LINK_PROGRESS.\n+\n 2020-11-13  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR objc/90707"}, {"sha": "b5c98c2e4f3aed24873afa8fdd108db07d8d1cd3", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,9 @@\n+2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (obj-c++.serial): New goal.\n+\t(.PHONY): Add obj-c++.serial obj-c++.prev.\n+\t(cc1objplus$(exeext)): Depend on obj-c++.prev.  Call LINK_PROGRESS.\n+\n 2020-09-25  Nathan Sidwell  <nathan@acm.org>\n \n \t* objcp-decl.c (objcp_start_struct): Use TAG_how not tag_scope."}, {"sha": "e29c057f95676a6644a926ea2e4959540c1c081c", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,7 @@\n+2020-11-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* zh_TW.po: Update.\n+\n 2020-07-29  Joseph Myers  <joseph@codesourcery.com>\n \n \t* ja.po, sv.po: Update."}, {"sha": "05ea2a7e5d372b30060a9749bc0781a6a3115ed9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,95 @@\n+2020-11-18  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR middle-end/85811\n+\t* gcc.dg/pr85811.c: New test.\n+\t* gcc.dg/fold-isfinite-1.c: New test.\n+\t* gcc.dg/fold-isfinite-2.c: New test.\n+\t* gcc.dg/fold-isinf-1.c: New test.\n+\t* gcc.dg/fold-isinf-2.c: New test.\n+\t* gcc.dg/fold-isnan-1.c: New test.\n+\t* gcc.dg/fold-isnan-2.c: New test.\n+\n+2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/91029\n+\tPR tree-optimization/97888\n+\t* gcc.dg/pr91029.c: Add comment with PR number.\n+\t(f2): Use > 0 rather than >= 0.\n+\t* gcc.c-torture/execute/pr97888-1.c: New test.\n+\t* gcc.c-torture/execute/pr97888-2.c: New test.\n+\n+2020-11-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97893\n+\t* gcc.dg/analyzer/malloc-1.c: Add CWE-690 and CWE-476 codes to\n+\texpected output.\n+\n+2020-11-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/bb-slp-pr68892.c: Don't XFAIL the profitability\n+\ttest for aarch64*-*-*.  Allow the \"BB vectorization with gaps\"\n+\tmessage to be printed more than once.\n+\n+2020-11-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/slp-21.c: Expect 4 SLP instances to be vectorized\n+\ton arm* and aarch64* targets.\n+\n+2020-11-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/fast-math-vect-call-1.c: Only expect SLP to be used\n+\ton vect_perm3_int targets.\n+\t* gcc.dg/vect/slp-perm-6.c: Likewise.  Only XFAIL the LOAD/STORE_LANES\n+\ttests on vect_perm3_int targets.\n+\n+2020-11-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/vect-epilogues.c: XFAIL test for epilogue loop\n+\tvectorization if vect_partial_vectors_usage_2.\n+\n+2020-11-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/vect-sdiv-pow2-1.c (main): Add an asm to the\n+\tset-up loop.\n+\n+2020-11-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/97843\n+\t* gdc.dg/torture/pr97843.d: New test.\n+\n+2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/97862\n+\t* c-c++-common/gomp/pr97862.c: New test.\n+\n+2020-11-18  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.target/riscv/arch-9.c: New.\n+\t* gcc.target/riscv/arch-10.c: Ditto.\n+\t* gcc.target/riscv/arch-11.c: Ditto.\n+\t* gcc.target/riscv/attribute-6.c: Remove, we don't support G\n+\twith version anymore.\n+\t* gcc.target/riscv/attribute-8.c: Reorder arch string to fit canonical\n+\tordering.\n+\t* gcc.target/riscv/attribute-9.c: We don't emit version for\n+\tunknown extensions now.\n+\t* gcc.target/riscv/attribute-11.c: Add -misa-spec=2.2 flags.\n+\t* gcc.target/riscv/attribute-12.c: Ditto.\n+\t* gcc.target/riscv/attribute-13.c: Ditto.\n+\t* gcc.target/riscv/attribute-14.c: Ditto.\n+\t* gcc.target/riscv/attribute-15.c: New.\n+\t* gcc.target/riscv/attribute-16.c: Ditto.\n+\t* gcc.target/riscv/attribute-17.c: Ditto.\n+\n+2020-11-18  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.target/riscv/arch-8.c: New.\n+\t* gcc.target/riscv/attribute-14.c: Ditto.\n+\n+2020-11-18  Jiufu Guo   <guojiufu@linux.ibm.com>\n+\n+\t* gcc.dg/tree-ssa/loopclosedphi.c: New test.\n+\n 2020-11-17  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gcc.dg/pr91029.c: New."}, {"sha": "8cafaf38707e32fff7d926e2baa7a301a7756d08", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,39 @@\n+2020-11-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* include/cpplib.h (struct cpp_options): Add module_directives\n+\toption.\n+\t(NODE_MODULE): New node flag.\n+\t(struct cpp_hashnode): Make rid-code a bitfield, increase bits in\n+\tflags and swap with type field.\n+\t* init.c (post_options): Create module-directive identifier nodes.\n+\t* internal.h (struct lexer_state): Add directive_file_token &\n+\tn_modules fields.  Add module node enumerator.\n+\t* lex.c (cpp_maybe_module_directive): New.\n+\t(_cpp_lex_token): Call it.\n+\t(cpp_output_token): Add '\"' around CPP_HEADER_NAME token.\n+\t(do_peek_ident, do_peek_module): New.\n+\t(cpp_directives_only): Detect module-directive lines.\n+\t* macro.c (cpp_get_token_1): Deal with directive_file_token\n+\ttriggering.\n+\n+2020-11-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* files.c (struct _cpp_file): Add header_unit field.\n+\t(_cpp_stack_file): Add header unit support.\n+\t(cpp_find_header_unit): New.\n+\t* include/cpplib.h (cpp_find_header_unit): Declare.\n+\n+2020-11-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* include/cpplib.h (struct cpp_options): Add modules to\n+\tdep-options.\n+\t* include/mkdeps.h (deps_add_module_target): Declare.\n+\t(deps_add_module_dep): Declare.\n+\t* mkdeps.c (class mkdeps): Add modules, module_name, cmi_name,\n+\tis_header_unit fields.  Adjust cdtors.\n+\t(deps_add_module_target, deps_add_module_dep): New.\n+\t(make_write): Write module dependencies, if enabled.\n+\n 2020-11-17  Nathan Sidwell  <nathan@acm.org>\n \n \t* include/cpplib.h (struct cpp_callbacks): Add"}, {"sha": "7ebed6461246eba7690cc003d22c3ddb115ce65a", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,11 @@\n+2020-11-18  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/lib2hw_mul.S (mult64_hw): New.\n+\t(if MUL_32): Use mult64_hw for __muldi3.\n+\t(if MUL_F5): Use mult64_hw for __muldi3.\n+\t* config/msp430/lib2mul.c (__muldi3): New.\n+\t* config/msp430/t-msp430 (LIB2FUNCS_EXCLUDE): Define.\n+\n 2020-11-17  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/t-ppc64-fp (LIB2ADD): Delete."}, {"sha": "13dd2a5f3e943e1b5dd83507871faf77d43ded54", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,40 @@\n+2020-11-18  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* env.c (gomp_global_icv): Remove nest_var field.  Add\n+\tmax_active_levels_var field.\n+\t(gomp_max_active_levels_var): Remove.\n+\t(parse_boolean): Return true on success.\n+\t(handle_omp_display_env): Express OMP_NESTED in terms of\n+\tmax_active_levels_var.  Change format specifier for\n+\tmax_active_levels_var.\n+\t(initialize_env): Set max_active_levels_var from\n+\tOMP_MAX_ACTIVE_LEVELS, OMP_NESTED, OMP_NUM_THREADS and\n+\tOMP_PROC_BIND.\n+\t* icv.c (omp_set_nested): Express in terms of\n+\tmax_active_levels_var.\n+\t(omp_get_nested): Likewise.\n+\t(omp_set_max_active_levels): Use max_active_levels_var field instead\n+\tof gomp_max_active_levels_var.\n+\t(omp_get_max_active_levels): Likewise.\n+\t* libgomp.h (struct gomp_task_icv): Remove nest_var field.  Add\n+\tmax_active_levels_var field.\n+\t(gomp_supported_active_levels): Set to UCHAR_MAX.\n+\t(gomp_max_active_levels_var): Delete.\n+\t* libgomp.texi (omp_get_nested): Update documentation.\n+\t(omp_set_nested): Likewise.\n+\t(OMP_MAX_ACTIVE_LEVELS): Likewise.\n+\t(OMP_NESTED): Likewise.\n+\t(OMP_NUM_THREADS): Likewise.\n+\t(OMP_PROC_BIND): Likewise.\n+\t* parallel.c (gomp_resolve_num_threads): Replace reference\n+\tto nest_var with max_active_levels_var.  Use max_active_levels_var\n+\tfield instead of gomp_max_active_levels_var.\n+\n+2020-11-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.c/usleep.h (fallback_usleep): Renamed from\n+\tnvptx_usleep; use also for device={arch(gcn)}.\n+\n 2020-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c-c++-common/allocate-1.c (struct S): New type."}, {"sha": "d4c9184ead3f12682bd8ab74289bfa0bb9f6f29b", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,14 @@\n+2020-11-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* configure.tgt: Add *-*-dragonfly* as a supported target.\n+\t* configure: Regenerate.\n+\t* m4/druntime/os.m4 (DRUNTIME_OS_SOURCES): Add dragonfly* as a posix\n+\ttarget.\n+\n+2020-11-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* src/MERGE: Merge upstream phobos 7948e0967.\n+\n 2020-11-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* configure: Regenerate."}, {"sha": "bfb9ae501415fc49bd0d0a687cdb368be1a0903f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bb75f841c552cfd27a4344b7487efbe35b4481/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bb75f841c552cfd27a4344b7487efbe35b4481/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=25bb75f841c552cfd27a4344b7487efbe35b4481", "patch": "@@ -1,3 +1,11 @@\n+2020-11-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (join_view::_Iterator::_M_satisfy): Uglify\n+\tlocal variable inner.\n+\t(join_view::_Iterator::operator->): Use _Inner_iter instead of\n+\t_Outer_iter in the function signature as per LWG 3500.\n+\t* testsuite/std/ranges/adaptors/join.cc (test08): Test it.\n+\n 2020-11-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/93421"}]}