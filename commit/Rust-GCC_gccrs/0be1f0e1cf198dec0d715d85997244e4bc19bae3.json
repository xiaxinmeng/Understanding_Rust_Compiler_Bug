{"sha": "0be1f0e1cf198dec0d715d85997244e4bc19bae3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJlMWYwZTFjZjE5OGRlYzBkNzE1ZDg1OTk3MjQ0ZTRiYzE5YmFlMw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-04-24T21:10:56Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-04-24T21:10:56Z"}, "message": "(MACHINE_STATE_SAVE, MACHINE_STATE_RESTORE): Add\nTARGET_5200 support.\n\nFrom-SVN: r13978", "tree": {"sha": "0090818327448e8b1cf675407893d471b33f1d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0090818327448e8b1cf675407893d471b33f1d6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0be1f0e1cf198dec0d715d85997244e4bc19bae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be1f0e1cf198dec0d715d85997244e4bc19bae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0be1f0e1cf198dec0d715d85997244e4bc19bae3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be1f0e1cf198dec0d715d85997244e4bc19bae3/comments", "author": null, "committer": null, "parents": [{"sha": "1974bfb11f1d4a6326523185f9370b3b3a590f4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1974bfb11f1d4a6326523185f9370b3b3a590f4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1974bfb11f1d4a6326523185f9370b3b3a590f4e"}], "stats": {"total": 56, "additions": 48, "deletions": 8}, "files": [{"sha": "c538db4db0f5a047a95bc3b27918987225eac407", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 48, "deletions": 8, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be1f0e1cf198dec0d715d85997244e4bc19bae3/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be1f0e1cf198dec0d715d85997244e4bc19bae3/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=0be1f0e1cf198dec0d715d85997244e4bc19bae3", "patch": "@@ -988,24 +988,64 @@ while(0)\n \n #ifdef MOTOROLA\n #define MACHINE_STATE_SAVE(id)\t\t\\\n-  asm (\"move.w %ccr,-(%sp)\");\t\t\\\n-  asm (\"movm.l &0xc0c0,-(%sp)\");\n+  if (TARGET_5200)\t\t\t\\\n+    {\t\t\t\t\t\\\n+      asm (\"sub.l 20,%sp\");\t\t\\\n+      asm (\"movm.l &0x0303,4(%sp)\");\t\\\n+      asm (\"move.w %ccr,%d0\");\t\t\\\n+      asm (\"movm.l &0x0001,(%sp)\");\t\\\n+    }\t\t\t\t\t\\\n+  else\t\t\t\t\t\\\n+    {\t\t\t\t\t\\\n+      asm (\"move.w %ccr,-(%sp)\");\t\\\n+      asm (\"movm.l &0xc0c0,-(%sp)\");\t\\\n+    }\n #else\n #define MACHINE_STATE_SAVE(id)\t\t\\\n-  asm (\"movew cc,sp@-\");\t\t\\\n-  asm (\"moveml d0/d1/a0/a1,sp@-\");\n+  if (TARGET_5200)\t\t\t\\\n+    {\t\t\t\t\t\\\n+      asm (\"subl 20,sp\");\t\t\\\n+      asm (\"movml d0/d1/a0/a1,sp@(4)\");\t\\\n+      asm (\"movew cc,d0\");\t\t\\\n+      asm (\"movml d0,sp@\");\t\t\\\n+    }\t\t\t\t\t\\\n+  else\t\t\t\t\t\\\n+    {\t\t\t\t\t\\\n+      asm (\"movew cc,sp@-\");\t\t\\\n+      asm (\"moveml d0/d1/a0/a1,sp@-\");\t\\\n+    }\n #endif\n \n /* Restore all registers saved by MACHINE_STATE_SAVE. */\n \n #ifdef MOTOROLA\n #define MACHINE_STATE_RESTORE(id)\t\\\n-  asm (\"movm.l (%sp)+,&0x0303\");\t\\\n-  asm (\"move.w (%sp)+,%ccr\");\n+  if (TARGET_5200)\t\t\t\\\n+    {\t\t\t\t\t\\\n+      asm (\"movm.l (%sp),&0x0001\");\t\\\n+      asm (\"move.w %d0,%ccr\");\t\t\\\n+      asm (\"movm.l 4(%sp),&0x0303\");\t\\\n+      asm (\"add.l 20,%sp\");\t\t\\\n+    }\t\t\t\t\t\\\n+  else\t\t\t\t\t\\\n+    {\t\t\t\t\t\\\n+      asm (\"movm.l (%sp)+,&0x0303\");\t\\\n+      asm (\"move.w (%sp)+,%ccr\");\t\\\n+    }\n #else\n #define MACHINE_STATE_RESTORE(id)\t\\\n-  asm (\"moveml sp@+,d0/d1/a0/a1\");\t\\\n-  asm (\"movew sp@+,cc\");\n+  if (TARGET_5200)\t\t\t\\\n+    {\t\t\t\t\t\\\n+      asm (\"movml sp@,d0\");\t\t\\\n+      asm (\"movew d0,cc\");\t\t\\\n+      asm (\"movml sp@(4),d0/d1/a0/a1\");\t\\\n+      asm (\"addl 20,sp\");\t\t\\\n+    }\t\t\t\t\t\\\n+  else\t\t\t\t\t\\\n+    {\t\t\t\t\t\\\n+      asm (\"moveml sp@+,d0/d1/a0/a1\");\t\\\n+      asm (\"movew sp@+,cc\");\t\t\\\n+    }\n #endif\n \n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,"}]}