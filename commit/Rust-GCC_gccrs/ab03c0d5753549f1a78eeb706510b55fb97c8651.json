{"sha": "ab03c0d5753549f1a78eeb706510b55fb97c8651", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIwM2MwZDU3NTM1NDlmMWE3OGVlYjcwNjUxMGI1NWZiOTdjODY1MQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-03-18T16:15:34Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-03-18T16:15:34Z"}, "message": "Fix idiv latencies for znver3\n\nupdate costs of integer divides to match actual latencies (the scheduler model\nalready does the right thing).  It is essentially no-op, since we end up\nexpanding idiv for all sensible constants, so this only may end up disabling\nvectorization in some cases, but I did not find any such examples.  However in\ngeneral it is better ot have actual latencies than random numbers.\n\ngcc/ChangeLog:\n\n2021-03-18  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* config/i386/x86-tune-costs.h (struct processor_costs): Fix costs of\n\tinteger divides1.", "tree": {"sha": "57dcd87df1c2c19386d2afd6891923322205a87a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57dcd87df1c2c19386d2afd6891923322205a87a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab03c0d5753549f1a78eeb706510b55fb97c8651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab03c0d5753549f1a78eeb706510b55fb97c8651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab03c0d5753549f1a78eeb706510b55fb97c8651", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab03c0d5753549f1a78eeb706510b55fb97c8651/comments", "author": null, "committer": null, "parents": [{"sha": "d9f0ade001533c9544bf2153b6baa8844ec0bee4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f0ade001533c9544bf2153b6baa8844ec0bee4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9f0ade001533c9544bf2153b6baa8844ec0bee4"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "58b3b81985ba4310fea97ecd6ec60eeeffc6236e", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab03c0d5753549f1a78eeb706510b55fb97c8651/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab03c0d5753549f1a78eeb706510b55fb97c8651/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=ab03c0d5753549f1a78eeb706510b55fb97c8651", "patch": "@@ -1741,13 +1741,11 @@ struct processor_costs znver3_cost = {\n    COSTS_N_INSNS (3)},\t\t\t/*\t\t\tother.  */\n   0,\t\t\t\t\t/* cost of multiply per each bit\n \t\t\t\t\t   set.  */\n-   /* Depending on parameters, idiv can get faster on ryzen.  This is upper\n-      bound.  */\n-  {COSTS_N_INSNS (16),\t\t\t/* cost of a divide/mod for QI.  */\n-   COSTS_N_INSNS (22),\t\t\t/* \t\t\t    HI.  */\n-   COSTS_N_INSNS (30),\t\t\t/*\t\t\t    SI.  */\n-   COSTS_N_INSNS (45),\t\t\t/*\t\t\t    DI.  */\n-   COSTS_N_INSNS (45)},\t\t\t/*\t\t\t    other.  */\n+  {COSTS_N_INSNS (9),\t\t\t/* cost of a divide/mod for QI.  */\n+   COSTS_N_INSNS (10),\t\t\t/* \t\t\t    HI.  */\n+   COSTS_N_INSNS (12),\t\t\t/*\t\t\t    SI.  */\n+   COSTS_N_INSNS (17),\t\t\t/*\t\t\t    DI.  */\n+   COSTS_N_INSNS (17)},\t\t\t/*\t\t\t    other.  */\n   COSTS_N_INSNS (1),\t\t\t/* cost of movsx.  */\n   COSTS_N_INSNS (1),\t\t\t/* cost of movzx.  */\n   8,\t\t\t\t\t/* \"large\" insn.  */"}]}