{"sha": "3de3a1be9ee8c46efce3714cbbecaae0c7efe3f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RlM2ExYmU5ZWU4YzQ2ZWZjZTM3MTRjYmJlY2FhZTBjN2VmZTNmMA==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2017-01-13T10:22:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-13T10:22:23Z"}, "message": "inline.adb, inline.ads (Call_Can_Be_Inlined_In_GNATprove_Mode): New function to detect when a call may be inlined or not in GNATprove mode.\n\n2017-01-13  Yannick Moy  <moy@adacore.com>\n\n\t* inline.adb, inline.ads (Call_Can_Be_Inlined_In_GNATprove_Mode):\n\tNew function to detect when a call may be inlined or not in\n\tGNATprove mode.\n\t(Expand_Inlined_Call): Ensure that a temporary\n\tis always created in the cases where a type conversion may be\n\tneeded on an input parameter in GNATprove mode, so that GNATprove\n\tsees the check to perform.\n\t* sem_res.adb (Resolve_Call): In GNATprove mode, skip inlining\n\twhen not applicable due to actual requiring type conversion\n\twith possible check but no temporary value can be copied for\n\tGNATprove to see the check.\n\nFrom-SVN: r244408", "tree": {"sha": "e031513a067f8fa4ff85971c4baa742f200c3de5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e031513a067f8fa4ff85971c4baa742f200c3de5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3de3a1be9ee8c46efce3714cbbecaae0c7efe3f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de3a1be9ee8c46efce3714cbbecaae0c7efe3f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3de3a1be9ee8c46efce3714cbbecaae0c7efe3f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de3a1be9ee8c46efce3714cbbecaae0c7efe3f0/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ccff88b71d7988940c736f123071b11fb614d05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ccff88b71d7988940c736f123071b11fb614d05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ccff88b71d7988940c736f123071b11fb614d05"}], "stats": {"total": 108, "additions": 100, "deletions": 8}, "files": [{"sha": "549ee1ab08b2cbdd476ed3fa35cf8c731ea7d8b7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de3a1be9ee8c46efce3714cbbecaae0c7efe3f0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de3a1be9ee8c46efce3714cbbecaae0c7efe3f0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3de3a1be9ee8c46efce3714cbbecaae0c7efe3f0", "patch": "@@ -1,3 +1,17 @@\n+2017-01-13  Yannick Moy  <moy@adacore.com>\n+\n+\t* inline.adb, inline.ads (Call_Can_Be_Inlined_In_GNATprove_Mode):\n+\tNew function to detect when a call may be inlined or not in\n+\tGNATprove mode.\n+\t(Expand_Inlined_Call): Ensure that a temporary\n+\tis always created in the cases where a type conversion may be\n+\tneeded on an input parameter in GNATprove mode, so that GNATprove\n+\tsees the check to perform.\n+\t* sem_res.adb (Resolve_Call): In GNATprove mode, skip inlining\n+\twhen not applicable due to actual requiring type conversion\n+\twith possible check but no temporary value can be copied for\n+\tGNATprove to see the check.\n+\n 2017-01-13  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_aggr.adb, par_sco.adb, s-osprim-mingw.adb, exp_ch5.adb,"}, {"sha": "bf0f705f4289113b1c663120c0ff2124789de67f", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 70, "deletions": 7, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de3a1be9ee8c46efce3714cbbecaae0c7efe3f0/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de3a1be9ee8c46efce3714cbbecaae0c7efe3f0/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=3de3a1be9ee8c46efce3714cbbecaae0c7efe3f0", "patch": "@@ -1149,7 +1149,7 @@ package body Inline is\n          Make_Defining_Identifier (Sloc (N), Name_uParent));\n       Set_Corresponding_Spec (Original_Body, Empty);\n \n-      --  Remove all aspects/pragmas that have no meaining in an inlined body\n+      --  Remove all aspects/pragmas that have no meaning in an inlined body\n \n       Remove_Aspects_And_Pragmas (Original_Body);\n \n@@ -1204,6 +1204,37 @@ package body Inline is\n       Set_Is_Inlined (Spec_Id);\n    end Build_Body_To_Inline;\n \n+   -------------------------------------------\n+   -- Call_Can_Be_Inlined_In_GNATprove_Mode --\n+   -------------------------------------------\n+\n+   function Call_Can_Be_Inlined_In_GNATprove_Mode\n+    (N    : Node_Id;\n+     Subp : Entity_Id) return Boolean\n+   is\n+      F : Entity_Id;\n+      A : Node_Id;\n+\n+   begin\n+      F := First_Formal (Subp);\n+      A := First_Actual (N);\n+      while Present (F) loop\n+         if Ekind (F) /= E_Out_Parameter\n+           and then not Same_Type (Etype (F), Etype (A))\n+           and then\n+             (Is_By_Reference_Type (Etype (A))\n+              or else Is_Limited_Type (Etype (A)))\n+         then\n+            return False;\n+         end if;\n+\n+         Next_Formal (F);\n+         Next_Actual (A);\n+      end loop;\n+\n+      return True;\n+   end Call_Can_Be_Inlined_In_GNATprove_Mode;\n+\n    -------------------\n    -- Cannot_Inline --\n    -------------------\n@@ -1406,8 +1437,8 @@ package body Inline is\n          Formal     : Entity_Id;\n          Formal_Typ : Entity_Id;\n \n-         --  Start of processing for\n-         --  Has_Formal_With_Discriminant_Dependent_Component\n+      --  Start of processing for\n+      --  Has_Formal_With_Discriminant_Dependent_Fields\n \n       begin\n          --  Inspect all parameters of the subprogram looking for a formal\n@@ -3065,19 +3096,25 @@ package body Inline is\n \n          --  If the actual is a literal and the formal has its address taken,\n          --  we cannot pass the literal itself as an argument, so its value\n-         --  must be captured in a temporary.\n+         --  must be captured in a temporary. Skip this optimization in\n+         --  GNATprove mode, to make sure any check on a type conversion\n+         --  will be issued.\n \n          if (Is_Entity_Name (A)\n               and then\n                (not Is_Scalar_Type (Etype (A))\n-                 or else Ekind (Entity (A)) = E_Enumeration_Literal))\n+                 or else Ekind (Entity (A)) = E_Enumeration_Literal)\n+              and then not GNATprove_Mode)\n \n          --  When the actual is an identifier and the corresponding formal is\n          --  used only once in the original body, the formal can be substituted\n-         --  directly with the actual parameter.\n+         --  directly with the actual parameter. Skip this optimization in\n+         --  GNATprove mode, to make sure any check on a type conversion\n+         --  will be issued.\n \n            or else (Nkind (A) = N_Identifier\n-             and then Formal_Is_Used_Once (F))\n+             and then Formal_Is_Used_Once (F)\n+             and then not GNATprove_Mode)\n \n            or else\n              (Nkind_In (A, N_Real_Literal,\n@@ -3147,7 +3184,33 @@ package body Inline is\n                    Constant_Present    => True,\n                    Object_Definition   => New_Occurrence_Of (Temp_Typ, Loc),\n                    Expression          => New_A);\n+\n             else\n+               --  In GNATprove mode, make an explicit copy of input\n+               --  parameters when formal and actual types differ, to make\n+               --  sure any check on the type conversion will be issued.\n+               --  The legality of the copy is ensured by calling first\n+               --  Call_Can_Be_Inlined_In_GNATprove_Mode.\n+\n+               if GNATprove_Mode\n+                 and then Ekind (F) /= E_Out_Parameter\n+                 and then not Same_Type (Etype (F), Etype (A))\n+               then\n+                  pragma Assert (not (Is_By_Reference_Type (Etype (A))));\n+                  pragma Assert (not (Is_Limited_Type (Etype (A))));\n+                  Decl :=\n+                    Make_Object_Declaration (Loc,\n+                      Defining_Identifier => Temp,\n+                      Constant_Present    => True,\n+                      Object_Definition   => New_Occurrence_Of (Temp_Typ, Loc),\n+                      Expression          => New_Copy_Tree (New_A));\n+                  Append (Decl, Decls);\n+\n+                  --  Create another name for the renaming\n+\n+                  Temp := Make_Temporary (Loc, 'C');\n+               end if;\n+\n                Decl :=\n                  Make_Object_Renaming_Declaration (Loc,\n                    Defining_Identifier => Temp,"}, {"sha": "96cff58223d47129ca76c08f9008bd51cb399b8c", "filename": "gcc/ada/inline.ads", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de3a1be9ee8c46efce3714cbbecaae0c7efe3f0/gcc%2Fada%2Finline.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de3a1be9ee8c46efce3714cbbecaae0c7efe3f0/gcc%2Fada%2Finline.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.ads?ref=3de3a1be9ee8c46efce3714cbbecaae0c7efe3f0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -167,6 +167,13 @@ package Inline is\n    --  enabled and the subprogram contains a construct that cannot be inlined,\n    --  the problematic construct is flagged accordingly.\n \n+   function Call_Can_Be_Inlined_In_GNATprove_Mode\n+    (N    : Node_Id;\n+     Subp : Entity_Id) return Boolean;\n+   --  Returns False if the call in node N to subprogram Subp cannot be inlined\n+   --  in GNATprove mode, because it may lead to missing a check on type\n+   --  conversion of input parameters otherwise. Returns True otherwise.\n+\n    function Can_Be_Inlined_In_GNATprove_Mode\n      (Spec_Id : Entity_Id;\n       Body_Id : Entity_Id) return Boolean;"}, {"sha": "51629f2c49c1bd66b24ca1af15b8e4d610eed67b", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de3a1be9ee8c46efce3714cbbecaae0c7efe3f0/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de3a1be9ee8c46efce3714cbbecaae0c7efe3f0/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=3de3a1be9ee8c46efce3714cbbecaae0c7efe3f0", "patch": "@@ -6624,6 +6624,14 @@ package body Sem_Res is\n                     (\"cannot inline & (in potentially unevaluated context)?\",\n                      N, Nam_UA);\n \n+               --  Do not inline calls which would possibly lead to missing a\n+               --  type conversion check on an input parameter.\n+\n+               elsif not Call_Can_Be_Inlined_In_GNATprove_Mode (N, Nam) then\n+                  Cannot_Inline\n+                    (\"cannot inline & (possible check on input parameters)?\",\n+                     N, Nam_UA);\n+\n                --  Otherwise, inline the call\n \n                else"}]}