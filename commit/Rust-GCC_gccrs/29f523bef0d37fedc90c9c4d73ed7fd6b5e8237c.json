{"sha": "29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlmNTIzYmVmMGQzN2ZlZGM5MGM5YzRkNzNlZDdmZDZiNWU4MjM3Yw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-05-23T20:45:40Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-05-23T20:45:40Z"}, "message": "builtins.def: Defome atan...\n\n\n\t* builtins.def: Defome atan, atanf, atanl, tan, tanf and tanl\n\tbuiltin functions (and their __builtin_* variants).\n\t* builtins.c (mathfn_built_in): Handle tan{,f,l} and atan{,f,l}.\n\t(expand_builtin): Don't expand tan{,f,l} or atan{,f,l} when not\n\toptimizing.\n\n\t* doc/extend.texi: Document new tan and atan builtins, and\n\ttheir float and long double variants.\n\n\t* gcc.dg/builtins-1.c: Add tests for tan and atan.\n\t* gcc.dg/builtins-4.c: Add test for fmod.\n\nFrom-SVN: r67137", "tree": {"sha": "2d249c1630830eb3302bb11242b3adef2ac554a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d249c1630830eb3302bb11242b3adef2ac554a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c/comments", "author": null, "committer": null, "parents": [{"sha": "a7050d49c52f3596fd94474499772b2bf330f886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7050d49c52f3596fd94474499772b2bf330f886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7050d49c52f3596fd94474499772b2bf330f886"}], "stats": {"total": 108, "additions": 104, "deletions": 4}, "files": [{"sha": "423e4e2d60bfadef6f5920d91f2c3e81ee72631a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c", "patch": "@@ -1,3 +1,14 @@\n+2003-05-23  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.def: Defome atan, atanf, atanl, tan, tanf and tanl\n+\tbuiltin functions (and their __builtin_* variants).\n+\t* builtins.c (mathfn_built_in): Handle tan{,f,l} and atan{,f,l}.\n+\t(expand_builtin): Don't expand tan{,f,l} or atan{,f,l} when not\n+\toptimizing.\n+\n+\t* doc/extend.texi: Document new tan and atan builtins, and\n+\ttheir float and long double variants.\n+\n 2003-05-23  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config/sparc/netbsd-elf.h (TARGET_OS_CPP_BUILTINS): Define"}, {"sha": "88311b7780aca1cc6ab6317f5ae56b3b06b3adb5", "filename": "gcc/builtins.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c", "patch": "@@ -1503,6 +1503,16 @@ mathfn_built_in (type, fn)\n       case BUILT_IN_LOGL:\n \tfcode = BUILT_IN_LOG;\n \tbreak;\n+      case BUILT_IN_TAN:\n+      case BUILT_IN_TANF:\n+      case BUILT_IN_TANL:\n+\tfcode = BUILT_IN_TAN;\n+\tbreak;\n+      case BUILT_IN_ATAN:\n+      case BUILT_IN_ATANF:\n+      case BUILT_IN_ATANL:\n+\tfcode = BUILT_IN_ATAN;\n+\tbreak;\n       case BUILT_IN_FLOOR:\n       case BUILT_IN_FLOORF:\n       case BUILT_IN_FLOORL:\n@@ -1559,6 +1569,16 @@ mathfn_built_in (type, fn)\n       case BUILT_IN_LOGL:\n \tfcode = BUILT_IN_LOGF;\n \tbreak;\n+      case BUILT_IN_TAN:\n+      case BUILT_IN_TANF:\n+      case BUILT_IN_TANL:\n+\tfcode = BUILT_IN_TANF;\n+\tbreak;\n+      case BUILT_IN_ATAN:\n+      case BUILT_IN_ATANF:\n+      case BUILT_IN_ATANL:\n+\tfcode = BUILT_IN_ATANF;\n+\tbreak;\n       case BUILT_IN_FLOOR:\n       case BUILT_IN_FLOORF:\n       case BUILT_IN_FLOORL:\n@@ -1615,6 +1635,16 @@ mathfn_built_in (type, fn)\n       case BUILT_IN_LOGL:\n \tfcode = BUILT_IN_LOGL;\n \tbreak;\n+      case BUILT_IN_TAN:\n+      case BUILT_IN_TANF:\n+      case BUILT_IN_TANL:\n+\tfcode = BUILT_IN_TANL;\n+\tbreak;\n+      case BUILT_IN_ATAN:\n+      case BUILT_IN_ATANF:\n+      case BUILT_IN_ATANL:\n+\tfcode = BUILT_IN_ATANL;\n+\tbreak;\n       case BUILT_IN_FLOOR:\n       case BUILT_IN_FLOORF:\n       case BUILT_IN_FLOORL:\n@@ -4295,6 +4325,12 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       case BUILT_IN_LOG:\n       case BUILT_IN_LOGF:\n       case BUILT_IN_LOGL:\n+      case BUILT_IN_TAN:\n+      case BUILT_IN_TANF:\n+      case BUILT_IN_TANL:\n+      case BUILT_IN_ATAN:\n+      case BUILT_IN_ATANF:\n+      case BUILT_IN_ATANL:\n       case BUILT_IN_POW:\n       case BUILT_IN_POWF:\n       case BUILT_IN_POWL:"}, {"sha": "1a09d6fd26b17371a62d4637cbeaef7d990797d7", "filename": "gcc/builtins.def", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c", "patch": "@@ -495,6 +495,16 @@ DEF_LIB_BUILTIN(BUILT_IN_LOG,\n \t\t\t\t: (flag_unsafe_math_optimizations\n \t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n \t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n+DEF_LIB_BUILTIN(BUILT_IN_TAN,\n+\t\t\"__builtin_tan\",\n+\t\tBT_FN_DOUBLE_DOUBLE,\n+\t\tflag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t       : ATTR_PURE_NOTHROW_LIST)\n+DEF_LIB_BUILTIN(BUILT_IN_ATAN,\n+\t\t\"__builtin_atan\",\n+\t\tBT_FN_DOUBLE_DOUBLE,\n+\t\tflag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t       : ATTR_PURE_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_POW,\n \t\t\"__builtin_pow\",\n \t\tBT_FN_DOUBLE_DOUBLE_DOUBLE,\n@@ -547,6 +557,16 @@ DEF_C99_C90RES_BUILTIN(BUILT_IN_LOGF,\n \t\t\t\t       : (flag_unsafe_math_optimizations\n \t\t\t\t\t  ? ATTR_CONST_NOTHROW_LIST\n \t\t\t\t\t  : ATTR_PURE_NOTHROW_LIST))\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_TANF,\n+\t\t       \"__builtin_tanf\",\n+\t\t       BT_FN_FLOAT_FLOAT,\n+\t\t       flag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t\t      : ATTR_PURE_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_ATANF,\n+\t\t       \"__builtin_atanf\",\n+\t\t       BT_FN_FLOAT_FLOAT,\n+\t\t       flag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t\t      : ATTR_PURE_NOTHROW_LIST)\n DEF_C99_C90RES_BUILTIN(BUILT_IN_POWF,\n \t\t       \"__builtin_powf\",\n \t\t       BT_FN_FLOAT_FLOAT_FLOAT,\n@@ -599,6 +619,16 @@ DEF_C99_C90RES_BUILTIN(BUILT_IN_LOGL,\n \t\t\t\t       : (flag_unsafe_math_optimizations\n \t\t\t\t\t  ? ATTR_CONST_NOTHROW_LIST\n \t\t\t\t\t  : ATTR_PURE_NOTHROW_LIST))\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_TANL,\n+\t\t       \"__builtin_tanl\",\n+\t\t       BT_FN_LONG_DOUBLE_LONG_DOUBLE,\n+\t\t       flag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t\t      : ATTR_PURE_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_ATANL,\n+\t\t       \"__builtin_atanl\",\n+\t\t       BT_FN_LONG_DOUBLE_LONG_DOUBLE,\n+\t\t       flag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t\t      : ATTR_PURE_NOTHROW_LIST)\n DEF_C99_C90RES_BUILTIN(BUILT_IN_POWL,\n \t\t       \"__builtin_powl\",\n \t\t       BT_FN_LONG_DOUBLE_LONG_DOUBLE_LONG_DOUBLE,"}, {"sha": "a95d3637d837ba7df18f9446a8d7bfeee41eb4f7", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c", "patch": "@@ -4590,9 +4590,12 @@ v4si f (v4si a, v4si b, v4si c)\n @findex abort\n @findex abs\n @findex alloca\n+@findex atan\n @findex atan2\n @findex atan2f\n @findex atan2l\n+@findex atanf\n+@findex atanl\n @findex bcmp\n @findex bzero\n @findex calloc\n@@ -4682,6 +4685,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex strrchr\n @findex strspn\n @findex strstr\n+@findex tan\n+@findex tanf\n+@findex tanl\n @findex trunc\n @findex truncf\n @findex truncl\n@@ -4731,16 +4737,18 @@ are handled as built-in functions\n except in strict ISO C90 mode (@option{-ansi} or @option{-std=c89}).\n \n There are also built-in versions of the ISO C99 functions @code{atan2f},\n-@code{atan2l}, @code{ceilf}, @code{ceill}, @code{cosf}, @code{cosl},\n+@code{atan2l}, @code{atanf}, @code{atanl}, @code{ceilf}, @code{ceill},\n+@code{cosf}, @code{cosl},\n @code{expf}, @code{expl}, @code{fabsf}, @code{fabsl}, @code{floorf},\n @code{floorl}, @code{fmodf}, @code{fmodl},\n @code{logf}, @code{logl}, @code{powf}, @code{powl},\n-@code{sinf}, @code{sinl}, @code{sqrtf} and @code{sqrtl}\n+@code{sinf}, @code{sinl}, @code{sqrtf}, @code{sqrtl},\n+@code{tanf} and @code{tanl}\n that are recognized in any mode since ISO C90 reserves these names for\n the purpose to which ISO C99 puts them.  All these functions have\n corresponding versions prefixed with @code{__builtin_}.\n \n-The ISO C90 functions @code{abort}, @code{abs}, @code{atan2},\n+The ISO C90 functions @code{abort}, @code{abs}, @code{atan}, @code{atan2},\n @code{calloc}, @code{ceil}, @code{cos}, @code{exit},\n @code{exp}, @code{fabs}, @code{floor}, @code{fmod},\n @code{fprintf}, @code{fputs}, @code{labs}, @code{log}, @code{malloc},\n@@ -4750,7 +4758,7 @@ The ISO C90 functions @code{abort}, @code{abs}, @code{atan2},\n @code{strcat}, @code{strchr}, @code{strcmp},\n @code{strcpy}, @code{strcspn}, @code{strlen}, @code{strncat}, @code{strncmp},\n @code{strncpy}, @code{strpbrk}, @code{strrchr}, @code{strspn}, @code{strstr},\n-@code{vprintf} and @code{vsprintf}\n+@code{tan}, @code{vprintf} and @code{vsprintf}\n are all recognized as built-in functions unless\n @option{-fno-builtin} is specified (or @option{-fno-builtin-@var{function}}\n is specified for an individual function).  All of these functions have"}, {"sha": "071cc4bfd50eec0d07113417878236a2ffe3f863", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c", "patch": "@@ -1,3 +1,8 @@\n+2003-05-23  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/builtins-1.c: Add tests for tan and atan.\n+\t* gcc.dg/builtins-4.c: Add test for fmod.\n+\n 2003-05-23  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/10682"}, {"sha": "33160ab32bed40eef5936876f13af715dca06b84", "filename": "gcc/testsuite/gcc.dg/builtins-1.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c?ref=29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c", "patch": "@@ -13,16 +13,22 @@ double test2(double x) { return __builtin_cos(x); }\n double test3(double x) { return __builtin_sin(x); }\n double test4(double x) { return __builtin_exp(x); }\n double test5(double x) { return __builtin_log(x); }\n+double test6(double x) { return __builtin_tan(x); }\n+double test7(double x) { return __builtin_atan(x); }\n \n float test1f(float x) { return __builtin_sqrtf(x); }\n float test2f(float x) { return __builtin_cosf(x); }\n float test3f(float x) { return __builtin_sinf(x); }\n float test4f(float x) { return __builtin_expf(x); }\n float test5f(float x) { return __builtin_logf(x); }\n+float test6f(float x) { return __builtin_tanf(x); }\n+float test7f(float x) { return __builtin_atanf(x); }\n \n long double test1l(long double x) { return __builtin_sqrtl(x); }\n long double test2l(long double x) { return __builtin_cosl(x); }\n long double test3l(long double x) { return __builtin_sinl(x); }\n long double test4l(long double x) { return __builtin_expl(x); }\n long double test5l(long double x) { return __builtin_logl(x); }\n+long double test6l(long double x) { return __builtin_tanl(x); }\n+long double test7l(long double x) { return __builtin_atanl(x); }\n "}, {"sha": "55e2c917c2860d76f0509d7832d3c8f61c96870f", "filename": "gcc/testsuite/gcc.dg/builtins-4.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-4.c?ref=29f523bef0d37fedc90c9c4d73ed7fd6b5e8237c", "patch": "@@ -10,12 +10,16 @@\n \n double test1(double x, double y) { return __builtin_pow(x,y); }\n double test2(double x, double y) { return __builtin_atan2(x,y); }\n+double test3(double x, double y) { return __builtin_fmod(x,y); }\n \n float test1f(float x, float y) { return __builtin_powf(x,y); }\n float test2f(float x, float y) { return __builtin_atan2f(x,y); }\n+float test3f(float x, float y) { return __builtin_fmodf(x,y); }\n \n long double test1l(long double x, long double y)\n { return __builtin_powl(x,y); }\n long double test2l(long double x, long double y)\n { return __builtin_atan2l(x,y); }\n+long double test3l(long double x, long double y)\n+{ return __builtin_fmodl(x,y); }\n "}]}