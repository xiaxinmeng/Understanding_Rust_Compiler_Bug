{"sha": "75e562d2c4303d3918be9d1563284b0c580c5e45", "node_id": "C_kwDOANBUbNoAKDc1ZTU2MmQyYzQzMDNkMzkxOGJlOWQxNTYzMjg0YjBjNTgwYzVlNDU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-28T13:28:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-28T16:57:36Z"}, "message": "libstdc++: Fix src/c++17/memory_resource for H8 targets [PR107801]\n\nThis fixes compilation failures for H8 multilibs. For the normal\nmultilib (ILP16L32?), the chunk struct does not have the expected size,\nbecause uint32_t is type long and has alignment 4 (by default). This\nforces sizeof(chunk) to be 12 instead of the expected 10. We can fix\nthat by using bitset::size_type instead of uint32_t, so that we only use\na 16-bit size when size_t and pointers are 16-bit types.\n\nFor the I32LP16 multilibs that use -mint32 int is wider than size_t\nand so arithmetic expressions involving size_t promote to int. This\nmeans we need some explicit casts back to size_t.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/107801\n\t* src/c++17/memory_resource.cc (chunk::_M_bytes): Change type\n\tfrom uint32_t to bitset::size_type. Adjust static assertion.\n\t(__pool_resource::_Pool::replenish): Cast to size_t after\n\tmultiplication instead of before.\n\t(__pool_resource::_M_alloc_pools): Ensure both arguments to\n\tstd::max have type size_t.", "tree": {"sha": "24dff8d635cd42d1448fa1d825d631ab8b39fde9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24dff8d635cd42d1448fa1d825d631ab8b39fde9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75e562d2c4303d3918be9d1563284b0c580c5e45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75e562d2c4303d3918be9d1563284b0c580c5e45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75e562d2c4303d3918be9d1563284b0c580c5e45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75e562d2c4303d3918be9d1563284b0c580c5e45/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7b97a1f6b9d4993545525fd5cb334ae640ddf45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7b97a1f6b9d4993545525fd5cb334ae640ddf45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7b97a1f6b9d4993545525fd5cb334ae640ddf45"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "a1854c55bd03eb82bcc8b5de5167098c6a783640", "filename": "libstdc++-v3/src/c++17/memory_resource.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75e562d2c4303d3918be9d1563284b0c580c5e45/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75e562d2c4303d3918be9d1563284b0c580c5e45/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc?ref=75e562d2c4303d3918be9d1563284b0c580c5e45", "patch": "@@ -505,7 +505,7 @@ namespace pmr\n     }\n \n     // Allocated size of chunk:\n-    uint32_t _M_bytes = 0;\n+    bitset::size_type _M_bytes = 0;\n     // Start of allocated chunk:\n     std::byte* _M_p = nullptr;\n \n@@ -579,7 +579,7 @@ namespace pmr\n   // For 16-bit pointers it's five pointers (10 bytes).\n   // TODO pad 64-bit to 4*sizeof(void*) to avoid splitting across cache lines?\n   static_assert(sizeof(chunk)\n-      == sizeof(bitset::size_type) + sizeof(uint32_t) + 2 * sizeof(void*));\n+      == 2 * sizeof(bitset::size_type) + 2 * sizeof(void*));\n \n   // An oversized allocation that doesn't fit in a pool.\n   struct big_block\n@@ -734,7 +734,7 @@ namespace pmr\n \t  _M_blocks_per_chunk = std::min({\n \t      max_blocks,\n \t      __opts.max_blocks_per_chunk,\n-\t      (size_t)_M_blocks_per_chunk * 2\n+\t      size_t(_M_blocks_per_chunk * 2)\n \t  });\n \t}\n     }\n@@ -1057,7 +1057,8 @@ namespace pmr\n \t// Decide on initial number of blocks per chunk.\n \t// At least 16 blocks per chunk seems reasonable,\n \t// more for smaller blocks:\n-\tsize_t blocks_per_chunk = std::max(size_t(16), 1024 / block_size);\n+\tsize_t blocks_per_chunk = 1024 / block_size;\n+\tblocks_per_chunk = std::max(size_t(16), blocks_per_chunk);\n \t// But don't exceed the requested max_blocks_per_chunk:\n \tblocks_per_chunk\n \t  = std::min(blocks_per_chunk, _M_opts.max_blocks_per_chunk);"}]}