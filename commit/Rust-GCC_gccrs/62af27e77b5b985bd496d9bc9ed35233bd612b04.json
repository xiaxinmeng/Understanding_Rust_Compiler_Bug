{"sha": "62af27e77b5b985bd496d9bc9ed35233bd612b04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJhZjI3ZTc3YjViOTg1YmQ0OTZkOWJjOWVkMzUyMzNiZDYxMmIwNA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-05-04T13:42:03Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-05-15T09:57:57Z"}, "message": "arm: Add support for interrupt routines to reg_needs_saving_p\n\nreg_needs_saving_p is only used when dealing with non-interrupt\nroutines, but it makes sense to extend it to support that context too,\nand make arm_compute_save_reg0_reg12_mask use it.\n\nSave only live registers for non-leaf functions, but assume a callee\ncould clobber any register.\n\n2020-05-15  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/arm.c (reg_needs_saving_p): Add support for interrupt\n\troutines.\n\t(arm_compute_save_reg0_reg12_mask): Use reg_needs_saving_p.", "tree": {"sha": "4537cc23cd106c1f31c2b57082edb2550c2f730c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4537cc23cd106c1f31c2b57082edb2550c2f730c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62af27e77b5b985bd496d9bc9ed35233bd612b04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62af27e77b5b985bd496d9bc9ed35233bd612b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62af27e77b5b985bd496d9bc9ed35233bd612b04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62af27e77b5b985bd496d9bc9ed35233bd612b04/comments", "author": null, "committer": null, "parents": [{"sha": "9f0f7da9aa98eec28b4e5e34ade0aa0028df161d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0f7da9aa98eec28b4e5e34ade0aa0028df161d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f0f7da9aa98eec28b4e5e34ade0aa0028df161d"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "fb7ee99fa28f9313645711d3ebe0afbaed4c9fb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62af27e77b5b985bd496d9bc9ed35233bd612b04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62af27e77b5b985bd496d9bc9ed35233bd612b04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62af27e77b5b985bd496d9bc9ed35233bd612b04", "patch": "@@ -1,3 +1,9 @@\n+2020-05-15  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+        * config/arm/arm.c (reg_needs_saving_p): Add support for interrupt\n+        routines.\n+        (arm_compute_save_reg0_reg12_mask): Use reg_needs_saving_p.\n+\n 2020-05-15  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR middle-end/94635"}, {"sha": "349918a9bfa60bb8fbba7e3b4a213a1aa83e997e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62af27e77b5b985bd496d9bc9ed35233bd612b04/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62af27e77b5b985bd496d9bc9ed35233bd612b04/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=62af27e77b5b985bd496d9bc9ed35233bd612b04", "patch": "@@ -4188,14 +4188,29 @@ arm_trampoline_adjust_address (rtx addr)\n   return addr;\n }\n \f\n-/* Return 1 if REG needs to be saved.   */\n+/* Return 1 if REG needs to be saved. For interrupt handlers, this\n+   includes call-clobbered registers too.  If this is a leaf function\n+   we can just examine the registers used by the RTL, but otherwise we\n+   have to assume that whatever function is called might clobber\n+   anything, and so we have to save all the call-clobbered registers\n+   as well.  */\n static inline bool reg_needs_saving_p (unsigned reg)\n {\n-  if (!df_regs_ever_live_p (reg)\n-      || call_used_or_fixed_reg_p (reg))\n-    return false;\n+  unsigned long func_type = arm_current_func_type ();\n+\n+  if (IS_INTERRUPT (func_type))\n+    if (df_regs_ever_live_p (reg)\n+\t/* Save call-clobbered core registers.  */\n+\t|| (! crtl->is_leaf && call_used_or_fixed_reg_p (reg) && reg < FIRST_VFP_REGNUM))\n+      return true;\n+    else\n+      return false;\n   else\n-    return true;\n+    if (!df_regs_ever_live_p (reg)\n+\t|| call_used_or_fixed_reg_p (reg))\n+      return false;\n+    else\n+      return true;\n }\n \n /* Return 1 if it is possible to return using a single instruction.\n@@ -20677,8 +20692,7 @@ arm_compute_save_reg0_reg12_mask (void)\n \tmax_reg = 12;\n \n       for (reg = 0; reg <= max_reg; reg++)\n-\tif (df_regs_ever_live_p (reg)\n-\t    || (! crtl->is_leaf && call_used_or_fixed_reg_p (reg)))\n+\tif (reg_needs_saving_p (reg))\n \t  save_reg_mask |= (1 << reg);\n \n       /* Also save the pic base register if necessary.  */"}]}