{"sha": "72ed2836928b9da4d6edfd3711028ff645ed257d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJlZDI4MzY5MjhiOWRhNGQ2ZWRmZDM3MTEwMjhmZjY0NWVkMjU3ZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-02-07T01:54:21Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-02-07T01:54:21Z"}, "message": "acinclude.m4 (GLIBCPP_EXPORT_INSTALL_INFO): Deal with library install locations too.\n\n\n2001-02-06  Benjamin Kosnik  <bkoz@fillmore.constant.com>\n\n\t* acinclude.m4 (GLIBCPP_EXPORT_INSTALL_INFO): Deal with library\n\tinstall locations too.\n\t* aclocal.m4: Regeneate.\n\t* configure.in: Remove USE_LIBDIR.\n\t* configure: Regenerate.\n\t* src/Makefile.am (toolexecdir): Simplify, use\n\tglibcpp_toolexecdir, glibcpp_toolexeclibdir.\n\t* src/Makefile.in: Regenerate.\n\t* libsupc++/Makefile.am: Same.\n\t* libsupc++/Makefile.in: Regenerate.\n\n\t* src/Makefile.am: Just remove special rules for locale-inst.cc and\n\tmisc-inst.cc as no longer necessary.\n\n\tFollow C++STYLE for naming non-static functions.\n\t* include/bits/ostream.tcc (_S_pad_char): Not static, rename to\n\t__pad_char.\n\t* include/bits/streambuf.tcc: Same.\n\t* include/bits/ostream.tcc: Same.\n\t* include/bits/istream.tcc: Same.\n\t* include/bits/locale_facets.tcc (_S_pad_numeric): To __pad_numeric.\n\t(_S_output_float): To __output_float.\n\t* include/bits/std_streambuf.h (_S_copy_streambufs): To\n\t__copy_streambufs.\n\t* include/bits/locale_facets.tcc (_S_build_float_format): To\n\t__build_float_format.\n\t(_S_format): To __output_integer.\n\t(_S_fill): To __pad.\n\t* src/locale.cc: Same.\n\t* src/misc-inst.cc: Fix formatting. Fix signature for wchar_t. Correct\n\tnames.\n\t* include/bits/locale_facets.tcc (_S_group_digits): To\n\t__group_digits.\n\t* src/locale-inst.cc: Fixup names. Add use_facet instantiations\n\tfor collate, numpunct.\n\nFrom-SVN: r39508", "tree": {"sha": "d5471bf10a2fb612e8524e1fc3b9ac00f4659832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5471bf10a2fb612e8524e1fc3b9ac00f4659832"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72ed2836928b9da4d6edfd3711028ff645ed257d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72ed2836928b9da4d6edfd3711028ff645ed257d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72ed2836928b9da4d6edfd3711028ff645ed257d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72ed2836928b9da4d6edfd3711028ff645ed257d/comments", "author": null, "committer": null, "parents": [{"sha": "c00dd14e104d2e0fdd8011ff60d3ece69988eabd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c00dd14e104d2e0fdd8011ff60d3ece69988eabd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c00dd14e104d2e0fdd8011ff60d3ece69988eabd"}], "stats": {"total": 526, "additions": 283, "deletions": 243}, "files": [{"sha": "eb60d7992de2fa96fd52876c3fa572e3b5f55d13", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -1,3 +1,41 @@\n+2001-02-06  Benjamin Kosnik  <bkoz@fillmore.constant.com>\n+\n+\t* acinclude.m4 (GLIBCPP_EXPORT_INSTALL_INFO): Deal with library\n+\tinstall locations too.\n+\t* aclocal.m4: Regeneate.\n+\t* configure.in: Remove USE_LIBDIR.\n+\t* configure: Regenerate.\n+\t* src/Makefile.am (toolexecdir): Simplify, use\n+\tglibcpp_toolexecdir, glibcpp_toolexeclibdir.\n+\t* src/Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.am: Same.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\n+\t* src/Makefile.am: Just remove special rules for locale-inst.cc and\n+\tmisc-inst.cc as no longer necessary.\n+\n+\tFollow C++STYLE for naming non-static functions.\n+\t* include/bits/ostream.tcc (_S_pad_char): Not static, rename to\n+\t__pad_char.\n+\t* include/bits/streambuf.tcc: Same.\n+\t* include/bits/ostream.tcc: Same.\n+\t* include/bits/istream.tcc: Same.\n+\t* include/bits/locale_facets.tcc (_S_pad_numeric): To __pad_numeric.\n+\t(_S_output_float): To __output_float.\n+\t* include/bits/std_streambuf.h (_S_copy_streambufs): To\n+\t__copy_streambufs.\n+\t* include/bits/locale_facets.tcc (_S_build_float_format): To\n+\t__build_float_format.\n+\t(_S_format): To __output_integer.\n+\t(_S_fill): To __pad.\n+\t* src/locale.cc: Same.\n+\t* src/misc-inst.cc: Fix formatting. Fix signature for wchar_t. Correct\n+\tnames.\n+\t* include/bits/locale_facets.tcc (_S_group_digits): To\n+\t__group_digits.\n+\t* src/locale-inst.cc: Fixup names. Add use_facet instantiations\n+\tfor collate, numpunct.\n+\t\n 2001-02-06  Phil Edwards  <pme@sources.redhat.com>\n \n \t* docs/html/configopts.html:  Fix HTML markup.\n@@ -53,7 +91,7 @@\n \t* src/Makefile.am: Remove use of -fimplicit-templates.\n \t* src/Makefile.in: Regenerated.\n \t* src/locale-inst.cc: Explicitly instantiate more functions.\n-\t* src/msic-inst.cc: Likewise.\n+\t* src/misc-inst.cc: Likewise.\n \t* src/string-inst.cc: Likewise.\n \n 2001-02-05  Benjamin Kosnik  <bkoz@redhat.com>"}, {"sha": "5c2dee00b6d4db0aaeaa08039daafc1bae97c957", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -108,8 +108,9 @@ WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n-gcc_version = @gcc_version@\n glibcpp_basedir = @glibcpp_basedir@\n+glibcpp_toolexecdir = @glibcpp_toolexecdir@\n+glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@"}, {"sha": "c56d642b788b080b2251a85f055a9ec4faa0c2eb", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -1500,12 +1500,21 @@ AC_DEFUN(GLIBCPP_EXPORT_FLAGS, [\n   AC_SUBST(WARN_FLAGS)\n ])\n \n-\n+dnl\n dnl  GLIBCPP_EXPORT_INSTALL_INFO\n dnl  calculates gxx_install_dir\n+dnl  exports glibcpp_toolexecdir\n+dnl  exports glibcpp_toolexeclibdir\n+dnl\n+dnl Assumes cross_compiling bits already done, and with_cross_host in\n+dnl particular\n dnl\n+dnl GLIBCPP_EXPORT_INSTALL_INFO\n AC_DEFUN(GLIBCPP_EXPORT_INSTALL_INFO, [\n \n+glibcpp_toolexecdir=no\n+glibcpp_toolexeclibdir=no\n+\n AC_MSG_CHECKING([for interface version number])\n libstdcxx_interface=$INTERFACE\n AC_MSG_RESULT($libstdcxx_interface)\n@@ -1537,23 +1546,40 @@ AC_ARG_ENABLE(version-specific-runtime-libs,\n # and header files if --enable-version-specific-runtime-libs option\n # is selected.\n changequote(,)dnl\n-gcc_tmp=`grep version_string ${srcdir}/../gcc/version.c | awk '{print $6}'`\n-gcc_num=`echo ${gcc_tmp} | sed 's/\\\"//g'`\n-gcc_version=$gcc_num\n-gxx_include_dir='$(libdir)/gcc-lib/$(target_alias)/$(gcc_version)/include/g++'\n+gcc_version_trigger=${srcdir}/../gcc/version.c\n+gcc_version_full=`grep version_string ${gcc_version_trigger} | sed -e 's/.*\\\"\\([^\\\"]*\\)\\\".*/\\1/'`\n+gcc_version=`echo ${gcc_version_full} | sed -e 's/\\([^ ]*\\) .*/\\1/'`\n+gxx_include_dir='$(libdir)/gcc-lib/$(target_alias)/'${gcc_version}/include/g++\n+glibcpp_toolexecdir='$(libdir)/gcc-lib/$(target_alias)'\n+glibcpp_toolexeclibdir='$(toolexecdir)/'${gcc_version}\n changequote([,])dnl\n-AC_SUBST(gcc_version)\n-AM_CONDITIONAL(VERSION_SPECIFIC_LIBS, test x\"$version_specific_libs\" = x\"yes\")\n ],version_specific_libs=no)\n AC_MSG_RESULT($version_specific_libs)\n \n-AC_MSG_CHECKING([for install location])\n+# Default case for install directory for include files.\n if test x\"$version_specific_libs\" = x\"no\" \\\n    && test x\"$gxx_include_dir\"=x\"no\"; then\n-  gxx_include_dir=${prefix}/include/g++-${libstdcxx_interface}\n+  gxx_include_dir='$(prefix)'/include/g++-${libstdcxx_interface}\n+fi\n+\n+# Calculate glibcpp_toolexecdir, glibcpp_toolexeclibdir\n+# Install a library built with a cross compiler in tooldir, not libdir.\n+if test x\"$glibcpp_toolexecdir\" = x\"no\"; then \n+  if test x\"$with_cross_host\" = x\"yes\"; then\n+    glibcpp_toolexecdir='$(exec_prefix)/$(target_alias)'\n+    glibcpp_toolexeclibdir='$(toolexecdir)/lib$(MULTISUBDIR)'\n+  else\n+    glibcpp_toolexecdir='$(libdir)/gcc-lib/$(target_alias)'\n+    glibcpp_toolexeclibdir='$(libdir)$(MULTISUBDIR)'\n+  fi\n fi\n+\n+AC_MSG_CHECKING([for install location])\n AC_MSG_RESULT($gxx_include_dir)\n+\n AC_SUBST(gxx_include_dir)\n+AC_SUBST(glibcpp_toolexecdir)\n+AC_SUBST(glibcpp_toolexeclibdir)\n ])\n \n "}, {"sha": "cdaa89147cdc610bb030242111539f55acd8695d", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -1512,12 +1512,21 @@ AC_DEFUN(GLIBCPP_EXPORT_FLAGS, [\n   AC_SUBST(WARN_FLAGS)\n ])\n \n-\n+dnl\n dnl  GLIBCPP_EXPORT_INSTALL_INFO\n dnl  calculates gxx_install_dir\n+dnl  exports glibcpp_toolexecdir\n+dnl  exports glibcpp_toolexeclibdir\n+dnl\n+dnl Assumes cross_compiling bits already done, and with_cross_host in\n+dnl particular\n dnl\n+dnl GLIBCPP_EXPORT_INSTALL_INFO\n AC_DEFUN(GLIBCPP_EXPORT_INSTALL_INFO, [\n \n+glibcpp_toolexecdir=no\n+glibcpp_toolexeclibdir=no\n+\n AC_MSG_CHECKING([for interface version number])\n libstdcxx_interface=$INTERFACE\n AC_MSG_RESULT($libstdcxx_interface)\n@@ -1549,23 +1558,40 @@ AC_ARG_ENABLE(version-specific-runtime-libs,\n # and header files if --enable-version-specific-runtime-libs option\n # is selected.\n changequote(,)dnl\n-gcc_tmp=`grep version_string ${srcdir}/../gcc/version.c | awk '{print $6}'`\n-gcc_num=`echo ${gcc_tmp} | sed 's/\\\"//g'`\n-gcc_version=$gcc_num\n-gxx_include_dir='$(libdir)/gcc-lib/$(target_alias)/$(gcc_version)/include/g++'\n+gcc_version_trigger=${srcdir}/../gcc/version.c\n+gcc_version_full=`grep version_string ${gcc_version_trigger} | sed -e 's/.*\\\"\\([^\\\"]*\\)\\\".*/\\1/'`\n+gcc_version=`echo ${gcc_version_full} | sed -e 's/\\([^ ]*\\) .*/\\1/'`\n+gxx_include_dir='$(libdir)/gcc-lib/$(target_alias)/'${gcc_version}/include/g++\n+glibcpp_toolexecdir='$(libdir)/gcc-lib/$(target_alias)'\n+glibcpp_toolexeclibdir='$(toolexecdir)/'${gcc_version}\n changequote([,])dnl\n-AC_SUBST(gcc_version)\n-AM_CONDITIONAL(VERSION_SPECIFIC_LIBS, test x\"$version_specific_libs\" = x\"yes\")\n ],version_specific_libs=no)\n AC_MSG_RESULT($version_specific_libs)\n \n-AC_MSG_CHECKING([for install location])\n+# Default case for install directory for include files.\n if test x\"$version_specific_libs\" = x\"no\" \\\n    && test x\"$gxx_include_dir\"=x\"no\"; then\n-  gxx_include_dir=${prefix}/include/g++-${libstdcxx_interface}\n+  gxx_include_dir='$(prefix)'/include/g++-${libstdcxx_interface}\n+fi\n+\n+# Calculate glibcpp_toolexecdir, glibcpp_toolexeclibdir\n+# Install a library built with a cross compiler in tooldir, not libdir.\n+if test x\"$glibcpp_toolexecdir\" = x\"no\"; then \n+  if test x\"$with_cross_host\" = x\"yes\"; then\n+    glibcpp_toolexecdir='$(exec_prefix)/$(target_alias)'\n+    glibcpp_toolexeclibdir='$(toolexecdir)/lib$(MULTISUBDIR)'\n+  else\n+    glibcpp_toolexecdir='$(libdir)/gcc-lib/$(target_alias)'\n+    glibcpp_toolexeclibdir='$(libdir)$(MULTISUBDIR)'\n+  fi\n fi\n+\n+AC_MSG_CHECKING([for install location])\n AC_MSG_RESULT($gxx_include_dir)\n+\n AC_SUBST(gxx_include_dir)\n+AC_SUBST(glibcpp_toolexecdir)\n+AC_SUBST(glibcpp_toolexeclibdir)\n ])\n \n "}, {"sha": "bbcb9acd66c50c063739cf341745f279bb752115", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -15569,15 +15569,6 @@ else\n fi\n \n \n-if test -z \"$with_cross_host\"; then\n-  USE_LIBDIR_TRUE=\n-  USE_LIBDIR_FALSE='#'\n-else\n-  USE_LIBDIR_TRUE='#'\n-  USE_LIBDIR_FALSE=\n-fi\n-\n-\n if test \"$CANADIAN\" = yes; then\n   CANADIAN_TRUE=\n   CANADIAN_FALSE='#'\n@@ -15636,17 +15627,17 @@ rm -f confcache\n \n   ac_safe=`echo \"locale.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for locale.h\"\"... $ac_c\" 1>&6\n-echo \"configure:15640: checking for locale.h\" >&5\n+echo \"configure:15631: checking for locale.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 15645 \"configure\"\n+#line 15636 \"configure\"\n #include \"confdefs.h\"\n #include <locale.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:15650: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:15641: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -15664,19 +15655,19 @@ if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n   echo \"$ac_t\"\"yes\" 1>&6\n   \n     echo $ac_n \"checking for LC_MESSAGES\"\"... $ac_c\" 1>&6\n-echo \"configure:15668: checking for LC_MESSAGES\" >&5\n+echo \"configure:15659: checking for LC_MESSAGES\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_val_LC_MESSAGES'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 15673 \"configure\"\n+#line 15664 \"configure\"\n #include \"confdefs.h\"\n #include <locale.h>\n int main() {\n return LC_MESSAGES\n ; return 0; }\n EOF\n-if { (eval echo configure:15680: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:15671: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   ac_cv_val_LC_MESSAGES=yes\n else\n@@ -15717,14 +15708,17 @@ INTERFACE=v3\n # Export all the install information\n \n \n+glibcpp_toolexecdir=no\n+glibcpp_toolexeclibdir=no\n+\n echo $ac_n \"checking for interface version number\"\"... $ac_c\" 1>&6\n-echo \"configure:15722: checking for interface version number\" >&5\n+echo \"configure:15716: checking for interface version number\" >&5\n libstdcxx_interface=$INTERFACE\n echo \"$ac_t\"\"$libstdcxx_interface\" 1>&6\n \n # Process the option --with-gxx-include-dir=<path to include-files directory>\n echo $ac_n \"checking for --with-gxx-include-dir\"\"... $ac_c\" 1>&6\n-echo \"configure:15728: checking for --with-gxx-include-dir\" >&5\n+echo \"configure:15722: checking for --with-gxx-include-dir\" >&5\n # Check whether --with-gxx-include-dir or --without-gxx-include-dir was given.\n if test \"${with_gxx_include_dir+set}\" = set; then\n   withval=\"$with_gxx_include_dir\"\n@@ -15748,45 +15742,54 @@ echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n # Process the option \"--enable-version-specific-runtime-libs\"\n echo $ac_n \"checking for --enable-version-specific-runtime-libs\"\"... $ac_c\" 1>&6\n-echo \"configure:15752: checking for --enable-version-specific-runtime-libs\" >&5\n+echo \"configure:15746: checking for --enable-version-specific-runtime-libs\" >&5\n # Check whether --enable-version-specific-runtime-libs or --disable-version-specific-runtime-libs was given.\n if test \"${enable_version_specific_runtime_libs+set}\" = set; then\n   enableval=\"$enable_version_specific_runtime_libs\"\n     version_specific_libs=yes\n # Need the gcc compiler version to know where to install libraries\n # and header files if --enable-version-specific-runtime-libs option\n # is selected.\n-gcc_tmp=`grep version_string ${srcdir}/../gcc/version.c | awk '{print }'`\n-gcc_num=`echo ${gcc_tmp} | sed 's/\\\"//g'`\n-gcc_version=$gcc_num\n-gxx_include_dir='$(libdir)/gcc-lib/$(target_alias)/$(gcc_version)/include/g++'\n-\n-\n-\n-if test x\"$version_specific_libs\" = x\"yes\"; then\n-  VERSION_SPECIFIC_LIBS_TRUE=\n-  VERSION_SPECIFIC_LIBS_FALSE='#'\n-else\n-  VERSION_SPECIFIC_LIBS_TRUE='#'\n-  VERSION_SPECIFIC_LIBS_FALSE=\n-fi\n+gcc_version_trigger=${srcdir}/../gcc/version.c\n+gcc_version_full=`grep version_string ${gcc_version_trigger} | sed -e 's/.*\\\"\\([^\\\"]*\\)\\\".*/\\1/'`\n+gcc_version=`echo ${gcc_version_full} | sed -e 's/\\([^ ]*\\) .*/\\1/'`\n+gxx_include_dir='$(libdir)/gcc-lib/$(target_alias)/'${gcc_version}/include/g++\n+glibcpp_toolexecdir='$(libdir)/gcc-lib/$(target_alias)'\n+glibcpp_toolexeclibdir='$(toolexecdir)/'${gcc_version}\n \n else\n   version_specific_libs=no\n fi\n \n echo \"$ac_t\"\"$version_specific_libs\" 1>&6\n \n-echo $ac_n \"checking for install location\"\"... $ac_c\" 1>&6\n-echo \"configure:15782: checking for install location\" >&5\n+# Default case for install directory for include files.\n if test x\"$version_specific_libs\" = x\"no\" \\\n    && test x\"$gxx_include_dir\"=x\"no\"; then\n-  gxx_include_dir=${prefix}/include/g++-${libstdcxx_interface}\n+  gxx_include_dir='$(prefix)'/include/g++-${libstdcxx_interface}\n+fi\n+\n+# Calculate glibcpp_toolexecdir, glibcpp_toolexeclibdir\n+# Install a library built with a cross compiler in tooldir, not libdir.\n+if test x\"$glibcpp_toolexecdir\" = x\"no\"; then \n+  if test x\"$with_cross_host\" = x\"yes\"; then\n+    glibcpp_toolexecdir='$(exec_prefix)/$(target_alias)'\n+    glibcpp_toolexeclibdir='$(toolexecdir)/lib$(MULTISUBDIR)'\n+  else\n+    glibcpp_toolexecdir='$(libdir)/gcc-lib/$(target_alias)'\n+    glibcpp_toolexeclibdir='$(libdir)$(MULTISUBDIR)'\n+  fi\n fi\n+\n+echo $ac_n \"checking for install location\"\"... $ac_c\" 1>&6\n+echo \"configure:15786: checking for install location\" >&5\n echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n \n \n+\n+\n+\n # Export all the include and flag information to makefiles.\n \n   # Root level of the include sources.\n@@ -16057,14 +16060,11 @@ s%@NULL_TARGET_TRUE@%$NULL_TARGET_TRUE%g\n s%@NULL_TARGET_FALSE@%$NULL_TARGET_FALSE%g\n s%@NATIVE_TRUE@%$NATIVE_TRUE%g\n s%@NATIVE_FALSE@%$NATIVE_FALSE%g\n-s%@USE_LIBDIR_TRUE@%$USE_LIBDIR_TRUE%g\n-s%@USE_LIBDIR_FALSE@%$USE_LIBDIR_FALSE%g\n s%@CANADIAN_TRUE@%$CANADIAN_TRUE%g\n s%@CANADIAN_FALSE@%$CANADIAN_FALSE%g\n-s%@gcc_version@%$gcc_version%g\n-s%@VERSION_SPECIFIC_LIBS_TRUE@%$VERSION_SPECIFIC_LIBS_TRUE%g\n-s%@VERSION_SPECIFIC_LIBS_FALSE@%$VERSION_SPECIFIC_LIBS_FALSE%g\n s%@gxx_include_dir@%$gxx_include_dir%g\n+s%@glibcpp_toolexecdir@%$glibcpp_toolexecdir%g\n+s%@glibcpp_toolexeclibdir@%$glibcpp_toolexeclibdir%g\n s%@GLIBCPP_INCLUDE_DIR@%$GLIBCPP_INCLUDE_DIR%g\n s%@TOPLEVEL_INCLUDES@%$TOPLEVEL_INCLUDES%g\n s%@LIBMATH_INCLUDES@%$LIBMATH_INCLUDES%g"}, {"sha": "8eef89f67512e04f1a7db3e4907da767b93b82a4", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -231,7 +231,6 @@ AC_LINK_FILES($ATOMICITYH/bits/atomicity.h, include/bits/atomicity.h)\n \n AM_CONDITIONAL(NULL_TARGET, test \"$NULL_TARGET\" = yes)\n AM_CONDITIONAL(NATIVE, test \"$NATIVE\" = yes || test \"$NULL_TARGET\" = yes)\n-AM_CONDITIONAL(USE_LIBDIR, test -z \"$with_cross_host\")\n AM_CONDITIONAL(CANADIAN, test \"$CANADIAN\" = yes)\n  \n AC_CACHE_SAVE"}, {"sha": "a8da096ae061d58c38084e475b7f1307cdc19b92", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -465,7 +465,7 @@ namespace std {\n       __streambuf_type* __sbin = this->rdbuf();\n       sentry __cerb(*this, false);\n       if (__sbout && __cerb)\n-\t__xtrct = _S_copy_streambufs(*this, __sbin, __sbout);\n+\t__xtrct = __copy_streambufs(*this, __sbin, __sbout);\n       if (!__sbout || !__xtrct)\n \tthis->setstate(ios_base::failbit);\n       return *this;"}, {"sha": "8d02641b580c315fd0c37fefb059d9e25584b8f3", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -715,14 +715,14 @@ namespace std\n       return __beg;\n     }\n \n-  // _S_fill is specialized for ostreambuf_iterator, random access iterator.\n+  // __pad is specialized for ostreambuf_iterator, random access iterator.\n   template <typename _CharT, typename _OutIter>\n     inline _OutIter\n-    _S_fill(_OutIter __s, _CharT __fill, int __padding);\n+    __pad(_OutIter __s, _CharT __fill, int __padding);\n \n   template <typename _CharT, typename _RaIter>\n     _RaIter\n-    _S_fill(_RaIter __s, _CharT __fill, int __padding,\n+    __pad(_RaIter __s, _CharT __fill, int __padding,\n             random_access_iterator_tag)\n     {\n       fill_n(__s, __fill);\n@@ -731,37 +731,37 @@ namespace std\n \n   template <typename _CharT, typename _OutIter, typename _Tag>\n     _OutIter\n-    _S_fill(_OutIter __s, _CharT __fill, int __padding, _Tag)\n+    __pad(_OutIter __s, _CharT __fill, int __padding, _Tag)\n     {\n       while (--__padding >= 0) { *__s = __fill; ++__s; }\n       return __s;\n     }\n \n   template <typename _CharT, typename _OutIter>\n     inline _OutIter\n-    _S_fill(_OutIter __s, _CharT __fill, int __padding)\n+    __pad(_OutIter __s, _CharT __fill, int __padding)\n     {\n-      return _S_fill(__s, __fill, __padding,\n+      return __pad(__s, __fill, __padding,\n                      iterator_traits<_OutIter>::iterator_category());\n     }\n \n   template <typename _CharT, typename _OutIter>\n     _OutIter\n-    _S_pad_numeric(_OutIter __s, ios_base::fmtflags /*__flags*/,\n-                   _CharT /*__fill*/, int /*__width*/, \n-\t\t   _CharT const* /*__first*/, _CharT const* /*__middle*/, \n-\t\t   _CharT const* /*__last*/)\n-    {\n+    __pad_numeric(_OutIter __s, ios_base::fmtflags /*__flags*/,\n+\t\t  _CharT /*__fill*/, int /*__width*/, \n+\t\t  _CharT const* /*__first*/, _CharT const* /*__middle*/, \n+\t\t  _CharT const* /*__last*/)\n+  {\n       // XXX Not currently done: non streambuf_iterator\n       return __s;\n     }\n \n   // Partial specialization for ostreambuf_iterator.\n   template <typename _CharT>   \n     ostreambuf_iterator<_CharT>\n-    _S_pad_numeric(ostreambuf_iterator<_CharT> __s, ios_base::fmtflags __flags,\n-                   _CharT __fill, int __width, _CharT const* __first,\n-                   _CharT const* __middle, _CharT const* __last)\n+    __pad_numeric(ostreambuf_iterator<_CharT> __s, ios_base::fmtflags __flags,\n+\t\t  _CharT __fill, int __width, _CharT const* __first,\n+\t\t  _CharT const* __middle, _CharT const* __last)\n     {\n       typedef ostreambuf_iterator<_CharT> \t__out_iter;\n       int __padding = __width - (__last - __first);\n@@ -776,7 +776,7 @@ namespace std\n         {\n           if (!__testfield)\n             {\n-              _S_fill(__s, __fill, __padding);\n+              __pad(__s, __fill, __padding);\n               __padding = 0;\n             }\n           copy(__first, __middle, __s);\n@@ -785,12 +785,12 @@ namespace std\n \n       if (__padding && __aflags != ios_base::left)\n         {\n-          _S_fill(__s2, __fill, __padding);\n+          __pad(__s2, __fill, __padding);\n           __padding = 0;\n         }\n       __out_iter __s3 = copy(__middle, __last, __s2);\n       if (__padding)\n-        _S_fill(__s3, __fill, __padding);\n+        __pad(__s3, __fill, __padding);\n       return __s3;\n     }\n \n@@ -805,7 +805,7 @@ namespace std\n       if ((__flags & ios_base::boolalpha) == 0)\n         {\n           unsigned long __uv = __v;\n-          return _S_format(__s, __io, __fill, false, __uv);\n+          return __output_integer(__s, __io, __fill, false, __uv);\n         }\n       else\n         {\n@@ -826,19 +826,19 @@ namespace std\n       return __s;\n     }\n \n-  // _S_group_digits inserts \"group separator\" characters into an array\n+  // __group_digits inserts \"group separator\" characters into an array\n   // of characters.  It's recursive, one iteration per group.  It moves\n   // the characters in the buffer this way: \"xxxx12345\" -> \"12,345xxx\".\n   // Call this only with __grouping != __grend.\n   template <typename _CharT>\n     _CharT*\n-    _S_group_digits(_CharT* __s, _CharT __grsep,  char const* __grouping,\n+    __group_digits(_CharT* __s, _CharT __grsep,  char const* __grouping,\n                     char const* __grend, _CharT const* __first,\n                     _CharT const* __last)\n     {\n       if (__last - __first > *__grouping)\n         {\n-          __s = _S_group_digits(__s,  __grsep,\n+          __s = __group_digits(__s,  __grsep,\n               (__grouping + 1 == __grend ? __grouping : __grouping + 1),\n               __grend, __first, __last - *__grouping);\n           __first = __last - *__grouping;\n@@ -854,7 +854,7 @@ namespace std\n \n   template <typename _CharT, typename _OutIter, typename _ValueT>\n     _OutIter\n-    _S_format(_OutIter __s, ios_base& __io, _CharT __fill, bool __neg,\n+    __output_integer(_OutIter __s, ios_base& __io, _CharT __fill, bool __neg,\n               _ValueT __v)\n     {\n       // Leave room for \"+/-,\" \"0x,\" and commas.\n@@ -909,17 +909,17 @@ namespace std\n         return copy(__front, __digits + _M_room, __s);\n \n       if (!__fmt->_M_use_grouping)\n-        return _S_pad_numeric(__s, __flags, __fill, __io.width(0),\n-                              __front, __sign_end, __digits + _M_room);\n+        return __pad_numeric(__s, __flags, __fill, __io.width(0),\n+\t\t\t     __front, __sign_end, __digits + _M_room);\n \n       _CharT* __p = __digits;\n       while (__front < __sign_end)\n         *__p++ = *__front++;\n       const char* __gr = __fmt->_M_grouping.data();\n-      __front = _S_group_digits(__p, __fmt->_M_thousands_sep, __gr,\n+      __front = __group_digits(__p, __fmt->_M_thousands_sep, __gr,\n         __gr + __fmt->_M_grouping.size(), __sign_end, __digits + _M_room);\n-      return _S_pad_numeric(__s, __flags, __fill, __io.width(0),\n-                            __digits, __p, __front);\n+      return __pad_numeric(__s, __flags, __fill, __io.width(0),\n+\t\t\t   __digits, __p, __front);\n     }\n \n   template <typename _CharT, typename _OutIter>\n@@ -934,15 +934,15 @@ namespace std\n           __neg = true;\n           __uv = -__uv;\n         }\n-      return _S_format(__s, __io, __fill, __neg, __uv);\n+      return __output_integer(__s, __io, __fill, __neg, __uv);\n     }\n \n   template <typename _CharT, typename _OutIter>\n     _OutIter\n     num_put<_CharT, _OutIter>::\n     do_put(iter_type __s, ios_base& __io, char_type __fill,\n            unsigned long __v) const\n-    { return _S_format(__s, __io, __fill, false, __v); }\n+    { return __output_integer(__s, __io, __fill, false, __v); }\n \n #ifdef _GLIBCPP_USE_LONG_LONG\n   template <typename _CharT, typename _OutIter>\n@@ -957,21 +957,21 @@ namespace std\n           __neg = true;\n           __uv = -__uv;\n         }\n-      return _S_format(__s, __b, __fill, __neg, __uv);\n+      return __output_integer(__s, __b, __fill, __neg, __uv);\n     }\n \n   template <typename _CharT, typename _OutIter>\n     _OutIter\n     num_put<_CharT, _OutIter>::\n     do_put(iter_type __s, ios_base& __io, char_type __fill,\n            unsigned long long __v) const\n-    { return _S_format(__s, __io, __fill, false, __v); }\n+    { return __output_integer(__s, __io, __fill, false, __v); }\n #endif\n \n   // Generic helper function\n   template<typename _CharT, typename _OutIter>\n     _OutIter\n-    _S_output_float(_OutIter __s, ios_base& __io, _CharT __fill,\n+    __output_float(_OutIter __s, ios_base& __io, _CharT __fill,\n                     const char* __sptr, size_t __slen)\n     {\n       // XXX Not currently done: non streambuf_iterator\n@@ -981,7 +981,7 @@ namespace std\n   // Partial specialization for ostreambuf_iterator.\n   template<typename _CharT>\n     ostreambuf_iterator<_CharT>\n-    _S_output_float(ostreambuf_iterator<_CharT> __s, ios_base& __io, \n+    __output_float(ostreambuf_iterator<_CharT> __s, ios_base& __io, \n \t\t    _CharT __fill, const char* __sptr, size_t __slen)\n     {\n       size_t __padding = __io.width() > streamsize(__slen) ?\n@@ -1000,12 +1000,12 @@ namespace std\n              ++__s;\n              ++__sptr;\n            }\n-         __s = _S_fill(__s, __fill, __padding);\n+         __s = __pad(__s, __fill, __padding);\n          __padding = 0;\n        }\n       else if (__adjfield != ios_base::left)\n         {\n-          __s = _S_fill(__s, __fill, __padding);\n+          __s = __pad(__s, __fill, __padding);\n           __padding = 0;\n         }\n       // the \"C\" locale decimal character\n@@ -1022,14 +1022,14 @@ namespace std\n        }\n       // [22.2.2.2.2.19] Table 61\n       if (__padding)\n-        _S_fill(__s, __fill, __padding);\n+        __pad(__s, __fill, __padding);\n       __io.width(0);\n       return __s;\n     }\n \n   bool\n-  _S_build_float_format(ios_base& __io, char* __fptr, char __modifier,\n-                        streamsize __prec);\n+  __build_float_format(ios_base& __io, char* __fptr, char __modifier,\n+\t\t       streamsize __prec);\n \n   template <typename _CharT, typename _OutIter>\n     _OutIter\n@@ -1046,12 +1046,12 @@ namespace std\n       size_t __slen;\n       // Long enough for the max format spec.\n       char __fbuf[16];\n-      if (_S_build_float_format(__io, __fbuf, 0, __prec))\n+      if (__build_float_format(__io, __fbuf, 0, __prec))\n         __slen = sprintf(__sbuf, __fbuf, __prec, __v);\n       else\n         __slen = sprintf(__sbuf, __fbuf, __v);\n       // [22.2.2.2.2] Stages 2-4.\n-      return _S_output_float(__s, __io, __fill, __sbuf, __slen);\n+      return __output_float(__s, __io, __fill, __sbuf, __slen);\n     }\n \n   template <typename _CharT, typename _OutIter>\n@@ -1071,12 +1071,12 @@ namespace std\n       // Long enough for the max format spec.\n       char __fbuf[16];\n       // 'L' as per [22.2.2.2.2] Table 59\n-      if ( _S_build_float_format(__io, __fbuf, 'L', __prec))\n+      if (__build_float_format(__io, __fbuf, 'L', __prec))\n         __slen = sprintf(__sbuf, __fbuf, __prec, __v);\n       else\n         __slen = sprintf(__sbuf, __fbuf, __v);\n       // [22.2.2.2.2] Stages 2-4\n-      return _S_output_float(__s, __io, __fill, __sbuf, __slen);\n+      return __output_float(__s, __io, __fill, __sbuf, __slen);\n     }\n \n   template <typename _CharT, typename _OutIter>\n@@ -1091,7 +1091,7 @@ namespace std\n                              | ios_base::uppercase | ios_base::internal);\n       __io.flags(__fmt & __fmtmask | (ios_base::hex | ios_base::showbase));\n       try {\n-        _OutIter __s2 = _S_format(__s, __io, __fill, false,\n+        _OutIter __s2 = __output_integer(__s, __io, __fill, false,\n                                   reinterpret_cast<unsigned long>(__v));\n         __io.flags(__fmt);\n         return __s2;"}, {"sha": "b6b27bfa8aab6da95ab47c202120b779fdb7591d", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -309,7 +309,7 @@ namespace std {\n       __streambuf_type* __sbout = this->rdbuf();\n       sentry __cerb(*this);\n       if (__sbin && __cerb)\n-\t__xtrct = _S_copy_streambufs(*this, __sbin, __sbout);\n+\t__xtrct = __copy_streambufs(*this, __sbin, __sbout);\n       if (!__sbin || !__xtrct)\n \tthis->setstate(ios_base::failbit);\n       return *this;\n@@ -401,16 +401,16 @@ namespace std {\n   // 27.6.2.5.4 Character inserters\n \n   // Construct correctly padded string, as per 22.2.2.2.2\n-  // Similar in theory to _S_pad_numeric, from num_put, but it doesn't\n+  // Similar in theory to __pad_numeric, from num_put, but it doesn't\n   // use _S_fill: perhaps it should.\n   // Assumes \n   // __newlen > __oldlen\n   // __news is allocated for __newlen size\n   template<typename _CharT, typename _Traits>\n     void\n-    _S_pad_char(basic_ios<_CharT, _Traits>& __ios, \n-\t\t_CharT* __news, const _CharT* __olds,\n-\t\tconst streamsize __newlen, const streamsize __oldlen)\n+    __pad_char(basic_ios<_CharT, _Traits>& __ios, \n+\t       _CharT* __news, const _CharT* __olds,\n+\t       const streamsize __newlen, const streamsize __oldlen)\n     {\n       typedef _CharT\tchar_type;\n       typedef _Traits\ttraits_type;\n@@ -501,7 +501,7 @@ namespace std {\n \t    streamsize __len = 1;\n \t    if (__w > __len)\n \t      {\n-\t\t_S_pad_char(__out, __pads, &__c, __w, __len);\n+\t\t__pad_char(__out, __pads, &__c, __w, __len);\n \t\t__len = __w;\n \t      }\n \t    __out.write(__pads, __len);\n@@ -534,7 +534,7 @@ namespace std {\n \t    streamsize __len = 1;\n \t    if (__w > __len)\n \t      {\n-\t\t_S_pad_char(__out, __pads, &__c, __w, __len);\n+\t\t__pad_char(__out, __pads, &__c, __w, __len);\n \t\t__len = __w;\n \t      }\n \t    __out.write(__pads, __len);\n@@ -565,7 +565,7 @@ namespace std {\n \t    streamsize __len = static_cast<streamsize>(_Traits::length(__s));\n \t    if (__w > __len)\n \t      {\n-\t\t_S_pad_char(__out, __pads, __s, __w, __len);\n+\t\t__pad_char(__out, __pads, __s, __w, __len);\n \t\t__s = __pads;\n \t\t__len = __w;\n \t      }\n@@ -608,7 +608,7 @@ namespace std {\n \n \t    if (__w > __len)\n \t      {\n-\t\t_S_pad_char(__out, __pads, __ws, __w, __len);\n+\t\t__pad_char(__out, __pads, __ws, __w, __len);\n \t\t__str = __pads;\n \t\t__len = __w;\n \t      }\n@@ -641,7 +641,7 @@ namespace std {\n \t    streamsize __len = static_cast<streamsize>(_Traits::length(__s));\n \t    if (__w > __len)\n \t      {\n-\t\t_S_pad_char(__out, __pads, __s, __w, __len);\n+\t\t__pad_char(__out, __pads, __s, __w, __len);\n \t\t__s = __pads;\n \t\t__len = __w;\n \t      }"}, {"sha": "2e3c6dc1d2b4834ae69520cd87fd9471d21b245f", "filename": "libstdc++-v3/include/bits/std_streambuf.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -44,9 +44,9 @@ namespace std {\n \n   template<typename _CharT, typename _Traits>\n     streamsize\n-    _S_copy_streambufs(basic_ios<_CharT, _Traits>& _ios,\n-\t\t       basic_streambuf<_CharT, _Traits>* __sbin,\n-\t\t       basic_streambuf<_CharT, _Traits>* __sbout);\n+    __copy_streambufs(basic_ios<_CharT, _Traits>& _ios,\n+\t\t      basic_streambuf<_CharT, _Traits>* __sbin,\n+\t\t      basic_streambuf<_CharT, _Traits>* __sbout);\n   \n   // 27.5.2 Template class basic_streambuf<_CharT, _Traits>\n   template<typename _CharT, typename _Traits>\n@@ -71,8 +71,8 @@ namespace std {\n       friend class ostreambuf_iterator<char_type, traits_type>;\n \n       friend streamsize\n-      _S_copy_streambufs<>(basic_ios<char_type, traits_type>& __ios,\n-\t\t\t   __streambuf_type* __sbin,__streambuf_type* __sbout);\n+      __copy_streambufs<>(basic_ios<char_type, traits_type>& __ios,\n+\t\t\t  __streambuf_type* __sbin,__streambuf_type* __sbout);\n       \n     protected:\n "}, {"sha": "851115086996f72b420ffd9841e7f7ae8ed603ba", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -183,10 +183,10 @@ namespace std {\n   // necessary.\n   template<typename _CharT, typename _Traits>\n     streamsize\n-    _S_copy_streambufs(basic_ios<_CharT, _Traits>& __ios,\n-\t\t       basic_streambuf<_CharT, _Traits>* __sbin,\n-\t\t       basic_streambuf<_CharT, _Traits>* __sbout) \n-    {\n+    __copy_streambufs(basic_ios<_CharT, _Traits>& __ios,\n+\t\t      basic_streambuf<_CharT, _Traits>* __sbin,\n+\t\t      basic_streambuf<_CharT, _Traits>* __sbout) \n+  {\n       typedef typename _Traits::int_type\tint_type;\n \n       streamsize __ret = 0;"}, {"sha": "cf94e053aeada263c5a25815a26a7af0675f1342", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -102,8 +102,9 @@ WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n-gcc_version = @gcc_version@\n glibcpp_basedir = @glibcpp_basedir@\n+glibcpp_toolexecdir = @glibcpp_toolexecdir@\n+glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@"}, {"sha": "d6c8cd85b38b6d7cbbb29b37e3fcc5e33368e8c8", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -102,8 +102,9 @@ WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n-gcc_version = @gcc_version@\n glibcpp_basedir = @glibcpp_basedir@\n+glibcpp_toolexecdir = @glibcpp_toolexecdir@\n+glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@"}, {"sha": "d80defd1674c9086a6c9798ed49300a8b9fc388e", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -27,19 +27,8 @@ MAINT_CHARSET = latin1\n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n # Cross compiler and multilib support.\n-# Install a library built with a cross compiler in tooldir, not libdir.\n-if USE_LIBDIR\n-if VERSION_SPECIFIC_LIBS\n-gcc_version = @gcc_version@\n-toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n-toolexeclibdir = $(toolexecdir)/$(gcc_version)\n-else\n-toolexeclibdir = $(libdir)$(MULTISUBDIR)\n-endif\n-else\n-toolexecdir = $(exec_prefix)/$(target_alias)\n-toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n-endif\n+toolexecdir = @glibcpp_toolexecdir@\n+toolexeclibdir = @glibcpp_toolexeclibdir@\n \n \n # Need this library to both be part of libstdc++.a, and installed"}, {"sha": "5b8d2f28c9e6ce89cc39302eaf30db06c97dcdbd", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -100,6 +100,8 @@ WFMT_FLAGS = @WFMT_FLAGS@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n glibcpp_basedir = @glibcpp_basedir@\n+glibcpp_toolexecdir = @glibcpp_toolexecdir@\n+glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n@@ -112,13 +114,8 @@ MAINT_CHARSET = latin1\n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n # Cross compiler and multilib support.\n-# Install a library built with a cross compiler in tooldir, not libdir.\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @gcc_version@\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n-@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = $(toolexecdir)/$(gcc_version)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n+toolexecdir = @glibcpp_toolexecdir@\n+toolexeclibdir = @glibcpp_toolexeclibdir@\n \n # Need this library to both be part of libstdc++.a, and installed\n # separately too."}, {"sha": "b74fc9d8b78269a086fff27297f735777bbd4078", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -21,28 +21,16 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.68 2001/02/06 06:32:01 bkoz Exp $\n+## $Id: Makefile.am,v 1.69 2001/02/06 06:36:18 mmitchel Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n # Cross compiler and multilib support.\n-# Install a library built with a cross compiler in tooldir, not libdir.\n-if USE_LIBDIR\n-if VERSION_SPECIFIC_LIBS\n-gcc_version = @gcc_version@\n-toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n-toolexeclibdir = $(toolexecdir)/$(gcc_version)\n-else\n-toolexeclibdir = $(libdir)$(MULTISUBDIR)\n-endif\n-else\n-toolexecdir = $(exec_prefix)/$(target_alias)\n-toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n-endif\n-\n+toolexecdir = @glibcpp_toolexecdir@\n+toolexeclibdir = @glibcpp_toolexeclibdir@\n toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n \n@@ -293,19 +281,6 @@ myinstallheaders:\n \tfi;\n \n \n-# We have to handle misc-inst.cc and locale-inst.cc in a special way\n-# since we cannot instantiate all classes due to missing definitions\n-# for things like vptrs, type_info bits, etc. when using\n-# -fno-implicit-templates.\n-misc-inst.o: misc-inst.cc\n-\t$(CXXCOMPILE) -c $<\n-misc-inst.lo: misc-inst.cc\n-\t$(LTCXXCOMPILE) -c $<\n-locale-inst.o: locale-inst.cc\n-\t$(CXXCOMPILE) -c $<\n-locale-inst.lo: locale-inst.cc\n-\t$(LTCXXCOMPILE) -c $<\n-\n # Use special rules for the deprecated source files so that they find\n # deprecated include files.\n strstream.lo: strstream.cc"}, {"sha": "5e1fc2b24c2dbe11f16d23b9f84c39183b9a6e4b", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -100,6 +100,8 @@ WFMT_FLAGS = @WFMT_FLAGS@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n glibcpp_basedir = @glibcpp_basedir@\n+glibcpp_toolexecdir = @glibcpp_toolexecdir@\n+glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n libio_la = @libio_la@\n@@ -111,14 +113,8 @@ MAINT_CHARSET = latin1\n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n # Cross compiler and multilib support.\n-# Install a library built with a cross compiler in tooldir, not libdir.\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @gcc_version@\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n-@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = $(toolexecdir)/$(gcc_version)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n-\n+toolexecdir = @glibcpp_toolexecdir@\n+toolexeclibdir = @glibcpp_toolexeclibdir@\n toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n \n@@ -562,19 +558,6 @@ myinstallheaders:\n \tdone; \\\n \tfi;\n \n-# We have to handle misc-inst.cc and locale-inst.cc in a special way\n-# since we cannot instantiate all classes due to missing definitions\n-# for things like vptrs, type_info bits, etc. when using\n-# -fno-implicit-templates.\n-misc-inst.o: misc-inst.cc\n-\t$(CXXCOMPILE) -c $<\n-misc-inst.lo: misc-inst.cc\n-\t$(LTCXXCOMPILE) -c $<\n-locale-inst.o: locale-inst.cc\n-\t$(CXXCOMPILE) -c $<\n-locale-inst.lo: locale-inst.cc\n-\t$(LTCXXCOMPILE) -c $<\n-\n # Use special rules for the deprecated source files so that they find\n # deprecated include files.\n strstream.lo: strstream.cc"}, {"sha": "3e53caf46165944c79f3e25adf0768f9045e1773", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -136,23 +136,35 @@ namespace std {\n   // use_facet\n   template \n     const num_put<char, obuf_iterator >& \n-    use_facet<num_put<char, obuf_iterator> >(const locale &);\n+    use_facet<num_put<char, obuf_iterator> >(const locale&);\n   template \n     const num_get<char, ibuf_iterator >& \n-    use_facet<num_get<char, ibuf_iterator> >(const locale &);\n+    use_facet<num_get<char, ibuf_iterator> >(const locale&);\n   template\n     const codecvt<char, char, mbstate_t>& \n     use_facet<codecvt<char, char, mbstate_t> >(const locale&);\n+  template\n+    const numpunct<char>& \n+    use_facet<numpunct<char> >(const locale&);\n+  template\n+    const collate<char>& \n+    use_facet<collate<char> >(const locale&);\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template \n     const num_put<wchar_t, wobuf_iterator>& \n-    use_facet<num_put<wchar_t, wobuf_iterator> >(const locale &);\n+    use_facet<num_put<wchar_t, wobuf_iterator> >(const locale&);\n   template \n     const num_get<wchar_t, wibuf_iterator>& \n-    use_facet<num_get<wchar_t, wibuf_iterator> >(const locale &);\n+    use_facet<num_get<wchar_t, wibuf_iterator> >(const locale&);\n   template\n     const codecvt<wchar_t, char, mbstate_t>& \n-    use_facet<codecvt<wchar_t, char, mbstate_t> >(locale const &);\n+    use_facet<codecvt<wchar_t, char, mbstate_t> >(locale const&);\n+  template\n+    const numpunct<wchar_t>& \n+    use_facet<numpunct<wchar_t> >(const locale&);\n+  template\n+    const collate<wchar_t>& \n+    use_facet<collate<wchar_t> >(const locale&);\n #endif\n \n   // has_facet\n@@ -211,29 +223,29 @@ namespace std {\n \n   template\n     ostreambuf_iter\n-    _S_fill<char, ostreambuf_iter, output_iterator_tag>\n+    __pad<char, ostreambuf_iter, output_iterator_tag>\n     (ostreambuf_iter, char, int, output_iterator_tag);\n \n   template \n     ostreambuf_iter\n-    _S_pad_numeric<char, ostreambuf_iter>\n+    __pad_numeric<char, ostreambuf_iter>\n     (ostreambuf_iter, ios_base::fmtflags, char, int, char const*, char const*, \n      char const*);\n \n   template\n     char*\n-    _S_group_digits<char>(char*, char, char const*, char const*, \n-\t\t\t  char const*, char const*);\n+    __group_digits<char>(char*, char, char const*, char const*, \n+\t\t\t char const*, char const*);\n \n   template \n     ostreambuf_iter\n-    _S_format<char, ostreambuf_iter, unsigned long>\n+    __output_integer<char, ostreambuf_iter, unsigned long>\n     (ostreambuf_iter, ios_base &, char, bool, unsigned long);\n \n #ifdef _GLIBCPP_USE_LONG_LONG\n   template\n     ostreambuf_iter\n-    _S_format<char, ostreambuf_iter, unsigned long long>\n+    __output_integer<char, ostreambuf_iter, unsigned long long>\n     (ostreambuf_iter, ios_base &, char, bool, unsigned long long);\n #endif\n \n@@ -246,29 +258,29 @@ namespace std {\n \n   template\n     wostreambuf_iter\n-    _S_fill<wchar_t, wostreambuf_iter, output_iterator_tag>\n+    __pad<wchar_t, wostreambuf_iter, output_iterator_tag>\n     (wostreambuf_iter, wchar_t, int, output_iterator_tag);\n \n   template \n     wostreambuf_iter\n-    _S_pad_numeric<wchar_t, wostreambuf_iter>\n-    (wostreambuf_iter, ios_base::fmtflags, wchar_t __fill, int, wchar_t const*, \n+    __pad_numeric<wchar_t, wostreambuf_iter>\n+    (wostreambuf_iter, ios_base::fmtflags, wchar_t __fill, int, wchar_t const*,\n      wchar_t const*, wchar_t const*);\n \n   template\n     wchar_t*\n-    _S_group_digits<wchar_t>(wchar_t*, wchar_t, char const*, char const*, \n-\t\t\t     wchar_t const*, wchar_t const*);\n+    __group_digits<wchar_t>(wchar_t*, wchar_t, char const*, char const*, \n+\t\t\t    wchar_t const*, wchar_t const*);\n \n   template \n     wostreambuf_iter\n-    _S_format<wchar_t, wostreambuf_iter, unsigned long>\n+    __output_integer<wchar_t, wostreambuf_iter, unsigned long>\n     (wostreambuf_iter, ios_base &, wchar_t, bool, unsigned long);\n \n #ifdef _GLIBCPP_USE_LONG_LONG\n   template\n     wostreambuf_iter\n-    _S_format<wchar_t, wostreambuf_iter, unsigned long long>\n+    __output_integer<wchar_t, wostreambuf_iter, unsigned long long>\n     (wostreambuf_iter, ios_base &, wchar_t, bool, unsigned long long);\n #endif\n #endif // _GLIBCPP_USE_WCHAR_T\n@@ -283,10 +295,6 @@ namespace std {\n     fill_n<locale::facet**, unsigned long, locale::facet*>\n     (locale::facet**, unsigned long, locale::facet* const&);\n \n-  template\n-    const numpunct<char>& \n-    use_facet(const locale&);\n-\n   template\n     void __sink_unused_warning<locale::facet*>(locale::facet*);\n \n@@ -304,9 +312,5 @@ namespace std {\n \t  __normal_iterator<locale::facet**, \n \t                    vector<locale::facet*> >,\n \t  locale::facet* const&);\n-\n-  template\n-    const collate<char>&\n-    use_facet<collate<char> >(const locale&);\n } //std\n "}, {"sha": "5b276a2c931917ba69a88a7ea599917ec6dfc8fb", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -981,8 +981,8 @@ namespace std\n   // implementation follows the C++ standard fairly directly as\n   // outlined in 22.2.2.2 [lib.locale.num.put]\n   bool\n-  _S_build_float_format(ios_base& __io, char* __fptr, char __modifier,\n-                        streamsize __prec)\n+  __build_float_format(ios_base& __io, char* __fptr, char __modifier,\n+\t\t       streamsize __prec)\n   {\n     bool __incl_prec = false;\n     ios_base::fmtflags __flags = __io.flags();"}, {"sha": "eb3f5efd0b9d9800032969844915bc5ee459e4e2", "filename": "libstdc++-v3/src/misc-inst.cc", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ed2836928b9da4d6edfd3711028ff645ed257d/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc?ref=72ed2836928b9da4d6edfd3711028ff645ed257d", "patch": "@@ -1,6 +1,6 @@\n // Explicit instantiation file.\n \n-// Copyright (C) 1997-1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -262,47 +262,47 @@ namespace std {\n \n   template\n     void \n-    _S_pad_char (basic_ios<char>&, char*, const char*,\n-\t\t const streamsize, const streamsize);\n+    __pad_char(basic_ios<char>&, char*, const char*,\n+\t\tconst streamsize, const streamsize);\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template\n     void \n-    _S_pad_char (basic_ios<wchar_t>&, wchar_t*, const wchar_t*,\n-\t\t const streamsize, const streamsize);\n+    __pad_char(basic_ios<wchar_t>&, wchar_t*, const wchar_t*,\n+\t\tconst streamsize, const streamsize);\n #endif\n \n   template\n     ostreambuf_iterator<char>\n-    _S_pad_numeric (ostreambuf_iterator<char>, _Ios_Fmtflags, char, int,\n-\t\t    const char*, const char*, const char*);\n+    __pad_numeric(ostreambuf_iterator<char>, _Ios_Fmtflags, char, int,\n+\t\t  const char*, const char*, const char*);\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template\n     ostreambuf_iterator<wchar_t>\n-    _S_pad_numeric (ostreambuf_iterator<wchar_t>, _Ios_Fmtflags, wchar_t, int,\n-\t\t    const wchar_t*, const wchar_t*, const wchar_t*);\n+    __pad_numeric(ostreambuf_iterator<wchar_t>, _Ios_Fmtflags, wchar_t, int,\n+\t\t  const wchar_t*, const wchar_t*, const wchar_t*);\n #endif\n \n   template\n     ostreambuf_iterator<char>\n-    _S_output_float (ostreambuf_iterator<char>, ios_base&, char, \n-\t\t     const char*, size_t);\n+    __output_float(ostreambuf_iterator<char>, ios_base&, char, \n+\t\t   const char*, size_t);\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template\n     ostreambuf_iterator<wchar_t>\n-    _S_output_float (ostreambuf_iterator<wchar_t>, ios_base&, wchar_t, \n-\t\t     const wchar_t*, size_t);\n+    __output_float(ostreambuf_iterator<wchar_t>, ios_base&, wchar_t, \n+\t\t   const char*, size_t);\n #endif\n \n   template\n     streamsize\n-    _S_copy_streambufs(basic_ios<char>&, \n-\t\t       basic_streambuf<char>*,\n-\t\t       basic_streambuf<char>*); \n+    __copy_streambufs(basic_ios<char>&, \n+\t\t      basic_streambuf<char>*,\n+\t\t      basic_streambuf<char>*); \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template\n     int\n-    _S_copy_streambufs(basic_ios<wchar_t>&, \n-\t\t       basic_streambuf<wchar_t>*,\n-\t\t       basic_streambuf<wchar_t>*); \n+    __copy_streambufs(basic_ios<wchar_t>&, \n+\t\t      basic_streambuf<wchar_t>*,\n+\t\t      basic_streambuf<wchar_t>*); \n #endif\n } //std"}]}