{"sha": "00ca8311cfa7841f9d492b84a995dbc2b06cc368", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBjYTgzMTFjZmE3ODQxZjlkNDkyYjg0YTk5NWRiYzJiMDZjYzM2OA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2004-07-16T08:12:11Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2004-07-16T08:12:11Z"}, "message": "genautomata.c (add_vect): Speedup by using integers as bit-vectors for walking through the comb_vect and...\n\n        * genautomata.c (add_vect): Speedup by using integers as\n        bit-vectors for walking through the comb_vect and finding\n        a match.\n\nFrom-SVN: r84811", "tree": {"sha": "443187ef43b89db15e6b0005bea5184eefc5f505", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/443187ef43b89db15e6b0005bea5184eefc5f505"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00ca8311cfa7841f9d492b84a995dbc2b06cc368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00ca8311cfa7841f9d492b84a995dbc2b06cc368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00ca8311cfa7841f9d492b84a995dbc2b06cc368", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00ca8311cfa7841f9d492b84a995dbc2b06cc368/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd7eccc44ea8e4e2947f629654c474d399bcca30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7eccc44ea8e4e2947f629654c474d399bcca30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd7eccc44ea8e4e2947f629654c474d399bcca30"}], "stats": {"total": 91, "additions": 76, "deletions": 15}, "files": [{"sha": "532695d03dd130c5a38e69c3a29e4fe76af936b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ca8311cfa7841f9d492b84a995dbc2b06cc368/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ca8311cfa7841f9d492b84a995dbc2b06cc368/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00ca8311cfa7841f9d492b84a995dbc2b06cc368", "patch": "@@ -1,3 +1,9 @@\n+2004-07-16  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* genautomata.c (add_vect): Speedup by using integers as\n+\tbit-vectors for walking through the comb_vect and finding\n+\ta match.\n+\n 2004-07-16  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (mips_zero_if_equal): Only use XORs if the second"}, {"sha": "292a2de14006d37b5a70996e37afe58b6366f478", "filename": "gcc/genautomata.c", "status": "modified", "additions": 70, "deletions": 15, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ca8311cfa7841f9d492b84a995dbc2b06cc368/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ca8311cfa7841f9d492b84a995dbc2b06cc368/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=00ca8311cfa7841f9d492b84a995dbc2b06cc368", "patch": "@@ -7578,6 +7578,7 @@ add_vect (state_ainsn_table_t tab, int vect_num, vect_el_t *vect,\n   int no_state_value;\n   vect_el_t vect_el;\n   int i;\n+  unsigned long vect_mask, comb_vect_mask;\n \n   if (vect_length == 0)\n     abort ();\n@@ -7599,23 +7600,77 @@ add_vect (state_ainsn_table_t tab, int vect_num, vect_el_t *vect,\n        first_unempty_vect_index++)\n     if (vect [first_unempty_vect_index] != undefined_vect_el_value)\n       break;\n+\n   /* Search for the place in comb vect for the inserted vect.  */\n-  for (comb_vect_index = 0;\n-       comb_vect_index < comb_vect_els_num;\n-       comb_vect_index++)\n-    {\n-      for (vect_index = first_unempty_vect_index;\n-           vect_index < vect_length\n-             && vect_index + comb_vect_index < comb_vect_els_num;\n-           vect_index++)\n-        if (vect [vect_index] != undefined_vect_el_value\n-            && (comb_vect_start [vect_index + comb_vect_index]\n-\t\t!= undefined_vect_el_value))\n-          break;\n-      if (vect_index >= vect_length\n-          || vect_index + comb_vect_index >= comb_vect_els_num)\n-        break;\n+\n+  /* Slow case.  */\n+  if (vect_length - first_unempty_vect_index >= SIZEOF_LONG * CHAR_BIT)\n+    {\n+      for (comb_vect_index = 0;\n+           comb_vect_index < comb_vect_els_num;\n+           comb_vect_index++)\n+        {\n+          for (vect_index = first_unempty_vect_index;\n+               vect_index < vect_length\n+               && vect_index + comb_vect_index < comb_vect_els_num;\n+               vect_index++)\n+            if (vect [vect_index] != undefined_vect_el_value\n+                && (comb_vect_start [vect_index + comb_vect_index]\n+\t\t    != undefined_vect_el_value))\n+              break;\n+          if (vect_index >= vect_length\n+              || vect_index + comb_vect_index >= comb_vect_els_num)\n+            break;\n+        }\n+      goto found;\n+    }\n+\n+  /* Fast case.  */\n+  vect_mask = 0;\n+  for (vect_index = first_unempty_vect_index;\n+       vect_index < vect_length;\n+       vect_index++)\n+    {\n+      vect_mask = vect_mask << 1;\n+      if (vect [vect_index] != undefined_vect_el_value)\n+\tvect_mask |= 1;\n     }\n+\n+  /* Search for the place in comb vect for the inserted vect.  */\n+  comb_vect_index = 0;\n+  if (comb_vect_els_num == 0)\n+    goto found;\n+\n+  comb_vect_mask = 0;\n+  for (vect_index = first_unempty_vect_index;\n+       vect_index < vect_length && vect_index < comb_vect_els_num;\n+       vect_index++)\n+    {\n+      comb_vect_mask <<= 1;\n+      if (vect_index + comb_vect_index < comb_vect_els_num\n+\t  && comb_vect_start [vect_index + comb_vect_index]\n+\t     != undefined_vect_el_value)\n+\tcomb_vect_mask |= 1;\n+    }\n+  if ((vect_mask & comb_vect_mask) == 0)\n+    goto found;\n+\n+  for (comb_vect_index = 1, i = vect_length; i < comb_vect_els_num;\n+       comb_vect_index++, i++)\n+    {\n+      comb_vect_mask = (comb_vect_mask << 1) | 1;\n+      comb_vect_mask ^= comb_vect_start [i] == undefined_vect_el_value;\n+      if ((vect_mask & comb_vect_mask) == 0)\n+\tgoto found;\n+    }\n+  for ( ; comb_vect_index < comb_vect_els_num; comb_vect_index++)\n+    {\n+      comb_vect_mask <<= 1;\n+      if ((vect_mask & comb_vect_mask) == 0)\n+\tgoto found;\n+    }\n+\n+found:\n   /* Slot was found.  */\n   additional_els_num = comb_vect_index + real_vect_length - comb_vect_els_num;\n   if (additional_els_num < 0)"}]}