{"sha": "de3e5aae6c4b540e808c822c1e878b0a3304d09c", "node_id": "C_kwDOANBUbNoAKGRlM2U1YWFlNmM0YjU0MGU4MDhjODIyYzFlODc4YjBhMzMwNGQwOWM", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-12-01T19:58:40Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-12-01T19:58:40Z"}, "message": "Final value replacement improvements for until-wrap loops.\n\nThis middle-end patch is inspired by the Richard Beiner's until-wrap\nloop example in PR tree-optimization/101145.\n\nunsigned foo(unsigned val, unsigned start)\n{\n  unsigned cnt = 0;\n  for (unsigned i = start; i > val; ++i)\n    cnt++;\n  return cnt;\n}\n\nFor this loop, the tree optimizers currently generate:\n\nunsigned int foo (unsigned int val, unsigned int start)\n{\n  unsigned int cnt;\n  unsigned int _1;\n  unsigned int _5;\n\n  <bb 2> [local count: 118111600]:\n  if (start_3(D) > val_4(D))\n    goto <bb 3>; [89.00%]\n  else\n    goto <bb 4>; [11.00%]\n\n  <bb 3> [local count: 105119324]:\n  _1 = start_3(D) + 1;\n  _5 = -start_3(D);\n  cnt_2 = _1 > val_4(D) ? _5 : 1;\n\n  <bb 4> [local count: 118111600]:\n  # cnt_11 = PHI <cnt_2(3), 0(2)>\n  return cnt_11;\n}\n\nor perhaps slightly easier to read:\n\n  if (start > val) {\n    cnt = (start+1) > val ? -start : 1;\n  } else cnt = 0;\n\nIn this snippet, if we know start > val, then (start+1) > val\nunless start+1 overflows, i.e. (start+1) == 0 and start == ~0.\nWe can use this (loop header) context to simplify the ternary\nexpression to \"(start != -1) ? -start : 1\", which with a little\nhelp from match.pd can be folded to -start.  Hence the optimal\nfinal value replacement should be:\n\n  cnt = (start > val) ? -start : 0;\n\nOr as now generated by this patch:\n\nunsigned int foo (unsigned int val, unsigned int start)\n{\n  unsigned int cnt;\n\n  <bb 2> [local count: 118111600]:\n  if (start_3(D) > val_4(D))\n    goto <bb 3>; [89.00%]\n  else\n    goto <bb 4>; [11.00%]\n\n  <bb 3> [local count: 105119324]:\n  cnt_2 = -start_3(D);\n\n  <bb 4> [local count: 118111600]:\n  # cnt_11 = PHI <cnt_2(3), 0(2)>\n  return cnt_11;\n}\n\nWe can also improve until-wrap loops that don't have a (suitable) loop\nheader, as determined by simplify_using_initial_conditions.\n\nunsigned bar(unsigned val, unsigned start)\n{\n  unsigned cnt = 0;\n  unsigned i = start;\n  do {\n    cnt++;\n    i++;\n  } while (i > val);\n  return cnt;\n}\n\nwhich is currently optimized to:\n\nunsigned int foo (unsigned int val, unsigned int start)\n{\n  unsigned int cnt;\n  unsigned int _9;\n  unsigned int _10;\n\n  <bb 2> [local count: 118111600]:\n  _9 = start_4(D) + 1;\n  _10 = -start_4(D);\n  cnt_3 = val_7(D) < _9 ? _10 : 1;\n  return cnt_3;\n}\n\nHere we have \"val < (start+1) ? -start : 1\", which again with the\nhelp of match.pd can be slightly simplified to \"val <= start ? -start : 1\"\nwhen dealing with unsigned types, because at the complicating value where\nstart == ~0, we fortunately have -start == 1, hence it doesn't matter\nwhether the second or third operand of the ternary operator is returned.\n\nTo summarize, this patch (in addition to tweaking may_be_zero in\nnumber_of_iterations_until_wrap) adds three new constant folding\ntransforms to match.pd.\n\nX != C1 ? -X : C2 simplifies to -X when -C1 == C2.\nwhich is the generalized form of the simplification above.\n\nX != C1 ? ~X : C2 simplifies to ~X when ~C1 == C2.\nwhich is the BIT_NOT_EXPR analog of the NEGATE_EXPR case.\n\nand the \"until-wrap final value replacement without context\":\n\n(X + 1) > Y ? -X : 1 simplifies to X >= Y ? -X : 1 when\nX is unsigned, as when X + 1 overflows, X is -1, so -X == 1.\n\n2021-12-01  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Richard Biener  <rguenther@suse.de>\n\ngcc/ChangeLog\n\t* tree-ssa-loop-niter.c (number_of_iterations_until_wrap):\n\tCheck if simplify_using_initial_conditions allows us to\n\tsimplify the expression for may_be_zero.\n\t* match.pd (X != C ? -X : -C -> -X): New transform.\n\t(X != C ? ~X : ~C -> ~X): Likewise.\n\t((X+1) > Y ? -X : 1 -> X >= Y ? -X : 1): Likewise.\n\ngcc/testsuite/ChangeLog\n\t* gcc.dg/fold-condneg-1.c: New test case.\n\t* gcc.dg/fold-condneg-2.c: New test case.\n\t* gcc.dg/fold-condnot-1.c: New test case.\n\t* gcc.dg/pr101145-1.c: New test case.\n\t* gcc.dg/pr101145-2.c: New test case.", "tree": {"sha": "cb1cd979d6b4ccc24d28a9fca6bbda3041b5345d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb1cd979d6b4ccc24d28a9fca6bbda3041b5345d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de3e5aae6c4b540e808c822c1e878b0a3304d09c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de3e5aae6c4b540e808c822c1e878b0a3304d09c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de3e5aae6c4b540e808c822c1e878b0a3304d09c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de3e5aae6c4b540e808c822c1e878b0a3304d09c/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b1ef8b9db964ec2375df29a73d2b1651afe7ea9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b1ef8b9db964ec2375df29a73d2b1651afe7ea9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b1ef8b9db964ec2375df29a73d2b1651afe7ea9"}], "stats": {"total": 222, "additions": 221, "deletions": 1}, "files": [{"sha": "0d7b8dd1334e54c147ddb402d0c7e557aaf6b804", "filename": "gcc/match.pd", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3e5aae6c4b540e808c822c1e878b0a3304d09c/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3e5aae6c4b540e808c822c1e878b0a3304d09c/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=de3e5aae6c4b540e808c822c1e878b0a3304d09c", "patch": "@@ -4403,6 +4403,28 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t(op (min @X { wide_int_to_tree (from_type, real_c1); })\n \t    { wide_int_to_tree (from_type, c2); })))))))))\n \n+/* X != C1 ? -X : C2 simplifies to -X when -C1 == C2.  */\n+(simplify\n+ (cond (ne @0 INTEGER_CST@1) (negate@3 @0) INTEGER_CST@2)\n+ (if (!TYPE_SATURATING (type)\n+      && (TYPE_OVERFLOW_WRAPS (type)\n+\t  || !wi::only_sign_bit_p (wi::to_wide (@1)))\n+      && wi::eq_p (wi::neg (wi::to_wide (@1)), wi::to_wide (@2)))\n+  @3))\n+\n+/* X != C1 ? ~X : C2 simplifies to ~X when ~C1 == C2.  */\n+(simplify\n+ (cond (ne @0 INTEGER_CST@1) (bit_not@3 @0) INTEGER_CST@2)\n+ (if (wi::eq_p (wi::bit_not (wi::to_wide (@1)), wi::to_wide (@2)))\n+  @3))\n+\n+/* (X + 1) > Y ? -X : 1 simplifies to X >= Y ? -X : 1 when\n+   X is unsigned, as when X + 1 overflows, X is -1, so -X == 1.  */\n+(simplify\n+ (cond (gt (plus @0 integer_onep) @1) (negate @0) integer_onep@2)\n+ (if (TYPE_UNSIGNED (type))\n+  (cond (ge @0 @1) (negate @0) @2)))\n+\n (for cnd (cond vec_cond)\n  /* A ? B : (A ? X : C) -> A ? B : C.  */\n  (simplify"}, {"sha": "c4edd7487e889f7e8168e30470a3e04ab13bd8a3", "filename": "gcc/testsuite/gcc.dg/fold-condneg-1.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3e5aae6c4b540e808c822c1e878b0a3304d09c/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-condneg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3e5aae6c4b540e808c822c1e878b0a3304d09c/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-condneg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-condneg-1.c?ref=de3e5aae6c4b540e808c822c1e878b0a3304d09c", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int test_i0(int x)\n+{\n+  return x != 0 ? -x : 0;\n+}\n+\n+int test_i1(int x)\n+{\n+  return x != 1 ? -x : -1;\n+}\n+\n+int test_im1(int x)\n+{\n+  return x != -1 ? -x : 1;\n+}\n+\n+unsigned int test_u0(unsigned int x)\n+{\n+  return x != 0 ? -x : 0;\n+}\n+\n+unsigned int test_u1(unsigned int x)\n+{\n+  return x != 1 ? -x : ~0u;\n+}\n+\n+unsigned int test_um1(unsigned int x)\n+{\n+  return x != ~0u ? -x : 1;\n+}\n+\n+unsigned char test_uc0(unsigned char x)\n+{\n+  return x != 0 ? -x : 0;\n+}\n+\n+unsigned char test_uc1(unsigned char x)\n+{\n+  return x != 1 ? -x : 255;\n+}\n+\n+unsigned char test_uc127(unsigned char x)\n+{\n+  return x != 127 ? -x : 129;\n+}\n+\n+unsigned char test_uc128(unsigned char x)\n+{\n+  return x != 128 ? -x : 128;\n+}\n+\n+unsigned char test_uc255(unsigned char x)\n+{\n+  return x != 255 ? -x : 1;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"goto\" \"optimized\" } } */"}, {"sha": "1af24636ec764eedde843e4274e9bbb439aa3197", "filename": "gcc/testsuite/gcc.dg/fold-condneg-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3e5aae6c4b540e808c822c1e878b0a3304d09c/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-condneg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3e5aae6c4b540e808c822c1e878b0a3304d09c/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-condneg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-condneg-2.c?ref=de3e5aae6c4b540e808c822c1e878b0a3304d09c", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftrapv -fdump-tree-optimized\" } */\n+\n+#define INT_MIN  (-__INT_MAX__ - 1)\n+\n+int test(int x)\n+{\n+  return x != INT_MIN ? -x : INT_MIN;\n+}\n+\n+/* { dg-final { scan-tree-dump \"goto\" \"optimized\" } } */"}, {"sha": "75d558c2686ebe0b2b7b256e07aa71eac29d3bb2", "filename": "gcc/testsuite/gcc.dg/fold-condnot-1.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3e5aae6c4b540e808c822c1e878b0a3304d09c/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-condnot-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3e5aae6c4b540e808c822c1e878b0a3304d09c/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-condnot-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-condnot-1.c?ref=de3e5aae6c4b540e808c822c1e878b0a3304d09c", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int test_i0(int x)\n+{\n+  return x != 0 ? ~x : ~0;\n+}\n+\n+int test_i1(int x)\n+{\n+  return x != 1 ? ~x : -2;\n+}\n+\n+int test_im1(int x)\n+{\n+  return x != ~0 ? ~x : 0;\n+}\n+\n+unsigned int test_u0(unsigned int x)\n+{\n+  return x != 0 ? ~x : ~0;\n+}\n+\n+unsigned int test_u1(unsigned int x)\n+{\n+  return x != 1 ? ~x : ~1u;\n+}\n+\n+unsigned int test_um1(unsigned int x)\n+{\n+  return x != ~0u ? ~x : 0;\n+}\n+\n+signed char test_c0(signed char x)\n+{\n+  return x != 0 ? ~x : -1;\n+}\n+\n+signed char test_c1(signed char x)\n+{\n+  return x != 1 ? ~x : -2;\n+}\n+\n+signed char test_cm1(signed char x)\n+{\n+  return x != -1 ? ~x : 0;\n+}\n+\n+signed char test_cm128(signed char x)\n+{\n+  return x != -128 ? ~x : 127;\n+}\n+\n+signed char test_c127(signed char x)\n+{\n+  return x != 127 ? ~x : -128;\n+}\n+\n+unsigned char test_uc0(unsigned char x)\n+{\n+  return x != 0 ? ~x : 255;\n+}\n+\n+unsigned char test_uc1(unsigned char x)\n+{\n+  return x != 1 ? ~x : 254;\n+}\n+\n+unsigned char test_uc127(unsigned char x)\n+{\n+  return x != 127 ? ~x : 128;\n+}\n+\n+unsigned char test_uc128(unsigned char x)\n+{\n+  return x != 128 ? ~x : 127;\n+}\n+\n+unsigned char test_ucm1(unsigned char x)\n+{\n+  return x != 255 ? ~x : 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"goto\" \"optimized\" } } */"}, {"sha": "e6f7923d78ac703012f810e5e7700d219731867f", "filename": "gcc/testsuite/gcc.dg/pr101145-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3e5aae6c4b540e808c822c1e878b0a3304d09c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101145-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3e5aae6c4b540e808c822c1e878b0a3304d09c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101145-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101145-1.c?ref=de3e5aae6c4b540e808c822c1e878b0a3304d09c", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+unsigned foo(unsigned val, unsigned start)\n+{\n+  unsigned cnt = 0;\n+  for (unsigned i = start; i > val; ++i)\n+    cnt++;\n+  return cnt;\n+}\n+\n+/* { dg-final { scan-tree-dump \"cnt_\\[0-9\\] = -start_\\[0-9\\]\\\\(D\\\\);\" \"optimized\" } } */"}, {"sha": "6ecfeb2c0d520c764ac4d3dc75a89c22b87b40dd", "filename": "gcc/testsuite/gcc.dg/pr101145-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3e5aae6c4b540e808c822c1e878b0a3304d09c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101145-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3e5aae6c4b540e808c822c1e878b0a3304d09c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101145-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101145-2.c?ref=de3e5aae6c4b540e808c822c1e878b0a3304d09c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+unsigned foo(unsigned val, unsigned start)\n+{\n+  unsigned cnt = 0;\n+  unsigned i = start;\n+  do {\n+    cnt++;\n+    i++;\n+  } while (i > val);\n+  return cnt;\n+}\n+\n+/* { dg-final { scan-tree-dump \"cnt_\\[0-9\\] = start_\\[0-9\\]\\\\(D\\\\) >= val_\\[0-9\\]\\\\(D\\\\) \\\\? _\\[0-9\\] : 1;\" \"optimized\" } } */"}, {"sha": "06954e437f5446608ccfe6e12c8b9885948debe6", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3e5aae6c4b540e808c822c1e878b0a3304d09c/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3e5aae6c4b540e808c822c1e878b0a3304d09c/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=de3e5aae6c4b540e808c822c1e878b0a3304d09c", "patch": "@@ -1478,7 +1478,7 @@ assert_loop_rolls_lt (tree type, affine_iv *iv0, affine_iv *iv1,\n    The number of iterations is stored to NITER.  */\n \n static bool\n-number_of_iterations_until_wrap (class loop *, tree type, affine_iv *iv0,\n+number_of_iterations_until_wrap (class loop *loop, tree type, affine_iv *iv0,\n \t\t\t\t affine_iv *iv1, class tree_niter_desc *niter)\n {\n   tree niter_type = unsigned_type_for (type);\n@@ -1506,6 +1506,23 @@ number_of_iterations_until_wrap (class loop *, tree type, affine_iv *iv0,\n \n       num = fold_build2 (MINUS_EXPR, niter_type, wide_int_to_tree (type, max),\n \t\t\t iv1->base);\n+\n+      /* When base has the form iv + 1, if we know iv >= n, then iv + 1 < n\n+\t only when iv + 1 overflows, i.e. when iv == TYPE_VALUE_MAX.  */\n+      if (sgn == UNSIGNED\n+\t  && integer_onep (step)\n+\t  && TREE_CODE (iv1->base) == PLUS_EXPR\n+\t  && integer_onep (TREE_OPERAND (iv1->base, 1)))\n+\t{\n+\t  tree cond = fold_build2 (GE_EXPR, boolean_type_node,\n+\t\t\t\t   TREE_OPERAND (iv1->base, 0), iv0->base);\n+\t  cond = simplify_using_initial_conditions (loop, cond);\n+\t  if (integer_onep (cond))\n+\t    may_be_zero = fold_build2 (EQ_EXPR, boolean_type_node,\n+\t\t\t\t       TREE_OPERAND (iv1->base, 0),\n+\t\t\t\t       TYPE_MAX_VALUE (type));\n+\t}\n+\n       high = max;\n       if (TREE_CODE (iv1->base) == INTEGER_CST)\n \tlow = wi::to_wide (iv1->base) - 1;"}]}