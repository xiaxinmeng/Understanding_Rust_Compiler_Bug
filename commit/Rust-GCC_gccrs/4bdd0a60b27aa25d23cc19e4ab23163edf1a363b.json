{"sha": "4bdd0a60b27aa25d23cc19e4ab23163edf1a363b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJkZDBhNjBiMjdhYTI1ZDIzY2MxOWU0YWIyMzE2M2VkZjFhMzYzYg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-05-15T19:07:01Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-05-15T19:07:01Z"}, "message": "c-decl.c (grokfield): Allow typedefs for anonymous structs and unions by default if...\n\n\t* c-decl.c (grokfield): Allow typedefs for anonymous structs and\n\tunions by default if those structs and unions have no tags.  Do\n\tnot condition anonymous struct and unions handling on flag_iso.\n\tAllow anonymous structs and unions for C1X.\n\t(finish_struct): Do not diagnose lack of named fields when\n\tanonymous structs and unions present for C1X.  Accept flexible\n\tarray members in structure with anonymous structs or unions but no\n\tdirectly named fields.\n\t* doc/extend.texi (Unnamed Fields): Update.\n\ntestsuite:\n\t* gcc.dg/c1x-anon-struct-1.c, gcc.dg/c1x-anon-struct-2.c,\n\tgcc.dg/c90-anon-struct-1.c, gcc.dg/c99-anon-struct-1.c: New tests.\n\t* gcc.dg/20080820.c, gcc.dg/anon-struct-1.c: Update expected\n\tdiagnostics and type sizes.\n\nFrom-SVN: r159439", "tree": {"sha": "58437182e5b92c32014bc05c7c720abea38f88b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58437182e5b92c32014bc05c7c720abea38f88b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d025732d199d5fda6718e4e52661ae027421a5b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d025732d199d5fda6718e4e52661ae027421a5b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d025732d199d5fda6718e4e52661ae027421a5b4"}], "stats": {"total": 226, "additions": 208, "deletions": 18}, "files": [{"sha": "db8e005079231a0a54623f550cffd6520d0fb447", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4bdd0a60b27aa25d23cc19e4ab23163edf1a363b", "patch": "@@ -1,3 +1,15 @@\n+2010-05-15  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.c (grokfield): Allow typedefs for anonymous structs and\n+\tunions by default if those structs and unions have no tags.  Do\n+\tnot condition anonymous struct and unions handling on flag_iso.\n+\tAllow anonymous structs and unions for C1X.\n+\t(finish_struct): Do not diagnose lack of named fields when\n+\tanonymous structs and unions present for C1X.  Accept flexible\n+\tarray members in structure with anonymous structs or unions but no\n+\tdirectly named fields.\n+\t* doc/extend.texi (Unnamed Fields): Update.\n+\n 2010-05-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gimple.h (compare_field_offset): Rename into..."}, {"sha": "4bec97f19896c31dbf5a84bdbef3f9d08e2b5531", "filename": "gcc/c-decl.c", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=4bdd0a60b27aa25d23cc19e4ab23163edf1a363b", "patch": "@@ -6567,6 +6567,8 @@ grokfield (location_t loc,\n \t   Otherwise this is a forward declaration of a structure tag.\n \n \t If this is something of the form \"foo;\" and foo is a TYPE_DECL, then\n+\t   If foo names a structure or union without a tag, then this\n+\t     is an anonymous struct (this is permitted by C1X).\n \t   If MS extensions are enabled and foo names a structure, then\n \t     again this is an anonymous struct.\n \t   Otherwise this is an error.\n@@ -6580,14 +6582,11 @@ grokfield (location_t loc,\n \t\t      || TREE_CODE (type) == UNION_TYPE);\n       bool ok = false;\n \n-      if (type_ok\n-\t  && (flag_ms_extensions || !declspecs->typedef_p))\n+      if (type_ok)\n \t{\n \t  if (flag_ms_extensions)\n \t    ok = true;\n-\t  else if (flag_iso)\n-\t    ok = false;\n-\t  else if (TYPE_NAME (type) == NULL)\n+\t  else if (TYPE_NAME (TYPE_MAIN_VARIANT (type)) == NULL)\n \t    ok = true;\n \t  else\n \t    ok = false;\n@@ -6597,7 +6596,15 @@ grokfield (location_t loc,\n \t  pedwarn (loc, 0, \"declaration does not declare anything\");\n \t  return NULL_TREE;\n \t}\n-      pedwarn (loc, OPT_pedantic, \"ISO C doesn%'t support unnamed structs/unions\");\n+      if (!flag_isoc1x)\n+\t{\n+\t  if (flag_isoc99)\n+\t    pedwarn (loc, OPT_pedantic,\n+\t\t     \"ISO C99 doesn%'t support unnamed structs/unions\");\n+\t  else\n+\t    pedwarn (loc, OPT_pedantic,\n+\t\t     \"ISO C90 doesn%'t support unnamed structs/unions\");\n+\t}\n     }\n \n   value = grokdeclarator (declarator, declspecs, FIELD, false,\n@@ -6789,8 +6796,14 @@ finish_struct (location_t loc, tree t, tree fieldlist, tree attributes,\n   if (pedantic)\n     {\n       for (x = fieldlist; x; x = TREE_CHAIN (x))\n-\tif (DECL_NAME (x) != 0)\n-\t  break;\n+\t{\n+\t  if (DECL_NAME (x) != 0)\n+\t    break;\n+\t  if (flag_isoc1x\n+\t      && (TREE_CODE (TREE_TYPE (x)) == RECORD_TYPE\n+\t\t  || TREE_CODE (TREE_TYPE (x)) == UNION_TYPE))\n+\t    break;\n+\t}\n \n       if (x == 0)\n \t{\n@@ -6893,7 +6906,9 @@ finish_struct (location_t loc, tree t, tree fieldlist, tree attributes,\n \tpedwarn (DECL_SOURCE_LOCATION (x), OPT_pedantic,\n \t\t \"invalid use of structure with flexible array member\");\n \n-      if (DECL_NAME (x))\n+      if (DECL_NAME (x)\n+\t  || TREE_CODE (TREE_TYPE (x)) == RECORD_TYPE\n+\t  || TREE_CODE (TREE_TYPE (x)) == UNION_TYPE)\n \tsaw_named_field = 1;\n     }\n "}, {"sha": "d141b14f5758cc13ed2f44cd0fca8e05ca096ceb", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=4bdd0a60b27aa25d23cc19e4ab23163edf1a363b", "patch": "@@ -12727,7 +12727,8 @@ versions earlier than 4.4.\n @cindex struct\n @cindex union\n \n-For compatibility with other compilers, GCC allows you to define\n+As permitted by ISO C1X and for compatibility with other compilers,\n+GCC allows you to define\n a structure or union that contains, as fields, structures and unions\n without names.  For example:\n \n@@ -12765,11 +12766,12 @@ The compiler gives errors for such constructs.\n @opindex fms-extensions\n Unless @option{-fms-extensions} is used, the unnamed field must be a\n structure or union definition without a tag (for example, @samp{struct\n-@{ int a; @};}).  If @option{-fms-extensions} is used, the field may\n+@{ int a; @};}), or a @code{typedef} name for such a structure or\n+union.  If @option{-fms-extensions} is used, the field may\n also be a definition with a tag such as @samp{struct foo @{ int a;\n @};}, a reference to a previously defined structure or union such as\n @samp{struct foo;}, or a reference to a @code{typedef} name for a\n-previously defined structure or union type.\n+previously defined structure or union type with a tag.\n \n @node Thread-Local\n @section Thread-Local Storage"}, {"sha": "2ee5942ebd285ab93caced3e163fa97c81e8516c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4bdd0a60b27aa25d23cc19e4ab23163edf1a363b", "patch": "@@ -1,3 +1,10 @@\n+2010-05-15  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c1x-anon-struct-1.c, gcc.dg/c1x-anon-struct-2.c,\n+\tgcc.dg/c90-anon-struct-1.c, gcc.dg/c99-anon-struct-1.c: New tests.\n+\t* gcc.dg/20080820.c, gcc.dg/anon-struct-1.c: Update expected\n+\tdiagnostics and type sizes.\n+\n 2010-05-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/lto9.adb: New test."}, {"sha": "002edb1ddf9264666ad7bc01b8ff332402dce33a", "filename": "gcc/testsuite/gcc.dg/20080820.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2Ftestsuite%2Fgcc.dg%2F20080820.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2Ftestsuite%2Fgcc.dg%2F20080820.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20080820.c?ref=4bdd0a60b27aa25d23cc19e4ab23163edf1a363b", "patch": "@@ -1,4 +1,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-fshow-column -fms-extensions -pedantic\" } */\n \n-struct { struct a { int x; }; int bar; } hot; /* { dg-warning \"29:ISO C doesn't support unnamed\" } */\n+struct { struct a { int x; }; int bar; } hot; /* { dg-warning \"29:ISO C90 doesn't support unnamed\" } */"}, {"sha": "c599fa5669b7084567a2ba2ff33ec7f10ca7f4e4", "filename": "gcc/testsuite/gcc.dg/anon-struct-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-1.c?ref=4bdd0a60b27aa25d23cc19e4ab23163edf1a363b", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-std=iso9899:1990\" } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic\" } */\n /* In strict ISO C mode, we don't recognize the anonymous struct/union\n    extension or any Microsoft extensions.  */\n \n@@ -21,10 +21,10 @@ char testD[sizeof(struct D) == sizeof(struct A) ? 1 : -1];\n \n /* GNU extension.  */\n struct E {\n-  struct { char z; };\t\t/* { dg-warning \"does not declare anything\" } */\n+  struct { char z; };\t\t/* { dg-warning \"unnamed structs\" } */\n   char e;\n };\n-char testE[sizeof(struct E) == sizeof(struct A) ? 1 : -1];\n+\n \n /* MS extension.  */\n typedef struct A typedef_A;\n@@ -49,8 +49,8 @@ char testH[sizeof(struct H) == 2 * sizeof(struct A) ? 1 : -1];\n \n /* Make sure __extension__ gets turned back off.  */\n struct I {\n-  struct { char z; };\t\t/* { dg-warning \"does not declare anything\" } */\n+  struct { char z; };\t\t/* { dg-warning \"unnamed structs\" } */\n   char i;\n };\n-char testI[sizeof(struct I) == sizeof(struct A) ? 1 : -1];\n+char testI[sizeof(struct I) == sizeof(struct E) ? 1 : -1];\n "}, {"sha": "711fe65df3db7b545c92a1855a159d7d901d165d", "filename": "gcc/testsuite/gcc.dg/c1x-anon-struct-1.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-anon-struct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-anon-struct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-anon-struct-1.c?ref=4bdd0a60b27aa25d23cc19e4ab23163edf1a363b", "patch": "@@ -0,0 +1,73 @@\n+/* Test for anonymous structures and unions in C1X.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+#include <stddef.h>\n+\n+typedef struct\n+{\n+  int i;\n+} s0;\n+\n+typedef union\n+{\n+  int i;\n+} u0;\n+\n+struct s1\n+{\n+  int a;\n+  u0;\n+  struct\n+  {\n+    int b;\n+  };\n+};\n+\n+union u1\n+{\n+  int b;\n+  s0;\n+  union\n+  {\n+    int c;\n+  };\n+};\n+\n+struct s2\n+{\n+  struct\n+  {\n+    int a;\n+  };\n+};\n+\n+struct s3\n+{\n+  u0;\n+};\n+\n+struct s4\n+{\n+  struct\n+  {\n+    int i;\n+  };\n+  int a[];\n+};\n+\n+struct s1 x =\n+  {\n+    .b = 1,\n+    .i = 2,\n+    .a = 3\n+  };\n+\n+int o = offsetof (struct s1, i);\n+\n+void\n+f (void)\n+{\n+  x.i = 3;\n+  (&x)->i = 4;\n+}"}, {"sha": "cb8043117d5d13c566838fc0fb5b9aa706e740a6", "filename": "gcc/testsuite/gcc.dg/c1x-anon-struct-2.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-anon-struct-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-anon-struct-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-anon-struct-2.c?ref=4bdd0a60b27aa25d23cc19e4ab23163edf1a363b", "patch": "@@ -0,0 +1,57 @@\n+/* Test for anonymous structures and unions in C1X.  Test for invalid\n+   cases.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+typedef struct s0\n+{\n+  int i;\n+} s0;\n+\n+struct s1\n+{\n+  int a;\n+  struct s0; /* { dg-error \"declaration does not declare anything\" } */\n+};\n+\n+struct s2\n+{\n+  int a;\n+  s0; /* { dg-error \"declaration does not declare anything\" } */\n+};\n+\n+struct s3\n+{\n+  struct\n+  {\n+    int i;\n+  };\n+  struct\n+  {\n+    int i; /* { dg-error \"duplicate member\" } */\n+  };\n+};\n+\n+struct s4\n+{\n+  int a;\n+  struct s\n+  {\n+    int i;\n+  }; /* { dg-error \"declaration does not declare anything\" } */\n+};\n+\n+struct s5\n+{\n+  struct\n+  {\n+    int i;\n+  } a;\n+  int b;\n+} x;\n+\n+void\n+f (void)\n+{\n+  x.i = 0; /* { dg-error \"has no member\" } */\n+}"}, {"sha": "a3eb7f7e392d78efe5b9508d2c7655fe91d14f8f", "filename": "gcc/testsuite/gcc.dg/c90-anon-struct-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-anon-struct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-anon-struct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-anon-struct-1.c?ref=4bdd0a60b27aa25d23cc19e4ab23163edf1a363b", "patch": "@@ -0,0 +1,12 @@\n+/* Test for anonymous structures and unions not permitted in C90.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+struct s\n+{\n+  int a;\n+  struct\n+  {\n+    int b;\n+  }; /* { dg-error \"unnamed structs\" } */\n+};"}, {"sha": "87d4c3438eb7586af1c22d8790297d209f5c0432", "filename": "gcc/testsuite/gcc.dg/c99-anon-struct-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-anon-struct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd0a60b27aa25d23cc19e4ab23163edf1a363b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-anon-struct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-anon-struct-1.c?ref=4bdd0a60b27aa25d23cc19e4ab23163edf1a363b", "patch": "@@ -0,0 +1,12 @@\n+/* Test for anonymous structures and unions not permitted in C99.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+struct s\n+{\n+  int a;\n+  struct\n+  {\n+    int b;\n+  }; /* { dg-error \"unnamed structs\" } */\n+};"}]}