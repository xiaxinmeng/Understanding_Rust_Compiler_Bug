{"sha": "815d8045e0779059e39afdcd9cf372412287a5b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE1ZDgwNDVlMDc3OTA1OWUzOWFmZGNkOWNmMzcyNDEyMjg3YTViOQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2005-11-19T21:36:06Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2005-11-19T21:36:06Z"}, "message": "fortran ChangeLog:\n\n\t\n2005-11-19  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/24862\n\t* trans-io.c (gfc_trans_transfer): Handle arrays of derived type.\n\ntestsuite ChangeLog:\n\n2005-11-19  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/24862\n\t* gfortran.dg/arrayio_derived_1.f90: New test.\n\nFrom-SVN: r107228", "tree": {"sha": "911eae7deed2a6822d2396e660240b33d3023167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/911eae7deed2a6822d2396e660240b33d3023167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/815d8045e0779059e39afdcd9cf372412287a5b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815d8045e0779059e39afdcd9cf372412287a5b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/815d8045e0779059e39afdcd9cf372412287a5b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815d8045e0779059e39afdcd9cf372412287a5b9/comments", "author": null, "committer": null, "parents": [{"sha": "3817707ec3c877d6a120da73f4b2ae20b02fa4d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3817707ec3c877d6a120da73f4b2ae20b02fa4d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3817707ec3c877d6a120da73f4b2ae20b02fa4d8"}], "stats": {"total": 84, "additions": 76, "deletions": 8}, "files": [{"sha": "783e3fb1013f536444457cdd1db08c344d652a84", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d8045e0779059e39afdcd9cf372412287a5b9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d8045e0779059e39afdcd9cf372412287a5b9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=815d8045e0779059e39afdcd9cf372412287a5b9", "patch": "@@ -1,3 +1,8 @@\n+2005-11-19  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/24862\n+\t* trans-io.c (gfc_trans_transfer): Handle arrays of derived type.\n+\n 2005-11-17  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/20811"}, {"sha": "bdfa450dc2ab6a60c8b9d0cc0f6b090b5e5f1fa3", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d8045e0779059e39afdcd9cf372412287a5b9/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d8045e0779059e39afdcd9cf372412287a5b9/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=815d8045e0779059e39afdcd9cf372412287a5b9", "patch": "@@ -1640,11 +1640,41 @@ gfc_trans_transfer (gfc_code * code)\n \n   if (ss == gfc_ss_terminator)\n     {\n+      /* Transfer a scalar value.  */\n       gfc_conv_expr_reference (&se, expr);\n       transfer_expr (&se, &expr->ts, se.expr);\n     }\n-  else if (expr->ts.type == BT_DERIVED)\n+  else\n     {\n+      /* Transfer an array. There are 3 options:\n+      1) An array of an intrinsic type. This is handled by transfering\n+\t the descriptor to the library.\n+      2) A derived type containing an array. Scalarized by the frontend.\n+      3) An array of derived type. Scalarized by the frontend.\n+      */\n+      if (expr->ts.type != BT_DERIVED)\n+\t{\n+\t  /* Get the descriptor.  */\n+\t  gfc_conv_expr_descriptor (&se, expr, ss);\n+\t  /* If it's not an array of derived type, transfer the array\n+\t     descriptor to the library.  */\n+\t  tmp = gfc_get_dtype (TREE_TYPE (se.expr));\n+\t  if (((TREE_INT_CST_LOW (tmp) & GFC_DTYPE_TYPE_MASK) \n+\t       >> GFC_DTYPE_TYPE_SHIFT) != GFC_DTYPE_DERIVED)\n+\t    {\n+\t      tmp = gfc_build_addr_expr (NULL, se.expr);\n+\t      transfer_array_desc (&se, &expr->ts, tmp);\n+\t      goto finish_block_label;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Cleanup the mess getting the descriptor caused.  */\n+\t      expr = code->expr;\n+\t      ss = gfc_walk_expr (expr);\n+\t      gfc_init_se (&se, NULL);\n+\t    }\n+\t}\n+      \n       /* Initialize the scalarizer.  */\n       gfc_init_loopinfo (&loop);\n       gfc_add_ss_to_loop (&loop, ss);\n@@ -1663,13 +1693,8 @@ gfc_trans_transfer (gfc_code * code)\n       gfc_conv_expr_reference (&se, expr);\n       transfer_expr (&se, &expr->ts, se.expr);\n     }\n-  else\n-    {\n-      /* Pass the array descriptor to the library.  */\n-      gfc_conv_expr_descriptor (&se, expr, ss);\n-      tmp = gfc_build_addr_expr (NULL, se.expr);\n-      transfer_array_desc (&se, &expr->ts, tmp);\n-    }\n+\n+ finish_block_label:\n \n   gfc_add_block_to_block (&body, &se.pre);\n   gfc_add_block_to_block (&body, &se.post);"}, {"sha": "62e030980185bfd685e1d35b773cb0ffba824b54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d8045e0779059e39afdcd9cf372412287a5b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d8045e0779059e39afdcd9cf372412287a5b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=815d8045e0779059e39afdcd9cf372412287a5b9", "patch": "@@ -1,3 +1,8 @@\n+2005-11-19  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/24862\n+\t* gfortran.dg/arrayio_derived_1.f90: New test.\n+\n 2005-11-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/23294"}, {"sha": "d0d3aa256a0e9dc809b7036bf3b0f19c2410fd19", "filename": "gcc/testsuite/gfortran.dg/arrayio_derived_1.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d8045e0779059e39afdcd9cf372412287a5b9/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_derived_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d8045e0779059e39afdcd9cf372412287a5b9/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_derived_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_derived_1.f90?ref=815d8045e0779059e39afdcd9cf372412287a5b9", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do run }\n+! PR 24862: IO for arrays of derived type handled incorrectly.\n+program arrayio_derived_1\n+  implicit none\n+  type tp\n+     integer :: i\n+     character(len=1) :: c\n+  end type tp\n+  type(tp) :: x(5)\n+  character(len=100) :: a\n+  integer :: i, b(5)\n+\n+  x%i = 256\n+  x%c = \"q\"\n+\n+  write(a, *) x%i\n+  read(a, *) b\n+  do i = 1, 5\n+     if (b(i) /= 256) then\n+        call abort ()\n+     end if\n+  end do\n+  write(a, *) x ! Just test that the library doesn't abort.\n+  write(a, *) x(:)%i\n+  b = 0\n+  read(a, *) b\n+  do i = 1, 5\n+     if (b(i) /= 256) then\n+        call abort ()\n+     end if\n+  end do\n+\n+end program arrayio_derived_1"}]}