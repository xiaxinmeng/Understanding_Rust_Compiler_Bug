{"sha": "d355d5ea50d88c81d0713893b30d88e9e8bfc17e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM1NWQ1ZWE1MGQ4OGM4MWQwNzEzODkzYjMwZDg4ZTllOGJmYzE3ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-09-26T10:34:57Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-09-26T10:34:57Z"}, "message": "i386.md (movmsk_df): New insn.\n\n\t* config/i386/i386.md (movmsk_df): New insn.\n\t(signbitdf): Split out of signbit<mode>2.  Generate movmsk_df\n\tsequence for TARGET_SSE_MATH.\n\nFrom-SVN: r164630", "tree": {"sha": "af1efb121d330912159529c978a7aa440efabf8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af1efb121d330912159529c978a7aa440efabf8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d355d5ea50d88c81d0713893b30d88e9e8bfc17e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d355d5ea50d88c81d0713893b30d88e9e8bfc17e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d355d5ea50d88c81d0713893b30d88e9e8bfc17e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d355d5ea50d88c81d0713893b30d88e9e8bfc17e/comments", "author": null, "committer": null, "parents": [{"sha": "7725086e26b7642b85d2a2461d2039d2a67ae138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7725086e26b7642b85d2a2461d2039d2a67ae138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7725086e26b7642b85d2a2461d2039d2a67ae138"}], "stats": {"total": 83, "additions": 67, "deletions": 16}, "files": [{"sha": "9433f5a17cc5fbe29c2e043c2e95310fe0767813", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d355d5ea50d88c81d0713893b30d88e9e8bfc17e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d355d5ea50d88c81d0713893b30d88e9e8bfc17e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d355d5ea50d88c81d0713893b30d88e9e8bfc17e", "patch": "@@ -1,3 +1,9 @@\n+2010-09-26  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (movmsk_df): New insn.\n+\t(signbitdf): Split out of signbit<mode>2.  Generate movmsk_df\n+\tsequence for TARGET_SSE_MATH.\n+\n 2010-09-26  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mips/mips.c (mips_builtin_decls): Declare.\n@@ -82,8 +88,7 @@\n \tconst_value_known.\n \t(cgraph_externally_visible_p): Use cgraph_used_from_object_file_p.\n \t(function_and_variable_visibility): Set resolution for local vars\n-\tand functions.\n-\tuse varpool_used_from_object_file_p.\n+\tand functions; use varpool_used_from_object_file_p.\n \t* varasm.c (resolution_to_local_definition_p, resolution_local_p): New\n \tstatic functions.\n \t(default_binds_local_p_1): Use resolutoin info.\n@@ -121,26 +126,25 @@\n \t* tree.c (local_define_builtin): Handle ECF_LEAF.\n \t(build_common_builtin_nodes): Set ECF_LEAF where needed.\n \t* tree.h (ECF_LEAF): New.\n-\t* ipa-reference.c (propagate_bits): For leaf calls propagate ever overwrittable\n-\tand unavailable functions.\n+\t* ipa-reference.c (propagate_bits): For leaf calls propagate ever\n+\toverwrittable and unavailable functions.\n \t(ipa_init): Put all_module_statics into optimization_summary_obstack.\n \t(copy_global_bitmap): Do not copy all_module_statics.\n \t(read_write_all_from_decl): Use cgraph_node argument; handle ECF_LEAF.\n \t(propagate): Handle overwritable and unavailable leaf functions;\n \tinitialize global info for overwritable and unavailable leaf functions;\n \tdo not free all module statics.\n-\t(ipa_reference_get_not_read_global, ipa_reference_get_not_written_global):\n-\tleaf calls don't clobber local statics.\n+\t(ipa_reference_get_not_read_global,\n+\tipa_reference_get_not_written_global): leaf calls don't clobber\n+\tlocal statics.\n \t* calls.c (flags_from_decl_or_type): Handle leaf.\n \t* tree-cfg.c (stmt_can_make_abnormal_goto): Leaf functions can't do\n \tabnormal gotos.\n \n 2010-09-24  Basile Starynkevitch  <basile@starynkevitch.net>\n \n \t* gengtype.c: Reindented.\n-\n \t* gengtype.h: Reindented.\n-\n \t* gengtype-parse.c: Reindented.\n \n 2010-09-24  Jan Hubicka  <jh@suse.cz>\n@@ -203,11 +207,11 @@\n \n 2010-09-24  Iain Sandoe  <iains@gcc.gnu.org>\n \t    Dominique Dhumieres  <dominiq@lps.ens.fr>\n-\t    \n+\n \tPR bootstrap/45751\n \t* gcc/config/darwin-driver.c (darwin_default_min_version):\n \tAdjust size passed to memcpy in two places.\n-\t\n+\n 2010-09-24  Richard Guenther  <rguenther@suse.de>\n \n \t* c-decl.c (pop_scope): Always set file-scope DECL_CONTEXT."}, {"sha": "0d76acb0ad50b9e80eede3a2b10ee834dbbf6574", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 53, "deletions": 6, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d355d5ea50d88c81d0713893b30d88e9e8bfc17e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d355d5ea50d88c81d0713893b30d88e9e8bfc17e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d355d5ea50d88c81d0713893b30d88e9e8bfc17e", "patch": "@@ -14980,18 +14980,65 @@\n   DONE;\n })\n \n-(define_expand \"signbit<mode>2\"\n+(define_expand \"signbitxf2\"\n   [(use (match_operand:SI 0 \"register_operand\" \"\"))\n-   (use (match_operand:X87MODEF 1 \"register_operand\" \"\"))]\n+   (use (match_operand:XF 1 \"register_operand\" \"\"))]\n+  \"TARGET_USE_FANCY_MATH_387\"\n+{\n+  rtx scratch = gen_reg_rtx (HImode);\n+\n+  emit_insn (gen_fxamxf2_i387 (scratch, operands[1]));\n+  emit_insn (gen_andsi3 (operands[0],\n+\t     gen_lowpart (SImode, scratch), GEN_INT (0x200)));\n+  DONE;\n+})\n+\n+(define_insn \"movmsk_df\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI\n+\t  [(match_operand:DF 1 \"register_operand\" \"x\")]\n+\t  UNSPEC_MOVMSK))]\n+  \"SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\"\n+  \"%vmovmskpd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"DF\")])\n+\n+;; Use movmskpd in SSE mode to avoid store forwarding stall\n+;; for 32bit targets and movq+shrq sequence for 64bit targets.\n+(define_expand \"signbitdf2\"\n+  [(use (match_operand:SI 0 \"register_operand\" \"\"))\n+   (use (match_operand:DF 1 \"register_operand\" \"\"))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && !(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n+   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\"\n {\n-  rtx mask = GEN_INT (0x0200);\n+  if (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n+    {\n+      emit_insn (gen_movmsk_df (operands[0], operands[1]));\n+      emit_insn (gen_andsi3 (operands[0], operands[0], const1_rtx));\n+    }\n+  else\n+    {\n+      rtx scratch = gen_reg_rtx (HImode);\n \n+      emit_insn (gen_fxamdf2_i387 (scratch, operands[1]));\n+      emit_insn (gen_andsi3 (operands[0],\n+\t\t gen_lowpart (SImode, scratch), GEN_INT (0x200)));\n+    }\n+  DONE;\n+})\n+\n+(define_expand \"signbitsf2\"\n+  [(use (match_operand:SI 0 \"register_operand\" \"\"))\n+   (use (match_operand:SF 1 \"register_operand\" \"\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && !(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\"\n+{\n   rtx scratch = gen_reg_rtx (HImode);\n \n-  emit_insn (gen_fxam<mode>2_i387 (scratch, operands[1]));\n-  emit_insn (gen_andsi3 (operands[0], gen_lowpart (SImode, scratch), mask));\n+  emit_insn (gen_fxamsf2_i387 (scratch, operands[1]));\n+  emit_insn (gen_andsi3 (operands[0],\n+\t     gen_lowpart (SImode, scratch), GEN_INT (0x200)));\n   DONE;\n })\n \f"}]}