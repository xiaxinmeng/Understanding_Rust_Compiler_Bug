{"sha": "bdfc3830f9f997b6b146ff9df476e9c1367462f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRmYzM4MzBmOWY5OTdiNmIxNDZmZjlkZjQ3NmU5YzEzNjc0NjJmMg==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2007-06-06T10:30:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:30:40Z"}, "message": "g-pehage.adb (Produce): Open output files in Binary mode...\n\n2007-04-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-pehage.adb (Produce): Open output files in Binary mode, so that\n\tthey have UNIX line endings (LF only) even on Windows, and thus pass\n\tall GNAT style checks.\n\nFrom-SVN: r125422", "tree": {"sha": "6ec235802bfd68b0c8898ed67671ef9a1653bad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ec235802bfd68b0c8898ed67671ef9a1653bad9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdfc3830f9f997b6b146ff9df476e9c1367462f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfc3830f9f997b6b146ff9df476e9c1367462f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdfc3830f9f997b6b146ff9df476e9c1367462f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfc3830f9f997b6b146ff9df476e9c1367462f2/comments", "author": null, "committer": null, "parents": [{"sha": "690792a21d56ce57d19d45786c24da692f667a4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/690792a21d56ce57d19d45786c24da692f667a4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/690792a21d56ce57d19d45786c24da692f667a4c"}], "stats": {"total": 113, "additions": 41, "deletions": 72}, "files": [{"sha": "c6420920053662bb8e502014dfdd4086df7cf177", "filename": "gcc/ada/g-pehage.adb", "status": "modified", "additions": 41, "deletions": 72, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfc3830f9f997b6b146ff9df476e9c1367462f2/gcc%2Fada%2Fg-pehage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfc3830f9f997b6b146ff9df476e9c1367462f2/gcc%2Fada%2Fg-pehage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-pehage.adb?ref=bdfc3830f9f997b6b146ff9df476e9c1367462f2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2006, AdaCore                     --\n+--                     Copyright (C) 2002-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -172,18 +172,13 @@ package body GNAT.Perfect_Hash_Generators is\n    --  writes it into file F. When the array is completed, the routine adds\n    --  semi-colon and writes the line into file F.\n \n-   procedure New_Line\n-     (File : File_Descriptor);\n+   procedure New_Line (File : File_Descriptor);\n    --  Simulate Ada.Text_IO.New_Line with GNAT.OS_Lib\n \n-   procedure Put\n-     (File : File_Descriptor;\n-      Str  : String);\n+   procedure Put (File : File_Descriptor; Str : String);\n    --  Simulate Ada.Text_IO.Put with GNAT.OS_Lib\n \n-   procedure Put_Used_Char_Set\n-     (File  : File_Descriptor;\n-      Title : String);\n+   procedure Put_Used_Char_Set (File : File_Descriptor; Title : String);\n    --  Output a title and a used character set\n \n    procedure Put_Int_Vector\n@@ -202,24 +197,16 @@ package body GNAT.Perfect_Hash_Generators is\n    --  Output a title and a matrix. When the matrix has only one non-empty\n    --  dimension (Len_2 = 0), output a vector.\n \n-   procedure Put_Edges\n-     (File  : File_Descriptor;\n-      Title : String);\n+   procedure Put_Edges (File : File_Descriptor; Title : String);\n    --  Output a title and an edge table\n \n-   procedure Put_Initial_Keys\n-     (File  : File_Descriptor;\n-      Title : String);\n+   procedure Put_Initial_Keys (File : File_Descriptor; Title : String);\n    --  Output a title and a key table\n \n-   procedure Put_Reduced_Keys\n-     (File  : File_Descriptor;\n-      Title : String);\n+   procedure Put_Reduced_Keys (File : File_Descriptor; Title : String);\n    --  Output a title and a key table\n \n-   procedure Put_Vertex_Table\n-     (File  : File_Descriptor;\n-      Title : String);\n+   procedure Put_Vertex_Table (File : File_Descriptor; Title : String);\n    --  Output a title and a vertex table\n \n    ----------------------------------\n@@ -438,9 +425,7 @@ package body GNAT.Perfect_Hash_Generators is\n    function Acyclic return Boolean is\n       Marks : array (0 .. NV - 1) of Vertex_Id := (others => No_Vertex);\n \n-      function Traverse\n-        (Edge : Edge_Id;\n-         Mark : Vertex_Id) return Boolean;\n+      function Traverse (Edge : Edge_Id; Mark : Vertex_Id) return Boolean;\n       --  Propagate Mark from X to Y. X is already marked. Mark Y and propagate\n       --  it to the edges of Y except the one representing the same key. Return\n       --  False when Y is marked with Mark.\n@@ -449,10 +434,7 @@ package body GNAT.Perfect_Hash_Generators is\n       -- Traverse --\n       --------------\n \n-      function Traverse\n-        (Edge : Edge_Id;\n-         Mark : Vertex_Id) return Boolean\n-      is\n+      function Traverse (Edge : Edge_Id; Mark : Vertex_Id) return Boolean is\n          E : constant Edge_Type := Get_Edges (Edge);\n          K : constant Key_Id    := E.Key;\n          Y : constant Vertex_Id := E.Y;\n@@ -579,7 +561,7 @@ package body GNAT.Perfect_Hash_Generators is\n    -------------------------------\n \n    procedure Assign_Values_To_Vertices is\n-      X  : Vertex_Id;\n+      X : Vertex_Id;\n \n       procedure Assign (X : Vertex_Id);\n       --  Execute assignment on X's neighbors except the vertex that we are\n@@ -589,13 +571,14 @@ package body GNAT.Perfect_Hash_Generators is\n       -- Assign --\n       ------------\n \n-      procedure Assign (X : Vertex_Id)\n-      is\n+      procedure Assign (X : Vertex_Id) is\n          E : Edge_Type;\n          V : constant Vertex_Type := Get_Vertices (X);\n+\n       begin\n          for J in V.First .. V.Last loop\n             E := Get_Edges (J);\n+\n             if Get_Graph (E.Y) = -1 then\n                Set_Graph (E.Y, (E.Key - Get_Graph (X)) mod NK);\n                Assign (E.Y);\n@@ -642,9 +625,7 @@ package body GNAT.Perfect_Hash_Generators is\n    -- Compute --\n    -------------\n \n-   procedure Compute\n-     (Position : String := Default_Position)\n-   is\n+   procedure Compute (Position : String := Default_Position) is\n       Success : Boolean := False;\n \n    begin\n@@ -1171,9 +1152,7 @@ package body GNAT.Perfect_Hash_Generators is\n    -- Insert --\n    ------------\n \n-   procedure Insert\n-     (Value : String)\n-   is\n+   procedure Insert (Value : String) is\n       Word : Word_Type := Null_Word;\n       Len  : constant Natural := Value'Length;\n \n@@ -1257,7 +1236,6 @@ package body GNAT.Perfect_Hash_Generators is\n    --  Start of processing for Parse_Position_Selection\n \n    begin\n-\n       --  Empty specification means all the positions\n \n       if L < N then\n@@ -1330,7 +1308,7 @@ package body GNAT.Perfect_Hash_Generators is\n    -------------\n \n    procedure Produce (Pkg_Name  : String := Default_Pkg_Name) is\n-      File     : File_Descriptor;\n+      File : File_Descriptor;\n \n       Status : Boolean;\n       --  For call to Close\n@@ -1442,7 +1420,8 @@ package body GNAT.Perfect_Hash_Generators is\n \n       FName (PLen + 1 .. PLen + 4) := \".ads\";\n \n-      File := Create_File (FName, Text);\n+      File := Create_File (FName, Binary);\n+\n       Put      (File, \"package \");\n       Put      (File, Pkg_Name);\n       Put      (File, \" is\");\n@@ -1461,7 +1440,8 @@ package body GNAT.Perfect_Hash_Generators is\n \n       FName (PLen + 4) := 'b';\n \n-      File := Create_File (FName, Text);\n+      File := Create_File (FName, Binary);\n+\n       Put      (File, \"with Interfaces; use Interfaces;\");\n       New_Line (File);\n       New_Line (File);\n@@ -1641,7 +1621,6 @@ package body GNAT.Perfect_Hash_Generators is\n \n    procedure Put (File : File_Descriptor; Str : String) is\n       Len : constant Natural := Str'Length;\n-\n    begin\n       if Write (File, Str'Address, Len) /= Len then\n          raise Program_Error;\n@@ -1696,9 +1675,11 @@ package body GNAT.Perfect_Hash_Generators is\n          if F1 <= L1 then\n             if C1 = F1 and then C2 = F2 then\n                Add ('(');\n+\n                if F1 = L1 then\n                   Add (\"0 .. 0 => \");\n                end if;\n+\n             else\n                Add (' ');\n             end if;\n@@ -1707,9 +1688,11 @@ package body GNAT.Perfect_Hash_Generators is\n \n       if C2 = F2 then\n          Add ('(');\n+\n          if F2 = L2 then\n             Add (\"0 .. 0 => \");\n          end if;\n+\n       else\n          Add (' ');\n       end if;\n@@ -1723,9 +1706,11 @@ package body GNAT.Perfect_Hash_Generators is\n          if F1 > L1 then\n             Add (';');\n             Flush;\n+\n          elsif C1 /= L1 then\n             Add (',');\n             Flush;\n+\n          else\n             Add (')');\n             Add (';');\n@@ -1741,10 +1726,7 @@ package body GNAT.Perfect_Hash_Generators is\n    -- Put_Edges --\n    ---------------\n \n-   procedure Put_Edges\n-     (File  : File_Descriptor;\n-      Title : String)\n-   is\n+   procedure Put_Edges (File  : File_Descriptor; Title : String) is\n       E  : Edge_Type;\n       F1 : constant Natural := 1;\n       L1 : constant Natural := Edges_Len - 1;\n@@ -1769,10 +1751,7 @@ package body GNAT.Perfect_Hash_Generators is\n    -- Put_Initial_Keys --\n    ----------------------\n \n-   procedure Put_Initial_Keys\n-     (File  : File_Descriptor;\n-      Title : String)\n-   is\n+   procedure Put_Initial_Keys (File : File_Descriptor; Title : String) is\n       F1 : constant Natural := 0;\n       L1 : constant Natural := NK - 1;\n       M  : constant Natural := Max / 5;\n@@ -1805,23 +1784,23 @@ package body GNAT.Perfect_Hash_Generators is\n       L1 : constant Integer := Len_1 - 1;\n       F2 : constant Integer := 0;\n       L2 : constant Integer := Len_2 - 1;\n-      I  : Natural;\n+      Ix : Natural;\n \n    begin\n       Put (File, Title);\n       New_Line (File);\n \n       if Len_2 = 0 then\n          for J in F1 .. L1 loop\n-            I := IT.Table (Table + J);\n-            Put (File, Image (I), 1, 0, 1, F1, L1, J);\n+            Ix := IT.Table (Table + J);\n+            Put (File, Image (Ix), 1, 0, 1, F1, L1, J);\n          end loop;\n \n       else\n          for J in F1 .. L1 loop\n             for K in F2 .. L2 loop\n-               I := IT.Table (Table + J + K * Len_1);\n-               Put (File, Image (I), F1, L1, J, F2, L2, K);\n+               Ix := IT.Table (Table + J + K * Len_1);\n+               Put (File, Image (Ix), F1, L1, J, F2, L2, K);\n             end loop;\n          end loop;\n       end if;\n@@ -1853,10 +1832,7 @@ package body GNAT.Perfect_Hash_Generators is\n    -- Put_Reduced_Keys --\n    ----------------------\n \n-   procedure Put_Reduced_Keys\n-     (File  : File_Descriptor;\n-      Title : String)\n-   is\n+   procedure Put_Reduced_Keys (File : File_Descriptor; Title : String) is\n       F1 : constant Natural := 0;\n       L1 : constant Natural := NK - 1;\n       M  : constant Natural := Max / 5;\n@@ -1878,10 +1854,7 @@ package body GNAT.Perfect_Hash_Generators is\n    -- Put_Used_Char_Set --\n    -----------------------\n \n-   procedure Put_Used_Char_Set\n-     (File  : File_Descriptor;\n-      Title : String)\n-   is\n+   procedure Put_Used_Char_Set (File : File_Descriptor; Title : String) is\n       F : constant Natural := Character'Pos (Character'First);\n       L : constant Natural := Character'Pos (Character'Last);\n \n@@ -1899,10 +1872,7 @@ package body GNAT.Perfect_Hash_Generators is\n    -- Put_Vertex_Table --\n    ----------------------\n \n-   procedure Put_Vertex_Table\n-     (File  : File_Descriptor;\n-      Title : String)\n-   is\n+   procedure Put_Vertex_Table (File : File_Descriptor; Title : String) is\n       F1 : constant Natural := 0;\n       L1 : constant Natural := NV - 1;\n       M  : constant Natural := Max / 4;\n@@ -1924,8 +1894,8 @@ package body GNAT.Perfect_Hash_Generators is\n    -- Random --\n    ------------\n \n-   procedure Random (Seed : in out Natural)\n-   is\n+   procedure Random (Seed : in out Natural) is\n+\n       --  Park & Miller Standard Minimal using Schrage's algorithm to avoid\n       --  overflow: Xn+1 = 16807 * Xn mod (2 ** 31 - 1)\n \n@@ -2054,7 +2024,7 @@ package body GNAT.Perfect_Hash_Generators is\n             WT.Table (Target) := WT.Table (Source);\n          end Move;\n \n-         --  Start of processing for Build_Identical_Key_Sets\n+      --  Start of processing for Build_Identical_Key_Sets\n \n       begin\n          Last := 0;\n@@ -2278,8 +2248,7 @@ package body GNAT.Perfect_Hash_Generators is\n    -- Select_Character_Set --\n    --------------------------\n \n-   procedure Select_Character_Set\n-   is\n+   procedure Select_Character_Set is\n       Last : Natural := 0;\n       Used : array (Character) of Boolean := (others => False);\n       Char : Character;"}]}