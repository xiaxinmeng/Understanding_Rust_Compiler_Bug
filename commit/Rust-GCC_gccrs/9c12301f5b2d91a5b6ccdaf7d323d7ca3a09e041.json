{"sha": "9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMxMjMwMWY1YjJkOTFhNWI2Y2NkYWY3ZDMyM2Q3Y2EzYTA5ZTA0MQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-09-15T16:03:32Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-09-15T16:03:32Z"}, "message": "re PR c++/13140 (declaration in global namespace, definition inside named or anon namespace)\n\n\tPR c++/13140\n\t* decl.c (check_class_member_definition_namespace): New function.\n\t(grokfndecl): Use it.\n\t(grokvardecl): Likewise.\n\t(grokdecl): Improve documentation.\n\t* pt.c (check_explicit_instantiation_namespace): New function.\n\t(register_specialization): Call check_specialization_namespace\n\twhen replacing an implicitly instantiated function.\n\t(check_explicit_specialization): Ensure that DECL_CONTEXT is set\n\tcorrectly for namespace-scope specializations.\n\t(do_decl_instantiation): Use\n\tcheck_explicit_instantiation_namespace.\n\t(do_type_instantiation): Likewise.\n\n\tPR c++/13140\n\t* g++.dg/parse/class2.C: New test.\n\t* g++.dg/template/explicit8.C: Likewise.\n\t* g++.dg/template/spec25.C: Likewise.\n\n\t* testsuite/testsuite_character.h: Specialize character<>\n\ttemplates in __gnu_cxx, not in __gnu_test.\n\nFrom-SVN: r104310", "tree": {"sha": "afc83bbd1a00cee91c0be29bdd545cafdb20f9d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afc83bbd1a00cee91c0be29bdd545cafdb20f9d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/comments", "author": null, "committer": null, "parents": [{"sha": "c629e611eb78853f8ccd85173b758cabbdc0e56b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c629e611eb78853f8ccd85173b758cabbdc0e56b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c629e611eb78853f8ccd85173b758cabbdc0e56b"}], "stats": {"total": 171, "additions": 157, "deletions": 14}, "files": [{"sha": "37588de45c859c867b864977ee9304d73901496c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041", "patch": "@@ -1,3 +1,19 @@\n+2005-09-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13140\n+\t* decl.c (check_class_member_definition_namespace): New function.\n+\t(grokfndecl): Use it.\n+\t(grokvardecl): Likewise.\n+\t(grokdecl): Improve documentation.\n+\t* pt.c (check_explicit_instantiation_namespace): New function.\n+\t(register_specialization): Call check_specialization_namespace\n+\twhen replacing an implicitly instantiated function.\n+\t(check_explicit_specialization): Ensure that DECL_CONTEXT is set\n+\tcorrectly for namespace-scope specializations.\n+\t(do_decl_instantiation): Use\n+\tcheck_explicit_instantiation_namespace.\n+\t(do_type_instantiation): Likewise.\n+\n 2005-09-15  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/23725"}, {"sha": "e3dbc83cb35d4ab209055d37b611b526465c3a9c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041", "patch": "@@ -5584,6 +5584,41 @@ bad_specifiers (tree object,\n     error (\"%q+D declared with an exception specification\", object);\n }\n \n+/* DECL is a member function or static data member and is presently\n+   being defined.  Check that the definition is taking place in a\n+   valid namespace.  */\n+\n+static void\n+check_class_member_definition_namespace (tree decl)\n+{\n+  /* These checks only apply to member functions and static data\n+     members.  */\n+  gcc_assert (TREE_CODE (decl) == FUNCTION_DECL\n+\t      || TREE_CODE (decl) == VAR_DECL);\n+  /* We check for problems with specializations in pt.c in\n+     check_specialization_namespace, where we can issue better\n+     diagnostics.  */\n+  if (processing_specialization)\n+    return;\n+  /* There are no restrictions on the placement of\n+     explicit instantiations.  */\n+  if (processing_explicit_instantiation)\n+    return;\n+  /* [class.mfct]\n+\n+     A member function definition that appears outside of the\n+     class definition shall appear in a namespace scope enclosing\n+     the class definition.\n+\n+     [class.static.data]\n+\n+     The definition for a static data member shall appear in a\n+     namespace scope enclosing the member's class definition.  */\n+  if (!is_ancestor (current_namespace, DECL_CONTEXT (decl)))\n+    pedwarn (\"definition of %qD is not in namespace enclosing %qT\",\n+\t     decl, DECL_CONTEXT (decl));\n+}\n+\n /* CTYPE is class type, or null if non-class.\n    TYPE is type this FUNCTION_DECL should have, either FUNCTION_TYPE\n    or METHOD_TYPE.\n@@ -5662,7 +5697,11 @@ grokfndecl (tree ctype,\n     }\n \n   if (ctype)\n-    DECL_CONTEXT (decl) = ctype;\n+    {\n+      DECL_CONTEXT (decl) = ctype;\n+      if (funcdef_flag)\n+\tcheck_class_member_definition_namespace (decl);\n+    }\n \n   if (ctype == NULL_TREE && DECL_MAIN_P (decl))\n     {\n@@ -5994,6 +6033,7 @@ grokvardecl (tree type,\n       set_linkage_for_static_data_member (decl);\n       /* This function is only called with out-of-class definitions.  */\n       DECL_EXTERNAL (decl) = 0;\n+      check_class_member_definition_namespace (decl);\n     }\n   /* At top level, either `static' or no s.c. makes a definition\n      (perhaps tentative), and absence of `static' makes it public.  */\n@@ -7483,8 +7523,13 @@ grokdeclarator (const cp_declarator *declarator,\n       unqualified_id = dname;\n     }\n \n-  /* If DECLARATOR is non-NULL, we know it is a cdk_id declarator;\n-     otherwise, we would not have exited the loop above.  */\n+  /* If TYPE is a FUNCTION_TYPE, but the function name was explicitly\n+     qualified with a class-name, turn it into a METHOD_TYPE, unless\n+     we know that the function is static.  We take advantage of this\n+     opportunity to do other processing that pertains to entities\n+     explicitly declared to be class members.  Note that if DECLARATOR\n+     is non-NULL, we know it is a cdk_id declarator; otherwise, we\n+     would not have exited the loop above.  */\n   if (declarator\n       && declarator->u.id.qualifying_scope\n       && TYPE_P (declarator->u.id.qualifying_scope))\n@@ -7571,6 +7616,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t}\n     }\n \n+  /* Now TYPE has the actual type.  */\n+\n   if (returned_attrs)\n     {\n       if (attrlist)\n@@ -7579,8 +7626,6 @@ grokdeclarator (const cp_declarator *declarator,\n \tattrlist = &returned_attrs;\n     }\n \n-  /* Now TYPE has the actual type.  */\n-\n   /* Did array size calculations overflow?  */\n \n   if (TREE_CODE (type) == ARRAY_TYPE"}, {"sha": "3fe3152dcbda6800d4b5843f0205f4af23d2f1d4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041", "patch": "@@ -672,6 +672,23 @@ check_specialization_namespace (tree tmpl)\n     }\n }\n \n+/* SPEC is an explicit instantiation.  Check that it is valid to\n+   perform this explicit instantiation in the current namespace.  */\n+\n+static void\n+check_explicit_instantiation_namespace (tree spec)\n+{\n+  tree ns;\n+\n+  /* DR 275: An explicit instantiation shall appear in an enclosing\n+     namespace of its template.  */ \n+  ns = decl_namespace_context (spec);\n+  if (!is_ancestor (current_namespace, ns))\n+    pedwarn (\"explicit instantiation of %qD in namespace %qD \"\n+\t     \"(which does not enclose namespace %qD)\"\n+\t     spec, current_namespace, ns);\n+}\n+\n /* The TYPE is being declared.  If it is a template type, that means it\n    is a partial specialization.  Do appropriate error-checking.  */\n \n@@ -1187,6 +1204,7 @@ register_specialization (tree spec, tree tmpl, tree args, bool is_friend)\n \t\t there were no definition, and vice versa.  */\n \t      DECL_INITIAL (fn) = NULL_TREE;\n \t      duplicate_decls (spec, fn, is_friend);\n+\t      check_specialization_namespace (fn);\n \n \t      return fn;\n \t    }\n@@ -2087,14 +2105,26 @@ check_explicit_specialization (tree declarator,\n \t     template it specializes.  */\n \t  TREE_PRIVATE (decl) = TREE_PRIVATE (gen_tmpl);\n \t  TREE_PROTECTED (decl) = TREE_PROTECTED (gen_tmpl);\n-\n \t  /* The specialization has the same visibility as the\n \t     template it specializes.  */\n \t  if (DECL_VISIBILITY_SPECIFIED (gen_tmpl))\n \t    {\n \t      DECL_VISIBILITY_SPECIFIED (decl) = 1;\n \t      DECL_VISIBILITY (decl) = DECL_VISIBILITY (gen_tmpl);\n \t    }\n+\t  /* If DECL is a friend declaration, declared using an\n+\t     unqualified name, the namespace associated with DECL may\n+\t     have been set incorrectly.  For example, in:\n+\t     \n+\t       template <typename T> void f(T); \n+               namespace N {\n+  \t         struct S { friend void f<int>(int); }\n+               }\n+\n+             we will have set the DECL_CONTEXT for the friend\n+             declaration to N, rather than to the global namespace.  */\n+\t  if (DECL_NAMESPACE_SCOPE_P (decl))\n+\t    DECL_CONTEXT (decl) = DECL_CONTEXT (tmpl);\n \n \t  if (is_friend && !have_def)\n \t    /* This is not really a declaration of a specialization.\n@@ -10998,7 +11028,8 @@ do_decl_instantiation (tree decl, tree storage)\n     }\n   else\n     error (\"storage class %qD applied to template instantiation\", storage);\n-\n+  \n+  check_explicit_instantiation_namespace (result);\n   mark_decl_instantiated (result, extern_p);\n   if (! extern_p)\n     instantiate_decl (result, /*defer_ok=*/1, \n@@ -11130,6 +11161,7 @@ do_type_instantiation (tree t, tree storage, tsubst_flags_t complain)\n \treturn;\n     }\n \n+  check_explicit_instantiation_namespace (TYPE_NAME (t));\n   mark_class_instantiated (t, extern_p);\n \n   if (nomem_p)"}, {"sha": "fd27b788d4311e4c2d0a7edb8611d1587142e794", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041", "patch": "@@ -1,3 +1,10 @@\n+2005-09-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13140\n+\t* g++.dg/parse/class2.C: New test.\n+\t* g++.dg/template/explicit8.C: Likewise.\n+\t* g++.dg/template/spec25.C: Likewise.\n+\n 2005-09-14  Josh Conner  <jconner@apple.com>\n \n \tPR middle-end/23584"}, {"sha": "2014f9b50e4ce0f633cf94437cbc5fef1c8d9884", "filename": "gcc/testsuite/g++.dg/parse/class2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fclass2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fclass2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fclass2.C?ref=9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/13140\n+\n+struct foo {\n+  foo();\n+  void f();\n+  static int i;\n+};\n+\n+\n+namespace bar {\n+  foo::foo() {} // { dg-error \"namespace\" }\n+  void foo::f() {} // { dg-error \"namespace\" }\n+  int foo::i; // { dg-error \"namespace\" } \n+}"}, {"sha": "4b92dbe39e48db19e1937b54202ed7146257771c", "filename": "gcc/testsuite/g++.dg/template/explicit8.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit8.C?ref=9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041", "patch": "@@ -0,0 +1,13 @@\n+namespace N {\n+  template <typename T>\n+  struct S {\n+    void f() {}\n+  };\n+  namespace I {\n+    template void S<double>::f(); // { dg-error \"namespace\" }\n+  }\n+}\n+\n+namespace K {\n+  template void N::S<int>::f(); // { dg-error \"namespace\" }\n+}"}, {"sha": "3f641fe5a212b3cee86eb0af810e60350db439e5", "filename": "gcc/testsuite/g++.dg/template/spec25.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec25.C?ref=9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041", "patch": "@@ -0,0 +1,10 @@\n+namespace N {\n+  template <typename T>\n+  struct S {\n+    void f() {}\n+  };\n+}\n+\n+namespace K {\n+  template <> void N::S<char>::f() {} // { dg-error \"namespace|definition\" }\n+}"}, {"sha": "9585c6cf1291dfe30665bf4c7e4666586f7d0345", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041", "patch": "@@ -1,3 +1,8 @@\n+2005-09-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* testsuite/testsuite_character.h: Specialize character<>\n+\ttemplates in __gnu_cxx, not in __gnu_test.\n+\n 2005-09-13  Jonathan Wakely  <cow@compsoc.man.ac.uk>\n \t    Benjamin Kosnik  <bkoz@redhat.com>\n "}, {"sha": "3d6a3f2d1c23016446fa154e4833b15bd2b1ed87", "filename": "libstdc++-v3/testsuite/testsuite_character.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h?ref=9c12301f5b2d91a5b6ccdaf7d323d7ca3a09e041", "patch": "@@ -72,13 +72,15 @@ namespace __gnu_test\n   typedef character<unsigned char, unsigned int, pod_state>  \tpod_uchar;\n   typedef character<unsigned short, unsigned int>\t   \tpod_ushort;\n   typedef character<unsigned int, unsigned long>\t   \tpod_uint;  \n+}\n \n+namespace __gnu_cxx {\n   // Specializations.\n   // pod_char\n   template<>\n     template<typename V2>\n-      inline pod_char::char_type\n-      pod_char::char_type::from(const V2& v)\n+      inline __gnu_test::pod_char::char_type\n+      __gnu_test::pod_char::char_type::from(const V2& v)\n       {\n \tchar_type ret = { static_cast<value_type>(v.value) };\n \treturn ret;\n@@ -87,17 +89,16 @@ namespace __gnu_test\n   template<>\n     template<typename V2>\n       inline V2\n-      pod_char::char_type::to(const char_type& c)\n+      __gnu_test::pod_char::char_type::to(const char_type& c)\n       {\n \tV2 ret = { c.value };\n \treturn ret;\n       }\n   \n-  // pod_uchar\n   template<>\n     template<typename V2>\n-      inline pod_uchar::char_type\n-      pod_uchar::char_type::from(const V2& v)\n+      inline __gnu_test::pod_uchar::char_type\n+      __gnu_test::pod_uchar::char_type::from(const V2& v)\n       {\n \tchar_type ret;\n \tret.value = (v >> 5);\n@@ -107,7 +108,7 @@ namespace __gnu_test\n   template<>\n     template<typename V2>\n       inline V2\n-      pod_uchar::char_type::to(const char_type& c)\n+      __gnu_test::pod_uchar::char_type::to(const char_type& c)\n       { return static_cast<V2>(c.value << 5); }\n }; // namespace __gnu_test\n "}]}