{"sha": "04a99ebecee885e42e56b6e0c832570e2a91c196", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRhOTllYmVjZWU4ODVlNDJlNTZiNmUwYzgzMjU3MGUyYTkxYzE5Ng==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-04-11T10:14:59Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-04-11T10:14:59Z"}, "message": "[Patch AArch64 2/3] Rework the code to print extension strings (pr70133)\n\ngcc/\n\n\tPR target/70133\n\t* config/aarch64/aarch64-common.c (aarch64_option_extension): Keep\n\ttrack of a canonical flag name.\n\t(all_extensions): Likewise.\n\t(arch_to_arch_name): Also track extension flags enabled by the arch.\n\t(all_architectures): Likewise.\n\t(aarch64_parse_extension): Move to here.\n\t(aarch64_get_extension_string_for_isa_flags): Take a new argument,\n\trework.\n\t(aarch64_rewrite_selected_cpu): Update for above change.\n\t* config/aarch64/aarch64-option-extensions.def: Rework the way flags\n\tare handled, such that the single explicit value enabled by an\n\textension is kept seperate from the implicit values it also enables.\n\t* config/aarch64/aarch64-protos.h (aarch64_parse_opt_result): Move\n\tto here.\n\t(aarch64_parse_extension): New.\n\t* config/aarch64/aarch64.c (aarch64_parse_opt_result): Move from\n\there to config/aarch64/aarch64-protos.h.\n\t(aarch64_parse_extension): Move from here to\n\tcommon/config/aarch64/aarch64-common.c.\n\t(aarch64_option_print): Update.\n\t(aarch64_declare_function_name): Likewise.\n\t(aarch64_start_file): Likewise.\n\t* config/aarch64/driver-aarch64.c (arch_extension): Keep track of\n\tthe canonical flag for extensions.\n\t* config.gcc (aarch64*-*-*): Extend regex for capturing extension\n\tflags.\n\ngcc/testsuite/\n\n\tPR target/70133\n\t* gcc.target/aarch64/mgeneral-regs_4.c: Fix expected output.\n\t* gcc.target/aarch64/target_attr_15.c: Likewise.\n\nFrom-SVN: r234876", "tree": {"sha": "af54bbd8e515f6707e7b7eff6e5bfda5a7b48a79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af54bbd8e515f6707e7b7eff6e5bfda5a7b48a79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04a99ebecee885e42e56b6e0c832570e2a91c196", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a99ebecee885e42e56b6e0c832570e2a91c196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a99ebecee885e42e56b6e0c832570e2a91c196", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a99ebecee885e42e56b6e0c832570e2a91c196/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a60fd657ad8290d9916082dd8a31bd4b830c5e5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a60fd657ad8290d9916082dd8a31bd4b830c5e5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a60fd657ad8290d9916082dd8a31bd4b830c5e5f"}], "stats": {"total": 323, "additions": 206, "deletions": 117}, "files": [{"sha": "fe431824ca253738d78dbb35b5e261dccb8b537b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04a99ebecee885e42e56b6e0c832570e2a91c196", "patch": "@@ -1,3 +1,33 @@\n+2016-04-11  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\tPR target/70133\n+\t* config/aarch64/aarch64-common.c (aarch64_option_extension): Keep\n+\ttrack of a canonical flag name.\n+\t(all_extensions): Likewise.\n+\t(arch_to_arch_name): Also track extension flags enabled by the arch.\n+\t(all_architectures): Likewise.\n+\t(aarch64_parse_extension): Move to here.\n+\t(aarch64_get_extension_string_for_isa_flags): Take a new argument,\n+\trework.\n+\t(aarch64_rewrite_selected_cpu): Update for above change.\n+\t* config/aarch64/aarch64-option-extensions.def: Rework the way flags\n+\tare handled, such that the single explicit value enabled by an\n+\textension is kept seperate from the implicit values it also enables.\n+\t* config/aarch64/aarch64-protos.h (aarch64_parse_opt_result): Move\n+\tto here.\n+\t(aarch64_parse_extension): New.\n+\t* config/aarch64/aarch64.c (aarch64_parse_opt_result): Move from\n+\there to config/aarch64/aarch64-protos.h.\n+\t(aarch64_parse_extension): Move from here to\n+\tcommon/config/aarch64/aarch64-common.c.\n+\t(aarch64_option_print): Update.\n+\t(aarch64_declare_function_name): Likewise.\n+\t(aarch64_start_file): Likewise.\n+\t* config/aarch64/driver-aarch64.c (arch_extension): Keep track of\n+\tthe canonical flag for extensions.\n+\t* config.gcc (aarch64*-*-*): Extend regex for capturing extension\n+\tflags.\n+\n 2016-04-11  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64.h (AARCH64_FL_FOR_ARCH8_1): Also add"}, {"sha": "08e795934207d015d9fa22c3822930af4a21c93a", "filename": "gcc/common/config/aarch64/aarch64-common.c", "status": "modified", "additions": 103, "deletions": 13, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c?ref=04a99ebecee885e42e56b6e0c832570e2a91c196", "patch": "@@ -112,18 +112,19 @@ struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;\n struct aarch64_option_extension\n {\n   const char *const name;\n+  const unsigned long flag_canonical;\n   const unsigned long flags_on;\n   const unsigned long flags_off;\n };\n \n /* ISA extensions in AArch64.  */\n static const struct aarch64_option_extension all_extensions[] =\n {\n-#define AARCH64_OPT_EXTENSION(NAME, FLAGS_ON, FLAGS_OFF, FEATURE_STRING) \\\n-  {NAME, FLAGS_ON, FLAGS_OFF},\n+#define AARCH64_OPT_EXTENSION(NAME, FLAG_CANONICAL, FLAGS_ON, FLAGS_OFF, Z) \\\n+  {NAME, FLAG_CANONICAL, FLAGS_ON, FLAGS_OFF},\n #include \"config/aarch64/aarch64-option-extensions.def\"\n #undef AARCH64_OPT_EXTENSION\n-  {NULL, 0, 0}\n+  {NULL, 0, 0, 0}\n };\n \n struct processor_name_to_arch\n@@ -137,6 +138,7 @@ struct arch_to_arch_name\n {\n   const enum aarch64_arch arch;\n   const std::string arch_name;\n+  const unsigned long flags;\n };\n \n /* Map processor names to the architecture revision they implement and\n@@ -155,26 +157,111 @@ static const struct processor_name_to_arch all_cores[] =\n static const struct arch_to_arch_name all_architectures[] =\n {\n #define AARCH64_ARCH(NAME, CORE, ARCH_IDENT, ARCH, FLAGS) \\\n-  {AARCH64_ARCH_##ARCH_IDENT, NAME},\n+  {AARCH64_ARCH_##ARCH_IDENT, NAME, FLAGS},\n #include \"config/aarch64/aarch64-arches.def\"\n #undef AARCH64_ARCH\n-  {aarch64_no_arch, \"\"}\n+  {aarch64_no_arch, \"\", 0}\n };\n \n-/* Return a string representation of ISA_FLAGS.  */\n+/* Parse the architecture extension string STR and update ISA_FLAGS\n+   with the architecture features turned on or off.  Return a\n+   aarch64_parse_opt_result describing the result.  */\n+\n+enum aarch64_parse_opt_result\n+aarch64_parse_extension (const char *str, unsigned long *isa_flags)\n+{\n+  /* The extension string is parsed left to right.  */\n+  const struct aarch64_option_extension *opt = NULL;\n+\n+  /* Flag to say whether we are adding or removing an extension.  */\n+  int adding_ext = -1;\n+\n+  while (str != NULL && *str != 0)\n+    {\n+      const char *ext;\n+      size_t len;\n+\n+      str++;\n+      ext = strchr (str, '+');\n+\n+      if (ext != NULL)\n+\tlen = ext - str;\n+      else\n+\tlen = strlen (str);\n+\n+      if (len >= 2 && strncmp (str, \"no\", 2) == 0)\n+\t{\n+\t  adding_ext = 0;\n+\t  len -= 2;\n+\t  str += 2;\n+\t}\n+      else if (len > 0)\n+\tadding_ext = 1;\n+\n+      if (len == 0)\n+\treturn AARCH64_PARSE_MISSING_ARG;\n+\n+\n+      /* Scan over the extensions table trying to find an exact match.  */\n+      for (opt = all_extensions; opt->name != NULL; opt++)\n+\t{\n+\t  if (strlen (opt->name) == len && strncmp (opt->name, str, len) == 0)\n+\t    {\n+\t      /* Add or remove the extension.  */\n+\t      if (adding_ext)\n+\t\t*isa_flags |= (opt->flags_on | opt->flag_canonical);\n+\t      else\n+\t\t*isa_flags &= ~(opt->flags_off | opt->flag_canonical);\n+\t      break;\n+\t    }\n+\t}\n+\n+      if (opt->name == NULL)\n+\t{\n+\t  /* Extension not found in list.  */\n+\t  return AARCH64_PARSE_INVALID_FEATURE;\n+\t}\n+\n+      str = ext;\n+    };\n+\n+  return AARCH64_PARSE_OK;\n+}\n+\n+/* Return a string representation of ISA_FLAGS.  DEFAULT_ARCH_FLAGS\n+   gives the default set of flags which are implied by whatever -march\n+   we'd put out.  Our job is to figure out the minimal set of \"+\" and\n+   \"+no\" feature flags to put out, and to put them out grouped such\n+   that all the \"+\" flags come before the \"+no\" flags.  */\n \n std::string\n-aarch64_get_extension_string_for_isa_flags (unsigned long isa_flags)\n+aarch64_get_extension_string_for_isa_flags (unsigned long isa_flags,\n+\t\t\t\t\t    unsigned long default_arch_flags)\n {\n   const struct aarch64_option_extension *opt = NULL;\n   std::string outstr = \"\";\n \n+  /* Pass one: Find all the things we need to turn on.  As a special case,\n+     we always want to put out +crc if it is enabled.  */\n   for (opt = all_extensions; opt->name != NULL; opt++)\n-    if ((isa_flags & opt->flags_on) == opt->flags_on)\n+    if ((isa_flags & opt->flag_canonical\n+\t && !(default_arch_flags & opt->flag_canonical))\n+\t|| (default_arch_flags & opt->flag_canonical\n+            && opt->flag_canonical == AARCH64_ISA_CRC))\n       {\n \toutstr += \"+\";\n \toutstr += opt->name;\n       }\n+\n+  /* Pass two: Find all the things we need to turn off.  */\n+  for (opt = all_extensions; opt->name != NULL; opt++)\n+    if ((~isa_flags) & opt->flag_canonical\n+\t&& !((~default_arch_flags) & opt->flag_canonical))\n+      {\n+\toutstr += \"+no\";\n+\toutstr += opt->name;\n+      }\n+\n   return outstr;\n }\n \n@@ -186,16 +273,16 @@ const char *\n aarch64_rewrite_selected_cpu (const char *name)\n {\n   std::string original_string (name);\n-  std::string extensions;\n+  std::string extension_str;\n   std::string processor;\n   size_t extension_pos = original_string.find_first_of ('+');\n \n   /* Strip and save the extension string.  */\n   if (extension_pos != std::string::npos)\n     {\n       processor = original_string.substr (0, extension_pos);\n-      extensions = original_string.substr (extension_pos,\n-\t\t\t\t\tstd::string::npos);\n+      extension_str = original_string.substr (extension_pos,\n+\t\t\t\t\t      std::string::npos);\n     }\n   else\n     {\n@@ -227,9 +314,12 @@ aarch64_rewrite_selected_cpu (const char *name)\n       || a_to_an->arch == aarch64_no_arch)\n     fatal_error (input_location, \"unknown value %qs for -mcpu\", name);\n \n+  unsigned long extensions = p_to_a->flags;\n+  aarch64_parse_extension (extension_str.c_str (), &extensions);\n+\n   std::string outstr = a_to_an->arch_name\n-\t+ aarch64_get_extension_string_for_isa_flags (p_to_a->flags)\n-\t+ extensions;\n+\t+ aarch64_get_extension_string_for_isa_flags (extensions,\n+\t\t\t\t\t\t      a_to_an->flags);\n \n   /* We are going to memory leak here, nobody elsewhere\n      in the callchain is going to clean up after us.  The alternative is"}, {"sha": "f66e48cd1caacb9d1d4258146a2afe3dc2d1b424", "filename": "gcc/config.gcc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=04a99ebecee885e42e56b6e0c832570e2a91c196", "patch": "@@ -3620,22 +3620,28 @@ case \"${target}\" in\n \t\t\t\t    ${srcdir}/config/aarch64/aarch64-option-extensions.def \\\n \t\t\t\t    > /dev/null; then\n \n-\t\t\t\t  ext_on=`grep \"^AARCH64_OPT_EXTENSION(\\\"$base_ext\\\",\" \\\n+\t\t\t\t  ext_canon=`grep \"^AARCH64_OPT_EXTENSION(\\\"$base_ext\\\",\" \\\n \t\t\t\t\t${srcdir}/config/aarch64/aarch64-option-extensions.def | \\\n \t\t\t\t\tsed -e 's/^[^,]*,[ \t]*//' | \\\n \t\t\t\t\tsed -e 's/,.*$//'`\n-\t\t\t\t  ext_off=`grep \"^AARCH64_OPT_EXTENSION(\\\"$base_ext\\\",\" \\\n+\t\t\t\t  ext_on=`grep \"^AARCH64_OPT_EXTENSION(\\\"$base_ext\\\",\" \\\n \t\t\t\t\t${srcdir}/config/aarch64/aarch64-option-extensions.def | \\\n \t\t\t\t\tsed -e 's/^[^,]*,[ \t]*[^,]*,[ \t]*//' | \\\n \t\t\t\t\tsed -e 's/,.*$//' | \\\n \t\t\t\t\tsed -e 's/).*$//'`\n+\t\t\t\t  ext_off=`grep \"^AARCH64_OPT_EXTENSION(\\\"$base_ext\\\",\" \\\n+\t\t\t\t\t${srcdir}/config/aarch64/aarch64-option-extensions.def | \\\n+\t\t\t\t\tsed -e 's/^[^,]*,[ \t]*[^,]*,[ \t]*[^,]*,[ \t]*//' | \\\n+\t\t\t\t\tsed -e 's/,.*$//' | \\\n+\t\t\t\t\tsed -e 's/).*$//'`\n+\n \n \t\t\t\t  if [ $ext = $base_ext ]; then\n \t\t\t\t\t# Adding extension\n-\t\t\t\t\text_mask=\"(\"$ext_mask\") | (\"$ext_on\")\"\n+\t\t\t\t\text_mask=\"(\"$ext_mask\") | (\"$ext_on\" | \"$ext_canon\")\"\n \t\t\t\t  else\n \t\t\t\t\t# Removing extension\n-\t\t\t\t\text_mask=\"(\"$ext_mask\") & ~(\"$ext_off\")\"\n+\t\t\t\t\text_mask=\"(\"$ext_mask\") & ~(\"$ext_off\" | \"$ext_canon\")\"\n \t\t\t\t  fi\n \n \t\t\t\t  true"}, {"sha": "e8706d1c2e798872b8028cce1d9d193df8fef0be", "filename": "gcc/config/aarch64/aarch64-option-extensions.def", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def?ref=04a99ebecee885e42e56b6e0c832570e2a91c196", "patch": "@@ -21,23 +21,37 @@\n \n    Before using #include to read this file, define a macro:\n \n-      AARCH64_OPT_EXTENSION(EXT_NAME, FLAGS_ON, FLAGS_OFF, FEATURE_STRING)\n+      AARCH64_OPT_EXTENSION(EXT_NAME, FLAG_CANONICAL, FLAGS_ON, FLAGS_OFF, FEATURE_STRING)\n \n    EXT_NAME is the name of the extension, represented as a string constant.\n-   FLAGS_ON are the bitwise-or of the features that the extension adds.\n-   FLAGS_OFF are the bitwise-or of the features that the extension removes.\n+   FLAGS_CANONICAL is the canonical internal name for this flag.\n+   FLAGS_ON are the bitwise-or of the features that enabling the extension\n+   adds, or zero if enabling this extension has no effect on other features.\n+   FLAGS_OFF are the bitwise-or of the features that disabling the extension\n+   removes, or zero if disabling this extension has no effect on other\n+   features.\n    FEAT_STRING is a string containing the entries in the 'Features' field of\n    /proc/cpuinfo on a GNU/Linux system that correspond to this architecture\n    extension being available.  Sometimes multiple entries are needed to enable\n    the extension (for example, the 'crypto' extension depends on four\n    entries: aes, pmull, sha1, sha2 being present).  In that case this field\n-   should contain a whitespace-separated list of the strings in 'Features'\n+   should contain a space (\" \") separated list of the strings in 'Features'\n    that are required.  Their order is not important.  */\n \n-AARCH64_OPT_EXTENSION (\"fp\", AARCH64_FL_FP,\n-\t\t       AARCH64_FL_FPSIMD | AARCH64_FL_CRYPTO, \"fp\")\n-AARCH64_OPT_EXTENSION (\"simd\", AARCH64_FL_FPSIMD,\n-\t\t       AARCH64_FL_SIMD | AARCH64_FL_CRYPTO, \"asimd\")\n-AARCH64_OPT_EXTENSION(\"crypto\",\tAARCH64_FL_CRYPTO | AARCH64_FL_FPSIMD,  AARCH64_FL_CRYPTO,   \"aes pmull sha1 sha2\")\n-AARCH64_OPT_EXTENSION(\"crc\",\tAARCH64_FL_CRC,                         AARCH64_FL_CRC,                        \"crc32\")\n-AARCH64_OPT_EXTENSION(\"lse\",\tAARCH64_FL_LSE,                         AARCH64_FL_LSE,                        \"atomics\")\n+/* Enabling \"fp\" just enables \"fp\".\n+   Disabling \"fp\" also disables \"simd\", \"crypto\".  */\n+AARCH64_OPT_EXTENSION(\"fp\", AARCH64_FL_FP, 0, AARCH64_FL_SIMD | AARCH64_FL_CRYPTO, \"fp\")\n+\n+/* Enabling \"simd\" also enables \"fp\".\n+   Disabling \"simd\" also disables \"crypto\".  */\n+AARCH64_OPT_EXTENSION(\"simd\", AARCH64_FL_SIMD, AARCH64_FL_FP, AARCH64_FL_CRYPTO, \"asimd\")\n+\n+/* Enabling \"crypto\" also enables \"fp\", \"simd\".\n+   Disabling \"crypto\" just disables \"crypto\".  */\n+AARCH64_OPT_EXTENSION(\"crypto\", AARCH64_FL_CRYPTO, AARCH64_FL_FP | AARCH64_FL_SIMD, 0, \"aes pmull sha1 sha2\")\n+\n+/* Enabling or disabling \"crc\" only changes \"crc\".  */\n+AARCH64_OPT_EXTENSION(\"crc\", AARCH64_FL_CRC, 0, 0, \"crc32\")\n+\n+/* Enabling or disabling \"lse\" only changes \"lse\".  */\n+AARCH64_OPT_EXTENSION(\"lse\", AARCH64_FL_LSE, 0, 0, \"atomics\")"}, {"sha": "f22a31c28307e22f79e393441c59ec9c0a47d8b3", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=04a99ebecee885e42e56b6e0c832570e2a91c196", "patch": "@@ -263,6 +263,18 @@ enum aarch64_extra_tuning_flags\n };\n #undef AARCH64_EXTRA_TUNING_OPTION\n \n+/* Enum describing the various ways that the\n+   aarch64_parse_{arch,tune,cpu,extension} functions can fail.\n+   This way their callers can choose what kind of error to give.  */\n+\n+enum aarch64_parse_opt_result\n+{\n+  AARCH64_PARSE_OK,\t\t\t/* Parsing was successful.  */\n+  AARCH64_PARSE_MISSING_ARG,\t\t/* Missing argument.  */\n+  AARCH64_PARSE_INVALID_FEATURE,\t/* Invalid feature modifier.  */\n+  AARCH64_PARSE_INVALID_ARG\t\t/* Invalid arch, tune, cpu arg.  */\n+};\n+\n extern struct tune_params aarch64_tune_params;\n \n HOST_WIDE_INT aarch64_initial_elimination_offset (unsigned, unsigned);\n@@ -280,8 +292,6 @@ bool aarch64_float_const_zero_rtx_p (rtx);\n bool aarch64_function_arg_regno_p (unsigned);\n bool aarch64_gen_movmemqi (rtx *);\n bool aarch64_gimple_fold_builtin (gimple_stmt_iterator *);\n-bool aarch64_handle_option (struct gcc_options *, struct gcc_options *,\n-\t\t\t     const struct cl_decoded_option *, location_t);\n bool aarch64_is_extend_from_extract (machine_mode, rtx, rtx);\n bool aarch64_is_long_call_p (rtx);\n bool aarch64_is_noplt_call_p (rtx);\n@@ -315,7 +325,6 @@ bool aarch64_uimm12_shift (HOST_WIDE_INT);\n bool aarch64_use_return_insn_p (void);\n const char *aarch64_mangle_builtin_type (const_tree);\n const char *aarch64_output_casesi (rtx *);\n-const char *aarch64_rewrite_selected_cpu (const char *name);\n \n enum aarch64_symbol_type aarch64_classify_symbol (rtx, rtx);\n enum aarch64_symbol_type aarch64_classify_tls_symbol (rtx);\n@@ -338,7 +347,6 @@ rtx aarch64_simd_gen_const_vector_dup (machine_mode, int);\n bool aarch64_simd_mem_operand_p (rtx);\n rtx aarch64_simd_vect_par_cnst_half (machine_mode, bool);\n rtx aarch64_tls_get_addr (void);\n-std::string aarch64_get_extension_string_for_isa_flags (unsigned long);\n tree aarch64_fold_builtin (tree, int, tree *, bool);\n unsigned aarch64_dbx_register_number (unsigned);\n unsigned aarch64_trampoline_size (void);\n@@ -433,4 +441,13 @@ extern bool aarch64_nopcrelative_literal_loads;\n extern void aarch64_asm_output_pool_epilogue (FILE *, const char *,\n \t\t\t\t\t      tree, HOST_WIDE_INT);\n \n+/* Defined in common/config/aarch64-common.c.  */\n+bool aarch64_handle_option (struct gcc_options *, struct gcc_options *,\n+\t\t\t     const struct cl_decoded_option *, location_t);\n+const char *aarch64_rewrite_selected_cpu (const char *name);\n+enum aarch64_parse_opt_result aarch64_parse_extension (const char *,\n+\t\t\t\t\t\t       unsigned long *);\n+std::string aarch64_get_extension_string_for_isa_flags (unsigned long,\n+\t\t\t\t\t\t\tunsigned long);\n+\n #endif /* GCC_AARCH64_PROTOS_H */"}, {"sha": "999549426e6b13bc952b5b3acc0c54ad7e978aab", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 6, "deletions": 81, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=04a99ebecee885e42e56b6e0c832570e2a91c196", "patch": "@@ -666,7 +666,7 @@ struct aarch64_option_extension\n /* ISA extensions in AArch64.  */\n static const struct aarch64_option_extension all_extensions[] =\n {\n-#define AARCH64_OPT_EXTENSION(NAME, FLAGS_ON, FLAGS_OFF, FEATURE_STRING) \\\n+#define AARCH64_OPT_EXTENSION(NAME, X, FLAGS_ON, FLAGS_OFF, FEATURE_STRING) \\\n   {NAME, FLAGS_ON, FLAGS_OFF},\n #include \"aarch64-option-extensions.def\"\n #undef AARCH64_OPT_EXTENSION\n@@ -7673,83 +7673,6 @@ aarch64_add_stmt_cost (void *data, int count, enum vect_cost_for_stmt kind,\n \n static void initialize_aarch64_code_model (struct gcc_options *);\n \n-/* Enum describing the various ways that the\n-   aarch64_parse_{arch,tune,cpu,extension} functions can fail.\n-   This way their callers can choose what kind of error to give.  */\n-\n-enum aarch64_parse_opt_result\n-{\n-  AARCH64_PARSE_OK,\t\t\t/* Parsing was successful.  */\n-  AARCH64_PARSE_MISSING_ARG,\t\t/* Missing argument.  */\n-  AARCH64_PARSE_INVALID_FEATURE,\t/* Invalid feature modifier.  */\n-  AARCH64_PARSE_INVALID_ARG\t\t/* Invalid arch, tune, cpu arg.  */\n-};\n-\n-/* Parse the architecture extension string STR and update ISA_FLAGS\n-   with the architecture features turned on or off.  Return a\n-   aarch64_parse_opt_result describing the result.  */\n-\n-static enum aarch64_parse_opt_result\n-aarch64_parse_extension (char *str, unsigned long *isa_flags)\n-{\n-  /* The extension string is parsed left to right.  */\n-  const struct aarch64_option_extension *opt = NULL;\n-\n-  /* Flag to say whether we are adding or removing an extension.  */\n-  int adding_ext = -1;\n-\n-  while (str != NULL && *str != 0)\n-    {\n-      char *ext;\n-      size_t len;\n-\n-      str++;\n-      ext = strchr (str, '+');\n-\n-      if (ext != NULL)\n-\tlen = ext - str;\n-      else\n-\tlen = strlen (str);\n-\n-      if (len >= 2 && strncmp (str, \"no\", 2) == 0)\n-\t{\n-\t  adding_ext = 0;\n-\t  len -= 2;\n-\t  str += 2;\n-\t}\n-      else if (len > 0)\n-\tadding_ext = 1;\n-\n-      if (len == 0)\n-\treturn AARCH64_PARSE_MISSING_ARG;\n-\n-\n-      /* Scan over the extensions table trying to find an exact match.  */\n-      for (opt = all_extensions; opt->name != NULL; opt++)\n-\t{\n-\t  if (strlen (opt->name) == len && strncmp (opt->name, str, len) == 0)\n-\t    {\n-\t      /* Add or remove the extension.  */\n-\t      if (adding_ext)\n-\t\t*isa_flags |= opt->flags_on;\n-\t      else\n-\t\t*isa_flags &= ~(opt->flags_off);\n-\t      break;\n-\t    }\n-\t}\n-\n-      if (opt->name == NULL)\n-\t{\n-\t  /* Extension not found in list.  */\n-\t  return AARCH64_PARSE_INVALID_FEATURE;\n-\t}\n-\n-      str = ext;\n-    };\n-\n-  return AARCH64_PARSE_OK;\n-}\n-\n /* Parse the TO_PARSE string and put the architecture struct that it\n    selects into RES and the architectural features into ISA_FLAGS.\n    Return an aarch64_parse_opt_result describing the parse result.\n@@ -8550,7 +8473,7 @@ aarch64_option_print (FILE *file, int indent, struct cl_target_option *ptr)\n   unsigned long isa_flags = ptr->x_aarch64_isa_flags;\n   const struct processor *arch = aarch64_get_arch (ptr->x_explicit_arch);\n   std::string extension\n-    = aarch64_get_extension_string_for_isa_flags (isa_flags);\n+    = aarch64_get_extension_string_for_isa_flags (isa_flags, arch->flags);\n \n   fprintf (file, \"%*sselected tune = %s\\n\", indent, \"\", cpu->name);\n   fprintf (file, \"%*sselected arch = %s%s\\n\", indent, \"\",\n@@ -11213,7 +11136,8 @@ aarch64_declare_function_name (FILE *stream, const char* name,\n \n   unsigned long isa_flags = targ_options->x_aarch64_isa_flags;\n   std::string extension\n-    = aarch64_get_extension_string_for_isa_flags (isa_flags);\n+    = aarch64_get_extension_string_for_isa_flags (isa_flags,\n+\t\t\t\t\t\t  this_arch->flags);\n   /* Only update the assembler .arch string if it is distinct from the last\n      such string we printed.  */\n   std::string to_print = this_arch->name + extension;\n@@ -11253,7 +11177,8 @@ aarch64_start_file (void)\n     = aarch64_get_arch (default_options->x_explicit_arch);\n   unsigned long default_isa_flags = default_options->x_aarch64_isa_flags;\n   std::string extension\n-    = aarch64_get_extension_string_for_isa_flags (default_isa_flags);\n+    = aarch64_get_extension_string_for_isa_flags (default_isa_flags,\n+\t\t\t\t\t\t  default_arch->flags);\n \n    aarch64_last_printed_arch_string = default_arch->name + extension;\n    aarch64_last_printed_tune_string = \"\";"}, {"sha": "8925ec12667cde0b2e2121c4d1bf585bbb0476ea", "filename": "gcc/config/aarch64/driver-aarch64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c?ref=04a99ebecee885e42e56b6e0c832570e2a91c196", "patch": "@@ -23,11 +23,12 @@\n struct arch_extension\n {\n   const char *ext;\n+  unsigned int flag;\n   const char *feat_string;\n };\n \n-#define AARCH64_OPT_EXTENSION(EXT_NAME, FLAGS_ON, FLAGS_OFF, FEATURE_STRING) \\\n-  { EXT_NAME, FEATURE_STRING },\n+#define AARCH64_OPT_EXTENSION(EXT_NAME, FLAG_CANONICAL, FLAGS_ON, FLAGS_OFF, FEATURE_STRING) \\\n+  { EXT_NAME, FLAG_CANONICAL, FEATURE_STRING },\n static struct arch_extension ext_to_feat_string[] =\n {\n #include \"aarch64-option-extensions.def\""}, {"sha": "3a0f142021b0fa5ba12adfa674f3b3ffc5c0abed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04a99ebecee885e42e56b6e0c832570e2a91c196", "patch": "@@ -1,3 +1,9 @@\n+2016-04-11  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\tPR target/70133\n+\t* gcc.target/aarch64/mgeneral-regs_4.c: Fix expected output.\n+\t* gcc.target/aarch64/target_attr_15.c: Likewise.\n+\n 2016-04-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/69066"}, {"sha": "49b74d9e265c883ff7852d2db2529b68e3c9d9e6", "filename": "gcc/testsuite/gcc.target/aarch64/mgeneral-regs_4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmgeneral-regs_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmgeneral-regs_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmgeneral-regs_4.c?ref=04a99ebecee885e42e56b6e0c832570e2a91c196", "patch": "@@ -6,4 +6,4 @@ test (void)\n   return 1;\n }\n \n-/* { dg-final { scan-assembler \"\\.arch.*fp.*simd\" } } */\n+/* { dg-final { scan-assembler-times \"\\\\.arch armv8-a\\n\" 1 } } */"}, {"sha": "2d8c7b955ce3f7adb75e73f7c93e6c2f8772f133", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a99ebecee885e42e56b6e0c832570e2a91c196/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_15.c?ref=04a99ebecee885e42e56b6e0c832570e2a91c196", "patch": "@@ -10,4 +10,4 @@ foo (int a)\n   return a + 1;\n }\n \n-/* { dg-final { scan-assembler-times \"\\\\.arch armv8-a\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\.arch armv8-a\\\\+nofp\\\\+nosimd\\n\" 1 } } */"}]}