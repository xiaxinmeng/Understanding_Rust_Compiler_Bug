{"sha": "ebac6d9cb9f255b379fffcff4ba871d5b74d39d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJhYzZkOWNiOWYyNTViMzc5ZmZmY2ZmNGJhODcxZDViNzRkMzlkNw==", "commit": {"author": {"name": "Daniel Kraft", "email": "d@domob.eu", "date": "2008-09-05T11:56:23Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2008-09-05T11:56:23Z"}, "message": "re PR fortran/36746 (Rejects variable which is implictly typed as derived typed with DIMENSION)\n\n2008-09-05  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/36746\n\t* primary.c (gfc_match_rvalue): Removed logic to handle implicit\n\ttyping to a derived-type if a component reference is found.\n\t(gfc_match_varspec): Moved it here.\n\n2008-09-05  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/36746\n\t* gfortran.dg/implicit_derived_type_1.f90: New test.\n\t* gfortran.dg/used_before_typed_5.f90: New test.\n\nFrom-SVN: r140034", "tree": {"sha": "c4c56bb9e4866146e02d77626b3ddd228ce9dee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4c56bb9e4866146e02d77626b3ddd228ce9dee8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebac6d9cb9f255b379fffcff4ba871d5b74d39d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebac6d9cb9f255b379fffcff4ba871d5b74d39d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebac6d9cb9f255b379fffcff4ba871d5b74d39d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebac6d9cb9f255b379fffcff4ba871d5b74d39d7/comments", "author": {"login": "domob1812", "id": 4943644, "node_id": "MDQ6VXNlcjQ5NDM2NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domob1812", "html_url": "https://github.com/domob1812", "followers_url": "https://api.github.com/users/domob1812/followers", "following_url": "https://api.github.com/users/domob1812/following{/other_user}", "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}", "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions", "organizations_url": "https://api.github.com/users/domob1812/orgs", "repos_url": "https://api.github.com/users/domob1812/repos", "events_url": "https://api.github.com/users/domob1812/events{/privacy}", "received_events_url": "https://api.github.com/users/domob1812/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "719bb4e3d3f7d9e3e59f97141a54fe633a77b46d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/719bb4e3d3f7d9e3e59f97141a54fe633a77b46d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/719bb4e3d3f7d9e3e59f97141a54fe633a77b46d"}], "stats": {"total": 60, "additions": 56, "deletions": 4}, "files": [{"sha": "d9c65ff7f8d4d499c1a61c9683718c0e6a9bac3d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebac6d9cb9f255b379fffcff4ba871d5b74d39d7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebac6d9cb9f255b379fffcff4ba871d5b74d39d7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ebac6d9cb9f255b379fffcff4ba871d5b74d39d7", "patch": "@@ -1,3 +1,10 @@\n+2008-09-05  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/36746\n+\t* primary.c (gfc_match_rvalue): Removed logic to handle implicit\n+\ttyping to a derived-type if a component reference is found.\n+\t(gfc_match_varspec): Moved it here.\n+\n 2008-09-04  Richard Guenther  <rguenther@suse.de>\n \n \t* trans-array.c (gfc_conv_array_parameter): Use correct types"}, {"sha": "04c24eb7fe9d1a880b2f80310cb3e453931028aa", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebac6d9cb9f255b379fffcff4ba871d5b74d39d7/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebac6d9cb9f255b379fffcff4ba871d5b74d39d7/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=ebac6d9cb9f255b379fffcff4ba871d5b74d39d7", "patch": "@@ -1745,6 +1745,10 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag)\n   if (equiv_flag)\n     return MATCH_YES;\n \n+  if (sym->ts.type == BT_UNKNOWN && gfc_peek_ascii_char () == '%'\n+      && gfc_get_default_type (sym, sym->ns)->type == BT_DERIVED)\n+    gfc_set_default_type (sym, 0, sym->ns);\n+\n   if (sym->ts.type != BT_DERIVED || gfc_match_char ('%') != MATCH_YES)\n     goto check_substring;\n \n@@ -2434,10 +2438,6 @@ gfc_match_rvalue (gfc_expr **result)\n     {\n     case FL_VARIABLE:\n     variable:\n-      if (sym->ts.type == BT_UNKNOWN && gfc_peek_ascii_char () == '%'\n-\t  && gfc_get_default_type (sym, sym->ns)->type == BT_DERIVED)\n-\tgfc_set_default_type (sym, 0, sym->ns);\n-\n       e = gfc_get_expr ();\n \n       e->expr_type = EXPR_VARIABLE;"}, {"sha": "4c683eb9474b12363f902ac882acb167f6a5efa5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebac6d9cb9f255b379fffcff4ba871d5b74d39d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebac6d9cb9f255b379fffcff4ba871d5b74d39d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ebac6d9cb9f255b379fffcff4ba871d5b74d39d7", "patch": "@@ -1,3 +1,9 @@\n+2008-09-05  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/36746\n+\t* gfortran.dg/implicit_derived_type_1.f90: New test.\n+\t* gfortran.dg/used_before_typed_5.f90: New test.\n+\n 2008-09-04  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.target/i386/cold-attribute-1.c: Update testcase."}, {"sha": "baa36d1ba34508485be4bd4c99c5549870f11440", "filename": "gcc/testsuite/gfortran.dg/implicit_derived_type_1.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebac6d9cb9f255b379fffcff4ba871d5b74d39d7/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_derived_type_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebac6d9cb9f255b379fffcff4ba871d5b74d39d7/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_derived_type_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_derived_type_1.f90?ref=ebac6d9cb9f255b379fffcff4ba871d5b74d39d7", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+\n+! PR fortran/36746\n+! Check that parsing of component references for symbols with IMPLICIT\n+! derived-type works.\n+\n+! Reduced test from the PR.\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+\n+module m\n+  type t\n+    integer :: i\n+  end type t\n+contains\n+  subroutine s(x)\n+    implicit type(t)(x)\n+    dimension x(:)\n+    print *, x(1)%i\n+  end subroutine s\n+end module m"}, {"sha": "9e78e681f48346da374c2706670d3640a6b91f7b", "filename": "gcc/testsuite/gfortran.dg/used_before_typed_5.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebac6d9cb9f255b379fffcff4ba871d5b74d39d7/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_before_typed_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebac6d9cb9f255b379fffcff4ba871d5b74d39d7/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_before_typed_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_before_typed_5.f90?ref=ebac6d9cb9f255b379fffcff4ba871d5b74d39d7", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! { dg-options \"-pedantic -std=f95\" }\n+\n+! Check that DIMENSION/POINTER/ALLOCATABLE/INTENT statements *do* allow\n+! symbols to be typed later.\n+\n+SUBROUTINE test (a)\n+  IMPLICIT REAL (a-z)\n+\n+  ! Those should *not* IMPLICIT-type the symbols:\n+  INTENT(IN) :: a\n+  DIMENSION :: b(:)\n+  POINTER :: c\n+  ALLOCATABLE :: b\n+\n+  ! So this is ok:\n+  INTEGER :: a, b, c\n+\n+END SUBROUTINE test"}]}