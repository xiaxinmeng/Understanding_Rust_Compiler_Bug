{"sha": "679506c3830ea1a93c755413609bfac3538e2cbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc5NTA2YzM4MzBlYTFhOTNjNzU1NDEzNjA5YmZhYzM1MzhlMmNiZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-23T08:03:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-23T08:03:28Z"}, "message": "openmp: Fix up *_reduction clause handling with UDRs on PARM_DECLs [PR101167]\n\nThe following testcase FAILs, because the UDR combiner is invoked incorrectly.\nlower_omp_rec_clauses expects that when it sets\nDECL_VALUE_EXPR/DECL_HAS_VALUE_EXPR_P\nfor both the placeholder and the var that everything will be properly\nregimplified, but as the variable in question is a PARM_DECL rather than\nVAR_DECL, lower_omp_regimplify_p doesn't say that it should be regimplified\nand so it is not.\n\n2021-06-23  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/101167\n\t* omp-low.c (lower_omp_regimplify_p): Regimplify also PARM_DECLs\n\tand RESULT_DECLs that have DECL_HAS_VALUE_EXPR_P set.\n\n\t* testsuite/libgomp.c-c++-common/task-reduction-15.c: New test.", "tree": {"sha": "de36e1544d965068d0698fa2c494089c508e692b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de36e1544d965068d0698fa2c494089c508e692b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/679506c3830ea1a93c755413609bfac3538e2cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/679506c3830ea1a93c755413609bfac3538e2cbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/679506c3830ea1a93c755413609bfac3538e2cbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/679506c3830ea1a93c755413609bfac3538e2cbd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2124b51a9b83c76400ebb1862b26f61410e77db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2124b51a9b83c76400ebb1862b26f61410e77db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2124b51a9b83c76400ebb1862b26f61410e77db"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "6c1d6b305ba59a06ac2da5eb3dd5deb365e0fc00", "filename": "gcc/omp-low.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679506c3830ea1a93c755413609bfac3538e2cbd/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679506c3830ea1a93c755413609bfac3538e2cbd/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=679506c3830ea1a93c755413609bfac3538e2cbd", "patch": "@@ -13539,7 +13539,9 @@ lower_omp_regimplify_p (tree *tp, int *walk_subtrees,\n   tree t = *tp;\n \n   /* Any variable with DECL_VALUE_EXPR needs to be regimplified.  */\n-  if (VAR_P (t) && data == NULL && DECL_HAS_VALUE_EXPR_P (t))\n+  if ((VAR_P (t) || TREE_CODE (t) == PARM_DECL || TREE_CODE (t) == RESULT_DECL)\n+      && data == NULL\n+      && DECL_HAS_VALUE_EXPR_P (t))\n     return t;\n \n   if (task_shared_vars"}, {"sha": "5e87139ccfb1b71d563cf6670c57408061be95af", "filename": "libgomp/testsuite/libgomp.c-c++-common/task-reduction-15.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679506c3830ea1a93c755413609bfac3538e2cbd/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-reduction-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679506c3830ea1a93c755413609bfac3538e2cbd/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-reduction-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-reduction-15.c?ref=679506c3830ea1a93c755413609bfac3538e2cbd", "patch": "@@ -0,0 +1,61 @@\n+/* PR middle-end/101167 */\n+\n+extern\n+#ifdef __cplusplus\n+\"C\"\n+#endif\n+void abort (void);\n+\n+struct S { int a, b, c[2]; };\n+\n+void\n+init (struct S *x)\n+{\n+  x->a = 0;\n+  x->b = 0;\n+  x->c[0] = 0;\n+  x->c[1] = 0;\n+}\n+\n+void\n+merge (struct S *x, struct S *y)\n+{\n+  x->a += y->a;\n+  x->b += y->b;\n+}\n+\n+#pragma omp declare reduction (+: struct S : merge (&omp_out, &omp_in)) initializer (init (&omp_priv))\n+\n+void\n+foo (struct S x)\n+{\n+  #pragma omp taskgroup task_reduction (+: x)\n+  {\n+    #pragma omp task in_reduction (+: x)\n+    {\n+      x.a++;\n+      x.b++;\n+    }\n+    #pragma omp task in_reduction (+: x)\n+    {\n+      x.a += 4;\n+      x.b += 14;\n+    }\n+    #pragma omp task in_reduction (+: x)\n+    {\n+      x.a += 9;\n+      x.b += 19;\n+    }\n+  }\n+  if (x.a != 56 || x.b != 86)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  struct S x = { 42, 52 };\n+  #pragma omp parallel master num_threads(3)\n+  foo (x);\n+  return 0;\n+}"}]}