{"sha": "c14685bf851bfa4cff9bf439385142a747756a7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE0Njg1YmY4NTFiZmE0Y2ZmOWJmNDM5Mzg1MTQyYTc0Nzc1NmE3ZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-20T01:34:35Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-20T01:34:35Z"}, "message": "Support building with GNU C vs VAX C vs DEC C from the DCL command line.\n\nFrom-SVN: r13531", "tree": {"sha": "8c64657ab1fcedb89771fe3a2fd3b160c9a62052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c64657ab1fcedb89771fe3a2fd3b160c9a62052"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c14685bf851bfa4cff9bf439385142a747756a7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14685bf851bfa4cff9bf439385142a747756a7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c14685bf851bfa4cff9bf439385142a747756a7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14685bf851bfa4cff9bf439385142a747756a7e/comments", "author": null, "committer": null, "parents": [{"sha": "d7fd1073804f0270a878d6c984aece6cd78d5f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7fd1073804f0270a878d6c984aece6cd78d5f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7fd1073804f0270a878d6c984aece6cd78d5f54"}], "stats": {"total": 280, "additions": 175, "deletions": 105}, "files": [{"sha": "9f816b78d745b940ef21fc69c7ea126572c3721e", "filename": "gcc/make-cc1.com", "status": "modified", "additions": 90, "deletions": 58, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14685bf851bfa4cff9bf439385142a747756a7e/gcc%2Fmake-cc1.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14685bf851bfa4cff9bf439385142a747756a7e/gcc%2Fmake-cc1.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmake-cc1.com?ref=c14685bf851bfa4cff9bf439385142a747756a7e", "patch": "@@ -1,53 +1,83 @@\n-$! Set the def dir to proper place for use in batch. Works for interactive too.\n-$flnm = f$enviroment(\"PROCEDURE\")     ! get current procedure name\n-$set default 'f$parse(flnm,,,\"DEVICE\")''f$parse(flnm,,,\"DIRECTORY\")'\n+$v='f$verify(0)\t!make-cc1.com\n $!\n-$ v=f$verify(0)\n+$!\tBuild the GNU C compiler on VMS.\n $!\n-$! CAUTION: If you want to link gcc-cc1 to the sharable image library\n-$! VAXCRTL, see the notes in gcc.texinfo (or INSTALL) first.\n+$!\tUsage:\n+$!\t  $ @make-cc1.com [host-compiler] [various]\n $!\n-$!\tBuild the GNU \"C\" compiler on VMS\n+$!\twhere [host-compiler] is one of \"GNUC\", \"VAXC\", \"DECC\";\n+$!\tdefault when none specified is \"GNUC\",\n+$!\tand where [various] is one or more of \"CC1\", \"CC1PLUS\",\n+$!\t\"CC1OBJ\", \"OBJCLIB\", \"INDEPENDENT\", \"BC\", \"ALL\", \"LINK\", \"DEBUG\".\n+$!\t\"CC1\" (C compiler) is the default; of the others, only\n+$!\t\"CC1PLUS\" (C++ compiler), \"CC1OBJ\" (Objective-C compiler),\n+$!\tand \"OBJCLIB\" (Objective-C run-time library) are of interest\n+$!\tfor normal installation.\n+$!\tIf both [host-compiler] and other option(s) are specified,\n+$!\tthe host compiler argument must come first.\n $!\n-$!  Note:  to build with DEC's VAX C compiler, uncomment the 2nd CC, CFLAGS,\n-$!\t   and LIBS alternatives, and also execute the following command:\n-$!\tDEFINE SYS SYS$LIBRARY:\n-$!\t   After a successful build, restore those items and rebuild with gcc.\n+$ if f$type(gcc_debug).eqs.\"INTEGER\" then  if gcc_debug.and.1 then  set verify\n+$\n+$ p1 = f$edit(p1,\"UPCASE,TRIM\")\n+$ if p1.eqs.\"\" then  p1 = \"GNUC\"\n+$!\n+$!\tCompiler-specific setup (assume GNU C, then override as necessary):\n+$!\n+$ CC\t = \"gcc\"\n+$ CFLAGS = \"/Debug/noVerbos/CC1=\"\"-mpcc-alignment\"\"\"\n+$ LIBS\t = \"gnu_cc:[000000]gcclib.olb/Libr,sys$library:vaxcrtl.olb/Libr\"\n+$ if p1.eqs.\"GNUC\"\n+$ then\n+$   p1 = \"\"\n+$ else\n+$   CC\t   = \"cc\"\n+$   CFLAGS = \"/noOpt\"\t!disable optimizer when bootstrapping with native cc\n+$   if p2.eqs.\"DEBUG\" .or. p3.eqs.\"DEBUG\" then  CFLAGS = CFLAGS + \"/Debug\"\n+$   if p1.eqs.\"VAXC\"\n+$   then\n+$     p1 = \"\"\n+$     if f$trnlnm(\"DECC$CC_DEFAULT\").nes.\"\" then  CC = \"cc/VAXC\"\n+$     LIBS = \"alloca.obj,sys$library:vaxcrtl.olb/Libr\"\n+$     define/noLog SYS SYS$LIBRARY:\n+$   else\n+$     if p1.eqs.\"DECC\"\n+$     then\n+$\tp1 = \"\"\n+$\tif f$trnlnm(\"DECC$CC_DEFAULT\").nes.\"\" then  CC = \"cc/DECC\"\n+$\tCC = CC + \"/Prefix=All/Warn=Disabl=(ImplicitFunc)\"\n+$\tLIBS = \"alloca.obj\"\t!DECC$SHR will be found implicitly by linker\n+$\tdefine/noLog SYS DECC$LIBRARY_INCLUDE:\n+$     endif !DECC\n+$   endif !VAXC\n+$ endif !GNUC\n $\n-$!\tC compiler\n-$!\n-$ CC\t=\t\"gcc\"\n-$! CC\t=\t\"cc\"\t!uncomment for VAXC\n-$ BISON\t=\t\"bison\"\n-$ BISON_FLAGS=\t\"/Define/Verbose\"\n-$ RENAME=\t\"rename/New_Version\"\n-$ LINK\t=\t\"link\"\n-$ EDIT\t=\t\"edit\"\n-$ SEARCH=\t\"search\"\n-$ ABORT\t=\t\"exit %x002C\"\n-$ echo\t=\t\"write sys$output\"\n-$!\n-$!\tCompiler options\n-$!\n-$ CFLAGS =\t\"/Debug/noVerbos/CC1=\"\"-mpcc-alignment\"\"\"\n-$! CFLAGS =\t\"/noOpt\"\t\t!uncomment for VAXC\n-$ CINCL1 =\t\"/Incl=[]\"\t\t\t!stage 1 -I flags\n-$ CINCL2 =\t\"/Incl=([],[.ginclude])\"\t!stage 2,3,... flags\n-$ CINCL_SUB =\t\"/Incl=([],[-],[-.ginclude])\"\t![.cp] flags\n $!\n-$!\tLink options\n+$!\tOther setup:\n $!\n $ LDFLAGS =\t\"/noMap\"\n+$ PARSER  =\t\"bison\"\n+$ PARSER_FLAGS=\t\"/Define/Verbose\"\n+$ RENAME  =\t\"rename/New_Version\"\n+$ LINK\t  =\t\"link\"\n+$ EDIT\t  =\t\"edit\"\n+$ SEARCH  =\t\"search\"\n+$ ABORT\t  =\t\"exit %x002C\"\n+$ echo\t  =\t\"write sys$output\"\n $!\n-$!\tLink libraries\n+$!\tStage[123] options\n $!\n-$ LIBS = \"gnu_cc:[000000]gcclib.olb/Libr,sys$library:vaxcrtl.olb/Libr\"\n-$! LIBS = \"alloca.obj,sys$library:vaxcrtl.olb/Libr\"\t!uncomment for VAXC\n+$ CINCL1 =\t\"/Incl=[]\"\t\t\t!stage 1 -I flags\n+$ CINCL2 =\t\"/Incl=([],[.ginclude])\"\t!stage 2,3,... flags\n+$ CINCL_SUB =\t\"/Incl=([],[-],[-.ginclude])\"\t![.cp] flags\n $\n $!!!!!!!\n $!\tNothing beyond this point should need any local configuration changes.\n $!!!!!!!\n $\n+$! Set the default directory to the same place as this command procedure.\n+$ flnm = f$enviroment(\"PROCEDURE\")\t!get current procedure name\n+$ set default 'f$parse(flnm,,,\"DEVICE\")''f$parse(flnm,,,\"DIRECTORY\")'\n+$\n $!\n $!  First we figure out what needs to be done.  This is sort of like a limited\n $! make facility - the command line options specify exactly what components\n@@ -70,6 +100,9 @@ $!\n $!\tBC:\n $!\t\tCompile byte compiler source modules. (On by default).\n $!\n+$!\tOBJCLIB:\n+$!\t\tCompile Objective-C run-time library.\n+$!\n $!\tDEBUG:\tLink images with /debug.\n $!\n $! If you want to list more than one option, you should use a spaces to\n@@ -84,7 +117,7 @@ $! If you do not specify which compiler you want to build, it is assumed that\n $! you want to build GNU-C (\"CC1\").\n $!\n $! Now figure out what we have been requested to do.\n-$p1 = p1+\" \"+p2+\" \"+p3+\" \"+p4+\" \"+p5+\" \"+p6+\" \"+p7 \n+$p1 = p1+\" \"+p2+\" \"+p3+\" \"+p4+\" \"+p5+\" \"+p6+\" \"+p7+\" \"+p8\n $p1 = f$edit(p1,\"COMPRESS,TRIM\")\n $i=0\n $DO_ALL = 0\n@@ -207,12 +240,12 @@ $ if f$search(\"alloca.obj\").nes.\"\" then -  !does .obj exist? is it up to date?\n     if f$cvtime(f$file_attributes(\"alloca.obj\",\"RDT\")).gts.-\n        f$cvtime(f$file_attributes(\"alloca.c\",\"RDT\")) then  goto skip_alloca\n $set verify\n-$ 'CC''CFLAGS'/Define=\"STACK_DIRECTION=(-1)\" alloca.c\n+$ 'CC''CFLAGS'/Defi=(\"HAVE_CONFIG_H\",\"STACK_DIRECTION=(-1)\") alloca.c\n $!'f$verify(0)\n $skip_alloca:\n $!\n-$if DO_BC.eq.1 \n-$\tTHEN \n+$if DO_BC.eq.1\n+$\tthen\n $\tcall compile bi_all.opt \"\"\n $\tif f$trnlnm(\"ifile$\").nes.\"\" then  close/noLog ifile$\n $\topen ifile$ bc_all.list\n@@ -229,8 +262,8 @@ $bc_done:\n $\tendif\n $!\n $!\n-$if DO_INDEPENDENT.eq.1 \n-$\tTHEN \n+$if DO_INDEPENDENT.eq.1\n+$\tthen\n $!\n $! First build a couple of header files from the machine description\n $! These are used by many of the source modules, so we build them now.\n@@ -415,27 +448,26 @@ $\tsave_cflags = CFLAGS\n $\tCFLAGS = CFLAGS - CINCL1 - CINCL2 + CINCL_SUB\n $ endif\n $!\n-$if f$locate(\"parse\",flnm).nes.f$length(flnm)\n-$\tthen\n-$\tif (f$search(\"''flnm'.C\") .eqs. \"\") then goto yes_bison\n-$\tif (f$cvtime(f$file_attributes(\"''flnm'.Y\",\"RDT\")).les. -\n- \t    f$cvtime(f$file_attributes(\"''flnm'.C\",\"RDT\")))  -\n-\t\tthen goto no_bison\n-$yes_bison:\n-$set verify\n-$\t 'BISON''BISON_FLAGS' 'flnm'.y\n-$\t 'RENAME' 'flnm'_tab.c 'flnm'.c\n-$\t 'RENAME' 'flnm'_tab.h 'flnm'.h\n+$ if f$locate(\"parse\",flnm).nes.f$length(flnm)\n+$ then\n+$   if f$search(\"''flnm'.c\").nes.\"\" then -\n+      if f$cvtime(f$file_attributes(\"''flnm'.c\",\"RDT\")).ges. -\n+\t f$cvtime(f$file_attributes(\"''flnm'.y\",\"RDT\")) then  goto skip_yacc\n+$ set verify\n+$\t'PARSER' 'PARSER_FLAGS' 'flnm'.y\n+$\t'RENAME' 'flnm'_tab.c 'flnm'.c\n+$\t'RENAME' 'flnm'_tab.h 'flnm'.h\n $!'f$verify(0)\n $\tif flnm.eqs.\"cp-parse\" .or. (prfx.eqs.\"cp\" .and. flnm.eqs.\"parse\")\n $\tthen\t\t! fgrep '#define YYEMPTY' cp-parse.c >>cp-parse.h\n+$\t\tif f$trnlnm(\"JFILE$\").nes.\"\" then  close/noLog jfile$\n $\t\topen/Append jfile$ 'flnm'.h\n $\t\t'SEARCH'/Exact/Output=jfile$ 'flnm'.c \"#define YYEMPTY\"\n $\t\tclose jfile$\n $\tendif\n-$no_bison:\n+$skip_yacc:\n $\t echo \" (Ignore any warning about not finding file \"\"bison.simple\"\".)\"\n-$\tendif\n+$ endif\n $!\n $if f$extract(0,5,flnm).eqs.\"insn-\" then call generate 'flnm'.c\n $!\n@@ -461,7 +493,7 @@ $close ifile$\n $endsubroutine\n $!\n $! This subroutine generates the insn-* files.  The first argument is the\n-$! name of the insn-* file to generate.  The second argument contains a \n+$! name of the insn-* file to generate.  The second argument contains a\n $! list of any other object modules which must be linked to the gen*.c\n $! program.\n $!\n@@ -475,7 +507,7 @@ $\tendif\n $root1=f$parse(f$extract(5,255,p1),,,\"NAME\")\n $\tset verify\n $ 'CC''CFLAGS' GEN'root1'.C\n-$ 'LINK''LDFLAGS' GEN'root1'.OBJ,rtl.obj,obstack.obj,'p2' -\n+$ 'LINK''f$string(LDFLAGS - \"/Debug\")' GEN'root1'.OBJ,rtl.obj,obstack.obj,'p2' -\n \t  'LIBS'\n $!\t'f$verify(0)\n $!\n@@ -486,7 +518,7 @@ $!'f$verify(0)\n $endsubroutine\n $!\n $! This subroutine generates the bc-* files.  The first argument is the\n-$! name of the bc-* file to generate.  The second argument contains a \n+$! name of the bc-* file to generate.  The second argument contains a\n $! list of any other object modules which must be linked to the bi*.c\n $! program.\n $!\n@@ -500,7 +532,7 @@ $\tendif\n $root1=f$parse(f$extract(3,255,p1),,,\"NAME\")\n $\tset verify\n $ 'CC''CFLAGS' BI-'root1'.C\n-$ 'LINK''LDFLAGS' BI-'root1'.OBJ,'p2' -\n+$ 'LINK''f$string(LDFLAGS - \"/Debug\")' BI-'root1'.OBJ,'p2' -\n \t  'LIBS'\n $!\t'f$verify(0)\n $!"}, {"sha": "e383f310df267b2c5da5170b9d628d26fca368bd", "filename": "gcc/make-cccp.com", "status": "modified", "additions": 82, "deletions": 44, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14685bf851bfa4cff9bf439385142a747756a7e/gcc%2Fmake-cccp.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14685bf851bfa4cff9bf439385142a747756a7e/gcc%2Fmake-cccp.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmake-cccp.com?ref=c14685bf851bfa4cff9bf439385142a747756a7e", "patch": "@@ -1,79 +1,117 @@\n-$! Set the def dir to proper place for use in batch. Works for interactive too.\n-$flnm = f$enviroment(\"PROCEDURE\")     ! get current procedure name\n-$set default 'f$parse(flnm,,,\"DEVICE\")''f$parse(flnm,,,\"DIRECTORY\")'\n+$v='f$verify(0)\t!make-cccp.com\n $!\n-$!\tBuild the GNU \"C\" pre-processor on VMS\n+$!\tBuild the GNU C preprocessor on VMS.\n $!\n-$!  Note:  to build with DEC's VAX C compiler, uncomment the 2nd CC, CFLAGS,\n-$!\t   and LIBS alternatives, and also execute the following command:\n-$!\tDEFINE SYS SYS$LIBRARY:\n-$\n+$!\tUsage:\n+$!\t  $ @make-cccp.com [compiler] [link-only]\n $!\n-$!\tC compiler\n+$!\twhere [compiler] is one of \"GNUC\", \"VAXC\", \"DECC\";\n+$!\tdefault when none specified is \"GNUC\",\n+$!\tand where [link-only] is \"LINK\" or omitted.\n+$!\tIf both options are specified, the compiler must come first.\n $!\n-$ CC\t=\t\"gcc\"\n-$! CC\t=\t\"cc\"\t!uncomment for VAXC\n-$ BISON\t=\t\"bison\"\n-$ RENAME=\t\"rename/New_Version\"\n-$ LINK\t=\t\"link\"\n-$ echo\t=\t\"write sys$output\"\n+$ if f$type(gcc_debug).eqs.\"INTEGER\" then  if gcc_debug.and.1 then  set verify\n+$\n+$ p1 = f$edit(p1,\"UPCASE,TRIM\")\n+$ if p1.eqs.\"\" then  p1 = \"GNUC\"\n $!\n-$!\tCompiler options\n+$!\tCompiler-specific setup (assume GNU C, then override as necessary):\n $!\n-$ CFLAGS =\t\"/Debug/noVerbos\"\n-$! CFLAGS =\t\"/noOpt\"\t!uncomment for VAXC\n+$ CC\t = \"gcc\"\n+$ CFLAGS = \"/Debug/noVerbos\"\n+$ LIBS\t = \"gnu_cc:[000000]gcclib.olb/Libr,sys$library:vaxcrtl.olb/Libr\"\n+$ if p1.nes.\"GNUC\"\n+$ then\n+$   CC\t   = \"cc\"\n+$   CFLAGS = \"/noOpt\"\t!disable optimizer when bootstrapping with native cc\n+$   if p1.eqs.\"VAXC\"\n+$   then\n+$     if f$trnlnm(\"DECC$CC_DEFAULT\").nes.\"\" then  CC = \"cc/VAXC\"\n+$     LIBS = \"alloca.obj,sys$library:vaxcrtl.olb/Libr\"\n+$     define/noLog SYS SYS$LIBRARY:\n+$   else\n+$     if p1.eqs.\"DECC\"\n+$     then\n+$\tif f$trnlnm(\"DECC$CC_DEFAULT\").nes.\"\" then  CC = \"cc/DECC\"\n+$\tLIBS = \"alloca.obj\"\t!DECC$SHR will be found implicitly by linker\n+$\tdefine/noLog SYS DECC$LIBRARY_INCLUDE:\n+$     else\n+$\tif p1.nes.\"LINK\"\n+$\tthen\n+$\t  type sys$input: /Output=sys$error:\n+$DECK\n+[compiler] argument should be one of \"GNUC\", \"VAXC\", or \"DECC\".\n+\n+Usage:\n+$ @make-cccp.com [compiler] [link-only]\n+\n+$EOD\n+$\t  exit %x1000002C + 0*f$verify(v)\t!%SYSTEM-F-ABORT\n+$\tendif !!LINK\n+$     endif !DECC\n+$   endif !VAXC\n+$ endif !!GNUC\n+$\n $!\n-$!\tLink options\n+$!\tOther setup:\n $!\n $ LDFLAGS =\t\"/noMap\"\n-$!\n-$!\tLink libraries\n-$!\n-$ LIBS = \"gnu_cc:[000000]gcclib.olb/Libr,sys$library:vaxcrtl.olb/Libr\"\n-$! LIBS = \"alloca.obj,sys$library:vaxcrtl.olb/Libr\"\t!uncomment for VAXC\n+$ PARSER  =\t\"bison\"\n+$ RENAME  =\t\"rename/New_Version\"\n+$ LINK\t  =\t\"link\"\n+$ echo\t  =\t\"write sys$output\"\n $\n $!!!!!!!\n $!\tNothing beyond this point should need any local configuration changes.\n $!!!!!!!\n $\n-$ if \"''p1'\" .eqs. \"LINK\" then goto Link\n+$! Set the default directory to the same place as this command procedure.\n+$ flnm = f$enviroment(\"PROCEDURE\")\t!get current procedure name\n+$ set default 'f$parse(flnm,,,\"DEVICE\")''f$parse(flnm,,,\"DIRECTORY\")'\n+$\n+$ if p1.eqs.\"LINK\" .or. p2.eqs.\"LINK\" then  goto Link\n $ echo \" Building the preprocessor.\"\n+$\n+$! Compile the simplest file first, to catch problem with compiler setup early.\n+$ set verify\n+$ 'CC''CFLAGS' version.c\n+$!'f$verify(0)\n+$\n $ set verify\n $ 'CC''CFLAGS' cccp.c\n $!'f$verify(0)\n-$ t1:='f$search(\"CEXP.C\")'\n-$ if \"''t1'\" .eqs. \"\" then goto 10$\n-$ t1:='f$file_attributes(\"CEXP.Y\",\"RDT\")'\n-$ t1:='f$cvtime(t1)'\n-$ t2:='f$file_attributes(\"CEXP.C\",\"RDT\")'\n-$ t2:='f$cvtime(t2)'\n-$ if t1 .les. t2 then goto 20$\n-$10$:\n+$\n+$! Compile preprocessor's parser, possibly making it with yacc first.\n+$ if f$search(\"CEXP.C\").nes.\"\" then -\n+    if f$cvtime(f$file_attributes(\"CEXP.C\",\"RDT\")).ges.-\n+       f$cvtime(f$file_attributes(\"CEXP.Y\",\"RDT\")) then  goto skip_yacc\n $ set verify\n-$ 'BISON' cexp.y\n+$ 'PARSER' cexp.y\n $ 'RENAME' cexp_tab.c cexp.c\n $!'f$verify(0)\n-$20$:\n-$!\n+$skip_yacc:\n+$ echo \" (Ignore any warning about not finding file \"\"bison.simple\"\".)\"\n+$ set verify\n+$ 'CC''CFLAGS' cexp.c\n+$!'f$verify(0)\n+$ \n+$! In case there's no builtin alloca support, use the C simulation.\n $ if f$locate(\"alloca.obj\",f$edit(LIBS,\"lowercase\")).lt.f$length(LIBS)\n $ then\n $  set verify\n-$ 'CC''CFLAGS'/Define=\"STACK_DIRECTION=(-1)\" alloca.c\t\t!#'f$verify(1)\n+$ 'CC''CFLAGS'/Incl=[]/Defi=(\"HAVE_CONFIG_H\",\"STACK_DIRECTION=(-1)\") alloca.c\n $!'f$verify(0)\n $ endif\n $!\n-$ echo \" (Ignore any warning about not finding file \"\"bison.simple\"\".)\"\n-$ set verify\n-$ 'CC''CFLAGS' cexp.c\n-$ 'CC''CFLAGS' version.c\n-$!'f$verify(0)\n+$\n $Link:\n $ echo \" Linking the preprocessor.\"\n $ set verify\n-$ 'LINK''LDFLAGS'/Exe=gcc-cpp.exe cccp.obj,cexp.obj,version.obj,version.opt/Opt,-\n+$ 'LINK''LDFLAGS'/Exe=gcc-cpp.exe -\n+\t  cccp.obj,cexp.obj,version.obj,version.opt/Opt,-\n \t  'LIBS'\n $!'f$verify(0)\n $!\n $!\tDone\n $!\n-$ exit\n+$ exit 1+0*f$verify(v)"}, {"sha": "03235eecd1491c2bc42b9fe106a6ad99c8589f72", "filename": "gcc/make-gcc.com", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14685bf851bfa4cff9bf439385142a747756a7e/gcc%2Fmake-gcc.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14685bf851bfa4cff9bf439385142a747756a7e/gcc%2Fmake-gcc.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmake-gcc.com?ref=c14685bf851bfa4cff9bf439385142a747756a7e", "patch": "@@ -8,15 +8,15 @@ $!\n $!\n $! First, build the preprocessor.\n $!\n-$ @make-cccp\n+$ @make-cccp.com 'p1' 'p2'\n $!\n $! To build the GNU C++ compiler in addition to the GNU CC compiler, comment\n $! out the `@make-cc1' line, and uncomment the `@make-cc1 cc1 cc1plus' line.\n $! To also build Objective-C, add \"cc1obj\" to the list.\n $!\n $! See the file make-cc1.com for a complete list of options.\n $!\n-$ @make-cc1\n+$ @make-cc1.com  'p1' 'p2' 'p3' 'p4' 'p5' 'p6' 'p7' 'p8'\n $! @make-cc1 cc1 cc1plus\n $!\n $!\n@@ -28,5 +28,5 @@ $! these same routines with different module names.\n $!\n $! Now build gcclib2.olb\n $!\n-$ @make-l2\n+$ @make-l2.com\n $!"}]}