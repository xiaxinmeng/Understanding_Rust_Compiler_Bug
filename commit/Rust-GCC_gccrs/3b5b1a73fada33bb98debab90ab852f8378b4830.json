{"sha": "3b5b1a73fada33bb98debab90ab852f8378b4830", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I1YjFhNzNmYWRhMzNiYjk4ZGViYWI5MGFiODUyZjgzNzhiNDgzMA==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2009-06-08T17:03:31Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2009-06-08T17:03:31Z"}, "message": "[multiple changes]\n\n2009-06-08  Andrew Haley  <aph@redhat.com>\n\n\t* testsuite/libffi.call/err_bad_abi.c: Add xfails.\n\t* testsuite/libffi.call/cls_longdouble_va.c: Add xfails.\n\t* testsuite/libffi.call/cls_dbls_struct.c: Add xfail x86_64-*-linux-*.\n\t* testsuite/libffi.call/err_bad_typedef.c: Add xfails.\n\n\t* testsuite/libffi.call/stret_medium2.c: Add __UNUSED__ to args.\n\t* testsuite/libffi.call/stret_medium.c: Likewise.\n\t* testsuite/libffi.call/stret_large2.c: Likewise.\n\t* testsuite/libffi.call/stret_large.c:  Likewise.\n\n2008-12-26  Timothy Wall  <twall@users.sf.net>\n\n        * testsuite/libffi.call/cls_longdouble.c,\n        testsuite/libffi.call/cls_longdouble_va.c,\n        testsuite/libffi.call/cls_align_longdouble.c,\n        testsuite/libffi.call/cls_align_longdouble_split.c,\n        testsuite/libffi.call/cls_align_longdouble_split2.c: mark expected\n        failures on x86_64 cygwin/mingw.\n\n2008-12-22  Timothy Wall  <twall@users.sf.net>\n\n        * testsuite/libffi.call/closure_fn0.c,\n        testsuite/libffi.call/closure_fn1.c,\n        testsuite/libffi.call/closure_fn2.c,\n        testsuite/libffi.call/closure_fn3.c,\n        testsuite/libffi.call/closure_fn4.c,\n        testsuite/libffi.call/closure_fn5.c,\n        testsuite/libffi.call/closure_fn6.c,\n        testsuite/libffi.call/closure_loc_fn0.c,\n        testsuite/libffi.call/closure_stdcall.c,\n        testsuite/libffi.call/cls_align_pointer.c,\n        testsuite/libffi.call/cls_pointer.c,\n        testsuite/libffi.call/cls_pointer_stack.c: use portable cast from\n        pointer to integer (intptr_t).\n        * testsuite/libffi.call/cls_longdouble.c: disable for win64.\n\n2008-07-24  Anthony Green  <green@redhat.com>\n\n        * testsuite/libffi.call/cls_dbls_struct.c,\n        testsuite/libffi.call/cls_double_va.c,\n        testsuite/libffi.call/cls_longdouble.c,\n        testsuite/libffi.call/cls_longdouble_va.c,\n        testsuite/libffi.call/cls_pointer.c,\n        testsuite/libffi.call/cls_pointer_stack.c,\n        testsuite/libffi.call/err_bad_abi.c: Clean up failures from\n        compiler warnings.\n\n2008-03-04  Anthony Green  <green@redhat.com>\n            Blake Chaffin\n            hos@tamanegi.org\n\n        * testsuite/libffi.call/cls_align_longdouble_split2.c\n          testsuite/libffi.call/cls_align_longdouble_split.c\n          testsuite/libffi.call/cls_dbls_struct.c\n          testsuite/libffi.call/cls_double_va.c\n          testsuite/libffi.call/cls_longdouble.c\n          testsuite/libffi.call/cls_longdouble_va.c\n          testsuite/libffi.call/cls_pointer.c\n          testsuite/libffi.call/cls_pointer_stack.c\n          testsuite/libffi.call/err_bad_abi.c\n          testsuite/libffi.call/err_bad_typedef.c\n          testsuite/libffi.call/stret_large2.c\n          testsuite/libffi.call/stret_large.c\n          testsuite/libffi.call/stret_medium2.c\n          testsuite/libffi.call/stret_medium.c: New tests from Apple.\n\nFrom-SVN: r148285", "tree": {"sha": "324582afbd13ed78c0576322479d124ca8597d28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/324582afbd13ed78c0576322479d124ca8597d28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b5b1a73fada33bb98debab90ab852f8378b4830", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5b1a73fada33bb98debab90ab852f8378b4830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b5b1a73fada33bb98debab90ab852f8378b4830", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5b1a73fada33bb98debab90ab852f8378b4830/comments", "author": null, "committer": null, "parents": [{"sha": "b792a33ca458beea5f114eba261a5e8cd42145e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b792a33ca458beea5f114eba261a5e8cd42145e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b792a33ca458beea5f114eba261a5e8cd42145e3"}], "stats": {"total": 1736, "additions": 1716, "deletions": 20}, "files": [{"sha": "f88d16cdc1187fdb366361c957f832de6f567147", "filename": "libffi/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -1,3 +1,71 @@\n+2009-06-08  Andrew Haley  <aph@redhat.com>\n+\n+\t* testsuite/libffi.call/err_bad_abi.c: Add xfails.\n+\t* testsuite/libffi.call/cls_longdouble_va.c: Add xfails.\n+\t* testsuite/libffi.call/cls_dbls_struct.c: Add xfail x86_64-*-linux-*.\n+\t* testsuite/libffi.call/err_bad_typedef.c: Add xfails.\n+\n+\t* testsuite/libffi.call/stret_medium2.c: Add __UNUSED__ to args.\n+\t* testsuite/libffi.call/stret_medium.c: Likewise.\n+\t* testsuite/libffi.call/stret_large2.c: Likewise.\n+\t* testsuite/libffi.call/stret_large.c:  Likewise.\n+\n+2008-12-26  Timothy Wall  <twall@users.sf.net>\n+\n+        * testsuite/libffi.call/cls_longdouble.c,\n+        testsuite/libffi.call/cls_longdouble_va.c,\n+        testsuite/libffi.call/cls_align_longdouble.c,\n+        testsuite/libffi.call/cls_align_longdouble_split.c,\n+        testsuite/libffi.call/cls_align_longdouble_split2.c: mark expected\n+        failures on x86_64 cygwin/mingw.\n+\n+2008-12-22  Timothy Wall  <twall@users.sf.net>\n+\n+        * testsuite/libffi.call/closure_fn0.c,\n+        testsuite/libffi.call/closure_fn1.c,\n+        testsuite/libffi.call/closure_fn2.c,\n+        testsuite/libffi.call/closure_fn3.c,\n+        testsuite/libffi.call/closure_fn4.c,\n+        testsuite/libffi.call/closure_fn5.c,\n+        testsuite/libffi.call/closure_fn6.c,\n+        testsuite/libffi.call/closure_loc_fn0.c,\n+        testsuite/libffi.call/closure_stdcall.c,\n+        testsuite/libffi.call/cls_align_pointer.c,\n+        testsuite/libffi.call/cls_pointer.c,\n+        testsuite/libffi.call/cls_pointer_stack.c: use portable cast from\n+        pointer to integer (intptr_t).\n+        * testsuite/libffi.call/cls_longdouble.c: disable for win64.\n+\n+2008-07-24  Anthony Green  <green@redhat.com>\n+\n+        * testsuite/libffi.call/cls_dbls_struct.c,\n+        testsuite/libffi.call/cls_double_va.c,\n+        testsuite/libffi.call/cls_longdouble.c,\n+        testsuite/libffi.call/cls_longdouble_va.c,\n+        testsuite/libffi.call/cls_pointer.c,\n+        testsuite/libffi.call/cls_pointer_stack.c,\n+        testsuite/libffi.call/err_bad_abi.c: Clean up failures from\n+        compiler warnings.\n+\n+2008-03-04  Anthony Green  <green@redhat.com>\n+            Blake Chaffin\n+            hos@tamanegi.org\n+\n+        * testsuite/libffi.call/cls_align_longdouble_split2.c\n+          testsuite/libffi.call/cls_align_longdouble_split.c\n+          testsuite/libffi.call/cls_dbls_struct.c\n+          testsuite/libffi.call/cls_double_va.c\n+          testsuite/libffi.call/cls_longdouble.c\n+          testsuite/libffi.call/cls_longdouble_va.c\n+          testsuite/libffi.call/cls_pointer.c\n+          testsuite/libffi.call/cls_pointer_stack.c\n+          testsuite/libffi.call/err_bad_abi.c\n+          testsuite/libffi.call/err_bad_typedef.c\n+          testsuite/libffi.call/stret_large2.c\n+          testsuite/libffi.call/stret_large.c\n+          testsuite/libffi.call/stret_medium2.c\n+          testsuite/libffi.call/stret_medium.c: New tests from Apple.\n+\n 2009-06-05  Andrew Haley  <aph@redhat.com>\n \n \t* src/x86/ffitarget.h, src/x86/ffi.c: Merge stdcall changes from"}, {"sha": "b42fc20316ff621b8d53cb3b570ecd22b87c0cc6", "filename": "libffi/testsuite/libffi.call/closure_fn0.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn0.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -25,7 +25,7 @@ closure_test_fn0(ffi_cif* cif __UNUSED__, void* resp, void** args,\n     (int)(*(double *)args[8]) + (int)*(int *)args[9] +\n     (int)(*(int *)args[10]) + (int)(*(float *)args[11]) +\n     (int)*(int *)args[12] + (int)(*(int *)args[13]) +\n-    (int)(*(int *)args[14]) +  *(int *)args[15] + (int)(long)userdata;\n+    (int)(*(int *)args[14]) +  *(int *)args[15] + (intptr_t)userdata;\n \n   printf(\"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d: %d\\n\",\n \t (int)*(unsigned long long *)args[0], (int)(*(int *)args[1]),\n@@ -37,7 +37,7 @@ closure_test_fn0(ffi_cif* cif __UNUSED__, void* resp, void** args,\n \t (int)(*(int *)args[10]), (int)(*(float *)args[11]),\n \t (int)*(int *)args[12], (int)(*(int *)args[13]),\n \t (int)(*(int *)args[14]),*(int *)args[15],\n-\t (int)(long)userdata, (int)*(ffi_arg *)resp);\n+\t (int)(intptr_t)userdata, (int)*(ffi_arg *)resp);\n \n }\n "}, {"sha": "82b9b1d6edb3005089487fdda03005be1fc27a80", "filename": "libffi/testsuite/libffi.call/closure_fn1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn1.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -21,7 +21,7 @@ static void closure_test_fn1(ffi_cif* cif __UNUSED__, void* resp, void** args,\n     (int)(*(double*)args[8]) + (int)*(int *)args[9] +\n     (int)(*(int *)args[10]) + (int)(*(float *)args[11]) +\n     (int)*(int *)args[12] + (int)(*(int *)args[13]) +\n-    (int)(*(int *)args[14]) + *(int *)args[15] + (int)(long)userdata;\n+    (int)(*(int *)args[14]) + *(int *)args[15] + (intptr_t)userdata;\n \n   printf(\"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d: %d\\n\",\n \t (int)*(float *)args[0], (int)(*(float *)args[1]),\n@@ -32,7 +32,7 @@ static void closure_test_fn1(ffi_cif* cif __UNUSED__, void* resp, void** args,\n \t (int)(*(int *)args[10]), (int)(*(float *)args[11]),\n \t (int)*(int *)args[12], (int)(*(int *)args[13]),\n \t (int)(*(int *)args[14]), *(int *)args[15],\n-\t (int)(long)userdata, (int)*(ffi_arg *)resp);\n+\t (int)(intptr_t)userdata, (int)*(ffi_arg *)resp);\n }\n \n typedef int (*closure_test_type1)(float, float, float, float, signed short,"}, {"sha": "d0ba48e6736e08c9d02d2d37a59cf121c9e6856d", "filename": "libffi/testsuite/libffi.call/closure_fn2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn2.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -20,7 +20,7 @@ static void closure_test_fn2(ffi_cif* cif __UNUSED__, void* resp, void** args,\n     (int)(*(double *)args[8]) + (int)*(int *)args[9] +\n     (int)(*(int *)args[10]) + (int)(*(float *)args[11]) +\n     (int)*(int *)args[12] + (int)(*(float *)args[13]) +\n-    (int)(*(int *)args[14]) + *(int *)args[15] + (int)(long)userdata;\n+    (int)(*(int *)args[14]) + *(int *)args[15] + (intptr_t)userdata;\n \n   printf(\"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d: %d\\n\",\n \t (int)*(double *)args[0], (int)(*(double *)args[1]),\n@@ -30,7 +30,7 @@ static void closure_test_fn2(ffi_cif* cif __UNUSED__, void* resp, void** args,\n \t (int)(*(double*)args[8]), (int)*(int *)args[9],\n \t (int)(*(int *)args[10]), (int)(*(float *)args[11]),\n \t (int)*(int *)args[12], (int)(*(float *)args[13]),\n-\t (int)(*(int *)args[14]), *(int *)args[15], (int)(long)userdata,\n+\t (int)(*(int *)args[14]), *(int *)args[15], (int)(intptr_t)userdata,\n \t (int)*(ffi_arg *)resp);\n }\n "}, {"sha": "be4062d8b6f76511393207d03c66227b5c233ec1", "filename": "libffi/testsuite/libffi.call/closure_fn3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn3.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -20,7 +20,7 @@ static void closure_test_fn3(ffi_cif* cif __UNUSED__, void* resp, void** args,\n      (int)(*(double *)args[8]) + (int)*(int *)args[9] +\n      (int)(*(float *)args[10]) + (int)(*(float *)args[11]) +\n      (int)*(int *)args[12] + (int)(*(float *)args[13]) +\n-     (int)(*(float *)args[14]) +  *(int *)args[15] + (int)(long)userdata;\n+     (int)(*(float *)args[14]) +  *(int *)args[15] + (intptr_t)userdata;\n \n    printf(\"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d: %d\\n\",\n \t  (int)*(float *)args[0], (int)(*(float *)args[1]),\n@@ -30,7 +30,7 @@ static void closure_test_fn3(ffi_cif* cif __UNUSED__, void* resp, void** args,\n \t  (int)(*(double *)args[8]), (int)*(int *)args[9],\n \t  (int)(*(float *)args[10]), (int)(*(float *)args[11]),\n \t  (int)*(int *)args[12], (int)(*(float *)args[13]),\n-\t  (int)(*(float *)args[14]), *(int *)args[15], (int)(long)userdata,\n+\t  (int)(*(float *)args[14]), *(int *)args[15], (int)(intptr_t)userdata,\n \t  (int)*(ffi_arg *)resp);\n \n  }"}, {"sha": "9a70b992c700fdf6f928fa02fb0c7fbd4c68b16a", "filename": "libffi/testsuite/libffi.call/closure_fn4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn4.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -25,7 +25,7 @@ closure_test_fn0(ffi_cif* cif __UNUSED__, void* resp, void** args,\n     (int)*(unsigned long long *)args[12] +\n     (int)*(unsigned long long *)args[13] +\n     (int)*(unsigned long long *)args[14] +\n-    *(int *)args[15] + (int)(long)userdata;\n+    *(int *)args[15] + (intptr_t)userdata;\n \n   printf(\"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d: %d\\n\",\n \t (int)*(unsigned long long *)args[0],\n@@ -44,7 +44,7 @@ closure_test_fn0(ffi_cif* cif __UNUSED__, void* resp, void** args,\n \t (int)*(unsigned long long *)args[13],\n \t (int)*(unsigned long long *)args[14],\n \t *(int *)args[15],\n-\t (int)(long)userdata, (int)*(ffi_arg *)resp);\n+\t (int)(intptr_t)userdata, (int)*(ffi_arg *)resp);\n \n }\n "}, {"sha": "c12491e84b6d3cae3c8b70d8461d07e404d39822", "filename": "libffi/testsuite/libffi.call/closure_fn5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn5.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -24,7 +24,7 @@ closure_test_fn5(ffi_cif* cif __UNUSED__, void* resp, void** args,\n     (int)*(unsigned long long *)args[12] +\n     (int)*(unsigned long long *)args[13] +\n     (int)*(unsigned long long *)args[14] +\n-    *(int *)args[15] + (int)(long)userdata;\n+    *(int *)args[15] + (intptr_t)userdata;\n \n   printf(\"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d: %d\\n\",\n \t (int)*(unsigned long long *)args[0],\n@@ -43,7 +43,7 @@ closure_test_fn5(ffi_cif* cif __UNUSED__, void* resp, void** args,\n \t (int)*(unsigned long long *)args[13],\n \t (int)*(unsigned long long *)args[14],\n \t *(int *)args[15],\n-\t (int)(long)userdata, (int)*(ffi_arg *)resp);\n+\t (int)(intptr_t)userdata, (int)*(ffi_arg *)resp);\n \n }\n "}, {"sha": "5d9389d17754f8cddb4ac3f8fc63d3f8ee652f15", "filename": "libffi/testsuite/libffi.call/closure_fn6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_fn6.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -23,7 +23,7 @@ closure_test_fn0(ffi_cif* cif __UNUSED__, void* resp, void** args,\n     (int)(*(int *)args[10]) + (int)(*(float *)args[11]) +\n     (int)*(int *)args[12] + (int)(*(int *)args[13]) +\n     (int)(*(double *)args[14]) +  (int)*(double *)args[15] +\n-    (int)(long)userdata;\n+    (intptr_t)userdata;\n \n   printf(\"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d: %d\\n\",\n \t (int)*(unsigned long long  *)args[0],\n@@ -36,7 +36,7 @@ closure_test_fn0(ffi_cif* cif __UNUSED__, void* resp, void** args,\n \t (int)(*(int *)args[10]), (int)(*(float *)args[11]),\n \t (int)*(int *)args[12], (int)(*(int *)args[13]),\n \t (int)(*(double *)args[14]), (int)(*(double *)args[15]),\n-\t (int)(long)userdata, (int)*(ffi_arg *)resp);\n+\t (int)(intptr_t)userdata, (int)*(ffi_arg *)resp);\n \n }\n "}, {"sha": "b3afa0bbdfcf9a8ce32568eb298be4ad622509c2", "filename": "libffi/testsuite/libffi.call/closure_loc_fn0.c", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_loc_fn0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_loc_fn0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_loc_fn0.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -0,0 +1,95 @@\n+/* Area:\tclosure_call\n+   Purpose:\tCheck multiple values passing from different type.\n+\t\tAlso, exceed the limit of gpr and fpr registers on PowerPC\n+\t\tDarwin.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<andreast@gcc.gnu.org> 20030828\t */\n+\n+\n+\n+\n+/* { dg-do run } */\n+#include \"ffitest.h\"\n+\n+static void\n+closure_loc_test_fn0(ffi_cif* cif __UNUSED__, void* resp, void** args,\n+\t\t void* userdata)\n+{\n+  *(ffi_arg*)resp =\n+    (int)*(unsigned long long *)args[0] + (int)(*(int *)args[1]) +\n+    (int)(*(unsigned long long *)args[2]) + (int)*(int *)args[3] +\n+    (int)(*(signed short *)args[4]) +\n+    (int)(*(unsigned long long *)args[5]) +\n+    (int)*(int *)args[6] + (int)(*(int *)args[7]) +\n+    (int)(*(double *)args[8]) + (int)*(int *)args[9] +\n+    (int)(*(int *)args[10]) + (int)(*(float *)args[11]) +\n+    (int)*(int *)args[12] + (int)(*(int *)args[13]) +\n+    (int)(*(int *)args[14]) +  *(int *)args[15] + (intptr_t)userdata;\n+\n+  printf(\"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d: %d\\n\",\n+\t (int)*(unsigned long long *)args[0], (int)(*(int *)args[1]),\n+\t (int)(*(unsigned long long *)args[2]),\n+\t (int)*(int *)args[3], (int)(*(signed short *)args[4]),\n+\t (int)(*(unsigned long long *)args[5]),\n+\t (int)*(int *)args[6], (int)(*(int *)args[7]),\n+\t (int)(*(double *)args[8]), (int)*(int *)args[9],\n+\t (int)(*(int *)args[10]), (int)(*(float *)args[11]),\n+\t (int)*(int *)args[12], (int)(*(int *)args[13]),\n+\t (int)(*(int *)args[14]),*(int *)args[15],\n+\t (int)(intptr_t)userdata, (int)*(ffi_arg *)resp);\n+\n+}\n+\n+typedef int (*closure_loc_test_type0)(unsigned long long, int, unsigned long long,\n+\t\t\t\t  int, signed short, unsigned long long, int,\n+\t\t\t\t  int, double, int, int, float, int, int,\n+\t\t\t\t  int, int);\n+\n+int main (void)\n+{\n+  ffi_cif cif;\n+  ffi_closure *pcl;\n+  ffi_type * cl_arg_types[17];\n+  int res;\n+  void *codeloc;\n+\n+  cl_arg_types[0] = &ffi_type_uint64;\n+  cl_arg_types[1] = &ffi_type_sint;\n+  cl_arg_types[2] = &ffi_type_uint64;\n+  cl_arg_types[3] = &ffi_type_sint;\n+  cl_arg_types[4] = &ffi_type_sshort;\n+  cl_arg_types[5] = &ffi_type_uint64;\n+  cl_arg_types[6] = &ffi_type_sint;\n+  cl_arg_types[7] = &ffi_type_sint;\n+  cl_arg_types[8] = &ffi_type_double;\n+  cl_arg_types[9] = &ffi_type_sint;\n+  cl_arg_types[10] = &ffi_type_sint;\n+  cl_arg_types[11] = &ffi_type_float;\n+  cl_arg_types[12] = &ffi_type_sint;\n+  cl_arg_types[13] = &ffi_type_sint;\n+  cl_arg_types[14] = &ffi_type_sint;\n+  cl_arg_types[15] = &ffi_type_sint;\n+  cl_arg_types[16] = NULL;\n+\n+  /* Initialize the cif */\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 16,\n+\t\t     &ffi_type_sint, cl_arg_types) == FFI_OK);\n+\n+  pcl = ffi_closure_alloc(sizeof(ffi_closure), &codeloc);\n+  CHECK(pcl != NULL);\n+  CHECK(codeloc != NULL);\n+\n+  CHECK(ffi_prep_closure_loc(pcl, &cif, closure_loc_test_fn0,\n+\t\t\t (void *) 3 /* userdata */, codeloc) == FFI_OK);\n+  \n+  CHECK(memcmp(pcl, codeloc, sizeof(*pcl)) == 0);\n+\n+  res = (*((closure_loc_test_type0)codeloc))\n+    (1LL, 2, 3LL, 4, 127, 429LL, 7, 8, 9.5, 10, 11, 12, 13,\n+     19, 21, 1);\n+  /* { dg-output \"1 2 3 4 127 429 7 8 9 10 11 12 13 19 21 1 3: 680\" } */\n+  printf(\"res: %d\\n\",res);\n+  /* { dg-output \"\\nres: 680\" } */\n+     exit(0);\n+}"}, {"sha": "020b469af7a7c73661d5ff5742f49e727056843b", "filename": "libffi/testsuite/libffi.call/closure_stdcall.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_stdcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_stdcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fclosure_stdcall.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -0,0 +1,72 @@\n+/* Area:\tclosure_call (stdcall convention)\n+   Purpose:\tCheck handling when caller expects stdcall callee\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<twalljava@dev.java.net> */\n+\n+/* { dg-do run { target i?86-*-cygwin* i?86-*-mingw* } } */\n+#include \"ffitest.h\"\n+\n+static void\n+closure_test_stdcall(ffi_cif* cif __UNUSED__, void* resp, void** args,\n+\t\t void* userdata)\n+{\n+  *(ffi_arg*)resp =\n+    (int)*(int *)args[0] + (int)(*(int *)args[1])\n+    + (int)(*(int *)args[2])  + (int)(*(int *)args[3])\n+    + (int)(intptr_t)userdata;\n+\n+  printf(\"%d %d %d %d: %d\\n\",\n+\t (int)*(int *)args[0], (int)(*(int *)args[1]),\n+\t (int)(*(int *)args[2]), (int)(*(int *)args[3]),\n+         (int)*(ffi_arg *)resp);\n+\n+}\n+\n+typedef int (__stdcall *closure_test_type0)(int, int, int, int);\n+\n+int main (void)\n+{\n+  ffi_cif cif;\n+#ifndef USING_MMAP\n+  static ffi_closure cl;\n+#endif\n+  ffi_closure *pcl;\n+  ffi_type * cl_arg_types[17];\n+  int res;\n+  void* sp_pre;\n+  void* sp_post;\n+  char buf[1024];\n+\n+#ifdef USING_MMAP\n+  pcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+  pcl = &cl;\n+#endif\n+\n+  cl_arg_types[0] = &ffi_type_uint;\n+  cl_arg_types[1] = &ffi_type_uint;\n+  cl_arg_types[2] = &ffi_type_uint;\n+  cl_arg_types[3] = &ffi_type_uint;\n+  cl_arg_types[4] = NULL;\n+\n+  /* Initialize the cif */\n+  CHECK(ffi_prep_cif(&cif, FFI_STDCALL, 4,\n+\t\t     &ffi_type_sint, cl_arg_types) == FFI_OK);\n+\n+  CHECK(ffi_prep_closure(pcl, &cif, closure_test_stdcall,\n+\t\t\t (void *) 3 /* userdata */) == FFI_OK);\n+\n+  asm volatile (\" movl %%esp,%0\" : \"=g\" (sp_pre));\n+  res = (*(closure_test_type0)pcl)(0, 1, 2, 3);\n+  asm volatile (\" movl %%esp,%0\" : \"=g\" (sp_post));\n+  /* { dg-output \"0 1 2 3: 9\" } */\n+\n+  printf(\"res: %d\\n\",res);\n+  /* { dg-output \"\\nres: 9\" } */\n+\n+  sprintf(buf, \"mismatch: pre=%p vs post=%p\", sp_pre, sp_post);\n+  printf(\"stack pointer %s\\n\", (sp_pre == sp_post ? \"match\" : buf));\n+  /* { dg-output \"\\nstack pointer match\" } */\n+  exit(0);\n+}"}, {"sha": "74cddc3a7e830f90b44f3ce23f37e00d3432c5bf", "filename": "libffi/testsuite/libffi.call/cls_align_longdouble.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_longdouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_longdouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_longdouble.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -4,7 +4,7 @@\n    PR:\t\tnone.\n    Originator:\t<hos@tamanegi.org> 20031203\t */\n \n-/* { dg-do run } */\n+/* { dg-do run { xfail x86_64-*-mingw* x86_64-*-cygwin* } } */\n \n #include \"ffitest.h\"\n "}, {"sha": "b350b3df29572b817167c576954bc38666cdc3ac", "filename": "libffi/testsuite/libffi.call/cls_align_longdouble_split.c", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_longdouble_split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_longdouble_split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_longdouble_split.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -0,0 +1,140 @@\n+/* Area:\tffi_call, closure_call\n+   Purpose:\tCheck structure alignment of long double.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<hos@tamanegi.org> 20031203\t */\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* x86_64-*-mingw* x86_64-*-cygwin* } } */\n+/* { dg-options -mlong-double-128 { target powerpc64*-*-* } } */\n+\n+#include \"ffitest.h\"\n+\n+typedef struct cls_struct_align {\n+  long double a;\n+  long double b;\n+  long double c;\n+  long double d;\n+  long double e;\n+  long double f;\n+  long double g;\n+} cls_struct_align;\n+\n+cls_struct_align cls_struct_align_fn(\n+\tcls_struct_align\ta1,\n+\tcls_struct_align\ta2)\n+{\n+\tstruct cls_struct_align r;\n+\n+\tr.a = a1.a + a2.a;\n+\tr.b = a1.b + a2.b;\n+\tr.c = a1.c + a2.c;\n+\tr.d = a1.d + a2.d;\n+\tr.e = a1.e + a2.e;\n+\tr.f = a1.f + a2.f;\n+\tr.g = a1.g + a2.g;\n+\n+\tprintf(\"%Lg %Lg %Lg %Lg %Lg %Lg %Lg %Lg %Lg %Lg %Lg %Lg %Lg %Lg: \"\n+\t\t\"%Lg %Lg %Lg %Lg %Lg %Lg %Lg\\n\",\n+\t\ta1.a, a1.b, a1.c, a1.d, a1.e, a1.f, a1.g,\n+\t\ta2.a, a2.b, a2.c, a2.d, a2.e, a2.f, a2.g,\n+\t\tr.a, r.b, r.c, r.d, r.e, r.f, r.g);\n+\n+\treturn r;\n+}\n+\n+cls_struct_align cls_struct_align_fn2(\n+\tcls_struct_align\ta1)\n+{\n+\tstruct cls_struct_align r;\n+\n+\tr.a = a1.a + 1;\n+\tr.b = a1.b + 1;\n+\tr.c = a1.c + 1;\n+\tr.d = a1.d + 1;\n+\tr.e = a1.e + 1;\n+\tr.f = a1.f + 1;\n+\tr.g = a1.g + 1;\n+\n+\tprintf(\"%Lg %Lg %Lg %Lg %Lg %Lg %Lg: \"\n+\t\t\"%Lg %Lg %Lg %Lg %Lg %Lg %Lg\\n\",\n+\t\ta1.a, a1.b, a1.c, a1.d, a1.e, a1.f, a1.g,\n+\t\tr.a, r.b, r.c, r.d, r.e, r.f, r.g);\n+\n+\treturn r;\n+}\n+\n+static void\n+cls_struct_align_gn(ffi_cif* cif __UNUSED__, void* resp, void** args, \n+\t\t    void* userdata __UNUSED__)\n+{\n+\tstruct cls_struct_align a1, a2;\n+\n+\ta1 = *(struct cls_struct_align*)(args[0]);\n+\ta2 = *(struct cls_struct_align*)(args[1]);\n+\n+\t*(cls_struct_align*)resp = cls_struct_align_fn(a1, a2);\n+}\n+\n+int main (void)\n+{\n+\tffi_cif cif;\n+#ifndef USING_MMAP\n+\tstatic ffi_closure cl;\n+#endif\n+\tffi_closure *pcl;\n+\tvoid* args_dbl[3];\n+\tffi_type* cls_struct_fields[8];\n+\tffi_type cls_struct_type;\n+\tffi_type* dbl_arg_types[3];\n+\n+#ifdef USING_MMAP\n+\tpcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+\tpcl = &cl;\n+#endif\n+\n+\tcls_struct_type.size = 0;\n+\tcls_struct_type.alignment = 0;\n+\tcls_struct_type.type = FFI_TYPE_STRUCT;\n+\tcls_struct_type.elements = cls_struct_fields;\n+\n+\tstruct cls_struct_align g_dbl = { 1, 2, 3, 4, 5, 6, 7 };\n+\tstruct cls_struct_align f_dbl = { 8, 9, 10, 11, 12, 13, 14 };\n+\tstruct cls_struct_align res_dbl;\n+\n+\tcls_struct_fields[0] = &ffi_type_longdouble;\n+\tcls_struct_fields[1] = &ffi_type_longdouble;\n+\tcls_struct_fields[2] = &ffi_type_longdouble;\n+\tcls_struct_fields[3] = &ffi_type_longdouble;\n+\tcls_struct_fields[4] = &ffi_type_longdouble;\n+\tcls_struct_fields[5] = &ffi_type_longdouble;\n+\tcls_struct_fields[6] = &ffi_type_longdouble;\n+\tcls_struct_fields[7] = NULL;\n+\n+\tdbl_arg_types[0] = &cls_struct_type;\n+\tdbl_arg_types[1] = &cls_struct_type;\n+\tdbl_arg_types[2] = NULL;\n+\n+\tCHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n+\t\tdbl_arg_types) == FFI_OK);\n+\n+\targs_dbl[0] = &g_dbl;\n+\targs_dbl[1] = &f_dbl;\n+\targs_dbl[2] = NULL;\n+\n+\tffi_call(&cif, FFI_FN(cls_struct_align_fn), &res_dbl, args_dbl);\n+\t/* { dg-output \"1 2 3 4 5 6 7 8 9 10 11 12 13 14: 9 11 13 15 17 19 21\" } */\n+\tprintf(\"res: %Lg %Lg %Lg %Lg %Lg %Lg %Lg\\n\", res_dbl.a, res_dbl.b,\n+\t\tres_dbl.c, res_dbl.d, res_dbl.e, res_dbl.f, res_dbl.g);\n+\t/* { dg-output \"\\nres: 9 11 13 15 17 19 21\" } */\n+\n+\tCHECK(ffi_prep_closure(pcl, &cif, cls_struct_align_gn, NULL) == FFI_OK);\n+\n+\tres_dbl = ((cls_struct_align(*)(cls_struct_align, cls_struct_align))(pcl))(g_dbl, f_dbl);\n+\t/* { dg-output \"\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14: 9 11 13 15 17 19 21\" } */\n+\tprintf(\"res: %Lg %Lg %Lg %Lg %Lg %Lg %Lg\\n\", res_dbl.a, res_dbl.b,\n+\t\tres_dbl.c, res_dbl.d, res_dbl.e, res_dbl.f, res_dbl.g);\n+\t/* { dg-output \"\\nres: 9 11 13 15 17 19 21\" } */\n+\n+  exit(0);\n+}"}, {"sha": "0e8be3febf047af2d27794a7db1963a484342655", "filename": "libffi/testsuite/libffi.call/cls_align_longdouble_split2.c", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_longdouble_split2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_longdouble_split2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_longdouble_split2.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -0,0 +1,120 @@\n+/*\tArea:\t\t\tffi_call, closure_call\n+\tPurpose:\t\tCheck structure alignment of long double.\n+\tLimitations:\tnone.\n+\tPR:\t\t\t\tnone.\n+\tOriginator:\t\tBlake Chaffin\t6/18/2007\n+*/\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* x86_64-*-mingw* x86_64-*-cygwin* } } */\n+/* { dg-options -mlong-double-128 { target powerpc64*-*-* } } */\n+\n+#include \"ffitest.h\"\n+\n+typedef struct cls_struct_align {\n+  long double a;\n+  long double b;\n+  long double c;\n+  long double d;\n+  long double e;\n+  double f;\n+  long double g;\n+} cls_struct_align;\n+\n+cls_struct_align cls_struct_align_fn(\n+\tcls_struct_align\ta1,\n+\tcls_struct_align\ta2)\n+{\n+\tstruct cls_struct_align r;\n+\n+\tr.a = a1.a + a2.a;\n+\tr.b = a1.b + a2.b;\n+\tr.c = a1.c + a2.c;\n+\tr.d = a1.d + a2.d;\n+\tr.e = a1.e + a2.e;\n+\tr.f = a1.f + a2.f;\n+\tr.g = a1.g + a2.g;\n+\n+\tprintf(\"%Lg %Lg %Lg %Lg %Lg %g %Lg %Lg %Lg %Lg %Lg %Lg %g %Lg: \"\n+\t\t\"%Lg %Lg %Lg %Lg %Lg %g %Lg\\n\",\n+\t\ta1.a, a1.b, a1.c, a1.d, a1.e, a1.f, a1.g,\n+\t\ta2.a, a2.b, a2.c, a2.d, a2.e, a2.f, a2.g,\n+\t\tr.a, r.b, r.c, r.d, r.e, r.f, r.g);\n+\n+\treturn r;\n+}\n+\n+static void\n+cls_struct_align_gn(ffi_cif* cif __UNUSED__, void* resp, void** args, \n+\t\t    void* userdata __UNUSED__)\n+{\n+\tstruct cls_struct_align a1, a2;\n+\n+\ta1 = *(struct cls_struct_align*)(args[0]);\n+\ta2 = *(struct cls_struct_align*)(args[1]);\n+\n+\t*(cls_struct_align*)resp = cls_struct_align_fn(a1, a2);\n+}\n+\n+int main (void)\n+{\n+\tffi_cif cif;\n+#ifndef USING_MMAP\n+\tstatic ffi_closure cl;\n+#endif\n+\tffi_closure *pcl;\n+\tvoid* args_dbl[3];\n+\tffi_type* cls_struct_fields[8];\n+\tffi_type cls_struct_type;\n+\tffi_type* dbl_arg_types[3];\n+\n+#ifdef USING_MMAP\n+\tpcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+\tpcl = &cl;\n+#endif\n+\n+\tcls_struct_type.size = 0;\n+\tcls_struct_type.alignment = 0;\n+\tcls_struct_type.type = FFI_TYPE_STRUCT;\n+\tcls_struct_type.elements = cls_struct_fields;\n+\n+\tstruct cls_struct_align g_dbl = { 1, 2, 3, 4, 5, 6, 7 };\n+\tstruct cls_struct_align f_dbl = { 8, 9, 10, 11, 12, 13, 14 };\n+\tstruct cls_struct_align res_dbl;\n+\n+\tcls_struct_fields[0] = &ffi_type_longdouble;\n+\tcls_struct_fields[1] = &ffi_type_longdouble;\n+\tcls_struct_fields[2] = &ffi_type_longdouble;\n+\tcls_struct_fields[3] = &ffi_type_longdouble;\n+\tcls_struct_fields[4] = &ffi_type_longdouble;\n+\tcls_struct_fields[5] = &ffi_type_double;\n+\tcls_struct_fields[6] = &ffi_type_longdouble;\n+\tcls_struct_fields[7] = NULL;\n+\n+\tdbl_arg_types[0] = &cls_struct_type;\n+\tdbl_arg_types[1] = &cls_struct_type;\n+\tdbl_arg_types[2] = NULL;\n+\n+\tCHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n+\t\tdbl_arg_types) == FFI_OK);\n+\n+\targs_dbl[0] = &g_dbl;\n+\targs_dbl[1] = &f_dbl;\n+\targs_dbl[2] = NULL;\n+\n+\tffi_call(&cif, FFI_FN(cls_struct_align_fn), &res_dbl, args_dbl);\n+\t/* { dg-output \"1 2 3 4 5 6 7 8 9 10 11 12 13 14: 9 11 13 15 17 19 21\" } */\n+\tprintf(\"res: %Lg %Lg %Lg %Lg %Lg %g %Lg\\n\", res_dbl.a, res_dbl.b,\n+\t\tres_dbl.c, res_dbl.d, res_dbl.e, res_dbl.f, res_dbl.g);\n+\t/* { dg-output \"\\nres: 9 11 13 15 17 19 21\" } */\n+\n+\tCHECK(ffi_prep_closure(pcl, &cif, cls_struct_align_gn, NULL) == FFI_OK);\n+\n+\tres_dbl = ((cls_struct_align(*)(cls_struct_align, cls_struct_align))(pcl))(g_dbl, f_dbl);\n+\t/* { dg-output \"\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14: 9 11 13 15 17 19 21\" } */\n+\tprintf(\"res: %Lg %Lg %Lg %Lg %Lg %g %Lg\\n\", res_dbl.a, res_dbl.b,\n+\t\tres_dbl.c, res_dbl.d, res_dbl.e, res_dbl.f, res_dbl.g);\n+\t/* { dg-output \"\\nres: 9 11 13 15 17 19 21\" } */\n+\n+  exit(0);\n+}"}, {"sha": "9a79922f561e6e3b280878d6b1b31e3d465f2d38", "filename": "libffi/testsuite/libffi.call/cls_align_pointer.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_pointer.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -19,11 +19,13 @@ cls_struct_align cls_struct_align_fn(struct cls_struct_align a1,\n   struct cls_struct_align result;\n \n   result.a = a1.a + a2.a;\n-  result.b = (void *)((unsigned long)a1.b + (unsigned long)a2.b);\n+  result.b = (void *)((uintptr_t)a1.b + (uintptr_t)a2.b);\n   result.c = a1.c + a2.c;\n \n-  printf(\"%d %lu %d %d %lu %d: %d %lu %d\\n\", a1.a, (unsigned long)a1.b, a1.c,\n-\t a2.a, (unsigned long)a2.b, a2.c, result.a, (unsigned long)result.b,\n+  printf(\"%d %\" PRIuPTR \" %d %d %\" PRIuPTR \" %d: %d %\" PRIuPTR \" %d\\n\", \n+         a1.a, (uintptr_t)a1.b, a1.c,\n+\t a2.a, (uintptr_t)a2.b, a2.c,\n+         result.a, (uintptr_t)result.b,\n \t result.c);\n \n   return result;\n@@ -87,14 +89,14 @@ int main (void)\n \n   ffi_call(&cif, FFI_FN(cls_struct_align_fn), &res_dbl, args_dbl);\n   /* { dg-output \"12 4951 127 1 9320 13: 13 14271 140\" } */\n-  printf(\"res: %d %lu %d\\n\", res_dbl.a, (unsigned long)res_dbl.b, res_dbl.c);\n+  printf(\"res: %d %\" PRIuPTR \" %d\\n\", res_dbl.a, (uintptr_t)res_dbl.b, res_dbl.c);\n   /* { dg-output \"\\nres: 13 14271 140\" } */\n \n   CHECK(ffi_prep_closure(pcl, &cif, cls_struct_align_gn, NULL) == FFI_OK);\n \n   res_dbl = ((cls_struct_align(*)(cls_struct_align, cls_struct_align))(pcl))(g_dbl, f_dbl);\n   /* { dg-output \"\\n12 4951 127 1 9320 13: 13 14271 140\" } */\n-  printf(\"res: %d %lu %d\\n\", res_dbl.a, (unsigned long)res_dbl.b, res_dbl.c);\n+  printf(\"res: %d %\" PRIuPTR \" %d\\n\", res_dbl.a, (uintptr_t)res_dbl.b, res_dbl.c);\n   /* { dg-output \"\\nres: 13 14271 140\" } */\n \n   exit(0);"}, {"sha": "c568381cf45f8169585137b7e6518da0a1f6ffac", "filename": "libffi/testsuite/libffi.call/cls_dbls_struct.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_dbls_struct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_dbls_struct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_dbls_struct.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -0,0 +1,75 @@\n+/* Area:\t\tffi_call, closure_call\n+   Purpose:\t\tCheck double arguments in structs.\n+   Limitations:\tnone.\n+   PR:\t\t\tnone.\n+   Originator:\tBlake Chaffin 6/23/2007\t*/\n+\n+/* { dg-do run } */\n+\n+#include \"ffitest.h\"\n+\n+typedef struct Dbls {\n+\tdouble x;\n+\tdouble y;\n+} Dbls;\n+\n+void\n+closure_test_fn(Dbls p)\n+{\n+\tprintf(\"%.1f %.1f\\n\", p.x, p.y);\n+}\n+\n+void\n+closure_test_gn(ffi_cif* cif __UNUSED__, void* resp __UNUSED__,\n+\t\tvoid** args, void* userdata __UNUSED__)\n+{\n+\tclosure_test_fn(*(Dbls*)args[0]);\n+}\n+\n+int main(int argc __UNUSED__, char** argv __UNUSED__)\n+{\n+\tffi_cif cif;\n+\n+#ifndef USING_MMAP\n+\tstatic ffi_closure cl;\n+#endif\n+\n+\tffi_closure*\tpcl;\n+\tffi_type*\t\tcl_arg_types[1];\n+\n+#ifdef USING_MMAP\n+\tpcl = allocate_mmap(sizeof(ffi_closure));\n+#else\n+\tpcl = &cl;\n+#endif\n+\n+\tffi_type\tts1_type;\n+\tffi_type*\tts1_type_elements[4];\n+\n+\tts1_type.size = 0;\n+\tts1_type.alignment = 0;\n+\tts1_type.type = FFI_TYPE_STRUCT;\n+\tts1_type.elements = ts1_type_elements;\n+\n+\tts1_type_elements[0] = &ffi_type_double;\n+\tts1_type_elements[1] = &ffi_type_double;\n+\tts1_type_elements[2] = NULL;\n+\n+\tcl_arg_types[0] = &ts1_type;\n+\n+\tDbls arg = { 1.0, 2.0 };\n+\n+\t/* Initialize the cif */\n+\tCHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 1,\n+\t\t\t\t &ffi_type_void, cl_arg_types) == FFI_OK);\n+\n+\tCHECK(ffi_prep_closure(pcl, &cif, closure_test_gn, NULL) == FFI_OK);\n+\n+\t((void*(*)(Dbls))(pcl))(arg);\n+\t/* { dg-output \"1.0 2.0\\n\" { xfail x86_64-*-linux-* } } */\n+\n+\tclosure_test_fn(arg);\n+\t/* { dg-output \"1.0 2.0\\n\" } */\n+\n+\treturn 0;\n+}"}, {"sha": "4d6d5b71c4045ab51f012518a8d999a0a54b8a6d", "filename": "libffi/testsuite/libffi.call/cls_double_va.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_double_va.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_double_va.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_double_va.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -0,0 +1,64 @@\n+/* Area:\t\tffi_call, closure_call\n+   Purpose:\t\tTest doubles passed in variable argument lists.\n+   Limitations:\tnone.\n+   PR:\t\t\tnone.\n+   Originator:\tBlake Chaffin 6/6/2007\t */\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n+#include \"ffitest.h\"\n+\n+static void\n+cls_double_va_fn(ffi_cif* cif __UNUSED__, void* resp, \n+\t\t void** args, void* userdata __UNUSED__)\n+{\n+\tchar*\tformat\t\t= *(char**)args[0];\n+\tdouble\tdoubleValue\t= *(double*)args[1];\n+\n+\t*(ffi_arg*)resp = printf(format, doubleValue);\n+}\n+\n+int main (void)\n+{\n+\tffi_cif cif;\n+#ifndef USING_MMAP\n+\tstatic ffi_closure cl;\n+#endif\n+\tffi_closure *pcl;\n+\tvoid* args[3];\n+\tffi_type* arg_types[3];\n+\n+#ifdef USING_MMAP\n+\tpcl = allocate_mmap(sizeof(ffi_closure));\n+#else\n+\tpcl = &cl;\n+#endif\n+\n+\tchar*\tformat\t\t= \"%.1f\\n\";\n+\tdouble\tdoubleArg\t= 7;\n+\tffi_arg\tres\t\t\t= 0;\n+\n+\targ_types[0] = &ffi_type_pointer;\n+\targ_types[1] = &ffi_type_double;\n+\targ_types[2] = NULL;\n+\n+\tCHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &ffi_type_sint,\n+\t\targ_types) == FFI_OK);\n+\n+\targs[0] = &format;\n+\targs[1] = &doubleArg;\n+\targs[2] = NULL;\n+\n+\tffi_call(&cif, FFI_FN(printf), &res, args);\n+\t// { dg-output \"7.0\" }\n+\tprintf(\"res: %d\\n\", (int) res);\n+\t// { dg-output \"\\nres: 4\" }\n+\n+\tCHECK(ffi_prep_closure(pcl, &cif, cls_double_va_fn, NULL) == FFI_OK);\n+\n+\tres\t= ((int(*)(char*, double))(pcl))(format, doubleArg);\n+\t// { dg-output \"\\n7.0\" }\n+\tprintf(\"res: %d\\n\", (int) res);\n+\t// { dg-output \"\\nres: 4\" }\n+\n+\texit(0);\n+}"}, {"sha": "a0fafc9f3e8613d92a15b25d07c920ca55a1a2b2", "filename": "libffi/testsuite/libffi.call/cls_longdouble.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_longdouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_longdouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_longdouble.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -0,0 +1,111 @@\n+/* Area:\t\tffi_call, closure_call\n+   Purpose:\t\tCheck long double arguments.\n+   Limitations:\tnone.\n+   PR:\t\t\tnone.\n+   Originator:\tBlake Chaffin\t*/\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* x86_64-*-mingw* x86_64-*-cygwin* } } */\n+/* { dg-options -mlong-double-128 { target powerpc64*-*-* } } */\n+\n+#include \"ffitest.h\"\n+\n+long double cls_ldouble_fn(\n+\tlong double\ta1,\n+\tlong double\ta2,\n+\tlong double\ta3,\n+\tlong double\ta4,\n+\tlong double\ta5,\n+\tlong double\ta6,\n+\tlong double\ta7,\n+\tlong double\ta8)\n+{\n+\tlong double\tr = a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8;\n+\n+\tprintf(\"%Lg %Lg %Lg %Lg %Lg %Lg %Lg %Lg: %Lg\\n\",\n+\t\ta1, a2, a3, a4, a5, a6, a7, a8, r);\n+\n+\treturn r;\n+}\n+\n+static void\n+cls_ldouble_gn(ffi_cif* cif __UNUSED__, void* resp, \n+\t       void** args, void* userdata __UNUSED__)\n+{\n+\tlong double\ta1\t= *(long double*)args[0];\n+\tlong double\ta2\t= *(long double*)args[1];\n+\tlong double\ta3\t= *(long double*)args[2];\n+\tlong double\ta4\t= *(long double*)args[3];\n+\tlong double\ta5\t= *(long double*)args[4];\n+\tlong double\ta6\t= *(long double*)args[5];\n+\tlong double\ta7\t= *(long double*)args[6];\n+\tlong double\ta8\t= *(long double*)args[7];\n+\n+\t*(long double*)resp = cls_ldouble_fn(\n+\t\ta1, a2, a3, a4, a5, a6, a7, a8);\n+}\n+\n+int main(void)\n+{\n+\tffi_cif\tcif;\n+#ifndef USING_MMAP\n+\tstatic ffi_closure\tcl;\n+#endif\n+\tffi_closure*\tpcl;\n+\tvoid*\t\t\targs[9];\n+\tffi_type*\t\targ_types[9];\n+\tlong double\t\tres\t= 0;\n+\n+#ifdef USING_MMAP\n+\tpcl = allocate_mmap(sizeof(ffi_closure));\n+#else\n+\tpcl = &cl;\n+#endif\n+\n+\tlong double\targ1\t= 1;\n+\tlong double\targ2\t= 2;\n+\tlong double\targ3\t= 3;\n+\tlong double\targ4\t= 4;\n+\tlong double\targ5\t= 5;\n+\tlong double\targ6\t= 6;\n+\tlong double\targ7\t= 7;\n+\tlong double\targ8\t= 8;\n+\n+\targ_types[0] = &ffi_type_longdouble;\n+\targ_types[1] = &ffi_type_longdouble;\n+\targ_types[2] = &ffi_type_longdouble;\n+\targ_types[3] = &ffi_type_longdouble;\n+\targ_types[4] = &ffi_type_longdouble;\n+\targ_types[5] = &ffi_type_longdouble;\n+\targ_types[6] = &ffi_type_longdouble;\n+\targ_types[7] = &ffi_type_longdouble;\n+\targ_types[8] = NULL;\n+\n+\tCHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 8, &ffi_type_longdouble,\n+\t\targ_types) == FFI_OK);\n+\n+\targs[0] = &arg1;\n+\targs[1] = &arg2;\n+\targs[2] = &arg3;\n+\targs[3] = &arg4;\n+\targs[4] = &arg5;\n+\targs[5] = &arg6;\n+\targs[6] = &arg7;\n+\targs[7] = &arg8;\n+\targs[8] = NULL;\n+\n+\tffi_call(&cif, FFI_FN(cls_ldouble_fn), &res, args);\n+\t/* { dg-output \"1 2 3 4 5 6 7 8: 36\" } */\n+\tprintf(\"res: %Lg\\n\", res);\n+\t/* { dg-output \"\\nres: 36\" } */\n+\n+\tCHECK(ffi_prep_closure(pcl, &cif, cls_ldouble_gn, NULL) == FFI_OK);\n+\n+\tres = ((long double(*)(long double, long double, long double, long double,\n+\t\tlong double, long double, long double, long double))(pcl))(arg1, arg2,\n+\t\targ3, arg4, arg5, arg6, arg7, arg8);\n+\t/* { dg-output \"\\n1 2 3 4 5 6 7 8: 36\" } */\n+\tprintf(\"res: %Lg\\n\", res);\n+\t/* { dg-output \"\\nres: 36\" } */\n+\n+\treturn 0;\n+}"}, {"sha": "d5a7fe5c01361b1f50da166afb2f18072548c022", "filename": "libffi/testsuite/libffi.call/cls_longdouble_va.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_longdouble_va.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_longdouble_va.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_longdouble_va.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -0,0 +1,64 @@\n+/* Area:\t\tffi_call, closure_call\n+   Purpose:\t\tTest long doubles passed in variable argument lists.\n+   Limitations:\tnone.\n+   PR:\t\t\tnone.\n+   Originator:\tBlake Chaffin 6/6/2007\t */\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* x86_64-*-mingw* x86_64-*-cygwin* } } */\n+#include \"ffitest.h\"\n+\n+static void\n+cls_longdouble_va_fn(ffi_cif* cif __UNUSED__, void* resp, \n+\t\t     void** args, void* userdata __UNUSED__)\n+{\n+\tchar*\t\tformat\t= *(char**)args[0];\n+\tlong double\tldValue\t= *(long double*)args[1];\n+\n+\t*(ffi_arg*)resp = printf(format, ldValue);\n+}\n+\n+int main (void)\n+{\n+\tffi_cif cif;\n+#ifndef USING_MMAP\n+\tstatic ffi_closure cl;\n+#endif\n+\tffi_closure *pcl;\n+\tvoid* args[3];\n+\tffi_type* arg_types[3];\n+\n+#ifdef USING_MMAP\n+\tpcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+\tpcl = &cl;\n+#endif\n+\n+\tchar*\t\tformat\t= \"%L.1f\\n\";\n+\tlong double\tldArg\t= 7;\n+\tffi_arg\t\tres\t\t= 0;\n+\n+\targ_types[0] = &ffi_type_pointer;\n+\targ_types[1] = &ffi_type_longdouble;\n+\targ_types[2] = NULL;\n+\n+\tCHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &ffi_type_sint,\n+\t\targ_types) == FFI_OK);\n+\n+\targs[0] = &format;\n+\targs[1] = &ldArg;\n+\targs[2] = NULL;\n+\n+\tffi_call(&cif, FFI_FN(printf), &res, args);\n+\t// { dg-output \"7.0\" { xfail i*86-*-linux-* x86_64-*-linux-* } }\n+\tprintf(\"res: %d\\n\", (int) res);\n+\t// { dg-output \"\\nres: 4\" { xfail i*86-*-linux-* x86_64-*-linux-* } }\n+\n+\tCHECK(ffi_prep_closure(pcl, &cif, cls_longdouble_va_fn, NULL) == FFI_OK);\n+\n+\tres\t= ((int(*)(char*, long double))(pcl))(format, ldArg);\n+\t// { dg-output \"\\n7.0\" }\n+\tprintf(\"res: %d\\n\", (int) res);\n+\t// { dg-output \"\\nres: 4\" }\n+\n+\texit(0);\n+}"}, {"sha": "ffc1f6a3544eb7d0cdaae80e639130b8b2a2a570", "filename": "libffi/testsuite/libffi.call/cls_pointer.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_pointer.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -0,0 +1,82 @@\n+/* Area:\t\tffi_call, closure_call\n+   Purpose:\t\tCheck pointer arguments.\n+   Limitations:\tnone.\n+   PR:\t\t\tnone.\n+   Originator:\tBlake Chaffin 6/6/2007\t*/\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n+#include \"ffitest.h\"\n+\n+void* cls_pointer_fn(void* a1, void* a2)\n+{\n+\tvoid*\tresult\t= (void*)((intptr_t)a1 + (intptr_t)a2);\n+\n+\tprintf(\"0x%08x 0x%08x: 0x%08x\\n\", \n+\t       (unsigned int)(uintptr_t) a1,\n+               (unsigned int)(uintptr_t) a2,\n+               (unsigned int)(uintptr_t) result);\n+\n+\treturn result;\n+}\n+\n+static void\n+cls_pointer_gn(ffi_cif* cif __UNUSED__, void* resp, \n+\t       void** args, void* userdata __UNUSED__)\n+{\n+\tvoid*\ta1\t= *(void**)(args[0]);\n+\tvoid*\ta2\t= *(void**)(args[1]);\n+\n+\t*(void**)resp = cls_pointer_fn(a1, a2);\n+}\n+\n+int main (void)\n+{\n+\tffi_cif\tcif;\n+#ifndef USING_MMAP\n+\tstatic ffi_closure\tcl;\n+#endif\n+\tffi_closure*\tpcl;\n+\tvoid*\t\t\targs[3];\n+//\tffi_type\t\tcls_pointer_type;\n+\tffi_type*\t\targ_types[3];\n+\n+#ifdef USING_MMAP\n+\tpcl = allocate_mmap(sizeof(ffi_closure));\n+#else\n+\tpcl = &cl;\n+#endif\n+\n+/*\tcls_pointer_type.size = sizeof(void*);\n+\tcls_pointer_type.alignment = 0;\n+\tcls_pointer_type.type = FFI_TYPE_POINTER;\n+\tcls_pointer_type.elements = NULL;*/\n+\n+\tvoid*\targ1\t= (void*)0x12345678;\n+\tvoid*\targ2\t= (void*)0x89abcdef;\n+\tffi_arg\tres\t\t= 0;\n+\n+\targ_types[0] = &ffi_type_pointer;\n+\targ_types[1] = &ffi_type_pointer;\n+\targ_types[2] = NULL;\n+\n+\tCHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &ffi_type_pointer,\n+\t\targ_types) == FFI_OK);\n+\n+\targs[0] = &arg1;\n+\targs[1] = &arg2;\n+\targs[2] = NULL;\n+\n+\tffi_call(&cif, FFI_FN(cls_pointer_fn), &res, args);\n+\t/* { dg-output \"0x12345678 0x89abcdef: 0x9be02467\" } */\n+\tprintf(\"res: 0x%08x\\n\", (unsigned int) res);\n+\t/* { dg-output \"\\nres: 0x9be02467\" } */\n+\n+\tCHECK(ffi_prep_closure(pcl, &cif, cls_pointer_gn, NULL) == FFI_OK);\n+\n+\tres = (ffi_arg)((void*(*)(void*, void*))(pcl))(arg1, arg2);\n+\t/* { dg-output \"\\n0x12345678 0x89abcdef: 0x9be02467\" } */\n+\tprintf(\"res: 0x%08x\\n\", (unsigned int) res);\n+\t/* { dg-output \"\\nres: 0x9be02467\" } */\n+\n+\texit(0);\n+}"}, {"sha": "c7ab55b37e5671bfacfe3e71c4fcc7273cde5b6e", "filename": "libffi/testsuite/libffi.call/cls_pointer_stack.c", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_pointer_stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fcls_pointer_stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_pointer_stack.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -0,0 +1,148 @@\n+/* Area:\t\tffi_call, closure_call\n+   Purpose:\t\tCheck pointer arguments across multiple hideous stack frames.\n+   Limitations:\tnone.\n+   PR:\t\t\tnone.\n+   Originator:\tBlake Chaffin 6/7/2007\t*/\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n+#include \"ffitest.h\"\n+\n+static\tlong dummyVar;\n+\n+long dummy_func(\n+\tlong double a1, char b1,\n+\tlong double a2, char b2,\n+\tlong double a3, char b3,\n+\tlong double a4, char b4)\n+{\n+\treturn a1 + b1 + a2 + b2 + a3 + b3 + a4 + b4;\n+}\n+\n+void* cls_pointer_fn2(void* a1, void* a2)\n+{\n+\tlong double\ttrample1\t= (intptr_t)a1 + (intptr_t)a2;\n+\tchar\t\ttrample2\t= ((char*)&a1)[0] + ((char*)&a2)[0];\n+\tlong double\ttrample3\t= (intptr_t)trample1 + (intptr_t)a1;\n+\tchar\t\ttrample4\t= trample2 + ((char*)&a1)[1];\n+\tlong double\ttrample5\t= (intptr_t)trample3 + (intptr_t)a2;\n+\tchar\t\ttrample6\t= trample4 + ((char*)&a2)[1];\n+\tlong double\ttrample7\t= (intptr_t)trample5 + (intptr_t)trample1;\n+\tchar\t\ttrample8\t= trample6 + trample2;\n+\n+\tdummyVar\t= dummy_func(trample1, trample2, trample3, trample4,\n+\t\ttrample5, trample6, trample7, trample8);\n+\n+\tvoid*\tresult\t= (void*)((intptr_t)a1 + (intptr_t)a2);\n+\n+\tprintf(\"0x%08x 0x%08x: 0x%08x\\n\", \n+\t       (unsigned int)(uintptr_t) a1,\n+               (unsigned int)(uintptr_t) a2,\n+               (unsigned int)(uintptr_t) result);\n+\n+\treturn result;\n+}\n+\n+void* cls_pointer_fn1(void* a1, void* a2)\n+{\n+\tlong double\ttrample1\t= (intptr_t)a1 + (intptr_t)a2;\n+\tchar\t\ttrample2\t= ((char*)&a1)[0] + ((char*)&a2)[0];\n+\tlong double\ttrample3\t= (intptr_t)trample1 + (intptr_t)a1;\n+\tchar\t\ttrample4\t= trample2 + ((char*)&a1)[1];\n+\tlong double\ttrample5\t= (intptr_t)trample3 + (intptr_t)a2;\n+\tchar\t\ttrample6\t= trample4 + ((char*)&a2)[1];\n+\tlong double\ttrample7\t= (intptr_t)trample5 + (intptr_t)trample1;\n+\tchar\t\ttrample8\t= trample6 + trample2;\n+\n+\tdummyVar\t= dummy_func(trample1, trample2, trample3, trample4,\n+\t\ttrample5, trample6, trample7, trample8);\n+\n+\tvoid*\tresult\t= (void*)((intptr_t)a1 + (intptr_t)a2);\n+\n+\tprintf(\"0x%08x 0x%08x: 0x%08x\\n\",\n+               (unsigned int)(intptr_t) a1,\n+               (unsigned int)(intptr_t) a2,\n+               (unsigned int)(intptr_t) result);\n+\n+\tresult\t= cls_pointer_fn2(result, a1);\n+\n+\treturn result;\n+}\n+\n+static void\n+cls_pointer_gn(ffi_cif* cif __UNUSED__, void* resp, \n+\t       void** args, void* userdata __UNUSED__)\n+{\n+\tvoid*\ta1\t= *(void**)(args[0]);\n+\tvoid*\ta2\t= *(void**)(args[1]);\n+\n+\tlong double\ttrample1\t= (intptr_t)a1 + (intptr_t)a2;\n+\tchar\t\ttrample2\t= ((char*)&a1)[0] + ((char*)&a2)[0];\n+\tlong double\ttrample3\t= (intptr_t)trample1 + (intptr_t)a1;\n+\tchar\t\ttrample4\t= trample2 + ((char*)&a1)[1];\n+\tlong double\ttrample5\t= (intptr_t)trample3 + (intptr_t)a2;\n+\tchar\t\ttrample6\t= trample4 + ((char*)&a2)[1];\n+\tlong double\ttrample7\t= (intptr_t)trample5 + (intptr_t)trample1;\n+\tchar\t\ttrample8\t= trample6 + trample2;\n+\n+\tdummyVar\t= dummy_func(trample1, trample2, trample3, trample4,\n+\t\ttrample5, trample6, trample7, trample8);\n+\n+\t*(void**)resp = cls_pointer_fn1(a1, a2);\n+}\n+\n+int main (void)\n+{\n+\tffi_cif\tcif;\n+#ifndef USING_MMAP\n+\tstatic ffi_closure\tcl;\n+#endif\n+\tffi_closure*\tpcl;\n+\tvoid*\t\t\targs[3];\n+//\tffi_type\t\tcls_pointer_type;\n+\tffi_type*\t\targ_types[3];\n+\n+#ifdef USING_MMAP\n+\tpcl = allocate_mmap(sizeof(ffi_closure));\n+#else\n+\tpcl = &cl;\n+#endif\n+\n+/*\tcls_pointer_type.size = sizeof(void*);\n+\tcls_pointer_type.alignment = 0;\n+\tcls_pointer_type.type = FFI_TYPE_POINTER;\n+\tcls_pointer_type.elements = NULL;*/\n+\n+\tvoid*\targ1\t= (void*)0x01234567;\n+\tvoid*\targ2\t= (void*)0x89abcdef;\n+\tffi_arg\tres\t\t= 0;\n+\n+\targ_types[0] = &ffi_type_pointer;\n+\targ_types[1] = &ffi_type_pointer;\n+\targ_types[2] = NULL;\n+\n+\tCHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &ffi_type_pointer,\n+\t\targ_types) == FFI_OK);\n+\n+\targs[0] = &arg1;\n+\targs[1] = &arg2;\n+\targs[2] = NULL;\n+\n+\tprintf(\"\\n\");\n+\tffi_call(&cif, FFI_FN(cls_pointer_fn1), &res, args);\n+\n+\tprintf(\"res: 0x%08x\\n\", (unsigned int) res);\n+\t// { dg-output \"\\n0x01234567 0x89abcdef: 0x8acf1356\" }\n+\t// { dg-output \"\\n0x8acf1356 0x01234567: 0x8bf258bd\" }\n+\t// { dg-output \"\\nres: 0x8bf258bd\" }\n+\n+\tCHECK(ffi_prep_closure(pcl, &cif, cls_pointer_gn, NULL) == FFI_OK);\n+\n+\tres = (ffi_arg)((void*(*)(void*, void*))(pcl))(arg1, arg2);\n+\n+\tprintf(\"res: 0x%08x\\n\", (unsigned int) res);\n+\t// { dg-output \"\\n0x01234567 0x89abcdef: 0x8acf1356\" }\n+\t// { dg-output \"\\n0x8acf1356 0x01234567: 0x8bf258bd\" }\n+\t// { dg-output \"\\nres: 0x8bf258bd\" }\n+\n+\texit(0);\n+}"}, {"sha": "d4e5200644d731518cae4be8ab25cffdbc52a55a", "filename": "libffi/testsuite/libffi.call/err_bad_abi.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Ferr_bad_abi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Ferr_bad_abi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Ferr_bad_abi.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -0,0 +1,45 @@\n+/* Area:\t\tffi_prep_cif, ffi_prep_closure\n+   Purpose:\t\tTest error return for bad ABIs.\n+   Limitations:\tnone.\n+   PR:\t\t\tnone.\n+   Originator:\tBlake Chaffin 6/6/2007\t */\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* i*86-*-linux-* x86_64-*-linux-* } } */\n+#include \"ffitest.h\"\n+\n+static void\n+dummy_fn(ffi_cif* cif __UNUSED__, void* resp __UNUSED__, \n+\t void** args __UNUSED__, void* userdata __UNUSED__)\n+{}\n+\n+int main (void)\n+{\n+\tffi_cif cif;\n+#ifndef USING_MMAP\n+\tstatic ffi_closure cl;\n+#endif\n+\tffi_closure *pcl;\n+\tvoid* args[1];\n+\tffi_type* arg_types[1];\n+\n+#ifdef USING_MMAP\n+\tpcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+\tpcl = &cl;\n+#endif\n+\n+\targ_types[0] = NULL;\n+\targs[0] = NULL;\n+\n+\tCHECK(ffi_prep_cif(&cif, 255, 0, &ffi_type_void,\n+\t\targ_types) == FFI_BAD_ABI);\n+\n+\tCHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 0, &ffi_type_void,\n+\t\targ_types) == FFI_OK);\n+\n+\tcif.abi= 255;\n+\n+\tCHECK(ffi_prep_closure(pcl, &cif, dummy_fn, NULL) == FFI_BAD_ABI);\n+\n+\texit(0);\n+}"}, {"sha": "2a2e301e9c8250467bae9eda4405faa4b78c2444", "filename": "libffi/testsuite/libffi.call/err_bad_typedef.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Ferr_bad_typedef.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Ferr_bad_typedef.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Ferr_bad_typedef.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -0,0 +1,35 @@\n+/* Area:\t\tffi_prep_cif\n+   Purpose:\t\tTest error return for bad typedefs.\n+   Limitations:\tnone.\n+   PR:\t\t\tnone.\n+   Originator:\tBlake Chaffin 6/6/2007\t */\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* i*86-*-linux-* x86_64-*-linux-* } } */\n+#include \"ffitest.h\"\n+\n+int main (void)\n+{\n+\tffi_cif cif;\n+#ifndef USING_MMAP\n+\tstatic ffi_closure cl;\n+#endif\n+\tffi_closure *pcl;\n+\tffi_type* arg_types[1];\n+\n+#ifdef USING_MMAP\n+\tpcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+\tpcl = &cl;\n+#endif\n+\n+\targ_types[0] = NULL;\n+\n+\tffi_type\tbadType\t= ffi_type_void;\n+\n+\tbadType.size = 0;\n+\n+\tCHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 0, &badType,\n+\t\targ_types) == FFI_BAD_TYPEDEF);\n+\n+\texit(0);\n+}"}, {"sha": "8a437e46b821ae5ec2a6eb19079616ada9597ad0", "filename": "libffi/testsuite/libffi.call/ffitest.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fffitest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fffitest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fffitest.h?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -2,6 +2,8 @@\n #include <stdio.h>\n #include <string.h>\n #include <fcntl.h>\n+#include <stdint.h>\n+#include <inttypes.h>\n #include <ffi.h>\n #include \"fficonfig.h\"\n "}, {"sha": "3327ac1b2ca1fb580567d28c2d41e3eb4b4b7024", "filename": "libffi/testsuite/libffi.call/stret_large.c", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fstret_large.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fstret_large.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fstret_large.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -0,0 +1,153 @@\n+/* Area:\t\tffi_call, closure_call\n+   Purpose:\t\tCheck structure returning with different structure size.\n+\t\t\t\tDepending on the ABI. Check bigger struct which overlaps\n+\t\t\t\tthe gp and fp register count on Darwin/AIX/ppc64.\n+   Limitations:\tnone.\n+   PR:\t\t\tnone.\n+   Originator:\tBlake Chaffin\t6/21/2007\t*/\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-*  } } */\n+#include \"ffitest.h\"\n+\n+// 13 FPRs: 104 bytes\n+// 14 FPRs: 112 bytes\n+\n+typedef struct struct_108byte {\n+\tdouble a;\n+\tdouble b;\n+\tdouble c;\n+\tdouble d;\n+\tdouble e;\n+\tdouble f;\n+\tdouble g;\n+\tdouble h;\n+\tdouble i;\n+\tdouble j;\n+\tdouble k;\n+\tdouble l;\n+\tdouble m;\n+\tint n;\n+} struct_108byte;\n+\n+struct_108byte cls_struct_108byte_fn(\n+\tstruct_108byte b0,\n+\tstruct_108byte b1,\n+\tstruct_108byte b2,\n+\tstruct_108byte b3)\n+{\n+\tstruct_108byte\tresult;\n+\n+\tresult.a = b0.a + b1.a + b2.a + b3.a;\n+\tresult.b = b0.b + b1.b + b2.b + b3.b;\n+\tresult.c = b0.c + b1.c + b2.c + b3.c;\n+\tresult.d = b0.d + b1.d + b2.d + b3.d;\n+\tresult.e = b0.e + b1.e + b2.e + b3.e;\n+\tresult.f = b0.f + b1.f + b2.f + b3.f;\n+\tresult.g = b0.g + b1.g + b2.g + b3.g;\n+\tresult.h = b0.h + b1.h + b2.h + b3.h;\n+\tresult.i = b0.i + b1.i + b2.i + b3.i;\n+\tresult.j = b0.j + b1.j + b2.j + b3.j;\n+\tresult.k = b0.k + b1.k + b2.k + b3.k;\n+\tresult.l = b0.l + b1.l + b2.l + b3.l;\n+\tresult.m = b0.m + b1.m + b2.m + b3.m;\n+\tresult.n = b0.n + b1.n + b2.n + b3.n;\n+\n+\tprintf(\"%g %g %g %g %g %g %g %g %g %g %g %g %g %d\\n\", result.a, result.b, result.c,\n+\t\tresult.d, result.e, result.f, result.g, result.h, result.i,\n+\t\tresult.j, result.k, result.l, result.m, result.n);\n+\n+\treturn result;\n+}\n+\n+static void\n+cls_struct_108byte_gn(ffi_cif* cif __UNUSED__, void* resp, void** args, void* userdata __UNUSED__)\n+{\n+\tstruct_108byte\tb0, b1, b2, b3;\n+\n+\tb0 = *(struct_108byte*)(args[0]);\n+\tb1 = *(struct_108byte*)(args[1]);\n+\tb2 = *(struct_108byte*)(args[2]);\n+\tb3 = *(struct_108byte*)(args[3]);\n+\n+\t*(struct_108byte*)resp = cls_struct_108byte_fn(b0, b1, b2, b3);\n+}\n+\n+int main (void)\n+{\n+\tffi_cif cif;\n+#ifndef USING_MMAP\n+\tstatic ffi_closure cl;\n+#endif\n+\tffi_closure *pcl;\n+\tvoid* args_dbl[5];\n+\tffi_type* cls_struct_fields[15];\n+\tffi_type cls_struct_type;\n+\tffi_type* dbl_arg_types[5];\n+\n+#ifdef USING_MMAP\n+\tpcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+\tpcl = &cl;\n+#endif\n+\n+\tcls_struct_type.size = 0;\n+\tcls_struct_type.alignment = 0;\n+\tcls_struct_type.type = FFI_TYPE_STRUCT;\n+\tcls_struct_type.elements = cls_struct_fields;\n+\n+\tstruct_108byte e_dbl = { 9.0, 2.0, 6.0, 5.0, 3.0, 4.0, 8.0, 1.0, 1.0, 2.0, 3.0, 7.0, 2.0, 7 };\n+\tstruct_108byte f_dbl = { 1.0, 2.0, 3.0, 7.0, 2.0, 5.0, 6.0, 7.0, 4.0, 5.0, 7.0, 9.0, 1.0, 4 };\n+\tstruct_108byte g_dbl = { 4.0, 5.0, 7.0, 9.0, 1.0, 1.0, 2.0, 9.0, 8.0, 6.0, 1.0, 4.0, 0.0, 3 };\n+\tstruct_108byte h_dbl = { 8.0, 6.0, 1.0, 4.0, 0.0, 3.0, 3.0, 1.0, 9.0, 2.0, 6.0, 5.0, 3.0, 2 };\n+\tstruct_108byte res_dbl;\n+\n+\tcls_struct_fields[0] = &ffi_type_double;\n+\tcls_struct_fields[1] = &ffi_type_double;\n+\tcls_struct_fields[2] = &ffi_type_double;\n+\tcls_struct_fields[3] = &ffi_type_double;\n+\tcls_struct_fields[4] = &ffi_type_double;\n+\tcls_struct_fields[5] = &ffi_type_double;\n+\tcls_struct_fields[6] = &ffi_type_double;\n+\tcls_struct_fields[7] = &ffi_type_double;\n+\tcls_struct_fields[8] = &ffi_type_double;\n+\tcls_struct_fields[9] = &ffi_type_double;\n+\tcls_struct_fields[10] = &ffi_type_double;\n+\tcls_struct_fields[11] = &ffi_type_double;\n+\tcls_struct_fields[12] = &ffi_type_double;\n+\tcls_struct_fields[13] = &ffi_type_sint32;\n+\tcls_struct_fields[14] = NULL;\n+\n+\tdbl_arg_types[0] = &cls_struct_type;\n+\tdbl_arg_types[1] = &cls_struct_type;\n+\tdbl_arg_types[2] = &cls_struct_type;\n+\tdbl_arg_types[3] = &cls_struct_type;\n+\tdbl_arg_types[4] = NULL;\n+\n+\tCHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 4, &cls_struct_type,\n+\t\tdbl_arg_types) == FFI_OK);\n+\n+\targs_dbl[0] = &e_dbl;\n+\targs_dbl[1] = &f_dbl;\n+\targs_dbl[2] = &g_dbl;\n+\targs_dbl[3] = &h_dbl;\n+\targs_dbl[4] = NULL;\n+\n+\tffi_call(&cif, FFI_FN(cls_struct_108byte_fn), &res_dbl, args_dbl);\n+\t/* { dg-output \"22 15 17 25 6 13 19 18 22 15 17 25 6 16\" } */\n+\tprintf(\"res: %g %g %g %g %g %g %g %g %g %g %g %g %g %d\\n\", res_dbl.a, res_dbl.b,\n+\t\tres_dbl.c, res_dbl.d, res_dbl.e, res_dbl.f, res_dbl.g, res_dbl.h, res_dbl.i,\n+\t\tres_dbl.j, res_dbl.k, res_dbl.l, res_dbl.m, res_dbl.n);\n+\t/* { dg-output \"\\nres: 22 15 17 25 6 13 19 18 22 15 17 25 6 16\" } */\n+\n+\tCHECK(ffi_prep_closure(pcl, &cif, cls_struct_108byte_gn, NULL) == FFI_OK);\n+\n+\tres_dbl = ((struct_108byte(*)(struct_108byte, struct_108byte,\n+\t\tstruct_108byte, struct_108byte))(pcl))(e_dbl, f_dbl, g_dbl, h_dbl);\n+\t/* { dg-output \"\\n22 15 17 25 6 13 19 18 22 15 17 25 6 16\" } */\n+\tprintf(\"res: %g %g %g %g %g %g %g %g %g %g %g %g %g %d\\n\", res_dbl.a, res_dbl.b,\n+\t\tres_dbl.c, res_dbl.d, res_dbl.e, res_dbl.f, res_dbl.g, res_dbl.h, res_dbl.i,\n+\t\tres_dbl.j, res_dbl.k, res_dbl.l, res_dbl.m, res_dbl.n);\n+\t/* { dg-output \"\\nres: 22 15 17 25 6 13 19 18 22 15 17 25 6 16\" } */\n+\n+\texit(0);\n+}"}, {"sha": "8550ab17cb0916c161085813792a98bcb27e94a3", "filename": "libffi/testsuite/libffi.call/stret_large2.c", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fstret_large2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fstret_large2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fstret_large2.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -0,0 +1,156 @@\n+/* Area:\t\tffi_call, closure_call\n+   Purpose:\t\tCheck structure returning with different structure size.\n+\t\t\t\tDepending on the ABI. Check bigger struct which overlaps\n+\t\t\t\tthe gp and fp register count on Darwin/AIX/ppc64.\n+   Limitations:\tnone.\n+   PR:\t\t\tnone.\n+   Originator:\tBlake Chaffin\t6/21/2007\t*/\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-*  } } */\n+#include \"ffitest.h\"\n+\n+// 13 FPRs: 104 bytes\n+// 14 FPRs: 112 bytes\n+\n+typedef struct struct_116byte {\n+\tdouble a;\n+\tdouble b;\n+\tdouble c;\n+\tdouble d;\n+\tdouble e;\n+\tdouble f;\n+\tdouble g;\n+\tdouble h;\n+\tdouble i;\n+\tdouble j;\n+\tdouble k;\n+\tdouble l;\n+\tdouble m;\n+\tdouble n;\n+\tint o;\n+} struct_116byte;\n+\n+struct_116byte cls_struct_116byte_fn(\n+\tstruct_116byte b0,\n+\tstruct_116byte b1,\n+\tstruct_116byte b2,\n+\tstruct_116byte b3)\n+{\n+\tstruct_116byte\tresult;\n+\n+\tresult.a = b0.a + b1.a + b2.a + b3.a;\n+\tresult.b = b0.b + b1.b + b2.b + b3.b;\n+\tresult.c = b0.c + b1.c + b2.c + b3.c;\n+\tresult.d = b0.d + b1.d + b2.d + b3.d;\n+\tresult.e = b0.e + b1.e + b2.e + b3.e;\n+\tresult.f = b0.f + b1.f + b2.f + b3.f;\n+\tresult.g = b0.g + b1.g + b2.g + b3.g;\n+\tresult.h = b0.h + b1.h + b2.h + b3.h;\n+\tresult.i = b0.i + b1.i + b2.i + b3.i;\n+\tresult.j = b0.j + b1.j + b2.j + b3.j;\n+\tresult.k = b0.k + b1.k + b2.k + b3.k;\n+\tresult.l = b0.l + b1.l + b2.l + b3.l;\n+\tresult.m = b0.m + b1.m + b2.m + b3.m;\n+\tresult.n = b0.n + b1.n + b2.n + b3.n;\n+\tresult.o = b0.o + b1.o + b2.o + b3.o;\n+\n+\tprintf(\"%g %g %g %g %g %g %g %g %g %g %g %g %g %g %d\\n\", result.a, result.b, result.c,\n+\t\tresult.d, result.e, result.f, result.g, result.h, result.i,\n+\t\tresult.j, result.k, result.l, result.m, result.n, result.o);\n+\n+\treturn result;\n+}\n+\n+static void\n+cls_struct_116byte_gn(ffi_cif* cif __UNUSED__, void* resp, void** args, void* userdata __UNUSED__)\n+{\n+\tstruct_116byte\tb0, b1, b2, b3;\n+\n+\tb0 = *(struct_116byte*)(args[0]);\n+\tb1 = *(struct_116byte*)(args[1]);\n+\tb2 = *(struct_116byte*)(args[2]);\n+\tb3 = *(struct_116byte*)(args[3]);\n+\n+\t*(struct_116byte*)resp = cls_struct_116byte_fn(b0, b1, b2, b3);\n+}\n+\n+int main (void)\n+{\n+\tffi_cif cif;\n+#ifndef USING_MMAP\n+\tstatic ffi_closure cl;\n+#endif\n+\tffi_closure *pcl;\n+\tvoid* args_dbl[5];\n+\tffi_type* cls_struct_fields[16];\n+\tffi_type cls_struct_type;\n+\tffi_type* dbl_arg_types[5];\n+\n+#ifdef USING_MMAP\n+\tpcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+\tpcl = &cl;\n+#endif\n+\n+\tcls_struct_type.size = 0;\n+\tcls_struct_type.alignment = 0;\n+\tcls_struct_type.type = FFI_TYPE_STRUCT;\n+\tcls_struct_type.elements = cls_struct_fields;\n+\n+\tstruct_116byte e_dbl = { 9.0, 2.0, 6.0, 5.0, 3.0, 4.0, 8.0, 1.0, 1.0, 2.0, 3.0, 7.0, 2.0, 5.0, 7 };\n+\tstruct_116byte f_dbl = { 1.0, 2.0, 3.0, 7.0, 2.0, 5.0, 6.0, 7.0, 4.0, 5.0, 7.0, 9.0, 1.0, 6.0, 4 };\n+\tstruct_116byte g_dbl = { 4.0, 5.0, 7.0, 9.0, 1.0, 1.0, 2.0, 9.0, 8.0, 6.0, 1.0, 4.0, 0.0, 7.0, 3 };\n+\tstruct_116byte h_dbl = { 8.0, 6.0, 1.0, 4.0, 0.0, 3.0, 3.0, 1.0, 9.0, 2.0, 6.0, 5.0, 3.0, 8.0, 2 };\n+\tstruct_116byte res_dbl;\n+\n+\tcls_struct_fields[0] = &ffi_type_double;\n+\tcls_struct_fields[1] = &ffi_type_double;\n+\tcls_struct_fields[2] = &ffi_type_double;\n+\tcls_struct_fields[3] = &ffi_type_double;\n+\tcls_struct_fields[4] = &ffi_type_double;\n+\tcls_struct_fields[5] = &ffi_type_double;\n+\tcls_struct_fields[6] = &ffi_type_double;\n+\tcls_struct_fields[7] = &ffi_type_double;\n+\tcls_struct_fields[8] = &ffi_type_double;\n+\tcls_struct_fields[9] = &ffi_type_double;\n+\tcls_struct_fields[10] = &ffi_type_double;\n+\tcls_struct_fields[11] = &ffi_type_double;\n+\tcls_struct_fields[12] = &ffi_type_double;\n+\tcls_struct_fields[13] = &ffi_type_double;\n+\tcls_struct_fields[14] = &ffi_type_sint32;\n+\tcls_struct_fields[15] = NULL;\n+\n+\tdbl_arg_types[0] = &cls_struct_type;\n+\tdbl_arg_types[1] = &cls_struct_type;\n+\tdbl_arg_types[2] = &cls_struct_type;\n+\tdbl_arg_types[3] = &cls_struct_type;\n+\tdbl_arg_types[4] = NULL;\n+\n+\tCHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 4, &cls_struct_type,\n+\t\tdbl_arg_types) == FFI_OK);\n+\n+\targs_dbl[0] = &e_dbl;\n+\targs_dbl[1] = &f_dbl;\n+\targs_dbl[2] = &g_dbl;\n+\targs_dbl[3] = &h_dbl;\n+\targs_dbl[4] = NULL;\n+\n+\tffi_call(&cif, FFI_FN(cls_struct_116byte_fn), &res_dbl, args_dbl);\n+\t/* { dg-output \"22 15 17 25 6 13 19 18 22 15 17 25 6 26 16\" } */\n+\tprintf(\"res: %g %g %g %g %g %g %g %g %g %g %g %g %g %g %d\\n\", res_dbl.a, res_dbl.b,\n+\t\tres_dbl.c, res_dbl.d, res_dbl.e, res_dbl.f, res_dbl.g, res_dbl.h, res_dbl.i,\n+\t\tres_dbl.j, res_dbl.k, res_dbl.l, res_dbl.m, res_dbl.n, res_dbl.o);\n+\t/* { dg-output \"\\nres: 22 15 17 25 6 13 19 18 22 15 17 25 6 26 16\" } */\n+\n+\tCHECK(ffi_prep_closure(pcl, &cif, cls_struct_116byte_gn, NULL) == FFI_OK);\n+\n+\tres_dbl = ((struct_116byte(*)(struct_116byte, struct_116byte,\n+\t\tstruct_116byte, struct_116byte))(pcl))(e_dbl, f_dbl, g_dbl, h_dbl);\n+\t/* { dg-output \"\\n22 15 17 25 6 13 19 18 22 15 17 25 6 26 16\" } */\n+\tprintf(\"res: %g %g %g %g %g %g %g %g %g %g %g %g %g %g %d\\n\", res_dbl.a, res_dbl.b,\n+\t\tres_dbl.c, res_dbl.d, res_dbl.e, res_dbl.f, res_dbl.g, res_dbl.h, res_dbl.i,\n+\t\tres_dbl.j, res_dbl.k, res_dbl.l, res_dbl.m, res_dbl.n, res_dbl.o);\n+\t/* { dg-output \"\\nres: 22 15 17 25 6 13 19 18 22 15 17 25 6 26 16\" } */\n+\n+\texit(0);\n+}"}, {"sha": "74863d8bc296b4b079a8462e42f45fe3d9ecf264", "filename": "libffi/testsuite/libffi.call/stret_medium.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fstret_medium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fstret_medium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fstret_medium.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -0,0 +1,132 @@\n+/* Area:\t\tffi_call, closure_call\n+   Purpose:\t\tCheck structure returning with different structure size.\n+\t\t\t\tDepending on the ABI. Check bigger struct which overlaps\n+\t\t\t\tthe gp and fp register count on Darwin/AIX/ppc64.\n+   Limitations:\tnone.\n+   PR:\t\t\tnone.\n+   Originator:\tBlake Chaffin\t6/21/2007\t*/\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-*  } } */\n+#include \"ffitest.h\"\n+\n+typedef struct struct_72byte {\n+\tdouble a;\n+\tdouble b;\n+\tdouble c;\n+\tdouble d;\n+\tdouble e;\n+\tdouble f;\n+\tdouble g;\n+\tdouble h;\n+\tdouble i;\n+} struct_72byte;\n+\n+struct_72byte cls_struct_72byte_fn(\n+\tstruct_72byte b0,\n+\tstruct_72byte b1,\n+\tstruct_72byte b2,\n+\tstruct_72byte b3)\n+{\n+\tstruct_72byte\tresult;\n+\n+\tresult.a = b0.a + b1.a + b2.a + b3.a;\n+\tresult.b = b0.b + b1.b + b2.b + b3.b;\n+\tresult.c = b0.c + b1.c + b2.c + b3.c;\n+\tresult.d = b0.d + b1.d + b2.d + b3.d;\n+\tresult.e = b0.e + b1.e + b2.e + b3.e;\n+\tresult.f = b0.f + b1.f + b2.f + b3.f;\n+\tresult.g = b0.g + b1.g + b2.g + b3.g;\n+\tresult.h = b0.h + b1.h + b2.h + b3.h;\n+\tresult.i = b0.i + b1.i + b2.i + b3.i;\n+\n+\tprintf(\"%g %g %g %g %g %g %g %g %g\\n\", result.a, result.b, result.c,\n+\t\tresult.d, result.e, result.f, result.g, result.h, result.i);\n+\n+\treturn result;\n+}\n+\n+static void\n+cls_struct_72byte_gn(ffi_cif* cif __UNUSED__, void* resp, void** args, void* userdata __UNUSED__)\n+{\n+\tstruct_72byte\tb0, b1, b2, b3;\n+\n+\tb0 = *(struct_72byte*)(args[0]);\n+\tb1 = *(struct_72byte*)(args[1]);\n+\tb2 = *(struct_72byte*)(args[2]);\n+\tb3 = *(struct_72byte*)(args[3]);\n+\n+\t*(struct_72byte*)resp = cls_struct_72byte_fn(b0, b1, b2, b3);\n+}\n+\n+int main (void)\n+{\n+\tffi_cif cif;\n+#ifndef USING_MMAP\n+\tstatic ffi_closure cl;\n+#endif\n+\tffi_closure *pcl;\n+\tvoid* args_dbl[5];\n+\tffi_type* cls_struct_fields[10];\n+\tffi_type cls_struct_type;\n+\tffi_type* dbl_arg_types[5];\n+\n+#ifdef USING_MMAP\n+\tpcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+\tpcl = &cl;\n+#endif\n+\n+\tcls_struct_type.size = 0;\n+\tcls_struct_type.alignment = 0;\n+\tcls_struct_type.type = FFI_TYPE_STRUCT;\n+\tcls_struct_type.elements = cls_struct_fields;\n+\n+\tstruct_72byte e_dbl = { 9.0, 2.0, 6.0, 5.0, 3.0, 4.0, 8.0, 1.0, 7.0 };\n+\tstruct_72byte f_dbl = { 1.0, 2.0, 3.0, 7.0, 2.0, 5.0, 6.0, 7.0, 4.0 };\n+\tstruct_72byte g_dbl = { 4.0, 5.0, 7.0, 9.0, 1.0, 1.0, 2.0, 9.0, 3.0 };\n+\tstruct_72byte h_dbl = { 8.0, 6.0, 1.0, 4.0, 0.0, 3.0, 3.0, 1.0, 2.0 };\n+\tstruct_72byte res_dbl;\n+\n+\tcls_struct_fields[0] = &ffi_type_double;\n+\tcls_struct_fields[1] = &ffi_type_double;\n+\tcls_struct_fields[2] = &ffi_type_double;\n+\tcls_struct_fields[3] = &ffi_type_double;\n+\tcls_struct_fields[4] = &ffi_type_double;\n+\tcls_struct_fields[5] = &ffi_type_double;\n+\tcls_struct_fields[6] = &ffi_type_double;\n+\tcls_struct_fields[7] = &ffi_type_double;\n+\tcls_struct_fields[8] = &ffi_type_double;\n+\tcls_struct_fields[9] = NULL;\n+\n+\tdbl_arg_types[0] = &cls_struct_type;\n+\tdbl_arg_types[1] = &cls_struct_type;\n+\tdbl_arg_types[2] = &cls_struct_type;\n+\tdbl_arg_types[3] = &cls_struct_type;\n+\tdbl_arg_types[4] = NULL;\n+\n+\tCHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 4, &cls_struct_type,\n+\t\tdbl_arg_types) == FFI_OK);\n+\n+\targs_dbl[0] = &e_dbl;\n+\targs_dbl[1] = &f_dbl;\n+\targs_dbl[2] = &g_dbl;\n+\targs_dbl[3] = &h_dbl;\n+\targs_dbl[4] = NULL;\n+\n+\tffi_call(&cif, FFI_FN(cls_struct_72byte_fn), &res_dbl, args_dbl);\n+\t/* { dg-output \"22 15 17 25 6 13 19 18 16\" } */\n+\tprintf(\"res: %g %g %g %g %g %g %g %g %g\\n\", res_dbl.a, res_dbl.b, res_dbl.c,\n+\t\tres_dbl.d, res_dbl.e, res_dbl.f, res_dbl.g, res_dbl.h, res_dbl.i);\n+\t/* { dg-output \"\\nres: 22 15 17 25 6 13 19 18 16\" } */\n+\n+\tCHECK(ffi_prep_closure(pcl, &cif, cls_struct_72byte_gn, NULL) == FFI_OK);\n+\n+\tres_dbl = ((struct_72byte(*)(struct_72byte, struct_72byte,\n+\t\tstruct_72byte, struct_72byte))(pcl))(e_dbl, f_dbl, g_dbl, h_dbl);\n+\t/* { dg-output \"\\n22 15 17 25 6 13 19 18 16\" } */\n+\tprintf(\"res: %g %g %g %g %g %g %g %g %g\\n\", res_dbl.a, res_dbl.b, res_dbl.c,\n+\t\tres_dbl.d, res_dbl.e, res_dbl.f, res_dbl.g, res_dbl.h, res_dbl.i);\n+\t/* { dg-output \"\\nres: 22 15 17 25 6 13 19 18 16\" } */\n+\n+\texit(0);\n+}"}, {"sha": "6319982c3c89d46898f25097264ca2bc7b3cabdb", "filename": "libffi/testsuite/libffi.call/stret_medium2.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fstret_medium2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5b1a73fada33bb98debab90ab852f8378b4830/libffi%2Ftestsuite%2Flibffi.call%2Fstret_medium2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fstret_medium2.c?ref=3b5b1a73fada33bb98debab90ab852f8378b4830", "patch": "@@ -0,0 +1,132 @@\n+/* Area:\t\tffi_call, closure_call\n+   Purpose:\t\tCheck structure returning with different structure size.\n+\t\t\t\tDepending on the ABI. Check bigger struct which overlaps\n+\t\t\t\tthe gp and fp register count on Darwin/AIX/ppc64.\n+   Limitations:\tnone.\n+   PR:\t\t\tnone.\n+   Originator:\tBlake Chaffin\t6/21/2007\t*/\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-*  } } */\n+#include \"ffitest.h\"\n+\n+typedef struct struct_72byte {\n+\tdouble a;\n+\tdouble b;\n+\tdouble c;\n+\tdouble d;\n+\tdouble e;\n+\tdouble f;\n+\tdouble g;\n+\tdouble h;\n+\tlong long i;\n+} struct_72byte;\n+\n+struct_72byte cls_struct_72byte_fn(\n+\tstruct_72byte b0,\n+\tstruct_72byte b1,\n+\tstruct_72byte b2,\n+\tstruct_72byte b3)\n+{\n+\tstruct_72byte\tresult;\n+\n+\tresult.a = b0.a + b1.a + b2.a + b3.a;\n+\tresult.b = b0.b + b1.b + b2.b + b3.b;\n+\tresult.c = b0.c + b1.c + b2.c + b3.c;\n+\tresult.d = b0.d + b1.d + b2.d + b3.d;\n+\tresult.e = b0.e + b1.e + b2.e + b3.e;\n+\tresult.f = b0.f + b1.f + b2.f + b3.f;\n+\tresult.g = b0.g + b1.g + b2.g + b3.g;\n+\tresult.h = b0.h + b1.h + b2.h + b3.h;\n+\tresult.i = b0.i + b1.i + b2.i + b3.i;\n+\n+\tprintf(\"%g %g %g %g %g %g %g %g %lld\\n\", result.a, result.b, result.c,\n+\t\tresult.d, result.e, result.f, result.g, result.h, result.i);\n+\n+\treturn result;\n+}\n+\n+static void\n+cls_struct_72byte_gn(ffi_cif* cif __UNUSED__, void* resp, void** args, void* userdata __UNUSED__)\n+{\n+\tstruct_72byte\tb0, b1, b2, b3;\n+\n+\tb0 = *(struct_72byte*)(args[0]);\n+\tb1 = *(struct_72byte*)(args[1]);\n+\tb2 = *(struct_72byte*)(args[2]);\n+\tb3 = *(struct_72byte*)(args[3]);\n+\n+\t*(struct_72byte*)resp = cls_struct_72byte_fn(b0, b1, b2, b3);\n+}\n+\n+int main (void)\n+{\n+\tffi_cif cif;\n+#ifndef USING_MMAP\n+\tstatic ffi_closure cl;\n+#endif\n+\tffi_closure *pcl;\n+\tvoid* args_dbl[5];\n+\tffi_type* cls_struct_fields[10];\n+\tffi_type cls_struct_type;\n+\tffi_type* dbl_arg_types[5];\n+\n+#ifdef USING_MMAP\n+\tpcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+\tpcl = &cl;\n+#endif\n+\n+\tcls_struct_type.size = 0;\n+\tcls_struct_type.alignment = 0;\n+\tcls_struct_type.type = FFI_TYPE_STRUCT;\n+\tcls_struct_type.elements = cls_struct_fields;\n+\n+\tstruct_72byte e_dbl = { 9.0, 2.0, 6.0, 5.0, 3.0, 4.0, 8.0, 1.0, 7 };\n+\tstruct_72byte f_dbl = { 1.0, 2.0, 3.0, 7.0, 2.0, 5.0, 6.0, 7.0, 4 };\n+\tstruct_72byte g_dbl = { 4.0, 5.0, 7.0, 9.0, 1.0, 1.0, 2.0, 9.0, 3 };\n+\tstruct_72byte h_dbl = { 8.0, 6.0, 1.0, 4.0, 0.0, 3.0, 3.0, 1.0, 2 };\n+\tstruct_72byte res_dbl;\n+\n+\tcls_struct_fields[0] = &ffi_type_double;\n+\tcls_struct_fields[1] = &ffi_type_double;\n+\tcls_struct_fields[2] = &ffi_type_double;\n+\tcls_struct_fields[3] = &ffi_type_double;\n+\tcls_struct_fields[4] = &ffi_type_double;\n+\tcls_struct_fields[5] = &ffi_type_double;\n+\tcls_struct_fields[6] = &ffi_type_double;\n+\tcls_struct_fields[7] = &ffi_type_double;\n+\tcls_struct_fields[8] = &ffi_type_sint64;\n+\tcls_struct_fields[9] = NULL;\n+\n+\tdbl_arg_types[0] = &cls_struct_type;\n+\tdbl_arg_types[1] = &cls_struct_type;\n+\tdbl_arg_types[2] = &cls_struct_type;\n+\tdbl_arg_types[3] = &cls_struct_type;\n+\tdbl_arg_types[4] = NULL;\n+\n+\tCHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 4, &cls_struct_type,\n+\t\tdbl_arg_types) == FFI_OK);\n+\n+\targs_dbl[0] = &e_dbl;\n+\targs_dbl[1] = &f_dbl;\n+\targs_dbl[2] = &g_dbl;\n+\targs_dbl[3] = &h_dbl;\n+\targs_dbl[4] = NULL;\n+\n+\tffi_call(&cif, FFI_FN(cls_struct_72byte_fn), &res_dbl, args_dbl);\n+\t/* { dg-output \"22 15 17 25 6 13 19 18 16\" } */\n+\tprintf(\"res: %g %g %g %g %g %g %g %g %lld\\n\", res_dbl.a, res_dbl.b, res_dbl.c,\n+\t\tres_dbl.d, res_dbl.e, res_dbl.f, res_dbl.g, res_dbl.h, res_dbl.i);\n+\t/* { dg-output \"\\nres: 22 15 17 25 6 13 19 18 16\" } */\n+\n+\tCHECK(ffi_prep_closure(pcl, &cif, cls_struct_72byte_gn, NULL) == FFI_OK);\n+\n+\tres_dbl = ((struct_72byte(*)(struct_72byte, struct_72byte,\n+\t\tstruct_72byte, struct_72byte))(pcl))(e_dbl, f_dbl, g_dbl, h_dbl);\n+\t/* { dg-output \"\\n22 15 17 25 6 13 19 18 16\" } */\n+\tprintf(\"res: %g %g %g %g %g %g %g %g %lld\\n\", res_dbl.a, res_dbl.b, res_dbl.c,\n+\t\tres_dbl.d, res_dbl.e, res_dbl.f, res_dbl.g, res_dbl.h, res_dbl.i);\n+\t/* { dg-output \"\\nres: 22 15 17 25 6 13 19 18 16\" } */\n+\n+\texit(0);\n+}"}]}