{"sha": "9617fd0862322bc263bc8a73300cdee967d3def8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYxN2ZkMDg2MjMyMmJjMjYzYmM4YTczMzAwY2RlZTk2N2QzZGVmOA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-01-18T17:26:58Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-01-18T17:26:58Z"}, "message": "PR testsuite/69181: ensure expected multiline outputs is cleared per-test\n\ngcc/testsuite/ChangeLog:\n\tPR testsuite/69181\n\t* gcc.dg/pr69181-1.c: New test file.\n\t* gcc.dg/pr69181-2.c: New test file.\n\t* lib/gcc-dg.exp (dg-test): Consolidate post-test cleanup of\n\tglobals by moving it to...\n\t(cleanup-after-saved-dg-test): ...this new function.  Add\n\t\"global additional_sources_used\".  Add reset of global\n\tmultiline_expected_outputs to the empty list.\n\t* lib/multiline.exp (_multiline_expected_outputs): Rename this\n\tglobal to...\n\t(multiline_expected_outputs): ...this, and updated comments to\n\tnote that it is modified from gcc-dg.exp.\n\t(dg-end-multiline-output): Update for the above renaming.\n\t(handle-multiline-outputs): Likewise.  Remove the clearing\n\tof the expected outputs to the empty list.\n\nFrom-SVN: r232535", "tree": {"sha": "cae7f9da7462a1acea98fb89db350adff79b3b55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cae7f9da7462a1acea98fb89db350adff79b3b55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9617fd0862322bc263bc8a73300cdee967d3def8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9617fd0862322bc263bc8a73300cdee967d3def8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9617fd0862322bc263bc8a73300cdee967d3def8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9617fd0862322bc263bc8a73300cdee967d3def8/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c91bcffc4a62adc87942c09c2da2f3aa7135fba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c91bcffc4a62adc87942c09c2da2f3aa7135fba4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c91bcffc4a62adc87942c09c2da2f3aa7135fba4"}], "stats": {"total": 87, "additions": 56, "deletions": 31}, "files": [{"sha": "da5bfa931f1405a60a5c7ebd795e36e254d73b0d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9617fd0862322bc263bc8a73300cdee967d3def8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9617fd0862322bc263bc8a73300cdee967d3def8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9617fd0862322bc263bc8a73300cdee967d3def8", "patch": "@@ -1,3 +1,21 @@\n+2016-01-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR testsuite/69181\n+\t* gcc.dg/pr69181-1.c: New test file.\n+\t* gcc.dg/pr69181-2.c: New test file.\n+\t* lib/gcc-dg.exp (dg-test): Consolidate post-test cleanup of\n+\tglobals by moving it to...\n+\t(cleanup-after-saved-dg-test): ...this new function.  Add\n+\t\"global additional_sources_used\".  Add reset of global\n+\tmultiline_expected_outputs to the empty list.\n+\t* lib/multiline.exp (_multiline_expected_outputs): Rename this\n+\tglobal to...\n+\t(multiline_expected_outputs): ...this, and updated comments to\n+\tnote that it is modified from gcc-dg.exp.\n+\t(dg-end-multiline-output): Update for the above renaming.\n+\t(handle-multiline-outputs): Likewise.  Remove the clearing\n+\tof the expected outputs to the empty list.\n+\n 2016-01-18  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/69297"}, {"sha": "e851f0c8a476a6884c9a873f48627494ded7b514", "filename": "gcc/testsuite/gcc.dg/pr69181-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9617fd0862322bc263bc8a73300cdee967d3def8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69181-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9617fd0862322bc263bc8a73300cdee967d3def8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69181-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69181-1.c?ref=9617fd0862322bc263bc8a73300cdee967d3def8", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target this_will_not_be_matched-*-* } } */\n+\n+/* { dg-begin-multiline-output \"\" }\n+   This message should never be checked for.\n+   In particular, it shouldn't be checked for in the *next*\n+   test case.\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "dca90dcbf121faeb5db8a31134f335e349041fb9", "filename": "gcc/testsuite/gcc.dg/pr69181-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9617fd0862322bc263bc8a73300cdee967d3def8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69181-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9617fd0862322bc263bc8a73300cdee967d3def8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69181-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69181-2.c?ref=9617fd0862322bc263bc8a73300cdee967d3def8", "patch": "@@ -0,0 +1,4 @@\n+/* Dummy test case, to verify that the dg-begin-multiline-output directive\n+   from pr69181-1.c isn't erroneously expected to be handled in *this*\n+   test case.  */\n+int make_non_empty;"}, {"sha": "c00332833136d42823b40c4d3be807922b1f6f4a", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9617fd0862322bc263bc8a73300cdee967d3def8/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9617fd0862322bc263bc8a73300cdee967d3def8/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=9617fd0862322bc263bc8a73300cdee967d3def8", "patch": "@@ -826,33 +826,21 @@ proc output-exists-not { args } {\n if { [info procs saved-dg-test] == [list] } {\n     rename dg-test saved-dg-test\n \n-    proc dg-test { args } {\n+    # Helper function for cleanups that should happen after the call\n+    # to the real dg-test, whether or not it returns normally, or\n+    # fails with an error.\n+    proc cleanup-after-saved-dg-test { } {\n \tglobal additional_files\n \tglobal additional_sources\n+\tglobal additional_sources_used\n \tglobal additional_prunes\n-\tglobal errorInfo\n \tglobal compiler_conditional_xfail_data\n \tglobal shouldfail\n \tglobal testname_with_flags\n \tglobal set_target_env_var\n \tglobal keep_saved_temps_suffixes\n+\tglobal multiline_expected_outputs\n \n-\tif { [ catch { eval saved-dg-test $args } errmsg ] } {\n-\t    set saved_info $errorInfo\n-\t    set additional_files \"\"\n-\t    set additional_sources \"\"\n-\t    set additional_sources_used \"\"\n-\t    set additional_prunes \"\"\n-\t    set shouldfail 0\n-\t    if [info exists compiler_conditional_xfail_data] {\n-\t\tunset compiler_conditional_xfail_data\n-\t    }\n-\t    if [info exists testname_with_flags] {\n-\t\tunset testname_with_flags\n-\t    }\n-\t    unset_timeout_vars\n-\t    error $errmsg $saved_info\n-\t}\n \tset additional_files \"\"\n \tset additional_sources \"\"\n \tset additional_sources_used \"\"\n@@ -871,6 +859,18 @@ if { [info procs saved-dg-test] == [list] } {\n \tif [info exists testname_with_flags] {\n \t    unset testname_with_flags\n \t}\n+\tset multiline_expected_outputs []\n+    }\n+\n+    proc dg-test { args } {\n+\tglobal errorInfo\n+\n+\tif { [ catch { eval saved-dg-test $args } errmsg ] } {\n+\t    set saved_info $errorInfo\n+\t    cleanup-after-saved-dg-test\n+\t    error $errmsg $saved_info\n+\t}\n+\tcleanup-after-saved-dg-test\n     }\n }\n "}, {"sha": "fd7affcfafdf5b1d0dc1c0fb6965d841d71652cb", "filename": "gcc/testsuite/lib/multiline.exp", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9617fd0862322bc263bc8a73300cdee967d3def8/gcc%2Ftestsuite%2Flib%2Fmultiline.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9617fd0862322bc263bc8a73300cdee967d3def8/gcc%2Ftestsuite%2Flib%2Fmultiline.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fmultiline.exp?ref=9617fd0862322bc263bc8a73300cdee967d3def8", "patch": "@@ -47,17 +47,18 @@\n # to have the testsuite verify the expected output.\n \n ############################################################################\n-# Global variables.  Although global, these are intended to only be used from\n-# within multiline.exp.\n+# Global variables.\n ############################################################################\n \n+# This is intended to only be used from within multiline.exp.\n # The line number of the last dg-begin-multiline-output directive.\n set _multiline_last_beginning_line -1\n \n # A list of\n #   first-line-number, last-line-number, lines\n # where each \"lines\" is a list of strings.\n-set _multiline_expected_outputs []\n+# This is cleared at the end of each test by gcc-dg.exp's wrapper for dg-test.\n+set multiline_expected_outputs []\n \n ############################################################################\n # Exported functions.\n@@ -94,9 +95,9 @@ proc dg-end-multiline-output { args } {\n     verbose \"lines: $lines\" 3\n     # Create an entry of the form:  first-line, last-line, lines\n     set entry [list $_multiline_last_beginning_line $line $lines]\n-    global _multiline_expected_outputs\n-    lappend _multiline_expected_outputs $entry\n-    verbose \"within dg-end-multiline-output: _multiline_expected_outputs: $_multiline_expected_outputs\" 3\n+    global multiline_expected_outputs\n+    lappend multiline_expected_outputs $entry\n+    verbose \"within dg-end-multiline-output: multiline_expected_outputs: $multiline_expected_outputs\" 3\n \n     set _multiline_last_beginning_line -1\n }\n@@ -107,14 +108,12 @@ proc dg-end-multiline-output { args } {\n # those that weren't found.\n #\n # It returns a pruned version of its output.\n-#\n-# It also clears the list of expected multiline outputs.\n \n proc handle-multiline-outputs { text } {\n-    global _multiline_expected_outputs\n+    global multiline_expected_outputs\n     global testname_with_flags\n     set index 0\n-    foreach entry $_multiline_expected_outputs {\n+    foreach entry $multiline_expected_outputs {\n \tverbose \"  entry: $entry\" 3\n \tset start_line [lindex $entry 0]\n \tset end_line   [lindex $entry 1]\n@@ -140,9 +139,6 @@ proc handle-multiline-outputs { text } {\n \tset index [expr $index + 1]\n     }\n \n-    # Clear the list of expected multiline outputs\n-    set _multiline_expected_outputs []\n-\n     return $text\n }\n "}]}