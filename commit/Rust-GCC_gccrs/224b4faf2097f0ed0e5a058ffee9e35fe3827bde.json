{"sha": "224b4faf2097f0ed0e5a058ffee9e35fe3827bde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI0YjRmYWYyMDk3ZjBlZDBlNWEwNThmZmVlOWUzNWZlMzgyN2JkZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2005-11-30T08:53:22Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2005-11-30T08:53:22Z"}, "message": "tree-ssa-uncprop.c (associate_equivalences_with_edges): Properly handle SSA_NAME_OCCURS_IN_ABNORMAL_PHI.\n\n        * tree-ssa-uncprop.c (associate_equivalences_with_edges): Properly\n        handle SSA_NAME_OCCURS_IN_ABNORMAL_PHI.\n\n        * g++.old-deja/g++.law/pr25000.C: New test.\n\nFrom-SVN: r107710", "tree": {"sha": "c6ed79a7b936bd0665b1b0861c8b1441c7c1598a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6ed79a7b936bd0665b1b0861c8b1441c7c1598a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/224b4faf2097f0ed0e5a058ffee9e35fe3827bde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/224b4faf2097f0ed0e5a058ffee9e35fe3827bde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/224b4faf2097f0ed0e5a058ffee9e35fe3827bde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/224b4faf2097f0ed0e5a058ffee9e35fe3827bde/comments", "author": null, "committer": null, "parents": [{"sha": "a488b14d1bf6f3238680f9c97cc0ce40cef3f797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a488b14d1bf6f3238680f9c97cc0ce40cef3f797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a488b14d1bf6f3238680f9c97cc0ce40cef3f797"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "8cf398be9a706b4f81a4c84807e70b398ce69225", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224b4faf2097f0ed0e5a058ffee9e35fe3827bde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224b4faf2097f0ed0e5a058ffee9e35fe3827bde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=224b4faf2097f0ed0e5a058ffee9e35fe3827bde", "patch": "@@ -1,3 +1,8 @@\n+2005-11-30  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-uncprop.c (associate_equivalences_with_edges): Properly\n+\thandle SSA_NAME_OCCURS_IN_ABNORMAL_PHI.\n+\n 2005-11-30  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/ia64/ia64.c (ia64_expand_tls_address): Add ORIG_OP1 argument."}, {"sha": "bca19a5ff5e8ff960370de9b82f0d3abea22583b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224b4faf2097f0ed0e5a058ffee9e35fe3827bde/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224b4faf2097f0ed0e5a058ffee9e35fe3827bde/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=224b4faf2097f0ed0e5a058ffee9e35fe3827bde", "patch": "@@ -1,3 +1,7 @@\n+2005-11-30  Jeff Law  <law@redhat.com>\n+\n+\t* g++.old-deja/g++.law/pr25000.C: New test.\n+\n 2005-11-30  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/tls/opt-11.c: New test."}, {"sha": "45d468020ef954966bfe625dc71f577b71a72b0b", "filename": "gcc/testsuite/g++.old-deja/g++.law/pr25000.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224b4faf2097f0ed0e5a058ffee9e35fe3827bde/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fpr25000.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224b4faf2097f0ed0e5a058ffee9e35fe3827bde/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fpr25000.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fpr25000.C?ref=224b4faf2097f0ed0e5a058ffee9e35fe3827bde", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile  }\n+// { dg-options \"-O2\" }\n+int * f(void);\n+void g(int*);\n+bool h(void);\n+void Find( )\n+{\n+    int * pRes = f();\n+    if( !pRes )  {\n+        if( h()){\n+          if( h()){\n+            try     \n+             {       \n+                pRes = new int();\n+                f();    \n+             }catch(int& e1 ){}    \n+          }     \n+          if( !pRes )\n+            f();    \n+        }\n+        g(pRes);\n+    }\n+}\n+"}, {"sha": "28d385098fb571ce6eda771d6a1bc64894406713", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224b4faf2097f0ed0e5a058ffee9e35fe3827bde/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224b4faf2097f0ed0e5a058ffee9e35fe3827bde/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=224b4faf2097f0ed0e5a058ffee9e35fe3827bde", "patch": "@@ -92,7 +92,8 @@ associate_equivalences_with_edges (void)\n \n \t  /* If the conditional is a single variable 'X', record 'X = 1'\n \t     for the true edge and 'X = 0' on the false edge.  */\n-\t  if (TREE_CODE (cond) == SSA_NAME)\n+\t  if (TREE_CODE (cond) == SSA_NAME\n+\t      && !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (cond))\n \t    {\n \t      equivalency = xmalloc (sizeof (struct edge_equivalency));\n \t      equivalency->rhs = constant_boolean_node (1, TREE_TYPE (cond));\n@@ -114,6 +115,7 @@ associate_equivalences_with_edges (void)\n \t\t know the value of OP0 on both arms of the branch.  i.e., we\n \t\t can record an equivalence for OP0 rather than COND.  */\n \t      if (TREE_CODE (op0) == SSA_NAME\n+\t\t  && !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (op0)\n \t\t  && TREE_CODE (TREE_TYPE (op0)) == BOOLEAN_TYPE\n \t\t  && is_gimple_min_invariant (op1))\n \t\t{\n@@ -152,8 +154,10 @@ associate_equivalences_with_edges (void)\n \t\t}\n \n \t      if (TREE_CODE (op0) == SSA_NAME\n+\t\t  && !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (op0)\n \t\t  && (is_gimple_min_invariant (op1)\n-\t\t      || TREE_CODE (op1) == SSA_NAME))\n+\t\t      || (TREE_CODE (op1) == SSA_NAME\n+\t\t\t  && !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (op1))))\n \t\t{\n \t\t  /* For IEEE, -0.0 == 0.0, so we don't necessarily know\n \t\t     the sign of a variable compared against zero.  If\n@@ -185,7 +189,8 @@ associate_equivalences_with_edges (void)\n \t{\n \t  tree cond = SWITCH_COND (stmt);\n \n-\t  if (TREE_CODE (cond) == SSA_NAME)\n+\t  if (TREE_CODE (cond) == SSA_NAME\n+\t      && !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (cond))\n \t    {\n \t      tree labels = SWITCH_LABELS (stmt);\n \t      int i, n_labels = TREE_VEC_LENGTH (labels);"}]}