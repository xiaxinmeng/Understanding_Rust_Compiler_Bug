{"sha": "080384d6057018108dd588b456ed53ec0b752769", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgwMzg0ZDYwNTcwMTgxMDhkZDU4OGI0NTZlZDUzZWMwYjc1Mjc2OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-02-27T20:17:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-02-27T20:17:17Z"}, "message": "PR c++/71568 - SFINAE forming pointer to member function\n\n\t* init.c (build_offset_ref): Check the return value of\n\tperform_or_defer_access_check.\n\nFrom-SVN: r245763", "tree": {"sha": "e51fcc04a68be52cef603f16c7c7a67a2695a9ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e51fcc04a68be52cef603f16c7c7a67a2695a9ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/080384d6057018108dd588b456ed53ec0b752769", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/080384d6057018108dd588b456ed53ec0b752769", "html_url": "https://github.com/Rust-GCC/gccrs/commit/080384d6057018108dd588b456ed53ec0b752769", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/080384d6057018108dd588b456ed53ec0b752769/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c8f28a3c7ae87e3114e5789fd3a20e46c3a879f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8f28a3c7ae87e3114e5789fd3a20e46c3a879f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8f28a3c7ae87e3114e5789fd3a20e46c3a879f6"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "5792e5d08d0068b06f25929d3e9c114174e48671", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080384d6057018108dd588b456ed53ec0b752769/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080384d6057018108dd588b456ed53ec0b752769/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=080384d6057018108dd588b456ed53ec0b752769", "patch": "@@ -1,3 +1,9 @@\n+2017-02-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/71568 - SFINAE forming pointer to member function\n+\t* init.c (build_offset_ref): Check the return value of\n+\tperform_or_defer_access_check.\n+\n 2017-02-27  Marek Polacek  <polacek@redhat.com>\n \n \t* decl.c (expand_static_init): Add missing } in a comment."}, {"sha": "99eeb8a893f0442592b12c831de4d6171e017b2d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080384d6057018108dd588b456ed53ec0b752769/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080384d6057018108dd588b456ed53ec0b752769/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=080384d6057018108dd588b456ed53ec0b752769", "patch": "@@ -2043,14 +2043,16 @@ build_offset_ref (tree type, tree member, bool address_p,\n \t       If the access is to form a pointer to member, the\n \t       nested-name-specifier shall name the derived class\n \t       (or any class derived from that class).  */\n+\t  bool ok;\n \t  if (address_p && DECL_P (t)\n \t      && DECL_NONSTATIC_MEMBER_P (t))\n-\t    perform_or_defer_access_check (TYPE_BINFO (type), t, t,\n-\t\t\t\t\t   complain);\n+\t    ok = perform_or_defer_access_check (TYPE_BINFO (type), t, t,\n+\t\t\t\t\t\tcomplain);\n \t  else\n-\t    perform_or_defer_access_check (basebinfo, t, t,\n-\t\t\t\t\t   complain);\n-\n+\t    ok = perform_or_defer_access_check (basebinfo, t, t,\n+\t\t\t\t\t\tcomplain);\n+\t  if (!ok)\n+\t    return error_mark_node;\n \t  if (DECL_STATIC_FUNCTION_P (t))\n \t    return t;\n \t  member = t;\n@@ -2059,11 +2061,14 @@ build_offset_ref (tree type, tree member, bool address_p,\n \tTREE_TYPE (member) = unknown_type_node;\n     }\n   else if (address_p && TREE_CODE (member) == FIELD_DECL)\n-    /* We need additional test besides the one in\n-       check_accessibility_of_qualified_id in case it is\n-       a pointer to non-static member.  */\n-    perform_or_defer_access_check (TYPE_BINFO (type), member, member,\n-\t\t\t\t   complain);\n+    {\n+      /* We need additional test besides the one in\n+\t check_accessibility_of_qualified_id in case it is\n+\t a pointer to non-static member.  */\n+      if (!perform_or_defer_access_check (TYPE_BINFO (type), member, member,\n+\t\t\t\t\t  complain))\n+\treturn error_mark_node;\n+    }\n \n   if (!address_p)\n     {"}, {"sha": "aaa38d3ed06c3a1dbbc437b2e1e68f7f11b0c545", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae58.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080384d6057018108dd588b456ed53ec0b752769/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae58.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080384d6057018108dd588b456ed53ec0b752769/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae58.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae58.C?ref=080384d6057018108dd588b456ed53ec0b752769", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/71568\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T> class F : T {};\n+template <typename> using void_t = void;\n+template <class, class = void> struct G;\n+template <typename T> struct G<T, void_t<decltype(&T::nlog_custom)>> {};\n+struct D {\n+  void nlog_custom();\n+};\n+G<F<D>> g;\t\t\t// { dg-error \"incomplete\" }\n+"}]}