{"sha": "0dde4175efc346c70069a8a090590d3e63be04fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRkZTQxNzVlZmMzNDZjNzAwNjlhOGEwOTA1OTBkM2U2M2JlMDRmYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-08-09T10:45:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-08-09T10:45:00Z"}, "message": "semantics.c (begin_function_try_block, [...]): New fns.\n\n\t* semantics.c (begin_function_try_block, finish_function_try_block,\n\tfinish_function_handler_sequence): New fns.\n\t* parse.y (function_try_block): Use them.\n\t* pt.c (instantiate_decl): Likewise.\n\n\t* cp-tree.h: Declare in_function_try_handler.\n\t* decl.c: Define it.\n\t(start_function): Clear it.\n\t(struct cp_function, push_cp_function_context): Save it.\n\t(pop_cp_function_context): Restore it.\n\t* parse.y (function_try_block): Set and clear it.\n\t* except.c (expand_end_catch_block): Rethrow if we reach the end\n\tof a function-try-block handler in a ctor or dtor.\n\t* typeck.c (c_expand_return): Complain about returning from a\n\tfunction-try-block handler of a ctor.\n\n\t* parse.y (function_try_block): Call end_protect_partials\n\tbefore expand_start_all_catch.\n\nFrom-SVN: r28624", "tree": {"sha": "a2b2205f5538c97f3d3612a644b1c184a46ccb8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2b2205f5538c97f3d3612a644b1c184a46ccb8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dde4175efc346c70069a8a090590d3e63be04fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dde4175efc346c70069a8a090590d3e63be04fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dde4175efc346c70069a8a090590d3e63be04fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dde4175efc346c70069a8a090590d3e63be04fa/comments", "author": null, "committer": null, "parents": [{"sha": "fb20fc45459ec031a10d83a5bc6327edbcad5176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb20fc45459ec031a10d83a5bc6327edbcad5176", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb20fc45459ec031a10d83a5bc6327edbcad5176"}], "stats": {"total": 369, "additions": 238, "deletions": 131}, "files": [{"sha": "17848cd4a7b1d6631f4003d88b38591685374d48", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dde4175efc346c70069a8a090590d3e63be04fa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dde4175efc346c70069a8a090590d3e63be04fa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0dde4175efc346c70069a8a090590d3e63be04fa", "patch": "@@ -1,3 +1,24 @@\n+1999-08-09  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* semantics.c (begin_function_try_block, finish_function_try_block,\n+\tfinish_function_handler_sequence): New fns.\n+\t* parse.y (function_try_block): Use them.\n+\t* pt.c (instantiate_decl): Likewise.\n+\n+\t* cp-tree.h: Declare in_function_try_handler.\n+\t* decl.c: Define it.\n+\t(start_function): Clear it.\n+\t(struct cp_function, push_cp_function_context): Save it.\n+\t(pop_cp_function_context): Restore it.\n+\t* parse.y (function_try_block): Set and clear it.\n+\t* except.c (expand_end_catch_block): Rethrow if we reach the end\n+\tof a function-try-block handler in a ctor or dtor.\n+\t* typeck.c (c_expand_return): Complain about returning from a\n+\tfunction-try-block handler of a ctor.\n+\n+\t* parse.y (function_try_block): Call end_protect_partials\n+\tbefore expand_start_all_catch.\n+\n 1999-08-08  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (struct binding_level): Add eh_region field."}, {"sha": "d43009a6110935f0f9bbc922b6c89f5a607b1a44", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dde4175efc346c70069a8a090590d3e63be04fa/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dde4175efc346c70069a8a090590d3e63be04fa/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0dde4175efc346c70069a8a090590d3e63be04fa", "patch": "@@ -2290,6 +2290,8 @@ extern tree tag_identifier;\n extern tree vt_off_identifier;\n extern tree empty_except_spec;\n \n+extern int in_function_try_handler;\n+\n /* A node that is a list (length 1) of error_mark_nodes.  */\n extern tree error_mark_list;\n \n@@ -3381,6 +3383,9 @@ extern void finish_goto_stmt                    PROTO((tree));\n extern tree begin_try_block                     PROTO((void));\n extern void finish_try_block                    PROTO((tree));\n extern void finish_handler_sequence             PROTO((tree));\n+extern tree begin_function_try_block            PROTO((void));\n+extern void finish_function_try_block           PROTO((tree));\n+extern void finish_function_handler_sequence    PROTO((tree));\n extern tree begin_handler                       PROTO((void));\n extern void finish_handler_parms                PROTO((tree));\n extern void finish_handler                      PROTO((tree));"}, {"sha": "c1b3b3b9df4bf2de375b614d25b63ceb48c3d6e2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dde4175efc346c70069a8a090590d3e63be04fa/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dde4175efc346c70069a8a090590d3e63be04fa/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0dde4175efc346c70069a8a090590d3e63be04fa", "patch": "@@ -288,7 +288,7 @@ tree va_list_type_node;\n static tree global_type_node;\n \n /* Namespace std.  */\n-int in_std = 0;\n+int in_std;\n \n /* Expect only namespace names now. */\n static int only_namespace_names;\n@@ -339,6 +339,9 @@ tree vt_off_identifier;\n /* Exception specifier used for throw().  */\n tree empty_except_spec;\n \n+/* Nonzero if we're in a handler for a function-try-block.  */\n+int in_function_try_handler;\n+\n struct named_label_list\n {\n   struct binding_level *binding_level;\n@@ -12982,6 +12985,7 @@ start_function (declspecs, declarator, attrs, pre_parsed_p)\n   current_member_init_list = NULL_TREE;\n   ctor_label = dtor_label = NULL_TREE;\n   static_labelno = 0;\n+  in_function_try_handler = 0;\n \n   clear_temp_name ();\n \n@@ -14622,6 +14626,7 @@ struct cp_function\n   struct cp_function *next;\n   struct binding_level *binding_level;\n   int static_labelno;\n+  int in_function_try_handler;\n };\n \n static struct cp_function *cp_function_chain;\n@@ -14664,6 +14669,7 @@ push_cp_function_context (context)\n   p->current_class_ptr = current_class_ptr;\n   p->current_class_ref = current_class_ref;\n   p->static_labelno = static_labelno;\n+  p->in_function_try_handler = in_function_try_handler;\n }\n \n /* Restore the variables used during compilation of a C++ function.  */\n@@ -14706,6 +14712,7 @@ pop_cp_function_context (context)\n   current_class_ptr = p->current_class_ptr;\n   current_class_ref = p->current_class_ref;\n   static_labelno = p->static_labelno;\n+  in_function_try_handler = p->in_function_try_handler;\n \n   free (p);\n }"}, {"sha": "dd708556e63e93101201fe9ebb57fb61c8698fc5", "filename": "gcc/cp/except.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dde4175efc346c70069a8a090590d3e63be04fa/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dde4175efc346c70069a8a090590d3e63be04fa/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=0dde4175efc346c70069a8a090590d3e63be04fa", "patch": "@@ -698,6 +698,13 @@ expand_end_catch_block ()\n   if (! doing_eh (1))\n     return;\n \n+  /* The exception being handled is rethrown if control reaches the end of\n+     a handler of the function-try-block of a constructor or destructor.  */\n+  if (in_function_try_handler\n+      && (DECL_CONSTRUCTOR_P (current_function_decl)\n+\t  || DECL_DESTRUCTOR_P (current_function_decl)))\n+    expand_throw (NULL_TREE);\n+\n   /* Cleanup the EH parameter.  */\n   expand_end_bindings (getdecls (), kept_level_p (), 0);\n   poplevel (kept_level_p (), 1, 0);"}, {"sha": "15c67d0eae9bef874e53a1e8c295acd1056b84fa", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 115, "deletions": 121, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dde4175efc346c70069a8a090590d3e63be04fa/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dde4175efc346c70069a8a090590d3e63be04fa/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=0dde4175efc346c70069a8a090590d3e63be04fa", "patch": "@@ -720,18 +720,18 @@ static const short yyrline[] = { 0,\n   3299,  3301,  3302,  3304,  3309,  3311,  3313,  3315,  3317,  3320,\n   3321,  3323,  3326,  3327,  3330,  3330,  3333,  3333,  3336,  3336,\n   3338,  3340,  3342,  3344,  3350,  3356,  3359,  3362,  3368,  3370,\n-  3372,  3376,  3378,  3379,  3380,  3382,  3385,  3392,  3397,  3403,\n-  3407,  3409,  3412,  3414,  3417,  3421,  3423,  3426,  3428,  3431,\n-  3448,  3454,  3462,  3464,  3466,  3470,  3473,  3474,  3482,  3486,\n-  3490,  3493,  3494,  3500,  3503,  3506,  3508,  3512,  3517,  3520,\n-  3530,  3535,  3536,  3543,  3546,  3549,  3551,  3554,  3556,  3566,\n-  3580,  3584,  3587,  3589,  3593,  3597,  3600,  3603,  3605,  3609,\n-  3611,  3618,  3625,  3628,  3632,  3636,  3640,  3646,  3650,  3655,\n-  3657,  3660,  3665,  3671,  3682,  3685,  3687,  3691,  3699,  3702,\n-  3706,  3709,  3711,  3713,  3719,  3724,  3727,  3729,  3731,  3733,\n-  3735,  3737,  3739,  3741,  3743,  3745,  3747,  3749,  3751,  3753,\n-  3755,  3757,  3759,  3761,  3763,  3765,  3767,  3769,  3771,  3773,\n-  3775,  3777,  3779,  3781,  3783,  3785,  3787,  3789,  3792,  3794\n+  3372,  3376,  3378,  3379,  3380,  3382,  3385,  3388,  3391,  3397,\n+  3401,  3403,  3406,  3408,  3411,  3415,  3417,  3420,  3422,  3425,\n+  3442,  3448,  3456,  3458,  3460,  3464,  3467,  3468,  3476,  3480,\n+  3484,  3487,  3488,  3494,  3497,  3500,  3502,  3506,  3511,  3514,\n+  3524,  3529,  3530,  3537,  3540,  3543,  3545,  3548,  3550,  3560,\n+  3574,  3578,  3581,  3583,  3587,  3591,  3594,  3597,  3599,  3603,\n+  3605,  3612,  3619,  3622,  3626,  3630,  3634,  3640,  3644,  3649,\n+  3651,  3654,  3659,  3665,  3676,  3679,  3681,  3685,  3693,  3696,\n+  3700,  3703,  3705,  3707,  3713,  3718,  3721,  3723,  3725,  3727,\n+  3729,  3731,  3733,  3735,  3737,  3739,  3741,  3743,  3745,  3747,\n+  3749,  3751,  3753,  3755,  3757,  3759,  3761,  3763,  3765,  3767,\n+  3769,  3771,  3773,  3775,  3777,  3779,  3781,  3783,  3786,  3788\n };\n #endif\n \n@@ -7722,61 +7722,55 @@ case 765:\n     break;}\n case 767:\n #line 3387 \"parse.y\"\n-{\n-\t\t  if (! current_function_parms_stored)\n-\t\t    store_parm_decls ();\n-\t\t  expand_start_early_try_stmts ();\n-\t\t;\n+{ yyval.ttype = begin_function_try_block (); ;\n     break;}\n case 768:\n-#line 3393 \"parse.y\"\n-{ \n-                  expand_start_all_catch (); \n-                ;\n+#line 3389 \"parse.y\"\n+{ finish_function_try_block (yyvsp[-2].ttype); ;\n     break;}\n case 769:\n-#line 3397 \"parse.y\"\n+#line 3391 \"parse.y\"\n {\n-\t\t  expand_end_all_catch ();\n+\t\t  finish_function_handler_sequence (yyvsp[-4].ttype);\n \t\t  yyval.itype = yyvsp[-3].itype;\n \t\t;\n     break;}\n case 770:\n-#line 3405 \"parse.y\"\n+#line 3399 \"parse.y\"\n { yyval.ttype = begin_try_block (); ;\n     break;}\n case 771:\n-#line 3407 \"parse.y\"\n+#line 3401 \"parse.y\"\n { finish_try_block (yyvsp[-1].ttype); ;\n     break;}\n case 772:\n-#line 3409 \"parse.y\"\n+#line 3403 \"parse.y\"\n { finish_handler_sequence (yyvsp[-3].ttype); ;\n     break;}\n case 775:\n-#line 3419 \"parse.y\"\n+#line 3413 \"parse.y\"\n { yyval.ttype = begin_handler(); ;\n     break;}\n case 776:\n-#line 3421 \"parse.y\"\n+#line 3415 \"parse.y\"\n { finish_handler_parms (yyvsp[-1].ttype); ;\n     break;}\n case 777:\n-#line 3423 \"parse.y\"\n+#line 3417 \"parse.y\"\n { finish_handler (yyvsp[-3].ttype); ;\n     break;}\n case 780:\n-#line 3433 \"parse.y\"\n+#line 3427 \"parse.y\"\n { expand_start_catch_block (NULL_TREE, NULL_TREE); ;\n     break;}\n case 781:\n-#line 3449 \"parse.y\"\n+#line 3443 \"parse.y\"\n { check_for_new_type (\"inside exception declarations\", yyvsp[-1].ftype);\n \t\t  expand_start_catch_block (TREE_PURPOSE (yyvsp[-1].ftype.t),\n \t\t\t\t\t    TREE_VALUE (yyvsp[-1].ftype.t)); ;\n     break;}\n case 782:\n-#line 3456 \"parse.y\"\n+#line 3450 \"parse.y\"\n { tree label;\n \t\tdo_label:\n \t\t  label = define_label (input_filename, lineno, yyvsp[-1].ttype);\n@@ -7785,98 +7779,98 @@ case 782:\n \t\t;\n     break;}\n case 783:\n-#line 3463 \"parse.y\"\n+#line 3457 \"parse.y\"\n { goto do_label; ;\n     break;}\n case 784:\n-#line 3465 \"parse.y\"\n+#line 3459 \"parse.y\"\n { goto do_label; ;\n     break;}\n case 785:\n-#line 3467 \"parse.y\"\n+#line 3461 \"parse.y\"\n { goto do_label; ;\n     break;}\n case 786:\n-#line 3472 \"parse.y\"\n+#line 3466 \"parse.y\"\n { if (yyvsp[-1].ttype) cplus_expand_expr_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 788:\n-#line 3475 \"parse.y\"\n+#line 3469 \"parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C++ forbids compound statements inside for initializations\");\n \t\t;\n     break;}\n case 789:\n-#line 3484 \"parse.y\"\n+#line 3478 \"parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  yyval.ttype = NULL_TREE; ;\n     break;}\n case 790:\n-#line 3487 \"parse.y\"\n+#line 3481 \"parse.y\"\n { emit_line_note (input_filename, lineno); ;\n     break;}\n case 791:\n-#line 3492 \"parse.y\"\n+#line 3486 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 793:\n-#line 3495 \"parse.y\"\n+#line 3489 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 794:\n-#line 3502 \"parse.y\"\n+#line 3496 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 797:\n-#line 3509 \"parse.y\"\n+#line 3503 \"parse.y\"\n { yyval.ttype = chainon (yyval.ttype, yyvsp[0].ttype); ;\n     break;}\n case 798:\n-#line 3514 \"parse.y\"\n+#line 3508 \"parse.y\"\n { yyval.ttype = build_tree_list (yyval.ttype, yyvsp[-1].ttype); ;\n     break;}\n case 799:\n-#line 3519 \"parse.y\"\n+#line 3513 \"parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyval.ttype, NULL_TREE); ;\n     break;}\n case 800:\n-#line 3521 \"parse.y\"\n+#line 3515 \"parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype); ;\n     break;}\n case 801:\n-#line 3532 \"parse.y\"\n+#line 3526 \"parse.y\"\n {\n \t\t  yyval.ttype = empty_parms();\n \t\t;\n     break;}\n case 803:\n-#line 3537 \"parse.y\"\n+#line 3531 \"parse.y\"\n { yyval.ttype = finish_parmlist (build_tree_list (NULL_TREE, yyvsp[0].ftype.t), 0);\n \t\t  check_for_new_type (\"inside parameter list\", yyvsp[0].ftype); ;\n     break;}\n case 804:\n-#line 3545 \"parse.y\"\n+#line 3539 \"parse.y\"\n { yyval.ttype = finish_parmlist (yyval.ttype, 0); ;\n     break;}\n case 805:\n-#line 3547 \"parse.y\"\n+#line 3541 \"parse.y\"\n { yyval.ttype = finish_parmlist (yyvsp[-1].ttype, 1); ;\n     break;}\n case 806:\n-#line 3550 \"parse.y\"\n+#line 3544 \"parse.y\"\n { yyval.ttype = finish_parmlist (yyvsp[-1].ttype, 1); ;\n     break;}\n case 807:\n-#line 3552 \"parse.y\"\n+#line 3546 \"parse.y\"\n { yyval.ttype = finish_parmlist (build_tree_list (NULL_TREE,\n \t\t\t\t\t\t\t yyvsp[-1].ftype.t), 1); ;\n     break;}\n case 808:\n-#line 3555 \"parse.y\"\n+#line 3549 \"parse.y\"\n { yyval.ttype = finish_parmlist (NULL_TREE, 1); ;\n     break;}\n case 809:\n-#line 3557 \"parse.y\"\n+#line 3551 \"parse.y\"\n {\n \t\t  /* This helps us recover from really nasty\n \t\t     parse errors, for example, a missing right\n@@ -7888,7 +7882,7 @@ case 809:\n \t\t;\n     break;}\n case 810:\n-#line 3567 \"parse.y\"\n+#line 3561 \"parse.y\"\n {\n \t\t  /* This helps us recover from really nasty\n \t\t     parse errors, for example, a missing right\n@@ -7901,99 +7895,99 @@ case 810:\n \t\t;\n     break;}\n case 811:\n-#line 3582 \"parse.y\"\n+#line 3576 \"parse.y\"\n { maybe_snarf_defarg (); ;\n     break;}\n case 812:\n-#line 3584 \"parse.y\"\n+#line 3578 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 815:\n-#line 3595 \"parse.y\"\n+#line 3589 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[0].ftype);\n \t\t  yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ftype.t); ;\n     break;}\n case 816:\n-#line 3598 \"parse.y\"\n+#line 3592 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[-1].ftype);\n \t\t  yyval.ttype = build_tree_list (yyvsp[0].ttype, yyvsp[-1].ftype.t); ;\n     break;}\n case 817:\n-#line 3601 \"parse.y\"\n+#line 3595 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[0].ftype);\n \t\t  yyval.ttype = chainon (yyval.ttype, yyvsp[0].ftype.t); ;\n     break;}\n case 818:\n-#line 3604 \"parse.y\"\n+#line 3598 \"parse.y\"\n { yyval.ttype = chainon (yyval.ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;\n     break;}\n case 819:\n-#line 3606 \"parse.y\"\n+#line 3600 \"parse.y\"\n { yyval.ttype = chainon (yyval.ttype, build_tree_list (yyvsp[0].ttype, yyvsp[-2].ttype)); ;\n     break;}\n case 821:\n-#line 3612 \"parse.y\"\n+#line 3606 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[-1].ftype);\n \t\t  yyval.ttype = build_tree_list (NULL_TREE, yyvsp[-1].ftype.t); ;\n     break;}\n case 822:\n-#line 3622 \"parse.y\"\n+#line 3616 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[-1].ftype.t);\n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag;\n \t\t  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype); ;\n     break;}\n case 823:\n-#line 3626 \"parse.y\"\n+#line 3620 \"parse.y\"\n { yyval.ftype.t = build_tree_list (yyvsp[-1].ftype.t, yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 824:\n-#line 3629 \"parse.y\"\n+#line 3623 \"parse.y\"\n { yyval.ftype.t = build_tree_list (build_decl_list (NULL_TREE, yyvsp[-1].ftype.t),\n \t\t\t\t\t  yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 825:\n-#line 3633 \"parse.y\"\n+#line 3627 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[-1].ftype.t);\n \t\t  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype);\n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 826:\n-#line 3637 \"parse.y\"\n+#line 3631 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[0].ftype.t);\n \t\t  yyval.ftype.t = build_tree_list (specs, NULL_TREE); \n \t\t  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;\n     break;}\n case 827:\n-#line 3641 \"parse.y\"\n+#line 3635 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[-1].ttype);\n \t\t  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = 0; ;\n     break;}\n case 828:\n-#line 3648 \"parse.y\"\n+#line 3642 \"parse.y\"\n { yyval.ftype.t = build_tree_list (NULL_TREE, yyvsp[0].ftype.t);\n \t\t  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag;  ;\n     break;}\n case 829:\n-#line 3651 \"parse.y\"\n+#line 3645 \"parse.y\"\n { yyval.ftype.t = build_tree_list (yyvsp[0].ttype, yyvsp[-1].ftype.t);\n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag;  ;\n     break;}\n case 832:\n-#line 3662 \"parse.y\"\n+#line 3656 \"parse.y\"\n { see_typename (); ;\n     break;}\n case 833:\n-#line 3667 \"parse.y\"\n+#line 3661 \"parse.y\"\n {\n \t\t  error (\"type specifier omitted for parameter\");\n \t\t  yyval.ttype = build_tree_list (integer_type_node, NULL_TREE);\n \t\t;\n     break;}\n case 834:\n-#line 3672 \"parse.y\"\n+#line 3666 \"parse.y\"\n {\n \t\t  error (\"type specifier omitted for parameter\");\n \t\t  if (TREE_CODE (yyval.ttype) == SCOPE_REF\n@@ -8004,192 +7998,192 @@ case 834:\n \t\t;\n     break;}\n case 835:\n-#line 3684 \"parse.y\"\n+#line 3678 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 836:\n-#line 3686 \"parse.y\"\n+#line 3680 \"parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 837:\n-#line 3688 \"parse.y\"\n+#line 3682 \"parse.y\"\n { yyval.ttype = empty_except_spec; ;\n     break;}\n case 838:\n-#line 3693 \"parse.y\"\n+#line 3687 \"parse.y\"\n {\n \t\t  check_for_new_type (\"exception specifier\", yyvsp[0].ftype);\n \t\t  yyval.ttype = groktypename (yyvsp[0].ftype.t);\n \t\t;\n     break;}\n case 839:\n-#line 3701 \"parse.y\"\n+#line 3695 \"parse.y\"\n { yyval.ttype = add_exception_specifier (NULL_TREE, yyvsp[0].ttype, 1); ;\n     break;}\n case 840:\n-#line 3703 \"parse.y\"\n+#line 3697 \"parse.y\"\n { yyval.ttype = add_exception_specifier (yyvsp[-2].ttype, yyvsp[0].ttype, 1); ;\n     break;}\n case 841:\n-#line 3708 \"parse.y\"\n+#line 3702 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 842:\n-#line 3710 \"parse.y\"\n+#line 3704 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 843:\n-#line 3712 \"parse.y\"\n+#line 3706 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 844:\n-#line 3714 \"parse.y\"\n+#line 3708 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);\n \t\t;\n     break;}\n case 845:\n-#line 3721 \"parse.y\"\n+#line 3715 \"parse.y\"\n { got_scope = NULL_TREE; ;\n     break;}\n case 846:\n-#line 3726 \"parse.y\"\n+#line 3720 \"parse.y\"\n { yyval.ttype = ansi_opname[MULT_EXPR]; ;\n     break;}\n case 847:\n-#line 3728 \"parse.y\"\n+#line 3722 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUNC_DIV_EXPR]; ;\n     break;}\n case 848:\n-#line 3730 \"parse.y\"\n+#line 3724 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUNC_MOD_EXPR]; ;\n     break;}\n case 849:\n-#line 3732 \"parse.y\"\n+#line 3726 \"parse.y\"\n { yyval.ttype = ansi_opname[PLUS_EXPR]; ;\n     break;}\n case 850:\n-#line 3734 \"parse.y\"\n+#line 3728 \"parse.y\"\n { yyval.ttype = ansi_opname[MINUS_EXPR]; ;\n     break;}\n case 851:\n-#line 3736 \"parse.y\"\n+#line 3730 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_AND_EXPR]; ;\n     break;}\n case 852:\n-#line 3738 \"parse.y\"\n+#line 3732 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_IOR_EXPR]; ;\n     break;}\n case 853:\n-#line 3740 \"parse.y\"\n+#line 3734 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_XOR_EXPR]; ;\n     break;}\n case 854:\n-#line 3742 \"parse.y\"\n+#line 3736 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_NOT_EXPR]; ;\n     break;}\n case 855:\n-#line 3744 \"parse.y\"\n+#line 3738 \"parse.y\"\n { yyval.ttype = ansi_opname[COMPOUND_EXPR]; ;\n     break;}\n case 856:\n-#line 3746 \"parse.y\"\n+#line 3740 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 857:\n-#line 3748 \"parse.y\"\n+#line 3742 \"parse.y\"\n { yyval.ttype = ansi_opname[LT_EXPR]; ;\n     break;}\n case 858:\n-#line 3750 \"parse.y\"\n+#line 3744 \"parse.y\"\n { yyval.ttype = ansi_opname[GT_EXPR]; ;\n     break;}\n case 859:\n-#line 3752 \"parse.y\"\n+#line 3746 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 860:\n-#line 3754 \"parse.y\"\n+#line 3748 \"parse.y\"\n { yyval.ttype = ansi_assopname[yyvsp[0].code]; ;\n     break;}\n case 861:\n-#line 3756 \"parse.y\"\n+#line 3750 \"parse.y\"\n { yyval.ttype = ansi_opname [MODIFY_EXPR]; ;\n     break;}\n case 862:\n-#line 3758 \"parse.y\"\n+#line 3752 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 863:\n-#line 3760 \"parse.y\"\n+#line 3754 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 864:\n-#line 3762 \"parse.y\"\n+#line 3756 \"parse.y\"\n { yyval.ttype = ansi_opname[POSTINCREMENT_EXPR]; ;\n     break;}\n case 865:\n-#line 3764 \"parse.y\"\n+#line 3758 \"parse.y\"\n { yyval.ttype = ansi_opname[PREDECREMENT_EXPR]; ;\n     break;}\n case 866:\n-#line 3766 \"parse.y\"\n+#line 3760 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUTH_ANDIF_EXPR]; ;\n     break;}\n case 867:\n-#line 3768 \"parse.y\"\n+#line 3762 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUTH_ORIF_EXPR]; ;\n     break;}\n case 868:\n-#line 3770 \"parse.y\"\n+#line 3764 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUTH_NOT_EXPR]; ;\n     break;}\n case 869:\n-#line 3772 \"parse.y\"\n+#line 3766 \"parse.y\"\n { yyval.ttype = ansi_opname[COND_EXPR]; ;\n     break;}\n case 870:\n-#line 3774 \"parse.y\"\n+#line 3768 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 871:\n-#line 3776 \"parse.y\"\n+#line 3770 \"parse.y\"\n { yyval.ttype = ansi_opname[COMPONENT_REF]; ;\n     break;}\n case 872:\n-#line 3778 \"parse.y\"\n+#line 3772 \"parse.y\"\n { yyval.ttype = ansi_opname[MEMBER_REF]; ;\n     break;}\n case 873:\n-#line 3780 \"parse.y\"\n+#line 3774 \"parse.y\"\n { yyval.ttype = ansi_opname[CALL_EXPR]; ;\n     break;}\n case 874:\n-#line 3782 \"parse.y\"\n+#line 3776 \"parse.y\"\n { yyval.ttype = ansi_opname[ARRAY_REF]; ;\n     break;}\n case 875:\n-#line 3784 \"parse.y\"\n+#line 3778 \"parse.y\"\n { yyval.ttype = ansi_opname[NEW_EXPR]; ;\n     break;}\n case 876:\n-#line 3786 \"parse.y\"\n+#line 3780 \"parse.y\"\n { yyval.ttype = ansi_opname[DELETE_EXPR]; ;\n     break;}\n case 877:\n-#line 3788 \"parse.y\"\n+#line 3782 \"parse.y\"\n { yyval.ttype = ansi_opname[VEC_NEW_EXPR]; ;\n     break;}\n case 878:\n-#line 3790 \"parse.y\"\n+#line 3784 \"parse.y\"\n { yyval.ttype = ansi_opname[VEC_DELETE_EXPR]; ;\n     break;}\n case 879:\n-#line 3793 \"parse.y\"\n+#line 3787 \"parse.y\"\n { yyval.ttype = grokoptypename (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 880:\n-#line 3795 \"parse.y\"\n+#line 3789 \"parse.y\"\n { yyval.ttype = ansi_opname[ERROR_MARK]; ;\n     break;}\n }\n@@ -8390,7 +8384,7 @@ case 880:\n   yystate = yyn;\n   goto yynewstate;\n }\n-#line 3798 \"parse.y\"\n+#line 3792 \"parse.y\"\n \n \n #ifdef SPEW_DEBUG"}, {"sha": "fc62c0f1dba6321126d23067753c65208b0e3e81", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dde4175efc346c70069a8a090590d3e63be04fa/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dde4175efc346c70069a8a090590d3e63be04fa/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=0dde4175efc346c70069a8a090590d3e63be04fa", "patch": "@@ -3384,18 +3384,12 @@ simple_stmt:\n \n function_try_block:\n \t  TRY\n-\t\t{\n-\t\t  if (! current_function_parms_stored)\n-\t\t    store_parm_decls ();\n-\t\t  expand_start_early_try_stmts ();\n-\t\t}\n+\t\t{ $<ttype>$ = begin_function_try_block (); }\n \t  ctor_initializer_opt compstmt\n-\t\t{ \n-                  expand_start_all_catch (); \n-                }\n+\t\t{ finish_function_try_block ($<ttype>2); }\n \t  handler_seq\n \t\t{\n-\t\t  expand_end_all_catch ();\n+\t\t  finish_function_handler_sequence ($<ttype>2);\n \t\t  $$ = $3;\n \t\t}\n \t;"}, {"sha": "e05b4501dfdccf85c60b056c994156d3bd278795", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dde4175efc346c70069a8a090590d3e63be04fa/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dde4175efc346c70069a8a090590d3e63be04fa/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0dde4175efc346c70069a8a090590d3e63be04fa", "patch": "@@ -9503,10 +9503,18 @@ instantiate_decl (d)\n   else if (TREE_CODE (d) == FUNCTION_DECL)\n     {\n       tree t = DECL_SAVED_TREE (code_pattern);\n+      tree try_block = NULL_TREE;\n \n       start_function (NULL_TREE, d, NULL_TREE, 1);\n       store_parm_decls ();\n \n+      if (t && TREE_CODE (t) == TRY_BLOCK)\n+\t{\n+\t  try_block = t;\n+\t  begin_function_try_block ();\n+\t  t = TRY_STMTS (try_block);\n+\t}\n+\n       if (t && TREE_CODE (t) == RETURN_INIT)\n \t{\n \t  store_return_init\n@@ -9533,6 +9541,17 @@ instantiate_decl (d)\n       my_friendly_assert (TREE_CODE (t) == COMPOUND_STMT, 42);\n       tsubst_expr (t, args, /*complain=*/1, tmpl);\n \n+      if (try_block)\n+\t{\n+\t  finish_function_try_block (NULL_TREE);\n+\t  {\n+\t    tree handler = TRY_HANDLERS (try_block);\n+\t    for (; handler; handler = TREE_CHAIN (handler))\n+\t      tsubst_expr (handler, args, /*complain=*/1, tmpl);\n+\t  }\n+\t  finish_function_handler_sequence (NULL_TREE);\n+\t}\n+\n       finish_function (lineno, 0, nested);\n     }\n "}, {"sha": "fe68ae8fb9d4812ac0d5750e93f32bd8d6959252", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dde4175efc346c70069a8a090590d3e63be04fa/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dde4175efc346c70069a8a090590d3e63be04fa/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0dde4175efc346c70069a8a090590d3e63be04fa", "patch": "@@ -586,6 +586,27 @@ begin_try_block ()\n     }\n }\n \n+/* Likewise, for a function-try-block.  */\n+\n+tree\n+begin_function_try_block ()\n+{\n+  if (processing_template_decl)\n+    {\n+      tree r = build_min_nt (TRY_BLOCK, NULL_TREE,\n+\t\t\t     NULL_TREE);\n+      add_tree (r);\n+      return r;\n+    }\n+  else\n+    {\n+      if (! current_function_parms_stored)\n+\tstore_parm_decls ();\n+      expand_start_early_try_stmts ();\n+      return NULL_TREE;\n+    }\n+}\n+\n /* Finish a try-block, which may be given by TRY_BLOCK.  */\n \n void\n@@ -600,6 +621,22 @@ finish_try_block (try_block)\n     }\n }\n \n+/* Likewise, for a function-try-block.  */\n+\n+void\n+finish_function_try_block (try_block)\n+     tree try_block;\n+{\n+  if (processing_template_decl)\n+    RECHAIN_STMTS_FROM_LAST (try_block, TRY_STMTS (try_block));\n+  else\n+    {\n+      end_protect_partials ();\n+      expand_start_all_catch ();\n+      in_function_try_handler = 1;\n+    }\n+}\n+\n /* Finish a handler-sequence for a try-block, which may be given by\n    TRY_BLOCK.  */\n \n@@ -615,6 +652,21 @@ finish_handler_sequence (try_block)\n     }\n }\n \n+/* Likewise, for a function-try-block.  */\n+\n+void\n+finish_function_handler_sequence (try_block)\n+     tree try_block;\n+{\n+  if (processing_template_decl)\n+    RECHAIN_STMTS_FROM_CHAIN (try_block, TRY_HANDLERS (try_block));\n+  else\n+    {\n+      in_function_try_handler = 0;\n+      expand_end_all_catch ();\n+    }\n+}\n+\n /* Begin a handler.  Returns a HANDLER if appropriate.  */\n \n tree"}, {"sha": "cb894fd4523586567d750071cf334adef0dfca72", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dde4175efc346c70069a8a090590d3e63be04fa/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dde4175efc346c70069a8a090590d3e63be04fa/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0dde4175efc346c70069a8a090590d3e63be04fa", "patch": "@@ -6858,6 +6858,14 @@ c_expand_return (retval)\n       expand_goto (dtor_label);\n       return;\n     }\n+  else if (in_function_try_handler\n+\t   && DECL_CONSTRUCTOR_P (current_function_decl))\n+    {\n+      /* If a return statement appears in a handler of the\n+         function-try-block of a constructor, the program is ill-formed. */\n+      error (\"cannot return from a handler of a function-try-block of a constructor\");\n+      return;\n+    }\n \n   /* Only operator new(...) throw(), can return NULL [expr.new/13].  */\n   if ((DECL_NAME (current_function_decl) == ansi_opname[(int) NEW_EXPR]"}]}