{"sha": "3f69bd930cb156f6b33e8e9d2126c1f956849370", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y2OWJkOTMwY2IxNTZmNmIzM2U4ZTlkMjEyNmMxZjk1Njg0OTM3MA==", "commit": {"author": {"name": "Bruce Korb", "email": "bkorb@gnu.org", "date": "2000-05-17T16:31:57Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2000-05-17T16:31:57Z"}, "message": "use #def constant for sub-pattern count\n\nFrom-SVN: r33961", "tree": {"sha": "64963a44efd21788ca653d5957db8415f99f621d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64963a44efd21788ca653d5957db8415f99f621d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f69bd930cb156f6b33e8e9d2126c1f956849370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f69bd930cb156f6b33e8e9d2126c1f956849370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f69bd930cb156f6b33e8e9d2126c1f956849370", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f69bd930cb156f6b33e8e9d2126c1f956849370/comments", "author": {"login": "brkorb", "id": 1242936, "node_id": "MDQ6VXNlcjEyNDI5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1242936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brkorb", "html_url": "https://github.com/brkorb", "followers_url": "https://api.github.com/users/brkorb/followers", "following_url": "https://api.github.com/users/brkorb/following{/other_user}", "gists_url": "https://api.github.com/users/brkorb/gists{/gist_id}", "starred_url": "https://api.github.com/users/brkorb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brkorb/subscriptions", "organizations_url": "https://api.github.com/users/brkorb/orgs", "repos_url": "https://api.github.com/users/brkorb/repos", "events_url": "https://api.github.com/users/brkorb/events{/privacy}", "received_events_url": "https://api.github.com/users/brkorb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e36475b8211f61242ac4840d6ae30ee65c54538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e36475b8211f61242ac4840d6ae30ee65c54538", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e36475b8211f61242ac4840d6ae30ee65c54538"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "e526541c4d7c2a45bfbc77326d912f5a0ae2a684", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f69bd930cb156f6b33e8e9d2126c1f956849370/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f69bd930cb156f6b33e8e9d2126c1f956849370/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f69bd930cb156f6b33e8e9d2126c1f956849370", "patch": "@@ -7,7 +7,9 @@\n \n \t* fixinc/fixincl.c: improve the debug displays, ignore SIGPIPE\n \t* fixinc/server.c: likewise\n-\t* fixinc/fixfixes.c( char_macro_def_fix ): fix regex + #ifdef debugging code\n+\t* fixinc/fixfixes.c( char_macro_def_fix ): fix regex\n+\t+ #ifdef debugging code + use #def constant for\n+\tsub-pattern count\n \t* fixinc/inclhack.def( hpux11_fabsf ): Keep HP-UX 11 from stomping\n \ton C++ math namespace\n "}, {"sha": "1f81d6ac9319395af58ff8ca48b0eaad48d297fe", "filename": "gcc/fixinc/fixfixes.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f69bd930cb156f6b33e8e9d2126c1f956849370/gcc%2Ffixinc%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f69bd930cb156f6b33e8e9d2126c1f956849370/gcc%2Ffixinc%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixfixes.c?ref=3f69bd930cb156f6b33e8e9d2126c1f956849370", "patch": "@@ -296,11 +296,12 @@ FIX_PROC_HEAD( char_macro_use_fix )\n #endif\n     ;\n \n+# define SUB_PAT_CT 1\n   char *pz_pat;\n \n   static regex_t re;\n \n-  regmatch_t rm[2];\n+  regmatch_t rm[SUB_PAT_CT+1];\n \n   if (p_fixd->patch_args[1] == NULL)\n     {\n@@ -316,10 +317,10 @@ FIX_PROC_HEAD( char_macro_use_fix )\n       exit(3);\n     }\n \n-  compile_re (pz_pat, &re, 2, \"macro pattern\", \"char_macro_use_fix\");\n+  compile_re (pz_pat, &re, 1, \"macro pattern\", \"char_macro_use_fix\");\n   free (pz_pat);\n \n-  while (regexec (&re, text, 3, rm, 0) == 0)\n+  while (regexec (&re, text, SUB_PAT_CT+1, rm, 0) == 0)\n     {\n       const char* pz = text + rm[1].rm_so;\n \n@@ -334,6 +335,7 @@ FIX_PROC_HEAD( char_macro_use_fix )\n     }\n \n   fputs (text, stdout);\n+# undef SUB_PAT_CT\n }\n \n \n@@ -382,8 +384,8 @@ FIX_PROC_HEAD( char_macro_def_fix )\n   char *pz_pat;\n \n   static regex_t re;\n-\n-  regmatch_t rm[3];\n+# define SUB_PAT_CT 2\n+  regmatch_t rm[SUB_PAT_CT+1];\n   const char *p;\n   int  rerr;\n \n@@ -404,7 +406,7 @@ FIX_PROC_HEAD( char_macro_def_fix )\n   compile_re (pz_pat, &re, 1, \"macro pattern\", \"char_macro_def_fix\");\n \n #ifdef DEBUG\n-  if ((rerr = regexec (&re, text, 3, rm, 0)) != 0)\n+  if ((rerr = regexec (&re, text, SUB_PAT_CT+1, rm, 0)) != 0)\n     {\n       fprintf( stderr, \"Match error %d:\\n%s\\n\", rerr, pz_pat );\n       exit(3);\n@@ -413,7 +415,7 @@ FIX_PROC_HEAD( char_macro_def_fix )\n \n   free (pz_pat);\n   \n-  while ((rerr = regexec (&re, text, 3, rm, 0)) == 0)\n+  while ((rerr = regexec (&re, text, SUB_PAT_CT+1, rm, 0)) == 0)\n     {\n       const char* pz = text + rm[2].rm_so;\n \n@@ -450,6 +452,7 @@ FIX_PROC_HEAD( char_macro_def_fix )\n    *  Emit the rest of the text\n    */\n   fputs (text, stdout);\n+# undef SUB_PAT_CT\n }\n \n /* Fix for machine name #ifdefs that are not in the namespace reserved"}]}