{"sha": "ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e", "node_id": "C_kwDOANBUbNoAKGVlMTFiZTdmMmQ3ODhlNjA1NWViZWQ5NzQ2YThkOGFjM2NiMDRiOGU", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-11-04T22:43:29Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-11-07T17:35:04Z"}, "message": "Fortran: Diagnose all operands/arguments with constraint violations\n\n04-Nov-2021  Sandra Loosemore <sandra@codesourcery.com>\n\t     Bernhard Reutner-Fischer <aldot@gcc.gnu.org>\n\n\t PR fortran/101337\n\ngcc/fortran/ChangeLog:\n\t* interface.c (gfc_compare_actual_formal): Continue checking\n\tall arguments after encountering an error.\n\t* intrinsic.c (do_ts29113_check): Likewise.\n\t* resolve.c (resolve_operator): Continue resolving on op2 error.\n\ngcc/testsuite/ChangeLog:\n\t* gfortran.dg/bessel_3.f90: Expect additional diagnostics from\n\tmultiple bad arguments in the call.\n\t* gfortran.dg/pr24823.f: Likewise.\n\t* gfortran.dg/pr39937.f: Likewise.\n\t* gfortran.dg/pr41011.f: Likewise.\n\t* gfortran.dg/pr61318.f90: Likewise.\n\t* gfortran.dg/c-interop/c407b-2.f90: Remove xfails.\n\t* gfortran.dg/c-interop/c535b-2.f90: Likewise.", "tree": {"sha": "a96c18c77e62872d69d6c8ba6d96f7278ce9a88c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a96c18c77e62872d69d6c8ba6d96f7278ce9a88c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6f704fd104b79fc88914978772737cd05423059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6f704fd104b79fc88914978772737cd05423059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6f704fd104b79fc88914978772737cd05423059"}], "stats": {"total": 192, "additions": 115, "deletions": 77}, "files": [{"sha": "30c99ef3938d85110cdb4d99dcfa1b3a08b5b9a1", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 60, "deletions": 26, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e", "patch": "@@ -3064,6 +3064,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n   gfc_array_spec *fas, *aas;\n   bool pointer_dummy, pointer_arg, allocatable_arg;\n \n+  bool ok = true;\n+\n   actual = *ap;\n \n   if (actual == NULL && formal == NULL)\n@@ -3134,7 +3136,6 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t  if (where)\n \t    gfc_error (\"More actual than formal arguments in procedure \"\n \t\t       \"call at %L\", where);\n-\n \t  return false;\n \t}\n \n@@ -3192,13 +3193,16 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t  else if (where)\n \t    gfc_error (\"Fortran 2008: Null pointer at %L to non-pointer \"\n \t\t       \"dummy %qs\", where, f->sym->name);\n-\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n       if (!compare_parameter (f->sym, a->expr, ranks_must_agree,\n \t\t\t      is_elemental, where))\n-\treturn false;\n+\t{\n+\t  ok = false;\n+\t  goto match;\n+\t}\n \n       /* TS 29113, 6.3p2; F2018 15.5.2.4.  */\n       if (f->sym->ts.type == BT_ASSUMED\n@@ -3217,7 +3221,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t\t\t \"has type parameters or is of \"\n \t\t\t \"derived type with type-bound or FINAL procedures\",\n \t\t\t &a->expr->where);\n-\t      return false;\n+\t      ok = false;\n+\t      goto match;\n \t    }\n \t}\n \n@@ -3249,7 +3254,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t\t\t mpz_get_si (a->expr->ts.u.cl->length->value.integer),\n \t\t\t mpz_get_si (f->sym->ts.u.cl->length->value.integer),\n \t\t\t f->sym->name, &a->expr->where);\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n       if ((f->sym->attr.pointer || f->sym->attr.allocatable)\n@@ -3261,7 +3267,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t\t       \"pointer dummy argument %qs must have a deferred \"\n \t\t       \"length type parameter if and only if the dummy has one\",\n \t\t       &a->expr->where, f->sym->name);\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n       if (f->sym->ts.type == BT_CLASS)\n@@ -3295,7 +3302,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t\t\t       \"at %L\", f->sym->name, actual_size,\n \t\t\t       formal_size, &a->expr->where);\n \t    }\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n      skip_size_check:\n@@ -3312,7 +3320,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t  if (where)\n \t    gfc_error (\"Expected a procedure pointer for argument %qs at %L\",\n \t\t       f->sym->name, &a->expr->where);\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n       /* Satisfy F03:12.4.1.3 by ensuring that a procedure actual argument is\n@@ -3328,7 +3337,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t  if (where)\n \t    gfc_error (\"Expected a procedure for argument %qs at %L\",\n \t\t       f->sym->name, &a->expr->where);\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n       /* Class array variables and expressions store array info in a\n@@ -3392,7 +3402,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t  if (where)\n \t    gfc_error (\"Actual argument for %qs cannot be an assumed-size\"\n \t\t       \" array at %L\", f->sym->name, where);\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n       /* Diagnose F2018 C839 (TS29113 C535c).  Here the problem is\n@@ -3421,7 +3432,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t    gfc_error (\"Actual argument to assumed-rank INTENT(OUT) \"\n \t\t       \"dummy %qs at %L cannot be of unknown size\",\n \t\t       f->sym->name, where);\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n       if (a->expr->expr_type != EXPR_NULL\n@@ -3430,7 +3442,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t  if (where)\n \t    gfc_error (\"Actual argument for %qs must be a pointer at %L\",\n \t\t       f->sym->name, &a->expr->where);\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n       if (a->expr->expr_type != EXPR_NULL\n@@ -3440,7 +3453,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t  if (where)\n \t    gfc_error (\"Fortran 2008: Non-pointer actual argument at %L to \"\n \t\t       \"pointer dummy %qs\", &a->expr->where,f->sym->name);\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n \n@@ -3451,7 +3465,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t    gfc_error (\"Coindexed actual argument at %L to pointer \"\n \t\t       \"dummy %qs\",\n \t\t       &a->expr->where, f->sym->name);\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n       /* Fortran 2008, 12.5.2.5 (no constraint).  */\n@@ -3464,7 +3479,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t    gfc_error (\"Coindexed actual argument at %L to allocatable \"\n \t\t       \"dummy %qs requires INTENT(IN)\",\n \t\t       &a->expr->where, f->sym->name);\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n       /* Fortran 2008, C1237.  */\n@@ -3479,7 +3495,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t\t       \"%L requires that dummy %qs has neither \"\n \t\t       \"ASYNCHRONOUS nor VOLATILE\", &a->expr->where,\n \t\t       f->sym->name);\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n       /* Fortran 2008, 12.5.2.4 (no constraint).  */\n@@ -3492,7 +3509,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t    gfc_error (\"Coindexed actual argument at %L with allocatable \"\n \t\t       \"ultimate component to dummy %qs requires either VALUE \"\n \t\t       \"or INTENT(IN)\", &a->expr->where, f->sym->name);\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n      if (f->sym->ts.type == BT_CLASS\n@@ -3503,7 +3521,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t  if (where)\n \t    gfc_error (\"Actual CLASS array argument for %qs must be a full \"\n \t\t       \"array at %L\", f->sym->name, &a->expr->where);\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n \n@@ -3513,7 +3532,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t  if (where)\n \t    gfc_error (\"Actual argument for %qs must be ALLOCATABLE at %L\",\n \t\t       f->sym->name, &a->expr->where);\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n       /* Check intent = OUT/INOUT for definable actual argument.  */\n@@ -3529,9 +3549,15 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t\t&& CLASS_DATA (f->sym)->attr.class_pointer)\n \t       || (f->sym->ts.type != BT_CLASS && f->sym->attr.pointer))\n \t      && !gfc_check_vardef_context (a->expr, true, false, false, context))\n-\t    return false;\n+\t    {\n+\t      ok = false;\n+\t      goto match;\n+\t    }\n \t  if (!gfc_check_vardef_context (a->expr, false, false, false, context))\n-\t    return false;\n+\t    {\n+\t      ok = false;\n+\t      goto match;\n+\t    }\n \t}\n \n       if ((f->sym->attr.intent == INTENT_OUT\n@@ -3546,7 +3572,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t\t       \"INTENT(INOUT), VOLATILE or ASYNCHRONOUS attribute \"\n \t\t       \"of the dummy argument %qs\",\n \t\t       &a->expr->where, f->sym->name);\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n       /* C1232 (R1221) For an actual argument which is an array section or\n@@ -3564,7 +3591,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t\t       \"incompatible with the non-assumed-shape \"\n \t\t       \"dummy argument %qs due to VOLATILE attribute\",\n \t\t       &a->expr->where,f->sym->name);\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n       /* Find the last array_ref.  */\n@@ -3581,7 +3609,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t\t       \"incompatible with the non-assumed-shape \"\n \t\t       \"dummy argument %qs due to VOLATILE attribute\",\n \t\t       &a->expr->where, f->sym->name);\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n       /* C1233 (R1221) For an actual argument which is a pointer array, the\n@@ -3601,7 +3630,8 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t\t       \"an assumed-shape or pointer-array dummy \"\n \t\t       \"argument %qs due to VOLATILE attribute\",\n \t\t       &a->expr->where,f->sym->name);\n-\t  return false;\n+\t  ok = false;\n+\t  goto match;\n \t}\n \n     match:\n@@ -3611,6 +3641,10 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n       new_arg[i++] = a;\n     }\n \n+  /* Give up now if we saw any bad argument.  */\n+  if (!ok)\n+    return false;\n+\n   /* Make sure missing actual arguments are optional.  */\n   i = 0;\n   for (f = formal; f; f = f->next, i++)"}, {"sha": "54d2d33c7d5cc24bfd2148db8b3b57ea1bbfd95f", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e", "patch": "@@ -223,6 +223,7 @@ static bool\n do_ts29113_check (gfc_intrinsic_sym *specific, gfc_actual_arglist *arg)\n {\n   gfc_actual_arglist *a;\n+  bool ok = true;\n \n   for (a = arg; a; a = a->next)\n     {\n@@ -238,7 +239,7 @@ do_ts29113_check (gfc_intrinsic_sym *specific, gfc_actual_arglist *arg)\n \t  gfc_error (\"Variable with NO_ARG_CHECK attribute at %L is only \"\n \t\t     \"permitted as argument to the intrinsic functions \"\n \t\t     \"C_LOC and PRESENT\", &a->expr->where);\n-\t  return false;\n+\t  ok = false;\n \t}\n       else if (a->expr->ts.type == BT_ASSUMED\n \t       && specific->id != GFC_ISYM_LBOUND\n@@ -254,32 +255,32 @@ do_ts29113_check (gfc_intrinsic_sym *specific, gfc_actual_arglist *arg)\n \t  gfc_error (\"Assumed-type argument at %L is not permitted as actual\"\n \t\t     \" argument to the intrinsic %s\", &a->expr->where,\n \t\t     gfc_current_intrinsic);\n-\t  return false;\n+\t  ok = false;\n \t}\n       else if (a->expr->ts.type == BT_ASSUMED && a != arg)\n \t{\n \t  gfc_error (\"Assumed-type argument at %L is only permitted as \"\n \t\t     \"first actual argument to the intrinsic %s\",\n \t\t     &a->expr->where, gfc_current_intrinsic);\n-\t  return false;\n+\t  ok = false;\n \t}\n-      if (a->expr->rank == -1 && !specific->inquiry)\n+      else if (a->expr->rank == -1 && !specific->inquiry)\n \t{\n \t  gfc_error (\"Assumed-rank argument at %L is only permitted as actual \"\n \t\t     \"argument to intrinsic inquiry functions\",\n \t\t     &a->expr->where);\n-\t  return false;\n+\t  ok = false;\n \t}\n-      if (a->expr->rank == -1 && arg != a)\n+      else if (a->expr->rank == -1 && arg != a)\n \t{\n \t  gfc_error (\"Assumed-rank argument at %L is only permitted as first \"\n \t\t     \"actual argument to the intrinsic inquiry function %s\",\n \t\t     &a->expr->where, gfc_current_intrinsic);\n-\t  return false;\n+\t  ok = false;\n \t}\n     }\n \n-  return true;\n+  return ok;\n }\n \n "}, {"sha": "705d2326a29492741de6fca4bb8238ebd27f0446", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e", "patch": "@@ -4064,7 +4064,7 @@ resolve_operator (gfc_expr *e)\n     {\n     default:\n       if (!gfc_resolve_expr (e->value.op.op2))\n-\treturn false;\n+\tt = false;\n \n     /* Fall through.  */\n \n@@ -4091,6 +4091,9 @@ resolve_operator (gfc_expr *e)\n   op2 = e->value.op.op2;\n   if (op1 == NULL && op2 == NULL)\n     return false;\n+  /* Error out if op2 did not resolve. We already diagnosed op1.  */\n+  if (t == false)\n+    return false;\n \n   dual_locus_error = false;\n "}, {"sha": "51e11e9160a9b71d6b3d0597de935f896b62b9e0", "filename": "gcc/testsuite/gfortran.dg/bessel_3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_3.f90?ref=ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e", "patch": "@@ -9,10 +9,10 @@\n print *, BESSEL_J0(1.0) ! { dg-error \"has no IMPLICIT type\" })\n print *, BESSEL_J1(1.0) ! { dg-error \"has no IMPLICIT type\" }\n print *, BESSEL_JN(1,1.0) ! { dg-error \"has no IMPLICIT type|Type mismatch\" }\n-print *, BESSEL_JN(1,2,1.0) ! { dg-error \"has no IMPLICIT type|Type mismatch\" }\n+print *, BESSEL_JN(1,2,1.0) ! { dg-error \"has no IMPLICIT type|Type mismatch|More actual than formal\" }\n \n print *, BESSEL_Y0(1.0) ! { dg-error \"has no IMPLICIT type\" }\n print *, BESSEL_Y1(1.0) ! { dg-error \"has no IMPLICIT type\" }\n print *, BESSEL_YN(1,1.0) ! { dg-error \"has no IMPLICIT type|Type mismatch\" }\n-print *, BESSEL_YN(1,2,1.0) ! { dg-error \"has no IMPLICIT type|Type mismatch\" }\n+print *, BESSEL_YN(1,2,1.0) ! { dg-error \"has no IMPLICIT type|Type mismatch|More actual than formal\" }\n end"}, {"sha": "4f9f6c73d7d8b84a799c3e26bcd627c95cbcedae", "filename": "gcc/testsuite/gfortran.dg/c-interop/c407b-2.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407b-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407b-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407b-2.f90?ref=ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e", "patch": "@@ -78,11 +78,11 @@ subroutine s2 (x, y)\n   end select\n \n   ! relational operations\n-  if (x & ! { dg-error \"Assumed.type\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+  if (x & ! { dg-error \"Assumed.type\" \"pr101337\" }\n       .eq. y) then  ! { dg-error \"Assumed.type\" } \n     return\n   end if\n-  if (.not. (x & ! { dg-error \"Assumed.type\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+  if (.not. (x & ! { dg-error \"Assumed.type\" \"pr101337\" }\n              .ne. y)) then  ! { dg-error \"Assumed.type\" } \n     return\n   end if\n@@ -99,7 +99,7 @@ subroutine s2 (x, y)\n   ! arithmetic\n   i = x + 1  ! { dg-error \"Assumed.type\" } \n   i = -y  ! { dg-error \"Assumed.type\" } \n-  i = (x & ! { dg-error \"Assumed.type\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+  i = (x & ! { dg-error \"Assumed.type\" \"pr101337\" }\n        + y)  ! { dg-error \"Assumed.type\" } \n \n   ! computed go to\n@@ -131,19 +131,19 @@ subroutine s3 (x, y)\n   i = exponent (x)  ! { dg-error \"Assumed.type\" }\n \n   if (extends_type_of (x, &  ! { dg-error \"Assumed.type\" }\n-                       y)) then  ! { dg-error \"Assumed.type\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+                       y)) then  ! { dg-error \"Assumed.type\" \"pr101337\" }\n     return\n   end if\n \n   if (same_type_as (x, &  ! { dg-error \"Assumed.type\" }\n-                    y)) then  ! { dg-error \"Assumed.type\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+                    y)) then  ! { dg-error \"Assumed.type\" \"pr101337\" }\n     return\n   end if\n \n   i = storage_size (x)  ! { dg-error \"Assumed.type\" }\n \n   i = iand (x, &  ! { dg-error \"Assumed.type\" }\n-            y)    ! { dg-error \"Assumed.type\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+            y)    ! { dg-error \"Assumed.type\" \"pr101337\" }\n \n   i = kind (x)  ! { dg-error \"Assumed.type\" }\n "}, {"sha": "4d99f7fdb0e678678c555d82aa437efe4db371e8", "filename": "gcc/testsuite/gfortran.dg/c-interop/c535b-2.f90", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-2.f90?ref=ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e", "patch": "@@ -57,18 +57,18 @@ subroutine test_calls (x, y)\n   ! Make sure each invalid argument produces a diagnostic.\n   ! scalar dummies\n   call f (x, &  ! { dg-error \"(A|a)ssumed.rank\" }\n-          y)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+          y)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" } \n   ! assumed-rank dummies\n   call g (x, y)  ! OK\n   ! assumed-size dummies\n   call h (x, &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101334\" }\n-          y)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+          y)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n   ! assumed-shape dummies\n   call i (x, &  ! { dg-error \"(A|a)ssumed.rank\" }\n-          y)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+          y)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n  ! fixed-size array dummies\n   call j (x, &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101334\" }\n-          y)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+          y)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n end subroutine\n \n ! Check that you can't use an assumed-rank array variable in an array\n@@ -81,7 +81,7 @@ subroutine test_designators (x)\n \n   call f (x(1), 1)  ! { dg-error \"(A|a)ssumed.rank\" }\n   call g (x(1:3:1), &  ! { dg-error \"(A|a)ssumed.rank\" }\n-          x)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+          x)\n end subroutine\n \n ! Check that you can't use an assumed-rank array variable in elemental\n@@ -122,7 +122,7 @@ subroutine test_expressions (a, b, c, l, m, n, x, y, z, p, q, r, s, i, j)\n \n   z = x + y  ! OK\n   c &  ! { dg-error \"(A|a)ssumed.rank\" }\n-    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n     + b  ! { dg-error \"(A|a)ssumed.rank\" }\n   z = x + i  ! OK\n   c &  ! { dg-error \"(A|a)ssumed.rank\" }\n@@ -133,7 +133,7 @@ subroutine test_expressions (a, b, c, l, m, n, x, y, z, p, q, r, s, i, j)\n \n   z = x - y  ! OK\n   c &  ! { dg-error \"(A|a)ssumed.rank\" }\n-    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n     - b  ! { dg-error \"(A|a)ssumed.rank\" }\n   z = x - i  ! OK\n   c &  ! { dg-error \"(A|a)ssumed.rank\" }\n@@ -144,7 +144,7 @@ subroutine test_expressions (a, b, c, l, m, n, x, y, z, p, q, r, s, i, j)\n \n   z = x * y  ! OK\n   c &  ! { dg-error \"(A|a)ssumed.rank\" }\n-    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n     * b  ! { dg-error \"(A|a)ssumed.rank\" }\n   z = x * i  ! OK\n   c &  ! { dg-error \"(A|a)ssumed.rank\" }\n@@ -155,7 +155,7 @@ subroutine test_expressions (a, b, c, l, m, n, x, y, z, p, q, r, s, i, j)\n \n   z = x / y  ! OK\n   c &  ! { dg-error \"(A|a)ssumed.rank\" }\n-    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n     / b  ! { dg-error \"(A|a)ssumed.rank\" }\n   z = x / i  ! OK\n   c &  ! { dg-error \"(A|a)ssumed.rank\" }\n@@ -166,7 +166,7 @@ subroutine test_expressions (a, b, c, l, m, n, x, y, z, p, q, r, s, i, j)\n \n   z = x ** y  ! OK\n   c &  ! { dg-error \"(A|a)ssumed.rank\" }\n-    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n     ** b  ! { dg-error \"(A|a)ssumed.rank\" }\n   z = x ** i  ! OK\n   c &  ! { dg-error \"(A|a)ssumed.rank\" }\n@@ -179,7 +179,7 @@ subroutine test_expressions (a, b, c, l, m, n, x, y, z, p, q, r, s, i, j)\n \n   r = x .eq. y  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n-    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n     .eq. b  ! { dg-error \"(A|a)ssumed.rank\" }\n   r = x .eq. i  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n@@ -190,7 +190,7 @@ subroutine test_expressions (a, b, c, l, m, n, x, y, z, p, q, r, s, i, j)\n \n   r = x .ne. y  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n-    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n     .ne. b  ! { dg-error \"(A|a)ssumed.rank\" }\n   r = x .ne. i  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n@@ -201,7 +201,7 @@ subroutine test_expressions (a, b, c, l, m, n, x, y, z, p, q, r, s, i, j)\n \n   r = x .lt. y  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n-    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n     .lt. b  ! { dg-error \"(A|a)ssumed.rank\" }\n   r = x .lt. i  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n@@ -212,7 +212,7 @@ subroutine test_expressions (a, b, c, l, m, n, x, y, z, p, q, r, s, i, j)\n \n   r = x .le. y  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n-    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n     .le. b  ! { dg-error \"(A|a)ssumed.rank\" }\n   r = x .le. i  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n@@ -223,7 +223,7 @@ subroutine test_expressions (a, b, c, l, m, n, x, y, z, p, q, r, s, i, j)\n \n   r = x .gt. y  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n-    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n     .gt. b  ! { dg-error \"(A|a)ssumed.rank\" }\n   r = x .gt. i  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n@@ -234,7 +234,7 @@ subroutine test_expressions (a, b, c, l, m, n, x, y, z, p, q, r, s, i, j)\n \n   r = x .ge. y  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n-    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+    = a &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n     .ge. b  ! { dg-error \"(A|a)ssumed.rank\" }\n   r = x .ge. i  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n@@ -253,7 +253,7 @@ subroutine test_expressions (a, b, c, l, m, n, x, y, z, p, q, r, s, i, j)\n \n   r = p .and. q  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n-    = l &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+    = l &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n     .and. m  ! { dg-error \"(A|a)ssumed.rank\" }\n   r = p .and. j  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n@@ -264,7 +264,7 @@ subroutine test_expressions (a, b, c, l, m, n, x, y, z, p, q, r, s, i, j)\n \n   r = p .or. q  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n-    = l &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+    = l &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n     .or. m  ! { dg-error \"(A|a)ssumed.rank\" }\n   r = p .or. j  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n@@ -275,7 +275,7 @@ subroutine test_expressions (a, b, c, l, m, n, x, y, z, p, q, r, s, i, j)\n \n   r = p .eqv. q  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n-    = l &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+    = l &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n     .eqv. m  ! { dg-error \"(A|a)ssumed.rank\" }\n   r = p .eqv. j  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n@@ -286,7 +286,7 @@ subroutine test_expressions (a, b, c, l, m, n, x, y, z, p, q, r, s, i, j)\n \n   r = p .neqv. q  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n-    = l &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+    = l &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n     .neqv. m  ! { dg-error \"(A|a)ssumed.rank\" }\n   r = p .neqv. j  ! OK\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n@@ -320,7 +320,7 @@ subroutine test_intrinsics (i1, i2, r1, r2, c1, c2, l1, l2, s1, s2)\n   ! trig, hyperbolic, other math functions\n   r1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = atan2 (r1, &  ! { dg-error \"(A|a)ssumed.rank\" }\n-             r2)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+             r2)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n   r1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = atan (r2)  ! { dg-error \"(A|a)ssumed.rank\" }\n   c1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n@@ -335,7 +335,7 @@ subroutine test_intrinsics (i1, i2, r1, r2, c1, c2, l1, l2, s1, s2)\n   ! bit operations\n   l1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = blt (i1, &  ! { dg-error \"(A|a)ssumed.rank\" }\n-           i2)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+           i2)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n   l1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = btest (i1, 0)  ! { dg-error \"(A|a)ssumed.rank\" }\n   i1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n@@ -348,7 +348,7 @@ subroutine test_intrinsics (i1, i2, r1, r2, c1, c2, l1, l2, s1, s2)\n     = char (i1)  ! { dg-error \"(A|a)ssumed.rank\" }\n   c1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = cmplx (r1, &  ! { dg-error \"(A|a)ssumed.rank\" }\n-             r2)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+             r2)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n   i1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = floor (r1)  ! { dg-error \"(A|a)ssumed.rank\" }\n   r1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n@@ -357,29 +357,29 @@ subroutine test_intrinsics (i1, i2, r1, r2, c1, c2, l1, l2, s1, s2)\n   ! reductions\n   l = any (l2)  ! { dg-error \"(A|a)ssumed.rank\" }\n   r = dot_product (r1, &  ! { dg-error \"(A|a)ssumed.rank\" }\n-                   r2)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+                   r2)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n   i = iall (i2, &  ! { dg-error \"(A|a)ssumed.rank\" }\n-            l2)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+            l2)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n \n   ! string operations\n   s1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = adjustr (s2)  ! { dg-error \"(A|a)ssumed.rank\" }\n   i1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = index (c1, &  ! { dg-error \"(A|a)ssumed.rank\" }\n-             c2)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+             c2)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n \n   ! misc\n   i1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = cshift (i2, 4)  ! { dg-error \"(A|a)ssumed.rank\" }\n   i = findloc (r1, 0.0)  ! { dg-error \"(A|a)ssumed.rank\" }\n   r1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = matmul (r1, &  ! { dg-error \"(A|a)ssumed.rank\" }\n-              r2)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+              r2)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n   r1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = reshape (r2, [10, 3])  ! { dg-error \"(A|a)ssumed.rank\" }\n   i1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = sign (i1, &  ! { dg-error \"(A|a)ssumed.rank\" }\n-            i2)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n+            i2)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n   s1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = transpose (s2)  ! { dg-error \"(A|a)ssumed.rank\" }\n "}, {"sha": "93cd8a3deabb55d11341192bef7c0e3fa3c86dde", "filename": "gcc/testsuite/gfortran.dg/pr24823.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr24823.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr24823.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr24823.f?ref=ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e", "patch": "@@ -61,8 +61,8 @@ SUBROUTINE ZLATMR( M, N, DIST, ISEED, SYM, D, MODE, COND, DMAX,\n                   IF( ISYM.EQ.0 ) THEN\n                   END IF\n                END IF\n-               A( I-J+KUU+1, J ) = ZLATM2( M, N, I, J, KL, KU,\n-     $              DR, IPVTNG, IWORK, SPARSE )\n+               A( I-J+KUU+1, J ) = ZLATM2( M, N, I, J, KL, KU,  ! { dg-warning \"More actual than formal\" }\n+     $              DR, IPVTNG, IWORK, SPARSE )  ! { dg-warning \"Type mismatch\" }\n             END IF\n          END IF\n       END IF"}, {"sha": "ed28693964eca240151172f6eb20bb2df9756595", "filename": "gcc/testsuite/gfortran.dg/pr39937.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39937.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39937.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39937.f?ref=ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e", "patch": "@@ -20,7 +20,7 @@ SUBROUTINE DTREVC( SIDE, HOWMNY, SELECT, N, T, LDT, VL, LDVL, VR,\n           END IF\n           CALL DLALN2( .FALSE., 2, 2, SMIN, ONE,\n      $                            T( J-1, J-1 ), LDT, ONE, ONE,  ! { dg-warning \"Type mismatch\" }\n-     $                            XNORM, IERR )\n+     $                            XNORM, IERR )  ! { dg-warning \"Type mismatch\" }\n           CALL DAXPY( J-2, -X( 1, 1 ), T( 1, J-1 ), 1,\n      $                           WORK( 1+N ), 1 )\n           CALL DAXPY( J-2, -X( 2, 2 ), T( 1, J ), 1,"}, {"sha": "c0323102a0c7bb2a4baa11d1e0f4a2e9061023ea", "filename": "gcc/testsuite/gfortran.dg/pr41011.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr41011.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr41011.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr41011.f?ref=ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do compile }\n ! { dg-options \"-O3 -std=legacy\" }\n-      CALL UVSET(NX,NY,NZ,HVAR,ZET,NP,DZ,DKM,UM,VM,UG,VG,TM,DCDX, ! { dg-warning \"Rank mismatch\" }\n+      CALL UVSET(NX,NY,NZ,HVAR,ZET,NP,DZ,DKM,UM,VM,UG,VG,TM,DCDX, ! { dg-warning \"Rank mismatch|Invalid procedure argument\" }\n      *ITY,ISH,NSMT,F)\n          CALL DCTDX(NX,NY,NX1,NFILT,C(MLAG),DCDX(MLAG),HELP,HELPA,\n      *   HELP,HELPA,FY,FYC,SAVEY)\n@@ -18,6 +18,6 @@ SUBROUTINE UVSET(NX,NY,NZ,HVAR,ZET,NP,DZ,DKM,UM,VM,UG,VG,TM,\n      *WORK(*)\n       IF(IH.EQ.0) THEN\n          CALL PADEC(DKM,VM,HVAR,WORK(LWM),WORK(LWG), ! { dg-warning \"Rank mismatch\" }\n-     *   WORK(LF),NZ,WORK(LA),WORK(LB),WORK(LC),ITY)\n+     *   WORK(LF),NZ,WORK(LA),WORK(LB),WORK(LC),ITY) ! { dg-warning \"Type mismatch\" }\n       ENDIF\n       END"}, {"sha": "7752ecda08e4d53b6b3823bfe3706410d43d5327", "filename": "gcc/testsuite/gfortran.dg/pr61318.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr61318.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr61318.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr61318.f90?ref=ee11be7f2d788e6055ebed9746a8d8ac3cb04b8e", "patch": "@@ -18,5 +18,5 @@ end module gbl_interfaces\n program test\n   use gbl_message\n   use gbl_interfaces\n-  call gagout(seve%e,'Some string') ! { dg-error \"Type mismatch in argument\" }\n+  call gagout(seve%e,'Some string') ! { dg-error \"Type mismatch in argument|More actual than formal\" }\n end program test"}]}