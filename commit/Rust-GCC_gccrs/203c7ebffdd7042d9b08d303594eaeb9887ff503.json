{"sha": "203c7ebffdd7042d9b08d303594eaeb9887ff503", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAzYzdlYmZmZGQ3MDQyZDliMDhkMzAzNTk0ZWFlYjk4ODdmZjUwMw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-12-16T19:24:50Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-12-16T19:24:50Z"}, "message": "2014-12-15  Tobias Burnus  <burnus@net-b.de>\n\n        * lang.opt (fsecond-underscore, frecord-marker=8,\n        * frecord-marker=4,\n        frealloc-lhs, freal-8-real-16, freal-8-real-10, freal-8-real-4,\n        freal-4-real-16, freal-4-real-10, freal-4-real-8, fprotect-parens,\n        fstack-arrays, fmax-stack-var-size=, fmax-subrecord-length=,\n        ffrontend-optimize, ffree-line-length-, ffixed-line-length-,\n        finteger-4-integer-8, fdefault-real-8, fdefault-integer-8,\n        fdefault-double-8): Add Var() and Init().\n        * gfortran.h (gfc_option_t): Remove moved flags.\n        * options.c (gfc_init_options, gfc_handle_option): Ditto.\n        (gfc_post_options): Update for name change.\n        * decl.c (gfc_match_old_kind_spec, gfc_match_kind_spec): Handle\n        flag-name change.\n        * frontend-passes.c (gfc_run_passes): Ditto.\n        * module.c (use_iso_fortran_env_module): Ditto.\n        * primary.c (match_integer_constant, match_real_constant):\n        * Ditto.\n        * resolve.c (resolve_ordinary_assign): Ditto.\n        * scanner.c (gfc_next_char_literal, load_line): Ditto.\n        * trans-array.c (gfc_trans_allocate_array_storage,\n        gfc_conv_resolve_dependencies, gfc_trans_auto_array_allocation,\n        gfc_conv_ss_startstride): Ditto.\n        * trans-common.c (gfc_sym_mangled_common_id): Ditto.\n        * trans-decl.c (gfc_sym_mangled_function_id,\n        create_main_function): Ditto.\n        * trans-expr.c (gfc_conv_expr_op, gfc_conv_procedure_call,\n        arrayfunc_assign_needs_temporary, gfc_trans_arrayfunc_assign,\n        gfc_trans_assignment_1): Ditto.\n        * trans-stmt.c (gfc_trans_allocate): Ditto.\n        * trans-types.c (gfc_init_kinds): Ditto.\n\nFrom-SVN: r218790", "tree": {"sha": "a4dc2e881c78f7c7ab0768916f6c29c300f13996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4dc2e881c78f7c7ab0768916f6c29c300f13996"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/203c7ebffdd7042d9b08d303594eaeb9887ff503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/203c7ebffdd7042d9b08d303594eaeb9887ff503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/203c7ebffdd7042d9b08d303594eaeb9887ff503", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/203c7ebffdd7042d9b08d303594eaeb9887ff503/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a85804bf7b5aaf3288995fd6157af907c4d6ab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a85804bf7b5aaf3288995fd6157af907c4d6ab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a85804bf7b5aaf3288995fd6157af907c4d6ab1"}], "stats": {"total": 452, "additions": 170, "deletions": 282}, "files": [{"sha": "98c5c54c2c798a31719053d452195b9e58d8f442", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=203c7ebffdd7042d9b08d303594eaeb9887ff503", "patch": "@@ -1,3 +1,34 @@\n+2014-12-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* lang.opt (fsecond-underscore, frecord-marker=8, frecord-marker=4,\n+\tfrealloc-lhs, freal-8-real-16, freal-8-real-10, freal-8-real-4,\n+\tfreal-4-real-16, freal-4-real-10, freal-4-real-8, fprotect-parens,\n+\tfstack-arrays, fmax-stack-var-size=, fmax-subrecord-length=,\n+\tffrontend-optimize, ffree-line-length-, ffixed-line-length-,\n+\tfinteger-4-integer-8, fdefault-real-8, fdefault-integer-8,\n+\tfdefault-double-8): Add Var() and Init().\n+\t* gfortran.h (gfc_option_t): Remove moved flags.\n+\t* options.c (gfc_init_options, gfc_handle_option): Ditto.\n+\t(gfc_post_options): Update for name change.\n+\t* decl.c (gfc_match_old_kind_spec, gfc_match_kind_spec): Handle\n+\tflag-name change.\n+\t* frontend-passes.c (gfc_run_passes): Ditto.\n+\t* module.c (use_iso_fortran_env_module): Ditto.\n+\t* primary.c (match_integer_constant, match_real_constant): Ditto.\n+\t* resolve.c (resolve_ordinary_assign): Ditto.\n+\t* scanner.c (gfc_next_char_literal, load_line): Ditto.\n+\t* trans-array.c (gfc_trans_allocate_array_storage,\n+\tgfc_conv_resolve_dependencies, gfc_trans_auto_array_allocation,\n+\tgfc_conv_ss_startstride): Ditto.\n+\t* trans-common.c (gfc_sym_mangled_common_id): Ditto.\n+\t* trans-decl.c (gfc_sym_mangled_function_id,\n+\tcreate_main_function): Ditto.\n+\t* trans-expr.c (gfc_conv_expr_op, gfc_conv_procedure_call,\n+\tarrayfunc_assign_needs_temporary, gfc_trans_arrayfunc_assign,\n+\tgfc_trans_assignment_1): Ditto.\n+\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n+\t* trans-types.c (gfc_init_kinds): Ditto.\n+\n 2014-12-16  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/64244"}, {"sha": "fe3e60cce01e9c29ff1e01e7365a9e00c640925a", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=203c7ebffdd7042d9b08d303594eaeb9887ff503", "patch": "@@ -2140,28 +2140,28 @@ gfc_match_old_kind_spec (gfc_typespec *ts)\n \n     }\n \n-  if (ts->type == BT_INTEGER && ts->kind == 4 && gfc_option.flag_integer4_kind == 8)\n+  if (ts->type == BT_INTEGER && ts->kind == 4 && flag_integer4_kind == 8)\n     ts->kind = 8;\n \n   if (ts->type == BT_REAL || ts->type == BT_COMPLEX)\n     {\n       if (ts->kind == 4)\n \t{\n-\t  if (gfc_option.flag_real4_kind == 8)\n+\t  if (flag_real4_kind == 8)\n \t    ts->kind =  8;\n-\t  if (gfc_option.flag_real4_kind == 10)\n+\t  if (flag_real4_kind == 10)\n \t    ts->kind = 10;\n-\t  if (gfc_option.flag_real4_kind == 16)\n+\t  if (flag_real4_kind == 16)\n \t    ts->kind = 16;\n \t}\n \n       if (ts->kind == 8)\n \t{\n-\t  if (gfc_option.flag_real8_kind == 4)\n+\t  if (flag_real8_kind == 4)\n \t    ts->kind = 4;\n-\t  if (gfc_option.flag_real8_kind == 10)\n+\t  if (flag_real8_kind == 10)\n \t    ts->kind = 10;\n-\t  if (gfc_option.flag_real8_kind == 16)\n+\t  if (flag_real8_kind == 16)\n \t    ts->kind = 16;\n \t}\n     }\n@@ -2311,28 +2311,28 @@ gfc_match_kind_spec (gfc_typespec *ts, bool kind_expr_only)\n   if(m == MATCH_ERROR)\n      gfc_current_locus = where;\n \n-  if (ts->type == BT_INTEGER && ts->kind == 4 && gfc_option.flag_integer4_kind == 8)\n+  if (ts->type == BT_INTEGER && ts->kind == 4 && flag_integer4_kind == 8)\n     ts->kind =  8;\n \n   if (ts->type == BT_REAL || ts->type == BT_COMPLEX)\n     {\n       if (ts->kind == 4)\n \t{\n-\t  if (gfc_option.flag_real4_kind == 8)\n+\t  if (flag_real4_kind == 8)\n \t    ts->kind =  8;\n-\t  if (gfc_option.flag_real4_kind == 10)\n+\t  if (flag_real4_kind == 10)\n \t    ts->kind = 10;\n-\t  if (gfc_option.flag_real4_kind == 16)\n+\t  if (flag_real4_kind == 16)\n \t    ts->kind = 16;\n \t}\n \n       if (ts->kind == 8)\n \t{\n-\t  if (gfc_option.flag_real8_kind == 4)\n+\t  if (flag_real8_kind == 4)\n \t    ts->kind = 4;\n-\t  if (gfc_option.flag_real8_kind == 10)\n+\t  if (flag_real8_kind == 10)\n \t    ts->kind = 10;\n-\t  if (gfc_option.flag_real8_kind == 16)\n+\t  if (flag_real8_kind == 16)\n \t    ts->kind = 16;\n \t}\n     }"}, {"sha": "0e2c2088eafb7510ed8b95fa6df27211c58af135", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=203c7ebffdd7042d9b08d303594eaeb9887ff503", "patch": "@@ -104,7 +104,7 @@ gfc_run_passes (gfc_namespace *ns)\n   doloop_warn (ns);\n   doloop_list.release ();\n \n-  if (gfc_option.flag_frontend_optimize)\n+  if (flag_frontend_optimize)\n     {\n       optimize_namespace (ns);\n       optimize_reduction (ns);\n@@ -376,7 +376,7 @@ cfe_register_funcs (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n      temporary variable to hold the intermediate result, but only if\n      allocation on assignment is active.  */\n \n-  if ((*e)->rank > 0 && (*e)->shape == NULL && !gfc_option.flag_realloc_lhs)\n+  if ((*e)->rank > 0 && (*e)->shape == NULL && !flag_realloc_lhs)\n     return 0;\n   \n   /* Skip the test for pure functions if -faggressive-function-elimination"}, {"sha": "fb0585b35b1dd042c0dba071ec9c5ebef7b3ebd5", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=203c7ebffdd7042d9b08d303594eaeb9887ff503", "patch": "@@ -2426,16 +2426,6 @@ typedef struct\n {\n   char *module_dir;\n   gfc_source_form source_form;\n-  /* Maximum line lengths in fixed- and free-form source, respectively.\n-     When fixed_line_length or free_line_length are 0, the whole line is used,\n-     regardless of length.\n-\n-     If the user requests a fixed_line_length <7 then gfc_init_options()\n-     emits a fatal error.  */\n-  int fixed_line_length;\n-  int free_line_length;\n-  /* Maximum number of continuation lines in fixed- and free-form source,\n-     respectively.  */\n   int max_continue_fixed;\n   int max_continue_free;\n   int max_identifier_length;\n@@ -2445,17 +2435,9 @@ typedef struct\n   int max_errors;\n \n   int flag_all_intrinsics;\n-  int flag_default_double;\n-  int flag_default_integer;\n-  int flag_default_real;\n-  int flag_integer4_kind;\n-  int flag_real4_kind;\n-  int flag_real8_kind;\n   int flag_dollar_ok;\n   int flag_underscoring;\n-  int flag_second_underscore;\n   int flag_implicit_none;\n-  int flag_max_stack_var_size;\n   int flag_max_array_constructor;\n   int flag_range_check;\n   int flag_pack_derived;\n@@ -2473,21 +2455,16 @@ typedef struct\n   int gfc_flag_openmp;\n   int gfc_flag_openmp_simd;\n   int flag_sign_zero;\n-  int flag_stack_arrays;\n   int flag_module_private;\n   int flag_recursive;\n-  int flag_init_local_zero;\n   int flag_init_integer;\n   int flag_init_integer_value;\n   int flag_init_real;\n   int flag_init_logical;\n   int flag_init_character;\n   char flag_init_character_value;\n   int flag_align_commons;\n-  int flag_protect_parens;\n-  int flag_realloc_lhs;\n   int flag_aggressive_function_elimination;\n-  int flag_frontend_optimize;\n \n   int fpe;\n   int fpe_summary;\n@@ -2497,8 +2474,6 @@ typedef struct\n   int warn_std;\n   int allow_std;\n   int convert;\n-  int record_marker;\n-  int max_subrecord_length;\n }\n gfc_option_t;\n "}, {"sha": "78b3d590877a3a2d32df94a47c68c75191e58efc", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=203c7ebffdd7042d9b08d303594eaeb9887ff503", "patch": "@@ -410,15 +410,15 @@ Fortran RejectNegative\n Treat lines with 'D' in column one as comments\n \n fdefault-double-8\n-Fortran\n+Fortran Var(flag_default_double)\n Set the default double precision kind to an 8 byte wide type\n \n fdefault-integer-8\n-Fortran\n+Fortran Var(flag_default_integer)\n Set the default integer kind to an 8 byte wide type\n \n fdefault-real-8\n-Fortran\n+Fortran Var(flag_default_real)\n Set the default real kind to an 8 byte wide type\n \n fdollar-ok\n@@ -454,7 +454,7 @@ Fortran RejectNegative\n Assume that the source file is fixed form\n \n finteger-4-integer-8\n-Fortran RejectNegative\n+Fortran RejectNegative Var(flag_integer4_kind,8)\n Interpret any INTEGER(4) as an INTEGER(8)\n \n fintrinsic-modules-path\n@@ -466,11 +466,11 @@ Fortran RejectNegative Joined\n Specify where to find the compiled intrinsic modules\n \n ffixed-line-length-none\n-Fortran RejectNegative\n+Fortran RejectNegative Var(flag_fixed_line_length,0)\n Allow arbitrary character line width in fixed mode\n \n ffixed-line-length-\n-Fortran RejectNegative Joined UInteger\n+Fortran RejectNegative Joined UInteger Var(flag_fixed_line_length) Init(72)\n -ffixed-line-length-<n>\tUse n as character line width in fixed mode\n \n ffpe-trap=\n@@ -486,15 +486,15 @@ Fortran RejectNegative\n Assume that the source file is free form\n \n ffree-line-length-none\n-Fortran RejectNegative\n+Fortran RejectNegative Var(flag_free_line_length,0)\n Allow arbitrary character line width in free mode\n \n ffree-line-length-\n-Fortran RejectNegative Joined UInteger\n+Fortran RejectNegative Joined UInteger Var(flag_free_line_length) Init(132)\n -ffree-line-length-<n>\tUse n as character line width in free mode\n \n ffrontend-optimize\n-Fortran\n+Fortran Var(flag_frontend_optimize) Init(-1)\n Enable front end optimization\n \n fimplicit-none\n@@ -530,15 +530,15 @@ Fortran RejectNegative Joined UInteger\n -fmax-identifier-length=<n>\tMaximum identifier length\n \n fmax-subrecord-length=\n-Fortran RejectNegative Joined UInteger\n+Fortran RejectNegative Joined UInteger Var(flag_max_subrecord_length)\n -fmax-subrecord-length=<n>\tMaximum length for subrecords\n \n fmax-stack-var-size=\n-Fortran RejectNegative Joined UInteger\n+Fortran RejectNegative Joined UInteger Var(flag_max_stack_var_size) Init(-2)\n -fmax-stack-var-size=<n>\tSize in bytes of the largest array that will be put on the stack\n \n fstack-arrays\n-Fortran\n+Fortran Var(flag_stack_arrays) Init(-1)\n Put all local arrays on stack.\n \n fmodule-private\n@@ -562,47 +562,47 @@ Fortran\n ; Documented in C\n \n fprotect-parens\n-Fortran\n+Fortran Var(flag_protect_parens) Init(-1)\n Protect parentheses in expressions\n \n frange-check\n Fortran\n Enable range checking during compilation\n \n freal-4-real-8\n-Fortran RejectNegative\n+Fortran RejectNegative Var(flag_real4_kind,8)\n Interpret any REAL(4) as a REAL(8)\n \n freal-4-real-10\n-Fortran RejectNegative\n+Fortran RejectNegative Var(flag_real4_kind,10)\n Interpret any REAL(4) as a REAL(10)\n \n freal-4-real-16\n-Fortran RejectNegative\n+Fortran RejectNegative Var(flag_real4_kind,16)\n Interpret any REAL(4) as a REAL(16)\n \n freal-8-real-4\n-Fortran RejectNegative\n+Fortran RejectNegative Var(flag_real8_kind,4)\n Interpret any REAL(8) as a REAL(4)\n \n freal-8-real-10\n-Fortran RejectNegative\n+Fortran RejectNegative Var(flag_real8_kind,10)\n Interpret any REAL(8) as a REAL(10)\n \n freal-8-real-16\n-Fortran RejectNegative\n+Fortran RejectNegative Var(flag_real8_kind,16)\n Interpret any REAL(8) as a REAL(16)\n \n frealloc-lhs\n-Fortran\n+Fortran Var(flag_realloc_lhs) Init(-1)\n Reallocate the LHS in assignments\n \n frecord-marker=4\n-Fortran RejectNegative\n+Fortran RejectNegative Var(flag_record_marker,4)\n Use a 4-byte record marker for unformatted files\n \n frecord-marker=8\n-Fortran RejectNegative\n+Fortran RejectNegative Var(flag_record_marker,8)\n Use an 8-byte record marker for unformatted files\n \n frecursive\n@@ -622,7 +622,7 @@ Fortran RejectNegative JoinedOrMissing\n -fcheck=[...]\tSpecify which runtime checks are to be performed\n \n fsecond-underscore\n-Fortran\n+Fortran Var(flag_second_underscore) Init(-1)\n Append a second underscore if the name already contains an underscore\n \n fshort-enums"}, {"sha": "a3ec1a1e3cfaf89df6367b45c8f713ea69e21710", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=203c7ebffdd7042d9b08d303594eaeb9887ff503", "patch": "@@ -6597,13 +6597,13 @@ use_iso_fortran_env_module (void)\n \t\t\t\t   \"standard\", symbol[i].name, &u->where))\n \t        continue;\n \n-\t      if ((gfc_option.flag_default_integer || gfc_option.flag_default_real)\n+\t      if ((flag_default_integer || flag_default_real)\n \t\t  && symbol[i].id == ISOFORTRANENV_NUMERIC_STORAGE_SIZE)\n \t\tgfc_warning_now (\"Use of the NUMERIC_STORAGE_SIZE named \"\n \t\t\t\t \"constant from intrinsic module \"\n \t\t\t\t \"ISO_FORTRAN_ENV at %L is incompatible with \"\n \t\t\t\t \"option %qs\", &u->where,\n-\t\t\t\t gfc_option.flag_default_integer\n+\t\t\t\t flag_default_integer\n \t\t\t\t   ? \"-fdefault-integer-8\"\n \t\t\t\t   : \"-fdefault-real-8\");\n \t      switch (symbol[i].id)\n@@ -6664,12 +6664,12 @@ use_iso_fortran_env_module (void)\n \t  if ((gfc_option.allow_std & symbol[i].standard) == 0)\n \t    continue;\n \n-\t  if ((gfc_option.flag_default_integer || gfc_option.flag_default_real)\n+\t  if ((flag_default_integer || flag_default_real)\n \t      && symbol[i].id == ISOFORTRANENV_NUMERIC_STORAGE_SIZE)\n \t    gfc_warning_now (\"Use of the NUMERIC_STORAGE_SIZE named constant \"\n \t\t\t     \"from intrinsic module ISO_FORTRAN_ENV at %C is \"\n \t\t\t     \"incompatible with option %s\",\n-\t\t\t     gfc_option.flag_default_integer\n+\t\t\t     flag_default_integer\n \t\t\t\t? \"-fdefault-integer-8\" : \"-fdefault-real-8\");\n \n \t  switch (symbol[i].id)"}, {"sha": "5a1be120da054b0d1e01d74c221ec9b5976fa8aa", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 35, "deletions": 146, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=203c7ebffdd7042d9b08d303594eaeb9887ff503", "patch": "@@ -81,37 +81,22 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_source_file = NULL;\n   gfc_option.module_dir = NULL;\n   gfc_option.source_form = FORM_UNKNOWN;\n-  gfc_option.fixed_line_length = 72;\n-  gfc_option.free_line_length = 132;\n   gfc_option.max_continue_fixed = 255;\n   gfc_option.max_continue_free = 255;\n   gfc_option.max_identifier_length = GFC_MAX_SYMBOL_LEN;\n-  gfc_option.max_subrecord_length = 0;\n   gfc_option.flag_max_array_constructor = 65535;\n   gfc_option.convert = GFC_CONVERT_NATIVE;\n-  gfc_option.record_marker = 0;\n   gfc_option.dump_fortran_original = 0;\n   gfc_option.dump_fortran_optimized = 0;\n \n   gfc_option.max_errors = 25;\n \n   gfc_option.flag_all_intrinsics = 0;\n-  gfc_option.flag_default_double = 0;\n-  gfc_option.flag_default_integer = 0;\n-  gfc_option.flag_default_real = 0;\n-  gfc_option.flag_integer4_kind = 0;\n-  gfc_option.flag_real4_kind = 0;\n-  gfc_option.flag_real8_kind = 0;\n   gfc_option.flag_dollar_ok = 0;\n   gfc_option.flag_underscoring = 1;\n   gfc_option.flag_f2c = 0;\n-  gfc_option.flag_second_underscore = -1;\n   gfc_option.flag_implicit_none = 0;\n \n-  /* Default value of flag_max_stack_var_size is set in gfc_post_options.  */\n-  gfc_option.flag_max_stack_var_size = -2;\n-  gfc_option.flag_stack_arrays = -1;\n-\n   gfc_option.flag_range_check = 1;\n   gfc_option.flag_pack_derived = 0;\n   gfc_option.flag_repack_arrays = 0;\n@@ -135,10 +120,7 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_option.flag_init_character = GFC_INIT_CHARACTER_OFF;\n   gfc_option.flag_init_character_value = (char)0;\n   gfc_option.flag_align_commons = 1;\n-  gfc_option.flag_protect_parens = -1;\n-  gfc_option.flag_realloc_lhs = -1;\n   gfc_option.flag_aggressive_function_elimination = 0;\n-  gfc_option.flag_frontend_optimize = -1;\n   \n   gfc_option.fpe = 0;\n   /* All except GFC_FPE_INEXACT.  */\n@@ -259,20 +241,20 @@ gfc_post_options (const char **pfilename)\n   if (flag_associative_math == -1)\n     flag_associative_math = (!flag_trapping_math && !flag_signed_zeros);\n \n-  if (gfc_option.flag_protect_parens == -1)\n-    gfc_option.flag_protect_parens = !optimize_fast;\n+  if (flag_protect_parens == -1)\n+    flag_protect_parens = !optimize_fast;\n \n-  if (gfc_option.flag_stack_arrays == -1)\n-    gfc_option.flag_stack_arrays = optimize_fast;\n+  if (flag_stack_arrays == -1)\n+    flag_stack_arrays = optimize_fast;\n \n   /* By default, disable (re)allocation during assignment for -std=f95,\n      and enable it for F2003/F2008/GNU/Legacy.  */\n-  if (gfc_option.flag_realloc_lhs == -1)\n+  if (flag_realloc_lhs == -1)\n     {\n       if (gfc_option.allow_std & GFC_STD_F2003)\n-\tgfc_option.flag_realloc_lhs = 1;\n+\tflag_realloc_lhs = 1;\n       else\n-\tgfc_option.flag_realloc_lhs = 0;\n+\tflag_realloc_lhs = 0;\n     }\n \n   /* -fbounds-check is equivalent to -fcheck=bounds */\n@@ -364,53 +346,60 @@ gfc_post_options (const char **pfilename)\n   /* If the user didn't explicitly specify -f(no)-second-underscore we\n      use it if we're trying to be compatible with f2c, and not\n      otherwise.  */\n-  if (gfc_option.flag_second_underscore == -1)\n-    gfc_option.flag_second_underscore = gfc_option.flag_f2c;\n+  if (flag_second_underscore == -1)\n+    flag_second_underscore = gfc_option.flag_f2c;\n \n-  if (!gfc_option.flag_automatic && gfc_option.flag_max_stack_var_size != -2\n-      && gfc_option.flag_max_stack_var_size != 0)\n+  if (!gfc_option.flag_automatic && flag_max_stack_var_size != -2\n+      && flag_max_stack_var_size != 0)\n     gfc_warning_now (\"Flag %<-fno-automatic%> overwrites %<-fmax-stack-var-size=%d%>\",\n-\t\t       gfc_option.flag_max_stack_var_size);\n+\t\t     flag_max_stack_var_size);\n   else if (!gfc_option.flag_automatic && gfc_option.flag_recursive)\n     gfc_warning_now (\"Flag %<-fno-automatic%> overwrites %<-frecursive%>\");\n   else if (!gfc_option.flag_automatic && gfc_option.gfc_flag_openmp)\n     gfc_warning_now (\"Flag %<-fno-automatic%> overwrites %<-frecursive%> implied by \"\n-\t\t       \"%<-fopenmp%>\");\n-  else if (gfc_option.flag_max_stack_var_size != -2\n-\t   && gfc_option.flag_recursive)\n+\t\t     \"%<-fopenmp%>\");\n+  else if (flag_max_stack_var_size != -2 && gfc_option.flag_recursive)\n     gfc_warning_now (\"Flag %<-frecursive%> overwrites %<-fmax-stack-var-size=%d%>\",\n-\t\t       gfc_option.flag_max_stack_var_size);\n-  else if (gfc_option.flag_max_stack_var_size != -2\n-\t   && gfc_option.gfc_flag_openmp)\n+\t\t     flag_max_stack_var_size);\n+  else if (flag_max_stack_var_size != -2 && gfc_option.gfc_flag_openmp)\n     gfc_warning_now (\"Flag %<-fmax-stack-var-size=%d%> overwrites %<-frecursive%> \"\n-\t\t       \"implied by %<-fopenmp%>\", \n-\t\t     gfc_option.flag_max_stack_var_size);\n+\t\t     \"implied by %<-fopenmp%>\", flag_max_stack_var_size);\n \n   /* Implement -frecursive as -fmax-stack-var-size=-1.  */\n   if (gfc_option.flag_recursive)\n-    gfc_option.flag_max_stack_var_size = -1;\n+    flag_max_stack_var_size = -1;\n \n   /* Implied -frecursive; implemented as -fmax-stack-var-size=-1.  */\n-  if (gfc_option.flag_max_stack_var_size == -2 && gfc_option.gfc_flag_openmp\n+  if (flag_max_stack_var_size == -2 && gfc_option.gfc_flag_openmp\n       && gfc_option.flag_automatic)\n     {\n       gfc_option.flag_recursive = 1;\n-      gfc_option.flag_max_stack_var_size = -1;\n+      flag_max_stack_var_size = -1;\n     }\n \n   /* Set default.  */\n-  if (gfc_option.flag_max_stack_var_size == -2)\n-    gfc_option.flag_max_stack_var_size = 32768;\n+  if (flag_max_stack_var_size == -2)\n+    flag_max_stack_var_size = 32768;\n \n   /* Implement -fno-automatic as -fmax-stack-var-size=0.  */\n   if (!gfc_option.flag_automatic)\n-    gfc_option.flag_max_stack_var_size = 0;\n+    flag_max_stack_var_size = 0;\n   \n   /* Optimization implies front end optimization, unless the user\n      specified it directly.  */\n \n-  if (gfc_option.flag_frontend_optimize == -1)\n-    gfc_option.flag_frontend_optimize = optimize;\n+  if (flag_frontend_optimize == -1)\n+    flag_frontend_optimize = optimize;\n+\n+  if (flag_fixed_line_length != 0 && flag_fixed_line_length < 7)\n+    gfc_fatal_error (\"Fixed line length must be at least seven\");\n+\n+  if (flag_free_line_length != 0 && flag_free_line_length < 4)\n+    gfc_fatal_error (\"Free line length must be at least three\");\n+\n+  if (flag_max_subrecord_length > MAX_SUBRECORD_LENGTH)\n+    gfc_fatal_error (\"Maximum subrecord length cannot exceed %d\",\n+\t\t     MAX_SUBRECORD_LENGTH);\n \n   gfc_cpp_post_options ();\n \n@@ -643,16 +632,6 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.source_form = FORM_FIXED;\n       break;\n \n-    case OPT_ffixed_line_length_none:\n-      gfc_option.fixed_line_length = 0;\n-      break;\n-\n-    case OPT_ffixed_line_length_:\n-      if (value != 0 && value < 7)\n-\tgfc_fatal_error (\"Fixed line length must be at least seven\");\n-      gfc_option.fixed_line_length = value;\n-      break;\n-\n     case OPT_ffree_form:\n       gfc_option.source_form = FORM_FREE;\n       break;\n@@ -665,24 +644,10 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.gfc_flag_openmp_simd = value;\n       break;\n \n-    case OPT_ffree_line_length_none:\n-      gfc_option.free_line_length = 0;\n-      break;\n-\n-    case OPT_ffree_line_length_:\n-      if (value != 0 && value < 4)\n-\tgfc_fatal_error (\"Free line length must be at least three\");\n-      gfc_option.free_line_length = value;\n-      break;\n-\n     case OPT_funderscoring:\n       gfc_option.flag_underscoring = value;\n       break;\n \n-    case OPT_fsecond_underscore:\n-      gfc_option.flag_second_underscore = value;\n-      break;\n-\n     case OPT_static_libgfortran:\n #ifndef HAVE_LD_STATIC_DYNAMIC\n       gfc_fatal_error (\"%<-static-libgfortran%> is not supported in this \"\n@@ -710,14 +675,6 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.flag_max_array_constructor = value > 65535 ? value : 65535;\n       break;\n \n-    case OPT_fmax_stack_var_size_:\n-      gfc_option.flag_max_stack_var_size = value;\n-      break;\n-\n-    case OPT_fstack_arrays:\n-      gfc_option.flag_stack_arrays = value;\n-      break;\n-\n     case OPT_fmodule_private:\n       gfc_option.flag_module_private = value;\n       break;\n@@ -745,46 +702,6 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.max_identifier_length = value;\n       break;\n \n-    case OPT_fdefault_integer_8:\n-      gfc_option.flag_default_integer = value;\n-      break;\n-\n-    case OPT_fdefault_real_8:\n-      gfc_option.flag_default_real = value;\n-      break;\n-\n-    case OPT_fdefault_double_8:\n-      gfc_option.flag_default_double = value;\n-      break;\n-\n-    case OPT_finteger_4_integer_8:\n-      gfc_option.flag_integer4_kind = 8;\n-      break;\n-\n-    case OPT_freal_4_real_8:\n-      gfc_option.flag_real4_kind = 8;\n-      break;\n-\n-    case OPT_freal_4_real_10:\n-      gfc_option.flag_real4_kind = 10;\n-      break;\n-\n-    case OPT_freal_4_real_16:\n-      gfc_option.flag_real4_kind = 16;\n-      break;\n-\n-    case OPT_freal_8_real_4:\n-      gfc_option.flag_real8_kind = 4;\n-      break;\n-\n-    case OPT_freal_8_real_10:\n-      gfc_option.flag_real8_kind = 10;\n-      break;\n-\n-    case OPT_freal_8_real_16:\n-      gfc_option.flag_real8_kind = 16;\n-      break;\n-\n     case OPT_finit_local_zero:\n       gfc_option.flag_init_integer = GFC_INIT_INTEGER_ON;\n       gfc_option.flag_init_integer_value = 0;\n@@ -924,22 +841,6 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.convert = GFC_CONVERT_SWAP;\n       break;\n \n-    case OPT_frecord_marker_4:\n-      gfc_option.record_marker = 4;\n-      break;\n-\n-    case OPT_frecord_marker_8:\n-      gfc_option.record_marker = 8;\n-      break;\n-\n-    case OPT_fmax_subrecord_length_:\n-      if (value > MAX_SUBRECORD_LENGTH)\n-\tgfc_fatal_error (\"Maximum subrecord length cannot exceed %d\",\n-\t\t\t MAX_SUBRECORD_LENGTH);\n-\n-      gfc_option.max_subrecord_length = value;\n-      break;\n-\n     case OPT_frecursive:\n       gfc_option.flag_recursive = value;\n       break;\n@@ -952,18 +853,6 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.flag_aggressive_function_elimination = value;\n       break;\n \n-    case OPT_ffrontend_optimize:\n-      gfc_option.flag_frontend_optimize = value;\n-      break;\n-\n-    case OPT_fprotect_parens:\n-      gfc_option.flag_protect_parens = value;\n-      break;\n-\n-    case OPT_frealloc_lhs:\n-      gfc_option.flag_realloc_lhs = value;\n-      break;\n-\n     case OPT_fcheck_:\n       gfc_handle_runtime_check_option (arg);\n       break;"}, {"sha": "337f5f67b8824690c65f7ad138b56dd09ae393a0", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=203c7ebffdd7042d9b08d303594eaeb9887ff503", "patch": "@@ -224,7 +224,7 @@ match_integer_constant (gfc_expr **result, int signflag)\n   if (kind == -1)\n     return MATCH_ERROR;\n \n-  if (kind == 4 && gfc_option.flag_integer4_kind == 8)\n+  if (kind == 4 && flag_integer4_kind == 8)\n     kind = 8;\n \n   if (gfc_validate_kind (BT_INTEGER, kind, true) < 0)\n@@ -639,21 +639,21 @@ match_real_constant (gfc_expr **result, int signflag)\n \n       if (kind == 4)\n \t{\n-\t  if (gfc_option.flag_real4_kind == 8)\n+\t  if (flag_real4_kind == 8)\n \t    kind = 8;\n-\t  if (gfc_option.flag_real4_kind == 10)\n+\t  if (flag_real4_kind == 10)\n \t    kind = 10;\n-\t  if (gfc_option.flag_real4_kind == 16)\n+\t  if (flag_real4_kind == 16)\n \t    kind = 16;\n \t}\n \n       if (kind == 8)\n \t{\n-\t  if (gfc_option.flag_real8_kind == 4)\n+\t  if (flag_real8_kind == 4)\n \t    kind = 4;\n-\t  if (gfc_option.flag_real8_kind == 10)\n+\t  if (flag_real8_kind == 10)\n \t    kind = 10;\n-\t  if (gfc_option.flag_real8_kind == 16)\n+\t  if (flag_real8_kind == 16)\n \t    kind = 16;\n \t}\n       break;\n@@ -688,21 +688,21 @@ match_real_constant (gfc_expr **result, int signflag)\n \n       if (kind == 4)\n \t{\n-\t  if (gfc_option.flag_real4_kind == 8)\n+\t  if (flag_real4_kind == 8)\n \t    kind = 8;\n-\t  if (gfc_option.flag_real4_kind == 10)\n+\t  if (flag_real4_kind == 10)\n \t    kind = 10;\n-\t  if (gfc_option.flag_real4_kind == 16)\n+\t  if (flag_real4_kind == 16)\n \t    kind = 16;\n \t}\n \n       if (kind == 8)\n \t{\n-\t  if (gfc_option.flag_real8_kind == 4)\n+\t  if (flag_real8_kind == 4)\n \t    kind = 4;\n-\t  if (gfc_option.flag_real8_kind == 10)\n+\t  if (flag_real8_kind == 10)\n \t    kind = 10;\n-\t  if (gfc_option.flag_real8_kind == 16)\n+\t  if (flag_real8_kind == 16)\n \t    kind = 16;\n \t}\n "}, {"sha": "ee48a6a06cc1c1ddaa758a9cdee38a5ec9cf2af4", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=203c7ebffdd7042d9b08d303594eaeb9887ff503", "patch": "@@ -9356,7 +9356,7 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n       if (!gfc_notify_std (GFC_STD_F2008, \"Assignment to an allocatable \"\n \t\t\t   \"polymorphic variable at %L\", &lhs->where))\n \treturn false;\n-      if (!gfc_option.flag_realloc_lhs)\n+      if (!flag_realloc_lhs)\n \t{\n \t  gfc_error (\"Assignment to an allocatable polymorphic variable at %L \"\n \t\t     \"requires %<-frealloc-lhs%>\", &lhs->where);\n@@ -10781,7 +10781,7 @@ build_default_init_expr (gfc_symbol *sym)\n \t  init_expr = NULL;\n \t}\n       if (!init_expr && gfc_option.flag_init_character == GFC_INIT_CHARACTER_ON\n-\t  && sym->ts.u.cl->length && gfc_option.flag_max_stack_var_size != 0)\n+\t  && sym->ts.u.cl->length && flag_max_stack_var_size != 0)\n \t{\n \t  gfc_actual_arglist *arg;\n \t  init_expr = gfc_get_expr ();\n@@ -10831,7 +10831,7 @@ apply_default_init_local (gfc_symbol *sym)\n      are stack allocated even with -fno-automatic; we have also to exclude\n      result variable, which are also nonstatic.  */\n   if (sym->attr.save || sym->ns->save_all\n-      || (gfc_option.flag_max_stack_var_size == 0 && !sym->attr.result\n+      || (flag_max_stack_var_size == 0 && !sym->attr.result\n \t  && !sym->ns->proc_name->attr.recursive\n \t  && (!sym->attr.dimension || !is_non_constant_shape_array (sym))))\n     {"}, {"sha": "7a9f62695aa32775ef7965fb9f3ae715d5fa54a3", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=203c7ebffdd7042d9b08d303594eaeb9887ff503", "patch": "@@ -1051,7 +1051,7 @@ gfc_next_char_literal (gfc_instring in_string)\n       if (warn_line_truncation && gfc_current_locus.lb != NULL\n \t  && gfc_current_locus.lb->truncated)\n \t{\n-\t  int maxlen = gfc_option.free_line_length;\n+\t  int maxlen = flag_free_line_length;\n \t  gfc_char_t *current_nextc = gfc_current_locus.nextc;\n \n \t  gfc_current_locus.lb->truncated = 0;\n@@ -1434,9 +1434,9 @@ load_line (FILE *input, gfc_char_t **pbuf, int *pbuflen, const int *first_char)\n \n   /* Determine the maximum allowed line length.  */\n   if (gfc_current_form == FORM_FREE)\n-    maxlen = gfc_option.free_line_length;\n+    maxlen = flag_free_line_length;\n   else if (gfc_current_form == FORM_FIXED)\n-    maxlen = gfc_option.fixed_line_length;\n+    maxlen = flag_fixed_line_length;\n   else\n     maxlen = 72;\n \n@@ -1610,7 +1610,7 @@ load_line (FILE *input, gfc_char_t **pbuf, int *pbuflen, const int *first_char)\n \n   /* Pad lines to the selected line length in fixed form.  */\n   if (gfc_current_form == FORM_FIXED\n-      && gfc_option.fixed_line_length != 0\n+      && flag_fixed_line_length != 0\n       && !preprocessor_flag\n       && c != EOF)\n     {"}, {"sha": "d637b5b6a3c457dd688ee536a0d529c224ce7337", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=203c7ebffdd7042d9b08d303594eaeb9887ff503", "patch": "@@ -830,7 +830,7 @@ gfc_trans_allocate_array_storage (stmtblock_t * pre, stmtblock_t * post,\n     {\n       /* Allocate the temporary.  */\n       onstack = !dynamic && initial == NULL_TREE\n-\t\t\t && (gfc_option.flag_stack_arrays\n+\t\t\t && (flag_stack_arrays\n \t\t\t     || gfc_can_put_var_on_stack (size));\n \n       if (onstack)\n@@ -3950,7 +3950,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t    continue;\n \n \t  /* Catch allocatable lhs in f2003.  */\n-\t  if (gfc_option.flag_realloc_lhs && ss->is_alloc_lhs)\n+\t  if (flag_realloc_lhs && ss->is_alloc_lhs)\n \t    continue;\n \n \t  expr = ss_info->expr;\n@@ -4349,7 +4349,7 @@ gfc_conv_resolve_dependencies (gfc_loopinfo * loop, gfc_ss * dest,\n \n       if (ss->info->type != GFC_SS_SECTION)\n \t{\n-\t  if (gfc_option.flag_realloc_lhs\n+\t  if (flag_realloc_lhs\n \t      && dest_expr != ss_expr\n \t      && gfc_is_reallocatable_lhs (dest_expr)\n \t      && ss_expr->rank)\n@@ -5701,7 +5701,7 @@ gfc_trans_auto_array_allocation (tree decl, gfc_symbol * sym,\n       return;\n     }\n \n-  if (gfc_option.flag_stack_arrays)\n+  if (flag_stack_arrays)\n     {\n       gcc_assert (TREE_CODE (TREE_TYPE (decl)) == POINTER_TYPE);\n       space = build_decl (sym->declared_at.lb->location,"}, {"sha": "3043c61dd883c925d2c7ccf1d376f242dec229cc", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=203c7ebffdd7042d9b08d303594eaeb9887ff503", "patch": "@@ -257,7 +257,7 @@ gfc_sym_mangled_common_id (gfc_common_head *com)\n   if (gfc_option.flag_underscoring)\n     {\n       has_underscore = strchr (name, '_') != 0;\n-      if (gfc_option.flag_second_underscore && has_underscore)\n+      if (flag_second_underscore && has_underscore)\n         snprintf (mangled_name, sizeof mangled_name, \"%s__\", name);\n       else\n         snprintf (mangled_name, sizeof mangled_name, \"%s_\", name);"}, {"sha": "e3895acc195b24f0a85af8c2de1f0344b4574a6d", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=203c7ebffdd7042d9b08d303594eaeb9887ff503", "patch": "@@ -396,7 +396,7 @@ gfc_sym_mangled_function_id (gfc_symbol * sym)\n       if (gfc_option.flag_underscoring)\n \t{\n \t  has_underscore = strchr (sym->name, '_') != 0;\n-\t  if (gfc_option.flag_second_underscore && has_underscore)\n+\t  if (flag_second_underscore && has_underscore)\n \t    snprintf (name, sizeof name, \"%s__\", sym->name);\n \t  else\n \t    snprintf (name, sizeof name, \"%s_\", sym->name);\n@@ -431,14 +431,14 @@ gfc_can_put_var_on_stack (tree size)\n   if (!INTEGER_CST_P (size))\n     return 0;\n \n-  if (gfc_option.flag_max_stack_var_size < 0)\n+  if (flag_max_stack_var_size < 0)\n     return 1;\n \n   if (!tree_fits_uhwi_p (size))\n     return 0;\n \n   low = TREE_INT_CST_LOW (size);\n-  if (low > (unsigned HOST_WIDE_INT) gfc_option.flag_max_stack_var_size)\n+  if (low > (unsigned HOST_WIDE_INT) flag_max_stack_var_size)\n     return 0;\n \n /* TODO: Set a per-function stack size limit.  */\n@@ -1148,7 +1148,7 @@ gfc_create_string_length (gfc_symbol * sym)\n \t it is an automatic variable.  */\n       bool static_length = sym->attr.save\n \t\t\t   || sym->ns->proc_name->attr.flavor == FL_MODULE\n-\t\t\t   || (gfc_option.flag_max_stack_var_size == 0\n+\t\t\t   || (flag_max_stack_var_size == 0\n \t\t\t       && sym->ts.deferred && !sym->attr.dummy\n \t\t\t       && !sym->attr.result && !sym->attr.function);\n \n@@ -1546,7 +1546,7 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n   if (TREE_STATIC (decl)\n       && !(sym->attr.use_assoc && !intrinsic_array_parameter)\n       && (sym->attr.save || sym->ns->proc_name->attr.is_main_program\n-\t  || gfc_option.flag_max_stack_var_size == 0\n+\t  || flag_max_stack_var_size == 0\n \t  || sym->attr.data || sym->ns->proc_name->attr.flavor == FL_MODULE)\n       && (gfc_option.coarray != GFC_FCOARRAY_LIB\n \t  || !sym->attr.codimension || sym->attr.allocatable))\n@@ -3878,7 +3878,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t}\n \n       if (sym->ts.type == BT_CLASS\n-\t  && (sym->attr.save || gfc_option.flag_max_stack_var_size == 0)\n+\t  && (sym->attr.save || flag_max_stack_var_size == 0)\n \t  && CLASS_DATA (sym)->attr.allocatable)\n \t{\n \t  tree vptr;\n@@ -4007,7 +4007,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t    || (sym->ts.type == BT_CLASS\n \t\t\t&& CLASS_DATA (sym)->attr.allocatable)))\n \t{\n-\t  if (!sym->attr.save && gfc_option.flag_max_stack_var_size != 0)\n+\t  if (!sym->attr.save && flag_max_stack_var_size != 0)\n \t    {\n \t      tree descriptor = NULL_TREE;\n \n@@ -5495,21 +5495,21 @@ create_main_function (tree fndecl)\n   /* If this is the main program and an -frecord-marker option was provided,\n      add a call to set_record_marker.  */\n \n-  if (gfc_option.record_marker != 0)\n+  if (flag_record_marker != 0)\n     {\n       tmp = build_call_expr_loc (input_location,\n \t\t\t     gfor_fndecl_set_record_marker, 1,\n \t\t\t     build_int_cst (integer_type_node,\n-\t\t\t\t\t    gfc_option.record_marker));\n+\t\t\t\t\t    flag_record_marker));\n       gfc_add_expr_to_block (&body, tmp);\n     }\n \n-  if (gfc_option.max_subrecord_length != 0)\n+  if (flag_max_subrecord_length != 0)\n     {\n       tmp = build_call_expr_loc (input_location,\n \t\t\t     gfor_fndecl_set_max_subrecord_length, 1,\n \t\t\t     build_int_cst (integer_type_node,\n-\t\t\t\t\t    gfc_option.max_subrecord_length));\n+\t\t\t\t\t    flag_max_subrecord_length));\n       gfc_add_expr_to_block (&body, tmp);\n     }\n "}, {"sha": "143decc9489390fd9d7968b7c0257d3c5d4afb68", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=203c7ebffdd7042d9b08d303594eaeb9887ff503", "patch": "@@ -2653,9 +2653,8 @@ gfc_conv_expr_op (gfc_se * se, gfc_expr * expr)\n   switch (expr->value.op.op)\n     {\n     case INTRINSIC_PARENTHESES:\n-      if ((expr->ts.type == BT_REAL\n-\t   || expr->ts.type == BT_COMPLEX)\n-\t  && gfc_option.flag_protect_parens)\n+      if ((expr->ts.type == BT_REAL || expr->ts.type == BT_COMPLEX)\n+\t  && flag_protect_parens)\n \t{\n \t  gfc_conv_unary_op (PAREN_EXPR, se, expr);\n \t  gcc_assert (FLOAT_TYPE_P (TREE_TYPE (se->expr)));\n@@ -5176,7 +5175,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t  /* If the lhs of an assignment x = f(..) is allocatable and\n \t     f2003 is allowed, we must do the automatic reallocation.\n \t     TODO - deal with intrinsics, without using a temporary.  */\n-\t  if (gfc_option.flag_realloc_lhs\n+\t  if (flag_realloc_lhs\n \t\t&& se->ss && se->ss->loop_chain\n \t\t&& se->ss->loop_chain->is_alloc_lhs\n \t\t&& !expr->value.function.isym\n@@ -5214,8 +5213,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t     f2003 is allowed, we must not generate the function call\n \t     here but should just send back the results of the mapping.\n \t     This is signalled by the function ss being flagged.  */\n-\t  if (gfc_option.flag_realloc_lhs\n-\t\t&& se->ss && se->ss->is_alloc_lhs)\n+\t  if (flag_realloc_lhs && se->ss && se->ss->is_alloc_lhs)\n \t    {\n \t      gfc_free_interface_mapping (&mapping);\n \t      return has_alternate_specifier;\n@@ -5250,8 +5248,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t     f2003 is allowed, we must not generate the function call\n \t     here but should just send back the results of the mapping.\n \t     This is signalled by the function ss being flagged.  */\n-\t  if (gfc_option.flag_realloc_lhs\n-\t\t&& se->ss && se->ss->is_alloc_lhs)\n+\t  if (flag_realloc_lhs && se->ss && se->ss->is_alloc_lhs)\n \t    {\n \t      gfc_free_interface_mapping (&mapping);\n \t      return has_alternate_specifier;\n@@ -7409,9 +7406,7 @@ arrayfunc_assign_needs_temporary (gfc_expr * expr1, gfc_expr * expr2)\n      need a temporary except in the particular case that reallocation\n      on assignment is active and the lhs is allocatable and a target.  */\n   if (expr2->value.function.isym)\n-    return (gfc_option.flag_realloc_lhs\n-\t      && sym->attr.allocatable\n-\t      && sym->attr.target);\n+    return (flag_realloc_lhs && sym->attr.allocatable && sym->attr.target);\n \n   /* If the LHS is a dummy, we need a temporary if it is not\n      INTENT(OUT).  */\n@@ -7652,7 +7647,7 @@ gfc_trans_arrayfunc_assign (gfc_expr * expr1, gfc_expr * expr2)\n      calls, the array data is freed and the library takes care of allocation.\n      TODO: Add logic of trans-array.c: gfc_alloc_allocatable_for_assignment\n      to the library.  */\n-  if (gfc_option.flag_realloc_lhs\n+  if (flag_realloc_lhs\n \t&& gfc_is_reallocatable_lhs (expr1)\n \t&& !gfc_expr_attr (expr1).codimension\n \t&& !gfc_is_coindexed (expr1)\n@@ -8312,8 +8307,7 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n      otherwise the character length of the result is not known.\n      NOTE: This relies on having the exact dependence of the length type\n      parameter available to the caller; gfortran saves it in the .mod files.  */\n-  if (gfc_option.flag_realloc_lhs && expr2->ts.type == BT_CHARACTER\n-      && expr1->ts.deferred)\n+  if (flag_realloc_lhs && expr2->ts.type == BT_CHARACTER && expr1->ts.deferred)\n     gfc_add_block_to_block (&block, &rse.pre);\n \n   tmp = gfc_trans_scalar_assign (&lse, &rse, expr1->ts,\n@@ -8325,8 +8319,7 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n   if (lss == gfc_ss_terminator)\n     {\n       /* F2003: Add the code for reallocation on assignment.  */\n-      if (gfc_option.flag_realloc_lhs\n-\t  && is_scalar_reallocatable_lhs (expr1))\n+      if (flag_realloc_lhs && is_scalar_reallocatable_lhs (expr1))\n \talloc_scalar_allocatable_for_assignment (&block, rse.string_length,\n \t\t\t\t\t\t expr1, expr2);\n \n@@ -8366,7 +8359,7 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n \t}\n \n       /* F2003: Allocate or reallocate lhs of allocatable array.  */\n-      if (gfc_option.flag_realloc_lhs\n+      if (flag_realloc_lhs\n \t    && gfc_is_reallocatable_lhs (expr1)\n \t    && !gfc_expr_attr (expr1).codimension\n \t    && !gfc_is_coindexed (expr1)"}, {"sha": "8eda2d88ee2915665f0f552da32a25dbfce8b64c", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=203c7ebffdd7042d9b08d303594eaeb9887ff503", "patch": "@@ -5328,11 +5328,11 @@ gfc_trans_allocate (gfc_code * code)\n \t    {\n \t      /* Switch off automatic reallocation since we have just done\n \t\t the ALLOCATE.  */\n-\t      int realloc_lhs = gfc_option.flag_realloc_lhs;\n-\t      gfc_option.flag_realloc_lhs = 0;\n+\t      int realloc_lhs = flag_realloc_lhs;\n+\t      flag_realloc_lhs = 0;\n \t      tmp = gfc_trans_assignment (gfc_expr_to_initialize (expr),\n \t\t\t\t\t  rhs, false, false);\n-\t      gfc_option.flag_realloc_lhs = realloc_lhs;\n+\t      flag_realloc_lhs = realloc_lhs;\n \t    }\n \t  gfc_free_expr (rhs);\n \t  gfc_add_expr_to_block (&block, tmp);"}, {"sha": "304b027da4bbc3f308357692aa320dd090714429", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203c7ebffdd7042d9b08d303594eaeb9887ff503/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=203c7ebffdd7042d9b08d303594eaeb9887ff503", "patch": "@@ -493,7 +493,7 @@ gfc_init_kinds (void)\n \n   gfc_numeric_storage_size = 4 * 8;\n \n-  if (gfc_option.flag_default_integer)\n+  if (flag_default_integer)\n     {\n       if (!saw_i8)\n \tgfc_fatal_error (\"INTEGER(KIND=8) is not available for \"\n@@ -502,7 +502,7 @@ gfc_init_kinds (void)\n       gfc_default_integer_kind = 8;\n \n     }\n-  else if (gfc_option.flag_integer4_kind == 8)\n+  else if (flag_integer4_kind == 8)\n     {\n       if (!saw_i8)\n \tgfc_fatal_error (\"INTEGER(KIND=8) is not available for \"\n@@ -521,31 +521,31 @@ gfc_init_kinds (void)\n     }\n \n   /* Choose the default real kind.  Again, we choose 4 when possible.  */\n-  if (gfc_option.flag_default_real)\n+  if (flag_default_real)\n     {\n       if (!saw_r8)\n \tgfc_fatal_error (\"REAL(KIND=8) is not available for \"\n \t\t\t \"%<-fdefault-real-8%> option\");\n \n       gfc_default_real_kind = 8;\n     }\n-  else if (gfc_option.flag_real4_kind == 8)\n+  else if (flag_real4_kind == 8)\n   {\n     if (!saw_r8)\n       gfc_fatal_error (\"REAL(KIND=8) is not available for %<-freal-4-real-8%> \"\n \t\t       \"option\");\n \n     gfc_default_real_kind = 8;\n   }\n-  else if (gfc_option.flag_real4_kind == 10)\n+  else if (flag_real4_kind == 10)\n   {\n     if (!saw_r10)\n       gfc_fatal_error (\"REAL(KIND=10) is not available for \"\n \t\t       \"%<-freal-4-real-10%> option\");\n \n     gfc_default_real_kind = 10;\n   }\n-  else if (gfc_option.flag_real4_kind == 16)\n+  else if (flag_real4_kind == 16)\n   {\n     if (!saw_r16)\n       gfc_fatal_error (\"REAL(KIND=16) is not available for \"\n@@ -562,31 +562,31 @@ gfc_init_kinds (void)\n      are specified, we use kind=8, if it's available.  If -fdefault-real is\n      specified without -fdefault-double, we use kind=16, if it's available.\n      Otherwise we do not change anything.  */\n-  if (gfc_option.flag_default_double && !gfc_option.flag_default_real)\n+  if (flag_default_double && !flag_default_real)\n     gfc_fatal_error (\"Use of %<-fdefault-double-8%> requires \"\n \t\t     \"%<-fdefault-real-8%>\");\n \n-  if (gfc_option.flag_default_real && gfc_option.flag_default_double && saw_r8)\n+  if (flag_default_real && flag_default_double && saw_r8)\n     gfc_default_double_kind = 8;\n-  else if (gfc_option.flag_default_real && saw_r16)\n+  else if (flag_default_real && saw_r16)\n     gfc_default_double_kind = 16;\n-  else if (gfc_option.flag_real8_kind == 4)\n+  else if (flag_real8_kind == 4)\n     {\n       if (!saw_r4)\n \tgfc_fatal_error (\"REAL(KIND=4) is not available for \"\n \t\t\t \"%<-freal-8-real-4%> option\");\n \n \tgfc_default_double_kind = 4;\n     }\n-  else if (gfc_option.flag_real8_kind == 10 )\n+  else if (flag_real8_kind == 10 )\n     {\n       if (!saw_r10)\n \tgfc_fatal_error (\"REAL(KIND=10) is not available for \"\n \t\t\t \"%<-freal-8-real-10%> option\");\n \n \tgfc_default_double_kind = 10;\n     }\n-  else if (gfc_option.flag_real8_kind == 16 )\n+  else if (flag_real8_kind == 16 )\n     {\n       if (!saw_r16)\n \tgfc_fatal_error (\"REAL(KIND=10) is not available for \""}]}