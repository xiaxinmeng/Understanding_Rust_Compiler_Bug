{"sha": "ff8e1022cd74e2569354b86b6f0b657cff81bb02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY4ZTEwMjJjZDc0ZTI1NjkzNTRiODZiNmYwYjY1N2NmZjgxYmIwMg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-11-21T13:18:54Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-11-21T13:18:54Z"}, "message": "x86: Add pmovzx/pmovsx patterns with memory operands\n\nMany x86 pmovzx/pmovsx instructions with memory operands are modeled in\na wrong way.  For example:\n\n(define_insn \"sse4_1_<code>v8qiv8hi2<mask_name>\"\n  [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*x,v\")\n    (any_extend:V8HI\n      (vec_select:V8QI\n        (match_operand:V16QI 1 \"nonimmediate_operand\" \"Yrm,*xm,vm\")\n        (parallel [(const_int 0) (const_int 1)\n               (const_int 2) (const_int 3)\n               (const_int 4) (const_int 5)\n               (const_int 6) (const_int 7)]))))]\n\nshould be defind for memory operands as:\n\n(define_insn \"sse4_1_<code>v8qiv8hi2<mask_name>\"\n  [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*x,v\")\n    (any_extend:V8HI\n      (match_operand:V8QI \"memory_operand\" \"m,m,m\")))]\n\nThis patch updates them to\n\n(define_insn \"sse4_1_<code>v8qiv8hi2<mask_name>\"\n  [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*x,v\")\n\t(any_extend:V8HI\n\t  (vec_select:V8QI\n\t    (match_operand:V16QI 1 \"register_operand\" \"Yr,*x,v\")\n\t    (parallel [(const_int 0) (const_int 1)\n\t\t       (const_int 2) (const_int 3)\n\t\t       (const_int 4) (const_int 5)\n\t\t       (const_int 6) (const_int 7)]))))]\n\n(define_insn \"*sse4_1_<code>v8qiv8hi2<mask_name>_1\"\n  [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*x,v\")\n\t(any_extend:V8HI\n\t  (match_operand:V8QI \"subreg_memory_operand\" \"m,m,m\")))]\n\nwith a splitter:\n\n(define_insn_and_split \"*sse4_1_<code>v8qiv8hi2<mask_name>_2\"\n  [(set (match_operand:V8HI 0 \"register_operand\")\n        (any_extend:V8HI\n          (vec_select:V8QI\n            (subreg:V16QI\n              (vec_concat:V2DI\n                (match_operand:DI 1 \"memory_operand\")\n                (const_int 0)) 0)\n            (parallel [(const_int 0) (const_int 1)\n                       (const_int 2) (const_int 3)\n                       (const_int 4) (const_int 5)\n                       (const_int 6) (const_int 7)]))))]\n  \"TARGET_SSE4_1\n   && <mask_avx512bw_condition>\n   && <mask_avx512vl_condition>\n  \"&& can_create_pseudo_p ()\"\n  \"#\"\n  \"&& 1\"\n  [(set (match_dup 0)\n        (any_extend:V8HI (match_dup 1)))]\n  \"operands[1] = adjust_address_nv (operands[1], V8QImode, 0);\")\n\nThis patch requires updating apply_subst_iterator to handle\ndefine_insn_and_split.\n\ngcc/\n\n\tPR target/87317\n\t* config/i386/sse.md (sse4_1_<code>v8qiv8hi2<mask_name>): Replace\n\tnonimmediate_operand with register_operand.\n\t(avx2_<code>v8qiv8si2<mask_name>): Likewise.\n\t(sse4_1_<code>v4qiv4si2<mask_name>): Likewise.\n\t(sse4_1_<code>v4hiv4si2<mask_name>): Likewise.\n\t(sse4_1_<code>v2qiv2di2<mask_name>): Likewise.\n\t(avx512f_<code>v8qiv8di2<mask_name>): Likewise.\n\t(avx2_<code>v4qiv4di2<mask_name>): Likewise.\n\t(avx2_<code>v4hiv4di2<mask_name>): Likewise.\n\t(sse4_1_<code>v2hiv2di2<mask_name>): Likewise.\n\t(sse4_1_<code>v2siv2di2<mask_name>): Likewise.\n\t(*sse4_1_<code>v8qiv8hi2<mask_name>_1): New pattern.\n\t(*sse4_1_<code>v8qiv8hi2<mask_name>_2): Likewise.\n\t(*avx2_<code>v8qiv8si2<mask_name>_1): Likewise.\n\t(*avx2_<code>v8qiv8si2<mask_name>_2): Likewise.\n\t(*sse4_1_<code>v4qiv4si2<mask_name>_1): Likewise.\n\t(*sse4_1_<code>v4qiv4si2<mask_name>_2): Likewise.\n\t(*sse4_1_<code>v4hiv4si2<mask_name>_1): Likewise.\n\t(*sse4_1_<code>v4hiv4si2<mask_name>_2): Likewise.\n\t(*avx512f_<code>v8qiv8di2<mask_name>_1): Likewise.\n\t(*avx512f_<code>v8qiv8di2<mask_name>_2): Likewise.\n\t(*avx2_<code>v4qiv4di2<mask_name>_1): Likewise.\n\t(*avx2_<code>v4qiv4di2<mask_name>_2): Likewise.\n\t(*avx2_<code>v4hiv4di2<mask_name>_1): Likewise.\n\t(*avx2_<code>v4hiv4di2<mask_name>_2): Likewise.\n\t(*sse4_1_<code>v2hiv2di2<mask_name>_1): Likewise.\n\t(*sse4_1_<code>v2hiv2di2<mask_name>_2): Likewise.\n\t(*sse4_1_<code>v2siv2di2<mask_name>_1): Likewise.\n\t(*sse4_1_<code>v2siv2di2<mask_name>_2): Likewise.\n\ngcc/testsuite/\n\n\tPR target/87317\n\t* gcc.target/i386/pr87317-1.c: New file.\n\t* gcc.target/i386/pr87317-2.c: Likewise.\n\t* gcc.target/i386/pr87317-3.c: Likewise.\n\t* gcc.target/i386/pr87317-4.c: Likewise.\n\t* gcc.target/i386/pr87317-5.c: Likewise.\n\t* gcc.target/i386/pr87317-6.c: Likewise.\n\t* gcc.target/i386/pr87317-7.c: Likewise.\n\t* gcc.target/i386/pr87317-8.c: Likewise.\n\t* gcc.target/i386/pr87317-9.c: Likewise.\n\t* gcc.target/i386/pr87317-10.c: Likewise.\n\t* gcc.target/i386/pr87317-11.c: Likewise.\n\t* gcc.target/i386/pr87317-12.c: Likewise.\n\t* gcc.target/i386/pr87317-13.c: Likewise.\n\nFrom-SVN: r266342", "tree": {"sha": "b2e8cb22623ca7227af02244098a01e98e2fd6cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2e8cb22623ca7227af02244098a01e98e2fd6cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff8e1022cd74e2569354b86b6f0b657cff81bb02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff8e1022cd74e2569354b86b6f0b657cff81bb02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff8e1022cd74e2569354b86b6f0b657cff81bb02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff8e1022cd74e2569354b86b6f0b657cff81bb02/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12404d1594873bc7cc70c6c10300b5c5fcf6ab1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12404d1594873bc7cc70c6c10300b5c5fcf6ab1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12404d1594873bc7cc70c6c10300b5c5fcf6ab1f"}], "stats": {"total": 560, "additions": 540, "deletions": 20}, "files": [{"sha": "692f3fb1961576316fd558a15bd49b56d32e0190", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff8e1022cd74e2569354b86b6f0b657cff81bb02", "patch": "@@ -1,3 +1,36 @@\n+2018-11-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/87317\n+\t* config/i386/sse.md (sse4_1_<code>v8qiv8hi2<mask_name>): Replace\n+\tnonimmediate_operand with register_operand.\n+\t(avx2_<code>v8qiv8si2<mask_name>): Likewise.\n+\t(sse4_1_<code>v4qiv4si2<mask_name>): Likewise.\n+\t(sse4_1_<code>v4hiv4si2<mask_name>): Likewise.\n+\t(sse4_1_<code>v2qiv2di2<mask_name>): Likewise.\n+\t(avx512f_<code>v8qiv8di2<mask_name>): Likewise.\n+\t(avx2_<code>v4qiv4di2<mask_name>): Likewise.\n+\t(avx2_<code>v4hiv4di2<mask_name>): Likewise.\n+\t(sse4_1_<code>v2hiv2di2<mask_name>): Likewise.\n+\t(sse4_1_<code>v2siv2di2<mask_name>): Likewise.\n+\t(*sse4_1_<code>v8qiv8hi2<mask_name>_1): New pattern.\n+\t(*sse4_1_<code>v8qiv8hi2<mask_name>_2): Likewise.\n+\t(*avx2_<code>v8qiv8si2<mask_name>_1): Likewise.\n+\t(*avx2_<code>v8qiv8si2<mask_name>_2): Likewise.\n+\t(*sse4_1_<code>v4qiv4si2<mask_name>_1): Likewise.\n+\t(*sse4_1_<code>v4qiv4si2<mask_name>_2): Likewise.\n+\t(*sse4_1_<code>v4hiv4si2<mask_name>_1): Likewise.\n+\t(*sse4_1_<code>v4hiv4si2<mask_name>_2): Likewise.\n+\t(*avx512f_<code>v8qiv8di2<mask_name>_1): Likewise.\n+\t(*avx512f_<code>v8qiv8di2<mask_name>_2): Likewise.\n+\t(*avx2_<code>v4qiv4di2<mask_name>_1): Likewise.\n+\t(*avx2_<code>v4qiv4di2<mask_name>_2): Likewise.\n+\t(*avx2_<code>v4hiv4di2<mask_name>_1): Likewise.\n+\t(*avx2_<code>v4hiv4di2<mask_name>_2): Likewise.\n+\t(*sse4_1_<code>v2hiv2di2<mask_name>_1): Likewise.\n+\t(*sse4_1_<code>v2hiv2di2<mask_name>_2): Likewise.\n+\t(*sse4_1_<code>v2siv2di2<mask_name>_1): Likewise.\n+\t(*sse4_1_<code>v2siv2di2<mask_name>_2): Likewise.\n+\n 2018-11-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* read-rtl.c (apply_subst_iterator): Handle define_split and"}, {"sha": "e2d2b452340382634f11a6be964755cb477640ff", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 300, "deletions": 20, "changes": 320, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=ff8e1022cd74e2569354b86b6f0b657cff81bb02", "patch": "@@ -15839,19 +15839,51 @@\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V8HI\n \t  (vec_select:V8QI\n-\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"Yrm,*xm,vm\")\n+\t    (match_operand:V16QI 1 \"register_operand\" \"Yr,*x,v\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)\n \t\t       (const_int 4) (const_int 5)\n \t\t       (const_int 6) (const_int 7)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512bw_condition> && <mask_avx512vl_condition>\"\n-  \"%vpmov<extsuffix>bw\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\"\n+  \"%vpmov<extsuffix>bw\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"*sse4_1_<code>v8qiv8hi2<mask_name>_1\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*x,v\")\n+\t(any_extend:V8HI\n+\t  (match_operand:V8QI 1 \"memory_operand\" \"m,m,m\")))]\n+  \"TARGET_SSE4_1 && <mask_avx512bw_condition> && <mask_avx512vl_condition>\"\n+  \"%vpmov<extsuffix>bw\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn_and_split \"*sse4_1_<code>v8qiv8hi2<mask_name>_2\"\n+  [(set (match_operand:V8HI 0 \"register_operand\")\n+\t(any_extend:V8HI\n+\t  (vec_select:V8QI\n+\t    (subreg:V16QI\n+\t      (vec_concat:V2DI\n+\t        (match_operand:DI 1 \"memory_operand\")\n+\t\t(const_int 0)) 0)\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)\n+\t\t       (const_int 4) (const_int 5)\n+\t\t       (const_int 6) (const_int 7)]))))]\n+  \"TARGET_SSE4_1 && <mask_avx512bw_condition> && <mask_avx512vl_condition>\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(any_extend:V8HI (match_dup 1)))]\n+  \"operands[1] = adjust_address_nv (operands[1], V8QImode, 0);\")\n+\n (define_insn \"<mask_codefor>avx512f_<code>v16qiv16si2<mask_name>\"\n   [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n \t(any_extend:V16SI\n@@ -15866,33 +15898,98 @@\n   [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n \t(any_extend:V8SI\n \t  (vec_select:V8QI\n-\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V16QI 1 \"register_operand\" \"v\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)\n \t\t       (const_int 4) (const_int 5)\n \t\t       (const_int 6) (const_int 7)]))))]\n   \"TARGET_AVX2 && <mask_avx512vl_condition>\"\n-  \"vpmov<extsuffix>bd\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\"\n+  \"vpmov<extsuffix>bd\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_insn \"*avx2_<code>v8qiv8si2<mask_name>_1\"\n+  [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n+\t(any_extend:V8SI\n+\t  (match_operand:V8QI 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_AVX2 && <mask_avx512vl_condition>\"\n+  \"%vpmov<extsuffix>bd\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n+   (set_attr \"mode\" \"OI\")])\n+\n+(define_insn_and_split \"*avx2_<code>v8qiv8si2<mask_name>_2\"\n+  [(set (match_operand:V8SI 0 \"register_operand\")\n+\t(any_extend:V8SI\n+\t  (vec_select:V8QI\n+\t    (subreg:V16QI\n+\t      (vec_concat:V2DI\n+\t        (match_operand:DI 1 \"memory_operand\")\n+\t\t(const_int 0)) 0)\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)\n+\t\t       (const_int 4) (const_int 5)\n+\t\t       (const_int 6) (const_int 7)]))))]\n+  \"TARGET_AVX2 && <mask_avx512vl_condition>\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(any_extend:V8SI (match_dup 1)))]\n+  \"operands[1] = adjust_address_nv (operands[1], V8QImode, 0);\")\n+\n (define_insn \"sse4_1_<code>v4qiv4si2<mask_name>\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V4SI\n \t  (vec_select:V4QI\n-\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"Yrm,*xm,vm\")\n+\t    (match_operand:V16QI 1 \"register_operand\" \"Yr,*x,v\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n-  \"%vpmov<extsuffix>bd\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %k1}\"\n+  \"%vpmov<extsuffix>bd\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"*sse4_1_<code>v4qiv4si2<mask_name>_1\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=Yr,*x,v\")\n+\t(any_extend:V4SI\n+\t  (match_operand:V4QI 1 \"memory_operand\" \"m,m,m\")))]\n+  \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n+  \"%vpmov<extsuffix>bd\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn_and_split \"*sse4_1_<code>v4qiv4si2<mask_name>_2\"\n+  [(set (match_operand:V4SI 0 \"register_operand\")\n+\t(any_extend:V4SI\n+\t  (vec_select:V4QI\n+\t    (subreg:V16QI\n+\t      (vec_merge:V4SI\n+\t        (vec_duplicate:V4SI\n+\t\t  (match_operand:SI 1 \"memory_operand\"))\n+\t\t(const_vector:V4SI\n+\t\t   [(const_int 0) (const_int 0)\n+\t\t    (const_int 0) (const_int 0)])\n+\t\t(const_int 1)) 0)\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)]))))]\n+  \"TARGET_SSE4_1 && <mask_avx512vl_condition>\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(any_extend:V4SI (match_dup 1)))]\n+  \"operands[1] = adjust_address_nv (operands[1], V4QImode, 0);\")\n+\n (define_insn \"avx512f_<code>v16hiv16si2<mask_name>\"\n   [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n \t(any_extend:V16SI\n@@ -15918,54 +16015,146 @@\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V4SI\n \t  (vec_select:V4HI\n-\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"Yrm,*xm,vm\")\n+\t    (match_operand:V8HI 1 \"register_operand\" \"Yr,*x,v\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n-  \"%vpmov<extsuffix>wd\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\"\n+  \"%vpmov<extsuffix>wd\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*sse4_1_<code>v4hiv4si2<mask_name>_1\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=Yr,*x,v\")\n+\t(any_extend:V4SI\n+\t  (match_operand:V4HI 1 \"memory_operand\" \"m,m,m\")))]\n+  \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n+  \"%vpmov<extsuffix>wd\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"*sse4_1_<code>v4hiv4si2<mask_name>_2\"\n+  [(set (match_operand:V4SI 0 \"register_operand\")\n+\t(any_extend:V4SI\n+\t  (vec_select:V4HI\n+\t    (subreg:V8HI\n+\t      (vec_concat:V2DI\n+\t\t(match_operand:DI 1 \"memory_operand\")\n+\t\t(const_int 0)) 0)\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)]))))]\n+  \"TARGET_SSE4_1 && <mask_avx512vl_condition>\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(any_extend:V4SI (match_dup 1)))]\n+  \"operands[1] = adjust_address_nv (operands[1], V4HImode, 0);\")\n+\n (define_insn \"avx512f_<code>v8qiv8di2<mask_name>\"\n   [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V8DI\n \t  (vec_select:V8QI\n-\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V16QI 1 \"register_operand\" \"v\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)\n \t\t       (const_int 4) (const_int 5)\n \t\t       (const_int 6) (const_int 7)]))))]\n   \"TARGET_AVX512F\"\n-  \"vpmov<extsuffix>bq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %k1}\"\n+  \"vpmov<extsuffix>bq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+(define_insn \"*avx512f_<code>v8qiv8di2<mask_name>_1\"\n+  [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n+\t(any_extend:V8DI\n+\t  (match_operand:V8QI 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_AVX512F\"\n+  \"vpmov<extsuffix>bq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n+(define_insn_and_split \"*avx512f_<code>v8qiv8di2<mask_name>_2\"\n+  [(set (match_operand:V8DI 0 \"register_operand\")\n+\t(any_extend:V8DI\n+\t  (vec_select:V8QI\n+\t    (subreg:V16QI\n+\t      (vec_concat:V2DI\n+\t        (match_operand:DI 1 \"memory_operand\")\n+\t\t(const_int 0)) 0)\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)\n+\t\t       (const_int 4) (const_int 5)\n+\t\t       (const_int 6) (const_int 7)]))))]\n+  \"TARGET_AVX512F && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(any_extend:V8DI (match_dup 1)))]\n+  \"operands[1] = adjust_address_nv (operands[1], V8QImode, 0);\")\n+\n (define_insn \"avx2_<code>v4qiv4di2<mask_name>\"\n   [(set (match_operand:V4DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V4DI\n \t  (vec_select:V4QI\n-\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V16QI 1 \"register_operand\" \"v\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)]))))]\n   \"TARGET_AVX2 && <mask_avx512vl_condition>\"\n-  \"vpmov<extsuffix>bq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %k1}\"\n+  \"vpmov<extsuffix>bq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_insn \"*avx2_<code>v4qiv4di2<mask_name>_1\"\n+  [(set (match_operand:V4DI 0 \"register_operand\" \"=v\")\n+\t(any_extend:V4DI\n+\t  (match_operand:V4QI 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_AVX2 && <mask_avx512vl_condition>\"\n+  \"vpmov<extsuffix>bq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n+   (set_attr \"mode\" \"OI\")])\n+\n+(define_insn_and_split \"*avx2_<code>v4qiv4di2<mask_name>_2\"\n+  [(set (match_operand:V4DI 0 \"register_operand\")\n+\t(any_extend:V4DI\n+\t  (vec_select:V4QI\n+\t    (subreg:V16QI\n+\t      (vec_merge:V4SI\n+\t        (vec_duplicate:V4SI\n+\t\t  (match_operand:SI 1 \"memory_operand\"))\n+\t\t(const_vector:V4SI\n+\t\t   [(const_int 0) (const_int 0)\n+\t\t    (const_int 0) (const_int 0)])\n+\t\t(const_int 1)) 0)\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)]))))]\n+  \"TARGET_AVX2 && <mask_avx512vl_condition>\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(any_extend:V4DI (match_dup 1)))]\n+  \"operands[1] = adjust_address_nv (operands[1], V4QImode, 0);\")\n+\n (define_insn \"sse4_1_<code>v2qiv2di2<mask_name>\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V2DI\n \t  (vec_select:V2QI\n-\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"Yrm,*xm,vm\")\n+\t    (match_operand:V16QI 1 \"register_operand\" \"Yr,*x,v\")\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n-  \"%vpmov<extsuffix>bq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %w1}\"\n+  \"%vpmov<extsuffix>bq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n@@ -15986,30 +16175,92 @@\n   [(set (match_operand:V4DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V4DI\n \t  (vec_select:V4HI\n-\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V8HI 1 \"register_operand\" \"v\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)]))))]\n   \"TARGET_AVX2 && <mask_avx512vl_condition>\"\n-  \"vpmov<extsuffix>wq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\"\n+  \"vpmov<extsuffix>wq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n+   (set_attr \"mode\" \"OI\")])\n+\n+(define_insn \"*avx2_<code>v4hiv4di2<mask_name>_1\"\n+  [(set (match_operand:V4DI 0 \"register_operand\" \"=v\")\n+\t(any_extend:V4DI\n+\t  (match_operand:V4HI 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_AVX2 && <mask_avx512vl_condition>\"\n+  \"vpmov<extsuffix>wq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_insn_and_split \"*avx2_<code>v4hiv4di2<mask_name>_2\"\n+  [(set (match_operand:V4DI 0 \"register_operand\")\n+\t(any_extend:V4DI\n+\t  (vec_select:V4HI\n+\t    (subreg:V8HI\n+\t      (vec_concat:V2DI\n+\t\t(match_operand:DI 1 \"memory_operand\")\n+\t\t(const_int 0)) 0)\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)]))))]\n+  \"TARGET_AVX2 && <mask_avx512vl_condition>\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(any_extend:V4DI (match_dup 1)))]\n+  \"operands[1] = adjust_address_nv (operands[1], V4HImode, 0);\")\n+\n (define_insn \"sse4_1_<code>v2hiv2di2<mask_name>\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V2DI\n \t  (vec_select:V2HI\n-\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"Yrm,*xm,vm\")\n+\t    (match_operand:V8HI 1 \"register_operand\" \"Yr,*x,v\")\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n-  \"%vpmov<extsuffix>wq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %k1}\"\n+  \"%vpmov<extsuffix>wq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*sse4_1_<code>v2hiv2di2<mask_name>_1\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*x,v\")\n+\t(any_extend:V2DI\n+\t  (match_operand:V2HI 1 \"memory_operand\" \"m,m,m\")))]\n+  \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n+  \"%vpmov<extsuffix>wq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"*sse4_1_<code>v2hiv2di2<mask_name>_2\"\n+  [(set (match_operand:V2DI 0 \"register_operand\")\n+\t(any_extend:V2DI\n+\t  (vec_select:V2HI\n+\t    (subreg:V8HI\n+\t      (vec_merge:V4SI\n+\t        (vec_duplicate:V4SI\n+\t\t  (match_operand:SI 1 \"memory_operand\"))\n+\t\t(const_vector:V4SI\n+\t\t   [(const_int 0) (const_int 0)\n+\t\t    (const_int 0) (const_int 0)])\n+\t\t(const_int 1)) 0)\n+\t    (parallel [(const_int 0) (const_int 1)]))))]\n+  \"TARGET_SSE4_1 && <mask_avx512vl_condition>\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(any_extend:V2DI (match_dup 1)))]\n+  \"operands[1] = adjust_address_nv (operands[1], V2HImode, 0);\")\n+\n (define_insn \"avx512f_<code>v8siv8di2<mask_name>\"\n   [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V8DI\n@@ -16035,16 +16286,45 @@\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V2DI\n \t  (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"Yrm,*xm,vm\")\n+\t    (match_operand:V4SI 1 \"register_operand\" \"Yr,*x,v\")\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n-  \"%vpmov<extsuffix>dq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\"\n+  \"%vpmov<extsuffix>dq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*sse4_1_<code>v2siv2di2<mask_name>_1\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*x,v\")\n+\t(any_extend:V2DI\n+\t  (match_operand:V2SI 1 \"memory_operand\" \"m,m,m\")))]\n+  \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n+  \"%vpmov<extsuffix>dq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"*sse4_1_<code>v2siv2di2<mask_name>_2\"\n+  [(set (match_operand:V2DI 0 \"register_operand\")\n+\t(any_extend:V2DI\n+\t  (vec_select:V2SI\n+\t    (subreg:V4SI\n+\t      (vec_concat:V2DI\n+\t\t(match_operand:DI 1 \"memory_operand\")\n+\t\t(const_int 0)) 0)\n+\t    (parallel [(const_int 0) (const_int 1)]))))]\n+  \"TARGET_SSE4_1 && <mask_avx512vl_condition>\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(any_extend:V2DI (match_dup 1)))]\n+  \"operands[1] = adjust_address_nv (operands[1], V2SImode, 0);\")\n+\n ;; ptestps/ptestpd are very similar to comiss and ucomiss when\n ;; setting FLAGS_REG. But it is not a really compare instruction.\n (define_insn \"avx_vtest<ssemodesuffix><avxsizesuffix>\""}, {"sha": "548959361b8ed6d118528ed54dea2eeaedf1678a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff8e1022cd74e2569354b86b6f0b657cff81bb02", "patch": "@@ -1,3 +1,20 @@\n+2018-11-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/87317\n+\t* gcc.target/i386/pr87317-1.c: New file.\n+\t* gcc.target/i386/pr87317-2.c: Likewise.\n+\t* gcc.target/i386/pr87317-3.c: Likewise.\n+\t* gcc.target/i386/pr87317-4.c: Likewise.\n+\t* gcc.target/i386/pr87317-5.c: Likewise.\n+\t* gcc.target/i386/pr87317-6.c: Likewise.\n+\t* gcc.target/i386/pr87317-7.c: Likewise.\n+\t* gcc.target/i386/pr87317-8.c: Likewise.\n+\t* gcc.target/i386/pr87317-9.c: Likewise.\n+\t* gcc.target/i386/pr87317-10.c: Likewise.\n+\t* gcc.target/i386/pr87317-11.c: Likewise.\n+\t* gcc.target/i386/pr87317-12.c: Likewise.\n+\t* gcc.target/i386/pr87317-13.c: Likewise.\n+\n 2018-11-21  Tom de Vries  <tdevries@suse.de>\n \n \tPR driver/79855"}, {"sha": "ec6b11d371dbc2b57e1068d9069257f06200f22f", "filename": "gcc/testsuite/gcc.target/i386/pr87317-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-1.c?ref=ff8e1022cd74e2569354b86b6f0b657cff81bb02", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=haswell\" } */\n+/* { dg-final { scan-assembler-times \"vpmovzxbw\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vmovq\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+f (void *dst, void *ptr)\n+{\n+  __m128i data = _mm_cvtsi64_si128(*(long long int*)ptr);\n+  data = _mm_cvtepu8_epi16(data);\n+  _mm_storeu_si128((__m128i*)dst, data);\n+}"}, {"sha": "ea9a7a2f101cc87375b53e201eaebe3642decacf", "filename": "gcc/testsuite/gcc.target/i386/pr87317-10.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-10.c?ref=ff8e1022cd74e2569354b86b6f0b657cff81bb02", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=haswell\" } */\n+/* { dg-final { scan-assembler-times \"vpmovzxbd\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vmovq\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+f (void *dst, void *ptr)\n+{\n+  __m128i y = _mm_cvtsi64_si128(*(long long int*)ptr);\n+  __m256i z = _mm256_cvtepu8_epi32 (y);\n+  _mm256_storeu_si256((__m256i*)dst, z);\n+}"}, {"sha": "13f0c23458a41f448efd451bc99e742ec73eafa8", "filename": "gcc/testsuite/gcc.target/i386/pr87317-11.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-11.c?ref=ff8e1022cd74e2569354b86b6f0b657cff81bb02", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=haswell\" } */\n+/* { dg-final { scan-assembler-times \"vpmovzxwq\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vmovq\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+f (void *dst, void *ptr)\n+{\n+  __m128i y = _mm_cvtsi64_si128(*(long long int*)ptr);\n+  __m256i z = _mm256_cvtepu16_epi64 (y);\n+  _mm256_storeu_si256((__m256i*)dst, z);\n+}"}, {"sha": "1090966c4d1db849084ba3ef8cab2799bbb4592a", "filename": "gcc/testsuite/gcc.target/i386/pr87317-12.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-12.c?ref=ff8e1022cd74e2569354b86b6f0b657cff81bb02", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O3 -march=haswell\" } */\n+/* { dg-final { scan-assembler-times \"vpmovsxwq\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+#define MAX 4\n+\n+long long int dst[MAX];\n+short src[MAX];\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < MAX; i += 4)\n+    {\n+      __m128i data = _mm_cvtsi64_si128(*(long long int*)(src + i));\n+      __m256i x = _mm256_cvtepi16_epi64(data);\n+      _mm256_storeu_si256((__m256i*)(dst + i), x);\n+    }\n+}"}, {"sha": "d3c3def868044a288daf4f9559d682f6bdb53b67", "filename": "gcc/testsuite/gcc.target/i386/pr87317-13.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-13.c?ref=ff8e1022cd74e2569354b86b6f0b657cff81bb02", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vpmovzxbq\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vmovq\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+f (void *dst, void *ptr)\n+{\n+  __m128i y = _mm_cvtsi64_si128(*(long long int*)ptr);\n+  __m512i z = _mm512_cvtepu8_epi64 (y);\n+  _mm512_storeu_si512((__m512i*)dst, z);\n+}"}, {"sha": "e7eaaf66eef409ea4241bcd9ac8ee140616fc353", "filename": "gcc/testsuite/gcc.target/i386/pr87317-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-2.c?ref=ff8e1022cd74e2569354b86b6f0b657cff81bb02", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=haswell\" } */\n+/* { dg-final { scan-assembler-times \"vpmovsxwd\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vmovq\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+f (void *dst, void *ptr)\n+{\n+  __m128i data = _mm_cvtsi64_si128(*(long long int*)ptr);\n+  data = _mm_cvtepi16_epi32(data);\n+  _mm_storeu_si128((__m128i*)dst, data);\n+}"}, {"sha": "f2e041ab4af2e08ccf2912d11b25bea75d48942f", "filename": "gcc/testsuite/gcc.target/i386/pr87317-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-3.c?ref=ff8e1022cd74e2569354b86b6f0b657cff81bb02", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=haswell\" } */\n+/* { dg-final { scan-assembler-times \"vpmovsxdq\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vmovq\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+f (void *dst, void *ptr)\n+{\n+  __m128i data = _mm_cvtsi64_si128(*(long long int*)ptr);\n+  data = _mm_cvtepi32_epi64(data);\n+  _mm_storeu_si128((__m128i*)dst, data);\n+}"}, {"sha": "2d4f24a89e9bc6fc7f968ca050ed398fc796c2b1", "filename": "gcc/testsuite/gcc.target/i386/pr87317-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-4.c?ref=ff8e1022cd74e2569354b86b6f0b657cff81bb02", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=haswell\" } */\n+/* { dg-final { scan-assembler-times \"vpmovzxbd\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vmovd\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+f (void *dst, void *ptr)\n+{\n+  __m128i data = _mm_cvtsi32_si128(*(int*)ptr);\n+  data = _mm_cvtepu8_epi32(data);\n+  _mm_storeu_si128((__m128i*)dst, data);\n+}"}, {"sha": "96f82847e5d5392fbfa8e8564771774ecfdbfbfc", "filename": "gcc/testsuite/gcc.target/i386/pr87317-5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-5.c?ref=ff8e1022cd74e2569354b86b6f0b657cff81bb02", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=haswell\" } */\n+/* { dg-final { scan-assembler-times \"vpmovzxwq\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vmovd\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+f (void *dst, void *ptr)\n+{\n+  __m128i data = _mm_cvtsi32_si128(*(int*)ptr);\n+  data = _mm_cvtepu16_epi64(data);\n+  _mm_storeu_si128((__m128i*)dst, data);\n+}"}, {"sha": "4fe9b11c1be0988507c020390741d1b42971115b", "filename": "gcc/testsuite/gcc.target/i386/pr87317-6.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-6.c?ref=ff8e1022cd74e2569354b86b6f0b657cff81bb02", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=haswell\" } */\n+/* { dg-final { scan-assembler-times \"vpmovzxbq\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vmovq\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+f (void *dst, void *ptr)\n+{\n+  __m128i y = _mm_cvtsi32_si128(*(int*)ptr);\n+  __m256i z = _mm256_cvtepu8_epi64 (y);\n+  _mm256_storeu_si256((__m256i*)dst, z);\n+}"}, {"sha": "2c043d9eb26a025bf06a2c52be3b6dc7ffbdea87", "filename": "gcc/testsuite/gcc.target/i386/pr87317-7.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-7.c?ref=ff8e1022cd74e2569354b86b6f0b657cff81bb02", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=haswell\" } */\n+/* { dg-final { scan-assembler-times \"vpmovzxbd\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vmovd\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+f (void *dst, void *ptr)\n+{\n+  __m128i data = _mm_cvtsi32_si128(*(int*)ptr);\n+  data = _mm_cvtepu8_epi32(data);\n+  _mm_storeu_si128((__m128i*)dst, data);\n+}"}, {"sha": "178455f42c13e0c37ae7bfafea4af5d22a334620", "filename": "gcc/testsuite/gcc.target/i386/pr87317-8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-8.c?ref=ff8e1022cd74e2569354b86b6f0b657cff81bb02", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=haswell\" } */\n+/* { dg-final { scan-assembler-times \"vpmovzxwq\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vmovq\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+f (void *dst, void *ptr)\n+{\n+  __m128i data = _mm_cvtsi64_si128(*(long long int*)ptr);\n+  __m256i x = _mm256_cvtepu16_epi64(data);\n+  _mm256_storeu_si256((__m256i*)dst, x);\n+}"}, {"sha": "c5144fb667b109aa37eb03a6d80df1137da5da0b", "filename": "gcc/testsuite/gcc.target/i386/pr87317-9.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8e1022cd74e2569354b86b6f0b657cff81bb02/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-9.c?ref=ff8e1022cd74e2569354b86b6f0b657cff81bb02", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=haswell\" } */\n+/* { dg-final { scan-assembler-times \"vpmovzxbd\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vmovq\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+f (void *dst, void *ptr)\n+{\n+  __m128i data = _mm_cvtsi64_si128(*(long long int*)ptr);\n+  __m256i x = _mm256_cvtepu8_epi32(data);\n+  _mm256_storeu_si256((__m256i*)dst, x);\n+}"}]}