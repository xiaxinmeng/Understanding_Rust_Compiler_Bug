{"sha": "d74a8b0579edd0c42921eccc45ab986d24f2fef0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc0YThiMDU3OWVkZDBjNDI5MjFlY2NjNDVhYjk4NmQyNGYyZmVmMA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2019-08-17T05:45:37Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2019-08-17T05:45:37Z"}, "message": "PR fortran/68401 Improve allocation error message\n\nImprove the error message that is printed when a memory allocation\nfails, by including the location, and the size of the allocation that\nfailed.\n\nRegtested on x86_64-pc-linux-gnu.\n\ngcc/fortran/ChangeLog:\n\n2019-08-17  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/68401\n\t* trans-decl.c (gfc_build_builtin_function_decls): Replace\n\tos_error with os_error_at decl.\n\t* trans.c (trans_runtime_error_vararg): Modify so the error\n\tfunction decl is passed directly.\n\t(gfc_trans_runtime_error): Pass correct error function decl.\n\t(gfc_trans_runtime_check): Likewise.\n\t(trans_os_error_at): New function.\n\t(gfc_call_malloc): Use trans_os_error_at.\n\t(gfc_allocate_using_malloc): Likewise.\n\t(gfc_call_realloc): Likewise.\n\t* trans.h (gfor_fndecl_os_error): Replace with gfor_fndecl_os_error_at.\n\nlibgfortran/ChangeLog:\n\n2019-08-17  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/68401\n\t* gfortran.map: Add GFORTRAN_10 node, add _gfortran_os_error_at\n\tsymbol.\n\t* libgfortran.h (os_error_at): New prototype.\n\t* runtime/error.c (os_error_at): New function.\n\nFrom-SVN: r274599", "tree": {"sha": "2059efcc45ffef85dfef605dcc8b39c8765e07bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2059efcc45ffef85dfef605dcc8b39c8765e07bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d74a8b0579edd0c42921eccc45ab986d24f2fef0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74a8b0579edd0c42921eccc45ab986d24f2fef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74a8b0579edd0c42921eccc45ab986d24f2fef0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74a8b0579edd0c42921eccc45ab986d24f2fef0/comments", "author": null, "committer": null, "parents": [{"sha": "777c02825229f14cf91c6044827ea42a77ded4a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777c02825229f14cf91c6044827ea42a77ded4a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/777c02825229f14cf91c6044827ea42a77ded4a3"}], "stats": {"total": 162, "additions": 126, "deletions": 36}, "files": [{"sha": "a3b9e6bf486aeaeed074ff4ac457eb07ae0c7b66", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74a8b0579edd0c42921eccc45ab986d24f2fef0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74a8b0579edd0c42921eccc45ab986d24f2fef0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d74a8b0579edd0c42921eccc45ab986d24f2fef0", "patch": "@@ -1,3 +1,18 @@\n+2019-08-17  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/68401\n+\t* trans-decl.c (gfc_build_builtin_function_decls): Replace\n+\tos_error with os_error_at decl.\n+\t* trans.c (trans_runtime_error_vararg): Modify so the error\n+\tfunction decl is passed directly.\n+\t(gfc_trans_runtime_error): Pass correct error function decl.\n+\t(gfc_trans_runtime_check): Likewise.\n+\t(trans_os_error_at): New function.\n+\t(gfc_call_malloc): Use trans_os_error_at.\n+\t(gfc_allocate_using_malloc): Likewise.\n+\t(gfc_call_realloc): Likewise.\n+\t* trans.h (gfor_fndecl_os_error): Replace with gfor_fndecl_os_error_at.\n+\n 2019-08-16  Jeff Law <law@redhat.com>\n \t    Mark Eggleston <mark.eggleston@codethink.com>\n \n@@ -18,7 +33,7 @@\n \t* trans-common.c (find_equivalence) : New local variable dummy_symbol,\n \taccumulated equivalence attributes from each symbol then check for\n \tconflicts.\n-  \n+\n 2019-08-16  Richard Biener  <rguenther@suse.de>\n \n \t* trans-intrinsic.c (gfc_conv_intrinsic_findloc): Initialize"}, {"sha": "3c6ab60e9b24b0f12422d07f34c2a8a390b33de1", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74a8b0579edd0c42921eccc45ab986d24f2fef0/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74a8b0579edd0c42921eccc45ab986d24f2fef0/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=d74a8b0579edd0c42921eccc45ab986d24f2fef0", "patch": "@@ -102,7 +102,7 @@ tree gfor_fndecl_error_stop_string;\n tree gfor_fndecl_runtime_error;\n tree gfor_fndecl_runtime_error_at;\n tree gfor_fndecl_runtime_warning_at;\n-tree gfor_fndecl_os_error;\n+tree gfor_fndecl_os_error_at;\n tree gfor_fndecl_generate_error;\n tree gfor_fndecl_set_args;\n tree gfor_fndecl_set_fpe;\n@@ -3679,11 +3679,11 @@ gfc_build_builtin_function_decls (void)\n \tvoid_type_node, 3, pvoid_type_node, integer_type_node,\n \tpchar_type_node);\n \n-  gfor_fndecl_os_error = gfc_build_library_function_decl_with_spec (\n-\tget_identifier (PREFIX(\"os_error\")), \".R\",\n-\tvoid_type_node, 1, pchar_type_node);\n-  /* The runtime_error function does not return.  */\n-  TREE_THIS_VOLATILE (gfor_fndecl_os_error) = 1;\n+  gfor_fndecl_os_error_at = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"os_error_at\")), \".RR\",\n+\tvoid_type_node, -2, pchar_type_node, pchar_type_node);\n+  /* The os_error_at function does not return.  */\n+  TREE_THIS_VOLATILE (gfor_fndecl_os_error_at) = 1;\n \n   gfor_fndecl_set_args = gfc_build_library_function_decl (\n \tget_identifier (PREFIX(\"set_args\")),"}, {"sha": "583f6e3b25b653052743bca524032bf8cc3dbc3e", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 41, "deletions": 27, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74a8b0579edd0c42921eccc45ab986d24f2fef0/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74a8b0579edd0c42921eccc45ab986d24f2fef0/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=d74a8b0579edd0c42921eccc45ab986d24f2fef0", "patch": "@@ -447,7 +447,7 @@ gfc_build_array_ref (tree base, tree offset, tree decl, tree vptr)\n    arguments and a locus.  */\n \n static tree\n-trans_runtime_error_vararg (bool error, locus* where, const char* msgid,\n+trans_runtime_error_vararg (tree errorfunc, locus* where, const char* msgid,\n \t\t\t    va_list ap)\n {\n   stmtblock_t block;\n@@ -501,18 +501,13 @@ trans_runtime_error_vararg (bool error, locus* where, const char* msgid,\n   /* Build the function call to runtime_(warning,error)_at; because of the\n      variable number of arguments, we can't use build_call_expr_loc dinput_location,\n      irectly.  */\n-  if (error)\n-    fntype = TREE_TYPE (gfor_fndecl_runtime_error_at);\n-  else\n-    fntype = TREE_TYPE (gfor_fndecl_runtime_warning_at);\n+  fntype = TREE_TYPE (errorfunc);\n \n   loc = where ? where->lb->location : input_location;\n   tmp = fold_build_call_array_loc (loc, TREE_TYPE (fntype),\n \t\t\t\t   fold_build1_loc (loc, ADDR_EXPR,\n \t\t\t\t\t     build_pointer_type (fntype),\n-\t\t\t\t\t     error\n-\t\t\t\t\t     ? gfor_fndecl_runtime_error_at\n-\t\t\t\t\t     : gfor_fndecl_runtime_warning_at),\n+\t\t\t\t\t     errorfunc),\n \t\t\t\t   nargs + 2, argarray);\n   gfc_add_expr_to_block (&block, tmp);\n \n@@ -527,7 +522,10 @@ gfc_trans_runtime_error (bool error, locus* where, const char* msgid, ...)\n   tree result;\n \n   va_start (ap, msgid);\n-  result = trans_runtime_error_vararg (error, where, msgid, ap);\n+  result = trans_runtime_error_vararg (error\n+\t\t\t\t       ? gfor_fndecl_runtime_error_at\n+\t\t\t\t       : gfor_fndecl_runtime_warning_at,\n+\t\t\t\t       where, msgid, ap);\n   va_end (ap);\n   return result;\n }\n@@ -566,8 +564,10 @@ gfc_trans_runtime_check (bool error, bool once, tree cond, stmtblock_t * pblock,\n   /* The code to generate the error.  */\n   va_start (ap, msgid);\n   gfc_add_expr_to_block (&block,\n-\t\t\t trans_runtime_error_vararg (error, where,\n-\t\t\t\t\t\t     msgid, ap));\n+\t\t\t trans_runtime_error_vararg\n+\t\t\t (error ? gfor_fndecl_runtime_error_at\n+\t\t\t  : gfor_fndecl_runtime_warning_at,\n+\t\t\t  where, msgid, ap));\n   va_end (ap);\n \n   if (once)\n@@ -595,13 +595,28 @@ gfc_trans_runtime_check (bool error, bool once, tree cond, stmtblock_t * pblock,\n }\n \n \n+static tree\n+trans_os_error_at (locus* where, const char* msgid, ...)\n+{\n+  va_list ap;\n+  tree result;\n+\n+  va_start (ap, msgid);\n+  result = trans_runtime_error_vararg (gfor_fndecl_os_error_at,\n+\t\t\t\t       where, msgid, ap);\n+  va_end (ap);\n+  return result;\n+}\n+\n+\n+\n /* Call malloc to allocate size bytes of memory, with special conditions:\n       + if size == 0, return a malloced area of size 1,\n       + if malloc returns NULL, issue a runtime error.  */\n tree\n gfc_call_malloc (stmtblock_t * block, tree type, tree size)\n {\n-  tree tmp, msg, malloc_result, null_result, res, malloc_tree;\n+  tree tmp, malloc_result, null_result, res, malloc_tree;\n   stmtblock_t block2;\n \n   /* Create a variable to hold the result.  */\n@@ -626,13 +641,14 @@ gfc_call_malloc (stmtblock_t * block, tree type, tree size)\n       null_result = fold_build2_loc (input_location, EQ_EXPR,\n \t\t\t\t     logical_type_node, res,\n \t\t\t\t     build_int_cst (pvoid_type_node, 0));\n-      msg = gfc_build_addr_expr (pchar_type_node,\n-\t      gfc_build_localized_cstring_const (\"Memory allocation failed\"));\n       tmp = fold_build3_loc (input_location, COND_EXPR, void_type_node,\n \t\t\t     null_result,\n-\t      build_call_expr_loc (input_location,\n-\t\t\t\t   gfor_fndecl_os_error, 1, msg),\n-\t\t\t\t   build_empty_stmt (input_location));\n+\t\t\t     trans_os_error_at (NULL,\n+\t\t\t\t\t\t\"Error allocating %lu bytes\",\n+\t\t\t\t\t\tfold_convert\n+\t\t\t\t\t\t(long_unsigned_type_node,\n+\t\t\t\t\t\t size)),\n+\t\t\t     build_empty_stmt (input_location));\n       gfc_add_expr_to_block (&block2, tmp);\n     }\n \n@@ -701,11 +717,9 @@ gfc_allocate_using_malloc (stmtblock_t * block, tree pointer,\n     }\n   else\n     {\n-      /* Here, os_error already implies PRED_NORETURN.  */\n-      tmp = build_call_expr_loc (input_location, gfor_fndecl_os_error, 1,\n-\t\t    gfc_build_addr_expr (pchar_type_node,\n-\t\t\t\t gfc_build_localized_cstring_const\n-\t\t\t\t    (\"Allocation would exceed memory limit\")));\n+      /* Here, os_error_at already implies PRED_NORETURN.  */\n+      tree lusize = fold_convert (long_unsigned_type_node, size);\n+      tmp = trans_os_error_at (NULL, \"Error allocating %lu bytes\", lusize);\n       gfc_add_expr_to_block (&on_error, tmp);\n     }\n \n@@ -1664,7 +1678,7 @@ internal_realloc (void *mem, size_t size)\n tree\n gfc_call_realloc (stmtblock_t * block, tree mem, tree size)\n {\n-  tree msg, res, nonzero, null_result, tmp;\n+  tree res, nonzero, null_result, tmp;\n   tree type = TREE_TYPE (mem);\n \n   /* Only evaluate the size once.  */\n@@ -1684,12 +1698,12 @@ gfc_call_realloc (stmtblock_t * block, tree mem, tree size)\n \t\t\t     build_int_cst (size_type_node, 0));\n   null_result = fold_build2_loc (input_location, TRUTH_AND_EXPR, logical_type_node,\n \t\t\t\t null_result, nonzero);\n-  msg = gfc_build_addr_expr (pchar_type_node, gfc_build_localized_cstring_const\n-\t\t\t     (\"Allocation would exceed memory limit\"));\n   tmp = fold_build3_loc (input_location, COND_EXPR, void_type_node,\n \t\t\t null_result,\n-\t\t\t build_call_expr_loc (input_location,\n-\t\t\t\t\t      gfor_fndecl_os_error, 1, msg),\n+\t\t\t trans_os_error_at (NULL,\n+\t\t\t\t\t    \"Error reallocating to %lu bytes\",\n+\t\t\t\t\t    fold_convert\n+\t\t\t\t\t    (long_unsigned_type_node, size)),\n \t\t\t build_empty_stmt (input_location));\n   gfc_add_expr_to_block (block, tmp);\n "}, {"sha": "8082b414df119a90b62b42f83af43df678fb06de", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74a8b0579edd0c42921eccc45ab986d24f2fef0/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74a8b0579edd0c42921eccc45ab986d24f2fef0/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=d74a8b0579edd0c42921eccc45ab986d24f2fef0", "patch": "@@ -803,7 +803,7 @@ extern GTY(()) tree gfor_fndecl_error_stop_string;\n extern GTY(()) tree gfor_fndecl_runtime_error;\n extern GTY(()) tree gfor_fndecl_runtime_error_at;\n extern GTY(()) tree gfor_fndecl_runtime_warning_at;\n-extern GTY(()) tree gfor_fndecl_os_error;\n+extern GTY(()) tree gfor_fndecl_os_error_at;\n extern GTY(()) tree gfor_fndecl_generate_error;\n extern GTY(()) tree gfor_fndecl_set_fpe;\n extern GTY(()) tree gfor_fndecl_set_options;"}, {"sha": "23a4c579351a7ddda441960c2181606f8f936140", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74a8b0579edd0c42921eccc45ab986d24f2fef0/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74a8b0579edd0c42921eccc45ab986d24f2fef0/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=d74a8b0579edd0c42921eccc45ab986d24f2fef0", "patch": "@@ -1,3 +1,11 @@\n+2019-08-17  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/68401\n+\t* gfortran.map: Add GFORTRAN_10 node, add _gfortran_os_error_at\n+\tsymbol.\n+\t* libgfortran.h (os_error_at): New prototype.\n+\t* runtime/error.c (os_error_at): New function.\n+\n 2019-08-13  Janne Blomqvist  <jb@gcc.gnu.org>\n \n         PR fortran/91414"}, {"sha": "3601bc24414f2adeb62dc46266508d110f2ba2da", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74a8b0579edd0c42921eccc45ab986d24f2fef0/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74a8b0579edd0c42921eccc45ab986d24f2fef0/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=d74a8b0579edd0c42921eccc45ab986d24f2fef0", "patch": "@@ -1602,3 +1602,8 @@ GFORTRAN_9.2 {\n   _gfortran_mfindloc1_r10;\n   _gfortran_sfindloc1_r10;\n } GFORTRAN_9;\n+\n+GFORTRAN_10 {\n+  global:\n+  _gfortran_os_error_at;\n+} GFORTRAN_9.2;"}, {"sha": "9f535b12e73ff96dab6bf6b4273bce8bb09fb11b", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74a8b0579edd0c42921eccc45ab986d24f2fef0/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74a8b0579edd0c42921eccc45ab986d24f2fef0/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=d74a8b0579edd0c42921eccc45ab986d24f2fef0", "patch": "@@ -728,6 +728,10 @@ internal_proto(gfc_xtoa);\n extern _Noreturn void os_error (const char *);\n iexport_proto(os_error);\n \n+extern _Noreturn void os_error_at (const char *, const char *, ...)\n+  __attribute__ ((format (gfc_printf, 2, 3)));\n+iexport_proto(os_error_at);\n+\n extern void show_locus (st_parameter_common *);\n internal_proto(show_locus);\n "}, {"sha": "cbe0642f3f81025f49c9d845dfd952563aa8ac3c", "filename": "libgfortran/runtime/error.c", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74a8b0579edd0c42921eccc45ab986d24f2fef0/libgfortran%2Fruntime%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74a8b0579edd0c42921eccc45ab986d24f2fef0/libgfortran%2Fruntime%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Ferror.c?ref=d74a8b0579edd0c42921eccc45ab986d24f2fef0", "patch": "@@ -403,7 +403,51 @@ os_error (const char *message)\n   estr_writev (iov, 5);\n   exit_error (1);\n }\n-iexport(os_error);\n+iexport(os_error); /* TODO, DEPRECATED, ABI: Should not be exported\n+\t\t      anymore when bumping so version.  */\n+\n+\n+/* Improved version of os_error with a printf style format string and\n+   a locus.  */\n+\n+void\n+os_error_at (const char *where, const char *message, ...)\n+{\n+  char errmsg[STRERR_MAXSZ];\n+  char buffer[STRERR_MAXSZ];\n+  struct iovec iov[6];\n+  va_list ap;\n+  recursion_check ();\n+  int written;\n+\n+  iov[0].iov_base = (char*) where;\n+  iov[0].iov_len = strlen (where);\n+\n+  iov[1].iov_base = (char*) \": \";\n+  iov[1].iov_len = strlen (iov[1].iov_base);\n+\n+  va_start (ap, message);\n+  written = vsnprintf (buffer, STRERR_MAXSZ, message, ap);\n+  va_end (ap);\n+  iov[2].iov_base = buffer;\n+  if (written >= 0)\n+    iov[2].iov_len = written;\n+  else\n+    iov[2].iov_len = 0;\n+\n+  iov[3].iov_base = (char*) \": \";\n+  iov[3].iov_len = strlen (iov[3].iov_base);\n+\n+  iov[4].iov_base = gf_strerror (errno, errmsg, STRERR_MAXSZ);\n+  iov[4].iov_len = strlen (iov[4].iov_base);\n+\n+  iov[5].iov_base = (char*) \"\\n\";\n+  iov[5].iov_len = 1;\n+\n+  estr_writev (iov, 6);\n+  exit_error (1);\n+}\n+iexport(os_error_at);\n \n \n /* void runtime_error()-- These are errors associated with an"}]}