{"sha": "a08a2b75146b3b9f34692b58503126525e083429", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA4YTJiNzUxNDZiM2I5ZjM0NjkyYjU4NTAzMTI2NTI1ZTA4MzQyOQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-10-02T15:02:32Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-02T15:02:32Z"}, "message": "ByteBufferHelper.java: Rewrote all methods by suggestions from Eric Blake.\n\n2003-10-02  Michael Koch  <konqueror@gmx.de>\n\n\t* java/nio/ByteBufferHelper.java:\n\tRewrote all methods by suggestions from Eric Blake.\n\nFrom-SVN: r72030", "tree": {"sha": "2ae559227c26c8a6dcae9d705a33be7d47c812db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ae559227c26c8a6dcae9d705a33be7d47c812db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a08a2b75146b3b9f34692b58503126525e083429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a08a2b75146b3b9f34692b58503126525e083429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a08a2b75146b3b9f34692b58503126525e083429", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a08a2b75146b3b9f34692b58503126525e083429/comments", "author": null, "committer": null, "parents": [{"sha": "eae216e8c3e6e633fd52d25ce8cbb16606ae1c81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae216e8c3e6e633fd52d25ce8cbb16606ae1c81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae216e8c3e6e633fd52d25ce8cbb16606ae1c81"}], "stats": {"total": 273, "additions": 117, "deletions": 156}, "files": [{"sha": "4b7406f615ebd458751c875a46d4378337d09d55", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a08a2b75146b3b9f34692b58503126525e083429/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a08a2b75146b3b9f34692b58503126525e083429/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a08a2b75146b3b9f34692b58503126525e083429", "patch": "@@ -1,3 +1,8 @@\n+2003-10-02  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/nio/ByteBufferHelper.java:\n+\tRewrote all methods by suggestions from Eric Blake.\n+\n 2003-10-02  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/URL.java"}, {"sha": "23e133c86b373c215d1939e145f232914b0b52d6", "filename": "libjava/java/nio/ByteBufferHelper.java", "status": "modified", "additions": 112, "deletions": 156, "changes": 268, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a08a2b75146b3b9f34692b58503126525e083429/libjava%2Fjava%2Fnio%2FByteBufferHelper.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a08a2b75146b3b9f34692b58503126525e083429/libjava%2Fjava%2Fnio%2FByteBufferHelper.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FByteBufferHelper.java?ref=a08a2b75146b3b9f34692b58503126525e083429", "patch": "@@ -70,67 +70,23 @@ private static final void checkAvailableForWrite (ByteBuffer buffer,\n   \n   public static final char getChar (ByteBuffer buffer)\n   {\n-    checkRemainingForRead (buffer, 2);\n-\n-    if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n-      {\n-        return (char) ((buffer.get() & 0xff)\n-                       + ((buffer.get() & 0xff) << 8));\n-      }\n-    \n-    return (char) (((buffer.get() & 0xff) << 8)\n-                   + (buffer.get() & 0xff));\n+    return (char) getShort (buffer);\n   }\n   \n   public static final ByteBuffer putChar (ByteBuffer buffer, char value)\n   {\n-    checkRemainingForWrite (buffer, 2);\n-\n-    if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n-      {\n-        buffer.put ((byte) (value & 0x00ff));\n-        buffer.put ((byte) ((value & 0xff00) >> 8));\n-      }\n-    else\n-      {\n-        buffer.put ((byte) ((value & 0xff00) >> 8));\n-        buffer.put ((byte) (value & 0x00ff));\n-      }\n-\n-    return buffer;\n+    return putShort (buffer, (short) value);\n   }\n   \n   public static final char getChar (ByteBuffer buffer, int index)\n   {\n-    checkAvailableForRead (buffer, index, 2);\n-    \n-    if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n-      {\n-        return (char) ((buffer.get (index) & 0xff)\n-                       + ((buffer.get (index + 1) & 0xff) << 8));\n-      }\n-\n-    return (char) (((buffer.get (index) & 0xff) << 8)\n-                   + (buffer.get (index + 1) & 0xff));\n+    return (char) getShort (buffer, index);\n   }\n   \n   public static final ByteBuffer putChar (ByteBuffer buffer, int index,\n                                           char value)\n   {\n-    checkAvailableForWrite (buffer, index, 2);\n-\n-    if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n-      {\n-        buffer.put (index, (byte) (value & 0xff00));\n-        buffer.put (index + 1, (byte) ((value & 0x00ff) >> 8));\n-      }\n-    else\n-      {\n-        buffer.put (index, (byte) ((value & 0xff00) >> 8));\n-        buffer.put (index + 1, (byte) (value & 0x00ff));\n-      }\n-    \n-    return buffer;\n+    return putShort (buffer, index, (short) value);\n   }\n \n   public static final short getShort (ByteBuffer buffer)\n@@ -140,10 +96,10 @@ public static final short getShort (ByteBuffer buffer)\n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n         return (short) ((buffer.get() & 0xff)\n-                        + ((buffer.get() & 0xff) << 8));\n+                        + (buffer.get() << 8));\n       }\n \n-    return (short) (((buffer.get() & 0xff) << 8)\n+    return (short) ((buffer.get() << 8)\n                     + (buffer.get() & 0xff));\n   }\n   \n@@ -153,13 +109,13 @@ public static final ByteBuffer putShort (ByteBuffer buffer, short value)\n \n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n-        buffer.put ((byte) (value & 0x00ff));\n-        buffer.put ((byte) ((value & 0xff00) >> 8));\n+        buffer.put ((byte) value);\n+        buffer.put ((byte) (value >> 8));\n       }\n     else\n       {\n-        buffer.put ((byte) ((value & 0xff00) >> 8));\n-        buffer.put ((byte) (value & 0x00ff));\n+        buffer.put ((byte) (value >> 8));\n+        buffer.put ((byte) value);\n       }\n \n     return buffer;\n@@ -172,11 +128,11 @@ public static final short getShort (ByteBuffer buffer, int index)\n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n         return (short) ((buffer.get (index) & 0xff)\n-                        + ((buffer.get (index + 1) & 0xff) << 8));\n+                        + (buffer.get (++index) << 8));\n       }\n \n-    return (short) (((buffer.get (index) & 0xff) << 8)\n-                    + (buffer.get (index + 1) & 0xff));\n+    return (short) ((buffer.get (index) << 8)\n+                    + (buffer.get (++index) & 0xff));\n   }\n   \n   public static final ByteBuffer putShort (ByteBuffer buffer, int index,\n@@ -186,13 +142,13 @@ public static final ByteBuffer putShort (ByteBuffer buffer, int index,\n \n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n-        buffer.put (index, (byte) (value & 0x00ff));\n-        buffer.put (index + 1, (byte) ((value & 0xff00) >> 8));\n+        buffer.put (index, (byte) value);\n+        buffer.put (++index, (byte) (value >> 8));\n       }\n     else\n       {\n-        buffer.put (index, (byte) ((value & 0xff00) >> 8));\n-        buffer.put (index + 1, (byte) (value & 0x00ff));\n+        buffer.put (index, (byte) (value >> 8));\n+        buffer.put (++index, (byte) value);\n       }\n     \n     return buffer;\n@@ -204,13 +160,13 @@ public static final int getInt (ByteBuffer buffer)\n \n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n-        return (int) ((buffer.get() & 0xff)\n-                      + ((buffer.get() & 0xff) << 8)\n-                      + ((buffer.get() & 0xff) << 16)\n-                      + ((buffer.get() & 0xff) << 24));\n+        return ((buffer.get() & 0xff)\n+                + ((buffer.get() & 0xff) << 8)\n+                + ((buffer.get() & 0xff) << 16)\n+                + (buffer.get() << 24));\n       }\n \n-    return (int) (((buffer.get() & 0xff) << 24)\n+    return (int) ((buffer.get() << 24)\n                   + ((buffer.get() & 0xff) << 16)\n                   + ((buffer.get() & 0xff) << 8)\n                   + (buffer.get() & 0xff));\n@@ -222,17 +178,17 @@ public static final ByteBuffer putInt (ByteBuffer buffer, int value)\n \n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n-        buffer.put ((byte) (value & 0x000000ff));\n-        buffer.put ((byte) ((value & 0x0000ff00) >> 8));\n-        buffer.put ((byte) ((value & 0x00ff0000) >> 16));\n-        buffer.put ((byte) ((value & 0xff000000) >> 24));\n+        buffer.put ((byte) value);\n+        buffer.put ((byte) (value >> 8));\n+        buffer.put ((byte) (value >> 16));\n+        buffer.put ((byte) (value >> 24));\n       }\n     else\n       {\n-        buffer.put ((byte) ((value & 0xff000000) >> 24));\n-        buffer.put ((byte) ((value & 0x00ff0000) >> 16));\n-        buffer.put ((byte) ((value & 0x0000ff00) >> 8));\n-        buffer.put ((byte) (value & 0x000000ff));\n+        buffer.put ((byte) (value >> 24));\n+        buffer.put ((byte) (value >> 16));\n+        buffer.put ((byte) (value >> 8));\n+        buffer.put ((byte) value);\n       }\n     \n     return buffer;\n@@ -244,16 +200,16 @@ public static final int getInt (ByteBuffer buffer, int index)\n \n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n-        return (int) ((buffer.get (index) & 0xff))\n-                      + ((buffer.get (index + 1) & 0xff) << 8)\n-                      + ((buffer.get (index + 2) & 0xff) << 16)\n-                      + ((buffer.get (index + 3) & 0xff) << 24);\n+        return ((buffer.get (index) & 0xff)\n+                + ((buffer.get (++index) & 0xff) << 8)\n+                + ((buffer.get (++index) & 0xff) << 16)\n+                + (buffer.get (++index) << 24));\n       }\n \n-    return (int) (((buffer.get (index) & 0xff) << 24)\n-                  + ((buffer.get (index + 1) & 0xff) << 16)\n-                  + ((buffer.get (index + 2) & 0xff) << 8)\n-                  + (buffer.get (index + 3) & 0xff));\n+    return ((buffer.get (index) << 24)\n+            + ((buffer.get (++index) & 0xff) << 16)\n+            + ((buffer.get (++index) & 0xff) << 8)\n+            + (buffer.get (++index) & 0xff));\n   }\n   \n   public static final ByteBuffer putInt (ByteBuffer buffer, int index,\n@@ -263,17 +219,17 @@ public static final ByteBuffer putInt (ByteBuffer buffer, int index,\n \n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n-        buffer.put (index, (byte) (value & 0x000000ff));\n-        buffer.put (index + 1, (byte) ((value & 0x0000ff00) >> 8));\n-        buffer.put (index + 2, (byte) ((value & 0x00ff0000) >> 16));\n-        buffer.put (index + 3, (byte) ((value & 0xff000000) >> 24));\n+        buffer.put (index, (byte) value);\n+        buffer.put (++index, (byte) (value >> 8));\n+        buffer.put (++index, (byte) (value >> 16));\n+        buffer.put (++index, (byte) (value >> 24));\n       }\n     else\n       {\n-        buffer.put (index, (byte) ((value & 0xff000000) >> 24));\n-        buffer.put (index + 1, (byte) ((value & 0x00ff0000) >> 16));\n-        buffer.put (index + 2, (byte) ((value & 0x0000ff00) >> 8));\n-        buffer.put (index + 3, (byte) (value & 0x000000ff));\n+        buffer.put (index, (byte) (value >> 24));\n+        buffer.put (++index, (byte) (value >> 16));\n+        buffer.put (++index, (byte) (value >> 8));\n+        buffer.put (++index, (byte) value);\n       }\n   \n     return buffer;\n@@ -285,24 +241,24 @@ public static final long getLong (ByteBuffer buffer)\n \n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n-        return (long) (((buffer.get() & 0xff))\n-                       + ((buffer.get() & 0xff) << 8)\n-                       + ((buffer.get() & 0xff) << 16)\n-                       + ((buffer.get() & 0xff) << 24)\n-                       + ((buffer.get() & 0xffL) << 32)\n-                       + ((buffer.get() & 0xffL) << 40)\n-                       + ((buffer.get() & 0xffL) << 48)\n-                       + ((buffer.get() & 0xffL) << 56));\n+        return ((buffer.get() & 0xff)\n+                + (((buffer.get() & 0xff)) << 8)\n+                + (((buffer.get() & 0xff)) << 16)\n+                + (((buffer.get() & 0xffL)) << 24)\n+                + (((buffer.get() & 0xffL)) << 32)\n+                + (((buffer.get() & 0xffL)) << 40)\n+                + (((buffer.get() & 0xffL)) << 48)\n+                + (((long) buffer.get()) << 56));\n       }\n \n-    return (long) (((buffer.get() & 0xffL) << 56)\n-                   + ((buffer.get() & 0xffL) << 48)\n-                   + ((buffer.get() & 0xffL) << 40)\n-                   + ((buffer.get() & 0xffL) << 32)\n-                   + ((buffer.get() & 0xff) << 24)\n-                   + ((buffer.get() & 0xff) << 16)\n-                   + ((buffer.get() & 0xff) << 8)\n-                   + (buffer.get() & 0xff));\n+    return ((((long) buffer.get()) << 56)\n+            + ((buffer.get() & 0xffL) << 48)\n+            + ((buffer.get() & 0xffL) << 40)\n+            + ((buffer.get() & 0xffL) << 32)\n+            + ((buffer.get() & 0xffL) << 24)\n+            + ((buffer.get() & 0xff) << 16)\n+            + ((buffer.get() & 0xff) << 8)\n+            + (buffer.get() & 0xff));\n   }\n   \n   public static final ByteBuffer putLong (ByteBuffer buffer, long value)\n@@ -311,25 +267,25 @@ public static final ByteBuffer putLong (ByteBuffer buffer, long value)\n \n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n-        buffer.put ((byte) (((int) value) & 0xff));\n-        buffer.put ((byte) (((int) (value >> 8)) & 0xff));\n-        buffer.put ((byte) (((int) (value >> 16)) & 0xff));\n-        buffer.put ((byte) (((int) (value >> 24)) & 0xff));\n-        buffer.put ((byte) (((int) (value >> 32)) & 0xff));\n-        buffer.put ((byte) (((int) (value >> 40)) & 0xff));\n-        buffer.put ((byte) (((int) (value >> 48)) & 0xff));\n-        buffer.put ((byte) (((int) (value >> 56)) & 0xff));\n+        buffer.put ((byte) value);\n+        buffer.put ((byte) (value >> 8));\n+        buffer.put ((byte) (value >> 16));\n+        buffer.put ((byte) (value >> 24));\n+        buffer.put ((byte) (value >> 32));\n+        buffer.put ((byte) (value >> 40));\n+        buffer.put ((byte) (value >> 48));\n+        buffer.put ((byte) (value >> 56));\n       }\n     else\n       {\n-        buffer.put ((byte) (((int) (value >> 56)) & 0xff));\n-        buffer.put ((byte) (((int) (value >> 48)) & 0xff));\n-        buffer.put ((byte) (((int) (value >> 40)) & 0xff));\n-        buffer.put ((byte) (((int) (value >> 32)) & 0xff));\n-        buffer.put ((byte) (((int) (value >> 24)) & 0xff));\n-        buffer.put ((byte) (((int) (value >> 16)) & 0xff));\n-        buffer.put ((byte) (((int) (value >> 8)) & 0xff));\n-        buffer.put ((byte) (((int) value) & 0xff));\n+        buffer.put ((byte) (value >> 56));\n+        buffer.put ((byte) (value >> 48));\n+        buffer.put ((byte) (value >> 40));\n+        buffer.put ((byte) (value >> 32));\n+        buffer.put ((byte) (value >> 24));\n+        buffer.put ((byte) (value >> 16));\n+        buffer.put ((byte) (value >> 8));\n+        buffer.put ((byte) value);\n       }\n     \n     return buffer;\n@@ -341,24 +297,24 @@ public static final long getLong (ByteBuffer buffer, int index)\n \n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n-        return (long) ((buffer.get (index) & 0xff)\n-                       + ((buffer.get (index + 1) & 0xff) << 8)\n-                       + ((buffer.get (index + 2) & 0xff) << 16)\n-                       + ((buffer.get (index + 3) & 0xff) << 24)\n-                       + ((buffer.get (index + 4) & 0xffL) << 32)\n-                       + ((buffer.get (index + 5) & 0xffL) << 40)\n-                       + ((buffer.get (index + 6) & 0xffL) << 48)\n-                       + ((buffer.get (index + 7) & 0xffL) << 56));\n+        return ((buffer.get (index) & 0xff)\n+                + ((buffer.get (++index) & 0xff) << 8)\n+                + ((buffer.get (++index) & 0xff) << 16)\n+                + ((buffer.get (++index) & 0xffL) << 24)\n+                + ((buffer.get (++index) & 0xffL) << 32)\n+                + ((buffer.get (++index) & 0xffL) << 40)\n+                + ((buffer.get (++index) & 0xffL) << 48)\n+                + (((long) buffer.get (++index)) << 56));\n       }\n \n-    return (long) (((buffer.get (index) & 0xffL) << 56)\n-                   + ((buffer.get (index + 1) & 0xffL) << 48)\n-                   + ((buffer.get (index + 2) & 0xffL) << 40)\n-                   + ((buffer.get (index + 3) & 0xffL) << 32)\n-                   + ((buffer.get (index + 4) & 0xff) << 24)\n-                   + ((buffer.get (index + 5) & 0xff) << 16)\n-                   + ((buffer.get (index + 6) & 0xff) << 8)\n-                   + (buffer.get (index + 7) & 0xff));\n+    return ((((long) buffer.get (index)) << 56)\n+            + ((buffer.get (++index) & 0xffL) << 48)\n+            + ((buffer.get (++index) & 0xffL) << 40)\n+            + ((buffer.get (++index) & 0xffL) << 32)\n+            + ((buffer.get (++index) & 0xffL) << 24)\n+            + ((buffer.get (++index) & 0xff) << 16)\n+            + ((buffer.get (++index) & 0xff) << 8)\n+            + (buffer.get (++index) & 0xff));\n   }\n   \n   public static final ByteBuffer putLong (ByteBuffer buffer, int index,\n@@ -368,25 +324,25 @@ public static final ByteBuffer putLong (ByteBuffer buffer, int index,\n \n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n-        buffer.put (index, (byte) (((int) value) & 0xff));\n-        buffer.put (index + 1, (byte) (((int) (value >> 8)) & 0xff));\n-        buffer.put (index + 2, (byte) (((int) (value >> 16)) & 0xff));\n-        buffer.put (index + 3, (byte) (((int) (value >> 24)) & 0xff));\n-        buffer.put (index + 4, (byte) (((int) (value >> 32)) & 0xff));\n-        buffer.put (index + 5, (byte) (((int) (value >> 40)) & 0xff));\n-        buffer.put (index + 6, (byte) (((int) (value >> 48)) & 0xff));\n-        buffer.put (index + 7, (byte) (((int) (value >> 56)) & 0xff));\n+        buffer.put (index, (byte) value);\n+        buffer.put (++index, (byte) (value >> 8));\n+        buffer.put (++index, (byte) (value >> 16));\n+        buffer.put (++index, (byte) (value >> 24));\n+        buffer.put (++index, (byte) (value >> 32));\n+        buffer.put (++index, (byte) (value >> 40));\n+        buffer.put (++index, (byte) (value >> 48));\n+        buffer.put (++index, (byte) (value >> 56));\n       }\n     else\n       {\n-        buffer.put (index, (byte) (((int) (value >> 56)) & 0xff));\n-        buffer.put (index + 1, (byte) (((int) (value >> 48)) & 0xff));\n-        buffer.put (index + 2, (byte) (((int) (value >> 40)) & 0xff));\n-        buffer.put (index + 3, (byte) (((int) (value >> 32)) & 0xff));\n-        buffer.put (index + 4, (byte) (((int) (value >> 24)) & 0xff));\n-        buffer.put (index + 5, (byte) (((int) (value >> 16)) & 0xff));\n-        buffer.put (index + 6, (byte) (((int) (value >> 8)) & 0xff));\n-        buffer.put (index + 7, (byte) (((int) value) & 0xff));\n+        buffer.put (index, (byte) (value >> 56));\n+        buffer.put (++index, (byte) (value >> 48));\n+        buffer.put (++index, (byte) (value >> 40));\n+        buffer.put (++index, (byte) (value >> 32));\n+        buffer.put (++index, (byte) (value >> 24));\n+        buffer.put (++index, (byte) (value >> 16));\n+        buffer.put (++index, (byte) (value >> 8));\n+        buffer.put (++index, (byte) value);\n       }\n     \n     return buffer;\n@@ -399,7 +355,7 @@ public static final float getFloat (ByteBuffer buffer)\n   \n   public static final ByteBuffer putFloat (ByteBuffer buffer, float value)\n   {\n-    return putInt (buffer, Float.floatToIntBits (value));\n+    return putInt (buffer, Float.floatToRawIntBits (value));\n   }\n   \n   public static final float getFloat (ByteBuffer buffer, int index)\n@@ -410,7 +366,7 @@ public static final float getFloat (ByteBuffer buffer, int index)\n   public static final ByteBuffer putFloat (ByteBuffer buffer, int index,\n                                            float value)\n   {\n-    return putInt (buffer, index, Float.floatToIntBits (value));\n+    return putInt (buffer, index, Float.floatToRawIntBits (value));\n   }\n \n   public static final double getDouble (ByteBuffer buffer)"}]}