{"sha": "7d4440be74b9475fcef844e6cab5c1e94a429b71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q0NDQwYmU3NGI5NDc1ZmNlZjg0NGU2Y2FiNWMxZTk0YTQyOWI3MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-10-22T09:11:55Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-10-22T09:11:55Z"}, "message": ".\n\nFrom-SVN: r12994", "tree": {"sha": "02ef86d16790817c9b1d7f5be27631327bd79b68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02ef86d16790817c9b1d7f5be27631327bd79b68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d4440be74b9475fcef844e6cab5c1e94a429b71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4440be74b9475fcef844e6cab5c1e94a429b71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4440be74b9475fcef844e6cab5c1e94a429b71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4440be74b9475fcef844e6cab5c1e94a429b71/comments", "author": null, "committer": null, "parents": [{"sha": "bb60ac63054d8b69423828cb780c95b60087aaf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb60ac63054d8b69423828cb780c95b60087aaf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb60ac63054d8b69423828cb780c95b60087aaf5"}], "stats": {"total": 29, "additions": 8, "deletions": 21}, "files": [{"sha": "f67b1d5780bfee0275ef61f49a6ae1946476f71d", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4440be74b9475fcef844e6cab5c1e94a429b71/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4440be74b9475fcef844e6cab5c1e94a429b71/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=7d4440be74b9475fcef844e6cab5c1e94a429b71", "patch": "@@ -6062,7 +6062,7 @@ add_name_and_src_coords_attributes (die, decl)\n {\n   register tree decl_name;\n   register unsigned file_index;\n-  if (staticp (decl))\n+  if (decl_function_context (decl) == NULL_TREE)\n     decl_name = DECL_ASSEMBLER_NAME (decl);\n   else\n     decl_name = DECL_NAME (decl); \n@@ -6118,13 +6118,8 @@ scope_die_for (t, context_die)\n     {\n       for (i = decl_scope_depth, scope_die = context_die;\n \t   i > 0 && decl_scope_table[i - 1] != containing_scope;\n-\t   scope_die = scope_die->die_parent)\n-\t{\n-\t  if (scope_die->die_tag == DW_TAG_lexical_block)\n-\t    /* nothing */ ;\n-\t  else\n-\t    --i;\n-\t}\n+\t   scope_die = scope_die->die_parent, --i)\n+\t/* nothing */ ;\n       if (i == 0)\n \t{\n \t  assert (scope_die == comp_unit_die);\n@@ -6655,14 +6650,8 @@ gen_subprogram_die (decl, context_die)\n     {\n       if (origin == NULL)\n \tequate_decl_number_to_die (decl, subr_die);\n-      if (DECL_WEAK (current_function_decl)\n-\t  || DECL_ONE_ONLY (current_function_decl))\n-\t{\n-\t  sprintf (label_id, FUNC_BEGIN_LABEL_FMT, current_funcdef_number);\n-\t  add_AT_lbl_id (subr_die, DW_AT_low_pc, label_id);\n-\t}\n-      else\n-\tadd_AT_lbl_id (subr_die, DW_AT_low_pc, decl_start_label (decl));\n+      sprintf (label_id, FUNC_BEGIN_LABEL_FMT, current_funcdef_number);\n+      add_AT_lbl_id (subr_die, DW_AT_low_pc, label_id);\n       sprintf (label_id, FUNC_END_LABEL_FMT, current_funcdef_number);\n       add_AT_lbl_id (subr_die, DW_AT_high_pc, label_id);\n \n@@ -6915,7 +6904,9 @@ gen_lexical_block_die (stmt, context_die, depth)\n       sprintf (label, BLOCK_END_LABEL_FMT, next_block_number);\n       add_AT_lbl_id (stmt_die, DW_AT_high_pc, label);\n     }\n+  push_decl_scope (stmt);\n   decls_for_scope (stmt, stmt_die, depth);\n+  pop_decl_scope ();\n }\n \n /* Generate a DIE for an inlined subprogram.  */\n@@ -7899,11 +7890,7 @@ dwarfout_begin_prologue ()\n \n   /* Add the new FDE at the end of the fde_table.  */\n   fde = &fde_table[fde_table_in_use++];\n-  if (DECL_WEAK (current_function_decl)\n-      || DECL_ONE_ONLY (current_function_decl))\n-    fde->dw_fde_begin = xstrdup (label);\n-  else\n-    fde->dw_fde_begin = xstrdup (decl_start_label (current_function_decl));\n+  fde->dw_fde_begin = xstrdup (label);\n   fde->dw_fde_end_prolog = NULL;\n   fde->dw_fde_begin_epilogue = NULL;\n   fde->dw_fde_end = NULL;"}]}