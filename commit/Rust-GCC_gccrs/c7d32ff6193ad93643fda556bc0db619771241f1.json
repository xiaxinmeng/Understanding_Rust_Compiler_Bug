{"sha": "c7d32ff6193ad93643fda556bc0db619771241f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdkMzJmZjYxOTNhZDkzNjQzZmRhNTU2YmMwZGI2MTk3NzEyNDFmMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-10-29T15:25:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-10-29T15:25:52Z"}, "message": "builtins.c (expand_builtin_mathfn): Expand nearbyint as rint in case -fno-trapping-math is enabled.\n\n2006-10-29  Richard Guenther  <rguenther@suse.de>\n\n\t* builtins.c (expand_builtin_mathfn): Expand nearbyint as\n\trint in case -fno-trapping-math is enabled.\n\t* config/i386/i386-protos.h (ix86_expand_rint): Declare.\n\t* config/i386/i386.c (ix86_gen_TWO52): New static helper function.\n\t(ix86_expand_sse_fabs): Likewise.\n\t(ix86_expand_rint): New function expanding rint to x87 or SSE math.\n\t* config/i386/i386.md (rintdf2): Enable for SSE math if\n        -fno-trapping-math is enabled, use ix86_expand_rint for expansion.\n\t(rintsf2): Likewise.\n\n\t* gcc.target/i386/math-torture/rint.c: New testcase.\n\t* gcc.target/i386/math-torture/nearbyint.c: Likewise.\n\nFrom-SVN: r118144", "tree": {"sha": "38f06c5cf989a34603cefe1af8322e66282f0d4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38f06c5cf989a34603cefe1af8322e66282f0d4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7d32ff6193ad93643fda556bc0db619771241f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d32ff6193ad93643fda556bc0db619771241f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7d32ff6193ad93643fda556bc0db619771241f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d32ff6193ad93643fda556bc0db619771241f1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3a4177fe14190fda53e6a31236dcb8e23cf28f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a4177fe14190fda53e6a31236dcb8e23cf28f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a4177fe14190fda53e6a31236dcb8e23cf28f8"}], "stats": {"total": 185, "additions": 168, "deletions": 17}, "files": [{"sha": "64d7f6e1b5d7bacc28c5255e983b7c0fc7dd8196", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d32ff6193ad93643fda556bc0db619771241f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d32ff6193ad93643fda556bc0db619771241f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7d32ff6193ad93643fda556bc0db619771241f1", "patch": "@@ -1,3 +1,15 @@\n+2006-10-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* builtins.c (expand_builtin_mathfn): Expand nearbyint as\n+\trint in case -fno-trapping-math is enabled.\n+\t* config/i386/i386-protos.h (ix86_expand_rint): Declare.\n+\t* config/i386/i386.c (ix86_gen_TWO52): New static helper function.\n+\t(ix86_expand_sse_fabs): Likewise.\n+\t(ix86_expand_rint): New function expanding rint to x87 or SSE math.\n+\t* config/i386/i386.md (rintdf2): Enable for SSE math if\n+\t-fno-trapping-math is enabled, use ix86_expand_rint for expansion.\n+\t(rintsf2): Likewise.\n+\n 2006-10-29  Richard Guenther  <rguenther@suse.de>\n \n \t* genopinit.c (optabs): Change lfloor_optab and lceil_optab"}, {"sha": "5375c5c77aba2205f5de02247eee4e408945d0cc", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d32ff6193ad93643fda556bc0db619771241f1/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d32ff6193ad93643fda556bc0db619771241f1/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c7d32ff6193ad93643fda556bc0db619771241f1", "patch": "@@ -1835,7 +1835,10 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n     CASE_FLT_FN (BUILT_IN_ROUND):\n       builtin_optab = round_optab; break;\n     CASE_FLT_FN (BUILT_IN_NEARBYINT):\n-      builtin_optab = nearbyint_optab; break;\n+      builtin_optab = nearbyint_optab;\n+      if (flag_trapping_math)\n+\tbreak;\n+      /* Else fallthrough and expand as rint.  */\n     CASE_FLT_FN (BUILT_IN_RINT):\n       builtin_optab = rint_optab; break;\n     default:"}, {"sha": "4cb110c98330d369ff655c793d8a643c252e19c0", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d32ff6193ad93643fda556bc0db619771241f1/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d32ff6193ad93643fda556bc0db619771241f1/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=c7d32ff6193ad93643fda556bc0db619771241f1", "patch": "@@ -159,6 +159,7 @@ extern enum rtx_code ix86_reverse_condition (enum rtx_code, enum machine_mode);\n \n extern void ix86_expand_lround (rtx, rtx);\n extern void ix86_expand_lfloorceil (rtx, rtx, bool);\n+extern void ix86_expand_rint (rtx, rtx);\n \n #ifdef TREE_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);"}, {"sha": "a12453604fe6ec68ecb3dae51db81db862847e37", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 92, "deletions": 8, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d32ff6193ad93643fda556bc0db619771241f1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d32ff6193ad93643fda556bc0db619771241f1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c7d32ff6193ad93643fda556bc0db619771241f1", "patch": "@@ -19225,13 +19225,44 @@ asm_preferred_eh_data_format (int code, int global)\n }\n \f\n /* Expand copysign from SIGN to the positive value ABS_VALUE\n-   storing in RESULT.  */\n+   storing in RESULT.  If MASK is non-null, it shall be a mask to mask out\n+   the sign-bit.  */\n static void\n-ix86_sse_copysign_to_positive (rtx result, rtx abs_value, rtx sign)\n+ix86_sse_copysign_to_positive (rtx result, rtx abs_value, rtx sign, rtx mask)\n {\n   enum machine_mode mode = GET_MODE (sign);\n   rtx sgn = gen_reg_rtx (mode);\n-  rtx mask = ix86_build_signbit_mask (mode, VECTOR_MODE_P (mode), false);\n+  if (mask == NULL_RTX)\n+    {\n+      mask = ix86_build_signbit_mask (mode, VECTOR_MODE_P (mode), false);\n+      if (!VECTOR_MODE_P (mode))\n+\t{\n+\t  /* We need to generate a scalar mode mask in this case.  */\n+\t  rtx tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (1, const0_rtx));\n+\t  tmp = gen_rtx_VEC_SELECT (mode, mask, tmp);\n+\t  mask = gen_reg_rtx (mode);\n+\t  emit_insn (gen_rtx_SET (VOIDmode, mask, tmp));\n+\t}\n+    }\n+  else\n+    mask = gen_rtx_NOT (mode, mask);\n+  emit_insn (gen_rtx_SET (VOIDmode, sgn,\n+\t\t\t  gen_rtx_AND (mode, mask, sign)));\n+  emit_insn (gen_rtx_SET (VOIDmode, result,\n+\t\t\t  gen_rtx_IOR (mode, abs_value, sgn)));\n+}\n+\n+/* Expand fabs (OP0) and return a new rtx that holds the result.  The\n+   mask for masking out the sign-bit is stored in *SMASK, if that is\n+   non-null.  */\n+static rtx\n+ix86_expand_sse_fabs (rtx op0, rtx *smask)\n+{\n+  enum machine_mode mode = GET_MODE (op0);\n+  rtx xa, mask;\n+\n+  xa = gen_reg_rtx (mode);\n+  mask = ix86_build_signbit_mask (mode, VECTOR_MODE_P (mode), true);\n   if (!VECTOR_MODE_P (mode))\n     {\n       /* We need to generate a scalar mode mask in this case.  */\n@@ -19240,10 +19271,13 @@ ix86_sse_copysign_to_positive (rtx result, rtx abs_value, rtx sign)\n       mask = gen_reg_rtx (mode);\n       emit_insn (gen_rtx_SET (VOIDmode, mask, tmp));\n     }\n-  emit_insn (gen_rtx_SET (VOIDmode, sgn,\n-\t\t\t  gen_rtx_AND (mode, mask, sign)));\n-  emit_insn (gen_rtx_SET (VOIDmode, result,\n-\t\t\t  gen_rtx_IOR (mode, abs_value, sgn)));\n+  emit_insn (gen_rtx_SET (VOIDmode, xa,\n+\t\t\t  gen_rtx_AND (mode, op0, mask)));\n+\n+  if (smask)\n+    *smask = mask;\n+\n+  return xa;\n }\n \n /* Expands a comparison of OP0 with OP1 using comparison code CODE,\n@@ -19276,6 +19310,21 @@ ix86_expand_sse_compare_and_jump (enum rtx_code code, rtx op0, rtx op1,\n   return label;\n }\n \n+/* Generate and return a rtx of mode MODE for 2**n where n is the number\n+   of bits of the mantissa of MODE, which must be one of DFmode or SFmode.  */\n+static rtx\n+ix86_gen_TWO52 (enum machine_mode mode)\n+{\n+  REAL_VALUE_TYPE TWO52r;\n+  rtx TWO52;\n+\n+  real_ldexp (&TWO52r, &dconst1, mode == DFmode ? 52 : 23);\n+  TWO52 = const_double_from_real_value (TWO52r, mode);\n+  TWO52 = force_reg (mode, TWO52);\n+\n+  return TWO52;\n+}\n+\n /* Expand SSE sequence for computing lround from OP1 storing\n    into OP0.  */\n void\n@@ -19297,7 +19346,7 @@ ix86_expand_lround (rtx op0, rtx op1)\n \n   /* adj = copysign (0.5, op1) */\n   adj = force_reg (mode, const_double_from_real_value (pred_half, mode));\n-  ix86_sse_copysign_to_positive (adj, adj, force_reg (mode, op1));\n+  ix86_sse_copysign_to_positive (adj, adj, force_reg (mode, op1), NULL_RTX);\n \n   /* adj = op1 + adj */\n   expand_simple_binop (mode, PLUS, adj, op1, adj, 0, OPTAB_DIRECT);\n@@ -19339,4 +19388,39 @@ ix86_expand_lfloorceil (rtx op0, rtx op1, bool do_floor)\n   emit_move_insn (op0, ireg);\n }\n \n+/* Expand rint (IEEE round to nearest) rounding OPERAND1 and storing the\n+   result in OPERAND0.  */\n+void\n+ix86_expand_rint (rtx operand0, rtx operand1)\n+{\n+  /* C code for the stuff we're doing below:\n+        if (!isless (fabs (operand1), 2**52))\n+\t  return operand1;\n+        tmp = copysign (2**52, operand1);\n+        return operand1 + tmp - tmp;\n+   */\n+  enum machine_mode mode = GET_MODE (operand0);\n+  rtx res, xa, label, TWO52, mask;\n+\n+  res = gen_reg_rtx (mode);\n+  emit_move_insn (res, operand1);\n+\n+  /* xa = abs (operand1) */\n+  xa = ix86_expand_sse_fabs (res, &mask);\n+\n+  /* if (!isless (xa, TWO52)) goto label; */\n+  TWO52 = ix86_gen_TWO52 (mode);\n+  label = ix86_expand_sse_compare_and_jump (UNLE, TWO52, xa, false);\n+\n+  ix86_sse_copysign_to_positive (TWO52, TWO52, res, mask);\n+\n+  expand_simple_binop (mode, PLUS, res, TWO52, res, 0, OPTAB_DIRECT);\n+  expand_simple_binop (mode, MINUS, res, TWO52, res, 0, OPTAB_DIRECT);\n+\n+  emit_label (label);\n+  LABEL_NUSES (label) = 1;\n+\n+  emit_move_insn (operand0, res);\n+}\n+\n #include \"gt-i386.h\""}, {"sha": "5aaf43ba322a77b17e42fc5cec72287a2760d317", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d32ff6193ad93643fda556bc0db619771241f1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d32ff6193ad93643fda556bc0db619771241f1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c7d32ff6193ad93643fda556bc0db619771241f1", "patch": "@@ -17160,34 +17160,50 @@\n (define_expand \"rintdf2\"\n   [(use (match_operand:DF 0 \"register_operand\" \"\"))\n    (use (match_operand:DF 1 \"register_operand\" \"\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n-{\n+  \"(TARGET_USE_FANCY_MATH_387\n+    && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n+    && flag_unsafe_math_optimizations)\n+   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n+       && !flag_trapping_math)\"\n+{\n+  if (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n+      && !flag_trapping_math)\n+    ix86_expand_rint (operand0, operand1);\n+  else\n+    {\n   rtx op0 = gen_reg_rtx (XFmode);\n   rtx op1 = gen_reg_rtx (XFmode);\n \n   emit_insn (gen_extenddfxf2 (op1, operands[1]));\n   emit_insn (gen_frndintxf2 (op0, op1));\n \n   emit_insn (gen_truncxfdf2_i387_noop (operands[0], op0));\n+    }\n   DONE;\n })\n \n (define_expand \"rintsf2\"\n   [(use (match_operand:SF 0 \"register_operand\" \"\"))\n    (use (match_operand:SF 1 \"register_operand\" \"\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n-{\n+  \"(TARGET_USE_FANCY_MATH_387\n+    && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n+    && flag_unsafe_math_optimizations)\n+   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n+       && !flag_trapping_math)\"\n+{\n+  if (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n+      && !flag_trapping_math)\n+    ix86_expand_rint (operand0, operand1);\n+  else\n+    {\n   rtx op0 = gen_reg_rtx (XFmode);\n   rtx op1 = gen_reg_rtx (XFmode);\n \n   emit_insn (gen_extendsfxf2 (op1, operands[1]));\n   emit_insn (gen_frndintxf2 (op0, op1));\n \n   emit_insn (gen_truncxfsf2_i387_noop (operands[0], op0));\n+    }\n   DONE;\n })\n "}, {"sha": "2fad67cd7da8ecc060db5f9d0392f6e33384defb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d32ff6193ad93643fda556bc0db619771241f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d32ff6193ad93643fda556bc0db619771241f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7d32ff6193ad93643fda556bc0db619771241f1", "patch": "@@ -1,3 +1,8 @@\n+2006-10-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/math-torture/rint.c: New testcase.\n+\t* gcc.target/i386/math-torture/nearbyint.c: Likewise.\n+\n 2006-10-29  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.target/i386/math-torture/lfloor.c: New testcase."}, {"sha": "dd646f01235082e355e4ce5e5033f0338079dc8d", "filename": "gcc/testsuite/gcc.target/i386/math-torture/nearbyint.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d32ff6193ad93643fda556bc0db619771241f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Fnearbyint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d32ff6193ad93643fda556bc0db619771241f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Fnearbyint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Fnearbyint.c?ref=c7d32ff6193ad93643fda556bc0db619771241f1", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do assemble } */\n+\n+float testlf (float x)\n+{\n+  return __builtin_nearbyintf (x);\n+}\n+double testl (double x)\n+{\n+  return __builtin_nearbyint (x);\n+}\n+long double testll (long double x)\n+{\n+  return __builtin_nearbyintl (x);\n+}\n+"}, {"sha": "f9dfff7caa0982d0b7bc81b7d64fb715f0ad4613", "filename": "gcc/testsuite/gcc.target/i386/math-torture/rint.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d32ff6193ad93643fda556bc0db619771241f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Frint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d32ff6193ad93643fda556bc0db619771241f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Frint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Frint.c?ref=c7d32ff6193ad93643fda556bc0db619771241f1", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do assemble } */\n+\n+float testlf (float x)\n+{\n+  return __builtin_rintf (x);\n+}\n+double testl (double x)\n+{\n+  return __builtin_rint (x);\n+}\n+long double testll (long double x)\n+{\n+  return __builtin_rintl (x);\n+}\n+"}]}