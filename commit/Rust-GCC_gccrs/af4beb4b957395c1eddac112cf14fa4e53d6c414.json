{"sha": "af4beb4b957395c1eddac112cf14fa4e53d6c414", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY0YmViNGI5NTczOTVjMWVkZGFjMTEyY2YxNGZhNGU1M2Q2YzQxNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-07-22T12:19:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-07-22T12:19:58Z"}, "message": "valarray (valarray<>::operator=(const valarray<>&), [...]): Implement resolution of DR 630, [Ready] in Frankfurt.\n\n2009-07-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/valarray (valarray<>::operator=(const valarray<>&),\n\tvalarray<>::operator=(initializer_list<>)): Implement resolution\n\tof DR 630, [Ready] in Frankfurt.\n\t* testsuite/26_numerics/valarray/dr630-1.cc: New.\n\t* testsuite/26_numerics/valarray/dr630-2.cc: Likewise.\n\t* doc/xml/manual/intro.xml: Add an entry for DR 630.\n\nFrom-SVN: r149929", "tree": {"sha": "1e61190c3a9a6815bd9ea630167bfc40abe36aa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e61190c3a9a6815bd9ea630167bfc40abe36aa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af4beb4b957395c1eddac112cf14fa4e53d6c414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4beb4b957395c1eddac112cf14fa4e53d6c414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af4beb4b957395c1eddac112cf14fa4e53d6c414", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4beb4b957395c1eddac112cf14fa4e53d6c414/comments", "author": null, "committer": null, "parents": [{"sha": "9d0c37619fe75c702cb4892e944290ae0aa21f98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d0c37619fe75c702cb4892e944290ae0aa21f98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d0c37619fe75c702cb4892e944290ae0aa21f98"}], "stats": {"total": 178, "additions": 172, "deletions": 6}, "files": [{"sha": "2caf219164f0599c9aa30dd0716c5e78a64b0563", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4beb4b957395c1eddac112cf14fa4e53d6c414/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4beb4b957395c1eddac112cf14fa4e53d6c414/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=af4beb4b957395c1eddac112cf14fa4e53d6c414", "patch": "@@ -1,3 +1,12 @@\n+2009-07-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/valarray (valarray<>::operator=(const valarray<>&),\n+\tvalarray<>::operator=(initializer_list<>)): Implement resolution\n+\tof DR 630, [Ready] in Frankfurt.\n+\t* testsuite/26_numerics/valarray/dr630-1.cc: New.\n+\t* testsuite/26_numerics/valarray/dr630-2.cc: Likewise.\n+\t* doc/xml/manual/intro.xml: Add an entry for DR 630.\n+\n 2009-07-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/chrono (duration<>::operator%=,  operator%):"}, {"sha": "9523195e2badcd8637e104697d6e13b5c8c7cf3a", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4beb4b957395c1eddac112cf14fa4e53d6c414/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4beb4b957395c1eddac112cf14fa4e53d6c414/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=af4beb4b957395c1eddac112cf14fa4e53d6c414", "patch": "@@ -711,6 +711,12 @@ requirements of the license of GCC.\n     <listitem><para>Add the missing modes to fopen_mode.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><ulink url=\"../ext/lwg-active.html#630\">630</ulink>:\n+        <emphasis>arrays of valarray</emphasis>\n+    </term>\n+    <listitem><para>Implement the simple resolution.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry><term><ulink url=\"../ext/lwg-defects.html#660\">660</ulink>:\n         <emphasis>Missing bitwise operations</emphasis>\n     </term>"}, {"sha": "fa92751791dee6df12591bbed64a7f9a4111f91f", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4beb4b957395c1eddac112cf14fa4e53d6c414/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4beb4b957395c1eddac112cf14fa4e53d6c414/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=af4beb4b957395c1eddac112cf14fa4e53d6c414", "patch": "@@ -1,7 +1,7 @@\n // The template and inlines for the -*- C++ -*- valarray class.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2009\n+// 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -647,7 +647,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _Tp>\n     inline\n     valarray<_Tp>::valarray(initializer_list<_Tp> __l)\n-      : _M_size(__l.size()), _M_data(__valarray_get_storage<_Tp>(__l.size()))\n+    : _M_size(__l.size()), _M_data(__valarray_get_storage<_Tp>(__l.size()))\n     { std::__valarray_copy_construct (__l.begin(), __l.end(), _M_data); }\n #endif\n \n@@ -669,8 +669,22 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline valarray<_Tp>&\n     valarray<_Tp>::operator=(const valarray<_Tp>& __v)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(_M_size == __v._M_size);\n-      std::__valarray_copy(__v._M_data, _M_size, _M_data);\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 630. arrays of valarray.\n+      if (_M_size == __v._M_size)\n+\tstd::__valarray_copy(__v._M_data, _M_size, _M_data);\n+      else\n+\t{\n+\t  if (_M_data)\n+\t    {\n+\t      std::__valarray_destroy_elements(_M_data, _M_data + _M_size);\n+\t      std::__valarray_release_memory(_M_data);\n+\t    }\n+\t  _M_size = __v._M_size;\n+\t  _M_data = __valarray_get_storage<_Tp>(_M_size);\n+\t  std::__valarray_copy_construct(__v._M_data, __v._M_data + _M_size,\n+\t\t\t\t\t _M_data);\n+\t}\n       return *this;\n     }\n \n@@ -679,8 +693,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline valarray<_Tp>&\n     valarray<_Tp>::operator=(initializer_list<_Tp> __l)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(_M_size == __l.size());\n-      std::__valarray_copy(__l.begin(), __l.size(), _M_data);\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 630. arrays of valarray.\n+      if (_M_size == __l.size())\n+\tstd::__valarray_copy(__l.begin(), __l.size(), _M_data);\n+      else\n+\t{\n+\t  if (_M_data)\n+\t    {\n+\t      std::__valarray_destroy_elements(_M_data, _M_data + _M_size);\n+\t      std::__valarray_release_memory(_M_data);\n+\t    }\n+\t  _M_size = __l.size();\n+\t  _M_data = __valarray_get_storage<_Tp>(_M_size);\n+\t  std::__valarray_copy_construct(__l.begin(), __l.begin() + _M_size,\n+\t\t\t\t\t _M_data);\n+\t}\n+      return *this;\n     }\n #endif\n "}, {"sha": "9e5d14a285adea25f85a26f5ccaf6b792bc1699d", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/dr630-1.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4beb4b957395c1eddac112cf14fa4e53d6c414/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fdr630-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4beb4b957395c1eddac112cf14fa4e53d6c414/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fdr630-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fdr630-1.cc?ref=af4beb4b957395c1eddac112cf14fa4e53d6c414", "patch": "@@ -0,0 +1,60 @@\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <valarray>\n+#include <testsuite_hooks.h>\n+\n+// DR 630.\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  valarray<int> v1;\n+  const valarray<int> v2(-1, 10000);\n+\n+  v1 = v2;\n+  VERIFY( v1.size() == v2.size() );\n+  VERIFY( (v1 == v2).min() == true );\n+\n+  valarray<int> v3(0, 10000);\n+  const valarray<int> v4;\n+\n+  v3 = v4;\n+  VERIFY( v3.size() == v4.size() );\n+  VERIFY( v3.size() == 0 );\n+\n+  valarray<int> v5(0, 100);\n+  const valarray<int> v6(-1, 10000);\n+\n+  v5 = v6;\n+  VERIFY( v5.size() == v6.size() );\n+  VERIFY( (v5 == v6).min() == true );\n+\n+  valarray<int> v7(0, 10000);\n+  const valarray<int> v8(-1, 100);\n+\n+  v7 = v8;\n+  VERIFY( v7.size() == v8.size() );\n+  VERIFY( (v7 == v8).min() == true );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "70ee81243601389d0532c330e67f363c6265be2a", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/dr630-2.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4beb4b957395c1eddac112cf14fa4e53d6c414/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fdr630-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4beb4b957395c1eddac112cf14fa4e53d6c414/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fdr630-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fdr630-2.cc?ref=af4beb4b957395c1eddac112cf14fa4e53d6c414", "patch": "@@ -0,0 +1,62 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <valarray>\n+#include <testsuite_hooks.h>\n+\n+// DR 630.\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  valarray<int> v1;\n+\n+  v1 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };\n+  VERIFY( v1.size() == 10 );\n+  VERIFY( v1.min() == -1 );\n+  VERIFY( v1.max() == -1 );\n+\n+  valarray<int> v2(0, 10);\n+\n+  v2 = { -1, -1, -1, -1, -1 };\n+  VERIFY( v2.size() == 5 );\n+  VERIFY( v2.min() == -1 );\n+  VERIFY( v2.max() == -1 );\n+\n+  valarray<int> v3(0, 5);\n+\n+  v3 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };\n+  VERIFY( v3.size() == 10 );\n+  VERIFY( v3.min() == -1 );\n+  VERIFY( v3.max() == -1 );\n+\n+  valarray<int> v4(0, 10);\n+\n+  v4 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };\n+  VERIFY( v4.size() == 10 );\n+  VERIFY( v4.min() == -1 );\n+  VERIFY( v4.max() == -1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}