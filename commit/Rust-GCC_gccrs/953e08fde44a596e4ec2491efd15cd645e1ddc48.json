{"sha": "953e08fde44a596e4ec2491efd15cd645e1ddc48", "node_id": "C_kwDOANBUbNoAKDk1M2UwOGZkZTQ0YTU5NmU0ZWMyNDkxZWZkMTVjZDY0NWUxZGRjNDg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-01T09:07:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-01T09:07:44Z"}, "message": "Fix up dump_printf_loc format attribute and adjust uses [PR106782]\n\nAs discussed on IRC, the r13-2299-g68c61c2daa1f bug only got missed\nbecause dump_printf_loc had incorrect format attribute and therefore\nalmost no -Wformat=* checking was performed on it.\n3, 0 are suitable for function with (whatever, whatever, const char *, va_list)\narguments, not for (whatever, whatever, const char *, ...), that one should\nuse 3, 4.\n\nThe following patch fixes that and adjusts all spots to fix warnings.\nIn many cases it is just through an ugly cast (for %G casts to gimple *\nfrom gassign */gphi * and the like and for %p casts to void * from slp_node\netc.).\nThere are 3 spots where the mismatch was worse though, two using %u or %d\nfor unsigned HOST_WIDE_INT argument and one %T for enum argument (promoted\nto int).\n\n2022-09-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR other/106782\n\t* dumpfile.h (dump_printf_loc): Use ATTRIBUTE_GCC_DUMP_PRINTF (3, 4)\n\tinstead of ATTRIBUTE_GCC_DUMP_PRINTF (3, 0).\n\t* tree-parloops.cc (parloops_is_slp_reduction): Cast pointers to\n\tderived types of gimple to gimple * to avoid -Wformat warnings.\n\t* tree-vect-loop-manip.cc (vect_set_loop_condition,\n\tvect_update_ivs_after_vectorizer): Likewise.\n\t* tree-vect-stmts.cc (vectorizable_load): Likewise.\n\t* tree-vect-patterns.cc (vect_split_statement,\n\tvect_recog_mulhs_pattern, vect_recog_average_pattern,\n\tvect_determine_precisions_from_range,\n\tvect_determine_precisions_from_users): Likewise.\n\t* gimple-loop-versioning.cc\n\t(loop_versioning::analyze_term_using_scevs): Likewise.\n\t* tree-vect-slp.cc (vect_build_slp_tree_1): Likewise.\n\t(vect_build_slp_tree): Cast slp_tree to void * to avoid\n\t-Wformat warnings.\n\t(optimize_load_redistribution_1, vect_match_slp_patterns,\n\tvect_build_slp_instance, vect_optimize_slp_pass::materialize,\n\tvect_optimize_slp_pass::dump, vect_slp_convert_to_external,\n\tvect_slp_analyze_node_operations, vect_bb_partition_graph): Likewise.\n\t(vect_print_slp_tree): Likewise.  Also use\n\tHOST_WIDE_INT_PRINT_UNSIGNED instead of %u.\n\t* tree-vect-loop.cc (vect_determine_vectorization_factor,\n\tvect_analyze_scalar_cycles_1, vect_analyze_loop_operations,\n\tvectorizable_induction, vect_transform_loop): Cast pointers to derived\n\ttypes of gimple to gimple * to avoid -Wformat warnings.\n\t(vect_analyze_loop_2): Cast slp_tree to void * to avoid\n\t-Wformat warnings.\n\t(vect_estimate_min_profitable_iters): Use HOST_WIDE_INT_PRINT_UNSIGNED\n\tinstead of %d.\n\t* tree-vect-slp-patterns.cc (vect_pattern_validate_optab): Use %G\n\tinstead of %T and STMT_VINFO_STMT (SLP_TREE_REPRESENTATIVE (node))\n\tinstead of SLP_TREE_DEF_TYPE (node).", "tree": {"sha": "978c44847ebc9811142a32797471006809171c07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/978c44847ebc9811142a32797471006809171c07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/953e08fde44a596e4ec2491efd15cd645e1ddc48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953e08fde44a596e4ec2491efd15cd645e1ddc48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/953e08fde44a596e4ec2491efd15cd645e1ddc48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953e08fde44a596e4ec2491efd15cd645e1ddc48/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b8c57ed40f19086e30ce54faec3222ac21cc0df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8c57ed40f19086e30ce54faec3222ac21cc0df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b8c57ed40f19086e30ce54faec3222ac21cc0df"}], "stats": {"total": 106, "additions": 62, "deletions": 44}, "files": [{"sha": "b2219c55f15499d89f5fa22311050f897b2950dc", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953e08fde44a596e4ec2491efd15cd645e1ddc48/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953e08fde44a596e4ec2491efd15cd645e1ddc48/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=953e08fde44a596e4ec2491efd15cd645e1ddc48", "patch": "@@ -574,7 +574,7 @@ extern void dump_printf (const dump_metadata_t &, const char *, ...)\n \n extern void dump_printf_loc (const dump_metadata_t &, const dump_user_location_t &,\n \t\t\t     const char *, ...)\n-  ATTRIBUTE_GCC_DUMP_PRINTF (3, 0);\n+  ATTRIBUTE_GCC_DUMP_PRINTF (3, 4);\n extern void dump_function (int phase, tree fn);\n extern void dump_basic_block (dump_flags_t, basic_block, int);\n extern void dump_generic_expr_loc (const dump_metadata_t &,"}, {"sha": "b2e3c4319a1a5431e251d6e4af85d1805bd5eef8", "filename": "gcc/gimple-loop-versioning.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953e08fde44a596e4ec2491efd15cd645e1ddc48/gcc%2Fgimple-loop-versioning.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953e08fde44a596e4ec2491efd15cd645e1ddc48/gcc%2Fgimple-loop-versioning.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-versioning.cc?ref=953e08fde44a596e4ec2491efd15cd645e1ddc48", "patch": "@@ -940,7 +940,7 @@ loop_versioning::analyze_term_using_scevs (address_info &address,\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_NOTE, address.stmt,\n-\t\t\t     \"looking through %G\", assign);\n+\t\t\t     \"looking through %G\", (gimple *) assign);\n \t  stride = strip_casts (gimple_assign_rhs1 (assign));\n \t}\n "}, {"sha": "e4a148b5365134d0d424569f55074381570aeab1", "filename": "gcc/tree-parloops.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953e08fde44a596e4ec2491efd15cd645e1ddc48/gcc%2Ftree-parloops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953e08fde44a596e4ec2491efd15cd645e1ddc48/gcc%2Ftree-parloops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.cc?ref=953e08fde44a596e4ec2491efd15cd645e1ddc48", "patch": "@@ -338,8 +338,8 @@ parloops_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n \t      && parloops_valid_reduction_input_p (def_stmt_info))\n \t    {\n \t      if (dump_enabled_p ())\n-\t\tdump_printf_loc (MSG_NOTE, vect_location, \"swapping oprnds: %G\",\n-\t\t\t\t next_stmt);\n+\t\tdump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t\t \"swapping oprnds: %G\", (gimple *) next_stmt);\n \n \t      swap_ssa_operands (next_stmt,\n \t\t\t\t gimple_assign_rhs1_ptr (next_stmt),"}, {"sha": "b68e6cd5be4a57390ec861442bca0762527572d0", "filename": "gcc/tree-vect-loop-manip.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953e08fde44a596e4ec2491efd15cd645e1ddc48/gcc%2Ftree-vect-loop-manip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953e08fde44a596e4ec2491efd15cd645e1ddc48/gcc%2Ftree-vect-loop-manip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.cc?ref=953e08fde44a596e4ec2491efd15cd645e1ddc48", "patch": "@@ -992,7 +992,7 @@ vect_set_loop_condition (class loop *loop, loop_vec_info loop_vinfo,\n \n   if (dump_enabled_p ())\n     dump_printf_loc (MSG_NOTE, vect_location, \"New loop exit condition: %G\",\n-\t\t     cond_stmt);\n+\t\t     (gimple *) cond_stmt);\n }\n \n /* Helper routine of slpeel_tree_duplicate_loop_to_edge_cfg.\n@@ -1539,7 +1539,8 @@ vect_update_ivs_after_vectorizer (loop_vec_info loop_vinfo,\n       stmt_vec_info phi_info = loop_vinfo->lookup_stmt (phi);\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t \"vect_update_ivs_after_vectorizer: phi: %G\", phi);\n+\t\t\t \"vect_update_ivs_after_vectorizer: phi: %G\",\n+\t\t\t (gimple *) phi);\n \n       /* Skip reduction and virtual phis.  */\n       if (!iv_phi_p (phi_info))"}, {"sha": "24556b5009a04e4d38c104411fad361520248cdc", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953e08fde44a596e4ec2491efd15cd645e1ddc48/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953e08fde44a596e4ec2491efd15cd645e1ddc48/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=953e08fde44a596e4ec2491efd15cd645e1ddc48", "patch": "@@ -304,7 +304,7 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n \t  stmt_info = loop_vinfo->lookup_stmt (phi);\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_NOTE, vect_location, \"==> examining phi: %G\",\n-\t\t\t     phi);\n+\t\t\t     (gimple *) phi);\n \n \t  gcc_assert (stmt_info);\n \n@@ -489,7 +489,8 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, class loop *loop,\n       stmt_vec_info stmt_vinfo = loop_vinfo->lookup_stmt (phi);\n \n       if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_NOTE, vect_location, \"Analyze phi: %G\", phi);\n+\tdump_printf_loc (MSG_NOTE, vect_location, \"Analyze phi: %G\",\n+\t\t\t (gimple *) phi);\n \n       /* Skip virtual phi's.  The data dependences that are associated with\n          virtual defs/uses (i.e., memory accesses) are analyzed elsewhere.  */\n@@ -540,7 +541,8 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, class loop *loop,\n       tree def = PHI_RESULT (phi);\n \n       if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_NOTE, vect_location, \"Analyze phi: %G\", phi);\n+\tdump_printf_loc (MSG_NOTE, vect_location, \"Analyze phi: %G\",\n+\t\t\t (gimple *) phi);\n \n       gcc_assert (!virtual_operand_p (def)\n \t\t  && STMT_VINFO_DEF_TYPE (stmt_vinfo) == vect_unknown_def_type);\n@@ -1679,7 +1681,8 @@ vect_analyze_loop_operations (loop_vec_info loop_vinfo)\n \n \t  stmt_info = loop_vinfo->lookup_stmt (phi);\n           if (dump_enabled_p ())\n-\t    dump_printf_loc (MSG_NOTE, vect_location, \"examining phi: %G\", phi);\n+\t    dump_printf_loc (MSG_NOTE, vect_location, \"examining phi: %G\",\n+\t\t\t     (gimple *) phi);\n \t  if (virtual_operand_p (gimple_phi_result (phi)))\n \t    continue;\n \n@@ -2526,7 +2529,7 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal,\n \t      if (can_use_lanes && dump_enabled_p ())\n \t\tdump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t\t \"SLP instance %p can use load/store-lanes\\n\",\n-\t\t\t\t instance);\n+\t\t\t\t (void *) instance);\n \t    }\n \t  else\n \t    {\n@@ -4320,7 +4323,8 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t \"can't unroll as unrolled vectorization factor larger\"\n-\t\t\t \" than maximum vectorization factor: %d\\n\",\n+\t\t\t \" than maximum vectorization factor: \"\n+\t\t\t HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\",\n \t\t\t LOOP_VINFO_MAX_VECT_FACTOR (loop_vinfo));\n       *suggested_unroll_factor = 1;\n     }\n@@ -8862,7 +8866,7 @@ vectorizable_induction (loop_vec_info loop_vinfo,\n   if (dump_enabled_p ())\n     dump_printf_loc (MSG_NOTE, vect_location,\n \t\t     \"transform induction: created def-use cycle: %G%G\",\n-\t\t     induction_phi, SSA_NAME_DEF_STMT (vec_def));\n+\t\t     (gimple *) induction_phi, SSA_NAME_DEF_STMT (vec_def));\n \n   return true;\n }\n@@ -9941,7 +9945,7 @@ vect_transform_loop (loop_vec_info loop_vinfo, gimple *loop_vectorized_call)\n \t  gphi *phi = si.phi ();\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t     \"------>vectorizing phi: %G\", phi);\n+\t\t\t     \"------>vectorizing phi: %G\", (gimple *) phi);\n \t  stmt_info = loop_vinfo->lookup_stmt (phi);\n \t  if (!stmt_info)\n \t    continue;"}, {"sha": "d2bd15b5e9005bce2612f0b32c0acf6ffe776343", "filename": "gcc/tree-vect-patterns.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953e08fde44a596e4ec2491efd15cd645e1ddc48/gcc%2Ftree-vect-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953e08fde44a596e4ec2491efd15cd645e1ddc48/gcc%2Ftree-vect-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.cc?ref=953e08fde44a596e4ec2491efd15cd645e1ddc48", "patch": "@@ -742,7 +742,8 @@ vect_split_statement (vec_info *vinfo, stmt_vec_info stmt2_info, tree new_rhs,\n \t{\n \t  dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t   \"into pattern statements: %G\", stmt1);\n-\t  dump_printf_loc (MSG_NOTE, vect_location, \"and: %G\", new_stmt2);\n+\t  dump_printf_loc (MSG_NOTE, vect_location, \"and: %G\",\n+\t\t\t   (gimple *) new_stmt2);\n \t}\n \n       return true;\n@@ -2267,7 +2268,7 @@ vect_recog_mulhs_pattern (vec_info *vinfo,\n \n   if (dump_enabled_p ())\n     dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t     \"created pattern stmt: %G\", mulhrs_stmt);\n+\t\t     \"created pattern stmt: %G\", (gimple *) mulhrs_stmt);\n \n   return vect_convert_output (vinfo, last_stmt_info, lhs_type,\n \t\t\t      mulhrs_stmt, new_vectype);\n@@ -2473,7 +2474,7 @@ vect_recog_average_pattern (vec_info *vinfo,\n \n   if (dump_enabled_p ())\n     dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t     \"created pattern stmt: %G\", average_stmt);\n+\t\t     \"created pattern stmt: %G\", (gimple *) average_stmt);\n \n   return vect_convert_output (vinfo, last_stmt_info,\n \t\t\t      type, average_stmt, new_vectype);\n@@ -5269,7 +5270,7 @@ vect_determine_precisions_from_range (stmt_vec_info stmt_info, gassign *stmt)\n     dump_printf_loc (MSG_NOTE, vect_location, \"can narrow to %s:%d\"\n \t\t     \" without loss of precision: %G\",\n \t\t     sign == SIGNED ? \"signed\" : \"unsigned\",\n-\t\t     value_precision, stmt);\n+\t\t     value_precision, (gimple *) stmt);\n \n   vect_set_operation_type (stmt_info, type, value_precision, sign);\n   vect_set_min_input_precision (stmt_info, type, value_precision);\n@@ -5350,7 +5351,7 @@ vect_determine_precisions_from_users (stmt_vec_info stmt_info, gassign *stmt)\n \tdump_printf_loc (MSG_NOTE, vect_location, \"can narrow to %s:%d\"\n \t\t\t \" without affecting users: %G\",\n \t\t\t TYPE_UNSIGNED (type) ? \"unsigned\" : \"signed\",\n-\t\t\t operation_precision, stmt);\n+\t\t\t operation_precision, (gimple *) stmt);\n       vect_set_operation_type (stmt_info, type, operation_precision,\n \t\t\t       TYPE_SIGN (type));\n     }"}, {"sha": "dc694b8e531886bdccf53b39e8981f22a2e9e8c6", "filename": "gcc/tree-vect-slp-patterns.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953e08fde44a596e4ec2491efd15cd645e1ddc48/gcc%2Ftree-vect-slp-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953e08fde44a596e4ec2491efd15cd645e1ddc48/gcc%2Ftree-vect-slp-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp-patterns.cc?ref=953e08fde44a596e4ec2491efd15cd645e1ddc48", "patch": "@@ -96,8 +96,8 @@ vect_pattern_validate_optab (internal_fn ifn, slp_tree node)\n         {\n \t  if (!vectype)\n \t    dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t     \"Target does not support vector type for %T\\n\",\n-\t\t\t     SLP_TREE_DEF_TYPE (node));\n+\t\t\t     \"Target does not support vector type for %G\\n\",\n+\t\t\t     STMT_VINFO_STMT (SLP_TREE_REPRESENTATIVE (node)));\n \t  else\n \t    dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t     \"Target does not support %s for vector type \""}, {"sha": "0d3b273bb422805c1261cac4a60108c0a823c52b", "filename": "gcc/tree-vect-slp.cc", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953e08fde44a596e4ec2491efd15cd645e1ddc48/gcc%2Ftree-vect-slp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953e08fde44a596e4ec2491efd15cd645e1ddc48/gcc%2Ftree-vect-slp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.cc?ref=953e08fde44a596e4ec2491efd15cd645e1ddc48", "patch": "@@ -1046,7 +1046,7 @@ vect_build_slp_tree_1 (vec_info *vinfo, unsigned char *swap,\n \t      if (dump_enabled_p ())\n \t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t\t \"Build SLP failed: unsupported call type %G\",\n-\t\t\t\t call_stmt);\n+\t\t\t\t (gimple *) call_stmt);\n \t      if (is_a <bb_vec_info> (vinfo) && i != 0)\n \t\tcontinue;\n \t      /* Fatal mismatch.  */\n@@ -1553,7 +1553,8 @@ vect_build_slp_tree (vec_info *vinfo,\n     {\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_NOTE, vect_location, \"re-using %sSLP tree %p\\n\",\n-\t\t\t !(*leader)->failed ? \"\" : \"failed \", *leader);\n+\t\t\t !(*leader)->failed ? \"\" : \"failed \",\n+\t\t\t (void *) *leader);\n       if (!(*leader)->failed)\n \t{\n \t  SLP_TREE_REF_COUNT (*leader)++;\n@@ -1590,7 +1591,7 @@ vect_build_slp_tree (vec_info *vinfo,\n \n   if (dump_enabled_p ())\n     dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t     \"starting SLP discovery for node %p\\n\", res);\n+\t\t     \"starting SLP discovery for node %p\\n\", (void *) res);\n \n   poly_uint64 this_max_nunits = 1;\n   slp_tree res_ = vect_build_slp_tree_2 (vinfo, res, stmts, group_size,\n@@ -1600,7 +1601,7 @@ vect_build_slp_tree (vec_info *vinfo,\n     {\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t \"SLP discovery for node %p failed\\n\", res);\n+\t\t\t \"SLP discovery for node %p failed\\n\", (void *) res);\n       /* Mark the node invalid so we can detect those when still in use\n \t as backedge destinations.  */\n       SLP_TREE_SCALAR_STMTS (res) = vNULL;\n@@ -1620,7 +1621,8 @@ vect_build_slp_tree (vec_info *vinfo,\n     {\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t \"SLP discovery for node %p succeeded\\n\", res);\n+\t\t\t \"SLP discovery for node %p succeeded\\n\",\n+\t\t\t (void *) res);\n       gcc_assert (res_ == res);\n       res->max_nunits = this_max_nunits;\n       vect_update_max_nunits (max_nunits, this_max_nunits);\n@@ -2525,12 +2527,14 @@ vect_print_slp_tree (dump_flags_t dump_kind, dump_location_t loc,\n \n   dump_metadata_t metadata (dump_kind, loc.get_impl_location ());\n   dump_user_location_t user_loc = loc.get_user_location ();\n-  dump_printf_loc (metadata, user_loc, \"node%s %p (max_nunits=%u, refcnt=%u)\",\n+  dump_printf_loc (metadata, user_loc,\n+\t\t   \"node%s %p (max_nunits=\" HOST_WIDE_INT_PRINT_UNSIGNED\n+\t\t   \", refcnt=%u)\",\n \t\t   SLP_TREE_DEF_TYPE (node) == vect_external_def\n \t\t   ? \" (external)\"\n \t\t   : (SLP_TREE_DEF_TYPE (node) == vect_constant_def\n \t\t      ? \" (constant)\"\n-\t\t      : \"\"), node,\n+\t\t      : \"\"), (void *) node,\n \t\t   estimated_poly_value (node->max_nunits),\n \t\t\t\t\t SLP_TREE_REF_COUNT (node));\n   if (SLP_TREE_VECTYPE (node))\n@@ -2893,7 +2897,8 @@ optimize_load_redistribution_1 (scalar_stmts_to_slp_tree_map_t *bst_map,\n \n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t \"converting stmts on permute node %p\\n\", root);\n+\t\t\t \"converting stmts on permute node %p\\n\",\n+\t\t\t (void *) root);\n \n       bool *matches = XALLOCAVEC (bool, group_size);\n       poly_uint64 max_nunits = 1;\n@@ -3025,7 +3030,7 @@ vect_match_slp_patterns (slp_instance instance, vec_info *vinfo,\n   if (dump_enabled_p ())\n     dump_printf_loc (MSG_NOTE, vect_location,\n \t\t     \"Analyzing SLP tree %p for patterns\\n\",\n-\t\t     SLP_INSTANCE_TREE (instance));\n+\t\t     (void *) SLP_INSTANCE_TREE (instance));\n \n   return vect_match_slp_patterns_2 (ref_node, vinfo, perm_cache, compat_cache,\n \t\t\t\t    visited);\n@@ -3217,7 +3222,8 @@ vect_build_slp_instance (vec_info *vinfo,\n \t  if (dump_enabled_p ())\n \t    {\n \t      dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t       \"Final SLP tree for instance %p:\\n\", new_instance);\n+\t\t\t       \"Final SLP tree for instance %p:\\n\",\n+\t\t\t       (void *) new_instance);\n \t      vect_print_slp_graph (MSG_NOTE, vect_location,\n \t\t\t\t    SLP_INSTANCE_TREE (new_instance));\n \t    }\n@@ -5153,11 +5159,11 @@ vect_optimize_slp_pass::get_result_with_layout (slp_tree node,\n \t    dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t     \"duplicating permutation node %p with\"\n \t\t\t     \" layout %d\\n\",\n-\t\t\t     node, to_layout_i);\n+\t\t\t     (void *) node, to_layout_i);\n \t  else\n \t    dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t     \"inserting permutation node in place of %p\\n\",\n-\t\t\t     node);\n+\t\t\t     (void *) node);\n \t}\n \n       unsigned int num_lanes = SLP_TREE_LANES (node);\n@@ -5245,7 +5251,8 @@ vect_optimize_slp_pass::materialize ()\n \t\t  && !std::equal (tmp_perm.begin (), tmp_perm.end (),\n \t\t\t\t  perm.begin ()))\n \t\tdump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t\t \"absorbing input layouts into %p\\n\", node);\n+\t\t\t\t \"absorbing input layouts into %p\\n\",\n+\t\t\t\t (void *) node);\n \t      std::copy (tmp_perm.begin (), tmp_perm.end (), perm.begin ());\n \t      bitmap_set_bit (fully_folded, node_i);\n \t    }\n@@ -5255,7 +5262,7 @@ vect_optimize_slp_pass::materialize ()\n \t      if (dump_enabled_p ())\n \t\tdump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t\t \"failed to absorb input layouts into %p\\n\",\n-\t\t\t\t node);\n+\t\t\t\t (void *) node);\n \t      change_vec_perm_layout (nullptr, perm, layout_i, layout_i);\n \t    }\n \t}\n@@ -5436,13 +5443,15 @@ vect_optimize_slp_pass::dump ()\n \t      if (other_vertex.partition < vertex.partition)\n \t\tdump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t\t \"      - %p [%d] --> %p\\n\",\n-\t\t\t\t other_vertex.node, other_vertex.partition,\n-\t\t\t\t vertex.node);\n+\t\t\t\t (void *) other_vertex.node,\n+\t\t\t\t other_vertex.partition,\n+\t\t\t\t (void *) vertex.node);\n \t      else\n \t\tdump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t\t \"      - %p --> [%d] %p\\n\",\n-\t\t\t\t vertex.node, other_vertex.partition,\n-\t\t\t\t other_vertex.node);\n+\t\t\t\t (void *) vertex.node,\n+\t\t\t\t other_vertex.partition,\n+\t\t\t\t (void *) other_vertex.node);\n \t    };\n \t  for_each_partition_edge (node_i, print_edge);\n \t}\n@@ -5886,7 +5895,8 @@ vect_slp_convert_to_external (vec_info *vinfo, slp_tree node,\n \n   if (dump_enabled_p ())\n     dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t     \"Building vector operands of %p from scalars instead\\n\", node);\n+\t\t     \"Building vector operands of %p from scalars instead\\n\",\n+\t\t     (void *) node);\n \n   /* Don't remove and free the child nodes here, since they could be\n      referenced by other structures.  The analysis and scheduling phases\n@@ -6013,7 +6023,7 @@ vect_slp_analyze_node_operations (vec_info *vinfo, slp_tree node,\n     {\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t \"Failed cyclic SLP reference in %p\\n\", node);\n+\t\t\t \"Failed cyclic SLP reference in %p\\n\", (void *) node);\n       return false;\n     }\n   gcc_assert (SLP_TREE_DEF_TYPE (node) == vect_internal_def);\n@@ -6045,7 +6055,8 @@ vect_slp_analyze_node_operations (vec_info *vinfo, slp_tree node,\n     {\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t \"Cannot vectorize all-constant op node %p\\n\", node);\n+\t\t\t \"Cannot vectorize all-constant op node %p\\n\",\n+\t\t\t (void *) node);\n       res = false;\n     }\n \n@@ -6478,7 +6489,7 @@ vect_bb_partition_graph (bb_vec_info bb_vinfo)\n \t  && leader != instance)\n \tdump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t \"instance %p is leader of %p\\n\",\n-\t\t\t leader, instance);\n+\t\t\t (void *) leader, (void *) instance);\n     }\n }\n "}, {"sha": "c8d1efc45e5176eec988e5886e7e745bd542ca85", "filename": "gcc/tree-vect-stmts.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953e08fde44a596e4ec2491efd15cd645e1ddc48/gcc%2Ftree-vect-stmts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953e08fde44a596e4ec2491efd15cd645e1ddc48/gcc%2Ftree-vect-stmts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.cc?ref=953e08fde44a596e4ec2491efd15cd645e1ddc48", "patch": "@@ -9042,7 +9042,8 @@ vectorizable_load (vec_info *vinfo,\n \t  gassign *stmt = as_a <gassign *> (stmt_info->stmt);\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t     \"hoisting out of the vectorized loop: %G\", stmt);\n+\t\t\t     \"hoisting out of the vectorized loop: %G\",\n+\t\t\t     (gimple *) stmt);\n \t  scalar_dest = copy_ssa_name (scalar_dest);\n \t  tree rhs = unshare_expr (gimple_assign_rhs1 (stmt));\n \t  edge pe = loop_preheader_edge (loop);"}]}