{"sha": "9ab48d6e6ca06afe12664be30bb30043a9572604", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFiNDhkNmU2Y2EwNmFmZTEyNjY0YmUzMGJiMzAwNDNhOTU3MjYwNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-08-09T22:45:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-08-09T22:45:20Z"}, "message": "acinclude.m4: Update references to final C++11 standard.\n\n\t* acinclude.m4: Update references to final C++11 standard.\n\t* include/bits/shared_ptr.h: Likewise.\n\t* include/bits/shared_ptr_base.h: Likewise.\n\t* include/bits/unique_ptr.h: Likewise.\n\t* include/std/chrono: Likewise.\n\t* include/std/thread: Likewise.\n\nFrom-SVN: r190271", "tree": {"sha": "31a512bf1cfc78996356a5914367dcb49c36242f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31a512bf1cfc78996356a5914367dcb49c36242f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ab48d6e6ca06afe12664be30bb30043a9572604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ab48d6e6ca06afe12664be30bb30043a9572604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ab48d6e6ca06afe12664be30bb30043a9572604", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ab48d6e6ca06afe12664be30bb30043a9572604/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5829cc0fe4d56025bdad318535b9ecb64b2fae77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5829cc0fe4d56025bdad318535b9ecb64b2fae77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5829cc0fe4d56025bdad318535b9ecb64b2fae77"}], "stats": {"total": 63, "additions": 36, "deletions": 27}, "files": [{"sha": "f33aef8cdbdabbb1bd90efcde9a8af194225f403", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab48d6e6ca06afe12664be30bb30043a9572604/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab48d6e6ca06afe12664be30bb30043a9572604/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9ab48d6e6ca06afe12664be30bb30043a9572604", "patch": "@@ -1,3 +1,12 @@\n+2012-08-09  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* acinclude.m4: Update references to final C++11 standard.\n+\t* include/bits/shared_ptr.h: Likewise.\n+\t* include/bits/shared_ptr_base.h: Likewise.\n+\t* include/bits/unique_ptr.h: Likewise.\n+\t* include/std/chrono: Likewise.\n+\t* include/std/thread: Likewise.\n+\n 2012-08-07  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/54005"}, {"sha": "1179407bf551b0d054e3a6c6f2d91deb85fb966c", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab48d6e6ca06afe12664be30bb30043a9572604/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab48d6e6ca06afe12664be30bb30043a9572604/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=9ab48d6e6ca06afe12664be30bb30043a9572604", "patch": "@@ -1115,16 +1115,16 @@ AC_DEFUN([GLIBCXX_ENABLE_C99], [\n \n dnl\n dnl Check for clock_gettime, nanosleep and sched_yield, used in the\n-dnl implementation of 20.8.5 [time.clock], and 30.2.2 [thread.thread.this]\n-dnl in the current C++0x working draft.\n+dnl implementation of 20.11.7 [time.clock], and 30.3.2 [thread.thread.this]\n+dnl in the C++11 standard.\n dnl\n dnl --enable-libstdcxx-time\n dnl --enable-libstdcxx-time=yes\n dnl        checks for the availability of monotonic and realtime clocks,\n-dnl        nanosleep and sched_yield in libc and libposix4 and, in case, links\n-dnl       the latter\n+dnl        nanosleep and sched_yield in libc and libposix4 and, if needed,\n+dnl        links in the latter.\n dnl --enable-libstdcxx-time=rt\n-dnl        also searches (and, in case, links) librt.  Note that this is\n+dnl        also searches (and, if needed, links) librt.  Note that this is\n dnl        not always desirable because, in glibc, for example, in turn it\n dnl        triggers the linking of libpthread too, which activates locking,\n dnl        a large overhead for single-thread programs.\n@@ -1256,8 +1256,8 @@ AC_DEFUN([GLIBCXX_ENABLE_LIBSTDCXX_TIME], [\n ])\n \n dnl\n-dnl Check for gettimeofday, used in the implementation of 20.8.5\n-dnl [time.clock] in the current C++0x working draft.\n+dnl Check for gettimeofday, used in the implementation of 20.11.7\n+dnl [time.clock] in the C++11 standard.\n dnl\n AC_DEFUN([GLIBCXX_CHECK_GETTIMEOFDAY], [\n "}, {"sha": "784336505b239fdef3205d51605e84e33cad5989", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab48d6e6ca06afe12664be30bb30043a9572604/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab48d6e6ca06afe12664be30bb30043a9572604/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=9ab48d6e6ca06afe12664be30bb30043a9572604", "patch": "@@ -321,7 +321,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tallocate_shared(const _Alloc& __a, _Args&&... __args);\n     };\n \n-  // 20.8.13.2.7 shared_ptr comparisons\n+  // 20.7.2.2.7 shared_ptr comparisons\n   template<typename _Tp1, typename _Tp2>\n     inline bool\n     operator==(const shared_ptr<_Tp1>& __a,\n@@ -425,13 +425,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct less<shared_ptr<_Tp>> : public _Sp_less<shared_ptr<_Tp>>\n     { };\n \n-  // 20.8.13.2.9 shared_ptr specialized algorithms.\n+  // 20.7.2.2.8 shared_ptr specialized algorithms.\n   template<typename _Tp>\n     inline void\n     swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b) noexcept\n     { __a.swap(__b); }\n \n-  // 20.8.13.2.10 shared_ptr casts.\n+  // 20.7.2.2.9 shared_ptr casts.\n   template<typename _Tp, typename _Tp1>\n     inline shared_ptr<_Tp>\n     static_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept\n@@ -511,7 +511,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     };\n \n-  // 20.8.13.3.7 weak_ptr specialized algorithms.\n+  // 20.7.2.3.6 weak_ptr specialized algorithms.\n   template<typename _Tp>\n     inline void\n     swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b) noexcept"}, {"sha": "07ac000d90b04041970f425816be81f719596168", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab48d6e6ca06afe12664be30bb30043a9572604/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab48d6e6ca06afe12664be30bb30043a9572604/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=9ab48d6e6ca06afe12664be30bb30043a9572604", "patch": "@@ -1056,7 +1056,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n \n-  // 20.8.13.2.7 shared_ptr comparisons\n+  // 20.7.2.2.7 shared_ptr comparisons\n   template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>\n     inline bool\n     operator==(const __shared_ptr<_Tp1, _Lp>& __a,\n@@ -1348,7 +1348,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __weak_count<_Lp>  _M_refcount;    // Reference counter.\n     };\n \n-  // 20.8.13.3.7 weak_ptr specialized algorithms.\n+  // 20.7.2.3.6 weak_ptr specialized algorithms.\n   template<typename _Tp, _Lock_policy _Lp>\n     inline void\n     swap(__weak_ptr<_Tp, _Lp>& __a, __weak_ptr<_Tp, _Lp>& __b) noexcept"}, {"sha": "242d01e40ee77813ee8f35d10fdb1926997cd13c", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab48d6e6ca06afe12664be30bb30043a9572604/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab48d6e6ca06afe12664be30bb30043a9572604/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=9ab48d6e6ca06afe12664be30bb30043a9572604", "patch": "@@ -87,7 +87,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Up> void operator()(_Up*) const = delete;\n     };\n \n-  /// 20.7.12.2 unique_ptr for single objects.\n+  /// 20.7.1.2 unique_ptr for single objects.\n   template <typename _Tp, typename _Dp = default_delete<_Tp> >\n     class unique_ptr\n     {\n@@ -260,7 +260,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       unique_ptr& operator=(const unique_ptr&) = delete;\n   };\n \n-  /// 20.7.12.3 unique_ptr for array objects with a runtime length\n+  /// 20.7.1.3 unique_ptr for array objects with a runtime length\n   // [unique.ptr.runtime]\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 740 - omit specialization for array objects with a compile time length\n@@ -406,7 +406,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       unique_ptr& operator=(const unique_ptr&) = delete;\n \n       // Disable construction from convertible pointer types.\n-      // (N2315 - 20.6.5.3.1)\n+      // (N2315 - 20.7.1.3.1)\n       template<typename _Up>\n \tunique_ptr(_Up*, typename\n \t\t   std::conditional<std::is_reference<deleter_type>::value,"}, {"sha": "33bed03dae0786fccfc8cb0d09e917dcf7e23dbc", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab48d6e6ca06afe12664be30bb30043a9572604/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab48d6e6ca06afe12664be30bb30043a9572604/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=9ab48d6e6ca06afe12664be30bb30043a9572604", "patch": "@@ -1,6 +1,6 @@\n // <chrono> -*- C++ -*-\n \n-// Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n+// Copyright (C) 2008-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -53,7 +53,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n    */\n \n   /** @namespace std::chrono\n-   *  @brief ISO C++ 0x entities sub namespace for time and date.\n+   *  @brief ISO C++ 2011 entities sub-namespace for time and date.\n    */\n   namespace chrono\n   {\n@@ -69,7 +69,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n   }\n \n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-  // 20.8.2.3 specialization of common_type (for duration)\n+  // 20.11.4.3 specialization of common_type (for duration)\n   template<typename _Rep1, typename _Period1, typename _Rep2, typename _Period2>\n     struct common_type<chrono::duration<_Rep1, _Period1>,\n \t\t       chrono::duration<_Rep2, _Period2>>\n@@ -85,7 +85,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef chrono::duration<__cr, __r> \t\t\ttype;\n     };\n \n-  // 20.8.2.3 specialization of common_type (for time_point)\n+  // 20.11.4.3 specialization of common_type (for time_point)\n   template<typename _Clock, typename _Dur1, typename _Dur2>\n     struct common_type<chrono::time_point<_Clock, _Dur1>,\n \t\t       chrono::time_point<_Clock, _Dur2>>\n@@ -227,7 +227,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \t\t      \"period must be a specialization of ratio\");\n \tstatic_assert(_Period::num > 0, \"period must be positive\");\n \n-\t// 20.8.3.1 construction / copy / destroy\n+\t// 20.11.5.1 construction / copy / destroy\n \tconstexpr duration() = default;\n \n \tconstexpr duration(const duration&) = default;\n@@ -249,12 +249,12 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \t~duration() = default;\n \tduration& operator=(const duration&) = default;\n \n-\t// 20.8.3.2 observer\n+\t// 20.11.5.2 observer\n \tconstexpr rep\n \tcount() const\n \t{ return __r; }\n \n-\t// 20.8.3.3 arithmetic\n+\t// 20.11.5.3 arithmetic\n \tconstexpr duration\n \toperator+() const\n \t{ return *this; }\n@@ -332,7 +332,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \t    return *this;\n \t  }\n \n-\t// 20.8.3.4 special values\n+\t// 20.11.5.4 special values\n \tstatic constexpr duration\n \tzero()\n \t{ return duration(duration_values<rep>::zero()); }"}, {"sha": "8a45b65b817cca7f3c90918b9d28be2e015a1278", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab48d6e6ca06afe12664be30bb30043a9572604/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab48d6e6ca06afe12664be30bb30043a9572604/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=9ab48d6e6ca06afe12664be30bb30043a9572604", "patch": "@@ -1,6 +1,6 @@\n // <thread> -*- C++ -*-\n \n-// Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n+// Copyright (C) 2008-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -238,8 +238,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n \n   /** @namespace std::this_thread\n-   *  @brief ISO C++ 0x entities sub namespace for thread.\n-   *  30.2.2 Namespace this_thread.\n+   *  @brief ISO C++ 2011 entities sub-namespace for thread.\n+   *  30.3.2 Namespace this_thread.\n    */\n   namespace this_thread\n   {"}]}