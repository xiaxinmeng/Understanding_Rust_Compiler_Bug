{"sha": "8092dd900b9483f1f8ec716c5d94a5686e669b0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA5MmRkOTAwYjk0ODNmMWY4ZWM3MTZjNWQ5NGE1Njg2ZTY2OWIwZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-09-06T21:04:55Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-09-06T21:04:55Z"}, "message": "i386.c (ix86_function_value_regno_p): Use AX_REG.\n\n2011-09-06  Uros Bizjak  <ubizjak@gmail.com>\n\n        * config/i386/i386.c (ix86_function_value_regno_p): Use AX_REG.\n        (function_value_32): Do not check TARGET_MMX, TARGET_SSE or TARGET_AVX.\n\ntestsuite/ChangeLog:\n\n2011-09-06  Uros Bizjak  <ubizjak@gmail.com>\n\n        * gcc.target/i386/builtin-apply-mmx.c: Require ia32 effective target.\n\nFrom-SVN: r178610", "tree": {"sha": "57a0ec9253debe2d7c1bdc28fe3529f9b8bd4e76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57a0ec9253debe2d7c1bdc28fe3529f9b8bd4e76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8092dd900b9483f1f8ec716c5d94a5686e669b0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8092dd900b9483f1f8ec716c5d94a5686e669b0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8092dd900b9483f1f8ec716c5d94a5686e669b0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8092dd900b9483f1f8ec716c5d94a5686e669b0d/comments", "author": null, "committer": null, "parents": [{"sha": "cf8fd3097aff02f561ab0f960b107830a8d90168", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf8fd3097aff02f561ab0f960b107830a8d90168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf8fd3097aff02f561ab0f960b107830a8d90168"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "df4877715bb987b413797c9889c7679c038250eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8092dd900b9483f1f8ec716c5d94a5686e669b0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8092dd900b9483f1f8ec716c5d94a5686e669b0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8092dd900b9483f1f8ec716c5d94a5686e669b0d", "patch": "@@ -1,3 +1,8 @@\n+2011-09-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_function_value_regno_p): Use AX_REG.\n+\t(function_value_32): Do not check TARGET_MMX, TARGET_SSE or TARGET_AVX.\n+\n 2011-09-06  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* config/darwin10.h Remove duplicate LIB_SPEC.\n@@ -473,10 +478,8 @@\n \n 2011-09-02  Richard Guenther  <rguenther@suse.de>\n \n-\t* tree-ssa-ccp.c (fold_builtin_alloca_for_var): Do not\n-\tfold alloca (0).\n-\t(ccp_fold_stmt): Continue replacing args when folding\n-\talloca fails.\n+\t* tree-ssa-ccp.c (fold_builtin_alloca_for_var): Do not fold alloca (0).\n+\t(ccp_fold_stmt): Continue replacing args when folding alloca fails.\n \n 2011-08-31  Richard Guenther  <rguenther@suse.de>\n \n@@ -495,8 +498,7 @@\n \t(collect_object_sizes_for): Likewise.\n \t* tree-scalar-evolution.c (interpret_expr): Don't handle\n \tternary RHSs.\n-\t* tree-ssa-forwprop.c (forward_propagate_into_cond): Fix and\n-\tsimplify.\n+\t* tree-ssa-forwprop.c (forward_propagate_into_cond): Fix and simplify.\n \t(ssa_forward_propagate_and_combine): Adjust.\n \t* tree-ssa-loop-im.c (move_computations_stmt): Build the COND_EXPR\n \tas ternary.\n@@ -643,8 +645,8 @@\n \t* gthr-posix.h (__gthread_active_p): Do not use preprocessor\n \tconditionals and comments inside macro arguments.\n \n-20011-08-29  Artjoms Sinkarovs  <artyom.shinkaroff@gmail.com>\n-\t     Richard Guenther  <rguenther@suse.de>\n+2011-08-29  Artjoms Sinkarovs  <artyom.shinkaroff@gmail.com>\n+\t    Richard Guenther  <rguenther@suse.de>\n \n \t* tree.h (constant_boolean_node): Adjust prototype.\n \t* fold-const.c (fold_convert_loc): Move aggregate conversion"}, {"sha": "ff8c49f0bf49fa7cd74e6fb3346d2efe24f63f9f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8092dd900b9483f1f8ec716c5d94a5686e669b0d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8092dd900b9483f1f8ec716c5d94a5686e669b0d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8092dd900b9483f1f8ec716c5d94a5686e669b0d", "patch": "@@ -7015,7 +7015,7 @@ ix86_function_value_regno_p (const unsigned int regno)\n {\n   switch (regno)\n     {\n-    case 0:\n+    case AX_REG:\n       return true;\n \n     case FIRST_FLOAT_REG:\n@@ -7053,18 +7053,18 @@ function_value_32 (enum machine_mode orig_mode, enum machine_mode mode,\n      we normally prevent this case when mmx is not available.  However\n      some ABIs may require the result to be returned like DImode.  */\n   if (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 8)\n-    regno = TARGET_MMX ? FIRST_MMX_REG : 0;\n+    regno = FIRST_MMX_REG;\n \n   /* 16-byte vector modes in %xmm0.  See ix86_return_in_memory for where\n      we prevent this case when sse is not available.  However some ABIs\n      may require the result to be returned like integer TImode.  */\n   else if (mode == TImode\n \t   || (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 16))\n-    regno = TARGET_SSE ? FIRST_SSE_REG : 0;\n+    regno = FIRST_SSE_REG;\n \n   /* 32-byte vector modes in %ymm0.   */\n   else if (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 32)\n-    regno = TARGET_AVX ? FIRST_SSE_REG : 0;\n+    regno = FIRST_SSE_REG;\n \n   /* Floating point return values in %st(0) (unless -mno-fp-ret-in-387).  */\n   else if (X87_FLOAT_MODE_P (mode) && TARGET_FLOAT_RETURNS_IN_80387)\n@@ -7098,6 +7098,8 @@ function_value_64 (enum machine_mode orig_mode, enum machine_mode mode,\n   /* Handle libcalls, which don't provide a type node.  */\n   if (valtype == NULL)\n     {\n+      unsigned int regno;\n+\n       switch (mode)\n \t{\n \tcase SFmode:\n@@ -7108,15 +7110,19 @@ function_value_64 (enum machine_mode orig_mode, enum machine_mode mode,\n \tcase SDmode:\n \tcase DDmode:\n \tcase TDmode:\n-\t  return gen_rtx_REG (mode, FIRST_SSE_REG);\n+\t  regno = FIRST_SSE_REG;\n+\t  break;\n \tcase XFmode:\n \tcase XCmode:\n-\t  return gen_rtx_REG (mode, FIRST_FLOAT_REG);\n+\t  regno = FIRST_FLOAT_REG;\n+\t  break;\n \tcase TCmode:\n \t  return NULL;\n \tdefault:\n-\t  return gen_rtx_REG (mode, AX_REG);\n+\t  regno = AX_REG;\n \t}\n+\n+      return gen_rtx_REG (mode, regno);\n     }\n   else if (POINTER_TYPE_P (valtype))\n     {"}, {"sha": "802525053a8b3b8793dc8e03f0203c62f97f9640", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8092dd900b9483f1f8ec716c5d94a5686e669b0d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8092dd900b9483f1f8ec716c5d94a5686e669b0d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8092dd900b9483f1f8ec716c5d94a5686e669b0d", "patch": "@@ -1,3 +1,7 @@\n+2011-09-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/builtin-apply-mmx.c: Require ia32 effective target.\n+\n 2011-09-06  Enkovich Ilya  <ilya.enkovich@intel.com>\n \n \t* gcc.dg/tree-ssa/pr38533.c (dg-options): Added option\n@@ -224,7 +228,7 @@\n \t* gcc.dg/tree-ssa/ssa-ccp-26.c: Likewise.\n \t* gcc.dg/pr36902.c: XFAIL.\n \n-2011-08-30  Ilya Tocar <ilya.tocar@intel.com>\n+2011-08-30  Ilya Tocar  <ilya.tocar@intel.com>\n \n \t* gcc.target/i386/fma-check.h: New.\n \t* gcc.target/i386/fma-256-fmaddXX.c: New testcase."}, {"sha": "badfe03a97dc3b0956c83811d0d7c28a21dc7499", "filename": "gcc/testsuite/gcc.target/i386/builtin-apply-mmx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8092dd900b9483f1f8ec716c5d94a5686e669b0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-apply-mmx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8092dd900b9483f1f8ec716c5d94a5686e669b0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-apply-mmx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-apply-mmx.c?ref=8092dd900b9483f1f8ec716c5d94a5686e669b0d", "patch": "@@ -11,7 +11,7 @@\n  \n /* { dg-do run { xfail { ! *-*-darwin* } } } */\n /* { dg-options \"-O2 -mmmx\" } */\n-/* { dg-require-effective-target ilp32 } */\n+/* { dg-require-effective-target ia32 } */\n \n #include \"mmx-check.h\"\n "}]}