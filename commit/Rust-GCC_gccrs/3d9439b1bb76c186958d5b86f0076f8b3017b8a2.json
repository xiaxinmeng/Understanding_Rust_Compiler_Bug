{"sha": "3d9439b1bb76c186958d5b86f0076f8b3017b8a2", "node_id": "C_kwDOANBUbNoAKDNkOTQzOWIxYmI3NmMxODY5NThkNWI4NmYwMDc2ZjhiMzAxN2I4YTI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-18T00:16:36Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-18T00:16:36Z"}, "message": "Daily bump.", "tree": {"sha": "ed6dcb72ef37a0b0a80c4ebfe2c927e4d7b773cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed6dcb72ef37a0b0a80c4ebfe2c927e4d7b773cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d9439b1bb76c186958d5b86f0076f8b3017b8a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9439b1bb76c186958d5b86f0076f8b3017b8a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d9439b1bb76c186958d5b86f0076f8b3017b8a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/comments", "author": null, "committer": null, "parents": [{"sha": "1bfb823e2a7346ef55bd53a5354770599f7a550b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bfb823e2a7346ef55bd53a5354770599f7a550b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bfb823e2a7346ef55bd53a5354770599f7a550b"}], "stats": {"total": 598, "additions": 597, "deletions": 1}, "files": [{"sha": "1276f533247372fefa77bec303877e970d705e9b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d9439b1bb76c186958d5b86f0076f8b3017b8a2", "patch": "@@ -1,3 +1,166 @@\n+2022-05-17  Marek Polacek  <polacek@redhat.com>\n+\n+\t* godump.cc (go_output_typedef): Use the DECL_INITIAL of the TREE_VALUE.\n+\n+2022-05-17  Pat Haugen  <pthaugen@linux.ibm.com>\n+\n+\tPR target/99685\n+\t* config/rs6000/rs6000-call.cc (rs6000_function_arg_advance_1): Bump\n+\tregister count when not splitting IEEE 128-bit Complex.\n+\n+2022-05-17  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* omp-low.cc (check_omp_nesting_restrictions): Skip warning for\n+\ttarget inside target if inner is reverse offload.\n+\n+2022-05-17  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* config/gcn/mkoffload.cc (process_obj): Revert: Use ARRAY_SIZE.\n+\t* config/nvptx/mkoffload.cc (process): Likewise.\n+\n+2022-05-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* Makefile.in (OBJS): Add gimple-range-side-effect.o.\n+\t* gimple-range-cache.cc (non_null_ref::non_null_ref): Delete.\n+\t(non_null_ref::~non_null_ref): Delete.\n+\t(non_null_ref::set_nonnull): Delete.\n+\t(non_null_ref::non_null_deref_p): Delete.\n+\t(non_null_ref::process_name): Delete.\n+\t(ranger_cache::ranger_cache): Initialize m_exit object.\n+\t(ranger_cache::fill_block_cache): Use m_exit object intead of nonnull.\n+\t(ranger_cache::range_from_dom): Use side_effect class and m_exit object.\n+\t(ranger_cache::update_to_nonnull): Delete.\n+\t(non_null_loadstore): Delete.\n+\t(ranger_cache::block_apply_nonnull): Delete.\n+\t(ranger_cache::apply_side_effects): New.\n+\t* gimple-range-cache.h (class non_null_ref): Delete.\n+\t(non_null_ref::adjust_range): Delete.\n+\t(class ranger_cache): Adjust prototypes, add side effect manager.\n+\t* gimple-range-path.cc (path_range_query::range_defined_in_block): Use\n+\tside effect manager for queries.\n+\t(path_range_query::adjust_for_non_null_uses): Ditto.\n+\t* gimple-range-path.h (class path_range_query): Delete non_null_ref.\n+\t* gimple-range-side-effect.cc: New.\n+\t* gimple-range-side-effect.h: New.\n+\t* gimple-range.cc (gimple_ranger::gimple_ranger): Update contructor.\n+\t(gimple_ranger::range_of_expr): Check def block for override value.\n+\t(gimple_ranger::range_on_entry): Don't scan dominators for non-null.\n+\t(gimple_ranger::range_on_edge): Check for outgoing side-effects.\n+\t(gimple_ranger::register_side_effects): Call apply_side_effects.\n+\t(enable_ranger): Update contructor.\n+\t* gimple-range.h (class gimple_ranger): Update prototype.\n+\t(enable_ranger): Update prototype.\n+\t* tree-vrp.cc (execute_ranger_vrp): Invoke without immediate-use flag.\n+\n+2022-05-17  Giuliano Belinassi  <gbelinassi@suse.de>\n+\n+\tPR c++/105169\n+\t* targhooks.cc (default_print_patchable_function_entry_1): Handle COMDAT case.\n+\t* varasm.cc (switch_to_comdat_section): New\n+\t(handle_vtv_comdat_section): Call switch_to_comdat_section.\n+\t* varasm.h: Declare switch_to_comdat_section.\n+\n+2022-05-17  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfgloopmanip.cc (duplicate_loop_body_to_header_edge): Do\n+\tnot clear bb->aux of the copied blocks.\n+\n+2022-05-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/105458\n+\t* value-relation.cc (path_oracle::register_relation): Merge, then check\n+\tfor equivalence.\n+\n+2022-05-17  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/105624\n+\tRevert:\n+\t* config/i386/i386.md: Remove constraints when used with\n+\tconst_int_operand, const0_operand, const_1_operand, constm1_operand,\n+\tconst8_operand, const128_operand, const248_operand, const123_operand,\n+\tconst2367_operand, const1248_operand, const359_operand,\n+\tconst_4_or_8_to_11_operand, const48_operand, const_0_to_1_operand,\n+\tconst_0_to_3_operand, const_0_to_4_operand, const_0_to_5_operand,\n+\tconst_0_to_7_operand, const_0_to_15_operand, const_0_to_31_operand,\n+\tconst_0_to_63_operand, const_0_to_127_operand, const_0_to_255_operand,\n+\tconst_0_to_255_mul_8_operand, const_1_to_31_operand,\n+\tconst_1_to_63_operand, const_2_to_3_operand, const_4_to_5_operand,\n+\tconst_4_to_7_operand, const_6_to_7_operand, const_8_to_9_operand,\n+\tconst_8_to_11_operand, const_8_to_15_operand, const_10_to_11_operand,\n+\tconst_12_to_13_operand, const_12_to_15_operand, const_14_to_15_operand,\n+\tconst_16_to_19_operand, const_16_to_31_operand, const_20_to_23_operand,\n+\tconst_24_to_27_operand and const_28_to_31_operand.\n+\t* config/i386/mmx.md: Ditto.\n+\t* config/i386/sse.md: Ditto.\n+\t* config/i386/subst.md: Ditto.\n+\t* config/i386/sync.md: Ditto.\n+\n+2022-05-17  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* diagnostic.cc: Don't advise to call 'abort' instead of\n+\t'internal_error'.\n+\t* system.h: Advise to call 'internal_error' instead of 'abort' or\n+\t'fancy_abort'.\n+\n+2022-05-17  Frederik Harwath  <frederik@codesourcery.com>\n+\n+\t* graphite-sese-to-poly.cc (build_poly_sr_1): Fix a typo and\n+\ta reference to a variable which does not exist.\n+\t* graphite-isl-ast-to-gimple.cc (gsi_insert_earliest): Fix typo\n+\tin comment.\n+\n+2022-05-17  Frederik Harwath  <frederik@codesourcery.com>\n+\n+\t* graphite-sese-to-poly.cc (isl_id_for_ssa_name): Rename to ...\n+\t(isl_id_for_parameter): ... this new function name.\n+\t(build_scop_context): Adjust function use.\n+\n+2022-05-17  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR target/105602\n+\t* config/gcn/t-omp-device (arch): Add 'amdgcn' besides existing 'gcn'.\n+\t* config/gcn/gcn.cc (gcn_omp_device_kind_arch_isa): Likewise.\n+\n+2022-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-core.h (enum omp_clause_depend_kind): Add\n+\tOMP_CLAUSE_DEPEND_INOUTSET.\n+\t* tree-pretty-print.cc (dump_omp_clause): Handle\n+\tOMP_CLAUSE_DEPEND_INOUTSET.\n+\t* gimplify.cc (gimplify_omp_depend): Likewise.\n+\t* omp-low.cc (lower_depend_clauses): Likewise.\n+\n+2022-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/105613\n+\t* config/i386/sse.md (vec_cmpeqv2div2di, vec_cmpeqv1tiv1ti): Use\n+\tandv4si3 only for EQ, for NE use iorv4si3 instead.\n+\n+2022-05-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105618\n+\t* tree-ssa-sink.cc (statement_sink_location): For virtual\n+\tPHI uses ignore those defining the used virtual operand.\n+\n+2022-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-ssa-forwprop.cc (simplify_bitfield_ref): Spelling fix:\n+\thanlde -> handle.  Fix up comment formatting.\n+\n+2022-05-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/105033\n+\t* config/i386/sse.md (*vec_concatv4si): Extend to ..\n+\t(*vec_concat<mode>): .. V16QI and V8HImode.\n+\t(*vec_concatv16qi_permt2): New pre_reload define_insn_and_split.\n+\t(*vec_concatv8hi_permt2): Ditto.\n+\n+2022-05-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR tree-optimization/105591\n+\t* tree-ssa-forwprop.cc (simplify_bitfield_ref): Clamp\n+\tvec_perm_expr index.\n+\n 2022-05-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c/105492"}, {"sha": "ca0d77469967a2b7bea4ebb38c1f04a667327068", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=3d9439b1bb76c186958d5b86f0076f8b3017b8a2", "patch": "@@ -1 +1 @@\n-20220517\n+20220518"}, {"sha": "a0577f1ec78d5585146f1a64e3327ea83dc0d711", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 226, "deletions": 0, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3d9439b1bb76c186958d5b86f0076f8b3017b8a2", "patch": "@@ -1,3 +1,229 @@\n+2022-05-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Flag_Effectively_Volatile_Objects): Restore\n+\tredundant guard.\n+\n+2022-05-17  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Add error check for\n+\tthe case of a renamed subprogram given by an expanded name whose\n+\toutermost prefix names a unit that is hidden by the name of the\n+\trenaming.\n+\t(Ult_Expanded_Prefix): New local expression function to return\n+\tthe ultimate prefix of an expanded name.\n+\n+2022-05-17  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* gnat_cuda.ads: Update package-level comments.\n+\t(Build_And_Insert_CUDA_Initialization): Remove function.\n+\t* gnat_cuda.adb (Build_And_Insert_CUDA_Initialization): Remove\n+\tfunction.\n+\t(Expand_CUDA_Package): Remove call to\n+\tBuild_And_Insert_CUDA_Initialization.\n+\n+2022-05-17  Etienne Servais  <servais@adacore.com>\n+\n+\t* freeze.adb (Freeze_Enumeration_Type): Fix comment, enhance\n+\tmessage and silence warning for size > 32.\n+\n+2022-05-17  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_Potential_Renaming): Deal with no\n+\tentity case.\n+\t* inline.ads (Check_Object_Renaming_In_GNATprove_Mode): New\n+\tprocedure.\n+\t* inline.adb (Check_Object_Renaming_In_GNATprove_Mode): New\n+\tprocedure.\n+\t(Can_Be_Inlined_In_GNATprove_Mode): Remove case forbidding\n+\tinlining for subprograms inside generics.\n+\t* sem_ch12.adb (Copy_Generic_Node): Preserve global entities\n+\twhen inlining in GNATprove mode.\n+\t* sem_ch6.adb (Analyse_Subprogram_Body_Helper): Remove body to\n+\tinline if renaming is detected in GNATprove mode.\n+\n+2022-05-17  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Allocator): For an allocator with an\n+\tunconstrained discriminated designated type, and whose\n+\tallocation subtype is constrained, set the\n+\tActual_Designated_Subtype of the dereference passed to the init\n+\tproc of the designated type to be the allocation subtype.\n+\t* sinfo.ads: Add documentation of new setting of\n+\tActual_Designated_Subtype on a dereference used as an actual\n+\tparameter of call to an init proc associated with an allocator.\n+\tAlso add missing syntax and documentation for the GNAT language\n+\textension that allows an expression as a default for a concrete\n+\tgeneric formal function.\n+\n+2022-05-17  Bob Duff  <duff@adacore.com>\n+\n+\t* sinfo.ads: Remove From_At_End.  Update comments.\n+\t* gen_il-fields.ads, gen_il-gen-gen_nodes.adb, sem_ch11.adb:\n+\tRemove From_At_End.\n+\t* exp_ch11.adb (Expand_At_End_Handler): Remove assertion.\n+\t* fe.h (Exception_Mechanism, Exception_Mechanism_Type, Has_DIC,\n+\tHas_Invariants, Is_List_Member, List_Containing): Remove\n+\tdeclarations that are not used in gigi.\n+\t* opt.ads (Exception_Mechanism): This is not used in gigi.\n+\t* exp_util.ads: Minor comment fix.\n+\n+2022-05-17  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* impunit.adb: Add \"g-binsea\" to Non_Imp_File_Names_95 list.\n+\n+2022-05-17  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iterator_Specification): Use\n+\tInsert_Action when possibly inside an expression.\n+\n+2022-05-17  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* libgnat/g-forstr.adb (Is_Number): Add scientific notation and\n+\tshortest representation.\n+\n+2022-05-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Full_Type_Declaration): Look into N.\n+\n+2022-05-17  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_util.adb (Requires_Cleanup_Actions): Remove\n+\tN_Protected_Body from the case statement, so that case will be\n+\tcovered by \"raise Program_Error\".\n+\n+2022-05-17  Bob Duff  <duff@adacore.com>\n+\n+\t* output.adb (Pop_Output, Set_Output): Unconditionally flush\n+\toutput when switching from one output destination to another.\n+\tOtherwise buffering can cause garbled output.\n+\t(w): Push/pop the current settings, and temporarily\n+\tSet_Standard_Error during these procedures.\n+\n+2022-05-17  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* libgnat/g-binsea.ads, libgnat/g-binsea.adb\n+\t(GNAT.Binary_Search): New package.\n+\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): New item in list.\n+\t* doc/gnat_rm/the_gnat_library.rst (GNAT.Binary_Search): New\n+\tpackage record.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-05-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch12.ads (Is_Abbreviated_Instance): Declare.\n+\t* sem_ch12.adb (Check_Abbreviated_Instance): Declare.\n+\t(Requires_Conformance_Checking): Declare.\n+\t(Analyze_Association.Process_Default): Fix subtype of parameter.\n+\t(Analyze_Formal_Object_Declaration): Check whether it is in the\n+\tvisible part of abbreviated instance.\n+\t(Analyze_Formal_Subprogram_Declaration): Likewise.\n+\t(Analyze_Formal_Type_Declaration): Likewise.\n+\t(Analyze_Package_Instantiation): Do not check for a generic child\n+\tunit in the case of an abbreviated instance.\n+\t(Check_Abbreviated_Instance): New procedure.\n+\t(Check_Formal_Packages): Tidy up.\n+\t(Copy_Generic_Elist): Fix comment.\n+\t(Instantiate_Formal_Package): Tidy up.  If the generic unit is a\n+\tchild unit, copy the qualified name onto the abbreviated instance.\n+\t(Is_Abbreviated_Instance): New function.\n+\t(Collect_Previous_Instances): Call Is_Abbreviated_Instance.\n+\t(Requires_Conformance_Checking): New function.\n+\t* sem_ch7.adb (Analyze_Package_Specification): Do not install the\n+\tprivate declarations of the parent for an abbreviated instance.\n+\n+2022-05-17  Etienne Servais  <servais@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Subtype_Declaration): Use underlying type\n+\tof Indic_Typ.\n+\t(Constrain_Array): Ditto for T.\n+\n+2022-05-17  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute [Attribute_Reduce]): Allow\n+\t'Reduce for Ada 2022 and above.\n+\t* sem_attr.ads (Attribute_Impl_Def): 'Reduce is no longer\n+\timplementation defined.\n+\n+2022-05-17  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_N_Asynchronous_Select): Don't generate\n+\tAbort_Undefers when not Abort_Allowed.\n+\n+2022-05-17  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* exp_ch7.adb: Fix typo.\n+\n+2022-05-17  Etienne Servais  <servais@adacore.com>\n+\n+\t* lib.ads: initialize `Compiler_State` to `Parsing`.\n+\n+2022-05-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch13.adb (Has_Compatible_Representation): Return true for\n+\tderived untagged record types without representation clause.\n+\n+2022-05-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch13.ads (Has_Compatible_Representation): Minor tweaks.\n+\t* sem_ch13.adb (Has_Compatible_Representation): Look directly into\n+\tthe (implementation) base types and simplifiy accordingly.\n+\t* exp_ch5.adb (Change_Of_Representation): Adjust.\n+\t* exp_ch6.adb (Expand_Actuals): Likewise.\n+\n+2022-05-17  Etienne Servais  <servais@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Assignment): Remove superfluous call to\n+\tOriginal_Node.\n+\n+2022-05-17  Javier Miranda  <miranda@adacore.com>\n+\n+\t* freeze.adb (Freeze_Entity): Protect the call to\n+\tDeclaration_Node against entities of expressions replaced by the\n+\tfrontend with an N_Raise_CE node.\n+\n+2022-05-17  Javier Miranda  <miranda@adacore.com>\n+\n+\t* freeze.adb (Build_DTW_Spec): Do not inherit the not-overriding\n+\tindicator because the DTW wrapper overrides its wrapped\n+\tsubprogram.\n+\t* contracts.ads (Make_Class_Precondition_Subps): Adding\n+\tdocumentation.\n+\n+2022-05-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch13.adb (Expand_N_Freeze_Entity): Delete freeze nodes for\n+\tsubprograms only if they have no actions.\n+\t* exp_ch6.adb (Freeze_Subprogram): Put the actions into the Actions\n+\tfield of the freeze node instead of inserting them after it.\n+\t* sem_elab.adb (Is_SPARK_Semantic_Target): Fix typo in comment.\n+\t* gcc-interface/trans.cc (process_freeze_entity): Return early for\n+\tfreeze nodes of subprograms with Interface_Alias set.\n+\n+2022-05-17  Javier Miranda  <miranda@adacore.com>\n+\n+\t* contracts.adb (Build_Call_Helper_Body): Improve handling of\n+\tthe case of a (legal) non-dispatching call to an abstract\n+\tsubprogram.\n+\n+2022-05-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_attributes.rst\n+\t(Loop_Entry): Mention pragmas Assert, Assert_And_Cut and Assume;\n+\trefill.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-05-17  Etienne Servais  <servais@adacore.com>\n+\n+\t* par-ch3.adb (P_Access_Type_Definition): Outputs an error if\n+\ttoken is not \"access\".\n+\n+2022-05-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch2.adb (Expand_Current_Value): Remove special case for\n+\treferences immediately within pragma argument associations.\n+\t* exp_prag.adb (Expand_Pragma_Inspection_Point): Remove special\n+\tcase for privals.\n+\n 2022-05-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_ch7.adb (Inspect_Untagged_Record_Completion): Also move the"}, {"sha": "a5fe2ce676a148a50372bcfc67986e34a3efff93", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3d9439b1bb76c186958d5b86f0076f8b3017b8a2", "patch": "@@ -1,3 +1,8 @@\n+2022-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-omp.cc (c_finish_omp_depobj): Handle\n+\tOMP_CLAUSE_DEPEND_INOUTSET.\n+\n 2022-05-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c/105492"}, {"sha": "25debc1a1adf027a2971a88d373637a6c9130b02", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=3d9439b1bb76c186958d5b86f0076f8b3017b8a2", "patch": "@@ -1,3 +1,14 @@\n+2022-05-17  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-decl.cc (finish_enum): Store the CONST_DECL into TREE_VALUE, not\n+\tits value.\n+\n+2022-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.cc (c_parser_omp_clause_depend): Parse\n+\tinoutset depend-kind.\n+\t(c_parser_omp_depobj): Likewise.\n+\n 2022-05-16  Martin Liska  <mliska@suse.cz>\n \n \t* c-decl.cc (match_builtin_function_types): Use ARRAY_SIZE."}, {"sha": "0bbf7e2e74c69184f8248610b554fb5d80a92eeb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3d9439b1bb76c186958d5b86f0076f8b3017b8a2", "patch": "@@ -1,3 +1,17 @@\n+2022-05-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/102307\n+\t* decl.cc (check_initializer): Use build_cplus_new in case of\n+\tconstexpr failure.\n+\n+2022-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.cc (cp_parser_omp_clause_depend): Parse\n+\tinoutset depend-kind.\n+\t(cp_parser_omp_depobj): Likewise.\n+\t* cxx-pretty-print.cc (cxx_pretty_printer::statement): Handle\n+\tOMP_CLAUSE_DEPEND_INOUTSET.\n+\n 2022-05-16  Martin Liska  <mliska@suse.cz>\n \n \t* module.cc (depset::entity_kind_name): Use ARRAY_SIZE."}, {"sha": "13d3fb0a9f749fab5577d2df04c27deca938ab93", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3d9439b1bb76c186958d5b86f0076f8b3017b8a2", "patch": "@@ -1,3 +1,12 @@\n+2022-05-17  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* dump-parse-tree.cc (show_omp_namelist): Handle omp_all_memory.\n+\t* openmp.cc (gfc_match_omp_variable_list, gfc_match_omp_depend_sink,\n+\tgfc_match_omp_clauses, resolve_omp_clauses): Likewise.\n+\t* trans-openmp.cc (gfc_trans_omp_clauses, gfc_trans_omp_depobj):\n+\tLikewise.\n+\t* resolve.cc (resolve_symbol): Reject it as symbol.\n+\n 2022-05-16  Martin Liska  <mliska@suse.cz>\n \n \t* frontend-passes.cc (gfc_code_walker): Use ARRAY_SIZE."}, {"sha": "41d5346092e35b97910e140652c4e39d84de1d68", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3d9439b1bb76c186958d5b86f0076f8b3017b8a2", "patch": "@@ -1,3 +1,61 @@\n+2022-05-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/102307\n+\t* g++.dg/cpp1z/constexpr-array2.C: New test.\n+\n+2022-05-17  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* c-c++-common/gomp/target-device-ancestor-5.c: New test.\n+\n+2022-05-17  Giuliano Belinassi  <gbelinassi@suse.de>\n+\n+\tPR c++/105169\n+\t* g++.dg/modules/pr105169.h: New file.\n+\t* g++.dg/modules/pr105169_a.C: New test.\n+\t* g++.dg/modules/pr105169_b.C: New file.\n+\n+2022-05-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr105458.c: New.\n+\n+2022-05-17  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/105624\n+\t* gcc.target/i386/pr105624.c: New test.\n+\n+2022-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/all-memory-1.c (boo): Add test with\n+\tinoutset depend-kind.\n+\t* c-c++-common/gomp/all-memory-2.c (boo): Likewise.\n+\t* c-c++-common/gomp/depobj-1.c (f1): Likewise.\n+\t(f2): Adjusted expected diagnostics.\n+\t* g++.dg/gomp/depobj-1.C (f4): Adjust expected diagnostics.\n+\n+2022-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/105613\n+\t* gcc.c-torture/execute/pr105613.c: New test.\n+\n+2022-05-17  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/all-memory-1.f90: New test.\n+\t* gfortran.dg/gomp/all-memory-2.f90: New test.\n+\t* gfortran.dg/gomp/all-memory-3.f90: New test.\n+\n+2022-05-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105618\n+\t* gcc.dg/tree-ssa/ssa-sink-19.c: New testcase.\n+\n+2022-05-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr105033.c: New test.\n+\n+2022-05-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.dg/pr105591.c: New test.\n+\n 2022-05-16  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/105103"}, {"sha": "4e96c66dd01d7d1fbf4e47d49ee69a17539af6d7", "filename": "include/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=3d9439b1bb76c186958d5b86f0076f8b3017b8a2", "patch": "@@ -1,3 +1,12 @@\n+2022-05-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* demangle.h (enum demangle_component_type): Add\n+\tDEMANGLE_COMPONENT_STRUCTURED_BINDING.\n+\n+2022-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gomp-constants.h (GOMP_DEPEND_INOUTSET): Define.\n+\n 2022-05-10  Martin Liska  <mliska@suse.cz>\n \n \t* ansidecl.h (PTR): Remove."}, {"sha": "7b8307e0eb43049e1e42a6e88e6c30dffec53b8d", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=3d9439b1bb76c186958d5b86f0076f8b3017b8a2", "patch": "@@ -1,3 +1,43 @@\n+2022-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgomp.texi (OpenMP 5.1): Remove \"Not inside target regions\"\n+\tcomment for omp_display_env feature.\n+\n+2022-05-17  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (Offload-Target Specifics): New chapter; add section\n+\tto document OpenMP context selectors.\n+\n+2022-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgomp.h (struct gomp_task_depend_entry): Change is_in type\n+\tfrom bool to unsigned char.\n+\t* task.c (gomp_task_handle_depend): Handle GOMP_DEPEND_INOUTSET.\n+\tIgnore dependencies where\n+\ttask->depend[i].is_in && task->depend[i].is_in == ent->is_in\n+\trather than just task->depend[i].is_in && ent->is_in.  Remember\n+\twhether GOMP_DEPEND_IN loop is needed and guard the loop with that\n+\tconditional.\n+\t(gomp_task_maybe_wait_for_dependencies): Handle GOMP_DEPEND_INOUTSET.\n+\tIgnore dependencies where elem.is_in && elem.is_in == ent->is_in\n+\trather than just elem.is_in && ent->is_in.\n+\t* testsuite/libgomp.c-c++-common/depend-1.c (test): Add task with\n+\tinoutset depend-kind.\n+\t* testsuite/libgomp.c-c++-common/depend-2.c (test): Likewise.\n+\t* testsuite/libgomp.c-c++-common/depend-3.c (test): Likewise.\n+\t* testsuite/libgomp.c-c++-common/depend-inoutset-1.c: New test.\n+\n+2022-05-17  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (OpenMP Implementation Status): Add 5.2 table.\n+\n+2022-05-17  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (OpenMP 5.1): Set omp_all_memory to 'Y'.\n+\t* testsuite/libgomp.fortran/depend-5.f90: New test.\n+\t* testsuite/libgomp.fortran/depend-6.f90: New test.\n+\t* testsuite/libgomp.fortran/depend-7.f90: New test.\n+\n 2022-05-16  Marcel Vollweiler  <marcel@codesourcery.com>\n \n \t* testsuite/libgomp.c++/target-has-device-addr-7.C: New test."}, {"sha": "61938ab146fba893d3340074214bdf7ea79422d8", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=3d9439b1bb76c186958d5b86f0076f8b3017b8a2", "patch": "@@ -1,3 +1,11 @@\n+2022-05-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-demangle.c (d_make_comp): Adjust.\n+\t(d_unqualified_name): Add 'DC' support.\n+\t(d_count_template_scopes): Adjust.\n+\t(d_print_comp_inner): Add structured binding.\n+\t* testsuite/demangle-expected: Add testcases.\n+\n 2022-05-10  Martin Liska  <mliska@suse.cz>\n \n \t* regex.c: Restore comments."}, {"sha": "0fc27dac9d9157daa434af19e5de1d899599883f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9439b1bb76c186958d5b86f0076f8b3017b8a2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3d9439b1bb76c186958d5b86f0076f8b3017b8a2", "patch": "@@ -1,3 +1,56 @@\n+2022-05-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++17/memory_resource.cc (set_default_resource): Use\n+\tmemory_order_acq_rel.\n+\t(get_default_resource): Use memory_order_acquire.\n+\n+2022-05-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/memory_resource (new_delete_resource): Add\n+\tnodiscard, returns_nonnull and const attributes.\n+\t(null_memory_resource): Likewise.\n+\t(set_default_resource, get_default_resource): Add returns_nonnull\n+\tattribute.\n+\t(memory_resource::is_equal): Add nodiscard attribute.\n+\t(operator==, operator!=): Likewise.\n+\n+2022-05-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ios_base.h (io_category): Add const and nodiscard\n+\tattributes.\n+\t(make_error_code, make_error_condition): Add nodiscard.\n+\t* include/std/future (future_category): Add const and nodiscard.\n+\t(make_error_code, make_error_condition): Add nodiscard.\n+\t* include/std/system_error (generic_category system_category):\n+\tAdd nodiscard. Replace _GLIBCXX_CONST with C++11 attribute.\n+\t(error_code::value, error_code::category, error_code::operator bool)\n+\t(error_condition::value, error_condition::category)\n+\t(error_condition::operator bool, make_error_code)\n+\t(make_error_condition, operator==, operator!=, operator<=>): Add\n+\tnodiscard.\n+\n+2022-05-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/expected/synopsis.cc: Skip for versioned\n+\tnamespace.\n+\t* testsuite/27_io/headers/iosfwd/synopsis.cc: Likewise.\n+\n+2022-05-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/Makefile.am [ENABLE_SYMVERS_GNU_NAMESPACE] (cxx11_sources):\n+\tDo not build the compatibility*-c++0x.cc objects.\n+\t* src/Makefile.in: Regenerate.\n+\t* src/c++11/compatibility-c++0x.cc [_GLIBCXX_INLINE_VERSION]:\n+\tRefuse to build for the versioned namespace.\n+\t* src/c++11/compatibility-chrono.cc: Likewise.\n+\t* src/c++11/compatibility-condvar.cc: Likewise.\n+\t* src/c++11/compatibility-thread-c++0x.cc: Likewise.\n+\t* src/c++11/chrono.cc (system_clock, steady_clock):\n+\tUse macros to define in inline namespace _V2, matching the\n+\tdeclarations in <system_error>.\n+\t* src/c++11/system_error.cc (system_category, generic_category):\n+\tLikewise.\n+\n 2022-05-16  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/prerequisites.xml: Fix attributes for external"}]}