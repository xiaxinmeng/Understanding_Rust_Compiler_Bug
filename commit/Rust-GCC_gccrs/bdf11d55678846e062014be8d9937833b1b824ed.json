{"sha": "bdf11d55678846e062014be8d9937833b1b824ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRmMTFkNTU2Nzg4NDZlMDYyMDE0YmU4ZDk5Mzc4MzNiMWI4MjRlZA==", "commit": {"author": {"name": "Jeroen Frijters", "email": "jeroen@frijters.net", "date": "2004-03-21T10:54:46Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-03-21T10:54:46Z"}, "message": "URI.java (parseURI): Added unquoting.\n\n2004-03-21  Jeroen Frijters  <jeroen@frijters.net>\n\n\t* java/net/URI.java (parseURI): Added unquoting.\n\t(unquote): New method.\n\t(quoteAuthority): Implemented.\n\t(quote(String,String)): New method.\n\t(quotePath): Implemented.\n\t(getRawSchemeSpecificPart): Return new rawSchemeSpecificPart field.\n\t(getSchemeSpecificPart): Removed FIXME comment.\n\t(getRawAuthority): Return new rawAuthority field.\n\t(getAuthority): Removed FIXME comment.\n\t(getRawUserInfo): Return new rawUserInfo field.\n\t(getUserInfo): Removed FIXME comment.\n\t(getRawPath): Return new rawPath field.\n\t(getPath): Removed FIXME comment.\n\t(getRawQuery): Return new rawQuery field.\n\t(getQuery): Removed FIXME comment.\n\t(getRawFragment): Return new rawFragment field.\n\t(getFragment): Removed FIXME comment.\n\nFrom-SVN: r79773", "tree": {"sha": "ff0a9074360d3243499c41360f994ba91b3be4eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff0a9074360d3243499c41360f994ba91b3be4eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdf11d55678846e062014be8d9937833b1b824ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdf11d55678846e062014be8d9937833b1b824ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdf11d55678846e062014be8d9937833b1b824ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdf11d55678846e062014be8d9937833b1b824ed/comments", "author": {"login": "jfrijters", "id": 2994393, "node_id": "MDQ6VXNlcjI5OTQzOTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2994393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfrijters", "html_url": "https://github.com/jfrijters", "followers_url": "https://api.github.com/users/jfrijters/followers", "following_url": "https://api.github.com/users/jfrijters/following{/other_user}", "gists_url": "https://api.github.com/users/jfrijters/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfrijters/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfrijters/subscriptions", "organizations_url": "https://api.github.com/users/jfrijters/orgs", "repos_url": "https://api.github.com/users/jfrijters/repos", "events_url": "https://api.github.com/users/jfrijters/events{/privacy}", "received_events_url": "https://api.github.com/users/jfrijters/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eabd7d3156418580df4e3783efd9d75436678800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eabd7d3156418580df4e3783efd9d75436678800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eabd7d3156418580df4e3783efd9d75436678800"}], "stats": {"total": 171, "additions": 150, "deletions": 21}, "files": [{"sha": "e9730a02a260ae7b54b100a84178f27af569979d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdf11d55678846e062014be8d9937833b1b824ed/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdf11d55678846e062014be8d9937833b1b824ed/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=bdf11d55678846e062014be8d9937833b1b824ed", "patch": "@@ -1,3 +1,23 @@\n+2004-03-21  Jeroen Frijters  <jeroen@frijters.net>\n+\n+\t* java/net/URI.java (parseURI): Added unquoting.\n+\t(unquote): New method.\n+\t(quoteAuthority): Implemented.\n+\t(quote(String,String)): New method.\n+\t(quotePath): Implemented.\n+\t(getRawSchemeSpecificPart): Return new rawSchemeSpecificPart field.\n+\t(getSchemeSpecificPart): Removed FIXME comment.\n+\t(getRawAuthority): Return new rawAuthority field.\n+\t(getAuthority): Removed FIXME comment.\n+\t(getRawUserInfo): Return new rawUserInfo field.\n+\t(getUserInfo): Removed FIXME comment.\n+\t(getRawPath): Return new rawPath field.\n+\t(getPath): Removed FIXME comment.\n+\t(getRawQuery): Return new rawQuery field.\n+\t(getQuery): Removed FIXME comment.\n+\t(getRawFragment): Return new rawFragment field.\n+\t(getFragment): Removed FIXME comment.\n+\n 2004-03-20  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/URLConnection.java: Merged copyright year with classpath."}, {"sha": "e1d833a072d4f8ef03d1a8bd489029693b8858ee", "filename": "libjava/java/net/URI.java", "status": "modified", "additions": 130, "deletions": 21, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdf11d55678846e062014be8d9937833b1b824ed/libjava%2Fjava%2Fnet%2FURI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdf11d55678846e062014be8d9937833b1b824ed/libjava%2Fjava%2Fnet%2FURI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURI.java?ref=bdf11d55678846e062014be8d9937833b1b824ed", "patch": "@@ -64,6 +64,21 @@\n   private static final String URI_REGEXP =\n     \"^(([^:/?#]+):)?((//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?)?(#(.*))?\";\n \n+  /**\n+   * Valid characters (taken from rfc2396)\n+   */\n+  private static final String RFC2396_DIGIT = \"0123456789\";\n+  private static final String RFC2396_LOWALPHA = \"abcdefghijklmnopqrstuvwxyz\";\n+  private static final String RFC2396_UPALPHA = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n+  private static final String RFC2396_ALPHA = RFC2396_LOWALPHA + RFC2396_UPALPHA;\n+  private static final String RFC2396_ALPHANUM = RFC2396_DIGIT + RFC2396_ALPHA;\n+  private static final String RFC2396_MARK = \"-_.!~*'()\";\n+  private static final String RFC2396_UNRESERVED = RFC2396_ALPHANUM + RFC2396_MARK;\n+  private static final String RFC2396_REG_NAME = RFC2396_UNRESERVED + \"$,;:@&=+\";\n+  private static final String RFC2396_PCHAR = RFC2396_UNRESERVED + \":@&=+$,\";\n+  private static final String RFC2396_SEGMENT = RFC2396_PCHAR + \";\";\n+  private static final String RFC2396_PATH_SEGMENTS = RFC2396_SEGMENT + \"/\";\n+\n   /**\n    * Index of scheme component in parsed URI.\n    */\n@@ -95,13 +110,20 @@\n   private static final int FRAGMENT_GROUP = 10;\n \n   private String scheme;\n+  private String rawSchemeSpecificPart;\n   private String schemeSpecificPart;\n+  private String rawAuthority;\n   private String authority;\n+  private String rawUserInfo;\n   private String userInfo;\n+  private String rawHost;\n   private String host;\n   private int port;\n+  private String rawPath;\n   private String path;\n+  private String rawQuery;\n   private String query;\n+  private String rawFragment;\n   private String fragment;\n \n   private void readObject (ObjectInputStream is)\n@@ -134,15 +156,63 @@ private void parseURI (String str)\n     if (matcher.matches())\n       {\n \tscheme = getURIGroup(matcher, SCHEME_GROUP);\n-\tschemeSpecificPart = getURIGroup(matcher, SCHEME_SPEC_PART_GROUP); \n-\tauthority = getURIGroup(matcher, AUTHORITY_GROUP);\n-\tpath = getURIGroup(matcher, PATH_GROUP);\n-\tquery = getURIGroup(matcher, QUERY_GROUP);\n-\tfragment = getURIGroup(matcher, FRAGMENT_GROUP);\n+\trawSchemeSpecificPart = getURIGroup(matcher, SCHEME_SPEC_PART_GROUP); \n+\trawAuthority = getURIGroup(matcher, AUTHORITY_GROUP);\n+\trawPath = getURIGroup(matcher, PATH_GROUP);\n+\trawQuery = getURIGroup(matcher, QUERY_GROUP);\n+\trawFragment = getURIGroup(matcher, FRAGMENT_GROUP);\n       }\n     else\n       throw new URISyntaxException(str,\n \t\t\t\t   \"doesn't match URI regular expression\");\n+    // We must eagerly unquote the parts, because this is the only time\n+    // we may throw an exception.\n+    schemeSpecificPart = unquote(rawSchemeSpecificPart);\n+    authority = unquote(rawAuthority);\n+    path = unquote(rawPath);\n+    query = unquote(rawQuery);\n+    fragment = unquote(rawFragment);\n+  }\n+\n+  /**\n+   * Unquote \"%\" + hex quotes characters\n+   *\n+   * @param str The string to unquote or null.\n+   *\n+   * @return The unquoted string or null if str was null.\n+   *\n+   * @exception URISyntaxException If the given string contains invalid\n+   * escape sequences.\n+   */\n+  private static String unquote (String str)\n+    throws URISyntaxException\n+  {\n+    if (str == null)\n+      return null;\n+    byte[] buf = new byte[str.length()];\n+    int pos = 0;\n+    for (int i = 0; i < str.length(); i++) {\n+      char c = str.charAt(i);\n+      if (c > 127)\n+\t  throw new URISyntaxException(str, \"Invalid character\");\n+      if (c == '%') {\n+        if (i + 2 >= str.length())\n+\t  throw new URISyntaxException(str, \"Invalid quoted character\");\n+\tString hex = \"0123456789ABCDEF\";\n+        int hi = hex.indexOf(str.charAt(++i));\n+        int lo = hex.indexOf(str.charAt(++i));\n+        if (lo < 0 || hi < 0)\n+\t  throw new URISyntaxException(str, \"Invalid quoted character\");\n+\tbuf[pos++] = (byte)(hi * 16 + lo);\n+      } else {\n+\tbuf[pos++] = (byte)c;\n+      }\n+    }\n+    try {\n+      return new String(buf, 0, pos, \"utf-8\");\n+    } catch (java.io.UnsupportedEncodingException x2) {\n+      throw (Error)new InternalError().initCause(x2);\n+    }\n   }\n \n   /**\n@@ -173,8 +243,52 @@ private static String quote (String str) {\n    * @return The quoted string.\n    */\n   private static String quoteAuthority (String str) {\n-    // FIXME: unimplemented.\n-    return str;\n+    // Technically, we should be using RFC2396_AUTHORITY, but\n+    // it contains no additional characters.\n+    return quote(str, RFC2396_REG_NAME);\n+  }\n+\n+  /**\n+   * Quote characters in str that are not part of legalCharacters.\n+   *\n+   * Replace illegal characters by encoding their UTF-8\n+   * representation as \"%\" + hex code for each resulting\n+   * UTF-8 character.\n+   *\n+   * @param str The string to quote\n+   * @param legalCharacters The set of legal characters\n+   * \n+   * @return The quoted string.\n+   */\n+  private static String quote (String str, String legalCharacters)\n+  {\n+    StringBuffer sb = new StringBuffer(str.length());\n+    for (int i = 0; i < str.length(); i++) {\n+      char c = str.charAt(i);\n+      if (legalCharacters.indexOf(c) == -1) {\n+\tString hex = \"0123456789ABCDEF\";\n+\tif (c <= 127) {\n+\t  sb.append('%')\n+\t    .append(hex.charAt(c / 16))\n+\t    .append(hex.charAt(c % 16));\n+\t} else {\n+\t  try {\n+\t    // this is far from optimal, but it works\n+\t    byte[] utf8 = str.substring(i, i + 1).getBytes(\"utf-8\");\n+\t    for (int j = 0; j < utf8.length; j++) {\n+\t\tsb.append('%')\n+\t\t.append(hex.charAt((utf8[j] & 0xff) / 16))\n+\t\t.append(hex.charAt((utf8[j] & 0xff) % 16));\n+\t    }\n+\t  } catch (java.io.UnsupportedEncodingException x) {\n+\t    throw (Error)new InternalError().initCause(x);\n+\t  }\n+\t}\n+      } else {\n+\tsb.append(c);\n+      }\n+    }\n+    return sb.toString();\n   }\n \n   /**\n@@ -205,8 +319,9 @@ private static String quoteHost (String str) {\n    * @return The quoted string.\n    */\n   private static String quotePath (String str) {\n-    // FIXME: unimplemented.\n-    return str;\n+    // Technically, we should be using RFC2396_PATH, but\n+    // it contains no additional characters.\n+    return quote(str, RFC2396_PATH_SEGMENTS);\n   }\n \n   /**\n@@ -499,15 +614,14 @@ public boolean isOpaque ()\n    */\n   public String getRawSchemeSpecificPart ()\n   {\n-    return schemeSpecificPart;\n+    return rawSchemeSpecificPart;\n   }\n \n   /**\n    * Returns the decoded scheme specific part of this URI.\n    */\n   public String getSchemeSpecificPart ()\n   {\n-    // FIXME: unimplemented.\n     return schemeSpecificPart;\n   }\n \n@@ -516,15 +630,14 @@ public String getSchemeSpecificPart ()\n    */\n   public String getRawAuthority ()\n   {\n-    return authority;\n+    return rawAuthority;\n   }\n \n   /**\n    * Returns the decoded authority part of this URI\n    */\n   public String getAuthority ()\n   {\n-    // FIXME: unimplemented.\n     return authority;\n   }\n \n@@ -533,15 +646,14 @@ public String getAuthority ()\n    */\n   public String getRawUserInfo ()\n   {\n-    return userInfo;\n+    return rawUserInfo;\n   }\n \n   /**\n    * Returns the decoded user info part of this URI\n    */\n   public String getUserInfo ()\n   {\n-    // FIXME: unimplemented.\n     return userInfo;\n   }\n \n@@ -566,15 +678,14 @@ public int getPort ()\n    */\n   public String getRawPath ()\n   {\n-    return path;\n+    return rawPath;\n   }\n \n   /**\n    * Returns the path of the URI\n    */\n   public String getPath ()\n   {\n-    // FIXME: unimplemented.\n     return path;\n   }\n \n@@ -583,15 +694,14 @@ public String getPath ()\n    */\n   public String getRawQuery ()\n   {\n-    return query;\n+    return rawQuery;\n   }\n \n   /**\n    * Returns the query of the URI\n    */\n   public String getQuery ()\n   {\n-    // FIXME: unimplemented.\n     return query;\n   }\n \n@@ -600,15 +710,14 @@ public String getQuery ()\n    */\n   public String getRawFragment ()\n   {\n-    return fragment;\n+    return rawFragment;\n   }\n \n   /**\n    * Returns the fragment of the URI\n    */\n   public String getFragment ()\n   {\n-    // FIXME: unimplemented.\n     return fragment;\n   }\n "}]}