{"sha": "43fa58c26a05f206ac36ab7d0340744c2769424f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNmYTU4YzI2YTA1ZjIwNmFjMzZhYjdkMDM0MDc0NGMyNzY5NDI0Zg==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2019-07-05T07:02:46Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-05T07:02:46Z"}, "message": "[Ada] Wrong accessibility level under -gnat12\n\nFor an anonymous allocator whose type is that of a stand-alone object of\nan anonymous access-to-object type, the accessibility level is that of\nthe declaration of the stand-alone object; however it was incorrectly\ncomputed as being library level compiling under -gnat12 mode.\n\n2019-07-05  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_N_Type_Conversion): Do not apply an\n\taccessibility check when the conversion is an access to\n\tclass-wide interface type and it is an actual parameter.\n\t* exp_ch6.adb (Expand_Call_Helper): Add documentation on the\n\taccessibility level of an anonymous allocator defining the value\n\tof an access parameter.\n\t* sem_util.ads, sem_util.adb (Dynamic_Accessibility_Level): Add\n\tsupport for an anonymous allocator whose type is that of a\n\tstand-alone object of an anonymous access to object type.\n\ngcc/testsuite/\n\n\t* gnat.dg/access6.adb: New testcase.\n\nFrom-SVN: r273115", "tree": {"sha": "160dcd1b3ea263365e0e36844a46f56c5e69bbb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/160dcd1b3ea263365e0e36844a46f56c5e69bbb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43fa58c26a05f206ac36ab7d0340744c2769424f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43fa58c26a05f206ac36ab7d0340744c2769424f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43fa58c26a05f206ac36ab7d0340744c2769424f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43fa58c26a05f206ac36ab7d0340744c2769424f/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6cc855048364cdfe4960e9f960e619efce6a9e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cc855048364cdfe4960e9f960e619efce6a9e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cc855048364cdfe4960e9f960e619efce6a9e4a"}], "stats": {"total": 137, "additions": 122, "deletions": 15}, "files": [{"sha": "d07b4686a32a770461b6c940d1bbd5eecec78045", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa58c26a05f206ac36ab7d0340744c2769424f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa58c26a05f206ac36ab7d0340744c2769424f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=43fa58c26a05f206ac36ab7d0340744c2769424f", "patch": "@@ -1,3 +1,15 @@\n+2019-07-05  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): Do not apply an\n+\taccessibility check when the conversion is an access to\n+\tclass-wide interface type and it is an actual parameter.\n+\t* exp_ch6.adb (Expand_Call_Helper): Add documentation on the\n+\taccessibility level of an anonymous allocator defining the value\n+\tof an access parameter.\n+\t* sem_util.ads, sem_util.adb (Dynamic_Accessibility_Level): Add\n+\tsupport for an anonymous allocator whose type is that of a\n+\tstand-alone object of an anonymous access to object type.\n+\n 2019-07-05  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* einfo.ads, sem_res.adb: Typo fixes in comments."}, {"sha": "7a048c618e9de80b8520b355d16c656f0bf574a0", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa58c26a05f206ac36ab7d0340744c2769424f/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa58c26a05f206ac36ab7d0340744c2769424f/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=43fa58c26a05f206ac36ab7d0340744c2769424f", "patch": "@@ -11471,7 +11471,8 @@ package body Exp_Ch4 is\n          then\n             if not Comes_From_Source (N)\n               and then Nkind_In (Parent (N), N_Function_Call,\n-                                             N_Procedure_Call_Statement)\n+                                             N_Procedure_Call_Statement,\n+                                             N_Parameter_Association)\n               and then Is_Interface (Designated_Type (Target_Type))\n               and then Is_Class_Wide_Type (Designated_Type (Target_Type))\n             then"}, {"sha": "6e7299a336318be336cd11d966414235f390680c", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa58c26a05f206ac36ab7d0340744c2769424f/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa58c26a05f206ac36ab7d0340744c2769424f/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=43fa58c26a05f206ac36ab7d0340744c2769424f", "patch": "@@ -3271,7 +3271,10 @@ package body Exp_Ch6 is\n \n                   --  For allocators we pass the level of the execution of the\n                   --  called subprogram, which is one greater than the current\n-                  --  scope level.\n+                  --  scope level. However, according to RM 3.10.2(14/3) this\n+                  --  is wrong since for an anonymous allocator defining the\n+                  --  value of an access parameter, the accessibility level is\n+                  --  that of the innermost master of the call???\n \n                   when N_Allocator =>\n                      Add_Extra_Actual"}, {"sha": "48822e2e3f7713b27f0f60785ef627be72aeb157", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 67, "deletions": 8, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa58c26a05f206ac36ab7d0340744c2769424f/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa58c26a05f206ac36ab7d0340744c2769424f/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=43fa58c26a05f206ac36ab7d0340744c2769424f", "patch": "@@ -6452,8 +6452,8 @@ package body Sem_Util is\n    -- Dynamic_Accessibility_Level --\n    ---------------------------------\n \n-   function Dynamic_Accessibility_Level (Expr : Node_Id) return Node_Id is\n-      Loc : constant Source_Ptr := Sloc (Expr);\n+   function Dynamic_Accessibility_Level (N : Node_Id) return Node_Id is\n+      Loc : constant Source_Ptr := Sloc (N);\n \n       function Make_Level_Literal (Level : Uint) return Node_Id;\n       --  Construct an integer literal representing an accessibility level\n@@ -6473,7 +6473,12 @@ package body Sem_Util is\n \n       --  Local variables\n \n-      E : Entity_Id;\n+      Expr : constant Node_Id := Original_Node (N);\n+      --  Expr references the original node because at this stage N may be the\n+      --  reference to a variable internally created by the frontend to remove\n+      --  side effects of an expression.\n+\n+      E    : Entity_Id;\n \n    --  Start of processing for Dynamic_Accessibility_Level\n \n@@ -6530,12 +6535,66 @@ package body Sem_Util is\n \n          when N_Allocator =>\n \n-            --  Unimplemented: depends on context. As an actual parameter where\n-            --  formal type is anonymous, use\n-            --    Scope_Depth (Current_Scope) + 1.\n-            --  For other cases, see 3.10.2(14/3) and following. ???\n+            --  This is not fully implemented since it depends on context (see\n+            --  3.10.2(14/3-14.2/3). More work is needed in the following cases\n+            --\n+            --  1) For an anonymous allocator defining the value of an access\n+            --     parameter, the accessibility level is that of the innermost\n+            --     master of the call; however currently we pass the level of\n+            --     execution of the called subprogram, which is one greater\n+            --     than the current scope level (see Expand_Call_Helper).\n+            --\n+            --     For example, a statement is a master and a declaration is\n+            --     not a master; so we should not pass in the same level for\n+            --     the following cases:\n+            --\n+            --         function F (X : access Integer) return T is ... ;\n+            --         Decl : T := F (new Integer); -- level is off by one\n+            --      begin\n+            --         Decl := F (new Integer); -- we get this case right\n+            --\n+            --  2) For an anonymous allocator that defines the result of a\n+            --     function with an access result, the accessibility level is\n+            --     determined as though the allocator were in place of the call\n+            --     of the function. In the special case of a call that is the\n+            --     operand of a type conversion the level is that of the target\n+            --     access type of the conversion.\n+            --\n+            --  3) For an anonymous allocator defining an access discriminant\n+            --     the accessibility level is determined as follows:\n+            --       * for an allocator used to define the discriminant of an\n+            --         object, the level of the object\n+            --       * for an allocator used to define the constraint in a\n+            --         subtype_indication in any other context, the level of\n+            --         the master that elaborates the subtype_indication.\n+\n+            case Nkind (Parent (N)) is\n+               when N_Object_Declaration =>\n+\n+                  --  For an anonymous allocator whose type is that of a\n+                  --  stand-alone object of an anonymous access-to-object type,\n+                  --  the accessibility level is that of the declaration of the\n+                  --  stand-alone object.\n \n-            null;\n+                  return Make_Level_Literal\n+                           (Object_Access_Level\n+                              (Defining_Identifier (Parent (N))));\n+\n+               when N_Assignment_Statement =>\n+                  return Make_Level_Literal\n+                           (Object_Access_Level (Name (Parent (N))));\n+\n+               when others =>\n+                  declare\n+                     S : constant String :=\n+                           Node_Kind'Image (Nkind (Parent (N)));\n+                  begin\n+                     Error_Msg_Strlen := S'Length;\n+                     Error_Msg_String (1 .. Error_Msg_Strlen) := S;\n+                     Error_Msg_N (\"unsupported context for anonymous \" &\n+                                  \"allocator (~)\", Parent (N));\n+                  end;\n+            end case;\n \n          when N_Type_Conversion =>\n             if not Is_Local_Anonymous_Access (Etype (Expr)) then"}, {"sha": "3eb9d57a94f2e8d9e1fd21c0f0fa1a7f83f52bd0", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa58c26a05f206ac36ab7d0340744c2769424f/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa58c26a05f206ac36ab7d0340744c2769424f/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=43fa58c26a05f206ac36ab7d0340744c2769424f", "patch": "@@ -622,11 +622,11 @@ package Sem_Util is\n    --  private components of protected objects, but is generally useful when\n    --  restriction No_Implicit_Heap_Allocation is active.\n \n-   function Dynamic_Accessibility_Level (Expr : Node_Id) return Node_Id;\n-   --  Expr should be an expression of an access type. Builds an integer\n-   --  literal except in cases involving anonymous access types, where\n-   --  accessibility levels are tracked at run time (access parameters and\n-   --  Ada 2012 stand-alone objects).\n+   function Dynamic_Accessibility_Level (N : Node_Id) return Node_Id;\n+   --  N should be an expression of an access type. Builds an integer literal\n+   --  except in cases involving anonymous access types, where accessibility\n+   --  levels are tracked at run time (access parameters and Ada 2012 stand-\n+   --  alone objects).\n \n    function Effective_Extra_Accessibility (Id : Entity_Id) return Entity_Id;\n    --  Same as Einfo.Extra_Accessibility except thtat object renames"}, {"sha": "08d86957090cb1a8190e3b8286e303c24479300d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa58c26a05f206ac36ab7d0340744c2769424f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa58c26a05f206ac36ab7d0340744c2769424f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43fa58c26a05f206ac36ab7d0340744c2769424f", "patch": "@@ -1,3 +1,7 @@\n+2019-07-05  Javier Miranda  <miranda@adacore.com>\n+\n+\t* gnat.dg/access6.adb: New testcase.\n+\n 2019-07-05  Bob Duff  <duff@adacore.com>\n \n \t* gnat.dg/bip_export.adb, gnat.dg/bip_export.ads: New testcase."}, {"sha": "3956061dffb6d81f09cd76bb2aefc9c0b55b7503", "filename": "gcc/testsuite/gnat.dg/access6.adb", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa58c26a05f206ac36ab7d0340744c2769424f/gcc%2Ftestsuite%2Fgnat.dg%2Faccess6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa58c26a05f206ac36ab7d0340744c2769424f/gcc%2Ftestsuite%2Fgnat.dg%2Faccess6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faccess6.adb?ref=43fa58c26a05f206ac36ab7d0340744c2769424f", "patch": "@@ -0,0 +1,28 @@\n+--  { dg-do run }\n+--  { dg-options \"-gnat12\" }\n+\n+procedure Access6 is\n+   type Int_Ref is access all Integer;\n+   Ptr : Int_Ref;\n+\n+   procedure update_ptr (X : access integer) is\n+   begin\n+      --  Failed accessibility test: supposed to raise a Program_Error\n+      Ptr := Int_Ref (X);\n+   end;\n+\n+   procedure bar is\n+      ref : access integer := new integer;\n+   begin\n+      update_ptr (ref);\n+   end;\n+begin\n+   bar;\n+\n+   --  As the call to bar must raise a Program_Error, the following is not supposed to be executed:\n+   raise Constraint_Error;\n+\n+exception\n+   when Program_Error =>\n+      null;\n+end;"}]}