{"sha": "00b94487352ad836f175eb288fea31d91426b080", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBiOTQ0ODczNTJhZDgzNmYxNzVlYjI4OGZlYTMxZDkxNDI2YjA4MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-02-19T21:58:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-02-19T21:58:04Z"}, "message": "re PR target/84146 (ICE with -mcet in dwarf2out_var_location, involving sigsetjmp)\n\n\tPR target/84146\n\t* reg-notes.def (REG_CALL_ARG_LOCATION): New reg note.\n\t* insn-notes.def (NOTE_INSN_CALL_ARG_LOCATION): Remove.\n\t* var-tracking.c (emit_note_insn_var_location): Remove all references\n\tto NOTE_INSN_CALL_ARG_LOCATION.\n\t(emit_notes_in_bb): Emit arguments as REG_CALL_ARG_LOCATION note on\n\tthe CALL_INSN rather than separate NOTE_INSN_CALL_ARG_LOCATION note.\n\tUse copy_rtx_if_shared.\n\t* dwarf2out.c (gen_subprogram_die): Use XEXP with 0 instead of\n\tNOTE_VAR_LOCATION on ca_loc->call_arg_loc_note.\n\t(dwarf2out_var_location): Remove handling of\n\tNOTE_INSN_CALL_ARG_LOCATION, instead handle REG_CALL_ARG_LOCATION note\n\ton call_insn.\n\t* final.c (final_scan_insn): Remove all references to\n\tNOTE_INSN_CALL_ARG_LOCATION.\n\t(rest_of_clean_state): Likewise.  Remove REG_CALL_ARG_LOCATION notes\n\tbefore dumping final insns.\n\t* except.c (emit_note_eh_region_end): Remove all references to\n\tNOTE_INSN_CALL_ARG_LOCATION.\n\t* config/alpha/alpha.c (alpha_pad_function_end): Likewise.\n\t* config/c6x/c6x.c (c6x_gen_bundles): Likewise.\n\t* config/arc/arc.c (hwloop_optimize): Likewise.\n\t* config/arm/arm.c (create_fix_barrier): Likewise.\n\t* config/s390/s390.c (s390_chunkify_start): Likewise.\n\t* config/sh/sh.c (find_barrier): Likewise.\n\t* config/i386/i386.c (rest_of_insert_endbranch,\n\tix86_seh_fixup_eh_fallthru): Likewise.\n\t* config/xtensa/xtensa.c (hwloop_optimize): Likewise.\n\t* config/iq2000/iq2000.c (final_prescan_insn): Likewise.\n\t* config/frv/frv.c (frv_function_prologue): Likewise.\n\t* emit-rtl.c (try_split): Likewise.  Copy over REG_CALL_ARG_LOCATION\n\treg note.\n\t(note_outside_basic_block_p): Remove all references to\n\tNOTE_INSN_CALL_ARG_LOCATION.\n\t* gengtype.c (adjust_field_rtx_def): Likewise.\n\t* print-rtl.c (rtx_writer::print_rtx_operand_code_0, print_insn):\n\tLikewise.\n\t* jump.c (cleanup_barriers, delete_related_insns): Likewise.\n\t* cfgrtl.c (force_nonfallthru_and_redirect): Likewise.\n\n\t* gcc.target/i386/pr84146.c: Add -fcompare-debug to dg-options.\n\nFrom-SVN: r257826", "tree": {"sha": "eccfa7b1c031ab48998c4c7cd656c9d5a84af982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eccfa7b1c031ab48998c4c7cd656c9d5a84af982"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00b94487352ad836f175eb288fea31d91426b080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b94487352ad836f175eb288fea31d91426b080", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00b94487352ad836f175eb288fea31d91426b080", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b94487352ad836f175eb288fea31d91426b080/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97e2c91491a4f28d04f5e0c13bdf12f1c7378412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e2c91491a4f28d04f5e0c13bdf12f1c7378412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97e2c91491a4f28d04f5e0c13bdf12f1c7378412"}], "stats": {"total": 303, "additions": 98, "deletions": 205}, "files": [{"sha": "900f9d5864cf1ed932605c289c28670fb5702238", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -1,5 +1,45 @@\n 2018-02-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/84146\n+\t* reg-notes.def (REG_CALL_ARG_LOCATION): New reg note.\n+\t* insn-notes.def (NOTE_INSN_CALL_ARG_LOCATION): Remove.\n+\t* var-tracking.c (emit_note_insn_var_location): Remove all references\n+\tto NOTE_INSN_CALL_ARG_LOCATION.\n+\t(emit_notes_in_bb): Emit arguments as REG_CALL_ARG_LOCATION note on\n+\tthe CALL_INSN rather than separate NOTE_INSN_CALL_ARG_LOCATION note.\n+\tUse copy_rtx_if_shared.\n+\t* dwarf2out.c (gen_subprogram_die): Use XEXP with 0 instead of\n+\tNOTE_VAR_LOCATION on ca_loc->call_arg_loc_note.\n+\t(dwarf2out_var_location): Remove handling of\n+\tNOTE_INSN_CALL_ARG_LOCATION, instead handle REG_CALL_ARG_LOCATION note\n+\ton call_insn.\n+\t* final.c (final_scan_insn): Remove all references to\n+\tNOTE_INSN_CALL_ARG_LOCATION.\n+\t(rest_of_clean_state): Likewise.  Remove REG_CALL_ARG_LOCATION notes\n+\tbefore dumping final insns.\n+\t* except.c (emit_note_eh_region_end): Remove all references to\n+\tNOTE_INSN_CALL_ARG_LOCATION.\n+\t* config/alpha/alpha.c (alpha_pad_function_end): Likewise.\n+\t* config/c6x/c6x.c (c6x_gen_bundles): Likewise.\n+\t* config/arc/arc.c (hwloop_optimize): Likewise.\n+\t* config/arm/arm.c (create_fix_barrier): Likewise.\n+\t* config/s390/s390.c (s390_chunkify_start): Likewise.\n+\t* config/sh/sh.c (find_barrier): Likewise.\n+\t* config/i386/i386.c (rest_of_insert_endbranch,\n+\tix86_seh_fixup_eh_fallthru): Likewise.\n+\t* config/xtensa/xtensa.c (hwloop_optimize): Likewise.\n+\t* config/iq2000/iq2000.c (final_prescan_insn): Likewise.\n+\t* config/frv/frv.c (frv_function_prologue): Likewise.\n+\t* emit-rtl.c (try_split): Likewise.  Copy over REG_CALL_ARG_LOCATION\n+\treg note.\n+\t(note_outside_basic_block_p): Remove all references to\n+\tNOTE_INSN_CALL_ARG_LOCATION.\n+\t* gengtype.c (adjust_field_rtx_def): Likewise.\n+\t* print-rtl.c (rtx_writer::print_rtx_operand_code_0, print_insn):\n+\tLikewise.\n+\t* jump.c (cleanup_barriers, delete_related_insns): Likewise.\n+\t* cfgrtl.c (force_nonfallthru_and_redirect): Likewise.\n+\n \tPR c++/84444\n \t* builtins.c (builtin_mathfn_code): Don't check if CALL_EXPR_FN (t)\n \tis ADDR_EXPR."}, {"sha": "fd095ac59edb4579b1e7f376d00a18a6f2e8f427", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -1628,11 +1628,6 @@ force_nonfallthru_and_redirect (edge e, basic_block target, rtx jump_label)\n       else\n \tnew_head = BB_END (e->src);\n       new_head = NEXT_INSN (new_head);\n-      /* Make sure we don't split a call and its corresponding\n-\t CALL_ARG_LOCATION note.  */\n-      if (new_head && NOTE_P (new_head)\n-\t  && NOTE_KIND (new_head) == NOTE_INSN_CALL_ARG_LOCATION)\n-\tnew_head = NEXT_INSN (new_head);\n \n       jump_block = create_basic_block (new_head, NULL, e->src);\n       jump_block->count = count;"}, {"sha": "a039f045262c9dd794e06210287dda413afd31a4", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -9406,14 +9406,6 @@ alpha_pad_function_end (void)\n \t       || find_reg_note (insn, REG_NORETURN, NULL_RTX)))\n         continue;\n \n-      /* Make sure we do not split a call and its corresponding\n-\t CALL_ARG_LOCATION note.  */\n-      next = NEXT_INSN (insn);\n-      if (next == NULL)\n-\tcontinue;\n-      if (NOTE_P (next) && NOTE_KIND (next) == NOTE_INSN_CALL_ARG_LOCATION)\n-\tinsn = next;\n-\n       next = next_active_insn (insn);\n       if (next)\n \t{"}, {"sha": "196d0e4a727974df38855fcef35553479e724df3", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -7700,10 +7700,7 @@ hwloop_optimize (hwloop_info loop)\n #if 0\n       while (DEBUG_INSN_P (entry_after)\n              || (NOTE_P (entry_after)\n-                 && NOTE_KIND (entry_after) != NOTE_INSN_BASIC_BLOCK\n-\t\t /* Make sure we don't split a call and its corresponding\n-\t\t    CALL_ARG_LOCATION note.  */\n-                 && NOTE_KIND (entry_after) != NOTE_INSN_CALL_ARG_LOCATION))\n+\t\t && NOTE_KIND (entry_after) != NOTE_INSN_BASIC_BLOCK))\n         entry_after = NEXT_INSN (entry_after);\n #endif\n       entry_after = next_nonnote_nondebug_insn_bb (entry_after);"}, {"sha": "90d62e699bce9594879be2e3016c9b36c7e064c8", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -16556,16 +16556,6 @@ create_fix_barrier (Mfix *fix, HOST_WIDE_INT max_address)\n   /* Make sure that we found a place to insert the jump.  */\n   gcc_assert (selected);\n \n-  /* Make sure we do not split a call and its corresponding\n-     CALL_ARG_LOCATION note.  */\n-  if (CALL_P (selected))\n-    {\n-      rtx_insn *next = NEXT_INSN (selected);\n-      if (next && NOTE_P (next)\n-\t  && NOTE_KIND (next) == NOTE_INSN_CALL_ARG_LOCATION)\n-\t  selected = next;\n-    }\n-\n   /* Create a new JUMP_INSN that branches around a barrier.  */\n   from = emit_jump_insn_after (gen_jump (label), selected);\n   JUMP_LABEL (from) = label;"}, {"sha": "f12edfd082117b135c929583b82ded3b3a22b5b6", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -4637,7 +4637,6 @@ static void\n c6x_gen_bundles (void)\n {\n   basic_block bb;\n-  rtx_insn *insn, *next, *last_call;\n \n   FOR_EACH_BB_FN (bb, cfun)\n     {\n@@ -4704,29 +4703,6 @@ c6x_gen_bundles (void)\n \t    break;\n \t}\n     }\n-  /* Bundling, and emitting nops, can separate\n-     NOTE_INSN_CALL_ARG_LOCATION from the corresponding calls.  Fix\n-     that up here.  */\n-  last_call = NULL;\n-  for (insn = get_insns (); insn; insn = next)\n-    {\n-      next = NEXT_INSN (insn);\n-      if (CALL_P (insn)\n-\t  || (INSN_P (insn) && GET_CODE (PATTERN (insn)) == SEQUENCE\n-\t      && CALL_P (XVECEXP (PATTERN (insn), 0, 0))))\n-\tlast_call = insn;\n-      if (!NOTE_P (insn) || NOTE_KIND (insn) != NOTE_INSN_CALL_ARG_LOCATION)\n-\tcontinue;\n-      if (NEXT_INSN (last_call) == insn)\n-\tcontinue;\n-      SET_NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);\n-      SET_PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);\n-      SET_PREV_INSN (insn) = last_call;\n-      SET_NEXT_INSN (insn) = NEXT_INSN (last_call);\n-      SET_PREV_INSN (NEXT_INSN (insn)) = insn;\n-      SET_NEXT_INSN (PREV_INSN (insn)) = insn;\n-      last_call = insn;\n-    }\n }\n \n /* Emit a NOP instruction for CYCLES cycles after insn AFTER.  Return it.  */"}, {"sha": "56027bd67d9dd53868e325c0319974652fad9602", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -1415,8 +1415,6 @@ frv_function_contains_far_jump (void)\n static void\n frv_function_prologue (FILE *file)\n {\n-  rtx_insn *insn, *next, *last_call;\n-\n   /* If no frame was created, check whether the function uses a call\n      instruction to implement a far jump.  If so, save the link in gr3 and\n      replace all returns to LR with returns to GR3.  GR3 is used because it\n@@ -1457,32 +1455,6 @@ frv_function_prologue (FILE *file)\n \n   /* Allow the garbage collector to free the nops created by frv_reorg.  */\n   memset (frv_nops, 0, sizeof (frv_nops));\n-\n-  /* Locate CALL_ARG_LOCATION notes that have been misplaced\n-     and move them back to where they should be located.  */\n-  last_call = NULL;\n-  for (insn = get_insns (); insn; insn = next)\n-    {\n-      next = NEXT_INSN (insn);\n-      if (CALL_P (insn)\n-\t  || (INSN_P (insn) && GET_CODE (PATTERN (insn)) == SEQUENCE\n-\t      && CALL_P (XVECEXP (PATTERN (insn), 0, 0))))\n-\tlast_call = insn;\n-\n-      if (!NOTE_P (insn) || NOTE_KIND (insn) != NOTE_INSN_CALL_ARG_LOCATION)\n-\tcontinue;\n-\n-      if (NEXT_INSN (last_call) == insn)\n-\tcontinue;\n-\n-      SET_NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);\n-      SET_PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);\n-      SET_PREV_INSN (insn) = last_call;\n-      SET_NEXT_INSN (insn) = NEXT_INSN (last_call);\n-      SET_PREV_INSN (NEXT_INSN (insn)) = insn;\n-      SET_NEXT_INSN (PREV_INSN (insn)) = insn;\n-      last_call = insn;\n-    }\n }\n \n \f"}, {"sha": "d54e7301e84be79d84091e0a476fa20e895f0746", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -2619,16 +2619,8 @@ rest_of_insert_endbranch (void)\n \t      /* Generate ENDBRANCH after CALL, which can return more than\n \t\t twice, setjmp-like functions.  */\n \n-\t      /* Skip notes that must immediately follow the call insn.  */\n-\t      rtx_insn *next_insn = insn;\n-\t      if (NEXT_INSN (insn)\n-\t\t  && NOTE_P (NEXT_INSN (insn))\n-\t\t  && (NOTE_KIND (NEXT_INSN (insn))\n-\t\t      == NOTE_INSN_CALL_ARG_LOCATION))\n-\t\tnext_insn = NEXT_INSN (insn);\n-\n \t      cet_eb = gen_nop_endbr ();\n-\t      emit_insn_after_setloc (cet_eb, next_insn, INSN_LOCATION (insn));\n+\t      emit_insn_after_setloc (cet_eb, insn, INSN_LOCATION (insn));\n \t      continue;\n \t    }\n \n@@ -42128,9 +42120,7 @@ ix86_seh_fixup_eh_fallthru (void)\n \n       /* Do not separate calls from their debug information.  */\n       for (next = NEXT_INSN (insn); next != NULL; next = NEXT_INSN (next))\n-\tif (NOTE_P (next)\n-            && (NOTE_KIND (next) == NOTE_INSN_VAR_LOCATION\n-                || NOTE_KIND (next) == NOTE_INSN_CALL_ARG_LOCATION))\n+\tif (NOTE_P (next) && NOTE_KIND (next) == NOTE_INSN_VAR_LOCATION)\n \t  insn = next;\n \telse\n \t  break;"}, {"sha": "ee89ced0e2f0f2d23c635a81a508ea4ac061b7ae", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -1578,13 +1578,7 @@ final_prescan_insn (rtx_insn *insn, rtx opvec[] ATTRIBUTE_UNUSED,\n        || (GET_CODE (PATTERN (insn)) == RETURN))\n \t   && NEXT_INSN (PREV_INSN (insn)) == insn)\n     {\n-      rtx_insn *tmp = insn;\n-      while (NEXT_INSN (tmp)\n-\t     && NOTE_P (NEXT_INSN (tmp))\n-\t     && NOTE_KIND (NEXT_INSN (tmp)) == NOTE_INSN_CALL_ARG_LOCATION)\n-\ttmp = NEXT_INSN (tmp);\n-\n-      rtx_insn *nop_insn = emit_insn_after (gen_nop (), tmp);\n+      rtx_insn *nop_insn = emit_insn_after (gen_nop (), insn);\n       INSN_ADDRESSES_NEW (nop_insn, -1);\n     }\n   "}, {"sha": "51adb0df480d75e206de155f9c8a1c0d854cdb2e", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -9259,7 +9259,6 @@ s390_chunkify_start (void)\n \t    section_switch_p = true;\n \t    break;\n \t  case NOTE_INSN_VAR_LOCATION:\n-\t  case NOTE_INSN_CALL_ARG_LOCATION:\n \t    continue;\n \t  default:\n \t    break;\n@@ -9330,8 +9329,7 @@ s390_chunkify_start (void)\n \t\t    }\n \t\t  while (next\n \t\t\t && NOTE_P (next)\n-\t\t\t && (NOTE_KIND (next) == NOTE_INSN_VAR_LOCATION\n-\t\t\t     || NOTE_KIND (next) == NOTE_INSN_CALL_ARG_LOCATION));\n+\t\t\t && NOTE_KIND (next) == NOTE_INSN_VAR_LOCATION);\n \t\t}\n \t      else\n \t\t{"}, {"sha": "ced66408265c39de095d0cd8f3b15f5c2ca6f6cc", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -5225,21 +5225,13 @@ find_barrier (int num_mova, rtx_insn *mova, rtx_insn *from)\n \t around the constant pool table will be hit.  Putting it before\n \t a jump makes it more likely that the bra delay slot will be\n \t filled.  */\n-      while (NOTE_P (from) || JUMP_P (from)\n-\t     || LABEL_P (from))\n+      while (NOTE_P (from) || JUMP_P (from) || LABEL_P (from))\n \tfrom = PREV_INSN (from);\n \n-      /* Make sure we do not split between a call and its corresponding\n-\t CALL_ARG_LOCATION note.  */\n       if (CALL_P (from))\n \t{\n \t  bool sibcall_p = SIBLING_CALL_P (from);\n \n-\t  rtx_insn *next = NEXT_INSN (from);\n-\t  if (next && NOTE_P (next)\n-\t      && NOTE_KIND (next) == NOTE_INSN_CALL_ARG_LOCATION)\n-\t    from = next;\n-\n \t  /* If FROM was a sibling call, then we know that control\n \t     will not return.  In fact, we were guaranteed to hit\n \t     a barrier before another real insn."}, {"sha": "7cfe64d4289594364c8318855bd61759632c3f78", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -4255,10 +4255,7 @@ hwloop_optimize (hwloop_info loop)\n       entry_after = BB_END (entry_bb);\n       while (DEBUG_INSN_P (entry_after)\n              || (NOTE_P (entry_after)\n-                 && NOTE_KIND (entry_after) != NOTE_INSN_BASIC_BLOCK\n-\t\t /* Make sure we don't split a call and its corresponding\n-\t\t    CALL_ARG_LOCATION note.  */\n-                 && NOTE_KIND (entry_after) != NOTE_INSN_CALL_ARG_LOCATION))\n+\t\t && NOTE_KIND (entry_after) != NOTE_INSN_BASIC_BLOCK))\n         entry_after = PREV_INSN (entry_after);\n \n       emit_insn_after (seq, entry_after);"}, {"sha": "5e88c7bacf063b896479649917f09ec45fb032f3", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -23110,7 +23110,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t      rtx arg, next_arg;\n \n \t      for (arg = (ca_loc->call_arg_loc_note != NULL_RTX\n-\t\t\t  ? NOTE_VAR_LOCATION (ca_loc->call_arg_loc_note)\n+\t\t\t  ? XEXP (ca_loc->call_arg_loc_note, 0)\n \t\t\t  : NULL_RTX);\n \t\t   arg; arg = next_arg)\n \t\t{\n@@ -26975,6 +26975,17 @@ dwarf2out_var_location (rtx_insn *loc_note)\n \t  call_site_count++;\n \t  if (SIBLING_CALL_P (loc_note))\n \t    tail_call_site_count++;\n+\t  if (find_reg_note (loc_note, REG_CALL_ARG_LOCATION, NULL_RTX))\n+\t    {\n+\t      call_insn = loc_note;\n+\t      loc_note = NULL;\n+\t      var_loc_p = false;\n+\n+\t      next_real = dwarf2out_next_real_insn (call_insn);\n+\t      next_note = NULL;\n+\t      cached_next_real_insn = NULL;\n+\t      goto create_label;\n+\t    }\n \t  if (optimize == 0 && !flag_var_tracking)\n \t    {\n \t      /* When the var-tracking pass is not running, there is no note\n@@ -27034,8 +27045,7 @@ dwarf2out_var_location (rtx_insn *loc_note)\n       || ! NOTE_P (next_note)\n       || (NOTE_KIND (next_note) != NOTE_INSN_VAR_LOCATION\n \t  && NOTE_KIND (next_note) != NOTE_INSN_BEGIN_STMT\n-\t  && NOTE_KIND (next_note) != NOTE_INSN_INLINE_ENTRY\n-\t  && NOTE_KIND (next_note) != NOTE_INSN_CALL_ARG_LOCATION))\n+\t  && NOTE_KIND (next_note) != NOTE_INSN_INLINE_ENTRY))\n     next_note = NULL;\n \n   if (! next_real)\n@@ -27145,10 +27155,10 @@ dwarf2out_var_location (rtx_insn *loc_note)\n     {\n       struct call_arg_loc_node *ca_loc\n \t= ggc_cleared_alloc<call_arg_loc_node> ();\n-      rtx_insn *prev\n-        = loc_note != NULL_RTX ? prev_real_insn (loc_note) : call_insn;\n+      rtx_insn *prev = call_insn;\n \n-      ca_loc->call_arg_loc_note = loc_note;\n+      ca_loc->call_arg_loc_note\n+\t= find_reg_note (call_insn, REG_CALL_ARG_LOCATION, NULL_RTX);\n       ca_loc->next = NULL;\n       ca_loc->label = last_label;\n       gcc_assert (prev"}, {"sha": "dd8fec3f34938a81398fd12be4671230611191f3", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -3866,37 +3866,19 @@ try_split (rtx pat, rtx_insn *trial, int last)\n       for (insn = insn_last; insn ; insn = PREV_INSN (insn))\n \tif (CALL_P (insn))\n \t  {\n-\t    rtx_insn *next;\n-\t    rtx *p;\n-\n \t    gcc_assert (call_insn == NULL_RTX);\n \t    call_insn = insn;\n \n \t    /* Add the old CALL_INSN_FUNCTION_USAGE to whatever the\n \t       target may have explicitly specified.  */\n-\t    p = &CALL_INSN_FUNCTION_USAGE (insn);\n+\t    rtx *p = &CALL_INSN_FUNCTION_USAGE (insn);\n \t    while (*p)\n \t      p = &XEXP (*p, 1);\n \t    *p = CALL_INSN_FUNCTION_USAGE (trial);\n \n \t    /* If the old call was a sibling call, the new one must\n \t       be too.  */\n \t    SIBLING_CALL_P (insn) = SIBLING_CALL_P (trial);\n-\n-\t    /* If the new call is the last instruction in the sequence,\n-\t       it will effectively replace the old call in-situ.  Otherwise\n-\t       we must move any following NOTE_INSN_CALL_ARG_LOCATION note\n-\t       so that it comes immediately after the new call.  */\n-\t    if (NEXT_INSN (insn))\n-\t      for (next = NEXT_INSN (trial);\n-\t\t   next && NOTE_P (next);\n-\t\t   next = NEXT_INSN (next))\n-\t\tif (NOTE_KIND (next) == NOTE_INSN_CALL_ARG_LOCATION)\n-\t\t  {\n-\t\t    remove_insn (next);\n-\t\t    add_insn_after (next, insn, NULL);\n-\t\t    break;\n-\t\t  }\n \t  }\n     }\n \n@@ -3913,6 +3895,7 @@ try_split (rtx pat, rtx_insn *trial, int last)\n \tcase REG_SETJMP:\n \tcase REG_TM:\n \tcase REG_CALL_NOCF_CHECK:\n+\tcase REG_CALL_ARG_LOCATION:\n \t  for (insn = insn_last; insn != NULL_RTX; insn = PREV_INSN (insn))\n \t    {\n \t      if (CALL_P (insn))\n@@ -4777,7 +4760,6 @@ note_outside_basic_block_p (enum insn_note subtype, bool on_bb_boundary_p)\n \t inside basic blocks.  If the caller is emitting on the basic block\n \t boundary, do not set BLOCK_FOR_INSN on the new note.  */\n       case NOTE_INSN_VAR_LOCATION:\n-      case NOTE_INSN_CALL_ARG_LOCATION:\n       case NOTE_INSN_EH_REGION_BEG:\n       case NOTE_INSN_EH_REGION_END:\n \treturn on_bb_boundary_p;"}, {"sha": "04d4764ee17ece4b30985d0d9d091da5308f3f4f", "filename": "gcc/except.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -2465,14 +2465,6 @@ add_call_site (rtx landing_pad, int action, int section)\n static rtx_note *\n emit_note_eh_region_end (rtx_insn *insn)\n {\n-  rtx_insn *next = NEXT_INSN (insn);\n-\n-  /* Make sure we do not split a call and its corresponding\n-     CALL_ARG_LOCATION note.  */\n-  if (next && NOTE_P (next)\n-      && NOTE_KIND (next) == NOTE_INSN_CALL_ARG_LOCATION)\n-    insn = next;\n-\n   return emit_note_after (NOTE_INSN_EH_REGION_END, insn);\n }\n "}, {"sha": "78a750388e62c842bb50220db41a02c250505fd0", "filename": "gcc/final.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -2467,7 +2467,6 @@ final_scan_insn_1 (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t  break;\n \n \tcase NOTE_INSN_VAR_LOCATION:\n-\tcase NOTE_INSN_CALL_ARG_LOCATION:\n \t  if (!DECL_IGNORED_P (current_function_decl))\n \t    {\n \t      debug_hooks->var_location (insn);\n@@ -4846,15 +4845,21 @@ rest_of_clean_state (void)\n       SET_NEXT_INSN (insn) = NULL;\n       SET_PREV_INSN (insn) = NULL;\n \n+      if (CALL_P (insn))\n+\t{\n+\t  rtx note = find_reg_note (insn, REG_CALL_ARG_LOCATION, NULL_RTX);\n+\t  if (note)\n+\t    remove_note (insn, note);\n+\t}\n+\n       if (final_output\n-\t  && (!NOTE_P (insn) ||\n-\t      (NOTE_KIND (insn) != NOTE_INSN_VAR_LOCATION\n-\t       && NOTE_KIND (insn) != NOTE_INSN_BEGIN_STMT\n-\t       && NOTE_KIND (insn) != NOTE_INSN_INLINE_ENTRY\n-\t       && NOTE_KIND (insn) != NOTE_INSN_CALL_ARG_LOCATION\n-\t       && NOTE_KIND (insn) != NOTE_INSN_BLOCK_BEG\n-\t       && NOTE_KIND (insn) != NOTE_INSN_BLOCK_END\n-\t       && NOTE_KIND (insn) != NOTE_INSN_DELETED_DEBUG_LABEL)))\n+\t  && (!NOTE_P (insn)\n+\t      || (NOTE_KIND (insn) != NOTE_INSN_VAR_LOCATION\n+\t\t  && NOTE_KIND (insn) != NOTE_INSN_BEGIN_STMT\n+\t\t  && NOTE_KIND (insn) != NOTE_INSN_INLINE_ENTRY\n+\t\t  && NOTE_KIND (insn) != NOTE_INSN_BLOCK_BEG\n+\t\t  && NOTE_KIND (insn) != NOTE_INSN_BLOCK_END\n+\t\t  && NOTE_KIND (insn) != NOTE_INSN_DELETED_DEBUG_LABEL)))\n \tprint_rtl_single (final_output, insn);\n     }\n "}, {"sha": "0db5528e632300b2deaf86a2a4859b6d28e018d9", "filename": "gcc/gengtype.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -1187,7 +1187,6 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \t    break;\n \n \t  case NOTE_INSN_VAR_LOCATION:\n-\t  case NOTE_INSN_CALL_ARG_LOCATION:\n \t    note_flds = create_field (note_flds, rtx_tp, \"rt_rtx\");\n \t    break;\n "}, {"sha": "0afd47504ec9c8c856ccafede9064327d82818ca", "filename": "gcc/insn-notes.def", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Finsn-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Finsn-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finsn-notes.def?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -65,9 +65,6 @@ INSN_NOTE (EH_REGION_END)\n /* The location of a variable.  */\n INSN_NOTE (VAR_LOCATION)\n \n-/* The values passed to callee.  */\n-INSN_NOTE (CALL_ARG_LOCATION)\n-\n /* The beginning of a statement.  */\n INSN_NOTE (BEGIN_STMT)\n "}, {"sha": "f379048f636856dc43c03128912e36eea23bebd1", "filename": "gcc/jump.c", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -127,17 +127,6 @@ cleanup_barriers (void)\n \t  if (!prev)\n \t    continue;\n \n-\t  if (CALL_P (prev))\n-\t    {\n-\t      /* Make sure we do not split a call and its corresponding\n-\t\t CALL_ARG_LOCATION note.  */\n-\t      rtx_insn *next = NEXT_INSN (prev);\n-\n-\t      if (NOTE_P (next)\n-\t\t  && NOTE_KIND (next) == NOTE_INSN_CALL_ARG_LOCATION)\n-\t\tprev = next;\n-\t    }\n-\n \t  if (BARRIER_P (prev))\n \t    delete_insn (insn);\n \t  else if (prev != PREV_INSN (insn))\n@@ -1279,26 +1268,6 @@ delete_related_insns (rtx uncast_insn)\n   if (next != 0 && BARRIER_P (next))\n     delete_insn (next);\n \n-  /* If this is a call, then we have to remove the var tracking note\n-     for the call arguments.  */\n-\n-  if (CALL_P (insn)\n-      || (NONJUMP_INSN_P (insn)\n-\t  && GET_CODE (PATTERN (insn)) == SEQUENCE\n-\t  && CALL_P (XVECEXP (PATTERN (insn), 0, 0))))\n-    {\n-      rtx_insn *p;\n-\n-      for (p = next && next->deleted () ? NEXT_INSN (next) : next;\n-\t   p && NOTE_P (p);\n-\t   p = NEXT_INSN (p))\n-\tif (NOTE_KIND (p) == NOTE_INSN_CALL_ARG_LOCATION)\n-\t  {\n-\t    remove_insn (p);\n-\t    break;\n-\t  }\n-    }\n-\n   /* If deleting a jump, decrement the count of the label,\n      and delete the label if it is now unused.  */\n "}, {"sha": "37c0d53fae276152c94139cf2d1ad01edab58b97", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -264,7 +264,6 @@ rtx_writer::print_rtx_operand_code_0 (const_rtx in_rtx ATTRIBUTE_UNUSED,\n \t  }\n \n \tcase NOTE_INSN_VAR_LOCATION:\n-\tcase NOTE_INSN_CALL_ARG_LOCATION:\n \t  fputc (' ', m_outfile);\n \t  print_rtx (NOTE_VAR_LOCATION (in_rtx));\n \t  break;\n@@ -1970,7 +1969,6 @@ print_insn (pretty_printer *pp, const rtx_insn *x, int verbose)\n \t    break;\n \n \t  case NOTE_INSN_VAR_LOCATION:\n-\t  case NOTE_INSN_CALL_ARG_LOCATION:\n \t    pp_left_brace (pp);\n \t    print_pattern (pp, NOTE_VAR_LOCATION (x), verbose);\n \t    pp_right_brace (pp);"}, {"sha": "76f3f4521868639a76eb0774bc6d6f763a60e46c", "filename": "gcc/reg-notes.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Freg-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Freg-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-notes.def?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -239,3 +239,6 @@ REG_NOTE (CALL_DECL)\n    when a called function has a 'notrack' attribute.  This note is used by the\n    compiler when the option -fcf-protection=branch is specified.  */\n REG_NOTE (CALL_NOCF_CHECK)\n+\n+/* The values passed to callee, for debuginfo purposes.  */\n+REG_NOTE (CALL_ARG_LOCATION)"}, {"sha": "286a6af5a4b19387558d5ad932871ff3b87079f3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -1,3 +1,8 @@\n+2018-02-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/84146\n+\t* gcc.target/i386/pr84146.c: Add -fcompare-debug to dg-options.\n+\n 2017-02-19  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/pr70023.c (dg-do): Compile only for target int128."}, {"sha": "a14baa47532fa627f3efc7a29a35c002927ecf26", "filename": "gcc/testsuite/gcc.target/i386/pr84146.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84146.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84146.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84146.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -1,6 +1,6 @@\n /* PR target/84146 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -g -mcet -fcf-protection=full\" } */\n+/* { dg-options \"-O2 -g -mcet -fcf-protection=full -fcompare-debug\" } */\n \n int __setjmp (void **);\n void *buf[64];"}, {"sha": "56a701c283e87d3636e2130447fd6320a3ffd0e5", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94487352ad836f175eb288fea31d91426b080/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=00b94487352ad836f175eb288fea31d91426b080", "patch": "@@ -8860,14 +8860,12 @@ emit_note_insn_var_location (variable **varp, emit_note_data *data)\n       /* Make sure that the call related notes come first.  */\n       while (NEXT_INSN (insn)\n \t     && NOTE_P (insn)\n-\t     && ((NOTE_KIND (insn) == NOTE_INSN_VAR_LOCATION\n-\t\t  && NOTE_DURING_CALL_P (insn))\n-\t\t || NOTE_KIND (insn) == NOTE_INSN_CALL_ARG_LOCATION))\n+\t     && NOTE_KIND (insn) == NOTE_INSN_VAR_LOCATION\n+\t     && NOTE_DURING_CALL_P (insn))\n \tinsn = NEXT_INSN (insn);\n       if (NOTE_P (insn)\n-\t  && ((NOTE_KIND (insn) == NOTE_INSN_VAR_LOCATION\n-\t       && NOTE_DURING_CALL_P (insn))\n-\t      || NOTE_KIND (insn) == NOTE_INSN_CALL_ARG_LOCATION))\n+\t  && NOTE_KIND (insn) == NOTE_INSN_VAR_LOCATION\n+\t  && NOTE_DURING_CALL_P (insn))\n \tnote = emit_note_after (NOTE_INSN_VAR_LOCATION, insn);\n       else\n \tnote = emit_note_before (NOTE_INSN_VAR_LOCATION, insn);\n@@ -9210,15 +9208,18 @@ emit_notes_in_bb (basic_block bb, dataflow_set *set)\n \t    emit_notes_for_changes (insn, EMIT_NOTE_AFTER_CALL_INSN, set->vars);\n \t    {\n \t      rtx arguments = mo->u.loc, *p = &arguments;\n-\t      rtx_note *note;\n \t      while (*p)\n \t\t{\n \t\t  XEXP (XEXP (*p, 0), 1)\n \t\t    = vt_expand_loc (XEXP (XEXP (*p, 0), 1),\n \t\t\t\t     shared_hash_htab (set->vars));\n \t\t  /* If expansion is successful, keep it in the list.  */\n \t\t  if (XEXP (XEXP (*p, 0), 1))\n-\t\t    p = &XEXP (*p, 1);\n+\t\t    {\n+\t\t      XEXP (XEXP (*p, 0), 1)\n+\t\t\t= copy_rtx_if_shared (XEXP (XEXP (*p, 0), 1));\n+\t\t      p = &XEXP (*p, 1);\n+\t\t    }\n \t\t  /* Otherwise, if the following item is data_value for it,\n \t\t     drop it too too.  */\n \t\t  else if (XEXP (*p, 1)\n@@ -9234,8 +9235,7 @@ emit_notes_in_bb (basic_block bb, dataflow_set *set)\n \t\t  else\n \t\t    *p = XEXP (*p, 1);\n \t\t}\n-\t      note = emit_note_after (NOTE_INSN_CALL_ARG_LOCATION, insn);\n-\t      NOTE_VAR_LOCATION (note) = arguments;\n+\t      add_reg_note (insn, REG_CALL_ARG_LOCATION, arguments);\n \t    }\n \t    break;\n "}]}