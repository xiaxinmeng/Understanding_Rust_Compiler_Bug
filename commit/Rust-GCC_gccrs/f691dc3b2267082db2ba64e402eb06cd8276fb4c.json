{"sha": "f691dc3b2267082db2ba64e402eb06cd8276fb4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY5MWRjM2IyMjY3MDgyZGIyYmE2NGU0MDJlYjA2Y2Q4Mjc2ZmI0Yw==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2003-06-04T05:21:41Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-06-04T05:21:41Z"}, "message": "uwin.h: Remove SUBTARGET_PROLOGUE.\n\n\t* config/i386/uwin.h: Remove SUBTARGET_PROLOGUE.\n\n\t* config/i386/i386.c (ix86_expand_prologue): Do not use\n\tSUBTARGET_PROLOGUE.\n\n\t* system.h: Poision SUBTARGET_PROLOGUE.\n\n\t* config/arm/arm-protos.h: Remove unused rdate_section prototype.\n\n\t* output.h: Remove TDESC_SECTION_ASM_OP and RDATA_SECTION_ASM_OP\n\tdependend code.\n\n\t* system.h: Poison TDESC_SECTION_ASM_OP and RDATA_SECTION_ASM_OP.\n\n\t* system.h: Poison INSN_CACHE_DEPTH, INSN_CACHE_SIZE and\n\tINSN_CACHE_LINE_WIDTH.\n\n\t* libgcc2.c (INSN_CACHE_PLANE_SIZE): Removed.\n\t(__clear_cache): Remove code dependend on INSN_CACHE_DEPTH,\n\tINSN_CACHE_SIZE and INSN_CACHE_LINE_WIDTH.\n\n\t* doc/tm.texi (Trampolines): Remove INSN_CACHE_DEPTH,\n\tINSN_CACHE_SIZE and INSN_CACHE_LINE_WIDTH.\n\n\t* dbxout.c (dbxout_type): Remove usage of DBX_OUTPUT_ENUM.\n\t(dbxout_symbol): Remove usage of DBX_OUTPUT_CONSTANT_SYMBOL.\n\t(dbxout_block): Remove usage of DBX_OUTPUT_CATCH.\n\t(dbxout_block): Remove usage of DBX_LBRAC_FIRST.\n\t(dbxout_source_file): Remove usage of DBX_OUTPUT_SOURCE_FILENAME.\n\t(dbxout_init): Remove test for DBX_WORKING_DIRECTORY.\n\n\t* doc/tm.texi (DBX Options): Do not document DBX_LBRAC_FIRST,\n\tDBX_OUTPUT_SOURCE_FILENAME and DBX_OUTPUT_ENUM and\n\tDBX_WORKING_DIRECTORY.\n\n\t* system.h: Poison DBX_LBRAC_FIRST, DBX_OUTPUT_ENUM,\n\tDBX_OUTPUT_SOURCE_FILENAME and DBX_WORKING_DIRECTORY.\n\n\t* config/frv/frv-protos.h: Remove unused const_section\n\tdeclaration.\n\t* config/vax/vax-protos.h: Likewise.\n\n\t* output.h: Remove CONST_SECTION_ASM_OP usage.\n\n\t* system.h: Poison CONST_SECTION_ASM_OP.\n\n\t* crtstuff.c (__do_global_dtors_aux): Remove usage of CRT_GET_RFIB_TEXT\n\t(frame_dummy): Likewise.\n\t* unwind-dw2-fde-glibc.c (_Unwind_IteratePhdrCallback): Likewise.\n\t* system.h: Poison CRT_GET_RFIB_TEXT.\n\nFrom-SVN: r67423", "tree": {"sha": "b1196392c75306801253888ba561cd2f816f1798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1196392c75306801253888ba561cd2f816f1798"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f691dc3b2267082db2ba64e402eb06cd8276fb4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f691dc3b2267082db2ba64e402eb06cd8276fb4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f691dc3b2267082db2ba64e402eb06cd8276fb4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f691dc3b2267082db2ba64e402eb06cd8276fb4c/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d3a8e3c78e2f90746cd7022c8214cc3076c5dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d3a8e3c78e2f90746cd7022c8214cc3076c5dc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d3a8e3c78e2f90746cd7022c8214cc3076c5dc5"}], "stats": {"total": 306, "additions": 69, "deletions": 237}, "files": [{"sha": "79c65eebfee7f2c140f88a6c1fadc6e717c26e53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f691dc3b2267082db2ba64e402eb06cd8276fb4c", "patch": "@@ -1,5 +1,56 @@\n 2003-06-04  Andreas Jaeger  <aj@suse.de>\n \n+\t* config/i386/uwin.h: Remove SUBTARGET_PROLOGUE.\n+\n+\t* config/i386/i386.c (ix86_expand_prologue): Do not use\n+\tSUBTARGET_PROLOGUE.\n+\n+\t* system.h: Poision SUBTARGET_PROLOGUE.\n+\n+\t* config/arm/arm-protos.h: Remove unused rdate_section prototype.\n+\n+\t* output.h: Remove TDESC_SECTION_ASM_OP and RDATA_SECTION_ASM_OP\n+\tdependend code.\n+\n+\t* system.h: Poison TDESC_SECTION_ASM_OP and RDATA_SECTION_ASM_OP.\n+\n+\t* system.h: Poison INSN_CACHE_DEPTH, INSN_CACHE_SIZE and\n+\tINSN_CACHE_LINE_WIDTH.\n+\n+\t* libgcc2.c (INSN_CACHE_PLANE_SIZE): Removed.\n+\t(__clear_cache): Remove code dependend on INSN_CACHE_DEPTH,\n+\tINSN_CACHE_SIZE and INSN_CACHE_LINE_WIDTH.\n+\n+\t* doc/tm.texi (Trampolines): Remove INSN_CACHE_DEPTH,\n+\tINSN_CACHE_SIZE and INSN_CACHE_LINE_WIDTH.\n+\t\n+\t* dbxout.c (dbxout_type): Remove usage of DBX_OUTPUT_ENUM.\n+\t(dbxout_symbol): Remove usage of DBX_OUTPUT_CONSTANT_SYMBOL.\n+\t(dbxout_block): Remove usage of DBX_OUTPUT_CATCH.\n+\t(dbxout_block): Remove usage of DBX_LBRAC_FIRST.\n+\t(dbxout_source_file): Remove usage of DBX_OUTPUT_SOURCE_FILENAME.\n+\t(dbxout_init): Remove test for DBX_WORKING_DIRECTORY.\n+\n+\t* doc/tm.texi (DBX Options): Do not document DBX_LBRAC_FIRST,\n+\tDBX_OUTPUT_SOURCE_FILENAME and DBX_OUTPUT_ENUM and\n+\tDBX_WORKING_DIRECTORY.\n+\n+\t* system.h: Poison DBX_LBRAC_FIRST, DBX_OUTPUT_ENUM,\n+\tDBX_OUTPUT_SOURCE_FILENAME and DBX_WORKING_DIRECTORY.\n+\n+\t* config/frv/frv-protos.h: Remove unused const_section\n+\tdeclaration.\n+\t* config/vax/vax-protos.h: Likewise.\n+\n+\t* output.h: Remove CONST_SECTION_ASM_OP usage.\n+\n+\t* system.h: Poison CONST_SECTION_ASM_OP.\n+\n+\t* crtstuff.c (__do_global_dtors_aux): Remove usage of CRT_GET_RFIB_TEXT\n+\t(frame_dummy): Likewise.\n+\t* unwind-dw2-fde-glibc.c (_Unwind_IteratePhdrCallback): Likewise.\n+\t* system.h: Poison CRT_GET_RFIB_TEXT.\n+\t\n \t* collect2.c (is_ctor_dtor): Remove CFRONT_LOSSAGE dependend code.\n \n \t* fix-header.c: Remove ADD_MISSING_EXTERN_C dependend variables."}, {"sha": "33117ba3589d133a2cb0f8ce5ef784e7a0d9c3a6", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=f691dc3b2267082db2ba64e402eb06cd8276fb4c", "patch": "@@ -23,7 +23,6 @@\n #ifndef GCC_ARM_PROTOS_H\n #define GCC_ARM_PROTOS_H\n \n-extern void   rdata_section\t\tPARAMS ((void));\n extern void   arm_override_options\tPARAMS ((void));\n extern int    use_return_insn\t\tPARAMS ((int));\n extern int    arm_regno_class \t\tPARAMS ((int));"}, {"sha": "6d83283da1e0ff9d0fd75a092b7788f5f6227d87", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=f691dc3b2267082db2ba64e402eb06cd8276fb4c", "patch": "@@ -1,5 +1,5 @@\n /* Frv prototypes.\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n This file is part of GNU CC.\n@@ -170,7 +170,6 @@ extern int frv_adjust_field_align\tPARAMS ((tree, int));\n extern void fixup_section\t\tPARAMS ((void));\n extern void sdata_section\t\tPARAMS ((void));\n extern void sbss_section\t\tPARAMS ((void));\n-extern void const_section\t\tPARAMS ((void));\n extern void data_section\t\tPARAMS ((void));\n \n #ifdef RTX_CODE"}, {"sha": "968bcde1ccd8996690d9da99bfe4dee22480ea8c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f691dc3b2267082db2ba64e402eb06cd8276fb4c", "patch": "@@ -5162,10 +5162,6 @@ ix86_expand_prologue ()\n \t\t\t\t       -frame.nregs * UNITS_PER_WORD);\n     }\n \n-#ifdef SUBTARGET_PROLOGUE\n-  SUBTARGET_PROLOGUE;\n-#endif\n-\n   pic_reg_used = false;\n   if (pic_offset_table_rtx\n       && (regs_ever_live[REAL_PIC_OFFSET_TABLE_REGNUM]"}, {"sha": "b3a1d86b2d35db32bbac9692940565fd717f0e57", "filename": "gcc/config/i386/uwin.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Fconfig%2Fi386%2Fuwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Fconfig%2Fi386%2Fuwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fuwin.h?ref=f691dc3b2267082db2ba64e402eb06cd8276fb4c", "patch": "@@ -2,7 +2,7 @@\n    hosting on U/WIN (Windows32), using GNU tools and the Windows32 API \n    Library, as distinct from winnt.h, which is used to build GCC for use \n    with a windows style library and tool set and uses the Microsoft tools.\n-   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Mumit Khan  <khan@xraylith.wisc.edu>.\n \n This file is part of GNU CC.\n@@ -92,7 +92,3 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_OUTPUT_EXTERNAL\n #undef ASM_OUTPUT_EXTERNAL_LIBCALL\n \n-/* Override Cygwin's definition. This is necessary now due to the way\n-   Cygwin profiling code is written. Once \"fixed\", we can remove this.  */\n-#undef SUBTARGET_PROLOGUE\n-"}, {"sha": "8da42d0d02755bf6a5f71bc4e6217ae3982f82b9", "filename": "gcc/config/vax/vax-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax-protos.h?ref=f691dc3b2267082db2ba64e402eb06cd8276fb4c", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  VAX version.\n-   Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -32,4 +32,3 @@ extern int reg_was_0_p PARAMS ((rtx, rtx));\n extern int check_float_value PARAMS ((enum machine_mode, REAL_VALUE_TYPE *, int));\n #endif /* REAL_VALUE_TYPE */\n \n-extern void const_section PARAMS ((void));"}, {"sha": "11599e02ba3e92d92c2124521558af46db02eff0", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=f691dc3b2267082db2ba64e402eb06cd8276fb4c", "patch": "@@ -1,7 +1,7 @@\n /* Specialized bits of code needed to support construction and\n    destruction of file-scope objects in C++ code.\n    Copyright (C) 1991, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com).\n \n This file is part of GCC.\n@@ -272,7 +272,7 @@ __do_global_dtors_aux (void)\n     }\n \n #ifdef USE_EH_FRAME_REGISTRY\n-#if defined(CRT_GET_RFIB_TEXT) || defined(CRT_GET_RFIB_DATA)\n+#ifdef CRT_GET_RFIB_DATA\n   /* If we used the new __register_frame_info_bases interface,\n      make sure that we deregister from the same place.  */\n   if (__deregister_frame_info_bases)\n@@ -299,24 +299,16 @@ frame_dummy (void)\n {\n #ifdef USE_EH_FRAME_REGISTRY\n   static struct object object;\n-#if defined(CRT_GET_RFIB_TEXT) || defined(CRT_GET_RFIB_DATA)\n+#ifdef CRT_GET_RFIB_DATA\n   void *tbase, *dbase;\n-#ifdef CRT_GET_RFIB_TEXT\n-  CRT_GET_RFIB_TEXT (tbase);\n-#else\n   tbase = 0;\n-#endif\n-#ifdef CRT_GET_RFIB_DATA\n   CRT_GET_RFIB_DATA (dbase);\n-#else\n-  dbase = 0;\n-#endif\n   if (__register_frame_info_bases)\n     __register_frame_info_bases (__EH_FRAME_BEGIN__, &object, tbase, dbase);\n #else\n   if (__register_frame_info)\n     __register_frame_info (__EH_FRAME_BEGIN__, &object);\n-#endif\n+#endif /* CRT_GET_RFIB_DATA */\n #endif /* USE_EH_FRAME_REGISTRY */\n #ifdef JCR_SECTION_NAME\n   if (__JCR_LIST__[0] && _Jv_RegisterClasses)"}, {"sha": "7b13e3b84339d2ebfb858162a98f502a9fc1c394", "filename": "gcc/dbxout.c", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=f691dc3b2267082db2ba64e402eb06cd8276fb4c", "patch": "@@ -439,10 +439,7 @@ dbxout_init (input_file_name)\n   ASM_GENERATE_INTERNAL_LABEL (ltext_label_name, \"Ltext\", 0);\n \n   /* Put the current working directory in an N_SO symbol.  */\n-#ifndef DBX_WORKING_DIRECTORY /* Only some versions of DBX want this,\n-\t\t\t\t but GDB always does.  */\n   if (use_gnu_debug_info_extensions)\n-#endif\n     {\n       if (!cwd && (cwd = getpwd ()) && (!*cwd || cwd[strlen (cwd) - 1] != '/'))\n \tcwd = concat (cwd, FILE_NAME_JOINER, NULL);\n@@ -461,8 +458,6 @@ dbxout_init (input_file_name)\n     }\n \n #ifdef DBX_OUTPUT_MAIN_SOURCE_FILENAME\n-  /* This should NOT be DBX_OUTPUT_SOURCE_FILENAME. That\n-     would give us an N_SOL, and we want an N_SO.  */\n   DBX_OUTPUT_MAIN_SOURCE_FILENAME (asmfile, input_file_name);\n #else /* no DBX_OUTPUT_MAIN_SOURCE_FILENAME */\n   /* We include outputting `Ltext:' here,\n@@ -612,9 +607,6 @@ dbxout_source_file (file, filename)\n \n   if (filename && (lastfile == 0 || strcmp (filename, lastfile)))\n     {\n-#ifdef DBX_OUTPUT_SOURCE_FILENAME\n-      DBX_OUTPUT_SOURCE_FILENAME (file, filename);\n-#else\n       char ltext_label_name[100];\n \n       ASM_GENERATE_INTERNAL_LABEL (ltext_label_name, \"Ltext\",\n@@ -631,7 +623,6 @@ dbxout_source_file (file, filename)\n \ttext_section ();\n       (*targetm.asm_out.internal_label) (file, \"Ltext\", source_label_number);\n       source_label_number++;\n-#endif\n       lastfile = filename;\n     }\n }\n@@ -1720,9 +1711,6 @@ dbxout_type (type, full)\n \t  CHARS (1);\n \t  return;\n \t}\n-#ifdef DBX_OUTPUT_ENUM\n-      DBX_OUTPUT_ENUM (asmfile, type);\n-#else\n       if (use_gnu_debug_info_extensions\n \t  && TYPE_PRECISION (type) != TYPE_PRECISION (integer_type_node))\n \t{\n@@ -1752,7 +1740,6 @@ dbxout_type (type, full)\n \n       putc (';', asmfile);\n       CHARS (1);\n-#endif\n       break;\n \n     case POINTER_TYPE:\n@@ -2250,13 +2237,9 @@ dbxout_symbol (decl, local)\n \t\t  || TREE_CODE (TREE_TYPE (decl)) == ENUMERAL_TYPE)\n \t\t{\n \t\t  HOST_WIDE_INT ival = tree_low_cst (DECL_INITIAL (decl), 0);\n-#ifdef DBX_OUTPUT_CONSTANT_SYMBOL\n-\t\t  DBX_OUTPUT_CONSTANT_SYMBOL (asmfile, name, ival);\n-#else\n \t\t  fprintf (asmfile, \"%s\\\"%s:c=i\" HOST_WIDE_INT_PRINT_DEC\n \t\t\t   \"\\\",0x%x,0,0,0\\n\",\n \t\t\t   ASM_STABS_OP, name, ival, N_LSYM);\n-#endif\n \t\t  return 1;\n \t\t}\n \t      else if (TREE_CODE (TREE_TYPE (decl)) == REAL_TYPE)\n@@ -2968,17 +2951,13 @@ dbxout_block (block, depth, args)\n \t{\n \t  int did_output;\n \n-#ifdef DBX_LBRAC_FIRST\n-\t  did_output = 1;\n-#else\n \t  /* In dbx format, the syms of a block come before the N_LBRAC.\n \t     If nothing is output, we don't need the N_LBRAC, either.  */\n \t  did_output = 0;\n \t  if (debug_info_level != DINFO_LEVEL_TERSE || depth == 0)\n \t    did_output = dbxout_syms (BLOCK_VARS (block));\n \t  if (args)\n \t    dbxout_reg_parms (args);\n-#endif\n \n \t  /* Now output an N_LBRAC symbol to represent the beginning of\n \t     the block.  Use the block's tree-walk order to generate\n@@ -2996,14 +2975,10 @@ dbxout_block (block, depth, args)\n \t\t  tree decl = BLOCK_VARS (block);\n \t\t  while (decl)\n \t\t    {\n-#ifdef DBX_OUTPUT_CATCH\n-\t\t      DBX_OUTPUT_CATCH (asmfile, decl, buf);\n-#else\n \t\t      fprintf (asmfile, \"%s\\\"%s:C1\\\",%d,0,0,\", ASM_STABS_OP,\n \t\t\t       IDENTIFIER_POINTER (DECL_NAME (decl)), N_CATCH);\n \t\t      assemble_name (asmfile, buf);\n \t\t      fprintf (asmfile, \"\\n\");\n-#endif\n \t\t      decl = TREE_CHAIN (decl);\n \t\t    }\n \t\t}\n@@ -3021,15 +2996,6 @@ dbxout_block (block, depth, args)\n #endif\n \t    }\n \n-#ifdef DBX_LBRAC_FIRST\n-\t  /* On some weird machines, the syms of a block\n-\t     come after the N_LBRAC.  */\n-\t  if (debug_info_level != DINFO_LEVEL_TERSE || depth == 0)\n-\t    dbxout_syms (BLOCK_VARS (block));\n-\t  if (args)\n-\t    dbxout_reg_parms (args);\n-#endif\n-\n \t  /* Output the subblocks.  */\n \t  dbxout_block (BLOCK_SUBBLOCKS (block), depth + 1, NULL_TREE);\n "}, {"sha": "ba8e3b1f844a0d5b1ab1f6086b93d6a2a95bc956", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 61, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f691dc3b2267082db2ba64e402eb06cd8276fb4c", "patch": "@@ -4624,39 +4624,15 @@ subroutine.  The former technique makes trampoline execution faster; the\n latter makes initialization faster.\n \n To clear the instruction cache when a trampoline is initialized, define\n-the following macros which describe the shape of the cache.\n-\n-@table @code\n-@findex INSN_CACHE_SIZE\n-@item INSN_CACHE_SIZE\n-The total size in bytes of the cache.\n-\n-@findex INSN_CACHE_LINE_WIDTH\n-@item INSN_CACHE_LINE_WIDTH\n-The length in bytes of each cache line.  The cache is divided into cache\n-lines which are disjoint slots, each holding a contiguous chunk of data\n-fetched from memory.  Each time data is brought into the cache, an\n-entire line is read at once.  The data loaded into a cache line is\n-always aligned on a boundary equal to the line size.\n-\n-@findex INSN_CACHE_DEPTH\n-@item INSN_CACHE_DEPTH\n-The number of alternative cache lines that can hold any particular memory\n-location.\n-@end table\n-\n-Alternatively, if the machine has system calls or instructions to clear\n-the instruction cache directly, you can define the following macro.\n+the following macro.\n \n @table @code\n @findex CLEAR_INSN_CACHE\n @item CLEAR_INSN_CACHE (@var{beg}, @var{end})\n If defined, expands to a C expression clearing the @emph{instruction\n-cache} in the specified interval.  If it is not defined, and the macro\n-@code{INSN_CACHE_SIZE} is defined, some generic code is generated to clear the\n-cache.  The definition of this macro would typically be a series of\n-@code{asm} statements.  Both @var{beg} and @var{end} are both pointer\n-expressions.\n+cache} in the specified interval.  The definition of this macro would\n+typically be a series of @code{asm} statements.  Both @var{beg} and\n+@var{end} are both pointer expressions.\n @end table\n \n To use a standard subroutine, define the following macro.  In addition,\n@@ -7949,13 +7925,6 @@ arguments should precede the assembler code for the function.  Normally,\n in DBX format, the debugging information entirely follows the assembler\n code.\n \n-@findex DBX_LBRAC_FIRST\n-@item DBX_LBRAC_FIRST\n-Define this macro if the @code{N_LBRAC} symbol for a block should\n-precede the debugging information for variables and functions defined in\n-that block.  Normally, in DBX format, the @code{N_LBRAC} symbol comes\n-first.\n-\n @findex DBX_BLOCKS_FUNCTION_RELATIVE\n @item DBX_BLOCKS_FUNCTION_RELATIVE\n Define this macro if the value of a symbol describing the scope of a\n@@ -7995,13 +7964,6 @@ Like @code{DBX_OUTPUT_LBRAC}, but for the end of a scope level.\n Define this macro if the target machine requires special handling to\n output an @code{N_FUN} entry for the function @var{decl}.\n \n-@findex DBX_OUTPUT_ENUM\n-@item DBX_OUTPUT_ENUM (@var{stream}, @var{type})\n-Define this macro if the target machine requires special handling to\n-output an enumeration type.  The definition should be a C statement\n-(sans semicolon) to output the appropriate information to @var{stream}\n-for the type @var{type}.\n-\n @findex DBX_OUTPUT_FUNCTION_END\n @item DBX_OUTPUT_FUNCTION_END (@var{stream}, @var{function})\n Define this macro if the target machine requires special output at the\n@@ -8085,14 +8047,6 @@ disturbing the rest of the gdb extensions.\n This describes file names in DBX format.\n \n @table @code\n-@findex DBX_WORKING_DIRECTORY\n-@item DBX_WORKING_DIRECTORY\n-Define this if DBX wants to have the current directory recorded in each\n-object file.\n-\n-Note that the working directory is always recorded if GDB extensions are\n-enabled.\n-\n @findex DBX_OUTPUT_MAIN_SOURCE_FILENAME\n @item DBX_OUTPUT_MAIN_SOURCE_FILENAME (@var{stream}, @var{name})\n A C statement to output DBX debugging information to the stdio stream\n@@ -8119,17 +8073,6 @@ compilation of the main source file @var{name}.\n \n If you don't define this macro, nothing special is output at the end\n of compilation, which is correct for most machines.\n-\n-@findex DBX_OUTPUT_SOURCE_FILENAME\n-@item DBX_OUTPUT_SOURCE_FILENAME (@var{stream}, @var{name})\n-A C statement to output DBX debugging information to the stdio stream\n-@var{stream} which indicates that file @var{name} is the current source\n-file.  This output is generated each time input shifts to a different\n-source file as a result of @samp{#include}, the end of an included file,\n-or a @samp{#line} command.\n-\n-This macro need not be defined if the standard form of output\n-for DBX debugging information is appropriate.\n @end table\n \n @need 2000"}, {"sha": "a9d8e682a8fc88340460dcfcf2af8d114fd7354c", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 1, "deletions": 102, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=f691dc3b2267082db2ba64e402eb06cd8276fb4c", "patch": "@@ -1,7 +1,7 @@\n /* More subroutines needed by GCC output code on some machines.  */\n /* Compile this one with gcc.  */\n /* Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002  Free Software Foundation, Inc.\n+   2000, 2001, 2002, 2003  Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1436,113 +1436,12 @@ __eprintf (const char *string, const char *expression,\n #ifdef L_clear_cache\n /* Clear part of an instruction cache.  */\n \n-#define INSN_CACHE_PLANE_SIZE (INSN_CACHE_SIZE / INSN_CACHE_DEPTH)\n-\n void\n __clear_cache (char *beg __attribute__((__unused__)),\n \t       char *end __attribute__((__unused__)))\n {\n #ifdef CLEAR_INSN_CACHE\n   CLEAR_INSN_CACHE (beg, end);\n-#else\n-#ifdef INSN_CACHE_SIZE\n-  static char array[INSN_CACHE_SIZE + INSN_CACHE_PLANE_SIZE + INSN_CACHE_LINE_WIDTH];\n-  static int initialized;\n-  int offset;\n-  void *start_addr\n-  void *end_addr;\n-  typedef (*function_ptr) (void);\n-\n-#if (INSN_CACHE_SIZE / INSN_CACHE_LINE_WIDTH) < 16\n-  /* It's cheaper to clear the whole cache.\n-     Put in a series of jump instructions so that calling the beginning\n-     of the cache will clear the whole thing.  */\n-\n-  if (! initialized)\n-    {\n-      int ptr = (((int) array + INSN_CACHE_LINE_WIDTH - 1)\n-\t\t & -INSN_CACHE_LINE_WIDTH);\n-      int end_ptr = ptr + INSN_CACHE_SIZE;\n-\n-      while (ptr < end_ptr)\n-\t{\n-\t  *(INSTRUCTION_TYPE *)ptr\n-\t    = JUMP_AHEAD_INSTRUCTION + INSN_CACHE_LINE_WIDTH;\n-\t  ptr += INSN_CACHE_LINE_WIDTH;\n-\t}\n-      *(INSTRUCTION_TYPE *) (ptr - INSN_CACHE_LINE_WIDTH) = RETURN_INSTRUCTION;\n-\n-      initialized = 1;\n-    }\n-\n-  /* Call the beginning of the sequence.  */\n-  (((function_ptr) (((int) array + INSN_CACHE_LINE_WIDTH - 1)\n-\t\t    & -INSN_CACHE_LINE_WIDTH))\n-   ());\n-\n-#else /* Cache is large.  */\n-\n-  if (! initialized)\n-    {\n-      int ptr = (((int) array + INSN_CACHE_LINE_WIDTH - 1)\n-\t\t & -INSN_CACHE_LINE_WIDTH);\n-\n-      while (ptr < (int) array + sizeof array)\n-\t{\n-\t  *(INSTRUCTION_TYPE *)ptr = RETURN_INSTRUCTION;\n-\t  ptr += INSN_CACHE_LINE_WIDTH;\n-\t}\n-\n-      initialized = 1;\n-    }\n-\n-  /* Find the location in array that occupies the same cache line as BEG.  */\n-\n-  offset = ((int) beg & -INSN_CACHE_LINE_WIDTH) & (INSN_CACHE_PLANE_SIZE - 1);\n-  start_addr = (((int) (array + INSN_CACHE_PLANE_SIZE - 1)\n-\t\t & -INSN_CACHE_PLANE_SIZE)\n-\t\t+ offset);\n-\n-  /* Compute the cache alignment of the place to stop clearing.  */\n-#if 0  /* This is not needed for gcc's purposes.  */\n-  /* If the block to clear is bigger than a cache plane,\n-     we clear the entire cache, and OFFSET is already correct.  */\n-  if (end < beg + INSN_CACHE_PLANE_SIZE)\n-#endif\n-    offset = (((int) (end + INSN_CACHE_LINE_WIDTH - 1)\n-\t       & -INSN_CACHE_LINE_WIDTH)\n-\t      & (INSN_CACHE_PLANE_SIZE - 1));\n-\n-#if INSN_CACHE_DEPTH > 1\n-  end_addr = (start_addr & -INSN_CACHE_PLANE_SIZE) + offset;\n-  if (end_addr <= start_addr)\n-    end_addr += INSN_CACHE_PLANE_SIZE;\n-\n-  for (plane = 0; plane < INSN_CACHE_DEPTH; plane++)\n-    {\n-      int addr = start_addr + plane * INSN_CACHE_PLANE_SIZE;\n-      int stop = end_addr + plane * INSN_CACHE_PLANE_SIZE;\n-\n-      while (addr != stop)\n-\t{\n-\t  /* Call the return instruction at ADDR.  */\n-\t  ((function_ptr) addr) ();\n-\n-\t  addr += INSN_CACHE_LINE_WIDTH;\n-\t}\n-    }\n-#else /* just one plane */\n-  do\n-    {\n-      /* Call the return instruction at START_ADDR.  */\n-      ((function_ptr) start_addr) ();\n-\n-      start_addr += INSN_CACHE_LINE_WIDTH;\n-    }\n-  while ((start_addr % INSN_CACHE_SIZE) != offset);\n-#endif /* just one plane */\n-#endif /* Cache is large */\n-#endif /* Cache exists */\n #endif /* CLEAR_INSN_CACHE */\n }\n "}, {"sha": "b78dd63f07fc6e1e5798b6e5cfb6e01d4619433a", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=f691dc3b2267082db2ba64e402eb06cd8276fb4c", "patch": "@@ -1,7 +1,7 @@\n /* Declarations for insn-output.c.  These functions are defined in recog.c,\n    final.c, and varasm.c.\n    Copyright (C) 1987, 1991, 1994, 1997, 1998,\n-   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -183,10 +183,6 @@ extern void dtors_section PARAMS ((void));\n extern void bss_section PARAMS ((void));\n #endif\n \n-#ifdef CONST_SECTION_ASM_OP\n-extern void const_section PARAMS ((void));\n-#endif\n-\n #ifdef INIT_SECTION_ASM_OP\n extern void init_section PARAMS ((void));\n #endif\n@@ -199,10 +195,6 @@ extern void fini_section PARAMS ((void));\n extern void exports_section PARAMS ((void));\n #endif\n \n-#ifdef TDESC_SECTION_ASM_OP\n-extern void tdesc_section PARAMS ((void));\n-#endif\n-\n #ifdef DRECTVE_SECTION_ASM_OP\n extern void drectve_section PARAMS ((void));\n #endif\n@@ -211,10 +203,6 @@ extern void drectve_section PARAMS ((void));\n extern void sdata_section PARAMS ((void));\n #endif\n \n-#ifdef RDATA_SECTION_ASM_OP\n-extern void rdata_section PARAMS ((void));\n-#endif\n-\n /* Tell assembler to change to section NAME for DECL.\n    If DECL is NULL, just switch to section NAME.\n    If NAME is NULL, get the name from DECL."}, {"sha": "597113a0088c221b12b0b39246efb716e796cb52", "filename": "gcc/system.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f691dc3b2267082db2ba64e402eb06cd8276fb4c/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=f691dc3b2267082db2ba64e402eb06cd8276fb4c", "patch": "@@ -642,7 +642,11 @@ typedef char _Bool;\n \tMACHINE_STATE_RESTORE SCCS_DIRECTIVE SECTION_ASM_OP\t\t   \\\n \tASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL ASM_OUTPUT_INTERNAL_LABEL \\\n \tOBJC_PROLOGUE ALLOCATE_TRAMPOLINE HANDLE_PRAGMA ROUND_TYPE_SIZE\t   \\\n-\tROUND_TYPE_SIZE_UNIT\n+\tROUND_TYPE_SIZE_UNIT CONST_SECTION_ASM_OP CRT_GET_RFIB_TEXT\t   \\\n+\tDBX_LBRAC_FIRST DBX_OUTPUT_ENUM DBX_OUTPUT_SOURCE_FILENAME\t   \\\n+\tDBX_WORKING_DIRECTORY INSN_CACHE_DEPTH INSN_CACHE_SIZE\t\t   \\\n+\tINSN_CACHE_LINE_WIDTH TDESC_SECTION_ASM_OP RDATA_SECTION_ASM_OP\t   \\\n+\tSUBTARGET_PROLOGUE\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}