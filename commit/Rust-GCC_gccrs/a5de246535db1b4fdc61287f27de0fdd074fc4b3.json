{"sha": "a5de246535db1b4fdc61287f27de0fdd074fc4b3", "node_id": "C_kwDOANBUbNoAKGE1ZGUyNDY1MzVkYjFiNGZkYzYxMjg3ZjI3ZGUwZmRkMDc0ZmM0YjM", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-04-01T16:01:30Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-04-01T16:01:30Z"}, "message": "c++: NTTP constraint depending on outer parms [PR109160]\n\nHere we're crashing during satisfaction for the NTTP 'C<B> auto V'\nultimately because convert_template_argument / unify don't pass all\nouter template arguments to do_auto_deduction, and during satisfaction\nwe need to know all arguments.  While these callers do pass some outer\narguments, they are only sufficient to properly substitute the\n(level-lowered) 'auto' and are not necessarily the entire set.\n\nFortunately it seems these callers have access to the full set of outer\narguments via convert_template_argument's 'in_decl' parameter and\nunify's 'tparms' parameter.  So this patch adds a new parameter to\ndo_auto_deduction, used only during adc_unify deduction, through which\nthese callers can pass the enclosing (partially instantiated) template\nand from which do_auto_deduction can obtain _all_ outer template\narguments for sake of satisfaction.\n\nThis patch also ensures that the 'in_decl' argument passed to\ncoerce_template_parms is always a TEMPLATE_DECL, which in turn allows us\nto pass it as-is to do_auto_deduction; the only coerce_template_parms\ncaller that needed adjustment was tsubst_decl it seems.\n\n\tPR c++/109160\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (do_auto_deduction): Add defaulted tmpl parameter.\n\t* pt.cc (convert_template_argument): Pass 'in_decl' as 'tmpl' to\n\tdo_auto_deduction.\n\t(tsubst_decl) <case VAR_/TYPE_DECL>: Pass 'tmpl' instead of 't' as\n\t'in_decl' to coerce_template_parms.\n\t(unify) <case TEMPLATE_PARM_INDEX>: Pass TPARMS_PRIMARY_TEMPLATE\n\tas 'tmpl' to do_auto_deduction.\n\t(do_auto_deduction): Document default arguments.  Rename local\n\tvariable 'tmpl' to 'ctmpl'.  Use 'tmpl' to obtain a full set of\n\ttemplate arguments for satisfaction in the adc_unify case.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-placeholder12.C: New test.", "tree": {"sha": "2da00af879eeb6d4c767d2ca5be94a388a721cda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2da00af879eeb6d4c767d2ca5be94a388a721cda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5de246535db1b4fdc61287f27de0fdd074fc4b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5de246535db1b4fdc61287f27de0fdd074fc4b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5de246535db1b4fdc61287f27de0fdd074fc4b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5de246535db1b4fdc61287f27de0fdd074fc4b3/comments", "author": null, "committer": null, "parents": [{"sha": "b5e38b1c166357e2a63d38ae6da7ae5d68fc115b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5e38b1c166357e2a63d38ae6da7ae5d68fc115b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5e38b1c166357e2a63d38ae6da7ae5d68fc115b"}], "stats": {"total": 64, "additions": 53, "deletions": 11}, "files": [{"sha": "622752ae4e6e9d5967f844f3c79e7cbbc5856d9c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5de246535db1b4fdc61287f27de0fdd074fc4b3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5de246535db1b4fdc61287f27de0fdd074fc4b3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a5de246535db1b4fdc61287f27de0fdd074fc4b3", "patch": "@@ -7326,7 +7326,8 @@ extern tree do_auto_deduction                   (tree, tree, tree,\n                                                  auto_deduction_context\n \t\t\t\t\t\t = adc_unspecified,\n \t\t\t\t\t\t tree = NULL_TREE,\n-\t\t\t\t\t\t int = LOOKUP_NORMAL);\n+\t\t\t\t\t\t int = LOOKUP_NORMAL,\n+\t\t\t\t\t\t tree = NULL_TREE);\n extern tree type_uses_auto\t\t\t(tree);\n extern tree type_uses_auto_or_concept\t\t(tree);\n extern void append_type_to_template_for_access_check (tree, tree, tree,"}, {"sha": "4429ae66b68218a7c34e21b6fce38b68c47a9dc6", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5de246535db1b4fdc61287f27de0fdd074fc4b3/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5de246535db1b4fdc61287f27de0fdd074fc4b3/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=a5de246535db1b4fdc61287f27de0fdd074fc4b3", "patch": "@@ -8644,7 +8644,7 @@ convert_template_argument (tree parm,\n       else if (tree a = type_uses_auto (t))\n \t{\n \t  t = do_auto_deduction (t, arg, a, complain, adc_unify, args,\n-\t\t\t\t LOOKUP_IMPLICIT);\n+\t\t\t\t LOOKUP_IMPLICIT, /*tmpl=*/in_decl);\n \t  if (t == error_mark_node)\n \t    return error_mark_node;\n \t}\n@@ -15252,7 +15252,7 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t\t     the template.  */\n \t\t  argvec = (coerce_template_parms\n \t\t\t    (DECL_TEMPLATE_PARMS (gen_tmpl),\n-\t\t\t     argvec, t, complain));\n+\t\t\t     argvec, tmpl, complain));\n \t\tif (argvec == error_mark_node)\n \t\t  RETURN (error_mark_node);\n \t\thash = spec_hasher::hash (gen_tmpl, argvec);\n@@ -24730,7 +24730,9 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t  if (tree a = type_uses_auto (tparm))\n \t    {\n \t      tparm = do_auto_deduction (tparm, arg, a,\n-\t\t\t\t\t complain, adc_unify, targs);\n+\t\t\t\t\t complain, adc_unify, targs,\n+\t\t\t\t\t LOOKUP_NORMAL,\n+\t\t\t\t\t TPARMS_PRIMARY_TEMPLATE (tparms));\n \t      if (tparm == error_mark_node)\n \t\treturn 1;\n \t    }\n@@ -30779,13 +30781,20 @@ unparenthesized_id_or_class_member_access_p (tree init)\n    adc_requirement contexts to communicate the necessary template arguments\n    to satisfaction.  OUTER_TARGS is ignored in other contexts.\n \n-   For partial-concept-ids, extra args may be appended to the list of deduced\n-   template arguments prior to determining constraint satisfaction.  */\n+   Additionally for adc_unify contexts TMPL is the template for which TYPE\n+   is a template parameter type.\n+\n+   For partial-concept-ids, extra args from OUTER_TARGS, TMPL and the current\n+   scope may be appended to the list of deduced template arguments prior to\n+   determining constraint satisfaction as appropriate.  */\n \n tree\n do_auto_deduction (tree type, tree init, tree auto_node,\n-                   tsubst_flags_t complain, auto_deduction_context context,\n-\t\t   tree outer_targs, int flags)\n+\t\t   tsubst_flags_t complain /* = tf_warning_or_error */,\n+\t\t   auto_deduction_context context /* = adc_unspecified */,\n+\t\t   tree outer_targs /* = NULL_TREE */,\n+\t\t   int flags /* = LOOKUP_NORMAL */,\n+\t\t   tree tmpl /* = NULL_TREE */)\n {\n   if (init == error_mark_node)\n     return error_mark_node;\n@@ -30821,9 +30830,9 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n \t\t\t\t\t/*return*/true)))\n     init = r;\n \n-  if (tree tmpl = CLASS_PLACEHOLDER_TEMPLATE (auto_node))\n+  if (tree ctmpl = CLASS_PLACEHOLDER_TEMPLATE (auto_node))\n     /* C++17 class template argument deduction.  */\n-    return do_class_deduction (type, tmpl, init, flags, complain);\n+    return do_class_deduction (type, ctmpl, init, flags, complain);\n \n   if (init == NULL_TREE || TREE_TYPE (init) == NULL_TREE)\n     /* Nothing we can do with this, even in deduction context.  */\n@@ -30975,7 +30984,10 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n \t\t}\n \t    }\n \n-      tree full_targs = add_to_template_args (outer_targs, targs);\n+      tree full_targs = outer_targs;\n+      if (context == adc_unify && tmpl)\n+\tfull_targs = add_outermost_template_args (tmpl, full_targs);\n+      full_targs = add_to_template_args (full_targs, targs);\n \n       /* HACK: Compensate for callers not always communicating all levels of\n \t outer template arguments by filling in the outermost missing levels"}, {"sha": "22f0ac5e26a150c984baee82ab81d8726612f586", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-placeholder12.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5de246535db1b4fdc61287f27de0fdd074fc4b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5de246535db1b4fdc61287f27de0fdd074fc4b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder12.C?ref=a5de246535db1b4fdc61287f27de0fdd074fc4b3", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/109160\n+// { dg-do compile { target c++20 } }\n+\n+template<class T, bool B>\n+concept C = B;\n+\n+template<int> struct X { };\n+\n+template<bool B>\n+struct A {\n+  template<C<B> auto V> static void f();\n+  template<C<B> auto V> static void g(X<V>);\n+  template<C<B> auto V> static inline int value;\n+  template<C<B> auto V> struct D { };\n+};\n+\n+int main() {\n+  A<true>::f<0>();\n+  A<false>::f<0>(); // { dg-error \"no match|constraints\" }\n+\n+  A<true>::g(X<0>{});\n+  A<false>::g(X<0>{}); // { dg-error \"no match|constraints\" }\n+\n+  bool v1 = A<true>::value<0>;\n+  bool v2 = A<false>::value<0>;  // { dg-error \"constraints\" }\n+\n+  A<true>::D<0> d1;\n+  A<false>::D<0> d2; // { dg-error \"constraints\" }\n+}"}]}