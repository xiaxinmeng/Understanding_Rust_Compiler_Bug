{"sha": "18d0861745bb2b8446055f56b8b6f5994b7facf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThkMDg2MTc0NWJiMmI4NDQ2MDU1ZjU2YjhiNmY1OTk0YjdmYWNmMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-08-17T08:18:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-08-17T08:18:47Z"}, "message": "tree-ssa.c: Include tree-cfg.h and tree-dfa.h.\n\n2016-08-17  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa.c: Include tree-cfg.h and tree-dfa.h.\n\t(verify_vssa): New function verifying virtual SSA form.\n\t(verify_ssa): Call it.\n\t* tree-ssa-loop-manip.c (slpeel_update_phi_nodes_for_guard2):\n\tDo not apply loop-closed SSA handling to virtuals.\n\t* ssa-iterators.h (op_iter_init): Handle GIMPLE_TRANSACTION.\n\t* tree-into-ssa.c (prepare_use_sites_for): Skip virtual SSA names\n\twhen rewriting their symbol.\n\t(prepare_def_site_for): Likewise.\n\t* tree-chkp-opt.c (chkp_reduce_bounds_lifetime): Clear virtual\n\toperands of moved stmts.\n\nFrom-SVN: r239524", "tree": {"sha": "95ffa3f4b47ab440ffe77f02d7ddde825eed0e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95ffa3f4b47ab440ffe77f02d7ddde825eed0e2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18d0861745bb2b8446055f56b8b6f5994b7facf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18d0861745bb2b8446055f56b8b6f5994b7facf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18d0861745bb2b8446055f56b8b6f5994b7facf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18d0861745bb2b8446055f56b8b6f5994b7facf1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "622d8b69482a3c8f2a0df0324033719a771932fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/622d8b69482a3c8f2a0df0324033719a771932fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/622d8b69482a3c8f2a0df0324033719a771932fd"}], "stats": {"total": 143, "additions": 143, "deletions": 0}, "files": [{"sha": "e2a592cf75fd7377e024f0baf435c5db13d6eab1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d0861745bb2b8446055f56b8b6f5994b7facf1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d0861745bb2b8446055f56b8b6f5994b7facf1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18d0861745bb2b8446055f56b8b6f5994b7facf1", "patch": "@@ -1,3 +1,17 @@\n+2016-08-17  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa.c: Include tree-cfg.h and tree-dfa.h.\n+\t(verify_vssa): New function verifying virtual SSA form.\n+\t(verify_ssa): Call it.\n+\t* tree-ssa-loop-manip.c (slpeel_update_phi_nodes_for_guard2):\n+\tDo not apply loop-closed SSA handling to virtuals.\n+\t* ssa-iterators.h (op_iter_init): Handle GIMPLE_TRANSACTION.\n+\t* tree-into-ssa.c (prepare_use_sites_for): Skip virtual SSA names\n+\twhen rewriting their symbol.\n+\t(prepare_def_site_for): Likewise.\n+\t* tree-chkp-opt.c (chkp_reduce_bounds_lifetime): Clear virtual\n+\toperands of moved stmts.\n+\n 2016-08-17  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/23855"}, {"sha": "b6d8f3c67dec610a7615529dfdc76f3273c09042", "filename": "gcc/ssa-iterators.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d0861745bb2b8446055f56b8b6f5994b7facf1/gcc%2Fssa-iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d0861745bb2b8446055f56b8b6f5994b7facf1/gcc%2Fssa-iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-iterators.h?ref=18d0861745bb2b8446055f56b8b6f5994b7facf1", "patch": "@@ -607,6 +607,10 @@ op_iter_init (ssa_op_iter *ptr, gimple *stmt, int flags)\n \t  case GIMPLE_ASM:\n \t    ptr->numops = gimple_asm_noutputs (as_a <gasm *> (stmt));\n \t    break;\n+\t  case GIMPLE_TRANSACTION:\n+\t    ptr->numops = 0;\n+\t    flags &= ~SSA_OP_DEF;\n+\t    break;\n \t  default:\n \t    ptr->numops = 0;\n \t    flags &= ~(SSA_OP_DEF | SSA_OP_VDEF);"}, {"sha": "99152450e1ee0af5f274b1e99e3c5dd1756f1ded", "filename": "gcc/tree-chkp-opt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d0861745bb2b8446055f56b8b6f5994b7facf1/gcc%2Ftree-chkp-opt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d0861745bb2b8446055f56b8b6f5994b7facf1/gcc%2Ftree-chkp-opt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp-opt.c?ref=18d0861745bb2b8446055f56b8b6f5994b7facf1", "patch": "@@ -1236,6 +1236,8 @@ chkp_reduce_bounds_lifetime (void)\n \t\t  gsi_move_before (&i, &gsi);\n \t\t}\n \n+\t      gimple_set_vdef (stmt, NULL_TREE);\n+\t      gimple_set_vuse (stmt, NULL_TREE);\n \t      update_stmt (stmt);\n \t    }\n \t}"}, {"sha": "7ed9b9dd84e1b2c253a70ec68927a56674b4eb83", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d0861745bb2b8446055f56b8b6f5994b7facf1/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d0861745bb2b8446055f56b8b6f5994b7facf1/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=18d0861745bb2b8446055f56b8b6f5994b7facf1", "patch": "@@ -2596,6 +2596,11 @@ prepare_use_sites_for (tree name, bool insert_phi_p)\n   use_operand_p use_p;\n   imm_use_iterator iter;\n \n+  /* If we rename virtual operands do not update them.  */\n+  if (virtual_operand_p (name)\n+      && cfun->gimple_df->rename_vops)\n+    return;\n+\n   FOR_EACH_IMM_USE_FAST (use_p, iter, name)\n     {\n       gimple *stmt = USE_STMT (use_p);\n@@ -2631,6 +2636,11 @@ prepare_def_site_for (tree name, bool insert_phi_p)\n \t\t       || !bitmap_bit_p (names_to_release,\n \t\t\t\t\t SSA_NAME_VERSION (name)));\n \n+  /* If we rename virtual operands do not update them.  */\n+  if (virtual_operand_p (name)\n+      && cfun->gimple_df->rename_vops)\n+    return;\n+\n   stmt = SSA_NAME_DEF_STMT (name);\n   bb = gimple_bb (stmt);\n   if (bb)"}, {"sha": "66b50b962bf7278afc655f3786e7890410852061", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d0861745bb2b8446055f56b8b6f5994b7facf1/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d0861745bb2b8446055f56b8b6f5994b7facf1/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=18d0861745bb2b8446055f56b8b6f5994b7facf1", "patch": "@@ -39,6 +39,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"cfgexpand.h\"\n+#include \"tree-cfg.h\"\n+#include \"tree-dfa.h\"\n \n /* Pointer map of variable mappings, keyed by edge.  */\n static hash_map<edge, auto_vec<edge_var_map> > *edge_var_maps;\n@@ -603,6 +605,104 @@ release_defs_bitset (bitmap toremove)\n       }\n }\n \n+/* Verify virtual SSA form.  */\n+\n+bool\n+verify_vssa (basic_block bb, tree current_vdef, sbitmap visited)\n+{\n+  bool err = false;\n+\n+  if (bitmap_bit_p (visited, bb->index))\n+    return false;\n+\n+  bitmap_set_bit (visited, bb->index);\n+\n+  /* Pick up the single virtual PHI def.  */\n+  gphi *phi = NULL;\n+  for (gphi_iterator si = gsi_start_phis (bb); !gsi_end_p (si);\n+       gsi_next (&si))\n+    {\n+      tree res = gimple_phi_result (si.phi ());\n+      if (virtual_operand_p (res))\n+\t{\n+\t  if (phi)\n+\t    {\n+\t      error (\"multiple virtual PHI nodes in BB %d\", bb->index);\n+\t      print_gimple_stmt (stderr, phi, 0, 0);\n+\t      print_gimple_stmt (stderr, si.phi (), 0, 0);\n+\t      err = true;\n+\t    }\n+\t  else\n+\t    phi = si.phi ();\n+\t}\n+    }\n+  if (phi)\n+    {\n+      current_vdef = gimple_phi_result (phi);\n+      if (TREE_CODE (current_vdef) != SSA_NAME)\n+\t{\n+\t  error (\"virtual definition is not an SSA name\");\n+\t  print_gimple_stmt (stderr, phi, 0, 0);\n+\t  err = true;\n+\t}\n+    }\n+\n+  /* Verify stmts.  */\n+  for (gimple_stmt_iterator gsi = gsi_start_bb (bb); !gsi_end_p (gsi);\n+       gsi_next (&gsi))\n+    {\n+      gimple *stmt = gsi_stmt (gsi);\n+      tree vuse = gimple_vuse (stmt);\n+      if (vuse)\n+\t{\n+\t  if (vuse != current_vdef)\n+\t    {\n+\t      error (\"stmt with wrong VUSE\");\n+\t      print_gimple_stmt (stderr, stmt, 0, TDF_VOPS);\n+\t      fprintf (stderr, \"expected \");\n+\t      print_generic_expr (stderr, current_vdef, 0);\n+\t      fprintf (stderr, \"\\n\");\n+\t      err = true;\n+\t    }\n+\t  tree vdef = gimple_vdef (stmt);\n+\t  if (vdef)\n+\t    {\n+\t      current_vdef = vdef;\n+\t      if (TREE_CODE (current_vdef) != SSA_NAME)\n+\t\t{\n+\t\t  error (\"virtual definition is not an SSA name\");\n+\t\t  print_gimple_stmt (stderr, phi, 0, 0);\n+\t\t  err = true;\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+  /* Verify destination PHI uses and recurse.  */\n+  edge_iterator ei;\n+  edge e;\n+  FOR_EACH_EDGE (e, ei, bb->succs)\n+    {\n+      gphi *phi = get_virtual_phi (e->dest);\n+      if (phi\n+\t  && PHI_ARG_DEF_FROM_EDGE (phi, e) != current_vdef)\n+\t{\n+\t  error (\"PHI node with wrong VUSE on edge from BB %d\",\n+\t\t e->src->index);\n+\t  print_gimple_stmt (stderr, phi, 0, TDF_VOPS);\n+\t  fprintf (stderr, \"expected \");\n+\t  print_generic_expr (stderr, current_vdef, 0);\n+\t  fprintf (stderr, \"\\n\");\n+\t  err = true;\n+\t}\n+\n+      /* Recurse.  */\n+      err |= verify_vssa (e->dest, current_vdef, visited);\n+    }\n+\n+  return err;\n+}\n+\n /* Return true if SSA_NAME is malformed and mark it visited.\n \n    IS_VIRTUAL is true if this SSA_NAME was found inside a virtual\n@@ -1024,6 +1124,16 @@ verify_ssa (bool check_modified_stmt, bool check_ssa_operands)\n \n   free (definition_block);\n \n+  if (gimple_vop (cfun)\n+      && ssa_default_def (cfun, gimple_vop (cfun)))\n+    {\n+      auto_sbitmap visited (last_basic_block_for_fn (cfun) + 1);\n+      bitmap_clear (visited);\n+      if (verify_vssa (ENTRY_BLOCK_PTR_FOR_FN (cfun),\n+\t\t       ssa_default_def (cfun, gimple_vop (cfun)), visited))\n+\tgoto err;\n+    }\n+\n   /* Restore the dominance information to its prior known state, so\n      that we do not perturb the compiler's subsequent behavior.  */\n   if (orig_dom_state == DOM_NONE)"}, {"sha": "90b7df9063d47e1aa35b2a17bd56ecf45eeae6b3", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d0861745bb2b8446055f56b8b6f5994b7facf1/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d0861745bb2b8446055f56b8b6f5994b7facf1/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=18d0861745bb2b8446055f56b8b6f5994b7facf1", "patch": "@@ -607,6 +607,9 @@ slpeel_update_phi_nodes_for_guard2 (edge guard_edge, struct loop *loop,\n \n       /** 2. Handle loop-closed-ssa-form phis  **/\n \n+      if (virtual_operand_p (PHI_RESULT (orig_phi)))\n+\tcontinue;\n+\n       /* 2.1. Generate new phi node in NEW_EXIT_BB:  */\n       new_res = copy_ssa_name (PHI_RESULT (orig_phi));\n       new_phi = create_phi_node (new_res, *new_exit_bb);"}]}