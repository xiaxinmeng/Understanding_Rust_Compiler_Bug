{"sha": "a78e33fc4b62903af1b875ba51734a11a31bdffb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc4ZTMzZmM0YjYyOTAzYWYxYjg3NWJhNTE3MzRhMTFhMzFiZGZmYg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "1999-07-15T12:39:30Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-07-15T12:39:30Z"}, "message": "rs6000.md (insv, extzv): Remove SImode dependence in named patterns.\n\n\t* rs6000.md (insv, extzv): Remove SImode dependence in named\n\tpatterns.  Explicitly generate DImode RTL if PowerPC64 and\n\toperand is DImode.\n\t(insvdi): Reverse start and size in instruction template.\n\nFrom-SVN: r28114", "tree": {"sha": "237c4a95ab4d0f82bf42209c0f145dc05220f0e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/237c4a95ab4d0f82bf42209c0f145dc05220f0e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a78e33fc4b62903af1b875ba51734a11a31bdffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a78e33fc4b62903af1b875ba51734a11a31bdffb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a78e33fc4b62903af1b875ba51734a11a31bdffb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a78e33fc4b62903af1b875ba51734a11a31bdffb/comments", "author": null, "committer": null, "parents": [{"sha": "51e0d189edbc6fc454d774c45593f1d04b661fea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e0d189edbc6fc454d774c45593f1d04b661fea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51e0d189edbc6fc454d774c45593f1d04b661fea"}], "stats": {"total": 79, "additions": 49, "deletions": 30}, "files": [{"sha": "71e7ff1c8c46dd2ab09fc9697225bf5e6f781fba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a78e33fc4b62903af1b875ba51734a11a31bdffb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a78e33fc4b62903af1b875ba51734a11a31bdffb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a78e33fc4b62903af1b875ba51734a11a31bdffb", "patch": "@@ -1,3 +1,10 @@\n+Thu Jul 15 15:15:43 1999  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* rs6000.md (insv, extzv): Remove SImode dependence in named\n+\tpatterns.  Explicitly generate DImode RTL if PowerPC64 and\n+\toperand is DImode.\n+\t(insvdi): Reverse start and size in instruction template.\n+\n 1999-07-12  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* invoke.texi: Typo fixes."}, {"sha": "085db80462d8611f76e3f30e787378ef7f5e0e3b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 42, "deletions": 30, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a78e33fc4b62903af1b875ba51734a11a31bdffb/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a78e33fc4b62903af1b875ba51734a11a31bdffb/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a78e33fc4b62903af1b875ba51734a11a31bdffb", "patch": "@@ -2594,10 +2594,10 @@\n ;; Rotate and shift insns, in all their variants.  These support shifts,\n ;; field inserts and extracts, and various combinations thereof.\n (define_expand \"insv\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"gpc_reg_operand\" \"+r\")\n-\t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n-\t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\"))\n-\t(match_operand:SI 3 \"gpc_reg_operand\" \"r\"))]\n+  [(set (zero_extract (match_operand 0 \"gpc_reg_operand\" \"+r\")\n+\t\t       (match_operand:SI 1 \"const_int_operand\" \"i\")\n+\t\t       (match_operand:SI 2 \"const_int_operand\" \"i\"))\n+\t(match_operand 3 \"gpc_reg_operand\" \"r\"))]\n   \"\"\n   \"\n {\n@@ -2607,9 +2607,15 @@\n   if (GET_CODE (operands[0]) == SUBREG\n       && (GET_MODE_SIZE (GET_MODE (SUBREG_REG (operands[0]))) < UNITS_PER_WORD))\n     FAIL;\n+\n+  if (TARGET_POWERPC64 && GET_MODE (operands[0]) == DImode)\n+    emit_insn (gen_insvdi (operands[0], operands[1], operands[2], operands[3]));\n+  else\n+    emit_insn (gen_insvsi (operands[0], operands[1], operands[2], operands[3]));\n+  DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"insvsi\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"gpc_reg_operand\" \"+r\")\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\"))\n@@ -2625,7 +2631,7 @@\n   return \\\"{rlimi|rlwimi} %0,%3,%h4,%h2,%h1\\\";\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*insvsi_internal1\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"gpc_reg_operand\" \"+r\")\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\"))\n@@ -2643,7 +2649,7 @@\n   return \\\"{rlimi|rlwimi} %0,%3,%h4,%h2,%h1\\\";\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*insvsi_internal2\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"gpc_reg_operand\" \"+r\")\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\"))\n@@ -2661,7 +2667,7 @@\n   return \\\"{rlimi|rlwimi} %0,%3,%h4,%h2,%h1\\\";\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*insvsi_internal3\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"gpc_reg_operand\" \"+r\")\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\"))\n@@ -2679,7 +2685,7 @@\n   return \\\"{rlimi|rlwimi} %0,%3,%h4,%h2,%h1\\\";\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*insvsi_internal4\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"gpc_reg_operand\" \"+r\")\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\"))\n@@ -2700,26 +2706,26 @@\n   return \\\"{rlimi|rlwimi} %0,%3,%h5,%h2,%h1\\\";\n }\")\n \n-(define_insn \"\"\n+(define_insn \"insvdi\"\n   [(set (zero_extract:DI (match_operand:DI 0 \"gpc_reg_operand\" \"+r\")\n-\t\t\t (match_operand:DI 1 \"const_int_operand\" \"i\")\n-\t\t\t (match_operand:DI 2 \"const_int_operand\" \"i\"))\n+\t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\"))\n \t(match_operand:DI 3 \"gpc_reg_operand\" \"r\"))]\n   \"TARGET_POWERPC64\"\n   \"*\n {\n   int start = INTVAL (operands[2]) & 63;\n   int size = INTVAL (operands[1]) & 63;\n \n-  operands[2] = GEN_INT (64 - start - size);\n-  return \\\"rldimi %0,%3,%H2,%H1\\\";\n+  operands[1] = GEN_INT (64 - start - size);\n+  return \\\"rldimi %0,%3,%H1,%H2\\\";\n }\")\n \n (define_expand \"extzv\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(zero_extract:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\")\n-\t\t\t (match_operand:SI 3 \"const_int_operand\" \"i\")))]\n+  [(set (match_operand 0 \"gpc_reg_operand\" \"=r\")\n+\t(zero_extract (match_operand 1 \"gpc_reg_operand\" \"r\")\n+\t\t       (match_operand:SI 2 \"const_int_operand\" \"i\")\n+\t\t       (match_operand:SI 3 \"const_int_operand\" \"i\")))]\n   \"\"\n   \"\n {\n@@ -2729,9 +2735,15 @@\n   if (GET_CODE (operands[0]) == SUBREG\n       && (GET_MODE_SIZE (GET_MODE (SUBREG_REG (operands[0]))) < UNITS_PER_WORD))\n     FAIL;\n+\n+  if (TARGET_POWERPC64 && GET_MODE (operands[1]) == DImode)\n+    emit_insn (gen_extzvdi (operands[0], operands[1], operands[2], operands[3]));\n+  else\n+    emit_insn (gen_extzvsi (operands[0], operands[1], operands[2], operands[3]));\n+  DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"extzvsi\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(zero_extract:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\")\n@@ -2749,7 +2761,7 @@\n   return \\\"{rlinm|rlwinm} %0,%1,%3,%s2,31\\\";\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*extzvsi_internal1\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n \t(compare:CC (zero_extract:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\")\n@@ -2786,7 +2798,7 @@\n }\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*extzvsi_internal2\"\n   [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x\")\n \t(compare:CC (zero_extract:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\")\n@@ -2814,11 +2826,11 @@\n }\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n-(define_insn \"\"\n+(define_insn \"extzvdi\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(zero_extract:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t (match_operand:DI 2 \"const_int_operand\" \"i\")\n-\t\t\t (match_operand:DI 3 \"const_int_operand\" \"i\")))]\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\")\n+\t\t\t (match_operand:SI 3 \"const_int_operand\" \"i\")))]\n   \"TARGET_POWERPC64\"\n   \"*\n {\n@@ -2833,11 +2845,11 @@\n   return \\\"rldicl %0,%1,%3,%2\\\";\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*extzvdi_internal1\"\n   [(set (match_operand:CC 0 \"gpc_reg_operand\" \"=x\")\n \t(compare:CC (zero_extract:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t (match_operand:DI 2 \"const_int_operand\" \"i\")\n-\t\t\t (match_operand:DI 3 \"const_int_operand\" \"i\"))\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\")\n+\t\t\t (match_operand:SI 3 \"const_int_operand\" \"i\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 4 \"=r\"))]\n   \"TARGET_POWERPC64\"\n@@ -2854,11 +2866,11 @@\n   return \\\"rldicl. %4,%1,%3,%2\\\";\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*extzvdi_internal2\"\n   [(set (match_operand:CC 4 \"gpc_reg_operand\" \"=x\")\n \t(compare:CC (zero_extract:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t (match_operand:DI 2 \"const_int_operand\" \"i\")\n-\t\t\t (match_operand:DI 3 \"const_int_operand\" \"i\"))\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\")\n+\t\t\t (match_operand:SI 3 \"const_int_operand\" \"i\"))\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(zero_extract:DI (match_dup 1) (match_dup 2) (match_dup 3)))]"}]}