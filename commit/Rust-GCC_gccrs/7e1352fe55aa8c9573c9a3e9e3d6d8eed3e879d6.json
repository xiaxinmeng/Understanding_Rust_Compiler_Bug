{"sha": "7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UxMzUyZmU1NWFhOGM5NTczYzlhM2U5ZTNkNmQ4ZWVkM2U4NzlkNg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-05-06T17:03:08Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-05-06T17:03:08Z"}, "message": "introduce {class,type}_of_this_parm functions\n\nintroduce {class,type}_of_this_parm functions\n\t* cp-tree.h (type_of_this_parm, class_of_this_parm): New functions.\n\t* call.c (standard_conversion): Call class_of_this_parm.\n\t* cxx-pretty-print.c (pp_cxx_implicit_parameter_type): Likewise.\n\t(pp_cxx_direct_abstract_declarator): Likewise.\n\t* decl2.c (change_return_type): Likewise.\n\t(cp_reconstruct_complex_type): Likewise.\n\t* error.c (dump_type_suffix, dump_function_decl): Likewise.\n\t* mangle.c (write_function_type): Likewise.\n\t* pt.c (unify): Likewise.\n\t* typeck.c (merge_types, type_memfn_quals): Likewise.\n\t* decl.c (build_this_parm): Call type_of_this_parm.\n\nFrom-SVN: r173496", "tree": {"sha": "0bea53352609d3a6f12f4add666223863889cc00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bea53352609d3a6f12f4add666223863889cc00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/comments", "author": null, "committer": null, "parents": [{"sha": "54cc9874fd081f49c678daa8dc97299e89d9a000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54cc9874fd081f49c678daa8dc97299e89d9a000", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54cc9874fd081f49c678daa8dc97299e89d9a000"}], "stats": {"total": 66, "additions": 47, "deletions": 19}, "files": [{"sha": "f19c0c1d1c796dc2bae13840401584c13b49ec6d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6", "patch": "@@ -1,3 +1,17 @@\n+2011-05-06  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* cp-tree.h (type_of_this_parm, class_of_this_parm): New functions.\n+\t* call.c (standard_conversion): Call class_of_this_parm.\n+\t* cxx-pretty-print.c (pp_cxx_implicit_parameter_type): Likewise.\n+\t(pp_cxx_direct_abstract_declarator): Likewise.\n+\t* decl2.c (change_return_type): Likewise.\n+\t(cp_reconstruct_complex_type): Likewise.\n+\t* error.c (dump_type_suffix, dump_function_decl): Likewise.\n+\t* mangle.c (write_function_type): Likewise.\n+\t* pt.c (unify): Likewise.\n+\t* typeck.c (merge_types, type_memfn_quals): Likewise.\n+\t* decl.c (build_this_parm): Call type_of_this_parm.\n+\n 2011-05-06  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/48838"}, {"sha": "3a71572b67dd2a066146186ad0894e74143097be", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6", "patch": "@@ -1146,8 +1146,8 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n     {\n       tree fromfn = TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE (from));\n       tree tofn = TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE (to));\n-      tree fbase = TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (fromfn)));\n-      tree tbase = TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (tofn)));\n+      tree fbase = class_of_this_parm (fromfn);\n+      tree tbase = class_of_this_parm (tofn);\n \n       if (!DERIVED_FROM_P (fbase, tbase)\n \t  || !same_type_p (TREE_TYPE (fromfn), TREE_TYPE (tofn))"}, {"sha": "ad298dfd57545abe25db58b264113e3cdb16328d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6", "patch": "@@ -4616,6 +4616,25 @@ struct GTY(()) tinst_level {\n   bool in_system_header_p;\n };\n \n+/* Return the type of the `this' parameter of FNTYPE.  */\n+\n+static inline tree\n+type_of_this_parm (const_tree fntype)\n+{\n+  function_args_iterator iter;\n+  gcc_assert (TREE_CODE (fntype) == METHOD_TYPE);\n+  function_args_iter_init (&iter, fntype);\n+  return function_args_iter_cond (&iter);\n+}\n+\n+/* Return the class of the `this' parameter of FNTYPE.  */\n+\n+static inline tree\n+class_of_this_parm (const_tree fntype)\n+{\n+  return TREE_TYPE (type_of_this_parm (fntype));\n+}\n+\n /* A parameter list indicating for a function with no parameters,\n    e.g  \"int f(void)\".  */\n extern cp_parameter_declarator *no_parameters;"}, {"sha": "04f8f7b2adf9ae6a9f0f380922a8649a862e5d18", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6", "patch": "@@ -1363,7 +1363,7 @@ pp_cxx_ptr_operator (cxx_pretty_printer *pp, tree t)\n static inline tree\n pp_cxx_implicit_parameter_type (tree mf)\n {\n-  return TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (mf))));\n+  return class_of_this_parm (TREE_TYPE (mf));\n }\n \n /*\n@@ -1652,8 +1652,7 @@ pp_cxx_direct_abstract_declarator (cxx_pretty_printer *pp, tree t)\n       if (TREE_CODE (t) == METHOD_TYPE)\n \t{\n \t  pp_base (pp)->padding = pp_before;\n-\t  pp_cxx_cv_qualifier_seq\n-\t    (pp, TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (t))));\n+\t  pp_cxx_cv_qualifier_seq (pp, class_of_this_parm (t));\n \t}\n       pp_cxx_exception_specification (pp, t);\n       break;"}, {"sha": "e766503b82039e916525c7e1d50fffe723f4d417", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6", "patch": "@@ -6924,7 +6924,7 @@ build_this_parm (tree type, cp_cv_quals quals)\n   tree parm;\n   cp_cv_quals this_quals;\n \n-  this_type = TREE_VALUE (TYPE_ARG_TYPES (type));\n+  this_type = type_of_this_parm (type);\n   /* The `this' parameter is implicitly `const'; it cannot be\n      assigned to.  */\n   this_quals = (quals & TYPE_QUAL_RESTRICT) | TYPE_QUAL_CONST;"}, {"sha": "2e08dd730d92bc5bc5aa9c8899837ed74b4111e9", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6", "patch": "@@ -161,8 +161,7 @@ change_return_type (tree new_ret, tree fntype)\n     }\n   else\n     newtype = build_method_type_directly\n-      (TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (fntype))),\n-       new_ret, TREE_CHAIN (args));\n+      (class_of_this_parm (fntype), new_ret, TREE_CHAIN (args));\n   if (raises)\n     newtype = build_exception_variant (newtype, raises);\n   if (attrs)\n@@ -1249,8 +1248,7 @@ cp_reconstruct_complex_type (tree type, tree bottom)\n \t so we must compensate by getting rid of it.  */\n       outer\n \t= build_method_type_directly\n-\t    (TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (type))),\n-\t     inner,\n+\t    (class_of_this_parm (type), inner,\n \t     TREE_CHAIN (TYPE_ARG_TYPES (type)));\n     }\n   else if (TREE_CODE (type) == OFFSET_TYPE)"}, {"sha": "e580fd92158df4bf180cfbbcdc663015a8f9cf8c", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6", "patch": "@@ -794,8 +794,7 @@ dump_type_suffix (tree t, int flags)\n \tdump_parameters (arg, flags & ~TFF_FUNCTION_DEFAULT_ARGUMENTS);\n \n \tif (TREE_CODE (t) == METHOD_TYPE)\n-\t  pp_cxx_cv_qualifier_seq\n-\t    (cxx_pp, TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (t))));\n+\t  pp_cxx_cv_qualifier_seq (cxx_pp, class_of_this_parm (t));\n \telse\n \t  pp_cxx_cv_qualifier_seq (cxx_pp, t);\n \tdump_exception_spec (TYPE_RAISES_EXCEPTIONS (t), flags);\n@@ -1360,8 +1359,7 @@ dump_function_decl (tree t, int flags)\n       if (TREE_CODE (fntype) == METHOD_TYPE)\n \t{\n \t  pp_base (cxx_pp)->padding = pp_before;\n-\t  pp_cxx_cv_qualifier_seq\n-\t    (cxx_pp, TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (fntype))));\n+\t  pp_cxx_cv_qualifier_seq (cxx_pp, class_of_this_parm (fntype));\n \t}\n \n       if (flags & TFF_EXCEPTION_SPECIFICATION)"}, {"sha": "c72e6d2fc64af7ae8419fc37d69ab8a36ba3ec2c", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6", "patch": "@@ -2247,7 +2247,7 @@ write_function_type (const tree type)\n     {\n       /* The first parameter must be a POINTER_TYPE pointing to the\n \t `this' parameter.  */\n-      tree this_type = TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (type)));\n+      tree this_type = class_of_this_parm (type);\n       write_CV_qualifiers_for_type (this_type);\n     }\n "}, {"sha": "76fc69bc0efd905e6a4bfdfa7e950971314805ac", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6", "patch": "@@ -15600,8 +15600,8 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n \tif (TREE_CODE (parm) == METHOD_TYPE\n \t    && (!check_cv_quals_for_unify\n \t\t(UNIFY_ALLOW_NONE,\n-\t\t TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (arg))),\n-\t\t TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (parm))))))\n+\t\t class_of_this_parm (arg),\n+\t\t class_of_this_parm (parm))))\n \t  return 1;\n \n \tif (unify (tparms, targs, TREE_TYPE (parm),"}, {"sha": "4d0c0d7b06befc2dbc9f5dc4db61ff32a1d4e7f2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7e1352fe55aa8c9573c9a3e9e3d6d8eed3e879d6", "patch": "@@ -834,7 +834,7 @@ merge_types (tree t1, tree t2)\n       {\n \t/* Get this value the long way, since TYPE_METHOD_BASETYPE\n \t   is just the main variant of this.  */\n-\ttree basetype = TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (t2)));\n+\ttree basetype = class_of_this_parm (t2);\n \ttree raises = merge_exception_specifiers (TYPE_RAISES_EXCEPTIONS (t1),\n \t\t\t\t\t\t  TYPE_RAISES_EXCEPTIONS (t2));\n \ttree t3;\n@@ -8034,7 +8034,7 @@ type_memfn_quals (const_tree type)\n   if (TREE_CODE (type) == FUNCTION_TYPE)\n     return TYPE_QUALS (type);\n   else if (TREE_CODE (type) == METHOD_TYPE)\n-    return cp_type_quals (TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (type))));\n+    return cp_type_quals (class_of_this_parm (type));\n   else\n     gcc_unreachable ();\n }"}]}