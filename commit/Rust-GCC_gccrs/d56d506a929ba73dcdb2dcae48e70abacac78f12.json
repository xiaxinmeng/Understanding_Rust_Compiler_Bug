{"sha": "d56d506a929ba73dcdb2dcae48e70abacac78f12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU2ZDUwNmE5MjliYTczZGNkYjJkY2FlNDhlNzBhYmFjYWM3OGYxMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-28T01:10:25Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-28T01:10:25Z"}, "message": "New anonymous patterns to combine insert with arbitrary ashift, ashiftrt,\n\nlshiftrt, or zero_extract.  (Based on patch from John Brooks <jbrooks@ea.com>.)\n(ashlsi3): Remove extraneous operand processing.\n\nFrom-SVN: r9523", "tree": {"sha": "c0160e00997a14825381eacee20770cd11c11f45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0160e00997a14825381eacee20770cd11c11f45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d56d506a929ba73dcdb2dcae48e70abacac78f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d56d506a929ba73dcdb2dcae48e70abacac78f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d56d506a929ba73dcdb2dcae48e70abacac78f12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d56d506a929ba73dcdb2dcae48e70abacac78f12/comments", "author": null, "committer": null, "parents": [{"sha": "6eaba4a70ab626984e95bc390e343fb4f387b281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eaba4a70ab626984e95bc390e343fb4f387b281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eaba4a70ab626984e95bc390e343fb4f387b281"}], "stats": {"total": 86, "additions": 83, "deletions": 3}, "files": [{"sha": "a7c28a482ffb4ec6da789dc7aebb12368e4986c8", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 83, "deletions": 3, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56d506a929ba73dcdb2dcae48e70abacac78f12/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56d506a929ba73dcdb2dcae48e70abacac78f12/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=d56d506a929ba73dcdb2dcae48e70abacac78f12", "patch": "@@ -1935,6 +1935,82 @@\n   return \\\"{rlimi|rlwimi} %0,%3,%4,%h2,%h1\\\";\n }\")\n \n+(define_insn \"\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"gpc_reg_operand\" \"+r\")\n+\t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\"))\n+\t(ashift:SI (match_operand:SI 3 \"gpc_reg_operand\" \"r\")\n+\t\t   (match_operand:SI 4 \"const_int_operand\" \"i\")))]\n+  \"\"\n+  \"*\n+{\n+  int shift = INTVAL (operands[4]) & 31;\n+  int start = INTVAL (operands[2]) & 31;\n+  int size = INTVAL (operands[1]) & 31;\n+\n+  operands[4] = gen_rtx (CONST_INT, VOIDmode, (shift - start - size) & 31);\n+  operands[1] = gen_rtx (CONST_INT, VOIDmode, start + size - 1);\n+  return \\\"{rlimi|rlwimi} %0,%3,%4,%h2,%h1\\\";\n+}\")\n+\n+(define_insn \"\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"gpc_reg_operand\" \"+r\")\n+\t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\"))\n+\t(ashiftrt:SI (match_operand:SI 3 \"gpc_reg_operand\" \"r\")\n+\t\t     (match_operand:SI 4 \"const_int_operand\" \"i\")))]\n+  \"\"\n+  \"*\n+{\n+  int shift = INTVAL (operands[4]) & 31;\n+  int start = INTVAL (operands[2]) & 31;\n+  int size = INTVAL (operands[1]) & 31;\n+\n+  operands[4] = gen_rtx (CONST_INT, VOIDmode, (32 - shift - start - size) & 31);\n+  operands[1] = gen_rtx (CONST_INT, VOIDmode, start + size - 1);\n+  return \\\"{rlimi|rlwimi} %0,%3,%4,%h2,%h1\\\";\n+}\")\n+\n+(define_insn \"\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"gpc_reg_operand\" \"+r\")\n+\t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\"))\n+\t(lshiftrt:SI (match_operand:SI 3 \"gpc_reg_operand\" \"r\")\n+\t\t     (match_operand:SI 4 \"const_int_operand\" \"i\")))]\n+  \"\"\n+  \"*\n+{\n+  int shift = INTVAL (operands[4]) & 31;\n+  int start = INTVAL (operands[2]) & 31;\n+  int size = INTVAL (operands[1]) & 31;\n+\n+  operands[4] = gen_rtx (CONST_INT, VOIDmode, (32 - shift - start - size) & 31);\n+  operands[1] = gen_rtx (CONST_INT, VOIDmode, start + size - 1);\n+  return \\\"{rlimi|rlwimi} %0,%3,%4,%h2,%h1\\\";\n+}\")\n+\n+(define_insn \"\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"gpc_reg_operand\" \"+r\")\n+\t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\"))\n+\t(zero_extract:SI (match_operand:SI 3 \"gpc_reg_operand\" \"r\")\n+\t\t\t (match_operand:SI 4 \"const_int_operand\" \"i\")\n+\t\t\t (match_operand:SI 5 \"const_int_operand\" \"i\")))]\n+  \"INTVAL (operands[4]) >= INTVAL (operands[1])\"\n+  \"*\n+{\n+  int extract_start = INTVAL (operands[5]) & 31;\n+  int extract_size = INTVAL (operands[4]) & 31;\n+  int insert_start = INTVAL (operands[2]) & 31;\n+  int insert_size = INTVAL (operands[1]) & 31;\n+\n+/* Align extract field with insert field */\n+  operands[5] = gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t (extract_start + extract_size - insert_start - insert_size) & 31);\n+  operands[1] = gen_rtx (CONST_INT, VOIDmode, insert_start + insert_size - 1);\n+  return \\\"{rlimi|rlwimi} %0,%3,%5,%h2,%h1\\\";\n+}\")\n+\n (define_insn \"extzv\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(zero_extract:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n@@ -2238,7 +2314,7 @@\n \t\t\t   (match_operand:SI 2 \"const_int_operand\" \"i\"))\n \t\t(match_operand:SI 3 \"mask_operand\" \"L\")))]\n   \"includes_lshift_p (operands[2], operands[3])\"\n-  \"{rlinm|rlwinm} %0,%h1,%h2,%m3,%M3\")\n+  \"{rlinm|rlwinm} %0,%1,%h2,%m3,%M3\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n@@ -2249,7 +2325,7 @@\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=r\"))]\n   \"includes_lshift_p (operands[2], operands[3])\"\n-  \"{rlinm.|rlwinm.} %4,%h1,%h2,%m3,%M3\"\n+  \"{rlinm.|rlwinm.} %4,%1,%h2,%m3,%M3\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n (define_insn \"\"\n@@ -2262,7 +2338,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(and:SI (ashift:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n   \"includes_lshift_p (operands[2], operands[3])\"\n-  \"{rlinm.|rlwinm.} %0,%h1,%h2,%m3,%M3\"\n+  \"{rlinm.|rlwinm.} %0,%1,%h2,%m3,%M3\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n ;; The AIX assembler mis-handles \"sri x,x,0\", so write that case as\n@@ -2928,6 +3004,7 @@\n     }\n   DONE;\n }\")\n+\n (define_insn \"fselsfsf4\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(if_then_else:SF (ge (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n@@ -2947,6 +3024,7 @@\n   \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n   \"fsel %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n+\n (define_insn \"negdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n@@ -3173,6 +3251,7 @@\n     }\n   DONE;\n }\")\n+\n (define_insn \"fseldfdf4\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(if_then_else:DF (ge (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n@@ -3182,6 +3261,7 @@\n   \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n   \"fsel %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n+\n (define_insn \"fselsfdf4\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(if_then_else:DF (ge (match_operand:SF 1 \"gpc_reg_operand\" \"f\")"}]}