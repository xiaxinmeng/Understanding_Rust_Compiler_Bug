{"sha": "325714b4968050c927fe72f4a4ba860da2bf4ee2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI1NzE0YjQ5NjgwNTBjOTI3ZmU3MmY0YTRiYTg2MGRhMmJmNGVlMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-05T08:37:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-05T08:37:25Z"}, "message": "openmp: Use more efficient logical -> actual computation even if # iterations is computed at runtime\n\nFor triangular loops use more efficient logical iteration number\nto actual iterator values computation even for non-rectangular loops\nwhere number of loop iterations could not be computed at compile time.\n\n2020-08-05  Jakub Jelinek  <jakub@redhat.com>\n\n\t* omp-expand.c (expand_omp_for_init_counts): Remember\n\tfirst_inner_iterations, factor and n1o from the number of iterations\n\tcomputation in *fd.\n\t(expand_omp_for_init_vars): Use more efficient logical iteration number\n\tto actual iterator values computation even for non-rectangular loops\n\twhere number of loop iterations could not be computed at compile time.", "tree": {"sha": "8d37302a45c3750e4ced2fc50b0fb164e48bcd4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d37302a45c3750e4ced2fc50b0fb164e48bcd4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/325714b4968050c927fe72f4a4ba860da2bf4ee2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/325714b4968050c927fe72f4a4ba860da2bf4ee2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/325714b4968050c927fe72f4a4ba860da2bf4ee2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/325714b4968050c927fe72f4a4ba860da2bf4ee2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5998f1bbeb336d0b9aee86726291269fd8bb6a66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5998f1bbeb336d0b9aee86726291269fd8bb6a66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5998f1bbeb336d0b9aee86726291269fd8bb6a66"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "048aacf7188ab2044465d095fcf39263c531af71", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/325714b4968050c927fe72f4a4ba860da2bf4ee2/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/325714b4968050c927fe72f4a4ba860da2bf4ee2/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=325714b4968050c927fe72f4a4ba860da2bf4ee2", "patch": "@@ -2181,6 +2181,13 @@ expand_omp_for_init_counts (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t  set_immediate_dominator (CDI_DOMINATORS, bb3, bb1);\n \t  set_immediate_dominator (CDI_DOMINATORS, bb5, bb2);\n \t  set_immediate_dominator (CDI_DOMINATORS, entry_bb, bb1);\n+\n+\t  if (fd->first_nonrect + 1 == fd->last_nonrect)\n+\t    {\n+\t      fd->first_inner_iterations = first_inner_iterations;\n+\t      fd->factor = factor;\n+\t      fd->adjn1 = n1o;\n+\t    }\n \t}\n       else\n \t{\n@@ -2469,8 +2476,11 @@ expand_omp_for_init_vars (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t\t\t\t   build_zero_cst (type), true);\n \t  basic_block bb_triang = NULL, bb_triang_dom = NULL;\n \t  if (fd->first_nonrect + 1 == fd->last_nonrect\n-\t      /* For now.  */\n-\t      && TREE_CODE (fd->loop.n2) == INTEGER_CST\n+\t      && (TREE_CODE (fd->loop.n2) == INTEGER_CST\n+\t\t  || (fd->first_inner_iterations\n+\t\t      /* For now.  Later add clauses to propagate the\n+\t\t\t values.  */\n+\t\t      && !gimple_omp_for_combined_into_p (fd->for_stmt)))\n \t      && (optab_handler (sqrt_optab, TYPE_MODE (double_type_node))\n \t\t  != CODE_FOR_nothing))\n \t    {\n@@ -2567,14 +2577,19 @@ expand_omp_for_init_vars (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t\t\t       build_one_cst (ulltype));\n \t      t = fold_build2 (MULT_EXPR, ulltype, c, t);\n \t      t = fold_build2 (RSHIFT_EXPR, ulltype, t, integer_one_node);\n-\t      t = fold_build2 (MULT_EXPR, ulltype, fd->factor, t);\n-\t      tree t2 = fold_build2 (MULT_EXPR, ulltype, c,\n-\t\t\t\t     fd->first_inner_iterations);\n+\t      t = fold_build2 (MULT_EXPR, ulltype,\n+\t\t\t       fold_convert (ulltype, fd->factor), t);\n+\t      tree t2\n+\t\t= fold_build2 (MULT_EXPR, ulltype, c,\n+\t\t\t       fold_convert (ulltype,\n+\t\t\t\t\t     fd->first_inner_iterations));\n \t      t = fold_build2 (PLUS_EXPR, ulltype, t, t2);\n \t      expand_omp_build_assign (gsi, d, t, true);\n-\t      t = fold_build2 (MULT_EXPR, ulltype, fd->factor, c);\n+\t      t = fold_build2 (MULT_EXPR, ulltype,\n+\t\t\t       fold_convert (ulltype, fd->factor), c);\n \t      t = fold_build2 (PLUS_EXPR, ulltype,\n-\t\t\t       t, fd->first_inner_iterations);\n+\t\t\t       t, fold_convert (ulltype,\n+\t\t\t\t\t\tfd->first_inner_iterations));\n \t      t2 = force_gimple_operand_gsi (gsi, t, true, NULL_TREE, false,\n \t\t\t\t\t     GSI_CONTINUE_LINKING);\n \t      cond_stmt = gimple_build_cond (GE_EXPR, stopvalull, d,"}]}