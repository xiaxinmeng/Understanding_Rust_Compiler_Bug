{"sha": "b807e627309cb88537a127946c22abf31d358c51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgwN2U2MjczMDljYjg4NTM3YTEyNzk0NmMyMmFiZjMxZDM1OGM1MQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-06-24T13:27:44Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-06-24T13:27:44Z"}, "message": "re PR tree-optimization/49516 (SRA generates memory references into its replacements)\n\n2011-06-24  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimizations/49516\n\t* tree-sra.c (sra_modify_assign): Choose the safe path for\n\taggregate copies if we also did scalar replacements.\n\n\t* testsuite/g++.dg/tree-ssa/pr49516.C: New test.\n\nFrom-SVN: r175376", "tree": {"sha": "7d48077753de000e288a642bfe486a7fc7894a5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d48077753de000e288a642bfe486a7fc7894a5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b807e627309cb88537a127946c22abf31d358c51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b807e627309cb88537a127946c22abf31d358c51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b807e627309cb88537a127946c22abf31d358c51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b807e627309cb88537a127946c22abf31d358c51/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a1ea4b90728c19a0141fd9b6ab44a3c5ded5a7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1ea4b90728c19a0141fd9b6ab44a3c5ded5a7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a1ea4b90728c19a0141fd9b6ab44a3c5ded5a7c"}], "stats": {"total": 100, "additions": 99, "deletions": 1}, "files": [{"sha": "fa88db30b284047a7f68711105d8426a30bfb597", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b807e627309cb88537a127946c22abf31d358c51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b807e627309cb88537a127946c22abf31d358c51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b807e627309cb88537a127946c22abf31d358c51", "patch": "@@ -1,3 +1,9 @@\n+2011-06-24  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimizations/49516\n+\t* tree-sra.c (sra_modify_assign): Choose the safe path for\n+\taggregate copies if we also did scalar replacements.\n+\n 2011-06-24  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n \tPR target/49335"}, {"sha": "c0f297671dafb7add170ab6b930298af0aa09b87", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b807e627309cb88537a127946c22abf31d358c51/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b807e627309cb88537a127946c22abf31d358c51/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b807e627309cb88537a127946c22abf31d358c51", "patch": "@@ -1,3 +1,8 @@\n+2011-06-24  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimizations/49516\n+\t* g++.dg/tree-ssa/pr49516.C: New test.\n+\n 2011-06-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/35255"}, {"sha": "2c6fd0496fc851946276460251bcead28145a981", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr49516.C", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b807e627309cb88537a127946c22abf31d358c51/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr49516.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b807e627309cb88537a127946c22abf31d358c51/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr49516.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr49516.C?ref=b807e627309cb88537a127946c22abf31d358c51", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern \"C\" void abort (void);\n+\n+typedef int int32;\n+typedef unsigned int uint32;\n+typedef unsigned long long uint64;\n+typedef short int16;\n+\n+class Tp {\n+ public:\n+  Tp(int, const int segment, const int index) __attribute__((noinline));\n+\n+  inline bool operator==(const Tp& other) const;\n+  inline bool operator!=(const Tp& other) const;\n+  int GetType() const { return type_; }\n+  int GetSegment() const { return segment_; }\n+  int GetIndex() const { return index_; }\n+ private:\n+  inline static bool IsValidSegment(const int segment);\n+  static const int kSegmentBits = 28;\n+  static const int kTypeBits = 4;\n+  static const int kMaxSegment = (1 << kSegmentBits) - 1;\n+\n+  union {\n+\n+    struct {\n+      int32 index_;\n+      uint32 segment_ : kSegmentBits;\n+      uint32 type_ : kTypeBits;\n+    };\n+    struct {\n+      int32 dummy_;\n+      uint32 type_and_segment_;\n+    };\n+    uint64 value_;\n+  };\n+};\n+\n+Tp::Tp(int t, const int segment, const int index)\n+ : index_(index), segment_(segment), type_(t) {}\n+\n+inline bool Tp::operator==(const Tp& other) const {\n+  return value_ == other.value_;\n+}\n+inline bool Tp::operator!=(const Tp& other) const {\n+  return value_ != other.value_;\n+}\n+\n+class Range {\n+ public:\n+  inline Range(const Tp& position, const int count) __attribute__((always_inline));\n+  inline Tp GetBeginTokenPosition() const;\n+  inline Tp GetEndTokenPosition() const;\n+ private:\n+  Tp position_;\n+  int count_;\n+  int16 begin_index_;\n+  int16 end_index_;\n+};\n+\n+inline Range::Range(const Tp& position,\n+                    const int count)\n+    : position_(position), count_(count), begin_index_(0), end_index_(0)\n+    { }\n+\n+inline Tp Range::GetBeginTokenPosition() const {\n+  return position_;\n+}\n+inline Tp Range::GetEndTokenPosition() const {\n+  return Tp(position_.GetType(), position_.GetSegment(),\n+            position_.GetIndex() + count_);\n+}\n+\n+int main ()\n+{\n+  Range range(Tp(0, 0, 3), 0);\n+  if (!(range.GetBeginTokenPosition() == Tp(0, 0, 3)))\n+    abort ();\n+\n+  if (!(range.GetEndTokenPosition() == Tp(0, 0, 3)))\n+    abort();\n+\n+  return 0;\n+}"}, {"sha": "45ebd93698d37c15420bc1f9ea943818a54840a4", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b807e627309cb88537a127946c22abf31d358c51/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b807e627309cb88537a127946c22abf31d358c51/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=b807e627309cb88537a127946c22abf31d358c51", "patch": "@@ -2876,7 +2876,8 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n      there to do the copying and then load the scalar replacements of the LHS.\n      This is what the first branch does.  */\n \n-  if (gimple_has_volatile_ops (*stmt)\n+  if (modify_this_stmt\n+      || gimple_has_volatile_ops (*stmt)\n       || contains_vce_or_bfcref_p (rhs)\n       || contains_vce_or_bfcref_p (lhs))\n     {"}]}