{"sha": "ba412630aefc6423cb7c80fd28356df3abad2e11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE0MTI2MzBhZWZjNjQyM2NiN2M4MGZkMjgzNTZkZjNhYmFkMmUxMQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-07-23T21:46:38Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-07-23T21:46:38Z"}, "message": "h8300-protos.h: Add a prototype for general_operand_dst_push.\n\n\t* config/h8300/h8300-protos.h: Add a prototype for\n\tgeneral_operand_dst_push.\n \t* config/h8300/h8300.c (general_operand_dst_push): New.\n\t* config/h8300/h8300.h (OK_FOR_T): New.\n\t(EXTRA_CONSTRAINT): Use it.\n\t* config/h8300/h8300.md (movqi_push): Remove and integrate into\n\tthe existing movqi pattern.\n\t(movhi_push): Likewise.\n\nFrom-SVN: r44283", "tree": {"sha": "7803b7aee892d96d91f8ba8e18b6c54ee9009aba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7803b7aee892d96d91f8ba8e18b6c54ee9009aba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba412630aefc6423cb7c80fd28356df3abad2e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba412630aefc6423cb7c80fd28356df3abad2e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba412630aefc6423cb7c80fd28356df3abad2e11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba412630aefc6423cb7c80fd28356df3abad2e11/comments", "author": null, "committer": null, "parents": [{"sha": "21715220d56bca6f7137059bf0dc3dda76d4249c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21715220d56bca6f7137059bf0dc3dda76d4249c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21715220d56bca6f7137059bf0dc3dda76d4249c"}], "stats": {"total": 136, "additions": 87, "deletions": 49}, "files": [{"sha": "74573a4202d1d2ef6adfc2e5ba3c0b6a25ef1142", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba412630aefc6423cb7c80fd28356df3abad2e11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba412630aefc6423cb7c80fd28356df3abad2e11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba412630aefc6423cb7c80fd28356df3abad2e11", "patch": "@@ -1,3 +1,14 @@\n+2001-07-23  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/h8300/h8300-protos.h: Add a prototype for\n+\tgeneral_operand_dst_push.\n+ \t* config/h8300/h8300.c (general_operand_dst_push): New.\n+\t* config/h8300/h8300.h (OK_FOR_T): New.\n+\t(EXTRA_CONSTRAINT): Use it.\n+\t* config/h8300/h8300.md (movqi_push): Remove and integrate into\n+\tthe existing movqi pattern.\n+\t(movhi_push): Likewise.\n+\n Mon Jul 23 23:34:07 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* gcse.c (cprop_insn): Update call of cprop_cc0_jump."}, {"sha": "4841d07e2d19a9feae9d3dba54b640cecd0c1cac", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba412630aefc6423cb7c80fd28356df3abad2e11/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba412630aefc6423cb7c80fd28356df3abad2e11/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=ba412630aefc6423cb7c80fd28356df3abad2e11", "patch": "@@ -45,6 +45,7 @@ extern void split_adds_subs PARAMS ((enum machine_mode, rtx[]));\n \n extern int general_operand_src PARAMS ((rtx, enum machine_mode));\n extern int general_operand_dst PARAMS ((rtx, enum machine_mode));\n+extern int general_operand_dst_push PARAMS ((rtx, enum machine_mode mode));\n extern int o_operand PARAMS ((rtx, enum machine_mode));\n extern int p_operand PARAMS ((rtx, enum machine_mode));\n extern int call_insn_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "46282086de7e28c5bdf6e8569cd332a4d063936c", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba412630aefc6423cb7c80fd28356df3abad2e11/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba412630aefc6423cb7c80fd28356df3abad2e11/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=ba412630aefc6423cb7c80fd28356df3abad2e11", "patch": "@@ -537,7 +537,7 @@ general_operand_src (op, mode)\n }\n \n /* Return true if OP is a valid destination operand for an integer move\n-   instruction.  */\n+   instruction, excluding those involving pre_modify.  */\n \n int\n general_operand_dst (op, mode)\n@@ -549,6 +549,20 @@ general_operand_dst (op, mode)\n   return general_operand (op, mode);\n }\n \n+/* Return true if OP is a valid destination operand for an integer move\n+   instruction, including those involving pre_modify.  */\n+\n+int\n+general_operand_dst_push (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (push_operand (op, mode))\n+    return 1;\n+\n+  return general_operand_dst (op, mode);\n+}\n+\n /* Return true if OP is a const valid for a bit clear instruction.  */\n \n int"}, {"sha": "9df9fa8b48674cd97ab8f19ae2266f9657bcab0d", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba412630aefc6423cb7c80fd28356df3abad2e11/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba412630aefc6423cb7c80fd28356df3abad2e11/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=ba412630aefc6423cb7c80fd28356df3abad2e11", "patch": "@@ -840,7 +840,17 @@ struct cum_arg\n   (GET_CODE (X) == CONST_INT && TARGET_H8300H\t\t\\\n    && 0xffff00 <= INTVAL (X) && INTVAL (X) <= 0xffffff)\n \n-/* 'U' if valid for a bset destination;\n+/* 'T' if valid for a push destination using pre_modify.  */\n+#define OK_FOR_T(OP)\t\t\t\t\t\t\t      \\\n+  (GET_CODE (OP) == MEM\t\t\t\t\t\t\t      \\\n+   && GET_CODE (XEXP (OP, 0)) == PRE_MODIFY\t\t\t\t      \\\n+   && GET_CODE (XEXP (XEXP (OP, 0), 1)) == PLUS\t\t\t\t      \\\n+   && XEXP (XEXP (XEXP (OP, 0), 1), 0) == XEXP (XEXP (OP, 0), 0)\t      \\\n+   && GET_CODE (XEXP (XEXP (XEXP (OP, 0), 1), 1)) == CONST_INT\t\t      \\\n+   && INTVAL (XEXP (XEXP (XEXP (OP, 0), 1), 1)) == - (int) STACK_BOUNDARY / 8 \\\n+   && XEXP (XEXP (OP, 0), 0) == stack_pointer_rtx)\n+\n+ /* 'U' if valid for a bset destination;\n    i.e. a register, register indirect, or the eightbit memory region\n    (a SYMBOL_REF with an SYMBOL_REF_FLAG set).\n \n@@ -862,7 +872,8 @@ struct cum_arg\n        && GET_CODE (XEXP (OP, 0)) == CONST_INT))\n \n #define EXTRA_CONSTRAINT(OP, C)\t\t\t\\\n-  ((C) == 'U' ? OK_FOR_U (OP) :\t\t\t\\\n+  ((C) == 'T' ? OK_FOR_T (OP) :\t\t\t\\\n+   (C) == 'U' ? OK_FOR_U (OP) :\t\t\t\\\n    0)\n \f\n /* GO_IF_LEGITIMATE_ADDRESS recognizes an RTL expression"}, {"sha": "ed52811807d6bc8b64def5649c186a0be49f912a", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 47, "deletions": 46, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba412630aefc6423cb7c80fd28356df3abad2e11/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba412630aefc6423cb7c80fd28356df3abad2e11/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=ba412630aefc6423cb7c80fd28356df3abad2e11", "patch": "@@ -106,40 +106,42 @@\n \n ;; movqi\n \n-(define_insn \"movqi_push\"\n-  [(set (match_operand:QI 0 \"push_operand\" \"=<\")\n-\t(match_operand:QI 1 \"register_operand\" \"r\"))]\n-  \"\"\n-  \"*\n-{\n-  if (TARGET_H8300)\n-    return \\\"push.w\t%T1\\\";\n-  else\n-    return \\\"push.l\t%S1\\\";\n-}\"\n-  [(set (attr \"length\") (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 2) (const_int 4)))\n-   (set_attr \"cc\" \"set_znv\")])\n+(define_insn \"\"\n+  [(set (match_operand:QI 0 \"general_operand_dst_push\" \"=r,r ,<,T,r,r,m\")\n+\t(match_operand:QI 1 \"general_operand_src\"      \" I,r>,r,r,n,m,r\"))]\n+  \"TARGET_H8300\n+   && (register_operand (operands[0],QImode)\n+       || register_operand (operands[1], QImode))\"\n+  \"@\n+   sub.b\t%X0,%X0\n+   mov.b\t%R1,%X0\n+   mov.b\t%X1,%R0\n+   mov.w\t%T1,@-r7\n+   mov.b\t%R1,%X0\n+   mov.b\t%R1,%X0\n+   mov.b\t%X1,%R0\"\n+  [(set_attr \"length\" \"2,2,2,2,2,4,4\")\n+   (set_attr \"cc\" \"set_zn,set_znv,set_znv,clobber,set_znv,set_znv,set_znv\")])\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand_dst\" \"=r,r,<,r,r,m\")\n-\t(match_operand:QI 1 \"general_operand_src\" \"I,r>,r,n,m,r\"))]\n-  \"register_operand (operands[0],QImode)\n-   || register_operand (operands[1], QImode)\"\n+  [(set (match_operand:QI 0 \"general_operand_dst_push\" \"=r,r ,<,r,T,r,m\")\n+\t(match_operand:QI 1 \"general_operand_src\"      \" I,r>,r,n,r,m,r\"))]\n+  \"(TARGET_H8300H || TARGET_H8300S)\n+   && (register_operand (operands[0],QImode)\n+       || register_operand (operands[1], QImode))\"\n   \"@\n    sub.b\t%X0,%X0\n    mov.b\t%R1,%X0\n    mov.b\t%X1,%R0\n    mov.b\t%R1,%X0\n+   mov.l\t%S1,@-er7\n    mov.b\t%R1,%X0\n    mov.b\t%X1,%R0\"\n-  [(set_attr_alternative \"length\"\n-     [(const_int 2) (const_int 2) (const_int 2) (const_int 2)\n-      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))\n-      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n-   (set_attr \"cc\" \"set_zn,set_znv,set_znv,set_znv,set_znv,set_znv\")])\n+  [(set_attr \"length\" \"2,2,2,2,4,8,8\")\n+   (set_attr \"cc\" \"set_zn,set_znv,set_znv,clobber,set_znv,set_znv,set_znv\")])\n \n (define_expand \"movqi\"\n-  [(set (match_operand:QI 0 \"general_operand_dst\" \"\")\n+  [(set (match_operand:QI 0 \"general_operand_dst_push\" \"\")\n \t(match_operand:QI 1 \"general_operand_src\" \"\"))]\n   \"\"\n   \"\n@@ -168,42 +170,41 @@\n \n ;; movhi\n \n-;; ??? We use push.l on the h8300h to push a 16bit value?!?  We have\n-;; 16bit push insns!\n-(define_insn \"movhi_push\"\n-  [(set (match_operand:HI 0 \"push_operand\" \"=<\")\n-\t(match_operand:HI 1 \"register_operand\" \"r\"))]\n-  \"\"\n-  \"*\n-{\n-  if (TARGET_H8300)\n-    return \\\"push.w\t%T1\\\";\n-  else\n-    return \\\"push.l\t%S1\\\";\n-}\"\n-  [(set (attr \"length\") (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 2) (const_int 4)))\n-   (set_attr \"cc\" \"set_znv\")])\n-\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"general_operand_dst\" \"=r,r,<,r,r,m\")\n \t(match_operand:HI 1 \"general_operand_src\" \"I,r>,r,i,m,r\"))]\n-  \"register_operand (operands[0],HImode)\n-   || register_operand (operands[1], HImode)\"\n+  \"TARGET_H8300\n+   && (register_operand (operands[0],HImode)\n+       || register_operand (operands[1], HImode))\"\n   \"@\n    sub.w\t%T0,%T0\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\"\n-  [(set_attr_alternative \"length\"\n-     [(const_int 2) (const_int 2) (const_int 2) (const_int 4)\n-      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))\n-      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n+  [(set_attr \"length\" \"2,2,2,4,4,4\")\n    (set_attr \"cc\" \"set_zn,set_znv,set_znv,set_znv,set_znv,set_znv\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"general_operand_dst_push\" \"=r,r,<,T,r,r,m\")\n+\t(match_operand:HI 1 \"general_operand_src\" \"I,r>,r,r,i,m,r\"))]\n+  \"(TARGET_H8300H || TARGET_H8300S)\n+   && (register_operand (operands[0],HImode)\n+       || register_operand (operands[1], HImode))\"\n+  \"@\n+   sub.w\t%T0,%T0\n+   mov.w\t%T1,%T0\n+   mov.w\t%T1,%T0\n+   mov.l\t%S1,@-er7\n+   mov.w\t%T1,%T0\n+   mov.w\t%T1,%T0\n+   mov.w\t%T1,%T0\"\n+  [(set_attr \"length\" \"2,2,2,4,4,8,8\")\n+   (set_attr \"cc\" \"set_zn,set_znv,set_znv,clobber,set_znv,set_znv,set_znv\")])\n+\n (define_expand \"movhi\"\n-  [(set (match_operand:HI 0 \"general_operand_dst\" \"\")\n+  [(set (match_operand:HI 0 \"general_operand_dst_push\" \"\")\n \t(match_operand:HI 1 \"general_operand_src\" \"\"))]\n   \"\"\n   \""}]}