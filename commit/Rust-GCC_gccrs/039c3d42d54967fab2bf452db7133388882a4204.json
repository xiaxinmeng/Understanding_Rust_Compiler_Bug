{"sha": "039c3d42d54967fab2bf452db7133388882a4204", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM5YzNkNDJkNTQ5NjdmYWIyYmY0NTJkYjcxMzMzODg4ODJhNDIwNA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-09-03T20:57:31Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-09-03T20:57:31Z"}, "message": "toplev.c (flag_rounding_math): New global variable.\n\n\n\t* toplev.c (flag_rounding_math): New global variable.\n\t(f_options): Add to the list of language independent options.\n\t* flags.h (flag_rounding_math): Prototype here.\n\t(HONOR_SIGN_DEPENDENT_ROUNDING): Use flag_rounding_math instead.\n\t* common.opt (frounding-math): New common command line option.\n\t* opts.c (common_handle_option): Handle OPT_frounding_math.\n\t(set_fast_math_flags): -ffast-math clears flag_rounding_math.\n\n\t* doc/invoke.texi: Document this new command line option.\n\nFrom-SVN: r71032", "tree": {"sha": "da5fba2f01a46c7f97234721542e808b855bd505", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da5fba2f01a46c7f97234721542e808b855bd505"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/039c3d42d54967fab2bf452db7133388882a4204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/039c3d42d54967fab2bf452db7133388882a4204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/039c3d42d54967fab2bf452db7133388882a4204", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/039c3d42d54967fab2bf452db7133388882a4204/comments", "author": null, "committer": null, "parents": [{"sha": "b689848ffd7859ae06f14fe75ef770d1dc12d737", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b689848ffd7859ae06f14fe75ef770d1dc12d737", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b689848ffd7859ae06f14fe75ef770d1dc12d737"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "91ad0d7299d7db22c733f06ef25ffe7562ecc1e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039c3d42d54967fab2bf452db7133388882a4204/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039c3d42d54967fab2bf452db7133388882a4204/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=039c3d42d54967fab2bf452db7133388882a4204", "patch": "@@ -1,3 +1,15 @@\n+2003-09-03  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* toplev.c (flag_rounding_math): New global variable.\n+\t(f_options): Add to the list of language independent options.\n+\t* flags.h (flag_rounding_math): Prototype here.\n+\t(HONOR_SIGN_DEPENDENT_ROUNDING): Use flag_rounding_math instead.\n+\t* common.opt (frounding-math): New common command line option.\n+\t* opts.c (common_handle_option): Handle OPT_frounding_math.\n+\t(set_fast_math_flags): -ffast-math clears flag_rounding_math.\n+\n+\t* doc/invoke.texi: Document this new command line option.\n+\n 2003-09-03  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* config/sol2.h (NO_IMPLICIT_EXTERN_C): Update comment."}, {"sha": "68c37b0c69612efdc071982ef351576b7188cbdc", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039c3d42d54967fab2bf452db7133388882a4204/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039c3d42d54967fab2bf452db7133388882a4204/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=039c3d42d54967fab2bf452db7133388882a4204", "patch": "@@ -552,6 +552,10 @@ frerun-loop-opt\n Common\n Run the loop optimizer twice\n \n+frounding-math\n+Common\n+Disable optimizations that assume default FP rounding behavior\n+\n fsched-interblock\n Common\n Enable scheduling across basic blocks"}, {"sha": "359e64fa6080ef1e33511a19691f89b58dfe8f8c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039c3d42d54967fab2bf452db7133388882a4204/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039c3d42d54967fab2bf452db7133388882a4204/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=039c3d42d54967fab2bf452db7133388882a4204", "patch": "@@ -280,7 +280,7 @@ in the following sections.\n -freduce-all-givs  -fregmove  -frename-registers @gol\n -freorder-blocks  -freorder-functions @gol\n -frerun-cse-after-loop  -frerun-loop-opt @gol\n--fschedule-insns  -fschedule-insns2 @gol\n+-frounding-math -fschedule-insns  -fschedule-insns2 @gol\n -fno-sched-interblock  -fno-sched-spec  -fsched-spec-load @gol\n -fsched-spec-load-dangerous  -fsched2-use-superblocks @gol\n -fsched2-use-traces  -fsignaling-nans @gol\n@@ -4260,8 +4260,8 @@ them to store all pertinent intermediate computations into variables.\n @item -ffast-math\n @opindex ffast-math\n Sets @option{-fno-math-errno}, @option{-funsafe-math-optimizations}, @*\n-@option{-fno-trapping-math}, @option{-ffinite-math-only} and @*\n-@option{-fno-signaling-nans}.\n+@option{-fno-trapping-math}, @option{-ffinite-math-only},\n+@option{-fno-rounding-math} and @option{-fno-signaling-nans}.\n \n This option causes the preprocessor macro @code{__FAST_MATH__} to be defined.\n \n@@ -4325,6 +4325,26 @@ math functions.\n \n The default is @option{-ftrapping-math}.\n \n+@item -frounding-math\n+@opindex frounding-math\n+Disable transformations and optimizations that assume default floating\n+point rounding behavior.  This is round-to-zero for all floating point\n+to integer conversions, and round-to-nearest for all other arithmetic\n+truncations.  This option should be specified for programs that change\n+the FP rounding mode dynamically, or that may be executed with a\n+non-default rounding mode.  This option disables constant folding of\n+floating point expressions at compile-time (which may be affected by\n+rounding mode) and arithmetic transformations that are unsafe in the\n+presence of sign-dependent rounding modes.\n+\n+The default is @option{-fno-rounding-math}.\n+\n+This option is experimental and does not currently guarantee to\n+disable all GCC optimizations that are affected by rounding mode.\n+Future versions of gcc may provide finer control of this setting\n+using C99's @code{FENV_ACCESS} pragma.  This command line option\n+will be used to specify the default state for @code{FENV_ACCESS}.\n+\n @item -fsignaling-nans\n @opindex fsignaling-nans\n Compile code assuming that IEEE signaling NaNs may generate user-visible"}, {"sha": "823aaefb32d08d53d5d14d13c9999668da488399", "filename": "gcc/flags.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039c3d42d54967fab2bf452db7133388882a4204/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039c3d42d54967fab2bf452db7133388882a4204/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=039c3d42d54967fab2bf452db7133388882a4204", "patch": "@@ -363,6 +363,11 @@ extern int flag_finite_math_only;\n \n extern int flag_trapping_math;\n \n+/* Nonzero means disable transformations that assume default floating\n+   point rounding behavior.  */\n+\n+extern int flag_rounding_math;\n+\n /* 0 means straightforward implementation of complex divide acceptable.\n    1 means wide ranges of inputs must work for complex divide.\n    2 means C99-like requirements for complex divide (not yet implemented).  */\n@@ -716,6 +721,6 @@ extern const char *flag_random_seed;\n /* Like HONOR_NANS, but true if given mode supports sign-dependent rounding,\n    and the rounding mode is important.  */\n #define HONOR_SIGN_DEPENDENT_ROUNDING(MODE) \\\n-  (MODE_HAS_SIGN_DEPENDENT_ROUNDING (MODE) && !flag_unsafe_math_optimizations)\n+  (MODE_HAS_SIGN_DEPENDENT_ROUNDING (MODE) && flag_rounding_math)\n \n #endif /* ! GCC_FLAGS_H */"}, {"sha": "fe8d28f560470b27e602474438c3231ea623329a", "filename": "gcc/opts.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039c3d42d54967fab2bf452db7133388882a4204/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039c3d42d54967fab2bf452db7133388882a4204/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=039c3d42d54967fab2bf452db7133388882a4204", "patch": "@@ -1220,8 +1220,12 @@ common_handle_option (size_t scode, const char *arg,\n       flag_rerun_loop_opt = value;\n       break;\n \n+    case OPT_frounding_math:\n+      flag_rounding_math = value;\n+      break;\n+\n     case OPT_fsched_interblock:\n-      flag_schedule_interblock= value;\n+      flag_schedule_interblock = value;\n       break;\n \n     case OPT_fsched_spec:\n@@ -1547,7 +1551,10 @@ set_fast_math_flags (int set)\n   flag_finite_math_only = set;\n   flag_errno_math = !set;\n   if (set)\n-    flag_signaling_nans = 0;\n+    {\n+      flag_signaling_nans = 0;\n+      flag_rounding_math = 0;\n+    }\n }\n \n /* Return true iff flags are set as if -ffast-math.  */"}, {"sha": "b98538568e3037728ecf97f1711806c070fe05cc", "filename": "gcc/toplev.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039c3d42d54967fab2bf452db7133388882a4204/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039c3d42d54967fab2bf452db7133388882a4204/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=039c3d42d54967fab2bf452db7133388882a4204", "patch": "@@ -633,6 +633,11 @@ int flag_finite_math_only = 0;\n \n int flag_trapping_math = 1;\n \n+/* Nonzero means disable transformations that assume default floating\n+   point rounding behavior.  */\n+\n+int flag_rounding_math = 0;\n+\n /* Nonzero means disable transformations observable by signaling NaNs.\n    This option implies that any operation on an IEEE signaling NaN can\n    generate a (user-visible) trap.  */\n@@ -1113,6 +1118,7 @@ static const lang_independent_options f_options[] =\n   { \"guess-branch-probability\", &flag_guess_branch_prob, 1 },\n   {\"math-errno\", &flag_errno_math, 1 },\n   {\"trapping-math\", &flag_trapping_math, 1 },\n+  {\"rounding-math\", &flag_rounding_math, 1 },\n   {\"unsafe-math-optimizations\", &flag_unsafe_math_optimizations, 1 },\n   {\"signaling-nans\", &flag_signaling_nans, 1 },\n   {\"bounds-check\", &flag_bounds_check, 1 },"}]}