{"sha": "1eee69dd7102f777d5a147beb7d7686a7057df78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVlZTY5ZGQ3MTAyZjc3N2Q1YTE0N2JlYjdkNzY4NmE3MDU3ZGY3OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-11-02T16:14:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-11-02T16:14:26Z"}, "message": "Restrict DR 757 change to C++0x mode.\n\n\t* decl2.c (mark_used): Check cxx_dialect.\n\t* decl.c (grokfndecl): Do check type linkage in C++98 mode.\n\t(grokvardecl): Likewise.\n\t* pt.c (check_instantiated_arg): Likewise.\n\nFrom-SVN: r153816", "tree": {"sha": "8bf6182385501879c97b8e139429d6712bc20e8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bf6182385501879c97b8e139429d6712bc20e8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1eee69dd7102f777d5a147beb7d7686a7057df78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eee69dd7102f777d5a147beb7d7686a7057df78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eee69dd7102f777d5a147beb7d7686a7057df78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eee69dd7102f777d5a147beb7d7686a7057df78/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d7c0c068dd5d174f5183c2187499332198aea683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7c0c068dd5d174f5183c2187499332198aea683", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7c0c068dd5d174f5183c2187499332198aea683"}], "stats": {"total": 183, "additions": 149, "deletions": 34}, "files": [{"sha": "1921f7288b276e0bc1a1d33ca3eaf2b02cd693cb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -1,3 +1,11 @@\n+2009-11-02  Jason Merrill  <jason@redhat.com>\n+\n+\tRestrict DR 757 change to C++0x mode.\n+\t* decl2.c (mark_used): Check cxx_dialect.\n+\t* decl.c (grokfndecl): Do check type linkage in C++98 mode.\n+\t(grokvardecl): Likewise.\n+\t* pt.c (check_instantiated_arg): Likewise.\n+\n 2009-11-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/41774"}, {"sha": "de29d0bdb63aa0fdfb6cfb0896bf94573ea3b1a8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 70, "deletions": 7, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -6768,6 +6768,36 @@ grokfndecl (tree ctype,\n \t\t|| decl_function_context (TYPE_MAIN_DECL (ctype))))\n     publicp = 0;\n \n+  if (publicp && cxx_dialect == cxx98)\n+    {\n+      /* [basic.link]: A name with no linkage (notably, the name of a class\n+\t or enumeration declared in a local scope) shall not be used to\n+\t declare an entity with linkage.\n+\n+\t DR 757 relaxes this restriction for C++0x.  */\n+      t = no_linkage_check (TREE_TYPE (decl),\n+\t\t\t    /*relaxed_p=*/false);\n+      if (t)\n+\t{\n+\t  if (TYPE_ANONYMOUS_P (t))\n+\t    {\n+\t      if (DECL_EXTERN_C_P (decl))\n+\t\t/* Allow this; it's pretty common in C.  */;\n+\t      else\n+\t\t{\n+\t\t  permerror (input_location, \"non-local function %q#D uses anonymous type\",\n+\t\t\t      decl);\n+\t\t  if (DECL_ORIGINAL_TYPE (TYPE_NAME (t)))\n+\t\t    permerror (input_location, \"%q+#D does not refer to the unqualified \"\n+\t\t\t       \"type, so it is not used for linkage\",\n+\t\t\t       TYPE_NAME (t));\n+\t\t}\n+\t    }\n+\t  else\n+\t    permerror (input_location, \"non-local function %q#D uses local type %qT\", decl, t);\n+\t}\n+    }\n+\n   TREE_PUBLIC (decl) = publicp;\n   if (! publicp)\n     {\n@@ -7007,15 +7037,48 @@ grokvardecl (tree type,\n   if (declspecs->specs[(int)ds_thread])\n     DECL_TLS_MODEL (decl) = decl_default_tls_model (decl);\n \n+  /* If the type of the decl has no linkage, make sure that we'll\n+     notice that in mark_used.  */\n+  if (cxx_dialect > cxx98\n+      && decl_linkage (decl) != lk_none\n+      && DECL_LANG_SPECIFIC (decl) == NULL\n+      && !DECL_EXTERN_C_P (decl)\n+      && no_linkage_check (TREE_TYPE (decl), /*relaxed_p=*/false))\n+    retrofit_lang_decl (decl);\n+\n   if (TREE_PUBLIC (decl))\n     {\n-      /* If the type of the decl has no linkage, make sure that we'll\n-\t notice that in mark_used.  */\n-      if (DECL_LANG_SPECIFIC (decl) == NULL\n-\t  && TREE_PUBLIC (decl)\n-\t  && !DECL_EXTERN_C_P (decl)\n-\t  && no_linkage_check (TREE_TYPE (decl), /*relaxed_p=*/false))\n-\tretrofit_lang_decl (decl);\n+      /* [basic.link]: A name with no linkage (notably, the name of a class\n+\t or enumeration declared in a local scope) shall not be used to\n+\t declare an entity with linkage.\n+\n+\t DR 757 relaxes this restriction for C++0x.  */\n+      tree t = (cxx_dialect > cxx98 ? NULL_TREE\n+\t\t: no_linkage_check (TREE_TYPE (decl), /*relaxed_p=*/false));\n+      if (t)\n+\t{\n+\t  if (TYPE_ANONYMOUS_P (t))\n+\t    {\n+\t      if (DECL_EXTERN_C_P (decl))\n+\t\t/* Allow this; it's pretty common in C.  */\n+\t\t;\n+\t      else\n+\t\t{\n+\t\t  /* DRs 132, 319 and 389 seem to indicate types with\n+\t\t     no linkage can only be used to declare extern \"C\"\n+\t\t     entities.  Since it's not always an error in the\n+\t\t     ISO C++ 90 Standard, we only issue a warning.  */\n+\t\t  warning (0, \"non-local variable %q#D uses anonymous type\",\n+\t\t\t   decl);\n+\t\t  if (DECL_ORIGINAL_TYPE (TYPE_NAME (t)))\n+\t\t    warning (0, \"%q+#D does not refer to the unqualified \"\n+\t\t\t     \"type, so it is not used for linkage\",\n+\t\t\t     TYPE_NAME (t));\n+\t\t}\n+\t    }\n+\t  else\n+\t    warning (0, \"non-local variable %q#D uses local type %qT\", decl, t);\n+\t}\n     }\n   else\n     DECL_INTERFACE_KNOWN (decl) = 1;"}, {"sha": "b1fe4b9e31c0b6962d886bb259205aae3c9fead7", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -3990,7 +3990,8 @@ mark_used (tree decl)\n    o the variable or function has extern \"C\" linkage (7.5 [dcl.link]), or\n    o the variable or function is not used (3.2 [basic.def.odr]) or is\n    defined in the same translation unit.  */\n-  if (decl_linkage (decl) != lk_none\n+  if (cxx_dialect > cxx98\n+      && decl_linkage (decl) != lk_none\n       && !DECL_EXTERN_C_P (decl)\n       && !DECL_ARTIFICIAL (decl)\n       && !decl_defined_p (decl)"}, {"sha": "2f0fa12537653d7800cca339c3c15bfa5c580e18", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -12479,7 +12479,7 @@ tsubst_copy_and_build (tree t,\n }\n \n /* Verify that the instantiated ARGS are valid. For type arguments,\n-   make sure that the type is not variably modified. For non-type arguments,\n+   make sure that the type's linkage is ok. For non-type arguments,\n    make sure they are constants if they are integral or enumerations.\n    Emit an error under control of COMPLAIN, and return TRUE on error.  */\n \n@@ -12500,7 +12500,33 @@ check_instantiated_arg (tree tmpl, tree t, tsubst_flags_t complain)\n     }\n   else if (TYPE_P (t))\n     {\n-      if (variably_modified_type_p (t, NULL_TREE))\n+      /* [basic.link]: A name with no linkage (notably, the name\n+\t of a class or enumeration declared in a local scope)\n+\t shall not be used to declare an entity with linkage.\n+\t This implies that names with no linkage cannot be used as\n+\t template arguments\n+\n+\t DR 757 relaxes this restriction for C++0x.  */\n+      tree nt = (cxx_dialect > cxx98 ? NULL_TREE\n+\t\t : no_linkage_check (t, /*relaxed_p=*/false));\n+\n+      if (nt)\n+\t{\n+\t  /* DR 488 makes use of a type with no linkage cause\n+\t     type deduction to fail.  */\n+\t  if (complain & tf_error)\n+\t    {\n+\t      if (TYPE_ANONYMOUS_P (nt))\n+\t\terror (\"%qT is/uses anonymous type\", t);\n+\t      else\n+\t\terror (\"template argument for %qD uses local type %qT\",\n+\t\t       tmpl, t);\n+\t    }\n+\t  return true;\n+\t}\n+      /* In order to avoid all sorts of complications, we do not\n+\t allow variably-modified types as template arguments.  */\n+      else if (variably_modified_type_p (t, NULL_TREE))\n \t{\n \t  if (complain & tf_error)\n \t    error (\"%qT is a variably modified type\", t);"}, {"sha": "52a26bc9d4c7b5e3ec802955d358a6f1d174880d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -1,3 +1,21 @@\n+2009-11-02  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/other/linkage2.C: Move to...\n+\t* g++.dg/cpp0x/linkage2.C: ..here.\n+\t* g++.dg/abi/mangle32.C: Add -std=c++0x.\n+\t* g++.dg/cpp0x/nolinkage1.C: Likewise.\n+\t* g++.dg/debug/dwarf2/anonname1.C: Likewise.\n+\t* g++.dg/ext/anon-struct4.C: Revert earlier change.\n+\t* g++.dg/lookup/anon2.C: Likewise.\n+\t* g++.dg/other/anon3.C: Likewise.\n+\t* g++.dg/template/arg2.C: Likewise.\n+\t* g++.dg/template/local4.C: Likewise.\n+\t* g++.old-deja/g++.law/operators32.C: Likewise.\n+\t* g++.old-deja/g++.other/linkage2.C: Likewise.\n+\t* g++.old-deja/g++.pt/enum6.C: Likewise.\n+\t* g++.old-deja/g++.other/anon9.C: Likewise.\n+\t* g++.old-deja/g++.other/linkage1.C: Likewise.\n+\n 2009-11-02  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \tPR tree-optimization/41857"}, {"sha": "244d07490f84042deff80e2895cd670140bdba60", "filename": "gcc/testsuite/g++.dg/abi/mangle32.C", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle32.C?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -2,6 +2,9 @@\n \n // namespace-scope unnamed types have no linkage, so we only test that they\n // are distinct.\n+\n+// { dg-options -std=c++0x }\n+\n typedef struct { } *A;\n typedef struct { } *B;\n "}, {"sha": "f41c21a77415e07e03d2b19d3dec0d15747e9eb6", "filename": "gcc/testsuite/g++.dg/cpp0x/linkage2.C", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flinkage2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flinkage2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flinkage2.C?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -4,6 +4,8 @@\n //   o the variable or function is not used (3.2 [basic.def.odr]) or is\n //   defined in the same translation unit.\n \n+// { dg-options -std=c++0x }\n+\n template <typename T> struct B {\n   void g(T){}\n   void h(T);\t\t\t// { dg-error \"never defined\" }", "previous_filename": "gcc/testsuite/g++.dg/other/linkage2.C"}, {"sha": "b69b6ddc4cf2b1e011597a81909c5b36c05bc2b0", "filename": "gcc/testsuite/g++.dg/cpp0x/nolinkage1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnolinkage1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnolinkage1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnolinkage1.C?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -3,6 +3,7 @@\n \n // { dg-additional-sources \"nolinkage1a.cc\" }\n // { dg-do link }\n+// { dg-options -std=c++0x }\n \n #include \"nolinkage1.h\"\n "}, {"sha": "c9da2d6986622514ed34450fe4a0fac73bb6227c", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/anonname1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fanonname1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fanonname1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fanonname1.C?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -1,6 +1,6 @@\n // PR debug/41828\n // { dg-do compile }\n-// { dg-options \"-gdwarf-2 -dA\" }\n+// { dg-options \"-gdwarf-2 -dA -std=c++0x\" }\n // { dg-final { scan-assembler-not \"<anonymous\" } }\n // { dg-final { scan-assembler-not \"\\._\\[0-9\\]\" } }\n // { dg-final { scan-assembler-not \"\\$_\\[0-9\\]\" } }"}, {"sha": "4f0fcd12b77f3f1d78f2386763a1a7246cc61bc2", "filename": "gcc/testsuite/g++.dg/ext/anon-struct4.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -1,3 +1,4 @@\n // PR c++/14401\n \n struct { struct { int& i ; } bar ; } foo ; // { dg-error \"uninitialized\" \"uninit\" }\n+// { dg-warning \"anonymous\" \"anon\" { target *-*-* } 3 }"}, {"sha": "d556ba0034a18eda18bfc7459ac0bfcda8c164ff", "filename": "gcc/testsuite/g++.dg/lookup/anon2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon2.C?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -1,9 +1,9 @@\n // { dg-do compile }\n // { dg-options \"\" }\n \n-// Make sure we don't issue a diagnostic if a type with no linkage is used\n-// to declare a a variable that has linkage if that variable is defined.\n+// Make sure we issue a diagnostic if a type with no linkage is used\n+// to declare a a variable that has linkage.\n \n-struct { int i; } a;\n+struct { int i; } a; // { dg-warning \"anonymous type\" }\n \n void foo() { a.i; }"}, {"sha": "87116eb8901f7443909e9df37b133085905fbc9c", "filename": "gcc/testsuite/g++.dg/other/anon3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon3.C?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -4,4 +4,4 @@\n \n // { dg-do compile }\n \n-enum { a = 3 } x;\n+enum { a = 3 } x; // { dg-warning \"anonymous type\" }"}, {"sha": "9fb7a68cc780d0ad9e8d047e5ebd6ec2b9e411f0", "filename": "gcc/testsuite/g++.dg/template/arg2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg2.C?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -10,5 +10,5 @@ template <typename T> class X {};\n void fn ()\n {\n   class L {};\n-  X<L> f;\n+  X<L> f; // { dg-error \"uses local type|trying to instantiate|no type|invalid type\" \"\" }\n }"}, {"sha": "cfa37364975b27430ef47271e71d67aee7b3b33c", "filename": "gcc/testsuite/g++.dg/template/local4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal4.C?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -4,5 +4,5 @@ template <typename T> void foo() {}\n \n int main () {\n   struct S {};\n-  foo<S> ();\n+  foo<S> (); // { dg-error \"match\" } \n }"}, {"sha": "91de03ee8fcad41def085f3538f93cb018414a42", "filename": "gcc/testsuite/g++.old-deja/g++.law/operators32.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators32.C?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -49,7 +49,7 @@ foo() {std::cout << \"foo created\" << std::endl; }\n };\n \n foo **f2;\n-allocate2d(d1, d2, f2);\n-ffree(d1, f2);\n+allocate2d(d1, d2, f2);// { dg-error \"\" }  type.*// ERROR -    trying to.*\n+ffree(d1, f2);// { dg-error \"\" }  type.*// ERROR -    trying to.*\n \n }"}, {"sha": "a364db8e962d2b348b14c9000a6a00608ecc41eb", "filename": "gcc/testsuite/g++.old-deja/g++.other/anon9.C", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fanon9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fanon9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fanon9.C?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -4,8 +4,3 @@\n \n typedef const struct { int i; } T; // { dg-error \"\" } referenced below\n void f (T* t);\t\t\t// { dg-error \"\" } uses unnamed type\n-\n-int main()\n-{\n-  f(0);\n-}"}, {"sha": "e9b5a9d2aa32f96d6dba8a3f0c8a0277e83a7a0e", "filename": "gcc/testsuite/g++.old-deja/g++.other/linkage1.C", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage1.C?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -3,16 +3,13 @@ typedef struct {\n   int i;\n } *p;\n \n-void f (p) { }\n-p q;\n+void f (p) { }\t\t\t// { dg-error \"uses anonymous type\" }\n+p q;\t\t\t\t// { dg-warning \"uses anonymous type\" } \n \n int main()\n {\n-  extern p j;\t\t\t// { dg-error \"anonymous type\" }\n-  j+1;\n+  extern p j;\t\t\t// { dg-warning \"uses anonymous type\" }\n   struct A { int j; };\n-  extern A a;\t\t\t// { dg-error \"local type\" }\n-  a.j+1;\n-  extern void f (A);\t\t// { dg-error \"local type\" }\n-  f(a);\n+  extern A a;\t\t\t// { dg-warning \"uses local type\" }\n+  extern void f (A);\t\t// { dg-error \"uses local type\" }\n }"}, {"sha": "2385b2216feff8c94959a5518ec7501d55750ab2", "filename": "gcc/testsuite/g++.old-deja/g++.other/linkage2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage2.C?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -7,7 +7,7 @@ extern GDBM_FILE gdbm_open();\n }\n \n typedef struct { int dummy[10]; } *FAIL_FILE;\n-extern FAIL_FILE fail_open(); // OK because it's never used\n+extern FAIL_FILE fail_open(); // { dg-error \"\" } non-local function\n \n typedef struct { int dummy[10]; } *SUCCESS_FILE, S;\n extern SUCCESS_FILE success_open();"}, {"sha": "254b48bc7fc5dea3055929db7c154222efe458a0", "filename": "gcc/testsuite/g++.old-deja/g++.pt/enum6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fenum6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eee69dd7102f777d5a147beb7d7686a7057df78/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fenum6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fenum6.C?ref=1eee69dd7102f777d5a147beb7d7686a7057df78", "patch": "@@ -8,7 +8,7 @@ void fn(T)\n {\n   enum tern { H, L, X, U };\n \n-  vector<tern> ternvec;\n+  vector<tern> ternvec; // { dg-error \"\" } composed from a local type\n }\n \n template void fn(int);"}]}