{"sha": "1511c8c005d91ff2af7010d852fe83bdde0fd3f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUxMWM4YzAwNWQ5MWZmMmFmNzAxMGQ4NTJmZTgzYmRkZTBmZDNmMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-06-10T23:07:11Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-06-10T23:07:11Z"}, "message": "cgraph.h (cgraph_edge::clone): Update prototype.\n\n\n\t* cgraph.h (cgraph_edge::clone): Update prototype.\n\t* cgraphclones.c (cgraph_edge::clone): Update profile scaling.\n\t(cgraph_node::create_clone): Update.\n\t(cgraph_node::create_version_clone): Update.\n\t* tree-inline.c (copy_bb): Update.\n\t(expand_call_inline): Update.\n\nFrom-SVN: r249097", "tree": {"sha": "198bd5ad2351d27130053b58e510149c5894f984", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/198bd5ad2351d27130053b58e510149c5894f984"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1511c8c005d91ff2af7010d852fe83bdde0fd3f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1511c8c005d91ff2af7010d852fe83bdde0fd3f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1511c8c005d91ff2af7010d852fe83bdde0fd3f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1511c8c005d91ff2af7010d852fe83bdde0fd3f3/comments", "author": null, "committer": null, "parents": [{"sha": "9a58d6cdbf24c9680f70ff84b21749f5aa1c196f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a58d6cdbf24c9680f70ff84b21749f5aa1c196f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a58d6cdbf24c9680f70ff84b21749f5aa1c196f"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "7964c5b06a3e224f0e80b7032b2211ff73fbcd98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1511c8c005d91ff2af7010d852fe83bdde0fd3f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1511c8c005d91ff2af7010d852fe83bdde0fd3f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1511c8c005d91ff2af7010d852fe83bdde0fd3f3", "patch": "@@ -1,3 +1,12 @@\n+2017-06-10  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cgraph.h (cgraph_edge::clone): Update prototype.\n+\t* cgraphclones.c (cgraph_edge::clone): Update profile scaling.\n+\t(cgraph_node::create_clone): Update.\n+\t(cgraph_node::create_version_clone): Update.\n+\t* tree-inline.c (copy_bb): Update.\n+\t(expand_call_inline): Update.\n+\n 2017-06-10  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.c (emit_vrsave_prologue): New function,"}, {"sha": "57cdaa4568148c99d6cb171dcd6de79735492acc", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1511c8c005d91ff2af7010d852fe83bdde0fd3f3/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1511c8c005d91ff2af7010d852fe83bdde0fd3f3/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=1511c8c005d91ff2af7010d852fe83bdde0fd3f3", "patch": "@@ -1649,7 +1649,7 @@ struct GTY((chain_next (\"%h.next_caller\"), chain_prev (\"%h.prev_caller\"),\n   /* Create clone of edge in the node N represented\n      by CALL_EXPR the callgraph.  */\n   cgraph_edge * clone (cgraph_node *n, gcall *call_stmt, unsigned stmt_uid,\n-\t\t       gcov_type count_scale, int freq_scale,\n+\t\t       profile_count num, profile_count den, int freq_scale,\n \t\t       bool update_original);\n \n   /* Verify edge count and frequency.  */"}, {"sha": "6513aa768be8204be0d05bd20afa0d97363f7370", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1511c8c005d91ff2af7010d852fe83bdde0fd3f3/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1511c8c005d91ff2af7010d852fe83bdde0fd3f3/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=1511c8c005d91ff2af7010d852fe83bdde0fd3f3", "patch": "@@ -86,10 +86,13 @@ along with GCC; see the file COPYING3.  If not see\n \n cgraph_edge *\n cgraph_edge::clone (cgraph_node *n, gcall *call_stmt, unsigned stmt_uid,\n-\t\t    gcov_type count_scale, int freq_scale, bool update_original)\n+\t\t    profile_count num, profile_count den,\n+\t\t    int freq_scale, bool update_original)\n {\n   cgraph_edge *new_edge;\n-  profile_count gcov_count = count.apply_scale (count_scale, REG_BR_PROB_BASE);\n+  profile_count gcov_count\n+\t = (num == profile_count::zero () || den > 0)\n+\t   ? count.apply_scale (num, den) : count;\n   gcov_type freq;\n \n   /* We do not want to ignore loop nest after frequency drops to 0.  */\n@@ -116,7 +119,7 @@ cgraph_edge::clone (cgraph_node *n, gcall *call_stmt, unsigned stmt_uid,\n \t{\n \t  new_edge = n->create_indirect_edge (call_stmt,\n \t\t\t\t\t      indirect_info->ecf_flags,\n-\t\t\t\t\t      count, freq, false);\n+\t\t\t\t\t      gcov_count, freq, false);\n \t  *new_edge->indirect_info = *indirect_info;\n \t}\n     }\n@@ -428,7 +431,6 @@ cgraph_node::create_clone (tree new_decl, profile_count prof_count, int freq,\n {\n   cgraph_node *new_node = symtab->create_empty ();\n   cgraph_edge *e;\n-  gcov_type count_scale;\n   unsigned i;\n \n   if (new_inlined_to)\n@@ -453,7 +455,6 @@ cgraph_node::create_clone (tree new_decl, profile_count prof_count, int freq,\n   new_node->global = global;\n   new_node->global.inlined_to = new_inlined_to;\n   new_node->rtl = rtl;\n-  new_node->count = count;\n   new_node->frequency = frequency;\n   new_node->tp_first_run = tp_first_run;\n   new_node->tm_clone = tm_clone;\n@@ -475,18 +476,6 @@ cgraph_node::create_clone (tree new_decl, profile_count prof_count, int freq,\n   else\n     new_node->clone.combined_args_to_skip = args_to_skip;\n \n-  if (count.initialized_p ())\n-    {\n-      if (new_node->count > count)\n-        count_scale = REG_BR_PROB_BASE;\n-      else\n-\tcount_scale = new_node->count.probability_in (count);\n-    }\n-  else\n-    count_scale = 0;\n-  if (update_original)\n-    count -= prof_count;\n-\n   FOR_EACH_VEC_ELT (redirect_callers, i, e)\n     {\n       /* Redirect calls to the old version node to point to its new\n@@ -500,12 +489,12 @@ cgraph_node::create_clone (tree new_decl, profile_count prof_count, int freq,\n   new_node->expand_all_artificial_thunks ();\n \n   for (e = callees;e; e=e->next_callee)\n-    e->clone (new_node, e->call_stmt, e->lto_stmt_uid, count_scale,\n+    e->clone (new_node, e->call_stmt, e->lto_stmt_uid, new_node->count, count,\n \t      freq, update_original);\n \n   for (e = indirect_calls; e; e = e->next_callee)\n     e->clone (new_node, e->call_stmt, e->lto_stmt_uid,\n-\t      count_scale, freq, update_original);\n+\t      new_node->count, count, freq, update_original);\n   new_node->clone_references (this);\n \n   new_node->next_sibling_clone = clones;\n@@ -514,6 +503,9 @@ cgraph_node::create_clone (tree new_decl, profile_count prof_count, int freq,\n   clones = new_node;\n   new_node->clone_of = this;\n \n+  if (update_original)\n+    count -= prof_count;\n+\n   if (call_duplication_hook)\n     symtab->call_cgraph_duplication_hooks (this, new_node);\n \n@@ -911,14 +903,14 @@ cgraph_node::create_version_clone (tree new_decl,\n      if (!bbs_to_copy\n \t || bitmap_bit_p (bbs_to_copy, gimple_bb (e->call_stmt)->index))\n        e->clone (new_version, e->call_stmt,\n-\t\t e->lto_stmt_uid, REG_BR_PROB_BASE,\n+\t\t e->lto_stmt_uid, count, count,\n \t\t CGRAPH_FREQ_BASE,\n \t\t true);\n    for (e = indirect_calls; e; e=e->next_callee)\n      if (!bbs_to_copy\n \t || bitmap_bit_p (bbs_to_copy, gimple_bb (e->call_stmt)->index))\n        e->clone (new_version, e->call_stmt,\n-\t\t e->lto_stmt_uid, REG_BR_PROB_BASE,\n+\t\t e->lto_stmt_uid, count, count,\n \t\t CGRAPH_FREQ_BASE,\n \t\t true);\n    FOR_EACH_VEC_ELT (redirect_callers, i, e)"}, {"sha": "aea8a79da146ab0ee850ca0ec1c4795ccaa9cb48", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1511c8c005d91ff2af7010d852fe83bdde0fd3f3/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1511c8c005d91ff2af7010d852fe83bdde0fd3f3/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=1511c8c005d91ff2af7010d852fe83bdde0fd3f3", "patch": "@@ -2009,7 +2009,9 @@ copy_bb (copy_body_data *id, basic_block bb, int frequency_scale,\n \t\t      struct cgraph_edge *old_edge = edge;\n \t\t      edge = edge->clone (id->dst_node, call_stmt,\n \t\t\t\t\t  gimple_uid (stmt),\n-\t\t\t\t\t  REG_BR_PROB_BASE, CGRAPH_FREQ_BASE,\n+\t\t\t\t\t  profile_count::one (),\n+\t\t\t\t\t  profile_count::one (),\n+\t\t\t\t\t  CGRAPH_FREQ_BASE,\n \t\t\t\t\t  true);\n \t\t      /* We could also just rescale the frequency, but\n \t\t         doing so would introduce roundoff errors and make\n@@ -2028,7 +2030,9 @@ copy_bb (copy_body_data *id, basic_block bb, int frequency_scale,\n \t\t\t  old_edge->speculative_call_info (direct, indirect, ref);\n \t\t\t  indirect = indirect->clone (id->dst_node, call_stmt,\n \t\t\t\t\t\t      gimple_uid (stmt),\n-\t\t\t\t\t\t      REG_BR_PROB_BASE, CGRAPH_FREQ_BASE,\n+\t\t\t\t\t\t      profile_count::one (),\n+\t\t\t\t\t\t      profile_count::one (),\n+\t\t\t\t\t\t      CGRAPH_FREQ_BASE,\n \t\t\t\t\t\t      true);\n \t\t\t  if (old_edge->frequency + indirect->frequency)\n \t\t\t    {\n@@ -4509,7 +4513,9 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n       cg_edge->remove ();\n       edge = id->src_node->callees->clone (id->dst_node, call_stmt,\n \t\t   \t\t           gimple_uid (stmt),\n-\t\t\t\t   \t   REG_BR_PROB_BASE, CGRAPH_FREQ_BASE,\n+\t\t\t\t   \t   profile_count::one (),\n+\t\t\t\t\t   profile_count::one (),\n+\t\t\t\t\t   CGRAPH_FREQ_BASE,\n \t\t\t\t           true);\n       edge->frequency = freq;\n       edge->count = count;"}]}