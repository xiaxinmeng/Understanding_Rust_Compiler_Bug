{"sha": "8819419ba1d397c0444d89079ec16657a09914fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgxOTQxOWJhMWQzOTdjMDQ0NGQ4OTA3OWVjMTY2NTdhMDk5MTRmYg==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-07-20T18:25:43Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-07-22T16:14:42Z"}, "message": "Fix PR 10153: tail recusion for vector types.\n\nThe problem here is we try to an initialized value\nfrom a scalar constant. For vectors we need to do\na vect_dup instead.  This fixes that issue by using\nbuild_{one,zero}_cst instead of integer_{one,zero}_node\nwhen calling create_tailcall_accumulator.\n\nChanges from v1:\n* v2: Use build_{one,zero}_cst and get the correct type before.\n\nOK? Bootstrapped and tested on aarch64-linux-gnu with no regressions.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/10153\n\t* tree-tailcall.c (create_tailcall_accumulator):\n\tDon't call fold_convert as the type should be correct already.\n\t(tree_optimize_tail_calls_1): Use build_{one,zero}_cst instead\n\tof integer_{one,zero}_node for the call of create_tailcall_accumulator.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/10153\n\t* gcc.c-torture/compile/pr10153-1.c: New test.\n\t* gcc.c-torture/compile/pr10153-2.c: New test.", "tree": {"sha": "11b8169539ebfab3e39714c711094b654a35e334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11b8169539ebfab3e39714c711094b654a35e334"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8819419ba1d397c0444d89079ec16657a09914fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8819419ba1d397c0444d89079ec16657a09914fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8819419ba1d397c0444d89079ec16657a09914fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8819419ba1d397c0444d89079ec16657a09914fb/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4048d8a08621820dd6cc6035e13de3c3c82af4a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4048d8a08621820dd6cc6035e13de3c3c82af4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4048d8a08621820dd6cc6035e13de3c3c82af4a5"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "3f2040f32a1fa26107486e0f520b92b7cf3a0e36", "filename": "gcc/testsuite/gcc.c-torture/compile/pr10153-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8819419ba1d397c0444d89079ec16657a09914fb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr10153-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8819419ba1d397c0444d89079ec16657a09914fb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr10153-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr10153-1.c?ref=8819419ba1d397c0444d89079ec16657a09914fb", "patch": "@@ -0,0 +1,7 @@\n+typedef int V __attribute__ ((vector_size (2 * sizeof (int))));\n+V\n+foo (void)\n+{\n+  V v = { };\n+  return v - foo();\n+}"}, {"sha": "1af4c8e2a36d0d2ad3527ed378d51fcb24d4f036", "filename": "gcc/testsuite/gcc.c-torture/compile/pr10153-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8819419ba1d397c0444d89079ec16657a09914fb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr10153-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8819419ba1d397c0444d89079ec16657a09914fb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr10153-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr10153-2.c?ref=8819419ba1d397c0444d89079ec16657a09914fb", "patch": "@@ -0,0 +1,9 @@\n+typedef int V __attribute__ ((vector_size (2 * sizeof (int))));\n+V\n+foo (int t)\n+{\n+  if (t < 10)\n+    return (V){1, 1};\n+  V v = { };\n+  return v - foo(t - 1);\n+}"}, {"sha": "f2833d25ce84f85b5cbe61fafd2a148974a2c1b5", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8819419ba1d397c0444d89079ec16657a09914fb/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8819419ba1d397c0444d89079ec16657a09914fb/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=8819419ba1d397c0444d89079ec16657a09914fb", "patch": "@@ -1079,8 +1079,7 @@ create_tailcall_accumulator (const char *label, basic_block bb, tree init)\n   gphi *phi;\n \n   phi = create_phi_node (tmp, bb);\n-  /* RET_TYPE can be a float when -ffast-maths is enabled.  */\n-  add_phi_arg (phi, fold_convert (ret_type, init), single_pred_edge (bb),\n+  add_phi_arg (phi, init, single_pred_edge (bb),\n \t       UNKNOWN_LOCATION);\n   return PHI_RESULT (phi);\n }\n@@ -1157,14 +1156,17 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n \t      }\n \t  phis_constructed = true;\n \t}\n+      tree ret_type = TREE_TYPE (DECL_RESULT (current_function_decl));\n+      if (POINTER_TYPE_P (ret_type))\n+\tret_type = sizetype;\n \n       if (act->add && !a_acc)\n \ta_acc = create_tailcall_accumulator (\"add_acc\", first,\n-\t\t\t\t\t     integer_zero_node);\n+\t\t\t\t\t     build_zero_cst (ret_type));\n \n       if (act->mult && !m_acc)\n \tm_acc = create_tailcall_accumulator (\"mult_acc\", first,\n-\t\t\t\t\t     integer_one_node);\n+\t\t\t\t\t     build_one_cst (ret_type));\n     }\n \n   if (a_acc || m_acc)"}]}