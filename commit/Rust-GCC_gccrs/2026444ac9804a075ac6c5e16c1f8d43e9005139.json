{"sha": "2026444ac9804a075ac6c5e16c1f8d43e9005139", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAyNjQ0NGFjOTgwNGEwNzVhYzZjNWUxNmMxZjhkNDNlOTAwNTEzOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-12T04:29:00Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-12T04:29:00Z"}, "message": "(real_value_from_int_cst): Use temporary variable `e' to\nwork around bugs in 386 PCC.\n\n(build_array_type): Delete the code to set TYPE_MAIN_VARIANT.\n\n(build_array_type):\nDon't change TYPE_MAIN_VARIANT if incomplete (domain not known).\n\nFrom-SVN: r4428", "tree": {"sha": "6077b434d0e00fded01863451de571516d510a89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6077b434d0e00fded01863451de571516d510a89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2026444ac9804a075ac6c5e16c1f8d43e9005139", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2026444ac9804a075ac6c5e16c1f8d43e9005139", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2026444ac9804a075ac6c5e16c1f8d43e9005139", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2026444ac9804a075ac6c5e16c1f8d43e9005139/comments", "author": null, "committer": null, "parents": [{"sha": "dba6874f46dba090fba16254dc0163e204904899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dba6874f46dba090fba16254dc0163e204904899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dba6874f46dba090fba16254dc0163e204904899"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "8cf85aa0298ec9eb99738c6d41bd992e2f4bcb88", "filename": "gcc/tree.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2026444ac9804a075ac6c5e16c1f8d43e9005139/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2026444ac9804a075ac6c5e16c1f8d43e9005139/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2026444ac9804a075ac6c5e16c1f8d43e9005139", "patch": "@@ -1154,6 +1154,10 @@ real_value_from_int_cst (i)\n      tree i;\n {\n   REAL_VALUE_TYPE d;\n+  REAL_VALUE_TYPE e;\n+  /* Some 386 compilers mishandle unsigned int to float conversions,\n+     so introduce a temporary variable E to avoid those bugs.  */\n+\n #ifdef REAL_ARITHMETIC\n   if (! TREE_UNSIGNED (TREE_TYPE (i)))\n     REAL_VALUE_FROM_INT (d, TREE_INT_CST_LOW (i), TREE_INT_CST_HIGH (i));\n@@ -1163,17 +1167,21 @@ real_value_from_int_cst (i)\n   if (TREE_INT_CST_HIGH (i) < 0 && ! TREE_UNSIGNED (TREE_TYPE (i)))\n     {\n       d = (double) (~ TREE_INT_CST_HIGH (i));\n-      d *= ((double) ((HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2))\n+      e = ((double) ((HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2))\n \t    * (double) ((HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)));\n-      d += (double) (unsigned HOST_WIDE_INT) (~ TREE_INT_CST_LOW (i));\n+      d *= e;\n+      e = (double) (unsigned HOST_WIDE_INT) (~ TREE_INT_CST_LOW (i));\n+      d += e;\n       d = (- d - 1.0);\n     }\n   else\n     {\n       d = (double) (unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (i);\n-      d *= ((double) ((HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2))\n+      e = ((double) ((HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2))\n \t    * (double) ((HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)));\n-      d += (double) (unsigned HOST_WIDE_INT) TREE_INT_CST_LOW (i);\n+      d *= e;\n+      e = (double) (unsigned HOST_WIDE_INT) TREE_INT_CST_LOW (i);\n+      d += e;\n     }\n #endif /* not REAL_ARITHMETIC */\n   return d;\n@@ -2825,23 +2833,21 @@ build_array_type (elt_type, index_type)\n \n   if (index_type == 0)\n     {\n-      /* The main variant of an array type should always\n-\t be an array whose element type is the main variant.  */\n-      if (elt_type != TYPE_MAIN_VARIANT (elt_type))\n-\tchange_main_variant (t, build_array_type (TYPE_MAIN_VARIANT (elt_type),\n-\t\t\t\t\t\t  index_type));\n-\n       return t;\n     }\n \n   hashcode = TYPE_HASH (elt_type) + TYPE_HASH (index_type);\n   t = type_hash_canon (hashcode, t);\n \n+#if 0 /* This led to crashes, because it could put a temporary node\n+\t on the TYPE_NEXT_VARIANT chain of a permanent one.  */\n+  */\n   /* The main variant of an array type should always\n      be an array whose element type is the main variant.  */\n   if (elt_type != TYPE_MAIN_VARIANT (elt_type))\n     change_main_variant (t, build_array_type (TYPE_MAIN_VARIANT (elt_type),\n \t\t\t\t\t      index_type));\n+#endif\n \n   if (TYPE_SIZE (t) == 0)\n     layout_type (t);"}]}