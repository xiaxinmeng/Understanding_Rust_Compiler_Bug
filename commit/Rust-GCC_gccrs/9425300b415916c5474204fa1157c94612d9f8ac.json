{"sha": "9425300b415916c5474204fa1157c94612d9f8ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQyNTMwMGI0MTU5MTZjNTQ3NDIwNGZhMTE1N2M5NDYxMmQ5ZjhhYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-04-26T19:25:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-04-26T19:25:30Z"}, "message": "Improve tests for vector and deque move-assignment\n\n\t* testsuite/23_containers/deque/allocator/move_assign-2.cc: Improve\n\tcomment. Ensure first test works because allocator type propagates and\n\tnot because is_always_equal is true.\n\t* testsuite/23_containers/vector/52591.cc: Likewise. Restore original\n\ttestcase that instantiates the move-assignment operator.\n\nFrom-SVN: r247284", "tree": {"sha": "e059c296b4ab7ccdaa36a3451e54b4355112adfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e059c296b4ab7ccdaa36a3451e54b4355112adfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9425300b415916c5474204fa1157c94612d9f8ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9425300b415916c5474204fa1157c94612d9f8ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9425300b415916c5474204fa1157c94612d9f8ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9425300b415916c5474204fa1157c94612d9f8ac/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a480422d0ad67c0ced6b1a3a21c228277381b053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a480422d0ad67c0ced6b1a3a21c228277381b053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a480422d0ad67c0ced6b1a3a21c228277381b053"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "b7d1727d5cada87f470cde521aa978e8a81835f1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9425300b415916c5474204fa1157c94612d9f8ac/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9425300b415916c5474204fa1157c94612d9f8ac/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9425300b415916c5474204fa1157c94612d9f8ac", "patch": "@@ -1,3 +1,11 @@\n+2017-04-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/23_containers/deque/allocator/move_assign-2.cc: Improve\n+\tcomment. Ensure first test works because allocator type propagates and\n+\tnot because is_always_equal is true.\n+\t* testsuite/23_containers/vector/52591.cc: Likewise. Restore original\n+\ttestcase that instantiates the move-assignment operator.\n+\n 2017-04-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/80506"}, {"sha": "65c98f00028e6980608fbf5a9bd078049c4c7fd8", "filename": "libstdc++-v3/testsuite/23_containers/deque/allocator/move_assign-2.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9425300b415916c5474204fa1157c94612d9f8ac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fallocator%2Fmove_assign-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9425300b415916c5474204fa1157c94612d9f8ac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fallocator%2Fmove_assign-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fallocator%2Fmove_assign-2.cc?ref=9425300b415916c5474204fa1157c94612d9f8ac", "patch": "@@ -25,9 +25,9 @@\n #include <type_traits>\n \n \n-// As an extension we allow move-assignment of std::deque when the element\n-// type is not MoveAssignable, as long as the allocator type propagates or\n-// is known to always compare equal.\n+// Move-assignment of std::deque<T> is allowed for non-MoveAssignable T when\n+// the allocator type propagates. As an extension we also allow it if the\n+// allocator type is known to always compare equal.\n \n struct C\n {\n@@ -43,6 +43,7 @@ struct A1 : std::allocator<T>\n   template<typename U> A1(const A1<U>&) { }\n \n   using propagate_on_container_move_assignment = std::true_type;\n+  using is_always_equal = std::false_type;\n };\n \n void test01()"}, {"sha": "20938fac5297ba748fe269fe333e38bdf80ac533", "filename": "libstdc++-v3/testsuite/23_containers/vector/52591.cc", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9425300b415916c5474204fa1157c94612d9f8ac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F52591.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9425300b415916c5474204fa1157c94612d9f8ac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F52591.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F52591.cc?ref=9425300b415916c5474204fa1157c94612d9f8ac", "patch": "@@ -23,15 +23,21 @@\n #include <memory>\n #include <type_traits>\n \n-// As an extension we allow move-assignment of std::vector when the element\n-// type is not MoveAssignable, as long as the allocator type propagates or\n-// is known to always compare equal.\n+// Move-assignment of std::vector<T> is allowed for non-MoveAssignable T when\n+// the allocator type propagates. As an extension we also allow it if the\n+// allocator type is known to always compare equal.\n \n struct C\n {\n     C& operator=(C&&) = delete;\n };\n \n+void test01()\n+{\n+    std::vector<C> a;\n+    a = std::vector<C>();\n+}\n+\n template<typename T>\n struct A1 : std::allocator<T>\n {\n@@ -41,9 +47,10 @@ struct A1 : std::allocator<T>\n   template<typename U> A1(const A1<U>&) { }\n \n   using propagate_on_container_move_assignment = std::true_type;\n+  using is_always_equal = std::false_type;\n };\n \n-void test01()\n+void test02()\n {\n   using test_type = std::vector<C, A1<C>>;\n   static_assert(std::is_nothrow_move_assignable<test_type>::value,\n@@ -62,7 +69,7 @@ struct A2 : std::allocator<T>\n   using is_always_equal = std::true_type;\n };\n \n-void test02()\n+void test03()\n {\n   using test_type = std::vector<C, A2<C>>;\n   static_assert(std::is_nothrow_move_assignable<test_type>::value,"}]}