{"sha": "428a31804b8c56fd8aee8b7db7adf087e350ad60", "node_id": "C_kwDOANBUbNoAKDQyOGEzMTgwNGI4YzU2ZmQ4YWVlOGI3ZGI3YWRmMDg3ZTM1MGFkNjA", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-04-21T05:43:25Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-04-21T07:38:21Z"}, "message": "Add error message for AltPattern in let statements\n\ngcc/rust/ChangeLog:\n\n\t* hir/rust-ast-lower-pattern.cc\n\t(ASTLoweringPattern::translate): Add is_let_top_level parameter.\n\t(ASTLoweringPattern::visit): Handle is_let_top_level.\n\t* hir/rust-ast-lower-pattern.h\n\t(class ASTLoweringPattern): Add is_let_top_level.\n\t* hir/rust-ast-lower-stmt.cc\n\t(ASTLoweringStmt::visit): Set is_let_top_level.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/let_alt.rs: New test.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "8d00af19d5aaf1fb0e41676685b77c3997d07385", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d00af19d5aaf1fb0e41676685b77c3997d07385"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/428a31804b8c56fd8aee8b7db7adf087e350ad60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/428a31804b8c56fd8aee8b7db7adf087e350ad60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/428a31804b8c56fd8aee8b7db7adf087e350ad60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/428a31804b8c56fd8aee8b7db7adf087e350ad60/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3013c408b0d34cd9e2f3906132f6b5ff26cd5966", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3013c408b0d34cd9e2f3906132f6b5ff26cd5966", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3013c408b0d34cd9e2f3906132f6b5ff26cd5966"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "b37d66395d50b4247ff51f60192eb0b67af07262", "filename": "gcc/rust/hir/rust-ast-lower-pattern.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428a31804b8c56fd8aee8b7db7adf087e350ad60/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428a31804b8c56fd8aee8b7db7adf087e350ad60/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.cc?ref=428a31804b8c56fd8aee8b7db7adf087e350ad60", "patch": "@@ -25,9 +25,10 @@ namespace HIR {\n ASTLoweringPattern::ASTLoweringPattern () : translated (nullptr) {}\n \n HIR::Pattern *\n-ASTLoweringPattern::translate (AST::Pattern *pattern)\n+ASTLoweringPattern::translate (AST::Pattern *pattern, bool is_let_top_level)\n {\n   ASTLoweringPattern resolver;\n+  resolver.is_let_top_level = is_let_top_level;\n   pattern->accept_vis (resolver);\n \n   rust_assert (resolver.translated != nullptr);\n@@ -315,6 +316,11 @@ ASTLoweringPattern::visit (AST::AltPattern &pattern)\n \n   translated\n     = new HIR::AltPattern (mapping, std::move (alts), pattern.get_locus ());\n+\n+  if (is_let_top_level)\n+    rust_error_at (pattern.get_locus (),\n+\t\t   \"top level alternate patterns are not allowed for %<let%> \"\n+\t\t   \"bindings - use an outer grouped pattern\");\n }\n \n } // namespace HIR"}, {"sha": "597a5d22f37113fecb9261f32b2b44c655cb0f8d", "filename": "gcc/rust/hir/rust-ast-lower-pattern.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428a31804b8c56fd8aee8b7db7adf087e350ad60/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428a31804b8c56fd8aee8b7db7adf087e350ad60/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h?ref=428a31804b8c56fd8aee8b7db7adf087e350ad60", "patch": "@@ -29,7 +29,8 @@ class ASTLoweringPattern : public ASTLoweringBase\n   using Rust::HIR::ASTLoweringBase::visit;\n \n public:\n-  static HIR::Pattern *translate (AST::Pattern *pattern);\n+  static HIR::Pattern *translate (AST::Pattern *pattern,\n+\t\t\t\t  bool is_let_top_level = false);\n \n   void visit (AST::IdentifierPattern &pattern) override;\n   void visit (AST::PathInExpression &pattern) override;\n@@ -48,6 +49,7 @@ class ASTLoweringPattern : public ASTLoweringBase\n   ASTLoweringPattern ();\n \n   HIR::Pattern *translated;\n+  bool is_let_top_level;\n };\n \n } // namespace HIR"}, {"sha": "dc14cb0608f65c2343eb3dda389b19f95964d8b7", "filename": "gcc/rust/hir/rust-ast-lower-stmt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428a31804b8c56fd8aee8b7db7adf087e350ad60/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428a31804b8c56fd8aee8b7db7adf087e350ad60/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.cc?ref=428a31804b8c56fd8aee8b7db7adf087e350ad60", "patch": "@@ -108,7 +108,7 @@ void\n ASTLoweringStmt::visit (AST::LetStmt &stmt)\n {\n   HIR::Pattern *variables\n-    = ASTLoweringPattern::translate (stmt.get_pattern ().get ());\n+    = ASTLoweringPattern::translate (stmt.get_pattern ().get (), true);\n   HIR::Type *type = stmt.has_type ()\n \t\t      ? ASTLoweringType::translate (stmt.get_type ().get ())\n \t\t      : nullptr;"}, {"sha": "1284627bb7297f8dcc74dc6b1387e3b71191137e", "filename": "gcc/testsuite/rust/compile/let_alt.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428a31804b8c56fd8aee8b7db7adf087e350ad60/gcc%2Ftestsuite%2Frust%2Fcompile%2Flet_alt.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428a31804b8c56fd8aee8b7db7adf087e350ad60/gcc%2Ftestsuite%2Frust%2Fcompile%2Flet_alt.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Flet_alt.rs?ref=428a31804b8c56fd8aee8b7db7adf087e350ad60", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let _a | _a = 12;\n+    // { dg-error \"top level alternate patterns are not allowed\" \"\" { target *-*-* } .-1 }\n+}"}]}