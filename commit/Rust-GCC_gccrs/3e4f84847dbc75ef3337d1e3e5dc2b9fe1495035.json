{"sha": "3e4f84847dbc75ef3337d1e3e5dc2b9fe1495035", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U0Zjg0ODQ3ZGJjNzVlZjMzMzdkMWUzZTVkYzJiOWZlMTQ5NTAzNQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-07-08T17:38:39Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-07-08T17:38:39Z"}, "message": "re PR target/46779 ([avr] wrong code generation for values held in R28/R29)\n\n\t\n\tPR target/46779\n\t* config/avr/avr.c (avr_hard_regno_mode_ok): Rewrite.\n\tIn particular, allow 8-bit values in r28 and r29.\n\t(avr_hard_regno_scratch_ok): Disallow any register that might be\n\tpart of the frame pointer.\n\t(avr_hard_regno_rename_ok): Same.\n\t(avr_legitimate_address_p): Don't allow SUBREGs.\n\nFrom-SVN: r176053", "tree": {"sha": "352b72fa59c3d530671bbc2af3247dd540259625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/352b72fa59c3d530671bbc2af3247dd540259625"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e4f84847dbc75ef3337d1e3e5dc2b9fe1495035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4f84847dbc75ef3337d1e3e5dc2b9fe1495035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e4f84847dbc75ef3337d1e3e5dc2b9fe1495035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4f84847dbc75ef3337d1e3e5dc2b9fe1495035/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "859f6cb4c614aa98677de15733634ea58d03ed87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/859f6cb4c614aa98677de15733634ea58d03ed87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/859f6cb4c614aa98677de15733634ea58d03ed87"}], "stats": {"total": 72, "additions": 53, "deletions": 19}, "files": [{"sha": "16451f8daa130bd7d6a1ec9e863fd577dec30bb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4f84847dbc75ef3337d1e3e5dc2b9fe1495035/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4f84847dbc75ef3337d1e3e5dc2b9fe1495035/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e4f84847dbc75ef3337d1e3e5dc2b9fe1495035", "patch": "@@ -1,3 +1,13 @@\n+2011-07-08  Georg-Johann Lay  <avr@gjlay.de>\n+\t\n+\tPR target/46779\n+\t* config/avr/avr.c (avr_hard_regno_mode_ok): Rewrite.\n+\tIn particular, allow 8-bit values in r28 and r29.\n+\t(avr_hard_regno_scratch_ok): Disallow any register that might be\n+\tpart of the frame pointer.\n+\t(avr_hard_regno_rename_ok): Same.\n+\t(avr_legitimate_address_p): Don't allow SUBREGs.\n+\n 2011-07-08  Julian Brown  <julian@codesourcery.com>\n \n \t* config/arm/neon.md (vec_shr_<mode>, vec_shl_<mode>): Disable in"}, {"sha": "5d1a127ea27480087f52409ba07400e119bc45ab", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 43, "deletions": 19, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4f84847dbc75ef3337d1e3e5dc2b9fe1495035/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4f84847dbc75ef3337d1e3e5dc2b9fe1495035/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=3e4f84847dbc75ef3337d1e3e5dc2b9fe1495035", "patch": "@@ -1109,8 +1109,7 @@ avr_legitimate_address_p (enum machine_mode mode, rtx x, bool strict)\n \t\t true_regnum (XEXP (x, 0)));\n       debug_rtx (x);\n     }\n-  if (!strict && GET_CODE (x) == SUBREG)\n-\tx = SUBREG_REG (x);\n+  \n   if (REG_P (x) && (strict ? REG_OK_FOR_BASE_STRICT_P (x)\n                     : REG_OK_FOR_BASE_NOSTRICT_P (x)))\n     r = POINTER_REGS;\n@@ -6118,26 +6117,30 @@ jump_over_one_insn_p (rtx insn, rtx dest)\n int\n avr_hard_regno_mode_ok (int regno, enum machine_mode mode)\n {\n-  /* Disallow QImode in stack pointer regs.  */\n-  if ((regno == REG_SP || regno == (REG_SP + 1)) && mode == QImode)\n-    return 0;\n-\n-  /* The only thing that can go into registers r28:r29 is a Pmode.  */\n-  if (regno == REG_Y && mode == Pmode)\n-    return 1;\n-\n-  /* Otherwise disallow all regno/mode combinations that span r28:r29.  */\n-  if (regno <= (REG_Y + 1) && (regno + GET_MODE_SIZE (mode)) >= (REG_Y + 1))\n-    return 0;\n-\n-  if (mode == QImode)\n+  /* NOTE: 8-bit values must not be disallowed for R28 or R29.\n+        Disallowing QI et al. in these regs might lead to code like\n+            (set (subreg:QI (reg:HI 28) n) ...)\n+        which will result in wrong code because reload does not\n+        handle SUBREGs of hard regsisters like this.\n+        This could be fixed in reload.  However, it appears\n+        that fixing reload is not wanted by reload people.  */\n+  \n+  /* Any GENERAL_REGS register can hold 8-bit values.  */\n+  \n+  if (GET_MODE_SIZE (mode) == 1)\n     return 1;\n \n-  /* Modes larger than QImode occupy consecutive registers.  */\n-  if (regno + GET_MODE_SIZE (mode) > FIRST_PSEUDO_REGISTER)\n+  /* FIXME: Ideally, the following test is not needed.\n+        However, it turned out that it can reduce the number\n+        of spill fails.  AVR and it's poor endowment with\n+        address registers is extreme stress test for reload.  */\n+  \n+  if (GET_MODE_SIZE (mode) >= 4\n+      && regno >= REG_X)\n     return 0;\n \n-  /* All modes larger than QImode should start in an even register.  */\n+  /* All modes larger than 8 bits should start in an even register.  */\n+  \n   return !(regno & 1);\n }\n \n@@ -6410,13 +6413,23 @@ avr_hard_regno_scratch_ok (unsigned int regno)\n       && !df_regs_ever_live_p (regno))\n     return false;\n \n+  /* Don't allow hard registers that might be part of the frame pointer.\n+     Some places in the compiler just test for [HARD_]FRAME_POINTER_REGNUM\n+     and don't care for a frame pointer that spans more than one register.  */\n+\n+  if ((!reload_completed || frame_pointer_needed)\n+      && (regno == REG_Y || regno == REG_Y + 1))\n+    {\n+      return false;\n+    }\n+\n   return true;\n }\n \n /* Return nonzero if register OLD_REG can be renamed to register NEW_REG.  */\n \n int\n-avr_hard_regno_rename_ok (unsigned int old_reg ATTRIBUTE_UNUSED,\n+avr_hard_regno_rename_ok (unsigned int old_reg,\n \t\t\t  unsigned int new_reg)\n {\n   /* Interrupt functions can only use registers that have already been\n@@ -6427,6 +6440,17 @@ avr_hard_regno_rename_ok (unsigned int old_reg ATTRIBUTE_UNUSED,\n       && !df_regs_ever_live_p (new_reg))\n     return 0;\n \n+  /* Don't allow hard registers that might be part of the frame pointer.\n+     Some places in the compiler just test for [HARD_]FRAME_POINTER_REGNUM\n+     and don't care for a frame pointer that spans more than one register.  */\n+\n+  if ((!reload_completed || frame_pointer_needed)\n+      && (old_reg == REG_Y || old_reg == REG_Y + 1\n+          || new_reg == REG_Y || new_reg == REG_Y + 1))\n+    {\n+      return 0;\n+    }\n+  \n   return 1;\n }\n "}]}