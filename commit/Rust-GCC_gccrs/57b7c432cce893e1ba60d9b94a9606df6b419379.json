{"sha": "57b7c432cce893e1ba60d9b94a9606df6b419379", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdiN2M0MzJjY2U4OTNlMWJhNjBkOWI5NGE5NjA2ZGY2YjQxOTM3OQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-10T12:02:25Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-10T21:55:44Z"}, "message": "Revert \"Get rid of all float-int special cases in validate_subreg.\"\n\nThis reverts commit d2874d905647a1d146dafa60199d440e837adc4d.\n\nPR target/102254\nPR target/102154\nPR target/102211", "tree": {"sha": "cec250a2b7b7c75ffb10a39d7abcf2112482b85c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cec250a2b7b7c75ffb10a39d7abcf2112482b85c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57b7c432cce893e1ba60d9b94a9606df6b419379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b7c432cce893e1ba60d9b94a9606df6b419379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b7c432cce893e1ba60d9b94a9606df6b419379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b7c432cce893e1ba60d9b94a9606df6b419379/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f75e52427846bc453544833b1d167f8568e7cfd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f75e52427846bc453544833b1d167f8568e7cfd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f75e52427846bc453544833b1d167f8568e7cfd8"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "ff3b4449b3758f6d2c6841c4dbba9903b97ac195", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b7c432cce893e1ba60d9b94a9606df6b419379/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b7c432cce893e1ba60d9b94a9606df6b419379/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=57b7c432cce893e1ba60d9b94a9606df6b419379", "patch": "@@ -922,6 +922,46 @@ validate_subreg (machine_mode omode, machine_mode imode,\n \n   poly_uint64 regsize = REGMODE_NATURAL_SIZE (imode);\n \n+  /* ??? This should not be here.  Temporarily continue to allow word_mode\n+     subregs of anything.  The most common offender is (subreg:SI (reg:DF)).\n+     Generally, backends are doing something sketchy but it'll take time to\n+     fix them all.  */\n+  if (omode == word_mode)\n+    ;\n+  /* ??? Similarly, e.g. with (subreg:DF (reg:TI)).  Though store_bit_field\n+     is the culprit here, and not the backends.  */\n+  else if (known_ge (osize, regsize) && known_ge (isize, osize))\n+    ;\n+  /* Allow component subregs of complex and vector.  Though given the below\n+     extraction rules, it's not always clear what that means.  */\n+  else if ((COMPLEX_MODE_P (imode) || VECTOR_MODE_P (imode))\n+\t   && GET_MODE_INNER (imode) == omode)\n+    ;\n+  /* ??? x86 sse code makes heavy use of *paradoxical* vector subregs,\n+     i.e. (subreg:V4SF (reg:SF) 0) or (subreg:V4SF (reg:V2SF) 0).  This\n+     surely isn't the cleanest way to represent this.  It's questionable\n+     if this ought to be represented at all -- why can't this all be hidden\n+     in post-reload splitters that make arbitrarily mode changes to the\n+     registers themselves.  */\n+  else if (VECTOR_MODE_P (omode)\n+\t   && GET_MODE_INNER (omode) == GET_MODE_INNER (imode))\n+    ;\n+  /* Subregs involving floating point modes are not allowed to\n+     change size.  Therefore (subreg:DI (reg:DF) 0) is fine, but\n+     (subreg:SI (reg:DF) 0) isn't.  */\n+  else if (FLOAT_MODE_P (imode) || FLOAT_MODE_P (omode))\n+    {\n+      if (! (known_eq (isize, osize)\n+\t     /* LRA can use subreg to store a floating point value in\n+\t\tan integer mode.  Although the floating point and the\n+\t\tinteger modes need the same number of hard registers,\n+\t\tthe size of floating point mode can be less than the\n+\t\tinteger mode.  LRA also uses subregs for a register\n+\t\tshould be used in different mode in on insn.  */\n+\t     || lra_in_progress))\n+\treturn false;\n+    }\n+\n   /* Paradoxical subregs must have offset zero.  */\n   if (maybe_gt (osize, isize))\n     return known_eq (offset, 0U);"}]}