{"sha": "a222efd88a856f71d4e7dcb14d97d5f5a3aadce3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIyMmVmZDg4YTg1NmY3MWQ0ZTdkY2IxNGQ5N2Q1ZjVhM2FhZGNlMw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-10-08T15:58:06Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-10-08T15:58:06Z"}, "message": "re PR libstdc++/33489 (parallel v3: not default constructible issues)\n\n2007-10-08  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/33489\t\n\t* include/parallel/multiseq_selection.h: Remove default constructed\n\tvalue_type.\n\t* include/parallel/partition.h: \n\t* include/parallel/partial_sum.h: Format.\n\nFrom-SVN: r129132", "tree": {"sha": "3599b4fee15fd508751cd48092272e0556525d2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3599b4fee15fd508751cd48092272e0556525d2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a222efd88a856f71d4e7dcb14d97d5f5a3aadce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a222efd88a856f71d4e7dcb14d97d5f5a3aadce3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a222efd88a856f71d4e7dcb14d97d5f5a3aadce3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a222efd88a856f71d4e7dcb14d97d5f5a3aadce3/comments", "author": null, "committer": null, "parents": [{"sha": "b4d4a7d4b09fe843af40348786bdaae7dac4281e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d4a7d4b09fe843af40348786bdaae7dac4281e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4d4a7d4b09fe843af40348786bdaae7dac4281e"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "32eeadf139d73ad95975b2619708c76e3c1dc03d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a222efd88a856f71d4e7dcb14d97d5f5a3aadce3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a222efd88a856f71d4e7dcb14d97d5f5a3aadce3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a222efd88a856f71d4e7dcb14d97d5f5a3aadce3", "patch": "@@ -1,3 +1,11 @@\n+2007-10-08  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/33489\t\n+\t* include/parallel/multiseq_selection.h: Remove default constructed\n+\tvalue_type.\n+\t* include/parallel/partition.h: \n+\t* include/parallel/partial_sum.h: Format.\n+\n 2007-10-08  Johannes Singler  <singler@ira.uka.de>\n \n         * include/parallel/multiway_merge.h: Added reference to paper.\n@@ -61,7 +69,8 @@\n \n \t* include/bits/stl_algobase.h (_GLIBCXX_MOVE): Add.\n \t(swap, __iter_swap): Use it.\n-\t* testsuite/25_algorithms/rotate/moveable.cc: Remove dg-require-rvalref.\n+\t* testsuite/25_algorithms/rotate/moveable.cc: Remove \n+\tdg-require-rvalref.\n \t* testsuite/25_algorithms/remove/moveable.cc: Likewise.\n \t* testsuite/25_algorithms/partition/moveable.cc: Likewise. \n \t* testsuite/25_algorithms/swap_ranges/moveable.cc: Likewise."}, {"sha": "31ded50733bc37df5be770ff72b2918de4592a4d", "filename": "libstdc++-v3/include/parallel/partial_sum.h", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a222efd88a856f71d4e7dcb14d97d5f5a3aadce3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a222efd88a856f71d4e7dcb14d97d5f5a3aadce3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h?ref=a222efd88a856f71d4e7dcb14d97d5f5a3aadce3", "patch": "@@ -128,26 +128,34 @@ namespace __gnu_parallel\n       if (id == 0)\n \t{\n \t  *result = *begin;\n-\t  parallel_partial_sum_basecase(begin + 1, begin + borders[1], result + 1, bin_op, *begin);\n+\t  parallel_partial_sum_basecase(begin + 1, begin + borders[1], \n+\t\t\t\t\tresult + 1, bin_op, *begin);\n \t  sums[0] = *(result + borders[1] - 1);\n \t}\n       else\n \t{\n-\t  sums[id] = std::accumulate(begin + borders[id] + 1, begin + borders[id + 1], *(begin + borders[id]), bin_op, __gnu_parallel::sequential_tag());\n+\t  sums[id] = std::accumulate(begin + borders[id] + 1, \n+\t\t\t\t     begin + borders[id + 1], \n+\t\t\t\t     *(begin + borders[id]), \n+\t\t\t\t     bin_op, __gnu_parallel::sequential_tag());\n \t}\n \n #pragma omp barrier\n \n #pragma omp single\n-      parallel_partial_sum_basecase(sums + 1, sums + num_threads, sums + 1, bin_op, sums[0]);\n+      parallel_partial_sum_basecase(sums + 1, sums + num_threads, sums + 1, \n+\t\t\t\t    bin_op, sums[0]);\n \n #pragma omp barrier\n \n       // Still same team.\n-      parallel_partial_sum_basecase(begin + borders[id + 1], begin + borders[id + 2], result + borders[id + 1], bin_op, sums[id]);\n+      parallel_partial_sum_basecase(begin + borders[id + 1], \n+\t\t\t\t    begin + borders[id + 2], \n+\t\t\t\t    result + borders[id + 1], bin_op, \n+\t\t\t\t    sums[id]);\n     }\n \n-    delete[] sums;\n+    delete [] sums;\n \n     return result + n;\n   }"}, {"sha": "70bff8e0af0532b003e72e2b79fb52d4df1fc34a", "filename": "libstdc++-v3/include/parallel/partition.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a222efd88a856f71d4e7dcb14d97d5f5a3aadce3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a222efd88a856f71d4e7dcb14d97d5f5a3aadce3/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h?ref=a222efd88a856f71d4e7dcb14d97d5f5a3aadce3", "patch": "@@ -70,7 +70,9 @@ namespace __gnu_parallel\n \n     // Shared.\n     _GLIBCXX_VOLATILE difference_type left = 0, right = n - 1;\n-    _GLIBCXX_VOLATILE difference_type leftover_left, leftover_right, leftnew, rightnew;\n+    _GLIBCXX_VOLATILE difference_type leftover_left, leftover_right;\n+    _GLIBCXX_VOLATILE difference_type leftnew, rightnew;\n+\n     bool* reserved_left, * reserved_right;\n \n     reserved_left = new bool[max_num_threads];\n@@ -299,7 +301,8 @@ namespace __gnu_parallel\n    */\n   template<typename RandomAccessIterator, typename Comparator>\n   void \n-  parallel_nth_element(RandomAccessIterator begin, RandomAccessIterator nth, RandomAccessIterator end, Comparator comp)\n+  parallel_nth_element(RandomAccessIterator begin, RandomAccessIterator nth, \n+\t\t       RandomAccessIterator end, Comparator comp)\n   {\n     typedef std::iterator_traits<RandomAccessIterator> traits_type;\n     typedef typename traits_type::value_type value_type;\n@@ -308,7 +311,6 @@ namespace __gnu_parallel\n     _GLIBCXX_CALL(end - begin)\n \n     RandomAccessIterator split;\n-    value_type pivot;\n     random_number rng;\n \n     difference_type minimum_length = std::max<difference_type>(2, Settings::partition_minimal_n);"}]}