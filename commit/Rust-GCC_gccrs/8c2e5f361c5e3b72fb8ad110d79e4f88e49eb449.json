{"sha": "8c2e5f361c5e3b72fb8ad110d79e4f88e49eb449", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMyZTVmMzYxYzVlM2I3MmZiOGFkMTEwZDc5ZTRmODhlNDllYjQ0OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-07-14T12:55:15Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-07-14T12:55:15Z"}, "message": "random.tcc (struct _To_Unsigned_Type): Add.\n\n2006-07-14  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/random.tcc (struct _To_Unsigned_Type): Add.\n\t(subtract_with_carry<>::seed(_Gen&, false_type)): Use an\n\tunsigned type in the loop, fix factor multiplier, take g\n\tinvocations modulo 2^32.\n\n\t* include/tr1/random.tcc (subtract_with_carry<>::\n\tseed(unsigned long)): Fix value == 0 special case.\n\n\t* include/tr1/random (struct _Shift): Fix for large shifts.\n\nFrom-SVN: r115439", "tree": {"sha": "3320efe58f14bef26eb98c53b44808c3a493fd22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3320efe58f14bef26eb98c53b44808c3a493fd22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c2e5f361c5e3b72fb8ad110d79e4f88e49eb449", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2e5f361c5e3b72fb8ad110d79e4f88e49eb449", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c2e5f361c5e3b72fb8ad110d79e4f88e49eb449", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2e5f361c5e3b72fb8ad110d79e4f88e49eb449/comments", "author": null, "committer": null, "parents": [{"sha": "4f543d151efddbd4c7944c9f87cad8b3321f6dc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f543d151efddbd4c7944c9f87cad8b3321f6dc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f543d151efddbd4c7944c9f87cad8b3321f6dc6"}], "stats": {"total": 93, "additions": 65, "deletions": 28}, "files": [{"sha": "b9420e0c63ae1e125174758011466d738958b2f3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2e5f361c5e3b72fb8ad110d79e4f88e49eb449/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2e5f361c5e3b72fb8ad110d79e4f88e49eb449/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8c2e5f361c5e3b72fb8ad110d79e4f88e49eb449", "patch": "@@ -1,3 +1,15 @@\n+2006-07-14  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/random.tcc (struct _To_Unsigned_Type): Add.\n+\t(subtract_with_carry<>::seed(_Gen&, false_type)): Use an\n+\tunsigned type in the loop, fix factor multiplier, take g\n+\tinvocations modulo 2^32.\n+\n+\t* include/tr1/random.tcc (subtract_with_carry<>::\n+\tseed(unsigned long)): Fix value == 0 special case.\n+\n+\t* include/tr1/random (struct _Shift): Fix for large shifts.\n+\n 2006-07-13  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/performance/21_strings/string_copy_cons_and_dest.cc: New."}, {"sha": "581098603713320854614daa09d9e47fc558a118", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2e5f361c5e3b72fb8ad110d79e4f88e49eb449/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2e5f361c5e3b72fb8ad110d79e4f88e49eb449/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=8c2e5f361c5e3b72fb8ad110d79e4f88e49eb449", "patch": "@@ -125,7 +125,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       }\n \n     template<typename _UIntType, int __w, bool = \n-\t     __w != std::numeric_limits<_UIntType>::digits>\n+\t     __w < std::numeric_limits<_UIntType>::digits>\n       struct _Shift\n       { static const _UIntType __value = 0; };\n "}, {"sha": "a3c263d206b6c45f514d868a0c52d6f25be81b32", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 52, "deletions": 27, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2e5f361c5e3b72fb8ad110d79e4f88e49eb449/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2e5f361c5e3b72fb8ad110d79e4f88e49eb449/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=8c2e5f361c5e3b72fb8ad110d79e4f88e49eb449", "patch": "@@ -102,6 +102,28 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t  2 + std::numeric_limits<_RealType>::digits * 3010/10000;\n       };\n \n+    template<typename _ValueT>\n+      struct _To_Unsigned_Type\n+      { typedef _ValueT _Type; };\n+\n+    template<>\n+      struct _To_Unsigned_Type<short>\n+      { typedef unsigned short _Type; };\n+\n+    template<>\n+      struct _To_Unsigned_Type<int>\n+      { typedef unsigned int _Type; };\n+\n+    template<>\n+      struct _To_Unsigned_Type<long>\n+      { typedef unsigned long _Type; };\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+    template<>\n+      struct _To_Unsigned_Type<long long>\n+      { typedef unsigned long long _Type; };\n+#endif\n+\n   } // namespace _Private\n \n \n@@ -347,6 +369,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     subtract_with_carry<_IntType, __m, __s, __r>::\n     seed(unsigned long __value)\n     {\n+      if (__value == 0)\n+\t__value = 19780503;\n+\n       std::tr1::linear_congruential<unsigned long, 40014, 0, 2147483563>\n \t__lcg(__value);\n \n@@ -357,35 +382,35 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       _M_p = 0;\n     }\n \n-  //\n-  // This implementation differs from the tr1 spec because the tr1 spec refused\n-  // to make any sense to me:  the exponent of the factor in the spec goes from\n-  // 1 to (n-1), but it would only make sense to me if it went from 0 to (n-1).\n-  //\n-  // This algorithm is still problematic because it can overflow left right and\n-  // center.\n-  //\n   template<typename _IntType, _IntType __m, int __s, int __r>\n     template<class _Gen>\n-    void\n-    subtract_with_carry<_IntType, __m, __s, __r>::\n-    seed(_Gen& __gen, false_type)\n-    {\n-      const int __n = (std::numeric_limits<_IntType>::digits + 31) / 32;\n-      for (int __i = 0; __i < long_lag; ++__i)\n-\t{\n-\t  _M_x[__i] = 0;\n-\t  unsigned long __factor = 1;\n-\t  for (int __j = 0; __j < __n; ++__j)\n-\t    {\n-\t      _M_x[__i] += __gen() * __factor;\n-\t      __factor *= 0x80000000;\n-\t    }\n-\t  _M_x[__i] = _Private::__mod<_IntType, 1, 0, modulus>(_M_x[__i]);\n-\t}\n-      _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n-      _M_p = 0;\n-    }\n+      void\n+      subtract_with_carry<_IntType, __m, __s, __r>::\n+      seed(_Gen& __gen, false_type)\n+      {\n+\tconst int __n = (std::numeric_limits<_IntType>::digits + 31) / 32;\n+\n+\ttypedef typename _Private::_Select<(sizeof(unsigned) == 4),\n+\t  unsigned, unsigned long>::_Type _UInt32Type;\n+\n+\ttypedef typename _Private::_To_Unsigned_Type<_IntType>::_Type\n+\t  _UIntType;\n+\n+\tfor (int __i = 0; __i < long_lag; ++__i)\n+\t  {\n+\t    _UIntType __tmp = 0;\n+\t    _UIntType __factor = 1;\n+\t    for (int __j = 0; __j < __n; ++__j)\n+\t      {\n+\t\t__tmp += (_Private::__mod<_UInt32Type, 1, 0, 0>(__gen())\n+\t\t\t  * __factor);\n+\t\t__factor *= _Private::_Shift<_UIntType, 32>::__value;\n+\t      }\n+\t    _M_x[__i] = _Private::__mod<_UIntType, 1, 0, modulus>(__tmp);\n+\t  }\n+\t_M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n+\t_M_p = 0;\n+      }\n \n   template<typename _IntType, _IntType __m, int __s, int __r>\n     typename subtract_with_carry<_IntType, __m, __s, __r>::result_type"}]}