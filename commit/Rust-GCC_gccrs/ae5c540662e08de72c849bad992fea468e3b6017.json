{"sha": "ae5c540662e08de72c849bad992fea468e3b6017", "node_id": "C_kwDOANBUbNoAKGFlNWM1NDA2NjJlMDhkZTcyYzg0OWJhZDk5MmZlYTQ2OGUzYjYwMTc", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-22T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-22T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "16f54108289e470ff60edc858ab2eec11553f423", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16f54108289e470ff60edc858ab2eec11553f423"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae5c540662e08de72c849bad992fea468e3b6017", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5c540662e08de72c849bad992fea468e3b6017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5c540662e08de72c849bad992fea468e3b6017", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5c540662e08de72c849bad992fea468e3b6017/comments", "author": null, "committer": null, "parents": [{"sha": "394f60e6ed9fbf3a833024041ec8ec26bde5aa3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394f60e6ed9fbf3a833024041ec8ec26bde5aa3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/394f60e6ed9fbf3a833024041ec8ec26bde5aa3b"}], "stats": {"total": 344, "additions": 343, "deletions": 1}, "files": [{"sha": "4cead4480b4f1ac1111e6a4fd5abdfe08e7a7801", "filename": "gcc/ChangeLog", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5c540662e08de72c849bad992fea468e3b6017/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5c540662e08de72c849bad992fea468e3b6017/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae5c540662e08de72c849bad992fea468e3b6017", "patch": "@@ -1,3 +1,131 @@\n+2021-10-21  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/98667\n+\t* doc/invoke.texi: Document -fcf-protection requires i686 or\n+\tnew.\n+\n+2021-10-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/102764\n+\t* cfgexpand.c (expand_gimple_basic_block): Robustify latest change.\n+\n+2021-10-21  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (__STRUCTN): Delete function\n+\tmacro and all invocations.\n+\n+2021-10-21  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* doc/invoke.texi (ranger-debug): Document.\n+\t* flag-types.h (enum ranger_debug): New.\n+\t(enum evrp_mode): Remove debug values.\n+\t* gimple-range-cache.cc (DEBUG_RANGE_CACHE): Use new debug flag.\n+\t* gimple-range-gori.cc (gori_compute::gori_compute): Ditto.\n+\t* gimple-range.cc (gimple_ranger::gimple_ranger): Ditto.\n+\t* gimple-ssa-evrp.c (hybrid_folder::choose_value): Ditto.\n+\t(execute_early_vrp): Use evrp-mode directly.\n+\t* params.opt (enum evrp_mode): Remove debug values.\n+\t(ranger-debug): New.\n+\t(ranger-logical-depth): Relocate to be in alphabetical order.\n+\n+2021-10-21  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* doc/invoke.texi: (vrp1-mode, vrp2-mode): Document.\n+\t* flag-types.h: (enum vrp_mode): New.\n+\t* params.opt: (vrp1-mode, vrp2-mode): New.\n+\t* tree-vrp.c (vrp_pass_num): New.\n+\t(pass_vrp::pass_vrp): Set pass number.\n+\t(pass_vrp::execute): Choose which VRP mode to execute.\n+\n+2021-10-21  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-ssa-evrp.c (class rvrp_folder): Move to tree-vrp.c.\n+\t(execute_early_vrp): For ranger only mode, invoke ranger_vrp.\n+\t* tree-vrp.c (class rvrp_folder): Relocate here.\n+\t(execute_ranger_vrp): New.\n+\t* tree-vrp.h (execute_ranger_vrp): Export.\n+\n+2021-10-21  Martin Liska  <mliska@suse.cz>\n+\n+\tPR debug/102585\n+\tPR bootstrap/102766\n+\t* opts.c (finish_options): Process flag_var_tracking* options\n+\there as they can be adjusted by optimize attribute.\n+\tProcess also flag_syntax_only and flag_gtoggle.\n+\t* toplev.c (process_options): Remove it here.\n+\t* common.opt: Make debug_nonbind_markers_p as PerFunction\n+\tattribute as it depends on optimization level.\n+\n+2021-10-21  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/102505\n+\t* tree-sra.c (totally_scalarize_subtree): Check that the\n+\tencountered field fits within the acces we would like to put it\n+\tin.\n+\n+2021-10-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c\n+\t(back_threader::maybe_register_path): Remove circular paths check.\n+\n+2021-10-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* toplev.c (process_options): Move the initial debug_hooks\n+\tsetting ...\n+\t(toplev::main): ... before the call of the post_options\n+\tlanghook.\n+\n+2021-10-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102847\n+\t* tree-vect-stmts.c (vect_model_load_cost): Add the scalar\n+\tload cost in the prologue for VMAT_INVARIANT.\n+\n+2021-10-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102847\n+\t* tree-vect-stmts.c (vect_model_load_cost): Explicitely\n+\thandle VMAT_INVARIANT as a splat in the prologue.\n+\n+2021-10-21  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\tPR target/102812\n+\t* config/i386/i386.c (ix86_get_ssemov): Adjust HFmode vector\n+\tmove to use the same logic as HImode.\n+\n+2021-10-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_build_slp_tree_1): Remove\n+\tsuperfluous gimple_call_nothrow_p check.\n+\n+2021-10-21  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* tree-cfg.c (maybe_remove_writeonly_store): Add dce_ssa_names argument.\n+\tMark the ssa-name of the rhs as one to be removed.\n+\t(execute_fixup_cfg): Update call to maybe_remove_writeonly_store.\n+\tCall simple_dce_from_worklist at the end to a simple dce.\n+\n+2021-10-21  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* tree-cfg.c (maybe_remove_writeonly_store): New function\n+\tfactored out from ...\n+\t(execute_fixup_cfg): Here. Call maybe_remove_writeonly_store.\n+\n+2021-10-21  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* tree-cfg.c (execute_fixup_cfg): Remove comment\n+\tabout standalone pass.\n+\n+2021-10-21  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* tree-cfg.c (execute_fixup_cfg): Output when the statement\n+\tis removed when it is a write only var.\n+\n+2021-10-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (back_threader::maybe_register_path):\n+\tAvoid threading circular paths.\n+\n 2021-10-20  Alex Coplan  <alex.coplan@arm.com>\n \n \t* calls.c (initialize_argument_information): Remove some dead"}, {"sha": "a8f3741455426537202074ba6f31ef6513f2af23", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5c540662e08de72c849bad992fea468e3b6017/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5c540662e08de72c849bad992fea468e3b6017/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ae5c540662e08de72c849bad992fea468e3b6017", "patch": "@@ -1 +1 @@\n-20211021\n+20211022"}, {"sha": "9044f662c28f642d47a36533061ebf9f181f673d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5c540662e08de72c849bad992fea468e3b6017/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5c540662e08de72c849bad992fea468e3b6017/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ae5c540662e08de72c849bad992fea468e3b6017", "patch": "@@ -1,3 +1,9 @@\n+2021-10-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/64888\n+\t* c-omp.c (c_omp_predefined_variable): Return true also for\n+\tubsan_create_data created artificial variables.\n+\n 2021-10-14  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-format.c (printf_length_specs, scanf_length_specs)"}, {"sha": "1630a1e2552c962c50b4229a95a1cab9f8d5e349", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5c540662e08de72c849bad992fea468e3b6017/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5c540662e08de72c849bad992fea468e3b6017/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ae5c540662e08de72c849bad992fea468e3b6017", "patch": "@@ -1,3 +1,33 @@\n+2021-10-21  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* decl.c (gfc_match_end): Add COMP_OMP_STRICTLY_STRUCTURED_BLOCK case\n+\ttogether with COMP_BLOCK.\n+\t* parse.c (parse_omp_structured_block): Change return type to\n+\t'gfc_statement', add handling for strictly-structured block case, adjust\n+\trecursive calls to parse_omp_structured_block.\n+\t(parse_executable): Adjust calls to parse_omp_structured_block.\n+\t* parse.h (enum gfc_compile_state): Add\n+\tCOMP_OMP_STRICTLY_STRUCTURED_BLOCK.\n+\t* trans-openmp.c (gfc_trans_omp_workshare): Add EXEC_BLOCK case\n+\thandling.\n+\n+2021-10-21  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR fortran/94070\n+\t* expr.c (gfc_simplify_expr): Handle GFC_ISYM_SHAPE along with\n+\tGFC_ISYM_LBOUND and GFC_ISYM_UBOUND.\n+\t* trans-array.c (gfc_conv_ss_startstride): Likewise.\n+\t(set_loop_bounds): Likewise.\n+\t* trans-intrinsic.c (gfc_trans_intrinsic_bound): Extend to\n+\thandle SHAPE.  Correct logic for zero-size special cases and\n+\tdetecting assumed-rank arrays associated with an assumed-size\n+\targument.\n+\t(gfc_conv_intrinsic_shape): Deleted.\n+\t(gfc_conv_intrinsic_function): Handle GFC_ISYM_SHAPE like\n+\tGFC_ISYM_LBOUND and GFC_ISYM_UBOUND.\n+\t(gfc_add_intrinsic_ss_code): Likewise.\n+\t(gfc_walk_intrinsic_bound): Likewise.\n+\n 2021-10-20  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* openmp.c (gfc_match_omp_clause_reduction): Add 'openmp_target' default"}, {"sha": "abffde15a20b764b3c444a94e362e4523eeb030b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5c540662e08de72c849bad992fea468e3b6017/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5c540662e08de72c849bad992fea468e3b6017/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae5c540662e08de72c849bad992fea468e3b6017", "patch": "@@ -1,3 +1,69 @@\n+2021-10-21  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR testsuite/102840\n+\t* gcc.target/i386/pr22076.c: Adjust to avoid compile time optimization.\n+\n+2021-10-21  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-13.c: Adjust scan-assembler for\n+\txmm/ymm load/store.\n+\n+2021-10-21  Martin Liska  <mliska@suse.cz>\n+\n+\tPR debug/102585\n+\tPR bootstrap/102766\n+\t* gcc.dg/pr102585.c: New test.\n+\n+2021-10-21  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/102505\n+\t* g++.dg/torture/pr102505.C: New test.\n+\n+2021-10-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gfortran.dg/gomp/strictly-structured-block-1.f90: Use call do_work\n+\tinstead of x = x + 1 in places where the latter could be a data race.\n+\t* gfortran.dg/gomp/strictly-structured-block-2.f90: Likewise.\n+\t* gfortran.dg/gomp/strictly-structured-block-3.f90: Likewise.\n+\n+2021-10-21  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\tPR target/102812\n+\t* gcc.target/i386/pr102812.c: New test.\n+\n+2021-10-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/64888\n+\t* c-c++-common/ubsan/pr64888.c: New test.\n+\n+2021-10-21  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* gcc.dg/pr36902.c: Move buf to be a non-static variable.\n+\n+2021-10-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/102861\n+\t* gcc.dg/vect/bb-slp-16.c: Revert previous change, scan\n+\tthe vect dump instead.\n+\n+2021-10-21  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/cancel-1.f90: Adjust testcase.\n+\t* gfortran.dg/gomp/nesting-3.f90: Adjust testcase.\n+\t* gfortran.dg/gomp/strictly-structured-block-1.f90: New test.\n+\t* gfortran.dg/gomp/strictly-structured-block-2.f90: New test.\n+\t* gfortran.dg/gomp/strictly-structured-block-3.f90: New test.\n+\n+2021-10-21  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR fortran/94070\n+\t* gfortran.dg/c-interop/shape-bindc.f90: New test.\n+\t* gfortran.dg/c-interop/shape-poly.f90: New test.\n+\t* gfortran.dg/c-interop/size-bindc.f90: New test.\n+\t* gfortran.dg/c-interop/size-poly.f90: New test.\n+\t* gfortran.dg/c-interop/ubound-bindc.f90: New test.\n+\t* gfortran.dg/c-interop/ubound-poly.f90: New test.\n+\n 2021-10-20  Tamar Christina  <tamar.christina@arm.com>\n \n \t* gcc.target/aarch64/mvn-cmeq0-1.c: New test."}, {"sha": "1fa12d816108c4980a44247b7a863a00e5e632f2", "filename": "libcody/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5c540662e08de72c849bad992fea468e3b6017/libcody%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5c540662e08de72c849bad992fea468e3b6017/libcody%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2FChangeLog?ref=ae5c540662e08de72c849bad992fea468e3b6017", "patch": "@@ -1,3 +1,8 @@\n+2021-10-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* netserver.cc (ListenInet6): Set pointer to null after\n+\tdeallocation.\n+\n 2021-04-06  Nathan Sidwell  <nathan@acm.org>\n \n \t* LICENSE.gcc: Delete."}, {"sha": "c59b31a766ebe8d97e58bc6e0b776122ba0d4b99", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5c540662e08de72c849bad992fea468e3b6017/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5c540662e08de72c849bad992fea468e3b6017/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=ae5c540662e08de72c849bad992fea468e3b6017", "patch": "@@ -1,3 +1,9 @@\n+2021-10-21  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* libgomp.texi (Support of strictly structured blocks in Fortran):\n+\tAdjust to 'Y'.\n+\t* testsuite/libgomp.fortran/task-reduction-16.f90: Adjust testcase.\n+\n 2021-10-20  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* testsuite/libgomp.fortran/target-in-reduction-1.f90: New test."}, {"sha": "ba9717f480fe1357d0761185171b0dfb23b7af3c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5c540662e08de72c849bad992fea468e3b6017/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5c540662e08de72c849bad992fea468e3b6017/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ae5c540662e08de72c849bad992fea468e3b6017", "patch": "@@ -1,3 +1,104 @@\n+2021-10-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/doxygen/stdheader.cc: Refactor. Use C++23. Add new\n+\theaders.\n+\t* scripts/run_doxygen: Fix post-processing of #include\n+\tdirectives in man pages. Use new xg++ to compile helper program.\n+\n+2021-10-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/mofunc_impl.h: Add doxygen comments.\n+\t* include/std/functional: Likewise.\n+\n+2021-10-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/alloc_traits.h: Suppress doxygen documentation.\n+\t* include/bits/allocated_ptr.h: Likewise.\n+\t* include/bits/enable_special_members.h: Likewise.\n+\t* include/bits/hashtable.h: Likewise.\n+\t* include/bits/hashtable_policy.h: Likewise.\n+\t* include/bits/uses_allocator.h: Likewise.\n+\t* include/bits/node_handle.h: Document node handles and suppress\n+\tdocumentation for protected members.\n+\t* include/std/any: Suppress documentation for implementation\n+\tdetails.\n+\n+2021-10-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/102358\n+\t* include/bits/stl_iterator.h (__niter_base): Make constexpr\n+\tfor C++20.\n+\t(__miter_base): Likewise.\n+\t* testsuite/25_algorithms/move/constexpr.cc: New test.\n+\n+2021-10-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (istream_view): Replace this function\n+\ttemplate with an alias template as per P2432R1.\n+\t(wistream_view): Define as per P2432R1.\n+\t(views::_Istream, views::istream): Likewise.\n+\t* testsuite/std/ranges/istream_view.cc (test07): New test.\n+\n+2021-10-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_util.h (views::_Drop): Forward declare.\n+\t(subrange): Befriend views::_Drop.\n+\t(subrange::_S_store_size): Declare constexpr instead of just\n+\tconst, remove obsolete comment.\n+\t* include/std/ranges (views::__detail::__is_empty_view): Define.\n+\t(views::__detail::__is_basic_string_view): Likewise.\n+\t(views::__detail::__is_subrange): Likewise.\n+\t(views::__detail::__is_iota_view): Likewise.\n+\t(views::__detail::__can_take_view): Rename template parm _Tp to _Dp.\n+\t(views::_Take): Rename template parm _Tp to _Dp, make it non-deducible\n+\tand fix it to range_difference_t<_Range>.  Implement P1739R4 and\n+\tLWG 3407 changes.\n+\t(views::__detail::__can_drop_view): Rename template parm _Tp to _Dp.\n+\t(views::_Drop): As with views::_Take.\n+\t(views::_Counted): Implement P1739R4 changes.\n+\t* include/std/span (__detail::__is_std_span): Rename to ...\n+\t(__detail::__is_span): ... this and turn it into a variable\n+\ttemplate.\n+\t(__detail::__is_std_array): Turn it into a variable template.\n+\t(span::span): Adjust uses of __is_std_span and __is_std_array\n+\taccordingly.\n+\t* testsuite/std/ranges/adaptors/p1739.cc: New test.\n+\n+2021-10-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/stl_iterator.h (common_iterator::__arrow_proxy):\n+\tMake fully constexpr as per LWG 3595.\n+\t(common_iterator::__postfix_proxy): Likewise.\n+\n+2021-10-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (lazy_split_view::base): Add forward_range\n+\tconstraint as per LWG 3591.\n+\t(lazy_split_view::begin, lazy_split_view::end): Also check\n+\tsimpleness of _Pattern as per LWG 3592.\n+\t(split_view::base): Relax copyable constraint as per LWG 3590.\n+\n+2021-10-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (join_view::__iter_cat::_S_iter_cat): Adjust\n+\tcriteria for returning bidirectional_iterator_tag as per LWG 3535.\n+\t(join_view::_Iterator::_S_iter_concept): Likewise.\n+\n+2021-10-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_base.h (viewable_range): Adjust as per\n+\tLWG 3481.\n+\t* testsuite/std/ranges/adaptors/all.cc (test07): New test.\n+\n+2021-10-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/102863\n+\t* include/std/optional (optional::and_then, optional::transform):\n+\tRemove requires-clause.\n+\t* testsuite/20_util/optional/monadic/and_then.cc: Check\n+\toverload resolution doesn't cause errors.\n+\t* testsuite/20_util/optional/monadic/transform.cc: Likewise.\n+\n 2021-10-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/20_util/optional/monadic/transform.cc: Check that"}]}