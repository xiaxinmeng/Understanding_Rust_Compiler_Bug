{"sha": "a8566e938ca4c6d5c8a631397e15216d0d6a720f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg1NjZlOTM4Y2E0YzZkNWM4YTYzMTM5N2UxNTIxNmQwZDZhNzIwZg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2019-06-14T18:31:44Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2019-06-14T18:31:44Z"}, "message": "Darwin, opts processing - Initial tidy.\n\nThis change adds RejectNegative in a number of places it was needed,\nreorders the opts into two groups (one general and one driver-only).\nWe also add a minimal description to each opt, and note some that\nare now obsolete.  The only functional change is to permit\n-mtarget-linker= as an alias of -mtarget-linker.\n\ngcc/\n\n2019-06-14  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* config/darwin.opt: Add RejectNegative where needed, reorder\n\tand add minimal functional descriptions.\n\nFrom-SVN: r272308", "tree": {"sha": "046854fc5337b97ac1f9392ed07b82358f75dffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/046854fc5337b97ac1f9392ed07b82358f75dffd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8566e938ca4c6d5c8a631397e15216d0d6a720f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8566e938ca4c6d5c8a631397e15216d0d6a720f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8566e938ca4c6d5c8a631397e15216d0d6a720f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8566e938ca4c6d5c8a631397e15216d0d6a720f/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fa31ee92a75cb1afc321d7016c3c7ab28d7899c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa31ee92a75cb1afc321d7016c3c7ab28d7899c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa31ee92a75cb1afc321d7016c3c7ab28d7899c"}], "stats": {"total": 402, "additions": 243, "deletions": 159}, "files": [{"sha": "95b87a6a0bca601a64f8bb3333a827bd2619b33b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8566e938ca4c6d5c8a631397e15216d0d6a720f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8566e938ca4c6d5c8a631397e15216d0d6a720f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8566e938ca4c6d5c8a631397e15216d0d6a720f", "patch": "@@ -1,3 +1,8 @@\n+2019-06-14  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin.opt: Add RejectNegative where needed, reorder\n+\tand add minimal functional descriptions.\n+\n 2019-06-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR rtl-optimization/90765"}, {"sha": "0b16b032f2818ba8c550798ed45b3fc6cf79da7c", "filename": "gcc/config/darwin.opt", "status": "modified", "additions": 238, "deletions": 159, "changes": 397, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8566e938ca4c6d5c8a631397e15216d0d6a720f/gcc%2Fconfig%2Fdarwin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8566e938ca4c6d5c8a631397e15216d0d6a720f/gcc%2Fconfig%2Fdarwin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.opt?ref=a8566e938ca4c6d5c8a631397e15216d0d6a720f", "patch": "@@ -18,240 +18,378 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n-; Various linker options have a -Z added so that they can get to specs\n-; processing without interference.  Note that an option name with a\n-; prefix that matches another option name, that also takes an\n-; argument, being mapped to a -Z linker option, needs to be modified\n-; so the prefix is different, otherwise a '*' after the shorter option\n-; will match with the longer one.\n+; We have a lot of Driver options, many of which are obsolete or very very\n+; rarely used so, to keep this file easier to manage:\n+\n+; Please place all Non-driver options first (in alphabetical order), followed\n+; by Driver-only options.\n+\n+; Non-driver options.\n+\n+dependency-file\n+C ObjC C++ ObjC++ Separate Alias(MF) MissingArgError(missing filename after %qs)\n+\n+fapple-kext\n+Target Report C++ Var(flag_apple_kext)\n+Generate code for darwin loadable kernel extensions.\n+\n+iframework\n+Target RejectNegative C ObjC C++ ObjC++ Joined Separate\n+-iframework <dir>\tAdd <dir> to the end of the system framework include path.\n+\n+mconstant-cfstrings\n+Target Report Var(darwin_constant_cfstrings) Init(1)\n+Generate compile-time CFString objects.\n+\n+Wnonportable-cfstrings\n+Target Report Var(darwin_warn_nonportable_cfstrings) Init(1) Warning\n+Warn if constant CFString objects contain non-portable characters.\n+\n+; Use new-style pic stubs if this is true, x86 only so far.\n+matt-stubs\n+Target Report Var(darwin_macho_att_stub) Init(1)\n+Generate AT&T-style stubs for Mach-O.\n+\n+mdynamic-no-pic\n+Target Common Report Mask(MACHO_DYNAMIC_NO_PIC)\n+Generate code suitable for executables (NOT shared libs).\n+\n+mfix-and-continue\n+Target Report Var(darwin_fix_and_continue)\n+Generate code suitable for fast turn around debugging.\n+\n+mkernel\n+Target Report Var(flag_mkernel)\n+Generate code for the kernel or loadable kernel extensions.\n+\n+; The Init here is for the convenience of GCC developers, so that cc1\n+; and cc1plus don't crash if no -mmacosx-version-min is passed.  The\n+; driver will always pass a -mmacosx-version-min, so in normal use the\n+; Init is never used.\n+mmacosx-version-min=\n+Target RejectNegative Joined Report Var(darwin_macosx_version_min) Init(DEF_MIN_OSX_VERSION)\n+The earliest MacOS X version on which this program will run.\n+\n+; Really, only relevant to PowerPC which has a 4 byte bool by default.\n+mone-byte-bool\n+Target RejectNegative Report Var(darwin_one_byte_bool)\n+Set sizeof(bool) to 1.\n+\n+; Some code-gen may be improved / adjusted if the linker is sufficiently modern.\n+mtarget-linker=\n+Target RejectNegative Joined Report Alias(mtarget-linker)\n+\n+mtarget-linker\n+Target RejectNegative Joined Separate Report Var(darwin_target_linker) Init(LD64_VERSION)\n+The version of ld64 in use for this toolchain.\n+\n+; Driver options.\n \n all_load\n-Driver Alias(Zall_load)\n+Driver RejectNegative Alias(Zall_load)\n+Loads all members of archive libraries\n \n allowable_client\n-Driver Separate Alias(Zallowable_client)\n+Driver RejectNegative Separate Alias(Zallowable_client)\n+-allowable_client <name>\tThe output dylib is private to the client(s) named\n \n arch\n Driver RejectNegative Separate\n+-arch <name>\tSpecify that the output file should be generated for architecture  \\\"name\\\"\n \n arch_errors_fatal\n-Driver Alias(Zarch_errors_fatal)\n+Driver RejectNegative Alias(Zarch_errors_fatal)\n+Mismatches between file architecture and the \\\"-arch\\\" are errors instead of warnings\n \n asm_macosx_version_min=\n Driver RejectNegative Joined\n+The earliest MacOS X version on which this program will run (formatted for the assembler)\n \n bind_at_load\n-Driver Alias(Zbind_at_load)\n+Driver RejectNegative Alias(Zbind_at_load)\n+Produce an output file that will bind symbols on load, rather than lazily.\n \n bundle\n-Driver Alias(Zbundle)\n+Driver RejectNegative Alias(Zbundle)\n+Produce a Mach-O bundle (file type MH_BUNDLE)\n \n bundle_loader\n-Driver Separate Alias(Zbundle_loader)\n+Driver RejectNegative Separate Alias(Zbundle_loader)\n+-bundle_loader <executable>\tTreat \\\"executable\\\" (that will be loading this bundle) as if it was one of the dynamic libraries the bundle is linked against for symbol resolution\n \n-dead_strip\n-Driver Alias(Zdead_strip)\n+client_name\n+Driver RejectNegative Separate\n+-client_name <name>\tEnable the executable being built to link against a private dylib (using allowable_client)\n \n-dependency-file\n-C ObjC C++ ObjC++ Separate Alias(MF) MissingArgError(missing filename after %qs)\n+compatibility_version\n+Driver RejectNegative Separate\n+-compatibility_version <number>\tSet the minimum version for the client interface.  Clients must record a greater number than this or the binding will fail at runtime\n+\n+current_version\n+Driver RejectNegative Separate\n+-current_version <number>\tSet the current version for the library.\n+\n+dead_strip\n+Driver RejectNegative Alias(Zdead_strip)\n+Remove code and data that is unreachable from any exported symbol (including the entry point)\n \n dylib_file\n Driver Separate Alias(Zdylib_file)\n \n dylinker\n-Driver\n+Driver RejectNegative\n+Produce a Mach-O dylinker (file type MH_DYLINKER), only used for building dyld.\n+\n+dylinker_install_name\n+Driver RejectNegative Separate\n+-dylinker_install_name <path>\tOnly used for building dyld.\n \n dynamic\n-Driver Alias(Zdynamic)\n+Driver RejectNegative Alias(Zdynamic)\n+The default (and opposite of -static), implied by user mode executables, shared libraries and bundles.\n \n dynamiclib\n-Driver Alias(Zdynamiclib)\n+Driver RejectNegative Alias(Zdynamiclib)\n+Produce a Mach-O shared library (file type MH_DYLIB), synonym for -shared\n \n exported_symbols_list\n-Driver Separate Alias(Zexported_symbols_list)\n+Driver RejectNegative Separate Alias(Zexported_symbols_list)\n+-exported_symbols_list <filename>\tGlobal symbols in \\\"filename\\\" will be exported from the linked output file, any symbols not mentioned will be treated as hidden.\n \n filelist\n Driver RejectNegative Separate\n+Supply a list of objects to be linked from a file, rather than the command line\n \n findirect-virtual-calls\n Driver RejectNegative\n+Used for generating code for some older kernel revisions.\n \n flat_namespace\n Driver RejectNegative Alias(Zflat_namespace)\n+Ignore the normal two-level namespace; resolve symbols in command line order and do not record which library provided the resolved symbol.\n \n force_cpusubtype_ALL\n Driver RejectNegative Alias(Zforce_cpusubtype_ALL)\n+For the assembler (and linker) permit any architecture sub-variant to be used without error.\n \n force_flat_namespace\n Driver RejectNegative Alias(Zforce_flat_namespace)\n+Set the output object such that, on loading, dyld  will ignore any two-level information and resolve symbols in the discovery order for loaded libs.\n \n framework\n Driver RejectNegative Separate\n+-framework <name>\tThe linker should search for the named framework in the framework search path.\n \n fterminated-vtables\n Driver RejectNegative\n+Used for generating code for some older kernel revisions.\n \n gfull\n Driver RejectNegative\n+Abbreviation for \\\"-g -fno-eliminate-unused-debug-symbols\\\"\n \n gused\n Driver RejectNegative\n+Abbreviation for \\\"-g -feliminate-unused-debug-symbols\\\"\n \n headerpad_max_install_names\n-Driver\n+Driver RejectNegative\n+Automatically adds space for longer path names in load commands (up to MAXPATHLEN)\n \n image_base\n-Driver Separate Alias(Zimage_base)\n+Driver RejectNegative Separate Alias(Zimage_base)\n+-image_base <address>\tChoose a base address for a dylib or bundle.\n \n init\n-Driver Separate Alias(Zinit)\n+Driver RejectNegative Separate Alias(Zinit)\n+-init <symbol_name>\tThe symbol \\\"symbol_name\\\" will be used as the first initialiser for a dylib.\n \n install_name\n-Driver Separate Alias(Zinstall_name)\n+Driver RejectNegative Separate Alias(Zinstall_name)\n+-install_name <name>\tSet the install name for a dylib.\n \n keep_private_externs\n-Driver\n-\n-mconstant-cfstrings\n-Target Report Var(darwin_constant_cfstrings) Init(1)\n-Generate compile-time CFString objects.\n+Driver RejectNegative\n+Usually \\\"private extern\\\" (hidden) symbols are made local when linking, this command suppresses that such that they remain exported.\n \n multi_module\n Driver RejectNegative Alias(Zmulti_module)\n+(Obsolete after 10.4) Multi modules are ignored at runtime since MacOS 10.4\n \n multiply_defined\n Driver RejectNegative Separate Alias(Zmultiply_defined)\n+(Obsolete after 10.4) -multiply_defined <treatment> Provided a mechanism for warning about symbols defined in multiple dylibs.\n \n multiply_defined_unused\n Driver RejectNegative Separate Alias(Zmultiplydefinedunused)\n+(Obsolete after 10.4) -multiply_defined_unused <treatment>\tProvided a mechanism for warning about symbols defined in the current executable also being defined in linked dylibs.\n \n no_dead_strip_inits_and_terms\n-Driver Alias(Zno_dead_strip_inits_and_terms)\n+Driver RejectNegative Alias(Zno_dead_strip_inits_and_terms)\n+(Obsolete) The linker never dead strips these items, so the option is not needed.\n \n nofixprebinding\n-Driver\n+Driver RejectNegative\n+(Obsolete after 10.3.9) Set MH_NOPREFIXBINDING, in an exectuable.\n \n nomultidefs\n-Driver\n+Driver RejectNegative\n+(Obsolete after 10.4)\tSet MH_NOMULTIDEFS in an umbrella framework.\n \n noprebind\n-Driver\n+Driver Negative(prebind)\n+(Obsolete) LD_PREBIND is no longer supported.\n \n noseglinkedit\n-Driver\n+Driver Negative(seglinkedit)\n+(Obsolete) This is the default.\n \n object\n-Driver\n+Driver RejectNegative\n+\n+pagezero_size\n+Driver RejectNegative Separate\n+-pagezero_size size\tAllows setting the page 0 size to 4kb for certain special cases.\n \n prebind\n-Driver\n+Driver Negative(noprebind)\n+(Obsolete) LD_PREBIND is no longer supported.\n \n prebind_all_twolevel_modules\n-Driver\n+Driver RejectNegative\n+(Obsolete) LD_PREBIND is no longer supported.\n \n preload\n-Driver\n+Driver RejectNegative\n+Produces a Mach-O file suitable for embedded/ROM use.\n \n private_bundle\n-Driver\n+Driver RejectNegative\n+(Obsolete) Allowed linking to proceed with \\\"-flat_namespace\\\" when a linked bundle contained a symbol also exported from the main executable.\n \n pthread\n-Driver\n+Driver RejectNegative\n \n rdynamic\n-Driver\n+Driver RejectNegative\n+Synonym for \\\"-export-dynamic\\\" for linker versions that support it.\n+\n+read_only_relocs\n+Driver RejectNegative Separate\n+-read_only_relocs <treatment>\tThis will allow relocs in read-only pages (not advisable).\n+\n+sectalign\n+Driver RejectNegative Separate Args(3)\n+-sectalign <segname> <sectname> <value>\tSet section \\\"sectname\\\" in segment \\\"segname\\\" to have alignment \\\"value\\\" which must be an integral power of two expressed in hexadecimal form.\n+\n+sectcreate\n+Driver RejectNegative Separate Args(3)\n+-sectcreate <segname> <sectname> <file>\tCreate section \\\"sectname\\\" in segment \\\"segname\\\" from the contents of \\\"file\\\".\n+\n+sectobjectsymbols\n+Driver RejectNegative Separate Args(2)\n+(Obsolete) -sectobjectsymbols <segname> <sectname>\tSetting a local symbol at the start of a section is no longer supported.\n+\n+sectorder\n+Driver RejectNegative Separate Args(3)\n+(Obsolete) -sectorder <segname> <sectname> orderfile\tReplaced by a more general option \\\"-order_file\\\".\n \n seg_addr_table\n-Driver Separate Alias(Zseg_addr_table)\n+Driver RejectNegative Separate Alias(Zseg_addr_table)\n+-seg_addr_table <file>\tSpecify the base addresses for dynamic libraries, \\\"file\\\" contains a line for each library.\n \n+; This is only usable by the ld_classic linker.\n seg_addr_table_filename\n-Driver Separate Alias(Zfn_seg_addr_table_filename)\n+Driver RejectNegative Separate Alias(Zfn_seg_addr_table_filename)\n+(Obsolete, ld_classic only) -seg_addr_table_filename <path>\n+\n+seg1addr\n+Driver RejectNegative Separate\n+Synonym for \\\"image_base\\\"\n \n segaddr\n-Driver Separate Args(2) Alias(Zsegaddr)\n+Driver RejectNegative Separate Args(2) Alias(Zsegaddr)\n+-segaddr <name> <address>\tSet the base address of segment \\\"name\\\" to \\\"address\\\" which must be aligned to a page boundary (currently 4kb).\n+\n+; This is only usable by the ld_classic linker.\n+segcreate\n+Driver RejectNegative Separate Args(3)\n+(Obsolete, ld_classic only) -sectcreate segname sectname file\n \n seglinkedit\n-Driver\n+Driver Negative(noseglinkedit)\n+(Obsolete) Object files with LINKEDIT sections are no longer supported.\n+\n+segprot\n+Driver RejectNegative Separate Args(3)\n+-segprot <segname> max_prot init_prot\tThe protection values are \\\"r\\\", \\\"w\\\", \\\"x\\\" or \\\"-\\\" the latter meaning \\\"no access\\\".\n \n segs_read_only_addr\n-Driver Separate Alias(Zsegs_read_only_addr)\n+Driver RejectNegative Separate Alias(Zsegs_read_only_addr)\n+-segs_read_only_addr address \tAllows specifying the address of the read only portion of a dylib.\n \n segs_read_write_addr\n-Driver Separate Alias(Zsegs_read_write_addr)\n+Driver RejectNegative Separate Alias(Zsegs_read_write_addr)\n+-segs_read_write_addr address \tAllows specifying the address of the read/write portion of a dylib.\n \n single_module\n-Driver Alias(Zsingle_module)\n+Driver RejectNegative Alias(Zsingle_module)\n+(Obsolete)\tThis is the default.\n+\n+sub_library\n+Driver RejectNegative Separate\n+-sub_library <name>\tLibrary named \\\"name\\\" will be re-exported (only useful for dylibs).\n+\n+sub_umbrella\n+Driver RejectNegative Separate\n+-sub_umbrella <name>\tFramework named \\\"name\\\" will be re-exported (only useful for dylibs).\n \n twolevel_namespace\n-Driver\n+Driver RejectNegative\n+This is the default\n \n twolevel_namespace_hints\n-Driver\n+Driver RejectNegative\n+Specifies content that can speed up dynamic loading when the binaries are unchanged.\n \n umbrella\n-Driver Separate Alias(Zumbrella)\n+Driver RejectNegative Separate Alias(Zumbrella)\n+-umbrella <framework>\tThe specified framework will be re-exported.\n+\n+undefined\n+Driver RejectNegative Separate\n+-undefined <treatment>\tSpecify the handling for undefined symbols (default is error).\n \n unexported_symbols_list\n-Driver Separate Alias(Zunexported_symbols_list)\n+Driver RejectNegative Separate Alias(Zunexported_symbols_list)\n+-unexported_symbols_list <filename>\tDon't export global symbols listed in filename.\n \n weak_reference_mismatches\n-Driver Separate Alias(Zweak_reference_mismatches)\n+Driver RejectNegative Separate Alias(Zweak_reference_mismatches)\n+-weak_reference_mismatches <treatment>\tSpecifies what to do if a symbol import conflicts between file (weak in one and not in another) the default is to treat the symbol as non-weak.\n \n whatsloaded\n-Driver\n+Driver RejectNegative\n+Logs the object files the linker loads\n \n whyload\n-Driver\n+Driver RejectNegative\n+Logs which symbol(s) caused an object to be loaded.\n+\n+;(Obsolete, ignored)\tStrip symbols starting with \"L\", this is the default.\n+X\n+Driver RejectNegative\n \n y\n-Driver Joined\n+Driver RejectNegative Joined\n+(Obsolete, ignored)\tOld support similar to whyload.\n \n Mach\n-Driver\n-\n-Wnonportable-cfstrings\n-Target Report Var(darwin_warn_nonportable_cfstrings) Init(1) Warning\n-Warn if constant CFString objects contain non-portable characters.\n-\n-; Use new-style pic stubs if this is true, x86 only so far.\n-matt-stubs\n-Target Report Var(darwin_macho_att_stub) Init(1)\n-Generate AT&T-style stubs for Mach-O.\n-\n-mdynamic-no-pic\n-Target Common Report Mask(MACHO_DYNAMIC_NO_PIC)\n-Generate code suitable for executables (NOT shared libs).\n-\n-mfix-and-continue\n-Target Report Var(darwin_fix_and_continue)\n-Generate code suitable for fast turn around debugging.\n-\n-; The Init here is for the convenience of GCC developers, so that cc1\n-; and cc1plus don't crash if no -mmacosx-version-min is passed.  The\n-; driver will always pass a -mmacosx-version-min, so in normal use the\n-; Init is never used.\n-mmacosx-version-min=\n-Target Joined Report Var(darwin_macosx_version_min) Init(DEF_MIN_OSX_VERSION)\n-The earliest MacOS X version on which this program will run.\n-\n-mone-byte-bool\n-Target RejectNegative Report Var(darwin_one_byte_bool)\n-Set sizeof(bool) to 1.\n-\n-fapple-kext\n-Target Report C++ Var(flag_apple_kext)\n-Generate code for darwin loadable kernel extensions.\n-\n-mkernel\n-Target Report Var(flag_mkernel)\n-Generate code for the kernel or loadable kernel extensions.\n-\n-iframework\n-Target RejectNegative C ObjC C++ ObjC++ Joined Separate \n--iframework <dir>\tAdd <dir> to the end of the system framework include path.\n+Driver RejectNegative\n+(Obsolete and unhandled by ld64, ignored)\tld should produce an executable (only handled by ld_classic).\n \n-X\n-Driver\n+;; These are not \"real\" options, but placeholders used to hide the real options\n+;; from generic options processing... FIXME: they can be eliminated now.\n \n Zall_load\n Driver\n@@ -343,62 +481,3 @@ Driver Separate\n Zweak_reference_mismatches\n Driver Separate\n \n-client_name\n-Driver Separate\n-\n-compatibility_version\n-Driver Separate\n-\n-current_version\n-Driver Separate\n-\n-dylinker_install_name\n-Driver Separate\n-\n-pagezero_size\n-Driver Separate\n-\n-read_only_relocs\n-Driver Separate\n-\n-sectalign\n-Driver Separate Args(3)\n-\n-sectcreate\n-Driver Separate Args(3)\n-\n-sectobjectsymbols\n-Driver Separate Args(2)\n-\n-sectorder\n-Driver Separate Args(3)\n-\n-seg1addr\n-Driver Separate\n-\n-segcreate\n-Driver Separate Args(3)\n-\n-segprot\n-Driver Separate Args(3)\n-\n-segs_read_only_addr\n-Driver Separate\n-\n-segs_read_write_addr\n-Driver Separate\n-\n-sub_library\n-Driver Separate\n-\n-sub_umbrella\n-Driver Separate\n-\n-; Certain aspects of code-gen may be improved / adjusted if the version of ld64\n-; is sufficiently modern.\n-mtarget-linker\n-Target RejectNegative Joined Separate Report Var(darwin_target_linker) Init(LD64_VERSION)\n-The version of ld64 in use for this toolchain.\n-\n-undefined\n-Driver Separate"}]}