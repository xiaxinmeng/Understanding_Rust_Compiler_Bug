{"sha": "040b2ec9a6b20aa2441951e47f344d303dd61d7e", "node_id": "C_kwDOANBUbNoAKDA0MGIyZWM5YTZiMjBhYTI0NDE5NTFlNDdmMzQ0ZDMwM2RkNjFkN2U", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-11T11:22:07Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-11T13:54:21Z"}, "message": "Add code generation for the slice type\n\nThis type must respect the layout of the FatPtr type in libcore. Rust\nimplements slices using Rustc types in libcore and uses a neat trick.\n\nThe slice is generated into the FatPtr which contains the pointer and\nlength of the slice. This is then placed into a union called Repr which\nhas 3 variants a mutable and immutable pointer to the FatPtr and a final\nvariant which is the raw FatPtr. This means we can use unsafe access to\nthe union to gain a pointer to the FatPtr.\n\nAddresses #849", "tree": {"sha": "031aecbdcf83d4a96ffe751238266a192de83b66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/031aecbdcf83d4a96ffe751238266a192de83b66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/040b2ec9a6b20aa2441951e47f344d303dd61d7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/040b2ec9a6b20aa2441951e47f344d303dd61d7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/040b2ec9a6b20aa2441951e47f344d303dd61d7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/040b2ec9a6b20aa2441951e47f344d303dd61d7e/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e076823eda8f11425a705a191d686e9e48be2fc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e076823eda8f11425a705a191d686e9e48be2fc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e076823eda8f11425a705a191d686e9e48be2fc4"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "07b95c78e5a33a9d3d48f138036ac53cd2aa0ca1", "filename": "gcc/rust/backend/rust-compile-type.cc", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/040b2ec9a6b20aa2441951e47f344d303dd61d7e/gcc%2Frust%2Fbackend%2Frust-compile-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/040b2ec9a6b20aa2441951e47f344d303dd61d7e/gcc%2Frust%2Fbackend%2Frust-compile-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-type.cc?ref=040b2ec9a6b20aa2441951e47f344d303dd61d7e", "patch": "@@ -349,8 +349,38 @@ TyTyResolveCompile::visit (const TyTy::ArrayType &type)\n void\n TyTyResolveCompile::visit (const TyTy::SliceType &type)\n {\n-  // TODO\n-  gcc_unreachable ();\n+  if (ctx->lookup_compiled_types (type.get_ty_ref (), &translated, &type))\n+    return;\n+\n+  std::vector<Backend::typed_identifier> fields;\n+\n+  tree element_type\n+    = TyTyResolveCompile::compile (ctx, type.get_element_type ());\n+  tree data_field_ty = build_pointer_type (element_type);\n+  Backend::typed_identifier data_field (\"data\", data_field_ty, Location ());\n+  fields.push_back (std::move (data_field));\n+\n+  // lookup usize\n+  TyTy::BaseType *usize = nullptr;\n+  bool ok = ctx->get_tyctx ()->lookup_builtin (\"usize\", &usize);\n+  rust_assert (ok);\n+\n+  tree len_field_ty = TyTyResolveCompile::compile (ctx, usize);\n+  Backend::typed_identifier len_field (\"len\", len_field_ty, Location ());\n+  fields.push_back (std::move (len_field));\n+\n+  tree type_record = ctx->get_backend ()->struct_type (fields);\n+\n+  std::string named_struct_str\n+    = std::string (\"[\") + type.get_element_type ()->get_name () + \"]\";\n+  tree named_struct\n+    = ctx->get_backend ()->named_type (named_struct_str, type_record,\n+\t\t\t\t       type.get_ident ().locus);\n+\n+  ctx->push_type (named_struct);\n+  translated = named_struct;\n+\n+  ctx->insert_compiled_type (type.get_ty_ref (), named_struct, &type);\n }\n \n void"}, {"sha": "a0488b3912c57fad9ef155b153648a64fe7a9e3c", "filename": "gcc/testsuite/rust/execute/torture/slice1.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/040b2ec9a6b20aa2441951e47f344d303dd61d7e/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/040b2ec9a6b20aa2441951e47f344d303dd61d7e/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice1.rs?ref=040b2ec9a6b20aa2441951e47f344d303dd61d7e", "patch": "@@ -0,0 +1,27 @@\n+// { dg-additional-options \"-w\" }\n+struct FatPtr<T> {\n+    data: *const T,\n+    len: usize,\n+}\n+\n+union Repr<T> {\n+    rust: *const [T],\n+    rust_mut: *mut [T],\n+    raw: FatPtr<T>,\n+}\n+\n+const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n+    unsafe {\n+        let a = FatPtr { data, len };\n+        let b = Repr { raw: a };\n+        b.rust\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = 123;\n+    let b: *const i32 = &a;\n+    let c = slice_from_raw_parts(b, 1);\n+\n+    0\n+}"}]}