{"sha": "04061aa5af34837ef99383b2a481aaff033cbc4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQwNjFhYTVhZjM0ODM3ZWY5OTM4M2IyYTQ4MWFhZmYwMzNjYmM0Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@act-europe.fr", "date": "2004-10-27T13:55:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-10-27T13:55:45Z"}, "message": "trans.c (call_to_gnu): For an (in-)out parameter passed by reference whose type is a constructed...\n\n2004-10-26  Eric Botcazou  <ebotcazou@act-europe.fr>\n\n\t* trans.c (call_to_gnu): For an (in-)out parameter passed by reference\n\twhose type is a constructed subtype of an aliased object with an\n\tunconstrained nominal subtype, convert the actual to the constructed\n\tsubtype before taking its address.\n\nFrom-SVN: r89676", "tree": {"sha": "1582017d854c6cbefd872bdc899ce8c545b518ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1582017d854c6cbefd872bdc899ce8c545b518ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04061aa5af34837ef99383b2a481aaff033cbc4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04061aa5af34837ef99383b2a481aaff033cbc4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04061aa5af34837ef99383b2a481aaff033cbc4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04061aa5af34837ef99383b2a481aaff033cbc4c/comments", "author": null, "committer": null, "parents": [{"sha": "b194546ef03e4ed7a88c3fb4850c72290e10c234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b194546ef03e4ed7a88c3fb4850c72290e10c234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b194546ef03e4ed7a88c3fb4850c72290e10c234"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "4f04da7e8f6d4996e36a8cad01b6e200c327553f", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04061aa5af34837ef99383b2a481aaff033cbc4c/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04061aa5af34837ef99383b2a481aaff033cbc4c/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=04061aa5af34837ef99383b2a481aaff033cbc4c", "patch": "@@ -1759,6 +1759,20 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n \t\t  && TREE_CODE (gnu_actual) != SAVE_EXPR)\n \t\tgnu_actual = convert (get_unpadded_type (Etype (gnat_actual)),\n \t\t\t\t      gnu_actual);\n+\n+\t      /* If we have the constructed subtype of an aliased object\n+\t\t with an unconstrained nominal subtype, the type of the\n+\t\t actual includes the template, although it is formally\n+\t\t constrained.  So we need to convert it back to the real\n+\t\t constructed subtype to retrieve the constrained part\n+\t\t and takes its address.  */\n+\t      if (TREE_CODE (TREE_TYPE (gnu_actual)) == RECORD_TYPE\n+\t\t  && TYPE_CONTAINS_TEMPLATE_P (TREE_TYPE (gnu_actual))\n+\t\t  && TREE_CODE (gnu_actual) != SAVE_EXPR\n+\t\t  && Is_Constr_Subt_For_UN_Aliased (Etype (gnat_actual))\n+\t\t  && Is_Array_Type (Etype (gnat_actual)))\n+\t\tgnu_actual = convert (gnat_to_gnu_type (Etype (gnat_actual)),\n+\t\t\t\t      gnu_actual);\n \t    }\n \n \t  /* Otherwise, if we have a non-addressable COMPONENT_REF of a"}]}