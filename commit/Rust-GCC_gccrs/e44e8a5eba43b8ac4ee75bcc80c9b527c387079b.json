{"sha": "e44e8a5eba43b8ac4ee75bcc80c9b527c387079b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ0ZThhNWViYTQzYjhhYzRlZTc1YmNjODBjOWI1MjdjMzg3MDc5Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2017-04-25T13:42:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T13:42:35Z"}, "message": "exp_ch4.adb (Expand_N_Case_Expression): Take Minimize_Expression_With_Actions into account when possible.\n\n2017-04-25  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Case_Expression): Take\n\tMinimize_Expression_With_Actions into account when possible.\n\nFrom-SVN: r247237", "tree": {"sha": "15a956c3c5929c0a29b9bc18167e3b86df843e62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15a956c3c5929c0a29b9bc18167e3b86df843e62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e44e8a5eba43b8ac4ee75bcc80c9b527c387079b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e44e8a5eba43b8ac4ee75bcc80c9b527c387079b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e44e8a5eba43b8ac4ee75bcc80c9b527c387079b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e44e8a5eba43b8ac4ee75bcc80c9b527c387079b/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf604a5eeb4b942348e8f1cdaf4baf6d77497aec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf604a5eeb4b942348e8f1cdaf4baf6d77497aec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf604a5eeb4b942348e8f1cdaf4baf6d77497aec"}], "stats": {"total": 50, "additions": 42, "deletions": 8}, "files": [{"sha": "da75bbb00f5bd2f406e07b061a76259984ee022a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44e8a5eba43b8ac4ee75bcc80c9b527c387079b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44e8a5eba43b8ac4ee75bcc80c9b527c387079b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e44e8a5eba43b8ac4ee75bcc80c9b527c387079b", "patch": "@@ -1,3 +1,8 @@\n+2017-04-25  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Case_Expression): Take\n+\tMinimize_Expression_With_Actions into account when possible.\n+\n 2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_util.adb (Known_Non_Null): Moved to Sem_Util."}, {"sha": "dfbdfd28197592970d80d2242a952516905f486e", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44e8a5eba43b8ac4ee75bcc80c9b527c387079b/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44e8a5eba43b8ac4ee75bcc80c9b527c387079b/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=e44e8a5eba43b8ac4ee75bcc80c9b527c387079b", "patch": "@@ -4718,9 +4718,33 @@ package body Exp_Ch4 is\n    ------------------------------\n \n    procedure Expand_N_Case_Expression (N : Node_Id) is\n-      Loc        : constant Source_Ptr := Sloc (N);\n-      Par        : constant Node_Id    := Parent (N);\n-      Typ        : constant Entity_Id  := Etype (N);\n+      function Is_Copy_Type (Typ : Entity_Id) return Boolean;\n+      --  Return True if we can copy objects of this type when expanding a case\n+      --  expression.\n+\n+      ------------------\n+      -- Is_Copy_Type --\n+      ------------------\n+\n+      function Is_Copy_Type (Typ : Entity_Id) return Boolean is\n+      begin\n+         --  if Minimize_Expression_With_Actions is True, we can afford to copy\n+         --  large objects, as long as they are constrained and not limited.\n+\n+         return\n+           Is_Elementary_Type (Underlying_Type (Typ))\n+             or else\n+               (Minimize_Expression_With_Actions\n+                 and then Is_Constrained (Underlying_Type (Typ))\n+                 and then not Is_Limited_View (Underlying_Type (Typ)));\n+      end Is_Copy_Type;\n+\n+      --  Local variables\n+\n+      Loc : constant Source_Ptr := Sloc (N);\n+      Par : constant Node_Id    := Parent (N);\n+      Typ : constant Entity_Id  := Etype (N);\n+\n       Acts       : List_Id;\n       Alt        : Node_Id;\n       Case_Stmt  : Node_Id;\n@@ -4736,6 +4760,8 @@ package body Exp_Ch4 is\n       --  Flag set when the case expression can be optimized in the context of\n       --  a simple return statement.\n \n+   --  Start of processing for Expand_N_Case_Expression\n+\n    begin\n       --  Check for MINIMIZED/ELIMINATED overflow mode\n \n@@ -4792,6 +4818,9 @@ package body Exp_Ch4 is\n \n       --  This approach avoids extra copies of potentially large objects. It\n       --  also allows handling of values of limited or unconstrained types.\n+      --  Note that we do the copy also for constrained, non limited types\n+      --  when minimizing expressions with actions (e.g. when generating C\n+      --  code) since it allows us to do the optimization below in more cases.\n \n       --  Small optimization: when the case expression appears in the context\n       --  of a simple return statement, expand into\n@@ -4817,13 +4846,13 @@ package body Exp_Ch4 is\n       Set_From_Conditional_Expression (Case_Stmt);\n       Acts := New_List;\n \n-      --  Scalar case\n+      --  Scalar/Copy case\n \n-      if Is_Elementary_Type (Typ) then\n+      if Is_Copy_Type (Typ) then\n          Target_Typ := Typ;\n \n          --  ??? Do not perform the optimization when the return statement is\n-         --  within a predicate function as this causes supurious errors. Could\n+         --  within a predicate function as this causes spurious errors. Could\n          --  this be a possible mismatch in handling this case somewhere else\n          --  in semantic analysis?\n \n@@ -4883,7 +4912,7 @@ package body Exp_Ch4 is\n             --  Generate:\n             --    AX'Unrestricted_Access\n \n-            if not Is_Elementary_Type (Typ) then\n+            if not Is_Copy_Type (Typ) then\n                Alt_Expr :=\n                  Make_Attribute_Reference (Alt_Loc,\n                    Prefix         => Relocate_Node (Alt_Expr),\n@@ -4947,7 +4976,7 @@ package body Exp_Ch4 is\n       else\n          Append_To (Acts, Case_Stmt);\n \n-         if Is_Elementary_Type (Typ) then\n+         if Is_Copy_Type (Typ) then\n             Expr := New_Occurrence_Of (Target, Loc);\n \n          else"}]}