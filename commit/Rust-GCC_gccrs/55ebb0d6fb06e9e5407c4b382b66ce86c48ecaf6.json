{"sha": "55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVlYmIwZDZmYjA2ZTllNTQwN2M0YjM4MmI2NmNlODZjNDhlY2FmNg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2020-11-26T12:01:30Z"}, "committer": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2020-11-26T12:01:30Z"}, "message": "ada: c++: Get rid of libposix4, librt on Solaris\n\nI recently noticed that neither libposix4 nor librt are needed on\nSolaris 11 any longer:\n\n* libposix4 was renamed to librt in Solaris 7 back in 1998.\n\n* librt was folded into libc in the OpenSolaris timeframe, leaving librt\n  only as a filter on libc.  Thus, it's no longer needed on either\n  Solaris 11 or Illumos.\n\nThe following patch removes both uses.  At the same time, Ada's use of\nlibthread has gone: it was folded into libc in Solaris 10 already.\nTIME_LIBRARY and friends in g++ are likewise removed: Solaris was the\nonly user.\n\nBootstrapped without regressions on i386-pc-solaris2.11,\nsparc-sun-solaris2.11, and x86_64-pc-linux-gnu.\n\n\n2020-11-16  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n\n\tgcc/cp:\n\t* g++spec.c (TIMELIB, TIME_LIBRARY): Remove.\n\t(lang_specific_driver): Remove TIME_LIBRARY handling.\n\n\tgcc:\n\t* config/sol2.h (TIME_LIBRARY): Remove.\n\n\tlibstdc++-v3:\n\t* acinclude.m4 (GLIBCXX_ENABLE_LIBSTDCXX_TIME): Remove libposix4\n\treferences.\n\t<solaris*>: Don't use -lrt any longer.\n\t* configure: Regenerate.\n\n\t* doc/xml/manual/configure.xml (--enable-libstdcxx-time=OPTION):\n\tRemove libposix4 reference.\n\n\tgcc/ada:\n\t* Makefile.rtl <sparc*-sun-solaris*> (THREADSLIB): Remove.\n\t(MISCLIB): Remove -lposix4.\n\t<*86-*-solaris2*>: Likewise.\n\t* libgnarl/s-osinte__solaris.ads (System.OS_Interface): Remove\n\t-lposix4 -lthread.", "tree": {"sha": "f712e9ccaf078fa4a800d07f246b11efb23bb8af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f712e9ccaf078fa4a800d07f246b11efb23bb8af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2762cb1df686fc1ebcee23c7c4f0f6e8bf5a6abc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2762cb1df686fc1ebcee23c7c4f0f6e8bf5a6abc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2762cb1df686fc1ebcee23c7c4f0f6e8bf5a6abc"}], "stats": {"total": 281, "additions": 98, "deletions": 183}, "files": [{"sha": "1809bdb676c49b20820f4933892733a0ca7e9aa7", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6", "patch": "@@ -1674,8 +1674,7 @@ ifeq ($(strip $(filter-out sparc% sun solaris%,$(target_cpu) $(target_vendor) $(\n   endif\n \n   EH_MECHANISM=-gcc\n-  THREADSLIB = -lposix4 -lthread\n-  MISCLIB = -lposix4 -lnsl -lsocket\n+  MISCLIB = -lnsl -lsocket\n   SO_OPTS = -Wl,-h,\n   GNATLIB_SHARED = gnatlib-shared-dual\n   GMEM_LIB = gmemlib\n@@ -1728,8 +1727,7 @@ ifeq ($(strip $(filter-out %86 %x86_64 solaris2%,$(target_cpu) $(target_os))),)\n   EXTRA_GNATRTL_NONTASKING_OBJS += $(TRASYM_DWARF_UNIX_OBJS)\n \n   EH_MECHANISM=-gcc\n-  THREADSLIB = -lposix4 -lthread\n-  MISCLIB = -lposix4 -lnsl -lsocket\n+  MISCLIB = -lnsl -lsocket\n   SO_OPTS = -Wl,-h,\n   GNATLIB_SHARED = gnatlib-shared-dual\n   GMEM_LIB = gmemlib"}, {"sha": "b9d6b8818b33a1adaace86dba39ed124675bacdb", "filename": "gcc/ada/libgnarl/s-osinte__solaris.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6/gcc%2Fada%2Flibgnarl%2Fs-osinte__solaris.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6/gcc%2Fada%2Flibgnarl%2Fs-osinte__solaris.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__solaris.ads?ref=55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6", "patch": "@@ -45,9 +45,6 @@ with Ada.Unchecked_Conversion;\n package System.OS_Interface is\n    pragma Preelaborate;\n \n-   pragma Linker_Options (\"-lposix4\");\n-   pragma Linker_Options (\"-lthread\");\n-\n    subtype int            is Interfaces.C.int;\n    subtype short          is Interfaces.C.short;\n    subtype long           is Interfaces.C.long;"}, {"sha": "7a21f22d5498c658cd750f5d1d8c89710fee42b5", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6", "patch": "@@ -381,9 +381,6 @@ along with GCC; see the file COPYING3.  If not see\n   { \"endfile_vtv\",\t\tENDFILE_VTV_SPEC },\t\t\\\n   SUBTARGET_CPU_EXTRA_SPECS\n \n-/* C++11 programs need -lrt for nanosleep.  */\n-#define TIME_LIBRARY \"rt\"\n-\n #ifndef USE_GLD\n /* With Sun ld, -rdynamic is a no-op.  */\n #define RDYNAMIC_SPEC \"\""}, {"sha": "0f17148ccbde9523c657cd02373e7e2c59b7049e", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6", "patch": "@@ -27,12 +27,10 @@ along with GCC; see the file COPYING3.  If not see\n #define LANGSPEC\t(1<<1)\n /* This bit is set if they did `-lm' or `-lmath'.  */\n #define MATHLIB\t\t(1<<2)\n-/* This bit is set if they did `-lrt' or equivalent.  */\n-#define TIMELIB\t\t(1<<3)\n /* This bit is set if they did `-lc'.  */\n-#define WITHLIBC\t(1<<4)\n+#define WITHLIBC\t(1<<3)\n /* Skip this option.  */\n-#define SKIPOPT\t\t(1<<5)\n+#define SKIPOPT\t\t(1<<4)\n \n #ifndef MATH_LIBRARY\n #define MATH_LIBRARY \"m\"\n@@ -41,10 +39,6 @@ along with GCC; see the file COPYING3.  If not see\n #define MATH_LIBRARY_PROFILE MATH_LIBRARY\n #endif\n \n-#ifndef TIME_LIBRARY\n-#define TIME_LIBRARY \"\"\n-#endif\n-\n #ifndef LIBSTDCXX\n #define LIBSTDCXX \"stdc++\"\n #endif\n@@ -95,15 +89,12 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   const struct cl_decoded_option *saw_libc = NULL;\n \n   /* An array used to flag each argument that needs a bit set for\n-     LANGSPEC, MATHLIB, TIMELIB, or WITHLIBC.  */\n+     LANGSPEC, MATHLIB, or WITHLIBC.  */\n   int *args;\n \n   /* By default, we throw on the math library if we have one.  */\n   int need_math = (MATH_LIBRARY[0] != '\\0');\n \n-  /* By default, we throw on the time library if we have one.  */\n-  int need_time = (TIME_LIBRARY[0] != '\\0');\n-\n   /* True if we saw -static.  */\n   int static_link = 0;\n \n@@ -147,11 +138,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t      args[i] |= MATHLIB;\n \t      need_math = 0;\n \t    }\n-\t  else if (strcmp (arg, TIME_LIBRARY) == 0)\n-\t    {\n-\t      args[i] |= TIMELIB;\n-\t      need_time = 0;\n-\t    }\n \t  else if (strcmp (arg, \"c\") == 0)\n \t    args[i] |= WITHLIBC;\n \t  else\n@@ -285,12 +271,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  saw_math = &decoded_options[i];\n \t}\n \n-      if (!saw_time && (args[i] & TIMELIB) && library > 0)\n-\t{\n-\t  --j;\n-\t  saw_time = &decoded_options[i];\n-\t}\n-\n       if (!saw_libc && (args[i] & WITHLIBC) && library > 0)\n \t{\n \t  --j;\n@@ -377,13 +357,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n     }\n   if (saw_time)\n     new_decoded_options[j++] = *saw_time;\n-  else if (library > 0 && need_time)\n-    {\n-      generate_option (OPT_l, TIME_LIBRARY, 1, CL_DRIVER,\n-\t\t       &new_decoded_options[j]);\n-      added_libraries++;\n-      j++;\n-    }\n   if (saw_libc)\n     new_decoded_options[j++] = *saw_libc;\n   if (shared_libgcc && !static_link)"}, {"sha": "fcd9ea3d23a8f5aac05f0803a811a4463520c8cc", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6", "patch": "@@ -1381,8 +1381,7 @@ dnl\n dnl --enable-libstdcxx-time\n dnl --enable-libstdcxx-time=yes\n dnl        checks for the availability of monotonic and realtime clocks,\n-dnl        nanosleep and sched_yield in libc and libposix4 and, if needed,\n-dnl        links in the latter.\n+dnl        nanosleep and sched_yield in libc.\n dnl --enable-libstdcxx-time=rt\n dnl        also searches (and, if needed, links) librt.  Note that this is\n dnl        not always desirable because, in glibc 2.16 and earlier, for\n@@ -1455,7 +1454,6 @@ AC_DEFUN([GLIBCXX_ENABLE_LIBSTDCXX_TIME], [\n         ac_has_nanosleep=yes\n         ;;\n       solaris*)\n-        GLIBCXX_LIBS=\"$GLIBCXX_LIBS -lrt\"\n         ac_has_clock_monotonic=yes\n         ac_has_clock_realtime=yes\n         ac_has_nanosleep=yes\n@@ -1469,11 +1467,11 @@ AC_DEFUN([GLIBCXX_ENABLE_LIBSTDCXX_TIME], [\n   elif test x\"$enable_libstdcxx_time\" != x\"no\"; then\n \n     if test x\"$enable_libstdcxx_time\" = x\"rt\"; then\n-      AC_SEARCH_LIBS(clock_gettime, [rt posix4])\n-      AC_SEARCH_LIBS(nanosleep, [rt posix4])\n+      AC_SEARCH_LIBS(clock_gettime, [rt])\n+      AC_SEARCH_LIBS(nanosleep, [rt])\n     else\n-      AC_SEARCH_LIBS(clock_gettime, [posix4])\n-      AC_SEARCH_LIBS(nanosleep, [posix4])\n+      AC_CHECK_FUNC(clock_gettime)\n+      AC_CHECK_FUNC(nanosleep)\n     fi\n \n     case \"$ac_cv_search_clock_gettime\" in\n@@ -1485,13 +1483,9 @@ AC_DEFUN([GLIBCXX_ENABLE_LIBSTDCXX_TIME], [\n       ;;\n     esac\n \n-    AC_SEARCH_LIBS(sched_yield, [rt posix4])\n+    AC_SEARCH_LIBS(sched_yield, [rt])\n \n     case \"$ac_cv_search_sched_yield\" in\n-      -lposix4*)\n-      GLIBCXX_LIBS=\"$GLIBCXX_LIBS $ac_cv_search_sched_yield\"\n-      ac_has_sched_yield=yes\n-      ;;\n       -lrt*)\n       if test x\"$enable_libstdcxx_time\" = x\"rt\"; then\n \tGLIBCXX_LIBS=\"$GLIBCXX_LIBS $ac_cv_search_sched_yield\""}, {"sha": "ae7d08508e3e8eb6d3cb34b18f62342202ff91b0", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 86, "deletions": 129, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6", "patch": "@@ -2520,6 +2520,76 @@ rm -f conftest.val\n \n } # ac_fn_c_compute_int\n \n+# ac_fn_cxx_check_func LINENO FUNC VAR\n+# ------------------------------------\n+# Tests whether FUNC exists, setting the cache variable VAR accordingly\n+ac_fn_cxx_check_func ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $2\" >&5\n+$as_echo_n \"checking for $2... \" >&6; }\n+if eval \\${$3+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+/* Define $2 to an innocuous variant, in case <limits.h> declares $2.\n+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */\n+#define $2 innocuous_$2\n+\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char $2 (); below.\n+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n+    <limits.h> exists even on freestanding compilers.  */\n+\n+#ifdef __STDC__\n+# include <limits.h>\n+#else\n+# include <assert.h>\n+#endif\n+\n+#undef $2\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char $2 ();\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined __stub_$2 || defined __stub___$2\n+choke me\n+#endif\n+\n+int\n+main ()\n+{\n+return $2 ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  eval \"$3=yes\"\n+else\n+  eval \"$3=no\"\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+eval ac_res=\\$$3\n+\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n+$as_echo \"$ac_res\" >&6; }\n+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n+\n+} # ac_fn_cxx_check_func\n+\n # ac_fn_c_check_type LINENO TYPE VAR INCLUDES\n # -------------------------------------------\n # Tests whether TYPE exists after having included INCLUDES, setting cache\n@@ -12064,7 +12134,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12067 \"configure\"\n+#line 12137 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12170,7 +12240,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12173 \"configure\"\n+#line 12243 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15862,7 +15932,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15865 \"configure\"\n+#line 15935 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15897,7 +15967,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15900 \"configure\"\n+#line 15970 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15932,7 +16002,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15935 \"configure\"\n+#line 16005 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15968,7 +16038,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15971 \"configure\"\n+#line 16041 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -16121,7 +16191,7 @@ $as_echo \"mutex\" >&6; }\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16124 \"configure\"\n+#line 16194 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -16163,7 +16233,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16166 \"configure\"\n+#line 16236 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -16197,7 +16267,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16200 \"configure\"\n+#line 16270 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -21181,7 +21251,6 @@ fi\n         ac_has_nanosleep=yes\n         ;;\n       solaris*)\n-        GLIBCXX_LIBS=\"$GLIBCXX_LIBS -lrt\"\n         ac_has_clock_monotonic=yes\n         ac_has_clock_realtime=yes\n         ac_has_nanosleep=yes\n@@ -21219,7 +21288,7 @@ return clock_gettime ();\n   return 0;\n }\n _ACEOF\n-for ac_lib in '' rt posix4; do\n+for ac_lib in '' rt; do\n   if test -z \"$ac_lib\"; then\n     ac_res=\"none required\"\n   else\n@@ -21278,7 +21347,7 @@ return nanosleep ();\n   return 0;\n }\n _ACEOF\n-for ac_lib in '' rt posix4; do\n+for ac_lib in '' rt; do\n   if test -z \"$ac_lib\"; then\n     ac_res=\"none required\"\n   else\n@@ -21314,121 +21383,13 @@ if test \"$ac_res\" != no; then :\n fi\n \n     else\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing clock_gettime\" >&5\n-$as_echo_n \"checking for library containing clock_gettime... \" >&6; }\n-if ${ac_cv_search_clock_gettime+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  ac_func_search_save_LIBS=$LIBS\n-cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n+      ac_fn_cxx_check_func \"$LINENO\" \"clock_gettime\" \"ac_cv_func_clock_gettime\"\n+if test \"x$ac_cv_func_clock_gettime\" = xyes; then :\n \n-/* Override any GCC internal prototype to avoid an error.\n-   Use char because int might match the return type of a GCC\n-   builtin and then its argument prototype would still apply.  */\n-#ifdef __cplusplus\n-extern \"C\"\n-#endif\n-char clock_gettime ();\n-int\n-main ()\n-{\n-return clock_gettime ();\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-for ac_lib in '' posix4; do\n-  if test -z \"$ac_lib\"; then\n-    ac_res=\"none required\"\n-  else\n-    ac_res=-l$ac_lib\n-    LIBS=\"-l$ac_lib  $ac_func_search_save_LIBS\"\n-  fi\n-  if test x$gcc_no_link = xyes; then\n-  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n-fi\n-if ac_fn_cxx_try_link \"$LINENO\"; then :\n-  ac_cv_search_clock_gettime=$ac_res\n fi\n-rm -f core conftest.err conftest.$ac_objext \\\n-    conftest$ac_exeext\n-  if ${ac_cv_search_clock_gettime+:} false; then :\n-  break\n-fi\n-done\n-if ${ac_cv_search_clock_gettime+:} false; then :\n \n-else\n-  ac_cv_search_clock_gettime=no\n-fi\n-rm conftest.$ac_ext\n-LIBS=$ac_func_search_save_LIBS\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_search_clock_gettime\" >&5\n-$as_echo \"$ac_cv_search_clock_gettime\" >&6; }\n-ac_res=$ac_cv_search_clock_gettime\n-if test \"$ac_res\" != no; then :\n-  test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n-\n-fi\n-\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing nanosleep\" >&5\n-$as_echo_n \"checking for library containing nanosleep... \" >&6; }\n-if ${ac_cv_search_nanosleep+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  ac_func_search_save_LIBS=$LIBS\n-cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-\n-/* Override any GCC internal prototype to avoid an error.\n-   Use char because int might match the return type of a GCC\n-   builtin and then its argument prototype would still apply.  */\n-#ifdef __cplusplus\n-extern \"C\"\n-#endif\n-char nanosleep ();\n-int\n-main ()\n-{\n-return nanosleep ();\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-for ac_lib in '' posix4; do\n-  if test -z \"$ac_lib\"; then\n-    ac_res=\"none required\"\n-  else\n-    ac_res=-l$ac_lib\n-    LIBS=\"-l$ac_lib  $ac_func_search_save_LIBS\"\n-  fi\n-  if test x$gcc_no_link = xyes; then\n-  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n-fi\n-if ac_fn_cxx_try_link \"$LINENO\"; then :\n-  ac_cv_search_nanosleep=$ac_res\n-fi\n-rm -f core conftest.err conftest.$ac_objext \\\n-    conftest$ac_exeext\n-  if ${ac_cv_search_nanosleep+:} false; then :\n-  break\n-fi\n-done\n-if ${ac_cv_search_nanosleep+:} false; then :\n-\n-else\n-  ac_cv_search_nanosleep=no\n-fi\n-rm conftest.$ac_ext\n-LIBS=$ac_func_search_save_LIBS\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_search_nanosleep\" >&5\n-$as_echo \"$ac_cv_search_nanosleep\" >&6; }\n-ac_res=$ac_cv_search_nanosleep\n-if test \"$ac_res\" != no; then :\n-  test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n+      ac_fn_cxx_check_func \"$LINENO\" \"nanosleep\" \"ac_cv_func_nanosleep\"\n+if test \"x$ac_cv_func_nanosleep\" = xyes; then :\n \n fi\n \n@@ -21467,7 +21428,7 @@ return sched_yield ();\n   return 0;\n }\n _ACEOF\n-for ac_lib in '' rt posix4; do\n+for ac_lib in '' rt; do\n   if test -z \"$ac_lib\"; then\n     ac_res=\"none required\"\n   else\n@@ -21504,10 +21465,6 @@ fi\n \n \n     case \"$ac_cv_search_sched_yield\" in\n-      -lposix4*)\n-      GLIBCXX_LIBS=\"$GLIBCXX_LIBS $ac_cv_search_sched_yield\"\n-      ac_has_sched_yield=yes\n-      ;;\n       -lrt*)\n       if test x\"$enable_libstdcxx_time\" = x\"rt\"; then\n \tGLIBCXX_LIBS=\"$GLIBCXX_LIBS $ac_cv_search_sched_yield\""}, {"sha": "cc9c8554c6cdef0b6cd9d5093dfe17ed11bdffc2", "filename": "libstdc++-v3/doc/xml/manual/configure.xml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml?ref=55ebb0d6fb06e9e5407c4b382b66ce86c48ecaf6", "patch": "@@ -171,8 +171,7 @@\n \t<function>sched_yield</function> functions, used in the\n \timplementation of [thread.thread.this] of the 2011 ISO C++ standard.\n \tThe choice OPTION=yes checks for the availability of the facilities\n-\tin libc and libposix4.  In case it's needed the latter is also linked\n-\tto libstdc++ as part of the build process.  OPTION=rt also checks in\n+\tin libc.  OPTION=rt also checks in\n \tlibrt (and, if it's needed, links to it).  Note that linking to librt\n \tis not always desirable because for glibc it requires linking to\n \tlibpthread too, which causes all reference counting to use atomic"}]}