{"sha": "1a62528312e1af15fc74a8507a61aa500d118fc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE2MjUyODMxMmUxYWYxNWZjNzRhODUwN2E2MWFhNTAwZDExOGZjNw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-05-04T18:14:53Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-05-04T18:14:53Z"}, "message": "(plain_type): Pass additional argument to plain_type_1.\n\n(plain_type_1): New parameter level.  Increment it when making\nrecursive calls.  Force the type to void_type_mode before starting\na 7th level of recursion.\n\nFrom-SVN: r9572", "tree": {"sha": "0bae83ca5f42d07b780c64691df185ed01441383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bae83ca5f42d07b780c64691df185ed01441383"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a62528312e1af15fc74a8507a61aa500d118fc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a62528312e1af15fc74a8507a61aa500d118fc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a62528312e1af15fc74a8507a61aa500d118fc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a62528312e1af15fc74a8507a61aa500d118fc7/comments", "author": null, "committer": null, "parents": [{"sha": "97f8690b7495a1a1fe7fa6ef7d33dfeb55c2b42c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97f8690b7495a1a1fe7fa6ef7d33dfeb55c2b42c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97f8690b7495a1a1fe7fa6ef7d33dfeb55c2b42c"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "b08a6ebb449dbf04370c233ec11c9dd329685e92", "filename": "gcc/sdbout.c", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a62528312e1af15fc74a8507a61aa500d118fc7/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a62528312e1af15fc74a8507a61aa500d118fc7/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=1a62528312e1af15fc74a8507a61aa500d118fc7", "patch": "@@ -369,7 +369,7 @@ static int\n plain_type (type)\n      tree type;\n {\n-  int val = plain_type_1 (type);\n+  int val = plain_type_1 (type, 0);\n \n   /* If we have already saved up some array dimensions, print them now.  */\n   if (sdb_n_dims > 0)\n@@ -449,15 +449,25 @@ sdbout_record_type_name (type)\n #endif\n }\n \n+/* Return the .type value for type TYPE.\n+\n+   LEVEL indicates how many levels deep we have recursed into the type.\n+   The SDB debug format can only represent 6 derived levels of types.\n+   After that, we must output inaccurate debug info.  We deliberately\n+   stop before the 7th level, so that ADA recursive types will not give an\n+   infinite loop.  */\n+\n static int\n-plain_type_1 (type)\n+plain_type_1 (type, level)\n      tree type;\n+     int level;\n {\n   if (type == 0)\n     type = void_type_node;\n-  if (type == error_mark_node)\n+  else if (type == error_mark_node)\n     type = integer_type_node;\n-  type = TYPE_MAIN_VARIANT (type);\n+  else\n+    type = TYPE_MAIN_VARIANT (type);\n \n   switch (TREE_CODE (type))\n     {\n@@ -520,7 +530,10 @@ plain_type_1 (type)\n     case ARRAY_TYPE:\n       {\n \tint m;\n-\tm = plain_type_1 (TREE_TYPE (type));\n+\tif (level >= 6)\n+\t  return T_VOID;\n+\telse\n+\t  m = plain_type_1 (TREE_TYPE (type), level+1);\n \tif (sdb_n_dims < SDB_MAX_DIM)\n \t  sdb_dims[sdb_n_dims++]\n \t    = (TYPE_DOMAIN (type)\n@@ -569,13 +582,21 @@ plain_type_1 (type)\n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n       {\n-\tint m = plain_type_1 (TREE_TYPE (type));\n+\tint m;\n+\tif (level >= 6)\n+\t  return T_VOID;\n+\telse\n+\t  m = plain_type_1 (TREE_TYPE (type), level+1);\n \treturn PUSH_DERIVED_LEVEL (DT_PTR, m);\n       }\n     case FUNCTION_TYPE:\n     case METHOD_TYPE:\n       {\n-\tint m = plain_type_1 (TREE_TYPE (type));\n+\tint m;\n+\tif (level >= 6)\n+\t  return T_VOID;\n+\telse\n+\t  m = plain_type_1 (TREE_TYPE (type), level+1);\n \treturn PUSH_DERIVED_LEVEL (DT_FCN, m);\n       }\n     default:"}]}