{"sha": "40c43acacc1765416278e6636c20c5e3a78a7384", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBjNDNhY2FjYzE3NjU0MTYyNzhlNjYzNmMyMGM1ZTNhNzhhNzM4NA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2016-01-15T22:32:05Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-01-15T22:32:05Z"}, "message": "re PR tree-optimization/69270 (DOM should exploit range information to create more equivalences)\n\n\tPR tree-optimization/69270\n\t* tree-ssanames.c (ssa_name_has_boolean_range): Moved here from\n\ttree-ssa-dom.c.  Improve test for [0..1] ranve from VRP.\n\t* tree-ssa-dom.c (ssa_name_has_boolean_range): Remove.\n\t* tree-ssanames.h (ssa_name_has_boolean_range): Prototype.\n\t* tree-ssa-uncprop.c (associate_equivalences_with_edges): Use\n\tssa_name_has_boolean_range and constant_boolean_node.\n\n\tPR tree-optimization/69270\n\t* gcc.dg/tree-ssa/pr69270-2.c: New test.\n\t* gcc.dg/tree-ssa/pr69270-3.c: New test.\n\nFrom-SVN: r232453", "tree": {"sha": "0c5e0c93ef87ace7d5ef512867efe2303ef79439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c5e0c93ef87ace7d5ef512867efe2303ef79439"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40c43acacc1765416278e6636c20c5e3a78a7384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c43acacc1765416278e6636c20c5e3a78a7384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40c43acacc1765416278e6636c20c5e3a78a7384", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c43acacc1765416278e6636c20c5e3a78a7384/comments", "author": null, "committer": null, "parents": [{"sha": "cebeb718fed641f5c6b093e487c5e93c9b41ce02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cebeb718fed641f5c6b093e487c5e93c9b41ce02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cebeb718fed641f5c6b093e487c5e93c9b41ce02"}], "stats": {"total": 183, "additions": 141, "deletions": 42}, "files": [{"sha": "409e981338759b407e0ea0f9b5a9d4c89ad6a3a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c43acacc1765416278e6636c20c5e3a78a7384/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c43acacc1765416278e6636c20c5e3a78a7384/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40c43acacc1765416278e6636c20c5e3a78a7384", "patch": "@@ -1,3 +1,13 @@\n+2016-01-15  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/69270\n+\t* tree-ssanames.c (ssa_name_has_boolean_range): Moved here from\n+\ttree-ssa-dom.c.  Improve test for [0..1] ranve from VRP.\n+\t* tree-ssa-dom.c (ssa_name_has_boolean_range): Remove.\n+\t* tree-ssanames.h (ssa_name_has_boolean_range): Prototype.\n+\t* tree-ssa-uncprop.c (associate_equivalences_with_edges): Use\n+\tssa_name_has_boolean_range and constant_boolean_node.\n+\n 2016-01-15  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/69030"}, {"sha": "d9a92460ec1ad918c684c4782f4123c98318f35c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c43acacc1765416278e6636c20c5e3a78a7384/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c43acacc1765416278e6636c20c5e3a78a7384/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40c43acacc1765416278e6636c20c5e3a78a7384", "patch": "@@ -1,3 +1,9 @@\n+2016-01-15  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/69270\n+\t* gcc.dg/tree-ssa/pr69270-2.c: New test.\n+\t* gcc.dg/tree-ssa/pr69270-3.c: New test.\n+\n 2016-01-15  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/49630"}, {"sha": "15c7bdda15a5abf5d893f781b96b2c080faff3fd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr69270-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c43acacc1765416278e6636c20c5e3a78a7384/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69270-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c43acacc1765416278e6636c20c5e3a78a7384/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69270-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69270-2.c?ref=40c43acacc1765416278e6636c20c5e3a78a7384", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dom3-details -w\" } */\n+\n+/* There should be a reference to usecount that turn into\n+   constants.  */\n+/* { dg-final { scan-tree-dump-times \"Replaced .usecount_\\[0-9\\]+. with constant .1.\" 1 \"dom3\"} } */\n+\n+/* And an assignment using usecount ought to fold down to constants.  */\n+/* { dg-final { scan-tree-dump-times \"Folded to: usecount_\\[0-9\\]+ = 2;\" 1 \"dom3\"} } */\n+\n+/* The arithmetic using usecount should be gone, except for the one in the\n+   details debugging.  */\n+/* { dg-final { scan-tree-dump-times \"usecount_\\[0-9\\]+ = usecount_\\[0-9\\]+ . 1;\" 1 \"dom3\"} } */\n+\n+typedef union tree_node *tree;\n+typedef union gimple_statement_d *gimple;\n+extern const int tree_code_type[];\n+union tree_node\n+{\n+  int code:16;\n+};\n+typedef struct immediate_use_iterator_d\n+{\n+}\n+imm_use_iterator;\n+void\n+insert_debug_temp_for_var_def (gimple stmt)\n+{\n+  gimple def_stmt = ((void *) 0);\n+  int usecount = 0;\n+  tree value = ((void *) 0);\n+  for (; arf ();)\n+    {\n+      if (!gimple_debug_bind_p (stmt))\n+        continue;\n+      if (usecount++)\n+        break;\n+      unsigned char no_value = 0;\n+      if (!gimple_bb (def_stmt))\n+        no_value = 1;\n+      if (!no_value)\n+        value = gimple_assign_rhs_to_tree ();\n+    }\n+  if (value)\n+    {\n+      if ((tree_code_type[(int) (((value)->code))] == 42)\n+          || (usecount == 1 && (is_gimple_min_invariant (value))))\n+        value = unshare_expr (value);\n+    }\n+}\n+\n+"}, {"sha": "89735f67de209af0b72720ab5e58c288593e1fb9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr69270-3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c43acacc1765416278e6636c20c5e3a78a7384/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69270-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c43acacc1765416278e6636c20c5e3a78a7384/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69270-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69270-3.c?ref=40c43acacc1765416278e6636c20c5e3a78a7384", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-uncprop-details -w\" } */\n+\n+/* We're looking for a constant argument a PHI node.  There\n+   should only be one if we unpropagate correctly.  */\n+/* { dg-final { scan-tree-dump-times \", 1\" 1 \"uncprop1\"} } */\n+\n+typedef long unsigned int size_t;\n+typedef union gimple_statement_d *gimple;\n+unsigned char\n+propagate_with_phi ()\n+{\n+  gimple use_stmt;\n+  unsigned char phi_inserted;\n+  phi_inserted = 0;\n+  for (; !end_imm_use_stmt_p (); next_imm_use_stmt ())\n+    {\n+      if (!(arf () == 10 && boo () == 20))\n+        continue;\n+      if (!phi_inserted)\n+        phi_inserted = 1;\n+      else\n+        update_stmt ();\n+    }\n+}\n+"}, {"sha": "829863794a31ee1d462dcfa4c196bc49dc5dc866", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c43acacc1765416278e6636c20c5e3a78a7384/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c43acacc1765416278e6636c20c5e3a78a7384/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=40c43acacc1765416278e6636c20c5e3a78a7384", "patch": "@@ -316,39 +316,6 @@ record_conditions (struct edge_info *edge_info, tree cond, tree inverted)\n   edge_info->cond_equivalences.safe_push (c);\n }\n \n-/* Return TRUE is OP, an SSA_NAME has a range of values [0..1], false\n-   otherwise.\n-\n-   This can be because it is a boolean type, any unsigned integral\n-   type with a single bit of precision, or has known range of [0..1]\n-   via VRP analysis.  */\n-\n-static bool\n-ssa_name_has_boolean_range (tree op)\n-{\n-  /* Boolean types always have a range [0..1].  */\n-  if (TREE_CODE (TREE_TYPE (op)) == BOOLEAN_TYPE)\n-    return true;\n-\n-  /* An integral type with a single bit of precision.  */\n-  if (INTEGRAL_TYPE_P (TREE_TYPE (op))\n-      && TYPE_UNSIGNED (TREE_TYPE (op))\n-      && TYPE_PRECISION (TREE_TYPE (op)) == 1)\n-    return true;\n-\n-  /* An integral type with more precision, but the object\n-     only takes on values [0..1] as determined by VRP\n-     analysis.  */\n-  wide_int min, max;\n-  if (INTEGRAL_TYPE_P (TREE_TYPE (op))\n-      && get_range_info (op, &min, &max) == VR_RANGE\n-      && wi::eq_p (min, 0)\n-      && wi::eq_p (max, 1))\n-    return true;\n-\n-  return false;\n-}\n-\n /* We have finished optimizing BB, record any information implied by\n    taking a specific outgoing edge from BB.  */\n "}, {"sha": "307bb1fd134047245fa8e9be434e4b8960fb7af9", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c43acacc1765416278e6636c20c5e3a78a7384/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c43acacc1765416278e6636c20c5e3a78a7384/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=40c43acacc1765416278e6636c20c5e3a78a7384", "patch": "@@ -94,39 +94,42 @@ associate_equivalences_with_edges (void)\n \t\t can record an equivalence for OP0 rather than COND.  */\n \t      if (TREE_CODE (op0) == SSA_NAME\n \t\t  && !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (op0)\n-\t\t  && TREE_CODE (TREE_TYPE (op0)) == BOOLEAN_TYPE\n+\t\t  && ssa_name_has_boolean_range (op0)\n \t\t  && is_gimple_min_invariant (op1))\n \t\t{\n+\t\t  tree true_val = constant_boolean_node (true, TREE_TYPE (op0));\n+\t\t  tree false_val = constant_boolean_node (false,\n+\t\t\t\t\t\t\t  TREE_TYPE (op0));\n \t\t  if (code == EQ_EXPR)\n \t\t    {\n \t\t      equivalency = XNEW (struct edge_equivalency);\n \t\t      equivalency->lhs = op0;\n \t\t      equivalency->rhs = (integer_zerop (op1)\n-\t\t\t\t\t  ? boolean_false_node\n-\t\t\t\t\t  : boolean_true_node);\n+\t\t\t\t\t  ? false_val\n+\t\t\t\t\t  : true_val);\n \t\t      true_edge->aux = equivalency;\n \n \t\t      equivalency = XNEW (struct edge_equivalency);\n \t\t      equivalency->lhs = op0;\n \t\t      equivalency->rhs = (integer_zerop (op1)\n-\t\t\t\t\t  ? boolean_true_node\n-\t\t\t\t\t  : boolean_false_node);\n+\t\t\t\t\t  ? true_val\n+\t\t\t\t\t  : false_val);\n \t\t      false_edge->aux = equivalency;\n \t\t    }\n \t\t  else\n \t\t    {\n \t\t      equivalency = XNEW (struct edge_equivalency);\n \t\t      equivalency->lhs = op0;\n \t\t      equivalency->rhs = (integer_zerop (op1)\n-\t\t\t\t\t  ? boolean_true_node\n-\t\t\t\t\t  : boolean_false_node);\n+\t\t\t\t\t  ? true_val\n+\t\t\t\t\t  : false_val);\n \t\t      true_edge->aux = equivalency;\n \n \t\t      equivalency = XNEW (struct edge_equivalency);\n \t\t      equivalency->lhs = op0;\n \t\t      equivalency->rhs = (integer_zerop (op1)\n-\t\t\t\t\t  ? boolean_false_node\n-\t\t\t\t\t  : boolean_true_node);\n+\t\t\t\t\t  ? false_val\n+\t\t\t\t\t  : true_val);\n \t\t      false_edge->aux = equivalency;\n \t\t    }\n \t\t}"}, {"sha": "b6f72e2ba2c2fb34288947086b43fcf01c23ead1", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c43acacc1765416278e6636c20c5e3a78a7384/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c43acacc1765416278e6636c20c5e3a78a7384/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=40c43acacc1765416278e6636c20c5e3a78a7384", "patch": "@@ -411,6 +411,40 @@ get_nonzero_bits (const_tree name)\n   return ri->get_nonzero_bits ();\n }\n \n+/* Return TRUE is OP, an SSA_NAME has a range of values [0..1], false\n+   otherwise.\n+\n+   This can be because it is a boolean type, any unsigned integral\n+   type with a single bit of precision, or has known range of [0..1]\n+   via VRP analysis.  */\n+\n+bool\n+ssa_name_has_boolean_range (tree op)\n+{\n+  gcc_assert (TREE_CODE (op) == SSA_NAME);\n+\n+  /* Boolean types always have a range [0..1].  */\n+  if (TREE_CODE (TREE_TYPE (op)) == BOOLEAN_TYPE)\n+    return true;\n+\n+  /* An integral type with a single bit of precision.  */\n+  if (INTEGRAL_TYPE_P (TREE_TYPE (op))\n+      && TYPE_UNSIGNED (TREE_TYPE (op))\n+      && TYPE_PRECISION (TREE_TYPE (op)) == 1)\n+    return true;\n+\n+  /* An integral type with more precision, but the object\n+     only takes on values [0..1] as determined by VRP\n+     analysis.  */\n+  if (INTEGRAL_TYPE_P (TREE_TYPE (op))\n+      && (TYPE_PRECISION (TREE_TYPE (op)) > 1\n+\t  || TYPE_UNSIGNED (TREE_TYPE (op)))\n+      && wi::eq_p (get_nonzero_bits (op), 1))\n+    return true;\n+\n+  return false;\n+}\n+\n /* We no longer need the SSA_NAME expression VAR, release it so that\n    it may be reused.\n "}, {"sha": "c81b1a14184ef01c58ba07fb61648eb002d3b9db", "filename": "gcc/tree-ssanames.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c43acacc1765416278e6636c20c5e3a78a7384/gcc%2Ftree-ssanames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c43acacc1765416278e6636c20c5e3a78a7384/gcc%2Ftree-ssanames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.h?ref=40c43acacc1765416278e6636c20c5e3a78a7384", "patch": "@@ -75,6 +75,7 @@ extern enum value_range_type get_range_info (const_tree, wide_int *,\n \t\t\t\t\t     wide_int *);\n extern void set_nonzero_bits (tree, const wide_int_ref &);\n extern wide_int get_nonzero_bits (const_tree);\n+extern bool ssa_name_has_boolean_range (tree);\n extern void init_ssanames (struct function *, int);\n extern void fini_ssanames (struct function *);\n extern void ssanames_print_statistics (void);"}]}