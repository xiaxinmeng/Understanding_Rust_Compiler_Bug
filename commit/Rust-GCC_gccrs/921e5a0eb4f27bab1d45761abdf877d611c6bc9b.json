{"sha": "921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIxZTVhMGViNGYyN2JhYjFkNDU3NjFhYmRmODc3ZDYxMWM2YmM5Yg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-08-19T07:34:40Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-08-19T07:34:40Z"}, "message": "Initial revision\n\nFrom-SVN: r14840", "tree": {"sha": "335fa7ed68bccaabc938e142eabc167ac296372e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/335fa7ed68bccaabc938e142eabc167ac296372e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/comments", "author": null, "committer": null, "parents": [{"sha": "45832e2182e27364dd403958fac6a9756fd047cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45832e2182e27364dd403958fac6a9756fd047cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45832e2182e27364dd403958fac6a9756fd047cd"}], "stats": {"total": 93270, "additions": 93270, "deletions": 0}, "files": [{"sha": "b30226a14e097538b71e4bf8f60c45ae05245ff1", "filename": "gcc/testsuite/ChangeLog", "status": "added", "additions": 1928, "deletions": 0, "changes": 1928, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,1928 @@\n+Thu Jul 31 12:17:24 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* gcc.c-torture/execute/920501-9.c: Fix to work on targets with\n+\t32bit or larger longs.\n+\n+\t* gcc.c-torture/execute/961017-2.c: Fix to work on targets which\n+\thave either a 32bit long or 32bit int.\n+\n+Wed Jul  9 15:15:40 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* gcc.prms/5403.c: Allow CRLFs to occur at the start of the output\n+\ttoo.\n+\n+Mon Jun 16 15:27:06 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/g++.exp(g++_init): Use g++_include_flags instead of making\n+\tup the includes ourselves.\n+\n+Wed Jun 11 17:33:21 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/plumhall.exp: Remove random include, and add a few\n+\tverbose messages for debugging.\n+\n+Fri Jun  6 14:23:24 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/g++.exp: Use g++_link_flags from libgloss.exp, instead\n+\tof trying to do it ourselves.\n+\n+Wed Jun  4 18:43:55 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* gcc.prms/5403.c: Made regexp a bit less strict.\n+\n+Tue Jun  3 15:12:39 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/mike-gcc.exp: Don't use global exec_output anymore. Output\n+\tis returned from remote_load instead.\n+\t* lib/plumhall.exp: Ditto.\n+\t* lib/mike-g++.exp: Ditto.\n+\t* lib/old-dejagnu.exp: Ditto.\n+\t* lib/c-torture.exp: Ditto.\n+\n+Fri May 30 23:15:15 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/g++.exp: Use build_wrapper procedure.\n+\t* lib/gcc.exp: Ditto.\n+\n+Tue May 20 15:23:27 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* gcc.c-torture/execute/*.c: Include stdlib.h instead of using\n+\tan old-style decl for malloc.  Fixes tests to work when\n+\tsizeof (int) != sizeof (size_t).\n+\n+Thu May 15 14:10:39 1997  Mike Meissner  <meissner@cygnus.com>\n+\n+\t* lib/gcc.exp (gcc_target_compile): If gcc,no_varargs, define\n+\tNO_VARARGS when compiling.\n+\n+Thu May  1 14:49:19 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/plumhall.exp(ph_includes): New procedure.\n+\t(ph_make): Use it.\n+\t(ph_compiler): Ditto.\n+\n+\t* lib/g++.exp: Rename test-glue.c to testglue.c.\n+\t* lib/gcc.exp: Ditto.\n+\n+Thu Apr 10 14:50:26 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/g++.exp(g++init): Don't try to be smart, always run g++_init\n+ \tto completion when it's called.\n+\n+Thu Mar 20 09:50:32 1997  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/plumhall.exp (ph_make): Comment out errorCode=NONE test\n+\tfor object files.\n+\t(ph_summary): Mark skipped testcases as untested, not unresolved.\n+\n+\t* lib/plumhall.exp (ph_make): If unresolved because of bad\n+\terrorCode, record errorCode in log file.\n+\t(*): Replace send_log/verbose with verbose -log.\n+\n+Thu Mar 13 16:09:28 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/plumhall.exp: Use incr_count.\n+\n+Wed Mar 12 10:01:33 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* gcc.c-torture: Update to c-torture-1.45.\n+\n+Sun Feb 23 18:12:04 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/gcc.exp(gcc_init): Add args parameter (which will contain\n+ \tthe name of the expect testcase file).\n+\t\n+\t* lib/g++.exp(g++_init): Ditto.\n+\n+Thu Feb 20 13:53:05 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/g++.exp(g++_exit): $gluefile lives on the build, not\n+\tthe host.\n+\n+\t* lib/gcc.exp(gcc_exit): New procedure.\n+\n+Wed Feb 19 15:16:16 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* g++.old-deja/g++.rfg/*: Added \"Build don't link\" and ERROR\n+\tspecs where appropriate.\n+\n+\t* g++.old-deja/g++.arm/*: Added additional ERROR checks\n+\tbecause of new \"candidates are\" messages, and removed a few\n+\n+\t* Converted all non-old-style g++ testcases to old-style, and\n+\tmoved into g++.old-deja.\n+\n+Fri Feb 14 11:46:46 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/old-dejagnu.exp(old-dejagnu): Add various \"skip if\"\n+\toptions.\n+\n+\t* lib/gcc.exp(gcc_init): Don't set gluefile unless the compile\n+\tsucceeded.\n+\n+\t* lib/g++.exp(g++_init): Don't unset gluefile unless it exists.\n+\n+Thu Feb 13 17:30:46 1997  Michael Meissner  <meissner@cygnus.com>\n+\n+\t* lib/gcc.exp (gcc_target_compile): Add support for defining\n+\tNO_TRAMPOLINES and NO_LABEL_VALUES if the baseboard file indicates\n+\tthe machine doesn't have those features.\n+\n+Tue Feb 11 12:57:11 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* g++.law/operators4.exp: Don't use LIBS.\n+\n+Sat Feb  8 14:45:55 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* g++.law/virtual1.exp: Don't use CXX_FLAGS.\n+\t\n+\t* lib/mike-g++.exp: Don't set the compiler to be tested here.\n+\t* lib/g++.exp: Set it here instead. Also, allow use of the\n+\t--tool_exec and --tool_opt options. Change CXX to\n+\tGXX_UNDER_TEST.\n+\t\n+\t* g++.old-deja/old-deja.exp: Change CXX to GXX_UNDER_TEST.\n+\t\n+\t* lib/gcc.exp: Allow use of --tool_exec and --tool_opt.\n+\n+Fri Feb  7 12:55:45 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/old-dejagnu.exp: Use prune_warnings instead of\n+ \tprune_system_crud.\n+\t* lib/mike-g++.exp: Ditto.\n+\t* lib/gcc.exp: Ditto.\n+\t* lib/g++.exp: Ditto.\n+\n+\t* lib/g++.exp: Include both libstdc++ and libstdc++/stl.\n+\n+Fri Feb  7 10:41:53 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+        * 941014-2.c: Include stdlib.h\n+        * 960327-1.c: Include stdio.h\n+        * dbra.c, index-1.c: Don't assume ints are 32bits.\n+\n+Tue Feb  4 12:51:09 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/gcc.exp: Add gcc,stack_size target feature.\n+\n+\t* lib/g++.exp(g++_target_compile): Add the include and link \n+\tpaths here, not in two other places. And, it's $options, not\n+\toptions.\n+\n+\t* lib/mike-g++.exp(postbase): Remove the code that determines\n+\tthe correct include and link paths.\n+\t* g++.old-deja/old-deja.exp: Ditto.\n+\n+Mon Feb  3 19:00:07 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/g++.exp(g++_init): target_compile no longer returns the\n+\tfilename of the result.\n+\n+Sun Feb  2 14:42:34 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* gcc.misc-tests/gcov.exp: Add -nocomplain to the\n+\tcall to glob.\n+\n+\t* gcc.c-torture/special/special.exp: Change call to\n+ \tgcc_target_compile to include the object file.\n+\n+Sun Feb  2 17:11:50 1997  Ian Lance Taylor  <ian@cygnus.com>\n+\n+\t* gcc.c-torture/special/special.exp: Correct misspelling in last\n+\tchange.\n+\n+Sat Feb  1 12:34:23 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/plumhall.exp(ph_summary): Log the entire output of the\n+ \texecutable. Return -1 if there were any failures, 0 otherwise.\n+\t(ph_execute): Return -1 if there were any failures, 0 otherwise.\n+\t(ph_make): Clean up objects and executables that were built\n+\tif the tests succeeded.\n+\n+Thu Jan 30 13:45:56 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* g++.old-deja/old-deja.exp: Add -L and -I flags so we include\n+\tlibraries and includes in the build tree as appropriate.\n+\n+Wed Jan 29 17:19:34 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/c-torture.exp: Instead of looking for the global variable\n+\tNO_LONG_LONG, check to see if that's a feature of the target.\n+\n+Wed Jan 29 00:36:25 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* config/default.exp: Minimize. Delete the remainer of the files in\n+\tconfig;\tthis functionality is now in devo/dejagnu/config.\n+\n+\tg++.*/*: Pass any additional flags used to compile to postbase;\n+\tdelete CXXFLAGS.\n+\t\n+\tgcc.c-torture/*: Remove calls to gcc_init and gcc_finish; this\n+\tis now done by runtest.exp. Use gcc_target_compile instead of\n+\tcompile.\n+\n+\tlib/c-torture.exp: Use gcc_target_compile instead of compile.\n+\tRemove references to CFLAGS. Use remote_file instead of\n+\tcalling rm -f.\n+\t(c-torture): Take a list of arguments to use to compile this\n+\ttestcase.\n+\n+\tlib/g++.exp: Simplify. Use target_compile instead of compile.\n+\tlib/gcc-dg.exp: Ditto.\n+\tlib/gcc.exp: Ditto.\n+\tlib/mike-{gcc,g++}.exp: Ditto.\n+\tlib/old-dejagnu.exp: Ditto.\n+\tlib/plumhall.exp: Ditto.\n+\t\n+Wed Jan  8 14:43:07 1997  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* lib/plumhall.exp (ph_make): Use CFLAGS and ANSICFLAGS when linking.\n+\t(ph_linker): Likewise.\n+\n+Wed Nov 13 16:04:19 1996  Joern Rennecke <amylaar@cygnus.com>\n+\n+        * gcc.c-torture/execute/{loop-2e.c,loop-2f.c}: Only use\n+\tMAP_ANON / MAP_ANONYMOUS if defined;\n+\telse try to map from /dev/zero .\n+\n+Tue Nov 12 23:30:12 1996  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* gcc.c-torture/execute/{loop-2e.c,loop-2f.c}:  If MAP_ANON\n+\tisn't defined, then define it to MAP_ANONYMOUS.\n+\n+Tue Nov 12 11:57:49 1996  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* gcc.c-torture: Update to c-torture-1.42 release.\n+\n+Mon Nov 11 12:45:31 1996  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* gcc.c-torture: Update to c-torture-1.41 release.\n+\n+Sun Oct 27 18:56:18 1996  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* gcc.c-torture/execute/enum-1.c: New test.  Will be in next\n+\tc-torture release.\n+\n+Thu Aug 15 11:09:36 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* lib/gcc.exp (gcc_init): Always append the target_info to CFLAGS\n+\tand LDFLAGS.  Fix second case to append the target_info ldflags\n+\tonto LDFLAGS, not CFLAGS.\n+\t* lib/g++.exp (g++_init): Add target_info stuff.\n+\t* lib/old-dejagnu.exp (old-dejagnu-init): Likewise.  Add inclusion\n+\tof libgloss and newlib flags for !native.\n+\n+\t* config/proelf.exp: Load remote.exp and do `push_target hppro'.\n+\t(GDB): Fix relative path to go up another dir for finding gdb.\n+\n+Thu Aug  8 17:03:27 1996  Rob Savoye  <rob@chinadoll.cygnus.com>\n+\n+\t* lib/gcc.exp(gcc_init): Set CFLAGS and LDFLAGS to their new\n+\tversions in the target_info array, if they don't exist.\n+\n+Fri Aug  2 15:39:03 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* config/vx.exp (${tool}_load): Fix syntax of `$shell_id < 0'.\n+\n+Mon Jul  8 15:45:58 1996  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* lib/g++.exp: Change all uses of $base_dir/ to $base_dir/../.\n+\t* lib/gcc.exp, lib/old-dejagnu.exp: Likewise.\n+\n+Mon Jul  1 15:53:00 1996  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/old-dejagnu.exp: Don't remove the output file before we've\n+\tactually tested it. Don't append pwd to the path of the executable\n+\twe're testing.\n+\n+Sun Jun 30 14:37:50 1996  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/g++.exp (default_g++_start): Don't pass LDFLAGS, LIBS if -c.\n+\n+Wed Jun 26 14:15:55 1996  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/old-dejagnu.exp (old-dejagnu): Add $tmpdir to specify a\n+ \ttemporary directory for compiler files, and set it to a default\n+ \tvalue of /tmp. Set $output as the name of the output file from\n+ \tcompiling the testcase. Add a -o option to $cflags_var so the\n+ \tcompiler writes the final output file as $output. Set $executable\n+ \tto $output.\n+\n+\t* lib/mike-g++.exp (postbase): Add $tmpdir to specify a temporary\n+ \tdirectory for compiler files, and set it to /tmp if it doesn't\n+ \talready have a value. Set $output_file to the name of the output\n+ \tfile from compiling the testcase. Add a -o option to CXXFLAGS so\n+ \tthe compiler writes the final output file as $output. Use $output\n+ \tas the executable to be tested.\n+\n+Mon Jun 24 17:12:16 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* lib/g++.exp: Also add -Wl,-rpath,... for linux.\n+\n+Sat Jun  8 15:12:24 1996  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* gcc.c-torture/execute/pending-1.c: New test.  Still\n+\tpending in Tege's queue.\n+\n+Wed Apr 24 18:13:45 1996  Jim Wilson  <wilson@chestnut.cygnus.com>\n+\n+\t* lib/plumhall.exp (ph_summary): Add arguments name and exec_status.\n+\tAdd variables local_failcnt and local_unresolvedcnt.  Call gcc_fail\n+\tif there were failures.  Call unresolved if there were unresolved\n+\ttestcases.  Call gcc_fail if program did not run to completion.\n+\t(ph_make): Pass additional argument name to ph_execute.\n+\t(ph_execute): Add new argument.  Pass additional arguments to\n+\tph_summary.  Call gcc_fail is there is no execution output.\n+\n+Wed Apr 24 13:39:23 1996  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* lib/plumhall.exp (proc_summary): Output relavent summary\n+\tlines into the log so specific failures in plumhall can be\n+\tinvestigated.\n+\n+Wed Apr 10 13:23:45 1996  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* lib/c-torture.exp: Provide a default value for $NO_LONG_LONG.\n+\t(c-torture-execute): Don't try to execute tests which use\n+\t\"long long\" types if $NO_LONG_LONG is nonzero.\n+\n+Mon Apr  8 08:52:29 1996  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* gcc.c-torture/execute/ieee/ieee.exp: Run c-torture-execute,\n+\tnot c-torture.\n+\n+\t* gcc.ieee: Move from here.\n+\t* gcc.c-torture/execute/ieee: To here.\n+\n+Tue Mar 26 23:41:18 1996  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* gcc.c-torture: Update to c-torture-1.41 release.\n+\n+Fri Mar 22 15:49:24 1996  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* lib/c-torture.exp (c-torture-execute): Remove \"$executable\",\n+\tnot \"$output\".\n+\n+Thu Mar  7 12:37:08 1996  Doug Evans  <dje@charmed.cygnus.com>\n+\n+\t* lib/gcc.exp (default_gcc_start): Don't pass $LDFLAGS $LIBS if\n+\t-c present.\n+\n+Sat Mar  2 22:36:37 1996  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* config/proelf.exp: Handle connecting to a simulator.\n+\n+Wed Jan 31 00:58:15 1996  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* config/proelf.exp: New file.  Enough framework that we can\n+\trun c-torture tests on the proelf targets (or any other target\n+\tthat gdb can connect to for that matter).\n+\n+Mon Jan 29 08:57:46 1996  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* gcc.c-torture/special/special.exp: Delete libs arg to dg-runtest.\n+\t* gcc.ph/testing/limits/limits.exp: Likewise.  Don't pass $CFLAGS.\n+\n+\t* lib/plumhall.exp (ph_execute): Always call ph_summary if\n+\texec_output exists.\n+\n+Sun Jan 28 11:28:43 1996  Doug Evans  <dje@charmed.cygnus.com>\n+\n+\t* config/sim.exp (SIM_TIME_LIMIT): New user settable variable.\n+\t(${tool}_load): Use 240 seconds if SIM_TIME_LIMIT not set.\n+\n+\t* config/*.exp: Update FSF address.  Change result of ${tool}_load\n+\tto pass/fail/unresolved/unsupported/untested.  Caller must now\n+\tcall unresolved/unsupported/untested.\n+\t* lib/*.exp: Update FSF address.  Update to handle new results of\n+\t${tool}_load.\n+\t* lib/chill.exp (verbose): Delete.\n+\n+Sat Jan 27 12:28:07 1996  Doug Evans  <dje@charmed.cygnus.com>\n+\n+\t* lib/gcc.exp (default_gcc_start): Change order of args to\n+\t$LDFLAGS $CFLAGS $LIBS.\n+\t* lib/gcc-dg.exp (gcc-dg-test): Arguments have changed, update.\n+\tSave/set/restore CFLAGS.  Pass single arg to gcc_start.\n+\t* gcc.dg/dg.exp: Delete libs arg in call to dg-runtest.\n+\t(CC,CFLAGS,LIBS): Delete references. Don't pass $CFLAGS to dg-runtest.\n+\t* gcc.misc-tests/dg-test.exp: Likewise.\n+\t* gcc.misc-tests/msgs.exp: Likewise.\n+\t* gcc.prms/prms.exp: Likewise.\n+\t* gcc.misc-tests/gcov.exp: Delete libs arg in call to dg-runtest.\n+\t(CFLAGS,LIBS): Delete references.  Don't pass $CFLAGS to dg-runtest.\n+\n+\t* lib/dg.exp: Deleted, moved to dejagnu/lib.\n+\n+Wed Jan 24 18:37:00 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* g++.old-deja/old-deja.exp: Add passing of $mathlib to old-dejagnu.\n+\n+\t* g++.old-deja/old-deja.exp: Move setting of runshlib from here...\n+\t* lib/old-dejagnu.exp (old-dejagnu-init): ...to here.\n+\n+\t* lib/g++.exp (g++_init): Take out use of -rpath for the sun4, not\n+\tnecessary.\n+\n+Sat Jan 20 17:22:08 1996  Brendan Kehoe  <brendan@cygnus.com>\n+\n+\t* g++.old-deja/old-deja.exp: Move setting of runshlib out of the\n+\tglobal for loop; add use of $mathlib.\n+\t* lib/old-dejagnu.exp (old-dejagnu-init): Put the runshlib\n+\tsettings here; set mathlib for anything but VxWorks.\n+\n+Mon Jan 22 16:31:57 1996  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* gcc.c-torture: Update to c-torture-1.40 release.\n+\n+Wed Jan  3 00:54:33 1996  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* gcc.ph/testing/limits/limits.exp: Load ${tool}-dg.exp, not\n+\tdg.exp.\n+\n+Sun Dec  3 16:17:42 1995  Jeffrey A. Law  <law@sethra.cygnus.com>\n+\n+\t* lib/c-torture.exp (c-torture-execute): Declare \"output\" as\n+\tglobal.\n+\n+Fri Nov 17 20:01:19 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/g++.exp (LIBS): Define if not already.\n+\t* lib/gcc-dg.exp (gcc-dg-test): Set executable file as a.out.\n+\t(gcc-dg-prune): Call prune_gcc_output.\n+\t* lib/gcc.exp (prune_gcc_output): New proc.\n+\t* gcc.c-torture/special (921210-1.c): Call prune_system_crud and\n+\tprune_gcc_output.\n+\n+Thu Nov 16 09:15:40 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/c-torture.exp (c-torture-compile): Fix calls to `unsupported'.\n+\t(c-torture-execute): Likewise.\tRename `name' to `testcase'.\n+\n+Wed Nov 15 23:04:36 1995  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* gcc.c-torture: Update to c-torture-1.39 release.\n+\n+Sat Nov  4 12:52:05 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/c-torture.exp (c-torture-execute): Don't return if one option\n+\tfails, try others as well.\n+\n+Thu Nov  2 09:28:35 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/c-torture.exp (c-torture-execute): This proc's result is `void'.\n+\tIf compilation fails, mark execute tests as `untested'.\n+\tIf test is marked as unsupported, don't mark compilation and\n+\texecute tests as failed.\n+\n+Wed Oct 25 20:57:55 1995  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* lib/g++.exp (g++_init): Don't link in libg++, and look to\n+\tlibstdc++ for whether or not we want to be doing shared\n+\tlibraries.  Delete link_curses since we don't need it anymore.\n+\t* lib/mike-g++.exp (postbase): Don't link in libg++.\n+\t* g++.old-deja/old-deja.exp: Likewise.\n+\n+Mon Oct 23 13:05:11 1995  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* lib/g++.exp (CXX): Default to run `c++' instead of `g++'.\n+\n+Tue Oct 17 15:24:47 1995  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* lib/g++.exp (g++_init): Also check for libg++.sl for the hppa.\n+\tFor that, add `-Wl,-a,shared_archive'.\n+\t* g++.old-deja/old-deja.exp: Likewise.\n+\n+Tue Oct 17 13:09:06 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/c-torture.exp (c-torture-execute): Ensure CFLAGS restored.\n+\n+Mon Oct 16 23:13:32 1995  Brendan Kehoe  <brendan@cygnus.com>\n+\n+\t* lib/mike-g++.exp (postbase): Pay attention to the status of\n+\tg++_load.\n+\n+Mon Oct 16 19:28:32 1995  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+        * g++.old-deja/old-deja.exp: Add $LIBS at the end of the args.\n+\n+Mon Oct 16 13:48:58 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/gcc.exp (default_gcc_start): No longer need to log program\n+\tbeing executed or its output, execute_anywhere does that now.\n+\t* lib/g++.exp (default_g++_version): Call execute_anywhere.\n+\t(default_g++_start): Likewise.  Delete calls to verbose/send_log.\n+\n+Thu Oct 12 10:34:58 1995  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* g++.old-deja/old-deja.exp: Updated the shared libg++ tests to be\n+\tthe same as those in lib/g++.exp.\n+\n+Tue Oct 10 13:47:27 1995  Jeff Law  (law@hurl.cygnus.com)\n+\n+\t* gcc.c-torture: Update to c-torture-1.38 release.\n+\t* gcc.ieee: Related changes.\n+\n+Fri Oct  6 12:39:17 1995  Rob Savoye  <rob@darkstar.cygnus.com>\n+\n+\t* mike-gcc.exp, mike-g++.exp: Use \"execute_anywhere\" rather than\n+\t\"exec\". Minor reformatting changes.\n+\n+\t* config/rom68k.exp (${tool}_load): Make it work in a canadian\n+\tcross. This means all \"exec\" calls now work on a remote host as\n+\twell.\n+\t* lib/c-torture.exp (c-torture-compile): Make work for a canadian\n+\tcross. Filter out the extra \"\\r\\n\" stuff that expect puts in.\n+\t(c-torture-execute): Filter out the bogus warnings like\n+\tc-torture-compile does. Add support for canadian cross.\n+\t* lib/gcc.exp (default_gcc_version, default_gcc_start)\n+\tUse execute_anywhere rather than calling exec directly. Now it\n+\tworks for canadian cross testing.\n+\n+Thu Oct  5 10:06:45 1995  Brendan Kehoe  <brendan@rtl.cygnus.com>\n+\n+\t* lib/g++.exp: Add -nocomplain flag to glob.  Use catch to put the\n+\tresults into a variable, and check that rather than using file exists.\n+\n+Wed Oct  4 16:31:02 1995  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* lib/g++.exp: Use glob to see libg++.so.2.7.0, since sun4 doesn't\n+\tcreate a libg++.so.  For sunos4.1.*, also add -ltermcap.\n+\n+Tue Sep 26 10:15:14 1995  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* g++.old-deja/old-deja.exp: Create and pass runshlib and\n+\tlib_curses if there's a shared libg++ in the build tree.\n+\n+Fri Sep 22 10:47:24 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/mike-{gcc,g++}.exp (postbase): Restore CFLAGS, CXX_FLAGS, LIBS\n+\tif not supported target.\n+\n+Fri Sep 22 09:22:07 1995  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* lib/g++.exp (g++_init): Move empty setting of runshlib and\n+\tlink_curses up to always happen, not just for native builds.\n+\n+Thu Sep 21 10:23:32 1995  Jeff Law  (law@snake.cs.utah.edu)\n+\n+\t* gcc.c-torture: Update to c-torture-1.36 release.\n+\t* gcc.failure: Related changes.\n+\n+Wed Sep 20 10:56:26 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/plumhall.exp (PHSRC, PHDST): Allow config files to override.\n+\n+Tue Sep 19 17:26:07 1995  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* lib/g++.exp (g++_init): Put the shared and math lib stuff in here.\n+\t* lib/mike-g++.exp (postbase): Not in here.  Still reference\n+\trunshlib, link_curses, and mathlib for link and run.\n+\n+\t* lib/mike-g++.exp (postbase): If we've built a libg++.so, then\n+\tpass the runtime shared library options for Solaris, OSF/1, and\n+\tIrix5, and link with -lcurses to avoid unresolved references.\n+\t\n+Wed Sep 13 15:28:10 1995  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* lib/gcc.exp (gcc_init): Return if gcc_initialized is 1, so we\n+\tonly run once.\n+\n+Wed Sep 13 10:51:52 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/c-torture.exp (c-torture-compile): Don't alter CFLAGS.\n+\n+Mon Sep 11 11:02:03 1995  Jeff Law  (law@snake.cs.utah.edu)\n+\n+\t* gcc.c-torture: Update to c-torture-1.35 release.  Note we\n+\tdo not have a framework for the \"compat\" tests yet.\n+\n+Sat Sep  9 16:15:20 1995  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* lib/mike-g++.exp (postbase): New local variable `mathlib',\n+\tset to null if we're testing vxworks5.1.  Use that instead of\n+\t`-lm' in the setting of LIBS for link and run.\n+\n+Fri Sep  8 13:53:38 1995  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* config/rom68k.exp (${tool}_load): Major changes to make it\n+\twork.  Verified that it does in fact return the stuff in\n+\texec_output properly.  Catch any Emul or any TRAP other than 0.\n+\n+Thu Sep  7 23:04:06 1995  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* lib/mike-g++.exp (prebase): Call g++_init at the end to set\n+\tLDFLAGS properly for targets that need stuff from libgloss.\n+\t* lib/g++.exp (g++_init): Return if gpp_initialized is 1, so we\n+\tonly run once.\n+\t(gpp_initialized): New variable.\n+\n+Wed Sep  6 21:56:13 1995  Rob Savoye  <rob@darkstar.cygnus.com>\n+\n+\t* config/rom68k.exp: Load libgloss.exp.\n+\t* lib/gcc.exp (gcc_init): get proper flags for newlib and libgloss\n+\tso we can produce a fully linked binary.\n+\t* lib/g++.exp (g++_init): get proper flags for newlib and libgloss\n+\tso we can produce a fully linked binary.\n+\n+Sun Sep  3 13:25:26 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/plumhall.exp (ph_section): Watch for expected failures.\n+\tAdd missing `else'.\n+\n+\t* lib/c-torture.exp (c-torture-execute): Look for .cexp files to\n+\trun the testcase.\n+\t(c-torture): Likewise.\n+\n+Mon Aug 28 11:23:38 1995  Doug Evans  <dje@cygnus.com>\n+\n+\t* gcc.dg/dg.exp (scan-assembler, scan-assembler-not): New procs.\n+\n+\t* lib/mike-g++.exp (mike_cleanup): New proc.\n+\t(prebase): New globals compiler_result, not_compiler_result,\n+\ttarget_regexp.\n+\t(postbase): Likewise.  Call mike_cleanup.  Pass \"--\" to regexp to\n+\tallow leading \"-\" in pattern.  Watch for unsupported tests.\n+\tIf $compiler_result is set, pattern match assembler code,\n+\tand ditto for $not_compiler_result.\n+\t* lib/mike-gcc.exp: Likewise.\n+\n+\t* lib/plumhall.exp (ph_execute): Only call ph_summary if\n+\texecution \"succeeded\".\n+\n+Mon Aug 14 14:03:53 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* config/win32.exp: New file.\n+\t* lib/c-torture.exp (c-torture-execute): Handle $exe_ext.\n+\n+Fri Aug  4 15:39:54 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/gcc-dg.exp (gcc-dg-prune): Mark testcases that fill ram as\n+\tunsupported.\n+\t* lib/mike-{gcc,g++}.exp (postbase): Likewise.\n+\t* lib/{c-torture.exp,old-dejagnu.exp}: Likewise.\n+\t* lib/{gcc,g++}.exp (${tool}_check_untested_p): New proc.\n+\n+\t* lib/mike-g++.exp (postbase): Delete alpha-*-* checking of\n+\t\"... without exceptions was ...\".  That is now handled by\n+\tprune_system_crud.\n+\t* lib/old-dejagnu.exp (old-dejagnu): Likewise.\n+\n+Tue Aug  1 11:09:33 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* gcc.misc-tests/{acker1.c,dhry.c,dhry.h,matrix1.c,optbench.c,\n+\tsieve.c,sort2.c}: New files.\n+\t* gcc.misc-tests/{acker1.exp,dhry.exp,matrix1.exp,optbench.exp,\n+\tsieve.exp,sort2.exp}: Drivers for them.\n+\n+\t* lib/mike-gcc.exp (program_output): New user settable variable.\n+\t(postbase): Call prune_system_crud.  Also prune extraneous compiler\n+\tmessages.\n+\t* lib/mike-g++.exp (program_output): New user settable variable.\n+\n+\t* gcc.misc-tests/mg.exp (compiler_output): Handle multiple lines.\n+\n+\t* config/sh.exp: Deleted (use sim.exp instead).\n+\n+Fri Jul 28 11:33:46 1995  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* config/vx.exp: Declare CHECKTASK as global.\n+\t* config/vxworks29k.exp: Reduce to only set CHECKTASK, and load vx.exp.\n+\t* lib/mike-g++.exp: Load [pwd]/a.out, not `./a.out'.\n+\t* lib/old-dejagnu.exp: Load [pwd]/$executable.\n+\n+Wed Jul 26 19:45:39 1995  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* config/vxworks29k.exp: New file, for the a29k-vxworks5.1\n+\ttarget. Like vx.exp, only includes `vx29k.exp' instead of\n+\t`vxworks.exp'.\n+\n+Sun Jul 23 17:38:52 1995  Ian Lance Taylor  <ian@cygnus.com>\n+\n+\t* config/sim.exp: Increase time limit from 120 seconds to 240.\n+\n+Thu Jul  6 11:07:38 1995  Jeffrey A. Law  <law@rtl.cygnus.com>\n+\n+\t* gcc.c-torture/execute/950628-1.c: New test.\n+\n+Sat Jun 10 18:51:41 1995  Jeff Law  (law@snake.cs.utah.edu)\n+\n+\t* gcc.c-torture: Update with changes/additions from\n+\tc-torture-1.34.\n+\n+Mon Jun  5 17:58:07 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* gcc.prms/prms.exp: Pass LDFLAGS to dg-test.\n+\n+Sun Jun  4 05:13:57 1995  Jeff Law  (law@snake.cs.utah.edu)\n+\n+\t* gcc.c-torture/compile/funcptr-1.c: Test case for 7107.\n+\n+Thu Jun  1 00:06:19 1995  Jeff Law  (law@snake.cs.utah.edu)\n+\n+\t* gcc.c-torture/compile/950512-1.c: New test.\n+\t* gcc.c-torture/execute/strct-pack-4.c, strct-pack-5.c}: Likewise.\n+\t* gcc.dg/struct-ret-1.c: Likewise.\n+\n+Wed May 31 14:25:13 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* gcc.c-torture/execute/{920410-1.c,921113-1.c,921208-2.c,\n+        930106-1.c,memcpy-1.c}: Use STACK_SIZE if defined.\n+\n+Tue May 30 11:19:54 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* gcc.c-torture/special/920411-1.c: Deleted.\n+\t* gcc.c-torture/special/special.exp: Delete 920411-1.c.\n+\n+Mon May 22 16:55:11 1995  Doug Evans  <dje@chestnut.cygnus.com>\n+\n+\t* config/sim.exp (${tool}_load): Hack in call to bash to get a\n+\tcpu limit.\n+\n+Fri May 12 18:57:54 1995  Torbjorn Granlund  <tege@rtl.cygnus.com>\n+\n+\t* gcc.c-torture/execute/{950511-1.c,950512-1.c}: New tests.\n+\n+Thu May  4 14:23:54 1995  Torbjorn Granlund  <tege@adder.cygnus.com>\n+\n+\tFrom kenner;\n+\t* gcc.c-torture/execute/va-arg-2.c (f[0-9], f1[0-5]): Verify format\n+\tis the proper length.\n+\t* va-arg-3.c: Likewise.\n+\n+Sun Apr 30 16:02:59 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/dg.exp: Moved to dejagnu/lib.  Copy kept here (for awhile).\n+\t* lib/gcc-dg.exp: New file, gcc interface to dg.exp.\n+\n+\t* lib/gcc.exp (default_gcc_start): Delete old cruft.  Delete result.\n+\t* lib/g++.exp (default_g++_start): Delete old cruft.\n+\n+Tue Apr 25 17:20:18 1995  Torbjorn Granlund  <tege@cygnus.com>\n+\n+\t* gcc.c-torture/execute/memcpy-1.c: Decrease stack requirements from\n+\t(2 * (1 << 18)) to (2 * (1 << 17)).\n+\n+\t* gcc.c-torture/execute/arith-rand.c: Avoid -0x80000000/-1.\n+\n+Thu Apr 20 12:21:13 1995  J.T. Conklin  <jtc@rtl.cygnus.com>\n+\n+\t* config/rom68k.exp: Renamed from config/idp.exp\n+\n+Tue Apr 18 13:33:26 1995  Torbjorn Granlund  <tege@rtl.cygnus.com>\n+\n+\t* c-torture/compile/921109-2.c\n+\n+Tue Apr 18 10:45:12 1995  Mike Stump  <mrs@cygnus.com>\n+\n+\t* lib/old-dejagnu.exp: We expect Execution test failure if we expected\n+\texcess errors.\n+\n+Sat Apr 15 11:16:58 1995  Doug Evans  <dje@chestnut.cygnus.com>\n+\n+\t* lib/gcc.exp (default_gcc_start): Handle leading \"-\" in compiler\n+\toutput.\n+\t* lib/g++.exp (default_g++_start): Likewise.\n+\n+Wed Mar 29 16:34:03 1995  Torbjorn Granlund  <tege@adder.cygnus.com>\n+\n+\t* gcc.c-torture/compile/950329-1.c: New test.\n+\n+Tue Mar 28 16:10:33 1995  J.T. Conklin  <jtc@rtl.cygnus.com>\n+\n+        * config/bug.exp (${tool}_load): Updated to use new remote_open\n+\t  and remote_close procs.\n+\t* config/idp.exp: New file.\n+\n+Wed Mar 22 15:01:58 1995  Torbjorn Granlund  <tege@rtl.cygnus.com>\n+\n+\t* gcc.c-torture/execute/950322-1.c: New test.\n+\n+Tue Mar 21 21:24:49 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* config/vx.exp (${tool}_load): Clean up testing of return code from\n+\tvxworks_ld and vxworks_spawn.\n+\n+Tue Mar 21 17:01:42 1995  Doug Evans  <dje@deneb.cygnus.com>\n+\n+\t* lib/c-torture.exp (c-torture-execute): Pass same text to pass/fail.\n+\n+Mon Mar 13 14:49:42 1995  Mike Stump  <mrs@cygnus.com>\n+\n+\t* lib/old-deja.exp: Add `excess errors test - ' error, now one\n+\tcan mark excess errors on a machine by machine basis.  Note, the\n+\tdefault is to not expect any excess errors, even when excess\n+\terrors test - is given, so you will want to put an XFAIL ... on\n+\tthese lines.  For example, // excess errors test - XFAIL hppa*-*-*\n+\tmips-*-* alpha-*-* m68k-*-* is how to expect excess errors on\n+\tthose 4 machines, but no others.\n+\n+Fri Mar 10 12:33:04 1995  J.T. Conklin  <jtc@rtl.cygnus.com>\n+\n+\t* gcc.c-torture/execute/execute.exp (c-torture-execute): from here.\n+\t* lib/c-torture.exp: to here.\n+\n+Fri Mar 10 10:38:15 1995  Torbjorn Granlund  <tege@adder.cygnus.com>\n+\n+\t* gcc.c-torture/execute/950221-1.c: New test.\n+\t* gcc.c-torture/execute/struct-ret-1.c: New test.\n+\t* gcc.c-torture/compile/950221-1.c: New test.\n+\n+\t* gcc.c-torture/execute/941101-1.c (f): Fix typo, == was !=.\n+\n+Fri Mar  3 16:28:35 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* gcc.c-torture/execute/arith-1.c (main): Return 0.\n+\t* gcc.c-torture/execute/arith-rand.c (main): Return 0.\n+\n+Wed Mar  1 02:08:29 1995  Gerald Baumgartner  (gb@lorenzo.cs.purdue.edu)\n+\n+\t* g++.gb: New directory of tests, derived from my signature and\n+\tclass scoping tests.\n+\n+\t* g++.gb/{sig01.C, sig02.C, sig03.C, sig04.C}: New tests.\n+\t* g++.gb/{sig05.C, sig06.C, sig07.C, sig08.C}: Likewise.\n+\t* g++.gb/{sig09.C, sig10.C, sig11.C, sig12.C}: Likewise.\n+\t* g++.gb/{sig13.C, sig14.C, sig15.C, sig16.C}: Likewise.\n+\t* g++.gb/{sig17.C, sig18.C, sig19.C, sig20.C}: Likewise.\n+\t* g++.gb/{sig21.C, sig22.C, sig23.C, sig24.C}: Likewise.\n+\t* g++.gb/sig25.C: Likewise.\n+\n+\t* g++.gb/{sig01.exp, sig02.exp, sig03.exp, sig04.exp}: Run them.\n+\t* g++.gb/{sig05.exp, sig06.exp, sig07.exp, sig08.exp}: Likewise.\n+\t* g++.gb/{sig09.exp, sig10.exp, sig11.exp, sig12.exp}: Likewise.\n+\t* g++.gb/{sig13.exp, sig14.exp, sig15.exp, sig16.exp}: Likewise.\n+\t* g++.gb/{sig17.exp, sig18.exp, sig19.exp, sig20.exp}: Likewise.\n+\t* g++.gb/{sig21.exp, sig22.exp, sig23.exp, sig24.exp}: Likewise.\n+\t* g++.gb/sig25.exp: Likewise.\n+\n+\t* g++.gb/{scope01.C, scope02.C, scope03.C, scope04.C}: New tests.\n+\t* g++.gb/{scope05.C, scope06.C, scope07.C, scope08.C}: Likewise.\n+\t* g++.gb/{scope09.C, scope10.C, scope11.C, scope12.C}: Likewise.\n+\t* g++.gb/scope13.C: Likewise, this test still fails.\n+\n+\t* g++.gb/{scope01.exp, scope02.exp, scope03.exp, scope04.exp}: Run 'em.\n+\t* g++.gb/{scope05.exp, scope06.exp, scope07.exp, scope08.exp}: Ditto.\n+\t* g++.gb/{scope09.exp, scope10.exp, scope11.exp, scope12.exp}: Ditto.\n+\t* g++.gb/scope13.exp: Ditto.\n+\n+\t* g++.gb/README: New file, explains what these tests are about.\n+\n+Tue Feb 28 10:37:52 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/dg.exp (dg-do): Support `preprocess'.\n+\t(dg-test): Likewise.\n+\n+Mon Feb 13 15:18:10 1995  J.T. Conklin  <jtc@rtl.cygnus.com>\n+\n+\t* config/udi.exp: change \"continue -expect\" to \"exp_continue\".\n+\n+Sat Feb 11 00:25:20 1995  Torbjorn Granlund  (tege@tiny.cygnus.com)\n+\n+\t* gcc.c-torture/execute/{921025-1.c, 930525-1.c}:\n+\tDelete redundant tests.\n+\n+\t* gcc.c-torture/execute/{941014-1.c, 941014-2.c}: New tests.\n+\t* gcc.c-torture/execute/{941015-1.c, 941021-1.c}: New tests.\n+\t* gcc.c-torture/execute/{941025-1.c, 941031-1.c}: New tests.\n+\t* gcc.c-torture/execute/{941101-1.c, 941110-1.c}: New tests.\n+\t* gcc.c-torture/execute/{941202-1.c, arith-1.c}: New tests.\n+\t* gcc.c-torture/execute/{arith-rand.c, complex-3.c}: New tests.\n+\t* gcc.c-torture/execute/{inst-check.c, loop-1.c}: New tests.\n+\t* gcc.c-torture/execute/{memcpy-1.c, va-arg-2.c}: New tests.\n+\n+\t* gcc.c-torture/execute/920302-1.c: Use void * instead of long for\n+\tstoring label pointers.\n+\t* gcc.c-torture/execute/921019-1.c: Likewise.\n+\t* gcc.c-torture/execute/920501-8.c: Add prototype for sprintf.\n+\t* gcc.c-torture/execute/930513-1.c: Provide full declaration for\n+\tparameter fp.\n+\t* gcc.c-torture/execute/va-arg-1.c (main): Add L suffix to all\n+\tconstants.\n+\n+\t* gcc.c-torture/compile/{920501-14.c, 931127-1.c}:\n+\tDelete obsolete tests.\n+\n+\t* gcc.c-torture/compile/{940409-1.c, 940718-1.c}: New tests.\n+\t* gcc.c-torture/compile/{941014-1.c, 941014-2.c}: New tests.\n+\t* gcc.c-torture/compile/{941014-3.c, 941014-4.c}: New tests.\n+\t* gcc.c-torture/compile/{941019-1.c, 941111-1.c}: New tests.\n+\t* gcc.c-torture/compile/{941113-1.c, 950122-1.c}: New tests.\n+\t* gcc.c-torture/compile/950124-1.c: New test.\n+\n+\t* gcc.c-torture/compile/920902-1.c: Delete 2:nd parameter.\n+\n+Wed Feb  8 15:30:17 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* lib/mike-g++.exp: Add -lm to LIBS.\n+\n+Tue Feb  7 17:09:50 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/c-torture.exp (c-torture): Allow relative pathname in $srcdir.\n+\n+Mon Jan 30 14:33:25 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* lib/mike-g++.exp: Add -lstdc++ to LIBS.\n+\n+Thu Jan 12 16:41:34 1995  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* gcc.misc-tests/dg-test.exp: Only run if $DG_TEST=yes.\n+\n+Mon Jan  2 11:50:10 1995  Jeff Law  (law@snake.cs.utah.edu)\n+\n+\t* g++.law/{arg9.C, arg10.C, arg11.C, arm15.C, arm16.C}: New tests.\n+\t* g++.law/{bad-error3.C, bad-error4.C, bad-error5.C}: Likewise.\n+\t* g++.law/{bad-error6.C, bad-error7.C}: Likewise.\n+\t* g++.law/{bit-fields3.C, casts2.C, casts3.C}: Likewise.\n+\t* g++.law/{enum8.C, enum9.C, friend5.C}: Likewise.\n+\t* g++.law/{nest2.C, nest3.C, nest4.C, nest5.C}: Likewise.\n+\t* g++.law/{nest6.C, next7.C, operators30.C}: Likewise.\n+\t* g++.law/{operators31.C, operators32.C, \n+\t* g++.law/{operators33.C, operators34.C}: Likewise.\n+\t* g++.law/{pic1.C, refs2.C}: Likewise.\n+\t* g++.law/{refs3.C, refs4.C, static-mem3.C}: Likewise.\n+\t* g++.law/{static-mem4.C, static-mem5.C, typeck4.C}: Likewise.\n+\t* g++.law/{vbase1.C, visibility27.C, visibility28.C}: Likewise.\n+\t* g++.law/{vtable2.exp, vtable3.exp}: Likewise.\n+\n+\t* g++.law/{arg9.exp, arg10.exp, arg11.exp, arm15.exp}: Run them.\n+\t* g++.law/{arm16.exp, bad-error3.exp, bad-error4.exp: Likewise.\n+\t* g++.law/{bad-error5.exp, bad-error6.exp}: Likewise.\n+\t* g++.law/{bad-error7.exp, bit-fields3.exp}: Likewise.\n+\t* g++.law/{casts2.exp, casts3.exp, enum8.exp}: Likewise.\n+\t* g++.law/{enum9.exp, friend5.exp}: Likewise.\n+\t* g++.law/{nest3.exp, nest4.exp}: Likewise.\n+\t* g++.law/{nest5.exp, nest6.exp, nest7.exp}: Likewise.\n+\t* g++.law/{operators30.exp, operators31.exp}: Likewise.\n+\t* g++.law/{operators32.exp, operators33.exp}: Likewise. \n+\t* g++.law/{operators34.exp}: Likewise.\n+\t* g++.law/{pic1.exp, refs2.exp, refs3.exp refs4.exp}: Likewise.\n+\t* g++.law/{static-mem3.exp, static-mem4.exp}: Likewise.\n+\t* g++.law/{static-mem5.exp, typeck4.exp, vbase1.exp}: Likewise.\n+\t* g++.law/{visibility27.exp, visibility28.exp}: Likewise.\n+\t* g++.law/{vtable2.exp, vtable3.exp}: Likewise.\n+\n+\t* g++.law/{union4.exp, visibility17.exp}: Fix expected output.\n+\tNo longer expected to fail.\n+\t* g++.law/missed-error3.C: Tweak for recent bool changes.\n+\n+Sun Dec  4 20:54:33 1994  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* config/emb-unix: Deleted.\n+\t* config/unix.exp (${tool}_load): Use new proc rsh_exec to perform\n+\tremote execution.  Do final link on remote host if REMOTE_LINK is set.\n+\n+Thu Dec  1 08:43:05 1994  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/dg.exp (dg-test): Fix typo in last patch.\n+\n+Wed Nov 30 13:25:32 1994  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/dg.exp (dg-test): Fix pattern that searches for expected output\n+\t(handles multiple occurrences).\n+\n+Thu Nov 24 19:48:38 1994  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* gcc.c-torture/*/*.exp: Pass full pathname to c-torture.\n+\t* gcc.c-torture/execute/execute.exp (c-torture-execute): Remove\n+\t$srcdir from pathname in pass/fail messages (but ensure $subdir *is*\n+\tprinted).\n+\t* lib/c-torture.exp (c-torture-compile): Likewise.\n+\t(c-torture): Prepend full path if missing.\n+\t* lib/gcc.exp (gcc_pass): Pass entire pathname of testcase.\n+\t(gcc_fail): Likewise.\n+\t* lib/dg.exp (dg-test): Don't delete $subdir from pathname in messages.\n+\n+Wed Nov 23 13:56:00 1994  J.T. Conklin  <jtc@rtl.cygnus.com>\n+\n+\t* lib/netware.exp: Only attach to NetWare i386 systems.\n+\n+Wed Nov 16 11:27:00 1994  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/dg.exp (dg-test): Don't print $subdir (or above) in pass/fail\n+\tmessages.  Add test name to \"output pattern match\" pass/fail message.\n+\n+Sat Nov 12 22:11:52 1994  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* gcc.dg: New testsuite.\n+\t* gcc.dg/dg.exp: New file.\n+\n+\t* gcc.misc-tests/{misc.exp,inst-check.c,test-ior.c,test-consts.c,\n+\ttest-switch.c}: Deleted.\n+\n+\t* gcc.misc-tests/msgs.exp: New testcase driver.\n+\n+Wed Nov  9 14:23:09 1994  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* gcc.c-torture/execute/execute.exp (c-torture_execute): New proc.\n+\tWatch for illegal return values from ${tool}_load.\n+\t* config/unix.exp (${tool}_load): Fix pass/fail detection for\n+\tcross targets.  Coerce return value >0 to 1.\n+\n+Tue Nov  8 14:10:33 1994  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* config/unix.exp (${tool}_load): Call program rsh, not proc.\n+\n+\t* config/emb-unix.exp: New file.\n+\n+\t* config/sim.exp: Error if variable $SIM not defined.\n+\t(${tool}_load): Mark test as \"untested\" if simulator missing.\n+\n+\t* config/unix.exp: Load remote.exp to get rcp_download.\n+\t* lib/c-torture.exp: Use different option lists for testcases with\n+\tand without loops.\n+\t* gcc.c-torture/execute/execute.exp: Likewise.\n+\n+Wed Nov  2 14:47:58 1994  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* config/*.exp: Clarify return code from ${tool}_load.\n+\tCall `unresolved' or `untested' instead of `warning' or `perror'\n+\t(sometimes you still want to call both though).\n+\tAdd comment that `shell_id' is local to each file.\n+\t* config/udi.exp (timeout): Set to 30.\n+\tDon't print warning if connection fails, $connectmode has already\n+\tprinted an error.\n+\t(${tool}_load): Move verbose messages to level 2.\n+\tRework pattern for \"Process started\" message.\n+\tPass `shell_id' to ${connectmode}_download.\n+\tRetry twice upon timeout.  Make resetting of target more robust.\n+\t(${tool}_exit): Remove /tmp/soc_name. if connected ok (bug in mondfe).\n+\tPass `shell_id' to exit_$connectmode.\n+\tOnly call exit_$connectmode if connected.\n+\t* config/unix.exp (${tool}_load): Check return codes better.\n+\t* config/vrtx.exp (${tool}_load): Likewise.\n+\t* config/vx.exp (${tool}_load): Likewise.\n+\tDelete unneeded global's.\n+\t* lib/dg.exp (dg-test): Update to reflect clarified return codes\n+\tfrom ${tool}_load.\n+\t(dg-stat): Delete.\n+\t(dg-init): Delete recording of pass/fail counts.\n+\t* lib/old-dejagnu.exp (old-dejagnu): Likewise.\n+\t(old-dejagnu-init): Likewise.\n+\t(old-dejagnu-stat): Delete contents, empty proc now.\n+\t* lib/c-torture.exp (TORTURE_OPTIONS): New global.\n+\t(c-torture): Delete references to lcnt, lpass, lfail.\n+\tGet option list from TORTURE_OPTIONS.\n+\tDelete -funroll[-all]-loops if no loops.\n+\t* lib/g++.exp (g++_init): Delete references to lcnt, lpass, lfail.\n+\t(g++_stat): Delete contents (empty proc now).\n+\t* lib/gcc.exp (gcc_init): Delete references to pass/fail counts.\n+\t(gcc_finish): Likewise.\n+\t(gcc_stat): Deleted.\n+\t* lib/mike-gcc.exp (postbase): Delete references to lcnt, lpass, lfail.\n+\t* gcc.*/*.exp: Delete calls to gcc_stat, dg-stat.\n+\t* gcc.c-torture/execute/execute.exp: Likewise.\n+\tSplit tests into two parts: compile, execute.\n+\tGet option list from TORTURE_OPTIONS.  Delete -funroll[-all]-loops if\n+\tno loops.  Update to reflect clarified return codes from ${tool}_load.\n+\n+Fri Oct 21 23:10:16 1994  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/old-dejagnu.exp (process-option): Append \".*\" to pattern\n+\tto grep for.\n+\t(old-dejagnu): Likewise (where necessary).\n+\n+Fri Oct 14 17:54:58 1994  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* gcc.misc-tests/gcov.exp: New file, for gcov testing.\n+\n+\t* lib/dg.exp (dg-process-target): Fix processing of selector.\n+\tAdd comment regarding use of `error'.\n+\n+\t* lib/gcc.exp (prune_system_crud): Define if missing.\n+\t* lib/g++.exp (prune_system_crud): Likewise.\n+\n+\t* lib/{c-torture.exp,dg.exp,mike-g++.exp,old-dejagnu.exp}:\n+\tCall prune_system_crud.\n+\t* lib/dg.exp (dg-runtest): New proc.\n+\tUse perror instead of send_user for tcl errors in testcase.\n+\tDon't return any value, it's never used.\n+\tDon't clobber previous definition of `unknown'.\n+\tPrint tcl errors in `dg-final'.\n+\n+Wed Oct 12 13:05:37 1994  Doug Evans  <dje@canuck.cygnus.com>\n+\n+\t* lib/dg.exp (dg-process-target): Improve syntax error messages.\n+\t(dg-test): Don't print errorInfo, it contains stack backtrace.\n+\n+Mon Sep 26 12:18:53 1994  Doug Evans  (dje@canuck.cygnus.com)\n+\n+\t* lib/g++.exp (runtest_file_p): Define if missing.\n+\n+Sat Sep 24 15:29:23 1994  Doug Evans  (dje@cygnus.com)\n+\n+\t* lib/mike-g++.exp: Comment out loading of g++.exp.\n+\t* lib/g++.exp: Update copyright.  Test for existence of $CXX at start.\n+\t(default_g++_version): Always print something.\n+\t(default_g++_start): Comment out call to `which'.\n+\t(g++_start, g++_load): Deleted (must be defined in config file).\n+\t* lib/gcc.exp: Test for existence of $CC at start.\n+\tDelete check for tmpdir (done in gcc_init).\n+\t(default_gcc_version): Always print something.\n+\t(default_gcc_start): Comment out call to `which'.\n+\t* config/*.exp: Major cleanup - make cross targets work at least a\n+\tlittle better for g++ (by not being \"--tool gcc\" specific).\n+\tRename gcc_xxx to ${tool}_xxx.\n+\t* g++.old-deja/old-deja.exp: utils.exp is loaded by runtest.exp.\n+\t* lib/old-dejagnu.exp: ${tool}.exp is loaded by config file.\n+\n+Thu Sep 22 11:39:17 1994  Doug Evans  (dje@canuck.cygnus.com)\n+\n+\t* lib/c-torture.exp (c-torture-compile): Rework compiler\n+\tmessage processing.\n+\n+\t* gcc.c-torture/compile/initbug1.{c,exp}: Deleted, not part of\n+\tc-torture.\n+\n+Wed Sep 21 09:49:43 1994  Doug Evans  (dje@canuck.cygnus.com)\n+\n+\t* gcc.wendy/wendy.dis: Renamed from wendy.exp to disable the testsuite.\n+\n+\t* lib/dg.exp (dg-process-target): Support { target native }.\n+\n+Tue Sep 20 17:16:55 1994  Doug Evans  (dje@canuck.cygnus.com)\n+\n+\t* lib/dg.exp (dg-test): Clean up some comments.  Delete code that\n+\tlooked for \"... program xxx got fatal signal\".\n+\tCorrect regsub munging of `comp_output'.\n+\tIgnore compiler messages \"path prefix not used\" and \"linker input\n+\tfile unused\".\n+\n+Wed Sep 14 11:44:40 1994  Doug Evans  (dje@canuck.cygnus.com)\n+\n+\t* lib/gcc.exp (runtest_file_p): Define if missing.\n+\t* gcc.prms/template.c: Example to work from.\n+\n+Tue Sep 13 10:30:48 1994  Doug Evans  (dje@canuck.cygnus.com)\n+\n+\t* lib/gcc.exp (gcc_finish): Delete code to update `testcnt'.\n+\t* lib/dg.exp (dg-test): Call unsupported testcases as such.\n+\n+\t* gcc.prms/{3324.c,3565.c}: Moved from compile/940713-[12].c.\n+\t* gcc.prms/1883.c: Moved from compile/940714-1.c.\n+\t* gcc.prms/{5012.c,4453.c,4723.c,2541.c}: Moved from\n+\texecute/{940712-1.c,940712-2.c,940713-1.c,940714-1,c}.\n+\n+\t* lib/dg.exp (user option docs): Clean up docs on target/xfail option.\n+\t(dg-process-target): No longer a varargs proc.\n+\tReturn S/N for target, P/F for xfail.  All callers changed.\n+\t(user option procs): More argument checking.\n+\t(dg-do): `dg-do-what' now contains 3 elements {what flag P/F}.\n+\t(dg-output): `dg-output-text' now contains 2 elements {P/F text}.\n+\t(dg-test): Skip test if not running on selected target in `dg-do'.\n+\tUpdate handling of `dg-do-what', `dg-output-text'.\n+\tSeparate execution pass/fail from output pattern match pass/fail.\n+\tDelete BUILD/XBUILD support (duplicate of LOSE/XLOSE).\n+\n+Mon Sep 12 13:47:35 1994  Jim Wilson  (wilson@sphagnum.cygnus.com)\n+\n+\t* gcc.c-torture/special/special.exp: Don't expect failure for mips\n+\ttarget for 920510-1.c.\n+\n+Mon Sep 12 12:44:39 1994  Doug Evans  (dje@canuck.cygnus.com)\n+\n+\t* lib/gcc.exp (gcc_init): Move initialized message to verbose level 3.\n+\tClean up comment regarding use of passcnt, etc.\n+\t(gcc_stat): Don't update `testcnt' here.\n+\t(gcc_finish): Do it here.\n+\tMight as well reset `but_id' here too.\n+\t* gcc.c-torture/code_quality/code_quality.exp: Call `runtest_file_p'\n+\tto determine if the file should be tested.\n+\t* gcc.c-torture/compile/compile.exp: Likewise.\n+\t* gcc.c-torture/execute/execute.exp: Likewise.\n+\t* gcc.c-torture/unsorted/unsorted.exp: Likewise.\n+\t* gcc.misc-tests/dg-test.exp: Likewise.\n+\t* gcc.prms/prms.exp: Likewise.\n+\t* gcc.wendy/wendy.exp: Likewise.\n+\t* g++.old-deja.exp: Likewise.\n+\tMove \"Testing file\" message to verbose level 1.\n+\n+Fri Sep  9 10:21:18 1994  Doug Evans  (dje@canuck.cygnus.com)\n+\n+\t* gcc.wendy/t.c: Add DEJAGNU_CFLAGS:\"-DNOPAUSE\".\n+\n+Thu Sep  8 16:52:43 1994  Doug Evans  (dje@canuck.cygnus.com)\n+\n+\t* lib/gcc.exp: Ensure CFLAGS, LIBS, and LDFLAGS are set.\n+\t(default_gcc_start): Accept optional second list element\n+\tof compiler flags.  Print compiler output at verbosity level 2.\n+\tRemove setting of CFLAGS, LIBS, LDFLAGS from here.\n+\t(gcc_init): Delete globals lcnt, lpass, lfail, lxpass, lxfail.\n+\tSave current values of framework globals passcnt, failcnt, xpasscnt,\n+\tand xfailcnt in gcc_passcnt, gcc_failcnt, gcc_xpasscnt, and\n+\tgcc_xfailcnt.  Set global `tmpdir' to /tmp if it doesn't exist.\n+\t(gcc_stat): Use framework globals passcnt, failcnt, xpasscnt, and\n+\txfailcnt to compute stats.  Update framework global `testcnt' from\n+\tpass/fail counts.\n+\t(gcc_finish): New proc.  Clean up test environment.\n+\t(gcc_cpass, gcc_cfail): Rename to gcc_pass/gcc_fail.\n+\t(gcc_epass, gcc_efail): Delete.\n+\t* lib/dg.exp (dg-error, dg-warning, dg-bogus): Accept optional 5th\n+\targument of line number.\n+\t(dg-init): If the tool has an init routine, call it.\n+\t(dg-test): Remove args `cflags_var' and `libs_var'.\n+\tPass all compiler options to ${tool}_start.\n+\tHandle missing line number.\n+\t(dg-finish): New function.\n+\t* gcc.c-torture/code_quality/code_quality.exp: Add support for testing\n+\tparticular files.  Call gcc_finish at end.  Move \"skipping test\"\n+\tmessage to verbosity level 3.\n+\t* gcc.c-torture/compile/compile.exp: Likewise.\n+\t* gcc.c-torture/unsorted/unsorted.exp: Likewise.\n+\t* gcc.c-torture/execute/execute.exp: Likewise.\n+\tDelete setting of prms_id, bug_id, lcnt, lfail, lpass.\n+\tPrint testcase being tried at verbosity level 1.\n+\t* gcc.c-torture/special/special.exp: Unset xfail.\n+\tDelete setting of prms_id, bug_id, lcnt, lfail, lpass.\n+\t* gcc.c-torture/compile/initbug1.exp: Call gcc_finish.\n+\t* gcc.c-torture/noncompile/noncompile.exp: Likewise.\n+\t* gcc.failure/failure.exp: Likewise.\n+\t* gcc.ieee/ieee.exp: Likewise.\n+\t* gcc.misc-tests/dg-test.exp: Delete LDFLAGS.\n+\tUpdate call to dg-test.  Call dg-finish at end.\n+\t* gcc.misc-tests/mg.exp: Call gcc_finish at end.  Unset orig_flags.\n+\tDelete setting of prms_id, bug_id, lcnt, lfail, lpass.\n+\t* gcc.misc-tests/misc.exp: Call gcc_finish at end.\n+\t* gcc.prms/prms.exp: Delete loading of utils.exp (redundant).\n+\tDelete LDFLAGS.  Update call to dg-test.  Call dg-finish at end.\n+\t* gcc.wendy/wendy.exp: Add copyright.\n+\tDelete setting of tmpdir (done by gcc_init).\n+\tCall gcc_pass/gcc_fail instead of gcc_[ce]pass/fail.\n+\tPass compiler flags to gcc_start.  Call gcc_finish at end.\n+\t* lib/c-torture.exp: Call gcc_pass/gcc_fail instead of\n+\tgcc_[ce]pass/fail.\n+\n+Wed Sep  7 11:09:08 1994  Doug Evans  (dje@canuck.cygnus.com)\n+\n+\t* lib/g++.exp (g++_start): Rename arg to `prog' to avoid varargs\n+\tconfusion.\n+\t(g++_load): Likewise.\n+\n+\t* config/*.exp (gcc_load): Some were varargs fns and some were not.\n+\tRename argument to `prog' to remove the confusion.\n+\tVarargs fns behave differently too!\n+\t(g++_load): Likewise.\n+\n+\t* lib/dg.exp (dg-stat): Correct calculation of npass, nfail.\n+\n+\t* config/unix.exp (gcc_load): Rename `args' to `prog' because that's\n+\twhat it is.  Delete (always) printing of status value for !native.\n+\tSimplify verbose code, and include status and exec_output.\n+\t(g++_load): Use gcc_load.\n+\n+Sun Sep  4 13:59:27 1994  Jim Wilson  (wilson@sphagnum.cygnus.com)\n+\n+\t* gcc.c-torture/noncompile/920928-1.c: Delete obsolete file.\n+\t* gcc.c-torture/noncompile/noncompile.exp: Delete support for\n+\t920928-1.c, 921017-1.c, 940712-1.c, 940714-1.c, 940714-2.c,\n+\t940714-3.c as these testcases don't exist anymore.  Make\n+\tva-arg-1.c expected to pass.\n+\n+Fri Aug 19 12:27:07 1994  Doug Evans  (dje@canuck.cygnus.com)\n+\n+\t* gcc.misc-tests/misc.exp: Only run specific testcases.\n+\t* gcc.misc-tests/dg-test.exp: New file.  Tests dg.exp.\n+\t* gcc.misc-tests/dg-[1-9].c: New files.\n+\n+\t* lib/dg.exp: New testsuite driver.\n+\t* gcc.prms/prms.exp: Use it.\n+\n+\t* README.gcc: New file.\n+\n+\t* lib/gcc.exp (gcc_init): Delete srcdir, no longer referenced.\n+\tDocument and reset `lxpass' and `lxfail'.\n+\tSimplify \"initialized\" message.\n+\t(gcc_stat): Clean up comments a little.\n+\n+Tue Aug 16 11:16:46 1994  Doug Evans  (dje@canuck.cygnus.com)\n+\n+\t* gcc.prms/prms.exp: New driver for gcc.prms testsuite directory.\n+\n+Mon Aug 15 21:20:36 1994  Doug Evans  (dje@canuck.cygnus.com)\n+\n+\t* lib/old-dejagnu.exp (process-option): New proc.\n+\t(old-dejagnu-init, old-dejagnu-stat): Likewise.\n+\t(old-dejagnu): Simplify.\n+\t* g++.old-deja/old-deja.exp: Update to new version of old-dejagnu.\n+\n+Sun Aug 14 09:23:53 1994  Jeff Law  (law@snake.cs.utah.edu)\n+\n+\t* lib/c-torture.exp (c-torture): Only call setup_xfail if $xfail\n+\texists and is not an empty string.\n+\n+\t* gcc.c-torture/special/special.exp (920520-1.c, 930510-1): Set\n+\t$xfail rather than calling setup_xfail.  Clear $xfail when test is\n+\tfinished.\n+\t(920717-x.c): Add $srcdir/$subdir as \"gcc_start\" does not do it\n+\tautomatically.\n+\n+\t* gcc.c-torture/noncompile/noncompile.exp (940712-1 test): No\n+\tlonger expected to fail.\n+\n+\t* gcc.c-torture/execute/strct-pack-3.c: Add missing argument to \n+\t\"f\" function call.\n+\n+\t* gcc.misc-tests/mg.exp: Call gcc_stat when finished.\n+\n+\t* gcc.c-torture/execute/{920202-1.c, 931208-1.c, 931228-1.c,\n+\t940115-1.c, 940122-1.c, bf-pack-1.c, bf64-1.c, comp-goto-1.c,\n+\tcomplex-2.c, packed-1.c, strct-pack-2.c\tstrct-pack-3.c,\n+\tstruct-ini-2.c, struct-ini-3.c, va-arg-1.c}: Import from\n+\tc-torture-1.29.\n+\n+\t* gcc.c-torture/execute/{nest-stdar-1.c, struct-ini-1.c,\n+\tstrct-pack-1.c, strct-varg-1.c}: Renamed to match c-torture-1.29.\n+\n+\t* gcc.c-torture/execute/920612-2.c: Update to c-torture-1.29.\n+\n+\t* gcc.c-torture/noncompile/{931203-1.c, 940112-1.c, 940227-1.c,\n+\t940510-1.c, init-1.c, init-2.c}: Import from c-torture-1.29\n+\n+\t* gcc.c-torture/compile/{920928-6.c, 931203-1.c, 940611-1.c,\n+\t940712-1.c, calls.c, combine-hang.c, goto-1.c, init-2.c,\n+\tlabels-1.c, packed-1.c, zero-strct-1.c}: Import from c-torture-1.29.\n+\n+Tue Jul 12 12:49:44 1994  Jim Kingdon  (kingdon@lioth.cygnus.com)\n+\n+\t* gcc.execute/{940712-1.c, 940712-2.c, 940713-1.c, 940714-1.c},\n+\tgcc.noncompile/{940712-1.h, 940712-1a.h, 940712-1b.h, 940712-1.c,\n+\t940714-1.c, 940714-2.c, 940714-3.c},\n+\tgcc.compile/{940713-1.c, 940713-2.c, 940714-1.c},\n+\tgcc.misc-tests/{mg.c,mg.exp}:\n+\tNew tests.\n+\t* gcc.noncompile/noncompile.exp: Change accordingly.\n+\n+Thu Jul  7 14:20:33 1994  Doug Evans  (dje@canuck.cygnus.com)\n+\n+\t* config/sim.exp, lib/c-torture.exp, lib/gcc.exp:\n+\tUndo previous clobberage.\n+\n+Mon Jul  4 17:00:59 1994  Jeff Law  (law@snake.cs.utah.edu)\n+\n+\t* gcc.compile/{931102-1.c, 931102-2.c, 931031-1.c}:\n+\t* gcc.special/{930510-1.c, special.exp}:\n+\t* gcc.execute/{931031-1.c, 931110-1.c, 931110-2.c, 931102-1.c,\n+\t931102-2.c, struct-pack-1.c, divmod-1.c, complex-1.c,\n+\tstruct-varargs-1.c}: New tests from c-torture-1.26.\n+\n+Tue Jun 28 17:39:42 1994  J.T. Conklin  (jtc@phishhead.cygnus.com)\n+\n+\t* gcc.wendy/wendy.exp: add --'s so that -1 isn't parsed as an\n+\t  argument to switch.\n+\n+Sat May 21 10:39:38 1994  Bill Cox  (bill@rtl.cygnus.com)\n+\n+\t* Revert the previous changes.  Please see Rob's directory\n+\t  (/lisa/test/rob/progressive/gcc/testsuite) for testing\n+\t  fixes.\n+\n+Thu May 19 18:00:03 1994  Bill Cox  (bill@rtl.cygnus.com)\n+\n+\t* config/sim.exp, config/udi.exp, config/unix.exp, config/vx.exp, \n+          g++.brendan/alignof.exp, g++.brendan/arm3.exp, g++.brendan/code-gen5.exp,\n+          g++.brendan/crash29.exp, g++.brendan/crash5.exp, g++.brendan/cvt3.exp,\n+          g++.brendan/delete1.exp, g++.brendan/nest12.exp, g++.brendan/nest13.exp,\n+          g++.brendan/overload3.exp, g++.brendan/redecl1.exp, g++.brendan/visibility2.exp,\n+          g++.jason/cond.exp, g++.jason/hmc1.exp, g++.jason/report.exp,\n+          g++.law/access1.exp, g++.law/access2.exp, g++.law/arg6.exp, \n+          g++.law/arg7.exp, g++.law/arg8.exp, g++.law/arm1.exp, \n+          g++.law/arm10.exp, g++.law/arm4.exp, g++.law/arm5.exp,\n+          g++.law/ctors15.exp, g++.law/ctors19.exp, g++.law/cvt1.exp,\n+          g++.law/cvt12.exp, g++.law/cvt13.exp, g++.law/cvt18.exp, \n+          g++.law/cvt22.exp, g++.law/cvt3.exp, g++.law/cvt5.exp, \n+          g++.law/cvt6.exp, g++.law/cvt8.exp, g++.law/dtors3.exp, \n+          g++.law/except1.exp, g++.law/except3.exp, g++.law/except4.exp,\n+          g++.law/except5.exp, g++.law/except6.exp, g++.law/init5.exp, \n+          g++.law/init8.exp, g++.law/inline4.exp, g++.law/memoized1.exp,\n+          g++.law/missing1.exp, g++.law/operators14.exp, g++.law/operators18.exp,\n+          g++.law/operators9.exp, g++.law/scope2.exp, g++.law/temps2.exp,\n+          g++.law/temps3.exp, g++.law/temps5.exp, g++.law/typeck2.exp, \n+          g++.mike/misc4.exp, g++.mike/misc6.exp, g++.niklas/t118.exp,\n+          g++.niklas/t128.exp, g++.niklas/t138.exp, g++.niklas/t139.exp,\n+          g++.niklas/t140.exp, g++.niklas/t141.exp, gcc.code_quality/code_quality.exp,\n+          gcc.compile/compile.exp, gcc.dje/dje.exp, gcc.execute/execute.exp, \n+          gcc.failure/failure.exp, gcc.ieee/ieee.exp, gcc.noncompile/noncompile.exp,\n+          gcc.special/special.exp, gcc.unsorted/unsorted.exp, lib/c-torture.exp,\n+          lib/chill.exp, lib/g++.exp, lib/gcc.exp, lib/mike-g++.exp, lib/mike-gcc.exp,\n+          lib/old-dejagnu.exp: Checkin Rob's 94Q1 testing changes.\n+\n+Tue May 17 14:55:09 1994  Bill Cox  (bill@rtl.cygnus.com)\n+\n+\t* config/udi.exp, gcc.execute/execute.exp, gcc.wendy/wendy.exp,\n+          lib/g++.exp, lib/old-dejagnu.exp: Replace error proc calls\n+\t  with perror calls.\n+\n+Mon May  2 17:41:13 1994  Jason Merrill  (jason@deneb.cygnus.com)\n+\n+\t* config/unix.exp (g++_load): Fix syntax.\n+\n+Thu Apr 14 12:22:10 1994  Jim Wilson  (wilson@sphagnum.cygnus.com)\n+\n+\t* gcc.compile/initbug1.exp (CFLAGS): Add space at beginning.\n+\t* gcc.noncompile/921017-1.c: Deleted obsolete test.\n+\t* gcc.noncompile/noncompile.exp: Remove code for deleted test.\n+\tDon't expect va-arg-1.c to fail.  Correct expected output for\n+\t920928-1.c.\n+\t* gcc.wendy/d.c, msgs.c, prolog.c, subs.c, z.c: Deleted.\n+\t* gcc.wendy/hbm4.c: Correct typo.\n+\t* gcc.wendy/tad1.c, tad2.c: Correct expected output.\n+\n+Mon Mar 28 13:29:37 1994  Doug Evans  (dje@canuck.cygnus.com)\n+\n+\t* lib/gcc.exp (gcc_[ce]{pass,fail}): Remove output/executable argument.\n+\t* gcc.wendy/wendy.exp (wendy_try): Remove `output' argument of\n+\tgcc_[ce]{pass,fail}.  Explicitly remove executable if test passes.\n+\t* lib/c-torture.exp (c-torture-compile): Ditto.\n+\n+\tReduce volume of output (remove all the -I's and such).\n+\t* lib/c-torture.exp (c-torture-compile): New argument OPTION.\n+\tCall gcc_cpass, gcc_cfail.\n+\t(c-torture): Pass testing option to c-torture-compile.\n+\n+Mon Mar 21 12:40:33 1994  Doug Evans  (dje@cygnus.com)\n+\n+\tBring patches over from progressive.\n+\t* config/default.exp: Exit remote shell cleanly.\n+\t(g++_exit, g++_start): Add default versions.\n+\t* config/sim.exp (gcc_load): Use perror, not error.\n+\n+Sun Mar 20 12:05:32 1994  Doug Evans  (dje@canuck.cygnus.com)\n+\n+\t* lib/gcc.exp: Don't set CFLAGS if CC not set.  It clobbers the\tvalue\n+\tset in site.exp.\n+\n+Mon Mar 14 19:30:28 1994  Doug Evans  (dje@cygnus.com)\n+\n+\t* gcc.wendy/wendy.exp (wendy_first_line): New proc to fetch\n+\tDEJAGNU_OUTPUT and DEJAGNU_CFLAGS.\n+\t(wendy_try): New proc to run testcase.\n+\t(main loop): Call 'em.\n+\t* gcc.wendy/*.c: Clean up pass to correct expected output.\n+\n+\t* lib/gcc.exp: Minor cleanup work.\n+\t(gcc_cpass, gcc_cfail, gcc_epass, gcc_efail): New procs.\n+\n+Wed Mar  9 15:22:54 1994  Doug Evans  (dje@canuck.cygnus.com)\n+\n+\t* config/sim.exp (gcc_load): Document return codes better.\n+\tDon't pass -v to simulator.\n+\n+Thu Feb 24 07:15:18 1994  Jeffrey A. Law  (law@snake.cs.utah.edu)\n+\n+        * gcc.special/920717-x.c: Fix typo.\n+        * gcc.special/special.exp (920717-x.c): Use $srcdir/$subdir to\n+        get at sources.\n+\n+\t* lib/mike-gcc.exp: Fix typo.\n+\n+Tue Feb 15 15:41:47 1994  Rob Savoye  (rob@darkstar.cygnus.com)\n+\n+\t* lib/gcc.exp: Minor cleanup work. Find the proper gcc or g++\n+\tbinary to use, transform the name.\n+\t* config/*.exp: rename everything. Nuke any g++ specific files,\n+\tit's now a special case of gcc that requires no special support.\n+\tAdd a default.exp for unsupported targets.\n+\n+Fri Feb 11 12:59:54 1994  Rob Savoye  (rob@poseidon.cygnus.com)\n+\n+\t* g++.jason/report.exp, g++.old-deja/old-deja.exp,\n+\tlib/old-dejagnu.exp: Fix a few patterns to work with the new\n+\tversion of Tcl.\n+\n+Wed Feb  9 21:35:47 1994  Rob Savoye  (rob@darkstar.cygnus.com)\n+\n+\t* lib/c-torture.exp: Made \"file prefix*never used a pass, rather\n+\tthan a warning.\n+\n+Sun Feb  6 16:52:13 1994  Jeffrey A. Law  (law@snake.cs.utah.edu)\n+\n+\t* lib/mike-gcc.exp: Add in recent changes from mike-g++.exp.\n+\n+Mon Jan  3 17:28:25 1994  Jim Wilson  (wilson@sphagnum.cygnus.com)\n+\n+\t* gcc.execute/execute.exp: Combine opt_list and foption_list into\n+\toption_list.  Compile every file with only 4/6 option choices\n+\t(same as C torture) instead of with 12/18 different option\n+\tchoices.\n+\t* lib/c-torture.exp: Likewise.\n+\n+\t* lib/gcc.exp: Set LIBS, CFLAGS, and LDFLAGS to empty strings if\n+\tnot already set.\n+\n+Thu Dec 30 17:17:07 1993  Mike Stump  (mrs@rtl.cygnus.com)\n+\n+\t* lib/old-deja.exp: Add `excess errors test fails' error, now one\n+\tcan put an XFAIL *-*-* on excess errors.\n+\n+Sun Dec 19 21:45:34 1993  Jeffrey A. Law  (law@snake.cs.utah.edu\n+\n+\t* g++.law: Add more tests derived from g++-bugs snapshots.\n+\n+\t* g++.law/init11.{c,exp}: Delete test.  Brendan sez it's \n+\tequivalent to g++.law/init9.\n+\n+\t* lib/mike-gcc.exp (postbase): Delete the .o file after we've\n+\tcompiled it, and the a.out file after we've run it.\n+\n+Fri Dec 17 11:29:56 1993  Brendan Kehoe  (brendan@lisa.cygnus.com)\n+\n+\t* lib/mike-g++.exp (postbase): Delete the .o file after we've\n+\tcompiled it, and the a.out file after we've run it.\n+\n+Fri Dec 17 10:18:16 1993  Jeffrey A. Law  (law@snake.cs.utah.edu)\n+\n+\t* g++.law/*.exp: Avoid losing arguments added via \"append\" commands.\n+\n+Wed Dec 15 20:36:40 1993  Rob Savoye  (rob@darkstar.cygnus.com)\n+\n+\t* lib/gcc.exp, lib/g++.exp: Use catch rather than exec to get the\n+\tversion number. \n+\n+Sun Dec 12 21:10:04 1993  Jeffrey A. Law  (law@snake.cs.utah.edu)\n+\n+\t* g++.law: New directory of g++ tests derived from the g++-bugs\n+\tsnapshots.\n+\n+Thu Dec 09 16:50:41 1993  Jeffrey Wheat  (cassidy@cygnus.com)\n+\n+\t* gcc.compile: initbug1.c initbug1.exp testcase added\n+\n+Mon Dec 06 11:09:52 1993  Jeffrey Wheat  (cassidy@cygnus.com)\n+\n+\t* gcc.dje/sizetype-1.exp, dje.exp: minor clean ups\n+\t* gcc.execute/execute.exp: minor cleanups. added gcc_stat calls. added\n+\t  fixes submitted by Jeff Law (law@cs.utah.edu)\n+\t* gcc.noncompile/noncompile.exp, lib/mike-gcc.exp: new files from\n+\t  Jeff Law (law@cs.utah.edu)\n+\n+\n+Tue Nov 30 16:34:07 1993  Mike Stump  (mrs@cygnus.com)\n+\n+\t* config/unix-g++.exp: Follow the gcc way of doing things.\n+\t* g++.old-deja/old-deja.exp: Minor updates.\n+\t* lib/g++.exp: New file, follow the gcc way of doing things.\n+\t* lib/old-dejagnu.exp: Minor updates.\n+\t* lib/mike-g++.exp: Always unset errorInfo.\n+\n+Sat Nov  6 11:34:51 1993  Mike Stump  (mrs@cygnus.com)\n+\n+\t* lib/gcc.exp: Fix some errors with the below change, CC and\n+\tCFLAGS should be global when setting, not local.\n+\n+Wed Nov  3 11:16:26 1993  Rob Savoye  (rob@darkstar.cygnus.com)\n+\n+\t* lib/gcc.exp: Transform tool name.\n+\n+Wed Oct 27 23:57:29 1993  Jeffrey Wheat  (cassidy@cygnus.com)\n+\n+\t* gcc.*/*.exp: Fixd some de-stablizing changes. Sorry.\n+\n+Wed Oct 27 14:45:50 1993  Jeffrey Wheat  (cassidy@cygnus.com)\n+\n+\t* lib/gcc.exp: change gcc_done to gcc_stat\n+\n+Wed Oct 27 09:57:51 1993  Jeffrey Wheat  (cassidy@cygnus.com)\n+\n+\t* Upgraded gcc testsuite to c-torture version 1.25\n+\n+Sun Oct 24 10:58:03 1993  Jeffrey Wheat  (cassidy@cygnus.com)\n+\n+\t* lib/gcc.exp: added reporting code. Changed verbose compile message.\n+\t* lib/c-torture: added hooks for new reporting code.\n+\n+Thu Oct 21 18:45:32 1993  Jeffrey Wheat  (cassidy@cygnus.com)\n+\n+\t* config/sh-gcc.exp: check if sh-sim exists in the path\n+\n+Mon Oct 18 11:13:22 1993  Jeffrey Wheat  (cassidy@cygnus.com)\n+\n+\t* gcc.code_quality/code_quality.exp: Initial changes for new logic.\n+\t* gcc.compile/compile.exp: Initial changes for new logic.\n+\t* gcc.dje/dje.exp, sizetype-1.exp: Initial changes for new logic.\n+\t* gcc.failure/failure.exp: Initial changes for new logic.\n+\t* gcc.ieee/ieee.exp: Initial changes for new logic.\n+\t* gcc.misc-tests/misc.exp: Initial changes for new logic.\n+\t* gcc.noncompile/non_compile.exp: Initial changes for new logic.\n+\t* gcc.unsorted/unsorted.exp: Initial changes for new logic.\n+\t* lib/c-torture.exp: Initial changes for new logic.\n+\t* lib/gcc.exp: Initial changes for new logic.\n+\n+Fri Oct 15 00:19:42 1993  Mike Stump  (mrs@cygnus.com)\n+\n+\t* lib/mike-g++.exp, lib/old-dejagnu.exp: Make the message not\n+\tdepend upon failure or success.  Fully qualify names in failure\n+\tand success messages.  Always remove a.out before starting\n+\tcompile, just in case.  Pay more attention to error text output by\n+\tthe compiler.  Handle testcases with no known past errors just\n+\tlike all others, so that things are uniform.  Other miscellaneous\n+\timprovements.\n+\n+Wed Oct 13 15:04:51 1993  Jeffrey Wheat  (cassidy@cygnus.com)\n+\n+\t* gcc.cpp: new directory for cpp tests\n+\n+Mon Oct  4 09:03:41 1993  Jeffrey Wheat  (cassidy@cygnus.com)\n+\n+\t* lib/chill.exp: Code reformatted, removed unused code.\n+\t* config/unix-chill.exp: Code reformatted, removed unused code.\n+\t* chill.execute/execute.exp: Code reformatted, removed unused code.\n+\t* chill.execute/oe/orient.exp: Code reformatted, removed unused code.\n+\n+Mon Oct  4 06:19:26 1993  Ian Lance Taylor  (ian@cygnus.com)\n+\n+\t* config/mips-gcc.exp, config/mips-g++.exp: New files.  Execution\n+\troutines not written.\n+\n+Mon Sep 27 21:07:44 1993  Rob Savoye  (rob@darkstar.cygnus.com)\n+\n+\t* config/bug-gcc.exp: Use new procs from bug.exp.\n+\n+Tue Sep 21 18:21:12 1993  Rob Savoye  (rob@darkstar.cygnus.com)\n+\n+\t* config/vx-gcc.exp: Use new vxworks_ld proc, so files get loaded\n+\tvia ftp, rather than depending on NFS.\n+\t* config/vx-gcc.exp: Use new vxworks_spawn proc to execute test\n+\tcase.\n+\n+Thu Sep  9 23:09:15 1993  Rob Savoye  (rob@darkstar.cygnus.com)\n+\n+\t* config/bug-gcc.exp: Use new download proc.\n+\n+Tue Sep 14 19:23:58 1993  Jeffrey Wheat  (cassidy at deneb.cygnus.com)\n+\n+\t* chill.execute/execute.exp: cleanups, handles errors better\n+\t* chill.compile/compile.exp: rewrite, based on execute.exp\n+\t* chill.noncompile/noncompile.exp: rewrite, based on execute.exp\n+\t* lib/chill.exp: major changes to diff proc and compile and link\n+\t  procs. added chill_fail and chill_pass wrappers to pass and\n+\t  fail. added more comments, and handle error codes better. \n+\t  Added a hack to capture stderr from exec, so noncompile tests\n+\t  can work.\n+\t  \n+Sat Sep 11 15:30:10 1993  Jeffrey Wheat  (cassidy@cygnus.com)\n+\n+\t* chill.execute/execute.exp: rewrite of testsuite driver\n+\t* lib/chill.exp: rewrite of testsuite driver\n+\t* config/unix-chill.exp: rewrite of testsuite driver\n+\n+Wed Aug 25 14:11:13 1993  Bill Cox  (bill@rtl.cygnus.com)\n+\n+    In chill.execute:\n+\t* iexpr.ch: Standardize uppercase.\n+\t* tuples.dat: Standardize uppercase.\n+\t* vary.ch: standardize.  Correct varying string assignments.\n+\t* vary.dat: Add new output lines.\n+\n+Tue Aug 24 13:45:49 1993  Bill Cox  (bill@rtl.cygnus.com)\n+\n+    In chill.execute:\n+\t* chprintf.ch: Standardize use of uppercase.\n+\t* tuples.ch: Standardize and turn arr2 into a DCL,\n+\t  rather than a SYN.\n+\t* pinits.ch: Standardize.\n+\n+Mon Aug 23 17:26:58 1993  Per Bothner  (bothner@kalessin.cygnus.com)\n+\n+\t* rts.c:  Get malloc() from <stdlib.h>, not <malloc.h>.\n+\t* Makefil: Renamed to Makefile.in.\n+\t* configure.in: New.\n+\n+Mon Aug 23 14:24:13 1993  Bill Cox  (bill@rtl.cygnus.com)\n+\n+    In chill.execute:\n+\t* .cvsignore: Add result/output files.\n+\t* Makefile: Fix up variables at start.  Use MFLAGS\n+\t  everywhere.  Correct bool_loc, built_ins entries.\n+\t  Add entry for vary1.ch.\n+\t* bitarray.ch: Standardize upper-case usage.\n+\t* bitexpr.ch: Standardize, add output of b1.\n+\t* params.ch: Use arrayt in along PROC parameters, to\n+\t  avoid novelty problems.\n+\t* sets.ch: Tiny cleanup.\n+\t* vary1.ch: Re-indent.\n+\n+Tue Aug 17 15:42:07 1993  Bill Cox  (bill@rtl.cygnus.com)\n+\n+        * Add PR-related files to Makefiles, .cvsignore files, etc.\n+\n+Mon Aug  2 15:46:05 PDT 1993  Jeff Wheat  (cassidy@cygnus.com)\n+\n+\t* gcc.unsorted: flow.c and loop.c - renamed to avoid conflicts\n+\t  with compiler objects. New names are test-flow.c and test-loop.c\n+\n+Tue Jul 27 10:08:08 PDT 1993  Jeff Wheat  (cassidy@cygnus.com)\n+\n+\t* Upgraded c-torture tests from 1.19 to 1.20\n+\n+\t* new files:\n+\t* gcc.compile: 930609-1.c 930611-1.c 930618-1.c 930621-1.c \n+\t* gcc.compile: 930623-1.c 930623-2.c \n+\t* gcc.noncompile: 930622-1.c 930622-2.c\n+\t* gcc.failure: 920411-1.c 920627-2.c\n+\t* gcc.ieee: 920518-1.c 920810-1.c 930529-1.c\n+\n+Tue Jul 20 15:19:44 PDT 1993  Jeff Wheat  (cassidy@cygnus.com)\n+\n+\t* chill.compile/compile.exp chill.execute/execute.exp lib/chill.exp\n+\t  More changes to get testsuite working properly. Needs more work.\n+\t  Added some support for POSIX IEEE Std 1003.3-1991 error messages.\n+\n+Mon Jul 19 18:40:31 PDT 1993  Jeff Wheat  (cassidy@cygnus.com)\n+\n+\t* chill.compile/compile.exp chill.execute/execute.exp lib/chill.exp\n+\t  More changes to get testsuite working properly. Needs more work.\n+\n+Tue Jul 13 18:38:56 PDT 1993 Jeff Wheat  (cassidy@cygnus.com)\n+\n+\t* chill.compile/compile.exp: Added for Dejagnu support\n+\t* chill.execute/execute.exp: Added for Dejagnu support\n+\t* lib/chill.exp config/unix-chill.exp  : Added for Dejagnu support\n+\n+Sat Jun 19 07:13:05 1993  Bill Cox  (bill@rtl.cygnus.com)\n+\n+    This should complete moving the CHILL test files.\n+\t* chill.noncompile(.cvsignore printf.grt \n+          in-printf.grt chprintf.grt chprintf.ch):\n+          Added test-support files.\n+\t  (Makefile): Modified further.\n+\t* chill.compile (emptymod.ch gdbme.ch neg_range.ch\n+          signal.ch): Added test files.\n+        * chill.execute (.cvsignore printf.grt printr.c\n+          in-printf.grt rts.c chprintf.grt rts.h): Added\n+\t  test-support files.\n+          (Makefile): More corrections.\n+\n+Fri Jun 18 23:40:54 1993  Bill Cox  (bill@rtl.cygnus.com)\n+\n+\t* chill.compile, chill.execute, chill.nocompile: Add CHILL\n+\t  test cases, ready for DejaGnu.\n+\n+Thu Jun 17 19:14:40 MDT 1993  Jeffrey Wheat  (cassidy@cygnus.com)\n+\n+\t* Upgraded c-torture tests from 1.18 to 1.19\n+\n+\t* gcc.compile: added test(s):\n+\t  930607-1.c\n+\t* gcc.execute: added test(s):\n+\t  930603-1.c 930603-2.c 930603-3.c 930608-1.c conversion.c inst-check.c\n+\n+\t* added new subdirectory for misc tests: gcc.misc-tests\n+\t* gcc.misc-test(s): added tests:\n+\t  inst-check.c test-consts.c test-ior.c test-switch.c\n+\n+Wed Jun  9 16:53:26 1993  Brendan Kehoe  (brendan@lisa.cygnus.com)\n+\n+\t* lib/mike-g++.exp: Load `./a.out', not `a.out'.\n+\n+Mon Jun  7 16:18:40 1993  Ian Lance Taylor  (ian@cygnus.com)\n+\n+\t* g++.old-deja/old-deja.exp: Don't delete all the .o files.\n+\n+Thu Jun  3 13:13:36 MDT 1993  Jeffrey Wheat  (cassidy@cygnus.com)\n+\n+\t* Upgraded c-torture tests from 1.17 to 1.18\n+\n+Wed Jun  2 19:02:40 MDT 1993  Jeffrey Wheat  (cassidy@cygnus.com)\n+\n+\t* Upgraded c-torture tests from 1.12 to 1.17\n+\n+Fri Apr 30 09:38:41 1993  Mike Werner  (mtw@deneb.cygnus.com)\n+\n+\t* lib/old-dejagnu.exp:\n+\t  Fixed handling of XFAIL target triplets to correctly\n+\t  recognize wildcard characters.  Removed code that\n+\t  appended a unique id tag to the end of the file name\n+\t  printed out by the result of the testcases within a\n+\t  given test file.\n+\n+Thu Apr 29 19:06:29 1993  Mike Werner  (mtw@deneb.cygnus.com)\n+\n+\t* lib/old-dejagnu.exp:\n+\t  Reworked expected failure handling to trigger off of XFAIL\n+\t  keyword in keyphrase embeded in testcase source code. The\n+\t  XFAIL keyword must be at the end of the keyphrase line. It\n+\t  may optionally be followed by one or more target triplets.\n+\t  It has just occured that the handling of wildcards in the\n+\t  target triplet may not be correct.\n+\n+Fri Apr 23 13:16:20 1993  Mike Werner  (mtw@deneb.cygnus.com)\n+\n+\t* g++.old-deja/tests:\n+\t  Moved all subdirectories up one level into g++.old-deja .\n+\n+\t* lib/old-dejagnu.exp:\n+\t  Fixed problem with CXXFLAGS not being properly reset, and being\n+\t  corrupted with extraneous \"-c\" compiler option.  This was\n+\t  causing binaries to not be generated for test that needed them.\n+\t  Modified strings passed to \"pass\" and \"fail\" so that individual\n+\t  tests from the same test file would be distinguished by an\n+\t  identifier appended to the test file name in the summary logs;\n+\t  this corrected a problem with erroneous diff logs.  Added code\n+\t  to search testcases for expected fail and unexpected pass keywords.\n+\n+Tue Apr 20 18:27:58 1993  Rob Savoye  (rob at darkstar.cygnus.com)\n+\n+\t* lib/c-torture.exp: Ignore \"file path prefix*unused\" message.\n+\n+Thu Apr 15 11:01:59 1993  Mike Werner  (mtw@deneb.cygnus.com)\n+\n+\t* g++.old-deja/tests/g++.sun/g++.frag/1045608.C:\n+\t  Removed extraneous text from end of \"Special g++ Options\"\n+\t  keyphrase.\n+\n+\t* lib/old-dejagnu.exp: Added pattern matching to look for new\n+\t  keywords, embedded in testcases comments, which will trigger\n+\t  calls to xpass and xfail.\n+\n+Wed Apr 14 14:28:01 1993  Mike Werner  (mtw@deneb.cygnus.com)\n+\n+\t* lib/old-dejagnu.exp: Cleaned up pattern matching for keyphrase\n+\t  comments embedded in the testcases, especially the one looking for\n+\t  special compiler options, as well as the pattern matching for the\n+\t  compiler output again.\n+\n+Mon Apr 12 15:15:37 1993  Mike Werner  (mtw@deneb.cygnus.com)\n+\n+\t* lib/old-dejagnu.exp: Do a proper check of the return value for\n+\t  execute tests. Fixed several problems with the pattern matching\n+\t  of the compiler output which gave erroneous test results.\n+\t  Changed several of the test result messages to be more descriptive.\n+\t* config/unix-g++.exp: Proc g++_load now actually works and\n+\t  executes the tests passed to it and returns a usable return\n+\t  value. \n+\n+Sun Apr 11 17:22:37 1993  Rob Savoye  (rob at darkstar.cygnus.com)\n+\n+        * lib/gcc.exp: Exits gracefully if $CC is bogus.\n+\n+Fri Apr  9 09:41:59 1993  Mike Werner  (mtw@deneb.cygnus.com)\n+\n+\t* lib/old-dejagnu.exp , g++.old-deja/old-deja.exp:\n+\t  Modified both files to properly execute the old style\n+\t  dejagnu tests. The previous versions of these files were\n+\t  experimental and did not function anything near correctly.\n+\n+Mon Apr  5 21:08:24 1993  Rob Savoye  (rob@cygnus.com)\n+\n+\t* Removed all Makefile.in and configure.in files. No configuration\n+\tneeded now.\n+\n+Fri Apr  2 12:15:17 1993  Mike Werner  (mtw@deneb.cygnus.com)\n+\n+\t* lib: relocated old-dejagnu.exp from devo/dejagnu/lib\n+\n+Sun Mar 28 11:17:48 1993  Ken Raeburn  (raeburn@kr-pc.cygnus.com)\n+\n+\t* gcc.compile/configure.in, gcc.unsorted/configure.in,\n+\tgcc.special/configure.in, gcc.noncompile/configure.in,\n+\tgcc.execute/configure.in, gcc.code_quality/configure.in,\n+\tg++.other/configure.in, g++.old-deja/configure.in,\n+\tg++.niklas/configure.in, g++.mike/configure.in: Remove extra quote\n+\tin srcname setting.\n+\n+Thu Mar 25 20:07:55 1993  Rob Savoye  (rob at darkstar.cygnus.com)\n+\n+\t* lib/udi.exp:  Fixed mondfe and mondfe_download.\n+\t* config/udi-gcc.exp: Fixed misc bugs, works with expect 4.x.\n+\t* config/abug-gcc.exp: Fixed misc bugs, works with expect 4.x.\n+\n+Thu Mar 25 13:06:41 1993  Ian Lance Taylor  (ian@cygnus.com)\n+\n+\t* config/udi-gdb.exp: Check $shell_id after connecting to target.\n+\t(gdb_exit): Don't remove *_soc files.\n+\n+Mon Mar 22 14:28:46 1993  Ian Lance Taylor  (ian@cygnus.com)\n+\n+\t* lib/c-torture.exp: Don't look for main; instead always use -w\n+\t-c.  This is how the c-torture tests work.  Remove the object\n+\tfile if the compilation succeeds.\n+\t* gcc.execute/execute.exp: Remove executable if test passes.\n+\t* gcc.noncompile/noncompile.exp: Every test is an expected\n+\tfailure.\n+\t* gcc.special/special.exp: Added tests from c-torture 1.11,\n+\tcorrected use of existing test.\n+\t* gcc.execute/920302-1.c, gcc.execute/920501-8.c,\n+\tgcc.execute/920625-1.c: Updated to c-torture 1.11.\n+\t* gcc.compile/921103-1.c, gcc.compile/921109-1.c,\n+\tgcc.compile/921109-2.c, gcc.compile/921109-3.c,\n+\tgcc.compile/921111-1.c, gcc.compile/921116-2.c,\n+\tgcc.compile/921118-1.c, gcc.compile/921126-1.c,\n+\tgcc.compile/921202-1.c, gcc.compile/921202-2.c,\n+\tgcc.compile/921203-1.c, gcc.compile/921203-2.c,\n+\tgcc.compile/921206-1.c, gcc.execute/921029-1.c,\n+\tgcc.execute/921104-1.c, gcc.execute/921110-1.c,\n+\tgcc.execute/921112-1.c, gcc.execute/921113-1.c,\n+\tgcc.execute/921117-1.c, gcc.execute/921123-1.c,\n+\tgcc.execute/921123-2.c, gcc.execute/921124-1.c,\n+\tgcc.execute/921202-1.c, gcc.execute/921202-2.c,\n+\tgcc.execute/921204-1.c, gcc.execute/921207-1.c,\n+\tgcc.execute/921208-1.c, gcc.execute/921208-2.c,\n+\tgcc.execute/921215-1.c, gcc.execute/921218-1.c,\n+\tgcc.execute/921218-2.c, gcc.noncompile/921102-1.c,\n+\tgcc.noncompile/921116-1.c, gcc.unsorted/x.c: Added from\n+\tc-torture 1.11.\n+\t* gcc.noncompile/921021-1.c, gcc.unsorted/x11bug.c: Removed to\n+\tcorrespond to c-torture\t1.11.\n+\n+\t* New file.\n+"}, {"sha": "833d5ed603bdcfa2e49f7a41c928dc13ffe143bc", "filename": "gcc/testsuite/README.g++", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2FREADME.g%2B%2B", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2FREADME.g%2B%2B", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FREADME.g%2B%2B?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,64 @@\n+This file needs a little updating, but is pretty close.  Here are some\n+random last minute notes:\n+\n+make check and make check-g++ aren't in FSF's gcc yet, I am planning\n+on getting this work into the tree some time...\n+\n+> and the command\n+\n+>       runtest --tool g++ --srcdir ./testsuite\n+\n+> doesn't work.  I got it to work by explicitly setting CXX and CXXFLAGS\n+> on the command line, e.g.\n+\n+> runtest --tool g++ --srcdir ./testsuite CXX=g++ CXXFLAGS=\"\"\n+\n+site.exp updated to have right CXXFLAGS and CXX, but not at the FSF yet.\n+\n+\n+  This is a collection of tests for g++, the FSF's C++ compiler. The\n+driver that runs the testsuite is called DejaGnu.  If you do not have\n+DejaGnu yet, you will need to get it (ftp://ftp.cygnus.com/pub/dejagnu).\n+You will need a snapshot of DejaGnu of 02/21/97 or later.  The tests\n+were developed and/or collected by Cygnus Support. These tests are\n+included \"as is\". If any of the tests fail, don't report a bug.  Bug\n+reports for DejaGnu can go to bug-dejagnu@prep.ai.mit.edu.  Discussion\n+and comments about this testsuite can be sent to me, at the address\n+below.\n+\n+  Since these are part of the development source tree at Cygnus, this\n+tar file is supposed to be untarred so that the testsuite directory is\n+in the gcc source tree. Most of the time DejaGnu is run by hand using\n+\"runtest\", but as we believe in solid testing, we've integrated it\n+into the Makefile as a target. We normally use the testsuite by doing\n+a \"make all; make check-g++\" at the top level and building and testing\n+our whole tree.  If you have both the gcc testsuite and the g++\n+testsuite, you can check both with the \"make check\" command.\n+\n+  DejaGnu can be run either installed, or uninstalled. Usually it gets\n+installed so that anyone can just run the tests without having to\n+configure or build DejaGnu.\n+\n+  To run the tests, first change to the gcc-2.7.1 directory, then type:\n+\n+\truntest --tool g++ --srcdir ./testsuite\n+\n+Here's a brief explanation.\n+\n+runtest         - Is the name used to invoke DejaGnu.   If DejaGnu is not\n+\t\t  install this will be the relative path name for runtest.\n+\n+--tool          - This tells DejaGnu which tool you are testing. It is\n+                  mainly used to find the testsuite directories for a\n+                  particular tool when several testsuites are in the\n+                  same directory. (like the gcc and g++ testsuites)\n+\n+--srcdir        - This points to the top level of the directory\n+                  containing the sources of the testsuite. This is\n+                  ./testsuite if you are in the directory that has the\n+                  testsuite directory.\n+\n+\n+\t\t\t\t\tMike Stump\n+\t\t\t\t\tmrs@cygnus.com\n+\t\t\t\t\tFSF C++ developer"}, {"sha": "7428505859569ac5c2177862b585598b8f22a48f", "filename": "gcc/testsuite/README.gcc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2FREADME.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2FREADME.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FREADME.gcc?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,71 @@\n+This file contains a list of notes for those writing testcases and those\n+writing expect scripts.  At present, they're in random order.\n+\f\n+Verbosity Levels\n+\n+- each level adds verbosity so level 2 prints all level 1 and level 2 stuff.\n+\n+1) Print a one-liner indicating the testcase being run (and maybe special\n+   compiler options).\n+\n+2) Print compiler and program invocation including arguments and their output.\n+   Proc's gcc_load and gcc_start handle the latter two.\n+\n+3) Print detailed testcase analysis like \"Looking for pattern ...\", etc.\n+\n+4) Maximum verbosity.  Print anything else of interest.\n+\f\n+send_log conventions\n+\n+Various messages are stored in gcc.log by the testing framework and we\n+try to augment them with some of our own.  The format of the framework\n+messages are:\n+\n+PASS: blah blah ...\n+FAIL: blah blah ...\n+\n+so we use\n+\n+XXXX: blah blah ...\n+\n+Current messages are:\n+\n+EXEC: program being executed (so compiler path and args are recorded)\n+STAT: intermediate pass/fail statistics\n+\f\n+DO NOT PUT NON-PORTABLE TESTCASES IN gcc.c-torture.\n+\n+ANY TARGET SPECIFIC TESTCASE MUST HAVE APPROPRIATE CODE TO PREVENT IT FROM\n+CAUSING A `FAILURE' ON UNSUPPORTED PLATFORMS.\n+\f\n+Test scripts must ignore the compiler messages \"path prefix never used\"\n+and \"linker input file unused\".  Don't let their appearance cause a testcase\n+to fail.  See lib/dg.exp for the exact regsub to use.\n+\f\n+If you're unclear about which directory a testcase should be installed in,\n+ask gcc-local.\n+\f\n+Always use abort() for runtime failures, and exit(0) for success.\n+The testing harness is set up to watch for these and do something appropriate\n+(when necessary) for target boards.\n+\f\n+Have the text of a fail message be the same as that for pass.\n+IE: have\n+\n+        if ...success...\n+                pass \"pr 1234\"\n+        else\n+                fail \"pr 1234\"\n+\n+not\n+\n+        if ...success...\n+                pass \"pr 1234 passed\"\n+        else\n+                fail \"pr 1234 failed\"\n+\n+\n+This lets test-tool (which drives the nightly tests) do a better job\n+at tracking which tests have digressed or been fixed.\n+\f\n+Add more notes here.\n\\ No newline at end of file"}, {"sha": "9ae55bc6a769248d32dc97c5e1f74f86df4a6a4d", "filename": "gcc/testsuite/config/default.exp", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fconfig%2Fdefault.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fconfig%2Fdefault.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fconfig%2Fdefault.exp?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,20 @@\n+#   Copyright (C) 1997 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# Please email any bugs, comments, and/or additions to this file to:\n+# bug-gcc@prep.ai.mit.edu\n+\n+load_lib \"standard.exp\""}, {"sha": "e6209dbc6c2d0feeef921578c30bc0ca834aea6b", "filename": "gcc/testsuite/g++.old-deja/Makefile.in", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2FMakefile.in?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,12 @@\n+#### host, target, and site specific Makefile frags come in here.\n+\n+srcdir = .\n+\n+# Nothing to do...\n+all:\n+\n+clean:\n+\t-rm -f *.o *.diff *~ *.bad core *.x\n+\n+distclean:\tclean\n+\t-rm -f Makefile config.status"}, {"sha": "c6cacc6757d141fd73a1f989a38faab085f0e561", "filename": "gcc/testsuite/g++.old-deja/configure.in", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fconfigure.in?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,15 @@\n+# This file is a shell script fragment that supplies the information\n+# necessary to tailor a template configure script into the configure\n+# script appropriate for this directory.  For more information, check\n+# any existing configure script.\n+\n+srctrigger=old-deja.exp\n+srcname=\"DejaGnu\"\n+\n+# per-host:\n+\n+# per-target:\n+\n+target_makefile_frag=../config/mt-${target_alias}\n+\n+# post-target:"}, {"sha": "7abff1dbead41095ef3dce4c40d10c3cd9141790", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/.cvsignore", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F.cvsignore", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F.cvsignore", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F.cvsignore?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,2 @@\n+Makefile\n+config.status"}, {"sha": "fecbd576b799073d65c193e56a2a2dabd7ce8aee", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/p12475.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp12475.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp12475.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp12475.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,5 @@\n+// Build don't link:\n+// prms-id: 12475\n+\n+enum huh { start =-2147483648, next };\n+"}, {"sha": "2e86f6ff10582f629ae5854e1266e4f4b53f3c21", "filename": "gcc/testsuite/g++.old-deja/g++.bob/array1.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Farray1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Farray1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Farray1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link: \n+char *stuff() {\n+   char array[10]; // WARNING - \n+\n+   return array;\n+}"}, {"sha": "8ddeba8c83d9eeada16035b67f70c86ecb0b8f40", "filename": "gcc/testsuite/g++.old-deja/g++.bob/array2.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Farray2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Farray2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Farray2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,4 @@\n+// Build don't link: \n+extern const int a[];\n+extern const int a[];\n+extern const int a[];"}, {"sha": "a8e5f7b7621620b98d6b54cecee28f220295c125", "filename": "gcc/testsuite/g++.old-deja/g++.bob/case1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fcase1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fcase1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fcase1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,13 @@\n+// prms-id: 9028\n+class Foo;\n+\n+int main()\n+{\n+  int i=0;\n+  switch (i) \n+    {\n+    case ((Foo *)0): // ERROR - \n+    case ((Foo *)1): // ERROR - \n+      break;\n+    }\n+}"}, {"sha": "d6f1165061a2ffc4c509f786a6b44560f89f4e68", "filename": "gcc/testsuite/g++.old-deja/g++.bob/cond1.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fcond1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fcond1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fcond1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,31 @@\n+// Build don't link: \n+// prms-id: 9866\n+class TChar \n+\t{ \n+public: \n+\texplicit inline TChar(unsigned int aChar); \n+\tinline operator unsigned int() const; \n+private: \n+\tunsigned int iChar; \n+   }; \n+inline TChar::TChar(unsigned int aChar) \n+\t: iChar(aChar) \n+\t{} \n+inline TChar::operator unsigned int() const \n+\t{return(iChar);} \n+ \n+class TDes8 \n+   { \n+public: \n+   inline const unsigned char &operator[](int anIndex) const; \n+\tconst unsigned char &AtC(int anIndex) const; \n+   }; \n+ \n+inline const unsigned char &TDes8::operator[](int anIndex) const \n+\t{return(AtC(anIndex));} \n+ \n+ \n+void doExponent(TDes8 &aDigBuf) \n+            { \n+            2 ? TChar(aDigBuf[2]) : '0';\n+            } "}, {"sha": "d4fc3210d678850efe6ee4b318fcb46a4371eaf3", "filename": "gcc/testsuite/g++.old-deja/g++.bob/delete1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fdelete1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fdelete1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fdelete1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,22 @@\n+// prms-id: 7330\n+#include <stddef.h>\n+int size = 0; \n+\n+struct X {\n+    int x;\n+    void *operator new[](size_t sz)   {\n+         size = sz;\n+         return 0;  \n+    }\n+    void operator delete[] (void *vp) { ::delete[] vp; }  \n+};\n+int main()\n+{\n+     X (*px) [10];\n+\n+     px = new X[5][10];\n+\n+     delete [] px;\n+\n+     return 0;\n+}"}, {"sha": "6b91adc36e3649fef340bcde3051e39cc9481dd7", "filename": "gcc/testsuite/g++.old-deja/g++.bob/extern_C.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fextern_C.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fextern_C.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fextern_C.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,9 @@\n+// Build don't link: \n+extern \"C\" {\n+  class A {\n+  public:\n+    void a();\n+  };\n+};\n+\n+void A::a() {}"}, {"sha": "1782f08913ab239ca1cad2d0f2c68131655cb949", "filename": "gcc/testsuite/g++.old-deja/g++.bob/friend1.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Ffriend1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Ffriend1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Ffriend1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,4 @@\n+class C {\n+public:\n+  static friend int f(); // ERROR - \n+};"}, {"sha": "fb08c63e9c37704c4af226de91d85e1692c9f432", "filename": "gcc/testsuite/g++.old-deja/g++.bob/incomplete-cast1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fincomplete-cast1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fincomplete-cast1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fincomplete-cast1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,16 @@\n+// prms-id: 5274\n+class VHDLIdentifier;\n+\n+class VHDLPackageProtoRep {\n+public:\n+    int thing();\n+private:\n+    virtual VHDLIdentifier &actual_name() ;\n+};\n+extern void form(const char *format, ... );\n+int\n+VHDLPackageProtoRep::thing()\n+{\n+    form(\"package `%s'\", (char *)actual_name()); // ERROR - can't convert from incomplete type\n+    return 0;\n+}"}, {"sha": "4e77de34884ab14b7c88fce8365a895cd4fcb8be", "filename": "gcc/testsuite/g++.old-deja/g++.bob/inherit1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Finherit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Finherit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Finherit1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,25 @@\n+// Build don't link: \n+class A {\n+char str[10];\n+public:\n+    char* m1 () { return str;};\n+};\n+\n+class C : public A {\n+public:\n+};\n+\n+class B : public A {\n+public:\n+    char* m1 () { C::m1(); return \"\"; } // ERROR - \n+};\n+\n+main () {\n+A a;\n+B b;\n+C c;\n+\n+a.m1();\n+c.m1();\n+b.m1();\n+}"}, {"sha": "52d35b0462c5d1359ec62a487d239fd98ea72d8d", "filename": "gcc/testsuite/g++.old-deja/g++.bob/inherit2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Finherit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Finherit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Finherit2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,22 @@\n+// Build don't link:\n+class A {\n+public:\n+  void z();\n+  A(void) {}\n+private:\n+  A(const A &) { abort(); } // ERROR - \n+  const A& operator =(const A &) { abort(); }\n+};\n+\n+class B : public A {\n+public:\n+  B(void) {}\n+};\n+\n+void f(B b) {\n+};\n+\n+void g() {\n+  B h;\n+  f(h); // ERROR - \n+}"}, {"sha": "b5b7a762e0fc85cc2ebf6b17486ea41110aa06bf", "filename": "gcc/testsuite/g++.old-deja/g++.bob/nested1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fnested1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fnested1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fnested1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link: \n+  class A {\n+    class B {\n+      typedef long T;\n+      int i;\n+    };\n+  };\n+  class C {\n+    class B {\n+      typedef float T;\n+      int i;\n+    };\n+  };\n+\n+C::B::T a;"}, {"sha": "27ae03e4a05ed149d939fedd5d0e02d5aadfbb3a", "filename": "gcc/testsuite/g++.old-deja/g++.bob/packed1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fpacked1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fpacked1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fpacked1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,16 @@\n+main() {\n+  struct s\n+    {\n+      int a;\n+      short b;\n+    } __attribute__((packed)) t;\n+\n+  if (sizeof (t) != (sizeof(int)+sizeof(short))) \n+    {\n+      return 1;\n+    }\n+  else \n+    {\n+      return 0;\n+    }\n+}"}, {"sha": "e83f3e40b7330af7482dc273179626a9bfa71cf9", "filename": "gcc/testsuite/g++.old-deja/g++.bob/protected1.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fprotected1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fprotected1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fprotected1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,41 @@\n+// Build don't link: \n+class A {\n+public:\n+  int i;\n+  A(int j) : i(j){}\n+};\n+\n+class B : protected A {\n+public:\n+  B(int j) : A(j){}\n+  void f(){\n+    A k(*this);\n+  }\n+};\n+\n+class C : protected B {\n+public:\n+  C(int j) : B(j){}\n+  void f();\n+\n+  void g(){\n+    A k(i); \n+  }\n+};\n+\n+\n+class D : public C {\n+public:\n+   D(int w) : C(i) {}\n+   void j() { A k(*this); }\n+   void h() { i=3; }\n+};\n+\n+void C::f() {\n+   A k(*this);\n+}\n+\n+B b(3);\n+main() {\n+ A *z = &b; // ERROR - \n+}"}, {"sha": "a8e6b88bd93acd39e23bd0b7e944a1badb10b0ba", "filename": "gcc/testsuite/g++.old-deja/g++.bob/static1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fstatic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fstatic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fstatic1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,12 @@\n+// Build don't link: \n+class A {\n+  public:\n+    static int a;\n+};\n+\n+class B : public A {\n+  public:\n+    static int b;\n+};\n+\n+int B::a; // ERROR - "}, {"sha": "4a22f086130d667d78cab6f7d60915dafc9a1636", "filename": "gcc/testsuite/g++.old-deja/g++.bob/template1.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Ftemplate1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Ftemplate1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Ftemplate1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,27 @@\n+// Build don't link:\n+// prms-id: 10038\n+template < class Referencee >\n+class Referencer\n+{\n+public:\n+    Referencer (Referencee const * pReferencee);\n+};\n+\n+template <class T>\n+class Array\n+{\n+public:\n+    int addElement (T const & e);\n+    int addElement ();\n+};\n+\n+class ScenarioGroup;\n+\n+class ScenarioSet : public Array< Referencer<ScenarioGroup> >\n+{\n+    typedef Array< Referencer<ScenarioGroup> > arrayBase;\n+    void addElement(ScenarioGroup *group)\n+\t{\n+\t    arrayBase::addElement(group);\n+\t}\n+};"}, {"sha": "5663da84be26aa505792188c87d0ab772d177bcf", "filename": "gcc/testsuite/g++.old-deja/g++.bob/template2.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Ftemplate2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Ftemplate2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Ftemplate2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,49 @@\n+// Build don't link:\n+// prms-id: 10046\n+template <class T>\n+class Array\n+{\n+public:\n+    T const & operator[] (int i) const;\n+};\n+\n+class Referenceable {};\n+\n+template < class Referencee >\n+class Referencer\n+{\n+public:\n+    operator Referencee *() const { return i_referencee; }\n+\n+protected:\n+    Referencee* i_referencee;\n+};\n+\n+class ScenarioGroup {};\n+\n+class ScenarioSpace;\n+\n+class ScenarioSet : public Referenceable,\n+\t\t    public Array< Referencer<ScenarioGroup> >\n+{\n+public:\n+    ScenarioSet& operator=(ScenarioSet const & s);\n+};\n+\n+class ScenarioSpace : public Referenceable,\n+\t\t      public Array< Referencer<ScenarioSet> >\n+{\n+};\n+\n+class ScenarioSetNameSelector\n+{\n+public:\n+    bool operator () (ScenarioSpace &space)\n+    {\n+\tint idx;\n+\ti_set = space[idx];\n+\treturn false;\n+    }\n+private:\n+    ScenarioSet *i_set;\n+};"}, {"sha": "17378425a26e351f3b4ee95436b93706a6b8e360", "filename": "gcc/testsuite/g++.old-deja/g++.bob/template3.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Ftemplate3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Ftemplate3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Ftemplate3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,48 @@\n+// Build don't link: \n+// prms-id: 9979\n+\n+template < class Referencee >\n+class Referencer\n+{\n+public:\n+    Referencer() {}\n+};\n+\n+template <class T>\n+class List\n+{\n+public:\n+    List() {}\n+};\n+\n+template<class T, class KEY>\n+class Dictionary\n+{\n+public:\n+    Dictionary() : i_buckets (new List<T>[1234]) {}\n+    ~Dictionary() { delete [] i_buckets; }\n+\n+    List<T> *\t\ti_buckets;\n+};\n+\n+class Exchangeable {};\n+class ExchangeableHandle {};\n+\n+class ExchangeableList\n+    : public Dictionary<Referencer<Exchangeable>, ExchangeableHandle>\n+{\n+public:\n+    ExchangeableList(int size=0);\n+};\n+\n+class ObjectExchange\n+{\n+public:\n+    ObjectExchange() {};\n+\n+    ExchangeableList\ti_theWatchList; // Instruments being monitored\n+};\n+\n+main()\n+{\n+}"}, {"sha": "8d86fa37ab67c62a6157dc3557e432fc3ae09c0e", "filename": "gcc/testsuite/g++.old-deja/g++.bob/template4.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Ftemplate4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Ftemplate4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Ftemplate4.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,20 @@\n+// prms-id: 10166\n+\n+template <class A>\n+class B {\n+  public:\n+    int f() {\n+      for(int x=0;x<10;x++) {\n+        continue;\n+        return 1;\n+     }\n+     return 0;\n+   }\n+  private:\n+    A w;\n+};\n+\n+main() {\n+  B<int> c;\n+  return c.f();\n+}"}, {"sha": "81119572caaab1ec5a369ec20d69c0cf3631b706", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/README", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2FREADME?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,41 @@\n+Note: nest4 misses a syntax error\n+\n+abstract\t- abstract functions\n+alignof\t\t- gcc alignof builtin\n+ambiguity\t- diagnosing ambiguities\n+arm\t\t- ARM cases\n+array-refs\t- arrays of references\n+bit-fields\t- bit fields\n+chainon\t\t- deaths cuz we call chainon() incorrectly\n+copy\t\t- copy constructors\n+crash\t\t- old compiler crashes/aborts\n+cvt\t\t- user-defined conversions\n+def-fns\t\t- default function generation (in add'n to copy)\n+enum-clash\t- int vs enum\n+enum\t\t- enumerated types\n+err-msg\t\t- error messages\n+friend\t\t- dealing with friend functions and classes\n+groff\t\t- crashes derived from groff code\n+init\t\t- initialization bugs\n+label\t\t- handling labels\n+line\t\t- line numbers in error messages\n+misc\t\t- miscellaneous tests that didn't fit another category\n+nest\t\t- nested types\n+new-array\t- doing new of an array\n+new\t\t- generic operator new bugs\n+operators\t- tests for various overloaded operators\n+parse\t\t- parser bugs\n+prepost\t\t- prefix/postfix operator ++/--\n+ptolemy\t\t- bugs derived from ptolemy\n+recurse\t\t- infinite recursion in the compiler\n+redecl\t\t- handling redeclarations\n+scope\t\t- managing scopes\n+shadow\t\t- shadowing of params, etc\n+sizeof\t\t- ARM compliance w/ sizeof operator\n+sorry\t\t- old \"sorry, not implemented\" messages\n+static\t\t- handling static data\n+template\t- template bugs\n+union\t\t- handling unions\n+visibility\t- access control and visibility checking\n+warnings\t- warning messages\n+"}, {"sha": "b9cd9c5733b0ce50fabb175048b67c296e4fa137", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/abstract1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fabstract1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fabstract1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fabstract1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,25 @@\n+// Build don't link: \n+// GROUPS passed abstract-functions\n+class O\n+{\n+public:\n+   virtual int c()=0;\n+};\n+\n+class I: public O\n+{\n+};\n+\n+class S: public virtual I\n+{\n+public: \n+  int c();\n+  virtual int v()=0;\n+};\n+\n+class D: public S\n+{\n+   int v();\n+};\n+\n+D *p=new D();"}, {"sha": "0272c7ae1a9097a4ba9cfba8f7232dc2a0a61d8d", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/access1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Faccess1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Faccess1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Faccess1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,23 @@\n+// Build don't link: \n+// GROUPS passed access-control\n+class Base\n+{\n+protected:\n+  virtual void DoSomething() = 0;\n+};\n+\n+class Fibber : public Base\n+{\n+public:\n+  void DoBP() {\n+    DoSomething();\n+  }\n+};\n+\n+class Flat : public virtual Fibber\n+{\n+public:\n+  void DoIt() {\n+    DoSomething();\n+  }\n+};"}, {"sha": "1449aded826070cdd9400b9f37bf80a07f94eb0b", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/alignof.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Falignof.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Falignof.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Falignof.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,13 @@\n+// Build don't link: \n+// GROUPS passed extensions\n+struct bar { int bit : 1; };\n+\n+void foo (int *r, bar t)\n+{\n+  // doing alignof on a bit-field should be illegal\n+  __alignof__ (t.bit);// ERROR - .*\n+\n+  // both of these (a regular ref and an INDIRECT_REF) should work\n+  __alignof__ (r);\n+  __alignof__ (*r);\n+}"}, {"sha": "c6d6fcbd4ad373405309bdd87960a9097bfd55a9", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/ambiguity1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fambiguity1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fambiguity1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fambiguity1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,17 @@\n+// Build don't link: \n+// GROUPS passed ambiguity\n+struct A {\n+  A (int);\n+};\n+\n+struct B {\n+  B (int);\n+};\n+\n+void myfunc (const A& t0); // ERROR - \n+void myfunc (const B& t0); // ERROR - \n+\n+int main ()\n+{\n+   myfunc(1);   // ERROR - ambiguous call\n+}"}, {"sha": "86b7ce3fabcdeb5698a8cad3e2f3b5a583992839", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/anon-union1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fanon-union1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fanon-union1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fanon-union1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,7 @@\n+// Build don't link: \n+// GROUPS passed anonymous-unions\n+static union {\n+        char*   uC;\n+private:\n+        int     uI;// ERROR - .*private member.*\n+};"}, {"sha": "74091f8cce5a3e15a16047c3e4bd5cd179ce897e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/arm1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farm1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farm1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farm1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link: \n+// Special g++ Options: -pedantic-errors\n+// GROUPS passed ARM-compliance\n+// ARM $5.7, it's illegal to do math on a `void*'.\n+\n+main()\n+{\n+  void *p;\n+  ++p;// ERROR - .*\n+}"}, {"sha": "62bdc3d2a392c9ef4ab2ba089b79112f3d131e3c", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/arm2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farm2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farm2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farm2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,19 @@\n+// Build don't link: \n+// GROUPS passed ARM-compliance\n+// ARM 9.4 ``There cannot be a static and a nonstatic member function\n+//\t     with the same name and the same argument types.''\n+//\n+// The trick is to make sure it's caught with both orders (static,\n+// then normal, and vice-versa.\n+\n+class X {\n+public:\n+   int foo();\n+  static int foo();\t// error: redeclaration// ERROR - .*\n+};\n+\n+class Y {\n+public:\n+   static int foo();\n+  int foo();\t\t// error: redeclaration// ERROR - .*\n+};"}, {"sha": "c352bfa57f034ea6e785ca87eb8a08a095093ae2", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/arm3.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farm3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farm3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farm3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,9 @@\n+// Build don't link: \n+// GROUPS passed initialization\n+// ARM $11.4: A function first declared in a friend decl is equivalent\n+// to an extern decl, so the below is illegal.\n+\n+class X {\n+      friend g(); // ERROR - previous declaration\n+};\n+static g() { return 1; }// ERROR - previously declared"}, {"sha": "0eaa45c7f1df3e5331c71010743bb30fe893b0be", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/array-refs.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farray-refs.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farray-refs.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farray-refs.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link: \n+// GROUPS passed arm\n+int a, b;\n+\n+// declaring an array of references should be illegal\n+int & v[ 2] = { a, b};// ERROR - .*"}, {"sha": "64924639f6f4155161a312a521734497a1c66d37", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/array1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farray1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farray1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farray1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,7 @@\n+// Build don't link: \n+// Special g++ Options: -fconserve-space -fcommon\n+// GROUPS passed array-bindings\n+// excess errors test - XFAIL sparc64-*-* \n+extern \"C\" void printf (char *, ...);\n+char array[(unsigned) 0x90000000];// ERROR -  overflow in array dimension.* , XFAIL sparc64-*-* alpha*-*-*\n+int main () { printf (\"PASS\\n\"); return 0; }"}, {"sha": "a388a61d9447de4d8a81143d2223392621997436", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/asm-extn1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fasm-extn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fasm-extn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fasm-extn1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link: \n+// Special g++ Options: -S\n+// GROUPS passed asm-extension\n+// excess errors test - XFAIL a29k-*-*\n+// This used to crash because c_expand_asm_keyword didn't know what to\n+// do with this.  The parser rules were changed to accept an expr, instead\n+// of a stmt.\n+\n+extern void traptable(void);\n+\n+main()\n+{\n+  asm(\"wr    %0,%%tbr\" : : \"r\" (traptable));\n+}"}, {"sha": "76f4ac33ac235f3eb4eb027acc7af2742aef37f6", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/bit-fields1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fbit-fields1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fbit-fields1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fbit-fields1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,5 @@\n+// Build don't link: \n+// GROUPS passed bit-fields\n+struct bar {\n+  int : 2 = 1;// ERROR - .*\n+};"}, {"sha": "dae2726b89c68d1d3c3d51fa555bc7d25055af02", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/bit-fields2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fbit-fields2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fbit-fields2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fbit-fields2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,13 @@\n+// Build don't link: \n+// GROUPS passed bit-fields\n+\tstruct {\n+\t    char c;\n+\t    int i:8;\n+\t} s;\n+\t\n+\tmain()\n+\t{\n+\t    int &ir = s.i;\n+\t    int *ip = &s.i;// ERROR - .* , XFAIL *-*-*\n+\t    ir = 10;\n+\t}"}, {"sha": "bab925521ce5ef88921079989799eb0aa2b4817b", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/bool1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fbool1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fbool1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fbool1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link: \n+// GROUPS passed boolean\n+main()\n+{\n+    typedef char Boolean; // Instrinsic.h\n+    Boolean c = false;\n+    bool b = true;\n+\n+    if (!c != !b)\n+\t;\n+}"}, {"sha": "84dd634d9cff6b67c3a05dcaca93bcc98be9aa8f", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/code-gen1.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcode-gen1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcode-gen1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcode-gen1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,40 @@\n+// GROUPS passed code-generation\n+// Check that sub-word sized structs/classes are passed correctly\n+// if the struct/class has a constructor (i.e. ANY constructor).\n+\n+extern \"C\" void printf (char *, ...); \n+\n+struct base {\n+\tunsigned int f1 : 8;\n+\tunsigned int f2 : 8;\n+\n+\tbase (int ii)\n+\t{\n+\t}\n+};\n+\n+base global_base (7);\n+\n+int test2 (base formal_base);\n+\n+int main ()\n+{\n+\tglobal_base.f1 = 0x55;\n+\tglobal_base.f2 = 0xee;\n+\n+\tif (test2 (global_base) == 0)\n+\t  printf (\"PASS\\n\");\n+\telse\n+\t  printf (\"FAIL\\n\");\n+\n+\treturn 0;\n+}\n+\n+int test2 (base formal_base)\n+{\n+\tif (formal_base.f1 != global_base.f1)\n+\t\treturn -1;\n+\tif (formal_base.f2 != global_base.f2)\n+\t\treturn -1;\n+\treturn 0;\n+}"}, {"sha": "133755e894db4ecae45f6a3787154a12c909df56", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/code-gen2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcode-gen2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcode-gen2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcode-gen2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,18 @@\n+// GROUPS passed code-generation\n+// Check that declarations with initializations are executed\n+// correctly.\n+\n+extern \"C\" void printf (char *, ...); \n+\n+int main ()\n+{\n+\tchar buff[40] ;\n+\tchar *tmp = &buff[0];\t// also fails for char *tmp = buff;\n+\n+\tif ((unsigned int) tmp != (unsigned int) &buff[0])\n+\t  printf (\"FAIL\\n\");\n+\telse\n+\t  printf (\"PASS\\n\");\n+\n+\treturn 0;\n+}"}, {"sha": "6d73bd2336e4fbe4e0859115c2070838f5305f2e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/code-gen3.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcode-gen3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcode-gen3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcode-gen3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,34 @@\n+// GROUPS passed code-generation\n+// Check that passing things which are not a multiple of\n+// 4 bytes in size doesn't mess up other subsequent parameters.\n+\n+extern \"C\" void printf (char *, ...); \n+\n+struct base {\n+\tint f1 : 8;\n+\tint f2 : 8;\n+};\n+\n+base global_base;\n+\n+int val1;\n+\n+int test2 (struct base formal_base, int v1);\n+\n+int main ()\n+{\n+\tval1 = 0x5e5e;\n+\treturn test2 (global_base, val1);\n+}\n+\n+int test2 (struct base formal_base, int v1)\n+{\n+\tformal_base.f1 = formal_base.f2;\t// prevent warnings\n+\n+\tif (v1 != 0x5e5e)\n+\t  printf (\"FAIL\\n\");\n+\telse\n+\t  printf (\"PASS\\n\");\n+\n+\treturn 0;\n+}"}, {"sha": "e29b16a2b09f4df04b20f9c44e04487e3b6142d9", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/code-gen4.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcode-gen4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcode-gen4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcode-gen4.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,31 @@\n+// Special g++ Options: -O\n+// GROUPS passed code-generation\n+// Options: -O\n+//\n+// Check that when an int value is assigned to a short int, the proper\n+// half of the int (i.e. the low order half) ends up in the short.\n+//\n+// This fails with 1.32.0 with -O and f1() is inline.\n+//\n+// Workaround - declare \"f1_arg\" as type \"short int\".\n+\n+extern \"C\" void printf (char *, ...); \n+\n+short int v2;\n+\n+long v1 = 0x11117777;\n+\n+inline void f1 (long f1_arg)\n+{\n+\tv2 = f1_arg;\n+}\n+\n+int main ()\n+{\n+\tf1 (v1);\n+\n+\tif (v2 != 0x00007777)\n+\t  printf (\"FAIL\\n\");\n+\telse\n+\t  printf (\"PASS\\n\");\n+}"}, {"sha": "0d59b5685afba232dae54202883158eae65c6c2c", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/code-gen5.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcode-gen5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcode-gen5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcode-gen5.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,57 @@\n+// Special g++ Options: -fthis-is-variable\n+// GROUPS passed code-generation\n+// Check that the \"this\" pointer is zero when a method is\n+// called for an object pointed to by a null pointer.\n+\n+// Normally, the \"__builtin_new\" operation which actually\n+// allocates objects in heap space is *not* called at the\n+// actual point of the \"new\" keyword.  Rather, a check is\n+// made within each constructor and if the \"this\" pointer\n+// value passed in is zero, then the actual allocation of\n+// memory (via __builtin_new) is done at that point (i.e.\n+// at the very beginning of the constructor).\n+\n+// A special trick allows one to subvert this mechanism.\n+// Specifically, if a given constructor contains a statement\n+// like: \"this = this\", then no attempt will be made to\n+// implicitly call __builtin_new within that constructor.\n+\n+extern \"C\" void printf (char *, ...); \n+\n+struct base {\n+\tint member;\n+\n+\tbase ();\n+\tvoid member_function ();\n+};\n+\n+base *base_pointer_1 = 0;\n+base *base_pointer_2 = 0;\n+\n+int errors = 0;\n+\n+int main ()\n+{\n+\t//base_pointer_2 = new base();\n+\tbase_pointer_1->member_function ();\n+\n+\tif (errors)\n+\t  printf (\"FAIL\\n\");\n+\telse\n+\t  printf (\"PASS\\n\");\n+\n+\treturn 0;\n+}\n+\n+base::base ()\n+{\n+\tthis = this;\n+\tif ((int) this != 0)\n+\t\terrors++;\n+}\n+\n+void base::member_function ()\n+{\n+\tif ((int) this != 0)\n+\t\terrors++;\n+}"}, {"sha": "ea5d730949d731e9731323963a57f5f791be220d", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/code-gen6.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcode-gen6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcode-gen6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcode-gen6.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,54 @@\n+// GROUPS passed code-generation\n+// Check that type float parameters can be correctly passed to\n+// methods.\n+\n+extern \"C\" void printf (char *, ...); \n+\n+class tres_floats {\n+\tfloat ff1;\n+\tfloat ff2;\n+\tfloat ff3;\n+public:\n+\ttres_floats (float f1, float f2, float f3);\n+\tfloat get_f1 ();\n+\tfloat get_f2 ();\n+\tfloat get_f3 ();\n+};\n+\n+float v1 = 1.2345;\n+float v2 = 3.14159;\n+float v3 = 0.707;\n+\n+int main ()\n+{\n+\ttres_floats tf (v1, v2, v3);\n+\n+\tif ((tf.get_f1() != v1) || (tf.get_f2() != v2) || (tf.get_f3() != v3))\n+\t  printf (\"FAIL\\n\");\n+\telse\n+\t  printf (\"PASS\\n\");\n+\n+\treturn 0;\n+}\n+\n+tres_floats::tres_floats (float f1, float f2, float f3)\n+{\n+\tff1 = f1;\n+\tff2 = f2;\n+\tff3 = f3;\n+}\n+\n+float tres_floats::get_f1 ()\n+{\n+\treturn ff1;\n+}\n+\n+float tres_floats::get_f2 ()\n+{\n+\treturn ff2;\n+}\n+\n+float tres_floats::get_f3 ()\n+{\n+\treturn ff3;\n+}"}, {"sha": "38242fbb8be8dcd5f74323a92ce8b6cea2c1aa78", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/copy1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,21 @@\n+// GROUPS passed copy-ctors\n+extern \"C\" void printf (char *, ...);\n+int count = 0;\n+\n+class C {\n+public:\n+  C (int) { count++; }\n+  operator int () { return 0; }\n+};\n+\n+\n+main ()\n+{\n+  C c1 (1);\n+  C c2 (c1);\n+\n+  if (count != 1)\n+    printf (\"FAIL\\n\");\n+  else\n+    printf (\"PASS\\n\");\n+}"}, {"sha": "9f93755dae48bedd822496eaa889301b1ef44543", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/copy2.C", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,79 @@\n+// GROUPS passed copy-ctors\n+/*\n+The old g++ output is\n+\n+Item()\n+Compound()\n+Pre foo\n+foo\n+~Compound()\n+~Item()\n+Post foo\n+~Compound()\n+~Item()\n+\n+The output should be something like (produced from ATT 2.1)\n+\n+Item()\n+Compound()\n+Pre foo\n+Item(const Item& i)    <------ missing above\n+foo\n+~Compound()\n+~Item()\n+Post foo\n+~Compound()\n+~Item()\n+\n+*/\n+\n+extern \"C\" void printf (char *, ...);\n+extern \"C\" void exit (int);\n+\n+int count = 0;\n+\n+void\n+die (int x)\n+{\n+  if (x != ++count)\n+    {\n+      printf (\"FAIL\\n\");\n+      exit (1);\n+    }\n+}\n+  \n+\n+class Item {\n+ public:\n+  Item() { die (1); }\n+  Item(const Item& i) { die (4); }\n+  ~Item() { count++; if (count != 7 && count != 10) die (-1); }\n+};\n+\n+\n+class Compound {\n+  Item i;\n+ public:\n+  Compound() { die (2); }\n+  ~Compound() { count++; if (count != 6 && count != 9) die (-1); }\n+};\n+\n+\n+void foo(Compound a)\n+{\n+  die (5);\n+}\n+\n+\n+main()\n+{\n+  Compound a;\n+\n+  die (3);\n+  foo(a);\n+\n+  die (8);\n+\n+  printf (\"PASS\\n\");\n+}\n+"}, {"sha": "28b3306433b5798c04d01485fa3cfcf24f5af3da", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/copy3.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,57 @@\n+// GROUPS passed copy-ctors\n+/*\n+\n+If I compile it with cfront (AT&T C++ Translator 2.00.02 08/25/89) and run it\n+I get:\n+\n+\tA::A()\n+\tA::A(const A&)\n+\tB::Bar()\n+\tA::~A()\n+\tA::~A()\n+\n+If I compile it with g++ (gcc version 2.2.2) and run it I get:\n+\n+\tA::A()\n+\tB::Bar()\n+\tA::~A()\n+\tA::~A()\n+\n+*/\n+extern \"C\" void printf (char *, ...);\n+extern \"C\" void exit (int);\n+\n+int count = 0;\n+\n+void\n+die (int x)\n+{\n+  if (x != ++count)\n+    {\n+      printf (\"FAIL\\n\");\n+      exit (1);\n+    }\n+}\n+  \n+\n+class A {\n+public:\n+  A() { die (1); }\n+  A(const A&) { die (2); }\n+  ~A() { count++; if (count != 4 && count != 5) die (-1); }\n+};\n+\n+class B : public A {\n+public:\n+  void Bar() { die (3); }\n+};\n+\n+void Foo(B b) { b.Bar(); }\n+\n+main()\n+{\n+  B b;\n+  Foo(b);\n+\n+  printf (\"PASS\\n\");\n+}"}, {"sha": "35b539321412dd88362d434d3c9779ef56b0ca3c", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/copy4.C", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy4.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,58 @@\n+// GROUPS passed copy-ctors\n+// Using Cfront 3.0.1 the programm below prints\n+// \n+// \t  A()\n+// \t  A(const A& a)\n+// \t  ~A()\n+// \t  A(A& a)        <---- !!!\n+// \t  ~A()\n+// \t  ~A()\n+// \n+// the g++ 2.2.2 (sparc-sun-sunos4.1) generated code prints\n+// \n+// \t  A()\n+// \t  A(const A& a)\n+// \t  ~A()\n+// \t  A(const A& a)  <---- !!!\n+// \t  ~A()\n+// \t  ~A()\n+\n+extern \"C\" void printf (char *, ...);\n+extern \"C\" void exit (int);\n+\n+int count = 0;\n+\n+void\n+die (int x)\n+{\n+  if (x != ++count)\n+    {\n+      printf (\"FAIL\\n\");\n+      exit (1);\n+    }\n+}\n+\n+class A {\n+public:\n+  A() { die (1); }\n+  A(const A& a) { die (2); }\n+  A(A& a) { die (4); }\n+  ~A() { count++; if (count != 3 && count != 5 && count != 6) die (-1); }\n+};\n+\n+void foo1(const A& a) {\n+  A b = a;\n+}\n+\n+void foo2( A& a) {\n+  A b = a;\n+}\n+\n+int main() {\n+  A a;\n+\n+  foo1(a);\n+  foo2(a);\n+\n+  printf (\"PASS\\n\");\n+}"}, {"sha": "db63d75925bcfb09425a9de9cccebcbb16b8c571", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/copy5.C", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy5.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,84 @@\n+// GROUPS passed copy-ctors\n+/*\n+bad:\n+sibelius402> a.out\n+a=5  a.virtMember()=30\n+BaseClass::Increm --> {i=5, virtMember()=30}\n+a=7  a.virtMember()=30\n+b=7  b.virtMember()=30\n+BaseClass::Increm --> {i=7, virtMember()=999}\n+b=9  b.virtMember()=30\n+sibelius403> \n+\n+ good:\n+\n+sibelius406> a.out\n+a=5  a.virtMember()=30\n+BaseClass::Increm --> {i=5, virtMember()=30}\n+a=7  a.virtMember()=30\n+b=7  b.virtMember()=30\n+BaseClass::Increm --> {i=7, virtMember()=30}\n+b=9  b.virtMember()=30\n+*/\n+\n+extern \"C\" void printf (char *, ...);\n+extern \"C\" void exit (int);\n+\n+void die () { printf (\"FAIL\\n\"); exit (1); }\n+\n+class BaseClass {\n+\n+  friend int operator != (const BaseClass irv, int x);\n+\n+  int i;\n+\n+public:\n+\n+  BaseClass( const BaseClass& ir ) : i(ir.i) {};\n+  BaseClass() : i(5) {};\n+\n+  virtual int virtMember() { return( 999 ); };\n+\n+  void Increm( int r );\n+};\n+\n+void BaseClass::Increm( int r )\n+{\n+  if ((i == 5 && virtMember () == 30)\n+      || (i == 7 && virtMember () == 30))\n+    i += r;\n+  else\n+    die ();\n+};\n+\n+class DerivedClass : public BaseClass {\n+public:\n+  int virtMember() { return( 30 ); };\n+};\n+\n+int operator != (const BaseClass irv, int x) { return irv.i != x; }\n+\n+main ()\n+{\n+    DerivedClass a;\n+\n+    if (a != 5 || a.virtMember () != 30)\n+      die ();\n+\n+    a.Increm(2);\n+\n+    if (a != 7 || a.virtMember () != 30)\n+      die ();\n+\n+    DerivedClass b = a;\n+\n+    if (b != 7 || a.virtMember () != 30)\n+      die ();\n+\n+    b.Increm(2);\n+\n+    if (b != 9 || a.virtMember () != 30)\n+      die ();\n+\n+    printf (\"PASS\\n\");\n+}"}, {"sha": "d15a4beee15882e54370311f6c696e6b9d2dcb89", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/copy6.C", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy6.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,55 @@\n+// GROUPS passed copy-ctors\n+/*\n+g++ 2.3.3 will prefer using type conversions over the\n+implicitly generated copy constructor. This is wrong.\n+If you explicitly define a copy constructor, it will\n+use it. However, the implicit copy constructor MUST be\n+called whenever an explicit one would have been called\n+also. See below: g++ converts from and back into\n+unsigned, instead of using the implicit copy constructor:\n+here is the version:\n+Reading specs from /usr/lib/gcc-lib/i386-linux/2.3.3/specs\n+gcc version 2.3.3\n+ /usr/lib/gcc-lib/i386-linux/2.3.3/cpp -lang-c++ -v -undef -D__GNUC__=2 -D__GNUG__=2 -D__cplusplus -Dunix -Di386 -Dlinux -D__unix__ -D__i386__ -D__linux__ -D__unix -D__i386 -D__linux bug2.cc /usr/tmp/cca02008.i\n+GNU CPP version 2.3.3 (80386, BSD syntax)\n+ /usr/lib/gcc-lib/i386-linux/2.3.3/cc1plus /usr/tmp/cca02008.i -quiet -dumpbase bug2.cc -version -o /usr/tmp/cca02008.s\n+GNU C++ version 2.3.3 (80386, BSD syntax) compiled by GNU C version 2.3.3.\n+ as -o /usr/tmp/cca020081.o /usr/tmp/cca02008.s\n+ ld /usr/lib/crt0.o -nojump -L/usr/lib/gcc-lib/i386-linux/2.3.3 /usr/tmp/cca020081.o -lg++ -lgcc -lc -lgcc\n+\n+Ok, and here is the output:\n+test k: constructing from scratch\n+test l=k: type conversion into unsigned\n+constructing from unsigned\n+\n+*/\n+\n+extern \"C\" void printf (char *, ...);\n+extern \"C\" void exit (int);\n+\n+int count = 0;\n+\n+void die () { printf (\"FAIL\\n\"); exit (1); }\n+\n+struct test {\n+\ttest() { if (count != 0) die (); }\n+\n+\ttest(unsigned) {\n+\t  die ();\n+\t}\n+\toperator unsigned() {\n+\t  die ();\n+\t  return 0;\n+\t}\n+};\n+\n+int\n+main() {\n+  test k;\n+  test l=k;\n+\n+  printf (\"PASS\\n\");\n+\n+  return 0;\n+}\n+"}, {"sha": "c98d77f6d125e8e71fc21b2fa8943a167e5684fe", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/copy7.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy7.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,29 @@\n+// GROUPS passed copy-ctors\n+extern \"C\" void printf (char *, ...);\n+extern \"C\" void exit (int);\n+\n+void die () { printf (\"FAIL\\n\"); exit (1); }\n+\n+class B {\n+public:\n+  B() {}\n+  B(const B &) { printf (\"PASS\\n\"); exit (0); };\n+private:\n+    int x;\n+};\n+\n+class A : public B {\n+public:\n+    A() {}\n+\n+  A(const B &) { printf (\"FAIL\\n\"); exit (1); }\n+};\n+\n+main()\n+{\n+    A a;\n+    A b(a);\n+\n+    printf (\"FAIL\\n\");\n+    return 0;\n+}"}, {"sha": "fe248bae34d764b35fcaac714385e0df3ae104c4", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/copy8.C", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy8.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,67 @@\n+// GROUPS passed copy-ctors\n+/*\n+This report is for GCC 2.3.3 running on a Sun/4.  The bug is that when\n+a class instance is passed-by-value, GCC does not correctly copy the value.\n+At the end of this report is an example program that demonstrates the bug.  \n+It should print:\n+\n+\tconstruct A('x')\n+\tcopy A('x')\n+\tdestruct A('x')\n+\tdestruct A('x')\n+\n+and in fact does for IBM's xlC C++.  However, for GCC 2.3.3, it fails\n+to print the second line [\"copy A('x')\"], which indicates that it failed\n+to call the copy-constructor for class A when it should have.  Below is a \n+typescript that lists the program, shows how I compiled it, and shows the \n+incorrect output.\n+*/\n+\n+extern \"C\" void printf (char *, ...);\n+extern \"C\" void exit (int);\n+\n+int count = 0;\n+\n+void\n+die (int x)\n+{\n+  if (x != ++count)\n+    {\n+      printf (\"FAIL\\n\");\n+      exit (1);\n+    }\n+}\n+\n+class A { // Class with explicit & instrumented copy-constructor and destructor.\n+public:\n+    const char * id;\n+    A( const char * id1 ) : id(id1) { die (1); }\n+\n+    // Copy constructor\n+    A( const A& a ) : id(a.id) { die (2); }\n+\n+    // Destructor\n+    ~A() { count++; if (count != 3 && count != 4) die (-1); }\n+};\n+\n+class X { // Class without explicit copy-constructor\n+private:\n+    A a;\n+public:\n+    X( const char * id ) : a(id) {}\n+};\n+\n+void Func( X x ) {      // Function with call-by-value argument\n+}\n+\n+int\n+main() {\n+    X x(\"x\");           // Construct instance of x.\n+\n+    // The next line should call the copy-constructor for X since x is\n+    // being passed by value.  For GCC 2.3.3 on a Sun/4, it does not.\n+    Func(x);\n+\n+    printf (\"PASS\\n\");\n+    return 0;\n+}"}, {"sha": "9c5114a322fd382df3de05c45e1536480465b526", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/copy9.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcopy9.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,40 @@\n+// GROUPS passed copy-ctors\n+#include <iostream.h>\n+\n+// token types: from state parser\n+const int T_EOF = 257;\n+const int T_ERROR = 258;\n+const int T_Float = 259;\n+const int T_Int = 260;\n+const int T_ID = 261;\n+const int T_STRING = 262;\n+\n+class Complex;\n+class State;\n+\n+// token, from state parser.\n+class ParseToken {\n+public:\n+\tint tok;\n+\tunion {\n+\t\tchar cval;\n+\t\tconst char *sval;\n+\t\tint intval;\n+\t\tdouble  doubleval;\n+\t\tComplex* Complexval;\n+\t\tconst State*  s;\n+\t}; \n+\tParseToken () { tok = 0; intval = 0;}\n+};\n+\n+main () {\n+\tParseToken a;\n+\ta.tok = T_Float;\n+\ta.doubleval = 23.2;\n+\tParseToken b(a);\n+\n+\tif (b.doubleval == 23.2)\n+\t  cout << \"PASS\\n\";\n+\telse\n+\t  cout << \"FAIL\\n\";\n+}"}, {"sha": "66de235b4843058869a91e14fd859d2b76dcb070", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash1.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,44 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class D_Interval;\n+\n+class Date\n+{\n+ public:\n+  Date(const D_Interval*,const Date&);\n+private:\n+  const D_Interval* interval;\n+};\n+\n+class Time_Interval\n+{\n+ public:\n+   Time_Interval(const Date& start,const Date& stop);\n+   const Date& Start() const { return start; }\n+   const Date& Stop() const { return stop; }\n+ private:\n+   Date start;\n+   Date stop;\n+};\n+\n+class Dated_Data\n+{\n+ public:\n+   Dated_Data(const Time_Interval& dates);\n+   virtual ~Dated_Data();\n+   Time_Interval Dates() const { return dates; }\n+ private:\n+   Time_Interval dates;\n+};\n+\n+class Raw_Data : public Dated_Data\n+{\n+ public:\n+   Raw_Data(const Dated_Data *source,const D_Interval& period);\n+};\n+\n+Raw_Data::Raw_Data(const Dated_Data *source,const D_Interval& period)\n+     : Dated_Data(Time_Interval(Date(&period,source->Dates().Start()),\n+\t\t\t\tDate(&period,source->Dates().Stop())))\n+{\n+}"}, {"sha": "6680718bad63fd26ba80253ea95bdd21f3139c66", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash10.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash10.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,28 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class word\n+{\n+  unsigned char b1, b2;\n+public:\n+  word (unsigned int i = 0) { b1 = i & 0xff; b2 = (i & 0xff00) >> 8; }\n+  operator unsigned int () { return (b2 <<  8) + b1; }\n+};\n+\n+class just_another\n+{\n+  int foo;\n+  char bar[23];\n+};\n+\n+int mumble(word w)\n+{\n+  just_another *jap;\n+  unsigned bar;\n+\n+  bar = w;\n+  \n+  jap = new just_another [w];\n+  \n+  return 0;\n+}  \n+"}, {"sha": "f03953ab20eef24d1acc34b909e89dd178a80346", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash11.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash11.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,23 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+extern \"C\" void printf (char *, ...);\n+\n+class A {\n+\tint\ti;\n+\tint\tj;\n+    public:\n+\tint\th;\n+\tA() { i=10; j=20; }\n+\tvirtual void f1() { printf(\"i=%d j=%d\\n\",i,j); }\n+\tfriend virtual void f2() { printf(\"i=%d j=%d\\n\",i,j); }// ERROR -  virtual.*\n+};\n+\n+class B : public A {\n+    public:\n+\tvirtual void f1() { printf(\"i=%d j=%d\\n\",i,j); }// ERROR -  member.*// ERROR -  member.*\n+\tfriend virtual void f2() { printf(\"i=%d j=%d\\n\",i,j); }// ERROR -  virtual.*// ERROR -  member.*// ERROR -  member.*\n+};\n+\n+main() {\n+\tA * a = new A;\n+}"}, {"sha": "0671c7b8970b94e168cade9e54148ee9745e87ed", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash12.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash12.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class X\n+{\n+        int i;\n+public:\n+        X(int j);\n+}\n+\n+X *x = new X[10]();// ERROR - .*"}, {"sha": "a292d67f23514c7718c7285b7ab506f26c5febfe", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash13.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash13.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,35 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class gen_op\n+{\n+public:\n+  gen_op ( );\n+  gen_op (const gen_op &Op1);\n+  ~gen_op ( );\n+  void operator = (const gen_op &Op1);\n+};\n+\n+\n+\n+\n+class spin_op \n+{\n+public:\n+  spin_op();\n+  spin_op(const spin_op& SOp);\n+  ~spin_op();\n+  void operator= (const spin_op& SOp);\n+  operator gen_op();\n+};\n+\n+\n+spin_op Fe();\n+\n+\n+gen_op Spul_U_axis()\n+{\n+  gen_op U1;\n+  U1 = Fe();\n+}; // ERROR - reaches end of non-void function\n+\n+main () {};"}, {"sha": "d7a0de482f94ca76d154abe7e7d3db16f5f7f8a4", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash14.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash14.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,23 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+extern \"C\" void printf (char *, ...);\n+\n+\n+class cl\n+{\n+  int i;\n+public:\n+  cl(int j = 0) {i = j;}\n+  int get_i() {return i;}\n+  };\n+\n+main()\n+{\n+  cl ob[3] = {1, 2, 3};\n+  int i;\n+\n+  for(i=0; i<3; i++)\n+    printf(\"%d\\n\", ob[i].get_i());\n+\n+  return 0;\n+  }"}, {"sha": "a4b1ffabee3e629d0170c833405953de9aa67cfc", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash15.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash15.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,21 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+#include <iostream.h>\n+\n+class A {\n+ public:\n+  virtual ~A() {cout << \"executed ~A()\\n\";};\n+};\n+\n+class B : public A {\n+ public:\n+  virtual ~B() {cout << \"executed ~B()\\n\";};\n+};\n+\n+main() {\n+  cout << \"starting\\n\";\n+  B b;\n+  b.~A();// ERROR -  destructor\n+  cout << \"done\\n\";\n+};\n+"}, {"sha": "5030b297ae0d62ec1811a117e62b8f271da18bd5", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash16.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash16.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,12 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class Graph {\n+public:\n+      unsigned         char N;\n+      Graph(void) {}; // ERROR - previously defined here\n+}\n+\n+Graph::Graph(void)\n+{    N = 10;// ERROR -  return type.*\n+}\n+"}, {"sha": "7072eab2c8895980acba3b066b63d51dad0e86d4", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash17.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash17.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,35 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+//\n+// This one creates\n+//\n+// gcc2: Internal compiler error: program cc1plus got fatal signal 11\n+//\n+// when compiled with g++.\n+// The error goes away, if\n+// 1) int ClassInvariant() is not virtual or\n+// 2) GnObject has a virtual destructor or\n+// 3) GnWidget has no virtual destructor or\n+// 4) GnContracts has a virtual destructor\n+//\n+\n+\n+class GnContracts {\n+  public:\n+    virtual int ClassInvariant();\n+//    virtual ~GnContracts();\n+};\n+\n+class GnObject : public GnContracts {\n+  public:\n+//    virtual ~GnObject();\n+};\n+\n+class GnWidget : public GnObject {\n+  public:\n+    virtual ~GnWidget();\n+};\n+\n+class GnOptionGroup : public GnObject, public GnWidget {\n+};// ERROR -  warning\n+"}, {"sha": "d4a4c60b7c8b2fc9dada6e5040079fb5b09df34d", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash18.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash18.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,17 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+typedef int element;\n+class Pix {\n+public:\n+    Pix();\n+    Pix(const Pix&);\n+\n+    // Friend functions so that v == x works as does x == v works\n+    friend int operator==(void *v, const Pix& x)\n+        { return v == index; }// ERROR - .*\n+    friend int operator==(void *v, const Pix& x)\n+        { return v != index; }// ERROR - .*\n+private:\n+//    friend class List<T>;\n+    element *index;\n+};"}, {"sha": "dd621b16dcd51d3471f278c37355dee53a279ccd", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash19.C", "status": "added", "additions": 1704, "deletions": 0, "changes": 1704, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash19.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,1704 @@\n+// Special g++ Options: \n+// Build don't link: \n+// GROUPS passed old-abort\n+typedef unsigned long _G_clock_t;\n+typedef long _G_dev_t;\n+typedef long int _G_fpos_t;\n+typedef long _G_gid_t;\n+typedef unsigned long _G_ino_t;\n+typedef unsigned short _G_mode_t;\n+typedef short _G_nlink_t;\n+typedef long _G_off_t;\n+typedef long _G_pid_t;\n+typedef int _G_ptrdiff_t;\n+typedef int   _G_sigset_t;\n+typedef unsigned int _G_size_t;\n+typedef long _G_time_t;\n+typedef long _G_uid_t;\n+typedef unsigned int _G_wchar_t;\n+typedef int _G_ssize_t;\n+typedef double * _G_va_list;\n+class ostream; class streambuf; class backupbuf;\n+extern \"C\" int __underflow(streambuf*);\n+extern \"C\" int __overflow(streambuf*, int);\n+typedef _G_off_t streamoff;\n+typedef _G_off_t streampos;  \n+typedef unsigned long __fmtflags;\n+typedef unsigned char __iostate;\n+struct _ios_fields {  \n+    streambuf *_strbuf;\n+    ostream* _tie;\n+    int _width;\n+    __fmtflags _flags;\n+    _G_wchar_t _fill;\n+    __iostate _state;\n+    __iostate _exceptions;\n+    int _precision;\n+};\n+enum state_value {\n+    _good = 0 ,\n+    _eof = 1 ,\n+    _fail = 2 ,\n+    _bad = 4  };\n+enum open_mode {\n+    input = 1 ,\n+    output = 2 ,\n+    atend = 4 ,\n+    append = 8  };\n+class ios : public _ios_fields {\n+  public:\n+    typedef __fmtflags fmtflags;\n+    typedef int iostate;\n+    typedef int openmode;\n+    enum io_state {\n+\tgoodbit = 0 ,\n+\teofbit = 1 ,\n+\tfailbit = 2 ,\n+\tbadbit = 4  };\n+    enum open_mode {\n+\tin = 1 ,\n+\tout = 2 ,\n+\tate = 4 ,\n+\tapp = 8 ,\n+\ttrunc = 16 ,\n+\tnocreate = 32 ,\n+\tnoreplace = 64 ,\n+\tbin = 128  };\n+    enum seek_dir { beg, cur, end};\n+    enum { skipws=01, left=02, right=04, internal=010,\n+\t   dec=020, oct=040, hex=0100,\n+\t   showbase=0200, showpoint=0400, uppercase=01000, showpos=02000,\n+\t   scientific=04000, fixed=010000, unitbuf=020000, stdio=040000,\n+\t   dont_close=0x80000000  \n+\t   };\n+    enum {  \n+\tbasefield=dec+oct+hex,\n+\tfloatfield = scientific+fixed,\n+\tadjustfield = left+right+internal\n+    };\n+    ostream* tie() const { return _tie; }\n+    ostream* tie(ostream* val) { ostream* save=_tie; _tie=val; return save; }\n+    _G_wchar_t fill() const { return (_G_wchar_t)_fill; }\n+    _G_wchar_t fill(_G_wchar_t newf)\n+\t{_G_wchar_t oldf = (_G_wchar_t)_fill; _fill = (char)newf; return oldf;}\n+    fmtflags flags() const { return _flags; }\n+    fmtflags flags(fmtflags new_val) {\n+\tfmtflags old_val = _flags; _flags = new_val; return old_val; }\n+    int precision() const { return _precision; }\n+    int precision(int newp) {\n+\tunsigned short oldp = _precision; _precision = (unsigned short)newp;\n+\treturn oldp; }\n+    fmtflags setf(fmtflags val) {\n+\tfmtflags oldbits = _flags;\n+\t_flags |= val; return oldbits; }\n+    fmtflags setf(fmtflags val, fmtflags mask) {\n+\tfmtflags oldbits = _flags;\n+\t_flags = (_flags & ~mask) | (val & mask); return oldbits; }\n+    fmtflags unsetf(fmtflags mask) {\n+\tfmtflags oldbits = _flags & mask;\n+\t_flags &= ~mask; return oldbits; }\n+    int width() const { return _width; }\n+    int width(int val) { int save = _width; _width = val; return save; }\n+    void _throw_failure() { }\n+    streambuf* rdbuf() const { return _strbuf; }\n+    void clear(iostate state = 0) {\n+\t_state = _strbuf ? state : state|badbit;\n+\tif (_state & _exceptions) _throw_failure(); }\n+    void set(iostate flag) { _state |= flag;\n+\tif (_state & _exceptions) _throw_failure(); }\n+    int good() const { return _state == 0; }\n+    int eof() const { return _state & ios::eofbit; }\n+    int fail() const { return _state & (ios::badbit|ios::failbit); }\n+    int bad() const { return _state & ios::badbit; }\n+    iostate rdstate() const { return _state; }\n+    operator void*() const { return fail() ? (void*)0 : (void*)(-1); }\n+    int operator!() const { return fail(); }\n+    iostate exception(iostate enable) {\n+\tiostate old = _exceptions; _exceptions = enable;\n+\tif (_state & _exceptions) _throw_failure();\n+\treturn old; }\n+    static int sync_with_stdio(int on);\n+    static void sync_with_stdio() { sync_with_stdio(1); }\n+    void unset(state_value flag) { _state &= ~flag; }\n+    void close();\n+    int is_open();\n+    int readable();\n+    int writable();\n+  protected:\n+    ios(streambuf* sb = 0, ostream* tie = 0);\n+    virtual ~ios();\n+    void init(streambuf* sb) { _state=0; _strbuf=sb; }\n+};\n+typedef ios::seek_dir _seek_dir;\n+class streammarker {\n+    friend class streambuf;\n+    friend int __underflow(streambuf*);\n+    struct streammarker *_next;   \n+    streambuf *_sbuf;  \n+    streampos _spos;  \n+    void set_streampos(streampos sp) { _spos = sp; }\n+    void set_offset(int offset) { _pos = offset; _spos = (streampos)(-2); }\n+    int _pos;\n+  public:\n+    streammarker(streambuf *sb);\n+    ~streammarker();\n+    int saving() { return  _spos == -2; }\n+    int delta(streammarker&);\n+    int delta();\n+};\n+struct __streambuf {\n+    int _flags;\t\t \n+    char* _gptr;\t \n+    char* _egptr;\t \n+    char* _eback;\t \n+    char* _pbase;\t \n+    char* _pptr;\t \n+    char* _epptr;\t \n+    char* _base;\t \n+    char* _ebuf;\t \n+    struct streambuf *_chain;\n+    friend class streammarker;\n+    char *_other_gbase;  \n+    char *_aux_limit;   \n+    char *_other_egptr;  \n+    streammarker *_markers;\n+    unsigned short _cur_column;\n+    char _unused;\n+    char _shortbuf[1];\n+};\n+extern unsigned __adjust_column(unsigned start, const char *line, int count);\n+struct streambuf : private __streambuf {\n+    friend class ios;\n+    friend class istream;\n+    friend class ostream;\n+    friend class streammarker;\n+    friend int __underflow(streambuf*);\n+  protected:\n+    static streambuf* _list_all;  \n+    streambuf*& xchain() { return _chain; }\n+    void _un_link();\n+    void _link_in();\n+    char* gptr() const { return _gptr; }\n+    char* pptr() const { return _pptr; }\n+    char* egptr() const { return _egptr; }\n+    char* epptr() const { return _epptr; }\n+    char* pbase() const { return _pbase; }\n+    char* eback() const { return _eback; }\n+    char* base() const { return _base; }\n+    char* ebuf() const { return _ebuf; }\n+    int blen() const { return _ebuf - _base; }\n+    void xput_char(char c) { *_pptr++ = c; }\n+    int xflags() { return _flags; }\n+    int xflags(int f) { int fl = _flags; _flags = f; return fl; }\n+    void xsetflags(int f) { _flags |= f; }\n+    void xsetflags(int f, int mask) { _flags = (_flags & ~mask) | (f & mask); }\n+    void gbump(int n) { _gptr += n; }\n+    void pbump(int n) { _pptr += n; }\n+    void setb(char* b, char* eb, int a=0);\n+    void setp(char* p, char* ep) { _pbase=_pptr=p; _epptr=ep; }\n+    void setg(char* eb, char* g, char *eg) { _eback=eb; _gptr=g; _egptr=eg; }\n+    char *shortbuf() { return _shortbuf; }\n+    int in_backup() { return _flags & 0x100 ; }\n+    char *Gbase() { return in_backup() ? _other_gbase : _eback; }\n+    char *eGptr() { return in_backup() ? _other_egptr : _egptr; }\n+    char *Bbase() { return in_backup() ? _eback : _other_gbase; }\n+    char *Bptr() { return _aux_limit; }\n+    char *eBptr() { return in_backup() ? _egptr : _other_egptr; }\n+    char *Nbase() { return _other_gbase; }\n+    char *eNptr() { return _other_egptr; }\n+    int have_backup() { return _other_gbase != ((void*)0) ; }\n+    int have_markers() { return _markers != ((void*)0) ; }\n+    int _least_marker();\n+    void switch_to_main_get_area();\n+    void switch_to_backup_area();\n+    void free_backup_area();\n+    void unsave_markers();  \n+    int put_mode() { return _flags & 0x800 ; }\n+    int switch_to_get_mode();\n+    streambuf(int flags=0);\n+  public:\n+    static int flush_all();\n+    static void flush_all_linebuffered();  \n+    virtual int underflow() = 0;  \n+    virtual int overflow(int c = (-1) ) = 0;  \n+    virtual int doallocate();\n+    virtual streampos seekoff(streamoff, _seek_dir, int mode=ios::in|ios::out);\n+    virtual streampos seekpos(streampos pos, int mode = ios::in|ios::out);\n+    int seekmark(streammarker& mark, int delta = 0);\n+    int sputbackc(char c);\n+    int sungetc();\n+    virtual ~streambuf();\n+    int unbuffered() { return _flags & 2  ? 1 : 0; }\n+    int linebuffered() { return _flags & 0x200  ? 1 : 0; }\n+    void unbuffered(int i)\n+\t{ if (i) _flags |= 2 ; else _flags &= ~2 ; }\n+    void linebuffered(int i)\n+\t{ if (i) _flags |= 0x200 ; else _flags &= ~0x200 ; }\n+    int allocate() {  \n+\tif (base() || unbuffered()) return 0;\n+\telse return doallocate(); }\n+    void allocbuf() { if (base() == ((void*)0) ) doallocbuf(); }\n+    void doallocbuf();\n+    virtual int sync();\n+    virtual int pbackfail(int c);\n+    virtual streambuf* setbuf(char* p, int len);\n+    int in_avail() { return _egptr - _gptr; }\n+    int out_waiting() { return _pptr - _pbase; }\n+    virtual int xsputn(const char* s, int n);\n+    int sputn(const char* s, int n) { return xsputn(s, n); }\n+    int padn(char pad, int n);  \n+    virtual int xsgetn(char* s, int n);\n+    int sgetn(char* s, int n) { return xsgetn(s, n); }\n+    int ignore(int);\n+    virtual int get_column();\n+    virtual int set_column(int);\n+    long sgetline(char* buf, _G_size_t n, char delim, int putback_delim);\n+    int sbumpc() {\n+\tif (_gptr >= _egptr && __underflow(this) == (-1) ) return (-1) ;\n+\telse return *(unsigned char*)_gptr++; }\n+    int sgetc() {\n+\tif (_gptr >= _egptr && __underflow(this) == (-1) ) return (-1) ;\n+\telse return *(unsigned char*)_gptr; }\n+    int snextc() {\n+\tif (_gptr >= _egptr && __underflow(this) == (-1) ) return (-1) ;\n+\treturn _gptr++, sgetc(); }\n+    int sputc(int c) {\n+\tif (_pptr >= _epptr) return __overflow(this, (unsigned char)c);\n+\telse return *_pptr++ = c, (unsigned char)c; }\n+    void stossc() { if (_gptr < _egptr) _gptr++; }\n+    int vscan(char const *fmt0, _G_va_list ap, ios* stream = ((void*)0) );\n+    int scan(char const *fmt0 ...);\n+    int vform(char const *fmt0, _G_va_list ap);\n+    int form(char const *fmt0 ...);\n+};\n+class backupbuf : public streambuf {\n+    friend class streammarker;\n+  protected:\n+    backupbuf(int flags=0) : streambuf(flags| 0x4000 ) { }\n+  public:\n+    virtual int pbackfail(int c);\n+    virtual int underflow();\n+    virtual int overflow(int c = (-1) );\n+};\n+struct __file_fields {\n+    short _fileno;\n+    int _blksize;\n+    _G_fpos_t _offset;\n+};\n+class filebuf : public backupbuf {\n+  protected:\n+    struct __file_fields _fb;\n+    void init();\n+  public:\n+    static const int openprot;  \n+    filebuf();\n+    filebuf(int fd);\n+    filebuf(int fd, char* p, int len);\n+    ~filebuf();\n+    filebuf* attach(int fd);\n+    filebuf* open(const char *filename, const char *mode);\n+    filebuf* open(const char *filename, ios::openmode mode, int prot = 0664);\n+    virtual int underflow();\n+    virtual int overflow(int c = (-1) );\n+    int is_open() const { return _fb._fileno >= 0; }\n+    int fd() const { return is_open() ? _fb._fileno : (-1) ; }\n+    filebuf* close();\n+    virtual int doallocate();\n+    virtual streampos seekoff(streamoff, _seek_dir, int mode=ios::in|ios::out);\n+    virtual streambuf* setbuf(char* p, int len);\n+    int xsputn(const char* s, int n);\n+    int xsgetn(char* s, int n);\n+    virtual int sync();\n+  protected:  \n+    int is_reading() { return eback() != egptr(); }\n+    char* cur_ptr() { return is_reading() ?  gptr() : pptr(); }\n+    char* file_ptr() { return eGptr(); }\n+    int do_write(const char *data, int to_do);\n+    int do_flush() { return do_write(_pbase, _pptr-_pbase); }// ERROR - \n+    virtual _G_ssize_t sys_read(char* buf, _G_size_t size);\n+    virtual _G_fpos_t sys_seek(_G_fpos_t, _seek_dir);\n+    virtual _G_ssize_t sys_write(const void*, long);\n+    virtual int sys_stat(void*);  \n+    virtual int sys_close();\n+};\n+inline ios::ios(streambuf* sb  , ostream* tie  ) {\n+\t\t_state = sb ? ios::goodbit : ios::badbit; _exceptions=0;\n+\t\t_strbuf=sb; _tie = tie; _width=0; _fill=' ';\n+\t\t_flags=ios::skipws|ios::dec; _precision=6; }\n+inline ios::~ios() {\n+    if (!(_flags & (unsigned int)ios::dont_close)) delete _strbuf; }\n+class istream; class ostream;\n+typedef ios& (*__manip)(ios&);\n+typedef istream& (*__imanip)(istream&);\n+typedef ostream& (*__omanip)(ostream&);\n+extern istream& ws(istream& ins);\n+extern ostream& flush(ostream& outs);\n+extern ostream& endl(ostream& outs);\n+extern ostream& ends(ostream& outs);\n+class ostream : virtual public ios\n+{\n+    void do_osfx();\n+  public:\n+    ostream() { }\n+    ostream(streambuf* sb, ostream* tied=((void*)0) );\n+    int opfx() {\n+\tif (!good()) return 0; else { if (_tie) _tie->flush(); return 1;} }\n+    void osfx() { if (flags() & (ios::unitbuf|ios::stdio))\n+\t\t      do_osfx(); }\n+    streambuf* ostreambuf() const { return _strbuf; }\n+    ostream& flush();\n+    ostream& put(char c) { _strbuf->sputc(c); return *this; }\n+    ostream& put(unsigned char c) { return put((char)c); }\n+    ostream& write(const char *s, int n);\n+    ostream& write(const unsigned char *s, int n) { return write((const char*)s, n);}\n+    ostream& put(signed char c) { return put((char)c); }\n+    ostream& write(const signed char *s, int n) { return write((const char*)s, n);}\n+    ostream& write(const void *s, int n) { return write((const char*)s, n);}\n+    ostream& seekp(streampos);\n+    ostream& seekp(streamoff, _seek_dir);\n+    streampos tellp();\n+    ostream& form(const char *format ...);\n+    ostream& vform(const char *format, _G_va_list args);\n+    ostream& operator<<(char c);\n+    ostream& operator<<(unsigned char c) { return (*this) << (char)c; }\n+    ostream& operator<<(signed char c) { return (*this) << (char)c; }\n+    ostream& operator<<(const char *s);\n+    ostream& operator<<(const unsigned char *s)\n+\t{ return (*this) << (const char*)s; }\n+    ostream& operator<<(const signed char *s)\n+\t{ return (*this) << (const char*)s; }\n+    ostream& operator<<(void *p);\n+    ostream& operator<<(int n);\n+    ostream& operator<<(unsigned int n);\n+    ostream& operator<<(long n);\n+    ostream& operator<<(unsigned long n);\n+    ostream& operator<<(long long n);\n+    ostream& operator<<(unsigned long long n);\n+    ostream& operator<<(short n) {return operator<<((int)n);}\n+    ostream& operator<<(unsigned short n) {return operator<<((unsigned int)n);}\n+    ostream& operator<<(double n);\n+    ostream& operator<<(float n) { return operator<<((double)n); }\n+    ostream& operator<<(__omanip func) { return (*func)(*this); }\n+    ostream& operator<<(__manip func) {(*func)(*this); return *this;}\n+    ostream& operator<<(streambuf*);\n+};\n+class istream : virtual public ios\n+{\n+    _G_ssize_t _gcount;\n+    int _skip_ws();\n+  public:\n+    istream() { _gcount = 0; }\n+    istream(streambuf* sb, ostream*tied=((void*)0) );\n+    streambuf* istreambuf() const { return _strbuf; }\n+    istream& get(char* ptr, int len, char delim = '\\n');\n+    istream& get(unsigned char* ptr, int len, char delim = '\\n')\n+\t{ return get((char*)ptr, len, delim); }\n+    istream& get(char& c);\n+    istream& get(unsigned char& c) { return get((char&)c); }\n+    istream& getline(char* ptr, int len, char delim = '\\n');\n+    istream& getline(unsigned char* ptr, int len, char delim = '\\n')\n+\t{ return getline((char*)ptr, len, delim); }\n+    istream& get(signed char& c)  { return get((char&)c); }\n+    istream& get(signed char* ptr, int len, char delim = '\\n')\n+\t{ return get((char*)ptr, len, delim); }\n+    istream& getline(signed char* ptr, int len, char delim = '\\n')\n+\t{ return getline((char*)ptr, len, delim); }\n+    istream& read(char *ptr, int n);\n+    istream& read(unsigned char *ptr, int n) { return read((char*)ptr, n); }\n+    istream& read(signed char *ptr, int n) { return read((char*)ptr, n); }\n+    istream& read(void *ptr, int n) { return read((char*)ptr, n); }\n+    istream& get(streambuf& sb, char delim = '\\n');\n+    istream& gets(char **s, char delim = '\\n');\n+    int ipfx(int need) {\n+\tif (!good()) { set(ios::failbit); return 0; }\n+\tif (_tie && (need == 0 || rdbuf()->in_avail() < need)) _tie->flush();\n+\tif (!need && (flags() & ios::skipws)) return _skip_ws();\n+\treturn 1;\n+    }\n+    int ipfx0() {  \n+\tif (!good()) { set(ios::failbit); return 0; }\n+\tif (_tie) _tie->flush();\n+\tif (flags() & ios::skipws) return _skip_ws();\n+\treturn 1;\n+    }\n+    int ipfx1() {  \n+\tif (!good()) { set(ios::failbit); return 0; }\n+\tif (_tie && rdbuf()->in_avail() == 0) _tie->flush();\n+\treturn 1;\n+    }\n+    int get() { if (!ipfx1()) return (-1) ;\n+\t\tint ch = _strbuf->sbumpc();\n+\t\tif (ch == (-1) ) set(ios::eofbit);\n+\t\treturn ch; }\n+    int peek() { if (!ipfx1()) return (-1) ;\n+\t\tint ch = _strbuf->sgetc();\n+\t\tif (ch == (-1) ) set(ios::eofbit);\n+\t\treturn ch; }\n+    _G_ssize_t gcount() { return _gcount; }\n+    istream& ignore(int n=1, int delim = (-1) );\n+    istream& seekg(streampos);\n+    istream& seekg(streamoff, _seek_dir);\n+    streampos tellg();\n+    istream& putback(char ch) {\n+\tif (good() && _strbuf->sputbackc(ch) == (-1) ) clear(ios::badbit);\n+\treturn *this;}\n+    istream& unget() {\n+\tif (good() && _strbuf->sungetc() == (-1) ) clear(ios::badbit);\n+\treturn *this;}\n+    istream& scan(const char *format ...);\n+    istream& vscan(const char *format, _G_va_list args);\n+    istream& unget(char ch) { return putback(ch); }\n+    int skip(int i);\n+    istream& operator>>(char*);\n+    istream& operator>>(unsigned char* p) { return operator>>((char*)p); }\n+    istream& operator>>(signed char*p) { return operator>>((char*)p); }\n+    istream& operator>>(char& c);\n+    istream& operator>>(unsigned char& c) {return operator>>((char&)c);}\n+    istream& operator>>(signed char& c) {return operator>>((char&)c);}\n+    istream& operator>>(int&);\n+    istream& operator>>(long&);\n+    istream& operator>>(long long&);\n+    istream& operator>>(short&);\n+    istream& operator>>(unsigned int&);\n+    istream& operator>>(unsigned long&);\n+    istream& operator>>(unsigned long long&);\n+    istream& operator>>(unsigned short&);\n+    istream& operator>>(float&);\n+    istream& operator>>(double&);\n+    istream& operator>>( __manip func) {(*func)(*this); return *this;}\n+    istream& operator>>(__imanip func) { return (*func)(*this); }\n+    istream& operator>>(streambuf*);\n+};\n+class iostream : public istream, public ostream\n+{\n+    _G_ssize_t _gcount;\n+  public:\n+    iostream() { _gcount = 0; }\n+    iostream(streambuf* sb, ostream*tied=((void*)0) );\n+};\n+extern istream cin;\n+extern ostream cout, cerr, clog;  \n+struct Iostream_init { } ;   \n+inline ios& dec(ios& i)\n+{ i.setf(ios::dec, ios::dec|ios::hex|ios::oct); return i; }\n+inline ios& hex(ios& i)\n+{ i.setf(ios::hex, ios::dec|ios::hex|ios::oct); return i; }\n+inline ios& oct(ios& i)\n+{ i.setf(ios::oct, ios::dec|ios::hex|ios::oct); return i; }\n+extern char* form(const char*, ...);\n+extern char* dec(long, int=0);\n+extern char* dec(int, int=0);\n+extern char* dec(unsigned long, int=0);\n+extern char* dec(unsigned int, int=0);\n+extern char* hex(long, int=0);\n+extern char* hex(int, int=0);\n+extern char* hex(unsigned long, int=0);\n+extern char* hex(unsigned int, int=0);\n+extern char* oct(long, int=0);\n+extern char* oct(int, int=0);\n+extern char* oct(unsigned long, int=0);\n+extern char* oct(unsigned int, int=0);\n+inline istream& WS(istream& str) { return ws(str); }\n+typedef double *__gnuc_va_list;\n+extern \"C\" {\n+   typedef struct {\n+\tint\t\t __cnt;\n+\tunsigned char\t*__ptr;\n+\tunsigned char\t*__base;\n+\tunsigned short\t __flag;\n+\tunsigned char \t __fileL;\t\t \n+\tunsigned char \t __fileH;\t\t \n+   } FILE;\n+   typedef struct {\n+\tint\t\t __cnt;\n+\tunsigned char\t*__ptr;\n+\tunsigned char\t*__base;\n+\tunsigned short\t __flag;\n+\tunsigned char \t __fileL;\t\t \n+\tunsigned char \t __fileH;\t\t \n+\tunsigned char\t*__bufendp;\t \n+\tunsigned char\t __smbuf[8 ];  \n+   } _FILEX;\n+     typedef unsigned int size_t;\n+   typedef long int fpos_t;\n+     typedef double *__va_list;\n+   extern FILE __iob[];\n+     extern int remove(const char *);\n+     extern int rename(const char *, const char *);\n+     extern FILE *tmpfile(void);\n+     extern char *tmpnam(char *);\n+     extern int fclose(FILE *);\n+     extern int fflush(FILE *);\n+     extern FILE *fopen(const char *, const char *);\n+     extern FILE *freopen(const char *, const char *, FILE *);\n+     extern void setbuf(FILE *, char *);\n+     extern int setvbuf(FILE *, char *, int, size_t);\n+     extern int fprintf(FILE *, const char *, ...);\n+     extern int fscanf(FILE *, const char *,...);\n+     extern int printf(const char *,...);\n+     extern int scanf(const char *,...);\n+     extern int sprintf(char *, const char *,...);\n+     extern int sscanf(const char *, const char *,...);\n+     extern int vprintf(const char *, __va_list);\n+     extern int vfprintf(FILE *, const char *, __va_list);\n+     extern int vsprintf(char *, const char *, __va_list);\n+     extern int fgetc(FILE *);\n+     extern char *fgets(char *, int, FILE *);\n+     extern int fputc(int, FILE *);\n+     extern int fputs(const char *, FILE *);\n+     extern int getc(FILE *);\n+     extern int getchar(void);\n+     extern char *gets(char *);\n+     extern int putc(int, FILE *);\n+     extern int putchar(int);\n+     extern int puts(const char *);\n+     extern int ungetc(int, FILE *);\n+     extern int fgetpos(FILE *, fpos_t *);\n+     extern int fseek(FILE *, long int, int);\n+     extern int fsetpos(FILE *, const fpos_t *);\n+     extern long int ftell(FILE *);\n+     extern void rewind(FILE *);\n+     extern void clearerr(FILE *);\n+     extern int feof(FILE *);\n+     extern int ferror(FILE *);\n+     extern void perror(const char *);\n+       extern size_t fread(void *, size_t, size_t, FILE *);\n+       extern size_t fwrite(const void *, size_t, size_t, FILE *);\n+     extern int __flsbuf(unsigned char, FILE *);\n+     extern int __filbuf(FILE *);\n+     extern int fileno(FILE *);\n+     extern FILE *fdopen(int, const char *);\n+     extern int getw(FILE *);\n+     extern int putw(int, FILE *);\n+     extern int pclose(FILE *);\n+     extern FILE *popen(const char *, const char *);\n+     extern char *tempnam(const char *, const char *);\n+     extern char *ctermid(char *);\n+     extern char *cuserid(char *);\n+     extern int nl_fprintf(FILE *, const char * ,...);\n+     extern int nl_fscanf(FILE *, const char * ,...);\n+     extern int nl_printf(const char * ,...);\n+     extern int nl_scanf(const char * ,...);\n+     extern int nl_sprintf(char *, const char * ,...);\n+     extern int nl_sscanf(const char *, const char * ,...);\n+   extern unsigned char *__bufendtab[];\n+}\n+extern \"C\" {\n+   extern int __nl_char_size;\n+   typedef struct {\n+\tint quot;\t \n+\tint rem;\t \n+   } div_t;\n+   typedef struct {\n+\tlong int quot;\t \n+\tlong int rem;\t \n+   } ldiv_t;\n+     typedef unsigned int wchar_t;\n+       extern double atof(const char *);\n+     extern int atoi(const char *);\n+     extern long int atol(const char *);\n+     extern double strtod(const char *, char **);\n+     extern long int strtol(const char *, char **, int);\n+     extern unsigned long int strtoul(const char *, char **, int);\n+     extern int rand(void);\n+     extern void srand(unsigned int);\n+     extern int atexit(void (*) (void));\n+     extern void exit(int);\n+     extern char *getenv(const char *);\n+     extern int system(const char *);\n+       inline int abs(int d) { return (d>0)?d:-d; }\n+     extern div_t div(int, int);\n+     extern ldiv_t ldiv(long int, long int);\n+     extern long int labs(long int);\n+     extern int mblen(const char *, size_t);\n+     extern int mbtowc(wchar_t *, const char *, size_t);\n+     extern int wctomb(char *, wchar_t);\n+     extern size_t mbstowcs(wchar_t *, const char *, size_t);\n+     extern size_t wcstombs(char *, const wchar_t *, size_t);\n+     extern void free(void *);\n+     extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));\n+       extern void abort(void);\n+       extern void *bsearch(const void *, const void *, size_t, size_t, int (*) (const void *, const void *));\n+       extern void *calloc(size_t, size_t);\n+       extern void *malloc(size_t);\n+       extern void *realloc(void *, size_t);\n+     extern void setkey(const char *);\n+     extern void lcong48( unsigned short [] );\n+     extern double wcstod( const wchar_t *, wchar_t ** );\n+     extern long wcstol( const wchar_t *, wchar_t **, int );\n+     extern unsigned long wcstoul( const wchar_t *, wchar_t **, int );\n+     extern double drand48(void);\n+     extern double erand48(unsigned short []);\n+     extern long jrand48(unsigned short []);\n+     extern long lrand48(void);\n+     extern long mrand48(void);\n+     extern long nrand48(unsigned short []);\n+     extern void srand48(long);\n+     extern unsigned short *seed48(unsigned short []);\n+     extern int putenv(const char *);\n+    extern int clearenv(void);\n+    extern int getopt(int, char * const [], const char *);\n+    extern char *getpass(const char *);\n+  extern char *optarg;\n+  extern int optind;\n+  extern int opterr;\n+  struct mallinfo  {\n+\tint arena;\t \n+\tint ordblks;\t \n+\tint smblks;\t \n+\tint hblks;\t \n+\tint hblkhd;\t \n+\tint usmblks;\t \n+\tint fsmblks;\t \n+\tint uordblks;\t \n+\tint fordblks;\t \n+\tint keepcost;\t \n+  };\t\n+     typedef struct {\n+       unsigned int word1, word2, word3, word4;\n+     } long_double;\n+extern \"C\" {\n+     typedef long gid_t;\n+     typedef long uid_t;\n+   struct passwd {\n+\tchar\t*pw_name;\n+\tchar \t*pw_passwd;\n+\tuid_t\tpw_uid;\n+\tgid_t\tpw_gid;\n+\tchar \t*pw_age;\n+\tchar\t*pw_comment;\n+\tchar\t*pw_gecos;\n+\tchar\t*pw_dir;\n+\tchar\t*pw_shell;\n+\tlong\tpw_audid;\n+\tint\tpw_audflg;\n+   };\n+     extern struct passwd *getpwuid(uid_t);\n+     extern struct passwd *getpwnam(const char *);\n+   struct s_passwd {\n+       char    *pw_name;\n+       char    *pw_passwd;\n+       char    *pw_age;\n+       long     pw_audid;\n+       int     pw_audflg;\n+   };\n+   struct comment {\n+\tchar\t*c_dept;\n+\tchar\t*c_name;\n+\tchar\t*c_acct;\n+\tchar\t*c_bin;\n+   };\n+     extern void setpwent(void);\n+     extern void endpwent(void);\n+     extern struct passwd *getpwent(void);\n+     extern struct passwd *fgetpwent(FILE *);\n+     extern struct s_passwd *getspwent(void);\n+     extern struct s_passwd *getspwuid(int);\n+     extern struct s_passwd *getspwaid(int);\n+     extern struct s_passwd *getspwnam(char *);\n+     extern struct s_passwd *fgetspwent(FILE *);\n+}\n+extern int errno;\n+     extern \"C\" {\n+         extern int errno;\n+     }\n+extern \"C\" {\n+    extern void perror(const char*);\n+    extern int sys_nerr;\n+    extern char *sys_errlist[];\n+    extern char *strerror (int);\n+}\n+     extern const char *fcvt(double, size_t, int *, int *);\n+     extern char *gcvt(double, size_t, char *);\n+     extern char *ecvt(double, size_t, int *, int *);\n+     extern char *nl_gcvt(double, size_t, char *, int);\n+     extern char *_ldecvt(long_double, size_t, int *, int *);\n+     extern char *_ldfcvt(long_double, size_t, int *, int *);\n+     extern char *_ldgcvt(long_double, size_t, char *);\n+     extern int getpw(int, char *);\n+     extern long a64l(const char *);\n+     extern char *l64a(long);\n+     extern void l3tol(long *, const char *, int);\n+     extern void ltol3(char *, const long *, int);\n+     extern char *getmsg(int, int, int, char *, int);\n+     extern double nl_atof(const char *, int);\n+     extern double nl_strtod(const char *, char **, int);\n+     extern char *ltostr(long, int);\n+     extern char *ultostr(unsigned long, int);\n+     extern char *ltoa(long);\n+     extern char *ultoa(unsigned long);\n+     extern void memorymap(int);\n+     extern struct mallinfo mallinfo(void);\n+     extern int mallopt(int, int);\n+}\n+typedef void * POINTER;\n+typedef FILE * FILE_PTR;\n+typedef void (*DISPLAYER)   (POINTER obj, FILE_PTR fp, FILE_PTR errorFile)  ;\n+typedef void (*DESTROYER)   (POINTER obj, FILE_PTR errorFile)  ;\n+typedef void (*RCOUNT_INC)  (POINTER obj, FILE_PTR errorFile)  ;\n+typedef int  (*COMPARE)     (POINTER obj1, POINTER obj2)  ;\n+typedef\tunsigned long (*HASH_ADDR)  (POINTER obj, FILE_PTR errorFile)  ;\n+typedef\tunsigned long (*HASH_SKIP)  (POINTER obj, FILE_PTR errorFile)  ;\n+typedef POINTER\n+\t(*ACCESS_FCT)  (POINTER target, POINTER sample, FILE_PTR errorFile)  ;\n+typedef POINTER DATA_PTR;\n+     typedef long dev_t;\t\t \n+     typedef unsigned long ino_t;\t \n+     typedef unsigned short mode_t; \t \n+     typedef short nlink_t;\t\t \n+     typedef long off_t;\t\t \n+     typedef long pid_t;\t\t \n+     typedef long time_t;\t\t \n+      typedef int ssize_t;\t\t \n+     typedef unsigned short __site_t;\t \n+     typedef unsigned short __cnode_t;\t \n+     typedef unsigned long clock_t;\t \n+      typedef long key_t;\t\t \n+   typedef unsigned short __ushort;\t \n+   typedef long\t__daddr_t;\t\t \n+   typedef char *__caddr_t;\t\t \n+   typedef long __swblk_t;\n+   typedef unsigned char\tu_char;\t    \n+   typedef unsigned short\tu_short;    \n+   typedef unsigned int\t\tu_int;      \n+   typedef unsigned long\tu_long;     \n+   typedef unsigned int\t\tuint;\t    \n+   typedef unsigned short\tushort;\t    \n+   typedef __swblk_t\t\tswblk_t;\n+   typedef __daddr_t\t\tdaddr_t;\n+   typedef __site_t\t\tsite_t;\n+   typedef __cnode_t\t\tcnode_t;\n+     typedef __caddr_t\t\tcaddr_t;    \n+   typedef long\t\t\tpaddr_t;\n+   typedef short\t\tcnt_t;\n+   typedef unsigned int\t\tspace_t;\n+   typedef unsigned int    \tprot_t;\n+   typedef unsigned long        cdno_t;\n+   typedef unsigned short\tuse_t;\n+   typedef struct _physadr { int r[1]; } *physadr;\n+   typedef struct _quad { long val[2]; } quad;\n+     typedef short cpu_t;\n+     typedef struct label_t {\n+\tint\tlbl_rp;\n+       \tint\tlbl_sp;\n+       \tint\tlbl_s[17];\n+       \tint\tlbl_ss[1];\n+\tdouble\tlbl_sf[4];\n+     } label_t;\n+   typedef char *dm_message;\n+      typedef long\taid_t;\n+   typedef pid_t\t\tsid_t;\t    \n+     typedef long fd_mask;\n+     typedef struct fd_set {\n+       fd_mask fds_bits[ (((       2048   )+((  (sizeof(fd_mask) * 8)      )-1))/(  (sizeof(fd_mask) * 8)      )) ];\n+     } fd_set;\n+POINTER malloc  (size_t size )  ;\n+POINTER calloc  (size_t n , size_t size )  ;\n+void  free  (POINTER c )  ;\n+void mem_report  (void )  ;\n+typedef  int         BOOLEAN;\n+typedef enum\n+{\n+  eNoErrors\t\t\t= -1,\n+  eUnknownProcessingError       = 0,\n+  eAlgorithmFailure\t\t= 100,\n+  eAlreadyLocked                = 200,\n+  eAttCount\t\t\t= 300,\n+  eAttRedefinition\t\t= 400,\n+  eBasicMatrixError\t\t= 500,\n+  eBadAddress\t\t\t= 600,\n+  eBadAttribute\t\t\t= 700,\n+  eBadFileNumber\t\t= 800,\n+  eBadMode\t\t\t= 900,\n+  eBadVersion\t\t\t= 1000,\n+  eColumnError\t\t\t= 1100,\n+  eConstraintError\t\t= 1200,\n+  eLBConstraintError\t\t= 1300,\n+  eUBConstraintError\t\t= 1400,\n+  eDatabaseError\t\t= 1500,\n+  eDataExists\t\t\t= 1600,\n+  eDataNotFound\t\t\t= 1700,\n+  eDictError\t\t\t= 1800,\n+  eDiffAtt\t\t\t= 1900,\n+  eDomain\t\t\t= 2000,\n+  eDuplicateAtt\t\t\t= 2100,\n+  eDuplicateKey\t\t\t= 2200,\n+  eElementMismatch\t\t= 2300,\n+  eEmptyAtt\t\t\t= 2400,\n+  eEmptyDict\t\t\t= 2450,\n+  eEmptyLink\t\t\t= 2500,\n+  eEmptyQueue\t\t\t= 2600,\n+  eEmptyStack\t\t\t= 2700,\n+  eEntityExists\t\t\t= 2800,\n+  eEntityNotFound\t\t= 2900,\n+  eEtaComputeError\t\t= 3000,\n+  eEtaFileError\t\t\t= 3100,\n+  eEtaInverseConsistency\t= 3200,\n+  eFileExists\t\t\t= 3300,\n+  eFileNotFound\t\t\t= 3400,\n+  eFunctionMismatch\t\t= 3500,\n+  eFunctionNotAvailable\t\t= 3600,\n+  eFunctionNotFound\t\t= 3700,\n+  eFunctionTypeConflict\t\t= 3800,\n+  eGraphError\t\t\t= 3900,\n+  eIllegalBMatrixOp\t\t= 4000,\n+  eIllegalData\t\t\t= 4100,\n+  eIllegalDeletion\t\t= 4200,\n+  eIllegalDictOp\t\t= 4300,\n+  eIllegalEtaFileOp\t\t= 4400,\n+  eIllegalFunctionRequest\t= 4500,\n+  eIllegalFunctionType\t\t= 4600,\n+  eIllegalGraphOp\t\t= 4700,\n+  eIllegalGraphType\t\t= 4800,\n+  eIllegalIndex\t\t\t= 4900,\n+  eIllegalInsertion\t\t= 5000,\n+  eIllegalListOp\t\t= 5100,\n+  eIllegalLPTokenOp\t\t= 5200,\n+  eIllegalLPTokenType\t\t= 5300,\n+  eIllegalMatrixOp\t\t= 5400,\n+  eIllegalMatrixSize\t\t= 5500,\n+  eIllegalMatrixState\t\t= 5600,\n+  eIllegalMatrixType\t\t= 5700,\n+  eIllegalNBMatrixOp\t\t= 5800,\n+  eIllegalOperation\t\t= 5900,\n+  eIllegalOption\t\t= 6000,\n+  eIllegalOverload\t\t= 6100,\n+  eIllegalSeek\t\t\t= 6200,\n+  eIllegalType\t\t\t= 6300,\n+  eIllegalVectorOp\t\t= 6400,\n+  eIllegalVectorType\t\t= 6500,\n+  eIllFormedADT\t\t\t= 6600,\n+  eInconsistentData\t\t= 6700,\n+  eInternalError\t\t= 6800,\n+  eInUse\t\t\t= 6900,\n+  eInvalidArgument\t\t= 7000,\n+  eInvalidAtt\t\t\t= 7100,\n+  eInvalidData\t\t\t= 7200,\n+  eInvalidIndex\t\t\t= 7300,\n+  eInvalidMatrixOp\t\t= 7400,\n+  eInvalidOperation\t\t= 7500,\n+  eInvalidOption\t\t= 7600,\n+  eInvalidParam\t\t\t= 7700,\n+  eInvalidVectorOp\t\t= 7800,\n+  eKeyNotFound\t\t\t= 7900,\n+  eLinkNotEmpty\t\t\t= 8000,\n+  eListError\t\t\t= 8100,\n+  eLockAccess\t\t\t= 8200,\n+  eLockExists\t\t\t= 8300,\n+  eLockNotFound\t\t\t= 8400,\n+  eLockReadOnly\t\t\t= 8500,\n+  eLockTrunc\t\t\t= 8600,\n+  eLPTokenError\t\t\t= 8700,\n+  eLPTokenMisuse\t\t= 8800,\n+  eMatrixError\t\t\t= 8900,\n+  eMatrixMismatch\t\t= 9000,\n+  eMatrixMultiplicationError\t= 9100,\n+  eMissingData\t\t\t= 9200,\n+  eMysteryError\t\t\t= 9300,\n+  eNameTooLong\t\t\t= 9400,\n+  eNeverLocked\t\t\t= 9500,\n+  eNoAccess\t\t\t= 9600,\n+  eNoLockReq\t\t\t= 9800,\n+  eNoMoreAtt\t\t\t= 9900,\n+  eNoMoreElements\t\t= 10000,\n+  eNonBasicMatrixError\t\t= 10100,\n+  eNonInvertibleMatrix\t\t= 10200,\n+  eNonsenseData\t\t\t= 10300,\n+  eNoSuchKey\t\t\t= 10400,\n+  eNotEnoughSpace\t\t= 10500,\n+  eNotFetched\t\t\t= 10600,\n+  eNotLocked\t\t\t= 10700,\n+  eNotSupported\t\t\t= 10800,\n+  eNullPointer\t\t\t= 10900,\n+  eNullInternalPointer\t\t= 11000,\n+  eNullCompare\t\t\t= 11050,\n+  eNullData\t\t\t= 11070,\n+  eNullDestroyer\t\t= 11100,\n+  eNullDisplayer\t\t= 11200,\n+  eNullFunction\t\t\t= 11300,\n+  eRemove\t\t\t= 11400,\n+  eRoundoff\t\t\t= 11500,\n+  eQueueNotEmpty\t\t= 11600,\n+  eSparseGraphError\t\t= 11700,\n+  eStackError\t\t\t= 11800,\n+  eStackNotEmpty\t\t= 11900,\n+  eTLRSProceduralError\t\t= 12000,\n+  eTooManyAtt\t\t\t= 12100,\n+  eTooManyLocks\t\t\t= 12200,\n+  eTypeConflict\t\t\t= 12300,\n+  eUnexpectedType\t\t= 12400,\n+  eUnixError\t\t\t= 12500,\n+  eVectorMismatch\t\t= 12600,\n+  eProcessingError\t\t= 15000, \n+  eActionKludge\t\t\t= 15100,\n+  eNotImplemented\t\t= 15200,\n+  eNotStable\t\t\t= 15300,\n+  eNotReleased\t\t\t= 15400,\n+  eBeingWorkedOn\t\t= 15500\n+} eErrorState;\n+extern \"C\" {\n+extern\teErrorState\tspider_errno;\n+extern\tchar\t\terr_string[];\n+POINTER mallocate  (size_t n )  ;\n+size_t pagesize  (void )  ;\n+POINTER page_mallocate  (void )  ;\n+POINTER make_memory_token  (int size , int page_cnt, const char *name)  ;\n+POINTER mem_malloc  (POINTER mptr )  ;\n+void mem_free  (POINTER mptr , POINTER obj )  ;\n+const char *get_double_string  (char *buffer , double num )  ;\n+int spider_strcat  (const char *proc , char *str1 , const char *str2 , int maxlen )  ;\n+void init_errors  (void )  ;\n+void append_abort  (const char *proc )  ;\n+void append_message  (const char *proc , const char *msg )  ;\n+void set_errno  (eErrorState err )  ;\n+void spider_perror  (const char *proc , FILE_PTR errorFile )  ;\n+void append_not_implemented  (const char *proc , int *target_errno )  ;\n+const char *GetBooleanString  (BOOLEAN bool )  ;// ERROR - use of bool as identifier\n+double truncate_value  (double x , double epsilon )  ;\n+double log2  (double x )  ;\n+int ceil_log2  (double x )  ;\n+int floor_log2  (double x )  ;\n+}\n+extern \"C\" {\n+extern  char char80[], char128[], char160[], char512[];\n+extern  char char1000[], char2000[];\n+extern  char char320[];\t \n+BOOLEAN Get_EM_StderrFlag  (void )  ;\n+void Set_EM_StderrFlag  (BOOLEAN printToStderr )  ;\n+void CheckReleaseState  (eErrorState releaseState , const char *procName, \t\t\t  FILE_PTR errorFile )  ;\n+void PrintErrorString  (const char *errorString , FILE_PTR errorFile )  ;\n+const char *get_error_header  (eErrorState errorState )  ;\n+void print_error_header  (eErrorState errorState , FILE_PTR errorFile )  ;\n+void PrintErrorMessage  (eErrorState errorState , const char *message , \t\t\t  FILE_PTR errorFile )  ;\n+}\n+extern \"C\" {\n+extern short show_increment_rcount;\n+extern int errno;\n+extern int bmk_errno;\n+extern int ck_errno;\n+extern int db_errno;\n+extern int dict_errno;\n+extern int glh_errno;\n+extern int graph_errno;\n+extern int hash_errno;\n+extern int link_errno;\n+extern int lp_errno;\n+extern int matrix_errno;\n+extern int nbmk_errno;\n+extern int network_errno;\n+extern int queue_errno;\n+extern int set_kernel_errno;\n+extern int stack_errno;\n+}\n+extern \"C\" {\n+const char *spider_version_string  (void )  ;\n+int  spider_version  (void )  ;\n+const char *spider_errstring  (void )  ;\n+void append_perror  (const char *s )  ;\n+void unix_perror  (const char *s )  ;\n+}\n+typedef struct node a_dict_node, * DICT_NODE;\n+struct node {\n+\tPOINTER info;\t\t \n+\tDICT_NODE left;\t\t \n+\tDICT_NODE right;\t \n+\tDICT_NODE prev;\t\t \n+\tDICT_NODE next;\t\t \n+};\n+typedef struct tree a_dict, * DICT;\n+struct tree {\n+\tint\t  size;\t\t\t \n+\tCOMPARE   comp; \t\t \n+\tDICT_NODE header;\t\t \n+\tDICT_NODE last_accessed;\t \n+\tDICT_NODE list_head;\t\t \n+\tDICT_NODE list_tail;\t\t \n+};\n+typedef enum { PREORDER = -1, INORDER, POSTORDER } traversal_t;\n+extern \"C\" {\n+void dict_set_nopages  (int desired_nopages )  ;\n+void dict_err  (void )  ;\n+const char *traversal_string  (traversal_t tr )  ;\n+DICT make_dictionary  (COMPARE cmp )  ;\n+int dict_insert  (POINTER item , DICT dict )  ;\n+int dict_delete  (POINTER item , DICT dict )  ;\n+POINTER dict_access  (POINTER item , DICT dict )  ;\n+POINTER dict_low  (DICT dict )  ;\n+POINTER dict_nlow  (DICT dict )  ;\n+POINTER dict_big  (DICT dict )  ;\n+POINTER dict_nbig  (DICT dict )  ;\n+POINTER dict_first  (DICT dict )  ;\n+POINTER dict_next  (DICT dict )  ;\n+POINTER dict_last  (DICT dict )  ;\n+POINTER dict_prev  (DICT dict )  ;\n+int clear_dictionary  (DICT dict , DESTROYER destroy , FILE *errorFile )  ;\n+int dict_size  (const a_dict *dict )  ;\n+POINTER dict_elem  (int index , DICT dict )  ;\n+int dict_compare  (DICT d1 , DICT d2 )  ;\n+DICT dict_copy  (DICT di , COMPARE cmp )  ;\n+int dict_change_compare  (DICT di , COMPARE cmp )  ;\n+int dict_height  (DICT di )  ;\n+void dict_print_stats  (FILE *fp , DICT di )  ;\n+void dict_print  (FILE *fp , DICT di , traversal_t tr , DISPLAYER display )  ;\n+const char *dict_version  (void )  ;\n+void init_dict_errors  (void )  ;\n+const char *dict_errstring  (void )  ;\n+void dict_append_perror  (const char *s )  ;\n+void dict_perror  (const char *s )  ;\n+extern int  dict_errno;\n+}\n+typedef struct q_item {\n+  struct q_item *next;\n+  POINTER data;\n+} a_q_item, *Q_ITEM;\n+typedef struct {\n+  int rcount;\n+  Q_ITEM first;\n+  Q_ITEM last;\n+  int count;\n+} a_queue, *QUEUE;\n+extern \"C\" {\n+void queue_err  (void)  ;\n+void queue_set_nopages  (int desired_nopages)  ;\n+QUEUE make_queue  (void )  ;\n+POINTER queue_look  (const a_queue * Q )  ;\n+POINTER queue_last  (const a_queue * Q )  ;\n+POINTER queue_remove  (QUEUE Q )  ;\n+int queue_append  (QUEUE Q , POINTER data )  ;\n+int queue_size  (const a_queue * Q )  ;\n+void queue_destroy  (POINTER ptr , FILE_PTR errorFile )  ;\n+void IncrementQRCount  (POINTER ptr , FILE_PTR errorFile )  ;\n+const char *queue_version  (void )  ;\n+void init_queue_errors  (void )  ;\n+const char *queue_errstring  (void )  ;\n+void queue_append_perror  (const char *s )  ;\n+void queue_perror  (const char *s )  ;\n+extern int queue_errno;\n+}\n+typedef struct s_item {\n+  struct s_item *next;\n+  POINTER data;\n+} a_s_item, *S_ITEM;\n+typedef struct stack {\n+  int rcount;\n+  S_ITEM top;\n+  int count;\n+} a_stack, *STACK;\n+extern \"C\" {\n+void stack_err  (void)  ;\n+void stack_set_nopages  (int desired_nopages)  ;\n+STACK make_stack  (void )  ;\n+POINTER stack_look  (const a_stack * S )  ;\n+POINTER stack_pop  (STACK S )  ;\n+int stack_push  (STACK S , POINTER data )  ;\n+int stack_size  (const a_stack * S )  ;\n+void stack_destroy  (POINTER ptr , FILE_PTR errorFile )  ;\n+void IncrementSRCount  (POINTER ptr , FILE_PTR errorFile )  ;\n+const char *stack_version  (void )  ;\n+void init_stack_errors  (void )  ;\n+const char *stack_errstring  (void )  ;\n+void stack_append_perror  (const char *s )  ;\n+void stack_perror  (const char *s )  ;\n+extern int stack_errno;\n+}\n+typedef const char *(*STRINGER)(const void *ptr);\n+int default_compare(const void *p1, const void *p2);\n+void default_displayer(const void *ptr, FILE *fp, FILE *errorFile);\n+const char *default_stringer(const void *ptr);\n+const char *object_stringer(const void *ptr);\n+class object {\n+\tstatic long current_id;\n+\tstatic long next_id();\n+protected:\n+\tvoid display2(ostream &fp = cout) const;\n+\tlong id;\n+public:\n+\tobject()                  { id = next_id(); }\n+\tobject(const object &obj) { id = next_id(); }\n+\tvirtual ~object()\n+\t{\n+\t\tif (799  >=  999 ) cout <<   \"~object() executing...\"  << '\\n'; ;\n+\t}\n+\tobject & operator = (const object & obj)\n+\t{\n+\t\treturn( *this );\n+\t}\n+\tvirtual int compare(const void *p2) const;\n+\tvirtual void display(ostream & fp = cout) const\n+\t{\n+\t\tdisplay2(fp);\n+\t}\n+\toperator char *() const;\n+};\n+ostream & operator << (ostream & fp, object & obj);\n+int operator < (object & obj1, object & obj2);\n+int operator <= (object & obj1, object & obj2);\n+int operator > (object & obj1, object & obj2);\n+int operator >= (object & obj1, object & obj2);\n+int operator == (object & obj1, object & obj2);\n+int operator != (object & obj1, object & obj2);\n+void null_destroy(void *p, FILE *errorFile);\n+void object_destroy(void *p, FILE *errorFile);\n+int  object_compare(const void *p1, const void *p2);\n+void object_display(const void *p, FILE *fp, FILE *errorFile);\n+class dict : public object {\n+\tclass internal {\n+\tpublic:\n+\t\tDICT di;\n+\t\tint errno;\n+\t\tCOMPARE compare_f;\n+\t\tDISPLAYER display_f;\n+\t\tDESTROYER destroy_f;\n+\t\tSTRINGER string_f;\n+\t\tint count;\n+\t\tvoid append_error(int expr, const char *proc)\n+\t\t{\n+\t\t\tif (expr) dict_append_perror(proc);\n+\t\t\terrno = dict_errno;\n+\t\t}\n+\t\tvoid obj_error(int expr, const char *proc, const void *obj)\n+\t\t{\n+\t\t\tif (expr) {\n+\t\t\t\tdict_append_perror((*string_f)(obj));\n+\t\t\t\tdict_append_perror(proc);\n+\t\t\t}\n+\t\t\terrno = dict_errno;\n+\t\t}\n+\t\tinternal(COMPARE cmp, DESTROYER destroyer,\n+\t\t\t DISPLAYER displayer, STRINGER str_f)\n+\t\t{// ERROR - candidate for bad call\n+\t\t\tif (799  >=  800 ) cout <<  \"Creating new dictionary...\"  << '\\n'; ;\n+\t\t\tif (cmp == ((void*)0) )       cmp = &default_compare;\n+\t\t\tif (displayer == ((void*)0) ) displayer = &default_displayer;\n+\t\t\tif (str_f == ((void*)0) )     str_f = &default_stringer;\n+\t\t\tcompare_f = cmp;\n+\t\t\tdisplay_f = displayer;\n+\t\t\tdestroy_f = destroyer;\n+\t\t\tstring_f  = str_f;\n+\t\t\tdi = make_dictionary(compare_f);\n+\t\t\tappend_error(di == ((void*)0) , \"dict internal\");\n+\t\t\tif (di == ((void*)0) ) {\n+\t\t\t\tdict_perror(\"build dictionary\");\n+\t\t\t\texit(errno);\n+\t\t\t}\n+\t\t\tcount = 1;\n+\t\t}\n+\t\t~internal()\n+\t\t{\n+\t\t\tif (799  >=  800 ) cout <<  \"dict ~internal executing\"  << '\\n'; ;\n+\t\t\tint err = clear_dictionary(di, destroy_f, (&__iob[2]) );\n+\t\t\tappend_error(err, \"clear dictionary\");\n+\t\t\tif (err) dict_perror(\"dict ~internal\");\n+\t\t\tfree((void *)di);\n+\t\t}\n+\t};// ERROR - candidate list for bad call\n+\tinternal *rep;\n+protected:\n+\tint & errno()         { return( rep->errno );     }\n+\tCOMPARE compare_f()   { return( rep->compare_f ); }\n+\tDISPLAYER display_f() { return( rep->display_f ); }\n+\tDESTROYER destroy_f() { return( rep->destroy_f ); }\n+\tSTRINGER string_f()   { return( rep->string_f  ); }\n+\tvoid append_error(int expr, const char *proc)\n+\t{\n+\t\trep->append_error(expr, proc);\n+\t}\n+\tvoid obj_error(int expr, const char *proc, const void *obj)\n+\t{\n+\t\trep->obj_error(expr, proc, obj);\n+\t}\n+public:\n+\tstatic int err;\n+\tstatic int val;\n+\tstatic void *p;\n+\tdict()\n+\t{\n+\t\tif (799  >=  800 ) cout <<  \"Default constructor executing...\"  << '\\n'; ;\n+\t\trep = new internal( &default_compare,   &null_destroy,\n+\t\t\t\t    &default_displayer, &default_stringer);// ERROR - no matching fn call\n+\t}\n+\tdict(COMPARE cmp,\n+\t     DESTROYER destroyer = ((void*)0) ,\n+\t     DISPLAYER displayer = &default_displayer,\n+\t     STRINGER str_f = &default_stringer)\n+\t{// ERROR - invalid type for default argument -- not expecting const\n+\t\trep = new internal(cmp, destroyer, displayer, str_f);\n+\t}\n+\tdict(const dict &di2)\n+\t{\n+\t\trep = di2.rep;\n+\t\trep->count ++;\n+\t\tif (799  >=  800 ) cout <<  \"Incrementing count to \" << rep->count  << '\\n'; ;\n+\t}\n+\tdict & operator = (const dict &di2)\n+\t{\n+\t\tdi2.rep->count ++;   \n+\t\tif (799  >=  800 ) cout <<  \"Incrementing di2 count to \" << di2.rep->count  << '\\n'; ;\n+\t\tif (799  >=  800 ) cout <<  \"Decrementing lvalue count to \" << rep->count-1  << '\\n'; ;\n+\t\tif (--rep->count <= 0) {\n+\t\t\tdelete rep;\n+\t\t}\n+\t\trep = di2.rep;\n+\t\treturn( *this );\n+\t}\n+\t~dict()\n+\t{\n+\t\tif (799  >=  800 ) cout <<  \"~dict executing...\"  << '\\n'; ;\n+\t\tif (799  >=  800 ) cout <<  \"Decrementing dict::internal count to \" << rep->count-1  << '\\n'; ;\n+\t\tif (--rep->count <= 0) delete rep;\n+\t}\n+\tint insert(POINTER item)\n+\t{\n+\t\terr = dict_insert(item, rep->di);\n+\t\tobj_error(err, \"insert\", item);\n+\t\treturn errno();\n+\t}\n+\tint remove(POINTER item)\n+\t{\n+\t\terr = dict_delete(item, rep->di);\n+\t\tobj_error(err, \"remove\", item);\n+\t\treturn errno();\n+\t}\n+\tPOINTER access(POINTER item)\n+\t{\n+\t\tp = dict_access(item, rep->di);\n+\t\tobj_error(p == ((void*)0) , \"access\", item);\n+\t\treturn(p);\n+\t}\n+\tPOINTER low()\n+\t{\n+\t\tp = dict_low(rep->di);\n+\t\tappend_error(p == ((void*)0) , \"low\");\n+\t\treturn(p);\n+\t}\n+\tPOINTER nlow()\n+\t{\n+\t\tp = dict_nlow(rep->di);\n+\t\tappend_error(p == ((void*)0) , \"nlow\");\n+\t\treturn(p);\n+\t}\n+\tPOINTER big()\n+\t{\n+\t\tp = dict_big(rep->di);\n+\t\tappend_error(p == ((void*)0) , \"big\");\n+\t\treturn(p);\n+\t}\n+\tPOINTER nbig()\n+\t{\n+\t\tp = dict_nbig(rep->di);\n+\t\tappend_error(p == ((void*)0) , \"nbig\");\n+\t\treturn(p);\n+\t}\n+\tPOINTER first()\n+\t{\n+\t\tp = dict_first(rep->di);\n+\t\tappend_error(p == ((void*)0) , \"first\");\n+\t\treturn(p);\n+\t}\n+\tPOINTER last()\n+\t{\n+\t\tp = dict_last(rep->di);\n+\t\tappend_error(p == ((void*)0) , \"last\");\n+\t\treturn(p);\n+\t}\n+\tPOINTER next()\n+\t{\n+\t\tp = dict_next(rep->di);\n+\t\tappend_error(p == ((void*)0) , \"next\");\n+\t\treturn(p);\n+\t}\n+\tPOINTER prev()\n+\t{\n+\t\tp = dict_prev(rep->di);\n+\t\tappend_error(p == ((void*)0) , \"prev\");\n+\t\treturn(p);\n+\t}\n+\tint clear(DESTROYER destroy, FILE *fp = (&__iob[2]) )\n+\t{\n+\t\terr = clear_dictionary(rep->di, destroy, fp);\n+\t\tappend_error(err, \"clear\");\n+\t\treturn errno();\n+\t}\n+\tint clear(FILE *fp = (&__iob[2]) )\n+\t{\n+\t\terr = clear_dictionary(rep->di, rep->destroy_f, fp);\n+\t\tappend_error(err, \"clear\");\n+\t\treturn errno();\n+\t}\n+\tint size()\n+\t{\n+\t\tval = dict_size(rep->di);\n+\t\tappend_error(val < 0, \"size\");\n+\t\treturn(val);\n+\t}\n+\tPOINTER elem(int index)\n+\t{\n+\t\tp = dict_elem(index, rep->di);\n+\t\tappend_error(p == ((void*)0) , \"elem\");\n+\t\treturn(p);\n+\t}\n+\tint compare(dict &di2)\n+\t{\n+\t\tval = dict_compare(rep->di, di2.rep->di);\n+\t\treturn(val);\n+\t}\n+\tint height()\n+\t{\n+\t\tval = dict_height(rep->di);\n+\t\tappend_error(val < 0, \"height\");\n+\t\treturn(val);\n+\t}\n+\tconst char * version()\n+\t{\n+\t\treturn( dict_version() );\n+\t}\n+\tvoid display(FILE *fp = (&__iob[1]) )\n+\t{\n+\t\tdict_print_stats(fp, rep->di);\n+\t}\n+\tvoid print(FILE *fp = (&__iob[1]) , traversal_t tr = INORDER)\n+\t{\n+\t\tfprintf(fp, \"====== DICTIONARY (count=%d) ======\\n\",\n+\t\t\trep->count);\n+\t\tdict_print(fp, rep->di, tr, rep->display_f);\n+\t}\n+\tvoid print(traversal_t tr, FILE *fp = (&__iob[1]) )\n+\t{\n+\t\tfprintf(fp, \"====== DICTIONARY (count=%d) ======\\n\",\n+\t\t\trep->count);\n+\t\tdict_print(fp, rep->di, tr, rep->display_f);\n+\t}\n+\tvoid error(const char *s = \"class dict\")\n+\t{\n+\t\tdict_errno = errno();\n+\t\tdict_perror(s);\n+\t\terrno() = 0;\n+\t}\n+\tvoid error_append(const char *s = \"class dict\")\n+\t{\n+\t\tdict_append_perror(s);\n+\t}\n+\tconst char * errstring()\n+\t{\n+\t\treturn( dict_errstring() );\n+\t}\n+};\n+ostream & operator << (ostream & fp, traversal_t tr);\n+class queue : public object {\n+\tclass internal {\n+\tpublic:\n+\t\tQUEUE Q;\n+\t\tQUEUE Q2;\n+\t\tint errno;\n+\t\tDISPLAYER display_f;\n+\t\tDESTROYER destroy_f;\n+\t\tSTRINGER string_f;\n+\t\tint count;\n+\t\tswap()\n+\t\t{\n+\t\t\tQUEUE tmp = Q;\n+\t\t\tQ = Q2;\n+\t\t\tQ2 = tmp;\n+\t\t}\n+\t\tvoid append_error(int expr, const char *proc)\n+\t\t{\n+\t\t\tif (expr) queue_append_perror(proc);\n+\t\t\terrno = queue_errno;\n+\t\t}\n+\t\tvoid obj_error(int expr, const char *proc, const void *obj)\n+\t\t{\n+\t\t\tif (expr) {\n+\t\t\t\tqueue_append_perror((*string_f)(obj));\n+\t\t\t\tqueue_append_perror(proc);\n+\t\t\t}\n+\t\t\terrno = queue_errno;\n+\t\t}\n+\t\tinternal(DESTROYER destroyer,\n+\t\t         DISPLAYER displayer, STRINGER str_f)\n+\t\t{// ERROR - candidate for bad call\n+\t\t\tif (799  >=  800 ) cout <<  \"Creating new queue...\"  << '\\n'; ;\n+\t\t\tif (displayer == ((void*)0) ) displayer = &default_displayer;\n+\t\t\tif (str_f == ((void*)0) )     str_f = &default_stringer;\n+\t\t\tdisplay_f = displayer;\n+\t\t\tdestroy_f = destroyer;\n+\t\t\tstring_f  = str_f;\n+\t\t\tQ = make_queue();\n+\t\t\tappend_error(Q == ((void*)0) , \"queue internal\");\n+\t\t\terrno = queue_errno;\n+\t\t\tif (Q == ((void*)0) ) {\n+\t\t\t\tqueue_perror(\"build queue\");\n+\t\t\t\texit(errno);\n+\t\t\t}\n+\t\t\tQ2 = make_queue();\n+\t\t\tappend_error(Q2 == ((void*)0) , \"queue internal\");\n+\t\t\tif (Q2 == ((void*)0) ) {\n+\t\t\t\tqueue_perror(\"build second queue\");\n+\t\t\t\texit(errno);\n+\t\t\t}\n+\t\t\tcount = 1;\n+\t\t}\n+\t\t~internal()\n+\t\t{\n+\t\t\tif (799  >=  800 ) cout <<  \"queue ~internal executing\"  << '\\n'; ;\n+\t\t\twhile ((p = queue_remove(Q)) != ((void*)0) ) {\n+\t\t\t\tif (destroy_f != ((void*)0) ) {\n+\t\t\t\t\t(*destroy_f)((POINTER)&p, (&__iob[2]) );\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tqueue_errno = 0;\n+\t\t\tqueue_destroy((POINTER)&Q, (&__iob[2]) );\n+\t\t\tif (queue_errno) {\n+\t\t\t\tappend_error(queue_errno,\n+\t\t\t\t\t     \"queue_destroy(Q)\");\n+\t\t\t\tqueue_perror(\"queue ~internal\");\n+\t\t\t}\n+\t\t\tqueue_errno = 0;\n+\t\t\tqueue_destroy((POINTER)&Q2, (&__iob[2]) );\n+\t\t\tif (queue_errno) {\n+\t\t\t\tappend_error(queue_errno,\n+\t\t\t\t\t     \"queue_destroy(Q2)\");\n+\t\t\t\tqueue_perror(\"queue ~internal\");\n+\t\t\t}\n+\t\t}\n+\t};// ERROR - list of candidates for bad call\n+\tinternal *rep;\n+protected:\n+\tint & errno()         { return( rep->errno );     }\n+\tDISPLAYER display_f() { return( rep->display_f ); }\n+\tDESTROYER destroy_f() { return( rep->destroy_f ); }\n+\tSTRINGER string_f()   { return( rep->string_f  ); }\n+\tvoid append_error(int expr, const char *proc)\n+\t{\n+\t\trep->append_error(expr, proc);\n+\t}\n+\tvoid obj_error(int expr, const char *proc, const void *obj)\n+\t{\n+\t\trep->obj_error(expr, proc, obj);\n+\t}\n+public:\n+\tstatic int err;\n+\tstatic int val;\n+\tstatic void *p;\n+\tqueue()\n+\t{\n+\t\tif (799  >=  800 ) cout <<  \"Default constructor executing...\"  << '\\n'; ;\n+\t\trep = new internal( &null_destroy,\n+\t\t\t\t    &default_displayer, &default_stringer);// ERROR - no matching fn for call\n+\t}\n+\tqueue(DESTROYER destroyer = ((void*)0) ,\n+\t      DISPLAYER displayer = &default_displayer,\n+\t      STRINGER str_f = &default_stringer)\n+\t{// ERROR - invalid type for default argument -- not expecting const \n+\t\trep = new internal(destroyer, displayer, str_f);\n+\t}\n+\tqueue(const queue &Q2)\n+\t{\n+\t\trep = Q2.rep;\n+\t\trep->count ++;\n+\t\tif (799  >=  800 ) cout <<  \"Incrementing count to \" << rep->count  << '\\n'; ;\n+\t}\n+\tqueue & operator = (const queue &Q2)\n+\t{\n+\t\tQ2.rep->count ++;   \n+\t\tif (799  >=  800 ) cout <<  \"Incrementing Q2 count to \" << Q2.rep->count  << '\\n'; ;\n+\t\tif (799  >=  800 ) cout <<  \"Decrementing lvalue count to \" << rep->count-1  << '\\n'; ;\n+\t\tif (--rep->count <= 0) {\n+\t\t\tdelete rep;\n+\t\t}\n+\t\trep = Q2.rep;\n+\t\treturn( *this );\n+\t}\n+\t~queue()\n+\t{\n+\t\tif (799  >=  800 ) cout <<  \"~queue executing...\"  << '\\n'; ;\n+\t\tif (799  >=  800 ) cout <<  \"Decrementing queue::internal count to \" << rep->count-1  << '\\n'; ;\n+\t\tif (--rep->count <= 0) delete rep;\n+\t}\n+\tvoid error(const char *s = \"class queue\")\n+\t{\n+\t\tqueue_errno = errno();\n+\t\tqueue_perror(s);\n+\t\terrno() = 0;\n+\t}\n+\tvoid error_append(const char *s = \"class queue\")\n+\t{\n+\t\tqueue_append_perror(s);\n+\t}\n+\tconst char * errstring()\n+\t{\n+\t\treturn( queue_errstring() );\n+\t}\n+\tint append(POINTER item)\n+\t{\n+\t\terr = queue_append(rep->Q, (POINTER)item);\n+\t\tobj_error(err, \"append\", item);\n+\t\treturn errno();\n+\t}\n+\tPOINTER remove()\n+\t{\n+\t\tp = queue_remove(rep->Q);\n+\t\tappend_error(p == ((void*)0) , \"remove\");\n+\t\treturn(p);\n+\t}\n+\tPOINTER look(POINTER item)\n+\t{\n+\t\tp = queue_look(rep->Q);\n+\t\tappend_error(p == ((void*)0) , \"look\");\n+\t\treturn(p);\n+\t}\n+\tPOINTER last(POINTER item)\n+\t{\n+\t\tp = queue_last(rep->Q);\n+\t\tappend_error(p == ((void*)0) , \"last\");\n+\t\treturn(p);\n+\t}\n+\tint size()\n+\t{\n+\t\tval = queue_size(rep->Q);\n+\t\tappend_error(val < 0, \"size\");\n+\t\treturn(val);\n+\t}\n+\tconst char * version()\n+\t{\n+\t\treturn( queue_version() );\n+\t}\n+\tvoid display(FILE *fp = (&__iob[1]) )\n+\t{\n+\t\tint i = 1;\n+\t\tPOINTER ptr;\n+\t\tfprintf(fp, \"====== QUEUE DISPLAY (size %d) ======\\n\",\n+\t\t\tsize());\n+\t\twhile (ptr = remove()) {\n+\t\t\terr = queue_append(rep->Q2, ptr);\n+\t\t\tif (err) {\n+\t\t\t\tobj_error(err, \"append\", ptr);\n+\t\t\t\terror(\"queue_append(rep->Q2)\");\n+\t\t\t}\n+\t\t\tfprintf(fp, \"[%d] \", i++);\n+\t\t\t(*rep->display_f)(ptr, fp, (&__iob[2]) );\n+\t\t}\n+\t\trep->swap();\n+\t}\n+};\n+long object::current_id = 0;\n+long object::next_id()\n+{\n+\treturn( ++current_id );\n+}\n+void object::display2(ostream & fp) const\n+{\n+\tfp << \"object #\" << id;\n+}\n+ostream & operator << (ostream & fp, object & obj)\n+{\n+\tobj.display(fp);\n+\treturn(fp);\n+}\n+int object::compare(const void *p2) const\n+{\n+\tconst object & z2 = *(const object *) p2;\n+\tif (799  >=  1000 ) cout <<  \"*** object::compare \" << *this << \" with \" << z2  << '\\n'; ;\n+\treturn( id - z2.id );\n+}\n+int operator < (object & obj1, object & obj2)\n+{\n+\tif (obj1.compare( &obj2 ) < 0) return(1);\n+\telse return(0);\n+}\n+int operator <= (object & obj1, object & obj2)\n+{\n+\tif (obj1.compare( &obj2 ) <= 0) return(1);\n+\telse return(0);\n+}\n+int operator > (object & obj1, object & obj2)\n+{\n+\tif (obj1.compare( &obj2 ) > 0) return(1);\n+\telse return(0);\n+}\n+int operator >= (object & obj1, object & obj2)\n+{\n+\tif (obj1.compare( &obj2 ) >= 0) return(1);\n+\telse return(0);\n+}\n+int operator == (object & obj1, object & obj2)\n+{\n+\tif (obj1.compare( &obj2 ) == 0) return(1);\n+\telse return(0);\n+}\n+int operator != (object & obj1, object & obj2)\n+{\n+\tif (obj1.compare( &obj2 ) != 0) return(1);\n+\telse return(0);\n+}\n+void null_destroy(void *p, FILE *errorFile)\n+{\n+}\n+int object_compare(const void *p1, const void *p2)\n+{\n+\tconst object *obj1 = (const object *) p1;\n+\tif (799  >=  1000 ) cout <<   \"*** Comparing \" << *obj1 << \" to address \" << long(p2)  << '\\n'; ;\n+\treturn( obj1->compare(p2) );\n+}\n+void object_display(const void *p, FILE *fp, FILE *errorFile)\n+{\n+\tcout << *(object *)p << '\\n';\n+}\n+void object_destroy(void *p, FILE *errorFile)\n+{\n+\tobject **pObj = (object **)p;\n+\tobject *obj = *pObj;\n+\tif (obj == ((void*)0) ) {\n+\t\tif (799  >=  10 ) cout <<   \"+ object_destroy: NIL object passed in\"  << '\\n'; ;\n+\t\treturn;\n+\t}\n+\tif (799  >=  998 ) cout <<   \"+ object_destroy: delete obj:\"  << '\\n'; ;\n+\tif (799  >=  998 ) cout <<   *obj  << '\\n'; ;\n+\tif (799  >=  998 ) cout <<   \"====================================================\"  << '\\n'; ;\n+\tdelete obj;\n+\t*pObj = ((void*)0) ;\n+}\n+int default_compare(const void *p1, const void *p2)\n+{\n+\tlong L1 = long(p1);\n+\tlong L2 = long(p2);\n+\tif (799  >=  1000 ) cout <<  \"+ default_compare \" << long(p1) << ',' << long(p2)  << '\\n'; ;\n+\tif (L1 < L2) return(-1);\n+\telse if (L1 > L2) return(1);\n+\telse return(0);\n+}\n+const char * default_stringer(const void *ptr)\n+{\n+\tstatic char buf[100];\n+\tsprintf(buf, \"ADDRESS %lu\", (unsigned long)ptr);\n+\treturn(buf);\n+}\n+void default_displayer(const void *ptr, FILE *fp, FILE *errorFile)\n+{\n+\tfprintf(fp, \"%s\\n\", default_stringer(ptr));\n+}\n+object::operator char *() const\n+{\n+\tconst int max = 10;\n+\tconst int maxChar = 16;\n+\tstatic char buf[max][maxChar];\n+\tstatic int index = 0;\n+\tchar *s = buf[index++ % max];\n+\tsprintf(s, \"object #%d\", id);\n+\treturn(s);\n+}\n+const char * object_stringer(const void *ptr)\n+{\n+\tobject & obj = *(object *)ptr;\n+\treturn((char *)obj);\n+}\n+int dict::err;\n+int dict::val;\n+POINTER dict::p;\n+ostream & operator << (ostream & fp, traversal_t tr)\n+{\n+\tfp << traversal_string(tr);\n+\treturn(fp);\n+}\n+int queue::err;\n+int queue::val;\n+POINTER queue::p;"}, {"sha": "ad6e04029cc014fa915c17bcbb89e7187c14d6d0", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+// The compiler used to crash on this example.\n+\n+class x {\n+public:\n+  x();\n+  static const x y[23];\n+};\n+const x x::y[23];"}, {"sha": "060be1c39f4d0e5b29747c959d0dba3091284b5b", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash20.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash20.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,13 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+#include <Complex.h>\n+\n+Complex ComputeVVself()\n+{\n+Complex temp1;\n+Complex self[3][3];\n+\n+   self[1][2] = 100.0;\n+   return self[1][2];\n+\n+}"}, {"sha": "f7db97d43e9194a07182cdd71d41ee091c5c11d0", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash22.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash22.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+struct A {\n+    void a1();\n+    void a2();\n+};\n+\n+struct B {\n+    void A::a1(); // this used to die in chainon(), now grokdeclarator should// ERROR -  cannot declare.*\n+    void A::a2(); // should be fixed by the 930629 change.// ERROR -  cannot declare.*\n+};"}, {"sha": "03ffee666a3fb15fe4482837677063b5b3a61dcb", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash23.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash23.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+// This used to die in chainon; it shouldn't any more.\n+\n+class A\n+{\n+public:\n+  class B {\n+  public:\n+    void f ();\n+    void g (int);\n+  };\n+  void B::f () {}// ERROR - .*\n+  void B::g (int val) {}// ERROR - .*\n+};"}, {"sha": "af1c3010229f1b929c77157770f9840a9edcbaa4", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash24.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash24.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,19 @@\n+// Build don't link: \n+// Special g++ Options: -O\n+// GROUPS passed old-abort\n+// gcc puts the array into a register, and then the store_bit_field () code\n+// in expmed.c gets confused when it tries to store zero past the end of the\n+// register (because the index is past the array bounds).   It ends up calling\n+// store_split_bit_field, which then aborts, because we don't have a split bit\n+// field.\n+//\n+// Seems easiest to detect this case in the front end, i.e. access outside the\n+// array bounds, and then force the array to be allocated on the stack instead\n+// of a register.\n+\n+main()\n+{\n+  char i[1];\n+\n+  i[1] = 0;\n+}"}, {"sha": "625eaf8470772d8e6e7c4317fcad3d82fef333eb", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash25.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash25.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,18 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class memo{\n+public:\n+\tstatic int rep;\n+};\n+\n+class port_head : public memo {\n+public:\n+\tstatic \tint rep;\n+\tunsigned cap();\n+};\n+\n+class buff_head : private port_head {\n+public:\n+\tstatic int rep;\n+\tport_head::cap;\n+};"}, {"sha": "9b6643debe4895e670ef87de526a2b830df84f8e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash26.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash26.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+struct B {\n+    B();\n+};\n+ \n+class C : virtual public B\n+{\n+  public:\n+    C() { }\n+};"}, {"sha": "62acbe03e1991553f838354fa628361c9d8de04c", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash27.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash27.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,20 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class First {\n+public:\n+  First(const First& a);\n+};\n+\n+class Second {\n+  int i;\n+  First f;\n+public:\n+  ~Second() {}\n+  Second func();\n+};\n+\n+void foo()\n+{\n+  extern Second x;\n+  x = x.func();\n+}"}, {"sha": "08adee9308a54934522d9f9e33a01c0a37a1f823", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash28.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash28.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,12 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+    class abc\n+    {\n+     public: \n+      void F()       { return; }\n+\n+     private:\n+      typedef int myint;\n+      typedef struct { int b; } mystruct;\n+      typedef union  { int c; } myunion;\n+    };"}, {"sha": "855dd990be190f39a68942bc2cb0623f34b8a149", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash29.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash29.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,18 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+\n+union Value\n+{\n+\tValue(){}\n+};\n+\n+struct GlobalAddress\n+{\n+\tGlobalAddress(Value *nvar){}// ERROR - .*\n+};// ERROR -  candidates .*\n+\n+main()\n+{\n+\tnew GlobalAddress(Value());\t\t// internal error occured here// ERROR -  no matching function .*\n+\t//new GlobalAddress(new Value());\t// This line is correct code\n+}"}, {"sha": "b3b8354b5436f61afe8efe94568a37e67e856a92", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash3.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+int\tstrcmp();\n+\n+extern \"C\" {\n+      // dies in common_type, cuz the TREE_TYPE of t2 is 0, so it can't get its\n+      // TYPE_MAIN_VARIANT value.\n+      // <void_type 184510 void permanent VOID\n+      //  size <integer_cst 1844e0 type <integer_type 182548 int> constant permanent 0\n+      //    align 1 symtab 0\n+      //    pointer_to_this <pointer_type 1845e0>\n+\n+int       strcmp(const char*, const char*);\n+}"}, {"sha": "ac73525536e35ff7e7a1e2841f6d3394b9d8915d", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash30.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash30.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,9 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+#include <String.h>\n+\n+main(void) {\n+\n+  String a[] = {\"Hello\"};\n+\n+}"}, {"sha": "d5b7e541e8a4c3ad08429ebf0bf82acf4a72f99c", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash31.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash31.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,16 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+struct mbuf {\n+\tstruct mbuf *next;\n+};\n+\n+void* malloc(int);\n+struct mbuf *\n+mbuf_allocate(int size)\n+{\n+    struct mbuf *bp;\n+\n+    bp = (struct mbuf *) malloc( 10 /*(unsigned) (size + sizeof(struct mbuf))*/);\n+    return bp;\n+\n+}"}, {"sha": "ebca5a4f6fab12dd59fd2e003cee0ee3b68ac79e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash32.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash32.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,5 @@\n+// Build don't link: \n+// Special g++ Options: -fshort-enums\n+// GROUPS passed old-abort\n+enum Bool { FALSE, TRUE };\n+Bool foo () { return TRUE; }"}, {"sha": "061f5a917943a765d7e7a81cfc00392fbbf7c1f0", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash33.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash33.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+extern void foo(void *);\n+main() {\n+\tfoo((struct bar *)0);\n+}"}, {"sha": "a147b6219df624265d2551edcc95bb5972fb87d2", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash34.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash34.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,3 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+operator int () {}// ERROR - .*// ERROR - .*"}, {"sha": "e32b7c13b5906f68f43fc2f8ee786249bf88450d", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash35.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash35.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,20 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+const unsigned int ENET_INTERRUPT_MID = 5;\n+\n+extern \"C\" void ENET_RxP();\n+\n+class EnetReceiver\n+    {\n+    public:\n+        friend void ENET_RxP();\n+        void  receiveMessage();\n+        int *messagePointer;\n+    };\n+\n+void EnetReceiver::receiveMessage()\n+    {\n+    if (*((unsigned int*) messagePointer) == ENET_INTERRUPT_MID)\n+        {\n+        }\n+    }"}, {"sha": "10534535405ffb9954c56d1db040b693036bb848", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash36.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash36.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,7 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+struct wait { int w_status; };\n+int wait();\n+extern \"C\" int wait(int*);\n+\n+"}, {"sha": "18eb64a7683149ee5f8c992380c23bab3e592812", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash37.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash37.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,16 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+typedef int _sigset_t;\n+extern \"C\" {\n+        extern int sigaction(int signo, const struct sigaction *action_spec_p, struct sigaction *old_action_p);\n+}\n+extern \"C\" {\n+        extern void foo();\n+};\n+class SS {\n+        friend void foo();\n+protected:\n+        void goo();\n+};\n+inline void\n+SS::goo() { }"}, {"sha": "d124c21e4a96ea4f632582efa214f2e52c53cb88", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash38.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash38.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,42 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+/*\n+   I received the following message when using g++ (version 2.3.3):\n+\n+   main.cc: In method 'Implicit<implicit<INTEGER,2>,3>::Implicit()':\n+   main.cc: Internal compiler error 241.\n+   main.cc: Please report this to 'bug-g++@prep.ai.mit.edu'\n+   */\n+\n+#include <stream.h>\n+\n+class INTEGER {\n+int x;\n+public:\n+   typedef int BASE;\n+   INTEGER(int y) : x(y) {}\n+   INTEGER() {}\n+   void encode() { cout << \"Integer encoder\";}\n+   int operator=(int y) { x=y; return x; }\n+   operator int() {return x; }\n+};\n+\n+template< class T,  int n> class Implicit : public T {\n+   public:\n+     typedef typename T::BASE BASE;\n+     Implicit(BASE value ): T(value) {};\n+     Implicit() : T() {};\n+     int myTag() { return n; }\n+     void encode() { T::encode(); }\n+     BASE operator=(BASE t) { return T::operator=(t); }\n+};\n+\n+main() \n+{\n+  Implicit<Implicit<INTEGER, 2> ,  3> y;\n+\n+  y = 10;\n+};\n+\n+\n+"}, {"sha": "f267abd61476d093bc399d51ef0b46f77c8efdb5", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash39.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash39.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,8 @@\n+// Build don't link: \n+// Special g++ Options: -w\n+// GROUPS passed old-abort\n+#include <GetOpt.h>\n+#include <String.h>\n+class foo {public: foo () {}};\n+class bar {public: bar (foo& dflt);};\n+class baz: public bar {public: baz (): bar (foo ()) {}};"}, {"sha": "1f8a3ffc5324f775ac10870dae5c0124f7d5bf71", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash4.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash4.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+typedef struct Thing {\n+\t\tThing();\n+\tint\tx;\n+} Thing;"}, {"sha": "dcebfbebade8560af0cea6be5cbb47bb1a7c2f68", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash40.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash40.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,17 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class foo {\n+\n+public:\n+\n+\tvirtual foo &operator <<(foo &(foo::*)(foo &));\n+};\n+\n+\n+foo &foo::operator<<(foo &(foo::*manip)(foo &))\n+{\n+ \n+   (this->*manip)(*this);\n+ \n+   return *this;\n+}"}, {"sha": "5d533b866e28e75f3a8694ceb2618bf0fa5c45a3", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash41.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash41.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+typedef void (**ppfn)(void);\n+\n+int main() {\n+    ppfn fn;\n+\n+    fn = new (void(*)(void));\n+\n+    return 0;\n+}"}, {"sha": "1b92f5d858d84ed144a1011aca40684a6cca34a2", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash42.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash42.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,6 @@\n+// GROUPS passed old-abort\n+// Build don't link: \n+int fn();// ERROR -  ambiguates.*\n+int x;\n+int& fn() {// ERROR -  new decl.*\n+return x;}"}, {"sha": "5fe54231c89c6127a7ef4eea99f0b2303d8d3e88", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash43.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash43.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,25 @@\n+// Build don't link: \n+// Special g++ Options: -g -fno-strict-prototype\n+// GROUPS passed old-abort\n+// excess errors test - XFAIL sparc64-*-elf\n+extern \"C\" { typedef int jmp_buf[12]; }\n+\n+enum Error { NO_ERROR };\n+class ErrorHandler\n+{\n+    ErrorHandler *previous;\n+    static ErrorHandler *error_stack;\n+    jmp_buf error_buffer;\n+protected:\n+    static void pop()\n+    {\n+\terror_stack = error_stack->previous;\n+    }\n+public:\n+    jmp_buf *push()\n+    {\n+\tprevious = error_stack;\n+\terror_stack = this;\n+\treturn &error_buffer;\n+    }\n+};"}, {"sha": "dd35619091370dd234ca296b63227355e603685e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash44.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash44.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,26 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+template <class T> class bug {\n+\n+public:\n+    void\t\tFoo(const int = 0);\n+    void\t\tNotRedeclared(const int);\n+\n+private:\n+\tT\t\tTheItem;\n+};\n+\n+template <class T> void bug<T>::NotRedeclared(const int)\n+{\n+}\n+\n+template <class T> void bug<T>::Foo(const int)\n+{\n+}\n+\n+main()\n+{\n+\tbug<char>\tInstantiatedBug;\n+\n+\treturn 0;\n+}"}, {"sha": "269a51908b254910423d3f80dccb5a8bad4c1b7f", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash45.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash45.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash45.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash45.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,3 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+void foo() { static const char *const v[] = { 0 }; }"}, {"sha": "64d8d59ce2184f75f7db3287f9b32dc5b1e36d3e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash46.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash46.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,26 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class Rational {\n+public:\n+    Rational(int v): value(v)\n+\t{  }\n+\n+    int value;\n+};\n+typedef Rational __Rational;\n+\n+extern int operator>(const Rational&, const Rational&);\n+\n+class V {\n+public:\n+    class Rational {\n+    public:\n+\tstatic int x(const __Rational& value);\n+    };\n+};\n+\n+int\n+V::Rational::x(const __Rational& value)\n+{\n+    return value > 0;\n+}"}, {"sha": "daf2bd8b74bd041e13a161d6d7a40a6473746c5b", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash47.C", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash47.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash47.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash47.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,93 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+const int TRUE = 1;\n+const int FALSE = 0;\n+\n+class Rep {\n+protected:\n+    Rep(): count(0)\n+\t{ }\n+    Rep(const Rep& other): count(0)\n+\t{ }\n+\n+    Rep& operator=(const Rep& other)\n+\t{ /* DO NOT copy over other.count */\n+\t  return *this; }\n+\n+public:\t\t// TODO - for now\n+    // Because it is to hard to restrict these operations to the descendants\n+    // of Rep<REP> that we haven't named yet.  So we just make them public.\n+    void inc()\n+\t{ count++; }\n+    void dec()\n+\t{ if (0 == --count) delete this; }\n+private:\n+    unsigned count;\n+};\n+\n+template<class REP>\n+class Ref {\n+public:\n+    Ref(): rep(0)\n+\t{ }\n+    Ref(const Ref<REP>& other): rep(other.rep)\n+\t{ if (rep) rep->inc(); }\n+    ~Ref()\n+\t{ if (rep) rep->dec();\n+\t  rep = 0; }\n+\n+    Ref<REP>& operator=(const Ref<REP>& other)\n+\t{ if (rep != other.rep) {\n+\t    if (rep) rep->dec();\n+\t    rep = other.rep;\n+\t    if (rep) rep->inc(); }\n+\t  return *this; }\n+\n+    bool null() const\n+\t{ return 0 == rep ? TRUE: FALSE; }\n+    bool valid() const\n+\t{ return 0 != rep ? TRUE: FALSE; }\n+\n+    REP* operator->() const\t\t// should be a valid() reference\n+\t{ return rep; }\n+    operator REP*() const;\t\t// should be a valid() reference\n+\n+protected:\n+    REP *rep;\n+\n+    Ref(REP *r): rep(r)\n+\t{ if (rep) rep->inc(); }\n+\n+    Ref<REP>& operator=(REP *r)\n+\t{ if (rep != r) {\n+\t    if (rep) rep->dec();\n+\t    rep = r;\n+\t    if (rep) rep->inc(); }\n+\t  return *this; }\n+};\n+\n+template<class REP>\n+Ref<REP>::operator REP*() const\t\t// should be a valid() reference\n+{ return rep; }\n+\n+template<class REP> \n+inline int\n+operator==(const Ref<REP>& a, const Ref<REP>& b)\n+{ return (REP *) a == (REP *) b; }\n+\n+template<class REP> \n+inline int\n+operator!=(const Ref<REP>& a, const Ref<REP>& b)\n+{ return (REP *) a != (REP *) b; }\n+\n+class XRep: public Rep {\n+public:\n+    int i;\n+};\n+\n+main()\n+{\n+    Ref<XRep> y;\n+\n+    return y != y;\n+}"}, {"sha": "20882a80a5337041a23ad26adcc8915eead0ba39", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash48.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash48.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash48.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash48.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,21 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class internal {\n+\tint field;\n+\tint anotherfield;\n+}; // ERROR - candidates are\n+\n+class bug {\n+\tinternal* numbers;\n+\tbug(int size);\n+}; // ERROR - several errors\n+\n+bug::bug(int size)\n+{ // ERROR - candidates\n+\tnumbers = new internal(size * size);// ERROR -  no match.*\n+}\n+\n+main()\n+{\n+\tbug test;// ERROR -  no match\n+}"}, {"sha": "5a8e11f4a42ca64712ddd973afcfc54fbae7bb62", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash49.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash49.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash49.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash49.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,12 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+#include<iostream.h>\n+\n+const /* int */ keys = 10;\n+const /* int */ key[keys] = {6, key[1], 2, keys, 1, 7, 6, key[2], key[8]};\n+\n+void main()\n+{ // ERROR - return type for main\n+        for(int i = 0; i < keys;) cout << key[i++] << \" \";\n+        endl(cout);\n+}"}, {"sha": "d884189f6b846c31815ae2e41b9c919195ee9135", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash5.C", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash5.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,106 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+// Should have been fixed by:\n+//\n+// Sun Jun 13 12:55:22 1993  Brendan Kehoe  (brendan@lisa.cygnus.com)\n+// \n+// \t* cp-cvt.c (build_default_binary_type_conversion): Look deeper into\n+// \twhat ARG1 and ARG2 are if they're POINTER_TYPEs.\n+\n+volatile void exit(int);\n+\n+class CountableSet\n+{\n+\tpublic:\n+\t\tvirtual\t~CountableSet() { }\t\t\n+};\t\n+\n+template<class T>\n+class FixedSet : virtual public CountableSet\n+{\n+\tpublic:\n+\t\tvirtual\tint Get(int, T&) = 0;\t\t \n+\t\tvirtual\t~FixedSet() { }\t\t\n+};\n+\n+class ShrinkableSet\n+{\n+\tpublic:\n+\t\tvirtual int Remove(int) = 0;   \n+};\n+\n+template<class T>\n+class PVSet : virtual public FixedSet<T>, virtual public ShrinkableSet\n+{\n+\tpublic:\n+\t\tvirtual\tvoid Append(const T&) = 0;\n+\t\tvirtual\tvoid operator+=(const T& a) { Append(a); }\n+\t\tvirtual\t~PVSet() { }\t\t\n+};\n+\n+template<class T>\n+class MutSet : virtual public FixedSet<T>, virtual public FixedSet<T *>\n+{\n+\tprotected:\n+\t\ttypedef\tT\t*Tp;\n+\n+\tpublic:\n+\t\tvoid Append(const Tp& tp) { Append(*tp); }\n+\n+\t\tT&\tAccess(int p)\n+\t\t{\n+\t\t\tTp\ttp;\n+\t\t\tGet(p, tp);\n+\t\t\treturn *tp;\n+\t\t}\n+\t\tvirtual\t~MutSet() { }\t\t\n+};\n+\n+template <class T>\n+class\tSimpleSet : virtual public MutSet<T>\n+{\n+\tprotected:\n+\t\tT\t*array;\n+\t\tint\tsize;\n+\n+\t\tvirtual\tvoid\tAllocate(int s)\n+\t\t{\n+\t\t\tarray = new T[s];\n+\t\t}\n+\tpublic:\n+\t\tSimpleSet()\n+\t\t{\n+\t\t\tsize = 0;\n+\t\t\tarray = ((void*)0) ; // ERROR - implicit conversion\n+\t\t}\n+ \t\tint\tGet(int p, T& t)\n+\t\t{\n+\t\t\tt = array[p-1];\n+\t\t\treturn 1;\n+\t\t}\n+\t\tint\tGet(int p, T *& t)\n+\t\t{\n+\t\t\tt = &array[p-1];\n+\t\t\treturn 1;\n+\t\t}\n+\t\tinline void Append(const T& a)\n+\t\t{\n+\t\t\tarray[size-1] = a;\n+\t\t}\n+\t\tinline int Remove(int n) { return 0; }\n+};\n+\n+class\tDummy\n+{\n+\tpublic:\n+\t\tDummy()\t{}\n+};\n+\n+main()\n+{\n+\tSimpleSet<Dummy *>\t\tbs1;\n+\tint\ti, j;\n+\tDummy\tfoo;\n+\n+\tbs1+=&foo;// ERROR -  no .*\n+}"}, {"sha": "58695a2a330dd1ee09bac5e969810d319636899b", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash50.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash50.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash50.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash50.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,29 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class B\n+        {\n+public:\n+        int i;\n+        };\n+int operator & (const B &s) { return ( s.i  );};\n+\n+\n+\n+\n+\n+class C\n+        {\n+public:\n+        C &operator = (const C &x)\n+                {\n+                return *this;\n+                };\n+        };\n+\n+C &(C::*DD)(const C &x) = &C::operator=;\n+\n+main()\n+{\n+        &DD;\n+\n+}"}, {"sha": "3586eb425f782f9afce00fc56cd56d234e0e20b3", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash51.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash51.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash51.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash51.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,24 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class obj;\n+\n+typedef obj *obj_t;\n+\n+class obj {\n+public:\n+    obj( const obj& o );\n+};   \n+\n+extern obj nowhere;\n+\n+class set: public obj {\n+    unsigned  bit_vector;\n+public:\n+    set( const obj& o );\n+    set&      operator|=( const int q );\n+};   \n+\n+enum pin_enum { E_F, O_C, O_D, O_S, P_D, P_U, R, T, A, C };\n+\n+set t_q = ( ( ( ( ( ( set( nowhere ) |= E_F ) |= O_C ) |= O_D ) |= O_S )\n+              |= P_U ) |= P_D ) |= T;"}, {"sha": "d10afdcc43d70f5e414728c4dcbd59a4514920d4", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash52.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash52.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,13 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+#include <iostream.h>\n+\n+class A {\n+public:\n+  friend A f(A &a);// ERROR -  ambiguates.*\n+};\n+\n+A &f(A &a) {// ERROR -  new decl.*\n+  cout << \"Blah\\n\";\n+} // ERROR - non-void function\n+"}, {"sha": "163f8e6ced769ac25fcadf62b1b214f5f1588335", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash53.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash53.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash53.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash53.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,24 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class A\n+{\n+  public:\n+    class B\n+    {\n+      public:\n+        virtual ~B();\n+    };\n+};\n+\n+template<int I>\n+class C\n+{\n+  public:\n+    class B\n+    : public A::B\n+    {\n+    }; // bug2.cc:18: Internal compiler error 233.\n+       // bug2.cc:18: Please submit a full bug report to `bug-g++@prep.ai.mit.edu'.\n+};\n+\n+C<0> c;"}, {"sha": "0b85fa1cc001c85fc56ce34003a29eec0b34c948", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash54.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash54.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash54.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash54.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,9 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+main()\n+{\n+    int a[100], **p;\n+\n+    p = &a[50];// ERROR -  assignment to.*\n+\n+}"}, {"sha": "47a74249ef61095b2f0f0af75a94d2441a13f021", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash55.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash55.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,12 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+      extern f(int);// ERROR -  ambiguates.*\n+\n+      int& f(int x)\n+      {// ERROR -  new declaration.*\n+          int local;// ERROR -  warning\n+\n+          local = x+2;\n+      \n+          return local;\n+      }"}, {"sha": "7b470678a78f8849372c54b66e6b3b3c489f44a5", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash56.C", "status": "added", "additions": 383, "deletions": 0, "changes": 383, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash56.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,383 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+const bool FALSE = 0;\n+const bool TRUE = 1;\n+class ListDProto {\n+public:\n+    ListDProto();\n+    ListDProto(const ListDProto&);\n+    virtual ~ListDProto();\n+    void operator=(const ListDProto&);\n+    unsigned length() const;\n+    bool empty() const;\n+    void clear();\n+    void remove_head();\n+    void remove_tail();\n+    class link;\n+    class Vix {\n+    public:\n+\tVix();\n+\tfriend int operator==(void *v, const Vix& x)\n+\t    { return v == x.item; }// ERROR - list of candidates\n+\tfriend int operator==(const Vix& x, void *v)\n+\t    { return v == x.item; }// ERROR - candidate for call\n+\tfriend int operator!=(void *v, const Vix& x)\n+\t    { return v != x.item; }\n+\tfriend int operator!=(const Vix& x, void *v)\n+\t    { return v != x.item; }\n+\tfriend int operator==(const Vix& x1, const Vix& x2)\n+\t    { return x1.owner == x2.owner && x1.item == x2.item; }// ERROR - candidate for call\n+\tfriend int operator!=(const Vix& x1, const Vix& x2)\n+\t    { return x1.owner != x2.owner || x1.item != x2.item; }\n+\tbool first;\t\t \n+\tbool last;\t\t \n+    protected:\n+        friend class ListDProto;\n+\tVix(const ListDProto *o, link *i);\n+\tconst ListDProto *owner;\n+    private:\n+\tlink *item;\n+    };\n+    enum Action { NORMAL, REMOVE_CURRENT };\n+    Vix first() const;\n+    void first(Vix& x) const;\n+    void next(Vix& x) const;// ERROR - candidate for call\n+    void next(Vix& x, Action a = NORMAL);// ERROR - list of candidates\n+    Vix last() const;\n+    void last(Vix& x) const;\n+    void prev(Vix& x) const;\n+    void prev(Vix& x, Action a = NORMAL);\n+protected:\n+    struct link {\n+\tlink *next;\n+\tlink *prev;\n+\tlink(link *n = 0, link *p = 0);\n+\tvirtual ~link();\n+    private:\n+\tlink(const link&);\n+\tvoid operator=(const link&);\n+    };\n+    unsigned count;\n+    link *list_head;\t\t \n+    link *list_tail;\t\t \n+    virtual link *copy_item(link *old_item) const = 0;\n+    void prepend(link *item);\n+    void append(link *item);\n+    void prepend(const ListDProto& proto);\n+    void append(const ListDProto& proto);\n+    void remove(link *item);\n+    link *ref(const Vix&) const;\n+};\n+template<class T>\n+class ListD: public ListDProto {\n+public:\n+    void prepend(const T& item);\n+    void append(const T& item);\n+    const T& head() const;\n+    T& head();\n+    void head(T& fill) const;\n+    void remove_head()\n+\t{ ListDProto::remove_head(); }\n+    void remove_head(T& fill);\n+    const T& tail() const;\n+    T& tail();\n+    void tail(T& fill) const;\n+    void remove_tail()\n+\t{ ListDProto::remove_tail(); }\n+    void remove_tail(T& fill);\n+    class Vix: public ListDProto::Vix {\n+    public:\n+\tVix(): ListDProto::Vix()\n+\t    { }\n+    protected:\n+        friend class ListD<T>;\n+\tVix(const ListDProto::Vix& x): ListDProto::Vix(x)\n+\t    { }\n+    };\n+    Vix first() const\n+\t{ return ListDProto::first(); };\n+    void first(Vix& x) const\n+\t{ ListDProto::first(x); };\n+    void next(Vix& x, ListDProto::Action a = NORMAL) const\n+\t{ ListDProto::next(x, a); }// ERROR - .*// ERROR - .*\n+    Vix last() const\n+\t{ return ListDProto::last(); }\n+    void last(Vix& x) const\n+\t{ return ListDProto::last(x); }\n+    void prev(Vix& x, ListDProto::Action a = NORMAL) const\n+\t{ return ListDProto::prev(x, a); }\n+protected:\n+    struct link_item: public ListDProto::link {\n+\tT item;\n+\tlink_item(const T& i): link(0, 0), item(i)\n+\t    { }\n+    private:\n+\tlink_item(const link_item&);\n+\tvoid operator=(const link_item&);\n+    };\n+public:\n+    T& operator()(const Vix& x)\n+\t{ link_item *li = (link_item *) ref(x);\n+\t  return li->item; }\n+    const T& operator()(const Vix& x) const\n+\t{ link_item *li = (link_item *) ref(x);\n+\t  return li->item; }\n+private:\n+    ListDProto::link *copy_item(ListDProto::link *old_item) const;\n+};\n+template<class T>\n+class SetLD: private ListD<T> {\n+public:\n+    SetLD();\t\t\t \n+    SetLD(const ListD<T>&);\t \n+    void add(const T& item);\n+    void add(const ListD<T>& other);\n+    void add(const SetLD<T>& other);\n+    void remove(const T& item);\n+    bool contains(const T& item) const;\n+    ListD<T>::length;\n+    ListD<T>::empty;\n+    ListD<T>::clear;\n+    typedef ListD<T>::Vix Vix;\n+    ListD<T>::first;\n+    ListD<T>::next;\n+    ListD<T>::operator();\n+};\n+extern \"C\" {\n+extern void __eprintf (const char *, const char *, unsigned, const char *);\n+}\n+extern \"C\" {\n+extern void __eprintf (const char *, const char *, unsigned, const char *);\n+}\n+template<class T>\n+void\n+ListD<T>::prepend(const T& item)\n+{\n+    link *newl = new link_item(item);\n+    ListDProto::prepend(newl);\n+}\n+template<class T>\n+void\n+ListD<T>::append(const T& item)\n+{\n+    link *newl = new link_item(item); \n+    ListDProto::append(newl);\n+}\n+template<class T>\n+const T&\n+ListD<T>::head() const\n+{\n+    ((void) (( 0 != list_head ) ? 0 : (__eprintf (\"%s:%u: failed assertion `%s'\\n\",\t  \"/home/wbaker/work/include/templates/ListD.body.h\" ,   50 ,  \"0 != list_head\" ), 0) )) ;\n+    link_item *h = (link_item *) list_head;\n+    return h->item;\n+}\n+template<class T>\n+T&\n+ListD<T>::head()\n+{\n+    ((void) (( 0 != list_head ) ? 0 : (__eprintf (\"%s:%u: failed assertion `%s'\\n\",\t  \"/home/wbaker/work/include/templates/ListD.body.h\" ,   59 ,  \"0 != list_head\" ), 0) )) ;\n+    link_item *h = (link_item *) list_head;\n+    return h->item;\n+}\n+template<class T>\n+void\n+ListD<T>::head(T& fill) const\n+{\n+    ((void) (( 0 != list_head ) ? 0 : (__eprintf (\"%s:%u: failed assertion `%s'\\n\",\t  \"/home/wbaker/work/include/templates/ListD.body.h\" ,   68 ,  \"0 != list_head\" ), 0) )) ;\n+    link_item *h = (link_item *) list_head;\n+    fill = h->item;\n+}\n+template<class T>\n+void\n+ListD<T>::remove_head(T& fill)\n+{\n+    head(fill);\n+    remove_head();\n+}\n+template<class T>\n+const T&\n+ListD<T>::tail() const\n+{\n+    ((void) (( 0 != list_tail ) ? 0 : (__eprintf (\"%s:%u: failed assertion `%s'\\n\",\t  \"/home/wbaker/work/include/templates/ListD.body.h\" ,   85 ,  \"0 != list_tail\" ), 0) )) ;\n+    link_item *h = (link_item *) list_tail;\n+    return h->item;\n+}\n+template<class T>\n+T&\n+ListD<T>::tail()\n+{\n+    ((void) (( 0 != list_tail ) ? 0 : (__eprintf (\"%s:%u: failed assertion `%s'\\n\",\t  \"/home/wbaker/work/include/templates/ListD.body.h\" ,   94 ,  \"0 != list_tail\" ), 0) )) ;\n+    link_item *h = (link_item *) list_tail;\n+    return h->item;\n+}\n+template<class T>\n+void\n+ListD<T>::tail(T& fill) const\n+{\n+    ((void) (( 0 != list_tail ) ? 0 : (__eprintf (\"%s:%u: failed assertion `%s'\\n\",\t  \"/home/wbaker/work/include/templates/ListD.body.h\" ,   103 ,  \"0 != list_tail\" ), 0) )) ;\n+    link_item *h = (link_item *) list_tail;\n+    fill = h->item;\n+}\n+template<class T>\n+void\n+ListD<T>::remove_tail(T& fill)\n+{\n+    ((void) (( 0 != list_tail ) ? 0 : (__eprintf (\"%s:%u: failed assertion `%s'\\n\",\t  \"/home/wbaker/work/include/templates/ListD.body.h\" ,   112 ,  \"0 != list_tail\" ), 0) )) ;\n+    link_item *h = (link_item *) list_tail;\n+    fill = h->item;\n+}\n+template<class T>\n+ListDProto::link *\n+ListD<T>::copy_item(ListDProto::link *old) const\n+{\n+    link_item *old_item = (link_item *) old;\n+    link_item *new_item = new link_item(old_item->item);\n+    return new_item;\n+}\n+template<class T>\n+SetLD<T>::SetLD():\n+ListD<T>()\n+{ }\n+template<class T>\n+SetLD<T>::SetLD(const ListD<T>& other):\n+ListD<T>(other)\n+{ }\n+template<class T>\n+void\n+SetLD<T>::add(const T& item)\n+{\n+    if ( ! contains(item) )\n+\tappend(item);\n+}\n+template<class T>\n+void\n+SetLD<T>::add(const ListD<T>& other)\n+{\n+    ListD<T>::Vix x;\n+    for (first(x); 0 != x; next(x))\n+\tadd(other(x));\n+}\n+template<class T>\n+void\n+SetLD<T>::add(const SetLD<T>& other)\n+{\n+    const ListD<T>& lother = other;\n+    add(lother);\n+}\n+template<class T>\n+void\n+SetLD<T>::remove(const T& item)\n+{\n+    Action a = NORMAL;\n+    Vix x;\n+    for (first(x); 0 != x && REMOVE_CURRENT != a; next(x, a))\n+\ta = operator()(x) == item ? REMOVE_CURRENT: NORMAL;// ERROR - .*\n+}\n+template<class T>\n+bool\n+SetLD<T>::contains(const T& item) const\n+{\n+    Vix x;\n+    for (first(x); 0 != x; next(x)) {\n+\tif (operator()(x) == item)// ERROR - .*\n+\t    return TRUE;\n+    }\n+    return FALSE;\n+}\n+template<class T>\n+int\n+operator==(const SetLD<T>& a, const SetLD<T>& b)\n+{\n+    if (a.length() != b.length())\n+\treturn FALSE;\n+    SetLD<T>::Vix x;\n+    for (a.first(x); 0 != x; a.next(x)) {\n+\tif ( ! b.contains(a(x)) )\n+\t    return FALSE;\n+    }\n+    for (b.first(x); 0 != x; b.next(x)) {\n+\tif ( ! a.contains(b(x)) )\n+\t    return FALSE;\n+    }\n+    return TRUE;\n+}\n+template<class T>\n+int\n+operator!=(const SetLD<T>& a, const SetLD<T>& b)\n+{ return ! (a == b); }\n+template<class T>\n+int\n+operator<=(const SetLD<T>& a, const SetLD<T>& b)\n+{\n+    if (a.length() > b.length())\n+\treturn FALSE;\n+    SetLD<T>::Vix x;\n+    for (x=a.first(); 0 != x; a.next(x)) {\n+\tif ( ! b.contains(a(x)) )\n+\t    return FALSE;\n+    }\n+    return TRUE;\n+}\n+template<class T>\n+int\n+operator<(const SetLD<T>& a, const SetLD<T>& b)\n+{\n+    if (a.length() >= b.length())\n+\treturn FALSE;\n+    return a <= b;\n+}\n+template<class T>\n+int\n+operator>(const SetLD<T>& a, const SetLD<T>& b)\n+{ return ! (a <= b); }\n+template<class T>\n+int\n+operator>=(const SetLD<T>& a, const SetLD<T>& b)\n+{ return ! (a < b); }\n+class String { };\n+class IcaseString: public String { };\n+class SetLD< IcaseString >: public SetLD<    String  > {\tpublic:\t SetLD (): SetLD<    String  >() { };\t SetLD (const ListD<   IcaseString  >& other): SetLD<    String  >()\t{ ListD<   IcaseString  >::Vix x;\tfor (other.first(x); 0 != x; other.next(x))\tadd(other(x)); };\t SetLD (const  SetLD & other): SetLD<    String  >(other) { };\tconst    IcaseString  & operator()(const Vix& x) const\t{ return (   IcaseString  &) SetLD<    String  >::operator()(x); }\t}; \ttypedef SetLD<  String > SetLD_String_IcaseString_old_tmp99;\ttypedef SetLD< IcaseString > SetLD_String_IcaseString_new_tmp99;\t\n+inline int\t operator== (const SetLD_String_IcaseString_new_tmp99& a,\tconst SetLD_String_IcaseString_new_tmp99& b)\n+{// ERROR - candidate for call\n+const SetLD_String_IcaseString_old_tmp99& oa = a;\n+const SetLD_String_IcaseString_old_tmp99& ob = b;\n+return  operator== (oa, ob);\t} \t\n+inline int\t operator!= (const SetLD_String_IcaseString_new_tmp99& a,\tconst SetLD_String_IcaseString_new_tmp99& b)\n+{\n+const SetLD_String_IcaseString_old_tmp99& oa = a;\n+const SetLD_String_IcaseString_old_tmp99& ob = b;\n+return  operator!= (oa, ob);\t} \t\n+inline int\t operator< (const SetLD_String_IcaseString_new_tmp99& a,\tconst SetLD_String_IcaseString_new_tmp99& b)\n+{\n+const SetLD_String_IcaseString_old_tmp99& oa = a;\n+const SetLD_String_IcaseString_old_tmp99& ob = b;\n+return  operator< (oa, ob);\t} \t\n+inline int\t operator<= (const SetLD_String_IcaseString_new_tmp99& a,\tconst SetLD_String_IcaseString_new_tmp99& b)\n+{\n+const SetLD_String_IcaseString_old_tmp99& oa = a;\n+const SetLD_String_IcaseString_old_tmp99& ob = b;\n+return  operator<= (oa, ob);\t} \t\n+inline int\t operator> (const SetLD_String_IcaseString_new_tmp99& a,\tconst SetLD_String_IcaseString_new_tmp99& b)\n+{\n+const SetLD_String_IcaseString_old_tmp99& oa = a;\n+const SetLD_String_IcaseString_old_tmp99& ob = b;\n+return  operator> (oa, ob);\t} \t\n+inline int\t operator>= (const SetLD_String_IcaseString_new_tmp99& a,\tconst SetLD_String_IcaseString_new_tmp99& b)\n+{\n+const SetLD_String_IcaseString_old_tmp99& oa = a;\n+const SetLD_String_IcaseString_old_tmp99& ob = b;\n+return  operator>= (oa, ob);\t}   ;\n+typedef SetLD<IcaseString> SLDiS;\n+static void\n+nop(int i)\n+{\n+    SetLD<IcaseString> x, y;\n+    nop(x == y);\n+ nop(x != y);\n+nop(x < y);\n+nop(x <= y);\n+nop(x > y);\n+nop(x >= y);\n+}\n+\n+template class SetLD<String>;"}, {"sha": "48014c56892f6d50fdc2948d32798fe8ab37d366", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash57.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash57.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash57.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash57.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,13 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class foo {\n+private:\n+  char buffer[1024];\n+public:\n+  foo();\n+};\n+\n+main()\n+{\n+  static foo& a = *(new foo);\n+}"}, {"sha": "922290f000ccea452f4768231e647865ca66e70a", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash58.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash58.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash58.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash58.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class X {\n+public:\n+void doit();\n+};\n+\n+X::::doit()// ERROR -  (syntax|parse) error.*\n+{\n+}"}, {"sha": "ab6e5599d6a8ae3032b732768d3f3ce092b2461a", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash59.C", "status": "added", "additions": 1374, "deletions": 0, "changes": 1374, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash59.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash59.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash59.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,1374 @@\n+// Build don't link: \n+// Special g++ Options: -w\n+// GROUPS passed old-abort\n+typedef char * __gnuc_va_list;\n+void va_end (__gnuc_va_list);\t\t \n+enum __va_type_classes {\n+  __no_type_class = -1,\n+  __void_type_class,\n+  __integer_type_class,\n+  __char_type_class,\n+  __enumeral_type_class,\n+  __boolean_type_class,\n+  __pointer_type_class,\n+  __reference_type_class,\n+  __offset_type_class,\n+  __real_type_class,\n+  __complex_type_class,\n+  __function_type_class,\n+  __method_type_class,\n+  __record_type_class,\n+  __union_type_class,\n+  __array_type_class,\n+  __string_type_class,\n+  __set_type_class,\n+  __file_type_class,\n+  __lang_type_class\n+};\n+typedef __gnuc_va_list va_list;\n+typedef\tint jmp_buf[9 ];\n+typedef\tint sigjmp_buf[9 +1];\n+int\tsetjmp  (jmp_buf)  ;\n+int\t_setjmp  (jmp_buf)  ;\n+int\tsigsetjmp  (sigjmp_buf, int)  ;\n+void\tlongjmp  (jmp_buf, int)  ;\n+void\t_longjmp  (jmp_buf, int)  ;\n+void\tsiglongjmp  (sigjmp_buf, int)  ;\n+const int BOR_C_DIR\t= 0;\t\t \n+const int BOR_C_REV\t= 1;\t\t \n+const int BOR_C\t\t= 0x1;\n+const int BOR_BD_DIR\t= (0<<1);\t \n+const int BOR_BD_REV\t= (1<<1);\t \n+const int BOR_BD\t= 0x2;\n+const int SERVICE_DATA\t = (1<<( 0 )) ;\t \n+const int SERVICE_CLASS1 = (1<<( 1 )) ;\t \n+const int SERVICE_CLASS2 = (1<<( 2 )) ;\t \n+const int SERVICE_CLASS20 = (1<<( 3 )) ;\t \n+const int SERVICE_VOICE\t = (1<<( 8 )) ;\t \n+const int SERVICE_ALL\t = (1<<( 9 )) -1;\n+const int VR_NORMAL\t= 0;\t\t \n+const int VR_FINE\t= 1;\t\t \n+const int VR_ALL\t= (1<<( VR_FINE+1 )) -1;\n+const int BR_2400\t= 0;\t\t \n+const int BR_4800\t= 1;\t\t \n+const int BR_7200\t= 2;\t\t \n+const int BR_9600\t= 3;\t\t \n+const int BR_12000\t= 4;\t\t \n+const int BR_14400\t= 5;\t\t \n+const int BR_ALL\t= (1<<( BR_14400+1 )) -1;\n+const int WD_1728\t= 0;\t\t \n+const int WD_2048\t= 1;\t\t \n+const int WD_2432\t= 2;\t\t \n+const int WD_1216\t= 3;\t\t \n+const int WD_864\t= 4;\t\t \n+const int WD_ALL\t= (1<<( WD_864+1 )) -1;\n+const int LN_A4\t\t= 0;\t\t \n+const int LN_B4\t\t= 1;\t\t \n+const int LN_INF\t= 2;\t\t \n+const int LN_ALL\t= (1<<( LN_INF+1 )) -1;\n+const int DF_1DMR\t= 0;\t\t \n+const int DF_2DMR\t= 1;\t\t \n+const int DF_2DMRUNCOMP\t= 2;\t\t \n+const int DF_2DMMR\t= 3;\t\t \n+const int DF_ALL\t= (1<<( DF_2DMMR+1 )) -1;\n+const int EC_DISABLE\t= 0;\t\t \n+const int EC_ENABLE\t= 1;\t\t \n+const int EC_ALL\t= 0x3;\n+const int BF_DISABLE\t= 0;\t\t \n+const int BF_ENABLE\t= 1;\t\t \n+const int BF_ALL\t= 0x3;\n+const int ST_0MS\t= 0;\t\t \n+const int ST_5MS\t= 1;\t\t \n+const int ST_10MS2\t= 2;\t\t \n+const int ST_10MS\t= 3;\t\t \n+const int ST_20MS2\t= 4;\t\t \n+const int ST_20MS\t= 5;\t\t \n+const int ST_40MS2\t= 6;\t\t \n+const int ST_40MS\t= 7;\t\t \n+const int ST_ALL\t= (1<<( ST_40MS+1 )) -1;\n+const int PPM_MPS\t= 0;\t\t \n+const int PPM_EOM\t= 1;\t\t \n+const int PPM_EOP\t= 2;\t\t \n+const int PPM_PRI_MPS\t= 4;\t\t \n+const int PPM_PRI_EOM\t= 5;\t\t \n+const int PPM_PRI_EOP\t= 6;\t\t \n+const int PPR_MCF\t= 1;\t\t \n+const int PPR_RTN\t= 2;\t\t \n+const int PPR_RTP\t= 3;\t\t \n+const int PPR_PIN\t= 4;\t\t \n+const int PPR_PIP\t= 5;\t\t \n+const int DLE = 16;\t\t \n+const int SUB = 26;\t\t \n+const int ETX = 3;\t\t \n+const int DC1 = 17;\t\t \n+const int DC2 = 18;\t\t \n+const int CAN = 24;\t\t \n+typedef\tint\t\tsigset_t;\t \n+typedef\tunsigned int\tspeed_t;\t \n+typedef\tunsigned long\ttcflag_t;\t \n+typedef\tunsigned char\tcc_t;\t\t \n+typedef\tint\t\tpid_t;\t\t \n+typedef\tunsigned short\tmode_t;\t\t \n+typedef\tshort\t\tnlink_t;\t \n+typedef\tlong\t\tclock_t;\t \n+typedef\tlong\t\ttime_t;\t\t \n+typedef __SIZE_TYPE__ size_t;\t\t \n+typedef int ptrdiff_t;\t \n+typedef __wchar_t wchar_t;\t \n+extern unsigned int _mb_cur_max;\n+extern void\tabort( );\n+extern int\tabs  (int)  ;\n+extern double\tatof  (const char *)  ;\n+extern int\tatoi  (const char *)  ;\n+extern long int\tatol  (const char *)  ;\n+extern char *\tbsearch  (const void *, const void *, long unsigned int , long unsigned int , int (*) (const void *, const void *))  ;\n+extern void *\tcalloc  (long unsigned int , long unsigned int )  ;\n+extern void\texit  (int)  ;\n+extern void\tfree  (void *)  ;\n+extern char *\tgetenv  (const char *)  ;\n+extern void *\tmalloc  (long unsigned int )  ;\n+extern int\tqsort  (void *, long unsigned int , long unsigned int , int (*) (const void *, const void *))  ;\n+extern int\trand( );\n+extern void *\trealloc  (void *, long unsigned int )  ;\n+extern int\tsrand  (unsigned int)  ;\n+extern int    mbtowc  (__wchar_t *, const char *, long unsigned int )  ;\n+extern int    wctomb  (char *, __wchar_t )  ;\n+extern size_t mbstowcs  (__wchar_t *, const char *, long unsigned int )  ;\n+extern size_t wcstombs  (char *, const __wchar_t *, long unsigned int )  ;\n+extern int atexit (void (*) (void));\n+extern long int labs (long int);\n+extern int putenv (char *);\n+extern double strtod (const char *, char **);\n+extern long int strtol (const char *, char **, int);\n+extern long unsigned int strtoul (const char *, char **, int);\n+extern int system (const char *);\n+extern char *\tstrcat  (char *, const char *)  ;\n+extern char *\tstrchr  (const char *, int)  ;\n+extern int\tstrcmp  (const char *, const char *)  ;\n+extern char *\tstrcpy  (char *, const char *)  ;\n+extern size_t\tstrcspn  (const char *, const char *)  ;\n+extern char *\tstrdup  (const char *)  ;\n+extern size_t\tstrlen  (const char *)  ;\n+extern char *\tstrncat  (char *, const char *, long unsigned int )  ;\n+extern int\tstrncmp  (const char *, const char *, long unsigned int )  ;\n+extern char *\tstrncpy  (char *, const char *, long unsigned int )  ;\n+extern char *\tstrpbrk  (const char *, const char *)  ;\n+extern char *\tstrrchr  (const char *, int)  ;\n+extern size_t\tstrspn  (const char *, const char *)  ;\n+extern char *\tstrstr  (const char *, const char *)  ;\n+extern char *\tstrtok  (char *, const char *)  ;\n+extern void * memchr (const void *, int, long unsigned int );\n+extern int memcmp (const void *, const void *, long unsigned int );\n+extern void * memcpy (void *, const void *, long unsigned int );\n+extern void * memmove (void *, const void *, long unsigned int );\n+extern void * memset (void *, int, long unsigned int );\n+extern int strcoll (const char *, const char *);\n+extern char * strerror (int);\n+extern long unsigned int strxfrm (char *, const char *, long unsigned int );\n+extern \"C\" {\n+extern void __eprintf (const char *, const char *, unsigned, const char *);\n+}\n+extern\tstruct\t_iobuf {\n+\tint\t_cnt;\n+\tunsigned char *_ptr;\n+\tunsigned char *_base;\n+\tint\t_bufsiz;\n+\tshort\t_flag;\n+\tchar\t_file;\t\t \n+} _iob[];\n+extern struct _iobuf \t*fopen  (const char *, const char *)  ;\n+extern struct _iobuf \t*fdopen  (int, const char *)  ;\n+extern struct _iobuf \t*freopen  (const char *, const char *, struct _iobuf  *)  ;\n+extern struct _iobuf \t*popen  (const char *, const char *)  ;\n+extern struct _iobuf \t*tmpfile();\n+extern long\tftell  (struct _iobuf  *)  ;\n+extern char\t*fgets  (char *, int, struct _iobuf  *)  ;\n+extern char\t*gets  (char *)  ;\n+extern char\t*sprintf  (char *, const char *, ...)  ;\n+extern char\t*ctermid  (char *)  ;\n+extern char\t*cuserid  (char *)  ;\n+extern char\t*tempnam  (const char *, const char *)  ;\n+extern char\t*tmpnam  (char *)  ;\n+extern int fclose (struct _iobuf  *);\n+extern int fflush (struct _iobuf  *);\n+extern int fgetc (struct _iobuf  *);\n+extern int fgetpos (struct _iobuf  *, long *);\n+extern int fprintf (struct _iobuf  *, const char *, ...);\n+extern int fputc (int, struct _iobuf  *);\n+extern int fputs (const char *, struct _iobuf  *);\n+extern long unsigned int fread (void *, long unsigned int , long unsigned int , struct _iobuf  *);\n+extern int fscanf (struct _iobuf  *, const char *, ...);\n+extern int fseek (struct _iobuf  *, long int, int);\n+extern int fsetpos (struct _iobuf  *, const long *);\n+extern long unsigned int fwrite (const void *, long unsigned int , long unsigned int , struct _iobuf  *);\n+extern int pclose (struct _iobuf  *);\n+extern void perror (const char *);\n+extern int printf (const char *, ...);\n+extern int puts (const char *);\n+extern int remove (const char *);\n+extern int rename (const char *, const char *);\n+extern void rewind (struct _iobuf  *);\n+extern int scanf (const char *, ...);\n+extern void setbuf (struct _iobuf  *, char *);\n+extern int setvbuf (struct _iobuf  *, char *, int, long unsigned int );\n+extern int sscanf (const char *, const char *, ...);\n+extern int vprintf (const char *, __gnuc_va_list);\n+extern int vsprintf (char *, const char *, __gnuc_va_list);\n+extern int vfprintf (struct _iobuf  *, const char *, __gnuc_va_list);\n+extern int ungetc (int, struct _iobuf  *);\n+extern int _flsbuf (unsigned int, struct _iobuf  *);\n+extern int _filbuf (struct _iobuf  *);\n+typedef long _G_clock_t;\n+typedef short _G_dev_t;\n+typedef long   _G_fpos_t;\n+typedef unsigned short _G_gid_t;\n+typedef unsigned long _G_ino_t;\n+typedef unsigned short _G_mode_t;\n+typedef short _G_nlink_t;\n+typedef long _G_off_t;\n+typedef int _G_pid_t;\n+typedef int _G_ptrdiff_t;\n+typedef int _G_sigset_t;\n+typedef long unsigned int _G_size_t;\n+typedef long _G_time_t;\n+typedef unsigned short _G_uid_t;\n+typedef __wchar_t _G_wchar_t;\n+typedef int   _G_ssize_t;\n+typedef int _G_wint_t;\n+typedef char * _G_va_list;\n+typedef signed char _G_int8_t;\n+typedef unsigned char _G_uint8_t;\n+typedef short _G_int16_t;\n+typedef unsigned short _G_uint16_t;\n+typedef long _G_int32_t;\n+typedef unsigned long _G_uint32_t;\n+const size_t NPOS = (size_t)(-1);\n+typedef void fvoid_t();\n+typedef _G_wint_t wint_t;\n+enum capacity { default_size, reserve };\n+extern \"C\" fvoid_t *set_new_handler(fvoid_t *);\n+extern fvoid_t *__new_handler;\n+extern \"C\" void __default_new_handler();\n+inline void *operator new(size_t, void *place) { return place; }\n+inline void *operator new[](size_t, void *place) { return place; }\n+typedef\tunsigned char\tu_char;\n+typedef\tunsigned short\tu_short;\n+typedef\tunsigned int\tu_int;\n+typedef\tunsigned long\tu_long;\n+typedef\tunsigned short\tushort;\t\t \n+typedef\tunsigned int\tuint;\t\t \n+typedef\tstruct  _physadr_t { int r[1]; } *physadr_t;\n+typedef\tstruct label_t {\n+\tint\tval[2];\n+} label_t;\n+typedef\tstruct\t_quad_t { long val[2]; } quad_t;\n+typedef\tlong\tdaddr_t;\n+typedef\tchar *\tcaddr_t;\n+typedef\tunsigned long\tino_t;\n+typedef\tshort\tdev_t;\n+typedef\tlong\toff_t;\n+typedef\tunsigned short\tuid_t;\n+typedef\tunsigned short\tgid_t;\n+typedef\tlong\tkey_t;\n+typedef\tchar *\taddr_t;\n+typedef\tlong\tfd_mask;\n+typedef\tstruct fd_set {\n+\tfd_mask\tfds_bits[((( 256  )+((  (sizeof (fd_mask) * 8 )  )-1))/(  (sizeof (fd_mask) * 8 )  )) ];\n+} fd_set;\n+extern \"C\" {\n+extern int mkstemp(char *);\n+extern int strncasecmp(const char*, const char*, size_t);\n+extern int strcasecmp(const char*, const char*);\n+extern long random(void);\n+extern int seteuid(uid_t);\n+extern int setegid(gid_t);\n+extern int ftruncate(int, off_t);\n+extern int getdtablesize(void);\n+struct fd_set;\n+struct timeval;\n+extern int select(int,struct fd_set*,struct fd_set*,struct fd_set*,struct timeval*);\n+extern int ioctl(int, int, ...);\n+extern int fchown(int, uid_t, gid_t);\n+extern int gethostname(char*, int);\n+extern char* optarg;\n+extern int opterr;\n+extern int optind;\n+extern char* mktemp(char*);\n+extern void syslog(int, const char*, ...);\n+extern void vsyslog(int, const char*, va_list);\n+extern void closelog(void);\n+extern void openlog(const char*, int, int);\n+extern int fchmod(int, mode_t);\n+struct timezone;\n+struct timeval;\n+extern int gettimeofday(struct timeval*, struct timezone*);\n+extern void endpwent(void);\n+extern int getpeername(int,void*,int*);\n+extern int getsockname(int,void*,int*);\n+extern int socket(int, int, int);\n+extern int connect(int, const void*, int);\n+extern int flock(int, int);\n+}\n+typedef unsigned char fxBool;\n+inline int fxmin(int a, int b)\t\t{ return (a < b) ? a : b; }\n+inline u_long fxmin(u_long a, u_long b)\t{ return (a < b) ? a : b; }\n+inline u_int fxmin(u_int a, u_int b)\t{ return (a < b) ? a : b; }\n+inline int fxmax(int a, int b)\t\t{ return (a > b) ? a : b; }\n+inline u_long fxmax(u_long a, u_long b)\t{ return (a > b) ? a : b; }\n+inline u_int fxmax(u_int a, u_int b)\t{ return (a > b) ? a : b; }\n+extern \"C\" void _fxassert(const char*, const char*, int);\n+class fxObj {\n+public:\n+    fxObj();\n+    virtual ~fxObj();\n+    void inc();\n+    void dec();\n+    u_long getReferenceCount();\n+    virtual const char* className() const;\n+    int compare(const fxObj *) const;\n+    virtual void subClassMustDefine(const char* method) const;\n+protected:\n+    u_long\treferenceCount;\n+};\n+inline fxObj::fxObj()\t\t\t\t{ referenceCount = 0; }\n+inline void fxObj::inc()\t\t\t{ ++referenceCount; }\n+inline void fxObj::dec() {\n+    if ( referenceCount>0 ); else _fxassert( \"Bogus object reference count\" ,\"../util/Obj.h\",54); ;\n+    if (0 >= --referenceCount) delete this;\n+}\n+inline u_long fxObj::getReferenceCount()\t{ return referenceCount; }\n+class fxStr;\n+class fxTempStr {\n+public:\n+    fxTempStr(fxTempStr const &other);\n+    ~fxTempStr();\n+    friend fxTempStr operator|(fxStr const&, fxStr const&);\n+    friend fxTempStr operator|(fxStr const&, char const*);\n+    friend fxTempStr operator|(char const*, fxStr const&);\n+    friend fxTempStr& operator|(const fxTempStr&, fxStr const& b);\n+    friend fxTempStr& operator|(const fxTempStr&, char const* b);\n+    operator char*() const;\n+    operator int() const;\n+    operator float() const;\n+    operator double() const;\n+    u_int length() const;\n+protected:\n+    char\tindata[100];\t\t \n+    char*\tdata;\t\t\t \n+    u_int\tslength;\t\t \n+    friend class fxStr;\n+    fxTempStr(char const *, u_int, char const *, u_int);\n+    fxTempStr& concat(char const* b, u_int bl);\n+};\n+inline fxTempStr::operator char*() const\t{ return data; }\n+inline fxTempStr::operator int() const\t\t{ return atoi(data); }\n+inline fxTempStr::operator float() const\t{ return float(atof(data)); }\n+inline fxTempStr::operator double() const\t{ return double(atof(data)); }\n+inline u_int fxTempStr::length() const\t\t{ return slength - 1; }\n+class fxStr {\n+    friend class fxTempStr;\n+public:\n+    fxStr(u_int l=0);\n+    fxStr(char const *s);\n+    fxStr(char const *s, u_int len);\n+    fxStr(fxStr const&);\n+    fxStr(int, char const* format);\n+    fxStr(long, char const* format);\n+    fxStr(float, char const* format);\n+    fxStr(double, char const* format);\n+    fxStr(const fxTempStr&);\n+    ~fxStr();\n+    u_long hash() const;\n+    operator char*() const\n+\t{ return data; }\n+    operator int() const\n+\t{ return atoi(data); }\n+    operator float() const\n+\t{ return float(atof(data)); }\n+    operator double() const\n+\t{ return double(atof(data)); }\n+    u_int length() const { return slength-1; }\n+    char& operator[](u_int i) const\n+    {   if ( i<slength-1 ); else _fxassert( \"Invalid Str[] index\" ,\"../util/Str.h\",109); ;\n+\treturn data[i]; }\n+    void operator=(const fxTempStr& s);\n+    void operator=(fxStr const& s);\n+    void operator=(char const *s);\n+    friend fxBool operator==(fxStr const&, fxStr const&);\n+    friend fxBool operator==(fxStr const&, char const*);\n+    friend fxBool operator==(fxStr const&, char *);\n+    friend fxBool operator==(char const*, fxStr const&);\n+    friend fxBool operator!=(fxStr const&, fxStr const&);\n+    friend fxBool operator!=(fxStr const&, char const*);\n+    friend fxBool operator!=(char const*, fxStr const&);\n+    friend fxBool operator>=(fxStr const&, fxStr const&);\n+    friend fxBool operator>=(fxStr const&, char const*);\n+    friend fxBool operator>=(char const*, fxStr const&);\n+    friend fxBool operator<=(fxStr const&, fxStr const&);\n+    friend fxBool operator<=(fxStr const&, char const*);\n+    friend fxBool operator<=(char const*, fxStr const&);\n+    friend fxBool operator>(fxStr const&, fxStr const&);\n+    friend fxBool operator>(fxStr const&, char const*);\n+    friend fxBool operator>(char const*, fxStr const&);\n+    friend fxBool operator<(fxStr const&, fxStr const&);\n+    friend fxBool operator<(fxStr const&, char const*);\n+    friend fxBool operator<(char const*, fxStr const&);\n+    int compare(fxStr const *a) const { return ::compare(*this, *a); }\n+    friend int compare(fxStr const&, fxStr const&);\n+    friend int compare(fxStr const&, char const*);\n+    friend int compare(char const*, fxStr const&);\n+    friend fxTempStr& operator|(const fxTempStr&, fxStr const&);\n+    friend fxTempStr& operator|(const fxTempStr&, char const*);\n+    friend fxTempStr operator|(fxStr const&, fxStr const&);\n+    friend fxTempStr operator|(fxStr const&, char const*);\n+    friend fxTempStr operator|(char const*, fxStr const&);\n+    fxStr copy() const;\n+    fxStr extract(u_int start,u_int len) const;\n+    fxStr cut(u_int start,u_int len);\n+    fxStr head(u_int) const;\n+    fxStr tail(u_int) const;\n+    void lowercase(u_int posn=0, u_int len=0);\n+    void raisecase(u_int posn=0, u_int len=0);\n+    void remove(u_int posn,u_int len=1);\n+    void resize(u_int len, fxBool reallocate = ((fxBool)0) );\n+    void setMaxLength(u_int maxlen);\n+    void append(char a);\n+    void append(char const *s, u_int len=0);\n+    void append(const fxTempStr& s)\n+\t{ append((char*)s, s.slength-1); }\n+    void append(fxStr const& s)\n+\t{ append((char*)s, s.slength-1); }\n+    void insert(char a, u_int posn=0);\n+    void insert(char const *, u_int posn=0, u_int len=0);\n+    void insert(const fxTempStr& s, u_int posn=0)\n+\t{ insert((char*)s, posn, s.slength-1); }\n+    void insert(fxStr const& s, u_int posn=0)\n+\t{ insert((char*)s, posn, s.slength-1); }\n+    u_int next(u_int posn, char delimiter) const;\n+    u_int next(u_int posn, char const *delimiters, u_int len=0) const;\n+    u_int next(u_int posn, fxStr const& delimiters) const\n+\t{ return next(posn, (char*)delimiters, delimiters.slength-1); }\n+    u_int nextR(u_int posn, char delimiter) const;\n+    u_int nextR(u_int posn, char const*, u_int len=0) const;\n+    u_int nextR(u_int posn, fxStr const& delimiters) const\n+\t{ return nextR(posn, (char*)delimiters, delimiters.slength-1); }\n+    u_int skip(u_int posn, char a) const; \n+    u_int skip(u_int posn, char const *, u_int len=0) const;\n+    u_int skip(u_int posn, fxStr const& delimiters) const\n+\t{ return skip(posn, (char*)delimiters, delimiters.slength-1); }\n+    u_int skipR(u_int posn, char a) const;\n+    u_int skipR(u_int posn, char const *, u_int len=0) const;\n+    u_int skipR(u_int posn, fxStr const& delimiters) const\n+\t{ return skipR(posn, (char*)delimiters, delimiters.slength-1); }\n+    fxStr token(u_int & posn, char delimiter) const;\n+    fxStr token(u_int & posn, char const * delimiters,\n+\tu_int delimiters_len = 0) const;\n+    fxStr token(u_int & posn, fxStr const & delimiters) const\n+\t{ return token(posn, delimiters.data, delimiters.slength-1); }\n+    fxStr tokenR(u_int & posn, char delimiter) const;\n+    fxStr tokenR(u_int & posn, char const * delimiters,\n+\tu_int delimiters_len = 0) const;\n+    fxStr tokenR(u_int & posn, fxStr const & delimiters) const\n+\t{ return tokenR(posn, delimiters.data, delimiters.slength-1); }\n+protected:\n+    u_int slength;\n+    char * data; \n+    static char emptyString;\n+    void fxStr::resizeInternal(u_int);\n+    int findEndBuffer(const char *, u_int buflen) const;\n+    int findBuffer(const char *buf, u_int buflen) const;\n+    void bracketBuffer(const char *, u_int buflen, int &, int &) const;\n+};\n+struct Class2Params {\n+    u_int vr;\t\t \n+    u_int br;\t\t \n+    u_int wd;\t\t \n+    u_int ln;\t\t \n+    u_int df;\t\t \n+    u_int ec;\t\t \n+    u_int bf;\t\t \n+    u_int st;\t\t \n+    static u_int vrDISTab[2];\t\t \n+    static u_int dfDISTab[4];\t\t \n+    static u_int wdDISTab[8];\t\t \n+    static u_int lnDISTab[3];\t\t \n+    static u_int stDISTab[8];\t\t \n+    static u_int stDCSTab[8];\t\t \n+    static u_int brDISTab[8];\t\t \n+    static u_int brDCSTab[8];\t\t \n+    static u_int DISvrTab[2];\t\t \n+    static u_int DISdfTab[2];\t\t \n+    static u_int DISwdTab[4];\t\t \n+    static u_int DISlnTab[4];\t\t \n+    static u_int DISstTab[8];\t\t \n+    static u_int DISbrTab[16];\t\t \n+    static u_int DCSbrTab[16];\t\t \n+    static const char* bitRateNames[8];\t\t \n+    static const char* dataFormatNames[4];\t \n+    static const char* vresNames[2];\t\t \n+    static const char* pageWidthNames[8];\t \n+    static const char* pageLengthNames[4];\t \n+    static const char* scanlineTimeNames[8];\t \n+    Class2Params();\n+    int operator==(const Class2Params&) const;\n+    int operator!=(const Class2Params&) const;\n+    fxStr cmd() const;\t\t\t \n+    void setFromDIS(u_int dis, u_int xinfo = 0);\n+    void setFromDCS(u_int dcs, u_int xinfo = 0);\n+    u_int getDCS() const;\n+    fxBool is2D() const;\n+    u_int pageWidth() const;\n+    u_int transferSize(u_int ms) const;\n+    u_int minScanlineSize() const;\n+    fxStr encode() const;\t\t \n+    void decode(const fxStr&);\t\t \n+};\n+typedef\tstruct {\n+\tunsigned short tiff_magic;\t \n+\tunsigned short tiff_version;\t \n+\tunsigned long  tiff_diroff;\t \n+} TIFFHeader;\n+typedef\tstruct {\n+\tunsigned short tdir_tag;\t \n+\tunsigned short tdir_type;\t \n+\tunsigned long  tdir_count;\t \n+\tunsigned long  tdir_offset;\t \n+} TIFFDirEntry;\n+typedef\tenum {\n+\tTIFF_NOTYPE\t= 0,\t \n+\tTIFF_BYTE\t= 1,\t \n+\tTIFF_ASCII\t= 2,\t \n+\tTIFF_SHORT\t= 3,\t \n+\tTIFF_LONG\t= 4,\t \n+\tTIFF_RATIONAL\t= 5,\t \n+\tTIFF_SBYTE\t= 6,\t \n+\tTIFF_UNDEFINED\t= 7,\t \n+\tTIFF_SSHORT\t= 8,\t \n+\tTIFF_SLONG\t= 9,\t \n+\tTIFF_SRATIONAL\t= 10,\t \n+\tTIFF_FLOAT\t= 11,\t \n+\tTIFF_DOUBLE\t= 12\t \n+} TIFFDataType;\n+typedef\tstruct tiff TIFF;\n+extern int fclose (struct _iobuf  *);\n+extern int fflush (struct _iobuf  *);\n+extern int fgetc (struct _iobuf  *);\n+extern int fgetpos (struct _iobuf  *, long *);\n+extern int fprintf (struct _iobuf  *, const char *, ...);\n+extern int fputc (int, struct _iobuf  *);\n+extern int fputs (const char *, struct _iobuf  *);\n+extern long unsigned int fread (void *, long unsigned int , long unsigned int , struct _iobuf  *);\n+extern int fscanf (struct _iobuf  *, const char *, ...);\n+extern int fseek (struct _iobuf  *, long int, int);\n+extern int fsetpos (struct _iobuf  *, const long *);\n+extern long unsigned int fwrite (const void *, long unsigned int , long unsigned int , struct _iobuf  *);\n+extern int pclose (struct _iobuf  *);\n+extern void perror (const char *);\n+extern int printf (const char *, ...);\n+extern int puts (const char *);\n+extern int remove (const char *);\n+extern int rename (const char *, const char *);\n+extern void rewind (struct _iobuf  *);\n+extern int scanf (const char *, ...);\n+extern void setbuf (struct _iobuf  *, char *);\n+extern int setvbuf (struct _iobuf  *, char *, int, long unsigned int );\n+extern int sscanf (const char *, const char *, ...);\n+extern int vprintf (const char *, __gnuc_va_list);\n+extern int vsprintf (char *, const char *, __gnuc_va_list);\n+extern int vfprintf (struct _iobuf  *, const char *, __gnuc_va_list);\n+extern int ungetc (int, struct _iobuf  *);\n+extern int _flsbuf (unsigned int, struct _iobuf  *);\n+extern int _filbuf (struct _iobuf  *);\n+typedef\tvoid (*TIFFErrorHandler)(const char* module, const char* fmt, va_list);\n+typedef\tint (*TIFFReadWriteProc)(void*, char*, unsigned long);\n+typedef\tlong (*TIFFSeekProc)(void*, long, int);\n+typedef\tint (*TIFFCloseProc)(void*);\n+typedef\tlong (*TIFFSizeProc)(void*);\n+typedef\tint (*TIFFMapFileProc)(void*, char**, long*);\n+typedef\tvoid (*TIFFUnmapFileProc)(void*, char*, long);\n+extern \"C\" {\n+extern\tconst char* TIFFGetVersion();\n+extern\tvoid TIFFClose(TIFF*);\n+extern\tint TIFFFlush(TIFF*);\n+extern\tint TIFFFlushData(TIFF*);\n+extern\tint TIFFGetField(TIFF*, unsigned int, ...);\n+extern\tint TIFFVGetField(TIFF*, unsigned int, va_list);\n+extern\tint TIFFGetFieldDefaulted(TIFF*, unsigned int, ...);\n+extern\tint TIFFVGetFieldDefaulted(TIFF*, unsigned int, va_list);\n+extern\tint TIFFReadDirectory(TIFF*);\n+extern\tunsigned long TIFFScanlineSize(TIFF*);\n+extern\tunsigned long TIFFStripSize(TIFF*);\n+extern\tunsigned long TIFFVStripSize(TIFF*, unsigned long);\n+extern\tunsigned long TIFFTileRowSize(TIFF*);\n+extern\tunsigned long TIFFTileSize(TIFF*);\n+extern\tunsigned long TIFFVTileSize(TIFF*, unsigned long);\n+extern\tint TIFFFileno(TIFF*);\n+extern\tint TIFFGetMode(TIFF*);\n+extern\tint TIFFIsTiled(TIFF*);\n+extern\tlong TIFFCurrentRow(TIFF*);\n+extern\tint TIFFCurrentDirectory(TIFF*);\n+extern\tint TIFFCurrentStrip(TIFF*);\n+extern\tint TIFFCurrentTile(TIFF*);\n+extern\tint TIFFReadBufferSetup(TIFF*, char*, unsigned long);\n+extern\tint TIFFLastDirectory(TIFF*);\n+extern\tint TIFFSetDirectory(TIFF*, int);\n+extern\tint TIFFSetField(TIFF*, unsigned int, ...);\n+extern\tint TIFFVSetField(TIFF*, unsigned int, va_list);\n+extern\tint TIFFWriteDirectory(TIFF *);\n+extern\tvoid TIFFPrintDirectory(TIFF*, struct _iobuf *, long = 0);\n+extern\tint TIFFReadScanline(TIFF*, unsigned char*, unsigned, unsigned = 0);\n+extern\tint TIFFWriteScanline(TIFF*, unsigned char*, unsigned, unsigned = 0);\n+extern\tint TIFFReadRGBAImage(TIFF*,\n+\t    unsigned long, unsigned long, unsigned long*, int stop = 0);\n+extern\tTIFF* TIFFOpen(const char*, const char*);\n+extern\tTIFF* TIFFFdOpen(int, const char*, const char*);\n+extern\tTIFF* TIFFClientOpen(const char* name, const char* mode,\n+\t    void* clientdata,\n+\t    TIFFReadWriteProc readproc, TIFFReadWriteProc writeproc,\n+\t    TIFFSeekProc seekproc, TIFFCloseProc closeproc,\n+\t    TIFFSizeProc sizeproc,\n+\t    TIFFMapFileProc mapproc, TIFFUnmapFileProc unmapproc);\n+extern\tconst char* TIFFFileName(TIFF*);\n+extern\tvoid TIFFError(const char*, const char*, ...);\n+extern\tvoid TIFFWarning(const char*, const char*, ...);\n+extern\tTIFFErrorHandler TIFFSetErrorHandler(TIFFErrorHandler handler);\n+extern\tTIFFErrorHandler TIFFSetWarningHandler(TIFFErrorHandler handler);\n+extern\tunsigned int TIFFComputeTile(TIFF*,\n+\t    unsigned long, unsigned long, unsigned long, unsigned int);\n+extern\tint TIFFCheckTile(TIFF*,\n+\t    unsigned long, unsigned long, unsigned long, unsigned);\n+extern\tunsigned int TIFFNumberOfTiles(TIFF*);\n+extern\tint TIFFReadTile(TIFF*,\n+\t    unsigned char*,\n+\t    unsigned long, unsigned long, unsigned long,\n+\t    unsigned int);\n+extern\tint TIFFWriteTile(TIFF*,\n+\t    unsigned char*,\n+\t    unsigned long, unsigned long, unsigned long,\n+\t    unsigned int);\n+extern\tunsigned int TIFFComputeStrip(TIFF*, unsigned long, unsigned int);\n+extern\tunsigned int TIFFNumberOfStrips(TIFF*);\n+extern\tint TIFFReadEncodedStrip(TIFF*, unsigned, unsigned char*, unsigned long);\n+extern\tint TIFFReadRawStrip(TIFF*, unsigned, unsigned char*, unsigned long);\n+extern\tint TIFFReadEncodedTile(TIFF*, unsigned, unsigned char*, unsigned long);\n+extern\tint TIFFReadRawTile(TIFF*, unsigned, unsigned char*, unsigned long);\n+extern\tint TIFFWriteEncodedStrip(TIFF*, unsigned, unsigned char*, unsigned long);\n+extern\tint TIFFWriteRawStrip(TIFF*, unsigned, unsigned char*, unsigned long);\n+extern\tint TIFFWriteEncodedTile(TIFF*, unsigned, unsigned char*, unsigned long);\n+extern\tint TIFFWriteRawTile(TIFF*, unsigned, unsigned char*, unsigned long);\n+extern\tvoid TIFFSetWriteOffset(TIFF*, unsigned long);\n+extern\tvoid TIFFSwabShort(unsigned short *);\n+extern\tvoid TIFFSwabLong(unsigned long *);\n+extern\tvoid TIFFSwabArrayOfShort(unsigned short *, unsigned long);\n+extern\tvoid TIFFSwabArrayOfLong(unsigned long *, unsigned long);\n+extern\tvoid TIFFReverseBits(unsigned char *, unsigned long);\n+extern\tconst unsigned char* TIFFGetBitRevTable(int);\n+}\n+struct G3Base {\n+    short\tdata;\t\t \n+    short\tbit;\t\t \n+    fxBool\tis2D;\t\t \n+    enum { G3_1D, G3_2D } tag;\t \n+    const u_char* bitmap;\t \n+    static const u_char zeroruns[256];\n+    static const u_char oneruns[256];\n+    static int findspan(const u_char**, int, int, const u_char*);\n+    static int finddiff(const u_char*, int, int);\n+    static void fillspan(u_char* cp, int x, int count);\n+    void setup(const u_char*, fxBool is2d);\n+};\n+class fxStackBuffer;\n+class G3Decoder : private G3Base {\n+private:\n+    short\tbytePending;\t \n+    short\tprevByte;\t \n+    u_char*\trefline;\t \n+    fxStackBuffer* recvBuf;\t \n+    fxBool\tdecode1DRow(u_char*, u_int);\n+    fxBool\tdecode2DRow(u_char*, u_int);\n+    int\t\tnextBit();\n+    void\tungetBit();\n+    int\t\tnextByte();\n+    int\t\tdecodeWhiteRun();\n+    int\t\tdecodeBlackRun();\n+    int\t\tdecodeUncompCode();\n+    void\tskipToEOL(int len);\n+protected:\n+    G3Decoder();\n+    void\traiseEOF();\n+    void\traiseRTC();\n+    void\tsetPendingByte(u_char);\n+    virtual int decodeNextByte() = 0;\n+    void\tsetRefLine(u_char*);\n+    u_char*\tgetRefLine();\n+    virtual void invalidCode(const char* type, int x);\n+    virtual void prematureEOL(const char* type, int x);\n+    virtual void badPixelCount(const char* type, int x);\n+    virtual void badDecodingState(const char* type, int x);\n+public:\n+    sigjmp_buf\tjmpEOF;\t\t \n+    sigjmp_buf\tjmpRTC;\t\t \n+    virtual ~G3Decoder();\n+    void\tsetupDecoder(u_int, fxBool is2D);\n+    void\tdecode(void* raster, u_int w, u_int h);\n+    void\tskip(u_int h);\n+    void\tskipLeader();\n+    fxBool\tdecodeRow(void* scanline, u_int w);\n+    void\tskipRow();\n+    fxBool\tisLastRow1D();\n+    fxBool\tisNextRow1D();\n+    fxBool\tisByteAligned();\n+    void\tsetRecvBuf(fxStackBuffer&);\n+    fxStackBuffer* getRecvBuf();\n+    void\tflushRecvBuf();\n+};\n+inline void G3Decoder::setRecvBuf(fxStackBuffer& b){ recvBuf = &b; }\n+inline fxStackBuffer* G3Decoder::getRecvBuf()\t{ return recvBuf; }\n+inline void G3Decoder::setRefLine(u_char* b)\t{ refline = b; }\n+inline u_char* G3Decoder::getRefLine()\t\t{ return refline; }\n+inline fxBool G3Decoder::isLastRow1D()\t\t{ return tag == G3_1D; }\n+enum FaxSendStatus {\n+    send_retry,\t\t\t \n+    send_failed,\t\t \n+    send_done,\t\t\t \n+    send_reformat,\t\t \n+};\n+class FaxServer;\n+class FaxMachineInfo;\n+class ModemConfig;\n+class fxStackBuffer;\n+class FaxFont;\n+class FaxRequest;\n+typedef unsigned int CallStatus;\t \n+typedef\tunsigned int CallType;\t\t \n+typedef\tunsigned int AnswerType;\t \n+typedef unsigned int SpeakerVolume;\n+typedef\tunsigned int ATResponse;\t \n+typedef\tunsigned int BaudRate;\t\t \n+typedef\tunsigned int FlowControl;\t \n+typedef\tunsigned int SetAction;\t\t \n+typedef struct {\n+    const char*\tmsg;\t\t \n+    u_short\tlen;\t\t \n+    ATResponse\texpect;\t\t \n+    CallStatus\tstatus;\t\t \n+    CallType\ttype;\t\t \n+} AnswerMsg;\n+class FaxModem : public G3Decoder {\n+public:\n+    static FaxModem* deduceModem(FaxServer&, const ModemConfig& config);\n+    enum {\t\t\t \n+\tOK\t   = 0,\t\t \n+\tBUSY\t   = 1,\t\t \n+\tNOCARRIER  = 2,\t\t \n+\tNOANSWER   = 3,\t\t \n+\tNODIALTONE = 4,\t\t \n+\tERROR\t   = 5,\t\t \n+\tFAILURE\t   = 6,\t\t \n+\tNOFCON\t   = 7,\t\t \n+\tDATACONN   = 8,\t\t \n+    };\n+    enum {\t\t\t \n+\tCALLTYPE_ERROR\t= 0,\t \n+\tCALLTYPE_DATA\t= 1,\t \n+\tCALLTYPE_FAX\t= 2,\t \n+\tCALLTYPE_VOICE\t= 3,\t \n+\tCALLTYPE_UNKNOWN = 4,\t \n+    };\n+    enum {\t\t\t \n+\tOFF\t= 0,\t\t \n+\tQUIET\t= 1,\t\t \n+\tLOW\t= 2,\t\t \n+\tMEDIUM\t= 3,\t\t \n+\tHIGH\t= 4,\t\t \n+    };\n+    enum {\t\t\t \n+\tBR0\t= 0,\t\t \n+\tBR300\t= 1,\t\t \n+\tBR1200\t= 2,\t\t \n+\tBR2400\t= 3,\t\t \n+\tBR4800\t= 4,\t\t \n+\tBR9600\t= 5,\t\t \n+\tBR19200\t= 6,\t\t \n+\tBR38400\t= 7,\t\t \n+\tBR57600\t= 8,\t\t \n+\tBR76800\t= 9,\t\t \n+    };\n+    enum {\t\t\t \n+\tFLOW_NONE\t= 0,\t \n+\tFLOW_XONXOFF\t= 1,\t \n+\tFLOW_RTSCTS\t= 2\t \n+    };\n+    enum {\t\t\t \n+\tACT_NOW\t\t= 0,\t \n+\tACT_DRAIN\t= 1,\t \n+\tACT_FLUSH\t= 2,\t \n+    };\n+    enum {\t\t\t \n+\tANSTYPE_ANY\t= 0,\t \n+\tANSTYPE_DATA\t= 1,\t \n+\tANSTYPE_FAX\t= 2,\t \n+\tANSTYPE_VOICE\t= 3,\t \n+    };\n+    enum {\t\t\t \n+\tAT_NOTHING\t= 0,\t \n+\tAT_OK\t\t= 1,\t \n+\tAT_CONNECT\t= 2,\t \n+\tAT_NOANSWER\t= 3,\t \n+\tAT_NOCARRIER\t= 4,\t \n+\tAT_NODIALTONE\t= 5,\t \n+\tAT_BUSY\t\t= 6,\t \n+\tAT_OFFHOOK\t= 7,\t \n+\tAT_RING\t\t= 8,\t \n+\tAT_ERROR\t= 9,\t \n+\tAT_EMPTYLINE\t= 10,\t \n+\tAT_TIMEOUT\t= 11,\t \n+\tAT_OTHER\t= 12,\t \n+    };\n+private:\n+    FaxServer&\tserver;\t\t \n+    fxStr\tresetCmds;\t \n+    long\tdataTimeout;\t \n+    BaudRate\trate;\t\t \n+    FlowControl\tiFlow;\t\t \n+    FlowControl\toFlow;\t\t \n+    u_int\tpageNumber;\t \n+    FaxFont*\ttagLineFont;\t \n+    u_int\ttagLineSlop;\t \n+    fxStr\ttagLine;\t \n+    u_int\ttagLineFields;\t \n+    void\tsetupTagLine(const FaxRequest&);\n+    u_int\tcblc;\t\t \n+    fxBool\tlastRowBad;\t \n+    u_long\trecvEOLCount;\t \n+    u_long\trecvBadLineCount;\n+    u_long\trecvConsecutiveBadLineCount;\n+    u_int\trecvCC;\t\t \n+    fxStackBuffer* recvBuf;\t \n+    u_long\tsavedWriteOff;\t \n+    void\trecvRow(TIFF* tif, fxStackBuffer& row, u_char* buf);\n+    void\tinvalidCode(const char* type, int x);\n+    void\tprematureEOL(const char* type, int x);\n+    void\tbadPixelCount(const char* type, int x);\n+    void\tbadDecodingState(const char* type, int x);\n+protected:\n+    const ModemConfig& conf;\t \n+    FlowControl\tflowControl;\t \n+    u_int\tmodemServices;\t \n+    fxStr\tmodemMfr;\t \n+    fxStr\tmodemModel;\t \n+    fxStr\tmodemRevision;\t \n+    Class2Params modemParams;\t \n+    char\trbuf[1024];\t \n+    ATResponse\tlastResponse;\t \n+    fxStr\tmfrQueryCmd;\t \n+    fxStr\tmodelQueryCmd;\t \n+    fxStr\trevQueryCmd;\t \n+    static const char* serviceNames[9];\t  \n+    static const u_char digitMap[12*2+1]; \n+    static const char* callStatus[9];\t  \n+    FaxModem(FaxServer&, const ModemConfig&);\n+    virtual fxBool selectBaudRate(BaudRate max, FlowControl i, FlowControl o);\n+    virtual fxBool setupModem() = 0;\n+    virtual fxBool setupManufacturer(fxStr& mfr);\n+    virtual fxBool setupModel(fxStr& model);\n+    virtual fxBool setupRevision(fxStr& rev);\n+    fxBool doQuery(const fxStr& queryCmd, fxStr& result, long ms = 30*1000);\n+    virtual const AnswerMsg* findAnswer(const char* s);\n+    virtual CallType answerResponse(fxStr& emsg);\n+    virtual CallStatus dialResponse(fxStr& emsg) = 0;\n+    void\tsetDataTimeout(long secs, u_int br);\n+    long\tgetDataTimeout() const;\n+    void\tpause(u_int ms);\n+    void\tcountPage();\n+    void\tmodemTrace(const char* fmt, ...);\n+    void\tmodemSupports(const char* fmt, ...);\n+    void\tmodemCapability(const char* fmt, ...);\n+    void\tprotoTrace(const char* fmt, ...);\n+    void\trecvTrace(const char* fmt, ...);\n+    void\tcopyQualityTrace(const char* fmt, ...);\n+    void\tserverTrace(const char* fmt, ...);\n+    void\ttraceBits(u_int bits, const char* bitNames[]);\n+    void\ttraceModemParams();\n+    void\ttracePPR(const char* dir, u_int ppr);\n+    void\ttracePPM(const char* dir, u_int ppm);\n+    void\ttrimModemLine(char buf[], int& cc);\n+    int\t\tgetModemLine(char buf[], u_int bufSize, long ms = 0);\n+    void\tbeginTimedTransfer();\n+    void\tendTimedTransfer();\n+    fxBool\twasTimeout();\n+    void\tsetTimeout(fxBool);\n+    void\tflushModemInput();\n+    fxBool\tputModem(void* data, int n, long ms = 0);\n+    fxBool\tputModemData(void* data, int n);\n+    fxBool\tputModemDLEData(const u_char* data, u_int,\n+\t\t    const u_char* brev, long ms);\n+    fxBool\tputModemLine(const char* cp);\n+    int\t\tgetModemChar(long ms = 0);\n+    int\t\tgetModemDataChar();\n+    void\tstartTimeout(long ms);\n+    void\tstopTimeout(const char* whichdir);\n+    static const char* ATresponses[13];\n+    virtual ATResponse atResponse(char* buf, long ms = 30*1000);\n+    virtual fxBool waitFor(ATResponse wanted, long ms = 30*1000);\n+    fxBool\tatCmd(const fxStr& cmd, ATResponse = AT_OK, long ms = 30*1000);\n+    fxBool\tatQuery(const char* what, u_int& v, long ms = 30*1000);\n+    fxBool\tatQuery(const char* what, fxStr& v, long ms = 30*1000);\n+    u_int\tfromHex(const char*, int = -1);\n+    fxStr\ttoHex(int, int ndigits);\n+    fxBool\tparseRange(const char*, u_int&);\n+    fxBool\tvparseRange(const char*, int nargs ...);\n+    fxBool\tvatFaxCmd(ATResponse resp, const char* cmd ... );\n+    fxBool\tsendBreak(fxBool pause);\n+    fxBool\tsetBaudRate(BaudRate rate);\n+    fxBool\tsetBaudRate(BaudRate rate, FlowControl i, FlowControl o);\n+    fxBool\tsetXONXOFF(FlowControl i, FlowControl o, SetAction);\n+    fxBool\tsetDTR(fxBool on);\n+    fxBool\tsetInputBuffering(fxBool on);\n+    fxBool\tmodemStopOutput();\n+    FlowControl\tgetInputFlow();\n+    FlowControl\tgetOutputFlow();\n+    fxBool\tgetProtocolTracing();\n+    fxBool\tgetHDLCTracing();\n+    FaxSendStatus sendSetupParams(TIFF*, Class2Params&,\n+\t\t    FaxMachineInfo&, fxStr&);\n+    fxBool\trecvCheckTSI(const fxStr&);\n+    void\trecvCSI(fxStr&);\n+    void\trecvDCS(Class2Params&);\n+    void\trecvNSF(u_int nsf);\n+    void\trecvSetupPage(TIFF* tif, long group3opts, int fillOrder);\n+    void\trecvResetPage(TIFF* tif);\n+    fxBool\tabortRequested();\n+    fxBool\tdecodePPM(const fxStr& pph, u_int& ppm, fxStr& emsg);\n+    fxBool\trecvPageDLEData(TIFF* tif, fxBool checkQuality,\n+\t\t    const Class2Params& params, fxStr& emsg);\n+    virtual void abortPageRecv() = 0;\n+    virtual int decodeNextByte();\n+    fxBool\tcheckQuality();\n+    fxBool\tisQualityOK(const Class2Params&);\n+    u_long\tgetRecvEOLCount() const;\n+    u_long\tgetRecvBadLineCount() const;\n+    u_long\tgetRecvConsecutiveBadLineCount() const;\n+    fxBool\tsetupTagLineSlop(const Class2Params&);\n+    u_int\tgetTagLineSlop() const;\n+    u_char*\timageTagLine(u_char* buf, u_int fillorder, const Class2Params&);\n+public:\n+    virtual ~FaxModem();\n+    virtual fxBool dataService();\t\t \n+    virtual fxBool voiceService();\t\t \n+    virtual fxBool sync(long ms = 0);\t\t \n+    virtual fxBool reset(long ms = 5*1000);\t \n+    virtual void hangup();\t\t\t \n+    virtual void setSpeakerVolume(SpeakerVolume);\n+    virtual void setLID(const fxStr& number) = 0;\n+    const fxStr& getModel() const;\n+    const fxStr& getManufacturer() const;\n+    const fxStr& getRevision() const;\n+    virtual fxBool supports2D() const;\n+    virtual fxBool supportsEOLPadding() const;\n+    virtual fxBool supportsVRes(float res) const;\n+    virtual fxBool supportsPageWidth(u_int w) const;\n+    virtual fxBool supportsPageLength(u_int l) const;\n+    virtual fxBool supportsPolling() const;\n+    virtual int selectSignallingRate(int br) const;\n+    u_int getBestSignallingRate() const;\n+    u_int getBestScanlineTime() const;\n+    virtual int selectScanlineTime(int st) const;\n+    u_int getBestVRes() const;\n+    u_int getBestDataFormat() const;\n+    u_int getBestPageWidth() const;\n+    u_int getBestPageLength() const;\n+    u_int modemDIS() const;\n+    virtual CallStatus dial(const char* number,\n+\tconst Class2Params& dis, fxStr& emsg);\n+    virtual void sendBegin(const FaxRequest&);\n+    virtual fxBool getPrologue(Class2Params&,\n+\tu_int& nsf, fxStr& csi, fxBool& hasDoc) = 0;\n+    virtual void sendSetupPhaseB();\n+    virtual FaxSendStatus sendPhaseB(TIFF*, Class2Params&, FaxMachineInfo&,\n+\tfxStr& pph, fxStr& emsg) = 0;\n+    virtual void sendEnd();\n+    virtual void sendAbort() = 0;\n+    virtual fxBool waitForRings(u_int rings);\n+    virtual CallType answerCall(AnswerType, fxStr& emsg);\n+    virtual fxBool recvBegin(fxStr& emsg) = 0;\n+    virtual fxBool recvPage(TIFF*, int& ppm, fxStr& em) = 0;\n+    virtual fxBool recvEnd(fxStr& emsg) = 0;\n+    virtual void recvAbort() = 0;\n+    virtual fxBool requestToPoll() = 0;\n+    virtual fxBool pollBegin(const fxStr& pollID, fxStr& emsg) = 0;\n+};\n+inline long FaxModem::getDataTimeout() const\t\t{ return dataTimeout; }\n+inline const fxStr& FaxModem::getModel() const\t\t{ return modemModel; }\n+inline const fxStr& FaxModem::getManufacturer() const\t{ return modemMfr; }\n+inline const fxStr& FaxModem::getRevision() const\t{ return modemRevision; }\n+inline FlowControl FaxModem::getInputFlow()\t\t{ return iFlow; }\n+inline FlowControl FaxModem::getOutputFlow()\t\t{ return oFlow; }\n+inline u_int FaxModem::getTagLineSlop() const\t\t{ return tagLineSlop; }\n+struct ModemConfig {\n+    fxStr\ttype;\t\t\t \n+    fxStr\tresetCmds;\t\t \n+    fxStr\tdialCmd;\t\t \n+    fxStr\tanswerAnyCmd;\t\t \n+    fxStr\tanswerDataCmd;\t\t \n+    fxStr\tanswerFaxCmd;\t\t \n+    fxStr\tanswerVoiceCmd;\t\t \n+    fxStr\tflowControlCmd;\t\t \n+    fxStr\tsetupDTRCmd;\t\t \n+    fxStr\tsetupDCDCmd;\t\t \n+    fxStr\tsetupAACmd;\t\t \n+    fxStr\tnoAutoAnswerCmd;\t \n+    fxStr\tsetVolumeCmd[5];\t \n+    fxStr\techoOffCmd;\t\t \n+    fxStr\tverboseResultsCmd;\t \n+    fxStr\tresultCodesCmd;\t\t \n+    fxStr\tonHookCmd;\t\t \n+    fxStr\tsoftResetCmd;\t\t \n+    fxStr\twaitTimeCmd;\t\t \n+    fxStr\tpauseTimeCmd;\t\t \n+    fxStr\tmfrQueryCmd;\t\t \n+    fxStr\tmodelQueryCmd;\t\t \n+    fxStr\trevQueryCmd;\t\t \n+    fxStr\tanswerAnyBeginCmd;\t \n+    fxStr\tanswerDataBeginCmd;\t \n+    fxStr\tanswerFaxBeginCmd;\t \n+    fxStr\tanswerVoiceBeginCmd;\t \n+    fxStr\tsendBeginCmd;\t\t \n+    u_int\tt1Timer;\t\t \n+    u_int\tt2Timer;\t\t \n+    u_int\tt4Timer;\t\t \n+    u_int\tdialResponseTimeout;\t \n+    u_int\tanswerResponseTimeout;\t \n+    u_int\tpageStartTimeout;\t \n+    u_int\tpageDoneTimeout;\t \n+    fxStr\tclass1Cmd;\t\t \n+    u_int\tclass1TCFResponseDelay;\t \n+    u_int\tclass1SendPPMDelay;\t \n+    u_int\tclass1SendTCFDelay;\t \n+    u_int\tclass1TrainingRecovery;\t \n+    u_int\tclass1RecvAbortOK;\t \n+    u_int\tclass1FrameOverhead;\t \n+    u_int\tclass1RecvIdentTimer;\t \n+    u_int\tclass1TCFMaxNonZero;\t \n+    u_int\tclass1TCFMinRun;\t \n+    fxStr\tclass2Cmd;\t\t \n+    fxStr\tclass2DCCQueryCmd;\t \n+    fxStr\tclass2CQQueryCmd;\t \n+    fxStr\tclass2BORCmd;\t\t \n+    fxStr\tclass2RELCmd;\t\t \n+    fxStr\tclass2CQCmd;\t\t \n+    fxStr\tclass2AbortCmd;\t\t \n+    fxStr\tclass2TBCCmd;\t\t \n+    fxStr\tclass2CRCmd;\t\t \n+    fxStr\tclass2PHCTOCmd;\t\t \n+    fxStr\tclass2BUGCmd;\t\t \n+    fxStr\tclass2LIDCmd;\t\t \n+    fxStr\tclass2DCCCmd;\t\t \n+    fxStr\tclass2DISCmd;\t\t \n+    fxStr\tclass2DDISCmd;\t\t \n+    fxStr\tclass2CIGCmd;\t\t \n+    fxStr\tclass2SPLCmd;\t\t \n+    fxStr\tclass2PTSCmd;\t\t \n+    fxStr\tclass2RecvDataTrigger;\t \n+    fxBool\tclass2XmitWaitForXON;\t \n+    fxStr\tclass2PIECmd;\t\t \n+    fxStr\tclass2NRCmd;\t\t \n+    FlowControl\tflowControl;\t\t \n+    BaudRate\tmaxRate;\t\t \n+    u_int\trecvFillOrder;\t\t \n+    u_int\tsendFillOrder;\t\t \n+    u_int\tframeFillOrder;\t\t \n+    u_int\tresetDelay;\t\t \n+    u_int\tbaudRateDelay;\t\t \n+    u_int\tmaxPacketSize;\t\t \n+    u_int\tinterPacketDelay;\t \n+    u_int\tpercentGoodLines;\t \n+    u_int\tmaxConsecutiveBadLines;\t \n+    fxBool\twaitForConnect;\t\t \n+    fxStr\ttagLineFmt;\t\t \n+    fxStr\ttagLineFontFile;\t \n+    ModemConfig();\n+    ~ModemConfig();\n+    fxBool parseItem(const char* tag, const char* value);\n+    void setVolumeCmds(const fxStr& value);\n+    fxStr parseATCmd(const char*);\n+};\n+ModemConfig::ModemConfig()\n+    : type(\"unknown\")\n+    , dialCmd(\"DT%s\")\t\t\t \n+    , noAutoAnswerCmd(\"S0=0\")\n+    , echoOffCmd(\"E0\")\n+    , verboseResultsCmd(\"V1\")\n+    , resultCodesCmd(\"Q0\")\n+    , onHookCmd(\"H0\")\n+    , softResetCmd(\"Z\")\n+    , waitTimeCmd(\"S7=30\")\t\t \n+    , pauseTimeCmd(\"S8=2\")\t\t \n+    , class1Cmd(\"+FCLASS=1\")\t\t \n+    , class2CQQueryCmd(\"+FCQ=?\")\t \n+    , tagLineFmt(\"From %%n|%c|Page %%p of %%t\")\n+{\n+    class2XmitWaitForXON = ((fxBool)1) ;\t \n+    setVolumeCmds(\"M0 L0M1 L1M1 L2M1 L3M1\");\n+    answerAnyCmd = \"A\";\n+    flowControl = FaxModem::FLOW_NONE;\t \n+    maxRate = FaxModem::BR19200;\t \n+    sendFillOrder = 2 ;\t \n+    recvFillOrder = 2 ;\t \n+    frameFillOrder = 2 ;\t \n+    resetDelay = 2600;\t\t\t \n+    baudRateDelay = 0;\t\t\t \n+    t1Timer = ((35+5)*1000) ;\t\t\t \n+    t2Timer = ((6+1)*1000) ;\t\t\t \n+    t4Timer = 3100 ;\t\t\t \n+    dialResponseTimeout = 3*60*1000;\t \n+    answerResponseTimeout = 3*60*1000;\t \n+    pageStartTimeout = 3*60*1000;\t \n+    pageDoneTimeout = 3*60*1000;\t \n+    class1TCFResponseDelay = 75;\t \n+    class1SendPPMDelay = 75;\t\t \n+    class1SendTCFDelay = 75;\t\t \n+    class1TrainingRecovery = 1500;\t \n+    class1RecvAbortOK = 200;\t\t \n+    class1FrameOverhead = 4;\t\t \n+    class1RecvIdentTimer = t1Timer;\t \n+    class1TCFMinRun = (2*1500 )/3; \n+    class1TCFMaxNonZero = 10;\t\t \n+    maxPacketSize = 16*1024;\t\t \n+    interPacketDelay = 0;\t\t \n+    waitForConnect = ((fxBool)0) ;\t\t \n+    percentGoodLines = 95;\t\t \n+    maxConsecutiveBadLines = 5;\t\t \n+}\n+ModemConfig::~ModemConfig()\n+{\n+}\n+static fxBool getBoolean(const char* cp)\n+    { return ((strcasecmp( cp ,  \"on\" )==0)  || (strcasecmp( cp ,  \"yes\" )==0) ); }\n+static BaudRate\n+findRate(const char* cp)\n+{\n+    static const struct {\n+\tconst char* name;\n+\tBaudRate    br;\n+    } rates[] = {\n+\t{   \"300\", FaxModem::BR300 },\n+\t{  \"1200\", FaxModem::BR1200 },\n+\t{  \"2400\", FaxModem::BR2400 },\n+\t{  \"4800\", FaxModem::BR4800 },\n+\t{  \"9600\", FaxModem::BR9600 },\n+\t{ \"19200\", FaxModem::BR19200 },\n+\t{ \"38400\", FaxModem::BR38400 },\n+\t{ \"57600\", FaxModem::BR57600 },\n+\t{ \"76800\", FaxModem::BR76800 },\n+    };\n+    for (int i = (sizeof ( rates ) / sizeof ( rates [0])) -1; i >= 0; i--)\n+\tif ((strcasecmp( cp ,  rates[i].name )==0) )\n+\t    return (rates[i].br);\n+    return (FaxModem::BR0);\n+}\n+static BaudRate\n+getRate(const char* cp)\n+{\n+    BaudRate br = findRate(cp);\n+    if (br == FaxModem::BR0) {\n+\tsyslog(3 , \"Unknown baud rate \\\"%s\\\", using 19200\", cp);\n+\tbr = FaxModem::BR19200;\t\t\t \n+    }\n+    return (br);\n+}\n+static u_int\n+getFill(const char* cp)\n+{\n+    if ((strcasecmp( cp ,  \"LSB2MSB\" )==0) )\n+\treturn (2 );\n+    else if ((strcasecmp( cp ,  \"MSB2LSB\" )==0) )\n+\treturn (1 );\n+    else {\n+\tsyslog(3 , \"Unknown fill order \\\"%s\\\"\", cp);\n+        return ((u_int) -1);\n+    }\n+}\n+static FlowControl\n+getFlow(const char* cp)\n+{\n+    if ((strcasecmp( cp ,  \"xonxoff\" )==0) )\n+\treturn (FaxModem::FLOW_XONXOFF);\n+    else if ((strcasecmp( cp ,  \"rtscts\" )==0) )\n+\treturn (FaxModem::FLOW_RTSCTS);\n+    else if ((strcasecmp( cp ,  \"none\" )==0) )\n+\treturn (FaxModem::FLOW_NONE);\n+    else {\n+\tsyslog(3 , \"Unknown flow control \\\"%s\\\", using xonxoff\", cp);\n+\treturn (FaxModem::FLOW_XONXOFF);\t \n+    }\n+}\n+void\n+ModemConfig::setVolumeCmds(const fxStr& tag)\n+{\n+    u_int l = 0;\n+    for (int i = FaxModem::OFF; i <= FaxModem::HIGH; i++) {\n+\tfxStr tmp = tag.token(l, \" \\t\");\t\t \n+\tsetVolumeCmd[i] = parseATCmd(tmp);\n+    }\n+}\n+fxStr\n+ModemConfig::parseATCmd(const char* cp)\n+{\n+    fxStr cmd(cp);\n+    u_int pos = 0;\n+    while ((pos = cmd.next(pos, '<')) != cmd.length()) {\n+\tu_int epos = pos+1;\n+\tfxStr esc = cmd.token(epos, '>');\n+\tesc.lowercase();\n+\tchar ecode;\n+\tif (esc == \"xon\")\n+\t    ecode = (0x80|0xf) ;\n+\telse if (esc == \"rts\")\n+\t    ecode = (0x80|0xe) ;\n+\telse if (esc == \"none\")\n+\t    ecode = (0x80|0xd) ;\n+\telse if (esc == \"\")\t\t \n+\t    ecode = '<';\n+\telse {\n+\t    BaudRate br = findRate(esc);\n+\t    if (br == FaxModem::BR0) {\n+\t\tsyslog(3 , \"Unknown AT escape code \\\"%s\\\"\", (char*) esc);\n+\t\tpos = epos;\n+\t\tcontinue;\n+\t    }\n+\t    ecode = 0x80| ((int)( br )) ;\n+\t}\n+\tcmd.remove(pos, epos-pos);\n+\tcmd.insert(ecode, pos);\n+    }\n+    return (cmd);\n+}\n+static const struct {\n+    const char*\t\t name;\n+    fxStr ModemConfig::* p;\n+} atcmds[] = {\n+    { \"ModemAnswerCmd\",\t\t\t&ModemConfig::answerAnyCmd },\n+    { \"ModemAnswerAnyCmd\",\t\t&ModemConfig::answerAnyCmd },\n+    { \"ModemAnswerFaxCmd\",\t\t&ModemConfig::answerFaxCmd },\n+    { \"ModemAnswerDataCmd\",\t\t&ModemConfig::answerDataCmd },\n+    { \"ModemAnswerVoiceCmd\",\t\t&ModemConfig::answerVoiceCmd },\n+    { \"ModemAnswerFaxBeginCmd\",\t\t&ModemConfig::answerFaxBeginCmd },\n+    { \"ModemAnswerDataBeginCmd\",\t&ModemConfig::answerDataBeginCmd },\n+    { \"ModemAnswerVoiceBeginCmd\",\t&ModemConfig::answerVoiceBeginCmd },\n+    { \"ModemResetCmds\",\t\t\t&ModemConfig::resetCmds },\n+    { \"ModemResetCmd\",\t\t\t&ModemConfig::resetCmds },\n+    { \"ModemDialCmd\",\t\t\t&ModemConfig::dialCmd },\n+    { \"ModemFlowControlCmd\",\t\t&ModemConfig::flowControlCmd },\n+    { \"ModemSetupAACmd\",\t\t&ModemConfig::setupAACmd },\n+    { \"ModemSetupDTRCmd\",\t\t&ModemConfig::setupDTRCmd },\n+    { \"ModemSetupDCDCmd\",\t\t&ModemConfig::setupDCDCmd },\n+    { \"ModemNoAutoAnswerCmd\",\t\t&ModemConfig::noAutoAnswerCmd },\n+    { \"ModemEchoOffCmd\",\t\t&ModemConfig::echoOffCmd },\n+    { \"ModemVerboseResultsCmd\",\t\t&ModemConfig::verboseResultsCmd },\n+    { \"ModemResultCodesCmd\",\t\t&ModemConfig::resultCodesCmd },\n+    { \"ModemOnHookCmd\",\t\t\t&ModemConfig::onHookCmd },\n+    { \"ModemSoftResetCmd\",\t\t&ModemConfig::softResetCmd },\n+    { \"ModemWaitTimeCmd\",\t\t&ModemConfig::waitTimeCmd },\n+    { \"ModemCommaPauseTimeCmd\",\t\t&ModemConfig::pauseTimeCmd },\n+    { \"ModemMfrQueryCmd\",\t\t&ModemConfig::mfrQueryCmd },\n+    { \"ModemModelQueryCmd\",\t\t&ModemConfig::modelQueryCmd },\n+    { \"ModemRevQueryCmd\",\t\t&ModemConfig::revQueryCmd },\n+    { \"ModemSendBeginCmd\",\t\t&ModemConfig::sendBeginCmd },\n+    { \"Class1Cmd\",\t\t\t&ModemConfig::class1Cmd },\n+    { \"Class2Cmd\",\t\t\t&ModemConfig::class2Cmd },\n+    { \"Class2BORCmd\",\t\t\t&ModemConfig::class2BORCmd },\n+    { \"Class2RELCmd\",\t\t\t&ModemConfig::class2RELCmd },\n+    { \"Class2CQCmd\",\t\t\t&ModemConfig::class2CQCmd },\n+    { \"Class2AbortCmd\",\t\t\t&ModemConfig::class2AbortCmd },\n+    { \"Class2CQQueryCmd\",\t\t&ModemConfig::class2CQQueryCmd },\n+    { \"Class2DCCQueryCmd\",\t\t&ModemConfig::class2DCCQueryCmd },\n+    { \"Class2TBCCmd\",\t\t\t&ModemConfig::class2TBCCmd },\n+    { \"Class2CRCmd\",\t\t\t&ModemConfig::class2CRCmd },\n+    { \"Class2PHCTOCmd\",\t\t\t&ModemConfig::class2PHCTOCmd },\n+    { \"Class2BUGCmd\",\t\t\t&ModemConfig::class2BUGCmd },\n+    { \"Class2LIDCmd\",\t\t\t&ModemConfig::class2LIDCmd },\n+    { \"Class2DCCCmd\",\t\t\t&ModemConfig::class2DCCCmd },\n+    { \"Class2DISCmd\",\t\t\t&ModemConfig::class2DISCmd },\n+    { \"Class2DDISCmd\",\t\t\t&ModemConfig::class2DDISCmd },\n+    { \"Class2CIGCmd\",\t\t\t&ModemConfig::class2CIGCmd },\n+    { \"Class2PTSCmd\",\t\t\t&ModemConfig::class2PTSCmd },\n+    { \"Class2SPLCmd\",\t\t\t&ModemConfig::class2SPLCmd },\n+    { \"Class2PIECmd\",\t\t\t&ModemConfig::class2PIECmd },\n+    { \"Class2NRCmd\",\t\t\t&ModemConfig::class2NRCmd },\n+    { \"TagLineFont\",\t\t\t&ModemConfig::tagLineFontFile },\n+    { \"TagLineFormat\",\t\t\t&ModemConfig::tagLineFmt },\n+};\n+static const struct {\n+    const char*\t\t name;\n+    u_int ModemConfig::* p;\n+} fillorders[] = {\n+    { \"ModemRecvFillOrder\",\t\t&ModemConfig::recvFillOrder },\n+    { \"ModemSendFillOrder\",\t\t&ModemConfig::sendFillOrder },\n+    { \"ModemFrameFillOrder\",\t\t&ModemConfig::frameFillOrder },\n+};\n+static const struct {\n+    const char*\t\t name;\n+    u_int ModemConfig::* p;\n+} numbers[] = {\n+    { \"ModemResetDelay\",\t\t&ModemConfig::resetDelay },\n+    { \"ModemBaudRateDelay\",\t\t&ModemConfig::baudRateDelay },\n+    { \"ModemMaxPacketSize\",\t\t&ModemConfig::maxPacketSize },\n+    { \"ModemInterPacketDelay\",\t\t&ModemConfig::interPacketDelay },\n+    { \"FaxT1Timer\",\t\t\t&ModemConfig::t1Timer },\n+    { \"FaxT2Timer\",\t\t\t&ModemConfig::t2Timer },\n+    { \"FaxT4Timer\",\t\t\t&ModemConfig::t4Timer },\n+    { \"ModemDialResponseTimeout\",\t&ModemConfig::dialResponseTimeout },\n+    { \"ModemAnswerResponseTimeout\",\t&ModemConfig::answerResponseTimeout },\n+    { \"ModemPageStartTimeout\",\t\t&ModemConfig::pageStartTimeout },\n+    { \"ModemPageDoneTimeout\",\t\t&ModemConfig::pageDoneTimeout },\n+    { \"Class1TCFResponseDelay\",\t\t&ModemConfig::class1TCFResponseDelay },\n+    { \"Class1SendPPMDelay\",\t\t&ModemConfig::class1SendPPMDelay },\n+    { \"Class1SendTCFDelay\",\t\t&ModemConfig::class1SendTCFDelay },\n+    { \"Class1TrainingRecovery\",\t\t&ModemConfig::class1TrainingRecovery },\n+    { \"Class1RecvAbortOK\",\t\t&ModemConfig::class1RecvAbortOK },\n+    { \"Class1FrameOverhead\",\t\t&ModemConfig::class1FrameOverhead },\n+    { \"Class1RecvIdentTimer\",\t\t&ModemConfig::class1RecvIdentTimer },\n+    { \"Class1TCFMaxNonZero\",\t\t&ModemConfig::class1TCFMaxNonZero },\n+    { \"Class1TCFMinRun\",\t\t&ModemConfig::class1TCFMinRun },\n+    { \"PercentGoodLines\",\t\t&ModemConfig::percentGoodLines },\n+    { \"MaxConsecutiveBadLines\",\t\t&ModemConfig::maxConsecutiveBadLines },\n+};\n+fxBool\n+ModemConfig::parseItem(const char* tag, const char* value)\n+{\n+    int i;\n+    for (i = (sizeof ( atcmds ) / sizeof ( atcmds [0])) -1; i >= 0; i--)\n+\tif ((strcasecmp( tag ,  atcmds[i].name )==0) ) {\n+\t    (*this).*atcmds[i].p = parseATCmd(value);\n+\t    return (((fxBool)1) );\n+\t}\n+    for (i = (sizeof ( fillorders ) / sizeof ( fillorders [0])) -1; i >= 0 ; i--)\n+\tif ((strcasecmp( tag ,  fillorders[i].name )==0) ) {\n+\t    (*this).*fillorders[i].p = getFill(value);\n+\t    return (((fxBool)1) );\n+\t}\n+    for (i = (sizeof ( numbers ) / sizeof ( numbers [0])) -1; i >= 0 ; i--)\n+\tif ((strcasecmp( tag ,  numbers[i].name )==0) ) {\n+\t    (*this).*numbers[i].p = atoi(value);\n+\t    return (((fxBool)1) );\n+\t}\n+    fxBool recognized = ((fxBool)1) ;\n+    if ((strcasecmp( tag ,  \"ModemType\" )==0) )\n+\ttype = value;\n+    else if ((strcasecmp( tag ,  \"ModemSetVolumeCmd\" )==0) )\n+\tsetVolumeCmds(value);\n+    else if ((strcasecmp( tag ,  \"ModemFlowControl\" )==0) )\n+\tflowControl = getFlow(value);\n+    else if ((strcasecmp( tag ,  \"ModemMaxRate\" )==0)  || (strcasecmp( tag ,  \"ModemRate\" )==0) )\n+\tmaxRate = getRate(value);\n+    else if ((strcasecmp( tag ,  \"ModemWaitForConnect\" )==0) )\n+\twaitForConnect = getBoolean(value);\n+    else if ((strcasecmp( tag ,  \"Class2RecvDataTrigger\" )==0) )\n+\tclass2RecvDataTrigger = value;\n+    else if ((strcasecmp( tag ,  \"Class2XmitWaitForXON\" )==0) )\n+\tclass2XmitWaitForXON = getBoolean(value);\n+    else\n+\trecognized = ((fxBool)0) ;\n+    return (recognized);\n+}"}, {"sha": "a6527a5cbd4fae459248f812d801ff93be88d812", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash6.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash6.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,16 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+// Should be fixed by:\n+// Sun Jun 13 12:55:22 1993  Brendan Kehoe  (brendan@lisa.cygnus.com)\n+// \n+// \t* cp-decl.c (start_function): Avoid a null-reference on CTYPE.\n+\n+template<int>\n+class Program {\n+} ;\n+\n+class Program<0> {\n+public:\n+   inline friend float EvalNextArg()\n+        { return 1.0 ; }\n+} ;"}, {"sha": "b2af4310d1ba3752a9896ac20ee23597ff9e9394", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash60.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash60.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash60.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash60.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,12 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class X\n+{\n+public:\n+    X ();\n+    int\tf[4];\n+};\n+\n+// Note that we mistakenly initialize the array data member as if it\n+// was scalar\n+X::X () : f (0) {}// ERROR - .*"}, {"sha": "4d3bbc4c693955c92b88378deded3179298bfd53", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash61.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash61.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash61.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash61.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,5 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+        template <class TP> class sapp { };\n+        class foo {};\n+        extern foo& __iomanip_setw (foo&, TP);// ERROR -  type spec.*"}, {"sha": "77b9fc847635f1a4ed74f9490bdd81987c9125a8", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash62.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash62.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash62.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash62.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,32 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+#include <iostream.h>\n+\n+\tvoid\n+\tfubar(ostream* out, const char* string)\n+\t{\n+  \t  (*out) << string << endl;\n+  \t  return;\n+\t}\n+\n+\tint\n+\tmain()\n+\t{\n+  \t  // Declare a ref and a pointer to the same ostream.\n+  \t  //\n+  \t  ostream* out = &cerr;\n+  \t  ostream& die = cerr;\n+\n+  \t  // Valid call to fubar.\n+  \t  //\n+  \t  fubar(out, \"First line.\");\n+  \n+  \t  // Invalid call to fubar. (1st arg is an ostream&. fubar expects\n+  \t  // ostream*.)This should be a syntax error, but g++ does not catch it.\n+  \t  // Call to this function results in a bus error in fubar when the 1st\n+  \t  // arg is dereferenced.\n+  \t  //\n+  \t  fubar(die, \"Second line.\");// ERROR -  cannot convert .die.*\n+  \n+  \t  return 1;\n+\t}"}, {"sha": "84f8fc5762484a6fcdc9e34a2d8d044c0b5b300c", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash63.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash63.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash63.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash63.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class String\n+   {\n+ public:\n+   String (const char *str);\n+   };\n+\n+class UnitList \n+   {\n+ public:\n+   UnitList (...);\n+   };\n+\n+UnitList unit_list (String(\"keV\"));"}, {"sha": "310241850f7b280d7d88d52f8dc048688413f862", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash64.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash64.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash64.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash64.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,19 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+typedef long unsigned int size_t;\n+typedef void (*RF_Ptr)(void *);\n+\n+struct _im_pers_mem_spec {\n+  inline _im_pers_mem_spec(void );\n+  inline _im_pers_mem_spec(auto int of, auto int n);\n+};\n+\n+struct _type_desc {\n+  _type_desc(char *, int , RF_Ptr , int , int ,...);\n+};\n+\n+struct metatype { int base_list; };\n+\n+static _type_desc _type_metatype(\"metatype\", sizeof(metatype),\n+  (RF_Ptr)0, 0, 1, 1,\n+  _im_pers_mem_spec( ((size_t)&((( metatype *)0)-> base_list )) , 1));"}, {"sha": "132651e90a0c6beb82e0428d8b9467cf64024705", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash65.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash65.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash65.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash65.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class X {\n+public:  \n+  virtual const char* \tXY(const void* val) const = 0;\n+};\n+\n+\n+class Y : public X {\n+public:\n+  using X::xy;// ERROR -  no memb.*\n+\n+  using X::z;// ERROR -  no memb.*\n+};"}, {"sha": "878957b84e6ab474e50439e19d1f014cc7c0f8fb", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash66.C", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash66.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash66.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash66.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,137 @@\n+// Build don't link: \n+// Special g++ Options: -O\n+// GROUPS passed old-abort\n+typedef unsigned char uchar;\n+typedef unsigned short ushort;\n+typedef unsigned long ulong;\n+extern int swap_endian;\t\t\t \n+inline ushort\n+swapshort(ushort value)\n+{\n+    value &= 0xffff;\n+    return ((value << 8) | (value >> 8));\n+}\n+struct eshort\n+{\n+    ushort\tdata;\t\t\t \n+    operator ushort() { return swap_endian ? swapshort(data) : data;}\n+    eshort(ushort t) { data = swap_endian ? swapshort(t) : t;}\n+    eshort() {}\n+};\n+inline ulong\n+swaplong(ulong value)\n+{\n+    ulong v = (value << 16) | (value >> 16);\n+    return ((v >> 8) & 0x00ff00ff) | ((v << 8) & 0xff00ff00);\n+};\n+struct elong\n+{\n+    ulong\tdata;\t\t\t \n+    operator ulong() { return swap_endian ? swaplong(data) : data;}\n+    elong(ulong t) { data = swap_endian ? swaplong(t) : t; }\n+    elong() {}\n+};\n+struct digiheader\n+{\n+    uchar\ttype[2];\t\t \n+    eshort\tsoft_version;\t\t \n+    eshort\tlo_boot_rev;\t\t \n+    eshort\thi_boot_rev;\t\t \n+    eshort\tload_segment;\t\t \n+    eshort\tlength;\t\t\t \n+    eshort\texec_start;\t\t \n+    eshort\timage_offset;\t\t \n+    elong\tstartup_code[2];\t \n+    elong\tchecksum;\t\t \n+};\n+extern void uncompress(uchar* buf, ulong len);\n+extern ulong compress(char* filename, uchar* buffer, ulong);\n+struct filehdr\n+{\n+    eshort\tf_magic;\t\t \n+    eshort\tf_nscns;\t\t \n+    elong\tf_timdat;\t\t \n+    elong\tf_symptr;\t\t \n+    elong\tf_nsyms;\t\t \n+    eshort\tf_opthdr;\t\t \n+    eshort\tf_flags;\t\t \n+};\n+struct aouthdr\n+{\n+    eshort\tmagic;\t\t\t \n+    eshort\tvstamp;\t\t\t \n+    elong\ttsize;\t\t\t \n+    elong\tdsize;\t\t\t \n+    elong\tbsize;\t\t\t \n+    elong\tentry;\t\t\t \n+    elong\ttext_start;\t\t \n+    elong\tdata_start;\t\t \n+    elong\tbss_start;\t\t \n+    elong\tgprmask;\t\t \n+    elong\tcprmask[4];\t\t \n+    elong\tgp_value;\t\t \n+};\n+struct scnhdr\n+{\n+    char\ts_name[8];\t\t \n+    elong\ts_paddr;\t\t \n+    elong\ts_vaddr;\t\t \n+    elong\ts_size;\t\t\t \n+    elong\ts_scnptr;\t\t \n+    elong\ts_relptr;\t\t \n+    elong\ts_lnnoptr;\t\t \n+    eshort\ts_nreloc;\t\t \n+    eshort\ts_nlnno;\t\t \n+    elong\ts_flags;\t\t \n+};\n+int file_little_endian;\t\t\t \n+int host_little_endian;\t\t\t \n+int swap_endian;\t\t\t \n+int docheck;\t\t\t\t \n+int expand;\t\t\t\t \n+ulong memsize;\t\t\t\t \n+ulong compression_quality;\t\t \n+char *compressfile;\t\t\t \n+int debug_level;\t\t\t \n+extern \"C\" int getopt (int, char**, char*);\n+int\n+main(int argc, char** argv)\n+{\n+    uchar checksum;\n+    uchar docrc;\n+    ulong len;\n+    ulong maxlen;\n+    int i;\n+    int c;\n+    int magic;\n+    int tsize;\n+    int dsize;\n+    int quality;\n+    char dummy;\n+    uchar* code;\n+    uchar* buf;\n+    char* ap;\n+    digiheader *dh;\n+    compression_quality = 10000;\n+    docheck = 0;\n+    while ((c = getopt(argc, argv, \"Ccdf:k:q:x:\")) != -1)\n+    {\n+\tswitch (c)\n+\t{\n+\tdefault:\n+\t    goto usage;\n+\t}\n+    }\n+    if ((expand && (docheck || compressfile || quality)) ||\n+\t(quality && !compressfile))\n+    {\n+    usage:\n+\treturn(2);\n+    }\n+    if (compressfile)\n+    {\n+\tdh->image_offset = len;\n+\t\n+\tlen += compress(compressfile, code + len, maxlen - len);\n+    }\n+}"}, {"sha": "f63ba5ddf3feacdd90587202a55a0469d72a7b36", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash67.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash67.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash67.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash67.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,3 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+#pragma comment(exestr, \"@(#) errno.h 10.2 92/03/26 \")"}, {"sha": "b209bd891c0a042050fa2d317119c1138d4462c6", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash68.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash68.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash68.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash68.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,28 @@\n+// Build don't link: \n+// Special g++ Options: -w -O\n+// GROUPS passed old-abort\n+class   RWDlist\n+{\n+public:\n+  RWDlist& operator=(const RWDlist&);\n+};\n+class DataItemRWGDlist : public RWDlist {};\n+\n+class Base {};\n+class DataItemList : public Base\n+{\n+  private:\n+  DataItemRWGDlist m_diList;\n+};      \n+\n+class StatementGroup\n+{\n+  public:\n+    DataItemList   dataItemList;\n+    StatementGroup(const StatementGroup&);\n+};\n+\n+StatementGroup::StatementGroup(const StatementGroup& sg)\n+{\n+  dataItemList = sg.dataItemList;\n+}"}, {"sha": "c55cab978487386d920eb93f7f30d4ab0a622f62", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash7.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash7.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,47 @@\n+// Build don't link: \n+// GROUPS passed templates\n+template<class T>\n+class Vector\n+{\n+  int sz;\n+  T *v;\n+public:\n+  Vector (int s) : sz (s) { v = new T[sz]; }\n+  ~Vector () { delete[] v; }\n+  T &operator[] (int i) { return v[i]; }\n+  int size () { return sz; }\n+};\n+\n+template<class T>// ERROR - previous definition of T\n+struct Comparator\n+{\n+  typedef T T;// ERROR - use of template type T in typedef to T\n+  static lessthan (T &a, T &b) { return a < b; }\n+};\n+\n+template<class Comp>\n+struct Sort\n+{\n+  static void sort (Vector<Comp::T> &);// ERROR - use of bad T\n+};\n+\n+template<class Comp>\n+void Sort<Comp>::sort (Vector<Comp::T> &v)// ERROR - use of bad T\n+{\n+  int n = v.size ();\n+\n+  for (int i = 0; i < n - 1; i++)\n+    for (int j = n - 1; i < j; j--)\n+      if (Comp::lessthan (v[j], v[j - 1]))\n+\t{\n+\t  typename Comp::T temp = v[j];\n+\t  v[j] = v[j - 1];\n+\t  v[j - 1] = temp;\n+\t}\n+}\n+\n+void\n+f (Vector<int> &vi)\n+{\n+  Sort<Comparator<int> >::sort (vi);\n+}"}, {"sha": "701452ab6c2937caca95c179580db372f3926ff4", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash8.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash8.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,12 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+template<int a, int b>\n+class Elvis\n+{// ERROR - in template.*\n+} ;\n+\n+template<int a>\n+class Elvis<0>// ERROR - .*\n+{\n+   int geta() { return a ; }\n+} ;"}, {"sha": "a4155ef6bb5fe65df18ae19d2602f2f0abcc18e7", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash9.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash9.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,24 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+class A {};\n+\n+class SimQuery\n+{\n+public:\n+  SimQuery();\n+  ~SimQuery();\n+  int SetMeshFile(char name[]);\n+protected:\n+  A& scaling;\n+  A* mesh;\n+};\n+\n+SimQuery::SimQuery():scaling(A) {}// ERROR - .*\n+\n+SimQuery::~SimQuery() {}// ERROR - \n+\n+int SimQuery::SetMeshFile(char name[])\n+{// ERROR - \n+  mesh = new C;// ERROR - .*\n+  return 0; // needed to avoid warning of reaching end of non-void fn\n+}"}, {"sha": "eaf487159d839fcdf0a26be1142c5dcdae8a162e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/ctors1.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fctors1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fctors1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fctors1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,27 @@\n+// GROUPS passed constructors\n+// Check that global level object constructors get called.\n+\n+extern \"C\" void printf (char *, ...); \n+\n+struct base {\n+\tint f1;\n+\tint f2;\n+\tbase (int arg1, int arg2);\n+};\n+\n+\n+base global_base(0x55, 0xff);\n+\n+int main ()\n+{\n+\tif ((global_base.f1 != 0x55) || (global_base.f2 != 0xff))\n+\t  printf (\"FAIL\\n\");\n+\telse\n+\t  printf (\"PASS\\n\");\n+}\n+\n+base::base(int arg1, int arg2)\n+{\n+\tf1 = arg1;\n+\tf2 = arg2;\n+};"}, {"sha": "2f83ce1cdb8f9b0543906cd338991d6f1f3a18a8", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/ctors2.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fctors2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fctors2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fctors2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,28 @@\n+// GROUPS passed constructors\n+// Check that sub-words sized class members are correctly set\n+// by constructors.\n+\n+extern \"C\" void printf (char *, ...); \n+\n+struct base {\n+\tint f1 : 8;\n+\tint f2 : 8;\n+\tbase (int arg1, int arg2);\n+};\n+\n+\n+base global_base(0x55, 0x7e);\n+\n+int main ()\n+{\n+\tif ((global_base.f1 != 0x55) || (global_base.f2 != 0x7e))\n+\t  printf (\"FAIL\\n\");\n+\telse\n+\t  printf (\"PASS\\n\");\n+}\n+\n+base::base(int arg1, int arg2)\n+{\n+\tf1 = arg1;\n+\tf2 = arg2;\n+};"}, {"sha": "755d547b02280cce66a24e38a455c49a8b6f1d92", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/ctors3.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fctors3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fctors3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fctors3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,17 @@\n+// Build don't link: \n+// GROUPS passed constructors\n+class A;\n+\n+class B {\n+public:\n+    B();\n+static A sa;\n+};\n+\n+class A {\n+public:\n+    A(int i);\n+};\n+\n+A B::sa(1);\n+"}, {"sha": "57f3b426108aa4ce85f9589ccb5a078cafa1adde", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/cvt1.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,44 @@\n+// Build don't link: \n+// GROUPS passed conversions\n+#include <iostream.h>\n+\n+class Thing\n+{\n+public:\n+      typedef enum { GOOD_THING, BAD_THING, } ThingType ; // ERROR - comma\n+\tThing (ThingType type) : thingType (type) { }\n+\t~Thing () { }\n+private:\n+\tThingType thingType ;\n+} ;\n+\n+class Group\n+{\n+public:\n+      typedef enum { THIS_GROUP, THAT_GROUP, } GroupType ; // ERROR - comma\n+\tGroup (GroupType type) : groupType (type), groupCount (0) { }\n+\t~Group () { }\n+\tvoid append (Thing* const &entry) { groupCount ++ ; }\n+\toperator GroupType () const { return groupType ; }\n+\toperator int () const { return groupCount ; } // remove this and problem gone\n+\n+private:\n+\tint groupCount ;\n+\tGroupType groupType ;\n+} ;\n+\n+inline Group& operator += (Group& g, Thing* const t)\n+{\n+\tg.append (t) ;\n+\treturn g ; // complaint is here\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+\tGroup g (Group::THIS_GROUP) ;\n+\n+\tg += new Thing (Thing::GOOD_THING) ;\n+\tcout << \"Group type is \" << (Group::GroupType) g << endl ;\n+\treturn 0 ;\n+}"}, {"sha": "76ae1561f3a075e0e4101e6a6ed2928194485a31", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/cvt2.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,9 @@\n+// Build don't link: \n+// GROUPS passed conversions\n+void f(const short & s) { }\n+\n+   int\n+main() {\n+   f(0);\n+   return 0;\n+}"}, {"sha": "6ab8465c6dfbafca466c7ef2405c1c1bc6f24f63", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/cvt3.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,48 @@\n+// Build don't link: \n+// GROUPS passed conversions\n+class GttObject {};\n+class GctObject: virtual public GttObject {};\n+class NDAMObject: virtual public GttObject, virtual public GctObject {};\n+class GctHashObject: virtual public GctObject {};\n+\n+class GctRef: virtual public GctHashObject\n+{ public: operator void*() const; };\n+\n+class NDAMAssemblerObject: virtual public NDAMObject {};\n+class GctReferenceObject: virtual public GctHashObject {};\n+class NDAMValue: virtual public NDAMAssemblerObject, public GctReferenceObject {};\n+\n+class nnyacc;\n+class NDAMValueRef : virtual public NDAMObject, public GctRef \n+{\n+  NDAMValue *operator->() const;\t \n+  operator NDAMValue *() const;\t \n+friend class nnyacc;\n+};\n+\n+typedef void* Pix;\n+class NDAMValueRefSLList\n+{\n+public:\n+  NDAMValueRefSLList();\n+  NDAMValueRefSLList(const NDAMValueRefSLList& a);\n+  ~NDAMValueRefSLList();\n+  NDAMValueRef& operator () (Pix p) const;\n+};\n+\n+struct bar\n+{\n+  NDAMValueRefSLList *valueList;\n+};\n+\n+class nnyacc\n+{\n+public:\n+      static void assign(void*& lval, void*& rval); // ERROR - candidates\n+};\n+\n+void\n+foo (bar yylval, bar *yyvsp)\n+{\n+  nnyacc::assign(yylval.valueList, yyvsp[0].valueList);// ERROR - \n+}"}, {"sha": "3d9f475b67910eed61b50806587f67d720e9da2d", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/cvt4.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt4.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,27 @@\n+// Build don't link: \n+// GROUPS passed conversions\n+class A {};\n+\n+template <class TP>\n+class B\n+{\n+  A &(*_f) (A &, TP);\n+  TP _a;\n+public:\n+  B (A &(*f) (A &, TP), TP a) : _f (f), _a (a) {}\n+  friend A &operator<< (A &o, const B<TP> &m)\n+    { (*m._f) (o, m._a); return o; }\n+};\n+\n+A &setw (A &, int);\n+B<int> setw (int n)\n+{\n+  return B<int> (setw, n);\n+}\n+\n+A x;\n+\n+void f ()\n+{\n+  x << setw (2);\n+}"}, {"sha": "5eeea6e63934d00c6e1604b03c99dfeffc9cb168", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/cvt5.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt5.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,27 @@\n+// GROUPS passed conversions\n+// Build don't link:\n+typedef unsigned long Array[3];\n+\n+void sample(const unsigned long (&an_array)[3]);\n+\n+class Sample\n+  {\n+ public:\n+  void simple(const Array &an_array);\n+  static void sample(const Array &an_array);\n+  };\n+\n+class A\n+  {\n+ public:\n+  Array array;\n+  };\n+\n+  Sample s;\n+\n+  void simple(const A &a)\n+    {\n+    s.simple(a.array);\n+    sample(a.array);\n+    Sample::sample(a.array);\n+    }"}, {"sha": "af9752693c76cfe9953a8d0ca8c668b735b0fc49", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/def-fns1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fdef-fns1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fdef-fns1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fdef-fns1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,22 @@\n+// Build don't link: \n+// GROUPS passed default-functions\n+class dictionary {\n+public:\n+  dictionary (int);\n+};\n+\n+class symbol {\n+public:\n+  symbol ();\n+};\n+\n+// a default ctor should not be generated for hyphenation_language,\n+// since a ctor has already been declared; if one is generated, there\n+// will be an error about not enough args to the ctor for dictionary,\n+// since dictionary only defines a ctor taking an int (it ALSO should\n+// not get a default ctor)\n+struct hyphenation_language {\n+  symbol name;\n+  dictionary exceptions;\n+  hyphenation_language(symbol nm) : name(nm), exceptions(501) {}\n+};"}, {"sha": "816c3009d2ece1228eef37b26b805aca07691b1c", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/delete1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fdelete1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fdelete1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fdelete1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link: \n+// Special g++ Options: -pedantic-errors\n+// GROUPS passed operator-delete\n+/* ARM $5.3.4 */\n+void f(char *p, char *q[], const char *r, const char *s[])\n+{\n+  delete 0;             /* illegal: non-pointer */// ERROR - .*expected pointer.*\n+  delete (char*)0;      /* no effect */\n+  delete p;\n+  delete[] q;\n+  delete[4] q;          /* ANSI forbids size arg */// ERROR -  anachronistic .*\n+  delete r;             /* no longer illegal: const */\n+  delete[] s;\n+  delete[4] s;          /* ANSI forbids size arg */// ERROR -  anachronistic.*\n+}"}, {"sha": "f2bacde1185ebfc28cd5e4ff6d7c936f45b64a16", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/delete2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fdelete2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fdelete2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fdelete2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,25 @@\n+// GROUPS passed operator-delete\n+// Check that using the delete operator with a null pointer\n+// is allowed (as called for by The Book, pg. 259)\n+\n+extern \"C\" void printf (char *, ...); \n+\n+struct base {\n+\tint member;\n+};\n+\n+base* bp;\n+\n+void test ()\n+{\n+\tdelete bp;\n+}\n+\n+int main ()\n+{\n+\tbp = (base *) 0;\n+\ttest ();\n+\n+\tprintf (\"PASS\\n\");\n+\treturn 0;\n+}"}, {"sha": "dbbfa80f9f4d3bf5a0c30f8bba49e7849f5b52f5", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/dtors1.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fdtors1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fdtors1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fdtors1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,56 @@\n+// GROUPS passed destructors\n+// Check that when an object of a derived class is (implicitly)\n+// destructed (on exit from the block in which it is declared)\n+// that the destructor for the base class also gets executed.\n+//\n+// (also check that this execution doesn't seg-fault)\n+\n+extern \"C\" void printf (char *, ...); \n+\n+int derived_destructed;\n+int base_destructed;\n+\n+struct base {\n+  int base_data_member;\n+\n+  base()\n+  {\n+    base_data_member = 0x5e5e;\n+  }\n+  ~base()\n+  {\n+    base_destructed = 0x781f;\n+  }\n+};\n+\n+struct derived : public base {\n+  int derived_data_member;\n+\n+  derived()\n+  {\n+    derived_data_member = 0xe5e5;\n+  }\n+  ~derived()\n+  {\n+    derived_destructed = 0xf178;\n+  }\n+};\n+\n+\n+void test2 ();\n+\n+int main ()\n+{\n+\ttest2 ();\n+\tif ((base_destructed != 0x781f) || (derived_destructed != 0xf178))\n+\t  printf (\"FAIL\\n\");\n+\telse\n+\t  printf (\"PASS\\n\");\n+}\n+\n+void test2 ()\n+{\n+\tderived derived_object;\n+\n+\tderived_object.derived_data_member = 99;\n+}"}, {"sha": "511ab7f231c153a8bc4d23f24cebd6a05adf9762", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/dtors2.C", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fdtors2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fdtors2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fdtors2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,74 @@\n+// GROUPS passed destructors\n+// Check that virtual destructors work correctly.  Specifically,\n+// check that when you destruct an object of a derived class for\n+// which the base class had an explicitly declared virtual destructor\n+// no infinite recursion occurs.\n+//\n+// Bug description:\n+//    The generated g++ code apparently calls the base class destructor via\n+//    the virtual table, rather than directly. This, of course, results in the\n+//    infinite recursion.\n+\n+extern \"C\" void printf (char *, ...); \n+\n+int errors = 0;\n+\n+struct base {\n+\tint member;\n+\tbase();\n+\tvirtual ~base();\n+};\n+  \n+base::base()\n+{\n+}\n+\n+base::~base()\n+{\n+}\n+\n+struct derived : public base\n+{\n+\tint member;\n+\tderived();\n+\t~derived();\n+};\n+  \n+derived::derived() : base()\n+{\n+}\n+\n+int derived_destructor_calls = 0;\n+\n+extern void exit (int);\n+\n+derived::~derived()\n+{\n+\tif (++derived_destructor_calls > 2)\n+\t\terrors++;\n+}\n+\n+void test ();\n+\n+int main ()\n+{\n+\ttest ();\n+\n+\tif (errors)\n+\t  printf (\"FAIL\\n\");\n+\telse\n+\t  printf (\"PASS\\n\");\n+\n+\treturn 0;\n+}\n+\n+base* bp;\n+\n+void test()\n+{\n+\tderived a;\n+\n+\ta.member = 99;\n+\tbp = new derived;\n+\tdelete bp;\n+}"}, {"sha": "a1ca853cf917b426f2bf359113945e844a71b6ba", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/dtors3.C", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fdtors3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fdtors3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fdtors3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,66 @@\n+// GROUPS passed destructors\n+// Check that member and base classes get properly destructed\n+// when an object of a derived class is destructed via a pointer\n+// to it which only has a \"compile-time\" type of \"pointer-to-base\".\n+//\n+// Note that in order for this test to work properly, the destructor\n+// for the base class should be explicitly declared to be virtual.\n+\n+extern \"C\" void printf (char *, ...); \n+\n+int member_destructor_calls = 0;\n+int middle_destructor_calls = 0;\n+\n+struct member_type {\n+\tint data_member;\n+\tmember_type () {}\n+\t~member_type ();\n+};\n+\n+struct base {\n+\tint data_member;\n+\tbase () {}\n+\tvirtual ~base ();\n+};\n+\n+struct middle : public base {\n+\tmember_type member1;\n+\tmember_type member2;\n+\tmiddle () {}\n+\t~middle ();\t\t// should be implicitly virtual\n+};\n+\n+struct derived : public middle {\n+\tmember_type member1;\n+\tmember_type member2;\n+\t//~derived () {}\n+};\n+\n+int main ()\n+{\n+\tbase* bp = new derived;\n+\tdelete bp;\n+\tderived *dp = new derived;\n+\tdelete dp;\n+\n+\tif ((member_destructor_calls != 8) || (middle_destructor_calls != 2))\n+\t  printf (\"FAIL\\n\");\n+\telse\n+\t  printf (\"PASS\\n\");\n+\n+\treturn 0;\n+}\n+\n+member_type::~member_type ()\n+{\n+\tmember_destructor_calls++;\n+}\n+\n+base::~base ()\n+{\n+}\n+\n+middle::~middle ()\n+{\n+\tmiddle_destructor_calls++;\n+}"}, {"sha": "68639a1e1434f4ffe7ee7addac454675a3744c25", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum-clash.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum-clash.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum-clash.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum-clash.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link: \n+// Special g++ Options: -pedantic-errors\n+// GROUPS passed arm\n+enum color {red, yellow, green=20, blue};\n+color c = 1;\t// this should be an error// ERROR - .*\n+int i = yellow;"}, {"sha": "7ec648f4cd95eb43ac5f7f05aa3734c88cb65245", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link: \n+// GROUPS passed enums\n+class foo {\n+public:\n+  enum bar { baz = 1, bat = 7 };\n+};\n+\n+class derv : public foo { };\n+\n+main()\n+{\n+  foo::bar x = foo::baz;\n+  derv::bar y = derv::bat;\n+}"}, {"sha": "5c955d3587f0bd14ab94719940c07c28a77827bd", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum10.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum10.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,21 @@\n+// Build don't link: \n+// GROUPS passed enums\n+class Type\n+{\n+\tpublic:\n+\n+\t\tenum name\n+\t\t{\n+\t\t\tA\n+\t\t};\n+};\n+\n+class A\n+{\n+};\n+\n+class B: public A\n+{\n+\tpublic:\n+\t\tB();\n+};"}, {"sha": "7705aa36bd6a13cc458c192a2760c9c270c2bcdc", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum11.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum11.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,16 @@\n+// Build don't link: \n+// GROUPS passed enums\n+class X\n+{\n+    enum\n+    {\n+       oneMask = 0x0000FFFF,\n+       twoMask  = 0x000F0000,\n+       thiMask = 0xFFF00000,\n+    }; // ERROR - comma\n+    unsigned int foo;\n+\n+public:\n+    X (int) : foo (oneMask | twoMask ) {}               // No warning\n+    X ()    : foo (oneMask | twoMask | thiMask) {}      // Warning\n+};"}, {"sha": "7d4eb7d0c420e432273c6f44fbb28501257490c1", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum12.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum12.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,12 @@\n+// Build don't link: \n+// GROUPS passed enums\n+enum Bool { False, True };\n+\n+enum Bool object;\n+\n+struct S\n+{\n+  Bool field:1;\n+\n+  void copy_enum_bit_field () const { object = field; }\n+};"}, {"sha": "ea6dfa71f236d3551cd5f83df46da0213c293d2e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum13.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum13.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link: \n+// GROUPS passed enums\n+enum COLOR { red, green, blue };\n+ \n+struct S {\n+    COLOR       color:2;\n+};\n+ \n+COLOR color;\n+S object;\n+ \n+void fubar ()\n+{\n+    color = object.color;\n+}"}, {"sha": "192a2b4c468e0ea36d6576919356f1906e296d98", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum14.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum14.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,4 @@\n+// Build don't link: \n+// Special g++ Options: -fshort-enums\n+// GROUPS passed enums\n+  enum E { A = 0x80000000 };"}, {"sha": "58da846f88867a909928024d3c38ee11fbc79701", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,19 @@\n+// Build don't link: \n+// GROUPS passed enums\n+class foo {\n+public:\n+  enum bar { baz = 1, bat = 7 };\n+};\n+\n+class foo2 {\n+public:\n+  enum bar2 { baz2 = 1, bat2 = 7 };\n+};\n+\n+class derv : public foo, public foo2 { };\n+\n+main()\n+{\n+  foo::bar x = foo::baz;\n+  derv::bar2 y = derv::bat2;\n+}"}, {"sha": "38b7d3cdae8215b60322b47c5e22d3150a353ec4", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum3.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link: \n+// GROUPS passed enums\n+enum foo\n+{\n+  x = 0\n+};\n+\n+enum bar\n+{\n+  // this used to say `x' wasn't a constant, because build_enumerator\n+  // was getting the value of x wrapped around a NOP_EXPR.  It now\n+  // strips them off before working on it, so we shouldn't get any\n+  // errors  for this.\n+  y = (x + 0x0000)\n+};"}, {"sha": "826ccd3b9f0025f47f9cd6ef03d624f498025e8d", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum4.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum4.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link: \n+// GROUPS passed enums\n+class X {\n+public:\n+  enum { a };\n+};\n+\n+enum { b = 1 };\n+enum ok {  y = b };\n+enum notok { z = X::a };"}, {"sha": "2fa1ea3c9c2770cf42dddb23f76100d0deb1d3ca", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum5.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum5.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link: \n+// Special g++ Options: -pedantic-errors\n+// GROUPS passed enums\n+enum Thing { FIRST, SECOND } ;\n+\n+main()\n+{\n+    Thing x = FIRST ;\n+    x = 27 ;          // this line should be a type error.// ERROR - .*\n+}"}, {"sha": "de821487b0b42ee721377252ea2ce1127f0b76c3", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum6.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum6.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,16 @@\n+// Build don't link: \n+// GROUPS passed enums\n+class X {\n+  private:\n+    enum E1 {a1, b1};\n+  public:\n+    enum E2 {a2, b2};\n+    };\n+\n+void h(X* p) {\n+    X::E2 e2;\n+    int x2 = X::a2;\n+\n+    X::E1 e1;\n+    int x1 = X::a1;\t\t// Should be rejected, and is.// ERROR - .*\n+    }"}, {"sha": "5a397d7f361a2dcd60ede6ed70c4485eb566c1ef", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum7.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum7.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,7 @@\n+// Build don't link: \n+// GROUPS passed enums\n+enum color { red, green, blue, orange, brown };\n+\n+struct s {\n+      enum color      field:2; // ERROR - too small\n+};"}, {"sha": "d9380ad09ef3447694676130dd28a483c3ce4d04", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum8.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum8.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,25 @@\n+// Build don't link: \n+// GROUPS passed enums\n+class foo1\n+{\n+ public:\n+   enum foo1_enum\n+   {\n+      ENUM1,\n+      ENUM2,\n+   }; // ERROR - comma\n+};\n+\n+   \n+class foo2 \n+{\n+ private:\n+   enum foo1::foo1_enum\tEnum;\n+};\n+\n+\n+class foo3\n+{\n+ private:\n+   foo1::foo1_enum Enum;\n+};"}, {"sha": "f04deb13a838b8452902220504dd348ff881e81a", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum9.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum9.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link: \n+// GROUPS passed enums\n+enum fig {\n+    figgy,\n+    pudding,\n+}; // ERROR - comma\n+\n+class X {\n+public:\n+    static fig (*open)(void *thing, const char *filename);\n+    static fig (*parse)(void *thing);\n+};\n+\n+enum fig (*X::open)(void *thing, const char *filename) = 0;\n+fig (*X::parse)(void *thing) = 0;"}, {"sha": "9450d7671c699766d171c06856ca67267ff094d4", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/err-msg1.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link: \n+// GROUPS passed error-messages\n+class A { };\n+\n+int i = A::_ter;// ERROR -  ._ter.*\n+int j = A::term;// ERROR -  .term.*"}, {"sha": "24ddcaa16616e0ea4ba9bc4e42a43682af68e176", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/err-msg10.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg10.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link: \n+// GROUPS passed error-messages\n+class foo {\n+public:\n+  virtual static int f () = 0;// ERROR -  member `f' cannot be declared both virtual and static.*\n+};"}, {"sha": "de5ed8a131685d765f4073f1f4c3b3a3e6df5826", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/err-msg11.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg11.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,3 @@\n+// Build don't link: \n+// GROUPS passed error-messages\n+void foo (mutable int x);// ERROR -  non-member `x' cannot be declared `mutable'.*"}, {"sha": "0b59ba0c8daaf4545e97a1fa6a63f9943dfacda8", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/err-msg12.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg12.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link: \n+// GROUPS passed error-messages\n+class foo {\n+public:\n+  friend mutable int x ();// ERROR -  non-object member `x' cannot be declared `mutable'\n+};"}, {"sha": "0bfb4c224143109e77eefd58aa1628da69e42d53", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/err-msg2.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,4 @@\n+// Build don't link: \n+// GROUPS passed error-messages\n+typedef void (*pfv)(double, double);\n+extern \"C\" typedef void (*pfv)(double, double);// ERROR -  multiple.*"}, {"sha": "1d115e6c46af262ae071108f00dd3d8bc1a5a1a9", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/err-msg3.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,20 @@\n+// Build don't link: \n+// GROUPS passed error-messages\n+#include <fstream.h>\n+#include <iomanip.h>\n+\n+// This error should not appear:\n+// bug.C: In method `test::test(const class test &)':\n+// bug.C:8: field `' not in immediate context\n+\n+class test{\n+public:\n+\tint\tflags;\n+\ttest()\t{};\n+\t};\n+\n+int main()\n+\n+{\n+return 0;\n+}"}, {"sha": "72f6150a8820a712fae504e918bec9f189d5e5ab", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/err-msg4.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg4.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link: \n+// GROUPS passed error-messages\n+class X {\n+public:\n+    static int x;// ERROR -  previous.*\n+    static int y;// ERROR -  previous.*\n+};\n+\n+unsigned X::x;// ERROR -  conflict.*\n+unsigned X::y;// ERROR -  conflict.*"}, {"sha": "37b956c568f3162c43609630d44d3ebbeae1cfb6", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/err-msg5.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg5.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,4 @@\n+// Build don't link: \n+// GROUPS passed error-messages\n+class foo {};\n+~foo () {}// ERROR -  destructors must be member functions.*"}, {"sha": "ce60f0d456777a5df6fdee29e7ec9a5894531402", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/err-msg6.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg6.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,7 @@\n+// Build don't link: \n+// GROUPS passed error-messages\n+class foo {\n+public:\n+  ~bar () {}// ERROR -  destructor `bar' must match class name `foo'.*\n+};\n+"}, {"sha": "5971806fa461c140e503408df653b4708a96a4d6", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/err-msg7.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg7.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link: \n+// GROUPS passed error-messages\n+class foo {\n+public:\n+  volatile int () {}// ERROR - \n+};"}, {"sha": "a2ad4df947dcc2033d0575c9b00868f9476da65d", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/err-msg8.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg8.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,3 @@\n+// Build don't link: \n+// GROUPS passed error-messages\n+operator int ;// ERROR -  declaration of `operator int' as non-function.*"}, {"sha": "0714de696ccbd7885ec7dd307ddec47b6e0ef4f5", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/err-msg9.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ferr-msg9.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link: \n+// GROUPS passed error-messages\n+class foo {\n+public:\n+  int ~foo ();// ERROR -  return type specification for destructor invalid.*\n+};"}, {"sha": "8d942c7e2edb1bb8822089d6a39b3417c71bbf11", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/friend1.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ffriend1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ffriend1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ffriend1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,19 @@\n+// Build don't link: \n+// GROUPS passed friends\n+class A\n+{\n+private:\n+  A () {}\n+\n+friend struct B;\n+};\n+\n+class B\n+{\n+public:\n+  A a;\n+};\n+\n+B b;\n+\n+main () {}"}, {"sha": "5b1333f7b80051d72daf0c995b2316a1558a490b", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/friend2.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ffriend2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ffriend2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ffriend2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link: \n+// GROUPS passed friends\n+class X {\n+  int a;\n+friend void friend_set (X*, int);\n+};\n+\n+void friend_set (X *p, int i) { p->a = i; }\n+\n+void f()\n+{\n+  X obj;\n+  friend_set (&obj, 10);\n+}\n+"}, {"sha": "1fa48a8c5279eb42dba435a764a6b41b6cf4b11e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/friend3.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ffriend3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ffriend3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ffriend3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,28 @@\n+// Build don't link: \n+// GROUPS passed friends\n+class B {\n+\n+   friend class A;\n+\n+   enum {\n+      bEnum = 1,\n+   }; // ERROR - comma\n+\n+   int bArray[ bEnum ];\n+\n+public:\n+   void bFunction(int arg[ bEnum ]);\n+};\n+\n+\n+class A {\n+   int aMember;\n+\n+public:\n+   void aFunction(int a[B::bEnum])\n+   {\n+      B b;\n+      b.bArray[ B::bEnum ] = aMember;\n+   }\n+};\n+"}, {"sha": "f19d81a9d0a8e8358d73ff0d20344d486e1b5fa4", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/friend4.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ffriend4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ffriend4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ffriend4.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link: \n+// GROUPS passed friends\n+// do_friend should complain that foo was declared as a friend of\n+// A before A was defined\n+struct A;\n+struct B { friend A::foo (); };// ERROR - .*"}, {"sha": "79c5b51371d495cad608b915da7674f61303ec67", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/groff1.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fgroff1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fgroff1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fgroff1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,33 @@\n+// GROUPS passed groff\n+/* This should compile properly with the new overloading scheme.  */\n+\n+extern \"C\" void printf (char *, ...);\n+extern \"C\" void exit (int);\n+\n+int win = 0;\n+\n+class symbol\n+{\n+public:\n+  symbol(const char *p, int how = 0) {}\n+  symbol() {}\n+};\n+\n+class dictionary\n+{\n+public:\n+  void *lookup(symbol s, void *v=0) { win = 1; }\n+  void *lookup(const char *) {}\n+};\n+\n+main()\n+{\n+  char buf[2048];\n+  dictionary exceptions;\n+  unsigned char *tem = new unsigned char[19 + 1];\n+\n+  exceptions.lookup (symbol (buf), tem);\n+\n+  printf (win ? \"PASS\\n\" : \"FAIL\\n\");\n+  exit (! win);\n+}"}, {"sha": "4396906ed32042c02eba4e8eb072f418c3c69046", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/init1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link: \n+// GROUPS passed initialization\n+  class Thing{\n+  private:\n+\t  int x,y;\n+  public:\n+\t  Thing (int v, int q) { x = v; q = y; }\n+\t  void doit(int);\n+  };\n+\n+  Thing t(18,19);"}, {"sha": "45b29853afd6c1bee24b7801c125458269813ccb", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/init10.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit10.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,3 @@\n+// Build don't link: \n+// GROUPS passed initialization\n+struct { int :0; } a;"}, {"sha": "69fd77c7c71cfb4d0b4be3e89485a2d154426bd6", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/init11.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit11.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,9 @@\n+// Build don't link: \n+// GROUPS passed initialization\n+struct String {\n+  char * string;\n+  String(const char* st);  \n+};\n+\n+extern char array [];\n+static String sub = array;"}, {"sha": "f3c03e0690ec989d253d1abac823eebcb869b4c5", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/init12.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit12.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,9 @@\n+// Build don't link: \n+// GROUPS passed array-bindings\n+char * bob();\n+\n+main()\n+{\n+    char a[1][2];\n+    a[0] = bob();// ERROR - .*\n+}"}, {"sha": "41f0fcf68bfc76167256bb08ac44f88aacc5ef89", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/init13.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit13.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,7 @@\n+// Build don't link: \n+// GROUPS passed initialization\n+struct A {\n+  operator int ();\n+};\n+ \n+int i = A();"}, {"sha": "a9ec6f3bea6725efab5453d8a1c4b57f33189b8e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/init2.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,5 @@\n+// Build don't link: \n+// GROUPS passed initialization\n+// this should give an error in require_instantiated_type about not\n+// being allowed to have an initializer list in an argument list.\n+int f(int a = {1});// ERROR - .*"}, {"sha": "91b2f7cbeb6d31df79589cd41fed0673cdfdd994", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/init3.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,38 @@\n+// GROUPS passed initialization\n+// p2766: Make sure that members are initialized in order of declaration\n+// in the class, not in order of specification in the mem-initializer list.\n+\n+extern \"C\" void printf (char *, ...);\n+extern \"C\" void exit (int);\n+\n+int count = 0;\n+\n+void die () { printf (\"FAIL\\n\"); exit (1); }\n+\n+class bar1 {\n+public:\n+  bar1 (int) { if (count != 0) die (); count = 1; }\n+};\n+\n+class bar2\n+{\n+public:\n+  bar2 (int) { if (count != 1) die (); count = 2; }\n+};\n+\n+class foo\n+{\n+public:\n+  bar1 a;\n+  bar2 b;\n+  foo (int, int);\n+};\n+\n+// bar1 should get built before bar2\n+foo::foo (int x, int y) : b(x), a(y) {}\n+\n+main()\n+{\n+  foo f (1, 2);\n+  printf (\"PASS\\n\");\n+}"}, {"sha": "c1d359281e6c561aeb1196e18f8e16f2f4de0c50", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/init4.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit4.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,5 @@\n+// Build don't link: \n+// GROUPS passed initialization\n+struct CharList { int i; };\n+\n+const CharList& terminals = { 1 };// ERROR - .*"}, {"sha": "112dcacbb947af408ca26fe3c4abce778305bc31", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/init5.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit5.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link: \n+// GROUPS passed initialization\n+int main( int argc, char**argv, char** envp ){\n+    char* domain = argv[1];\n+    domain = domain? (char*)\"component\" : domain;\n+}"}, {"sha": "e49758adf1a6bd1bd9b9bfc3a92977dbdbd7ed34", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/init6.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit6.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link: \n+// GROUPS passed initialization\n+class Tag {\n+public:\n+\tTag(int i):value(i){}\n+\tint value;\n+};\n+\n+extern const Tag myTag;\n+extern const Tag myTag=9;\n+\n+// The compiler should not issue an error on this line; expand_static_init\n+// should be checking that there's no initializer for this line, and thus\n+// doesn't need to produce an error.\n+extern const Tag myTag;"}, {"sha": "033da8f9fe8e0d5567e747bd842693e769883c1e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/init7.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit7.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,16 @@\n+// Build don't link: \n+// GROUPS passed initialization\n+struct myChoiceList\n+{\n+\tint bla;\n+\tint blubb;\n+\tint brummbrumm;\n+};\n+\n+extern const myChoiceList foo;\n+\n+extern const myChoiceList foo = {1,1,1};\n+\n+// finish_decl should have an exclusion so an error is not produced\n+// for this line.\n+extern const myChoiceList foo;"}, {"sha": "4818a41ab727bbb78265c3e22cfab6727244cb31", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/init8.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit8.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,16 @@\n+// Build don't link: \n+// GROUPS passed initialization\n+class A\n+{\n+public:\n+    A(const A & a) : i_member(a.i_member)\n+    {\n+    }\n+    A(const int & i) : i_member(i)\n+    {\n+    }\n+    union\n+    {\n+        int i_member;\n+    };\n+};"}, {"sha": "bad6416ef23c329636b62b3b820d543ea209c851", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/init9.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit9.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link: \n+// GROUPS passed initialization\n+int FALSE = 0;\n+class X {\n+public:\n+  static int FALSE;\n+};\n+\n+// The compiler should NOT complain about redeclaration of the global\n+// `FALSE' with this declaration...grokvardecl shouldn't be doing that.\n+int X::FALSE = 0;"}, {"sha": "ff0b87c3097a278b1b18e1b2c03210fe8da88469", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/label1.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Flabel1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Flabel1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Flabel1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,4 @@\n+// Build don't link: \n+// GROUPS passed labels\n+// it should only give 1 error, about using an undefined label\n+int main(void) { goto dummy; }// ERROR - .*"}, {"sha": "bce21125d55fd4d0670bd5fb82986768ecdbfd76", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/label2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Flabel2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Flabel2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Flabel2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link: \n+// GROUPS passed labels\n+class X {\n+public:\n+    X();\n+};\n+void foo ()\n+{\n+X:  ::abort();\n+    goto X;\n+}"}, {"sha": "d76832e76c4a95acb4e0572c7c12b7b0b3612c4e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/line1.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fline1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fline1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fline1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,4 @@\n+// Build don't link: \n+// GROUPS passed error-messages\n+typedef struct s S;// ERROR -  previous.*\n+struct S { int member:1; };  // the lineno for this should be 2, not 0// ERROR -  conflicting types.*"}, {"sha": "666ec256fb235f9dc30813625f377632785f8e9f", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc1.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link: \n+// GROUPS passed miscellaneous-bugs\n+int main( int argc, char**argv, char** envp ){\n+    char* domain = argv[1];\n+    domain = domain? (char*)\"component\" : domain;\n+}"}, {"sha": "4d96926ccf8350eaaca2fe2f126e96230494bd45", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc10.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc10.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link: \n+// GROUPS passed miscellaneous\n+// The compiler shouldn't give a `invalid operands to binary +' for this\n+// case.\n+enum flag { OFF, ON };\n+enum BOOL { FALSE = (enum flag) 0, TRUE };"}, {"sha": "043f6a5493eecffe46321f7a3f036db7e1be2608", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc11.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc11.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,20 @@\n+// Build don't link: \n+// GROUPS passed miscellaneous\n+// This should not complain about A::f being abstract.\n+struct\tA\n+{\n+\tvirtual int f() = 0;\n+};\n+\n+struct\tB : virtual A\n+{\n+\tvirtual int f()\t\t{\treturn 1;\t}\n+\tvirtual int g() = 0;\n+};\n+\n+struct\tC: B\n+{\n+\tint g()\t\t\t{\treturn 2;\t}\n+};\n+\n+C\tc;"}, {"sha": "73db9bfccd4e2594b6748a1effba23e5859d9f14", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc12.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc12.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,16 @@\n+// GROUPS passed miscellaneous\n+extern \"C\" void exit (int);\n+extern \"C\" int printf (char *, ...);\n+\n+/* Make sure cp-lex.c handles these properly--if this links, that means\n+   it emitted the strings instead of __FUNCTION__.0, etc.  */\n+\n+int\n+main()\n+{\n+  char *a = __FUNCTION__;\n+  char *b = __PRETTY_FUNCTION__;\n+\n+  printf (\"PASS\\n\");\n+  exit (0);\n+}"}, {"sha": "57292a292cbc3010aab62c5deeec10c34db4780e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc13.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc13.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,9 @@\n+// Build don't link: \n+// GROUPS passed miscellaneous-bugs\n+// This should only give warnings from duplicate_decls; it should not get\n+// errors from push_overloaded_decl as well.\n+\n+extern \"C\"\n+{\n+  long unsigned int strlen(char*);// ERROR -  warning// ERROR -  warning.*\n+}"}, {"sha": "7d57e30147d48bc6ad0da1e276cdbe7c9db3b31e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc14.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc14.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,12 @@\n+// Build don't link: \n+// GROUPS passed miscellaneous-bugs\n+class X {\n+public:\n+    enum e {\n+\tNew,// ERROR -  conflicts with other.*\n+    }; // ERROR - comma\n+\n+    static int New(int);// ERROR -  declaration.*\n+};\n+\n+main() {}"}, {"sha": "e4dd53e0994d7e31f596125f2ed1228d07ae5f80", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc15.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc15.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,13 @@\n+// Build don't link: \n+// GROUPS passed miscellaneous-bugs\n+// we shouldn't get any warnings or errors for this code\n+struct A {\n+        int     aa;\n+};\n+struct B : public A {\n+};\n+struct C : public A {\n+};\n+struct D : public C, public B {\n+        void fun() { C::aa = 10; }\n+};"}, {"sha": "15e3946a0d3d8655c68ff6329f9d7d3683d5b027", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc16.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc16.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,19 @@\n+// Build don't link: \n+// GROUPS passed miscellaneous-bugs\n+// Using a typedef causes a compiler error\n+typedef unsigned int Uint32;\n+\n+// Using a define so that there isn't a typedef works OK.\n+//#define Uint32 unsigned int\n+\n+Uint32 func0(Uint32, Uint32)\n+{\n+   return 0;\n+}\n+\n+Uint32 func1(Uint32, Uint32)\n+{\n+   return 1;\n+}\n+\n+Uint32 (*mf[])(Uint32, Uint32) = {func0, func1};"}, {"sha": "987618f97893c2083c0d550f89d46034ececaf59", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc17.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc17.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,36 @@\n+// Build don't link: \n+// GROUPS passed miscellaneous-bugs\n+typedef int va_list;\n+class ostream;\n+class String {\n+public:\n+operator const char *() const;\n+};\n+class FwtErrorManager {\n+public:\n+    FwtErrorManager(ostream& err, const char *program);\n+public:\n+    void form(const char *format, ...);\n+protected:\n+    const String _program;\t \n+private:\n+    FwtErrorManager(const FwtErrorManager&);\n+    void operator=(const FwtErrorManager&);\n+};\n+class FwtProgram: public FwtErrorManager {\n+public:\n+    FwtProgram();\t \n+};\n+class FwtArgOptions { };\n+class FwtStdProgram: public FwtProgram, public FwtArgOptions {\n+public:\n+    FwtStdProgram();\t \n+    void usage_if_not_complete();\n+};\n+void\n+FwtStdProgram::usage_if_not_complete()\n+{\n+\tFwtStdProgram& thisp = *this;\n+\tthisp.form(\"%s: error, there were unrecognized options\",\n+\t\t   (char *) FwtErrorManager::_program);// ERROR - .*\n+}"}, {"sha": "d9aa99bbf7845845d7ea7408ac0702a83811336e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link: \n+// GROUPS passed miscellaneous-bugs\n+// Should be fixed by:\n+// Sun Jun 13 12:55:22 1993  Brendan Kehoe  (brendan@lisa.cygnus.com)\n+//\n+//\t* cp-decl.c (grokvardecl): Don't complain about duplicate\n+//\tdefinitions of `extern \"C\"' declarations (parallelize it with how\n+//\tregular `extern' decls are handled).\n+\n+extern \"C\" double  _MaXdOuB, _MiNdOuB;\n+extern \"C\" double  _MaXdOuB, _MiNdOuB;\t// no error should be emitted for this"}, {"sha": "d632cb733f9d93c47125ecd84e52bdf34cc14c1a", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc3.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,12 @@\n+// Build don't link: \n+// GROUPS passed miscellaneous-bugs\n+// The compiler should not error about taking the addr of main in this example.\n+class fred {\n+private:\n+  void main () {\n+  }\n+public:\n+  fred ( ) {\n+    &fred::main;\n+  }\n+};"}, {"sha": "93aea92d31faa523ae125372cc1e3c1c9ee26de4", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc4.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc4.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link: \n+// GROUPS passed miscellaneous\n+// This should not emit an error about A::~A() being redefined; we\n+// should check that it is a pure virtual.\n+class A {\n+public:\n+    virtual ~A() = 0;\n+};\n+\n+A::~A() {}"}, {"sha": "05eeed61e1e9438a568c82a7aff312f93254b4c0", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc5.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc5.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,7 @@\n+// Build don't link: \n+// GROUPS passed miscellaneous\n+class A {\n+    static A aa[2];\n+};\n+\n+A A::aa[2]; // should be completely legal"}, {"sha": "b05c1f1da54b8887bcf061addcb6ef84675f2e0a", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc6.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc6.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,9 @@\n+// Build don't link: \n+// GROUPS passed miscellaneous\n+// test that use of `inline' is forbidden when it should be\n+inline int i;// ERROR - .*\n+struct c { inline int i; };// ERROR - .*\n+int foo (inline int i);// ERROR - .*\n+inline class c; // ERROR - inline\n+inline typedef int t; // ERROR - inline\n+class d { inline friend class c; }; // ERROR - inline"}, {"sha": "078dbc9c858b1787ff8d9259e821818468c1e8b7", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc7.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc7.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,15 @@\n+// GROUPS passed miscellaneous\n+extern \"C\" void printf (char *, ...);\n+\n+main()\n+{\n+  int i = 0;\n+  // Make sure build_unary_op correctly computes this.\n+  int *pi = &(++i);\n+  *pi = 4;\n+\n+  if (i != 4)\n+    printf (\"FAIL\\n\");\n+  else\n+    printf (\"PASS\\n\");\n+}"}, {"sha": "7efad41d896ed3b9fac2cccc02711fb0df7f5433", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc8.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc8.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,18 @@\n+// Build don't link: \n+// GROUPS passed miscellaneous\n+// used to say invalid lvalue in `&\\'\n+class foo {\n+        int     a;\n+    public:\n+        foo(int a);\n+};\n+\n+foo::foo(int a)\n+{\n+    foo::a=a;\n+}\n+\n+main()\n+{\n+foo     obj(4);\n+}"}, {"sha": "88071c6e04ac0c577d0da5b97f7c5f9f0ae699ab", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc9.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc9.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,28 @@\n+// Build don't link: \n+// GROUPS passed miscellaneous\n+//The program listed below produces the following error during compilation:\n+//   % g++ bug17.cc\n+//   bug17.cc: In method `class Y& Y::operator = (const class Y&)':\n+//   bug17.cc:18: invalid use of non-lvalue array\n+\n+class X {\n+public:\n+   X& operator=(const X&) { return *this; }\n+};\n+\n+struct S {\n+   char c[10];\n+   X x;\n+};\n+\n+class Y {\n+   S s;\n+public:\n+   const S& f() const { return s; }\n+\n+   Y& operator=(const Y& _Y) {\n+      s = _Y.s;    // this line compiles\n+      s = _Y.f();  // this line does not compile\n+      return *this;\n+   }\n+};"}, {"sha": "79157b7607c97ecf326fe47b2e6245b88ee20a20", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/mutable1.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmutable1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmutable1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmutable1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link: \n+// GROUPS passed mutable\n+class foo;\n+class bar {\n+  mutable foo const *foobar;\n+};"}, {"sha": "32aab3ee9c271591a0bca6495eaa9e8e621821a7", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link: \n+// GROUPS passed nested-classes\n+int x;\n+class enclose {\n+public:\n+  int x;\n+\n+  class inner {\n+  public:\n+    void f (int i) {\n+      x = i;// ERROR - .*\n+    }\n+  };\n+};\n+"}, {"sha": "751440d1947d4869c067f3f6ef910feeaa166d1d", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest10.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest10.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,30 @@\n+// Build don't link: \n+// GROUPS passed nested-classes\n+class A\n+\t{\n+\tpublic:\n+\t\tclass B\n+\t\t\t{\n+\t\t\tpublic:\n+\t\t\t\tint f ();\n+\t\t\t\tvoid g (int);\n+\t\t\tprivate:\n+\t\t\t\tint b;\n+\t\t\t};\n+\t};\n+\n+int A::B::f ()\n+\t{\n+\tint val=b;\n+\treturn val;\n+\t}\n+\n+void A::B::g (int val)\n+\t{\n+\tb = val;\n+\t}\n+\n+\n+main ()\n+\t{\n+\t}"}, {"sha": "4a57b38385840e835db00fadf4d43256bd029227", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest11.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest11.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,19 @@\n+// Build don't link: \n+// GROUPS passed nested-classes\n+class A {\n+  int x;\n+\n+  struct B {\n+    int x;\n+  };\n+  struct C {\n+    int bug (A::B &y);\n+  };\n+};\n+\n+int\n+A::C::bug (A::B &y)\n+{\n+  return y.x;\n+}\n+"}, {"sha": "19286db1dc03c40f9d37d57962abd620d2108edd", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest12.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest12.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,21 @@\n+// Build don't link: \n+// GROUPS passed nested-classes\n+struct enclose {\n+  class nested;\n+  nested *nptr;\n+  class nested {\n+    int x;\n+  };\n+  void f();\n+};\n+\n+void enclose::f()\n+{\n+  nptr = new enclose::nested;  \n+}\n+\n+void g()\n+{\n+  enclose obj;\n+  obj.nptr = new enclose::nested;  \n+}"}, {"sha": "354e7bc35bed510cbfc8aa7ecb7bd05cc92074a9", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest13.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest13.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,20 @@\n+// Build don't link: \n+// GROUPS passed nested-classes\n+// The bug here is that wer'e getting a message about inner not\n+// being a basetype itself.  I think it's because it's being\n+// compared as the \"inner\" we knew about when it was forward-declared,\n+// versus the \"inner\" we know about when it *has* been defined.\n+\n+class temp\n+{\n+public:\n+        struct inner;\n+        inner *trump()\n+        {\n+                return (tt);\n+        }\n+        struct inner\n+        {\n+                int ll;\n+        }*tt;\n+};"}, {"sha": "4a696af4dc2b79a30132315b9c24d62e05003a68", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest15.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest15.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,37 @@\n+// Build don't link: \n+// GROUPS passed nested-classes\n+class BDDHeap {\n+public:\n+    BDDHeap();\n+    BDDHeap(const BDDHeap&);\n+\n+    class Page {\n+    public:\n+\tint i;\n+    };\n+    struct Pointer {\n+\tPage *page;\n+\tunsigned index;\n+\n+\tPointer();\n+\tPointer(const BDDHeap& heap);\n+    };\n+\n+    struct Half {\n+\tstruct {\n+\t    Page *top;\n+\t    Page **tail;\n+\t} inuse;\n+\n+\tHalf();\n+    };\n+\n+    Half half[2];\n+    unsigned halfspace;\n+};\n+\n+inline\n+BDDHeap::Pointer::Pointer(const BDDHeap& heap):\n+page(heap.half[heap.halfspace].inuse.top),\n+index(0)\n+{ }"}, {"sha": "920ea0b5de55afbfbc38e9f61d5355ca3929fdbb", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest16.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest16.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,41 @@\n+// Build don't link: \n+// GROUPS passed nested-classes\n+class BDDHeap {\n+public:\n+    BDDHeap();\n+    BDDHeap(const BDDHeap&);\n+\n+    class Page {\n+    public:\n+\tint i;\n+    };\n+    struct Pointer {\n+\tPage *page;\n+\tunsigned index;\n+\n+\tPointer();\n+\tPointer(const BDDHeap& heap);\n+    };\n+\n+    struct Half {\n+\tstruct {\n+\t    Page *top;\n+\t    Page **tail;\n+\t} inuse;\n+\n+\tHalf();\n+    };\n+\n+    Half half[2];\n+    unsigned halfspace;\n+};\n+\n+inline\n+BDDHeap::Pointer::Pointer(const BDDHeap& heap):\n+page(0),\n+index(0)\n+{\n+    Page *x = heap.half[heap.halfspace].inuse.top;\n+    page = x;\n+}\n+"}, {"sha": "f61c49ee9f52b42892c4c6027b2f59aff08da00c", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest17.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest17.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,12 @@\n+// Build don't link: \n+// GROUPS passed nested-classes\n+class T {\n+public:\n+    typedef int I;\n+    class Y {int y;};\n+    typedef Y Z;\n+};\n+\n+T::I i;\n+T::Y y;\n+T::Z z;"}, {"sha": "e41def435f9bb598ef09d626229242e4ea4bae98", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest18.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest18.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,31 @@\n+// Build don't link: \n+// GROUPS passed nested-classes\n+// This is the first line of file ||t2.C||.\n+\n+// This code demonstrates what appears to be a bug with nested types.\n+// In C++, nested typedefs are not supposed to be visible outside\n+// their class scopes but they apparently are in gcc 2.4.5.  This code\n+// compiles fine in AT&T cfront 3.0.1, but will not compile with gcc.\n+\n+// If this class does not precede String, then the code will compile.\n+\n+class Another {\n+public:\n+    typedef int Length;\n+};\n+\n+// If String does not define typedef int Length, then the code will\n+// compile.\n+\n+class String {\n+public:\n+    typedef int Length;\t\t// remove this and it will compile fine\n+\n+    int foo(Length length) const;\n+};\n+\n+int String::foo(Length length) const {\n+    return length;\n+}\n+\n+// File ||t2.C|| ends here."}, {"sha": "efa7ac5ee485eb6e10a9b62ea026bac87d715aa7", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest19.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest19.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,40 @@\n+// Build don't link: \n+// GROUPS passed nested-classes\n+// This is the first line of file ||t3.C||.\n+\n+// This code demonstrates a variation of the same problem with nested\n+// types.  In C++, nested typedefs are not supposed to be visible\n+// outside their class scopes but they apparently are in gcc 2.4.5.\n+// This code compiles fine in AT&T cfront 3.0.1, but gcc rejects it\n+// with the messages given below.\n+\n+// If this class does not precede Expr, then the code will compile.\n+\n+class Another {\n+public:\n+    typedef int Boolean;\n+    enum { FALSE, TRUE };\n+};\n+\n+// If Expr does not define typedef int Boolean, then the code will\n+// compile.\n+\n+class Expr {\n+public:\n+    typedef int Boolean;\n+    enum { FALSE, TRUE };\n+    void foo();\n+    void call_something_with(Boolean);\n+};\n+\n+// t3.C: In method `void  Expr::foo ()':\n+//   t3.C:36: uninitialized const `Boolean'\n+//   t3.C:36: parse error before `='\n+//   t3.C:37: `argument' undeclared (first use this function)\n+//   t3.C:37: (Each undeclared identifier is reported only once\n+//   t3.C:37: for each function it appears in.)\n+\n+void Expr::foo() {\n+    const Boolean argument = TRUE;\n+    call_something_with(argument);\n+}"}, {"sha": "4b55245e5f86eec913551adc3e267d531f84f765", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,18 @@\n+// Build don't link: \n+// GROUPS passed nested-classes\n+class A {\n+protected:\n+  class B {\n+  public:\n+    ~B();\n+  private:\n+    float _datum;\n+  };\n+private:\n+  B *_b;\n+};\n+\n+A::B::~B()\n+{\n+  _datum = 8.0;\n+}"}, {"sha": "297b08af825c1917f7b15d799ba7cbc6f2569b20", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest20.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest20.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,30 @@\n+// Build don't link: \n+// GROUPS passed nested-classes\n+// This is the first line of file ||t5.C||.\n+\n+// This code initializing an unnamed union inside a class appears to\n+// be legal C++ input and compiles fine with AT&T cfront 3.0.1, but\n+// gcc 2.4.5 complains about multiple initializations of the same\n+// member.\n+\n+class Expr {\n+public:\n+    enum Type { undefined, slong, ulong, ldouble };\n+    Expr();\n+    Expr(Type type, const Expr* initializer);\n+private:\n+    Type type_;\n+    union {\n+\tlong slong_;\n+\tunsigned long ulong_;\n+\tlong double ldouble_;\n+    };\n+};\n+\n+// Construct an undefined expression.\n+\n+Expr::Expr()\n+    :\n+    type_(undefined),\n+    slong_(-1)\n+{}"}, {"sha": "c4eb0ee78ab2402a4e9609ad3deb106929c4a439", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest21.C", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest21.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,95 @@\n+// GROUPS passed nested-classes\n+#include <iostream.h>\n+#include <stdio.h>\n+\n+static char output[1024];\n+\n+class BDDRetrace {\n+public:\n+    class Dump {\n+    public:\n+\tvirtual Dump& operator<<(char c) = 0;\n+\tvirtual Dump& operator<<(int i) = 0;\n+\tvirtual Dump& operator<<(double r) = 0;\n+    };\n+\n+    class Dump1: public Dump {\n+    public:\n+\tDump& operator<<(char c);\n+\tDump& operator<<(int i);\n+\tDump& operator<<(double r);\n+    };\n+};\n+\n+class Dump2: public BDDRetrace::Dump {\n+public:\n+    BDDRetrace::Dump& operator<<(char c);\n+    BDDRetrace::Dump& operator<<(int i);\n+    BDDRetrace::Dump& operator<<(double r);\n+};\n+\n+BDDRetrace::Dump&\n+BDDRetrace::Dump1::operator<<(char c)\n+{ char tempout[1024];\n+  sprintf (tempout, \"%s%s%c\", output, \"1-\", c);\n+  strcpy (output, tempout);\n+  return *this;\n+}\n+\n+BDDRetrace::Dump&\n+BDDRetrace::Dump1::operator<<(int i)\n+{ char tempout[1024];\n+  sprintf (tempout, \"%s%s%d\", output, \"1-\", i);\n+  strcpy (output, tempout);\n+  return *this; }\n+\n+BDDRetrace::Dump&\n+BDDRetrace::Dump1::operator<<(double r)\n+{ char tempout[1024];\n+  sprintf (tempout, \"%s%s%1.0f\", output, \"1-\", r);\n+  strcpy (output, tempout);\n+  return *this; }\n+\n+BDDRetrace::Dump&\n+Dump2::operator<<(char c)\n+{ char tempout[1024];\n+  sprintf (tempout, \"%s%s%c\", output, \"2-\", c);\n+  strcpy (output, tempout);\n+  return *this; }\n+\n+BDDRetrace::Dump&\n+Dump2::operator<<(int i)\n+{ char tempout[1024];\n+  sprintf (tempout, \"%s%s%d\", output, \"2-\", i);\n+  strcpy (output, tempout);\n+  return *this; }\n+\n+BDDRetrace::Dump&\n+Dump2::operator<<(double r)\n+{ char tempout[1024];\n+  sprintf (tempout, \"%s%s%1.0f\", output, \"2-\", r);\n+  strcpy (output, tempout);\n+  return *this; }\n+\n+main()\n+{\n+    BDDRetrace::Dump1 d1;\n+    Dump2 d2;\n+\n+    sprintf (output, \" \");\n+\n+    d1 << 'a';\n+    d1 << 1;\n+    d1 << 1.0;\n+\n+    d2 << 'a';\n+    d2 << 1;\n+    d2 << 1.0;\n+\n+    if (strcmp (output, \" 1-a1-11-12-a2-12-1\") == 0)\n+      printf (\"PASS\\n\");\n+    else\n+      printf (\"FAIL\\n\");\n+\n+    return 0;\n+}"}, {"sha": "cd26c34d58247eddd7edf02336ce8fba294c52db", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest22.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest22.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,7 @@\n+// Build don't link: \n+// GROUPS passed nested-classes\n+class foo {\n+public:\n+   typedef int bar;\n+   foo::bar    fb; // this line causes a syntax error!\n+};"}, {"sha": "e18398bf3fb6e4fc7e9cc5889fbf08c11930166c", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest23.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest23.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link: \n+// GROUPS passed nested-classes\n+class CS {\n+public:\n+    class PS {\n+    };\n+};\n+\n+class NCS: public CS {\n+public:\n+    class S: public PS {\n+    };\n+};\n+\n+int i;"}, {"sha": "4fcc02c63d610f638b678a0d6c064f2e8733d82e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest24.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest24.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link: \n+// GROUPS passed nested-classes\n+struct A {\n+  A (){}\n+};\n+\n+void foo ()\n+{\n+ struct B {};\n+\n+ struct S : B {\n+   A a;\n+ };\n+}"}, {"sha": "16e7df88b456b0c4d3af6d950b361ef5b048eeb5", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest3.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,12 @@\n+// Build don't link: \n+// GROUPS passed nested-classes\n+class X {\n+public:\n+  struct M2 { int m; };\n+  M2 g(int);\n+};\n+\n+\n+X::M2 X::g(int i) { X::M2 m2; return m2; }\n+\n+main() { }"}, {"sha": "34631f4f0cd3d64c5730abf2a89701d15bac1652", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest4.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest4.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,9 @@\n+// Build don't link: \n+// Special g++ Options: -pedantic-errors\n+// GROUPS passed nested-classes\n+class vec {\n+    class blah { };\n+\n+    ::vec::blah\tsatan( 0);// ERROR - .*\n+    blah\therman( 0);// ERROR - .*\n+};"}, {"sha": "5341010822c51cda0bff5e3e0177e4a5553ea2c9", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/new-array.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew-array.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew-array.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew-array.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,18 @@\n+// Build don't link: \n+// GROUPS passed operator-new\n+typedef struct {\n+\tint a;\n+} AStruct;\n+\n+void MakeBug() {\n+\tAStruct *job;\n+\n+\t// This used to crash, it should now give error(s).\n+\tjob = new AStruct[];// ERROR - .*\n+\n+\tjob = new AStruct;\n+}\n+\n+main () {\n+\tMakeBug();\n+}"}, {"sha": "09326d2ce58ea2cbd5297e54e52df54e94b72277", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/new1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,5 @@\n+// Build don't link: \n+// GROUPS passed operator-new\n+typedef __SIZE_TYPE__ size_t;\n+struct x { int a; void * operator new (size_t, void *); };\n+struct x * f(void *p) { return new (p) x; }"}, {"sha": "64b3d51e08ae56a2b99e1050404c437f92f95db6", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/new2.C", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,67 @@\n+// GROUPS passed operator-new\n+// Check that if there is a user defined class-specific operator\n+// new for a given class, that operator is invoked when a new\n+// object of the class is requested, regardless of whether or not\n+// there is also a constructor for the given class, and regardless\n+// of whether or not the constructor for the given class is defined\n+// before or after the new operator is even declared.\n+\n+extern \"C\" void printf (char *, ...); \n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct base {\n+\tint i;\n+\n+\tbase ()\n+\t{\n+\t\ti = 7;\n+\t}\n+\n+\tvoid * operator new (size_t size);\n+\tvoid operator delete (void*);\n+};\n+\n+class derived : public base {\n+\tint j;\n+};\n+\n+int new_call_count = 0;\n+int expected_size = 0;\n+int errors = 0;\n+\n+int main ()\n+{\n+\tbase*\t\tbase_ptr;\n+\tderived*\tderived_ptr;\n+\n+\texpected_size = 4;\n+\tbase_ptr = new base;\n+\texpected_size = 8;\n+\tderived_ptr = new derived ();\n+\n+\tif ((new_call_count != 2) || (errors != 0))\n+\t  printf (\"FAIL\\n\");\n+\telse\n+\t  printf (\"PASS\\n\");\n+\n+\treturn 0;\n+}\n+\n+char allocation_space[1000];\n+char* allocation_ptr = allocation_space;\n+\n+void base::operator delete (void* p)\n+{\n+}\n+\n+void *base::operator new (size_t size)\n+{\n+\tchar* return_value = allocation_ptr;\n+\n+\tnew_call_count++;\n+\tif (size != expected_size)\n+\t\terrors++;\n+\tallocation_ptr = allocation_ptr + size;\n+\treturn (void*) return_value;\n+}"}, {"sha": "9e7eb8a855fd47c3e2ec405dae3ce15821a13fee", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/new3.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,35 @@\n+// GROUPS passed operator-new\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+int pass = 0;\n+\n+void *operator new(size_t sz){\n+\n+  void *p;\n+\n+  pass = 1;\n+  p = malloc(sz);\n+  return p;\n+}\n+\n+class A {\n+public:\n+  A() {}\n+  ~A() {}\n+\n+  int a;\n+  int b;\n+};\n+\n+\n+int main()\n+{\n+  A *bb = new A[10];\n+  delete [] bb;\n+\n+  if (pass)\n+    printf (\"PASS\\n\");\n+  else\n+    printf (\"FAIL\\n\");\n+}"}, {"sha": "113f46bfdda1b181aa37ae2966c8aba809fd1d1a", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/ns1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fns1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fns1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fns1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,18 @@\n+// Build don't link: \n+// GROUPS passed old-abort\n+struct B \n+{\n+      void f(char); // ERROR - Cannot reduce access\n+      void g(char);\n+};\n+  \n+class C \n+{\n+  int g();\n+};// ERROR -  warning\n+\n+class D2 : public B \n+{\n+  using B::f;  // ok: B is a base of D\n+  using C::g;  // error: C isn't a base of D2\n+}; // ERROR - type C is not a base type for type D2"}, {"sha": "6146eb401a02175eaad7d97f06dee20762b04fde", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/operators1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link: \n+// GROUPS passed operators\n+struct A {\n+\tint x;\n+};\n+\n+int operator()(A x,float y) { // MUST be a member function// ERROR - .*\n+\treturn 1;\n+}\n+\n+main() {\n+\tA x;\n+\tx(1.0); // ERROR - no match for call\n+}"}, {"sha": "ece06ef3d06f9aa9637b059b28488c3524cd3409", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/operators2.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,4 @@\n+// Build don't link: \n+// GROUPS passed operators\n+class X { };\n+void operator[](X& a, X& b) {} // MUST be a member function// ERROR - .*"}, {"sha": "e068de3aa52b79bf3fd02923713629fe94d62cd5", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/operators3.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,4 @@\n+// Build don't link: \n+// GROUPS passed operators\n+class X { };\n+void operator->(X& a, X& b) {} // MUST be a member function// ERROR - .*"}, {"sha": "b56d26c073dfbd83d2db56453558a623e0e98245", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/operators4.C", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators4.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,121 @@\n+// GROUPS passed operators\n+// Check that the & operator, when applied to a global function\n+// or member function returns a proper value as long as the context\n+// in which the result of & is used requires a pointer to a specific\n+// unambigous (function-pointer) type.\n+//\n+// This test fails (in test5()) when compiled with g++ 1.34.1.\n+\n+extern \"C\" void printf (char *, ...); \n+\n+int function (char c);\n+int function (float f);\n+\n+class base {\n+\tint filler;\n+public:\n+\tint method (char);\n+\tint method (float);\n+};\n+\n+void* vp;\n+\n+typedef int (*ptr_to_func_of_char)(char);\n+typedef int (*ptr_to_func_of_float)(float);\n+typedef int (base::*ptr_to_method_of_char)(char);\n+typedef int (base::*ptr_to_method_of_float)(float);\n+\n+int test2 (void*);\n+int test3 (void*);\n+int test4 (void*);\n+int test5 (void*);\n+\n+base* base_ptr;\n+\n+int fail ()\n+{\n+  printf (\"FAIL\\n\");\n+  return 1;\n+}\n+\n+int main ()\n+{\n+\tbase_ptr = new base;\n+\n+\tptr_to_func_of_char p0 = &function;\n+\tvp = (void*) p0;\n+\tif (test2 (vp))\n+\t\treturn fail ();\n+\tptr_to_func_of_float p1 = &function;\n+\tvp = (void*) p1;\n+\tif (test3 (vp))\n+\t\treturn fail ();\n+\tptr_to_method_of_char p2 = &base::method;\n+\tvp = (void*) p2; // ERROR - \n+\tif (test4 (vp))\n+\t\treturn fail ();\n+\tptr_to_method_of_float p3 = &base::method;\n+\tvp = (void*) p3; // ERROR - \n+\tif (test5 (vp))\n+\t\treturn fail ();\n+\n+\tprintf (\"PASS\\n\");\n+\treturn 0;\n+}\n+\n+int test2 (void* vp)\n+{\n+\tchar ch = 'x';\n+\n+\treturn (((ptr_to_func_of_char)vp)(ch) !=  9901);\n+}\n+\n+int test3 (void* vp)\n+{\n+\tfloat flt = 9.9;\n+\n+\treturn (((ptr_to_func_of_float)vp)(flt) !=  9902);\n+}\n+\n+int test4 (void* vp)\n+{\n+\tchar ch = 'x';\n+\tptr_to_method_of_char p = (ptr_to_method_of_char) vp; // ERROR - bad type conversion\n+\n+\treturn ((base_ptr->*p)(ch) !=  9904);\n+}\n+\n+int test5 (void* vp)\n+{\n+\tfloat flt = 9.9;\n+\tptr_to_method_of_float p = (ptr_to_method_of_float) vp; // ERROR - bad type conversion\n+\n+\tif ((base_ptr->*p)(flt) !=  9905) {\n+\t\treturn 1;\n+\t} else\n+\t\treturn 0;\n+}\n+\n+int function (char c)\n+{\n+\tc = c;\n+\treturn 9901;\n+}\n+\n+int function (float f)\n+{\n+\tf = f;\n+\treturn 9902;\n+}\n+\n+int base::method (char c)\n+{\n+\tc = c;\n+\treturn 9904;\n+}\n+\n+int base::method (float f)\n+{\n+\tf = f;\n+\treturn 9905;\n+}"}, {"sha": "84c09a2a4b27305aecdf366ea4e87d53b40a50e7", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/operators5.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators5.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,52 @@\n+// GROUPS passed operators\n+// Check that operators may be (directly) recursive.\n+\n+extern \"C\" void printf (char *, ...); \n+\n+struct base {\n+\tint i;\n+};\n+\n+base base_variable;\n+\n+base operator+ (const base& left, const base& right)\n+{\n+\tbase ret_val;\n+\n+\tret_val.i = left.i + right.i;\n+\treturn ret_val;\n+}\n+\n+base operator- (const base& left, int right)\n+{\n+\tbase ret_val;\n+\n+\tret_val.i = left.i - right;\n+\treturn ret_val;\n+}\n+\n+// Define the unary ! operator for class base to be the fibonachi\n+// operator.\n+\n+base operator! (const base& right)\n+{\n+\tif (right.i < 2)\n+\t\treturn right;\n+\telse\n+\t\treturn ((!(right-1)) + (!(right-2)));\n+}\n+\n+int main ()\n+{\n+\tbase k;\n+\n+\tk.i = 15;\n+\tk = !k;\t\t// fib it!\n+\n+\tif (k.i != 610)\n+\t  printf (\"FAIL\\n\");\n+\telse\n+\t  printf (\"PASS\\n\");\n+\n+\treturn 0;\n+}"}, {"sha": "c0c23188a8e932a822a5db28f884f67924616d84", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/operators6.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators6.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link: \n+// GROUPS passed operators\n+class a {\n+public:\n+    a* operator->() { return this; }\n+    void p();\n+};\n+\n+void a::p() {\n+  operator->();\n+}"}, {"sha": "7a952211c9bb54417e115485d8323fa846fc3288", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/operators7.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators7.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,13 @@\n+// Build don't link: \n+// GROUPS passed operators\n+class A {\n+  char *p;\n+public:\n+  operator const char *() const { return p; }\n+};\n+\n+int foo(const A &a)\n+{\n+  return (a != 0);\n+}\n+"}, {"sha": "390f749bc5ecc2897285fb375b25395a88165a47", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/operators8.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators8.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link: \n+// GROUPS passed operators\n+struct A {\n+  char *p;\n+  operator char *();\n+};\n+\n+char foo(A a)\n+{\n+  return a[0];\n+}"}, {"sha": "5658fdd8f9bf4f9f4b38a28b0c782ea64673e750", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/overload1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,21 @@\n+// Build don't link: \n+// GROUPS passed overloading\n+class Foo\n+{\n+public:\n+  int f (void);\n+};\n+\n+class Bar : public Foo\n+{\n+public:\n+      int f (int); // ERROR - candidates are\n+};\n+\n+main ()\n+{\n+  Bar b;\n+\n+  b.f ();// ERROR - \n+  b.f (10);\n+}"}, {"sha": "e28d6ea805dc08f54c6eb4c7e028577f472c6907", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/overload10.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload10.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,25 @@\n+// Build don't link: \n+// GROUPS passed overloading\n+class Bed {\n+   public:\n+   static void bed_func(\n+      int        (*f)(int &, int, int));\n+};\n+class g_func {\n+public:\n+\tstatic int save_status;\n+\n+\t// in compute_harshness, we should be using comptypes, not ==, to\n+\t// check if this is equivalent to the previous decl; the only\n+\t// difference is the default arg\n+\tstatic int rpt_func(int &status, int expand, \n+\t\tint restore_cursor=1 );\n+};\n+\n+int  main (int argc, \n+           char **argv,\n+           char  **envp)\n+{\n+   Bed::bed_func(g_func::rpt_func);\n+   return(1);\n+}"}, {"sha": "cbced94cbcf5b6f384b597e8b8324ece7fef27f9", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/overload11.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload11.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link: \n+// GROUPS passed overloading\n+class foo_int\n+{\n+public:\n+  int & i;\n+\n+  foo_int (int &j) : i(j) {};\n+  void inc () { i++; }\n+\n+};"}, {"sha": "75068da88bbfacdd4ccde88f066234f35ec606fe", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/overload2.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,43 @@\n+// GROUPS passed overloading\n+// Check that calls to the correct overloaded virtual\n+// functions are generated even where the type of the formal\n+// arguments for the overloadings are similar or related.\n+\n+extern \"C\" void printf (char *, ...); \n+\n+int proper_method_called = 0;\n+\n+struct base {\n+\tint member;\n+\tvirtual void method (char)\n+\t{\n+\t}\n+\tvirtual void method (char *)\n+\t{\n+\t}\n+};\n+\n+struct derived : public base {\n+\tint member;\n+\tvirtual void method (char)\n+\t{\n+\t}\n+\tvirtual void method (char *)\n+\t{\n+\t\tproper_method_called++;\n+\t}\n+};\n+\n+char *message;\n+\n+int main ()\n+{\n+\tderived derived_object;\n+\n+\tderived_object.method (message);\n+\n+\tif (proper_method_called != 1)\n+\t  printf (\"FAIL\\n\");\n+\telse\n+\t  printf (\"PASS\\n\");\n+}"}, {"sha": "baa90fb282d547c7ce357a4b0d00408380204766", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/overload3.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,27 @@\n+// Build don't link: \n+// GROUPS passed overloading\n+typedef int rutBoolean;\n+\n+class rutBigIntRep\n+{\n+public:\n+  friend rutBoolean operator>(const rutBigIntRep& a, const rutBigIntRep& b);\n+  operator rutBoolean() const;  \n+protected:\n+  enum Kluge {kluge};\n+  rutBigIntRep(Kluge) {}\n+  rutBigIntRep();\n+  rutBigIntRep(const rutBigIntRep& value);\n+  rutBigIntRep& operator=(const rutBigIntRep& value);\n+};\n+\n+rutBoolean operator>(const rutBigIntRep& a, const rutBigIntRep& b) {\n+  // This should not result in a warning.  It used to warn about the\n+  // conversion from int to enum while exploring the possibility of\n+  // converting `a' via `operator rutBoolean', then using the\n+  // rutBigIntRep(Kluge) constructor.  It later realizes it shouldn't\n+  // do this, but the call to build_type_conversion was ending up with\n+  // a warning in convert.\n+  rutBigIntRep diff(a);\n+  return 0;\n+}"}, {"sha": "21c3dc8db5a5a1f201f1a5adc5d1cb742c0a049a", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/overload4.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload4.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,23 @@\n+// Build don't link: \n+// GROUPS passed overloading\n+  typedef void *\t\t(*NewObject) (void);\n+  \n+  class B\n+  {\n+  public:\n+\tstatic void WantsNew (NewObject creator); // ERROR - candidates are\n+  };\n+  \n+  class A\n+  {\n+  public:\n+      static A * NewOne (void);\n+  \n+      static void InitClass (void)\n+      {\n+\t  B::WantsNew ( (NewObject) A::NewOne );\n+\t  // This used to die in convert_harshness_{ansi,old} cuz it\n+\t  // didn't know what to do about a void type.\n+\t  B::WantsNew ( A::NewOne );// ERROR - \n+      }\n+  };"}, {"sha": "d71f0c01d2edb4d7cd8c9129a3e9fd8abe49b467", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/overload5.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload5.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,23 @@\n+// Build don't link: \n+// GROUPS passed overloading\n+class Foo\n+{\n+public:\n+  int operator << (const signed char&);\n+  int operator << (const unsigned char&);\n+  int operator << (const short&);\n+  int operator << (const unsigned short&);\n+  int operator << (const long&);\n+  int operator << (const unsigned long&);\n+};\n+\n+int main ()\n+{\n+  Foo fd;\n+\n+  // We fixed convert_harshness_ansi so it considers the call to\n+  // <<(const signed char&) to be a trivial conversion.  It used\n+  // to always make it a standard conversion, which made it conflict\n+  // with <<(const unsigned char &), which is really a std conv.\n+  fd << (signed char) 0;\n+}"}, {"sha": "84903c19d740176f0baca9955f90a9c0b76b7350", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/overload6.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload6.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,24 @@\n+// Build don't link: \n+// GROUPS passed overloading\n+struct temp_string {\n+  temp_string (const unsigned char);\n+};\n+  \n+class String {\n+ public:\n+  String& operator = (temp_string);\n+  String& operator = (const String&);\n+}; \n+class S {\n+ public:\n+  operator temp_string & () const;\n+}; \n+\n+S lbuf;\n+\n+static void e_r ()\n+{\n+  String a;\n+  a = lbuf;\n+ return;\n+}"}, {"sha": "0c39e0d8c21c8cf637951abec8b447b3ef6252e1", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/overload7.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload7.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,41 @@\n+// GROUPS passed overloading\n+extern \"C\" void printf (char *, ...);\n+\n+struct NoName {\n+        \n+        int first;\n+        int second;\n+};\n+\n+class Casted {\n+\n+  public:\n+\n+        NoName  x;\n+        double  y;\n+\n+        Casted ( int _x , double _y ): y(_y) \n+        { \n+                x.first = _x;\n+                x.second = _x*2;\n+        }\n+        \n+        operator NoName() const { return x; }\n+        operator double() const { return y; }\n+};\n+\n+main()\n+{\n+        Casted c(10,12.34);\n+\n+        NoName x;\n+        double y;\n+\n+        x = c;\n+        y = c;\n+\n+\tif (x.first == 10 && x.second == 20 && y == 12.34)\n+\t  printf (\"PASS\\n\");\n+\telse\n+\t  printf (\"FAIL\\n\");\n+}"}, {"sha": "6057ebe708665ae303efb7f558d6d6fba7d7dec3", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/overload8.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload8.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,9 @@\n+// Build don't link: \n+// GROUPS passed overloading\n+typedef struct{double re,im;} complex;\n+class Complex{public:double re,im;\n+    inline void operator=(Complex&X){re=X.re; im=X.im;};};\n+void zxcvbnm(int n,...){n=1;}\n+main(){complex c; Complex C;\n+zxcvbnm(1,c);\n+zxcvbnm(1,C);}"}, {"sha": "2d5dfa3553d4e17f661393d80530bce66de17fc5", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/overload9.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foverload9.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,20 @@\n+// Build don't link: \n+// GROUPS passed overloading\n+class CLogger\n+{\n+public:\n+      void operator() (int,const char *) {}; // ERROR - candidates\n+      void operator() (int,const char *, ...) {}; // ERROR - candidates\n+} Log;\n+\n+class CGLogger : public CLogger\n+{\n+} GLog;\n+\n+main()\n+{\n+        Log(1,\"Test\");// ERROR -  call of.*\n+        Log(1,\"Test %d\",3);\n+        GLog(1,\"Test\");// ERROR -  call of.*\n+        GLog(1,\"Test %d\",3);\n+}"}, {"sha": "76bfb0ea3783b9b5c2b555061d1315a203c312c1", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/parse1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fparse1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fparse1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fparse1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,17 @@\n+// Build don't link: \n+// GROUPS passed parsing\n+class Try {\n+private:\n+  char s;\n+public:\n+  // an escaped double-quote should not call consume_string inside\n+  // reinit_parse_for_block\n+  void  mf() { s='\\\"'; }\n+};\n+\n+main()\n+{\n+  Try x;\n+  x.mf();\n+}\n+"}, {"sha": "cd588e15d86d021b2a6c4fb4aedede0d54783411", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/parse2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fparse2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fparse2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fparse2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link: \n+// GROUPS passed parsing\n+class BitString {\n+public:\n+    int i;\n+};\n+\n+\n+typedef BitString BS;\n+typedef ::BitString cBS;"}, {"sha": "ba1a2084efe1288b7046e76ccb32bff7236b3c36", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/prepost1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fprepost1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fprepost1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fprepost1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link: \n+// GROUPS passed prefix-postfix\n+class foo {\n+public:\n+      operator ++ (); // ERROR - no type or storage class\n+};\n+\n+main()\n+{\n+  foo x;\n+\n+  // This should fall back to calling operator++(), and be an error with\n+  // the -pedantic flag.\n+  x++;// ERROR - \n+}"}, {"sha": "1e34433e180d35fcea76aa41298f9c8784a5d297", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/prepost2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fprepost2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fprepost2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fprepost2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link: \n+// GROUPS passed initialization\n+class foo {\n+public:\n+      operator ++ (); // ERROR - no type or storage class\n+      operator ++ (int); // ERROR - no type or storage class\n+      operator ++ (char);\t\t// illegal// ERROR - .*\n+      operator ++ (short);\t\t// illegal// ERROR - .*\n+      operator ++ (long);\t\t// illegal// ERROR - .*\n+};"}, {"sha": "4244e4ff59e2c7c3e85032d8f78274e530da78a6", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/prepost3.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fprepost3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fprepost3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fprepost3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,7 @@\n+// Build don't link: \n+// GROUPS passed prefix-postfix\n+class Y {\n+public:\n+   friend Y operator++ (Y&);\n+   friend Y operator++ (Y&, char);\t// illegal// ERROR - .*\n+};"}, {"sha": "ac31f9129525a96779541e04f2c7dbdc01aae77f", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/prepost4.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fprepost4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fprepost4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fprepost4.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link: \n+// GROUPS passed prefix-postfix\n+class Y {\n+public:\n+   friend Y operator++ (Y&);\n+\n+   // This is legal---it's a good test to make sure that grokfndecl's\n+   // checking of the arguments is sane.\n+   friend Y operator++ (Y&, int);\n+};"}, {"sha": "3e3b2dfe1b56c8e83499fea2fffbf4bcfed41830", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/ptolemy1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fptolemy1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fptolemy1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fptolemy1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,23 @@\n+// Build don't link: \n+// GROUPS passed ptolemy-bugs\n+class Tcl_Interp;\n+\n+class PTcl {\n+public:\n+\tPTcl(Tcl_Interp* interp = 0);\n+\t~PTcl();\n+\tint alias(int argc,char** argv);\n+};\n+\n+typedef int (PTcl::*InterpFuncP)(int,char**);\n+\n+struct InterpTableEntry {\n+\tchar* name;\n+\tInterpFuncP func;\n+};\n+\n+ \n+static InterpTableEntry funcTable[] = {\n+\t{ \"alias\" , &PTcl::alias  } ,\n+\t0, 0\n+};"}, {"sha": "ca9c21c2814eca0a3127e7c7f2512e1e3837b3e0", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/ptolemy2.C", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fptolemy2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fptolemy2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fptolemy2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,69 @@\n+// GROUPS passed ptolemy-bugs\n+#include <iostream.h>\n+\n+class PTcl {\n+public:\n+\tint dispatcher(int which,int argc,char** argv);\n+\t// fns in the table\n+\tint one(int argc, char** argv);\n+\tint two(int argc, char** argv);\n+\tint three(int argc, char** argv);\n+};\n+\n+// An InterpFuncP is a pointer to an PTcl function that takes an argc-argv\n+// argument list and returns TCL_OK or TCL_ERROR.\n+\n+typedef int (PTcl::*InterpFuncP)(int,char**);\n+\n+struct InterpTableEntry {\n+\tchar* name;\n+\tInterpFuncP func;\n+};\n+\n+// Here is the function table and dispatcher function.\n+// These macros define entries for the table\n+\n+#define quote(x) #x\n+#define ENTRY(verb) { quote(verb), &PTcl::verb }\n+\n+static InterpTableEntry funcTable[] = {\n+\tENTRY(one),\n+\tENTRY(two),\n+\tENTRY(three),\n+\t{0, 0}\n+};\n+\n+int PTcl::dispatcher(int which, int argc, char** argv) {\n+\treturn (this->*(funcTable[which].func))(argc, argv);\n+}\n+\n+void printargs(char** argv) {\n+//\twhile (*argv) {\n+//\t\tcout << \" \" << *argv++;\n+//\t}\n+//\tcout << \"\\n\";\n+}\n+\n+int PTcl::one(int, char** argv) {\n+  cout << \"FAIL\\n\";\n+\tprintargs(argv);\n+\treturn 0;\n+}\n+\n+int PTcl::two(int, char** argv) {\n+  cout << \"PASS\\n\";\n+\tprintargs(argv);\n+\treturn 0;\n+}\n+\n+int PTcl::three(int, char** argv) {\n+  cout << \"FAIL\\n\";\n+\tprintargs(argv);\n+\treturn 0;\n+}\n+\n+main (int argc, char** argv) {\n+\tPTcl obj;\n+\tobj.dispatcher(1,argc,argv);\n+\treturn 0;\n+}"}, {"sha": "49c9f75aa1f4659e91d22341c9cd3ff27a8c7085", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/ptrmem1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fptrmem1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fptrmem1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fptrmem1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,21 @@\n+// Build don't link: \n+// GROUPS passed pointers-to-members\n+class my_class \n+{\n+public:\n+  typedef void func_type (int num);\n+  my_class (int num, func_type* proc);\n+  void dispatch (void);\n+private:\n+  int _num;\n+  func_type *_proc;\n+};\n+\n+my_class::my_class (int num, func_type* proc) : _num(num), _proc(proc) \n+{\n+}\n+\n+void my_class::dispatch (void)\n+{\n+  _proc(_num);\n+}"}, {"sha": "2af19e04d84605c3fb4dca1ff3e983719e40984e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/ptrmem2.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fptrmem2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fptrmem2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fptrmem2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,26 @@\n+// Build don't link: \n+// GROUPS passed pointers-to-members\n+struct C {\n+  struct N {\n+    int g1(int);\n+    int g2(int);\n+  };\n+\n+  typedef int (N::*pmfn)(int);\n+  \n+  int f1(int);\n+  int f2(int);\n+};\n+\n+int (C::*f)(int) = &C::f1;\t\t\n+\n+/*\n+   The compiler should not crash on the line below; this change fixes it:\n+        * cp-tree.c (list_hash_lookup_or_cons): Make sure the type doesn't\n+        have TYPE_PTRMEMFUNC_P set before we try to build its\n+        CLASSTYPE_ID_AS_LIST.\n+*/\n+\n+C::pmfn h = &C::N::g1;\t\t\t\n+\n+int (C::N::*g)(int) = &C::N::g2;\t"}, {"sha": "0f6bf0bd90f1e3fc2e0d3fff0d864094dce4b98a", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/ptrmem3.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fptrmem3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fptrmem3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fptrmem3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,32 @@\n+// Build don't link: \n+// GROUPS passed pointers-to-members\n+template<class T> class TemplA {\n+    T t;\n+};\n+\n+\n+template<class T> class TemplB {\n+public:    \n+    typedef void (T::*TClassMethod)();\n+\n+private:\n+/*\n+   This line should not crash cuz of the get_decl_list change in this:\n+\t* cp-tree.c (list_hash_lookup_or_cons): Make sure the type doesn't\n+\thave TYPE_PTRMEMFUNC_P set before we try to build its\n+\tCLASSTYPE_ID_AS_LIST.\n+\t(get_decl_list): Likewise, when trying to read it.\n+*/\n+    TemplA<TClassMethod> Tmethod;  \n+};\n+\n+\n+class C {\n+    int a;\n+};\n+\n+int main(int, char**) {\n+\n+    TemplB<C> test;\n+}\n+"}, {"sha": "a4f792e5c074d994c50ba7bcebd47de94566e633", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/ptrmem4.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fptrmem4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fptrmem4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fptrmem4.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,16 @@\n+// Build don't link: \n+// GROUPS passed pointers-to-members\n+class X   {\n+ private:\n+  int i;\n+ public:\n+  X(int k)\t\t\t{ i=k; }\n+  int operator=(X &a)\t\t{ return i = a.i; }\n+  int operator=(int ii)\t{ return i = ii; }\n+};\n+int main(void)\n+{\n+  int (X::*op1_ptr)(X&);\n+  op1_ptr = &X::operator=;    // g++ gives error \n+  return 0;\n+}"}, {"sha": "93baa4490b4f1d6316a0d1fd294a88c9e8d0f9d0", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/recurse.C", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Frecurse.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Frecurse.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Frecurse.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,80 @@\n+// Build don't link: \n+// GROUPS passed recursive-aborts\n+// types\n+typedef unsigned int DBflag;   // for storing user flag value\n+typedef unsigned long DBoffset; // 32-bit unsigned integer\n+typedef DBoffset DBsize;  // type for storing sizes of objects\n+typedef unsigned char DBbyte;   // 8-bit unsigned char\n+\n+class DBlink\n+{\n+protected:\n+  DBbyte link[4];       // hold link in portable MSB first format\n+public:\n+  DBlink(DBoffset = 0, DBflag = 0);\n+  DBlink &operator=(const DBlink &);\n+  DBlink &operator=(DBoffset);\n+  operator DBoffset();\n+  operator const DBbyte *() { return link; }\n+  void set_flag() { link[0] |= 0x80; }\n+  void reset_flag() { link[0] &= 0x7f; }\n+  int test_flag() const { return (link[0] & 0x80) != 0; }\n+};\n+\n+typedef DBlink DBsizerec;       // hold data record size in portable format\n+\n+// constants\n+const DBoffset DB_NULL = 0;\n+\n+class DBlinkrec\n+{\n+protected:\n+  // offsets are stored with MSB in link[0]\n+  DBlink l;  // offset into link file of right child - MSB = red bit\n+  DBlink r;  // offset into link file of left child - MSB = delete\n+  DBlink d;  // offset into parallel data file - MSB = user flag\n+public:\n+  DBlinkrec():l(DB_NULL), r(DB_NULL), d(DB_NULL) {}\n+  void make_red() // set link to red\n+  { l.set_flag(); }\n+  void make_black() // set link to black\n+  { l.reset_flag(); }\n+  int is_red() const // indicates whether this is a red link\n+  { return l.test_flag(); }\n+  void set_discard() // set discard flag\n+  { r.set_flag(); }\n+  void reset_discard() // reset discard flag\n+  { r.reset_flag(); }\n+  int is_discarded() const // check discard flag\n+  { return r.test_flag(); }\n+  void set_flag() // set user flag\n+  { d.set_flag(); }\n+  void reset_flag() // reset user flag\n+  { d.reset_flag(); }\n+  int is_flag() const // check user flag\n+  { return d.test_flag(); }\n+\n+  friend class DataBase;\n+};\n+\n+class DBpathrec : public DBlinkrec\n+{\n+  DBoffset offset;    // offset of link record in LNK file\n+public:\n+  DBpathrec():offset(DB_NULL) { }\n+  DBpathrec(DBoffset off, const DBlinkrec &lr):offset(off), DBlinkrec(lr) {}\n+  operator DBoffset() { return offset; }\n+  DBpathrec &operator=(DBoffset off) { offset = off; return *this; }\n+  DBpathrec &operator=(const DBpathrec &pr)\n+  { offset = pr.offset; (DBlinkrec)*this = (DBlinkrec)pr; return *this; }\n+\n+  friend class DataBase;\n+};\n+\n+main()\n+{\n+  DBpathrec a(), b();\n+\n+  a = b;// ERROR -  non-lvalue in assignment.*\n+}\n+"}, {"sha": "39a432cac5f48ab23021657eb169643bb62b2468", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/redecl1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fredecl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fredecl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fredecl1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,5 @@\n+// Build don't link: \n+// GROUPS passed redeclaration\n+inline int min(int x, int y) {return x < y ? x : y;}\t\t/* 235 */// ERROR - .*\n+int min(int a, int b);\n+inline int min(int a, int b) {return (a < b)?a:b;}// ERROR - .*"}, {"sha": "58942197ddf3e9740ed76cd5637fe8638155f634", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/redecl2.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fredecl2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fredecl2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fredecl2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,51 @@\n+// GROUPS passed redeclaration\n+// Check that if multiple declarations of the same single\n+// function are present in different places in the same file,\n+// and if these declarations differ (as allowed) in the number\n+// of argument defaults provided, that correct values are\n+// passed at all call points anyway.\n+\n+extern \"C\" void printf (char *, ...); \n+\n+void receiver (int ii, int jj);\n+\n+void sender_1 ()\n+{\n+\treceiver (3,7);\n+}\n+\n+void receiver (int ii, int jj = 9);\n+\n+void sender_2 ()\n+{\n+\treceiver (5);\n+}\n+\n+int ii_sum = 0;\n+int jj_sum = 0;\n+\n+void sender_3 ();\n+\n+int main ()\n+{\n+\tsender_1 ();\n+\tsender_2 ();\n+\tsender_3 ();\n+\tif (ii_sum != 13 || jj_sum != 25)\n+\t  printf (\"FAIL\\n\");\n+\telse\n+\t  printf (\"PASS\\n\");\n+\n+\treturn 0;\n+}\n+\n+void receiver (int ii, int jj)\n+{\n+\tii_sum += ii;\n+\tjj_sum += jj;\n+}\n+\n+void sender_3 ()\n+{\n+\treceiver (5);\n+}"}, {"sha": "5987e0e3172744e9cfdcbd5653dec6dafb4aaede", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/redecl3.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fredecl3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fredecl3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fredecl3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,17 @@\n+// Build don't link: \n+// GROUPS passed redeclaration\n+class foo\n+{\n+public:\n+    int bar(int a);\n+};\n+\n+\n+void bar(int &a);\n+\n+int foo::bar(int a)  {\n+    int a = 0;\t\t\t// Should this be an error ?// ERROR -  declaration.*\n+\n+    bar(a);\n+    return 0;\n+}"}, {"sha": "2a0c2939e4f125995dd2ed128f2efc236cbaf313", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/reference1.C", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Freference1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Freference1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Freference1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,53 @@\n+// Special g++ Options: -w\n+// GROUPS passed references\n+// Check that if a reference is initialized to refer to a value\n+// which is returned from a function call, the actual call to\n+// the function is only invoked for the original initialization\n+// of the reference, and not for each subsequent use of the\n+// reference.\n+//\n+// This test fails with G++ 1.35.0- (pre-release).\n+// Reported 4/4/89 by Kim Smith\n+\n+extern \"C\" void printf (char *, ...); \n+\n+struct base {\n+\tint data_member;\n+\n+\tbase () {}\n+\tvoid function_member ();\n+};\n+\n+base base_object;\n+\n+base base_returning_function ();\n+\n+int call_count = 0;\n+\n+int main ()\n+{\n+\tbase& base_ref = base_returning_function ();\n+\n+\tbase_ref.function_member ();\n+\tbase_ref.function_member ();\n+\tbase_ref.data_member  = 99;\n+\n+\tif (call_count == 1)\n+\t  printf (\"PASS\\n\");\n+\telse\n+\t  printf (\"FAIL\\n\");\n+\n+\treturn 0;\n+}\n+\n+base base_returning_function ()\n+{\n+\tbase local_base_object;\n+\n+\tcall_count++;\n+\treturn local_base_object;\n+}\n+\n+void base::function_member ()\n+{\n+}"}, {"sha": "6dcdff34e3635ad6618cddf88b1e03baa5c5a6f1", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/rtti1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Frtti1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Frtti1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Frtti1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,8 @@\n+// Build don't link: \n+// GROUPS passed RTTI\n+#include <typeinfo>\n+\n+struct B                                { virtual ~B(){}  };\n+struct D0 : public virtual B            { virtual ~D0(){}  };\n+struct D1 : public virtual D0           { virtual ~D1(){}  };\n+struct C : public virtual B, public D1  { virtual ~C() { } };"}, {"sha": "babbb0183963a65795e945edc998ac83af1b997a", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/scope1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fscope1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fscope1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fscope1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,8 @@\n+// Build don't link: \n+// GROUPS passed scoping\n+int f (int i) {\n+  if (i)\n+    for (int j = i; j; j--)\n+      ;\n+  return j;\t// error: j should only be in scope inside the body of `for'// ERROR - .*\n+} // ERROR - non-void"}, {"sha": "7085716be73a4e7d2646c5755cd3668465514209", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/scope2.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fscope2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fscope2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fscope2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,29 @@\n+// Build don't link: \n+// GROUPS passed scoping\n+class A\n+{\n+ public:\n+  A() {}\n+  ~A() {}\n+  virtual void f() {}\n+};\n+\n+class B : public A\n+{\n+ public:\n+  B() {}\n+  ~B() {}\n+  virtual void f() {}\n+};\n+\n+\n+B GLOBAL_B;\n+\n+B& foo() {return GLOBAL_B;}\n+\n+main()\n+{\n+  // build_scoped_method_call and build_scoped_ref should know how\n+  // to deal with a reference for this\n+  foo().A::f(); \n+}"}, {"sha": "cf784303171b4bc7c792dc7c5108fe2ac97cf21b", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/scope3.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fscope3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fscope3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fscope3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,25 @@\n+// Build don't link: \n+// GROUPS passed scoping\n+// This is fixed when NEW_CLASS_SCOPING is on.\n+\n+template<class T>\n+class ArrayG {\n+public:\n+    ArrayG();\n+protected:\n+    const unsigned INITIAL;\n+    T* array;\t\t\t \n+};\n+\n+template<class T>\n+ArrayG<T>::ArrayG():\n+array(new T[INITIAL])\n+{ }\n+\n+struct X {\n+    struct Correspondence {\n+\tint i;\n+    };\n+\n+    void fill(ArrayG<Correspondence>& a);\n+};"}, {"sha": "43f90164cb635f628e54653f6dc2b69cb86bba7a", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/scope4.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fscope4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fscope4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fscope4.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,32 @@\n+// Build don't link: \n+// excess errors test - XFAIL *-*-*\n+// GROUPS passed scoping\n+class BitString {\n+public:\n+    int i;\n+    int length() const;\n+};\n+\n+typedef BitString BS;\n+\n+class V {\n+public:\n+    class BitString {\n+    public:\n+        static int x(const ::BitString& value);\n+      static int y(const class ::BitString& value); // should be parsed ok\n+        static int z(const BS& value);\n+    };\n+};\n+\n+int\n+V::BitString::x(const ::BitString& value)\n+{ return value.length(); }\n+\n+int\n+V::BitString::y(const class ::BitString& value) // should be parsed ok\n+{ return value.length(); }\n+\n+int\n+V::BitString::z(const BS& value)\n+{ return value.length(); }"}, {"sha": "753236948a35807c3bc8611f7ebf5f2684835ee2", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/scope5.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fscope5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fscope5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fscope5.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,21 @@\n+// Build don't link: \n+// GROUPS passed scoping\n+class Integer {\n+public:\n+    int i;\n+};\n+\n+class Type {\n+    enum Class { ENUM, INTEGER };\n+\n+    class Description {\n+    public:\n+        \n+    };\n+\n+    class Integer: public Description {\n+    public:\n+        ::Integer low;\n+        ::Integer high;\n+    };\n+};"}, {"sha": "6a1d9d1f8e331d48c617c9ffe3b6b796976af772", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/shadow1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fshadow1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fshadow1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fshadow1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,8 @@\n+// Build don't link: \n+// GROUPS passed errors\n+void f( int a) {\n+  int a;\t// this should be an error now// ERROR - .*\n+\t{\n+\t\tint a;\n+\t}\n+};"}, {"sha": "c8242eb553907877b4efb55e1f2d95345a842932", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/sizeof1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link: \n+// Special g++ Options: -pedantic-errors\n+// GROUPS passed sizeof\n+// ARM $5.3.2\n+\n+void f() { }\n+\n+int\n+main()\n+{\n+  // sizeof may not be applied to a function\n+  int i = sizeof( f);// ERROR - .*\n+\n+  return 0;\n+}"}, {"sha": "ddac679d880c9d00a56c67c953eb15660d78ed35", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/sizeof2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,18 @@\n+// Build don't link: \n+// Special g++ Options: -pedantic-errors\n+// GROUPS passed sizeof\n+// ARM $5.3.2\n+\n+void f() { }\n+\n+struct foo { int bit : 1; };\n+\n+int\n+main()\n+{\n+  // sizeof may not be applied to a bit-field\n+  foo f;\n+  int i = sizeof (f.bit);// ERROR - .*\n+\n+  return 0;\n+}"}, {"sha": "e6972ca397eaa0e7ea7eb51bac97b621b2bbf14e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/sizeof3.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link: \n+// Special g++ Options: -pedantic-errors\n+// GROUPS passed sizeof\n+// ARM $5.3.2\n+\n+class bar;\n+\n+int\n+main()\n+{\n+  // sizeof may not be applied to an undefined class\n+  int k = sizeof (bar);// ERROR - .*\n+\n+  return 0;\n+}"}, {"sha": "62d76c05bdd81337029eb0fa1d3569b5445e5c77", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/sizeof4.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof4.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,13 @@\n+// Build don't link: \n+// Special g++ Options: -pedantic-errors\n+// GROUPS passed sizeof\n+// ARM $5.3.2\n+\n+int\n+main()\n+{\n+  // sizeof may not be applied to the type void\n+  int l = sizeof (void);// ERROR - .*\n+\n+  return 0;\n+}"}, {"sha": "0ef9d9c5ed1047b99a2a70f62b8705c0189461a8", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/sizeof5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof5.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,17 @@\n+// GROUPS passed sizeof\n+// ARM $5.3.2\n+\n+extern \"C\" void printf (char *, ...);\n+\n+class foo {};\n+\n+int\n+main ()\n+{\n+  // The size of any class or class object is larger than zero.\n+  int i = sizeof (foo);\n+  if (i > 0)\n+    printf (\"PASS\\n\");\n+  else\n+    printf (\"FAIL\\n\");\n+}"}, {"sha": "caa9276f8a8d735adf1f4cebc3c1d7c16143a697", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/sorry1.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsorry1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsorry1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsorry1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,36 @@\n+// Build don't link: \n+// GROUPS passed old-sorry\n+class a {\n+public:\n+\tint*\tfoo();\n+};\n+\n+a aa;\n+a* ap;\n+\n+class b {\n+public:\n+\tint\tok(int* p =aa.foo());\t\n+\n+  // dump_init should know what to do with this NON_LVALUE_EXPR\n+\tint\tf(int* p =ap->foo());\t\t\n+};\n+\n+\tint\n+b::ok(int *p) \n+{\n+\treturn 0;\n+}\n+\n+\tint\n+b::f(int *p) \n+{\t\t\t\n+\treturn 0;\n+}\n+\tvoid\n+bar()\n+{\n+\tb b;\n+\tb.ok();\n+\tb.f();\n+}"}, {"sha": "b30c796eb193765440a81eabcef3ab3c982f99fc", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/static1.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fstatic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fstatic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fstatic1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,4 @@\n+// Build don't link: \n+// GROUPS passed static\n+class A { public: int a; };// ERROR - .*\n+void foo7 () { A::a = 3; }// ERROR - .*"}, {"sha": "1e050e2cf6fd9e3adff649b9a6bf4963833c9e5b", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/static2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fstatic2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fstatic2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fstatic2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,19 @@\n+// Build don't link: \n+// GROUPS passed static\n+class A\n+{\n+        public:\n+        void    member(void)\n+        {\n+        }\n+\n+        static void staticMember()\n+        {\n+\t  member (); // illegal, no object for calling non-static method// ERROR - .*\n+        }\n+};\n+\n+main()\n+{\n+        A::staticMember();\n+}"}, {"sha": "5c52f0e217dde47ef71eda179935f2643612ffaf", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/static3.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fstatic3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fstatic3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fstatic3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link: \n+// GROUPS passed static\n+class foo{\n+public:\n+  static void  bar( int i ){ value = i; }\n+  static int  value;// ERROR - .*\n+};\n+\n+const int  foo::value = 0; // should be an error.// ERROR - .*\n+\n+int main(){\n+  foo::bar( 1 );\n+  return 0;\n+}\n+"}, {"sha": "5356796094a2606da99ea52082b8154bd535c64a", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/synth1.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsynth1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsynth1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsynth1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,33 @@\n+// Build don't link: \n+// Special g++ Options: -pedantic-errors -g -Wall\n+// GROUPS passed synthetics\n+// excess errors test - XFAIL sparc64-*-elf\n+// Check to make sure that g++ doesn't get freaked out about the use\n+// of generated methods that it supposedly \"can't see\".\n+\n+class Char {\n+public:\n+    Char();\n+    Char(char v);\n+    \n+    // synthetic copy-constructor and operator=\n+private:\n+    char value;\n+};\n+\n+class XChar: public Char {\n+public:\n+    XChar();\n+    XChar(char v, int serial);\n+    \n+    void operator=(const XChar& other);\n+private:\n+    int serial;\n+};\n+\n+void\n+XChar::operator=(const XChar& other)\n+{\n+    Char::operator=(other);\n+    // serial stays the same\n+}"}, {"sha": "e6609fd323b4652a0b748566088465e930967d4e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate1.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,17 @@\n+// Build don't link: \n+// GROUPS passed templates\n+// g++-2.2.1: member functions returning a template type \n+\n+\n+template <class T> struct list { };\n+\n+struct A\n+{\n+  list<int> L;\n+\n+  list<int>  get_list();\n+\n+};\n+\n+\n+list<int> A::get_list() { return L; }"}, {"sha": "55fa2b20025db4a91f83bb105067ad88d714c1ba", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template11.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate11.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,47 @@\n+// Build don't link: \n+// GROUPS passed templates\n+template <class Called>\n+class aCallback\n+{\n+public:\n+  aCallback(Called& obj, int (Called::*met)());\n+\n+  int callback();\n+  \n+protected:\n+\n+private:\n+  // the object to call\n+  Called&       object;\n+  \n+  // the method to apply\n+  int (Called::*method)();\n+  \n+};\n+\n+template <class Called>\n+aCallback<Called>::aCallback(Called& obj,\n+                             int (Called::*met)()) :\n+object(obj),\n+method(met)\n+{};\n+\n+template <class Called>\n+int aCallback<Called>::callback()\n+{\n+  return (object.*method)();\n+}\n+\n+struct myStruct\n+{\n+  int action() {return 24;};\n+};\n+\n+main()\n+{\n+  myStruct toto;\n+\n+  aCallback<myStruct>   cb(toto, &myStruct::action);\n+\n+  return cb.callback();\n+}"}, {"sha": "2165ae29ee43a13646e8ef14845d5132445620f2", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template12.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate12.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,8 @@\n+// Build don't link: \n+// GROUPS passed templates\n+inline void foo (const int &x) {}\n+\n+template <class type>\n+inline void foo (const type &x) {x.eat_this_and_die();}\n+\n+int main (int argc, char **argv) {foo (argc);}"}, {"sha": "653ef215e88ac54e347eb2df5f9f3b7aa646e98e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template13.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate13.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link: \n+// GROUPS passed templates\n+template<class T>\n+class ListS {\n+public:\n+    class Vix {\n+    public:\n+\tVix();\n+    };\n+};\n+\n+template<class T>\n+ListS<T>::Vix::Vix()\n+{ }\n+"}, {"sha": "b830505e2098ad843a54d52da487aeda123758f5", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template15.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate15.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,19 @@\n+// Build don't link: \n+// GROUPS passed templates\n+template<class T> class Stack {\n+  public:\n+    Stack (int s = 10);         //Comment out \"= 10\" and it will compile\n+    ~Stack(void);               //Omitting \"void\" doesn't help\n+}; \n+\n+template<class T> Stack<T>::~Stack(void) \n+{ }\n+\n+//If this definition comes before the one for ~Stack, the error message\n+//about redeclaration of `void Stack<int>::~Stack()' will not occur.\n+template<class T> Stack<T>::Stack(int s)\n+{ }\n+\n+int main () {\n+    Stack<int> stk(10);\n+}"}, {"sha": "ec13a24f86ed5bc216771c50d9a83c667ad94436", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template16.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate16.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link: \n+// GROUPS passed templates\n+template<class T> class TList {\n+   typedef void (T::*TVOIDFUNT)();\n+   typedef T*   (T::*TTPFUNT)(T*);\n+};\n+\n+class A;\n+class B : TList<A> { };\n+"}, {"sha": "e6c2652dce52eada1b21d07553a72759197bb763", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template17.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate17.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,12 @@\n+// Build don't link: \n+// GROUPS passed templates\n+struct Regex { int i; Regex(char *, int); };\n+template<class KEY>\n+class NDAMName {\n+public:\n+    static const Regex pattern;\n+    static unsigned sequence_number;\n+};\n+\n+const Regex NDAMName<'L'>::pattern(\"^[Ll](.*)$\",   1);// ERROR -  type/value.*\n+unsigned NDAMName<'L'>::sequence_number = 0;// ERROR -  type/value"}, {"sha": "5c6479cbffc2b689c5ab7aa082cf8f2e3ce62c2e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template18.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate18.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link: \n+// GROUPS passed templates\n+template<class T> class X;\n+typedef X<int> IX;\n+\n+template<class T>\n+class X {\n+public:\n+  T x;\n+};\n+\n+struct A {\n+  IX c;\n+};"}, {"sha": "a8b33c1b4dd5642a249d767fc8fc9995e6f5f429", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template19.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate19.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,26 @@\n+// Build don't link: \n+// GROUPS passed templates\n+template <class T>\n+class Base\n+{\n+public:\n+    Base() { }\n+};\n+\n+template <class memberType, class keyType>\n+class Middle : public Base<memberType>\n+{\n+public:\n+    Middle (keyType const & (*ko) (memberType const &))\n+    {\n+    }\n+};\n+\n+// EXCHANGE the following lines for this code to work.\n+//template <class memberType, class keyType> class Middle;\n+template <class T, class keyType> class Middle;\n+\n+struct Test : public Middle <int, int>\n+{\n+    Test();\n+};"}, {"sha": "07e2e66a7c0531f492715a3f195d6751e867f754", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate2.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link: \n+// GROUPS passed templates\n+template <class Q>\n+class Conc {\n+public:\n+\tstatic int body();\n+};\n+\n+template <class Q>\n+int Conc<Q>::body() {return 0;}\n+\n+main () {\n+\tConc<int> s2;\n+}"}, {"sha": "7f5c4acd4670f3beb875239f55374a1debe6b270", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template20.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate20.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,21 @@\n+// Build don't link: \n+// GROUPS passed templates\n+template <class A, class B> class Map;\n+\n+class Foo\n+{\n+public:\n+    static Map<int,int> bar;\n+};\n+\n+template <class A, class B>\n+class Map\n+{\n+public :\n+    int find();\n+};\n+\n+main()\n+{\n+    int z = Foo::bar.find();\n+}"}, {"sha": "9d6139191e0cbadb56afaf9cdb10a876e2839e57", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template21.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate21.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,43 @@\n+// Build don't link: \n+// GROUPS passed templates\n+template<class T>\n+class L {\n+public:\n+    L();\n+\n+    T x[30];\n+    int doit(int i) const;\n+};\n+\n+#ifdef BUG\n+template<class T>\n+int\n+L<T>::doit(int i) const\n+{\n+    return x[i].z;\n+}\n+#endif\n+\n+class X {\n+public:\n+    class Y {\n+    public:\n+        Y();\n+        Y(int);\n+\n+        int z;\n+    };\n+    \n+    L<Y> ly;\n+};\n+\n+#ifndef BUG\n+template<class T>\n+int\n+L<T>::doit(int i) const\n+{\n+    return x[i].z;\n+}\n+#endif\n+\n+static X x;"}, {"sha": "a977e2ffacf5b36eb0b5179cb2f2555e83eafc99", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template22.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate22.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,22 @@\n+// GROUPS passed templates\n+extern \"C\" int printf (const char *, ...);\n+\n+template <class T>\n+class Foo\n+{\n+public:\n+  void func (int const& i);\n+};\n+\n+template <class T>\n+void Foo<T>::\n+func (int const& i)\n+{}\n+\n+\n+main ()\n+{ \n+  Foo<int const> foo;\n+  printf (\"PASS\\n\");\n+  return 0;\n+}"}, {"sha": "f38d4204685106c10be32db66c6d6ebf309f178b", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template23.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate23.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,34 @@\n+// Build don't link: \n+// GROUPS passed templates\n+template <class T>\n+class T_Base\n+{};\n+\n+template <class T>\n+class T_Derived\n+: public T_Base<T>\n+{};\n+\n+\n+class Base\n+{\n+public:\n+  Base (float name);\n+};\n+\n+class Derived\n+: public Base\n+{\n+private:\n+  T_Base<int>*\tdata_;\t// Fix (1): Change date_ from T_Base<int>* to T_Derived<int>*\n+  \n+public:\n+  Derived (float name); \n+};\n+\n+\n+Derived::\n+Derived (float name)\n+:  Base(name),\n+   data_(new T_Derived<int>()) \n+{}"}, {"sha": "7d67702328295e6b5c129078089d2e2e5e8da68b", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template24.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate24.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,20 @@\n+// GROUPS passed templates\n+extern \"C\" void printf (char *, ...);\n+\n+template <class F>\n+class Temp\n+{\n+  F  func_;\n+public:\n+  Temp (F f) :func_(f) {}\n+};\n+\n+int func (int h = 1, int z = 2) { return h+z; }\n+\n+main ()\n+{\n+  Temp<int(*)(int, int)> temp (func);\n+\n+  printf (\"PASS\\n\");\n+  return 0;\n+}"}, {"sha": "5939fed5b89f515b1ec4c30c0dfc0d7c4966151f", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template25.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate25.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,36 @@\n+// Build don't link: \n+// GROUPS passed templates\n+template <class T>\n+class Temp_Base\n+{};\n+\n+template <class T>\n+class Temp_Derived\n+: public Temp_Base<T>\n+{\n+public:\n+  Temp_Derived (int i = 10) {}\n+};\n+\n+\n+class Base\n+{\n+  float r_;\n+public:\n+  Base (float r) : r_(r) {}\n+};\n+\n+class Derived\n+: public Base\n+{\n+private:\n+  Temp_Base<int>*  boo_;\t   \n+public:\n+  Derived (float);\n+};\n+\n+Derived::\n+Derived (float form)\n+: Base(form),\n+  boo_(new Temp_Derived<int>)\n+{}"}, {"sha": "6dc15551f81de99a94e1c2b804c2bba64f99fd20", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template26.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate26.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,31 @@\n+// Build don't link: \n+// GROUPS passed templates\n+class V {\n+ public:\n+  V();\n+  V(int);\n+  };\n+\n+template <int I> class AA: public virtual V {\n+ public:\n+  AA();\n+  AA(int);\n+  };\n+\n+template <int I> class BB : public virtual V {\n+ public:\n+  BB();\n+  BB(int);\n+  };\n+\n+template <int I> AA<I>::AA() {};\n+template <int I> AA<I>::AA(int i): V(i) {};\n+template <int I> BB<I>::BB() {};\n+template <int I> BB<I>::BB(int i) {};\n+\n+class CC : public AA<1>, public BB<2> {\n+ public:\n+  CC();\n+  CC(int);\n+  };\n+"}, {"sha": "a2649d439e0857bde3555b721424eebf86538bca", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template27.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate27.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link: \n+// GROUPS passed templates\n+        template<class K, class V> class MapLS { };\n+        class String {};\n+        class X1 { };\n+        class RefProto { };\n+        template<class REP> class Ref { };\n+        \n+        class MapLS<String, Ref<X1> >: public MapLS<String, RefProto> {\n+        public:\n+            ~MapLS();\n+        };\n+        \n+        MapLS<String, Ref<X1> >::~MapLS() { }"}, {"sha": "3ae4caf46385af44971f1eaf02d5ba1c979b7096", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template28.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate28.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,13 @@\n+// Build don't link: \n+// GROUPS passed templates\n+class X {\n+        const char *fptr;\n+public:\n+        X(const char *ptr) { fptr = ptr; }\n+        operator const char*() { return fptr; }\n+};\n+\n+main(){\n+        X x1(\"1234\");\n+        X x2(x1+1);\n+}"}, {"sha": "fa81995ed74d6f4f19711c60a73ed59b42f69102", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template29.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate29.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,12 @@\n+// Build don't link: \n+// GROUPS passed templates\n+   template <class ElementType> class A\n+    { public:\n+       A(ElementType) {}\n+       ElementType get() const ;\n+    };\n+\n+    template <class ElementType> ElementType A<ElementType>::get() const\n+    { return ElementType(0); }\n+\n+    main() { const A<short> a(3); }"}, {"sha": "3900421d12fa2b273211174df5ea8638f004d5d3", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template3.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921e5a0eb4f27bab1d45761abdf877d611c6bc9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate3.C?ref=921e5a0eb4f27bab1d45761abdf877d611c6bc9b", "patch": "@@ -0,0 +1,49 @@\n+// GROUPS passed templates\n+extern \"C\" void printf (char *, ...);\n+extern \"C\" void exit (int);\n+\n+int count = 0;\n+\n+void\n+die (int x)\n+{\n+  if (x != ++count)\n+    {\n+      printf (\"FAIL\\n\");\n+      exit (1);\n+    }\n+}\n+\n+class A {\n+  public:\n+    void   f() const { die (-1); }\n+};\n+\n+\n+template <class Item>\n+class B : public A {\n+  public:\n+  void f() const;\n+};\n+\n+template <class Item>\n+inline void B<Item>::f() const { die (1); }\n+\n+template <class Item>\n+class C : public A {\n+  public:\n+    void f() const { die (2); }\n+};\n+\n+\n+int main()\n+{\n+    B<int> b;\n+    C<int> c;\n+\n+    b.f(); //- bugged, (A::f() called instead of B::f())\n+    c.f(); //- works fine (C::f() called)\n+\n+    printf (\"PASS\\n\");\n+    return 0;\n+}"}]}