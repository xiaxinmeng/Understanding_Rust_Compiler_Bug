{"sha": "db5ae31b195c729dffebe3f057a4d1f5aa43427a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI1YWUzMWIxOTVjNzI5ZGZmZWJlM2YwNTdhNGQxZjVhYTQzNDI3YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-10-22T20:21:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-10-22T20:21:41Z"}, "message": "call.c (build_conditional_expr): Use ocp_convert to force rvalue conversion.\n\n        * call.c (build_conditional_expr): Use ocp_convert to force\n        rvalue conversion.\n\nFrom-SVN: r37009", "tree": {"sha": "4816e341ce34ab64f67e5da8be64fc37119be63e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4816e341ce34ab64f67e5da8be64fc37119be63e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db5ae31b195c729dffebe3f057a4d1f5aa43427a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5ae31b195c729dffebe3f057a4d1f5aa43427a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db5ae31b195c729dffebe3f057a4d1f5aa43427a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5ae31b195c729dffebe3f057a4d1f5aa43427a/comments", "author": null, "committer": null, "parents": [{"sha": "3e555c7de168afdaea775332c81ee925cb66738e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e555c7de168afdaea775332c81ee925cb66738e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e555c7de168afdaea775332c81ee925cb66738e"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "af79984a396b028f7c9cdd83f4dd435d0eee7c5a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ae31b195c729dffebe3f057a4d1f5aa43427a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ae31b195c729dffebe3f057a4d1f5aa43427a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=db5ae31b195c729dffebe3f057a4d1f5aa43427a", "patch": "@@ -3036,16 +3036,21 @@ build_conditional_expr (arg1, arg2, arg3)\n      We need to force the lvalue-to-rvalue conversion here for class types,\n      so we get TARGET_EXPRs; trying to deal with a COND_EXPR of class rvalues\n      that isn't wrapped with a TARGET_EXPR plays havoc with exception\n-     regions.  */\n+     regions.\n+\n+     We use ocp_convert rather than build_user_type_conversion because the\n+     latter returns NULL_TREE on failure, while the former gives an error.  */\n \n   if (IS_AGGR_TYPE (TREE_TYPE (arg2)) && real_lvalue_p (arg2))\n-    arg2 = build_user_type_conversion (TREE_TYPE (arg2), arg2, LOOKUP_NORMAL);\n+    arg2 = ocp_convert (TREE_TYPE (arg2), arg2,\n+\t\t\tCONV_IMPLICIT|CONV_FORCE_TEMP, LOOKUP_NORMAL);\n   else\n     arg2 = decay_conversion (arg2);\n   arg2_type = TREE_TYPE (arg2);\n \n   if (IS_AGGR_TYPE (TREE_TYPE (arg3)) && real_lvalue_p (arg3))\n-    arg3 = build_user_type_conversion (TREE_TYPE (arg3), arg3, LOOKUP_NORMAL);\n+    arg3 = ocp_convert (TREE_TYPE (arg3), arg3,\n+\t\t\tCONV_IMPLICIT|CONV_FORCE_TEMP, LOOKUP_NORMAL);\n   else\n     arg3 = decay_conversion (arg3);\n   arg3_type = TREE_TYPE (arg3);"}, {"sha": "c85a394eec79882191fdf52f322542035bf62469", "filename": "gcc/testsuite/g++.old-deja/g++.other/volatile1.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ae31b195c729dffebe3f057a4d1f5aa43427a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvolatile1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ae31b195c729dffebe3f057a4d1f5aa43427a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvolatile1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvolatile1.C?ref=db5ae31b195c729dffebe3f057a4d1f5aa43427a", "patch": "@@ -0,0 +1,19 @@\n+// Test that failed lvalue-to-rvalue conversion of vf doesn't crash the\n+// compiler.\n+\n+class f_class\n+{ };\t\t\t\t// ERROR - candidates\n+\n+volatile f_class\n+ret_v_f_class()\n+{\n+  f_class t;\n+  return t;\n+}\n+\n+int main(void)\n+{\n+  volatile f_class vf;\n+  0 ? ret_v_f_class() : vf;\t// ERROR - can't copy volatile lvalue\n+  return 0;\n+}"}]}