{"sha": "942ab9e9d4ff1da711daad3e8c71c57fd4c14035", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQyYWI5ZTlkNGZmMWRhNzExZGFhZDNlOGM3MWM1N2ZkNGMxNDAzNQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2020-09-23T14:10:41Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2020-09-24T20:37:10Z"}, "message": "libiberty: Add get_DW_UT_name and update include/dwarf2.{def,h}\n\nThis adds a get_DW_UT_name function to dwarfnames using dwarf2.def\nfor use in binutils readelf to show the unit types in a DWARF5 header.\n\nAlso remove DW_CIE_VERSION which was already removed in binutils/gdb\nand is not used in gcc.\n\ninclude/ChangeLog:\n\n\t* dwarf2.def: Add DWARF5 Unit type header encoding macros\n\tDW_UT_FIRST, DW_UT and DW_UT_END.\n\t* dwarf2.h (enum dwarf_unit_type): Removed and define using\n\tDW_UT_FIRST, DW_UT and DW_UT_END macros.\n\t(DW_CIE_VERSION): Removed.\n\t(get_DW_UT_name): New function declaration.\n\nlibiberty/ChangeLog:\n\n\t* dwarfnames.c (get_DW_UT_name): Define using DW_UT_FIRST, DW_UT\n\tand DW_UT_END.", "tree": {"sha": "074b240025069ca94d348c485cd06febacfda598", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/074b240025069ca94d348c485cd06febacfda598"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/942ab9e9d4ff1da711daad3e8c71c57fd4c14035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/942ab9e9d4ff1da711daad3e8c71c57fd4c14035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/942ab9e9d4ff1da711daad3e8c71c57fd4c14035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/942ab9e9d4ff1da711daad3e8c71c57fd4c14035/comments", "author": null, "committer": null, "parents": [{"sha": "d13c0ae859fbb5bb937692548e5860e4cb39e26b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d13c0ae859fbb5bb937692548e5860e4cb39e26b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d13c0ae859fbb5bb937692548e5860e4cb39e26b"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "13825a3eef7ea5ce3aac790e1082c571cad340ad", "filename": "include/dwarf2.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942ab9e9d4ff1da711daad3e8c71c57fd4c14035/include%2Fdwarf2.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942ab9e9d4ff1da711daad3e8c71c57fd4c14035/include%2Fdwarf2.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdwarf2.def?ref=942ab9e9d4ff1da711daad3e8c71c57fd4c14035", "patch": "@@ -805,3 +805,14 @@ DW_IDX (DW_IDX_hi_user, 0x3fff)\n DW_IDX (DW_IDX_GNU_internal, 0x2000)\n DW_IDX (DW_IDX_GNU_external, 0x2001)\n DW_END_IDX\n+\n+/* DWARF5 Unit type header encodings  */\n+DW_FIRST_UT (DW_UT_compile, 0x01)\n+DW_UT (DW_UT_type, 0x02)\n+DW_UT (DW_UT_partial, 0x03)\n+DW_UT (DW_UT_skeleton, 0x04)\n+DW_UT (DW_UT_split_compile, 0x05)\n+DW_UT (DW_UT_split_type, 0x06)\n+DW_UT (DW_UT_lo_user, 0x80)\n+DW_UT (DW_UT_hi_user, 0xff)\n+DW_END_UT"}, {"sha": "83cf50d7bf53d3c275085d2fa01d04d697330639", "filename": "include/dwarf2.h", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942ab9e9d4ff1da711daad3e8c71c57fd4c14035/include%2Fdwarf2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942ab9e9d4ff1da711daad3e8c71c57fd4c14035/include%2Fdwarf2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdwarf2.h?ref=942ab9e9d4ff1da711daad3e8c71c57fd4c14035", "patch": "@@ -55,6 +55,7 @@\n #define DW_CFA_DUP(name, value) , name = value\n #define DW_IDX(name, value) , name = value\n #define DW_IDX_DUP(name, value) , name = value\n+#define DW_UT(name, value) , name = value\n \n #define DW_FIRST_TAG(name, value) enum dwarf_tag { \\\n   name = value\n@@ -77,6 +78,9 @@\n #define DW_FIRST_IDX(name, value) enum dwarf_name_index_attribute { \\\n   name = value\n #define DW_END_IDX };\n+#define DW_FIRST_UT(name, value) enum dwarf_unit_type { \\\n+  name = value\n+#define DW_END_UT };\n \n #include \"dwarf2.def\"\n \n@@ -94,6 +98,8 @@\n #undef DW_END_CFA\n #undef DW_FIRST_IDX\n #undef DW_END_IDX\n+#undef DW_FIRST_UT\n+#undef DW_END_UT\n \n #undef DW_TAG\n #undef DW_TAG_DUP\n@@ -108,6 +114,7 @@\n #undef DW_CFA_DUP\n #undef DW_IDX\n #undef DW_IDX_DUP\n+#undef DW_UT\n \n /* Flag that tells whether entry has a child or not.  */\n #define DW_children_no   0\n@@ -316,7 +323,6 @@ enum dwarf_location_list_entry_type\n \n #define DW_CIE_ID\t  0xffffffff\n #define DW64_CIE_ID\t  0xffffffffffffffffULL\n-#define DW_CIE_VERSION\t  1\n \n #define DW_CFA_extended   0\n \n@@ -451,19 +457,6 @@ enum dwarf_range_list_entry\n     DW_RLE_start_end = 0x06,\n     DW_RLE_start_length = 0x07\n   };\n-\n-/* Unit types in unit_type unit header field.  */\n-enum dwarf_unit_type\n-  {\n-    DW_UT_compile = 0x01,\n-    DW_UT_type = 0x02,\n-    DW_UT_partial = 0x03,\n-    DW_UT_skeleton = 0x04,\n-    DW_UT_split_compile = 0x05,\n-    DW_UT_split_type = 0x06,\n-    DW_UT_lo_user = 0x80,\n-    DW_UT_hi_user = 0xff\n-  };\n \f\n /* @@@ For use with GNU frame unwind information.  */\n \n@@ -552,6 +545,10 @@ extern const char *get_DW_CFA_name (unsigned int opc);\n    recognized.  */\n extern const char *get_DW_IDX_name (unsigned int idx);\n \n+/* Return the name of a DW_UT_ constant, or NULL if the value is not\n+   recognized.  */\n+extern const char *get_DW_UT_name (unsigned int ut);\n+\n #ifdef __cplusplus\n }\n #endif /* __cplusplus */"}, {"sha": "af11668b431f25093ce5d1efec19c00ecea1c7d9", "filename": "libiberty/dwarfnames.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942ab9e9d4ff1da711daad3e8c71c57fd4c14035/libiberty%2Fdwarfnames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942ab9e9d4ff1da711daad3e8c71c57fd4c14035/libiberty%2Fdwarfnames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fdwarfnames.c?ref=942ab9e9d4ff1da711daad3e8c71c57fd4c14035", "patch": "@@ -64,6 +64,11 @@ Boston, MA 02110-1301, USA.  */\n   switch (idx) {\t\t\t\t\t\\\n   DW_IDX (name, value)\n #define DW_END_IDX } return 0; }\n+#define DW_FIRST_UT(name, value) \\\n+  const char *get_DW_UT_name (unsigned int ut) {\t\\\n+  switch (ut) {\t\t\t\t\t\\\n+  DW_UT (name, value)\n+#define DW_END_UT } return 0; }\n \n #define DW_TAG(name, value) case name: return # name ;\n #define DW_TAG_DUP(name, value)\n@@ -78,6 +83,7 @@ Boston, MA 02110-1301, USA.  */\n #define DW_CFA_DUP(name, value)\n #define DW_IDX(name, value) case name: return # name ;\n #define DW_IDX_DUP(name, value)\n+#define DW_UT(name, value) case name: return # name ;\n \n #include \"dwarf2.def\"\n \n@@ -95,6 +101,7 @@ Boston, MA 02110-1301, USA.  */\n #undef DW_END_CFA\n #undef DW_FIRST_IDX\n #undef DW_END_IDX\n+#undef DW_END_UT\n \n #undef DW_TAG\n #undef DW_TAG_DUP"}]}