{"sha": "03e992aceab3207fa92d26c44dd5b4845f1c23ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNlOTkyYWNlYWIzMjA3ZmE5MmQyNmM0NGRkNWI0ODQ1ZjFjMjNlZA==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2018-09-12T07:27:26Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-09-12T07:27:26Z"}, "message": "[debug] Add -gdescribe-dies\n\nThis patch adds option -gdescribe-dies.  It sets the DW_AT_description\nattribute of dies that do not get a DW_AT_name attribute, to make it easier\nto figure out what the die is describing.\n\nThe option exports the names of artificial variables:\n...\n DIE    0: DW_TAG_variable (0x7fa934dd54b0)\n+  DW_AT_description: \"D.1922\"\n   DW_AT_type: die -> 0 (0x7fa934dd0d70)\n   DW_AT_artificial: 1\n\n...\nwhich can be traced back to gimple dumps:\n...\n  char a[0:D.1922] [value-expr: *a.0];\n...\n\nFurthermore, it adds names to external references:\n...\n DIE    0: DW_TAG_subprogram (0x7fa88b9650f0)\n+DW_AT_description: \"main\"\n DW_AT_abstract_origin: die -> label: vla_1.c.6719312a + 29 (0x7fa88b965140)\n...\nand likewise to DW_TAG_call_site_parameter DIEs.\n\nBootstrapped and reg-tested on x86_64.\n\n2018-09-12  Tom de Vries  <tdevries@suse.de>\n\n\t* common.opt (gdescribe-dies): Add option.\n\t* dwarf2out.c (add_name_and_src_coords_attributes): Add description\n\tattribute for artifical and nameless decls.\n\t(dwarf2out_register_external_die): Add description attribute to\n\texternal reference die.\n\t(add_desc_attribute): New functions.\n\t(gen_subprogram_die): Add description attribute to\n\tDW_TAG_call_site_parameter.\n\t* tree-pretty-print.c (print_generic_expr_to_str): New function.\n\t* tree-pretty-print.h (print_generic_expr_to_str): Declare.\n\t* doc/invoke.texi (@item Debugging Options): Add -gdescribe-dies and\n\t-gno-describe-dies.\n\t(@item -gdescribe-dies): Add.\n\nFrom-SVN: r264229", "tree": {"sha": "4d2f898a8a72ae8a0cc662e8064a1f6e04d02d8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d2f898a8a72ae8a0cc662e8064a1f6e04d02d8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03e992aceab3207fa92d26c44dd5b4845f1c23ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03e992aceab3207fa92d26c44dd5b4845f1c23ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03e992aceab3207fa92d26c44dd5b4845f1c23ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03e992aceab3207fa92d26c44dd5b4845f1c23ed/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28aa63232068fa0adb8911b1987ff9efa0101750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28aa63232068fa0adb8911b1987ff9efa0101750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28aa63232068fa0adb8911b1987ff9efa0101750"}], "stats": {"total": 96, "additions": 95, "deletions": 1}, "files": [{"sha": "de60879ea6cae2069f2a6c4e892106e430279c64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03e992aceab3207fa92d26c44dd5b4845f1c23ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03e992aceab3207fa92d26c44dd5b4845f1c23ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03e992aceab3207fa92d26c44dd5b4845f1c23ed", "patch": "@@ -1,3 +1,19 @@\n+2018-09-12  Tom de Vries  <tdevries@suse.de>\n+\n+\t* common.opt (gdescribe-dies): Add option.\n+\t* dwarf2out.c (add_name_and_src_coords_attributes): Add description\n+\tattribute for artifical and nameless decls.\n+\t(dwarf2out_register_external_die): Add description attribute to\n+\texternal reference die.\n+\t(add_desc_attribute): New functions.\n+\t(gen_subprogram_die): Add description attribute to\n+\tDW_TAG_call_site_parameter.\n+\t* tree-pretty-print.c (print_generic_expr_to_str): New function.\n+\t* tree-pretty-print.h (print_generic_expr_to_str): Declare.\n+\t* doc/invoke.texi (@item Debugging Options): Add -gdescribe-dies and\n+\t-gno-describe-dies.\n+\t(@item -gdescribe-dies): Add.\n+\n 2018-09-12  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* tree-vrp.c (vrp_shift_undefined_p): Remove."}, {"sha": "ef6a63087af0c53889b1e1e85c4c095060402e21", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03e992aceab3207fa92d26c44dd5b4845f1c23ed/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03e992aceab3207fa92d26c44dd5b4845f1c23ed/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=03e992aceab3207fa92d26c44dd5b4845f1c23ed", "patch": "@@ -2976,6 +2976,10 @@ gstrict-dwarf\n Common Driver Report Var(dwarf_strict) Init(0)\n Don't emit DWARF additions beyond selected version.\n \n+gdescribe-dies\n+Common Driver Report Var(flag_describe_dies) Init(0)\n+Add description attributes to some DWARF DIEs that have no name attribute.\n+\n gtoggle\n Common Driver Report Var(flag_gtoggle)\n Toggle debug information generation."}, {"sha": "ec127113356b8c2bc88d15c5f787b53ae03f2ab8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03e992aceab3207fa92d26c44dd5b4845f1c23ed/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03e992aceab3207fa92d26c44dd5b4845f1c23ed/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=03e992aceab3207fa92d26c44dd5b4845f1c23ed", "patch": "@@ -373,7 +373,7 @@ Objective-C and Objective-C++ Dialects}.\n -ginternal-reset-location-views  -gno-internal-reset-location-views @gol\n -ginline-points  -gno-inline-points @gol\n -gvms  -gxcoff  -gxcoff+  -gz@r{[}=@var{type}@r{]} @gol\n--gsplit-dwarf @gol\n+-gsplit-dwarf -gdescribe-dies -gno-describe-dies @gol\n -fdebug-prefix-map=@var{old}=@var{new}  -fdebug-types-section @gol\n -fno-eliminate-unused-debug-types @gol\n -femit-struct-debug-baseonly  -femit-struct-debug-reduced @gol\n@@ -7466,6 +7466,12 @@ the build system to avoid linking files with debug information.  To\n be useful, this option requires a debugger capable of reading @file{.dwo}\n files.\n \n+@item -gdescribe-dies\n+@opindex gdescribe-dies\n+Add description attributes to some DWARF DIEs that have no name attribute,\n+such as artificial variables, external references and call site\n+parameter DIEs.\n+\n @item -gpubnames\n @opindex gpubnames\n Generate DWARF @code{.debug_pubnames} and @code{.debug_pubtypes} sections."}, {"sha": "9e9da30a1fa071e112fe21a42c2308038d236caf", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03e992aceab3207fa92d26c44dd5b4845f1c23ed/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03e992aceab3207fa92d26c44dd5b4845f1c23ed/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=03e992aceab3207fa92d26c44dd5b4845f1c23ed", "patch": "@@ -3816,6 +3816,7 @@ static bool add_location_or_const_value_attribute (dw_die_ref, tree, bool);\n static bool tree_add_const_value_attribute (dw_die_ref, tree);\n static bool tree_add_const_value_attribute_for_decl (dw_die_ref, tree);\n static void add_name_attribute (dw_die_ref, const char *);\n+static void add_desc_attribute (dw_die_ref, tree);\n static void add_gnat_descriptive_type_attribute (dw_die_ref, tree, dw_die_ref);\n static void add_comp_dir_attribute (dw_die_ref);\n static void add_scalar_info (dw_die_ref, enum dwarf_attribute, tree, int,\n@@ -6030,6 +6031,8 @@ dwarf2out_register_external_die (tree decl, const char *sym,\n   else\n     equate_decl_number_to_die (decl, die);\n \n+  add_desc_attribute (die, decl);\n+\n   /* Add a reference to the DIE providing early debug at $sym + off.  */\n   add_AT_external_die_ref (die, DW_AT_abstract_origin, sym, off);\n }\n@@ -20536,6 +20539,52 @@ add_name_attribute (dw_die_ref die, const char *name_string)\n     }\n }\n \n+/* Generate a DW_AT_description attribute given some string value to be included\n+   as the value of the attribute.  */\n+\n+static void\n+add_desc_attribute (dw_die_ref die, const char *name_string)\n+{\n+  if (!flag_describe_dies || (dwarf_version < 3 && dwarf_strict))\n+    return;\n+\n+  if (name_string == NULL || *name_string == 0)\n+    return;\n+\n+  if (demangle_name_func)\n+    name_string = (*demangle_name_func) (name_string);\n+\n+  add_AT_string (die, DW_AT_description, name_string);\n+}\n+\n+/* Generate a DW_AT_description attribute given some decl to be included\n+   as the value of the attribute.  */\n+\n+static void\n+add_desc_attribute (dw_die_ref die, tree decl)\n+{\n+  tree decl_name;\n+\n+  if (!flag_describe_dies || (dwarf_version < 3 && dwarf_strict))\n+    return;\n+\n+  if (decl == NULL_TREE || !DECL_P (decl))\n+    return;\n+  decl_name = DECL_NAME (decl);\n+\n+  if (decl_name != NULL && IDENTIFIER_POINTER (decl_name) != NULL)\n+    {\n+      const char *name = dwarf2_name (decl, 0);\n+      add_desc_attribute (die, name ? name : IDENTIFIER_POINTER (decl_name));\n+    }\n+  else\n+    {\n+      char *desc = print_generic_expr_to_str (decl);\n+      add_desc_attribute (die, desc);\n+      free (desc);\n+    }\n+}\n+\n /* Retrieve the descriptive type of TYPE, if any, make sure it has a\n    DIE and attach a DW_AT_GNAT_descriptive_type attribute to the DIE\n    of TYPE accordingly.\n@@ -21294,12 +21343,17 @@ add_name_and_src_coords_attributes (dw_die_ref die, tree decl,\n       const char *name = dwarf2_name (decl, 0);\n       if (name)\n \tadd_name_attribute (die, name);\n+      else\n+\tadd_desc_attribute (die, decl);\n+\n       if (! DECL_ARTIFICIAL (decl))\n \tadd_src_coords_attributes (die, decl);\n \n       if (!no_linkage_name)\n \tadd_linkage_name (die, decl);\n     }\n+  else\n+    add_desc_attribute (die, decl);\n \n #ifdef VMS_DEBUGGING_INFO\n   /* Get the function's name, as described by its RTL.  This may be different\n@@ -23272,6 +23326,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t      dw_die_ref die = NULL;\n \t      rtx tloc = NULL_RTX, tlocc = NULL_RTX;\n \t      rtx arg, next_arg;\n+\t      tree arg_decl = NULL_TREE;\n \n \t      for (arg = (ca_loc->call_arg_loc_note != NULL_RTX\n \t\t\t  ? XEXP (ca_loc->call_arg_loc_note, 0)\n@@ -23336,6 +23391,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t\t      tdie = lookup_decl_die (tdecl);\n \t\t      if (tdie == NULL)\n \t\t\tcontinue;\n+\t\t      arg_decl = tdecl;\n \t\t    }\n \t\t  else\n \t\t    continue;\n@@ -23352,6 +23408,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t\t    die = gen_call_site_die (decl, subr_die, ca_loc);\n \t\t  cdie = new_die (dwarf_TAG (DW_TAG_call_site_parameter), die,\n \t\t\t\t  NULL_TREE);\n+\t\t  add_desc_attribute (cdie, arg_decl);\n \t\t  if (reg != NULL)\n \t\t    add_AT_loc (cdie, DW_AT_location, reg);\n \t\t  else if (tdie != NULL)"}, {"sha": "2c089b11751b84be97f8544c536f311b915d7016", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03e992aceab3207fa92d26c44dd5b4845f1c23ed/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03e992aceab3207fa92d26c44dd5b4845f1c23ed/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=03e992aceab3207fa92d26c44dd5b4845f1c23ed", "patch": "@@ -162,6 +162,16 @@ print_generic_expr (FILE *file, tree t, dump_flags_t flags)\n   pp_flush (tree_pp);\n }\n \n+/* Print a single expression T to string, and return it.  */\n+\n+char *\n+print_generic_expr_to_str (tree t)\n+{\n+  pretty_printer pp;\n+  dump_generic_node (&pp, t, 0, TDF_VOPS|TDF_MEMSYMS, false);\n+  return xstrdup (pp_formatted_text (&pp));\n+}\n+\n /* Dump NAME, an IDENTIFIER_POINTER, sanitized so that D<num> sequences\n    in it are replaced with Dxxxx, as long as they are at the start or\n    preceded by $ and at the end or followed by $.  See make_fancy_name"}, {"sha": "4de0e090cbaadd73ec14ed26a02105ee94a6c41f", "filename": "gcc/tree-pretty-print.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03e992aceab3207fa92d26c44dd5b4845f1c23ed/gcc%2Ftree-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03e992aceab3207fa92d26c44dd5b4845f1c23ed/gcc%2Ftree-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.h?ref=03e992aceab3207fa92d26c44dd5b4845f1c23ed", "patch": "@@ -38,6 +38,7 @@ extern void print_generic_decl (FILE *, tree, dump_flags_t);\n extern void print_generic_stmt (FILE *, tree, dump_flags_t = TDF_NONE);\n extern void print_generic_stmt_indented (FILE *, tree, dump_flags_t, int);\n extern void print_generic_expr (FILE *, tree, dump_flags_t = TDF_NONE);\n+extern char *print_generic_expr_to_str (tree);\n extern void dump_omp_clauses (pretty_printer *, tree, int, dump_flags_t);\n extern int dump_generic_node (pretty_printer *, tree, int, dump_flags_t, bool);\n extern void print_declaration (pretty_printer *, tree, int, dump_flags_t);"}]}