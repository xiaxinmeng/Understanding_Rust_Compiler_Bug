{"sha": "b1568582a07836b3aa1073d8f5395931061d9cf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE1Njg1ODJhMDc4MzZiM2FhMTA3M2Q4ZjUzOTU5MzEwNjFkOWNmMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-01-31T11:52:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-01-31T11:52:56Z"}, "message": "Fix abi-tag16.C.\n\n\t* mangle.c (maybe_check_abi_tags): New.\n\t(write_guarded_var_name): Call it.\n\t(mangle_ref_init_variable): Call check_abi_tags.\n\nFrom-SVN: r233018", "tree": {"sha": "b2d2fc258fa046108b0579911d89709b16ad0f13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2d2fc258fa046108b0579911d89709b16ad0f13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1568582a07836b3aa1073d8f5395931061d9cf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1568582a07836b3aa1073d8f5395931061d9cf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1568582a07836b3aa1073d8f5395931061d9cf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1568582a07836b3aa1073d8f5395931061d9cf3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b676a0798f55af50365f0cee6351ac7c959bf3d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b676a0798f55af50365f0cee6351ac7c959bf3d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b676a0798f55af50365f0cee6351ac7c959bf3d8"}], "stats": {"total": 77, "additions": 76, "deletions": 1}, "files": [{"sha": "0113e5da6ce7e199818856a8ae53cd0ab035f79f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1568582a07836b3aa1073d8f5395931061d9cf3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1568582a07836b3aa1073d8f5395931061d9cf3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b1568582a07836b3aa1073d8f5395931061d9cf3", "patch": "@@ -1,5 +1,9 @@\n 2016-01-31  Jason Merrill  <jason@redhat.com>\n \n+\t* mangle.c (maybe_check_abi_tags): New.\n+\t(write_guarded_var_name): Call it.\n+\t(mangle_ref_init_variable): Call check_abi_tags.\n+\n \t* pt.c (lookup_template_class_1): Don't share TYPE_ATTRIBUTES\n \tbetween template and instantiation.\n "}, {"sha": "2bb70481d1f15b8fe78e3732811ab79757cd7481", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1568582a07836b3aa1073d8f5395931061d9cf3/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1568582a07836b3aa1073d8f5395931061d9cf3/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=b1568582a07836b3aa1073d8f5395931061d9cf3", "patch": "@@ -3931,6 +3931,30 @@ mangle_conv_op_name_for_type (const tree type)\n   return identifier;\n }\n \n+/* Handle ABI backwards compatibility for past bugs where we didn't call\n+   check_abi_tags in places where it's needed: call check_abi_tags and warn if\n+   it makes a difference.  */\n+\n+static void\n+maybe_check_abi_tags (tree t)\n+{\n+  tree attr = lookup_attribute (\"abi_tag\", DECL_ATTRIBUTES (t));\n+  tree oldtags = NULL_TREE;\n+  if (attr)\n+    oldtags = TREE_VALUE (attr);\n+\n+  check_abi_tags (t);\n+\n+  if (!attr)\n+    attr = lookup_attribute (\"abi_tag\", DECL_ATTRIBUTES (t));\n+  if (attr && TREE_VALUE (attr) != oldtags\n+      && abi_version_crosses (10))\n+    warning_at (DECL_SOURCE_LOCATION (t), OPT_Wabi,\n+\t\t\"the mangled name of the initialization guard variable for\"\n+\t\t\"%qD changes between -fabi-version=%d and -fabi-version=%d\",\n+\t\tt, flag_abi_version, warn_abi_version);\n+}\n+\n /* Write out the appropriate string for this variable when generating\n    another mangled name based on this one.  */\n \n@@ -3943,7 +3967,15 @@ write_guarded_var_name (const tree variable)\n        to the reference, not the temporary.  */\n     write_string (IDENTIFIER_POINTER (DECL_NAME (variable)) + 4);\n   else\n-    write_name (variable, /*ignore_local_scope=*/0);\n+    {\n+      /* Before ABI v10 we were failing to call check_abi_tags here.  So if\n+\t we're in pre-10 mode, wait until after write_name to call it.  */\n+      if (abi_version_at_least (10))\n+\tmaybe_check_abi_tags (variable);\n+      write_name (variable, /*ignore_local_scope=*/0);\n+      if (!abi_version_at_least (10))\n+\tmaybe_check_abi_tags (variable);\n+    }\n }\n \n /* Return an identifier for the name of an initialization guard\n@@ -4007,6 +4039,7 @@ mangle_ref_init_variable (const tree variable)\n {\n   start_mangling (variable);\n   write_string (\"_ZGR\");\n+  check_abi_tags (variable);\n   write_name (variable, /*ignore_local_scope=*/0);\n   /* Avoid name clashes with aggregate initialization of multiple\n      references at once.  */"}, {"sha": "d4fa142762a8cef0e57c0cad4828b22fcd8ed40d", "filename": "gcc/testsuite/g++.dg/abi/abi-tag16.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1568582a07836b3aa1073d8f5395931061d9cf3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1568582a07836b3aa1073d8f5395931061d9cf3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag16.C?ref=b1568582a07836b3aa1073d8f5395931061d9cf3", "patch": "@@ -0,0 +1,19 @@\n+// { dg-options -Wabi=9 }\n+// { dg-final { scan-assembler \"_ZGVZN1N1FEvE4NameB5cxx11\" } }\n+namespace std {\n+  __extension__ inline namespace __cxx11 __attribute__((abi_tag(\"cxx11\"))) {\n+    struct String {\n+      String();\n+    };\n+  }\n+}\n+namespace N {\n+  inline void F() {\n+    {\n+      static std::String Name;\t// { dg-warning \"mangled name\" }\n+    }\n+  }\n+  void F2() {\n+    F();\n+  }\n+}"}, {"sha": "b02e856c91ce08a82d548cc66735b4b78923fc0d", "filename": "gcc/testsuite/g++.dg/abi/abi-tag16a.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1568582a07836b3aa1073d8f5395931061d9cf3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag16a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1568582a07836b3aa1073d8f5395931061d9cf3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag16a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag16a.C?ref=b1568582a07836b3aa1073d8f5395931061d9cf3", "patch": "@@ -0,0 +1,19 @@\n+// { dg-options \"-fabi-version=9 -Wabi\" }\n+// { dg-final { scan-assembler \"_ZGVZN1N1FEvE4Name\" } }\n+namespace std {\n+  __extension__ inline namespace __cxx11 __attribute__((abi_tag(\"cxx11\"))) {\n+    struct String {\n+      String();\n+    };\n+  }\n+}\n+namespace N {\n+  inline void F() {\n+    {\n+      static std::String Name;\t// { dg-warning \"mangled name\" }\n+    }\n+  }\n+  void F2() {\n+    F();\n+  }\n+}"}]}