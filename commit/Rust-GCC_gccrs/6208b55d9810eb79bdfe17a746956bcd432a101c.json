{"sha": "6208b55d9810eb79bdfe17a746956bcd432a101c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIwOGI1NWQ5ODEwZWI3OWJkZmUxN2E3NDY5NTZiY2Q0MzJhMTAxYw==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2003-05-19T08:48:20Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2003-05-19T08:48:20Z"}, "message": "(xstormy16_expand_prologue): Do\tnot mark assignments to the hard frame pointer as being stack frame related.\n\n(xstormy16_expand_prologue): Do\tnot mark assignments to the hard frame pointer\nas being stack frame related.\n(xstormy16_expand_epilogue): Mark adjustments to the stack pointer as being\nstack frame related.\n\nFrom-SVN: r66954", "tree": {"sha": "210ae501573f257c148de34ef9968ffaf0a8e164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/210ae501573f257c148de34ef9968ffaf0a8e164"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6208b55d9810eb79bdfe17a746956bcd432a101c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6208b55d9810eb79bdfe17a746956bcd432a101c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6208b55d9810eb79bdfe17a746956bcd432a101c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6208b55d9810eb79bdfe17a746956bcd432a101c/comments", "author": null, "committer": null, "parents": [{"sha": "27d645f767ac73332b877a94d0bc6d859d4e595b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d645f767ac73332b877a94d0bc6d859d4e595b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d645f767ac73332b877a94d0bc6d859d4e595b"}], "stats": {"total": 57, "additions": 38, "deletions": 19}, "files": [{"sha": "b4aeb336269aa26b2bcc545b18e616a0ad85ff62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6208b55d9810eb79bdfe17a746956bcd432a101c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6208b55d9810eb79bdfe17a746956bcd432a101c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6208b55d9810eb79bdfe17a746956bcd432a101c", "patch": "@@ -1,3 +1,11 @@\n+2003-05-19  Andrew Macleod  <amacleod@redhat.com>\n+\n+\t* config/stormy16/stormy16.c (xstormy16_expand_prologue): Do\n+\tnot mark assignments to the hard frame pointer as being stack\n+\tframe related.\n+\t(xstormy16_expand_epilogue): Mark adjustments to the stack\n+\tpointer as being stack frame related.\n+\n 2003-05-19  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.h (ISA_HAS_LOAD_DELAY, ISA_HAS_XFER_DELAY,"}, {"sha": "6278caa92b89608d82bdc3a9998a27c2fd0e691c", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6208b55d9810eb79bdfe17a746956bcd432a101c/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6208b55d9810eb79bdfe17a746956bcd432a101c/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=6208b55d9810eb79bdfe17a746956bcd432a101c", "patch": "@@ -1127,10 +1127,7 @@ xstormy16_expand_prologue ()\n   /* It's just possible that the SP here might be what we need for\n      the new FP...  */\n   if (frame_pointer_needed && layout.sp_minus_fp == layout.locals_size)\n-    {\n-      insn = emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx);\n-      RTX_FRAME_RELATED_P (insn) = 1;\n-    }\n+    emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx);\n \n   /* Allocate space for local variables.  */\n   if (layout.locals_size)\n@@ -1144,14 +1141,11 @@ xstormy16_expand_prologue ()\n   if (frame_pointer_needed && layout.sp_minus_fp != layout.locals_size)\n     {\n       insn = emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx);\n-      RTX_FRAME_RELATED_P (insn) = 1;\n+\n       if (layout.sp_minus_fp)\n-\t{\n-\t  insn = emit_addhi3_postreload (hard_frame_pointer_rtx,\n-\t\t\t\t\t hard_frame_pointer_rtx,\n-\t\t\t\t\t GEN_INT (-layout.sp_minus_fp));\n-\t  RTX_FRAME_RELATED_P (insn) = 1;\n-\t}\n+\temit_addhi3_postreload (hard_frame_pointer_rtx,\n+\t\t\t\thard_frame_pointer_rtx,\n+\t\t\t\tGEN_INT (-layout.sp_minus_fp));\n     }\n }\n \n@@ -1175,7 +1169,7 @@ void\n xstormy16_expand_epilogue ()\n {\n   struct xstormy16_stack_layout layout;\n-  rtx mem_pop_rtx;\n+  rtx mem_pop_rtx, insn;\n   int regno;\n   const int ifun = xstormy16_interrupt_function_p ();\n   \n@@ -1190,19 +1184,36 @@ xstormy16_expand_epilogue ()\n       if (frame_pointer_needed && layout.sp_minus_fp == layout.locals_size)\n \temit_move_insn (stack_pointer_rtx, hard_frame_pointer_rtx);\n       else\n-\temit_addhi3_postreload (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\tGEN_INT (- layout.locals_size));\n+        {\n+\t  insn = emit_addhi3_postreload (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t\t\t GEN_INT (- layout.locals_size));\n+\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t}\n     }\n \n   /* Restore any call-saved registers.  */\n   for (regno = FIRST_PSEUDO_REGISTER - 1; regno >= 0; regno--)\n     if (REG_NEEDS_SAVE (regno, ifun))\n-      emit_move_insn (gen_rtx_REG (HImode, regno), mem_pop_rtx);\n+      {\n+        rtx dwarf;\n+\n+\tinsn = emit_move_insn (gen_rtx_REG (HImode, regno), mem_pop_rtx);\n+\tRTX_FRAME_RELATED_P (insn) = 1;\n+\tdwarf = gen_rtx_SET (Pmode, stack_pointer_rtx,\n+\t\t\t     plus_constant (stack_pointer_rtx,\n+\t\t\t\t\t    -GET_MODE_SIZE (Pmode)));\n+\tREG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n+\t\t\t\t\t      dwarf,\n+\t\t\t\t\t      REG_NOTES (insn));\n+      }\n   \n   /* Pop the stack for the stdarg save area.  */\n   if (layout.stdarg_save_size)\n-    emit_addhi3_postreload (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t    GEN_INT (- layout.stdarg_save_size));\n+    {\n+      insn = emit_addhi3_postreload (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t\t     GEN_INT (- layout.stdarg_save_size));\n+      RTX_FRAME_RELATED_P (insn) = 1;\n+    }\n \n   /* Return.  */\n   if (ifun)\n@@ -1557,9 +1568,9 @@ xstormy16_asm_output_mi_thunk (file, thunk_fndecl, delta,\n \n /* Output constructors and destructors.  Just like \n    default_named_section_asm_out_* but don't set the sections writable.  */\n-#undef TARGET_ASM_CONSTRUCTOR\n+#undef  TARGET_ASM_CONSTRUCTOR\n #define TARGET_ASM_CONSTRUCTOR xstormy16_asm_out_constructor\n-#undef TARGET_ASM_DESTRUCTOR\n+#undef  TARGET_ASM_DESTRUCTOR\n #define TARGET_ASM_DESTRUCTOR xstormy16_asm_out_destructor\n \n static void"}]}