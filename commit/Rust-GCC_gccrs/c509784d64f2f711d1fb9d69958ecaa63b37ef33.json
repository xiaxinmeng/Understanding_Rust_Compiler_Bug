{"sha": "c509784d64f2f711d1fb9d69958ecaa63b37ef33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUwOTc4NGQ2NGYyZjcxMWQxZmI5ZDY5OTU4ZWNhYTYzYjM3ZWYzMw==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2004-09-08T18:48:56Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-09-08T18:48:56Z"}, "message": "bitfield-2.m: Make 'id' definition a typedef.\n\n[gcc/testsuite/ChangeLog]\n2004-09-08  Ziemowit Laski  <zlaski@apple.com>\n\n\t* objc.dg/bitfield-2.m: Make 'id' definition a typedef.\n\t* obj.dg/bitfield-4.m: Allow 'unsigned' in addition to 'unsigned int'\n\tin error message.\n\t* objc.dg/id-1.m: Attempt to define 'id' in an incompatible fashion.\n\t* objc.dg/method-6.m: Allow 'unsigned' in addition to 'unsigned int'\n\tin error message.\n\t* objc.dg/proto-qual-1.m: Protocol qualifiers now appear before the\n\ttypes they qualify.\n\t* objc.dg/type-size-2.m: Fix wording in comment.\n\t* objc.dg/va-meth-1.m: New test case.\n\nFrom-SVN: r87196", "tree": {"sha": "0c5565d9ae431cbdfdb18491b49e823a7e3e57dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c5565d9ae431cbdfdb18491b49e823a7e3e57dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c509784d64f2f711d1fb9d69958ecaa63b37ef33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c509784d64f2f711d1fb9d69958ecaa63b37ef33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c509784d64f2f711d1fb9d69958ecaa63b37ef33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c509784d64f2f711d1fb9d69958ecaa63b37ef33/comments", "author": null, "committer": null, "parents": [{"sha": "6cdd56724aff3adc4bef1b5441526d84ddb6d2cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cdd56724aff3adc4bef1b5441526d84ddb6d2cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cdd56724aff3adc4bef1b5441526d84ddb6d2cb"}], "stats": {"total": 104, "additions": 93, "deletions": 11}, "files": [{"sha": "05dfa724e99a8f7d089173b4e3e71ae2347ca450", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c509784d64f2f711d1fb9d69958ecaa63b37ef33/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c509784d64f2f711d1fb9d69958ecaa63b37ef33/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c509784d64f2f711d1fb9d69958ecaa63b37ef33", "patch": "@@ -1,3 +1,16 @@\n+2004-09-08  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* objc.dg/bitfield-2.m: Make 'id' definition a typedef.\n+\t* obj.dg/bitfield-4.m: Allow 'unsigned' in addition to 'unsigned int'\n+\tin error message.\n+\t* objc.dg/id-1.m: Attempt to define 'id' in an incompatible fashion.\n+\t* objc.dg/method-6.m: Allow 'unsigned' in addition to 'unsigned int'\n+\tin error message.\n+\t* objc.dg/proto-qual-1.m: Protocol qualifiers now appear before the\n+\ttypes they qualify.\n+\t* objc.dg/type-size-2.m: Fix wording in comment.\n+\t* objc.dg/va-meth-1.m: New test case.\n+\n 2004-09-06  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR c/16633:"}, {"sha": "6875c6c4d8748837fd0d359cc0095bfc19105dc3", "filename": "gcc/testsuite/objc.dg/bitfield-2.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c509784d64f2f711d1fb9d69958ecaa63b37ef33/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c509784d64f2f711d1fb9d69958ecaa63b37ef33/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-2.m?ref=c509784d64f2f711d1fb9d69958ecaa63b37ef33", "patch": "@@ -4,7 +4,7 @@\n /* { dg-options \"-fnext-runtime -fsigned-char\" } */\n /* { dg-do run { target *-*-darwin* } } */\n \n-struct objc_object { struct objc_class *class_pointer; } *id;\n+typedef struct objc_object { struct objc_class *class_pointer; } *id;\n \n extern void abort(void);\n extern int strcmp(const char *, const char *);"}, {"sha": "4883497e8bb8b72446cc7b2ad7b559b372801cc5", "filename": "gcc/testsuite/objc.dg/bitfield-4.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c509784d64f2f711d1fb9d69958ecaa63b37ef33/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c509784d64f2f711d1fb9d69958ecaa63b37ef33/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-4.m?ref=c509784d64f2f711d1fb9d69958ecaa63b37ef33", "patch": "@@ -19,11 +19,10 @@ @interface WithBitfields: Base {\n @implementation WithBitfields {\n   char *isa;  /* { dg-error \"conflicting instance variable type .char \\\\*isa.\" } */\n   /* { dg-error \"previous declaration of .void \\\\*isa.\" \"\" { target *-*-* } 12 } */\n-  unsigned a: 5;  /* { dg-error \"conflicting instance variable type .unsigned a: 5.\" } */\n-  /* { dg-error \"previous declaration of .unsigned a: 3.\" \"\" { target *-*-* } 13 } */                     \n+  unsigned a: 5;  /* { dg-error \"conflicting instance variable type .unsigned( int)? a: 5.\" } */\n+  /* { dg-error \"previous declaration of .unsigned( int)? a: 3.\" \"\" { target *-*-* } 13 } */                     \n   signed b: 4;  /* This one is fine. */\n   int c: 3;  /* { dg-error \"conflicting instance variable type .int c: 3.\" } */\n   /* { dg-error \"previous declaration of .int c: 5.\" \"\" { target *-*-* } 15 } */ \n }\n @end\n-"}, {"sha": "ceb4d898131cc27947892bf488cf9a3b49000fef", "filename": "gcc/testsuite/objc.dg/id-1.m", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c509784d64f2f711d1fb9d69958ecaa63b37ef33/gcc%2Ftestsuite%2Fobjc.dg%2Fid-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c509784d64f2f711d1fb9d69958ecaa63b37ef33/gcc%2Ftestsuite%2Fobjc.dg%2Fid-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fid-1.m?ref=c509784d64f2f711d1fb9d69958ecaa63b37ef33", "patch": "@@ -1,6 +1,7 @@\n-/* Test the id type warning.  */\n+/* Test attempt to redefine 'id' in an incompatible fashion.  */\n /* { dg-do compile } */\n \n-typedef int id;\n+typedef int id;  /* { dg-error \"conflicting types for .id.\" } */\n+/* { dg-error \"previous declaration of .id. was here\" \"\" { target *-*-* } 0 } */\n \n-id b; /* { dg-warning \"nexpected type for `id'\" } */\n+id b;"}, {"sha": "8bed64bee1a5f94f49cd44762aa4cea0522195ef", "filename": "gcc/testsuite/objc.dg/method-6.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c509784d64f2f711d1fb9d69958ecaa63b37ef33/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c509784d64f2f711d1fb9d69958ecaa63b37ef33/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m?ref=c509784d64f2f711d1fb9d69958ecaa63b37ef33", "patch": "@@ -19,7 +19,7 @@ void foo(void) {\n   Class receiver;\n \n   [receiver port];  /* { dg-warning \"multiple methods named .\\\\+port. found\" } */\n-       /* { dg-warning \"using .\\\\-\\\\(unsigned\\\\)port.\" \"\" { target *-*-* } 9 } */\n+       /* { dg-warning \"using .\\\\-\\\\(unsigned( int)?\\\\)port.\" \"\" { target *-*-* } 9 } */\n        /* { dg-warning \"also found .\\\\+\\\\(Protocol \\\\*\\\\)port.\" \"\" { target *-*-* } 14 } */\n \n   [receiver starboard];  /* { dg-warning \".Class. may not respond to .\\\\+starboard.\" } */"}, {"sha": "126bae76e8915405f2823019dc155a995112d7c3", "filename": "gcc/testsuite/objc.dg/proto-qual-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c509784d64f2f711d1fb9d69958ecaa63b37ef33/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-qual-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c509784d64f2f711d1fb9d69958ecaa63b37ef33/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-qual-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-qual-1.m?ref=c509784d64f2f711d1fb9d69958ecaa63b37ef33", "patch": "@@ -43,10 +43,10 @@ static void scan_initial(const char *pattern) {\n \n int main(void) {\n   meth = [proto descriptionForInstanceMethod: @selector(address:with:)];\n-  scan_initial(\"O@%u@%u:%uNR@%uo^^S%u\");\n+  scan_initial(\"O@%u@%u:%uRN@%uo^^S%u\");\n   CHECK_IF(offs3 == offs2 + aligned_sizeof(id) && totsize == offs3 + aligned_sizeof(unsigned));\n   meth = [proto descriptionForClassMethod: @selector(retainArgument:with:)];\n-  scan_initial(\"Vv%u@%u:%uOo@%un^*%u\");\n+  scan_initial(\"Vv%u@%u:%uoO@%un^*%u\");\n   CHECK_IF(offs3 == offs2 + aligned_sizeof(id) && totsize == offs3 + aligned_sizeof(char **));\n   return 0;\n }"}, {"sha": "da6bdb8f9fb3ce2dac64293a6a8fda1e288122ae", "filename": "gcc/testsuite/objc.dg/type-size-2.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c509784d64f2f711d1fb9d69958ecaa63b37ef33/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c509784d64f2f711d1fb9d69958ecaa63b37ef33/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-2.m?ref=c509784d64f2f711d1fb9d69958ecaa63b37ef33", "patch": "@@ -1,6 +1,6 @@\n /* Make sure that array arguments to methods are given the size of pointers.  */\n /* As in the case of ivars, arrays without size (e.g., 'int []') are\n-   encoded as pointers as well.  */\n+   encoded as pointers.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do run } */\n "}, {"sha": "751b6484545d2fa47d5044ddd0a059d43416c21d", "filename": "gcc/testsuite/objc.dg/va-meth-1.m", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c509784d64f2f711d1fb9d69958ecaa63b37ef33/gcc%2Ftestsuite%2Fobjc.dg%2Fva-meth-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c509784d64f2f711d1fb9d69958ecaa63b37ef33/gcc%2Ftestsuite%2Fobjc.dg%2Fva-meth-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fva-meth-1.m?ref=c509784d64f2f711d1fb9d69958ecaa63b37ef33", "patch": "@@ -0,0 +1,69 @@\n+/* Based on objc/execute/va_method.m, by Nicola Pero */\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+#include <stdarg.h>\n+#include <stdlib.h>\n+\n+/* Test methods with \"C-style\" trailing arguments, with or without ellipsis. */\n+\n+@interface MathClass: Object\n+/* sum positive numbers; -1 ends the list */\n++ (int) sum: (int)firstNumber, int secondNumber, ...;\n++ (int) prod: (int) firstNumber, int secondNumber, int thirdNumber;\n++ (int) minimum: (int) firstNumber, ...;\n+@end\n+\n+@implementation MathClass\n++ (int) sum: (int)firstNumber, int secondNumber, ...\n+{\n+  va_list ap;\n+  int sum = 0, number = 0;\n+\n+  va_start (ap, secondNumber);\n+  number = firstNumber + secondNumber;\n+\n+  while (number >= 0)\n+    {\n+      sum += number;\n+      number = va_arg (ap, int);\n+    }\n+  \n+  va_end (ap);\n+\n+  return sum;\n+}\n++ (int) prod: (int) firstNumber, int secondNumber, int thirdNumber {\n+  return firstNumber * secondNumber * thirdNumber;\n+}\n++ (int) minimum: (int)firstNumber, ...\n+{\n+  va_list ap;\n+  int minimum = 999, number = 0;\n+  \n+  va_start (ap, firstNumber);\n+  number = firstNumber;\n+  \n+  while (number >= 0)\n+    {\n+      minimum = (minimum < number ? minimum: number);\n+      number = va_arg (ap, int);\n+    }\n+  \n+  va_end (ap);\n+  \n+  return minimum;\n+}\n+@end\n+\n+int main (void)\n+{\n+  if ([MathClass sum: 1, 2, 3, 4, 5, -1] != 15)\n+      abort ();\n+  if ([MathClass prod: 4, 5, 6] != 120)\n+      abort ();\n+  if ([MathClass minimum: 17, 9, 133, 84, 35, -1] != 9)\n+      abort ();\n+  \n+  return 0;\n+}"}]}