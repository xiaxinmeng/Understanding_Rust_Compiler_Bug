{"sha": "5e50b799a0b6234bfb36584ee81733d7a1a299b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU1MGI3OTlhMGI2MjM0YmZiMzY1ODRlZTgxNzMzZDdhMWEyOTliNA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-12-02T17:44:28Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-12-02T17:44:28Z"}, "message": "ia64.h (PRINT_OPERAND, [...]): Remove macros.\n\n\t* config/ia64/ia64.h (PRINT_OPERAND, PRINT_OPERAND_ADDRESS,\n\tPRINT_OPERAND_PUNCT_VALID_P): Remove macros.\n\t* config/ia64/ia64-protos.h (ia64_print_operand,\n\tia64_print_operand_address): Remove.\n\t* config/ia64/ia64.c (TARGET_PRINT_OPERAND,\n\tTARGET_PRINT_OPERAND_ADDRESS, TARGET_PRINT_OPERAND_PUNCT_VALID_P):\n\tDefine.\n\t(ia64_print_operand_punct_valid_p): New function.\n\t(ia64_print_operand, ia64_print_operand_address): Make static.\n\nFrom-SVN: r181932", "tree": {"sha": "cf31885245db48ffac43e38a0bf9d79f81217da8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf31885245db48ffac43e38a0bf9d79f81217da8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e50b799a0b6234bfb36584ee81733d7a1a299b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e50b799a0b6234bfb36584ee81733d7a1a299b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e50b799a0b6234bfb36584ee81733d7a1a299b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e50b799a0b6234bfb36584ee81733d7a1a299b4/comments", "author": null, "committer": null, "parents": [{"sha": "f5ca3c3408f6675f7171dd7fa7d827df8d851581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5ca3c3408f6675f7171dd7fa7d827df8d851581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5ca3c3408f6675f7171dd7fa7d827df8d851581"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "d3549485dc8c2fc2349966a8b7ebdb90d928bde9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e50b799a0b6234bfb36584ee81733d7a1a299b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e50b799a0b6234bfb36584ee81733d7a1a299b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e50b799a0b6234bfb36584ee81733d7a1a299b4", "patch": "@@ -1,3 +1,15 @@\n+2011-12-02  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/ia64/ia64.h (PRINT_OPERAND, PRINT_OPERAND_ADDRESS,\n+\tPRINT_OPERAND_PUNCT_VALID_P): Remove macros.\n+\t* config/ia64/ia64-protos.h (ia64_print_operand,\n+\tia64_print_operand_address): Remove.\n+\t* config/ia64/ia64.c (TARGET_PRINT_OPERAND,\n+\tTARGET_PRINT_OPERAND_ADDRESS, TARGET_PRINT_OPERAND_PUNCT_VALID_P):\n+\tDefine.\n+\t(ia64_print_operand_punct_valid_p): New function.\n+\t(ia64_print_operand, ia64_print_operand_address): Make static.\n+\n 2011-12-02  Michael Meissner  <meissner@the-meissners.org>\n \n \tPR target/51390"}, {"sha": "a680c31bc3ccd94455ea9bd1846c8c148e6123d1", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e50b799a0b6234bfb36584ee81733d7a1a299b4/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e50b799a0b6234bfb36584ee81733d7a1a299b4/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=5e50b799a0b6234bfb36584ee81733d7a1a299b4", "patch": "@@ -58,8 +58,6 @@ extern int ia64_direct_return (void);\n extern bool ia64_expand_load_address (rtx, rtx);\n extern int ia64_hard_regno_rename_ok (int, int);\n \n-extern void ia64_print_operand_address (FILE *, rtx);\n-extern void ia64_print_operand (FILE *, rtx, int);\n extern enum reg_class ia64_secondary_reload_class (enum reg_class,\n \t\t\t\t\t\t   enum machine_mode, rtx);\n extern const char *get_bundle_name (int);"}, {"sha": "64bd999bf53f41a5b29ed69decfb43a4427835d9", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e50b799a0b6234bfb36584ee81733d7a1a299b4/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e50b799a0b6234bfb36584ee81733d7a1a299b4/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=5e50b799a0b6234bfb36584ee81733d7a1a299b4", "patch": "@@ -234,6 +234,10 @@ static void ia64_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void ia64_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void ia64_output_function_end_prologue (FILE *);\n \n+static void ia64_print_operand (FILE *, rtx, int);\n+static void ia64_print_operand_address (FILE *, rtx);\n+static bool ia64_print_operand_punct_valid_p (unsigned char code);\n+\n static int ia64_issue_rate (void);\n static int ia64_adjust_cost_2 (rtx, int, rtx, int, dw_t);\n static void ia64_sched_init (FILE *, int, int);\n@@ -383,6 +387,13 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE ia64_output_function_epilogue\n \n+#undef TARGET_PRINT_OPERAND\n+#define TARGET_PRINT_OPERAND ia64_print_operand\n+#undef TARGET_PRINT_OPERAND_ADDRESS\n+#define TARGET_PRINT_OPERAND_ADDRESS ia64_print_operand_address\n+#undef TARGET_PRINT_OPERAND_PUNCT_VALID_P\n+#define TARGET_PRINT_OPERAND_PUNCT_VALID_P ia64_print_operand_punct_valid_p\n+\n #undef TARGET_IN_SMALL_DATA_P\n #define TARGET_IN_SMALL_DATA_P  ia64_in_small_data_p\n \n@@ -4966,7 +4977,7 @@ ia64_output_dwarf_dtprel (FILE *file, int size, rtx x)\n /* ??? Do we need this?  It gets used only for 'a' operands.  We could perhaps\n    also call this from ia64_print_operand for memory addresses.  */\n \n-void\n+static void\n ia64_print_operand_address (FILE * stream ATTRIBUTE_UNUSED,\n \t\t\t    rtx address ATTRIBUTE_UNUSED)\n {\n@@ -4997,7 +5008,7 @@ ia64_print_operand_address (FILE * stream ATTRIBUTE_UNUSED,\n \tLinux kernel.\n    v    Print vector constant value as an 8-byte integer value.  */\n \n-void\n+static void\n ia64_print_operand (FILE * file, rtx x, int code)\n {\n   const char *str;\n@@ -5284,6 +5295,14 @@ ia64_print_operand (FILE * file, rtx x, int code)\n \n   return;\n }\n+\n+/* Worker function for TARGET_PRINT_OPERAND_PUNCT_VALID_P.  */\n+\n+static bool\n+ia64_print_operand_punct_valid_p (unsigned char code)\n+{\n+  return (code == '+' || code == ',');\n+}\n \f\n /* Compute a (partial) cost for rtx X.  Return true if the complete\n    cost has been computed, and false if subexpressions should be"}, {"sha": "134f5bef0d33518ce1722f0c441a676a53290320", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e50b799a0b6234bfb36584ee81733d7a1a299b4/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e50b799a0b6234bfb36584ee81733d7a1a299b4/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=5e50b799a0b6234bfb36584ee81733d7a1a299b4", "patch": "@@ -1512,27 +1512,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   { \"loc79\", LOC_REG (79) }, \t\t\t\t\t\t\\\n }\n \n-/* A C compound statement to output to stdio stream STREAM the assembler syntax\n-   for an instruction operand X.  X is an RTL expression.  */\n-\n-#define PRINT_OPERAND(STREAM, X, CODE) \\\n-  ia64_print_operand (STREAM, X, CODE)\n-\n-/* A C expression which evaluates to true if CODE is a valid punctuation\n-   character for use in the `PRINT_OPERAND' macro.  */\n-\n-/* ??? Keep this around for now, as we might need it later.  */\n-\n-#define PRINT_OPERAND_PUNCT_VALID_P(CODE) \\\n-  ((CODE) == '+' || (CODE) == ',')\n-\n-/* A C compound statement to output to stdio stream STREAM the assembler syntax\n-   for an instruction operand that is a memory reference whose address is X.  X\n-   is an RTL expression.  */\n-\n-#define PRINT_OPERAND_ADDRESS(STREAM, X) \\\n-  ia64_print_operand_address (STREAM, X)\n-\n /* If defined, C string expressions to be used for the `%R', `%L', `%U', and\n    `%I' options of `asm_fprintf' (see `final.c').  */\n "}]}