{"sha": "60de8907d1ad3bb0c8f5943133a4af2702259b70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBkZTg5MDdkMWFkM2JiMGM4ZjU5NDMxMzNhNGFmMjcwMjI1OWI3MA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-06-17T21:51:55Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-06-17T21:51:55Z"}, "message": "re PR rtl-optimization/39871 (Code size increase on ARM due to poor register allocation)\n\n\tPR rtl-optimization/39871\n\t* reload1.c (init_eliminable_invariants): For flag_pic, disable\n\tequivalences only for constants that aren't LEGITIMATE_PIC_OPERAND_P.\n\t(function_invariant_p): Rule out a plus of frame or arg pointer with\n\ta SYMBOL_REF.\n\t* ira.c (find_reg_equiv_invariant_const): Likewise.\n\nFrom-SVN: r160947", "tree": {"sha": "f547304e22d7c081d8d210454f60cf572f474b9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f547304e22d7c081d8d210454f60cf572f474b9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60de8907d1ad3bb0c8f5943133a4af2702259b70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60de8907d1ad3bb0c8f5943133a4af2702259b70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60de8907d1ad3bb0c8f5943133a4af2702259b70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60de8907d1ad3bb0c8f5943133a4af2702259b70/comments", "author": null, "committer": null, "parents": [{"sha": "d398d9033ab546ac985784ed07051b3f22126d91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d398d9033ab546ac985784ed07051b3f22126d91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d398d9033ab546ac985784ed07051b3f22126d91"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "78dfa0413fd32b1b02b66d3c9b8ba9f5d1abf6f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60de8907d1ad3bb0c8f5943133a4af2702259b70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60de8907d1ad3bb0c8f5943133a4af2702259b70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60de8907d1ad3bb0c8f5943133a4af2702259b70", "patch": "@@ -1,3 +1,12 @@\n+2010-06-17  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\tPR rtl-optimization/39871\n+\t* reload1.c (init_eliminable_invariants): For flag_pic, disable\n+\tequivalences only for constants that aren't LEGITIMATE_PIC_OPERAND_P.\n+\t(function_invariant_p): Rule out a plus of frame or arg pointer with\n+\ta SYMBOL_REF.\n+\t* ira.c (find_reg_equiv_invariant_const): Likewise.\n+\n 2010-06-17  Gunther Nikl  <gnikl@users.sourceforge.net>\n \n \t* config/rs6000/rs6000.c (print_operand) <'K'>: Also use"}, {"sha": "83a4358e4eb35e939202d75d6c56c3189e85dbc7", "filename": "gcc/ira.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60de8907d1ad3bb0c8f5943133a4af2702259b70/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60de8907d1ad3bb0c8f5943133a4af2702259b70/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=60de8907d1ad3bb0c8f5943133a4af2702259b70", "patch": "@@ -1586,12 +1586,8 @@ find_reg_equiv_invariant_const (void)\n \n \t  x = XEXP (note, 0);\n \n-\t  if (! function_invariant_p (x)\n-\t      || ! flag_pic\n-\t      /* A function invariant is often CONSTANT_P but may\n-\t\t include a register.  We promise to only pass CONSTANT_P\n-\t\t objects to LEGITIMATE_PIC_OPERAND_P.  */\n-\t      || (CONSTANT_P (x) && LEGITIMATE_PIC_OPERAND_P (x)))\n+\t  if (! CONSTANT_P (x)\n+\t      || ! flag_pic || LEGITIMATE_PIC_OPERAND_P (x))\n \t    {\n \t      /* It can happen that a REG_EQUIV note contains a MEM\n \t\t that is not a legitimate memory operand.  As later"}, {"sha": "00d4c99b6c08d398a9a46fa04ef5741f12eefeeb", "filename": "gcc/reload1.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60de8907d1ad3bb0c8f5943133a4af2702259b70/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60de8907d1ad3bb0c8f5943133a4af2702259b70/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=60de8907d1ad3bb0c8f5943133a4af2702259b70", "patch": "@@ -4151,13 +4151,9 @@ init_eliminable_invariants (rtx first, bool do_subregs)\n \t  if (i <= LAST_VIRTUAL_REGISTER)\n \t    continue;\n \n-\t  if (! function_invariant_p (x)\n-\t      || ! flag_pic\n-\t      /* A function invariant is often CONSTANT_P but may\n-\t\t include a register.  We promise to only pass\n-\t\t CONSTANT_P objects to LEGITIMATE_PIC_OPERAND_P.  */\n-\t      || (CONSTANT_P (x)\n-\t\t  && LEGITIMATE_PIC_OPERAND_P (x)))\n+\t  /* If flag_pic and we have constant, verify it's legitimate.  */\n+\t  if (!CONSTANT_P (x)\n+\t      || !flag_pic || LEGITIMATE_PIC_OPERAND_P (x))\n \t    {\n \t      /* It can happen that a REG_EQUIV note contains a MEM\n \t\t that is not a legitimate memory operand.  As later\n@@ -6004,7 +6000,7 @@ function_invariant_p (const_rtx x)\n     return 1;\n   if (GET_CODE (x) == PLUS\n       && (XEXP (x, 0) == frame_pointer_rtx || XEXP (x, 0) == arg_pointer_rtx)\n-      && CONSTANT_P (XEXP (x, 1)))\n+      && GET_CODE (XEXP (x, 1)) == CONST_INT)\n     return 1;\n   return 0;\n }"}]}