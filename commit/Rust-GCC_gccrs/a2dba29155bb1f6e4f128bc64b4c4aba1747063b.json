{"sha": "a2dba29155bb1f6e4f128bc64b4c4aba1747063b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJkYmEyOTE1NWJiMWY2ZTRmMTI4YmM2NGI0YzRhYmExNzQ3MDYzYg==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-08-17T23:12:16Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-08-17T23:12:16Z"}, "message": "rs6000.md (leu<mode>): Convert to mode macro.\n\n        * config/rs6000/rs6000.md (leu<mode>): Convert to mode macro.\n        (leu<mode>_compare): Same.\n        (plus_leu<mode>): Same.\n        (neg_leu<mode>): Same.\n        (and_neg_leu<mode): Same.\n        (ltu<mode>_compare): Same.\n        (plus_ltu<mode>): Same.\n        (geu<mode>): Same.\n        (geu<mode>_compare): Same.\n        (plus_geu<mode>): Same.\n        (neg_geu<mode>): Same.\n        (and_neg_geu<mode>): Same.\n        (plus_gt<mode>): Same.\n        (gtu<mode>_compare): Same.\n        (plus_gtu<mode>): Same.\n\nFrom-SVN: r103233", "tree": {"sha": "abbe0f97de8d02c9a18cfaedf99e7cb5395eb7ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abbe0f97de8d02c9a18cfaedf99e7cb5395eb7ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2dba29155bb1f6e4f128bc64b4c4aba1747063b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2dba29155bb1f6e4f128bc64b4c4aba1747063b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2dba29155bb1f6e4f128bc64b4c4aba1747063b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2dba29155bb1f6e4f128bc64b4c4aba1747063b/comments", "author": null, "committer": null, "parents": [{"sha": "aa29dfeb7034a6a7330a55cb5ef387318f06afa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa29dfeb7034a6a7330a55cb5ef387318f06afa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa29dfeb7034a6a7330a55cb5ef387318f06afa7"}], "stats": {"total": 405, "additions": 137, "deletions": 268}, "files": [{"sha": "54d2fac793fc3a90677f23373f2dae9b9d4d1f80", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dba29155bb1f6e4f128bc64b4c4aba1747063b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dba29155bb1f6e4f128bc64b4c4aba1747063b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2dba29155bb1f6e4f128bc64b4c4aba1747063b", "patch": "@@ -1,3 +1,21 @@\n+2005-08-17  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.md (leu<mode>): Convert to mode macro.\n+\t(leu<mode>_compare): Same.\n+\t(plus_leu<mode>): Same.\n+\t(neg_leu<mode>): Same.\n+\t(and_neg_leu<mode): Same.\n+\t(ltu<mode>_compare): Same.\n+\t(plus_ltu<mode>): Same.\n+\t(geu<mode>): Same.\n+\t(geu<mode>_compare): Same.\n+\t(plus_geu<mode>): Same.\n+\t(neg_geu<mode>): Same.\n+\t(and_neg_geu<mode>): Same.\n+\t(plus_gt<mode>): Same.\n+\t(gtu<mode>_compare): Same.\n+\t(plus_gtu<mode>): Same.\n+\n 2005-08-17  Erik Christiansen  <erik@dd.nec.com.au>\n \t\n \t* config/v850/lib1funcs.asm (callt_save_interrupt): Fix comment typos.\n@@ -18,7 +36,7 @@\n \n 2005-08-17  J\"orn Rennecke <joern.rennecke@st.com>\n \n-\t* varasm.c (decode_reg_name): Skip empty aqdditional register names.\n+\t* varasm.c (decode_reg_name): Skip empty additional register names.\n \n 2005-08-16  Zdenek Dvorak  <dvorakz@suse.cz>\n "}, {"sha": "ad7beba6d2627bed3df031c9e2b7ed3544b23899", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 118, "deletions": 267, "changes": 385, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dba29155bb1f6e4f128bc64b4c4aba1747063b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dba29155bb1f6e4f128bc64b4c4aba1747063b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a2dba29155bb1f6e4f128bc64b4c4aba1747063b", "patch": "@@ -11658,64 +11658,24 @@\n    {ai|addic} %0,%1,-1\\;{aze|addze} %0,%0\\;{srai|srawi} %0,%0,31\"\n   [(set_attr \"length\" \"12\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(leu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"rI\")))]\n-  \"TARGET_32BIT\"\n+(define_insn \"*leu<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(leu:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n+\t       (match_operand:P 2 \"reg_or_short_operand\" \"rI\")))]\n+  \"\"\n   \"{sf%I2|subf%I2c} %0,%1,%2\\;{cal %0,0(0)|li %0,0}\\;{ae|adde} %0,%0,%0\"\n   [(set_attr \"type\" \"three\")\n    (set_attr \"length\" \"12\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(leu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t(match_operand:DI 2 \"reg_or_short_operand\" \"rI\")))]\n-  \"TARGET_64BIT\"\n-  \"subf%I2c %0,%1,%2\\;li %0,0\\;adde %0,%0,%0\"\n-  [(set_attr \"type\" \"three\")\n-   (set_attr \"length\" \"12\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (leu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t (match_operand:DI 2 \"reg_or_short_operand\" \"rI,rI\"))\n-\t (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(leu:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   subf%I2c %0,%1,%2\\;li %0,0\\;adde. %0,%0,%0\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"12,16\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (leu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:DI 2 \"reg_or_short_operand\" \"\"))\n-\t (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(leu:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_64BIT && reload_completed\"\n-  [(set (match_dup 0)\n-\t(leu:DI (match_dup 1) (match_dup 2)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n+(define_insn \"*leu<mode>_compare\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n \t(compare:CC\n-\t (leu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"rI,rI\"))\n+\t (leu:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t(match_operand:P 2 \"reg_or_short_operand\" \"rI,rI\"))\n \t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(leu:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_32BIT\"\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(leu:P (match_dup 1) (match_dup 2)))]\n+  \"\"\n   \"@\n    {sf%I2|subf%I2c} %0,%1,%2\\;{cal %0,0(0)|li %0,0}\\;{ae.|adde.} %0,%0,%0\n    #\"\n@@ -11725,25 +11685,25 @@\n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC\n-\t (leu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n+\t (leu:P (match_operand:P 1 \"gpc_reg_operand\" \"\")\n+\t\t(match_operand:P 2 \"reg_or_short_operand\" \"\"))\n \t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(leu:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_32BIT && reload_completed\"\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"\")\n+\t(leu:P (match_dup 1) (match_dup 2)))]\n+  \"reload_completed\"\n   [(set (match_dup 0)\n-\t(leu:SI (match_dup 1) (match_dup 2)))\n+\t(leu:P (match_dup 1) (match_dup 2)))\n    (set (match_dup 3)\n \t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r\")\n-\t(plus:SI (leu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"rI\"))\n-\t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_32BIT\"\n+(define_insn \"*plus_leu<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=&r\")\n+\t(plus:P (leu:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n+\t\t       (match_operand:P 2 \"reg_or_short_operand\" \"rI\"))\n+\t\t(match_operand:P 3 \"gpc_reg_operand\" \"r\")))]\n+  \"\"\n   \"{sf%I2|subf%I2c} %0,%1,%2\\;{aze|addze} %0,%3\"\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n@@ -11813,22 +11773,22 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(neg:SI (leu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"rI\"))))]\n-  \"TARGET_32BIT\"\n+(define_insn \"*neg_leu<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(neg:P (leu:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:P 2 \"reg_or_short_operand\" \"rI\"))))]\n+  \"\"\n   \"{sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;nand %0,%0,%0\"\n    [(set_attr \"type\" \"three\")\n     (set_attr \"length\" \"12\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r\")\n-\t(and:SI (neg:SI\n-\t\t (leu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"rI\")))\n-\t\t(match_operand:SI 3 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_32BIT\"\n+(define_insn \"*and_neg_leu<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=&r\")\n+\t(and:P (neg:P\n+\t\t (leu:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t(match_operand:P 2 \"reg_or_short_operand\" \"rI\")))\n+\t\t(match_operand:P 3 \"gpc_reg_operand\" \"r\")))]\n+  \"\"\n   \"{sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;andc %0,%3,%0\"\n   [(set_attr \"type\" \"three\")\n    (set_attr \"length\" \"12\")])\n@@ -12035,15 +11995,15 @@\n    (set (match_dup 0) (neg:P (match_dup 0)))]\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*ltu<mode>_compare\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC\n-\t (ltu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n-\t\t (match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P,r,P\"))\n+\t (ltu:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t(match_operand:P 2 \"reg_or_neg_short_operand\" \"r,P,r,P\"))\n \t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n-\t(ltu:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_32BIT\"\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n+\t(ltu:P (match_dup 1) (match_dup 2)))]\n+  \"\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;neg. %0,%0\n    {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;neg. %0,%0\n@@ -12055,41 +12015,29 @@\n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC\n-\t (ltu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:SI 2 \"reg_or_neg_short_operand\" \"\"))\n+\t (ltu:P (match_operand:P 1 \"gpc_reg_operand\" \"\")\n+\t\t(match_operand:P 2 \"reg_or_neg_short_operand\" \"\"))\n \t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(ltu:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_32BIT && reload_completed\"\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"\")\n+\t(ltu:P (match_dup 1) (match_dup 2)))]\n+  \"reload_completed\"\n   [(set (match_dup 0)\n-\t(ltu:SI (match_dup 1) (match_dup 2)))\n+\t(ltu:P (match_dup 1) (match_dup 2)))\n    (set (match_dup 3)\n \t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn_and_split \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,r\")\n-\t(plus:SI (ltu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\"))\n-\t\t (match_operand:SI 3 \"reg_or_short_operand\" \"rI,rI\")))]\n-  \"TARGET_32BIT\"\n-  \"#\"\n-  \"&& !reg_overlap_mentioned_p (operands[0], operands[3])\"\n-  [(set (match_dup 0) (neg:SI (ltu:SI (match_dup 1) (match_dup 2))))\n-   (set (match_dup 0) (minus:SI (match_dup 3) (match_dup 0)))]\n-  \"\")\n-\n-(define_insn_and_split \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,r\")\n-\t(plus:DI (ltu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:DI 2 \"reg_or_neg_short_operand\" \"r,P\"))\n-\t\t (match_operand:DI 3 \"reg_or_short_operand\" \"rI,rI\")))]\n-  \"TARGET_64BIT\"\n+(define_insn_and_split \"*plus_ltu<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=&r,r\")\n+\t(plus:P (ltu:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t       (match_operand:P 2 \"reg_or_neg_short_operand\" \"r,P\"))\n+\t\t (match_operand:P 3 \"reg_or_short_operand\" \"rI,rI\")))]\n+  \"\"\n   \"#\"\n   \"&& !reg_overlap_mentioned_p (operands[0], operands[3])\"\n-  [(set (match_dup 0) (neg:DI (ltu:DI (match_dup 1) (match_dup 2))))\n-   (set (match_dup 0) (minus:DI (match_dup 3) (match_dup 0)))]\n+  [(set (match_dup 0) (neg:P (ltu:P (match_dup 1) (match_dup 2))))\n+   (set (match_dup 0) (minus:P (match_dup 3) (match_dup 0)))]\n   \"\")\n \n (define_insn \"\"\n@@ -12297,37 +12245,26 @@\n   \"doz%I2 %0,%1,%2\\;{ai|addic} %0,%0,-1\\;{sfe|subfe} %0,%0,%0\"\n   [(set_attr \"length\" \"12\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(geu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t(match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\")))]\n-  \"TARGET_32BIT\"\n+(define_insn \"*geu<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(geu:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n+\t       (match_operand:P 2 \"reg_or_neg_short_operand\" \"r,P\")))]\n+  \"\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{cal %0,0(0)|li %0,0}\\;{ae|adde} %0,%0,%0\n    {ai|addic} %0,%1,%n2\\;{cal %0,0(0)|li %0,0}\\;{ae|adde} %0,%0,%0\"\n   [(set_attr \"type\" \"three\")\n    (set_attr \"length\" \"12\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(geu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t(match_operand:DI 2 \"reg_or_neg_short_operand\" \"r,P\")))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   subfc %0,%2,%1\\;li %0,0\\;adde %0,%0,%0\n-   addic %0,%1,%n2\\;li %0,0\\;adde %0,%0,%0\"\n-  [(set_attr \"type\" \"three\")\n-   (set_attr \"length\" \"12\")])\n-\n-(define_insn \"\"\n+(define_insn \"*geu<mode>_compare\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC\n-\t (geu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n-\t\t (match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P,r,P\"))\n+\t (geu:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t(match_operand:P 2 \"reg_or_neg_short_operand\" \"r,P,r,P\"))\n \t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n-\t(geu:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_32BIT\"\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n+\t(geu:P (match_dup 1) (match_dup 2)))]\n+  \"\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{cal %0,0(0)|li %0,0}\\;{ae.|adde.} %0,%0,%0\n    {ai|addic} %0,%1,%n2\\;{cal %0,0(0)|li %0,0}\\;{ae.|adde.} %0,%0,%0\n@@ -12339,58 +12276,25 @@\n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC\n-\t (geu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:SI 2 \"reg_or_neg_short_operand\" \"\"))\n+\t (geu:P (match_operand:P 1 \"gpc_reg_operand\" \"\")\n+\t\t(match_operand:P 2 \"reg_or_neg_short_operand\" \"\"))\n \t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(geu:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_32BIT && reload_completed\"\n-  [(set (match_dup 0)\n-\t(geu:SI (match_dup 1) (match_dup 2)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n-\t(compare:CC\n-\t (geu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n-\t\t (match_operand:DI 2 \"reg_or_neg_short_operand\" \"r,P,r,P\"))\n-\t (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n-\t(geu:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   subfc %0,%2,%1\\;li %0,0\\;adde. %0,%0,%0\n-   addic %0,%1,%n2\\;li %0,0\\;adde. %0,%0,%0\n-   #\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"12,12,16,16\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (geu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:DI 2 \"reg_or_neg_short_operand\" \"\"))\n-\t (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(geu:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_64BIT && reload_completed\"\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"\")\n+\t(geu:P (match_dup 1) (match_dup 2)))]\n+  \"reload_completed\"\n   [(set (match_dup 0)\n-\t(geu:DI (match_dup 1) (match_dup 2)))\n+\t(geu:P (match_dup 1) (match_dup 2)))\n    (set (match_dup 3)\n \t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r\")\n-\t(plus:SI (geu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\"))\n-\t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\")))]\n-  \"TARGET_32BIT\"\n+(define_insn \"*plus_geu<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=&r,&r\")\n+\t(plus:P (geu:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t       (match_operand:P 2 \"reg_or_neg_short_operand\" \"r,P\"))\n+\t\t(match_operand:P 3 \"gpc_reg_operand\" \"r,r\")))]\n+  \"\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{aze|addze} %0,%3\n    {ai|addic} %0,%1,%n2\\;{aze|addze} %0,%3\"\n@@ -12466,24 +12370,24 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(neg:SI (geu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))]\n-  \"TARGET_32BIT\"\n+(define_insn \"*neg_geu<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(neg:P (geu:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t      (match_operand:P 2 \"reg_or_short_operand\" \"r,I\"))))]\n+  \"\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;nand %0,%0,%0\n    {sfi|subfic} %0,%1,-1\\;{a%I2|add%I2c} %0,%0,%2\\;{sfe|subfe} %0,%0,%0\"\n   [(set_attr \"type\" \"three\")\n    (set_attr \"length\" \"12\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r\")\n-\t(and:SI (neg:SI\n-\t\t (geu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\")))\n-\t\t(match_operand:SI 3 \"gpc_reg_operand\" \"r,r\")))]\n-  \"TARGET_32BIT\"\n+(define_insn \"*and_neg_geu<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=&r,&r\")\n+\t(and:P (neg:P\n+\t\t (geu:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t\t(match_operand:P 2 \"reg_or_neg_short_operand\" \"r,P\")))\n+\t\t(match_operand:P 3 \"gpc_reg_operand\" \"r,r\")))]\n+  \"\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;andc %0,%3,%0\n    {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;andc %0,%3,%0\"\n@@ -12563,7 +12467,7 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*gt0si\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t       (const_int 0)))]\n@@ -12572,7 +12476,7 @@\n   [(set_attr \"type\" \"three\")\n    (set_attr \"length\" \"12\")])\n \n-(define_insn \"\"\n+(define_insn \"*gt0di\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(gt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n \t       (const_int 0)))]\n@@ -12682,26 +12586,16 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r\")\n-\t(plus:SI (gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t(const_int 0))\n-\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_32BIT\"\n+(define_insn \"*plus_gt<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=&r\")\n+\t(plus:P (gt:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (const_int 0))\n+\t\t (match_operand:P 2 \"gpc_reg_operand\" \"r\")))]\n+  \"\"\n   \"{a|addc} %0,%1,%1\\;{sfe|subfe} %0,%1,%0\\;{aze|addze} %0,%2\"\n   [(set_attr \"type\" \"three\")\n    (set_attr \"length\" \"12\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r\")\n-\t(plus:DI (gt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t(const_int 0))\n-\t\t (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_64BIT\"\n-  \"addc %0,%1,%1\\;subfe %0,%1,%0\\;addze %0,%2\"\n-  [(set_attr \"type\" \"three\")\n-   (set_attr \"length\" \"12\")])\n-\n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n \t(compare:CC\n@@ -12942,15 +12836,15 @@\n    (set (match_dup 0) (neg:P (match_dup 0)))]\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*gtu<mode>_compare\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n \t(compare:CC\n-\t (gtu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"rI,rI\"))\n+\t (gtu:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t (match_operand:P 2 \"reg_or_short_operand\" \"rI,rI\"))\n \t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(gtu:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_32BIT\"\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(gtu:P (match_dup 1) (match_dup 2)))]\n+  \"\"\n   \"@\n    {sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;neg. %0,%0\n    #\"\n@@ -12960,72 +12854,29 @@\n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC\n-\t (gtu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n+\t (gtu:P (match_operand:P 1 \"gpc_reg_operand\" \"\")\n+\t\t(match_operand:P 2 \"reg_or_short_operand\" \"\"))\n \t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(gtu:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_32BIT && reload_completed\"\n-  [(set (match_dup 0)\n-\t(gtu:SI (match_dup 1) (match_dup 2)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t (match_operand:DI 2 \"reg_or_short_operand\" \"rI,rI\"))\n-\t (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(gtu:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   subf%I2c %0,%1,%2\\;subfe %0,%0,%0\\;neg. %0,%0\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"12,16\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:DI 2 \"reg_or_short_operand\" \"\"))\n-\t (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(gtu:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_64BIT && reload_completed\"\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"\")\n+\t(gtu:P (match_dup 1) (match_dup 2)))]\n+  \"reload_completed\"\n   [(set (match_dup 0)\n-\t(gtu:DI (match_dup 1) (match_dup 2)))\n+\t(gtu:P (match_dup 1) (match_dup 2)))\n    (set (match_dup 3)\n \t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn_and_split \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r\")\n-        (plus:SI (gtu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-                         (match_operand:SI 2 \"reg_or_short_operand\" \"rI\"))\n-                 (match_operand:SI 3 \"reg_or_short_operand\" \"rI\")))]\n-  \"TARGET_32BIT\"\n-  \"#\"\n-  \"&& !reg_overlap_mentioned_p (operands[0], operands[3])\"\n-  [(set (match_dup 0) (neg:SI (gtu:SI (match_dup 1) (match_dup 2))))\n-   (set (match_dup 0) (minus:SI (match_dup 3) (match_dup 0)))]\n-  \"\")\n-\n-(define_insn_and_split \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r\")\n-        (plus:DI (gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-                         (match_operand:DI 2 \"reg_or_short_operand\" \"rI\"))\n-                 (match_operand:DI 3 \"reg_or_short_operand\" \"rI\")))]\n-  \"TARGET_64BIT\"\n+(define_insn_and_split \"plus_gtu<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=&r\")\n+        (plus:P (gtu:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n+\t\t       (match_operand:P 2 \"reg_or_short_operand\" \"rI\"))\n+\t\t(match_operand:P 3 \"reg_or_short_operand\" \"rI\")))]\n+  \"\"\n   \"#\"\n   \"&& !reg_overlap_mentioned_p (operands[0], operands[3])\"\n-  [(set (match_dup 0) (neg:DI (gtu:DI (match_dup 1) (match_dup 2))))\n-   (set (match_dup 0) (minus:DI (match_dup 3) (match_dup 0)))]\n+  [(set (match_dup 0) (neg:P (gtu:P (match_dup 1) (match_dup 2))))\n+   (set (match_dup 0) (minus:P (match_dup 3) (match_dup 0)))]\n   \"\")\n \n (define_insn \"\""}]}