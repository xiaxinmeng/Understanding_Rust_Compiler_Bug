{"sha": "4505270128ef70538ea345f292e3eb85a5369eaf", "node_id": "C_kwDOANBUbNoAKDQ1MDUyNzAxMjhlZjcwNTM4ZWEzNDVmMjkyZTNlYjg1YTUzNjllYWY", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-12-08T10:50:33Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-12-08T10:50:33Z"}, "message": "[PR102706] [testsuite] -Wno-stringop-overflow vs Warray-bounds\n\nThe bogus Wstringop-overflow warnings conditionally issued for\nWarray-bounds-48.c and -Wzero-length-array-bounds-2.c are expected\nunder conditions that depend on the availability of certain vector\npatterns, but that don't seem to model the conditions under which the\nwarnings are expected.\n\nOn riscv64-elf and arm-eabi/-mcpu=cortex-r5, for example, though the\nWarray-bounds-48.c condition passes, we don't issue warnings.  On\nriscv64-elf, we decide not to vectorize the assignments; on cortex-r5,\nwe do vectorize pairs of assignments, but that doesn't yield the\nexpected warning, even though assignments that should trigger the\nbogus warning are vectorized and associated with the earlier line\nwhere the bogus warning would be expected.\n\nOn riscv64, for Wzero-length-array-bounds-2.c, we issue the expected\nwarning in test_C_global_buf, but we also issue a warning for\ntest_C_local_buf under the same conditions, that would be expected on\nother platforms but that is not issued on them.  On\narm-eabi/-mcpu=cortex-r5, the condition passes so we'd expect the\nwarning in both functions, but we don't warn on either.\n\nInstead of further extending the effective target tests, introduced to\ntemporarily tolerate these expected bogus warnings, so as to capture\nthe vectorizer analyses that lead to the mismatched decisions, I'm\ndisabling the undesired warnings for these two tests.\n\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR tree-optimization/102706\n\t* gcc.dg/Warray-bounds-48.c: Disable -Wstringop-overflow.\n\t* gcc.dg/Wzero-length-array-bounds-2.c: Likewise.", "tree": {"sha": "6e2fe6db5049c77a2ed2a812e7a51fd0faedbf43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e2fe6db5049c77a2ed2a812e7a51fd0faedbf43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4505270128ef70538ea345f292e3eb85a5369eaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4505270128ef70538ea345f292e3eb85a5369eaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4505270128ef70538ea345f292e3eb85a5369eaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4505270128ef70538ea345f292e3eb85a5369eaf/comments", "author": null, "committer": null, "parents": [{"sha": "a82c119b1e9e45861ac04df8736917f396e1b740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a82c119b1e9e45861ac04df8736917f396e1b740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a82c119b1e9e45861ac04df8736917f396e1b740"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "e9203140a274a6672f7101d15e35421180bd21ec", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-48.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4505270128ef70538ea345f292e3eb85a5369eaf/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4505270128ef70538ea345f292e3eb85a5369eaf/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-48.c?ref=4505270128ef70538ea345f292e3eb85a5369eaf", "patch": "@@ -4,6 +4,11 @@\n    { dg-options \"-O2 -Wall\" }\n    { dg-require-effective-target alloca } */\n \n+/* pr102706: disabled warnings because the now-disabled conditions for the\n+   bogus warnings to come up do not take cost analysis into account, and often\n+   come up wrong.  */\n+/* { dg-additional-options \"-Wno-stringop-overflow\" } */\n+\n typedef __INT16_TYPE__ int16_t;\n typedef __INT32_TYPE__ int32_t;\n \n@@ -30,7 +35,8 @@ static void nowarn_ax_extern (struct AX *p)\n \n static void warn_ax_local_buf (struct AX *p)\n {\n-  p->ax[0] = 4; p->ax[1] = 5;  // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"pr102706\" { target { vect_slp_v2hi_store_align &&  { ! vect_slp_v4hi_store_unalign } } } }\n+  p->ax[0] = 4; p->ax[1] = 5;  // { dg-bogus \"\\\\\\[-Wstringop-overflow\" \"pr102706\" }\n+                               //   { xfail { vect_slp_v2hi_store_align &&  { ! vect_slp_v4hi_store_unalign } } }\n \n   p->ax[2] = 6;     // { dg-warning \"\\\\\\[-Warray-bounds\" }\n   p->ax[3] = 7;     // { dg-warning \"\\\\\\[-Warray-bounds\" }\n@@ -130,7 +136,8 @@ static void warn_a0_extern (struct A0 *p)\n \n static void warn_a0_local_buf (struct A0 *p)\n {\n-  p->a0[0] = 4; p->a0[1] = 5;  // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"pr102706\" { target { vect_slp_v2hi_store_align && { ! vect_slp_v4hi_store_unalign } } } }\n+  p->a0[0] = 4; p->a0[1] = 5;  // { dg-bogus \"\\\\\\[-Wstringop-overflow\" \"pr102706\" }\n+                               //   { xfail { vect_slp_v2hi_store_align && { ! vect_slp_v4hi_store_unalign } } }\n \n   p->a0[2] = 6;     // { dg-warning \"\\\\\\[-Warray-bounds\" }\n   p->a0[3] = 7;     // { dg-warning \"\\\\\\[-Warray-bounds\" }"}, {"sha": "19932d05a315ffbd08b28f6782fe953f2d464440", "filename": "gcc/testsuite/gcc.dg/Wzero-length-array-bounds-2.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4505270128ef70538ea345f292e3eb85a5369eaf/gcc%2Ftestsuite%2Fgcc.dg%2FWzero-length-array-bounds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4505270128ef70538ea345f292e3eb85a5369eaf/gcc%2Ftestsuite%2Fgcc.dg%2FWzero-length-array-bounds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWzero-length-array-bounds-2.c?ref=4505270128ef70538ea345f292e3eb85a5369eaf", "patch": "@@ -4,6 +4,11 @@\n    { dg-do compile }\n    { dg-options \"-O2 -Wall\" } */\n \n+/* pr102706: disabled warnings because the now-disabled conditions for the\n+   bogus warnings to come up do not take cost analysis into account, and often\n+   come up wrong.  */\n+/* { dg-additional-options \"-Wno-stringop-overflow\" } */\n+\n void sink (void*);\n \n struct A { int i; };\n@@ -87,7 +92,8 @@ void test_C_global_buf (void)\n   p->b1.a[ 1].i = 0;     // { dg-warning \"\\\\\\[-Wzero-length-bounds\" }\n   sink (p);\n \n-  p->b2.a[ 0].i = 0;    // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"pr102706\" { target { vect_slp_v2si_store_align &&  { ! vect_slp_v4si_store_unalign } } } }\n+  p->b2.a[ 0].i = 0;    // { dg-bogus \"\\\\\\[-Wstringop-overflow\" \"pr102706\" }\n+                        //   { xfail { vect_slp_v2si_store_align &&  { ! vect_slp_v4si_store_unalign } } }\n   p->b2.a[ 1].i = 0;\n   p->b2.a[ 2].i = 0;     // { dg-warning \"\\\\\\[-Warray-bounds\" }\n   p->b2.a[ 3].i = 0;     // { dg-warning \"\\\\\\[-Warray-bounds\" }\n@@ -117,7 +123,8 @@ void test_C_local_buf (void)\n   p->b1.a[ 1].i = 8;     // { dg-warning \"\\\\\\[-Wzero-length-bounds\" }\n   sink (p);\n \n-  p->b2.a[ 0].i = 9;\n+  p->b2.a[ 0].i = 9;    // { dg-bogus \"\\\\\\[-Wstringop-overflow\" \"pr102706\" }\n+                        //   { xfail { vect_slp_v2si_store_align &&  { ! vect_slp_v4si_store_unalign } } }\n   p->b2.a[ 1].i = 10;\n   p->b2.a[ 2].i = 11;    // { dg-warning \"\\\\\\[-Warray-bounds\" }\n   p->b2.a[ 3].i = 12;    // { dg-warning \"\\\\\\[-Warray-bounds\" }"}]}