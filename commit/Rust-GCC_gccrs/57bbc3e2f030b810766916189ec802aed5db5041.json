{"sha": "57bbc3e2f030b810766916189ec802aed5db5041", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdiYmMzZTJmMDMwYjgxMDc2NjkxNjE4OWVjODAyYWVkNWRiNTA0MQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2019-06-12T12:53:20Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2019-06-12T12:53:20Z"}, "message": "Remove value_range_constant_singleton in favor of value_range::singleton_p.\n\nFrom-SVN: r272182", "tree": {"sha": "f03683132a4e296fe7581e79329e70ebb5f40ea1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f03683132a4e296fe7581e79329e70ebb5f40ea1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57bbc3e2f030b810766916189ec802aed5db5041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57bbc3e2f030b810766916189ec802aed5db5041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57bbc3e2f030b810766916189ec802aed5db5041", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57bbc3e2f030b810766916189ec802aed5db5041/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26d7a5e690169ac04acde90070b0092c41b71c7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d7a5e690169ac04acde90070b0092c41b71c7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26d7a5e690169ac04acde90070b0092c41b71c7e"}], "stats": {"total": 40, "additions": 18, "deletions": 22}, "files": [{"sha": "d58835d08a5f8aab52b8ef3ee14e798879bf90ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bbc3e2f030b810766916189ec802aed5db5041/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bbc3e2f030b810766916189ec802aed5db5041/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57bbc3e2f030b810766916189ec802aed5db5041", "patch": "@@ -1,3 +1,12 @@\n+2019-06-12  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-ssa-evrp.c (evrp_dom_walker::before_dom_children): Use\n+\tvalue_range::singleton_p.\n+\t* tree-vrp.c (value_range_constant_singleton): Remove.\n+\t* tree-vrp.h (value_range_constant_singleton): Remove.\n+\t* vr-values.c (vr_values::singleton): Use\n+\tvalue_range::singleton_p.\n+\n 2019-06-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/90811"}, {"sha": "5b993886912c62379b28acdc06346ecf501349d7", "filename": "gcc/gimple-ssa-evrp.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bbc3e2f030b810766916189ec802aed5db5041/gcc%2Fgimple-ssa-evrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bbc3e2f030b810766916189ec802aed5db5041/gcc%2Fgimple-ssa-evrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp.c?ref=57bbc3e2f030b810766916189ec802aed5db5041", "patch": "@@ -111,8 +111,8 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n \n       value_range *vr = evrp_range_analyzer.get_value_range (lhs);\n       /* Mark PHIs whose lhs we fully propagate for removal.  */\n-      tree val = value_range_constant_singleton (vr);\n-      if (val && may_propagate_copy (lhs, val))\n+      tree val;\n+      if (vr->singleton_p (&val) && may_propagate_copy (lhs, val))\n \t{\n \t  stmts_to_remove.safe_push (phi);\n \t  continue;\n@@ -162,7 +162,7 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n \t      value_range *vr = evrp_range_analyzer.get_value_range (output);\n \n \t      /* Mark stmts whose output we fully propagate for removal.  */\n-\t      if ((val = value_range_constant_singleton (vr))\n+\t      if (vr->singleton_p (&val)\n \t\t  && may_propagate_copy (output, val)\n \t\t  && !stmt_could_throw_p (cfun, stmt)\n \t\t  && !gimple_has_side_effects (stmt))\n@@ -244,8 +244,8 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n \t      || virtual_operand_p (arg))\n \t    continue;\n \t  value_range *vr = evrp_range_analyzer.get_value_range (arg);\n-\t  tree val = value_range_constant_singleton (vr);\n-\t  if (val && may_propagate_copy (arg, val))\n+\t  tree val;\n+\t  if (vr->singleton_p (&val) && may_propagate_copy (arg, val))\n \t    propagate_value (use_p, val);\n \t}\n     }"}, {"sha": "065152aca3b83a4a42e74c5a5ef2005a1be88bcb", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bbc3e2f030b810766916189ec802aed5db5041/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bbc3e2f030b810766916189ec802aed5db5041/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=57bbc3e2f030b810766916189ec802aed5db5041", "patch": "@@ -1154,21 +1154,6 @@ range_includes_p (const value_range_base *vr, HOST_WIDE_INT x)\n   return vr->may_contain_p (build_int_cst (vr->type (), x));\n }\n \n-/* If *VR has a value range that is a single constant value return that,\n-   otherwise return NULL_TREE.\n-\n-   ?? This actually returns TRUE for [&x, &x], so perhaps \"constant\"\n-   is not the best name.  */\n-\n-tree\n-value_range_constant_singleton (const value_range_base *vr)\n-{\n-  tree result = NULL;\n-  if (vr->singleton_p (&result))\n-    return result;\n-  return NULL;\n-}\n-\n /* Value range wrapper for wide_int_range_set_zero_nonzero_bits.\n \n    Compute MAY_BE_NONZERO and MUST_BE_NONZERO bit masks for range in VR."}, {"sha": "62d72868708fb00b0cc1c8448f8fec1811897fda", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bbc3e2f030b810766916189ec802aed5db5041/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bbc3e2f030b810766916189ec802aed5db5041/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=57bbc3e2f030b810766916189ec802aed5db5041", "patch": "@@ -259,7 +259,6 @@ extern bool infer_value_range (gimple *, tree, tree_code *, tree *);\n \n extern bool vrp_bitmap_equal_p (const_bitmap, const_bitmap);\n \n-extern tree value_range_constant_singleton (const value_range_base *);\n extern bool range_int_cst_p (const value_range_base *);\n extern bool range_int_cst_singleton_p (const value_range_base *);\n "}, {"sha": "e151550d963142e5237358aee967965c94ead0ac", "filename": "gcc/vr-values.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bbc3e2f030b810766916189ec802aed5db5041/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bbc3e2f030b810766916189ec802aed5db5041/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=57bbc3e2f030b810766916189ec802aed5db5041", "patch": "@@ -387,7 +387,10 @@ vr_values::op_with_constant_singleton_value_range (tree op)\n   if (TREE_CODE (op) != SSA_NAME)\n     return NULL_TREE;\n \n-  return value_range_constant_singleton (get_value_range (op));\n+  tree t;\n+  if (get_value_range (op)->singleton_p (&t))\n+    return t;\n+  return NULL;\n }\n \n /* Return true if op is in a boolean [0, 1] value-range.  */"}]}