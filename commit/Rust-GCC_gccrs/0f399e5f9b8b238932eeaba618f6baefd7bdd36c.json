{"sha": "0f399e5f9b8b238932eeaba618f6baefd7bdd36c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYzOTllNWY5YjhiMjM4OTMyZWVhYmE2MThmNmJhZWZkN2JkZDM2Yw==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2003-01-09T13:55:46Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2003-01-09T13:55:46Z"}, "message": "pt.c (push_access_scope_real): Call push_to_top_level for function in namespace scope.\n\n\t* pt.c (push_access_scope_real): Call push_to_top_level for\n\tfunction in namespace scope.\n\t(pop_access_scope): Call pop_from_top_level for function in\n\tnamespace scope.\n\n\t* g++.dg/template/friend14.C: New test.\n\nFrom-SVN: r61114", "tree": {"sha": "61ec05e405f79cba389afca5e3e35514896a3ce6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61ec05e405f79cba389afca5e3e35514896a3ce6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f399e5f9b8b238932eeaba618f6baefd7bdd36c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f399e5f9b8b238932eeaba618f6baefd7bdd36c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f399e5f9b8b238932eeaba618f6baefd7bdd36c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f399e5f9b8b238932eeaba618f6baefd7bdd36c/comments", "author": null, "committer": null, "parents": [{"sha": "c456a45a19096f2671694f3254fb4fad1dac17c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c456a45a19096f2671694f3254fb4fad1dac17c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c456a45a19096f2671694f3254fb4fad1dac17c7"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "cb9c6124ac4ab13b4bd79e62a5650cb8ac03d358", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f399e5f9b8b238932eeaba618f6baefd7bdd36c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f399e5f9b8b238932eeaba618f6baefd7bdd36c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0f399e5f9b8b238932eeaba618f6baefd7bdd36c", "patch": "@@ -1,3 +1,10 @@\n+2003-01-09  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\t* pt.c (push_access_scope_real): Call push_to_top_level for\n+\tfunction in namespace scope.\n+\t(pop_access_scope): Call pop_from_top_level for function in\n+\tnamespace scope.\n+\n 2003-01-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* decl.c (start_decl): Don't set DECL_COMMON for __thread variables."}, {"sha": "7802e25b573b9dc835fe937ecfb64bba034ed78e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f399e5f9b8b238932eeaba618f6baefd7bdd36c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f399e5f9b8b238932eeaba618f6baefd7bdd36c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0f399e5f9b8b238932eeaba618f6baefd7bdd36c", "patch": "@@ -209,16 +209,21 @@ push_access_scope_real (t, args, context)\n \t  if (spec)\n \t    t = spec;\n \t}\n-\n-      saved_access_scope = tree_cons\n-\t(NULL_TREE, current_function_decl, saved_access_scope);\n-      current_function_decl = t;\n     }\n \n   if (!context)\n     context = DECL_CONTEXT (t);\n   if (context && TYPE_P (context))\n     push_nested_class (context, 2);\n+  else\n+    push_to_top_level ();\n+    \n+  if (TREE_CODE (t) == FUNCTION_DECL || DECL_FUNCTION_TEMPLATE_P (t))\n+    {\n+      saved_access_scope = tree_cons\n+\t(NULL_TREE, current_function_decl, saved_access_scope);\n+      current_function_decl = t;\n+    }\n }\n \n /* Like push_access_scope_real, but always uses DECL_CONTEXT.  */\n@@ -237,14 +242,16 @@ void\n pop_access_scope (t)\n   tree t;\n {\n-  if (DECL_CLASS_SCOPE_P (t))\n-    pop_nested_class ();\n-\n   if (TREE_CODE (t) == FUNCTION_DECL || DECL_FUNCTION_TEMPLATE_P (t))\n     {\n       current_function_decl = TREE_VALUE (saved_access_scope);\n       saved_access_scope = TREE_CHAIN (saved_access_scope);\n     }\n+\n+  if (DECL_CLASS_SCOPE_P (t))\n+    pop_nested_class ();\n+  else\n+    pop_from_top_level ();\n }\n \n /* Do any processing required when DECL (a member template"}, {"sha": "8168b989adee724ef4b79f103179e5c285745964", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f399e5f9b8b238932eeaba618f6baefd7bdd36c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f399e5f9b8b238932eeaba618f6baefd7bdd36c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f399e5f9b8b238932eeaba618f6baefd7bdd36c", "patch": "@@ -1,3 +1,7 @@\n+2003-01-09  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\t* g++.dg/template/friend14.C: New test.\n+\n 2003-01-09  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.dg/old-style-asm-1.c: New test."}, {"sha": "6e07b98932a4269181255297f88e502782921bd5", "filename": "gcc/testsuite/g++.dg/template/friend14.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f399e5f9b8b238932eeaba618f6baefd7bdd36c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f399e5f9b8b238932eeaba618f6baefd7bdd36c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend14.C?ref=0f399e5f9b8b238932eeaba618f6baefd7bdd36c", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile }\n+\n+// Origin: Wolfgang Bangerth <bangerth@ticam.utexas.edu>\n+\n+// Perform access checking to parameter and return type of \n+// function template correctly when the template is friend.\n+\n+template <class T> class O {\n+  struct I { I (int); };\n+\n+  template <class T_>\n+  friend typename O<T_>::I f ();\n+};\n+\n+template <class T_>\n+typename O<T_>::I f () { return 1; }\n+\n+struct X {\n+    void g() { f<int>(); }\n+};"}]}