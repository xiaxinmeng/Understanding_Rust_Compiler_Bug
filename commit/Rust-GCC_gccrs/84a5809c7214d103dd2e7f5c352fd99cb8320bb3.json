{"sha": "84a5809c7214d103dd2e7f5c352fd99cb8320bb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRhNTgwOWM3MjE0ZDEwM2RkMmU3ZjVjMzUyZmQ5OWNiODMyMGJiMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-09-07T12:44:26Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-23T08:25:00Z"}, "message": "[Ada] Clean up in writing of ALI files\n\ngcc/ada/\n\n\t* lib-writ.ads, lib-writ.adb (Write_ALI): No longer read\n\texisting ALI files in -gnatc mode.", "tree": {"sha": "8240a0c2a5c350c7904c72131b52e0536a1b31c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8240a0c2a5c350c7904c72131b52e0536a1b31c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84a5809c7214d103dd2e7f5c352fd99cb8320bb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84a5809c7214d103dd2e7f5c352fd99cb8320bb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84a5809c7214d103dd2e7f5c352fd99cb8320bb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84a5809c7214d103dd2e7f5c352fd99cb8320bb3/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c1929894ca27ab2469c2c7bf25ad2625f567351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1929894ca27ab2469c2c7bf25ad2625f567351", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c1929894ca27ab2469c2c7bf25ad2625f567351"}], "stats": {"total": 106, "additions": 3, "deletions": 103}, "files": [{"sha": "6a63b8fb2b5ee1d806deac1f9f3f80712ae4e504", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 3, "deletions": 97, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a5809c7214d103dd2e7f5c352fd99cb8320bb3/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a5809c7214d103dd2e7f5c352fd99cb8320bb3/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=84a5809c7214d103dd2e7f5c352fd99cb8320bb3", "patch": "@@ -268,17 +268,6 @@ package body Lib.Writ is\n       --  Collect with lines for entries in the context clause of the given\n       --  compilation unit, Cunit.\n \n-      procedure Update_Tables_From_ALI_File;\n-      --  Given an up to date ALI file (see Up_To_Date_ALI_file_Exists\n-      --  function), update tables from the ALI information, including\n-      --  specifically the Compilation_Switches table.\n-\n-      function Up_To_Date_ALI_File_Exists return Boolean;\n-      --  If there exists an ALI file that is up to date, then this function\n-      --  initializes the tables in the ALI spec to contain information on\n-      --  this file (using Scan_ALI) and returns True. If no file exists,\n-      --  or the file is not up to date, then False is returned.\n-\n       procedure Write_Unit_Information (Unit_Num : Unit_Number_Type);\n       --  Write out the library information for one unit for which code is\n       --  generated (includes unit line and with lines).\n@@ -397,76 +386,6 @@ package body Lib.Writ is\n          end loop;\n       end Collect_Withs;\n \n-      --------------------------------\n-      -- Up_To_Date_ALI_File_Exists --\n-      --------------------------------\n-\n-      function Up_To_Date_ALI_File_Exists return Boolean is\n-         Name : File_Name_Type;\n-         Text : Text_Buffer_Ptr;\n-         Id   : Sdep_Id;\n-         Sind : Source_File_Index;\n-\n-      begin\n-         Opt.Check_Object_Consistency := True;\n-         Read_Library_Info (Name, Text);\n-\n-         --  Return if we could not find an ALI file\n-\n-         if Text = null then\n-            return False;\n-         end if;\n-\n-         --  Return if ALI file has bad format\n-\n-         Initialize_ALI;\n-\n-         if Scan_ALI (Name, Text, False, Err => True) = No_ALI_Id then\n-            return False;\n-         end if;\n-\n-         --  If we have an OK ALI file, check if it is up to date\n-         --  Note that we assume that the ALI read has all the entries\n-         --  we have in our table, plus some additional ones (that can\n-         --  come from expansion).\n-\n-         Id := First_Sdep_Entry;\n-         for J in 1 .. Num_Sdep loop\n-            Sind := Source_Index (Sdep_Table (J));\n-\n-            while Sdep.Table (Id).Sfile /= File_Name (Sind) loop\n-               if Id = Sdep.Last then\n-                  return False;\n-               else\n-                  Id := Id + 1;\n-               end if;\n-            end loop;\n-\n-            if Sdep.Table (Id).Stamp /= Time_Stamp (Sind) then\n-               return False;\n-            end if;\n-         end loop;\n-\n-         return True;\n-      end Up_To_Date_ALI_File_Exists;\n-\n-      ---------------------------------\n-      -- Update_Tables_From_ALI_File --\n-      ---------------------------------\n-\n-      procedure Update_Tables_From_ALI_File is\n-      begin\n-         --  Build Compilation_Switches table\n-\n-         Compilation_Switches.Init;\n-\n-         for J in First_Arg_Entry .. Args.Last loop\n-            Compilation_Switches.Increment_Last;\n-            Compilation_Switches.Table (Compilation_Switches.Last) :=\n-              Args.Table (J);\n-         end loop;\n-      end Update_Tables_From_ALI_File;\n-\n       ----------------------------\n       -- Write_Unit_Information --\n       ----------------------------\n@@ -1095,8 +1014,7 @@ package body Lib.Writ is\n          return;\n       end if;\n \n-      --  Build sorted source dependency table. We do this right away, because\n-      --  it is referenced by Up_To_Date_ALI_File_Exists.\n+      --  Build sorted source dependency table.\n \n       for Unum in Units.First .. Last_Unit loop\n          if Cunit_Entity (Unum) = Empty\n@@ -1130,20 +1048,8 @@ package body Lib.Writ is\n \n       Lib.Sort (Sdep_Table (1 .. Num_Sdep));\n \n-      --  If we are not generating code, and there is an up to date ALI file\n-      --  file accessible, read it, and acquire the compilation arguments from\n-      --  this file. In GNATprove mode, always generate the ALI file, which\n-      --  contains a special section for formal verification.\n-\n-      if Operating_Mode /= Generate_Code and then not GNATprove_Mode then\n-         if Up_To_Date_ALI_File_Exists then\n-            Update_Tables_From_ALI_File;\n-            return;\n-         end if;\n-      end if;\n-\n-      --  Otherwise acquire compilation arguments and prepare to write out a\n-      --  new ali file.\n+      --  Acquire compilation arguments and prepare to write out a new ali\n+      --  file.\n \n       Create_Output_Library_Info;\n "}, {"sha": "7ec57b4623fb303074ca0e77a4fc832c85674af2", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a5809c7214d103dd2e7f5c352fd99cb8320bb3/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a5809c7214d103dd2e7f5c352fd99cb8320bb3/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=84a5809c7214d103dd2e7f5c352fd99cb8320bb3", "patch": "@@ -1053,12 +1053,6 @@ package Lib.Writ is\n    --  The Object parameter is true if an object file is created, and false\n    --  otherwise. Note that the pseudo-object file generated in GNATprove mode\n    --  does count as an object file from this point of view.\n-   --\n-   --  Note: in the case where we are not generating code (-gnatc mode), this\n-   --  routine only writes an ALI file if it cannot find an existing up to\n-   --  date ALI file. If it *can* find an existing up to date ALI file, then\n-   --  it reads this file and sets the Lib.Compilation_Arguments table from\n-   --  the A lines in this file.\n \n    procedure Add_Preprocessing_Dependency (S : Source_File_Index);\n    --  Indicate that there is a dependency to be added on a preprocessing data"}]}