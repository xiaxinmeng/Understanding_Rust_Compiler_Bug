{"sha": "d781a164c409ff9490a689afcc6b68276ffcb565", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc4MWExNjRjNDA5ZmY5NDkwYTY4OWFmY2M2YjY4Mjc2ZmZjYjU2NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-05-16T06:26:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-16T06:26:54Z"}, "message": "jump.c: Fix typos and clarify commentary from last change.\n\n        * jump.c: Fix typos and clarify commentary from last change.\n        (any_condjump_p): Verify SET_SRC is an IF_THEN_ELSE.\n        (safe_to_remove_jump_p): Remove.\n        (condjump_label): Use pc_set.\n\nFrom-SVN: r33924", "tree": {"sha": "f1ccc5a40e705562355d1c5461a3afed38c0a22f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1ccc5a40e705562355d1c5461a3afed38c0a22f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d781a164c409ff9490a689afcc6b68276ffcb565", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d781a164c409ff9490a689afcc6b68276ffcb565", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d781a164c409ff9490a689afcc6b68276ffcb565", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d781a164c409ff9490a689afcc6b68276ffcb565/comments", "author": null, "committer": null, "parents": [{"sha": "7f9d9ea1ff544fd1ea3a510dbafddb2d0c95472c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9d9ea1ff544fd1ea3a510dbafddb2d0c95472c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f9d9ea1ff544fd1ea3a510dbafddb2d0c95472c"}], "stats": {"total": 86, "additions": 37, "deletions": 49}, "files": [{"sha": "c883ee76898847e586b693d09a327c73e93f9a19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d781a164c409ff9490a689afcc6b68276ffcb565/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d781a164c409ff9490a689afcc6b68276ffcb565/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d781a164c409ff9490a689afcc6b68276ffcb565", "patch": "@@ -1,3 +1,10 @@\n+2000-05-15  Richard Henderson  <rth@cygnus.com>\n+\n+\t* jump.c: Fix typos and clarify commentary from last change.\n+\t(any_condjump_p): Verify SET_SRC is an IF_THEN_ELSE.\n+\t(safe_to_remove_jump_p): Remove.\n+\t(condjump_label): Use pc_set.\n+\n 2000-05-15  Richard Henderson  <rth@cygnus.com>\n \n \t* ifcvt.c (cond_exec_process_insns): Drop USE and CLOBBER insns"}, {"sha": "dad373fe7acbbc7ee204de45d170f37f0a12d846", "filename": "gcc/jump.c", "status": "modified", "additions": 30, "deletions": 49, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d781a164c409ff9490a689afcc6b68276ffcb565/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d781a164c409ff9490a689afcc6b68276ffcb565/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=d781a164c409ff9490a689afcc6b68276ffcb565", "patch": "@@ -2099,10 +2099,8 @@ simplejump_p (insn)\n /* Return nonzero if INSN is a (possibly) conditional jump\n    and nothing more.  \n  \n-   Use this function is depreached, since we need to support\n-   branch and compare insns.  Use nontrivial_condjump_p instead\n-   whenever possible.\n- */\n+   Use this function is deprecated, since we need to support combined\n+   branch and compare insns.  Use any_condjump_p instead whenever possible.  */\n \n int\n condjump_p (insn)\n@@ -2131,10 +2129,8 @@ condjump_p (insn)\n /* Return nonzero if INSN is a (possibly) conditional jump inside a\n    PARALLEL.\n  \n-   Use this function is depreached, since we need to support\n-   branch and compare insns.  Use any_condjump_p instead\n-   whenever possible.\n- */\n+   Use this function is deprecated, since we need to support combined\n+   branch and compare insns.  Use any_condjump_p instead whenever possible.  */\n \n int\n condjump_in_parallel_p (insn)\n@@ -2166,30 +2162,30 @@ condjump_in_parallel_p (insn)\n   return 0;\n }\n \n-/* Return set of PC if available NULL otherwise.  */\n+/* Return set of PC, otherwise NULL.  */\n+\n rtx\n pc_set (insn)\n      rtx insn;\n {\n   rtx pat;\n   if (GET_CODE (insn) != JUMP_INSN)\n-    return NULL;\n+    return NULL_RTX;\n   pat = PATTERN (insn);\n-  /* The set is allowed to appear eighter as insn pattern or the first in\n-     PARALLEL expression.  */\n+\n+  /* The set is allowed to appear either as the insn pattern or\n+     the first set in a PARALLEL.  */\n+  if (GET_CODE (pat) == PARALLEL)\n+    pat = XVECEXP (pat, 0, 0);\n   if (GET_CODE (pat) == SET && GET_CODE (SET_DEST (pat)) == PC)\n     return pat;\n-  if (GET_CODE (pat) == PARALLEL)\n-    {\n-      rtx set = XVECEXP (pat, 0, 0);\n-      if (GET_CODE (set) == SET && GET_CODE (SET_DEST (set)) == PC)\n-\treturn set;\n-    }\n-  return NULL;\n+\n+  return NULL_RTX;\n }\n \n-/* Return true when insn in unconditional jump possibly boundled inside\n-   PARALLEL.  */\n+/* Return true when insn is an unconditional direct jump,\n+   possibly bundled inside a PARALLEL.  */\n+\n int\n any_uncondjump_p (insn)\n      rtx insn;\n@@ -2202,41 +2198,30 @@ any_uncondjump_p (insn)\n   return 1;\n }\n \n-/* Return true when insn is conditional jump.  This function work for\n+/* Return true when insn is a conditional jump.  This function works for\n    instructions containing PC sets in PARALLELs.  The instruction may have\n    various other effects so before removing the jump you must verify\n    safe_to_remove_jump_p.\n \n-   Note that unlike condjump_p it returns 0 for unconditionals jumps.\n-  */\n+   Note that unlike condjump_p it returns false for unconditional jumps.  */\n+\n int\n any_condjump_p (insn)\n      rtx insn;\n {\n   rtx x = pc_set (insn);\n+  enum rtx_code a, b;\n+\n   if (!x)\n     return 0;\n-  if (XEXP (SET_SRC (x), 2) == pc_rtx\n-      && (GET_CODE (XEXP (SET_SRC (x), 1)) == LABEL_REF\n-\t  || GET_CODE (XEXP (SET_SRC (x), 1)) == RETURN))\n-    return 1;\n-  if (XEXP (SET_SRC (x), 1) == pc_rtx\n-      && (GET_CODE (XEXP (SET_SRC (x), 2)) == LABEL_REF\n-\t  || GET_CODE (XEXP (SET_SRC (x), 2)) == RETURN))\n-    return 1;\n-  return 0;\n-}\n+  if (GET_CODE (SET_SRC (x)) != IF_THEN_ELSE)\n+    return 0;\n \n+  a = GET_CODE (XEXP (SET_SRC (x), 1));\n+  b = GET_CODE (XEXP (SET_SRC (x), 2));\n \n-/* Return true when the condjump is safe to remove.  */\n-int\n-safe_to_remove_jump_p (insn)\n-     rtx insn;\n-{\n-  /* For non-single set insns we may remove set of the other registers.  */\n-  if (!pc_set (insn) || !single_set (insn))\n-    return 0;\n-  return 1;\n+  return ((b == PC && (a == LABEL_REF || a == RETURN))\n+          || (a == PC && (b == LABEL_REF || b == RETURN)));\n }\n \n /* Return the label of a conditional jump.  */\n@@ -2245,13 +2230,9 @@ rtx\n condjump_label (insn)\n      rtx insn;\n {\n-  register rtx x = PATTERN (insn);\n+  rtx x = pc_set (insn);\n \n-  if (GET_CODE (x) == PARALLEL)\n-    x = XVECEXP (x, 0, 0);\n-  if (GET_CODE (x) != SET)\n-    return NULL_RTX;\n-  if (GET_CODE (SET_DEST (x)) != PC)\n+  if (!x)\n     return NULL_RTX;\n   x = SET_SRC (x);\n   if (GET_CODE (x) == LABEL_REF)"}]}