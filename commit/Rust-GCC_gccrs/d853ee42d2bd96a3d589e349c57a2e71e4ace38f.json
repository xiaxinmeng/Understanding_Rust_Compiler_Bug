{"sha": "d853ee42d2bd96a3d589e349c57a2e71e4ace38f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg1M2VlNDJkMmJkOTZhM2Q1ODllMzQ5YzU3YTJlNzFlNGFjZTM4Zg==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2011-01-12T09:36:49Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-01-12T09:36:49Z"}, "message": "In gcc/: 2011-01-12 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/:\n2011-01-12  Nicola Pero  <nicola.pero@meta-innovation.com>\t\n\n\t* c-parser.c (c_parser_objc_at_property_declaration): Improved\n\terror message.\t\n\t\n2011-01-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* c-parser.c (c_lex_one_token): Updated and reindented some\n\tcomments.  No changes in code.\n\nIn gcc/cp/:\n2011-01-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* parser.c (cp_parser_objc_at_property_declaration): Improved\n\terror message.\n\nIn gcc/testsuite/:\n2011-01-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc.dg/property/at-property-29.m: New.\n\t* obj-c++.dg/property/at-property-29.mm: New.\n\nFrom-SVN: r168698", "tree": {"sha": "94f847fad123463cc94e0e6a45f68519e3d44e56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94f847fad123463cc94e0e6a45f68519e3d44e56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d853ee42d2bd96a3d589e349c57a2e71e4ace38f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d853ee42d2bd96a3d589e349c57a2e71e4ace38f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d853ee42d2bd96a3d589e349c57a2e71e4ace38f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d853ee42d2bd96a3d589e349c57a2e71e4ace38f/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f2ee78b861b8daab2675e1a24798b1069f763dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ee78b861b8daab2675e1a24798b1069f763dc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ee78b861b8daab2675e1a24798b1069f763dc0"}], "stats": {"total": 86, "additions": 71, "deletions": 15}, "files": [{"sha": "1615efa643a4079d93c4c0645d88035d5f5c3326", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d853ee42d2bd96a3d589e349c57a2e71e4ace38f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d853ee42d2bd96a3d589e349c57a2e71e4ace38f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d853ee42d2bd96a3d589e349c57a2e71e4ace38f", "patch": "@@ -1,3 +1,13 @@\n+2011-01-12  Nicola Pero  <nicola.pero@meta-innovation.com>\t\n+\n+\t* c-parser.c (c_parser_objc_at_property_declaration): Improved\n+\terror message.\t\n+\t\n+2011-01-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* c-parser.c (c_lex_one_token): Updated and reindented some\n+\tcomments.  No changes in code.\n+\n 2011-01-11  Ian Lance Taylor  <iant@google.com>\n \n \t* godump.c (go_output_var): Don't output the variable if there is"}, {"sha": "51df18886f4f0adf64c469d9ab211874252c7312", "filename": "gcc/c-parser.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d853ee42d2bd96a3d589e349c57a2e71e4ace38f/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d853ee42d2bd96a3d589e349c57a2e71e4ace38f/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=d853ee42d2bd96a3d589e349c57a2e71e4ace38f", "patch": "@@ -253,8 +253,7 @@ c_lex_one_token (c_parser *parser, c_token *token)\n \t\t/* We found an Objective-C \"pq\" keyword (in, out,\n \t\t   inout, bycopy, byref, oneway).  They need special\n \t\t   care because the interpretation depends on the\n-\t\t   context.\n-\t\t */\n+\t\t   context.  */\n \t\tif (parser->objc_pq_context)\n \t\t  {\n \t\t    token->type = CPP_KEYWORD;\n@@ -275,21 +274,19 @@ c_lex_one_token (c_parser *parser, c_token *token)\n \t\t       you can't use 'in' as the name of the running\n \t\t       variable in a C for loop.  We could potentially\n \t\t       try to add code here to disambiguate, but it\n-\t\t       seems a reasonable limitation.\n-\t\t    */\n+\t\t       seems a reasonable limitation.  */\n \t\t    token->type = CPP_KEYWORD;\n \t\t    token->keyword = rid_code;\n \t\t    break;\n \t\t  }\n \t\t/* Else, \"pq\" keywords outside of the \"pq\" context are\n \t\t   not keywords, and we fall through to the code for\n-\t\t   normal tokens.\n-\t\t*/\n+\t\t   normal tokens.  */\n \t      }\n \t    else if (c_dialect_objc () && OBJC_IS_PATTR_KEYWORD (rid_code))\n \t      {\n-\t\t/* We found an Objective-C \"property attribute\" keyword \n-\t\t   (readonly, copies, getter, setter, ivar). These are \n+\t\t/* We found an Objective-C \"property attribute\"\n+\t\t   keyword (getter, setter, readonly, etc). These are\n \t\t   only valid in the property context.  */\n \t\tif (parser->objc_property_attr_context)\n \t\t  {\n@@ -310,8 +307,7 @@ c_lex_one_token (c_parser *parser, c_token *token)\n \t\t   protected, public, try, catch, throw) without a\n \t\t   preceding '@' sign.  Do nothing and fall through to\n \t\t   the code for normal tokens (in C++ we would still\n-\t\t   consider the CXX ones keywords, but not in C).\n-\t\t*/\n+\t\t   consider the CXX ones keywords, but not in C).  */\n \t\t;\n \t      }\n \t    else\n@@ -7961,8 +7957,12 @@ c_parser_objc_at_property_declaration (c_parser *parser)\n \t    case RID_SETTER:\n \t      if (c_parser_next_token_is_not (parser, CPP_EQ))\n \t\t{\n-\t\t  c_parser_error (parser,\n-\t\t\t\t  \"getter/setter attribute must be followed by %<=%>\");\n+\t\t  if (keyword == RID_GETTER)\n+\t\t    c_parser_error (parser,\n+\t\t\t\t    \"missing %<=%> (after %<getter%> attribute)\");\n+\t\t  else\n+\t\t    c_parser_error (parser,\n+\t\t\t\t    \"missing %<=%> (after %<setter%> attribute)\");\n \t\t  syntax_error = true;\n \t\t  break;\n \t\t}"}, {"sha": "0616dccc251c1d9cc952c3aa901ae51c7b760b96", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d853ee42d2bd96a3d589e349c57a2e71e4ace38f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d853ee42d2bd96a3d589e349c57a2e71e4ace38f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d853ee42d2bd96a3d589e349c57a2e71e4ace38f", "patch": "@@ -1,3 +1,8 @@\n+2011-01-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* parser.c (cp_parser_objc_at_property_declaration): Improved\n+\terror message.\n+\n 2011-01-11  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR debug/46955"}, {"sha": "e63d9765c58d1bbbe0e764aa09f583d7a5a3a5b1", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d853ee42d2bd96a3d589e349c57a2e71e4ace38f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d853ee42d2bd96a3d589e349c57a2e71e4ace38f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d853ee42d2bd96a3d589e349c57a2e71e4ace38f", "patch": "@@ -23087,8 +23087,12 @@ cp_parser_objc_at_property_declaration (cp_parser *parser)\n \t    case RID_SETTER:\n \t      if (cp_lexer_next_token_is_not (parser->lexer, CPP_EQ))\n \t\t{\n-\t\t  cp_parser_error (parser,\n-\t\t\t\t   \"getter/setter/ivar attribute must be followed by %<=%>\");\n+\t\t  if (keyword == RID_GETTER)\n+\t\t    cp_parser_error (parser,\n+\t\t\t\t     \"missing %<=%> (after %<getter%> attribute)\");\n+\t\t  else\n+\t\t    cp_parser_error (parser,\n+\t\t\t\t     \"missing %<=%> (after %<setter%> attribute)\");\n \t\t  syntax_error = true;\n \t\t  break;\n \t\t}\n@@ -23128,13 +23132,17 @@ cp_parser_objc_at_property_declaration (cp_parser *parser)\n \n \t  if (syntax_error)\n \t    break;\n-\t  \n+\n \t  if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))\n \t    cp_lexer_consume_token (parser->lexer);\n \t  else\n \t    break;\n \t}\n \n+      /* FIXME: \"@property (setter, assign);\" will generate a spurious\n+\t \"error: expected \u2018)\u2019 before \u2018,\u2019 token\".  This is because\n+\t cp_parser_require, unlike the C counterpart, will produce an\n+\t error even if we are in error recovery.  */\n       if (!cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN))\n \t{\n \t  cp_parser_skip_to_closing_parenthesis (parser,"}, {"sha": "15ffa935e81a4be517f4a833132040ff6c16e548", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d853ee42d2bd96a3d589e349c57a2e71e4ace38f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d853ee42d2bd96a3d589e349c57a2e71e4ace38f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d853ee42d2bd96a3d589e349c57a2e71e4ace38f", "patch": "@@ -1,3 +1,8 @@\n+2011-01-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/property/at-property-29.m: New.\n+\t* obj-c++.dg/property/at-property-29.mm: New.\t\n+\t\n 2011-01-11  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* go.test/go-test.exp (go-set-goarch): New proc."}, {"sha": "0f31617f841d7f2dc43ad09d01ed93e58238be4b", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-29.mm", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d853ee42d2bd96a3d589e349c57a2e71e4ace38f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-29.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d853ee42d2bd96a3d589e349c57a2e71e4ace38f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-29.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-29.mm?ref=d853ee42d2bd96a3d589e349c57a2e71e4ace38f", "patch": "@@ -0,0 +1,14 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, January 2011.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+/* Test missing '=' in setter/getter attributes.  */\n+@property (getter)  int property_a; /* { dg-error \"missing .=. .after .getter. attribute.\" } */\n+@property (setter) int property_b;  /* { dg-error \"missing .=. .after .setter. attribute.\" } */\n+@property (assign, getter) int property_c; /* { dg-error \"missing .=. .after .getter. attribute.\" } */\n+@end"}, {"sha": "0f31617f841d7f2dc43ad09d01ed93e58238be4b", "filename": "gcc/testsuite/objc.dg/property/at-property-29.m", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d853ee42d2bd96a3d589e349c57a2e71e4ace38f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-29.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d853ee42d2bd96a3d589e349c57a2e71e4ace38f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-29.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-29.m?ref=d853ee42d2bd96a3d589e349c57a2e71e4ace38f", "patch": "@@ -0,0 +1,14 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, January 2011.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+/* Test missing '=' in setter/getter attributes.  */\n+@property (getter)  int property_a; /* { dg-error \"missing .=. .after .getter. attribute.\" } */\n+@property (setter) int property_b;  /* { dg-error \"missing .=. .after .setter. attribute.\" } */\n+@property (assign, getter) int property_c; /* { dg-error \"missing .=. .after .getter. attribute.\" } */\n+@end"}]}