{"sha": "1ce35d260ce28d8bf428ef923169899be85a382e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNlMzVkMjYwY2UyOGQ4YmY0MjhlZjkyMzE2OTg5OWJlODVhMzgyZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-07-07T12:31:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-07-07T12:31:29Z"}, "message": "re PR tree-optimization/28187 ('-O2 -fwrapv' exhausts memory.)\n\n2006-07-07  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/28187\n\t* tree-vrp.c (vrp_operand_equal_p): New function.\n\t(vrp_bitmap_equal_p): Likewise.\n\t(update_value_range): Use them to compare old and new\n\tmax and min values.\n\n\t* gcc.dg/pr28187.c: New testcase.\n\nFrom-SVN: r115255", "tree": {"sha": "6302ef291529a9f7d84576775cadb3ee62a10839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6302ef291529a9f7d84576775cadb3ee62a10839"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ce35d260ce28d8bf428ef923169899be85a382e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce35d260ce28d8bf428ef923169899be85a382e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ce35d260ce28d8bf428ef923169899be85a382e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce35d260ce28d8bf428ef923169899be85a382e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b5b1842549c359a16002b52b0de2b82183c1735b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5b1842549c359a16002b52b0de2b82183c1735b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5b1842549c359a16002b52b0de2b82183c1735b"}], "stats": {"total": 62, "additions": 57, "deletions": 5}, "files": [{"sha": "79fb2a63e5b3dc80237a6dda20fc07706f63502b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce35d260ce28d8bf428ef923169899be85a382e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce35d260ce28d8bf428ef923169899be85a382e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ce35d260ce28d8bf428ef923169899be85a382e", "patch": "@@ -1,3 +1,11 @@\n+2006-07-07  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/28187\n+\t* tree-vrp.c (vrp_operand_equal_p): New function.\n+\t(vrp_bitmap_equal_p): Likewise.\n+\t(update_value_range): Use them to compare old and new\n+\tmax and min values.\n+\n 2006-07-06  Roger Sayle  <roger@eyesopen.com>\n \n \t* c-parser.c (c_parser_skip_to_end_of_block_or_statement): Add"}, {"sha": "eb1b5d00054a49d7ebfd147451d2da2e040ee92a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce35d260ce28d8bf428ef923169899be85a382e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce35d260ce28d8bf428ef923169899be85a382e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ce35d260ce28d8bf428ef923169899be85a382e", "patch": "@@ -1,3 +1,8 @@\n+2006-07-07  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/28187\n+\t* gcc.dg/pr28187.c: New testcase.\n+\n 2006-07-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/address_conversion.adb: New test."}, {"sha": "bc3b62d3362bce2111fe40420da64dc461997b58", "filename": "gcc/testsuite/gcc.dg/pr28187.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce35d260ce28d8bf428ef923169899be85a382e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28187.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce35d260ce28d8bf428ef923169899be85a382e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28187.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28187.c?ref=1ce35d260ce28d8bf428ef923169899be85a382e", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ftree-vrp -fwrapv\" } */\n+\n+extern void bar(int);\n+void checkgroups(int last, int verbose) \n+{\n+    int window = 0;\n+    int outstanding = 0;\n+    while (window < last || outstanding) {\n+\twhile (outstanding < 47 && window < last) {\n+\t    if (window < last) { \n+\t\toutstanding++; \n+\t\tif (verbose)\n+\t\t    bar(window);\n+\t\tbar(window++);\n+\t    }\n+\t}\n+\tif (outstanding > 0)\n+\t    bar(0);\n+    }\n+}\n+"}, {"sha": "64f292e89c40ccb56de98a80978bb426aaa981f4", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce35d260ce28d8bf428ef923169899be85a382e/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce35d260ce28d8bf428ef923169899be85a382e/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=1ce35d260ce28d8bf428ef923169899be85a382e", "patch": "@@ -290,6 +290,25 @@ get_value_range (tree var)\n   return vr;\n }\n \n+/* Return true, if VAL1 and VAL2 are equal values for VRP purposes.  */\n+\n+static inline bool\n+vrp_operand_equal_p (tree val1, tree val2)\n+{\n+  return (val1 == val2\n+\t  || (val1 && val2\n+\t      && operand_equal_p (val1, val2, 0)));\n+}\n+\n+/* Return true, if the bitmaps B1 and B2 are equal.  */\n+\n+static inline bool\n+vrp_bitmap_equal_p (bitmap b1, bitmap b2)\n+{\n+  return (b1 == b2\n+\t  || (b1 && b2\n+\t      && bitmap_equal_p (b1, b2)));\n+}\n \n /* Update the value range and equivalence set for variable VAR to\n    NEW_VR.  Return true if NEW_VR is different from VAR's previous\n@@ -310,11 +329,9 @@ update_value_range (tree var, value_range_t *new_vr)\n   /* Update the value range, if necessary.  */\n   old_vr = get_value_range (var);\n   is_new = old_vr->type != new_vr->type\n-           || old_vr->min != new_vr->min\n-\t   || old_vr->max != new_vr->max\n-\t   || (old_vr->equiv == NULL && new_vr->equiv)\n-\t   || (old_vr->equiv && new_vr->equiv == NULL)\n-\t   || (!bitmap_equal_p (old_vr->equiv, new_vr->equiv));\n+\t   || !vrp_operand_equal_p (old_vr->min, new_vr->min)\n+\t   || !vrp_operand_equal_p (old_vr->max, new_vr->max)\n+\t   || !vrp_bitmap_equal_p (old_vr->equiv, new_vr->equiv);\n \n   if (is_new)\n     set_value_range (old_vr, new_vr->type, new_vr->min, new_vr->max,"}]}