{"sha": "1bfe2e5fca9f4962aed93b1a1696784bf9cf1909", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJmZTJlNWZjYTlmNDk2MmFlZDkzYjFhMTY5Njc4NGJmOWNmMTkwOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-04-06T23:36:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-04-06T23:36:56Z"}, "message": "re PR libstdc++/31117 (c++locale.o thread-unsafe in libstdc++)\n\n2007-04-06  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/31117\n\t* config/locale/gnu/c_locale.cc (__convert_to_v): Do not use errno,\n\tjust check that the value is finite.\n\t* config/locale/generic/c_locale.cc (__convert_to_v): Likewise.\n\nFrom-SVN: r123635", "tree": {"sha": "c771b6beaa1c816e9c29838ff51c42346b3c0734", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c771b6beaa1c816e9c29838ff51c42346b3c0734"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bfe2e5fca9f4962aed93b1a1696784bf9cf1909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bfe2e5fca9f4962aed93b1a1696784bf9cf1909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bfe2e5fca9f4962aed93b1a1696784bf9cf1909", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bfe2e5fca9f4962aed93b1a1696784bf9cf1909/comments", "author": null, "committer": null, "parents": [{"sha": "91f753f8eed9fa2a89b149b02ac9059755598103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f753f8eed9fa2a89b149b02ac9059755598103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91f753f8eed9fa2a89b149b02ac9059755598103"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "660099780ac41b2e80f9658360bef08adc3954a5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfe2e5fca9f4962aed93b1a1696784bf9cf1909/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfe2e5fca9f4962aed93b1a1696784bf9cf1909/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1bfe2e5fca9f4962aed93b1a1696784bf9cf1909", "patch": "@@ -1,3 +1,10 @@\n+2007-04-06  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/31117\n+\t* config/locale/gnu/c_locale.cc (__convert_to_v): Do not use errno,\n+\tjust check that the value is finite.\n+\t* config/locale/generic/c_locale.cc (__convert_to_v): Likewise.\n+\n 2007-04-06  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/type_traits.h (__numeric_traits): Move..."}, {"sha": "f448fa8c983398cbda7f6ff6defb2b4f61069e95", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfe2e5fca9f4962aed93b1a1696784bf9cf1909/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfe2e5fca9f4962aed93b1a1696784bf9cf1909/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=1bfe2e5fca9f4962aed93b1a1696784bf9cf1909", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -34,7 +34,6 @@\n \n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n-#include <cerrno>  // For errno\n #include <cmath>  // For isinf, finite, finitef, fabs\n #include <cstdlib>  // For strof, strtold\n #include <locale>\n@@ -52,7 +51,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t   const __c_locale&) \t      \n     {\n       // Assumes __s formatted for \"C\" locale.\n-      errno = 0;\n       char* __old = strdup(setlocale(LC_ALL, NULL));\n       setlocale(LC_ALL, \"C\");\n       char* __sanity;\n@@ -63,19 +61,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       float __f = static_cast<float>(__d);\n #ifdef _GLIBCXX_HAVE_FINITEF\n       if (!finitef (__f))\n-\terrno = ERANGE;\n+\t__f = __builtin_huge_valf();\n #elif defined (_GLIBCXX_HAVE_FINITE)\n       if (!finite (static_cast<double> (__f)))\n-\terrno = ERANGE;\n+\t__f = __builtin_huge_valf();\n #elif defined (_GLIBCXX_HAVE_ISINF)\n       if (isinf (static_cast<double> (__f)))\n-\terrno = ERANGE;\n+\t__f = __builtin_huge_valf();\n #else\n       if (fabs(__d) > numeric_limits<float>::max())\n-\terrno = ERANGE;\n+\t__f = __builtin_huge_valf();\n #endif\n #endif\n-      if (__sanity != __s && errno != ERANGE)\n+      if (__sanity != __s && __f != __builtin_huge_valf()\n+\t  && __f != -__builtin_huge_valf())\n \t__v = __f;\n       else\n \t__err |= ios_base::failbit;\n@@ -89,12 +88,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t   const __c_locale&) \n     {\n       // Assumes __s formatted for \"C\" locale.\n-      errno = 0;\n       char* __old = strdup(setlocale(LC_ALL, NULL));\n       setlocale(LC_ALL, \"C\");\n       char* __sanity;\n       double __d = strtod(__s, &__sanity);\n-      if (__sanity != __s && errno != ERANGE)\n+      if (__sanity != __s && __d != __builtin_huge_val()\n+\t  && __d != -__builtin_huge_val())\n \t__v = __d;\n       else\n \t__err |= ios_base::failbit;\n@@ -108,20 +107,21 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t   ios_base::iostate& __err, const __c_locale&) \n     {\n       // Assumes __s formatted for \"C\" locale.\n-      errno = 0;\n       char* __old = strdup(setlocale(LC_ALL, NULL));\n       setlocale(LC_ALL, \"C\");\n #if defined(_GLIBCXX_HAVE_STRTOLD)\n       char* __sanity;\n       long double __ld = strtold(__s, &__sanity);\n-      if (__sanity != __s && errno != ERANGE)\n+      if (__sanity != __s && __ld != __builtin_huge_vall()\n+\t  && __ld != -__builtin_huge_vall())\n \t__v = __ld;\n #else\n       typedef char_traits<char>::int_type int_type;\n       long double __ld;\n       int __p = sscanf(__s, \"%Lf\", &__ld);\n       if (__p && static_cast<int_type>(__p) != char_traits<char>::eof()\n-\t  && errno != ERANGE)\n+\t  && __ld != __builtin_huge_vall()\n+\t  && __ld != -__builtin_huge_vall())\n \t__v = __ld;\n #endif\n       else"}, {"sha": "a811cc750c2538adacd0054b807b7ff74a3b6f57", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfe2e5fca9f4962aed93b1a1696784bf9cf1909/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfe2e5fca9f4962aed93b1a1696784bf9cf1909/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=1bfe2e5fca9f4962aed93b1a1696784bf9cf1909", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -34,7 +34,6 @@\n \n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n-#include <cerrno>  // For errno\n #include <locale>\n #include <stdexcept>\n #include <langinfo.h>\n@@ -48,9 +47,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t   const __c_locale& __cloc)\n     {\n       char* __sanity;\n-      errno = 0;\n       float __f = __strtof_l(__s, &__sanity, __cloc);\n-      if (__sanity != __s && errno != ERANGE)\n+      if (__sanity != __s && __f != __builtin_huge_valf()\n+\t  && __f != -__builtin_huge_valf())\n \t__v = __f;\n       else\n \t__err |= ios_base::failbit;\n@@ -62,9 +61,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t   const __c_locale& __cloc)\n     {\n       char* __sanity;\n-      errno = 0;\n       double __d = __strtod_l(__s, &__sanity, __cloc);\n-      if (__sanity != __s && errno != ERANGE)\n+      if (__sanity != __s && __d != __builtin_huge_val()\n+\t  && __d != -__builtin_huge_val())\n \t__v = __d;\n       else\n \t__err |= ios_base::failbit;\n@@ -76,15 +75,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t   const __c_locale& __cloc)\n     {\n       char* __sanity;\n-      errno = 0;\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n       // Prefer strtold_l, as __strtold_l isn't prototyped in more recent\n       // glibc versions.\n       long double __ld = strtold_l(__s, &__sanity, __cloc);\n #else\n       long double __ld = __strtold_l(__s, &__sanity, __cloc);\n #endif\n-      if (__sanity != __s && errno != ERANGE)\n+      if (__sanity != __s && __ld != __builtin_huge_vall()\n+\t  && __ld != -__builtin_huge_vall())\n \t__v = __ld;\n       else\n \t__err |= ios_base::failbit;"}]}