{"sha": "cac24f06cb5600e5e744e724764687b2837a2a52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FjMjRmMDZjYjU2MDBlNWU3NDRlNzI0NzY0Njg3YjI4MzdhMmE1Mg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-06-19T20:12:16Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-06-19T20:12:16Z"}, "message": "i386.c (TARGET_MANGLE_FUNDAMENTAL_TYPE): Define.\n\n\t* config/i386/i386.c (TARGET_MANGLE_FUNDAMENTAL_TYPE): Define.\n\t(ix86_mangle_fundamental_type): New.\n\t* config/ia64/ia64.c (TARGET_MANGLE_FUNDAMENTAL_TYPE): Define.\n\t(ia64_mangle_fundamental_type): New.\n\ntestsuite:\n\t* g++.dg/abi/mangle24.C, g++.dg/abi/mangle25.C: New tests.\n\nFrom-SVN: r101191", "tree": {"sha": "8e704170ad94af96c0f083d2ecfe2c5891e475cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e704170ad94af96c0f083d2ecfe2c5891e475cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cac24f06cb5600e5e744e724764687b2837a2a52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cac24f06cb5600e5e744e724764687b2837a2a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cac24f06cb5600e5e744e724764687b2837a2a52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cac24f06cb5600e5e744e724764687b2837a2a52/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5556f74b3a46fe10f286b1efb27f0f1d09bc6a20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5556f74b3a46fe10f286b1efb27f0f1d09bc6a20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5556f74b3a46fe10f286b1efb27f0f1d09bc6a20"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "ab9dcd36919b04138867c11d4032f9d1698e574b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac24f06cb5600e5e744e724764687b2837a2a52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac24f06cb5600e5e744e724764687b2837a2a52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cac24f06cb5600e5e744e724764687b2837a2a52", "patch": "@@ -1,3 +1,10 @@\n+2005-06-19  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* config/i386/i386.c (TARGET_MANGLE_FUNDAMENTAL_TYPE): Define.\n+\t(ix86_mangle_fundamental_type): New.\n+\t* config/ia64/ia64.c (TARGET_MANGLE_FUNDAMENTAL_TYPE): Define.\n+\t(ia64_mangle_fundamental_type): New.\n+\n 2005-06-19  Roger Sayle  <roger@eyesopen.com>\n \n \t* c-decl.c (grokdeclarator): Only check TREE_OVERFLOW on"}, {"sha": "8425ef83b9555dc446a6f09bc35f4420244e2191", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac24f06cb5600e5e744e724764687b2837a2a52/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac24f06cb5600e5e744e724764687b2837a2a52/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cac24f06cb5600e5e744e724764687b2837a2a52", "patch": "@@ -905,6 +905,7 @@ static bool ix86_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t    tree, bool);\n static void ix86_init_builtins (void);\n static rtx ix86_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n+static const char *ix86_mangle_fundamental_type (tree);\n \n /* This function is only used on Solaris.  */\n static void i386_solaris_elf_named_section (const char *, unsigned int, tree)\n@@ -1077,6 +1078,9 @@ static void init_ext_80387_constants (void);\n #define TARGET_INSERT_ATTRIBUTES SUBTARGET_INSERT_ATTRIBUTES\n #endif\n \n+#undef TARGET_MANGLE_FUNDAMENTAL_TYPE\n+#define TARGET_MANGLE_FUNDAMENTAL_TYPE ix86_mangle_fundamental_type\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f\n@@ -17539,4 +17543,22 @@ i386_solaris_elf_named_section (const char *name, unsigned int flags,\n   default_elf_asm_named_section (name, flags, decl);\n }\n \n+/* Return the mangling of TYPE if it is an extended fundamental type.  */\n+\n+static const char *\n+ix86_mangle_fundamental_type (tree type)\n+{\n+  switch (TYPE_MODE (type))\n+    {\n+    case TFmode:\n+      /* __float128 is \"g\".  */\n+      return \"g\";\n+    case XFmode:\n+      /* \"long double\" or __float80 is \"e\".  */\n+      return \"e\";\n+    default:\n+      return NULL;\n+    }\n+}\n+\n #include \"gt-i386.h\""}, {"sha": "e64962a8bd0be14f1241e31d5f830100f1728dc9", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac24f06cb5600e5e744e724764687b2837a2a52/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac24f06cb5600e5e744e724764687b2837a2a52/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=cac24f06cb5600e5e744e724764687b2837a2a52", "patch": "@@ -262,6 +262,7 @@ static tree ia64_gimplify_va_arg (tree, tree, tree *, tree *);\n static bool ia64_scalar_mode_supported_p (enum machine_mode mode);\n static bool ia64_vector_mode_supported_p (enum machine_mode mode);\n static bool ia64_cannot_force_const_mem (rtx);\n+static const char *ia64_mangle_fundamental_type (tree);\n \f\n /* Table of valid machine attributes.  */\n static const struct attribute_spec ia64_attribute_table[] =\n@@ -429,6 +430,9 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM ia64_cannot_force_const_mem\n \n+#undef TARGET_MANGLE_FUNDAMENTAL_TYPE\n+#define TARGET_MANGLE_FUNDAMENTAL_TYPE ia64_mangle_fundamental_type\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n typedef enum\n@@ -8639,4 +8643,21 @@ ia64_profile_hook (int labelno)\n \t\t     label, Pmode);\n }\n \n+/* Return the mangling of TYPE if it is an extended fundamental type.  */\n+\n+static const char *\n+ia64_mangle_fundamental_type (tree type)\n+{\n+  /* On HP-UX, \"long double\" is mangled as \"e\" so __float128 is\n+     mangled as \"e\".  */\n+  if (!TARGET_HPUX && TYPE_MODE (type) == TFmode)\n+    return \"g\";\n+  /* On HP-UX, \"e\" is not available as a mangling of __float80 so use\n+     an extended mangling.  Elsewhere, \"e\" is available since long\n+     double is 80 bits.  */\n+  if (TYPE_MODE (type) == XFmode)\n+    return TARGET_HPUX ? \"u9__float80\" : \"e\";\n+  return NULL;\n+}\n+\n #include \"gt-ia64.h\""}, {"sha": "92b2b7159253d76647232bbc2812a6950d6ff1a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac24f06cb5600e5e744e724764687b2837a2a52/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac24f06cb5600e5e744e724764687b2837a2a52/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cac24f06cb5600e5e744e724764687b2837a2a52", "patch": "@@ -1,3 +1,7 @@\n+2005-06-19  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* g++.dg/abi/mangle24.C, g++.dg/abi/mangle25.C: New tests.\n+\n 2005-06-19  Aldy Hernandez  <aldyh@redhat.com>\n \n         PR c++/22115"}, {"sha": "3a9f629d5bf84f94740a6e961894155f9d04641f", "filename": "gcc/testsuite/g++.dg/abi/mangle24.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac24f06cb5600e5e744e724764687b2837a2a52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac24f06cb5600e5e744e724764687b2837a2a52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle24.C?ref=cac24f06cb5600e5e744e724764687b2837a2a52", "patch": "@@ -0,0 +1,12 @@\n+// Test mangling of __float80.\n+// The C++ ABI document says __float80 is mangled as \"e\".  It\n+// also says that \"long double\" is mangled as \"e\", so these conflict on\n+// ia64-hpux where \"long double\" is \"e\" and __float80 is \"u9__float80\".\n+// Origin: Joseph Myers <joseph@codesourcery.com>\n+// { dg-do compile { target i?86-*-* x86_64-*-* ia64-*-* } } */\n+// { dg-options \"\" } */\n+// { dg-final { scan-assembler \"_Z1fe\" { target i?86-*-* x86_64-*-* } } } */\n+// { dg-final { scan-assembler \"_Z1fe\" { target { ia64-*-* && { ! \"ia64-*-hpux*\" } } } } } */\n+// { dg-final { scan-assembler \"_Z1fu9__float80\" { target ia64-*-hpux* } } } */\n+\n+int f(__float80 x) { return 0; }"}, {"sha": "981f02c4ef8a63121642f7001696c47f48121b3d", "filename": "gcc/testsuite/g++.dg/abi/mangle25.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac24f06cb5600e5e744e724764687b2837a2a52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac24f06cb5600e5e744e724764687b2837a2a52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle25.C?ref=cac24f06cb5600e5e744e724764687b2837a2a52", "patch": "@@ -0,0 +1,13 @@\n+// Test mangling of __float128.\n+// The C++ ABI document says __float128 is mangled as \"g\".  It\n+// also says that \"long double\" is mangled as \"e\", so these conflict on\n+// ia64-hpux where \"long double\" is \"e\" and __float128 is synonymous with\n+// \"long double\".\n+// Origin: Joseph Myers <joseph@codesourcery.com>\n+// { dg-do compile { target i?86-*-* x86_64-*-* ia64-*-* } } */\n+// { dg-options \"\" } */\n+// { dg-final { scan-assembler \"_Z1fg\" { target i?86-*-* x86_64-*-* } } } */\n+// { dg-final { scan-assembler \"_Z1fg\" { target { ia64-*-* && { ! \"ia64-*-hpux*\" } } } } } */\n+// { dg-final { scan-assembler \"_Z1fe\" { target ia64-*-hpux* } } } */\n+\n+int f(__float128 x) { return 0; }"}]}