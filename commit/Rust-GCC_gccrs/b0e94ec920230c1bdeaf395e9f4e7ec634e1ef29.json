{"sha": "b0e94ec920230c1bdeaf395e9f4e7ec634e1ef29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBlOTRlYzkyMDIzMGMxYmRlYWYzOTVlOWY0ZTdlYzYzNGUxZWYyOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-05-22T22:43:22Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-05-22T22:43:22Z"}, "message": "testsuite_allocator.h (check_new): Assign false to new_called.\n\n2007-05-22  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/util/testsuite_allocator.h (check_new): Assign false\n\tto new_called.\n\t(check_delete): Likewise for delete_called.\n\nFrom-SVN: r124966", "tree": {"sha": "cf48b7a376258c75925fe7e5a22a0772727521a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf48b7a376258c75925fe7e5a22a0772727521a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0e94ec920230c1bdeaf395e9f4e7ec634e1ef29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e94ec920230c1bdeaf395e9f4e7ec634e1ef29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0e94ec920230c1bdeaf395e9f4e7ec634e1ef29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e94ec920230c1bdeaf395e9f4e7ec634e1ef29/comments", "author": null, "committer": null, "parents": [{"sha": "0a2acc8a59f838db412f32d3f73dd8e0f1dd6aea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2acc8a59f838db412f32d3f73dd8e0f1dd6aea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a2acc8a59f838db412f32d3f73dd8e0f1dd6aea"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "0c66fea67a28194e0daa7f2439f8909d53e9a789", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e94ec920230c1bdeaf395e9f4e7ec634e1ef29/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e94ec920230c1bdeaf395e9f4e7ec634e1ef29/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b0e94ec920230c1bdeaf395e9f4e7ec634e1ef29", "patch": "@@ -1,3 +1,9 @@\n+2007-05-22  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/util/testsuite_allocator.h (check_new): Assign false\n+\tto new_called.\n+\t(check_delete): Likewise for delete_called.\n+\n 2007-05-21  Paolo Carlini  <pcarlini@suse.de>\n \n \t* config/locale/gnu/c_locale.h: Do not include <cstdarg>, use builtins."}, {"sha": "aaed7311f68ed598c7569cf88ab3d099b93d6b99", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e94ec920230c1bdeaf395e9f4e7ec634e1ef29/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e94ec920230c1bdeaf395e9f4e7ec634e1ef29/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=b0e94ec920230c1bdeaf395e9f4e7ec634e1ef29", "patch": "@@ -1,7 +1,8 @@\n // -*- C++ -*-\n // Testing allocator for the C++ library testsuite.\n //\n-// Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,8 +42,8 @@\n \n namespace \n {\n-  bool new_called = false;\n-  bool delete_called = false;\n+  bool new_called;\n+  bool delete_called;\n };\n \n namespace __gnu_test\n@@ -188,6 +189,7 @@ namespace __gnu_test\n     check_new(Alloc a = Alloc())\n     {\n       bool test __attribute__((unused)) = true;\n+      new_called = false;\n       a.allocate(10);\n       test &= ( new_called == uses_global_new );\n       return test;\n@@ -198,6 +200,7 @@ namespace __gnu_test\n     check_delete(Alloc a = Alloc())\n     {\n       bool test __attribute__((unused)) = true;\n+      delete_called = false;\n       typename Alloc::pointer p = a.allocate(10);\n       a.deallocate(p, 10);\n       test &= ( delete_called == uses_global_delete );"}]}