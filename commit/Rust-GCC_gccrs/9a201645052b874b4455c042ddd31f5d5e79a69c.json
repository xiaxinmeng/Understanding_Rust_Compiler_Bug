{"sha": "9a201645052b874b4455c042ddd31f5d5e79a69c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEyMDE2NDUwNTJiODc0YjQ0NTVjMDQyZGRkMzFmNWQ1ZTc5YTY5Yw==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2011-10-29T15:57:00Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2011-10-29T15:57:00Z"}, "message": "re PR target/50691 (Incorrect argument evaluation in call with __thread argument)\n\n\tPR target/50691\n\tconfig/pa/pa.c (emit_move_sequence): Legitimize TLS symbol references.\n\t(pa_legitimate_constant_p): Return false for TLS_MODEL_GLOBAL_DYNAMIC\n\tand TLS_MODEL_LOCAL_DYNAMIC symbol references.\n\nFrom-SVN: r180655", "tree": {"sha": "34c75b89e40211352f5b68541e34bb02d1e4d1f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34c75b89e40211352f5b68541e34bb02d1e4d1f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a201645052b874b4455c042ddd31f5d5e79a69c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a201645052b874b4455c042ddd31f5d5e79a69c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a201645052b874b4455c042ddd31f5d5e79a69c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a201645052b874b4455c042ddd31f5d5e79a69c/comments", "author": null, "committer": null, "parents": [{"sha": "d702f362b50d9f6fe4a92b2404c6b9ec51f2708c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d702f362b50d9f6fe4a92b2404c6b9ec51f2708c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d702f362b50d9f6fe4a92b2404c6b9ec51f2708c"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "08687df0544a012152ff92bafa76ce0a09a58776", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a201645052b874b4455c042ddd31f5d5e79a69c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a201645052b874b4455c042ddd31f5d5e79a69c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a201645052b874b4455c042ddd31f5d5e79a69c", "patch": "@@ -1,3 +1,10 @@\n+2011-10-29  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR target/50691\n+\tconfig/pa/pa.c (emit_move_sequence): Legitimize TLS symbol references.\n+\t(pa_legitimate_constant_p): Return false for TLS_MODEL_GLOBAL_DYNAMIC\n+\tand TLS_MODEL_LOCAL_DYNAMIC symbol references.\n+\n 2011-10-29  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/50887"}, {"sha": "85ccf896227d1263b41892ada6a2dc5ad1792c7f", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a201645052b874b4455c042ddd31f5d5e79a69c/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a201645052b874b4455c042ddd31f5d5e79a69c/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=9a201645052b874b4455c042ddd31f5d5e79a69c", "patch": "@@ -1781,6 +1781,11 @@ emit_move_sequence (rtx *operands, enum machine_mode mode, rtx scratch_reg)\n   /* Handle the most common case: storing into a register.  */\n   else if (register_operand (operand0, mode))\n     {\n+      /* Legitimize TLS symbol references.  This happens for references\n+\t that aren't a legitimate constant.  */\n+      if (PA_SYMBOL_REF_TLS_P (operand1))\n+\toperand1 = legitimize_tls_address (operand1);\n+\n       if (register_operand (operand1, mode)\n \t  || (GET_CODE (operand1) == CONST_INT\n \t      && cint_ok_for_move (INTVAL (operand1)))\n@@ -10271,6 +10276,16 @@ pa_legitimate_constant_p (enum machine_mode mode, rtx x)\n   if (!NEW_HP_ASSEMBLER && !TARGET_GAS && GET_CODE (x) == LABEL_REF)\n     return false;\n \n+  /* TLS_MODEL_GLOBAL_DYNAMIC and TLS_MODEL_LOCAL_DYNAMIC are not\n+     legitimate constants.  */\n+  if (PA_SYMBOL_REF_TLS_P (x))\n+   {\n+     enum tls_model model = SYMBOL_REF_TLS_MODEL (x);\n+\n+     if (model == TLS_MODEL_GLOBAL_DYNAMIC || model == TLS_MODEL_LOCAL_DYNAMIC)\n+       return false;\n+   }\n+\n   if (TARGET_64BIT && GET_CODE (x) == CONST_DOUBLE)\n     return false;\n "}]}