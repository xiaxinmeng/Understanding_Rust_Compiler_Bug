{"sha": "b7cdaf8d70992dc69fb276e86e8fe75d15ed7b0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdjZGFmOGQ3MDk5MmRjNjlmYjI3NmU4NmU4ZmU3NWQxNWVkN2IwYg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2005-03-15T16:01:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-03-15T16:01:19Z"}, "message": "exp_intr.adb (Expand_Unc_Conversion): As a target type...\n\n2005-03-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_intr.adb (Expand_Unc_Conversion): As a target type, use the type\n\tthat appears in the instantiation rather than the internal subtype\n\tgenerated in the wrapper package, to avoid anomalies in gigi when the\n\ttarget is derived from a private type whose full view is an access type.\n\nFrom-SVN: r96495", "tree": {"sha": "7fa4caa36aa305bfbec9158228357a6d5641d9aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fa4caa36aa305bfbec9158228357a6d5641d9aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7cdaf8d70992dc69fb276e86e8fe75d15ed7b0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7cdaf8d70992dc69fb276e86e8fe75d15ed7b0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7cdaf8d70992dc69fb276e86e8fe75d15ed7b0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7cdaf8d70992dc69fb276e86e8fe75d15ed7b0b/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a877ccc41ac01335c0915b2ed9215941e24f96a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a877ccc41ac01335c0915b2ed9215941e24f96a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a877ccc41ac01335c0915b2ed9215941e24f96a1"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "1efd42bb6b3376d78a929d693669a70a420293de", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7cdaf8d70992dc69fb276e86e8fe75d15ed7b0b/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7cdaf8d70992dc69fb276e86e8fe75d15ed7b0b/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=b7cdaf8d70992dc69fb276e86e8fe75d15ed7b0b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -479,6 +479,7 @@ package body Exp_Intr is\n       Func : constant Entity_Id  := Entity (Name (N));\n       Conv : Node_Id;\n       Ftyp : Entity_Id;\n+      Ttyp : Entity_Id;\n \n    begin\n       --  Rewrite as unchecked conversion node. Note that we must convert\n@@ -500,12 +501,33 @@ package body Exp_Intr is\n          Analyze_And_Resolve (Conv);\n       end if;\n \n+      --  The instantiation of Unchecked_Conversion creates a wrapper package,\n+      --  and the target type is declared as a subtype of the actual. Recover\n+      --  the actual, which is the subtype indic. in the subtype declaration\n+      --  for the target type. This is semantically correct, and avoids\n+      --  anomalies with access subtypes. For entities, leave type as is.\n+\n       --  We do the analysis here, because we do not want the compiler\n       --  to try to optimize or otherwise reorganize the unchecked\n       --  conversion node.\n \n-      Rewrite (N, Unchecked_Convert_To (Etype (E), Conv));\n-      Set_Etype (N, Etype (E));\n+      Ttyp := Etype (E);\n+\n+      if Is_Entity_Name (Conv) then\n+         null;\n+\n+      elsif Nkind (Parent (Ttyp)) = N_Subtype_Declaration then\n+         Ttyp := Entity (Subtype_Indication (Parent (Etype (E))));\n+\n+      elsif Is_Itype (Ttyp) then\n+         Ttyp :=\n+           Entity (Subtype_Indication (Associated_Node_For_Itype (Ttyp)));\n+      else\n+         raise Program_Error;\n+      end if;\n+\n+      Rewrite (N, Unchecked_Convert_To (Ttyp, Conv));\n+      Set_Etype (N, Ttyp);\n       Set_Analyzed (N);\n \n       if Nkind (N) = N_Unchecked_Type_Conversion then"}]}