{"sha": "497786446ba35ea6814862bcd76851e1379653ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk3Nzg2NDQ2YmEzNWVhNjgxNDg2MmJjZDc2ODUxZTEzNzk2NTNhYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-11-14T19:36:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-11-14T19:36:17Z"}, "message": "cfglayout.c (fixup_fallthru_exit_predecesor): New static function.\n\n\t* cfglayout.c (fixup_fallthru_exit_predecesor): New static function.\n\t(cfg_layout_finalize): Use it.\n\t* bb-reorder.c (HAVE_epilogue): Remove.\n\t(make_reorder_chain): Do not care special placement of\n\tlast basic block.\n\n\t* predict.c (expected_value_to_br_prob): Delete the note\n\tonce transformed.\n\n\t* c-decl.c (c_expand_body): Fix TV_EXPAND nesting problem;\n\tmeasure integration time separately.\n\nFrom-SVN: r47019", "tree": {"sha": "8373fb038b6e57cf4216b741d08ffb702752c650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8373fb038b6e57cf4216b741d08ffb702752c650"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/497786446ba35ea6814862bcd76851e1379653ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/497786446ba35ea6814862bcd76851e1379653ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/497786446ba35ea6814862bcd76851e1379653ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/497786446ba35ea6814862bcd76851e1379653ab/comments", "author": null, "committer": null, "parents": [{"sha": "852d3dad0dc7b0ed7144b1409393997830eab8d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852d3dad0dc7b0ed7144b1409393997830eab8d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852d3dad0dc7b0ed7144b1409393997830eab8d2"}], "stats": {"total": 71, "additions": 46, "deletions": 25}, "files": [{"sha": "44c54091de009d1594a383ce7d27ab577a6a3fd3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497786446ba35ea6814862bcd76851e1379653ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497786446ba35ea6814862bcd76851e1379653ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=497786446ba35ea6814862bcd76851e1379653ab", "patch": "@@ -1,3 +1,17 @@\n+Wed Nov 14 19:46:08 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cfglayout.c (fixup_fallthru_exit_predecesor): New static function.\n+\t(cfg_layout_finalize): Use it.\n+\t* bb-reorder.c (HAVE_epilogue): Remove.\n+\t(make_reorder_chain): Do not care special placement of \n+\tlast basic block.\n+\n+\t* predict.c (expected_value_to_br_prob): Delete the note\n+\tonce transformed.\n+\n+\t* c-decl.c (c_expand_body): Fix TV_EXPAND nesting problem;\n+\tmeasure integration time separately.\n+\n Wed Nov 14 12:30:57 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* function.c (struct temp_slot): ALIGN now unsigned."}, {"sha": "97ad1426b369fc12c441169666864fd72e245270", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497786446ba35ea6814862bcd76851e1379653ab/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497786446ba35ea6814862bcd76851e1379653ab/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=497786446ba35ea6814862bcd76851e1379653ab", "patch": "@@ -90,10 +90,6 @@\n #include \"output.h\"\n #include \"cfglayout.h\"\n \n-#ifndef HAVE_epilogue\n-#define HAVE_epilogue 0\n-#endif\n-\n /* Local function prototypes.  */\n static void make_reorder_chain\t\tPARAMS ((void));\n static basic_block make_reorder_chain_1\tPARAMS ((basic_block, basic_block));\n@@ -104,22 +100,10 @@ static basic_block make_reorder_chain_1\tPARAMS ((basic_block, basic_block));\n static void\n make_reorder_chain ()\n {\n-  basic_block last_block = NULL;\n   basic_block prev = NULL;\n   int nbb_m1 = n_basic_blocks - 1;\n   basic_block next;\n \n-  /* If we've not got epilogue in RTL, we must fallthru to the exit.\n-     Force the last block to be at the end.  */\n-  /* ??? Some ABIs (e.g. MIPS) require the return insn to be at the\n-     end of the function for stack unwinding purposes.  */\n-  if (! HAVE_epilogue)\n-    {\n-      last_block = BASIC_BLOCK (nbb_m1);\n-      RBI (last_block)->visited = 1;\n-      nbb_m1 -= 1;\n-    }\n-\n   /* Loop until we've placed every block.  */\n   do\n     {\n@@ -144,13 +128,6 @@ make_reorder_chain ()\n         prev = make_reorder_chain_1 (next, prev);\n     }\n   while (next);\n-\n-  /* Terminate the chain.  */\n-  if (! HAVE_epilogue)\n-    {\n-      RBI (prev)->next = last_block;\n-      prev = last_block;\n-    }\n   RBI (prev)->next = NULL;\n }\n "}, {"sha": "f2289fec3aa2fa75ab3416bee3f2752d3fba1c86", "filename": "gcc/c-decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497786446ba35ea6814862bcd76851e1379653ab/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497786446ba35ea6814862bcd76851e1379653ab/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=497786446ba35ea6814862bcd76851e1379653ab", "patch": "@@ -6783,13 +6783,12 @@ c_expand_body (fndecl, nested_p, can_defer_p)\n   if (flag_syntax_only)\n     return;\n \n-  timevar_push (TV_EXPAND);\n-\n   if (flag_inline_trees)\n     {\n       /* First, cache whether the current function is inlinable.  Some\n          predicates depend on cfun and current_function_decl to\n          function completely.  */\n+      timevar_push (TV_INTEGRATION);\n       uninlinable = ! tree_inlinable_function_p (fndecl);\n       \n       if (! uninlinable && can_defer_p\n@@ -6800,13 +6799,17 @@ c_expand_body (fndecl, nested_p, can_defer_p)\n \t{\n \t  /* Let the back-end know that this funtion exists.  */\n \t  (*debug_hooks->deferred_inline_function) (fndecl);\n+          timevar_pop (TV_INTEGRATION);\n \t  return;\n \t}\n       \n       /* Then, inline any functions called in it.  */\n       optimize_inline_calls (fndecl);\n+      timevar_pop (TV_INTEGRATION);\n     }\n \n+  timevar_push (TV_EXPAND);\n+\n   if (nested_p)\n     {\n       /* Make sure that we will evaluate variable-sized types involved"}, {"sha": "d93d44f7fed64e86c1e32235fedc47bcf3e2f0be", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497786446ba35ea6814862bcd76851e1379653ab/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497786446ba35ea6814862bcd76851e1379653ab/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=497786446ba35ea6814862bcd76851e1379653ab", "patch": "@@ -110,6 +110,7 @@ static rtx get_next_bb_note\t\tPARAMS ((rtx));\n static rtx get_prev_bb_note\t\tPARAMS ((rtx));\n \n void verify_insn_chain\t\t\tPARAMS ((void));\n+static basic_block fixup_fallthru_exit_predecesor PARAMS ((void));\n \f\n /* Skip over inter-block insns occurring after BB which are typically\n    associated with BB (e.g., barriers). If there are any such insns,\n@@ -1041,6 +1042,30 @@ verify_insn_chain ()\n       abort ();\n     }\n }\n+\n+/* The block falling trought to exit must be last in the reordered\n+   chain.  Make it happen so.  */\n+static basic_block\n+fixup_fallthru_exit_predecesor ()\n+{\n+  edge e;\n+  basic_block bb = NULL;\n+\n+  for (e = EXIT_BLOCK_PTR->pred; e; e = e->pred_next)\n+    if (e->flags & EDGE_FALLTHRU)\n+      bb = e->src;\n+  if (bb && RBI (bb)->next)\n+    {\n+      basic_block c = BASIC_BLOCK (0);\n+      while (RBI (c)->next != bb)\n+\tc = RBI (c)->next;\n+      RBI (c)->next = RBI (bb)->next;\n+      while (RBI (c)->next)\n+\tc = RBI (c)->next;\n+      RBI (c)->next = bb;\n+      RBI (bb)->next = NULL;\n+    }\n+}\n \f\n /* Main entry point to this module - initialize the datastructures for\n    CFG layout changes.  */\n@@ -1062,6 +1087,7 @@ cfg_layout_initialize ()\n void\n cfg_layout_finalize ()\n {\n+  fixup_fallthru_exit_predecesor ();\n   fixup_reorder_chain ();\n #ifdef ENABLE_CHECKING\n   verify_insn_chain ();"}, {"sha": "c5cc0a4a27b33e127fae00307a42df62faec0911", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497786446ba35ea6814862bcd76851e1379653ab/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497786446ba35ea6814862bcd76851e1379653ab/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=497786446ba35ea6814862bcd76851e1379653ab", "patch": "@@ -540,6 +540,7 @@ expected_value_to_br_prob ()\n \t    {\n \t      ev = NOTE_EXPECTED_VALUE (insn);\n \t      ev_reg = XEXP (ev, 0);\n+\t      delete_insn (insn);\n \t    }\n \t  continue;\n "}]}