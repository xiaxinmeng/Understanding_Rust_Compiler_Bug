{"sha": "d04c246cae674da081e1c9d8ba631560fee2fa91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA0YzI0NmNhZTY3NGRhMDgxZTFjOWQ4YmE2MzE1NjBmZWUyZmE5MQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-03-26T20:22:52Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-03-28T20:06:33Z"}, "message": "libstdc++: _GLIBCXX_DEBUG Fix allocator-extended move constructor\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/debug/forward_list\n\t(forward_list(forward_list&&, const allocator_type&)): Add noexcept qualification.\n\t* include/debug/list (list(list&&, const allocator_type&)): Likewise and add\n\tcall to safe container allocator aware move constructor.\n\t* include/debug/vector (vector(vector&&, const allocator_type&)):\n\tFix noexcept qualification.\n\t* testsuite/23_containers/forward_list/cons/noexcept_move_construct.cc:\n\tAdd allocator-extended move constructor noexceot qualification check.\n\t* testsuite/23_containers/list/cons/noexcept_move_construct.cc: Likewise.", "tree": {"sha": "79fc27c8c9b462fcbe779fc100074bc4041943e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79fc27c8c9b462fcbe779fc100074bc4041943e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d04c246cae674da081e1c9d8ba631560fee2fa91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04c246cae674da081e1c9d8ba631560fee2fa91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d04c246cae674da081e1c9d8ba631560fee2fa91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04c246cae674da081e1c9d8ba631560fee2fa91/comments", "author": null, "committer": null, "parents": [{"sha": "46720db72cadfb85501e102d94e06683300a2327", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46720db72cadfb85501e102d94e06683300a2327", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46720db72cadfb85501e102d94e06683300a2327"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "16f0531dce70a7b593a511616215e7bdecbf6e53", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04c246cae674da081e1c9d8ba631560fee2fa91/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04c246cae674da081e1c9d8ba631560fee2fa91/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=d04c246cae674da081e1c9d8ba631560fee2fa91", "patch": "@@ -239,8 +239,11 @@ namespace __debug\n       { }\n \n       forward_list(forward_list&& __list, const allocator_type& __al)\n-\t: _Safe(std::move(__list._M_safe()), __al),\n-\t  _Base(std::move(__list._M_base()), __al)\n+\tnoexcept(\n+\t  std::is_nothrow_constructible<_Base,\n+\t    _Base, const allocator_type&>::value )\n+      : _Safe(std::move(__list._M_safe()), __al),\n+\t_Base(std::move(__list._M_base()), __al)\n       { }\n \n       explicit"}, {"sha": "01fe43fc7df960ce5a603fa53f1d98a9bd9496e9", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04c246cae674da081e1c9d8ba631560fee2fa91/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04c246cae674da081e1c9d8ba631560fee2fa91/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=d04c246cae674da081e1c9d8ba631560fee2fa91", "patch": "@@ -119,7 +119,11 @@ namespace __debug\n       : _Base(__x, __a) { }\n \n       list(list&& __x, const allocator_type& __a)\n-      : _Base(std::move(__x), __a) { }\n+\tnoexcept(\n+\t  std::is_nothrow_constructible<_Base,\n+\t    _Base, const allocator_type&>::value )\n+      : _Safe(std::move(__x._M_safe()), __a),\n+\t_Base(std::move(__x._M_base()), __a) { }\n #endif\n \n       explicit"}, {"sha": "987bba17c2b83027bbc486e9a02f82e523c657fa", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04c246cae674da081e1c9d8ba631560fee2fa91/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04c246cae674da081e1c9d8ba631560fee2fa91/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=d04c246cae674da081e1c9d8ba631560fee2fa91", "patch": "@@ -217,8 +217,9 @@ namespace __debug\n       : _Base(__x, __a) { }\n \n       vector(vector&& __x, const allocator_type& __a)\n-      noexcept(noexcept(\n-\t_Base(std::declval<_Base&&>()), std::declval<const allocator_type&>()))\n+      noexcept(\n+\tstd::is_nothrow_constructible<_Base,\n+\t  _Base, const allocator_type&>::value )\n       : _Safe(std::move(__x._M_safe()), __a),\n \t_Base(std::move(__x._M_base()), __a),\n \t_Safe_vector(std::move(__x)) { }"}, {"sha": "0eb5a5cdbba76462d2e2ef7418d2a1db3a77dbba", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/cons/noexcept_move_construct.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04c246cae674da081e1c9d8ba631560fee2fa91/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04c246cae674da081e1c9d8ba631560fee2fa91/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2Fnoexcept_move_construct.cc?ref=d04c246cae674da081e1c9d8ba631560fee2fa91", "patch": "@@ -23,4 +23,8 @@\n \n typedef std::forward_list<int> fltype;\n \n-static_assert(std::is_nothrow_move_constructible<fltype>::value, \"Error\");\n+static_assert( std::is_nothrow_move_constructible<fltype>::value,\n+\t       \"noexcept move constructor\" );\n+static_assert( std::is_nothrow_constructible<fltype,\n+\t       fltype, const typename fltype::allocator_type&>::value,\n+\t       \"noexcept move constructor with allocator\" );"}, {"sha": "858a0d763333fa5b99cb09e08d45fa327d99013e", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/noexcept_move_construct.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04c246cae674da081e1c9d8ba631560fee2fa91/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04c246cae674da081e1c9d8ba631560fee2fa91/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fnoexcept_move_construct.cc?ref=d04c246cae674da081e1c9d8ba631560fee2fa91", "patch": "@@ -23,4 +23,8 @@\n \n typedef std::list<int> ltype;\n \n-static_assert(std::is_nothrow_move_constructible<ltype>::value, \"Error\");\n+static_assert( std::is_nothrow_move_constructible<ltype>::value,\n+\t       \"noexcept move constructor\" );\n+static_assert( std::is_nothrow_constructible<ltype,\n+\t       ltype, const typename ltype::allocator_type&>::value,\n+\t       \"noexcept move constructor with allocator\" );"}]}