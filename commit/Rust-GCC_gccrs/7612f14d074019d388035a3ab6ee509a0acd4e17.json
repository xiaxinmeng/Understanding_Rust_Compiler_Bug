{"sha": "7612f14d074019d388035a3ab6ee509a0acd4e17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYxMmYxNGQwNzQwMTlkMzg4MDM1YTNhYjZlZTUwOWEwYWNkNGUxNw==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2008-09-02T15:01:52Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2008-09-02T15:01:52Z"}, "message": "arm.c (arm_tune_cortex_a9): Define.\n\n2008-09-02  Paul Brook  <paul@codesourcery.com>\n\n\t* config/arm/arm.c (arm_tune_cortex_a9): Define.\n\t(arm_override_options): Set arm_tune_cortex_a9.\n\t(arm_rtx_costs_1): Make register shifts more expensive on Cortex-A9.\n\t(arm_issue_rate): Handle cortexa9.\n\t* config/arm/arm.h (arm_tune_cortex_a9): Declare.\n\t* config/arm/arm-cores.def: Add cortex-a9.\n\t* config/arm/arm-tune.md: Regenerate.\n\t* config/arm/arm.md: Include cortex-a9.md.\n\t(generic_sched, generic_vfp): Add cortexa9.\n\t* config/arm/cortex-a9.md: New file.\n\nFrom-SVN: r139891", "tree": {"sha": "87608f9f93af9e442ccad442bd991c8086b5f861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87608f9f93af9e442ccad442bd991c8086b5f861"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7612f14d074019d388035a3ab6ee509a0acd4e17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7612f14d074019d388035a3ab6ee509a0acd4e17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7612f14d074019d388035a3ab6ee509a0acd4e17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7612f14d074019d388035a3ab6ee509a0acd4e17/comments", "author": null, "committer": null, "parents": [{"sha": "a1b969a0d294963e2e2313fc0b71d0c21bbb316b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b969a0d294963e2e2313fc0b71d0c21bbb316b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b969a0d294963e2e2313fc0b71d0c21bbb316b"}], "stats": {"total": 107, "additions": 102, "deletions": 5}, "files": [{"sha": "a80ef311cceefa0ceaef5c310daaf5920c89bf63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7612f14d074019d388035a3ab6ee509a0acd4e17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7612f14d074019d388035a3ab6ee509a0acd4e17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7612f14d074019d388035a3ab6ee509a0acd4e17", "patch": "@@ -1,3 +1,16 @@\n+2008-09-02  Paul Brook  <paul@codesourcery.com>\n+\n+\t* config/arm/arm.c (arm_tune_cortex_a9): Define.\n+\t(arm_override_options): Set arm_tune_cortex_a9.\n+\t(arm_rtx_costs_1): Make register shifts more expensive on Cortex-A9.\n+\t(arm_issue_rate): Handle cortexa9.\n+\t* config/arm/arm.h (arm_tune_cortex_a9): Declare.\n+\t* config/arm/arm-cores.def: Add cortex-a9.\n+\t* config/arm/arm-tune.md: Regenerate.\n+\t* config/arm/arm.md: Include cortex-a9.md.\n+\t(generic_sched, generic_vfp): Add cortexa9.\n+\t* config/arm/cortex-a9.md: New file.\n+\n 2008-09-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/37327"}, {"sha": "fe2f2b537923805fe1f5807f06517c329da38f37", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7612f14d074019d388035a3ab6ee509a0acd4e17/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7612f14d074019d388035a3ab6ee509a0acd4e17/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=7612f14d074019d388035a3ab6ee509a0acd4e17", "patch": "@@ -116,6 +116,7 @@ ARM_CORE(\"mpcorenovfp\",\t  mpcorenovfp,\t6K,\t\t\t\t FL_LDSCHED, 9e)\n ARM_CORE(\"mpcore\",\t  mpcore,\t6K,\t\t\t\t FL_LDSCHED | FL_VFPV2, 9e)\n ARM_CORE(\"arm1156t2-s\",\t  arm1156t2s,\t6T2,\t\t\t\t FL_LDSCHED, 9e)\n ARM_CORE(\"cortex-a8\",\t  cortexa8,\t7A,\t\t\t\t FL_LDSCHED, 9e)\n+ARM_CORE(\"cortex-a9\",\t  cortexa9,\t7A,\t\t\t\t FL_LDSCHED, 9e)\n ARM_CORE(\"cortex-r4\",\t  cortexr4,\t7R,\t\t\t\t FL_LDSCHED, 9e)\n ARM_CORE(\"cortex-r4f\",\t  cortexr4f,\t7R,\t\t\t\t FL_LDSCHED, 9e)\n ARM_CORE(\"cortex-m3\",\t  cortexm3,\t7M,\t\t\t\t FL_LDSCHED, 9e)"}, {"sha": "beb8f9f41731865ec5225ed63c3be167318fdc4c", "filename": "gcc/config/arm/arm-tune.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7612f14d074019d388035a3ab6ee509a0acd4e17/gcc%2Fconfig%2Farm%2Farm-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7612f14d074019d388035a3ab6ee509a0acd4e17/gcc%2Fconfig%2Farm%2Farm-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tune.md?ref=7612f14d074019d388035a3ab6ee509a0acd4e17", "patch": "@@ -1,5 +1,5 @@\n ;; -*- buffer-read-only: t -*-\n ;; Generated automatically by gentune.sh from arm-cores.def\n (define_attr \"tune\"\n-\t\"arm2,arm250,arm3,arm6,arm60,arm600,arm610,arm620,arm7,arm7d,arm7di,arm70,arm700,arm700i,arm710,arm720,arm710c,arm7100,arm7500,arm7500fe,arm7m,arm7dm,arm7dmi,arm8,arm810,strongarm,strongarm110,strongarm1100,strongarm1110,arm7tdmi,arm7tdmis,arm710t,arm720t,arm740t,arm9,arm9tdmi,arm920,arm920t,arm922t,arm940t,ep9312,arm10tdmi,arm1020t,arm9e,arm946es,arm966es,arm968es,arm10e,arm1020e,arm1022e,xscale,iwmmxt,arm926ejs,arm1026ejs,arm1136js,arm1136jfs,arm1176jzs,arm1176jzfs,mpcorenovfp,mpcore,arm1156t2s,cortexa8,cortexr4,cortexr4f,cortexm3,cortexm1\"\n+\t\"arm2,arm250,arm3,arm6,arm60,arm600,arm610,arm620,arm7,arm7d,arm7di,arm70,arm700,arm700i,arm710,arm720,arm710c,arm7100,arm7500,arm7500fe,arm7m,arm7dm,arm7dmi,arm8,arm810,strongarm,strongarm110,strongarm1100,strongarm1110,arm7tdmi,arm7tdmis,arm710t,arm720t,arm740t,arm9,arm9tdmi,arm920,arm920t,arm922t,arm940t,ep9312,arm10tdmi,arm1020t,arm9e,arm946es,arm966es,arm968es,arm10e,arm1020e,arm1022e,xscale,iwmmxt,arm926ejs,arm1026ejs,arm1136js,arm1136jfs,arm1176jzs,arm1176jzfs,mpcorenovfp,mpcore,arm1156t2s,cortexa8,cortexa9,cortexr4,cortexr4f,cortexm3,cortexm1\"\n \t(const (symbol_ref \"arm_tune\")))"}, {"sha": "ec28f79446fb5173f2c98e53e4edcd3e63dad2e5", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7612f14d074019d388035a3ab6ee509a0acd4e17/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7612f14d074019d388035a3ab6ee509a0acd4e17/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7612f14d074019d388035a3ab6ee509a0acd4e17", "patch": "@@ -544,6 +544,9 @@ int arm_tune_xscale = 0;\n    This typically means an ARM6 or ARM7 with MMU or MPU.  */\n int arm_tune_wbuf = 0;\n \n+/* Nonzero if tuning for Cortex-A9.  */\n+int arm_tune_cortex_a9 = 0;\n+\n /* Nonzero if generating Thumb instructions.  */\n int thumb_code = 0;\n \n@@ -1289,6 +1292,7 @@ arm_override_options (void)\n   arm_tune_xscale = (tune_flags & FL_XSCALE) != 0;\n   arm_arch_iwmmxt = (insn_flags & FL_IWMMXT) != 0;\n   arm_arch_hwdiv = (insn_flags & FL_DIV) != 0;\n+  arm_tune_cortex_a9 = (arm_tune == cortexa9) != 0;\n \n   /* If we are not using the default (ARM mode) section anchor offset\n      ranges, then set the correct ranges now.  */\n@@ -4913,7 +4917,15 @@ arm_rtx_costs_1 (rtx x, enum rtx_code code, enum rtx_code outer)\n \t\t    || (GET_CODE (XEXP (x, 0)) == SUBREG\n \t\t\t&& GET_CODE (SUBREG_REG (XEXP (x, 0))) == REG))\n \t\t   ? 0 : 8));\n-      return (1 + ((GET_CODE (XEXP (x, 0)) == REG\n+\n+      extra_cost = 1;\n+      /* Increase the cost of complex shifts because they aren't any faster,\n+         and reduce dual issue opportunities.  */\n+      if (arm_tune_cortex_a9\n+\t  && outer != SET && GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\textra_cost++;\n+\n+      return (extra_cost + ((GET_CODE (XEXP (x, 0)) == REG\n \t\t    || (GET_CODE (XEXP (x, 0)) == SUBREG\n \t\t\t&& GET_CODE (SUBREG_REG (XEXP (x, 0))) == REG))\n \t\t   ? 0 : 4)\n@@ -5028,7 +5040,8 @@ arm_rtx_costs_1 (rtx x, enum rtx_code code, enum rtx_code outer)\n \t\t\t && ((INTVAL (XEXP (XEXP (x, 0), 1)) &\n \t\t\t      (INTVAL (XEXP (XEXP (x, 0), 1)) - 1)) == 0)))\n \t\t    && (REG_OR_SUBREG_REG (XEXP (XEXP (x, 0), 0)))\n-\t\t    && ((REG_OR_SUBREG_REG (XEXP (XEXP (x, 0), 1)))\n+\t\t    && ((REG_OR_SUBREG_REG (XEXP (XEXP (x, 0), 1))\n+\t\t\t && !arm_tune_cortex_a9)\n \t\t\t|| GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT))\n \t\t   ? 0 : 4));\n \n@@ -19066,6 +19079,7 @@ arm_issue_rate (void)\n     case cortexr4:\n     case cortexr4f:\n     case cortexa8:\n+    case cortexa9:\n       return 2;\n \n     default:"}, {"sha": "f83aabac0386e20c7696c7c62d070b76e4d88125", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7612f14d074019d388035a3ab6ee509a0acd4e17/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7612f14d074019d388035a3ab6ee509a0acd4e17/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=7612f14d074019d388035a3ab6ee509a0acd4e17", "patch": "@@ -407,6 +407,9 @@ extern int arm_tune_xscale;\n /* Nonzero if tuning for stores via the write buffer.  */\n extern int arm_tune_wbuf;\n \n+/* Nonzero if tuning for Cortex-A9.  */\n+extern int arm_tune_cortex_a9;\n+\n /* Nonzero if we should define __THUMB_INTERWORK__ in the\n    preprocessor.\n    XXX This is a bit of a hack, it's intended to help work around"}, {"sha": "1c279095707f98e1de5940fdf2085e58dc93376b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7612f14d074019d388035a3ab6ee509a0acd4e17/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7612f14d074019d388035a3ab6ee509a0acd4e17/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=7612f14d074019d388035a3ab6ee509a0acd4e17", "patch": "@@ -341,15 +341,15 @@\n \n (define_attr \"generic_sched\" \"yes,no\"\n   (const (if_then_else \n-          (ior (eq_attr \"tune\" \"arm926ejs,arm1020e,arm1026ejs,arm1136js,arm1136jfs,cortexa8\")\n+          (ior (eq_attr \"tune\" \"arm926ejs,arm1020e,arm1026ejs,arm1136js,arm1136jfs,cortexa8,cortexa9\")\n \t      (eq_attr \"tune_cortexr4\" \"yes\"))\n           (const_string \"no\")\n           (const_string \"yes\"))))\n \n (define_attr \"generic_vfp\" \"yes,no\"\n   (const (if_then_else\n \t  (and (eq_attr \"fpu\" \"vfp\")\n-\t       (eq_attr \"tune\" \"!arm1020e,arm1022e,cortexa8\")\n+\t       (eq_attr \"tune\" \"!arm1020e,arm1022e,cortexa8,cortexa9\")\n \t       (eq_attr \"tune_cortexr4\" \"no\"))\n \t  (const_string \"yes\")\n \t  (const_string \"no\"))))\n@@ -360,6 +360,7 @@\n (include \"arm1026ejs.md\")\n (include \"arm1136jfs.md\")\n (include \"cortex-a8.md\")\n+(include \"cortex-a9.md\")\n (include \"cortex-r4.md\")\n (include \"cortex-r4f.md\")\n (include \"vfp11.md\")"}, {"sha": "121fd2da747abc23e5a7b3faa192c3479e40096a", "filename": "gcc/config/arm/cortex-a9.md", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7612f14d074019d388035a3ab6ee509a0acd4e17/gcc%2Fconfig%2Farm%2Fcortex-a9.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7612f14d074019d388035a3ab6ee509a0acd4e17/gcc%2Fconfig%2Farm%2Fcortex-a9.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a9.md?ref=7612f14d074019d388035a3ab6ee509a0acd4e17", "patch": "@@ -0,0 +1,65 @@\n+;; ARM Cortex-A9 VFP pipeline description\n+;; Copyright (C) 2008 Free Software Foundation, Inc.\n+;; Written by CodeSourcery.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but\n+;; WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+;; General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"cortex_a9\")\n+\n+;; FIXME: We model a single pipeline for all instructions.\n+;; Is dual-issue possible, and do we have other pipelines?\n+(define_cpu_unit \"cortex_a9_vfp\" \"cortex_a9\")\n+\n+(define_insn_reservation \"cortex_a9_ffarith\" 1\n+ (and (eq_attr \"tune\" \"cortexa9\")\n+      (eq_attr \"type\" \"fcpys,ffariths,ffarithd,fcmps,fcmpd,fconsts,fconstd\"))\n+ \"cortex_a9_vfp\")\n+\n+(define_insn_reservation \"cortex_a9_fadd\" 4\n+ (and (eq_attr \"tune\" \"cortexa9\")\n+      (eq_attr \"type\" \"fadds,faddd,f_cvt\"))\n+ \"cortex_a9_vfp\")\n+\n+(define_insn_reservation \"cortex_a9_fmuls\" 5\n+ (and (eq_attr \"tune\" \"cortexa9\")\n+      (eq_attr \"type\" \"fmuls\"))\n+ \"cortex_a9_vfp\")\n+\n+(define_insn_reservation \"cortex_a9_fmuld\" 6\n+ (and (eq_attr \"tune\" \"cortexa9\")\n+      (eq_attr \"type\" \"fmuld\"))\n+ \"cortex_a9_vfp*2\")\n+\n+(define_insn_reservation \"cortex_a9_fmacs\" 8\n+ (and (eq_attr \"tune\" \"cortexa9\")\n+      (eq_attr \"type\" \"fmacs\"))\n+ \"cortex_a9_vfp\")\n+\n+(define_insn_reservation \"cortex_a9_fmacd\" 8\n+ (and (eq_attr \"tune\" \"cortexa9\")\n+      (eq_attr \"type\" \"fmacd\"))\n+ \"cortex_a9_vfp*2\")\n+\n+(define_insn_reservation \"cortex_a9_fdivs\" 15\n+ (and (eq_attr \"tune\" \"cortexa9\")\n+      (eq_attr \"type\" \"fdivs\"))\n+ \"cortex_a9_vfp*10\")\n+\n+(define_insn_reservation \"cortex_a9_fdivd\" 25\n+ (and (eq_attr \"tune\" \"cortexa9\")\n+      (eq_attr \"type\" \"fdivd\"))\n+ \"cortex_a9_vfp*20\")"}]}