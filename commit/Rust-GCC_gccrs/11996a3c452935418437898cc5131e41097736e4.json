{"sha": "11996a3c452935418437898cc5131e41097736e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE5OTZhM2M0NTI5MzU0MTg0Mzc4OThjYzUxMzFlNDEwOTc3MzZlNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-02-21T23:51:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-02-21T23:51:51Z"}, "message": "type_traits (is_member_function_pointer): Remove ugly workaround for c++/19076.\n\n2005-02-21  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits (is_member_function_pointer):\n\tRemove ugly workaround for c++/19076.\n\nFrom-SVN: r95360", "tree": {"sha": "5f32d2e484d2925b44080f060f92af6219019be0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f32d2e484d2925b44080f060f92af6219019be0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11996a3c452935418437898cc5131e41097736e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11996a3c452935418437898cc5131e41097736e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11996a3c452935418437898cc5131e41097736e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11996a3c452935418437898cc5131e41097736e4/comments", "author": null, "committer": null, "parents": [{"sha": "52a8962603028d05cf3dab25b04dc21bd7ffa23a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a8962603028d05cf3dab25b04dc21bd7ffa23a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52a8962603028d05cf3dab25b04dc21bd7ffa23a"}], "stats": {"total": 218, "additions": 8, "deletions": 210}, "files": [{"sha": "613f13ea2daafd239b0282d17ece3a39cd3d3802", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11996a3c452935418437898cc5131e41097736e4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11996a3c452935418437898cc5131e41097736e4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=11996a3c452935418437898cc5131e41097736e4", "patch": "@@ -1,3 +1,8 @@\n+2005-02-21  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits (is_member_function_pointer):\n+\tRemove ugly workaround for c++/19076.\n+\n 2005-02-21  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_string.tcc (_Rep::_M_destroy): Don't"}, {"sha": "c4aa58d853d12ff0c04325d257dc230ae38c3362", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 3, "deletions": 210, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11996a3c452935418437898cc5131e41097736e4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11996a3c452935418437898cc5131e41097736e4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=11996a3c452935418437898cc5131e41097736e4", "patch": "@@ -151,218 +151,11 @@ namespace tr1\n   _DEFINE_SPEC(2, is_member_object_pointer, _Tp _Cp::*,\n \t       !is_function<_Tp>::value)\n \n-  // Due to c++/19076, for the time being we cannot use the correct, neat\n-  // implementation :-(\n-  //\n-  // template<typename>\n-  //   struct is_member_function_pointer\n-  //   : public false_type { };\n-  // _DEFINE_SPEC(2, is_member_function_pointer, _Tp _Cp::*,\n-  //\t          is_function<_Tp>::value)\n-  //\n-  // Temporary workaround for member functions with up to 15 arguments:\n   template<typename>\n-    struct __is_mfp_helper\n-    { static const bool __value = false; };\n-\n-  template<typename _Rt, typename _Cp>\n-    struct __is_mfp_helper<_Rt (_Cp::*) ()>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (...)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, ...)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, ...)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, ...)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, ...)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, ...)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, ...)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5, typename _A6>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5, typename _A6>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n-\t\t\t\t\t ...)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n-\t\t\t\t\t _A7)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n-\t\t\t\t\t _A7, ...)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n-\t   typename _A8>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n-\t\t\t\t\t _A7, _A8)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n-\t   typename _A8>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n-\t\t\t\t\t _A7, _A8, ...)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n-\t   typename _A8, typename _A9>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n-\t\t\t\t\t _A7, _A8, _A9)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n-\t   typename _A8, typename _A9>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n-\t\t\t\t\t _A7, _A8, _A9, ...)>\n-    { static const bool __value = true; };\n-  \n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n-\t   typename _A8, typename _A9, typename _A10>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n-\t\t\t\t\t _A7, _A8, _A9, _A10)>\n-    { static const bool __value = true; };\n-  \n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n-\t   typename _A8, typename _A9, typename _A10>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n-\t\t\t\t\t _A7, _A8, _A9, _A10, ...)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n-\t   typename _A8, typename _A9, typename _A10, typename _A11>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n-\t\t\t\t\t _A7, _A8, _A9, _A10, _A11)>\n-    { static const bool __value = true; };\n-  \n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n-\t   typename _A8, typename _A9, typename _A10, typename _A11>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n-\t\t\t\t\t _A7, _A8, _A9, _A10, _A11, ...)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n-\t   typename _A8, typename _A9, typename _A10, typename _A11,\n-\t   typename _A12>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n-\t\t\t\t\t _A7, _A8, _A9, _A10, _A11, _A12)>\n-    { static const bool __value = true; };\n-  \n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n-\t   typename _A8, typename _A9, typename _A10, typename _A11,\n-\t   typename _A12>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n-\t\t\t\t\t _A7, _A8, _A9, _A10, _A11, _A12, ...)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n-\t   typename _A8, typename _A9, typename _A10, typename _A11,\n-\t   typename _A12, typename _A13>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n-\t\t\t\t\t _A7, _A8, _A9, _A10, _A11, _A12,\n-\t\t\t\t\t _A13)>\n-    { static const bool __value = true; };\n-  \n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n-\t   typename _A8, typename _A9, typename _A10, typename _A11,\n-\t   typename _A12, typename _A13>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n-\t\t\t\t\t _A7, _A8, _A9, _A10, _A11, _A12,\n-\t\t\t\t\t _A13, ...)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n-\t   typename _A8, typename _A9, typename _A10, typename _A11,\n-\t   typename _A12, typename _A13, typename _A14>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n-\t\t\t\t\t _A7, _A8, _A9, _A10, _A11, _A12,\n-\t\t\t\t\t _A13, _A14)>\n-    { static const bool __value = true; };\n-  \n-  template<typename _Rt, typename _Cp, typename _A0, typename _A1, typename _A2,\n-\t   typename _A3, typename _A4, typename _A5, typename _A6, typename _A7,\n-\t   typename _A8, typename _A9, typename _A10, typename _A11,\n-\t   typename _A12, typename _A13, typename _A14>\n-    struct __is_mfp_helper<_Rt (_Cp::*) (_A0, _A1, _A2, _A3, _A4, _A5, _A6,\n-\t\t\t\t\t _A7, _A8, _A9, _A10, _A11, _A12,\n-\t\t\t\t\t _A13, _A14, ...)>\n-    { static const bool __value = true; };\n-\n-  template<typename _Tp>\n     struct is_member_function_pointer\n-    : public integral_constant<bool, (__is_mfp_helper<typename\n-\t\t\t\t      remove_cv<_Tp>::type>::__value)>\n-    { };\n+    : public false_type { };\n+  _DEFINE_SPEC(2, is_member_function_pointer, _Tp _Cp::*,\n+\t       is_function<_Tp>::value)\n \n   template<typename _Tp, bool = (is_fundamental<_Tp>::value\n \t\t\t\t || is_array<_Tp>::value"}]}