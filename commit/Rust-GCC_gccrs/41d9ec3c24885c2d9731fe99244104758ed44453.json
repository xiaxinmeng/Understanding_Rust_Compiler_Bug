{"sha": "41d9ec3c24885c2d9731fe99244104758ed44453", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFkOWVjM2MyNDg4NWMyZDk3MzFmZTk5MjQ0MTA0NzU4ZWQ0NDQ1Mw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-11-10T17:48:31Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-11-10T17:48:31Z"}, "message": "i386.c (ix86_print_operand): Remove dead code that tried to avoid (%rip) for call operands.\n\n\t* config/i386/i386.c (ix86_print_operand): Remove dead code that\n\ttried to avoid (%rip) for call operands.\n\n\t* config/i386/i386.c (ix86_print_operand_address_as): Add no_rip\n\targument.  Do not use RIP relative addressing when no_rip is set.\n\t(ix86_print_operand): Update call to ix86_print_operand_address_as.\n\t(ix86_print_operand_address): Ditto.\n\t* config/i386/i386.md (*movabs<mode>_1): Use %P modifier for\n\tabsolute movabs operand 0.  Add square braces for -masm=intel.\n\t(*movabs<mode>_2): Ditto for operand 1.\n\nFrom-SVN: r230117", "tree": {"sha": "a1931e1814374f90c5e684873599767a012d3541", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1931e1814374f90c5e684873599767a012d3541"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41d9ec3c24885c2d9731fe99244104758ed44453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41d9ec3c24885c2d9731fe99244104758ed44453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41d9ec3c24885c2d9731fe99244104758ed44453", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41d9ec3c24885c2d9731fe99244104758ed44453/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a9ee02f7afa32a1bded5d4d0644ac1b02064148", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a9ee02f7afa32a1bded5d4d0644ac1b02064148", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a9ee02f7afa32a1bded5d4d0644ac1b02064148"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "b5808c10115e6843da62e09d4df46ec8aabdc18b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41d9ec3c24885c2d9731fe99244104758ed44453/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41d9ec3c24885c2d9731fe99244104758ed44453/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41d9ec3c24885c2d9731fe99244104758ed44453", "patch": "@@ -1,3 +1,15 @@\n+2015-11-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_print_operand): Remove dead code that\n+\ttried to avoid (%rip) for call operands.\n+\n+2015-11-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_print_operand_address_as): Add no_rip\n+\targument.  Do not use RIP relative addressing when no_rip is set.\n+\t(ix86_print_operand): Update call to ix86_print_operand_address_as.\n+\t(ix86_print_operand_address): Ditto.\n+\n 2015-11-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.c (arm_new_rtx_costs, FIX case): Handle"}, {"sha": "9205d497f5a1931f5b202b8409e09bd57032017b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41d9ec3c24885c2d9731fe99244104758ed44453/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41d9ec3c24885c2d9731fe99244104758ed44453/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=41d9ec3c24885c2d9731fe99244104758ed44453", "patch": "@@ -80,7 +80,7 @@ along with GCC; see the file COPYING3.  If not see\n static rtx legitimize_dllimport_symbol (rtx, bool);\n static rtx legitimize_pe_coff_extern_decl (rtx, bool);\n static rtx legitimize_pe_coff_symbol (rtx, bool);\n-static void ix86_print_operand_address_as (FILE *file, rtx addr, addr_space_t);\n+static void ix86_print_operand_address_as (FILE *, rtx, addr_space_t, bool);\n \n #ifndef CHECK_STACK_LIMIT\n #define CHECK_STACK_LIMIT (-1)\n@@ -17131,13 +17131,6 @@ ix86_print_operand (FILE *file, rtx x, int code)\n     {\n       rtx addr = XEXP (x, 0);\n \n-      /* Avoid (%rip) for call operands.  */\n-      if (code == 'P' && CONSTANT_ADDRESS_P (x) && !CONST_INT_P (x))\n-\t{\n-\t  output_addr_const (file, addr);\n-\t  return;\n-\t}\n-\n       /* No `byte ptr' prefix for call instructions ... */\n       if (ASSEMBLER_DIALECT == ASM_INTEL && code != 'X' && code != 'P')\n \t{\n@@ -17187,7 +17180,8 @@ ix86_print_operand (FILE *file, rtx x, int code)\n       if (this_is_asm_operands && ! address_operand (addr, VOIDmode))\n \toutput_operand_lossage (\"invalid constraints for operand\");\n       else\n-\tix86_print_operand_address_as (file, addr, MEM_ADDR_SPACE (x));\n+\tix86_print_operand_address_as\n+\t  (file, addr, MEM_ADDR_SPACE (x), code == 'p' || code == 'P');\n     }\n \n   else if (CONST_DOUBLE_P (x) && GET_MODE (x) == SFmode)\n@@ -17272,7 +17266,8 @@ ix86_print_operand_punct_valid_p (unsigned char code)\n /* Print a memory operand whose address is ADDR.  */\n \n static void\n-ix86_print_operand_address_as (FILE *file, rtx addr, addr_space_t as)\n+ix86_print_operand_address_as (FILE *file, rtx addr,\n+\t\t\t       addr_space_t as, bool no_rip)\n {\n   struct ix86_address parts;\n   rtx base, index, disp;\n@@ -17346,7 +17341,7 @@ ix86_print_operand_address_as (FILE *file, rtx addr, addr_space_t as)\n     }\n \n   /* Use one byte shorter RIP relative addressing for 64bit mode.  */\n-  if (TARGET_64BIT && !base && !index)\n+  if (TARGET_64BIT && !base && !index && !no_rip)\n     {\n       rtx symbol = disp;\n \n@@ -17360,10 +17355,10 @@ ix86_print_operand_address_as (FILE *file, rtx addr, addr_space_t as)\n \t      && SYMBOL_REF_TLS_MODEL (symbol) == 0))\n \tbase = pc_rtx;\n     }\n+\n   if (!base && !index)\n     {\n       /* Displacement only requires special attention.  */\n-\n       if (CONST_INT_P (disp))\n \t{\n \t  if (ASSEMBLER_DIALECT == ASM_INTEL && parts.seg == ADDR_SPACE_GENERIC)\n@@ -17505,7 +17500,7 @@ ix86_print_operand_address_as (FILE *file, rtx addr, addr_space_t as)\n static void\n ix86_print_operand_address (FILE *file, machine_mode /*mode*/, rtx addr)\n {\n-  ix86_print_operand_address_as (file, addr, ADDR_SPACE_GENERIC);\n+  ix86_print_operand_address_as (file, addr, ADDR_SPACE_GENERIC, false);\n }\n \n /* Implementation of TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA.  */"}, {"sha": "a236199699a08306cc21812838913d22d0f7db4c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41d9ec3c24885c2d9731fe99244104758ed44453/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41d9ec3c24885c2d9731fe99244104758ed44453/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=41d9ec3c24885c2d9731fe99244104758ed44453", "patch": "@@ -2601,7 +2601,7 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \"movabs{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+      return \"movabs{<imodesuffix>}\\t{%1, %P0|[%P0], %1}\";\n     case 1:\n       return \"mov{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n     default:\n@@ -2625,7 +2625,7 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \"movabs{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+      return \"movabs{<imodesuffix>}\\t{%P1, %0|%0, [%P1]}\";\n     case 1:\n       return \"mov{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n     default:"}]}