{"sha": "5665e39850ca0332c4a35e0006f2c61fa28272cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY2NWUzOTg1MGNhMDMzMmM0YTM1ZTAwMDZmMmM2MWZhMjgyNzJjYw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-02-18T23:00:24Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-02-18T23:00:24Z"}, "message": "s390.md (\"divmodtidi3\"): Use canonical RTL.\n\n\t* config/s390/s390.md (\"divmodtidi3\"): Use canonical RTL.\n\t(\"divmodtisi3\"): Likewise.\n\t(\"udivmoddi4\", \"udivmodtidi3\"): Likewise.\n\t(\"divmodsi4\", \"divmoddisi3\"): Likewise.\n\t(\"udivmodsi4\", \"udivmoddisi3\"): Likewise.\n\t(\"udivsi3\", \"umodsi3\"): Likewise.\n\nFrom-SVN: r78057", "tree": {"sha": "f3dc3db5b05a60fab1217919209ba4a1ee3c8f80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3dc3db5b05a60fab1217919209ba4a1ee3c8f80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5665e39850ca0332c4a35e0006f2c61fa28272cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5665e39850ca0332c4a35e0006f2c61fa28272cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5665e39850ca0332c4a35e0006f2c61fa28272cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5665e39850ca0332c4a35e0006f2c61fa28272cc/comments", "author": null, "committer": null, "parents": [{"sha": "d76e8439b662952a61fbae626a4f9136b1ce6050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d76e8439b662952a61fbae626a4f9136b1ce6050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d76e8439b662952a61fbae626a4f9136b1ce6050"}], "stats": {"total": 114, "additions": 62, "deletions": 52}, "files": [{"sha": "a2b412f460eb650d2e199b51285e60ed33675907", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5665e39850ca0332c4a35e0006f2c61fa28272cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5665e39850ca0332c4a35e0006f2c61fa28272cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5665e39850ca0332c4a35e0006f2c61fa28272cc", "patch": "@@ -1,3 +1,12 @@\n+2004-02-18  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.md (\"divmodtidi3\"): Use canonical RTL.\n+\t(\"divmodtisi3\"): Likewise.\n+\t(\"udivmoddi4\", \"udivmodtidi3\"): Likewise.\n+\t(\"divmodsi4\", \"divmoddisi3\"): Likewise.\n+\t(\"udivmodsi4\", \"udivmoddisi3\"): Likewise.\n+\t(\"udivsi3\", \"umodsi3\"): Likewise.\n+\n 2004-02-18  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.c (s390_mainpool_start): Delete the main pool"}, {"sha": "5cae9ba2a023e7961e1741c1fb3f3d110f5be274", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 53, "deletions": 52, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5665e39850ca0332c4a35e0006f2c61fa28272cc/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5665e39850ca0332c4a35e0006f2c61fa28272cc/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=5665e39850ca0332c4a35e0006f2c61fa28272cc", "patch": "@@ -4575,14 +4575,12 @@\n (define_insn \"divmodtidi3\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=d,d\")\n         (ior:TI\n-          (zero_extend:TI\n-            (div:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                    (match_operand:DI 2 \"general_operand\" \"d,m\")))\n           (ashift:TI\n             (zero_extend:TI\n-              (mod:DI (match_dup 1)\n-                      (match_dup 2)))\n-            (const_int 64))))]\n+              (mod:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n+                      (match_operand:DI 2 \"general_operand\" \"d,m\")))\n+            (const_int 64))\n+          (zero_extend:TI (div:DI (match_dup 1) (match_dup 2)))))]\n   \"TARGET_64BIT\"\n   \"@\n    dsgr\\t%0,%2\n@@ -4593,14 +4591,14 @@\n (define_insn \"divmodtisi3\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=d,d\")\n         (ior:TI\n-          (zero_extend:TI\n-            (div:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                    (sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"d,m\"))))\n           (ashift:TI\n             (zero_extend:TI\n-              (mod:DI (match_dup 1)\n-                      (sign_extend:DI (match_dup 2))))\n-            (const_int 64))))]\n+              (mod:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n+                      (sign_extend:DI \n+                        (match_operand:SI 2 \"nonimmediate_operand\" \"d,m\"))))\n+            (const_int 64))\n+          (zero_extend:TI\n+            (div:DI (match_dup 1) (sign_extend:DI (match_dup 2))))))]\n   \"TARGET_64BIT\"\n   \"@\n    dsgfr\\t%0,%2\n@@ -4626,10 +4624,10 @@\n   div_equal = gen_rtx_UDIV (DImode, operands[1], operands[2]);\n   mod_equal = gen_rtx_UMOD (DImode, operands[1], operands[2]);\n   equal = gen_rtx_IOR (TImode,\n-\t\t       gen_rtx_ZERO_EXTEND (TImode, div_equal),\n \t\t       gen_rtx_ASHIFT (TImode,\n \t\t\t\t       gen_rtx_ZERO_EXTEND (TImode, mod_equal),\n-\t\t\t\t       GEN_INT (64)));\n+\t\t\t\t       GEN_INT (64)),\n+\t\t       gen_rtx_ZERO_EXTEND (TImode, div_equal));\n \n   operands[4] = gen_reg_rtx(TImode);\n   emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[4]));\n@@ -4652,16 +4650,17 @@\n \n (define_insn \"udivmodtidi3\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=d,d\")\n-        (ior:TI (zero_extend:TI\n-                  (truncate:DI\n-                    (udiv:TI (match_operand:TI 1 \"register_operand\" \"0,0\")\n-                             (zero_extend:TI\n-                               (match_operand:DI 2 \"nonimmediate_operand\" \"d,m\")))))\n-                (ashift:TI\n-                  (zero_extend:TI\n-                    (truncate:DI\n-                      (umod:TI (match_dup 1) (zero_extend:TI (match_dup 2)))))\n-                  (const_int 64))))]\n+        (ior:TI \n+          (ashift:TI\n+            (zero_extend:TI\n+              (truncate:DI\n+                (umod:TI (match_operand:TI 1 \"register_operand\" \"0,0\") \n+                         (zero_extend:TI \n+                           (match_operand:DI 2 \"nonimmediate_operand\" \"d,m\")))))\n+            (const_int 64))\n+          (zero_extend:TI\n+            (truncate:DI\n+              (udiv:TI (match_dup 1) (zero_extend:TI (match_dup 2)))))))]\n   \"TARGET_64BIT\"\n   \"@\n    dlgr\\t%0,%2\n@@ -4687,10 +4686,10 @@\n   div_equal = gen_rtx_DIV (SImode, operands[1], operands[2]);\n   mod_equal = gen_rtx_MOD (SImode, operands[1], operands[2]);\n   equal = gen_rtx_IOR (DImode,\n-\t\t       gen_rtx_ZERO_EXTEND (DImode, div_equal),\n \t\t       gen_rtx_ASHIFT (DImode,\n \t\t\t\t       gen_rtx_ZERO_EXTEND (DImode, mod_equal),\n-\t\t\t\t       GEN_INT (32)));\n+\t\t\t\t       GEN_INT (32)),\n+\t\t       gen_rtx_ZERO_EXTEND (DImode, div_equal));\n \n   operands[4] = gen_reg_rtx(DImode);\n   emit_insn (gen_extendsidi2 (operands[4], operands[1]));\n@@ -4711,16 +4710,17 @@\n \n (define_insn \"divmoddisi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (ior:DI (zero_extend:DI\n-                  (truncate:SI\n-                    (div:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                            (sign_extend:DI\n-                              (match_operand:SI 2 \"nonimmediate_operand\" \"d,R\")))))\n-                (ashift:DI\n-                  (zero_extend:DI\n-                    (truncate:SI\n-                      (mod:DI (match_dup 1) (sign_extend:SI (match_dup 2)))))\n-                  (const_int 32))))]\n+        (ior:DI \n+          (ashift:DI\n+            (zero_extend:DI\n+              (truncate:SI\n+                (mod:DI (match_operand:DI 1 \"register_operand\" \"0,0\") \n+                        (sign_extend:DI \n+                          (match_operand:SI 2 \"nonimmediate_operand\" \"d,R\")))))\n+            (const_int 32))\n+          (zero_extend:DI\n+            (truncate:SI\n+              (div:DI (match_dup 1) (sign_extend:DI (match_dup 2)))))))]\n   \"!TARGET_64BIT\"\n   \"@\n    dr\\t%0,%2\n@@ -4746,10 +4746,10 @@\n   div_equal = gen_rtx_UDIV (SImode, operands[1], operands[2]);\n   mod_equal = gen_rtx_UMOD (SImode, operands[1], operands[2]);\n   equal = gen_rtx_IOR (DImode,\n-\t\t       gen_rtx_ZERO_EXTEND (DImode, div_equal),\n \t\t       gen_rtx_ASHIFT (DImode,\n \t\t\t\t       gen_rtx_ZERO_EXTEND (DImode, mod_equal),\n-\t\t\t\t       GEN_INT (32)));\n+\t\t\t\t       GEN_INT (32)),\n+\t\t       gen_rtx_ZERO_EXTEND (DImode, div_equal));\n \n   operands[4] = gen_reg_rtx(DImode);\n   emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[4]));\n@@ -4772,16 +4772,17 @@\n \n (define_insn \"udivmoddisi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (ior:DI (zero_extend:DI\n-                  (truncate:SI\n-                    (udiv:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                             (zero_extend:DI\n-                               (match_operand:SI 2 \"nonimmediate_operand\" \"d,m\")))))\n-                (ashift:DI\n-                  (zero_extend:DI\n-                    (truncate:SI\n-                      (umod:DI (match_dup 1) (zero_extend:DI (match_dup 2)))))\n-                  (const_int 32))))]\n+        (ior:DI \n+          (ashift:DI\n+            (zero_extend:DI\n+              (truncate:SI\n+                (umod:DI (match_operand:DI 1 \"register_operand\" \"0,0\") \n+                         (zero_extend:DI \n+                           (match_operand:SI 2 \"nonimmediate_operand\" \"d,m\")))))\n+            (const_int 32))\n+          (zero_extend:DI\n+            (truncate:SI\n+              (udiv:DI (match_dup 1) (zero_extend:DI (match_dup 2)))))))]\n   \"!TARGET_64BIT && TARGET_CPU_ZARCH\"\n   \"@\n    dlr\\t%0,%2\n@@ -4801,10 +4802,10 @@\n   udiv_equal = gen_rtx_UDIV (SImode, operands[1], operands[2]);\n   umod_equal = gen_rtx_UMOD (SImode, operands[1], operands[2]);\n   equal = gen_rtx_IOR (DImode,\n-\t\t       gen_rtx_ZERO_EXTEND (DImode, udiv_equal),\n \t\t       gen_rtx_ASHIFT (DImode,\n \t\t\t\t       gen_rtx_ZERO_EXTEND (DImode, umod_equal),\n-\t\t\t\t       GEN_INT (32)));\n+\t\t\t\t       GEN_INT (32)),\n+\t\t       gen_rtx_ZERO_EXTEND (DImode, udiv_equal));\n \n   operands[3] = gen_reg_rtx (DImode);\n \n@@ -4892,10 +4893,10 @@\n   udiv_equal = gen_rtx_UDIV (SImode, operands[1], operands[2]);\n   umod_equal = gen_rtx_UMOD (SImode, operands[1], operands[2]);\n   equal = gen_rtx_IOR (DImode,\n-\t\t       gen_rtx_ZERO_EXTEND (DImode, udiv_equal),\n \t\t       gen_rtx_ASHIFT (DImode,\n \t\t\t\t       gen_rtx_ZERO_EXTEND (DImode, umod_equal),\n-\t\t\t\t       GEN_INT (32)));\n+\t\t\t\t       GEN_INT (32)),\n+\t\t       gen_rtx_ZERO_EXTEND (DImode, udiv_equal));\n \n   operands[3] = gen_reg_rtx (DImode);\n "}]}