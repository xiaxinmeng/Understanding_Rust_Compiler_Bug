{"sha": "6dda86084439af4f5315a5c3aaee732a610e3551", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRkYTg2MDg0NDM5YWY0ZjUzMTVhNWMzYWFlZTczMmE2MTBlMzU1MQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-05-31T03:53:28Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-05-31T03:53:28Z"}, "message": "Disable brabc/brabs patterns as their length computation is horribly broken and leads to incorrect code generation.\n\n\t* config/h8300/jumpcall.md (brabs, brabc): Disable patterns.", "tree": {"sha": "dc4b540f3496e331031485d24a1b904fffab0e71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc4b540f3496e331031485d24a1b904fffab0e71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dda86084439af4f5315a5c3aaee732a610e3551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dda86084439af4f5315a5c3aaee732a610e3551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dda86084439af4f5315a5c3aaee732a610e3551", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dda86084439af4f5315a5c3aaee732a610e3551/comments", "author": null, "committer": null, "parents": [{"sha": "945b53ccf6ae899e32c5ed88471ae60d5814c47d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/945b53ccf6ae899e32c5ed88471ae60d5814c47d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/945b53ccf6ae899e32c5ed88471ae60d5814c47d"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "3917cf18920337edb240231a6bd1623cf78fc6a1", "filename": "gcc/config/h8300/jumpcall.md", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dda86084439af4f5315a5c3aaee732a610e3551/gcc%2Fconfig%2Fh8300%2Fjumpcall.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dda86084439af4f5315a5c3aaee732a610e3551/gcc%2Fconfig%2Fh8300%2Fjumpcall.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fjumpcall.md?ref=6dda86084439af4f5315a5c3aaee732a610e3551", "patch": "@@ -77,6 +77,16 @@\n  [(set_attr \"type\" \"branch\")\n    (set_attr \"cc\" \"none\")])\n \n+;; The brabc/brabs patterns have been disabled because their length computation\n+;; is horribly broken.  When we call out to a function via a SYMBOL_REF we get\n+;; bogus default and minimum lengths.  The trick used by the PA port seems to\n+;; fix the minimum, but not the default length.  The broken lengths can lead\n+;; to bogusly using a short jump when a long jump was needed and thus\n+;; incorrect code.\n+;;\n+;; Given the restricted addressing modes for operand 1, we could probably just\n+;; open-code the necessary length computation in the two affected patterns\n+;; rather than using a function call.  I think that would fix this problem.\n (define_insn \"*brabc\"\n   [(set (pc)\n \t(if_then_else (eq (zero_extract (match_operand:QI 1 \"bit_memory_operand\" \"WU\")\n@@ -85,7 +95,7 @@\n \t\t\t  (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n-  \"TARGET_H8300SX\"\n+  \"0 && TARGET_H8300SX\"\n {\n   switch (get_attr_length (insn)\n \t  - h8300_insn_length_from_table (insn, operands))\n@@ -110,7 +120,7 @@\n \t\t\t  (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n-  \"TARGET_H8300SX\"\n+  \"0 && TARGET_H8300SX\"\n {\n   switch (get_attr_length (insn)\n \t  - h8300_insn_length_from_table (insn, operands))"}]}