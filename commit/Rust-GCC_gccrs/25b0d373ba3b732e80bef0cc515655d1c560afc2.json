{"sha": "25b0d373ba3b732e80bef0cc515655d1c560afc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjViMGQzNzNiYTNiNzMyZTgwYmVmMGNjNTE1NjU1ZDFjNTYwYWZjMg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2014-10-24T11:44:44Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2014-10-24T11:44:44Z"}, "message": "binary_op.inc: New file.\n\n2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/binary_op.inc: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vadd.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vand.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vbic.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/veor.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vorn.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vorr.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vsub.c: Likewise.\n\nFrom-SVN: r216643", "tree": {"sha": "64bb56d95e75268ec38561c2fd6dd5adae1b7da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64bb56d95e75268ec38561c2fd6dd5adae1b7da7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25b0d373ba3b732e80bef0cc515655d1c560afc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b0d373ba3b732e80bef0cc515655d1c560afc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25b0d373ba3b732e80bef0cc515655d1c560afc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b0d373ba3b732e80bef0cc515655d1c560afc2/comments", "author": null, "committer": null, "parents": [{"sha": "a5d9f9d388cb6788d66c46fe93d53a08da0e2350", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d9f9d388cb6788d66c46fe93d53a08da0e2350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5d9f9d388cb6788d66c46fe93d53a08da0e2350"}], "stats": {"total": 478, "additions": 478, "deletions": 0}, "files": [{"sha": "3f49a34e4b43e0f278f7a2136151f30dea70599c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b0d373ba3b732e80bef0cc515655d1c560afc2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b0d373ba3b732e80bef0cc515655d1c560afc2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25b0d373ba3b732e80bef0cc515655d1c560afc2", "patch": "@@ -1,3 +1,14 @@\n+2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/binary_op.inc: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vadd.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vand.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vbic.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/veor.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vorn.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vorr.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vsub.c: Likewise.\n+\n 2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/unary_op.inc: New file."}, {"sha": "3483e0e8250e26cab795bdfd6bd6c2c7febf87d2", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/binary_op.inc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b0d373ba3b732e80bef0cc515655d1c560afc2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_op.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b0d373ba3b732e80bef0cc515655d1c560afc2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_op.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_op.inc?ref=25b0d373ba3b732e80bef0cc515655d1c560afc2", "patch": "@@ -0,0 +1,70 @@\n+/* Template file for binary operator validation.\n+\n+   This file is meant to be included by the relevant test files, which\n+   have to define the intrinsic family to test. If a given intrinsic\n+   supports variants which are not supported by all the other binary\n+   operators, these can be tested by providing a definition for\n+   EXTRA_TESTS.  */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  /* Basic test: y=OP(x1,x2), then store the result.  */\n+#define TEST_BINARY_OP1(INSN, Q, T1, T2, W, N)\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t      VECT_VAR(vector2, T1, W, N));\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+#define TEST_BINARY_OP(INSN, Q, T1, T2, W, N)\t\t\t\t\\\n+  TEST_BINARY_OP1(INSN, Q, T1, T2, W, N)\t\t\t\t\\\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector2);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+\n+  /* Fill input vector2 with arbitrary values.  */\n+  VDUP(vector2, , int, s, 8, 8, 2);\n+  VDUP(vector2, , int, s, 16, 4, -4);\n+  VDUP(vector2, , int, s, 32, 2, 3);\n+  VDUP(vector2, , int, s, 64, 1, 100);\n+  VDUP(vector2, , uint, u, 8, 8, 20);\n+  VDUP(vector2, , uint, u, 16, 4, 30);\n+  VDUP(vector2, , uint, u, 32, 2, 40);\n+  VDUP(vector2, , uint, u, 64, 1, 2);\n+  VDUP(vector2, q, int, s, 8, 16, -10);\n+  VDUP(vector2, q, int, s, 16, 8, -20);\n+  VDUP(vector2, q, int, s, 32, 4, -30);\n+  VDUP(vector2, q, int, s, 64, 2, 24);\n+  VDUP(vector2, q, uint, u, 8, 16, 12);\n+  VDUP(vector2, q, uint, u, 16, 8, 3);\n+  VDUP(vector2, q, uint, u, 32, 4, 55);\n+  VDUP(vector2, q, uint, u, 64, 2, 3);\n+\n+  /* Apply a binary operator named INSN_NAME.  */\n+  TEST_MACRO_ALL_VARIANTS_1_5(TEST_BINARY_OP, INSN_NAME);\n+\n+  CHECK_RESULTS (TEST_MSG, \"\");\n+\n+#ifdef EXTRA_TESTS\n+  EXTRA_TESTS();\n+#endif\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+\n+  return 0;\n+}"}, {"sha": "f08c620c82c228680d76f58bd6d3c67a4a653bf1", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vadd.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b0d373ba3b732e80bef0cc515655d1c560afc2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvadd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b0d373ba3b732e80bef0cc515655d1c560afc2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvadd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvadd.c?ref=25b0d373ba3b732e80bef0cc515655d1c560afc2", "patch": "@@ -0,0 +1,81 @@\n+#define INSN_NAME vadd\n+#define TEST_MSG \"VADD/VADDQ\"\n+\n+/* Extra tests for functions requiring floating-point types.  */\n+void exec_vadd_f32(void);\n+#define EXTRA_TESTS exec_vadd_f32\n+\n+#include \"binary_op.inc\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf2, 0xf3, 0xf4, 0xf5,\n+\t\t\t\t       0xf6, 0xf7, 0xf8, 0xf9 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xffec, 0xffed, 0xffee, 0xffef };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffff3, 0xfffffff4 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x54 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x4, 0x5, 0x6, 0x7,\n+\t\t\t\t\t0x8, 0x9, 0xa, 0xb };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xe, 0xf, 0x10, 0x11 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x18, 0x19 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffffffffffff2 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xe6, 0xe7, 0xe8, 0xe9,\n+\t\t\t\t\t0xea, 0xeb, 0xec, 0xed,\n+\t\t\t\t\t0xee, 0xef, 0xf0, 0xf1,\n+\t\t\t\t\t0xf2, 0xf3, 0xf4, 0xf5 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xffdc, 0xffdd, 0xffde, 0xffdf,\n+\t\t\t\t\t0xffe0, 0xffe1, 0xffe2, 0xffe3 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xffffffd2, 0xffffffd3,\n+\t\t\t\t\t0xffffffd4, 0xffffffd5 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x8, 0x9 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xfc, 0xfd, 0xfe, 0xff,\n+\t\t\t\t\t 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t 0x4, 0x5, 0x6, 0x7,\n+\t\t\t\t\t 0x8, 0x9, 0xa, 0xb };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfff3, 0xfff4, 0xfff5, 0xfff6,\n+\t\t\t\t\t 0xfff7, 0xfff8, 0xfff9, 0xfffa };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x27, 0x28, 0x29, 0x2a };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xfffffffffffffff3,\n+\t\t\t\t\t 0xfffffffffffffff4 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+/* Expected results for float32 variants. Needs to be separated since\n+   the generic test function does not test floating-point\n+   versions.  */\n+VECT_VAR_DECL(expected_float32,hfloat,32,2) [] = { 0x40d9999a, 0x40d9999a };\n+VECT_VAR_DECL(expected_float32,hfloat,32,4) [] = { 0x41100000, 0x41100000,\n+\t\t\t\t\t\t   0x41100000, 0x41100000 };\n+\n+void exec_vadd_f32(void)\n+{\n+  DECL_VARIABLE(vector, float, 32, 2);\n+  DECL_VARIABLE(vector, float, 32, 4);\n+\n+  DECL_VARIABLE(vector2, float, 32, 2);\n+  DECL_VARIABLE(vector2, float, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, float, 32, 2);\n+  DECL_VARIABLE(vector_res, float, 32, 4);\n+\n+  VDUP(vector, , float, f, 32, 2, 2.3f);\n+  VDUP(vector, q, float, f, 32, 4, 3.4f);\n+\n+  VDUP(vector2, , float, f, 32, 2, 4.5f);\n+  VDUP(vector2, q, float, f, 32, 4, 5.6f);\n+\n+  TEST_BINARY_OP(INSN_NAME, , float, f, 32, 2);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 32, 4);\n+\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_float32, \"\");\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_float32, \"\");\n+}"}, {"sha": "e7e65ddde65cce9b062bd0fda6c05891309b847d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vand.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b0d373ba3b732e80bef0cc515655d1c560afc2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b0d373ba3b732e80bef0cc515655d1c560afc2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvand.c?ref=25b0d373ba3b732e80bef0cc515655d1c560afc2", "patch": "@@ -0,0 +1,45 @@\n+#define INSN_NAME vand\n+#define TEST_MSG \"VAND/VANDQ\"\n+\n+#include \"binary_op.inc\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x0, 0x0, 0x2, 0x2,\n+\t\t\t\t       0x0, 0x0, 0x2, 0x2 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff0, 0xfff0, 0xfff0, 0xfff0 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x0, 0x1 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x60 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t0x14, 0x14, 0x14, 0x14 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x10, 0x10, 0x12, 0x12 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x20, 0x20 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf0, 0xf0, 0xf2, 0xf2,\n+\t\t\t\t\t0xf4, 0xf4, 0xf6, 0xf6,\n+\t\t\t\t\t0xf0, 0xf0, 0xf2, 0xf2,\n+\t\t\t\t\t0xf4, 0xf4, 0xf6, 0xf6 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xffe0, 0xffe0, 0xffe0, 0xffe0,\n+\t\t\t\t\t0xffe4, 0xffe4, 0xffe4, 0xffe4 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xffffffe0, 0xffffffe0,\n+\t\t\t\t\t0xffffffe2, 0xffffffe2 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x10, 0x10 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0x4, 0x4, 0x4, 0x4,\n+\t\t\t\t\t 0x8, 0x8, 0x8, 0x8,\n+\t\t\t\t\t 0xc, 0xc, 0xc, 0xc };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t 0x0, 0x1, 0x2, 0x3 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x30, 0x31, 0x32, 0x33 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x0, 0x1 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };"}, {"sha": "83e57ff2d610697bc41ffcc98209927a24bb6422", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vbic.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b0d373ba3b732e80bef0cc515655d1c560afc2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvbic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b0d373ba3b732e80bef0cc515655d1c560afc2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvbic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvbic.c?ref=25b0d373ba3b732e80bef0cc515655d1c560afc2", "patch": "@@ -0,0 +1,46 @@\n+#define INSN_NAME vbic\n+#define TEST_MSG \"VBIC/VBICQ\"\n+\n+#include \"binary_op.inc\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf0, 0xf1, 0xf0, 0xf1,\n+\t\t\t\t       0xf4, 0xf5, 0xf4, 0xf5 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x0, 0x1, 0x2, 0x3 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffff0, 0xfffffff0 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0xffffffffffffff90 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xe0, 0xe1, 0xe2, 0xe3,\n+\t\t\t\t\t0xe0, 0xe1, 0xe2, 0xe3 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xffe0, 0xffe1, 0xffe0, 0xffe1 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xffffffd0, 0xffffffd1 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x0, 0x1, 0x0, 0x1,\n+\t\t\t\t\t0x0, 0x1, 0x0, 0x1,\n+\t\t\t\t\t0x8, 0x9, 0x8, 0x9,\n+\t\t\t\t\t0x8, 0x9, 0x8, 0x9 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x10, 0x11, 0x12, 0x13,\n+\t\t\t\t\t0x10, 0x11, 0x12, 0x13 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x10, 0x11, 0x10, 0x11 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0xffffffffffffffe0, 0xffffffffffffffe1 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t 0xf0, 0xf1, 0xf2, 0xf3 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfff0, 0xfff0, 0xfff0, 0xfff0,\n+\t\t\t\t\t 0xfff4, 0xfff4, 0xfff4, 0xfff4 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xffffffc0, 0xffffffc0,\n+\t\t\t\t\t 0xffffffc0, 0xffffffc0 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };"}, {"sha": "474b225c7087a73ff771421ae1cced1bb556940d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/veor.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b0d373ba3b732e80bef0cc515655d1c560afc2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fveor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b0d373ba3b732e80bef0cc515655d1c560afc2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fveor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fveor.c?ref=25b0d373ba3b732e80bef0cc515655d1c560afc2", "patch": "@@ -0,0 +1,47 @@\n+#define INSN_NAME veor\n+#define TEST_MSG \"VEOR/VEORQ\"\n+\n+#include \"binary_op.inc\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf2, 0xf3, 0xf0, 0xf1,\n+\t\t\t\t       0xf6, 0xf7, 0xf4, 0xf5 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xc, 0xd, 0xe, 0xf };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffff3, 0xfffffff2 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0xffffffffffffff94 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xe4, 0xe5, 0xe6, 0xe7,\n+\t\t\t\t\t0xe0, 0xe1, 0xe2, 0xe3 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xffee, 0xffef, 0xffec, 0xffed };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xffffffd8, 0xffffffd9 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffffffffffff2 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x6, 0x7, 0x4, 0x5,\n+\t\t\t\t\t0x2, 0x3, 0x0, 0x1,\n+\t\t\t\t\t0xe, 0xf, 0xc, 0xd,\n+\t\t\t\t\t0xa, 0xb, 0x8, 0x9 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x1c, 0x1d, 0x1e, 0x1f,\n+\t\t\t\t\t0x18, 0x19, 0x1a, 0x1b };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x12, 0x13, 0x10, 0x11 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0xffffffffffffffe8,\n+\t\t\t\t\t0xffffffffffffffe9 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xfc, 0xfd, 0xfe, 0xff,\n+\t\t\t\t\t 0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t 0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t 0xf0, 0xf1, 0xf2, 0xf3 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfff3, 0xfff2, 0xfff1, 0xfff0,\n+\t\t\t\t\t 0xfff7, 0xfff6, 0xfff5, 0xfff4 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xffffffc7, 0xffffffc6,\n+\t\t\t\t\t 0xffffffc5, 0xffffffc4 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xfffffffffffffff3,\n+\t\t\t\t\t 0xfffffffffffffff2 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };"}, {"sha": "6905cb663f424c9e102a25e751b0b64c3c7652fa", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vorn.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b0d373ba3b732e80bef0cc515655d1c560afc2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvorn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b0d373ba3b732e80bef0cc515655d1c560afc2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvorn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvorn.c?ref=25b0d373ba3b732e80bef0cc515655d1c560afc2", "patch": "@@ -0,0 +1,48 @@\n+#define INSN_NAME vorn\n+#define TEST_MSG \"VORN/VORNQ\"\n+\n+#include \"binary_op.inc\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xfd, 0xfd, 0xff, 0xff,\n+\t\t\t\t       0xfd, 0xfd, 0xff, 0xff };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff3, 0xfff3, 0xfff3, 0xfff3 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffffc, 0xfffffffd };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0xfffffffffffffffb };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xfb, 0xfb, 0xfb, 0xfb,\n+\t\t\t\t\t0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfff1, 0xfff1, 0xfff3, 0xfff3 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff7, 0xfffffff7 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffffffffffffd };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf9, 0xf9, 0xfb, 0xfb,\n+\t\t\t\t\t0xfd, 0xfd, 0xff, 0xff,\n+\t\t\t\t\t0xf9, 0xf9, 0xfb, 0xfb,\n+\t\t\t\t\t0xfd, 0xfd, 0xff, 0xff };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfff3, 0xfff3, 0xfff3, 0xfff3,\n+\t\t\t\t\t0xfff7, 0xfff7, 0xfff7, 0xfff7 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffffd, 0xfffffffd,\n+\t\t\t\t\t0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0xfffffffffffffff7,\n+\t\t\t\t\t0xfffffffffffffff7 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xf3, 0xf3, 0xf3, 0xf3,\n+\t\t\t\t\t 0xf7, 0xf7, 0xf7, 0xf7,\n+\t\t\t\t\t 0xfb, 0xfb, 0xfb, 0xfb,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfffc, 0xfffd, 0xfffe, 0xffff,\n+\t\t\t\t\t 0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffffff8, 0xfffffff9,\n+\t\t\t\t\t 0xfffffffa, 0xfffffffb };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xfffffffffffffffc,\n+\t\t\t\t\t 0xfffffffffffffffd };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };"}, {"sha": "b2a7dff4d3fe5431fea28c19135674adea91edea", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vorr.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b0d373ba3b732e80bef0cc515655d1c560afc2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvorr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b0d373ba3b732e80bef0cc515655d1c560afc2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvorr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvorr.c?ref=25b0d373ba3b732e80bef0cc515655d1c560afc2", "patch": "@@ -0,0 +1,48 @@\n+#define INSN_NAME vorr\n+#define TEST_MSG \"VORR/VORRQ\"\n+\n+#include \"binary_op.inc\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf2, 0xf3, 0xf2, 0xf3,\n+\t\t\t\t       0xf6, 0xf7, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffff3, 0xfffffff3 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0xfffffffffffffff4 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfffe, 0xffff, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff8, 0xfffffff9 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffffffffffff2 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf6, 0xf7, 0xf6, 0xf7,\n+\t\t\t\t\t0xf6, 0xf7, 0xf6, 0xf7,\n+\t\t\t\t\t0xfe, 0xff, 0xfe, 0xff,\n+\t\t\t\t\t0xfe, 0xff, 0xfe, 0xff };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfffc, 0xfffd, 0xfffe, 0xffff,\n+\t\t\t\t\t0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffff2, 0xfffffff3,\n+\t\t\t\t\t0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0xfffffffffffffff8,\n+\t\t\t\t\t0xfffffffffffffff9 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xfc, 0xfd, 0xfe, 0xff,\n+\t\t\t\t\t 0xfc, 0xfd, 0xfe, 0xff,\n+\t\t\t\t\t 0xfc, 0xfd, 0xfe, 0xff,\n+\t\t\t\t\t 0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfff3, 0xfff3, 0xfff3, 0xfff3,\n+\t\t\t\t\t 0xfff7, 0xfff7, 0xfff7, 0xfff7 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffffff7, 0xfffffff7,\n+\t\t\t\t\t 0xfffffff7, 0xfffffff7 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xfffffffffffffff3,\n+\t\t\t\t\t 0xfffffffffffffff3 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };"}, {"sha": "7620479d3d1836ae8bd6b7e05a2f6c4642df4301", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vsub.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b0d373ba3b732e80bef0cc515655d1c560afc2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsub.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b0d373ba3b732e80bef0cc515655d1c560afc2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsub.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsub.c?ref=25b0d373ba3b732e80bef0cc515655d1c560afc2", "patch": "@@ -0,0 +1,82 @@\n+#define INSN_NAME vsub\n+#define TEST_MSG \"VSUB/VSUBQ\"\n+\n+/* Extra tests for functions requiring floating-point types */\n+void exec_vsub_f32(void);\n+#define EXTRA_TESTS exec_vsub_f32\n+\n+#include \"binary_op.inc\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xee, 0xef, 0xf0, 0xf1,\n+\t\t\t\t       0xf2, 0xf3, 0xf4, 0xf5 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xffffffed, 0xffffffee };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0xffffffffffffff8c };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xdc, 0xdd, 0xde, 0xdf,\n+\t\t\t\t\t0xe0, 0xe1, 0xe2, 0xe3 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xffd2, 0xffd3, 0xffd4, 0xffd5 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xffffffc8, 0xffffffc9 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0xffffffffffffffee };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xfa, 0xfb, 0xfc, 0xfd,\n+\t\t\t\t\t0xfe, 0xff, 0x0, 0x1,\n+\t\t\t\t\t0x2, 0x3, 0x4, 0x5,\n+\t\t\t\t\t0x6, 0x7, 0x8, 0x9 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x4, 0x5, 0x6, 0x7,\n+\t\t\t\t\t0x8, 0x9, 0xa, 0xb };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xe, 0xf, 0x10, 0x11 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0xffffffffffffffd8,\n+\t\t\t\t\t0xffffffffffffffd9 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xe4, 0xe5, 0xe6, 0xe7,\n+\t\t\t\t\t 0xe8, 0xe9, 0xea, 0xeb,\n+\t\t\t\t\t 0xec, 0xed, 0xee, 0xef,\n+\t\t\t\t\t 0xf0, 0xf1, 0xf2, 0xf3};\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xffed, 0xffee, 0xffef, 0xfff0,\n+\t\t\t\t\t 0xfff1, 0xfff2, 0xfff3, 0xfff4 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xffffffb9, 0xffffffba,\n+\t\t\t\t\t 0xffffffbb, 0xffffffbc };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xffffffffffffffed,\n+\t\t\t\t\t 0xffffffffffffffee };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t  0x33333333, 0x33333333 };\n+\n+/* Expected results for float32 variants. Needs to be separated since\n+   the generic test function does not test floating-point\n+   versions.  */\n+VECT_VAR_DECL(expected_float32,hfloat,32,2) [] = { 0xc00ccccd, 0xc00ccccd };\n+VECT_VAR_DECL(expected_float32,hfloat,32,4) [] = { 0xc00ccccc, 0xc00ccccc,\n+\t\t\t\t\t\t   0xc00ccccc, 0xc00ccccc };\n+\n+void exec_vsub_f32(void)\n+{\n+  DECL_VARIABLE(vector, float, 32, 2);\n+  DECL_VARIABLE(vector, float, 32, 4);\n+\n+  DECL_VARIABLE(vector2, float, 32, 2);\n+  DECL_VARIABLE(vector2, float, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, float, 32, 2);\n+  DECL_VARIABLE(vector_res, float, 32, 4);\n+\n+  VDUP(vector, , float, f, 32, 2, 2.3f);\n+  VDUP(vector, q, float, f, 32, 4, 3.4f);\n+\n+  VDUP(vector2, , float, f, 32, 2, 4.5f);\n+  VDUP(vector2, q, float, f, 32, 4, 5.6f);\n+\n+  TEST_BINARY_OP(INSN_NAME, , float, f, 32, 2);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 32, 4);\n+\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_float32, \"\");\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_float32, \"\");\n+}"}]}