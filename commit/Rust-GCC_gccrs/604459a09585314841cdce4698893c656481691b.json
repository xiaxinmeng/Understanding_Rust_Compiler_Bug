{"sha": "604459a09585314841cdce4698893c656481691b", "node_id": "C_kwDOANBUbNoAKDYwNDQ1OWEwOTU4NTMxNDg0MWNkY2U0Njk4ODkzYzY1NjQ4MTY5MWI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-05T07:28:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-05T08:36:11Z"}, "message": "More .DEFERRED_INIT expansion rework\n\nThis avoids looking at the type size and instead uses the size\nas passed to .DEFERRED_INIT to determine the size of the non-MEM\nto be initialized.  It also arranges for possibly poly-int\ninits to always use zero-initialization rather than not initializing\nand when we need to pun puns the LHS instead of the constant value.\n\nThat correctly initializes the variable-size typed array in the\ntestcase for PR102285 and the SVE vector in PR102587 where for\nthe testcase I needed to add a SVE capable -march as to not\nICE later.\n\n2021-10-05  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/102587\n\tPR middle-end/102285\n\t* internal-fn.c (expand_DEFERRED_INIT): Fall back to\n\tzero-initialization as last resort, use the constant\n\tsize as given by the DEFERRED_INIT argument to build\n\tthe initializer.\n\n\t* gcc.target/aarch64/sve/pr102587-1.c: Add -march=armv8.3-a+sve.\n\t* gcc.target/aarch64/sve/pr102587-2.c: Likewise.", "tree": {"sha": "a8f82d7bd22dc7bd75558cbfacadc6e0bf3e6058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8f82d7bd22dc7bd75558cbfacadc6e0bf3e6058"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/604459a09585314841cdce4698893c656481691b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604459a09585314841cdce4698893c656481691b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604459a09585314841cdce4698893c656481691b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604459a09585314841cdce4698893c656481691b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7646847df71e57edca5ec5b8c3c3dc4550dcb49d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7646847df71e57edca5ec5b8c3c3dc4550dcb49d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7646847df71e57edca5ec5b8c3c3dc4550dcb49d"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "78db25bbac4287cda3e5cee3344d0e1ff10d6e85", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604459a09585314841cdce4698893c656481691b/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604459a09585314841cdce4698893c656481691b/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=604459a09585314841cdce4698893c656481691b", "patch": "@@ -3038,30 +3038,33 @@ expand_DEFERRED_INIT (internal_fn, gcall *stmt)\n       /* Expand this memset call.  */\n       expand_builtin_memset (m_call, NULL_RTX, TYPE_MODE (var_type));\n     }\n-  /* ???  Deal with poly-int sized registers.  */\n-  else if (tree_fits_uhwi_p (TYPE_SIZE_UNIT (var_type)))\n+  else\n     {\n-      /* If this variable is in a register, use expand_assignment might\n-\t generate better code.  */\n-      tree init = build_zero_cst (var_type);\n-      unsigned HOST_WIDE_INT total_bytes\n-\t= tree_to_uhwi (TYPE_SIZE_UNIT (var_type));\n-\n-      if (init_type == AUTO_INIT_PATTERN)\n+      /* If this variable is in a register use expand_assignment.  */\n+      tree init;\n+      if (tree_fits_uhwi_p (var_size)\n+\t  && (init_type == AUTO_INIT_PATTERN\n+\t      || !is_gimple_reg_type (var_type)))\n \t{\n+\t  unsigned HOST_WIDE_INT total_bytes = tree_to_uhwi (var_size);\n \t  unsigned char *buf = (unsigned char *) xmalloc (total_bytes);\n-\t  memset (buf, INIT_PATTERN_VALUE, total_bytes);\n+\t  memset (buf, (init_type == AUTO_INIT_PATTERN\n+\t\t\t? INIT_PATTERN_VALUE : 0), total_bytes);\n \t  if (can_native_interpret_type_p (var_type))\n \t    init = native_interpret_expr (var_type, buf, total_bytes);\n \t  else\n \t    {\n \t      tree itype = build_nonstandard_integer_type\n \t\t\t     (total_bytes * BITS_PER_UNIT, 1);\n \t      wide_int w = wi::from_buffer (buf, total_bytes);\n-\t      init = build1 (VIEW_CONVERT_EXPR, var_type,\n-\t\t\t     wide_int_to_tree (itype, w));\n+\t      init = wide_int_to_tree (itype, w);\n+\t      /* Pun the LHS to make sure its type has constant size.  */\n+\t      lhs = build1 (VIEW_CONVERT_EXPR, itype, lhs);\n \t    }\n \t}\n+      else\n+\t/* Use zero-init also for variable-length sizes.  */\n+\tinit = build_zero_cst (var_type);\n \n       expand_assignment (lhs, init, false);\n     }"}, {"sha": "af2ae59e5d482dcd689e3058927758dadf120559", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr102587-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604459a09585314841cdce4698893c656481691b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr102587-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604459a09585314841cdce4698893c656481691b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr102587-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr102587-1.c?ref=604459a09585314841cdce4698893c656481691b", "patch": "@@ -1,4 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=zero\" } */\n+/* { dg-options \"-march=armv8.3-a+sve -ftrivial-auto-var-init=zero\" } */\n \n void foo() { __SVFloat64_t f64; }"}, {"sha": "8c9d9908bac696a442ea3b07e6ead6e36a047507", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr102587-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604459a09585314841cdce4698893c656481691b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr102587-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604459a09585314841cdce4698893c656481691b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr102587-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr102587-2.c?ref=604459a09585314841cdce4698893c656481691b", "patch": "@@ -1,4 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=pattern\" } */\n+/* { dg-options \"-march=armv8.3-a+sve -ftrivial-auto-var-init=pattern\" } */\n \n void foo() { __SVFloat64_t f64; }"}]}