{"sha": "68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhlNjljZTI3ZmU3YjI1Y2YyNjA2ZjgzYWYyZmMzMDBjMGI0ZjFmNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-11-08T14:30:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-11-08T14:30:29Z"}, "message": "regex_automaton.h (__detail::_State, [...]): Remove redundant _CharT template parameters.\n\n\t* include/bits/regex_automaton.h (__detail::_State, __detail::_NFA,\n\t__detail::_StateSeq): Remove redundant _CharT template parameters.\n\t* include/bits/regex_automaton.tcc: Likewise.\n\t* include/bits/regex_compiler.h (__detail::_Compiler): Likewise.\n\t(__compile_nfa): Add object generator for _Compiler.\n\t* include/bits/regex_compiler.tcc: Remove _CharT template parameters.\n\t* include/bits/regex_executor.h: Likewise.\n\t* include/bits/regex_executor.tcc: Likewise.\n\t* include/bits/regex.h (basic_regex): Assert char_type matches. Use\n\t__compile_nfa object generator. Remove _CharT template parameter.\n\nFrom-SVN: r204572", "tree": {"sha": "da71335a2840b0822da62b255453b9c008c1f6c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da71335a2840b0822da62b255453b9c008c1f6c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d9d218516ac5f1004d1b5aef427d11bea1a242c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9d218516ac5f1004d1b5aef427d11bea1a242c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d9d218516ac5f1004d1b5aef427d11bea1a242c"}], "stats": {"total": 139, "additions": 80, "deletions": 59}, "files": [{"sha": "c8cd18545a610750b0199ea782a7e32006f657c2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4", "patch": "@@ -12,6 +12,17 @@\n \t* include/bits/regex_executor.h (__detail::_Executor::_M_is_word): Use\n \tarray, so past-the-end iterator is valid.\n \n+\t* include/bits/regex_automaton.h (__detail::_State, __detail::_NFA,\n+\t__detail::_StateSeq): Remove redundant _CharT template parameters.\n+\t* include/bits/regex_automaton.tcc: Likewise.\n+\t* include/bits/regex_compiler.h (__detail::_Compiler): Likewise.\n+\t(__compile_nfa): Add object generator for _Compiler.\n+\t* include/bits/regex_compiler.tcc: Remove _CharT template parameters.\n+\t* include/bits/regex_executor.h: Likewise.\n+\t* include/bits/regex_executor.tcc: Likewise.\n+\t* include/bits/regex.h (basic_regex): Assert char_type matches. Use\n+\t__compile_nfa object generator. Remove _CharT template parameter.\n+\n 2013-11-06  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/bits/regex_automaton.h (_S_opcode_word_boundry): Rename to"}, {"sha": "84b8cf1dd4fd65707047d7e5018872ac77ed4aba", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4", "patch": "@@ -377,10 +377,13 @@ _GLIBCXX_END_NAMESPACE_VERSION\n    * Storage for the regular expression is allocated and deallocated as\n    * necessary by the member functions of this class.\n    */\n-  template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type> >\n+  template<typename _Ch_type, typename _Rx_traits = regex_traits<_Ch_type>>\n     class basic_regex\n     {\n     public:\n+      static_assert(is_same<_Ch_type, typename _Rx_traits::char_type>::value,\n+\t\t    \"regex traits class must have the same char_type\");\n+\n       // types:\n       typedef _Ch_type                            value_type;\n       typedef _Rx_traits                          traits_type;\n@@ -498,8 +501,8 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \tbasic_regex(_FwdIter __first, _FwdIter __last,\n \t\t    flag_type __f = ECMAScript)\n \t: _M_flags(__f),\n-\t  _M_automaton(__detail::_Compiler<_FwdIter, _Ch_type, _Rx_traits>\n-\t\t       (__first, __last, _M_traits, _M_flags)._M_get_nfa())\n+\t  _M_automaton(__detail::__compile_nfa(__first, __last, _M_traits,\n+\t\t\t\t\t       _M_flags))\n \t{ }\n \n       /**\n@@ -634,9 +637,8 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \t       flag_type __flags = ECMAScript)\n \t{\n \t  _M_flags = __flags;\n-\t  _M_automaton =\n-\t    __detail::_Compiler<decltype(__s.begin()), _Ch_type, _Rx_traits>\n-\t    (__s.begin(), __s.end(), _M_traits, _M_flags)._M_get_nfa();\n+\t  _M_automaton = __detail::__compile_nfa(__s.begin(), __s.end(),\n+\t\t\t\t\t\t _M_traits, _M_flags);\n \t  return *this;\n \t}\n \n@@ -730,8 +732,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n #endif\n \n     protected:\n-      typedef std::shared_ptr<__detail::_NFA<_Ch_type, _Rx_traits>>\n-\t_AutomatonPtr;\n+      typedef std::shared_ptr<__detail::_NFA<_Rx_traits>> _AutomatonPtr;\n \n       template<typename _Bp, typename _Ap, typename _Cp, typename _Rp,\n \t__detail::_RegexExecutorPolicy, bool>"}, {"sha": "1be51221ecdb01b42e3181a0b7c53e712e7add3f", "filename": "libstdc++-v3/include/bits/regex_automaton.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h?ref=68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4", "patch": "@@ -103,10 +103,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n   };\n \n-  template<typename _CharT, typename _TraitsT>\n+  template<typename _TraitsT>\n     struct _State : _State_base\n     {\n-      typedef _Matcher<_CharT>           _MatcherT;\n+      typedef _Matcher<typename _TraitsT::char_type> _MatcherT;\n \n       _MatcherT      _M_matches;        // for _S_opcode_match\n \n@@ -155,12 +155,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     bool                      _M_has_backref;\n   };\n \n-  template<typename _CharT, typename _TraitsT>\n+  template<typename _TraitsT>\n     struct _NFA\n-    : _NFA_base, std::vector<_State<_CharT, _TraitsT>>\n+    : _NFA_base, std::vector<_State<_TraitsT>>\n     {\n-      typedef _State<_CharT, _TraitsT>\t\t_StateT;\n-      typedef _Matcher<_CharT>\t\t\t_MatcherT;\n+      typedef _State<_TraitsT>\t\t\t\t_StateT;\n+      typedef _Matcher<typename _TraitsT::char_type>\t_MatcherT;\n \n       using _NFA_base::_NFA_base;\n \n@@ -268,11 +268,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// Describes a sequence of one or more %_State, its current start\n   /// and end(s).  This structure contains fragments of an NFA during\n   /// construction.\n-  template<typename _CharT, typename _TraitsT>\n+  template<typename _TraitsT>\n     class _StateSeq\n     {\n     public:\n-      typedef _NFA<_CharT, _TraitsT> _RegexT;\n+      typedef _NFA<_TraitsT> _RegexT;\n \n     public:\n       _StateSeq(_RegexT& __nfa, _StateIdT __s)"}, {"sha": "b0734cf2988c1637a683c99451ceac63d2532cf5", "filename": "libstdc++-v3/include/bits/regex_automaton.tcc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc?ref=68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4", "patch": "@@ -129,9 +129,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return __ostr;\n   }\n \n-  template<typename _CharT, typename _TraitsT>\n+  template<typename _TraitsT>\n     std::ostream&\n-    _NFA<_CharT, _TraitsT>::_M_dot(std::ostream& __ostr) const\n+    _NFA<_TraitsT>::_M_dot(std::ostream& __ostr) const\n     {\n       __ostr << \"digraph _Nfa {\\n\"\n \t        \"  rankdir=LR;\\n\";\n@@ -142,9 +142,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n #endif\n \n-  template<typename _CharT, typename _TraitsT>\n+  template<typename _TraitsT>\n     _StateIdT\n-    _NFA<_CharT, _TraitsT>::_M_insert_backref(size_t __index)\n+    _NFA<_TraitsT>::_M_insert_backref(size_t __index)\n     {\n       // To figure out whether a backref is valid, a stack is used to store\n       // unfinished sub-expressions. For example, when parsing\n@@ -164,9 +164,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return _M_insert_state(std::move(__tmp));\n     }\n \n-  template<typename _CharT, typename _TraitsT>\n+  template<typename _TraitsT>\n     void\n-    _NFA<_CharT, _TraitsT>::_M_eliminate_dummy()\n+    _NFA<_TraitsT>::_M_eliminate_dummy()\n     {\n       for (auto& __it : *this)\n \t{\n@@ -182,9 +182,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   // Just apply DFS on the sequence and re-link their links.\n-  template<typename _CharT, typename _TraitsT>\n-    _StateSeq<_CharT, _TraitsT>\n-    _StateSeq<_CharT, _TraitsT>::_M_clone()\n+  template<typename _TraitsT>\n+    _StateSeq<_TraitsT>\n+    _StateSeq<_TraitsT>::_M_clone()\n     {\n       std::map<_StateIdT, _StateIdT> __m;\n       std::stack<_StateIdT> __stack;"}, {"sha": "fef8862487251fed6e4bc3621ecee0cdca775faa", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4", "patch": "@@ -43,12 +43,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct _BracketMatcher;\n \n   /// Builds an NFA from an input iterator interval.\n-  template<typename _FwdIter, typename _CharT, typename _TraitsT>\n+  template<typename _FwdIter, typename _TraitsT>\n     class _Compiler\n     {\n     public:\n       typedef typename _TraitsT::string_type      _StringT;\n-      typedef _NFA<_CharT, _TraitsT>              _RegexT;\n+      typedef _NFA<_TraitsT>              \t  _RegexT;\n       typedef regex_constants::syntax_option_type _FlagT;\n \n       _Compiler(_FwdIter __b, _FwdIter __e,\n@@ -59,9 +59,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return make_shared<_RegexT>(std::move(_M_nfa)); }\n \n     private:\n+      typedef typename _TraitsT::char_type\t\t      _CharT;\n       typedef _Scanner<_FwdIter>                              _ScannerT;\n       typedef typename _ScannerT::_TokenT                     _TokenT;\n-      typedef _StateSeq<_CharT, _TraitsT>                     _StateSeqT;\n+      typedef _StateSeq<_TraitsT>                     \t      _StateSeqT;\n       typedef std::stack<_StateSeqT, std::vector<_StateSeqT>> _StackT;\n       typedef _BracketMatcher<_CharT, _TraitsT>               _BMatcherT;\n       typedef std::ctype<_CharT>                              _CtypeT;\n@@ -129,6 +130,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _StackT         _M_stack;\n     };\n \n+  template<typename _FwdIter, typename _TraitsT>\n+    inline std::shared_ptr<_NFA<_TraitsT>>\n+    __compile_nfa(_FwdIter __first, _FwdIter __last, const _TraitsT& __traits,\n+\t\t  regex_constants::syntax_option_type __flags)\n+    {\n+      using _Cmplr = _Compiler<_FwdIter, _TraitsT>;\n+      return _Cmplr(__first, __last, __traits, __flags)._M_get_nfa();\n+    }\n+\n   template<typename _CharT, typename _TraitsT>\n     struct _AnyMatcher\n     {"}, {"sha": "49c32b8a0ed04e7a05c84636ea716cf8d0807c05", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4", "patch": "@@ -59,8 +59,8 @@ namespace __detail\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  template<typename _FwdIter, typename _CharT, typename _TraitsT>\n-    _Compiler<_FwdIter, _CharT, _TraitsT>::\n+  template<typename _FwdIter, typename _TraitsT>\n+    _Compiler<_FwdIter, _TraitsT>::\n     _Compiler(_FwdIter __b, _FwdIter __e,\n \t      const _TraitsT& __traits, _FlagT __flags)\n     : _M_flags((__flags\n@@ -73,7 +73,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       ? __flags\n \t       : __flags | regex_constants::ECMAScript),\n     _M_traits(__traits),\n-    _M_ctype(std::use_facet<std::ctype<_CharT>>(_M_traits.getloc())),\n+    _M_ctype(std::use_facet<_CtypeT>(_M_traits.getloc())),\n     _M_scanner(__b, __e, _M_flags, _M_traits.getloc()),\n     _M_nfa(_M_flags)\n     {\n@@ -89,9 +89,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_nfa._M_eliminate_dummy();\n     }\n \n-  template<typename _FwdIter, typename _CharT, typename _TraitsT>\n+  template<typename _FwdIter, typename _TraitsT>\n     void\n-    _Compiler<_FwdIter, _CharT, _TraitsT>::\n+    _Compiler<_FwdIter, _TraitsT>::\n     _M_disjunction()\n     {\n       this->_M_alternative();\n@@ -110,9 +110,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n-  template<typename _FwdIter, typename _CharT, typename _TraitsT>\n+  template<typename _FwdIter, typename _TraitsT>\n     void\n-    _Compiler<_FwdIter, _CharT, _TraitsT>::\n+    _Compiler<_FwdIter, _TraitsT>::\n     _M_alternative()\n     {\n       if (this->_M_term())\n@@ -126,9 +126,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_stack.push(_StateSeqT(_M_nfa, _M_nfa._M_insert_dummy()));\n     }\n \n-  template<typename _FwdIter, typename _CharT, typename _TraitsT>\n+  template<typename _FwdIter, typename _TraitsT>\n     bool\n-    _Compiler<_FwdIter, _CharT, _TraitsT>::\n+    _Compiler<_FwdIter, _TraitsT>::\n     _M_term()\n     {\n       if (this->_M_assertion())\n@@ -141,9 +141,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return false;\n     }\n \n-  template<typename _FwdIter, typename _CharT, typename _TraitsT>\n+  template<typename _FwdIter, typename _TraitsT>\n     bool\n-    _Compiler<_FwdIter, _CharT, _TraitsT>::\n+    _Compiler<_FwdIter, _TraitsT>::\n     _M_assertion()\n     {\n       if (_M_match_token(_ScannerT::_S_token_line_begin))\n@@ -172,9 +172,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return true;\n     }\n \n-  template<typename _FwdIter, typename _CharT, typename _TraitsT>\n+  template<typename _FwdIter, typename _TraitsT>\n     void\n-    _Compiler<_FwdIter, _CharT, _TraitsT>::\n+    _Compiler<_FwdIter, _TraitsT>::\n     _M_quantifier()\n     {\n       bool __neg = (_M_flags & regex_constants::ECMAScript);\n@@ -278,9 +278,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n-  template<typename _FwdIter, typename _CharT, typename _TraitsT>\n+  template<typename _FwdIter, typename _TraitsT>\n     bool\n-    _Compiler<_FwdIter, _CharT, _TraitsT>::\n+    _Compiler<_FwdIter, _TraitsT>::\n     _M_atom()\n     {\n       if (_M_match_token(_ScannerT::_S_token_anychar))\n@@ -329,9 +329,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return true;\n     }\n \n-  template<typename _FwdIter, typename _CharT, typename _TraitsT>\n+  template<typename _FwdIter, typename _TraitsT>\n     bool\n-    _Compiler<_FwdIter, _CharT, _TraitsT>::\n+    _Compiler<_FwdIter, _TraitsT>::\n     _M_bracket_expression()\n     {\n       bool __neg =\n@@ -346,9 +346,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return true;\n     }\n \n-  template<typename _FwdIter, typename _CharT, typename _TraitsT>\n+  template<typename _FwdIter, typename _TraitsT>\n     void\n-    _Compiler<_FwdIter, _CharT, _TraitsT>::\n+    _Compiler<_FwdIter, _TraitsT>::\n     _M_expression_term(_BMatcherT& __matcher)\n     {\n       if (_M_match_token(_ScannerT::_S_token_collsymbol))\n@@ -383,9 +383,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__throw_regex_error(regex_constants::error_brack);\n     }\n \n-  template<typename _FwdIter, typename _CharT, typename _TraitsT>\n+  template<typename _FwdIter, typename _TraitsT>\n     bool\n-    _Compiler<_FwdIter, _CharT, _TraitsT>::\n+    _Compiler<_FwdIter, _TraitsT>::\n     _M_try_char()\n     {\n       bool __is_char = false;\n@@ -404,9 +404,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __is_char;\n     }\n \n-  template<typename _FwdIter, typename _CharT, typename _TraitsT>\n+  template<typename _FwdIter, typename _TraitsT>\n     bool\n-    _Compiler<_FwdIter, _CharT, _TraitsT>::\n+    _Compiler<_FwdIter, _TraitsT>::\n     _M_match_token(_TokenT token)\n     {\n       if (token == _M_scanner._M_get_token())\n@@ -418,9 +418,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return false;\n     }\n \n-  template<typename _FwdIter, typename _CharT, typename _TraitsT>\n+  template<typename _FwdIter, typename _TraitsT>\n     int\n-    _Compiler<_FwdIter, _CharT, _TraitsT>::\n+    _Compiler<_FwdIter, _TraitsT>::\n     _M_cur_int_value(int __radix)\n     {\n       long __v = 0;"}, {"sha": "ded77475f6fe6e5f6f011540a60ae64dc22f5254", "filename": "libstdc++-v3/include/bits/regex_executor.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h?ref=68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4", "patch": "@@ -62,7 +62,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef std::vector<sub_match<_BiIter>, _Alloc>       _ResultsVec;\n       typedef regex_constants::match_flag_type              _FlagT;\n       typedef typename _TraitsT::char_class_type            _ClassT;\n-      typedef _NFA<_CharT, _TraitsT>                        _NFAT;\n+      typedef _NFA<_TraitsT>                                _NFAT;\n \n     public:\n       _Executor(_BiIter         __begin,\n@@ -138,10 +138,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       bool\n-      _M_word_boundary(_State<_CharT, _TraitsT> __state) const;\n+      _M_word_boundary(_State<_TraitsT> __state) const;\n \n       bool\n-      _M_lookahead(_State<_CharT, _TraitsT> __state);\n+      _M_lookahead(_State<_TraitsT> __state);\n \n     public:\n       _ResultsVec                                          _M_cur_results;"}, {"sha": "22fd67cfa3b4d9f20e063f7bcc28da0a7601ee23", "filename": "libstdc++-v3/include/bits/regex_executor.tcc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc?ref=68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4", "patch": "@@ -143,8 +143,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _BiIter, typename _Alloc, typename _TraitsT,\n     bool __dfs_mode>\n     bool _Executor<_BiIter, _Alloc, _TraitsT, __dfs_mode>::\n-    _M_lookahead(_State<_Executor<_BiIter, _Alloc, _TraitsT, __dfs_mode>::\n-\t\t _CharT, _TraitsT> __state)\n+    _M_lookahead(_State<_TraitsT> __state)\n     {\n       _ResultsVec __what(_M_cur_results.size());\n       auto __sub = std::unique_ptr<_Executor>(new _Executor(_M_current,\n@@ -348,7 +347,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _BiIter, typename _Alloc, typename _TraitsT,\n     bool __dfs_mode>\n     bool _Executor<_BiIter, _Alloc, _TraitsT, __dfs_mode>::\n-    _M_word_boundary(_State<_CharT, _TraitsT> __state) const\n+    _M_word_boundary(_State<_TraitsT> __state) const\n     {\n       // By definition.\n       bool __ans = false;"}]}