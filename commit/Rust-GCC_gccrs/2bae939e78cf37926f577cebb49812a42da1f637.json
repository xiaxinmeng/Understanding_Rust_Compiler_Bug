{"sha": "2bae939e78cf37926f577cebb49812a42da1f637", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJhZTkzOWU3OGNmMzc5MjZmNTc3Y2ViYjQ5ODEyYTQyZGExZjYzNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-22T19:11:09Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-22T19:11:09Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1050", "tree": {"sha": "55c256cdd4d126904d9c9000f73ea12a75561bf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55c256cdd4d126904d9c9000f73ea12a75561bf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bae939e78cf37926f577cebb49812a42da1f637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bae939e78cf37926f577cebb49812a42da1f637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bae939e78cf37926f577cebb49812a42da1f637", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bae939e78cf37926f577cebb49812a42da1f637/comments", "author": null, "committer": null, "parents": [{"sha": "3251bd405042a6d97069b1b87fc8985efa82ac08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3251bd405042a6d97069b1b87fc8985efa82ac08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3251bd405042a6d97069b1b87fc8985efa82ac08"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "7e502ec1057a3d0e7f475bda3f3233f16f239059", "filename": "gcc/c-decl.c", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bae939e78cf37926f577cebb49812a42da1f637/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bae939e78cf37926f577cebb49812a42da1f637/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=2bae939e78cf37926f577cebb49812a42da1f637", "patch": "@@ -1787,6 +1787,8 @@ pushdecl (x)\n \n \t  /* Maybe warn if shadowing something else.  */\n \t  else if (warn_shadow && !TREE_EXTERNAL (x)\n+\t\t   /* No shadow warnings for internally generated vars.  */\n+\t\t   && !DECL_IGNORED_P (x)\n \t\t   /* No shadow warnings for vars made for inlining.  */\n \t\t   && ! DECL_FROM_INLINE (x))\n \t    {\n@@ -2595,19 +2597,19 @@ init_decl_processing ()\n   builtin_function (\"__builtin_getman\", double_ftype_double, BUILT_IN_GETMAN, 0);\n #endif\n \n-  /* Create the global binding of __NAME__.  */\n-  declare_function_name (\"top level\");\n+  /* Create the global bindings of __NAME__ and __PRINTABLE_NAME__.  */\n+  declare_function_name (\"\", \"top level\");\n \n   start_identifier_warnings ();\n \n   init_format_info_table ();\n }\n \n-/* Make a binding for __NAME__.  */\n+/* Make bindings for __NAME__ and __PRINTABLE_NAME__.  */\n \n static void\n-declare_function_name (name)\n-     char *name;\n+declare_function_name (name, printable_name)\n+     char *name, *printable_name;\n {\n   tree decl, init;\n \n@@ -2622,6 +2624,18 @@ declare_function_name (name)\n   TREE_TYPE (init) = char_array_type_node;\n   DECL_INITIAL (decl) = init;\n   finish_decl (decl, init, NULL_TREE);\n+\n+  push_obstacks_nochange ();\n+  decl = pushdecl (build_decl (VAR_DECL,\n+\t\t\t       get_identifier (\"__PRINTABLE_NAME__\"),\n+\t\t\t       char_array_type_node));\n+  TREE_STATIC (decl) = 1;\n+  TREE_READONLY (decl) = 1;\n+  DECL_IGNORED_P (decl) = 1;\n+  init = build_string (strlen (printable_name) + 1, printable_name);\n+  TREE_TYPE (init) = char_array_type_node;\n+  DECL_INITIAL (decl) = init;\n+  finish_decl (decl, init, NULL_TREE);\n }\n \n /* Return a definition for a builtin function named NAME and whose data type\n@@ -5473,8 +5487,17 @@ store_parm_decls ()\n   if (c_function_varargs)\n     mark_varargs ();\n \n-  /* Declare __NAME__ for this function.  */\n-  declare_function_name (IDENTIFIER_POINTER (DECL_NAME (current_function_decl)));\n+  /* Declare __NAME__ and __PRINTABLE_NAME__ for this function.  */\n+  {\n+    char *kind = \"function\";\n+    char *name;\n+    if (current_function_decl != 0\n+\t&& TREE_CODE (TREE_TYPE (current_function_decl)) == METHOD_TYPE)\n+      kind = \"method\";\n+    name = (*decl_printable_name) (current_function_decl, &kind);\n+    declare_function_name (name,\n+\t\t\t   IDENTIFIER_POINTER (DECL_NAME (current_function_decl)));\n+  }\n \n   /* Set up parameters and prepare for return, for the function.  */\n "}]}