{"sha": "c4b50f1a48225024845210de1b62661bb4ddbd93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRiNTBmMWE0ODIyNTAyNDg0NTIxMGRlMWI2MjY2MWJiNGRkYmQ5Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-06-04T22:46:00Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-06-04T22:46:00Z"}, "message": "alpha.c (mode_mask_operand): Simplify without ifdefs.\n\n        * config/alpha/alpha.c (mode_mask_operand): Simplify without ifdefs.\n        (print_operand) ['U']: Likewise.\n        (alpha_expand_unaligned_store): Correct constants for 32-bit cross.\n        (alpha_expand_unaligned_store_words): Likewise.\n        (alpha_expand_builtin_vector_binop): Fix typo.\n        (enum alpha_builtin, code_for_builtin): Add remaining ext, ins, msk,\n        umulh, and cix insns.\n        (one_arg_builtins): Add cix builtins.\n        (two_arg_builtins): Add ext, ins, msk, umulh builtins.\n        (alpha_expand_builtin): Fix typo in arity.\n        * config/alpha/alpha.md (UNSPEC_CTLZ, UNSPEC_CTPOP): New.\n        (builtin_extbl, builtin_extwl, builtin_extll, builtin_extwh,\n        builtin_extlh, builtin_insbl, builtin_inswl, builtin_insll,\n        builtin_insql, builtin_inswh, builtin_inslh, builtin_insqh,\n        builtin_mskbl, builtin_mskwl, builtin_mskll, builtin_mskql,\n        builtin_mskwh, builtin_msklh, builtin_mskqh, builtin_cttz,\n        builtin_ctlz, builtin_ctpop): New.\n        * doc/extend.texi (Alpha Built-in Functions): Update.\n\n        * gcc.dg/alpha-base-1.c: Add ext/ins/msk/umulh cases.\n        * gcc.dg/alpha-max-1.c, gcc.dg/alpha-max-2.c: Use -mcpu=ev67.\n        * gcc.dg/alpha-cix-1.c, gcc.dg/alpha-cix-2.c: New.\n\nFrom-SVN: r54267", "tree": {"sha": "2ef4ada2c72ace33f08fca98da0a36b7bbae7969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ef4ada2c72ace33f08fca98da0a36b7bbae7969"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4b50f1a48225024845210de1b62661bb4ddbd93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4b50f1a48225024845210de1b62661bb4ddbd93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4b50f1a48225024845210de1b62661bb4ddbd93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4b50f1a48225024845210de1b62661bb4ddbd93/comments", "author": null, "committer": null, "parents": [{"sha": "afb0f770f44849e6f17cb44ed9d3b9338f12bd9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb0f770f44849e6f17cb44ed9d3b9338f12bd9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afb0f770f44849e6f17cb44ed9d3b9338f12bd9b"}], "stats": {"total": 655, "additions": 561, "deletions": 94}, "files": [{"sha": "bdc94af77b78dfc67129de96b77c8f9daae0b35c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4b50f1a48225024845210de1b62661bb4ddbd93", "patch": "@@ -1,3 +1,24 @@\n+2002-06-04  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (mode_mask_operand): Simplify without ifdefs.\n+\t(print_operand) ['U']: Likewise.\n+\t(alpha_expand_unaligned_store): Correct constants for 32-bit cross.\n+\t(alpha_expand_unaligned_store_words): Likewise.\n+\t(alpha_expand_builtin_vector_binop): Fix typo.\n+\t(enum alpha_builtin, code_for_builtin): Add remaining ext, ins, msk,\n+\tumulh, and cix insns.\n+\t(one_arg_builtins): Add cix builtins.\n+\t(two_arg_builtins): Add ext, ins, msk, umulh builtins.\n+\t(alpha_expand_builtin): Fix typo in arity.\n+\t* config/alpha/alpha.md (UNSPEC_CTLZ, UNSPEC_CTPOP): New.\n+\t(builtin_extbl, builtin_extwl, builtin_extll, builtin_extwh,\n+\tbuiltin_extlh, builtin_insbl, builtin_inswl, builtin_insll,\n+\tbuiltin_insql, builtin_inswh, builtin_inslh, builtin_insqh,\n+\tbuiltin_mskbl, builtin_mskwl, builtin_mskll, builtin_mskql,\n+\tbuiltin_mskwh, builtin_msklh, builtin_mskqh, builtin_cttz,\n+\tbuiltin_ctlz, builtin_ctpop): New.\n+\t* doc/extend.texi (Alpha Built-in Functions): Update.\n+\n 2002-06-04  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* gengtype.c (write_gc_root): Don't unnecessarily prevent"}, {"sha": "bf45d76df746b78b13a2857be9782660b22245c0", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 166, "deletions": 92, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c4b50f1a48225024845210de1b62661bb4ddbd93", "patch": "@@ -729,24 +729,26 @@ mode_mask_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-#if HOST_BITS_PER_WIDE_INT == 32\n-  if (GET_CODE (op) == CONST_DOUBLE)\n-    return (CONST_DOUBLE_LOW (op) == -1\n-\t    && (CONST_DOUBLE_HIGH (op) == -1\n-\t\t|| CONST_DOUBLE_HIGH (op) == 0));\n-#else\n-  if (GET_CODE (op) == CONST_DOUBLE)\n-    return (CONST_DOUBLE_LOW (op) == -1 && CONST_DOUBLE_HIGH (op) == 0);\n-#endif\n+  if (GET_CODE (op) == CONST_INT)\n+    {\n+      HOST_WIDE_INT value = INTVAL (op);\n \n-  return (GET_CODE (op) == CONST_INT\n-\t  && (INTVAL (op) == 0xff\n-\t      || INTVAL (op) == 0xffff\n-\t      || INTVAL (op) == (HOST_WIDE_INT)0xffffffff\n-#if HOST_BITS_PER_WIDE_INT == 64\n-\t      || INTVAL (op) == -1\n-#endif\n-\t      ));\n+      if (value == 0xff)\n+\treturn 1;\n+      if (value == 0xffff)\n+\treturn 1;\n+      if (value == 0xffffffff)\n+\treturn 1;\n+      if (value == -1)\n+\treturn 1;\n+    }\n+  else if (HOST_BITS_PER_WIDE_INT == 32 && GET_CODE (op) == CONST_DOUBLE)\n+    {\n+      if (CONST_DOUBLE_LOW (op) == 0xffffffff && CONST_DOUBLE_HIGH (op) == 0)\n+\treturn 1;\n+    }\n+\n+  return 0;\n }\n \n /* Return 1 if OP is a multiple of 8 less than 64.  */\n@@ -4248,17 +4250,13 @@ alpha_expand_unaligned_store (dst, src, size, ofs)\n \t  emit_insn (gen_mskxl_be (dsth, dsth, GEN_INT (0xffff), addr));\n \t  break;\n \tcase 4:\n-\t  emit_insn (gen_mskxl_be (dsth, dsth, GEN_INT (0xffffffff), addr));\n-\t  break;\n-\tcase 8:\n \t  {\n-#if HOST_BITS_PER_WIDE_INT == 32\n-\t    rtx msk = immed_double_const (0xffffffff, 0xffffffff, DImode);\n-#else\n-\t    rtx msk = constm1_rtx;\n-#endif\n+\t    rtx msk = immed_double_const (0xffffffff, 0, DImode);\n \t    emit_insn (gen_mskxl_be (dsth, dsth, msk, addr));\n+\t    break;\n \t  }\n+\tcase 8:\n+\t  emit_insn (gen_mskxl_be (dsth, dsth, constm1_rtx, addr));\n \t  break;\n \t}\n \n@@ -4295,17 +4293,13 @@ alpha_expand_unaligned_store (dst, src, size, ofs)\n \t  emit_insn (gen_mskxl_le (dstl, dstl, GEN_INT (0xffff), addr));\n \t  break;\n \tcase 4:\n-\t  emit_insn (gen_mskxl_le (dstl, dstl, GEN_INT (0xffffffff), addr));\n-\t  break;\n-\tcase 8:\n \t  {\n-#if HOST_BITS_PER_WIDE_INT == 32\n-\t    rtx msk = immed_double_const (0xffffffff, 0xffffffff, DImode);\n-#else\n-\t    rtx msk = constm1_rtx;\n-#endif\n+\t    rtx msk = immed_double_const (0xffffffff, 0, DImode);\n \t    emit_insn (gen_mskxl_le (dstl, dstl, msk, addr));\n+\t    break;\n \t  }\n+\tcase 8:\n+\t  emit_insn (gen_mskxl_le (dstl, dstl, constm1_rtx, addr));\n \t  break;\n \t}\n     }\n@@ -4431,11 +4425,6 @@ alpha_expand_unaligned_store_words (data_regs, dmem, words, ofs)\n {\n   rtx const im8 = GEN_INT (-8);\n   rtx const i64 = GEN_INT (64);\n-#if HOST_BITS_PER_WIDE_INT == 32\n-  rtx const im1 = immed_double_const (0xffffffff, 0xffffffff, DImode);\n-#else\n-  rtx const im1 = constm1_rtx;\n-#endif\n   rtx ins_tmps[MAX_MOVE_WORDS];\n   rtx st_tmp_1, st_tmp_2, dreg;\n   rtx st_addr_1, st_addr_2, dmema;\n@@ -4499,13 +4488,13 @@ alpha_expand_unaligned_store_words (data_regs, dmem, words, ofs)\n   /* Split and merge the ends with the destination data.  */\n   if (WORDS_BIG_ENDIAN)\n     {\n-      emit_insn (gen_mskxl_be (st_tmp_2, st_tmp_2, im1, dreg));\n+      emit_insn (gen_mskxl_be (st_tmp_2, st_tmp_2, constm1_rtx, dreg));\n       emit_insn (gen_mskxh (st_tmp_1, st_tmp_1, i64, dreg));\n     }\n   else\n     {\n       emit_insn (gen_mskxh (st_tmp_2, st_tmp_2, i64, dreg));\n-      emit_insn (gen_mskxl_le (st_tmp_1, st_tmp_1, im1, dreg));\n+      emit_insn (gen_mskxl_le (st_tmp_1, st_tmp_1, constm1_rtx, dreg));\n     }\n \n   if (data_regs != NULL)\n@@ -5231,7 +5220,8 @@ alpha_expand_builtin_vector_binop (gen, mode, op0, op1, op2)\n     op1 = CONST0_RTX (mode);\n   else\n     op1 = gen_lowpart (mode, op1);\n-  if (op1 == const0_rtx)\n+\n+  if (op2 == const0_rtx)\n     op2 = CONST0_RTX (mode);\n   else\n     op2 = gen_lowpart (mode, op2);\n@@ -5703,31 +5693,40 @@ print_operand (file, x, code)\n \n     case 'U':\n       /* Similar, except do it from the mask.  */\n-      if (GET_CODE (x) == CONST_INT && INTVAL (x) == 0xff)\n-\tfprintf (file, \"b\");\n-      else if (GET_CODE (x) == CONST_INT && INTVAL (x) == 0xffff)\n-\tfprintf (file, \"w\");\n-      else if (GET_CODE (x) == CONST_INT && INTVAL (x) == 0xffffffff)\n-\tfprintf (file, \"l\");\n-#if HOST_BITS_PER_WIDE_INT == 32\n-      else if (GET_CODE (x) == CONST_DOUBLE\n-\t       && CONST_DOUBLE_HIGH (x) == 0\n-\t       && CONST_DOUBLE_LOW (x) == -1)\n-\tfprintf (file, \"l\");\n-      else if (GET_CODE (x) == CONST_DOUBLE\n-\t       && CONST_DOUBLE_HIGH (x) == -1\n-\t       && CONST_DOUBLE_LOW (x) == -1)\n-\tfprintf (file, \"q\");\n-#else\n-      else if (GET_CODE (x) == CONST_INT && INTVAL (x) == -1)\n-\tfprintf (file, \"q\");\n-      else if (GET_CODE (x) == CONST_DOUBLE\n-\t       && CONST_DOUBLE_HIGH (x) == 0\n-\t       && CONST_DOUBLE_LOW (x) == -1)\n-\tfprintf (file, \"q\");\n-#endif\n-      else\n-\toutput_operand_lossage (\"invalid %%U value\");\n+      if (GET_CODE (x) == CONST_INT)\n+\t{\n+\t  HOST_WIDE_INT value = INTVAL (x);\n+\n+\t  if (value == 0xff)\n+\t    {\n+\t      fputc ('b', file);\n+\t      break;\n+\t    }\n+\t  if (value == 0xffff)\n+\t    {\n+\t      fputc ('w', file);\n+\t      break;\n+\t    }\n+\t  if (value == 0xffffffff)\n+\t    {\n+\t      fputc ('l', file);\n+\t      break;\n+\t    }\n+\t  if (value == -1)\n+\t    {\n+\t      fputc ('q', file);\n+\t      break;\n+\t    }\n+\t}\n+      else if (HOST_BITS_PER_WIDE_INT == 32\n+\t       && GET_CODE (x) == CONST_DOUBLE\n+\t       && CONST_DOUBLE_LOW (x) == 0xffffffff\n+\t       && CONST_DOUBLE_HIGH (x) == 0)\n+\t{\n+\t  fputc ('l', file);\n+\t  break;\n+\t}\n+      output_operand_lossage (\"invalid %%U value\");\n       break;\n \n     case 's':\n@@ -6317,8 +6316,28 @@ alpha_va_arg (valist, type)\n enum alpha_builtin\n {\n   ALPHA_BUILTIN_CMPBGE,\n+  ALPHA_BUILTIN_EXTBL,\n+  ALPHA_BUILTIN_EXTWL,\n+  ALPHA_BUILTIN_EXTLL,\n   ALPHA_BUILTIN_EXTQL,\n+  ALPHA_BUILTIN_EXTWH,\n+  ALPHA_BUILTIN_EXTLH,\n   ALPHA_BUILTIN_EXTQH,\n+  ALPHA_BUILTIN_INSBL,\n+  ALPHA_BUILTIN_INSWL,\n+  ALPHA_BUILTIN_INSLL,\n+  ALPHA_BUILTIN_INSQL,\n+  ALPHA_BUILTIN_INSWH,\n+  ALPHA_BUILTIN_INSLH,\n+  ALPHA_BUILTIN_INSQH,\n+  ALPHA_BUILTIN_MSKBL,\n+  ALPHA_BUILTIN_MSKWL,\n+  ALPHA_BUILTIN_MSKLL,\n+  ALPHA_BUILTIN_MSKQL,\n+  ALPHA_BUILTIN_MSKWH,\n+  ALPHA_BUILTIN_MSKLH,\n+  ALPHA_BUILTIN_MSKQH,\n+  ALPHA_BUILTIN_UMULH,\n   ALPHA_BUILTIN_ZAP,\n   ALPHA_BUILTIN_ZAPNOT,\n   ALPHA_BUILTIN_AMASK,\n@@ -6340,9 +6359,65 @@ enum alpha_builtin\n   ALPHA_BUILTIN_UNPKBL,\n   ALPHA_BUILTIN_UNPKBW,\n \n+  /* TARGET_CIX */\n+  ALPHA_BUILTIN_CTTZ,\n+  ALPHA_BUILTIN_CTLZ,\n+  ALPHA_BUILTIN_CTPOP,\n+\n   ALPHA_BUILTIN_max\n };\n \n+static unsigned int const code_for_builtin[ALPHA_BUILTIN_max] = {\n+  CODE_FOR_builtin_cmpbge,\n+  CODE_FOR_builtin_extbl,\n+  CODE_FOR_builtin_extwl,\n+  CODE_FOR_builtin_extll,\n+  CODE_FOR_builtin_extql,\n+  CODE_FOR_builtin_extwh,\n+  CODE_FOR_builtin_extlh,\n+  CODE_FOR_builtin_extqh,\n+  CODE_FOR_builtin_insbl,\n+  CODE_FOR_builtin_inswl,\n+  CODE_FOR_builtin_insll,\n+  CODE_FOR_builtin_insql,\n+  CODE_FOR_builtin_inswh,\n+  CODE_FOR_builtin_inslh,\n+  CODE_FOR_builtin_insqh,\n+  CODE_FOR_builtin_mskbl,\n+  CODE_FOR_builtin_mskwl,\n+  CODE_FOR_builtin_mskll,\n+  CODE_FOR_builtin_mskql,\n+  CODE_FOR_builtin_mskwh,\n+  CODE_FOR_builtin_msklh,\n+  CODE_FOR_builtin_mskqh,\n+  CODE_FOR_umuldi3_highpart,\n+  CODE_FOR_builtin_zap,\n+  CODE_FOR_builtin_zapnot,\n+  CODE_FOR_builtin_amask,\n+  CODE_FOR_builtin_implver,\n+  CODE_FOR_builtin_rpcc,\n+\n+  /* TARGET_MAX */\n+  CODE_FOR_builtin_minub8,\n+  CODE_FOR_builtin_minsb8,\n+  CODE_FOR_builtin_minuw4,\n+  CODE_FOR_builtin_minsw4,\n+  CODE_FOR_builtin_maxub8,\n+  CODE_FOR_builtin_maxsb8,\n+  CODE_FOR_builtin_maxuw4,\n+  CODE_FOR_builtin_maxsw4,\n+  CODE_FOR_builtin_perr,\n+  CODE_FOR_builtin_pklb,\n+  CODE_FOR_builtin_pkwb,\n+  CODE_FOR_builtin_unpkbl,\n+  CODE_FOR_builtin_unpkbw,\n+\n+  /* TARGET_CIX */\n+  CODE_FOR_builtin_cttz,\n+  CODE_FOR_builtin_ctlz,\n+  CODE_FOR_builtin_ctpop\n+};\n+\n struct alpha_builtin_def\n {\n   const char *name;\n@@ -6360,13 +6435,36 @@ static struct alpha_builtin_def const one_arg_builtins[] = {\n   { \"__builtin_alpha_pklb\",\tALPHA_BUILTIN_PKLB,\tMASK_MAX },\n   { \"__builtin_alpha_pkwb\",\tALPHA_BUILTIN_PKWB,\tMASK_MAX },\n   { \"__builtin_alpha_unpkbl\",\tALPHA_BUILTIN_UNPKBL,\tMASK_MAX },\n-  { \"__builtin_alpha_unpkbw\",\tALPHA_BUILTIN_UNPKBW,\tMASK_MAX }\n+  { \"__builtin_alpha_unpkbw\",\tALPHA_BUILTIN_UNPKBW,\tMASK_MAX },\n+  { \"__builtin_alpha_cttz\",\tALPHA_BUILTIN_CTTZ,\tMASK_CIX },\n+  { \"__builtin_alpha_ctlz\",\tALPHA_BUILTIN_CTLZ,\tMASK_CIX },\n+  { \"__builtin_alpha_ctpop\",\tALPHA_BUILTIN_CTPOP,\tMASK_CIX }\n };\n \n static struct alpha_builtin_def const two_arg_builtins[] = {\n   { \"__builtin_alpha_cmpbge\",\tALPHA_BUILTIN_CMPBGE,\t0 },\n+  { \"__builtin_alpha_extbl\",\tALPHA_BUILTIN_EXTBL,\t0 },\n+  { \"__builtin_alpha_extwl\",\tALPHA_BUILTIN_EXTWL,\t0 },\n+  { \"__builtin_alpha_extll\",\tALPHA_BUILTIN_EXTLL,\t0 },\n   { \"__builtin_alpha_extql\",\tALPHA_BUILTIN_EXTQL,\t0 },\n+  { \"__builtin_alpha_extwh\",\tALPHA_BUILTIN_EXTWH,\t0 },\n+  { \"__builtin_alpha_extlh\",\tALPHA_BUILTIN_EXTLH,\t0 },\n   { \"__builtin_alpha_extqh\",\tALPHA_BUILTIN_EXTQH,\t0 },\n+  { \"__builtin_alpha_insbl\",\tALPHA_BUILTIN_INSBL,\t0 },\n+  { \"__builtin_alpha_inswl\",\tALPHA_BUILTIN_INSWL,\t0 },\n+  { \"__builtin_alpha_insll\",\tALPHA_BUILTIN_INSLL,\t0 },\n+  { \"__builtin_alpha_insql\",\tALPHA_BUILTIN_INSQL,\t0 },\n+  { \"__builtin_alpha_inswh\",\tALPHA_BUILTIN_INSWH,\t0 },\n+  { \"__builtin_alpha_inslh\",\tALPHA_BUILTIN_INSLH,\t0 },\n+  { \"__builtin_alpha_insqh\",\tALPHA_BUILTIN_INSQH,\t0 },\n+  { \"__builtin_alpha_mskbl\",\tALPHA_BUILTIN_MSKBL,\t0 },\n+  { \"__builtin_alpha_mskwl\",\tALPHA_BUILTIN_MSKWL,\t0 },\n+  { \"__builtin_alpha_mskll\",\tALPHA_BUILTIN_MSKLL,\t0 },\n+  { \"__builtin_alpha_mskql\",\tALPHA_BUILTIN_MSKQL,\t0 },\n+  { \"__builtin_alpha_mskwh\",\tALPHA_BUILTIN_MSKWH,\t0 },\n+  { \"__builtin_alpha_msklh\",\tALPHA_BUILTIN_MSKLH,\t0 },\n+  { \"__builtin_alpha_mskqh\",\tALPHA_BUILTIN_MSKQH,\t0 },\n+  { \"__builtin_alpha_umulh\",\tALPHA_BUILTIN_UMULH,\t0 },\n   { \"__builtin_alpha_zap\",\tALPHA_BUILTIN_ZAP,\t0 },\n   { \"__builtin_alpha_zapnot\",\tALPHA_BUILTIN_ZAPNOT,\t0 },\n   { \"__builtin_alpha_minub8\",\tALPHA_BUILTIN_MINUB8,\tMASK_MAX },\n@@ -6431,30 +6529,6 @@ alpha_expand_builtin (exp, target, subtarget, mode, ignore)\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n      int ignore ATTRIBUTE_UNUSED;\n {\n-  static unsigned int const code_for_builtin[ALPHA_BUILTIN_max] = {\n-    CODE_FOR_builtin_cmpbge,\n-    CODE_FOR_builtin_extql,\n-    CODE_FOR_builtin_extqh,\n-    CODE_FOR_builtin_zap,\n-    CODE_FOR_builtin_zapnot,\n-    CODE_FOR_builtin_amask,\n-    CODE_FOR_builtin_implver,\n-    CODE_FOR_builtin_rpcc,\n-    CODE_FOR_builtin_minub8,\n-    CODE_FOR_builtin_minsb8,\n-    CODE_FOR_builtin_minuw4,\n-    CODE_FOR_builtin_minsw4,\n-    CODE_FOR_builtin_maxub8,\n-    CODE_FOR_builtin_maxsb8,\n-    CODE_FOR_builtin_maxuw4,\n-    CODE_FOR_builtin_maxsw4,\n-    CODE_FOR_builtin_perr,\n-    CODE_FOR_builtin_pklb,\n-    CODE_FOR_builtin_pkwb,\n-    CODE_FOR_builtin_unpkbl,\n-    CODE_FOR_builtin_unpkbw,\n-  };\n-\n #define MAX_ARGS 2\n \n   tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n@@ -6485,7 +6559,7 @@ alpha_expand_builtin (exp, target, subtarget, mode, ignore)\n \n       op[arity] = expand_expr (arg, NULL_RTX, VOIDmode, 0);\n \n-      insn_op = &insn_data[icode].operand[arity];\n+      insn_op = &insn_data[icode].operand[arity + 1];\n       if (!(*insn_op->predicate) (op[arity], insn_op->mode))\n \top[arity] = copy_to_mode_reg (insn_op->mode, op[arity]);\n     }"}, {"sha": "39bdd24533ed4dfab9817614c35033294075e1e2", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=c4b50f1a48225024845210de1b62661bb4ddbd93", "patch": "@@ -56,6 +56,8 @@\n    (UNSPEC_AMASK\t24)\n    (UNSPEC_IMPLVER\t25)\n    (UNSPEC_PERR\t\t26)\n+   (UNSPEC_CTLZ\t\t27)\n+   (UNSPEC_CTPOP\t28)\n   ])\n \n ;; UNSPEC_VOLATILE:\n@@ -6990,6 +6992,51 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n   ;; actually differentiate between ILOG and ICMP in the schedule.\n   [(set_attr \"type\" \"icmp\")])\n \n+(define_expand \"builtin_extbl\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  rtx (*gen) PARAMS ((rtx, rtx, rtx, rtx));\n+  if (WORDS_BIG_ENDIAN)\n+    gen = gen_extxl_be;\n+  else\n+    gen = gen_extxl_le;\n+  emit_insn ((*gen) (operands[0], operands[1], GEN_INT (8), operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"builtin_extwl\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  rtx (*gen) PARAMS ((rtx, rtx, rtx, rtx));\n+  if (WORDS_BIG_ENDIAN)\n+    gen = gen_extxl_be;\n+  else\n+    gen = gen_extxl_le;\n+  emit_insn ((*gen) (operands[0], operands[1], GEN_INT (16), operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"builtin_extll\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  rtx (*gen) PARAMS ((rtx, rtx, rtx, rtx));\n+  if (WORDS_BIG_ENDIAN)\n+    gen = gen_extxl_be;\n+  else\n+    gen = gen_extxl_le;\n+  emit_insn ((*gen) (operands[0], operands[1], GEN_INT (32), operands[2]));\n+  DONE;\n+})\n+\n (define_expand \"builtin_extql\"\n   [(match_operand:DI 0 \"register_operand\" \"\")\n    (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n@@ -7005,6 +7052,36 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n   DONE;\n })\n \n+(define_expand \"builtin_extwh\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  rtx (*gen) PARAMS ((rtx, rtx, rtx));\n+  if (WORDS_BIG_ENDIAN)\n+    gen = gen_extwh_be;\n+  else\n+    gen = gen_extwh_le;\n+  emit_insn ((*gen) (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"builtin_extlh\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  rtx (*gen) PARAMS ((rtx, rtx, rtx));\n+  if (WORDS_BIG_ENDIAN)\n+    gen = gen_extlh_be;\n+  else\n+    gen = gen_extlh_le;\n+  emit_insn ((*gen) (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n+\n (define_expand \"builtin_extqh\"\n   [(match_operand:DI 0 \"register_operand\" \"\")\n    (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n@@ -7020,6 +7097,198 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n   DONE;\n })\n \n+(define_expand \"builtin_insbl\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  rtx (*gen) PARAMS ((rtx, rtx, rtx));\n+  if (WORDS_BIG_ENDIAN)\n+    gen = gen_insbl_be;\n+  else\n+    gen = gen_insbl_le;\n+  operands[1] = gen_lowpart (QImode, operands[1]);\n+  emit_insn ((*gen) (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"builtin_inswl\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  rtx (*gen) PARAMS ((rtx, rtx, rtx));\n+  if (WORDS_BIG_ENDIAN)\n+    gen = gen_inswl_be;\n+  else\n+    gen = gen_inswl_le;\n+  operands[1] = gen_lowpart (HImode, operands[1]);\n+  emit_insn ((*gen) (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"builtin_insll\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  rtx (*gen) PARAMS ((rtx, rtx, rtx));\n+  if (WORDS_BIG_ENDIAN)\n+    gen = gen_insll_be;\n+  else\n+    gen = gen_insll_le;\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  emit_insn ((*gen) (operands[0], operands[1], operands[2]));\n+  emit_insn ((*gen) (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"builtin_insql\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  rtx (*gen) PARAMS ((rtx, rtx, rtx));\n+  if (WORDS_BIG_ENDIAN)\n+    gen = gen_insql_be;\n+  else\n+    gen = gen_insql_le;\n+  emit_insn ((*gen) (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"builtin_inswh\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"register_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  emit_insn (gen_insxh (operands[0], operands[1], GEN_INT (16), operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"builtin_inslh\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"register_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  emit_insn (gen_insxh (operands[0], operands[1], GEN_INT (32), operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"builtin_insqh\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"register_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  emit_insn (gen_insxh (operands[0], operands[1], GEN_INT (64), operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"builtin_mskbl\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  rtx (*gen) PARAMS ((rtx, rtx, rtx, rtx));\n+  rtx mask;\n+  if (WORDS_BIG_ENDIAN)\n+    gen = gen_mskxl_be;\n+  else\n+    gen = gen_mskxl_le;\n+  mask = GEN_INT (0xff);\n+  emit_insn ((*gen) (operands[0], operands[1], mask, operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"builtin_mskwl\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  rtx (*gen) PARAMS ((rtx, rtx, rtx, rtx));\n+  rtx mask;\n+  if (WORDS_BIG_ENDIAN)\n+    gen = gen_mskxl_be;\n+  else\n+    gen = gen_mskxl_le;\n+  mask = GEN_INT (0xffff);\n+  emit_insn ((*gen) (operands[0], operands[1], mask, operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"builtin_mskll\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  rtx (*gen) PARAMS ((rtx, rtx, rtx, rtx));\n+  rtx mask;\n+  if (WORDS_BIG_ENDIAN)\n+    gen = gen_mskxl_be;\n+  else\n+    gen = gen_mskxl_le;\n+  mask = immed_double_const (0xffffffff, 0, DImode);\n+  emit_insn ((*gen) (operands[0], operands[1], mask, operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"builtin_mskql\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  rtx (*gen) PARAMS ((rtx, rtx, rtx, rtx));\n+  rtx mask;\n+  if (WORDS_BIG_ENDIAN)\n+    gen = gen_mskxl_be;\n+  else\n+    gen = gen_mskxl_le;\n+  mask = constm1_rtx;\n+  emit_insn ((*gen) (operands[0], operands[1], mask, operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"builtin_mskwh\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"register_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  emit_insn (gen_mskxh (operands[0], operands[1], GEN_INT (16), operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"builtin_msklh\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"register_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  emit_insn (gen_mskxh (operands[0], operands[1], GEN_INT (32), operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"builtin_mskqh\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"register_operand\" \"\")\n+   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n+  \"\"\n+{\n+  emit_insn (gen_mskxh (operands[0], operands[1], GEN_INT (64), operands[2]));\n+  DONE;\n+})\n+\n (define_expand \"builtin_zap\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(and:DI (unspec:DI\n@@ -7366,6 +7635,29 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n   \"TARGET_MAX\"\n   \"unpkbw %r1,%0\"\n   [(set_attr \"type\" \"mvi\")])\n+\n+(define_expand \"builtin_cttz\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"\")]\n+\t\t   UNSPEC_CTTZ))]\n+  \"TARGET_CIX\"\n+  \"\")\n+\n+(define_insn \"builtin_ctlz\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")]\n+\t\t   UNSPEC_CTLZ))]\n+  \"TARGET_CIX\"\n+  \"ctlz %1,%0\"\n+  [(set_attr \"type\" \"mvi\")])\n+\n+(define_insn \"builtin_ctpop\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")]\n+\t\t   UNSPEC_CTPOP))]\n+  \"TARGET_CIX\"\n+  \"ctpop %1,%0\"\n+  [(set_attr \"type\" \"mvi\")])\n \f\n ;; The call patterns are at the end of the file because their\n ;; wildcard operand0 interferes with nice recognition."}, {"sha": "34d8ba9d092d57bdafbdbf4b1af7eeb752d60525", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c4b50f1a48225024845210de1b62661bb4ddbd93", "patch": "@@ -4773,8 +4773,28 @@ long __builtin_alpha_implver (void)\n long __builtin_alpha_rpcc (void)\n long __builtin_alpha_amask (long)\n long __builtin_alpha_cmpbge (long, long)\n+long __builtin_alpha_extbl (long, long)\n+long __builtin_alpha_extwl (long, long)\n+long __builtin_alpha_extll (long, long)\n long __builtin_alpha_extql (long, long)\n+long __builtin_alpha_extwh (long, long)\n+long __builtin_alpha_extlh (long, long)\n long __builtin_alpha_extqh (long, long)\n+long __builtin_alpha_insbl (long, long)\n+long __builtin_alpha_inswl (long, long)\n+long __builtin_alpha_insll (long, long)\n+long __builtin_alpha_insql (long, long)\n+long __builtin_alpha_inswh (long, long)\n+long __builtin_alpha_inslh (long, long)\n+long __builtin_alpha_insqh (long, long)\n+long __builtin_alpha_mskbl (long, long)\n+long __builtin_alpha_mskwl (long, long)\n+long __builtin_alpha_mskll (long, long)\n+long __builtin_alpha_mskql (long, long)\n+long __builtin_alpha_mskwh (long, long)\n+long __builtin_alpha_msklh (long, long)\n+long __builtin_alpha_mskqh (long, long)\n+long __builtin_alpha_umulh (long, long)\n long __builtin_alpha_zap (long, long)\n long __builtin_alpha_zapnot (long, long)\n @end example\n@@ -4800,6 +4820,17 @@ long __builtin_alpha_maxsw4 (long, long)\n long __builtin_alpha_perr (long, long)\n @end example\n \n+The following built-in functions are always with @option{-mcix}\n+or @option{-mcpu=@var{cpu}} where @var{cpu} is @code{ev67} or\n+later.  They all generate the machine instruction that is part\n+of the name.\n+\n+@example\n+long __builtin_alpha_cttz (long)\n+long __builtin_alpha_ctlz (long)\n+long __builtin_alpha_ctpop (long)\n+@end example\n+\n @node X86 Built-in Functions\n @subsection X86 Built-in Functions\n "}, {"sha": "365c3335564f4b2993c4c6795d7cbed0606790f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4b50f1a48225024845210de1b62661bb4ddbd93", "patch": "@@ -1,3 +1,9 @@\n+2002-06-04  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/alpha-base-1.c: Add ext/ins/msk/umulh cases.\n+\t* gcc.dg/alpha-max-1.c, gcc.dg/alpha-max-2.c: Use -mcpu=ev67.\n+\t* gcc.dg/alpha-cix-1.c, gcc.dg/alpha-cix-2.c: New.\n+\n 2002-06-04  Aldy Hernandez  <aldyh@redhat.com>\n \n         * gcc.dg/altivec-2.c: Remove test for invalid vector type V2DF."}, {"sha": "542ed6bc64e8ff09a8efe3534a9fd00810f53cdb", "filename": "gcc/testsuite/gcc.dg/alpha-base-1.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2Ftestsuite%2Fgcc.dg%2Falpha-base-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2Ftestsuite%2Fgcc.dg%2Falpha-base-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falpha-base-1.c?ref=c4b50f1a48225024845210de1b62661bb4ddbd93", "patch": "@@ -15,8 +15,32 @@ void test_BASE (long x, long y)\n \n   sink = __builtin_alpha_cmpbge (x, y);\n   sink = __builtin_alpha_cmpbge (-1, x);\n+\n+  sink = __builtin_alpha_extbl (x, y);\n+  sink = __builtin_alpha_extwl (x, y);\n+  sink = __builtin_alpha_extll (x, y);\n   sink = __builtin_alpha_extql (x, y);\n+  sink = __builtin_alpha_extwh (x, y);\n+  sink = __builtin_alpha_extlh (x, y);\n   sink = __builtin_alpha_extqh (x, y);\n+\n+  sink = __builtin_alpha_insbl (x, y);\n+  sink = __builtin_alpha_inswl (x, y);\n+  sink = __builtin_alpha_insll (x, y);\n+  sink = __builtin_alpha_insql (x, y);\n+  sink = __builtin_alpha_inswh (x, y);\n+  sink = __builtin_alpha_inslh (x, y);\n+  sink = __builtin_alpha_insqh (x, y);\n+\n+  sink = __builtin_alpha_mskbl (x, y);\n+  sink = __builtin_alpha_mskwl (x, y);\n+  sink = __builtin_alpha_mskll (x, y);\n+  sink = __builtin_alpha_mskql (x, y);\n+  sink = __builtin_alpha_mskwh (x, y);\n+  sink = __builtin_alpha_msklh (x, y);\n+  sink = __builtin_alpha_mskqh (x, y);\n+\n+  sink = __builtin_alpha_umulh (x, y);\n }\n \n void test_zap (long x, long y)"}, {"sha": "c52befb1be2d6da67cf6c1a91c5c22ec9ff1710d", "filename": "gcc/testsuite/gcc.dg/alpha-cix-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2Ftestsuite%2Fgcc.dg%2Falpha-cix-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2Ftestsuite%2Fgcc.dg%2Falpha-cix-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falpha-cix-1.c?ref=c4b50f1a48225024845210de1b62661bb4ddbd93", "patch": "@@ -0,0 +1,14 @@\n+/* Test that the CIX isa builtins compile.  */\n+/* { dg-do link { target alpha*-*-* } } */\n+/* { dg-options \"-mcpu=ev67\" } */\n+\n+void test_CIX (long x)\n+{\n+  volatile long sink;\n+\n+  sink = __builtin_alpha_cttz (x);\n+  sink = __builtin_alpha_ctlz (x);\n+  sink = __builtin_alpha_ctpop (x);\n+}\n+\n+int main() { return 0; }"}, {"sha": "26b4186b284116aff1b7fab79bbf94906a3dd6cf", "filename": "gcc/testsuite/gcc.dg/alpha-cix-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2Ftestsuite%2Fgcc.dg%2Falpha-cix-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2Ftestsuite%2Fgcc.dg%2Falpha-cix-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falpha-cix-2.c?ref=c4b50f1a48225024845210de1b62661bb4ddbd93", "patch": "@@ -0,0 +1,5 @@\n+/* Test that alpha-cix-1.c compiles with optimization.  */\n+/* { dg-do link { target alpha*-*-* } } */\n+/* { dg-options \"-mcpu=ev67 -O2\" } */\n+\n+#include \"alpha-cix-1.c\""}, {"sha": "b73bbb9a2b2bb8a505fab9f9da6f7496c6cc5ce0", "filename": "gcc/testsuite/gcc.dg/alpha-max-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2Ftestsuite%2Fgcc.dg%2Falpha-max-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2Ftestsuite%2Fgcc.dg%2Falpha-max-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falpha-max-1.c?ref=c4b50f1a48225024845210de1b62661bb4ddbd93", "patch": "@@ -1,6 +1,6 @@\n /* Test that the MAX isa builtins compile.  */\n /* { dg-do link { target alpha*-*-* } } */\n-/* { dg-options \"-mmax\" } */\n+/* { dg-options \"-mcpu=pca56\" } */\n \n void test_MAX (long x, long y)\n {"}, {"sha": "a6c561392b7b9565fedacf9c217f3cf39f3e4e02", "filename": "gcc/testsuite/gcc.dg/alpha-max-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2Ftestsuite%2Fgcc.dg%2Falpha-max-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b50f1a48225024845210de1b62661bb4ddbd93/gcc%2Ftestsuite%2Fgcc.dg%2Falpha-max-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falpha-max-2.c?ref=c4b50f1a48225024845210de1b62661bb4ddbd93", "patch": "@@ -1,5 +1,5 @@\n /* Test that alpha-max-1.c compiles with optimization.  */\n /* { dg-do link { target alpha*-*-* } } */\n-/* { dg-options \"-mmax -O2\" } */\n+/* { dg-options \"-mcpu=pca56 -O2\" } */\n \n #include \"alpha-max-1.c\""}]}