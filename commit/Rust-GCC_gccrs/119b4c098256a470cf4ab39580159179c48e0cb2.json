{"sha": "119b4c098256a470cf4ab39580159179c48e0cb2", "node_id": "C_kwDOANBUbNoAKDExOWI0YzA5ODI1NmE0NzBjZjRhYjM5NTgwMTU5MTc5YzQ4ZTBjYjI", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-26T10:32:24Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-31T10:36:52Z"}, "message": "Add missing location info to coercions", "tree": {"sha": "7f27ba302ec79d216de75a717e39e0b86e845b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f27ba302ec79d216de75a717e39e0b86e845b09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/119b4c098256a470cf4ab39580159179c48e0cb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/119b4c098256a470cf4ab39580159179c48e0cb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/119b4c098256a470cf4ab39580159179c48e0cb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/119b4c098256a470cf4ab39580159179c48e0cb2/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5175404928bc5081506d0eb4cab193e8689f879b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5175404928bc5081506d0eb4cab193e8689f879b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5175404928bc5081506d0eb4cab193e8689f879b"}], "stats": {"total": 153, "additions": 109, "deletions": 44}, "files": [{"sha": "ec674a635b1b49067f06ffff4762140bc696a6f6", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc?ref=119b4c098256a470cf4ab39580159179c48e0cb2", "patch": "@@ -25,6 +25,11 @@\n namespace Rust {\n namespace Resolver {\n \n+TypeCheckBase::TypeCheckBase ()\n+  : mappings (Analysis::Mappings::get ()), resolver (Resolver::get ()),\n+    context (TypeCheckContext::get ())\n+{}\n+\n bool\n TypeCheckBase::check_for_unconstrained (\n   const std::vector<TyTy::SubstitutionParamMapping> &params_to_constrain,\n@@ -332,9 +337,12 @@ TypeCheckBase::parse_repr_options (const AST::AttrVec &attrs, Location locus)\n }\n \n TyTy::BaseType *\n-TypeCheckBase::coercion_site (HirId id, TyTy::BaseType *expected,\n-\t\t\t      TyTy::BaseType *expr, Location locus)\n+TypeCheckBase::coercion_site (HirId id, TyTy::TyWithLocation lhs,\n+\t\t\t      TyTy::TyWithLocation rhs, Location locus)\n {\n+  TyTy::BaseType *expected = lhs.get_ty ();\n+  TyTy::BaseType *expr = rhs.get_ty ();\n+\n   rust_debug (\"coercion_site id={%u} expected={%s} expr={%s}\", id,\n \t      expected->debug_str ().c_str (), expr->debug_str ().c_str ());\n "}, {"sha": "b41268162f9b604ace68749ed0330368631e3185", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=119b4c098256a470cf4ab39580159179c48e0cb2", "patch": "@@ -24,7 +24,6 @@\n #include \"rust-name-resolver.h\"\n #include \"rust-hir-visitor.h\"\n #include \"rust-hir-map.h\"\n-#include \"rust-backend.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -35,19 +34,16 @@ class TypeCheckBase\n public:\n   virtual ~TypeCheckBase () {}\n \n-  static TyTy::BaseType *coercion_site (HirId id, TyTy::BaseType *lhs,\n-\t\t\t\t\tTyTy::BaseType *rhs,\n+  static TyTy::BaseType *coercion_site (HirId id, TyTy::TyWithLocation lhs,\n+\t\t\t\t\tTyTy::TyWithLocation rhs,\n \t\t\t\t\tLocation coercion_locus);\n \n   static TyTy::BaseType *cast_site (HirId id, TyTy::TyWithLocation from,\n \t\t\t\t    TyTy::TyWithLocation to,\n \t\t\t\t    Location cast_locus);\n \n protected:\n-  TypeCheckBase ()\n-    : mappings (Analysis::Mappings::get ()), resolver (Resolver::get ()),\n-      context (TypeCheckContext::get ())\n-  {}\n+  TypeCheckBase ();\n \n   TraitReference *resolve_trait_path (HIR::TypePath &);\n "}, {"sha": "ea09218c71a118244f1be4f0a6f7d965c6233325", "filename": "gcc/rust/typecheck/rust-hir-type-check-enumitem.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.cc?ref=119b4c098256a470cf4ab39580159179c48e0cb2", "patch": "@@ -129,7 +129,8 @@ TypeCheckEnumItem::visit (HIR::EnumItemTuple &item)\n \t= TypeCheckType::Resolve (field.get_field_type ().get ());\n       TyTy::StructFieldType *ty_field\n \t= new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n-\t\t\t\t     std::to_string (idx), field_type);\n+\t\t\t\t     std::to_string (idx), field_type,\n+\t\t\t\t     field.get_locus ());\n       fields.push_back (ty_field);\n       context->insert_type (field.get_mappings (), ty_field->get_field_type ());\n       idx++;\n@@ -176,7 +177,8 @@ TypeCheckEnumItem::visit (HIR::EnumItemStruct &item)\n \t= TypeCheckType::Resolve (field.get_field_type ().get ());\n       TyTy::StructFieldType *ty_field\n \t= new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n-\t\t\t\t     field.get_field_name (), field_type);\n+\t\t\t\t     field.get_field_name (), field_type,\n+\t\t\t\t     field.get_locus ());\n       fields.push_back (ty_field);\n       context->insert_type (field.get_mappings (), ty_field->get_field_type ());\n     }"}, {"sha": "69526ee86a9a58ccd86ac1ed1ecb73055c282472", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=119b4c098256a470cf4ab39580159179c48e0cb2", "patch": "@@ -224,7 +224,9 @@ TypeCheckExpr::visit (HIR::AssignmentExpr &expr)\n   auto lhs = TypeCheckExpr::Resolve (expr.get_lhs ());\n   auto rhs = TypeCheckExpr::Resolve (expr.get_rhs ());\n \n-  coercion_site (expr.get_mappings ().get_hirid (), lhs, rhs,\n+  coercion_site (expr.get_mappings ().get_hirid (),\n+\t\t TyTy::TyWithLocation (lhs, expr.get_lhs ()->get_locus ()),\n+\t\t TyTy::TyWithLocation (rhs, expr.get_rhs ()->get_locus ()),\n \t\t expr.get_locus ());\n }\n "}, {"sha": "9e3db0060d36ac930ce18755f574175900587c12", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=119b4c098256a470cf4ab39580159179c48e0cb2", "patch": "@@ -25,7 +25,7 @@\n namespace Rust {\n namespace Resolver {\n \n-class TypeCheckExpr : public TypeCheckBase, private HIR::HIRExpressionVisitor\n+class TypeCheckExpr : private TypeCheckBase, private HIR::HIRExpressionVisitor\n {\n public:\n   static TyTy::BaseType *Resolve (HIR::Expr *expr);"}, {"sha": "42f92159555b3adf33cb5fa1339e473a32d8121d", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.cc", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc?ref=119b4c098256a470cf4ab39580159179c48e0cb2", "patch": "@@ -79,8 +79,10 @@ TypeCheckStmt::visit (HIR::LetStmt &stmt)\n \n   const HIR::Pattern &stmt_pattern = *stmt.get_pattern ();\n   TyTy::BaseType *init_expr_ty = nullptr;\n+  Location init_expr_locus;\n   if (stmt.has_init_expr ())\n     {\n+      init_expr_locus = stmt.get_init_expr ()->get_locus ();\n       init_expr_ty = TypeCheckExpr::Resolve (stmt.get_init_expr ());\n       if (init_expr_ty->get_kind () == TyTy::TypeKind::ERROR)\n \treturn;\n@@ -90,15 +92,20 @@ TypeCheckStmt::visit (HIR::LetStmt &stmt)\n     }\n \n   TyTy::BaseType *specified_ty = nullptr;\n+  Location specified_ty_locus;\n   if (stmt.has_type ())\n-    specified_ty = TypeCheckType::Resolve (stmt.get_type ());\n+    {\n+      specified_ty = TypeCheckType::Resolve (stmt.get_type ());\n+      specified_ty_locus = stmt.get_type ()->get_locus ();\n+    }\n \n   // let x:i32 = 123;\n   if (specified_ty != nullptr && init_expr_ty != nullptr)\n     {\n-      // FIXME use this result and look at the regressions\n-      coercion_site (stmt.get_mappings ().get_hirid (), specified_ty,\n-\t\t     init_expr_ty, stmt.get_locus ());\n+      coercion_site (stmt.get_mappings ().get_hirid (),\n+\t\t     TyTy::TyWithLocation (specified_ty, specified_ty_locus),\n+\t\t     TyTy::TyWithLocation (init_expr_ty, init_expr_locus),\n+\t\t     stmt.get_locus ());\n       context->insert_type (stmt_pattern.get_pattern_mappings (), specified_ty);\n     }\n   else\n@@ -165,7 +172,8 @@ TypeCheckStmt::visit (HIR::TupleStruct &struct_decl)\n \t= TypeCheckType::Resolve (field.get_field_type ().get ());\n       TyTy::StructFieldType *ty_field\n \t= new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n-\t\t\t\t     std::to_string (idx), field_type);\n+\t\t\t\t     std::to_string (idx), field_type,\n+\t\t\t\t     field.get_locus ());\n       fields.push_back (ty_field);\n       context->insert_type (field.get_mappings (), ty_field->get_field_type ());\n       idx++;\n@@ -297,7 +305,8 @@ TypeCheckStmt::visit (HIR::StructStruct &struct_decl)\n \t= TypeCheckType::Resolve (field.get_field_type ().get ());\n       TyTy::StructFieldType *ty_field\n \t= new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n-\t\t\t\t     field.get_field_name (), field_type);\n+\t\t\t\t     field.get_field_name (), field_type,\n+\t\t\t\t     field.get_locus ());\n       fields.push_back (ty_field);\n       context->insert_type (field.get_mappings (), ty_field->get_field_type ());\n     }\n@@ -368,7 +377,8 @@ TypeCheckStmt::visit (HIR::Union &union_decl)\n \t= TypeCheckType::Resolve (variant.get_field_type ().get ());\n       TyTy::StructFieldType *ty_variant\n \t= new TyTy::StructFieldType (variant.get_mappings ().get_hirid (),\n-\t\t\t\t     variant.get_field_name (), variant_type);\n+\t\t\t\t     variant.get_field_name (), variant_type,\n+\t\t\t\t     variant.get_locus ());\n       fields.push_back (ty_variant);\n       context->insert_type (variant.get_mappings (),\n \t\t\t    ty_variant->get_field_type ());"}, {"sha": "98851c1deb928ccd20fd0cdb8429029ad35fb477", "filename": "gcc/rust/typecheck/rust-hir-type-check-struct.cc", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct.cc?ref=119b4c098256a470cf4ab39580159179c48e0cb2", "patch": "@@ -252,9 +252,15 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifierValue &field)\n     }\n \n   TyTy::BaseType *value = TypeCheckExpr::Resolve (field.get_value ());\n+  Location value_locus = field.get_value ()->get_locus ();\n+\n+  HirId coercion_site_id = field.get_mappings ().get_hirid ();\n   resolved_field_value_expr\n-    = coercion_site (field.get_mappings ().get_hirid (),\n-\t\t     field_type->get_field_type (), value, field.get_locus ());\n+    = coercion_site (coercion_site_id,\n+\t\t     TyTy::TyWithLocation (field_type->get_field_type (),\n+\t\t\t\t\t   field_type->get_locus ()),\n+\t\t     TyTy::TyWithLocation (value, value_locus),\n+\t\t     field.get_locus ());\n   if (resolved_field_value_expr != nullptr)\n     {\n       fields_assigned.insert (field.field_name);\n@@ -283,9 +289,15 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIndexValue &field)\n     }\n \n   TyTy::BaseType *value = TypeCheckExpr::Resolve (field.get_value ());\n+  Location value_locus = field.get_value ()->get_locus ();\n+\n+  HirId coercion_site_id = field.get_mappings ().get_hirid ();\n   resolved_field_value_expr\n-    = coercion_site (field.get_mappings ().get_hirid (),\n-\t\t     field_type->get_field_type (), value, field.get_locus ());\n+    = coercion_site (coercion_site_id,\n+\t\t     TyTy::TyWithLocation (field_type->get_field_type (),\n+\t\t\t\t\t   field_type->get_locus ()),\n+\t\t     TyTy::TyWithLocation (value, value_locus),\n+\t\t     field.get_locus ());\n   if (resolved_field_value_expr != nullptr)\n     {\n       fields_assigned.insert (field_name);\n@@ -324,10 +336,15 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifier &field)\n   HIR::PathInExpression expr (mappings_copy2, {seg}, field.get_locus (), false,\n \t\t\t      {});\n   TyTy::BaseType *value = TypeCheckExpr::Resolve (&expr);\n+  Location value_locus = expr.get_locus ();\n \n+  HirId coercion_site_id = field.get_mappings ().get_hirid ();\n   resolved_field_value_expr\n-    = coercion_site (field.get_mappings ().get_hirid (),\n-\t\t     field_type->get_field_type (), value, field.get_locus ());\n+    = coercion_site (coercion_site_id,\n+\t\t     TyTy::TyWithLocation (field_type->get_field_type (),\n+\t\t\t\t\t   field_type->get_locus ()),\n+\t\t     TyTy::TyWithLocation (value, value_locus),\n+\t\t     field.get_locus ());\n   if (resolved_field_value_expr != nullptr)\n \n     {"}, {"sha": "e67fe3a1552845d9a25e5e7246f50482afe7ea49", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.cc?ref=119b4c098256a470cf4ab39580159179c48e0cb2", "patch": "@@ -72,7 +72,8 @@ TypeCheckTopLevel::visit (HIR::TupleStruct &struct_decl)\n \t= TypeCheckType::Resolve (field.get_field_type ().get ());\n       TyTy::StructFieldType *ty_field\n \t= new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n-\t\t\t\t     std::to_string (idx), field_type);\n+\t\t\t\t     std::to_string (idx), field_type,\n+\t\t\t\t     field.get_locus ());\n       fields.push_back (ty_field);\n       context->insert_type (field.get_mappings (), ty_field->get_field_type ());\n       idx++;\n@@ -132,7 +133,8 @@ TypeCheckTopLevel::visit (HIR::StructStruct &struct_decl)\n \t= TypeCheckType::Resolve (field.get_field_type ().get ());\n       TyTy::StructFieldType *ty_field\n \t= new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n-\t\t\t\t     field.get_field_name (), field_type);\n+\t\t\t\t     field.get_field_name (), field_type,\n+\t\t\t\t     field.get_locus ());\n       fields.push_back (ty_field);\n       context->insert_type (field.get_mappings (), ty_field->get_field_type ());\n     }\n@@ -221,7 +223,8 @@ TypeCheckTopLevel::visit (HIR::Union &union_decl)\n \t= TypeCheckType::Resolve (variant.get_field_type ().get ());\n       TyTy::StructFieldType *ty_variant\n \t= new TyTy::StructFieldType (variant.get_mappings ().get_hirid (),\n-\t\t\t\t     variant.get_field_name (), variant_type);\n+\t\t\t\t     variant.get_field_name (), variant_type,\n+\t\t\t\t     variant.get_locus ());\n       fields.push_back (ty_variant);\n       context->insert_type (variant.get_mappings (),\n \t\t\t    ty_variant->get_field_type ());"}, {"sha": "eefe23929c3436196379c3f5ddec961745acdc34", "filename": "gcc/rust/typecheck/rust-tyty-call.cc", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc?ref=119b4c098256a470cf4ab39580159179c48e0cb2", "patch": "@@ -49,6 +49,7 @@ TypeCheckCallExpr::visit (ADTType &type)\n     {\n       StructFieldType *field = variant.get_field_at_index (i);\n       BaseType *field_tyty = field->get_field_type ();\n+      Location arg_locus = argument->get_locus ();\n \n       BaseType *arg = Resolver::TypeCheckExpr::Resolve (argument.get ());\n       if (arg->get_kind () == TyTy::TypeKind::ERROR)\n@@ -58,9 +59,10 @@ TypeCheckCallExpr::visit (ADTType &type)\n \t  return;\n \t}\n \n+      HirId coercion_side_id = argument->get_mappings ().get_hirid ();\n       auto res = Resolver::TypeCheckBase::coercion_site (\n-\targument->get_mappings ().get_hirid (), field_tyty, arg,\n-\targument->get_locus ());\n+\tcoercion_side_id, TyWithLocation (field_tyty),\n+\tTyWithLocation (arg, arg_locus), argument->get_locus ());\n       if (res->get_kind () == TyTy::TypeKind::ERROR)\n \t{\n \t  return;\n@@ -111,6 +113,7 @@ TypeCheckCallExpr::visit (FnType &type)\n   size_t i = 0;\n   for (auto &argument : call.get_arguments ())\n     {\n+      Location arg_locus = argument->get_locus ();\n       auto argument_expr_tyty\n \t= Resolver::TypeCheckExpr::Resolve (argument.get ());\n       if (argument_expr_tyty->get_kind () == TyTy::TypeKind::ERROR)\n@@ -125,9 +128,18 @@ TypeCheckCallExpr::visit (FnType &type)\n       if (i < type.num_params ())\n \t{\n \t  auto fnparam = type.param_at (i);\n+\t  HIR::Pattern *fn_param_pattern = fnparam.first;\n+\t  BaseType *param_ty = fnparam.second;\n+\t  Location param_locus\n+\t    = fn_param_pattern == nullptr\n+\t\t? mappings->lookup_location (param_ty->get_ref ())\n+\t\t: fn_param_pattern->get_locus ();\n+\n+\t  HirId coercion_side_id = argument->get_mappings ().get_hirid ();\n \t  auto resolved_argument_type = Resolver::TypeCheckBase::coercion_site (\n-\t    argument->get_mappings ().get_hirid (), fnparam.second,\n-\t    argument_expr_tyty, argument->get_locus ());\n+\t    coercion_side_id, TyWithLocation (param_ty, param_locus),\n+\t    TyWithLocation (argument_expr_tyty, arg_locus),\n+\t    argument->get_locus ());\n \t  if (resolved_argument_type->get_kind () == TyTy::TypeKind::ERROR)\n \t    {\n \t      rust_error_at (argument->get_locus (),\n@@ -166,7 +178,8 @@ TypeCheckCallExpr::visit (FnPtr &type)\n   size_t i = 0;\n   for (auto &argument : call.get_arguments ())\n     {\n-      auto fnparam = type.param_at (i);\n+      Location arg_locus = argument->get_locus ();\n+      BaseType *fnparam = type.param_at (i);\n       auto argument_expr_tyty\n \t= Resolver::TypeCheckExpr::Resolve (argument.get ());\n       if (argument_expr_tyty->get_kind () == TyTy::TypeKind::ERROR)\n@@ -178,8 +191,8 @@ TypeCheckCallExpr::visit (FnPtr &type)\n \t}\n \n       auto resolved_argument_type = Resolver::TypeCheckBase::coercion_site (\n-\targument->get_mappings ().get_hirid (), fnparam, argument_expr_tyty,\n-\targument->get_locus ());\n+\targument->get_mappings ().get_hirid (), TyWithLocation (fnparam),\n+\tTyWithLocation (argument_expr_tyty, arg_locus), argument->get_locus ());\n       if (resolved_argument_type->get_kind () == TyTy::TypeKind::ERROR)\n \t{\n \t  rust_error_at (argument->get_locus (),\n@@ -222,7 +235,16 @@ TypeCheckMethodCallExpr::visit (FnType &type)\n   size_t i = 1;\n   for (auto &argument : call.get_arguments ())\n     {\n+      Location arg_locus = argument->get_locus ();\n+\n       auto fnparam = type.param_at (i);\n+      HIR::Pattern *fn_param_pattern = fnparam.first;\n+      BaseType *param_ty = fnparam.second;\n+      Location param_locus\n+\t= fn_param_pattern == nullptr\n+\t    ? mappings->lookup_location (param_ty->get_ref ())\n+\t    : fn_param_pattern->get_locus ();\n+\n       auto argument_expr_tyty\n \t= Resolver::TypeCheckExpr::Resolve (argument.get ());\n       if (argument_expr_tyty->get_kind () == TyTy::TypeKind::ERROR)\n@@ -233,9 +255,10 @@ TypeCheckMethodCallExpr::visit (FnType &type)\n \t  return;\n \t}\n \n+      HirId coercion_side_id = argument->get_mappings ().get_hirid ();\n       auto resolved_argument_type = Resolver::TypeCheckBase::coercion_site (\n-\targument->get_mappings ().get_hirid (), fnparam.second,\n-\targument_expr_tyty, argument->get_locus ());\n+\tcoercion_side_id, TyWithLocation (param_ty, param_locus),\n+\tTyWithLocation (argument_expr_tyty, arg_locus), argument->get_locus ());\n       if (resolved_argument_type->get_kind () == TyTy::TypeKind::ERROR)\n \t{\n \t  rust_error_at (argument->get_locus (),"}, {"sha": "6c8ad87e4a5dd93d272ede8310f5ca3a5b89a2bc", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=119b4c098256a470cf4ab39580159179c48e0cb2", "patch": "@@ -27,6 +27,7 @@\n #include \"rust-substitution-mapper.h\"\n #include \"rust-hir-trait-ref.h\"\n #include \"rust-hir-type-bounds.h\"\n+#include \"options.h\"\n \n namespace Rust {\n namespace TyTy {\n@@ -559,14 +560,14 @@ StructFieldType *\n StructFieldType::clone () const\n {\n   return new StructFieldType (get_ref (), get_name (),\n-\t\t\t      get_field_type ()->clone ());\n+\t\t\t      get_field_type ()->clone (), locus);\n }\n \n StructFieldType *\n StructFieldType::monomorphized_clone () const\n {\n   return new StructFieldType (get_ref (), get_name (),\n-\t\t\t      get_field_type ()->monomorphized_clone ());\n+\t\t\t      get_field_type ()->monomorphized_clone (), locus);\n }\n \n bool"}, {"sha": "e072c6de2b337013331b596da4b00bcbda556ee9", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/119b4c098256a470cf4ab39580159179c48e0cb2/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=119b4c098256a470cf4ab39580159179c48e0cb2", "patch": "@@ -314,8 +314,8 @@ class TyVar\n class TyWithLocation\n {\n public:\n-  TyWithLocation (BaseType *ty, Location locus);\n-  TyWithLocation (BaseType *ty);\n+  explicit TyWithLocation (BaseType *ty, Location locus);\n+  explicit TyWithLocation (BaseType *ty);\n \n   BaseType *get_ty () const { return ty; }\n   Location get_locus () const { return locus; }\n@@ -472,8 +472,8 @@ class ParamType : public BaseType\n class StructFieldType\n {\n public:\n-  StructFieldType (HirId ref, std::string name, BaseType *ty)\n-    : ref (ref), name (name), ty (ty)\n+  StructFieldType (HirId ref, std::string name, BaseType *ty, Location locus)\n+    : ref (ref), name (name), ty (ty), locus (locus)\n   {}\n \n   HirId get_ref () const { return ref; }\n@@ -496,10 +496,13 @@ class StructFieldType\n \n   void debug () const { rust_debug (\"%s\", as_string ().c_str ()); }\n \n+  Location get_locus () const { return locus; }\n+\n private:\n   HirId ref;\n   std::string name;\n   BaseType *ty;\n+  Location locus;\n };\n \n class TupleType : public BaseType"}]}