{"sha": "db33daa4677997399485176303406794dc900987", "node_id": "C_kwDOANBUbNoAKGRiMzNkYWE0Njc3OTk3Mzk5NDg1MTc2MzAzNDA2Nzk0ZGM5MDA5ODc", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-08-04T11:48:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-08-04T18:37:56Z"}, "message": "libstdc++: Add comparisons to std::default_sentinel_t (LWG 3719)\n\nThis library defect was recently approved for C++23.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/fs_dir.h (directory_iterator): Add comparison\n\twith std::default_sentinel_t. Remove redundant operator!= for\n\tC++20.\n\t* (recursive_directory_iterator): Likewise.\n\t* include/bits/iterator_concepts.h [!__cpp_lib_concepts]\n\t(default_sentinel_t, default_sentinel): Define even if concepts\n\tare not supported.\n\t* include/bits/regex.h (regex_iterator): Add comparison with\n\tstd::default_sentinel_t. Remove redundant operator!= for C++20.\n\t(regex_token_iterator): Likewise.\n\t(regex_token_iterator::_M_end_of_seq()): Add noexcept.\n\t* testsuite/27_io/filesystem/iterators/lwg3719.cc: New test.\n\t* testsuite/28_regex/iterators/regex_iterator/lwg3719.cc:\n\tNew test.\n\t* testsuite/28_regex/iterators/regex_token_iterator/lwg3719.cc:\n\tNew test.", "tree": {"sha": "0912af38ece0380ae88601a81f6995da5a609f6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0912af38ece0380ae88601a81f6995da5a609f6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db33daa4677997399485176303406794dc900987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db33daa4677997399485176303406794dc900987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db33daa4677997399485176303406794dc900987", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db33daa4677997399485176303406794dc900987/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e34d92ef29a175b84cc7f5185db43656ae762bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e34d92ef29a175b84cc7f5185db43656ae762bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e34d92ef29a175b84cc7f5185db43656ae762bb"}], "stats": {"total": 182, "additions": 169, "deletions": 13}, "files": [{"sha": "bec2b7674ef9dd79b65e18909010a149d434e959", "filename": "libstdc++-v3/include/bits/fs_dir.h", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db33daa4677997399485176303406794dc900987/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db33daa4677997399485176303406794dc900987/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h?ref=db33daa4677997399485176303406794dc900987", "patch": "@@ -36,8 +36,9 @@\n # include <bits/unique_ptr.h>\n # include <bits/shared_ptr.h>\n \n-#if __cplusplus > 201703L\n+#if __cplusplus >= 202002L\n # include <compare>\t// std::strong_ordering\n+# include <bits/iterator_concepts.h>\t// std::default_sentinel_t\n #endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -420,9 +421,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       return __pr;\n     }\n \n-  private:\n-    directory_iterator(const path&, directory_options, error_code*);\n-\n     friend bool\n     operator==(const directory_iterator& __lhs,\n                const directory_iterator& __rhs) noexcept\n@@ -431,10 +429,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t&& !__lhs._M_dir.owner_before(__rhs._M_dir);\n     }\n \n+#if __cplusplus >= 202002L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 3719. Directory iterators should be usable with default sentinel\n+      bool operator==(default_sentinel_t) const noexcept\n+      { return !_M_dir; }\n+#endif\n+\n+#if __cpp_impl_three_way_comparison < 201907L\n     friend bool\n     operator!=(const directory_iterator& __lhs,\n \t       const directory_iterator& __rhs) noexcept\n     { return !(__lhs == __rhs); }\n+#endif\n+\n+  private:\n+    directory_iterator(const path&, directory_options, error_code*);\n \n     friend class recursive_directory_iterator;\n \n@@ -519,9 +529,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     void disable_recursion_pending() noexcept;\n \n-  private:\n-    recursive_directory_iterator(const path&, directory_options, error_code*);\n-\n     friend bool\n     operator==(const recursive_directory_iterator& __lhs,\n                const recursive_directory_iterator& __rhs) noexcept\n@@ -530,10 +537,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t&& !__lhs._M_dirs.owner_before(__rhs._M_dirs);\n     }\n \n+#if __cplusplus >= 202002L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 3719. Directory iterators should be usable with default sentinel\n+      bool operator==(default_sentinel_t) const noexcept\n+      { return !_M_dirs; }\n+#endif\n+\n+#if __cpp_impl_three_way_comparison < 201907L\n     friend bool\n     operator!=(const recursive_directory_iterator& __lhs,\n                const recursive_directory_iterator& __rhs) noexcept\n     { return !(__lhs == __rhs); }\n+#endif\n+\n+  private:\n+    recursive_directory_iterator(const path&, directory_options, error_code*);\n \n     struct _Dir_stack;\n     std::__shared_ptr<_Dir_stack> _M_dirs;"}, {"sha": "cf66c63f395dc75258ad3c4226cf6b11b4e3b23c", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db33daa4677997399485176303406794dc900987/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db33daa4677997399485176303406794dc900987/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=db33daa4677997399485176303406794dc900987", "patch": "@@ -32,15 +32,35 @@\n \n #pragma GCC system_header\n \n+#if __cplusplus >= 202002L\n #include <concepts>\n #include <bits/ptr_traits.h>\t// to_address\n #include <bits/ranges_cmp.h>\t// identity, ranges::less\n \n-#if __cpp_lib_concepts\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  /** A sentinel type that can be used to check for the end of a range.\n+   *\n+   * For some iterator types the past-the-end sentinel value is independent\n+   * of the underlying sequence, and a default sentinel can be used with them.\n+   * For example, a `std::counted_iterator` keeps a count of how many elements\n+   * remain, and so checking for the past-the-end value only requires checking\n+   * if that count has reached zero. A past-the-end `std::istream_iterator` is\n+   * equal to the default-constructed value, which can be easily checked.\n+   *\n+   * Comparing iterators of these types to `std::default_sentinel` is a\n+   * convenient way to check if the end has been reached.\n+   *\n+   * @since C++20\n+   */\n+  struct default_sentinel_t { };\n+\n+  /// A default sentinel value.\n+  inline constexpr default_sentinel_t default_sentinel{};\n+\n+#if __cpp_lib_concepts\n   struct input_iterator_tag;\n   struct output_iterator_tag;\n   struct forward_iterator_tag;\n@@ -924,9 +944,6 @@ namespace ranges\n \n   inline constexpr unreachable_sentinel_t unreachable_sentinel{};\n \n-  struct default_sentinel_t { };\n-  inline constexpr default_sentinel_t default_sentinel{};\n-\n   // This is the namespace for [range.access] CPOs.\n   namespace ranges::__cust_access\n   {\n@@ -983,7 +1000,8 @@ namespace ranges\n \n   } // namespace __detail\n \n+#endif // C++20 library concepts\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n-#endif // C++20 library concepts\n+#endif // C++20\n #endif // _ITERATOR_CONCEPTS_H"}, {"sha": "561c8fc564af177a0d1d9f0ee78e0b69c7548ef0", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db33daa4677997399485176303406794dc900987/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db33daa4677997399485176303406794dc900987/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=db33daa4677997399485176303406794dc900987", "patch": "@@ -28,6 +28,10 @@\n  *  Do not attempt to use it directly. @headername{regex}\n  */\n \n+#if __cplusplus >= 202002L\n+# include <bits/iterator_concepts.h>\t// std::default_sentinel_t\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -2760,12 +2764,21 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       bool\n       operator==(const regex_iterator&) const noexcept;\n \n+#if __cplusplus >= 202002L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 3719. Directory iterators should be usable with default sentinel\n+      bool operator==(default_sentinel_t) const noexcept\n+      { return _M_pregex == nullptr; }\n+#endif\n+\n+#if __cpp_impl_three_way_comparison < 201907L\n       /**\n        * @brief Tests the inequivalence of two regex iterators.\n        */\n       bool\n       operator!=(const regex_iterator& __rhs) const noexcept\n       { return !(*this == __rhs); }\n+#endif\n \n       /**\n        * @brief Dereferences a %regex_iterator.\n@@ -2968,12 +2981,21 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       bool\n       operator==(const regex_token_iterator& __rhs) const;\n \n+#if __cplusplus >= 202002L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 3719. Directory iterators should be usable with default sentinel\n+      bool operator==(default_sentinel_t) const noexcept\n+      { return _M_end_of_seq(); }\n+#endif\n+\n+#if __cpp_impl_three_way_comparison < 201907L\n       /**\n        * @brief Compares a %regex_token_iterator to another for inequality.\n        */\n       bool\n       operator!=(const regex_token_iterator& __rhs) const\n       { return !(*this == __rhs); }\n+#endif\n \n       /**\n        * @brief Dereferences a %regex_token_iterator.\n@@ -3022,7 +3044,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       }\n \n       constexpr bool\n-      _M_end_of_seq() const\n+      _M_end_of_seq() const noexcept\n       { return _M_result == nullptr; }\n \n       // [28.12.2.2.4]"}, {"sha": "c19cddc74f923b20fa19f491623d32d0af4643f8", "filename": "libstdc++-v3/testsuite/27_io/filesystem/iterators/lwg3719.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db33daa4677997399485176303406794dc900987/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Flwg3719.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db33daa4677997399485176303406794dc900987/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Flwg3719.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Flwg3719.cc?ref=db33daa4677997399485176303406794dc900987", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do run { target c++20 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <filesystem>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+// LWG 3719. Directory iterators should be usable with default sentinel\n+\n+void\n+test_dir_iter()\n+{\n+  std::filesystem::directory_iterator d0;\n+  VERIFY( d0 == std::default_sentinel );\n+  std::filesystem::directory_iterator d1(\".\");\n+  VERIFY( d1 != std::default_sentinel );\n+\n+  static_assert( noexcept(d0 == std::default_sentinel) );\n+  static_assert( noexcept(d0 != std::default_sentinel) );\n+}\n+\n+void\n+test_recursive_dir_iter()\n+{\n+  std::filesystem::recursive_directory_iterator d0;\n+  VERIFY( d0 == std::default_sentinel );\n+  std::filesystem::recursive_directory_iterator d1(\".\");\n+  VERIFY( d1 != std::default_sentinel );\n+\n+  static_assert( noexcept(d0 == std::default_sentinel) );\n+  static_assert( noexcept(d0 != std::default_sentinel) );\n+}\n+\n+int main()\n+{\n+  test_dir_iter();\n+  test_recursive_dir_iter();\n+}"}, {"sha": "e8c8f79364a13826073d2c85f907b753cef52f70", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_iterator/lwg3719.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db33daa4677997399485176303406794dc900987/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Flwg3719.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db33daa4677997399485176303406794dc900987/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Flwg3719.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Flwg3719.cc?ref=db33daa4677997399485176303406794dc900987", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do run { target c++20 } }\n+\n+#include <regex>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+// LWG 3719. Directory iterators should be usable with default sentinel\n+\n+void\n+test_iter()\n+{\n+  std::sregex_token_iterator r0;\n+  VERIFY( r0 == std::default_sentinel );\n+  std::string haystack = \"a needle in a haystack\";\n+  std::regex needle(\"needle\");\n+  std::sregex_iterator r1(haystack.begin(), haystack.end(), needle);\n+  VERIFY( r1 != std::default_sentinel );\n+  ++r1;\n+  VERIFY( r1 == std::default_sentinel );\n+\n+  static_assert( noexcept(r0 == std::default_sentinel) ); // GCC extension\n+  static_assert( noexcept(r0 != std::default_sentinel) ); // GCC extension\n+}\n+\n+int main()\n+{\n+  test_iter();\n+}"}, {"sha": "5c36acead74b53aebfb499dee992602a7b038401", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_token_iterator/lwg3719.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db33daa4677997399485176303406794dc900987/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Flwg3719.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db33daa4677997399485176303406794dc900987/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Flwg3719.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Flwg3719.cc?ref=db33daa4677997399485176303406794dc900987", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do run { target c++20 } }\n+\n+#include <regex>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+// LWG 3719. Directory iterators should be usable with default sentinel\n+\n+void\n+test_iter()\n+{\n+  std::sregex_iterator r0;\n+  VERIFY( r0 == std::default_sentinel );\n+  std::string haystack = \"a needle in a haystack\";\n+  std::regex needle(\"needle\");\n+  std::sregex_iterator r1(haystack.begin(), haystack.end(), needle);\n+  VERIFY( r1 != std::default_sentinel );\n+  ++r1;\n+  VERIFY( r1 == std::default_sentinel );\n+\n+  static_assert( noexcept(r0 == std::default_sentinel) ); // GCC extension\n+  static_assert( noexcept(r0 != std::default_sentinel) ); // GCC extension\n+}\n+\n+int main()\n+{\n+  test_iter();\n+}"}]}