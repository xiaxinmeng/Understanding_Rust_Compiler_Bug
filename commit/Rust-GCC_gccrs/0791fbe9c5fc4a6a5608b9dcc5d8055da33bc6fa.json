{"sha": "0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc5MWZiZTljNWZjNGE2YTU2MDhiOWRjYzVkODA1NWRhMzNiYzZmYQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2010-10-11T09:20:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-11T09:20:53Z"}, "message": "par-ch9.adb, [...]: Use Ada_2005 instead of Ada_05 (Ada_Version_Type).\n\n2010-10-11  Bob Duff  <duff@adacore.com>\n\n\t* par-ch9.adb, sem_aggr.adb, exp_ch5.adb, sem_ch3.adb, impunit.adb,\n\timpunit.ads, sem_ch5.adb, sem_type.adb, exp_imgv.adb, exp_util.adb,\n\tswitch-c.adb, exp_attr.adb, exp_ch9.adb, par-ch11.adb, usage.adb,\n\tsem_ch9.adb, sem_ch10.adb, scng.adb, checks.adb, sem_prag.adb,\n\tsem_ch12.adb, par-ch2.adb, freeze.adb, par-ch4.adb, sem_util.adb,\n\tsem_res.adb, sem_attr.adb, par-ch6.adb, exp_ch4.adb, exp_ch6.adb,\n\tsem_ch4.adb, exp_ch8.adb, par-ch10.adb, sem_ch6.adb, par-prag.adb,\n\texp_disp.adb, par-ch12.adb, sem_ch8.adb, snames.adb-tmpl, opt.ads,\n\texp_aggr.adb, sem_cat.adb, sem_ch13.adb, par-ch3.adb, exp_strm.adb,\n\texp_cg.adb, lib-xref.adb, sem_disp.adb, exp_ch3.adb: Use Ada_2005\n\tinstead of Ada_05 (Ada_Version_Type).\n\nFrom-SVN: r165283", "tree": {"sha": "29e555fe1edeb91bf32383a11999ebe515cf128a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29e555fe1edeb91bf32383a11999ebe515cf128a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dbe945f1d543dc34b78b975a9053872c744b295a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe945f1d543dc34b78b975a9053872c744b295a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe945f1d543dc34b78b975a9053872c744b295a"}], "stats": {"total": 627, "additions": 320, "deletions": 307}, "files": [{"sha": "c46da7e81d025fe0686ab4ffbe575a66ea4697af", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -1,3 +1,17 @@\n+2010-10-11  Bob Duff  <duff@adacore.com>\n+\n+\t* par-ch9.adb, sem_aggr.adb, exp_ch5.adb, sem_ch3.adb, impunit.adb,\n+\timpunit.ads, sem_ch5.adb, sem_type.adb, exp_imgv.adb, exp_util.adb,\n+\tswitch-c.adb, exp_attr.adb, exp_ch9.adb, par-ch11.adb, usage.adb,\n+\tsem_ch9.adb, sem_ch10.adb, scng.adb, checks.adb, sem_prag.adb,\n+\tsem_ch12.adb, par-ch2.adb, freeze.adb, par-ch4.adb, sem_util.adb,\n+\tsem_res.adb, sem_attr.adb, par-ch6.adb, exp_ch4.adb, exp_ch6.adb,\n+\tsem_ch4.adb, exp_ch8.adb, par-ch10.adb, sem_ch6.adb, par-prag.adb,\n+\texp_disp.adb, par-ch12.adb, sem_ch8.adb, snames.adb-tmpl, opt.ads,\n+\texp_aggr.adb, sem_cat.adb, sem_ch13.adb, par-ch3.adb, exp_strm.adb,\n+\texp_cg.adb, lib-xref.adb, sem_disp.adb, exp_ch3.adb: Use Ada_2005\n+\tinstead of Ada_05 (Ada_Version_Type).\n+\n 2010-10-11  Bob Duff  <duff@adacore.com>\n \n \t* sem_aggr.adb, impunit.adb, impunit.ads, switch-c.adb, usage.adb,"}, {"sha": "9a942d98f9af8473a13dc42d4572c70d0493a52f", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -1193,11 +1193,11 @@ package body Checks is\n \n       if Present (Lhs)\n         and then (Present (Param_Entity (Lhs))\n-                   or else (Ada_Version < Ada_05\n+                   or else (Ada_Version < Ada_2005\n                              and then not Is_Constrained (T_Typ)\n                              and then Is_Aliased_View (Lhs)\n                              and then not Is_Aliased_Unconstrained_Component)\n-                   or else (Ada_Version >= Ada_05\n+                   or else (Ada_Version >= Ada_2005\n                              and then not Is_Constrained (T_Typ)\n                              and then Denotes_Explicit_Dereference (Lhs)\n                              and then Nkind (Original_Node (Lhs)) /=\n@@ -1216,7 +1216,7 @@ package body Checks is\n       --  Ada 2005: nothing to do if the type is one for which there is a\n       --  partial view that is constrained.\n \n-      elsif Ada_Version >= Ada_05\n+      elsif Ada_Version >= Ada_2005\n         and then Has_Constrained_Partial_View (Base_Type (T_Typ))\n       then\n          return;"}, {"sha": "566b1a3f229f1e55fe41a27511b49523614e59bc", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -5598,7 +5598,7 @@ package body Exp_Aggr is\n       --  Extension aggregates, aggregates in extended return statements, and\n       --  aggregates for C++ imported types must be expanded.\n \n-      if Ada_Version >= Ada_05 and then Is_Immutably_Limited_Type (Typ) then\n+      if Ada_Version >= Ada_2005 and then Is_Immutably_Limited_Type (Typ) then\n          if not Nkind_In (Parent (N), N_Object_Declaration,\n                                       N_Component_Association)\n          then"}, {"sha": "e573906d483dfd3651877f324b353d9dda0cdbd1", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -653,7 +653,7 @@ package body Exp_Attr is\n       --  eventually we plan to expand the functions that are treated as\n       --  build-in-place to include other composite result types.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Is_Build_In_Place_Function_Call (Pref)\n       then\n          Make_Build_In_Place_Call_In_Anonymous_Context (Pref);\n@@ -1396,7 +1396,7 @@ package body Exp_Attr is\n          --  to Callable. Generate:\n          --    callable (Task_Id (Pref._disp_get_task_id));\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Ekind (Ptyp) = E_Class_Wide_Type\n            and then Is_Interface (Ptyp)\n            and then Is_Task_Interface (Ptyp)\n@@ -1627,9 +1627,9 @@ package body Exp_Attr is\n \n                elsif not Is_Variable (Pref)\n                  or else Present (Formal_Ent)\n-                 or else (Ada_Version < Ada_05\n+                 or else (Ada_Version < Ada_2005\n                             and then Is_Aliased_View (Pref))\n-                 or else (Ada_Version >= Ada_05\n+                 or else (Ada_Version >= Ada_2005\n                             and then Is_Constrained_Aliased_View (Pref))\n                then\n                   Res := True;\n@@ -2206,7 +2206,7 @@ package body Exp_Attr is\n             --  dynamically through a dispatching call, as for other task\n             --  attributes applied to interfaces.\n \n-            if Ada_Version >= Ada_05\n+            if Ada_Version >= Ada_2005\n               and then Ekind (Ptyp) = E_Class_Wide_Type\n               and then Is_Interface (Ptyp)\n               and then Is_Task_Interface (Ptyp)\n@@ -3174,7 +3174,7 @@ package body Exp_Attr is\n                   --  We cannot figure out a practical way to implement this\n                   --  accessibility check on virtual machines, so we omit it.\n \n-                  if Ada_Version >= Ada_05\n+                  if Ada_Version >= Ada_2005\n                     and then Tagged_Type_Expansion\n                   then\n                      Insert_Action (N,\n@@ -4471,7 +4471,7 @@ package body Exp_Attr is\n          --  Generate:\n          --    terminated (Task_Id (Pref._disp_get_task_id));\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Ekind (Ptyp) = E_Class_Wide_Type\n            and then Is_Interface (Ptyp)\n            and then Is_Task_Interface (Ptyp)"}, {"sha": "995f421814c58ddcfb25f9c3e6c668858e539dbf", "filename": "gcc/ada/exp_cg.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_cg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_cg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_cg.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -321,7 +321,7 @@ package body Exp_CG is\n                   end if;\n                end loop;\n \n-               if Ada_Version >= Ada_05 then\n+               if Ada_Version >= Ada_2005 then\n                   for J in Predef_Names_05'Range loop\n                      Get_Name_String (Predef_Names_05 (J));\n "}, {"sha": "2cc0b58178ea8e9a787b3de436e4a8efd842d016", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -2459,7 +2459,7 @@ package body Exp_Ch3 is\n                --  located at fixed positions (tags whose position depends on\n                --  variable size components are initialized later ---see below)\n \n-               if Ada_Version >= Ada_05\n+               if Ada_Version >= Ada_2005\n                  and then not Is_Interface (Rec_Type)\n                  and then Has_Interfaces (Rec_Type)\n                then\n@@ -2514,7 +2514,7 @@ package body Exp_Ch3 is\n                --  located at fixed positions (tags whose position depends on\n                --  variable size components are initialized later ---see below)\n \n-               if Ada_Version >= Ada_05\n+               if Ada_Version >= Ada_2005\n                  and then not Is_Interface (Rec_Type)\n                  and then Has_Interfaces (Rec_Type)\n                then\n@@ -2583,7 +2583,7 @@ package body Exp_Ch3 is\n             --  depend on discriminants is only safely read at runtime after\n             --  the parent components have been initialized.\n \n-            if Ada_Version >= Ada_05\n+            if Ada_Version >= Ada_2005\n               and then not Is_Interface (Rec_Type)\n               and then Has_Interfaces (Rec_Type)\n               and then Has_Discriminants (Etype (Rec_Type))\n@@ -4322,7 +4322,7 @@ package body Exp_Ch3 is\n             Expand_Access_Protected_Subprogram_Type (N);\n          end if;\n \n-      elsif Ada_Version >= Ada_05\n+      elsif Ada_Version >= Ada_2005\n         and then Is_Array_Type (Def_Id)\n         and then Is_Access_Type (Component_Type (Def_Id))\n         and then Ekind (Component_Type (Def_Id)) = E_Anonymous_Access_Type\n@@ -4332,7 +4332,7 @@ package body Exp_Ch3 is\n       elsif Has_Task (Def_Id) then\n          Expand_Previous_Access_Type (Def_Id);\n \n-      elsif Ada_Version >= Ada_05\n+      elsif Ada_Version >= Ada_2005\n         and then\n          (Is_Record_Type (Def_Id)\n            or else (Is_Array_Type (Def_Id)\n@@ -4770,7 +4770,7 @@ package body Exp_Ch3 is\n          --  plan to expand the allowed forms of functions that are treated as\n          --  build-in-place.\n \n-         elsif Ada_Version >= Ada_05\n+         elsif Ada_Version >= Ada_2005\n            and then Is_Build_In_Place_Function_Call (Expr_Q)\n          then\n             Make_Build_In_Place_Call_In_Object_Declaration (N, Expr_Q);\n@@ -6075,7 +6075,7 @@ package body Exp_Ch3 is\n             --  a function returns an extension aggregate that invokes the\n             --  the parent function.\n \n-            if Ada_Version >= Ada_05\n+            if Ada_Version >= Ada_2005\n               and then not Is_Abstract_Type (Def_Id)\n               and then Is_Null_Extension (Def_Id)\n             then\n@@ -6090,7 +6090,7 @@ package body Exp_Ch3 is\n             --  overridden. This is done to ensure that the dispatch table\n             --  entry associated with such null primitives are properly filled.\n \n-            if Ada_Version >= Ada_05\n+            if Ada_Version >= Ada_2005\n               and then Etype (Def_Id) /= Def_Id\n               and then not Is_Abstract_Type (Def_Id)\n               and then Has_Interfaces (Def_Id)\n@@ -8359,7 +8359,7 @@ package body Exp_Ch3 is\n       --  disable their generation in this case. Disable the generation of\n       --  these bodies if No_Dispatching_Calls, Ravenscar or ZFP is active.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Tagged_Type_Expansion\n         and then not Restriction_Active (No_Dispatching_Calls)\n         and then not Restriction_Active (No_Select_Statements)\n@@ -8866,7 +8866,7 @@ package body Exp_Ch3 is\n       --  disable their generation in this case. Disable the generation of\n       --  these bodies if No_Dispatching_Calls, Ravenscar or ZFP is active.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Tagged_Type_Expansion\n         and then not Is_Interface (Tag_Typ)\n         and then\n@@ -9053,14 +9053,14 @@ package body Exp_Ch3 is\n             Has_Predefined_Or_Specified_Stream_Attribute :=\n               Has_Specified_Stream_Input (Typ)\n                 or else\n-                  (Ada_Version >= Ada_05\n+                  (Ada_Version >= Ada_2005\n                     and then Stream_Operation_OK (Typ, TSS_Stream_Read));\n \n          elsif Operation = TSS_Stream_Output then\n             Has_Predefined_Or_Specified_Stream_Attribute :=\n               Has_Specified_Stream_Output (Typ)\n                 or else\n-                  (Ada_Version >= Ada_05\n+                  (Ada_Version >= Ada_2005\n                     and then Stream_Operation_OK (Typ, TSS_Stream_Write));\n          end if;\n "}, {"sha": "d501cd52237eb29b99e9e65e8e3b0c3bb22fe482", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -515,7 +515,7 @@ package body Exp_Ch4 is\n          --  Note: we skip the accessibility check for the VM case, since\n          --  there does not seem to be any practical way of implementing it.\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Tagged_Type_Expansion\n            and then Is_Class_Wide_Type (DesigT)\n            and then not Scope_Suppress (Accessibility_Check)\n@@ -635,7 +635,7 @@ package body Exp_Ch4 is\n          --  we plan to expand the allowed forms of functions that are treated\n          --  as build-in-place.\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Is_Build_In_Place_Function_Call (Exp)\n          then\n             Make_Build_In_Place_Call_In_Allocator (N, Exp);\n@@ -1085,7 +1085,7 @@ package body Exp_Ch4 is\n          --  we plan to expand the allowed forms of functions that are treated\n          --  as build-in-place.\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Is_Build_In_Place_Function_Call (Exp)\n          then\n             Make_Build_In_Place_Call_In_Allocator (N, Exp);\n@@ -3773,7 +3773,7 @@ package body Exp_Ch4 is\n                      if not Is_Constrained (Typ)\n                        and then Present (Discriminant_Default_Value\n                                          (First_Discriminant (Typ)))\n-                       and then (Ada_Version < Ada_05\n+                       and then (Ada_Version < Ada_2005\n                                   or else\n                                     not Has_Constrained_Partial_View (Typ))\n                      then\n@@ -3790,7 +3790,7 @@ package body Exp_Ch4 is\n                         --  anonymous access type make sure an accessibility\n                         --  check is inserted if necessary (3.10.2(22.q/2))\n \n-                        if Ada_Version >= Ada_05\n+                        if Ada_Version >= Ada_2005\n                           and then\n                             Ekind (Etype (Nod)) = E_Anonymous_Access_Type\n                         then\n@@ -4860,7 +4860,7 @@ package body Exp_Ch4 is\n       --  Ada 2005 (AI-318-02): If the prefix is a call to a build-in-place\n       --  function, then additional actuals must be passed.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Is_Build_In_Place_Function_Call (P)\n       then\n          Make_Build_In_Place_Call_In_Anonymous_Context (P);\n@@ -7450,7 +7450,7 @@ package body Exp_Ch4 is\n       --  Ada 2005 (AI-318-02): If the prefix is a call to a build-in-place\n       --  function, then additional actuals must be passed.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Is_Build_In_Place_Function_Call (P)\n       then\n          Make_Build_In_Place_Call_In_Anonymous_Context (P);\n@@ -7749,7 +7749,7 @@ package body Exp_Ch4 is\n       --  Ada 2005 (AI-318-02): If the prefix is a call to a build-in-place\n       --  function, then additional actuals must be passed.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Is_Build_In_Place_Function_Call (Pfx)\n       then\n          Make_Build_In_Place_Call_In_Anonymous_Context (Pfx);"}, {"sha": "8dbd34956ca39aa4cd5bc996236205641944f04b", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -1536,7 +1536,7 @@ package body Exp_Ch5 is\n       --  about complications that would other arise from X'Priority'Access,\n       --  which is illegal, because of the lack of aliasing.\n \n-      if Ada_Version >= Ada_05 then\n+      if Ada_Version >= Ada_2005 then\n          declare\n             Call           : Node_Id;\n             Conctyp        : Entity_Id;\n@@ -1865,7 +1865,7 @@ package body Exp_Ch5 is\n       --  build-in-place for user-written assignment statements (the assignment\n       --  here came from an aggregate.)\n \n-      elsif Ada_Version >= Ada_05\n+      elsif Ada_Version >= Ada_2005\n         and then Is_Build_In_Place_Function_Call (Rhs)\n       then\n          Make_Build_In_Place_Call_In_Assignment (N, Rhs);"}, {"sha": "37df0d549fc91a1bc14dcd5b4be7fcd177864776", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -1465,7 +1465,7 @@ package body Exp_Ch6 is\n             --  functions that are treated as build-in-place to include other\n             --  composite result types.\n \n-            if Ada_Version >= Ada_05\n+            if Ada_Version >= Ada_2005\n               and then Is_Build_In_Place_Function_Call (Actual)\n             then\n                Make_Build_In_Place_Call_In_Anonymous_Context (Actual);\n@@ -2027,7 +2027,7 @@ package body Exp_Ch6 is\n       --  a conditional or timed select. Check whether the procedure call\n       --  is a renaming of an entry and rewrite it as an entry call.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Nkind (N) = N_Procedure_Call_Statement\n         and then\n            ((Nkind (Parent (N)) = N_Triggering_Alternative\n@@ -2364,7 +2364,7 @@ package body Exp_Ch6 is\n          --  access parameter as an actual. Also, we currently don't enforce\n          --  this check for expander-generated actuals and when -gnatdj is set.\n \n-         if Ada_Version >= Ada_05 then\n+         if Ada_Version >= Ada_2005 then\n \n             --  Ada 2005 (AI-231): Check null-excluding access types. Note that\n             --  the intent of 6.4.1(13) is that null-exclusion checks should\n@@ -2382,7 +2382,7 @@ package body Exp_Ch6 is\n                Install_Null_Excluding_Check (Prev);\n             end if;\n \n-         --  Ada_Version < Ada_05\n+         --  Ada_Version < Ada_2005\n \n          else\n             if Ekind (Etype (Formal)) /= E_Anonymous_Access_Type\n@@ -5751,7 +5751,7 @@ package body Exp_Ch6 is\n \n       if not Comes_From_Extended_Return_Statement (N)\n         and then Is_Immutably_Limited_Type (Etype (Expression (N)))\n-        and then Ada_Version >= Ada_05\n+        and then Ada_Version >= Ada_2005\n         and then not Debug_Flag_Dot_L\n       then\n          declare\n@@ -6049,7 +6049,7 @@ package body Exp_Ch6 is\n       --  Note: accessibility check is skipped in the VM case, since there\n       --  does not seem to be any practical way to implement this check.\n \n-      elsif Ada_Version >= Ada_05\n+      elsif Ada_Version >= Ada_2005\n         and then Tagged_Type_Expansion\n         and then Is_Class_Wide_Type (R_Type)\n         and then not Scope_Suppress (Accessibility_Check)\n@@ -6268,7 +6268,7 @@ package body Exp_Ch6 is\n       --  and the type of the returned object is an interface then generate an\n       --  implicit conversion to force displacement of the \"this\" pointer.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Comes_From_Extended_Return_Statement (N)\n         and then Nkind (Expression (N)) = N_Identifier\n         and then Is_Interface (Utyp)\n@@ -6319,7 +6319,7 @@ package body Exp_Ch6 is\n \n          else\n             return Is_Immutably_Limited_Type (Etype (E))\n-              and then Ada_Version >= Ada_05\n+              and then Ada_Version >= Ada_2005\n               and then not Debug_Flag_Dot_L;\n          end if;\n "}, {"sha": "fa63e297d14867c3dab6b97f76761bc6d571d96a", "filename": "gcc/ada/exp_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch8.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -271,7 +271,7 @@ package body Exp_Ch8 is\n       --  eventually we plan to expand the functions that are treated as\n       --  build-in-place to include other composite result types.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Is_Build_In_Place_Function_Call (Nam)\n       then\n          Make_Build_In_Place_Call_In_Anonymous_Context (Nam);"}, {"sha": "62c6c780ad4e44846bc637dc5eaeecddfe894d47", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -1061,7 +1061,7 @@ package body Exp_Ch9 is\n                 Make_Component_List (Loc,\n                   Component_Items => Cdecls),\n               Tagged_Present  =>\n-                 Ada_Version >= Ada_05 and then Is_Tagged_Type (Ctyp),\n+                 Ada_Version >= Ada_2005 and then Is_Tagged_Type (Ctyp),\n               Interface_List  => Interface_List (N),\n               Limited_Present => True));\n    end Build_Corresponding_Record;\n@@ -3461,7 +3461,7 @@ package body Exp_Ch9 is\n \n          if Nkind (Concval) = N_Function_Call\n            and then Is_Task_Type (Conctyp)\n-           and then Ada_Version >= Ada_05\n+           and then Ada_Version >= Ada_2005\n          then\n             declare\n                ExpR : constant Node_Id   := Relocate_Node (Concval);\n@@ -3582,7 +3582,7 @@ package body Exp_Ch9 is\n                else\n                   --  Interface class-wide formal\n \n-                  if Ada_Version >= Ada_05\n+                  if Ada_Version >= Ada_2005\n                     and then Ekind (Etype (Formal)) = E_Class_Wide_Type\n                     and then Is_Interface (Etype (Formal))\n                   then\n@@ -5066,7 +5066,7 @@ package body Exp_Ch9 is\n          --  A task interface class-wide type object is being aborted.\n          --  Retrieve its _task_id by calling a dispatching routine.\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Ekind (Etype (Tasknm)) = E_Class_Wide_Type\n            and then Is_Interface (Etype (Tasknm))\n            and then Is_Task_Interface (Etype (Tasknm))\n@@ -5659,7 +5659,7 @@ package body Exp_Ch9 is\n       --  trigger which was expanded into a procedure call.\n \n       if Nkind (Ecall) = N_Procedure_Call_Statement then\n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then\n              (No (Original_Node (Ecall))\n                 or else not Nkind_In (Original_Node (Ecall),\n@@ -6592,7 +6592,7 @@ package body Exp_Ch9 is\n       S : Entity_Id;  --  Primitive operation slot\n \n    begin\n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Nkind (Blk) = N_Procedure_Call_Statement\n       then\n          Extract_Dispatching_Call (Blk, Call_Ent, Obj, Actuals, Formals);\n@@ -7383,7 +7383,7 @@ package body Exp_Ch9 is\n                      --  this subprogram if the protected type implements an\n                      --  interface.\n \n-                     if Ada_Version >= Ada_05\n+                     if Ada_Version >= Ada_2005\n                           and then\n                         Present (Interfaces (Corresponding_Record_Type (Pid)))\n                      then\n@@ -7466,7 +7466,7 @@ package body Exp_Ch9 is\n       --  protected body. At this point all wrapper specs have been created,\n       --  frozen and included in the dispatch table for the protected type.\n \n-      if Ada_Version >= Ada_05 then\n+      if Ada_Version >= Ada_2005 then\n          Build_Wrapper_Bodies (Loc, Pid, Current_Node);\n       end if;\n    end Expand_N_Protected_Body;\n@@ -7773,7 +7773,7 @@ package body Exp_Ch9 is\n          --  Type has explicit entries or generated primitive entry wrappers\n \n          elsif Has_Entries (Prot_Typ)\n-           or else (Ada_Version >= Ada_05\n+           or else (Ada_Version >= Ada_2005\n                       and then Present (Interface_List (N)))\n          then\n             case Corresponding_Runtime_Package (Prot_Typ) is\n@@ -7944,7 +7944,7 @@ package body Exp_Ch9 is\n       --  the corresponding record is frozen. If any wrappers are generated,\n       --  Current_Node is updated accordingly.\n \n-      if Ada_Version >= Ada_05 then\n+      if Ada_Version >= Ada_2005 then\n          Build_Wrapper_Specs (Loc, Prot_Typ, Current_Node);\n       end if;\n \n@@ -8005,7 +8005,7 @@ package body Exp_Ch9 is\n             --  Generate an overriding primitive operation specification for\n             --  this subprogram if the protected type implements an interface.\n \n-            if Ada_Version >= Ada_05\n+            if Ada_Version >= Ada_2005\n               and then\n                 Present (Interfaces (Corresponding_Record_Type (Prot_Typ)))\n             then\n@@ -10120,7 +10120,7 @@ package body Exp_Ch9 is\n       --  the task body. At this point all wrapper specs have been created,\n       --  frozen and included in the dispatch table for the task type.\n \n-      if Ada_Version >= Ada_05 then\n+      if Ada_Version >= Ada_2005 then\n          if Nkind (Parent (N)) = N_Subunit then\n             Insert_Nod := Corresponding_Stub (Parent (N));\n          else\n@@ -10571,7 +10571,7 @@ package body Exp_Ch9 is\n       --  Ada 2005 (AI-345): Construct the primitive entry wrapper specs before\n       --  the corresponding record has been frozen.\n \n-      if Ada_Version >= Ada_05 then\n+      if Ada_Version >= Ada_2005 then\n          Build_Wrapper_Specs (Loc, Tasktyp, Rec_Decl);\n       end if;\n \n@@ -10770,7 +10770,7 @@ package body Exp_Ch9 is\n       end if;\n \n       Is_Disp_Select :=\n-        Ada_Version >= Ada_05\n+        Ada_Version >= Ada_2005\n           and then Nkind (E_Call) = N_Procedure_Call_Statement;\n \n       if Is_Disp_Select then\n@@ -11461,7 +11461,7 @@ package body Exp_Ch9 is\n \n       S := Scope (E);\n \n-      if Ada_Version >= Ada_05 then\n+      if Ada_Version >= Ada_2005 then\n          while Is_Internal (S) loop\n             if Nkind (Parent (S)) = N_Block_Statement\n               and then\n@@ -11694,7 +11694,7 @@ package body Exp_Ch9 is\n \n             elsif Has_Entries (Conc_Typ)\n               or else\n-                (Ada_Version >= Ada_05\n+                (Ada_Version >= Ada_2005\n                    and then Present (Interface_List (Parent (Conc_Typ))))\n             then\n                case Corresponding_Runtime_Package (Conc_Typ) is"}, {"sha": "3a0682f5e79886141d215631790169dcdbe549b2", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -604,7 +604,7 @@ package body Exp_Disp is\n       elsif TSS_Name = TSS_Deep_Finalize then\n          return Uint_10;\n \n-      elsif Ada_Version >= Ada_05 then\n+      elsif Ada_Version >= Ada_2005 then\n          if Chars (E) = Name_uDisp_Asynchronous_Select then\n             return Uint_11;\n \n@@ -1971,7 +1971,7 @@ package body Exp_Disp is\n \n    function Is_Predefined_Interface_Primitive (E : Entity_Id) return Boolean is\n    begin\n-      return Ada_Version >= Ada_05\n+      return Ada_Version >= Ada_2005\n         and then (Chars (E) = Name_uDisp_Asynchronous_Select or else\n                   Chars (E) = Name_uDisp_Conditional_Select  or else\n                   Chars (E) = Name_uDisp_Get_Prim_Op_Kind    or else\n@@ -5220,7 +5220,7 @@ package body Exp_Disp is\n       --  constrained by the number of non-predefined primitive operations.\n \n       if RTE_Record_Component_Available (RE_SSD) then\n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Has_DT (Typ)\n            and then Is_Concurrent_Record_Type (Typ)\n            and then Has_Interfaces (Typ)\n@@ -6030,7 +6030,7 @@ package body Exp_Disp is\n       --  a limited interface. Skip this step in Ravenscar profile or when\n       --  general dispatching is forbidden.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Is_Concurrent_Record_Type (Typ)\n         and then Has_Interfaces (Typ)\n         and then not Restriction_Active (No_Dispatching_Calls)"}, {"sha": "78d9b006abc9226d55918a65bf63d8dea917d7ab", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -310,7 +310,7 @@ package body Exp_Imgv is\n       --  soft hyphen correctly, based on the version of Ada in use (ugly!)\n \n       elsif Rtyp = Standard_Character then\n-         if Ada_Version < Ada_05 then\n+         if Ada_Version < Ada_2005 then\n             Imid := RE_Image_Character;\n          else\n             Imid := RE_Image_Character_05;\n@@ -485,7 +485,7 @@ package body Exp_Imgv is\n \n       elsif Rtyp = Standard_Wide_Character then\n          Append_To (Arg_List,\n-           New_Reference_To (Boolean_Literals (Ada_Version >= Ada_05), Loc));\n+           New_Reference_To (Boolean_Literals (Ada_Version >= Ada_2005), Loc));\n       end if;\n \n       --  Now append the procedure call to the insert list"}, {"sha": "fc7a5a21bb5101c19dd0b86768eab464ad880a5a", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -1177,7 +1177,7 @@ package body Exp_Strm is\n          Set_No_Initialization (Obj_Decl);\n       end if;\n \n-      if Ada_Version >= Ada_05 then\n+      if Ada_Version >= Ada_2005 then\n          Stms := New_List (\n            Make_Extended_Return_Statement (Loc,\n              Return_Object_Declarations => New_List (Obj_Decl),"}, {"sha": "fc2bb6944455e87786c305d483036c4fb7926dd4", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -5032,7 +5032,7 @@ package body Exp_Util is\n          if Nkind (Exp) = N_Function_Call\n            and then Is_Immutably_Limited_Type (Etype (Exp))\n            and then Nkind (Parent (Exp)) /= N_Object_Declaration\n-           and then Ada_Version >= Ada_05\n+           and then Ada_Version >= Ada_2005\n          then\n             declare\n                Obj  : constant Entity_Id := Make_Temporary (Loc, 'F', Exp);"}, {"sha": "b21ee15b0db7809f7a3254d1984b2817877e4ca5", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -1577,7 +1577,7 @@ package body Freeze is\n          --  either a tagged type, or a limited record.\n \n          if Is_Limited_Type (Rec_Type)\n-           and then (Ada_Version < Ada_05 or else Is_Tagged_Type (Rec_Type))\n+           and then (Ada_Version < Ada_2005 or else Is_Tagged_Type (Rec_Type))\n          then\n             return;\n \n@@ -3829,12 +3829,12 @@ package body Freeze is\n             --  error in Ada 2005 if there is no pool (see AI-366).\n \n             if Is_Pure_Unit_Access_Type (E)\n-              and then (Ada_Version < Ada_05\n+              and then (Ada_Version < Ada_2005\n                          or else not No_Pool_Assigned (E))\n             then\n                Error_Msg_N (\"named access type not allowed in pure unit\", E);\n \n-               if Ada_Version >= Ada_05 then\n+               if Ada_Version >= Ada_2005 then\n                   Error_Msg_N\n                     (\"\\would be legal if Storage_Size of 0 given?\", E);\n "}, {"sha": "766c95003c57e409c19d4c1e6a2cc64e7f3b4783", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -609,7 +609,7 @@ package body Impunit is\n \n       for J in Non_Imp_File_Names_05'Range loop\n          if Name_Buffer (1 .. 8) = Non_Imp_File_Names_05 (J) then\n-            return Ada_05_Unit;\n+            return Ada_2005_Unit;\n          end if;\n       end loop;\n "}, {"sha": "621a034011f2f718aa942259cdbb00518c39e844", "filename": "gcc/ada/impunit.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fimpunit.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fimpunit.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.ads?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -48,7 +48,7 @@ package Impunit is\n       --  in both Ada 95 mode and Ada 05 mode. Note that in Ada 83 mode, no\n       --  child units are allowed, so you can't even name such a unit.\n \n-      Ada_05_Unit,\n+      Ada_2005_Unit,\n       --  This unit is defined in the Ada 2005 RM. Withing this unit from a\n       --  Ada 95 mode program will generate a warning (again, strictly speaking\n       --  this should be an error, but that seems over-strenuous)."}, {"sha": "8fc8108c0fb39e68c6767d443122c01cda5328f1", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -468,7 +468,7 @@ package body Lib.Xref is\n \n       if Comes_From_Source (N)\n         and then Is_Ada_2005_Only (E)\n-        and then Ada_Version < Ada_05\n+        and then Ada_Version < Ada_2005\n         and then Warn_On_Ada_2005_Compatibility\n         and then (Typ = 'm' or else Typ = 'r')\n       then"}, {"sha": "3c9f6324fc0f5873735801cce139f1e2d0cf2c06", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -64,15 +64,14 @@ package Opt is\n    --  GNATBIND, GNATLINK\n    --  Set True if binder file to be generated in Ada rather than C\n \n-   type Ada_Version_Type is (Ada_83, Ada_95, Ada_05, Ada_2012);\n+   type Ada_Version_Type is (Ada_83, Ada_95, Ada_2005, Ada_2012);\n    pragma Ordered (Ada_Version_Type);\n    --  Versions of Ada for Ada_Version below. Note that these are ordered,\n    --  so that tests like Ada_Version >= Ada_95 are legitimate and useful.\n+   --  Think twice before using \"=\"; Ada_Version >= Ada_2012 is more likely\n+   --  what you want, because it will apply to future versions of the language.\n \n-   Ada_2005 : Ada_Version_Type renames Ada_05;\n-   --  Renaming with full name (preferred usage)\n-\n-   Ada_Version_Default : constant Ada_Version_Type := Ada_05;\n+   Ada_Version_Default : constant Ada_Version_Type := Ada_2005;\n    pragma Warnings (Off, Ada_Version_Default);\n    --  GNAT\n    --  Default Ada version if no switch given. The Warnings off is to kill"}, {"sha": "1b43e1dda413c2aa506471781bfd8794c8a0e381", "filename": "gcc/ada/par-ch10.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fpar-ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fpar-ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch10.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -841,7 +841,7 @@ package body Ch10 is\n                  (\"unexpected LIMITED ignored\");\n             end if;\n \n-            if Ada_Version < Ada_05 then\n+            if Ada_Version < Ada_2005 then\n                Error_Msg_SP (\"LIMITED WITH is an Ada 2005 extension\");\n                Error_Msg_SP\n                  (\"\\unit must be compiled with -gnat05 switch\");\n@@ -860,7 +860,7 @@ package body Ch10 is\n                Restore_Scan_State (Scan_State); -- to PRIVATE\n                return Item_List;\n \n-            elsif Ada_Version < Ada_05 then\n+            elsif Ada_Version < Ada_2005 then\n                Error_Msg_SP (\"`PRIVATE WITH` is an Ada 2005 extension\");\n                Error_Msg_SP\n                  (\"\\unit must be compiled with -gnat05 switch\");"}, {"sha": "b0b0842b9c1191268e6bbacf366bacd0c435fbe8", "filename": "gcc/ada/par-ch11.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fpar-ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fpar-ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch11.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -198,7 +198,7 @@ package body Ch11 is\n       end if;\n \n       if Token = Tok_With then\n-         if Ada_Version < Ada_05 then\n+         if Ada_Version < Ada_2005 then\n             Error_Msg_SC (\"string expression in raise is Ada 2005 extension\");\n             Error_Msg_SC (\"\\unit must be compiled with -gnat05 switch\");\n          end if;"}, {"sha": "71d83674d47cb2331e25aa7f719fed7cd3f6d15e", "filename": "gcc/ada/par-ch12.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fpar-ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fpar-ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch12.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -335,7 +335,7 @@ package body Ch12 is\n       --  Ada2005: an association can be given by: others => <>\n \n       if Token = Tok_Others then\n-         if Ada_Version < Ada_05 then\n+         if Ada_Version < Ada_2005 then\n             Error_Msg_SP\n               (\"partial parametrization of formal packages\" &\n                 \" is an Ada 2005 extension\");\n@@ -463,7 +463,7 @@ package body Ch12 is\n             Set_Access_Definition (Decl_Node,\n               P_Access_Definition (Not_Null_Present));\n \n-            if Ada_Version < Ada_05 then\n+            if Ada_Version < Ada_2005 then\n                Error_Msg_SP\n                  (\"access definition not allowed in formal object \" &\n                   \"declaration\");\n@@ -856,7 +856,7 @@ package body Ch12 is\n          Set_Limited_Present (Def_Node);\n          Scan;  --  past LIMITED\n \n-         if Ada_Version < Ada_05 then\n+         if Ada_Version < Ada_2005 then\n             Error_Msg_SP\n               (\"LIMITED in derived type is an Ada 2005 extension\");\n             Error_Msg_SP\n@@ -867,7 +867,7 @@ package body Ch12 is\n          Set_Synchronized_Present (Def_Node);\n          Scan;  --  past SYNCHRONIZED\n \n-         if Ada_Version < Ada_05 then\n+         if Ada_Version < Ada_2005 then\n             Error_Msg_SP\n               (\"SYNCHRONIZED in derived type is an Ada 2005 extension\");\n             Error_Msg_SP\n@@ -888,7 +888,7 @@ package body Ch12 is\n       if Token = Tok_And then\n          Scan; -- past AND\n \n-         if Ada_Version < Ada_05 then\n+         if Ada_Version < Ada_2005 then\n             Error_Msg_SP\n               (\"abstract interface is an Ada 2005 extension\");\n             Error_Msg_SP (\"\\unit must be compiled with -gnat05 switch\");\n@@ -1108,7 +1108,7 @@ package body Ch12 is\n               New_Node (N_Formal_Abstract_Subprogram_Declaration, Prev_Sloc);\n             Scan; -- past ABSTRACT\n \n-            if Ada_Version < Ada_05 then\n+            if Ada_Version < Ada_2005 then\n                Error_Msg_SP\n                  (\"formal abstract subprograms are an Ada 2005 extension\");\n                Error_Msg_SP (\"\\unit must be compiled with -gnat05 switch\");\n@@ -1130,7 +1130,7 @@ package body Ch12 is\n             T_Semicolon;\n \n          elsif Token = Tok_Null then\n-            if Ada_Version < Ada_05 then\n+            if Ada_Version < Ada_2005 then\n                Error_Msg_SP\n                  (\"null default subprograms are an Ada 2005 extension\");\n                Error_Msg_SP (\"\\unit must be compiled with -gnat05 switch\");"}, {"sha": "4892c8cc80746d83ebd3be619dfde25632d993d5", "filename": "gcc/ada/par-ch2.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fpar-ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fpar-ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch2.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -291,7 +291,7 @@ package body Ch2 is\n       --  Ada 2005 (AI-284): INTERFACE is a new reserved word but it is\n       --  allowed as a pragma name.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Token = Tok_Interface\n       then\n          Prag_Name := Name_Interface;"}, {"sha": "30674e24441fcf11667eb212f163932a608bc6fe", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -433,7 +433,7 @@ package body Ch3 is\n \n          --  Ada 2005 (AI-419): AARM 3.4 (2/2)\n \n-         if (Ada_Version < Ada_05 and then Token = Tok_Limited)\n+         if (Ada_Version < Ada_2005 and then Token = Tok_Limited)\n            or else Token = Tok_Private\n            or else Token = Tok_Record\n            or else Token = Tok_Null\n@@ -566,7 +566,7 @@ package body Ch3 is\n                --  Ada 2005 (AI-326): If the words IS TAGGED appear, the type\n                --  is a tagged incomplete type.\n \n-               if Ada_Version >= Ada_05\n+               if Ada_Version >= Ada_2005\n                  and then Token = Tok_Semicolon\n                then\n                   Scan; -- past ;\n@@ -703,7 +703,7 @@ package body Ch3 is\n                   --  Ada 2005 (AI-419): LIMITED NEW\n \n                elsif Token = Tok_New then\n-                  if Ada_Version < Ada_05 then\n+                  if Ada_Version < Ada_2005 then\n                      Error_Msg_SP\n                        (\"LIMITED in derived type is an Ada 2005 extension\");\n                      Error_Msg_SP\n@@ -1018,7 +1018,7 @@ package body Ch3 is\n             --  access ...\" is legal in Ada 95, whereas \"Formal : not null\n             --  Named_Access_Type\" is not.\n \n-            if Ada_Version >= Ada_05\n+            if Ada_Version >= Ada_2005\n               or else (Ada_Version >= Ada_95\n                         and then Allow_Anonymous_In_95\n                         and then Token = Tok_Access)\n@@ -1588,7 +1588,7 @@ package body Ch3 is\n                   Set_Null_Exclusion_Present (Decl_Node, Not_Null_Present);\n \n                   if Token = Tok_Access then\n-                     if Ada_Version < Ada_05 then\n+                     if Ada_Version < Ada_2005 then\n                         Error_Msg_SP\n                           (\"generalized use of anonymous access types \" &\n                            \"is an Ada 2005 extension\");\n@@ -1651,7 +1651,7 @@ package body Ch3 is\n                --  Access definition (AI-406) or subtype indication\n \n                if Token = Tok_Access then\n-                  if Ada_Version < Ada_05 then\n+                  if Ada_Version < Ada_2005 then\n                      Error_Msg_SP\n                        (\"generalized use of anonymous access types \" &\n                         \"is an Ada 2005 extension\");\n@@ -1692,7 +1692,7 @@ package body Ch3 is\n             Not_Null_Present := P_Null_Exclusion;  --  Ada 2005 (AI-231/423)\n \n             if Token = Tok_Access then\n-               if Ada_Version < Ada_05 then\n+               if Ada_Version < Ada_2005 then\n                   Error_Msg_SP\n                     (\"generalized use of anonymous access types \" &\n                      \"is an Ada 2005 extension\");\n@@ -1720,7 +1720,7 @@ package body Ch3 is\n                --  Object renaming declaration\n \n                if Token_Is_Renames then\n-                  if Ada_Version < Ada_05 then\n+                  if Ada_Version < Ada_2005 then\n                      Error_Msg_SP\n                        (\"`NOT NULL` not allowed in object renaming\");\n                      raise Error_Resync;\n@@ -1763,7 +1763,7 @@ package body Ch3 is\n          --  Ada 2005 (AI-230): Access Definition case\n \n          elsif Token = Tok_Access then\n-            if Ada_Version < Ada_05 then\n+            if Ada_Version < Ada_2005 then\n                Error_Msg_SP\n                  (\"generalized use of anonymous access types \" &\n                   \"is an Ada 2005 extension\");\n@@ -1925,7 +1925,7 @@ package body Ch3 is\n    begin\n       Typedef_Node := New_Node (N_Derived_Type_Definition, Token_Ptr);\n \n-      if Ada_Version < Ada_05\n+      if Ada_Version < Ada_2005\n         and then Token = Tok_Identifier\n         and then Token_Name = Name_Interface\n       then\n@@ -1952,7 +1952,7 @@ package body Ch3 is\n       if Token = Tok_And then\n          Scan; -- past AND\n \n-         if Ada_Version < Ada_05 then\n+         if Ada_Version < Ada_2005 then\n             Error_Msg_SP\n               (\"abstract interface is an Ada 2005 extension\");\n             Error_Msg_SP (\"\\unit must be compiled with -gnat05 switch\");\n@@ -2648,7 +2648,7 @@ package body Ch3 is\n       --  Ada 2005 (AI-230): Access Definition case\n \n       if Token = Tok_Access then\n-         if Ada_Version < Ada_05 then\n+         if Ada_Version < Ada_2005 then\n             Error_Msg_SP\n               (\"generalized use of anonymous access types \" &\n                \"is an Ada 2005 extension\");\n@@ -3416,7 +3416,7 @@ package body Ch3 is\n             --  Ada 2005 (AI-230): Access Definition case\n \n             if Token = Tok_Access then\n-               if Ada_Version < Ada_05 then\n+               if Ada_Version < Ada_2005 then\n                   Error_Msg_SP\n                     (\"generalized use of anonymous access types \" &\n                      \"is an Ada 2005 extension\");\n@@ -3745,7 +3745,7 @@ package body Ch3 is\n       Typedef_Node : Node_Id;\n \n    begin\n-      if Ada_Version < Ada_05 then\n+      if Ada_Version < Ada_2005 then\n          Error_Msg_SP (\"abstract interface is an Ada 2005 extension\");\n          Error_Msg_SP (\"\\unit must be compiled with -gnat05 switch\");\n       end if;\n@@ -3924,7 +3924,7 @@ package body Ch3 is\n          --  Ada 2005 (AI-318-02)\n \n          if Token = Tok_Access then\n-            if Ada_Version < Ada_05 then\n+            if Ada_Version < Ada_2005 then\n                Error_Msg_SC\n                  (\"anonymous access result type is an Ada 2005 extension\");\n                Error_Msg_SC (\"\\unit must be compiled with -gnat05 switch\");\n@@ -4025,7 +4025,7 @@ package body Ch3 is\n         or else Token = Tok_Procedure\n         or else Token = Tok_Function\n       then\n-         if Ada_Version < Ada_05 then\n+         if Ada_Version < Ada_2005 then\n             Error_Msg_SP (\"access-to-subprogram is an Ada 2005 extension\");\n             Error_Msg_SP (\"\\unit should be compiled with -gnat05 switch\");\n          end if;\n@@ -4041,7 +4041,7 @@ package body Ch3 is\n          Set_Null_Exclusion_Present (Def_Node, Null_Exclusion_Present);\n \n          if Token = Tok_All then\n-            if Ada_Version < Ada_05 then\n+            if Ada_Version < Ada_2005 then\n                Error_Msg_SP\n                  (\"ALL is not permitted for anonymous access types\");\n             end if;\n@@ -4050,7 +4050,7 @@ package body Ch3 is\n             Set_All_Present (Def_Node);\n \n          elsif Token = Tok_Constant then\n-            if Ada_Version < Ada_05 then\n+            if Ada_Version < Ada_2005 then\n                Error_Msg_SP (\"access-to-constant is an Ada 2005 extension\");\n                Error_Msg_SP (\"\\unit should be compiled with -gnat05 switch\");\n             end if;"}, {"sha": "c444d6708a42d4875968f388c41ce95ae6362514", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -1484,7 +1484,7 @@ package body Ch4 is\n          --  Ada 2005(AI-287): The box notation is used to indicate the\n          --  default initialization of aggregate components\n \n-         if Ada_Version < Ada_05 then\n+         if Ada_Version < Ada_2005 then\n             Error_Msg_SP\n               (\"component association with '<'> is an Ada 2005 extension\");\n             Error_Msg_SP (\"\\unit must be compiled with -gnat05 switch\");"}, {"sha": "8252f5ca3016375a02f9add418ab58ff2853105f", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -218,7 +218,7 @@ package body Ch6 is\n \n       if Is_Overriding or else Not_Overriding then\n \n-         --  Note that if we are not in Ada_05 mode, error messages have\n+         --  Note that if we are not in Ada_2005 mode, error messages have\n          --  already been given, so no need to give another message here.\n \n          --  An overriding indicator is allowed for subprogram declarations,\n@@ -367,7 +367,7 @@ package body Ch6 is\n          --  Ada 2005 (AI-318-02)\n \n          if Token = Tok_Access then\n-            if Ada_Version < Ada_05 then\n+            if Ada_Version < Ada_2005 then\n                Error_Msg_SC\n                  (\"anonymous access result type is an Ada 2005 extension\");\n                Error_Msg_SC (\"\\unit must be compiled with -gnat05 switch\");\n@@ -531,7 +531,7 @@ package body Ch6 is\n             --  Ada 2005 (AI-248): Parse a null procedure declaration\n \n             elsif Token = Tok_Null then\n-               if Ada_Version < Ada_05 then\n+               if Ada_Version < Ada_2005 then\n                   Error_Msg_SP (\"null procedures are an Ada 2005 extension\");\n                   Error_Msg_SP (\"\\unit must be compiled with -gnat05 switch\");\n                end if;\n@@ -842,7 +842,7 @@ package body Ch6 is\n          --  Ada 2005 (AI-318-02)\n \n          if Token = Tok_Access then\n-            if Ada_Version < Ada_05 then\n+            if Ada_Version < Ada_2005 then\n                Error_Msg_SC\n                  (\"anonymous access result type is an Ada 2005 extension\");\n                Error_Msg_SC (\"\\unit must be compiled with -gnat05 switch\");\n@@ -1678,7 +1678,7 @@ package body Ch6 is\n          --  Extended_return_statement (Ada 2005 only -- AI-318):\n \n          else\n-            if Ada_Version < Ada_05 then\n+            if Ada_Version < Ada_2005 then\n                Error_Msg_SP\n                  (\" extended_return_statement is an Ada 2005 extension\");\n                Error_Msg_SP (\"\\unit must be compiled with -gnat05 switch\");"}, {"sha": "a97c4631c80385e936fc3941cc8bd63f2e18c6b9", "filename": "gcc/ada/par-ch9.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fpar-ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fpar-ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch9.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -168,7 +168,7 @@ package body Ch9 is\n             if Token = Tok_New then\n                Scan; --  past NEW\n \n-               if Ada_Version < Ada_05 then\n+               if Ada_Version < Ada_2005 then\n                   Error_Msg_SP (\"task interface is an Ada 2005 extension\");\n                   Error_Msg_SP (\"\\unit must be compiled with -gnat05 switch\");\n                end if;\n@@ -480,7 +480,7 @@ package body Ch9 is\n          if Token = Tok_New then\n             Scan; --  past NEW\n \n-            if Ada_Version < Ada_05 then\n+            if Ada_Version < Ada_2005 then\n                Error_Msg_SP (\"protected interface is an Ada 2005 extension\");\n                Error_Msg_SP (\"\\unit must be compiled with -gnat05 switch\");\n             end if;\n@@ -640,7 +640,7 @@ package body Ch9 is\n          end if;\n \n          if Is_Overriding or else Not_Overriding then\n-            if Ada_Version < Ada_05 then\n+            if Ada_Version < Ada_2005 then\n                Error_Msg_SP (\"overriding indicator is an Ada 2005 extension\");\n                Error_Msg_SP (\"\\unit must be compiled with -gnat05 switch\");\n \n@@ -824,7 +824,7 @@ package body Ch9 is\n       end if;\n \n       if Is_Overriding or else Not_Overriding then\n-         if Ada_Version < Ada_05 then\n+         if Ada_Version < Ada_2005 then\n             Error_Msg_SP (\"overriding indicator is an Ada 2005 extension\");\n             Error_Msg_SP (\"\\unit must be compiled with -gnat05 switch\");\n "}, {"sha": "be94746765ca337764dcc7939dec5c9f16805df5", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -313,8 +313,8 @@ begin\n \n       when Pragma_Ada_05 | Pragma_Ada_2005 =>\n          if Arg_Count = 0 then\n-            Ada_Version := Ada_05;\n-            Ada_Version_Explicit := Ada_05;\n+            Ada_Version := Ada_2005;\n+            Ada_Version_Explicit := Ada_2005;\n          end if;\n \n       ---------------------"}, {"sha": "b74bb1c2caec55e2f9cdd72d8fc01bc9b6fa9bef", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -1062,7 +1062,7 @@ package body Scng is\n                   --  but in Ada 2005, the set of characters allowed has been\n                   --  restricted to graphic characters.\n \n-                  if Ada_Version >= Ada_05\n+                  if Ada_Version >= Ada_2005\n                     and then Is_UTF_32_Non_Graphic (UTF_32 (Code))\n                   then\n                      Error_Msg\n@@ -1690,7 +1690,7 @@ package body Scng is\n                   --  literal, but in Ada 2005, the set of characters allowed\n                   --  is restricted to graphic characters.\n \n-                  elsif Ada_Version >= Ada_05\n+                  elsif Ada_Version >= Ada_2005\n                     and then Is_UTF_32_Non_Graphic (UTF_32 (Code))\n                   then\n                      Error_Msg -- CODEFIX????\n@@ -2331,7 +2331,7 @@ package body Scng is\n                      --  Wide characters are always allowed in Ada 2005\n \n                      if Identifier_Character_Set /= 'w'\n-                       and then Ada_Version < Ada_05\n+                       and then Ada_Version < Ada_2005\n                      then\n                         Error_Msg\n                           (\"wide character not allowed in identifier\", Wptr);"}, {"sha": "53b340dae691c8b51f19a11d78ac3a40fd1917f4", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -921,7 +921,7 @@ package body Sem_Aggr is\n \n       --  Ada 2005 (AI-287): Limited aggregates allowed\n \n-      if Is_Limited_Type (Typ) and then Ada_Version < Ada_05 then\n+      if Is_Limited_Type (Typ) and then Ada_Version < Ada_2005 then\n          Error_Msg_N (\"aggregate type cannot be limited\", N);\n          Explain_Limited_Type (Typ, N);\n \n@@ -1758,7 +1758,7 @@ package body Sem_Aggr is\n \n                --  Ada 2005 (AI-231)\n \n-               if Ada_Version >= Ada_05\n+               if Ada_Version >= Ada_2005\n                  and then Known_Null (Expression (Assoc))\n                then\n                   Check_Can_Never_Be_Null (Etype (N), Expression (Assoc));\n@@ -2060,7 +2060,7 @@ package body Sem_Aggr is\n \n             --  Ada 2005 (AI-231)\n \n-            if Ada_Version >= Ada_05\n+            if Ada_Version >= Ada_2005\n               and then Known_Null (Expr)\n             then\n                Check_Can_Never_Be_Null (Etype (N), Expr);\n@@ -2087,7 +2087,7 @@ package body Sem_Aggr is\n \n             --  Ada 2005 (AI-231)\n \n-            if Ada_Version >= Ada_05\n+            if Ada_Version >= Ada_2005\n               and then Known_Null (Assoc)\n             then\n                Check_Can_Never_Be_Null (Etype (N), Expression (Assoc));\n@@ -2355,7 +2355,7 @@ package body Sem_Aggr is\n \n          --  Ada 2005 (AI-287): Limited aggregates are allowed\n \n-         if Ada_Version < Ada_05 then\n+         if Ada_Version < Ada_2005 then\n             Error_Msg_N (\"aggregate type cannot be limited\", N);\n             Explain_Limited_Type (Typ, N);\n             return;\n@@ -2395,7 +2395,7 @@ package body Sem_Aggr is\n                --  Only consider limited interpretations in the Ada 2005 case\n \n                if Is_Tagged_Type (It.Typ)\n-                 and then (Ada_Version >= Ada_05\n+                 and then (Ada_Version >= Ada_2005\n                             or else not Is_Limited_Type (It.Typ))\n                then\n                   if A_Type /= Any_Type then\n@@ -2410,7 +2410,7 @@ package body Sem_Aggr is\n             end loop;\n \n             if A_Type = Any_Type then\n-               if Ada_Version >= Ada_05 then\n+               if Ada_Version >= Ada_2005 then\n                   Error_Msg_N (\"ancestor part must be of a tagged type\", A);\n                else\n                   Error_Msg_N\n@@ -2809,7 +2809,7 @@ package body Sem_Aggr is\n \n                      --  Ada 2005 (AI-231)\n \n-                     if Ada_Version >= Ada_05\n+                     if Ada_Version >= Ada_2005\n                        and then Known_Null (Expression (Assoc))\n                      then\n                         Check_Can_Never_Be_Null (Compon, Expression (Assoc));\n@@ -3051,7 +3051,7 @@ package body Sem_Aggr is\n       --  aggregate for a null record type was established by AI05-016.\n \n       elsif No (First_Entity (Typ))\n-         and then Ada_Version < Ada_05\n+         and then Ada_Version < Ada_2005\n       then\n          Error_Msg_N (\"record aggregate must be null\", N);\n          return;\n@@ -3148,7 +3148,7 @@ package body Sem_Aggr is\n \n                --  Ada 2005 (AI-231)\n \n-               if Ada_Version >= Ada_05\n+               if Ada_Version >= Ada_2005\n                  and then Known_Null (Positional_Expr)\n                then\n                   Check_Can_Never_Be_Null (Discrim, Positional_Expr);\n@@ -3431,7 +3431,7 @@ package body Sem_Aggr is\n \n          --  Ada 2005 (AI-231)\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Known_Null (Positional_Expr)\n          then\n             Check_Can_Never_Be_Null (Component, Positional_Expr);\n@@ -4013,7 +4013,7 @@ package body Sem_Aggr is\n \n    begin\n       pragma Assert\n-        (Ada_Version >= Ada_05\n+        (Ada_Version >= Ada_2005\n           and then Present (Expr)\n           and then Known_Null (Expr));\n "}, {"sha": "b6cb8a46de6050e39fb833ff2c96a5fc54d38585", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -730,7 +730,7 @@ package body Sem_Attr is\n                --  expression comes from source, e.g. when a single component\n                --  association in an aggregate has a box association.\n \n-               elsif Ada_Version >= Ada_05\n+               elsif Ada_Version >= Ada_2005\n                  and then OK_Self_Reference\n                then\n                   null;\n@@ -1349,7 +1349,7 @@ package body Sem_Attr is\n          --     S : constant Integer := X.all'Size;             -- ERROR\n          --     procedure Q (Obj : Integer := X.all'Alignment); -- ERROR\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Nkind (P) = N_Explicit_Dereference\n          then\n             E := P;\n@@ -1671,15 +1671,15 @@ package body Sem_Attr is\n          if Is_Task_Type (Etype (P))\n            or else (Is_Access_Type (Etype (P))\n                       and then Is_Task_Type (Designated_Type (Etype (P))))\n-           or else (Ada_Version >= Ada_05\n+           or else (Ada_Version >= Ada_2005\n                       and then Ekind (Etype (P)) = E_Class_Wide_Type\n                       and then Is_Interface (Etype (P))\n                       and then Is_Task_Interface (Etype (P)))\n          then\n             Resolve (P);\n \n          else\n-            if Ada_Version >= Ada_05 then\n+            if Ada_Version >= Ada_2005 then\n                Error_Attr_P\n                  (\"prefix of % attribute must be a task or a task \" &\n                   \"interface class-wide object\");\n@@ -1979,7 +1979,7 @@ package body Sem_Attr is\n       --  Ada 2005 (AI-345): Ensure that the compiler gives exactly the current\n       --  output compiling in Ada 95 mode for the case of ambiguous prefixes.\n \n-      if Ada_Version < Ada_05\n+      if Ada_Version < Ada_2005\n         and then Is_Overloaded (P)\n         and then Aname /= Name_Access\n         and then Aname /= Name_Address\n@@ -1990,7 +1990,7 @@ package body Sem_Attr is\n       then\n          Error_Attr (\"ambiguous prefix for % attribute\", P);\n \n-      elsif Ada_Version >= Ada_05\n+      elsif Ada_Version >= Ada_2005\n         and then Is_Overloaded (P)\n         and then Aname /= Name_Access\n         and then Aname /= Name_Address\n@@ -2002,7 +2002,7 @@ package body Sem_Attr is\n          --  entry wrappers, the attributes Count, Caller and AST_Entry require\n          --  a context check\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then (Aname = Name_Count\n                       or else Aname = Name_Caller\n                       or else Aname = Name_AST_Entry)\n@@ -2832,7 +2832,7 @@ package body Sem_Attr is\n                   --  Ada 2005 (AI-345): Do not consider primitive entry\n                   --  wrappers generated for task or protected types.\n \n-                  elsif Ada_Version >= Ada_05\n+                  elsif Ada_Version >= Ada_2005\n                     and then not Comes_From_Source (It.Nam)\n                   then\n                      null;\n@@ -3175,7 +3175,7 @@ package body Sem_Attr is\n          elsif Is_Task_Type (Etype (P))\n            or else (Is_Access_Type (Etype (P))\n                       and then Is_Task_Type (Designated_Type (Etype (P))))\n-           or else (Ada_Version >= Ada_05\n+           or else (Ada_Version >= Ada_2005\n                       and then Ekind (Etype (P)) = E_Class_Wide_Type\n                       and then Is_Interface (Etype (P))\n                       and then Is_Task_Interface (Etype (P)))\n@@ -3184,7 +3184,7 @@ package body Sem_Attr is\n             Set_Etype (N, RTE (RO_AT_Task_Id));\n \n          else\n-            if Ada_Version >= Ada_05 then\n+            if Ada_Version >= Ada_2005 then\n                Error_Attr_P\n                  (\"prefix of % attribute must be an exception, a \" &\n                   \"task or a task interface class-wide object\");\n@@ -3829,7 +3829,7 @@ package body Sem_Attr is\n       --  Ada 2005 (AI-327): Dynamic ceiling priorities\n \n       when Attribute_Priority =>\n-         if Ada_Version < Ada_05 then\n+         if Ada_Version < Ada_2005 then\n             Error_Attr (\"% attribute is allowed only in Ada 2005 mode\", P);\n          end if;\n \n@@ -7450,7 +7450,7 @@ package body Sem_Attr is\n                                  --  Special case of soft hyphen in Ada 2005\n \n                                  if C = Character'Val (16#AD#)\n-                                   and then Ada_Version >= Ada_05\n+                                   and then Ada_Version >= Ada_2005\n                                  then\n                                     Wt := 11;\n                                  else\n@@ -8126,7 +8126,7 @@ package body Sem_Attr is\n \n             Des_Btyp := Designated_Type (Btyp);\n \n-            if Ada_Version >= Ada_05\n+            if Ada_Version >= Ada_2005\n               and then Is_Incomplete_Type (Des_Btyp)\n             then\n                --  Ada 2005 (AI-412): If the (sub)type is a limited view of an\n@@ -8155,7 +8155,7 @@ package body Sem_Attr is\n                --  components, and return objects. For a component definition\n                --  the level is the same of the enclosing composite type.\n \n-               if Ada_Version >= Ada_05\n+               if Ada_Version >= Ada_2005\n                  and then Is_Local_Anonymous_Access (Btyp)\n                  and then Object_Access_Level (P) > Type_Access_Level (Btyp)\n                  and then Attr_Id = Attribute_Access\n@@ -8262,7 +8262,7 @@ package body Sem_Attr is\n                elsif Has_Discriminants (Designated_Type (Typ))\n                  and then not Is_Constrained (Des_Btyp)\n                  and then\n-                   (Ada_Version < Ada_05\n+                   (Ada_Version < Ada_2005\n                      or else\n                        not Has_Constrained_Partial_View\n                              (Designated_Type (Base_Type (Typ))))\n@@ -8857,13 +8857,13 @@ package body Sem_Attr is\n       --  In Ada 2005, Input can invoke Read, and Output can invoke Write\n \n       if Nam = TSS_Stream_Input\n-        and then Ada_Version >= Ada_05\n+        and then Ada_Version >= Ada_2005\n         and then Stream_Attribute_Available (Etyp, TSS_Stream_Read)\n       then\n          return True;\n \n       elsif Nam = TSS_Stream_Output\n-        and then Ada_Version >= Ada_05\n+        and then Ada_Version >= Ada_2005\n         and then Stream_Attribute_Available (Etyp, TSS_Stream_Write)\n       then\n          return True;\n@@ -8880,7 +8880,7 @@ package body Sem_Attr is\n          end if;\n       end loop;\n \n-      if Ada_Version < Ada_05 then\n+      if Ada_Version < Ada_2005 then\n \n          --  In Ada 95 mode, also consider a non-visible definition\n "}, {"sha": "2509d128d90759fc691c9a7f53980500a3fac349", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -398,7 +398,7 @@ package body Sem_Cat is\n       --  currently visible.\n \n       return Present (Rep_Item)\n-        and then (Ada_Version < Ada_05\n+        and then (Ada_Version < Ada_2005\n                    or else At_Any_Place\n                    or else not Is_Hidden (Entity (Rep_Item)));\n    end Has_Stream_Attribute_Definition;\n@@ -779,7 +779,7 @@ package body Sem_Cat is\n \n             --  This test is skipped in Ada 2005 (see AI-366)\n \n-            if Ada_Version < Ada_05\n+            if Ada_Version < Ada_2005\n               and then Comes_From_Source (T)\n               and then In_Pure_Unit\n               and then not In_Subprogram_Task_Protected_Unit\n@@ -976,7 +976,7 @@ package body Sem_Cat is\n       --  Don't need this check in Ada 2005 mode, where this is all taken\n       --  care of by the mechanism for Preelaborable Initialization.\n \n-      if Ada_Version >= Ada_05 then\n+      if Ada_Version >= Ada_2005 then\n          return;\n       end if;\n \n@@ -1157,7 +1157,7 @@ package body Sem_Cat is\n                      --  marked with this pragma in the predefined library are\n                      --  not treated specially.\n \n-                     if Ada_Version < Ada_05 then\n+                     if Ada_Version < Ada_2005 then\n                         Error_Msg_N\n                           (\"private object not allowed in preelaborated unit\",\n                            N);\n@@ -1190,7 +1190,7 @@ package body Sem_Cat is\n                         then\n                            Error_Msg_Sloc := Sloc (Ent);\n \n-                           if Ada_Version >= Ada_05 then\n+                           if Ada_Version >= Ada_2005 then\n                               Error_Msg_NE\n                                 (\"\\would be legal if pragma Preelaborable_\" &\n                                  \"Initialization given for & #\", N, Ent);\n@@ -1609,7 +1609,7 @@ package body Sem_Cat is\n                Base_Under_Type := Base_Type (Underlying_Type\n                                               (Base_Param_Type));\n \n-               if (Ada_Version < Ada_05\n+               if (Ada_Version < Ada_2005\n                      and then\n                        (No (TSS (Base_Param_Type, TSS_Stream_Read))\n                           or else\n@@ -1619,7 +1619,7 @@ package body Sem_Cat is\n                           or else\n                         No (TSS (Base_Under_Type, TSS_Stream_Write))))\n                  or else\n-                   (Ada_Version >= Ada_05\n+                   (Ada_Version >= Ada_2005\n                       and then\n                         (No (TSS (Base_Param_Type, TSS_Stream_Read))\n                            or else\n@@ -1639,7 +1639,7 @@ package body Sem_Cat is\n                      Error_Node := Param_Spec;\n                   end if;\n \n-                  if Ada_Version >= Ada_05 then\n+                  if Ada_Version >= Ada_2005 then\n                      Error_Msg_N\n                        (\"limited parameter in 'R'C'I unit \"\n                           & \"must have visible read/write attributes \",\n@@ -2003,7 +2003,7 @@ package body Sem_Cat is\n                      \"non-remote access type\", U_Typ);\n                end if;\n \n-               if Ada_Version >= Ada_05 then\n+               if Ada_Version >= Ada_2005 then\n                   Error_Msg_N\n                     (\"\\must have visible Read and Write attribute \" &\n                      \"definition clauses (RM E.2.2(8))\", U_Typ);"}, {"sha": "3c9edd11b9987a97e780c6aebb7918c0ee64d962", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -2452,8 +2452,8 @@ package body Sem_Ch10 is\n                         \"and version-dependent?\", Name (N));\n                   end if;\n \n-               elsif U_Kind = Ada_05_Unit\n-                 and then Ada_Version < Ada_05\n+               elsif U_Kind = Ada_2005_Unit\n+                 and then Ada_Version < Ada_2005\n                  and then Warn_On_Ada_2005_Compatibility\n                then\n                   Error_Msg_N (\"& is an Ada 2005 unit?\", Name (N));\n@@ -3773,7 +3773,7 @@ package body Sem_Ch10 is\n       --  looking for incomplete subtype declarations of incomplete types\n       --  visible through a limited with clause.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Analyzed (N)\n         and then Nkind (Unit (N)) = N_Package_Declaration\n       then\n@@ -5026,7 +5026,7 @@ package body Sem_Ch10 is\n \n       if Is_Child_Unit (Uname)\n         and then Is_Visible_Child_Unit (Uname)\n-        and then Ada_Version >= Ada_05\n+        and then Ada_Version >= Ada_2005\n       then\n          declare\n             Decl1 : constant Node_Id  := Unit_Declaration_Node (P);"}, {"sha": "8b636d4fd6c146d41d81410bd096e79749038025", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -1867,7 +1867,7 @@ package body Sem_Ch12 is\n \n          --  Ada 2005 (AI-287): Limited aggregates allowed in generic formals\n \n-         if Ada_Version < Ada_05 and then Is_Limited_Type (T) then\n+         if Ada_Version < Ada_2005 and then Is_Limited_Type (T) then\n             Error_Msg_N\n               (\"generic formal of mode IN must not be of limited type\", N);\n             Explain_Limited_Type (T, N);\n@@ -4235,7 +4235,7 @@ package body Sem_Ch12 is\n          end if;\n \n          if Is_Dispatching_Operation (Act_Decl_Id)\n-           and then Ada_Version >= Ada_05\n+           and then Ada_Version >= Ada_2005\n          then\n             declare\n                Formal : Entity_Id;\n@@ -4467,7 +4467,7 @@ package body Sem_Ch12 is\n    procedure Check_Access_Definition (N : Node_Id) is\n    begin\n       pragma Assert\n-        (Ada_Version >= Ada_05\n+        (Ada_Version >= Ada_2005\n            and then Present (Access_Definition (N)));\n       null;\n    end Check_Access_Definition;\n@@ -8380,7 +8380,7 @@ package body Sem_Ch12 is\n             --  the type of the actual shall resolve to a specific anonymous\n             --  access type.\n \n-            if Ada_Version < Ada_05\n+            if Ada_Version < Ada_2005\n               or else\n                 Ekind (Base_Type (Ftyp)) /=\n                   E_Anonymous_Access_Type\n@@ -8558,7 +8558,7 @@ package body Sem_Ch12 is\n       --  Otherwise, the subtype of the actual matching the formal object\n       --  declaration shall exclude null.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Present (Actual_Decl)\n         and then\n           Nkind_In (Actual_Decl, N_Formal_Object_Declaration,\n@@ -9577,7 +9577,7 @@ package body Sem_Ch12 is\n \n          --  Ada 2005 (AI-251)\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Is_Interface (Ancestor)\n          then\n             if not Interface_Present_In_Ancestor (Act_T, Ancestor) then\n@@ -9597,7 +9597,7 @@ package body Sem_Ch12 is\n          --  that the formal type declaration has been rewritten as a private\n          --  extension.\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Nkind (Parent (A_Gen_T)) = N_Private_Extension_Declaration\n            and then Synchronized_Present (Parent (A_Gen_T))\n          then"}, {"sha": "624684b2533e0b2dcf934df03ebdf0b5c200b28e", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -2404,7 +2404,7 @@ package body Sem_Ch13 is\n       --  also used to locate primitives covering interfaces when processing\n       --  generics (see Derive_Subprograms).\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Ekind (E) = E_Record_Type\n         and then Is_Tagged_Type (E)\n         and then not Is_Interface (E)"}, {"sha": "3320c1493ba06dbb7b485312dc2f37f3113a0a50", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -780,7 +780,7 @@ package body Sem_Ch3 is\n          (E_Anonymous_Access_Type, Related_Nod, Scope_Id => Anon_Scope);\n \n       if All_Present (N)\n-        and then Ada_Version >= Ada_05\n+        and then Ada_Version >= Ada_2005\n       then\n          Error_Msg_N (\"ALL is not permitted for anonymous access types\", N);\n       end if;\n@@ -833,7 +833,7 @@ package body Sem_Ch3 is\n       --  from Ada 95 semantics. In Ada 2005, anonymous access must specify if\n       --  the null value is allowed. In Ada 95 the null value is never allowed.\n \n-      if Ada_Version >= Ada_05 then\n+      if Ada_Version >= Ada_2005 then\n          Set_Can_Never_Be_Null (Anon_Type, Null_Exclusion_Present (N));\n       else\n          Set_Can_Never_Be_Null (Anon_Type, True);\n@@ -1513,7 +1513,7 @@ package body Sem_Ch3 is\n       Restore_Scope : Boolean := False;\n \n    begin\n-      pragma Assert (Ada_Version >= Ada_05\n+      pragma Assert (Ada_Version >= Ada_2005\n         and then Is_Record_Type (Tagged_Type)\n         and then Is_Tagged_Type (Tagged_Type)\n         and then Has_Interfaces (Tagged_Type)\n@@ -1776,7 +1776,7 @@ package body Sem_Ch3 is\n          Preanalyze_Spec_Expression (E, T);\n          Check_Initialization (T, E);\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Ekind (T) = E_Anonymous_Access_Type\n            and then Etype (E) /= Any_Type\n          then\n@@ -1867,7 +1867,7 @@ package body Sem_Ch3 is\n       --  Ada 2005 (AI-231): Propagate the null-excluding attribute and carry\n       --  out some static checks.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Can_Never_Be_Null (T)\n       then\n          Null_Exclusion_Static_Checks (N);\n@@ -2489,7 +2489,7 @@ package body Sem_Ch3 is\n       --  Ada 2005 (AI-231): Propagate the null-excluding attribute and carry\n       --  out some static checks\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Can_Never_Be_Null (T)\n       then\n          --  In case of aggregates we must also take care of the correct\n@@ -2589,7 +2589,7 @@ package body Sem_Ch3 is\n          --  to make handlers not at the library level illegal.\n \n          if Has_Interrupt_Handler (T)\n-           and then Ada_Version < Ada_05\n+           and then Ada_Version < Ada_2005\n          then\n             Error_Msg_N\n               (\"interrupt object can only be declared at library level\", Id);\n@@ -2970,7 +2970,7 @@ package body Sem_Ch3 is\n            and then Is_Record_Type (T)\n            and then not Is_Constrained (T)\n            and then Has_Discriminants (T)\n-           and then (Ada_Version < Ada_05 or else Is_Indefinite_Subtype (T))\n+           and then (Ada_Version < Ada_2005 or else Is_Indefinite_Subtype (T))\n          then\n             Set_Actual_Subtype (Id, Build_Default_Subtype (T, N));\n          end if;\n@@ -3322,7 +3322,7 @@ package body Sem_Ch3 is\n       --  Ada 2005 (AI-443): Synchronized private extension or a rewritten\n       --  synchronized formal derived type.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Synchronized_Present (N)\n       then\n          Set_Is_Limited_Record (T);\n@@ -3674,7 +3674,7 @@ package body Sem_Ch3 is\n                end if;\n \n             when E_Incomplete_Type =>\n-               if Ada_Version >= Ada_05 then\n+               if Ada_Version >= Ada_2005 then\n                   Set_Ekind (Id, E_Incomplete_Subtype);\n \n                   --  Ada 2005 (AI-412): Decorate an incomplete subtype\n@@ -4462,7 +4462,7 @@ package body Sem_Ch3 is\n       --  Ada 2005 (AI-231): Propagate the null-excluding attribute to the\n       --  array type to ensure that objects of this type are initialized.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Can_Never_Be_Null (Element_Type)\n       then\n          Set_Can_Never_Be_Null (T);\n@@ -6650,7 +6650,7 @@ package body Sem_Ch3 is\n             --  Create internal access types for components with anonymous\n             --  access types.\n \n-            if Ada_Version >= Ada_05 then\n+            if Ada_Version >= Ada_2005 then\n                Check_Anonymous_Access_Components\n                  (N, Derived_Type, Derived_Type,\n                    Component_List (Record_Extension_Part (Type_Def)));\n@@ -6875,7 +6875,7 @@ package body Sem_Ch3 is\n          --  cannot be declared in a generic body if it's derived directly\n          --  or indirectly from a formal type of that generic.\n \n-         if Ada_Version >= Ada_05 then\n+         if Ada_Version >= Ada_2005 then\n             if Present (Enclosing_Generic_Body (Derived_Type)) then\n                declare\n                   Ancestor_Type : Entity_Id;\n@@ -6948,7 +6948,7 @@ package body Sem_Ch3 is\n \n       --  Ada 2005 (AI-251)\n \n-      if Ada_Version >= Ada_05 and then Is_Tagged then\n+      if Ada_Version >= Ada_2005 and then Is_Tagged then\n \n          --  \"The declaration of a specific descendant of an interface type\n          --  freezes the interface type\" (RM 13.14).\n@@ -7312,7 +7312,7 @@ package body Sem_Ch3 is\n               (Derived_Type, Expand_To_Stored_Constraint (Parent_Base, Discs));\n          end if;\n \n-         if Ada_Version >= Ada_05 then\n+         if Ada_Version >= Ada_2005 then\n             declare\n                Ifaces_List : Elist_Id;\n \n@@ -8162,7 +8162,7 @@ package body Sem_Ch3 is\n          --  concurrent record type (which has the list of primitive\n          --  operations).\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Is_Concurrent_Type (T)\n          then\n             Set_Corresponding_Record_Type (Def_Id,\n@@ -8557,7 +8557,7 @@ package body Sem_Ch3 is\n \n          if Is_Null_Extension (T)\n            and then Has_Controlling_Result (Subp)\n-           and then Ada_Version >= Ada_05\n+           and then Ada_Version >= Ada_2005\n            and then Present (Alias_Subp)\n            and then not Comes_From_Source (Subp)\n            and then not Is_Abstract_Subprogram (Alias_Subp)\n@@ -8613,7 +8613,7 @@ package body Sem_Ch3 is\n                if Nkind (Type_Def) = N_Derived_Type_Definition\n                  and then Present (Record_Extension_Part (Type_Def))\n                  and then\n-                   (Ada_Version < Ada_05\n+                   (Ada_Version < Ada_2005\n                       or else not Is_Null_Extension (T)\n                       or else Ekind (Subp) = E_Procedure\n                       or else not Has_Controlling_Result (Subp)\n@@ -8837,7 +8837,7 @@ package body Sem_Ch3 is\n                  and then Has_Discriminants (Etype (C))\n                  and then not Is_Constrained (Etype (C))\n                  and then not In_Instance_Body\n-                 and then Ada_Version < Ada_05\n+                 and then Ada_Version < Ada_2005\n                then\n                   Error_Msg_N\n                     (\"aliased component must be constrained (RM 3.6(11))\",\n@@ -8852,7 +8852,7 @@ package body Sem_Ch3 is\n               and then Has_Discriminants (Component_Type (T))\n               and then not Is_Constrained (Component_Type (T))\n               and then not In_Instance_Body\n-              and then Ada_Version < Ada_05\n+              and then Ada_Version < Ada_2005\n             then\n                Error_Msg_N\n                  (\"aliased component type must be constrained (RM 3.6(11))\",\n@@ -9201,7 +9201,7 @@ package body Sem_Ch3 is\n                Error_Msg_N\n                  (\"?cannot initialize entities of limited type!\", Exp);\n \n-            elsif Ada_Version < Ada_05 then\n+            elsif Ada_Version < Ada_2005 then\n                Error_Msg_N\n                  (\"cannot initialize entities of limited type\", Exp);\n                Explain_Limited_Type (T, Exp);\n@@ -9515,7 +9515,7 @@ package body Sem_Ch3 is\n                --  Ada 2005 (AI-230): Access discriminant allowed in\n                --  non-limited record types.\n \n-               if Ada_Version < Ada_05 then\n+               if Ada_Version < Ada_2005 then\n \n                   --  This restriction gets applied to the full type here. It\n                   --  has already been applied earlier to the partial view.\n@@ -10071,7 +10071,7 @@ package body Sem_Ch3 is\n          end if;\n \n          if (Ekind (T) = E_General_Access_Type\n-              or else Ada_Version >= Ada_05)\n+              or else Ada_Version >= Ada_2005)\n            and then Has_Private_Declaration (Desig_Type)\n            and then In_Open_Scopes (Scope (Desig_Type))\n            and then Has_Discriminants (Desig_Type)\n@@ -10175,11 +10175,11 @@ package body Sem_Ch3 is\n       --  generic body, the rule is checked assuming that the actual type has\n       --  defaulted discriminants.\n \n-      if Ada_Version >= Ada_05 or else Warn_On_Ada_2005_Compatibility then\n+      if Ada_Version >= Ada_2005 or else Warn_On_Ada_2005_Compatibility then\n          if Ekind (Base_Type (T)) = E_General_Access_Type\n            and then Has_Defaulted_Discriminants (Desig_Type)\n          then\n-            if Ada_Version < Ada_05 then\n+            if Ada_Version < Ada_2005 then\n                Error_Msg_N\n                  (\"access subtype of general access type would not \" &\n                   \"be allowed in Ada 2005?\", S);\n@@ -10195,7 +10195,7 @@ package body Sem_Ch3 is\n            and then Has_Discriminants (Desig_Type)\n            and then In_Package_Body (Current_Scope)\n          then\n-            if Ada_Version < Ada_05 then\n+            if Ada_Version < Ada_2005 then\n                Error_Msg_N\n                  (\"access subtype would not be allowed in generic body \" &\n                   \"in Ada 2005?\", S);\n@@ -10968,7 +10968,7 @@ package body Sem_Ch3 is\n       --  Ada 2005 (AI-412): Constrained incomplete subtypes are illegal.\n       --  Avoid generating an error for access-to-incomplete subtypes.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Ekind (T) = E_Incomplete_Type\n         and then Nkind (Parent (S)) = N_Subtype_Declaration\n         and then not Is_Itype (Def_Id)\n@@ -12101,7 +12101,7 @@ package body Sem_Ch3 is\n       Typ        : Entity_Id;\n \n    begin\n-      pragma Assert (Ada_Version >= Ada_05\n+      pragma Assert (Ada_Version >= Ada_2005\n         and then Is_Record_Type (Tagged_Type)\n         and then Is_Tagged_Type (Tagged_Type)\n         and then Has_Interfaces (Tagged_Type));\n@@ -12491,7 +12491,7 @@ package body Sem_Ch3 is\n       --  overrides an interface primitive because interface primitives\n       --  must be visible in the partial view of the parent (RM 7.3 (7.3/2))\n \n-      elsif Ada_Version >= Ada_05\n+      elsif Ada_Version >= Ada_2005\n          and then Is_Dispatching_Operation (Parent_Subp)\n          and then Covers_Some_Interface (Parent_Subp)\n       then\n@@ -12634,7 +12634,7 @@ package body Sem_Ch3 is\n       --  Ada 2005 (AI-228): Calculate the \"require overriding\" and \"abstract\"\n       --  properties of the subprogram, as defined in RM-3.9.3(4/2-6/2).\n \n-      elsif Ada_Version >= Ada_05\n+      elsif Ada_Version >= Ada_2005\n         and then (Is_Abstract_Subprogram (Alias (New_Subp))\n                    or else (Is_Tagged_Type (Derived_Type)\n                             and then Etype (New_Subp) = Derived_Type\n@@ -12656,7 +12656,7 @@ package body Sem_Ch3 is\n             Set_Requires_Overriding (New_Subp);\n          end if;\n \n-      elsif Ada_Version < Ada_05\n+      elsif Ada_Version < Ada_2005\n         and then (Is_Abstract_Subprogram (Alias (New_Subp))\n                    or else (Is_Tagged_Type (Derived_Type)\n                              and then Etype (New_Subp) = Derived_Type\n@@ -13695,7 +13695,7 @@ package body Sem_Ch3 is\n       --  extension. There is no point in checking the ancestor type or\n       --  the progenitors since the construct is wrong to begin with.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Is_Generic_Type (T)\n         and then Present (Original_Node (N))\n       then\n@@ -15845,7 +15845,7 @@ package body Sem_Ch3 is\n    is\n    begin\n       return Is_CPP_Constructor_Call (Exp)\n-        or else (Ada_Version >= Ada_05\n+        or else (Ada_Version >= Ada_2005\n                   and then not Debug_Flag_Dot_L\n                   and then OK_For_Limited_Init_In_05 (Typ, Exp));\n    end OK_For_Limited_Init;\n@@ -16146,7 +16146,7 @@ package body Sem_Ch3 is\n             --  Ada 2005 (AI-230): Access discriminant allowed in non-limited\n             --  record types\n \n-            if Ada_Version < Ada_05 then\n+            if Ada_Version < Ada_2005 then\n                Check_Access_Discriminant_Requires_Limited\n                  (Discr, Discriminant_Type (Discr));\n             end if;\n@@ -16208,7 +16208,7 @@ package body Sem_Ch3 is\n          --  Ada 2005 (AI-231): Create an Itype that is a duplicate of\n          --  Discr_Type but with the null-exclusion attribute\n \n-         if Ada_Version >= Ada_05 then\n+         if Ada_Version >= Ada_2005 then\n \n             --  Ada 2005 (AI-231): Static checks\n \n@@ -16496,7 +16496,7 @@ package body Sem_Ch3 is\n       --  consistent. We omit this check for synchronized types because\n       --  they are performed on the corresponding record type when frozen.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Is_Tagged_Type (Priv_T)\n         and then Is_Tagged_Type (Full_T)\n         and then not Is_Concurrent_Type (Full_T)\n@@ -16696,7 +16696,7 @@ package body Sem_Ch3 is\n       --  Ada 2005 (AI-443): A synchronized private extension must be\n       --  completed by a task or protected type.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Nkind (Parent (Priv_T)) = N_Private_Extension_Declaration\n         and then Synchronized_Present (Parent (Priv_T))\n         and then not Is_Concurrent_Type (Full_T)\n@@ -17366,7 +17366,7 @@ package body Sem_Ch3 is\n \n          if Ekind (Root_Type (Entity (T))) = E_Incomplete_Type\n            and then\n-             not (Ada_Version >= Ada_05\n+             not (Ada_Version >= Ada_2005\n                     and then\n                        (Nkind (Parent (T)) = N_Subtype_Declaration\n                           or else\n@@ -17390,7 +17390,7 @@ package body Sem_Ch3 is\n \n          --  Ada 2005 (AI-231): Static check\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Present (P)\n            and then Null_Exclusion_Present (P)\n            and then Nkind (P) /= N_Access_To_Object_Definition\n@@ -18090,7 +18090,7 @@ package body Sem_Ch3 is\n \n       --  Normal case\n \n-      if Ada_Version < Ada_05\n+      if Ada_Version < Ada_2005\n         or else not Interface_Present (Def)\n       then\n          --  The flag Is_Tagged_Type might have already been set by\n@@ -18129,7 +18129,7 @@ package body Sem_Ch3 is\n \n       Check_Anonymous_Access_Components (N, T, Prev, Component_List (Def));\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Present (Interface_List (Def))\n       then\n          Check_Interfaces (N, Def);"}, {"sha": "2d6feb2ab388e17f92c13d87a500aa6646132cd3", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -511,7 +511,7 @@ package body Sem_Ch4 is\n                --  partial view, it cannot receive a discriminant constraint,\n                --  and the allocated object is unconstrained.\n \n-               elsif Ada_Version >= Ada_05\n+               elsif Ada_Version >= Ada_2005\n                  and then Has_Constrained_Partial_View (Base_Typ)\n                then\n                   Error_Msg_N\n@@ -597,7 +597,7 @@ package body Sem_Ch4 is\n                   Error_Msg_N\n                     (\"initialization required in class-wide allocation\", N);\n                else\n-                  if Ada_Version < Ada_05\n+                  if Ada_Version < Ada_2005\n                     and then Is_Limited_Type (Type_Id)\n                   then\n                      Error_Msg_N (\"unconstrained allocation not allowed\", N);\n@@ -3767,7 +3767,7 @@ package body Sem_Ch4 is\n          --  Ada 2005 (AI05-0030): In the case of dispatching requeue, the\n          --  selected component should resolve to a name.\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Is_Tagged_Type (Prefix_Type)\n            and then not Is_Concurrent_Type (Prefix_Type)\n          then\n@@ -3818,7 +3818,7 @@ package body Sem_Ch4 is\n                --  Before declaring an error, check whether this is tagged\n                --  private type and a call to a primitive operation.\n \n-               elsif Ada_Version >= Ada_05\n+               elsif Ada_Version >= Ada_2005\n                  and then Is_Tagged_Type (Prefix_Type)\n                  and then Try_Object_Operation (N)\n                then\n@@ -3914,7 +3914,7 @@ package body Sem_Ch4 is\n          --  visible entities are plausible interpretations, check whether\n          --  there is some other primitive operation with that name.\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Is_Tagged_Type (Prefix_Type)\n          then\n             if (Etype (N) = Any_Type\n@@ -4741,7 +4741,7 @@ package body Sem_Ch4 is\n       pragma Warnings (Off, Boolean);\n \n    begin\n-      if Ada_Version >= Ada_05 then\n+      if Ada_Version >= Ada_2005 then\n          Actual := First_Actual (N);\n          while Present (Actual) loop\n \n@@ -5240,7 +5240,7 @@ package body Sem_Ch4 is\n          --  Ada 2005 (AI-230): Keep restriction imposed by Ada 83 and 95:\n          --  Do not allow anonymous access types in equality operators.\n \n-         if Ada_Version < Ada_05\n+         if Ada_Version < Ada_2005\n            and then Ekind (T1) = E_Anonymous_Access_Type\n          then\n             return;\n@@ -5920,7 +5920,7 @@ package body Sem_Ch4 is\n                --  unit, it is one of the operations declared abstract in some\n                --  variants of System, and it must be removed as well.\n \n-               elsif Ada_Version >= Ada_05\n+               elsif Ada_Version >= Ada_2005\n                  or else Is_Predefined_File_Name\n                            (Unit_File_Name (Get_Source_Unit (It.Nam)))\n                then\n@@ -6080,7 +6080,7 @@ package body Sem_Ch4 is\n             --  predefined operators when addresses are involved since this\n             --  case is handled separately.\n \n-            elsif Ada_Version >= Ada_05\n+            elsif Ada_Version >= Ada_2005\n               and then not Address_Kludge\n             then\n                while Present (It.Nam) loop"}, {"sha": "5887ea563e980dc91d6f580f5eacd1d95aecd2c0", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -366,7 +366,7 @@ package body Sem_Ch5 is\n             S   : Entity_Id;\n \n          begin\n-            if Ada_Version >= Ada_05 then\n+            if Ada_Version >= Ada_2005 then\n \n                --  Handle chains of renamings\n \n@@ -592,7 +592,7 @@ package body Sem_Ch5 is\n       --  as well to anonymous access-to-subprogram types that are component\n       --  subtypes or formal parameters.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Is_Access_Type (T1)\n       then\n          if Is_Local_Anonymous_Access (T1)\n@@ -605,7 +605,7 @@ package body Sem_Ch5 is\n \n       --  Ada 2005 (AI-231): Assignment to not null variable\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Can_Never_Be_Null (T1)\n         and then not Assignment_OK (Lhs)\n       then"}, {"sha": "f6a1d8a2b138ea9b0a71560cf0fa6de599c83f31", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -476,7 +476,7 @@ package body Sem_Ch6 is\n          then\n             --  Error in Ada 2005\n \n-            if Ada_Version >= Ada_05\n+            if Ada_Version >= Ada_2005\n               and then not Debug_Flag_Dot_L\n               and then not GNAT_Mode\n             then\n@@ -733,7 +733,7 @@ package body Sem_Ch6 is\n          --  type, apply an implicit conversion of the expression to that type\n          --  to force appropriate static and run-time accessibility checks.\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Ekind (R_Type) = E_Anonymous_Access_Type\n          then\n             Rewrite (Expr, Convert_To (R_Type, Relocate_Node (Expr)));\n@@ -744,7 +744,7 @@ package body Sem_Ch6 is\n          --  expression's type is not declared at a deeper level than the\n          --  function (RM05-6.5(5.6/2)).\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Is_Class_Wide_Type (R_Type)\n          then\n             if Type_Access_Level (Etype (Expr)) >\n@@ -769,7 +769,7 @@ package body Sem_Ch6 is\n          --  involving dereferences of access parameters. For now we just\n          --  check the static cases.\n \n-         if (Ada_Version < Ada_05 or else Debug_Flag_Dot_L)\n+         if (Ada_Version < Ada_2005 or else Debug_Flag_Dot_L)\n            and then Is_Immutably_Limited_Type (Etype (Scope_Id))\n            and then Object_Access_Level (Expr) >\n                       Subprogram_Access_Level (Scope_Id)\n@@ -2329,7 +2329,7 @@ package body Sem_Ch6 is\n       --  is the limited view of a class-wide type and the non-limited view is\n       --  available, update the return type accordingly.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Comes_From_Source (N)\n       then\n          declare\n@@ -2781,7 +2781,7 @@ package body Sem_Ch6 is\n       --  Ada 2005 (AI-251): Abstract interface primitives must be abstract\n       --  or null.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Comes_From_Source (N)\n         and then Is_Dispatching_Operation (Designator)\n       then\n@@ -2852,7 +2852,7 @@ package body Sem_Ch6 is\n       if Nkind (Parent (N)) = N_Compilation_Unit then\n          Set_Body_Required (Parent (N), True);\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Nkind (Specification (N)) = N_Procedure_Specification\n            and then Null_Present (Specification (N))\n          then\n@@ -2915,7 +2915,7 @@ package body Sem_Ch6 is\n          --  Same processing for an access parameter whose designated type is\n          --  derived from a synchronized interface.\n \n-         if Ada_Version >= Ada_05 then\n+         if Ada_Version >= Ada_2005 then\n             declare\n                Formal     : Entity_Id;\n                Formal_Typ : Entity_Id;\n@@ -3695,7 +3695,7 @@ package body Sem_Ch6 is\n          --  Ada 2005 (AI-231): In case of anonymous access types check the\n          --  null-exclusion and access-to-constant attributes match.\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Ekind (Etype (Old_Type)) = E_Anonymous_Access_Type\n            and then\n              (Can_Never_Be_Null (Old_Type)\n@@ -3839,7 +3839,7 @@ package body Sem_Ch6 is\n             New_Formal_Base := Get_Instance_Of (New_Formal_Base);\n          end if;\n \n-         Access_Types_Match := Ada_Version >= Ada_05\n+         Access_Types_Match := Ada_Version >= Ada_2005\n \n             --  Ensure that this rule is only applied when New_Id is a\n             --  renaming of Old_Id.\n@@ -3949,7 +3949,7 @@ package body Sem_Ch6 is\n             --  the null-exclusion and access-to-constant attributes must\n             --  match.\n \n-            if Ada_Version >= Ada_05\n+            if Ada_Version >= Ada_2005\n               and then Ekind (Etype (Old_Formal)) = E_Anonymous_Access_Type\n               and then Ekind (Etype (New_Formal)) = E_Anonymous_Access_Type\n               and then\n@@ -5423,7 +5423,7 @@ package body Sem_Ch6 is\n             --  In Ada2005, access constant indicators must match for\n             --  subtype conformance.\n \n-            if Ada_Version >= Ada_05\n+            if Ada_Version >= Ada_2005\n               and then Ctype >= Subtype_Conformant\n               and then\n                 Is_Access_Constant (Type_1) /= Is_Access_Constant (Type_2)\n@@ -5461,7 +5461,7 @@ package body Sem_Ch6 is\n                     Etype (Base_Type (Desig_2)), Ctype);\n \n             elsif Are_Anonymous_Access_To_Subprogram_Types then\n-               if Ada_Version < Ada_05 then\n+               if Ada_Version < Ada_2005 then\n                   return Ctype = Type_Conformant\n                     or else\n                       Subtypes_Statically_Match (Desig_1, Desig_2);\n@@ -5712,7 +5712,7 @@ package body Sem_Ch6 is\n       --  Ada 2005 (AI-318-02): In the case of build-in-place functions, add\n       --  appropriate extra formals. See type Exp_Ch6.BIP_Formal_Kind.\n \n-      if Ada_Version >= Ada_05 and then Is_Build_In_Place_Function (E) then\n+      if Ada_Version >= Ada_2005 and then Is_Build_In_Place_Function (E) then\n          declare\n             Result_Subt : constant Entity_Id := Etype (E);\n \n@@ -6003,7 +6003,7 @@ package body Sem_Ch6 is\n                --  current one is the explicit overriding.\n \n                elsif Ekind (E) = E_Function\n-                 and then Ada_Version >= Ada_05\n+                 and then Ada_Version >= Ada_2005\n                  and then not Comes_From_Source (E)\n                  and then Has_Controlling_Result (E)\n                  and then Is_Null_Extension (Etype (E))\n@@ -7655,7 +7655,7 @@ package body Sem_Ch6 is\n       --  of an operation that was already derived in the visible part of\n       --  the current package.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Present (Derived_Type)\n         and then Present (Alias (S))\n         and then Is_Dispatching_Operation (Alias (S))\n@@ -8306,7 +8306,7 @@ package body Sem_Ch6 is\n             --  formal in the enclosing scope. Finally, replace the parameter\n             --  type of the formal with the internal subtype.\n \n-            if Ada_Version >= Ada_05\n+            if Ada_Version >= Ada_2005\n               and then Null_Exclusion_Present (Param_Spec)\n             then\n                if not Is_Access_Type (Formal_Type) then\n@@ -8423,7 +8423,7 @@ package body Sem_Ch6 is\n \n          --  Ada 2005 (AI-231): Static checks\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Is_Access_Type (Etype (Formal))\n            and then Can_Never_Be_Null (Etype (Formal))\n          then\n@@ -8933,7 +8933,7 @@ package body Sem_Ch6 is\n          --  Ada 2005 (AI-231): In Ada95, access parameters are always non-\n          --  null; In Ada 2005, only if then null_exclusion is explicit.\n \n-         if Ada_Version < Ada_05\n+         if Ada_Version < Ada_2005\n            or else Can_Never_Be_Null (Etype (Formal_Id))\n          then\n             Set_Is_Known_Non_Null (Formal_Id);"}, {"sha": "c1c3d93cc3c480df513295b565c91426b9b99555", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -953,13 +953,13 @@ package body Sem_Ch8 is\n \n       --  Ada 2005 (AI-327)\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Nkind (Nam) = N_Attribute_Reference\n         and then Attribute_Name (Nam) = Name_Priority\n       then\n          null;\n \n-      elsif Ada_Version >= Ada_05\n+      elsif Ada_Version >= Ada_2005\n         and then Nkind (Nam) in N_Has_Entity\n       then\n          declare\n@@ -1102,7 +1102,7 @@ package body Sem_Ch8 is\n \n       --  Ada 2005 (AI-327)\n \n-      elsif Ada_Version >= Ada_05\n+      elsif Ada_Version >= Ada_2005\n         and then Nkind (Nam) = N_Attribute_Reference\n         and then Attribute_Name (Nam) = Name_Priority\n       then\n@@ -2142,7 +2142,7 @@ package body Sem_Ch8 is\n          --  when performing a null exclusion check between a renaming and a\n          --  renamed subprogram that has been found to be illegal.\n \n-         if Ada_Version >= Ada_05\n+         if Ada_Version >= Ada_2005\n            and then Entity (Nam) /= Any_Id\n          then\n             Check_Null_Exclusion\n@@ -2448,7 +2448,7 @@ package body Sem_Ch8 is\n       --  is dispatching. Test is skipped if some previous error was detected\n       --  that set Old_S to Any_Id.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Old_S /= Any_Id\n         and then not Is_Dispatching_Operation (Old_S)\n         and then Is_Dispatching_Operation (New_S)\n@@ -5675,7 +5675,7 @@ package body Sem_Ch8 is\n                   --  view of a type.\n \n                   if not Is_Tagged_Type (T)\n-                    and then Ada_Version >= Ada_05\n+                    and then Ada_Version >= Ada_2005\n                   then\n                      if From_With_Type (T) then\n                         Error_Msg_N\n@@ -5881,7 +5881,7 @@ package body Sem_Ch8 is\n                   --  nor anywhere else in the declaration because entries\n                   --  cannot have access parameters.\n \n-                  if Ada_Version >= Ada_05\n+                  if Ada_Version >= Ada_2005\n                     and then Nkind (Parent (N)) = N_Access_Definition\n                   then\n                      Set_Entity (N, T_Name);\n@@ -5907,7 +5907,7 @@ package body Sem_Ch8 is\n                   --  In Ada 2005, a protected name can be used in an access\n                   --  definition within its own body.\n \n-                  if Ada_Version >= Ada_05\n+                  if Ada_Version >= Ada_2005\n                     and then Nkind (Parent (N)) = N_Access_Definition\n                   then\n                      Set_Entity (N, T_Name);"}, {"sha": "2da5d1bc452691c5fb447c22962d05c774a1a916", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -104,14 +104,14 @@ package body Sem_Ch9 is\n          Analyze (T_Name);\n \n          if Is_Task_Type (Etype (T_Name))\n-           or else (Ada_Version >= Ada_05\n+           or else (Ada_Version >= Ada_2005\n                       and then Ekind (Etype (T_Name)) = E_Class_Wide_Type\n                       and then Is_Interface (Etype (T_Name))\n                       and then Is_Task_Interface (Etype (T_Name)))\n          then\n             Resolve (T_Name);\n          else\n-            if Ada_Version >= Ada_05 then\n+            if Ada_Version >= Ada_2005 then\n                Error_Msg_N (\"expect task name or task interface class-wide \"\n                           & \"object for ABORT\", T_Name);\n             else\n@@ -402,7 +402,7 @@ package body Sem_Ch9 is\n       Check_Restriction (Max_Asynchronous_Select_Nesting, N);\n       Check_Restriction (No_Select_Statements, N);\n \n-      if Ada_Version >= Ada_05 then\n+      if Ada_Version >= Ada_2005 then\n          Trigger := Triggering_Statement (Triggering_Alternative (N));\n \n          Analyze (Trigger);\n@@ -448,7 +448,7 @@ package body Sem_Ch9 is\n \n       --  Ada 2005 (AI-345): The trigger may be a dispatching call\n \n-      if Ada_Version >= Ada_05 then\n+      if Ada_Version >= Ada_2005 then\n          Analyze (Trigger);\n          Check_Triggering_Statement (Trigger, N, Is_Disp_Select);\n       end if;\n@@ -1158,7 +1158,7 @@ package body Sem_Ch9 is\n       Set_Stored_Constraint  (T, No_Elist);\n       Push_Scope (T);\n \n-      if Ada_Version >= Ada_05 then\n+      if Ada_Version >= Ada_2005 then\n          Check_Interfaces (N, T);\n       end if;\n \n@@ -1966,7 +1966,7 @@ package body Sem_Ch9 is\n       Set_Stored_Constraint  (T, No_Elist);\n       Push_Scope (T);\n \n-      if Ada_Version >= Ada_05 then\n+      if Ada_Version >= Ada_2005 then\n          Check_Interfaces (N, T);\n       end if;\n \n@@ -2072,7 +2072,7 @@ package body Sem_Ch9 is\n \n       --  Ada 2005 (AI-345): The trigger may be a dispatching call\n \n-      if Ada_Version >= Ada_05 then\n+      if Ada_Version >= Ada_2005 then\n          Analyze (Trigger);\n          Check_Triggering_Statement (Trigger, N, Is_Disp_Select);\n       end if;\n@@ -2114,7 +2114,7 @@ package body Sem_Ch9 is\n         and then Nkind (Trigger) not in N_Delay_Statement\n         and then Nkind (Trigger) /= N_Entry_Call_Statement\n       then\n-         if Ada_Version < Ada_05 then\n+         if Ada_Version < Ada_2005 then\n             Error_Msg_N\n              (\"triggering statement must be delay or entry call\", Trigger);\n \n@@ -2400,7 +2400,7 @@ package body Sem_Ch9 is\n       --  It is not possible to have a dispatching trigger if we are not in\n       --  Ada 2005 mode.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Nkind (Trigger) = N_Procedure_Call_Statement\n         and then Present (Parameter_Associations (Trigger))\n       then"}, {"sha": "bd51df435dab83ab4d29c54a1718f700a04bc414", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -228,7 +228,7 @@ package body Sem_Disp is\n                   --  In Ada 2005, access parameters can have defaults\n \n                   if Ekind (Etype (Formal)) = E_Anonymous_Access_Type\n-                    and then Ada_Version < Ada_05\n+                    and then Ada_Version < Ada_2005\n                   then\n                      Error_Msg_N\n                        (\"default not allowed for controlling access parameter\",\n@@ -756,7 +756,7 @@ package body Sem_Disp is\n       --  Required because primitives of concurrent types are be attached\n       --  to the corresponding record (not to the concurrent type).\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Present (Tagged_Type)\n         and then Is_Concurrent_Type (Tagged_Type)\n         and then Present (Corresponding_Record_Type (Tagged_Type))\n@@ -1809,7 +1809,7 @@ package body Sem_Disp is\n       --  is also tag-indeterminate.\n \n       elsif Nkind (Orig_Node) = N_Explicit_Dereference\n-        and then Ada_Version >= Ada_05\n+        and then Ada_Version >= Ada_2005\n       then\n          return Is_Tag_Indeterminate (Prefix (Orig_Node));\n \n@@ -1876,7 +1876,7 @@ package body Sem_Disp is\n          Replace_Elmt (Elmt, New_Op);\n       end if;\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Has_Interfaces (Tagged_Type)\n       then\n          --  Ada 2005 (AI-251): Update the attribute alias of all the aliased"}, {"sha": "ee613c7d1bce7069512f0c6e9664351fcf1015bb", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -749,7 +749,7 @@ package body Sem_Prag is\n \n       procedure Ada_2012_Pragma is\n       begin\n-         if Ada_Version <= Ada_05 then\n+         if Ada_Version <= Ada_2005 then\n             Check_Restriction (No_Implementation_Pragmas, N);\n          end if;\n       end Ada_2012_Pragma;\n@@ -5412,7 +5412,7 @@ package body Sem_Prag is\n             --  with Ada 83 or Ada 95, so we must check if we are in Ada 2005\n             --  or Ada 2012 mode.\n \n-            if Ada_Version >= Ada_05 then\n+            if Ada_Version >= Ada_2005 then\n                Check_Valid_Configuration_Pragma;\n             end if;\n \n@@ -5443,7 +5443,7 @@ package body Sem_Prag is\n             --  However, we really cannot tolerate mixing Ada 2005 with Ada 83\n             --  or Ada 95, so we must check if we are in Ada 2005 mode.\n \n-            if Ada_Version >= Ada_05 then\n+            if Ada_Version >= Ada_2005 then\n                Check_Valid_Configuration_Pragma;\n             end if;\n \n@@ -5494,8 +5494,8 @@ package body Sem_Prag is\n \n                --  Now set Ada 2005 mode\n \n-               Ada_Version := Ada_05;\n-               Ada_Version_Explicit := Ada_05;\n+               Ada_Version := Ada_2005;\n+               Ada_Version_Explicit := Ada_2005;\n             end if;\n          end;\n \n@@ -10091,7 +10091,7 @@ package body Sem_Prag is\n                              (\"only allowed argument for pragma% is %\", Argx);\n                         end if;\n \n-                        if Ada_Version_Explicit < Ada_05\n+                        if Ada_Version_Explicit < Ada_2005\n                           or else not Warn_On_Ada_2005_Compatibility\n                         then\n                            Active := False;\n@@ -10687,7 +10687,7 @@ package body Sem_Prag is\n             --  set to Ada_2012 in a predefined unit), we need to know the\n             --  explicit version set to know if this pragma is active.\n \n-            if Ada_Version_Explicit >= Ada_05 then\n+            if Ada_Version_Explicit >= Ada_2005 then\n                Ent := Find_Lib_Unit_Name;\n                Set_Is_Preelaborated (Ent);\n                Set_Suppress_Elaboration_Warnings (Ent);\n@@ -11187,7 +11187,7 @@ package body Sem_Prag is\n             --  set to Ada_2012 in a predefined unit), we need to know the\n             --  explicit version set to know if this pragma is active.\n \n-            if Ada_Version_Explicit >= Ada_05 then\n+            if Ada_Version_Explicit >= Ada_2005 then\n                Ent := Find_Lib_Unit_Name;\n                Set_Is_Preelaborated (Ent, False);\n                Set_Is_Pure (Ent);"}, {"sha": "c737f24f0a353eab813b5b85f7775a1673f2ea23", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -301,7 +301,7 @@ package body Sem_Res is\n \n          --  Include Wide_Wide_Character in Ada 2005 mode\n \n-         if Ada_Version >= Ada_05 then\n+         if Ada_Version >= Ada_2005 then\n             Error_Msg_N (\"\\\\possible interpretation: Wide_Wide_Character!\", C);\n          end if;\n \n@@ -708,7 +708,7 @@ package body Sem_Res is\n       --  are handled by Analyze_Access_Attribute, Analyze_Assignment,\n       --  Analyze_Object_Renaming, and Freeze_Entity.\n \n-      elsif Ada_Version >= Ada_05\n+      elsif Ada_Version >= Ada_2005\n         and then Is_Entity_Name (Pref)\n         and then Is_Access_Type (Etype (Pref))\n         and then Ekind (Directly_Designated_Type (Etype (Pref))) =\n@@ -1372,7 +1372,7 @@ package body Sem_Res is\n          --  Ada 2005 AI-420: Predefined equality on Universal_Access is\n          --  available.\n \n-         elsif Ada_Version >= Ada_05\n+         elsif Ada_Version >= Ada_2005\n            and then (Op_Name = Name_Op_Eq or else Op_Name = Name_Op_Ne)\n            and then Ekind (Etype (Act1)) = E_Anonymous_Access_Type\n          then\n@@ -2045,7 +2045,7 @@ package body Sem_Res is\n                --  type against which we are resolving is the same as the\n                --  type of the interpretation.\n \n-               if Ada_Version >= Ada_05\n+               if Ada_Version >= Ada_2005\n                  and then It.Typ = Typ\n                  and then Typ /= Universal_Integer\n                  and then Typ /= Universal_Real\n@@ -3351,7 +3351,7 @@ package body Sem_Res is\n                                            (Etype (Expression (A)));\n                         begin\n                            if Comes_From_Source (A)\n-                             and then Ada_Version >= Ada_05\n+                             and then Ada_Version >= Ada_2005\n                              and then\n                                ((Is_Private_Type (Comp_Type)\n                                    and then not Is_Generic_Type (Comp_Type))\n@@ -3676,7 +3676,7 @@ package body Sem_Res is\n \n                --  Ada 2005 (AI-231)\n \n-               if Ada_Version >= Ada_05\n+               if Ada_Version >= Ada_2005\n                  and then Is_Access_Type (F_Typ)\n                  and then Can_Never_Be_Null (F_Typ)\n                  and then Known_Null (A)\n@@ -4259,7 +4259,7 @@ package body Sem_Res is\n       --  the case of an initialized allocator with a class-wide argument (see\n       --  Expand_Allocator_Expression).\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Is_Class_Wide_Type (Designated_Type (Typ))\n       then\n          declare\n@@ -5047,7 +5047,7 @@ package body Sem_Res is\n         and then Nkind (N) /= N_Entry_Call_Statement\n         and then Entry_Call_Statement (Parent (N)) = N\n       then\n-         if Ada_Version < Ada_05 then\n+         if Ada_Version < Ada_2005 then\n             Error_Msg_N (\"entry call required in select statement\", N);\n \n          --  Ada 2005 (AI-345): If a procedure_call_statement is used\n@@ -7140,7 +7140,7 @@ package body Sem_Res is\n       --  In this case we have nothing else to do. The membership test will be\n       --  done at run time.\n \n-      elsif Ada_Version >= Ada_05\n+      elsif Ada_Version >= Ada_2005\n         and then Is_Class_Wide_Type (Etype (L))\n         and then Is_Interface (Etype (L))\n         and then Is_Class_Wide_Type (Etype (R))\n@@ -7196,7 +7196,7 @@ package body Sem_Res is\n \n       --  Ada 2005 (AI-231): Remove restriction\n \n-      if Ada_Version < Ada_05\n+      if Ada_Version < Ada_2005\n         and then not Debug_Flag_J\n         and then Ekind (Typ) = E_Anonymous_Access_Type\n         and then Comes_From_Source (N)\n@@ -7221,7 +7221,7 @@ package body Sem_Res is\n       --  Ada 2005 (AI-231): Generate the null-excluding check in case of\n       --  assignment to a null-excluding object\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Can_Never_Be_Null (Typ)\n         and then Nkind (Parent (N)) = N_Assignment_Statement\n       then\n@@ -8903,7 +8903,7 @@ package body Sem_Res is\n       --  No need to perform any interface conversion if the type of the\n       --  expression coincides with the target type.\n \n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Expander_Active\n         and then Operand_Typ /= Target_Typ\n       then"}, {"sha": "f0821276521fbd87fc6d7b544e9aefa48b3e7fcf", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -230,7 +230,7 @@ package body Sem_Type is\n          --  Find out whether the new entry references interpretations that\n          --  are abstract or disabled by abstract operators.\n \n-         if Ada_Version >= Ada_05 then\n+         if Ada_Version >= Ada_2005 then\n             if Nkind (N) in N_Binary_Op then\n                Abstr_Op := Binary_Op_Interp_Has_Abstract_Op (N, Name);\n             elsif Nkind (N) = N_Function_Call then\n@@ -817,7 +817,7 @@ package body Sem_Type is\n       --  Ada 2005 (AI-345): A class-wide abstract interface type covers a\n       --  task_type or protected_type that implements the interface.\n \n-      elsif Ada_Version >= Ada_05\n+      elsif Ada_Version >= Ada_2005\n         and then Is_Class_Wide_Type (T1)\n         and then Is_Interface (Etype (T1))\n         and then Is_Concurrent_Type (T2)\n@@ -830,7 +830,7 @@ package body Sem_Type is\n       --  Ada 2005 (AI-251): A class-wide abstract interface type T1 covers an\n       --  object T2 implementing T1\n \n-      elsif Ada_Version >= Ada_05\n+      elsif Ada_Version >= Ada_2005\n         and then Is_Class_Wide_Type (T1)\n         and then Is_Interface (Etype (T1))\n         and then Is_Tagged_Type (T2)\n@@ -1151,7 +1151,7 @@ package body Sem_Type is\n       --        package Instance is new G (Formal     => Actual,\n       --                                   Formal_Obj => Actual_Obj);\n \n-      elsif Ada_Version >= Ada_05\n+      elsif Ada_Version >= Ada_2005\n         and then Ekind (T1) = E_Anonymous_Access_Type\n         and then Ekind (T2) = E_Anonymous_Access_Type\n         and then Is_Generic_Type (Directly_Designated_Type (T1))\n@@ -1297,7 +1297,7 @@ package body Sem_Type is\n \n          begin\n             if Nkind (N) not in N_Op\n-              or else Ada_Version < Ada_05\n+              or else Ada_Version < Ada_2005\n               or else not Is_Overloaded (N)\n               or else No (Universal_Interpretation (N))\n             then\n@@ -1537,7 +1537,7 @@ package body Sem_Type is\n       --  operating in an earlier mode, in which case we discard the Ada\n       --  2005/2012 entity, so that we get proper Ada 95 overload resolution.\n \n-      if Ada_Version < Ada_05 then\n+      if Ada_Version < Ada_2005 then\n          if Is_Ada_2005_Only (Nam1) or else Is_Ada_2012_Only (Nam1) then\n             return It2;\n          elsif Is_Ada_2005_Only (Nam2) or else Is_Ada_2012_Only (Nam1) then\n@@ -1549,7 +1549,7 @@ package body Sem_Type is\n       --  operating in Ada 2005 mode, in which case we discard the Ada 2012\n       --  entity, so that we get proper Ada 2005 overload resolution.\n \n-      if Ada_Version = Ada_05 then\n+      if Ada_Version = Ada_2005 then\n          if Is_Ada_2012_Only (Nam1) then\n             return It2;\n          elsif Is_Ada_2012_Only (Nam2) then\n@@ -1871,7 +1871,7 @@ package body Sem_Type is\n             elsif (Chars (Nam1) = Name_Op_Eq\n                      or else\n                    Chars (Nam1) = Name_Op_Ne)\n-              and then Ada_Version >= Ada_05\n+              and then Ada_Version >= Ada_2005\n               and then Etype (User_Subp) = Standard_Boolean\n             then\n                declare\n@@ -2017,7 +2017,7 @@ package body Sem_Type is\n       --  P is convertible to \"access Integer\" by 4.6 (24.11-24.15), but there\n       --  is no rule in 4.6 that allows \"access Integer\" to be converted to P.\n \n-      elsif Ada_Version >= Ada_05\n+      elsif Ada_Version >= Ada_2005\n         and then\n           (Ekind (Etype (L)) = E_Anonymous_Access_Type\n              or else\n@@ -2027,7 +2027,7 @@ package body Sem_Type is\n       then\n          return Etype (L);\n \n-      elsif Ada_Version >= Ada_05\n+      elsif Ada_Version >= Ada_2005\n         and then\n           (Ekind (Etype (R)) = E_Anonymous_Access_Type\n             or else Ekind (Etype (R)) = E_Anonymous_Access_Subprogram_Type)"}, {"sha": "ff7c4d7888cd380301d383aed3db834c9f7bd2e9", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -6058,14 +6058,14 @@ package body Sem_Util is\n             --  (despite the fact that 3.10.2(26/2) and 8.5.1(5/2) are\n             --  semantic rules -- these rules are acknowledged to need fixing).\n \n-            if Ada_Version < Ada_05 then\n+            if Ada_Version < Ada_2005 then\n                if Is_Access_Type (Prefix_Type)\n                  or else Nkind (P) = N_Explicit_Dereference\n                then\n                   return False;\n                end if;\n \n-            elsif Ada_Version >= Ada_05 then\n+            elsif Ada_Version >= Ada_2005 then\n                if Is_Access_Type (Prefix_Type) then\n \n                   --  If the access type is pool-specific, and there is no\n@@ -6105,7 +6105,7 @@ package body Sem_Util is\n \n               and then (Is_Declared_Within_Variant (Comp)\n                           or else Has_Discriminant_Dependent_Constraint (Comp))\n-              and then (not P_Aliased or else Ada_Version >= Ada_05)\n+              and then (not P_Aliased or else Ada_Version >= Ada_2005)\n             then\n                return True;\n \n@@ -6934,7 +6934,7 @@ package body Sem_Util is\n       --  because they denote entities that are not necessarily visible.\n       --  Neither of them can apply to a protected type.\n \n-      return Ada_Version >= Ada_05\n+      return Ada_Version >= Ada_2005\n         and then Is_Entity_Name (N)\n         and then Present (Entity (N))\n         and then Is_Protected_Type (Entity (N))\n@@ -8019,7 +8019,7 @@ package body Sem_Util is\n       Formal : Entity_Id;\n \n    begin\n-      if Ada_Version >= Ada_05\n+      if Ada_Version >= Ada_2005\n         and then Present (First_Formal (E))\n       then\n          Formal := Next_Formal (First_Formal (E));\n@@ -9650,7 +9650,7 @@ package body Sem_Util is\n          --  version of the code causes regressions in several tests that are\n          --  compiled with -gnat95. ???)\n \n-         if Ada_Version < Ada_05 then\n+         if Ada_Version < Ada_2005 then\n             if Is_Entity_Name (Name (Obj)) then\n                return Subprogram_Access_Level (Entity (Name (Obj)));\n             else"}, {"sha": "164b11d35480095035944ddd58048b456e21134f", "filename": "gcc/ada/snames.adb-tmpl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsnames.adb-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fsnames.adb-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb-tmpl?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -368,7 +368,7 @@ package body Snames is\n       return Get_Name_Table_Byte (N) /= 0\n         and then (Ada_Version >= Ada_95\n                   or else N not in Ada_95_Reserved_Words)\n-        and then (Ada_Version >= Ada_05\n+        and then (Ada_Version >= Ada_2005\n                   or else N not in Ada_2005_Reserved_Words);\n    end Is_Keyword_Name;\n "}, {"sha": "ba5c9eba4be3b43f266611e1fd4646031f076aaa", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -1058,7 +1058,7 @@ package body Switch.C is\n                   Bad_Switch (\"-gnat0\" & Switch_Chars (Ptr .. Max));\n                else\n                   Ptr := Ptr + 1;\n-                  Ada_Version := Ada_05;\n+                  Ada_Version := Ada_2005;\n                   Ada_Version_Explicit := Ada_Version;\n                end if;\n \n@@ -1086,7 +1086,7 @@ package body Switch.C is\n                   Bad_Switch (\"-gnat\" & Switch_Chars (Ptr .. Max));\n \n                elsif Switch_Chars (Ptr .. Ptr + 3) = \"2005\" then\n-                  Ada_Version := Ada_05;\n+                  Ada_Version := Ada_2005;\n \n                elsif Switch_Chars (Ptr .. Ptr + 3) = \"2012\" then\n                   Ada_Version := Ada_2012;"}, {"sha": "2e56cceb8788d2fc59c17ed6b2339da0190f00cb", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "patch": "@@ -598,7 +598,7 @@ begin\n \n    Write_Switch_Char (\"05\");\n \n-   if Ada_Version_Default = Ada_05 then\n+   if Ada_Version_Default = Ada_2005 then\n       Write_Line (\"Ada 2005 mode (default)\");\n    else\n       Write_Line (\"Enforce Ada 2005 restrictions\");"}]}