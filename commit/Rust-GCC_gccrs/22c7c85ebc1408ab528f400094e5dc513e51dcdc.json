{"sha": "22c7c85ebc1408ab528f400094e5dc513e51dcdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJjN2M4NWViYzE0MDhhYjUyOGY0MDAwOTRlNWRjNTEzZTUxZGNkYw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2003-06-25T22:28:27Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2003-06-25T22:28:27Z"}, "message": "extend.texi: Document new builtin functions for Intel Prescott New Intrunctions.\n\n2003-06-25  H.J. Lu <hongjiu.lu@intel.com>\n\n\t* doc/extend.texi: Document new builtin functions for Intel\n\tPrescott New Intrunctions.\n\n\t* doc/invoke.texi: Document new command-line options, -mpni and\n\t-mno-pni, for Intel Prescott New Intrunctions.\n\n\t* config.gcc (extra_headers): Add pmmintrin.h for i[34567]86-*-*.\n\n\t* config/i386/i386.c (override_options): Turn on MASK_SSE2\n\tfor -mpni. Turn on MASK_SSE for -msse2.\n\t(bdesc_2arg): Add PNI builtins with 2 args.\n\t(bdesc_1arg): Add PNI builtins with 1 arg.\n\t(ix86_init_mmx_sse_builtins): Handle PNI builtins.\n\t(ix86_expand_builtin): Likewise.\n\n\t* config/i386/i386.h (MASK_3DNOW, MASK_3DNOW_A,\n\tMASK_128BIT_LONG_DOUBLE, MASK_64BIT, MASK_MS_BITFIELD_LAYOUT,\n\tMASK_TLS_DIRECT_SEG_REFS): Renumbered.\n\t(TARGET_PNI): New.\n\t(TARGET_SWITCHES): Don't enable MASK_SSE for -msse2 here. Add\n\t-mpni and -mno-pni.\n\t(TARGET_CPU_CPP_BUILTINS): Defined __PNI__ for PNI.\n\t(ix86_builtins): Add PNI builtins.\n\t(config/i386/i386.md): Add PNI patterns.\n\n\t* config/i386/pmmintrin.h: New file.\n\nFrom-SVN: r68502", "tree": {"sha": "76adad37d41c6f38aa36534443272c96e8797b5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76adad37d41c6f38aa36534443272c96e8797b5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22c7c85ebc1408ab528f400094e5dc513e51dcdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22c7c85ebc1408ab528f400094e5dc513e51dcdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22c7c85ebc1408ab528f400094e5dc513e51dcdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22c7c85ebc1408ab528f400094e5dc513e51dcdc/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f8b3eb0cc48db3abe67b3988e4d3297ee499d32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8b3eb0cc48db3abe67b3988e4d3297ee499d32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f8b3eb0cc48db3abe67b3988e4d3297ee499d32"}], "stats": {"total": 457, "additions": 447, "deletions": 10}, "files": [{"sha": "2c57303e3037783d15c82357f20c52b11349e5b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c7c85ebc1408ab528f400094e5dc513e51dcdc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c7c85ebc1408ab528f400094e5dc513e51dcdc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22c7c85ebc1408ab528f400094e5dc513e51dcdc", "patch": "@@ -1,3 +1,32 @@\n+2003-06-25  H.J. Lu <hongjiu.lu@intel.com>\n+\n+\t* doc/extend.texi: Document new builtin functions for Intel\n+\tPrescott New Intrunctions.\n+\n+\t* doc/invoke.texi: Document new command-line options, -mpni and\n+\t-mno-pni, for Intel Prescott New Intrunctions.\n+\n+\t* config.gcc (extra_headers): Add pmmintrin.h for i[34567]86-*-*.\n+\n+\t* config/i386/i386.c (override_options): Turn on MASK_SSE2\n+\tfor -mpni. Turn on MASK_SSE for -msse2.\n+\t(bdesc_2arg): Add PNI builtins with 2 args.\n+\t(bdesc_1arg): Add PNI builtins with 1 arg.\n+\t(ix86_init_mmx_sse_builtins): Handle PNI builtins.\n+\t(ix86_expand_builtin): Likewise.\n+\n+\t* config/i386/i386.h (MASK_3DNOW, MASK_3DNOW_A,\n+\tMASK_128BIT_LONG_DOUBLE, MASK_64BIT, MASK_MS_BITFIELD_LAYOUT,\n+\tMASK_TLS_DIRECT_SEG_REFS): Renumbered.\n+\t(TARGET_PNI): New.\n+\t(TARGET_SWITCHES): Don't enable MASK_SSE for -msse2 here. Add\n+\t-mpni and -mno-pni.\n+\t(TARGET_CPU_CPP_BUILTINS): Defined __PNI__ for PNI.\n+\t(ix86_builtins): Add PNI builtins.\n+\t(config/i386/i386.md): Add PNI patterns.\n+\n+\t* config/i386/pmmintrin.h: New file.\n+\n 2003-06-25  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.md (call): Fix the insn lengths."}, {"sha": "8d9c08f99fae3d7622ab5af365896af03888bc1a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 85, "deletions": 2, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c7c85ebc1408ab528f400094e5dc513e51dcdc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c7c85ebc1408ab528f400094e5dc513e51dcdc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=22c7c85ebc1408ab528f400094e5dc513e51dcdc", "patch": "@@ -1373,6 +1373,14 @@ override_options ()\n   if (x86_arch_always_fancy_math_387 & (1 << ix86_arch))\n     target_flags &= ~MASK_NO_FANCY_MATH_387;\n \n+  /* Turn on SSE2 builtins for -mpni.  */\n+  if (TARGET_PNI)\n+    target_flags |= MASK_SSE2;\n+\n+  /* Turn on SSE builtins for -msse2.  */\n+  if (TARGET_SSE2)\n+    target_flags |= MASK_SSE;\n+\n   if (TARGET_64BIT)\n     {\n       if (TARGET_ALIGN_DOUBLE)\n@@ -13058,7 +13066,15 @@ static const struct builtin_description bdesc_2arg[] =\n   { MASK_SSE2, CODE_FOR_cvtsi2sd, 0, IX86_BUILTIN_CVTSI2SD, 0, 0 },\n   { MASK_SSE2 | MASK_64BIT, CODE_FOR_cvtsi2sdq, 0, IX86_BUILTIN_CVTSI642SD, 0, 0 },\n   { MASK_SSE2, CODE_FOR_cvtsd2ss, 0, IX86_BUILTIN_CVTSD2SS, 0, 0 },\n-  { MASK_SSE2, CODE_FOR_cvtss2sd, 0, IX86_BUILTIN_CVTSS2SD, 0, 0 }\n+  { MASK_SSE2, CODE_FOR_cvtss2sd, 0, IX86_BUILTIN_CVTSS2SD, 0, 0 },\n+\n+  /* PNI MMX */\n+  { MASK_PNI, CODE_FOR_addsubv4sf3, \"__builtin_ia32_addsubps\", IX86_BUILTIN_ADDSUBPS, 0, 0 },\n+  { MASK_PNI, CODE_FOR_addsubv2df3, \"__builtin_ia32_addsubpd\", IX86_BUILTIN_ADDSUBPD, 0, 0 },\n+  { MASK_PNI, CODE_FOR_haddv4sf3, \"__builtin_ia32_haddps\", IX86_BUILTIN_HADDPS, 0, 0 },\n+  { MASK_PNI, CODE_FOR_haddv2df3, \"__builtin_ia32_haddpd\", IX86_BUILTIN_HADDPD, 0, 0 },\n+  { MASK_PNI, CODE_FOR_hsubv4sf3, \"__builtin_ia32_hsubps\", IX86_BUILTIN_HSUBPS, 0, 0 },\n+  { MASK_PNI, CODE_FOR_hsubv2df3, \"__builtin_ia32_hsubpd\", IX86_BUILTIN_HSUBPD, 0, 0 }\n };\n \n static const struct builtin_description bdesc_1arg[] =\n@@ -13104,7 +13120,12 @@ static const struct builtin_description bdesc_1arg[] =\n   { MASK_SSE2, CODE_FOR_cvtps2pd, 0, IX86_BUILTIN_CVTPS2PD, 0, 0 },\n   { MASK_SSE2, CODE_FOR_cvttps2dq, 0, IX86_BUILTIN_CVTTPS2DQ, 0, 0 },\n \n-  { MASK_SSE2, CODE_FOR_sse2_movq, 0, IX86_BUILTIN_MOVQ, 0, 0 }\n+  { MASK_SSE2, CODE_FOR_sse2_movq, 0, IX86_BUILTIN_MOVQ, 0, 0 },\n+\n+  /* PNI */\n+  { MASK_PNI, CODE_FOR_movshdup, 0, IX86_BUILTIN_MOVSHDUP, 0, 0 },\n+  { MASK_PNI, CODE_FOR_movsldup, 0, IX86_BUILTIN_MOVSLDUP, 0, 0 },\n+  { MASK_PNI, CODE_FOR_movddup,  0, IX86_BUILTIN_MOVDDUP, 0, 0 }\n };\n \n void\n@@ -13195,6 +13216,13 @@ ix86_init_mmx_sse_builtins ()\n     = build_function_type (void_type_node, void_list_node);\n   tree void_ftype_unsigned\n     = build_function_type_list (void_type_node, unsigned_type_node, NULL_TREE);\n+  tree void_ftype_unsigned_unsigned\n+    = build_function_type_list (void_type_node, unsigned_type_node,\n+\t\t\t\tunsigned_type_node, NULL_TREE);\n+  tree void_ftype_pcvoid_unsigned_unsigned\n+    = build_function_type_list (void_type_node, const_ptr_type_node,\n+\t\t\t\tunsigned_type_node, unsigned_type_node,\n+\t\t\t\tNULL_TREE);\n   tree unsigned_ftype_void\n     = build_function_type (unsigned_type_node, void_list_node);\n   tree di_ftype_void\n@@ -13700,6 +13728,26 @@ ix86_init_mmx_sse_builtins ()\n   def_builtin (MASK_SSE2, \"__builtin_ia32_psradi128\", v4si_ftype_v4si_int, IX86_BUILTIN_PSRADI128);\n \n   def_builtin (MASK_SSE2, \"__builtin_ia32_pmaddwd128\", v4si_ftype_v8hi_v8hi, IX86_BUILTIN_PMADDWD128);\n+\n+  /* Prescott New Instructions.  */\n+  def_builtin (MASK_PNI, \"__builtin_ia32_monitor\",\n+\t       void_ftype_pcvoid_unsigned_unsigned,\n+\t       IX86_BUILTIN_MONITOR);\n+  def_builtin (MASK_PNI, \"__builtin_ia32_mwait\",\n+\t       void_ftype_unsigned_unsigned,\n+\t       IX86_BUILTIN_MWAIT);\n+  def_builtin (MASK_PNI, \"__builtin_ia32_movshdup\",\n+\t       v4sf_ftype_v4sf,\n+\t       IX86_BUILTIN_MOVSHDUP);\n+  def_builtin (MASK_PNI, \"__builtin_ia32_movsldup\",\n+\t       v4sf_ftype_v4sf,\n+\t       IX86_BUILTIN_MOVSLDUP);\n+  def_builtin (MASK_PNI, \"__builtin_ia32_lddqu\",\n+\t       v16qi_ftype_pcchar, IX86_BUILTIN_LDDQU);\n+  def_builtin (MASK_PNI, \"__builtin_ia32_loadddup\",\n+\t       v2df_ftype_pcdouble, IX86_BUILTIN_LOADDDUP);\n+  def_builtin (MASK_PNI, \"__builtin_ia32_movddup\",\n+\t       v2df_ftype_v2df, IX86_BUILTIN_MOVDDUP);\n }\n \n /* Errors in the source file can cause expand_expr to return const0_rtx\n@@ -14509,6 +14557,41 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n     case IX86_BUILTIN_STORED:\n       return ix86_expand_store_builtin (CODE_FOR_sse2_stored, arglist);\n \n+    case IX86_BUILTIN_MONITOR:\n+      arg0 = TREE_VALUE (arglist);\n+      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+      arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+      op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+      if (!REG_P (op0))\n+\top0 = copy_to_mode_reg (SImode, op0);\n+      if (!REG_P (op1))\n+\top1 = copy_to_mode_reg (SImode, op1);\n+      if (!REG_P (op2))\n+\top2 = copy_to_mode_reg (SImode, op2);\n+      emit_insn (gen_monitor (op0, op1, op2));\n+      return 0;\n+\n+    case IX86_BUILTIN_MWAIT:\n+      arg0 = TREE_VALUE (arglist);\n+      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+      if (!REG_P (op0))\n+\top0 = copy_to_mode_reg (SImode, op0);\n+      if (!REG_P (op1))\n+\top1 = copy_to_mode_reg (SImode, op1);\n+      emit_insn (gen_mwait (op0, op1));\n+      return 0;\n+\n+    case IX86_BUILTIN_LOADDDUP:\n+      return ix86_expand_unop_builtin (CODE_FOR_loadddup, arglist, target, 1);\n+\n+    case IX86_BUILTIN_LDDQU:\n+      return ix86_expand_unop_builtin (CODE_FOR_lddqu, arglist, target,\n+\t\t\t\t       1);\n+\n     default:\n       break;\n     }"}, {"sha": "5f390f0e1552676cf1ec3319d154aa11ed0f8c63", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c7c85ebc1408ab528f400094e5dc513e51dcdc/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c7c85ebc1408ab528f400094e5dc513e51dcdc/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=22c7c85ebc1408ab528f400094e5dc513e51dcdc", "patch": "@@ -121,12 +121,13 @@ extern int target_flags;\n #define MASK_MMX\t\t0x00002000\t/* Support MMX regs/builtins */\n #define MASK_SSE\t\t0x00004000\t/* Support SSE regs/builtins */\n #define MASK_SSE2\t\t0x00008000\t/* Support SSE2 regs/builtins */\n-#define MASK_3DNOW\t\t0x00010000\t/* Support 3Dnow builtins */\n-#define MASK_3DNOW_A\t\t0x00020000\t/* Support Athlon 3Dnow builtins */\n-#define MASK_128BIT_LONG_DOUBLE 0x00040000\t/* long double size is 128bit */\n-#define MASK_64BIT\t\t0x00080000\t/* Produce 64bit code */\n-#define MASK_MS_BITFIELD_LAYOUT 0x00100000\t/* Use native (MS) bitfield layout */\n-#define MASK_TLS_DIRECT_SEG_REFS 0x00200000\t/* Avoid adding %gs:0  */\n+#define MASK_PNI\t\t0x00010000\t/* Support PNI regs/builtins */\n+#define MASK_3DNOW\t\t0x00020000\t/* Support 3Dnow builtins */\n+#define MASK_3DNOW_A\t\t0x00040000\t/* Support Athlon 3Dnow builtins */\n+#define MASK_128BIT_LONG_DOUBLE 0x00080000\t/* long double size is 128bit */\n+#define MASK_64BIT\t\t0x00100000\t/* Produce 64bit code */\n+#define MASK_MS_BITFIELD_LAYOUT 0x00200000\t/* Use native (MS) bitfield layout */\n+#define MASK_TLS_DIRECT_SEG_REFS 0x00400000\t/* Avoid adding %gs:0  */\n \n /* Unused:\t\t\t0x03e0000\t*/\n \n@@ -302,6 +303,7 @@ extern int x86_prefetch_sse;\n \n #define TARGET_SSE ((target_flags & MASK_SSE) != 0)\n #define TARGET_SSE2 ((target_flags & MASK_SSE2) != 0)\n+#define TARGET_PNI ((target_flags & MASK_PNI) != 0)\n #define TARGET_SSE_MATH ((ix86_fpmath & FPMATH_SSE) != 0)\n #define TARGET_MIX_SSE_I387 ((ix86_fpmath & FPMATH_SSE) \\\n \t\t\t     && (ix86_fpmath & FPMATH_387))\n@@ -393,10 +395,14 @@ extern int x86_prefetch_sse;\n     N_(\"Support MMX and SSE built-in functions and code generation\") },\t      \\\n   { \"no-sse\",\t\t\t -MASK_SSE,\t\t\t\t      \\\n     N_(\"Do not support MMX and SSE built-in functions and code generation\") },\\\n-  { \"sse2\",\t\t\t (MASK_SSE2|MASK_SSE),\t\t\t      \\\n+  { \"sse2\",\t\t\t MASK_SSE2,\t\t\t\t      \\\n     N_(\"Support MMX, SSE and SSE2 built-in functions and code generation\") }, \\\n   { \"no-sse2\",\t\t\t -MASK_SSE2,\t\t\t\t      \\\n     N_(\"Do not support MMX, SSE and SSE2 built-in functions and code generation\") },    \\\n+  { \"pni\",\t\t\t MASK_PNI,\t\t\t\t      \\\n+    N_(\"Support MMX, SSE, SSE2 and PNI built-in functions and code generation\") },\\\n+  { \"no-pni\",\t\t\t -MASK_PNI,\t\t\t\t      \\\n+    N_(\"Do not support MMX, SSE, SSE2 and PNI built-in functions and code generation\") },\\\n   { \"128bit-long-double\",\t MASK_128BIT_LONG_DOUBLE,\t\t      \\\n     N_(\"sizeof(long double) is 16\") },\t\t\t\t\t      \\\n   { \"96bit-long-double\",\t-MASK_128BIT_LONG_DOUBLE,\t\t      \\\n@@ -611,6 +617,8 @@ extern int x86_prefetch_sse;\n \tbuiltin_define (\"__SSE__\");\t\t\t\t\\\n       if (TARGET_SSE2)\t\t\t\t\t\t\\\n \tbuiltin_define (\"__SSE2__\");\t\t\t\t\\\n+      if (TARGET_PNI)\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__PNI__\");\t\t\t\t\\\n       if (TARGET_SSE_MATH && TARGET_SSE)\t\t\t\\\n \tbuiltin_define (\"__SSE_MATH__\");\t\t\t\\\n       if (TARGET_SSE_MATH && TARGET_SSE2)\t\t\t\\\n@@ -2516,6 +2524,22 @@ enum ix86_builtins\n   IX86_BUILTIN_MFENCE,\n   IX86_BUILTIN_LFENCE,\n \n+  /* Prescott New Instructions.  */\n+  IX86_BUILTIN_ADDSUBPS,\n+  IX86_BUILTIN_HADDPS,\n+  IX86_BUILTIN_HSUBPS,\n+  IX86_BUILTIN_MOVSHDUP,\n+  IX86_BUILTIN_MOVSLDUP,\n+  IX86_BUILTIN_ADDSUBPD,\n+  IX86_BUILTIN_HADDPD,\n+  IX86_BUILTIN_HSUBPD,\n+  IX86_BUILTIN_LOADDDUP,\n+  IX86_BUILTIN_MOVDDUP,\n+  IX86_BUILTIN_LDDQU,\n+\n+  IX86_BUILTIN_MONITOR,\n+  IX86_BUILTIN_MWAIT,\n+\n   IX86_BUILTIN_MAX\n };\n \f"}, {"sha": "dc4ece8534ad9601de62f8b9e5009e4ce91a1bf3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c7c85ebc1408ab528f400094e5dc513e51dcdc/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c7c85ebc1408ab528f400094e5dc513e51dcdc/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=22c7c85ebc1408ab528f400094e5dc513e51dcdc", "patch": "@@ -109,6 +109,13 @@\n    (UNSPEC_MFENCE\t\t59)\n    (UNSPEC_LFENCE\t\t60)\n    (UNSPEC_PSADBW\t\t61)\n+   (UNSPEC_ADDSUB\t\t71)\n+   (UNSPEC_HADD\t\t\t72)\n+   (UNSPEC_HSUB\t\t\t73)\n+   (UNSPEC_MOVSHDUP\t\t74)\n+   (UNSPEC_MOVSLDUP\t\t75)\n+   (UNSPEC_LDQQU\t\t76)\n+   (UNSPEC_MOVDDUP\t\t77)\n \n    ; x87 Floating point\n    (UNSPEC_FPATAN\t\t65)\n@@ -130,6 +137,8 @@\n    (UNSPECV_FEMMS\t\t46)\n    (UNSPECV_CLFLUSH\t\t57)\n    (UNSPECV_ALIGN\t\t68)\n+   (UNSPECV_MONITOR\t\t69)\n+   (UNSPECV_MWAIT\t\t70)\n   ])\n \n ;; Insns whose names begin with \"x86_\" are emitted by gen_FOO calls\n@@ -23512,3 +23521,129 @@\n   \"lfence\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"memory\" \"unknown\")])\n+\n+;; PNI\n+\n+(define_insn \"mwait\"\n+  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"a\")\n+\t\t     (match_operand:SI 1 \"register_operand\" \"c\")]\n+\t\t    UNSPECV_MWAIT)]\n+  \"TARGET_PNI\"\n+  \"mwait\\t%0, %1\"\n+  [(set_attr \"length\" \"3\")])\n+\n+(define_insn \"monitor\"\n+  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"a\")\n+\t\t     (match_operand:SI 1 \"register_operand\" \"c\")\n+\t\t     (match_operand:SI 2 \"register_operand\" \"d\")]\n+\t\t    UNSPECV_MONITOR)]\n+  \"TARGET_PNI\"\n+  \"monitor\\t%0, %1, %2\"\n+  [(set_attr \"length\" \"3\")])\n+\n+;; PNI arithmetic\n+\n+(define_insn \"addsubv4sf3\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+        (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm\")]\n+\t\t     UNSPEC_ADDSUB))]\n+  \"TARGET_PNI\"\n+  \"addsubps\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_insn \"addsubv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+        (unspec:V2DF [(match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\")]\n+\t\t     UNSPEC_ADDSUB))]\n+  \"TARGET_PNI\"\n+  \"addsubpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"mode\" \"V2DF\")])\n+\n+(define_insn \"haddv4sf3\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+        (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm\")]\n+\t\t     UNSPEC_HADD))]\n+  \"TARGET_PNI\"\n+  \"haddps\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_insn \"haddv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+        (unspec:V2DF [(match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\")]\n+\t\t     UNSPEC_HADD))]\n+  \"TARGET_PNI\"\n+  \"haddpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"mode\" \"V2DF\")])\n+\n+(define_insn \"hsubv4sf3\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+        (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm\")]\n+\t\t     UNSPEC_HSUB))]\n+  \"TARGET_PNI\"\n+  \"hsubps\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_insn \"hsubv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+        (unspec:V2DF [(match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\")]\n+\t\t     UNSPEC_HSUB))]\n+  \"TARGET_PNI\"\n+  \"hsubpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"mode\" \"V2DF\")])\n+\n+(define_insn \"movshdup\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+        (unspec:V4SF\n+\t [(match_operand:V4SF 1 \"nonimmediate_operand\" \"xm\")] UNSPEC_MOVSHDUP))]\n+  \"TARGET_PNI\"\n+  \"movshdup\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_insn \"movsldup\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+        (unspec:V4SF\n+\t [(match_operand:V4SF 1 \"nonimmediate_operand\" \"xm\")] UNSPEC_MOVSLDUP))]\n+  \"TARGET_PNI\"\n+  \"movsldup\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_insn \"lddqu\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"memory_operand\" \"m\")]\n+\t\t       UNSPEC_LDQQU))]\n+  \"TARGET_PNI\"\n+  \"lddqu\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"loadddup\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(vec_duplicate:V2DF (match_operand:DF 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_PNI\"\n+  \"movddup\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"mode\" \"DF\")])\n+\n+(define_insn \"movddup\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(vec_duplicate:V2DF\n+\t (vec_select:DF (match_operand:V2DF 1 \"register_operand\" \"x\")\n+\t\t\t(parallel [(const_int 0)]))))]\n+  \"TARGET_PNI\"\n+  \"movddup\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"mode\" \"DF\")])"}, {"sha": "5649c00d6730f6e403d9f828a77535c0b659d829", "filename": "gcc/config/i386/pmmintrin.h", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c7c85ebc1408ab528f400094e5dc513e51dcdc/gcc%2Fconfig%2Fi386%2Fpmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c7c85ebc1408ab528f400094e5dc513e51dcdc/gcc%2Fconfig%2Fi386%2Fpmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpmmintrin.h?ref=22c7c85ebc1408ab528f400094e5dc513e51dcdc", "patch": "@@ -0,0 +1,132 @@\n+/* Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+   This file is part of GNU CC.\n+\n+   GNU CC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GNU CC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GNU CC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you include this header file into source\n+   files compiled by GCC, this header file does not by itself cause\n+   the resulting executable to be covered by the GNU General Public\n+   License.  This exception does not however invalidate any other\n+   reasons why the executable file might be covered by the GNU General\n+   Public License.  */\n+\n+/* Implemented from the specification included in the Intel C++ Compiler\n+   User Guide and Reference, version 8.0.  */\n+\n+#ifndef _PMMINTRIN_H_INCLUDED\n+#define _PMMINTRIN_H_INCLUDED\n+\n+#ifdef __PNI__\n+#include <xmmintrin.h>\n+#include <emmintrin.h>\n+\n+/* Additional bits in the MXCSR.  */\n+#define _MM_DENORMALS_ZERO_MASK\t\t0x0040\n+#define _MM_DENORMALS_ZERO_ON\t\t0x0040\n+#define _MM_DENORMALS_ZERO_OFF\t\t0x0000\n+\n+#define _MM_SET_DENORMALS_ZERO_MODE(mode) \\\n+  _mm_setcsr ((_mm_getcsr () & ~_MM_DENORMALS_ZERO_MASK) | (mode))\n+#define _MM_GET_DENORMALS_ZERO_MODE() \\\n+  (_mm_getcsr() & _MM_DENORMALS_ZERO_MASK)\n+\n+static __inline __m128\n+_mm_addsub_ps (__m128 __X, __m128 __Y)\n+{\n+  return (__m128) __builtin_ia32_addsubps ((__v4sf)__X, (__v4sf)__Y);\n+}\n+\n+static __inline __m128\n+_mm_hadd_ps (__m128 __X, __m128 __Y)\n+{\n+  return (__m128) __builtin_ia32_haddps ((__v4sf)__X, (__v4sf)__Y);\n+}\n+\n+static __inline __m128\n+_mm_hsub_ps (__m128 __X, __m128 __Y)\n+{\n+  return (__m128) __builtin_ia32_hsubps ((__v4sf)__X, (__v4sf)__Y);\n+}\n+\n+static __inline __m128\n+_mm_movehdup_ps (__m128 __X)\n+{\n+  return (__m128) __builtin_ia32_movshdup ((__v4sf)__X);\n+}\n+\n+static __inline __m128\n+_mm_moveldup_ps (__m128 __X)\n+{\n+  return (__m128) __builtin_ia32_movsldup ((__v4sf)__X);\n+}\n+\n+static __inline __m128d\n+_mm_addsub_pd (__m128d __X, __m128d __Y)\n+{\n+  return (__m128d) __builtin_ia32_addsubpd ((__v2df)__X, (__v2df)__Y);\n+}\n+\n+static __inline __m128d\n+_mm_hadd_pd (__m128d __X, __m128d __Y)\n+{\n+  return (__m128d) __builtin_ia32_haddpd ((__v2df)__X, (__v2df)__Y);\n+}\n+\n+static __inline __m128d\n+_mm_hsub_pd (__m128d __X, __m128d __Y)\n+{\n+  return (__m128d) __builtin_ia32_hsubpd ((__v2df)__X, (__v2df)__Y);\n+}\n+\n+static __inline __m128d\n+_mm_loaddup_pd (double const *__P)\n+{\n+  return (__m128d) __builtin_ia32_loadddup (__P);\n+}\n+\n+static __inline __m128d\n+_mm_movedup_pd (__m128d __X)\n+{\n+  return (__m128d) __builtin_ia32_movddup ((__v2df)__X);\n+}\n+\n+static __inline __m128i\n+_mm_lddqu_si128 (__m128i const *__P)\n+{\n+  return (__m128i) __builtin_ia32_lddqu ((char const *)__P);\n+}\n+\n+#if 0\n+static __inline void\n+_mm_monitor (void const * __P, unsigned int __E, unsigned int __H)\n+{\n+  __builtin_ia32_monitor (__P, __E, __H);\n+}\n+\n+static __inline void\n+_mm_mwait (unsigned int __E, unsigned int __H)\n+{\n+  __builtin_ia32_mwait (__E, __H);\n+}\n+#else\n+#define _mm_monitor(P, E, H)\t__builtin_ia32_monitor ((P), (E), (H))\n+#define _mm_mwait(E, H)\t\t__builtin_ia32_mwait ((E), (H))\n+#endif\n+\n+#endif /* __PNI__ */\n+\n+#endif /* _PMMINTRIN_H_INCLUDED */"}, {"sha": "e7e87126525ae32f812ccde0f8452a7e13d7117c", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c7c85ebc1408ab528f400094e5dc513e51dcdc/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c7c85ebc1408ab528f400094e5dc513e51dcdc/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=22c7c85ebc1408ab528f400094e5dc513e51dcdc", "patch": "@@ -5592,6 +5592,31 @@ Generates the @code{movhps} machine instruction as a store to memory.\n Generates the @code{movlps} machine instruction as a store to memory.\n @end table\n \n+The following built-in functions are available when @option{-mpni} is used.\n+All of them generate the machine instruction that is part of the name.\n+\n+@example\n+v2df __builtin_ia32_addsubpd (v2df, v2df)\n+v2df __builtin_ia32_addsubps (v2df, v2df)\n+v2df __builtin_ia32_haddpd (v2df, v2df)\n+v2df __builtin_ia32_haddps (v2df, v2df)\n+v2df __builtin_ia32_hsubpd (v2df, v2df)\n+v2df __builtin_ia32_hsubps (v2df, v2df)\n+v16qi __builtin_ia32_lddqu (char const *)\n+void __builtin_ia32_monitor (void *, unsigned int, unsigned int)\n+v2df __builtin_ia32_movddup (v2df)\n+v4sf __builtin_ia32_movshdup (v4sf)\n+v4sf __builtin_ia32_movsldup (v4sf)\n+void __builtin_ia32_mwait (unsigned int, unsigned int)\n+@end example\n+\n+The following built-in functions are available when @option{-mpni} is used.\n+\n+@table @code\n+@item v2df __builtin_ia32_loadddup (double const *)\n+Generates the @code{movddup} machine instruction as a load from memory.\n+@end table\n+\n The following built-in functions are available when @option{-m3dnow} is used.\n All of them generate the machine instruction that is part of the name.\n "}, {"sha": "d4ecfa2d898a277ea87f9a8d4e2d5c3df4a35670", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c7c85ebc1408ab528f400094e5dc513e51dcdc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c7c85ebc1408ab528f400094e5dc513e51dcdc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=22c7c85ebc1408ab528f400094e5dc513e51dcdc", "patch": "@@ -487,7 +487,7 @@ in the following sections.\n -mno-fp-ret-in-387  -msoft-float  -msvr3-shlib @gol\n -mno-wide-multiply  -mrtd  -malign-double @gol\n -mpreferred-stack-boundary=@var{num} @gol\n--mmmx  -msse  -msse2  -m3dnow @gol\n+-mmmx  -msse  -msse2 -mpni -m3dnow @gol\n -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n -m96bit-long-double  -mregparm=@var{num}  -momit-leaf-frame-pointer @gol\n@@ -8217,6 +8217,13 @@ code that expects temporaries to be 80bit.\n \n This is the default choice for x86-64 compiler.\n \n+@item pni\n+Use all SSE extensions enabled by @option{-msse2} as well as the new\n+SSE extensions in Prescott New Intrunctions. @option{-mpni} also\n+enables 2 builtin functions, @code{__builtin_ia32_monitor} and\n+@code{__builtin_ia32_mwait}, for new intrunctions @code{monitor} and\n+@code{mwait}. \n+\n @item sse,387\n Attempt to utilize both instruction sets at once.  This effectively double the\n amount of available registers and on chips with separate execution units for\n@@ -8398,6 +8405,8 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mno-sse\n @item -msse2\n @itemx -mno-sse2\n+@item -mpni\n+@itemx -mno-pni\n @item -m3dnow\n @itemx -mno-3dnow\n @opindex mmmx"}]}