{"sha": "41e8b1d7354eda1000077456decb2d146501eac7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFlOGIxZDczNTRlZGExMDAwMDc3NDU2ZGVjYjJkMTQ2NTAxZWFjNw==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-05-15T22:44:22Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-05-15T22:44:22Z"}, "message": "cpplex.c (parse_string2): Update comment.\n\n\t* cpplex.c (parse_string2): Update comment.\n\t(cpp_lex_line): No special assertion treatment for '('.\n\t* cpplib.c (DIRECTIVE_TABLE): Remove SYNTAX_ASSERT.\n\t* cpplib.h (SYNTAX_ASSERT): Remove.\n\nFrom-SVN: r33915", "tree": {"sha": "fd225ba4e2690969afebfd05e915de6365aa5cc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd225ba4e2690969afebfd05e915de6365aa5cc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41e8b1d7354eda1000077456decb2d146501eac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e8b1d7354eda1000077456decb2d146501eac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e8b1d7354eda1000077456decb2d146501eac7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e8b1d7354eda1000077456decb2d146501eac7/comments", "author": null, "committer": null, "parents": [{"sha": "e4c85816577edeef910cdd45a4405c564beba903", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c85816577edeef910cdd45a4405c564beba903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4c85816577edeef910cdd45a4405c564beba903"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "76b39815318f82e0273eae83a65dcd02dd3f42af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e8b1d7354eda1000077456decb2d146501eac7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e8b1d7354eda1000077456decb2d146501eac7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41e8b1d7354eda1000077456decb2d146501eac7", "patch": "@@ -1,3 +1,10 @@\n+2000-05-16  Neil Booth  <NeilB@earthling.net>\n+\n+\t* cpplex.c (parse_string2): Update comment.\n+\t(cpp_lex_line): No special assertion treatment for '('.\n+\t* cpplib.c (DIRECTIVE_TABLE): Remove SYNTAX_ASSERT.\n+\t* cpplib.h (SYNTAX_ASSERT): Remove.\n+\n Mon May 15 21:45:36 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* jump.c (condjump_p):  Mark as depreached."}, {"sha": "03b3c35de4b05d2e5973303088237b59bce7c3fe", "filename": "gcc/cpplex.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e8b1d7354eda1000077456decb2d146501eac7/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e8b1d7354eda1000077456decb2d146501eac7/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=41e8b1d7354eda1000077456decb2d146501eac7", "patch": "@@ -2643,7 +2643,8 @@ parse_number (pfile, list, name)\n    escaped newlines.\n \n    Can be used for character constants (terminator = '\\''), string\n-   constants ('\"'), angled headers ('>') and assertions (')').  */\n+   constants ('\"') and angled headers ('>').  Multi-line strings are\n+   allowed, except for within directives.  */\n \n static void\n parse_string2 (pfile, list, name, terminator)\n@@ -3185,17 +3186,6 @@ _cpp_lex_line (pfile, list)\n \t  cur_token++;\n \t  break;\n \n-\tcase '(':\n-\t  /* Is this the beginning of an assertion string?  */\n-\t  if (list->dir_flags & SYNTAX_ASSERT)\n-\t    {\n-\t      c = ')';\t/* Terminator.  */\n-\t      cur_token->type = CPP_ASSERTION;\n-\t      goto do_parse_string;\n-\t    }\n-\t  PUSH_TOKEN (CPP_OPEN_PAREN);\n-\t  break;\n-\n \tcase '?':\n \t  if (cur + 1 < buffer->rlimit && *cur == '?'\n \t      && trigraph_map[cur[1]] && trigraph_ok (pfile, cur + 1))\n@@ -3261,6 +3251,7 @@ _cpp_lex_line (pfile, list)\n \tcase '!': PUSH_TOKEN (CPP_NOT); break;\n \tcase ',': PUSH_TOKEN (CPP_COMMA); break;\n \tcase ';': PUSH_TOKEN (CPP_SEMICOLON); break;\n+\tcase '(': PUSH_TOKEN (CPP_OPEN_PAREN); break;\n \tcase ')': PUSH_TOKEN (CPP_CLOSE_PAREN); break;\n \n \tcase '$':"}, {"sha": "c4b6aa4ae7724d0ff44cb60ae8932c46c8a43f65", "filename": "gcc/cpplib.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e8b1d7354eda1000077456decb2d146501eac7/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e8b1d7354eda1000077456decb2d146501eac7/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=41e8b1d7354eda1000077456decb2d146501eac7", "patch": "@@ -114,8 +114,8 @@ D(warning,\tT_WARNING,\tEXTENSION)\t\t    /*    22 GNU */ \\\n D(include_next,\tT_INCLUDE_NEXT,\tEXTENSION | SYNTAX_INCLUDE) /*    19 GNU */ \\\n D(ident,\tT_IDENT,\tEXTENSION)\t\t    /*    11 SVR4 */ \\\n D(import,\tT_IMPORT,\tEXTENSION | SYNTAX_INCLUDE) /*     0 ObjC */ \\\n-D(assert,\tT_ASSERT,\tEXTENSION | SYNTAX_ASSERT)  /*     0 SVR4 */ \\\n-D(unassert,\tT_UNASSERT,\tEXTENSION | SYNTAX_ASSERT)  /*     0 SVR4 */ \\\n+D(assert,\tT_ASSERT,\tEXTENSION)  \t\t    /*     0 SVR4 */ \\\n+D(unassert,\tT_UNASSERT,\tEXTENSION)  \t\t    /*     0 SVR4 */ \\\n SCCS_ENTRY\n \n /* Use the table to generate a series of prototypes, an enum for the"}, {"sha": "a538887f7c9056525bf6fe9bf5b707d94c61f6e2", "filename": "gcc/cpplib.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e8b1d7354eda1000077456decb2d146501eac7/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e8b1d7354eda1000077456decb2d146501eac7/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=41e8b1d7354eda1000077456decb2d146501eac7", "patch": "@@ -191,7 +191,6 @@ struct cpp_token\n \n /* Directive flags.  */\n #define SYNTAX_INCLUDE (1 << 8)\n-#define SYNTAX_ASSERT  (1 << 9)\n \n typedef int (*directive_handler) PARAMS ((cpp_reader *));\n "}]}