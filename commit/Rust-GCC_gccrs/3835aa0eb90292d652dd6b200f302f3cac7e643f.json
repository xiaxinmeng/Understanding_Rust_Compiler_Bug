{"sha": "3835aa0eb90292d652dd6b200f302f3cac7e643f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgzNWFhMGViOTAyOTJkNjUyZGQ2YjIwMGYzMDJmM2NhYzdlNjQzZg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-05-12T09:59:17Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-05-12T10:00:20Z"}, "message": "LTO: merge -flto=arg from object files.\n\ngcc/ChangeLog:\n\n\t* lto-wrapper.c (merge_and_complain): Merge -flto=arg options.\n\t(run_gcc): Use -flto argument detection for merged\n\tfdecoded_options.", "tree": {"sha": "b8ebb71e86bc15061c4ec89e5a3f594f1fe72487", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8ebb71e86bc15061c4ec89e5a3f594f1fe72487"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3835aa0eb90292d652dd6b200f302f3cac7e643f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3835aa0eb90292d652dd6b200f302f3cac7e643f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3835aa0eb90292d652dd6b200f302f3cac7e643f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3835aa0eb90292d652dd6b200f302f3cac7e643f/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d7d925d0d799eb9dda4a6bd6162af0a7db9c98b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7d925d0d799eb9dda4a6bd6162af0a7db9c98b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d7d925d0d799eb9dda4a6bd6162af0a7db9c98b"}], "stats": {"total": 77, "additions": 57, "deletions": 20}, "files": [{"sha": "a71d614715245ee72dc5ea92b603a0cf4dfafc53", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 57, "deletions": 20, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3835aa0eb90292d652dd6b200f302f3cac7e643f/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3835aa0eb90292d652dd6b200f302f3cac7e643f/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=3835aa0eb90292d652dd6b200f302f3cac7e643f", "patch": "@@ -425,6 +425,31 @@ merge_and_complain (vec<cl_decoded_option> decoded_options,\n \tcase OPT_foffload_:\n \t  decoded_options.safe_push (*foption);\n \t  break;\n+\n+\tcase OPT_flto_:\n+\t  if (existing_opt == -1)\n+\t    decoded_options.safe_push (*foption);\n+\t  else\n+\t    {\n+\t      if (strcmp (foption->arg, decoded_options[existing_opt].arg) != 0)\n+\t\t{\n+\t\t  /* -flto=auto is preferred.  */\n+\t\t  if (strcmp (decoded_options[existing_opt].arg, \"auto\") == 0)\n+\t\t    ;\n+\t\t  else if (strcmp (foption->arg, \"auto\") == 0\n+\t\t\t   || strcmp (foption->arg, \"jobserver\") == 0)\n+\t\t    decoded_options[existing_opt].arg = foption->arg;\n+\t\t  else if (strcmp (decoded_options[existing_opt].arg,\n+\t\t\t\t   \"jobserver\") != 0)\n+\t\t    {\n+\t\t      int n = atoi (foption->arg);\n+\t\t      int original_n = atoi (decoded_options[existing_opt].arg);\n+\t\t      if (n > original_n)\n+\t\t\tdecoded_options[existing_opt].arg = foption->arg;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t  break;\n \t}\n     }\n \n@@ -1490,6 +1515,37 @@ run_gcc (unsigned argc, char *argv[])\n   append_compiler_options (&argv_obstack, fdecoded_options);\n   append_linker_options (&argv_obstack, decoded_options);\n \n+  /* Process LTO-related options on merged options.  */\n+  for (j = 1; j < fdecoded_options.length (); ++j)\n+    {\n+      cl_decoded_option *option = &fdecoded_options[j];\n+      switch (option->opt_index)\n+\t{\n+\tcase OPT_flto_:\n+\t  if (strcmp (option->arg, \"jobserver\") == 0)\n+\t    {\n+\t      parallel = 1;\n+\t      jobserver = 1;\n+\t    }\n+\t  else if (strcmp (option->arg, \"auto\") == 0)\n+\t    {\n+\t      parallel = 1;\n+\t      auto_parallel = 1;\n+\t    }\n+\t  else\n+\t    {\n+\t      parallel = atoi (option->arg);\n+\t      if (parallel <= 1)\n+\t\tparallel = 0;\n+\t    }\n+\t  /* Fallthru.  */\n+\n+\tcase OPT_flto:\n+\t  lto_mode = LTO_MODE_WHOPR;\n+\t  break;\n+\t}\n+    }\n+\n   /* Scan linker driver arguments for things that are of relevance to us.  */\n   for (j = 1; j < decoded_options.length (); ++j)\n     {\n@@ -1519,26 +1575,7 @@ run_gcc (unsigned argc, char *argv[])\n \n \tcase OPT_flto_:\n \t  if (strcmp (option->arg, \"jobserver\") == 0)\n-\t    {\n-\t      parallel = 1;\n-\t      jobserver = 1;\n-\t      jobserver_requested = true;\n-\t    }\n-\t  else if (strcmp (option->arg, \"auto\") == 0)\n-\t    {\n-\t      parallel = 1;\n-\t      auto_parallel = 1;\n-\t    }\n-\t  else\n-\t    {\n-\t      parallel = atoi (option->arg);\n-\t      if (parallel <= 1)\n-\t\tparallel = 0;\n-\t    }\n-\t  /* Fallthru.  */\n-\n-\tcase OPT_flto:\n-\t  lto_mode = LTO_MODE_WHOPR;\n+\t    jobserver_requested = true;\n \t  break;\n \n \tcase OPT_flinker_output_:"}]}