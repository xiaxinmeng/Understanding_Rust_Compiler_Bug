{"sha": "e7722f110626223efb2d2d63e15bb4960c4f574b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc3MjJmMTEwNjI2MjIzZWZiMmQyZDYzZTE1YmI0OTYwYzRmNTc0Yg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-12T15:26:48Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-12T15:26:48Z"}, "message": "Define std::sample for C++17\n\n\t* doc/xml/manual/status_cxx2017.xml: Add std::sample status.\n\t* doc/html/*: Regenerate.\n\t* include/experimental/algorithm (__sample): Move to bits/stl_algo.h\n\tand into namespace std.\n\t* include/bits/stl_algo.h (__sample): Define here. Fix invalid use\n\tof input iterator. Defend against overloaded comma operator.\n\t(sample): Define for C++17.\n\t* testsuite/25_algorithms/sample/1.cc: New test.\n\nFrom-SVN: r241062", "tree": {"sha": "944b7c7b02fd7b3c1602baffe85e41cb961c11eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/944b7c7b02fd7b3c1602baffe85e41cb961c11eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7722f110626223efb2d2d63e15bb4960c4f574b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7722f110626223efb2d2d63e15bb4960c4f574b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7722f110626223efb2d2d63e15bb4960c4f574b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7722f110626223efb2d2d63e15bb4960c4f574b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d73c92c9f2297c57153beced2475ed79e0d0736b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d73c92c9f2297c57153beced2475ed79e0d0736b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d73c92c9f2297c57153beced2475ed79e0d0736b"}], "stats": {"total": 278, "additions": 227, "deletions": 51}, "files": [{"sha": "efbcd2dec19d53147ba0e50babf97a4de1edee5f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7722f110626223efb2d2d63e15bb4960c4f574b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7722f110626223efb2d2d63e15bb4960c4f574b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e7722f110626223efb2d2d63e15bb4960c4f574b", "patch": "@@ -1,5 +1,14 @@\n 2016-10-12  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/xml/manual/status_cxx2017.xml: Add std::sample status.\n+\t* doc/html/*: Regenerate.\n+\t* include/experimental/algorithm (__sample): Move to bits/stl_algo.h\n+\tand into namespace std.\n+\t* include/bits/stl_algo.h (__sample): Define here. Fix invalid use\n+\tof input iterator. Defend against overloaded comma operator.\n+\t(sample): Define for C++17.\n+\t* testsuite/25_algorithms/sample/1.cc: New test.\n+\n \t* testsuite/util/testsuite_common_types.h\n \t(bitwise_assignment_operators): Use direct-initialization for C++11\n \tand later, to avoid CopyConstructible requirement."}, {"sha": "122bf8f7b9fe0f25006b64801a2606c19068240a", "filename": "libstdc++-v3/doc/html/manual/bugs.html", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7722f110626223efb2d2d63e15bb4960c4f574b/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7722f110626223efb2d2d63e15bb4960c4f574b/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html?ref=e7722f110626223efb2d2d63e15bb4960c4f574b", "patch": "@@ -466,6 +466,10 @@\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2441\" target=\"_top\">2441</a>:\n        <span class=\"emphasis\"><em>Exact-width atomic typedefs should be provided</em></span>\n     </span></dt><dd><p>Define the typedefs.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2442\" target=\"_top\">2442</a>:\n+       <span class=\"emphasis\"><em><code class=\"code\">call_once()</code> shouldn't <code class=\"code\">DECAY_COPY()</code></em></span>\n+    </span></dt><dd><p>Remove indirection through call wrapper that made copies\n+    of arguments and forward arguments straight to <code class=\"code\">std::invoke</code>.\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2454\" target=\"_top\">2454</a>:\n        <span class=\"emphasis\"><em>Add <code class=\"code\">raw_storage_iterator::base()</code> member\n        </em></span>\n@@ -486,6 +490,11 @@\n        <span class=\"emphasis\"><em><code class=\"code\">allocator_traits::max_size()</code> default behavior is incorrect\n        </em></span>\n     </span></dt><dd><p>Divide by the object type.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2484\" target=\"_top\">2484</a>:\n+       <span class=\"emphasis\"><em><code class=\"code\">rethrow_if_nested()</code>  is doubly unimplementable\n+       </em></span>\n+    </span></dt><dd><p>Avoid using <code class=\"code\">dynamic_cast</code> when it would be\n+    ill-formed.\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2583\" target=\"_top\">2583</a>:\n        <span class=\"emphasis\"><em>There is no way to supply an allocator for <code class=\"code\"> basic_string(str, pos)</code>\n        </em></span>"}, {"sha": "5ef66daa49469da13b05d948440c615c080e8223", "filename": "libstdc++-v3/doc/html/manual/status.html", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7722f110626223efb2d2d63e15bb4960c4f574b/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7722f110626223efb2d2d63e15bb4960c4f574b/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html?ref=e7722f110626223efb2d2d63e15bb4960c4f574b", "patch": "@@ -573,7 +573,11 @@\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0220r1.html\" target=\"_top\">\n \tP0220R1\n \t</a>\n-      </td><td align=\"center\"> 7 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_boyer_moore_searcher &gt;= 201603</code> </td></tr><tr><td align=\"left\"> Constant View: A proposal for a <code class=\"code\">std::as_const</code> helper function template\t</td><td align=\"left\">\n+      </td><td align=\"center\"> 7 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_boyer_moore_searcher &gt;= 201603</code> </td></tr><tr><td align=\"left\"> Library Fundamentals V1 TS Components: Sampling </td><td align=\"left\">\n+\t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0220r1.html\" target=\"_top\">\n+\tP0220R1\n+\t</a>\n+      </td><td align=\"center\"> 7 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_sample &gt;= 201603</code> </td></tr><tr><td align=\"left\"> Constant View: A proposal for a <code class=\"code\">std::as_const</code> helper function template\t</td><td align=\"left\">\n \t<a class=\"link\" href=\"\" target=\"_top\">\n \tP0007R1\n \t</a>"}, {"sha": "ae8dfa9529be332f6b2edde69b48c760a5d755cd", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2017.xml", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7722f110626223efb2d2d63e15bb4960c4f574b/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7722f110626223efb2d2d63e15bb4960c4f574b/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml?ref=e7722f110626223efb2d2d63e15bb4960c4f574b", "patch": "@@ -181,6 +181,17 @@ Feature-testing recommendations for C++</link>.\n       <entry> <code>__cpp_lib_boyer_moore_searcher >= 201603</code> </entry>\n     </row>\n \n+    <row>\n+      <entry> Library Fundamentals V1 TS Components: Sampling </entry>\n+      <entry>\n+\t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0220r1.html\">\n+\tP0220R1\n+\t</link>\n+      </entry>\n+      <entry align=\"center\"> 7 </entry>\n+      <entry> <code>__cpp_lib_sample >= 201603</code> </entry>\n+    </row>\n+\n     <row>\n       <entry> Constant View: A proposal for a <code>std::as_const</code> helper function template\t</entry>\n       <entry>"}, {"sha": "0538a79a3514776433845d1cd4c934124a85591f", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7722f110626223efb2d2d63e15bb4960c4f574b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7722f110626223efb2d2d63e15bb4960c4f574b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=e7722f110626223efb2d2d63e15bb4960c4f574b", "patch": "@@ -5615,6 +5615,86 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t\t\t\t__gnu_cxx::__ops::__iter_comp_iter(__comp));\n     }\n \n+#if __cplusplus >= 201402L\n+  /// Reservoir sampling algorithm.\n+  template<typename _InputIterator, typename _RandomAccessIterator,\n+           typename _Size, typename _UniformRandomBitGenerator>\n+    _RandomAccessIterator\n+    __sample(_InputIterator __first, _InputIterator __last, input_iterator_tag,\n+\t     _RandomAccessIterator __out, random_access_iterator_tag,\n+\t     _Size __n, _UniformRandomBitGenerator&& __g)\n+    {\n+      using __distrib_type = uniform_int_distribution<_Size>;\n+      using __param_type = typename __distrib_type::param_type;\n+      __distrib_type __d{};\n+      _Size __sample_sz = 0;\n+      while (__first != __last && __sample_sz != __n)\n+\t{\n+\t  __out[__sample_sz++] = *__first;\n+\t  ++__first;\n+\t}\n+      for (auto __pop_sz = __sample_sz; __first != __last;\n+\t  ++__first, (void) ++__pop_sz)\n+\t{\n+\t  const auto __k = __d(__g, __param_type{0, __pop_sz});\n+\t  if (__k < __n)\n+\t    __out[__k] = *__first;\n+\t}\n+      return __out + __sample_sz;\n+    }\n+\n+  /// Selection sampling algorithm.\n+  template<typename _ForwardIterator, typename _OutputIterator, typename _Cat,\n+           typename _Size, typename _UniformRandomBitGenerator>\n+    _OutputIterator\n+    __sample(_ForwardIterator __first, _ForwardIterator __last,\n+\t     forward_iterator_tag,\n+\t     _OutputIterator __out, _Cat,\n+\t     _Size __n, _UniformRandomBitGenerator&& __g)\n+    {\n+      using __distrib_type = uniform_int_distribution<_Size>;\n+      using __param_type = typename __distrib_type::param_type;\n+      __distrib_type __d{};\n+      _Size __unsampled_sz = std::distance(__first, __last);\n+      for (__n = std::min(__n, __unsampled_sz); __n != 0; ++__first)\n+\tif (__d(__g, __param_type{0, --__unsampled_sz}) < __n)\n+\t  {\n+\t    *__out++ = *__first;\n+\t    --__n;\n+\t  }\n+      return __out;\n+    }\n+\n+#if __cplusplus > 201402L\n+#define __cpp_lib_sample 201603\n+  /// Take a random sample from a population.\n+  template<typename _PopulationIterator, typename _SampleIterator,\n+           typename _Distance, typename _UniformRandomBitGenerator>\n+    _SampleIterator\n+    sample(_PopulationIterator __first, _PopulationIterator __last,\n+\t   _SampleIterator __out, _Distance __n,\n+\t   _UniformRandomBitGenerator&& __g)\n+    {\n+      using __pop_cat = typename\n+\tstd::iterator_traits<_PopulationIterator>::iterator_category;\n+      using __samp_cat = typename\n+\tstd::iterator_traits<_SampleIterator>::iterator_category;\n+\n+      static_assert(\n+\t  __or_<is_convertible<__pop_cat, forward_iterator_tag>,\n+\t\tis_convertible<__samp_cat, random_access_iterator_tag>>::value,\n+\t  \"output range must use a RandomAccessIterator when input range\"\n+\t  \" does not meet the ForwardIterator requirements\");\n+\n+      static_assert(is_integral<_Distance>::value,\n+\t\t    \"sample size must be an integer type\");\n+\n+      return std::__sample(__first, __last, __pop_cat{}, __out, __samp_cat{},\n+\t\t\t   __n, std::forward<_UniformRandomBitGenerator>(__g));\n+    }\n+#endif // C++17\n+#endif // C++14\n+\n _GLIBCXX_END_NAMESPACE_ALGO\n } // namespace std\n "}, {"sha": "eb18dde198ee88e52dc03591570452bde59defb3", "filename": "libstdc++-v3/include/experimental/algorithm", "status": "modified", "additions": 3, "deletions": 50, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7722f110626223efb2d2d63e15bb4960c4f574b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7722f110626223efb2d2d63e15bb4960c4f574b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Falgorithm?ref=e7722f110626223efb2d2d63e15bb4960c4f574b", "patch": "@@ -36,7 +36,6 @@\n #else\n \n #include <algorithm>\n-#include <random>\n #include <experimental/bits/lfts_config.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -55,52 +54,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #define __cpp_lib_experimental_sample 201402\n \n-  /// Reservoir sampling algorithm.\n-  template<typename _InputIterator, typename _RandomAccessIterator,\n-           typename _Size, typename _UniformRandomNumberGenerator>\n-    _RandomAccessIterator\n-    __sample(_InputIterator __first, _InputIterator __last, input_iterator_tag,\n-\t     _RandomAccessIterator __out, random_access_iterator_tag,\n-\t     _Size __n, _UniformRandomNumberGenerator&& __g)\n-    {\n-      using __distrib_type = std::uniform_int_distribution<_Size>;\n-      using __param_type = typename __distrib_type::param_type;\n-      __distrib_type __d{};\n-      _Size __sample_sz = 0;\n-      while (__first != __last && __sample_sz != __n)\n-\t__out[__sample_sz++] = *__first++;\n-      for (auto __pop_sz = __sample_sz; __first != __last;\n-\t  ++__first, ++__pop_sz)\n-\t{\n-\t  const auto __k = __d(__g, __param_type{0, __pop_sz});\n-\t  if (__k < __n)\n-\t    __out[__k] = *__first;\n-\t}\n-      return __out + __sample_sz;\n-    }\n-\n-  /// Selection sampling algorithm.\n-  template<typename _ForwardIterator, typename _OutputIterator, typename _Cat,\n-           typename _Size, typename _UniformRandomNumberGenerator>\n-    _OutputIterator\n-    __sample(_ForwardIterator __first, _ForwardIterator __last,\n-\t     forward_iterator_tag,\n-\t     _OutputIterator __out, _Cat,\n-\t     _Size __n, _UniformRandomNumberGenerator&& __g)\n-    {\n-      using __distrib_type = std::uniform_int_distribution<_Size>;\n-      using __param_type = typename __distrib_type::param_type;\n-      __distrib_type __d{};\n-      _Size __unsampled_sz = std::distance(__first, __last);\n-      for (__n = std::min(__n, __unsampled_sz); __n != 0; ++__first)\n-\tif (__d(__g, __param_type{0, --__unsampled_sz}) < __n)\n-\t  {\n-\t    *__out++ = *__first;\n-\t    --__n;\n-\t  }\n-      return __out;\n-    }\n-\n   /// Take a random sample from a population.\n   template<typename _PopulationIterator, typename _SampleIterator,\n            typename _Distance, typename _UniformRandomNumberGenerator>\n@@ -123,9 +76,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static_assert(is_integral<_Distance>::value,\n \t\t    \"sample size must be an integer type\");\n \n-      return std::experimental::__sample(\n-\t  __first, __last, __pop_cat{}, __out, __samp_cat{},\n-\t  __n, std::forward<_UniformRandomNumberGenerator>(__g));\n+      return std::__sample(__first, __last, __pop_cat{}, __out, __samp_cat{},\n+\t\t\t   __n,\n+\t\t\t   std::forward<_UniformRandomNumberGenerator>(__g));\n     }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "10376e2add5d9e8a1855f8ecb7f7eeded5b36f42", "filename": "libstdc++-v3/testsuite/25_algorithms/sample/1.cc", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7722f110626223efb2d2d63e15bb4960c4f574b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsample%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7722f110626223efb2d2d63e15bb4960c4f574b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsample%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsample%2F1.cc?ref=e7722f110626223efb2d2d63e15bb4960c4f574b", "patch": "@@ -0,0 +1,110 @@\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++1z } }\n+\n+#include <algorithm>\n+#include <random>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+std::mt19937 rng;\n+\n+using std::sample;\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+using __gnu_test::forward_iterator_wrapper;\n+using __gnu_test::random_access_iterator_wrapper;\n+\n+void\n+test01()\n+{\n+  const int in[] = { 1, 2 };\n+  test_container<const int, random_access_iterator_wrapper> pop(in);\n+  const int sample_size = 10;\n+  int samp[sample_size] = { };\n+\n+  // population smaller than desired sample size\n+  auto it = sample(pop.begin(), pop.end(), samp, sample_size, rng);\n+  VERIFY( it == samp + std::distance(pop.begin(), pop.end()) );\n+  const auto sum = std::accumulate(pop.begin(), pop.end(), 0);\n+  VERIFY( std::accumulate(samp, samp + sample_size, 0) == sum );\n+}\n+\n+void\n+test02()\n+{\n+  const int in[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+  test_container<const int, random_access_iterator_wrapper> pop(in);\n+  const int sample_size = 10;\n+  int samp[sample_size] = { };\n+\n+  auto it = sample(pop.begin(), pop.end(), samp, sample_size, rng);\n+  VERIFY( it == samp + sample_size );\n+\n+  // verify no duplicates\n+  std::sort(samp, it);\n+  auto it2 = std::unique(samp, it);\n+  VERIFY( it2 == it );\n+}\n+\n+void\n+test03()\n+{\n+  const int in[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+  test_container<const int, input_iterator_wrapper> pop(in);\n+  const int sample_size = 5;\n+  int samp[sample_size] = { };\n+\n+  // input iterator for population\n+  auto it = sample(pop.begin(), pop.end(), samp, sample_size, rng);\n+  VERIFY( it == samp + sample_size );\n+\n+  // verify no duplicates\n+  std::sort(samp, it);\n+  auto it2 = std::unique(samp, it);\n+  VERIFY( it2 == it );\n+}\n+\n+void\n+test04()\n+{\n+  const int in[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n+  test_container<const int, forward_iterator_wrapper> pop(in);\n+  const int sample_size = 5;\n+  int out[sample_size];\n+  test_container<int, output_iterator_wrapper> samp(out);\n+\n+  // forward iterator for population and output iterator for result\n+  auto res = sample(pop.begin(), pop.end(), samp.begin(), sample_size, rng);\n+\n+  // verify no duplicates\n+  std::sort(std::begin(out), std::end(out));\n+  auto it = std::unique(std::begin(out), std::end(out));\n+  VERIFY( it == std::end(out) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}]}