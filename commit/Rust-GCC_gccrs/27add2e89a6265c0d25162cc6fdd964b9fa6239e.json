{"sha": "27add2e89a6265c0d25162cc6fdd964b9fa6239e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdhZGQyZTg5YTYyNjVjMGQyNTE2MmNjNmZkZDk2NGI5ZmE2MjM5ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-10-06T22:48:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-10-06T22:48:48Z"}, "message": "rs6000.c (rs6000_cannot_force_const_mem): New.\n\n        * config/rs6000/rs6000.c (rs6000_cannot_force_const_mem): New.\n        (TARGET_CANNOT_FORCE_CONST_MEM): Use it.\n\nFrom-SVN: r105069", "tree": {"sha": "13ddf65ce8b14580acf95e48c92c06f558511b79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13ddf65ce8b14580acf95e48c92c06f558511b79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27add2e89a6265c0d25162cc6fdd964b9fa6239e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27add2e89a6265c0d25162cc6fdd964b9fa6239e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27add2e89a6265c0d25162cc6fdd964b9fa6239e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27add2e89a6265c0d25162cc6fdd964b9fa6239e/comments", "author": null, "committer": null, "parents": [{"sha": "4bb1e03799cec1328ad9e84907ff55cbc4168e58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bb1e03799cec1328ad9e84907ff55cbc4168e58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bb1e03799cec1328ad9e84907ff55cbc4168e58"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "41f4aaf2443d305e2790c1a82e74eeafd2e8b9b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27add2e89a6265c0d25162cc6fdd964b9fa6239e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27add2e89a6265c0d25162cc6fdd964b9fa6239e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27add2e89a6265c0d25162cc6fdd964b9fa6239e", "patch": "@@ -1,3 +1,8 @@\n+2005-10-06  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_cannot_force_const_mem): New.\n+\t(TARGET_CANNOT_FORCE_CONST_MEM): Use it.\n+\n 2005-10-06  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/22216"}, {"sha": "51567e0c6b51b2f8dea669e17103d1e732920d67", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27add2e89a6265c0d25162cc6fdd964b9fa6239e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27add2e89a6265c0d25162cc6fdd964b9fa6239e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=27add2e89a6265c0d25162cc6fdd964b9fa6239e", "patch": "@@ -748,6 +748,7 @@ static rtx rs6000_emit_vector_compare (enum rtx_code, rtx, rtx,\n static int get_vsel_insn (enum machine_mode);\n static void rs6000_emit_vector_select (rtx, rtx, rtx, rtx);\n static tree rs6000_stack_protect_fail (void);\n+static bool rs6000_cannot_force_const_mem (rtx x);\n \n const int INSN_NOT_AVAILABLE = -1;\n static enum machine_mode rs6000_eh_return_filter_mode (void);\n@@ -876,7 +877,7 @@ static const char alt_reg_names[][8] =\n #define TARGET_HAVE_TLS HAVE_AS_TLS\n \n #undef TARGET_CANNOT_FORCE_CONST_MEM\n-#define TARGET_CANNOT_FORCE_CONST_MEM rs6000_tls_referenced_p\n+#define TARGET_CANNOT_FORCE_CONST_MEM rs6000_cannot_force_const_mem\n \n #undef TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE rs6000_output_function_prologue\n@@ -3107,6 +3108,17 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n   return dest;\n }\n \n+/* Primarily this is required for TLS symbols, but given that our move\n+   patterns *ought* to be able to handle any symbol at any time, we\n+   should never be spilling symbolic operands to the constant pool, ever.  */\n+\n+static bool\n+rs6000_cannot_force_const_mem (rtx x)\n+{\n+  enum rtx_code code = GET_CODE (x);\n+  return code == SYMBOL_REF || code == LABEL_REF || code == CONST;\n+}\n+\n /* Return 1 if X contains a thread-local symbol.  */\n \n bool"}]}