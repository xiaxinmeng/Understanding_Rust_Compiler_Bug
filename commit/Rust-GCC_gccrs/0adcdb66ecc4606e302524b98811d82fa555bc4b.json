{"sha": "0adcdb66ecc4606e302524b98811d82fa555bc4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFkY2RiNjZlY2M0NjA2ZTMwMjUyNGI5ODgxMWQ4MmZhNTU1YmM0Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T10:01:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T10:01:50Z"}, "message": "resync\n\nFrom-SVN: r101081", "tree": {"sha": "402a9728e1d68df500ad1097775a308a6f3a3b5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/402a9728e1d68df500ad1097775a308a6f3a3b5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0adcdb66ecc4606e302524b98811d82fa555bc4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0adcdb66ecc4606e302524b98811d82fa555bc4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0adcdb66ecc4606e302524b98811d82fa555bc4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0adcdb66ecc4606e302524b98811d82fa555bc4b/comments", "author": null, "committer": null, "parents": [{"sha": "8d3ed5b85bd4008118fe7853d2834b6e8ad4ff2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3ed5b85bd4008118fe7853d2834b6e8ad4ff2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d3ed5b85bd4008118fe7853d2834b6e8ad4ff2c"}], "stats": {"total": 1522, "additions": 1522, "deletions": 0}, "files": [{"sha": "0e6b95d2af9479397f733baccec5b1d0dc210ce5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 1522, "deletions": 0, "changes": 1522, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0adcdb66ecc4606e302524b98811d82fa555bc4b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0adcdb66ecc4606e302524b98811d82fa555bc4b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0adcdb66ecc4606e302524b98811d82fa555bc4b", "patch": "@@ -1,3 +1,1525 @@\n+2005-06-14  Olivier Hainque  <hainque@adacore.com>\n+\t    Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* s-mastop-irix.adb (Pop_Frame): Revert shorcuts avoiding calls to\n+\texc_unwind, now that we are generating proper .debug_frame output for\n+\tthat target.\n+\n+\t* tracebak.c: Remove the mips-irix section, as we are now using the\n+\ts-mastop based unwinder again.\n+\tUnder SPARC/Solaris, take into account the stack bias to compute the\n+\tframe offset.  The stack bias is 0 for the V8 ABI and 2047 for the V9\n+\tABI.\n+\n+2005-06-14  Doug Rupp  <rupp@adacore.com>\n+\n+\t* g-trasym-vms.adb: renamed g-trasym-vms-alpha.adb\n+\n+\t* g-trasym-vms-alpha.adb, g-trasym-vms-ia64.adb: New files\n+\n+2005-06-14  Pascal Obry  <obry@adacore.com>\n+\n+\t* a-strhas.ads, a-secain.adb, a-secain.ads, a-rbtgso.ads, a-cgaaso.adb,\n+\ta-cgaaso.ads, a-cgarso.adb, a-cgcaso.adb, a-cgarso.ads, a-cgcaso.ads,\n+\ta-contai.ads, a-coprnu.ads, a-coprnu.adb: Fix header style (spaces in\n+\tpackage name).\n+\n+\t* a-intnam-lynxos.ads, a-intnam-unixware.ads, a-intnam-tru64.ads, \n+\ta-intnam-aix.ads, a-intnam-irix.ads, a-excpol-interix.adb, \n+\ta-intnam-hpux.ads, a-intnam-linux.ads, a-intnam-dummy.ads, \n+\ta-intnam-os2.ads, a-numaux-libc-x86.ads, a-intnam-interix.ads, \n+\ta-intnam-solaris.ads, a-caldel-vms.adb, a-calend-vms.ads,\n+\ta-intnam-vms.ads, a-excpol-abort.adb, a-intnam-mingw.ads, \n+\ta-intnam-vxworks.ads, a-numaux-vxworks.ads, s-osinte-unixware.adb, \n+\ts-osinte-unixware.ads, s-osinte-lynxos-3.adb, s-osinte-lynxos-3.ads, \n+\ts-osinte-hpux.ads, s-osinte-solaris-posix.ads, a-intnam-freebsd.ads, \n+\ts-osinte-freebsd.adb, s-osinte-freebsd.ads, s-osinte-lynxos.adb, \n+\ts-osinte-lynxos.ads, s-tpopsp-lynxos.adb, s-osinte-tru64.adb, \n+\ts-osinte-tru64.ads, s-tpopsp-posix-foreign.adb, s-vxwork-alpha.ads, \n+\ts-osinte-aix.adb, s-osinte-aix.ads, s-osinte-aix-fsu.ads, \n+\ts-osinte-irix.adb, s-osinte-irix.ads, s-interr-sigaction.adb, \n+\ts-osinte-irix-athread.ads, s-osinte-hpux-dce.adb, \n+\ts-osinte-hpux-dce.ads, s-osinte-posix.adb, s-osinte-linux.ads, \n+\ts-vxwork-m68k.ads, s-osinte-linux-fsu.ads, s-vxwork-mips.ads, \n+\ts-osinte-dummy.ads, s-interr-dummy.adb, s-osinte-os2.adb, \n+\ts-osinte-os2.ads, s-osprim-os2.adb, s-osinte-interix.ads, \n+\ts-osprim-unix.adb, s-vxwork-ppc.ads, s-osinte-solaris.adb, \n+\ts-osinte-solaris.ads, s-osprim-solaris.adb, s-tpopsp-solaris.adb, \n+\ts-vxwork-sparcv9.ads, s-osinte-solaris-fsu.ads, s-interr-vms.adb, \n+\ts-osinte-vms.adb, s-osinte-vms.ads, s-osprim-vms.adb, \n+\ts-osprim-vms.ads, s-tpopde-vms.adb, s-tpopde-vms.ads, \n+\ts-osprim-mingw.adb, s-vxwork-xscale.ads, s-interr-vxworks.adb, \n+\ts-osinte-vxworks.adb, s-osinte-vxworks.ads, s-osprim-vxworks.adb, \n+\ts-tfsetr-vxworks.adb, s-tpopsp-vxworks.adb, s-intman-posix.adb, \n+\ts-osinte-fsu.adb, s-osprim-posix.adb, s-tfsetr-default.adb, \n+\ts-tpopsp-posix.adb, s-traces-default.adb, s-trafor-default.adb, \n+\ts-trafor-default.ads, s-tratas-default.adb, a-numaux-x86.adb,\n+\ta-numaux-x86.ads, a-astaco.adb, a-astaco.ads, a-caldel.adb,\n+\ta-caldel.ads, a-charac.ads, a-chlat1.ads, a-chlat9.ads, a-colien.adb,\n+\ta-colien.ads, a-colire.adb, a-colire.ads, a-comlin.adb, a-cwila1.ads,\n+\ta-cwila9.ads, ada.ads, a-decima.adb, a-diocst.ads, a-direio.adb,\n+\ta-dynpri.adb, a-dynpri.ads, a-excpol.adb, a-flteio.ads, a-fwteio.ads,\n+\ta-inteio.ads, a-interr.adb, a-intnam.ads, a-intsig.adb, a-intsig.ads,\n+\ta-ioexce.ads, a-iwteio.ads, a-lfteio.ads, a-lfwtio.ads, a-liteio.ads,\n+\ta-liwtio.ads, a-llftio.ads, a-llfwti.ads, a-llitio.ads, a-lliwti.ads,\n+\ta-ncelfu.ads, a-ngcefu.adb, a-ngcefu.ads, a-ngcoty.adb, a-ngelfu.adb,\n+\ta-ngelfu.ads, a-nlcefu.ads, a-nlcoty.ads, a-nlelfu.ads, a-nllcef.ads,\n+\ta-nllcty.ads, a-nllefu.ads, a-nscefu.ads, a-nscoty.ads, a-nselfu.ads,\n+\ta-nucoty.ads, a-nudira.adb, a-nuelfu.ads, a-nuflra.adb, a-numaux.ads,\n+\ta-numeri.ads, a-reatim.adb, a-retide.adb, a-retide.ads, a-sequio.adb,\n+\ta-sequio.ads, a-sfteio.ads, a-sfwtio.ads, a-siocst.ads, a-siteio.ads,\n+\ta-siwtio.ads, a-ssicst.ads, a-ssitio.ads, a-ssiwti.ads, a-stmaco.ads,\n+\ta-storio.adb, a-strbou.adb, a-strfix.adb, a-string.ads, a-strmap.adb,\n+\ta-strsea.adb, a-strsup.adb, a-strunb.ads, a-ststio.adb, a-stunau.adb,\n+\ta-stunau.ads, a-stwibo.adb, a-stwifi.adb, a-stwifi.ads, a-stwima.adb,\n+\ta-stwise.adb, a-stwisu.adb, a-suteio.adb, a-suteio.ads, a-swuwti.adb,\n+\ta-swuwti.ads, a-teioed.adb, a-ticoau.adb, a-ticoau.ads, a-ticoio.adb,\n+\ta-tideau.adb, a-tideio.adb, a-tienau.adb, a-tienio.adb, a-tifiio.adb,\n+\ta-tiflio.adb, a-tigeau.adb, a-tigeau.ads, a-tiinio.adb, a-timoau.adb,\n+\ta-timoio.adb, a-timoio.ads, a-tiocst.ads, a-titest.adb, a-titest.ads,\n+\ta-witeio.adb, a-wtcoau.adb, a-wtcoau.ads, a-wtcoio.adb, a-wtcoio.ads,\n+\ta-wtcstr.ads, a-wtdeau.adb, a-wtdeio.adb, a-wtenau.adb, a-wtenio.adb,\n+\ta-wtfiio.adb, a-wtflio.adb, a-wtgeau.adb, a-wtinau.adb, a-wtinio.adb,\n+\ta-wtinio.ads, a-wtmoau.adb, a-wtmoio.adb, a-wttest.adb, calendar.ads,\n+\tdec.ads, dec-io.adb, dec-io.ads, directio.ads, errno.c, g-bubsor.adb,\n+\tg-bubsor.ads, g-busora.adb, g-busora.ads, g-busorg.adb, g-busorg.ads,\n+\tg-casuti.adb, g-casuti.ads, g-debuti.ads, g-heasor.adb, g-heasor.ads,\n+\tg-hesora.adb, g-hesora.ads, g-hesorg.adb, g-hesorg.ads, g-htable.adb,\n+\tg-htable.ads, g-io.adb, g-io.ads, g-io_aux.adb, g-io_aux.ads,\n+\tg-memdum.adb, g-memdum.ads, g-sestin.ads, g-signal.ads, g-signal.adb,\n+\tgnat.ads, g-souinf.ads, g-speche.adb, g-speche.ads, g-table.adb,\n+\tg-table.ads, g-thread.adb, g-thread.ads, ioexcept.ads, i-vxwoio.adb,\n+\ti-vxwoio.ads, math_lib.adb, s-assert.adb, s-assert.ads, s-asthan.ads,\n+\ts-bitops.adb, s-bitops.ads, s-boarop.ads, s-carsi8.adb, s-carsi8.ads, \n+\ts-carun8.adb, s-carun8.ads, s-casi16.adb, s-casi16.ads, s-casi32.adb, \n+\ts-casi32.ads, s-casi64.adb, s-casi64.ads, s-casuti.adb, s-casuti.ads,\n+\ts-caun16.adb, s-caun16.ads, s-caun32.adb, s-caun32.ads, s-caun64.adb, \n+\ts-caun64.ads, s-direio.adb, s-direio.ads, sequenio.ads, s-errrep.adb,\n+\ts-errrep.ads, s-exnint.adb, s-exnint.ads, s-exnllf.adb, s-exnllf.ads,\n+\ts-exnlli.adb, s-exnlli.ads, s-expint.adb, s-expint.ads, s-explli.adb,\n+\ts-explli.ads, s-expllu.adb, s-expllu.ads, s-expmod.adb, s-expmod.ads,\n+\ts-expuns.adb, s-expuns.ads, s-fore.adb, s-fore.ads, s-geveop.adb,\n+\ts-geveop.ads, s-htable.adb, s-htable.ads, s-imgbiu.adb, s-imgbiu.ads,\n+\ts-imgboo.adb, s-imgboo.ads, s-imgcha.adb, s-imgcha.ads, s-imgdec.adb,\n+\ts-imgdec.ads, s-imgenu.adb, s-imgenu.ads, s-imgint.adb, s-imgint.ads,\n+\ts-imgllb.adb, s-imgllb.ads, s-imglld.adb, s-imglld.ads, s-imglli.adb,\n+\ts-imglli.ads, s-imgllu.adb, s-imgllu.ads, s-imgllw.adb, s-imgllw.ads,\n+\ts-imgrea.ads, s-imguns.adb, s-imguns.ads, s-imgwiu.adb, s-imgwiu.ads\n+\ts-interr.ads, s-io.adb, s-mantis.adb, s-mantis.ads, s-osprim.ads,\n+\ts-pack03.adb, s-pack03.ads, s-pack05.adb, s-pack05.ads, s-pack06.adb,\n+\ts-pack06.ads, s-pack07.adb, s-pack07.ads, s-pack09.adb, s-pack09.ads,\n+\ts-pack10.adb, s-pack10.ads, s-pack11.adb, s-pack11.ads, s-pack12.adb,\n+\ts-pack12.ads, s-pack13.adb, s-pack13.ads, s-pack14.adb, s-pack14.ads,\n+\ts-pack15.adb, s-pack15.ads, s-pack17.adb, s-pack17.ads, s-pack18.adb,\n+\ts-pack18.ads, s-pack19.adb, s-pack19.ads, s-pack20.adb, s-pack20.ads,\n+\ts-pack21.adb, s-pack21.ads, s-pack22.adb, s-pack22.ads, s-pack23.adb,\n+\ts-pack23.ads, s-pack24.adb, s-pack24.ads, s-pack25.adb, s-pack25.ads,\n+\ts-pack26.adb, s-pack26.ads, s-pack27.adb, s-pack27.ads, s-pack28.adb,\n+\ts-pack28.ads, s-pack29.adb, s-pack29.ads, s-pack30.adb, s-pack30.ads,\n+\ts-pack31.adb, s-pack31.ads, s-pack33.adb, s-pack33.ads, s-pack34.adb,\n+\ts-pack34.ads, s-pack35.adb, s-pack35.ads, s-pack36.adb, s-pack36.ads,\n+\ts-pack37.adb, s-pack37.ads, s-pack38.adb, s-pack38.ads, s-pack39.adb,\n+\ts-pack39.ads, s-pack40.adb, s-pack40.ads, s-pack41.adb, s-pack41.ads,\n+\ts-pack42.adb, s-pack42.ads, s-pack43.adb, s-pack43.ads, s-pack44.adb,\n+\ts-pack44.ads, s-pack45.adb, s-pack45.ads, s-pack46.adb, s-pack46.ads,\n+\ts-pack47.adb, s-pack47.ads, s-pack48.adb, s-pack48.ads, s-pack49.adb,\n+\ts-pack49.ads, s-pack50.adb, s-pack50.ads, s-pack51.adb, s-pack51.ads,\n+\ts-pack52.adb, s-pack52.ads, s-pack53.adb, s-pack53.ads, s-pack54.adb,\n+\ts-pack54.ads, s-pack55.adb, s-pack55.ads, s-pack56.adb, s-pack56.ads,\n+\ts-pack57.adb, s-pack57.ads, s-pack58.adb, s-pack58.ads, s-pack59.adb,\n+\ts-pack59.ads, s-pack60.adb, s-pack60.ads, s-pack61.adb, s-pack61.ads,\n+\ts-pack62.adb, s-pack62.ads, s-pack63.adb, s-pack63.ads, s-scaval.adb,\n+\ts-scaval.ads, s-sequio.adb, s-sequio.ads, s-stache.adb, s-stache.ads,\n+\ts-stratt.adb, s-stratt.ads, s-strcom.adb, s-strcom.ads, s-strops.adb,\n+\ts-strops.ads, s-taasde.ads, s-tadeca.adb, s-tadeca.ads, s-tadert.adb, \n+\ts-tadert.ads, s-taenca.adb, s-taenca.ads, s-taprob.adb, s-taprob.ads, \n+\ts-tarest.adb, s-tarest.ads, s-tasdeb.adb, s-tasdeb.ads, s-tasini.adb, \n+\ts-tasini.ads, s-taskin.adb, s-taskin.ads, s-tasque.adb, s-tasque.ads, \n+\ts-tasren.ads, s-tasres.ads, s-tassta.adb, s-tassta.ads, s-tasuti.adb, \n+\ts-tasuti.ads, s-tataat.adb, s-tataat.ads, s-tpinop.adb, s-tpinop.ads, \n+\ts-tpoben.adb, s-tpoben.ads, s-tpobop.ads, s-tporft.adb, s-tposen.ads, \n+\ts-traces.adb, s-traces.ads, s-tratas.adb, s-tratas.ads, s-valint.ads,\n+\ts-unstyp.ads, s-veboop.adb, s-veboop.ads, s-vector.ads, s-vercon.adb,\n+\ts-vercon.ads, s-wchcnv.adb, s-wchcnv.ads, s-wchjis.adb, s-wchjis.ads,\n+\ts-wchstw.adb, s-wchstw.ads, s-wchwts.adb, s-wchwts.ads, s-widboo.adb,\n+\ts-widboo.ads, s-widcha.adb, s-widcha.ads, s-widenu.adb, s-widenu.ads,\n+\ts-widlli.adb, s-widlli.ads, s-widllu.adb, s-widllu.ads, s-wwdcha.ads,\n+\ts-wwdenu.adb, s-wwdwch.ads, text_io.ads, s-stchop.ads, s-stchop.adb, \n+\ts-stchop-vxworks.adb, a-intnam-darwin.ads, s-osinte-darwin.adb, \n+\ts-osinte-darwin.ads, s-vxwork-x86.ads, a-numaux-darwin.ads,\n+\ta-numaux-darwin.adb, a-chzla1.ads, a-chzla9.ads, a-lfztio.ads,\n+\ta-liztio.ads, a-llfzti.ads, a-llizti.ads, a-sfztio.ads, a-siztio.ads,\n+\ta-ssizti.ads, a-stzbou.adb, a-stzfix.adb, a-stzfix.ads, a-stzmap.adb,\n+\ta-stzsea.adb, a-stzsup.adb, a-swunau.adb, a-swunau.ads, a-szuzti.adb,\n+\ta-szuzti.ads, a-tiunio.ads, a-wwunio.ads, a-ztcoau.adb, a-ztcoau.ads,\n+\ta-ztcoio.adb, a-ztcoio.ads, a-ztcstr.ads, a-ztdeau.adb, a-ztdeio.adb,\n+\ta-ztenio.adb, a-ztexio.adb, a-ztfiio.adb, a-ztflio.adb, a-ztgeau.adb,\n+\ta-ztinau.adb, a-ztinio.adb, a-ztinio.ads, a-ztmoau.adb, a-ztmoio.adb,\n+\ta-zttest.adb, a-zzunio.ads, g-utf_32.adb: Fix header style.\n+\t\"GNU Ada\" to GNAT, use proper casing for RUN-TIME.\n+\n+2005-06-14  Jose Ruiz  <ruiz@adacore.com>\n+\t    Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* a-sytaco.ads, a-sytaco.adb (Suspension_Object): These objects are no\n+\tlonger protected objects. They have been replaced by lower-level\n+\tsuspension objects made up by a mutex and a condition variable (or\n+\ttheir equivalent given a particular OS) plus some internal data to\n+\treflect the state of the suspension object.\n+\t(Initialize, Finalize): Add this initialization procedure for\n+\tSuspension_Object, which is a controlled type.\n+\t(Finalize): Add the finalization procedure for Suspension_Object,\n+\twhich is a controlled type.\n+\n+\t* a-sytaco-vxworks.ads, a-sytaco-vxworks.adb: Remove this version of\n+\tAda.Synchronous_Task_Control because there is no longer a need for a\n+\tVxWorks specific version of this package. Target dependencies\n+\thas been moved to System.Task_Primitives.Operations.\n+\n+\t* s-osinte-mingw.ads (pCRITICAL_SECTION): Remove this type which is no\n+\tlonger needed.\n+\t(InitializeCriticalSection, EnterCriticalSection,\n+\tLeaveCriticalSection, DeleteCriticalSection): Replace the type\n+\tpCriticalSection by an anonymous access type so that we avoid problems\n+\tof accessibility to local objects.\n+\n+\t* s-taprop.ads, s-taprop-posix.adb, s-taprop-vxworks.adb,\n+\ts-taprop-mingw.adb, s-taprop-vms.adb, s-taprop-solaris.adb,\n+\ts-taprop-os2.adb, s-taprop-dummy.adb, s-taprop-hpux-dce.adb,\n+\ts-taprop-linux.adb, s-taprop-irix.adb, s-taprop-irix-athread.adb,\n+\ts-taprop-tru64.adb, s-taprop-lynxos.adb (Elaboration Code): No longer\n+\tset the environment task mask here.\n+\t(Current_State): Add this function that returns the state of the\n+\tsuspension object.\n+\t(Set_False): Add this procedure that sets the state of the suspension\n+\tobject to False.\n+\t(Set_True): Add this procedure that sets the state of the suspension\n+\tobject to True, releasing the task that was suspended, if any.\n+\t(Suspend_Until_True): Add this procedure that blocks the calling task\n+\tuntil the state of the object is True. Program_Error is raised if\n+\tanother task is already waiting on that suspension object.\n+\t(Initialize): Add this procedure for initializing the suspension\n+\tobject. It initializes the mutex and the condition variable which are\n+\tused for synchronization and queuing, and it sets the internal state\n+\tto False.\n+\t(Finalize): Add this procedure for finalizing the suspension object,\n+\tdestroying the mutex and the condition variable.\n+\n+\t* s-taspri-posix.ads, s-taspri-vxworks.ads, s-taspri-mingw.ads,\n+\ts-taspri-vms.ads, s-taspri-solaris.ads, s-taspri-os2.ads,\n+\ts-taspri-dummy.ads, s-taspri-hpux-dce.ads, s-taspri-linux.ads,\n+\ts-taspri-tru64.ads, s-taspri-lynxos.ads (Suspension_Object): New object\n+\twhich provides a low-level abstraction (using operating system\n+\tprimitives) for Ada.Synchronous_Task_Control.\n+\tThis object is made up by a mutex (for ensuring mutual exclusion), a\n+\tcondition variable (for queuing threads until the condition is\n+\tsignaled), a Boolean (State) indicating whether the object is open,\n+\tand a Boolean (Waiting) reflecting whether there is a task already\n+\tsuspended on this object.\n+\n+\t* s-intman.ads, s-intman-irix.adb, s-intman-irix-athread.adb,\n+\ts-intman-dummy.adb, s-intman-solaris.adb, s-intman-vms.adb,\n+\ts-intman-vms.ads, s-intman-mingw.adb,\n+\t(Initialize_Interrupts): Removed, no longer used.\n+\n+\t* s-inmaop-posix.adb, s-inmaop-vms.adb, s-inmaop-dummy.adb,\n+\t(Setup_Interrupt_Mask): New procedure.\n+\n+\t* s-intman-vxworks.ads, s-intman-vxworks.adb:  Update comments.\n+\n+\t* s-inmaop.ads (Setup_Interrupt_Mask): New procedure\n+\n+\t* s-interr.adb: Add explicit call to Setup_Interrupt_Mask now that\n+\tthis is no longer done in the body of s-taprop\n+\t(Server_Task): Explicitely test for Pending_Action in case\n+\tSystem.Parameters.No_Abort is True.\n+\n+\t* s-taasde.adb: Add explicit call to Setup_Interrupt_Mask now that this\n+\tis no longer done in the body of s-taprop\n+\n+2005-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* system-unixware.ads, system-linux-ia64.ads, system-freebsd-x86.ads,\n+\tsystem-lynxos-ppc.ads, system-lynxos-x86.ads, system-linux-x86_64.ads,\n+\tsystem-tru64.ads, system-aix.ads, system-vxworks-sparcv9.ads,\n+\tsystem-vxworks-xscale.ads, system-solaris-x86.ads, system-irix-o32.ads,\n+\tsystem-irix-n32.ads, system-hpux.ads, system-vxworks-m68k.ads,\n+\tsystem-linux-x86.ads, system-vxworks-mips.ads, system-vxworks-mips.ads,\n+\tsystem-os2.ads, system-interix.ads, system-solaris-sparc.ads,\n+\tsystem-solaris-sparcv9.ads, system-vms.ads, system-mingw.ads,\n+\tsystem-vms-zcx.ads, system-vxworks-ppc.ads, system.ads,\n+\tsystem-darwin-ppc.ads, system-vxworks-x86.ads, system-linux-ppc.ads,\n+\tsystem-linux-hppa.ads, system-vms_64.ads,\n+\tsystem-vxworks-alpha.ads: Minor comment update for\n+\tAI-362 (unit is Pure).\n+\n+\t* a-chahan.ads, a-chahan.adb: Move Wide_Wide functions to Conversions\n+\tAdd pragma Pure_05 for AI-362\n+\tMake remaining conversion functions obsolescent in Ada 95\n+\n+\t* impunit.adb: Change a-swunha to a-swuwha and a-szunha to a-szuzha\n+\tMake Ada.Wide_Characters[.Unicode] available in Ada 95 mode\n+\tAdd entries for a-wichun and a-zchuni\n+\tAdd a-widcha a-zchara for AI-395\n+\tAdd a-chacon (Ada.Characters.Conversions) to list of Ada 2005 routines\n+\n+\t* Makefile.rtl: Change a-swunha to a-swuwha and a-szunha to a-szuzha\n+\tAdd entries for a-wichun.o and a-zchuni.o\n+\tEntries for a-widcha.o and a-zchara.o\n+\tAdd entry for a-chacon.o\n+\n+\t* a-ztenau.adb: Add with of Ada.Characters.Conversions\n+\n+\t* a-chacon.ads, a-chacon.adb: New files.\n+\n+\t* a-taside.adb, a-exstat.adb, a-excach.adb: Add warnings off to allow\n+\tcategorization violations.\n+\n+\t* a-strmap.ads: Add pragma Pure_05 for AI-362\n+\t* a-strmap.ads: Add note on implicit categorization for AI-362\n+\n+\t* a-tgdico.ads, a-taside.ads: Add pragma Preelaborate_05 for AI-362\n+\n+\t* par-prag.adb: Dummy entry for pragma Persistent_BSS\n+\tSet Ada_Version_Explicit, for implementation of AI-362\n+\tAdd processing for pragma Pure_05 and Preelaborate_05\n+\tAdd entry for Assertion_Policy pragma\n+\n+\t* sem.adb: Make sure predefined units are compiled with GNAT_Mode true\n+\twhen needed for proper processing of categorization stuff\n+\n+\t* sem_cat.adb: \n+\tFor several cases, make errors in preealborate units warnings,\n+\tinstead of errors, if GNAT_Mode is set. For AI-362.\n+\n+\t* sem_elab.adb (Check_Elab_Call): Call to non-static subprogram in\n+\tpreelaborate unit is now warning if in GNAT mode\n+\n+\t* s-stoele.ads: Document AI-362 for pragma preelaborate\n+\n+2005-06-14  Doug Rupp  <rupp@adacore.com>\n+\n+\t* s-parame-vms.ads, s-parame-hpux.ads, s-parame-vms-restrict.ads,\n+\ts-parame-ae653.ads, s-parame.ads, s-parame-vxworks.ads:\n+\tDefault_Exception_Msg_Max_Length: new parameter.\n+\n+\t* a-except.ads: (Exception_Msg_Max_Length): Set to\n+\tSystem.Parameters.Default_Exception_Msg_Max_Length\n+\tAdd pragma Preelaborate_05 for AI-362\n+\tAdd warnings off to allow categorization violations for AI-362\n+\n+2005-06-14  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatsym.adb: Adapt to modification of package Symbols: procedure\n+\tProcess is now in package Processing.\n+\n+\t* symbols.ads, symbols.adb:\n+\t(Processing): New package, containing procedure Process\n+\n+\t* symbols-vms-alpha.adb: \n+\tReplaced by symbols-vms.adb and symbols-processing-vms-alpha.adb\n+\n+\t* symbols-vms.adb, symbols-processing-vms-alpha.adb,\n+\tsymbols-processing-vms-ia64.adb: New files.\n+\n+2005-06-14  Pascal Obry  <obry@adacore.com>\n+\n+\t* mlib-tgt-mingw.adb (Build_Dynamic_Library): Replace the previous\n+\timplementation. This new version generates the proper DllMain routine\n+\tto initialize the SAL. The DllMain is generated in Ada and compiled\n+\tbefore being added as option to the library build command.\n+\n+2005-06-14  Doug Rupp  <rupp@adacore.com>\n+\t    Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.c (__gnat_to_canonical_file_spec): Check for error returns in\n+\tcall to decc$translate_vms.\n+\t(__gnat_locate_regular_file): Check if the path_val contains quotes. We\n+\tneed to remove those quotes before catenating the filename.\n+\t(__gnat_locate_exec_on_path): improvements to the Win32 section:\n+\t* avoid allocating the memory twice for better efficiency;\n+\t* allocate 32K buffer for environment expansion as suggested by MSDN;\n+\t* prepend \".;\" to the path so that current directory is searched too.\n+\n+2005-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-except.adb (Exception_Identity): return Null_Id for null occurrence\n+\tinstead of raising CE (AI-241)\n+\tAdd warnings off to allow categorization violations for AI-362\n+\n+2005-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* ali-util.adb, gnatbind.adb: Remove references to\n+\tForce_RM_Elaboration_Order.\n+\n+\t* switch-b.adb: Remove recognition of -f switch\n+\n+2005-06-14  Pascal Obry  <obry@adacore.com>\n+\n+\t* a-stzunb.adb, a-stwiun.adb, a-strunb.adb (Realloc_For_Chunk): New\n+\timplementation which is slightly more efficient.\n+\n+2005-06-14  Gary Dismukes  <dismukes@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\t    Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Allocator_Expression): When an initialized\n+\tallocator's designated type is a class-wide type, and compiling for\n+\tAda 2005, emit a run-time check that the accessibility level of the\n+\ttype given in the allocator's expression is not deeper than the level\n+\tof the allocator's access type.\n+\n+\t(Tagged_Membership): Modified to gives support to abstract interface\n+\ttypes.\n+\n+\t* a-tags.ads, a-tags.adb (type Type_Specific_Data): Add component\n+\tAccess_Level.\n+\t(Descendant_Tag): New predefined function\n+\t(Is_Descendant_At_Same_Level): New predefined function\n+\t(Get_Access_Level): New private function\n+\t(Set_Access_Level): New private procedure\n+\t(IW_Membership): New function. Given the tag of an object and the tag\n+\tassociated with an interface, evaluate if the object implements the\n+\tinterface.\n+\t(Register_Interface_Tag): New procedure used to initialize the table of\n+\tinterfaces used by the IW_Membership function.\n+\t(Set_Offset_To_Top): Initialize the Offset_To_Top field in the prologue\n+\tof the dispatch table.\n+\t(Inherit_TSD): Modified to copy the table of ancestor tags plus the\n+\ttable of interfaces of the parent.\n+\t(Expanded_Name): Raise Tag_Error if the passed tag equals No_Tag.\n+\t(External_Tag): Raise Tag_Error if the passed tag equals No_Tag.\n+\t(Parent_Tag): Return No_Tag in the case of a root-level tagged type,\n+\tand raise Tag_Error if the passed tag equalis No_Tag, to conform with\n+\tAda 2005 semantics for the new predefined function.\n+\n+\t* exp_attr.adb (Expand_N_Attribute, case Attribute_Input): Generate\n+\tcall to Descendant_Tag rather than Internal_Tag.\n+\t(Expand_N_Attribute, case Attribute_Output): Emit a check to ensure that\n+\tthe accessibility level of the attribute's Item parameter is not deeper\n+\tthan the level of the attribute's prefix type. Tag_Error is raised if\n+\tthe check fails. The check is only emitted for Ada_05.\n+\t(Find_Stream_Subprogram): If a TSS exists on the type itself for the\n+\trequested stream attribute, use it.\n+\t(Expand_N_Attribute_Reference): If the designated type is an interface\n+\tthen rewrite the referenced object as a conversion to force the\n+\tdisplacement of the pointer to the secondary dispatch table.\n+\t(Expand_N_Attribute_Reference, case 'Constrained): Return false if this\n+\tis a dereference of an object with a constrained partial view.\n+\n+\t* exp_ch5.adb (Expand_N_Return_Statement): When a function's result\n+\ttype is a class-wide type, emit a run-time check that the accessibility\n+\tlevel of the returned object is not deeper than the level of the\n+\tfunction's master (only when compiling for Ada 2005).\n+\n+\t* exp_disp.ads, exp_disp.adb (Ada_Actions, Action_Is_Proc,\n+\tAction_Nb_Arg): Add entries for new Get_Access_Level and\n+\tSet_Access_Level routines in these tables.\n+\t(Make_DT): Generate a call to set the accessibility level of the\n+\ttagged type in its TSD.\n+\t(Make_DT): Code cleanup. The functionality of generating all the\n+\tsecondary dispatch tables has been moved to freeze_record_type.\n+\t(Make_Abstract_Interface_DT): Minor code cleanup.\n+\t(Set_All_DT_Position): Code cleanup. As part of the code cleanup\n+\tthis subprogram implements a new algorithm that provides the\n+\tsame functionality and it is more clear in case of primitives\n+\tassociated with abstract interfaces.\n+\t(Set_All_Interfaces_DTC_Entity): Removed. As part of the code\n+\tclean up, the functionality of this subprogram is now provided\n+\tby Set_All_DT_Position.\n+\t(Write_DT): New subprogram: a debugging procedure designed to be called\n+\twithin gdb to display the dispatch tables associated with a tagged\n+\ttype.\n+\t(Collect_All_Interfaces): New subprogram that collects the whole list\n+\tof interfaces that are directly or indirectly implemented by a tagged\n+\ttype.\n+\t(Default_Prim_Op_Position): New subprogram that returns the fixed\n+\tposition in the dispatch table of the default primitive operations.\n+\t(Expand_Interface_Actuals): New subprogram to generate code that\n+\tdisplaces all the actuals corresponding to class-wide interfaces to\n+\treference the interface tag of the actual object.\n+\t(Expand_Interface_Conversion): New subprogram. Reference the base of\n+\tthe object to give access to the interface tag associated with the\n+\tsecondary dispatch table.\n+\t(Expand_Interface_Thunk): New subprogram that generates the code of the\n+\tthunk. This is required for compatibility with the C+ ABI.\n+\t(Make_Abstract_Interface_DT): New subprogram that generate the\n+\tdeclarations for the secondary dispatch tables associated with an\n+\tabstract interface.\n+\t(Set_All_Interfaces_DTC_Entity): New subprogram that sets the DTC_Entity\n+\tattribute for each primitive operation covering interface subprograms\n+\t(Expand_Dispatching_Call, Fill_DT_Entry, Make_DT, Set_All_DT_Position):\n+\tThese subprograms were upgraded to give support to abstract interfaces\n+\n+\t* rtsfind.ads (type RE_Id): Add RE_Descendant_Tag,\n+\tRE_Is_Descendant_At_Same_Level, RE_Get_Access_Level, and\n+\tRE_Set_Access_Level.\n+\t(RE_Unit_Table): Add entries for new Ada.Tags operations.\n+\tAdd support to call the followig new run-time subprograms:\n+\tIW_Membership, Register_Interface_Tag, and Set_Offset_To_Top\n+\n+\t* sem_ch3.adb (Constant_Redeclaration): Allow a deferred constant to\n+\tmatch its full declaration when both have an access definition with\n+\tstatically matching designated subtypes.\n+\t(Analyze_Component_Declaration): Delete commented out code that was\n+\tincorrectly setting the scope of an anonymous access component's type.\n+\t(Process_Discriminants): Set Is_Local_Anonymous_Access for the type of\n+\tan access discriminant when the containing type is nonlimited.\n+\t(Make_Incomplete_Type_Declaration): Create an incomplete type\n+\tdeclaration for a record type that includes self-referential access\n+\tcomponents.\n+\t(Check_Anonymous_Access_Types): Before full analysis of a record type\n+\tdeclaration, create anonymous access types for each self-referential\n+\taccess component.\n+\t(Analyze_Component_Declaration, Array_Type_Declaration): Indicate that\n+\tan access component in this context is a Local_Anonymous_Access, for\n+\tproper accessibility checks.\n+\t(Access_Definition): Set properly the scope of the anonymous access type\n+\tcreated for a stand-alone access object.\n+\t(Find_Type_Of_Object): An object declaration may be given with an access\n+\tdefinition.\n+\t(Complete_Subprograms_Derivation): New subprogram used to complete\n+\ttype derivation of private tagged types implementing interfaces.\n+\tIn this case some interface primitives may have been overriden\n+\twith the partial-view and, instead of re-calculating them, they\n+\tare included in the list of primitive operations of the full-view.\n+\t(Build_Derived_Record_Type): Modified to give support to private\n+\ttypes implemening interfaces.\n+\t(Access_Definition): Reject ALL on anonymous access types.\n+\t(Build_Derived_Record_Type): In the case of Ada 2005, allow a tagged\n+\ttype derivation to occur at a deeper accessibility level than the\n+\tparent type.\n+\tFor the case of derivation within a generic body however, disallow the\n+\tderivation if the derived type has an ancestor that is a formal type\n+\tdeclared in the formal part of an enclosing generic.\n+\t(Analyze_Object_Declaration): For protected objects, remove the check\n+\tthat they cannot contain interrupt handlers if not declared at library\n+\tlevel.\n+\t(Add_Interface_Tag_Components): New subprogram to add the tag components\n+\tcorresponding to all the abstract interface types implemented by a\n+\trecord type or a derived record type.\n+\t(Analyze_Private_Extension_Declaration, Build_Derived_Record_Type,\n+\tDerived_Type_Declaration, Find_Type_Name, Inherit_Components,\n+\tProcess_Full_View, Record_Type_Declaration): Modified to give\n+\tsupport to abstract interface types\n+\t(Collect_Interfaces): New subprogram that collects the list of\n+\tinterfaces that are not already implemented by the ancestors\n+\t(Process_Full_View): Set flag Has_Partial_Constrained_View appropriately\n+\twhen partial view has no discriminants and full view has defaults.\n+\t(Constrain_Access): Reject a constraint on a general access type\n+\tif the discriminants of the designated type have defaults.\n+\t(Access_Subprogram_Declaration): Associate the Itype node with the inner\n+\tfull-type declaration or subprogram spec. This is required to handle\n+\tnested anonymous declarations.\n+\t(Analyze_Private_Extension_Declaration, Build_Derived_Record_Type,\n+\tDerived_Type_Declaration, Find_Type_Name, Inherit_Components,\n+\tProcess_Full_View, Record_Type_Declaration): Modified to give\n+\tsupport to abstract interface types\n+\t(Derive_Subprograms): Addition of a new formal to indicate if\n+\twe are in the case of an abstact-interface derivation\n+\t(Find_Type_Of_Subtype_Indic): Moved from the body of the package\n+\tto the specification because it is requied to analyze all the\n+\tidentifiers found in a list of interfaces\n+\n+\t* debug.adb: Complete documentation of flag \"-gnatdZ\"\n+\n+\t* exp_ch3.adb: Implement config version of persistent_bss pragma\n+\t(Check_Stream_Attributes): Use Stream_Attribute_Available instead of\n+\ttesting for TSS presence to properly enforce visibility rules.\n+\t(Freeze_Record_Type): Code cleanup. Modified to call the subprogram\n+\tMake_Abstract_Interfaces_DT to generate the secondary tables\n+\tassociated with abstract interfaces.\n+\t(Build_Init_Procedure): Modified to initialize all the tags\n+\tcorresponding.\n+\t(Component_Needs_Simple_Initialization): Similar to other tags,\n+\tinterface tags do not need initialization.\n+\t(Freeze_Record_Type): Modified to give support to abstract interface\n+\ttypes.\n+\t(Expand_N_Object_Declaration): Do not generate an initialization for\n+\ta scalar temporary marked as internal.\n+\n+\t* exp_ch6.adb (Add_Simple_Call_By_Copy_Code): Handle properly an\n+\tin-out parameter that is a component in an initialization procedure,\n+\twhose constraint might depend on discriminants, and that may be\n+\tmisaligned because of packing or representation clauses.\n+\t(Is_Legal_Copy): New predicate to determine whether a possibly\n+\tmisaligned in-out actual can actually be passed by copy/return. This\n+\tis an error in case the type is by_reference, and a warning if this is\n+\tthe consequence of a DEC import pragma on the subprogram.\n+\t(Expand_Call, Freeze_Subprogram): Modified to give support to abstract\n+\tinterface types\n+\t(Expand_Inlined_Call): Mark temporary generated for the return value as\n+\tinternal, so that no useless scalar normalization is generated for it.\n+\t(Expand_N_Subprogram_Declaration): Save unanalyzed body so calls to\n+\tnull procedure can always be inlined.\n+\t(Expand_N_Subprogram_Declaration): If this is the declaration of a null\n+\tprocedure, generate an explicit empty body for it.\n+\n+\t* exp_util.ads, exp_util.adb (Find_Interface_ADT): New subprogram.\n+\tGiven a type implementing an interface, returns the corresponding\n+\taccess_disp_table value.\n+\t(Find_Interface_Tag): New subprogram. Given a type implementing an\n+\tinterface, returns the record component containing the tag of the\n+\tinterface.\n+\t(Find_Interface_Tag): New overloaded subprogram. Subsidiary to the\n+\tprevious ones that return the corresponding tag and access_disp_table\n+\tentities.\n+\t(Is_Predefined_Dispatching_Operation): Determines if a subprogram\n+\tis a predefined primitive operation.\n+\t(Expand_Subtype_From_Expr): If the expression is a selected component\n+\twithin an initialization procedure, compute its actual subtype, because\n+\tthe component may depend on the discriminants of the enclosing record.\n+\n+\t* i-cpp.ads, i-cpp.adb: \n+\tThis package has been left available for compatibility with previous\n+\tversions of the frontend. As part of the new layout this is now a\n+\tdummy package that uses declarations available at a-tags.ads\n+\n+\t* par-ch3.adb (P_Identifier_Declarations): Give an error for use of\n+\t\"constant access\" and \"aliased [constant] access\" when not compiling\n+\twith -gnat05.\n+\tSuppress Ada 2005 keyword warning if -gnatwY used\n+\t(P_Identifier_Declarations): Add support for object declarations with\n+\taccess definitions.\n+\t(Private_Extension_Declaration): Complete the documentation\n+\t(P_Derived_Type_Def_Or_Private_Ext_Decl): Fill the inteface_list\n+\tattribute in case of private extension declaration\n+\t(P_Type_Declaration): Mark as \"abstract\" the type declarations\n+\tcorresponding with protected, synchronized and task interfaces\n+\t(P_Declarative_Items): \"not\" and \"overriding\" are overriding indicators\n+\tfor a subprogram or instance declaration.\n+\n+\t* sem_ch12.adb (Analyze_Subprogram_Instantiation): Verify that an\n+\tinstantiation that is a dispatching operation has controlling access\n+\tparameters that are null excluding.\n+\tSave and restore Ada_Version_Explicit, for implementation of AI-362\n+\t(Validate_Derived_Type_Instance): Add check for abstract interface\n+\ttypes.\n+\t(Analyze_Formal_Package): Establish Instantiation source for the copy of\n+\tthe generic that is created to represent the formal package.\n+\t(Analyze_Package_Instantiation): Instantiate body immediately if the\n+\tpackage is a predefined unit that contains inlined subprograms, and\n+\twe are compiling for a Configurable_Run_Time.\n+\t(Instantiate_Formal_Subprogram): Indicate that null default subprogram\n+\tIf the program has a null default, generate an empty body for it.\n+\n+\t* sem_ch6.adb, sem_ch9.adb (Analyze_Subprograms_Declaration): Update\n+\terror message condition, null procedures are correctly detected now.\n+\t(New_Overloaded_Entity): Bypass trivial overriding indicator check\n+\tfor subprograms in the context of protected types. Instead, the\n+\tindicator is examined in Sem_Ch9 while analysing the subprogram\n+\tdeclaration.\n+\t(Check_Overriding_Indicator): Check consistency of overriding indicator\n+\ton subprogram stubs as well.\n+\t(Analyze_Subprogram_Declaration): Diagnose null procedures declared at\n+\tthe library level.\n+\t(Analize_Subprogram_Specification): When analyzing a subprogram in which\n+\tthe type of the first formal is a concurrent type, replace this type\n+\tby the corresponding record type.\n+\t(Analyze_Subprogram_Body): Undo the previous work.\n+\t(Analyze_Procedure_Call): If the call has the form Object.Op, the\n+\tanalysis of the prefix ends up analyzing the call itself, after which\n+\twe are done.\n+\t(Has_Interface_Formals): New subprogram subsidiary to analyze\n+\tsubprogram_specification that returns true if some non\n+\tclass-wide interface subprogram is found\n+\t(New_Overloaded_Entity): Modified to give support to abstract\n+\tinterface types\n+\t(Conforming_Types): In Ada 2005 mode, conformance checking of anonymous\n+\taccess to subprograms must be recursive.\n+\t(Is_Unchecked_Conversion): Improve the test that recognizes\n+\tinstantiations of Unchecked_Conversion, and allows them in bodies that\n+\tare to be inlined by the front-end. When the body comes from an\n+\tinstantiation, a reference to Unchecked_Conversion will be an\n+\tExpanded_Name, even though the body has not been analyzed yet.\n+\tReplace Is_Overriding and Not_Overriding in subprogram_indication with\n+\tMust_Override and Must_Not_Override, to better express intent of AI.\n+\t(Analyze_Subprogram_Body): If an overriding indicator is given, check\n+\tthat it is consistent with the overrinding status of the subprogram\n+\tat this point.\n+\t(Analyze_Subprogram_Declaration): Indicate that a null procedure is\n+\talways inlined.\n+\tIf the subprogram is a null procedure, indicate that it does not need\n+\ta completion.\n+\n+\t* sem_disp.adb (Check_Controlling_Type): Give support to entities\n+\tavailable through limited-with clauses.\n+\t(Check_Dispatching_Operation): A stub acts like a body, and therefore is\n+\tallowed as the last primitive of a tagged type if it has no previous\n+\tspec.\n+\t(Override_Dispatching_Operation, Check_Dispatching_Operation): Modified\n+\tto give support to abstract interface types\n+\n+\t* sem_res.adb (Valid_Conversion): Perform an accessibility level check\n+\tin the case where the target type is an anonymous access type of an\n+\tobject or component (that is, when Is_Local_Anonymous_Access is true).\n+\tPrevent the special checks for conversions of access discriminants in\n+\tthe case where the discriminant belongs to a nonlimited type, since\n+\tsuch discriminants have their accessibility level defined in the same\n+\tway as a normal component of an anonymous access type.\n+\t(Resolve_Allocator): When an allocator's designated type is a class-wide\n+\ttype, check that the accessibility level of type given in the\n+\tallocator's expression or subtype indication is not statically deeper\n+\tthan the level of the allocator's access type.\n+\t(Check_Discriminant_Use): Diagnose discriminant given by an expanded\n+\tname in a discriminant constraint of a record component.\n+\t(Resolve_Explicit_Dereference): Do not check whether the type is\n+\tincomplete when the dereference is a use of an access discriminant in\n+\tan initialization procedure.\n+\t(Resolve_Type_Conversion): Handle conversions to abstract interface\n+\ttypes.\n+\t(Valid_Tagged_Conversion): The conversion of a tagged type to an\n+\tabstract interface type is always valid.\n+\t(Valid_Conversion): Modified to give support to abstract interface types\n+\t(Resolve_Actuals): Enable full error reporting on view conversions\n+\tbetween unrelated by_reference array types.\n+\tThe rule for view conversions of arrays with aliased components is\n+\tweakened in Ada 2005.\n+\tCall to obsolescent subprogram is now considered to be a violation of\n+\tpragma Restrictions (No_Obsolescent_Features).\n+\t(Check_Direct_Boolean_Operator): If the boolean operation has been\n+\tconstant-folded, there is nothing to check.\n+\t(Resolve_Comparison_Op, Resolve_Equality_Op, Resolve_Boolean_Op): Defer\n+\tcheck on possible violation of restriction No_Direct_Boolean_Operators\n+\tuntil after expansion of operands, to prevent spurious errors when\n+\toperation is constant-folded.\n+\n+\t* sem_type.ads, sem_type.adb (Covers, Intersect_Types, Specific_Type,\n+\tHas_Compatible_Type): Modified to give support to abstract interface\n+\ttypes.\n+\t(Interface_Present_In_Ancestor): New function to theck if some ancestor\n+\tof a given type implements a given interface\n+\n+\t* sem_ch4.adb (Analyze_Call): Handle properly an indirect call whose\n+\tprefix is a parameterless function that returns an access_to_procedure.\n+\t(Transform_Object_Operation): Handle properly function calls of the\n+\tform Obj.Op (X), which prior to analysis appear as indexed components.\n+\t(Analyze_One_Call): Complete the error notification to help new Ada\n+\t2005 users.\n+\t(Analyze_Allocator): For an allocator without an initial value, where\n+\tthe designated type has a constrained partial view, a discriminant\n+\tconstraint is illegal.\n+\n+2005-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-textio.adb (Set_Col): Fix two errors noticed recently, having to\n+\tdo with treatment of Set_Col when positioned at end of line character.\n+\n+2005-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* atree.adb: (Elist*): Protect against uninitialized field\n+\n+2005-06-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* checks.adb (Install_Null_Excluding_Check): Do not generate checks\n+\tfor an attribute reference that returns an access type.\n+\t(Apply_Discriminant_Check): No need for check if (designated) type has\n+\tconstrained partial view.\n+\n+\t(Apply_Float_Conversion_Check): Generate a short-circuit expression for\n+\tboth bound checks, rather than a conjunction.\n+\t(Insert_Valid_Check): If the expression is an actual that is an indexed\n+\tcomponent of a bit-packed array, force expansion of the packed element\n+\treference, because it is specifically inhibited elsewhere.\n+\n+2005-06-14  Vincent Celier  <celier@adacore.com>\n+\n+\t* clean.adb (Clean_Project): Correctly delete executable specified as\n+\tabsolute path names.\n+\n+\t* make.adb (Gnatmake): Allow relative executable path names with\n+\tdirectory information even when project files are used.\n+\t(Change_To_Object_Directory): Fail gracefully when unable to change\n+\tcurrent working directory to object directory of a project.\n+\t(Gnatmake): Remove exception handler that could no longer be exercized\n+\t(Compile_Sources.Compile): Use deep copies of arguments, as some of them\n+\tmay be deallocated by Normalize_Arguments.\n+\t(Collect_Arguments): Eliminate empty arguments\n+\n+\t* gnatcmd.adb (All_Projects): New Boolean flag, initialized to False,\n+\tand set to True when -U is used for GNAT PRETTY or GNAT METRIC.\n+\t(Check_Project): Return False when Project is No_Project. Return True\n+\twhen All_Projects is True.\n+\t(GNATCmd): Recognize switch -U for GNAT PRETTY and GNAT METRIC and set\n+\tAll_Projects to True.\n+\tMinor reformatting\n+\n+2005-06-14  Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\t    Thomas Quinot  <quinot@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\t    Hristian Kirtchev  <kirtchev@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Is_Local_Anonymous_Access): New flag on\n+\tanonymous access types, to indicate that the accessibility level of\n+\tthe type is determined by that of the enclosing declaration.\n+\t(Has_Persistent_BSS): New flag\n+\t(Set_Is_Primitive_Wrapper): Upgrade the barrier to allow the usage\n+\tof this attribute with functions.\n+\t(Is_Primitive_Wrapper): Remove the barrier.\n+\t(Has_Specified_Stream_Input, Has_Specified_Stream_Output,\n+\tHas_Specified_Stream_Read, Has_Specified_Stream_Write):\n+\tNew subprograms.\n+\t(Set_Has_Specified_Stream_Input, Set_Has_Specified_Stream_Output,\n+\tSet_Has_Specified_Stream_Read, Set_Has_Specified_Stream_Write):\n+\tNew subprograms.\n+\t(Is_Pure_Unit_Access_Type): New flag\n+\t(Abstract_Interfaces): Complete the assertion to cover all usages.\n+\t(Set_Is_Interface): Complete the assertion to cover all usages.\n+\t(Is_Primitive_Wrapper): New attribute.\n+\t(Is_Obsolescent): Now applies to all entities (though it is only set\n+\tfor subprograms currently)\n+\tNew flag:  Has_Constrained_Partial_View, to implemente Ada 2005 AI-363,\n+\twhich solves various problems concerning access subtypes.\n+\t(Has_Persistent_BSS): New flag\n+\t(Is_Primitive_Wrapper, Set_Primitive_Wrapper): Code cleanup.\n+\tRemove these subprograms because this attribute is currently\n+\tnot used.\n+\tNew entity flags:\n+\tHas_Specified_Stream_Input (Flag190)\n+\tHas_Specified_Stream_Output (Flag191)\n+\tHas_Specified_Stream_Read (Flag192)\n+\tHas_Specified_Stream_Write (Flag193)\n+\tPresent in all type and subtype entities. Set for a given view if the\n+\tcorresponding stream-oriented attribute has been defined by an\n+\tattribute definition clause. When such a clause occurs, a TSS is set\n+\ton the underlying full view; the flags are used to track visibility of\n+\tthe attribute definition clause for partial or incomplete views.\n+\t(Is_Pure_Unit_Access_Type): New flag\n+\tClarify use of Is_Internal.\n+\t(Is_Primitive_Wrapper): New attribute present in primitive subprograms\n+\tinternally generated to wrap the invocation of tasks and protected\n+\ttypes that implement interfaces.\n+\t(Implementation_Base_Type): Documentation correction\n+\t(Is_Obsolescent): Now applies to all entities (though it is only set\n+\tfor subprograms currently)\n+\tNew flag:  Has_Constrained_Partial_View, to implement Ada 2005 AI-363,\n+\twhich solves various problems concerning access subtypes.\n+\n+\t* exp_ch9.adb (Type_Conformant_Parameters): Introduce mode conformance\n+\tfor examined parameters. Identify unequal parameter list lengths as\n+\tnon-conformant parameters.\n+\t(Overriding_Possible): Do not check for \"All\" qualifier in declaration\n+\tof controlling access parameter, following prescription of AI-404.\n+\t(Build_Entry_Wrapper_Spec, Build_Entry_Wrapper_Body): New subprograms\n+\tthat build the procedure body that wraps an entry invocation\n+\t(Build_Corresponding_Record, Build_Protected_Sub_Specification,\n+\tExpand_N_Protected_Body, Expand_N_Protected_Type_Declaration,\n+\tExpand_N_Task_Body, Expand_N_Task_Type_Declaration): Modified to\n+\tgive support to abstract interface types\n+\n+\t* freeze.adb (Freeze_Entity): Issue error message if\n+\tIs_Pure_Unit_Access_Type set, unless we are in Ada 2005 mode and the\n+\ttype has no storage pool (Ada 2005) AI-366.\n+\tAlso modified to give support to abstract interface types\n+\t(Freeze_Subprogram): Issue an error for a dispatching subprogram with an\n+\tInline_Always pragma.\n+\n+\t* par-ch9.adb (P_Task_Items): Reserved words \"not\" or \"overriding\" may\n+\tnow begin an entry declaration.\n+\t(P_Entry_Or_Subprogram_With_Indicator): New procedure in\n+\tP_Protected_Operation_Declaration_Opt. Parse an entry declaration or\n+\ta subprogram declaration preceded by an overriding indicator.\n+\t(P_Protected_Operation_Declaration_Opt): Add case for parsing entry\n+\tdeclarations or subprogram declarations preceded by reserved words\n+\t\"not\" or \"overriding\".\n+\t(P_Entry_Declaration): Update comment. Parse and check overriding\n+\tindicator, set semantic flags of entry declarations.\n+\t(P_Task): New error message in case of private applied\n+\tto a task type declaration.\n+\t(P_Protected): New error message in case of private applied\n+\tto a task type declaration.\n+\n+\t* sem_ch7.adb (Preserve_Full_Attributes): Modified to handle the case\n+\tin which the full view of a type implementing an interface is a\n+\tconcurrent type.\n+\t(Has_Overriding_Pragma): Remove obsolete implementation of AI-218.\n+\tDeclare_Inherited_Private_Subprograms): If an explicit operation\n+\toverrides an operation that is inherited in the private part, mark the\n+\texplicit one as overriding, to enable overriding indicator checks.\n+\t(Preserve_Full_Attributes): Propagate Is_Unchecked_Union attribute from\n+\tfull view to partial view, to simplify handling in back-end.\n+\n+\t* sprint.adb: Print interface lists where needed: derived types,\n+\tprotected types, task types.\n+\toutput \"is null\" for null procedures. Part of implementation of\n+\n+\t* sem_cat.adb (Validate_Access_Type_Declaration): Implement AI-366\n+\trelaxation of rules for access types in pure, shared passive partitions.\n+\n+\t* exp_strm.adb (Build_Mutable_Record_Read_Procedure): Reorganize to\n+\tfirst read discriminants into temporary objects, performing checks on\n+\tthe read values, then possibly performing discriminant checks on the\n+\tactual (if it is constrained), and only finally reading the components\n+\tinto a constrained temporary object.\n+\t(Build_Elementary_Input_Call): Adjust the specific circuitry for the\n+\tcase of reading discriminants of a mutable record type to recognize\n+\tthe new form of the code generated by\n+\tBuild_Mutable_Record_Read_Procedure.\n+\n+\t* exp_tss.ads, exp_tss.adb (Make_Init_Proc_Name): Reimplement in terms\n+\tof a simple call to Make_TSS_Name.\n+\t(Make_TSS_Name_Local): Add the TSS name as the last thing in the name\n+\tbuffer, in order for Is_TSS to work correctly on local TSS names.\n+\n+\t* sem_attr.ads, sem_attr.adb (Resolve_Attribute, case 'Access): Use flag\n+\tIs_Local_Anonymous_Access to check legaliy of attributes in the\n+\tcontext of  access components and stand-alone access objects.\n+\t(Stream_Attribute_Available): In Ada 95 mode, a stream attribute is\n+\ttreated as available for a limited private type if there is an\n+\tattribute_definition_clause that applies to its full view, but not in\n+\tother cases where the attribute is available for the full view\n+\t(specifically, the sole fact that the full view is non-limited does not\n+\tmake the attribute available for the partial view).\n+\t(Build_Access_Subprogram_Type): Diagnose attempt to apply 'access to a\n+\tnon-overloaded intrinsic subprogram.\n+\t(Check_Stream_Attribute): Reject an attribute reference for an\n+\tunavailable stream attribute even if the prefix is not a limited type\n+\t(case of a 'Input attribute reference for an abstract, non-classwide\n+\ttype)\n+\t(Stream_Attribute_Available): New function to determine whether a stream\n+\tattribute is available at a place.\n+\t(Check_Attribute): Use Stream_Attribute_Available instead of just\n+\ttesting for TSS presence on the implementation base type.\n+\t(Analyze_Attribute): Modified to give support to task interfaces.\n+\t(Analyze_Access_Attribute): Add error check for use of an Access (or\n+\tUnrestricted_Access) attribute with a subprogram marked as\n+\tInline_Always.\n+\t(Analyze_Attribute, case Attribute_Address): Add error check for use of\n+\tan Address attribute with a subprogram marked as Inline_Always.\n+\tUpdate Eval_Attribute to handle new value of Width from AI-395\n+\n+\t* sem_ch13.adb (Analyze_Stream_TSS_Definition): New subprogram.\n+\t(Analyze_Attribute_Definition_Clause, cases Input, Output, Read, Write):\n+\tFactor common code across the stream-oriented attribute circcuits into\n+\ta new subprogram, Analyze_Stream_TSS_Definition. The new uniform\n+\tprocessing is functionally identical to the previous duplicated one,\n+\texcept that an expression that denotes an abstract subprogram will now\n+\tbe rejected, as mandated by AI-195 item 5.\n+\n+\t* sem_util.ads, sem_util.adb (Type_Access_Level): Use flag\n+\tIs_Local_Anonymous_Access to apply accessibility checks to access\n+\tcomponents and stand-alone access objects.\n+\t(Has_Discriminant_Dependent_Constraint): Moved to spec for use\n+\telsewhere.\n+\t(Is_Potentially_Persistent_Type): New function\n+\t(Is_Dependent_Component_Of_Mutable_Object): If the enclosing object is\n+\ta heap-object whose type has a constrained partial view, the object is\n+\tunconstrained and the component may depend on a discriminant, making its\n+\trenaming illegal.\n+\n+\t* sinfo.ads, sinfo.adb\n+\t(Must_Not_Override): Flag applicable to N_Entry_Declaration.\n+\t(Must_Override): Flag applicable to N_Entry_Declaration.\n+\tIndicate that interface_list can appear in single task and single\n+\tprotected declarations.\n+\tReplace Is_Overriding and Not_Overriding with Must_Override and\n+\tMust_Not_Override, to better express intent of AI.\n+\tIs_Overriding, Not_Overriding: Ada2005 flags that indicate the presence\n+\tof an overriding indicator in a subprogram or instance.\n+\tAda 2005 (AI-248) Null_Present can appear in a procedure specification.\n+\tAdd the overriding indicator [[not] overriding] construct to the\n+\tfollowing grammar productions:\n+\t ENTRY_DECLARATION\n+\t GENERIC_INSTANTIATION\n+\t SUBPROGRAM_SPECIFICATION\n+\n+\t* par-ch10.adb (P_Compilation_Unit): Subprogram declaration or body\n+\tcan start with an overriding indicator.\n+\n+\t* par-ch6.adb (P_Subprogram): Recognize overriding indicator, and set\n+\tflags accordingly on subrogram specifications or instances.\n+\n+\t* sem_ch8.adb: \n+\t(Analyze_Subprogram_Renaming): For a renaming_as_body, verify that the\n+\toverriding_indicator, if present, is consistent with status of spec.\n+\tImprove error message for null-excluding checks on controlling access\n+\tparameters.\n+\t(Check_In_Previous_With_Clause): Protect the frontend against\n+\tpreviously reported critical errors in the context clauses.\n+\tSave and restore Ada_Version_Explicit, for implementation of AI-362\n+\t(Analyze_Subprogram_Renaming): If the new entity is a dispatching\n+\toperation verify that controlling formals of the renamed entity that\n+\tare access parameters are explicitly non-null.\n+\t(Find_Expanded_Name): Improve error message when prefix is an illegal\n+\treference to a private child unit.\n+\n+\t* exp_imgv.adb, s-imgwch.ads, s-imgwch.adb, s-valwch.adb,\n+\ts-valwch.ads, s-widwch.adb, s-widwch.ads, s-wwdcha.adb, s-wwdwch.adb: \n+\tRewrite to correspond to new wide character names in AI-395\n+\n+        * par-ch12.adb (P_Formal_Subprogram_Declaration): Recognize null\n+        default procedures.\n+\n+2005-06-14  Ed Schonberg  <schonberg@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* errout.ads, errout.adb (Error_Msg_NW): Only emit warning on user\n+\tcode, not on the bodies of predefined operations, to cut down on\n+\tspurious noise.\n+\n+2005-06-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Aggr_Size_OK): An array with no components can always\n+\tbe expanded in place. The size computation does not require a\n+\tsubtraction, which would raise an exception on a compiler built with\n+\tassertions when the upper bound is Integer'first.\n+\t(Flatten): For an array of composite components, take into account the\n+\tsize of the components to determine whether it is safe to expand the\n+\tarray into a purely positional representation.\n+\n+2005-06-14  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch2.adb (Param_Entity): Take the case of an expanded_name\n+\tdenoting a formal parameter into account.\n+\n+2005-06-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch7.adb (Find_Node_To_Be_Wrapped): If the node appears within\n+\tthe entry_call alternative of a conditional entry call, wrap the\n+\tconditional entry call itself.\n+\n+2005-06-14  Nicolas Setton  <setton@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_dbug.ads, exp_dbug.adb (Get_Variant_Part): Fix the encoding of\n+\tthe \"simple_choice\" member in a variant record, in accordance with the\n+\tdescription in the package spec: the information output for a constant\n+\tshould be \"S number\", not \"SS number\".\n+\t(Get_Encoded_Name): Return at once if not generating code. Avoids name\n+\toverflow problem when compiling with -gnatct, for ASIS/gnatmetrics.\n+\n+2005-06-14  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_dist.adb (Add_RACW_Primitive_Declarations_And_Bodies): For an\n+\tRACW without any primitives, do not generate the if statement for\n+\tdispatching by name in the PolyORB/DSA case, as it would be malformed\n+\t(it would have an Elsif_Parts list that is not No_List, but with a\n+\tlength of 0).\n+\n+2005-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_intr.adb, par-ch5.adb: Minor fix to error message text\n+\n+2005-06-14  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* fe.h: Add entry for Opt.Exception_Locations_Suppressed so that gigi\n+\tcan determine whether pragma Suppress_Exception_Locations is in effect.\n+\n+\t* utils2.c (build_call_raise): Do not pass the file name to the\n+\texception handler if pragma Suppress_Exception_Locations is in effect.\n+\t(build_allocator): Add and process arg IGNORE_INIT_TYPE.\n+\n+2005-06-14  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* g-debpoo.adb (Deallocate, Dereference): Improve output.\n+\n+2005-06-14  Nicolas Roche  <roche@adacore.com>\n+\n+\t* g-diopit.adb (Wildcard_Iterator): Return directly if Path is equal\n+\tto \"\"\n+\t(Next_Level): Fix minor bug in handling of ../dir case\n+\t(Read): Add dir separator to Directory name so that \"\" is understood as\n+\t \"/\"\n+\n+2005-06-14  Pascal Obry  <obry@adacore.com>\n+\n+\t* g-dynhta.ads, g-dynhta.adb (Reset): Free the table itself after\n+\treleasing the items.\n+\n+2005-06-14  Vincent Celier  <celier@adacore.com>\n+\t    Cyrille Comar  <comar@adacore.com>\n+\n+\t* g-os_lib.ads, g-os_lib.adb (Non_Blocking_Spawn): Two new versions\n+\twith output file descriptor and with output file name.\n+\t(Dup, Dup2): Now global procedures as they are used by two subprograms\n+\t(Copy): Allocate the 200K buffer on the heap rather than on the stack.\n+\n+2005-06-14  Thomas Quinot  <quinot@adacore.com>\n+\n+\tPR ada/6717\n+\n+\t* g-socket.ads, g-socket.adb (Inet_Addr): Special case the all-ones\n+\tbroadcast address.\n+\t(Create_Selector): Bind listening socket used to create the signalling\n+\tsocket pair to 127.0.0.1 to limit the scope for 'theft' of connection.\n+\tSet listen backlog to 1 to ensure that we detect socket theft by a\n+\tfailure of our own connect(2) call.\n+\t(Check_Selector): Improve documentation of the selector mechanism.\n+\t(Broadcast_Inet_Addr): New constant.\n+\n+2005-06-14  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* layout.adb (Discrimify): Remove resetting of Vtype to the underlying\n+\ttype which turns out to be an incomplete and incorrect fix.\n+\t(Layout_Array_Type): Use Underlying_Type when checking whether the scope\n+\tof the type is declared in a record (for determination of insertion\n+\ttype).\n+\t(SO_Ref_From_Expr): Test whether Vtype denotes a partial or full view of\n+\ta private type and ensure that the primary entity is used for the type\n+\tof the newly created function's V formal by taking the Etype of the\n+\tview.\n+\n+2005-06-14  Javier Miranda  <miranda@adacore.com>\n+\t    Jose Ruiz  <ruiz@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* lib-load.ads, lib-load.adb (Load_Unit): Addition of a new parameter\n+\tthat indicates if we are parsing a compilation unit found in a\n+\tlimited-with clause.\n+\tIt is use to avoid the circularity check.\n+\n+\t* par.ads, par.adb (Par): Addition of a new parameter to indicate if\n+\twe are parsing a compilation unit found in a limited-with clause. This\n+\tis use to avoid the circularity check.\n+\n+\t* par-load.adb (Load): Indicate Lib.Load_Unit if we are loading the\n+\tunit as a consequence of parsing a limited-with clause. This is used\n+\tto avoid the circularity check.\n+\n+\t* sem_ch10.adb: Suppress Ada 2005 unit warning if -gnatwY used\n+\t(Analyze_Context): Limited-with clauses are now allowed\n+\tin more compilation units.\n+\t(Analyze_Subunit_Context, Check_Parent): Protect the frontend\n+\tagaints previously reported critical errors in context clauses\n+\t(Install_Limited_Withed_Unit): Code cleanup plus static detection\n+\tof two further errors: renamed subprograms and renamed packages\n+\tare not allowed in limited with clauses.\n+\t(Install_Siblings): Do not install private_with_clauses on the package\n+\tdeclaration for a non-private child unit.\n+\t(Re_Install_Parents): When a parent of the subunit is reinstalled,\n+\treset visibility of child units properly.\n+\t(Install_Withed_Unit): When a child unit appears in a with_clause of its\n+\tparent, it is immediately visible.\n+\n+2005-06-14  Ed Schonberg  <schonberg@adacore.com>\n+\t    Emmanuel Briot  <briot@adacore.com>\n+\n+\t* lib-xref.ads, lib-xref.adb (Generate_Definition): Treat any entity\n+\tdeclared within an inlined body as referenced, to prevent spurious\n+\twarnings.\n+\t(Output_One_Ref): If an entity renames an array component, indicate in\n+\tthe ALI file that this aliases (renames) the array. Capture as well\n+\tfunction renamings that rename predefined operations.\n+\tAdd information about generic parent for package and subprogram\n+\tinstances.\n+\t(Get_Type_Reference): For a subtype that is the renaming of an actual in\n+\tan instantiation, use the first_subtype to ensure that we don't generate\n+\tcross-reference information for internal types.\n+\tFor objects and parameters of a generic private type, retain the '*'\n+\tindicator to distinguish such an entity from its type.\n+\n+        * ali.ads (Xref_Entity_Record): New fields Iref_File_Num and Iref_Line,\n+        to store information about instantiated entities.\n+\n+        * ali.adb (Scan_ALI): Add support for parsing the reference to the\n+        generic parent\n+\n+        * xref_lib.adb (Skip_To_Matching_Closing_Bracket): New subprogram\n+        (Parse_Identifier_Info, Parse_Token): Add support for the generic parent\n+        information.\n+\n+2005-06-10  Doug Rupp  <rupp@adacore.com>\n+\t    Arnaud Charlet  <charlet@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\t    Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* Make-lang.in: Add initialize.o when needed.\n+\tRemove obsolete references to RT_FLAGS.\n+\tAdd missing dependencies for sdefault.o\n+\n+\t* initialize.c: New file.\n+\n+\t* init.c [VMS] Declare ADA$ externs weak to fix build problem in IVMS.\n+\t[VMS] cond_signal_table: Fix problem in declaration.\n+\t[VMS] __gnat_error_handler: rewrite.\n+\tMove all __gnat_initialize() routines to initialize.c\n+\tSpecialize the former \"hpux\" section to \"hppa hpux\", as this is what the\n+\tsection really is here for and we now have other hpux ports that need\n+\tdifferent contents.\n+\t(__gnat_adjust_context_for_raise) i386-linux: First version of this\n+\tfunction for this target. Adjust PC by one in the machine context. This\n+\tadjustment was previously done in the MD_FALLBACK_FRAME_STATE_FOR, but\n+\tit is more reliable to do that in the signal handler itself.\n+\t(__gnat_install_handler) i386-linux: Set SA_SIGINFO in the sigaction\n+\tflags, so that the handler is passed the context structure to adjust\n+\tprior to the raise.\n+\t(__gnat_error_handler) i386-linux: Adjust the signature to match what a\n+\tSA_SIGINFO sigaction should look like. Call\n+\t__gnat_adjust_context_for_raise before actually raising. Cleanup unused\n+\tMachine_State_Operations stuff.\n+\tAdd conditional code so that the x86_64 is also supported.\n+\n+2005-06-14  Pascal Obry  <obry@adacore.com>\n+\n+\t* mdll.adb (Get_Dll_Name): New routine that returns the DLL name given\n+\tthe library name.\n+\n+2005-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* opt.ads, opt.adb: New flags for persistent_bss mode\n+\tAdd Ada_Version_Explicit, for implementation of AI-362\n+\tAdd Assertions_Enabled_Config and associated handling\n+\tNeeded since setting can be changed with Assertion_Policy pragma\n+\tAdd new flag Warn_On_Ada_2005_Compatibility\n+\n+\t* switch-c.adb: Recognize -gnatwy/Y\n+\tSet Ada_Version_Explicit, for implementation of AI-362\n+\tThe -gnatg switch now includes -gnatyu\n+\n+\t* usage.adb: Add -gnatwy/Y\n+\tRemove wrong asterisk on -gnatwX line\n+\tAdd line for -gnatyu switch\n+\n+2005-06-14  Vincent Celier  <celier@adacore.com>\n+\n+\t* osint.adb (Add_Default_Search_Dirs): Put source and object\n+\tdirectories of project files before directories coming from\n+\tADA_INCLUDE_PATH and ADA_OBJECTS_PATH.\n+\n+2005-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\tPR ada/15613\n+\n+\t* par-ch2.adb (Scan_Pragma_Argument): New procedure\n+\t(P_Pragma): Implement RM 2.8(4) check for no pos args after named args\n+\n+2005-06-14  Vincent Celier  <celier@adacore.com>\n+\n+\t* prep.adb (Preprocess): Ignore error when scanning the first token of\n+\ta line.\n+\n+2005-06-14  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-nmsc.adb (Suffix_For): Change default suffix for C++ to \".cpp\"\n+\t(Check_Stand_Alone_Library): If the specified reference symbol file does\n+\tnot exist, only issue a warning when the symbol policy is not\n+\tControlled. And, when symbol policy is Compliant, set the symbol\n+\tpolicy to Autonomous.\n+\n+2005-06-14  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-part.adb (Pre_Parse_Context_Clause): Call Set_Is_Not_Last_In_List\n+\twhen the project file in a with clause is not the last one, that is the\n+\tproject file name is followed by a comma.\n+\t* prj-pp.adb: (First_With_In_List): New Boolean global variable\n+\t(Print): Issue list of project files separated by commas in with clauses\n+\taccording to the values returned by Is_Not_Last_In_List.\n+\t* prj-tree.ads, prj-tree.adb: (Is_Not_Last_In_List): New function\n+\t(Set_Is_Not_Last_In_List): New procedure\n+\n+2005-06-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* s-atacco.ads: Put a pragma No_Strict_Aliasing on Object_Pointer.\n+\n+2005-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* scng.adb: Add call to new Check_EOF routine\n+\t(Accumulate_Checksum): Properly handle wide wide char >= 2 ** 24\n+\tAdd some comments regarding wide character handling\n+\n+\t* style.ads, styleg.ads, styleg.adb: Implement new style switch -gnatyu\n+\n+\t* stylesw.ads, stylesw.adb: Implement new style switch -gnatyu\n+\n+\t* g-utf_32.ads, g-utf_32.adb (Is_UTF_32_Non_Graphic): Other_Format\n+\tcharacters are now considered graphic characters and hence yield false\n+\tin this call.\n+\n+        * nmake.adt: Modify header so that xnmake does not generate output\n+        files with multiple blank lines.\n+\n+        * treeprs.adt: Remove a blank line so that output from xtreeprs does\n+        not have an extra blank line\n+\n+2005-06-14  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_aggr.adb (Aggregate_Constraint_Checks): Apply a conversion to the\n+\texpression when the component type is an anonymous access type to\n+\tensure that appropriate accessibility checks are done.\n+\n+\t* sem_ch5.adb (Analyze_Assignment): Apply a implicit conversion to the\n+\texpression of an assignment when the target object is of an anonymous\n+\taccess type. This ensures that required accessibility checks are done.\n+\t(One_Bound): Move the check for type Universal_Integer to\n+\tProcess_Bounds.\n+\t(Process_Bounds): Check whether the type of the preanalyzed range is\n+\tUniversal_Integer, and in that case set Typ to Integer_Type prior\n+\tto setting the type of the original range and the calls to One_Bound.\n+\n+2005-06-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_case.adb (Expand_Others_Choice): Improve warning.\n+\n+2005-06-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_eval.adb (Subtypes_Statically_Match): Use discriminant\n+\tconstraint of full view if present, when other type is discriminated.\n+\t(Eval_Relational_Op): Recognize tests of pointer values against Null,\n+\twhen the pointer is known to be non-null, and emit appropriate warning.\n+\n+2005-06-14  Robert Dewar  <dewar@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\tPR ada/10671\n+\n+\t* sem_prag.adb: Implement pragma Persistent_BSS\n+\tRemove obsolete pragma Persistent_Data, Persistent_Object\n+\tSet Ada_Version_Explicit, for implementation of AI-362\n+\tTest Ada_Version_Explicit for Preelaborate_05 and Pure_05\n+\tAdd processing for pragma Pure_05 and Preelaborate_05\n+\tAdd processing for Assertion_Policy pragma\n+\tAdd pragma identifiers for Assert\n+\t(Analyze_Pragma, case Assert): Check number of arguments\n+\t(Process_Inline): Additional guard against an illegal program, where the\n+\targument of the pragma is undefined, and warnings on redundant\n+\tconstructs are enabled.\n+\t(Analyze_Pragma, case Obsolescent): Allow an optional second argument\n+\tAda_05 to this pragma, specifying that the pragma is only active in\n+\tAda_05 mode.\n+\t(Check_Arg_Order): New procedure\n+\tAdd appropriate calls to this procedure throughout\n+\tAlso throughout, check entity name before doing any other checks\n+\n+\t* snames.h snames.ads, snames.adb: Add pragma Persistent_BSS\n+\tRemove obsolete pragma Persistent_Data, Persistent_Object\n+\tAdd entries for pragma Pure_05 and Preelaborate_05\n+\tAdd entries for Assertion_Policy pragma and associated names\n+\tAdd some names for pragma argument processing\n+\n+\t* tbuild.ads, tbuild.adb: (Make_Linker_Section_Pragma): New function\n+\n+2005-06-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Known_Condition): If the constant expression\n+\tappears within a negation (either from source or as a rewriting of\n+\tinequality) adjust text of warning accordingly.\n+\n+2005-06-14  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-strxdr.adb: Follow AI95-00132\n+\n+2005-06-14  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-tasren.adb (Exceptional_Complete_Rendezvous): Fix race condition.\n+\n+2005-06-14  Arnaud Charlet  <charlet@adacore.com>\n+\t    Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* s-tposen.adb, s-tpobop.adb\n+\t(Exceptional_Complete_Rendezvous): Save the occurrence and not only\n+\tthe exception id.\n+\t(PO_Do_Or_Queue): Before queuing a task on an entry queue we check that\n+\tthere is no violation of the Max_Entry_Queue_Length restriction (if it\n+\thas been set); Program_Error is raised otherwise.\n+\t(Requeue_Call): Before requeuing the task on the target entry queue we\n+\tcheck that there is no violation of the Max_Entry_Queue_Length\n+\trestriction (if it has been set); Program_Error is raised otherwise.\n+\n+2005-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* styleg.adb: Fix several remaining problems in -gnatyu switch\n+\tBlank line count not reset at start\n+\tScanning outside source buffer in some cases\n+\tConfusing message for blanks at end of file\n+\tNon-empty blank lines not recognized\n+\n+\t* nmake.adt: Modify header so that xnmake does not generate output\n+\tfiles with multiple blank lines.\n+\n+        * treeprs.adt: Remove a blank line so that output from xtreeprs does\n+        not have an extra blank line\n+\n+2005-06-14  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* styleg-c.adb (Body_With_No_Spec): Remove ':' from warning message.\n+\n+2005-06-14  Doug Rupp  <rupp@adacore.com>\n+\t    Vincent Celier  <celier@adacore.com>\n+\n+\t* vms_conv.ads, vms_conv.adb: Remove \"Library\" command.\n+\tUpdate copyright.\n+\n+\t* vms_data.ads: Add entry for -gnaty/Y [NO]ADA_2005_COMPATIBILITY\n+\tRemove \"Library\" command.\n+\tChange keyword for style check -gnatyd from NOCRLF to\n+\tDOS_LINE_ENDINGS.\n+\tRemove useless second style check keyword NONE\n+\tRemove help documentation for inexistent style check keyword\n+\tRM_COLUMN_LAYOUT.\n+\tAdd help documentation for style check keywords DOS_LINE_ENDINGS,\n+\tUNNECESSARY_BLANK_LINES and XTRA_PARENS\n+\tAdd UNNECESSARY_BLANK_LINES for -gnatyu\n+\tAdd qualifiers /ALL_PROJECTS (-U) for GNAT PRETTY and GNAT METRIC\n+\n+        * ug_words: Add entry for -gnaty/Y [NO]ADA_2005_COMPATIBILITY\n+\n+2005-06-14  Vincent Celier  <celier@adacore.com>\n+\n+\t* makegpr.adb (Compile_Link_With_Gnatmake): Invoke gnatmake with -d if\n+\tgprmake was invoked with -d.\n+\t(Compile_Sources): If -d was used, output the \"completed ...\" message\n+\tfor each compilation.\n+\t(Scan_Arg): Recognize new switch -d\n+\tWhen -c and at least one main is specified, set\n+\tUnique_Compile to True to guarantee that no other sources will be\n+\tcompiled.\n+\n+2005-06-14  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-swunha.ads, a-swunha.adb: Removed. Replaced by a-swuwha.ad[sb]\n+\t* a-swuwha.ads, a-swuwha.adb: New files\n+\n+\t* a-szunha.ads, a-szunha.adb: Removed, replaced by a-szuzha.ad[sb]\n+\t* a-szuzha.ads, a-szuzha.adb: New files.\n+\n+\t* a-rbtgso.adb, a-crbtgo.ads, a-crbtgo.adb, a-crbtgk.ads,\n+\ta-crbtgk.adb, a-crbltr.ads, a-coorse.ads, a-coorse.adb, a-convec.ads, \n+\ta-convec.adb, a-coinve.ads, a-coinve.adb, a-cohata.ads, a-cohama.ads, \n+\ta-cohama.adb, a-ciorse.ads, a-ciorse.adb, a-cihama.ads, a-cihama.adb, \n+\ta-cidlli.ads, a-cidlli.adb, a-chtgop.ads, a-chtgop.adb, a-cdlili.ads, \n+\ta-cdlili.adb, a-coormu.adb, a-ciormu.adb, a-cihase.adb, a-cohase.adb,\n+\ta-cohase.ads, a-ciorma.ads, a-coorma.ads, a-ciormu.ads, a-coormu.ads, \n+\ta-swunha.adb, a-stunha.adb, a-ciorma.adb, a-coorma.adb, a-shcain.ads,\n+\ta-shcain.adb, a-chtgke.ads, a-chtgke.adb, a-stwiha.ads, a-stwiha.adb,\n+\ta-strhas.adb, a-stzhas.adb: synchronized to the latest version of the\n+\tAda 2005 RM.\n+\n+2005-06-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\t    Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\t    Pascal Obry  <obry@adacore.com>\n+\n+\t* gigi.h: (build_allocator): Add arg IGNORE_INIT_TYPE.\n+\n+\t* trans.c (call_to_gnu): Issue a warning for users of Starlet when\n+\tmaking a temporary around a procedure call because of non-addressable\n+\tactual parameter.\n+\t(process_freeze_entity): If entity is a private type, capture size\n+\tinformation that may have been computed for the full view.\n+\t(tree_transform, case N_Allocator): If have initializing expression,\n+\tcheck type for Has_Constrained_Partial_View and pass that to\n+\tbuild_allocator.\n+\t(tree_transform, case N_Return_Statement): Pass extra arg to\n+\tbuild_allocator.\n+\n+\t* decl.c (annotate_value): Remove early return if -gnatR is not\n+\tspecified.\n+\t(gnat_to_gnu_field): Don't make a packable type for a component clause\n+\tif the position is byte aligned, the field is aliased, and the clause\n+\tsize isn't a multiple of the packable alignment. It serves no useful\n+\tpurpose packing-wise and would be rejected later on.\n+\t(gnat_to_gnu_entity, case object): Pass extra arg to build_allocator.\n+\n+\tPR ada/20515\n+\t(gnat_to_gnu_entity): Remove use of macro _WIN32 which is wrong in the\n+\tcontext of cross compilers. We use TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+\tinstead.\n+\t(create_concat_name): Idem.\n+\n+2005-06-10  Robert Dewar  <dewar@adacore.com>\n+\t    Eric Botcazou  <ebotcazou@adacore.com>\n+\t    Ben Brosgol  <brosgol@adacore.com>\n+\t    Cyrille Comar  <comar@adacore.com>\n+\t    Sergey Rybin  <rybin@adacore.com>\n+\t    Pascal Obry  <obry@adacore.com>\n+\n+\t* gnat_rm.texi: Add documentation for pragma Persistent_BSS\n+\tDocument second argument (Ada_05) of pragma Obsolescent\n+\tAdd note that call to subprogram marked with pragma Obsolescent\n+\tis now considered to be a violation of program Restrictions\n+\t(No_Obsolescent_Features).\n+\t(Implementation Defined Pragmas) <Machine_Attribute>: Make it clear\n+\tthat only machine-dependent attributes are supported.\n+\n+\t* gnat_ugn.texi: \n+\tCommented out menu lines and empty section for gnatclean examples\n+\tDocument -gnatwy/Y\n+\tFix some over long lines\n+\tClarify and enhance documentation of ADA_PROJECT_PATH.\n+\tRework section 2.11.2(3) about linking with a non-GNU compiler.\n+\tMention new switch -fcallgraph-info.\n+\tMention new switch -fstack-usage.\n+\tFor gnatpp, replace '-notab' with '-N' and add this option to Index\n+\tCorrected VMS example.\n+\tVMS keyword for style check -gnatyd is DOS_LINE_ENDINGS, no NOCRLF\n+\tMinor reformatting\n+\tAdd documentation for -gnatyu switch (unnecessary blank lines)\n+\tDocument new switch -U for GNAT PRETTY and GNAT METRIC\n+\tAdd note about Stdcall being handled as C convention on non Windows OS.\n+\tRemove some junk typo in description of gnatbind -S switch\n+\tRemove reference to Extensions_Allowed pragma\n+\tDocument the new order of the directories to be searched (source and\n+\tobject directories of project files before directories in ADA_*_PATH\n+\tenvironment variables.\n+\n+        * g-trasym.ads: Document that IRIX is supported\n+\n+2005-06-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* Makefile.in: Add initialize.o when needed.\n+\tAdapt to new VMS package body Symbols and subunits\n+\tNo specialized version of a-sytaco is needed for VxWorks.\n+\n+\t* a-wichun.ads, a-wichun.adb, a-zchuni.ads, a-zchuni.adb: New files.\n+\t* a-zchara.ads, a-widcha.ads: New files.\n+\n+\t* system-hpux-ia64.ads: New file.\n+\n+\t* i-vxwork-x86.ads, i-vxwork.ads (intContext): Add this function which\n+\tis imported from the VxWorks kernel.\n+\n+2005-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* g-soliop-mingw.ads, g-soccon-vms.adb, a-swmwco.ads, exp_smem.adb,\n+\tfmap.adb, a-szmzco.ads, s-traent-vms.adb, s-traent-vms.ads,\n+\ta-direio.ads, a-exctra.ads, a-exexda.adb, a-exextr.adb, a-stream.ads,\n+\ts-restri.ads, s-restri.adb, s-traent.adb, s-traent.ads, a-slcain.adb,\n+\ta-stzhas.ads, a-tiinau.adb, comperr.adb, exp_ch11.adb, g-boubuf.adb,\n+\tg-calend.adb, g-debpoo.ads, g-moreex.ads, gprep.adb, g-regpat.ads,\n+\ti-cexten.ads, i-os2thr.ads, makeutl.ads, memroot.adb, mlib-prj.adb,\n+\tnamet.adb, namet.ads, prj-makr.adb, prj-proc.adb, sem_dist.adb,\n+\tsem_elim.ads, s-valint.adb, s-vallli.adb, s-vallli.adb, s-vallli.ads,\n+\ts-valllu.adb, s-valllu.ads, s-valrea.adb, s-valrea.ads, scn.adb,\n+\ts-tasinf.adb, targparm.adb, uname.adb, uname.ads, xnmake.adb,\n+\txsinfo.adb, a-direct.ads: Remove extra blank lines. Minor reformatting.\n+\n+2005-06-14  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* xeinfo.adb: Fix typo in comment\n+\n+2005-06-14  Javier Miranda  <miranda@adacore.com>\n+\n+\t* repinfo.ads: Fix typo in comment\n+\n+2005-06-14  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* s-finimp.adb (Parent_Tag): Delete this imported function (function\n+\tParent_Tag is now in the visible part of Ada.Tags).\n+\t(Get_Deep_Controller): Call Ada.Tags.Parent_Tag directly instead of\n+\tusing imported function.\n+\n+2005-06-14  Bernard Banner  <banner@adacore.com>\n+\n+\t* vxaddr2line.adb: Add support for Windows hosted x86 vxworks. Should\n+\talso apply for handling support for VxSim 653.\n+\n+2005-06-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* xsnames.adb: Add automatic generation of snames.h.\n+\n+2005-06-14  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gen-soccon.c: Add IP_MULTICAST_IF constant\n+\tMinor reformatting and adjustments to prevent warnings.\n+\n+2005-06-14  Pascal Obry  <obry@adacore.com>\n+\n+\t* seh_init.c: Do not include <sys/stat.h>. This is not needed.\n+\n 2005-06-03  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* trans.c (gnat_gimplify_expr): Call"}]}