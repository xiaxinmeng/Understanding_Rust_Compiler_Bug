{"sha": "1967fd8f2197f2b0334ab0fbc26abc3d9efe56c9", "node_id": "C_kwDOANBUbNoAKDE5NjdmZDhmMjE5N2YyYjAzMzRhYjBmYmMyNmFiYzNkOWVmZTU2Yzk", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-03T12:26:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-03T14:00:10Z"}, "message": "tree-optimization/102970 - remap cliques when translating over backedges\n\nThe following makes sure to remap (or rather drop for simplicity)\ndependence info encoded in MR_DEPENDENCE_CLIQUE when PRE PHI translation\ntranslates a reference over a backedge since that ends up interleaving\ntwo different loop iterations which boils down to two different\ninline copies.\n\n2021-11-03  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/102970\n\t* tree-ssa-pre.c (phi_translate_1): Drop clique and base\n\twhen translating a MEM_REF over a backedge.\n\n\t* g++.dg/opt/pr102970.C: New testcase.", "tree": {"sha": "13ffd45ae9f6e550e02db50366844ebe6e7da8d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13ffd45ae9f6e550e02db50366844ebe6e7da8d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1967fd8f2197f2b0334ab0fbc26abc3d9efe56c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1967fd8f2197f2b0334ab0fbc26abc3d9efe56c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1967fd8f2197f2b0334ab0fbc26abc3d9efe56c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1967fd8f2197f2b0334ab0fbc26abc3d9efe56c9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67b0d47e20e655c0dd53a76ea88aab60fafb2059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b0d47e20e655c0dd53a76ea88aab60fafb2059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67b0d47e20e655c0dd53a76ea88aab60fafb2059"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "cf5b0ed70b4177cc6925cb690594b18e7e8eebba", "filename": "gcc/testsuite/g++.dg/opt/pr102970.C", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1967fd8f2197f2b0334ab0fbc26abc3d9efe56c9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr102970.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1967fd8f2197f2b0334ab0fbc26abc3d9efe56c9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr102970.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr102970.C?ref=1967fd8f2197f2b0334ab0fbc26abc3d9efe56c9", "patch": "@@ -0,0 +1,60 @@\n+// { dg-do run }\n+// { dg-require-effective-target c++11 }\n+// { dg-options \"-O2 -funroll-loops -fno-tree-vectorize\" }\n+\n+#include <vector>\n+#include <algorithm>\n+#include <cassert>\n+\n+struct box {\n+   box(int xmin, int xmax, int ymin, int ymax) noexcept\n+      : m_xmin(xmin),\n+        m_xmax(xmax),\n+        m_ymin(ymin),\n+        m_ymax(ymax) {\n+   }\n+\n+   box(box const & o) noexcept\n+      : m_xmin(o.m_xmin),\n+        m_xmax(o.m_xmax),\n+        m_ymin(o.m_ymin),\n+        m_ymax(o.m_ymax) { }\n+\n+   int m_xmin;\n+   int m_xmax;\n+   int m_ymin;\n+   int m_ymax;\n+};\n+\n+\n+int main() {\n+    std::vector<box> vRects{ // requires 18 elements\n+        { 900, 11, 22, 33 },\n+        { 901, 11, 22, 33 },\n+        { 902, 11, 22, 33 },\n+        { 903, 11, 22, 33 },\n+        { 704, 11, 22, 33 },\n+        { 705, 11, 22, 33 },\n+        { 706, 11, 22, 33 },\n+        { 707, 11, 22, 33 },\n+        { 808, 11, 22, 33 },\n+        { 809, 11, 22, 33 },\n+        { 810, 11, 22, 33 },\n+        { 811, 11, 22, 33 },\n+        { 812, 11, 22, 33 },\n+        { 813, 11, 22, 33 },\n+        { 814, 11, 22, 33 },\n+        { 815, 11, 22, 33 },\n+        { 816, 11, 22, 33 },\n+        { 817, 11, 22, 33 },\n+        { 818, 11, 22, 33 },\n+    };\n+\n+    std::stable_sort(vRects.begin(), vRects.end(),\n+\t\t     [](auto const &r1, auto const &r2) -> bool\n+      {\n+        if (r2.m_xmax==0||r2.m_ymin==0||r2.m_ymax==0){__builtin_abort();}\n+        return r1.m_xmin < r2.m_xmin;\n+      });\n+  return 0;\n+}"}, {"sha": "dc55d868cc19b911c3b4bccf18a14239a7f2d516", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1967fd8f2197f2b0334ab0fbc26abc3d9efe56c9/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1967fd8f2197f2b0334ab0fbc26abc3d9efe56c9/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=1967fd8f2197f2b0334ab0fbc26abc3d9efe56c9", "patch": "@@ -1588,6 +1588,21 @@ phi_translate_1 (bitmap_set_t dest,\n \t\tnewoperands.release ();\n \t\treturn NULL;\n \t      }\n+\t    /* When we translate a MEM_REF across a backedge and we have\n+\t       restrict info that's not from our functions parameters\n+\t       we have to remap it since we now may deal with a different\n+\t       instance where the dependence info is no longer valid.\n+\t       See PR102970.  Note instead of keeping a remapping table\n+\t       per backedge we simply throw away restrict info.  */\n+\t    if ((newop.opcode == MEM_REF\n+\t\t || newop.opcode == TARGET_MEM_REF)\n+\t\t&& newop.clique > 1\n+\t\t&& (e->flags & EDGE_DFS_BACK))\n+\t      {\n+\t\tnewop.clique = 0;\n+\t\tnewop.base = 0;\n+\t\tchanged = true;\n+\t      }\n \t    if (!changed)\n \t      continue;\n \t    if (!newoperands.exists ())"}]}