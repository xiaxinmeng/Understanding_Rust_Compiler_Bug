{"sha": "da6305558bab9e24943848e4fc5bd8738d7e8f9b", "node_id": "C_kwDOANBUbNoAKGRhNjMwNTU1OGJhYjllMjQ5NDM4NDhlNGZjNWJkODczOGQ3ZThmOWI", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-05-02T13:15:26Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-05-10T13:21:00Z"}, "message": "Make 'c-c++-common/goacc/kernels-decompose-pr100400-1-*.c' behave consistently, regardless of checking level\n\nFix-up for commit c14ea6a72fb1ae66e3d32ac8329558497c6e4403\n\"Catch 'GIMPLE_DEBUG' misbehavior in OpenACC 'kernels' decomposition\n[PR100400, PR103836, PR104061]\".\n\nFor C++ compilation of 'c-c++-common/goacc/kernels-decompose-pr100400-1-2.c',\nwe first emit a 'sorry' diagnostic, and then a 'gcc_unreachable' (or\n'internal_error', see below) diagnostic, but for example, for\n'--enable-checking=release' (thus, '!CHECKING_P'), the second one may actually\nbe turned into a 'confused by earlier errors, bailing out' diagnostic.  (See\n'gcc/diagnostic.cc:diagnostic_report_diagnostic': \"When not checking, ICEs are\nconverted to fatal errors when an error has already occurred.\")  Thus, make\n'c-c++-common/goacc/kernels-decompose-pr100400-1-2.c' behave consistently via\n'-Wfatal-errors', and thus only matching the 'sorry' diagnostic.\n\nFor example, for '--enable-checking=no' (thus, '!ENABLE_ASSERT_CHECKING'), a\ncall to 'gcc_unreachable' cannot be assumed emit an 'internal_error'-like\ndiagnostic, so explicitly call 'internal_error' in\n'gcc/omp-oacc-kernels-decompose.cc:visit_loops_in_gang_single_region', in the\n'GIMPLE_OMP_FOR' case, to avoid regressing\n'c-c++-common/goacc/kernels-decompose-pr100400-1-3.c', and\n'c-c++-common/goacc/kernels-decompose-pr100400-1-4.c'.\n\n\tPR middle-end/100400\n\tgcc/\n\t* omp-oacc-kernels-decompose.cc\n\t(visit_loops_in_gang_single_region) <GIMPLE_OMP_FOR>: Explicitly\n\tcall 'internal_error'.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/kernels-decompose-pr100400-1-2.c: Specify\n\t'-Wfatal-errors'.", "tree": {"sha": "eaf639b31be91183e1b0143a8dc4f06db58c4d0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaf639b31be91183e1b0143a8dc4f06db58c4d0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da6305558bab9e24943848e4fc5bd8738d7e8f9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da6305558bab9e24943848e4fc5bd8738d7e8f9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da6305558bab9e24943848e4fc5bd8738d7e8f9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da6305558bab9e24943848e4fc5bd8738d7e8f9b/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "798152475559a6be8049692932cc747c6499e7f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798152475559a6be8049692932cc747c6499e7f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798152475559a6be8049692932cc747c6499e7f5"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "ec9b0faab0a0e5d40e7c77ae7d9bd8eda0efa95d", "filename": "gcc/omp-oacc-kernels-decompose.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6305558bab9e24943848e4fc5bd8738d7e8f9b/gcc%2Fomp-oacc-kernels-decompose.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6305558bab9e24943848e4fc5bd8738d7e8f9b/gcc%2Fomp-oacc-kernels-decompose.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-oacc-kernels-decompose.cc?ref=da6305558bab9e24943848e4fc5bd8738d7e8f9b", "patch": "@@ -239,7 +239,13 @@ visit_loops_in_gang_single_region (gimple_stmt_iterator *gsi_p,\n     case GIMPLE_OMP_FOR:\n       /*TODO Given the current 'adjust_region_code' algorithm, this is\n \tactually...  */\n+#if 0\n       gcc_unreachable ();\n+#else\n+      /* ..., but due to bugs (PR100400), we may actually come here.\n+\t Reliably catch this, regardless of checking level.  */\n+      internal_error (\"PR100400\");\n+#endif\n \n       {\n \ttree clauses = gimple_omp_for_clauses (stmt);"}, {"sha": "8b65e07c623341f39b0a5fd26dd4b91f35164efc", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr100400-1-2.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6305558bab9e24943848e4fc5bd8738d7e8f9b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6305558bab9e24943848e4fc5bd8738d7e8f9b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-2.c?ref=da6305558bab9e24943848e4fc5bd8738d7e8f9b", "patch": "@@ -1,8 +1,8 @@\n /* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n \n-/* { dg-additional-options \"-fchecking\" }\n-   { dg-ice TODO { c++ } }\n-   { dg-prune-output \"during GIMPLE pass: omp_oacc_kernels_decompose\" } */\n+/* Ensure consistent diagnostics, regardless of checking level:\n+   { dg-additional-options -Wfatal-errors }\n+   { dg-message {terminated due to -Wfatal-errors} TODO { target *-*-* } 0 } */\n \n /* { dg-additional-options \"-g\" } */\n /* { dg-additional-options \"-O1\" } so that we may get some 'GIMPLE_DEBUG's.  */\n@@ -19,18 +19,16 @@ foo (void)\n   /* { dg-bogus {sorry, unimplemented: 'gimple_debug' not yet supported} TODO { xfail *-*-* } .+1 } */\n #pragma acc kernels /* { dg-line l_compute1 } */\n   /* { dg-note {OpenACC 'kernels' decomposition: variable 'p' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute1 }\n-     { dg-note {variable 'p' made addressable} {} { target *-*-* xfail c++ } l_compute1 } */\n+     { dg-note {variable 'p' made addressable} {} { xfail *-*-* } l_compute1 } */\n   /* { dg-note {variable 'c' declared in block is candidate for adjusting OpenACC privatization level} {} { xfail *-*-* } l_compute1 } */\n   /* { dg-note {variable 'c\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail *-*-* } l_compute1 } */\n   {\n-    /* { dg-bogus {note: beginning 'gang-single' part in OpenACC 'kernels' region} {w/ debug} { xfail c++ } .-1 }\n-       { dg-bogus {note: beginning 'gang-single' part in OpenACC 'kernels' region} {w/ debug} { xfail c } .+1 } */\n     int c;\n \n     /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { xfail *-*-* } .+1 } */\n     p = &c;\n \n-    /* { dg-note {parallelized loop nest in OpenACC 'kernels' region} {} { xfail c++ } .+1 } */\n+    /* { dg-note {parallelized loop nest in OpenACC 'kernels' region} {} { xfail *-*-* } .+1 } */\n #pragma acc loop independent /* { dg-line l_loop_c1 } */\n     /* { dg-note {variable 'c\\.0' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail *-*-* } l_loop_c1 } */\n     /* { dg-note {variable 'c' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { xfail *-*-* } l_loop_c1 }"}]}