{"sha": "e47dfca5aa473e77fdff95d631dc39de87a41eec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ3ZGZjYTVhYTQ3M2U3N2ZkZmY5NWQ2MzFkYzM5ZGU4N2E0MWVlYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-07-09T19:11:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-07-10T12:36:40Z"}, "message": "c++: [[no_unique_address]] fixes. [PR96105]\n\nWe were wrongly checking is_empty_class on the result of strip_array_types\nrather than the actual field type.  We weren't considering the alignment of\nthe data member.  We needed to handle unions the same way as\nlayout_nonempty_base_or_field.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/96105\n\tPR c++/96052\n\tPR c++/95976\n\t* class.c (check_field_decls): An array of empty classes is not an\n\tempty data member.\n\t(layout_empty_base_or_field): Handle explicit alignment.\n\tFix union handling.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/96105\n\tPR c++/96052\n\tPR c++/95976\n\t* g++.dg/cpp2a/no_unique_address4.C: New test.\n\t* g++.dg/cpp2a/no_unique_address5.C: New test.\n\t* g++.dg/cpp2a/no_unique_address6.C: New test.", "tree": {"sha": "53f7d6d930a736ba88080c98544721a4d7da1f82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53f7d6d930a736ba88080c98544721a4d7da1f82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e47dfca5aa473e77fdff95d631dc39de87a41eec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e47dfca5aa473e77fdff95d631dc39de87a41eec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e47dfca5aa473e77fdff95d631dc39de87a41eec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e47dfca5aa473e77fdff95d631dc39de87a41eec/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6645a826f58b68f68dff30e6e6e78542099d0cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6645a826f58b68f68dff30e6e6e78542099d0cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6645a826f58b68f68dff30e6e6e78542099d0cc"}], "stats": {"total": 99, "additions": 92, "deletions": 7}, "files": [{"sha": "14380c7a08ca77ed95e89ce71e1c4556e006549b", "filename": "gcc/cp/class.c", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e47dfca5aa473e77fdff95d631dc39de87a41eec/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e47dfca5aa473e77fdff95d631dc39de87a41eec/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=e47dfca5aa473e77fdff95d631dc39de87a41eec", "patch": "@@ -3718,7 +3718,8 @@ check_field_decls (tree t, tree *access_decls,\n \t/* We don't treat zero-width bitfields as making a class\n \t   non-empty.  */\n \t;\n-      else if (field_poverlapping_p (field) && is_empty_class (type))\n+      else if (field_poverlapping_p (field)\n+\t       && is_empty_class (TREE_TYPE (field)))\n \t/* Empty data members also don't make a class non-empty.  */\n \tCLASSTYPE_CONTAINS_EMPTY_CLASS_P (t) = 1;\n       else\n@@ -4385,15 +4386,20 @@ layout_empty_base_or_field (record_layout_info rli, tree binfo_or_decl,\n \n   /* This routine should only be used for empty classes.  */\n   gcc_assert (is_empty_class (type));\n-  alignment = size_int (CLASSTYPE_ALIGN_UNIT (type));\n+\n+  if (decl && DECL_USER_ALIGN (decl))\n+    alignment = size_int (DECL_ALIGN_UNIT (decl));\n+  else\n+    alignment = size_int (CLASSTYPE_ALIGN_UNIT (type));\n \n   /* This is an empty base class.  We first try to put it at offset\n      zero.  */\n   tree offset = size_zero_node;\n-  if (layout_conflict_p (type,\n-\t\t\t offset,\n-\t\t\t offsets,\n-\t\t\t /*vbases_p=*/0))\n+  if (TREE_CODE (rli->t) != UNION_TYPE\n+      && layout_conflict_p (type,\n+\t\t\t    offset,\n+\t\t\t    offsets,\n+\t\t\t    /*vbases_p=*/0))\n     {\n       /* That didn't work.  Now, we move forward from the next\n \t available spot in the class.  */\n@@ -4413,7 +4419,14 @@ layout_empty_base_or_field (record_layout_info rli, tree binfo_or_decl,\n \t}\n     }\n \n-  if (CLASSTYPE_USER_ALIGN (type))\n+  if (decl && DECL_USER_ALIGN (decl))\n+    {\n+      rli->record_align = MAX (rli->record_align, DECL_ALIGN (decl));\n+      if (warn_packed)\n+\trli->unpacked_align = MAX (rli->unpacked_align, DECL_ALIGN (decl));\n+      TYPE_USER_ALIGN (rli->t) = 1;\n+    }\n+  else if (CLASSTYPE_USER_ALIGN (type))\n     {\n       rli->record_align = MAX (rli->record_align, CLASSTYPE_ALIGN (type));\n       if (warn_packed)"}, {"sha": "2fe44e371632e91db408734701cb289f5b77c8b4", "filename": "gcc/testsuite/g++.dg/cpp2a/no_unique_address4.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e47dfca5aa473e77fdff95d631dc39de87a41eec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fno_unique_address4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e47dfca5aa473e77fdff95d631dc39de87a41eec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fno_unique_address4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fno_unique_address4.C?ref=e47dfca5aa473e77fdff95d631dc39de87a41eec", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/96105\n+// { dg-do compile { target c++20 } }\n+\n+struct Empty {};\n+\n+struct A {\n+  Empty emp [[no_unique_address]][3];\n+};\n+\n+struct B : A {\n+  float f;\n+};\n+\n+struct C {\n+  Empty emp [[no_unique_address]][3];\n+  float f;\n+};\n+\n+extern char szc[sizeof(C)];\n+extern char szc[sizeof(float) * 2];  // GCC likes this\n+extern char szb[sizeof(B)];\n+extern char szb[sizeof(float) * 2];  // GCC does not like this"}, {"sha": "5fca35dbd812be3a5ac319b0692f9488bf9c7eae", "filename": "gcc/testsuite/g++.dg/cpp2a/no_unique_address5.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e47dfca5aa473e77fdff95d631dc39de87a41eec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fno_unique_address5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e47dfca5aa473e77fdff95d631dc39de87a41eec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fno_unique_address5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fno_unique_address5.C?ref=e47dfca5aa473e77fdff95d631dc39de87a41eec", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/96052\n+// { dg-do compile { target c++20 } }\n+\n+struct Q {\n+  struct {\n+  } emp alignas(8) [[no_unique_address]];\n+  char x;\n+};\n+struct QQ {\n+  char x;\n+  Q q;\n+};\n+\n+struct Z {\n+  char x alignas(8) [[no_unique_address]];\n+};\n+struct ZZ {\n+  char x;\n+  Z z;\n+};\n+\n+extern char qx[sizeof(QQ)];\n+extern char qx[16];\n+extern char qz[sizeof(ZZ)];\n+extern char qz[16];"}, {"sha": "427db4439dda54c05187ddd65ccf665ab4ab7654", "filename": "gcc/testsuite/g++.dg/cpp2a/no_unique_address6.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e47dfca5aa473e77fdff95d631dc39de87a41eec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fno_unique_address6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e47dfca5aa473e77fdff95d631dc39de87a41eec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fno_unique_address6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fno_unique_address6.C?ref=e47dfca5aa473e77fdff95d631dc39de87a41eec", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/95976\n+// { dg-do compile { target c++20 } }\n+\n+struct empty {};\n+\n+union no_attribute_t\n+{\n+  empty _0;\n+  empty _1;\n+};\n+\n+union with_attribute_t\n+{\n+  [[no_unique_address]] empty _0;\n+  [[no_unique_address]] empty _1;\n+};\n+\n+constexpr no_attribute_t no_attribute{};\n+constexpr with_attribute_t with_attribute{};\n+\n+// This succeeds\n+static_assert( &no_attribute._0 == &no_attribute._1 );\n+\n+// This fails\n+static_assert( &with_attribute._0 == &with_attribute._1 );"}]}