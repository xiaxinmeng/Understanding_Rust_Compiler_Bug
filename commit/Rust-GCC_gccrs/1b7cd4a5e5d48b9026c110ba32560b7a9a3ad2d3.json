{"sha": "1b7cd4a5e5d48b9026c110ba32560b7a9a3ad2d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI3Y2Q0YTVlNWQ0OGI5MDI2YzExMGJhMzI1NjBiN2E5YTNhZDJkMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-08T15:02:14Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-08T15:02:14Z"}, "message": "tree-if-conv.c (tree_if_convert_cond_expr): Remove two \"if\" statements that always trigger.\n\n\t* tree-if-conv.c (tree_if_convert_cond_expr): Remove two \"if\"\n\tstatements that always trigger.\n\nFrom-SVN: r90267", "tree": {"sha": "d9a810e5b0358753a2e2893459e0d52f997070ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9a810e5b0358753a2e2893459e0d52f997070ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b7cd4a5e5d48b9026c110ba32560b7a9a3ad2d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b7cd4a5e5d48b9026c110ba32560b7a9a3ad2d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b7cd4a5e5d48b9026c110ba32560b7a9a3ad2d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b7cd4a5e5d48b9026c110ba32560b7a9a3ad2d3/comments", "author": null, "committer": null, "parents": [{"sha": "f7b529fae761c8603888bee76614147954754e75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7b529fae761c8603888bee76614147954754e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7b529fae761c8603888bee76614147954754e75"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "94ab14ac90401436bf663d142bcc32ae4742be63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b7cd4a5e5d48b9026c110ba32560b7a9a3ad2d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b7cd4a5e5d48b9026c110ba32560b7a9a3ad2d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b7cd4a5e5d48b9026c110ba32560b7a9a3ad2d3", "patch": "@@ -1,3 +1,8 @@\n+2004-11-08  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-if-conv.c (tree_if_convert_cond_expr): Remove two \"if\"\n+\tstatements that always trigger.\n+\n 2004-11-08  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-cfg.c, tree-if-conv.c, tree-into-ssa.c,"}, {"sha": "371d0a6df2a872bf53e93647cadcbefdcfea35a9", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b7cd4a5e5d48b9026c110ba32560b7a9a3ad2d3/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b7cd4a5e5d48b9026c110ba32560b7a9a3ad2d3/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=1b7cd4a5e5d48b9026c110ba32560b7a9a3ad2d3", "patch": "@@ -271,7 +271,7 @@ static void\n tree_if_convert_cond_expr (struct loop *loop, tree stmt, tree cond,\n \t\t\t   block_stmt_iterator *bsi)\n {\n-  tree then_clause, else_clause, c, new_cond;\n+  tree then_clause, else_clause, c, c2, new_cond;\n   new_cond = NULL_TREE;\n \n   gcc_assert (TREE_CODE (stmt) == COND_EXPR);\n@@ -290,27 +290,23 @@ tree_if_convert_cond_expr (struct loop *loop, tree stmt, tree cond,\n     }\n \n   /* Add new condition into destination's predicate list.  */\n-  if (then_clause)\n-    /* if 'c' is true then then_clause is reached.  */\n-    new_cond = add_to_dst_predicate_list (loop, then_clause, cond, \n-\t\t\t\t\t  unshare_expr (c), bsi);\n \n-  if (else_clause)\n-    {\n-      tree c2;\n-      if (!is_gimple_reg(c) && is_gimple_condexpr (c))\n-\t{\n-\t  tree new_stmt;\n-\t  new_stmt = ifc_temp_var (TREE_TYPE (c), unshare_expr (c));\n-\t  bsi_insert_before (bsi, new_stmt, BSI_SAME_STMT);\n-\t  c = TREE_OPERAND (new_stmt, 0);\n-\t}\n+  /* If 'c' is true then then_clause is reached.  */\n+  new_cond = add_to_dst_predicate_list (loop, then_clause, cond,\n+\t\t\t\t\tunshare_expr (c), bsi);\n \n-      /* if 'c' is false then else_clause is reached.  */\n-      c2 = invert_truthvalue (unshare_expr (c));\n-      add_to_dst_predicate_list (loop, else_clause, cond, c2, bsi);\n+  if (!is_gimple_reg(c) && is_gimple_condexpr (c))\n+    {\n+      tree new_stmt;\n+      new_stmt = ifc_temp_var (TREE_TYPE (c), unshare_expr (c));\n+      bsi_insert_before (bsi, new_stmt, BSI_SAME_STMT);\n+      c = TREE_OPERAND (new_stmt, 0);\n     }\n \n+  /* If 'c' is false then else_clause is reached.  */\n+  c2 = invert_truthvalue (unshare_expr (c));\n+  add_to_dst_predicate_list (loop, else_clause, cond, c2, bsi);\n+\n   /* Now this conditional statement is redundant. Remove it.\n      But, do not remove exit condition! Update exit condition\n      using new condition.  */"}]}