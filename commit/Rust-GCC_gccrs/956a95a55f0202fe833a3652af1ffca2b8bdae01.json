{"sha": "956a95a55f0202fe833a3652af1ffca2b8bdae01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU2YTk1YTU1ZjAyMDJmZTgzM2EzNjUyYWYxZmZjYTJiOGJkYWUwMQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-06-28T11:16:03Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-06-28T11:16:03Z"}, "message": "constraints.md (Ts): New constraint.\n\n2013-06-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* config/arm/constraints.md (Ts): New constraint.\n\t* config/arm/arm.md (arm_movqi_insn): Add alternatives for\n\t16-bit encodings.\n\t(compare_scc): Use \"Ts\" constraint for operand 0.\n\t(ior_scc_scc): Likewise.\n\t(and_scc_scc): Likewise.\n\t(and_scc_scc_nodom): Likewise.\n\t(ior_scc_scc_cmp): Likewise for operand 7.\n\t(and_scc_scc_cmp): Likewise.\n\t* config/arm/thumb2.md (thumb2_movsi_insn):\n\tAdd alternatives for 16-bit encodings.\n\t(thumb2_movhi_insn): Likewise.\n\t(thumb2_movsicc_insn): Likewise.\n\t(thumb2_and_scc): Take 'and' outside cond_exec.  Use \"Ts\" constraint.\n\t(thumb2_negscc): Use \"Ts\" constraint.\n\tMove mvn instruction outside cond_exec block.\n\t* config/arm/vfp.md (thumb2_movsi_vfp): Add alternatives\n\tfor 16-bit encodings.\n\nFrom-SVN: r200515", "tree": {"sha": "d6b9d6dd3d89e6f9ddb63ab767cf189aa0930a7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6b9d6dd3d89e6f9ddb63ab767cf189aa0930a7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/956a95a55f0202fe833a3652af1ffca2b8bdae01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/956a95a55f0202fe833a3652af1ffca2b8bdae01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/956a95a55f0202fe833a3652af1ffca2b8bdae01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/956a95a55f0202fe833a3652af1ffca2b8bdae01/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "31dfce1008f16f36007fda0f285f54e4b63e7c10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31dfce1008f16f36007fda0f285f54e4b63e7c10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31dfce1008f16f36007fda0f285f54e4b63e7c10"}], "stats": {"total": 162, "additions": 100, "deletions": 62}, "files": [{"sha": "a584e7601d8368a43077ecec9571bec902ec623f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956a95a55f0202fe833a3652af1ffca2b8bdae01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956a95a55f0202fe833a3652af1ffca2b8bdae01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=956a95a55f0202fe833a3652af1ffca2b8bdae01", "patch": "@@ -1,3 +1,24 @@\n+2013-06-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/constraints.md (Ts): New constraint.\n+\t* config/arm/arm.md (arm_movqi_insn): Add alternatives for\n+\t16-bit encodings.\n+\t(compare_scc): Use \"Ts\" constraint for operand 0.\n+\t(ior_scc_scc): Likewise.\n+\t(and_scc_scc): Likewise.\n+\t(and_scc_scc_nodom): Likewise.\n+\t(ior_scc_scc_cmp): Likewise for operand 7.\n+\t(and_scc_scc_cmp): Likewise.\n+\t* config/arm/thumb2.md (thumb2_movsi_insn):\n+\tAdd alternatives for 16-bit encodings.\n+\t(thumb2_movhi_insn): Likewise.\n+\t(thumb2_movsicc_insn): Likewise.\n+\t(thumb2_and_scc): Take 'and' outside cond_exec.  Use \"Ts\" constraint.\n+\t(thumb2_negscc): Use \"Ts\" constraint.\n+\tMove mvn instruction outside cond_exec block.\n+\t* config/arm/vfp.md (thumb2_movsi_vfp): Add alternatives\n+\tfor 16-bit encodings.\n+\n 2013-06-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.md (arm_mulsi3_v6): Add alternative for 16-bit"}, {"sha": "c464eddebd41770e898f7623ddb3e29e1226cfca", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956a95a55f0202fe833a3652af1ffca2b8bdae01/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956a95a55f0202fe833a3652af1ffca2b8bdae01/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=956a95a55f0202fe833a3652af1ffca2b8bdae01", "patch": "@@ -7216,26 +7216,28 @@\n   \"\n )\n \n-\n (define_insn \"*arm_movqi_insn\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,r,l,Uu,r,m\")\n-\t(match_operand:QI 1 \"general_operand\" \"r,I,K,Uu,l,m,r\"))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,r,l,r,l,Uu,r,m\")\n+\t(match_operand:QI 1 \"general_operand\" \"r,r,I,Py,K,Uu,l,m,r\"))]\n   \"TARGET_32BIT\n    && (   register_operand (operands[0], QImode)\n        || register_operand (operands[1], QImode))\"\n   \"@\n+   mov%?\\\\t%0, %1\n+   mov%?\\\\t%0, %1\n    mov%?\\\\t%0, %1\n    mov%?\\\\t%0, %1\n    mvn%?\\\\t%0, #%B1\n    ldr%(b%)\\\\t%0, %1\n    str%(b%)\\\\t%1, %0\n    ldr%(b%)\\\\t%0, %1\n    str%(b%)\\\\t%1, %0\"\n-  [(set_attr \"type\" \"*,simple_alu_imm,simple_alu_imm,load1, store1, load1, store1\")\n-   (set_attr \"insn\" \"mov,mov,mvn,*,*,*,*\")\n+  [(set_attr \"type\" \"*,*,simple_alu_imm,simple_alu_imm,simple_alu_imm,load1, store1, load1, store1\")\n+   (set_attr \"insn\" \"mov,mov,mov,mov,mvn,*,*,*,*\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"arch\" \"any,any,any,t2,t2,any,any\")\n-   (set_attr \"length\" \"4,4,4,2,2,4,4\")]\n+   (set_attr \"predicable_short_it\" \"yes,yes,yes,no,no,no,no,no,no\")\n+   (set_attr \"arch\" \"t2,any,any,t2,any,t2,t2,any,any\")\n+   (set_attr \"length\" \"2,4,4,2,4,2,2,4,4\")]\n )\n \n (define_insn \"*thumb1_movqi_insn\"\n@@ -10164,7 +10166,7 @@\n \t      (set (match_dup 0) (const_int 1)))])\n \n (define_insn_and_split \"*compare_scc\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=Ts,Ts\")\n \t(match_operator:SI 1 \"arm_comparison_operator\"\n \t [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n \t  (match_operand:SI 3 \"arm_add_operand\" \"rI,L\")]))\n@@ -10674,7 +10676,7 @@\n )\n \n (define_insn_and_split \"*ior_scc_scc\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=Ts\")\n \t(ior:SI (match_operator:SI 3 \"arm_comparison_operator\"\n \t\t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t  (match_operand:SI 2 \"arm_add_operand\" \"rIL\")])\n@@ -10712,7 +10714,7 @@\n \t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r\")\n \t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rIL\")]))\n \t\t (const_int 0)))\n-   (set (match_operand:SI 7 \"s_register_operand\" \"=r\")\n+   (set (match_operand:SI 7 \"s_register_operand\" \"=Ts\")\n \t(ior:SI (match_op_dup 3 [(match_dup 1) (match_dup 2)])\n \t\t(match_op_dup 6 [(match_dup 4) (match_dup 5)])))]\n   \"TARGET_32BIT\"\n@@ -10730,7 +10732,7 @@\n    (set_attr \"length\" \"16\")])\n \n (define_insn_and_split \"*and_scc_scc\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=Ts\")\n \t(and:SI (match_operator:SI 3 \"arm_comparison_operator\"\n \t\t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t  (match_operand:SI 2 \"arm_add_operand\" \"rIL\")])\n@@ -10770,7 +10772,7 @@\n \t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r\")\n \t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rIL\")]))\n \t\t (const_int 0)))\n-   (set (match_operand:SI 7 \"s_register_operand\" \"=r\")\n+   (set (match_operand:SI 7 \"s_register_operand\" \"=Ts\")\n \t(and:SI (match_op_dup 3 [(match_dup 1) (match_dup 2)])\n \t\t(match_op_dup 6 [(match_dup 4) (match_dup 5)])))]\n   \"TARGET_32BIT\"\n@@ -10792,7 +10794,7 @@\n ;; need only zero the value if false (if true, then the value is already\n ;; correct).\n (define_insn_and_split \"*and_scc_scc_nodom\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=&r,&r,&r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=&Ts,&Ts,&Ts\")\n \t(and:SI (match_operator:SI 3 \"arm_comparison_operator\"\n \t\t [(match_operand:SI 1 \"s_register_operand\" \"r,r,0\")\n \t\t  (match_operand:SI 2 \"arm_add_operand\" \"rIL,0,rIL\")])"}, {"sha": "251d4975b7c037e4f23b6cc089512d22cbec4488", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956a95a55f0202fe833a3652af1ffca2b8bdae01/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956a95a55f0202fe833a3652af1ffca2b8bdae01/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=956a95a55f0202fe833a3652af1ffca2b8bdae01", "patch": "@@ -329,6 +329,9 @@\n   (and (match_code \"const_double\")\n        (match_test \"TARGET_32BIT && TARGET_VFP && vfp3_const_double_for_fract_bits (op)\")))\n \n+(define_register_constraint \"Ts\" \"(arm_restrict_it) ? LO_REGS : GENERAL_REGS\"\n+ \"For arm_restrict_it the core registers @code{r0}-@code{r7}.  GENERAL_REGS otherwise.\")\n+\n (define_memory_constraint \"Ua\"\n  \"@internal\n   An address valid for loading/storing register exclusive\""}, {"sha": "cd5837480b8e3bdffa5383c69e3191d6cec4f7c4", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 38, "deletions": 33, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956a95a55f0202fe833a3652af1ffca2b8bdae01/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956a95a55f0202fe833a3652af1ffca2b8bdae01/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=956a95a55f0202fe833a3652af1ffca2b8bdae01", "patch": "@@ -267,13 +267,14 @@\n ;; regs.  The high register alternatives are not taken into account when\n ;; choosing register preferences in order to reflect their expense.\n (define_insn \"*thumb2_movsi_insn\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,r,r,l ,*hk,m,*m\")\n-\t(match_operand:SI 1 \"general_operand\"\t   \"rk ,I,K,j,mi,*mi,l,*hk\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,l,r,r,l ,*hk,m,*m\")\n+\t(match_operand:SI 1 \"general_operand\"\t   \"rk,I,Py,K,j,mi,*mi,l,*hk\"))]\n   \"TARGET_THUMB2 && ! TARGET_IWMMXT\n    && !(TARGET_HARD_FLOAT && TARGET_VFP)\n    && (   register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n   \"@\n+   mov%?\\\\t%0, %1\n    mov%?\\\\t%0, %1\n    mov%?\\\\t%0, %1\n    mvn%?\\\\t%0, #%B1\n@@ -282,10 +283,12 @@\n    ldr%?\\\\t%0, %1\n    str%?\\\\t%1, %0\n    str%?\\\\t%1, %0\"\n-  [(set_attr \"type\" \"*,*,simple_alu_imm,*,load1,load1,store1,store1\")\n+  [(set_attr \"type\" \"*,simple_alu_imm,simple_alu_imm,simple_alu_imm,*,load1,load1,store1,store1\")\n+   (set_attr \"length\" \"2,4,2,4,4,4,4,4,4\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"pool_range\" \"*,*,*,*,1018,4094,*,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,*,0,0,*,*\")]\n+   (set_attr \"predicable_short_it\" \"yes,no,yes,no,no,no,no,no,no\")\n+   (set_attr \"pool_range\" \"*,*,*,*,*,1018,4094,*,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,*,*,0,0,*,*\")]\n )\n \n (define_insn \"tls_load_dot_plus_four\"\n@@ -390,26 +393,32 @@\n )\n \n (define_insn_and_split \"*thumb2_movsicc_insn\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r,r,r,r,r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=l,l,r,r,r,r,r,r,r,r,r,l\")\n \t(if_then_else:SI\n \t (match_operator 3 \"arm_comparison_operator\"\n \t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n-\t (match_operand:SI 1 \"arm_not_operand\" \"0,0,rI,K,rI,rI,K,K\")\n-\t (match_operand:SI 2 \"arm_not_operand\" \"rI,K,0,0,rI,K,rI,K\")))]\n+\t (match_operand:SI 1 \"arm_not_operand\" \"0 ,Py,0 ,0,rI,K,rI,rI,K ,K,r,lPy\")\n+\t (match_operand:SI 2 \"arm_not_operand\" \"Py,0 ,rI,K,0 ,0,rI,K ,rI,K,r,lPy\")))]\n   \"TARGET_THUMB2\"\n   \"@\n+   it\\\\t%D3\\;mov%D3\\\\t%0, %2\n+   it\\\\t%d3\\;mov%d3\\\\t%0, %1\n    it\\\\t%D3\\;mov%D3\\\\t%0, %2\n    it\\\\t%D3\\;mvn%D3\\\\t%0, #%B2\n    it\\\\t%d3\\;mov%d3\\\\t%0, %1\n    it\\\\t%d3\\;mvn%d3\\\\t%0, #%B1\n    #\n    #\n    #\n+   #\n+   #\n    #\"\n-   ; alt 4: ite\\\\t%d3\\;mov%d3\\\\t%0, %1\\;mov%D3\\\\t%0, %2\n-   ; alt 5: ite\\\\t%d3\\;mov%d3\\\\t%0, %1\\;mvn%D3\\\\t%0, #%B2\n-   ; alt 6: ite\\\\t%d3\\;mvn%d3\\\\t%0, #%B1\\;mov%D3\\\\t%0, %2\n-   ; alt 7: ite\\\\t%d3\\;mvn%d3\\\\t%0, #%B1\\;mvn%D3\\\\t%0, #%B2\"\n+   ; alt 6: ite\\\\t%d3\\;mov%d3\\\\t%0, %1\\;mov%D3\\\\t%0, %2\n+   ; alt 7: ite\\\\t%d3\\;mov%d3\\\\t%0, %1\\;mvn%D3\\\\t%0, #%B2\n+   ; alt 8: ite\\\\t%d3\\;mvn%d3\\\\t%0, #%B1\\;mov%D3\\\\t%0, %2\n+   ; alt 9: ite\\\\t%d3\\;mvn%d3\\\\t%0, #%B1\\;mvn%D3\\\\t%0, #%B2\n+   ; alt 10: ite\\\\t%d3\\;mov%d3\\\\t%0, %1\\;mov%D3\\\\t%0, %2\n+   ; alt 11: ite\\\\t%d3\\;mov%d3\\\\t%0, %1\\;mov%D3\\\\t%0, %2\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n   {\n@@ -440,7 +449,8 @@\n                                                operands[2])));\n     DONE;\n   }\n-  [(set_attr \"length\" \"6,6,6,6,10,10,10,10\")\n+  [(set_attr \"length\" \"4,4,6,6,6,6,10,10,10,10,6,6\")\n+   (set_attr \"enabled_for_depr_it\" \"yes,yes,no,no,no,no,no,no,no,no,yes,yes\")\n    (set_attr \"conds\" \"use\")]\n )\n \n@@ -491,29 +501,30 @@\n \n \n (define_insn_and_split \"*thumb2_and_scc\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=Ts\")\n \t(and:SI (match_operator:SI 1 \"arm_comparison_operator\"\n \t\t [(match_operand 2 \"cc_register\" \"\") (const_int 0)])\n \t\t(match_operand:SI 3 \"s_register_operand\" \"r\")))]\n   \"TARGET_THUMB2\"\n-  \"#\"   ; \"ite\\\\t%D1\\;mov%D1\\\\t%0, #0\\;and%d1\\\\t%0, %3, #1\"\n+  \"#\"   ; \"and\\\\t%0, %3, #1\\;it\\\\t%D1\\;mov%D1\\\\t%0, #0\"\n   \"&& reload_completed\"\n-  [(cond_exec (match_dup 5) (set (match_dup 0) (const_int 0)))\n-   (cond_exec (match_dup 4) (set (match_dup 0)\n-                                 (and:SI (match_dup 3) (const_int 1))))]\n+  [(set (match_dup 0)\n+        (and:SI (match_dup 3) (const_int 1)))\n+   (cond_exec (match_dup 4) (set (match_dup 0) (const_int 0)))]\n   {\n     enum machine_mode mode = GET_MODE (operands[2]);\n     enum rtx_code rc = GET_CODE (operands[1]);\n \n-    operands[4] = gen_rtx_fmt_ee (rc, VOIDmode, operands[2], const0_rtx);\n     if (mode == CCFPmode || mode == CCFPEmode)\n       rc = reverse_condition_maybe_unordered (rc);\n     else\n       rc = reverse_condition (rc);\n-    operands[5] = gen_rtx_fmt_ee (rc, VOIDmode, operands[2], const0_rtx);\n+    operands[4] = gen_rtx_fmt_ee (rc, VOIDmode, operands[2], const0_rtx);\n   }\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"length\" \"10\")]\n+   (set (attr \"length\") (if_then_else (match_test \"arm_restrict_it\")\n+                                      (const_int 8)\n+                                      (const_int 10)))]\n )\n \n (define_insn_and_split \"*thumb2_ior_scc\"\n@@ -649,7 +660,7 @@\n )\n \n (define_insn_and_split \"*thumb2_negscc\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=Ts\")\n \t(neg:SI (match_operator 3 \"arm_comparison_operator\"\n \t\t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rI\")])))\n@@ -671,7 +682,7 @@\n                                                   GEN_INT (31))));\n         DONE;\n       }\n-    else if (GET_CODE (operands[3]) == NE)\n+    else if (GET_CODE (operands[3]) == NE && !arm_restrict_it)\n       {\n         /* Emit subs\\\\t%0, %1, %2\\;it\\\\tne\\;mvnne\\\\t%0, #0 */\n         if (CONST_INT_P (operands[2]))\n@@ -691,29 +702,23 @@\n       }\n     else\n       {\n-       /* Emit:  cmp\\\\t%1, %2\\;ite\\\\t%D3\\;mov%D3\\\\t%0, #0\\;mvn%d3\\\\t%0, #0 */\n+       /* Emit:  cmp\\\\t%1, %2\\;mvn\\\\t%0, #0\\;it\\\\t%D3\\;mov%D3\\\\t%0, #0\\;*/\n        enum rtx_code rc = reverse_condition (GET_CODE (operands[3]));\n        enum machine_mode mode = SELECT_CC_MODE (rc, operands[1], operands[2]);\n        rtx tmp1 = gen_rtx_REG (mode, CC_REGNUM);\n \n        emit_insn (gen_rtx_SET (VOIDmode,\n                                cc_reg,\n                                gen_rtx_COMPARE (CCmode, operands[1], operands[2])));\n+\n+       emit_insn (gen_rtx_SET (VOIDmode, operands[0], GEN_INT (~0)));\n+\n        emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n                                      gen_rtx_fmt_ee (rc,\n                                                      VOIDmode,\n                                                      tmp1,\n                                                      const0_rtx),\n                                      gen_rtx_SET (VOIDmode, operands[0], const0_rtx)));\n-       rc = GET_CODE (operands[3]);\n-       emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n-                                     gen_rtx_fmt_ee (rc,\n-                                                     VOIDmode,\n-                                                     tmp1,\n-                                                     const0_rtx),\n-                                     gen_rtx_SET (VOIDmode,\n-                                                  operands[0],\n-                                                  GEN_INT (~0))));\n        DONE;\n       }\n     FAIL;"}, {"sha": "9ac887e9b19ed69d51d0e9ff6bd32ad11137ef9c", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/956a95a55f0202fe833a3652af1ffca2b8bdae01/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/956a95a55f0202fe833a3652af1ffca2b8bdae01/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=956a95a55f0202fe833a3652af1ffca2b8bdae01", "patch": "@@ -62,45 +62,52 @@\n \n ;; See thumb2.md:thumb2_movsi_insn for an explanation of the split\n ;; high/low register alternatives for loads and stores here.\n+;; The l/Py alternative should come after r/I to ensure that the short variant\n+;; is chosen with length 2 when the instruction is predicated for\n+;; arm_restrict_it.\n (define_insn \"*thumb2_movsi_vfp\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,r,r, l,*hk,m, *m,*t, r,*t,*t,  *Uv\")\n-\t(match_operand:SI 1 \"general_operand\"\t   \"rk, I,K,j,mi,*mi,l,*hk, r,*t,*t,*Uvi,*t\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,l,r,r, l,*hk,m, *m,*t, r,*t,*t,  *Uv\")\n+\t(match_operand:SI 1 \"general_operand\"\t   \"rk,I,Py,K,j,mi,*mi,l,*hk, r,*t,*t,*Uvi,*t\"))]\n   \"TARGET_THUMB2 && TARGET_VFP && TARGET_HARD_FLOAT\n    && (   s_register_operand (operands[0], SImode)\n        || s_register_operand (operands[1], SImode))\"\n   \"*\n   switch (which_alternative)\n     {\n-    case 0: case 1:\n-      return \\\"mov%?\\\\t%0, %1\\\";\n+    case 0:\n+    case 1:\n     case 2:\n-      return \\\"mvn%?\\\\t%0, #%B1\\\";\n+      return \\\"mov%?\\\\t%0, %1\\\";\n     case 3:\n-      return \\\"movw%?\\\\t%0, %1\\\";\n+      return \\\"mvn%?\\\\t%0, #%B1\\\";\n     case 4:\n+      return \\\"movw%?\\\\t%0, %1\\\";\n     case 5:\n-      return \\\"ldr%?\\\\t%0, %1\\\";\n     case 6:\n+      return \\\"ldr%?\\\\t%0, %1\\\";\n     case 7:\n-      return \\\"str%?\\\\t%1, %0\\\";\n     case 8:\n-      return \\\"fmsr%?\\\\t%0, %1\\\\t%@ int\\\";\n+      return \\\"str%?\\\\t%1, %0\\\";\n     case 9:\n-      return \\\"fmrs%?\\\\t%0, %1\\\\t%@ int\\\";\n+      return \\\"fmsr%?\\\\t%0, %1\\\\t%@ int\\\";\n     case 10:\n+      return \\\"fmrs%?\\\\t%0, %1\\\\t%@ int\\\";\n+    case 11:\n       return \\\"fcpys%?\\\\t%0, %1\\\\t%@ int\\\";\n-    case 11: case 12:\n+    case 12: case 13:\n       return output_move_vfp (operands);\n     default:\n       gcc_unreachable ();\n     }\n   \"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"*,*,*,*,load1,load1,store1,store1,r_2_f,f_2_r,fcpys,f_loads,f_stores\")\n-   (set_attr \"neon_type\" \"*,*,*,*,*,*,*,*,neon_mcr,neon_mrc,neon_vmov,*,*\")\n-   (set_attr \"insn\" \"mov,mov,mvn,mov,*,*,*,*,*,*,*,*,*\")\n-   (set_attr \"pool_range\"     \"*,*,*,*,1018,4094,*,*,*,*,*,1018,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,*,   0,   0,*,*,*,*,*,1008,*\")]\n+   (set_attr \"predicable_short_it\" \"yes,no,yes,no,no,no,no,no,no,no,no,no,no,no\")\n+   (set_attr \"type\" \"*,*,*,*,*,load1,load1,store1,store1,r_2_f,f_2_r,fcpys,f_loads,f_stores\")\n+   (set_attr \"length\" \"2,4,2,4,4,4,4,4,4,4,4,4,4,4\")\n+   (set_attr \"neon_type\" \"*,*,*,*,*,*,*,*,*,neon_mcr,neon_mrc,neon_vmov,*,*\")\n+   (set_attr \"insn\" \"mov,mov,mov,mvn,mov,*,*,*,*,*,*,*,*,*\")\n+   (set_attr \"pool_range\"     \"*,*,*,*,*,1018,4094,*,*,*,*,*,1018,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,*,*,   0,   0,*,*,*,*,*,1008,*\")]\n )\n \n "}]}