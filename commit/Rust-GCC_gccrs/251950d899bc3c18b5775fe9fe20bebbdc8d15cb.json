{"sha": "251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUxOTUwZDg5OWJjM2MxOGI1Nzc1ZmU5ZmUyMGJlYmJkYzhkMTVjYg==", "commit": {"author": {"name": "Joe Ramsay", "email": "Joe.Ramsay@arm.com", "date": "2020-10-02T14:28:29Z"}, "committer": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-10-02T14:38:58Z"}, "message": "arm: Remove coercion from scalar argument to vmin & vmax intrinsics\n\nThis patch fixes an issue with vmin* and vmax* intrinsics which accept\na scalar argument. Previously when the scalar was of different width\nto the vector elements this would generate __ARM_undef. This change\nallows the scalar argument to be implicitly converted to the correct\nwidth. Also tidied up the relevant unit tests, some of which would\nhave passed even if only one of two or three intrinsic calls had\ncompiled correctly.\n\nBootstrapped and tested on arm-none-eabi, gcc and CMSIS_DSP\ntestsuites are clean. OK for trunk?\n\nThanks,\nJoe\n\ngcc/ChangeLog:\n\n2020-08-10  Joe Ramsay  <joe.ramsay@arm.com>\n\n\t* config/arm/arm_mve.h (__arm_vmaxnmavq): Remove coercion of scalar\n\targument.\n\t(__arm_vmaxnmvq): Likewise.\n\t(__arm_vminnmavq): Likewise.\n\t(__arm_vminnmvq): Likewise.\n\t(__arm_vmaxnmavq_p): Likewise.\n\t(__arm_vmaxnmvq_p): Likewise (and delete duplicate definition).\n\t(__arm_vminnmavq_p): Likewise.\n\t(__arm_vminnmvq_p): Likewise.\n\t(__arm_vmaxavq): Likewise.\n\t(__arm_vmaxavq_p): Likewise.\n\t(__arm_vmaxvq): Likewise.\n\t(__arm_vmaxvq_p): Likewise.\n\t(__arm_vminavq): Likewise.\n\t(__arm_vminavq_p): Likewise.\n\t(__arm_vminvq): Likewise.\n\t(__arm_vminvq_p): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s16.c: Add test for mismatched\n\twidth of scalar argument.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_u8.c: Likewise.", "tree": {"sha": "c8a9c48d9814e9f6f8430190897fa84654c2787e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8a9c48d9814e9f6f8430190897fa84654c2787e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/comments", "author": {"login": "joeramsay", "id": 78039542, "node_id": "MDQ6VXNlcjc4MDM5NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/78039542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joeramsay", "html_url": "https://github.com/joeramsay", "followers_url": "https://api.github.com/users/joeramsay/followers", "following_url": "https://api.github.com/users/joeramsay/following{/other_user}", "gists_url": "https://api.github.com/users/joeramsay/gists{/gist_id}", "starred_url": "https://api.github.com/users/joeramsay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joeramsay/subscriptions", "organizations_url": "https://api.github.com/users/joeramsay/orgs", "repos_url": "https://api.github.com/users/joeramsay/repos", "events_url": "https://api.github.com/users/joeramsay/events{/privacy}", "received_events_url": "https://api.github.com/users/joeramsay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8c77ed747abb61a7f3cf34f71539bc87a5d6c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8c77ed747abb61a7f3cf34f71539bc87a5d6c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8c77ed747abb61a7f3cf34f71539bc87a5d6c3c"}], "stats": {"total": 640, "additions": 500, "deletions": 140}, "files": [{"sha": "26c83c7efefa34f17d8f8d30e5a3141f680041df", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -41682,16 +41682,16 @@ extern void *__ARM_undef;\n #define __arm_vmaxavq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int8x16_t]: __arm_vmaxavq_s8 (__ARM_mve_coerce(__p0, uint8_t), __ARM_mve_coerce(__p1, int8x16_t)), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int16x8_t]: __arm_vmaxavq_s16 (__ARM_mve_coerce(__p0, uint16_t), __ARM_mve_coerce(__p1, int16x8_t)), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int32x4_t]: __arm_vmaxavq_s32 (__ARM_mve_coerce(__p0, uint32_t), __ARM_mve_coerce(__p1, int32x4_t)));})\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int8x16_t]: __arm_vmaxavq_s8 (__p0, __ARM_mve_coerce(__p1, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int16x8_t]: __arm_vmaxavq_s16 (__p0, __ARM_mve_coerce(__p1, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int32x4_t]: __arm_vmaxavq_s32 (__p0, __ARM_mve_coerce(__p1, int32x4_t)));})\n \n #define __arm_vmaxavq_p(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int8x16_t]: __arm_vmaxavq_p_s8 (__ARM_mve_coerce(__p0, uint8_t), __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int16x8_t]: __arm_vmaxavq_p_s16 (__ARM_mve_coerce(__p0, uint16_t), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int32x4_t]: __arm_vmaxavq_p_s32 (__ARM_mve_coerce(__p0, uint32_t), __ARM_mve_coerce(__p1, int32x4_t), p2));})\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int8x16_t]: __arm_vmaxavq_p_s8 (__p0, __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int16x8_t]: __arm_vmaxavq_p_s16 (__p0, __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int32x4_t]: __arm_vmaxavq_p_s32 (__p0, __ARM_mve_coerce(__p1, int32x4_t), p2));})\n \n #define __arm_vmaxq_x(p1,p2,p3) ({ __typeof(p1) __p1 = (p1); \\\n   __typeof(p2) __p2 = (p2); \\\n@@ -41706,36 +41706,36 @@ extern void *__ARM_undef;\n #define __arm_vmaxvq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int8x16_t]: __arm_vmaxvq_s8 (__ARM_mve_coerce(__p0, int8_t), __ARM_mve_coerce(__p1, int8x16_t)), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int16x8_t]: __arm_vmaxvq_s16 (__ARM_mve_coerce(__p0, int16_t), __ARM_mve_coerce(__p1, int16x8_t)), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int32x4_t]: __arm_vmaxvq_s32 (__ARM_mve_coerce(__p0, int32_t), __ARM_mve_coerce(__p1, int32x4_t)), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint8x16_t]: __arm_vmaxvq_u8 (__ARM_mve_coerce(__p0, uint8_t), __ARM_mve_coerce(__p1, uint8x16_t)), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint16x8_t]: __arm_vmaxvq_u16 (__ARM_mve_coerce(__p0, uint16_t), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint32x4_t]: __arm_vmaxvq_u32 (__ARM_mve_coerce(__p0, uint32_t), __ARM_mve_coerce(__p1, uint32x4_t)));})\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int8x16_t]: __arm_vmaxvq_s8 (__p0, __ARM_mve_coerce(__p1, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int16x8_t]: __arm_vmaxvq_s16 (__p0, __ARM_mve_coerce(__p1, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int32x4_t]: __arm_vmaxvq_s32 (__p0, __ARM_mve_coerce(__p1, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint8x16_t]: __arm_vmaxvq_u8 (__p0, __ARM_mve_coerce(__p1, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint16x8_t]: __arm_vmaxvq_u16 (__p0, __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint32x4_t]: __arm_vmaxvq_u32 (__p0,__ARM_mve_coerce(__p1, uint32x4_t)));})\n \n #define __arm_vmaxvq_p(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int8x16_t]: __arm_vmaxvq_p_s8 (__ARM_mve_coerce(__p0, int8_t), __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int16x8_t]: __arm_vmaxvq_p_s16 (__ARM_mve_coerce(__p0, int16_t), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int32x4_t]: __arm_vmaxvq_p_s32 (__ARM_mve_coerce(__p0, int32_t), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint8x16_t]: __arm_vmaxvq_p_u8 (__ARM_mve_coerce(__p0, uint8_t), __ARM_mve_coerce(__p1, uint8x16_t), p2), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint16x8_t]: __arm_vmaxvq_p_u16 (__ARM_mve_coerce(__p0, uint16_t), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint32x4_t]: __arm_vmaxvq_p_u32 (__ARM_mve_coerce(__p0, uint32_t), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int8x16_t]: __arm_vmaxvq_p_s8 (__p0, __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int16x8_t]: __arm_vmaxvq_p_s16 (__p0, __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int32x4_t]: __arm_vmaxvq_p_s32 (__p0, __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint8x16_t]: __arm_vmaxvq_p_u8 (__p0, __ARM_mve_coerce(__p1, uint8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint16x8_t]: __arm_vmaxvq_p_u16 (__p0, __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint32x4_t]: __arm_vmaxvq_p_u32 (__p0, __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n \n #define __arm_vminavq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int8x16_t]: __arm_vminavq_s8 (__ARM_mve_coerce(__p0, uint8_t), __ARM_mve_coerce(__p1, int8x16_t)), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int16x8_t]: __arm_vminavq_s16 (__ARM_mve_coerce(__p0, uint16_t), __ARM_mve_coerce(__p1, int16x8_t)), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int32x4_t]: __arm_vminavq_s32 (__ARM_mve_coerce(__p0, uint32_t), __ARM_mve_coerce(__p1, int32x4_t)));})\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int8x16_t]: __arm_vminavq_s8 (__p0, __ARM_mve_coerce(__p1, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int16x8_t]: __arm_vminavq_s16 (__p0, __ARM_mve_coerce(__p1, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int32x4_t]: __arm_vminavq_s32 (__p0, __ARM_mve_coerce(__p1, int32x4_t)));})\n \n #define __arm_vminavq_p(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int8x16_t]: __arm_vminavq_p_s8 (__ARM_mve_coerce(__p0, uint8_t), __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int16x8_t]: __arm_vminavq_p_s16 (__ARM_mve_coerce(__p0, uint16_t), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int32x4_t]: __arm_vminavq_p_s32 (__ARM_mve_coerce(__p0, uint32_t), __ARM_mve_coerce(__p1, int32x4_t), p2));})\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int8x16_t]: __arm_vminavq_p_s8 (__p0, __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int16x8_t]: __arm_vminavq_p_s16 (__p0, __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int32x4_t]: __arm_vminavq_p_s32 (__p0, __ARM_mve_coerce(__p1, int32x4_t), p2));})\n \n #define __arm_vminq_x(p1,p2,p3) ({ __typeof(p1) __p1 = (p1); \\\n   __typeof(p2) __p2 = (p2); \\\n@@ -41750,22 +41750,22 @@ extern void *__ARM_undef;\n #define __arm_vminvq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int8x16_t]: __arm_vminvq_s8 (__ARM_mve_coerce(__p0, int8_t), __ARM_mve_coerce(__p1, int8x16_t)), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int16x8_t]: __arm_vminvq_s16 (__ARM_mve_coerce(__p0, int16_t), __ARM_mve_coerce(__p1, int16x8_t)), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int32x4_t]: __arm_vminvq_s32 (__ARM_mve_coerce(__p0, int32_t), __ARM_mve_coerce(__p1, int32x4_t)), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint8x16_t]: __arm_vminvq_u8 (__ARM_mve_coerce(__p0, uint8_t), __ARM_mve_coerce(__p1, uint8x16_t)), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint16x8_t]: __arm_vminvq_u16 (__ARM_mve_coerce(__p0, uint16_t), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint32x4_t]: __arm_vminvq_u32 (__ARM_mve_coerce(__p0, uint32_t), __ARM_mve_coerce(__p1, uint32x4_t)));})\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int8x16_t]: __arm_vminvq_s8 (__p0, __ARM_mve_coerce(__p1, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int16x8_t]: __arm_vminvq_s16 (__p0, __ARM_mve_coerce(__p1, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int32x4_t]: __arm_vminvq_s32 (__p0, __ARM_mve_coerce(__p1, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint8x16_t]: __arm_vminvq_u8 (__p0, __ARM_mve_coerce(__p1, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint16x8_t]: __arm_vminvq_u16 (__p0, __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint32x4_t]: __arm_vminvq_u32 (__p0, __ARM_mve_coerce(__p1, uint32x4_t)));})\n \n #define __arm_vminvq_p(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int8x16_t]: __arm_vminvq_p_s8 (__ARM_mve_coerce(__p0, int8_t), __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int16x8_t]: __arm_vminvq_p_s16 (__ARM_mve_coerce(__p0, int16_t), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int32x4_t]: __arm_vminvq_p_s32 (__ARM_mve_coerce(__p0, int32_t), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint8x16_t]: __arm_vminvq_p_u8 (__ARM_mve_coerce(__p0, uint8_t), __ARM_mve_coerce(__p1, uint8x16_t), p2), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint16x8_t]: __arm_vminvq_p_u16 (__ARM_mve_coerce(__p0, uint16_t), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint32x4_t]: __arm_vminvq_p_u32 (__ARM_mve_coerce(__p0, uint32_t), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int8x16_t]: __arm_vminvq_p_s8 (__p0, __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int16x8_t]: __arm_vminvq_p_s16 (__p0, __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_int32x4_t]: __arm_vminvq_p_s32 (__p0, __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint8x16_t]: __arm_vminvq_p_u8 (__p0, __ARM_mve_coerce(__p1, uint8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint16x8_t]: __arm_vminvq_p_u16 (__p0, __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint32x4_t]: __arm_vminvq_p_u32 (__p0, __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n \n #define __arm_vmladavaq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\"}, {"sha": "74ffad4e72695c761908876062dc03cbf7037f00", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxavq_p_s16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint16_t a, int16x8_t b, mve_pred16_t p)\n   return vmaxavq_p_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxavt.s16\"  }  } */\n \n uint16_t\n foo1 (uint16_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vmaxavq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxavt.s16\"  }  } */\n+\n+int16_t\n+foo2 (uint8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxavt.s16\" 3 } } */"}, {"sha": "40800b0f12ef3a836692d25d7a50d4b5ff63e852", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxavq_p_s32.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint32_t a, int32x4_t b, mve_pred16_t p)\n   return vmaxavq_p_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxavt.s32\"  }  } */\n \n uint32_t\n foo1 (uint32_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vmaxavq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxavt.s32\"  }  } */\n+\n+int32_t\n+foo2 (uint16_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxavt.s32\" 3 } } */"}, {"sha": "7638737fb842de8fc22345b94065abac3096a8d3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxavq_p_s8.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s8.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint8_t a, int8x16_t b, mve_pred16_t p)\n   return vmaxavq_p_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxavt.s8\"  }  } */\n \n uint8_t\n foo1 (uint8_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vmaxavq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxavt.s8\"  }  } */\n+\n+int8_t\n+foo2 (uint32_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxavt.s8\" 3 } } */"}, {"sha": "0dca149b3e8652cc3c2b5adbb40067ed65eb10a9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxavq_s16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint16_t a, int16x8_t b)\n   return vmaxavq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxav.s16\"  }  } */\n \n uint16_t\n foo1 (uint16_t a, int16x8_t b)\n {\n   return vmaxavq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxav.s16\"  }  } */\n+\n+int16_t\n+foo2 (uint8_t a, int16x8_t b)\n+{\n+  return vmaxavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxav.s16\" 3 } } */"}, {"sha": "f419a771017f74d1cf300dbe9ed31723ce254ca8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxavq_s32.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint32_t a, int32x4_t b)\n   return vmaxavq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxav.s32\"  }  } */\n \n uint32_t\n foo1 (uint32_t a, int32x4_t b)\n {\n   return vmaxavq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxav.s32\"  }  } */\n+\n+int32_t\n+foo2 (uint16_t a, int32x4_t b)\n+{\n+  return vmaxavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxav.s32\" 3 } } */"}, {"sha": "214ad88f4aa6641f8d2cec917c67a4a7b774badf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxavq_s8.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s8.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint8_t a, int8x16_t b)\n   return vmaxavq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxav.s8\"  }  } */\n \n uint8_t\n foo1 (uint8_t a, int8x16_t b)\n {\n   return vmaxavq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxav.s8\"  }  } */\n+\n+int8_t\n+foo2 (uint32_t a, int8x16_t b)\n+{\n+  return vmaxavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxav.s8\" 3 } } */"}, {"sha": "6d8cf19a3415c094e2ede662b78b35b8aa152388", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmavq_f16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (float16_t a, float16x8_t b)\n   return vmaxnmavq_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnmav.f16\"  }  } */\n \n float16_t\n foo1 (float16_t a, float16x8_t b)\n {\n   return vmaxnmavq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnmav.f16\"  }  } */\n+\n+float16_t\n+foo2 (float32_t a, float16x8_t b)\n+{\n+  return vmaxnmavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxnmav.f16\" 3 } } */"}, {"sha": "ef79030d8ebd892781748c8cdff497926189816b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmavq_f32.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (float32_t a, float32x4_t b)\n   return vmaxnmavq_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnmav.f32\"  }  } */\n \n float32_t\n foo1 (float32_t a, float32x4_t b)\n {\n   return vmaxnmavq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnmav.f32\"  }  } */\n+\n+float32_t\n+foo2 (float16_t a, float32x4_t b)\n+{\n+  return vmaxnmavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxnmav.f32\" 3 } } */"}, {"sha": "f7f39f59dade185134069daa6b6e3ac0241fc382", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (float16_t a, float16x8_t b, mve_pred16_t p)\n   return vmaxnmavq_p_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnmavt.f16\"  }  } */\n \n float16_t\n foo1 (float16_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vmaxnmavq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnmavt.f16\"  }  } */\n+\n+float16_t\n+foo2 (float32_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxnmavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxnmavt.f16\" 3 } } */"}, {"sha": "341f6254a5a65cd5e77561fc398061f4343b1b9b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f32.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (float32_t a, float32x4_t b, mve_pred16_t p)\n   return vmaxnmavq_p_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnmavt.f32\"  }  } */\n \n float32_t\n foo1 (float32_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vmaxnmavq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnmavt.f32\"  }  } */\n+\n+float32_t\n+foo2 (float16_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxnmavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxnmavt.f32\" 3 } } */"}, {"sha": "80bd1d4cda100df86f60faa04f4c452928f1c630", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmvq_f16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (float16_t a, float16x8_t b)\n   return vmaxnmvq_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnmv.f16\"  }  } */\n \n float16_t\n foo1 (float16_t a, float16x8_t b)\n {\n   return vmaxnmvq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnmv.f16\"  }  } */\n+\n+float16_t\n+foo2 (float32_t a, float16x8_t b)\n+{\n+  return vmaxnmvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxnmv.f16\" 3 } } */"}, {"sha": "bb2fc46f88a617facd28748c576e8556d6dc2a69", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmvq_f32.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (float32_t a, float32x4_t b)\n   return vmaxnmvq_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnmv.f32\"  }  } */\n \n float32_t\n foo1 (float32_t a, float32x4_t b)\n {\n   return vmaxnmvq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnmv.f32\"  }  } */\n+\n+float32_t\n+foo2 (float16_t a, float32x4_t b)\n+{\n+  return vmaxnmvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxnmv.f32\" 3 } } */"}, {"sha": "3efe203007b2bd3f29dee5db0d62da50de21f1cd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (float16_t a, float16x8_t b, mve_pred16_t p)\n   return vmaxnmvq_p_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnmvt.f16\"  }  } */\n \n float16_t\n foo1 (float16_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vmaxnmvq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnmvt.f16\"  }  } */\n+\n+float16_t\n+foo2 (float32_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxnmvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxnmvt.f16\" 3 } } */"}, {"sha": "6c13247f1f1db0eaa5752d9d19244f71a0fcb691", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f32.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (float32_t a, float32x4_t b, mve_pred16_t p)\n   return vmaxnmvq_p_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnmvt.f32\"  }  } */\n \n float32_t\n foo1 (float32_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vmaxnmvq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnmvt.f32\"  }  } */\n+\n+float32_t\n+foo2 (float16_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxnmvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxnmvt.f32\" 3 } } */"}, {"sha": "657efc51bea5856111fa3f1ece361327e6566ccd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_p_s16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (int16_t a, int16x8_t b, mve_pred16_t p)\n   return vmaxvq_p_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxvt.s16\"  }  } */\n \n int16_t\n foo1 (int16_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vmaxvq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxvt.s16\"  }  } */\n+\n+int16_t\n+foo2 (int8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxvt.s16\" 3 } } */"}, {"sha": "5882351c0fa4f6562bb76818f7d2a666528105fc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_p_s32.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (int32_t a, int32x4_t b, mve_pred16_t p)\n   return vmaxvq_p_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxvt.s32\"  }  } */\n \n int32_t\n foo1 (int32_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vmaxvq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxvt.s32\"  }  } */\n+\n+int32_t\n+foo2 (int16_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxvt.s32\" 3 } } */"}, {"sha": "3737ecd3307fb5bd931e8fc9962b21209e1bfbd4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_p_s8.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s8.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (int8_t a, int8x16_t b, mve_pred16_t p)\n   return vmaxvq_p_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxvt.s8\"  }  } */\n \n int8_t\n foo1 (int8_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vmaxvq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxvt.s8\"  }  } */\n+\n+int8_t\n+foo2 (int32_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxvt.s8\" 3 } } */"}, {"sha": "348cf39caa0c32d283bd6d003c2b69334b13f611", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_p_u16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint16_t a, uint16x8_t b, mve_pred16_t p)\n   return vmaxvq_p_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxvt.u16\"  }  } */\n \n uint16_t\n foo1 (uint16_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vmaxvq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxvt.u16\"  }  } */\n+\n+uint16_t\n+foo2 (uint32_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxvt.u16\" 3 } } */"}, {"sha": "f2e976216c58e6cedb773fe6fc0c8ad70ffdcb67", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_p_u32.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint32_t a, uint32x4_t b, mve_pred16_t p)\n   return vmaxvq_p_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxvt.u32\"  }  } */\n \n uint32_t\n foo1 (uint32_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vmaxvq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxvt.u32\"  }  } */\n+\n+uint32_t\n+foo2 (uint8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxvt.u32\" 3 } } */"}, {"sha": "7df5b63c9bc68d48715e707ef34dc949eca2cc99", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_p_u8.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u8.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint8_t a, uint8x16_t b, mve_pred16_t p)\n   return vmaxvq_p_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxvt.u8\"  }  } */\n \n uint8_t\n foo1 (uint8_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vmaxvq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vmaxvt.u8\"  }  } */\n+\n+uint8_t\n+foo2 (uint16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxvt.u8\" 3 } } */"}, {"sha": "8412452cf3316a4db378672467a89795f5a0bcea", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_s16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (int16_t a, int16x8_t b)\n   return vmaxvq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxv.s16\"  }  } */\n \n int16_t\n foo1 (int16_t a, int16x8_t b)\n {\n   return vmaxvq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxv.s16\"  }  } */\n+\n+int16_t\n+foo2 (int8_t a, int16x8_t b)\n+{\n+  return vmaxvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxv.s16\" 3 } } */"}, {"sha": "09f4909c9a8557ba1aac54cce9dfab77630072ae", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_s32.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (int32_t a, int32x4_t b)\n   return vmaxvq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxv.s32\"  }  } */\n \n int32_t\n foo1 (int32_t a, int32x4_t b)\n {\n   return vmaxvq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxv.s32\"  }  } */\n+\n+int32_t\n+foo2 (int16_t a, int32x4_t b)\n+{\n+  return vmaxvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxv.s32\" 3 } } */"}, {"sha": "a087bbc6b6466ad06e33534308a68b64d8dc05c2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_s8.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s8.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (int8_t a, int8x16_t b)\n   return vmaxvq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxv.s8\"  }  } */\n \n int8_t\n foo1 (int8_t a, int8x16_t b)\n {\n   return vmaxvq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxv.s8\"  }  } */\n+\n+int8_t\n+foo2 (int32_t a, int8x16_t b)\n+{\n+  return vmaxvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxv.s8\" 3 } } */"}, {"sha": "47fe0d1cf0f89b04b74aa58afd9c4acbae69137f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_u16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint16_t a, uint16x8_t b)\n   return vmaxvq_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxv.u16\"  }  } */\n \n uint16_t\n foo1 (uint16_t a, uint16x8_t b)\n {\n   return vmaxvq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxv.u16\"  }  } */\n+\n+uint16_t\n+foo2 (uint32_t a, uint16x8_t b)\n+{\n+  return vmaxvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxv.u16\" 3 } } */"}, {"sha": "aa723daf5ddffeb20809c1851d18c232783e3725", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_u32.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint32_t a, uint32x4_t b)\n   return vmaxvq_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxv.u32\"  }  } */\n \n uint32_t\n foo1 (uint32_t a, uint32x4_t b)\n {\n   return vmaxvq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxv.u32\"  }  } */\n+\n+uint32_t\n+foo2 (uint8_t a, uint32x4_t b)\n+{\n+  return vmaxvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxv.u32\" 3 } } */"}, {"sha": "3aae785040c172ef86f6c818943eedb4e3fa11bb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_u8.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u8.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint8_t a, uint8x16_t b)\n   return vmaxvq_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxv.u8\"  }  } */\n \n uint8_t\n foo1 (uint8_t a, uint8x16_t b)\n {\n   return vmaxvq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxv.u8\"  }  } */\n+\n+uint8_t\n+foo2 (uint16_t a, uint8x16_t b)\n+{\n+  return vmaxvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxv.u8\" 3 } } */"}, {"sha": "9303ae02e39f38c0152f9279f7823b11e14486f0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminavq_p_s16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint16_t a, int16x8_t b, mve_pred16_t p)\n   return vminavq_p_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminavt.s16\"  }  } */\n \n uint16_t\n foo1 (uint16_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vminavq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminavt.s16\"  }  } */\n+\n+int16_t\n+foo2 (uint8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vminavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminavt.s16\" 3 } } */"}, {"sha": "36247f68b2cbc192926a76a27eaf607ea88d2764", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminavq_p_s32.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint32_t a, int32x4_t b, mve_pred16_t p)\n   return vminavq_p_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminavt.s32\"  }  } */\n \n uint32_t\n foo1 (uint32_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vminavq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminavt.s32\"  }  } */\n+\n+int32_t\n+foo2 (uint16_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vminavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminavt.s32\" 3 } } */"}, {"sha": "d3361615dcc983e3d42ce2772441f74a00e13d5e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminavq_p_s8.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s8.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint8_t a, int8x16_t b, mve_pred16_t p)\n   return vminavq_p_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminavt.s8\"  }  } */\n \n uint8_t\n foo1 (uint8_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vminavq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminavt.s8\"  }  } */\n+\n+int8_t\n+foo2 (uint32_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vminavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminavt.s8\" 3 } } */"}, {"sha": "17e4edca2f1acf8f94a22a9e9dae4c7868c0b455", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminavq_s16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint16_t a, int16x8_t b)\n   return vminavq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminav.s16\"  }  } */\n \n uint16_t\n foo1 (uint16_t a, int16x8_t b)\n {\n   return vminavq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminav.s16\"  }  } */\n+\n+int16_t\n+foo2 (uint8_t a, int16x8_t b)\n+{\n+  return vminavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminav.s16\" 3 } } */"}, {"sha": "032d02b885750c9b7077681ac7618c063b160ae0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminavq_s32.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint32_t a, int32x4_t b)\n   return vminavq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminav.s32\"  }  } */\n \n uint32_t\n foo1 (uint32_t a, int32x4_t b)\n {\n   return vminavq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminav.s32\"  }  } */\n+\n+int32_t\n+foo2 (uint16_t a, int32x4_t b)\n+{\n+  return vminavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminav.s32\" 3 } } */"}, {"sha": "2a2bb3d614674652ac3a8a7956a2d394f36f27a8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminavq_s8.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s8.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint8_t a, int8x16_t b)\n   return vminavq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminav.s8\"  }  } */\n \n uint8_t\n foo1 (uint8_t a, int8x16_t b)\n {\n   return vminavq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminav.s8\"  }  } */\n+\n+int8_t\n+foo2 (uint32_t a, int8x16_t b)\n+{\n+  return vminavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminav.s8\" 3 } } */"}, {"sha": "fadb23e05c847a8f15b9ac1f15d8e6c89a1b34bc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmavq_f16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (float16_t a, float16x8_t b)\n   return vminnmavq_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminnmav.f16\"  }  } */\n \n float16_t\n foo1 (float16_t a, float16x8_t b)\n {\n   return vminnmavq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminnmav.f16\"  }  } */\n+\n+float16_t\n+foo2 (float32_t a, float16x8_t b)\n+{\n+  return vminnmavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminnmav.f16\" 3 } } */"}, {"sha": "84714a96b9f54c3aba7aad7bfa6e6ff7758e5679", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmavq_f32.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (float32_t a, float32x4_t b)\n   return vminnmavq_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminnmav.f32\"  }  } */\n \n float32_t\n foo1 (float32_t a, float32x4_t b)\n {\n   return vminnmavq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminnmav.f32\"  }  } */\n+\n+float32_t\n+foo2 (float16_t a, float32x4_t b)\n+{\n+  return vminnmavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminnmav.f32\" 3 } } */"}, {"sha": "c79fa307ae024e3c8d8697654af580f460bf4415", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmavq_p_f16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (float16_t a, float16x8_t b, mve_pred16_t p)\n   return vminnmavq_p_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminnmavt.f16\"  }  } */\n \n float16_t\n foo1 (float16_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vminnmavq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminnmavt.f16\"  }  } */\n+\n+float16_t\n+foo2 (float32_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vminnmavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminnmavt.f16\" 3 } } */"}, {"sha": "bea04c7aac699dad5f21adc8aa3f8be070557855", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmavq_p_f32.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (float32_t a, float32x4_t b, mve_pred16_t p)\n   return vminnmavq_p_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminnmavt.f32\"  }  } */\n \n float32_t\n foo1 (float32_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vminnmavq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminnmavt.f32\"  }  } */\n+\n+float32_t\n+foo2 (float16_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vminnmavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminnmavt.f32\" 3 } } */"}, {"sha": "0eb3a4af14ec57d60ec34bfc2d7210d8db60ef52", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmvq_f16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (float16_t a, float16x8_t b)\n   return vminnmvq_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminnmv.f16\"  }  } */\n \n float16_t\n foo1 (float16_t a, float16x8_t b)\n {\n   return vminnmvq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminnmv.f16\"  }  } */\n+\n+float16_t\n+foo2 (float32_t a, float16x8_t b)\n+{\n+  return vminnmvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminnmv.f16\" 3 } } */"}, {"sha": "f3183508f8e5088e7fa37aad0cca77c1014065d8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmvq_f32.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (float32_t a, float32x4_t b)\n   return vminnmvq_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminnmv.f32\"  }  } */\n \n float32_t\n foo1 (float32_t a, float32x4_t b)\n {\n   return vminnmvq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminnmv.f32\"  }  } */\n+\n+float32_t\n+foo2 (float16_t a, float32x4_t b)\n+{\n+  return vminnmvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminnmv.f32\" 3 } } */"}, {"sha": "16f6ac514c86d99c87708a6a69eca984f15f769b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmvq_p_f16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (float16_t a, float16x8_t b, mve_pred16_t p)\n   return vminnmvq_p_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminnmvt.f16\"  }  } */\n \n float16_t\n foo1 (float16_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vminnmvq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminnmvt.f16\"  }  } */\n+\n+float16_t\n+foo2 (float32_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vminnmvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminnmvt.f16\" 3 } } */"}, {"sha": "a8e4f9ffba7286a4b77c97ac156d79e3be3355d4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmvq_p_f32.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (float32_t a, float32x4_t b, mve_pred16_t p)\n   return vminnmvq_p_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminnmvt.f32\"  }  } */\n \n float32_t\n foo1 (float32_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vminnmvq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminnmvt.f32\"  }  } */\n+\n+float32_t\n+foo2 (float16_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vminnmvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminnmvt.f32\" 3 } } */"}, {"sha": "91bb63f6ba6ea0dcafb22db612aa42d44a58de67", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_p_s16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (int16_t a, int16x8_t b, mve_pred16_t p)\n   return vminvq_p_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminvt.s16\"  }  } */\n \n int16_t\n foo1 (int16_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vminvq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminvt.s16\"  }  } */\n+\n+int16_t\n+foo2 (int8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vminvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminvt.s16\" 3 } } */"}, {"sha": "a846701312c858cf2cb6d9d9c113ce9c5a31fb53", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_p_s32.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (int32_t a, int32x4_t b, mve_pred16_t p)\n   return vminvq_p_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminvt.s32\"  }  } */\n \n int32_t\n foo1 (int32_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vminvq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminvt.s32\"  }  } */\n+\n+int32_t\n+foo2 (int16_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vminvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminvt.s32\" 3 } } */"}, {"sha": "716d414f3a7555de8738349b35df01d2a6f08832", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_p_s8.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s8.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (int8_t a, int8x16_t b, mve_pred16_t p)\n   return vminvq_p_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminvt.s8\"  }  } */\n \n int8_t\n foo1 (int8_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vminvq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminvt.s8\"  }  } */\n+\n+int8_t\n+foo2 (int32_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vminvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminvt.s8\" 3 } } */"}, {"sha": "cc7f8fe8933d3e773f91a8605287709f94492097", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_p_u16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint16_t a, uint16x8_t b, mve_pred16_t p)\n   return vminvq_p_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminvt.u16\"  }  } */\n \n uint16_t\n foo1 (uint16_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vminvq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminvt.u16\"  }  } */\n+\n+uint16_t\n+foo2 (uint32_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vminvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminvt.u16\" 3 } } */"}, {"sha": "6bde0be29ccf73a1cb36535a3d2677d4338c3da7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_p_u32.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint32_t a, uint32x4_t b, mve_pred16_t p)\n   return vminvq_p_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminvt.u32\"  }  } */\n \n uint32_t\n foo1 (uint32_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vminvq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminvt.u32\"  }  } */\n+\n+uint32_t\n+foo2 (uint8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vminvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminvt.u32\" 3 } } */"}, {"sha": "bb894904f3cfeee8c881bf7f2b13fb6d7e0f4f7a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_p_u8.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u8.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint8_t a, uint8x16_t b, mve_pred16_t p)\n   return vminvq_p_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminvt.u8\"  }  } */\n \n uint8_t\n foo1 (uint8_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vminvq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vminvt.u8\"  }  } */\n+\n+uint8_t\n+foo2 (uint16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vminvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminvt.u8\" 3 } } */"}, {"sha": "6d589aa4a0506cd18fb4942e5511b14fe15a2811", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_s16.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,18 @@ foo (int16_t a, int16x8_t b)\n   return vminvq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminv.s16\"  }  } */\n \n int16_t\n foo1 (int16_t a, int16x8_t b)\n {\n   return vminvq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminv.s16\"  }  } */\n+int16_t\n+foo2 (int8_t a, int16x8_t b)\n+{\n+  return vminvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminv.s16\" 3 } } */"}, {"sha": "7c727d6d92b05424aa8441bf8980355bee72f168", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_s32.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,18 @@ foo (int32_t a, int32x4_t b)\n   return vminvq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminv.s32\"  }  } */\n \n int32_t\n foo1 (int32_t a, int32x4_t b)\n {\n   return vminvq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminv.s32\"  }  } */\n+int32_t\n+foo2 (int8_t a, int32x4_t b)\n+{\n+  return vminvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminv.s32\" 3 } } */"}, {"sha": "76309482fc56d6166d91f0845c3fb60dfdaaddfd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_s8.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s8.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,18 @@ foo (int8_t a, int8x16_t b)\n   return vminvq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminv.s8\"  }  } */\n \n int8_t\n foo1 (int8_t a, int8x16_t b)\n {\n   return vminvq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminv.s8\"  }  } */\n+int8_t\n+foo2 (int32_t a, int8x16_t b)\n+{\n+  return vminvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminv.s8\" 3 } } */"}, {"sha": "698975f456c708697f4c4820970b08c6321d81fc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_u16.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u16.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint16_t a, uint16x8_t b)\n   return vminvq_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminv.u16\"  }  } */\n \n uint16_t\n foo1 (uint16_t a, uint16x8_t b)\n {\n   return vminvq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminv.u16\"  }  } */\n+\n+uint8_t\n+foo2 (uint32_t a, uint16x8_t b)\n+{\n+  return vminvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminv.u16\" 3 } } */"}, {"sha": "7489f81debfeda816fe29379b695afa50df3ac0e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_u32.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u32.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,18 @@ foo (uint32_t a, uint32x4_t b)\n   return vminvq_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminv.u32\"  }  } */\n \n uint32_t\n foo1 (uint32_t a, uint32x4_t b)\n {\n   return vminvq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminv.u32\"  }  } */\n+uint32_t\n+foo2 (uint16_t a, uint32x4_t b)\n+{\n+  return vminvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminv.u32\" 3 } } */"}, {"sha": "aa2b986d5587c2c7a79e86370cf179d5f8751db7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_u8.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251950d899bc3c18b5775fe9fe20bebbdc8d15cb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u8.c?ref=251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "patch": "@@ -10,12 +10,19 @@ foo (uint8_t a, uint8x16_t b)\n   return vminvq_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminv.u8\"  }  } */\n \n uint8_t\n foo1 (uint8_t a, uint8x16_t b)\n {\n   return vminvq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminv.u8\"  }  } */\n+\n+uint16_t\n+foo2 (uint32_t a, uint8x16_t b)\n+{\n+  return vminvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n+/* { dg-final { scan-assembler-times \"vminv.u8\" 3 } } */"}]}