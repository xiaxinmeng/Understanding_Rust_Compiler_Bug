{"sha": "30fd2977745d53f282d1560212e3bea07943a937", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBmZDI5Nzc3NDVkNTNmMjgyZDE1NjAyMTJlM2JlYTA3OTQzYTkzNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-05-24T12:40:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-05-24T12:40:01Z"}, "message": "re PR tree-optimization/71253 (ICE during loop distribution w/ -O2 -ftree-loop-distribution)\n\n2016-05-24  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71253\n\t* cfganal.h (control_dependences): Make robust against edge\n\tand BB removal.\n\t(control_dependences::control_dependences): Remove edge_list argument.\n\t(control_dependences::get_edge): Remove.\n\t(control_dependences::get_edge_src): Add.\n\t(control_dependences::get_edge_dest): Likewise.\n\t(control_dependences::m_el): Make a vector of edge src/dest index.\n\t* cfganal.c (control_dependences::find_control_dependence): Adjust.\n\t(control_dependences::control_dependences): Likewise.\n\t(control_dependences::~control_dependence): Likewise.\n\t(control_dependences::get_edge): Remove.\n\t(control_dependences::get_edge_src): Add.\n\t(control_dependences::get_edge_dest): Likewise.\n\t* tree-ssa-dce.c (mark_control_dependent_edges_necessary): Use\n\tget_edge_src.\n\t(perform_tree_ssa_dce): Adjust.\n\t* tree-loop-distribution.c (create_edge_for_control_dependence): Use\n\tget_edge_src.\n\t(pass_loop_distribution::execute): Adjust.  Do loop destroying\n\tconditional on changed.\n\n\t* gcc.dg/torture/pr71253.c: New testcase.\n\nFrom-SVN: r236636", "tree": {"sha": "38872e66995c95e8cbb549b062945e2448f38ed6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38872e66995c95e8cbb549b062945e2448f38ed6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30fd2977745d53f282d1560212e3bea07943a937", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30fd2977745d53f282d1560212e3bea07943a937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30fd2977745d53f282d1560212e3bea07943a937", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30fd2977745d53f282d1560212e3bea07943a937/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37923729c5ab013459a7eeeba5ce53fca75759fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37923729c5ab013459a7eeeba5ce53fca75759fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37923729c5ab013459a7eeeba5ce53fca75759fe"}], "stats": {"total": 158, "additions": 121, "deletions": 37}, "files": [{"sha": "cd557fbdffa12c822a78b3090750f292583f42a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30fd2977745d53f282d1560212e3bea07943a937/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30fd2977745d53f282d1560212e3bea07943a937/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30fd2977745d53f282d1560212e3bea07943a937", "patch": "@@ -1,3 +1,27 @@\n+2016-05-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71253\n+\t* cfganal.h (control_dependences): Make robust against edge\n+\tand BB removal.\n+\t(control_dependences::control_dependences): Remove edge_list argument.\n+\t(control_dependences::get_edge): Remove.\n+\t(control_dependences::get_edge_src): Add.\n+\t(control_dependences::get_edge_dest): Likewise.\n+\t(control_dependences::m_el): Make a vector of edge src/dest index.\n+\t* cfganal.c (control_dependences::find_control_dependence): Adjust.\n+\t(control_dependences::control_dependences): Likewise.\n+\t(control_dependences::~control_dependence): Likewise.\n+\t(control_dependences::get_edge): Remove.\n+\t(control_dependences::get_edge_src): Add.\n+\t(control_dependences::get_edge_dest): Likewise.\n+\t* tree-ssa-dce.c (mark_control_dependent_edges_necessary): Use\n+\tget_edge_src.\n+\t(perform_tree_ssa_dce): Adjust.\n+\t* tree-loop-distribution.c (create_edge_for_control_dependence): Use\n+\tget_edge_src.\n+\t(pass_loop_distribution::execute): Adjust.  Do loop destroying\n+\tconditional on changed.\n+\n 2016-05-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/69857"}, {"sha": "aabc065ca3521bd893616db51c54ed414d5abc71", "filename": "gcc/cfganal.c", "status": "modified", "additions": 43, "deletions": 24, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30fd2977745d53f282d1560212e3bea07943a937/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30fd2977745d53f282d1560212e3bea07943a937/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=30fd2977745d53f282d1560212e3bea07943a937", "patch": "@@ -408,43 +408,54 @@ control_dependences::find_control_dependence (int edge_index)\n   basic_block current_block;\n   basic_block ending_block;\n \n-  gcc_assert (INDEX_EDGE_PRED_BB (m_el, edge_index)\n-\t      != EXIT_BLOCK_PTR_FOR_FN (cfun));\n+  gcc_assert (get_edge_src (edge_index) != EXIT_BLOCK_PTR_FOR_FN (cfun));\n \n-  if (INDEX_EDGE_PRED_BB (m_el, edge_index) == ENTRY_BLOCK_PTR_FOR_FN (cfun))\n+  /* For abnormal edges, we don't make current_block control\n+     dependent because instructions that throw are always necessary\n+     anyway.  */\n+  edge e = find_edge (get_edge_src (edge_index), get_edge_dest (edge_index));\n+  if (e->flags & EDGE_ABNORMAL)\n+    return;\n+\n+  if (get_edge_src (edge_index) == ENTRY_BLOCK_PTR_FOR_FN (cfun))\n     ending_block = single_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n   else\n-    ending_block = find_pdom (INDEX_EDGE_PRED_BB (m_el, edge_index));\n+    ending_block = find_pdom (get_edge_src (edge_index));\n \n-  for (current_block = INDEX_EDGE_SUCC_BB (m_el, edge_index);\n+  for (current_block = get_edge_dest (edge_index);\n        current_block != ending_block\n        && current_block != EXIT_BLOCK_PTR_FOR_FN (cfun);\n        current_block = find_pdom (current_block))\n-    {\n-      edge e = INDEX_EDGE (m_el, edge_index);\n-\n-      /* For abnormal edges, we don't make current_block control\n-\t dependent because instructions that throw are always necessary\n-\t anyway.  */\n-      if (e->flags & EDGE_ABNORMAL)\n-\tcontinue;\n-\n-      set_control_dependence_map_bit (current_block, edge_index);\n-    }\n+    set_control_dependence_map_bit (current_block, edge_index);\n }\n \n /* Record all blocks' control dependences on all edges in the edge\n    list EL, ala Morgan, Section 3.6.  */\n \n-control_dependences::control_dependences (struct edge_list *edges)\n-  : m_el (edges)\n+control_dependences::control_dependences ()\n {\n   timevar_push (TV_CONTROL_DEPENDENCES);\n+\n+  /* Initialize the edge list.  */\n+  int num_edges = 0;\n+  basic_block bb;\n+  FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR_FOR_FN (cfun),\n+\t\t  EXIT_BLOCK_PTR_FOR_FN (cfun), next_bb)\n+    num_edges += EDGE_COUNT (bb->succs);\n+  m_el.create (num_edges);\n+  edge e;\n+  edge_iterator ei;\n+  FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR_FOR_FN (cfun),\n+\t\t  EXIT_BLOCK_PTR_FOR_FN (cfun), next_bb)\n+    FOR_EACH_EDGE (e, ei, bb->succs)\n+      m_el.quick_push (std::make_pair (e->src->index, e->dest->index));\n+\n   control_dependence_map.create (last_basic_block_for_fn (cfun));\n   for (int i = 0; i < last_basic_block_for_fn (cfun); ++i)\n     control_dependence_map.quick_push (BITMAP_ALLOC (NULL));\n-  for (int i = 0; i < NUM_EDGES (m_el); ++i)\n+  for (int i = 0; i < num_edges; ++i)\n     find_control_dependence (i);\n+\n   timevar_pop (TV_CONTROL_DEPENDENCES);\n }\n \n@@ -455,7 +466,7 @@ control_dependences::~control_dependences ()\n   for (unsigned i = 0; i < control_dependence_map.length (); ++i)\n     BITMAP_FREE (control_dependence_map[i]);\n   control_dependence_map.release ();\n-  free_edge_list (m_el);\n+  m_el.release ();\n }\n \n /* Returns the bitmap of edges the basic-block I is dependent on.  */\n@@ -466,12 +477,20 @@ control_dependences::get_edges_dependent_on (int i)\n   return control_dependence_map[i];\n }\n \n-/* Returns the edge with index I from the edge list.  */\n+/* Returns the edge source with index I from the edge list.  */\n \n-edge\n-control_dependences::get_edge (int i)\n+basic_block\n+control_dependences::get_edge_src (int i)\n+{\n+  return BASIC_BLOCK_FOR_FN (cfun, m_el[i].first);\n+}\n+\n+/* Returns the edge destination with index I from the edge list.  */\n+\n+basic_block\n+control_dependences::get_edge_dest (int i)\n {\n-  return INDEX_EDGE (m_el, i);\n+  return BASIC_BLOCK_FOR_FN (cfun, m_el[i].second);\n }\n \n "}, {"sha": "ea7ed7a425f257540cb9e2eed7e4f2f05cfdba1f", "filename": "gcc/cfganal.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30fd2977745d53f282d1560212e3bea07943a937/gcc%2Fcfganal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30fd2977745d53f282d1560212e3bea07943a937/gcc%2Fcfganal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.h?ref=30fd2977745d53f282d1560212e3bea07943a937", "patch": "@@ -34,17 +34,18 @@ struct edge_list\n class control_dependences\n {\n public:\n-  control_dependences (edge_list *);\n+  control_dependences ();\n   ~control_dependences ();\n   bitmap get_edges_dependent_on (int);\n-  edge get_edge (int);\n+  basic_block get_edge_src (int);\n+  basic_block get_edge_dest (int);\n \n private:\n   void set_control_dependence_map_bit (basic_block, int);\n   void clear_control_dependence_bitmap (basic_block);\n   void find_control_dependence (int);\n   vec<bitmap> control_dependence_map;\n-  edge_list *m_el;\n+  vec<std::pair<int, int> > m_el;\n };\n \n extern bool mark_dfs_back_edges (void);"}, {"sha": "586202e9fa0700b1f11706d4934b3a8ed824f91a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30fd2977745d53f282d1560212e3bea07943a937/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30fd2977745d53f282d1560212e3bea07943a937/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30fd2977745d53f282d1560212e3bea07943a937", "patch": "@@ -1,3 +1,8 @@\n+2016-05-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71253\n+\t* gcc.dg/torture/pr71253.c: New testcase.\n+\n 2016-05-24  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR middle-end/71252"}, {"sha": "ecbba77dca7efb34ef304326558476de09a21d26", "filename": "gcc/testsuite/gcc.dg/torture/pr71253.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30fd2977745d53f282d1560212e3bea07943a937/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71253.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30fd2977745d53f282d1560212e3bea07943a937/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71253.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71253.c?ref=30fd2977745d53f282d1560212e3bea07943a937", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ftree-loop-distribution\" } */\n+\n+int jo, af, yb;\n+long int wt;\n+\n+void\n+nr (void)\n+{\n+  int *bf = &yb;\n+  for (;;)\n+    {\n+      while (jo != 0)\n+\t{\n+\t  long int *ad = (long int *) &yb;\n+\t  for (;;)\n+\t    {\n+\t      int fv;\n+\t      for (*ad = 1; *ad < 3; ++(*ad))\n+\t\t{\n+\t\t  af = *bf;\n+\t\t  fv = wt;\n+\t\t}\n+\t      bf = (int *) &wt;\n+\t      ad = &wt;\n+\t      do\n+\t\t{\n+\t\t  jo = wt = ((wt != 0) ? 1 : fv);\n+\t\t}\n+\t      while (jo != 0);\n+\t    }\n+\t}\n+      bf = &af;\n+    }\n+}"}, {"sha": "e4163b274ffde9b1dad255f12b552f08a014703c", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30fd2977745d53f282d1560212e3bea07943a937/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30fd2977745d53f282d1560212e3bea07943a937/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=30fd2977745d53f282d1560212e3bea07943a937", "patch": "@@ -278,7 +278,7 @@ create_edge_for_control_dependence (struct graph *rdg, basic_block bb,\n   EXECUTE_IF_SET_IN_BITMAP (cd->get_edges_dependent_on (bb->index),\n \t\t\t    0, edge_n, bi)\n     {\n-      basic_block cond_bb = cd->get_edge (edge_n)->src;\n+      basic_block cond_bb = cd->get_edge_src (edge_n);\n       gimple *stmt = last_stmt (cond_bb);\n       if (stmt && is_ctrl_stmt (stmt))\n \t{\n@@ -1789,7 +1789,7 @@ pass_loop_distribution::execute (function *fun)\n \t    {\n \t      calculate_dominance_info (CDI_DOMINATORS);\n \t      calculate_dominance_info (CDI_POST_DOMINATORS);\n-\t      cd = new control_dependences (create_edge_list ());\n+\t      cd = new control_dependences ();\n \t      free_dominance_info (CDI_POST_DOMINATORS);\n \t    }\n \t  bool destroy_p;\n@@ -1815,14 +1815,14 @@ pass_loop_distribution::execute (function *fun)\n   if (cd)\n     delete cd;\n \n-  /* Destroy loop bodies that could not be reused.  Do this late as we\n-     otherwise can end up refering to stale data in control dependences.  */\n-  unsigned i;\n-  FOR_EACH_VEC_ELT (loops_to_be_destroyed, i, loop)\n-    destroy_loop (loop);\n-\n   if (changed)\n     {\n+      /* Destroy loop bodies that could not be reused.  Do this late as we\n+\t otherwise can end up refering to stale data in control dependences.  */\n+      unsigned i;\n+      FOR_EACH_VEC_ELT (loops_to_be_destroyed, i, loop)\n+\t  destroy_loop (loop);\n+\n       /* Cached scalar evolutions now may refer to wrong or non-existing\n \t loops.  */\n       scev_reset_htab ();"}, {"sha": "954fc67ee0da83b936415cfcf8cc6dfbe5ff1f7b", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30fd2977745d53f282d1560212e3bea07943a937/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30fd2977745d53f282d1560212e3bea07943a937/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=30fd2977745d53f282d1560212e3bea07943a937", "patch": "@@ -339,7 +339,7 @@ mark_control_dependent_edges_necessary (basic_block bb, bool ignore_self)\n   EXECUTE_IF_SET_IN_BITMAP (cd->get_edges_dependent_on (bb->index),\n \t\t\t    0, edge_number, bi)\n     {\n-      basic_block cd_bb = cd->get_edge (edge_number)->src;\n+      basic_block cd_bb = cd->get_edge_src (edge_number);\n \n       if (ignore_self && cd_bb == bb)\n \t{\n@@ -1577,7 +1577,7 @@ perform_tree_ssa_dce (bool aggressive)\n     {\n       /* Compute control dependence.  */\n       calculate_dominance_info (CDI_POST_DOMINATORS);\n-      cd = new control_dependences (create_edge_list ());\n+      cd = new control_dependences ();\n \n       visited_control_parents =\n \tsbitmap_alloc (last_basic_block_for_fn (cfun));"}]}