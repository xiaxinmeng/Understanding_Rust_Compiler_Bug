{"sha": "7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UxNjAzYzBmMGRlYTcyYzYyZjViNzhjYmZiY2JlYWY0YWMwNTIwNw==", "commit": {"author": {"name": "Ziga Mahkovec", "email": "ziga.mahkovec@klika.si", "date": "2005-06-01T22:11:00Z"}, "committer": {"name": "Ziga Mahkovec", "email": "ziga@gcc.gnu.org", "date": "2005-06-01T22:11:00Z"}, "message": "re PR libgcj/20435 (regex pattern compiling bug)\n\n2005-06-01  Ziga Mahkovec  <ziga.mahkovec@klika.si>\n\n\tPR libgcj/20435:\n\t* gnu/regexp/RESyntax.java (RE_POSSESSIVE_OPS): New field.\n\t(static): Add possessive matching to JAVA_1_4 syntax.\n\t* gnu/regexp/RETokenRepeated.java (possessive): New field.\n\t(makePossessive, isPossessive): New methods.\n\t(match): Don't back off during possessive matching.\n\t* gnu/regexp/RE.java (initalize): Accept possessive quantifier.\n\t* java/util/regex/Pattern.java (constructor): Switch syntax from PERL5\n\tto JAVA_1_4.\n\nFrom-SVN: r100466", "tree": {"sha": "c21882d9affe68b641900cf6ea85eb1ec0847f80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c21882d9affe68b641900cf6ea85eb1ec0847f80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207/comments", "author": null, "committer": null, "parents": [{"sha": "cce7074710fc4712506c58a183034e53b87262fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cce7074710fc4712506c58a183034e53b87262fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cce7074710fc4712506c58a183034e53b87262fa"}], "stats": {"total": 72, "additions": 56, "deletions": 16}, "files": [{"sha": "7b3a363b10968968b88ff899a6230e802db21b61", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207", "patch": "@@ -1,3 +1,15 @@\n+2005-06-01  Ziga Mahkovec  <ziga.mahkovec@klika.si>\n+\n+\tPR libgcj/20435:\n+\t* gnu/regexp/RESyntax.java (RE_POSSESSIVE_OPS): New field.\n+\t(static): Add possessive matching to JAVA_1_4 syntax.\n+\t* gnu/regexp/RETokenRepeated.java (possessive): New field.\n+\t(makePossessive, isPossessive): New methods.\n+\t(match): Don't back off during possessive matching.\n+\t* gnu/regexp/RE.java (initalize): Accept possessive quantifier.\n+\t* java/util/regex/Pattern.java (constructor): Switch syntax from PERL5\n+\tto JAVA_1_4.\n+\n 2005-06-01  Keith Seitz  <keiths@redhat.com>\n \n \t* gnu/classpath/jdwp/transport/JdwpPacket.java: New file."}, {"sha": "541e8cb950fd40b478d20462800ae4c7cab57262", "filename": "libjava/gnu/regexp/RE.java", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207/libjava%2Fgnu%2Fregexp%2FRE.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207/libjava%2Fgnu%2Fregexp%2FRE.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fregexp%2FRE.java?ref=7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207", "patch": "@@ -629,20 +629,29 @@ else if ((unit.ch == '*') && !(unit.bk || quot)) {\n \tcurrentToken = setRepeated(currentToken,0,Integer.MAX_VALUE,index);\n       }\n \n-      // ONE-OR-MORE REPEAT OPERATOR\n+      // ONE-OR-MORE REPEAT OPERATOR / POSSESSIVE MATCHING OPERATOR\n       //  + | \\+ depending on RE_BK_PLUS_QM\n       //  not available if RE_LIMITED_OPS is set\n \n       else if ((unit.ch == '+') && !syntax.get(RESyntax.RE_LIMITED_OPS) && (!syntax.get(RESyntax.RE_BK_PLUS_QM) ^ (unit.bk || quot))) {\n \tif (currentToken == null)\n           throw new REException(getLocalizedMessage(\"repeat.no.token\"),REException.REG_BADRPT,index);\n-\tif (currentToken instanceof RETokenRepeated)\n-          throw new REException(getLocalizedMessage(\"repeat.chained\"),REException.REG_BADRPT,index);\n-\tif (currentToken instanceof RETokenWordBoundary || currentToken instanceof RETokenWordBoundary)\n+\t\n+\t// Check for possessive matching on RETokenRepeated\n+\tif (currentToken instanceof RETokenRepeated) {\n+\t  RETokenRepeated tokenRep = (RETokenRepeated)currentToken;\n+\t  if (syntax.get(RESyntax.RE_POSSESSIVE_OPS) && !tokenRep.isPossessive() && !tokenRep.isStingy())\n+\t    tokenRep.makePossessive();\n+\t  else\n+\t    throw new REException(getLocalizedMessage(\"repeat.chained\"),REException.REG_BADRPT,index);\n+\n+\t}\n+\telse if (currentToken instanceof RETokenWordBoundary || currentToken instanceof RETokenWordBoundary)\n \t  throw new REException(getLocalizedMessage(\"repeat.assertion\"),REException.REG_BADRPT,index);\n-\tif (currentToken.getMinimumLength() == 0)\n+\telse if (currentToken.getMinimumLength() == 0)\n \t  throw new REException(getLocalizedMessage(\"repeat.empty.token\"),REException.REG_BADRPT,index);\n-\tcurrentToken = setRepeated(currentToken,1,Integer.MAX_VALUE,index);\n+\telse\n+\t  currentToken = setRepeated(currentToken,1,Integer.MAX_VALUE,index);\n       }\n \n       // ZERO-OR-ONE REPEAT OPERATOR / STINGY MATCHING OPERATOR\n@@ -655,13 +664,14 @@ else if ((unit.ch == '?') && !syntax.get(RESyntax.RE_LIMITED_OPS) && (!syntax.ge\n \n \t// Check for stingy matching on RETokenRepeated\n \tif (currentToken instanceof RETokenRepeated) {\n-          if (syntax.get(RESyntax.RE_STINGY_OPS) && !((RETokenRepeated)currentToken).isStingy())\n-            ((RETokenRepeated)currentToken).makeStingy();\n-          else\n-            throw new REException(getLocalizedMessage(\"repeat.chained\"),REException.REG_BADRPT,index);\n-        }\n-        else if (currentToken instanceof RETokenWordBoundary || currentToken instanceof RETokenWordBoundary)\n-          throw new REException(getLocalizedMessage(\"repeat.assertion\"),REException.REG_BADRPT,index);\n+\t  RETokenRepeated tokenRep = (RETokenRepeated)currentToken;\n+\t  if (syntax.get(RESyntax.RE_STINGY_OPS) && !tokenRep.isStingy() && !tokenRep.isPossessive())\n+\t    tokenRep.makeStingy();\n+\t  else\n+\t    throw new REException(getLocalizedMessage(\"repeat.chained\"),REException.REG_BADRPT,index);\n+\t}\n+\telse if (currentToken instanceof RETokenWordBoundary || currentToken instanceof RETokenWordBoundary)\n+\t  throw new REException(getLocalizedMessage(\"repeat.assertion\"),REException.REG_BADRPT,index);\n \telse\n \t  currentToken = setRepeated(currentToken,0,1,index);\n       }"}, {"sha": "7cb3e1400b809019c023b0409cd5fa18bd5b442b", "filename": "libjava/gnu/regexp/RESyntax.java", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207/libjava%2Fgnu%2Fregexp%2FRESyntax.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207/libjava%2Fgnu%2Fregexp%2FRESyntax.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fregexp%2FRESyntax.java?ref=7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207", "patch": "@@ -197,7 +197,12 @@ public final class RESyntax implements Serializable {\n    */\n   public static final int RE_CHAR_CLASS_ESC_IN_LISTS   = 24;\n \n-  private static final int BIT_TOTAL                   = 25;\n+  /**\n+   * Syntax bit.  Possessive matching is allowed (++, *+, ?+, {x,y}+).\n+   */\n+  public static final int RE_POSSESSIVE_OPS            = 25;\n+\n+  private static final int BIT_TOTAL                   = 26;\n \n   /**\n    * Predefined syntax.\n@@ -425,6 +430,7 @@ public final class RESyntax implements Serializable {\n \n       RE_SYNTAX_JAVA_1_4 = new RESyntax(RE_SYNTAX_PERL5)\n \t  // XXX\n+\t  .set(RE_POSSESSIVE_OPS)         // *+,?+,++,{}+\n \t  .makeFinal();\n   }\n "}, {"sha": "821e4c55c0f1e6218f162ffc51b26a0b5031bf34", "filename": "libjava/gnu/regexp/RETokenRepeated.java", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207/libjava%2Fgnu%2Fregexp%2FRETokenRepeated.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207/libjava%2Fgnu%2Fregexp%2FRETokenRepeated.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fregexp%2FRETokenRepeated.java?ref=7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207", "patch": "@@ -44,6 +44,7 @@ final class RETokenRepeated extends REToken {\n     private REToken token;\n     private int min,max;\n     private boolean stingy;\n+    private boolean possessive;\n     \n     RETokenRepeated(int subIndex, REToken token, int min, int max) {\n \tsuper(subIndex);\n@@ -61,6 +62,16 @@ void makeStingy() {\n     boolean isStingy() {\n \treturn stingy;\n     }\n+\n+    /** Sets possessive matching mode to true. */\n+    void makePossessive() {\n+        possessive = true;\n+    }\n+\n+    /** Queries if this token has possessive matching enabled. */\n+    boolean isPossessive() {\n+        return possessive;\n+    }\n     \n     /**\n      * The minimum length of a repeated token is the minimum length\n@@ -172,6 +183,8 @@ boolean match(CharIndexed input, REMatch mymatch) {\n \t\t}\n \t    }\n \t    // else did not match rest of the tokens, try again on smaller sample\n+\t    // or break out when performing possessive matching\n+\t    if (possessive) break;\n \t}\n \tif (allResults != null) {\n \t    mymatch.assignFrom(allResults); // does this get all?"}, {"sha": "455171c5bbb2cfd33b6063389887df9b076aef32", "filename": "libjava/java/util/regex/Pattern.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207/libjava%2Fjava%2Futil%2Fregex%2FPattern.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207/libjava%2Fjava%2Futil%2Fregex%2FPattern.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fregex%2FPattern.java?ref=7e1603c0f0dea72c62f5b78cbfbcbeaf4ac05207", "patch": "@@ -84,8 +84,7 @@ private Pattern (String regex, int flags)\n     // if ((flags & UNICODE_CASE) != 0) gnuFlags =\n     // if ((flags & CANON_EQ) != 0) gnuFlags =\n \n-    // Eventually there will be such a thing as JDK 1_4 syntax\n-    RESyntax syntax = RESyntax.RE_SYNTAX_PERL5;\n+    RESyntax syntax = RESyntax.RE_SYNTAX_JAVA_1_4;\n     if ((flags & UNIX_LINES) != 0)\n       {\n \t// Use a syntax set with \\n for linefeeds?"}]}