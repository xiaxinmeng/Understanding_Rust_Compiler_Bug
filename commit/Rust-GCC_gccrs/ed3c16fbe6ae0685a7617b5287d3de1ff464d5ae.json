{"sha": "ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQzYzE2ZmJlNmFlMDY4NWE3NjE3YjUyODdkM2RlMWZmNDY0ZDVhZQ==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2005-06-02T14:52:18Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2005-06-02T14:52:18Z"}, "message": "re PR tree-optimization/21734 (ICE: -ftree-vectorize, segfault)\n\n        PR tree-optimization/21734\n        * tree-vectorizer.c (slpeel_update_phis_for_duplicate_loop): Use the\n        phi_result when current_def is not available.\n        (slpeel_update_phi_nodes_for_guard1): Don't fail if current_def is not\n        available.\n\nFrom-SVN: r100494", "tree": {"sha": "70efda32e52ad7147632f73b19b89bfc258edbc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70efda32e52ad7147632f73b19b89bfc258edbc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae/comments", "author": null, "committer": null, "parents": [{"sha": "9419649c017669b08911458bc16ac18e2792bc56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9419649c017669b08911458bc16ac18e2792bc56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9419649c017669b08911458bc16ac18e2792bc56"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "ced17d5ab45c154391c9fea1ae239b3e34cb10e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae", "patch": "@@ -1,3 +1,11 @@\n+2005-06-02  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/21734\n+\t* tree-vectorizer.c (slpeel_update_phis_for_duplicate_loop): Use the\n+\tphi_result when current_def is not available.\n+\t(slpeel_update_phi_nodes_for_guard1): Don't fail if current_def is not\n+\tavailable.\t\n+\n 2005-06-02  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.c (rs6000_insn_valid_within_doloop): New."}, {"sha": "9222799790f923171b67ccc4109725d6588c856b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae", "patch": "@@ -1,3 +1,9 @@\n+2005-06-02  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/21734\n+\t* g++.dg/vect/pr21734_1.cc: New.\n+\t* g++.dg/vect/pr21734_2.cc: New.\n+\n 2005-06-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/20350"}, {"sha": "c65d9fcaa81398d5823df846390c4d270781d5d6", "filename": "gcc/testsuite/g++.dg/vect/pr21734_1.cc", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr21734_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr21734_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr21734_1.cc?ref=ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+\n+struct A\n+{\n+  int a[4];\n+  int& operator[](int i) { return a[i]; }\n+};\n+\n+struct B : public A\n+{\n+  int& operator[](int i) { return A::operator[](i); }\n+};\n+\n+void foo(B &b)\n+{\n+  for (int i=0; i<4; ++i)\n+    b[i] = 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "58efedf18f3dba57a21270ab979b87505e22bbe4", "filename": "gcc/testsuite/g++.dg/vect/pr21734_2.cc", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr21734_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr21734_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr21734_2.cc?ref=ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+struct A\n+{\n+  int a[4];\n+  int* operator[](int i) { return &a[i]; }\n+};\n+\n+void foo(A a1, A &a2)\n+{\n+  a1[1][1]=0;\n+  for (int i=0; i<4; ++i)\n+    a2.a[i]=0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "883f403051c01ae2e097dcf2c40d8fb3cea436d4", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=ed3c16fbe6ae0685a7617b5287d3de1ff464d5ae", "patch": "@@ -320,8 +320,11 @@ slpeel_update_phis_for_duplicate_loop (struct loop *orig_loop,\n \n       new_ssa_name = get_current_def (def);\n       if (!new_ssa_name)\n-        /* Something defined outside of the loop.  */\n-        continue;\n+\t{\n+\t  /* This only happens if there are no definitions\n+\t     inside the loop. use the phi_result in this case.  */\n+\t  new_ssa_name = PHI_RESULT (phi_new);\n+\t}\n \n       /* An ordinary ssa name defined in the loop.  */\n       add_phi_arg (phi_new, new_ssa_name, loop_latch_edge (new_loop));\n@@ -565,7 +568,12 @@ slpeel_update_phi_nodes_for_guard1 (edge guard_edge, struct loop *loop,\n       else\n         {\n           current_new_name = get_current_def (loop_arg);\n-          gcc_assert (current_new_name);\n+\t  /* current_def is not available only if the variable does not\n+\t     change inside the loop, in which case we also don't care\n+\t     about recording a current_def for it because we won't be\n+\t     trying to create loop-exit-phis for it.  */\n+\t  if (!current_new_name)\n+\t    continue;\n         }\n #ifdef ENABLE_CHECKING\n       gcc_assert (get_current_def (current_new_name) == NULL_TREE);"}]}