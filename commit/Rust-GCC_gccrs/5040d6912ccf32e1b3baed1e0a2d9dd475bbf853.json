{"sha": "5040d6912ccf32e1b3baed1e0a2d9dd475bbf853", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA0MGQ2OTEyY2NmMzJlMWIzYmFlZDFlMGEyZDlkZDQ3NWJiZjg1Mw==", "commit": {"author": {"name": "Petur Runolfsson", "email": "peturr02@ru.is", "date": "2003-03-07T17:24:47Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-03-07T17:24:47Z"}, "message": "re PR libstdc++/9817 (collate::compare doesn't handle nul characters.)\n\n\n2003-03-07  Petur Runolfsson  <peturr02@ru.is>\n\n\tPR libstdc++/9817\n\t* include/bits/locale_facets.tcc\n\t(collate::do_compare, collate::do_transform):\n\tHandle nul characters in input.\n\t* testsuite/22_locale/collate/compare/char/3.cc:  New test.\n\t* testsuite/22_locale/collate/compare/wchar_t/3.cc:  New test.\n\t* testsuite/22_locale/collate/transform/char/3.cc:  New test.\n\t* testsuite/22_locale/collate/transform/wchar_t/3.cc:  New test.\n\nFrom-SVN: r63946", "tree": {"sha": "3638203253ada01c3aff257220d05fc1709d6cbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3638203253ada01c3aff257220d05fc1709d6cbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5040d6912ccf32e1b3baed1e0a2d9dd475bbf853", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5040d6912ccf32e1b3baed1e0a2d9dd475bbf853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5040d6912ccf32e1b3baed1e0a2d9dd475bbf853", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5040d6912ccf32e1b3baed1e0a2d9dd475bbf853/comments", "author": null, "committer": null, "parents": [{"sha": "dfa7f440a0707790955bb04b0cb3096d9a647798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa7f440a0707790955bb04b0cb3096d9a647798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfa7f440a0707790955bb04b0cb3096d9a647798"}], "stats": {"total": 451, "additions": 440, "deletions": 11}, "files": [{"sha": "763b5739e51afcd7aa6e7d07465a70ca49972d60", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5040d6912ccf32e1b3baed1e0a2d9dd475bbf853/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5040d6912ccf32e1b3baed1e0a2d9dd475bbf853/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5040d6912ccf32e1b3baed1e0a2d9dd475bbf853", "patch": "@@ -1,3 +1,14 @@\n+2003-03-07  Petur Runolfsson  <peturr02@ru.is>\n+\n+\tPR libstdc++/9817\n+\t* include/bits/locale_facets.tcc\n+\t(collate::do_compare, collate::do_transform):\n+\tHandle nul characters in input.\n+\t* testsuite/22_locale/collate/compare/char/3.cc:  New test.\n+\t* testsuite/22_locale/collate/compare/wchar_t/3.cc:  New test.\n+\t* testsuite/22_locale/collate/transform/char/3.cc:  New test.\n+\t* testsuite/22_locale/collate/transform/wchar_t/3.cc:  New test.\n+\n 2003-03-07  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* include/bits/streambuf_iterator.h (_M_put): Set _M_failed if"}, {"sha": "b5b1f5c2e1e79688920e746e80a01d789dd32346", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 63, "deletions": 11, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5040d6912ccf32e1b3baed1e0a2d9dd475bbf853/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5040d6912ccf32e1b3baed1e0a2d9dd475bbf853/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=5040d6912ccf32e1b3baed1e0a2d9dd475bbf853", "patch": "@@ -2038,29 +2038,81 @@ namespace std\n     do_compare(const _CharT* __lo1, const _CharT* __hi1, \n \t       const _CharT* __lo2, const _CharT* __hi2) const\n     { \n+      // strcoll assumes zero-terminated strings so we make a copy\n+      // and then put a zero at the end.\n       const string_type __one(__lo1, __hi1);\n       const string_type __two(__lo2, __hi2);\n-      return _M_compare(__one.c_str(), __two.c_str());\n+\n+      const _CharT* __p = __one.c_str();\n+      const _CharT* __pend = __one.c_str() + __one.length();\n+      const _CharT* __q = __two.c_str();\n+      const _CharT* __qend = __two.c_str() + __two.length();\n+\n+      // strcoll stops when it sees a nul character so we break\n+      // the strings into zero-terminated substrings and pass those\n+      // to strcoll.\n+      for (;;)\n+\t{\n+\t  int __res = _M_compare(__p, __q);\n+\t  if (__res)\n+\t    return __res;\n+\n+\t  __p += char_traits<_CharT>::length(__p);\n+\t  __q += char_traits<_CharT>::length(__q);\n+\t  if (__p == __pend && __q == __qend)\n+\t    return 0;\n+\t  else if (__p == __pend)\n+\t    return -1;\n+\t  else if (__q == __qend)\n+\t    return 1;\n+\n+\t  __p++;\n+\t  __q++;\n+\t}\n     }\n \n  template<typename _CharT>\n     typename collate<_CharT>::string_type\n     collate<_CharT>::\n     do_transform(const _CharT* __lo, const _CharT* __hi) const\n     {\n+      // strxfrm assumes zero-terminated strings so we make a copy\n+      string_type __str(__lo, __hi);\n+\n+      const _CharT* __p = __str.c_str();\n+      const _CharT* __pend = __str.c_str() + __str.length();\n+\n       size_t __len = (__hi - __lo) * 2;\n-      // First try a buffer perhaps big enough.\n-      _CharT* __c =\n-\tstatic_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __len));\n-      size_t __res = _M_transform(__c, __lo, __len);\n-      // If the buffer was not large enough, try again with the correct size.\n-      if (__res >= __len)\n+\n+      string_type __ret;\n+\n+      // strxfrm stops when it sees a nul character so we break\n+      // the string into zero-terminated substrings and pass those\n+      // to strxfrm.\n+      for (;;)\n \t{\n-\t  __c = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n-\t\t\t\t\t\t      * (__res + 1)));\n-\t  _M_transform(__c, __lo, __res + 1);\n+\t  // First try a buffer perhaps big enough.\n+\t  _CharT* __c =\n+\t    static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __len));\n+\t  size_t __res = _M_transform(__c, __p, __len);\n+\t  // If the buffer was not large enough, try again with the\n+\t  // correct size.\n+\t  if (__res >= __len)\n+\t    {\n+\t      __len = __res + 1;\n+\t      __c = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n+\t\t\t\t\t\t\t  * __len));\n+\t      __res = _M_transform(__c, __p, __res + 1);\n+\t    }\n+\n+\t  __ret.append(__c, __res);\n+\t  __p += char_traits<_CharT>::length(__p);\n+\t  if (__p == __pend)\n+\t    return __ret;\n+\n+\t  __p++;\n+\t  __ret.push_back(_CharT());\n \t}\n-      return string_type(__c);\n     }\n \n  template<typename _CharT>"}, {"sha": "0cce392824a924a1892f3d2a6bad3c6c4555c582", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/char/3.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5040d6912ccf32e1b3baed1e0a2d9dd475bbf853/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5040d6912ccf32e1b3baed1e0a2d9dd475bbf853/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2F3.cc?ref=5040d6912ccf32e1b3baed1e0a2d9dd475bbf853", "patch": "@@ -0,0 +1,90 @@\n+// 2003-02-24 Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Test handling of strings containing nul characters\n+void test03()\n+{\n+  using namespace std;\n+  typedef std::collate<char>::string_type string_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+\n+  // cache the collate facets\n+  const collate<char>& coll_c = use_facet<collate<char> >(loc_c); \n+  const collate<char>& coll_de = use_facet<collate<char> >(loc_de); \n+\n+  // int compare(const charT*, const charT*, const charT*, const charT*) const\n+  const char* strlit1 = \"a\\0a\\0\";\n+  const char* strlit2 = \"a\\0b\\0\";\n+  const char* strlit3 = \"a\\0\\xc4\\0\";\n+  const char* strlit4 = \"a\\0B\\0\";\n+  const char* strlit5 = \"aa\\0\";\n+  const char* strlit6 = \"b\\0a\\0\";\n+\n+  int i;\n+  i = coll_c.compare(strlit1, strlit1 + 3, strlit2, strlit2 + 3);\n+  VERIFY( i == -1 );\n+\n+  i = coll_de.compare(strlit1, strlit1 + 3, strlit2, strlit2 + 3);\n+  VERIFY( i == -1 );\n+\n+  i = coll_c.compare(strlit3, strlit3 + 3, strlit4, strlit4 + 3);\n+  VERIFY( i == 1 );\n+\n+  i = coll_de.compare(strlit3, strlit3 + 3, strlit4, strlit4 + 3);\n+  VERIFY( i == -1 );\n+\n+  i = coll_c.compare(strlit1, strlit1 + 3, strlit1, strlit1 + 4);\n+  VERIFY( i == -1 );\n+\n+  i = coll_de.compare(strlit3, strlit3 + 4, strlit3, strlit3 + 3);\n+  VERIFY( i == 1 );\n+\n+  i = coll_c.compare(strlit1, strlit1 + 4, strlit4, strlit4 + 1);\n+  VERIFY( i == 1 );\n+\n+  i = coll_de.compare(strlit3, strlit3 + 3, strlit3, strlit3 + 3);\n+  VERIFY( i == 0 );\n+\n+  i = coll_c.compare(strlit1, strlit1 + 2, strlit1, strlit1 + 4);\n+  VERIFY( i == -1 );\n+\n+  i = coll_de.compare(strlit1, strlit1 + 3, strlit5, strlit5 + 3);\n+  VERIFY( i == -1 );\n+\n+  i = coll_c.compare(strlit6, strlit6 + 3, strlit1, strlit1 + 3);\n+  VERIFY( i == 1 );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "0f9ee649c323b286c8ccec0db787888ca54b8e10", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/wchar_t/3.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5040d6912ccf32e1b3baed1e0a2d9dd475bbf853/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5040d6912ccf32e1b3baed1e0a2d9dd475bbf853/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F3.cc?ref=5040d6912ccf32e1b3baed1e0a2d9dd475bbf853", "patch": "@@ -0,0 +1,90 @@\n+// 2003-02-24 Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Test handling of strings containing nul characters\n+void test03()\n+{\n+  using namespace std;\n+  typedef std::collate<wchar_t>::string_type string_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+\n+  // cache the collate facets\n+  const collate<wchar_t>& coll_c = use_facet<collate<wchar_t> >(loc_c); \n+  const collate<wchar_t>& coll_de = use_facet<collate<wchar_t> >(loc_de); \n+\n+  // int compare(const charT*, const charT*, const charT*, const charT*) const\n+  const wchar_t* strlit1 = L\"a\\0a\\0\";\n+  const wchar_t* strlit2 = L\"a\\0b\\0\";\n+  const wchar_t* strlit3 = L\"a\\0\\xc4\\0\";\n+  const wchar_t* strlit4 = L\"a\\0B\\0\";\n+  const wchar_t* strlit5 = L\"aa\\0\";\n+  const wchar_t* strlit6 = L\"b\\0a\\0\";\n+\n+  int i;\n+  i = coll_c.compare(strlit1, strlit1 + 3, strlit2, strlit2 + 3);\n+  VERIFY( i == -1 );\n+\n+  i = coll_de.compare(strlit1, strlit1 + 3, strlit2, strlit2 + 3);\n+  VERIFY( i == -1 );\n+\n+  i = coll_c.compare(strlit3, strlit3 + 3, strlit4, strlit4 + 3);\n+  VERIFY( i == 1 );\n+\n+  i = coll_de.compare(strlit3, strlit3 + 3, strlit4, strlit4 + 3);\n+  VERIFY( i == -1 );\n+\n+  i = coll_c.compare(strlit1, strlit1 + 3, strlit1, strlit1 + 4);\n+  VERIFY( i == -1 );\n+\n+  i = coll_de.compare(strlit3, strlit3 + 4, strlit3, strlit3 + 3);\n+  VERIFY( i == 1 );\n+\n+  i = coll_c.compare(strlit1, strlit1 + 4, strlit4, strlit4 + 1);\n+  VERIFY( i == 1 );\n+\n+  i = coll_de.compare(strlit3, strlit3 + 3, strlit3, strlit3 + 3);\n+  VERIFY( i == 0 );\n+\n+  i = coll_c.compare(strlit1, strlit1 + 2, strlit1, strlit1 + 4);\n+  VERIFY( i == -1 );\n+\n+  i = coll_de.compare(strlit1, strlit1 + 3, strlit5, strlit5 + 3);\n+  VERIFY( i == -1 );\n+\n+  i = coll_c.compare(strlit6, strlit6 + 3, strlit1, strlit1 + 3);\n+  VERIFY( i == 1 );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "a6255afb6c36725500a502ad441f12d66005b0f9", "filename": "libstdc++-v3/testsuite/22_locale/collate/transform/char/3.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5040d6912ccf32e1b3baed1e0a2d9dd475bbf853/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5040d6912ccf32e1b3baed1e0a2d9dd475bbf853/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2F3.cc?ref=5040d6912ccf32e1b3baed1e0a2d9dd475bbf853", "patch": "@@ -0,0 +1,93 @@\n+// 2003-02-24 Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test03()\n+{\n+  using namespace std;\n+  typedef std::collate<char>::string_type string_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+\n+  // cache the collate facets\n+  const collate<char>& coll_c = use_facet<collate<char> >(loc_c); \n+  const collate<char>& coll_de = use_facet<collate<char> >(loc_de); \n+\n+  const char* strlit1 = \"a\\0a\\0\";\n+  const char* strlit2 = \"a\\0b\\0\";\n+  const char* strlit3 = \"a\\0\\xc4\\0\";\n+  const char* strlit4 = \"a\\0B\\0\";\n+  const char* strlit5 = \"aa\\0\";\n+  const char* strlit6 = \"b\\0a\\0\";\n+\n+  int i;\n+  string_type str1;\n+  string_type str2;\n+\n+  str1 = coll_c.transform(strlit1, strlit1 + 3);\n+  str2 = coll_c.transform(strlit2, strlit2 + 3);\n+  i = str1.compare(str2);\n+  VERIFY( i < 0 );\n+\n+  str1 = coll_de.transform(strlit1, strlit1 + 3);\n+  str2 = coll_de.transform(strlit2, strlit2 + 3);\n+  i = str1.compare(str2);\n+  VERIFY( i < 0 );\n+\n+  str1 = coll_c.transform(strlit3, strlit3 + 3);\n+  str2 = coll_c.transform(strlit4, strlit4 + 3);\n+  i = str1.compare(str2);\n+  VERIFY( i > 0 );\n+\n+  str1 = coll_de.transform(strlit3, strlit3 + 3);\n+  str2 = coll_de.transform(strlit4, strlit4 + 3);\n+  i = str1.compare(str2);\n+  VERIFY( i < 0 );\n+\n+  str1 = coll_c.transform(strlit1, strlit1 + 1);\n+  str2 = coll_c.transform(strlit5, strlit5 + 1);\n+  i = str1.compare(str2);\n+  VERIFY( i == 0 );\n+\n+  str1 = coll_de.transform(strlit6, strlit6 + 3);\n+  str2 = coll_de.transform(strlit1, strlit1 + 3);\n+  i = str1.compare(str2);\n+  VERIFY( i > 0 );\n+\n+  str1 = coll_c.transform(strlit1, strlit1 + 3);\n+  str2 = coll_c.transform(strlit5, strlit5 + 3);\n+  i = str1.compare(str2);\n+  VERIFY( i < 0 );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "108c0a4be30c6dde87e81cef2fe91be8c0395407", "filename": "libstdc++-v3/testsuite/22_locale/collate/transform/wchar_t/3.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5040d6912ccf32e1b3baed1e0a2d9dd475bbf853/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5040d6912ccf32e1b3baed1e0a2d9dd475bbf853/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2F3.cc?ref=5040d6912ccf32e1b3baed1e0a2d9dd475bbf853", "patch": "@@ -0,0 +1,93 @@\n+// 2003-02-24 Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test03()\n+{\n+  using namespace std;\n+  typedef std::collate<wchar_t>::string_type string_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+\n+  // cache the collate facets\n+  const collate<wchar_t>& coll_c = use_facet<collate<wchar_t> >(loc_c); \n+  const collate<wchar_t>& coll_de = use_facet<collate<wchar_t> >(loc_de); \n+\n+  const wchar_t* strlit1 = L\"a\\0a\\0\";\n+  const wchar_t* strlit2 = L\"a\\0b\\0\";\n+  const wchar_t* strlit3 = L\"a\\0\\xc4\\0\";\n+  const wchar_t* strlit4 = L\"a\\0B\\0\";\n+  const wchar_t* strlit5 = L\"aa\\0\";\n+  const wchar_t* strlit6 = L\"b\\0a\\0\";\n+\n+  int i;\n+  string_type str1;\n+  string_type str2;\n+\n+  str1 = coll_c.transform(strlit1, strlit1 + 3);\n+  str2 = coll_c.transform(strlit2, strlit2 + 3);\n+  i = str1.compare(str2);\n+  VERIFY( i < 0 );\n+\n+  str1 = coll_de.transform(strlit1, strlit1 + 3);\n+  str2 = coll_de.transform(strlit2, strlit2 + 3);\n+  i = str1.compare(str2);\n+  VERIFY( i < 0 );\n+\n+  str1 = coll_c.transform(strlit3, strlit3 + 3);\n+  str2 = coll_c.transform(strlit4, strlit4 + 3);\n+  i = str1.compare(str2);\n+  VERIFY( i > 0 );\n+\n+  str1 = coll_de.transform(strlit3, strlit3 + 3);\n+  str2 = coll_de.transform(strlit4, strlit4 + 3);\n+  i = str1.compare(str2);\n+  VERIFY( i < 0 );\n+\n+  str1 = coll_c.transform(strlit1, strlit1 + 1);\n+  str2 = coll_c.transform(strlit5, strlit5 + 1);\n+  i = str1.compare(str2);\n+  VERIFY( i == 0 );\n+\n+  str1 = coll_de.transform(strlit6, strlit6 + 3);\n+  str2 = coll_de.transform(strlit1, strlit1 + 3);\n+  i = str1.compare(str2);\n+  VERIFY( i > 0 );\n+\n+  str1 = coll_c.transform(strlit1, strlit1 + 3);\n+  str2 = coll_c.transform(strlit5, strlit5 + 3);\n+  i = str1.compare(str2);\n+  VERIFY( i < 0 );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}]}