{"sha": "3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U0YTZmOWQ2YzlkN2E4NGQxNWMwZDA1MDRkMmJlNzU5MWM3ZDZjOQ==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-12-08T08:12:49Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-12-08T08:12:49Z"}, "message": "Enable VNNI support [5/5]\n\ngcc/\n\t* config/i386/avx512vnniintrin.h (_mm512_dpwssds_epi32,\n\t_mm512_mask_dpwssds_epi32, _mm512_maskz_dpwssds_epi32): New intrinsics.\n\t* config/i386/avx512vnnivlintrin.h (_mm256_dpwssds_epi32,\n\t_mm256_mask_dpwssds_epi32, _mm256_maskz_dpwssds_epi32,\n\t_mm_dpwssds_epi32, _mm_mask_dpwssds_epi32,\n\t_mm_maskz_dpwssds_epi32): Ditto.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx512f-vnni-1.c: Add checks for vdpdwssds.\n\t* gcc.target/i386/avx512vl-vnni-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpdpwssds-2.c: New test.\n\t* gcc.target/i386/avx512vl-vpdpwssds-2.c: Ditto.\n\nFrom-SVN: r255498", "tree": {"sha": "321b8a9881eb734e636bdcb530ee3107eb1326a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/321b8a9881eb734e636bdcb530ee3107eb1326a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8da4c8d83b7a21127cbe464aa54c5f3e7c034feb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da4c8d83b7a21127cbe464aa54c5f3e7c034feb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8da4c8d83b7a21127cbe464aa54c5f3e7c034feb"}], "stats": {"total": 197, "additions": 197, "deletions": 0}, "files": [{"sha": "95aea7ac6c43b6b76d68f12149420a3b5bb44ccb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9", "patch": "@@ -1,3 +1,12 @@\n+2017-12-08  Julia Koval  <julia.koval@intel.com>\n+\n+\t* config/i386/avx512vnniintrin.h (_mm512_dpwssds_epi32,\n+\t_mm512_mask_dpwssds_epi32, _mm512_maskz_dpwssds_epi32): New intrinsics.\n+\t* config/i386/avx512vnnivlintrin.h (_mm256_dpwssds_epi32,\n+\t_mm256_mask_dpwssds_epi32, _mm256_maskz_dpwssds_epi32,\n+\t_mm_dpwssds_epi32, _mm_mask_dpwssds_epi32,\n+\t_mm_maskz_dpwssds_epi32): Ditto.\n+\n 2017-12-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/81303"}, {"sha": "15ed76aa02b8ae6781da748c400ff3cd6cdf408f", "filename": "gcc/config/i386/avx512vnniintrin.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9/gcc%2Fconfig%2Fi386%2Favx512vnniintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9/gcc%2Fconfig%2Fi386%2Favx512vnniintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vnniintrin.h?ref=3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9", "patch": "@@ -110,6 +110,32 @@ _mm512_maskz_dpwssd_epi32 (__mmask16 __A, __m512i __B, __m512i __C,\n \t\t\t\t(__v16si) __C, (__v16si) __D, (__mmask16)__A);\n }\n \n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_dpwssds_epi32 (__m512i __A, __m512i __B, __m512i __C)\n+{\n+  return (__m512i) __builtin_ia32_vpdpwssds_v16si ((__v16si)__A, (__v16si) __B,\n+\t\t\t\t\t\t\t\t(__v16si) __C);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_dpwssds_epi32 (__m512i __A, __mmask16 __B, __m512i __C,\n+\t\t\t\t\t\t\t__m512i __D)\n+{\n+  return (__m512i)__builtin_ia32_vpdpwssds_v16si_mask ((__v16si)__A,\n+\t\t\t\t(__v16si) __C, (__v16si) __D, (__mmask16)__B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_dpwssds_epi32 (__mmask16 __A, __m512i __B, __m512i __C,\n+\t\t\t\t\t\t\t__m512i __D)\n+{\n+  return (__m512i)__builtin_ia32_vpdpwssds_v16si_maskz ((__v16si)__B,\n+\t\t\t\t(__v16si) __C, (__v16si) __D, (__mmask16)__A);\n+}\n+\n #ifdef __DISABLE_AVX512VNNI__\n #undef __DISABLE_AVX512VNNI__\n #pragma GCC pop_options"}, {"sha": "3e1f8a2c96c93d1d988bc8453de420ce421fbb8e", "filename": "gcc/config/i386/avx512vnnivlintrin.h", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9/gcc%2Fconfig%2Fi386%2Favx512vnnivlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9/gcc%2Fconfig%2Fi386%2Favx512vnnivlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vnnivlintrin.h?ref=3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9", "patch": "@@ -179,6 +179,54 @@ _mm_maskz_dpwssd_epi32 (__mmask8 __A, __m128i __B, __m128i __C, __m128i __D)\n \t\t\t\t(__v4si) __C, (__v4si) __D, (__mmask8)__A);\n }\n \n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_dpwssds_epi32 (__m256i __A, __m256i __B, __m256i __C)\n+{\n+  return (__m256i) __builtin_ia32_vpdpwssds_v8si ((__v8si)__A, (__v8si) __B,\n+\t\t\t\t\t\t\t\t(__v8si) __C);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_dpwssds_epi32 (__m256i __A, __mmask8 __B, __m256i __C, __m256i __D)\n+{\n+  return (__m256i)__builtin_ia32_vpdpwssds_v8si_mask ((__v8si)__A,\n+\t\t\t\t(__v8si) __C, (__v8si) __D, (__mmask8)__B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_dpwssds_epi32 (__mmask8 __A, __m256i __B, __m256i __C,\n+\t\t\t\t\t\t\t__m256i __D)\n+{\n+  return (__m256i)__builtin_ia32_vpdpwssds_v8si_maskz ((__v8si)__B,\n+\t\t\t\t(__v8si) __C, (__v8si) __D, (__mmask8)__A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_dpwssds_epi32 (__m128i __A, __m128i __B, __m128i __C)\n+{\n+  return (__m128i) __builtin_ia32_vpdpwssds_v4si ((__v4si)__A, (__v4si) __B,\n+\t\t\t\t\t\t\t\t(__v4si) __C);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_dpwssds_epi32 (__m128i __A, __mmask8 __B, __m128i __C, __m128i __D)\n+{\n+  return (__m128i)__builtin_ia32_vpdpwssds_v4si_mask ((__v4si)__A,\n+\t\t\t\t(__v4si) __C, (__v4si) __D, (__mmask8)__B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_dpwssds_epi32 (__mmask8 __A, __m128i __B, __m128i __C, __m128i __D)\n+{\n+  return (__m128i)__builtin_ia32_vpdpwssds_v4si_maskz ((__v4si)__B,\n+\t\t\t\t(__v4si) __C, (__v4si) __D, (__mmask8)__A);\n+}\n #ifdef __DISABLE_AVX512VNNIVL__\n #undef __DISABLE_AVX512VNNIVL__\n #pragma GCC pop_options"}, {"sha": "258c6d03fe469560f59fa866f2be51401c6a3b71", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9", "patch": "@@ -1,3 +1,10 @@\n+2017-12-08  Julia Koval  <julia.koval@intel.com>\n+\n+\t* gcc.target/i386/avx512f-vnni-1.c: Add checks for vdpdwssds.\n+\t* gcc.target/i386/avx512vl-vnni-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpdpwssds-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vpdpwssds-2.c: Ditto.\n+\n 2017-12-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/81303"}, {"sha": "9d34dc0e83110e05324bcb69ceb1a82eca94eba9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vnni-1.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vnni-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vnni-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vnni-1.c?ref=3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9", "patch": "@@ -9,6 +9,9 @@\n /* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -32,4 +35,7 @@ avx512f_test (void)\n   x = _mm512_mask_dpwssd_epi32 (x, m16, y, z);\n   x = _mm512_maskz_dpwssd_epi32 (m16, x, y, z);\n \n+  x = _mm512_dpwssds_epi32 (x, y, z);\n+  x = _mm512_mask_dpwssds_epi32 (x, m16, y, z);\n+  x = _mm512_maskz_dpwssds_epi32 (m16, x, y, z);\n }"}, {"sha": "41933f3c1374e75b39677f8a5b3806658608b50d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpdpwssds-2.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpdpwssds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpdpwssds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpdpwssds-2.c?ref=3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vnni\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vnni } */\n+\n+#define AVX512F\n+\n+#define AVX512VNNI\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#define SIZE_RES (AVX512F_LEN / 32)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (int *r, int *dst, short *s1, short *s2)\n+{\n+  short tempres[SIZE];\n+  for (int i = 0; i < SIZE; i++) {\n+    tempres[i] = ((int)(s1[i]) * (int)(s2[i]));\n+  }\n+  for (int i = 0; i < SIZE_RES; i++) {\n+    long long test = (long long)dst[i] + tempres[i*2] + tempres[i*2 + 1];\n+    long long max_int = 0x7FFFFFFF;\n+    if (test > max_int)\n+      test = 0x7FFFFFFF;\n+    r[i] = test;\n+  }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  int res_ref[SIZE_RES];\n+  int res_ref2[SIZE_RES];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1 + i;\n+      src2.a[i] = 2 + 2*i;\n+    }\n+\n+  for (i = 0; i < SIZE_RES; i++)\n+    {\n+      res1.a[i] = 0x7fffffff;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (res_ref, res1.a, src1.a, src2.a);\n+  CALC (res_ref2, res2.a, src1.a, src2.a);\n+\n+  res1.x = INTRINSIC (_dpwssds_epi32) (res1.x, src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_dpwssds_epi32) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_dpwssds_epi32) (mask, res3.x, src1.x, src2.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref2, mask, SIZE_RES);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref2))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref2, mask, SIZE_RES);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref2))\n+    abort ();\n+}"}, {"sha": "e63bc196b0e673ee35be70ec0d7ad98ad4c6041f", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vnni-1.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-1.c?ref=3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9", "patch": "@@ -18,6 +18,12 @@\n /* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n \n #include <immintrin.h>\n@@ -53,4 +59,11 @@ avx512f_test (void)\n   x_ = _mm_mask_dpwssd_epi32 (x_, m, y_, z_);\n   x_ = _mm_maskz_dpwssd_epi32 (m, x_, y_, z_);\n \n+  x = _mm256_dpwssds_epi32 (x, y, z);\n+  x = _mm256_mask_dpwssds_epi32 (x, m, y, z);\n+  x = _mm256_maskz_dpwssds_epi32 (m, x, y, z);\n+\n+  x_ = _mm_dpwssds_epi32 (x_, y_, z_);\n+  x_ = _mm_mask_dpwssds_epi32 (x_, m, y_, z_);\n+  x_ = _mm_maskz_dpwssds_epi32 (m, x_, y_, z_);\n }"}, {"sha": "9fd3d4936089a24aef97872910b7ace552c2a6d5", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpdpwssds-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpdpwssds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpdpwssds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpdpwssds-2.c?ref=3e4a6f9d6c9d7a84d15c0d0504d2be7591c7d6c9", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vnni -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vnni } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpdpwssds-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpdpwssds-2.c\""}]}