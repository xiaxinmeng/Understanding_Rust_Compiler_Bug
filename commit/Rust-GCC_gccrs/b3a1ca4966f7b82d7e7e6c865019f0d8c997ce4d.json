{"sha": "b3a1ca4966f7b82d7e7e6c865019f0d8c997ce4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNhMWNhNDk2NmY3YjgyZDdlN2U2Yzg2NTAxOWYwZDhjOTk3Y2U0ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-01-10T21:13:46Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-01-10T21:13:46Z"}, "message": "i386.c (ix86_function_value): Use type_natural_mode.\n\n        * config/i386/i386.c (ix86_function_value): Use type_natural_mode.\n        (ix86_return_in_memory): Likewise.\n        (function_arg_advance):  Likewise.  Mirror structure in function_arg\n        for choosing register to advance.\n\nFrom-SVN: r93156", "tree": {"sha": "ac5684b70342b8a59a3afedd072cca0f76720d7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac5684b70342b8a59a3afedd072cca0f76720d7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3a1ca4966f7b82d7e7e6c865019f0d8c997ce4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3a1ca4966f7b82d7e7e6c865019f0d8c997ce4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3a1ca4966f7b82d7e7e6c865019f0d8c997ce4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3a1ca4966f7b82d7e7e6c865019f0d8c997ce4d/comments", "author": null, "committer": null, "parents": [{"sha": "3fd8010046b910ac2477b0feb22f187b653655d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd8010046b910ac2477b0feb22f187b653655d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd8010046b910ac2477b0feb22f187b653655d1"}], "stats": {"total": 106, "additions": 75, "deletions": 31}, "files": [{"sha": "3aac2730ba470a4ceda8809d2f013a410a89bf08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3a1ca4966f7b82d7e7e6c865019f0d8c997ce4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3a1ca4966f7b82d7e7e6c865019f0d8c997ce4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3a1ca4966f7b82d7e7e6c865019f0d8c997ce4d", "patch": "@@ -1,3 +1,10 @@\n+2005-01-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_function_value): Use type_natural_mode.\n+\t(ix86_return_in_memory): Likewise.\n+\t(function_arg_advance):  Likewise.  Mirror structure in function_arg\n+\tfor choosing register to advance.\n+\n 2005-01-10  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-vectorizer.c, tree.def: Fix comment typos."}, {"sha": "27b23397ec4abc1377c2fbd38511c0aa63555b42", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 60, "deletions": 31, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3a1ca4966f7b82d7e7e6c865019f0d8c997ce4d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3a1ca4966f7b82d7e7e6c865019f0d8c997ce4d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b3a1ca4966f7b82d7e7e6c865019f0d8c997ce4d", "patch": "@@ -2663,11 +2663,15 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     (mode == BLKmode) ? int_size_in_bytes (type) : (int) GET_MODE_SIZE (mode);\n   int words = (bytes + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n \n+  if (type)\n+    mode = type_natural_mode (type);\n+\n   if (TARGET_DEBUG_ARG)\n     fprintf (stderr, \"function_adv (sz=%d, wds=%2d, nregs=%d, ssenregs=%d, \"\n \t     \"mode=%s, named=%d)\\n\\n\",\n \t     words, cum->words, cum->nregs, cum->sse_nregs,\n \t     GET_MODE_NAME (mode), named);\n+\n   if (TARGET_64BIT)\n     {\n       int int_nregs, sse_nregs;\n@@ -2685,32 +2689,20 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     }\n   else\n     {\n-      if (TARGET_SSE && SSE_REG_MODE_P (mode)\n-\t  && (!type || !AGGREGATE_TYPE_P (type)))\n-\t{\n-\t  cum->sse_words += words;\n-\t  cum->sse_nregs -= 1;\n-\t  cum->sse_regno += 1;\n-\t  if (cum->sse_nregs <= 0)\n-\t    {\n-\t      cum->sse_nregs = 0;\n-\t      cum->sse_regno = 0;\n-\t    }\n-\t}\n-      else if (TARGET_MMX && MMX_REG_MODE_P (mode)\n-\t       && (!type || !AGGREGATE_TYPE_P (type)))\n-\t{\n-\t  cum->mmx_words += words;\n-\t  cum->mmx_nregs -= 1;\n-\t  cum->mmx_regno += 1;\n-\t  if (cum->mmx_nregs <= 0)\n-\t    {\n-\t      cum->mmx_nregs = 0;\n-\t      cum->mmx_regno = 0;\n-\t    }\n-\t}\n-      else\n+      switch (mode)\n \t{\n+\tdefault:\n+\t  break;\n+\n+\tcase BLKmode:\n+\t  if (bytes < 0)\n+\t    break;\n+\t  /* FALLTHRU */\n+\n+\tcase DImode:\n+\tcase SImode:\n+\tcase HImode:\n+\tcase QImode:\n \t  cum->words += words;\n \t  cum->nregs -= words;\n \t  cum->regno += words;\n@@ -2720,9 +2712,46 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t      cum->nregs = 0;\n \t      cum->regno = 0;\n \t    }\n+\t  break;\n+\n+\tcase TImode:\n+\tcase V16QImode:\n+\tcase V8HImode:\n+\tcase V4SImode:\n+\tcase V2DImode:\n+\tcase V4SFmode:\n+\tcase V2DFmode:\n+\t  if (!type || !AGGREGATE_TYPE_P (type))\n+\t    {\n+\t      cum->sse_words += words;\n+\t      cum->sse_nregs -= 1;\n+\t      cum->sse_regno += 1;\n+\t      if (cum->sse_nregs <= 0)\n+\t\t{\n+\t\t  cum->sse_nregs = 0;\n+\t\t  cum->sse_regno = 0;\n+\t\t}\n+\t    }\n+\t  break;\n+\n+\tcase V8QImode:\n+\tcase V4HImode:\n+\tcase V2SImode:\n+\tcase V2SFmode:\n+\t  if (!type || !AGGREGATE_TYPE_P (type))\n+\t    {\n+\t      cum->mmx_words += words;\n+\t      cum->mmx_nregs -= 1;\n+\t      cum->mmx_regno += 1;\n+\t      if (cum->mmx_nregs <= 0)\n+\t\t{\n+\t\t  cum->mmx_nregs = 0;\n+\t\t  cum->mmx_regno = 0;\n+\t\t}\n+\t    }\n+\t  break;\n \t}\n     }\n-  return;\n }\n \n /* Define where to put the arguments to a function.\n@@ -2999,10 +3028,11 @@ ix86_function_value_regno_p (int regno)\n rtx\n ix86_function_value (tree valtype)\n {\n+  enum machine_mode natmode = type_natural_mode (valtype);\n+\n   if (TARGET_64BIT)\n     {\n-      rtx ret = construct_container (type_natural_mode (valtype),\n-\t\t\t\t     TYPE_MODE (valtype), valtype,\n+      rtx ret = construct_container (natmode, TYPE_MODE (valtype), valtype,\n \t\t\t\t     1, REGPARM_MAX, SSE_REGPARM_MAX,\n \t\t\t\t     x86_64_int_return_registers, 0);\n       /* For zero sized structures, construct_container return NULL, but we\n@@ -3012,16 +3042,15 @@ ix86_function_value (tree valtype)\n       return ret;\n     }\n   else\n-    return gen_rtx_REG (TYPE_MODE (valtype),\n-\t\t\tix86_value_regno (TYPE_MODE (valtype)));\n+    return gen_rtx_REG (TYPE_MODE (valtype), ix86_value_regno (natmode));\n }\n \n /* Return false iff type is returned in memory.  */\n int\n ix86_return_in_memory (tree type)\n {\n   int needed_intregs, needed_sseregs, size;\n-  enum machine_mode mode = TYPE_MODE (type);\n+  enum machine_mode mode = type_natural_mode (type);\n \n   if (TARGET_64BIT)\n     return !examine_argument (mode, type, 1, &needed_intregs, &needed_sseregs);"}, {"sha": "032274c46fd26a3b63a83635cae70f952867bb2a", "filename": "gcc/testsuite/gcc.target/i386/abi-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3a1ca4966f7b82d7e7e6c865019f0d8c997ce4d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fabi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3a1ca4966f7b82d7e7e6c865019f0d8c997ce4d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fabi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fabi-1.c?ref=b3a1ca4966f7b82d7e7e6c865019f0d8c997ce4d", "patch": "@@ -0,0 +1,8 @@\n+/* Make certain that we pass V2DF in the correct register for SSE1.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -msse -mno-sse2\" } */\n+\n+typedef double v2df __attribute__((vector_size (16)));\n+v2df foo (void) { return (v2df){ 1.0, 2.0 }; }\n+\n+/* { dg-final { scan-assembler \"xmm0\" } } */"}]}