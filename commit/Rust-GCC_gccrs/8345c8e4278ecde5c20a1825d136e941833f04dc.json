{"sha": "8345c8e4278ecde5c20a1825d136e941833f04dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM0NWM4ZTQyNzhlY2RlNWMyMGExODI1ZDEzNmU5NDE4MzNmMDRkYw==", "commit": {"author": {"name": "Phil Muldoon", "email": "pmuldoon@redhat.com", "date": "2009-10-20T13:52:34Z"}, "committer": {"name": "Phil Muldoon", "email": "pmuldoon@gcc.gnu.org", "date": "2009-10-20T13:52:34Z"}, "message": "printers.py (StdTuplePrinter): New printer.\n\n2009-10-20  Phil Muldoon <pmuldoon@redhat.com>\n\n\t* python/libstdcxx/v6/printers.py (StdTuplePrinter): New printer.\n\t(build_libstdcxx_dictionary): Add StdTuplePrinter registration.\n\nFrom-SVN: r153013", "tree": {"sha": "41fc63b102301105d6f485c42419356455cf354c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41fc63b102301105d6f485c42419356455cf354c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8345c8e4278ecde5c20a1825d136e941833f04dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8345c8e4278ecde5c20a1825d136e941833f04dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8345c8e4278ecde5c20a1825d136e941833f04dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8345c8e4278ecde5c20a1825d136e941833f04dc/comments", "author": null, "committer": null, "parents": [{"sha": "20d36f0ea670b235b672d1205eb437030dee7e7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20d36f0ea670b235b672d1205eb437030dee7e7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20d36f0ea670b235b672d1205eb437030dee7e7e"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "3f1ea9812512308f04355915ce7460b2efd26d81", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8345c8e4278ecde5c20a1825d136e941833f04dc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8345c8e4278ecde5c20a1825d136e941833f04dc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8345c8e4278ecde5c20a1825d136e941833f04dc", "patch": "@@ -1,3 +1,8 @@\n+2009-10-15  Phil Muldoon <pmuldoon@redhat.com>\n+\n+\t* python/libstdcxx/v6/printers.py (StdTuplePrinter): New printer.\n+\t(build_libstdcxx_dictionary): Add StdTuplePrinter registration.\n+\n 2009-10-16  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/c_compatibility/stdatomic.h: Include cstdatomic if"}, {"sha": "872e2d30a976e9ec3a2b4c56497f3a0e01458c1f", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8345c8e4278ecde5c20a1825d136e941833f04dc/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8345c8e4278ecde5c20a1825d136e941833f04dc/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=8345c8e4278ecde5c20a1825d136e941833f04dc", "patch": "@@ -197,6 +197,64 @@ def __init__(self, val):\n     def to_string(self):\n         return self.val['_M_current'].dereference()\n \n+class StdTuplePrinter:\n+    \"Print a std::tuple\"\n+\n+    class _iterator:\n+        def __init__ (self, head):\n+            self.head = head\n+\n+            # Set the base class as the initial head of the\n+            # tuple.\n+            nodes = self.head.type.fields ()\n+            if len (nodes) != 1:\n+                raise \"Top of tuple tree does not consist of a single node.\"\n+\n+            # Set the actual head to the first pair.\n+            self.head  = self.head.cast (nodes[0].type)\n+            self.count = 0\n+\n+        def __iter__ (self):\n+            return self\n+\n+        def next (self):\n+            nodes = self.head.type.fields ()\n+            # Check for further recursions in the inheritance tree.\n+            if len (nodes) == 0:\n+                raise StopIteration\n+            # Check that this iteration has an expected structure.\n+            if len (nodes) != 2:\n+                raise \"Cannot parse more than 2 nodes in a tuple tree.\"\n+\n+            # - Left node is the next recursion parent.\n+            # - Right node is the actual class contained in the tuple.\n+\n+            # Process right node.\n+            impl = self.head.cast (nodes[1].type)\n+\n+            # Process left node and set it as head.\n+            self.head  = self.head.cast (nodes[0].type)\n+            self.count = self.count + 1\n+\n+            # Finally, check the implementation.  If it is\n+            # wrapped in _M_head_impl return that, otherwise return\n+            # the value \"as is\".\n+            fields = impl.type.fields ()\n+            if len (fields) < 1 or fields[0].name != \"_M_head_impl\":\n+                return ('[%d]' % self.count, impl)\n+            else:\n+                return ('[%d]' % self.count, impl['_M_head_impl'])\n+\n+    def __init__ (self, typename, val):\n+        self.typename = typename\n+        self.val = val;\n+\n+    def children (self):\n+        return self._iterator (self.val)\n+\n+    def to_string (self):\n+        return '%s containing' % (self.typename)\n+\n class StdStackOrQueuePrinter:\n     \"Print a std::stack or std::queue\"\n \n@@ -641,6 +699,7 @@ def build_libstdcxx_dictionary ():\n     pretty_printers_dict[re.compile('^std::multiset<.*>$')] = lambda val: StdSetPrinter(\"std::multiset\", val)\n     pretty_printers_dict[re.compile('^std::priority_queue<.*>$')] = lambda val: StdStackOrQueuePrinter(\"std::priority_queue\", val)\n     pretty_printers_dict[re.compile('^std::queue<.*>$')] = lambda val: StdStackOrQueuePrinter(\"std::queue\", val)\n+    pretty_printers_dict[re.compile('^std::tuple<.*>$')] = lambda val: StdTuplePrinter(\"std::tuple\", val)\n     pretty_printers_dict[re.compile('^std::set<.*>$')] = lambda val: StdSetPrinter(\"std::set\", val)\n     pretty_printers_dict[re.compile('^std::stack<.*>$')] = lambda val: StdStackOrQueuePrinter(\"std::stack\", val)\n     pretty_printers_dict[re.compile('^std::unique_ptr<.*>$')] = UniquePointerPrinter"}]}