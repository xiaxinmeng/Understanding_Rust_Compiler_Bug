{"sha": "1619fcfc0624216f30ee0b0227dbca03e5c93896", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYxOWZjZmMwNjI0MjE2ZjMwZWUwYjAyMjdkYmNhMDNlNWM5Mzg5Ng==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-03-01T15:28:44Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-03-01T15:28:44Z"}, "message": "extend.texi (AVR Built-in Functions): Document __builtin_avr_flash_segment.\n\n\t* doc/extend.texi (AVR Built-in Functions): Document\n\t__builtin_avr_flash_segment.\n\t* config/avr/builtins.def (__builtin_avr_flash_segment): New entry.\n\t* config/avr/avr.md (flash_segment, flash_segment1): New expanders.\n\t(*split.flash_segment): New insn-and-split.\n\t* config/avr/avr.c (avr_init_builtins): Add local variables:\n\tconst_memx_void_node, const_memx_ptr_type_node,\n\tchar_ftype_const_memx_ptr.\n\nFrom-SVN: r184746", "tree": {"sha": "7cc69017798e43be50c265f90693c5cb0fd4ffb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cc69017798e43be50c265f90693c5cb0fd4ffb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1619fcfc0624216f30ee0b0227dbca03e5c93896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1619fcfc0624216f30ee0b0227dbca03e5c93896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1619fcfc0624216f30ee0b0227dbca03e5c93896", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1619fcfc0624216f30ee0b0227dbca03e5c93896/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69ef9a7916e17a1e660fdba561938c3a39478e34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ef9a7916e17a1e660fdba561938c3a39478e34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69ef9a7916e17a1e660fdba561938c3a39478e34"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "0ffa80207b7d739feebacc0c43d89674bfd8d452", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1619fcfc0624216f30ee0b0227dbca03e5c93896/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1619fcfc0624216f30ee0b0227dbca03e5c93896/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1619fcfc0624216f30ee0b0227dbca03e5c93896", "patch": "@@ -1,3 +1,15 @@\n+2012-03-01  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* doc/extend.texi (AVR Built-in Functions): Document\n+\t__builtin_avr_flash_segment.\n+\n+\t* config/avr/builtins.def (__builtin_avr_flash_segment): New entry.\n+\t* config/avr/avr.md (flash_segment, flash_segment1): New expanders.\n+\t(*split.flash_segment): New insn-and-split.\n+\t* config/avr/avr.c (avr_init_builtins): Add local variables:\n+\tconst_memx_void_node, const_memx_ptr_type_node,\n+\tchar_ftype_const_memx_ptr.\n+\n 2012-03-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/52445"}, {"sha": "7ead6f47d13b19d6185a230e87528a2dbb74694f", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1619fcfc0624216f30ee0b0227dbca03e5c93896/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1619fcfc0624216f30ee0b0227dbca03e5c93896/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=1619fcfc0624216f30ee0b0227dbca03e5c93896", "patch": "@@ -10432,6 +10432,19 @@ avr_init_builtins (void)\n                                 unsigned_char_type_node,\n                                 NULL_TREE);\n \n+  tree const_memx_void_node\n+      = build_qualified_type (void_type_node,\n+                              TYPE_QUAL_CONST\n+                              | ENCODE_QUAL_ADDR_SPACE (ADDR_SPACE_MEMX));\n+\n+  tree const_memx_ptr_type_node\n+      = build_pointer_type_for_mode (const_memx_void_node, PSImode, false);\n+  \n+  tree char_ftype_const_memx_ptr\n+      = build_function_type_list (char_type_node,\n+                                  const_memx_ptr_type_node,\n+                                  NULL);\n+\n #define DEF_BUILTIN(NAME, N_ARGS, ID, TYPE, CODE)                       \\\n   add_builtin_function (NAME, TYPE, ID, BUILT_IN_MD, NULL, NULL_TREE);\n #include \"builtins.def\"  "}, {"sha": "5cc3e3e4f249d89e5f1df8b4546a0ecca54919cb", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1619fcfc0624216f30ee0b0227dbca03e5c93896/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1619fcfc0624216f30ee0b0227dbca03e5c93896/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=1619fcfc0624216f30ee0b0227dbca03e5c93896", "patch": "@@ -5393,6 +5393,53 @@\n    (set_attr \"cc\" \"clobber\")])\n \n \n+;; __builtin_avr_flash_segment\n+\n+;; Just a helper for the next \"official\" expander.\n+\n+(define_expand \"flash_segment1\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"\")\n+        (subreg:QI (match_operand:PSI 1 \"register_operand\" \"\")\n+                   2))\n+   (set (cc0)\n+        (compare (match_dup 0)\n+                 (const_int 0)))\n+   (set (pc)\n+        (if_then_else (ge (cc0)\n+                          (const_int 0))\n+                      (label_ref (match_operand 2 \"\" \"\"))\n+                      (pc)))\n+   (set (match_dup 0)\n+        (const_int -1))])\n+\n+(define_expand \"flash_segment\"\n+  [(parallel [(match_operand:QI 0 \"register_operand\" \"\")\n+              (match_operand:PSI 1 \"register_operand\" \"\")])]\n+  \"\"\n+  {\n+    rtx label = gen_label_rtx ();\n+    emit (gen_flash_segment1 (operands[0], operands[1], label));\n+    emit_label (label);\n+    DONE;\n+  })\n+\n+;; Actually, it's too late now to work out address spaces known at compiletime.\n+;; Best place would be to fold ADDR_SPACE_CONVERT_EXPR in avr_fold_builtin.\n+;; However, avr_addr_space_convert can add some built-in knowledge for PSTR\n+;; so that ADDR_SPACE_CONVERT_EXPR in the built-in must not be resolved.\n+\n+(define_insn_and_split \"*split.flash_segment\"\n+  [(set (match_operand:QI 0 \"register_operand\"                        \"=d\")\n+        (subreg:QI (lo_sum:PSI (match_operand:QI 1 \"nonmemory_operand\" \"ri\")\n+                               (match_operand:HI 2 \"register_operand\"  \"r\"))\n+                   2))]\n+  \"\"\n+  { gcc_unreachable(); }\n+  \"\"\n+  [(set (match_dup 0)\n+        (match_dup 1))])\n+\n+\n ;; Parity\n \n ;; Postpone expansion of 16-bit parity to libgcc call until after combine for"}, {"sha": "24537052eb01a51dc5b612505466e822d47c6a7a", "filename": "gcc/config/avr/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1619fcfc0624216f30ee0b0227dbca03e5c93896/gcc%2Fconfig%2Favr%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1619fcfc0624216f30ee0b0227dbca03e5c93896/gcc%2Fconfig%2Favr%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fbuiltins.def?ref=1619fcfc0624216f30ee0b0227dbca03e5c93896", "patch": "@@ -48,3 +48,4 @@ DEF_BUILTIN (\"__builtin_avr_fmulsu\", 2, AVR_BUILTIN_FMULSU, int_ftype_char_uchar\n /* More complex stuff that cannot be mapped 1:1 to an instruction.  */\n DEF_BUILTIN (\"__builtin_avr_delay_cycles\", -1, AVR_BUILTIN_DELAY_CYCLES, void_ftype_ulong, -1)\n DEF_BUILTIN (\"__builtin_avr_insert_bits\", 3, AVR_BUILTIN_INSERT_BITS, uchar_ftype_ulong_uchar_uchar, CODE_FOR_insert_bits)\n+DEF_BUILTIN (\"__builtin_avr_flash_segment\", 1, AVR_BUILTIN_FLASH_SEGMENT, char_ftype_const_memx_ptr, CODE_FOR_flash_segment)"}, {"sha": "aa3518c585ad0db5e3a0d5784f64e56cb405214d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1619fcfc0624216f30ee0b0227dbca03e5c93896/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1619fcfc0624216f30ee0b0227dbca03e5c93896/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=1619fcfc0624216f30ee0b0227dbca03e5c93896", "patch": "@@ -8809,7 +8809,18 @@ might increase delay time. @code{ticks} must be a compile time\n integer constant; delays with a variable number of cycles are not supported.\n \n @smallexample\n-     unsigned char __builtin_avr_insert_bits (unsigned long map, unsigned char bits, unsigned char val)\n+char __builtin_avr_flash_segment (const __memx void*)\n+@end smallexample\n+\n+@noindent\n+This built-in takes a byte address to the 24-bit\n+@ref{AVR Named Address Spaces,address space} @code{__memx} and returns\n+the number of the flash segment (the 64 KiB chunk) where the address\n+points to.  Counting starts at @code{0}.\n+If the address does not point to flash memory, return @code{-1}.\n+\n+@smallexample\n+unsigned char __builtin_avr_insert_bits (unsigned long map, unsigned char bits, unsigned char val)\n @end smallexample\n \n @noindent"}]}