{"sha": "7a442a1de62d1534517c37edba3cd2be68461b02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E0NDJhMWRlNjJkMTUzNDUxN2MzN2VkYmEzY2QyYmU2ODQ2MWIwMg==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2005-02-01T22:50:12Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-02-01T22:50:12Z"}, "message": "re PR tree-optimization/19217 (ICE: verify_stmts failed: address taken, but ADDRESSABLE bit not set)\n\n\tPR tree-optimization/19217\n\t* tree-cfg.c (verify_expr): Use the data field to see if TP was\n\tseen inside a PHI node.  Do not do the ADDR_EXPR check if it was.\n\t(verify_stmts): Pass (void*)1 as data to verify_expr to signal\n\tthat it is walking a PHI node.\n\nFrom-SVN: r94570", "tree": {"sha": "ec7e286bc00ac8169243deab25f4be197318833c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec7e286bc00ac8169243deab25f4be197318833c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a442a1de62d1534517c37edba3cd2be68461b02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a442a1de62d1534517c37edba3cd2be68461b02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a442a1de62d1534517c37edba3cd2be68461b02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a442a1de62d1534517c37edba3cd2be68461b02/comments", "author": null, "committer": null, "parents": [{"sha": "475b6e22db0635ca0dfd0b9cac640ce9fd11690a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/475b6e22db0635ca0dfd0b9cac640ce9fd11690a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/475b6e22db0635ca0dfd0b9cac640ce9fd11690a"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "ac04aeb5c81af4b8cfdd701ca18c4cf1b39763ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a442a1de62d1534517c37edba3cd2be68461b02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a442a1de62d1534517c37edba3cd2be68461b02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a442a1de62d1534517c37edba3cd2be68461b02", "patch": "@@ -1,3 +1,11 @@\n+2005-02-01  Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR tree-optimization/19217\n+\t* tree-cfg.c (verify_expr): Use the data field to see if TP was\n+\tseen inside a PHI node.  Do not do the ADDR_EXPR check if it was.\n+\t(verify_stmts): Pass (void*)1 as data to verify_expr to signal\n+\tthat it is walking a PHI node.\n+\n 2005-02-01  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* doc/extend.texi (Nested Functions): Update."}, {"sha": "ba4fbdc0ac789a5a79e63089941334bf3b759f94", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a442a1de62d1534517c37edba3cd2be68461b02/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a442a1de62d1534517c37edba3cd2be68461b02/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=7a442a1de62d1534517c37edba3cd2be68461b02", "patch": "@@ -3231,12 +3231,14 @@ has_label_p (basic_block bb, tree label)\n \n \n /* Callback for walk_tree, check that all elements with address taken are\n-   properly noticed as such.  */\n+   properly noticed as such.  The DATA is an int* that is 1 if TP was seen\n+   inside a PHI node.  */\n \n static tree\n verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n {\n   tree t = *tp, x;\n+  bool in_phi = (data != NULL);\n \n   if (TYPE_P (t))\n     *walk_subtrees = 0;\n@@ -3270,6 +3272,16 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n       break;\n \n     case ADDR_EXPR:\n+      /* ??? tree-ssa-alias.c may have overlooked dead PHI nodes, missing\n+\t dead PHIs that take the address of something.  But if the PHI\n+\t result is dead, the fact that it takes the address of anything\n+\t is irrelevant.  Because we can not tell from here if a PHI result\n+\t is dead, we just skip this check for PHIs altogether.  This means\n+\t we may be missing \"valid\" checks, but what can you do?\n+\t This was PR19217.  */\n+      if (in_phi)\n+\tbreak;\n+\n       /* Skip any references (they will be checked when we recurse down the\n \t tree) and ensure that any variable used as a prefix is marked\n \t addressable.  */\n@@ -3546,7 +3558,7 @@ verify_stmts (void)\n \t\t  err |= true;\n \t\t}\n \n-\t      addr = walk_tree (&t, verify_expr, NULL, NULL);\n+\t      addr = walk_tree (&t, verify_expr, (void *) 1, NULL);\n \t      if (addr)\n \t\t{\n \t\t  debug_generic_stmt (addr);"}]}