{"sha": "07217645f7ab36e65d91ff5ab0d8778ba9f924b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcyMTc2NDVmN2FiMzZlNjVkOTFmZjVhYjBkODc3OGJhOWY5MjRiNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-07-10T22:09:10Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-07-10T22:09:10Z"}, "message": "recog.c (offsettable_address_p): Handle LO_SUM case.\n\n\t* recog.c (offsettable_address_p): Handle LO_SUM case.\n\t* config/mips/mips.c (double_memory_operand): Use adjust_address_nv\n\tinstead of plus_constant.\n\nFrom-SVN: r43912", "tree": {"sha": "75d83831603917d240d2a453239b4b0485baae9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75d83831603917d240d2a453239b4b0485baae9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07217645f7ab36e65d91ff5ab0d8778ba9f924b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07217645f7ab36e65d91ff5ab0d8778ba9f924b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07217645f7ab36e65d91ff5ab0d8778ba9f924b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07217645f7ab36e65d91ff5ab0d8778ba9f924b5/comments", "author": null, "committer": null, "parents": [{"sha": "91667711832211a065a5bff2484c26390197986e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91667711832211a065a5bff2484c26390197986e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91667711832211a065a5bff2484c26390197986e"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "34b7610b6358c44fc8f48cc62232a38154fc7642", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07217645f7ab36e65d91ff5ab0d8778ba9f924b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07217645f7ab36e65d91ff5ab0d8778ba9f924b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07217645f7ab36e65d91ff5ab0d8778ba9f924b5", "patch": "@@ -1,3 +1,9 @@\n+Tue Jul 10 07:27:53 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* recog.c (offsettable_address_p): Handle LO_SUM case.\n+\t* config/mips/mips.c (double_memory_operand): Use adjust_address_nv\n+\tinstead of plus_constant.\n+\t\n 2001-07-10  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n \t* reload1.c (merge_assigned_reloads): After a RELOAD_OTHER merge,"}, {"sha": "48c391590b95f11b2c4649a20e2ecf74c54b7dff", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07217645f7ab36e65d91ff5ab0d8778ba9f924b5/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07217645f7ab36e65d91ff5ab0d8778ba9f924b5/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=07217645f7ab36e65d91ff5ab0d8778ba9f924b5", "patch": "@@ -838,8 +838,6 @@ double_memory_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n-  rtx addr;\n-\n   if (GET_CODE (op) != MEM\n       || ! memory_operand (op, mode))\n     {\n@@ -939,14 +937,12 @@ double_memory_operand (op, mode)\n   /* Make sure that 4 added to the address is a valid memory address.\n      This essentially just checks for overflow in an added constant.  */\n \n-  addr = XEXP (op, 0);\n-\n-  if (CONSTANT_ADDRESS_P (addr))\n+  if (CONSTANT_ADDRESS_P (XEXP (op, 0)))\n     return 1;\n \n-  return memory_address_p ((GET_MODE_CLASS (mode) == MODE_INT\n-\t\t\t    ? SImode : SFmode),\n-\t\t\t   plus_constant (addr, 4));\n+  op = adjust_address_nv (op, GET_MODE_CLASS (mode) == MODE_INT\n+\t\t\t  ? SImode : SFmode, 4);\n+  return memory_address_p (XEXP (op, 0));\n }\n \n /* Return nonzero if the code of this rtx pattern is EQ or NE.  */"}, {"sha": "26ff03021898a4ffc0e62cbc5d0c4907122ef5e1", "filename": "gcc/recog.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07217645f7ab36e65d91ff5ab0d8778ba9f924b5/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07217645f7ab36e65d91ff5ab0d8778ba9f924b5/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=07217645f7ab36e65d91ff5ab0d8778ba9f924b5", "patch": "@@ -1963,9 +1963,13 @@ offsettable_address_p (strictp, mode, y)\n   /* The offset added here is chosen as the maximum offset that\n      any instruction could need to add when operating on something\n      of the specified mode.  We assume that if Y and Y+c are\n-     valid addresses then so is Y+d for all 0<d<c.  */\n-\n-  z = plus_constant (y, mode_sz - 1);\n+     valid addresses then so is Y+d for all 0<d<c.  adjust_address will\n+     go inside a LO_SUM here, so we do so as well.  */\n+  if (GET_CODE (y) == LO_SUM)\n+    z = gen_rtx_LO_SUM (GET_MODE (y), XEXP (y, 0),\n+\t\t\tplus_constant (XEXP (y, 1), mode_sz - 1));\n+  else\n+    z = plus_constant (y, mode_sz - 1);\n \n   /* Use QImode because an odd displacement may be automatically invalid\n      for any wider mode.  But it should be valid for a single byte.  */"}]}