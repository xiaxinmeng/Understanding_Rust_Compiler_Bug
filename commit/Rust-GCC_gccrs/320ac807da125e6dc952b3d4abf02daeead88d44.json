{"sha": "320ac807da125e6dc952b3d4abf02daeead88d44", "node_id": "C_kwDOANBUbNoAKDMyMGFjODA3ZGExMjVlNmRjOTUyYjNkNGFiZjAyZGFlZWFkODhkNDQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-12T12:49:40Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-12T14:00:09Z"}, "message": "libstdc++: Define atomic lock-free type aliases for C++20 [PR98034]\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/98034\n\t* include/std/atomic (__cpp_lib_atomic_lock_free_type_aliases):\n\tDefine macro.\n\t(atomic_signed_lock_free, atomic_unsigned_lock_free): Define\n\taliases.\n\t* include/std/version (__cpp_lib_atomic_lock_free_type_aliases):\n\tDefine macro.\n\t* testsuite/29_atomics/atomic/lock_free_aliases.cc: New test.", "tree": {"sha": "1c7284882b370bda155cd16bee43f38d4dc27db5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c7284882b370bda155cd16bee43f38d4dc27db5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/320ac807da125e6dc952b3d4abf02daeead88d44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320ac807da125e6dc952b3d4abf02daeead88d44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/320ac807da125e6dc952b3d4abf02daeead88d44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320ac807da125e6dc952b3d4abf02daeead88d44/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2327d9331430777006008ab3b051afe2b4fc15bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2327d9331430777006008ab3b051afe2b4fc15bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2327d9331430777006008ab3b051afe2b4fc15bd"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "857f92700495fbb0fa3e11f2cde0ff434ec6bf86", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320ac807da125e6dc952b3d4abf02daeead88d44/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320ac807da125e6dc952b3d4abf02daeead88d44/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=320ac807da125e6dc952b3d4abf02daeead88d44", "patch": "@@ -1727,6 +1727,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using __atomic_ref<_Tp>::operator=;\n     };\n \n+#define __cpp_lib_atomic_lock_free_type_aliases 201907L\n+#ifdef _GLIBCXX_HAVE_PLATFORM_WAIT\n+  using atomic_signed_lock_free\n+    = atomic<make_signed_t<__detail::__platform_wait_t>>;\n+  using atomic_unsigned_lock_free\n+    = atomic<make_unsigned_t<__detail::__platform_wait_t>>;\n+#elif ATOMIC_INT_LOCK_FREE || !(ATOMIC_LONG_LOCK_FREE || ATOMIC_CHAR_LOCK_FREE)\n+  using atomic_signed_lock_free = atomic<signed int>;\n+  using atomic_unsigned_lock_free = atomic<unsigned int>;\n+#elif ATOMIC_LONG_LOCK_FREE\n+  using atomic_signed_lock_free = atomic<signed long>;\n+  using atomic_unsigned_lock_free = atomic<unsigned long>;\n+#elif ATOMIC_CHAR_LOCK_FREE\n+  using atomic_signed_lock_free = atomic<signed char>;\n+  using atomic_unsigned_lock_free = atomic<unsigned char>;\n+#endif\n+\n #endif // C++2a\n \n   /// @} group atomics"}, {"sha": "61718ebad7404c88534cbabe5b3337130f6b6766", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320ac807da125e6dc952b3d4abf02daeead88d44/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320ac807da125e6dc952b3d4abf02daeead88d44/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=320ac807da125e6dc952b3d4abf02daeead88d44", "patch": "@@ -187,6 +187,7 @@\n #define __cpp_lib_assume_aligned 201811L\n #define __cpp_lib_atomic_flag_test 201907L\n #define __cpp_lib_atomic_float 201711L\n+#define __cpp_lib_atomic_lock_free_type_aliases 201907L\n #define __cpp_lib_atomic_ref 201806L\n #define __cpp_lib_atomic_value_initialization 201911L\n #define __cpp_lib_bind_front 201907L"}, {"sha": "02c4ccc3aa302305fa1e59cee258096e7529033b", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/lock_free_aliases.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320ac807da125e6dc952b3d4abf02daeead88d44/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Flock_free_aliases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320ac807da125e6dc952b3d4abf02daeead88d44/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Flock_free_aliases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Flock_free_aliases.cc?ref=320ac807da125e6dc952b3d4abf02daeead88d44", "patch": "@@ -0,0 +1,34 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+#include <atomic>\n+\n+#ifndef __cpp_lib_atomic_lock_free_type_aliases\n+# error \"Feature test macro for lock-free type aliases is missing in <atomic>\"\n+#elif __cpp_lib_atomic_lock_free_type_aliases != 201907L\n+# error \"Feature test macro for lock-free type aliases has wrong value in <atomic>\"\n+#endif\n+\n+template<typename T>\n+constexpr bool is_atomic_specialization = false;\n+template<typename T>\n+constexpr bool is_atomic_specialization<std::atomic<T>> = true;\n+\n+// The type aliases atomic_signed_lock_free and atomic_unsigned_lock_free\n+// name specializations of atomic\n+static_assert( is_atomic_specialization<std::atomic_signed_lock_free> );\n+static_assert( is_atomic_specialization<std::atomic_unsigned_lock_free> );\n+\n+#include <type_traits>\n+\n+// ... whose template arguments are integral types,\n+static_assert( std::is_integral_v<std::atomic_signed_lock_free::value_type> );\n+static_assert( std::is_integral_v<std::atomic_unsigned_lock_free::value_type> );\n+\n+// ... respectively signed and unsigned,\n+static_assert( std::is_signed_v<std::atomic_signed_lock_free::value_type> );\n+static_assert( std::is_unsigned_v<std::atomic_unsigned_lock_free::value_type> );\n+\n+// and whose is_always_lock_free property is true.\n+static_assert( std::atomic_signed_lock_free::is_always_lock_free );\n+static_assert( std::atomic_unsigned_lock_free::is_always_lock_free );"}]}