{"sha": "387f73626ae0e04c3f81d71d4de6780a4caad052", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg3ZjczNjI2YWUwZTA0YzNmODFkNzFkNGRlNjc4MGE0Y2FhZDA1Mg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-19T09:18:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-19T09:18:09Z"}, "message": "Merge #509 #636\n\n509: Initial support for module r=philberty a=dkm\n\nAdds name resolution, HIR lowering and type checking. For modules\r\nwhich should allow for initial multiple file parsing support.\r\n\r\nFixes #432\n\n636: Suppress uninitialized candidate_type warning in process_traits_for_candidates r=philberty a=dkm\n\nFrom Mark Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000142.html\r\n\r\n> Without handling the default case in the switch statement gcc 10.2.1 will warn:\r\n> \r\n> rust-hir-path-probe.h:75:40: warning: \u2018candidate_type\u2019 may be used uninitialized\r\n>   in this function [-Wmaybe-uninitialized]\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>", "tree": {"sha": "e7a77ab117beb5a9e565977e10405c07ce47f63b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7a77ab117beb5a9e565977e10405c07ce47f63b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/387f73626ae0e04c3f81d71d4de6780a4caad052", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhHiHRCRBK7hj4Ov3rIwAA4iUIAGXNNKbcoNML3qUJ+xY9oDhv\njUYd3Y66k//yUQOmq4UVP/bAOso13cxdGiZf59lTT+F4Ch50QkSKMisCb6GDopWG\nnTRxCYRC3DtESGCPQGrPcS9molBi0W0hZ3CacK/oVE14005cmITJ+XQnQyG491Ar\nSdv9gLxbZiWEbxDyId8W03xQYiniXe6wWaNbhfN0uk7x/8zMc/U36+Mk8hNOwjPA\nAzZXIMQQ5SMOq0oxBLHqNtUcROIOdap1FBjkfaZ946OOxudffAisMqlR5E8luakb\npWOgLlznX/SVtGhE6MgXOzFmFZ/H8LmEPMFuUH1mLOuCC+U98GZccO0LCLCohVk=\n=M8az\n-----END PGP SIGNATURE-----\n", "payload": "tree e7a77ab117beb5a9e565977e10405c07ce47f63b\nparent 24838285ad98f9a91ea73ed50652de2b1c0e7e61\nparent b34ea0af5e92fd34a4eb21edb39a8715b47e84f8\nparent 6109a6b4b1ca6453b42a3b99f1998e0eb5674741\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1629364689 +0000\ncommitter GitHub <noreply@github.com> 1629364689 +0000\n\nMerge #509 #636\n\n509: Initial support for module r=philberty a=dkm\n\nAdds name resolution, HIR lowering and type checking. For modules\r\nwhich should allow for initial multiple file parsing support.\r\n\r\nFixes #432\n\n636: Suppress uninitialized candidate_type warning in process_traits_for_candidates r=philberty a=dkm\n\nFrom Mark Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000142.html\r\n\r\n> Without handling the default case in the switch statement gcc 10.2.1 will warn:\r\n> \r\n> rust-hir-path-probe.h:75:40: warning: \u2018candidate_type\u2019 may be used uninitialized\r\n>   in this function [-Wmaybe-uninitialized]\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387f73626ae0e04c3f81d71d4de6780a4caad052", "html_url": "https://github.com/Rust-GCC/gccrs/commit/387f73626ae0e04c3f81d71d4de6780a4caad052", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387f73626ae0e04c3f81d71d4de6780a4caad052/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24838285ad98f9a91ea73ed50652de2b1c0e7e61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24838285ad98f9a91ea73ed50652de2b1c0e7e61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24838285ad98f9a91ea73ed50652de2b1c0e7e61"}, {"sha": "b34ea0af5e92fd34a4eb21edb39a8715b47e84f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b34ea0af5e92fd34a4eb21edb39a8715b47e84f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b34ea0af5e92fd34a4eb21edb39a8715b47e84f8"}, {"sha": "6109a6b4b1ca6453b42a3b99f1998e0eb5674741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6109a6b4b1ca6453b42a3b99f1998e0eb5674741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6109a6b4b1ca6453b42a3b99f1998e0eb5674741"}], "stats": {"total": 309, "additions": 280, "deletions": 29}, "files": [{"sha": "b996e173d6c4566db89318fbf667b96d8ac5c186", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -972,6 +972,8 @@ class Module : public VisItem\n     UNLOADED,\n   };\n \n+  Identifier get_name () const { return module_name; }\n+\n private:\n   Identifier module_name;\n   Location locus;"}, {"sha": "8b36289db38c0539d27499980918c0f34ccf2525", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -301,6 +301,12 @@ class CompileItem : public HIRCompileBase\n       }\n   }\n \n+  void visit (HIR::ModuleBodied &module) override\n+  {\n+    for (auto &item : module.get_items ())\n+      CompileItem::compile (item.get (), ctx, compile_fns);\n+  }\n+\n private:\n   CompileItem (Context *ctx, bool compile_fns, TyTy::BaseType *concrete)\n     : HIRCompileBase (ctx), compile_fns (compile_fns), concrete (concrete)"}, {"sha": "b9b5084c2ae03c31e5f53cfe3233d2623381a505", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -88,6 +88,7 @@ CompileExpr::visit (HIR::CallExpr &expr)\n     {\n       // must be a call to a function\n       Bexpression *fn = CompileExpr::Compile (expr.get_fnexpr (), ctx);\n+      rust_assert (fn != nullptr);\n \n       std::vector<Bexpression *> args;\n       expr.iterate_params ([&] (HIR::Expr *p) mutable -> bool {"}, {"sha": "bcf83ee63b628bf2e563dc4e162493e4eeb30c80", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -29,6 +29,7 @@\n #include \"rust-ast-lower-pattern.h\"\n #include \"rust-ast-lower-block.h\"\n #include \"rust-ast-lower-extern.h\"\n+#include \"rust-hir-full-decls.h\"\n \n namespace Rust {\n namespace HIR {\n@@ -54,6 +55,43 @@ class ASTLoweringItem : public ASTLoweringBase\n     return resolver.translated;\n   }\n \n+  void visit (AST::Module &module) override\n+  {\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, module.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n+    // should be lowered from module.get_vis()\n+    HIR::Visibility vis = HIR::Visibility::create_public ();\n+\n+    auto items = std::vector<std::unique_ptr<Item> > ();\n+\n+    for (auto &item : module.get_items ())\n+      {\n+\tauto transitem = translate (item.get ());\n+\titems.push_back (std::unique_ptr<Item> (transitem));\n+      }\n+\n+    // should be lowered/copied from module.get_in/outer_attrs()\n+    AST::AttrVec inner_attrs;\n+    AST::AttrVec outer_attrs;\n+\n+    translated\n+      = new HIR::ModuleBodied (mapping, module.get_name (), module.get_locus (),\n+\t\t\t       std::move (items), std::move (vis),\n+\t\t\t       std::move (inner_attrs),\n+\t\t\t       std::move (outer_attrs));\n+\n+    mappings->insert_defid_mapping (mapping.get_defid (), translated);\n+    mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       translated);\n+    mappings->insert_module (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t     static_cast<Module *> (translated));\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       module.get_locus ());\n+  }\n+\n   void visit (AST::TypeAlias &alias) override\n   {\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;"}, {"sha": "32ee317edb6cb60609e2429c7351b16e3c7c5508", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -718,6 +718,8 @@ class ModuleBodied : public Module\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::vector<std::unique_ptr<Item> > &get_items () { return items; };\n+\n   /* Override that runs the function recursively on all items contained within\n    * the module. */\n   void add_crate_name (std::vector<std::string> &names) const override;"}, {"sha": "bc05e93069c5f57f5b2aa387fb7db9ef35c996a8", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -19,8 +19,10 @@\n #ifndef RUST_AST_RESOLVE_ITEM_H\n #define RUST_AST_RESOLVE_ITEM_H\n \n+#include \"rust-ast-full-decls.h\"\n #include \"rust-ast-resolve-base.h\"\n #include \"rust-ast-full.h\"\n+#include \"rust-ast-resolve-toplevel.h\"\n #include \"rust-ast-resolve-type.h\"\n #include \"rust-ast-resolve-pattern.h\"\n #include \"rust-ast-resolve-stmt.h\"\n@@ -214,6 +216,27 @@ class ResolveItem : public ResolverBase\n     resolver->get_type_scope ().pop ();\n   }\n \n+  void visit (AST::Module &module) override\n+  {\n+    NodeId scope_node_id = module.get_node_id ();\n+    resolver->get_name_scope ().push (scope_node_id);\n+    resolver->get_type_scope ().push (scope_node_id);\n+    resolver->get_label_scope ().push (scope_node_id);\n+    resolver->push_new_name_rib (resolver->get_name_scope ().peek ());\n+    resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n+    resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n+\n+    for (auto &item : module.get_items ())\n+      ResolveTopLevel::go (item.get ());\n+\n+    for (auto &item : module.get_items ())\n+      ResolveItem::go (item.get ());\n+\n+    resolver->get_name_scope ().pop ();\n+    resolver->get_type_scope ().pop ();\n+    resolver->get_label_scope ().pop ();\n+  }\n+\n   void visit (AST::TupleStruct &struct_decl) override\n   {\n     NodeId scope_node_id = struct_decl.get_node_id ();"}, {"sha": "2c1de6658389a7d90169226b0bd0dccce089d7b8", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -23,6 +23,7 @@\n #include \"rust-ast-resolve-type.h\"\n #include \"rust-ast-resolve-implitem.h\"\n #include \"rust-ast-full.h\"\n+#include \"rust-name-resolver.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -39,6 +40,26 @@ class ResolveTopLevel : public ResolverBase\n     item->accept_vis (resolver);\n   };\n \n+  void visit (AST::Module &module) override\n+  {\n+    auto path = prefix.append (\n+      CanonicalPath::new_seg (module.get_node_id (), module.get_name ()));\n+    resolver->get_name_scope ().insert (\n+      path, module.get_node_id (), module.get_locus (), false,\n+      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\tRichLocation r (module.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n+      });\n+\n+    resolver->insert_new_definition (module.get_node_id (),\n+\t\t\t\t     Definition{module.get_node_id (),\n+\t\t\t\t\t\tmodule.get_node_id ()});\n+\n+    for (auto &item : module.get_items ())\n+      ResolveTopLevel::go (item.get (), path);\n+  }\n+\n   void visit (AST::TypeAlias &alias) override\n   {\n     auto path"}, {"sha": "b8affe68c41e56ef26791a3819848329e8802721", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -206,6 +206,9 @@ class ResolveRelativeTypePath\n \n     auto resolver = Resolver::get ();\n     NodeId resolved_node = UNKNOWN_NODEID;\n+\n+    // We may need to change how names are resolved, like described in :\n+    // https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/compiler/rustc_resolve/src/lib.rs#L1722\n     if (!resolver->get_type_scope ().lookup (canonical_path, &resolved_node))\n       {\n \trust_error_at (path.get_locus_slow (), \"failed to resolve TypePath: %s\","}, {"sha": "5b24816a651a620e64446da42d32a56cde19310c", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -552,6 +552,10 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n       auto s = ResolvePathSegmentToCanonicalPath::resolve (seg);\n       path = path.append (s);\n \n+      // reset state\n+      segment_is_type = false;\n+      resolved_node = UNKNOWN_NODEID;\n+\n       if (resolver->get_name_scope ().lookup (path, &resolved_node))\n \t{\n \t  resolver->insert_resolved_name (seg.get_node_id (), resolved_node);\n@@ -562,6 +566,7 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n       // check the type scope\n       else if (resolver->get_type_scope ().lookup (path, &resolved_node))\n \t{\n+\t  segment_is_type = true;\n \t  resolver->insert_resolved_type (seg.get_node_id (), resolved_node);\n \t  resolver->insert_new_definition (seg.get_node_id (),\n \t\t\t\t\t   Definition{expr->get_node_id (),\n@@ -611,6 +616,19 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n \t  return;\n \t}\n     }\n+\n+  // its fully resolved lets mark it as such\n+  if (resolved_node != UNKNOWN_NODEID)\n+    {\n+      if (segment_is_type)\n+\tresolver->insert_resolved_type (expr->get_node_id (), resolved_node);\n+      else\n+\tresolver->insert_resolved_name (expr->get_node_id (), resolved_node);\n+\n+      resolver->insert_new_definition (expr->get_node_id (),\n+\t\t\t\t       Definition{expr->get_node_id (),\n+\t\t\t\t\t\t  parent});\n+    }\n }\n \n // rust-ast-resolve-type.h"}, {"sha": "69da4a69fd4bf363c61adf00b97dceda642ffc76", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -30,7 +30,7 @@ namespace Resolver {\n class Rib\n {\n public:\n-  // Rusts uses local_def_ids assigned by def_collector on the AST\n+  // Rust uses local_def_ids assigned by def_collector on the AST\n   // lets use NodeId instead\n   Rib (CrateNum crateNum, NodeId node_id)\n     : crate_num (crateNum), node_id (node_id)"}, {"sha": "22b107410945858f571ce5d580f004e219e0d30b", "filename": "gcc/rust/typecheck/rust-hir-path-probe.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -260,6 +260,7 @@ class PathProbeType : public TypeCheckBase\n \t    break;\n \n \t  case TraitItemReference::TraitItemType::ERROR:\n+\t  default:\n \t    gcc_unreachable ();\n \t    break;\n \t  }"}, {"sha": "d39b2ee03ac44404a4ad4f148b3f848e366ecfdf", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -936,6 +936,10 @@ class TypeCheckExpr : public TypeCheckBase\n     if (tyseg->get_kind () == TyTy::TypeKind::ERROR)\n       return;\n \n+    // this is the case where the name resolver has already fully resolved the\n+    // name, which means all the work is already done.\n+    bool name_resolved_fully = offset >= expr.get_num_segments ();\n+\n     if (expr.get_num_segments () == 1)\n       {\n \tLocation locus = expr.get_segments ().back ().get_locus ();\n@@ -1052,7 +1056,7 @@ class TypeCheckExpr : public TypeCheckBase\n       {\n \trust_assert (path_resolved_id == resolved_node_id);\n       }\n-    else\n+    else if (!name_resolved_fully)\n       {\n \tresolver->insert_resolved_name (expr.get_mappings ().get_nodeid (),\n \t\t\t\t\tresolved_node_id);\n@@ -1214,6 +1218,8 @@ class TypeCheckExpr : public TypeCheckBase\n     for (size_t i = 0; i < expr.get_num_segments (); i++)\n       {\n \tHIR::PathExprSegment &seg = expr.get_segments ().at (i);\n+\n+\tbool have_more_segments = (expr.get_num_segments () - 1 != i);\n \tbool is_root = *offset == 0;\n \tNodeId ast_node_id = seg.get_mappings ().get_nodeid ();\n \n@@ -1238,6 +1244,7 @@ class TypeCheckExpr : public TypeCheckBase\n \t    resolver->lookup_resolved_type (ast_node_id, &ref_node_id);\n \t  }\n \n+\t// ref_node_id is the NodeId that the segments refers to.\n \tif (ref_node_id == UNKNOWN_NODEID)\n \t  {\n \t    if (is_root)\n@@ -1265,27 +1272,33 @@ class TypeCheckExpr : public TypeCheckBase\n \n \t\treturn new TyTy::ErrorType (expr.get_mappings ().get_hirid ());\n \t      }\n+\n \t    return root_tyty;\n \t  }\n \n-\t// FIXME\n-\t// modules are not going to have an explicit TyTy.In this case we\n-\t// can probably do some kind of check. By looking up if the HirId ref\n-\t// node is a module and continue. If the path expression is single\n-\t// segment of module we can error with expected value but found module\n-\t// or something.\n-\t//\n-\t// Something like this\n-\t//\n-\t// bool seg_is_module = mappings->lookup_module (ref);\n-\t// if (seg_is_module)\n-\t//   {\n-\t//     if (have_more_segments)\n-\t//       continue;\n-\t//\n-\t//     rust_error_at (seg.get_locus (), \"expected value\");\n-\t//     return new TyTy::ErrorType (expr.get_mappings ().get_hirid ());\n-\t//   }\n+\tauto seg_is_module\n+\t  = (nullptr\n+\t     != mappings->lookup_module (expr.get_mappings ().get_crate_num (),\n+\t\t\t\t\t ref));\n+\n+\tif (seg_is_module)\n+\t  {\n+\t    // A::B::C::this_is_a_module::D::E::F\n+\t    //          ^^^^^^^^^^^^^^^^\n+\t    //          Currently handling this.\n+\t    if (have_more_segments)\n+\t      {\n+\t\t(*offset)++;\n+\t\tcontinue;\n+\t      }\n+\n+\t    // In the case of :\n+\t    // A::B::C::this_is_a_module\n+\t    //          ^^^^^^^^^^^^^^^^\n+\t    // This is an error, we are not expecting a module.\n+\t    rust_error_at (seg.get_locus (), \"expected value\");\n+\t    return new TyTy::ErrorType (expr.get_mappings ().get_hirid ());\n+\t  }\n \n \tTyTy::BaseType *lookup = nullptr;\n \tif (!context->lookup_type (ref, &lookup))"}, {"sha": "372171f09665662b63021b373a706f86868f270a", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -156,6 +156,12 @@ class TypeCheckItem : public TypeCheckBase\n       expected_ret_tyty->unify (block_expr_ty);\n   }\n \n+  void visit (HIR::ModuleBodied &module) override\n+  {\n+    for (auto &item : module.get_items ())\n+      TypeCheckItem::Resolve (item.get ());\n+  }\n+\n private:\n   TypeCheckItem () : TypeCheckBase () {}\n };"}, {"sha": "aad5cb9ba84a190866160144fb59a3a9db1fd40b", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -101,6 +101,12 @@ class TypeCheckTopLevel : public TypeCheckBase\n     context->insert_type (struct_decl.get_mappings (), type);\n   }\n \n+  void visit (HIR::ModuleBodied &module) override\n+  {\n+    for (auto &item : module.get_items ())\n+      TypeCheckTopLevel::Resolve (item.get ());\n+  }\n+\n   void visit (HIR::StructStruct &struct_decl) override\n   {\n     std::vector<TyTy::SubstitutionParamMapping> substitutions;"}, {"sha": "d544042b3442d9aed7cae8c73d4e3816e497d709", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -324,6 +324,28 @@ Mappings::lookup_hir_impl_block (CrateNum crateNum, HirId id)\n   return iy->second;\n }\n \n+void\n+Mappings::insert_module (CrateNum crateNum, HirId id, HIR::Module *module)\n+{\n+  rust_assert (lookup_module (crateNum, id) == nullptr);\n+\n+  hirModuleMappings[crateNum][id] = module;\n+}\n+\n+HIR::Module *\n+Mappings::lookup_module (CrateNum crateNum, HirId id)\n+{\n+  auto it = hirModuleMappings.find (crateNum);\n+  if (it == hirModuleMappings.end ())\n+    return nullptr;\n+\n+  auto iy = it->second.find (id);\n+  if (iy == it->second.end ())\n+    return nullptr;\n+\n+  return iy->second;\n+}\n+\n void\n Mappings::insert_hir_implitem (CrateNum crateNum, HirId id,\n \t\t\t       HirId parent_impl_id, HIR::ImplItem *item)"}, {"sha": "2366724d65459b6fe1144b12d81bfc5a3508914d", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -131,6 +131,9 @@ class Mappings\n \t\t\t      HIR::ImplBlock *item);\n   HIR::ImplBlock *lookup_hir_impl_block (CrateNum crateNum, HirId id);\n \n+  void insert_module (CrateNum crateNum, HirId id, HIR::Module *module);\n+  HIR::Module *lookup_module (CrateNum crateNum, HirId id);\n+\n   void insert_hir_implitem (CrateNum crateNum, HirId id, HirId parent_impl_id,\n \t\t\t    HIR::ImplItem *item);\n   HIR::ImplItem *lookup_hir_implitem (CrateNum crateNum, HirId id,\n@@ -279,6 +282,7 @@ class Mappings\n \n   std::map<DefId, HIR::Item *> defIdMappings;\n   std::map<CrateNum, std::map<LocalDefId, HIR::Item *> > localDefIdMappings;\n+  std::map<CrateNum, std::map<HirId, HIR::Module *> > hirModuleMappings;\n   std::map<CrateNum, std::map<HirId, HIR::Item *> > hirItemMappings;\n   std::map<CrateNum, std::map<HirId, HIR::Type *> > hirTypeMappings;\n   std::map<CrateNum, std::map<HirId, HIR::Expr *> > hirExprMappings;"}, {"sha": "41c3b510dece89834471e9fab7a655792b41ef57", "filename": "gcc/testsuite/rust/compile/torture/all_doc_comment_line_blocks.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fall_doc_comment_line_blocks.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fall_doc_comment_line_blocks.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fall_doc_comment_line_blocks.rs?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -9,7 +9,7 @@\n \n /// outer doc line for module\n /** outer doc block for module               */\n-pub mod module\n+pub mod module // { dg-warning \"unused name\" }\n {\n   //!  inner line doc\n   //!! inner line doc!\n@@ -24,21 +24,23 @@ pub mod module\n   /**  outer block doc */\n   /*** block comment   */\n \n-  mod block_doc_comments\n+  mod block_doc_comments // { dg-warning \"unused name\" }\n   {\n     /*   /* */  /** */  /*! */  */\n     /*!  /* */  /** */  /*! */  */\n     /**  /* */  /** */  /*! */  */\n-    mod item { }\n+    mod item { } // { dg-warning \"unused name\" }\n   }\n \n-  pub mod empty\n+  pub mod empty // { dg-warning \"unused name\" }\n   {\n     //!\n     /*!*/\n     //\n \n     ///\n+    // the following warning is issued one line earlier\n+    // { dg-warning \"unused name\" }\n     mod doc { }\n     /**/\n     /***/"}, {"sha": "e5ed91189c5d46fa675088851663f7ec20aedb20", "filename": "gcc/testsuite/rust/compile/torture/all_doc_comment_line_blocks_crlf.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fall_doc_comment_line_blocks_crlf.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fall_doc_comment_line_blocks_crlf.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fall_doc_comment_line_blocks_crlf.rs?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -9,7 +9,7 @@\n \r\n /// outer doc line for module\r\n /** outer doc block for module               */\r\n-pub mod module\r\n+pub mod module // { dg-warning \"unused name\" }\r\n {\r\n   //!  inner line doc\r\n   //!! inner line doc!\r\n@@ -24,22 +24,23 @@ pub mod module\n   /**  outer block doc */\r\n   /*** block comment   */\r\n \r\n-  mod block_doc_comments\r\n+  mod block_doc_comments // { dg-warning \"unused name\" }\r\n   {\r\n     /*   /* */  /** */  /*! */  */\r\n     /*!  /* */  /** */  /*! */  */\r\n     /**  /* */  /** */  /*! */  */\r\n-    mod item { }\r\n+    mod item { } // { dg-warning \"unused name\" }\r\n   }\r\n \r\n-  pub mod empty\r\n+  pub mod empty // { dg-warning \"unused name\" }\r\n   {\r\n     //!\r\n     /*!*/\r\n     //\r\n \r\n     ///\r\n-    mod doc { }\r\n+    mod doc { }    // { dg-warning \"unused name\" }\r\n+\r\n     /**/\r\n     /***/\r\n   }\r"}, {"sha": "218095c9ff3a19ab897c2c3781c1b1b655a86b23", "filename": "gcc/testsuite/rust/compile/torture/mod-nameresolve.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod-nameresolve.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod-nameresolve.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod-nameresolve.rs?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -0,0 +1,5 @@\n+mod foo { // { dg-warning \"unused name\" }\n+    struct A; // { dg-warning \"unused name\" }\n+}\n+\n+fn main() {}"}, {"sha": "ca272f711deb1c9ad2907a5595c98a7e29791eb2", "filename": "gcc/testsuite/rust/compile/torture/mod1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod1.rs?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -0,0 +1,12 @@\n+// This is testing name resolution\n+\n+mod _foo {\n+    struct _A;\n+}\n+\n+mod _bar {\n+    mod _barbis {\n+        struct _B;\n+    }\n+}\n+"}, {"sha": "6a2d1ed5901071f14a2abd8fc6bce7fe712ccc2f", "filename": "gcc/testsuite/rust/compile/torture/mod2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod2.rs?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -0,0 +1,15 @@\n+mod foomod {\n+    pub struct Foo { // { dg-warning \"unused name\" }\n+    }\n+}\n+\n+impl foomod::Foo {\n+    pub fn new() -> Self {\n+        foomod::Foo {\n+        }\n+    }\n+}\n+ \n+fn main() {\n+   let _a = foomod::Foo::new();\n+}"}, {"sha": "e2418391b669a4189b737ab22d0e3c74c59be9f1", "filename": "gcc/testsuite/rust/compile/torture/mod3.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod3.rs?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -0,0 +1,25 @@\n+mod A {\n+    pub mod B {  // { dg-warning \"unused name\" }\n+        pub mod C { // { dg-warning \"unused name\" }\n+            pub struct Foo {\n+                pub f: i32,\n+            }\n+            impl Foo {\n+                pub fn new() -> Self {  // { dg-warning \"unused name\" }\n+                    Foo {\n+                        f: 23i32,\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn main() ->i32 {\n+    let a = A::B::C::Foo::new();\n+    let b = A::B::C::Foo {\n+        f: -23i32,\n+    };\n+\n+    a.f - b.f\n+}"}, {"sha": "37e7ce33162f5d1e656668f157bcee042bda3c1f", "filename": "gcc/testsuite/rust/execute/torture/mod1.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmod1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387f73626ae0e04c3f81d71d4de6780a4caad052/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmod1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmod1.rs?ref=387f73626ae0e04c3f81d71d4de6780a4caad052", "patch": "@@ -0,0 +1,25 @@\n+mod A {\n+    pub mod B {  // { dg-warning \"unused name\" }\n+        pub mod C { // { dg-warning \"unused name\" }\n+            pub struct Foo {\n+                pub f: i32,\n+            }\n+            impl Foo {\n+                pub fn new() -> Self {  // { dg-warning \"unused name\" }\n+                    Foo {\n+                        f: 23i32,\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn main() ->i32 {\n+    let a = A::B::C::Foo::new();\n+    let b = A::B::C::Foo {\n+        f: -23i32,\n+    };\n+\n+    a.f + b.f\n+}"}]}