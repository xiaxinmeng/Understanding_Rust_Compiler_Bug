{"sha": "af432130ae43aa872d977e6bda6a9fbe8c83b149", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY0MzIxMzBhZTQzYWE4NzJkOTc3ZTZiZGE2YTlmYmU4YzgzYjE0OQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-18T23:33:35Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-18T23:33:35Z"}, "message": "(reload): Correctly compute group additional needs when the return\nregister cannot be used as a spill register.\n\nFrom-SVN: r8308", "tree": {"sha": "01848c7c3e12219752a8e640084c57750437225e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01848c7c3e12219752a8e640084c57750437225e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af432130ae43aa872d977e6bda6a9fbe8c83b149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af432130ae43aa872d977e6bda6a9fbe8c83b149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af432130ae43aa872d977e6bda6a9fbe8c83b149", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af432130ae43aa872d977e6bda6a9fbe8c83b149/comments", "author": null, "committer": null, "parents": [{"sha": "aeb4bd7d6ec01536f392314d775a93e45a444c84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb4bd7d6ec01536f392314d775a93e45a444c84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeb4bd7d6ec01536f392314d775a93e45a444c84"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "ae9afb1f2cde690d5df36af343e3d932f6932faf", "filename": "gcc/reload1.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af432130ae43aa872d977e6bda6a9fbe8c83b149/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af432130ae43aa872d977e6bda6a9fbe8c83b149/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=af432130ae43aa872d977e6bda6a9fbe8c83b149", "patch": "@@ -1350,19 +1350,14 @@ reload (first, global, dumpfile)\n \t\t    }\n \n \t\t  /* Now count extra regs if there might be a conflict with\n-\t\t     the return value register.\n+\t\t     the return value register. */\n \n-\t\t     ??? This is not quite correct because we don't properly\n-\t\t     handle the case of groups, but if we end up doing\n-\t\t     something wrong, it either will end up not mattering or\n-\t\t     we will abort elsewhere.  */\n-\t\t   \n \t\t  for (r = regno; r < regno + nregs; r++)\n \t\t    if (spill_reg_order[r] >= 0)\n \t\t      for (i = 0; i < N_REG_CLASSES; i++)\n \t\t\tif (TEST_HARD_REG_BIT (reg_class_contents[i], r))\n \t\t\t  {\n-\t\t\t    if (basic_needs[i] > 0 || basic_groups[i] > 0)\n+\t\t\t    if (basic_needs[i] > 0)\n \t\t\t      {\n \t\t\t\tenum reg_class *p;\n \n@@ -1371,6 +1366,15 @@ reload (first, global, dumpfile)\n \t\t\t\twhile (*p != LIM_REG_CLASSES)\n \t\t\t\t  insn_needs.other.regs[0][(int) *p++]++;\n \t\t\t      }\n+\t\t\t    if (basic_groups[i] > 0)\n+\t\t\t      {\n+\t\t\t\tenum reg_class *p;\n+\n+\t\t\t\tinsn_needs.other.groups[i]++;\n+\t\t\t\tp = reg_class_superclasses[i];\n+\t\t\t\twhile (*p != LIM_REG_CLASSES)\n+\t\t\t\t  insn_needs.other.groups[(int) *p++]++;\n+\t\t\t      }\n \t\t\t  }\n \t\t}\n #endif /* SMALL_REGISTER_CLASSES */"}]}