{"sha": "ad05f2e9b874e19cd3d66a3971c1c385959d466a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQwNWYyZTliODc0ZTE5Y2QzZDY2YTM5NzFjMWMzODU5NTlkNDY2YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T10:03:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T10:03:49Z"}, "message": "[multiple changes]\n\n2011-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* alfa.adb, alfa.ads (Get_Entity_For_Decl): remove function, partial\n\tduplicate of Defining_Entity\n\t(Get_Unique_Entity_For_Decl): rename function into\n\tUnique_Defining_Entity\n\t* einfo.adb, einfo.ads (Is_In_ALFA, Body_Is_In_ALFA): remove flags\n\t(Formal_Proof_On): remove synthesized flag\n\t* cstand.adb, sem_ch11.adb, sem_ch2.adb, sem_ch3.adb, sem_ch4.adb,\n\tsem_ch5.adb, sem_ch6.adb, sem_ch9.adb, sem_res.adb, sem_util.adb,\n\tsem_util.ads, stand.ads: Remove treatment associated to entities in ALFA\n\t* sem_prag.adb (Analyze_Pragma): remove special treatment for pragma\n\tAnnotate (Formal_Proof)\n\n2011-08-04  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj-env.adb (Create_Config_Pragmas_File): fix handling of multi-unit\n\tsource files with non-standard naming schemes, in imported projects\n\nFrom-SVN: r177353", "tree": {"sha": "839aeecfdf5bb0318d6cec13a66c77b3430e4ce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/839aeecfdf5bb0318d6cec13a66c77b3430e4ce1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad05f2e9b874e19cd3d66a3971c1c385959d466a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad05f2e9b874e19cd3d66a3971c1c385959d466a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad05f2e9b874e19cd3d66a3971c1c385959d466a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad05f2e9b874e19cd3d66a3971c1c385959d466a/comments", "author": null, "committer": null, "parents": [{"sha": "756ef2a03df27c1998266ecae0ce335668fc2f8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/756ef2a03df27c1998266ecae0ce335668fc2f8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/756ef2a03df27c1998266ecae0ce335668fc2f8a"}], "stats": {"total": 704, "additions": 83, "deletions": 621}, "files": [{"sha": "b9478251c54b4e9ee9e88d9140791c3d3993268f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -1,3 +1,22 @@\n+2011-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* alfa.adb, alfa.ads (Get_Entity_For_Decl): remove function, partial\n+\tduplicate of Defining_Entity\n+\t(Get_Unique_Entity_For_Decl): rename function into\n+\tUnique_Defining_Entity\n+\t* einfo.adb, einfo.ads (Is_In_ALFA, Body_Is_In_ALFA): remove flags\n+\t(Formal_Proof_On): remove synthesized flag\n+\t* cstand.adb, sem_ch11.adb, sem_ch2.adb, sem_ch3.adb, sem_ch4.adb,\n+\tsem_ch5.adb, sem_ch6.adb, sem_ch9.adb, sem_res.adb, sem_util.adb,\n+\tsem_util.ads, stand.ads: Remove treatment associated to entities in ALFA\n+\t* sem_prag.adb (Analyze_Pragma): remove special treatment for pragma\n+\tAnnotate (Formal_Proof)\n+\n+2011-08-04  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj-env.adb (Create_Config_Pragmas_File): fix handling of multi-unit\n+\tsource files with non-standard naming schemes, in imported projects\n+\n 2011-08-04  Emmanuel Briot  <briot@adacore.com>\n \n \t* makeutl.adb (Complete_Mains): when a multi-unit source file is"}, {"sha": "d61ad17c9b24e183b61e353cd67001b78fd5abc8", "filename": "gcc/ada/alfa.adb", "status": "modified", "additions": 23, "deletions": 68, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Falfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Falfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Falfa.adb?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -26,6 +26,7 @@\n with Atree;    use Atree;\n with Output;   use Output;\n with Put_ALFA;\n+with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n \n package body ALFA is\n@@ -144,74 +145,6 @@ package body ALFA is\n       end loop;\n    end dalfa;\n \n-   -------------------------\n-   -- Get_Entity_For_Decl --\n-   -------------------------\n-\n-   function Get_Entity_For_Decl (N : Node_Id) return Entity_Id is\n-      E : Entity_Id := Empty;\n-\n-   begin\n-      case Nkind (N) is\n-         when N_Subprogram_Declaration |\n-              N_Subprogram_Body        |\n-              N_Package_Declaration    =>\n-            E := Defining_Unit_Name (Specification (N));\n-\n-         when N_Package_Body =>\n-            E := Defining_Unit_Name (N);\n-\n-         when N_Object_Declaration =>\n-            E := Defining_Identifier (N);\n-\n-         when others =>\n-            null;\n-      end case;\n-\n-      if Nkind (E) = N_Defining_Program_Unit_Name then\n-         E := Defining_Identifier (E);\n-      end if;\n-\n-      return E;\n-   end Get_Entity_For_Decl;\n-\n-   --------------------------------\n-   -- Get_Unique_Entity_For_Decl --\n-   --------------------------------\n-\n-   function Get_Unique_Entity_For_Decl (N : Node_Id) return Entity_Id is\n-      E : Entity_Id := Empty;\n-\n-   begin\n-      case Nkind (N) is\n-         when N_Subprogram_Declaration |\n-              N_Package_Declaration    =>\n-            E := Defining_Unit_Name (Specification (N));\n-\n-         when N_Package_Body =>\n-            E := Corresponding_Spec (N);\n-\n-         when N_Subprogram_Body =>\n-            if Acts_As_Spec (N) then\n-               E := Defining_Unit_Name (Specification (N));\n-            else\n-               E := Corresponding_Spec (N);\n-            end if;\n-\n-         when N_Object_Declaration =>\n-            E := Defining_Identifier (N);\n-\n-         when others =>\n-            null;\n-      end case;\n-\n-      if Nkind (E) = N_Defining_Program_Unit_Name then\n-         E := Defining_Identifier (E);\n-      end if;\n-\n-      return E;\n-   end Get_Unique_Entity_For_Decl;\n-\n    ----------------\n    -- Initialize --\n    ----------------\n@@ -270,4 +203,26 @@ package body ALFA is\n       Debug_Put_ALFA;\n    end palfa;\n \n+   ----------------------------\n+   -- Unique_Defining_Entity --\n+   ----------------------------\n+\n+   function Unique_Defining_Entity (N : Node_Id) return Entity_Id is\n+   begin\n+      case Nkind (N) is\n+         when N_Package_Body =>\n+            return Corresponding_Spec (N);\n+\n+         when N_Subprogram_Body =>\n+            if Acts_As_Spec (N) then\n+               return Defining_Entity (N);\n+            else\n+               return Corresponding_Spec (N);\n+            end if;\n+\n+         when others =>\n+            return Defining_Entity (N);\n+      end case;\n+   end Unique_Defining_Entity;\n+\n end ALFA;"}, {"sha": "3e630a0ad969e3ef1e2fec10857f8a8d60a6139a", "filename": "gcc/ada/alfa.ads", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Falfa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Falfa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Falfa.ads?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -319,10 +319,7 @@ package ALFA is\n    procedure Initialize_ALFA_Tables;\n    --  Reset tables for a new compilation\n \n-   function Get_Entity_For_Decl (N : Node_Id) return Entity_Id;\n-   --  Return the entity for declaration N\n-\n-   function Get_Unique_Entity_For_Decl (N : Node_Id) return Entity_Id;\n+   function Unique_Defining_Entity (N : Node_Id) return Entity_Id;\n    --  Return the entity which represents declaration N, so that matching\n    --  declaration and body have the same entity.\n "}, {"sha": "b3cc75f8e2c65bd1aa3eb2aba8d5a8496a139202", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -570,10 +570,6 @@ package body CStand is\n             Decl := New_Node (N_Full_Type_Declaration, Stloc);\n          end if;\n \n-         if Standard_Type_Is_In_ALFA (S) then\n-            Set_Is_In_ALFA (Standard_Entity (S));\n-         end if;\n-\n          Set_Is_Frozen (Standard_Entity (S));\n          Set_Is_Public (Standard_Entity (S));\n          Set_Defining_Identifier (Decl, Standard_Entity (S));\n@@ -1334,7 +1330,6 @@ package body CStand is\n       Set_Scope (Universal_Integer, Standard_Standard);\n       Build_Signed_Integer_Type\n         (Universal_Integer, Standard_Long_Long_Integer_Size);\n-      Set_Is_In_ALFA (Universal_Integer);\n \n       Universal_Real := New_Standard_Entity;\n       Decl := New_Node (N_Full_Type_Declaration, Stloc);"}, {"sha": "1dc4658afd37b41a079a0cf2bb14a3e1d55e9bf8", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 2, "deletions": 61, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -409,7 +409,7 @@ package body Einfo is\n    --    Is_Compilation_Unit             Flag149\n    --    Has_Pragma_Elaborate_Body       Flag150\n \n-   --    Is_In_ALFA                      Flag151\n+   --    (unused)                        Flag151\n    --    Entry_Accepted                  Flag152\n    --    Is_Obsolescent                  Flag153\n    --    Has_Per_Object_Constraint       Flag154\n@@ -519,7 +519,7 @@ package body Einfo is\n    --    Is_Safe_To_Reevaluate           Flag249\n    --    Has_Predicates                  Flag250\n \n-   --    Body_Is_In_ALFA                 Flag251\n+   --    (unused)                        Flag251\n    --    Is_Processed_Transient          Flag252\n    --    Is_Postcondition_Proc           Flag253\n    --    (unused)                        Flag254\n@@ -652,12 +652,6 @@ package body Einfo is\n       return Node19 (Id);\n    end Body_Entity;\n \n-   function Body_Is_In_ALFA (Id : E) return B is\n-   begin\n-      pragma Assert (Is_Subprogram (Id) or else Is_Generic_Subprogram (Id));\n-      return Flag251 (Id);\n-   end Body_Is_In_ALFA;\n-\n    function Body_Needed_For_SAL (Id : E) return B is\n    begin\n       pragma Assert\n@@ -1854,11 +1848,6 @@ package body Einfo is\n       return Flag24 (Id);\n    end Is_Imported;\n \n-   function Is_In_ALFA (Id : E) return B is\n-   begin\n-      return Flag151 (Id);\n-   end Is_In_ALFA;\n-\n    function Is_Inlined (Id : E) return B is\n    begin\n       return Flag11 (Id);\n@@ -3126,12 +3115,6 @@ package body Einfo is\n       Set_Node19 (Id, V);\n    end Set_Body_Entity;\n \n-   procedure Set_Body_Is_In_ALFA (Id : E; V : B := True) is\n-   begin\n-      pragma Assert (Is_Subprogram (Id) or else Is_Generic_Subprogram (Id));\n-      Set_Flag251 (Id, V);\n-   end Set_Body_Is_In_ALFA;\n-\n    procedure Set_Body_Needed_For_SAL (Id : E; V : B := True) is\n    begin\n       pragma Assert\n@@ -4374,11 +4357,6 @@ package body Einfo is\n       Set_Flag24 (Id, V);\n    end Set_Is_Imported;\n \n-   procedure Set_Is_In_ALFA (Id : E; V : B := True) is\n-   begin\n-      Set_Flag151 (Id, V);\n-   end Set_Is_In_ALFA;\n-\n    procedure Set_Is_Inlined (Id : E; V : B := True) is\n    begin\n       Set_Flag11 (Id, V);\n@@ -5899,41 +5877,6 @@ package body Einfo is\n       end if;\n    end First_Formal_With_Extras;\n \n-   ---------------------\n-   -- Formal_Proof_On --\n-   ---------------------\n-\n-   function Formal_Proof_On (Id : E) return B is\n-      N    : Node_Id;\n-      Arg1 : Node_Id;\n-      Arg2 : Node_Id;\n-\n-   begin\n-      pragma Assert (Is_Subprogram (Id) or else Is_Generic_Subprogram (Id));\n-\n-      N := First_Rep_Item (Id);\n-      while Present (N) loop\n-         if Nkind (N) = N_Pragma\n-           and then Get_Pragma_Id (Pragma_Name (N)) = Pragma_Annotate\n-           and then Present (Pragma_Argument_Associations (N))\n-           and then List_Length (Pragma_Argument_Associations (N)) = 2\n-         then\n-            Arg1 := First (Pragma_Argument_Associations (N));\n-            Arg2 := Next (Arg1);\n-\n-            if Chars (Get_Pragma_Arg (Arg1)) = Name_Formal_Proof\n-              and then Chars (Get_Pragma_Arg (Arg2)) = Name_On\n-            then\n-               return True;\n-            end if;\n-         end if;\n-\n-         Next_Rep_Item (N);\n-      end loop;\n-\n-      return False;\n-   end Formal_Proof_On;\n-\n    -------------------------------------\n    -- Get_Attribute_Definition_Clause --\n    -------------------------------------\n@@ -7449,7 +7392,6 @@ package body Einfo is\n       end if;\n \n       W (\"Address_Taken\",                   Flag104 (Id));\n-      W (\"Body_Is_In_ALFA\",                 Flag251 (Id));\n       W (\"Body_Needed_For_SAL\",             Flag40  (Id));\n       W (\"C_Pass_By_Copy\",                  Flag125 (Id));\n       W (\"Can_Never_Be_Null\",               Flag38  (Id));\n@@ -7587,7 +7529,6 @@ package body Einfo is\n       W (\"Is_Hidden_Open_Scope\",            Flag171 (Id));\n       W (\"Is_Immediately_Visible\",          Flag7   (Id));\n       W (\"Is_Imported\",                     Flag24  (Id));\n-      W (\"Is_In_ALFA\",                      Flag151 (Id));\n       W (\"Is_Inlined\",                      Flag11  (Id));\n       W (\"Is_Instantiated\",                 Flag126 (Id));\n       W (\"Is_Interface\",                    Flag186 (Id));"}, {"sha": "c870728026a6331a90e4bd4938a41b4f459d49bb", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -486,11 +486,6 @@ package Einfo is\n --       Present in package and generic package entities, points to the\n --       corresponding package body entity if one is present.\n \n---    Body_Is_In_ALFA (Flag251)\n---       Present in subprogram entities. Set for subprograms whose body belongs\n---       to the ALFA subset, which are eligible for formal verification through\n---       SPARK or Why tool-sets.\n-\n --    Body_Needed_For_SAL (Flag40)\n --       Present in package and subprogram entities that are compilation\n --       units. Indicates that the source for the body must be included\n@@ -1272,11 +1267,6 @@ package Einfo is\n --       Float_Rep_Kind. Together with the Digits_Value uniquely defines\n --       the floating-point representation to be used.\n \n---    Formal_Proof_On (synthesized)\n---       Applies to subprogram and generic subprogram entities. Returns True if\n---       the Rep_Item chain for the subprogram has a pragma Annotate which\n---       forces formal proof on the subprogram's body.\n-\n --    Freeze_Node (Node7)\n --       Present in all entities. If there is an associated freeze node for\n --       the entity, this field references this freeze node. If no freeze\n@@ -2279,13 +2269,6 @@ package Einfo is\n --    Is_Incomplete_Type (synthesized)\n --       Applies to all entities, true for incomplete types and subtypes\n \n---    Is_In_ALFA (Flag151)\n---       Present in all entities. Set for entities that belong to the ALFA\n---       subset, which are eligible for formal verification through SPARK or\n---       Why tool-sets. For a subprogram, this only means that a call to the\n---       subprogram can be formally analyzed. Another flag, Body_Is_In_ALFA,\n---       defines which subprograms can be formally analyzed.\n-\n --    Is_Inlined (Flag11)\n --       Present in all entities. Set for functions and procedures which are\n --       to be inlined. For subprograms created during expansion, this flag\n@@ -5997,7 +5980,6 @@ package Einfo is\n    function Barrier_Function                    (Id : E) return N;\n    function Block_Node                          (Id : E) return N;\n    function Body_Entity                         (Id : E) return E;\n-   function Body_Is_In_ALFA                     (Id : E) return B;\n    function Body_Needed_For_SAL                 (Id : E) return B;\n    function CR_Discriminant                     (Id : E) return E;\n    function C_Pass_By_Copy                      (Id : E) return B;\n@@ -6205,7 +6187,6 @@ package Einfo is\n    function Is_Hidden_Open_Scope                (Id : E) return B;\n    function Is_Immediately_Visible              (Id : E) return B;\n    function Is_Imported                         (Id : E) return B;\n-   function Is_In_ALFA                          (Id : E) return B;\n    function Is_Inlined                          (Id : E) return B;\n    function Is_Interface                        (Id : E) return B;\n    function Is_Instantiated                     (Id : E) return B;\n@@ -6452,7 +6433,6 @@ package Einfo is\n    function First_Component_Or_Discriminant     (Id : E) return E;\n    function First_Formal                        (Id : E) return E;\n    function First_Formal_With_Extras            (Id : E) return E;\n-   function Formal_Proof_On                     (Id : E) return B;\n    function Has_Attach_Handler                  (Id : E) return B;\n    function Has_Entries                         (Id : E) return B;\n    function Has_Foreign_Convention              (Id : E) return B;\n@@ -6589,7 +6569,6 @@ package Einfo is\n    procedure Set_Barrier_Function                (Id : E; V : N);\n    procedure Set_Block_Node                      (Id : E; V : N);\n    procedure Set_Body_Entity                     (Id : E; V : E);\n-   procedure Set_Body_Is_In_ALFA                 (Id : E; V : B := True);\n    procedure Set_Body_Needed_For_SAL             (Id : E; V : B := True);\n    procedure Set_CR_Discriminant                 (Id : E; V : E);\n    procedure Set_C_Pass_By_Copy                  (Id : E; V : B := True);\n@@ -6800,7 +6779,6 @@ package Einfo is\n    procedure Set_Is_Hidden_Open_Scope            (Id : E; V : B := True);\n    procedure Set_Is_Immediately_Visible          (Id : E; V : B := True);\n    procedure Set_Is_Imported                     (Id : E; V : B := True);\n-   procedure Set_Is_In_ALFA                      (Id : E; V : B := True);\n    procedure Set_Is_Inlined                      (Id : E; V : B := True);\n    procedure Set_Is_Interface                    (Id : E; V : B := True);\n    procedure Set_Is_Instantiated                 (Id : E; V : B := True);\n@@ -7286,7 +7264,6 @@ package Einfo is\n    pragma Inline (Barrier_Function);\n    pragma Inline (Block_Node);\n    pragma Inline (Body_Entity);\n-   pragma Inline (Body_Is_In_ALFA);\n    pragma Inline (Body_Needed_For_SAL);\n    pragma Inline (CR_Discriminant);\n    pragma Inline (C_Pass_By_Copy);\n@@ -7522,7 +7499,6 @@ package Einfo is\n    pragma Inline (Is_Imported);\n    pragma Inline (Is_Incomplete_Or_Private_Type);\n    pragma Inline (Is_Incomplete_Type);\n-   pragma Inline (Is_In_ALFA);\n    pragma Inline (Is_Inlined);\n    pragma Inline (Is_Interface);\n    pragma Inline (Is_Instantiated);\n@@ -7731,7 +7707,6 @@ package Einfo is\n    pragma Inline (Set_Barrier_Function);\n    pragma Inline (Set_Block_Node);\n    pragma Inline (Set_Body_Entity);\n-   pragma Inline (Set_Body_Is_In_ALFA);\n    pragma Inline (Set_Body_Needed_For_SAL);\n    pragma Inline (Set_CR_Discriminant);\n    pragma Inline (Set_C_Pass_By_Copy);\n@@ -7941,7 +7916,6 @@ package Einfo is\n    pragma Inline (Set_Is_Hidden_Open_Scope);\n    pragma Inline (Set_Is_Immediately_Visible);\n    pragma Inline (Set_Is_Imported);\n-   pragma Inline (Set_Is_In_ALFA);\n    pragma Inline (Set_Is_Inlined);\n    pragma Inline (Set_Is_Interface);\n    pragma Inline (Set_Is_Instantiated);"}, {"sha": "ff14df9dd7ccf525de6fee4f86df231a542006ea", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -477,8 +477,6 @@ package body Prj.Env is\n       File      : File_Descriptor := Invalid_FD;\n \n       Current_Naming  : Naming_Id;\n-      Iter            : Source_Iterator;\n-      Source          : Source_Id;\n \n       procedure Check\n         (Project : Project_Id;\n@@ -509,11 +507,13 @@ package body Prj.Env is\n          In_Tree : Project_Tree_Ref;\n          State   : in out Integer)\n       is\n-         pragma Unreferenced (State, In_Tree);\n+         pragma Unreferenced (State);\n \n          Lang   : constant Language_Ptr :=\n                     Get_Language_From_Name (Project, \"ada\");\n          Naming : Lang_Naming_Data;\n+         Iter   : Source_Iterator;\n+         Source : Source_Id;\n \n       begin\n          if Current_Verbosity = High then\n@@ -528,6 +528,25 @@ package body Prj.Env is\n             return;\n          end if;\n \n+         --  Visit all the files and process those that need an SFN pragma\n+\n+         Iter := For_Each_Source (In_Tree, Project);\n+         while Element (Iter) /= No_Source loop\n+            Source := Element (Iter);\n+\n+            Debug_Output (\"MANU Source index=\" & Source.Index'Img,\n+                          Name_Id (Source.File));\n+\n+            if Source.Index >= 1\n+              and then not Source.Locally_Removed\n+              and then Source.Unit /= null\n+            then\n+               Put (Source);\n+            end if;\n+\n+            Next (Iter);\n+         end loop;\n+\n          Naming := Lang.Config.Naming_Data;\n \n          --  Is the naming scheme of this project one that we know?\n@@ -684,6 +703,7 @@ package body Prj.Env is\n    --  Start of processing for Create_Config_Pragmas_File\n \n    begin\n+      Debug_Output (\"MANU Create_Config_Pragmas_File\", For_Project.Name);\n       if not For_Project.Config_Checked then\n          Naming_Table.Init (Namings);\n \n@@ -692,22 +712,6 @@ package body Prj.Env is\n          Check_Imported_Projects\n            (For_Project, In_Tree, Dummy, Imported_First => False);\n \n-         --  Visit all the files and process those that need an SFN pragma\n-\n-         Iter := For_Each_Source (In_Tree, For_Project);\n-         while Element (Iter) /= No_Source loop\n-            Source := Element (Iter);\n-\n-            if Source.Index >= 1\n-              and then not Source.Locally_Removed\n-              and then Source.Unit /= null\n-            then\n-               Put (Source);\n-            end if;\n-\n-            Next (Iter);\n-         end loop;\n-\n          --  If there are no non standard naming scheme, issue the GNAT\n          --  standard naming scheme. This will tell the compiler that\n          --  a project file is used and will forbid any pragma SFN."}, {"sha": "30b5585448d81818154dc6bebdac7b752c2e7805", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -434,7 +434,6 @@ package body Sem_Ch11 is\n       P              : Node_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram (\"raise statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"raise statement is not allowed\", N);\n       Check_Unreachable_Code (N);\n "}, {"sha": "84cd62db2c69d458dfa6f9815f4c7c21b615ce86", "filename": "gcc/ada/sem_ch2.adb", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch2.adb?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -24,14 +24,12 @@\n ------------------------------------------------------------------------------\n \n with Atree;    use Atree;\n-with Einfo;    use Einfo;\n with Errout;   use Errout;\n with Namet;    use Namet;\n with Opt;      use Opt;\n with Restrict; use Restrict;\n with Rident;   use Rident;\n with Sem_Ch8;  use Sem_Ch8;\n-with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n with Stand;    use Stand;\n with Uintp;    use Uintp;\n@@ -76,13 +74,6 @@ package body Sem_Ch2 is\n          return;\n       else\n          Find_Direct_Name (N);\n-\n-         if Present (Entity (N))\n-           and then Is_Object (Entity (N))\n-           and then not Is_In_ALFA (Entity (N))\n-         then\n-            Mark_Non_ALFA_Subprogram (\"object is not in ALFA\", N);\n-         end if;\n       end if;\n    end Analyze_Identifier;\n "}, {"sha": "3f09dd63aae59f365bde565b349cde516f3b6289", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -3057,17 +3057,6 @@ package body Sem_Ch3 is\n \n       Act_T := T;\n \n-      --  The object is in ALFA if-and-only-if its type is in ALFA and it is\n-      --  not aliased.\n-\n-      if not Is_In_ALFA (T) then\n-         Mark_Non_ALFA_Subprogram (\"object type is not in ALFA\", N);\n-      elsif Aliased_Present (N) then\n-         Mark_Non_ALFA_Subprogram (\"ALIASED is not in ALFA\", N);\n-      else\n-         Set_Is_In_ALFA (Id);\n-      end if;\n-\n       --  These checks should be performed before the initialization expression\n       --  is considered, so that the Object_Definition node is still the same\n       --  as in source code.\n@@ -4661,7 +4650,6 @@ package body Sem_Ch3 is\n       Nb_Index      : Nat;\n       P             : constant Node_Id := Parent (Def);\n       Priv          : Entity_Id;\n-      T_In_ALFA     : Boolean := True;\n \n    begin\n       if Nkind (Def) = N_Constrained_Array_Definition then\n@@ -4742,12 +4730,6 @@ package body Sem_Ch3 is\n \n          Make_Index (Index, P, Related_Id, Nb_Index);\n \n-         if Present (Etype (Index))\n-           and then not Is_In_ALFA (Etype (Index))\n-         then\n-            T_In_ALFA := False;\n-         end if;\n-\n          --  Check error of subtype with predicate for index type\n \n          Bad_Predicated_Subtype_Use\n@@ -4769,18 +4751,10 @@ package body Sem_Ch3 is\n             Check_SPARK_Restriction (\"subtype mark required\", Component_Typ);\n          end if;\n \n-         if Present (Element_Type)\n-           and then not Is_In_ALFA (Element_Type)\n-         then\n-            T_In_ALFA := False;\n-         end if;\n-\n       --  Ada 2005 (AI-230): Access Definition case\n \n       else pragma Assert (Present (Access_Definition (Component_Def)));\n \n-         T_In_ALFA := False;\n-\n          --  Indicate that the anonymous access type is created by the\n          --  array type declaration.\n \n@@ -4857,12 +4831,6 @@ package body Sem_Ch3 is\n                                (Implicit_Base, Finalize_Storage_Only\n                                                         (Element_Type));\n \n-         --  Final check for static bounds on array\n-\n-         if not Has_Static_Array_Bounds (T) then\n-            T_In_ALFA := False;\n-         end if;\n-\n       --  Unconstrained array case\n \n       else\n@@ -4887,8 +4855,6 @@ package body Sem_Ch3 is\n \n       Set_Component_Type (Base_Type (T), Element_Type);\n       Set_Packed_Array_Type (T, Empty);\n-      Set_Is_In_ALFA (T, T_In_ALFA);\n-      Set_Is_In_ALFA (Base_Type (T), T_In_ALFA);\n \n       if Aliased_Present (Component_Definition (Def)) then\n          Check_SPARK_Restriction\n@@ -11599,14 +11565,6 @@ package body Sem_Ch3 is\n       C : constant Node_Id   := Constraint (S);\n \n    begin\n-      --  By default, consider that the enumeration subtype is in ALFA if the\n-      --  entity of its subtype mark is in ALFA. This is reversed later if the\n-      --  range of the subtype is not static.\n-\n-      if Is_In_ALFA (T) then\n-         Set_Is_In_ALFA (Def_Id);\n-      end if;\n-\n       Set_Ekind (Def_Id, E_Enumeration_Subtype);\n \n       Set_First_Literal     (Def_Id, First_Literal (Base_Type (T)));\n@@ -11829,14 +11787,6 @@ package body Sem_Ch3 is\n       C : constant Node_Id   := Constraint (S);\n \n    begin\n-      --  By default, consider that the integer subtype is in ALFA if the\n-      --  entity of its subtype mark is in ALFA. This is reversed later if the\n-      --  range of the subtype is not static.\n-\n-      if Is_In_ALFA (T) then\n-         Set_Is_In_ALFA (Def_Id);\n-      end if;\n-\n       Set_Scalar_Range_For_Subtype (Def_Id, Range_Expression (C), T);\n \n       if Is_Modular_Integer_Type (T) then\n@@ -14586,12 +14536,6 @@ package body Sem_Ch3 is\n       Set_Enum_Esize      (T);\n       Set_Enum_Pos_To_Rep (T, Empty);\n \n-      --  Enumeration type is in ALFA only if it is not a character type\n-\n-      if not Is_Character_Type (T) then\n-         Set_Is_In_ALFA (T);\n-      end if;\n-\n       --  Set Discard_Names if configuration pragma set, or if there is\n       --  a parameterless pragma in the current declarative region\n \n@@ -16550,19 +16494,6 @@ package body Sem_Ch3 is\n          then\n             Set_Is_Non_Static_Subtype (Def_Id);\n          end if;\n-\n-         --  By default, consider that the subtype is in ALFA if its base type\n-         --  is in ALFA.\n-\n-         Set_Is_In_ALFA (Def_Id, Is_In_ALFA (Base_Type (Def_Id)));\n-\n-         --  In ALFA, all subtypes should have a static range\n-\n-         if Nkind (R) = N_Range\n-           and then not Is_Static_Range (R)\n-         then\n-            Set_Is_In_ALFA (Def_Id, False);\n-         end if;\n       end if;\n \n       --  Final step is to label the index with this constructed type\n@@ -19539,14 +19470,6 @@ package body Sem_Ch3 is\n       Set_Ekind (Def_Id, E_Void);\n       Process_Range_Expr_In_Decl (R, Subt);\n       Set_Ekind (Def_Id, Kind);\n-\n-      --  In ALFA, all subtypes should have a static range\n-\n-      if Nkind (R) = N_Range\n-        and then not Is_Static_Range (R)\n-      then\n-         Set_Is_In_ALFA (Def_Id, False);\n-      end if;\n    end Set_Scalar_Range_For_Subtype;\n \n    --------------------------------------------------------\n@@ -19718,7 +19641,6 @@ package body Sem_Ch3 is\n       Set_Scalar_Range   (T, Def);\n       Set_RM_Size        (T, UI_From_Int (Minimum_Size (T)));\n       Set_Is_Constrained (T);\n-      Set_Is_In_ALFA     (T);\n    end Signed_Integer_Type_Declaration;\n \n end Sem_Ch3;"}, {"sha": "5850c3c59e4aa6bde4b656798a2485d7d285ac0c", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -350,8 +350,6 @@ package body Sem_Ch4 is\n \n    procedure Analyze_Aggregate (N : Node_Id) is\n    begin\n-      Mark_Non_ALFA_Subprogram (\"aggregate is not in ALFA\", N);\n-\n       if No (Etype (N)) then\n          Set_Etype (N, Any_Composite);\n       end if;\n@@ -371,7 +369,6 @@ package body Sem_Ch4 is\n       C        : Node_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram (\"allocator is not in ALFA\", N);\n       Check_SPARK_Restriction (\"allocator is not allowed\", N);\n \n       --  Deal with allocator restrictions\n@@ -978,15 +975,6 @@ package body Sem_Ch4 is\n             return;\n          end if;\n \n-         --  If this is an indirect call, or the subprogram called is not in\n-         --  ALFA, then the call is not in ALFA.\n-\n-         if not Is_Subprogram (Nam_Ent) then\n-            Mark_Non_ALFA_Subprogram (\"indirect call is not in ALFA\", N);\n-         elsif not Is_In_ALFA (Nam_Ent) then\n-            Mark_Non_ALFA_Subprogram (\"call to subprogram not in ALFA\", N);\n-         end if;\n-\n          Analyze_One_Call (N, Nam_Ent, True, Success);\n \n          --  If this is an indirect call, the return type of the access_to\n@@ -1363,8 +1351,6 @@ package body Sem_Ch4 is\n       L  : Node_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram (\"concatenation is not in ALFA\", N);\n-\n       Candidate_Type := Empty;\n \n       --  The following code is equivalent to:\n@@ -1517,26 +1503,6 @@ package body Sem_Ch4 is\n \n       Else_Expr := Next (Then_Expr);\n \n-      --  In ALFA, boolean conditional expressions are allowed:\n-      --    * if they have no ELSE part, in which case the expression is\n-      --      equivalent to\n-\n-      --        NOT Condition OR ELSE Then_Expr\n-\n-      --    * in pre- and postconditions, where the Condition cannot have side-\n-      --      effects (in ALFA) and thus the expression is equivalent to\n-\n-      --        (Condition AND THEN Then_Expr)\n-      --          and (NOT Condition AND THEN Then_Expr)\n-\n-      --  Non-boolean conditional expressions are marked as not in ALFA during\n-      --  resolution.\n-\n-      if Present (Else_Expr) and then not In_Pre_Post_Expression then\n-         Mark_Non_ALFA_Subprogram\n-           (\"this form of conditional expression is not in ALFA\", N);\n-      end if;\n-\n       if Comes_From_Source (N) then\n          Check_Compiler_Unit (N);\n       end if;\n@@ -1733,7 +1699,6 @@ package body Sem_Ch4 is\n    --  Start of processing for Analyze_Explicit_Dereference\n \n    begin\n-      Mark_Non_ALFA_Subprogram (\"explicit dereference is not in ALFA\", N);\n       Check_SPARK_Restriction (\"explicit dereference is not allowed\", N);\n \n       Analyze (P);\n@@ -2616,7 +2581,6 @@ package body Sem_Ch4 is\n \n    procedure Analyze_Null (N : Node_Id) is\n    begin\n-      Mark_Non_ALFA_Subprogram (\"null is not in ALFA\", N);\n       Check_SPARK_Restriction (\"null is not allowed\", N);\n \n       Set_Etype (N, Any_Access);\n@@ -3248,8 +3212,6 @@ package body Sem_Ch4 is\n       T    : Entity_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram (\"qualified expression is not in ALFA\", N);\n-\n       Analyze_Expression (Expr);\n \n       Set_Etype (N, Any_Type);\n@@ -3308,7 +3270,6 @@ package body Sem_Ch4 is\n       Iterator : Node_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram (\"quantified expression is not in ALFA\", N);\n       Check_SPARK_Restriction (\"quantified expression is not allowed\", N);\n \n       Set_Etype  (Ent,  Standard_Void_Type);\n@@ -3474,8 +3435,6 @@ package body Sem_Ch4 is\n       Acc_Type : Entity_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram (\"reference is not in ALFA\", N);\n-\n       Analyze (P);\n \n       --  An interesting error check, if we take the 'Reference of an object\n@@ -4340,7 +4299,6 @@ package body Sem_Ch4 is\n    --  Start of processing for Analyze_Slice\n \n    begin\n-      Mark_Non_ALFA_Subprogram (\"slice is not in ALFA\", N);\n       Check_SPARK_Restriction (\"slice is not allowed\", N);\n \n       Analyze (P);\n@@ -4406,14 +4364,6 @@ package body Sem_Ch4 is\n       Analyze_Expression (Expr);\n       Validate_Remote_Type_Type_Conversion (N);\n \n-      --  Type conversion between scalar types are allowed in ALFA. All other\n-      --  type conversions are not allowed.\n-\n-      if not (Is_Scalar_Type (Etype (Expr)) and then Is_Scalar_Type (T)) then\n-         Mark_Non_ALFA_Subprogram\n-           (\"only type conversion between scalar types is in ALFA\", N);\n-      end if;\n-\n       --  Only remaining step is validity checks on the argument. These\n       --  are skipped if the conversion does not come from the source.\n \n@@ -4523,8 +4473,6 @@ package body Sem_Ch4 is\n \n    procedure Analyze_Unchecked_Type_Conversion (N : Node_Id) is\n    begin\n-      Mark_Non_ALFA_Subprogram\n-        (\"unchecked type conversion is not in ALFA\", N);\n       Find_Type (Subtype_Mark (N));\n       Analyze_Expression (Expression (N));\n       Set_Etype (N, Entity (Subtype_Mark (N)));"}, {"sha": "2716d5817cb7f50c36f3a03484c7bff21e06d497", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 5, "deletions": 36, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -1113,8 +1113,6 @@ package body Sem_Ch5 is\n       if Others_Present\n         and then List_Length (Alternatives (N)) = 1\n       then\n-         Mark_Non_ALFA_Subprogram\n-           (\"OTHERS as unique case alternative is not in ALFA\", N);\n          Check_SPARK_Restriction\n            (\"OTHERS as unique case alternative is not allowed\", N);\n       end if;\n@@ -1164,7 +1162,7 @@ package body Sem_Ch5 is\n    --  loop. Otherwise there must be an innermost open loop on the stack, to\n    --  which the statement implicitly refers.\n \n-   --  Additionally, in formal mode:\n+   --  Additionally, in SPARK mode:\n \n    --    The exit can only name the closest enclosing loop;\n \n@@ -1196,9 +1194,6 @@ package body Sem_Ch5 is\n \n          else\n             if Has_Loop_In_Inner_Open_Scopes (U_Name) then\n-               Mark_Non_ALFA_Subprogram\n-                 (\"exit label must name the closest enclosing loop\"\n-                   & \" in ALFA\", N);\n                Check_SPARK_Restriction\n                  (\"exit label must name the closest enclosing loop\", N);\n             end if;\n@@ -1245,46 +1240,33 @@ package body Sem_Ch5 is\n \n       if Present (Cond) then\n          if Nkind (Parent (N)) /= N_Loop_Statement then\n-            Mark_Non_ALFA_Subprogram\n-              (\"exit with when clause must be directly in loop\"\n-                & \" in ALFA\", N);\n             Check_SPARK_Restriction\n               (\"exit with when clause must be directly in loop\", N);\n          end if;\n \n       else\n          if Nkind (Parent (N)) /= N_If_Statement then\n             if Nkind (Parent (N)) = N_Elsif_Part then\n-               Mark_Non_ALFA_Subprogram\n-                 (\"exit must be in IF without ELSIF in ALFA\", N);\n                Check_SPARK_Restriction\n                  (\"exit must be in IF without ELSIF\", N);\n             else\n-               Mark_Non_ALFA_Subprogram\n-                 (\"exit must be directly in IF in ALFA\", N);\n                Check_SPARK_Restriction (\"exit must be directly in IF\", N);\n             end if;\n \n          elsif Nkind (Parent (Parent (N))) /= N_Loop_Statement then\n-            Mark_Non_ALFA_Subprogram\n-              (\"exit must be in IF directly in loop in ALFA\", N);\n             Check_SPARK_Restriction\n               (\"exit must be in IF directly in loop\", N);\n \n-            --  First test the presence of ELSE, so that an exit in an ELSE\n-            --  leads to an error mentioning the ELSE.\n+         --  First test the presence of ELSE, so that an exit in an ELSE leads\n+         --  to an error mentioning the ELSE.\n \n          elsif Present (Else_Statements (Parent (N))) then\n-            Mark_Non_ALFA_Subprogram\n-              (\"exit must be in IF without ELSE in ALFA\", N);\n             Check_SPARK_Restriction (\"exit must be in IF without ELSE\", N);\n \n-            --  An exit in an ELSIF does not reach here, as it would have been\n-            --  detected in the case (Nkind (Parent (N)) /= N_If_Statement).\n+         --  An exit in an ELSIF does not reach here, as it would have been\n+         --  detected in the case (Nkind (Parent (N)) /= N_If_Statement).\n \n          elsif Present (Elsif_Parts (Parent (N))) then\n-            Mark_Non_ALFA_Subprogram\n-              (\"exit must be in IF without ELSIF in ALFA\", N);\n             Check_SPARK_Restriction (\"exit must be in IF without ELSIF\", N);\n          end if;\n       end if;\n@@ -1313,7 +1295,6 @@ package body Sem_Ch5 is\n       Label_Ent   : Entity_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram (\"goto statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"goto statement is not allowed\", N);\n \n       --  Actual semantic checks\n@@ -2093,18 +2074,6 @@ package body Sem_Ch5 is\n                   Set_Etype (Id, Etype (DS));\n                end if;\n \n-               --  The entity for iterating over a loop is always in ALFA if\n-               --  its type is in ALFA, and it is not an iteration over\n-               --  elements of a container using the OF syntax.\n-\n-               if Is_In_ALFA (Etype (Id))\n-                 and then\n-                   (No (Iterator_Specification (N))\n-                     or else not Of_Present (Iterator_Specification (N)))\n-               then\n-                  Set_Is_In_ALFA (Id);\n-               end if;\n-\n                --  Treat a range as an implicit reference to the type, to\n                --  inhibit spurious warnings.\n "}, {"sha": "b3df5cf0f3d961fc66d1a9e2a74e99bc34a85df6", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 4, "deletions": 48, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -664,21 +664,18 @@ package body Sem_Ch6 is\n             Check_Limited_Return (Expr);\n          end if;\n \n-         --  RETURN only allowed in SPARK is as the last statement function\n+         --  RETURN only allowed in SPARK as the last statement in function\n \n          if Nkind (Parent (N)) /= N_Handled_Sequence_Of_Statements\n            and then\n              (Nkind (Parent (Parent (N))) /= N_Subprogram_Body\n                or else Present (Next (N)))\n          then\n-            Mark_Non_ALFA_Subprogram\n-              (\"RETURN should be the last statement in ALFA\", N);\n             Check_SPARK_Restriction\n               (\"RETURN should be the last statement in function\", N);\n          end if;\n \n       else\n-         Mark_Non_ALFA_Subprogram (\"extended RETURN is not in ALFA\", N);\n          Check_SPARK_Restriction (\"extended RETURN is not allowed\", N);\n \n          --  Analyze parts specific to extended_return_statement:\n@@ -1491,13 +1488,6 @@ package body Sem_Ch6 is\n             Typ := Entity (Result_Definition (N));\n             Set_Etype (Designator, Typ);\n \n-            --  If the result type of a subprogram is not in ALFA, then the\n-            --  subprogram is not in ALFA.\n-\n-            if not Is_In_ALFA (Typ) then\n-               Set_Is_In_ALFA (Designator, False);\n-            end if;\n-\n             --  Unconstrained array as result is not allowed in SPARK\n \n             if Is_Array_Type (Typ)\n@@ -1932,11 +1922,11 @@ package body Sem_Ch6 is\n             Check_Returns (HSS, 'P', Missing_Ret, Spec_Id);\n          end if;\n \n-         --  Special checks in formal mode\n+         --  Special checks in SPARK mode\n \n          if Nkind (Body_Spec) = N_Function_Specification then\n \n-            --  In formal mode, last statement of a function should be a return\n+            --  In SPARK mode, last statement of a function should be a return\n \n             declare\n                Stat : constant Node_Id := Last_Source_Statement (HSS);\n@@ -1945,13 +1935,12 @@ package body Sem_Ch6 is\n                  and then not Nkind_In (Stat, N_Simple_Return_Statement,\n                                               N_Extended_Return_Statement)\n                then\n-                  Set_Body_Is_In_ALFA (Id, False);\n                   Check_SPARK_Restriction\n                     (\"last statement in function should be RETURN\", Stat);\n                end if;\n             end;\n \n-         --  In formal mode, verify that a procedure has no return\n+         --  In SPARK mode, verify that a procedure has no return\n \n          elsif Nkind (Body_Spec) = N_Procedure_Specification then\n             if Present (Spec_Id) then\n@@ -1964,7 +1953,6 @@ package body Sem_Ch6 is\n             --  borrow the Check_Returns procedure here ???\n \n             if Return_Present (Id) then\n-               Set_Body_Is_In_ALFA (Id, False);\n                Check_SPARK_Restriction\n                  (\"procedure should not have RETURN\", N);\n             end if;\n@@ -2282,24 +2270,6 @@ package body Sem_Ch6 is\n          end if;\n       end if;\n \n-      --  By default, consider that the subprogram body is in ALFA if the spec\n-      --  is in ALFA. This is reversed later if some expression or statement is\n-      --  not in ALFA.\n-\n-      declare\n-         Id : Entity_Id;\n-      begin\n-         if Present (Spec_Id) then\n-            Id := Spec_Id;\n-         else\n-            Id := Body_Id;\n-         end if;\n-\n-         if Is_In_ALFA (Id) then\n-            Set_Body_Is_In_ALFA (Id);\n-         end if;\n-      end;\n-\n       --  Do not inline any subprogram that contains nested subprograms, since\n       --  the backend inlining circuit seems to generate uninitialized\n       --  references in this case. We know this happens in the case of front\n@@ -2531,7 +2501,6 @@ package body Sem_Ch6 is\n          Set_Ekind (Body_Id, E_Subprogram_Body);\n          Set_Scope (Body_Id, Scope (Spec_Id));\n          Set_Is_Obsolescent (Body_Id, Is_Obsolescent (Spec_Id));\n-         Set_Is_In_ALFA (Body_Id, False);\n \n       --  Case of subprogram body with no previous spec\n \n@@ -3177,11 +3146,6 @@ package body Sem_Ch6 is\n    --  Start of processing for Analyze_Subprogram_Specification\n \n    begin\n-      --  By default, consider that the subprogram spec is in ALFA. This is\n-      --  reversed later if some parameter or result is not in ALFA.\n-\n-      Set_Is_In_ALFA (Designator);\n-\n       --  User-defined operator is not allowed in SPARK, except as a renaming\n \n       if Nkind (Defining_Unit_Name (N)) = N_Defining_Operator_Symbol\n@@ -8905,14 +8869,6 @@ package body Sem_Ch6 is\n \n          Set_Etype (Formal, Formal_Type);\n \n-         --  The parameter is in ALFA if-and-only-if its type is in ALFA\n-\n-         if Is_In_ALFA (Formal_Type) then\n-            Set_Is_In_ALFA (Formal);\n-         else\n-            Mark_Non_ALFA_Subprogram (\"formal is not in ALFA\", Formal);\n-         end if;\n-\n          Default := Expression (Param_Spec);\n \n          if Present (Default) then"}, {"sha": "399d36e8771ca9603301f24dccaab92cd7057b71", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -101,7 +101,6 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"abort statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"abort statement is not allowed\", N);\n \n       T_Name := First (Names (N));\n@@ -140,7 +139,6 @@ package body Sem_Ch9 is\n    procedure Analyze_Accept_Alternative (N : Node_Id) is\n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"accept is not in ALFA\", N);\n \n       if Present (Pragmas_Before (N)) then\n          Analyze_List (Pragmas_Before (N));\n@@ -174,7 +172,6 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"accept statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"accept statement is not allowed\", N);\n \n       --  Entry name is initialized to Any_Id. It should get reset to the\n@@ -406,7 +403,6 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"select statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"select statement is not allowed\", N);\n       Check_Restriction (Max_Asynchronous_Select_Nesting, N);\n       Check_Restriction (No_Select_Statements, N);\n@@ -453,7 +449,6 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"select statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"select statement is not allowed\", N);\n       Check_Restriction (No_Select_Statements, N);\n \n@@ -500,7 +495,6 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"delay is not in ALFA\", N);\n       Check_Restriction (No_Delay, N);\n \n       if Present (Pragmas_Before (N)) then\n@@ -552,7 +546,6 @@ package body Sem_Ch9 is\n       E : constant Node_Id := Expression (N);\n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"delay statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"delay statement is not allowed\", N);\n       Check_Restriction (No_Relative_Delay, N);\n       Check_Restriction (No_Delay, N);\n@@ -571,7 +564,6 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"delay statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"delay statement is not allowed\", N);\n       Check_Restriction (No_Delay, N);\n       Check_Potentially_Blocking_Operation (N);\n@@ -600,7 +592,6 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"entry is not in ALFA\", N);\n \n       --  Entry_Name is initialized to Any_Id. It should get reset to the\n       --  matching entry entity. An error is signalled if it is not reset\n@@ -833,7 +824,6 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"entry is not in ALFA\", N);\n \n       if Present (Index) then\n          Analyze (Index);\n@@ -861,7 +851,6 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"entry call is not in ALFA\", N);\n       Check_SPARK_Restriction (\"entry call is not allowed\", N);\n \n       if Present (Pragmas_Before (N)) then\n@@ -897,7 +886,6 @@ package body Sem_Ch9 is\n    begin\n       Generate_Definition (Def_Id);\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"entry is not in ALFA\", N);\n \n       --  Case of no discrete subtype definition\n \n@@ -967,7 +955,6 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"entry is not in ALFA\", N);\n       Analyze (Def);\n \n       --  There is no elaboration of the entry index specification. Therefore,\n@@ -1009,7 +996,6 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"protected body is not in ALFA\", N);\n       Set_Ekind (Body_Id, E_Protected_Body);\n       Spec_Id := Find_Concurrent_Spec (Body_Id);\n \n@@ -1128,7 +1114,6 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"protected definition is not in ALFA\", N);\n       Check_SPARK_Restriction (\"protected definition is not allowed\", N);\n       Analyze_Declarations (Visible_Declarations (N));\n \n@@ -1182,7 +1167,6 @@ package body Sem_Ch9 is\n       end if;\n \n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"protected type is not in ALFA\", N);\n       Check_Restriction (No_Protected_Types, N);\n \n       T := Find_Type_Name (N);\n@@ -1324,7 +1308,6 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"requeue statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"requeue statement is not allowed\", N);\n       Check_Restriction (No_Requeue_Statements, N);\n       Check_Unreachable_Code (N);\n@@ -1599,7 +1582,6 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"select statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"select statement is not allowed\", N);\n       Check_Restriction (No_Select_Statements, N);\n \n@@ -1720,7 +1702,6 @@ package body Sem_Ch9 is\n    begin\n       Generate_Definition (Id);\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"protected object is not in ALFA\", N);\n \n       --  The node is rewritten as a protected type declaration, in exact\n       --  analogy with what is done with single tasks.\n@@ -1782,7 +1763,6 @@ package body Sem_Ch9 is\n    begin\n       Generate_Definition (Id);\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"task is not in ALFA\", N);\n \n       --  The node is rewritten as a task type declaration, followed by an\n       --  object declaration of that anonymous task type.\n@@ -1860,7 +1840,6 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"task body is not in ALFA\", N);\n       Set_Ekind (Body_Id, E_Task_Body);\n       Set_Scope (Body_Id, Current_Scope);\n       Spec_Id := Find_Concurrent_Spec (Body_Id);\n@@ -1981,7 +1960,6 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"task definition is not in ALFA\", N);\n       Check_SPARK_Restriction (\"task definition is not allowed\", N);\n \n       if Present (Visible_Declarations (N)) then\n@@ -2016,7 +1994,6 @@ package body Sem_Ch9 is\n    begin\n       Check_Restriction (No_Tasking, N);\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"task type is not in ALFA\", N);\n       T := Find_Type_Name (N);\n       Generate_Definition (T);\n \n@@ -2122,7 +2099,6 @@ package body Sem_Ch9 is\n    procedure Analyze_Terminate_Alternative (N : Node_Id) is\n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"terminate is not in ALFA\", N);\n \n       if Present (Pragmas_Before (N)) then\n          Analyze_List (Pragmas_Before (N));\n@@ -2144,7 +2120,6 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"select statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"select statement is not allowed\", N);\n       Check_Restriction (No_Select_Statements, N);\n \n@@ -2181,7 +2156,6 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"triggering statement is not in ALFA\", N);\n \n       if Present (Pragmas_Before (N)) then\n          Analyze_List (Pragmas_Before (N));"}, {"sha": "081c46a2312eb627b5d61f3c2516ef7ef8c2d093", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 56, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -6090,18 +6090,6 @@ package body Sem_Prag is\n          --  external tool and a tool-specific function. These arguments are\n          --  not analyzed.\n \n-         --  The following is a special form used in conjunction with the\n-         --  ALFA subset of Ada:\n-\n-         --    pragma Annotate (Formal_Proof, MODE);\n-         --    MODE ::= On | Off\n-\n-         --    This pragma either forces (mode On) or disables (mode Off)\n-         --    formal verification of the subprogram in which it is added. When\n-         --    formal verification is forced, all violations of the the ALFA\n-         --    subset of Ada present in the subprogram are reported as errors\n-         --    to the user.\n-\n          when Pragma_Annotate => Annotate : declare\n             Arg : Node_Id;\n             Exp : Node_Id;\n@@ -6113,52 +6101,9 @@ package body Sem_Prag is\n             Check_No_Identifiers;\n             Store_Note (N);\n \n-            --  Special processing for Formal_Proof case\n-\n-            if Chars (Get_Pragma_Arg (Arg1)) = Name_Formal_Proof then\n-               if No (Arg2) then\n-                  Error_Pragma_Arg\n-                    (\"missing second argument for pragma%\", Arg1);\n-               end if;\n-\n-               Check_Arg_Count (2);\n-               Check_Arg_Is_One_Of (Arg2, Name_On, Name_Off);\n-\n-               declare\n-                  Cur_Subp : constant Entity_Id := Current_Subprogram;\n-\n-               begin\n-                  if Present (Cur_Subp)\n-                    and then (Is_Subprogram (Cur_Subp)\n-                               or else Is_Generic_Subprogram (Cur_Subp))\n-                  then\n-                     --  Notify user if some ALFA violation occurred before\n-                     --  this point in Cur_Subp. These violations are not\n-                     --  precisly located, but this is better than ignoring\n-                     --  these violations.\n-\n-                     if Chars (Get_Pragma_Arg (Arg2)) = Name_On\n-                       and then (not Is_In_ALFA (Cur_Subp)\n-                                  or else not Body_Is_In_ALFA (Cur_Subp))\n-                     then\n-                        Error_Pragma\n-                          (\"pragma% is placed after violation\"\n-                           & \" of ALFA\");\n-                     end if;\n-\n-                     --  We treat this as a Rep_Item to record it on the rep\n-                     --  item chain for easy location later on.\n-\n-                     Record_Rep_Item (Cur_Subp, N);\n-\n-                  else\n-                     Error_Pragma (\"wrong placement for pragma%\");\n-                  end if;\n-               end;\n-\n             --  Second parameter is optional, it is never analyzed\n \n-            elsif No (Arg2) then\n+            if No (Arg2) then\n                null;\n \n             --  Here if we have a second parameter"}, {"sha": "f91eea49fb90ef17c950263e97b5b80d03a4e989", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -5817,23 +5817,14 @@ package body Sem_Res is\n       --  types or array types except String.\n \n       if Is_Boolean_Type (T) then\n-         Mark_Non_ALFA_Subprogram\n-           (\"ordering operator on boolean type is not in ALFA\", N);\n          Check_SPARK_Restriction\n            (\"comparison is not defined on Boolean type\", N);\n \n-      elsif Is_Array_Type (T) then\n-         Mark_Non_ALFA_Subprogram\n-           (\"ordering operator on array type is not in ALFA\", N);\n-\n-         if Base_Type (T) /= Standard_String then\n-            Check_SPARK_Restriction\n-              (\"comparison is not defined on array types other than String\",\n-               N);\n-         end if;\n-\n-      else\n-         null;\n+      elsif Is_Array_Type (T)\n+        and then Base_Type (T) /= Standard_String\n+      then\n+         Check_SPARK_Restriction\n+           (\"comparison is not defined on array types other than String\", N);\n       end if;\n \n       --  Check comparison on unordered enumeration\n@@ -5883,11 +5874,6 @@ package body Sem_Res is\n          Append_To (Expressions (N), Error);\n       end if;\n \n-      if Root_Type (Typ) /= Standard_Boolean then\n-         Mark_Non_ALFA_Subprogram\n-           (\"non-boolean conditional expression is not in ALFA\", N);\n-      end if;\n-\n       Set_Etype (N, Typ);\n       Eval_Conditional_Expression (N);\n    end Resolve_Conditional_Expression;\n@@ -6688,9 +6674,6 @@ package body Sem_Res is\n          --  operands have equal static bounds.\n \n          if Is_Array_Type (T) then\n-            Mark_Non_ALFA_Subprogram\n-              (\"equality operator on array is not in ALFA\", N);\n-\n             --  Protect call to Matching_Static_Array_Bounds to avoid costly\n             --  operation if not needed.\n \n@@ -7262,9 +7245,6 @@ package body Sem_Res is\n       if Is_Array_Type (B_Typ)\n         and then Nkind (N) in N_Binary_Op\n       then\n-         Mark_Non_ALFA_Subprogram\n-           (\"binary operator on array is not in ALFA\", N);\n-\n          declare\n             Left_Typ  : constant Node_Id := Etype (Left_Opnd (N));\n             Right_Typ : constant Node_Id := Etype (Right_Opnd (N));"}, {"sha": "6616ab8488d93b551a931abe646db18a7179485e", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -141,14 +141,6 @@ package body Sem_Util is\n    --  T is a derived tagged type. Check whether the type extension is null.\n    --  If the parent type is fully initialized, T can be treated as such.\n \n-   procedure Mark_Non_ALFA_Subprogram_Unconditional\n-     (Msg : String;\n-      N   : Node_Id);\n-   --  Perform the action for Mark_Non_ALFA_Subprogram_Body, which allows the\n-   --  latter to be small and inlined. If the subprogram being marked as not in\n-   --  ALFA is annotated with Formal_Proof being On, then an error is issued\n-   --  with message Msg on node N.\n-\n    ------------------------------\n    --  Abstract_Interface_List --\n    ------------------------------\n@@ -2323,60 +2315,6 @@ package body Sem_Util is\n       end if;\n    end Current_Subprogram;\n \n-   ------------------------------\n-   -- Mark_Non_ALFA_Subprogram --\n-   ------------------------------\n-\n-   procedure Mark_Non_ALFA_Subprogram (Msg : String; N : Node_Id) is\n-   begin\n-      --  Isolate marking of the current subprogram body so that the body of\n-      --  Mark_Non_ALFA_Subprogram is small and inlined.\n-\n-      if ALFA_Mode then\n-         Mark_Non_ALFA_Subprogram_Unconditional (Msg, N);\n-      end if;\n-   end Mark_Non_ALFA_Subprogram;\n-\n-   --------------------------------------------\n-   -- Mark_Non_ALFA_Subprogram_Unconditional --\n-   --------------------------------------------\n-\n-   procedure Mark_Non_ALFA_Subprogram_Unconditional\n-     (Msg : String;\n-      N   : Node_Id)\n-   is\n-      Cur_Subp : constant Entity_Id := Current_Subprogram;\n-\n-   begin\n-      if Present (Cur_Subp)\n-        and then (Is_Subprogram (Cur_Subp)\n-                   or else Is_Generic_Subprogram (Cur_Subp))\n-      then\n-         --  If the subprogram has been annotated with Formal_Proof being On,\n-         --  then an error must be issued to notify the user that this\n-         --  subprogram unexpectedly falls outside the ALFA subset.\n-\n-         if Formal_Proof_On (Cur_Subp) then\n-            Error_Msg_F (Msg, N);\n-         end if;\n-\n-         --  If the non-ALFA construct is in a precondition or postcondition,\n-         --  then mark the subprogram as not in ALFA, because neither the\n-         --  subprogram nor its callers can be proved formally.\n-\n-         --  If the non-ALFA construct is in a regular piece of code inside the\n-         --  body of the subprogram, then mark the subprogram body as not in\n-         --  ALFA, because the subprogram cannot be proved formally, but its\n-         --  callers could.\n-\n-         if In_Pre_Post_Expression then\n-            Set_Is_In_ALFA (Cur_Subp, False);\n-         else\n-            Set_Body_Is_In_ALFA (Cur_Subp, False);\n-         end if;\n-      end if;\n-   end Mark_Non_ALFA_Subprogram_Unconditional;\n-\n    ---------------------\n    -- Defining_Entity --\n    ---------------------"}, {"sha": "a282bf6cdad02e715b8d7556a1efbf32feb9831a", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -277,22 +277,6 @@ package Sem_Util is\n    --  Current_Scope is returned. The returned value is Empty if this is called\n    --  from a library package which is not within any subprogram.\n \n-   procedure Mark_Non_ALFA_Subprogram (Msg : String; N : Node_Id);\n-   --  If Current_Subprogram is not Empty, mark either its specification or its\n-   --  body as not being in ALFA.\n-\n-   --  This procedure may be called during the analysis of a precondition or\n-   --  postcondition, as indicated by the flag In_Pre_Post_Expression, or\n-   --  during the analysis of a subprogram's body. In the first case, the\n-   --  specification of Current_Subprogram must be marked as not being in ALFA,\n-   --  as the contract is considered to be part of the specification, so that\n-   --  calls to this subprogram are not in ALFA. In the second case, mark the\n-   --  body as not being in ALFA, which does not prevent the subprogram's\n-   --  specification, and calls to the subprogram, from being in ALFA.\n-\n-   --  If the subprogram being marked as not in ALFA is annotated with\n-   --  Formal_Proof On, then an error is issued with message Msg on node N.\n-\n    function Defining_Entity (N : Node_Id) return Entity_Id;\n    --  Given a declaration N, returns the associated defining entity. If the\n    --  declaration has a specification, the entity is obtained from the"}, {"sha": "d369b40ac73ed028069e3318e1dc75acbbdff382", "filename": "gcc/ada/stand.ads", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fstand.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad05f2e9b874e19cd3d66a3971c1c385959d466a/gcc%2Fada%2Fstand.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstand.ads?ref=ad05f2e9b874e19cd3d66a3971c1c385959d466a", "patch": "@@ -313,35 +313,6 @@ package Stand is\n    Boolean_Literals : array (Boolean) of Entity_Id;\n    --  Entities for the two boolean literals, used by the expander\n \n-   --  Standard types which are in ALFA are associated set to True\n-\n-   Standard_Type_Is_In_ALFA : array (S_Types) of Boolean :=\n-     (S_Boolean             => True,\n-\n-      S_Short_Short_Integer => True,\n-      S_Short_Integer       => True,\n-      S_Integer             => True,\n-      S_Long_Integer        => True,\n-      S_Long_Long_Integer   => True,\n-\n-      S_Natural             => True,\n-      S_Positive            => True,\n-\n-      S_Short_Float         => False,\n-      S_Float               => False,\n-      S_Long_Float          => False,\n-      S_Long_Long_Float     => False,\n-\n-      S_Character           => False,\n-      S_Wide_Character      => False,\n-      S_Wide_Wide_Character => False,\n-\n-      S_String              => False,\n-      S_Wide_String         => False,\n-      S_Wide_Wide_String    => False,\n-\n-      S_Duration            => False);\n-\n    -------------------------------------\n    -- Semantic Phase Special Entities --\n    -------------------------------------"}]}