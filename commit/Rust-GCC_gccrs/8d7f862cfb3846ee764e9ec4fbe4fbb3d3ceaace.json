{"sha": "8d7f862cfb3846ee764e9ec4fbe4fbb3d3ceaace", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ3Zjg2MmNmYjM4NDZlZTc2NGU5ZWM0ZmJlNGZiYjNkM2NlYWFjZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-01-04T11:55:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-01-04T11:55:37Z"}, "message": "tree.c (bound_pmf_p): New fn.\n\n\t* tree.c (bound_pmf_p): New fn.\n\t* typeck.c (build_c_cast): Use it.\n\nFrom-SVN: r24481", "tree": {"sha": "b3574def0395c123dd0c20be1323fd1137b65ee1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3574def0395c123dd0c20be1323fd1137b65ee1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d7f862cfb3846ee764e9ec4fbe4fbb3d3ceaace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d7f862cfb3846ee764e9ec4fbe4fbb3d3ceaace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d7f862cfb3846ee764e9ec4fbe4fbb3d3ceaace", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d7f862cfb3846ee764e9ec4fbe4fbb3d3ceaace/comments", "author": null, "committer": null, "parents": [{"sha": "007e5feae7519fb672d81a2681ff433186758732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/007e5feae7519fb672d81a2681ff433186758732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/007e5feae7519fb672d81a2681ff433186758732"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "d120ab58967fd9ed91736b5a3cbc56f51b4ed093", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d7f862cfb3846ee764e9ec4fbe4fbb3d3ceaace/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d7f862cfb3846ee764e9ec4fbe4fbb3d3ceaace/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8d7f862cfb3846ee764e9ec4fbe4fbb3d3ceaace", "patch": "@@ -1,5 +1,8 @@\n 1999-01-04  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* tree.c (bound_pmf_p): New fn.\n+\t* typeck.c (build_c_cast): Use it.\n+\n \t* decl.c (grok_op_properties): Use same_type_p.\n \n Tue Dec 22 15:09:25 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>"}, {"sha": "b5b73cb631fe4300331b269c162d9e6782807066", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d7f862cfb3846ee764e9ec4fbe4fbb3d3ceaace/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d7f862cfb3846ee764e9ec4fbe4fbb3d3ceaace/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=8d7f862cfb3846ee764e9ec4fbe4fbb3d3ceaace", "patch": "@@ -1338,6 +1338,17 @@ get_first_fn (from)\n   return OVL_CURRENT (from);\n }\n \n+/* Returns nonzero if T is a ->* or .* expression that refers to a\n+   member function.  */\n+\n+int\n+bound_pmf_p (t)\n+     tree t;\n+{\n+  return (TREE_CODE (t) == OFFSET_REF\n+\t  && TYPE_PTRMEMFUNC_P (TREE_TYPE (TREE_OPERAND (t, 1))));\n+}\n+\n /* Return a new OVL node, concatenating it with the old one. */\n \n tree"}, {"sha": "b0b3be9311ca142ed0aca1c3923c46079cb7439c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d7f862cfb3846ee764e9ec4fbe4fbb3d3ceaace/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d7f862cfb3846ee764e9ec4fbe4fbb3d3ceaace/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8d7f862cfb3846ee764e9ec4fbe4fbb3d3ceaace", "patch": "@@ -5630,10 +5630,9 @@ build_c_cast (type, expr)\n     {\n       if (TREE_CODE (TREE_TYPE (value)) == FUNCTION_TYPE\n \t  || (TREE_CODE (TREE_TYPE (value)) == METHOD_TYPE\n-\t      /* Don't do the default conversion if we want a\n-\t\t pointer to a function.  */\n+\t      /* Don't do the default conversion on a ->* expression.  */\n \t      && ! (TREE_CODE (type) == POINTER_TYPE\n-\t\t    && TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE))\n+\t\t    && bound_pmf_p (value)))\n \t  || TREE_CODE (TREE_TYPE (value)) == ARRAY_TYPE\n \t  || TREE_CODE (TREE_TYPE (value)) == REFERENCE_TYPE)\n \tvalue = default_conversion (value);"}]}