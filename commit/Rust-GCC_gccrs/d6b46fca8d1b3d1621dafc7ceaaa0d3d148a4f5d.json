{"sha": "d6b46fca8d1b3d1621dafc7ceaaa0d3d148a4f5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZiNDZmY2E4ZDFiM2QxNjIxZGFmYzdjZWFhYTBkM2QxNDhhNGY1ZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2016-12-08T18:34:04Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-12-08T18:34:04Z"}, "message": "re PR c++/78551 (Internal compiler error with constexpr initialization of union)\n\n\tPR c++/78551\n\t* constexpr.c (extract_string_elt): New.  Broken out of ...\n\t(cxx_eval_array_reference): ... here.  Call it.\n\t(cxx_eval_store_expression): Convert init by STRING_CST into\n\tCONSTRUCTOR, if needed.\n\n\tPR c++/78551\n\t* g++.dg/cpp1y/pr78551.C: New.\n\nFrom-SVN: r243448", "tree": {"sha": "054e757f6e96ac991151bfcadbbfd0a1cd115453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/054e757f6e96ac991151bfcadbbfd0a1cd115453"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6b46fca8d1b3d1621dafc7ceaaa0d3d148a4f5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b46fca8d1b3d1621dafc7ceaaa0d3d148a4f5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6b46fca8d1b3d1621dafc7ceaaa0d3d148a4f5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b46fca8d1b3d1621dafc7ceaaa0d3d148a4f5d/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f44986d7f5ca9bf64bf127c3ad0bbfc3e1a455b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44986d7f5ca9bf64bf127c3ad0bbfc3e1a455b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f44986d7f5ca9bf64bf127c3ad0bbfc3e1a455b5"}], "stats": {"total": 106, "additions": 97, "deletions": 9}, "files": [{"sha": "4b203b2a79408df4703434b6bc707f5fb3bd96d4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b46fca8d1b3d1621dafc7ceaaa0d3d148a4f5d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b46fca8d1b3d1621dafc7ceaaa0d3d148a4f5d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d6b46fca8d1b3d1621dafc7ceaaa0d3d148a4f5d", "patch": "@@ -1,3 +1,11 @@\n+2016-12-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/78551\n+\t* constexpr.c (extract_string_elt): New.  Broken out of ...\n+\t(cxx_eval_array_reference): ... here.  Call it.\n+\t(cxx_eval_store_expression): Convert init by STRING_CST into\n+\tCONSTRUCTOR, if needed.\n+\n 2016-12-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tP0003R5 - removal of dynamic exception specification from C++17"}, {"sha": "aedd004210238d590f6fe8901810286116e127a6", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 52, "deletions": 9, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b46fca8d1b3d1621dafc7ceaaa0d3d148a4f5d/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b46fca8d1b3d1621dafc7ceaaa0d3d148a4f5d/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=d6b46fca8d1b3d1621dafc7ceaaa0d3d148a4f5d", "patch": "@@ -2149,6 +2149,27 @@ diag_array_subscript (const constexpr_ctx *ctx, tree array, tree index)\n     }\n }\n \n+/* Extract element INDEX consisting of CHARS_PER_ELT chars from\n+   STRING_CST STRING.  */\n+\n+static tree\n+extract_string_elt (tree string, unsigned chars_per_elt, unsigned index)\n+{\n+  tree type = cv_unqualified (TREE_TYPE (TREE_TYPE (string)));\n+  tree r;\n+\n+  if (chars_per_elt == 1)\n+    r = build_int_cst (type, TREE_STRING_POINTER (string)[index]);\n+  else\n+    {\n+      const unsigned char *ptr\n+\t= ((const unsigned char *)TREE_STRING_POINTER (string)\n+\t   + index * chars_per_elt);\n+      r = native_interpret_expr (type, ptr, chars_per_elt);\n+    }\n+  return r;\n+}\n+\n /* Subroutine of cxx_eval_constant_expression.\n    Attempt to reduce a reference to an array slot.  */\n \n@@ -2244,16 +2265,9 @@ cxx_eval_array_reference (const constexpr_ctx *ctx, tree t,\n \tr = (*CONSTRUCTOR_ELTS (ary))[i].value;\n       else if (TREE_CODE (ary) == VECTOR_CST)\n \tr = VECTOR_CST_ELT (ary, i);\n-      else if (elem_nchars == 1)\n-\tr = build_int_cst (cv_unqualified (TREE_TYPE (TREE_TYPE (ary))),\n-\t\t\t   TREE_STRING_POINTER (ary)[i]);\n       else\n-\t{\n-\t  tree type = cv_unqualified (TREE_TYPE (TREE_TYPE (ary)));\n-\t  r = native_interpret_expr (type, (const unsigned char *)\n-\t\t\t\t     TREE_STRING_POINTER (ary)\n-\t\t\t\t     + i * elem_nchars, elem_nchars);\n-\t}\n+\tr = extract_string_elt (ary, elem_nchars, i);\n+\n       if (r)\n \t/* Don't VERIFY_CONSTANT here.  */\n \treturn r;\n@@ -3326,6 +3340,35 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n \t  *valp = build_constructor (type, NULL);\n \t  CONSTRUCTOR_NO_IMPLICIT_ZERO (*valp) = no_zero_init;\n \t}\n+      else if (TREE_CODE (*valp) == STRING_CST)\n+\t{\n+\t  /* An array was initialized with a string constant, and now\n+\t     we're writing into one of its elements.  Explode the\n+\t     single initialization into a set of element\n+\t     initializations.  */\n+\t  gcc_assert (TREE_CODE (type) == ARRAY_TYPE);\n+\n+\t  tree string = *valp;\n+\t  tree elt_type = TREE_TYPE (type);\n+\t  unsigned chars_per_elt = (TYPE_PRECISION (elt_type)\n+\t\t\t\t    / TYPE_PRECISION (char_type_node));\n+\t  unsigned num_elts = TREE_STRING_LENGTH (string) / chars_per_elt;\n+\t  tree ary_ctor = build_constructor (type, NULL);\n+\n+\t  vec_safe_reserve (CONSTRUCTOR_ELTS (ary_ctor), num_elts);\n+\t  for (unsigned ix = 0; ix != num_elts; ix++)\n+\t    {\n+\t      constructor_elt elt = \n+\t\t{\n+\t\t  build_int_cst (size_type_node, ix),\n+\t\t  extract_string_elt (string, chars_per_elt, ix)\n+\t\t};\n+\t      CONSTRUCTOR_ELTS (ary_ctor)->quick_push (elt);\n+\t    }\n+\t  \n+\t  *valp = ary_ctor;\n+\t}\n+\n       /* If the value of object is already zero-initialized, any new ctors for\n \t subobjects will also be zero-initialized.  */\n       no_zero_init = CONSTRUCTOR_NO_IMPLICIT_ZERO (*valp);"}, {"sha": "6342b9d91de2fe52a0ce9cae7cedd53f2d8640f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b46fca8d1b3d1621dafc7ceaaa0d3d148a4f5d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b46fca8d1b3d1621dafc7ceaaa0d3d148a4f5d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d6b46fca8d1b3d1621dafc7ceaaa0d3d148a4f5d", "patch": "@@ -1,3 +1,8 @@\n+2016-12-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/78551\n+\t* g++.dg/cpp1y/pr78551.C: New.\n+\n 2016-12-08  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \tPR debug/78112"}, {"sha": "a549fff4fefe73d861de3fadc1191745534c94e3", "filename": "gcc/testsuite/g++.dg/cpp1y/pr78551.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b46fca8d1b3d1621dafc7ceaaa0d3d148a4f5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr78551.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b46fca8d1b3d1621dafc7ceaaa0d3d148a4f5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr78551.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr78551.C?ref=d6b46fca8d1b3d1621dafc7ceaaa0d3d148a4f5d", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile { target c++14 } }\n+\n+// PR c++/78551 ICE in constexpr evaluation overwriting array\n+// intialized by string constant.\n+\n+constexpr char Foo (char x, int ix)\n+{\n+  char d[4] = \"012\";\n+  d[0] = x;\n+  return d[ix];\n+}\n+\n+static const char a = Foo ('a', 1);\n+static const char b = Foo ('a', 0);\n+\n+static_assert (a == '1', \"\");\n+static_assert (b == 'a', \"\");\n+\n+struct A {\n+  union {\n+    long s;\n+    char d[4];\n+  };\n+  constexpr A (char x)\n+    : d(\"012\")\n+  { d[0] = x; }\n+};\n+\n+static constexpr A c{'a'};\n+\n+static_assert (c.d[0] == 'a', \"\");\n+static_assert (c.d[1] == '1', \"\");"}]}