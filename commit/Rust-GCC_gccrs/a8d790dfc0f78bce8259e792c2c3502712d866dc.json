{"sha": "a8d790dfc0f78bce8259e792c2c3502712d866dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThkNzkwZGZjMGY3OGJjZTgyNTllNzkyYzJjMzUwMjcxMmQ4NjZkYw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2015-02-11T14:03:14Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2015-02-11T14:03:14Z"}, "message": "Rename check_effective_target_pie to check_effective_target_pie_enabled\n\ngcc/\n\n\t* doc/sourcebuild.texi (pie_enabled): Document.\n\ngcc/testsuite/\n\n\t* lib/target-supports.exp (check_effective_target_pie): Renamed\n\tto ...\n\t(check_effective_target_pie_enabled): This.\n\t* gcc.dg/tree-ssa/ssa-store-ccp-3.c: Replace pie with pie_enabled.\n\t* gcc.target/i386/pie.c: Likewise.\n\nFrom-SVN: r220618", "tree": {"sha": "f3e317a261ce2be95e9c8e1a0d7a380458be2be3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3e317a261ce2be95e9c8e1a0d7a380458be2be3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8d790dfc0f78bce8259e792c2c3502712d866dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8d790dfc0f78bce8259e792c2c3502712d866dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8d790dfc0f78bce8259e792c2c3502712d866dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8d790dfc0f78bce8259e792c2c3502712d866dc/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa01ffccc77fd08b566642487b05eea568a28e60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa01ffccc77fd08b566642487b05eea568a28e60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa01ffccc77fd08b566642487b05eea568a28e60"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "2fa7ff2abf39f6fdecab2bc60774407126458e0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d790dfc0f78bce8259e792c2c3502712d866dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d790dfc0f78bce8259e792c2c3502712d866dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8d790dfc0f78bce8259e792c2c3502712d866dc", "patch": "@@ -1,3 +1,7 @@\n+2015-02-11  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* doc/sourcebuild.texi (pie_enabled): Document.\n+\n 2015-02-11  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/64813"}, {"sha": "58759178c2b224adb11d71aafdde1e50c1ba5fd0", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d790dfc0f78bce8259e792c2c3502712d866dc/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d790dfc0f78bce8259e792c2c3502712d866dc/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=a8d790dfc0f78bce8259e792c2c3502712d866dc", "patch": "@@ -1884,6 +1884,9 @@ Target uses natural alignment (aligned to type size) for types of\n @item nonpic\n Target does not generate PIC by default.\n \n+@item pie_enabled\n+Target generates PIE by default.\n+\n @item pcc_bitfield_type_matters\n Target defines @code{PCC_BITFIELD_TYPE_MATTERS}.\n "}, {"sha": "bd508ec8e392aca87f96f47e89bc66bd76b02cd8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d790dfc0f78bce8259e792c2c3502712d866dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d790dfc0f78bce8259e792c2c3502712d866dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a8d790dfc0f78bce8259e792c2c3502712d866dc", "patch": "@@ -1,3 +1,11 @@\n+2015-02-11  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_pie): Renamed\n+\tto ...\n+\t(check_effective_target_pie_enabled): This.\n+\t* gcc.dg/tree-ssa/ssa-store-ccp-3.c: Replace pie with pie_enabled.\n+\t* gcc.target/i386/pie.c: Likewise.\n+\n 2015-02-11  Andrew Pinski  <apinski@cavium.com>\n \n \tPR target/64893"}, {"sha": "9c8d67ed06eaeea63f20393afc495646a431e0e8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-store-ccp-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d790dfc0f78bce8259e792c2c3502712d866dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-store-ccp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d790dfc0f78bce8259e792c2c3502712d866dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-store-ccp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-store-ccp-3.c?ref=a8d790dfc0f78bce8259e792c2c3502712d866dc", "patch": "@@ -13,6 +13,6 @@ int f(void)\n \n /* There should be no reference for nonpic targets to\n    conststaticvariable as we should have inlined the 0. */\n-/* { dg-final { scan-tree-dump-times \"conststaticvariable\" 0 \"optimized\" { target { pie || nonpic } } } } */\n-/* { dg-final { scan-tree-dump-times \"conststaticvariable\" 1 \"optimized\" { target { { ! pie } && { ! nonpic } } } } } */\n+/* { dg-final { scan-tree-dump-times \"conststaticvariable\" 0 \"optimized\" { target { pie_enabled || nonpic } } } } */\n+/* { dg-final { scan-tree-dump-times \"conststaticvariable\" 1 \"optimized\" { target { { ! pie_enabled } && { ! nonpic } } } } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "f96be6c0153445fb983fde47091fe4c488146ea9", "filename": "gcc/testsuite/gcc.target/i386/pie.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d790dfc0f78bce8259e792c2c3502712d866dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d790dfc0f78bce8259e792c2c3502712d866dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpie.c?ref=a8d790dfc0f78bce8259e792c2c3502712d866dc", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target pie } } */\n+/* { dg-do compile { target pie_enabled } } */\n /* { dg-options \"-O2\" } */\n \n int foo (void);"}, {"sha": "93cb791c9a9e027b8380cf4cdd2585806a4d2a75", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d790dfc0f78bce8259e792c2c3502712d866dc/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d790dfc0f78bce8259e792c2c3502712d866dc/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=a8d790dfc0f78bce8259e792c2c3502712d866dc", "patch": "@@ -1100,8 +1100,8 @@ proc check_effective_target_nonpic { } {\n \n # Return 1 if the current multilib generates PIE by default.\n \n-proc check_effective_target_pie { } {\n-    return [check_no_compiler_messages pie assembly {\n+proc check_effective_target_pie_enabled { } {\n+    return [check_no_compiler_messages pie_enabled assembly {\n \t#ifndef __PIE__\n \t#error unsupported\n \t#endif"}]}