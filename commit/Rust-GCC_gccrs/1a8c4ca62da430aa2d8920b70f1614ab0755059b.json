{"sha": "1a8c4ca62da430aa2d8920b70f1614ab0755059b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE4YzRjYTYyZGE0MzBhYTJkODkyMGI3MGYxNjE0YWIwNzU1MDU5Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-07-02T07:41:07Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-07-02T07:41:07Z"}, "message": "re PR rtl-optimization/11210 (optimizer drops conditional with typecast from signed to unsigned char)\n\n\tPR optimization/11210\n\t* expr.c (handled_component_p) [NOP_EXPR]: Add ??? note\n\tabout the behaviour with regard to bitfields.\n\t* fold-const (decode_field_reference): Record outermost type in\n\tcase the expression is a NOP. Strip all NOPs. Set the signedness\n\tto that of the outermost type (if any) when the bitsize is equal\n\tto the size of the type.\n\nFrom-SVN: r68823", "tree": {"sha": "2f0ff7e67c577a96205f1a538d682dfa6c362eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f0ff7e67c577a96205f1a538d682dfa6c362eb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a8c4ca62da430aa2d8920b70f1614ab0755059b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a8c4ca62da430aa2d8920b70f1614ab0755059b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a8c4ca62da430aa2d8920b70f1614ab0755059b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a8c4ca62da430aa2d8920b70f1614ab0755059b/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23cdfcf71f295697ac4322f0a0e8128e22e834b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23cdfcf71f295697ac4322f0a0e8128e22e834b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23cdfcf71f295697ac4322f0a0e8128e22e834b4"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "edc420bec759b225bd3d02fcb2b460f6f2a9c964", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8c4ca62da430aa2d8920b70f1614ab0755059b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8c4ca62da430aa2d8920b70f1614ab0755059b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a8c4ca62da430aa2d8920b70f1614ab0755059b", "patch": "@@ -1,3 +1,13 @@\n+2003-07-02  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR optimization/11210\n+\t* expr.c (handled_component_p) [NOP_EXPR]: Add ??? note\n+\tabout the behaviour with regard to bitfields.\n+\t* fold-const (decode_field_reference): Record outermost type in\n+\tcase the expression is a NOP. Strip all NOPs. Set the signedness\n+\tto that of the outermost type (if any) when the bitsize is equal\n+\tto the size of the type.\n+\n 2003-07-02  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.md (addsi3): Remove workaround for adds of -32768."}, {"sha": "8049020d3d3b7a439014cbc962070cacd2b3cbe7", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8c4ca62da430aa2d8920b70f1614ab0755059b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8c4ca62da430aa2d8920b70f1614ab0755059b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=1a8c4ca62da430aa2d8920b70f1614ab0755059b", "patch": "@@ -5903,6 +5903,9 @@ handled_component_p (tree t)\n     case VIEW_CONVERT_EXPR:\n       return 1;\n \n+    /* ??? Sure they are handled, but get_inner_reference may return\n+       a different PBITSIZE, depending upon whether the expression is\n+       wrapped up in a NOP_EXPR or not, e.g. for bitfields.  */\n     case NOP_EXPR:\n     case CONVERT_EXPR:\n       return (TYPE_MODE (TREE_TYPE (t))"}, {"sha": "3cc01ea07651d9afc86a957db40a7534b7421deb", "filename": "gcc/fold-const.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8c4ca62da430aa2d8920b70f1614ab0755059b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8c4ca62da430aa2d8920b70f1614ab0755059b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1a8c4ca62da430aa2d8920b70f1614ab0755059b", "patch": "@@ -2625,6 +2625,7 @@ decode_field_reference (tree exp, HOST_WIDE_INT *pbitsize, HOST_WIDE_INT *pbitpo\n \t\t\tenum machine_mode *pmode, int *punsignedp, int *pvolatilep,\n \t\t\ttree *pmask, tree *pand_mask)\n {\n+  tree outer_type = 0;\n   tree and_mask = 0;\n   tree mask, inner, offset;\n   tree unsigned_type;\n@@ -2636,6 +2637,13 @@ decode_field_reference (tree exp, HOST_WIDE_INT *pbitsize, HOST_WIDE_INT *pbitpo\n   if (! INTEGRAL_TYPE_P (TREE_TYPE (exp)))\n     return 0;\n \n+  /* We are interested in the bare arrangement of bits, so strip everything\n+     that doesn't affect the machine mode.  However, record the type of the\n+     outermost expression if it may matter below.  */\n+  if (TREE_CODE (exp) == NOP_EXPR\n+      || TREE_CODE (exp) == CONVERT_EXPR\n+      || TREE_CODE (exp) == NON_LVALUE_EXPR)\n+    outer_type = TREE_TYPE (exp);\n   STRIP_NOPS (exp);\n \n   if (TREE_CODE (exp) == BIT_AND_EXPR)\n@@ -2654,6 +2662,12 @@ decode_field_reference (tree exp, HOST_WIDE_INT *pbitsize, HOST_WIDE_INT *pbitpo\n       || TREE_CODE (inner) == PLACEHOLDER_EXPR)\n     return 0;\n \n+  /* If the number of bits in the reference is the same as the bitsize of\n+     the outer type, then the outer type gives the signedness. Otherwise\n+     (in case of a small bitfield) the signedness is unchanged.  */\n+  if (outer_type && *pbitsize == tree_low_cst (TYPE_SIZE (outer_type), 1))\n+    *punsignedp = TREE_UNSIGNED (outer_type);\n+\n   /* Compute the mask to access the bitfield.  */\n   unsigned_type = (*lang_hooks.types.type_for_size) (*pbitsize, 1);\n   precision = TYPE_PRECISION (unsigned_type);"}]}