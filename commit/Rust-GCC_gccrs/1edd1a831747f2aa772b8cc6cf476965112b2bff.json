{"sha": "1edd1a831747f2aa772b8cc6cf476965112b2bff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVkZDFhODMxNzQ3ZjJhYTc3MmI4Y2M2Y2Y0NzY5NjUxMTJiMmJmZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-09-16T23:17:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-09-16T23:17:09Z"}, "message": "[multiple changes]\n\n2008-09-16  Chris Fairles  <chris.fairles@gmail.com>\n\n        * testsuite/25_algorithms/min/requirements/explicit_instantiation/3.cc:\n        New.\n        * testsuite/25_algorithms/min/requirements/explicit_instantiation/\n        pod2.cc: Likewise.\n        * testsuite/25_algorithms/min/3.cc: Likewise.\n        * testsuite/25_algorithms/min/4.cc: Likewise.\n        * testsuite/25_algorithms/max/requirements/explicit_instantiation/3.cc:\n        Likewise.\n        * testsuite/25_algorithms/max/requirements/explicit_instantiation/\n        pod2.cc: Likewise.\n        * testsuite/25_algorithms/max/3.cc: Likewise.\n        * testsuite/25_algorithms/max/4.cc: Likewise.\n        * testsuite/25_algorithms/minmax/requirements/explicit_instantiation/\n        3.cc: Likewise.\n        * testsuite/25_algorithms/minmax/requirements/explicit_instantiation/\n        pod2.cc: Likewise.\n        * testsuite/25_algorithms/minmax/2.cc: Likewise.\n        * testsuite/25_algorithms/minmax/3.cc: Likewise.\n\n2008-09-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_algo.h (min(initializer_list<>),\n\tmin(initializer_list<>, Compare), max(initializer_list<>),\n\tmax(initializer_list<>, Compare), minmax(initializer_list<>),\n\tminmax(initializer_list<>, Compare)): Add in C++0x mode.\n\t* include/bits/algorithmfwd.h: Add.\n\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Likewise.\n\nFrom-SVN: r140404", "tree": {"sha": "b4ff9c91d3fc08d4f54f189776609467e05513d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4ff9c91d3fc08d4f54f189776609467e05513d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1edd1a831747f2aa772b8cc6cf476965112b2bff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1edd1a831747f2aa772b8cc6cf476965112b2bff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1edd1a831747f2aa772b8cc6cf476965112b2bff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1edd1a831747f2aa772b8cc6cf476965112b2bff/comments", "author": null, "committer": null, "parents": [{"sha": "b5fb36eecd378fe4c880ba53d3025a32fd0aeab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5fb36eecd378fe4c880ba53d3025a32fd0aeab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5fb36eecd378fe4c880ba53d3025a32fd0aeab2"}], "stats": {"total": 733, "additions": 732, "deletions": 1}, "files": [{"sha": "3c2d291778e18e63f23e890c892bac7b87b5f46b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1edd1a831747f2aa772b8cc6cf476965112b2bff", "patch": "@@ -1,3 +1,33 @@\n+2008-09-16  Chris Fairles  <chris.fairles@gmail.com>\n+\n+        * testsuite/25_algorithms/min/requirements/explicit_instantiation/3.cc:\n+        New.\n+        * testsuite/25_algorithms/min/requirements/explicit_instantiation/\n+        pod2.cc: Likewise.\n+        * testsuite/25_algorithms/min/3.cc: Likewise.\n+        * testsuite/25_algorithms/min/4.cc: Likewise.\n+        * testsuite/25_algorithms/max/requirements/explicit_instantiation/3.cc:\n+        Likewise.\n+        * testsuite/25_algorithms/max/requirements/explicit_instantiation/\n+        pod2.cc: Likewise.\n+        * testsuite/25_algorithms/max/3.cc: Likewise.\n+        * testsuite/25_algorithms/max/4.cc: Likewise.\n+        * testsuite/25_algorithms/minmax/requirements/explicit_instantiation/\n+        3.cc: Likewise.\n+        * testsuite/25_algorithms/minmax/requirements/explicit_instantiation/\n+        pod2.cc: Likewise.\n+        * testsuite/25_algorithms/minmax/2.cc: Likewise.\n+        * testsuite/25_algorithms/minmax/3.cc: Likewise.\n+\n+2008-09-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_algo.h (min(initializer_list<>),\n+\tmin(initializer_list<>, Compare), max(initializer_list<>),\n+\tmax(initializer_list<>, Compare), minmax(initializer_list<>),\n+\tminmax(initializer_list<>, Compare)): Add in C++0x mode.\n+\t* include/bits/algorithmfwd.h: Add.\n+\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Likewise.\n+\n 2008-09-13  Chris Fairles  <chris.fairles@gmail.com>\n \n         * testsuite/30_threads/thread/algorithm/1.cc: Join thread before"}, {"sha": "95ff72b79d5f99572c24480b75f5d50c406f7e4d", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=1edd1a831747f2aa772b8cc6cf476965112b2bff", "patch": "@@ -115,6 +115,7 @@\n #include <bits/c++config.h>\n #include <bits/stl_pair.h>\n #include <bits/stl_iterator_base_types.h>\n+#include <initializer_list>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -316,6 +317,30 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _FIter, typename _Compare>\n     pair<_FIter, _FIter>\n     minmax_element(_FIter, _FIter, _Compare);\n+\n+  template<typename _Tp>\n+    const _Tp&\n+    min(initializer_list<_Tp>);\n+\n+  template<typename _Tp, typename _Compare>\n+    const _Tp&\n+    min(initializer_list<_Tp>, _Compare);\n+\n+  template<typename _Tp>\n+    const _Tp&\n+    max(initializer_list<_Tp>);\n+\n+  template<typename _Tp, typename _Compare>\n+    const _Tp&\n+    max(initializer_list<_Tp>, _Compare);\n+\n+  template<typename _Tp>\n+    pair<const _Tp&, const _Tp&>\n+    minmax(initializer_list<_Tp>);\n+\n+  template<typename _Tp, typename _Compare>\n+    pair<const _Tp&, const _Tp&>\n+    minmax(initializer_list<_Tp>, _Compare);\n #endif\n \n   // mismatch"}, {"sha": "42ada9986f399e350c3a0bb6db6f3d85d6d4dbb1", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=1edd1a831747f2aa772b8cc6cf476965112b2bff", "patch": "@@ -67,6 +67,7 @@\n #include <bits/stl_heap.h>\n #include <bits/stl_tempbuf.h>  // for _Temporary_buffer\n #include <debug/debug.h>\n+#include <initializer_list>\n \n // See concept_check.h for the __glibcxx_*_requires macros.\n \n@@ -4092,6 +4093,45 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       return std::make_pair(__min, __max);\n     }\n+\n+  // N2722.\n+  template<typename _Tp>\n+    inline const _Tp&\n+    min(initializer_list<_Tp> __l)\n+    { return *std::min_element(__l.begin(), __l.end()); }\n+\n+  template<typename _Tp, typename _Compare>\n+    inline const _Tp&\n+    min(initializer_list<_Tp> __l, _Compare __comp)\n+    { return *std::min_element(__l.begin(), __l.end(), __comp); }\n+\n+  template<typename _Tp>\n+    inline const _Tp&\n+    max(initializer_list<_Tp> __l)\n+    { return *std::max_element(__l.begin(), __l.end()); }\n+\n+  template<typename _Tp, typename _Compare>\n+    inline const _Tp&\n+    max(initializer_list<_Tp> __l, _Compare __comp)\n+    { return *std::max_element(__l.begin(), __l.end(), __comp); }\n+\n+  template<typename _Tp>\n+    inline pair<const _Tp&, const _Tp&>\n+    minmax(initializer_list<_Tp> __l)\n+    {\n+      pair<const _Tp*, const _Tp*> __p =\n+\tstd::minmax_element(__l.begin(), __l.end());\n+      return std::make_pair(*__p.first, *__p.second);\n+    }\n+\n+  template<typename _Tp, typename _Compare>\n+    inline pair<const _Tp&, const _Tp&>\n+    minmax(initializer_list<_Tp> __l, _Compare __comp)\n+    {\n+      pair<const _Tp*, const _Tp*> __p =\n+\tstd::minmax_element(__l.begin(), __l.end(), __comp);\n+      return std::make_pair(*__p.first, *__p.second);\n+    }\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "3bc8eb2a7649bafaf34795aab7214a65f529f890", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/synopsis.cc", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc?ref=1edd1a831747f2aa772b8cc6cf476965112b2bff", "patch": "@@ -529,8 +529,32 @@ namespace std\n     minmax_element(_FIter, _FIter);\n \n   template<typename _FIter, typename _Compare>\n-    pair<_FIter, _FIter> \n+    pair<_FIter, _FIter>\n     minmax_element(_FIter, _FIter, _Compare);\n+\n+  template<typename _Tp>\n+    const _Tp&\n+    min(initializer_list<_Tp>);\n+\n+  template<typename _Tp, typename _Compare>\n+    const _Tp&\n+    min(initializer_list<_Tp>, _Compare);\n+\n+  template<typename _Tp>\n+    const _Tp&\n+    max(initializer_list<_Tp>);\n+\n+  template<typename _Tp, typename _Compare>\n+    const _Tp&\n+    max(initializer_list<_Tp>, _Compare);\n+\n+  template<typename _Tp>\n+    pair<const _Tp&, const _Tp&>\n+    minmax(initializer_list<_Tp>);\n+\n+  template<typename _Tp, typename _Compare>\n+    pair<const _Tp&, const _Tp&>\n+    minmax(initializer_list<_Tp>, _Compare);\n #endif\n \n   template<typename _IIter1, typename _IIter2>"}, {"sha": "e3a01159c8a1a860baedbe19676b771bdad90783", "filename": "libstdc++-v3/testsuite/25_algorithms/max/3.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F3.cc?ref=1edd1a831747f2aa772b8cc6cf476965112b2bff", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const int& x = std::max({1, 3, 2});\n+  const int& y = std::max({4, 3, 2});\n+  const int& z = std::max({3, 2, 4});\n+  VERIFY( x == 3 );\n+  VERIFY( y == 4 );\n+  VERIFY( z == 4 );\n+\n+  const int& xc = std::max({1, 2, 3}, std::greater<int>());\n+  const int& yc = std::max({4, 3, 2}, std::greater<int>());\n+  const int& zc = std::max({2, 4, 3}, std::greater<int>());\n+  VERIFY( xc == 1 );\n+  VERIFY( yc == 2 );\n+  VERIFY( zc == 2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "523728f5137da9260c68e3266c02b732dd4ddea1", "filename": "libstdc++-v3/testsuite/25_algorithms/max/4.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F4.cc?ref=1edd1a831747f2aa772b8cc6cf476965112b2bff", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const int& z = std::max({1, 2, 3, 4, 5, 6, 7});\n+  const double& w = std::max({2.0, 1.0, 3.2, 4.5, 5.0, 6.0, 7.0});\n+  const int& y = std::max({2, 3, 1, 4, 5, 6, 7});\n+  const float& x = std::max({2.0f, 3.0f, 5.0f, 1.0f, 7.0f, 6.0f});\n+  VERIFY( z == 7 );\n+  VERIFY( w == 7.0 );\n+  VERIFY( y == 7 );\n+  VERIFY( x == 7.0f );\n+  \n+  const int& zc = std::max({1, 2, 3, 4, 5, 6, 7}, std::greater<int>());\n+  const double& wc = std::max({2.0, 1.0, 3.2, 4.5, 5.0},\n+\t\t\t      std::greater<double>());\n+  const int& yc = std::max({2, 7, 1, 4, 5, 6, 3}, std::greater<int>());\n+  const float& xc = std::max({2.0f, 3.0f, 5.0f, 1.0f},\n+\t\t\t     std::greater<float>());\n+\n+  VERIFY( zc == 1 );\n+  VERIFY( wc == 1.0 );\n+  VERIFY( yc == 1 );\n+  VERIFY( xc == 1.0f );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e4ac6cb607b45ca507bf28afaed4bc67ac0af50e", "filename": "libstdc++-v3/testsuite/25_algorithms/max/requirements/explicit_instantiation/3.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=1edd1a831747f2aa772b8cc6cf476965112b2bff", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2008-09-16  Chris Fairles  <chris.fairles@gmail.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template const value_type&  max(initializer_list<value_type>);\n+  template const value_type&  max(initializer_list<value_type>, compare_type);\n+} "}, {"sha": "55f2eae6545289cf454e7ba4066f0bd27f542222", "filename": "libstdc++-v3/testsuite/25_algorithms/max/requirements/explicit_instantiation/pod2.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2Frequirements%2Fexplicit_instantiation%2Fpod2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2Frequirements%2Fexplicit_instantiation%2Fpod2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2Frequirements%2Fexplicit_instantiation%2Fpod2.cc?ref=1edd1a831747f2aa772b8cc6cf476965112b2bff", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2008-09-16  Chris Fairles  <chris.fairles@gmail.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template const value_type&  max(initializer_list<value_type>);\n+  template const value_type&  max(initializer_list<value_type>, compare_type);\n+} "}, {"sha": "c9617249824dac626acea7d6e95675637a205dc7", "filename": "libstdc++-v3/testsuite/25_algorithms/min/3.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F3.cc?ref=1edd1a831747f2aa772b8cc6cf476965112b2bff", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const int& z = std::min({1, 3, 2});\n+  const int& w = std::min({4, 3, 5});\n+  const int& y = std::min({4, 3, 2});\n+  VERIFY( z == 1 );\n+  VERIFY( w == 3 );\n+  VERIFY( y == 2 );\n+\n+  const int& zc = std::min({1, 3, 2}, std::greater<int>());\n+  const int& wc = std::min({4, 3, 5}, std::greater<int>());\n+  const int& yc = std::min({4, 3, 2}, std::greater<int>());\n+  VERIFY( zc == 3 );\n+  VERIFY( wc == 5 );\n+  VERIFY( yc == 4 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2d19ac79b032427140a3ffc80a834afd108daefe", "filename": "libstdc++-v3/testsuite/25_algorithms/min/4.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F4.cc?ref=1edd1a831747f2aa772b8cc6cf476965112b2bff", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const int& z = std::min({1, 2, 3, 4, 5, 6, 7});\n+  const double& w = std::min({2.0, 1.0, 3.2, 4.5, 5.0, 6.0, 7.0});\n+  const int& y = std::min({2, 3, 1, 4, 5, 6, 7});\n+  const float& x = std::min({2.0f, 3.0f, 5.0f, 1.0f, 7.0f, 6.0f});\n+  VERIFY( z == 1 );\n+  VERIFY( w == 1.0 );\n+  VERIFY( y == 1 );\n+  VERIFY( x == 1.0f );\n+\n+  \n+  const int& zc = std::min({1, 2, 3, 4, 5, 6, 7}, std::greater<int>());\n+  const double& wc = std::min({2.0, 1.0, 3.2, 4.5, 5.0, 6.0, 7.0},\n+\t\t\t      std::greater<double>());\n+  const int& yc = std::min({2, 7, 1, 4, 5, 6, 3}, std::greater<int>());\n+  const float& xc = std::min({2.0f, 3.0f, 5.0f, 1.0f, 7.0f, 6.0f},\n+\t\t\t     std::greater<float>());\n+  \n+  VERIFY( zc == 7 );\n+  VERIFY( wc == 7.0 );\n+  VERIFY( yc == 7 );\n+  VERIFY( xc == 7.0f );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1d6e7aedeb887f98c4e5a89769aa2b11ed9f6cb4", "filename": "libstdc++-v3/testsuite/25_algorithms/min/requirements/explicit_instantiation/3.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=1edd1a831747f2aa772b8cc6cf476965112b2bff", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2008-09-16  Chris Fairles  <chris.fairles@gmail.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template const value_type&  min(initializer_list<value_type>);\n+  template const value_type&  min(initializer_list<value_type>, compare_type);\n+} "}, {"sha": "98c8413c2a62f4e8386017eb5d8a8b373f007bad", "filename": "libstdc++-v3/testsuite/25_algorithms/min/requirements/explicit_instantiation/pod2.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2Frequirements%2Fexplicit_instantiation%2Fpod2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2Frequirements%2Fexplicit_instantiation%2Fpod2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2Frequirements%2Fexplicit_instantiation%2Fpod2.cc?ref=1edd1a831747f2aa772b8cc6cf476965112b2bff", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2008-09-16  Chris Fairles  <chris.fairles@gmail.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template const value_type&  min(initializer_list<value_type>);\n+  template const value_type&  min(initializer_list<value_type>, compare_type);\n+} "}, {"sha": "f19782eb45bdf8ab29ebb1d149804313280967c6", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax/2.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F2.cc?ref=1edd1a831747f2aa772b8cc6cf476965112b2bff", "patch": "@@ -0,0 +1,62 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-09-16  Chris Fairles  <chris.fairles@gmail.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::pair<const int&, const int&> z = std::minmax({1, 2, 3});\n+  std::pair<const int&, const int&> w = std::minmax({4, 3, 5, 4});\n+  std::pair<const int&, const int&> y = std::minmax({4, 5, 3, 7, 3});\n+  VERIFY( z.first == 1 );\n+  VERIFY( z.second == 3 );\n+  VERIFY( w.first == 3 );\n+  VERIFY( w.second == 5 );\n+  VERIFY( y.first == 3 );\n+  VERIFY( y.second == 7 );\n+  \n+  std::pair<const int&, const int&> zc = \n+    std::minmax({1, 2, 3}, std::greater<int>());\n+  \n+  std::pair<const int&, const int&> wc = \n+    std::minmax({4, 3, 5, 4}, std::greater<int>());\n+    \n+  std::pair<const int&, const int&> yc = \n+    std::minmax({4, 5, 3, 7, 3}, std::greater<int>());\n+    \n+  VERIFY( zc.first == 3 );\n+  VERIFY( zc.second == 1 );\n+  VERIFY( wc.first == 5 );\n+  VERIFY( wc.second == 3 );\n+  VERIFY( yc.first == 7 );\n+  VERIFY( yc.second == 3 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0cb438a4360a42a161ba600824ba2e1b16cf31f1", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax/3.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F3.cc?ref=1edd1a831747f2aa772b8cc6cf476965112b2bff", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-09-16  Chris Fairles  <chris.fairles@gmail.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+struct compare_counter\n+  : std::binary_function<int, int, bool>\n+{\n+  static int count;\n+  \n+  bool operator()(int a, int b) const\n+  {\n+    ++count;\n+    return a < b;\n+  }\n+};\n+\n+int compare_counter::count = 0;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::pair<const int&, const int&> z = std::minmax({1, 2, 3, 4, 5, 6, 7, 8},\n+\t\t\t\t\t\t    compare_counter());\n+\n+  // If N is the number of arguments in the minmax function call, \n+  // 25.3.7 specifies that at most 3N/2 comparisons are allowed.\n+  VERIFY(compare_counter::count <= (3 * 8 / 2));\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "71fab66fddd68419dd2c2c51ea76f19690c6ccda", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax/requirements/explicit_instantiation/3.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=1edd1a831747f2aa772b8cc6cf476965112b2bff", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2008-09-16  Chris Fairles  <chris.fairles@gmail.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template pair<const value_type&, const value_type&>\n+    minmax(initializer_list<value_type>);\n+  template pair<const value_type&, const value_type&>\n+    minmax(initializer_list<value_type>, compare_type);\n+}"}, {"sha": "d5285930ddf5dc4f7fd09322c7e68b87a5d2d7dc", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax/requirements/explicit_instantiation/pod2.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2Frequirements%2Fexplicit_instantiation%2Fpod2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edd1a831747f2aa772b8cc6cf476965112b2bff/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2Frequirements%2Fexplicit_instantiation%2Fpod2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2Frequirements%2Fexplicit_instantiation%2Fpod2.cc?ref=1edd1a831747f2aa772b8cc6cf476965112b2bff", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2008-09-16  Chris Fairles  <chris.fairles@gmail.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template pair<const value_type&, const value_type&>\n+    minmax(initializer_list<value_type>);\n+  template pair<const value_type&, const value_type&>\n+    minmax(initializer_list<value_type>, compare_type);\n+}"}]}