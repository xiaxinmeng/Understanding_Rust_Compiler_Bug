{"sha": "4712bde3cabed644884a52386404765fca3b0ac2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcxMmJkZTNjYWJlZDY0NDg4NGE1MjM4NjQwNDc2NWZjYTNiMGFjMg==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-07-15T13:16:01Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-07-30T12:36:24Z"}, "message": "Require CET support only for the final GCC build\n\nWith --enable-cet, require CET support only for the final GCC build.\nDon't enable CET without CET support for non-bootstrap build, in stage1\nnor for build support.\n\nconfig/\n\n\tPR bootstrap/96202\n\t* cet.m4 (GCC_CET_HOST_FLAGS): Don't enable CET without CET\n\tsupport in stage1 nor for build support.\n\ngcc/\n\n\tPR bootstrap/96202\n\t* configure: Regenerated.\n\nlibbacktrace/\n\n\tPR bootstrap/96202\n\t* configure: Regenerated.\n\nlibcc1/\n\n\tPR bootstrap/96202\n\t* configure: Regenerated.\n\nlibcpp/\n\n\tPR bootstrap/96202\n\t* configure: Regenerated.\n\nlibdecnumber/\n\n\tPR bootstrap/96202\n\t* configure: Regenerated.\n\nlibiberty/\n\n\tPR bootstrap/96202\n\t* configure: Regenerated.\n\nlto-plugin/\n\n\tPR bootstrap/96202\n\t* configure: Regenerated.", "tree": {"sha": "6a119dbfd7885c36e123657a74433210701654f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a119dbfd7885c36e123657a74433210701654f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4712bde3cabed644884a52386404765fca3b0ac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4712bde3cabed644884a52386404765fca3b0ac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4712bde3cabed644884a52386404765fca3b0ac2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4712bde3cabed644884a52386404765fca3b0ac2/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e67b4356efe4291fdb170fb116092f4ed9d2f05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e67b4356efe4291fdb170fb116092f4ed9d2f05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e67b4356efe4291fdb170fb116092f4ed9d2f05"}], "stats": {"total": 186, "additions": 146, "deletions": 40}, "files": [{"sha": "c67fb4f35b65b84a88bcbebadaf8d12781025a75", "filename": "config/cet.m4", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4712bde3cabed644884a52386404765fca3b0ac2/config%2Fcet.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4712bde3cabed644884a52386404765fca3b0ac2/config%2Fcet.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fcet.m4?ref=4712bde3cabed644884a52386404765fca3b0ac2", "patch": "@@ -13,7 +13,7 @@ case \"$host\" in\n     case \"$enable_cet\" in\n       auto)\n \t# Check if target supports multi-byte NOPs\n-\t# and if assembler supports CET insn.\n+\t# and if compiler and assembler support CET insn.\n \tcet_save_CFLAGS=\"$CFLAGS\"\n \tCFLAGS=\"$CFLAGS -fcf-protection\"\n \tAC_COMPILE_IFELSE(\n@@ -70,7 +70,7 @@ case \"$host\" in\n     case \"$enable_cet\" in\n       auto)\n \t# Check if target supports multi-byte NOPs\n-\t# and if assembler supports CET insn.\n+\t# and if compiler and assembler support CET.\n \tAC_COMPILE_IFELSE(\n \t [AC_LANG_PROGRAM(\n \t  [],\n@@ -85,13 +85,26 @@ asm (\"setssbsy\");\n \t [enable_cet=no])\n \t;;\n       yes)\n-\t# Check if assembler supports CET.\n+\t# Check if compiler and assembler support CET.\n \tAC_COMPILE_IFELSE(\n \t [AC_LANG_PROGRAM(\n \t  [],\n \t  [asm (\"setssbsy\");])],\n-\t [],\n-\t [AC_MSG_ERROR([assembler with CET support is required for --enable-cet])])\n+\t [support_cet=yes],\n+\t [support_cet=no])\n+\tif test $support_cet = \"no\"; then\n+\t  if test x$enable_bootstrap != xno \\\n+\t     && test -z \"${with_build_subdir}\" \\\n+\t     && (test ! -f ../stage_current \\\n+\t         || test `cat ../stage_current` != \"stage1\"); then\n+\t    # Require CET support only for the final GCC build.\n+\t    AC_MSG_ERROR([compiler and assembler with CET support are required for --enable-cet])\n+\t  else\n+\t    # Don't enable CET without CET support for non-bootstrap\n+\t    # build, in stage1 nor for build support.\n+\t    enable_cet=no\n+\t  fi\n+\tfi\n \t;;\n     esac\n     CFLAGS=\"$cet_save_CFLAGS\""}, {"sha": "21ce66d97e0bdc903b0051569e76a3e09226df80", "filename": "gcc/configure", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4712bde3cabed644884a52386404765fca3b0ac2/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4712bde3cabed644884a52386404765fca3b0ac2/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=4712bde3cabed644884a52386404765fca3b0ac2", "patch": "@@ -785,10 +785,10 @@ manext\n LIBICONV_DEP\n LTLIBICONV\n LIBICONV\n-ZSTD_LIB\n-ZSTD_INCLUDE\n ZSTD_LDFLAGS\n ZSTD_CPPFLAGS\n+ZSTD_LIB\n+ZSTD_INCLUDE\n DL_LIB\n LDEXP_LIB\n EXTRA_GCC_LIBS\n@@ -9978,6 +9978,8 @@ ZSTD_LIB=\n ZSTD_CPPFLAGS=\n ZSTD_LDFLAGS=\n \n+\n+\n # Check whether --with-zstd was given.\n if test \"${with_zstd+set}\" = set; then :\n   withval=$with_zstd;\n@@ -19021,7 +19023,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19022 \"configure\"\n+#line 19026 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19127,7 +19129,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19128 \"configure\"\n+#line 19132 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -30786,7 +30788,7 @@ case \"$host\" in\n     case \"$enable_cet\" in\n       auto)\n \t# Check if target supports multi-byte NOPs\n-\t# and if assembler supports CET insn.\n+\t# and if compiler and assembler support CET.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n@@ -30812,7 +30814,7 @@ fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n \t;;\n       yes)\n-\t# Check if assembler supports CET.\n+\t# Check if compiler and assembler support CET.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n@@ -30825,11 +30827,24 @@ asm (\"setssbsy\");\n }\n _ACEOF\n if ac_fn_cxx_try_compile \"$LINENO\"; then :\n-\n+  support_cet=yes\n else\n-  as_fn_error $? \"assembler with CET support is required for --enable-cet\" \"$LINENO\" 5\n+  support_cet=no\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\tif test $support_cet = \"no\"; then\n+\t  if test x$enable_bootstrap != xno \\\n+\t     && test -z \"${with_build_subdir}\" \\\n+\t     && (test ! -f ../stage_current \\\n+\t         || test `cat ../stage_current` != \"stage1\"); then\n+\t    # Require CET support only for the final GCC build.\n+\t    as_fn_error $? \"compiler and assembler with CET support are required for --enable-cet\" \"$LINENO\" 5\n+\t  else\n+\t    # Don't enable CET without CET support for non-bootstrap\n+\t    # build, in stage1 nor for build support.\n+\t    enable_cet=no\n+\t  fi\n+\tfi\n \t;;\n     esac\n     CFLAGS=\"$cet_save_CFLAGS\""}, {"sha": "d4b3523e10ee6658a0bbf48abb836b08c40073ea", "filename": "libbacktrace/configure", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4712bde3cabed644884a52386404765fca3b0ac2/libbacktrace%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4712bde3cabed644884a52386404765fca3b0ac2/libbacktrace%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fconfigure?ref=4712bde3cabed644884a52386404765fca3b0ac2", "patch": "@@ -12169,7 +12169,7 @@ case \"$host\" in\n     case \"$enable_cet\" in\n       auto)\n \t# Check if target supports multi-byte NOPs\n-\t# and if assembler supports CET insn.\n+\t# and if compiler and assembler support CET insn.\n \tcet_save_CFLAGS=\"$CFLAGS\"\n \tCFLAGS=\"$CFLAGS -fcf-protection\"\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -12409,7 +12409,7 @@ case \"$host\" in\n     case \"$enable_cet\" in\n       auto)\n \t# Check if target supports multi-byte NOPs\n-\t# and if assembler supports CET insn.\n+\t# and if compiler and assembler support CET.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n@@ -12435,7 +12435,7 @@ fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n \t;;\n       yes)\n-\t# Check if assembler supports CET.\n+\t# Check if compiler and assembler support CET.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n@@ -12448,11 +12448,24 @@ asm (\"setssbsy\");\n }\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n-\n+  support_cet=yes\n else\n-  as_fn_error $? \"assembler with CET support is required for --enable-cet\" \"$LINENO\" 5\n+  support_cet=no\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\tif test $support_cet = \"no\"; then\n+\t  if test x$enable_bootstrap != xno \\\n+\t     && test -z \"${with_build_subdir}\" \\\n+\t     && (test ! -f ../stage_current \\\n+\t         || test `cat ../stage_current` != \"stage1\"); then\n+\t    # Require CET support only for the final GCC build.\n+\t    as_fn_error $? \"compiler and assembler with CET support are required for --enable-cet\" \"$LINENO\" 5\n+\t  else\n+\t    # Don't enable CET without CET support for non-bootstrap\n+\t    # build, in stage1 nor for build support.\n+\t    enable_cet=no\n+\t  fi\n+\tfi\n \t;;\n     esac\n     CFLAGS=\"$cet_save_CFLAGS\""}, {"sha": "3610219ba65022f4ea752e0b787a7283e1fbb4de", "filename": "libcc1/configure", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4712bde3cabed644884a52386404765fca3b0ac2/libcc1%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4712bde3cabed644884a52386404765fca3b0ac2/libcc1%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fconfigure?ref=4712bde3cabed644884a52386404765fca3b0ac2", "patch": "@@ -14565,7 +14565,7 @@ case \"$host\" in\n     case \"$enable_cet\" in\n       auto)\n \t# Check if target supports multi-byte NOPs\n-\t# and if assembler supports CET insn.\n+\t# and if compiler and assembler support CET.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n@@ -14591,7 +14591,7 @@ fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n \t;;\n       yes)\n-\t# Check if assembler supports CET.\n+\t# Check if compiler and assembler support CET.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n@@ -14604,11 +14604,24 @@ asm (\"setssbsy\");\n }\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n-\n+  support_cet=yes\n else\n-  as_fn_error $? \"assembler with CET support is required for --enable-cet\" \"$LINENO\" 5\n+  support_cet=no\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\tif test $support_cet = \"no\"; then\n+\t  if test x$enable_bootstrap != xno \\\n+\t     && test -z \"${with_build_subdir}\" \\\n+\t     && (test ! -f ../stage_current \\\n+\t         || test `cat ../stage_current` != \"stage1\"); then\n+\t    # Require CET support only for the final GCC build.\n+\t    as_fn_error $? \"compiler and assembler with CET support are required for --enable-cet\" \"$LINENO\" 5\n+\t  else\n+\t    # Don't enable CET without CET support for non-bootstrap\n+\t    # build, in stage1 nor for build support.\n+\t    enable_cet=no\n+\t  fi\n+\tfi\n \t;;\n     esac\n     CFLAGS=\"$cet_save_CFLAGS\""}, {"sha": "7e28606f6056f5255b117f2ee5e27115f3f94b61", "filename": "libcpp/configure", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4712bde3cabed644884a52386404765fca3b0ac2/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4712bde3cabed644884a52386404765fca3b0ac2/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=4712bde3cabed644884a52386404765fca3b0ac2", "patch": "@@ -7564,7 +7564,7 @@ case \"$host\" in\n     case \"$enable_cet\" in\n       auto)\n \t# Check if target supports multi-byte NOPs\n-\t# and if assembler supports CET insn.\n+\t# and if compiler and assembler support CET.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n@@ -7590,7 +7590,7 @@ fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n \t;;\n       yes)\n-\t# Check if assembler supports CET.\n+\t# Check if compiler and assembler support CET.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n@@ -7603,11 +7603,24 @@ asm (\"setssbsy\");\n }\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n-\n+  support_cet=yes\n else\n-  as_fn_error $? \"assembler with CET support is required for --enable-cet\" \"$LINENO\" 5\n+  support_cet=no\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\tif test $support_cet = \"no\"; then\n+\t  if test x$enable_bootstrap != xno \\\n+\t     && test -z \"${with_build_subdir}\" \\\n+\t     && (test ! -f ../stage_current \\\n+\t         || test `cat ../stage_current` != \"stage1\"); then\n+\t    # Require CET support only for the final GCC build.\n+\t    as_fn_error $? \"compiler and assembler with CET support are required for --enable-cet\" \"$LINENO\" 5\n+\t  else\n+\t    # Don't enable CET without CET support for non-bootstrap\n+\t    # build, in stage1 nor for build support.\n+\t    enable_cet=no\n+\t  fi\n+\tfi\n \t;;\n     esac\n     CFLAGS=\"$cet_save_CFLAGS\""}, {"sha": "6b62f8ba6652c809a7c479613e2b6e3a490806f5", "filename": "libdecnumber/configure", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4712bde3cabed644884a52386404765fca3b0ac2/libdecnumber%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4712bde3cabed644884a52386404765fca3b0ac2/libdecnumber%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fconfigure?ref=4712bde3cabed644884a52386404765fca3b0ac2", "patch": "@@ -5217,7 +5217,7 @@ case \"$host\" in\n     case \"$enable_cet\" in\n       auto)\n \t# Check if target supports multi-byte NOPs\n-\t# and if assembler supports CET insn.\n+\t# and if compiler and assembler support CET.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n@@ -5243,7 +5243,7 @@ fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n \t;;\n       yes)\n-\t# Check if assembler supports CET.\n+\t# Check if compiler and assembler support CET.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n@@ -5256,11 +5256,24 @@ asm (\"setssbsy\");\n }\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n-\n+  support_cet=yes\n else\n-  as_fn_error $? \"assembler with CET support is required for --enable-cet\" \"$LINENO\" 5\n+  support_cet=no\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\tif test $support_cet = \"no\"; then\n+\t  if test x$enable_bootstrap != xno \\\n+\t     && test -z \"${with_build_subdir}\" \\\n+\t     && (test ! -f ../stage_current \\\n+\t         || test `cat ../stage_current` != \"stage1\"); then\n+\t    # Require CET support only for the final GCC build.\n+\t    as_fn_error $? \"compiler and assembler with CET support are required for --enable-cet\" \"$LINENO\" 5\n+\t  else\n+\t    # Don't enable CET without CET support for non-bootstrap\n+\t    # build, in stage1 nor for build support.\n+\t    enable_cet=no\n+\t  fi\n+\tfi\n \t;;\n     esac\n     CFLAGS=\"$cet_save_CFLAGS\""}, {"sha": "ff93c9ee9a6fa9c6bb1938bcdfffb2d0ae8c9698", "filename": "libiberty/configure", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4712bde3cabed644884a52386404765fca3b0ac2/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4712bde3cabed644884a52386404765fca3b0ac2/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=4712bde3cabed644884a52386404765fca3b0ac2", "patch": "@@ -5291,7 +5291,7 @@ case \"$host\" in\n     case \"$enable_cet\" in\n       auto)\n \t# Check if target supports multi-byte NOPs\n-\t# and if assembler supports CET insn.\n+\t# and if compiler and assembler support CET.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n@@ -5317,7 +5317,7 @@ fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n \t;;\n       yes)\n-\t# Check if assembler supports CET.\n+\t# Check if compiler and assembler support CET.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n@@ -5330,11 +5330,24 @@ asm (\"setssbsy\");\n }\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n-\n+  support_cet=yes\n else\n-  as_fn_error $? \"assembler with CET support is required for --enable-cet\" \"$LINENO\" 5\n+  support_cet=no\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\tif test $support_cet = \"no\"; then\n+\t  if test x$enable_bootstrap != xno \\\n+\t     && test -z \"${with_build_subdir}\" \\\n+\t     && (test ! -f ../stage_current \\\n+\t         || test `cat ../stage_current` != \"stage1\"); then\n+\t    # Require CET support only for the final GCC build.\n+\t    as_fn_error $? \"compiler and assembler with CET support are required for --enable-cet\" \"$LINENO\" 5\n+\t  else\n+\t    # Don't enable CET without CET support for non-bootstrap\n+\t    # build, in stage1 nor for build support.\n+\t    enable_cet=no\n+\t  fi\n+\tfi\n \t;;\n     esac\n     CFLAGS=\"$cet_save_CFLAGS\""}, {"sha": "c1dd0cdd14777b212619796f78950409b424b164", "filename": "lto-plugin/configure", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4712bde3cabed644884a52386404765fca3b0ac2/lto-plugin%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4712bde3cabed644884a52386404765fca3b0ac2/lto-plugin%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure?ref=4712bde3cabed644884a52386404765fca3b0ac2", "patch": "@@ -5687,7 +5687,7 @@ case \"$host\" in\n     case \"$enable_cet\" in\n       auto)\n \t# Check if target supports multi-byte NOPs\n-\t# and if assembler supports CET insn.\n+\t# and if compiler and assembler support CET.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n@@ -5713,7 +5713,7 @@ fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n \t;;\n       yes)\n-\t# Check if assembler supports CET.\n+\t# Check if compiler and assembler support CET.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n@@ -5726,11 +5726,24 @@ asm (\"setssbsy\");\n }\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n-\n+  support_cet=yes\n else\n-  as_fn_error $? \"assembler with CET support is required for --enable-cet\" \"$LINENO\" 5\n+  support_cet=no\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\tif test $support_cet = \"no\"; then\n+\t  if test x$enable_bootstrap != xno \\\n+\t     && test -z \"${with_build_subdir}\" \\\n+\t     && (test ! -f ../stage_current \\\n+\t         || test `cat ../stage_current` != \"stage1\"); then\n+\t    # Require CET support only for the final GCC build.\n+\t    as_fn_error $? \"compiler and assembler with CET support are required for --enable-cet\" \"$LINENO\" 5\n+\t  else\n+\t    # Don't enable CET without CET support for non-bootstrap\n+\t    # build, in stage1 nor for build support.\n+\t    enable_cet=no\n+\t  fi\n+\tfi\n \t;;\n     esac\n     CFLAGS=\"$cet_save_CFLAGS\"\n@@ -11947,7 +11960,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11950 \"configure\"\n+#line 11963 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12053,7 +12066,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12056 \"configure\"\n+#line 12069 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}]}