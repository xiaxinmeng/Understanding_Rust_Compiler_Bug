{"sha": "1310ff035d548056ad4a0def038a6c5dedd98b47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMxMGZmMDM1ZDU0ODA1NmFkNGEwZGVmMDM4YTZjNWRlZGQ5OGI0Nw==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2017-07-19T13:05:09Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2017-07-19T13:05:09Z"}, "message": "Add generic v2 vector mode support for nvptx\n\n2017-07-19  Tom de Vries  <tom@codesourcery.com>\n\n\t* config/nvptx/nvptx.c (nvptx_print_operand): Handle v2 vector mode.\n\nFrom-SVN: r250339", "tree": {"sha": "deb51abeac0d14c7c2f99d8a535bd66a7a094429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/deb51abeac0d14c7c2f99d8a535bd66a7a094429"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1310ff035d548056ad4a0def038a6c5dedd98b47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1310ff035d548056ad4a0def038a6c5dedd98b47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1310ff035d548056ad4a0def038a6c5dedd98b47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1310ff035d548056ad4a0def038a6c5dedd98b47/comments", "author": null, "committer": null, "parents": [{"sha": "8d1628eb33d4f53832d6d4be2b0021353057a370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1628eb33d4f53832d6d4be2b0021353057a370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d1628eb33d4f53832d6d4be2b0021353057a370"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "c09e0f10e7570cfdd39388345ea677cf0e9cef42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1310ff035d548056ad4a0def038a6c5dedd98b47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1310ff035d548056ad4a0def038a6c5dedd98b47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1310ff035d548056ad4a0def038a6c5dedd98b47", "patch": "@@ -1,3 +1,7 @@\n+2017-07-19  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* config/nvptx/nvptx.c (nvptx_print_operand): Handle v2 vector mode.\n+\n 2017-07-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/81346"}, {"sha": "ebfa1e7b00e269991029b8e3cd17f49a6c331acb", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1310ff035d548056ad4a0def038a6c5dedd98b47/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1310ff035d548056ad4a0def038a6c5dedd98b47/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=1310ff035d548056ad4a0def038a6c5dedd98b47", "patch": "@@ -2405,9 +2405,15 @@ nvptx_print_operand (FILE *file, rtx x, int code)\n     case 'u':\n       if (x_code == SUBREG)\n \t{\n-\t  mode = GET_MODE (SUBREG_REG (x));\n-\t  if (split_mode_p (mode))\n-\t    mode = maybe_split_mode (mode);\n+\t  machine_mode inner_mode = GET_MODE (SUBREG_REG (x));\n+\t  if (VECTOR_MODE_P (inner_mode)\n+\t      && (GET_MODE_SIZE (mode)\n+\t\t  <= GET_MODE_SIZE (GET_MODE_INNER (inner_mode))))\n+\t    mode = GET_MODE_INNER (inner_mode);\n+\t  else if (split_mode_p (inner_mode))\n+\t    mode = maybe_split_mode (inner_mode);\n+\t  else\n+\t    mode = inner_mode;\n \t}\n       fprintf (file, \"%s\", nvptx_ptx_type_from_mode (mode, code == 't'));\n       break;\n@@ -2508,7 +2514,14 @@ nvptx_print_operand (FILE *file, rtx x, int code)\n \t    machine_mode inner_mode = GET_MODE (inner_x);\n \t    machine_mode split = maybe_split_mode (inner_mode);\n \n-\t    if (split_mode_p (inner_mode)\n+\t    if (VECTOR_MODE_P (inner_mode)\n+\t\t&& (GET_MODE_SIZE (mode)\n+\t\t    <= GET_MODE_SIZE (GET_MODE_INNER (inner_mode))))\n+\t      {\n+\t\toutput_reg (file, REGNO (inner_x), VOIDmode);\n+\t\tfprintf (file, \".%s\", SUBREG_BYTE (x) == 0 ? \"x\" : \"y\");\n+\t      }\n+\t    else if (split_mode_p (inner_mode)\n \t\t&& (GET_MODE_SIZE (inner_mode) == GET_MODE_SIZE (mode)))\n \t      output_reg (file, REGNO (inner_x), split);\n \t    else\n@@ -2550,6 +2563,22 @@ nvptx_print_operand (FILE *file, rtx x, int code)\n \t    fprintf (file, \"0d%08lx%08lx\", vals[1], vals[0]);\n \t  break;\n \n+\tcase CONST_VECTOR:\n+\t  {\n+\t    unsigned n = CONST_VECTOR_NUNITS (x);\n+\t    fprintf (file, \"{ \");\n+\t    for (unsigned i = 0; i < n; ++i)\n+\t      {\n+\t\tif (i != 0)\n+\t\t  fprintf (file, \", \");\n+\n+\t\trtx elem = CONST_VECTOR_ELT (x, i);\n+\t\toutput_addr_const (file, elem);\n+\t      }\n+\t    fprintf (file, \" }\");\n+\t  }\n+\t  break;\n+\n \tdefault:\n \t  output_addr_const (file, x);\n \t}"}]}