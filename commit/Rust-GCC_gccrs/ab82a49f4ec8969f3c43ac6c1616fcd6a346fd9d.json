{"sha": "ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI4MmE0OWY0ZWM4OTY5ZjNjNDNhYzZjMTYxNmZjZDZhMzQ2ZmQ5ZA==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@apple.com", "date": "2003-03-11T01:41:11Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-03-11T01:41:11Z"}, "message": "darwin.c (machopic_function_base_name): If dynamic-no-pic is on should not get here.\n\n2003-03-10  Andrew Pinski  <apinski@apple.com>\n\n\t* config/darwin.c (machopic_function_base_name): If dynamic-no-pic\n\tis on should not get here.\n\t(machopic_indirect_data_reference): If dynamic-no-pic is on just\n\tgenerate high/low parts of the address.\n\t(machopic_legitimize_pic_address): Change MACHOPIC_PURE to\n\tMACHOPIC_INDIRECT. Dynamic-no-pic uses 0 as the pic base. Generate\n\tsymbol and labels with a new reg.  Dynamic-no-pic does not have a\n\tpic_offset_table_rtx.\n\t(machopic_select_section): Change references of flag_pic to\n\tMACHOPIC_INDIRECT.\n\t(machopic_asm_out_destructor): Likewise.\n\t* config/darwin.h (ASM_DECLARE_UNRESOLVED_REFERENCE): Change\n\treference of flag_pic to MACHOPIC_INDIRECT.\n\t(MACHO_DYNAMIC_NO_PIC_P): Define as TARGET_DYNAMIC_NO_PIC.\n\t(MACHOPIC_INDIRECT): Is also true when dynamic-no-pic is on.\n\t(MACHOPIC_JUST_INDIRECT): Is also true when dynamic-no-pic is on.\n\t(MACHOPIC_PURE): Is not pure when dynamic-no-pic is on.\n\t* config/i386/darwin.h (MASK_MACHO_DYNAMIC_NO_PIC): Define as\n\t0 for right now as dynamic-no-pic is not implemented on Darwin/ia32.\n\t* config/rs6000/darwin.h (MASK_MACHO_DYNAMIC_NO_PIC): Define.\n\t(TARGET_DYNAMIC_NO_PIC): Define.\n\t(SUBTARGET_SWITCHES): Define, have sub-target switches for\n\tdynamic-no-pic.\n\t(SUBTARGET_OVERRIDE_OPTIONS): Move check for -fpic from\n\trs6000_override_options to here. Dynamic-no-pic overrides\n\tpic.\n\t(CC1_SPEC): Change from not static then pic to not static and not\n\tdynamic-no-pic then pic.\n\t* config/rs6000/rs6000.c (rs6000_override_options): Move the\n\tcheck for -fpic and DARWIN_ABI to config/rs6000/darwin.h\n\t(rs6000_legitimize_reload_address): Add case for loading floating in\n\tdynamic-no-pic.\n\t(rs6000_emit_move): Add case for dynamic-no-pic.  Change reference\n\tof flag_pic to MACHOPIC_INDIRECT.\n\t(secondary_reload_class): Conditional change the reference of\n\tflag_pic to MACHOPIC_INDIRECT.\n\t(rs6000_output_mi_thunk): Change reference of flag_pic to\n\tMACHOPIC_INDIRECT.\n\t(output_profile_hook): Likewise.\n\t(machopic_output_stub):\tNon-pure (dynamic-no-pic) is now supported.\n\t* config/rs6000/rs6000.md (movdf_low): Add the case for\n\tMACHO_DYNAMIC_NO_PIC_P.\n\t(call): Change references for flag_pic in TARGET_MACHO to\n\tMACHOPIC_INDIRECT.\n\t(SUBTARGET_OVERRIDE_OPTIONS): Add case where -fpic is on and\n\t-mdynamic-no-pic is on.\t Also move case for -fpic from rs6000.c.\n\t* doc/invoke.texi (-mdynamic-no-pic): Document.\n\nFrom-SVN: r64157", "tree": {"sha": "0f526257c8b54faa7d71bb0a217a93ddc14bd8e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f526257c8b54faa7d71bb0a217a93ddc14bd8e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d/comments", "author": null, "committer": null, "parents": [{"sha": "8c124730401c786b80a9a5027afe1eeb7fd2a968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c124730401c786b80a9a5027afe1eeb7fd2a968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c124730401c786b80a9a5027afe1eeb7fd2a968"}], "stats": {"total": 252, "additions": 218, "deletions": 34}, "files": [{"sha": "c0cadc5e15c23ea996ff616b83d9e12d3cc1a894", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d", "patch": "@@ -1,3 +1,52 @@\n+2003-03-10  Andrew Pinski  <apinski@apple.com>\n+\n+\t* config/darwin.c (machopic_function_base_name): If dynamic-no-pic\n+\tis on should not get here.\n+\t(machopic_indirect_data_reference): If dynamic-no-pic is on just\n+\tgenerate high/low parts of the address.\n+\t(machopic_legitimize_pic_address): Change MACHOPIC_PURE to\n+\tMACHOPIC_INDIRECT. Dynamic-no-pic uses 0 as the pic base. Generate\n+\tsymbol and labels with a new reg.  Dynamic-no-pic does not have a\n+\tpic_offset_table_rtx.\n+\t(machopic_select_section): Change references of flag_pic to\n+\tMACHOPIC_INDIRECT. \n+\t(machopic_asm_out_destructor): Likewise.\n+\t* config/darwin.h (ASM_DECLARE_UNRESOLVED_REFERENCE): Change\n+\treference of flag_pic to MACHOPIC_INDIRECT.\n+\t(MACHO_DYNAMIC_NO_PIC_P): Define as TARGET_DYNAMIC_NO_PIC.\n+\t(MACHOPIC_INDIRECT): Is also true when dynamic-no-pic is on.\n+\t(MACHOPIC_JUST_INDIRECT): Is also true when dynamic-no-pic is on.\n+\t(MACHOPIC_PURE): Is not pure when dynamic-no-pic is on.\n+\t* config/i386/darwin.h (MASK_MACHO_DYNAMIC_NO_PIC): Define as\n+\t0 for right now as dynamic-no-pic is not implemented on Darwin/ia32.\n+\t* config/rs6000/darwin.h (MASK_MACHO_DYNAMIC_NO_PIC): Define.\n+\t(TARGET_DYNAMIC_NO_PIC): Define.\n+\t(SUBTARGET_SWITCHES): Define, have sub-target switches for\n+\tdynamic-no-pic. \n+\t(SUBTARGET_OVERRIDE_OPTIONS): Move check for -fpic from\n+\trs6000_override_options to here. Dynamic-no-pic overrides\n+\tpic.\n+\t(CC1_SPEC): Change from not static then pic to not static and not\n+\tdynamic-no-pic then pic.\n+\t* config/rs6000/rs6000.c (rs6000_override_options): Move the\n+\tcheck for -fpic and DARWIN_ABI to config/rs6000/darwin.h\n+\t(rs6000_legitimize_reload_address): Add case for loading floating in\n+\tdynamic-no-pic.\n+\t(rs6000_emit_move): Add case for dynamic-no-pic.  Change reference\n+\tof flag_pic to MACHOPIC_INDIRECT.\n+\t(secondary_reload_class): Conditional change the reference of\n+\tflag_pic to MACHOPIC_INDIRECT.\n+\t(rs6000_output_mi_thunk): Change reference of flag_pic to\n+\tMACHOPIC_INDIRECT.\n+\t(output_profile_hook): Likewise.\n+\t(machopic_output_stub):\tNon-pure (dynamic-no-pic) is now supported.\n+\t* config/rs6000/rs6000.md (movdf_low): Add the case for\n+\tMACHO_DYNAMIC_NO_PIC_P.\n+\t(call): Change references for flag_pic in TARGET_MACHO to\n+\tMACHOPIC_INDIRECT.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Add case where -fpic is on and\n+\t-mdynamic-no-pic is on.\t Also move case for -fpic from rs6000.c.\n+\t* doc/invoke.texi (-mdynamic-no-pic): Document.\n \n 2003-03-10  Devang Patel  <dpatel@apple.com>\n \t\n@@ -16,7 +65,6 @@\n \tcheck_function_return_warnings up to just after\n \tdelete_unreachable_blocks.\n \n-\n 2003-03-10  Stephane Carrez  <stcarrez@nerim.fr>\n \n \t* config/m68hc11/m68hc11.h (HARD_REGNO_RENAME_OK): Define."}, {"sha": "86b3425545a0cdc1fab215e6ef817791b57580a5", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 59, "deletions": 10, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d", "patch": "@@ -231,6 +231,9 @@ machopic_function_base_name ()\n   static const char *name = NULL;\n   static const char *current_name;\n \n+  /* if dynamic-no-pic is on, we should not get here */\n+  if (MACHO_DYNAMIC_NO_PIC_P)\n+    abort ();\n   current_name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (current_function_decl));\n \n   if (name != current_name)\n@@ -426,7 +429,20 @@ machopic_indirect_data_reference (orig, reg)\n     {\n       const char *name = XSTR (orig, 0);\n \n-      if (machopic_data_defined_p (name))\n+      int defined = machopic_data_defined_p (name);\n+\n+      if (defined && MACHO_DYNAMIC_NO_PIC_P)\n+\t{\n+#if defined (TARGET_TOC)\n+           emit_insn (gen_macho_high (reg, orig));  \n+           emit_insn (gen_macho_low (reg, reg, orig));\n+#else\n+\t   /* some other cpu -- writeme!  */\n+\t   abort ();\n+#endif\n+\t   return reg;\n+\t}\n+      else if (defined)\n \t{\n #if defined (TARGET_TOC) || defined (HAVE_lo_sum)\n \t  rtx pic_base = gen_rtx (SYMBOL_REF, Pmode, \n@@ -569,7 +585,7 @@ machopic_legitimize_pic_address (orig, mode, reg)\n {\n   rtx pic_ref = orig;\n \n-  if (! MACHOPIC_PURE)\n+  if (! MACHOPIC_INDIRECT)\n     return orig;\n \n   /* First handle a simple SYMBOL_REF or LABEL_REF */\n@@ -592,6 +608,10 @@ machopic_legitimize_pic_address (orig, mode, reg)\n \t  return reg;\n \t}  \n \n+      /* if dynamic-no-pic then use 0 as the pic base  */\n+      if (MACHO_DYNAMIC_NO_PIC_P)\n+\tpic_base = CONST0_RTX (Pmode);\n+      else\n       pic_base = gen_rtx (SYMBOL_REF, Pmode, machopic_function_base_name ());\n \n       if (GET_CODE (orig) == MEM)\n@@ -605,6 +625,27 @@ machopic_legitimize_pic_address (orig, mode, reg)\n \t    }\n \t\n #ifdef HAVE_lo_sum\n+\t  if (MACHO_DYNAMIC_NO_PIC_P\n+\t      && (GET_CODE (XEXP (orig, 0)) == SYMBOL_REF\n+\t\t  || GET_CODE (XEXP (orig, 0)) == LABEL_REF))\n+\t    {\n+#if defined (TARGET_TOC)\t/* ppc  */\n+\t      rtx temp_reg = (no_new_pseudos) ? reg : gen_reg_rtx (Pmode);\n+\t      rtx asym = XEXP (orig, 0);\n+\t      rtx mem;\n+\n+\t      emit_insn (gen_macho_high (temp_reg, asym));\n+\t      mem = gen_rtx_MEM (GET_MODE (orig),\n+\t\t\t\t gen_rtx (LO_SUM, Pmode, temp_reg, asym));\n+\t      RTX_UNCHANGING_P (mem) = 1;\n+\t      emit_insn (gen_rtx (SET, VOIDmode, reg, mem));\n+#else\n+\t      /* Some other CPU -- WriteMe! but right now there are no other platform that can use dynamic-no-pic  */\n+\t      abort ();\n+#endif\n+\t      pic_ref = reg;\n+\t    }\n+\t  else\n \t  if (GET_CODE (XEXP (orig, 0)) == SYMBOL_REF \n \t      || GET_CODE (XEXP (orig, 0)) == LABEL_REF)\n \t    {\n@@ -692,7 +733,9 @@ machopic_legitimize_pic_address (orig, mode, reg)\n \t      hi_sum_reg = reg;\n \n \t      emit_insn (gen_rtx (SET, Pmode, hi_sum_reg,\n-\t\t\t\t  gen_rtx (PLUS, Pmode,\n+\t\t\t   (MACHO_DYNAMIC_NO_PIC_P)\n+\t\t\t\t? gen_rtx (HIGH, Pmode, offset)\n+\t\t\t\t: gen_rtx (PLUS, Pmode,\n \t\t\t\t\t   pic_offset_table_rtx,\n \t\t\t\t\t   gen_rtx (HIGH, Pmode, offset))));\n \t      emit_insn (gen_rtx (SET, VOIDmode, reg,\n@@ -1137,7 +1180,8 @@ machopic_select_section (exp, reloc, align)\n \tobjc_string_object_section ();\n       else if (TREE_READONLY (exp) || TREE_CONSTANT (exp))\n \t{\n-\t  if (TREE_SIDE_EFFECTS (exp) || (flag_pic && reloc))\n+\t  \n+\t  if (TREE_SIDE_EFFECTS (exp) || (MACHOPIC_INDIRECT && reloc))\n \t    const_data_section ();\n \t  else\n \t    readonly_data_section ();\n@@ -1200,7 +1244,8 @@ machopic_select_section (exp, reloc, align)\n       else if ((TREE_READONLY (exp) || TREE_CONSTANT (exp))\n \t       && !TREE_SIDE_EFFECTS (exp))\n \t{\n-\t  if (flag_pic && reloc)\n+\t  \n+\t  if (MACHOPIC_INDIRECT && reloc)\n \t    const_data_section ();\n \t  else\n \t    readonly_data_section ();\n@@ -1210,7 +1255,8 @@ machopic_select_section (exp, reloc, align)\n     }\n   else if (TREE_READONLY (exp) || TREE_CONSTANT (exp))\n     {\n-      if (TREE_SIDE_EFFECTS (exp) || (flag_pic && reloc))\n+     \n+      if (TREE_SIDE_EFFECTS (exp) || (MACHOPIC_INDIRECT && reloc))\n \tconst_data_section ();\n       else\n \treadonly_data_section ();\n@@ -1243,14 +1289,16 @@ machopic_asm_out_constructor (symbol, priority)\n      rtx symbol;\n      int priority ATTRIBUTE_UNUSED;\n {\n-  if (flag_pic)\n+  \n+  if (MACHOPIC_INDIRECT)\n     mod_init_section ();\n   else\n     constructor_section ();\n   assemble_align (POINTER_SIZE);\n   assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n \n-  if (!flag_pic)\n+ \n+  if (! MACHOPIC_INDIRECT)\n     fprintf (asm_out_file, \".reference .constructors_used\\n\");\n }\n \n@@ -1259,14 +1307,15 @@ machopic_asm_out_destructor (symbol, priority)\n      rtx symbol;\n      int priority ATTRIBUTE_UNUSED;\n {\n-  if (flag_pic)\n+  \n+  if (MACHOPIC_INDIRECT)\n     mod_term_section ();\n   else\n     destructor_section ();\n   assemble_align (POINTER_SIZE);\n   assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n \n-  if (!flag_pic)\n+  if (! MACHOPIC_INDIRECT)\n     fprintf (asm_out_file, \".reference .destructors_used\\n\");\n }\n "}, {"sha": "8826a7dfa0bc335e37b3998f60e70da05d45bee0", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d", "patch": "@@ -676,7 +676,7 @@ objc_section_init ()\t\t\t\t\\\n #define ASM_DECLARE_UNRESOLVED_REFERENCE(FILE,NAME)\t\t\t\\\n     do { \t\t\t\t\t\t\t\t\\\n \t if (FILE) {\t\t\t\t\t\t\t\\\n-\t   if (flag_pic)\t\t\t\t\t\t\\\n+\t   if (MACHOPIC_INDIRECT)\t\t\t\t\t\\\n \t     fprintf (FILE, \"\\t.lazy_reference \");\t\t\t\\\n \t   else\t\t\t\t\t\t\t\t\\\n \t     fprintf (FILE, \"\\t.reference \");\t\t\t\t\\\n@@ -722,9 +722,10 @@ enum machopic_addr_class {\n \n /* Macros defining the various PIC cases.  */\n \n-#define MACHOPIC_INDIRECT      (flag_pic)\n-#define MACHOPIC_JUST_INDIRECT (flag_pic == 1)\n-#define MACHOPIC_PURE          (flag_pic == 2)\n+#define MACHO_DYNAMIC_NO_PIC_P\t(TARGET_DYNAMIC_NO_PIC)\n+#define MACHOPIC_INDIRECT\t(flag_pic || MACHO_DYNAMIC_NO_PIC_P)\n+#define MACHOPIC_JUST_INDIRECT\t(flag_pic == 1 || MACHO_DYNAMIC_NO_PIC_P)\n+#define MACHOPIC_PURE\t\t(flag_pic == 2 && ! MACHO_DYNAMIC_NO_PIC_P)\n \n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO  darwin_encode_section_info"}, {"sha": "43881894f36cea822cf25dac578e24fc123ade5e", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d", "patch": "@@ -68,6 +68,11 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_DEEP_BRANCH_PREDICTION\n #define TARGET_DEEP_BRANCH_PREDICTION   0\n \n+/* For now, disable dynamic-no-pic.  We'll need to go through i386.c\n+   with a fine-tooth comb looking for refs to flag_pic!  */\n+#define MASK_MACHO_DYNAMIC_NO_PIC 0\n+#define TARGET_DYNAMIC_NO_PIC\t  (target_flags & MASK_MACHO_DYNAMIC_NO_PIC)\n+\n /* Define the syntax of pseudo-ops, labels and comments.  */\n \n #define LPREFIX \"L\""}, {"sha": "e6324af7ca00ca37f2d07dc5f65b5ecedb165975", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d", "patch": "@@ -35,14 +35,15 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_TOC 0\n #define TARGET_NO_TOC 1\n \n+/* Darwin switches.  */\n+/* Use dynamic-no-pic codegen (no picbase reg; not suitable for shlibs.)  */\n+#define MASK_MACHO_DYNAMIC_NO_PIC 0x00800000\n+\n+#define TARGET_DYNAMIC_NO_PIC\t(target_flags & MASK_MACHO_DYNAMIC_NO_PIC)\n+\n /* Handle #pragma weak and #pragma pack.  */\n #define HANDLE_SYSV_PRAGMA 1\n \n-/* The Darwin ABI always includes AltiVec, can't be (validly) turned\n-   off.  */\n-\n-#define SUBTARGET_OVERRIDE_OPTIONS  \\\n-  rs6000_altivec_abi = 1;\n \n #define TARGET_OS_CPP_BUILTINS()                \\\n   do                                            \\\n@@ -55,12 +56,45 @@ Boston, MA 02111-1307, USA.  */\n     }                                           \\\n   while (0)\n \n+\n+/*  */\n+#undef\tSUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n+  {\"dynamic-no-pic\",\tMASK_MACHO_DYNAMIC_NO_PIC,\t\t\t\\\n+      N_(\"Generate code suitable for executables (NOT shared libs)\")},\t\\\n+  {\"no-dynamic-no-pic\",\t-MASK_MACHO_DYNAMIC_NO_PIC, \"\"},\n+\n+\n+/* The Darwin ABI always includes AltiVec, can't be (validly) turned\n+   off.  */\n+\n+#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t  \t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  rs6000_altivec_abi = 1;\t\t\t\t\t\t\\\n+  if (DEFAULT_ABI == ABI_DARWIN)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    if (MACHO_DYNAMIC_NO_PIC_P)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+        if (flag_pic)\t\t\t\t\t\t\t\\\n+            warning (\"-mdynamic-no-pic overrides -fpic or -fPIC\");\t\\\n+        flag_pic = 0;\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    else if (flag_pic == 1)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+        /* Darwin doesn't support -fpic.  */\t\t\t\t\\\n+        warning (\"-fpic is not supported; -fPIC assumed\");\t\t\\\n+        flag_pic = 2;\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+}while(0)\n+\n /* We want -fPIC by default, unless we're using -static to compile for\n    the kernel or some such.  */\n \n+\n #define CC1_SPEC \"\\\n %{static: %{Zdynamic: %e conflicting code gen style switches are used}}\\\n-%{!static:-fPIC}\"\n+%{!static:%{!mdynamic-no-pic:-fPIC}}\"\n \n /* Make both r2 and r3 available for allocation.  */\n #define FIXED_R2 0"}, {"sha": "c1ed4764f0c84a9bdaf2fb21c74ae4fb09528d79", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d", "patch": "@@ -643,10 +643,6 @@ rs6000_override_options (default_cpu)\n       flag_pic = 0;\n     }\n \n-  /* For Darwin, always silently make -fpic and -fPIC identical.  */\n-  if (flag_pic == 1 && DEFAULT_ABI == ABI_DARWIN)\n-    flag_pic = 2;\n-\n   /* Set debug flags */\n   if (rs6000_debug_name)\n     {\n@@ -2228,6 +2224,9 @@ rs6000_legitimize_address (x, oldx, mode)\n     }\n   else if (TARGET_MACHO && TARGET_32BIT && TARGET_NO_TOC\n \t   && ! flag_pic\n+#if TARGET_MACHO\n+\t   && ! MACHO_DYNAMIC_NO_PIC_P\n+#endif\n \t   && GET_CODE (x) != CONST_INT\n \t   && GET_CODE (x) != CONST_DOUBLE \n \t   && CONSTANT_P (x)\n@@ -2367,6 +2366,20 @@ rs6000_legitimize_reload_address (x, mode, opnum, type, ind_levels, win)\n       *win = 1;\n       return x;\n     }\n+   if (GET_CODE (x) == SYMBOL_REF\n+       && DEFAULT_ABI == ABI_DARWIN\n+       && !ALTIVEC_VECTOR_MODE (mode)\n+       && MACHO_DYNAMIC_NO_PIC_P)\n+     {\n+       /* Darwin load of floating point constant.  */\n+       x = gen_rtx (LO_SUM, GET_MODE (x),\n+               gen_rtx (HIGH, Pmode, x), x);\n+       push_reload (XEXP (x, 0), NULL_RTX, &XEXP (x, 0), NULL,\n+               BASE_REG_CLASS, Pmode, VOIDmode, 0, 0,\n+               opnum, (enum reload_type)type);\n+       *win = 1;\n+       return x;\n+     }\n #endif\n   if (TARGET_TOC\n       && CONSTANT_POOL_EXPR_P (x)\n@@ -2780,6 +2793,18 @@ rs6000_emit_move (dest, source, mode)\n \n \t  if (DEFAULT_ABI == ABI_DARWIN)\n \t    {\n+#if TARGET_MACHO\n+\t      if (MACHO_DYNAMIC_NO_PIC_P)\n+\t\t{\n+\t\t  /* Take care of any required data indirection.  */\n+\t\t  operands[1] = rs6000_machopic_legitimize_pic_address (\n+\t\t\t\t  operands[1], mode, operands[0]);\n+\t\t  if (operands[0] != operands[1])\n+\t\t    emit_insn (gen_rtx_SET (VOIDmode,\n+\t\t\t\t            operands[0], operands[1]));\n+\t\t  return;\n+\t\t}\n+#endif\n \t      emit_insn (gen_macho_high (target, operands[1]));\n \t      emit_insn (gen_macho_low (operands[0], target, operands[1]));\n \t      return;\n@@ -2824,7 +2849,7 @@ rs6000_emit_move (dest, source, mode)\n \n #if TARGET_MACHO\n \t  /* Darwin uses a special PIC legitimizer.  */\n-\t  if (DEFAULT_ABI == ABI_DARWIN && flag_pic)\n+\t  if (DEFAULT_ABI == ABI_DARWIN && MACHOPIC_INDIRECT)\n \t    {\n \t      operands[1] =\n \t\trs6000_machopic_legitimize_pic_address (operands[1], mode,\n@@ -7213,7 +7238,11 @@ secondary_reload_class (class, mode, in)\n {\n   int regno;\n \n-  if (TARGET_ELF || (DEFAULT_ABI == ABI_DARWIN && flag_pic))\n+  if (TARGET_ELF || (DEFAULT_ABI == ABI_DARWIN\n+#if TARGET_MACHO\n+                    && MACHOPIC_INDIRECT\n+#endif\n+                    ))\n     {\n       /* We cannot copy a symbolic operand directly into anything\n          other than BASE_REGS for TARGET_ELF.  So indicate that a\n@@ -11567,7 +11596,7 @@ rs6000_output_mi_thunk (file, thunk_fndecl, delta, vcall_offset, function)\n   funexp = gen_rtx_MEM (FUNCTION_MODE, funexp);\n \n #if TARGET_MACHO\n-  if (flag_pic)\n+  if (MACHOPIC_INDIRECT)\n     funexp = machopic_indirect_call_target (funexp);\n #endif\n \n@@ -12218,7 +12247,7 @@ output_profile_hook (labelno)\n #if TARGET_MACHO\n       /* For PIC code, set up a stub and collect the caller's address\n \t from r0, which is where the prologue puts it.  */\n-      if (flag_pic)\n+      if (MACHOPIC_INDIRECT)\n \t{\n \t  mcount_name = machopic_stub_name (mcount_name);\n \t  if (current_function_uses_pic_offset_table)\n@@ -13106,7 +13135,12 @@ machopic_output_stub (file, symb, stub)\n       fprintf (file, \"\\tbctr\\n\");\n     }\n   else\n-    fprintf (file, \"non-pure not supported\\n\");\n+   {\n+     fprintf (file, \"\\tlis r11,ha16(%s)\\n\", lazy_ptr_name);\n+     fprintf (file, \"\\tlwzu r12,lo16(%s)(r11)\\n\", lazy_ptr_name);\n+     fprintf (file, \"\\tmtctr r12\\n\");\n+     fprintf (file, \"\\tbctr\\n\");\n+   }\n   \n   machopic_lazy_symbol_ptr_section ();\n   fprintf (file, \"%s:\\n\", lazy_ptr_name);"}, {"sha": "ae4c65d257948fc2cc5d2c92d57c85c356b8605c", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d", "patch": "@@ -7531,9 +7531,14 @@\n \t  operands2[2] = operands[2];\n \t  operands2[3] = gen_rtx_REG (SImode, RS6000_PIC_OFFSET_TABLE_REGNUM);\n \t  output_asm_insn (\\\"{l|lwz} %0,lo16(%2)(%1)\\\", operands);\n+#if TARGET_MACHO\n+\t  if (MACHO_DYNAMIC_NO_PIC_P)\n+\t    output_asm_insn (\\\"{liu|lis} %L0,ha16(%2+4)\\\", operands);\n+\t  else\n \t  /* We cannot rely on ha16(low half)==ha16(high half), alas,\n \t     although in practice it almost always is.  */\n \t  output_asm_insn (\\\"{cau|addis} %L0,%3,ha16(%2+4)\\\", operands2);\n+#endif\n \t  return (\\\"{l|lwz} %L0,lo16(%2+4)(%L0)\\\");\n \t}\n       default:\n@@ -9986,7 +9991,7 @@\n   \"\n {\n #if TARGET_MACHO\n-  if (flag_pic)\n+  if (MACHOPIC_INDIRECT)\n     operands[0] = machopic_indirect_call_target (operands[0]);\n #endif\n \n@@ -10034,7 +10039,7 @@\n   \"\n {\n #if TARGET_MACHO\n-  if (flag_pic)\n+  if (MACHOPIC_INDIRECT)\n     operands[1] = machopic_indirect_call_target (operands[1]);\n #endif\n \n@@ -10399,7 +10404,7 @@\n   \"\n {\n #if TARGET_MACHO\n-  if (flag_pic)\n+  if (MACHOPIC_INDIRECT)\n     operands[0] = machopic_indirect_call_target (operands[0]);\n #endif\n \n@@ -10586,7 +10591,7 @@\n   \"\n {\n #if TARGET_MACHO\n-  if (flag_pic)\n+  if (MACHOPIC_INDIRECT)\n     operands[1] = machopic_indirect_call_target (operands[1]);\n #endif\n "}, {"sha": "f26de77ae84f620b4a82d36237978e579c4425b5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ab82a49f4ec8969f3c43ac6c1616fcd6a346fd9d", "patch": "@@ -441,6 +441,7 @@ in the following sections.\n -mstrict-align  -mno-strict-align  -mrelocatable @gol\n -mno-relocatable  -mrelocatable-lib  -mno-relocatable-lib @gol\n -mtoc  -mno-toc -mlittle  -mlittle-endian  -mbig  -mbig-endian @gol\n+-mdynamic-no-pic @gol\n -mcall-aix -mcall-sysv -mcall-netbsd @gol\n -maix-struct-return -msvr4-struct-return @gol\n -mabi=altivec -mabi=no-altivec @gol\n@@ -7225,6 +7226,13 @@ On System V.4 and embedded PowerPC systems compile code for the\n processor in big endian mode.  The @option{-mbig-endian} option is\n the same as @option{-mbig}.\n \n+@item -mdynamic-no-pic\n+@opindex mdynamic-no-pic\n+On Darwin and Mac OS X systems, compile code so that it is not\n+relocatable, but that its external references are relocatable.  The\n+resulting code is suitable for applications, but not shared\n+libraries.\n+\n @item -mcall-sysv\n @opindex mcall-sysv\n On System V.4 and embedded PowerPC systems compile code using calling"}]}