{"sha": "6a9c4224e411c625e326927ebf75e27b8fe2d26b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE5YzQyMjRlNDExYzYyNWUzMjY5MjdlYmY3NWUyN2I4ZmUyZDI2Yg==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2019-11-08T00:27:06Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2019-11-08T00:27:06Z"}, "message": "pa.md (memory_barrier): Revise to use ldcw barriers.\n\n\t* config/pa/pa.md (memory_barrier): Revise to use ldcw barriers.\n\tEnhance comment.\n\t(memory_barrier_coherent, memory_barrier_64, memory_barrier_32): New\n\tinsn patterns using ldcw instruction.\n\t(memory_barrier): Remove insn pattern using sync instruction.\n\t* config/pa/pa.opt (coherent-ldcw): New option.\n\t(ordered): New option.\n\nFrom-SVN: r277941", "tree": {"sha": "79c457b7370f75030fe8b6df6056141e3f50d378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79c457b7370f75030fe8b6df6056141e3f50d378"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a9c4224e411c625e326927ebf75e27b8fe2d26b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a9c4224e411c625e326927ebf75e27b8fe2d26b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a9c4224e411c625e326927ebf75e27b8fe2d26b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a9c4224e411c625e326927ebf75e27b8fe2d26b/comments", "author": null, "committer": null, "parents": [{"sha": "fe335098d55e9efd933ec8f56b07752048454092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe335098d55e9efd933ec8f56b07752048454092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe335098d55e9efd933ec8f56b07752048454092"}], "stats": {"total": 70, "additions": 60, "deletions": 10}, "files": [{"sha": "f1f15dadc66ff7e3b7fa48aba9070a13d1fc7803", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a9c4224e411c625e326927ebf75e27b8fe2d26b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a9c4224e411c625e326927ebf75e27b8fe2d26b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a9c4224e411c625e326927ebf75e27b8fe2d26b", "patch": "@@ -1,3 +1,13 @@\n+2019-11-07  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/pa.md (memory_barrier): Revise to use ldcw barriers.\n+\tEnhance comment.\n+\t(memory_barrier_coherent, memory_barrier_64, memory_barrier_32): New\n+\tinsn patterns using ldcw instruction.\n+\t(memory_barrier): Remove insn pattern using sync instruction.\n+\t* config/pa/pa.opt (coherent-ldcw): New option.\n+\t(ordered): New option.\n+\n 2019-11-07  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.c (validate_condition_mode): Don't assert for"}, {"sha": "723ba13753818ccac8d74b4df1b546430c288ba3", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a9c4224e411c625e326927ebf75e27b8fe2d26b/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a9c4224e411c625e326927ebf75e27b8fe2d26b/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=6a9c4224e411c625e326927ebf75e27b8fe2d26b", "patch": "@@ -10086,23 +10086,55 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n    (set_attr \"length\" \"4,16\")])\n \n ;; PA 2.0 hardware supports out-of-order execution of loads and stores, so\n-;; we need a memory barrier to enforce program order for memory references.\n-;; Since we want PA 1.x code to be PA 2.0 compatible, we also need the\n-;; barrier when generating PA 1.x code.\n+;; we need memory barriers to enforce program order for memory references\n+;; when the TLB and PSW O bits are not set.  We assume all PA 2.0 systems\n+;; are weakly ordered since neither HP-UX or Linux set the PSW O bit.  Since\n+;; we want PA 1.x code to be PA 2.0 compatible, we also need barriers when\n+;; generating PA 1.x code even though all PA 1.x systems are strongly ordered.\n+\n+;; When barriers are needed, we use a strongly ordered ldcw instruction as\n+;; the barrier.  Most PA 2.0 targets are cache coherent.  In that case, we\n+;; can use the coherent cache control hint and avoid aligning the ldcw\n+;; address.  In spite of its description, it is not clear that the sync\n+;; instruction works as a barrier.\n \n (define_expand \"memory_barrier\"\n-  [(set (match_dup 0)\n-        (unspec:BLK [(match_dup 0)] UNSPEC_MEMORY_BARRIER))]\n+  [(parallel\n+     [(set (match_dup 0) (unspec:BLK [(match_dup 0)] UNSPEC_MEMORY_BARRIER))\n+      (clobber (match_dup 1))])]\n   \"\"\n {\n-  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  /* We don't need a barrier if the target uses ordered memory references.  */\n+  if (TARGET_ORDERED)\n+    FAIL;\n+  operands[1] = gen_reg_rtx (Pmode);\n+  operands[0] = gen_rtx_MEM (BLKmode, operands[1]);\n   MEM_VOLATILE_P (operands[0]) = 1;\n })\n \n-(define_insn \"*memory_barrier\"\n+(define_insn \"*memory_barrier_coherent\"\n   [(set (match_operand:BLK 0 \"\" \"\")\n-        (unspec:BLK [(match_dup 0)] UNSPEC_MEMORY_BARRIER))]\n-  \"\"\n-  \"sync\"\n+        (unspec:BLK [(match_dup 0)] UNSPEC_MEMORY_BARRIER))\n+   (clobber (match_operand 1 \"pmode_register_operand\" \"=r\"))]\n+  \"TARGET_PA_20 && TARGET_COHERENT_LDCW\"\n+  \"ldcw,co 0(%%sp),%1\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*memory_barrier_64\"\n+  [(set (match_operand:BLK 0 \"\" \"\")\n+        (unspec:BLK [(match_dup 0)] UNSPEC_MEMORY_BARRIER))\n+    (clobber (match_operand 1 \"pmode_register_operand\" \"=&r\"))]\n+  \"TARGET_64BIT\"\n+  \"ldo 15(%%sp),%1\\n\\tdepd %%r0,63,3,%1\\n\\tldcw 0(%1),%1\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"12\")])\n+\n+(define_insn \"*memory_barrier_32\"\n+  [(set (match_operand:BLK 0 \"\" \"\")\n+        (unspec:BLK [(match_dup 0)] UNSPEC_MEMORY_BARRIER))\n+    (clobber (match_operand 1 \"pmode_register_operand\" \"=&r\"))]\n+  \"\"\n+  \"ldo 15(%%sp),%1\\n\\t{dep|depw} %%r0,31,3,%1\\n\\tldcw 0(%1),%1\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"12\")])"}, {"sha": "4cb811099332b733dc735e1cec379b92c09e8c58", "filename": "gcc/config/pa/pa.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a9c4224e411c625e326927ebf75e27b8fe2d26b/gcc%2Fconfig%2Fpa%2Fpa.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a9c4224e411c625e326927ebf75e27b8fe2d26b/gcc%2Fconfig%2Fpa%2Fpa.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.opt?ref=6a9c4224e411c625e326927ebf75e27b8fe2d26b", "patch": "@@ -45,6 +45,10 @@ mcaller-copies\n Target Report Mask(CALLER_COPIES)\n Caller copies function arguments passed by hidden reference.\n \n+mcoherent-ldcw\n+Target Report Var(TARGET_COHERENT_LDCW) Init(1)\n+Use ldcw/ldcd coherent cache-control hint.\n+\n mdisable-fpregs\n Target Report Mask(DISABLE_FPREGS)\n Disable FP regs.\n@@ -90,6 +94,10 @@ mno-space-regs\n Target RejectNegative Report Mask(NO_SPACE_REGS)\n Disable space regs.\n \n+mordered\n+Target Report Var(TARGET_ORDERED) Init(0)\n+Assume memory references are ordered and barriers are not needed.\n+\n mpa-risc-1-0\n Target RejectNegative\n Generate PA1.0 code."}]}