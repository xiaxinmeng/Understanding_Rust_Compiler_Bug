{"sha": "7d9979e629a54f0d7e3378c90c7eb1adfd76196e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q5OTc5ZTYyOWE1NGYwZDdlMzM3OGM5MGM3ZWIxYWRmZDc2MTk2ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-04-02T08:56:19Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-04-02T08:56:19Z"}, "message": "decl.c (components_to_record): Restrict the previous change to fields with variable size.\n\n\t* gcc-interface/decl.c (components_to_record): Restrict the previous\n\tchange to fields with variable size.\n\nFrom-SVN: r234696", "tree": {"sha": "9690b9b585bb4dd9f25f78db7b6a15848333ded1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9690b9b585bb4dd9f25f78db7b6a15848333ded1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d9979e629a54f0d7e3378c90c7eb1adfd76196e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9979e629a54f0d7e3378c90c7eb1adfd76196e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d9979e629a54f0d7e3378c90c7eb1adfd76196e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9979e629a54f0d7e3378c90c7eb1adfd76196e/comments", "author": null, "committer": null, "parents": [{"sha": "ddd6d4211a152d5f493fc634c210bbadb9ae0217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd6d4211a152d5f493fc634c210bbadb9ae0217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd6d4211a152d5f493fc634c210bbadb9ae0217"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "6f84ab326934c8261d0ddddeda3229f1cddc8342", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9979e629a54f0d7e3378c90c7eb1adfd76196e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9979e629a54f0d7e3378c90c7eb1adfd76196e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7d9979e629a54f0d7e3378c90c7eb1adfd76196e", "patch": "@@ -1,6 +1,11 @@\n+2016-04-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (components_to_record): Restrict the previous\n+\tchange to fields with variable size.\n+\n 2016-03-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n-\t* gcc-interface/decl.c (components_to_record): Add special case for     \n+\t* gcc-interface/decl.c (components_to_record): Add special case for\n \tsingle field with representation clause at offset 0.\n \n 2016-03-16  Svante Signell  <svante.signell@gmail.com>"}, {"sha": "87026e742bb56059430f571df03498be87756ca6", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9979e629a54f0d7e3378c90c7eb1adfd76196e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9979e629a54f0d7e3378c90c7eb1adfd76196e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=7d9979e629a54f0d7e3378c90c7eb1adfd76196e", "patch": "@@ -7606,13 +7606,15 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n   if (p_gnu_rep_list && gnu_rep_list)\n     *p_gnu_rep_list = chainon (*p_gnu_rep_list, gnu_rep_list);\n \n-  /* If only one field has a rep clause and it starts at 0, put back the field\n-     at the head of the regular field list.  This will avoid creating a useless\n-     REP part below and deal with the annoying case of an extension of a record\n-     with variable size and rep clause, for which the _Parent field is forced\n-     at offset 0 and has variable size, which we do not support below.  */\n+  /* Deal with the annoying case of an extension of a record with variable size\n+     and partial rep clause, for which the _Parent field is forced at offset 0\n+     and has variable size, which we do not support below.  Note that we cannot\n+     do it if the field has fixed size because we rely on the presence of the\n+     REP part built below to trigger the reordering of the fields in a derived\n+     record type when all the fields have a fixed position.  */\n   else if (gnu_rep_list\n \t   && !DECL_CHAIN (gnu_rep_list)\n+\t   && TREE_CODE (DECL_SIZE (gnu_rep_list)) != INTEGER_CST\n \t   && !variants_have_rep\n \t   && first_free_pos\n \t   && integer_zerop (first_free_pos)"}]}